[00:00] <sena_kun> awww, constantly failing MISC/bug-coverage-stress-6.d and S17-procasync/kill, my old friends of slow machines

[00:03] <Geth> ¦ roast/salortiz-is-List-tests: d9b99c9643 | (Salvador Ortiz)++ (committed using GitHub Web editor) | S32-list/create.t

[00:03] <Geth> ¦ roast/salortiz-is-List-tests: Attend @vrurg requests

[00:03] <Geth> ¦ roast/salortiz-is-List-tests: review: https://github.com/Raku/roast/commit/d9b99c9643

[00:45] *** sortiz left
[01:06] *** sena_kun left
[01:06] *** Altai-man_ joined
[02:06] *** evalable6 left
[02:06] *** linkable6 left
[02:07] *** evalable6 joined
[02:08] *** linkable6 joined
[02:48] *** kvw_5 joined
[02:52] *** kvw_5_ left
[03:16] *** leont left
[03:19] <Geth> ¦ rakudo: codesections++ created pull request #4209: Implement space-delimited CLI arguments (S06; S19)

[03:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4209

[09:04] *** sxmx joined
[10:20] *** Kaiepi joined
[10:37] <lizmat> Altai-man_++    # another Rakudo Compiler release!

[10:46] <El_Che> not out yet, but imminent?

[11:04] <lizmat> ah....  ok

[11:04] <lizmat> $ raku -v

[11:04] <lizmat> Welcome to Rakudo(tm) v2020.12-135-g9d5de05f4.

[11:05] <lizmat> ++Altai-man_ 

[11:05] <lizmat> :-)

[11:12] *** Geth left
[11:13] <Altai-man_> Today.

[11:13] <Altai-man_> I hope.

[11:46] <El_Che> Altai-man_: ping me the (pre-) release commits or tags are there so I can build it on the linux distros I package, as a test run

[12:05] <Altai-man_> El_Che, https://github.com/rakudo/rakudo/commit/9d5de05f4ce831ae2f3ca44551d38bdbb6b57f9c

[12:06] <El_Che> Altai-man_: that commit and HEAD of MoarVM and NQP?

[12:06] <Altai-man_> El_Che, https://github.com/MoarVM/MoarVM/commit/37156f5689ad9ebeef334797183a239d7e5802e0 and https://github.com/Raku/nqp/commit/57e63c06553a3e6748790dc7406964f9087e0e68

[12:06] <El_Che> my devbuild trigger looks like this: https://raw.githubusercontent.com/nxadm/rakudo-pkg/master/docs/devbuild.png

[12:07] <El_Che> OK, I will trigger it now

[12:07] <Altai-man_> Some flappers are not flappers on this machine.

[12:07] <Altai-man_> When run as a suite, that's why it takes so long.

[12:08] <Altai-man_> And as I remember from last discussion fixing kill.t test is impossible or something.

[12:10] <El_Che> Altai-man_: https://github.com/nxadm/rakudo-pkg/runs/1945853994

[12:11] <El_Che> Altai-man_: sadly, github does not show the contents of the steps when not owner (but you can run the tests yourself if you fork the repo)

[12:11] <El_Che> everything is building atm

[12:12] <Altai-man_> I wonder what would be first: packages ready or release shipped.

[12:13] <El_Che> I am nog building the packages yet

[12:13] <El_Che> this is just to test the release

[12:14] <Altai-man_> Isn't it "tested" by building packages?

[12:14] <El_Che> it's similar

[12:14] <El_Che> but two workflows

[12:14] <El_Che> the devbuild does not package and upload them

[12:14] <El_Che> just doe the build 

[12:15] <El_Che> with tests in debug mode and with optimizer disabled by default (it can be changed in the trigger I posted)

[12:15] <El_Che> packages are only created and uploaden when I tag it

[12:15] <El_Che> ok, everything fails :)

[12:16] <El_Che>  /opt/rakudo-pkg/bin/nqp-m version 2020.12 is outdated, 2020.12-19-g57e63c065 expected. at /__w/rakudo-pkg/rakudo-pkg/rakudo/3rdparty/nqp-configure/lib/NQP/Config.pm line 192.

[12:16] <El_Che> so it looks something needs to be adapted at this stage:

[12:16] <El_Che> + cd rakudo

[12:16] <El_Che> + perl ./Configure.pl --relocatable '--backends=moar' '--prefix=/opt/rakudo-pkg'

[12:18] <Altai-man_> aaaaah

[12:19] <Altai-man_> Or, hmm, I am not sure how this happens.

[12:19] <Altai-man_> t/spec/MISC/bug-coverage-stress.rakudo.moar                     (Wstat: 256 Tests: 13 Failed: 1)

[12:19] <Altai-man_> t/spec/S17-procasync/kill.t                                     (Wstat: 65280 Tests: 8 Failed: 1)

[12:20] <Altai-man_> El_Che, I guess release has to happen with bumps pushed for it to work.

[12:21] <El_Che> that is a build check that should be adapted then

[12:22] <El_Che> "version 2020.12 is outdated, 2020.12-19-g57e63c065" does not make much sense

[12:22] <El_Che> (for after the release)

[12:22] <El_Che> we could go for 2021.02-rc1 tag or something?

[12:22] <El_Che> (not trying to slow down the release, it may be idea's for the future)

[12:23] <Altai-man_> no

[12:23] <Altai-man_> Or, at least, not now

[12:23] <El_Che> of course

[12:26] <nine> El_Che: since you're also packaging rakudo, I wonder how you process the ChangeLog?

[12:28] <El_Che> nine: I wasn't (besides "new upstream version"), but the new packaging system I use make it more feasable to import rakudo's

[12:29] <El_Che> nfpm uses this under the hood for changelogs: https://github.com/goreleaser/chglog

[12:32] <nine> I've found processing changelogs to be about 90 % of the time spent on packaging new releases. But I don't see a way to get around that considering the ~40 line limit and guidelines requesting to omit entries that are not relevant to a user (i.e. purely internal changes or changes affecting other platforms)

[12:34] <El_Che> we could create a TL;DR metachangelog for each release?

[12:41] <nine> Or create only that version. I mean, what do "Move `MVM_{set,get}_running_threads_context` to threadcontext.h" or "Cleanup two redundant returns" mean to the user anyway? If I want to get the full picture in all it's gory details, I can read the git history.

[12:43] <nine> As a user I look into changelogs when after an update something doesn't work anymore and I want to find out if I need to do something differntly now. Or to find out if there's a chance that a certain bug is fixed already. 

[12:44] <nine> Fixed compiler warnings? Probably not so interesting

[12:44] <El_Che> new features and bug fixes

[12:44] <nine> essentially, yes

[12:45] <El_Che> https://www.openldap.org/software/release/changes.html

[12:45] <El_Che> I regularly look stuff like that to see if there is something there with negative sonsequences

[12:45] <nine> "Move MVM_malloc_trim call after MVM_gc_collect_free_gen2_unmarked call"? What....does that mean? I have spent tons of time in the GC. And even I have to look at the commit in question to actually understand that message

[12:47] <nine> That raises a good point. Maybe instead of the git history, the changelog should list fixed issues instead (plus a manually collected list of new features)

[12:49] <El_Che> yes, so far we have been lucky with monthly releases (besides the dot release some times), but some people may want to pin releases for their apps in the feature

[12:50] <El_Che> a semver "promise" could help with that, but that ship has sailed

[12:51] <Altai-man_> About moarvm changelog

[12:51] <Altai-man_> I think since my first months of releasing it became, erm, kind of clear we have no free resources to make moarvm releases in time, so I am doing it.

[12:52] <Altai-man_> It goes without saying I know about nothing about internals, so I am imitating git log. And in fact changelogs written before me go the same way: they do have the same cryptic lines like "Move MVM_malloc_trim call after MVM_gc_collect_free_gen2_unmarked call".

[12:53] <Altai-man_> Erm, to be precise I am imitating how was it done before me, yes, and this imitates git log.

[12:53] <Altai-man_> Even more, I spend time to rewrite such things in "Fix a leak" or something simpler, but it is not always possible.

[12:53] <El_Che> Altai-man_: I think moarvm is something special

[12:53] <nine> Altai-man_: that's totally understandable

[12:54] <El_Che> users should only care about a rakudo tldr changelog, that include moarvm/nqp is user visible

[12:54] <El_Che> because moarvm can hypothetically be used by other projects and not directly by users, the changelog could be more into the tech details

[12:54] <masak> Altai-man_: you play it down, but that sounds awesome

[12:54] <Altai-man_> Rakudo changelog is better in this. It has clear section of additions/removals/changes/fixes etc, and if you don't want `Internals` section, just don't read it, it's at the end.

[12:55] <El_Che> (but because as fas as I know rakudo is the only consumer, I wouldn't worry about that now)

[12:55] <El_Che> I think the changelog expectations are different

[12:56] <El_Che> there is the readable and standalone doc, eg, for the weekly; and there is the debian/openldap like companion changelog, being as brief and pertinent as possible

[12:56] <masak> if the changelog is to have any purpose, it's as a kind of filtered Git log; something that has meaning to highly interested consumers of the software. maybe mostly on the internals/interfaces/API level of things.

[12:56] <El_Che> afk, going to have a walk with daughter

[13:09] *** leont joined
[13:42] <Altai-man_> ># Socket path '/home/koto/Devel/perl6-dev/R/rakudo/tools/releasable/temp/rakudo-test/rakudo-2021.02/t/spec/S32-io/test.sock' is too long (max length supported by this platform is 107 characters)

[13:42] <Altai-man_> This is honestly hilarious

[13:47] <lucs> Altai-man_: What platform is that?

[13:48] <Altai-man_> lucs, my gnu/linux box

[13:48] <lucs> Heh.

[13:49] <Altai-man_> m: say $*VM

[13:49] <camelia> rakudo-moar 3235f3e42: OUTPUT: «moar (2020.12.98.gf.6.c.505.dae)␤»

[13:54] <Altai-man_> Oh dammit.

[13:55] <Altai-man_> Of course I forgot to mention the "not logged" commits...

[13:55] <Altai-man_> releasable6, status

[13:55] <releasable6> Altai-man_, Next release will happen when it's ready. 1 blocker. 35 out of 135 commits logged

[13:55] <releasable6> Altai-man_, Details: https://gist.github.com/b505646081d6484d4185eb415061c63b

[13:56] <Altai-man_> releasable6, status

[13:56] <releasable6> Altai-man_, Release date for Rakudo 2021.02 is listed in “Planned future releases”, but it was already released.

[13:56] <releasable6> Altai-man_, and I oop! Backtrace: https://gist.github.com/b8b01e213cadd8e69f177a2534eefa14

[13:57] <Altai-man_> I am kinda confused how this happens.

[13:58] <Altai-man_> `2021-03-20   Rakudo #144 (Altai-man + Releasable)` is what in Future planned releases.

[14:03] <Altai-man_> Ah, now that I posted it I see various grammar mistakes in the changelog.

[14:03] <Altai-man_> Like `Add `MoarVM::SIL` helper module for developers to have better interface` instead of `to have a better interface`.

[14:06] <Altai-man_> releasable6, status

[14:06] <releasable6> Altai-man_, Next release in ≈27 days and ≈4 hours. 1 blocker. 0 out of 1 commits logged (⚠ 35 warnings)

[14:06] <releasable6> Altai-man_, Details: https://gist.github.com/f5f954458c93ae2d2bdfbdb3a42e1824

[14:06] <Altai-man_> phew

[14:08] <Altai-man_> weekly: https://twitter.com/koto_san_kana/status/1363490820431765507

[14:08] <notable6> Altai-man_, Noted! (weekly)

[14:11] <Altai-man_> I am not really sure I will be able to do it with this hardware next month, heh.

[14:11] <Altai-man_> OTOH maybe I just forgot how to utilize the infra server.

[14:25] <Altai-man_> m: say $*VM

[14:25] <camelia> rakudo-moar 3235f3e42: OUTPUT: «moar (2020.12.98.gf.6.c.505.dae)␤»

[14:26] *** nwc10 left
[14:30] <Altai-man_> m: say $*VM

[14:30] <camelia> rakudo-moar 3235f3e42: OUTPUT: «moar (2020.12.98.gf.6.c.505.dae)␤»

[14:30] <Altai-man_> it apparently does not like me

[15:40] <nine> camelia@camelia:~/log> host -t aaaa -6 github.com

[15:40] <nine> github.com has no AAAA record

[15:40] <nine> You got to be kidding me...

[15:47] <Altai-man_> m: say $*VM

[15:47] <camelia> rakudo-moar 3235f3e42: OUTPUT: «moar (2020.12.98.gf.6.c.505.dae)␤»

[15:47] <Altai-man_> ???

[15:47] <Altai-man_> evalable6, say $*VM;

[15:47] <evalable6> Altai-man_, rakudo-moar f729248c9: OUTPUT: «moar (2021.02)␤»

[15:47] <Altai-man_> phew

[15:51] <nine> camelia can't update, because github clings to the 80s

[15:51] <Altai-man_> ouch

[15:51] <Altai-man_> at least it seems the release is not broken in some obvious ways.

[15:51] <Altai-man_> maybe in non-obvious ones, ofc

[15:52] <El_Che> nine: azure isn't the best ipv6 example

[15:52] <nine> lizmat: t/09-moar/11-inline-hash-key.t                                (Wstat: 256 Tests: 3 Failed: 1)

[15:52] <nine> [  557s]   Failed test:  1

[15:52] <nine> https://build.opensuse.org/package/live_build_log/home:niner9:branches:devel:languages:perl6/rakudo/openSUSE_Leap_15.1/x86_64

[15:53] <lizmat> I'm afraid it's a flapper

[15:53] <El_Che> releasable6: status

[15:53] <releasable6> El_Che, Next release in ≈27 days and ≈3 hours. 1 blocker. 0 out of 1 commits logged (⚠ 35 warnings)

[15:53] <releasable6> El_Che, Details: https://gist.github.com/1cbf5f68726c89d18d7ccb0ff24eb459

[15:53] <El_Che> ok, release is out, then?

[15:54] <nine> And we didn't know that before the release?

[15:54] <lizmat> well, it's a really sometimes flapper ?

[15:54] <nine> so what?

[15:54] <Altai-man_> all tests are clean for me

[15:54] <nine> Either tests pass a 100 %, or they must be considered failed. "It passes sometimes" is just not good enough

[15:55] <Altai-man_> nine, awesome. I love it.

[15:55] <Altai-man_> nine, I think it is a great time to address that, given we just had a release and have a month before the next one.

[15:55] <Altai-man_> Or whatever time is needed, really.

[15:55] <El_Che> there are many flappers in a regular release. If you build enough you see a lot of them

[15:55] <Altai-man_> I'll now create a blocker ticket.

[15:55] <lizmat> well, in case of the inline tests, the solution is simple: drop the tests

[15:56] <El_Che> if you find it usefull, I can create tickets by running builds in a loop

[15:56] <nine> which tests are known to be affected?

[15:56] <lizmat> the inline tests scan the spesh inline log for inlines of things like AT-POS / AT-KEY

[15:57] <lizmat> it now runs a loop for 1M times, which *should* be enough to inline things, I would guess

[15:58] <lizmat> or is there a way that something does *not* get inlined, even if run 1M times ?

[15:58] <lizmat> also note that originally the tests ran loops of 100K times, which apparently was not enough

[15:59] <lizmat> I can expand it to have them run 10M times, but that feels even wronger than upping them from 100K to 1M

[15:59] <AlexDaniel`> nine: well, I've been filing flappers as blockers in the past, that much they annoyed me

[16:00] <lizmat> $ ls t/09-moar/*inline*

[16:00] <lizmat> t/09-moar/10-inline-array-pos.t		t/09-moar/13-inline-comparators-int.t

[16:00] <lizmat> t/09-moar/11-inline-hash-key.t		t/09-moar/14-inline-comparators-str.t

[16:00] <lizmat> t/09-moar/12-inline-arithmetic.t

[16:00] <AlexDaniel`> I believe there was a list of known flappers somewhere

[16:00] <El_Che> maybe a meta flapper ticket?

[16:00] <AlexDaniel`> but yeah, fixing them is work, so 🤷

[16:00] * Altai-man_ does one

[16:00] <Altai-man_> *makes

[16:00] <lizmat> so, in case of the inline flappers: I repeat the question: is there a way in which code does *not* get inlined, even when run 1M times?

[16:00] <AlexDaniel`> but really, there were just too many, and all of them were kinda weird

[16:03] <Altai-man_> https://github.com/rakudo/rakudo/issues/4212

[16:04] <El_Che> Altai-man_++

[16:05] <Altai-man_> I am not sure we have anything urgent, so can as well investigate this and brag about it next release, whenever it would be. :)

[16:06] <nine> lizmat: you just cannot guarantee that. Spesh runs in a separate thread. Especially on a build machine that's running thousands of jobs a day, it's imaginable that the spesh thread doesn't get scheduled for a second.

[16:07] <lizmat> well, that means that inlining is inherently untestable ?

[16:08] <nine> lizmat: why does SIL not run the command with MVM_SPESH_BLOCKING?

[16:08] <lizmat> because nobody told me to do that ?

[16:09] <nine> If you want consistent behaviour, that would certainly take you a whole lot closer

[16:09] <lizmat> so, does that not cloud the issue ?

[16:10] <lizmat> what I mean is: does that make it completely reproducable ?

[16:11] <El_Che> so far everything is building fine on github

[16:12] <El_Che> everything passed on the first run! :)

[16:20] <El_Che> more annoying: segmentation faults :(

[16:20] <El_Che> make: *** [Makefile:1176: blib/Perl6/BOOTSTRAP/v6c.moarvm] Segmentation fault (core dumped)

[16:23] <lizmat> aaah... we lost Geth again ?

[16:24] <lizmat> https://github.com/rakudo/rakudo/commit/d894a6bdc392a430e714b     # fix inline tests

[16:24] <lizmat> nine: ^^

[16:28] <El_Che> t/concurrency/03-semaphore.t failed on me

[16:28] <El_Che> seen that fail before

[16:30] <lizmat> que?

[16:30] <lizmat> is that filename correct?

[16:45] <El_Che> amd another flapper: t/02-rakudo/10-nqp-ops.t

[16:56] <nine> lizmat: https://build.opensuse.org/package/live_build_log/home:niner9:branches:devel:languages:perl6/rakudo/openSUSE_Leap_15.0/x86_64

[16:56] <nine> [  351s] t/09-moar/14-inline-comparators-str.t                         (Wstat: 256 Tests: 7 Failed: 1)

[16:56] <El_Che> an another: t/02-rakudo/99-misc.t

[16:56] <nine> [  351s]   Failed test:  1

[16:56] <El_Che> that one I have seen fail a *lot*

[16:57] <nine> Seems to be failing all the time actually: https://build.opensuse.org/package/show/home:niner9:branches:devel:languages:perl6/rakudo

[16:57] <El_Che>  t/09-moar/11-inline-hash-key.t failed as well, but already on the list

[17:01] <El_Che> (releasing packages as we speak)

[17:06] <El_Che> (done)

[17:17] <lizmat> https://github.com/rakudo/rakudo/commit/8507178e80258a536061952     # nine: upped number of iterations

[17:17] <lizmat> nine: I'm not sure what else I can do there, other than removing these tests altogether

[17:18] <lizmat> if these tests are dependent on OS / load / hardware even with MVM_SPESH_BLOCKING set, then I guess we can't test for inlining reliably at all

[17:18] <lizmat> or we should run the same test-file 10 times, and only fail if all of the runs fail ?

[17:35] <lizmat> m: dd Array.list   # works!

[17:35] <camelia> rakudo-moar 3235f3e42: OUTPUT: «(Array,)␤»

[17:35] <lizmat> m: dd Hash.list   # WOT?

[17:35] <camelia> rakudo-moar 3235f3e42: OUTPUT: «Invocant of method 'list' must be an object instance of type 'Map', not␤a type object of type 'Hash'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[17:52] <Altai-man_> oh no, is it a recent regression?

[17:53] <Altai-man_> I remember documenting something with `list` and `Map`, or not really.

[17:53] <Altai-man_> bisectable6, dd Hash.list

[17:53] <bisectable6> Altai-man_, Will bisect the whole range automagically because no endpoints were provided, hang tight

[17:53] <Altai-man_> 2020.12 has the same thing.

[17:53] <bisectable6> Altai-man_, Output on all releases: https://gist.github.com/bd0a6a2fe81d2e776a3ab1b83425cf0b

[17:53] <bisectable6> Altai-man_, Bisecting by output (old=2020.06 new=2020.07) because on both starting points the exit code is 1

[17:54] <bisectable6> Altai-man_, bisect log: https://gist.github.com/62cb062eb2b863196442f31f8fb06d1a

[17:54] <bisectable6> Altai-man_, (2020-07-06) https://github.com/rakudo/rakudo/commit/5f423a7e6f810615d9a1c695311a1d9d346fc713

[17:54] <bisectable6> Altai-man_, Bisecting by output (old=2017.04.3 new=2017.05) because on both starting points the exit code is 1

[17:54] <bisectable6> Altai-man_, bisect log: https://gist.github.com/7fb0a29b31384cb241291d03b0445870

[17:54] <bisectable6> Altai-man_, (2017-04-27) https://github.com/rakudo/rakudo/commit/8511081f7c11ba3c3866e758502f7aa6de601921

[17:54] <bisectable6> Altai-man_, Bisecting by exit code (old=2017.01 new=2017.02). Old exit code: 0

[17:54] <bisectable6> Altai-man_, bisect log: https://gist.github.com/f6933451ae3335c692ad72398424c2c2

[17:54] <bisectable6> Altai-man_, (2017-01-23) https://github.com/rakudo/rakudo/commit/2f69be91446ab3f3ed85c54f741cf701b8cba8d5

[17:55] <bisectable6> Altai-man_, ⚠ New output detected, please review the results manually

[17:55] <bisectable6> Altai-man_, Output on all releases and bisected commits: https://gist.github.com/53a19fad23316721ed6c5829a5ed33c8

[17:55] <Altai-man_> Not a regression for sure, I guess.

[17:55] <AlexDaniel`> well, that worked beautifully, but omg the amount of messages

[17:57] <AlexDaniel`> the threshold should probably be at 2 bisect runs, not 3

[18:01] *** Altai-man_ left
[18:03] *** sena_kun joined
[18:19] <MasterDuke> lizmat: what about running the test file repeatedly and the whole thing succeeding if one run succeeds? i.e., just prove that the given function can be inlined, not that it always is

[18:20] <lizmat> well, I guess depends on what we want to test, doesn't it

[18:21] *** Geth joined
[18:21] <lizmat> but if inlining isn't always happening even with MVM_SPESH_BLOCKING, isn't there something wrong with MVM_SPESH_BLOCKING ?

[18:23] <MasterDuke> dunno

[18:37] <Geth> ¦ rakudo: 733c7f1c33 | (Christian Bartolomäus)++ | t/02-rakudo/03-corekeys-6e.t

[18:37] <Geth> ¦ rakudo: Fix typo in test description

[18:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/733c7f1c33

[18:43] <nine> lizmat: these tests are there to ensure that stuff will get inlined at some point, right?

[18:44] <lizmat> right, so we don't have regressions (like we have had in the past)

[18:45] <lizmat> I guess MasterDuke's idea of running a test X times, and accept as passed as soon as any of them passes is the best

[18:45] <nine> They are not meant to ensure that inlining happens within a certain time or number of repetitions, righ?

[18:45] <lizmat> , is the best idea

[18:45] <lizmat> nope, they're there to ensure that inlining happens with sufficiently hot enough code

[18:46] <lizmat> and that "sufficient" is apparently different in different corcumstances

[18:46] <nine> But that's just "inlining must happen for hot code", not "inlining must happen on hot code withing 750 iterations"

[18:46] <lizmat> indeed

[18:47] <lizmat> but as we have seen, sometimes even 1M times is not enough

[18:47] <nine> so why have the iteration limit in the test?

[18:47] <lizmat> because we can only find out if something has been inlined from the spesh inline report, which is only available *after* the subprocess completes ?

[18:47] <nine> According to what the test is supposed to check, it should not matter if it happens within 700 or 20 million iterations. All that matters is that it eventually does. So that's what the test actually should check

[18:48] <nine> But the log is written during runtime?

[18:48] <lizmat> I think it is in that case, yes

[18:49] <nine> Btw. I've just had t/09-moar/14-inline-comparators-str.t failing on my own machine with nothing else happening and with the patch modified to set MVM_SPESH_BLOCKING but do 1 million iterations

[18:49] <nine> Somethings definitely fishy there

[18:49] <lizmat> but still, if after 20M iterations there is no inlining, should we go to 100M ?

[18:49] <lizmat> well, there's that: that it *does* indicate an issue with inlining  :-)

[18:50] <lizmat> or with the spesh inline log, of course  :-)

[18:50] <nine> dinner &

[18:50] <lizmat> git diff

[18:50] <lizmat> oops

[18:52] <Geth> ¦ rakudo: 6b83135a0b | (Elizabeth Mattijsen)++ | 2 files

[18:52] <Geth> ¦ rakudo: Make sure Map / Array type objects iterarize / list ok

[18:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6b83135a0b

[19:09] <bartolin> lizmat: do you maybe remember if there was a specific reason to refer to '< await >' in https://github.com/rakudo/rakudo/blob/master/t/02-rakudo/07-implementation-detail-6.d.t#L59 while the tests for 6.c and 6.e to all lowercase subs (https://github.com/rakudo/rakudo/blob/master/t/02-rakudo/07-implementation-detail-6.c.t#L58 and https://github.com/rakudo/rakudo/blob/master/t/02-rakudo/07-implementation-detail-6.e.t#L58)

[19:12] <lizmat> doesn't ring an immediate bell, I'm afraid

[19:12] <lizmat> sorry

[19:14] <bartolin> np. I'm looking at failing tests for the JVM and noted that inconsistency. I guess it wouldn't hurt to change the test to use @lower as well ...

[19:16] <lizmat> go ahead   :-)

[19:24] <Geth> ¦ rakudo/xxxmap-reimagined: 412d7706b6 | (Elizabeth Mattijsen)++ | 4 files

[19:24] <Geth> ¦ rakudo/xxxmap-reimagined: Re-imagine xxxmap, makes >>. about 2x as fast

[19:24] <Geth> ¦ rakudo/xxxmap-reimagined: 

[19:24] <Geth> ¦ rakudo/xxxmap-reimagined: This commit completely re-imagines the nodemap / deepmap / duckmap

[19:24] <Geth> ¦ rakudo/xxxmap-reimagined: functionality, makes them about 2x as fast with about 1/8 of the

[19:24] <Geth> ¦ rakudo/xxxmap-reimagined: memory churn (in a benchmark of `my @a = ^1000; @a>>.++ for ^1000`)

[19:24] <Geth> ¦ rakudo/xxxmap-reimagined: So what does this do:

[19:24] <Geth> ¦ rakudo/xxxmap-reimagined: 

[19:24] <Geth> ¦ rakudo/xxxmap-reimagined: <…commit message has 16 more lines…>

[19:24] <Geth> ¦ rakudo/xxxmap-reimagined: review: https://github.com/rakudo/rakudo/commit/412d7706b6

[19:24] <Geth> ¦ rakudo: lizmat++ created pull request #4215: Re-imagine xxxmap, makes >>. about 2x as fast

[19:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4215

[20:10] *** finsternis joined
[21:39] *** Kaiepi left
[21:42] *** raiph joined
[22:32] *** Kaiepi joined
[22:35] *** raiph74 joined
[22:36] *** raiph74 left
[22:37] *** raiph left
