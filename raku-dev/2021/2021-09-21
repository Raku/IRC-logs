[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[02:01] *** greppable6 left
[02:01] *** nativecallable6 left
[02:01] *** coverable6 left
[02:01] *** shareable6 left
[02:01] *** releasable6 left
[02:01] *** bisectable6 left
[02:01] *** reportable6 left
[02:01] *** committable6 left
[02:01] *** evalable6 left
[02:01] *** linkable6 left
[02:01] *** sourceable6 left
[02:01] *** statisfiable6 left
[02:01] *** bloatable6 left
[02:01] *** quotable6 left
[02:01] *** benchable6 left
[02:01] *** notable6 left
[02:01] *** unicodable6 left
[02:01] *** tellable6 left
[02:01] *** squashable6 left
[02:02] *** notable6 joined
[02:02] *** bisectable6 joined
[02:02] *** reportable6 joined
[02:02] *** committable6 joined
[02:03] *** benchable6 joined
[02:03] *** shareable6 joined
[02:04] *** greppable6 joined
[02:04] *** quotable6 joined
[02:04] *** statisfiable6 joined
[02:04] *** tellable6 joined
[03:03] *** evalable6 joined
[03:04] *** unicodable6 joined
[03:04] *** sourceable6 joined
[03:04] *** squashable6 joined
[04:03] *** linkable6 joined
[05:04] *** nativecallable6 joined
[06:02] *** reportable6 left
[06:03] *** releasable6 joined
[06:05] *** reportable6 joined
[07:03] *** bloatable6 joined
[07:03] *** coverable6 joined
[08:15] *** lizmat_ joined
[08:16] *** TempIRCLogger__ joined
[08:17] *** Geth left
[08:17] *** lizmat_ left
[08:17] *** Geth joined
[08:18] *** lizmat joined
[09:14] <Geth> Â¦ rakudo: ba15173fdd | (Elizabeth Mattijsen)++ | src/Perl6/Compiler.nqp
[09:14] <Geth> Â¦ rakudo: De-unicodify Raku(do)
[09:14] <Geth> Â¦ rakudo: 
[09:14] <Geth> Â¦ rakudo: It was causing too many issues on systems with unicode challenged
[09:14] <Geth> Â¦ rakudo: situations or improperly rendering fonts.  Kept the â„¢ as such, as
[09:14] <Geth> Â¦ rakudo: that does seem to render ok everywhere.
[09:14] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ba15173fdd
[11:25] *** linkable6 left
[11:27] *** linkable6 joined
[11:39] *** linkable6 left
[11:42] *** linkable6 joined
[11:57] <Geth> Â¦ nqp/new-disp: 74faf02e17 | (Jonathan Worthington)++ | src/core/dispatchers.nqp
[11:57] <Geth> Â¦ nqp/new-disp: Add megamorphic handler for nqp-find-meth
[11:57] <Geth> Â¦ nqp/new-disp: 
[11:57] <Geth> Â¦ nqp/new-disp: There are various places that use nqp::can and are megamorphic. Add
[11:57] <Geth> Â¦ nqp/new-disp: a megamorphic handler for this situation, which guards only on type and
[11:57] <Geth> Â¦ nqp/new-disp: then installs a lookup table of methods.
[11:57] <Geth> Â¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/74faf02e17
[12:02] *** reportable6 left
[12:18] <Geth> Â¦ rakudo/new-disp: b3bf2d5eda | (Jonathan Worthington)++ | src/vm/moar/Perl6/Ops.nqp
[12:18] <Geth> Â¦ rakudo/new-disp: Cope if p6sink is somehow used non-void
[12:18] <Geth> Â¦ rakudo/new-disp: 
[12:18] <Geth> Â¦ rakudo/new-disp: This is rare, but apparently can happen now that we use it in place of
[12:18] <Geth> Â¦ rakudo/new-disp: a sink method call.
[12:18] <Geth> Â¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/b3bf2d5eda
[13:01] <Geth> Â¦ rakudo/new-disp: 4ebc6bba08 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp
[13:01] <Geth> Â¦ rakudo/new-disp: Expose more constants in raku-invoke dispatcher
[13:01] <Geth> Â¦ rakudo/new-disp: 
[13:01] <Geth> Â¦ rakudo/new-disp: When the code object we're invoking is a known constant in the dispatch
[13:01] <Geth> Â¦ rakudo/new-disp: - typically because we got it out of the methods table - we don't need
[13:01] <Geth> Â¦ rakudo/new-disp: the dispatch program to look up the $!do dynamically. We can instead
[13:01] <Geth> Â¦ rakudo/new-disp: just look it up directly and expose it to the VM as a constant. This
[13:01] <Geth> Â¦ rakudo/new-disp: results in shorter dispatch programs and lets spesh avoid inserting
[13:01] <Geth> Â¦ rakudo/new-disp: lots of static frame guards.
[13:01] <Geth> Â¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/4ebc6bba08
[14:23] *** evalable6 left
[14:23] *** linkable6 left
[14:25] *** linkable6 joined
[14:25] *** evalable6 joined
[14:59] <Geth> Â¦ rakudo/new-disp: 01321782d0 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp
[14:59] <Geth> Â¦ rakudo/new-disp: Restructure handling of wrapping
[14:59] <Geth> Â¦ rakudo/new-disp: 
[14:59] <Geth> Â¦ rakudo/new-disp: Previously, we would handle wrapping in `raku-invoke`. This included the
[14:59] <Geth> Â¦ rakudo/new-disp: situation where a `proto` was wrapped. This resulted in:
[14:59] <Geth> Â¦ rakudo/new-disp: 
[14:59] <Geth> Â¦ rakudo/new-disp: * Wrong semantics: if we did a `callwith` in the wrapper, we failed to
[14:59] <Geth> Â¦ rakudo/new-disp:   honor its change of arguments from the original ones given to the
[14:59] <Geth> Â¦ rakudo/new-disp: <â€¦commit message has 10 more linesâ€¦>
[14:59] *** patrickb joined
[14:59] <Geth> Â¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/01321782d0
[15:06] *** reportable6 joined
[15:28] *** patrickb left
[15:32] <Geth> Â¦ nqp/new-disp: 91406c9a52 | (Jonathan Worthington)++ | 2 files
[15:32] <Geth> Â¦ nqp/new-disp: Expose getlexstatic as a literal to dispatch
[15:32] <Geth> Â¦ nqp/new-disp: 
[15:32] <Geth> Â¦ nqp/new-disp: While for the sake of VM safety we don't rely on the literal flag for
[15:32] <Geth> Â¦ nqp/new-disp: objects, it does means that Rakudo's dispatchers will be able to avoid
[15:32] <Geth> Â¦ nqp/new-disp: adding some guards.
[15:32] <Geth> Â¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/91406c9a52
[15:42] <Geth> Â¦ rakudo/new-disp: bae8a2d6cc | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp
[15:42] <Geth> Â¦ rakudo/new-disp: Don't guard dispatchees on a literal proto
[15:42] <Geth> Â¦ rakudo/new-disp: 
[15:42] <Geth> Â¦ rakudo/new-disp: When the optimizer produces a callstatic op, the literal flag is set on
[15:42] <Geth> Â¦ rakudo/new-disp: the callee in the capture. Take advantage of this to avoid adding any
[15:42] <Geth> Â¦ rakudo/new-disp: guards on the dispatchees list in this case.
[15:42] <Geth> Â¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/bae8a2d6cc
[15:49] *** patrickb joined
[16:03] *** patrickb left
[16:32] *** [Coke] left
[17:37] *** linkable6 left
[17:37] *** evalable6 left
[17:54] *** squashable6 left
[17:56] *** squashable6 joined
[18:02] *** reportable6 left
[18:39] *** linkable6 joined
[19:37] <lizmat> ugexe tonyo I notice that in the META of 360.zef.pm, any non-zero API value is *not* encoded in the "dist"
[19:37] <lizmat> is that intentional, or an oversight ?
[19:40] <lizmat> case in point: https://github.com/p6steve/raku-Math-Polygons/blob/master/META6.json
[19:48] *** squashable6 left
[19:49] <lizmat> "dist":"Math::Polygons:ver\u003c0.0.4\u003e:auth\u003czef:p6steve\u003e" instead of expected
[19:50] <lizmat> "dist":"Math::Polygons:ver\u003c0.0.4\u003e:auth\u003czef:p6steve\u003e\u003capi:1\u003e"
[19:50] <lizmat> in the JSON
[19:50] *** squashable6 joined
[20:03] *** reportable6 joined
[20:09] <ugexe> i dont think anything actually uses that
[20:09] <ugexe> although yeah it probably should be included ignoring that
[20:10] <lizmat> yet, anyway?
[20:10] <lizmat> I mean, technically it's possible to have a distribution with the same version, but with a different API ?
[20:10] <lizmat> or will fez stop you uploading that ?
[20:14] <ugexe> i imagine it works fine. i wouldnt assume too much intent from a field
[20:14] <ugexe> s/a/that/
[20:16] <ugexe> id guess it was a mechanism to increase parsing speed by bypassing json-ifying all meta data of every module to create a list of available namespaces. but that would only work for distribution names, and modules actually provide many namespaces through provides
[21:13] *** [Coke] joined
[21:31] *** codesections joined
[22:38] *** evalable6 joined
[22:55] *** Xliff joined
[22:55] *** codesections4 joined
[22:55] *** codesections left
[22:55] *** codesections4 is now known as codesections
