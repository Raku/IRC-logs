[00:17] *** Kaiepi left
[00:17] *** Kaiepi joined
[00:17] *** vrurg joined
[00:22] *** vrurg left
[00:54] *** vrurg joined
[00:54] *** vrurg left
[00:54] *** vrurg joined
[01:20] *** kvw_5_ joined
[01:23] *** kvw_5 left
[02:23] *** bisectable6 left
[02:23] *** statisfiable6 left
[02:23] *** greppable6 left
[02:23] *** tellable6 left
[02:23] *** benchable6 left
[02:23] *** unicodable6 left
[02:23] *** linkable6 left
[02:23] *** evalable6 left
[02:23] *** releasable6 left
[02:23] *** quotable6 left
[02:23] *** coverable6 left
[02:23] *** notable6 left
[02:23] *** sourceable6 left
[02:23] *** bloatable6 left
[02:23] *** shareable6 left
[02:23] *** nativecallable6 left
[02:23] *** committable6 left
[02:23] *** squashable6 left
[02:24] *** greppable6 joined
[02:24] *** linkable6 joined
[02:24] *** quotable6 joined
[02:24] *** benchable6 joined
[02:24] *** squashable6 joined
[02:24] *** sourceable6 joined
[02:25] *** committable6 joined
[02:25] *** evalable6 joined
[02:25] *** bisectable6 joined
[02:25] *** notable6 joined
[02:25] *** statisfiable6 joined
[02:25] *** unicodable6 joined
[02:26] *** shareable6 joined
[02:26] *** coverable6 joined
[02:26] *** tellable6 joined
[02:26] *** bloatable6 joined
[02:26] *** releasable6 joined
[02:26] *** nativecallable6 joined
[02:30] <vrurg> .

[02:52] *** softmoth_ is now known as softmoth

[03:50] *** sxmx left
[06:52] *** domidumont joined
[06:57] *** patrickb joined
[06:57] *** sxmx joined
[07:38] <patrickb> o/

[07:43] *** linkable6 left
[07:45] *** linkable6 joined
[08:10] *** softmoth left
[08:40] *** linkable6 left
[08:43] *** linkable6 joined
[08:56] *** frost-lab joined
[09:42] <Geth> ¦ nqp: 8b2fd66c11 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[09:42] <Geth> ¦ nqp: Bump NQP to get latest MoarVM fixes, MasterDuke++ nine++

[09:42] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/8b2fd66c11

[09:43] <MasterDuke> oh, should i merge nqp #711 now?

[09:44] <Geth> ¦ nqp: 531ac3007e | (Daniel Green)++ | 6 files

[09:44] <Geth> ¦ nqp: Finish getting rid of NQPCursor

[09:44] <Geth> ¦ nqp: 

[09:44] <Geth> ¦ nqp: Once its use is removed from the tests, the shim and constant aren't

[09:44] <Geth> ¦ nqp: needed anymore.

[09:44] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/531ac3007e

[09:44] <Geth> ¦ nqp: 0bc2117497 | MasterDuke17++ (committed using GitHub Web editor) | 6 files

[09:44] <Geth> ¦ nqp: Merge pull request #711 from MasterDuke17/finish_getting_rid_of_NQPCursor

[09:44] <Geth> ¦ nqp: 

[09:44] <Geth> ¦ nqp: Finish getting rid of NQPCursor

[09:44] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/0bc2117497

[09:57] <Geth> ¦ rakudo: a9490436e6 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[09:57] <Geth> ¦ rakudo: Bump NQP for latest fixes, MasterDuke++ nine++

[09:57] <Geth> ¦ rakudo: 

[09:57] <Geth> ¦ rakudo: - MoarVM memory fixes

[09:57] <Geth> ¦ rakudo: - NQP getting rid of NQPCursor

[09:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a9490436e6

[10:26] <Geth> ¦ nqp: MasterDuke17++ created pull request #712: Remove no longer needed $!slang override in Braid

[10:26] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/712

[11:29] *** MasterDuke left
[11:29] *** MasterDuke joined
[11:30] <Geth> ¦ rakudo: 7a77b39791 | (Elizabeth Mattijsen)++ | src/core.c/allomorphs.pm6

[11:30] <Geth> ¦ rakudo: Make sure Allomorph.(comb|chop|chomp|substr) return Str

[11:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7a77b39791

[11:30] <Geth> ¦ rakudo: 85e7e63dd5 | (Elizabeth Mattijsen)++ | src/core.c/traits.pm6

[11:30] <Geth> ¦ rakudo: Mention "is implementation-detail" as option

[11:30] <Geth> ¦ rakudo: 

[11:30] <Geth> ¦ rakudo: For Routine trait

[11:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/85e7e63dd5

[11:50] <Geth> ¦ nqp: 37d1498f43 | (Daniel Green)++ | src/QRegex/Cursor.nqp

[11:50] <Geth> ¦ nqp: Remove no longer needed $!slang override in Braid

[11:50] <Geth> ¦ nqp: 

[11:50] <Geth> ¦ nqp: It's been long enough that modules should have been fixed by now.

[11:50] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/37d1498f43

[11:50] <Geth> ¦ nqp: 622e888b48 | MasterDuke17++ (committed using GitHub Web editor) | src/QRegex/Cursor.nqp

[11:50] <Geth> ¦ nqp: Merge pull request #712 from MasterDuke17/remove_no_longer_needed_slang_override_in_Braid

[11:50] <Geth> ¦ nqp: 

[11:50] <Geth> ¦ nqp: Remove no longer needed $!slang override in Braid

[11:50] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/622e888b48

[11:52] <lizmat> MasterDuke should I do a bump for this?   would allow for easier bisectability

[11:52] <MasterDuke> sure

[11:52] <lizmat> ok, will do

[12:08] *** frost-lab left
[13:16] <Geth> ¦ rakudo: ba814fde4f | (Elizabeth Mattijsen)++ | 3 files

[13:16] <Geth> ¦ rakudo: Make sure Allomorph.substr-rw returns Str

[13:16] <Geth> ¦ rakudo: 

[13:16] <Geth> ¦ rakudo: This was a little more involved.  First of all, the Cool: candidates

[13:16] <Geth> ¦ rakudo: missed a the invocant type:D, which caused a weird interaction with

[13:16] <Geth> ¦ rakudo: the sub versions.

[13:16] <Geth> ¦ rakudo: 

[13:16] <Geth> ¦ rakudo: Finally fixed with adding an implementation-detail candidate that takes

[13:17] <Geth> ¦ rakudo: an additional type with which to create the string.  The other candidates

[13:17] <Geth> ¦ rakudo: have been adapted to call that candidate with the intended type.

[13:17] <Geth> ¦ rakudo: 

[13:17] <Geth> ¦ rakudo: Also added some more candidates for better dispatchability.

[13:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ba814fde4f

[13:28] <vrurg> MasterDuke: It's quite a fallout: https://gist.github.com/vrurg/ef54cb5f45f8e67c68222ebe1ba3f8c5

[13:29] <vrurg> MasterDuke: I'll re-run it again following lizmat's NQP bump.

[13:29] *** softmoth joined
[13:31] <MasterDuke> looks like only one is obviously mine

[13:33] <vrurg> MasterDuke: I didn't look into it.

[14:14] <nine> MasterDuke: the "This type (Array) does not support elems" are probably because of your array truth check optimization

[14:15] <MasterDuke> hm, could be. i'll try reverting and seeing what happens

[14:15] *** b2gills left
[14:27] *** patrickb left
[14:36] <MasterDuke> yep

[14:57] <MasterDuke> i guess that optimization just has to be reverted

[15:11] <nine> fastest way to fix it

[15:19] <Geth> ¦ nqp: 97e37481a7 | (Daniel Green)++ | src/NQP/Optimizer.nqp

[15:19] <Geth> ¦ nqp: Revert "Optimize truth checks of arrays in whiles and ifs"

[15:19] <Geth> ¦ nqp: 

[15:19] <Geth> ¦ nqp: This reverts commit 2f1d41aa8026a769cefa525b0741ac69880b0ccf.

[15:19] <Geth> ¦ nqp: 

[15:19] <Geth> ¦ nqp: Causes `This type (Array) does not support elems` in Type::EnumHOW.

[15:19] <Geth> ¦ nqp: Maybe I'll figure out a way to safely do this, but for now just revert.

[15:19] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/97e37481a7

[15:23] <Geth> ¦ rakudo: 5a76b7ed15 | (Daniel Green)++ | tools/templates/NQP_REVISION

[15:23] <Geth> ¦ rakudo: NQP bump to get fix for Type::EnumHOW

[15:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5a76b7ed15

[15:24] <Geth> ¦ rakudo: tbrowder self-unassigned A DateTime object should output a real number for its posix method https://github.com/rakudo/rakudo/issues/4286

[15:29] <nine> So, as I guessed, Lumberjack simply expects a certain number of call frames it needs to skip when generating a Backtrace to get to the interesting one. That magic number is now supposed to be 3 instead of 4.

[15:30] <nine> Thing is, before my change Lumberjack failed its test exactly like the spectest did when run with MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1.

[15:31] <nine> Now the test failure with non-standard options itself may sound harmless, but the same would happen in a long running process that generated a bunch of log messages. At some point it would suddenly start to find the wrong frame.

[15:32] <nine> So the code has always been fragile and would fail in some real world cases. But what to do about it now?

[15:32] <MasterDuke> i think we should have add an azure pipeline config that sets those in the environment

[15:33] <MasterDuke> (not to fix anything now, just as a way to hopefully find problems sooner)

[15:33] <nine> Well that known spec test failure with backtraces was the one thing always keeping us from running NODELAY regularily

[15:34] <MasterDuke> but that wouldn't have prevented us from setting it in the azure pipelines, they don't run a spectest

[15:40] <nine> Of course I could just create a PR for adjusting that number. It should be rather stable now.

[15:49] <nine> Well I did just that. Let's see how it goes.

[15:50] <MasterDuke> add Backtrace.number-of-frames-to-skip-to-get-to-the-ones-you-probably-want(--> 3) {} and PR it calling that?

[15:54] <MasterDuke> committable6: 2021.03,HEAD say DateTime.new(now).second.chars

[15:54] <committable6> MasterDuke, ¦2021.03: «9␤» ¦HEAD(5a76b7e): «12␤»

[15:54] <MasterDuke> that's the Games::TauStation::DateTime fail

[15:55] <MasterDuke> committable6: 2021.03,HEAD say DateTime.new(now).second

[15:55] <committable6> MasterDuke, ¦2021.03: «1.215775␤» ¦HEAD(5a76b7e): «1.643846244␤»

[15:55] <nine> MasterDuke: actually Backtrace::Frame already has an is-setting method which would be perfectly suitable for skipping those frames

[15:57] <nine> There's also Backtrace.next-interesting-index which among other things skips is-setting frames

[15:57] <MasterDuke> better (shorter) names than i proposed...

[15:59] <nine> Well, this makes me a whole lot more confident about calling this not actually a rakudo regression

[16:00] *** finsternis left
[16:05] <lizmat> m: class Foo is Str { }; my Foo() $a = "foo"; dd $a.^name, $a.Str.^name   # I'd argue the second one should be Str

[16:05] <camelia> rakudo-moar 726a75e24: OUTPUT: «"Foo"␤"Foo"␤»

[16:05] <lizmat> vrurg moritz_ ^^ ??

[16:08] <lizmat> m: my $a = FatRat.new(1,3); dd $a.^name, $a.Rat.^name   # similarly, but different ?

[16:08] <camelia> rakudo-moar 726a75e24: OUTPUT: «"FatRat"␤"Rat"␤»

[16:08] <lizmat> hmm.... guess not, since FatRat is not a Rat

[16:09] <lizmat> m: my $a = <666>; dd $a.^name, $a.Str.^name

[16:09] <camelia> rakudo-moar 726a75e24: OUTPUT: «"IntStr"␤"Str"␤»

[16:20] <nine> The Foo is Str and FatRat examples look perfectly fine to me.

[16:26] <lizmat> ok, so a coercion of a subclass of Str to Str should be identity ?

[16:27] <nine> yes

[16:27] <nine> Since the thing already is a Str, there's just nothing to do

[16:28] <lizmat> so, how would one coerce a subclass of Str to Str ?

[16:28] <lizmat> do we have a HLL way of doing that ?

[16:30] <lizmat> dinner&

[16:30] <nine> m: class Foo is Str { }; my Foo() $f = "foo"; my $s = Str.new(:value($f)); say $f.^name; say $s; say $s.^name;

[16:30] <camelia> rakudo-moar 726a75e24: OUTPUT: «Foo␤foo␤Str␤»

[16:31] <nine> lizmat: ^^^

[17:02] <Geth> ¦ nqp: ee7d600d8c | (Tom Browder)++ (committed using GitHub Web editor) | docs/ops.markdown

[17:02] <Geth> ¦ nqp: Update ops.markdown

[17:02] <Geth> ¦ nqp: 

[17:02] <Geth> ¦ nqp: Show the actual time reference.

[17:02] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/ee7d600d8c

[17:17] *** domidumont left
[17:23] *** b2gills joined
[17:40] *** sena_kun left
[17:41] *** sena_kun joined
[18:20] *** sena_kun left
[18:20] *** sena_kun joined
[18:28] <Geth> ¦ rakudo: bd900c9db7 | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[18:28] <Geth> ¦ rakudo: Remove potentially unnecessary boxing from NQP

[18:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bd900c9db7

[18:42] <vrurg> lizmat: I guess nine has answered your question.

[18:43] <lizmat> about the .Str question, I presume?

[18:46] <Geth> ¦ rakudo: a26ff404ff | (Elizabeth Mattijsen)++ | 2 files

[18:46] <Geth> ¦ rakudo: Make Str.comb handle subclasses of Str properly

[18:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a26ff404ff

[18:48] <vrurg> lizmat: yes

[18:48] <lizmat> ack

[18:48] <vrurg> MasterDuke: Another run with the latest NQP bump. At the first glance it looks the same. https://gist.github.com/vrurg/d824dc212991b9a11f4e3645e5c2e7be

[18:52] <lizmat> vrurg: in the new coercion protocol, is there a way to add a method to class Foo to make .Foo coerce to it?

[18:52] <lizmat> m: class Foo is Str { }; say "aaa".Foo

[18:52] <camelia> rakudo-moar 726a75e24: OUTPUT: «No such method 'Foo' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[18:52] <lizmat> except adding:

[18:52] <vrurg> lizmat: of course. `method COERCE(Any $val) { self.new: .... }`

[18:52] <lizmat> m: class Foo is Str { method Foo() { Foo.new(:value(self)) }; say "aaa".Foo

[18:52] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3{ Foo.new(:value(self)) }; say "aaa".Foo7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»

[18:53] <vrurg> lizmat: But not the way you want it.

[18:53] <vrurg> Don't forget that techincally .Foo is a method call and nothing else. Foo("aaa") is the way.

[18:53] <lizmat> m: class Foo is Str { }; say Foo("aaa")

[18:53] <camelia> rakudo-moar 726a75e24: OUTPUT: «aaa␤»

[18:53] <vrurg> Or `sub bar(Foo() $a) { }`

[18:53] <lizmat> m: class Foo is Str { }; say Foo("aaa").^name

[18:53] <camelia> rakudo-moar 726a75e24: OUTPUT: «Foo␤»

[18:54] <lizmat> so I guess we need to move away from x.Foo in general, towards Foo(x) ?

[18:54] <vrurg> m: class Foo { method COERCE(Str $s) { note "coercing from ", $s.raku; Foo.new }; }; say Foo("aa")'

[18:54] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3 ", $s.raku; Foo.new }; }; say Foo("aa")7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»

[18:55] <vrurg> lizmat: you're right. That's what I started doing recently.

[18:55] <vrurg> m: class Foo { method COERCE(Str $s) { note "coercing from ", $s.raku; Foo.new }; }; say Foo("aa")

[18:55] <camelia> rakudo-moar 726a75e24: OUTPUT: «coercing from "aa"␤Foo.new␤»

[18:56] <lizmat> well, you don't actually need the COERCE

[18:56] <lizmat> m: class Foo is Str { }; sat Foo("aa")

[18:56] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    sat used at line 1. Did you mean 'set', 'say'?␤␤»

[18:56] <lizmat> m: class Foo is Str { }; say Foo("aa")

[18:56] <camelia> rakudo-moar 726a75e24: OUTPUT: «aa␤»

[18:57] <lizmat> m: class Foo is Str { }; say Foo("aa".^name)

[18:57] <camelia> rakudo-moar 726a75e24: OUTPUT: «Str␤»

[18:57] <lizmat> m: class Foo is Str { }; say Foo("aa").^name

[18:57] <camelia> rakudo-moar 726a75e24: OUTPUT: «Foo␤»

[18:58] <vrurg> lizmat: actually, yes. I prefer COERCE for it makes my intentions more clear. But the first try is given to `.new($coercee)`.

[18:58] <lizmat> m: dd Str.new("foo")

[18:58] <camelia> rakudo-moar 726a75e24: OUTPUT: «Default constructor for 'Str' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[18:58] <lizmat> ?

[18:58] <vrurg> m: class Foo { multi method new(Str:D $s) { note "WITH STR"; nextsame } }; say Foo("bar")

[18:58] <camelia> rakudo-moar 726a75e24: OUTPUT: «WITH STR␤Impossible coercion from 'Str' into 'Foo': no acceptable coercion method found␤  in block <unit> at <tmp> line 1␤␤»

[18:59] <vrurg> m: class Foo is Str { multi method new(Str:D $s) { note "WITH STR"; nextsame } }; say Foo("bar")

[18:59] <camelia> rakudo-moar 726a75e24: OUTPUT: «bar␤»

[19:00] <vrurg> m: class Foo is Str { multi method new(Any:D $s) { note "WITH ANY"; nextsame } }; say Foo("bar")

[19:00] <camelia> rakudo-moar 726a75e24: OUTPUT: «bar␤»

[19:00] <vrurg> Curios. Ok, I need to see which `new` it eventually finds and uses. 

[19:00] <vrurg> m: class Foo is Str { method new(Any:D $s) { note "WITH ANY"; nextsame } }; say Foo("bar")

[19:00] <camelia> rakudo-moar 726a75e24: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in method new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:02] <vrurg> Heh, I miss something. Need to go now, will be back in 1-2hrs.

[19:03] <lizmat> oki

[19:04] <lizmat> don't get me wrong, I'm glad: my Foo() $a = "foo" works out of the box with just class Foo is Str { }

[19:04] <lizmat> I just don't understand how  :-)

[19:21] *** patrickb joined
[19:29] <[Tux]> I hope this is a one-off, as I do not see high resource use on my box, but it is slower than usual:

[19:29] <[Tux]> Rakudo v2021.03-140-ga26ff404f (v6.d) on MoarVM 2021.03-39-gba124ad12

[19:29] <[Tux]> csv-test-xs-20      0.375 -  0.378

[19:29] <[Tux]> csv-ip5xs           0.831 -  0.873

[19:29] <[Tux]> test-t --race       0.954 -  0.960

[19:29] <[Tux]> test-t              2.356 -  2.387

[19:29] <[Tux]> test                8.124 -  8.206

[19:29] <[Tux]> csv-ip5xs-20        8.364 -  8.625

[19:29] <[Tux]> test-t-20 --race   11.448 - 11.846

[19:29] <[Tux]> csv-parser         25.896 - 27.394

[19:29] <[Tux]> test-t-20          42.617 - 45.073

[19:32] <lizmat> yeah, that's pretty significant

[19:33] <lizmat> :-(

[19:41] <lizmat> I wonder if it is my Str subclassing work that's doing this  :(

[19:43] <vrurg> lizmat: I think I know what happens. It falls back to Str.COERCE.

[19:44] <vrurg> But anyway it doesn't change the fact that if there is new which .cando($coercee) then it'll be invoked instead of COERCE.

[19:44] <vrurg> by 'new' I mean method 'new'

[19:46] <lizmat> ack

[19:46] <lizmat> game&

[19:50] <vrurg> m: class Foo is Str { multi method new(Any:D $v) { note "VIA NEW"; self.new(:value($v)) } }; say Foo("aa").WHICH

[19:50] <camelia> rakudo-moar 726a75e24: OUTPUT: «Foo|aa␤»

[19:52] <vrurg> My bad, `new` is the fallback, COERCE is the priority. Which is the right way as `new` may has coerce-incompatible semantics.

[19:52] <lizmat> indeed

[19:52] <lizmat> really afk&

[19:56] *** maggotbrain left
[20:10] <MasterDuke> vrurg: that doesn't make sense. locally Type::EnumHOW works fine

[20:10] <vrurg> MasterDuke: dunno. I was in a similar situation once or twice too.

[20:11] <vrurg> Could be a flapper? Perhaps sena_kun can tell more.

[20:11] <MasterDuke> vrurg: nope, you're one commit behind it looks like

[20:11] <MasterDuke> there was an nqp bump after https://github.com/rakudo/rakudo/commit/ba814fde4fc46607eb143ebddeaa9ecdba85a036

[20:11] <MasterDuke> https://github.com/rakudo/rakudo/commit/5a76b7ed15f3cd4152dc2d303f178441006139e7

[20:12] <vrurg> MasterDuke: I'm not choosing what commit to use, blin does. Perhaps I was too fast and there was no build for HEAD yet.

[20:12] <MasterDuke> committable6: HEAD say "hi"

[20:12] <committable6> MasterDuke, ¦HEAD(a26ff40): «hi␤»

[20:12] <vrurg> I'll try again now. Will see if it changes anything.

[20:17] <vrurg> Is running. Gonna take 1-1.5hr.

[20:17] <MasterDuke> cool, thanks

[20:20] <vrurg> np. :)

[20:24] *** samebchase-6 joined
[20:25] *** eater joined
[20:26] *** eaterof left
[20:26] *** samebchase- left
[20:56] *** linkable6 left
[20:57] *** linkable6 joined
[21:12] *** patrickb left
[21:43] *** Kaiepi left
[21:55] *** Geth left
[21:56] *** Geth joined
[21:58] *** sxmx left
[22:03] *** sxmx joined
