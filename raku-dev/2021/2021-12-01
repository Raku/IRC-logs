[00:00] *** bartolin left
[00:00] *** andinus left
[00:00] *** discord-raku-bot left
[00:00] *** [Tux] left
[00:00] *** discord-raku-bot joined
[00:00] *** andinus joined
[00:00] *** Colt left
[00:02] *** Colt joined
[00:02] *** reportable6 left
[00:03] *** [Tux] joined
[00:04] *** [Coke] left
[00:05] *** bartolin joined
[00:05] *** reportable6 joined
[00:05] *** [Coke] joined
[00:17] *** squashable6 left
[00:18] *** squashable6 joined
[01:09] *** melezhik left
[02:42] *** frost joined
[06:03] *** reportable6 left
[08:03] *** reportable6 joined
[08:13] <Geth> ¦ rakudo: afc564293d | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/ThreadPoolScheduler.pm6

[08:13] <Geth> ¦ rakudo: Make the max number of threads depend on number of cores (#4652)

[08:13] <Geth> ¦ rakudo: 

[08:13] <Geth> ¦ rakudo: Previously, this was set to 64.  Clearly, should be dependent

[08:13] <Geth> ¦ rakudo: on actual number of cores available.  For now, the maximum is set

[08:13] <Geth> ¦ rakudo: to 8 times the number of cores, based on the previous value and the

[08:13] <Geth> ¦ rakudo: more common 4-8 core hardware that was available when that maximum

[08:13] <Geth> ¦ rakudo: was originally set, but make sure that we always have at least 64 threads

[08:13] <Geth> ¦ rakudo: as before.

[08:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/afc564293d

[08:14] *** linkable6 left
[08:15] *** linkable6 joined
[10:11] *** patrickb joined
[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:41] *** Altai-man joined
[12:03] *** reportable6 left
[12:07] *** frost left
[12:49] *** linkable6 left
[13:17] <Geth> ¦ rakudo/cpucores-once: 4ffafb9bc6 | (Elizabeth Mattijsen)++ | 4 files

[13:17] <Geth> ¦ rakudo/cpucores-once: Make sure that nqp::cpucores is only called once ever

[13:17] <Geth> ¦ rakudo/cpucores-once: 

[13:17] <Geth> ¦ rakudo/cpucores-once: It appears that nqp::cpucores can potentially be a heavy operation

[13:17] <Geth> ¦ rakudo/cpucores-once: (even like needing to fork() apparently on MacOS Monterey), which

[13:17] <Geth> ¦ rakudo/cpucores-once: may well have some adverse effects.

[13:17] <Geth> ¦ rakudo/cpucores-once: 

[13:17] <Geth> ¦ rakudo/cpucores-once: Therefore make sure we only call nqp::cpucores only once at startup.

[13:17] <Geth> ¦ rakudo/cpucores-once: Also introduce an implementation-detail Kernel.cpu-cores-but-one

[13:17] <Geth> ¦ rakudo/cpucores-once: method that will be one less than the number of CPU cores, with a

[13:17] <Geth> ¦ rakudo/cpucores-once: minimum of 1.

[13:17] <Geth> ¦ rakudo/cpucores-once: review: https://github.com/rakudo/rakudo/commit/4ffafb9bc6

[13:18] <Geth> ¦ rakudo: lizmat++ created pull request #4659: Make sure that nqp::cpucores is only called once ever

[13:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4659

[13:22] <qorg11> Does raku modules have to be written in raku themselves to get into rakudo? Like 100% of the module have to be written in raku? I'm writing a module which uses some NativeCall functions

[13:25] <patrickb> qorg11: Do you mean uploaded to the ecosystem? If so, then there is no requirement for modules to be written in pure Raku.

[13:26] <patrickb> There are many modules out there bringing their own C library with them.

[13:26] <qorg11> patrickb: I told a guy that i've been writing a lib to work with UNIX sockets (AF_UNIX), which calls the socket() syscall from C (and then it calls read() and write() from C as well)

[13:27] <qorg11> PF_UNIX

[13:27] <qorg11> and that guy told me that maybe i should try to put it in rakudo

[13:51] *** linkable6 joined
[13:53] <patrickb> It's a question of tradeoffs. One can call external libraries written in C directly using NativeCall. In some situations it can be helpful to utilise a custom C library (e.g. for performance reasons or because third party headers make heavy use of macros). Doing so does bring the disadvantage, that users are then required to have a C compiler installed.

[14:03] *** reportable6 joined
[14:10] <timo> you can write a library that does that in pure raku and call those syscalls (via the libc, probably) with NativeCall

[14:14] <Geth> ¦ DBIish/rbt.sqlite_rows: 9bc9c9d5df | (Rod Taylor)++ | 3 files

[14:14] <Geth> ¦ DBIish/rbt.sqlite_rows: Warn on rows call in sqlite

[14:14] <Geth> ¦ DBIish/rbt.sqlite_rows: 

[14:14] <Geth> ¦ DBIish/rbt.sqlite_rows: Track situations where the value returned may be inaccurate and warn on those usages.

[14:14] <Geth> ¦ DBIish/rbt.sqlite_rows: review: https://github.com/raku-community-modules/DBIish/commit/9bc9c9d5df

[14:16] *** patrickb left
[14:17] <Geth> ¦ DBIish/rbt.sqlite_rows: d0c43afc98 | (Rod Taylor)++ | 3 files

[14:17] <Geth> ¦ DBIish/rbt.sqlite_rows: Warn on rows call in sqlite

[14:17] <Geth> ¦ DBIish/rbt.sqlite_rows: 

[14:17] <Geth> ¦ DBIish/rbt.sqlite_rows: Track situations where the value returned may be inaccurate and warn on those usages.

[14:17] <Geth> ¦ DBIish/rbt.sqlite_rows: review: https://github.com/raku-community-modules/DBIish/commit/d0c43afc98

[14:20] <Geth> ¦ DBIish/rbt.sqlite_rows: 0ad67a0cf8 | (Rod Taylor)++ | 3 files

[14:20] <Geth> ¦ DBIish/rbt.sqlite_rows: Warn on rows call in sqlite

[14:20] <Geth> ¦ DBIish/rbt.sqlite_rows: 

[14:20] <Geth> ¦ DBIish/rbt.sqlite_rows: Track situations where the value returned may be inaccurate and warn on those usages.

[14:20] <Geth> ¦ DBIish/rbt.sqlite_rows: review: https://github.com/raku-community-modules/DBIish/commit/0ad67a0cf8

[14:25] <qorg11> timo: Yeah, maybe that would be a better idea

[14:51] <Geth> ¦ DBIish: 0ad67a0cf8 | (Rod Taylor)++ | 3 files

[14:51] <Geth> ¦ DBIish: Warn on rows call in sqlite

[14:51] <Geth> ¦ DBIish: 

[14:51] <Geth> ¦ DBIish: Track situations where the value returned may be inaccurate and warn on those usages.

[14:51] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/0ad67a0cf8

[15:13] *** [Coke] left
[15:16] *** [Coke] joined
[17:41] *** patrickb joined
[18:00] *** Altai-man left
[18:02] *** reportable6 left
[18:15] *** Xliff_ left
[18:54] *** squashable6 left
[18:56] *** squashable6 joined
[19:12] <gfldex> m: my &flatrotor = &flat ∘ &rotor;

[19:12] <camelia> rakudo-moar 57e1ed028: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    rotor used at line 1. Did you mean 'goto', 'roots'?␤␤»

[19:12] <gfldex> if there a reason why we got sub flat but not sub rotor?

[19:19] <lizmat> difficulty finding out what to rotor ?

[19:19] <lizmat> I'm not sure anymore

[19:23] *** patrickb left
[19:30] *** maettu joined
[19:44] *** MasterDuke joined
[20:04] *** reportable6 joined
[20:16] *** [Coke] left
[20:22] *** [Coke] joined
[20:24] <Geth> ¦ DBIish/rbt.dashy-variable-names: ca767febd6 | (Rod Taylor)++ | 6 files

[20:24] <Geth> ¦ DBIish/rbt.dashy-variable-names: Use $dash-variable style instead of $under_score

[20:24] <Geth> ¦ DBIish/rbt.dashy-variable-names: review: https://github.com/raku-community-modules/DBIish/commit/ca767febd6

[20:35] *** [Coke] left
[20:43] *** [Coke] joined
[20:54] *** [Coke] left
[21:03] <gfldex> m: sub rotor(|c) { c[0].rotor(|c[1..∞]) }; my &flatrotor = &flat ∘ &rotor; say +<199 200 208 210 200 207 240 269 260 263>.&flatrotor(2 => -1).grep(&[≤]);

[21:03] <camelia> rakudo-moar 57e1ed028: OUTPUT: «7␤»

[21:03] <gfldex> It rotates just fine on that list. :)

[21:05] <lizmat> gfldex: then make a PR  :-)

[21:26] *** [Coke] joined
[21:35] <Geth> ¦ DBIish: ca767febd6 | (Rod Taylor)++ | 6 files

[21:35] <Geth> ¦ DBIish: Use $dash-variable style instead of $under_score

[21:35] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/ca767febd6

[21:48] *** linkable6 left
[21:48] *** linkable6 joined
[22:29] <Geth> ¦ nqp: af71e00979 | (Vadim Belman)++ | src/QAST/SpecialArg.nqp

[22:29] <Geth> ¦ nqp: Fix SpecialArg unintentionally modifying class' MRO

[22:29] <Geth> ¦ nqp: 

[22:29] <Geth> ¦ nqp: Happened with `nqp::shift` on uncloned binding to `@!mro` returned by

[22:29] <Geth> ¦ nqp: `self.HOW.parents(self)` call.

[22:29] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/af71e00979

[22:51] <lizmat> vrurg 

[22:51] <lizmat> I guess that warrants an NQP bump >?

[22:52] <vrurg> No. It's a minor issue in a rarely used area.

[22:52] <vrurg> Only causes problems if QAST dump method is used.

[22:52] <lizmat> I see ok

[22:53] <vrurg> Besides, the fixed method also doesn't handle values more complex than natives stored in $!named. So, it's one more fix is upcoming.

[23:15] <Geth> ¦ nqp: a14409fb39 | (Vadim Belman)++ | src/QAST/SpecialArg.nqp

[23:15] <Geth> ¦ nqp: Don't die on non-primitive objects in $!named

[23:15] <Geth> ¦ nqp: 

[23:15] <Geth> ¦ nqp: Namely, add direct support for lists. Any other unknown type will be

[23:15] <Geth> ¦ nqp: reported by its type named and object ID.

[23:15] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/a14409fb39

[23:51] *** childlikempress joined
[23:51] *** moon-child left
[23:52] *** childlikempress is now known as moon-child

