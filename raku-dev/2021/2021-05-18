[00:01] *** reportable6 left
[00:02] *** reportable6 joined
[01:27] *** kvw_5_ joined
[01:31] *** kvw_5 left
[03:18] *** bisectable6 left
[03:18] *** bloatable6 left
[03:18] *** statisfiable6 left
[03:18] *** quotable6 left
[03:18] *** sourceable6 left
[03:18] *** linkable6 left
[03:18] *** committable6 left
[03:18] *** evalable6 left
[03:18] *** releasable6 left
[03:18] *** reportable6 left
[03:18] *** tellable6 left
[03:18] *** coverable6 left
[03:18] *** shareable6 left
[03:18] *** squashable6 left
[03:18] *** unicodable6 left
[03:18] *** greppable6 left
[03:18] *** nativecallable6 left
[03:18] *** benchable6 left
[03:18] *** notable6 left
[03:18] *** committable6 joined
[03:18] *** linkable6 joined
[03:18] *** shareable6 joined
[03:18] *** nativecallable6 joined
[03:19] *** bisectable6 joined
[03:19] *** greppable6 joined
[03:19] *** coverable6 joined
[03:19] *** quotable6 joined
[03:19] *** squashable6 joined
[03:20] *** reportable6 joined
[03:20] *** bloatable6 joined
[03:20] *** tellable6 joined
[03:20] *** unicodable6 joined
[03:20] *** benchable6 joined
[03:20] *** squashable6 left
[03:20] *** statisfiable6 joined
[03:20] *** releasable6 joined
[03:21] *** notable6 joined
[03:21] *** evalable6 joined
[03:21] *** squashable6 joined
[03:21] *** sourceable6 joined
[04:00] *** MasterDuke left
[04:44] *** frost-lab joined
[04:46] *** maggotbrain joined
[06:02] *** reportable6 left
[06:02] *** reportable6 joined
[06:33] *** patrickb joined
[06:42] *** patrickb90 joined
[06:46] *** patrickb left
[06:54] *** patrickb90 left
[06:56] *** domidumont joined
[07:08] *** frost-lab left
[07:35] *** patrickb joined
[07:50] *** frost-lab joined
[07:58] *** MasterDuke joined
[08:00] *** frost-lab left
[08:17] *** frost-lab joined
[09:40] *** evalable6 left
[09:40] *** linkable6 left
[09:42] *** linkable6 joined
[09:42] *** evalable6 joined
[10:17] <Geth> Â¦ rakudo: b1e4350f28 | (Elizabeth Mattijsen)++ | src/core.c/io_operators.pm6

[10:17] <Geth> Â¦ rakudo: Move opening of standard handles into Rakudo::Internals

[10:17] <Geth> Â¦ rakudo: 

[10:17] <Geth> Â¦ rakudo: To make it possible to call it from other places later.

[10:17] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b1e4350f28

[10:22] <Geth> Â¦ rakudo/REPL-now: 5 commits pushed by (Elizabeth Mattijsen)++

[10:22] <Geth> Â¦ rakudo/REPL-now: e0a9c4c2d1 | Add a REPL.now method

[10:22] <Geth> Â¦ rakudo/REPL-now: 3b7b5a4dd2 | Rename method to "here"

[10:22] <Geth> Â¦ rakudo/REPL-now: c88eb6e4c0 | Turn REPL.here into just "repl"

[10:22] <Geth> Â¦ rakudo/REPL-now: 4df693cffe | Add &repl to the poison list

[10:22] <Geth> Â¦ rakudo/REPL-now: da558bccb3 | Don't show the intro when called from code

[10:22] <Geth> Â¦ rakudo/REPL-now: review: https://github.com/rakudo/rakudo/compare/ff87a1d9f6f5...da558bccb3d6

[10:23] <lizmat> just a rebase

[10:44] *** donaldh left
[11:00] <releasable6> Next release in â‰ˆ3 days and â‰ˆ7 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:19] <Geth> Â¦ rakudo/REPL-now: bca6d72917 | (Elizabeth Mattijsen)++ | src/core.c/REPL.pm6

[11:19] <Geth> Â¦ rakudo/REPL-now: Make "exit" not exit,  but just leave the repl-loop

[11:19] <Geth> Â¦ rakudo/REPL-now: 

[11:19] <Geth> Â¦ rakudo/REPL-now: But only if called from the repl() sub

[11:19] <Geth> Â¦ rakudo/REPL-now: review: https://github.com/rakudo/rakudo/commit/bca6d72917

[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:06] *** MasterDuke left
[12:11] *** MasterDuke joined
[12:14] *** patrickb left
[12:27] <Geth> Â¦ rakudo: 0bf10e2600 | (Elizabeth Mattijsen)++ | src/core.c/Array/Shaped.pm6

[12:27] <Geth> Â¦ rakudo: Partial fix for #4363

[12:27] <Geth> Â¦ rakudo: 

[12:27] <Geth> Â¦ rakudo: Fixes the my @a[1]; my @b[1]; @a = @b case.

[12:27] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0bf10e2600

[12:28] *** linkable6 left
[12:31] *** linkable6 joined
[12:42] <Geth> Â¦ rakudo: ede453e1f2 | (Elizabeth Mattijsen)++ | 2 files

[12:42] <Geth> Â¦ rakudo: Fix thinko in native shaped array generator script

[12:42] <Geth> Â¦ rakudo: 

[12:42] <Geth> Â¦ rakudo: Fixes #4363

[12:42] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ede453e1f2

[12:43] *** linkable6 left
[12:46] *** linkable6 joined
[12:47] <Geth> Â¦ roast: eebf73bb88 | (Elizabeth Mattijsen)++ | 2 files

[12:47] <Geth> Â¦ roast: Add tests for #4363

[12:47] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/eebf73bb88

[12:47] *** patrickb joined
[12:59] <Geth> Â¦ rakudo: 21a60e17e5 | (Elizabeth Mattijsen)++ | t/02-rakudo/reproducible-builds.t

[12:59] <Geth> Â¦ rakudo: Fix #4362

[12:59] <Geth> Â¦ rakudo: 

[12:59] <Geth> Â¦ rakudo: The :bin is superfluous, and it was previously ignored (until the

[12:59] <Geth> Â¦ rakudo: sub versions of many io operators got refactored by yours truly).

[12:59] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/21a60e17e5

[12:59] *** linkable6 left
[13:01] *** linkable6 joined
[13:20] <Geth> Â¦ rakudo/run-throw: 6408e94f64 | (Elizabeth Mattijsen)++ | src/core.c/Proc.pm6

[13:20] <Geth> Â¦ rakudo/run-throw: Add :throw named argument to run()

[13:20] <Geth> Â¦ rakudo/run-throw: 

[13:20] <Geth> Â¦ rakudo/run-throw: Basically, this will just run the same logic as sinking, causing a

[13:20] <Geth> Â¦ rakudo/run-throw: failure to be thrown immediately, instead of silently continuing.

[13:20] <Geth> Â¦ rakudo/run-throw: And this not producing any output with :out.

[13:20] <Geth> Â¦ rakudo/run-throw: 

[13:20] <Geth> Â¦ rakudo/run-throw: Also some style changes to run() to make it better readable

[13:20] <Geth> Â¦ rakudo/run-throw: review: https://github.com/rakudo/rakudo/commit/6408e94f64

[13:20] <Geth> Â¦ rakudo: lizmat++ created pull request #4368: Add :throw named argument to run()

[13:20] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4368

[13:23] *** uzl[m] left
[13:30] *** uzl[m] joined
[13:30] *** chansen_ left
[13:33] *** chansen_ joined
[13:42] *** chansen_ left
[13:43] *** chansen_ joined
[13:50] *** cog joined
[13:59] *** vrurg left
[13:59] *** vrurg_ joined
[14:00] *** eater left
[14:01] *** samcv_ joined
[14:01] *** Kaiepi left
[14:01] *** Kaiepi joined
[14:01] *** patrickb left
[14:01] *** samcv left
[14:01] *** eaterof joined
[14:01] *** mst joined
[14:02] *** patrickb joined
[14:20] *** b2gills left
[14:21] *** b2gills joined
[14:59] <Geth> Â¦ rakudo: 1d8d05f5bc | (Elizabeth Mattijsen)++ | src/core.c/allomorphs.pm6

[14:59] <Geth> Â¦ rakudo: Fix #4368

[14:59] <Geth> Â¦ rakudo: 

[14:59] <Geth> Â¦ rakudo: First coerce the allomorph to a string, then create a Prozy for it

[14:59] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1d8d05f5bc

[14:59] *** linkable6 left
[15:02] <lizmat> actually, #4369

[15:02] *** linkable6 joined
[15:04] <lizmat> afk for a few hours&

[15:30] *** linkable6 left
[15:31] *** linkable6 joined
[16:42] *** domidumont left
[17:12] <Geth> Â¦ rakudo/rakuast: 47ce5ad7a4 | (Jonathan Worthington)++ | 2 files

[17:12] <Geth> Â¦ rakudo/rakuast: RakuAST node for \o, \x, and \c in regexes

[17:12] <Geth> Â¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/47ce5ad7a4

[17:17] * [Coke] wonders if we need a roast test for that since we "got it wrong" so far?

[17:22] *** patrickb left
[17:26] <lizmat> [Coke]: we need a *lot* of allomorph related tests

[17:41] <MasterDuke> i think [Coke] was referring to https://github.com/rakudo/rakudo/commit/47ce5ad7a4#diff-7c9a2c5696e95aae44844768155858c03f573f9e6ce2c60e448e61094bdff160R509

[17:42] *** samcv_ is now known as samcv

[17:42] *** samcv left
[17:42] *** samcv joined
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:13] <Geth> Â¦ rakudo: tbrowder++ created pull request #4371: Provide a method returning a real 'posix' value

[18:13] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4371

[18:19] <tbrowder> .tell lizmat my horse bolted at the gate--sorry

[18:19] <tellable6> tbrowder, I'll pass your message to lizmat

[18:21] <lizmat> tbrowder: no problem  :-)

[18:22] <tbrowder> but how would you improve what you already suggested (without lots of other changes)?

[18:23] <lizmat> locally I already have:

[18:23] <lizmat> $ r 'use v6.*; dd DateTime.now.posix'

[18:23] <lizmat> 1621362212.1423843e0

[18:23] <lizmat> $ r 'use v6.d; dd DateTime.now.posix'

[18:23] <lizmat> 1621362232

[18:25] <tbrowder> hm, lizmat the raku magician!

[18:26] <tbrowder> ah, the ~17 sec diff..been there, done that

[18:27] <tbrowder> internals?

[18:27] <tbrowder> tai?

[18:27] <lizmat> no just lazy, waiting 17 seconds between running that piece of code :-)

[18:28] <lizmat> or more like 20 actually

[18:35] <lizmat> $ r 'use v6.* say DateTime.new(2021,5,18,20,30,42.5).posix'

[18:35] <lizmat> 1621369842.5

[18:36] <lizmat> $ r 'use v6.d say DateTime.new(2021,5,18,20,30,42.5).posix'

[18:36] <lizmat> 1621369842

[18:36] <lizmat> so no difference if you go by the same DateTime value

[18:41] <tbrowder> so 6.* vs 6.d? that's cheating ;-D

[18:43] <tbrowder> well retro seems to be popular among some moderns

[18:46] <Geth> Â¦ rakudo/posix-real: 7d3dc5dc39 | (Elizabeth Mattijsen)++ | src/core.e/core_prologue.pm6

[18:46] <Geth> Â¦ rakudo/posix-real: Make DateTime.posix return a fractional value in 6.e

[18:46] <Geth> Â¦ rakudo/posix-real: 

[18:46] <Geth> Â¦ rakudo/posix-real: This is really a proof-of-concept.  It basically saves the DateTime

[18:46] <Geth> Â¦ rakudo/posix-real: class that is known at the beginning of parsing the 6.e core setting

[18:46] <Geth> Â¦ rakudo/posix-real: as "DateTimeD", and then creates a DateTime class that inherits from

[18:46] <Geth> Â¦ rakudo/posix-real: "DateTimeD".  Several notes to make about this:

[18:46] <Geth> Â¦ rakudo/posix-real: 

[18:46] <Geth> Â¦ rakudo/posix-real: <â€¦commit message has 12 more linesâ€¦>

[18:46] <Geth> Â¦ rakudo/posix-real: review: https://github.com/rakudo/rakudo/commit/7d3dc5dc39

[18:46] *** MasterDuke left
[18:47] <Geth> Â¦ rakudo: lizmat++ created pull request #4372: Make DateTime.posix return a fractional value in 6.e

[18:47] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4372

[18:47] <lizmat> tbrowder: 6.* is just short for 6.e.PREVIEW atm

[18:48] <tbrowder> ok, thnx

[18:52] <tbrowder> wow, deep magic! makes my head hurt. can my PR be used before 'e'?

[18:53] <lizmat> I'd like to hear jnthn's opinion about my proposal

[18:54] <tbrowder> although that's kind of like the magic you showed me earlier to subclass DateTime

[18:54] <lizmat> I feel moving forward, having posix return a Real value feels better than adding named args now

[18:54] <lizmat> yeah, that was the inspiration :-)

[19:02] <tbrowder> any updated estimate on release of e?

[19:05] <lizmat> probably not before RakuAST lands, and that's Q4 by the looks of it now

[19:15] *** camelia left
[19:16] *** nine left
[19:18] *** MasterDuke joined
[19:22] *** japhb left
[19:24] *** japhb joined
[19:34] *** camelia joined
[19:37] *** camelia left
[19:38] *** nine joined
[19:39] *** nine left
[19:43] *** nine joined
[19:45] *** camelia joined
[19:52] <Geth> Â¦ rakudo: 17c55f3ccb | (Elizabeth Mattijsen)++ | src/core.c/DateTime.pm6

[19:52] <Geth> Â¦ rakudo: Make DateTime.posix about 12x as fast

[19:52] <Geth> Â¦ rakudo: 

[19:52] <Geth> Â¦ rakudo: While looking at the code, and how it handled the "ignore timezone"

[19:52] <Geth> Â¦ rakudo: option, it occurred to me that `posix` actually doesn't care about

[19:52] <Geth> Â¦ rakudo: leap seconds.  And the timezone is expressed in seconds.  So the

[19:52] <Geth> Â¦ rakudo: quick way to get a posix value is just to subtract the timezone

[19:52] <Geth> Â¦ rakudo: value from the result of the Claus TÃ¸ndering algorithm.

[19:52] <Geth> Â¦ rakudo: 

[19:52] <Geth> Â¦ rakudo: Also make DateTime.posix a multi, so a. it can easily accomodate

[19:52] <Geth> Â¦ rakudo: other candidates, and b. to make the common case (do *not* ignore

[19:52] <Geth> Â¦ rakudo: timezone) much better optimizable.

[19:52] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/17c55f3ccb

[19:52] <lizmat> tbrowder might like that  :-)

[20:04] <tbrowder> so, your PR gets closer to mine but with a bonus speed-up, nice!

[20:05] <tbrowder> mine has the same proto plus only three lines for my new multi (which would need a tweak...

[20:09] <tbrowder> i understand yr wanting to wait to move to 'e' for the real return, and as has been demoed in my latest roast merge, the 6.d user can get a real posix value with a modicum of work.

[20:11] <tbrowder> but, what is the downside of adding my multi now: a new multi to be deprecated in 'f'?

[20:12] <tbrowder> and two for the price of one in 'e'?

[20:13] <tbrowder> oh, the inpatience of youth  :-)

[20:25] <Geth> Â¦ rakudo: ec8b1ae77a | (Elizabeth Mattijsen)++ | src/core.c/DateTime.pm6

[20:25] <Geth> Â¦ rakudo: Relax the return sig of DateTime.posix

[20:25] <Geth> Â¦ rakudo: 

[20:25] <Geth> Â¦ rakudo: To be compatible with any future versions

[20:25] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ec8b1ae77a

[20:31] <Geth> Â¦ roast: stoned++ created pull request #735: Add tests for substr-rw on allomorph types

[20:31] <Geth> Â¦ roast: review: https://github.com/Raku/roast/pull/735

[20:34] <Geth> Â¦ roast: 54e060b0c5 | (Stoned Elipot)++ | S02-literals/allomorphic.t

[20:34] <Geth> Â¦ roast: Add tests for substr-rw on allomorph types

[20:34] <Geth> Â¦ roast: 

[20:34] <Geth> Â¦ roast: ref rakudo/rakudo#4369

[20:34] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/54e060b0c5

[20:34] <Geth> Â¦ roast: f3256405d3 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S02-literals/allomorphic.t

[20:34] <Geth> Â¦ roast: Merge pull request #735 from stoned/allomorph-substr-rw

[20:34] <Geth> Â¦ roast: 

[20:34] <Geth> Â¦ roast: Add tests for substr-rw on allomorph types

[20:34] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/f3256405d3

[20:34] *** linkable6 left
[20:37] *** linkable6 joined
[20:39] <lizmat> tbrowder  :-)

[20:42] <Geth> Â¦ rakudo/posix-real: 96b8126f54 | (Elizabeth Mattijsen)++ | src/core.e/core_prologue.pm6

[20:42] <Geth> Â¦ rakudo/posix-real: Make DateTime.posix return a fractional value in 6.e

[20:42] <Geth> Â¦ rakudo/posix-real: 

[20:42] <Geth> Â¦ rakudo/posix-real: This is really a proof-of-concept.  It basically saves the DateTime

[20:42] <Geth> Â¦ rakudo/posix-real: class that is known at the beginning of parsing the 6.e core setting

[20:42] <Geth> Â¦ rakudo/posix-real: as "DateTimeD", and then creates a DateTime class that inherits from

[20:42] <Geth> Â¦ rakudo/posix-real: "DateTimeD".  Several notes to make about this:

[20:42] <Geth> Â¦ rakudo/posix-real: 

[20:42] <Geth> Â¦ rakudo/posix-real: <â€¦commit message has 12 more linesâ€¦>

[20:42] <Geth> Â¦ rakudo/posix-real: review: https://github.com/rakudo/rakudo/commit/96b8126f54

[20:43] <Geth> Â¦ rakudo/posix-real: 517827f4d5 | (Elizabeth Mattijsen)++ | src/core.e/core_prologue.pm6

[20:43] <Geth> Â¦ rakudo/posix-real: Update to new multi version of DateTime.posix

[20:43] <Geth> Â¦ rakudo/posix-real: 

[20:43] <Geth> Â¦ rakudo/posix-real: As a bonus, only the bare candidate needs to be defined.

[20:43] <Geth> Â¦ rakudo/posix-real: review: https://github.com/rakudo/rakudo/commit/517827f4d5

[20:52] <tbrowder>  hm, have you tested against spectest?

[21:03] <lizmat> yes

[21:03] <lizmat> clean

[21:08] <tbrowder> cool!

[22:01] *** dogbert17 joined
[22:06] *** dogbert11 left
[22:07] <Geth> Â¦ nqp: MasterDuke17++ created pull request #723: Use Win32 native API to get file changetime on JVM

[22:07] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/pull/723

[22:40] <japhb> , plus

[22:40] <japhb> Gah

[22:51] <tbrowder> well, i guess i'll have to add a real posix method to DateTime::Posix

[22:52] <tbrowder> er, DateTime::Julian

[23:06] *** evalable6 left
[23:06] *** linkable6 left
[23:07] *** evalable6 joined
[23:08] *** linkable6 joined
[23:25] *** AlexDaniel` left
[23:26] *** patrickbkr[m] left
[23:43] *** AlexDaniel` joined
[23:46] *** patrickbkr[m] joined
[23:59] *** mst left
