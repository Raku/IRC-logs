[00:04] *** reportable6 left
[00:07] *** reportable6 joined
[00:18] *** dogbert17 joined
[00:49] <japhb> CBOR Capture is now officially IANA registered!  :-)

[00:49] <japhb> https://github.com/japhb/cbor-specs/blob/main/capture.md

[00:56] <timo> cool

[00:58] <japhb> ... and just uploaded CBOR::Simple 0.1.1 which includes support for Capture as well as packed native (u)int arrays

[01:01] <timo> nice

[01:35] *** frost joined
[03:12] *** linkable6 left
[03:12] *** evalable6 left
[03:13] *** linkable6 joined
[03:14] *** evalable6 joined
[03:46] *** MasterDuke left
[03:46] *** Xliff joined
[04:10] <Geth> ¦ rakudo: vrurg++ created pull request #4635: Get either parametric or concrete roles in MRO when requested

[04:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4635

[04:14] <Geth> ¦ roast: vrurg++ created pull request #772: Add tests for :concretizations parameter of .mro

[04:14] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/772

[04:46] *** linkable6 left
[04:46] *** evalable6 left
[04:57] *** Xliff left
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[08:49] *** evalable6 joined
[09:47] *** linkable6 joined
[10:37] *** frost left
[10:39] *** frost joined
[10:46] *** frost left
[10:59] *** frost joined
[11:50] *** Altai-man joined
[11:52] <Altai-man> releasable6, status

[11:52] <releasable6> Altai-man, Next release in ≈9 days and ≈7 hours. 3 blockers. Changelog for this release was not started yet

[11:52] <releasable6> Altai-man, Details: https://gist.github.com/5a794b193733c47bd8e51443146bfdcb

[11:54] <Altai-man> it's maybe a nice idea to mention we need a new release manager in the weekly

[11:57] <lizmat> weekly: <Altai-man>	it's maybe a nice idea to mention we need a new release manager in the weekly

[11:57] <notable6> lizmat, Noted! (weekly)

[11:57] <lizmat> note to self: I *knew* I had forgotten something  :-(

[12:03] *** reportable6 left
[12:09] *** frost left
[13:53] <lizmat> wonder what causes this difference in performance:

[13:53] <lizmat> m: say ($_,$_+2) given (^Inf).map({$_ if .is-prime && ($_+2).is-prime}).skip(99999).head; say now - INIT now

[13:53] <camelia> rakudo-moar 09f5069cc: OUTPUT: «(18409199 18409201)␤2.487410392␤»

[13:54] <lizmat> m: say ($_,$_+2) given (^Inf).grep({.is-prime && ($_+2).is-prime}).skip(99999).head; say now - INIT now

[13:54] <camelia> rakudo-moar 09f5069cc: OUTPUT: «(18409199 18409201)␤5.930464612␤»

[13:54] <lizmat> aka .map: { $_ if condition }   is about 2x as fast as .grep: { condition }   ??

[13:55] <lizmat> afk for a bit&

[14:54] <ugexe> well map isnt filtering out any elements

[14:55] <ugexe> it would have to be like .map({ $_ if condition }).grep(*.defined)

[15:00] *** linkable6 left
[15:00] *** evalable6 left
[15:01] *** linkable6 joined
[15:01] *** evalable6 joined
[15:04] <JRaspass> Pretty sure it is, false if should return Empty which collapses down: (^10).map({ $_ if .is-prime }).say # (2 3 5 7)

[15:06] *** vrurg left
[15:06] <JRaspass> { .is-prime ?? $_ !! Empty } and { .is-prime ?? $_ !! |() } all work the same afaict

[15:07] *** vrurg joined
[15:17] <ugexe> ouch

[15:41] <lizmat> .map: { $_ if condition }   *does* filter

[15:41] <lizmat> m: say (^10).map: { $_ if $_ %% 2 }

[15:41] <camelia> rakudo-moar 09f5069cc: OUTPUT: «(0 2 4 6 8)␤»

[16:28] *** cognominal left
[16:34] *** patrickb joined
[16:35] *** Kaipi left
[16:35] *** Kaipi joined
[17:05] *** reportable6 joined
[17:24] <Geth> ¦ rakudo: 57387455dd | timo++ (committed using GitHub Web editor) | src/core.c/Int.pm6

[17:24] <Geth> ¦ rakudo: Very simple ACCEPTS for Int:D vs Int:D (#4625)

[17:24] <Geth> ¦ rakudo: 

[17:24] <Geth> ¦ rakudo: Very simple ACCEPTS for Int:D vs Int:D

[17:24] <Geth> ¦ rakudo: 

[17:24] <Geth> ¦ rakudo: Otherwise running ACCEPTS on an Enum goes via Numeric's ACCEPTS,

[17:24] <Geth> ¦ rakudo: which first calls to .Numeric to coerce, and has checks for nan

[17:25] <Geth> ¦ rakudo: and inf on top of the numeric value comparison.

[17:25] <Geth> ¦ rakudo: 

[17:25] <Geth> ¦ rakudo: This new candidate has a bytecode small enough to be inlined, as

[17:25] <Geth> ¦ rakudo: opposed to the Numeric ACCEPTS method.

[17:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/57387455dd

[17:25] *** linkable6 left
[17:53] *** MasterDuke joined
[18:02] *** reportable6 left
[18:06] *** Altai-man left
[18:54] *** casaca left
[18:54] *** casaca joined
[19:17] *** casaca left
[19:22] *** casaca joined
[19:33] <Geth> ¦ nqp: 9a4d5d0349 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[19:33] <Geth> ¦ nqp: Bump MoarVM for the latest fixes

[19:33] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/9a4d5d0349

[19:34] <Geth> ¦ rakudo/master: 5 commits pushed by (Vadim Belman)++

[19:34] <Geth> ¦ rakudo/master: 856f1af0bb | Get either parametric or concrete roles in MRO when requested

[19:34] <Geth> ¦ rakudo/master: bf2a07fbdf | Micro-optimize method roles of ConcreteRoleHOW

[19:34] <Geth> ¦ rakudo/master: 832a847689 | Unify mro method signature and use throughout metamodel

[19:34] <Geth> ¦ rakudo/master: 641a86d54a | Cleanup of outdated comments

[19:34] <Geth> ¦ rakudo/master: d388526287 | Merge pull request #4635 from vrurg/rework-mro-roles

[19:34] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/57387455dddf...d388526287c0

[19:34] <Geth> ¦ roast: 0446925acc | (Vadim Belman)++ | S12-class/mro-6e.t

[19:34] <Geth> ¦ roast: Add tests for :concretizations parameter of .mro

[19:34] <Geth> ¦ roast: 

[19:34] <Geth> ¦ roast: In support of rakudo/rakudo#4635

[19:34] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0446925acc

[19:34] <Geth> ¦ roast: e8edc8bd99 | (Vadim Belman)++ (committed using GitHub Web editor) | S12-class/mro-6e.t

[19:34] <Geth> ¦ roast: Merge pull request #772 from vrurg/rework-mro-roles

[19:34] <Geth> ¦ roast: 

[19:34] <Geth> ¦ roast: Add tests for :concretizations parameter of .mro

[19:34] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e8edc8bd99

[19:50] <Geth> ¦ rakudo: b9611b6327 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[19:50] <Geth> ¦ rakudo: Bump NQP to get the latest MoarVM fixes

[19:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b9611b6327

[19:53] <Geth> ¦ nqp: 9bd4cbdda4 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[19:53] <Geth> ¦ nqp: Bump MoarVM for alloca changes

[19:53] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/9bd4cbdda4

[20:05] <japhb> Does that need a matching Rakudo bump again?

[20:05] *** reportable6 joined
[20:07] <Geth> ¦ rakudo: 3d80bec7c9 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[20:07] <Geth> ¦ rakudo: Bump NQP to get latest alloca MoarVM fixes

[20:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3d80bec7c9

[20:09] <lizmat> japhb 

[20:09] <lizmat> yes

[20:14] <lizmat> invoking the [Tux] for another test-t :)

[20:18] <japhb> :-)

[20:20] <lizmat> it's inching closer 1 sec on my machine

[20:20] <lizmat> 1.017 best so far

[20:21] <vrurg> Would be interesting to compare compilation times. For the first time in many months I saw parse stage <60s prior to the bump.

[20:24] <lizmat> Stage parse      :  57.557   # last one

[20:25] <lizmat> Stage parse      :  57.328  # the one before that

[20:25] <MasterDuke> Stage parse      :  40.945  # my latest

[20:25] <vrurg> 58.26 vs. 58.86 – about the same.

[20:26] <vrurg> MasterDuke: your AMD, aha... :D

[20:26] <MasterDuke> nine and jnthn have even newer/faster machines

[20:27] <MasterDuke> i think they're around 33s

[20:27] <lizmat> 58.055  55.264  56.307 56.561 55.951 53.752 57.522 59.874 56.997 56.283    # going back in tme

[20:27] *** linkable6 joined
[20:27] <vrurg> I guessed from jnthns words that he's anticipating <60sec compile time.

[20:28] <MasterDuke> i think once a long time ago i checked out all the releases since christmas and built them and graphed the compile time, but that was years ago

[20:29] <vrurg> lizmat: my usual for parse was 63+. So, seeing 58 was a pleasant surprise. And the codebase doesn't get any less.

[20:29] <vrurg> MasterDuke: have courage to repeat?

[20:30] <MasterDuke> probably can, but not right away, going out of town for a couple days

[20:31] <vrurg> do you have the script on your hands?

[20:31] <vrurg> Or there was no script, all by bare hands?

[20:32] <MasterDuke> i probably just did it manually, it's not that complicated (and there were fewer releases at the time)

[20:33] <vrurg> Ok, if I get so tired that could do nothing else, I'd try it. Should be fun.

[20:52] *** MasterDuke left
[20:53] <tonyo> are you guys testing Stage parse on a branch? on master i get 73s here and around 25 or 26 on the M1

[20:54] <lizmat> my times were on master

[20:54] <lizmat> so the M1 is faster even without JIT ?

[20:55] <tonyo> yea

[20:55] <tonyo> this machine is 2.4ghz 20 core, 256gb ram

[20:55] <lizmat> wow

[20:55] <lizmat> well, 20 core doesn't mean much for building, right ?

[20:58] <lizmat> tonyo: that's a MacMini or what ?

[20:58] <tonyo> in this case not really

[20:58] *** MasterDuke joined
[20:58] <tonyo> nope, just a machine i put together to smoke fez eco and provide scores/compatibility matrices for some BSD, some linux, windows, and osx

[20:59] <lizmat> with an M1 ?

[20:59] <tonyo> osx works as a hackintosh via qemu

[20:59] <nine> Stage parse      :  33.672

[20:59] <tonyo> oh, no. the m1 is an airbook

[21:00] <lizmat> aaaahhh ok  *phew*  :-)

[21:00] <tonyo> ?

[21:02] <lizmat> I got the impression you got a 20core M1 with 256G RAM, and I was wondering where on the Apple site I could order that :-)

[21:04] <tonyo> you're trying to go to space?

[21:04] <tonyo> i'd probably order one too, that thing is fast

[21:14] <Geth> ¦ rakudo/add-Any.infer: 48e5595631 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[21:14] <Geth> ¦ rakudo/add-Any.infer: Add an Any(iterable).infer method

[21:14] <Geth> ¦ rakudo/add-Any.infer: 

[21:14] <Geth> ¦ rakudo/add-Any.infer: Given an iterable thing of values, will return the type / role that

[21:14] <Geth> ¦ rakudo/add-Any.infer: is tightest for the values given.

[21:14] <Geth> ¦ rakudo/add-Any.infer: 

[21:14] <Geth> ¦ rakudo/add-Any.infer: As proposed by jnthn on https://logs.liz.nl/moarvm/2021-11-09.html#10:25-0001

[21:14] <Geth> ¦ rakudo/add-Any.infer: review: https://github.com/rakudo/rakudo/commit/48e5595631

[21:14] <Geth> ¦ rakudo/add-Any.infer: 513ad8920d | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[21:14] <Geth> ¦ rakudo/add-Any.infer: Make .infer take a fast path for all identical types

[21:14] <Geth> ¦ rakudo/add-Any.infer: 

[21:14] <Geth> ¦ rakudo/add-Any.infer: And fall back to the old algorithm if a different type is

[21:14] <Geth> ¦ rakudo/add-Any.infer: detected.

[21:14] <Geth> ¦ rakudo/add-Any.infer: 

[21:14] <Geth> ¦ rakudo/add-Any.infer: This makes (1,2,3,4,5,6,7,8,9,10).infer about 9x as fast.

[21:14] <Geth> ¦ rakudo/add-Any.infer: review: https://github.com/rakudo/rakudo/commit/513ad8920d

[21:14] <Geth> ¦ rakudo/add-Any.infer: 8feb3e773d | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[21:14] <Geth> ¦ rakudo/add-Any.infer: Simplify .infer logic, vrurg++

[21:14] <Geth> ¦ rakudo/add-Any.infer: 

[21:14] <Geth> ¦ rakudo/add-Any.infer: Now with .^mro(:roles), we don't need to handle them separately.

[21:14] <Geth> ¦ rakudo/add-Any.infer: review: https://github.com/rakudo/rakudo/commit/8feb3e773d

[21:14] <lizmat> (a rebase + a fix)

[22:49] *** dogbert11 joined
[22:49] *** dogbert17 left
[23:19] *** patrickb left
