[00:03] *** reportable6 left
[00:14] *** dogbert11 joined
[00:14] *** dogbert17 left
[01:05] *** reportable6 joined
[01:42] *** evalable6 joined
[02:15] *** frost joined
[03:21] *** Voldenet_ joined
[03:22] *** Voldenet left
[03:22] *** Voldenet_ is now known as Voldenet

[04:13] *** kjp left
[04:15] *** kjp joined
[04:41] *** linkable6 joined
[05:41] *** evalable6 left
[05:41] *** linkable6 left
[05:44] *** evalable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[07:18] *** unicodable6 left
[07:18] *** sourceable6 left
[07:18] *** releasable6 left
[07:18] *** bloatable6 left
[07:18] *** benchable6 left
[07:18] *** statisfiable6 left
[07:18] *** bisectable6 left
[07:18] *** notable6 left
[07:18] *** evalable6 left
[07:18] *** quotable6 left
[07:18] *** reportable6 left
[07:18] *** shareable6 left
[07:18] *** squashable6 left
[07:18] *** greppable6 left
[07:18] *** committable6 left
[07:18] *** nativecallable6 left
[07:18] *** tellable6 left
[07:18] *** coverable6 left
[07:18] *** squashable6 joined
[07:18] *** tellable6 joined
[07:19] *** unicodable6 joined
[07:19] *** quotable6 joined
[07:19] *** sourceable6 joined
[07:19] *** bloatable6 joined
[07:19] *** greppable6 joined
[07:21] *** shareable6 joined
[07:42] *** linkable6 joined
[08:19] *** benchable6 joined
[08:19] *** releasable6 joined
[08:20] *** committable6 joined
[08:20] *** notable6 joined
[08:21] *** statisfiable6 joined
[08:21] *** reportable6 joined
[09:20] *** evalable6 joined
[10:19] *** coverable6 joined
[10:19] *** bisectable6 joined
[10:23] <Geth> Â¦ rakudo/megamorphic-handlers: 85df0ba1a1 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[10:23] <Geth> Â¦ rakudo/megamorphic-handlers: Use named constants for megamorphic thresholds

[10:23] <Geth> Â¦ rakudo/megamorphic-handlers: review: https://github.com/rakudo/rakudo/commit/85df0ba1a1

[11:19] *** evalable6 left
[11:19] *** linkable6 left
[11:20] *** nativecallable6 joined
[11:20] <Geth> Â¦ rakudo/master: 13 commits pushed by (Jonathan Worthington)++

[11:20] <Geth> Â¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/580b3ba790a9...665adc06c3ff

[11:22] *** evalable6 joined
[12:02] *** reportable6 left
[12:22] *** linkable6 joined
[13:03] *** reportable6 joined
[13:42] *** MasterDuke left
[14:09] *** MasterDuke joined
[14:40] *** vrurg left
[14:42] *** vrurg joined
[14:43] <[Tux]> Rakudo v2021.10-42-g665adc06c (v6.d) on MoarVM 2021.10-21-g0821570aa

[14:43] <[Tux]> csv-test-xs-20      0.372 -  0.387

[14:43] <[Tux]> test-t --race       0.981 -  1.081

[14:43] <[Tux]> csv-ip5xs           1.360 -  1.478

[14:43] <[Tux]> test-t              1.653 -  1.708

[14:43] <[Tux]> csv-parser          4.202 -  4.396

[14:43] <[Tux]> test                7.247 -  7.966

[14:43] <[Tux]> test-t-20 --race    7.565 -  8.440

[14:43] <[Tux]> csv-ip5xs-20       15.669 - 16.848

[14:43] <[Tux]> test-t-20          25.124 - 25.381

[14:54] <Xliff_> https://gist.github.com/Xliff/77534ec98cfbd32d1298457d2145149e

[15:00] *** frost left
[16:12] *** evalable6 left
[16:12] *** linkable6 left
[16:12] *** evalable6 joined
[16:34] <lizmat> hmmm... should a "depends" field in  META6.json be an array, or a hash?

[16:34] <ugexe> there are two forms, one is an array and one is a hash

[16:35] <lizmat> https://github.com/CurtTilmes/raku-db/blob/master/META6.json#L11

[16:35] <lizmat> aha

[16:35] <ugexe> https://github.com/ugexe/zef/blob/master/t/distribution-depends-parsing.t

[16:36] <lizmat> ugexe: but that's an array, in which the element can be a hash

[16:36] <lizmat> the DB example, it's a hash on the outside

[16:36] <ugexe> there are various formats

[16:36] <lizmat> so there are 3 forms at least

[16:36] <ugexe> https://github.com/ugexe/zef/blob/ba39127d9eebf451677058d8649b3dbcc4dc22c7/t/distribution-depends-parsing.t#L52

[16:37] <lizmat> aaah I see...

[16:37] <ugexe> there are two data types that can be used for depends. there are also two different ways to declare the items inside depends

[16:37] <ugexe> i.e. string "Foo:ver<1>" and hash `{ "name":"Foo", "ver":1 }`

[16:37] <lizmat> ok, thanks for the examples

[16:41] <lizmat> ugexe: so there's no form of:   depends: "Foo"

[16:41] <lizmat> aka, just a scalar value

[16:41] <ugexe> no

[17:11] *** nine left
[17:13] *** linkable6 joined
[17:14] *** nine joined
[17:15] *** nine left
[17:15] *** nine joined
[17:51] <Geth> Â¦ nqp: 94a5440799 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[17:51] <Geth> Â¦ nqp: Bump NQP to get the latest MoarVM fixes

[17:51] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/94a5440799

[18:02] *** reportable6 left
[18:04] <Geth> Â¦ rakudo: a8329f6fd0 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[18:04] <Geth> Â¦ rakudo: Bump NQP to get the latest MoarVM fixes

[18:04] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a8329f6fd0

[18:05] <lizmat> well... actually Rakudo of course  :-(

[18:07] <lizmat> if a module depends on NativeCall, should it be listed as a dependency?   as it is always in a Raku distribution?

[18:07] <lizmat> or is NativeCall considered an implementation detail?

[18:08] <lizmat> https://github.com/tony-o/raku-fez/blob/master/META6.json#L11   # case in point

[18:10] <ugexe> yes its a dependency

[18:10] <ugexe> a strict code base would require e.g. versioning requirements on it etc

[18:11] <ugexe> plus if you want to do something like install all dependencies into a single external repo you have to list them all

[18:44] <lizmat> but how would you install "NativeCall" ?

[18:45] <lizmat> without installing Rakudo?

[18:45] <lizmat> you're basically saying that you're depending on Rakudo, but without Rakudo the whole thing would be pointless anyway

[18:50] <ugexe> just get the distribution from a CURI (probably site)

[18:50] <ugexe> and install it wherever

[18:51] <ugexe> my $dist = CURI.candidates(...). CURI.new(prefix => ...).install($dist)

[18:52] <ugexe> this is why i keep saying CURs are naive recommendation engines

[18:54] <ugexe> also why i think the core modules should be broken into individual distributions, but that would require updating all the build tooling to add the additional -I paths

[19:00] <ugexe> i cant really think of a single advantage of not treating them as dependencies

[19:02] <lizmat> fair enough  :-)

[19:03] <lizmat> now, to create a fully qualified identity for NativeCall

[19:03] <ugexe> its unfortunate we cant do that fully -- they are all versioned as e.g. 6.d

[19:03] <lizmat> NativeCall:ver<*>:auth<core>  ?

[19:03] <ugexe> instead of 6.d.$foo

[19:03] <ugexe> the auth is still perl i believe

[19:04] <lizmat> where is that mentioned ?

[19:05] <ugexe> the META6.json in lib

[19:05] <ugexe> well i guess that gets generated at build time

[19:05] <lizmat> doesn't seem to survive that ?

[19:05] <ugexe> its inside install-core-dist or whatever script

[19:06] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/tools/build/install-core-dist.raku#L47 i guess?

[19:06] <lizmat> ah, ok

[19:06] <lizmat> it's not an in-file meta

[19:06] <lizmat> maybe we should just add that to lib ?

[19:06] <ugexe> it is after install

[19:07] <ugexe> but its some sha1 in a install repo

[19:07] <ugexe> and it wouldnt go in lib, it would go in lib/../, and it would look out of place there

[19:07] <lizmat> what would be a reason against just adding a META6.json to the rakudo lib dir ?

[19:07] <ugexe> because META6.json doesnt go in lib

[19:07] <ugexe> technically you could but i wouldnt do it

[19:07] <lizmat> right, so it should be in the root dir

[19:08] <lizmat> so any reason to not put it in the root dir ?

[19:08] <lizmat> ah, I see now...

[19:08] <lizmat> different META6.json for different backend

[19:08] <lizmat> s

[19:09] <lizmat> do we have support for dependencies for different backends?

[19:10] <ugexe> not really, that doesnt belong in META6.json which doesnt is not tightly coupled to an implementation that has backends... you could use like from<bin> to find an appropriate backend

[19:12] <ugexe> similar to how you cant say you want a rakudo > 2021.12

[19:20] <lizmat> hmmm...  

[19:21] <lizmat> anyways, thanks for the explanation  :-)

[19:21] <ugexe> it does suggest writing modules that only work on one-backend are not what the goal of raku was

[19:24] <lizmat> it does, doesn't it..  :-)

[19:40] <Geth> Â¦ roast: 6f76902ad6 | (Daniel Green)++ | S32-num/expmod.t

[19:40] <Geth> Â¦ roast: Turn a skip in expmod tests into a todo

[19:40] <Geth> Â¦ roast: 

[19:40] <Geth> Â¦ roast: This way when it starts passing we'll know to un-todo it.

[19:40] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/6f76902ad6

[19:40] <Geth> Â¦ roast: 0db9b58f51 | MasterDuke17++ (committed using GitHub Web editor) | S32-num/expmod.t

[19:40] <Geth> Â¦ roast: Merge pull request #770 from MasterDuke17/turn_skip_in_expmod_test_into_todo

[19:40] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/0db9b58f51

[19:42] <Geth> Â¦ rakudo/change-auth-core-modules: 30e0b05268 | (Elizabeth Mattijsen)++ | tools/build/install-core-dist.raku

[19:42] <Geth> Â¦ rakudo/change-auth-core-modules: Make "raku" the authority of core modules

[19:42] <Geth> Â¦ rakudo/change-auth-core-modules: 

[19:42] <Geth> Â¦ rakudo/change-auth-core-modules: Seems to me that "perl" is a bit...  outdated.  And changing it to

[19:42] <Geth> Â¦ rakudo/change-auth-core-modules: "raku" doesn't break any tests.

[19:42] <Geth> Â¦ rakudo/change-auth-core-modules: review: https://github.com/rakudo/rakudo/commit/30e0b05268

[19:43] <Geth> Â¦ rakudo: lizmat++ created pull request #4613: Make "raku" the authority of core modules

[19:43] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4613

[19:50] <Geth> Â¦ rakudo: 1fec0ef26e | (Vadim Belman)++ | 5 files

[19:50] <Geth> Â¦ rakudo: Clarify let and temp operators

[19:50] <Geth> Â¦ rakudo: 

[19:50] <Geth> Â¦ rakudo: Make sure they preserve and restore holes in arrays (though preserving

[19:50] <Geth> Â¦ rakudo: currently depends on `clone` method implementation) and conterization of

[19:50] <Geth> Â¦ rakudo: elements.

[19:50] <Geth> Â¦ rakudo: 

[19:50] <Geth> Â¦ rakudo: The new implementation shifts the locus of control to `Array` and `Hash`

[19:50] <Geth> Â¦ rakudo: <â¦commit message has 15 more linesâ¦>

[19:50] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1fec0ef26e

[19:50] <Geth> Â¦ rakudo: 8986875eac | (Vadim Belman)++ (committed using GitHub Web editor) | 5 files

[19:50] <Geth> Â¦ rakudo: Merge pull request #4602 from vrurg/rakudo_1433

[19:50] <Geth> Â¦ rakudo: 

[19:50] <Geth> Â¦ rakudo: Clarify let and temp operators

[19:50] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8986875eac

[20:03] *** reportable6 joined
[20:12] *** sena_kun left
[20:16] *** sena_kun joined
[21:17] <Geth> Â¦ rakudo: d88d1cc0e4 | (Elizabeth Mattijsen)++ | src/core.c/Process.pm6

[21:17] <Geth> Â¦ rakudo: Introducing RAKUDO_PRECOMPILATION_PROGRESS

[21:17] <Geth> Â¦ rakudo: 

[21:17] <Geth> Â¦ rakudo: If set to 1, will show modules being precompiled on STDERR, like:

[21:17] <Geth> Â¦ rakudo: 

[21:17] <Geth> Â¦ rakudo: Precompiling Ecosystem::Archive

[21:17] <Geth> Â¦ rakudo:  Precompiling Cro::HTTP::Client

[21:17] <Geth> Â¦ rakudo:   Precompiling Base64

[21:17] <Geth> Â¦ rakudo: <â¦commit message has 6 more linesâ¦>

[21:17] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d88d1cc0e4

[21:47] *** linkable6 left
[21:47] *** evalable6 left
[22:18] <lizmat> ok, this ^^ feature allowed me to spot a module being re-compiled when I think it shouldn't

[22:19] <lizmat> it appears that a "use Foo" and "use Foo:ver<0.0.42>" are treated as different identities, even if only Foo 0.0.42 is installed

[22:21] <lizmat> so it feels to me that the version of the module *found* is *not* taken into account on the decision whether or not to re-compile

[22:23] <lizmat> note that these uses are in different compunits

[22:23] <lizmat> but they refer to the same actual module

[22:26] <MasterDuke> that does seem like the re-compilation might not be necessary. but how common of an occurrence is that?

[22:34] <japhb> MasterDuke: I actually think that might be rather common, especially as more people use versioned/authed 'use' ... because when you get deep in the dependency stack, there will be a lot of modules required by LOTS of stuff.

[22:35] *** sena_kun left
[22:35] <lizmat> yes, and e.g Cro is not using versioned uses internally, e.g.

[22:35] <lizmat> but that should be fine

[22:35] <japhb> And some module authors have been versioned-requiring all of the modules within the dist

[22:36] <lizmat> the problem is really that rakudo is not doing the right thing, IMO

[22:36] <lizmat> going to sleep over that &

[22:36] <japhb> So for those modules, you'll have the versioned 'use' internally, and then all the outside users who *don't* do that will recompile

[22:36] <japhb> lizmat: Right, and sleep well

[22:38] <ugexe> because Foo:ver<*> is not the same as Foo:ver<0.0.42>

[22:38] *** sena_kun joined
[22:41] <MasterDuke> sure. but if you ask for * and get 0.0.42, and you've already precompiled 0.0.42, do you have to recompile?

[22:42] <ugexe> for CURFS yeah, because you cant encode e.g. version ranges into a file path

[22:42] <tonyo> that ambiguity in loading is something that users should be advised to avoid

[22:42] <tonyo> `use Foo:ver<1>` should be the common case and an open `use Foo` 

[22:45] <ugexe> for CURI i wouldnt expect it to recompile though

[22:50] *** linkable6 joined
[22:50] *** evalable6 joined
[22:51] <ugexe> for CURFS you either accept those will re-precompile or that they don't consider specific versions

[22:52] <ugexe> right now they will consider specific versions, e.g. `use Foo:ver<3>` will fail if Foo isnt ver 3

[22:52] <ugexe> this is yet another reason we have CURI

[22:53] <ugexe> if there is a way around this i havent been able to think of it over the past many years

[22:54] *** sena_kun left
[23:03] <ugexe> pretty sure it would be the same deal with CURAP and things like ./foo/bar and ./foo/bar/../bar

[23:33] <lizmat> ugexe: it's *with* CURI that it recompiles

[23:33] <ugexe> yeah that is unexpected

[23:35] <lizmat> I'll try to figure out more tomorrow, unless someone beats me to it :-)

[23:36] *** sena_kun joined
[23:37] <ugexe> RAKUDO_MODULE_DEBUG=1 raku -e 'use Zef:ver<0.13.0>; use Zef;'

[23:37] <ugexe> when i do that i see no precompilation occuring

[23:37] <lizmat> that's because it checks the compunit to see if it is already there ?

[23:37] <lizmat> and doesn't bother to load again?

[23:40] <ugexe> i dont see the difference between your example and mine

[23:42] <ugexe> if my example isnt the same then i dont quite understand

[23:48] <MasterDuke> what if you put each use in its own { }?

[23:50] <japhb> ugexe: Yeah, I *think* lizmat is saying that if different compunits have the different 'use' formats (with and without `:ver`), you'll get the problem.  Your test is just one compunit.

[23:53] *** sena_kun left
[23:54] <lizmat> also: look at the sample output I made: https://gist.github.com/lizmat/acbe0cdfc42a9123511fce4a99d1b11d

[23:54] <lizmat> it lists Cro::HTTP::Client twice

[23:54] <lizmat> for example

[23:54] <lizmat> ugexe: way to reproduce:

[23:55] <lizmat> zef install Ecosystem::Archive

[23:55] <lizmat> make a change in rakudo and make install it again

[23:56] <lizmat> then run 'RAKUDO_PRECOMPILATION_PROGRESS=1 raku -e 'use Ecosystem::Archive'

[23:57] *** squashable6 left
[23:58] <ugexe> ah i can't say what I expect to happen when you rebuild rakudo

[23:58] <lizmat> why else would it recompile ?

[23:58] <ugexe> bugs?

[23:58] *** squashable6 joined
[23:59] <lizmat> there's that :-)

