[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[01:12] *** Util left
[02:03] *** Kaiepi left
[02:03] *** Kaiepi joined
[03:29] *** shareable6 left
[03:29] *** bisectable6 left
[03:29] *** statisfiable6 left
[03:29] *** linkable6 left
[03:29] *** reportable6 left
[03:29] *** quotable6 left
[03:29] *** greppable6 left
[03:29] *** notable6 left
[03:29] *** squashable6 left
[03:29] *** evalable6 left
[03:29] *** releasable6 left
[03:29] *** unicodable6 left
[03:29] *** committable6 left
[03:29] *** bloatable6 left
[03:29] *** nativecallable6 left
[03:29] *** benchable6 left
[03:29] *** sourceable6 left
[03:29] *** coverable6 left
[03:29] *** tellable6 left
[03:29] *** greppable6 joined
[03:30] *** benchable6 joined
[03:30] *** tellable6 joined
[03:30] *** committable6 joined
[03:30] *** squashable6 joined
[03:30] *** reportable6 joined
[03:30] *** bloatable6 joined
[03:31] *** sourceable6 joined
[03:31] *** linkable6 joined
[03:31] *** notable6 joined
[03:32] *** nativecallable6 joined
[03:32] *** statisfiable6 joined
[03:32] *** bisectable6 joined
[03:32] *** evalable6 joined
[03:32] *** quotable6 joined
[03:32] *** unicodable6 joined
[03:32] *** coverable6 joined
[03:32] *** releasable6 joined
[03:32] *** shareable6 joined
[04:32] *** reportable6 left
[04:32] *** bloatable6 left
[04:32] *** nativecallable6 left
[04:32] *** notable6 left
[04:32] *** benchable6 left
[04:32] *** coverable6 left
[04:32] *** bisectable6 left
[04:32] *** releasable6 left
[04:32] *** evalable6 left
[04:32] *** greppable6 left
[04:32] *** statisfiable6 left
[04:32] *** sourceable6 left
[04:32] *** shareable6 left
[04:32] *** linkable6 left
[04:32] *** committable6 left
[04:32] *** quotable6 left
[04:32] *** squashable6 left
[04:32] *** unicodable6 left
[04:32] *** tellable6 left
[04:33] *** evalable6 joined
[04:33] *** quotable6 joined
[04:33] *** squashable6 joined
[04:33] *** bloatable6 joined
[04:33] *** coverable6 joined
[04:33] *** shareable6 joined
[04:33] *** benchable6 joined
[04:34] *** greppable6 joined
[04:34] *** statisfiable6 joined
[04:34] *** releasable6 joined
[04:34] *** unicodable6 joined
[04:34] *** linkable6 joined
[04:34] *** reportable6 joined
[04:34] *** sourceable6 joined
[04:35] *** notable6 joined
[04:35] *** tellable6 joined
[04:35] *** committable6 joined
[05:35] *** quotable6 left
[05:35] *** bloatable6 left
[05:35] *** shareable6 left
[05:35] *** evalable6 left
[05:35] *** statisfiable6 left
[05:35] *** sourceable6 left
[05:35] *** linkable6 left
[05:35] *** releasable6 left
[05:35] *** reportable6 left
[05:35] *** notable6 left
[05:35] *** greppable6 left
[05:35] *** squashable6 left
[05:35] *** committable6 left
[05:35] *** unicodable6 left
[05:35] *** tellable6 left
[05:35] *** coverable6 left
[05:35] *** benchable6 left
[05:36] *** nativecallable6 joined
[05:36] *** releasable6 joined
[05:36] *** benchable6 joined
[05:36] *** evalable6 joined
[05:37] *** bloatable6 joined
[05:37] *** squashable6 joined
[05:37] *** greppable6 joined
[05:37] *** coverable6 joined
[05:37] *** unicodable6 joined
[05:38] *** linkable6 joined
[05:38] *** reportable6 joined
[05:38] *** quotable6 joined
[05:38] *** statisfiable6 joined
[05:38] *** sourceable6 joined
[05:38] *** shareable6 joined
[05:38] *** committable6 joined
[05:39] *** notable6 joined
[05:39] *** tellable6 joined
[06:03] *** reportable6 left
[06:04] *** reportable6 joined
[06:51] *** frost joined
[07:08] *** dogbert17 joined
[07:11] *** dogbert12 left
[07:19] <nine> MVM_sc_find_object_idx scales O(n) with the size of the serialization context

[08:17] *** squashable6 left
[08:17] *** bisectable6 joined
[08:18] *** squashable6 joined
[08:59] *** patrickb joined
[11:07] <Geth> Â¦ rakudo/speed_up_native_call_setup: 3b7fef2e7d | (Stefan Seifert)++ | 2 files

[11:07] <Geth> Â¦ rakudo/speed_up_native_call_setup: Speed up setup of NativeCall subs and reduce memory usage

[11:07] <Geth> Â¦ rakudo/speed_up_native_call_setup: 

[11:07] <Geth> Â¦ rakudo/speed_up_native_call_setup: When replacing a native sub's stub body with a generated one, we need to remove

[11:07] <Geth> Â¦ rakudo/speed_up_native_call_setup: the scheduled fixups, lest they undo our replacement. The easiest way to do

[11:07] <Geth> Â¦ rakudo/speed_up_native_call_setup: this is to just run the compiler thunk, which takes care of this after dynamic

[11:07] <Geth> Â¦ rakudo/speed_up_native_call_setup: compilation. This however is a very expensive operation as it not only compiles

[11:07] <Geth> Â¦ rakudo/speed_up_native_call_setup: that body but has to create setup code for the lexical scope. This makes

[11:07] <Geth> Â¦ rakudo/speed_up_native_call_setup: <â€¦commit message has 6 more linesâ€¦>

[11:07] <Geth> Â¦ rakudo/speed_up_native_call_setup: review: https://github.com/rakudo/rakudo/commit/3b7fef2e7d

[11:09] <lizmat> nine++

[11:50] *** Kaiepi left
[11:51] *** frost left
[12:02] *** Kaiepi joined
[12:02] *** reportable6 left
[12:09] <dogbert17> nine++

[12:16] <dogbert17> that's quite the improvement

[13:13] *** reportable6 joined
[14:11] *** Guest92 joined
[14:13] *** Guest92 left
[14:13] *** Guest79 joined
[16:01] *** Util joined
[16:24] *** Guest79 left
[17:33] *** linkable6 left
[17:36] *** linkable6 joined
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[19:05] *** patrickb left
[19:28] *** patrickb joined
[20:27] *** gfldex left
[20:32] *** gfldex joined
[20:44] *** patrickb left
[22:04] <Geth> Â¦ nqp: MasterDuke17++ created pull request #725: Simplify loop in optimizer's incorporate_inner

[22:04] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/pull/725

[22:04] <Geth> Â¦ nqp: MasterDuke17++ created pull request #726: Micro-optimize the sift_down sub in sorted_keys

[22:04] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/pull/726

