[01:54] *** kvw_5_ joined
[01:58] *** kvw_5 left
[02:11] *** frost-lab joined
[02:32] *** softmoth left
[02:52] *** Xliff left
[04:38] <japhb> Copy pasta that bitrotted: *JS* backend says "Cannot force GC on JVM backend yet" for force_gc op, while it actually seems to be implemented on JVM.  :-)

[06:38] *** domidumont joined
[06:41] *** frost-lab left
[08:12] *** sena_kun left
[08:13] *** sena_kun joined
[08:18] *** domidumont left
[08:20] *** Xliff joined
[08:23] <sena_kun> releasable6, status

[08:23] <releasable6> sena_kun, Next release in ≈22 days and ≈10 hours. 2 blockers. 0 out of 10 commits logged

[08:23] <releasable6> sena_kun, Details: https://gist.github.com/7a354e9a477ee6ba57534a4b2b6ac4cf

[08:25] <sena_kun> releasable6, status

[08:25] <releasable6> sena_kun, Next release in ≈22 days and ≈10 hours. There are no known blockers. 0 out of 10 commits logged

[08:25] <releasable6> sena_kun, Details: https://gist.github.com/2f7d807ea05814f04b67affe903ecffc

[08:44] *** frost-lab joined
[08:48] <Xliff> sena_kun++ # Latest release

[08:48] <Xliff> In case I haven't mentioned it, yet. Thank you, for all you do.

[08:48] <Xliff> sena_kun: Who would I need to talk to for CURI related issues?

[08:49] <Xliff> CURI = CompUnit::Repository::Installer

[08:49] <MasterDuke> Xliff: ugexe or nine

[08:49] <Xliff> MasterDuke: OK. Yes, it's related to "that" problem.

[08:49] <Xliff> I still haven't heard from anyone about how to best approach adding more user feedback to the current way Rakudo installs modules.

[08:50] <Xliff> I would like to put some time into that.

[08:51] <Xliff> CURI = CompUnit::Repository::Installation, actually

[08:52] <MasterDuke> hack some minimal change in, PR that, hopefully get relevant comments? people might need to see some actual code changes to understand what you're thinking

[08:52] <Xliff> Yeah. Unfortunately, I need to understand what they were thinking, first.

[08:52] <Xliff> A high level tour of CURI would be niec.

[08:56] <Xliff> Take this section for example: https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/Repository/Installation.pm6#L207

[08:56] <Xliff> Could we replace that with a single for loop and two when blocks?

[08:59] <Xliff> Also, is there some way to precompile the modules, FIRST into some staging directory and then install from therE?

[09:00] <Xliff> Is there a writeup about how Raku goes about installing its modules?

[09:02] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/tools/build/install-core-dist.raku perhaps

[09:03] *** sena_kun left
[09:04] <Xliff> Yeah, that sounds like what I am looking for. But that code installs it. Is there a writeup on its use?

[09:05] <MasterDuke> dunno

[09:05] <Xliff> And where are those sources?

[09:05] *** sena_kun joined
[09:05] <Xliff> MasterDuke: Alas. Those are the answers I always get when I ask these questions, and they do me no good when I have doesn't of projects I'd like to release.

[09:06] <Xliff> I am not faulting you. I am just trying to determine next steps!

[09:09] <MasterDuke> no worries. fwiw, i've never touched any of those parts of the code, so i'm just as much in the dark

[09:31] *** frost-lab left
[10:26] <nine> Xliff: yes, you could probably use a single loop and to whens. Don't know how that's related to a high level view though. Looks like a minor code structure change to me

[10:26] <nine> Xliff: precompile first and then install from there? That's what CompUnit::Repository::Staging is all about.

[10:27] <nine> Xliff: the architecture documentation is at https://github.com/rakudo/rakudo/blob/master/docs/module_management.md

[10:32] <Xliff> nine: The loop change was minor suggestion. It's what I do when looking at new code.

[10:32] <Xliff> Thanks for the link!

[10:33] <nine> The system has evolved somewhat since that document was written, but it's still an excellent starting point for understanding the different parts

[10:34] <Xliff> Yes. Good information in here. Any writeups on ::Staging?

[10:35] <Xliff> Or an example that uses it...

[10:36] <Geth> ¦ rakudo/rakuast: c796cd3c22 | (Jonathan Worthington)++ | 2 files

[10:36] <Geth> ¦ rakudo/rakuast: Parse `my sub ...`

[10:36] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/c796cd3c22

[10:44] <Xliff> jnthn++ # RakuAST work 

[10:47] <Xliff> jnthn: Have any conservative idea on when to expect RakuAST on master?

[10:47] <tellable6> Xliff, I'll pass your message to jnthn

[11:00] <nine> Xliff: https://github.com/rakudo/rakudo/blob/master/tools/install-dist.p6

[11:02] <nine> And https://build.opensuse.org/package/view_file/devel:languages:perl6/Perl6-JSON-Class/perl6-JSON-Class.spec?expand=1

[11:03] <Xliff> Ah! Shows how the --to directive is to be used. nine++

[11:04] <Xliff> Although one wonders if libdir might be better?

[11:04] <Xliff> moar::libdir=/home/cbwood/Projects/rakudobrew/versions/moar-blead/install/lib

[11:04] <Xliff> from "raku -V"

[11:07] <Xliff> nine: Would there be a simple way to pull the vendor directory from the repo chain?

[11:07] <Xliff> "raku -V" has "repo::Chain=..."

[11:08] <Xliff> Although one would hope I could pass 'vendor' somewhere and get something like: /home/cbwood/Projects/rakudobrew/versions/moar-blead/install/share/perl6/vendor

[11:08] <Xliff> I could loop through that and check for .ends-with('vendor'), but even that seems a bit unclean. :/

[11:14] *** titsuki joined
[11:16] <nine> look in CompUnit::RepositoryRegistry

[11:19] <Xliff> Thanks.

[11:19] <Xliff> Will have to download this chatlog as notes, LOL!

[11:21] <Xliff> nine: So if I can build out a module with this script: https://github.com/Xliff/p6-GtkPlus/blob/master/scripts/dependency-build.pl6

[11:21] <Xliff> Will ::Staging pick up what's been built and use that?

[11:22] <Xliff> dependency-build.pl6 tl;dr - It makes use of parallel rakudo compilations via '-e "use <MODULE>"' 

[11:32] <nine> Sorry, I don't understand your question

[11:33] <Geth> ¦ rakudo/rakuast: 0553127bd2 | (Jonathan Worthington)++ | 6 files

[11:33] <Geth> ¦ rakudo/rakuast: RakuAST node for term (sigilless) var declarations

[11:33] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/0553127bd2

[11:35] <Xliff> nine: Nevermind. I will rephrase it when I get a chance to really look at the information you've already shared. 

[11:35] <Xliff> Thanks for the infodump!

[12:25] <timotimo> hm. how best to make switching between a tracy-enabled moarvm and a not-tracy-enabled moarvm available

[12:34] *** MasterDuke left
[12:39] *** MasterDuke joined
[13:11] *** MasterDuke left
[13:11] <lizmat> ok, so I want to watch a directory for any additions to that directory

[13:11] <lizmat> but at the same time, I want to watch a sub-directory of that directory for changes

[13:12] <lizmat> now as, soon as the upper directory sees a new sub-directory, I want to switch watching *that* subdirectory

[13:12] <lizmat> feels to me that this needs some type of nested react whenevers

[13:13] *** MasterDuke joined
[13:13] <lizmat> but I seem  to not be able to wrap my head around it :-)

[13:13] <nwc10> time for a bike ride?

[13:13] <lizmat> it actually is, yet the weather is not very appealing

[13:14] <nwc10> it is nice here right now, but the forecast is rain by this evening. Various forecasts are unsure when "this evening" starts

[13:14] <lizmat> 8 degrees with a wind chill of 4

[13:14] <nwc10> erk

[13:14] <nwc10> something like 17 here with no wind

[13:14] <lizmat> compared to the 21 we had yesterday

[13:14] <lizmat> yeah, very much like we had yesterday  :-)

[13:14] <nwc10> Seems like you're a day ahead of us :-)

[13:15] <nwc10> (and you typed faster)

[13:15] <ugexe> https://github.com/perlpilot/p6-IO-Notification-Recursive

[13:17] <lizmat> ugexe++  perlpilot++   

[13:18] <lizmat> https://github.com/raku-community-modules/IO-Notification-Recursive  nowadays, but yes

[13:19] <lizmat> a little overkill for what I wants 

[13:28] <lizmat> setled on:

[13:29] <lizmat> loop { react { whenever $upper.watch { $sub = newsub; done }; whenever $upper.add($sub).watch { do stuff } }

[13:36] <nine> nwc10: lizmat doesn't type faster, she obviously lives in the future!

[13:37] <lizmat> I wish...

[13:37] *** frost-lab joined
[13:39] *** frost-lab left
[13:54] *** moritz_ joined
[13:54] *** moritz left
[14:09] <sena_kun> greppable6, use lib

[14:09] <sena_kun> greppable6, help

[14:09] <greppable6> sena_kun, Like this: greppable6: password # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Greppable

[14:09] <greppable6> sena_kun, 2770 lines, 535 modules: https://gist.github.com/237b4c8c116b2b002331a774244df458

[14:14] *** MasterDuke left
[14:14] *** MasterDuke joined
[14:20] *** sena_kun left
[14:22] *** sena_kun joined
[15:14] <ugexe> remember folks if you're using `use lib ...` you're probably doing it wrong

[15:17] <sena_kun> Oh, I remember there was a solution with $*FILE.parent.absolute, but don't remember what I was writting with it anymore. :S

[15:18] <Geth> ¦ roast: tbrowder++ created pull request #733: Add Gregorian test data including negative dates

[15:18] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/733

[15:18] <ugexe> there are cases when `use lib ...` is fine (like the roast) but its almost always wrong for any part of a module/distribution

[15:19] <ugexe> putting `use lib "lib";` in a test for example is asserting that you must have everything laid out as the author intended even though the author doesn't get to dictate that

[15:19] <sena_kun> ugexe, how do I use test-only packages then?

[15:19] <ugexe> `use lib "lib"` this is bad

[15:19] <ugexe> `use lib "t/lib";` this is fine

[15:19] <ugexe> for a test

[15:19] <sena_kun> phew

[15:19] * sena_kun did `use lib 't/lib';`

[15:20] <ugexe> yeah the important thing is the tests should have no idea about the structure of the library code they are likely testing. that should be supplied via `-I whatever`

[15:20] <ugexe> for libraries that are specifically for the test (and not part of the distribution) they can assume the structure

[15:21] <Xliff> lizmat: In your example (reused here https://replit.com/@Xliff/InfamousPleasantOolanguage#main.raku for clarity)

[15:21] <tellable6> 2021-04-29T13:35:44Z #moarvm <jnthn> Xliff Can't see it happening before Q4 this year; even when most features are there, we'll want all the opts to be too, plus there'll be lots of little details to do (and bug compat with the current compiler frontend)

[15:21] <Xliff> Aren't both whenever blocks started at the same time?

[15:22] <Xliff> jnth++ # Thanks for the estimate!

[15:22] <Geth> ¦ rakudo/rakuast: eae14b1a39 | (Jonathan Worthington)++ | 4 files

[15:22] <Geth> ¦ rakudo/rakuast: RakuAST handling of loop labels

[15:22] <Geth> ¦ rakudo/rakuast: 

[15:22] <Geth> ¦ rakudo/rakuast: * A RakuAST::Label node

[15:22] <Geth> ¦ rakudo/rakuast: * Statements hold a list of labels

[15:22] <Geth> ¦ rakudo/rakuast: * Make loop compilation care about them

[15:22] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/eae14b1a39

[16:05] *** MasterDuke left
[16:21] *** domidumont joined
[16:33] *** domidumont left
[16:59] <Xliff> m: my @a; say +a;

[16:59] <camelia> rakudo-moar bb069a99c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[16:59] <Xliff> m: my @a; say +@a;

[16:59] <camelia> rakudo-moar bb069a99c: OUTPUT: «0␤»

[18:11] *** sourceable6 left
[18:11] *** notable6 left
[18:11] *** benchable6 left
[18:11] *** unicodable6 left
[18:11] *** releasable6 left
[18:11] *** committable6 left
[18:11] *** tellable6 left
[18:11] *** squashable6 left
[18:11] *** coverable6 left
[18:11] *** shareable6 left
[18:11] *** statisfiable6 left
[18:11] *** quotable6 left
[18:11] *** bisectable6 left
[18:11] *** greppable6 left
[18:11] *** bloatable6 left
[18:11] *** unicodable6 joined
[18:11] *** coverable6 joined
[18:11] *** statisfiable6 joined
[18:12] *** greppable6 joined
[18:13] *** releasable6 joined
[18:13] *** benchable6 joined
[18:30] *** dogbert17 left
[18:31] *** dogbert17 joined
[18:32] *** dogbert11 joined
[18:34] *** vrurg left
[18:35] *** dogbert12 joined
[18:35] *** vrurg joined
[18:36] *** dogbert17 left
[18:38] *** dogbert11 left
[19:00] *** titsuki left
[19:08] *** MasterDuke joined
[19:30] *** dogbert17 joined
[19:32] *** dogbert12 left
[19:59] *** MasterDuke left
[20:05] *** MasterDuke joined
[21:25] *** LizBot left
[21:27] *** lizmat left
[21:27] *** [Tux] left
[21:35] *** lizmat joined
[21:45] *** nwc10 left
[21:46] *** nwc10 joined
[21:55] *** LizBot joined
[21:55] <lizmat> seems our provider lost most of their network about 40 mins ago  :-(

[22:01] <japhb> lizmat, you might remember this from your native array work: What would be the fastest way to get a Blob or Buf containing the raw data in an intarray or numarray?  Is it necessary to copy, or can it be done without the copy?  What about going in the opposite direction?

[22:01] <lizmat> Blobs/Bufs are native intarrays under the hood

[22:02] <lizmat> so you could just use nqp::ops on them

[22:02] <lizmat> now, getting them to be recognized at HLL level as one or the other, I haven't been able to figure that one out

[22:03] <lizmat> m: lob.new(1,2,3); use nqp; dd nqp::atpos_i($b,0)

[22:03] <camelia> rakudo-moar bb069a99c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$b' is not declared␤at <tmp>:1␤------> 3ob.new(1,2,3); use nqp; dd nqp::atpos_i(7⏏5$b,0)␤»

[22:03] <lizmat> m: Blob.new(1,2,3); use nqp; dd nqp::atpos_i($b,0)

[22:03] <camelia> rakudo-moar bb069a99c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$b' is not declared␤at <tmp>:1␤------> 3ob.new(1,2,3); use nqp; dd nqp::atpos_i(7⏏5$b,0)␤»

[22:03] <lizmat> m: my $b := Blob.new(1,2,3); use nqp; dd nqp::atpos_i($b,0)

[22:03] <camelia> rakudo-moar bb069a99c: OUTPUT: «1␤»

[22:04] *** b2gills left
[22:04] <japhb> Right, they're all VMArrays, yes?  Seems like it ought to be possible to just create a new "header" with the same raw data pointer.

[22:04] <lizmat> you would think  :-)

[22:04] <japhb> Hmmm, can you nqp::splice between different typed arrays?

[22:05] <lizmat> don't think so

[22:05] <japhb> Gah, dang it.

[22:05] <lizmat> try it, I'd say  :-)

[22:05] <japhb> Heh

[22:06] <japhb> Every time I think "What's the worst that could happen?" I have a vision of suddenly being in a hellish post-apocalyptic wasteland going "Ummm ... what?"

[22:07] <lizmat> .oO( cats and dogs, living together! )

[22:10] <japhb> > use nqp; nqp::splice($buf, @na, 0, 0)

[22:10] <japhb> MVMArray: atpos expected num register

[22:11] <japhb> Harrumph.

[22:15] <japhb> You cannot create an instance of this type (Buf[uint8])  # Says you!  Don't tell me what I can and cannot do!  

[22:27] <japhb> Grrrr:  `nqp::istype(nqp::hllize($got),Int) ?? ... !! self!fail-typecheck-element(action,$i,$got).throw))`

[22:29] * japhb is about to go full Charleton Heston / Planet of the Apes overacting

[22:29] *** LizBot left
[22:29] *** lizmat left
[22:29] *** lizmat joined
[22:30] * japhb idly wonders if Charleton Heston or ST:TOS-era William Shatner was the hammier overactor ....

[22:31] *** LizBot joined
[22:34] <lizmat> Shatner, no doubt

[22:52] *** Kaiepi left
[23:46] *** LizBot left
[23:46] *** lizmat left
