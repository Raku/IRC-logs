[01:09] *** kvw_5_ joined
[01:12] *** kvw_5 left
[01:51] *** frost-lab joined
[02:16] *** lucasb left
[07:08] *** sena_kun joined
[09:50] *** ZzZombo joined
[10:07] *** LizBot left
[10:08] *** ZzZombo left
[11:28] *** Xliff joined
[11:28] <Xliff> \o

[11:28] <nwc10> o/

[11:40] <lizmat> afk for a few hours&

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: dcfb06b3b7 | (Nicholas Clark)++ | tools/generate-sprintf-pow10-table.raku

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: A tool to generate a lookup table to accurately calculate pow_n(10.0, $exp).

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: 

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: We need this for floating point formatting in sprintf, and nqp::pow_n is

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: not always accurate.

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: review: https://github.com/Raku/nqp/commit/dcfb06b3b7

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: 61c8759b1c | (Nicholas Clark)++ | src/HLL/sprintf.nqp

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: Accurately calculate pow_n(10.0, $exp) for stringify-to-precision2.

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: 

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: nqp::pow_n() is not always accurate; nor is looping and multiplying by

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: 10 or any predictable pattern of powers of 10.

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: review: https://github.com/Raku/nqp/commit/61c8759b1c

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: 444a683339 | (Nicholas Clark)++ | src/HLL/sprintf.nqp

[11:57] <Geth> Â¦ nqp/sprintf-pow10-lookup: Convert `scientific` and `shortest` to use `pow10` and an `int` for `$exp`.

[11:58] <Geth> Â¦ nqp/sprintf-pow10-lookup: 

[11:58] <Geth> Â¦ nqp/sprintf-pow10-lookup: Previously both had typed `$exp` as `num`, even though it only holds

[11:58] <Geth> Â¦ nqp/sprintf-pow10-lookup: integers.

[11:58] <Geth> Â¦ nqp/sprintf-pow10-lookup: review: https://github.com/Raku/nqp/commit/444a683339

[12:03] <Geth> Â¦ nqp: nwc10++ created pull request #716: Accurately calculate pow_n(10.0, $exp) for floating point sprintf formatting

[12:03] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/pull/716

[13:12] <Kaiepi> o/

[13:13] <Kaiepi> i have some legal concerns about the work i've been doing on network addresses and dns resolvers

[13:15] <Kaiepi> i use modified snippets of openbsd source code in a few spots. i know there are comments i need to worry about in doing so, but is this permissible, and if so, is there anything else i need to worry about?

[13:18] <sena_kun> Kaiepi, you might ping codesections in #raku

[13:18] <MasterDuke> my advice would be to purchase a new name and identity, move to someplace like Macau, and preemptively put out a hit on Theo de Raadt. but IANAL...

[14:00] * nine makes a mental note not to ask MasterDuke for legal advice...         because he ain't a lawyer

[14:02] *** frost-lab left
[14:10] <Kaiepi> sena_kun, might want to ping?

[14:11] <sena_kun> Kaiepi, yeah, sorry, "might want".

[14:12] <Kaiepi> ok, thanks

[14:15] *** Kaiepi left
[14:15] *** Kaiepi joined
[14:18] *** b2gills left
[14:18] *** b2gills joined
[14:31] <MasterDuke> patrickbkr[m]: what's the reason for running prove with `-j0` in the nqp test stage? the rakudo test doesn't specify any `-j` option

[14:33] <MasterDuke> any reason not to use -j2 for `make` and `prove`?

[14:38] *** Kaiepi left
[14:38] *** Kaiepi joined
[14:43] *** Kaiepi left
[14:44] *** Kaiepi joined
[15:24] <MasterDuke> anybody here on windows ever see this when running rakudo's tests? https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=454&view=logs&j=5b519533-8a6a-5ec0-9930-bcff75bff664&t=6c4f881f-c031-5fa2-35de-9b22b606ed7e&l=1900

[15:33] <MasterDuke> the error is: Failed to rename 'D:\a\1\rakudo\t\04-nativecall\.precomp\3350F24AD6CA381ED1FFF13D57FAE45D527E2FB4\64\640AB2BAE07BEDC4C163F679A746F7AB7FB5D1FA.repo-id.tmp' to 'D:\a\1\rakudo\t\04-nativecall\.precomp\3350F24AD6CA381ED1FFF13D57FAE45D527E2FB4\64\640AB2BAE07BEDC4C163F679A746F7AB7FB5D1FA.repo-id': Failed to rename file: operation not

[15:33] <MasterDuke> permitted

[15:33] <MasterDuke> at D:\a\1\rakudo/t/04-nativecall/02-simple-args.t:6

[15:33] <MasterDuke> Actually thrown at:

[15:33] <MasterDuke> Â  in any statement_control at D:\a\1\install-moved\bin\..\share\perl6\lib/Perl6/Grammar.moarvm line 1

[15:37] <MasterDuke> this is after i added `-j2` to the prove command

[15:38] <ugexe> then its probably because one process is holding a file open while another is e.g. trying to close it

[15:38] <ugexe> er, or renaming a file that another process has a handle open on

[15:39] *** softmoth_ joined
[15:39] <MasterDuke> yeah, is `-jn` just not safe on windows?

[15:41] <patrickbkr[m]> MasterDuke: I have only ever used -j for the MoarVM build on Windows.

[15:42] <patrickbkr[m]> -j0 was probably faithfully copied from some older CI system I looked at when creating the Azure config...

[15:42] <MasterDuke> so you haven't tried it with prove?

[15:43] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1475/commits/7c3976207813b414550597fac1b3032269785e60 looks like it took 10m off the total runtime, so i'd like to keep as much of it as possible

[15:43] <ugexe> well technically it seems that multi process on windows where each process uses some of the same modules isn't safe

[15:44] <MasterDuke> huh, how has that not cropped up before?

[15:45] <ugexe> it pops up fairly often. nine has fixed it a couple of times, but apparently some gremlins still lurk

[15:45] <ugexe> windows file system time granularity and how lock file work on windows are the two things (i think) that make the whole thing work poorly on windows

[15:46] <ugexe> well, not poorly. less than perfectly

[15:50] <raydiak> windows antivirus can cause this according to https://github.com/valery-barysok/session-file-store/issues/69#issuecomment-671281388. try disabling it? the comment at the end of that same discussion suggests a permanent fix, if that's the issue

[15:50] <MasterDuke> hm, leave the PR as is in the hope it forces someone (probably nine or you) to fix? or remove the `-j2` from prove on windows (even though that's where the biggest speedup was)?

[15:51] <MasterDuke> raydiak: ooh, interesting...

[15:52] <ugexe> personally (and im probably in the minority) i like to run my CI tests with just one job so its as reproducable as possible

[15:52] <ugexe> well the way windows antivirus would cause the issue is the same way two raku processes trying to precompile would cause it

[15:52] <ugexe> windows antivirus is just another thing that might have the handle open

[15:54] <MasterDuke> heh, i guess both would be good. reproducibility with the single job pipeline, more chaos with the multiple job pipeline

[15:57] <[Tux]> Rakudo v2021.03-183-g600bb6b06 (v6.d) on MoarVM 2021.03-50-g948128995

[15:57] <[Tux]> csv-test-xs-20      0.382 -  0.400

[15:57] <[Tux]> csv-ip5xs           0.854 -  0.871

[15:57] <[Tux]> test-t --race       0.893 -  0.948

[15:57] <[Tux]> test-t              1.993 -  2.275

[15:57] <[Tux]> test                7.308 -  8.028

[15:57] <[Tux]> csv-ip5xs-20        8.208 -  8.905

[15:57] <[Tux]> test-t-20 --race   10.004 - 10.522

[15:57] <[Tux]> csv-parser         25.858 - 26.614

[15:57] <[Tux]> test-t-20          33.009 - 35.475

[16:00] <ugexe> yeah running a e.g. -j12 on the entire suite could be considered a (separate) test in its own right (basically a naive stress test)

[16:00] <MasterDuke> that's how i always run it locally

[17:58] <Geth> Â¦ rakudo: lizmat self-assigned SlippyIterator.is-deterministic() fails on fresh instance https://github.com/rakudo/rakudo/issues/4335

[17:59] *** sena_kun left
[18:00] *** sena_kun joined
[19:13] *** MasterDuke left
[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: 895c96d7fd | (Nicholas Clark)++ | tools/generate-sprintf-pow10-table.raku

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: A tool to generate a lookup table to accurately calculate pow_n(10.0, $exp).

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: 

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: We need this for floating point formatting in sprintf, and nqp::pow_n is

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: not always accurate.

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: review: https://github.com/Raku/nqp/commit/895c96d7fd

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: f12b7e7156 | (Nicholas Clark)++ | src/HLL/sprintf.nqp

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: Accurately calculate pow_n(10.0, $exp) for stringify-to-precision2.

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: 

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: nqp::pow_n() is not always accurate; nor is looping and multiplying by

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: 10 or any predictable pattern of powers of 10.

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: review: https://github.com/Raku/nqp/commit/f12b7e7156

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: 9a766ac827 | (Nicholas Clark)++ | src/HLL/sprintf.nqp

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: Convert `scientific` and `shortest` to use `pow10` and an `int` for `$exp`.

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: 

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: Previously both had typed `$exp` as `num`, even though it only holds

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: integers.

[19:25] <Geth> Â¦ nqp/sprintf-pow10-lookup: review: https://github.com/Raku/nqp/commit/9a766ac827

[19:27] *** softmoth_ left
[19:36] * [Coke] apparently needs to do more than skim those commits to understand them :)

[19:38] <nwc10> mine?

[19:40] <nwc10> apologise for using rude words, but:

[19:40] <nwc10>   perl -e 'printf "%s: %a\n", $_, $_ for map { 10 ** $_ } 0 .. 30'

[19:40] <nwc10> and there is no pattern in the bit patterns in the mantissas of the powers of 10s

[19:41] <nwc10> (and also ** is not trustworthy everywhere - that's the zeroeth problem)

[19:41] <nwc10> enough to mean that nqp::pow_n(10.0, $exp) isn't quite correct everywhere for all integer values of $exp

[19:41] <nwc10> and this messes up some sprintf formats

[19:42] <nwc10> I don't propose to add %a to the current sprintf implementation.

[19:42] <lizmat> %a would be ?

[19:42] <nwc10> but once lizmat's new one has landed, I'll try to remember to figure it out

[19:42] <nwc10> floating point in hex notation

[19:42] <lizmat> ah

[19:42] <nwc10> turns out that it's useful for debugging

[19:43] <nwc10> (And I guess also efficient round tripping to strings)

[19:43] <nwc10> no normal program needs it

[19:50] *** lucasb joined
[20:04] <Geth> Â¦ rakudo: 1c4577aed1 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/SlippyIterator.pm6

[20:04] <Geth> Â¦ rakudo: Fix SlippyIterator.is-deterministic

[20:04] <Geth> Â¦ rakudo: 

[20:04] <Geth> Â¦ rakudo: Make it always return False.  As the class consuming the role can have

[20:04] <Geth> Â¦ rakudo: multiple slippyiterators during its lifetime, as soon as one returns

[20:04] <Geth> Â¦ rakudo: False, the whole of the iterator should be considered non-deterministic.

[20:04] <Geth> Â¦ rakudo: 

[20:04] <Geth> Â¦ rakudo: But that would require a time-machine, which we don't have.  So do the

[20:04] <Geth> Â¦ rakudo: <â¦commit message has 5 more linesâ¦>

[20:05] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c4577aed1

[20:15] *** MasterDuke joined
[20:31] *** MasterDuke left
[20:32] *** MasterDuke joined
[20:42] <sjn> heya; I'm trying to remember, but wasn't there at some point an irc channel dedicated to documentation issues?

[20:48] <lizmat> before my time, maybe ?

[20:59] <sjn> Nah; I think I'm misremembering....

[21:05] *** Ven_de_Thiel joined
[21:29] *** softmoth_ joined
[21:34] *** softmoth_ left
[21:43] *** Ven_de_Thiel left
[21:52] <Geth> Â¦ rakudo: c64dc57337 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[21:52] <Geth> Â¦ rakudo: Revert infix:<~> subclassability

[21:52] <Geth> Â¦ rakudo: 

[21:52] <Geth> Â¦ rakudo: After discussion with jnthn, it felt too early to define ways in which

[21:52] <Geth> Â¦ rakudo: concatenation of one or more subclasses of Str should be handled.  So

[21:52] <Geth> Â¦ rakudo: for now, concatenating subclasses of Str will produce a Str, regardless

[21:52] <Geth> Â¦ rakudo: of any subclasses of Str involved.

[21:52] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c64dc57337

[21:54] *** dogbert11 joined
[21:58] *** dogbert17 left
[22:02] *** dogbert17 joined
[22:07] *** dogbert11 left
[22:34] *** dogbert11 joined
[22:37] *** dogbert17 left
