[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[01:05] *** benchable6 left
[01:05] *** nativecallable6 left
[01:05] *** linkable6 left
[01:05] *** sourceable6 left
[01:05] *** evalable6 left
[01:05] *** quotable6 left
[01:05] *** coverable6 left
[01:05] *** greppable6 left
[01:05] *** notable6 left
[01:05] *** unicodable6 left
[01:05] *** statisfiable6 left
[01:05] *** committable6 left
[01:05] *** bisectable6 left
[01:05] *** squashable6 left
[01:05] *** tellable6 left
[01:05] *** releasable6 left
[01:05] *** bloatable6 left
[01:05] *** shareable6 left
[01:05] *** statisfiable6 joined
[01:05] *** coverable6 joined
[01:05] *** bisectable6 joined
[01:06] *** notable6 joined
[01:06] *** linkable6 joined
[01:06] *** nativecallable6 joined
[01:06] *** evalable6 joined
[01:06] *** tellable6 joined
[01:06] *** unicodable6 joined
[01:07] *** releasable6 joined
[01:07] *** shareable6 joined
[01:07] *** benchable6 joined
[01:07] *** committable6 joined
[01:07] *** quotable6 joined
[01:08] *** squashable6 joined
[01:08] *** bloatable6 joined
[01:08] *** sourceable6 joined
[01:08] *** greppable6 joined
[01:18] *** gfldex left
[01:18] *** gfldex joined
[01:44] *** kvw_5_ joined
[01:47] *** kvw_5 left
[01:52] *** sxmx1 left
[01:52] *** Voldenet left
[01:52] *** donaldh left
[01:53] *** sxmx1 joined
[01:53] *** Voldenet joined
[01:53] *** donaldh joined
[01:53] *** tobs joined
[01:53] *** tailgate joined
[01:53] *** jraspass joined
[01:53] *** lucs joined
[03:05] *** lucasb left
[03:57] *** frost-lab joined
[05:32] *** b2gills left
[05:33] *** b2gills joined
[05:54] *** geth_ joined
[05:57] *** Geth left
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:51] *** domidumont joined
[07:57] *** dogbert17 left
[08:03] *** dogbert17 joined
[08:17] *** sena_kun left
[08:18] *** sena_kun joined
[08:43] *** geth_ left
[08:43] *** Geth joined
[09:28] *** Xliff joined
[09:30] <Xliff> \o

[09:31] <Xliff> Can someone look into R4356?

[09:31] <Xliff> Or tell me how to track number of files Rakudo has open?

[09:32] <Xliff> Is there a way this can be done with --profile or would --tracing be better?

[09:39] <MasterDuke> or maybe something like `strace -e open,close -o files.log` and counting them in the log file?

[09:40] <MasterDuke> --profile won't do it, --tracing might help. i'm not sure, but timotimo would know better

[09:52] <Xliff> MasterDuke: What would you suggest I do (except golf... this one is too complex, I think) to get 4356 looked at?

[09:54] <Xliff> I'm creating a docker image that (I hope) will have everything ready exept for the final step.

[09:58] <timotimo> i'm not sure what exactly you mean by --tracing

[09:58] <tellable6> 2021-05-04T00:07:03Z #raku <japhb> timotimo Can you merge https://github.com/timo/json_fast/pull/73 ?

[09:59] <timotimo> i would probably recommend gdb-ing into the process, breakpointing everything that creates files and everything that closes file descriptors, and grabbing a backtrace for each

[10:02] <Xliff> timotimo: That's a lot of work for a bug report.

[10:02] <timotimo> aye, a gdb script could / should be written for this task in particular

[10:03] <Xliff> timotimo: I have no expertise in writing such a thing.

[10:03] <timotimo> if/when we get tracy integrated with getting stack info for perl6-level frames, that could be very good

[10:03] <Xliff> timotimo: Could you comment on 4356, then?

[10:03] <timotimo> i'm not sure if that's actually a thing, but i was thinking just a little piece of text you could just copypaste into the gdb console

[10:03] <timotimo> M#4356

[10:03] <Xliff> At the very least I can say someone has at least commented on it.

[10:04] <timotimo> oh it's an R anyway

[10:04] <Xliff> If you have something to paste into gdb console, I can do.

[10:20] <timotimo> i don't, it'd be a bit of searching and dayjob got me in its clutches at the mo

[10:34] *** evalable6 left
[10:36] *** evalable6 joined
[11:26] *** MasterDuke left
[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:38] *** titsuki joined
[13:32] *** dogbert11 joined
[13:35] *** dogbert17 left
[13:36] *** frost-lab left
[14:07] <Geth> Â¦ rakudo/master: 5 commits pushed by (Vadim Belman)++

[14:07] <Geth> Â¦ rakudo/master: ca2753b7bd | Replace use of P6EX hllsym with Metamodel::Configuration.throw_or_die

[14:07] <Geth> Â¦ rakudo/master: a524c3de06 | Move registration of METAMODEL_CONFIGURATION HLL symbol

[14:07] <Geth> Â¦ rakudo/master: 8427afe91d | Offload symbol lookup onto Raku code

[14:07] <Geth> Â¦ rakudo/master: 2c4a006267 | Make .^add_method throw X::Method::Duplicate

[14:07] <Geth> Â¦ rakudo/master: 2776d69622 | Merge pull request #4352 from vrurg/replace-P6EX

[14:07] <Geth> Â¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/877fdd775e78...2776d696221d

[14:11] <Xliff> timotimo: OK, thanks. If you can tell me the broad strokes, maybe I can write it?

[14:22] <timotimo> ok, so first you'd search for anything that opens files; in your case i guess it'd be enough to find those that are actually used in the workload

[14:22] <timotimo> those places you'd want to put a breakpoint on

[14:23] <timotimo> you can use "commands <breakpoint number>" to put some gdb commands in that should run when the breakpoint is hit; i hope you can put more than one breakpoint number in there

[14:23] <Xliff> Um. This is occurring in precomp though.

[14:23] <Xliff> So I'd be doing this against the rakudo source?

[14:23] <timotimo> the commands would be like a bunch of "up" so a "tc" comes in scope, then "call MVM_dump_backtrace(tc)"

[14:24] <Xliff> Or MoarVM?

[14:24] <Xliff> I'm thinking MoarVM

[14:24] <timotimo> well, you can really only gdb C code or similar, so you'll target the source code of moarvm to find places that open stuff, but you'd be running moarvm with the arguments that reproduce your workload

[14:24] <Xliff> Even though the problem is in the Rakudo compiler.

[14:26] <timotimo> have you been able to freeze the execution at the point the explosion happens?

[14:26] <Xliff> Never.

[14:26] <Xliff> It's already changed once.

[14:26] <timotimo> at that point you could check `ls -lsa /proc/<pid of moarvm process>/fds/` or fdinfo or so to see if these fds point at anything suspicious

[14:27] <timotimo> because on unix "everything is a file" we have more file descriptors than actual files on disk that we open

[14:27] <Xliff> Good suggestion!

[14:27] <timotimo> for example, every thread can get a uv eventloop, which also grabs at least one file descriptor for polling purposes

[14:29] *** dogbert17 joined
[14:31] <[Tux]> Rakudo v2021.04-19-g2776d6962 (v6.d) on MoarVM 2021.04-34-g684b240e0

[14:31] <[Tux]> csv-test-xs-20      0.381 -  0.439

[14:31] <[Tux]> csv-ip5xs           0.852 -  0.881

[14:31] <[Tux]> test-t --race       0.905 -  0.910

[14:31] <[Tux]> test-t              2.021 -  2.136

[14:31] <[Tux]> test                8.045 -  8.067

[14:31] <[Tux]> csv-ip5xs-20        8.763 -  9.785

[14:31] <[Tux]> test-t-20 --race    9.759 -  9.807

[14:31] <[Tux]> csv-parser         27.497 - 28.828

[14:31] <[Tux]> test-t-20          33.925 - 34.731

[14:32] <[Tux]> Now I'll run again with teams closed. Note it was only active in the background using this timing, no actual conversations.

[14:32] *** dogbert12 joined
[14:33] *** dogbert11 left
[14:34] *** dogbert17 left
[14:45] *** dogbert17 joined
[14:48] *** dogbert12 left
[14:52] *** dogbert11 joined
[14:55] *** dogbert17 left
[15:09] <Xliff> *sigh*

[15:09] <Xliff> OK. Found another bug while in a docker environment

[15:10] <Xliff> "No such method 'absolute' for invocant of type 'Slip'"

[15:10] <Xliff> ^ This while in a docker container. If I do the same command from outside the container, it doesn't show.

[15:10] <Xliff> So I suppose the bug could be environmental.

[15:10] <Xliff> This is not the first time I've encountered it.

[15:11] <tonyo> [Tux]: what csv file do you run that benchmark with?

[15:11] <Xliff> I've pushed the Docker image here: https://hub.docker.com/repository/docker/xliff/rakudo-p6-glib-suite

[15:13] *** b2gills left
[15:13] *** b2gills joined
[15:14] <[Tux]> Rakudo v2021.04-19-g2776d6962 (v6.d) on MoarVM 2021.04-34-g684b240e0

[15:14] <[Tux]> csv-test-xs-20      0.390 -  0.390

[15:14] <[Tux]> csv-ip5xs           0.822 -  0.849

[15:14] <[Tux]> test-t --race       0.895 -  1.029

[15:14] <[Tux]> test-t              2.010 -  2.017

[15:14] <[Tux]> test                7.735 -  8.086

[15:14] <[Tux]> csv-ip5xs-20        8.537 -  9.247

[15:14] <[Tux]> test-t-20 --race   10.531 - 11.140

[15:14] <[Tux]> csv-parser         26.315 - 28.068

[15:14] <[Tux]> test-t-20          34.209 - 35.316

[15:14] <[Tux]>  /tmp/hello.csv

[15:15] <[Tux]> file://localhost/work/www/Talks/CSV6/speed.html

[15:15] <[Tux]> https://tux.nl/Talks/CSV6/speed.html

[15:15] <tonyo> danke

[15:16] <[Tux]> See also the link at the bottom of https://tux.nl/Talks/CSV6/speed5.html

[15:17] <tonyo> ahh i mean what is the csv file those things are actually parsing.  i looked in your repo, did i miss it?

[15:17] <[Tux]> that is the file hello.csv as described on speed.html. Simple as that

[15:18] <[Tux]> in the repo it is described in README.speed

[15:20] <tonyo> okay, so the csv file isn't in the repo

[15:21] <tonyo> rust is quick

[15:37] <Xliff> :s

[15:37] <Xliff> $*KERNEL.arch is "unknown" when in a Docker image

[15:39] <Xliff> How is $*KERNEL.arch populated?

[15:40] <lizmat> uname something?

[15:40] <Xliff> uname -a?

[15:41] <Xliff> From the container: "Linux 4d94d3324b85 5.8.0-50-generic #56-Ubuntu SMP Mon Apr 12 17:18:36 UTC 2021 x86_64 GNU/Linux"

[15:41] <Xliff> Which contains the correct arch.

[15:41] <lizmat> looks like uname -m

[15:41] <tbrowder> [Coke]: ref MoarVM issue #1469: I added a partial log showing the error lines 

[15:41] <lizmat> ah no, uname -p ?

[15:41] <Xliff> Actually, I think it's getting the value from "uname -p"

[15:42] <lizmat> yeah

[15:42] <Xliff> lizmat: Jinx! :)

[15:42] <Xliff> Should it be `uname -m`?

[15:42] <lizmat> I haz no idea

[15:42] <Xliff> What's the best way to test to see if you are running in a Docker image?

[15:42] <lizmat> jmerelo might know

[15:42] * lizmat doesn't

[15:44] <tonyo> Xliff: ls /.dockerenv 

[15:44] <tonyo> does that file exist in your image?

[15:45] <Xliff> Yyp

[15:45] <tonyo> ideally you'd set an env var.

[15:45] <Xliff> Yup, even

[15:46] <tonyo> if that file exists or if there's a docker user in proc/user/cgroup?  i think that's the path

[15:46] <tonyo> i'd set an environment variable though.

[15:46] <tonyo> s/group/user

[15:56] <Xliff> tonyo++: OK. That worked! Thanks

[16:15] *** Kaiepi left
[16:17] *** Kaiepi joined
[16:17] *** Kaiepi left
[16:18] *** Kaiepi joined
[16:25] *** domidumont left
[16:39] *** Kaiepi left
[17:18] <Geth> Â¦ rakudo: e6a7bfe7bb | (Elizabeth Mattijsen)++ | src/core.c/set_elem.pm6

[17:18] <Geth> Â¦ rakudo: Make infix (elem) about 30x as fast on native arrays

[17:18] <Geth> Â¦ rakudo: 

[17:18] <Geth> Â¦ rakudo: - Str on str arrays

[17:18] <Geth> Â¦ rakudo: - Int on int arrays

[17:18] <Geth> Â¦ rakudo: 

[17:18] <Geth> Â¦ rakudo: Most of the speed win is caused by:

[17:18] <Geth> Â¦ rakudo: - not needing to do any .WHICH on anything

[17:19] <Geth> Â¦ rakudo: <â¦commit message has 5 more linesâ¦>

[17:19] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e6a7bfe7bb

[17:45] *** patrickb joined
[18:01] *** reportable6 left
[18:04] *** reportable6 joined
[18:37] <sena_kun> any ideas on what's happening in https://github.com/rakudo/rakudo/issues/4357 ?

[18:40] * lizmat added MacOS output, which matched Linux

[18:40] *** titsuki left
[18:59] <sena_kun> committable6, note $*TMPDIR.child("../\x[308]").resolve(:completely).absolute.raku;

[18:59] <committable6> sena_kun, Â¦note: Â«Cannot find this revision (did you mean âcokeâ?)Â»

[18:59] <sena_kun> bisectable6, note $*TMPDIR.child("../\x[308]").resolve(:completely).absolute.raku;

[18:59] <bisectable6> sena_kun, Will bisect the whole range automagically because no endpoints were provided, hang tight

[19:00] <bisectable6> sena_kun, Output on all releases: https://gist.github.com/5c6e76138eb7ac9326f1e375f6811965

[19:00] <bisectable6> sena_kun, Bisecting by exit code (old=2019.07.1 new=2019.11). Old exit code: 1

[19:00] <bisectable6> sena_kun, bisect log: https://gist.github.com/9458ad81aa72a4d64c3c6504f17b570e

[19:00] <bisectable6> sena_kun, (2019-11-01) https://github.com/rakudo/rakudo/commit/7cf73de0d47f3f4a0a96a4108194d93c0a81e7ad

[19:00] <bisectable6> sena_kun, Bisecting by output (old=2017.05 new=2017.06) because on both starting points the exit code is 1

[19:01] <sena_kun> bisectable6, note $*TMPDIR.child("../\x[308]").resolve(:completely).absolute.perl;

[19:01] <bisectable6> sena_kun, Will bisect the whole range automagically because no endpoints were provided, hang tight

[19:01] <bisectable6> sena_kun, bisect log: https://gist.github.com/b2fd7a6ebd62406e56294556e14c75cb

[19:01] <bisectable6> sena_kun, (2017-06-01) https://github.com/rakudo/rakudo/commit/7cf01296d95ef7abd4369db25e996f656b955cd7

[19:01] <bisectable6> sena_kun, Bisecting by output (old=2016.09 new=2016.10) because on both starting points the exit code is 1

[19:01] <bisectable6> sena_kun, bisect log: https://gist.github.com/f1313fa496c5d689caa57cdd733c00c6

[19:01] <bisectable6> sena_kun, (2016-09-27) https://github.com/rakudo/rakudo/commit/222d16b0b94911fdedb06ee6ad817d0f14b9c05c

[19:01] <bisectable6> sena_kun, Output on all releases: https://gist.github.com/d2437fbb922ec363a813309fb1b1efa6

[19:01] <bisectable6> sena_kun, Bisecting by output (old=2017.03 new=2017.04.3) because on both starting points the exit code is 0

[19:01] <bisectable6> sena_kun, Output on all releases and bisected commits: https://gist.github.com/7e82563cd86c33a635e9111b485faed5

[19:01] <bisectable6> sena_kun, bisect log: https://gist.github.com/c4884b8863fc1857951175129a224e4f

[19:01] <bisectable6> sena_kun, (2017-04-10) https://github.com/rakudo/rakudo/commit/6a8d63d1b6a0bf8d58dd829be83bab82658b4662

[19:02] <bisectable6> sena_kun, â  New output detected, please review the results manually

[19:02] <bisectable6> sena_kun, Output on all releases and bisected commits: https://gist.github.com/7380fc9e9e00d27e5f769bcbc7921de3

[19:05] <sena_kun> who wants to investigate now? :)

[19:07] *** cog_ joined
[19:10] *** cog left
[19:11] <tonyo> sounds like a job for sena_kun 

[19:11] <lizmat> sena_kun: that commit is just exposing the issue

[19:16] <sena_kun> lizmat, well, yes.

[19:17] <sena_kun> anyway, quite a lot of packages are broken on Windows due to this bug, so IMO it would be nice to fix it and unbreak lots of code at once

[19:17] <lizmat> ah, indeed... 

[19:17] <lizmat> but maybe that's just  how WIndows works with directories ?

[19:17] <lizmat> re encoding and such ?

[19:19] <sena_kun> lizmat, dunno, it feels like the resolving of a `..` in a path is bogus on Windows in some edge case (related to this diacritic combiner, apparently) while it works fine on gnu/linux

[19:19] <lizmat> yeah, that feels about right :-(

[19:20] *** MasterDuke joined
[19:38] *** dogbert17 joined
[19:42] *** dogbert11 left
[19:46] *** dogbert17 left
[20:08] *** Xliff left
[20:09] *** dogbert17 joined
[20:09] *** dogbert11 joined
[20:13] *** dogbert17 left
[20:19] *** dogbert11 left
[20:20] *** dogbert11 joined
[20:29] *** dogbert11 left
[20:29] *** MasterDuke left
[20:32] *** dogbert11 joined
[20:32] *** patrickb left
[21:24] *** Kaiepi joined
[22:39] *** dogbert17 joined
[22:42] *** dogbert11 left
[23:23] *** Xliff joined
[23:23] <Xliff> \o

[23:24] <Xliff> I've updated #4356 with instructions to (hopefully) access the issue inside of a Docker image. The bug writeup contains a new set of replication steps in the comments.

[23:25] <Xliff> Could someone please look at it when they get a chance. This bug is really killing forward project with my efforts. Thanks.

[23:25] <Xliff> ^^ timotimo nine vrurg MasterDuke ugexe lizmat

[23:28] <tonyo> Xliff: what's your `ulimit -n` ?

[23:29] <Xliff> 1024

[23:30] <Xliff> That actually should be unlimited.... wtf?

[23:30] <tonyo> http://woshub.com/too-many-open-files-error-linux/

[23:30] <tonyo> you might check that ^

[23:31] <tonyo> that docker image is huge : )

[23:32] <Xliff> Yes. That way all of the p6-GLib stuff is precompiled.

[23:32] <Xliff> Better than downloading all of the repos and compiling them by hand... :/

[23:34] <tonyo> you should change your ulimit and give that precomp a shot

[23:36] <Xliff> tonyo++: Doing that right now. Thanks!

[23:40] <tonyo> doesn't mean it's not leaking handles but it does help golf that down to a small repo and setting a low ulimit

[23:41] <[Coke]> (did you mean coke?) huh?

[23:57] <Xliff> tonyo: That's hopeful given the amount of code that I have. It might not be possible to get a small golf.

[23:58] <Xliff> That's what always worries me.

