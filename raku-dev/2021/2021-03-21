[00:15] *** softmoth left
[00:15] *** softmoth joined
[00:32] *** Xliff left
[02:11] *** kvw_5 joined
[02:14] *** kvw_5_ left
[05:00] *** quotable6 left
[05:00] *** notable6 left
[05:00] *** evalable6 left
[05:00] *** bisectable6 left
[05:00] *** linkable6 left
[05:00] *** squashable6 left
[05:00] *** greppable6 left
[05:00] *** bloatable6 left
[05:00] *** statisfiable6 left
[05:00] *** tellable6 left
[05:00] *** sourceable6 left
[05:00] *** nativecallable6 left
[05:00] *** coverable6 left
[05:00] *** shareable6 left
[05:00] *** releasable6 left
[05:00] *** unicodable6 left
[05:00] *** committable6 left
[05:00] *** benchable6 left
[05:01] *** linkable6 joined
[05:01] *** coverable6 joined
[05:01] *** quotable6 joined
[05:01] *** squashable6 joined
[05:02] *** evalable6 joined
[05:02] *** unicodable6 joined
[05:02] *** nativecallable6 joined
[05:02] *** bisectable6 joined
[05:02] *** tellable6 joined
[05:03] *** benchable6 joined
[05:03] *** releasable6 joined
[05:03] *** shareable6 joined
[05:03] *** greppable6 joined
[05:03] *** bloatable6 joined
[05:03] *** committable6 joined
[05:03] *** sourceable6 joined
[05:04] *** notable6 joined
[05:04] *** statisfiable6 joined
[06:25] *** softmoth left
[06:41] *** frost-lab joined
[07:57] *** sena_kun left
[08:43] *** sena_kun joined
[09:24] *** camelCaser joined
[09:26] *** camelCaser left
[09:27] *** domidumont joined
[09:30] *** camelCaser joined
[10:01] <nine> m: my $supply = class :: is Supply { method new() { self.CREATE }; method tap($a) { note "tapping, this is gonna take a while"; await Promise.in(2); note "tapped!" } }.new; react { whenever $supply { }; whenever Promise.in(3) { say "3 seconds gone"; }; say "all set up!" }

[10:01] <camelia> rakudo-moar 726a75e24: OUTPUT: «tapping, this is gonna take a while␤all set up!␤3 seconds gone␤tapped!␤»

[10:01] <nine> This is why the react/whenever version of the signal test is still racy. The await in signal() does not keep us from running the rest of the supply block.

[10:02] *** cog__ left
[10:05] <nine> And that's because react/whenever specifically installs an AWAITER so an await in a tap handler does not block the react setup

[10:07] *** cog joined
[10:21] *** camelCaser left
[10:38] <nine> https://github.com/Raku/roast/commit/099d13e3b38fa48714b785076d5cf4d74f768fee "Fix race condition in react/whenever based signal stress test" On MoarVM signal() uses await to wait for the signal handler to be installed (which happens on the event loop thread). The react/whenever setup code however installs its own $*AWAITER, so an await in one whenever's tap handler does not block the rest of the setup 

[10:38] <nine> code. Instead, those handlers will be processed further at the end of the setup. The racy test on the other hand relied on the whenever handlers to be installed in sequence as part of the setup block messaged the parent process readiness for receiving signals.

[10:38] <nine> Fix by sending that message from a whenever handler itself so we can be absolutely sure that the setup is finished.

[11:03] <sena_kun> So the new website can handle 97.95% of the old URLs, not bad. Need to get it to 100% though.

[11:05] *** frost-lab left
[11:19] *** domidumont left
[13:23] *** domidumont joined
[14:00] *** domidumont left
[14:31] <[Tux]> lizmat, I just pushed a new feature in Text::CSV, but I do not understand why line 38 (when uncommented) fails in t/47_comment.t

[14:31] <[Tux]> care to take a look?

[15:14] *** domidumont joined
[15:18] <nine> Ha! investigating a rare deadlock I came across Semaphore which lets me solve the react/whenever problem with signal() so that the original test code works unmodified :)

[15:33] *** softmoth joined
[15:46] *** HarmtH_ left
[15:47] *** HarmtH joined
[15:49] *** HarmtH left
[15:49] *** HarmtH joined
[15:50] *** HarmtH left
[15:51] *** HarmtH joined
[15:53] *** HarmtH left
[15:53] *** HarmtH_ joined
[17:10] *** sena_kun left
[17:12] *** sena_kun joined
[17:21] *** epony left
[17:44] <nwc10> do we have any sort of repository of benchmarks?

[17:44] <nwc10> currently I'm curious about integer maths

[17:55] *** epony joined
[18:12] <japhb> nwc10: https://github.com/japhb/perl6-bench and a few others.

[18:18] <MasterDuke> i've proposed getting that (and/or others) set up in our CI as a GSoC project, but there haven't been any takers (of course we also haven't been selected for GSoC the last year or two)

[18:18] <MasterDuke> maybe i'll getting around to it myself eventually

[18:19] <MasterDuke> nwc10: is this for your getting rid of the intcache experiment?

[18:22] <nwc10> it's the replacement for that experiment

[18:23] <nwc10> which I just pushed to MoarVM as fastcreate_from_intcache

[18:24] <nwc10> but I can't work out how to benchmark it, to see if it really helps

[18:34] *** domidumont left
[20:49] *** HarmtH_ left
[20:50] *** HarmtH joined
[20:53] *** maggotbrain left
[21:27] <MasterDuke> japhb: have you done any work to update perl6-bench recently? i see a bunch of diffs in my local checkout related to running more recent stuff (e.g., removing niecza, looking for tags starting with 2018 not 2015)

[21:32] *** HarmtH_ joined
[21:32] *** HarmtH left
[23:07] *** linkable6 left
[23:07] *** evalable6 left
[23:07] *** evalable6 joined
[23:10] *** linkable6 joined
[23:16] <japhb> MasterDuke: I have not.  A few people have merge rights, I believe, so it shouldn't be completely gated on my time, but if there's demand I might be able to put some cycles towards it.

[23:19] *** HarmtH_ left
[23:19] *** HarmtH joined
[23:28] *** HarmtH left
[23:29] *** HarmtH joined
[23:34] *** softmoth left
[23:34] *** softmoth joined
[23:40] *** vrurg left
[23:52] *** finsternis joined
[23:53] *** vrurg joined
