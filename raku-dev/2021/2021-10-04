[00:00] * japhb wonders how much of that is *not* repeatedly boxing and unboxing the first arg to allo
[00:00] <timo> spesh log ought to answer that, right?
[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:26] *** squashable6 left
[00:38] *** squashable6 joined
[00:46] *** squashable6 left
[00:49] *** squashable6 joined
[01:49] *** greppable6 left
[01:49] *** evalable6 left
[01:49] *** quotable6 left
[01:49] *** tellable6 left
[01:49] *** squashable6 left
[01:49] *** bloatable6_ left
[01:49] *** releasable6 left
[01:49] *** coverable6 left
[01:49] *** notable6 left
[01:49] *** reportable6 left
[01:49] *** linkable6 left
[01:49] *** nativecallable6 left
[01:49] *** bisectable6_ left
[01:49] *** statisfiable6 left
[01:49] *** shareable6_ left
[01:49] *** unicodable6_ left
[01:49] *** committable6_ left
[01:49] *** benchable6 left
[01:49] *** sourceable6_ left
[01:49] *** evalable6 joined
[01:49] *** shareable6 joined
[01:50] *** quotable6 joined
[01:50] *** nativecallable6 joined
[01:51] *** reportable6 joined
[01:51] *** statisfiable6 joined
[01:52] *** committable6 joined
[02:49] *** greppable6 joined
[02:49] *** bloatable6 joined
[02:49] *** linkable6 joined
[02:50] *** unicodable6 joined
[02:50] *** tellable6 joined
[02:50] *** bisectable6 joined
[02:51] *** sourceable6 joined
[02:51] *** benchable6 joined
[02:52] *** notable6 joined
[02:52] *** squashable6 joined
[03:49] *** releasable6 joined
[03:51] *** coverable6 joined
[04:17] *** squashable6 left
[04:19] *** squashable6 joined
[04:20] *** squashable6 left
[04:22] *** squashable6 joined
[04:55] *** squashable6 left
[05:57] *** squashable6 joined
[06:02] *** reportable6 left
[07:44] *** moon-child left
[07:44] *** moon-child joined
[08:57] <lizmat> PSA: the Rakudo Weekly News will be published on Tuesday this week due to circumstances
[09:03] *** reportable6 joined
[10:09] *** |Tux| joined
[10:09] *** Tux__ joined
[10:37] *** sena_kun joined
[11:23] <|Tux|> Rakudo v2021.09-231-g21271aa5f (v6.d) on MoarVM 2021.09-604-gdfb583788
[11:23] <|Tux|> csv-test-xs-20      0.371 -  0.375
[11:23] <|Tux|> test-t --race       0.958 -  0.990
[11:23] <|Tux|> csv-ip5xs           1.350 -  1.371
[11:23] <|Tux|> test-t              1.699 -  1.705
[11:23] <|Tux|> csv-parser          5.188 -  5.203
[11:23] *** Tux__ left
[11:23] <|Tux|> test                7.393 -  7.413
[11:23] <|Tux|> test-t-20 --race    7.760 -  7.901
[11:23] <|Tux|> csv-ip5xs-20       14.881 - 15.691
[11:23] <|Tux|> test-t-20          24.539 - 24.734
[11:24] <lizmat> < 1.7 as I sorta predicted!   :-)
[11:58] <|Tux|> I accidentally ran it on the PC at work, and I was shocked till I realized it was the wrong box
[11:58] <|Tux|> 1.699 is very much ok
[11:58] <|Tux|> (for now)
[12:03] *** reportable6 left
[12:06] *** reportable6 joined
[15:31] *** Kaipi left
[15:35] <ugexe> codesections: i dont know how true it is, but a guess about your supply blocks vs Supply question would be that the block form could ensure all the setup is finished for the various whenevers (similar to react)
[16:04] *** Kaiepi joined
[17:17] *** jdv left
[17:18] *** jdv joined
[17:18] <[Coke]> releasable6: status
[17:18] <releasable6> [Coke], Next release in â‰ˆ18 days and â‰ˆ1 hour. 4 blockers. Changelog for this release was not started yet
[17:18] <releasable6> [Coke], Details: https://gist.github.com/d1ada4cc33fa65931b2427cfb0c92b79
[17:26] *** sena_kun left
[17:51] *** linkable6 left
[17:53] *** linkable6 joined
[18:01] *** vrurg_ joined
[18:02] *** reportable6 left
[18:02] *** vrurg left
[18:04] <MasterDuke> hm, i can't seem to build rakudo with the jvm backend
[18:05] <MasterDuke> it dies while compiling blib/Perl6/Optimizer.jar with `getcodeobj can only be used with a CodeRef`
[18:05] <ugexe> i think its been failing since new disp
[18:05] <MasterDuke> i thought the problem was i was using the graalvm jdk, but i switched (i believe) to openjdk 11 and get the same thing
[18:05] <ugexe> https://dev.azure.com/Rakudo/rakudo/_build?definitionId=1
[18:06] <ugexe> https://dev.azure.com/Rakudo/rakudo/_build/results?buildId=1802&view=logs&j=4b893f53-7e1e-5c61-1e1e-e4fc61ee1c48&t=eecb2d6d-5078-534f-db49-36810221fdff&l=38
[18:07] <MasterDuke> oh, somehow i completely missed that
[18:07] <MasterDuke> thanks
[18:10] <Geth> Â¦ nqp/new-disp-nativecall: 6790b4528e | (Stefan Seifert)++ | 4 files
[18:10] <Geth> Â¦ nqp/new-disp-nativecall: API for asking whether the compiler supports a certain nqp op
[18:10] <Geth> Â¦ nqp/new-disp-nativecall: 
[18:10] <Geth> Â¦ nqp/new-disp-nativecall: This can be used to conditionally compile backend specific code in
[18:10] <Geth> Â¦ nqp/new-disp-nativecall: modules like NativeCall
[18:10] <Geth> Â¦ nqp/new-disp-nativecall: review: https://github.com/Raku/nqp/commit/6790b4528e
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: 875ff5139c | (Stefan Seifert)++ | 2 files
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: Add a hook for custom dispatchers on callables
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: 
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: This lets callable objects have a say in which dispatcher is used when
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: they are invoked. This new mechanism replaces the special handling for
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: wrapped routines in the standard dispatchers.
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: review: https://github.com/rakudo/rakudo/commit/875ff5139c
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: a1cd39263e | (Stefan Seifert)++ | src/core.c/Compiler.pm6
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: API for asking whether the compiler supports a certain nqp op
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: 
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: This can be used to conditionally compile backend specific code in
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: modules like NativeCall
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: review: https://github.com/rakudo/rakudo/commit/a1cd39263e
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: db107dd02c | (Stefan Seifert)++ | lib/NativeCall.rakumod
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: Fix NativeCall performance regression on new-disp
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: 
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: The trick of replacing the native routine's $!do attribute has never
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: worked perfectly as closure cloning could lead to the generic code
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: getting executed. For unknown reason that got a lot worse on new-disp.
[18:21] <Geth> Â¦ rakudo/new-disp-nativecall: 
[18:22] <Geth> Â¦ rakudo/new-disp-nativecall: Get around that by replacing the fragile $!do replacement with a
[18:22] <Geth> Â¦ rakudo/new-disp-nativecall: <â€¦commit message has 7 more linesâ€¦>
[18:22] <Geth> Â¦ rakudo/new-disp-nativecall: review: https://github.com/rakudo/rakudo/commit/db107dd02c
[18:24] <MasterDuke> got a little farther in the build, but now `Error while compiling op dispatch, no registered operation handler`, which seems like it might not be a quick/easy fix
[18:31] <nine> MasterDuke: so we're missing an #?if moar somewhere?
[18:32] <MasterDuke> i was hoping it would be that simple, but all the nqp::dispatch in rakudo are inside an `#?if moar`
[18:32] <MasterDuke> at least, all the literal ones in the source
[18:33] <MasterDuke> same with nqp it looks like
[18:42] *** vrurg_ is now known as vrurg
[18:54] <MasterDuke> or inside something like `if nqp::getcomp('Raku').backend.name eq 'moar'`
[18:54] <MasterDuke> :q
[18:58] <bartolin> MasterDuke: I've noticed the broken JVM build too, but wasn't able to invest a lot of time. ooc, what did you do to avoid the original error?
[18:59] <MasterDuke> bartolin: https://gist.github.com/MasterDuke17/4f9cc0cda77607d1216fb1b8d7def040
[19:00] <bartolin> Ah, I see, thanks!
[19:00] *** patrickb joined
[19:01] <MasterDuke> np
[19:03] <MasterDuke> the two args when it gets a dispatch are 'boot-syscall' and 'bind-will-resume-on-failure'
[19:04] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L9082-L9099
[19:07] <bartolin> that was introduced with commit https://github.com/rakudo/rakudo/commit/de24aac1b8. Maybe the old code will still work for the JVM?
[19:08] <MasterDuke> trying now
[19:10] <MasterDuke> Could not instantiate role '<anon|1>':
[19:10] <MasterDuke> CodeRef representation does not support attributes
[19:11] <bartolin> :( 
[19:12] <MasterDuke> was jvm building right before the new-disp merge?
[19:12] *** discord-raku-bot left
[19:13] <MasterDuke> it's trying to compose an 'is default' mixin
[19:14] *** discord-raku-bot joined
[19:14] <bartolin> my last build was from 2021-09-19 (and that was still fine)
[19:27] <[Coke]> ... I don't think anyone tested JVM on new-disp branch, did we? uhoh
[19:27] <[Coke]> Is broken JVM a release blocker?
[19:28] <[Coke]> (Ideally it should be, but I think practically it's not)
[19:28] *** childlikempress joined
[19:28] *** moon-child left
[19:30] <bartolin> I'd also think it is not. btw, my impression was that most changes were made in a way that they only affected MoarVM. so maybe it's possible to resurrect the jvm backend without too much trouble.
[19:37] *** Xliff_ left
[19:44] <bartolin> MasterDuke: it looks like the initial error "getcodeobj can only be used with a CodeRef" also goes away if one changes back the first adjustment from https://github.com/Raku/nqp/commit/1ee4398beb -- instead of touching src/vm/jvm/Perl6/Ops.nqp. But there is still the problem with "Could not instantiate role '<anon|1>'"
[19:45] <MasterDuke> hm
[19:51] <Geth> Â¦ nqp: MasterDuke17++ created pull request #740: Make JVM tests pass after new-disp merge
[19:51] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/pull/740
[20:00] <MasterDuke> oh, we're not going to see anything different in CI because the NQP tests are only run if the rakudo build succeeds
[20:01] <MasterDuke> well, locally `make m-test j-test` now passes for nqp
[20:04] <bartolin> MasterDuke++
[20:05] <MasterDuke> do you think you'll be able to work on getting rakudo building?
[20:05] *** reportable6 joined
[20:09] *** monochromec joined
[20:10] *** monochromec left
[20:11] <japhb> lizmat: https://logs.liz.nl/raku-dev/2021-10-04.html#11:23 seems oddly formatted and out of order compared to what I see in irssi in this channel.  In particular, |Tux|'s comments from *after* your comment about < 1.7 have been moved to before the test results and split into words across the table.
[20:14] <bartolin> MasterDuke: I'll probably not have much time before the weekend. but I'll try to figure out what goes wrong. (It's quite possible that I'm not able to fix the build, though ...)
[20:19] <MasterDuke> no worries, this was just kind of a yak shaving exercise, so if you can work on it i suspect you'll be quicker to the fix than i
[20:19] <Geth> Â¦ nqp: 09d7c6917d | (Daniel Green)++ | 2 files
[20:19] <Geth> Â¦ nqp: Make JVM tests pass after new-disp merge
[20:19] <Geth> Â¦ nqp: 
[20:19] <Geth> Â¦ nqp: The JVM doesn't implement nqp::dispatch, so move any tests with that to
[20:19] <Geth> Â¦ nqp: the MoarVM tests directory.
[20:19] <Geth> Â¦ nqp: 
[20:19] <Geth> Â¦ nqp: The JVM also hasn't implemented hllize via dispatchers, so just skip
[20:19] <Geth> Â¦ nqp: that test on the JVM.
[20:19] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/09d7c6917d
[20:19] <Geth> Â¦ nqp: 1ecd755b84 | MasterDuke17++ (committed using GitHub Web editor) | 2 files
[20:20] <Geth> Â¦ nqp: Merge pull request #740 from MasterDuke17/make_jvm_tests_pass_after_new-disp_merge
[20:20] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/1ecd755b84
[20:37] *** patrickb left
[20:51] *** childlikempress is now known as moon-child
[21:00] <Geth> Â¦ roast: MasterDuke17++ created pull request #758: Simplify the code used to test destructors
[21:00] <Geth> Â¦ roast: review: https://github.com/Raku/roast/pull/758
[21:25] <lizmat> japhb: thanks for the report!
[21:25] <lizmat> will fix it in the next version :-)
[21:40] <japhb> :-)
[21:46] <Geth> Â¦ roast: 7d8f48c0e8 | (Daniel Green)++ | S12-construction/destruction.t
[21:46] <Geth> Â¦ roast: Simplify the code used to test destructors
[21:46] <Geth> Â¦ roast: 
[21:46] <Geth> Â¦ roast: Sometimes under heavy load we'd hit the timeout instead of a GC
[21:46] <Geth> Â¦ roast: triggering the destructor. So instead, just loop until we hit it, but
[21:46] <Geth> Â¦ roast: add in a call to explicitly request a GC (which wasn't available when
[21:46] <Geth> Â¦ roast: this test was written).
[21:46] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/7d8f48c0e8
[21:46] <Geth> Â¦ roast: fa5827ac28 | (Vadim Belman)++ (committed using GitHub Web editor) | S12-construction/destruction.t
[21:46] <Geth> Â¦ roast: Merge pull request #758 from MasterDuke17/simplify_destruction_test
[21:47] <Geth> Â¦ roast: Merge pull request #758 from MasterDuke17/simplify_destruction_test
[21:47] <Geth> Â¦ roast: 
[21:47] <Geth> Â¦ roast: Simplify the code used to test destructors
[21:47] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/fa5827ac28
[21:53] *** evalable6 left
[21:53] *** linkable6 left
[21:55] *** linkable6 joined
[21:56] *** evalable6 joined
[22:12] *** |Tux| left
[22:45] <japhb> lizmat: Created https://github.com/Raku/problem-solving/issues/302 to start the Blob/CArray/array reconciliation discussion
[23:35] *** evalable6 left
[23:35] *** linkable6 left
