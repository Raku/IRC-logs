[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:21] <timo> i guess Array is already `a list` so it just returns self, but array[int] isn't?
[00:21] <timo> and slices should give you the same type if possible i guess
[01:30] *** discord-raku-bot left
[01:31] *** discord-raku-bot joined
[01:35] <raydiak> for the first, I can only imagine that the thinking was that Array literally isa List, so why should .list do anything? and since array (not Array) isn't a List, it instead makes a List when you call .list. for the second, I can see a slice being looked at either way: a "slice" of something shouldn't change what it is, just like a slice of blueberry pie shouldn't become strawberry when you cut it. but otoh,
[01:35] <raydiak> someone might think of a slice more like indexing multiple values at once, and expect to get back a structure which is abstracted from the container type that they are pulling the values "out of"...either way this one is a definite inconsistency. wrt the third pair, I guess .values gives a Seq when it comes from an Array because it can be lazy, while an array cannot
[02:31] *** linkable6 left
[02:31] *** evalable6 left
[02:32] *** linkable6 joined
[02:32] *** evalable6 joined
[04:11] *** unicodable6 left
[04:11] *** greppable6 left
[04:11] *** committable6 left
[04:11] *** reportable6 left
[04:11] *** sourceable6 left
[04:11] *** squashable6 left
[04:11] *** benchable6 left
[04:11] *** linkable6 left
[04:11] *** bloatable6 left
[04:11] *** statisfiable6 left
[04:11] *** evalable6 left
[04:11] *** tellable6 left
[04:11] *** shareable6 left
[04:11] *** quotable6 left
[04:11] *** coverable6 left
[04:11] *** notable6 left
[04:11] *** releasable6 left
[04:11] *** nativecallable6 left
[04:11] *** bisectable6 left
[04:11] *** benchable6 joined
[04:11] *** unicodable6 joined
[04:11] *** coverable6 joined
[04:11] *** quotable6 joined
[04:12] *** committable6 joined
[04:12] *** tellable6 joined
[04:12] *** greppable6 joined
[04:13] *** bisectable6 joined
[04:13] *** statisfiable6 joined
[04:13] *** reportable6 joined
[04:13] *** squashable6 joined
[04:13] *** shareable6 joined
[04:13] *** sourceable6 joined
[04:13] *** bloatable6 joined
[04:13] *** linkable6 joined
[04:14] *** evalable6 joined
[04:14] *** nativecallable6 joined
[04:14] *** notable6 joined
[04:14] *** releasable6 joined
[05:47] *** frost joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:38] *** MasterDuke left
[06:58] *** patrickb joined
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft
[07:04] <gfldex> m: say "a" «cmp« <a>;
[07:04] <camelia> rakudo-moar 50bd1717c: OUTPUT: «Same␤»
[07:15] *** frost left
[07:16] *** frost joined
[08:03] *** MasterDuke joined
[08:06] *** MasterDuke left
[08:57] <Geth> ¦ rakudo: efb3116a90 | (Elizabeth Mattijsen)++ | src/core.c/Order.pm6
[08:57] <Geth> ¦ rakudo: Make sure cmp works on empty Lists
[08:57] <Geth> ¦ rakudo: 
[08:57] <Geth> ¦ rakudo: It was returning Mu if one the the Lists was empty.  Spotted by raydiak++.
[08:57] <Geth> ¦ rakudo: 
[08:57] <Geth> ¦ rakudo: Fixes #4471
[08:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/efb3116a90
[08:58] *** linkable6 left
[08:58] *** linkable6 joined
[09:04] *** MasterDuke joined
[09:25] <Geth> ¦ perl6-Pod-To-HTMLBody: raydiak++ created pull request #1: Fix a test
[09:25] <Geth> ¦ perl6-Pod-To-HTMLBody: review: https://github.com/raku-community-modules/perl6-Pod-To-HTMLBody/pull/1
[10:12] <Geth> ¦ perl6-Pod-To-HTMLBody: 52154b66d5 | raydiak++ | t/01-tree.t
[10:13] <Geth> ¦ perl6-Pod-To-HTMLBody: 52154b66d5 | raydiak++ | t/01-tree.t
[10:13] <Geth> ¦ perl6-Pod-To-HTMLBody: Fix a test
[10:13] <Geth> ¦ perl6-Pod-To-HTMLBody: 
[10:13] <Geth> ¦ perl6-Pod-To-HTMLBody: Lowercase strings in E<> should be valid HTML5 entities
[10:13] <Geth> ¦ perl6-Pod-To-HTMLBody: review: https://github.com/raku-community-modules/perl6-Pod-To-HTMLBody/commit/52154b66d5
[10:13] <Geth> ¦ perl6-Pod-To-HTMLBody: c9ff659cf5 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | t/01-tree.t
[10:13] <Geth> ¦ perl6-Pod-To-HTMLBody: Merge pull request #1 from raydiak/fix-escape-test
[10:13] <Geth> ¦ perl6-Pod-To-HTMLBody: 
[10:13] <Geth> ¦ perl6-Pod-To-HTMLBody: Fix a test
[10:13] <Geth> ¦ perl6-Pod-To-HTMLBody: review: https://github.com/raku-community-modules/perl6-Pod-To-HTMLBody/commit/c9ff659cf5
[10:31] *** dogbert17 joined
[10:32] *** dogbert11 left
[10:54] <Altai-man> releasable6, status
[10:54] <releasable6> Altai-man, Next release in ≈2 days and ≈8 hours. 3 blockers. Changelog for this release was not started yet
[10:54] <releasable6> Altai-man, Details: https://gist.github.com/9103dab3e113d81db920d82857a90e1b
[11:07] <Geth> ¦ rakudo: 6b6459f332 | (Elizabeth Mattijsen)++ | src/core.c/Uni.pm6
[11:07] <Geth> ¦ rakudo: Add Uni.ACCEPTS(Uni) candidate
[11:07] <Geth> ¦ rakudo: 
[11:07] <Geth> ¦ rakudo: so that Uni(97) ~~ Uni(97) returns True.
[11:07] <Geth> ¦ rakudo: 
[11:07] <Geth> ¦ rakudo: Did not add additional candidates for non-Uni, as I'm not 100% about
[11:07] <Geth> ¦ rakudo: the semantics, *and* it's going to be tricky to implement in the setting
[11:07] <Geth> ¦ rakudo: due to the late definition of the Uni class, and the fact that the Uni
[11:07] <Geth> ¦ rakudo: class has a "is repr" trait.
[11:07] *** dogbert11 joined
[11:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6b6459f332
[11:08] *** dogbert17 left
[11:12] <Altai-man> lizmat++
[11:13] *** dogbert17 joined
[11:16] *** dogbert11 left
[11:20] <Geth> ¦ Pod-To-HTMLBody: 7661e20998 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | README.md
[11:20] <Geth> ¦ Pod-To-HTMLBody: Modernize README a bit
[11:20] <Geth> ¦ Pod-To-HTMLBody: review: https://github.com/raku-community-modules/Pod-To-HTMLBody/commit/7661e20998
[11:35] <patrickb> vrurg: Did you see my comment at https://github.com/rakudo/rakudo/pull/4453#discussion_r670755636 ?
[11:36] <patrickb> vrurg: Correct link: https://github.com/rakudo/rakudo/pull/4453#discussion_r671023023
[11:48] <Altai-man> releasable6, status
[11:48] <releasable6> Altai-man, Next release in ≈2 days and ≈7 hours. 3 blockers. 43 out of 89 commits logged (⚠ 1 warnings)
[11:48] <releasable6> Altai-man, Details: https://gist.github.com/086b687690f4313772282110c962d851
[11:58] <Geth> ¦ nqp/new-disp: e275356589 | (Jonathan Worthington)++ | 3 files
[11:58] <Geth> ¦ nqp/new-disp: Update tests for MoarVM capture changes
[11:58] <Geth> ¦ nqp/new-disp: 
[11:58] <Geth> ¦ nqp/new-disp: * The `nqp::captureposarg*` family become strict about argument kind,
[11:58] <Geth> ¦ nqp/new-disp:   rather than coercive
[11:58] <Geth> ¦ nqp/new-disp: * `invokewithcapture` is going away on MoarVM, so make the test JVM
[11:58] <Geth> ¦ nqp/new-disp:   specific
[11:58] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/e275356589
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:21] <Geth> ¦ rakudo: 4f19087573 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6
[12:21] <Geth> ¦ rakudo: Add support for `next foo` to (node|deep|duck)map
[12:21] <Geth> ¦ rakudo: 
[12:21] <Geth> ¦ rakudo: This appeared to have been forgotten.
[12:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4f19087573
[12:25] <Geth> ¦ rakudo/new-disp: d19c68a472 | (Jonathan Worthington)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp
[12:25] <Geth> ¦ rakudo/new-disp: Eliminate final invokewithcapture usage on MoarVM
[12:25] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/d19c68a472
[12:25] <Geth> ¦ nqp/new-disp: 070addbeb1 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp
[12:25] <Geth> ¦ nqp/new-disp: Remove invokewithcapture op on MoarVM
[12:25] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/070addbeb1
[12:33] <Geth> ¦ rakudo/new-disp: 23fad25e39 | (Jonathan Worthington)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp
[12:33] <Geth> ¦ rakudo/new-disp: Adapt to MVMCallCapture's removal
[12:33] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/23fad25e39
[13:10] <Geth> ¦ rakudo: 21576423f8 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6
[13:10] <Geth> ¦ rakudo: Simplify the handlers in (node|duck|deep)map
[13:10] <Geth> ¦ rakudo: 
[13:10] <Geth> ¦ rakudo: Saves one allocation per call, and simplifies the loop logic signficantly.
[13:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/21576423f8
[13:24] <Geth> ¦ rakudo: e771bd8a5e | (Patrick Böker)++ | 3 files
[13:24] <Geth> ¦ rakudo: Build: Tidy and improve cleanup rules
[13:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e771bd8a5e
[13:24] <Geth> ¦ rakudo: f1959972d1 | (Patrick Böker)++ (committed using GitHub Web editor) | 3 files
[13:24] <Geth> ¦ rakudo: Merge pull request #4453 from patrickbkr/tidy-clean
[13:24] <Geth> ¦ rakudo: 
[13:24] <Geth> ¦ rakudo: Build: Tidy and improve cleanup rules
[13:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f1959972d1
[13:28] *** frost left
[13:48] <Geth> ¦ rakudo: 64b38ba31e | (Elizabeth Mattijsen)++ | 8 files
[13:48] <Geth> ¦ rakudo: Remove any trailing whitespace
[13:48] <Geth> ¦ rakudo: 
[13:48] <Geth> ¦ rakudo: Looks like quite a lot crept in the past months.
[13:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/64b38ba31e
[14:32] <Geth> ¦ nqp: 808fb9694b | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION
[14:32] <Geth> ¦ nqp: Bump MoarVM to get latest fixes
[14:32] <Geth> ¦ nqp: 
[14:32] <Geth> ¦ nqp: Most importantly, a fix on some types of re-allocations.
[14:32] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/808fb9694b
[14:45] <Geth> ¦ rakudo: f4b4bc1d70 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION
[14:45] <Geth> ¦ rakudo: Bump NQP to get the latest MoarV fixes
[14:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f4b4bc1d70
[15:02] <Geth> ¦ nqp/new-disp: 3e7bb1eb5e | (Jonathan Worthington)++ | src/vm/moar/NQP/Ops.nqp
[15:02] <Geth> ¦ nqp/new-disp: Eliminate generation of isfalse op
[15:02] <Geth> ¦ nqp/new-disp: 
[15:02] <Geth> ¦ nqp/new-disp: This last location emitting it was missed.
[15:02] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/3e7bb1eb5e
[15:02] <Geth> ¦ nqp/new-disp: b68cbcd743 | (Jonathan Worthington)++ | 10 files
[15:02] <Geth> ¦ nqp/new-disp: Update MoarVM bootstrap
[15:02] <Geth> ¦ nqp/new-disp: 
[15:02] <Geth> ¦ nqp/new-disp: In order that we can remove the istrue/isfalse/if_o/unless_o ops.
[15:03] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/b68cbcd743
[15:20] *** linkable6 left
[15:20] *** evalable6 left
[15:21] *** linkable6 joined
[15:23] *** evalable6 joined
[15:26] *** patrickb left
[15:48] <Geth> ¦ roast: 6b7c4f20d1 | (Stefan Seifert)++ | S01-perl-5-integration/roundtrip.t
[15:48] <Geth> ¦ roast: Fix a GLR straggler in S01-perl-5-integration/roundtrip.t
[15:48] <Geth> ¦ roast: 
[15:48] <Geth> ¦ roast: Inline::Perl5 has only recently gotten adapted to the flattening behaviour
[15:48] <Geth> ¦ roast: expected after the GLR. That's why this test's wrong expectations went by
[15:48] <Geth> ¦ roast: undiscovered for just as long. The test was written years before the GLR
[15:48] <Geth> ¦ roast: in a time where we flattened arguments as agressively as Perl does. Nowadays
[15:48] <Geth> ¦ roast: one often needs to be more explicit when expecting that like in this case a
[15:48] <Geth> ¦ roast: list should be flattened out into a function call's arguments.
[15:48] <Geth> ¦ roast: 
[15:48] <Geth> ¦ roast: Fixes rakudo issue #4418
[15:48] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6b7c4f20d1
[15:48] <nine> Altai-man: ^^^
[15:49] <Geth> ¦ nqp: 127e9f5ce7 | (Stefan Seifert)++ | tools/templates/MOAR_REVISION
[15:49] <Geth> ¦ nqp: Bump MoarVM to get a deadlock fix
[15:49] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/127e9f5ce7
[15:49] <Geth> ¦ rakudo: ac92caa824 | (Stefan Seifert)++ | tools/templates/NQP_REVISION
[15:49] <Geth> ¦ rakudo: Bump NQP for a MoarVM deadlock fix
[15:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ac92caa824
[15:52] <nine> That fix for S01-perl-5-integration/roundtrip.t is backwards compatible to older Inline::Perl5 versions btw
[16:05] <Altai-man> nine, thank you very much!
[16:05] <Altai-man> releasable6, status
[16:05] <releasable6> Altai-man, Next release in ≈2 days and ≈2 hours. 1 blocker. 43 out of 96 commits logged (⚠ 1 warnings)
[16:05] <releasable6> Altai-man, Details: https://gist.github.com/410621c4858bd6cef1cb2a9418f6c316
[17:43] *** evalable6 left
[17:43] *** linkable6 left
[18:02] *** reportable6 left
[19:28] *** dogbert17 left
[19:31] *** dogbert17 joined
[19:36] *** Xliff joined
[19:46] <Geth> ¦ rakudo/io-path-add-multiple: 67d353c482 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6
[19:46] <Geth> ¦ rakudo/io-path-add-multiple: Allow IO::Path.add to take multiple values
[19:46] <Geth> ¦ rakudo/io-path-add-multiple: 
[19:46] <Geth> ¦ rakudo/io-path-add-multiple: So that "foo".IO.add(<bar baz>) yields an "foo/bar/baz" path.
[19:46] <Geth> ¦ rakudo/io-path-add-multiple: review: https://github.com/rakudo/rakudo/commit/67d353c482
[19:47] <Geth> ¦ rakudo: lizmat++ created pull request #4472: Allow IO::Path.add to take multiple values
[19:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4472
[20:01] <Geth> ¦ rakudo/Cool.Order: 410b03d8ce | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6
[20:01] <Geth> ¦ rakudo/Cool.Order: Add Cool.Order "coercer"
[20:01] <Geth> ¦ rakudo/Cool.Order: 
[20:01] <Geth> ¦ rakudo/Cool.Order: Convert a Cool value to the associated Order enum:
[20:01] <Geth> ¦ rakudo/Cool.Order: - < 0  -> Less
[20:01] <Geth> ¦ rakudo/Cool.Order: -   0  -> Same
[20:01] <Geth> ¦ rakudo/Cool.Order: - > 0  -> More
[20:01] <Geth> ¦ rakudo/Cool.Order: 
[20:01] <Geth> ¦ rakudo/Cool.Order: The only other way to currently do this, is by basically writing the
[20:02] <Geth> ¦ rakudo/Cool.Order: ORDER (implementation-detail) subroutine again, or just do a call to
[20:02] <Geth> ¦ rakudo/Cool.Order: ORDER.  This allows syntactic sugar to not have to do it like that.
[20:02] <Geth> ¦ rakudo/Cool.Order: review: https://github.com/rakudo/rakudo/commit/410b03d8ce
[20:02] <Geth> ¦ rakudo: lizmat++ created pull request #4473: Add Cool.Order "coercer"
[20:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4473
[20:05] *** evalable6 joined
[20:06] <lizmat> given class A { my class B { } }, do we have some introspection to get at class B even though it is hidden inside A's lexical scope?
[20:08] <vrurg> lizmat: no
[20:09] <vrurg> B exists only in A's body block lexpad which is only available to A's lexicals.
[20:10] <lizmat> so I guess class A { class B is implementation-detail { } }   would be the only solution
[20:10] <Xliff> \o
[20:10] <lizmat> thinking about adding some Rakudo tests for the IterateX iterators
[20:11] <Xliff> I've started writing bindings for libX11. See progress at http://github.com/Xliff/p6-X11
[20:11] <lizmat> Xliff++
[20:11] <Xliff> Thsi one is standalone, so I hope to release it when finished via established channels.
[20:11] <lizmat> afk&
[20:12] <Xliff> There was this project: https://github.com/slobo/Perl6-X11-Xlib-Raw
[20:12] <Xliff> But no commits over the last 2 years, so I am taking a stab at it.
[20:12] <Xliff> This is.... larger... than I expected. Heh.
[20:14] <vrurg> lizmat: likely so.
[20:16] <vrurg> Xliff: is it *you* complaining about a project's size? Really? :D
[20:16] <Xliff> vrurg: :p
[20:17] <Xliff> vrurg: 600,000 LOC milestone passed. Onto 750,000!
[20:21] *** squashable6 left
[20:37] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4474: Use 'inlinable' instead of 'inlineable'
[20:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4474
[20:42] <japhb> I think the scariest thing about how many lines of code that's taking is that they are *Raku* lines.  I can only imagine the size in a less expressive language ....
[20:46] <Xliff> japhb: Heh! :)
[21:13] *** dogbert17 left
[21:35] *** squashable6 joined
[23:22] *** dogbert17 joined
[23:40] *** japhb left
[23:44] *** japhb joined
