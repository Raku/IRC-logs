[00:00] *** linkable6 left
[00:00] *** evalable6 left
[00:01] *** evalable6 joined
[00:01] *** linkable6 joined
[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:50] <japhb> My rebuild-everything script has had module install issues with the latest couple Rakudo commits.  After some abortive debugging, I rewrote part of my script to give better information about exactly what failed in the module installs.  Result:
[00:50] <japhb> ===> Searching for: Crypt::SodiumPasswordHash
[00:50] <japhb> Type Str does not support associative indexing.
[00:50] <japhb> "zef" unexpectedly returned exit value 1
[00:52] <japhb> It doesn't look like Crypt::SodiumPasswordHash has had any commits in months, so I assume either a problem with Rakudo or zef (though zef was having no problems installing lots of other modules, so it would have to be hitting an edge case if it's zef).  I'll try to narrow down the rakudo commit range
[01:03] *** linkable6 left
[01:05] *** linkable6 joined
[01:14] *** Voldenet left
[01:19] *** Voldenet joined
[01:36] <raydiak> I'm not sure that the way Sodium::PasswordHash is declaring dependencies in its META6.json is valid. I suspect zef is choking on that. changing it eliminates the error
[02:15] *** Voldenet left
[02:21] *** Voldenet joined
[02:24] <raydiak> it's not entirely clear from my reading whether the adjustment should be to that META6 or to zef. in the syns and docs, almost everywhere which has dependencies split into build/test/runtime also splits each of those into requires/recommends...EXCEPT https://design.raku.org/S22.html#line_339 . I can't find a statement which is explicitly clear on this point
[02:57] <japhb> Everything built successfully at v2021.06-47-g1e6d93c29, so at the very least, something has changed during the last few commits (even if the META6 *also* needs a fix)
[02:58] <japhb> (Rakudo commits, I mean)
[03:01] <raydiak> there is a lot of map and grep in https://github.com/ugexe/zef/blob/master/lib/Zef/Distribution.rakumod#L154-L163 so I would suspect the recent changes in those areas
[03:03] <raydiak> though it could be that it should have been failing all along, not sure if it's necessarily a "regression" or not
[03:03] <raydiak> lizmat: ^^
[03:06] <raydiak> bisectable6: [""].grep(*.<foo>).grep(*.defined).say
[03:06] <bisectable6> raydiak, Will bisect the whole range automagically because no endpoints were provided, hang tight
[03:07] <bisectable6> raydiak, Output on all releases: https://gist.github.com/5cb9e9d49ef6a5800e9ae2db80d34b8a
[03:07] <bisectable6> raydiak, Bisecting by exit code (old=2021.06 new=265888c). Old exit code: 0
[03:07] <bisectable6> raydiak, bisect log: https://gist.github.com/fe4012f6fc43f2fed2748102b078a7a3
[03:07] <bisectable6> raydiak, (2021-07-10) https://github.com/rakudo/rakudo/commit/bb09bbb8581364f7323ff1f17ab4d84dffbe798c
[03:07] <bisectable6> raydiak, Output on all releases and bisected commits: https://gist.github.com/306cd21f7bc3ec349aa232f38f0ff284
[03:08] <raydiak> that used to put the failure into the array being mapped, and then grep it out. now it throws immedieately
[03:08] <raydiak> well, not into the array. into the output from map. you know what I mean
[03:09] <ugexe> https://modules.raku.org/dist/Crypt::SodiumPasswordHash:cpan:JSTOWE/META6.json#L22
[03:10] <ugexe> that is missing 'requires' section of 'test'
[03:10] <ugexe> ah you already mentioned that
[03:11] <raydiak> I also didn't find an authoratative answer as to whether that should be valid or invalid, as I found one example in the syns which also doesn't have the 'requires' section
[03:11] <raydiak> and nothing anywhere explicitly says you have to have it if you use the hash form of depends
[03:12] <ugexe> well the authoratative answer is if you use the hash form you need to have the 'requires' section
[03:13] <raydiak> can you cite your source?
[03:14] <ugexe> the actual implementation i guess, which we came up with at a PTS
[03:15] <raydiak> I guess https://design.raku.org/S22.html#line_339 should be adjusted, then
[03:15] <ugexe> the lack of 'requires' in s22 was just a mistake when that page was updated
[03:15] <ugexe> well those documents dont really reflect reality anyway
[03:16] <raydiak> I know. I just couldn't find an actual specific answer to this question anywhere, so I was looking for what the intention originally was
[03:17] <raydiak> if you tell me that's the communities agreed-apon stance, I'll go with it, but we should probably doc is somewhere, and add it to roast
[03:17] <raydiak> *doc it somewhere
[03:17] <ugexe> what part of rakudo consumes that?
[03:17] <ugexe> the answer is nothing
[03:17] <ugexe> so it kinda feels weird to put it in the roast
[03:17] <ugexe> especially because parsing it is such a PITA
[03:18] <raydiak> roast was supposed to be the specification test suite. are we saying that META6.json is not part of the raku specification?
[03:18] <ugexe> muliple formats (depends:[] vs depends:{}) and multiple spec formats ("Foo:ver<1>" and {"name":"Foo","ver":1}) and the only-one-of-these parsing (["This","Or","That"])
[03:19] <ugexe> well certainly not every part of META6.json is part of raku specification
[03:19] <ugexe> if raku had a mechanism built in for parsing that depends stuff, then having tests in roast would feel more appropriate
[03:20] <ugexe> but it doesnt
[03:20] <raydiak> right, I do see what you're saying. but then what is it? just a loosely defined collection of stuff that zef and other tools happen to agree apon?
[03:25] <ugexe> for better or worse thats the only purpose it needs to serve up until now
[03:26] <ugexe> theoretically the core could understand it along with parsing names like "Foo:ver<1>" but it'll be harder and less elegant than you think, to the point it probably wont feel like a good idea without thinking about it more which just makes you even more worried and yeah
[03:27] <ugexe> if it was just one of "depends":[] or "depends":{} along with just {"name":"Foo"} type dependencies it would be quite sane
[03:28] <raydiak> I understand. I started to attempt to add support for :ver<> forms to panda's command line forever ago, and I do recall it quickly becoming more complicated than was immediately obvious
[03:31] <ugexe> https://github.com/ugexe/zef/blob/master/t/distribution-depends-parsing.t this is probably the best source for what dependency formats work
[03:32] <raydiak> from the sound of things, seems like centralizing support for all that complexity in rakudo and exposing it in a way which could be used by zef and other tools might not be a bad idea. rakudo already does care about other parts of META6.json anyway, e.g. "provides" 
[03:32] <japhb> Hmmm, got a lockup installing Cro::Webapp under rakudo-moar-2021.06-51-ga5d813539 -- trying again at same Rakudo rev in case that was a flake.
[04:03] <japhb> This time Cro::Webapp testing spit out some warnings, but it seemed to install anyway.  :-?
[04:07] <japhb> ... and now complete install at rakudo-moar-2021.06-51-ga5d813539
[04:49] <japhb> Same at v2021.06-53-g7a1b729bf
[05:01] *** [TuxCM] left
[05:01] *** [TuxCM] joined
[05:06] *** gfldex left
[05:06] *** rba left
[05:06] *** gfldex joined
[05:07] *** rba_ joined
[05:07] *** rba_ is now known as rba
[05:11] *** leont left
[05:11] *** SmokeMachine left
[05:11] *** kawaii_ left
[05:12] *** kawaii_ joined
[05:12] *** SmokeMachine joined
[05:12] *** leont joined
[05:36] <japhb> Same at v2021.06-54-g52ffc1255
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:04] <lizmat> raydiak: will look at it
[06:06] <raydiak> ++lizmat
[06:07] <raydiak> in case you didn't read the whole backlog, the behavior which changed can be reduced to `[""].grep(*.<foo>).grep(*.defined).say`. seems like where a failure would have previously flown from the map to the grep, it now throws immediately
[06:16] <japhb> Got a weird error late in the process building on v2021.06-55-g0761d4b2d, but it's possible it was a red herring -- trying that one again.
[06:30] <japhb> Gah, early test failure at: t/01-sanity/55-use-trace.t ...................................... Dubious, test returned 1 (wstat 256, 0x100)
[06:30] <japhb> Trying yet again
[07:10] *** patrickb joined
[07:10] <japhb> Flakiness aside, v2021.06-55-g0761d4b2d built successfully on the fourth try.
[07:23] *** Geth left
[07:23] *** Geth joined
[07:32] *** patrickb left
[07:33] *** patrickb joined
[07:33] <patrickb> o/
[07:34] <Geth> Â¦ rakudo: 71f6bada9e | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6
[07:34] <Geth> Â¦ rakudo: Make sure we don't sink values in .grep(Callable)
[07:34] <Geth> Â¦ rakudo: 
[07:34] <Geth> Â¦ rakudo: bb09bbb8581364f7323ff1f17a caused a regression because the value
[07:34] <Geth> Â¦ rakudo: returned from the Callable was being sunk, when it wasn't before.
[07:34] <Geth> Â¦ rakudo: This would cause Failures that were returned, to be thrown instead
[07:34] <Geth> Â¦ rakudo: of just being passed along.
[07:34] <Geth> Â¦ rakudo: 
[07:34] <Geth> Â¦ rakudo: raydiak++ for golfing
[07:34] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/71f6bada9e
[07:34] <lizmat> raydiak ^^
[07:38] <raydiak> thanks lizmat++ :)
[07:42] <raydiak> good catch japhb++
[07:58] <japhb> lizmat++, I'll run a full rebuild against head
[07:59] <japhb> ... but I'll have to give the results on the morrow, because Zzzzzzzzz ....
[07:59] <lizmat> sleep well!
[08:01] <japhb> thx &
[08:49] *** |Tux| joined
[09:30] *** Kaiepi left
[10:24] *** Kaiepi joined
[10:29] *** sena_kun joined
[10:55] *** RakuIRCLogger left
[10:55] *** RakuIRCLogger joined
[11:12] *** frost joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:21] <lizmat> afk for a few hours&
[12:37] *** frost left
[12:56] <|Tux|> Rakudo v2021.06-60-g71f6bada9 (v6.d) on MoarVM 2021.06-16-g74e828f0a
[12:56] <|Tux|> csv-test-xs-20      0.382 -  0.403
[12:56] <|Tux|> csv-ip5xs           0.948 -  1.055
[12:56] <|Tux|> test-t --race       1.059 -  1.111
[12:56] <|Tux|> test-t              2.056 -  2.086
[12:56] <|Tux|> test                7.734 -  8.525
[12:56] <|Tux|> csv-ip5xs-20        9.216 -  9.740
[12:56] <|Tux|> test-t-20 --race   11.212 - 12.592
[12:56] <|Tux|> csv-parser         29.740 - 30.771
[12:56] <|Tux|> test-t-20          35.462 - 38.429
[13:17] <ugexe> raydiak: yes that would be ideal. altough i've never been sure how all that would look when put in the core e.g. some odd-ball utility functions? extend the Distribution interface? add new META6 interface?
[13:22] <patrickb> ugexe, nine: https://github.com/rakudo/rakudo.org/issues/72#issuecomment-878055922
[13:24] <ugexe> well he had sufficient permissions for the source files to be installed to site
[13:25] <patrickb> The MSI installer he is testing requires Admin to install to C:\Program Files\
[13:26] <patrickb> ah
[13:26] <patrickb> you mean during install of the module
[13:26] <patrickb> so you think rakudo bug?
[13:26] <ugexe> yeah, at least i think that is the case. installing the source files happens before precomp, although i guess its possible the repo lock is accessed earlier
[13:27] *** sena_kun left
[13:27] <ugexe> ah yeah i was wrong
[13:28] <ugexe> https://github.com/rakudo/rakudo/blob/99e4cf8df667189d1983843d0420d9d4833a14ce/src/core.c/CompUnit/Repository/Installation.pm6#L150-L159
[13:28] <ugexe> however the previous line shows they should have write access
[13:28] <ugexe>         my $path   = self!writeable-path or die "No writeable path found, $.prefix not writeable";
[13:28] <ugexe>         my $lock = $.prefix.add('repo.lock').open(:create, :w);
[13:34] <patrickb> ugexe: Thanks for the quick response. My gut feeling points toward some Windows specific Rakudo bug. If noone beats me to it, I'll try to reproduce this tomorrow evening.
[13:36] <patrickb> ugexe: Do I remember correctly, that the idea is to install to the home dir repo if site install isn't writable? (or fails?)
[13:37] <ugexe> yes
[13:38] <ugexe> https://github.com/ugexe/zef/blob/602c54f1069631fd527473f4028451e5c47bc42c/lib/Zef/CLI.rakumod#L1220-L1227
[13:38] <ugexe> https://github.com/ugexe/zef/blob/602c54f1069631fd527473f4028451e5c47bc42c/resources/config.json#L6
[13:41] <patrickb> Thanks! ugexe++
[13:44] *** sena_kun joined
[14:56] <Geth> Â¦ nqp/new-disp: 318a9f04d1 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp
[14:56] <Geth> Â¦ nqp/new-disp: Switch `with` code-gen to emit a dispatch op
[14:56] <Geth> Â¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/318a9f04d1
[15:03] <lizmat> notable6: weeklly
[15:03] <notable6> lizmat, No notes for âweekllyâ
[15:04] <lizmat> notable6: weekly
[15:04] <notable6> lizmat, 2 notes: 2021-07-05T18:43:23Z <CIAvash>: https://github.com/CIAvash/qutebrowser-userscripts  ;  2021-07-05T18:43:39Z <CIAvash>: https://www.ciavash.name/blog/2021/07/05/raku-go-chroma-germanium-hugo-and-my-blog/
[15:04] *** MasterDuke joined
[15:15] <Geth> Â¦ nqp/new-disp: 85cac6e744 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp
[15:15] <Geth> Â¦ nqp/new-disp: Compile loop block invocations to a dispatch op
[15:15] <Geth> Â¦ nqp/new-disp: 
[15:15] <Geth> Â¦ nqp/new-disp: And also remove a little redundant code.
[15:15] <Geth> Â¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/85cac6e744
[15:20] <Geth> Â¦ rakudo/new-disp: ae622053e8 | (Jonathan Worthington)++ | src/vm/moar/Perl6/Ops.nqp
[15:20] <Geth> Â¦ rakudo/new-disp: Emit a dispatch op in p6store
[15:20] <Geth> Â¦ rakudo/new-disp: 
[15:20] <Geth> Â¦ rakudo/new-disp: In place of the findmethod/invoke instructions.
[15:20] <Geth> Â¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/ae622053e8
[15:34] <Kaiepi> m: role Foo { proto method level() {*}; multi method level(::?ROLE: --> 0) { } }; role Bar does Foo { multi method level(::?ROLE: --> 1) { } }; say Bar.level
[15:34] <camelia> rakudo-moar 5ecc8308f: OUTPUT: Â«1â¤Â»
[15:35] <Kaiepi> m: role Foo { proto method level() {*}; multi method level(::?ROLE: --> 0) { } }; role Bar does Foo { say $?ROLE.HOW.^name; multi method level(::?ROLE: --> 1) { } }; Bar.^pun
[15:35] <camelia> rakudo-moar 5ecc8308f: OUTPUT: Â«Perl6::Metamodel::ParametricRoleHOWâ¤Â»
[15:40] <Kaiepi> m: role Foo { proto method level() {*}; multi method level(::?ROLE: --> 0) { } }; role Bar does Foo { say $?ROLE.HOW.^name; multi method level(::?ROLE: --> 1) { } }; Bar.^find_method('level').dispatchees[1].signature.params[0].say
[15:40] <camelia> rakudo-moar 5ecc8308f: OUTPUT: Â«Perl6::Metamodel::ParametricRoleHOWâ¤No such method 'dispatchees' for invocant of type 'ForeignCode'â¤  in block <unit> at <tmp> line 1â¤â¤Â»
[15:40] <Kaiepi> m: role Foo { proto method level() {*}; multi method level(::?ROLE: --> 0) { } }; role Bar does Foo { say $?ROLE.HOW.^name; multi method level(::?ROLE: --> 1) { } }; Bar.^pun.^find_method('level').dispatchees[1].signature.params[0].say
[15:40] <camelia> rakudo-moar 5ecc8308f: OUTPUT: Â«Perl6::Metamodel::ParametricRoleHOWâ¤Foo $â¤Â»
[15:41] <Kaiepi> m: role Foo { proto method level() {*}; multi method level(::?ROLE: --> 0) { } }; role Bar does Foo { say $?ROLE.HOW.^name; multi method level(::?ROLE: --> 1) { } }; Bar.^pun.^find_method('level').dispatchees.map({ .signature.params[0] }).say
[15:41] <camelia> rakudo-moar 5ecc8308f: OUTPUT: Â«Perl6::Metamodel::ParametricRoleHOWâ¤(Bar $ Foo $)â¤Â»
[15:42] <Kaiepi> m: role Foo { proto method level() {*}; multi method level(::?ROLE: --> 0) { } }; role Bar does Foo { say $?ROLE.HOW.^name; multi method level(::?ROLE: --> 1) { } }; Bar.^pun.^find_method('level').dispatchees.map({ .signature.params[0].HOW.^name }).say
[15:42] <camelia> rakudo-moar 5ecc8308f: OUTPUT: Â«Perl6::Metamodel::ParametricRoleHOWâ¤(Perl6::Metamodel::ClassHOW Perl6::Metamodel::ClassHOW)â¤Â»
[15:42] <Kaiepi> wat
[15:54] <Kaiepi> m: role Foo { proto method level() {*}; multi method level(::?ROLE: --> 0) { } }; role Bar does Foo { say $?ROLE.HOW.^name; multi method level(::?ROLE: --> 1) { } }; Bar.^method_table('level').dispatchees.map({ .signature.params[0].HOW.^name }).say
[15:54] <camelia> rakudo-moar 5ecc8308f: OUTPUT: Â«No such method 'method_table' for invocant of typeâ¤'Perl6::Metamodel::ParametricRoleGroupHOW'â¤  in block <unit> at <tmp> line 1â¤â¤Â»
[15:54] <Kaiepi> m: role Foo { proto method level() {*}; multi method level(::?ROLE: --> 0) { } }; role Bar does Foo { say $?ROLE.HOW.^name; multi method level(::?ROLE: --> 1) { } }; Bar.^candidates[0].^method_table('level').dispatchees.map({ .signature.params[0].HOW.^name }).say
[15:54] <camelia> rakudo-moar 5ecc8308f: OUTPUT: Â«Too many positionals passed; expected 2 arguments but got 3â¤  in block <unit> at <tmp> line 1â¤â¤Â»
[15:55] <Kaiepi> m: role Foo { proto method level() {*}; multi method level(::?ROLE: --> 0) { } }; role Bar does Foo { say $?ROLE.HOW.^name; multi method level(::?ROLE: --> 1) { } }; Bar.^candidates[0].^method_table<level>.dispatchees.map({ .signature.params[0].HOW.^name }).say
[15:55] <camelia> rakudo-moar 5ecc8308f: OUTPUT: Â«No such method 'dispatchees' for invocant of type 'Any'â¤  in block <unit> at <tmp> line 1â¤â¤Â»
[15:58] <Kaiepi> m: role Foo { proto method level() {*}; multi method level(::?ROLE: --> 0) { } }; role Bar does Foo { say $?ROLE.HOW.^name; multi method level(::?ROLE: --> 1) { } }; say Bar.^candidates[0] ~~ Foo.^candidates[0]
[15:58] <camelia> rakudo-moar 5ecc8308f: OUTPUT: Â«Trueâ¤Â»
[15:58] <Kaiepi> there we go, problem typecheck
[15:59] <Kaiepi> (locally)
[16:04] *** linkable6 left
[16:04] *** evalable6 left
[16:05] *** evalable6 joined
[16:06] *** linkable6 joined
[16:33] *** MasterDuke left
[16:35] <Geth> Â¦ rakudo/new-disp: 9da4d1fe21 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp
[16:35] <Geth> Â¦ rakudo/new-disp: Throw proper no matching candidates exception
[16:35] <Geth> Â¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/9da4d1fe21
[17:26] <Geth> Â¦ rakudo/new-disp: 3e6aab202a | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp
[17:26] <Geth> Â¦ rakudo/new-disp: Junction auto-thread failover in multi dispatch
[17:26] <Geth> Â¦ rakudo/new-disp: 
[17:26] <Geth> Â¦ rakudo/new-disp: With the new dispatcher we can avoid an extra level of closure wrapping
[17:26] <Geth> Â¦ rakudo/new-disp: and argument slurping/flattening compared to the current implementation.
[17:27] <Geth> Â¦ rakudo/new-disp: 
[17:27] <Geth> Â¦ rakudo/new-disp: With the new dispatcher we can avoid an extra level of closure wrapping
[17:27] <Geth> Â¦ rakudo/new-disp: and argument slurping/flattening compared to the current implementation.
[17:27] <Geth> Â¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/3e6aab202a
[17:27] <lizmat> notable6: weekly reset
[17:27] <notable6> lizmat, Moved existing notes to âweekly_2021-07-12T17:27:27Zâ
[17:33] *** linkable6 left
[17:33] *** evalable6 left
[17:35] *** evalable6 joined
[17:36] *** linkable6 joined
[17:38] *** sena_kun left
[18:02] *** reportable6 left
[18:04] *** MasterDuke joined
[18:05] *** reportable6 joined
[18:16] <japhb> lizmat: Full rebuild successful at v2021.06-60-g71f6bada9
[18:16] <lizmat> *phew*
[18:18] *** melezhik joined
[18:18] <melezhik> AlexDaniel whateverable works now, thanks !
[18:18] <tellable6> 2021-07-11T19:20:53Z #raku-dev <AlexDaniel> melezhik: try again?
[18:18] <AlexDaniel> cool
[18:18] <AlexDaniel> ping me if it does that again
[18:18] <melezhik> yeah, for sure
[18:50] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/07/12/2021-28-track-splitting/
[19:18] *** evalable6 left
[19:18] *** linkable6 left
[19:18] *** evalable6 joined
[19:20] *** linkable6 joined
[19:24] *** melezhik left
[19:36] *** patrickb left
[20:05] <[Coke]> I think the community agreed format of META6.json should be on the doc site.
[20:05] <[Coke]> (even if it's not officially spec)
[20:12] <japhb> [Coke]: Definitely agreed.  I've found myself confused about the details and unsure of what was recommended more than once.
[20:13] <[Coke]> Might also be nice to have a verifier that we could plug in to something like Blin
[20:15] <gfldex> We already got that with https://raku.land/cpan:JSTOWE/Test::META
[20:16] <[Coke]> oh, if it's already use zef for testing, maybe that'd have an option.
[20:17] <[Coke]> but +1 if we can get blin to check that as well.
[20:18] <gfldex> I'm trying to sneak t/meta.t into every project I send a PR to. :->
[20:21] <ugexe> if i were using it i'd put it in xt/meta.t and rely on a explicit CI test line like `prove -r xt/` in addition to running the tests in t/
[20:23] <ugexe> https://github.com/ugexe/Perl6-App--OpenAPI--META6Validator
[20:23] <ugexe> i also did this awhile back trying to specific it all in OpenAPI
[20:23] <ugexe> although its just a proof of concept
[20:23] <gfldex> jnthn would like to see Test::META in "test-depends" but I disagree. If the META6.json is broken it can be impossible to even fetch the source. Pretty hard to run tests in this case.
[20:24] <ugexe> if the bad meta data is in the ecosystem its already too late
[20:24] <ugexe> there is no need for a test to tell end users about it
[20:24] <ugexe> the test is an authoring issue
[20:24] <ugexe> so yes it goes in test-depends but i'd put the actual test in xt/
[20:24] <ugexe> even if theoretically there should be a xt-test-depends or something
[20:25] <gfldex> The author might forget to run the test if extra steps are needed.
[20:25] <ugexe> author can forget any number of things
[20:25] <gfldex> If you want other ppl do stuff, make it as simple as possible.
[20:25] <[Coke]> make fez reject a submission with a bad one?
[20:26] <ugexe> yeah ecosystems ar ea good place to handle that
[20:26] <gfldex> I make a release on github before I push to the ecosystem. So for me that check would be to late.
[20:27] <gfldex> But having that check in fez would not hurt for sure.
[20:27] <ugexe> why wouldnt you just have your CI catch it?
[20:27] * [Coke] opens https://github.com/tony-o/raku-fez/issues/43
[20:27] <ugexe> zef has xt/ tests that get run for authoring purposes... it would be insane to have every user run those
[20:28] <ugexe> it would indeed be slightly easier for me to not do that, but the separation makes logical sense
[20:28] <[Coke]> agreed. I think encouraging authors to adopt xt/ is better than having every user run those cycles.
[20:31] <gfldex> How well does META6.json age? Is there a failure mode where changes to the ecosystem/Rakudo can be caught by checking META6.json at install time?
[20:38] <tonyo> [Coke]: fez already warns you that your meta is not looking good
[20:38] <tellable6> 2021-07-11T18:07:20Z #raku <melezhik> tonyo fez works for me as a charm, thanks a lot for your work - https://gist.github.com/melezhik/7cda94dc4a554f435fa72a4d64c3962a
[20:38] <ugexe> gfldex: i dont follow
[20:41] <gfldex> A while back a change to Test::META was made that showed a problem with a META6.json of one of my modules at install time. I would not have noticed otherwise (maybe much later).
[20:45] <ugexe> why install time? test time is the appropriate time to catch that, be it unit or author tests
[20:46] <gfldex> `zef install` kindly ran the test and told me about the problem because I used Test::META in t/meta.t .
[20:47] <gfldex> Test::META was younger then the module I wanted to install.
[20:49] <ugexe> a happy coincidence, but im not sure that justifies everyone validating the same data structure
[21:02] <japhb> tonyo: ISTR that the tests fez runs are somewhat incomplete.  (That said, `fez checkbuild` is part of my standard release run-up now, so clearly it's helping.)
[21:07] *** MasterDuke left
[22:06] <raydiak> a few notes about the META6 situation: (1) the offending module which led to that conversation does use Test::META, which doesn't catch that particular error. (2) neither zef nor fez appear to use Test::META nor META6, both of which we link to from https://docs.rakulang.site/language/modules#index-entry-META6.json-META6.json
[22:06] <raydiak> (3) while these community modules do exist, the idea of putting the functionality into core is that we would have an actual centralized, authoratative point for these things. something this important and far-reaching shouldn't be under the maintenance and authority of one person's github repo. and since it is a nontrivial thing to get completely right, it makes sense from an abstraction standpoint as well,
[22:06] <raydiak> to not require every package manager, authoring tool, and ecosystem to reimplement these things or pick from a variety of modules to do it...not to mention the fact that these modules themselves use META6.json and have to be installed by something, creating a bit of a metacircularity issue
[22:07] *** evalable6 left
[22:07] *** linkable6 left
[22:08] *** linkable6 joined
[22:09] *** evalable6 joined
[22:16] <japhb> raydiak: Generally agree, with a nit: https://github.com/raku-community-modules exists, so we don't need to worry as much about small bus number for a module considered generally important (some of the modules there came from loss of original maintainer, or maintainer unable to continue work on them).
[22:16] <raydiak> for those reasons, my personal stance is basically that letting fez/zef be the central point is bad, and if we want to use Test::META and/or META6 or whatever similar things, or pull those parts out of zef and fez into a separate module, then cool, but whatever we decide to use should go into core, in rakudo's lib/, alongside e.g. Test, NativeCall, Pod::To::Text, etc, with an agreed-upon API for accessing
[22:16] <tonyo> #3++
[22:16] <raydiak> that functionality, and be covered by roast
[22:17] <japhb> Is Test tested by roast or by `make test`?
[22:17] <Geth> Â¦ rakudo/new-disp: e5c5bd765f | (Jonathan Worthington)++ | 2 files
[22:17] <Geth> Â¦ rakudo/new-disp: Remove now-unused dispatcher extops on MoarVM
[22:17] <Geth> Â¦ rakudo/new-disp: 
[22:17] <Geth> Â¦ rakudo/new-disp: While other backends will use these for now, they are no longer needed
[22:17] <Geth> Â¦ rakudo/new-disp: on MoarVM, which uses new-disp going forward.
[22:17] <Geth> Â¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/e5c5bd765f
[22:17] <raydiak> heh I have no idea what tests Test, good question :)
[22:28] <raydiak> from https://github.com/Raku/roast/tree/master/S24-testing and https://github.com/rakudo/rakudo/blob/master/t/01-sanity/99-test-basic.t it appears that often, Test tests Test. which at least ensures that it is internally consistent, even if it doesn't really guarantee that it is doing what it should. I also see some of https://github.com/Raku/roast/tree/master/packages/Test-Helpers being used in places
[22:38] <raydiak> so the answer to the question seems to be mostly that Test is tested in roast. it was part of the syns, after all. I have the same feeling about where META functionality testing should go. I'd like to allow as much as possible for a future when we may again have multiple compilers, and they should provide this same functionality and be compatible with the same modules/ecosystems, so I don't see it as a
[22:38] <raydiak> rakudo-specific thing, but part of the spec
[22:52] <raydiak> anyway, I slept about 2 hours and need a nap. just wanted to drop in and contribute my 2 cents when I saw the backlog
[22:58] <[Coke]> tonyo++
[22:59] <[Coke]> I don't think the meta validation should be in core.
[22:59] <[Coke]> Because then the format is locked to that release.
[22:59] <[Coke]> and we need to be able to update what is valid META even if someone has an old rakudo
[23:04] <[Coke]> (and I don't want to have dual-life modules)
[23:09] *** linkable6 left
[23:09] *** evalable6 left
[23:10] *** linkable6 joined
[23:12] *** evalable6 joined
