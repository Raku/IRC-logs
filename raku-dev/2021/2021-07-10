[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[01:03] *** bisectable6 left
[01:03] *** coverable6 left
[01:03] *** notable6 left
[01:03] *** releasable6 left
[01:03] *** squashable6 left
[01:03] *** evalable6 left
[01:03] *** nativecallable6 left
[01:03] *** unicodable6 left
[01:03] *** quotable6 left
[01:03] *** greppable6 left
[01:03] *** reportable6 left
[01:04] *** notable6 joined
[01:04] *** reportable6 joined
[01:04] *** squashable6 joined
[01:04] *** quotable6 joined
[01:04] *** bisectable6 joined
[01:05] *** greppable6 joined
[01:05] *** evalable6 joined
[01:05] *** nativecallable6 joined
[01:06] *** releasable6 joined
[01:06] *** unicodable6 joined
[01:06] *** coverable6 joined
[02:57] *** Kaipi left
[02:57] *** Kaiepi joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:24] *** Util left
[06:24] *** jdv left
[06:24] *** japhb left
[06:24] *** frost left
[06:24] *** vrurg_ left
[06:24] *** kjp left
[06:24] *** samcv left
[06:24] *** smarton left
[06:24] *** summerisle left
[06:24] *** unicodable6 left
[06:24] *** evalable6 left
[06:24] *** nativecallable6 left
[06:24] *** quotable6 left
[06:24] *** Geth left
[06:24] *** discord-raku-bot left
[06:24] *** leont left
[06:24] *** SmokeMachine left
[06:24] *** nine left
[06:24] *** kawaii_ left
[06:24] *** sena_kun left
[06:24] *** Kaiepi left
[06:24] *** Voldenet left
[06:24] *** linkable6 left
[06:24] *** sourceable6 left
[06:24] *** bloatable6 left
[06:24] *** tellable6 left
[06:24] *** statisfiable6 left
[06:24] *** committable6 left
[06:24] *** shareable6 left
[06:24] *** benchable6 left
[06:24] *** cognominal left
[06:24] *** camelia left
[06:24] *** nebuchadnezzar left
[06:24] *** lucs left
[06:24] *** jjatria left
[06:24] *** bartolin_ left
[06:24] *** reportable6 left
[06:24] *** coverable6 left
[06:24] *** releasable6 left
[06:24] *** greppable6 left
[06:24] *** bisectable6 left
[06:24] *** squashable6 left
[06:24] *** notable6 left
[06:24] *** TempIRCLogger left
[06:24] *** sivoais left
[06:24] *** lizmat left
[06:24] *** AlexDaniel left
[06:24] *** [TuxCM] left
[06:24] *** gfldex left
[06:24] *** rba left
[06:24] *** djinni` left
[06:24] *** timo left
[06:24] *** samebchase left
[06:24] *** JRaspass left
[06:24] *** tbrowder left
[06:24] *** ugexe left
[06:24] *** zostay left
[06:24] *** rypervenche left
[06:25] *** reportable6 joined
[06:25] *** Kaiepi joined
[06:25] *** coverable6 joined
[06:25] *** unicodable6 joined
[06:25] *** releasable6 joined
[06:25] *** nativecallable6 joined
[06:25] *** evalable6 joined
[06:25] *** greppable6 joined
[06:25] *** bisectable6 joined
[06:25] *** quotable6 joined
[06:25] *** squashable6 joined
[06:25] *** notable6 joined
[06:25] *** japhb joined
[06:25] *** Voldenet joined
[06:25] *** linkable6 joined
[06:25] *** sourceable6 joined
[06:25] *** bloatable6 joined
[06:25] *** tellable6 joined
[06:25] *** statisfiable6 joined
[06:25] *** committable6 joined
[06:25] *** shareable6 joined
[06:25] *** benchable6 joined
[06:25] *** cognominal joined
[06:25] *** frost joined
[06:25] *** Geth joined
[06:25] *** vrurg_ joined
[06:25] *** kjp joined
[06:25] *** discord-raku-bot joined
[06:25] *** smarton joined
[06:25] *** samcv joined
[06:25] *** summerisle joined
[06:25] *** tbrowder joined
[06:25] *** leont joined
[06:25] *** SmokeMachine joined
[06:25] *** ugexe joined
[06:25] *** TempIRCLogger joined
[06:25] *** nine joined
[06:25] *** zostay joined
[06:25] *** kawaii_ joined
[06:25] *** AlexDaniel joined
[06:25] *** Util joined
[06:25] *** sena_kun joined
[06:25] *** jdv joined
[06:25] *** JRaspass joined
[06:25] *** djinni` joined
[06:25] *** bartolin_ joined
[06:25] *** jjatria joined
[06:25] *** lucs joined
[06:25] *** nebuchadnezzar joined
[06:25] *** camelia joined
[06:25] *** lizmat joined
[06:25] *** sivoais joined
[06:25] *** [TuxCM] joined
[06:25] *** rba joined
[06:25] *** gfldex joined
[06:25] *** samebchase joined
[06:25] *** timo joined
[06:25] *** rypervenche joined
[06:45] *** sena_kun left
[08:18] *** quotable6 left
[08:18] *** benchable6 left
[08:18] *** reportable6 left
[08:18] *** unicodable6 left
[08:18] *** notable6 left
[08:18] *** nativecallable6 left
[08:18] *** evalable6 left
[08:18] *** bisectable6 left
[08:18] *** coverable6 left
[08:18] *** squashable6 left
[08:18] *** tellable6 left
[08:18] *** committable6 left
[08:18] *** linkable6 left
[08:18] *** sourceable6 left
[08:18] *** bloatable6 left
[08:18] *** statisfiable6 left
[08:18] *** shareable6 left
[08:18] *** releasable6 left
[08:18] *** greppable6 left
[08:18] *** shareable6 joined
[08:18] *** releasable6 joined
[08:18] *** nativecallable6 joined
[08:18] *** squashable6 joined
[08:19] *** bloatable6 joined
[08:19] *** unicodable6 joined
[08:19] *** tellable6 joined
[08:19] *** bisectable6 joined
[08:19] *** reportable6 joined
[08:19] *** coverable6 joined
[08:19] *** evalable6 joined
[08:20] *** quotable6 joined
[08:20] *** linkable6 joined
[08:20] *** statisfiable6 joined
[08:20] *** committable6 joined
[08:20] *** benchable6 joined
[08:20] *** notable6 joined
[08:20] *** greppable6 joined
[08:21] *** sourceable6 joined
[09:21] *** evalable6 left
[09:21] *** statisfiable6 left
[09:21] *** committable6 left
[09:21] *** releasable6 left
[09:21] *** greppable6 left
[09:21] *** sourceable6 left
[09:21] *** squashable6 left
[09:21] *** coverable6 left
[09:21] *** bloatable6 left
[09:21] *** notable6 left
[09:21] *** quotable6 left
[09:21] *** bisectable6 left
[09:21] *** linkable6 left
[09:21] *** shareable6 left
[09:21] *** nativecallable6 left
[09:21] *** unicodable6 left
[09:21] *** reportable6 left
[09:21] *** benchable6 left
[09:21] *** releasable6 joined
[09:21] *** evalable6 joined
[09:21] *** committable6 joined
[09:21] *** bisectable6 joined
[09:21] *** statisfiable6 joined
[09:21] *** shareable6 joined
[09:22] *** reportable6 joined
[09:22] *** linkable6 joined
[09:22] *** bloatable6 joined
[09:22] *** benchable6 joined
[09:22] *** squashable6 joined
[09:22] *** unicodable6 joined
[09:23] <Geth> ¦ rakudo: f2959ad5c6 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[09:23] <Geth> ¦ rakudo: Re-imagine IterateOneWithoutPhasers.pull-one

[09:23] <Geth> ¦ rakudo: 

[09:23] <Geth> ¦ rakudo: This code path is taken for things like:

[09:23] <Geth> ¦ rakudo: 

[09:23] <Geth> ¦ rakudo:     my @a = ^10 .map( ... ).grep: ...;

[09:23] <Geth> ¦ rakudo: 

[09:23] <Geth> ¦ rakudo: This makes this loop handler a little smaller bytecode wise (so

[09:23] *** greppable6 joined
[09:23] <Geth> ¦ rakudo: better inlineable), and saves one Scalar allocation per iteration.

[09:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f2959ad5c6

[09:23] *** nativecallable6 joined
[09:23] *** coverable6 joined
[09:23] *** notable6 joined
[09:23] *** sourceable6 joined
[09:24] *** quotable6 joined
[10:06] *** Altai-man joined
[10:27] <Geth> ¦ rakudo: 7a1b729bf1 | (Elizabeth Mattijsen)++ | 4 files

[10:27] <Geth> ¦ rakudo: Narrow down test to loop phasers

[10:27] <Geth> ¦ rakudo: 

[10:27] <Geth> ¦ rakudo: When mapping / looping, the test for phasers was too large: only the

[10:27] <Geth> ¦ rakudo: NEXT / FIRST / LAST phasers have effect on the way a loop should run.

[10:27] <Geth> ¦ rakudo: 

[10:27] <Geth> ¦ rakudo: This improves code like:

[10:27] <Geth> ¦ rakudo: 

[10:28] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[10:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7a1b729bf1

[11:19] <Geth> ¦ rakudo: 52ffc12550 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[11:19] <Geth> ¦ rakudo: Make .grep(Callable) about 3% faster

[11:19] <Geth> ¦ rakudo: 

[11:19] <Geth> ¦ rakudo: Well, depending on number of iterations.  Benchmark was:

[11:19] <Geth> ¦ rakudo: 

[11:19] <Geth> ¦ rakudo:     my @a = ^10 .grep: { True }

[11:19] <Geth> ¦ rakudo: 

[11:19] <Geth> ¦ rakudo: We don't need to call "sequential-map" and its overhead, we know that

[11:19] <Geth> ¦ rakudo: the IterateOneWithoutPhasers is the one that will be selected.

[11:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/52ffc12550

[11:31] *** linkable6 left
[11:31] *** evalable6 left
[11:31] *** evalable6 joined
[11:33] *** linkable6 joined
[11:39] <Geth> ¦ rakudo: 0761d4b2d4 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[11:39] <Geth> ¦ rakudo: Fix "next value" in .grep(Callable) with >1 argument

[11:39] <Geth> ¦ rakudo: 

[11:39] <Geth> ¦ rakudo: This was forgotten when support for "next value" was added.  This makes:

[11:39] <Geth> ¦ rakudo: 

[11:39] <Geth> ¦ rakudo:     my @a = ^10 .grep: -> \a, \b { next True }

[11:39] <Geth> ¦ rakudo: 

[11:39] <Geth> ¦ rakudo: work correctly.

[11:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0761d4b2d4

[12:01] <Geth> ¦ rakudo: ddc7c9ff22 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[12:01] <Geth> ¦ rakudo: Missed one case of needing to use .has-loop-phasers

[12:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ddc7c9ff22

[12:02] *** reportable6 left
[12:03] <Geth> ¦ rakudo: gfldex++ created pull request #4449: add Assoc HyperWhatever support

[12:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4449

[12:05] *** reportable6 joined
[12:19] *** dogbert11 joined
[12:21] *** frost left
[12:36] *** squashable6 left
[12:36] *** squashable6 joined
[12:58] <Geth> ¦ rakudo: bb09bbb858 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[12:58] <Geth> ¦ rakudo: Improve performance of .grep(Callable) and cleanup

[12:58] <Geth> ¦ rakudo: 

[12:58] <Geth> ¦ rakudo: - about 1% for single arg Callable

[12:58] <Geth> ¦ rakudo: - more than 2x as fast for 2 arg Callable

[12:58] <Geth> ¦ rakudo: - a few percent for 2+ arg Callables

[12:58] <Geth> ¦ rakudo: 

[12:58] <Geth> ¦ rakudo: This gets rid of the CheatArity hack, that turned out to be only in

[12:58] <Geth> ¦ rakudo: <…commit message has 7 more lines…>

[12:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bb09bbb858

[13:11] <lizmat> bisectable6: old=2021.06 my @a = ^10 .grep: { NEXT die; True }; dd @

[13:11] <bisectable6> lizmat, On both starting points (old=2021.06 new=1bd0411) the exit code is 0 and the output is identical as well

[13:11] <bisectable6> lizmat, Output on both points: «Array @ = []␤»

[13:12] <lizmat> bisectable6: old=2021.06 my @a = ^10 .grep: { NEXT die; True }; dd @a

[13:12] <bisectable6> lizmat, On both starting points (old=2021.06 new=1bd0411) the exit code is 0 and the output is identical as well

[13:12] <bisectable6> lizmat, Output on both points: «Array @a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]␤»

[13:12] <lizmat> bisectable6: old=2021.01 my @a = ^10 .grep: { NEXT die; True }; dd @a

[13:12] <bisectable6> lizmat, Cannot find revision “2021.01” (did you mean “2021.06”?)

[13:12] <lizmat> bisectable6: old=2020.12 my @a = ^10 .grep: { NEXT die; True }; dd @a

[13:12] <bisectable6> lizmat, On both starting points (old=2020.12 new=1bd0411) the exit code is 0 and the output is identical as well

[13:12] <bisectable6> lizmat, Output on both points: «Array @a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]␤»

[13:12] <lizmat> m: ^10 .grep: { NEXT die; True }

[13:12] <camelia> rakudo-moar 5ecc8308f: ( no output )

[13:13] <lizmat> shouldn't that... die ?

[13:14] <lizmat> m: dd ^10 .grep: { next; True }

[13:14] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «().Seq␤»

[13:14] <lizmat> loop semantics *are* being applied for "next"

[13:15] <gfldex> Does Roast demand next in grep?

[13:15] <lizmat> pretty sure

[13:16] <gfldex> I just check, it does. So grep is a loop construct so a NEXT phaser should work.

[13:17] <gfldex> m: ^10 .grep: { NEXT { die }; True }

[13:17] <camelia> rakudo-moar 5ecc8308f: ( no output )

[13:17] <gfldex> Are exceptions legal in phasers?

[13:17] <lizmat> well... loop semantics are applied for "next" and "last" is what I think the official description is.

[13:17] <lizmat> I don't think phasers are mentioned in this

[13:18] <gfldex> IIRC LAST and LEAVE are special in regard of Exception.

[13:22] <gfldex> Only LEAVE is ment to be exception safe. So `NEXT die` should just throw.

[13:22] <lizmat> hmmm... of course, a LAST phaser would never work inside a .grep

[13:23] <lizmat> as it could not know when the last call was made (except with an explicit "last" statement)

[13:24] <gfldex> I'm not so sure. LAST should fire when IterationEnd is hit.

[13:24] <lizmat> yeah, but the Callable that you specify with grep, will never get called with IterationEnd

[13:25] <lizmat> and there has been thought about disallowing "next" and "last" inside .grep anyway

[13:25] <lizmat> as hit hinders hypering consistently

[13:26] <lizmat> I guess if you do need NEXT phaser functionality inside a .grep Callable, you could use LEAVE

[13:26] <gfldex> Makes it harder to read.

[13:27] <lizmat> anyways... going to mull over this while cycling before the rains are going to hit&

[13:32] <gfldex> does chaning the last line in tools/templates/RAKU_SPECS change the default language version to .e?

[13:47] *** rypervenche left
[14:13] *** rypervenche joined
[14:45] *** Voldenet left
[15:45] *** Voldenet joined
[16:15] *** melezhik joined
[16:23] *** melezhik left
[16:51] <lizmat> vrurg_ might know

[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[20:07] <gfldex> RAKU_SPECS does indeed control the default verion. I'm kinda calling from the future and can remore that `make spectest` doesn't look to bad for 6.e .

[20:38] *** evalable6 left
[20:38] *** linkable6 left
[20:38] *** linkable6 joined
[20:40] *** evalable6 joined
[20:44] *** vrurg_ is now known as vrurg

[20:46] <vrurg> Spectest passing must not depend on default language revision. Moreover, it feels to me that most of unversioned tests must get `use v6.c` because they are supposed to spec it.

[21:31] <gfldex> Test driven programming works best when you acutally run the test. :->

[21:34] <lizmat> .oO( you need to have a test for that )

[21:58] <Geth> ¦ rakudo: 38626c6860 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[21:58] <Geth> ¦ rakudo: Lose one level of indirection with .map

[21:58] <Geth> ¦ rakudo: 

[21:58] <Geth> ¦ rakudo: We no longer need the "sequential-map" sub, so remove it.  Results

[21:58] <Geth> ¦ rakudo: in about 10% less overhead for each .map.  Also be smarter about

[21:58] <Geth> ¦ rakudo: handling the :item argument.

[21:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/38626c6860

[22:00] <japhb> lizmat++  # Iteration optimization

[22:21] *** squashable6 left
[22:22] *** squashable6 joined
[22:26] *** casaca joined
[23:10] *** dogbert11 left
[23:10] *** dogbert17 joined
