[00:03] *** reportable6 joined
[00:49] *** notable6 joined
[00:49] *** benchable6 joined
[00:50] *** squashable6 joined
[01:32] *** Kaiepi left
[01:33] *** Kaiepi joined
[01:48] *** Kaiepi left
[01:48] *** Kaipi joined
[01:48] *** tellable6 joined
[01:50] *** shareable6 joined
[01:51] *** Kaipi left
[01:51] *** Merfont joined
[01:56] *** Merfont left
[01:58] *** Kaiepi joined
[02:12] *** Kaipi joined
[02:12] *** Kaiepi left
[02:48] *** Kaipi left
[02:49] *** evalable6 joined
[02:49] *** sourceable6 joined
[03:49] *** releasable6 joined
[04:45] *** raydiak left
[04:45] *** raydiak_ joined
[04:48] *** camelia left
[04:48] *** JRaspass left
[04:48] *** SmokeMachine_ left
[04:48] *** bartolin left
[04:48] *** bartolin_ joined
[04:49] *** JRaspass_ joined
[04:49] *** SmokeMachine__ joined
[04:49] *** JRaspass_ is now known as JRaspass

[06:02] *** reportable6 left
[06:04] <nine> And bartolin_`

[06:04] <nine> And bartolin_++

[06:04] *** reportable6 joined
[08:33] <Geth> ¦ rakudo/safe-snapper: 87152ebabc | (Elizabeth Mattijsen)++ | 3 files

[08:33] <Geth> ¦ rakudo/safe-snapper: Introduce -Msafe-snapper

[08:33] <Geth> ¦ rakudo/safe-snapper: 

[08:33] <Geth> ¦ rakudo/safe-snapper: Snapper functionality that allows you to press Control-c and *still*

[08:33] <Geth> ¦ rakudo/safe-snapper: get a Telemetry report.  Removes that functionality from -Msnapper.

[08:33] <Geth> ¦ rakudo/safe-snapper: 

[08:33] <Geth> ¦ rakudo/safe-snapper: Problem with Control-c safety is that it will start up the supervisor

[08:33] <Geth> ¦ rakudo/safe-snapper: thread to handle the pressing of Control-c, which causes extra load

[08:33] <Geth> ¦ rakudo/safe-snapper: and reduces the number of available threads, thus affecting the Telemetry

[08:33] <Geth> ¦ rakudo/safe-snapper: data.

[08:33] <Geth> ¦ rakudo/safe-snapper: review: https://github.com/rakudo/rakudo/commit/87152ebabc

[08:33] <Geth> ¦ rakudo: lizmat++ created pull request #4502: Introduce -Msafe-snapper

[08:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4502

[08:34] *** linkable6 left
[08:34] *** linkable6 joined
[08:36] *** frost joined
[09:01] *** linkable6 left
[09:03] *** linkable6 joined
[10:03] *** raydiak_ is now known as raydiak

[10:05] *** Xliff joined
[10:37] *** sena_kun joined
[11:17] <lizmat> notable6: weekly

[11:17] <notable6> lizmat, 7 notes: https://gist.github.com/1dd129040d3f19985785f71ef65537c2

[11:18] <lizmat> notable6: weekly reset

[11:18] <notable6> lizmat, Moved existing notes to “weekly_2021-08-23T11:18:09Z”

[12:02] *** reportable6 left
[12:09] *** frost left
[12:14] <timo> https://avi.im/blag/2021/fast-sqlite-inserts/ i wonder if anybody wants to take this as bait :)

[12:15] <timo> lizmat: how does snapper without safe- prevent the supervisor thread from spawning? i thought it snaps at fixed intervals, which also requires a ThreadPoolScheduler or similar?

[12:15] <lizmat> it starts its own thread, outside of the ThreadPiool

[12:16] <lizmat> *ThreadPool

[12:16] <lizmat> and does a sleep X in there

[12:17] <lizmat> and /me is not taking the bait :-)

[12:18] <timo> ah, smort

[12:20] *** stradivarius joined
[12:22] <stradivarius> timo: funny that python is slow at loops (it's as slow as perl) considering that the function level variable scope could have theoretically saved the creation of a frame for each cycle (that is what consumes time in Perl). Or am I missing something?

[12:26] *** frost joined
[12:27] *** stradivarius left
[12:29] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/08/23/2021-34-stabler/

[12:29] *** guffiardon joined
[12:40] <timo> we're core devs, so in theory we can directly use the signal nqp op to push data into a channel we monitor from a regular thread rather than a thread pool scheduler

[12:41] <timo> guffiardon: i'm not sure about the implementation of loops in cpython

[12:46] <guffiardon> timo: as someone that often fell the need of doing mathematical operations in loops, I often wondered why Python loops are so slow.

[12:46] <guffiardon> for perl I asked core devs and they told me it's because of frame creation

[12:47] <guffiardon> but for python I don't really see this as an explanation, unless they made a mess somewhere else that still require that

[12:49] <guffiardon> people advise to use Julia for those kind of operation, that is semi-compiled, but in fact it is often possible to express loops through heavily optimized matrix-vector operations

[12:49] <guffiardon> and I stick to python to keep a decent ecosystem

[12:50] <timo> rakudo on moarvm can get around the frame creation, especially if the loop body itself is simple

[12:50] <guffiardon> I noticed that

[12:51] <timo> if you have interesting benchmarks in the form of code that you think should be fast but that turn out not to be, we're always interested in those

[13:05] *** reportable6 joined
[13:10] *** frost left
[13:11] <guffiardon> timo: yea quite frankly I think it is a bit still early for that, I'm following your interesting developments

[13:19] <guffiardon> about your article, they could have tried to compare Python to Node. It would have been more honest than comparing apples to oranges

[13:19] <guffiardon> your article = the article you linked

[13:21] <timo> right

[13:21] <timo> v8 is also pretty well optimized

[13:21] <timo> personally, i would have put the random value generation into the sql statements perhaps. i imagine there's some functions in sqlite that let you generate the table they want from a single statement

[13:50] <nine> Like: insert into user select value, abs(random() % 900000) + 100000, (abs(random()) % 3 + 1) * 5, (abs(random()) % 2) from generate_series(1, 100000000, 1);

[13:55] <timo> it does look like the original wants leading zeroes as well

[13:56] <timo> but yeah, basically

[14:06] *** Xliff left
[14:14] *** guffiardon left
[15:02] *** camelia joined
[16:02] *** evalable6 left
[16:34] *** linkable6 left
[16:36] *** linkable6 joined
[17:04] *** evalable6 joined
[17:14] *** b2gills left
[17:15] *** b2gills joined
[17:30] *** Kaiepi joined
[17:46] <Geth> ¦ nqp/new-disp: 2908bbd493 | (Stefan Seifert)++ | 2 files

[17:46] <Geth> ¦ nqp/new-disp: Revert "Bring hllize tests into the dispatcher world"

[17:46] <Geth> ¦ nqp/new-disp: 

[17:46] <Geth> ¦ nqp/new-disp: This reverts commit cb740482345cb84befb436951903dd42a5289137.

[17:46] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/2908bbd493

[17:46] <Geth> ¦ nqp/new-disp: 1c31ba867b | (Stefan Seifert)++ | 6 files

[17:46] <Geth> ¦ nqp/new-disp: Split out dispatcher based tests into moar vs jvm editions

[17:46] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/1c31ba867b

[17:58] <Geth> ¦ rakudo/new-disp: e7bd8a61f3 | (Stefan Seifert)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[17:58] <Geth> ¦ rakudo/new-disp: Hide my long past as a Perl programmer (remove perlisms)

[17:58] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/e7bd8a61f3

[18:03] *** reportable6 left
[18:06] *** sena_kun left
[19:07] *** japhb left
[19:34] *** japhb joined
[20:05] *** reportable6 joined
[21:20] *** japhb left
[21:56] *** japhb joined
[23:02] *** linkable6 left
[23:02] *** coverable6 left
[23:02] *** unicodable6 left
[23:02] *** nativecallable6 left
[23:02] *** reportable6 left
[23:02] *** evalable6 left
[23:02] *** releasable6 left
[23:02] *** benchable6 left
[23:02] *** squashable6 left
[23:02] *** quotable6 left
[23:02] *** greppable6 left
[23:02] *** notable6 left
[23:02] *** shareable6 left
[23:02] *** bloatable6 left
[23:02] *** sourceable6 left
[23:02] *** statisfiable6 left
[23:02] *** tellable6 left
[23:02] *** bisectable6 left
[23:02] *** committable6 left
[23:03] *** reportable6 joined
[23:03] *** nativecallable6 joined
[23:03] *** coverable6 joined
[23:03] *** quotable6 joined
[23:03] *** shareable6 joined
[23:03] *** greppable6 joined
[23:03] *** notable6 joined
[23:03] *** linkable6 joined
[23:04] *** committable6 joined
[23:04] *** unicodable6 joined
[23:04] *** benchable6 joined
