[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:52] *** Skarsnik left
[01:25] <[Coke]> https://github.com/jonathanstowe/URI-Template/issues/3 - looks like something a blin run would have caught.
[01:25] <[Coke]> ah. here is the channel that discussed the URI error.
[01:26] <[Coke]> I opened a ticket for someone to close about it. :)
[01:38] <[Coke]> I noted the version I was using if someone needs a bisect point.
[02:09] <[Coke]> also, I got the URL for the wrong repo. Use japhb's ticket: https://github.com/raku-community-modules/URI/issues/48
[02:58] *** Altai-man joined
[02:59] *** sena_kun left
[05:04] *** sourceable6 left
[05:04] *** committable6 left
[05:04] *** releasable6 left
[05:04] *** benchable6 left
[05:04] *** linkable6 left
[05:04] *** unicodable6 left
[05:04] *** notable6 left
[05:04] *** squashable6 left
[05:04] *** quotable6 left
[05:04] *** nativecallable6 left
[05:04] *** greppable6 left
[05:04] *** bisectable6 left
[05:04] *** statisfiable6 left
[05:04] *** evalable6 left
[05:04] *** tellable6 left
[05:04] *** reportable6 left
[05:04] *** bloatable6 left
[05:04] *** coverable6 left
[05:04] *** shareable6 left
[05:04] *** linkable6 joined
[05:04] *** nativecallable6 joined
[05:05] *** statisfiable6 joined
[05:05] *** greppable6 joined
[05:05] *** tellable6 joined
[05:05] *** squashable6 joined
[05:05] *** committable6 joined
[05:05] *** evalable6 joined
[05:06] *** coverable6 joined
[05:06] *** shareable6 joined
[05:06] *** bloatable6 joined
[05:07] *** sourceable6 joined
[06:04] *** benchable6 joined
[06:05] *** quotable6 joined
[06:05] *** reportable6 joined
[06:06] *** unicodable6 joined
[07:05] *** notable6 joined
[07:06] *** bisectable6 joined
[07:06] *** releasable6 joined
[07:42] <[Tux]> Rakudo v2021.10-47-gab02205ed (v6.d) on MoarVM 2021.10-26-g770e82e48
[07:42] <[Tux]> csv-test-xs-20      0.373 -  0.373
[07:42] <[Tux]> test-t --race       0.969 -  0.994
[07:42] <[Tux]> csv-ip5xs           1.362 -  1.373
[07:42] <[Tux]> test-t              1.545 -  1.575
[07:42] <[Tux]> csv-parser          3.813 -  3.958
[07:42] <[Tux]> test                6.813 -  7.018
[07:42] <[Tux]> test-t-20 --race    7.422 -  7.764
[07:42] <[Tux]> csv-ip5xs-20       15.351 - 15.898
[07:42] <[Tux]> test-t-20          22.666 - 22.892
[08:06] *** evalable6 left
[08:06] *** linkable6 left
[08:07] <Kaiepi> isn't there an issue wrt inferring list element types in signatures somewhere?
[08:07] <Kaiepi> the .all ~~ ... idiom isn't so hot for lists in particular, but idk if why that is has already been brought up there
[08:07] *** evalable6 joined
[08:08] *** linkable6 joined
[08:47] *** childlikempress joined
[08:47] *** Kaipi joined
[08:47] *** moon-child left
[08:50] *** Kaiepi left
[08:58] *** Kaipi left
[08:58] *** Kaiepi joined
[09:00] *** Skarsnik joined
[09:00] *** childlikempress is now known as moon-child
[09:00] <lizmat> Files=1349, Tests=117859, 309 wallclock secs (34.93 usr  9.29 sys + 4264.78 cusr 364.97 csys = 4673.97 CPU)
[09:22] *** Kaiepi left
[09:22] *** Kaiepi joined
[09:32] <Geth> ¦ rakudo: ce0d31fb91 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6
[09:32] <Geth> ¦ rakudo: Make sure IO::Path.slurp returns failures
[09:32] <Geth> ¦ rakudo: 
[09:32] <Geth> ¦ rakudo: Fixes #4619
[09:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ce0d31fb91
[09:33] *** linkable6 left
[10:23] <nine> Huh...trying to teach our developers at work I'm surprisded to find that exception handling and especially failures are not as well documented as needed. E.g. I cannot find any mention at all that CATCH sets $_ to the exception object. Some of the examples demonstrate this but only indirectly by using shorthand notation for calling methods on $_
[10:24] <nine> Failures are not mentioned at all in the exception topic and are documented only in https://docs.raku.org/type/Failure and that's a very technical and dense description that even I need to concentrate hard to follow.
[10:25] <nine> Neither the docs on Exception, nor on Failure link to https://docs.raku.org/language/exceptions
[10:26] <lizmat> https://github.com/Raku/doc/issues/new/choose   ?
[10:34] *** evalable6 left
[10:36] *** linkable6 joined
[10:36] *** evalable6 joined
[10:44] <Geth> ¦ rakudo/DEPRECATE-smartmatch-on-Junction: 8036bf782c | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6
[10:44] <Geth> ¦ rakudo/DEPRECATE-smartmatch-on-Junction: DEPRECATE smartmatching on Junctions
[10:44] <Geth> ¦ rakudo/DEPRECATE-smartmatch-on-Junction: 
[10:44] <Geth> ¦ rakudo/DEPRECATE-smartmatch-on-Junction: In response to https://github.com/Raku/problem-solving/issues/297
[10:44] <Geth> ¦ rakudo/DEPRECATE-smartmatch-on-Junction: this commit DEPRECATEs the use of Junctions on the left hand-side
[10:44] <Geth> ¦ rakudo/DEPRECATE-smartmatch-on-Junction: of a smart match, and as an argument to .ACCEPTS.  Dis-allowing
[10:45] <Geth> ¦ rakudo/DEPRECATE-smartmatch-on-Junction: of a smart match, and as an argument to .ACCEPTS.  Dis-allowing
[10:45] <Geth> ¦ rakudo/DEPRECATE-smartmatch-on-Junction: this feature has quite a bit of spectest fallout, so this will need
[10:45] <Geth> ¦ rakudo/DEPRECATE-smartmatch-on-Junction: to be looked at more carefully in the future.
[10:45] <Geth> ¦ rakudo/DEPRECATE-smartmatch-on-Junction: review: https://github.com/rakudo/rakudo/commit/8036bf782c
[10:45] <Geth> ¦ rakudo: lizmat++ created pull request #4620: DEPRECATE smartmatching on Junctions
[10:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4620
[11:22] <gfldex> m: my $a = 42; say $a.not-there(); CATCH { when X::Method::NotFound { .resume } }
[11:22] <camelia> rakudo-moar ce0d31fb9: OUTPUT: «Already set resume init args for this dispatcher␤  in block <unit> at <tmp> line 1␤␤»
[11:22] <gfldex> Is this a newdisp regression?
[11:23] <timo> committable6: 2021.04 my $a = 42; say $a.not-there(); CATCH { when X::Method::NotFound { .resume } }
[11:23] <committable6> timo, ¦2021.04: «Method 'not-there' not found for invocant of class 'Int'␤  in block <unit> at /tmp/L8xUi07Xoe line 1␤␤ «exit code = 1»»
[11:26] <gfldex> pre newdisp the error was: "Cannot find method 'gist' on 'BOOTException': no method cache and no .^find_method in block <unit> at - line 1
[11:27] <gfldex> .resume is of limited use here anyway, because it doesn't take a "return"-value.
[11:34] <gfldex> Should I let jnthn know?
[11:47] <lizmat> yeah, perhaps mention it on #moarvm
[11:55] *** sena_kun joined
[12:01] <Geth> ¦ rakudo: jnthn self-assigned A LEAVE in nested scope in a sub can cause loss of the return value https://github.com/rakudo/rakudo/issues/4521
[12:02] *** reportable6 left
[12:05] *** linkable6 left
[12:05] *** reportable6 joined
[12:06] *** linkable6 joined
[12:06] <sena_kun> m: Rat(Inf).say;
[12:06] <camelia> rakudo-moar ce0d31fb9: OUTPUT: «Attempt to divide by zero when coercing Rational to Str␤  in block <unit> at <tmp> line 1␤␤»
[12:39] *** Xliff joined
[13:10] *** vrurg_ joined
[13:12] *** vrurg left
[13:15] *** Xliff_ joined
[13:18] *** Xliff left
[14:07] *** TempIRCLogger left
[14:08] *** TempIRCLogger joined
[14:36] *** melezhik joined
[14:38] <Geth> ¦ nqp: 84fa661070 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION
[14:38] <Geth> ¦ nqp: Bump NQP to get the latest MoarVM fixes
[14:38] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/84fa661070
[14:55] <Geth> ¦ rakudo: b258de0bf4 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION
[14:55] <Geth> ¦ rakudo: Bump Rakudo to get the latest MoarVM fixes
[14:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b258de0bf4
[15:23] *** [Coke] left
[15:37] *** vrurg_ is now known as vrurg
[15:41] <Geth> ¦ rakudo: e98e17da7d | (Elizabeth Mattijsen)++ | 3 files
[15:41] <Geth> ¦ rakudo: Make sure ParallelSequence is included in shas
[15:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e98e17da7d
[15:57] *** [Coke] joined
[16:38] *** nebuchadnezzar left
[16:55] *** melezhik left
[17:13] *** dogbert11 joined
[17:13] *** dogbert17 left
[18:01] *** Kaiepi left
[18:02] *** Kaiepi joined
[18:15] *** sena_kun left
[19:21] *** Skarsnik left
[19:25] *** melezhik joined
[19:33] *** melezhik left
[20:26] <lizmat> m: dd "foo bar".match: / b <( /
[20:26] <camelia> rakudo-moar e98e17da7: OUTPUT: «Match.new(:orig("foo bar"), :from(5), :pos(5))␤»
[20:26] <lizmat> I wonder whether there's a reason for <( as the last token, to not take the rest of the string
[20:26] <lizmat> m: dd "foo bar".match: / )> b /
[20:26] <camelia> rakudo-moar e98e17da7: OUTPUT: «Match.new(:orig("foo bar"), :from(4), :pos(5))␤»
[20:27] <lizmat> m: say "foo bar".match: / )> b /
[20:27] <camelia> rakudo-moar e98e17da7: OUTPUT: «｢｣␤»
[20:27] <lizmat> same for that one: why note take all from the start of the string ?
[20:29] <lizmat> *not
[21:01] *** evalable6 left
[21:01] *** linkable6 left
[21:02] *** evalable6 joined
[21:10] *** djinni`_ left
[21:12] *** djinni` joined
[21:23] *** _Xliff_ joined
[21:23] *** Xliff_ left
[21:25] *** rba_ joined
[21:28] *** rba left
[21:28] *** rba_ is now known as rba
[22:04] *** linkable6 joined
[22:30] *** Kaiepi left
[22:32] *** Kaiepi joined
[22:49] *** MasterDuke left
[23:55] *** nebuchadnezzar joined
