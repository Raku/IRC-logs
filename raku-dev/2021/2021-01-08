[00:07] *** sortiz left
[00:21] *** JRaspass left
[00:25] *** frost-lab joined
[00:44] *** frost-lab left
[00:56] *** frost-lab joined
[02:04] *** Kaeipi joined
[04:11] *** MasterDuke left
[07:29] *** squashable6 left
[07:30] *** squashable6 joined
[07:54] *** domidumont joined
[08:02] *** Altai-man joined
[08:49] *** JRaspass joined
[09:42] *** sena_kun joined
[09:44] *** Altai-man left
[10:08] *** squashable6 left
[10:09] *** squashable6 joined
[11:48] <Geth> ¦ rakudo: lizmat self-assigned REPL repeating statements https://github.com/rakudo/rakudo/issues/4160

[12:07] *** jmerelo joined
[12:07] <jmerelo> #FOSSAsia call for speakers is open https://eventyay.com/e/fa96ae2c/cfs

[12:07] <jmerelo> 15 minute talks, + 10 minute interaction, in any language you want. Great chance to introduce Raku! 

[12:08] <timotimo> sounds like i need to brush up on my lojban

[12:08] <timotimo> lo gerku ku vofli ue sai

[12:26] <nwc10> yes, first thing I thought was "Esparanto?"

[12:30] <jmerelo> In the Perl/Raku world, I would say Latin is the most widespread.

[12:31] <jmerelo> So I'd go for that... 

[13:41] *** Altai-man joined
[13:44] *** sena_kun left
[14:08] *** jmerelo left
[14:28] <Geth> ¦ roast: 5f67d2a474 | (Elizabeth Mattijsen)++ | 2 files

[14:28] <Geth> ¦ roast: Tweak checks on error messages to match array slice re-imagination

[14:28] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/5f67d2a474

[14:28] <Geth> ¦ roast: f708802a2d | (Elizabeth Mattijsen)++ | S32-array/exists-adverb.t

[14:28] <Geth> ¦ roast: Fix improper test on :exists:!v validity for array slice re-imagination

[14:28] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f708802a2d

[14:28] <Geth> ¦ roast: b901130854 | (Elizabeth Mattijsen)++ | S32-list/seq.t

[14:29] <Geth> ¦ roast: Array slice assignment is no longer lazy after array slice re-imagination

[14:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b901130854

[14:32] <Geth> ¦ rakudo: ca7bc91e71 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 22 files

[14:32] <Geth> ¦ rakudo: Re-imagine array slicing, fixing issues, between 2x and 10x faster (#4131)

[14:32] <Geth> ¦ rakudo: 

[14:32] <Geth> ¦ rakudo: This commit makes array slice accesses and assignment between 2x 

[14:32] <Geth> ¦ rakudo: and 10x as fast *and* fixes several issues found in the previous

[14:32] <Geth> ¦ rakudo: implementation.  It also creates a framework for handling adverbs that

[14:32] <Geth> ¦ rakudo: are allowed with postcircumfix adverbs (in a separate source-file Rakudo/Internals/PostcircumfixAdverbs).

[14:32] <Geth> ¦ rakudo: 

[14:32] <linkable6> RAKUDO#4131 [closed]: https://github.com/rakudo/rakudo/pull/4131 Re-imagine array slicing, fixing issues, between 2x and 10x faster

[14:32] <Geth> ¦ rakudo: <…commit message has 16 more lines…>

[14:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ca7bc91e71

[14:42] *** frost-lab left
[14:55] *** domidumont left
[14:55] *** domidumont joined
[15:09] *** b2gills joined
[15:21] *** patrickb joined
[17:42] *** sena_kun joined
[17:43] *** Altai-man left
[17:44] *** domidumont left
[17:46] *** lucasb joined
[18:01] *** JRaspass left
[18:41] <vrurg> .

[18:41] <tellable6> 2021-01-08T16:59:16Z #raku <[Coke]> vrurg:  my method private_method_table(Metamodel::PrivateMethodContainer: $obj) # this is now a compile time error in rakudo, is this change a bug?

[18:43] <vrurg> [Coke]: with regard to the changes in docs, I think it's the right thing to do.

[18:47] <[Coke]> +1

[18:47] <[Coke]> (already done)

[18:48] <vrurg> [Coke]: BTW, I'm not sure it ever compiled under rakudo.

[18:52] <[Coke]> we've had that code in the docs for years, with an xt/ test that was passing

[18:53] <[Coke]> https://gist.github.com/Whateverable/68c5c4fdb1a2b168437329a6dbfd36bb complains about the "missing block", and in the test, we add enough around the method (including a class) that the block is there.

[18:54] <[Coke]> the line as shown throws a compile error before we even get as far as noting the block.

[19:13] <vrurg> [Coke]: actually, the compilation error is a bug. I'd like to ask you to open an issue on it. I see what the problem is, but not sure what'd be the best way to fix it.

[19:20] <dogbert17> m: say (1,2,3; 4,5,6; 7,8,9)[*;{0,1}]

[19:20] <camelia> rakudo-moar ca7bc91e7: OUTPUT: «(3 6 9)␤»

[19:35] *** MasterDuke joined
[19:46] *** JRaspass joined
[19:56] <lizmat> dogbert17: looks like the return value is not interpreted as a list, when it should

[19:57] <lizmat> a 2 elem list is returned, and it handles it as [*;2]

[20:28] <Geth> ¦ rakudo: c039b28fc8 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[20:28] <Geth> ¦ rakudo: Streamline some iterator setups

[20:28] <Geth> ¦ rakudo: 

[20:28] <Geth> ¦ rakudo: You can assign attributes in a signature like:

[20:28] <Geth> ¦ rakudo: 

[20:28] <Geth> ¦ rakudo:     method foo($!foo,$!bar)

[20:28] <Geth> ¦ rakudo: 

[20:28] <Geth> ¦ rakudo: but this costs 2 Scalar allocations for each invocation.  In normal

[20:28] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[20:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c039b28fc8

[20:30] <lizmat> m: my %h = "a" .. "j" Z=> 1..*; dd %h{"a","b",("c","d")}

[20:30] <camelia> rakudo-moar ca7bc91e7: OUTPUT: «(1, 2, Any)␤»

[20:30] <lizmat> yuck

[20:31] <timotimo> but how would you access entries that are keyed on a list?

[20:31] <lizmat> m: my @a = <a b c d e f g h i j>; dd @a[0,1,(2,3)]

[20:31] <camelia> rakudo-moar ca7bc91e7: OUTPUT: «("a", "b", ("c", "d"))␤»

[20:31] <lizmat> it should iterate the list, like array slices do ?

[20:31] <timotimo> that works because indices can only be numbers

[20:32] <timotimo> hm.

[20:32] <timotimo> you're right, you can already %foo<a b c> and get a, b, c

[20:33] <timotimo> this is tricky

[20:33] <lizmat> tricky how?

[20:33] <lizmat> for the core developer?

[20:33] <timotimo> to decide how it should be handled

[20:34] <lizmat> same as with array slices?

[20:34] <lizmat> m: my %h = "a" .. "j" Z=> 1..*; dd %h{"a","b",("c","d")}    # should be (1,2,(3,4))

[20:34] <camelia> rakudo-moar ca7bc91e7: OUTPUT: «(1, 2, Any)␤»

[20:34] <timotimo> m: my %a; %a{(1,2),} = "hi"; %a{(2,3),} = "bye"; dd %a; %a{(1,2),(2,3)} = 99, 100; dd %a

[20:34] <camelia> rakudo-moar ca7bc91e7: OUTPUT: «Hash %a = {"1 2" => "hi", "2 3" => "bye"}␤Hash %a = {"1 2" => 99, "2 3" => 100}␤»

[20:34] <timotimo> m: my %a{Any}; %a{(1,2),} = "hi"; %a{(2,3),} = "bye"; dd %a; %a{(1,2),(2,3)} = 99, 100; dd %a

[20:34] <camelia> rakudo-moar ca7bc91e7: OUTPUT: «Hash[Any,Any] %a = (my Any %{Any} = (1, 2) => "hi", (2, 3) => "bye")␤Hash[Any,Any] %a = (my Any %{Any} = (1, 2) => 99, (1, 2) => "hi", (2, 3) => "bye", (2, 3) => 100)␤»

[20:35] <timotimo> ok they aren't value types

[20:35] <lizmat> nope

[20:35] <timotimo> but there are value types that are iterable

[20:36] <lizmat> not in core, I don't think

[20:37] <timotimo> i don't feel very strongly about this, since i don't know if anybody uses this

[20:37] <timotimo> m: my %a{Any}; %a{set(1,2),} = "hi"; %a{set(2,3),} = "bye"; dd %a; %a{set(1,2),set(2,3)} = 99, 100; dd %a

[20:37] <camelia> rakudo-moar ca7bc91e7: OUTPUT: «Hash[Any,Any] %a = (my Any %{Any} = Set.new(1,2) => "hi", Set.new(3,2) => "bye")␤Hash[Any,Any] %a = (my Any %{Any} = Set.new(1,2) => 99, Set.new(3,2) => 100)␤»

[20:37] <timotimo> here's an iterable value type, right?

[20:39] <lizmat> ah, like that... I guess you're right then

[20:40] <timotimo> i'm not happy about it :)

[20:40] <lizmat> perhaps it should be different for object hashes 

[20:41] <timotimo> i was thinking to differentiate on whether the type is iterable or not, but i think you could just have a subtype that is iterable and things won't work any more like i imagined

[20:42] <lizmat> m: my %h = a => 42, "b c" => 666; dd %h{"a",("b","c")}   # that doesn't feel right either

[20:42] <camelia> rakudo-moar ca7bc91e7: OUTPUT: «(42, 666)␤»

[20:55] <lizmat> afk&

[20:58] *** Xliff joined
[21:09] <Xliff> What does "Failed to set temporary DH" mean from IO::Async::SSL?

[21:09] <Xliff> jnthn: ^^

[21:09] <tellable6> Xliff, I'll pass your message to jnthn

[21:10] <timotimo> hmm, related to diffie hellman key exchange?

[21:10] <Xliff> Could  be... but why would it fail? I would expect the key stuff to be done in memory.

[21:11] <Xliff> Anway there is an upgrade, so I hope that will fix it.

[21:11] <Xliff> How are you doing timo^2?

[21:11] <timotimo> i'm okay

[21:11] <Xliff> That's good!

[21:11] <timotimo> my mind boggles from the new details i'm seeing from the USA thing

[21:11] <timotimo> but i did some good work today

[21:12] <timotimo> how are you?

[21:12] <Xliff> Hah! I'm living it. 

[21:12] <Xliff> 4 years. I'm so numb.

[21:12] <Xliff> I'm doing OK. Got another project I need to solve a segfault for.

[21:13] <Xliff> Almost 480,000 lines now.

[21:13] <timotimo> wow

[21:13] <Xliff> Also working on my first Raku project at $dayJob

[21:13] <Xliff> Hence the IO::Socket::Async::SSL thing

[21:13] <Xliff> Trying to run Cro as HTTPS and things are vexing me.

[21:14] <timotimo> nice! but then also: oh no

[21:15] <timotimo> worst case, you can use a web server in front of the cro instance to terminate TLS connections for you

[21:15] <timotimo> since it's very common already to run any kind of web app behind a reverse proxy

[21:36] *** maggotbrain left
[21:41] *** Altai-man joined
[21:43] *** sena_kun left
[21:44] <dogbert17> lizmat: I took the example from R#2488

[21:44] <linkable6> R#2488 [open]: https://github.com/rakudo/rakudo/issues/2488 Multi-dimensional slice with Callable returning Iterable

[21:45] <dogbert17> btw, are you still interested in https://github.com/Raku/roast/pull/712

[22:00] *** patrickb left
[22:03] *** Altai-man left
[22:34] <[Coke]> vrurg: https://github.com/rakudo/rakudo/issues/4162

[22:34] <vrurg> [Coke]: Just've got the email. :)

[22:34] <vrurg> Thanks!

[22:34] <[Coke]> np, this was the easy part.

[22:37] <Geth> ¦ rakudo: vrurg self-assigned metamodel role invocant compilation bug. https://github.com/rakudo/rakudo/issues/4162

[23:08] *** maggotbrain joined
