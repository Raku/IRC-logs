[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:06] <Xliff_> sena_kun: Are you talking about #4570? It's still open.

[00:14] *** linkable6 joined
[00:56] *** frost joined
[02:22] *** ggoebel left
[03:39] *** linkable6 left
[03:39] *** quotable6 left
[03:39] *** greppable6 left
[03:39] *** statisfiable6 left
[03:39] *** reportable6 left
[03:39] *** evalable6 left
[03:39] *** squashable6 left
[03:39] *** bisectable6 left
[03:39] *** notable6 left
[03:39] *** sourceable6 left
[03:39] *** committable6 left
[03:39] *** nativecallable6 left
[03:39] *** benchable6 left
[03:39] *** coverable6 left
[03:39] *** shareable6 left
[03:39] *** tellable6 left
[03:39] *** unicodable6 left
[03:39] *** releasable6 left
[03:39] *** bloatable6 left
[03:39] *** nativecallable6 joined
[03:39] *** tellable6 joined
[03:39] *** benchable6 joined
[03:39] *** notable6 joined
[03:40] *** statisfiable6 joined
[03:40] *** sourceable6 joined
[03:40] *** committable6 joined
[03:42] *** reportable6 joined
[03:42] *** bisectable6 joined
[03:42] *** shareable6 joined
[04:39] *** releasable6 joined
[04:39] *** evalable6 joined
[04:42] *** linkable6 joined
[04:42] *** coverable6 joined
[04:42] *** unicodable6 joined
[05:39] *** bloatable6 joined
[05:40] *** MasterDuke left
[05:41] *** quotable6 joined
[05:41] *** squashable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[07:12] *** MasterDuke joined
[07:41] *** greppable6 joined
[08:47] <Xliff_> sena_kun: segfault (#4570) is still occurring

[08:47] <Xliff_> (BTW...Good morning, #cro -- how rude of me!)

[09:29] *** linkable6 left
[09:29] *** evalable6 left
[09:34] *** Kaiepi left
[09:34] *** Kaiepi joined
[09:54] <Kaiepi> o/

[09:54] <Kaiepi> pr for #4558's going up soon

[09:56] <Kaiepi> while working on it i looked into what needs doing in order to get generic return values in signatures

[09:58] <Kaiepi> spectest seems favourable to Metamodel::GenericHOW delegating method calls to Mu and accepting all typechecks on the RHS of a smartmatch, but the compiler's doesn't do method calls on generics (easy fix), and "my ::T $" doesn't install a symbol for T at the very least

[09:59] <Kaiepi> and role typechecking becomes a problem again

[10:00] <Kaiepi> s/compiler's/compiler/

[10:02] <[Tux]> Rakudo v2021.09-267-g8d1f24f9c (v6.d) on MoarVM 2021.09-641-gf7d6bc614

[10:02] <[Tux]> csv-test-xs-20      0.385 -  0.390

[10:02] <[Tux]> test-t --race       1.100 -  1.102

[10:02] <[Tux]> csv-ip5xs           1.459 -  1.578

[10:02] <[Tux]> test-t              1.729 -  1.856

[10:02] <[Tux]> csv-parser          4.901 -  5.368

[10:02] <[Tux]> test                7.484 -  7.737

[10:02] <[Tux]> test-t-20 --race    8.651 -  9.504

[10:02] <[Tux]> csv-ip5xs-20       16.449 - 17.809

[10:02] <[Tux]> test-t-20          25.852 - 26.226

[10:02] <Kaiepi> forgot to mention, generic return values don't work because T !=:= the comparand's type in the last line of Signature.ACCEPTS

[10:03] <Kaiepi> besides all that

[10:21] <Geth> ¬¶ rakudo: Kaiepi++ created pull request #4573: Fix handling of constrained Mu parameters in signature smartmatching

[10:21] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/4573

[10:22] <Geth> ¬¶ roast: Kaiepi++ created pull request #760: Add more tests for type constraints in signature smartmatches

[10:22] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/pull/760

[10:31] *** evalable6 joined
[10:33] *** ggoebel joined
[10:50] <lizmat> sometimes I miss something like:

[10:50] <lizmat> sub foo($a //= 42)

[10:51] <lizmat> aka, if $a is not specified, or it received a non-defined value, then assign the default

[10:51] <lizmat> similarly for attributes:

[10:51] <lizmat> has $foo //=  42

[10:55] <sena_kun> releasable6, status

[10:55] <releasable6> sena_kun, Next release in ‚âà8 days and ‚âà8 hours. 5 blockers. Changelog for this release was not started yet

[10:55] <releasable6> sena_kun, Details: https://gist.github.com/ece92e268cee2391249c9dbbb84e507d

[11:05] *** ggoebel left
[11:27] *** squashable6 left
[11:32] <Kaiepi> lizmat, with metaops for assignments in parameters, maybe `sub foldr(&f, \init, +result [**@xs is raw] [R[[&f]]]= |@xs, init) { result }` would be valid?

[11:32] <Kaiepi> could make for some weird golfs

[11:33] <lizmat> I was just thinking about //=  and possibly //:=

[11:34] <Kaiepi> fair

[11:34] <lizmat> has $foo := 42    as shorthand for:  $foo is built(:bind) = 42

[11:35] <lizmat> as another syntactic sugar

[11:35] <Kaiepi> that would be nice

[11:35] <lizmat> I think we need to wait for RakuAST to become more fleshed out, but yes  :-)

[11:41] <Kaiepi> forgot slurpies would need defaults in order to write foldr in that way

[11:41] <Kaiepi> m: sub foldr(&f, \init, +result [**@xs is raw] = [R[[&f]]] |@xs, init) { result }

[11:41] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot put default on slurpy parameter result‚ê§at <tmp>:1‚ê§------> 3lt [**@xs is raw] = [R[[&f]]] |@xs, init7‚èè5) { result }‚ê§    expecting any of:‚ê§        constraint‚ê§        postfix‚ê§¬ª

[11:42] <Kaiepi> *$ is another feature i've seen in the design docs that would be cool to have when RakuAST comes around

[11:43] <lizmat> what was that again ?

[11:43] <lizmat> feels linenoisy though

[11:44] <Kaiepi> yeah...

[11:44] <Kaiepi> :(**@head, *$tail)

[11:44] <Kaiepi> er

[11:44] <Kaiepi> :(**@init, tail)

[11:45] <Kaiepi> *$tail

[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:03] <lizmat> github complains about this for one of my modules: /Users/runner/hostedtoolcache/rakudo/2021.09-01/x86_64/bin/rakudo is loading libcrypto in an unsafe way

[12:04] <lizmat> on MacOS...  any idea what that is about?

[12:04] <lizmat> hmmm... probably Cro related, should probably ask there

[12:45] <MasterDuke> wonder if we should switch away from sha1 https://duo.com/decipher/sha-1-fully-and-practically-broken-by-new-collision

[12:56] <lizmat> you mean in core?

[12:56] <lizmat> seems like a very unlikely attack vector ?

[12:57] <lizmat> .oO( famous last words :-)

[13:04] <MasterDuke> yeah. sure it's unlikely, but it probably wouldn't be too terribly difficult to switch to something like sha256

[13:06] <lizmat> well, implement a nqp::sha256 op then,   :-)

[13:07] <lizmat> and then *that* could be potentially exposed at the language level ?

[13:32] *** linkable6 joined
[13:41] *** squashable6 joined
[13:53] *** frost left
[14:18] <timo> why stay at 256 when there is sha3

[14:22] <lizmat> CPU?

[14:34] <timo> hm.

[15:13] *** [Tux] left
[15:22] *** [Tux] joined
[15:22] *** vrurg left
[15:40] <leont> sha3 isn't necessarily better or worse than sha2

[15:42] <lizmat> and definitely not for what we would use it for in the core, now?

[15:43] * leont has no idea what it's used for in core

[15:46] <ugexe> used a lot for generating ids that are safe filenames

[15:50] <lizmat> and for some .WHICH cases

[15:51] <lizmat> m: dd (1,2,3).Set.WHICH

[15:51] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´ValueObjAt.new("Set|C31107F1B1119ABCDC812ED45D2368222884B304")‚ê§¬ª

[16:08] *** AlexDaniel left
[16:08] *** CIAvash left
[16:12] *** AlexDaniel joined
[16:20] *** CIAvash joined
[16:36] <Xliff_> Has there been any movement on #4570?

[16:48] *** melezhik joined
[17:20] *** vrurg joined
[17:22] <Xliff_> Temporary workaround found, please see https://github.com/rakudo/rakudo/issues/4570

[17:22] <Xliff_> Maybe that will help with finding the root cause of the SEGV?

[18:02] *** reportable6 left
[18:02] *** reportable6 joined
[18:50] <nine> Xliff_: it's a tough one. I'm reporting progress in #moarvm

[19:35] <Xliff_> nine: Thanks.

[19:36] *** Geth left
[19:36] *** Geth joined
[21:12] *** linkable6 left
[21:12] *** evalable6 left
[21:14] *** evalable6 joined
[21:15] *** linkable6 joined
[23:38] <Geth> ¬¶ rakudo: 33296d4065 | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/Repository/FileSystem.pm6

[23:38] <Geth> ¬¶ rakudo: Use distribution specific comp unit ids in CURFS (#4572)

[23:38] <Geth> ¬¶ rakudo: 

[23:38] <Geth> ¬¶ rakudo: Previously CU::R::FileSystem would only use the short name when generating a

[23:38] <Geth> ¬¶ rakudo: comp unit id. However when two different versions of the otherwise same

[23:38] <Geth> ¬¶ rakudo: module were loaded the same precomp file would get used. This changes to use

[23:38] <Geth> ¬¶ rakudo: the distribution id (which already accounts for version/api/auth) in

[23:38] <Geth> ¬¶ rakudo: combination with the short name of the requested module.

[23:38] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/33296d4065

[23:39] *** linkable6 left
