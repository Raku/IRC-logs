[00:02] *** reportable6 left
[01:02] *** releasable6 left
[01:02] *** bloatable6 left
[01:02] *** greppable6 left
[01:02] *** sourceable6 left
[01:02] *** committable6 left
[01:02] *** benchable6 left
[01:02] *** squashable6 left
[01:02] *** tellable6 left
[01:02] *** bisectable6 left
[01:02] *** coverable6 left
[01:02] *** nativecallable6 left
[01:02] *** unicodable6 left
[01:02] *** shareable6 left
[01:02] *** notable6 left
[01:02] *** evalable6 left
[01:02] *** linkable6 left
[01:02] *** statisfiable6 left
[01:02] *** quotable6 left
[01:03] *** greppable6 joined
[01:03] *** bisectable6 joined
[01:03] *** notable6 joined
[01:03] *** statisfiable6 joined
[01:04] *** releasable6 joined
[01:05] *** nativecallable6 joined
[01:05] *** quotable6 joined
[01:05] *** bloatable6 joined
[01:05] *** squashable6 joined
[01:05] *** shareable6 joined
[02:03] *** reportable6 joined
[02:04] *** coverable6 joined
[02:04] *** benchable6 joined
[02:04] *** evalable6 joined
[02:05] *** unicodable6 joined
[02:50] *** Util_ left
[04:04] *** committable6 joined
[05:03] *** tellable6 joined
[05:36] *** frost joined
[06:02] *** reportable6 left
[06:03] *** sourceable6 joined
[06:04] *** linkable6 joined
[07:01] *** dogbert17 joined
[07:02] *** dogbert11 left
[07:27] *** dogbert11 joined
[07:30] *** dogbert17 left
[07:39] <Geth> ¦ rakudo: 9681a0932d | (Stefan Seifert)++ | t/06-telemetry/01-basic.t

[07:39] <Geth> ¦ rakudo: Support ROAST_TIMING_SCALE in telemetry tests

[07:39] <Geth> ¦ rakudo: 

[07:39] <Geth> ¦ rakudo: The telemetry tests sometimes fail due to timing issues on loaded machines.

[07:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9681a0932d

[08:08] <Geth> ¦ rakudo: c0a6823b0c | (Stefan Seifert)++ | t/06-telemetry/01-basic.t

[08:08] <Geth> ¦ rakudo: Fix false positive in basic telemetry test

[08:08] <Geth> ¦ rakudo: 

[08:08] <Geth> ¦ rakudo: It's possible (especially with ROAST_TIMING_SCALE) that Telemetry takes

[08:08] <Geth> ¦ rakudo: multiple snapshots while we give it time to do at least one. So adjust the

[08:08] <Geth> ¦ rakudo: test to expect at least one snapshot to be taken, but be fine with moar than

[08:08] <Geth> ¦ rakudo: one. This fits the test description of "did the snapper start taking snaps"

[08:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c0a6823b0c

[09:20] *** dogbert17 joined
[09:23] *** dogbert11 left
[09:23] *** dogbert11 joined
[09:26] *** dogbert17 left
[09:28] *** dogbert17 joined
[09:30] *** dogbert11 left
[09:38] *** dogbert11 joined
[09:41] *** dogbert17 left
[09:57] *** dogbert17 joined
[09:57] *** dogbert11 left
[11:03] *** reportable6 joined
[11:06] *** Xliff joined
[11:14] *** cognominal joined
[11:16] *** cognominal_ left
[11:22] *** Kaiepi joined
[12:02] *** reportable6 left
[12:56] *** MasterDuke left
[12:59] *** cognominal left
[13:01] <Geth> ¦ rakudo/new-disp: af7df6118c | (Jonathan Worthington)++ | 3 files

[13:01] <Geth> ¦ rakudo/new-disp: Always give VM code handle to setparameterizer

[13:01] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/af7df6118c

[13:01] <Geth> ¦ rakudo/new-disp: 3f2218b28d | (Jonathan Worthington)++ | src/core.c/Thread.pm6

[13:01] <Geth> ¦ rakudo/new-disp: Always give VM code handle to newthread

[13:01] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/3f2218b28d

[13:25] *** frost left
[13:27] *** cognominal joined
[13:39] <Geth> ¦ rakudo/new-disp: 751a076d9a | (Jonathan Worthington)++ | 4 files

[13:39] <Geth> ¦ rakudo/new-disp: Always give continuation ops VM code handles

[13:39] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/751a076d9a

[15:50] <Geth> ¦ rakudo/new-disp: c539dd33e8 | (Jonathan Worthington)++ | lib/NativeCall.rakumod

[15:50] <Geth> ¦ rakudo/new-disp: Unwrap code handles for native callbacks

[15:50] <Geth> ¦ rakudo/new-disp: 

[15:50] <Geth> ¦ rakudo/new-disp: This will be reworked in a more efficient way at some future point when

[15:50] <Geth> ¦ rakudo/new-disp: we rework native calling in terms of the new dispatch mechanism.

[15:50] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/c539dd33e8

[16:05] *** reportable6 joined
[16:26] *** melezhik joined
[16:58] *** melezhik left
[16:58] *** dogbert11 joined
[17:00] *** dogbert17 left
[17:05] <Geth> ¦ rakudo/new-disp: d975805e70 | (Jonathan Worthington)++ | 2 files

[17:05] <Geth> ¦ rakudo/new-disp: Cease setting up invocation_handler on MoarVM

[17:05] <Geth> ¦ rakudo/new-disp: 

[17:05] <Geth> ¦ rakudo/new-disp: Soon the entire invocation protocol mechanism will go away on MoarVM;

[17:05] <Geth> ¦ rakudo/new-disp: this piece already can.

[17:05] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/d975805e70

[17:12] <Geth> ¦ rakudo/new-disp: efb091f907 | (Jonathan Worthington)++ | 2 files

[17:12] <Geth> ¦ rakudo/new-disp: Remove legacy multi dispatch caching leftovers

[17:12] <Geth> ¦ rakudo/new-disp: 

[17:12] <Geth> ¦ rakudo/new-disp: These were only used on MoarVM anyway, so just remove them rather than

[17:12] <Geth> ¦ rakudo/new-disp: making them backend-specific.

[17:12] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/efb091f907

[17:13] <Geth> ¦ nqp/new-disp: eeb554f44f | (Jonathan Worthington)++ | 2 files

[17:13] <Geth> ¦ nqp/new-disp: Eliminate setmultispec

[17:13] <Geth> ¦ nqp/new-disp: 

[17:13] <Geth> ¦ nqp/new-disp: Was part of the legacy multiple dispatch caching mechanism, and is no

[17:13] <Geth> ¦ nqp/new-disp: longer in use.

[17:13] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/eeb554f44f

[17:15] *** b2gills1 left
[17:16] *** b2gills joined
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:12] *** dogbert11 left
[18:12] *** dogbert11 joined
[18:22] *** dogbert17 joined
[18:22] *** dogbert11 left
[18:34] *** dogbert11 joined
[18:36] *** dogbert17 left
[18:51] *** dogbert11 left
[18:58] *** dogbert11 joined
[19:16] *** melezhik joined
[19:23] *** TempIRCLogger left
[19:23] *** TempIRCLogger joined
[19:25] *** melezhik left
[19:34] *** TempIRCLogger left
[19:35] *** TempIRCLogger joined
[19:38] <gfldex> m: my ($a:D) = 1;

[19:38] <camelia> rakudo-moar c0a6823b0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'D' in parameter declaration.␤at <tmp>:1␤------> 3my ($a:D7⏏5) = 1;␤»

[19:38] <gfldex> is that intentional?

[19:39] <gfldex> m: use variables :D; my ($a) = 1;

[19:39] <camelia> rakudo-moar c0a6823b0: ( no output )

[19:39] <gfldex> m: use variables :D; my ($a) = Any;

[19:39] <camelia> rakudo-moar c0a6823b0: OUTPUT: «Type check failed in assignment to $a; expected Any:D but got Any (Any) (perhaps Nil was assigned to a :D which had no default?)␤  in block <unit> at <tmp> line 1␤␤»

[19:40] <gfldex> Well, that's a useful workaround.

[20:10] <lizmat> tonyo_ ugexe so what would be the best way to introduce my updated version of IRC::Client (with an appropriate auth and version) in such a way that people would have to opt-in to using it, and not break anybody trying to just install "IRC::Client" get an ambiguous specification error ?

[20:11] <lizmat> introduce with a lower version ?

[20:11] <lizmat> lower than what is now in the ecosystem ?

[20:12] <ugexe> a lower api version would work, although youd have to change the existing module to api:1 and use api:0 for the new one

[20:12] <ugexe> would also work^

[20:12] <lizmat> no, the API is the same

[20:13] <lizmat> so switching API would not make much sense?

[20:13] <lizmat> I mean, i *think* it is a drop-in replacement, but since there aren't really any tests, I'd like people to opt-in for the new version

[20:16] <ugexe> if the api is the same switching the version doesnt make much sense either. in the end these are just tools

[20:18] <lizmat> thing is, IRC::Client is without auth in the ecosystem atm

[20:19] <lizmat> I think we need to add an auth

[20:19] <lizmat> ugexe: so you're saying: just bite the bullet and upload a higher versioned version to the ecosystem (e.g. fez) ?

[20:23] <ugexe> well you cant really opt-in to something just on the zef side, it has to be on the raku side as well i.e. "use Foo:auth<...>:`

[20:23] <ugexe> so yes that is probably what i would do

[20:24] <ugexe> to be clear you could install Foo:auth<...> via zef, but that doesnt help with any potentially already installed Foo:auth<> or if it was installed before or after

[20:27] <ugexe> opting in would look something like telling users to use `use IRC::Client:auth<myauth>` in their code in addition to `zef install "IRC::Client:auth<myauth>"`

[20:30] <ugexe> such an opt-in workflow could probably be improved with like superceded-by or emulates

[20:30] <ugexe> which are NYI for anyone following along

[20:32] <lizmat> but if there's an IRC::Client (no auth) and IRC::Client:auth<fez:lizmat>  in the ecosystem

[20:33] <lizmat> what would happen if you do a "zef install IRC::Client"

[20:36] <tonyo_> depends on api and versions

[20:36] <tonyo_> it wouldn't be bad to start migrating that stuff away from p6c

[20:37] <lizmat> well, this is a trial case for sure  :-)

[20:37] <lizmat> I mean, a module relatively upstream

[20:44] *** melezhik joined
[20:50] <lizmat> ok, I think I'll upload the new IRC::Client with an auth and a higher version number to fez tomorrow, when I'm less tired

[20:52] *** TempIRCLogger left
[20:52] *** TempIRCLogger joined
[20:53] <lizmat> afk&

[21:11] <tonyo_> i'm testing org creation on fez atm lizmat so if you want to move that into community modules then you may want to wait a few 

[21:52] *** evalable6 left
[21:52] *** linkable6 left
[21:55] *** linkable6 joined
[21:56] *** melezhik left
[22:42] *** jgaz joined
[22:45] <lizmat> tonyo_: no, I just moved IRC::Client out of community modules  :-)

[22:52] *** evalable6 joined
[22:58] *** jgaz left
[23:02] *** squashable6 left
[23:04] *** squashable6 joined
