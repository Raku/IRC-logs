[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[02:04] *** dogbert11 joined
[02:08] *** dogbert17 left
[02:44] *** frost joined
[02:51] *** dogbert11 left
[02:52] *** dogbert11 joined
[03:44] *** dogbert11 left
[03:44] *** dogbert11 joined
[03:53] *** dogbert11 left
[03:54] *** dogbert11 joined
[05:43] *** coverable6 left
[05:43] *** notable6 left
[05:43] *** linkable6 left
[05:43] *** committable6 left
[05:43] *** nativecallable6 left
[05:43] *** greppable6 left
[05:43] *** statisfiable6 left
[05:43] *** bisectable6 left
[05:43] *** evalable6 left
[05:43] *** unicodable6 left
[05:43] *** squashable6 left
[05:43] *** benchable6 left
[05:43] *** sourceable6 left
[05:43] *** releasable6 left
[05:43] *** reportable6 left
[05:43] *** tellable6 left
[05:43] *** shareable6 left
[05:43] *** bloatable6 left
[05:43] *** quotable6 left
[05:43] *** sourceable6 joined
[05:43] *** unicodable6 joined
[05:43] *** linkable6 joined
[05:44] *** notable6 joined
[05:44] *** tellable6 joined
[05:44] *** benchable6 joined
[05:44] *** nativecallable6 joined
[05:44] *** shareable6 joined
[05:45] *** bisectable6 joined
[05:45] *** committable6 joined
[05:45] *** bloatable6 joined
[05:45] *** evalable6 joined
[05:45] *** statisfiable6 joined
[05:45] *** squashable6 joined
[06:36] <nine> [Coke]: I'm leaning towards a no there for the reasons zoffix already gave

[06:46] <bartolin> nine: would you be ok with me merging https://github.com/Raku/nqp/pull/722 (the second part of the workaround for precompilation of native arrays for the JVM backend)?

[06:53] *** coverable6 joined
[08:03] *** quotable6 joined
[08:04] *** reportable6 joined
[08:11] *** greppable6 joined
[08:56] *** releasable6 joined
[10:29] *** sena_kun left
[10:30] *** sena_kun joined
[10:31] *** Altai-man joined
[10:37] *** nuno joined
[10:53] *** nuno left
[11:03] <nine> bartolin: oh, sure!

[11:15] <Geth> Â¦ nqp: 163db9a942 | (Christian BartolomÃ¤us)++ | 4 files

[11:15] <Geth> Â¦ nqp: [JVM] Keep correct REPR.name for native arrays

[11:15] <Geth> Â¦ nqp: 

[11:15] <Geth> Â¦ nqp: It turned out that f3dc977 doesn't really fix the usage of native

[11:15] <Geth> Â¦ nqp: arrays in the core setting. For some reason during the compilation of

[11:15] <Geth> Â¦ nqp: blib/CORE.d.setting.jar native array are deserialized twice.

[11:15] <Geth> Â¦ nqp: 

[11:15] <Geth> Â¦ nqp: The first time worked as expected, but since we did reset REPR.name

[11:15] <Geth> Â¦ nqp: <â€¦commit message has 6 more linesâ€¦>

[11:15] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/163db9a942

[11:15] <Geth> Â¦ nqp: db3af058a9 | (Christian BartolomÃ¤us)++ | 3 files

[11:15] <Geth> Â¦ nqp: [JVM] Use more generic name for new REPR field

[11:15] <Geth> Â¦ nqp: 

[11:15] <Geth> Â¦ nqp: This allows to use the new field for other REPRs than VMArrays as well,

[11:15] <Geth> Â¦ nqp: if the need arises.

[11:15] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/db3af058a9

[11:19] <bartolin> thanks for looking

[11:20] <Geth> Â¦ rakudo/faster-regex-grep: bf82d828a0 | (Elizabeth Mattijsen)++ | 2 files

[11:20] <Geth> Â¦ rakudo/faster-regex-grep: Make .grep(Regex) and .first(Regex) about 40% faster

[11:20] <Geth> Â¦ rakudo/faster-regex-grep: 

[11:20] <Geth> Â¦ rakudo/faster-regex-grep: By not needing to create relative expensive .Match objects when only

[11:20] <Geth> Â¦ rakudo/faster-regex-grep: a Bool can do.

[11:20] <Geth> Â¦ rakudo/faster-regex-grep: 

[11:20] <Geth> Â¦ rakudo/faster-regex-grep: For historic reasons, Regex.ACCEPTS is *not* expected to return a

[11:20] <Geth> Â¦ rakudo/faster-regex-grep: Bool (contrary to all other .ACCEPTS methods) but a Match object.

[11:20] <Geth> Â¦ rakudo/faster-regex-grep: <â€¦commit message has 7 more linesâ€¦>

[11:20] <Geth> Â¦ rakudo/faster-regex-grep: review: https://github.com/rakudo/rakudo/commit/bf82d828a0

[11:20] *** Kaiepi left
[11:20] <Geth> Â¦ rakudo: lizmat++ created pull request #4383: Make .grep(Regex) and .first(Regex) about 40% faster

[11:20] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4383

[11:21] *** Kaiepi joined
[11:31] *** Kaiepi left
[12:02] *** reportable6 left
[12:18] <Geth> Â¦ rakudo/workers-for-long-queues: 39e5834dc4 | (Jonathan Worthington)++ | src/core.c/ThreadPoolScheduler.pm6

[12:18] <Geth> Â¦ rakudo/workers-for-long-queues: Tweak worker addition for many small tasks

[12:18] <Geth> Â¦ rakudo/workers-for-long-queues: 

[12:18] <Geth> Â¦ rakudo/workers-for-long-queues: Today we add additional workers to the thread pool based upon lack of

[12:18] <Geth> Â¦ rakudo/workers-for-long-queues: progress. This works well when work items are relatively large, and so

[12:18] <Geth> Â¦ rakudo/workers-for-long-queues: hold on to a worker for a while. For applications that schedule lots of

[12:18] <Geth> Â¦ rakudo/workers-for-long-queues: small pieces of work that are well below the threshold at which the

[12:18] <Geth> Â¦ rakudo/workers-for-long-queues: supervisor runs, however, some work is always completed, and so the

[12:18] <Geth> Â¦ rakudo/workers-for-long-queues: <â€¦commit message has 24 more linesâ€¦>

[12:18] <Geth> Â¦ rakudo/workers-for-long-queues: review: https://github.com/rakudo/rakudo/commit/39e5834dc4

[12:54] *** frost left
[14:44] *** evalable6 left
[14:44] *** bloatable6 left
[14:44] *** releasable6 left
[14:44] *** sourceable6 left
[14:44] *** shareable6 left
[14:44] *** committable6 left
[14:44] *** bisectable6 left
[14:44] *** statisfiable6 left
[14:44] *** tellable6 left
[14:44] *** notable6 left
[14:44] *** benchable6 left
[14:44] *** unicodable6 left
[14:44] *** greppable6 left
[14:44] *** squashable6 left
[14:44] *** nativecallable6 left
[14:44] *** coverable6 left
[14:44] *** linkable6 left
[14:44] *** quotable6 left
[14:44] *** releasable6 joined
[14:45] *** shareable6 joined
[14:45] *** statisfiable6 joined
[14:45] *** reportable6 joined
[14:45] *** unicodable6 joined
[14:45] *** notable6 joined
[14:45] *** linkable6 joined
[14:45] *** nativecallable6 joined
[14:45] *** tellable6 joined
[14:46] *** squashable6 joined
[14:46] *** committable6 joined
[14:46] *** evalable6 joined
[14:46] *** quotable6 joined
[14:46] *** coverable6 joined
[14:46] *** bisectable6 joined
[14:46] *** benchable6 joined
[14:47] *** sourceable6 joined
[14:47] *** bloatable6 joined
[14:47] *** greppable6 joined
[14:57] *** b2gills left
[15:38] *** ilogger2 joined
[15:38] *** kevin1 joined
[15:38] *** SmokeMachine joined
[15:39] *** smarton joined
[15:44] *** sena_kun joined
[16:59] <Geth> Â¦ rakudo/faster-regex-grep: cfe58e5fdf | (Elizabeth Mattijsen)++ | 2 files

[16:59] <Geth> Â¦ rakudo/faster-regex-grep: Do the cursoring inside .grep / .first

[16:59] <Geth> Â¦ rakudo/faster-regex-grep: 

[16:59] <Geth> Â¦ rakudo/faster-regex-grep: Get rid of the implementation-detail method, do the raw cursoring

[16:59] <Geth> Â¦ rakudo/faster-regex-grep: in the .grep / .first logic directly for performance.

[16:59] <Geth> Â¦ rakudo/faster-regex-grep: 

[16:59] <Geth> Â¦ rakudo/faster-regex-grep: This now makes Joelle Maslak's[1] example about 25% faster without

[16:59] <Geth> Â¦ rakudo/faster-regex-grep: any changes to the code.

[16:59] <Geth> Â¦ rakudo/faster-regex-grep: 

[16:59] <Geth> Â¦ rakudo/faster-regex-grep: [1] https://twitter.com/jmaslak/status/1397706847658778627

[16:59] <Geth> Â¦ rakudo/faster-regex-grep: review: https://github.com/rakudo/rakudo/commit/cfe58e5fdf

[17:41] *** Kaiepi joined
[18:04] *** reportable6 joined
[18:13] *** Kaiepi left
[18:18] <Geth> Â¦ roast: df696b48da | (Christian BartolomÃ¤us)++ | S09-typed-arrays/native-shape1-str.t

[18:18] <Geth> Â¦ roast: [JVM] Fudge (todo) recently added test

[18:18] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/df696b48da

[18:27] <Geth> Â¦ roast: 1233ff95ea | (Christian BartolomÃ¤us)++ | S11-modules/require.t

[18:27] <Geth> Â¦ roast: [JVM] Unfudge now passing test

[18:27] <Geth> Â¦ roast: 

[18:27] <Geth> Â¦ roast: Fixed with https://github.com/Raku/nqp/commit/00408eea93.

[18:27] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/1233ff95ea

[20:50] *** rba joined
[21:26] *** rypervenche joined
[22:31] *** evalable6 joined
[22:32] *** linkable6 joined
[23:32] *** evalable6 left
[23:32] *** reportable6 left
[23:32] *** linkable6 left
[23:32] *** unicodable6 joined
[23:32] *** linkable6 joined
[23:32] *** coverable6 joined
[23:33] *** committable6 joined
[23:33] *** quotable6 joined
[23:33] *** evalable6 joined
[23:33] *** releasable6 joined
[23:33] *** notable6 joined
[23:33] *** bisectable6 joined
[23:33] *** nativecallable6 joined
[23:34] *** tellable6 joined
[23:34] *** shareable6 joined
[23:34] *** sourceable6 joined
[23:34] *** reportable6 joined
[23:35] *** greppable6 joined
[23:35] *** squashable6 joined
[23:35] *** statisfiable6 joined
[23:35] *** bloatable6 joined
