[00:02] *** reportable6 left
[00:31] *** evalable6 joined
[00:40] <Geth> ¬¶ rakudo: vrurg++ created pull request #4482: Fix a race in ClassHOW new_type
[00:40] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/4482
[01:03] *** reportable6 joined
[02:24] *** quotable6 left
[02:24] *** tellable6 left
[02:24] *** unicodable6 left
[02:24] *** statisfiable6 left
[02:24] *** linkable6 left
[02:24] *** squashable6 left
[02:24] *** greppable6 left
[02:24] *** notable6 left
[02:24] *** sourceable6 left
[02:24] *** coverable6 left
[02:24] *** bloatable6 left
[02:24] *** nativecallable6 left
[02:24] *** benchable6 left
[02:24] *** bisectable6 left
[02:24] *** committable6 left
[02:24] *** reportable6 left
[02:24] *** releasable6 left
[02:24] *** shareable6 left
[02:24] *** releasable6 joined
[02:24] *** unicodable6 joined
[02:25] *** committable6 joined
[02:25] *** coverable6 joined
[02:25] *** bisectable6 joined
[02:26] *** statisfiable6 joined
[02:26] *** greppable6 joined
[02:27] *** reportable6 joined
[02:27] *** squashable6 joined
[02:27] *** shareable6 joined
[03:25] *** notable6 joined
[04:24] *** bloatable6 joined
[04:25] *** quotable6 joined
[04:25] *** tellable6 joined
[04:26] *** benchable6 joined
[05:27] *** linkable6 joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:42] *** gfldex left
[06:43] *** gfldex joined
[06:43] *** gfldex left
[06:43] *** gfldex joined
[07:26] *** sourceable6 joined
[07:26] *** nativecallable6 joined
[08:42] *** Kaipi left
[10:17] *** Kaiepi joined
[12:03] *** reportable6 left
[13:05] *** reportable6 joined
[13:57] *** Xliff joined
[15:18] *** evalable6 left
[15:18] *** linkable6 left
[15:19] *** evalable6 joined
[16:00] *** vrurg left
[16:04] *** MasterDuke left
[16:07] *** vrurg joined
[16:15] *** MasterDuke joined
[16:42] *** Xliff left
[17:19] *** linkable6 joined
[17:58] *** patrickb joined
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:05] *** patrickb left
[19:00] *** casaca left
[20:12] *** casaca joined
[20:46] <Kaiepi> m: enum Foo <A B C>; say Foo.^composalize ~~ Foo
[20:46] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´False‚ê§¬ª
[20:48] <Kaiepi> if that can remain False, that allows for some pretty big speedups to role typechecking
[21:30] <japhb> Kaiepi: Can you explain that a bit more?
[21:41] <vrurg> Kaiepi: I think the False here is incorrect, if DWIM is expected.
[21:42] <vrurg> m: enum Foo <A B>; class Bar does Foo { }; say Bar ~~ Foo;
[21:42] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´False‚ê§¬ª
[21:45] <vrurg> Though I still wonder what sense does this make? 
[21:55] *** casaca left
[22:03] <Kaiepi> vrurg, i mean doing strict equality checks on the role typecheck list in Metamodel::ParametricRoleHOW.type_check instead of typechecking the doees
[22:03] <Kaiepi> though that seems to be false in both cases
[22:04] <Kaiepi> maybe the metaobject to be composalized needs to be added to the role typecheck list too?
[22:04] <vrurg> I think so. 
[22:07] *** casaca joined
[22:13] *** casaca left
[22:17] <Kaiepi> m: class Foo is Buf[uint8] is repr<VMArray> { }; say Buf[uint8] ~~ Blob[uint8]
[22:17] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´True‚ê§¬ª
[22:18] <Kaiepi> m: class Foo is Buf[uint8] is repr<VMArray> { }; say Foo ~~ Blob[uint8]
[22:18] <camelia> rakudo-moar 74d7ff771: OUTPUT: ¬´False‚ê§¬ª
[22:18] <Kaiepi> inheritalization needs something similar i think
[22:43] <timo> the meek shall inheritalize the earth 
[22:51] *** squashable6 left
[22:52] *** squashable6 joined
