[00:33] *** HarmtH left
[01:26] *** kvw_5 joined
[01:29] *** kvw_5_ left
[02:41] *** greppable6 left
[02:41] *** quotable6 left
[02:41] *** linkable6 left
[02:41] *** committable6 left
[02:41] *** evalable6 left
[02:41] *** coverable6 left
[02:41] *** shareable6 left
[02:41] *** nativecallable6 left
[02:41] *** bloatable6 left
[02:41] *** squashable6 left
[02:41] *** sourceable6 left
[02:41] *** unicodable6 left
[02:42] *** linkable6 joined
[02:42] *** statisfiable6 joined
[02:42] *** greppable6 joined
[02:42] *** sourceable6 joined
[02:42] *** evalable6 joined
[02:42] *** nativecallable6 joined
[02:42] *** unicodable6 joined
[02:43] *** squashable6 joined
[02:43] *** notable6 joined
[02:43] *** shareable6 joined
[02:43] *** bisectable6 joined
[02:43] *** benchable6 joined
[02:44] *** bloatable6 joined
[02:44] *** quotable6 joined
[02:44] *** tellable6 joined
[02:44] *** committable6 joined
[02:44] *** coverable6 joined
[02:45] *** releasable6 joined
[06:16] <[Tux]> Rakudo v2021.03-91-g496f986e6 (v6.d) on MoarVM 2021.03-18-ga64e1a432

[06:16] <[Tux]> csv-test-xs-20      0.372 -  0.387

[06:16] <[Tux]> csv-ip5xs           0.797 -  0.826

[06:16] <[Tux]> test-t --race       0.875 -  0.950

[06:16] <[Tux]> test-t              1.920 -  1.928

[06:16] <[Tux]> test                7.477 -  7.671

[06:16] <[Tux]> csv-ip5xs-20        8.001 -  8.166

[06:16] <[Tux]> test-t-20 --race    9.508 -  9.949

[06:16] <[Tux]> csv-parser         26.429 - 26.976

[06:16] <[Tux]> test-t-20          32.558 - 34.415

[07:01] *** Xliff left
[07:20] *** linkable6 left
[07:21] *** linkable6 joined
[07:49] *** squashable6 left
[07:50] *** squashable6 joined
[07:57] *** Kaiepi left
[07:59] *** domidumont joined
[08:01] *** squashable6 left
[08:02] *** squashable6 joined
[08:06] *** Kaiepi joined
[08:52] *** linkable6 left
[08:54] *** linkable6 joined
[09:21] *** sena_kun joined
[09:58] *** frost-lab joined
[10:27] *** linkable6 left
[10:28] *** linkable6 joined
[10:37] *** linkable6 left
[10:37] *** linkable6 joined
[10:43] <Geth> ¦ rakudo: b88e1ca3bf | (Elizabeth Mattijsen)++ | src/core.c/unicodey.pm6

[10:43] <Geth> ¦ rakudo: Hopefully fully unbreak JVM backend

[10:43] <Geth> ¦ rakudo: 

[10:43] <Geth> ¦ rakudo: usev6++ for guidance

[10:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b88e1ca3bf

[10:46] *** linkable6 left
[10:47] *** linkable6 joined
[11:11] *** linkable6 left
[11:13] *** linkable6 joined
[11:24] *** linkable6 left
[11:26] *** linkable6 joined
[11:31] *** linkable6 left
[11:33] *** linkable6 joined
[11:34] *** linkable6 left
[11:35] <tbrowder> lizmat: any objections to merging my PR #4288?

[11:35] *** linkable6 joined
[11:36] *** linkable6 left
[11:37] *** linkable6 joined
[11:37] <lizmat> no, but I will add some optimization later

[11:37] <Geth> ¦ rakudo: 6841ed5ecf | (Tom Browder)++ | src/core.c/DateTime.pm6

[11:37] <Geth> ¦ rakudo: Add new methods to DateTime

[11:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6841ed5ecf

[11:37] <Geth> ¦ rakudo: 457925e9b0 | (Tom Browder)++ | src/core.c/DateTime.pm6

[11:37] <Geth> ¦ rakudo: changed method names per @ugexe's suggestion

[11:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/457925e9b0

[11:37] <Geth> ¦ rakudo: 353334fdb9 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/DateTime.pm6

[11:37] <Geth> ¦ rakudo: Merge pull request #4288 from tbrowder/juliandate

[11:38] <Geth> ¦ rakudo: 

[11:38] <Geth> ¦ rakudo: Add new methods to class DateTime

[11:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/353334fdb9

[11:38] <tbrowder> ok, can

[11:38] <lizmat> and also make it take leap-seconds into account

[11:38] <tbrowder> thnx

[11:40] <tbrowder> i'm interested in how that works. i thought the current object would have that included in its seconds

[11:42] *** linkable6 left
[11:43] <Geth> ¦ rakudo: usev6++ created pull request #4292: Add test for repl handling junction correctly

[11:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4292

[11:43] *** linkable6 joined
[11:43] <lizmat> it would need to check the date

[11:44] <tbrowder> but aren't they cumulative?

[11:45] <tbrowder> the new methods are on an instantiated object, so shouldn't the existing values be correct?

[11:45] <Geth> ¦ roast/master: 4 commits pushed by (Tom Browder)++, (Elizabeth Mattijsen)++

[11:45] <Geth> ¦ roast/master: 39fb0f46e6 | Add tests for new methods on class DateTime with PR #4288

[11:45] <Geth> ¦ roast/master: c1207e1406 | change method names to the current ones in the PR #4288

[11:45] <Geth> ¦ roast/master: 14ecba5116 | add more tests; add new test to spectest.data

[11:45] <Geth> ¦ roast/master: 17f01631f1 | Merge pull request #727 from tbrowder/juliandate

[11:45] <Geth> ¦ roast/master: review: https://github.com/Raku/roast/compare/6a1441f62752...17f01631f1cf

[11:48] <tbrowder> my roast tests run against NASA's time out to 4000 and agree to hundreds of a second

[11:48] <tbrowder> hundreths

[11:49] <tbrowder> hundredths :-)

[11:53] <tbrowder> that's using jpl's iso date, converting to jd, and comparing the two julian-dares

[11:53] <tbrowder> *dates

[11:54] *** linkable6 left
[11:54] <Geth> ¦ rakudo: 3926026213 | (Elizabeth Mattijsen)++ | src/core.c/DateTime.pm6

[11:54] <Geth> ¦ rakudo: Optimize DateTime.day-fraction a bit

[11:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3926026213

[11:57] *** linkable6 joined
[11:57] <tbrowder> ok, i see what you did, but my tests also check nasa's day-fraction, so your's is a speed option, yes?

[11:57] <tbrowder> *speed optimization

[11:58] <tbrowder> "the squeaky day-fraction gets the nqp grease"

[12:01] <tbrowder> i'll try to remember that, thanks for never forgetting optimization!

[12:05] <lizmat> yes, purely for speed

[12:05] <lizmat> needed since people working with these usually had a *lot* of data points

[12:06] *** linkable6 left
[12:07] *** linkable6 joined
[12:09] <lizmat> looking at making the leap second issue more efficient now

[12:09] *** Kaiepi left
[12:10] *** Kaiepi joined
[12:17] *** brown121407 left
[12:18] *** brown121407 joined
[12:26] <tbrowder> ok, now i'm going to see if i can get posix as a real number AND satisfy roast...there be dragons, bye

[12:45] *** domidumont left
[12:47] *** linkable6 left
[12:49] *** linkable6 joined
[12:55] *** ggoebel left
[13:19] <bartolin_> lizmat: unfortunately, there is still a problem with Rakudo::Unicodey.ords after your latest commit. But I think I have a fix. Do you have some minutes to look at the last three commits in https://github.com/usev6/rakudo/commits/jvm_unicodey_2 ?

[13:20] <bartolin_> r: use nqp; my @foo; nqp::push(@foo, 42)

[13:20] <camelia> rakudo-moar 726a75e24: OUTPUT: «This type (Array) does not support positional operations␤  in block <unit> at <tmp> line 1␤␤»

[13:20] <camelia> ..rakudo-jvm 08b449e1a: OUTPUT: «java.lang.RuntimeException: This type does not support positional operations␤  in block <unit> at <tmp> line 1␤␤»

[13:20] <bartolin_> r: use nqp; my @foo; push(@foo, 42); dd @foo

[13:20] <camelia> rakudo-jvm 08b449e1a, rakudo-moar 726a75e24: OUTPUT: «Array @foo = [42]␤»

[13:21] <Geth> ¦ rakudo: c07639e64a | (Elizabeth Mattijsen)++ | src/core.c/Dateish.pm6

[13:21] <Geth> ¦ rakudo: Make Datish.daycount calculation about 30% faster

[13:21] <Geth> ¦ rakudo: 

[13:21] <Geth> ¦ rakudo: - don't need a separate local int $d as it's only mentioned once

[13:21] <Geth> ¦ rakudo: - initialize year and month first always, good for 10 months of the year

[13:21] <Geth> ¦ rakudo: - refer to each attribute only once, use (lowered) lexicals otherwise

[13:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c07639e64a

[13:21] <bartolin_> nqp::push and nqp::unshift don't seem to work with Rakudo's (non-native) arrays.

[13:22] <bartolin_> But I found out that the JVM backend does *not* have a problem with array[uint32].new in the setting -- while it has a problem with 'my uint32 @arr'

[13:25] <bartolin_> lizmat: could you explain to me if there are relevant differences between 'my uint32 @ords' and 'my @ords := array[uint32].new' in a place like https://github.com/rakudo/rakudo/blob/c07639e64a/src/core.c/unicodey.pm6#L9

[13:26] <lizmat> aha!  

[13:26] <bartolin_> I mean, do you see any problem with the latter (as in https://github.com/usev6/rakudo/commit/5fd7d068ed)?

[13:26] <lizmat> I don't think there *should* be any difference?

[13:27] <bartolin_> Ha! That's good to hear ;)

[13:27] <lizmat> ok, so yeah, a PR with that and the other #?if's reverted, would be welcome!

[13:28] <Geth> ¦ rakudo: usev6++ created pull request #4293: Jvm unicodey 2

[13:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4293

[13:28] <bartolin_> there you go

[13:28] <Geth> ¦ rakudo/master: 4 commits pushed by (Christian Bartolomäus)++, (Elizabeth Mattijsen)++

[13:28] <Geth> ¦ rakudo/master: f2f1cda685 | [JVM] Fix pushing to array

[13:28] <Geth> ¦ rakudo/master: dcf1c506a5 | [JVM] Remove some special cases for JVM

[13:28] <Geth> ¦ rakudo/master: 5fd7d068ed | [JVM] Bind native array in Rakudo::Unicodey.ords

[13:28] <Geth> ¦ rakudo/master: ff6dc2a730 | Merge pull request #4293 from usev6/jvm_unicodey_2

[13:28] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/c07639e64a9c...ff6dc2a73019

[13:28] <bartolin_> I'll take a look if I can do something similar in one or two other places.

[13:28] <lizmat> ++bartolin

[13:32] <lizmat> afk for a few hours&

[13:36] *** frost-lab left
[13:37] *** b2gills left
[13:37] *** b2gills joined
[13:56] *** squashable6 left
[13:57] *** squashable6 joined
[13:58] *** HarmtH joined
[14:15] *** domidumont joined
[14:19] *** domidumont left
[14:32] <Geth> ¦ nqp: f7896c5afb | (Stefan Seifert)++ | tools/templates/MOAR_REVISION

[14:32] <Geth> ¦ nqp: Bump MoarVM for new nqp::backtrace version

[14:32] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/f7896c5afb

[14:38] <Geth> ¦ rakudo/fix_backtrace_with_spesh_inlines: 2e79780e4a | (Stefan Seifert)++ | 4 files

[14:38] <Geth> ¦ rakudo/fix_backtrace_with_spesh_inlines: Make backtraces consistent on all backends

[14:38] <Geth> ¦ rakudo/fix_backtrace_with_spesh_inlines: 

[14:38] <Geth> ¦ rakudo/fix_backtrace_with_spesh_inlines: Usually backtraces are created from exceptions. To catch such an exception the

[14:38] <Geth> ¦ rakudo/fix_backtrace_with_spesh_inlines: BackTrace constructer used a try thunk which at the VM level got its own call

[14:38] <Geth> ¦ rakudo/fix_backtrace_with_spesh_inlines: frame. However MoarVM's specializer may decide to inline this frame. While

[14:38] <Geth> ¦ rakudo/fix_backtrace_with_spesh_inlines: recent improvements to MoarVM made backtrace generation inline-aware, there

[14:38] <Geth> ¦ rakudo/fix_backtrace_with_spesh_inlines: still remains a problem when the inlined frame and the nqp::backtrace op are

[14:38] <Geth> ¦ rakudo/fix_backtrace_with_spesh_inlines: <…commit message has 9 more lines…>

[14:38] <Geth> ¦ rakudo/fix_backtrace_with_spesh_inlines: review: https://github.com/rakudo/rakudo/commit/2e79780e4a

[14:38] <Geth> ¦ rakudo: niner++ created pull request #4294: Make backtraces consistent on all backends

[14:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4294

[15:01] <Geth> ¦ rakudo/fix_tps_continuation_race_condition: 98839c8022 | (Stefan Seifert)++ | src/core.c/ThreadPoolScheduler.pm6

[15:01] <Geth> ¦ rakudo/fix_tps_continuation_race_condition: Fix race condition in ThreadPoolScheduler

[15:01] <Geth> ¦ rakudo/fix_tps_continuation_race_condition: 

[15:01] <Geth> ¦ rakudo/fix_tps_continuation_race_condition: t/spec/MISC/bug-coverage-stress-6.d.t died occasionally with "continuationinvoke

[15:01] <Geth> ¦ rakudo/fix_tps_continuation_race_condition: expects an MVMContinuation" when run on a heavily loaded system. The reason for

[15:01] <Geth> ¦ rakudo/fix_tps_continuation_race_condition: this is that a different thread may have taken the continuation job from the

[15:01] <Geth> ¦ rakudo/fix_tps_continuation_race_condition: queue before the continuation was actually taken and stored in the variable.

[15:01] <Geth> ¦ rakudo/fix_tps_continuation_race_condition: 

[15:01] <Geth> ¦ rakudo/fix_tps_continuation_race_condition: <…commit message has 9 more lines…>

[15:01] <Geth> ¦ rakudo/fix_tps_continuation_race_condition: review: https://github.com/rakudo/rakudo/commit/98839c8022

[15:01] <Geth> ¦ rakudo: 98839c8022 | (Stefan Seifert)++ | src/core.c/ThreadPoolScheduler.pm6

[15:01] <Geth> ¦ rakudo: Fix race condition in ThreadPoolScheduler

[15:01] <Geth> ¦ rakudo: 

[15:01] <Geth> ¦ rakudo: t/spec/MISC/bug-coverage-stress-6.d.t died occasionally with "continuationinvoke

[15:01] <Geth> ¦ rakudo: expects an MVMContinuation" when run on a heavily loaded system. The reason for

[15:01] <Geth> ¦ rakudo: this is that a different thread may have taken the continuation job from the

[15:01] <Geth> ¦ rakudo: queue before the continuation was actually taken and stored in the variable.

[15:01] <Geth> ¦ rakudo: 

[15:01] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[15:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/98839c8022

[16:52] *** evalable6 left
[16:52] *** linkable6 left
[16:54] *** evalable6 joined
[16:55] *** linkable6 joined
[17:09] *** domidumont joined
[17:43] *** domidumont left
[18:26] <Geth> ¦ rakudo: usev6++ created pull request #4295: [JVM] Limit special cases to variable declaration

[18:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4295

[19:34] <Geth> ¦ rakudo: e774e19410 | (Christian Bartolomäus)++ | 4 files

[19:34] <Geth> ¦ rakudo: [JVM] Limit special cases to variable declaration

[19:34] <Geth> ¦ rakudo: 

[19:34] <Geth> ¦ rakudo: We have a couple of workarounds for native arrays in the setting not

[19:34] <Geth> ¦ rakudo: working correctly on the JVM backend. Having something like

[19:34] <Geth> ¦ rakudo: 

[19:34] <Geth> ¦ rakudo:   my int @arr;

[19:34] <Geth> ¦ rakudo: 

[19:34] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[19:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e774e19410

[19:34] <Geth> ¦ rakudo: b0de0ff087 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 4 files

[19:34] <Geth> ¦ rakudo: Merge pull request #4295 from usev6/jvm_native_arrays

[19:34] <Geth> ¦ rakudo: 

[19:34] <Geth> ¦ rakudo: [JVM] Limit special cases to variable declaration

[19:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b0de0ff087

[19:45] <bartolin_> thanks, lizmat

[20:07] <Geth> ¦ roast: 9d22ba47ef | (Christian Bartolomäus)++ | S09-typed-arrays/native-num.t

[20:07] <Geth> ¦ roast: [JVM] Unfudge now-passing tests

[20:07] <Geth> ¦ roast: 

[20:07] <Geth> ¦ roast: Fixed with https://github.com/rakudo/rakudo/commit/e774e19410

[20:07] <Geth> ¦ roast: (special case for JVM backend removed)

[20:07] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9d22ba47ef

[20:17] <Geth> ¦ rakudo: 2e79780e4a | (Stefan Seifert)++ | 4 files

[20:17] <Geth> ¦ rakudo: Make backtraces consistent on all backends

[20:17] <Geth> ¦ rakudo: 

[20:17] <Geth> ¦ rakudo: Usually backtraces are created from exceptions. To catch such an exception the

[20:17] <Geth> ¦ rakudo: BackTrace constructer used a try thunk which at the VM level got its own call

[20:17] <Geth> ¦ rakudo: frame. However MoarVM's specializer may decide to inline this frame. While

[20:17] <Geth> ¦ rakudo: recent improvements to MoarVM made backtrace generation inline-aware, there

[20:17] <Geth> ¦ rakudo: still remains a problem when the inlined frame and the nqp::backtrace op are

[20:17] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[20:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2e79780e4a

[20:17] <Geth> ¦ rakudo: bebc82f38c | niner++ (committed using GitHub Web editor) | 4 files

[20:17] <Geth> ¦ rakudo: Merge pull request #4294 from rakudo/fix_backtrace_with_spesh_inlines

[20:17] <Geth> ¦ rakudo: 

[20:17] <Geth> ¦ rakudo: Make backtraces consistent on all backends

[20:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bebc82f38c

[20:32] <Geth> ¦ roast: 3113a7def8 | (Christian Bartolomäus)++ | S15-unicode-information/uniname.t

[20:32] <Geth> ¦ roast: [JVM] Unfudge now-passing tests for uniname(s)

[20:32] <Geth> ¦ roast: 

[20:32] <Geth> ¦ roast: Positive fallout from lizmat++'s recent work on Rakudo::Unicodey.

[20:32] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3113a7def8

[20:39] <vrurg> nine: do I get it right that on moar nqp::backtrace(nqp::null) now does it without thrown an exception?

[20:39] <vrurg> *throwing

[20:50] <vrurg> nevermind, found the commit. Good...

[20:51] <nine> yes

[20:53] <MasterDuke> committable6: 2021.03,HEAD my $a; my $s = now; $a = do given "hi" { when 3 { "three" }; when 5 { "five" }; when "hi" { "hello" }; when * > 40 { "> 40" }; default { "default" } } for ^40_000; say now - $s; say $a

[20:53] <committable6> MasterDuke, ¦2021.03: «6.06434␤hello␤» ¦HEAD(bebc82f): «4.889722657␤hello␤»

[20:54] <MasterDuke> nice

[21:10] *** HarmtH left
[21:46] *** grayrider joined
[22:34] <japhb> MasterDuke: Any idea which of the commits is responsible for that?  (I'm idly curious both what had such a large effect, and whether it will have any effect on [Tux]'s tests.)

[22:35] <MasterDuke> japhb: it's nine++'s merge of his rakudo PR https://github.com/rakudo/rakudo/pull/4294

[22:38] <japhb> Lighter backtraces make given/when faster?  That's ... not self-obvious.

[22:39] <MasterDuke> the cost is all the Failures created from the initial failed matches

[22:44] <MasterDuke> a profile of the above code shows 50% of the time is spent in src/core.c/Backtrace.pm6:104

[22:49] <japhb> Oh wild ... so what's that percentage now?

[22:50] <MasterDuke> that's now

[22:50] <japhb> !!!

[22:54] <japhb> I guess that makes it doubly important to have most likely matches at the front of a when ladder then.

[22:59] <MasterDuke> yep

[23:03] <MasterDuke> well, some things are more expensive to check than others. the fail is really coming from val(), trying to turn "hi" into a number

[23:20] <ugexe> m: eager gather for 1..10 { (1..10).race.map({ take $_ }) }

[23:20] <camelia> rakudo-moar 726a75e24: OUTPUT: «A worker in a parallel iteration (hyper or race) initiated here:␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Died at:␤    take without gather␤      in block  at <tmp> line 1␤␤»

