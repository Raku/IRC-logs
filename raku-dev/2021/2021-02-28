[00:46] *** squashable6 left
[00:47] *** squashable6 joined
[02:21] *** JRaspass left
[02:39] *** kvw_5_ joined
[02:42] *** kvw_5 left
[03:45] *** leont left
[04:30] *** epony left
[04:59] *** epony joined
[10:59] *** lizmat left
[11:01] *** lizmat joined
[11:55] *** squashable6 left
[11:56] *** squashable6 joined
[12:19] *** leont joined
[13:05] *** patrickb joined
[13:40] *** JRaspass joined
[14:11] *** lizmat left
[14:12] *** lizmat joined
[14:59] *** sxmx left
[15:13] *** sxmx joined
[16:19] *** greppable6 left
[16:19] *** shareable6 left
[16:19] *** sourceable6 left
[16:19] *** releasable6 left
[16:19] *** bisectable6 left
[16:19] *** bloatable6 left
[16:19] *** unicodable6 left
[16:19] *** benchable6 left
[16:19] *** statisfiable6 left
[16:19] *** coverable6 left
[16:19] *** tellable6 left
[16:19] *** evalable6 left
[16:19] *** quotable6 left
[16:19] *** committable6 left
[16:19] *** notable6 left
[16:19] *** nativecallable6 left
[16:19] *** squashable6 left
[16:19] *** linkable6 left
[16:20] *** squashable6 joined
[16:20] *** benchable6 joined
[16:20] *** linkable6 joined
[16:20] *** nativecallable6 joined
[16:20] *** releasable6 joined
[16:20] *** notable6 joined
[16:21] *** bloatable6 joined
[16:21] *** shareable6 joined
[16:21] *** committable6 joined
[16:21] *** quotable6 joined
[16:21] *** bisectable6 joined
[16:21] *** unicodable6 joined
[16:21] *** tellable6 joined
[16:21] *** sourceable6 joined
[16:21] *** statisfiable6 joined
[16:22] *** greppable6 joined
[16:22] *** coverable6 joined
[16:22] *** evalable6 joined
[17:00] *** cog_ left
[17:13] *** cog joined
[17:15] *** domidumont joined
[17:27] *** Kaeipi left
[18:00] *** sena_kun left
[18:07] *** sena_kun joined
[18:32] *** domidumont left
[18:47] *** Kaiepi joined
[19:07] *** sena_kun left
[19:08] *** sena_kun joined
[20:28] *** lizmat left
[20:30] *** lizmat joined
[20:47] *** patrickb left
[20:55] *** JRaspass left
[21:19] <japhb> Getting myself very confused, so could use expert advice.  I'm trying to understand the CUR API, and there's a files method that supposedly should find me distros that include a file with a certain name.  I can use it to search for a bin/ file in one of my installed dists, but I can't seem to get any result looking for a resources/ file.

[21:19] <japhb> For example, this works: for $*REPO.repo-chain -> $repo { with $repo.?files('bin/mugs-cli') { say $_.raku } }

[21:19] <japhb> (${:api(v0), :auth(""), :checksum(Str), :source("8F495836A3872E644F6D35F6A512D447ACDD4DF4"), :ver(v0.0.2)},).Seq

[21:20] <japhb> (Although I expected an fully specified source, not the single hash there.)

[21:20] <japhb> But this does not: for $*REPO.repo-chain -> $repo { with $repo.?files('resources/conf/user-defaults.yaml') { say $_.raku } }

[21:21] <japhb> I assume I'm Holding It Wrong, but I'm kinda stuck.  Any pointers?

[21:22] <japhb> (FWIW, I looked through my site install tree and actually found the YAML file in question, so it's clearly been installed.)

[21:45] <codesections> japhb: I haven't gone that deep into CUR (yet), so this could be entirely wrong.  But wouldn't you get to files in resources with $repo.resource rather than $repo.files?  (https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/Repository/Installation.pm6#L590-L594)

[22:14] <japhb> codesections: I'm actually trying to see if it's possible to find all dists that have a certain file in them, rather than trying to find the contents of a given resource file in a given dist.  I was researching ways to write a plugin system, and one of the ideas I had was for plugin dists to include a special resource file that listed the plugins that dist provides, and searching for all dists that had 

[22:14] <japhb> that file.

[22:26] <codesections> I still meant walking the repo chain, though. Something like:  $*REPO.repo-chain -> $repo { with $repo.?resource('resources/conf/user-defaults.yaml') { say $_.raku } }

[22:28] <codesections> I would have thought that'd give you the list you're talking about, but I could be misunderstanding (either what that would give you or what you want)

[22:50] <nine> japhb: files is just not meant for finding resources

[22:50] <ugexe> eh, i was leaning more towards bug

[22:51] <nine> I may of course just be wrong :)

[22:51] <ugexe> https://github.com/rakudo/rakudo/blob/c5d635d99cf19d4fc4d9d1edfd06f7a6fd0d38a0/src/core.c/CompUnit/Repository/FileSystem.pm6#L198-L199 i would have expected that to catch it, but it doesnt appear to do so

[22:52] <ugexe> ah thats for CURFS

[22:52] <ugexe> so with -I. or -Ilib .files(...) will find resources

[22:57] <ugexe> japhb: for CURI you can call .files("resources/.../foo.json", :name($name-of-dist)), although it requiring the :name seems like it might be a bug (CURFS can do it, so i would expect CURI to)

[23:00] <japhb> ugexe: Ah, OK.  So I had interpreted the API OK at least.

[23:05] <ugexe> https://github.com/rakudo/rakudo/blob/c5d635d99cf19d4fc4d9d1edfd06f7a6fd0d38a0/src/core.c/CompUnit/Repository/Installation.pm6#L361 this multi just needs to be reworked to iterated `self.installed` instead of `self.candidates(...)` when $file starts with `resource/` i think

[23:06] <ugexe> using .candidates is a fast path though, which we want for bin/ files

[23:07] *** dogbert11 joined
[23:10] *** dogbert17 left
[23:53] *** JRaspass joined
