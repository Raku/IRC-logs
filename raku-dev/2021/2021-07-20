[00:03] *** reportable6 left
[00:04] *** reportable6 joined
[00:35] *** jgaz joined
[01:21] *** jgaz left
[02:18] *** Kaiepi left
[02:18] *** Kaipi joined
[04:11] *** japhb left
[04:14] *** japhb joined
[05:14] *** sourceable6 left
[05:14] *** bloatable6 left
[05:14] *** greppable6 left
[05:14] *** statisfiable6 left
[05:14] *** unicodable6 left
[05:14] *** reportable6 left
[05:14] *** evalable6 left
[05:14] *** tellable6 left
[05:14] *** committable6 left
[05:14] *** squashable6 left
[05:14] *** linkable6 left
[05:14] *** reportable6 joined
[05:15] *** evalable6 joined
[05:15] *** squashable6 joined
[05:15] *** tellable6 joined
[05:15] *** statisfiable6 joined
[05:15] *** greppable6 joined
[05:16] *** sourceable6 joined
[05:16] *** linkable6 joined
[05:16] *** unicodable6 joined
[05:16] *** bloatable6 joined
[05:16] *** committable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[07:42] <Geth> ¦ rakudo: gfldex++ created pull request #4469: Positional hyperwhatever

[07:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4469

[08:10] *** patrickb joined
[08:12] *** dogbert17 joined
[08:12] *** dogbert11 left
[08:35] *** squashable6 left
[08:37] *** squashable6 joined
[09:47] <Geth> ¦ nqp/new-disp: b6221b0e3c | (Jonathan Worthington)++ | 2 files

[09:47] <Geth> ¦ nqp/new-disp: Tweak to enable rebootstraping NQP on new-disp

[09:47] <Geth> ¦ nqp/new-disp: 

[09:47] <Geth> ¦ nqp/new-disp: Our circularity saw is certainly a hack saw.

[09:47] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/b6221b0e3c

[10:10] <Geth> ¦ nqp/new-disp: 4489c4ee24 | (Jonathan Worthington)++ | 11 files

[10:10] <Geth> ¦ nqp/new-disp: Rebootstrap NQP on MoarVM

[10:10] <Geth> ¦ nqp/new-disp: 

[10:10] <Geth> ¦ nqp/new-disp: In preparation for being able to start removing various bits that are

[10:10] <Geth> ¦ nqp/new-disp: being replaced by new-disp.

[10:10] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/4489c4ee24

[10:16] <Geth> ¦ nqp/new-disp: c9d6b86254 | (Jonathan Worthington)++ | src/core/NQPRoutine.nqp

[10:16] <Geth> ¦ nqp/new-disp: Don't compile legacy multi dispatcher on MoarVM

[10:16] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/c9d6b86254

[10:25] <Geth> ¦ rakudo/new-disp: 012725c047 | (Jonathan Worthington)++ | 2 files

[10:25] <Geth> ¦ rakudo/new-disp: Don't compile legacy dispatchers on MoarVM

[10:25] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/012725c047

[10:25] <Geth> ¦ rakudo/new-disp: eceeb50837 | (Jonathan Worthington)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[10:25] <Geth> ¦ rakudo/new-disp: Remove multi cache addition on MoarVM

[10:25] <Geth> ¦ rakudo/new-disp: 

[10:25] <Geth> ¦ rakudo/new-disp: We should eventually eliminate the whole dispatch algorithm here in

[10:25] <Geth> ¦ rakudo/new-disp: favor of the MoarVM version, however for now it's still used in an

[10:25] <Geth> ¦ rakudo/new-disp: introspective case.

[10:25] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/eceeb50837

[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:08] *** sena_kun joined
[11:18] <Geth> ¦ rakudo: 39ba888487 | (Elizabeth Mattijsen)++ | 2 files

[11:18] <Geth> ¦ rakudo: Make Uni cmp Uni work

[11:18] <Geth> ¦ rakudo: 

[11:18] <Geth> ¦ rakudo: Also change the infix:<cmp>(@a,@b) candidate to infix:<cmp>(List:D,List:D)

[11:18] <Geth> ¦ rakudo: so that we can be assured that only actual Lists will take that candidate.

[11:18] <Geth> ¦ rakudo: 

[11:18] <Geth> ¦ rakudo: This also makes cmp work on native arrays, albeit through the long and

[11:18] <Geth> ¦ rakudo: slow way of making them Lists first.  To be fixed in consecutive commits.

[11:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/39ba888487

[11:31] <sena_kun> releasable6, status

[11:31] <releasable6> sena_kun, Next release in ≈3 days and ≈7 hours. 4 blockers. Changelog for this release was not started yet

[11:31] <releasable6> sena_kun, Details: https://gist.github.com/d6671d7a8a04dfe98d115523ce4c5fff

[11:56] <Geth> ¦ rakudo: 76714ca4a7 | (Elizabeth Mattijsen)++ | 2 files

[11:56] <Geth> ¦ rakudo: Add native array candidates for infix:<cmp>

[11:56] <Geth> ¦ rakudo: 

[11:56] <Geth> ¦ rakudo: This makes cmp-ing native arrays about 3.5x as fast (in the worst case

[11:56] <Geth> ¦ rakudo: for native arrays that are identical).  Faster still for other cases.

[11:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/76714ca4a7

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:26] *** dogbert11 joined
[12:28] *** dogbert17 left
[12:53] *** MasterDuke joined
[12:57] <Geth> ¦ rakudo: f3ff062120 | (Elizabeth Mattijsen)++ | 2 files

[12:57] <Geth> ¦ rakudo: Add infix:<cmp> candidates for Iterator and Seq

[12:57] <Geth> ¦ rakudo: 

[12:57] <Geth> ¦ rakudo: The Iterator one being an implementation-detail, at least for now.

[12:57] <Geth> ¦ rakudo: 

[12:57] <Geth> ¦ rakudo: The reason this code resides in Order, is that it needs Order to be

[12:57] <Geth> ¦ rakudo: able to work.  Earlier in the setting it either won't compile, or

[12:57] <Geth> ¦ rakudo: bail on the static optimization stage.

[12:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f3ff062120

[14:24] <Geth> ¦ rakudo: 50bd1717c3 | (Elizabeth Mattijsen)++ | 2 files

[14:24] <Geth> ¦ rakudo: Make List cmp List about 25% faster

[14:24] <Geth> ¦ rakudo: 

[14:24] <Geth> ¦ rakudo: Again, for the worst case of identical Lists.  Moved the List logic

[14:24] <Geth> ¦ rakudo: to Order, to allow for this optimization.

[14:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/50bd1717c3

[15:46] <Geth> ¦ nqp/new-disp: e2dc30dd09 | (Jonathan Worthington)++ | 4 files

[15:46] <Geth> ¦ nqp/new-disp: Remove multicache[find|add] ops on MoarVM

[15:46] <Geth> ¦ nqp/new-disp: 

[15:46] <Geth> ¦ nqp/new-disp: The tests for it are moved into the JVM tests, since it is still used

[15:46] <Geth> ¦ nqp/new-disp: there.

[15:46] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/e2dc30dd09

[16:36] *** patrickb left
[17:22] <Geth> ¦ rakudo/remove-inv-prot: d4f32a6654 | (Jonathan Worthington)++ | 8 files

[17:22] <Geth> ¦ rakudo/remove-inv-prot: Attempt to remove InvocationProtocl on MoarVM

[17:22] <Geth> ¦ rakudo/remove-inv-prot: 

[17:22] <Geth> ¦ rakudo/remove-inv-prot: For merge once p6capturelex and other ops are expunged, since they turn

[17:22] <Geth> ¦ rakudo/remove-inv-prot: out to depend on it.

[17:22] <Geth> ¦ rakudo/remove-inv-prot: review: https://github.com/rakudo/rakudo/commit/d4f32a6654

[17:52] *** sena_kun left
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[19:49] *** japhb left
[19:56] *** japhb joined
[20:48] <Geth> ¦ rakudo/iterable-cmp: 342a442e60 | (Elizabeth Mattijsen)++ | src/core.c/Order.pm6

[20:48] <Geth> ¦ rakudo/iterable-cmp: Add Iterable cmp Iterable candidates

[20:48] <Geth> ¦ rakudo/iterable-cmp: 

[20:48] <Geth> ¦ rakudo/iterable-cmp: If either side of an infix:<cmp> is an Iterable, then use the iterator

[20:48] <Geth> ¦ rakudo/iterable-cmp: on both sides to determine the result, rather than stringifying the

[20:48] <Geth> ¦ rakudo/iterable-cmp: Iterable(s).  This is, I think, more correct, and much more memory

[20:48] <Geth> ¦ rakudo/iterable-cmp: friendly as there is not Str representation created of the argument.

[20:48] <Geth> ¦ rakudo/iterable-cmp: 

[20:48] <Geth> ¦ rakudo/iterable-cmp: <…commit message has 8 more lines…>

[20:48] <Geth> ¦ rakudo/iterable-cmp: review: https://github.com/rakudo/rakudo/commit/342a442e60

[20:49] <Geth> ¦ rakudo: lizmat++ created pull request #4470: Add Iterable cmp Iterable candidates

[20:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4470

[20:56] <lizmat> m: my @a = ^10; my int @b = ^10; say @a eqv @b   # somehow I expected that to be True ?

[20:56] <camelia> rakudo-moar 50bd1717c: OUTPUT: «False␤»

[21:10] <gfldex> lizmat: Comparing is hard. :-/

[21:13] <gfldex> m: say so (1,2,3) cmp (1..∞);

[21:13] <camelia> rakudo-moar 50bd1717c: OUTPUT: «True␤»

[21:13] <gfldex> m: say (1,2,3) cmp (1..∞);

[21:13] <camelia> rakudo-moar 50bd1717c: OUTPUT: «Less␤»

[21:13] <gfldex> m: say "1" cmp (1..∞);

[21:13] <camelia> rakudo-moar 50bd1717c: OUTPUT: «Less␤»

[21:19] <gfldex> m: say (2..∞) cmp (1..∞);

[21:19] <camelia> rakudo-moar 50bd1717c: OUTPUT: «More␤»

[21:19] <raydiak> m: say (my int @).^mro # beisdes the parameterization mismatch, it isn't even an Array

[21:19] <camelia> rakudo-moar 50bd1717c: OUTPUT: «((array[int]) (array) (Any) (Mu))␤»

[21:20] <gfldex> lizmat: Infinite lists may need special treatment too.

[22:33] *** evalable6 left
[22:33] *** linkable6 left
[22:33] *** evalable6 joined
[22:34] *** linkable6 joined
[22:45] <timo> lizmat: but eqv wants the type to be the same too, right? and array[Int] wouldn't match Array?

[23:12] <raydiak> that's what I was getting at ^^^^ up there. here's some other things you might stumble over if you were trying to ignore the type and compare the values:

[23:12] <raydiak> m: my @a = ^3; my int @b = ^3; dd @a.list; dd @b.list; dd @a[*]; dd @b[*]; dd @a.values; dd @b.values;

[23:12] <camelia> rakudo-moar 50bd1717c: OUTPUT: «Array @a = [0, 1, 2]␤(0, 1, 2)␤(0, 1, 2)␤array[int].new(0, 1, 2)␤(0, 1, 2).Seq␤(0, 1, 2)␤»

[23:15] <raydiak> you could always explicitly cast to Array or List of course, but all of ^ that mismatch surprised me

[23:54] *** evalable6 left
[23:54] *** linkable6 left
[23:55] *** linkable6 joined
[23:57] *** evalable6 joined
