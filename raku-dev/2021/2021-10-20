[00:02] *** reportable6 left
[00:46] *** Xliff joined
[01:03] *** reportable6 joined
[01:57] *** frost joined
[03:40] *** linkable6 left
[03:40] *** evalable6 left
[03:40] *** quotable6 left
[03:40] *** statisfiable6 left
[03:40] *** bloatable6 left
[03:40] *** notable6 left
[03:40] *** greppable6 left
[03:40] *** coverable6 left
[03:40] *** reportable6 left
[03:40] *** unicodable6 left
[03:40] *** bisectable6 left
[03:40] *** nativecallable6 left
[03:40] *** tellable6 left
[03:40] *** sourceable6 left
[03:40] *** shareable6 left
[03:40] *** releasable6 left
[03:40] *** squashable6 left
[03:41] *** sourceable6 joined
[03:41] *** releasable6 joined
[03:41] *** statisfiable6 joined
[03:42] *** linkable6 joined
[03:42] *** evalable6 joined
[03:43] *** linkable6 joined
[03:43] *** evalable6 joined
[03:43] *** notable6 joined
[03:53] *** Xliff left
[04:41] *** coverable6 joined
[04:41] *** reportable6 joined
[04:41] *** bloatable6 joined
[04:41] *** squashable6 joined
[04:42] *** quotable6 joined
[04:43] *** shareable6 joined
[04:43] *** tellable6 joined
[05:41] *** bisectable6 joined
[05:41] *** greppable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:14] *** Util left
[06:19] *** melezhik left
[06:21] *** Util joined
[07:00] <releasable6> Next release in ‚âà2 days and ‚âà11 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft
[07:00] *** sjn_ joined
[07:07] *** djinni`_ joined
[07:09] *** sjn left
[07:09] *** djinni` left
[07:09] *** ilogger2 left
[07:12] *** ilogger2 joined
[07:31] <Kaiepi> there's a slight inconsistency between Metamodel::CurriedRoleHOW and Metamodel::ParametricRoleHOW in how they deal with compos(aliza)bility of doees in my roles pr
[07:31] <Kaiepi> the former checks the composability of all doees, while the latter only considers that if it needs composalizing
[07:35] <Kaiepi> i'm erring towards the latter being correct, but this is a sign of other problems to do with inherit(aliz)ability and compos(aliz)ability checks with add_parent and add_role that could be resolved by encoding them into theier metamethods of sorts, but is too breaking to do at the same time as all this
[07:35] <Kaiepi> can parents and doees be trusted to be inheritable and composable before then?
[07:35] <Kaiepi> if not -alizable
[07:36] <Kaiepi> s/theier/their own/
[07:40] <Kaiepi> er, the latter considers it when generic, not composalizable
[07:41] *** nativecallable6 joined
[07:42] <Kaiepi> ig the question is "is .^add_parent($non_inheritable)/.^add_role($none_composable)" DIHWIDT?
[07:43] *** unicodable6 joined
[07:58] <[Tux]> Rakudo v2021.09-279-g1d8bf66a5 (v6.d) on MoarVM 2021.09-667-gc43ee9dff
[07:58] <[Tux]> csv-test-xs-20      0.368 -  0.393
[07:58] <[Tux]> test-t --race       1.028 -  1.029
[07:58] <[Tux]> csv-ip5xs           1.402 -  1.431
[07:58] <[Tux]> test-t              1.736 -  1.774
[07:58] <[Tux]> csv-parser          4.717 -  4.737
[07:58] <[Tux]> test                7.546 -  7.824
[07:58] <[Tux]> test-t-20 --race    7.941 -  8.388
[07:58] <[Tux]> csv-ip5xs-20       15.297 - 15.696
[07:58] <[Tux]> test-t-20          25.538 - 26.473
[09:04] *** squashable6 left
[09:06] *** squashable6 joined
[09:43] <Kaiepi> the design docs specify that this:
[09:43] <Kaiepi> m: class Abstract { method abstract { ... } }; class Concrete::Sorta is Abstract { }
[09:43] <camelia> rakudo-moar 1d8bf66a5: ( no output )
[09:43] <Kaiepi> should behave like
[09:44] <Kaiepi> m: role Abstract { method abstract { ... } }; class Concrete::Sorta does Abstract { }
[09:44] <camelia> rakudo-moar 1d8bf66a5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Method 'abstract' must be implemented by Concrete::Sorta because it is required by roles: Abstract.‚ê§at <tmp>:1‚ê§¬ª
[09:44] <Kaiepi> which was the barrier to not breaking things
[09:44] <Kaiepi> s/was/should be/
[09:45] <Kaiepi> resolve, i mean
[09:47] <Kaiepi> idk, that not throwiwng seems like something someone could depend on in odd ways
[09:48] <Mondenkind> m: class Abstract { method abstract { ... } }; class Concrete::Sorta is Abstract { }; Concrete::Sorta.abstract
[09:48] <camelia> rakudo-moar 1d8bf66a5: OUTPUT: ¬´Stub code executed‚ê§  in method abstract at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[09:49] <Mondenkind> type-checks should happen 'at runtime, at latest'.  So imo that is suboptimal but fine
[10:00] <lizmat> well, if you depend on that behaviour, and your program doesn't crash, you are clearly not using that stubbed method
[10:00] <lizmat> which feels fine to me?
[10:29] *** Altai-man joined
[10:56] *** Util left
[11:03] *** Util joined
[11:14] <Altai-man> releasable6, status
[11:14] <releasable6> Altai-man, Next release in ‚âà2 days and ‚âà7 hours. 1 blocker. 0 out of 279 commits logged
[11:14] <releasable6> Altai-man, Details: https://gist.github.com/57125674cbc01df089dab7db7fa39c2f
[11:23] <Altai-man> releasable6, status
[11:23] <releasable6> Altai-man, Next release in ‚âà2 days and ‚âà7 hours. 1 blocker. 4 out of 279 commits logged
[11:23] <releasable6> Altai-man, Details: https://gist.github.com/617d3f0e27b8379ddb014c52fe39ed4d
[11:51] <Geth> ¬¶ rakudo/megamorphic-handlers: 203f9afb4d | (Jonathan Worthington)++ | src/Perl6/Actions.nqp
[11:51] <Geth> ¬¶ rakudo/megamorphic-handlers: Lift $!do reading out of `for` loop body
[11:51] <Geth> ¬¶ rakudo/megamorphic-handlers: 
[11:51] <Geth> ¬¶ rakudo/megamorphic-handlers: Which avoids a tiny bit of cost every iteration of a statement-level
[11:51] <Geth> ¬¶ rakudo/megamorphic-handlers: `for` loop.
[11:51] <Geth> ¬¶ rakudo/megamorphic-handlers: review: https://github.com/rakudo/rakudo/commit/203f9afb4d
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:35] <Kaiepi> hm
[12:35] <Kaiepi> it may be possible to avoid the breakage otherwise, just kind of a headache
[13:50] *** frost left
[13:58] <Geth> ¬¶ rakudo: d4f7d1742c | tony-o++ (committed using GitHub Web editor) | src/core.c/operators.pm6
[13:58] <Geth> ¬¶ rakudo: Fixes `require STUB:file<>` bug #4488 (#4582)
[13:58] <Geth> ¬¶ rakudo: 
[13:58] <Geth> ¬¶ rakudo: * bug fix for #4488
[13:58] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/d4f7d1742c
[13:58] *** linkable6 left
[14:01] *** linkable6 joined
[14:44] <tbrowder> .tell sena_kun please check my ChangeLog-Draft entry for correctness when you get a chance
[14:44] <tellable6> tbrowder, I'll pass your message to sena_kun
[14:48] <Altai-man> tbrowder, hi! Looks good to me, thanks.
[15:25] *** evalable6 left
[15:25] *** linkable6 left
[15:26] *** linkable6 joined
[15:28] *** evalable6 joined
[15:29] <[Tux]> Rakudo v2021.09-280-gd4f7d1742 (v6.d) on MoarVM 2021.09-674-g5c6fd3b4d
[15:29] <[Tux]> csv-test-xs-20      0.366 -  0.373
[15:29] <[Tux]> test-t --race       1.005 -  1.013
[15:29] <[Tux]> csv-ip5xs           1.382 -  1.427
[15:29] <[Tux]> test-t              1.647 -  1.680
[15:29] <[Tux]> csv-parser          4.495 -  4.606
[15:29] <[Tux]> test                7.183 -  7.260
[15:29] <[Tux]> test-t-20 --race    8.335 -  8.550
[15:30] <[Tux]> csv-ip5xs-20       15.688 - 15.926
[15:30] <[Tux]> test-t-20          24.395 - 24.470
[15:30] <[Tux]> PC was less active, so I ran it again
[16:28] *** linkable6 left
[16:28] *** evalable6 left
[16:29] *** linkable6 joined
[17:09] <timo> one of the things that required new-disp to work correctly was that TUI widget library. have we been testing that since then?
[17:13] <timo> https://github.com/vrurg/raku-Vikna
[17:20] *** Altai-man left
[18:02] *** reportable6 left
[18:21] <tbrowder> .tell Altai-man you are very welcome
[18:21] <tellable6> tbrowder, I'll pass your message to Altai-man
[18:28] *** evalable6 joined
[19:28] *** linkable6 left
[19:28] *** evalable6 left
[19:29] *** linkable6 joined
[20:31] *** evalable6 joined
[21:34] *** sjn_ is now known as sjn
[22:04] *** reportable6 joined
[22:14] *** dogbert17 left
[22:53] *** dogbert17 joined
[23:53] *** notable6 left
[23:53] *** unicodable6 left
[23:53] *** evalable6 left
[23:53] *** reportable6 left
[23:53] *** greppable6 left
[23:53] *** sourceable6 left
[23:53] *** statisfiable6 left
[23:53] *** linkable6 left
[23:53] *** nativecallable6 left
[23:53] *** quotable6 left
[23:53] *** bloatable6 left
[23:53] *** releasable6 left
[23:53] *** shareable6 left
[23:53] *** coverable6 left
[23:53] *** tellable6 left
[23:53] *** bisectable6 left
[23:53] *** committable6 left
[23:53] *** benchable6 left
[23:53] *** squashable6 left
[23:53] *** coverable6 joined
[23:53] *** bloatable6 joined
[23:53] *** sourceable6 joined
[23:54] *** notable6 joined
[23:55] *** committable6 joined
[23:55] *** reportable6 joined
[23:56] *** linkable6 joined
[23:56] *** releasable6 joined
[23:56] *** squashable6 joined
