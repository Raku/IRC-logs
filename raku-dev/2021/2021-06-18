[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[01:29] *** evalable6 left
[01:29] *** linkable6 left
[01:30] *** evalable6 joined
[01:31] *** linkable6 joined
[02:32] *** evalable6 left
[02:32] *** linkable6 left
[02:32] *** linkable6 joined
[02:34] *** evalable6 joined
[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:34] *** linkable6 left
[03:34] *** evalable6 left
[03:35] *** evalable6 joined
[03:35] *** linkable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:54] <[TuxCM]> Rakudo v2021.05-23-g4f61a108b (v6.d) on MoarVM 2021.05-14-g0a62f0c6a

[06:54] <[TuxCM]> csv-test-xs-20      0.370 -  0.373

[06:54] <[TuxCM]> csv-ip5xs           0.871 -  0.880

[06:54] <[TuxCM]> test-t --race       0.927 -  0.959

[06:54] <[TuxCM]> test-t              2.070 -  2.090

[06:54] <[TuxCM]> test                7.960 -  8.182

[06:54] <[TuxCM]> csv-ip5xs-20        9.443 - 10.743

[06:54] <[TuxCM]> test-t-20 --race   10.539 - 10.541

[06:54] <[TuxCM]> csv-parser         29.307 - 31.988

[06:54] <[TuxCM]> test-t-20          37.307 - 37.493

[07:09] <Geth> ¦ rakudo/fix_race_condition_in_supplier: 4953a29997 | (Stefan Seifert)++ | src/core.c/Supplier.pm6

[07:09] <Geth> ¦ rakudo/fix_race_condition_in_supplier: Fix bogus "emit without supply or react" in Supplier's TapList

[07:09] <Geth> ¦ rakudo/fix_race_condition_in_supplier: 

[07:09] <Geth> ¦ rakudo/fix_race_condition_in_supplier: Avoid auto-vivification of the Scalar container for the $!tappers

[07:09] <Geth> ¦ rakudo/fix_race_condition_in_supplier: attribute when reading. That could lead to a Mu overwriting the list

[07:09] <Geth> ¦ rakudo/fix_race_condition_in_supplier: in $!tappers after we've already set $added to True in method tap,

[07:09] <Geth> ¦ rakudo/fix_race_condition_in_supplier: causing us to blow up when we try to call .emit on that Mu.

[07:09] <Geth> ¦ rakudo/fix_race_condition_in_supplier: 

[07:09] <Geth> ¦ rakudo/fix_race_condition_in_supplier: Fixes GH #4410

[07:09] <Geth> ¦ rakudo/fix_race_condition_in_supplier: review: https://github.com/rakudo/rakudo/commit/4953a29997

[07:09] <Geth> ¦ rakudo: niner++ created pull request #4414: Fix bogus "emit without supply or react" in Supplier's TapList

[07:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4414

[07:42] <Geth> ¦ rakudo: a9510b8d37 | (Daniel Green)++ | 2 files

[07:42] <Geth> ¦ rakudo: Try to rename precomp files multiple times on Windows

[07:42] <Geth> ¦ rakudo: 

[07:42] <Geth> ¦ rakudo: File renaming can easily race and fail on Windows. There's no great solution,

[07:42] <Geth> ¦ rakudo: so instead just try 10 times catching a failure (and returning out of the

[07:42] <Geth> ¦ rakudo: loop and method if it succeeds), and if it hasn't succeeded after that, try

[07:42] <Geth> ¦ rakudo: one more time without catching a failure.

[07:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a9510b8d37

[07:42] <Geth> ¦ rakudo: 7dfed29c76 | (Daniel Green)++ | src/core.c/CompUnit/PrecompilationStore/File.pm6

[07:42] <Geth> ¦ rakudo: Pull repeated code to try something a number of...

[07:42] <Geth> ¦ rakudo: 

[07:42] <Geth> ¦ rakudo: of times into a sub.

[07:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7dfed29c76

[07:42] <Geth> ¦ rakudo: 292e8c86d2 | MasterDuke17++ (committed using GitHub Web editor) | 2 files

[07:42] <Geth> ¦ rakudo: Merge pull request #4411 from MasterDuke17/try_renaming_precomp_files_multiples_times_on_windows

[07:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/292e8c86d2

[07:42] <moon-child> oh my

[07:43] <MasterDuke> ?

[07:44] <moon-child> 'file renaming can easily race and fail on windows'

[07:44] <MasterDuke> yeah. it's annoying

[07:45] <moon-child> some aspects of windows's design are clearly superior to unix.  Some are just--wtf

[08:25] *** frost joined
[09:13] <Geth> ¦ rakudo/done-with-value: 9a6ee54a49 | (Elizabeth Mattijsen)++ | 2 files

[09:13] <Geth> ¦ rakudo/done-with-value: Simplify by jnthn++'s suggestion

[09:13] <Geth> ¦ rakudo/done-with-value: review: https://github.com/rakudo/rakudo/commit/9a6ee54a49

[09:34] <Geth> ¦ rakudo: 452e92ed63 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/control.pm6

[09:34] <Geth> ¦ rakudo: Introduce "done foo" as shortcut for "emit foo; done" (#4412)

[09:34] <Geth> ¦ rakudo: 

[09:34] <Geth> ¦ rakudo: As discussed in https://github.com/Raku/problem-solving/issues/249

[09:34] <Geth> ¦ rakudo: 

[09:34] <Geth> ¦ rakudo: This makes the "done" sub a multi and adds a candidate that does an `emit` of the value, before actually doing a `done`.

[09:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/452e92ed63

[09:35] *** linkable6 left
[09:37] *** linkable6 joined
[09:48] <Geth> ¦ nqp: 535a65d6ee | (Daniel Green)++ | tools/templates/MOAR_REVISION

[09:48] <Geth> ¦ nqp: Bump MoarVM for include paths in config data

[09:48] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/535a65d6ee

[09:59] <Geth> ¦ rakudo: 2c3a1a04d9 | (Daniel Green)++ | tools/templates/NQP_REVISION

[09:59] <Geth> ¦ rakudo: Bump NQP...

[09:59] <Geth> ¦ rakudo: 

[09:59] <Geth> ¦ rakudo: For include paths in config data from MoarVM and removing a JVM

[09:59] <Geth> ¦ rakudo: workaround in NQP.

[09:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2c3a1a04d9

[10:00] <MasterDuke> vrurg: ^^^ now nqp and rakudo can get the include path information from the 'moar::hllincludes' key in the --show-config data

[10:21] <nine> lizmat: has Mu $!tappers is built(False) is built(:bind) = Mu; looks interesting. I just don't understand it :D. But then, I'm quite ironically actually not that good a Raku programmer. I tend to write kind of baby Raku

[10:21] <lizmat> well...  actually it's a roundabout way to abuse the standard object build process

[10:22] <lizmat> I was just realizing that perhaps for that class, we shouldn't be using the standard object build process at all

[10:22] <lizmat> am in the middle of implementing "last foo" now

[10:22] <lizmat> we can accept the PR at least for this release anyway

[11:12] <lizmat> m: my @a = ^10; dd @a.nodemap({ dd $_; last if $_ > 5 }   # last in nodemap is broken

[11:12] <camelia> rakudo-moar 2c3a1a04d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3f $_ > 5 }   # last in nodemap is broken7⏏5<EOL>␤»

[11:12] <lizmat> m: my @a = ^10; dd @a.nodemap({ dd $_; last if $_ > 5 })   # last in nodemap is broken

[11:12] <camelia> rakudo-moar 2c3a1a04d: OUTPUT: «Int @a = 0␤Int @a = 1␤Int @a = 2␤Int @a = 3␤Int @a = 4␤Int @a = 5␤Int @a = 6␤Int @a = 7␤Int @a = 8␤Int @a = 9␤(Empty, Empty, Empty, Empty, Empty, Empty)␤»

[11:12] *** frost left
[11:15] <lizmat> m: my @a = ^10; dd @a.nodemap({ $_ == 5 ?? (last) !! $_ })   # perhaps clearer

[11:15] <camelia> rakudo-moar 2c3a1a04d: OUTPUT: «(0, 1, 2, 3, 4, 6, 7, 8, 9)␤»

[11:21] <lizmat> m: my @a = ^10; dd @a.deepmap({ dd $_; last if $_ > 5 }   # also in deepmap :-(

[11:21] <camelia> rakudo-moar 2c3a1a04d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3last if $_ > 5 }   # also in deepmap :-(7⏏5<EOL>␤»

[11:21] <lizmat> m: my @a = ^10; dd @a.deepmap({ dd $_; last if $_ > 5 } )  # also in deepmap :-(

[11:21] <camelia> rakudo-moar 2c3a1a04d: OUTPUT: «Int @a = 0␤Int @a = 1␤Int @a = 2␤Int @a = 3␤Int @a = 4␤Int @a = 5␤Int @a = 6␤Int @a = 7␤Int @a = 8␤Int @a = 9␤Array element = []␤»

[11:21] <lizmat> m: my @a = ^10; dd @a.deepmap({ $_ == 5 ?? (last) !! $_ } )  # also in deepmap :-(

[11:21] <camelia> rakudo-moar 2c3a1a04d: OUTPUT: «Array element = [0, 1, 2, 3, 4, 6, 7, 8, 9]␤»

[11:22] <lizmat> both to be fixed in upcoming PR to make "last foo" possible

[11:30] <Geth> ¦ rakudo: 4953a29997 | (Stefan Seifert)++ | src/core.c/Supplier.pm6

[11:30] <Geth> ¦ rakudo: Fix bogus "emit without supply or react" in Supplier's TapList

[11:30] <Geth> ¦ rakudo: 

[11:30] <Geth> ¦ rakudo: Avoid auto-vivification of the Scalar container for the $!tappers

[11:30] <Geth> ¦ rakudo: attribute when reading. That could lead to a Mu overwriting the list

[11:30] <Geth> ¦ rakudo: in $!tappers after we've already set $added to True in method tap,

[11:30] <Geth> ¦ rakudo: causing us to blow up when we try to call .emit on that Mu.

[11:30] <Geth> ¦ rakudo: 

[11:30] <Geth> ¦ rakudo: Fixes GH #4410

[11:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4953a29997

[11:30] <Geth> ¦ rakudo: ca8dea277a | niner++ (committed using GitHub Web editor) | src/core.c/Supplier.pm6

[11:30] <Geth> ¦ rakudo: Merge pull request #4414 from rakudo/fix_race_condition_in_supplier

[11:30] <Geth> ¦ rakudo: 

[11:30] <Geth> ¦ rakudo: Fix bogus "emit without supply or react" in Supplier's TapList

[11:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ca8dea277a

[11:31] *** linkable6 left
[11:34] *** linkable6 joined
[11:48] <lizmat> $ r 'my @a = ^10; dd @a.grep({ $_ > 5 ?? (last 42) !! True })'

[11:48] <lizmat> (0, 1, 2, 3, 4, 5, 42).Seq

[11:49] <lizmat> meh   after making "last foo" work on for loops and the mapxxx variants, this is now what .grep does

[11:50] <lizmat> feels like a major rewrite of .grep will be needed, which may not be a bad thing, but still

[11:55] <Altai-man> lizmat, hmm, is it a regression or?

[11:55] <lizmat> no

[11:55] <Altai-man> good

[11:55] <lizmat> "last 42" is not supported on master  just yet  :-)

[11:55] <Altai-man> I see

[11:55] <Altai-man> releasable6, status

[11:56] <releasable6> Altai-man, Next release in ≈1 day and ≈7 hours. There are no known blockers. 1 out of 37 commits logged

[11:56] <releasable6> Altai-man, Details: https://gist.github.com/b35306c931d29cbc93fb4377472636b0

[11:56] <Geth> ¦ rakudo/last-with-value: ce66f1e7f3 | (Elizabeth Mattijsen)++ | 2 files

[11:56] <Geth> ¦ rakudo/last-with-value: Introduce "last foo" to end loops *and* return a value

[11:56] <Geth> ¦ rakudo/last-with-value: 

[11:56] <Geth> ¦ rakudo/last-with-value: *and* FIX nodemap / deepmap / duckmap's handling of "last".

[11:56] <Geth> ¦ rakudo/last-with-value: 

[11:56] <Geth> ¦ rakudo/last-with-value: This adds the exception checking logic to all of the standard .map

[11:56] <Geth> ¦ rakudo/last-with-value: functions.  Basically, three cases where to be checked:

[11:56] <Geth> ¦ rakudo/last-with-value: 

[11:56] <Geth> ¦ rakudo/last-with-value: <…commit message has 16 more lines…>

[11:56] <Geth> ¦ rakudo/last-with-value: review: https://github.com/rakudo/rakudo/commit/ce66f1e7f3

[12:02] *** reportable6 left
[12:03] *** squashable6 left
[12:03] *** reportable6 joined
[12:05] *** squashable6 joined
[12:05] <[Coke]> for the 10x retry on windows - do we need to care about the return value? (original happened to return a value, if it works early, we get a bare return)

[12:06] <MasterDuke> rename always returns True

[12:06] <MasterDuke> but it didn't look like it was being used anywhere

[12:12] *** Xliff joined
[12:15] <[Coke]> That

[12:15] <[Coke]> 's fine, I only saw the change in there, didn't look at calling code. Thans.

[12:15] <[Coke]> *Thanks.

[13:13] <Geth> ¦ rakudo/rakuast: 804a0def65 | (Jonathan Worthington)++ | 4 files

[13:13] <Geth> ¦ rakudo/rakuast: RakuAST node for postfix hyper meta-op

[13:13] <Geth> ¦ rakudo/rakuast: 

[13:13] <Geth> ¦ rakudo/rakuast: And implement compilation of the most common cases of it, for `>>++` (a

[13:13] <Geth> ¦ rakudo/rakuast: simple postfix) and `>>.meth` (a simple method call). There are various

[13:13] <Geth> ¦ rakudo/rakuast: other less common cases that shall need attention. Unlike the current

[13:13] <Geth> ¦ rakudo/rakuast: compiler frontend, we give each kind of postfix the ability to decide

[13:13] <Geth> ¦ rakudo/rakuast: how it compiles into a hyper op, rather than just compiling it and then

[13:13] <Geth> ¦ rakudo/rakuast: <…commit message has 5 more lines…>

[13:13] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/804a0def65

[13:29] <Geth> ¦ roast: fd078f9c6d | (Nguyễn Gia Phong)++ | S32-io/mkdir_rmdir.t

[13:29] <Geth> ¦ roast: Retire mkdir tests before it creates parents

[13:29] <Geth> ¦ roast: 

[13:29] <Geth> ¦ roast: Currently mkdir would create parent directories if necessary.

[13:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/fd078f9c6d

[13:29] <Geth> ¦ roast: 155f0fe7e1 | (Nguyễn Gia Phong)++ | S32-io/mkdir_rmdir.t

[13:29] <Geth> ¦ roast: Test mkdir on existing file

[13:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/155f0fe7e1

[13:29] <Geth> ¦ roast: 379aca1ede | (Vadim Belman)++ (committed using GitHub Web editor) | S32-io/mkdir_rmdir.t

[13:29] <Geth> ¦ roast: Merge pull request #736 from McSinyx/mkdir

[13:29] <Geth> ¦ roast: 

[13:29] <Geth> ¦ roast: Test cases where mkdir should fail

[13:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/379aca1ede

[13:52] *** [Coke] left
[13:52] *** [Coke] joined
[13:56] <Geth> ¦ roast: a23d30d6a3 | (Vadim Belman)++ | S32-io/mkdir_rmdir.t

[13:56] <Geth> ¦ roast: Mark a new test as todo

[13:56] <Geth> ¦ roast: 

[13:56] <Geth> ¦ roast: Until MoarVM/MoarVM#1507 is merged

[13:56] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a23d30d6a3

[13:57] *** linkable6 left
[13:57] *** linkable6 joined
[13:58] *** vrurg left
[14:05] *** Kaiepi left
[14:13] *** Kaiepi joined
[14:14] <Geth> ¦ rakudo/rakuast: 50802db20f | (Jonathan Worthington)++ | 3 files

[14:14] <Geth> ¦ rakudo/rakuast: RakuAST node for prefix hyper ops

[14:14] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/50802db20f

[14:21] *** vrurg joined
[14:46] <lizmat> m: dd ^10 .grep: -> \x, \y { x == 4 ?? (last) !! True }

[14:46] <camelia> rakudo-moar ca8dea277: OUTPUT: «((0, 1), (2, 3)).Seq␤»

[14:47] <lizmat> sorry for the noise, but camelia still doesn't allow m: in privmsg ?

[14:48] <AlexDaniel> Camelia always did, I thought?

[14:49] <AlexDaniel> Evalable didn't

[14:49] <lizmat> camelia used to

[14:49] <AlexDaniel> Hmmm

[14:49] <AlexDaniel> Welcome to #whateverable then to spam the bots

[14:50] <AlexDaniel> Not just Camelia 😌

[14:51] <Xliff> Alexdaniel: \o

[14:51] <tellable6> 2021-06-16T19:21:27Z #raku-dev <timo> Xliff yeah that does look like a bug

[14:54] <Xliff> m: use NativeCall; class A is repr<CStruct> { HAS @.array[30] is CArray }; my $a = A.new; $a[0] = 1; $a.elems.say;

[14:54] <camelia> rakudo-moar ca8dea277: OUTPUT: «Cannot modify an immutable A (A.new(array => Nativ...)␤  in block <unit> at <tmp> line 1␤␤»

[14:54] <Xliff> m: use NativeCall; class A is repr<CStruct> { HAS @.array[30] is CArray }; my $a = A.new; $a.array[0] = 1; $a.array.elems.say;

[14:54] <camelia> rakudo-moar ca8dea277: OUTPUT: «CArray cannot be used without a type␤  in method AT-POS at /home/camelia/rakudo-m-inst-1/share/perl6/core/sources/8660F65A7B3492675BB3B2058DB30E411A4C4E54 (NativeCall::Types) line 93␤  in block <unit> at <tmp> line 1␤␤»

[14:55] <Xliff> m: use NativeCall; class A is repr<CStruct> { HAS int8 @.array[30] is CArray }; my $a = A.new; $a.array[0] = 1; $a.array.elems.say;

[14:55] <camelia> rakudo-moar ca8dea277: OUTPUT: «1␤»

[14:55] <Xliff> m: use NativeCall; class A is repr<CStruct> { HAS int8 @.array[30] is CArray }; my $a = A.new; $a.array.elems.say;

[14:55] <camelia> rakudo-moar ca8dea277: OUTPUT: «0␤»

[14:57] <Geth> ¦ rakudo/last-with-value: db91a7f9de | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[14:57] <Geth> ¦ rakudo/last-with-value: Also make "last foo" work on .grep

[14:57] <Geth> ¦ rakudo/last-with-value: 

[14:57] <Geth> ¦ rakudo/last-with-value: If "foo" is true, then that value will be passed through and the

[14:57] <Geth> ¦ rakudo/last-with-value: iteration will be terminated.  If the "foo" is false, then it will

[14:57] <Geth> ¦ rakudo/last-with-value: just terminate the iteration.

[14:57] <Geth> ¦ rakudo/last-with-value: review: https://github.com/rakudo/rakudo/commit/db91a7f9de

[15:02] <Geth> ¦ rakudo: lizmat++ created pull request #4415: Last with value

[15:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4415

[15:05] <Geth> ¦ rakudo/rakuast: d7c0557a1a | (Jonathan Worthington)++ | src/Raku/ast/expressions.rakumod

[15:05] <Geth> ¦ rakudo/rakuast: Don't make infix meta-ops be lookups

[15:05] <Geth> ¦ rakudo/rakuast: 

[15:05] <Geth> ¦ rakudo/rakuast: While they do use something lexical from the setting, that's a pure

[15:05] <Geth> ¦ rakudo/rakuast: implementation detail.

[15:05] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/d7c0557a1a

[15:05] <Geth> ¦ rakudo/rakuast: 710febfab4 | (Jonathan Worthington)++ | 3 files

[15:05] <Geth> ¦ rakudo/rakuast: RakuAST node for infix hyper ops

[15:05] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/710febfab4

[15:10] <lizmat> m: my $i; dd do while ++$i < 10 { dd $i; last if $i == 5 }

[15:10] <camelia> rakudo-moar ca8dea277: OUTPUT: «Int $i = 1␤Int $i = 2␤Int $i = 3␤Int $i = 4␤Int $i = 5␤().Seq␤»

[15:12] <lizmat> m: dd do for ^10 { last if $_ == 5 }

[15:12] <camelia> rakudo-moar ca8dea277: OUTPUT: «()␤»

[15:41] <Geth> ¦ rakudo/rakuast: a67b41d6b5 | (Jonathan Worthington)++ | 3 files

[15:41] <Geth> ¦ rakudo/rakuast: RakuAST for bracketed infixes, infixed functions

[15:41] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/a67b41d6b5

[15:48] <Geth> ¦ rakudo/last-with-value: 9a426135dc | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[15:48] <Geth> ¦ rakudo/last-with-value: Make various other loop constructs sensitive to "last foo"

[15:48] <Geth> ¦ rakudo/last-with-value: review: https://github.com/rakudo/rakudo/commit/9a426135dc

[16:10] <nine> Odd. camelia actually executes the commands in priv msgs. But it doesn't answer

[16:13] <nine> Oh, camelia does try to answer! But on libera.chat users seem to have mode +R by default which prohibits private messages from unregistered users

[16:14] <nine> lizmat: "/mode lizmat -R", then you can talk to camelia in private

[16:15] <lizmat> nine++

[16:15] <lizmat> but I'm registered ?

[16:16] *** lizmat left
[16:16] *** lizmat joined
[16:17] <lizmat> weird

[16:17] <nine> You are, but camelia isn't

[16:17] <lizmat> aha... ok

[17:10] *** cognominal left
[18:02] *** reportable6 left
[18:02] <lucs> camelia needs to be registered, but also it needs to 'identify' itself when it comes on, else no dice.

[18:03] <lucs> s/camelia/all the bots that we want to interact with in /msg when we have +R/

[18:03] *** reportable6 joined
[18:11] <Geth> ¦ rakudo/last-with-value: 5429d909c2 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[18:11] <Geth> ¦ rakudo/last-with-value: Fix issue with grep when storing result in array

[18:11] <Geth> ¦ rakudo/last-with-value: 

[18:11] <Geth> ¦ rakudo/last-with-value: Basically, the grep wrapper was only working correctly if the iterator

[18:11] <Geth> ¦ rakudo/last-with-value: was just being called with "pull-one", but would fail to end if the

[18:11] <Geth> ¦ rakudo/last-with-value: "push-all" method was called on the iterator (my @a = foo.grep...).

[18:11] <Geth> ¦ rakudo/last-with-value: 

[18:11] <Geth> ¦ rakudo/last-with-value: The fix was to have the LAST handler in the grep wrapper for Callables

[18:11] <Geth> ¦ rakudo/last-with-value: throw another "last" with the correct value to be handled by the outer

[18:11] <Geth> ¦ rakudo/last-with-value: handler.

[18:11] <Geth> ¦ rakudo/last-with-value: review: https://github.com/rakudo/rakudo/commit/5429d909c2

[19:01] *** b2gills left
[19:02] *** b2gills joined
[19:03] *** gfldex left
[19:30] *** gfldex joined
[22:15] <Altai-man> releasable6, status

[22:15] <releasable6> Altai-man, Next release in ≈20 hours. There are no known blockers. 1 out of 37 commits logged

[22:15] <releasable6> Altai-man, Details: https://gist.github.com/1b5946e82b9ad5bbb89d9b220a581292

[22:37] *** melezhik joined
[22:37] <melezhik> releasable6: status

[22:37] <releasable6> melezhik, Next release in ≈20 hours. There are no known blockers. 1 out of 37 commits logged

[22:37] <releasable6> melezhik, Details: https://gist.github.com/6d08f4cd80355e6b8faa2a93ebe7eb87

[22:44] *** [Coke] left
[22:44] *** [Coke] joined
[23:00] <releasable6> Next release in ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:33] *** linkable6 left
[23:36] *** linkable6 joined
