[00:11] *** HarmtH left
[00:11] *** HarmtH_ joined
[00:13] *** HarmtH_ left
[00:13] *** HarmtH joined
[01:14] *** HarmtH left
[01:14] *** HarmtH_ joined
[01:15] *** Kaiepi left
[01:15] *** Kaiepi joined
[01:45] *** MasterDuke left
[02:09] *** kvw_5_ joined
[02:12] *** kvw_5 left
[02:28] <tbrowder> .tell codesections new release of Math::FractionalPart has routine as discussed...comments welcome, never too late for changes prior to v1.

[02:28] <tellable6> tbrowder, I'll pass your message to codesections

[03:07] <japhb> üéâ‚Ä≠üéâ‚Ä≠üéâ‚Ä≠  It's out, folks!  Heavily based on Cro and Red, the first major milestone release of MUGS, 0.1.0 (codename Proof-of-Concept) is now out!  :-) :-) :-)  See https://github.com/Raku-MUGS/MUGS/blob/main/docs/announce/v0.1.0.md for details, or ask on #mugs if you'd like to know more.  :-)

[05:59] *** softmoth left
[07:22] <nwc10> So, we seem to have settled on "macosx" (not "darwin").

[07:22] <nwc10> Which means that this breaks expectations:

[07:22] <nwc10> ./rakudo-m -Ilib -e 'say $*DISTRO.name'

[07:22] <nwc10> macos

[07:23] <nwc10> (and fails t/spec/S32-str/utf8-c8.t which skips on "macosx" but not "macos")

[07:23] <nwc10> and I'm not sure what the right fix is. "blame Apple", but they're bigger than us, so what do *we* do?

[07:23] <nwc10> This is: Darwin GCC-Farm-MiniMac.local 20.3.0 Darwin Kernel Version 20.3.0: Thu Jan 21 00:06:51 PST 2021; root:xnu-7195.81.3~1/RELEASE_ARM64_T8101 arm64

[07:26] *** frost-lab joined
[07:28] *** domidumont joined
[07:42] *** frost-lab left
[08:01] *** frost-lab joined
[08:09] *** frost-lab left
[08:20] *** frost-lab joined
[08:21] *** sxmx left
[08:30] *** [Tux] left
[08:45] *** [Tux] joined
[08:45] *** Xliff joined
[08:50] *** MasterDuke joined
[08:52] *** sena_kun left
[09:01] *** sena_kun joined
[10:09] <MasterDuke> japhb: i did a run with the 2021.02, 2021.03, and master tags. how do i generate an html plot comparison of their results?

[10:16] <MasterDuke> japhb: oh, nm, i needed just the `--compare` option to ./analyze

[10:37] <MasterDuke> japhb: next question, is there an easy way to have nqp/rakudo use a moarvm branch? i.e., compare rakudo with moarvm@master and rakudo with moarvm@branch

[10:46] *** Xliff left
[10:55] *** sxmx joined
[11:38] <MasterDuke> japhb: also, just running timeall isn't working, getting `Run command failed to spawn: <path/to/executable/>` for all variants

[11:58] <nwc10> [Coke]: you might be amused by my comments around 07:22 UTC about "macos" without the "x"

[12:10] <ugexe> nwc10: $*KERNEL.name should give darwin... maybe just change the test

[12:12] <nwc10> it does give darwin

[12:13] <nwc10> I only have access to this particular OS X, er macOS box, so I can't confirm that the test passes on "older". But I guess that Travis CI *does*

[12:14] *** MasterDuke left
[12:31] *** MasterDuke joined
[12:47] <nwc10> ugexe: yes, but the chain of if/elseif is all $*DISTRO.name - so it will work, but it would look a bit strange. It more feels sort-of-like we should standardise $*DISTRO.name to something consistent on all "OS X"/"macOS" versions (or whatever the branding police say I must call them)

[12:51] <ugexe> my concern is once we do that for this that in 20 years we have 1000 lines of other special cases for various other systems. the nice thing about $*KERNEL stuff is it is unamed-based so it should be more consistent than what $*DISTRO is trying to do

[12:53] <nwc10> that makes sense. The other specific here is that (I *think* - can't test this) it's really about filesystem - HFS+ (and whatever came next) enforce (some frozen) version of NFC in UTF-8 for their filenames

[12:53] <nwc10> or is it the APIs?

[12:53] <nwc10> you technically could get all sorts of test failures if you have a case insensitve FS mounted on linux

[12:54] <nwc10> or, I think, told your NTFS to be case sensitive (I think it can do this)

[12:54] <nwc10> or just NFS mounted something else onto Win32

[13:06] *** frost-lab left
[13:20] *** tyil left
[13:20] *** tyilanmenyn joined
[13:32] *** b2gills left
[13:33] <lizmat> notable6: weekly

[13:33] <notable6> lizmat, 8 notes: https://gist.github.com/37a01f6c9534573b396c6c2e4fb164e6

[13:39] *** MasterDuke left
[13:39] <lizmat> notable6: weekly reset

[13:39] <notable6> lizmat, Moved existing notes to ‚Äúweekly_2021-03-22T13:39:46Z‚Äù

[13:40] *** MasterDuke joined
[14:49] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/03/22/2021-12-games-begin/

[15:00] *** b2gills joined
[15:09] <[Tux]> lizmat, did you see my question yesterday?

[15:13] * lizmat looks back

[15:19] <lizmat> [Tux]: because there's a missing \" at the end of line 28?

[15:20] <lizmat>         $fh.say ("j,\"k\n", $cs, "k\"");

[15:20] <lizmat> If that's it, I'll push a fix

[15:23] <[Tux]> Well spotted! Thank you

[15:25] <lizmat> pushed

[15:33] <[Tux]> Thanks. FWIW I am working on https://github.com/nightwatchcybersecurity/rfc4180-bis/issues/24

[15:36] <sena_kun> lizmat++

[15:36] *** sivoais left
[15:36] *** sivoais joined
[16:31] *** Kaeipi joined
[16:32] *** Kaiepi left
[16:54] *** Kaeipi left
[16:57] *** Kaiepi joined
[17:19] *** softmoth joined
[17:46] <[Tux]> Rakudo v2021.03-1-gbccb2ce2d (v6.d) on MoarVM 2021.03-6-gc10e33d46

[17:46] <[Tux]> csv-test-xs-20      0.376 -  0.387

[17:46] <[Tux]> csv-ip5xs           0.826 -  0.833

[17:46] <[Tux]> test-t --race       0.903 -  0.930

[17:46] <[Tux]> test-t              1.994 -  2.125

[17:46] <[Tux]> test                6.236 -  8.066

[17:46] <[Tux]> csv-ip5xs-20        7.880 -  8.127

[17:46] <[Tux]> test-t-20 --race    9.398 - 10.503

[17:46] <[Tux]> csv-parser         26.616 - 27.048

[17:46] <[Tux]> test-t-20          33.749 - 36.251

[18:08] <japhb> MasterDuke: OK, sounds like there's some work to be done to bring it back up to stable and fix some bitrot.  Thank you for letting me know.

[18:09] *** domidumont left
[18:17] *** softmoth left
[18:23] *** sena_kun left
[18:26] *** sena_kun joined
[18:35] *** HarmtH_ left
[18:41] *** krunen left
[18:42] *** krunen joined
[18:53] <nwc10> OK, I did https://github.com/Raku/roast/pull/724 but I'm still not sure if it's the best plan

[18:54] <nwc10> and it's only tested on one machine, and it's running 20.3.0

[19:47] <nine> nwc10: I think it makes perfect sense to check a more technical name instead of the marketing one. The difference between file systems and operating systems was as much of an issue before as it is after your change. So in total your change is an improvement

[19:47] <nwc10> nine: the difference between file systems is a conceptual mistake that File::Spec makes, so probably that has been around for decades.

[19:47] <nwc10> file systems and OSes

[20:06] <nine> The flapping t/spec/S17-supply/return-in-tap.t is quite a riddle. It's pretty clearly spesh related. MVM_SPESH_BLOCKING helps provoke it (but not all the time). MVM_SPESH_LIMIT makes it go away, even if set to a ridiculously high value so it shouldn't make any difference at all.

[20:09] <nine> Ooooh....after some 15 minutes of several different setups running in loops, the one with MVM_SPESH_LIMIT=256 failed

[20:32] <MasterDuke> japhb: https://github.com/japhb/perl6-bench/pull/31

[20:36] <MasterDuke> https://simonwillison.net/2021/Feb/19/office-hours/ an interesting idea (tl;dr: OP enjoyed and thought it was useful to have some schedulable hours for one-on-one vtcs with users)

[20:42] <MasterDuke> nine++ is on a roll with the tricky bug finding+fixing

[20:49] <nine> I just noticed. The test in question tests behavior of throwing an exception in a tap. Wouldn't it be funny if this turned out to be the mis-spesh I already identified?

[20:50] <MasterDuke> it'd be great if fixing that mis-spesh took care of a bunch of bugs

[20:55] <nine> Of course that would require an actual fix and not just a diagnosis :)

[20:55] <japhb> MasterDuke: PR reviewed, thank you so much!  Couple nits to address, but otherwise looks like you made a lot of very helpful fixes.

[20:57] <lizmat> japhb: maybe also time to rename the repo to something more raku like ?

[20:57] <lizmat> and change the About: Benchmark and compare Perl 6 implementations against perl5

[20:58] <lizmat> nudge nudge  :-)

[20:59] <japhb> lizmat: *snrk*

[20:59] <japhb> All right, let me get this PR incorporated, then I will.

[21:00] <japhb> I've actually never changed a public repo name before, I wonder what I need to do there ....

[21:00] <lizmat> github will redirect URLs from the old name to the new name, so no worries there

[21:00] <japhb> Oh that's useful

[21:01] <lizmat> I've done this with *many* repos in the raku-community-modules team 

[21:02] <japhb> Come to think of it, I wonder if this repo should move to raku-community-modules ...

[21:02] <lizmat> well, that's definitely an option as well

[21:03] <japhb> Any advice?  You've got rights in the repo anyway IIRC, so you can work on it in either place.

[21:05] <lizmat> I have rights, but no admin rights afaics

[21:06] <MasterDuke> japhb: updated

[21:11] <japhb> lizmat: Huh, I can't see how to give you admin rights.  All the people I've added are shown as Collaborator access, but it's not obvious to me how to upgrade that.  Maybe because it's in my personal account?

[21:11] <lizmat> possibly

[21:12] <lizmat> you could try moving it to raku-community-modules

[21:13] <lizmat> I should get a notice then and be able to accept it, afaik

[21:13] <nine> So, the error is "Cannot find method 'sink' on 'BOOTCode': no method cache and no .^find_method"

[21:13] <japhb> MasterDuke: Merged, thanks!

[21:13] <nine> That BOOTCode is the "identity" method. Clearly not something we want to sink in that program.

[21:13] *** maggotbrain joined
[21:13] <japhb> lizmat: Should I rename first, or move first?

[21:14] <lizmat> either would be fine with me

[21:14] <nine> Now MVM_6model_find_method_spesh tries to look up a method and if it finds one caches it in a spesh slot. The intriguing thing is that the spesh slot it would cache it in actually does contain the sink method.

[21:14] <nine> So it looks like on repeated runs of this loop, the object we look up the sink method on changes to something unrelated

[21:14] <japhb> lizmat: OK, renamed, now trying to transfer

[21:16] <japhb> Transfer request sent

[21:16] <japhb> Looks like it needs not only the description change but also a copyright update

[21:16] <lizmat> thas arrived!

[21:17] <japhb> Cool, I see it there now.

[21:18] <japhb> MasterDuke: Note that the repo just moved ^^  :-)

[21:21] <MasterDuke> yep, just updated my fork and remotes

[21:21] <lizmat> looks like we can drop support for niecza and perlito

[21:21] <japhb> lizmat: I think that was part of MasterDuke's PR ... maybe there's some leftovers?

[21:21] <MasterDuke> i didn't change the readme

[21:21] <lizmat> I just did

[21:21] *** HarmtH joined
[21:23] <japhb> Thanks

[21:23] <lizmat> Thank you!  :-)

[21:24] <nine> MasterDuke: you know what? I actually think it might be the very same mis-spesh

[21:25] <MasterDuke> nice

[21:25] <japhb> lizmat: If you're still in there, might want to remove the paragraph about Niecza builds in the README.

[21:26] <lizmat> yeah... will do

[21:26] <lizmat> and perlito?

[21:26] <MasterDuke> nine: so all you have left is fixing the SSA generation/conversion in spesh. that's what, a 15min job?

[21:27] <japhb> Yeah, I think so, sadly.  Haven't heard anything about that one for a while either.

[21:27] <nine> MasterDuke: it could even be. If I had a clue about what to change it to :)

[21:27] <MasterDuke> lizmat: yeah, i removed the perlito stuff from the components/compilers files

[21:28] <nine> MasterDuke: but for that to know I'd need to know _why_ it is the way it is right now, i.e. the design choices that were made

[21:34] <MasterDuke> lizmat: components.json and compilers.pl could also have a bunch of names in them updated

[21:35] <MasterDuke> nine: gotta lay a jnthn-trap over in #moarvm

[21:37] <MasterDuke> japhb: what's the best way to test a moarvm branch? add a new rakudo-<branch> compiler (and/or component?) that does `--gen-moar=<branch>`?

[21:40] <MasterDuke> or just add `rakudo-moar/branch` to @extras in the quickstart multi in bench?

[21:53] <japhb> MasterDuke: Honestly, it's been a little too long for me to remember.  I do remember that last time I touched it I felt like VM branch support was poor, and I wanted to throw some of my (then non-existant) extra time into that.

[21:53] <japhb> MasterDuke: I'd say pick a hack for now, and then if the project really picks up again, we can address that weakness.

[21:58] <MasterDuke> sure. fwiw,¬† adding `rakudo-moar/branch` to @extras in the quickstart multi in bench doesn't do it. think i need to add a new compiler/component

[22:00] *** cog_ joined
[22:01] *** cog left
[22:15] *** cog_ left
[22:17] *** cog joined
[22:17] *** cog_ joined
[22:18] *** cog left
[22:18] *** cog_ left
[22:18] *** cog joined
[22:59] *** lizmat left
[23:43] *** softmoth joined
