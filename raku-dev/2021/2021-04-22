[00:11] <vrurg> tbrowder: not before RakuAST/new dispatch lands in the master.

[00:25] *** Xliff_ joined
[00:27] *** Xliff left
[01:05] <japhb> Why doesn't rakudo ever use unbox_u instead of unbox_i?  I discovered this when I got an error that I traced down to trying to unbox (2**64 - 1), and traced down and back up the stack to find that MoarVM and NQP are both happy to support unbox_u, but it doesn't get used anywhere in Rakudo.

[01:06] *** kvw_5_ joined
[01:09] *** kvw_5 left
[02:08] <tbrowder> vrurg: thnx

[02:23] <Xliff_> tbrowder: What was the question you asked vrurg?

[02:23] *** Xliff_ left
[03:25] *** lucasb left
[05:35] *** nativecallable6 left
[05:35] *** shareable6 left
[05:35] *** tellable6 left
[05:35] *** sourceable6 left
[05:35] *** greppable6 left
[05:35] *** quotable6 left
[05:35] *** benchable6 left
[05:35] *** bisectable6 left
[05:35] *** unicodable6 left
[05:35] *** committable6 left
[05:35] *** notable6 left
[05:35] *** evalable6 left
[05:35] *** squashable6 left
[05:35] *** linkable6 left
[05:35] *** bloatable6 left
[05:35] *** coverable6 left
[05:35] *** statisfiable6 left
[05:35] *** releasable6 left
[05:36] *** bisectable6 joined
[05:37] *** shareable6 joined
[05:37] *** releasable6 joined
[05:37] *** benchable6 joined
[05:37] *** statisfiable6 joined
[06:34] *** domidumont joined
[07:12] <lizmat> japhb: re use of unbox_u : probably because it is moar specific?

[07:21] <japhb> lizmat: Ah, that makes sense.

[07:22] <japhb> I mean, unfortunate, but I understand.

[07:24] <japhb> CBOR::Simple v0.0.2 uploaded to fez.  Much more complete; almost all core codec functionality in place, aside from num16 support (because Rakudo doesn't yet, and I'm not (yet) faking it).

[07:24] <lizmat> how would you fake that?  as a Rat ? FatRat ?

[07:25] <japhb> There are still a fair number of extensions that could usefully be added, and probably some more special Raku type round-trip handling, plus the "diagnostic view" which is for humans trying to figure out what got corrupted in a CBOR stream.

[07:26] <japhb> lizmat: I'd take a num32 and hand-reduce it to num16 with bit twiddling and write that out, and then reverse it on parse.

[07:26] <lizmat> ah, so it is a 16 *bit* format

[07:26] <japhb> Right

[07:26] <lizmat> ok

[07:27] <japhb> "half float" in other languages

[07:27] <japhb> Commonly used for computer graphics and machine learning.

[07:27] *** patrickb joined
[07:27] <lizmat> interesting

[07:29] <japhb> The nice thing is that CBOR can round-trip exactly stuff that JSON had no hope of handling.  Exact BigInt and Rational support, for instance, plus real DateTimes.

[07:29] <lizmat> looks like the META6.json of your distribution doesn't link back properly to the repo :-(

[07:29] <japhb> ??

[07:29] * japhb looks

[07:29] <lizmat> the auth also looks weird?   https://modules.raku.org/dist/CBOR::Simple:zef:zef:japhb

[07:30] <japhb> Oh, because the source-url is https instead of git?  That would be an mi6 thing, I think.

[07:30] <lizmat> I don't see a source-url in the META

[07:30] <lizmat> but I'm looking at 0.0.1

[07:31] <japhb> Oh, 0.0.2 should have that fixed

[07:31] <lizmat> ok, patience is in order then

[07:31] <lizmat> ooc, if you upload to fez, shouldn't the auth be fez:xxx ?

[07:31] <japhb> I think the double-zef in the URL is a fez thing.  To use fez, your auth *has* to be 'zef:<username>'.

[07:32] <lizmat> ah, not fez: then ?

[07:32] <lizmat> strange

[07:32] <japhb> Yeah, I think it's a FAQ though.

[07:32] <japhb> I always use 'fez checkbuild' before uploading, which checks that the META6 looks as it expects.

[07:32] <lizmat> still doesn't explain the repetition in the URL

[07:34] <japhb> Well, when I look at a search for it (https://modules.raku.org/search/?q=CBOR) I see a notation about zef/zef:japhb -- I'm guessing the first slash was converted to another colon?

[07:34] <japhb> tonyo: ^^  # Is that expected?

[07:34] <japhb> Are you still unable to see 0.0.2?

[07:34] <lizmat> japhb: if you plan to support all forms of data in that format, why the ::Simple ?

[07:35] <lizmat> yeah, only 0.0.1

[07:36] <japhb> lizmat: Because the code is simple, it's not optimized like you have for JSON::Fast.  So this is more the reference version, before one or more of us goes wild speeding it up.

[07:36] * lizmat is willing to have a look at that in time  :-)

[07:36] <japhb> (That said, if it turns out to be really easy to speed it up a lot without going full nqp::ops on it, I will.)

[07:37] <lizmat> afk for breakfast&

[07:37] <japhb> I suspect the biggest problem is going to be continuous extension of small buffers; I was able to speed up Cro::WebSocket at one point by just pre-allocating buffer space, and I haven't done that in the CBOR::Simple code.

[07:37] <japhb> Enjoy!

[07:39] * japhb is weirded out that lizmat can't see 0.0.2 -- I can see it with 'zef info CBOR::Simple', I can see it in modules.raku.org search, I can see it (and the tag) on github ...  Hrrmph.

[08:15] <lizmat> can see it now

[08:15] <lizmat> guess I needed to reload the searchresults page

[08:18] * lizmat also sees some magical numbers: ($_ ~~ Any ?? 22 !! 23));  

[09:00] <raydiak> those are the correct short count bits of the item headers. according to wikipedia "The values 20â€“23 are used to encode the special values false, true, null, and undefined" for major type 7

[09:01] <lizmat> my point was: shouldn't those not also be Enums 

[09:02] <raydiak> ah, my mistake

[09:35] *** lizmat is now known as lizmmat_

[09:35] *** lizmmat_ is now known as lizmat

[09:37] * lizmat is playing with IRC::Client

[09:37] <raydiak> I was going to suggest the counterpoint that the CBOR types and special values themselves aren't part of the public API, it'd only be a bit of help to internal readability. but then I wondered why the only enum in there is exported at all, which then got me wondering why null doesn't map to Nil and undefined to Any. which I figure perhaps was chosen for ability to round-trip both Mu and Any, but then how do

[09:37] <raydiak> you represent Nil?

[09:39] <nwc10> japhb: C doesn't support 16 bit floats (in any standard way) does it? So bit fiddling *somewhere* is going to be needed.

[09:39] <nwc10> Eric the half-a-float.

[09:48] <lizmat> .oO( half-sunk )

[09:52] *** lizmat is now known as lizmat_

[09:52] *** lizmat_ is now known as lizmat

[09:52] *** lizmat is now known as lizmat_

[09:53] *** lizmat_ is now known as lizmat

[09:54] *** lizmat is now known as lizmat_

[09:54] *** lizmat_ is now known as lizmat

[09:58] <Geth> Â¦ rakudo: 01a0c9349e | (Daniel Green)++ | src/core.c/DateTime.pm6

[09:58] <Geth> Â¦ rakudo: Give DateTime its own infix:<eqv>

[09:58] <Geth> Â¦ rakudo: 

[09:58] <Geth> Â¦ rakudo: Otherwise it falls back to Mu's, which just relies on the .raku output.

[09:58] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/01a0c9349e

[09:58] <Geth> Â¦ rakudo: f872413141 | MasterDuke17++ (committed using GitHub Web editor) | src/core.c/DateTime.pm6

[09:58] <Geth> Â¦ rakudo: Merge pull request #4334 from MasterDuke17/give_DateTime_its_own_eqv

[09:58] <Geth> Â¦ rakudo: 

[09:58] <Geth> Â¦ rakudo: Give DateTime its own infix:<eqv>

[09:58] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f872413141

[10:28] <patrickb> https://github.com/rakudo/rakudo/pull/4331 is another candidate for merging (before the release?)

[10:30] <sena_kun> patrickb, yes.

[10:34] <Geth> Â¦ nqp: 9858768b77 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[10:34] <Geth> Â¦ nqp: Bump NQP to hopefully unblock Rakudo

[10:34] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/9858768b77

[10:36] <lizmat> ok, I will merge that first as well

[10:36] <lizmat> well, soon anyway  :-)

[10:46] <sena_kun> releasable6, status

[10:47] <releasable6> sena_kun, Next release will happen when it's ready. 3 blockers. 8 out of 188 commits logged (âš  1 warnings)

[10:47] <releasable6> sena_kun, Details: https://gist.github.com/88ab71ae6bd8d0e1575310ffa5e83407

[10:47] <Geth> Â¦ rakudo: 4e4c485660 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[10:47] <Geth> Â¦ rakudo: Bump NQP to hopefully unblock Rakudo

[10:47] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4e4c485660

[10:47] <Geth> Â¦ rakudo: c05b23f182 | niner++ (committed using GitHub Web editor) | src/core.c/CompUnit/Loader.pm6

[10:47] <Geth> Â¦ rakudo: Fix compilation failure with EVAL in precompiled module's mainline (#4331)

[10:47] <Geth> Â¦ rakudo: 

[10:47] <Geth> Â¦ rakudo: The error was reported as "Cannot look up attributes in a NQPMu type object"

[10:47] <Geth> Â¦ rakudo: with a require in a module's mainline. The error message gets reported because

[10:47] <Geth> Â¦ rakudo: QASTCompilerMAST cannot find the frame for a given CUID. The error only

[10:47] <Geth> Â¦ rakudo: appeared when the require loaded an already installed and precompiled module

[10:47] <Geth> Â¦ rakudo: and only if the repository chain got changed since (by way of 'use lib' or -I).

[10:47] <Geth> Â¦ rakudo: <â€¦commit message has 20 more linesâ€¦>

[10:47] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c05b23f182

[10:48] <sena_kun> vrurg, can you start a Blin please?

[10:50] <nine> niner committed 2 minutes ago Verified

[10:50] <nine> Funny....I'm pretty sure 2 minutes ago I was getting some coffee :D

[11:27] *** brrt joined
[11:31] <tbrowder> .tell Xliff_ i asked vrurg about forecast for implementing version 'e'

[11:32] <tbrowder> .tell Xliff ^^^

[11:33] *** LizBot left
[11:39] *** LizBot joined
[11:46] <lizmat> PSA: LizBot is an experimental logger by yours truly

[11:46] <lizmat> atm, it just logs

[12:12] *** sena_kun left
[12:14] *** sena_kun joined
[12:17] <lizmat> ilogger2: VERSION

[12:17] <ilogger2> lizmat: I am a logger bot. Lines starting with [off] won't be logged. Extra help available at http://colabti.org/irclogger/irclogger_logs.

[12:17] <lizmat> ilogger2: help

[12:17] <ilogger2> lizmat: I am a logger bot. Lines starting with [off] won't be logged. Extra help available at http://colabti.org/irclogger/irclogger_logs.

[12:17] <nwc10> ilogger2: botsnack

[12:17] <ilogger2> nwc10: I am a logger bot. Lines starting with [off] won't be logged. Extra help available at http://colabti.org/irclogger/irclogger_logs.

[12:18] <lizmat> aha... that's something I forgot to implement  :-)

[12:18] *** Kaeipi left
[12:22] <lizmat>  [off] just checking

[12:22] *** Kaiepi joined
[12:26] *** LizBot left
[12:26] *** LizBot joined
[12:28] <lizmat> starting a line with [off] will now not log the message

[12:28] <nwc10> naff [off]

[12:29] <nwc10> but that is logged?

[12:29] <lizmat> yes, it should *start* with [off]

[12:29] <lizmat> to not have it logged

[12:31] *** Kaiepi left
[12:32] *** Kaeipi joined
[12:36] *** Kaeipi left
[12:40] *** Kaiepi joined
[12:41] *** LizBot left
[12:42] *** LizBot joined
[12:45] *** brrt left
[12:49] <lizmat> IRC::Client::Plugin::Logger now on its way to the ecosystem

[12:50] <lizmat> afk for a few hours&

[13:04] *** shareable6 left
[13:04] *** lizmat left
[13:04] *** nwc10 left
[13:05] *** shareable6 joined
[13:05] *** lizmat joined
[13:05] *** nwc10 joined
[13:18] <vrurg> .

[13:18] <vrurg> sena_kun: started

[13:18] <sena_kun> vrurg++

[13:23] *** Xliff joined
[13:25] <Xliff> \o

[13:25] <Xliff> I had a run-in with R#2378

[13:26] <Xliff> https://github.com/rakudo/rakudo/issues/2378

[13:26] <nwc10> o/

[13:26] <Xliff> Any idea if this is really fixable?

[13:28] * nwc10 reads, but has no idea about this sort of thing.

[13:38] <Geth> Â¦ nqp/new-disp: 34 commits pushed by (Jonathan Worthington)++

[13:38] <Geth> Â¦ nqp/new-disp: review: https://github.com/Raku/nqp/compare/f14c14854818...c974f51fa5c5

[13:38] <Geth> Â¦ rakudo/new-disp: 35 commits pushed by (Jonathan Worthington)++

[13:38] <Geth> Â¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/compare/41c2d4cea548...6697c4dfbd67

[14:23] *** b2gills left
[14:25] <tonyo> japhb: lizmat: yea that url repetition is expected.  the format is <provider>/<auth> on m.r.o and provider is zef/zef:japhb 

[14:32] *** lucasb joined
[14:34] *** lucasb left
[14:35] *** lucasb joined
[14:36] *** lucasb left
[14:41] *** b2gills joined
[14:43] <Geth> Â¦ rakudo/new-disp: 9e1eed4975 | (Jonathan Worthington)++ | 2 files

[14:43] <Geth> Â¦ rakudo/new-disp: Port coervice assignment changes from spesh plugin

[14:43] <Geth> Â¦ rakudo/new-disp: 

[14:43] <Geth> Â¦ rakudo/new-disp: These were added after it was ported to the new dispatcher mechanism.

[14:43] <Geth> Â¦ rakudo/new-disp: There's potential to optimize these rather better in the future, but for

[14:43] <Geth> Â¦ rakudo/new-disp: now just make it work.

[14:43] <Geth> Â¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/9e1eed4975

[14:43] <lizmat> tonyo: but the auth is fez, is ot not?

[14:44] <lizmat> so shouldn't that be zef/fez:japhb ?

[14:50] *** brrt joined
[14:50] *** ChanServ sets mode: +o lizmat

[14:51] *** ChanServ sets mode: -o lizmat

[14:54] *** LizBot left
[14:54] *** LizBot joined
[14:54] *** ChanServ sets mode: +o lizmat

[14:55] *** ChanServ sets mode: -o lizmat

[14:55] <tonyo> the auth string when you upload using fez is zef

[14:55] <tonyo> eg, i'm zef:tony-o

[14:55] *** LizBot left
[14:55] *** LizBot joined
[14:56] <lizmat> I find that counter-intuitive

[14:56] <lizmat> when you're uploading to fez, "zef" is just another installation tool, like "panda" was 

[14:56] <tonyo> it's a zef ecosystem, fez is just the tool used to upload to it

[14:57] <tonyo> right and to not lump the authoring tool and installation tool into one monolith, the reverse of zef (fez) is how you get stuff into the zef eco

[14:57] <lizmat> so you are saying that no other installation tools will ever be able to use modules from the "zef" ecosystem ?

[14:57] <tonyo> not at all

[14:58] <tonyo> they can query the index and download source tars just as zef can 

[14:58] <lizmat> then I don't understand why it is called the "zef" ecosystem

[14:58] <patrickb> the name clash is a bit unfortunate, but has no deeper meaning IIUC

[14:59] <lizmat> tonyo: to be clear: I welcome the initiative

[14:59] <tonyo> it's only named that because i worked on zef and i like that name, it's one of the more adopted things i've worked on

[14:59] <lizmat> and, since I'm lazy, I'm waiting for App::Mi6 to transparently support fez upload

[15:00] <lizmat> but then for sure my modules will move from PAUSE to zef

[15:00] <tonyo> iirc that's coming soon.  either patrickb or tbrowder mentioned something to me about that in gh issues

[15:01] <lizmat> tonyo: suggest you start calling it the "Raku Community Ecosystem"

[15:01] <patrickb> I think it was tbrowder who mentioned it. Skaji did the actual work: https://github.com/skaji/mi6/pull/122

[15:01] <tonyo> you want i can change it in mro?  RCE/zef:author

[15:02] <tonyo> or are you suggesting auth be rce:author ?

[15:02] <lizmat> because there's little doubt in my mind, it will replace the old ecosystem, and the make the use  of PAUSE unnecessary

[15:02] <patrickb> can someone explain the difference between auth and provider?

[15:02] <lizmat> rce:author feels like a good way to describe it ?

[15:03] <tonyo> there's around 30 authors in there right now that would need to update all of their stuff

[15:03] <lizmat> better 30 now than 2000 later  :-)

[15:04] <lizmat> but you could for now allow zef:author as an alias of rce:author

[15:04] <lizmat> until the next upload ?

[15:04] <lizmat> of a module by an author I mean

[15:05] <tonyo> about 230 modules in there right now

[15:06] <lizmat> well, moving to fez would be 100+ modules for me

[15:06] <tonyo> hmm .. kind of wary about messing with them.  give me a couple of hours to think about how to migrate all of it

[15:06] <lizmat> alone

[15:07] <patrickb> auth is the guy responsible for a module and the format for auth is currently "zef:some_identifier" for everything uploaded on the zef eco. Whereas the provider is the website that hosts the stuff. Correct?

[15:07] <tonyo> because it involves changing tooling on the backend as well

[15:07] <tonyo> yea

[15:07] <tonyo> auth is the spec .. the provider is just the backend _thing_ in the mro code

[15:08] <patrickb> This is not the first time the naming talk was had. I'd really like we don't do another quick shot this time.

[15:08] <lizmat> I missed the previous one, apparently

[15:08] <lizmat> perhaps a problem solving issue then?

[15:09] <patrickb> It went zef -> fez -> zef -(> rce?)

[15:10] <patrickb> IIRC that is

[15:13] <tonyo> rce:author ?

[15:13] <patrickb> Unrelated question: The validation that fez currently does, is that replicated on the server? I.e. could I upload broken stuff by directly interacting with the server?

[15:14] <tonyo> the auth with fez has always been just zef:auth - i had to do a reindex a little while ago because vrurg needed to remove something and there was no capability at that point

[15:14] <tonyo> yea it's validated on the server

[15:14] <patrickb> tonyo++

[15:14] <tonyo> the architecture is kind of cool, give me a minute and i'll draw a picture

[15:15] <tonyo> actually, it's just all in lambdas (tar verification|api endpoints) -> mq -> indexed

[15:16] <patrickb> mq = message queue?

[15:16] <tonyo> yea

[15:17] *** LizBot left
[15:17] *** LizBot joined
[15:19] *** brrt left
[15:23] *** LizBot left
[15:23] *** LizBot joined
[15:29] *** LizBot left
[15:30] *** LizBot joined
[15:34] *** brrt joined
[15:36] *** Kaiepi left
[15:36] *** Kaiepi joined
[15:40] *** LizBot left
[15:40] *** LizBot joined
[15:42] *** ChanServ sets mode: +o lizmat

[15:42] *** ChanServ sets mode: -o lizmat

[15:42] *** patrickb left
[15:43] *** brrt left
[15:46] *** tellable6 joined
[15:46] *** LizBot left
[15:46] *** LizBot joined
[15:49] *** ChanServ sets mode: +o lizmat

[15:49] *** ChanServ sets mode: -o lizmat

[15:53] *** LizBot left
[15:54] *** LizBot joined
[15:56] *** ChanServ sets mode: +o lizmat

[15:56] *** ChanServ sets mode: -o lizmat

[16:06] *** LizBot left
[16:06] *** LizBot joined
[16:07] *** ChanServ sets mode: +o lizmat

[16:07] *** ChanServ sets mode: -o lizmat

[16:12] *** ChanServ sets mode: +o lizmat

[16:12] *** ChanServ sets mode: +o lizmat

[16:13] *** ChanServ sets mode: -oo lizmat tyil

[16:14] *** ChanServ sets mode: +oo lizmat tyil

[16:15] *** ChanServ sets mode: -oo lizmat tyil

[16:22] *** LizBot left
[16:22] *** LizBot joined
[16:22] *** ChanServ sets mode: +o lizmat

[16:23] *** LizBot left
[16:23] *** LizBot joined
[16:23] *** ChanServ sets mode: -oo lizmat tyil

[16:25] *** greppable6 joined
[16:26] *** brrt joined
[16:54] *** domidumont left
[17:06] *** lucasb joined
[17:28] *** HarmtH left
[17:35] *** quotable6 joined
[17:35] *** MasterDuke left
[17:41] *** HarmtH joined
[17:41] *** finsternis joined
[17:43] *** sxmx1 joined
[17:44] *** brrt left
[17:59] *** committable6 joined
[18:05] *** LizBot left
[18:05] *** LizBot joined
[18:25] *** LizBot left
[18:25] *** LizBot joined
[18:26] <lizmat> ...

[18:51] <vrurg> .tell sena_kun https://gist.github.com/vrurg/a608e01a44e5030dccfae4205359cf9c

[18:51] <tellable6> vrurg, I'll pass your message to sena_kun

[19:13] <japhb> Lots of backlog today, wheee ...

[19:15] <japhb> lizmat, raydiak: You're probably right that there should be more enums, and they should not be exported.  This is why the version is 0.0.x with api version 0, because I'm just working as fast as I can and welcome the feedback.  :-)

[19:28] <japhb> nwc10: Half floats in the current format were invented back in 1997, added to GPUs back in 2002, the 2008 IEE754 standard supported them as "binary16", Intel and AMD processors have supported them (with native "F16C" conversion instructions even) since 2011 or so, ARM supports a slight variant (GCC supports both variants), and ISO/IEC standardized the C extensions in 2015.  I'd be shocked if we couldn't 

[19:28] <japhb> find a freely-licensed library that has all the conversions for us.

[19:29] <nwc10> cool. But I more meant "they don't have any sort of type - float is (usually) 32 bit floats, and there isn't a `short float`"

[19:30] <japhb> Yeah, it's supported as _Float16 apparently

[19:31] <japhb> Apparently GCC first supported them as __fp16, but now recommends using the standardized C names.

[19:43] *** MasterDuke joined
[19:43] *** linkable6 joined
[19:52] *** leont left
[19:58] *** leont joined
[20:10] <japhb> Pushed enum reformed version to GitHub.

[20:13] *** lizmat is now known as lismat

[20:13] *** lismat is now known as lizmat

[20:15] *** LizBot left
[20:15] *** LizBot joined
[20:15] *** lizmat is now known as lismat

[20:15] *** lismat is now known as lizmat

[20:16] <japhb> raydiak: You wondered why I chose CBOR null => Any:U, and CBOR undefined => Mu:U?  I think the latter one makes sense, as it is in fact the "most undefined" thing in Raku, but I can easily be swayed on the first.  Anyone want to argue whether CBOR null should map to Any, Nil, or some other value?

[20:17] <japhb> I think that's the last of the feedback I saw ... anything I missed?

[20:19] <japhb> Oh, I should mention that there is an assigned tag for "absent value", https://github.com/svaarala/cbor-specs/blob/master/cbor-absent-tag.rst, which is interestingly used to tag a CBOR undefined rather than a CBOR null.

[20:28] <lizmat> japhb: how would your module handle Junctions?

[20:29] <lizmat> if it would not, then undefined => Any would be better maybe ?

[20:45] <japhb> lizmat: Right now it does not.  However, we can easily define an extension tag for it, if we want Junctions to round trip.

[20:46] <japhb> CBOR is general enough to allow just about any data type to be defined, we just need to decide how much of Raku we want to be able to serialize this way.

[20:46] <lizmat> well, then I guess undefined would need to be Mu:U

[20:49] <japhb> OK, looks like I have my work cut out for me.  On equivalent (large) structures, JSON::Fast is about 5.1x faster on decode and 9.1x faster on encode (which ends up being about 7.3x faster round trip because for both libraries the encode side is heavier).  Thankfully those are just the baseline "I have not yet begun to fight" numbers.  :-)

[20:50] <tonyo> what're you writing?

[20:50] <japhb> tonyo: https://github.com/japhb/CBOR-Simple

[20:55] <jdv79> lizmat: how did you manage to lose that much weight?

[20:55] <lizmat> eating less, moving more

[20:55] <jdv79> i should get on my bike more i guess

[20:55] <jdv79> i've been moving less thanks to covid and such:(

[20:55] <lizmat> basically monitor your calorie intake

[20:55] <lizmat> make sure it's a few 100 less than what you need every day

[20:56] <lizmat> roughly every 9000 / less per day = number of days to lose one kg

[20:56] <lizmat> I try to do 500 less / a day

[20:57] <lizmat> with cycling accounting for (avg speed - 11) / minute for calories lost in cycling

[20:59] <jdv79> how much cycling do you do on avg?

[21:04] *** Kaiepi left
[21:04] *** Kaiepi joined
[21:07] <lizmat> well... I've done 2600 km this year so far

[21:07] <jdv79> wow

[21:08] <lizmat> so that would be about 23.5 a day, every day

[21:08] <japhb> Impressive!

[21:08] <lizmat> but there've been some bad weather days: snow, sleet, rain, storm

[21:09] <lizmat> so I think I've only cycled 75 days so far this year, with an average of 34 or so

[21:09] <jdv79> it was hailing y'day for a bit here

[21:09] <jdv79> very random and rare

[21:09] <lizmat> yeah, that's not nice when on a bicycle

[21:09] <lizmat> note: *no* electric support whatsoever

[21:09] <jdv79> between pea and marble size i think

[21:10] <lizmat> although woolfy helps me occasionally on the very difficult spots

[21:15] <lizmat> yesterday 60km, today 28km, still felt the 60 from yesterday :-)

[21:18] <jdv79> ha

[21:20] <lizmat> although my bicycle does have something modern: it has a NuVinci CVT

[21:20] <lizmat> https://en.wikipedia.org/wiki/NuVinci_Continuously_Variable_Transmission

[21:21] <lizmat> NuVinci N380 to be precise

[21:37] *** dogbert11 joined
[21:39] *** dogbert12 joined
[21:41] *** dogbert17 left
[21:41] *** dogbert11 left
[21:44] *** LizBot left
[21:44] *** LizBot joined
[21:45] <lizmat> sleep&

[21:48] *** dogbert17 joined
[21:52] *** dogbert12 left
[22:29] *** sena_kun left
[22:54] *** dogbert11 joined
[22:58] *** dogbert17 left
[23:17] *** Xliff left
[23:40] *** nativecallable6 joined
