[00:01] *** [Coke] joined
[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[02:05] *** evalable6 left
[02:05] *** linkable6 left
[03:06] *** evalable6 joined
[04:06] *** greppable6 left
[04:06] *** reportable6 left
[04:06] *** sourceable6 left
[04:06] *** coverable6 left
[04:06] *** evalable6 left
[04:06] *** bisectable6 left
[04:06] *** unicodable6 left
[04:06] *** bloatable6 left
[04:06] *** shareable6 left
[04:06] *** tellable6 left
[04:06] *** nativecallable6 left
[04:06] *** committable6 left
[04:06] *** notable6 left
[04:06] *** quotable6 left
[04:06] *** releasable6 left
[04:06] *** statisfiable6 left
[04:06] *** benchable6 left
[04:06] *** squashable6 left
[04:07] *** greppable6 joined
[04:07] *** statisfiable6 joined
[04:07] *** coverable6 joined
[04:07] *** shareable6 joined
[04:08] *** committable6 joined
[04:08] *** bisectable6 joined
[04:09] *** benchable6 joined
[04:09] *** squashable6 joined
[04:09] *** reportable6 joined
[04:09] *** unicodable6 joined
[05:07] *** notable6 joined
[05:07] *** linkable6 joined
[05:07] *** tellable6 joined
[05:08] *** quotable6 joined
[05:08] *** bloatable6 joined
[05:09] *** sourceable6 joined
[05:51] *** Xliff left
[06:04] *** frost joined
[06:07] *** reportable6 left
[07:06] *** nativecallable6 joined
[07:07] *** releasable6 joined
[07:10] *** reportable6 joined
[08:09] *** evalable6 joined
[08:46] *** TheAthlete joined
[11:01] *** evalable6 left
[11:01] *** linkable6 left
[12:01] *** evalable6 joined
[12:08] *** reportable6 left
[12:09] *** reportable6 joined
[12:42] *** Altai-man joined
[13:03] *** linkable6 joined
[14:10] *** TempIRCLogger left
[14:10] *** TempIRCLogger joined
[15:10] *** shareable6 left
[15:10] *** squashable6 left
[15:10] *** nativecallable6 left
[15:10] *** greppable6 left
[15:10] *** bisectable6 left
[15:10] *** bloatable6 left
[15:10] *** benchable6 left
[15:10] *** linkable6 left
[15:10] *** evalable6 left
[15:10] *** statisfiable6 left
[15:10] *** coverable6 left
[15:10] *** unicodable6 left
[15:10] *** reportable6 left
[15:10] *** notable6 left
[15:10] *** sourceable6 left
[15:10] *** releasable6 left
[15:10] *** quotable6 left
[15:10] *** tellable6 left
[15:10] *** committable6 left
[15:11] *** frost left
[15:11] *** bisectable6 joined
[15:11] *** evalable6 joined
[15:11] *** unicodable6 joined
[15:12] *** benchable6 joined
[15:12] *** linkable6 joined
[15:12] *** committable6 joined
[15:13] *** tellable6 joined
[16:11] *** quotable6 joined
[16:11] *** coverable6 joined
[16:12] *** statisfiable6 joined
[16:12] *** squashable6 joined
[16:12] *** reportable6 joined
[16:13] *** notable6 joined
[16:13] *** releasable6 joined
[16:13] *** sourceable6 joined
[16:28] *** Xliff joined
[17:08] *** TheAthlete left
[17:12] *** shareable6 joined
[17:14] *** bloatable6 joined
[18:01] <Geth> ¦ nqp: bb14317951 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[18:01] <Geth> ¦ nqp: Bump MoarVM to get nine++'s latest fixes

[18:01] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/bb14317951

[18:09] *** reportable6 left
[18:10] *** reportable6 joined
[18:12] <jdv> isn't there a nqp bump needed?

[18:12] <lizmat> yes, that's coming after I ran all the tests :-)

[18:12] <jdv> ah, cool

[18:17] <Geth> ¦ rakudo: 96919e52fd | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[18:17] <Geth> ¦ rakudo: Bump NQP to get nine++'s MoarVM fixes

[18:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/96919e52fd

[18:17] <lizmat> jdv ^^

[18:19] <jdv> ok, thanks

[18:21] <Geth> ¦ rakudo: 835d0f12a9 | (Stefan Seifert)++ | 2 files

[18:21] <Geth> ¦ rakudo: Fix segfaults due to concurrent hash access in parallel module loading

[18:21] <Geth> ¦ rakudo: 

[18:21] <Geth> ¦ rakudo: Read access to the %!seen and %!loaded hashes in CompUnit::Repository::

[18:21] <Geth> ¦ rakudo: Installation and FileSystem was not protected by a lock. This could lead to us

[18:21] <Geth> ¦ rakudo: fetching an only half-setup entry from the hash with a key that was still a

[18:21] <Geth> ¦ rakudo: NULL pointer which we then dereferenced.

[18:21] <Geth> ¦ rakudo: 

[18:21] <Geth> ¦ rakudo: Fix by extending (or introducing) locks to all access to those hashes.

[18:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/835d0f12a9

[18:21] <jdv> i imagine between today and tomorrow i will make the first attempt, assuming a new blin run works out

[18:21] <Geth> ¦ rakudo: f4d7c4f366 | niner++ (committed using GitHub Web editor) | 2 files

[18:21] <Geth> ¦ rakudo: Merge pull request #4679 from rakudo/fix_concurrent_module_loading

[18:21] <Geth> ¦ rakudo: 

[18:21] <Geth> ¦ rakudo: Fix segfaults due to concurrent hash access in parallel module loading

[18:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f4d7c4f366

[18:22] <jdv> i guess i'll wait a bit longer...

[18:25] <Geth> ¦ rakudo: 0b286ed21c | Xliff++ (committed using GitHub Web editor) | src/core.c/Main.pm6

[18:25] <Geth> ¦ rakudo: MAIN default values (#4646)

[18:25] <Geth> ¦ rakudo: 

[18:25] <Geth> ¦ rakudo: * - Adds default values to .WHY.trailing arguments when used in sub MAIN

[18:25] <Geth> ¦ rakudo: 

[18:25] <Geth> ¦ rakudo: * - Adds default valeus to USAGE in MAIN

[18:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0b286ed21c

[18:26] <lizmat> hmmm... that's odd, but good to see merged (it was I who merged that one)

[18:26] *** linkable6 left
[18:45] *** Altai-man left
[19:09] <Geth> ¦ rakudo: a6fad8798b | (Stefan Seifert)++ | 6 files

[19:09] <Geth> ¦ rakudo: Fix removing proxies in native calls

[19:09] <Geth> ¦ rakudo: 

[19:09] <Geth> ¦ rakudo: While removing proxies by passing args through a slurpy was clever and very

[19:09] <Geth> ¦ rakudo: little code, it had the unfortunate side effect of containerizing those

[19:09] <Geth> ¦ rakudo: arguments. This would then lead to issues when the same callsite could pass

[19:09] <Geth> ¦ rakudo: defined and undefined objects for the same parameter.

[19:09] <Geth> ¦ rakudo: 

[19:09] <Geth> ¦ rakudo: Fix by replacing the clever but slow and buggy implementation with usage of the

[19:09] <Geth> ¦ rakudo: ProxyReaderFactory that Rakudo also uses for multi dispatch. This will make

[19:09] <Geth> ¦ rakudo: calls correcter, faster and get rid of the raku-native-dispatch-deproxy frame

[19:09] <Geth> ¦ rakudo: in the callstack (and backtraces).

[19:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a6fad8798b

[19:09] <Geth> ¦ rakudo: f0713c42b4 | (Stefan Seifert)++ | lib/NativeCall/Dispatcher.rakumod

[19:09] <Geth> ¦ rakudo: Make native calls with Proxy args more efficient

[19:09] <Geth> ¦ rakudo: 

[19:09] <Geth> ¦ rakudo: Split off raku-nativecall-core from raku-nativecall and use this as resumption

[19:09] <Geth> ¦ rakudo: target for raku-nativecall-deproxy-resume. This way we get rid of redundant

[19:09] <Geth> ¦ rakudo: checking for proxies in arguments and the redundant check for whether the

[19:09] <Geth> ¦ rakudo: callee is fully set up yet. Both were done already at the start of the

[19:09] <Geth> ¦ rakudo: dispatch.

[19:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f0713c42b4

[19:09] <Geth> ¦ rakudo: 26dd2f4824 | niner++ (committed using GitHub Web editor) | 6 files

[19:10] <Geth> ¦ rakudo: Merge pull request #4676 from rakudo/fix_removing_proxies_in_native_calls

[19:10] <Geth> ¦ rakudo: 

[19:10] <Geth> ¦ rakudo: Fix removing proxies in native calls

[19:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/26dd2f4824

[19:26] *** linkable6 joined
[19:30] *** japhb joined
[20:11] *** nativecallable6 joined
[21:45] <jdv> releasable6: status

[21:45] <releasable6> jdv, Next release will happen when it's ready. 1 blocker. 198 out of 198 commits logged

[21:45] <releasable6> jdv, Details: https://gist.github.com/97c4d07d4b3ccb6a5a399ffe96379321

[21:46] <jdv> a blin on head just finished and its clean enough.  the only potential "blockers" i'm aware of are how to handle the regressions related to ro vars.

[21:47] <jdv> the rakudo and moarvm changelogs are on the respective wiki pages

[21:47] <lizmat> jdv++

[21:48] <jdv> anyone have any strong opinions about the ro vars regressions?

[21:48] <jdv> i could go either way.  if the fallout is unacceptable we could revert in next release or we could revert for this release...

[21:49] <jdv> i haven't seen any chatter from any of the parties involved but it is holiday season...

[21:49] <lizmat> jdv: please remind us what that is about again?

[21:50] <jdv> Its the regression in the blin ticket for Data::Record, Auth::SAML2, and XML::Signature

[21:50] <jdv> https://github.com/rakudo/rakudo/pull/4536 seems to be the offender

[21:52] <lizmat> yeah, ok, well looks like in Data::Record, the problem is actually in the *test*, not in the module itself

[21:53] <lizmat> lemme see if I can make a PR for that one

[21:56] <jdv> but in terms of release, regardless of PR, its still a regression, right?

[21:56] <lizmat> jdv: problem is already fixed, Data::Record just needs a new release

[22:00] <jdv> nice

[22:06] <jdv> and of course its not XML::Signature but XML::Canonical.  i didn't look closely enough.

[22:08] <lizmat> jdv: but XML::Canonical is not in https://github.com/rakudo/rakudo/issues/4667 ?

[22:09] <jdv> i know - blin reported XML::Signature but if you read the failure better or try to actually debug it locally its XML::Canonical (at least)

[22:10] <jdv> its a little perplexing

[22:13] *** greppable6 joined
[22:14] <lizmat> m: sub a(Any $a) { $a := 42 }

[22:14] <camelia> rakudo-moar 1b840ec37: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot bind to '$a' because it was bound in a signature and variables␤bound in signatures cannot be rebound unless they were declared with the␤'is rw' or 'is copy' traits␤at <tmp>:1␤------> su…»

[22:14] <lizmat> jdv ^^ that's basically the issue

[22:15] <lizmat> m: sub a(Any $a is copy) { $a := 42 }

[22:15] <camelia> rakudo-moar 1b840ec37: ( no output )

[22:15] <jdv> i see that.  just not sure yet what the fix in situ is.

[22:15] <lizmat> add an "is copy" to the sig

[22:16] <jdv> oh, i think i see what's up

[22:17] <jdv> i did that and assumed the test breakage indicated it was wrong but https://github.com/retupmoca/P6-XML-Canonical/issues/6

[22:17] <lizmat> yeah, I see that same error

[22:17] <jdv> huh.  so, does that mean we just do a PR and forget about it?  looks like that dist is not active.

[22:18] <jdv> wonder what if anything depends on those 2 dists

[22:18] <lizmat> looks like Andrew Egeler is more into Rust these days

[22:19] <lizmat> perhaps their modules should be moved to raku-community-modules

[22:20] <lizmat> for now, I'd say, the issue can be fixed easily

[22:20] <lizmat> the issue of the failing test has been open for a year now

[22:21] <lizmat> for now I'd not make the XML::Signature failure a blocker, as it can be fixed by a module update

[22:21] <jdv> and of course Auth::SAML2 has the same root cause

[22:23] <lizmat> I've left a ping in the issue, hope that will get someone's attention :-)

[22:24] <jdv> cool.  i'll make a pr for fun and update the tickets and stuff...

[22:26] <jdv> i'm about done for today.  not feeling well.  i'll start the actual release tomorrow morning.  likely ~9am EST.

[22:26] <jdv> thanks lizmat!

[22:27] <lizmat> ++jdv

[22:27] <lizmat> sleep well!  Get well!

[22:28] <MasterDuke> when i've emailed Andrew in the past about issues he's responded pretty quickly

[22:44] *** japhb left
