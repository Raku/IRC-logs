[00:02] *** dogbert11 joined
[00:06] *** dogbert17 left
[01:24] *** kvw_5 joined
[01:27] *** kvw_5_ left
[01:39] *** Kaiepi left
[01:39] *** Kaiepi joined
[01:52] *** leont left
[01:56] *** leont joined
[02:38] *** Kaiepi left
[02:39] *** Kaiepi joined
[03:51] *** evalable6 left
[03:51] *** unicodable6 left
[03:51] *** bloatable6 left
[03:51] *** shareable6 left
[03:51] *** tellable6 left
[03:51] *** linkable6 left
[03:51] *** squashable6 left
[03:51] *** committable6 left
[03:51] *** releasable6 left
[03:51] *** statisfiable6 left
[03:51] *** notable6 left
[03:51] *** sourceable6 left
[03:51] *** nativecallable6 left
[03:51] *** benchable6 left
[03:51] *** quotable6 left
[03:51] *** coverable6 left
[03:51] *** bisectable6 left
[03:51] *** greppable6 left
[03:51] *** bisectable6 joined
[03:51] *** releasable6 joined
[03:51] *** greppable6 joined
[03:52] *** tellable6 joined
[03:52] *** committable6 joined
[03:52] *** unicodable6 joined
[03:52] *** bloatable6 joined
[03:52] *** sourceable6 joined
[03:52] *** statisfiable6 joined
[03:53] *** linkable6 joined
[03:53] *** coverable6 joined
[03:54] *** notable6 joined
[03:54] *** nativecallable6 joined
[03:54] *** squashable6 joined
[03:54] *** evalable6 joined
[03:54] *** benchable6 joined
[03:54] *** quotable6 joined
[03:54] *** shareable6 joined
[04:27] *** CodeCanna joined
[04:39] *** tonyo joined
[04:46] *** CodeCanna left
[07:31] *** japhb left
[07:52] <nine> bartolin_: oh, yes, right.

[07:52] <tellable6> 2021-04-04T09:46:09Z #moarvm <dogbert17> nine do you happen to know which commit fixed https://github.com/MoarVM/MoarVM/issues/1029 ?

[07:53] *** japhb joined
[08:12] *** linkable6 left
[08:14] *** linkable6 joined
[08:44] <Geth> ¬¶ nqp: 92d71ba8ca | (Christian Bartolom√§us)++ | src/vm/jvm/runtime/org/raku/nqp/runtime/Ops.java

[08:44] <Geth> ¬¶ nqp: [JVM] Allow nqp::backtrace with nqp:null argument

[08:44] <Geth> ¬¶ nqp: 

[08:44] <Geth> ¬¶ nqp: This follows https://github.com/MoarVM/MoarVM/commit/3623701173 and

[08:44] <Geth> ¬¶ nqp: should allow to unify the code for Backtrace.new between MoarVM and

[08:44] <Geth> ¬¶ nqp: JVM backend.

[08:44] <Geth> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/92d71ba8ca

[08:57] *** linkable6 left
[09:00] *** linkable6 joined
[09:03] <Geth> ¬¶ rakudo: usev6++ created pull request #4302: Support backtrace creation from nqp::null on JVM

[09:03] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/4302

[09:04] <bartolin_> I'll wait for the spectest to finish before merging.

[09:04] <bartolin_> bbl &

[09:05] <nine> In the meantime I'll find out the differences between nativecall, nativecallinvoke and nativeinvoke

[09:26] <bartolin_> oh, ++nine

[09:30] <bartolin_> nine: https://github.com/usev6/rakudo/commit/ad264f4b90f3ff7de38ebb8f6809ef2d09bcd07a has the workarounds that I was mumbling about in https://github.com/rakudo/rakudo/pull/4277#issuecomment-812060052

[09:32] <bartolin_> together with https://github.com/Raku/nqp/pull/708 this makes more than half of the test files from 04-nativecall pass. A lot of the remaining problems seem to be caused by the NullPointerException I mentioned -- which could very well be a totally different problem

[09:35] <nine> Ah, yes. https://github.com/MoarVM/MoarVM/commit/1b0950e3e99d15dce6fc004a05581fe8e155c080 would need porting to JVM. That's the unbox_i($!call).

[09:35] <nine> Where does the NPE happen with the get_int implemented?

[09:37] <bartolin_> Unfortunately I wasn't able to find the exact place :( But I've stumbled upon this old issue that might be related: https://github.com/Raku/old-issue-tracker/issues/3713

[09:39] <bartolin_> .oO( 2015-06-30 -- time is flying by )

[09:39] <bartolin_> https://github.com/Raku/old-issue-tracker/issues/3713#issuecomment-570866667

[09:40] <nine> I think the full implementation would be just:

[09:40] <nine>     @Override

[09:40] <nine>     public long get_int(ThreadContext tc) {

[09:40] <nine>         return body.entry_point == null ? 0 : 1;

[09:40] <nine>     }

[09:40] <Geth> ¬¶ nqp: cb55e25345 | (Christian Bartolom√§us)++ | src/vm/jvm/QAST/Compiler.nqp

[09:40] <Geth> ¬¶ nqp: [JVM] Add op 'nativecallinvoke'

[09:40] <Geth> ¬¶ nqp: 

[09:40] <Geth> ¬¶ nqp: For now, it's identical to 'nativecall'. The op was introduced for

[09:40] <Geth> ¬¶ nqp: MoarVM with https://github.com/Raku/nqp/commit/28e0650f1c and it is

[09:40] <Geth> ¬¶ nqp: used in Rakudo's lib/NativeCall.rakumod.

[09:40] <Geth> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/cb55e25345

[09:42] <nine> I guess there's no way to get a Java backtrace for those NPEs?

[09:45] <bartolin_> I didn't find it yet -- but probably that's because I'm not familiar with the available tools. I'll try to look into that.

[09:46] <bartolin_> But first I'll try to stick your suggestion for porting https://github.com/MoarVM/MoarVM/commit/1b0950e3e99d15dce6fc004a05581fe8e155c080 into .../sixmodel/reprs/NativeCallInstance.java

[09:50] <Geth> ¬¶ rakudo: 9c3f68b06a | (Christian Bartolom√§us)++ | tools/templates/NQP_REVISION

[09:50] <Geth> ¬¶ rakudo: Bump NQP for nqp::backtrace(nqp::null) on JVM

[09:50] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/9c3f68b06a

[09:50] <Geth> ¬¶ rakudo: 0b91b21afa | (Christian Bartolom√§us)++ | 3 files

[09:50] <Geth> ¬¶ rakudo: [JVM] Support backtrace creation from nqp::null

[09:50] <Geth> ¬¶ rakudo: 

[09:50] <Geth> ¬¶ rakudo: This makes the JVM backend behave like MoarVM when creating a new

[09:50] <Geth> ¬¶ rakudo: backtrace without an existing exception. For more details see

[09:50] <Geth> ¬¶ rakudo: https://github.com/rakudo/rakudo/commit/2e79780e4a.

[09:50] <Geth> ¬¶ rakudo: 

[09:50] <Geth> ¬¶ rakudo: Please note that the change for src/core.c/Deprecations.pm6 fixed

[09:50] <Geth> ¬¶ rakudo: an oversight in the above commit. (Now only relevant for the JS

[09:51] <Geth> ¬¶ rakudo: backend, but this lead to spectest failures in S02-types/isDEPRECATED.t

[09:51] <Geth> ¬¶ rakudo: on the JVM backend before.)

[09:51] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/0b91b21afa

[09:52] <nine> bartolin_: the irony about the whole backtrace affair is that the JVM has been right all along, yet the test has been fudged for the JVM and the MoarVM bug made into spec.

[09:55] <bartolin_> nine: yeah, I've read that (either in one of your commit messages or while backlogging IRC). I'm pretty sure that I've fudged the tests for the JVM once they started to fail :/

[09:56] *** Kaiepi left
[09:56] *** Kaiepi joined
[10:01] <bartolin_> it happens from time to time that tests start to fail on the JVM backend. Usually I try to find out what causes the breakage, but often I don't have enough time to investigate closely. In that cases I tend to fudge the tests, so that new spectest failures are easy to see -- and for "looking at the problem later".

[10:11] <bartolin_> Probably that is not good enough. Maybe I should try to take the time and create issues for such regressions on the JVM backend -- because regressions there could point to a bug that doesn't surface on MoarVM (or to backend-specific code).

[10:14] *** linkable6 left
[10:17] *** linkable6 joined
[10:35] *** linkable6 left
[10:35] *** linkable6 joined
[10:42] <Geth> ¬¶ nqp: usev6++ created pull request #710: [JVM] Make nqp::unbox_i on NativeCall object work

[10:42] <Geth> ¬¶ nqp: review: https://github.com/Raku/nqp/pull/710

[10:58] <nine> MasterDuke: did you re-compile rakudo after the MoarVM change? If not rakudo's compiled C code will still work with the old layout of MVMInstance.

[11:00] <nine> MasterDuke: seems to work just fine after a full re-compile

[11:12] <MasterDuke> nine: oh ha. didn't even think of that. was a little confused that such a simple changed died so explosively

[11:15] <nine> It cought me a few times with changes to MVMThreadContext

[11:38] *** linkable6 left
[11:38] *** evalable6 left
[11:39] *** evalable6 joined
[11:40] *** linkable6 joined
[11:46] <lizmat> notable6: weekly

[11:46] <notable6> lizmat, No notes for ‚Äúweekly‚Äù

[11:46] <lizmat> well, that's easy then

[11:49] *** frost-lab joined
[11:49] <[Tux]> Rakudo v2021.03-116-g0b91b21af (v6.d) on MoarVM 2021.03-27-g42959e464

[11:49] <[Tux]> csv-test-xs-20      0.378 -  0.383

[11:49] <[Tux]> csv-ip5xs           0.804 -  0.812

[11:49] <[Tux]> test-t --race       0.926 -  0.960

[11:49] <[Tux]> test-t              1.895 -  1.944

[11:49] <[Tux]> test                7.429 -  7.912

[11:49] <[Tux]> csv-ip5xs-20        7.957 -  8.445

[11:49] <[Tux]> test-t-20 --race    9.708 -  9.717

[11:49] <[Tux]> csv-parser         25.986 - 26.901

[11:49] <[Tux]> test-t-20          30.041 - 31.363

[12:01] *** linkable6 left
[12:04] *** linkable6 joined
[12:06] *** linkable6 left
[12:08] *** linkable6 joined
[12:10] *** linkable6 left
[12:13] *** linkable6 joined
[12:16] *** linkable6 left
[12:16] *** linkable6 joined
[12:18] <bartolin_> nine: I made some progress with the NullPointerException. It seems to stem from https://github.com/Raku/nqp/blob/cb55e25345/src/vm/jvm/runtime/org/raku/nqp/runtime/Ops.java#L2636 because tc.native_j is null. Interestingly there is a check for this in the very simliar code at https://github.com/Raku/nqp/blob/cb55e25345/src/vm/jvm/runtime/org/raku/nqp/runtime/Ops.java#L2575. That check was introduced with https://github.com/Raku/nqp/commit/720d05222b ..

[12:27] <nine> bartolin_: don't we have a VMNull object on the JVM as well?

[12:30] <nine> Oh, but tc.native_j is not a place for storing SixModelObjects but explicitly for any Java object. So maybe a null is indeed ok there

[12:33] <bartolin_> yeah, I think null seems to be okay there. (otherwise there would be a VMNull available). Anyway it feels like I make more progress

[12:35] *** linkable6 left
[12:36] *** linkable6 joined
[12:40] *** domidumont joined
[12:43] <nine> cool :)

[13:02] *** softmoth left
[13:05] *** frost-lab left
[13:42] *** b2gills left
[14:06] *** b2gills joined
[14:43] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/04/05/2021-14-floating-rats/

[14:59] <vrurg> lizmat++ these are alway great news! :)

[16:00] *** Kaiepi left
[17:20] *** domidumont left
[17:51] *** Xliff joined
[17:56] *** djinni` left
[18:09] *** Kaiepi joined
[18:12] *** djinni` joined
[18:21] *** Xliff left
[19:18] *** linkable6 left
[19:19] *** linkable6 joined
[19:21] *** linkable6 left
[19:22] *** linkable6 joined
[19:24] *** linkable6 left
[19:25] *** linkable6 joined
[19:26] *** linkable6 left
[19:27] *** linkable6 joined
[19:28] *** linkable6 left
[19:31] *** linkable6 joined
[19:32] *** linkable6 left
[19:35] *** linkable6 joined
[19:49] *** linkable6 left
[19:49] *** linkable6 joined
[19:51] *** linkable6 left
[19:52] *** linkable6 joined
[19:55] *** linkable6 left
[19:57] *** linkable6 joined
[20:09] *** linkable6 left
[20:10] *** linkable6 joined
[20:11] *** linkable6 left
[20:12] *** linkable6 joined
[20:13] *** linkable6 left
[20:14] *** linkable6 joined
[20:22] *** linkable6 left
[20:25] *** linkable6 joined
[20:36] *** linkable6 left
[20:38] *** linkable6 joined
[20:41] <Geth> ¬¶ rakudo: c9aceda43d | (Elizabeth Mattijsen)++ | src/core.c/unicodey.pm6

[20:41] <Geth> ¬¶ rakudo: Make .uniprop a proper multio method

[20:41] <Geth> ¬¶ rakudo: 

[20:41] <Geth> ¬¶ rakudo: - make the sub version just pass on, like it should

[20:41] <Geth> ¬¶ rakudo: - make the .uniprop General_Category lookup a constant

[20:41] <Geth> ¬¶ rakudo: - move logic to Rakudo::Unicodey, only place for backend specific code

[20:41] <Geth> ¬¶ rakudo: - makes the sub version 25% slower (as it now passes on to the method)

[20:41] <Geth> ¬¶ rakudo: - makes the method version about 30x as fast

[20:41] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/c9aceda43d

[20:47] *** linkable6 left
[20:50] *** linkable6 joined
[20:58] *** linkable6 left
[21:00] *** linkable6 joined
[21:01] <lizmat> m: BEGIN my int $a = 4    # that seems, LTA ?

[21:01] <camelia> rakudo-moar 726a75e24: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§An exception occurred while evaluating a BEGIN‚ê§at <tmp>:1‚ê§Exception details:‚ê§  5===SORRY!5=== Error while compiling ‚ê§  Lexical with name '$a' has wrong type. real type 8 wanted type -1‚ê§  a‚Ä¶¬ª

[21:01] <Geth> ¬¶ rakudo: vrurg++ created pull request #4303: Don't add a delegated method if target already has it

[21:01] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/4303

[21:03] *** linkable6 left
[21:03] <Geth> ¬¶ roast: vrurg++ created pull request #728: Add a test for possible overriding of delegated methods

[21:03] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/pull/728

[21:05] *** linkable6 joined
[21:15] <japhb> lizmat: >.<  Yep, that's pretty LTA indeed, sheesh.

[21:16] *** linkable6 left
[21:17] *** linkable6 joined
[21:37] <vrurg> lizmat: I hate that error, saw it too many times. But there was always something with higher priority to fix it.

[21:39] <lizmat> is there an issue already ?

[21:40] <lizmat> it's the first time (that I remember) that I run into this

[21:40] <lizmat> m: my constant int $a = 42

[21:40] <camelia> rakudo-moar 726a75e24: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing initializer on constant declaration‚ê§at <tmp>:1‚ê§------> 3my constant int7‚èè5 $a = 42‚ê§¬ª

[21:40] <lizmat> mehg

[21:42] <Geth> ¬¶ rakudo: vrurg++ created pull request #4304: Make CLIENT:: work for code invoked from NQP world

[21:42] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/4304

[21:45] <vrurg> lizmat: quick lookup into issues doesn't reveal any related ticket.

[21:47] <lizmat> ok, too tired now to do anything anymore, so I'm going to be calling it a day

[21:47] <lizmat> "a day"

[21:47] <lizmat> &

[21:47] <vrurg> lizmat: o/ g'night!

[22:02] *** dogbert17 joined
[22:05] *** dogbert11 left
