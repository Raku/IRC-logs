[00:16] *** sxmx joined
[00:40] *** squashable6 left
[00:40] *** squashable6 joined
[01:18] *** kvw_5 joined
[01:21] *** kvw_5_ left
[01:22] *** squashable6 left
[01:24] *** squashable6 joined
[03:00] <releasable6> Next release in ≈6 days and ≈15 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[04:55] *** summerisle left
[04:56] *** summerisle joined
[05:11] *** softmoth left
[05:28] *** epony left
[05:29] *** epony joined
[07:19] *** donaldh_ joined
[07:21] *** donaldh left
[09:11] *** benchable6 left
[09:11] *** bloatable6 left
[09:11] *** committable6 left
[09:11] *** shareable6 left
[09:11] *** nativecallable6 left
[09:11] *** sourceable6 left
[09:11] *** quotable6 left
[09:11] *** bisectable6 left
[09:11] *** evalable6 left
[09:11] *** greppable6 left
[09:12] *** coverable6 left
[09:12] *** unicodable6 left
[09:12] *** linkable6 left
[09:12] *** squashable6 left
[09:12] *** notable6 left
[09:12] *** statisfiable6 left
[09:12] *** tellable6 left
[09:12] *** releasable6 left
[09:12] *** bisectable6 joined
[09:12] *** sourceable6 joined
[09:12] *** shareable6 joined
[09:13] *** linkable6 joined
[09:13] *** quotable6 joined
[09:13] *** nativecallable6 joined
[09:13] *** committable6 joined
[09:14] *** greppable6 joined
[09:14] *** statisfiable6 joined
[09:14] *** unicodable6 joined
[09:14] *** coverable6 joined
[09:14] *** releasable6 joined
[09:14] *** notable6 joined
[09:14] *** tellable6 joined
[09:14] *** squashable6 joined
[09:14] *** benchable6 joined
[09:14] *** evalable6 joined
[09:15] *** bloatable6 joined
[11:00] <Altai-man_> releasable6, status

[11:00] <releasable6> Altai-man_, Next release in ≈6 days and ≈7 hours. 3 blockers. Changelog for this release was not started yet

[11:00] <tellable6> 2021-03-08T23:14:50Z #raku-dev <vrurg> Altai-man Blin at ugexe-path-1 branch fails for me: https://gist.github.com/vrurg/a40d86aa09a6608def1f305b4df3355b Will run it on master.

[11:00] <tellable6> 2021-03-09T01:25:14Z #raku-dev <vrurg> Altai-man https://gist.github.com/vrurg/54977852501990045073e5782ad74e8b

[11:00] <releasable6> Altai-man_, Details: https://gist.github.com/1a23b8e4437bfe6ab48e7766d7b86025

[11:00] <tellable6> 2021-03-13T21:25:52Z #raku-dev <El_Che> Altai-man In case you're preparing 2020.03, the issue you raised may be a blocker: https://github.com/nxadm/rakudo-pkg/issues/81

[14:20] *** MitarashiDango[m joined
[15:30] *** domidumont joined
[16:17] *** softmoth joined
[17:17] *** softmoth_ joined
[17:19] *** softmoth left
[17:23] *** domidumont left
[18:05] *** b2gills left
[18:33] *** finsternis joined
[20:28] *** squashable6 left
[20:31] *** squashable6 joined
[20:35] *** b2gills joined
[21:02] <japhb> I'm having problems doing local multi-repo development.  MUGS is split into different repos: MUGS-Core, MUGS-Games, MUGS-UI-CLI, etc.  When I'm doing local development that involves API changes in progress (it's only version 0.1.x, so that's still to be expected), I need to `zef install . --force` repeatedly (the --force because I'm not changing version numbers until actual release).  Sometimes it seems 

[21:02] <japhb> not to actually install my changes, so I tried uninstalling the modules and then reinstalling.  Doesn't seem to work reliably.

[21:03] <japhb> So now what?  I mean, I could specify each of my checkouts in a huge lib path, but I'd rather figure out why uninstall/reinstall cycles don't work locally.

[21:05] <lizmat> japhb: I've been putting hard links between libraries in the "lib" directory and adding them to .gitignore in the appropriate repos

[21:05] <japhb> There's been a few times that I built a whole new Rakudo from scratch just to insure that I had clean installs, and that's just painful.

[21:05] <japhb> lizmat: Wait, you're working around the same problem?

[21:05] <lizmat> well, just making it more convenient

[21:05] <japhb> Well at least it's not just me.  :-/

[21:06] <lizmat> an alternative would be an elaborate RAKULIB= setting ?

[21:06] <lizmat> but that is also just meh

[21:06] <japhb> Oh, I see, so you don't have to worry about stuff installed into the site raku, because it appears to all be in the local lib.  Hmmm.

[21:06] <lizmat> the hard links / .gitignore make it opaque 

[21:06] <lizmat> yup

[21:07] <lizmat> so you can develop in parallel

[21:07] <japhb> Yeah, though it feels like none of this should be necessary.

[21:07] <japhb> nodnod

[21:07] <lizmat> well, didn't think much of it

[21:07] <lizmat> otoh, perhaps a dedicated REPO that takes a config could be helpful as well

[21:08] <japhb> I'm trying to figure out what to tell forkers to do, since asking them to wire up hardlinks and gitignore seems a bit much ... unless I supply a script to do so, I suppose.

[21:09] <ugexe> zef nuke site

[21:09] <japhb> ugexe: Which means reinstalling *all* of my modules, yes?  There are a lot that I keep installed all the time.

[21:10] <japhb> Though that does save having to build Rakudo from scratch just to ensure a really truly clean site tree.

[21:10] <ugexe> you can uninstall as many modules as you want with a single command as well

[21:10] <japhb> Is there a way to see which files are actually removed by the uninstall?

[21:10] <ugexe> as for the root of your issue it smells precomp related (like how you can edit source files but the old precomp code still gets ran)

[21:10] <japhb> Yeah, I would believe that.

[21:11] <japhb> Can you tell zef to nuke the precomp tree and re-precomp?

[21:11] <japhb> (I don't remember such a thing, but I'm sure I could have missed it too.)

[21:12] <ugexe> no

[21:13] <ugexe> CURI needs to expose an interface for doing precomp first

[21:13] <japhb> nod

[21:13] <ugexe> as for what files get deleted it should be listed in rakus copy of the META6.json under the files key, as well as the short-name-lookup stuff. see https://github.com/rakudo/rakudo/blob/a2399ce9aa76e48037b20c7585f7d1d675fe5400/src/core.c/CompUnit/Repository/Installation.pm6#L293

[21:14] <ugexe> the short-name-lookup is the sha1 precomp stuff

[21:14] <ugexe> er wait, you didnt have a problem with uninstall

[21:15] <ugexe> https://github.com/rakudo/rakudo/blob/a2399ce9aa76e48037b20c7585f7d1d675fe5400/src/core.c/CompUnit/Repository/Installation.pm6#L255-L288

[21:15] <ugexe> this is the precompilation logic on install

[21:16] <ugexe> so i think if you did RAKUDO_LOG_PRECOMP=1 you might be able to notice if it doesn't precompile certain modules when force installing

[21:20] <japhb> OK, that's worth a try, thanks.

[21:22] <japhb> Once in a while (and just now, which is why I remembered) I get this while attempting to uninstall: Failed to get the directory contents of '.../rakudo-moar-2021.03-158-gda80b57cf/install/share/perl6/site/short/F278845DC0259ECFAFE6A1D4AE3387D9AE2FAEE5': Failed to open dir: Too many open files

[21:22] <japhb> But I can rerun and it appears to work fine.

[21:24] <ugexe> yeah ive seen that more lately with osx

[21:25] <japhb> Linux Mint here.

[21:25] <ugexe> no idea where those handles would be getting left open though

[21:25] <japhb> Just got it again, sigh.

[21:26] <ugexe> the only thing i can guess is the internal rakudo file recursion routine

[21:27] <ugexe> https://github.com/rakudo/rakudo/blob/a2399ce9aa76e48037b20c7585f7d1d675fe5400/src/core.c/Rakudo/Internals.pm6#L1294

[21:31] <ugexe> then again i dont think there should be any recursion involved in those directories

[21:33] <lizmat> no recursion was intended in that code, au contraire  :-)

[21:33] <lizmat> afaik, it doesn't open any files either, just directories?

[21:33] <japhb> OK, this is a bit weird -- I'm in the habit of running tests before doing the reinstall, using && to insure that failed tests abort the reinstall.  When running the tests first, I'm way more likely to get that Too many open files error than if I just do the reinstall by itself.

[21:33] <lizmat> and it does do the closedirs 

[21:34] <japhb> So `t && zef uninstall MUGS::Games && RAKUDO_LOG_PRECOMP=1 zef install .` --> Run tests, then BOOM on the uninstall, whereas `zef uninstall MUGS::Games && RAKUDO_LOG_PRECOMP=1 zef install .` --> Works first time.

[21:40] <ugexe> the error is specifically about opening a directory

[21:40] <japhb> Nope, red herring.  Now I'm getting it every time even without running the tests first.

[21:43] <lizmat> m: use nqp; dd nqp::closedir(nqp::opendir("lib"))

[21:43] <camelia> rakudo-moar 7e87e20cd: OUTPUT: «===SORRY!===␤Unhandled arg type 0␤»

[21:43] <lizmat> that is... weird

[21:44] <lizmat> aah.. the problem is in dd-ing the return value of closedir

[21:50] <japhb> WTH?  This is just acting too weird.  I'm going to try going back to an earlier Rakudo and see if it's something recent.

[21:51] <ugexe> my $cur = CompUnit::RepositoryRegistry.repository-for-name("site"); my $dist = $cur.candidates("MUGS::Games").head; say $cur.uninstall($dist);

[21:51] <ugexe> i was expecting that to work, but it doesnt seem to do anything

[21:52] <japhb> OK, error occurs with rakudo-moar-2021.03-1-gbccb2ce2d as well, but not every time.

[21:56] <ugexe> might be worth trying a version pre-last libuv bump

[22:01] <japhb> OK, looking for that

[22:04] <japhb> Oof, it's been a bit.

[22:04] <japhb> --> Building Rakudo 291cc5f39~1: 2020.12-128-g3235f3e42

[22:45] *** evalable6 left
[22:48] *** evalable6 joined
[23:00] <releasable6> Next release in ≈5 days and ≈19 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:19] <japhb> OK, so far can't trigger the "Too many open files" bug on 2020.12-128-g3235f3e42, after several test/uninstall/install cycles in several different trees.

[23:19] <japhb> HOWEVER ...

[23:20] <japhb> When I install with RAKUDO_LOG_PRECOMP=1, I can see that editing a file, saving it, and doing a reinstall does NOT change the precompile ID.  Shouldn't that change?

[23:20] <japhb> Or is it based on the long name instead of the file contents?

[23:20] <japhb> (Or short name, I suppose)

[23:22] <japhb> ugexe: ^^

[23:23] <ugexe> CURFS is based on sha1 of sources, CURI is based on long name

[23:23] <ugexe> so no you wouldn't see it change if you are installing

[23:30] <japhb> OK, well shoot, that brings me back to the difficulty of telling whether changes are *really* happening during precompt.

[23:30] <japhb> *precomp

[23:33] <japhb> At least I have a non-crashy Rakudo, even if it is old.

[23:45] <ugexe> fwiw sometimes you might want to do `raku --ll-exception -I. bin/zef uninstall ...` 

[23:45] <ugexe> since you can't do like `RAKUDO_LL_EXCEPTION=1 zef uninstall ...`

