[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[01:27] *** kvw_5 joined
[01:30] *** kvw_5_ left
[01:58] *** linkable6 left
[01:59] *** linkable6 joined
[02:59] *** releasable6 left
[02:59] *** unicodable6 left
[02:59] *** squashable6 left
[02:59] *** nativecallable6 left
[02:59] *** statisfiable6 left
[02:59] *** shareable6 left
[02:59] *** benchable6 left
[02:59] *** reportable6 left
[02:59] *** bloatable6 left
[02:59] *** bisectable6 left
[02:59] *** evalable6 left
[02:59] *** sourceable6 left
[02:59] *** coverable6 left
[02:59] *** greppable6 left
[02:59] *** committable6 left
[02:59] *** quotable6 left
[03:00] *** shareable6 joined
[03:00] *** bloatable6 joined
[03:00] *** unicodable6 joined
[03:00] *** nativecallable6 joined
[03:00] *** squashable6 joined
[03:00] *** evalable6 joined
[03:00] *** quotable6 joined
[03:00] *** benchable6 joined
[03:00] *** statisfiable6 joined
[03:01] *** greppable6 joined
[03:01] *** committable6 joined
[03:01] *** releasable6 joined
[03:01] *** reportable6 joined
[03:01] *** bisectable6 joined
[03:02] *** coverable6 joined
[03:02] *** sourceable6 joined
[03:17] *** b2gills left
[03:17] *** b2gills joined
[04:07] <japhb> Just came across somewhat odd behavior -- I was trying to see how reliable `Supply.interval($int)` is when $int shrinks, so I ran the following:

[04:07] <japhb> raku -e 'my $i = 0; my $int = .002; my $limit = 20; react whenever Supply.interval($int) { done if $limit < now - INIT now; $i++ }; say $i; say $i * $int * 100 / $limit;'

[04:07] <japhb> Varying $int to be some whole number of milliseconds.

[04:08] <japhb> The final number printed in the run is % of expected interval triggers that actually arrived within the time limit.

[04:08] <japhb> As expected, as $int goes from 0.1 down to 0.001, that % falls quite a bit.

[04:09] <japhb> I expected that this would represent random (or at least chaotic) interactions, especially since I'm on a laptop and I can see the core speeds varying all over the place.

[04:09] <japhb> But ... the % arriving is remarkably stable for a given $int.

[04:10] <japhb> Like within 2 parts in 10_000 on my system.

[04:10] <japhb> Which indicates to me really regular, predictable things "stealing time".

[04:11] <japhb> But ... what?

[04:17] *** linkable6 left
[04:17] *** evalable6 left
[04:17] *** evalable6 joined
[04:19] <japhb> Actually at .001 interval, it's a little less stable -- but still within 4 parts per 1_000.

[04:19] *** linkable6 joined
[06:02] *** reportable6 left
[06:02] *** reportable6 joined
[06:28] *** domidumont joined
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:07] <nine> japhb: what are the percentages?

[07:08] *** patrickb joined
[07:13] <moon-child> any chance someone can take a look at https://github.com/rakudo/rakudo/pull/4312 ?

[07:22] <nine> moon-child: the change looks innocent enough, but I don't know what our policies on such aliases are or what's the semantic difference between those Unicode symbols :/

[07:26] <lizmat> google seems to be unaware of any semantic difference

[07:27] <lizmat> I already approve the PR, but would like to have jnthn chime in as it would affect Comma e.g.

[07:29] <moon-child> I'm not aware of any difference between them.  Some apls use the small variant, so I got used to the way it looks, is all :P

[07:34] *** LizBot left
[07:36] *** lizmat left
[07:36] *** [Tux] left
[07:39] *** [Tux] joined
[08:01] *** Altai-man_ left
[08:03] *** sena_kun joined
[08:08] *** lizmat joined
[08:22] *** finsternis left
[08:27] *** LizBot joined
[09:19] *** chansen_ left
[09:31] *** MasterDuke left
[09:32] <lizmat> Stuff going on on Freenode: https://gist.github.com/joepie91/df80d8d36cd9d1bde46ba018af497409

[09:32] <lizmat> nothing to worry about yet

[09:34] *** chansen_ joined
[09:38] <moon-child> also https://fuchsnet.ch/freenode-resign-letter.txt, apparently 'no longer a draft'

[09:39] <lizmat> meh, things are moving fast  

[09:53] <Geth> ¦ rakudo: d00c7e353d | Moonchild++ | 8 files

[09:53] <Geth> ¦ rakudo: Add support for ∊ and ∍ as aliases for ∈ and ∋

[09:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d00c7e353d

[09:53] <Geth> ¦ rakudo: face292a07 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 8 files

[09:53] <Geth> ¦ rakudo: Merge pull request #4312 from moon-chilled/master

[09:53] <Geth> ¦ rakudo: 

[09:53] <Geth> ¦ rakudo: Add support for ∊ and ∍ as aliases for ∈ and ∋

[09:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/face292a07

[10:32] <gfldex> After reading freenode-resign-letter.txt I consider myself lucky to live in a country where we have proper laws that properly protect and make running a non-profit cheap and painfree.

[10:33] <gfldex> Please consider https://codeberg.org/ over github.

[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:40] <lizmat> afk for a few hours&

[12:47] <leont> It seems like community implosions are fashionable lately -_-

[13:31] *** eaterof is now known as eater

[13:53] <[Coke]> 

[13:53] *** [Coke] left
[13:53] *** [Coke] joined
[13:53] *** [Coke] left
[13:53] *** [Coke] joined
[14:00] <jdv79> [Coke]: are you ok?

[14:00] <[Coke]> yes?

[14:00] <jdv79> cool

[14:00] <[Coke]> Why do you ask?

[14:00] <[Coke]> am I giving a vibe? :)

[14:01] * [Coke] tries to connect to libera.chat and fails.

[14:01] * [Coke] wanders away for $DAYJOB

[14:21] *** gugod left
[14:53] *** frost-lab left
[14:54] *** domidumont left
[14:59] *** patrickb left
[14:59] *** patrickb joined
[15:20] <Geth> ¦ rakudo/rakuast: cdd81b3b6a | (Jonathan Worthington)++ | 2 files

[15:20] <Geth> ¦ rakudo/rakuast: Remaining RakuAST nodes for character classes

[15:20] <Geth> ¦ rakudo/rakuast: 

[15:20] <Geth> ¦ rakudo/rakuast: This adds support for `<[a..z]>` and similar, as well as filling out

[15:20] <Geth> ¦ rakudo/rakuast: compilation of addition and subtraction of character classes. Likely

[15:20] <Geth> ¦ rakudo/rakuast: there will be the odd detail to work out - there's a lot of semantics in

[15:20] <Geth> ¦ rakudo/rakuast: here - but everything tested so far matches with the current compiler

[15:20] <Geth> ¦ rakudo/rakuast: frontend.

[15:20] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/cdd81b3b6a

[16:07] *** patrickb left
[16:34] *** squashable6 left
[16:35] *** squashable6 joined
[17:12] *** domidumont joined
[17:15] <sena_kun> releasable6, status

[17:15] <releasable6> sena_kun, Next release in ≈2 days and ≈1 hour. There are no known blockers. 0 out of 43 commits logged

[17:15] <releasable6> sena_kun, Details: https://gist.github.com/31c3814f66b82a649dbd0274fbb194ec

[17:16] <AlexDaniel`> please ping me later about the bots if there are any freenode-related changes

[17:28] <japhb> nine: Sorry, went to bed early last night.  Here's some pulled from my terminal scrollback: .050: 100%, .033: 99.66%, .016: 99.04%, .008: 97.88%, .004: 96.04%, .002: 92.56%, .001: 87.02%

[17:39] <nine> japhb: just paranoid here, but I think $i ought to be an atomicint and the op an atomic inc

[17:48] *** domidumont left
[18:02] *** reportable6 left
[18:02] <japhb> I thought whenever blocks were supposed to be single-threaded?  I will feel like an idiot if I've just totally misunderstood that.

[18:03] <ugexe> is it react or whenever?

[18:03] <ugexe> i thought it was react

[18:05] *** reportable6 joined
[18:06] <ugexe> i guess it would be both in the later case

[18:06] <japhb> The docs say "Please note that one should keep the code inside the whenever as small as possible, as only one whenever block will be executed at any time. One can use a start block inside the whenever block to run longer running code."  Sounds closer to your explanation, but for something like this I'd probably only trust Word Of Jonathan to be 100% accurate, given he wrote it.  :-)

[18:06] <japhb> Yeah, which brings me back to thinking that I shouldn't *need* to use an atomicint unless something is broken with that guarantee.

[18:07] <tonyo> that doesn't mean whenever is single-threaded

[18:08] <japhb> tonyo: We may be using the terminology slightly differently.  I mean "Only one thread at a time is allowed to be inside the whenever block", though of course it could be different threads entering different iterations.

[18:09] <japhb> And I guess ugexe was saying that that should be "Only one thread at a time is allowed to be inside the react block"

[18:12] <ugexe> closer to only one thread from outside the react block could be inside the react block initializing the handlers... threads can be started inside the react block ala whenever start ... { } of course

[18:13] <tonyo> m: y $u = Supplier.new; my $s = supply { whenever $u.Supply { sleep 5; emit time; }; whenever $u.Supply { sleep 1; emit time; }; }; $s.tap( -> $a { $a.say; } ); say time; $u.emit("hello"); sleep 7;

[18:13] <camelia> rakudo-moar face292a0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of y///.  In Raku please use: tr///.␤at <tmp>:1␤------> 3y7⏏5 $u = Supplier.new; my $s = supply { whe␤»

[18:13] <tonyo> m: my $u = Supplier.new; my $s = supply { whenever $u.Supply { sleep 5; emit time; }; whenever $u.Supply { sleep 1; emit time; }; }; $s.tap( -> $a { $a.say; } ); say time; $u.emit("hello"); sleep 7;

[18:13] <camelia> rakudo-moar face292a0: OUTPUT: «1621448019␤1621448024␤1621448025␤»

[18:38] <Geth> ¦ nqp: e924473199 | (Daniel Green)++ | 9 files

[18:38] <Geth> ¦ nqp: Use Win32 native API to get file changetime on JVM

[18:38] <Geth> ¦ nqp: 

[18:38] <Geth> ¦ nqp: Windows doesn't support "unix:ctime" when using Files.getAttribute, so

[18:38] <Geth> ¦ nqp: instead try calling the Win32 native API. This required upgrading JNA

[18:38] <Geth> ¦ nqp: from 4.0.0 to 4.5.0 and adding the JNA platform jar.

[18:38] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/e924473199

[18:38] <Geth> ¦ nqp: bd9a7a257b | MasterDuke17++ (committed using GitHub Web editor) | 9 files

[18:38] <Geth> ¦ nqp: Merge pull request #723 from MasterDuke17/use_native_api_for_changetime_on_windows_for_jvm_backend

[18:38] <Geth> ¦ nqp: 

[18:38] <Geth> ¦ nqp: Use Win32 native API to get file changetime on JVM

[18:38] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/bd9a7a257b

[18:47] *** MasterDuke joined
[18:55] *** MasterDuke left
[18:58] *** MasterDuke joined
[20:08] *** cog left
[20:09] *** cog joined
[20:11] *** raydiak left
[20:12] *** raydiak joined
[20:21] *** djinni` left
[20:23] *** djinni` joined
[20:52] <MasterDuke> ha! finally figured out the project euler problem i started working on in 2012 that inspired my first perl 6 module in2016 because the builtin .combinations was too slow, and then subsequent first commits to rakudo in 2016 to mildly speedup the builtins

[21:02] <lucs> MasterDuke: Which one?

[21:03] <MasterDuke> 60

[21:03] <lucs> Thanks (just curious)

[21:03] <MasterDuke> "Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime."

[21:48] <MasterDuke> .ask jnthn i randomly noticed that `for ^4 -> $foo { $foo = 4 }` doesn't give the name of the variable in the error anymore, which bisected to https://github.com/rakudo/rakudo/commit/397263e30faf309f490e4407f0f797ca52682bc7 any idea how we could do the compile-time analysis you mentioned to get it back?

[21:48] <tellable6> MasterDuke, I'll pass your message to jnthn

[22:01] *** moon-child left
[22:35] *** MasterDuke left
[23:06] *** summerisle left
[23:27] *** sortiz joined
