[00:05] *** Kaiepi joined
[00:38] *** Kaiepi left
[00:46] *** [Tux] joined
[01:12] *** [Tux] left
[01:19] *** [Tux] joined
[01:27] *** b2gills joined
[01:52] *** kvw_5 joined
[01:54] *** lizmat joined
[01:55] *** kvw_5_ left
[02:22] *** bloatable6 joined
[03:51] *** Kaiepi joined
[06:11] *** sivoais left
[06:40] *** sivoais joined
[06:50] *** patrickb joined
[07:39] *** lizmat left
[07:40] *** [Tux] left
[07:44] *** [Tux] joined
[07:53] *** sena_kun left
[07:54] *** lizmat joined
[07:59] *** sena_kun joined
[08:06] *** LizBot joined
[08:29] <japhb> CBOR::Simple 0.0.6 now released and uploaded; this version supports a `cbor-diagnostic($cbor)` routine to decode CBOR into debug-friendly diagnostic text (which was needed to figure what I was doing wrong with packed typed arrays, which are coming soon :-) )

[08:29] <japhb> I love it when a binary protocol spec defines a diagnostic format as well.  :-)

[08:30] <japhb> *binary format spec

[08:30] <japhb> And with that, time to snooze ... &

[09:28] *** frost-lab joined
[09:55] *** domidumont joined
[10:13] *** samcv left
[10:13] *** samcv joined
[10:42] *** frost-lab left
[10:47] <Geth> ¦ rakudo/rakuast: 4d2b2cf94a | (Jonathan Worthington)++ | 3 files

[10:47] <Geth> ¦ rakudo/rakuast: RakuAST node for a bare code block in a regex

[10:47] <Geth> ¦ rakudo/rakuast: 

[10:47] <Geth> ¦ rakudo/rakuast: Try compiling it as an immediate block, which seems to work, and will

[10:47] <Geth> ¦ rakudo/rakuast: perform a bit better than what we do on `master` (which is doing a

[10:47] <Geth> ¦ rakudo/rakuast: closure clone per invocation of the block, not one per invocation of the

[10:47] <Geth> ¦ rakudo/rakuast: enclosing regex).

[10:47] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/4d2b2cf94a

[11:44] *** patrickb left
[11:57] *** MasterDuke left
[12:02] *** domidumont left
[12:55] *** titsuki joined
[13:19] <Geth> ¦ rakudo/rakuast: 01d6123899 | (Jonathan Worthington)++ | 3 files

[13:19] <Geth> ¦ rakudo/rakuast: RakuAST node for the ** regex quantifier

[13:19] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/01d6123899

[13:19] <Geth> ¦ rakudo/rakuast: 14a99087bf | (Jonathan Worthington)++ | src/Raku/Grammar.nqp

[13:19] <Geth> ¦ rakudo/rakuast: Make sure typed_worry usages don't blow up

[13:19] <Geth> ¦ rakudo/rakuast: 

[13:19] <Geth> ¦ rakudo/rakuast: We don't really handle it yet, but should return `self` to make sure

[13:19] <Geth> ¦ rakudo/rakuast: thet caller gets back a valid cursor.

[13:19] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/14a99087bf

[13:24] *** LizBot left
[13:28] <cog_> Jnthn, $backtrack is of type RakuAST::Regex::Backtrack, so why do you test it ? https://github.com/rakudo/rakudo/commit/01d6123899#diff-7c9a2c5696e95aae44844768155858c03f573f9e6ce2c60e448e61094bdff160R772

[13:28] <cog_> Do I miss something ?

[13:32] <cog_> jnthn, Also $excludes-min is a boolean so why the ternary ? What do I miss ?

[14:02] <[Tux]> Rakudo v2021.04-10-gbb069a99c (v6.d) on MoarVM 2021.04-7-g09c4c4d42

[14:02] <[Tux]> csv-test-xs-20      0.370 -  0.372

[14:02] <[Tux]> csv-ip5xs           0.820 -  0.835

[14:02] <[Tux]> test-t --race       0.899 -  0.905

[14:02] <[Tux]> test-t              1.941 -  2.004

[14:02] <[Tux]> test                8.067 -  8.125

[14:02] <[Tux]> csv-ip5xs-20        8.583 -  9.545

[14:02] <[Tux]> test-t-20 --race    9.834 - 10.142

[14:02] <[Tux]> csv-parser         26.046 - 26.421

[14:02] <[Tux]> test-t-20          33.553 - 34.169

[14:05] <Geth> ¦ rakudo/rakuast: 57e1b4fcae | (Jonathan Worthington)++ | 2 files

[14:05] <Geth> ¦ rakudo/rakuast: RakuAST node for ** {$m..$n} style quantifiers

[14:05] <Geth> ¦ rakudo/rakuast: 

[14:05] <Geth> ¦ rakudo/rakuast: Not sure BlockRange is the best name for this, but didn't come up with a

[14:05] <Geth> ¦ rakudo/rakuast: better one.

[14:05] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/57e1b4fcae

[14:07] *** domidumont joined
[14:55] <timotimo> HighDynamicRange

[15:11] <Xliff> repl.it?

[15:11] <Xliff> Or were you just spelling out HDR?

[15:16] <timotimo> well, BlockRange (or similar) is kind of a dynamic way to have a range in a regex quantifier

[15:16] <timotimo> and i just punned it into HDR

[16:07] *** domidumont left
[16:21] <Xliff> I see we are talking about two different things. ;)

[16:22] *** domidumont joined
[16:34] <Geth> ¦ rakudo/rakuast: a7d159dd91 | (Jonathan Worthington)++ | 3 files

[16:34] <Geth> ¦ rakudo/rakuast: RakuAST node for the ! infix prefix meta-op

[16:34] <Geth> ¦ rakudo/rakuast: 

[16:34] <Geth> ¦ rakudo/rakuast: Also create the RakuAST::Infix nodes more predictably, so we don't need

[16:34] <Geth> ¦ rakudo/rakuast: to check for them being missing and create them for simple ops in

[16:34] <Geth> ¦ rakudo/rakuast: multiple places.

[16:34] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/a7d159dd91

[16:34] <Geth> ¦ rakudo/rakuast: 3ee326a18a | (Jonathan Worthington)++ | src/Raku/Actions.nqp

[16:34] <Geth> ¦ rakudo/rakuast: Perform BEGIN-time effects of blocks

[16:34] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/3ee326a18a

[16:34] <Geth> ¦ rakudo/rakuast: c117647864 | (Jonathan Worthington)++ | src/Raku/ast/signature.rakumod

[16:34] <Geth> ¦ rakudo/rakuast: Set raw flag on sigilless parameters

[16:34] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/c117647864

[16:49] <Geth> ¦ rakudo/rakuast: 77f49e99ee | (Jonathan Worthington)++ | 3 files

[16:49] <Geth> ¦ rakudo/rakuast: RakuAST node for the R infix prefix meta-op

[16:49] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/77f49e99ee

[17:06] *** lizmat left
[17:16] *** lizmat joined
[17:18] *** domidumont left
[17:24] *** LizBot joined
[17:29] <sena_kun> releasable6, status

[17:29] <releasable6> sena_kun, Next release in ≈21 days and ≈1 hour. There are no known blockers. 0 out of 10 commits logged

[17:29] <releasable6> sena_kun, Details: https://gist.github.com/890215b07e17a9383623b5a0574e6d5b

[17:35] <Geth> ¦ rakudo/rakuast: 9f93ca687e | (Jonathan Worthington)++ | 3 files

[17:35] <Geth> ¦ rakudo/rakuast: Fix a mis-compile of `if /foo/ {}` and similar

[17:35] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/9f93ca687e

[17:56] *** Xliff left
[18:04] *** kvw_5 left
[18:04] *** b2gills left
[18:04] *** dogbert17 left
[18:07] *** kvw_5 joined
[18:07] *** b2gills joined
[18:07] *** dogbert17 joined
[18:08] *** LizBot left
[18:08] *** LizBot joined
[19:31] *** titsuki left
[20:43] *** MasterDuke joined
[20:49] <tbrowder> .ask lizmat there was some interest (one thumbs up) for making DateTime.posix show a real number, but that's too i

[20:50] *** unicodable6 left
[20:50] *** tellable6 joined
[20:50] <lizmat> too i ?

[20:51] <tbrowder> hi!

[20:51] *** evalable6 joined
[20:51] *** greppable6 left
[20:51] *** releasable6 left
[20:51] *** committable6 joined
[20:51] <tbrowder> to show a real number for posix seems pretty complicated

[20:52] *** shareable6 joined
[20:52] *** sourceable6 joined
[20:53] *** bisectable6 joined
[20:53] <tbrowder> what do you think about having another method, say, "posix-real", to show the same thing?

[20:53] *** statisfiable6 left
[20:54] *** statisfiable6 joined
[20:54] <lizmat> as long as it doesn't affect the common / current case performance wise, I'd be open to all sorts of improvements  :-)

[20:55] *** unicodable6 joined
[20:56] <tbrowder> from my testing it looks like the fractional part of DateTime.second added to the posix value would be the correct answer to posix-real

[20:56] *** tellable6 left
[20:57] *** releasable6 joined
[20:57] <lizmat> would it also be correct on days with leap seconds ?

[20:58] <lizmat> ah, yes, it would

[21:03] <tbrowder> i will be happy to submit a PR for such a method if you approve

[21:05] *** sourceable6 left
[21:05] *** benchable6 left
[21:05] *** sourceable6 joined
[21:05] *** bloatable6 left
[21:06] *** HarmtH left
[21:07] *** nativecallable6 joined
[21:07] *** tellable6 joined
[21:07] *** bloatable6 joined
[21:07] *** greppable6 joined
[21:08] <lizmat> tbrowder: cannot promise that

[21:08] <tbrowder> ?

[21:09] <tbrowder> i mean i will submit if you approve of the idea, i.e., not dead on arrival

[21:11] <lizmat> oh, it's definitely not DOA, I would have said that  :-)

[21:12] <tbrowder> ok, thnc

[21:12] <tbrowder> thnx

[21:49] *** evalable6 left
[21:49] *** shareable6 left
[21:49] *** statisfiable6 left
[21:49] *** bisectable6 left
[21:49] *** unicodable6 left
[21:49] *** committable6 left
[21:49] *** sourceable6 left
[21:49] *** bloatable6 left
[21:49] *** tellable6 left
[21:49] *** releasable6 left
[21:49] *** coverable6 left
[21:49] *** greppable6 left
[21:49] *** nativecallable6 left
[21:51] *** unicodable6 joined
[21:51] *** sourceable6 joined
[21:51] <AlexDaniel`> “up 612 days”

[21:51] <AlexDaniel`> time for a reebot :)

[21:52] *** notable6 joined
[21:52] *** greppable6 joined
[21:52] *** releasable6 joined
[21:52] *** statisfiable6 joined
[21:52] *** committable6 joined
[21:53] *** evalable6 joined
[21:53] *** tellable6 joined
[22:08] <MasterDuke> [Coke]: do you have a rakudo installed in windows?

[22:35] <Geth> ¦ roast: 35be0e0f47 | (Tom Browder)++ | 2 files

[22:35] <Geth> ¦ roast: Add Gregorian test data including negative dates

[22:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/35be0e0f47

[22:35] <Geth> ¦ roast: b0b0af33c5 | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[22:35] <Geth> ¦ roast: Merge pull request #733 from tbrowder/baum

[22:35] <Geth> ¦ roast: 

[22:35] <Geth> ¦ roast: Add Gregorian test data including negative dates

[22:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b0b0af33c5

[22:36] *** Kaiepi left
[23:09] <Geth> ¦ rakudo: tbrowder++ created pull request #4350: Add method 'posix-real' to show posix value with fractional seconds

[23:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4350

[23:15] *** Kaiepi joined
