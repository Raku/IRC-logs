[01:06] *** sxmx left
[01:06] *** gfldex left
[01:06] *** |Tux| left
[01:06] *** djinni` left
[01:06] *** krunen left
[01:09] *** sxmx joined
[01:09] *** gfldex joined
[01:09] *** |Tux| joined
[01:09] *** djinni` joined
[01:09] *** krunen joined
[01:10] *** sxmx left
[01:10] *** sxmx joined
[01:15] *** leont left
[01:20] *** patrickb left
[02:20] *** coverable6 left
[02:20] *** benchable6 left
[02:20] *** greppable6 left
[02:20] *** sourceable6 left
[02:20] *** linkable6 left
[02:20] *** evalable6 left
[02:20] *** shareable6 left
[02:20] *** statisfiable6 left
[02:20] *** tellable6 left
[02:20] *** releasable6 left
[02:20] *** unicodable6 left
[02:20] *** bloatable6 left
[02:20] *** squashable6 left
[02:20] *** notable6 left
[02:20] *** quotable6 left
[02:20] *** committable6 left
[02:20] *** nativecallable6 left
[02:20] *** bisectable6 left
[02:21] *** statisfiable6 joined
[02:21] *** bloatable6 joined
[02:22] *** sourceable6 joined
[02:22] *** tellable6 joined
[02:22] *** nativecallable6 joined
[02:22] *** releasable6 joined
[02:22] *** committable6 joined
[02:23] *** squashable6 joined
[02:23] *** evalable6 joined
[02:23] *** quotable6 joined
[02:23] *** unicodable6 joined
[02:23] *** benchable6 joined
[02:23] *** bisectable6 joined
[02:23] *** shareable6 joined
[02:23] *** coverable6 joined
[02:24] *** notable6 joined
[02:24] *** linkable6 joined
[02:24] *** greppable6 joined
[02:25] *** klapperl left
[02:31] *** klapperl joined
[02:35] *** [Coke]_ joined
[02:35] *** [Coke]_ left
[02:35] *** [Coke]_ joined
[02:35] *** tyilanmenyn joined
[02:36] *** vrurg_ joined
[02:36] *** samcv_ joined
[02:37] *** djinni`_ joined
[02:37] *** HarmtH_ joined
[02:38] *** gfldex_ joined
[02:38] *** japhb_ joined
[02:43] *** eaterof joined
[02:43] *** literal_ joined
[02:43] *** klapperl left
[02:43] *** vrurg left
[02:43] *** eater left
[02:43] *** japhb left
[02:43] *** [Coke] left
[02:43] *** samcv left
[02:43] *** HarmtH left
[02:43] *** tyil left
[02:43] *** literal left
[02:43] *** gfldex left
[02:43] *** |Tux| left
[02:43] *** djinni` left
[02:43] *** krunen left
[02:49] *** krunen joined
[02:49] *** klapperl joined
[02:49] *** |Tux| joined
[03:56] *** Xliff left
[05:32] *** evalable6 left
[05:32] *** linkable6 left
[05:34] *** linkable6 joined
[05:35] *** evalable6 joined
[06:39] *** evalable6 left
[06:39] *** linkable6 left
[06:39] *** evalable6 joined
[06:40] *** linkable6 joined
[08:33] *** gfldex_ is now known as gfldex

[08:49] *** tyilanmenyn is now known as tyil

[09:33] <bartolin> lizmat: there where some dying spectests with your branch on the JVM backend, because adverbs on array slices didn't work. I hope that's easy-ish to fix -- I've added a comment to the PR

[09:33] <bartolin> r: my @array = <A B>; say @array[0,1]:p  ## died with 'java.lang.RuntimeException: This type does not support positional operations'

[09:33] <camelia> rakudo-jvm 08b449e1a, rakudo-moar 8150a2864: OUTPUT: «(0 => A 1 => B)␤»

[09:46] *** sena_kun joined
[09:56] <Geth> ¦ nqp: JJ++ created pull request #692: Minor corrections

[09:56] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/692

[10:04] *** patrickb joined
[10:09] <patrickb> o/

[10:11] <patrickb> bartolin: Can you help me do a rebootstrap of the JVM backend? (Is there any documentation besides nqp/docs/bootstrapping.pod?)

[10:12] <patrickb> Here is a short explanation of the problem I face: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2021-01-02#l150

[10:47] *** frost-lab left
[11:30] *** sena_kun left
[11:54] *** leont joined
[11:54] <Geth> ¦ rakudo/faster-slice-access: 76d3e33811 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals/PostcircumfixAdverbs.pm6

[11:54] <Geth> ¦ rakudo/faster-slice-access: Hopefully fix JVM backend issues

[11:54] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/76d3e33811

[12:09] <[Tux]> Rakudo v2020.12-32-g8150a2864 (v6.d) on MoarVM 2020.12-19-gf36eaf0a6

[12:09] <[Tux]> csv-test-xs-20      0.381 -  0.383

[12:09] <[Tux]> csv-ip5xs           0.825 -  0.827

[12:09] <[Tux]> test-t --race       0.893 -  0.903

[12:09] <[Tux]> test-t              1.884 -  1.893

[12:09] <[Tux]> test                7.812 -  7.966

[12:09] <[Tux]> csv-ip5xs-20        8.122 -  8.185

[12:09] <[Tux]> test-t-20 --race    9.350 -  9.520

[12:09] <[Tux]> csv-parser         24.698 - 26.312

[12:09] <[Tux]> test-t-20          33.014 - 33.347

[13:28] *** lucasb joined
[13:50] *** patrickb left
[15:06] *** sena_kun joined
[15:44] <bartolin> patrickb: I'm struggling with the rebootstrap for the JVM backend, too. As far as I remember, one has to add the new implementation first (parallel to the old implementation), generate new stage0 files afterwards and only then use the new implementation in the compiler. At least that's how I did it when I wanted to change the order of arguments for bindlexdyn: 1.) https://github.com/Raku/nqp/commit/db3e4a043f 2.) https://github.com/Raku/nqp/commit/0610

[15:44] <tellable6> bartolin, I'll pass your message to patrickb

[15:45] <bartolin> but it seems to be more complicated if the op is used by nqp itself (as in your case). You can't just change it in src/vm/jvm/QAST/Compiler.nqp and src/core/testing.nqp at the same step (or so it seems)

[15:48] <bartolin> I'd think the following should work: 1.) Add a new op 'spawnprocasync2' to src/vm/jvm/QAST/Compiler.nqp and new versions of the Java methods AsyncProcessHandle and spawnprocasync -- all with the new calling convention

[15:49] <bartolin> 2.) make j-bootstrap-files

[15:50] <bartolin> 3.) change src/core/testing.nqp to use the new op spawnprocasync2 and run make akain

[15:51] <bartolin> 4.) change the definition of 'spawnprocasync' in src/vm/jvm/QAST/Compiler.nqp (no unused) to used the additional parameter and run make j-bootstrap-files again

[15:52] <bartolin> 5.) change src/core/testing.nqp back to use the updated version of spanprocasync and run make again

[15:52] <bartolin> 6.) cleanup (remove spawnprocasync2 and now unused versions of the Java methods) and run make j-bootstrap-files again

[15:53] <bartolin> 7.) commit new stage0 files

[15:53] <bartolin> 8.) commit remaining code

[15:54] <bartolin> No guarantee that this works. And maybe there is a much simpler way.

[15:54] <bartolin> Oops, step 2.) should be 'make && make j-bootstrap-files'

[15:56] <bartolin> (Not making commits for the intermediate steps would avoid the temporary versions of stage0 files to be committed. But it's not transparent how the change was done.)

[15:57] *** Altai-man joined
[16:00] *** sena_kun left
[16:58] <Altai-man> releasable6, status

[16:58] <releasable6> Altai-man, Next release in ≈20 days and ≈2 hours. 1 blocker. Changelog for this release was not started yet

[16:58] <releasable6> Altai-man, Details: https://gist.github.com/672b8ee6587b0309f0b612cb131c1af6

[17:02] <timotimo> i added a "if stage 0" (or something) thing to gen-cat so that you can have the same source code including "new" features

[17:21] *** JRaspass joined
[18:28] *** tobs left
[18:29] *** tobs joined
[18:32] *** tobs left
[18:35] *** tobs joined
[18:38] *** lucasb left
[19:11] *** [Coke]_ is now known as [Coke]

[19:30] *** Xliff joined
[20:55] *** ilogger2 joined
[21:06] *** b2gills joined
[22:02] *** vrurg joined
[22:32] *** Kaiepi joined
[22:35] <gfldex> m: say Routine.^methods(:local);

[22:35] <camelia> rakudo-moar 8150a2864: OUTPUT: «(The 'ForeignCode' class is a Rakudo-specific␤implementation detail and has no serviceable parts inside The 'ForeignCode' class is a Rakudo-specific␤implementation detail and has no serviceable parts inside The 'ForeignCode' class is a Rakudo-spec…»

[22:36] <MasterDuke> m: .name.say for Routine.^methods(:local);

[22:36] <camelia> rakudo-moar 8150a2864: OUTPUT: «<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤onlystar␤candidates␤cando␤multi␤soft␤wrap␤unwrap␤package…»

[22:38] <gfldex> m: say Routine.^methods(:local).grep(?*)».name;

[22:38] <camelia> rakudo-moar 8150a2864: OUTPUT: «(<anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> onlystar candidates cando multi soft wrap unwrap package leave gist raku BUILDALL)␤»

[22:41] <gfldex> m: say Routine^.can('dispatcher');

[22:41] <camelia> rakudo-moar 8150a2864: OUTPUT: «one((Routine), ())␤»

[22:41] <gfldex> Routine.dispatcher is quite stealthy.

