[00:03] *** reportable6 left
[00:05] *** reportable6 joined
[00:08] *** Kaiepi joined
[00:10] *** Kaiepi left
[00:10] *** Kaiepi joined
[00:17] *** Kaiepi left
[00:17] *** Kaiepi joined
[00:26] *** Kaiepi left
[00:26] *** Kaiepi joined
[00:44] *** Kaiepi left
[00:44] *** Kaipi joined
[00:47] *** Kaipi left
[00:48] *** Kaipi joined
[00:51] *** frost joined
[01:01] *** Kaipi left
[01:01] *** Merfont joined
[01:08] *** Merfont left
[01:08] *** Merfont joined
[01:42] *** Merfont left
[01:43] *** Kaiepi joined
[01:59] *** Kaiepi left
[01:59] *** Kaiepi joined
[02:20] *** evalable6 joined
[02:33] *** Kaiepi left
[02:33] *** Kaipi joined
[02:36] *** Kaipi left
[02:37] *** Kaiepi joined
[03:09] *** Kaipi joined
[03:09] *** Kaiepi left
[03:16] *** Kaipi left
[04:30] *** gfldex left
[04:30] *** Voldenet left
[04:30] *** JRaspass left
[04:30] *** gfldex joined
[04:30] *** JRaspass joined
[04:31] *** Voldenet joined
[05:27] *** Kaiepi joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[07:07] *** Kaiepi left
[07:07] *** Kaiepi joined
[08:02] *** cognominal_ joined
[08:03] *** cognominal_ joined
[08:05] *** cog__ left
[09:05] *** linkable6 left
[09:05] *** evalable6 left
[09:05] *** linkable6 joined
[09:07] *** evalable6 joined
[09:09] *** |Tux| joined
[09:12] *** RakuIRCLogger left
[09:12] *** RakuIRCLogger joined
[09:44] *** sena_kun left
[09:48] <Geth> ¦ rakudo: dab7404c93 | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6
[09:48] <Geth> ¦ rakudo: Add Cool.Version coercer
[09:48] <Geth> ¦ rakudo: 
[09:48] <Geth> ¦ rakudo: There is already a Str.Coercer.  It struck me that coercing a number
[09:48] <Geth> ¦ rakudo: or a list of numbers to a Version object, would first need coercing
[09:48] <Geth> ¦ rakudo: to Str.  Whereas we already do other Cool coercers.  Hence this.
[09:48] <Geth> ¦ rakudo: 
[09:48] <Geth> ¦ rakudo:    say 42.Version;                 # v42
[09:48] <Geth> ¦ rakudo:    say (1,2,3).Version;            # v1.2.3
[09:48] <Geth> ¦ rakudo:    say "42".match(/\d+/).Version;  # v42
[09:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dab7404c93
[09:48] <Geth> ¦ rakudo: 1d8bf66a5e | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Cool.pm6
[09:48] <Geth> ¦ rakudo: Merge pull request #4551 from rakudo/Cool.Version
[09:48] <Geth> ¦ rakudo: 
[09:48] <Geth> ¦ rakudo: Add Cool.Version coercer
[09:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1d8bf66a5e
[09:53] *** Kaipi joined
[09:53] *** Kaiepi left
[10:04] *** Kaipi left
[10:08] *** Kaiepi joined
[10:38] *** sena_kun joined
[10:43] <sena_kun> releasable6, status
[10:43] <releasable6> sena_kun, Next release in ≈4 days and ≈8 hours. 1 blocker. Changelog for this release was not started yet
[10:43] <releasable6> sena_kun, Details: https://gist.github.com/faeb26e30c1d64ac0a384fe467299c36
[11:05] *** camelia left
[11:20] <lizmat> m: say True.new  
[11:20] <evalable6> lizmat, rakudo-moar 1d8bf66a5: OUTPUT: «False␤»
[11:20] <lizmat> I understand why that returns False on a programmatical level, but on a philosophical level that feels it should either be True (as in identity) or an error
[11:31] <sena_kun> feels like notabug to me.
[11:34] *** camelia joined
[11:35] *** squashable6 left
[12:02] *** reportable6 left
[12:04] *** linkable6 left
[12:37] *** squashable6 joined
[12:49] *** linkable6 joined
[13:02] <timo> .o( fizzbunacci )
[13:03] <timo> should Int.new also give 1 rather than 0? :P
[13:03] <timo> wait i misread lol
[13:03] <timo> m: say 1.new; say 2.new
[13:03] <camelia> rakudo-moar 1d8bf66a5: OUTPUT: «0␤0␤»
[13:15] <sena_kun> changing this makes `new` behave like `clone`, which is a bad idea. and if we change it only for `Bool`, that's just introducing new inconsistency exception instead of having a generic rule.
[13:23] *** frost left
[13:24] <lizmat> yeah, I was not going for special casing of Bool: I was more thinking that .new on an Enum should be an error
[13:31] <sena_kun> m: enum Foo <A B>; say A.new; say Foo::A.new; say Foo.new;
[13:31] <camelia> rakudo-moar 1d8bf66a5: OUTPUT: «Cannot unbox a type object (Any) to a str.␤  in block <unit> at <tmp> line 1␤␤»
[13:32] <sena_kun> if we should make a better error, I'd bet on this one maybe?
[13:53] <vrurg> Adding a throwing new to Enumeration role fixes it, except for Bool which is a special case and does do the role.
[13:53] <lizmat> couldn't we fix the special case as well ?
[13:57] <vrurg> I have $job to do right now, can't do much testing. But have an idea how to get Bool consume Enumeration.
[13:58] <vrurg> Perhaps this would make it less of a special case.
[14:05] *** reportable6 joined
[14:09] *** otokan joined
[14:17] <vrurg> lizmat: After all, I can only confirm that Bool is special. :) It would need the same `new` method, as for Enumeration, to be added explicitly. That would also need a new exception. I could do it all tomorrow.
[14:17] *** otokan left
[14:18] <vrurg> Just wonder if it makes sense to spec the new behavior.
[14:20] <lizmat> I think a PR would be wise, so we can discuss  :-)
[14:25] <vrurg> As usual, I almost never commit directly. :)
[14:25] <vrurg> Maybe will do today, depends on how long a vet appointment+driving would take.
[14:32] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/10/18/2021-42-learning-with/
[14:33] <lizmat> notable6: weekly
[14:33] <notable6> lizmat, No notes for “weekly”
[14:35] <sena_kun> lizmat++
[14:59] <|Tux|> Rakudo v2021.09-279-g1d8bf66a5 (v6.d) on MoarVM 2021.09-657-gb80ad65ed
[14:59] <|Tux|> csv-test-xs-20      0.374 -  0.379
[14:59] <|Tux|> test-t --race       0.986 -  1.066
[14:59] <|Tux|> csv-ip5xs           1.372 -  1.382
[14:59] <|Tux|> test-t              1.632 -  1.664
[14:59] <|Tux|> csv-parser          4.432 -  4.447
[14:59] <|Tux|> test                7.264 -  7.361
[14:59] <|Tux|> test-t-20 --race    7.653 -  7.854
[14:59] <|Tux|> csv-ip5xs-20       15.142 - 15.305
[14:59] <|Tux|> test-t-20          24.315 - 24.883
[14:59] <|Tux|> Rank  7 2021-10-18 16:45:22 test-t 1.632
[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft
[15:14] <Geth> ¦ nqp/new-disp-nativecall: a89b0d4a27 | (Stefan Seifert)++ | 4 files
[15:14] <Geth> ¦ nqp/new-disp-nativecall: API for asking whether the compiler supports a certain nqp op
[15:14] <Geth> ¦ nqp/new-disp-nativecall: 
[15:14] <Geth> ¦ nqp/new-disp-nativecall: This can be used to conditionally compile backend specific code in
[15:14] <Geth> ¦ nqp/new-disp-nativecall: modules like NativeCall
[15:14] <Geth> ¦ nqp/new-disp-nativecall: review: https://github.com/Raku/nqp/commit/a89b0d4a27
[15:15] <Geth> ¦ nqp: niner++ created pull request #742: API for asking whether the compiler supports a certain nqp op
[15:15] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/742
[15:25] *** Xliff left
[15:43] <[Coke]> ^^ I assume the desire then would be to change code from a compiler time static backend check to a (quick) runtime check?
[15:43] <[Coke]> s/desire/followup/
[16:00] <nine> [Coke]: the method this commit introduces can be used in a BEGIN block as well as at runtime
[16:00] <nine> Currently the only way to conditionally use nqp ops (based on compiler support) is via EVAL anyway
[16:21] <Geth> ¦ rakudo/megamorphic-handlers: 6 commits pushed by (Jonathan Worthington)++
[16:21] <Geth> ¦ rakudo/megamorphic-handlers: e39ad3f9d2 | Prevent auto-viv of Scalar in multi-related attrs
[16:21] <Geth> ¦ rakudo/megamorphic-handlers: fa88a993e9 | Prepare ClassHOW for megamorphic dispatches
[16:21] <Geth> ¦ rakudo/megamorphic-handlers: cbd248db89 | Add megamorphic handler for raku-meth-call
[16:21] <Geth> ¦ rakudo/megamorphic-handlers: 08169ace74 | Megamorphic fallback for raku-rv-decont dispatcher
[16:21] <Geth> ¦ rakudo/megamorphic-handlers: 7321078c27 | Megamorphic handler for raku-find-meth
[16:21] <Geth> ¦ rakudo/megamorphic-handlers: 07a5aca4f0 | Switch to tryfindmethod for performance
[16:21] <Geth> ¦ rakudo/megamorphic-handlers: review: https://github.com/rakudo/rakudo/compare/e39ad3f9d25f^...07a5aca4f054
[16:22] <Geth> ¦ nqp: 85e25925fb | (Jonathan Worthington)++ | src/core/dispatchers.nqp
[16:22] <Geth> ¦ nqp: Tweak megamorphic fallback thresholds
[16:22] <Geth> ¦ nqp: 
[16:22] <Geth> ¦ nqp: It turns out that we can get rather a lot of entries at the callsite
[16:22] <Geth> ¦ nqp: cache before the O(1) of the hash starts to come out cheaper.
[16:22] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/85e25925fb
[16:24] *** |Tux| left
[17:14] *** otokan joined
[17:18] *** sena_kun left
[18:02] *** melezhik joined
[18:03] *** reportable6 left
[19:46] *** sena_kun joined
[19:51] *** melezhik left
[20:03] *** reportable6 joined
[21:03] *** linkable6 left
[21:03] *** evalable6 left
[21:17] *** sena_kun left
[21:22] *** sena_kun joined
[21:37] *** squashable6 left
[21:40] *** squashable6 joined
[22:06] *** sena_kun left
[22:16] *** otokan left
[22:18] *** sena_kun joined
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: 1d29da3b74 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: Don't guard Mu-typed params in multi-dispatch
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: 
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: When all candidates encountered have a parameter typed as Mu, then we
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: do not need to put guards on the argument type. This helps avoid caches
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: blowing up in size in cases like STORE_AT_KEY, which has a number of
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: candidates with Mu-typed value parameters that will encounter many
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: types.
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: review: https://github.com/rakudo/rakudo/commit/1d29da3b74
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: f343b58345 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: Remove leftover commented code
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: 
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: From when the multi-dispatch algorithm was being ported to new-disp.
[22:59] <Geth> ¦ rakudo/megamorphic-handlers: review: https://github.com/rakudo/rakudo/commit/f343b58345
[23:05] *** evalable6 joined
[23:06] *** linkable6 joined
[23:42] <Geth> ¦ rakudo: vrurg++ created pull request #4579: Add is_wrapped method to Routine
[23:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4579
