[00:01] *** kjp joined
[00:01] <timo> m: sub circumfix:<{ }.is>(&b) { return %( value => &b() ) }; { 5 + 9 }.is<value>.say

[00:01] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Type check failed in binding to parameter '&b'; expected Callable but got Int (14)‚ê§  in sub circumfix:<{ }.is> at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[00:01] <timo> ah, it won't parse that as a block, obviously

[00:02] *** reportable6 left
[00:29] <gfldex> m: use Test; is (TR/\#/a/ with '#'), 'a', 'transliteration of # works';

[00:29] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´not ok 1 - transliteration of  \# works‚ê§# Failed test 'transliteration of  \# works'‚ê§# at <tmp> line 1‚ê§# expected: 'a'‚ê§#      got: '#'‚ê§¬ª

[00:30] <gfldex> Should we be able to transliterate "#" with tr/// and TR/// ?

[00:32] <gfldex> RT#2118 may be related

[01:05] *** reportable6 joined
[03:33] *** unicodable6 left
[03:33] *** greppable6 left
[03:33] *** sourceable6 left
[03:33] *** squashable6 left
[03:33] *** coverable6 left
[03:33] *** quotable6 left
[03:33] *** nativecallable6 left
[03:33] *** benchable6 left
[03:33] *** committable6 left
[03:33] *** notable6 left
[03:33] *** reportable6 left
[03:33] *** bisectable6 left
[03:33] *** shareable6 left
[03:33] *** linkable6 left
[03:33] *** statisfiable6 left
[03:33] *** releasable6 left
[03:33] *** bloatable6 left
[03:33] *** tellable6 left
[03:33] *** evalable6 left
[03:33] *** unicodable6 joined
[03:33] *** releasable6 joined
[03:33] *** greppable6 joined
[03:34] *** notable6 joined
[03:35] *** bloatable6 joined
[03:35] *** committable6 joined
[03:36] *** quotable6 joined
[03:36] *** coverable6 joined
[03:36] *** benchable6 joined
[04:35] *** squashable6 joined
[04:35] *** statisfiable6 joined
[04:35] *** linkable6 joined
[04:36] *** evalable6 joined
[04:48] *** frost joined
[05:33] *** bisectable6 joined
[05:34] *** tellable6 joined
[06:28] *** Colt left
[06:34] *** shareable6 joined
[06:36] *** sourceable6 joined
[07:00] <releasable6> Next release in ‚âà2 days and ‚âà11 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:03] *** reportable6 joined
[07:29] <Geth> ¬¶ rakudo: 1ef7019bea | (Christian Bartolom√§us)++ | src/core.c/REPL.pm6

[07:29] <Geth> ¬¶ rakudo: [JVM] Don't let signal(SIGINT) break the REPL

[07:29] <Geth> ¬¶ rakudo: 

[07:29] <Geth> ¬¶ rakudo: The support for signals on the JVM backend is only rudimentary. The

[07:29] <Geth> ¬¶ rakudo: recently introduced (cf7b4f18da) call to signal(SIGINT).tap doesn't

[07:29] <Geth> ¬¶ rakudo: work on the JVM backend:

[07:29] <Geth> ¬¶ rakudo: 

[07:29] <Geth> ¬¶ rakudo:   $ ./rakudo -e 'signal(SIGINT).tap'

[07:29] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 5 more lines‚Ä¶>

[07:29] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/1ef7019bea

[07:34] *** nativecallable6 joined
[08:08] <Geth> ¬¶ rakudo: 7772b737b0 | (Daniel Green)++ | src/Perl6/Actions.nqp

[08:08] <Geth> ¬¶ rakudo: Restore larger limit for using string_to_int on 64bit systems

[08:08] <Geth> ¬¶ rakudo: 

[08:08] <Geth> ¬¶ rakudo: The limit was reduced because NQP used to use doubles to represent ints

[08:08] <Geth> ¬¶ rakudo: and only numbers up to 2**52 can be exactly represented by doubles. As

[08:08] <Geth> ¬¶ rakudo: of https://github.com/Raku/nqp/pull/518, NQP uses integers for ints and

[08:08] <Geth> ¬¶ rakudo: these limits can be increased again.

[08:08] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/7772b737b0

[08:08] <Geth> ¬¶ rakudo: 0851a253ad | MasterDuke17++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[08:08] <Geth> ¬¶ rakudo: Merge pull request #4670 from MasterDuke17/restore_larger_limit_for_using_string_to_int_on_64bit_systems

[08:08] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/0851a253ad

[08:09] *** Geth left
[08:09] *** Geth joined
[10:00] <timo> who wants to have fun with this idea: some terminal emulators (probably most of them?) can tell you when the user has pasted a whole block of text. the REPL could react in a special way to that, for example by offering to put the stuff in as a properly escaped string literal or immediately paste it into a variable even

[10:01] *** squashable6 left
[10:01] *** squashable6 joined
[11:01] *** benchable6 left
[11:01] *** evalable6 left
[11:01] *** nativecallable6 left
[11:01] *** reportable6 left
[11:01] *** releasable6 left
[11:01] *** notable6 left
[11:01] *** coverable6 left
[11:01] *** bloatable6 left
[11:01] *** tellable6 left
[11:01] *** squashable6 left
[11:01] *** linkable6 left
[11:01] *** statisfiable6 left
[11:01] *** unicodable6 left
[11:01] *** committable6 left
[11:01] *** bisectable6 left
[11:01] *** sourceable6 left
[11:01] *** greppable6 left
[11:01] *** quotable6 left
[11:01] *** shareable6 left
[11:02] *** benchable6 joined
[11:02] *** nativecallable6 joined
[11:03] *** committable6 joined
[11:03] *** releasable6 joined
[11:03] *** shareable6 joined
[11:03] *** squashable6 joined
[11:03] *** greppable6 joined
[11:04] *** bloatable6 joined
[11:04] *** coverable6 joined
[11:30] *** TempIRCLogger left
[11:31] *** TempIRCLogger joined
[11:35] *** dogbert11 left
[11:38] *** TempIRCLogger left
[11:38] *** TempIRCLogger joined
[11:41] *** Altai-man joined
[11:44] *** TempIRCLogger left
[11:44] *** TempIRCLogger joined
[11:44] *** TempIRCLogger left
[11:44] *** TempIRCLogger joined
[11:44] *** TempIRCLogger left
[11:44] *** TempIRCLogger joined
[11:45] *** TempIRCLogger left
[11:45] *** TempIRCLogger joined
[11:45] *** TempIRCLogger left
[11:45] *** TempIRCLogger joined
[11:45] *** TempIRCLogger left
[11:45] *** TempIRCLogger joined
[11:45] *** TempIRCLogger left
[11:45] *** TempIRCLogger joined
[11:45] *** TempIRCLogger left
[11:46] *** dogbert17 joined
[11:54] <lizmat> interesting: https://twitter.com/lestrrat/status/1470535419985297410

[12:02] *** reportable6 joined
[12:02] *** notable6 joined
[12:02] *** evalable6 joined
[12:03] *** linkable6 joined
[12:03] *** sourceable6 joined
[12:03] *** tellable6 joined
[12:04] *** statisfiable6 joined
[12:04] *** quotable6 joined
[12:04] *** bisectable6 joined
[12:07] *** TempIRCLogger joined
[12:12] *** TempIRCLogger left
[12:12] *** TempIRCLogger joined
[12:16] *** TempIRCLogger left
[12:16] *** TempIRCLogger joined
[12:22] *** TempIRCLogger left
[12:22] *** TempIRCLogger joined
[12:54] *** squashable6 left
[12:54] *** squashable6 joined
[13:00] *** TempIRCLogger left
[13:00] *** TempIRCLogger joined
[13:00] *** TempIRCLogger left
[13:00] *** TempIRCLogger joined
[13:04] <gfldex> lizmat: That is a lenghty version of: Be polite or be blocked. :)

[13:06] <lizmat> yeah, indeed.  But I really like point 4  :-)

[13:07] <lizmat> an open source version of no brown M&M's clause  :-)

[13:25] *** TempIRCLogger left
[13:25] *** TempIRCLogger joined
[13:25] *** TempIRCLogger left
[13:26] *** TempIRCLogger joined
[13:27] *** TempIRCLogger left
[13:27] *** TempIRCLogger joined
[13:27] *** TempIRCLogger left
[13:28] *** TempIRCLogger joined
[13:37] *** TempIRCLogger left
[13:37] *** TempIRCLogger joined
[13:44] *** TempIRCLogger left
[13:45] *** TempIRCLogger joined
[13:52] *** TempIRCLogger left
[13:52] *** TempIRCLogger joined
[13:58] *** TempIRCLogger left
[13:58] *** TempIRCLogger joined
[14:02] *** unicodable6 joined
[14:11] *** TempIRCLogger left
[14:11] *** TempIRCLogger joined
[14:12] *** TempIRCLogger left
[14:12] *** TempIRCLogger joined
[14:14] *** frost left
[14:26] *** Geth left
[14:26] *** Geth joined
[14:41] <Geth> ¬¶ problem-solving: Xliff assigned to codesections Issue A Mechanism for Adding Hooks into CURI for Custom Installation Output https://github.com/Raku/problem-solving/issues/309

[15:36] <japhb> lizmat: Oh yeah, I've used point 4 at @day-jobs before.  It's fairly effective (not perfect though, people who are following a complex template often leave it there while filling in the requested info, and then forget to remove the template header at the very end).

[15:37] <lizmat> japhb: well, very simple solution: close the issue and tell them why (not having removed point 4 :-)

[15:37] <lizmat> if it's important, they'll re-do the issue and have learned something

[15:38] <lizmat> fwiw, I'll probably also fall into that "trap"  :-)

[15:38] <lizmat> hopefully only once :-)

[15:40] <japhb> Yeah, the problem is when you have a LOT of customers, each of which contacts you usually only once.  You can train individual customers for the general benefit of all the surrounding teams, but not as much for your own benefit.

[15:42] <lizmat> well, if they're paying customers, it could be different of course

[15:42] <lizmat> paying customers either would have a different template (lacking #4), or would be exempt from having to remove it

[15:42] <japhb> timo: Terminal::LineEditor has the raw info to detect a paste event (https://github.com/japhb/Terminal-LineEditor/blob/main/lib/Terminal/LineEditor/RawTerminalInput.rakumod#L131-L135), but I'm not making use of that information since Rakudo doesn't know what to do with it.  But I'm happy to support it if someone figures out exactly what UX they want.

[15:43] <japhb> Yeah, auto-closing paid customer tickets is a fast way to lose said customer.

[15:44] <japhb> I'd only consider deploying #4 for internal teams -- where my experience is that basically everyone is just trying to get things done, and thus constantly trying to shuffle effort around.

[15:46] *** tonyo left
[15:49] *** tonyo joined
[16:22] *** squashable6 left
[16:25] *** squashable6 joined
[16:29] *** squashable6 left
[16:30] *** squashable6 joined
[16:39] *** linkable6 left
[17:07] <Geth> ¬¶ rakudo/Pair.ACCEPTS: 711f378af6 | (Elizabeth Mattijsen)++ | src/core.c/Pair.pm6

[17:07] <Geth> ¬¶ rakudo/Pair.ACCEPTS: Fix the behaviour of Pair ~~ Pair

[17:07] <Geth> ¬¶ rakudo/Pair.ACCEPTS: 

[17:07] <Geth> ¬¶ rakudo/Pair.ACCEPTS: Apparently, this was borked since d8f7e8b8d6ea25b about 6 years ago.

[17:07] <Geth> ¬¶ rakudo/Pair.ACCEPTS: 

[17:07] <Geth> ¬¶ rakudo/Pair.ACCEPTS: See discussion at https://logs.liz.nl/moarvm/2021-12-15.html#16:32-0003

[17:07] <Geth> ¬¶ rakudo/Pair.ACCEPTS: 

[17:07] <Geth> ¬¶ rakudo/Pair.ACCEPTS: This breaks test #177 of t/spec/S02-types/pair.t

[17:07] <Geth> ¬¶ rakudo/Pair.ACCEPTS: review: https://github.com/rakudo/rakudo/commit/711f378af6

[17:07] <Geth> ¬¶ rakudo: lizmat++ created pull request #4671: Fix the behaviour of Pair ~~ Pair

[17:07] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/4671

[17:33] <[Tux]> Rakudo v2021.10-149-g0851a253a (v6.d) on MoarVM 2021.10-126-g83c53580a

[17:33] <[Tux]> csv-test-xs-20      0.406 -  0.408

[17:33] <[Tux]> csv-ip5xs           0.846 -  0.959

[17:33] <[Tux]> test-t --race       0.954 -  1.007

[17:33] <[Tux]> test-t              1.636 -  1.708

[17:33] <[Tux]> csv-parser          4.128 -  4.143

[17:33] <[Tux]> csv-ip5xs-20        5.243 -  5.516

[17:33] <[Tux]> test                7.051 -  7.084

[17:33] <[Tux]> test-t-20 --race    7.345 -  7.398

[17:33] <[Tux]> test-t-20          23.885 - 24.050

[17:58] *** Colt joined
[18:02] *** reportable6 left
[18:30] *** Altai-man left
[19:08] <Geth> ¬¶ DBIish: 885b9267cc | (Rod Taylor)++ | 2 files

[19:08] <Geth> ¬¶ DBIish: Change README filename references

[19:08] <Geth> ¬¶ DBIish: 

[19:08] <Geth> ¬¶ DBIish: The file was converted to Markdown in 3c5e7ec.

[19:08] <Geth> ¬¶ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/885b9267cc

[19:49] *** TempIRCLogger left
[19:50] *** TempIRCLogger joined
[21:03] *** reportable6 joined
[21:05] *** sena_kun left
[21:06] *** sena_kun joined
[22:40] *** linkable6 joined
