[00:03] *** reportable6 left
[00:03] *** reportable6 joined
[00:11] *** frost joined
[02:15] *** frost left
[02:16] *** MasterDuke left
[03:10] *** AlexDaniel left
[03:12] *** AlexDaniel joined
[03:35] *** AlexDaniel left
[05:22] *** coverable6 left
[05:22] *** greppable6 left
[05:22] *** notable6 left
[05:22] *** statisfiable6 left
[05:22] *** benchable6 left
[05:22] *** shareable6 left
[05:22] *** bisectable6 left
[05:22] *** unicodable6 left
[05:22] *** quotable6 left
[05:22] *** committable6 left
[05:22] *** bloatable6 left
[05:22] *** linkable6 left
[05:22] *** releasable6 left
[05:22] *** reportable6 left
[05:22] *** evalable6 left
[05:22] *** nativecallable6 left
[05:22] *** sourceable6 left
[05:22] *** tellable6 left
[05:22] *** squashable6 left
[05:22] *** sourceable6 joined
[05:22] *** releasable6 joined
[05:22] *** notable6 joined
[05:22] *** benchable6 joined
[05:22] *** quotable6 joined
[05:22] *** squashable6 joined
[05:22] *** linkable6 joined
[05:22] *** committable6 joined
[05:23] *** unicodable6 joined
[05:23] *** reportable6 joined
[05:23] *** coverable6 joined
[05:24] *** tellable6 joined
[05:24] *** statisfiable6 joined
[05:24] *** bloatable6 joined
[05:24] *** nativecallable6 joined
[05:25] *** evalable6 joined
[05:25] *** shareable6 joined
[05:25] *** greppable6 joined
[05:25] *** bisectable6 joined
[05:26] *** squashable6 left
[05:28] *** squashable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:18] *** notna joined
[07:05] *** patrickb joined
[07:25] *** AlexDaniel joined
[07:49] *** AlexDaniel left
[08:00] *** AlexDaniel joined
[08:23] *** AlexDaniel left
[08:33] *** AlexDaniel joined
[08:40] *** AlexDaniel left
[09:00] *** frost joined
[09:06] *** AlexDaniel joined
[10:09] *** linkable6 left
[10:09] *** evalable6 left
[10:11] *** evalable6 joined
[10:11] *** linkable6 joined
[10:22] *** Kaiepi left
[10:23] *** Kaiepi joined
[10:42] *** discord-raku-bot left
[10:50] <Geth> ¦ rakudo: 917d674bc3 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6
[10:50] <Geth> ¦ rakudo: R:I:UnendingValue no longer a PredictiveIterator
[10:50] <Geth> ¦ rakudo: 
[10:50] <Geth> ¦ rakudo: Yes, the number of elements it will generate is known (Inf), but
[10:50] <Geth> ¦ rakudo: that is really a technicality and inhibiting making it harder to
[10:50] <Geth> ¦ rakudo: make PredictiveIterators more optimizable (if they cannot be lazy).
[10:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/917d674bc3
[10:56] *** discord-raku-bot joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:36] <Geth> ¦ rakudo: 03aef65c59 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6
[12:36] <Geth> ¦ rakudo: Separate R:I:IntRange into two classes
[12:36] <Geth> ¦ rakudo: 
[12:36] <Geth> ¦ rakudo: One for the non-lazy case, and one for the lazy case with Inf as
[12:36] <Geth> ¦ rakudo: end-point.  The lazy case is no longer a PredictiveIterator.  This
[12:36] <Geth> ¦ rakudo: causes a minor performance improvement for both the 1..N as well as
[12:36] <Geth> ¦ rakudo: the 1..Inf case.
[12:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/03aef65c59
[12:52] <Geth> ¦ rakudo: 7cf3927d39 | (Elizabeth Mattijsen)++ | src/core.c/Iterator.pm6
[12:52] <Geth> ¦ rakudo: PredictiveIterator provides own push-until-lazy
[12:52] <Geth> ¦ rakudo: 
[12:52] <Geth> ¦ rakudo: Since PredictiveIterators are no longer expected to be lazy, we can
[12:52] <Geth> ¦ rakudo: shortcut .push-until-lazy to call .push-all without laziness check.
[12:52] <Geth> ¦ rakudo: 
[12:52] <Geth> ¦ rakudo: This makes test-t about 1% faster.
[12:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7cf3927d39
[13:03] *** linkable6 left
[13:03] *** evalable6 left
[13:06] *** linkable6 joined
[13:06] *** evalable6 joined
[13:19] *** frost left
[14:24] *** melezhik joined
[14:25] <melezhik> .
[15:18] *** notna left
[16:18] *** linkable6 left
[16:18] *** evalable6 joined
[16:18] *** evalable6 left
[16:19] *** evalable6 joined
[16:19] *** linkable6 joined
[18:02] *** reportable6 left
[18:04] *** melezhik left
[18:05] *** reportable6 joined
[18:59] <Geth> ¦ rakudo: 2542a0ac44 | (Elizabeth Mattijsen)++ | 3 files
[18:59] <Geth> ¦ rakudo: Implement "next foo"
[18:59] <Geth> ¦ rakudo: 
[18:59] <Geth> ¦ rakudo: Allow a value to be specified with "next".  In a .map like context,
[18:59] <Geth> ¦ rakudo: it specifies the value of the current iteration, while skipping the
[18:59] <Geth> ¦ rakudo: rest of the iteration (as you would expect "next" to do).  In a .grep
[18:59] <Geth> ¦ rakudo: like context, the value specified is inspected on truthiness: when
[18:59] <Geth> ¦ rakudo: true, then the element will be included (while skipping the rest of
[18:59] <Geth> ¦ rakudo: the iteration).  In any other case, the element will *not* be included.
[18:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2542a0ac44
[19:00] <lizmat> figured nobody disliked "last foo", it would be ok to directly push to master
[20:24] *** [Coke] left
[20:24] *** [Coke] joined
[21:39] *** patrickb left
[21:41] *** zostay left
[21:42] *** kawaii_ left
[21:52] *** kawaii_ joined
[21:53] *** zostay joined
[21:56] <Geth> ¦ problem-solving/clarify-readme: e43a7a59a4 | (Daniel Sockwell)++ (committed using GitHub Web editor) | README.md
[21:56] <Geth> ¦ problem-solving/clarify-readme: clarify PS process in README 
[21:56] <Geth> ¦ problem-solving/clarify-readme: 
[21:56] <Geth> ¦ problem-solving/clarify-readme: This is an attempted solution to #272 as described in that issue.  In particular, it is intended to clarify the existing process without adding any substantive changes.
[21:56] <Geth> ¦ problem-solving/clarify-readme: review: https://github.com/Raku/problem-solving/commit/e43a7a59a4
[21:57] <Geth> ¦ problem-solving: codesections++ created pull request #289: Clarify Problem Solving process description in README
[21:57] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/289
[22:17] <tbrowder> vrurg: got a sec to talk about modf?
[22:18] <vrurg> tbrowder: Not much.
[22:18] <vrurg> But let's try. :)
[22:19] <tbrowder> what do you think about having modf be a method only like base? i think one advantage is it will make it easier to implement
[22:20] <tbrowder> and more robust, too
[22:22] <tbrowder> maybe more robust
[22:25] <tbrowder> i've been approaching from the routine side first, but as you've seen, getting mired down in the subtle differences of number attributes
[22:26] <tbrowder> just a thought...
[22:26] <vrurg> Not sure. I don't think I'm the right person to ask. I'll try too look into the PR, maybe something would ignite the light within...
[22:28] <tbrowder> i think it is probaly best to have both to match other languages as well as fit the raku numerical library model better
[22:29] <vrurg> I'd rather be worried about the latter – the established model dictates the rules.
[22:31] <tbrowder> yes, you're right, and your comments on the roast tests help working in that direction.
[22:31] <vrurg> Aside of this, I an implementation for native num. It also pushes towards a standalone sub.
[22:31] <vrurg> * I see an implementation
[22:34] <tbrowder> don't waste any time on the modf PR for now. but i will keep pushing my changes and, if/when all looks satisfactory, i can redo a new and clean PR.
[22:34] <gfldex> tbrowder: having it method-only means you don't have to stick it into v6.e. Or you have the method in v6.d and put the sub in v6.e.
[22:36] <vrurg> gfldex: I think it will fit nicely into 6.c too.
[22:36] <tbrowder> hm, i didn't think of that. my previous changes to core were in 6.c i believe evan after 6.d
[22:37] <tbrowder> yes, there should be no conflicts, nothing being used of new 6.d features akaik
[22:37] <tbrowder> afaik
[22:38] <gfldex> ppl already use Rakudo in production. If you stick the sub into anything but 6.e, you might screw somebody. We have the language version to avoid conflicts with existing code.
[22:38] <tbrowder> its a new feature and shouldn't conflict
[22:40] <tbrowder> that's what roast checks, too
[22:40] <gfldex> If you can come up with a `sub modf` somebody else can too. If that is defined already in CORE the compiler will not run the script or compile the module.
[22:40] <vrurg> gfldex: How can a new math sub break anything? If there is a custom one with the same it'd just override the core version.
[22:42] <vrurg> A case possible that where it was breaking before the code would be passing without an error and this could pose some risk.
[22:42] <tbrowder> it's not in CORE unless there's another rakudo ripoff around
[22:42] <gfldex> If it is defined in the script, then yes. If it is imported from a customm module it wont load that module.
[22:43] <tbrowder> hm, is that true? i hadn't considered that
[22:45] <tbrowder> even if the external module is called with an :auth adverb?
[22:45] <gfldex> It wont import a symbol that is already imported from elsewhere. That includes CORE.
[22:47] <tbrowder> so i've just been lucky we don't have many users, huh?
[22:47] <tbrowder> ok, so should new features only be in the next version?
[22:47] <vrurg> gfldex: You're mistaken. Try 'unit module foo; sub log(Str:D $msg) is export { say $msg };`
[22:55] <gfldex> https://gist.github.com/74601dd9b68a27dc27248e767dc099a3
[22:55] <gfldex> results in
[22:55] <gfldex> Cannot import symbol '&ord' from 'TestModule', because it already
[22:55] <gfldex> exists in this lexical scope.
[22:55] <gfldex> at /home/dex/projects/raku/tmp/import-fail/test.raku:3
[22:55] <gfldex> ------> use TestModule⏏;
[22:56] <tbrowder> why would a user use the EXPORT which not needed?
[22:57] <tbrowder> *is not
[22:58] <gfldex> That is a simple example, there can be good reason to use sub EXPORT. And even if this is considered a mistake, we still have to take our userbase into account when we add new subs into the global namespace.
[23:00] <tbrowder> i disagree. raku can be abused just like nqp, and that is accepted to be on the user's own risk
[23:01] <tbrowder> *at
[23:02] <gfldex> I disagree the even compare the use of nqp in Raku code to using plain Raku code on the side of the user.
[23:05] <tbrowder> i've always thought using EXPORT in raku was a holdover from perl. raku makes it so much easier without it.
[23:06] <tbrowder> i'm talking about the user side.
[23:06] <gfldex> In some cases it's the only way out. see: https://gfldex.wordpress.com/2020/10/26/planned-obsolescence/
[23:14] <vrurg> gfldex: Dunno what happens in your test, but `sub EXPORT { Map.new: '&log' => &log } ` added to my test broke nothing. Same with 'ord'
[23:15] <gfldex> did you put sub EXPORT into a separate file?
[23:31] <vrurg> gfldex: sure.
[23:35] <vrurg> BTW, use of a hash in EXPORT is incorrect. Because, as a matter of fact, you export a Scalar containing &ord, not the sub symbol itself.
[23:35] <vrurg> it has to be sub EXPORT { Map.new: '&ord' => &ord }
[23:35] <gfldex> https://docs.raku.org/language/modules#index-entry-sub_EXPORT
[23:37] <vrurg> Documentation lags behind. Yes, for years it was a de-facto standard until I hit a serious bug related to this. 
[23:39] <gfldex> Changing it to Map.new does indeed fix it. However, my argument still stands because of "for years it was a de-facto standard".
[23:41] <gfldex> When returning anything but a Map or Hash Rakudo does complain with '&EXPORT sub did not return a Map'. A deprication warning (or at least some warning) on Hash seams reasonable.
[23:43] *** cognominal left
[23:44] <vrurg> Actually, I tried that EXPORT with hash and it work for me too. Rakudo v2021.06-27-geab780f38.
[23:45] <vrurg> With regard to the warning, there was a discussion about it. Don't remember why, but it was decided not to warn.
[23:46] <vrurg> I have filed an issue for docs: https://github.com/Raku/doc/issues/3910
[23:53] <gfldex> I'm on HEAD now to, still got the error on %(). But it's to late in the day to worry about it.
