[02:15] *** MasterDuke left
[02:47] *** kvw_5_ joined
[02:50] *** kvw_5 left
[03:20] *** leont left
[04:20] *** linkable6 left
[04:20] *** evalable6 left
[04:21] *** evalable6 joined
[04:22] *** linkable6 joined
[04:28] *** sortiz joined
[04:46] <sortiz> lizmat: Now that Map.iterator is multi, wouldn't it be a good idea to short-circuit Map.pairs? 

[05:37] *** japhb joined
[06:05] *** djinni` left
[06:10] *** djinni` joined
[07:15] *** sortiz left
[07:35] *** epony left
[07:46] *** MasterDuke joined
[07:55] *** domidumont joined
[08:31] *** epony joined
[08:53] *** leont joined
[09:07] <nine> lizmat: apparently those inlining tests also fail in my development environment, which is good, as I can have a closer look. And indeed, I get # Failed test 'Was AT-KEY inlined?' at t/09-moar/11-inline-hash-key.t line 15 when the inline report lists "2x unspecialized AT-KEY BB(7867, 270 bytes) -> postcircumfix:<{ }> BB(2490)" in the successful inlines

[09:07] <tellable6> 2021-02-21T23:08:37Z #raku <raiph> nine MasterDuke suggested I ask you https://colabti.org/irclogger/irclogger_log/raku?date=2021-02-21#l329

[09:08] <nine> Got that by adding a "or diag $SIL.report" after the test

[09:09] <El_Che> that 11-inline-hash-key.t is certainly the winner in failed tests, I see it regularly

[09:11] <El_Che> (I have been updating the flapper metaticket, I hope no one objects)

[09:18] *** sena_kun left
[09:27] *** sena_kun joined
[09:42] <lizmat> nine++

[09:43] <lizmat> nine: are there other prefixes than "unspecialized" that can be used there ?

[09:46] <nine> I don't know. I didn't know we had an inline log until I saw it used in MoarVM::SIL :)

[09:49] <lizmat> aha... ok, well, I guess it is possible for something to get inlined before spesh got to it

[09:49] <lizmat> fix for that coming up

[09:50] <nine> Looks like "unspecialized " is the only one: https://github.com/MoarVM/MoarVM/blob/master/src/spesh/optimize.c#L21

[09:52] <Geth> ¦ rakudo: f860950410 | (Elizabeth Mattijsen)++ | lib/MoarVM/SIL.rakumod

[09:52] <Geth> ¦ rakudo: Add BB.specialized attribute, fix name checking

[09:52] <Geth> ¦ rakudo: 

[09:52] <Geth> ¦ rakudo: Apparently a BB can be inlined *without* it being specializd, and

[09:52] <Geth> ¦ rakudo: that is reported in the log.  Unfortunately, this wasn't taken into

[09:52] <Geth> ¦ rakudo: account when looking for names, so name checks (like the

[09:52] <Geth> ¦ rakudo: t/09-moar/*inline*.t tests) would report failure, when in fact the

[09:52] <Geth> ¦ rakudo: name checked for *was* inlined, but without being specialized.

[09:52] <Geth> ¦ rakudo: 

[09:52] <Geth> ¦ rakudo: nine++ for tracking the source of these flappers

[09:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f860950410

[10:11] <MasterDuke> at HEAD of master/master/master i still get some inline test fails (t/09-moar/14-inline-comparators-str.t) with no other system load. with moarvm on my always_log_decont branch (rebased to HEAD of master) i get a bunch of additional inline test fails

[10:13] <lizmat> yeah, I just realized there's an off-buy-one error in the code

[10:14] <lizmat> *by

[10:16] <MasterDuke> buy one, get none free

[10:20] <Geth> ¦ rakudo: b0f7ce4ed4 | (Elizabeth Mattijsen)++ | lib/MoarVM/SIL.rakumod

[10:20] <Geth> ¦ rakudo: Make "unspecialized" test more robust

[10:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b0f7ce4ed4

[10:26] <nine> lizmat: typo: unspeciaized

[10:26] <nine> also white space on the line before

[10:28] <lizmat> argh... must not be awake enough yet

[10:29] <Geth> ¦ rakudo: aed69bb222 | (Elizabeth Mattijsen)++ | lib/MoarVM/SIL.rakumod

[10:29] <Geth> ¦ rakudo: Properly spell specialized *sigh*

[10:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aed69bb222

[10:33] *** MasterDuke left
[10:34] *** MasterDuke joined
[10:35] <MasterDuke> huh, still getting that t/09-moar/14-inline-comparators-str.t fail at HEAD

[10:40] <lizmat> MasterDuke: could you gist the report when there's a fail ?

[10:41] <nine> same here

[10:41] <nine> that's how I noticed the typo

[10:41] <lizmat> thing is, I can't get it to fail on my machine

[10:42] <lizmat> it's hard to write tests for cases that you can't get to fail personally  :-(

[10:42] <MasterDuke> https://gist.github.com/MasterDuke17/d74f0b761f6757d87ee2c85e0e2d83f2

[10:43] <nine> MasterDuke: does it still fail with the spelling fix?

[10:43] <nine> The first version spelled it correctly but used the wrong offset in substr, the second version introduced the typo, the third is the charm

[10:43] <MasterDuke> yeah, i'm at 2021.02-9-gaed69bb22

[10:44] <lizmat> sorry for this Monday morning mess...

[10:44] <lizmat> something more serious that broke in 2021.02

[10:44] <lizmat> m: (1..10)[1,^Inf]

[10:45] <camelia> rakudo-moar 3235f3e42: OUTPUT: «(timeout)»

[10:45] <lizmat> and probably broken by me

[10:45] <lizmat> I will look into this after the RWN

[10:50] <MasterDuke> committable6: 2020.12 (1..10)[1,^Inf]

[10:50] <committable6> MasterDuke, ¦2020.12: «»

[10:51] * AlexDaniel` hugs Altai-man_ 

[10:52] <AlexDaniel`> any reason not to bisect it, by the way?

[10:52] <AlexDaniel`> bisect: old=2020.12 (1..10)[1,^Inf]

[10:52] <bisectable6> AlexDaniel`, Bisecting by exit signal (old=2020.12 new=aed69bb). Old exit signal: 0 (None)

[10:53] <bisectable6> AlexDaniel`, bisect log: https://gist.github.com/3968a742df81518e7442163c22331cce

[10:53] <bisectable6> AlexDaniel`, (2021-01-08) https://github.com/rakudo/rakudo/commit/ca7bc91e71afe9373b57cd629215f843e8026df1

[10:53] <lizmat> MasterDuke: I know where the problem is, just not how to easily fix it

[10:54] <lizmat> m: dd (1..10)[lazy 1,^Inf]

[10:54] <camelia> rakudo-moar 3235f3e42: OUTPUT: «(2, (1, 2, 3, 4, 5, 6, 7, 8, 9, 10))␤»

[10:54] <lizmat> m: dd (1..10)[1,^Inf]

[10:54] <MasterDuke> huh

[10:54] <camelia> rakudo-moar 3235f3e42: OUTPUT: «(timeout)»

[10:54] <lizmat> as soon as a lazy list is found, it should switch to lazy semantics, which means: stop when the source has run out

[10:55] <lizmat> by making the outer list of indexes lazy, it will apply lazy semantics and do the right thing

[10:56] *** [Tux] left
[10:59] *** linkable6 left
[10:59] *** [Tux] joined
[11:00] *** linkable6 joined
[11:01] <dogbert11> R#4216

[11:01] *** linkable6 left
[11:01] <dogbert11> wut

[11:02] <dogbert11> very strange

[11:04] *** linkable6 joined
[12:29] *** JRaspass joined
[12:31] <Geth> ¦ rakudo: lizmat self-assigned Test t/78_fragment.t in Tux CSV module hangs https://github.com/rakudo/rakudo/issues/4216

[13:35] <nine> lizmat: still seeing a Failed test 'Was infix:<eq> inlined?' when building a package. This time it really doesn't seem to get inlined and got refused instead:

[13:35] <nine> [  101s] #  3x infix:<eq> BB(4786, 234 bytes) -> abs2rel BB(12041):

[13:35] <nine> [  101s] #       target has a :noinline instruction - ins: speshresolve

[13:35] <MasterDuke> that's what i get also

[13:40] <nine> When it does succeed, it's: 2x infix:<eq> BB(4786, 68 bytes) -> abs2rel BB(12041)

[13:41] <nine> But wait...that doesn't have anything to do with the test code!

[13:41] <Geth> ¦ rakudo: 655f1ac2af | (Elizabeth Mattijsen)++ | 3 files

[13:41] <Geth> ¦ rakudo: Give each inline test its own scope to inline to

[13:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/655f1ac2af

[13:41] <MasterDuke> yeah, was wondering why abs2rel was involved there

[13:41] <lizmat> perhaps that fixes that ??  ^^

[13:41] <nine> The actual test code would look like this: infix:<ne> BB(4788, 68 bytes) -> BB(3)

[13:42] <nine> lizmat: have you checked the output?

[13:43] <lizmat>     infix:<leg> BB(4784, 174 bytes) -> BB(9)

[13:43] <lizmat>     infix:<eq> BB(4786, 68 bytes) -> BB(3)

[13:43] <lizmat>     infix:<ne> BB(4788, 68 bytes) -> BB(4)

[13:43] <lizmat>     infix:<lt> BB(4790, 68 bytes) -> BB(7)

[13:43] <lizmat>     infix:<le> BB(4792, 68 bytes) -> BB(8)

[13:43] <lizmat>     infix:<gt> BB(4794, 68 bytes) -> BB(5)

[13:43] <lizmat>     infix:<ge> BB(4796, 68 bytes) -> BB(6)

[13:43] <lizmat> after the latest change

[13:43] <nine> #  2x infix:<eq> BB(4786, 68 bytes) -> abs2rel BB(12041)

[13:43] <nine> #     infix:<ne> BB(4788, 68 bytes) -> BB(4)

[13:43] <nine> #     infix:<lt> BB(4790, 68 bytes) -> BB(7)

[13:43] <nine> #     infix:<le> BB(4792, 68 bytes) -> BB(8)

[13:43] <nine> #     infix:<gt> BB(4794, 68 bytes) -> BB(5)

[13:43] <nine> #     infix:<ge> BB(4796, 68 bytes) -> BB(6)

[13:43] <lizmat> I think the BB numbers check out actually now

[13:46] <lizmat> hmmm... perhaps I should make each op test in a separate sub and have it check the name of the BB inlined into?

[13:48] *** cog__ left
[13:51] <nine> That wouldn't fix that infix:<eq> just doesn't get inlined in this case

[13:51] <nine> But it would make the test more robust and prevent false negatives

[13:53] <lizmat> linner&

[14:09] *** cog joined
[14:12] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4217: Fix memory leak in runner

[14:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4217

[14:30] <lizmat> notable6: weekly

[14:30] <notable6> lizmat, 1 note: 2021-02-21T14:08:51Z <Altai-man_>: https://twitter.com/koto_san_kana/status/1363490820431765507

[14:30] <lizmat> notable6: weekly reset

[14:30] <notable6> lizmat, Moved existing notes to “weekly_2021-02-22T14:30:25Z”

[14:50] <Geth> ¦ rakudo: 18735ae9a8 | (Daniel Green)++ | src/vm/moar/runner/main.c

[14:50] <Geth> ¦ rakudo: Fix memory leak in runner

[14:50] <Geth> ¦ rakudo: 

[14:50] <Geth> ¦ rakudo: If the `(PERL6|RAKUDO)_HOME` env var is set, `rakudo_home` is

[14:50] <Geth> ¦ rakudo: malloced, but wasn't being freed.

[14:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/18735ae9a8

[14:50] <Geth> ¦ rakudo: d58402c7c0 | MasterDuke17++ (committed using GitHub Web editor) | src/vm/moar/runner/main.c

[14:50] <Geth> ¦ rakudo: Merge pull request #4217 from MasterDuke17/fix_memory_leak_in_runner

[14:50] <Geth> ¦ rakudo: 

[14:50] <Geth> ¦ rakudo: Fix memory leak in runner

[14:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d58402c7c0

[14:57] *** JRaspass left
[15:12] <lizmat> awww...  /me has to remove an entry from the RWN  :-)

[15:18] <MasterDuke> heh, i suspect there will still be enough content

[15:25] *** maggotbrain left
[15:37] <lizmat> and another Rakudo Weekly hits the Net: https://rakudoweekly.blog/2021/02/22/2021-08-first-21/

[15:43] *** maggotbrain joined
[15:50] <vrurg_> lizmat: BTW, they seemingly heard your complains. I saw in the news that the latest Safari is gaining support for webm. :)

[15:54] <dogbert11> MasterDuke: it still fails. 

[16:00] <MasterDuke> yeah, i was just looking at a corefile from coredumpctl. it pointed to https://github.com/MoarVM/MoarVM/blob/master/src/spesh/worker.c#L24 which is annoying because i doesn't point out the line inside the macro

[16:37] *** MasterDuke left
[16:48] <nine> MasterDuke that --full-cleanup segfault looks familiar

[16:53] *** donaldh joined
[16:57] *** JRaspass joined
[17:04] <nine> codesections: that re-checking of dependencies you mentioned in https://stackoverflow.com/questions/66210606/why-do-different-ways-of-calling-raku-result-in-very-different-startup-times looks a bit fishy. It really should do that only once and write a .repo-id file. Would be worth investigating why it doesn't.

[17:16] *** donaldh left
[17:23] <codesections>         nine++

[17:23] <codesections> s/        //

[17:45] *** domidumont left
[17:51] *** domidumont joined
[18:01] *** domidumont left
[18:08] <nine> codesections: the bad news is that it's you who ought to do that digging :D These things typically depend on the system they're running on

[18:08] <nine> But I'm happy to assist

[18:08] <lizmat> bisectable6: dd (1..10)[lazy 1,(8..12)]

[18:08] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[18:08] <bisectable6> lizmat, Output on all releases: https://gist.github.com/283df1d7053c84ac30e52ff7ccdb1544

[18:08] <bisectable6> lizmat, Bisecting by output (old=2020.12 new=2021.02) because on both starting points the exit code is 0

[18:09] <bisectable6> lizmat, bisect log: https://gist.github.com/83a91a97f13ba54eab7dae60ae062b02

[18:09] <bisectable6> lizmat, (2021-01-08) https://github.com/rakudo/rakudo/commit/ca7bc91e71afe9373b57cd629215f843e8026df1

[18:09] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/5a099f66448ab54f4243838e8f14a44f

[18:09] <lizmat> yeah, what I feared: the old version was buggy as well

[18:09] <lizmat> m: dd (1..10)[lazy 1,(8..12)]

[18:09] <camelia> rakudo-moar 3235f3e42: OUTPUT: «(2, (9, 10))␤»

[18:10] <lizmat> Now, I would have expected that the lazy semantics would *not* carry over into the non-lazy sublist

[18:12] <lizmat> m: dd (1..10)[1,(8..12),3]

[18:12] <camelia> rakudo-moar 3235f3e42: OUTPUT: «(2, (9, 10, Nil, Nil, Nil), 4)␤»

[18:18] <lizmat> Looks like the fix for (1..10)[1,^inf] is going to take some refactoring, but in the end, it should reduce the footprint of array slicing on disk

[18:36] *** Xliff joined
[18:36] <Xliff> \o

[18:36] <tellable6> hey Xliff, you have a message: https://gist.github.com/21453045be32ce55dd61ad7fafae7828

[18:37] <Xliff> ,tell patrickb Ah, piffle! Thanks for the update.

[18:38] <Xliff> Since there doesn't seem to be a #comma channel, can someone tell me how to set the Raku SDK in comma?

[18:43] <sena_kun> Xliff, `File -> Project Structure -> ...`

[18:43] <sena_kun> Then it should be more or less obvious. If it does not do the auto-detection bit, you need to point it to the directory where `raku` binary is present

[18:43] <sena_kun> Usually its `bin` directory of where your installation lives.

[19:12] <Xliff> sena_kun++ # Thanks!

[19:12] <sena_kun> yw

[19:48] *** MasterDuke joined
[19:50] *** JRaspass left
[20:08] <Geth> ¦ rakudo: 5eeddd37fa | (Elizabeth Mattijsen)++ | 4 files

[20:08] <Geth> ¦ rakudo: Fix for #4216

[20:08] <Geth> ¦ rakudo: 

[20:08] <Geth> ¦ rakudo: It turned out that a lazy iterable as part of a non lazy list of indexes

[20:08] <Geth> ¦ rakudo: in a slice, had the possibility of hanging because eager semantics where

[20:08] <Geth> ¦ rakudo: being used on the lazy iterator, e.g. in `(1..10)[1,^Inf]`

[20:08] <Geth> ¦ rakudo: 

[20:08] <Geth> ¦ rakudo: This commit removes all of the Array::Slice classes that existed for

[20:08] <Geth> ¦ rakudo: <…commit message has 20 more lines…>

[20:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5eeddd37fa

[20:08] *** linkable6 left
[20:08] <lizmat> this also unbreaks Text::CSV

[20:09] *** linkable6 joined
[20:12] <Geth> ¦ roast: 187d894660 | (Elizabeth Mattijsen)++ | S09-subscript/slice.t

[20:12] <Geth> ¦ roast: Mark failing test as todo for now

[20:12] <Geth> ¦ roast: 

[20:12] <Geth> ¦ roast: The semantics of a lazy list slipped into indexes of an array slice,

[20:12] <Geth> ¦ roast: appear to be assuming that the laziness of the Slip would actually

[20:12] <Geth> ¦ roast: influence the laziness of the outer sequence.  I don't believe this

[20:12] <Geth> ¦ roast: to be sane semantics.

[20:12] <Geth> ¦ roast: 

[20:12] <Geth> ¦ roast: See: https://github.com/rakudo/rakudo/commit/5eeddd37fa

[20:12] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/187d894660

[20:13] <lizmat> sena_kun: not sure this warrants a point release, but if you want, you can  :-)

[20:39] <El_Che> broken new feature: no dot release, newly broken existing feature: a dot release could unbreak real life code

[20:48] <nine> Holy cow, spesh is smart. It actually notices that we're comparing two string literals and that they won't ever be equal, so it removes the whole equality check

[20:50] <MasterDuke> nice. isn't that the optimization i recently un-disabled?

[20:56] <Geth> ¦ nqp: MasterDuke17++ created pull request #696: Support some missing Rakudo command line flags

[20:56] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/696

[21:22] <sena_kun> sigh, I cannot easily cherry-pick the commit to the release branch.

[21:22] <sena_kun> 	deleted by us:   src/core.c/Array/Slice.pm6

[21:22] <sena_kun> 	deleted by us:   src/core.c/Rakudo/Internals/PostcircumfixAdverbs.pm6

[21:22] <sena_kun> 	both modified:   src/core.c/array_slice.pm6

[21:22] <sena_kun> 	deleted by us:   tools/build/makeARRAY_SLICE_ACCESS.raku

[21:24] <sena_kun> Oh no, appveyor is failing all the time cause of the inlining tests.

[23:00] <Geth> ¦ rakudo: a5ca53a8b4 | (Elizabeth Mattijsen)++ | 5 files

[23:00] <Geth> ¦ rakudo: Remove inlining tests

[23:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a5ca53a8b4

[23:01] *** El_Che left
[23:27] <lizmat> m: my @a = 10..20; @a[1,^Inf] = ^Inf; dd @a   # sena_kun: please wait with a point release

[23:28] <camelia> rakudo-moar 3235f3e42: OUTPUT: «(timeout)»

[23:28] <lizmat> will look at that tomorrow

[23:33] *** JRaspass joined
