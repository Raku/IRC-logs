[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:09] *** ggoebel joined
[00:28] <Xliff> vrurg: So, would a web front end for something like Blin be a good starting point?

[00:28] <Xliff> And so, I guess I am throwing my hat in the ring for Service Manager.

[00:28] <Xliff> Let me know what I need to do.

[00:29] *** ggoebel left
[00:37] *** ggoebel joined
[00:40] <vrurg> Xliff: If I consider it then my view for smoketesting would be different. Blin is a brute force. Smoketesting would be a lightweight variant where it picks newly uploaded modules and puts them in a queue. Anybody could start a client on their side and only what is in the queue. The point is to cover as many different platforms as possible. 

[00:41] <vrurg> It could also be about testing different compiler versions, but a new release would not trigger re-testing of all existing modules – this is what we have Blin for.

[00:44] <vrurg> As to becoming a manager, you'd need to find somebody who is looking for help. So far, I see no interest in people supporting the existing infrastructure to receive assistance from volunteers.

[00:50] *** ggoebel left
[01:00] <Xliff> vrurg: Well if there is no immediate interest, why advertise the position?

[01:03] <vrurg> Xliff: you still don't get it. Have you read https://github.com/Raku/Raku-Steering-Council/blob/main/announcements/20211002.md?

[01:05] <vrurg> And also note the line right before: "For example, a new entry may look like this:" – and then _an example_ of a service description follows, so any one responsible for an infrastructure project can add _their_ description under the PROJECT LIST section.

[01:30] *** ggoebel joined
[02:11] *** ggoebel left
[02:30] *** ggoebel joined
[02:52] *** ggoebel left
[03:12] <Geth> ¦ rakudo: vrurg++ created pull request #4559: Add guard for container descriptor $!of for non-nominals

[03:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4559

[03:52] *** evalable6 left
[03:52] *** linkable6 left
[04:52] *** greppable6 left
[04:52] *** quotable6 left
[04:52] *** benchable6 left
[04:52] *** notable6 left
[04:52] *** shareable6 left
[04:52] *** statisfiable6 left
[04:52] *** nativecallable6 left
[04:52] *** releasable6 left
[04:52] *** bisectable6 left
[04:52] *** bloatable6 left
[04:52] *** coverable6 left
[04:52] *** committable6 left
[04:52] *** unicodable6 left
[04:52] *** sourceable6 left
[04:52] *** tellable6 left
[04:52] *** squashable6 left
[04:52] *** reportable6 left
[04:53] *** reportable6 joined
[04:53] *** evalable6 joined
[04:53] *** quotable6 joined
[04:54] *** tellable6 joined
[04:54] *** bloatable6 joined
[04:54] *** notable6 joined
[04:55] *** benchable6 joined
[04:55] *** releasable6 joined
[04:55] *** statisfiable6 joined
[04:55] *** bisectable6 joined
[04:55] *** shareable6 joined
[05:53] *** greppable6 joined
[05:53] *** linkable6 joined
[05:54] *** nativecallable6 joined
[05:54] *** squashable6 joined
[05:55] *** unicodable6 joined
[06:02] *** reportable6 left
[07:23] *** nebuchadnezzar joined
[07:40] *** MasterDuke left
[07:45] *** patrickb joined
[07:53] *** committable6 joined
[07:53] *** sourceable6 joined
[07:55] *** MasterDuke joined
[08:02] <Geth> ¦ rakudo/new-disp-nativecall: 720075d707 | (Stefan Seifert)++ | lib/NativeCall.rakumod

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: Handle explicitly managed strings getting passed to native functions

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: 

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: For explicitly managed strings, we need to pass the contained CStr value

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: instead of the string object itself. This way NativeCall knows not to free

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: the created C string after the call.

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: 

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: Note that the generated function bodies have never supported this. The problem

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: just hasn't surfaced before, because the test runs the call only once and in

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: the previous implementation, the first call always went through the generic

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: calling code (which does support explicitly managed strings).

[08:02] <Geth> ¦ rakudo/new-disp-nativecall: review: https://github.com/rakudo/rakudo/commit/720075d707

[08:03] *** reportable6 joined
[08:37] <Geth> ¦ rakudo/new-disp-nativecall: 71fa529e16 | (Stefan Seifert)++ | 2 files

[08:37] <Geth> ¦ rakudo/new-disp-nativecall: Support passing Proxy to native routines

[08:37] <Geth> ¦ rakudo/new-disp-nativecall: 

[08:37] <Geth> ¦ rakudo/new-disp-nativecall: For now if we find a Proxy in a native routine's arguments, just wrap the call

[08:37] <Geth> ¦ rakudo/new-disp-nativecall: in a simple function that fetches values from proxies as a side-effect.

[08:37] <Geth> ¦ rakudo/new-disp-nativecall: review: https://github.com/rakudo/rakudo/commit/71fa529e16

[09:14] <Geth> ¦ rakudo: Kaiepi self-assigned Signatures with subsignatures smartmatch incorrectly in both directions  https://github.com/rakudo/rakudo/issues/4558

[09:17] <[Tux]> Rakudo v2021.09-251-gff6951f59 (v6.d) on MoarVM 2021.09-635-g78fd4944f

[09:17] <[Tux]> csv-test-xs-20      0.379 -  0.382

[09:17] <[Tux]> test-t --race       1.017 -  1.043

[09:17] <[Tux]> csv-ip5xs           1.385 -  1.450

[09:17] <[Tux]> test-t              1.706 -  1.721

[09:17] <[Tux]> csv-parser          4.708 -  4.734

[09:17] <[Tux]> test                7.387 -  7.453

[09:17] <[Tux]> test-t-20 --race    7.969 -  8.007

[09:17] <[Tux]> csv-ip5xs-20       15.663 - 16.235

[09:17] <[Tux]> test-t-20          24.768 - 25.115

[09:29] *** SmokeMachine left
[09:33] *** SmokeMachine joined
[10:33] *** bloatable6 left
[10:33] *** benchable6 left
[10:33] *** releasable6 left
[10:33] *** reportable6 left
[10:33] *** quotable6 left
[10:33] *** unicodable6 left
[10:33] *** notable6 left
[10:33] *** squashable6 left
[10:33] *** bisectable6 left
[10:33] *** committable6 left
[10:33] *** evalable6 left
[10:33] *** statisfiable6 left
[10:33] *** linkable6 left
[10:33] *** tellable6 left
[10:33] *** greppable6 left
[10:33] *** sourceable6 left
[10:33] *** shareable6 left
[10:33] *** nativecallable6 left
[10:33] *** committable6 joined
[10:33] *** notable6 joined
[10:33] *** sourceable6 joined
[10:33] *** unicodable6 joined
[10:33] *** reportable6 joined
[10:35] *** shareable6 joined
[10:35] *** squashable6 joined
[10:35] *** bisectable6 joined
[10:36] *** statisfiable6 joined
[10:53] *** coverable6 joined
[10:54] *** ggoebel joined
[10:57] <Geth> ¦ rakudo: 431c3d6b7b | (Elizabeth Mattijsen)++ | src/core.c/operators.pm6

[10:57] <Geth> ¦ rakudo: Rewrite INDIRECT_NAME_LOOKUP

[10:57] <Geth> ¦ rakudo: 

[10:57] <Geth> ¦ rakudo: - For better maintainability and debuggability

[10:57] <Geth> ¦ rakudo: - According to the latest optimization insights

[10:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/431c3d6b7b

[11:34] *** greppable6 joined
[11:35] *** benchable6 joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:35] *** bloatable6 joined
[12:35] *** linkable6 joined
[12:36] *** releasable6 joined
[13:30] *** patrickb left
[13:33] *** evalable6 joined
[13:34] *** tellable6 joined
[14:34] *** nativecallable6 joined
[14:43] *** squashable6 left
[14:57] *** squashable6 joined
[15:35] *** quotable6 joined
[16:07] *** patrickb joined
[17:19] *** linkable6 left
[17:19] *** evalable6 left
[18:03] *** reportable6 left
[18:05] *** reportable6 joined
[18:22] *** evalable6 joined
[18:47] *** ggoebel left
[18:51] *** ggoebel joined
[18:59] *** ggoebel left
[19:22] *** linkable6 joined
[19:52] <japhb> lizmat: Could you explain a little about what those "latest optimization insights" are?

[20:26] *** patrickb left
[20:33] <Geth> ¦ rakudo: usev6++ created pull request #4560: [JVM] Unbreak build after merge of new-disp

[20:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4560

[20:36] <bartolin> ^^ I'm neither sure about this changes nor am I happy with the added conditionals for the preprocessor. But I wanted to bring that up now as a possible solution to unbreak the build. I'm afraid I won't have much time the next two weeks ...

