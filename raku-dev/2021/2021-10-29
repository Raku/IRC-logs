[00:02] *** reportable6 left
[00:18] *** dogbert17 joined
[00:19] *** dogbert11 joined
[00:23] *** dogbert17 left
[00:31] *** dogbert11 left
[00:50] *** dogbert11 joined
[00:55] *** dogbert17 joined
[00:59] *** dogbert11 left
[01:04] *** reportable6 joined
[02:09] *** dogbert17 left
[02:28] *** dogbert17 joined
[03:50] *** melezhik left
[04:50] *** reportable6 left
[04:50] *** notable6 left
[04:50] *** quotable6 left
[04:50] *** unicodable6 left
[04:50] *** bloatable6 left
[04:50] *** statisfiable6 left
[04:50] *** greppable6 left
[04:50] *** committable6 left
[04:50] *** bisectable6 left
[04:50] *** benchable6 left
[04:50] *** squashable6 left
[04:50] *** releasable6 left
[04:50] *** linkable6 left
[04:50] *** coverable6 left
[04:50] *** shareable6 left
[04:50] *** evalable6 left
[04:50] *** tellable6 left
[04:50] *** sourceable6 left
[04:50] *** nativecallable6 left
[04:50] *** reportable6 joined
[04:50] *** quotable6 joined
[04:51] *** benchable6 joined
[04:51] *** tellable6 joined
[04:51] *** notable6 joined
[04:51] *** committable6 joined
[04:51] *** linkable6 joined
[04:52] *** shareable6 joined
[04:52] *** squashable6 joined
[04:52] *** unicodable6 joined
[04:53] *** bloatable6 joined
[05:08] *** frost left
[05:32] *** SmokeMachine left
[05:32] *** SmokeMachine joined
[05:52] *** statisfiable6 joined
[05:52] *** nativecallable6 joined
[05:55] *** [Coke] left
[05:57] *** dogbert11 joined
[05:59] *** dogbert12 joined
[06:00] *** dogbert17 left
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:03] *** dogbert11 left
[06:04] *** dogbert17 joined
[06:04] *** dogbert12 left
[06:08] *** Kaiepi left
[06:51] *** greppable6 joined
[06:51] *** bisectable6 joined
[06:51] *** dogbert17 left
[06:52] *** sourceable6 joined
[07:08] *** Kaiepi joined
[07:30] *** dogbert17 joined
[07:33] *** dogbert11 joined
[07:34] *** dogbert17 left
[08:05] *** dogbert17 joined
[08:06] *** dogbert11 left
[08:13] *** dogbert11 joined
[08:15] *** dogbert17 left
[08:24] *** dumarchie joined
[08:24] *** dogbert17 joined
[08:25] <lizmat> Files=1349, Tests=117863, 306 wallclock secs (35.59 usr  9.66 sys + 4272.10 cusr 342.41 csys = 4659.76 CPU)

[08:26] <dumarchie> lizmat, I've a question regarding https://github.com/rakudo/rakudo/commit/407bce1dc26010769640ec8f616ed5a06860bda1

[08:26] <lizmat> dumarchie: and the question is?

[08:27] <dumarchie> `QuantHash` appears to be the only type that implements its own `multi method list(QuantHash:U:)`. Do you know why?

[08:28] *** dogbert11 left
[08:28] <dumarchie> All other types rely on `multi method list(Any:U)` instead of overriding it.

[08:29] <lizmat> probably because QuantHashes are not Iterable ?

[08:30] <dumarchie> But the QuantHash:U multi just calls the Any:U multi.

[08:31] <lizmat> m: dd infix:<,>(set(1,2,3))

[08:31] <camelia> rakudo-moar d619e026f: OUTPUT: «Set.new(2,1,3)␤»

[08:31] <dumarchie> Why would that not work without overriding the Any:U multi?

[08:32] <lizmat> well, that's just a type object, calling .list on a type object should create a list with one element in it: that type object

[08:33] <dumarchie> m: QuantHash.list.raku

[08:33] <camelia> rakudo-moar d619e026f: ( no output )

[08:33] <dumarchie> m: dd QuantHash.list

[08:33] <camelia> rakudo-moar d619e026f: OUTPUT: «(QuantHash,)␤»

[08:33] <dumarchie> m: dd Any.list

[08:33] <camelia> rakudo-moar d619e026f: OUTPUT: «(Any,)␤»

[08:35] <dumarchie> The only good reason I can think of that there are cases where QuantHash.isa(Any) is False, but I did not find such cases.

[08:36] <dumarchie> I meant cases where a type that does QuantHash does not inherit from Any.

[08:38] <dumarchie> Shall I try and remove this apparently redundant candidate?

[08:39] <lizmat> you mean the U: candidate ?

[08:39] <lizmat> hmmm...

[08:39] <dumarchie> Yes, the QuantHash:U candidate

[08:40] <lizmat> yeah, pretty sure that can go  :-)

[08:40] <dumarchie> (y) 

[08:45] <Geth> ¦ rakudo: dumarchie++ created pull request #4600: Remove redundant multi method list

[08:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4600

[08:50] *** coverable6 joined
[09:21] *** frost joined
[09:35] <Geth> ¦ rakudo: 8fd65670f8 | (Peter du Marchie van Voorthuysen)++ | src/core.c/QuantHash.pm6

[09:35] <Geth> ¦ rakudo: Remove redundant multi method list

[09:35] <Geth> ¦ rakudo: 

[09:35] <Geth> ¦ rakudo: The multi method list(QuantHash:U:) just called self.Any::list

[09:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8fd65670f8

[09:35] <Geth> ¦ rakudo: 6278c4f77a | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/QuantHash.pm6

[09:35] <Geth> ¦ rakudo: Merge pull request #4600 from dumarchie/master

[09:35] <Geth> ¦ rakudo: 

[09:35] <Geth> ¦ rakudo: Remove redundant multi method list

[09:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6278c4f77a

[09:53] *** evalable6 joined
[11:25] *** evalable6 left
[11:25] *** linkable6 left
[11:25] *** frost left
[11:26] *** evalable6 joined
[11:27] *** frost joined
[11:27] *** linkable6 joined
[11:38] *** [Coke] joined
[11:50] *** releasable6 joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:32] *** dogbert11 joined
[12:35] *** dogbert17 left
[13:48] *** Kaiepi left
[13:55] *** dumarchie left
[14:13] *** dogbert17 joined
[14:16] *** dogbert11 left
[14:23] *** _Xliff_ joined
[14:25] *** Xliff_ left
[14:26] *** Xliff joined
[14:28] *** _Xliff_ left
[14:28] *** Xliff_ joined
[14:31] *** Xliff left
[14:31] *** _Xliff_ joined
[14:34] *** Xliff_ left
[14:46] *** frost left
[14:48] *** frost joined
[15:02] *** Xliff_ joined
[15:04] *** _Xliff_ left
[15:27] *** _Xliff_ joined
[15:30] *** Xliff_ left
[15:37] *** melezhik joined
[16:07] *** Xliff_ joined
[16:09] *** _Xliff_ left
[17:05] *** zostay_ joined
[17:05] *** leont_ joined
[17:13] *** leont left
[17:13] *** zostay left
[17:13] *** casaca left
[17:13] *** leont_ is now known as leont

[17:13] *** zostay_ is now known as zostay

[17:13] *** casaca joined
[17:34] *** Kaiepi joined
[17:35] <[Tux]> Rakudo v2021.10-22-g6278c4f77 (v6.d) on MoarVM 2021.10-15-g51bff712c

[17:35] <[Tux]> csv-test-xs-20      0.374 -  0.377

[17:35] <[Tux]> test-t --race       0.975 -  0.999

[17:35] <[Tux]> csv-ip5xs           1.351 -  1.417

[17:35] <[Tux]> test-t              1.536 -  1.570

[17:35] <[Tux]> csv-parser          3.970 -  4.099

[17:35] <[Tux]> test                6.876 -  7.023

[17:35] <[Tux]> test-t-20 --race    7.382 -  7.454

[17:35] <[Tux]> csv-ip5xs-20       15.028 - 15.686

[17:35] <[Tux]> test-t-20          22.220 - 22.515

[17:36] <lizmat> that's pretty good!

[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:21] *** _Xliff_ joined
[18:23] *** Xliff_ left
[18:38] *** notna joined
[18:47] *** sena_kun left
[18:48] *** sena_kun joined
[19:08] <bartolin> It looks like yesterdays commits to simplify some protos didn't work well for the JVM backend. There are massive spectest failures :(. (I was already afraid of that when I read "Because new-disp allows removel of the nqp::getlexcaller hack".)

[19:08] <lizmat> aaah... ok

[19:09] <lizmat> shall I revert that and make it backend specific ?

[19:09] <bartolin> I'm +1 on that :)

[19:09] <lizmat> ok, will do  :-)

[19:10] <bartolin> ++lizmat

[19:12] *** Xliff_ joined
[19:15] *** _Xliff_ left
[19:19] *** _Xliff_ joined
[19:21] *** Xliff_ left
[19:24] *** Xliff_ joined
[19:27] *** _Xliff_ left
[19:31] *** _Xliff_ joined
[19:33] <Geth> ¦ rakudo: c50bc99856 | (Elizabeth Mattijsen)++ | 2 files

[19:33] <Geth> ¦ rakudo: Only simplify protos on the MoarVM backend

[19:33] <Geth> ¦ rakudo: 

[19:33] <Geth> ¦ rakudo: On other backends, the nqp::getlexcaller in the proto is still

[19:33] <Geth> ¦ rakudo: necessary.

[19:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c50bc99856

[19:33] <lizmat> bartolin ^^

[19:34] *** Xliff_ left
[19:37] *** Xliff_ joined
[19:40] *** _Xliff_ left
[19:44] *** _Xliff_ joined
[19:46] *** Xliff_ left
[19:47] *** Xliff_ joined
[19:50] *** _Xliff_ left
[19:57] <bartolin> lizmat: Thanks! I'll try that out.

[20:19] *** notna left
[20:54] <Geth> ¦ rakudo: vrurg++ created pull request #4602: Clarify let and temp operators

[20:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4602

[21:08] <lizmat> bisectable6: our %h is Map

[21:08] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[21:08] <bisectable6> lizmat, Output on all releases: https://gist.github.com/b5cb22fcaa311431cc3d0dbd303b8c51

[21:08] <bisectable6> lizmat, Bisecting by output (old=2017.03 new=2017.04.3) because on both starting points the exit code is 1

[21:09] <bisectable6> lizmat, bisect log: https://gist.github.com/29788d314c3a9c3508e7de8562aed4a9

[21:09] <bisectable6> lizmat, (2017-04-14) https://github.com/rakudo/rakudo/commit/822566f1ade5af59dc69ff264609bf75f0bf0f7e

[21:09] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/fcd1bfeeb9b117037be3e692f2030521

[21:19] *** evalable6 left
[21:19] *** linkable6 left
[21:20] *** evalable6 joined
[21:58] <MasterDuke> lizmat: i wonder if this comment is still correct after new-disp https://github.com/rakudo/rakudo/blob/master/src/core.c/Str.pm6#L1570-L1571

[22:08] <Geth> ¦ roast: vrurg++ created pull request #768: Add tests for let/temp preserving holes and containerization

[22:08] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/768

[22:22] *** linkable6 joined
[22:39] *** _Xliff_ joined
[22:41] <Geth> ¦ roast: MasterDuke17++ created pull request #769: Some more tests that negative numbers aren't prime

[22:41] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/769

[22:42] *** Xliff_ left
[22:45] *** squashable6 left
[22:47] *** squashable6 joined
[23:08] <Geth> ¦ roast: f34df3d1e9 | (Daniel Green)++ | S32-num/is-prime.t

[23:08] <Geth> ¦ roast: Some more tests that negative numbers aren't prime

[23:08] <Geth> ¦ roast: 

[23:08] <Geth> ¦ roast: Add some cases that test the MoarVM bug fixed by

[23:08] <Geth> ¦ roast: https://github.com/MoarVM/MoarVM/pull/1587.

[23:08] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f34df3d1e9

[23:08] <Geth> ¦ roast: 5da43e96e4 | MasterDuke17++ (committed using GitHub Web editor) | S32-num/is-prime.t

[23:08] <Geth> ¦ roast: Merge pull request #769 from MasterDuke17/negative_numbers_should_not_be_prime

[23:08] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/5da43e96e4

[23:09] <lizmat> bisectable6:  for ^10 { $/++ }; say $/

[23:09] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[23:09] <bisectable6> lizmat, ¦6c (59 commits): «10␤»

[23:09] <bisectable6> lizmat, Nothing to bisect!

[23:10] <lizmat> bisectable6: old=2016.01 for ^10 { $/++ }; say $/

[23:10] <bisectable6> lizmat, On both starting points (old=2016.01 new=c50bc99) the exit code is 0 and the output is identical as well

[23:10] <bisectable6> lizmat, Output on both points: «10␤»

[23:10] <lizmat> bisectable6: old=2015.01 new=2016.01 for ^10 { $/++ }; say $/

[23:10] <bisectable6> lizmat, On both starting points (old=2015.01 new=2016.01) the exit code is 0 and the output is identical as well

[23:10] <bisectable6> lizmat, Output on both points: «10␤»

