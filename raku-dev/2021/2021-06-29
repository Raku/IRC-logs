[00:03] *** reportable6 left
[00:04] *** reportable6 joined
[00:51] *** melezhik left
[05:36] *** greppable6 left
[05:36] *** statisfiable6 left
[05:36] *** coverable6 left
[05:36] *** squashable6 left
[05:36] *** notable6 left
[05:36] *** linkable6 left
[05:36] *** reportable6 left
[05:36] *** shareable6 left
[05:36] *** nativecallable6 left
[05:36] *** committable6 left
[05:36] *** tellable6 left
[05:36] *** bloatable6 left
[05:36] *** evalable6 left
[05:36] *** quotable6 left
[05:36] *** bisectable6 left
[05:36] *** sourceable6 left
[05:36] *** benchable6 left
[05:36] *** releasable6 left
[05:36] *** unicodable6 left
[05:37] *** bloatable6 joined
[05:37] *** sourceable6 joined
[05:37] *** releasable6 joined
[05:37] *** squashable6 joined
[05:37] *** unicodable6 joined
[05:37] *** bisectable6 joined
[05:38] *** evalable6 joined
[05:38] *** coverable6 joined
[05:38] *** reportable6 joined
[05:38] *** greppable6 joined
[05:38] *** tellable6 joined
[05:38] *** notable6 joined
[05:38] *** committable6 joined
[05:39] *** statisfiable6 joined
[05:39] *** shareable6 joined
[05:39] *** benchable6 joined
[05:39] *** nativecallable6 joined
[05:40] *** quotable6 joined
[05:40] *** linkable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:10] *** Kaiepi left
[06:12] *** Kaiepi joined
[06:36] <Xliff> m: "a\r\n".comb.map( *.ord ).gist.say

[06:36] <camelia> rakudo-moar dba9f56af: OUTPUT: «(97 13)␤»

[06:36] <Xliff> O_o? -- Isn't that (97 10 13)?

[06:37] <Xliff> ^^ lizmat timotimo vrurg codesections

[06:52] <nine> Xliff: no, "\r\n" is a grapheme cluster which what we usually see as a single character. The ord method however is documented as looking at the first Unicode code point in the string.

[06:54] <Xliff> nine: Thanks. What should I be using, instead? .grapheme?

[06:54] <Xliff> Is there a a thing?

[06:54] <Xliff> s/a a/such a/

[06:55] <nine> Depends on what you're trying to do?

[06:58] <moon-child> Xliff: I would guess you want codepoints

[07:00] <Xliff> I want a way to see "\r\n" as (10 13)

[07:00] <Xliff> However I am well aware that what I want isn't what I need. :)

[07:01] <nine> Xliff: that still leaves several options, so the question remains: what do you want that for?

[07:01] <moon-child> m: .say for "a\r\n".NFC

[07:01] <camelia> rakudo-moar dba9f56af: OUTPUT: «97␤13␤10␤»

[07:01] <moon-child> Xliff: what do you want to do about combining characters?

[07:04] <Xliff> moonchild++ # .NFC works!

[07:05] <nine> For the very limited use case you've shown

[07:05] <Xliff> nine: Limited for a reason, thanks.

[07:05] <moon-child> see also: nfd, nfkc, nfkd

[07:05] <moon-child> what do you want this for?

[07:06] <lizmat> m: .say for "a\r\n".encode

[07:06] <camelia> rakudo-moar dba9f56af: OUTPUT: «97␤13␤10␤»

[07:06] <nine> m: .say for "a\r\n".encode # "works" as well

[07:06] <camelia> rakudo-moar dba9f56af: OUTPUT: «97␤13␤10␤»

[07:06] <nine> Ha!

[07:06] <lizmat> hehe

[07:06] <nine> Great minds think alike :)

[07:07] <moon-child> yea but then

[07:07] <lizmat> :-)

[07:07] <moon-child> m: .say for "á\r\n".encode

[07:07] <camelia> rakudo-moar dba9f56af: OUTPUT: «195␤161␤13␤10␤»

[07:07] <nine> moon-child: exactly! That's why the other use cases matter

[07:35] <Xliff> D'oh! I should have thought about .encode! I was using it in this code, too!

[07:36] <Xliff> m: "Encode\0\0\0".encode.say

[07:36] <camelia> rakudo-moar 279293579: OUTPUT: «utf8:0x<45 6E 63 6F 64 65 00 00 00>␤»

[07:36] <Xliff> m: say "Encode\0\0\0" eq 'Encode'

[07:36] <camelia> rakudo-moar 279293579: OUTPUT: «False␤»

[08:09] *** AlexDaniel left
[08:10] <Xliff> m: class ICal::GLib::Timezone::Array { ... }; class ICal::GLib::Timezone { }; class ICal::GLib::Timezone::Array { }

[08:10] <camelia> rakudo-moar 279293579: ( no output )

[08:11] <Xliff> m: class Object { }; class ICal::GLib::Timezone::Array is Object { ... }; class ICal::GLib::Timezone is Object { }; class ICal::GLib::Timezone::Array { }

[08:11] <camelia> rakudo-moar 279293579: ( no output )

[08:14] <Xliff> class predeclaration is b0rked. 

[08:15] <Xliff> At least in my projects I am having to move previously working predeclarations out

[08:23] <lizmat> Xliff: do you think it's a recent regression ?

[08:24] <lizmat> perhaps run something by bisectable6  ?

[08:28] <Xliff> lizmat: Um. No. It's been apparent but solvable for the last 3 or so weeks.

[08:29] <lizmat> wonder if this has to do with recent work of vrurg in that area ?

[08:29] <Xliff> Again.... I can't golf Greater Work issues. It would be a lot of trail and error.

[08:29] <Xliff> That makes bisectable problematic.

[08:30] <Xliff> That's 570,000 lines of code to work with.

[08:30] <lizmat> Xliff: understood  :-(

[08:30] <Xliff> But it was workable with stubbed classes last week.

[08:30] <Xliff> It's not working since this week's weekly compile

[08:30] <lizmat> having a full --ll-exception stack trace in an error report, would be helpful nonetheless

[08:31] <Xliff> So the problem commit has to be from the 21st to the 26th

[08:31] <Xliff> I'll see about that --ll-exception

[08:32] <Xliff> and now the fucker works...

[08:32] <lizmat> Xliff: hhhmmm... that doesn't leave many commits

[08:32] <lizmat> could you try reverting dba9f56afa95ef078a5d0e ?

[08:32] <Xliff> So it's a flapper, as well

[08:33] <Xliff> Ummm.....

[08:33] <Xliff> I can rakudobrew

[08:33] *** linkable6 left
[08:34] <Xliff> lizmat: OK. It's building. It might be several hours before I can circle back.

[08:34] *** linkable6 joined
[08:34] <lizmat> Xliff: I'll be working in the weekly in the meanwhile  :-)

[08:34] <lizmat> dba9f56afa95ef078a5d0e

[08:35] <lizmat> hmmm... linkable doesn't seem to pick up dba9f56afa95ef078a5d0e ?

[08:35] <lizmat> ok, *

[08:35] *** linkable6 left
[08:38] *** linkable6 joined
[09:03] *** patrickb joined
[09:09] *** kawaii_ is now known as kawaii

[09:57] <lizmat> notable6: weekly

[09:57] <notable6> lizmat, 5 notes: https://gist.github.com/c5dc69bfde25264c67175c084e1ea261

[10:18] <lizmat> notable6: weekly reset

[10:18] <notable6> lizmat, Moved existing notes to “weekly_2021-06-29T10:18:23Z”

[10:24] <gfldex> [Coke]: I found there error and it is on my side.

[10:27] *** discord-raku-bot left
[10:27] *** discord-raku-bot joined
[10:31] <tbrowder> melezhik here?

[10:31] <tbrowder> m: use Modf

[10:31] <camelia> rakudo-moar eab780f38: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find Modf in:␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/camelia/raku…»

[10:32] <tbrowder> any way to get a non-core module loaded here?

[10:35] <tbrowder> on sunday i submitted pr to add modf function to core and melezhik broke it with three tests with very large numbers.

[10:37] <tbrowder> the specific breakers were solved by using a fatrat internally. BUT the other previously passing tests started failing (see S32-num/modf.t in roast pr).

[10:38] <lizmat> tbrowder: camelia only supports the modules that are supplied with the compiler release

[10:39] <tbrowder> my first chg was brute force by converting the input arg to a FatRat with no regard to its size.

[10:39] <tbrowder> ok, thnx

[10:41] <tbrowder> can i do something like this: modf($x is copy) { $x .= FatRat if $x > a-magii

[10:42] <tbrowder> magic-number; ...}

[10:43] <tbrowder> i know i can try that, but what is a suitable magic number?

[10:45] <tbrowder> m: my $x = 123456789123456789.6; say($x-$.Int)

[10:45] <camelia> rakudo-moar eab780f38: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $.Int used where no 'self' is available␤at <tmp>:1␤------> 3 $x = 123456789123456789.6; say($x-$.Int7⏏5)␤    expecting any of:␤        term␤»

[10:46] <MasterDuke> m: my $x = 123456789123456789.6; say($x-$x.Int)

[10:46] <camelia> rakudo-moar eab780f38: OUTPUT: «0.6␤»

[10:46] <tbrowder> m: my $x=123456789123456789.6; say($x-$x.Int)

[10:46] <camelia> rakudo-moar eab780f38: OUTPUT: «0.6␤»

[10:47] <tbrowder> m: my $x=123456789123456789.6; say ($x.Int)

[10:47] <camelia> rakudo-moar eab780f38: OUTPUT: «123456789123456789␤»

[10:49] <lizmat> tbrowder: wouldn't that be the same magic number that causes a downgrade to num ?

[10:50] <tbrowder> well that helps. that is one of the inputs that caused an error, so it must have been in a further operation.

[10:50] <tbrowder> i guess, i'm not much of a mathematician

[10:50] *** Xliff left
[10:51] <tbrowder> i'm going back to the drawing board.

[10:52] *** Ven_de_Thiel joined
[10:52] <tbrowder> btw, Modf was published yesterday and it is essentially the same as the pr if anyone wants to see or play with it.

[10:53] <tbrowder> it's in the new zef ecosystem

[11:02] <tbrowder> lizmat: i just tried a simple size check for x > 123456789 and all tests worked, including the problem children  melezhik found

[11:02] *** linkable6 left
[11:03] <tbrowder> so is there a simple test for largest Num?

[11:05] *** linkable6 joined
[11:11] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/06/29/2021-26-r3/

[11:11] <tbrowder> m: my $x=123456789123456789; say $x.ACCEPTS($x)

[11:11] <camelia> rakudo-moar eab780f38: OUTPUT: «True␤»

[11:13] <tbrowder> m: my $x=123456789123456789; say ($x.Num).ACCEPTS($x);

[11:13] <camelia> rakudo-moar eab780f38: OUTPUT: «True␤»

[11:15] <lizmat> if it's larger than 18446744073709551616 ?

[11:15] <tbrowder> m: my $x=123456789123456789; say $x.narrow

[11:15] <camelia> rakudo-moar eab780f38: OUTPUT: «123456789123456789␤»

[11:16] *** linkable6 left
[11:16] <tbrowder> m: my $x=123456789123456789; say $x.narrow.^name

[11:16] <camelia> rakudo-moar eab780f38: OUTPUT: «Int␤»

[11:17] *** linkable6 joined
[11:27] <tbrowder> m: my $x=123456789123456789.2; my $r=$x.Int; my $f=$x-$r; say $r; say sprintf('%.*f', 100, $f);

[11:27] <camelia> rakudo-moar eab780f38: OUTPUT: «123456789123456789␤0.2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000␤»

[11:31] <lizmat> afk for a few hours&

[11:57] *** dogbert11 joined
[11:57] *** dogbert17 left
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:33] *** frost left
[13:03] *** kawaii left
[13:21] *** kawaii_ joined
[15:16] *** patrickb left
[15:26] <[TuxCM]> Rakudo v2021.06-27-geab780f38 (v6.d) on MoarVM 2021.06-6-g6977d0591

[15:26] <[TuxCM]> csv-test-xs-20      0.389 -  0.390

[15:26] <[TuxCM]> csv-ip5xs           0.895 -  0.910

[15:26] <[TuxCM]> test-t --race       0.926 -  0.982

[15:26] <[TuxCM]> test-t              2.160 -  2.205

[15:26] <[TuxCM]> test                8.443 -  8.802

[15:26] <[TuxCM]> csv-ip5xs-20        9.281 -  9.580

[15:26] <[TuxCM]> test-t-20 --race   10.169 - 11.175

[15:26] <[TuxCM]> csv-parser         28.939 - 29.371

[15:26] <[TuxCM]> test-t-20          35.634 - 37.041

[16:44] *** Ven_de_Thiel left
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[19:35] <[Coke]> looks like we can remove  EXPORT::collation from lib/experimental.rakumod now?

[21:05] *** m6502 joined
[21:12] *** m6502 left
[22:03] *** AlexDaniel joined
[22:12] *** AlexDaniel left
[22:28] *** AlexDaniel joined
[22:33] *** m6502 joined
[22:36] *** m6502 left
[22:36] *** jgaz joined
[22:58] *** jgaz left
