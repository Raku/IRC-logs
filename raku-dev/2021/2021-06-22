[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:37] *** nine left
[00:37] *** nine joined
[01:37] *** quotable6 left
[01:37] *** benchable6 left
[01:37] *** linkable6 left
[01:37] *** committable6 left
[01:37] *** notable6 left
[01:37] *** squashable6 left
[01:37] *** nativecallable6 left
[01:37] *** unicodable6 left
[01:37] *** reportable6 left
[01:37] *** coverable6 left
[01:37] *** bloatable6 left
[01:37] *** shareable6 left
[01:37] *** releasable6 left
[01:37] *** tellable6 left
[01:37] *** sourceable6 left
[01:37] *** greppable6 left
[01:37] *** statisfiable6 left
[01:37] *** bisectable6 left
[01:37] *** evalable6 left
[01:38] *** sourceable6 joined
[01:38] *** committable6 joined
[01:38] *** unicodable6 joined
[01:38] *** evalable6 joined
[01:38] *** notable6 joined
[01:39] *** quotable6 joined
[01:39] *** reportable6 joined
[01:39] *** tellable6 joined
[01:39] *** nativecallable6 joined
[01:39] *** benchable6 joined
[01:40] *** bisectable6 joined
[01:40] *** statisfiable6 joined
[01:40] *** linkable6 joined
[01:40] *** shareable6 joined
[01:40] *** bloatable6 joined
[01:40] *** squashable6 joined
[01:41] *** releasable6 joined
[01:41] *** coverable6 joined
[01:41] *** greppable6 joined
[02:11] *** nine left
[02:11] *** camelia left
[02:12] *** camelia joined
[02:12] *** nine joined
[03:43] *** linkable6 left
[03:43] *** evalable6 left
[03:44] *** evalable6 joined
[03:45] *** linkable6 joined
[04:00] *** frost joined
[06:03] *** reportable6 left
[06:04] *** reportable6 joined
[09:13] *** evalable6 left
[09:13] *** linkable6 left
[09:14] *** evalable6 joined
[09:14] *** linkable6 joined
[10:36] *** evalable6 left
[10:36] *** linkable6 left
[10:38] *** linkable6 joined
[10:39] *** evalable6 joined
[11:57] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/06/22/2021-25-small-steps/

[11:58] <lizmat> with apologies for being 1 day late

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:10] *** frost left
[12:33] <Altai-man> lizmat++ # thanks a lot!

[13:54] *** frost joined
[14:20] *** frost left
[17:21] *** melezhik joined
[17:22] <melezhik> .tell lizmat maybe I am missing the point, however my tests do not show performance increase for https://twitter.com/liztormato/status/1397840048448548864 , see  https://gist.github.com/melezhik/26d77b06bdd532e8753ca0c978768e20

[17:22] <tellable6> melezhik, I'll pass your message to lizmat

[17:23] <melezhik> oh, maybe I just test it wrong ...)))

[17:25] <melezhik> the last comment in gist

[18:03] *** reportable6 left
[18:04] *** reportable6 joined
[18:26] <lizmat> melezhik: maybe because https://github.com/rakudo/rakudo/commit/0de28ae72df824d9314bbbc2239269d69cba1b47 makes that basically happen automatically now ?

[18:29] <melezhik> lizmat: I mean I tested this against various Rakudo versions and they all give comparable times ... 

[18:30] <lizmat> what is the exact check that you use ?

[18:32] <melezhik> https://gist.github.com/melezhik/b291f58fb648e4f6e4f679346ab0b97e

[18:32] <melezhik> it's seen in report

[18:32] <melezhik> maybe is too naive but `time $RAKUBIN -e 'my $txt = slurp "/usr/share/dict/words"; for (1..10) { my (@m) = $txt.grep( { m:i/ <!after i> e / } ) }'`

[18:33] <melezhik> and then just compare times

[18:35] <melezhik> oh, may be I just need to increase loop, to eliminate rakudo start time factor ? so that we see the ration for big times ? 

[18:36] <lizmat> so what is the other code ?

[18:36] <melezhik> other?

[18:37] <lizmat> that version, versus a version that uses .contains ?

[18:38] <melezhik> oh .contain, I missed the point, sorry )))

[18:38] <melezhik> let me change my test, sure

[18:41] <lizmat> :-)

[18:44] <melezhik> I took as old grep.regexp should work faster ...

[18:45] <melezhik> now looks good to me - https://gist.github.com/melezhik/b291f58fb648e4f6e4f679346ab0b97e#gistcomment-3789308

[18:46] <lizmat> and with .grep( /:i <!after i> e / )   ?

[18:46] <lizmat> that should be a little faster still ?

[18:47] <melezhik> you see both times in one case

[18:48] <melezhik> report formatting is not perfect, but you want to see in between 'grep' .. 'end' - "standard" version and  'grep.containts' 'end' - improved, faster version 

[18:49] <melezhik> I'd tweak my test so it compares times and fails if the grep.contains version time is bigger then grep.({}) time

[18:50] <melezhik> > that should be a little faster still ? - I guess it is, if you talk about older Rakudo versions

[18:50] <melezhik> you can always run this by r3 :]  this is why the tool exists

[19:05] <melezhik> https://gist.github.com/melezhik/8a74d4b45ac00736d82a3f0b08367339

[19:07] <lizmat> I think that you will find that the .contains performs relatively better on a regex that isn't as expensive

[19:08] <melezhik> so, to make it clear, "Make .grep(Regex) and .first(Regex) about 40% faster" what should we measure here? times for different rakudo versions or?

[19:09] <melezhik> I guess `grep(.*contains)` is not relevant for https://github.com/rakudo/rakudo/pull/4383 right?

[19:10] <lizmat> also, I think the original benchmark was more about checking each word in the list, rather than checking whether there is *a* word

[19:11] <lizmat> indeed, you might want to check a before the merge and after ?

[19:11] <melezhik> I do ... I use 2020_12 against 2021_06 ...

[19:12] <lizmat> ok

[19:12] <melezhik> if you tell me the correct code for check

[19:12] <lizmat> :-), sorry am a bit distracted with other stuff happening

[19:12] <melezhik> NP

[19:13] <melezhik> I was under impression that original twitter code is good for test - `my $txt = slurp "/usr/share/dict/words"; for (1..1000) { my (@m) = $txt.grep( { m:i/ <!after i> e / } ) }` , right?

[19:13] <lizmat> .grep( /:i <!after i> e / )

[19:14] <melezhik> ok

[19:14] <lizmat> only *then* are you passing a Regex as the test to .grep

[19:14] <lizmat> { m:i/ <!after i> e / } is passing a Callable

[19:15] <melezhik> ok, I see

[19:15] <melezhik> let me modify test

[20:43] <melezhik> lizmat - https://gist.github.com/melezhik/a147c176b607f643806f2ceded5cb864

[20:44] <melezhik> I am still not sure why 2020_12 beat 2021_06 in that test ... 

[20:52] <MasterDuke> i believe the new coercion protocol was merged after 2020_12 and that caused some slowdowns in a lot of places. 2021_05 would likely be slower than 2021_06

[20:53] <melezhik> it's easy to check with r3 tool

[20:53] <melezhik> let me do this

[20:57] <melezhik> weird, but 2021_05 appears to be faster then 2021_06 - https://gist.github.com/melezhik/a147c176b607f643806f2ceded5cb864#gistcomment-3789446

[20:58] <melezhik> or I miss something in my test

[21:06] <lizmat> Built on MoarVM version 2021.05. vs Built on MoarVM version 2021.06   ??

[21:08] <MasterDuke> c: HEAD say lines().elems

[21:08] <committable6> MasterDuke, ¦HEAD(37dd25f): «10␤»

[21:09] <MasterDuke> c: HEAD say lines.join.chars

[21:09] <committable6> MasterDuke, ¦HEAD(37dd25f): «490␤»

[21:11] <MasterDuke> c: HEAD my $t = lines.join; $t.grep( /:i <!after i> e / ) for 1..1000; say now - INIT now

[21:11] <committable6> MasterDuke, ¦HEAD(37dd25f): «0.130523028␤»

[21:11] <MasterDuke> c: HEAD my $t = lines.join; $t.grep( /:i <!after i> e / ) for 1..10_000; say now - INIT now

[21:11] <committable6> MasterDuke, ¦HEAD(37dd25f): «0.92320538␤»

[21:11] <MasterDuke> c: 2021.05,2021.06 my $t = lines.join; $t.grep( /:i <!after i> e / ) for 1..50_000; say now - INIT now

[21:12] <committable6> MasterDuke, ¦2021.05: «4.686483287␤» ¦2021.06: «4.081395001␤»

[21:12] <MasterDuke> c: HEAD my $t = lines.join; $t.grep( /:i <!after i> e / ).elems.say

[21:12] <committable6> MasterDuke, ¦HEAD(37dd25f): «1␤»

[21:14] <MasterDuke> c: HEAD my @t = words; @t.grep( /:i <!after i> e / ).elems.say

[21:14] <committable6> MasterDuke, ¦HEAD(37dd25f): «1␤»

[21:15] <MasterDuke> c: 2021.05,2021.06 my @t = words; @t.grep( /:i <!after i> e / ) for 1..50_000; say now - INIT now

[21:15] <committable6> MasterDuke, ¦2021.05,2021.06: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[21:15] <MasterDuke> c: 2021.05,2021.06 my @t = words; @t.grep( /:i <!after i> e / ) for 1..1_000; say now - INIT now

[21:15] <committable6> MasterDuke, ¦2021.05: «1.178698748␤» ¦2021.06: «0.830773224␤»

[21:16] <Altai-man> releasable6, status

[21:16] <releasable6> Altai-man, Next release in ≈30 days and ≈21 hours. 1 blocker. Changelog for this release was not started yet

[21:16] <releasable6> Altai-man, Details: https://gist.github.com/23f353c67303b169897596d5c5dac01f

[21:16] <MasterDuke> so committable6 thinks 2021.06 is faster

[21:17] <MasterDuke> benchable6: 2021.05,2021.06 my @t = words; @t.grep( /:i <!after i> e / ) for 1..1_000

[21:17] <benchable6> MasterDuke, starting to benchmark the 2 given commits

[21:17] <benchable6> MasterDuke, ¦2021.05: «1.2089» ¦2021.06: «0.9567»

[21:17] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[21:17] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[21:18] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[21:18] <benchable6> MasterDuke, ¦2021.05: «1.2089» ¦faec804: «0.9722» ¦48de177: «0.9487» ¦2021.06: «0.9567»

[21:20] <MasterDuke> benchable6: 2021.05,2021.06 my @t = words; @t.grep( *.contains(/:i <!after i> e /) ) for 1..1_000

[21:20] <benchable6> MasterDuke, starting to benchmark the 2 given commits

[21:20] <benchable6> MasterDuke, ¦2021.05: «1.1604» ¦2021.06: «1.1165»

[21:20] <benchable6> MasterDuke, No new data found

[21:26] <melezhik> MasterDuke hm. I

[21:26] <lizmat> sleep&

[21:27] <melezhik> I have rewritten the test using `now - INIT now`, still 2020_05 is faster then 2021_06, strange ... - https://gist.github.com/melezhik/a147c176b607f643806f2ceded5cb864

[21:27] <melezhik> ^^ MasterDuke

[21:28] <melezhik> https://gist.github.com/melezhik/a147c176b607f643806f2ceded5cb864#gistcomment-3789473

[21:28] <MasterDuke> well, committable6 has a small text it working against. so maybe whether it matches or not many times makes a difference

[21:29] <MasterDuke> i.e., 2021.06 is faster when it doesn't match frequently, but 2021.05 is faster when it does?

[21:30] <melezhik> I don't know I use dictionary installed as `yum install words` in my centos ... at least what I can tell 

[21:33] <melezhik> how can I get committable6  words? btw

[21:36] <MasterDuke> c: HEAD words.say

[21:36] <committable6> MasterDuke, https://gist.github.com/0d5699f14e90c1437188051babbdae37

[21:37] <MasterDuke> it's just a bunch of random-ish stuff i believe

[21:39] <AlexDaniel> c: HEAD words.grep(/\w/).say

[21:39] <committable6> AlexDaniel, ¦HEAD(37dd25f): «(hello world 4𝟮)␤»

[21:40] <AlexDaniel> c: HEAD say +words

[21:40] <committable6> AlexDaniel, ¦HEAD(37dd25f): «100␤»

[21:40] <AlexDaniel> c: HEAD say +lines

[21:40] <committable6> AlexDaniel, ¦HEAD(37dd25f): «10␤»

[21:40] <AlexDaniel> not entirely random :)

[21:40] <AlexDaniel> but yes

[21:41] <AlexDaniel> perhaps too unicodey

[21:41] <AlexDaniel> committable6: stdin hello world this is just some normal text

[21:41] <committable6> AlexDaniel, STDIN is set to «hello world this is just some normal text»

[21:41] <AlexDaniel> c: HEAD dd words

[21:41] <committable6> AlexDaniel, ¦HEAD(37dd25f): «("hello", "world", "this", "is", "just", "some", "normal", "text").Seq␤»

[21:41] <AlexDaniel> 😌

[21:43] <melezhik> Uploaded file: https://uploads.kiwiirc.com/files/70194ef823d931bdc7e84074856f6e16/pasted.txt

[21:44] <melezhik> MasterDuke 2021_06 is still slower then 2021_05 for committable6 words - https://gist.github.com/melezhik/a147c176b607f643806f2ceded5cb864#gistcomment-3789490

[21:45] <MasterDuke> huh. maybe moarvm compilation options? OS or compiler differences?

[21:45] <melezhik> I can add diag info to test, but these are whatevetable: distros 

[21:46] <melezhik> I run on the same environment btw

[21:46] <melezhik> the same docker container

[21:50] <MasterDuke> yeah, it might just be some difference between how the whateverable builds are built and how your containers are built

[21:52] <melezhik> I don't know, but why does this matter, I assumed that claimed performance increase should be invariant for a target environment? 

[21:53] <melezhik> btw anyone could spin up r3 and test it on their laptop/whatever , it's dead easy

[21:53] <melezhik> anyway ... interesting )))

[22:32] *** guifa joined
[22:35] <guifa> Okay, so first time wanting to use roast to check to make sure my Dateish work doesn't mess anything up. I'm seeing several varieties of 'fudge'.  Is that what I'll use to run all of the tests?

[22:36] <[Coke]> Are you running the tests from a rakudo build? If so 'make spectest' works.

[22:36] <[Coke]> (that'll do all the magic to run the tests)

[22:36] <[Coke]> Or do you have a pre-installed rakudo that you want to run against a standalone roast?

[22:39] <guifa> Wanting to run the tests from a local build of Rakudo 

[22:41] <[Coke]> try "make spectest" or "make stresstest"

[22:41] <[Coke]> that should checkout roast, update it, and run all the tests.

[22:41] <[Coke]> (stress runs the longer running tests also)

[22:41] *** melezhik left
[22:45] <guifa> Hrm.  Dangit, error on building MoarVM. 

[22:56] <guifa> [Coke]: Error while compiling, type X::Declaration::OurScopeInRole

[22:56] <guifa>   declaration: constant

[22:56] <guifa>  at line 58198, near ";\nconstant"

[22:57] <[Coke]> O_o;

[22:57] <[Coke]> are you building moarvm by itself or as a result of "perl Configure.pl" in a rakudo checkout?

[22:58] <[Coke]> that string "X::Declaration::OurScopeInRole" isn't in the MoarVM source, I don't think.

[22:59] <[Coke]> I do see it in Rakudo source, though.

[22:59] <[Coke]> afk

[23:01] <guifa> Part of the make after perl Configure.pl 

[23:22] <Geth> ¦ rakudo: codesections++ created pull request #4425: Fix unimatch for non-base properties

[23:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4425

[23:25] *** m6502 joined
[23:38] <Geth> ¦ rakudo/master: 5 commits pushed by (Vadim Belman)++

[23:38] <Geth> ¦ rakudo/master: 8eae05b9f7 | Fix freezes caused by concurrently produced iterators

[23:38] <Geth> ¦ rakudo/master: 2d396ae7d1 | Fix potential race condition

[23:38] <Geth> ¦ rakudo/master: 6e66c2e501 | Turn $!has-iterator into an atomicint

[23:38] <Geth> ¦ rakudo/master: 24b0df8a5b | Fix JVM build

[23:38] <Geth> ¦ rakudo/master: 772711ad3b | Merge pull request #4416 from vrurg/rakudo_4413

[23:38] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/37dd25f68359...772711ad3bee

[23:38] <Geth> ¦ roast/master: 4 commits pushed by (Vadim Belman)++

[23:38] <Geth> ¦ roast/master: 5c7eab0797 | Add tests for hyper/race throwing on second .iterator

[23:38] <Geth> ¦ roast/master: 9813df794f | Unfudge a test

[23:38] <Geth> ¦ roast/master: b32906fef0 | Add a test of hyper/race iterator method thread-safety

[23:38] <Geth> ¦ roast/master: 54b91c2991 | Merge pull request #738 from vrurg/rakudo_4413

[23:38] <Geth> ¦ roast/master: review: https://github.com/Raku/roast/compare/b807e27ebf23...54b91c29911a

