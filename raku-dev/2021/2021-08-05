[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:36] *** Xliff joined
[00:40] *** squashable6 left
[01:40] *** evalable6 left
[01:40] *** linkable6 left
[01:41] *** linkable6 joined
[01:42] *** evalable6 joined
[02:02] <Geth> ¦ rakudo: vrurg++ created pull request #4487: Re-compose native types

[02:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4487

[02:42] *** squashable6 joined
[03:30] *** squashable6 left
[03:32] *** squashable6 joined
[05:32] *** casaca left
[05:38] *** casaca joined
[05:39] *** casaca left
[05:42] *** casaca joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:38] *** ilogger2 left
[06:39] *** ilogger2 joined
[06:40] *** patrickb joined
[07:00] *** patrickb left
[07:16] *** Xliff left
[07:33] *** frost joined
[08:03] <Geth> ¦ rakudo: a8a78132e2 | (Vadim Belman)++ | src/core.c/core_epilogue.pm6

[08:03] <Geth> ¦ rakudo: Re-compose native types

[08:03] <Geth> ¦ rakudo: 

[08:03] <Geth> ¦ rakudo: They're created with uncomposed, incomplete parents. Thus they fail

[08:03] <Geth> ¦ rakudo: typematching against roles like Numeric, Real, Stringy.

[08:03] <Geth> ¦ rakudo: 

[08:03] <Geth> ¦ rakudo: Fixes rakudo/rakudo#4485

[08:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a8a78132e2

[08:04] <Geth> ¦ rakudo: 2c0343b5bb | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/core_epilogue.pm6

[08:04] <Geth> ¦ rakudo: Merge pull request #4487 from vrurg/rakudo_4485

[08:04] <Geth> ¦ rakudo: 

[08:04] <Geth> ¦ rakudo: Re-compose native types

[08:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2c0343b5bb

[08:04] *** linkable6 left
[09:04] *** evalable6 left
[09:05] *** evalable6 joined
[09:07] *** linkable6 joined
[09:38] *** Xliff joined
[10:01] <gfldex> https://github.com/rakudo/rakudo/pull/4460 could do with a review and if fine, merging

[10:47] *** sena_kun joined
[10:53] <lizmat> gfldex: doesn't changing the proto cause test failures ?

[10:54] <gfldex> lizmat: not for me. I believe this is thanks to most //,&&,||,^^ in roast never call the actual operators but are handled by internal macros.

[10:55] <lizmat> also "make test" ?

[10:55] <gfldex> make test is fine too.

[10:56] <gfldex> You have to use &infix:<//> to acutally use them. Hence the issue only popped up when somebody tried to .reduce(&infix:<&&>) .

[10:58] <gfldex> The only operator that was already defined for lists of values in 6.c was infix:<^^>. 

[11:02] *** Xliff left
[12:02] *** reportable6 left
[12:05] *** Xliff joined
[13:05] *** reportable6 joined
[14:19] *** evalable6 left
[14:19] *** linkable6 left
[14:19] *** evalable6 joined
[14:35] *** frost left
[15:20] *** linkable6 joined
[16:50] *** linkable6 left
[16:50] *** evalable6 left
[17:16] *** sena_kun left
[17:52] *** linkable6 joined
[17:53] *** evalable6 joined
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[20:15] *** SmokeMachine_ left
[20:19] <Kaiepi> i've been stuck on this sort of typecheck for a while now

[20:20] <Kaiepi> m: say Buf ~~ Buf[uint8]

[20:20] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «False␤»

[20:21] <Kaiepi> should roles be concerning themselves with the values the body block winds up with over the arguments the user provides to begin with?

[20:22] <Kaiepi> since that seems necessary for this to be true without making Buf ~~ Buf[uint16] etc. in the process

[20:24] <Kaiepi> or rather, Buf.^parameterize

[20:26] <Kaiepi> i'm not sure the last typecheck i mention in https://github.com/rakudo/rakudo/pull/4478#issuecomment-888725774 is valid if it needs so much weirdness in order to work

[20:42] *** SmokeMachine_ joined
[20:46] <gfldex> Kaiepi: I expect that to be False. A Buf is a buf8 in potentia. Being member of the group is no the same thing as being the group.

[20:52] <Kaiepi> gfldex, thing is role groups typecheck like their nonsignatured candidate, so

[20:52] <Kaiepi> m: say Buf ~~ Blob[uint8]

[20:52] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «False␤»

[20:52] <Kaiepi> ahh

[20:52] <Kaiepi> ok

[20:52] <Kaiepi> i diverged somewhere

[20:53] <Kaiepi> wait, no

[20:53] <Kaiepi> m: say Buf.^parameterize ~~ Blob[uint8]

[20:53] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «True␤»

[20:53] <gfldex> m: say buf8 ~~ Buf;

[20:53] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «True␤»

[20:54] <Kaiepi> m: say Buf.^parameterize ~~ Buf[uint8]

[20:54] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «False␤»

[20:54] <Kaiepi> m: say Buf.new ~~ Buf[uint8].new

[20:54] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «True␤»

[20:54] <Kaiepi> m: say Buf.^parameterize.new ~~ Buf[uint8].new

[20:54] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «True␤»

[20:55] <Kaiepi> oh

[20:55] <Kaiepi> m: say Buf[uint16].new ~~ Buf[uint8].new

[20:55] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «True␤»

[20:56] <gfldex> the last one feels wrong

[20:58] <Kaiepi> m: say Buf[uint16].new eqv Buf[uint8].new

[20:58] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «False␤»

[20:58] <Kaiepi> m: say Buf[uint8].new eqv Buf[uint8].new

[20:58] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «True␤»

[20:59] <Kaiepi> m: say Buf.new eqv Buf[uint8].new

[20:59] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «False␤»

[21:32] *** discord-raku-bot left
[21:32] *** discord-raku-bot joined
