[00:03] *** reportable6 left
[00:32] *** rba[m] left
[00:32] *** AlexDaniel left
[00:33] *** AlexDaniel joined
[00:42] *** rba[m] joined
[02:04] *** reportable6 joined
[03:44] *** squashable6 left
[03:45] *** squashable6 joined
[05:06] *** SmokeMachine left
[05:06] *** jjatria left
[05:06] *** SmokeMachine_ joined
[05:06] *** jjatria_ joined
[05:06] *** jjatria_ is now known as jjatria

[06:04] *** reportable6 left
[06:07] *** reportable6 joined
[07:51] <MasterDuke> vrurg: do you have any ideas for how to optimize https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/CoercionHOW.nqp#L115-L216 ?

[08:27] *** frost joined
[09:14] <Geth> ¬¶ roast: 047d253ce6 | (Elizabeth Mattijsen)++ | S06-multi/unpackability.t

[09:14] <Geth> ¬¶ roast: Mark suspect test on master as "skip"

[09:14] <Geth> ¬¶ roast: 

[09:14] <Geth> ¬¶ roast: This appears to have been fixed on new-disp, but either hangs on

[09:14] <Geth> ¬¶ roast: master, or produces the incorrect result.

[09:14] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/047d253ce6

[09:24] <Geth> ¬¶ rakudo: ffde2ba23e | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[09:24] <Geth> ¬¶ rakudo: Simplify R:I.While

[09:24] <Geth> ¬¶ rakudo: 

[09:24] <Geth> ¬¶ rakudo: The contract is that once an iterator has produced IterationEnd, it

[09:24] <Geth> ¬¶ rakudo: should not be called again.  So we don't need to shield against that.

[09:24] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/ffde2ba23e

[10:11] *** linkable6 left
[10:11] *** evalable6 left
[11:13] *** evalable6 joined
[12:02] *** reportable6 left
[12:07] *** TempIRCLogger joined
[12:12] *** linkable6 joined
[13:12] *** evalable6 left
[13:12] *** linkable6 left
[13:13] *** evalable6 joined
[13:21] <vrurg> MasterDuke: not really. It fits well into new-disp, I hoped to replace it with a dispatcher at some point.

[13:55] *** kjp left
[13:57] *** kjp joined
[14:02] <vrurg> MasterDuke: at the second thought some caching could be done which may improve repetitive coercions. Then again, it wouldn't make sense with new-disp then.

[14:02] *** frost left
[14:03] *** reportable6 joined
[14:13] *** linkable6 joined
[15:25] *** evalable6 left
[15:25] *** linkable6 left
[15:26] *** evalable6 joined
[15:27] *** linkable6 joined
[16:21] <nine> weekly: https://lwn.net/Articles/865037/

[16:21] <notable6> nine, Noted! (weekly)

[17:40] *** evalable6 left
[17:40] *** linkable6 left
[17:41] *** linkable6 joined
[17:41] *** evalable6 joined
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:31] *** raydiak_ is now known as raydiak

[19:09] *** melezhik joined
[19:18] *** melezhik left
[20:18] *** evalable6 left
[20:18] *** linkable6 left
[20:19] *** evalable6 joined
[21:11] <vrurg> m: use nqp; sub foo($a) { say "[", nqp::objectid($a.VAR), " ", $a.VAR.WHICH, "] "; }; foo(1); foo(2);

[21:11] <camelia> rakudo-moar ffde2ba23: OUTPUT: ¬´[81037904 Scalar|28640512] ‚ê§[71645072 Scalar|28640512] ‚ê§¬ª

[21:12] <vrurg> Any idea why .WHICH outcome is the same?

[21:14] <MasterDuke> c: releases sub foo($a) { $a.VAR.WHICH }; say foo(1) eq foo(2)

[21:14] <committable6> MasterDuke, https://gist.github.com/8ede6ffddb0cf7ee2a4b01b66e47fa17

[21:14] <MasterDuke> bisectable6: old=2016.09 new=2016.10 sub foo($a) { $a.VAR.WHICH }; say foo(1) eq foo(2)

[21:14] <bisectable6> MasterDuke, Bisecting by output (old=2016.09 new=2016.10) because on both starting points the exit code is 0

[21:15] <bisectable6> MasterDuke, bisect log: https://gist.github.com/c360babc3a3ab57e35816364e58f2ab9

[21:15] <bisectable6> MasterDuke, (2016-10-12) https://github.com/rakudo/rakudo/commit/cff3437de58ef36a9a2a84915ee9181643af4348

[21:15] <MasterDuke> c: releases sub foo($a) { return $a.VAR.WHICH }; say foo(1) eq foo(2)

[21:16] <committable6> MasterDuke, ¬¶releases (56 commits): ¬´True‚ê§¬ª

[21:16] <MasterDuke> interesting

[21:17] <vrurg> A dynamic variable breaks inlining. But adding `my $*dyn` into the sub haven't changed the outcome either.

[21:18] *** Kaipi joined
[21:18] <vrurg> MasterDuke: do you think it worth an issue?

[21:19] *** Kaiepi left
[21:19] <MasterDuke> dunno

[21:19] <MasterDuke> at least the behavior is consistent now

[21:20] <vrurg> What worries me is that one can't trust high-level introspection which is really bad for debugging.

[21:21] *** linkable6 joined
[21:51] <vrurg> .ask lizmat what was the reason to make Scalar.WHICH work against $!descriptor in 329adf8c239c2325d6bcb6c5949501dac52ee132? Why self isn't acceptable?

[21:51] <tellable6> vrurg, I'll pass your message to lizmat

[22:21] *** evalable6 left
[22:21] *** tellable6 left
[22:21] *** linkable6 left
[22:24] *** evalable6 joined
[22:59] <lizmat> .

[22:59] <lizmat> .tell vrurg that's from 7 years ago, I have no idea

[23:00] <vrurg> lizmat: I'm thinking about it, but currently it looks like WHICH is totally incorrect.

[23:01] <vrurg> It proclaims Scalar to be a value object, but addresses not $!value but $!descriptor.

[23:02] <lizmat> perhaps because all Scalars that have the same descriptor, are basically the same from a value type of view?

[23:03] <lizmat> it should definitely *not* be about the value in there

[23:03] <lizmat> will sleep on it&

[23:03] <vrurg> I also agree it shouldn't be value. But it must not be the descriptor either.

[23:04] <vrurg> And so, the Scalar is not a value object after all.

[23:04] <vrurg> lizmat: g'night.

[23:24] *** MasterDuke left
[23:24] *** tellable6 joined
