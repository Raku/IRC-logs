[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[02:10] *** benchable6 left
[02:10] *** nativecallable6 left
[02:10] *** notable6 left
[02:10] *** coverable6 left
[02:10] *** reportable6 left
[02:10] *** quotable6 left
[02:10] *** unicodable6 left
[02:10] *** releasable6 left
[02:10] *** shareable6 left
[02:10] *** linkable6 left
[02:10] *** committable6 left
[02:10] *** squashable6 left
[02:10] *** bisectable6 left
[02:10] *** sourceable6 left
[02:10] *** statisfiable6 left
[02:10] *** evalable6 left
[02:10] *** greppable6 left
[02:10] *** tellable6 left
[02:10] *** bloatable6 left
[02:11] *** sourceable6 joined
[02:11] *** benchable6 joined
[02:11] *** nativecallable6 joined
[02:12] *** bloatable6 joined
[02:12] *** shareable6 joined
[02:12] *** linkable6 joined
[02:12] *** reportable6 joined
[02:12] *** squashable6 joined
[02:12] *** tellable6 joined
[02:12] *** bisectable6 joined
[02:13] *** evalable6 joined
[02:13] *** unicodable6 joined
[02:13] *** releasable6 joined
[02:13] *** statisfiable6 joined
[02:13] *** coverable6 joined
[02:13] *** quotable6 joined
[02:13] *** greppable6 joined
[02:13] *** committable6 joined
[02:14] *** notable6 joined
[02:53] *** frost joined
[02:58] *** MasterDuke left
[03:58] *** committable6 left
[03:58] *** bloatable6 left
[03:58] *** bisectable6 left
[03:58] *** unicodable6 left
[03:58] *** quotable6 left
[03:58] *** evalable6 left
[03:58] *** notable6 left
[03:58] *** coverable6 left
[03:58] *** shareable6 left
[03:58] *** benchable6 left
[03:58] *** greppable6 left
[03:59] *** committable6 joined
[03:59] *** shareable6 joined
[03:59] *** greppable6 joined
[03:59] *** quotable6 joined
[04:00] *** benchable6 joined
[04:01] *** bisectable6 joined
[04:01] *** unicodable6 joined
[04:01] *** coverable6 joined
[04:01] *** evalable6 joined
[04:01] *** notable6 joined
[04:01] *** bloatable6 joined
[05:01] *** notable6 left
[05:01] *** evalable6 left
[05:01] *** bloatable6 left
[05:01] *** unicodable6 left
[05:01] *** quotable6 left
[05:01] *** nativecallable6 left
[05:01] *** linkable6 left
[05:01] *** greppable6 left
[05:01] *** coverable6 left
[05:01] *** releasable6 left
[05:01] *** tellable6 left
[05:01] *** committable6 left
[05:01] *** sourceable6 left
[05:01] *** shareable6 left
[05:01] *** reportable6 left
[05:01] *** statisfiable6 left
[05:01] *** bisectable6 left
[05:01] *** squashable6 left
[05:01] *** benchable6 left
[05:02] *** releasable6 joined
[05:02] *** nativecallable6 joined
[05:02] *** reportable6 joined
[05:02] *** benchable6 joined
[05:02] *** unicodable6 joined
[05:02] *** notable6 joined
[05:02] *** sourceable6 joined
[05:03] *** statisfiable6 joined
[05:03] *** evalable6 joined
[05:03] *** tellable6 joined
[05:03] *** quotable6 joined
[05:04] *** greppable6 joined
[05:04] *** committable6 joined
[05:04] *** linkable6 joined
[05:04] *** bloatable6 joined
[05:04] *** coverable6 joined
[05:04] *** bisectable6 joined
[05:04] *** shareable6 joined
[05:04] *** squashable6 joined
[05:14] *** Kaiepi left
[05:33] *** Kaiepi joined
[05:38] *** Kaiepi left
[05:43] *** Kaiepi joined
[05:51] *** Kaiepi left
[05:53] *** Kaiepi joined
[05:58] *** Kaiepi left
[06:00] *** Kaiepi joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:23] *** Kaiepi left
[06:23] *** Kaipi joined
[06:30] *** Kaipi left
[06:30] *** Kaiepi joined
[06:47] *** Kaiepi left
[06:53] *** Kaiepi joined
[07:44] *** patrickb joined
[07:59] *** Kaiepi left
[08:00] *** Kaiepi joined
[08:39] *** Kaipi joined
[08:40] *** Kaiepi left
[09:43] <raydiak> tonyo: I find your lack of compromise distrubing. You implied that I knew nothing about the meta files beyond the search I linked, for no apparent reason. Now you're telling me that I'm changing the argument to win, which appears to be what you just did prior, while I am simply trying to address your stated concerns. Understand this VERY clearly: I am not having an argument, I'm actually trying actively to

[09:44] <raydiak> avoid such a thing. My ego has no need for your validation or anybody elses. If I just wanted to feel right regardless of actual fact, I simply wouldn't bother to talk about it. I am exploring an idea space, not having a flashback to debate class. If I misunderstood what you were saying then I am sorry, maybe we are simply communicating on very different levels. But I am trying the very best I know how, to

[09:44] <raydiak> address both my concerns and the opposite concerns of others including yourself, all simultaneously, which is an enormous task. I wish you had more respect for that position. From this point forward, I would appreciate it if we could keep this discussion pointed at the facts instead of the individuals. I'm not here to posture and sabre-rattle and if these dicussions have to be made into arguments which

[09:44] <raydiak> culminate in personal attacks, I will drop the whole thing entirely and keep my ideas to myself and my own compiler work outside of Raku in the future.

[09:44] <raydiak> The rest I will review and respond to tomorrow depending on the content of the backlog between now and then. Goodnight.

[10:20] *** linkable6 left
[10:20] *** evalable6 left
[10:20] *** linkable6 joined
[10:22] *** evalable6 joined
[10:29] <Geth> ¦ rakudo: 2efe4302c5 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[10:29] <Geth> ¦ rakudo: IterateOneWithPhasers handles empty iterators 20% faster

[10:29] <Geth> ¦ rakudo: 

[10:29] <Geth> ¦ rakudo: By letting .new return the Empty iterator if the first pull fails.

[10:29] <Geth> ¦ rakudo: 

[10:29] <Geth> ¦ rakudo: Example code: my @a; for @a { NEXT Nil }

[10:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2efe4302c5

[10:29] *** Xliff left
[10:30] *** Xliff joined
[10:46] <Geth> ¦ rakudo: 7f5f60e851 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[10:46] <Geth> ¦ rakudo: Remove Slip thinko

[10:46] <Geth> ¦ rakudo: 

[10:46] <Geth> ¦ rakudo: The source iterator may produce Slips, but they will be passed as

[10:46] <Geth> ¦ rakudo: such to the block, so we shouldn't be checking for this here.

[10:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7f5f60e851

[11:03] <Geth> ¦ nqp/new-disp: 32e2ad0262 | (Jonathan Worthington)++ | 2 files

[11:03] <Geth> ¦ nqp/new-disp: Replace use of smart-intify with a dispatcher

[11:03] <Geth> ¦ nqp/new-disp: 

[11:03] <Geth> ¦ nqp/new-disp: And along the way, tweak the smart-strify dispatcher to use some new

[11:03] <Geth> ¦ nqp/new-disp: more efficient ops for checking for unboxability.

[11:03] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/32e2ad0262

[11:32] *** dogbert17 joined
[11:33] *** MasterDuke joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:18] <Geth> ¦ nqp/new-disp: 1d632aea49 | (Jonathan Worthington)++ | 2 files

[12:18] <Geth> ¦ nqp/new-disp: Replace use of smart-numify with a dispatcher

[12:18] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/1d632aea49

[12:19] <Geth> ¦ rakudo/new-disp: 305d2708a4 | (Jonathan Worthington)++ | t/02-rakudo/99-misc.t

[12:19] <Geth> ¦ rakudo/new-disp: Correct a test relying on a changed impl detail

[12:19] <Geth> ¦ rakudo/new-disp: 

[12:19] <Geth> ¦ rakudo/new-disp: Prior to new-disp, mutliple dispatch worked by doing a trial bind of the

[12:19] <Geth> ¦ rakudo/new-disp: signature of a multi candidate containing a `where` clause. If it passed

[12:19] <Geth> ¦ rakudo/new-disp: then the candidate would be invoked "for real". This means that `where`

[12:19] <Geth> ¦ rakudo/new-disp: clauess would get evaluated twice on a successful candidate.

[12:19] <Geth> ¦ rakudo/new-disp: 

[12:19] <Geth> ¦ rakudo/new-disp: <…commit message has 10 more lines…>

[12:19] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/305d2708a4

[12:47] <Geth> ¦ rakudo/new-disp: ffede8cc0b | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[12:47] <Geth> ¦ rakudo/new-disp: Fix multi dispatch of a Proxy to an `is rw` param

[12:47] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/ffede8cc0b

[13:05] *** MasterDuke left
[13:06] *** MasterDuke joined
[13:47] *** patrickb left
[13:48] *** patrickb joined
[13:51] *** patrickb left
[13:52] *** patrickb joined
[13:53] *** patrickb left
[13:54] *** patrickb joined
[13:55] *** patrickb left
[13:56] *** patrickb joined
[13:57] *** patrickb left
[13:58] *** patrickb joined
[14:02] *** patrickb left
[14:02] *** patrickb joined
[14:05] <Geth> ¦ nqp/new-disp: 0d7f899d37 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp

[14:05] <Geth> ¦ nqp/new-disp: Fix compilation of regex Unicode property tests

[14:05] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/0d7f899d37

[14:05] <Geth> ¦ rakudo/new-disp: 9cd6395f80 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[14:05] <Geth> ¦ rakudo/new-disp: Add a missing type guard installation

[14:05] <Geth> ¦ rakudo/new-disp: 

[14:05] <Geth> ¦ rakudo/new-disp: When we do a multiple dispatch on a native reference, make sure to add a

[14:05] <Geth> ¦ rakudo/new-disp: type guard. If not, future dispatches will incorrectly end up using that

[14:05] <Geth> ¦ rakudo/new-disp: candidate.

[14:05] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/9cd6395f80

[14:16] *** patrickb left
[14:17] *** frost left
[14:17] *** patrickb joined
[14:17] *** MasterDuke77 joined
[14:18] *** MasterDuke left
[14:20] *** dogbert11 joined
[14:20] *** dogbert17 left
[14:23] *** patrickb left
[14:23] *** patrickb joined
[14:24] *** melezhik joined
[14:26] *** Xliff left
[14:27] *** Xliff joined
[14:32] *** patrickb left
[14:32] <Geth> ¦ rakudo/new-disp: 0a563aaeff | (Jonathan Worthington)++ | src/core.c/Metamodel/Primitives.pm6

[14:32] <Geth> ¦ rakudo/new-disp: Mark types created by MOP primitives as Raku types

[14:32] <Geth> ¦ rakudo/new-disp: 

[14:32] <Geth> ¦ rakudo/new-disp: So that method dispatch on the will work out.

[14:32] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/0a563aaeff

[14:32] <Geth> ¦ rakudo/new-disp: 7152630f93 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[14:32] <Geth> ¦ rakudo/new-disp: Fix X::Method::InvalidQualifier reporting

[14:32] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/7152630f93

[14:32] *** patrickb joined
[14:34] *** patrickb left
[14:34] *** patrickb joined
[14:38] *** patrickb left
[14:39] *** patrickb joined
[14:43] *** patrickb left
[14:43] *** patrickb joined
[14:49] *** patrickb left
[14:50] *** patrickb joined
[15:06] <[Tux]> Rakudo v2021.06-72-g7f5f60e85 (v6.d) on MoarVM 2021.06-17-g736154d29

[15:06] <[Tux]> csv-test-xs-20      0.385 -  0.395

[15:06] <[Tux]> csv-ip5xs           0.844 -  0.904

[15:06] <[Tux]> test-t --race       0.901 -  0.931

[15:06] <[Tux]> test-t              1.986 -  2.111

[15:06] <[Tux]> test                7.873 -  8.303

[15:06] <[Tux]> csv-ip5xs-20        8.782 -  8.896

[15:06] <[Tux]> test-t-20 --race   10.815 - 11.373

[15:06] <[Tux]> csv-parser         28.295 - 29.037

[15:06] <[Tux]> test-t-20          35.512 - 35.764

[15:10] *** patrickb left
[15:10] *** patrickb joined
[15:13] *** patrickb left
[15:26] *** patrickb joined
[15:29] <Geth> ¦ rakudo/new-disp: ded9a56141 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[15:29] <Geth> ¦ rakudo/new-disp: Ensure proxy readers are marked as thunks

[15:29] <Geth> ¦ rakudo/new-disp: 

[15:29] <Geth> ¦ rakudo/new-disp: Somewhat unfortunately this means we have to get rid of the blocks we

[15:29] <Geth> ¦ rakudo/new-disp: prepare ahead of time because there's no way to get those marked as

[15:29] <Geth> ¦ rakudo/new-disp: thunks. More unfortunately, this breaks the reproducible builds test

[15:29] <Geth> ¦ rakudo/new-disp: (although in a sense this is good, since less trivial programs would

[15:29] <Geth> ¦ rakudo/new-disp: have had problems with build reproducibility and we'd not have known

[15:29] <Geth> ¦ rakudo/new-disp: about it so soon).

[15:29] <Geth> ¦ rakudo/new-disp: 

[15:29] <Geth> ¦ rakudo/new-disp: This is needed so that they get skipped when walking the call chain.

[15:29] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/ded9a56141

[15:31] <raydiak> tonyo: While I still see valid concerns in my assessment a few hours ago, my statement was more pointed and less tactful than it could have been. I should have slept on it. I have frustrations with the state of raku and its community, which are making me more sensitive than I ought to be. Please accept my apologies. I should probably just take a good long break.

[15:42] <ugexe> i hope you are able to funnel your frustrations into the change you wish to see. frustration fueled the start of my larger involvement in raku and contributing to it

[16:16] *** squashable6 left
[16:18] *** squashable6 joined
[16:19] <Geth> ¦ nqp/new-disp: a0a1aad66f | (Jonathan Worthington)++ | src/HLL/sprintf.nqp

[16:19] <Geth> ¦ nqp/new-disp: Fix the sprintf fix

[16:19] <Geth> ¦ nqp/new-disp: 

[16:19] <Geth> ¦ nqp/new-disp: It's meant to pass the array value along to the panic. Not doing so

[16:19] <Geth> ¦ nqp/new-disp: means there's a string instead of an array in the hash Rakudo gets, and

[16:19] <Geth> ¦ nqp/new-disp: then it fails when trying to construct an exception object.

[16:19] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/a0a1aad66f

[16:24] *** MasterDuke77 left
[16:45] <raydiak> It would be good to put a positive spin on it, I agree. It's just that if I'm starting to point that frustration at other people, I hesitate to further involve myself here. There isn't anything that matters to me more than people and their feelings. And some things I really don't see myself as having much control over. Community policies and attitudes, things like that. Then I circle back and ask myself if

[16:45] <raydiak> it's really just my own attitude which needs adjustment.

[17:16] <ugexe> its unfortunate you would need the backing and knowledge of individuals whojaded to this specific area

[17:16] <ugexe> over the all the years

[17:16] <ugexe> but i will help however i can

[17:27] <tonyo> raydiak: you're fine, we both want to make it better and i'm fine with the tone of the conversation - i didn't take any offense

[17:29] <tonyo> differing ideas and discussion, be it sometimes heated, are how you make things better

[17:32] *** MasterDuke joined
[17:33] <raydiak> tonyo: thank you very much for your grace. I try very hard to be gentle to people and don't easily forgive myself when I fail at that, so you being so cool does my heart good

[17:34] <raydiak> ugexe: I really appreciate that. One of my complaints has been that I've floated a few of these test ballons over the past several months, looking at things which seem like they really obviously ought to change, and it has felt like I just can't get the backing or concensus for any change to be effected even if I were to do the work. So your support means a great deal to me

[17:50] *** patrickb left
[17:51] <raydiak> anyway, I will circle this back around to the technical discussion we were having originally at some point today. my attention is a bit divided atm

[17:52] <bartolin> raydiak: probably not something that could help with the things that frustrate you, but I'd like to mention that a couple of weeks (?) ago I was happy to see you being more active here. For me the friendly and inspiring people around #perl6 (back in the day) were (and are) even more important than the language itself. And you were one of those ;)

[17:54] <tonyo> raydiak: not a big deal. i've been told i'm kind of prickly anyway.  in my mind the next step for fez is doing test matrices and making those data available with the modules

[17:55] <tonyo> the difficult part in that is making sure from native can grab the correct packages

[17:56] *** patrickb joined
[18:00] <MasterDuke> i haven't followed the details of the discussions very closely because it's a part of the codebase i have no experience with, but is this the sort of thing where a PR showing more concretely what's intended would help?

[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:11] *** MasterDuke left
[18:16] *** MasterDuke joined
[18:38] <Geth> ¦ rakudo/new-disp: 43c8b3a4bc | (Stefan Seifert)++ | src/vm/moar/dispatchers.nqp

[18:38] <Geth> ¦ rakudo/new-disp: Fix wrappers of protos not getting called

[18:38] <Geth> ¦ rakudo/new-disp: 

[18:38] <Geth> ¦ rakudo/new-disp: The optimization to not call an onlystar proto did not take into account that

[18:38] <Geth> ¦ rakudo/new-disp: the proto may be wrapped. In that case we must not just call the candidate

[18:38] <Geth> ¦ rakudo/new-disp: directly.

[18:38] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/43c8b3a4bc

[18:51] <raydiak> bartolin: that's very kind of you, thank you. if you're saying my presence is generally a good thing, it at least gives me something to consider before distancing myself. that's all I'm really aiming for is to make my presence constructive

[18:55] <timo> i haven't been active in here for a long while, but i was always happy to see raydiak in here

[18:55] <raydiak> tonyo: so do you see any way to accomplish that in a way which is agnostic from any one tool or ecosystem? forget all my previous speculation, maybe the final solution is nothing like what I started out imagining. but how can we have a formal and tested meta spec under the control of the community as a whole?

[18:56] <Geth> ¦ roast: 94857d4fda | (Christian Bartolomäus)++ | integration/gather-with-loops.t

[18:56] <Geth> ¦ roast: [JVM] Unfudge tests for gather/last and for loop

[18:56] <Geth> ¦ roast: 

[18:56] <Geth> ¦ roast: This started to pass with commit d8281722db.

[18:56] <Geth> ¦ roast: 

[18:56] <Geth> ¦ roast: I'd guess the return (which was removed with said commit) led to

[18:56] <Geth> ¦ roast: the UnwindException.

[18:56] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/94857d4fda

[18:57] <bartolin> meh, d8281722db was a commit for Rakudo -- I should have used a link :(

[18:57] *** notna joined
[18:58] *** linkable6 left
[18:58] <raydiak> timo! I haven't ran in to you since I came back, only noticed you once or twice in the backlog. thank you for you kindness :) I miss seeing you around here

[18:58] *** linkable6 joined
[18:59] <timo> that is pleasant to hear :)

[19:01] <raydiak> MasterDuke: yes I agree an implementation would help. ugexe suggested the same thing yesterday. I guess I just thought we should settle a little more on what it might look like before I actually write it because as we discuss, my idea of what "it" would exactly be and where it might live has shifted quite a bit

[19:17] <Xliff> I miss timo, too!

[19:21] <MasterDuke> .oO(i miss timo, two == timotimo)

[19:27] *** squashable6 left
[19:27] *** squashable6 joined
[19:30] <Geth> ¦ rakudo: patrickbkr++ created pull request #4453: Build: Tidy and improve cleanup rules

[19:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4453

[19:34] *** Geth left
[19:35] *** Geth joined
[19:35] <ugexe> no need for an actual implementation really. just mocking out the interface and commenting/documenting it would do the trick

[19:35] <ugexe> https://github.com/rakudo/rakudo/blob/7f5f60e85153b82f7b823c4ada69316770d700a2/src/core.c/Distribution.pm6#L1-L18

[19:35] <ugexe> https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/Repository.pm6#L1-L59

[19:35] <ugexe> these are good examples

[19:43] <raydiak> got it. I'm just uncertain at this point if we can actually agree on a fully functional implementation along the lines of what I originally envisioned, or if we should be looking more at writing a collection of META files to test parsers and an official validator to test serializers and aim to put all that in some repo in the raku org, or if there is some other option that might be more to everyones liking

[19:43] <raydiak> that we haven't conceived of yet

[19:44] <raydiak> but I suppose you're right, we have somewhat talked in circles about it for long enough that some code of some sort would be helpful at this point

[20:19] *** Xliff left
[20:19] *** notna left
[20:29] <ugexe> something on master seems to have broken zen

[20:29] <ugexe> zef

[20:29] <ugexe> labeled next without loop construct

[20:29] <Geth> ¦ roast: 4389ed40d0 | (Christian Bartolomäus)++ | integration/gather-with-loops.t

[20:29] <Geth> ¦ roast: Remove no longer needed canary test

[20:29] <Geth> ¦ roast: 

[20:29] <Geth> ¦ roast: Should have been removed with the previous commit 94857d4fda.

[20:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/4389ed40d0

[20:47] <ugexe> https://github.com/ugexe/zef/blob/ef2157c799b24056ee4a31d1584b81d4c0204af7/lib/Zef/Client.rakumod#L1174

[20:47] <ugexe> thats the only labeled loop zef uses

[20:48] <ugexe> https://gist.github.com/ugexe/874293a9aa2084f56d8855831eacf7e5 here is the --ll-exception output

[20:50] <bartolin> ugexe: I'd suspect https://github.com/rakudo/rakudo/commit/d8281722db. (It changed the behaviour for gather + for + take + last on the JVM backend -- and you have gather + for + take + next there.)

[20:51] <ugexe> ill check

[20:51] <bartolin> ugexe: at what point does zef explode? (I just tried to clone and install zef with Rakudo's current HEAD (7f5f60e851) and that seemed to work.)

[20:51] <ugexe> its definitely a specific scenario... 90% of zefs CI tests pass

[20:52] <ugexe> it blows up trying to find a dependency

[20:52] <ugexe> that or resolving the dependency graph

[20:53] <bartolin> I see. so more than a plain 'bin/zef install . && bin/zef help' ...

[20:54] <ugexe> yeah appears to be anything that has dependencies it blows up after it finds them

[20:57] <ugexe> reverting d8281722db fixes the regression

[20:57] *** linkable6 left
[20:59] *** linkable6 joined
[21:06] *** patrickb left
[22:20] *** committable6 left
[22:20] *** greppable6 left
[22:20] *** notable6 left
[22:20] *** releasable6 left
[22:20] *** bloatable6 left
[22:20] *** tellable6 left
[22:20] *** shareable6 left
[22:20] *** sourceable6 left
[22:20] *** benchable6 left
[22:20] *** evalable6 left
[22:20] *** statisfiable6 left
[22:20] *** coverable6 left
[22:20] *** bisectable6 left
[22:20] *** linkable6 left
[22:20] *** squashable6 left
[22:21] *** quotable6 left
[22:21] *** unicodable6 left
[22:21] *** reportable6 left
[22:21] *** nativecallable6 left
[22:21] *** benchable6 joined
[22:21] *** coverable6 joined
[22:21] *** statisfiable6 joined
[22:21] *** bisectable6 joined
[22:22] *** squashable6 joined
[22:22] *** greppable6 joined
[22:22] *** notable6 joined
[22:22] *** unicodable6 joined
[22:22] *** bloatable6 joined
[22:22] *** evalable6 joined
[22:23] *** tellable6 joined
[22:23] *** sourceable6 joined
[22:23] *** releasable6 joined
[22:23] *** quotable6 joined
[22:23] *** linkable6 joined
[22:23] *** reportable6 joined
[22:23] *** nativecallable6 joined
[22:23] *** shareable6 joined
[22:24] *** committable6 joined
[22:32] <Geth> ¦ rakudo: 271b64f0d9 | (Nick Logan)++ | src/core.c/Any-iterable-methods.pm6

[22:32] <Geth> ¦ rakudo: Revert "Rework IterateOneWithoutPhaser.push-all a bit"

[22:32] <Geth> ¦ rakudo: 

[22:32] <Geth> ¦ rakudo: This reverts commit d8281722dbf86c3e58378579ca076b8fe3a89fa3.

[22:32] <Geth> ¦ rakudo: 

[22:32] <Geth> ¦ rakudo: The reverted commit causes a regression in zef

[22:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/271b64f0d9

[23:08] <ugexe> strange though i cant figure out how to golf it

[23:08] <ugexe> m: my $foo := eager gather DEPSPEC: for ^5 -> $e { for ^5 -> $f { take $f; take $_ for |(0 .. $f); next DEPSPEC; } }; say $foo

[23:08] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «(0 0 0 0 0 0 0 0 0 0)␤»

[23:10] <ugexe> i figured that would have tripped it but it doesnt

[23:38] <ugexe> ah it goes away with MVM_SPESH_DISABLE=1

[23:39] <ugexe> so that probably explains why i cannot golf it

[23:41] <ugexe> ah can golf it now

[23:42] <ugexe> loop { my $includes := eager gather DEPSPEC: for ^5 -> $e { for ^5 -> $f { if 1 { take $f; take $_ for |(0 .. $f); next DEPSPEC; } } }; }

[23:42] <ugexe> (just shove it in a loop)

[23:44] <ugexe> loop { MYLABEL: eager gather for ^5 { for ^5 { next MYLABEL } } }

[23:44] <ugexe> that one works even without disabling spesh heh

[23:45] <ugexe> cause its not correct 🤦

[23:46] *** linkable6 left
[23:46] *** evalable6 left
[23:47] <ugexe> MVM_SPESH_DISABLE=1 raku -e 'loop { eager gather MYLABEL: for ^5 { for ^5 { next MYLABEL } } }' # works

[23:47] *** linkable6 joined
[23:47] <ugexe> raku -e 'loop { eager gather MYLABEL: for ^5 { for ^5 { next MYLABEL } } }' # does not work

[23:48] *** evalable6 joined
[23:52] *** jgaz joined
