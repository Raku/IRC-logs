[00:00] <lizmat> aaah... the plot thickens: in the -e case, it does *not* re-precompile

[00:00] <ugexe> precompilation on module installation (and thus on rakudo rebuilding) is just brute force from what i recall

[00:00] <lizmat> you have to have the use in a script and then run that

[00:02] <MasterDuke> interesting. i was just experimenting with -e and couldn't get double (re)compilation

[00:02] *** reportable6 left
[00:04] <lizmat> the script I was using to load the module, had a "use v6.*" in it

[00:04] <lizmat> without it, it doesn't re-precompile

[00:05] <lizmat> I'm calling it a day, as I'm starting to lose track of channels&

[00:05] *** reportable6 joined
[00:06] <ugexe> maybe a use v6.d would fi it

[00:06] <ugexe> use v6.* is kind of pointless

[00:07] <ugexe> s/fix/workaround/

[00:12] *** squashable6 left
[01:29] *** dogbert11 left
[01:48] *** nebuchadnezzar left
[02:06] *** frost joined
[02:09] *** Xliff_ left
[02:38] *** dogbert11 joined
[02:41] *** dogbert17 joined
[02:43] *** dogbert11 left
[02:51] *** dogbert17 left
[02:53] *** dogbert17 joined
[03:06] *** nine left
[03:06] *** nine joined
[03:14] *** squashable6 joined
[03:55] *** dogbert17 left
[04:43] *** dogbert17 joined
[05:08] *** dogbert17 left
[05:47] *** dogbert17 joined
[06:03] *** reportable6 left
[06:05] *** reportable6 joined
[07:10] *** dogbert17 left
[07:12] *** nebuchadnezzar joined
[07:34] <nine> Precompilation after a rakudo rebuild does not go through the same code as installation. After a rakudo rebuild we only do the normal on-demand precompilation as we don't find any precomp files for the current compiler version.

[07:39] *** dogbert17 joined
[08:02] *** dogbert17 left
[08:14] *** squashable6 left
[08:40] *** dogbert17 joined
[09:12] *** sena_kun joined
[09:19] *** dogbert17 left
[09:19] *** dogbert17 joined
[10:17] <Geth> Â¦ rakudo/remove-experimental-collation: 9e13d2374e | (Elizabeth Mattijsen)++ | 2 files

[10:17] <Geth> Â¦ rakudo/remove-experimental-collation: Remove support for use experimental :collation

[10:17] <Geth> Â¦ rakudo/remove-experimental-collation: 

[10:17] <Geth> Â¦ rakudo/remove-experimental-collation: It is now supported by default, and was marked to be deleted in

[10:17] <Geth> Â¦ rakudo/remove-experimental-collation: 2019, so seems to have ample sunsetting time for this feature.

[10:17] <Geth> Â¦ rakudo/remove-experimental-collation: review: https://github.com/rakudo/rakudo/commit/9e13d2374e

[10:18] <Geth> Â¦ rakudo: lizmat++ created pull request #4616: Remove support for use experimental :collation

[10:18] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4616

[10:21] <lizmat> ugexe: sleeping a night on the double precomp issue, I think it was caused by the fact that the compunit of my script had a different language version than the reference to the same module by another module 

[10:22] <lizmat> and that would make sense that it would create a different precomp sha, wouldn't it ?

[10:29] <discord-raku-bot> <Skarsnik#7370> *being annoying* Can someone comment on my last post on https://github.com/Raku/problem-solving/issues/186 so I can maybe took another shot at it tomorrow (I am trying to do like Zoffix a while ago with Rotfix Thuesday) x)

[10:33] *** evalable6 left
[10:33] *** linkable6 left
[10:35] *** evalable6 joined
[10:35] *** linkable6 joined
[11:07] * lizmat wonders how hard it would be to convert the RAKUDO_MODULE_DEBUG logic into something that Log::Timeline or similar could handle

[11:26] *** Altai-man joined
[11:46] *** squashable6 joined
[11:47] <Geth> Â¦ Blin/ugexe-patch-1: 04c1d2d9b4 | Altai-man++ | docker/pkg-dependencies

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: Add new native library

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: review: https://github.com/Raku/Blin/commit/04c1d2d9b4

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: b751d7a63a | Altai-man++ | docker/Dockerfile

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: Accomodate for new zef installation path

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: review: https://github.com/Raku/Blin/commit/b751d7a63a

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: d7428f0dfc | Altai-man++ | lib/Blin/Tester/Zef.rakumod

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: Accomodate for new zef config layout

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: 

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: See https://github.com/ugexe/zef/commit/a12d286312c6d7bc3c8ffebe51cce4caae6268cf#diff-1fccc95647d6a2f77e5fed7d638f49c2927d360d1401f1d69ca27b6f46ca883dL32-R44

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: for details.

[11:47] <Geth> Â¦ Blin/ugexe-patch-1: review: https://github.com/Raku/Blin/commit/d7428f0dfc

[11:48] <Geth> Â¦ Blin/master: 8 commits pushed by (Nick Logan)++, Altai-man++

[11:48] <Geth> Â¦ Blin/master: 204b8bb13f | Explicitly use the zef libs packaged with the binary

[11:48] <Geth> Â¦ Blin/master: b757a4900a | Extract sources from zef config

[11:48] <Geth> Â¦ Blin/master: 54823ae349 | Remove indirectness leading to mysterious "Malformed UTF-8 near bytes 00 00 80" in output of all modules

[11:48] <Geth> Â¦ Blin/master: b17de07723 | Use Zef::Distribution to deal with hash format dependencies

[11:48] <Geth> Â¦ Blin/master: 04c1d2d9b4 | Add new native library

[11:48] <Geth> Â¦ Blin/master: b751d7a63a | Accomodate for new zef installation path

[11:48] <Geth> Â¦ Blin/master: d7428f0dfc | Accomodate for new zef config layout

[11:48] <Geth> Â¦ Blin/master: 253df4c042 | Merge pull request #29 from Raku/ugexe-patch-1

[11:48] <Geth> Â¦ Blin/master: review: https://github.com/Raku/Blin/compare/2a2f50bea648...253df4c042a1

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:32] <[Tux]> Rakudo v2021.10-46-gd88d1cc0e (v6.d) on MoarVM 2021.10-23-g4d145b465

[12:32] <[Tux]> csv-test-xs-20      0.371 -  0.379

[12:32] <[Tux]> test-t --race       0.991 -  1.005

[12:32] <[Tux]> csv-ip5xs           1.376 -  1.379

[12:32] <[Tux]> test-t              1.599 -  1.627

[12:32] <[Tux]> csv-parser          4.159 -  4.223

[12:32] <[Tux]> test                7.066 -  7.315

[12:32] <[Tux]> test-t-20 --race    7.760 -  8.192

[12:32] <[Tux]> csv-ip5xs-20       15.600 - 15.640

[12:32] <[Tux]> test-t-20          23.561 - 23.758

[13:23] <Geth> Â¦ nqp/new-disp-nativecall: 791163b286 | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[13:23] <Geth> Â¦ nqp/new-disp-nativecall: Remove last remnant of old invocation protocol

[13:23] <Geth> Â¦ nqp/new-disp-nativecall: review: https://github.com/Raku/nqp/commit/791163b286

[13:26] <lizmat> whee!

[13:38] *** frost left
[14:46] <Geth> Â¦ rakudo/new-disp-nativecall: 14 commits pushed by (Stefan Seifert)++

[14:46] <Geth> Â¦ rakudo/new-disp-nativecall: review: https://github.com/rakudo/rakudo/compare/14f4b722ec48...5df1c80a3908

[14:51] <Geth> Â¦ nqp/new-disp-nativecall: bdd31cefe9 | (Stefan Seifert)++ | 4 files

[14:51] <Geth> Â¦ nqp/new-disp-nativecall: API for asking whether the compiler supports a certain nqp op

[14:51] <Geth> Â¦ nqp/new-disp-nativecall: 

[14:51] <Geth> Â¦ nqp/new-disp-nativecall: This can be used to conditionally compile backend specific code in

[14:51] <Geth> Â¦ nqp/new-disp-nativecall: modules like NativeCall

[14:51] <Geth> Â¦ nqp/new-disp-nativecall: review: https://github.com/Raku/nqp/commit/bdd31cefe9

[14:51] <Geth> Â¦ nqp/new-disp-nativecall: 8b609200d8 | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[14:51] <Geth> Â¦ nqp/new-disp-nativecall: Remove last remnant of old invocation protocol

[14:51] <Geth> Â¦ nqp/new-disp-nativecall: review: https://github.com/Raku/nqp/commit/8b609200d8

[15:40] *** evalable6 left
[15:40] *** linkable6 left
[15:41] *** linkable6 joined
[16:22] *** patrickb joined
[16:43] *** evalable6 joined
[17:00] *** patrickb left
[17:44] <Geth> Â¦ rakudo: ab02205ed4 | (Jonathan Worthington)++ | src/vm/moar/ops/perl6_ops.c

[17:44] <Geth> Â¦ rakudo: Add a missing MVMROOT in extops

[17:44] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ab02205ed4

[18:02] *** reportable6 left
[18:09] <lizmat> ugexe: so, is what you specify in a META6.json "depends" the name of a key in a <provides> , or the "name" of a distribution

[18:09] <lizmat> or can it be both?

[18:10] <lizmat> case in point: there are modules that list "LibCurl" as a dependency, and others that list "LibCurl::Easy"

[18:10] <ugexe> currently it can be both, but that is just because that was what was always done. the spec says its supposed to match what you would find in 'use' statements so technically dist names shouldnt work

[18:10] <tellable6> 2021-11-03T11:05:06Z #raku <tbrowder> ugexe ^^^

[18:11] <lizmat> right, so technically modules that have a depends on a dist name are technically wrong

[18:12] <ugexe> in that respect yeah, but its also kind of dumb to require them to put multiple modules from what may be a single distribution in their depends

[18:12] <lizmat> true that

[18:12] <Altai-man> what's the motivation of the spec in this case? If I'm using 10 things from a distribution, I have to type 10 things into depends?

[18:12] <lizmat> hmmm

[18:12] <ugexe> things would be a bit better if we hadnt used :: in distribution names

[18:12] <lizmat> well, empirically you only need to mention the distro name

[18:13] <lizmat> in any case, if you specify a single module from a dist, you would get the whole dist anyway

[18:13] <Altai-man> which is "technically wrong" according to the spec, but I always assumed there is a rule like "if the spec says dumb thing then fix the spec, don't blindly believe", no?

[18:13] <ugexe> yeah but getting the whole dist might not matter is contexts outside of package management

[18:13] <lizmat> indeed  :-)

[18:14] <Altai-man> specifying just one arbitrary module from a dist is also confusing

[18:14] <lizmat> yeah... also true

[18:14] <lizmat> ok, so I guess we should just allow a dist name as a dependency

[18:15] <ugexe> the nice thing about listing all modules in depends would be we could introspect that and automatically apply the required versions and stuff to all the imports

[18:48] *** Altai-man left
[19:03] *** reportable6 joined
[19:18] <lizmat> ugexe: suppose I install a module with many dependencies, shouldn't it be possible to install depencies that have no depencies themselves, in parallel ?

[19:19] <ugexe> that is why zef has various --[phase]-degree options

[19:19] <ugexe> but a given CURI.install is basically a giant lock so that part no

[19:20] <lizmat> and the CURI.install lock is there because we want to make sure we don't create any parallelization issues

[19:21] <lizmat> right?

[19:23] <ugexe> thats generally all locks are used for yeah

[19:25] <lizmat> ok

[19:26] <lizmat> hmmm... does zef at least test these "leaf" modules in parallel ?

[19:26] <lizmat> there shouldn't be any reason not to, apart from complexity  :-)

[19:26] <ugexe> if you give it a --test-degree=... then sure, but yes there are reasons

[19:26] <ugexe> like tests just fail for no reason occasionally

[19:29] <lizmat> ok... best be conservative, is what you're saying

[19:29] <lizmat> in testing

[19:30] <ugexe> maybe things have gotten better since i implemented the defaults

[19:31] <ugexe> --test-degree and --fetch-degree were added sep 3 2019

[19:31] <ugexe> there is also equiv env vars ZEF_FETCH_DEGREE and ZEF_TEST_DEGREE

[19:32] <lizmat> ok, will check it out

[20:28] *** evalable6 left
[20:28] *** linkable6 left
[20:31] *** linkable6 joined
[21:30] *** evalable6 joined
[21:34] *** sena_kun left
[21:36] <Geth> Â¦ rakudo/Rakudo-CORE-META: 4c874a8b35 | (Elizabeth Mattijsen)++ | 2 files

[21:36] <Geth> Â¦ rakudo/Rakudo-CORE-META: Abstract virtual core META6.json into a module

[21:36] <Geth> Â¦ rakudo/Rakudo-CORE-META: 

[21:36] <Geth> Â¦ rakudo/Rakudo-CORE-META: The install-core-dist.raku script kept the information about which

[21:36] <Geth> Â¦ rakudo/Rakudo-CORE-META: files are actually part of the Rakudo core distribution to itself.

[21:36] <Geth> Â¦ rakudo/Rakudo-CORE-META: 

[21:36] <Geth> Â¦ rakudo/Rakudo-CORE-META: This commit extracts that information into a separate module, so

[21:36] <Geth> Â¦ rakudo/Rakudo-CORE-META: that other programs can get at the meta information in a reliable

[21:37] <Geth> Â¦ rakudo/Rakudo-CORE-META: <â¦commit message has 7 more linesâ¦>

[21:37] <Geth> Â¦ rakudo/Rakudo-CORE-META: review: https://github.com/rakudo/rakudo/commit/4c874a8b35

[21:37] <ugexe> its not good practice to have a module in a lib and its not in the meta6.json

[21:37] <Geth> Â¦ rakudo: lizmat++ created pull request #4617: Abstract virtual core META6.json into a module

[21:37] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4617

[21:38] <lizmat> ugexe ??

[21:39] <ugexe> oh it is in there, but i guess that isnt really ideal either

[21:39] <ugexe> fwiw i'm stil against all these modules in core

[21:40] <ugexe> not just this one, but a lot of them

[21:40] <lizmat> but wouldn't you want to be able to check dependencies on e.g. NativeCall in zef ?

[21:40] <lizmat> with this, you would be able to

[21:42] <ugexe> it can check

[21:43] <lizmat> you mean, now?  how?

[21:44] <ugexe> i guess im misunderstanding something because it would be however you check any other dependency

[21:45] <lizmat> in Ecosystem::Archive I'd like to be able to check all dependencies and reverse dependencies

[21:45] <lizmat> NativeCall and Test are sort of deal breakers here

[21:46] <lizmat> with %Rakudo::CORE::META I would be able to reliably check for core modules as well

[21:46] <lizmat> as valid targets of a "use" statement

[21:46] <ugexe> i dont understand how you cant check for those without this

[21:47] <ugexe> you query the CompUnit repositories

[21:47] <ugexe> this is like adding a Build.pm type module into the lib/

[21:47] <ugexe> this = that pr

[21:48] <lizmat> well, querying the CompUnit repos is checking for what is available that's locally installed, right ?

[21:48] <ugexe> if you only query CURI yeah

[21:48] <lizmat> unless of course there's a $*REPO implementation that is smarter

[21:48] <lizmat> but yeah, assuming there's only CURI

[21:49] <lizmat> and we're not using -Ilib

[21:49] <lizmat> or -I more generally

[21:49] <ugexe> i dont understand what is wrong with e.g. $*REPO.repo-chain.map(*.?candidates(...))

[21:49] <ugexe> or even .resolve

[21:50] <ugexe> anyways `zef rdepends NativeCall` is what should do whatever you mentioned earlier except it looks like i broke that when i added return type constraints at some point

[21:50] <lizmat> because that would be only what is locally installed ?

[21:51] <ugexe> no, it is whatever implemented .candidates

[21:51] <ugexe> implements^

[21:51] <ugexe> if you only want locally installed, which i assume means CURI, then just do a .grep(CompUnit::Repository::Installation)

[21:53] <lizmat> well, my goal is to be able to produce a database for all modules that ever existed (a la BackPan)

[21:55] <lizmat> and an API / interface to it

[21:56] <ugexe> ...so implement CUR?

[21:56] <ugexe> i just dont see what that has to do this that module

[21:56] <lizmat> well, I want to do many things with that information...

[21:57] <lizmat> such as checking if all dependencies of a module are correct

[21:57] <ugexe> how does that module help with that?

[21:58] <ugexe> everything you've said so far you can already do, so i dont quite understand

[21:58] <lizmat> by being able to report that distribution foo:ver<>:auth<> has a dependency on bar:ver<>:auth<>, but that there is no module or distro with that identity

[21:59] <ugexe> why not just ignore everything in the site and home repos

[21:59] <ugexe> er, site and core? perl? i forget the second core one 

[22:00] <ugexe> or instead of ignore, consider those instead of just ignoring them

[22:00] <lizmat> this is not a module that would be used by many people

[22:00] <lizmat> it would probably just be used by a server providing backpan modules and maybe some other people interested in spelunking

[22:00] <ugexe> we are talking about lib/Rakudo/CORE/META.rakumod?

[22:01] <lizmat> no Ecosystem::Archive

[22:02] <lizmat> you're saying that the META hash that is provided by Rakudo::CORE::META could be build by calling stuff on $*REPO?

[22:02] <lizmat> if that is so, then I'll just make an ecosystem module that would do that

[22:03] <lizmat> but I got the impression you could only ask a $*REPO for specific things, not say "give me all" ?

[22:03] <ugexe> no. one thing is that module shouldnt be in lib/... put it in one of the build tool directories or something if you really want a module for this

[22:04] <lizmat> and adapt the info in provides?

[22:04] <ugexe> but you can also generate most META6 hashes via Distribution::Path.new(...).meta

[22:04] <ugexe> er, scratch that

[22:04] <ugexe> because there is no meta6 it would have to be:

[22:04] <ugexe> CompUnit::Repository::FileSystem.new(prefix => "path/to/lib").distribution.meta

[22:06] <ugexe> ideally those modules would be split into logical distributions with literal META6.json files, though as i mentioned that would require updating e.g. make spectest to those new dirs

[22:07] <lizmat> hmmm... so CompUnit::Repository::Staging should also live in the tools/build dir, right ?

[22:09] <ugexe> m: say CompUnit::RepositoryRegistry.repository-for-name("core").installed.map(*.meta<provides>.keys.Slip).join(",")

[22:09] <camelia> rakudo-moar ab02205ed: OUTPUT: Â«NativeCall::Compiler::MSVC,newline,SIL,safe-snapper,Telemetry,NativeCall,experimental,MoarVM::Spesh,Pod::To::Text,SL,snapper,Test,MoarVM::Profiler,NativeCall::Types,CompUnit::Repository::Staging,MoarVM::SL,MoarVM::SIL,BUILDPLAN,NativeCall::Compiler::Gâ¦Â»

[22:09] <ugexe> CompUnit::Repository::Staging should be in the core but it cant for some reason

[22:13] <lizmat> looks like Compunit::Repository::Staging can live in tools/build

[22:13] <ugexe> its intended to be used to eventually get around the double precomp of testing

[22:14] <ugexe> it was originally going to be put in core but i believe the build process did not work (maybe nine remembers) so it was put in lib/

[22:15] <lizmat> ok, thanks for the enlightenments again

[22:15] <lizmat> I think I'll make an ecosystem module out of it instead

[22:16] <lizmat> but not today...  

[22:17] <ugexe> that one liner above would be the idiomatic way to get the modules included with a raku compiler

[22:17] <ugexe> imo

[22:18] <lizmat> right...

[22:18] <lizmat> will get back to this tomorrow

[22:18] <lizmat> for now, afk&

[22:23] <Geth> Â¦ rakudo/Rakudo-CORE-META: 5d7a5acf0e | (Elizabeth Mattijsen)++ | 5 files

[22:23] <Geth> Â¦ rakudo/Rakudo-CORE-META: Move moduled to tools/build

[22:23] <Geth> Â¦ rakudo/Rakudo-CORE-META: review: https://github.com/rakudo/rakudo/commit/5d7a5acf0e

