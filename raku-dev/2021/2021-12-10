[00:04] *** reportable6 left
[00:05] *** reportable6 joined
[02:02] *** frost joined
[03:02] *** nine left
[03:02] *** nine joined
[04:50] *** reportable6 left
[04:50] *** shareable6 left
[04:50] *** evalable6 left
[04:50] *** notable6 left
[04:50] *** unicodable6 left
[04:50] *** linkable6 left
[04:50] *** tellable6 left
[04:50] *** statisfiable6 left
[04:50] *** greppable6 left
[04:50] *** bloatable6 left
[04:50] *** committable6 left
[04:50] *** coverable6 left
[04:50] *** squashable6 left
[04:50] *** sourceable6 left
[04:50] *** nativecallable6 left
[04:50] *** benchable6 left
[04:50] *** quotable6 left
[04:50] *** releasable6 left
[04:50] *** bisectable6 left
[04:51] *** committable6 joined
[04:51] *** coverable6 joined
[04:51] *** squashable6 joined
[04:52] *** linkable6 joined
[04:52] *** greppable6 joined
[04:52] *** statisfiable6 joined
[04:52] *** sourceable6 joined
[04:52] *** unicodable6 joined
[04:52] *** tellable6 joined
[04:53] *** evalable6 joined
[05:50] *** releasable6 joined
[05:51] *** shareable6 joined
[05:52] *** bisectable6 joined
[05:53] *** nativecallable6 joined
[06:08] *** squashable6 left
[06:09] *** squashable6 joined
[06:11] *** squashable6 left
[06:12] *** squashable6 joined
[06:52] *** benchable6 joined
[06:52] *** bloatable6 joined
[06:53] *** notable6 joined
[07:05] *** reportable6 joined
[07:58] *** squashable6 left
[08:00] *** squashable6 joined
[09:39] <lizmat> Files=1349, Tests=117874, 317 wallclock secs (35.88 usr  9.48 sys + 4387.51 cusr 355.63 csys = 4788.50 CPU)

[09:45] *** frost left
[11:08] *** frost joined
[11:08] *** ab5tract joined
[11:15] *** TempIRCLogger left
[11:37] *** squashable6 left
[11:40] *** squashable6 joined
[11:42] *** squashable6 left
[11:49] *** Altai-man joined
[12:02] *** TempIRCLogger joined
[12:03] *** reportable6 left
[12:04] *** reportable6 joined
[12:31] *** TempIRCLogger left
[12:31] *** TempIRCLogger joined
[12:35] *** TempIRCLogger left
[12:35] *** TempIRCLogger joined
[12:44] *** squashable6 joined
[12:48] *** ab5tract left
[12:52] *** [Coke] left
[12:59] *** [Coke] joined
[13:13] *** TempIRCLogger left
[13:13] *** TempIRCLogger joined
[13:18] *** TempIRCLogger left
[13:18] *** TempIRCLogger joined
[13:36] *** lizmat_ joined
[13:37] *** frost left
[13:37] *** [Coke] left
[13:38] *** TempIRCLogger left
[13:38] *** lizmat left
[13:40] *** [Coke] joined
[13:45] *** ab5tract joined
[13:51] *** lizmat_ left
[13:51] *** lizmat joined
[13:52] *** quotable6 joined
[13:54] *** TempIRCLogger__ joined
[13:54] *** TempIRCLogger__ left
[13:58] *** TempIRCLogger joined
[14:00] *** TempIRCLogger left
[14:01] *** TempIRCLogger joined
[14:03] *** TempIRCLogger left
[14:03] *** TempIRCLogger joined
[14:05] <lizmat> m: my Int $a; $a := True; say $a   # this feels counter-intuitive  :-)

[14:05] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´True‚ê§¬ª

[14:08] *** TempIRCLogger left
[14:08] *** TempIRCLogger joined
[14:10] *** TempIRCLogger left
[14:10] *** TempIRCLogger joined
[14:11] <nine> But correct, since Enums are Ints

[14:12] <nine> after all:

[14:12] <nine> m: say True + True

[14:12] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´2‚ê§¬ª

[14:14] *** TempIRCLogger left
[14:14] *** TempIRCLogger joined
[14:32] *** TempIRCLogger__ joined
[14:32] *** lizmat_ joined
[14:34] *** TempIRCLogger left
[14:34] *** lizmat left
[14:35] *** lizmat_ left
[14:35] *** lizmat joined
[14:46] *** TempIRCLogger__ left
[14:47] *** TempIRCLogger joined
[15:38] *** Geth left
[15:38] *** Geth joined
[15:40] *** TempIRCLogger left
[15:40] *** TempIRCLogger joined
[16:26] *** Altai-man left
[16:27] <ab5tract> still might be considered LTA that it isn't coerced to the Int-y side of things

[16:27] <ab5tract> m: my Int $a; $a := True; put $a

[16:27] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´True‚ê§¬ª

[16:28] <ab5tract> (thought it might be related to say calling .gist)

[16:28] <ab5tract> m: my Int $a; $a := True; dd $a

[16:28] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Bool::True‚ê§¬ª

[16:28] <ab5tract> appears to be consistent :)

[16:29] *** Altai-man joined
[17:33] *** ab5tract left
[18:02] *** reportable6 left
[18:20] *** Altai-man left
[19:04] *** reportable6 joined
[20:45] <lizmat> so I have a role that exports an infix:<eqv> candidate

[20:45] <lizmat> how can I have a class consuming that role (in another file) have that export as well?

[20:46] <lizmat> case in point: IRC::Log the role exporting an IRC::Log::Entry version of eqv

[20:46] <lizmat> and wanting IRC::Log::Colabti to automatically export that as well

[21:12] <lizmat> alternately, do we have a way to stick something in the EXPORT of a consuming class from the code of a role?

[21:13] <Geth> ¬¶ DBIish/rbt.complex-types: 06c955ba6d | (Rod Taylor)++ | 9 files

[21:13] <Geth> ¬¶ DBIish/rbt.complex-types: Restructure type conversions

[21:13] <Geth> ¬¶ DBIish/rbt.complex-types: 

[21:13] <Geth> ¬¶ DBIish/rbt.complex-types: Allow for 2-way registered conversions. From Raku objects to a format suitable for the database (this was hardcoded for Buf already) in addition to the previously registerable conversions from DB to Raku (Bool, DateTime, Buf).

[21:13] <Geth> ¬¶ DBIish/rbt.complex-types: 

[21:13] <Geth> ¬¶ DBIish/rbt.complex-types: Allow registration of conversion via register-type-conversion() function calls. This hides the internal implementation which will probably change at some point.

[21:13] <Geth> ¬¶ DBIish/rbt.complex-types: 

[21:13] <Geth> ¬¶ DBIish/rbt.complex-types: The pg_custom_type.p6 file contains a sample Raku Point(:$x, :$y) object to a Pg "point" type in both directions.

[21:13] <Geth> ¬¶ DBIish/rbt.complex-types: review: https://github.com/raku-community-modules/DBIish/commit/06c955ba6d

[21:14] *** Geth left
[21:14] *** Geth joined
[22:55] *** MasterDuke left
[22:56] *** summerisle is now known as eof

[23:50] *** pussies_slayer_9 joined
[23:51] <pussies_slayer_9> I found a oneliner where perl excels in comparison to raku

[23:51] <pussies_slayer_9> perl -e 'my $str .= "$_\n" for 0..300000;'¬† 0.02s user 0.00s system 3% cpu 0.697 total

[23:51] <pussies_slayer_9> raku -e 'my $str ~= "$_\n" for ^300000;'¬† 2.47s user 2.37s system 100% cpu 4.796 total

[23:52] <pussies_slayer_9> 100x difference

[23:53] <pussies_slayer_9> raku totally obliterated

[23:56] <pussies_slayer_9> one would think that perl is just reallocing the $str buffer while raku is copying it over and over to a new one

[23:59] <pussies_slayer_9> perl -e 'my $int += $_ for 0..300000;'¬† 0.02s user 0.00s system 89% cpu 0.020 total

[23:59] <pussies_slayer_9> raku -e 'my $int += $_ for 0..300000;'¬† 0.26s user 0.05s system 115% cpu 0.263 total

[23:59] <pussies_slayer_9> 10x slower

