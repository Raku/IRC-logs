[00:56] *** frost-lab joined
[02:12] *** kvw_5_ joined
[02:15] *** kvw_5 left
[03:48] *** Kaiepi left
[03:48] *** Kaiepi joined
[04:46] *** Kaiepi left
[04:46] *** Kaiepi joined
[05:09] *** maggotbrain joined
[05:50] *** maggotbrain left
[05:51] *** maggotbrain joined
[05:55] *** Kaiepi left
[05:56] *** Kaiepi joined
[06:35] *** Kaiepi left
[06:35] *** Kaiepi joined
[07:12] *** Kaiepi left
[07:12] *** Kaiepi joined
[07:41] *** squashable6 left
[07:44] *** squashable6 joined
[08:20] *** kawaii_ joined
[08:23] *** kawaii left
[08:23] *** kawaii_ is now known as kawaii

[08:44] *** domidumont joined
[09:55] <nine> https://github.com/rakudo/rakudo/pull/4256 "Make signal handler setup synchronous to avoid race conditions" On MoarVM setup of a signal handler is itself an asynchronous operation. Wait for it to complete before returning as not only our spec tests but probably every single user expects the signal handler to be in place at that point. This was already true for the JVM and JS backends.

[09:55] <nine>  Fixes a race condition in t/spec/S17-procasync/kill.t

[09:56] <nwc10> I wonder if it's the same race condition as I just hit in t/spec/S07-hyperrace/basics.rakudo.moar

[09:56] <nwc10> (lots of threads wating on a futex, and one sleeping in code called from the JIT)

[09:56] <nine> https://github.com/Raku/roast/commit/da922f167ffc7ab1049702d6433ddcf413b07d0f "Fix yet another race condition in kill.t" Most of the time the 'Output correct for Supply.merge on signals' test was not executed at all because the test program finished normally before it ever got the signal. Even the test plan did not expect that test to run. Fix by having the test program basically wait forever for that 

[09:56] <nine> signal to arrive.

[09:56] <nwc10> not investigating this yet, as I have other things I can make progress on

[10:03] <sena_kun> nine, this won't go into the release.

[10:04] <nine> sena_kun: I figured as much :)

[10:04] <nine> But at least for the release after that kill.t won't be an issue anymore

[10:04] <sena_kun> nine++ for caring

[10:36] *** frost-lab left
[11:45] *** Kaiepi left
[11:47] *** Kaiepi joined
[11:59] *** Kaiepi left
[12:00] *** Kaiepi joined
[12:02] *** Kaeipi joined
[12:03] *** Kaiepi left
[12:04] *** Kaeipi left
[12:05] *** Kaeipi joined
[12:45] <nine> https://github.com/Raku/roast/commit/93676f96203fbf6acd68a6794fd2428f0bc88c27 "Fix race condition in bug-coverage-stress.t signal test" The signal handler sometimes did not even get a chance to run as the test program finished right after signalling that it started. To make it reliable the only proper way to exit the test program must be from the signal handler.So give that handler a really long time to 

[12:45] <nine> fire and exit unsuccessfully if it doesn't.

[13:09] <nine> Sigh...there's yet another race condition in bug-coverage-stress.t. It contains a test that does almost the same as the one in kill.t but uses react/whenever instead of act on the signal supply. And with react/whenever we do not seem to always catch the signal .

[13:14] <lizmat> that may point to a more general issue with react / whenever?

[13:15] <nine> no idea

[13:15] <nine> I don't understand how that could make a difference

[13:18] *** b2gills left
[13:44] *** b2gills joined
[14:20] *** Kaeipi left
[14:51] *** cog__ joined
[14:54] *** cog_ left
[15:11] *** Kaiepi joined
[16:03] <sena_kun> weekly https://twitter.com/koto_san_kana/status/1373303908622331910

[16:03] <sena_kun> I bet this is not how it works.

[16:03] <sena_kun> :S

[16:18] *** epony left
[16:22] *** epony joined
[16:50] <[Tux]> Rakudo v2021.03-1-gbccb2ce2d (v6.d) on MoarVM 2021.03-1-gc48fd57a3

[16:50] <[Tux]> csv-test-xs-20      0.380 -  0.408

[16:50] <[Tux]> csv-ip5xs           0.788 -  0.815

[16:50] <[Tux]> test-t --race       0.821 -  0.977

[16:50] <[Tux]> test-t              1.911 -  1.930

[16:50] <[Tux]> test                7.871 -  8.040

[16:50] <[Tux]> csv-ip5xs-20        7.749 -  8.152

[16:50] <[Tux]> test-t-20 --race    9.889 -  9.973

[16:50] <[Tux]> csv-parser         25.472 - 26.261

[16:50] <[Tux]> test-t-20          31.628 - 32.223

[17:30] *** evalable6 left
[17:30] *** linkable6 left
[17:32] *** linkable6 joined
[17:32] *** evalable6 joined
[18:21] *** sena_kun left
[18:26] *** sena_kun joined
[18:35] *** domidumont left
[18:38] *** domidumont joined
[18:40] *** domidumont left
[19:16] *** epony left
[19:17] *** epony joined
[19:22] *** Xliff joined
[19:52] <lizmat> weekly: https://twitter.com/koto_san_kana/status/1373303908622331910

[19:52] <notable6> lizmat, Noted! (weekly)

[19:52] <lizmat> sena_kun:  weekly: foo    not weekly foo

[19:53] <sena_kun> lizmat, next release is next month, so I'll forget till then. :]

[19:53] <sena_kun> lizmat, but thanks, and thank you very much for all your efforts. :)

[19:53] <lizmat> you're welcome!

[19:54] <lizmat> btw, spectest was clean for me  :-)

[19:57] *** HarmtH joined
[20:03] *** HarmtH left
[20:03] *** HarmtH joined
[20:16] *** HarmtH left
[20:17] *** HarmtH joined
[20:18] *** HarmtH left
[20:19] *** HarmtH joined
[20:22] *** HarmtH left
[20:23] *** HarmtH joined
[21:17] *** sena_kun left
[21:17] *** sena_kun joined
[21:19] *** sena_kun left
[21:19] *** sena_kun joined
[21:23] *** sena_kun left
[21:25] *** sena_kun joined
[21:28] *** softmoth joined
[21:53] *** softmoth_ joined
[21:53] *** softmoth_ left
[22:40] *** HarmtH left
[22:41] *** HarmtH joined
[22:42] *** HarmtH left
[22:42] *** HarmtH joined
[22:43] *** HarmtH left
[22:43] *** HarmtH_ joined
[22:46] *** HarmtH_ left
[22:46] *** HarmtH joined
[22:51] *** HarmtH left
[22:51] *** HarmtH_ joined
[23:37] *** [Coke]_ is now known as [Coke]

