[00:22] <vrurg> .tell MasterDuke https://gist.github.com/vrurg/ef54cb5f45f8e67c68222ebe1ba3f8c5

[00:22] <tellable6> vrurg, I'll pass your message to MasterDuke

[00:28] *** sena_kun left
[00:28] *** sena_kun joined
[00:36] *** frost-lab joined
[00:42] *** raydiak joined
[01:31] *** kvw_5 joined
[01:32] <ugexe> s/@*ARGS/*@ARGS/

[01:34] *** kvw_5_ left
[02:11] <Geth> ¦ rakudo: vrurg++ created pull request #4280: Make subtest output a header

[02:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4280

[02:17] <Geth> ¦ roast: vrurg++ created pull request #726: Improve test for subtest output

[02:17] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/726

[02:52] *** frost-lab left
[02:54] *** frost-lab joined
[03:16] *** sxmx joined
[03:36] *** Kaiepi left
[03:36] *** Kaiepi joined
[04:03] *** Kaeipi joined
[04:03] *** Kaiepi left
[06:38] *** domidumont joined
[06:40] *** nebuchad` is now known as nebuchadnezzar

[08:12] *** bobv joined
[08:25] <Geth> ¦ roast/6.c-errata: d3e66a35c6 | (Elizabeth Mattijsen)++ | S06-signature/errors.t

[08:25] <Geth> ¦ roast/6.c-errata: unival(42.2) shouldn't fail if (42.2).unival doesn't

[08:25] <Geth> ¦ roast/6.c-errata: 

[08:25] <Geth> ¦ roast/6.c-errata: Built-in sub versions should just pass on to their method counterparts.

[08:25] <Geth> ¦ roast/6.c-errata: 

[08:25] <Geth> ¦ roast/6.c-errata: (42.2).unival returns NaN, unival(42.2) should as well, therefore this

[08:25] <Geth> ¦ roast/6.c-errata: test is incorrect.

[08:25] <Geth> ¦ roast/6.c-errata: 

[08:25] <Geth> ¦ roast/6.c-errata: Same as c22b7e9b680f5bf0f68dd on master but not cherry-pickable.

[08:25] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/d3e66a35c6

[08:43] *** Geth left
[08:44] *** Geth joined
[09:11] <Geth> ¦ rakudo: 9f73552aac | (Elizabeth Mattijsen)++ | 2 files

[09:11] <Geth> ¦ rakudo: Move a lot of stuff from Str to unicodey

[09:11] <Geth> ¦ rakudo: 

[09:11] <Geth> ¦ rakudo: There should be no functional changes.

[09:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9f73552aac

[09:42] <Geth> ¦ rakudo: 009d90b83b | (Elizabeth Mattijsen)++ | 3 files

[09:42] <Geth> ¦ rakudo: Move unicodey bits from Int / Cool

[09:42] <Geth> ¦ rakudo: 

[09:42] <Geth> ¦ rakudo: No functinal changes should have occurred here.

[09:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/009d90b83b

[10:08] <Geth> ¦ rakudo: 069c0b205d | (Elizabeth Mattijsen)++ | src/core.c/unicodey.pm6

[10:08] <Geth> ¦ rakudo: Move all sub uni* sub protos to one place

[10:08] <Geth> ¦ rakudo: 

[10:08] <Geth> ¦ rakudo: To make sure that all (conditional) backend code actually sees them.

[10:08] <Geth> ¦ rakudo: 

[10:08] <Geth> ¦ rakudo: No functional changes again, except maybe unbreaking the js backend

[10:08] <Geth> ¦ rakudo: because it referred to a multi sub *before* its proto was defined,

[10:08] <Geth> ¦ rakudo: which generally is a nono in the setting.

[10:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/069c0b205d

[10:15] <Geth> ¦ rakudo: Altai-man assigned to codesections Issue recent changes broke non-simple MAIN usages https://github.com/rakudo/rakudo/issues/4278

[10:40] *** Xliff joined
[10:52] <Geth> ¦ rakudo: 9d7279d521 | (Elizabeth Mattijsen)++ | 2 files

[10:52] <Geth> ¦ rakudo: Move ord subs to unicodey as well

[10:52] <Geth> ¦ rakudo: 

[10:52] <Geth> ¦ rakudo: No functional changes expected either

[10:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9d7279d521

[10:52] <Geth> ¦ rakudo: 2251b70c32 | (Elizabeth Mattijsen)++ | 3 files

[10:52] <Geth> ¦ rakudo: Move chr(s) subs to unicodey

[10:52] <Geth> ¦ rakudo: 

[10:52] <Geth> ¦ rakudo: There should be no functional changes.  This most likely concludes

[10:52] <Geth> ¦ rakudo: the rearranging of unicode related functionality.  *phew*

[10:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2251b70c32

[10:54] <Xliff> So I have a question about dispatch ordering.

[10:54] <Xliff> m: sub a ($a where 2 | 3 | 4) { say 'Limit!

[10:54] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3sub a ($a where 2 | 3 | 4) { say 'Limit!7⏏5<EOL>␤    expecting …»

[10:55] <Xliff> m: sub a ($a where 2 | 3 | 4) { say 'Limit!' }; sub a (Int() $a) { say 'Forced Int!' }; a(3); a(42); a('a')

[10:55] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of routine 'a'.  Did you mean to declare a multi-sub?␤at <tmp>:1␤------> 3; sub a (Int() $a) { say 'Forced Int!' }7⏏5; a(3); a(42); a('a')␤    expecting any of:␤        horiz…»

[10:55] <Xliff> m: multi sub a ($a where 2 | 3 | 4) { say 'Limit!' }; multi sub a (Int() $a) { say 'Forced Int!' }; a(3); a(42); a('a')

[10:55] <camelia> rakudo-moar 726a75e24: OUTPUT: «Forced Int!␤Forced Int!␤Forced Int!␤»

[10:55] <Xliff> I would almost say that this is not according to spec.

[10:56] <Xliff> I'd consider the where multi to be more restrictive than the coercive, so tested first.

[10:56] <Xliff> Is this worth a write-up in problem-solving?

[10:57] *** lizmat_ joined
[11:00] *** lizmat left
[11:21] *** lizmat_ is now known as lizmat

[11:38] *** Xliff left
[12:24] *** linkable6 left
[12:24] *** linkable6 joined
[12:26] <Geth> ¦ rakudo: dc74f08173 | (Elizabeth Mattijsen)++ | 6 files

[12:26] <Geth> ¦ rakudo: Move all ord/ords/chr/chrs methods to unicodey

[12:26] <Geth> ¦ rakudo: 

[12:26] <Geth> ¦ rakudo: Seems I wasn't ready yet.  Again, no functional changes, all unicodey

[12:26] <Geth> ¦ rakudo: stuff should now be in one place, so work on optimizing and making them

[12:26] <Geth> ¦ rakudo: more consistent should now be able to start.

[12:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dc74f08173

[13:01] <lizmat> afk for a few hours&

[13:23] <vrurg> m: multi sub a (Int $a where 2 | 3 | 4) { say 'Limit!' }; multi sub a (Int() $a) { say 'Forced Int!' }; a(3); a(42); a('a'); # Xliff type goes first in this case

[13:23] <camelia> rakudo-moar 726a75e24: OUTPUT: «Limit!␤Forced Int!␤Forced Int!␤»

[13:35] *** frost-lab left
[14:34] <Geth> ¦ rakudo: a7c57a01e8 | (Vadim Belman)++ | lib/Test.rakumod

[14:34] <Geth> ¦ rakudo: Make subtest output a header

[14:34] <Geth> ¦ rakudo: 

[14:34] <Geth> ¦ rakudo: Something I always wanted it to do. Now it behaves similar to Perl's

[14:34] <Geth> ¦ rakudo: Test::More module and prints `# Subtest: description` before actually

[14:34] <Geth> ¦ rakudo: starting doing its work.

[14:34] <Geth> ¦ rakudo: 

[14:34] <Geth> ¦ rakudo: This commit also introduces `:force-informative` argument for `_diag`.

[14:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a7c57a01e8

[14:34] <Geth> ¦ rakudo: 8fc4cb56c6 | (Vadim Belman)++ (committed using GitHub Web editor) | lib/Test.rakumod

[14:34] <Geth> ¦ rakudo: Merge pull request #4280 from vrurg/rakudo_4266

[14:34] <Geth> ¦ rakudo: 

[14:34] <Geth> ¦ rakudo: Make subtest output a header

[14:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8fc4cb56c6

[14:34] <Geth> ¦ roast: f5c971b1b7 | (Vadim Belman)++ | S24-testing/3-output.t

[14:34] <Geth> ¦ roast: Improve test for subtest output

[14:34] <Geth> ¦ roast: 

[14:34] <Geth> ¦ roast: Take into account additional header from a subtest output which reports

[14:34] <Geth> ¦ roast: subtest message and looks like:

[14:34] <Geth> ¦ roast: 

[14:34] <Geth> ¦ roast:    # Subtest: message

[14:34] <Geth> ¦ roast: 

[14:34] <Geth> ¦ roast: <…commit message has 6 more lines…>

[14:34] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f5c971b1b7

[14:34] <Geth> ¦ roast: 0069f6927a | (Vadim Belman)++ (committed using GitHub Web editor) | S24-testing/3-output.t

[14:34] <Geth> ¦ roast: Merge pull request #726 from vrurg/rakudo_4266

[14:34] <Geth> ¦ roast: 

[14:34] <Geth> ¦ roast: Improve test for subtest output

[14:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0069f6927a

[16:41] *** domidumont left
[17:06] *** linkable6 left
[17:07] *** linkable6 joined
[17:10] *** sourceable6 joined
[17:27] <Geth> ¦ rakudo/new-disp: 6d6017b315 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[17:27] <Geth> ¦ rakudo/new-disp: Prepare multi dispatch for new-disp resumption

[17:27] <Geth> ¦ rakudo/new-disp: 

[17:27] <Geth> ¦ rakudo/new-disp: We'll use the resumption mechanism not only for `callsame` and the like,

[17:27] <Geth> ¦ rakudo/new-disp: but also as a means to try candidates with `where` clauses and the like

[17:27] <Geth> ¦ rakudo/new-disp: with only a single invoke, using a NYI mechanism to be added to MoarVM

[17:27] <Geth> ¦ rakudo/new-disp: in order to turn bind failures into a dispatch resumption. This re-works

[17:27] <Geth> ¦ rakudo/new-disp: the new-disp multi dispatch handling in preparation for both of these,

[17:27] <Geth> ¦ rakudo/new-disp: while trying to keep the cost low for the common case of a multiple

[17:27] <Geth> ¦ rakudo/new-disp: dispatch that can be decided on nominal types only and never resumes.

[17:28] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/6d6017b315

[17:35] *** HarmtH_ left
[18:06] *** HarmtH joined
[18:08] *** linkable6 left
[18:09] *** linkable6 joined
[18:36] *** ggoebel joined
[18:39] <Geth> ¦ rakudo: 2a972b2408 | (Elizabeth Mattijsen)++ | src/core.c/unicodey.pm6

[18:39] <Geth> ¦ rakudo: Make the .ord method a proper multi

[18:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2a972b2408

[18:39] *** HarmtH left
[18:42] *** HarmtH joined
[19:07] <Geth> ¦ rakudo: 92dc60b768 | (Elizabeth Mattijsen)++ | src/core.c/unicodey.pm6

[19:07] <Geth> ¦ rakudo: Make Str:U.ord die instead of silently returning Nil

[19:07] <Geth> ¦ rakudo: 

[19:07] <Geth> ¦ rakudo: The converse Int:U.chr also dies, so it only seems appropriate.

[19:07] <Geth> ¦ rakudo: 

[19:07] <Geth> ¦ rakudo: This does not make any spectest fail, but may have some ecosystem

[19:07] <Geth> ¦ rakudo: fallout.  In which case, this commit should be reverted and we should

[19:07] <Geth> ¦ rakudo: consider making Int:U.chr also return Nil for consistency.

[19:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/92dc60b768

[19:18] *** b2gills left
[19:18] <MasterDuke> lizmat: did you catch my question last night?

[19:18] <tellable6> 2021-03-31T00:22:52Z #raku-dev <vrurg> MasterDuke https://gist.github.com/vrurg/ef54cb5f45f8e67c68222ebe1ba3f8c5

[19:19] <lizmat> MasterDuke : guess I didn't, on which channel ?

[19:19] <MasterDuke> here i think

[19:19] <MasterDuke> https://colabti.org/irclogger/irclogger_log/raku-dev?date=2021-03-30#l171

[19:21] <lizmat> MasterDuke: I'm pretty sure it propped up in the spectests

[19:22] <lizmat> so, if it doesn't anymore, then we're set I guess  :-)

[19:32] <vrurg> .ask sena_kun Trying to prepare for regular blin runs. Can't build docker, complains of 'E: The repository 'https://dl.bintray.com/nxadm/rakudo-pkg-debs buster Release' does not have a Release file.'

[19:32] <tellable6> vrurg, I'll pass your message to sena_kun

[19:32] <sena_kun> vrurg, oh noes, bintray is now gone. :S

[19:32] <sena_kun> I have some replacement, but I don't immediately know where to apply it.

[19:33] <vrurg> sena_kun: Ok. I have plenty of tasks anyway. Will run it manually when needed for a while.

[19:33] <sena_kun> vrurg, I found it. :)

[19:34] <sena_kun> So now there is https://github.com/Raku/Blin/blob/master/docker/Dockerfile#L18-L20

[19:34] <sena_kun> But we need to use deb https://dl.cloudsmith.io/public/nxadm-pkgs/rakudo-pkg/deb/ubuntu xenial (or not xenial) and key_url: https://dl.cloudsmith.io/public/nxadm-pkgs/rakudo-pkg/gpg.0DD4CA7EB1C6CC6B.key

[19:34] <sena_kun> I'll try to patch it now

[19:35] <vrurg> Ok, I'll wait for the patch.

[19:52] *** bobv left
[19:59] <MasterDuke> committable6: 2020.10,2020.11,2020.12,2021.02,2021.03 (^10_000_000).grep(*.is-prime).elems.say; say now - INIT now

[20:00] <committable6> MasterDuke, ¦2020.10: «664579␤2.38988048␤» ¦2020.11: «664579␤9.1360257␤» ¦2020.12: «664579␤4.35999185␤» ¦2021.02: «664579␤4.4333875␤» ¦2021.03: «664579␤4.368144␤»

[20:00] <MasterDuke> uh, wtf?

[20:01] <lizmat> yeah, that's weirtd

[20:01] <MasterDuke> benchable6: 2020.10,2021.03 my $a := (^1_000_000).grep(*.is-prime).elems

[20:01] <benchable6> MasterDuke, starting to benchmark the 2 given commits

[20:01] <benchable6> MasterDuke, ¦2020.10: «0.3841» ¦2021.03: «0.5610»

[20:01] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[20:02] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[20:02] <AlexDaniel`> hmmm

[20:02] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[20:02] <AlexDaniel`> bisectable is probably more stable in that sense, just give it a condition like < 3.0

[20:02] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[20:03] <MasterDuke> yeah, benchable6 needs a little attention

[20:03] <benchable6> MasterDuke, benchmarked the given commits and found a performance difference > 10%, now trying to bisect

[20:03] <benchable6> MasterDuke, https://gist.github.com/24279834ec1c82a6b3f5695aee37af08

[20:03] <AlexDaniel`> but it's not wrong

[20:04] <AlexDaniel`> I think

[20:04] <MasterDuke> 27fb3ec

[20:04] <MasterDuke> linkable6: 27fb3ec

[20:04] <MasterDuke> well, there appear to be some commits related to the new coercion stuff in the mix

[20:04] <lizmat> ah, the coercion protocol

[20:04] <AlexDaniel`> committable6: 27fb3ec^,27fb3ec (^10_000_000).grep(*.is-prime).elems.say; say now - INIT now

[20:05] <committable6> AlexDaniel`, ¦27fb3ec^,27fb3ec: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[20:05] <AlexDaniel`>  * committable6: 27fb3ec^,27fb3ec (^1_000_000).grep(*.is-prime).elems.say; say now - INIT now

[20:05] <AlexDaniel`> committable6: 27fb3ec^,27fb3ec (^1_000_000).grep(*.is-prime).elems.say; say now - INIT now

[20:05] <committable6> AlexDaniel`, ¦27fb3ec^: «78498␤2.213962␤» ¦27fb3ec: «78498␤2.2355013␤»

[20:05] *** Geth left
[20:05] <AlexDaniel`> MasterDuke: or maybe not?

[20:06] <MasterDuke> it sometimes seems to be off by one or two, but it's usually pretty close

[20:06] <MasterDuke> committable6: 27fb3ec~5,27fb3ec (^1_000_000).grep(*.is-prime).elems.say; say now - INIT now

[20:06] <committable6> MasterDuke, ¦27fb3ec~5: «78498␤0.2546397␤» ¦27fb3ec: «78498␤2.2115329␤»

[20:07] <AlexDaniel`> committable6: 27fb3ec~5...27fb3ec (^1_000_000).grep(*.is-prime).elems.say; say now - INIT now

[20:07] <committable6> AlexDaniel`, Bad start, cannot find a commit for “27fb3ec~5.”

[20:07] <AlexDaniel`> rly

[20:07] <MasterDuke> committable6: 27fb3ec~5..27fb3ec (^1_000_000).grep(*.is-prime).elems.say; say now - INIT now

[20:07] <committable6> MasterDuke, ¦fa2013d: «78498␤0.2494804␤» ¦b129f31: «78498␤0.2432479␤» ¦2a5dd9e: «78498␤0.2364339␤» ¦f2d7328: «78498␤2.169383␤» ¦2675813: «78498␤2.2807079␤» ¦81f3334: «78498␤2.13249087␤» ¦27fb3ec: «78498␤2.172161␤»

[20:08] * AlexDaniel` nods

[20:08] <MasterDuke> heh, though i've thought for a while that `..` support should be removed, that might be the first time it's ever been used

[20:09] <AlexDaniel`> yeah, I did use it sometimes too

[20:09] <AlexDaniel`> for much wider ranges, like 50 or 100

[20:09] <MasterDuke> f2d7328 is "The first draft of new coercion semantics"

[20:09] <AlexDaniel`> I think there was one month when there were just a few commits, and I did a range between two releases once

[20:10] <MasterDuke> it's not that much code removed to get rid of it, i guess there's no reason to given it is/has actually been used

[20:11] <sena_kun> vrurg, I updated the dockerfile.

[20:11] <sena_kun> vrurg, https://github.com/Raku/Blin/pull/30

[20:12] <vrurg> sena_kun: I saw the notification. :) Perhaps it's also time to merge ugexe branch?

[20:12] <sena_kun> vrurg, probably, I'll take a look at it soon.

[20:12] <sena_kun> And yes, probably a good idea.

[20:13] *** ggoebel left
[20:16] *** ggoebel joined
[20:17] <MasterDuke> AlexDaniel`: to be honest, i'm not quite sure why benchable6 gets off by a couple commits. i thought i'd worked out the logic (more than once!) and it was sound. istr we've even discussed this before and you agreed it was correct

[20:18] <AlexDaniel`> I don't remember, need to look through it again

[20:21] <MasterDuke> of course it might just be minor fluctuations in the timing throwing it off

[20:24] <MasterDuke> oh, Geth is down again?

[20:24] <lizmat> paging the tyil  :-)

[20:25] <japhb> Did tyil ever figure out what was causing it to fall off?  ISTR there was something about it not responding to Freenode pings?

[20:31] <sena_kun> vrurg, I applied the patch suggested for Blin and technically the branch is ready. Can you please do a blin run with the branch once again? If it will look OK, then we can merge it.

[20:35] <lizmat> japhb: yeah, Geth is not seeing freenode's PINGs, so it doesn't PONG, so it's kicked off

[20:37] <japhb> That's kinda odd

[20:37] <vrurg> sena_kun: curious, but to pull ugexe-patch-1 branch I had to do 'pull --rebase' or it resulted in a conflict.

[20:38] <sena_kun> vrurg, yes, I did a rebase to include dockerfile fix, sorry.

[20:38] <vrurg> sena_kun: failed with 'no build for end point'

[20:39] <sena_kun> vrurg, oops, someone has commited something and the build is not ready yet, I think.

[20:39] <sena_kun> vrurg, it'll fix it self in a couple of minutes I believe.

[20:39] <vrurg> Ah, likely so. I'll try to remember to try it again.

[20:41] <vrurg> sena_kun: meanwhile, docker build: 'Warning: apt-key output should not be parsed (stdout is not a terminal)' and 'no valid OpenPGP data found'

[20:42] <sena_kun> vrurg, is it just a warning or an error?

[20:42] <sena_kun> Because I was able to build an image.

[20:42] <vrurg> sena_kun: The failing command is: 'The command '/bin/sh -c apt-get update && apt-get install -y $pkgs_first &&     curl -1sLf 'https://dl.cloudsmith.io/public/nxadm-pkgs/rakudo-pkg/gpg.0DD4CA7EB1C6CC6B.key' | apt-key add - &&     curl -1sLf 'https://dl.cloudsmith.io/public/nxadm-pkgs/rakudo-pkg/config.deb.txt?distro=debian&codename=buster' > /etc/apt/sources.list.d/nxadm-pkgs-rakudo-pkg.list' returned a non-zero code: 2'

[20:43] <sena_kun> argh

[20:43] <sena_kun> I wonder what's different.

[20:44] <sena_kun> vrurg, seems like we have to write it in some other way, but right now I have no time, I suspect you too. :S

[20:45] <vrurg> sena_kun: you're right, I can run commands but no more than that.

[20:45] <sena_kun> vrurg, sorry, cannot do a lot if I can't reproduce. Then some next time.

[20:46] <vrurg> sena_kun: but there is no rush. I still have to decide how to post the results. So far adding a separate blog on vrurg.github.io looks like the best option.

[20:46] <lizmat> blog posts are generally a good idea  :-)

[20:47] <vrurg> lizmat: this one would consist of blin reports only.

[20:47] <lizmat> still....     :-)

[20:53] <vrurg> sena_kun: blin runs ok so far. 200+ tested. Will see if it gets all the way down the end.

[20:55] * lizmat wonders whether it's too early to consider renaming Raku to "Perl 10"

[20:58] <vrurg> lizmat: do really value your life? ;)

[20:58] <lizmat> :-)   I do

[20:58] <lizmat> but I guess it's the time of the year...

[20:58] <sena_kun> vrurg, wait, how is it running if you were enable to build an image?

[20:59] <vrurg> sena_kun: on the second attempt docker failed much later with '/bin/sh: 1: zef: not found'

[20:59] <lizmat> maybe I should wait a few hours

[20:59] <sena_kun> vrurg, are you running it without docker iirc?

[20:59] <vrurg> lizmat: I'm not worried, but some people will, for sure...

[21:00] <vrurg> sena_kun: I do manual runs in a disposable VM. Docker I try on the host machine.

[21:01] <vrurg> lizmat: I try to imagine Will's reaction at the joke. And then decide that watching a horror move would be less harmful...

[21:01] <sena_kun> vrurg, oh, it clears the case up then.

[21:01] <lizmat> hehe   :-)

[21:02] <lizmat> But Will was one step ahead of my consideration  :-)

[21:28] *** dogbert11 joined
[21:31] *** dogbert17 left
[21:32] *** dogbert17 joined
[21:35] *** dogbert11 left
[22:18] * lizmat just pushed https://github.com/rakudo/rakudo/commit/18c4c5d4eb3cf12dd59efe49645e25f2cb4e30ea  Make List.sum about 30% faster

[22:19] <lizmat> sleep&

[22:32] <moon-child> lizmat++

[23:58] <[Coke]> .

[23:58] <tellable6> 2021-03-30T16:25:45Z #raku-dev <jmerelo> [Coke] thanks :-)

