[00:02] *** reportable6 left
[00:03] *** reportable6 left
[01:04] *** reportable6 joined
[01:52] <Geth> ¦ rakudo: 08f5448de0 | (Vadim Belman)++ | src/Perl6/Metamodel/ClassHOW.nqp
[01:52] <Geth> ¦ rakudo: Fix a race in ClassHOW new_type
[01:52] <Geth> ¦ rakudo: 
[01:52] <Geth> ¦ rakudo: Anonymous class ID is storead in a class `my` variable and was
[01:52] <Geth> ¦ rakudo: incremented by `new_type` method without a lock protection. In my
[01:52] <Geth> ¦ rakudo: testing the probablity of creating a clashing name was ~0.25% for
[01:52] <Geth> ¦ rakudo: concurrently invoked `new_type` methods.
[01:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/08f5448de0
[01:52] <Geth> ¦ rakudo: 83b0bca78a | (Vadim Belman)++ | src/Perl6/Metamodel/ClassHOW.nqp
[01:52] <Geth> ¦ rakudo: Narrow the lock protected code down to the increment only
[01:52] <Geth> ¦ rakudo: 
[01:52] <Geth> ¦ rakudo: Minor performance improvement. Especially for cases where class name is
[01:52] <Geth> ¦ rakudo: provided.
[01:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/83b0bca78a
[01:52] <Geth> ¦ rakudo: b7f088b5a1 | (Vadim Belman)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/ClassHOW.nqp
[01:52] <Geth> ¦ rakudo: Merge pull request #4482 from vrurg/fix-class-id-race
[01:52] <Geth> ¦ rakudo: 
[01:52] <Geth> ¦ rakudo: Fix a race in ClassHOW new_type
[01:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b7f088b5a1
[02:04] *** linkable6 left
[02:04] *** evalable6 left
[02:05] *** linkable6 joined
[02:06] *** evalable6 joined
[02:13] <japhb> vrurg: Any particular reason not to just make $anon_id an atomicint?
[02:14] <vrurg> japhb: Aha, the simplest one: NQP doesn't do atomics. :D
[02:17] <vrurg> Perhaps it's possible to declare an int with appropriate representation, but JVM would need a lock anyway.
[02:25] <japhb> nodndo, makes sense
[02:25] <japhb> *nodnod
[02:42] <moon-child> java doesn't have atomics???
[02:42] <moon-child> I knew they were focused on doing concurrency well...how can they not have atomics?
[02:49] <[Coke]> I assumed they meant nqp atomics.
[02:50] <[Coke]> Java does have an AtomicInteger
[04:22] <japhb> moon-child: [Coke] was reading (my side at least) correctly.  The JVM port doesn't have enough active contributors right now to keep up with MoarVM improvements, so there are often deep things that we conditionally compile differently on MoarVM and JVM (and JS) backends, or that are only fully supported on MoarVM.
[04:33] <moon-child> got it
[04:44] *** linkable6 left
[04:44] *** evalable6 left
[04:47] *** linkable6 joined
[05:46] *** evalable6 joined
[06:04] *** reportable6 left
[06:06] *** reportable6 joined
[08:09] <Xliff> Is it possible for a raku script to start a stay-resident subroutine and return control to the executing shell?
[08:10] <Xliff> Something like daemonize, but in pure 
[08:10] <Xliff> Raku?
[08:24] <Altai-man> Xliff, "pure Raku" includes NativeCall or?
[08:29] <Xliff> Sure! Why not?
[08:33] <Altai-man> Xliff, if NativeCall is allowed you can look at https://github.com/hipek8/p6-UNIX-Daemonize if it's of any help.
[08:33] <Altai-man> Or other solutions I can think of are based on unix daemonize, which is C and so NativeCall.
[08:34] <Altai-man> Xliff, ah, except the tickets say it's broken, but with your experience you can bitrot it maybe?
[08:34] <Altai-man> oops, *de-bitrot
[08:39] <lizmat> Xliff: maybe this is a simpler way:
[08:39] <lizmat> m: sub daemonize(&code) { Thread.new(:&code).run }; daemonize { say "sleeping at {time}"; sleep 5; say "done at {time}" }
[08:39] <camelia> rakudo-moar b7f088b5a: OUTPUT: «sleeping at 1627634384␤done at 1627634389␤»
[08:40] <lizmat> in combination with closing STDIN/STDOUT and such
[08:43] <moon-child> lizmat: that's not really a daemon, though.  You can't close the terminal and have that code continue to run
[08:44] <lizmat> not even after closing STDIN/STDOUT/STDERR ?
[08:47] <moon-child> afaik once the main thread returns from main, the c runtime (at least on linux) will call exit_group(), which kills all threads
[08:49] <lizmat> indeed   :-(
[08:51] <moon-child> depends on how 'pure' pure raku is, maybe  Proc::Async.new: 'raku', 'myscript.raku', '--doitforreal'  would work
[08:52] <lizmat> I think Cro does it somehow, for production purposes?
[08:52] <lizmat> maybe #cro would be a good place to ask?
[08:54] <moon-child> yeah, Proc::Async seems to work
[08:58] <moon-child> Xliff: http://ix.io/3usR
[08:58] <Xliff> Heh --doitforreal
[08:58] <moon-child> I don't think it's going to get much better than that.  C has to fork, and you can't really fork in raku
[08:59] *** linkable6 left
[08:59] *** evalable6 left
[08:59] <Xliff> moon-child: Thanks!
[08:59] <moon-child> alternative to closing in/out/error might be handling sighup and closing them only once you get that.  Then you can post status messages until the terminal is closed
[09:01] *** evalable6 joined
[09:04] <MasterDuke> there is actually an nqp::fork, but it isn't used/exposed in rakudo
[09:06] <moon-child> yeah, but mvm makes threads, and you can't really use fork together with threads
[09:07] <MasterDuke> brrt figured something out, i think there was some relatively recent posix addition to handle threads better than before
[09:08] <moon-child> ooh, really?  Cool
[09:09] <moon-child> (I mean, death to fork; but still that's cool)
[09:32] *** patrickb joined
[10:00] *** linkable6 joined
[10:30] *** sena_kun joined
[10:49] <Geth> ¦ nqp/new-disp: 3c39060361 | Altai-man++ (committed using GitHub Web editor) | tools/templates/MOAR_REVISION
[10:49] <Geth> ¦ nqp/new-disp: Bump MoarVM to new-disp
[10:49] <Geth> ¦ nqp/new-disp: 
[10:49] <Geth> ¦ nqp/new-disp: This fixes building of nqp with --gen-moar option and partially unblocks Blin.
[10:49] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/3c39060361
[10:51] <Geth> ¦ rakudo/new-disp: 2491851012 | Altai-man++ (committed using GitHub Web editor) | tools/templates/NQP_REVISION
[10:51] <Geth> ¦ rakudo/new-disp: Bump NQP to new-disp
[10:51] <Geth> ¦ rakudo/new-disp: 
[10:51] <Geth> ¦ rakudo/new-disp: This fixes building of rakudo with --gen-moar --gen-nqp options and unblocks Blin.
[10:51] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/2491851012
[11:10] <nine> moon-child: actually, you can fork in Raku. As long as you've never started any worker threads
[11:11] <nine> brrt++ implemented support for fork
[11:26] <lizmat> but is it exposed?
[11:36] <nine> I don't know
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:50] <ugexe> i would think you couldnt have started any libuv based threads
[12:52] <leont> Yeah, threads and forking don't really work well together.
[12:53] <leont> Or to be precise, after forking a multi-threaded program you're limited to async-signal-safe functions, unless special precautions have been taken.
[12:54] <leont> Precautions can be taken with help of pthread_at_fork; ironically making fork no longer async-signal-safe
[13:22] *** [Coke]_ joined
[13:24] *** raydiak_ joined
[13:25] *** sjn_ joined
[13:34] *** sjn left
[13:34] *** raydiak left
[15:24] *** sjn_ is now known as sjn
[16:12] <Geth> ¦ nqp/new-disp: a258a33671 | (Jonathan Worthington)++ | src/core/dispatchers.nqp
[16:12] <Geth> ¦ nqp/new-disp: Handle call sites megamorphic in method name
[16:12] <Geth> ¦ nqp/new-disp: 
[16:12] <Geth> ¦ nqp/new-disp: Build a lookup table and use it at such callsites, rather than blowing
[16:12] <Geth> ¦ nqp/new-disp: up the inline cache with a ton of entries.
[16:12] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/a258a33671
[16:12] <Geth> ¦ nqp/new-disp: 2e107b0de9 | (Jonathan Worthington)++ | src/core/NQPMu.nqp
[16:12] <Geth> ¦ nqp/new-disp: Avoid a slurp/flatten in NQP object creation
[16:12] <Geth> ¦ nqp/new-disp: 
[16:12] <Geth> ¦ nqp/new-disp: Borrow a trick from Rakudo, except we can also assume that nobody will
[16:12] <Geth> ¦ nqp/new-disp: override bless in NQP.
[16:12] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/2e107b0de9
[16:12] <Geth> ¦ rakudo/new-disp: 123046c75d | (Jonathan Worthington)++ | 13 files
[16:12] <Geth> ¦ rakudo/new-disp: Adapt to NQP API change
[16:12] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/123046c75d
[16:55] *** melezhik joined
[16:56] <melezhik> the latest rakudo version (2021.07) started to produce `Please use exitcode and/or signal methods (status is to be removed in 2022.06) instead.` warning on my code
[16:56] <melezhik> https://gist.github.com/melezhik/95b0778bd0480e84fb2a91edb7cde5a3
[16:57] <melezhik> I wonder if this line of code confuses Rakudo? https://github.com/melezhik/Sparrow6/blob/master/lib/Sparrow6/Task/Runner/Helpers/Perl.pm6#L143
[16:58] <melezhik> my impression complain caused by method is  named `foo-status`?
[16:58] <melezhik> `handle-hook-status` status actually ...
[16:58] <sena_kun> melezhik, can you please show the code?
[16:58] <sena_kun> m: sub foo-status {}; foo-status;
[16:58] <camelia> rakudo-moar b7f088b5a: ( no output )
[16:58] <melezhik> already did - https://github.com/melezhik/Sparrow6/blob/master/lib/Sparrow6/Task/Runner/Helpers/Perl.pm6#L143
[16:59] <melezhik> oh, looks like it is here - https://github.com/melezhik/Sparrow6/blob/master/lib/Sparrow6/Task/Runner/Helpers/Common.pm6#L211
[16:59] <melezhik> it's just trace from Rakudo does not show that ...
[17:00] <sena_kun> melezhik, the name is kinda similar, so that's it confusing. the call to `status` you linked to was indeed deprecated
[17:00] <melezhik> yeah, I see that now
[17:00] <melezhik> what I am supposed to use instead?
[17:01] <sena_kun> the exact same formula would be `($cmd.exitcode +< 8) +| $cmd.signal`, that's the implementation of the `status` method.
[17:02] <melezhik> looks like in my case it'd be enough to have `.exitcode` instead ..
[17:03] <melezhik> just because I use `status` like that - https://github.com/melezhik/Sparrow6/blob/master/lib/Sparrow6/Task/Runner/Helpers/Common.pm6#L211-L213
[17:04] <sena_kun> melezhik, could be, yes
[17:06] <lizmat> I guess the bug is that the deprecation message is showing the wrong line number :-(
[17:07] <MasterDuke> Xliff just mentioned getting some wrong line numbers as of recently over in #raku
[17:10] <melezhik> lizmat - "I guess the bug is that the deprecation message is showing the wrong line number" that is correct
[17:11] <melezhik> anyway my commit fixes the issue in Sparrow - https://github.com/melezhik/Sparrow6/commit/c1663dd2f48ebfd9cdbdd383ae99a9a801b467ac
[17:11] <melezhik> but yeah, I guess if someone call `.status` from method named `foo-bar-status` it will produce wrong line number , and this is a bug
[17:12] <sena_kun> melezhik, is hyphen at https://github.com/melezhik/Sparrow6/commit/c1663dd2f48ebfd9cdbdd383ae99a9a801b467ac#diff-bf3f30f31d6f8d8d8f5aa4a80ade09a7cc9c251a29ed9a1d3f098cc0ee856b86R194 correct?
[17:17] *** Xliff left
[17:19] <melezhik> upps, it's typo 
[17:19] <melezhik> thanks for pointing this out
[17:52] *** sena_kun left
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:29] *** [Coke]_ is now known as [Coke]
[18:35] *** melezhik left
[20:10] <lizmat> m: dd %(a => 42, b => 666)
[20:10] <camelia> rakudo-moar b7f088b5a: OUTPUT: «Hash % = {:a(42), :b(666)}␤»
[20:10] <lizmat> so, %() creates a mutable Hash
[20:10] <lizmat> m: dd @(42,66)
[20:10] <camelia> rakudo-moar b7f088b5a: OUTPUT: «(42, 66)␤»
[20:10] <lizmat> yet @() creates an immutable list
[20:11] <lizmat> I feel this is inconsistent: either %() should create a Map, or @() should create an Array
[20:13] <lizmat> I'm leaning towards %() creating a Map, as we currently do not have syntactic sugar to create Maps and we *do* have { a => 42, b => 666 } to create Hashes
[20:13] <lizmat> and [42,666] to create Arrays
[20:25] <japhb> lizmat: What exactly is produced by `sub hash`?  It's directly handing back the thing that was created by *%h, but what is that?
[20:26] <japhb> (IIRC it's decontainerized, but I don't know if it's a Hash with every key bound directly to a value, or a Map, or something else entirely.)
[20:27] <japhb> Also, it's not clear to me that hash(...named args...) and hash(...mixed positional and named args...) necessarily produce the same type out.
[20:29] *** linkable6 left
[20:29] *** evalable6 left
[20:29] <lizmat> looking at the code, it slurps all positionals and all nameds and creates a Hash from that
[20:31] *** linkable6 joined
[20:36] <lizmat> re deprecation line numbers: yes, they appear meh
[20:43] <lizmat> looks like it cannot handle the "is DEPRECATED" trait on a proto
[20:47] <lizmat> afk&
[21:39] *** patrickb left
[22:24] <Geth> ¦ rakudo: 54f1b7a5f2 | (Elizabeth Mattijsen)++ | src/core.c/Proc.pm6
[22:24] <Geth> ¦ rakudo: Fix location of Proc.status deprecation message
[22:24] <Geth> ¦ rakudo: 
[22:24] <Geth> ¦ rakudo: Apparently, putting an "is DEPRECATED" on a proto, breaks things.
[22:24] <Geth> ¦ rakudo: So move it to the candidates.  This will at least fix the issue for
[22:24] <Geth> ¦ rakudo: now.  Would be great if we could make "is DEPRECATED" work on protos
[22:24] <Geth> ¦ rakudo: as well.
[22:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/54f1b7a5f2
[22:35] <Geth> ¦ roast: 7c13d5d876 | (Elizabeth Mattijsen)++ | S02-types/isDEPRECATED.t
[22:35] <Geth> ¦ roast: Add test for deprecation of Proc.status
[22:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/7c13d5d876
[22:45] *** Xliff joined
[22:48] *** casaca joined
[23:16] *** casaca left
[23:18] *** casaca joined
[23:26] *** casaca left
[23:27] *** casaca joined
[23:30] *** evalable6 joined
[23:31] *** casaca left
[23:32] *** Xliff left
