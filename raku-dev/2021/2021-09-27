[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[01:04] *** evalable6 left
[01:04] *** linkable6 left
[01:07] *** evalable6 joined
[01:29] *** frost joined
[02:29] *** greppable6 left
[02:29] *** releasable6 left
[02:29] *** committable6 left
[02:29] *** statisfiable6 left
[02:29] *** nativecallable6 left
[02:29] *** benchable6 left
[02:29] *** bisectable6 left
[02:29] *** squashable6 left
[02:29] *** tellable6 left
[02:29] *** quotable6 left
[02:29] *** unicodable6 left
[02:29] *** sourceable6 left
[02:29] *** bloatable6 left
[02:29] *** evalable6 left
[02:29] *** shareable6 left
[02:29] *** reportable6 left
[02:29] *** coverable6 left
[02:29] *** notable6 left
[02:30] *** committable6 joined
[02:30] *** sourceable6 joined
[02:31] *** coverable6 joined
[02:31] *** shareable6 joined
[02:31] *** bisectable6 joined
[02:32] *** quotable6 joined
[03:29] *** unicodable6 joined
[03:30] *** squashable6 joined
[03:30] *** notable6 joined
[03:31] *** tellable6 joined
[03:31] *** releasable6 joined
[03:31] *** greppable6 joined
[04:00] *** squashable6 left
[04:00] *** squashable6 joined
[04:15] *** squashable6 left
[04:18] *** squashable6 joined
[04:29] *** evalable6 joined
[04:30] *** nativecallable6 joined
[05:07] *** linkable6 joined
[05:29] *** statisfiable6 joined
[05:30] *** bloatable6 joined
[05:48] *** tonyo left
[05:49] *** tonyo joined
[05:54] *** nebuchadnezzar left
[05:54] *** nebuchadnezzar joined
[06:02] *** reportable6 joined
[06:29] *** benchable6 joined
[08:48] *** patrickb joined
[08:50] *** Xliff left
[09:26] *** squashable6 left
[09:30] *** squashable6 joined
[09:59] *** lizmat_ joined
[10:03] *** lizmat left
[10:08] *** Xliff joined
[10:08] *** lizmat_ left
[10:09] *** lizmat joined
[10:14] *** |Tux| joined
[10:14] *** Tux__ joined
[10:16] <Xliff> Hello *!

[10:17] *** Tux__ left
[10:53] *** Altai-man joined
[10:59] *** frost left
[11:01] <Geth> ¦ rakudo/new-disp: 8e7e2e3b71 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[11:01] <Geth> ¦ rakudo/new-disp: If a sub returns `nqp::null`, map it to Mu

[11:01] <Geth> ¦ rakudo/new-disp: 

[11:01] <Geth> ¦ rakudo/new-disp: Modules likely shouldn't depend on this, but at least Slang::SQL does

[11:01] <Geth> ¦ rakudo/new-disp: so, and it's easy and cheap to keep it working.

[11:01] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/8e7e2e3b71

[11:02] *** patrickb left
[11:18] *** frost joined
[11:35] *** squashable6 left
[11:52] *** squashable6 joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:11] <Geth> ¦ rakudo/new-disp: 9a6c46cbe1 | (Jonathan Worthington)++ | src/core.c/Pair.pm6

[12:11] <Geth> ¦ rakudo/new-disp: Ensure Pair keys remain uncontainerized

[12:11] <Geth> ¦ rakudo/new-disp: 

[12:11] <Geth> ¦ rakudo/new-disp: A change in 00bb02935 to take advantage of caller-side decont caused a

[12:11] <Geth> ¦ rakudo/new-disp: change in semantics: the Cool type forces a defensive wrapper container

[12:11] <Geth> ¦ rakudo/new-disp: (due to Iterable ~~ Cool), and the removed `nqp::decont` thus meant the

[12:11] <Geth> ¦ rakudo/new-disp: key was stored containerized. Switch the type constraint to Str (which

[12:11] <Geth> ¦ rakudo/new-disp: is the overwhelmingly common case of Pair construction) in order to

[12:11] <Geth> ¦ rakudo/new-disp: reinstate existing behavior, which is depended on in modules.

[12:11] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/9a6c46cbe1

[13:00] <Geth> ¦ nqp/new-disp: bc6f976c27 | Altai-man++ (committed using GitHub Web editor) | tools/templates/MOAR_REVISION

[13:00] <Geth> ¦ nqp/new-disp: Update MOAR_REVISION

[13:00] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/bc6f976c27

[13:01] <Geth> ¦ rakudo/new-disp: 1d1565f1bb | Altai-man++ (committed using GitHub Web editor) | tools/templates/NQP_REVISION

[13:01] <Geth> ¦ rakudo/new-disp: Update NQP_REVISION

[13:01] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/1d1565f1bb

[13:03] <Altai-man> AlexDaniel, ping?

[13:15] *** frost left
[13:20] *** Altai-man left
[13:21] *** Altai-man joined
[13:25] <lizmat> notable6: weekly

[13:25] <notable6> lizmat, 3 notes: https://gist.github.com/78aa714f3f570a4b3bd1b65cbe97e71c

[13:25] <lizmat> notable6: weekly reset

[13:25] <notable6> lizmat, Moved existing notes to “weekly_2021-09-27T13:25:47Z”

[13:28] *** Altai-man left
[13:30] *** Altai-man joined
[16:12] *** Altai-man left
[16:49] <Geth> ¦ nqp/new-disp: 2329709a23 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[16:49] <Geth> ¦ nqp/new-disp: Add constant for callwith dispatch propagation

[16:49] <Geth> ¦ nqp/new-disp: 

[16:49] <Geth> ¦ nqp/new-disp: To be used for when a callwith's new values also need to take effect

[16:49] <Geth> ¦ nqp/new-disp: in an outer dispatch.

[16:49] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/2329709a23

[17:35] *** evalable6 left
[17:35] *** linkable6 left
[17:37] *** linkable6 joined
[18:03] *** reportable6 left
[18:05] *** reportable6 joined
[18:44] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/09/27/2021-39-programming-haku/

[18:52] <timo> does someone want to see if the package access to the SpectralLine constants (well, variables here) would be faster without a package in the middle, or with an actual constant keyword use?

[18:53] <lizmat> I would  :-)

[18:55] <timo> on top of, or as replacement for making Real -> num

[18:56] <timo> also perhaps call $!des.surf[$!cSurf] only once and re-use the value

[18:57] <lizmat> yeah, there's a lot of that in the algo used

[18:58] <timo> though the amount of surfaces seems to just be 4

[18:59] <timo> m: say cot(99)

[18:59] <camelia> rakudo-moar ba15173fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    cot used at line 1. Did you mean 'cos', 'not'?␤␤»

[19:04] <timo> so we really don't offer something for 1/tan(x)

[19:07] <timo> may not be able to look at it too thoroughly, but a rofile of a run of the program could be interesting

[19:21] <timo> and of course compare master to new-disp

[19:44] <Geth> ¦ nqp: 138a516d11 | (Ben Davies)++ | 2 files

[19:44] <Geth> ¦ nqp: Give NQPParametricRoleHOW a role_typecheck_list method

[19:44] <Geth> ¦ nqp: 

[19:44] <Geth> ¦ nqp: This allows Raku parametric roles to do nqp ones (e.g. weird HOWs).

[19:44] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/138a516d11

[19:44] <Geth> ¦ nqp: 010c73e7eb | (Ben Davies)++ | src/how/NQPParametricRoleHOW.nqp

[19:44] <Geth> ¦ nqp: Bind to NQPParametricRoleHOW's @!role_typecheck_list during BUILD

[19:44] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/010c73e7eb

[19:44] *** linkable6 left
[19:44] <Geth> ¦ nqp: c037aa464a | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[19:44] <Geth> ¦ nqp: Merge pull request #701 from Kaiepi/role-typecheck-list

[19:44] <Geth> ¦ nqp: 

[19:44] <Geth> ¦ nqp: Give NQPParametricRoleHOW a role_typecheck_list method

[19:44] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/c037aa464a

[20:35] *** evalable6 joined
[22:04] *** |Tux| left
[22:46] *** linkable6 joined
[23:31] *** AlexDaniel left
[23:47] *** AlexDaniel joined
