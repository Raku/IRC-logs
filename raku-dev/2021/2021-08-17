[00:02] *** reportable6 left
[00:06] *** reportable6 joined
[00:38] *** evalable6 joined
[01:04] <vrurg> greppable6: 'is\s+dynamic'

[01:04] <greppable6> vrurg, Found nothing!

[01:05] <vrurg> greppable6: 'is dynamic'

[01:05] <greppable6> vrurg, Found nothing!

[01:28] <vrurg> greppable6: CALLER::MY

[01:28] <greppable6> vrurg, 1 line, 1 module: https://gist.github.com/5b60799a97a2b304f405f8e8420051b6

[01:29] <vrurg> greppable6: CALLER::LEXICAL

[01:29] <greppable6> vrurg, 5 lines, 1 module: https://gist.github.com/953da7bbffcb61eb0948988601a06c8a

[01:45] <vrurg> greppable6: LEXICAL

[01:45] <greppable6> vrurg, 25 lines, 3 modules: https://gist.github.com/f1821330f160e6e2596eb70ad88622ad

[02:37] *** linkable6 joined
[04:40] *** squashable6 left
[04:41] *** squashable6 joined
[04:55] *** squashable6 left
[04:57] *** squashable6 joined
[05:05] *** squashable6 left
[05:05] *** squashable6 joined
[06:00] *** frost joined
[06:02] *** reportable6 left
[07:02] *** unicodable6 left
[07:02] *** bloatable6 left
[07:02] *** statisfiable6 left
[07:02] *** sourceable6 left
[07:02] *** committable6 left
[07:02] *** quotable6 left
[07:02] *** tellable6 left
[07:02] *** greppable6 left
[07:02] *** linkable6 left
[07:02] *** releasable6 left
[07:02] *** bisectable6 left
[07:02] *** notable6 left
[07:02] *** benchable6 left
[07:02] *** squashable6 left
[07:02] *** shareable6 left
[07:02] *** evalable6 left
[07:02] *** nativecallable6 left
[07:02] *** coverable6 left
[07:03] *** greppable6 joined
[07:03] *** sourceable6 joined
[07:03] *** bloatable6 joined
[07:04] *** coverable6 joined
[07:04] *** evalable6 joined
[07:04] *** statisfiable6 joined
[07:05] *** unicodable6 joined
[07:05] *** quotable6 joined
[07:05] *** shareable6 joined
[07:05] *** notable6 joined
[08:04] *** linkable6 joined
[08:04] *** releasable6 joined
[08:04] *** nativecallable6 joined
[08:13] <sjn> quick question; why are the *able6 bots reset their connection so often?

[08:13] <sjn> resetting*

[08:17] <MasterDuke> AlexDaniel: ^^^

[08:21] <Geth> ¦ rakudo/exit-with-note: e7be747338 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.pm6

[08:21] <Geth> ¦ rakudo/exit-with-note: Allow a string to be specified with exit()

[08:21] <Geth> ¦ rakudo/exit-with-note: 

[08:21] <Geth> ¦ rakudo/exit-with-note: This came up recently in a blog post: having an easy way to exit a

[08:21] <Geth> ¦ rakudo/exit-with-note: CLI script with a message and an error, but *without* any stack trace.

[08:21] <Geth> ¦ rakudo/exit-with-note: 

[08:21] <Geth> ¦ rakudo/exit-with-note: In Perl, this is achieved with die() if the message does not have a

[08:21] <Geth> ¦ rakudo/exit-with-note: newline.

[08:21] <Geth> ¦ rakudo/exit-with-note: <…commit message has 10 more lines…>

[08:21] <Geth> ¦ rakudo/exit-with-note: review: https://github.com/rakudo/rakudo/commit/e7be747338

[08:22] <Geth> ¦ rakudo: lizmat++ created pull request #4494: Allow a string to be specified with exit()

[08:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4494

[08:22] <lizmat> FWIW, I've been getting disconnected the past days several times as well

[08:23] <lizmat> it seems that Libera.chat is doing some maintenance / upgrading

[08:23] <lizmat> [06:38:06] -glguy-	[Global Notice] We'll be rerouting 4 servers and restarting 2 servers shortly as part of scheduled maintenance. Updates will continue at the rate of a couple servers a week in this time slot as we upgrade the network to the new Debian release.

[08:24] <sjn> lizmat: did you mean "..if the message _has_ a newline" in the commit message above?

[08:24] <lizmat> no, *not* is my impression?

[08:24] <lizmat> aah... I *did* get it backwards!

[08:24] <sjn> perl -e 'die "foo"'; perl -e 'die "foo\n"'

[08:25] <lizmat> fixing it in the PR

[08:25] <AlexDaniel> sjn: I don't know! There's a rather agressive watchdog which kills them if nothing is received for a while

[08:26] <AlexDaniel> sjn: sometimes it gets triggered when nobody says anything :D

[08:26] <AlexDaniel> it used to be that IRC::Client would get stuck and not reconnect

[08:26] <AlexDaniel> which is why I added a watchdog

[08:27] <AlexDaniel> it's a total hack, but it worked

[08:27] <lizmat> sjn++   # keeping an eye on thngs!

[08:27] <sjn> are you able to run a tcpdump (or equivalent) to see if something happens on the network?

[08:39] <AlexDaniel> sjn: not sure how that'd help. I think this is the bug report: https://github.com/raku-community-modules/IRC-Client/issues/27

[08:41] <AlexDaniel> sjn: the watchdog is configured here https://github.com/Raku/whateverable/blob/f7f301303aed2d0dea57cc5b939eb2faf25ec598/services/whateverable%40.service#L45 and is notified here https://github.com/Raku/whateverable/blob/f7f301303aed2d0dea57cc5b939eb2faf25ec598/lib/Whateverable/Heartbeat.pm6#L25

[08:41] <AlexDaniel> (haha at “TODO below” but there is no todo)

[08:42] <AlexDaniel> sjn: and here's where it is called: https://github.com/Raku/whateverable/blob/f7f301303aed2d0dea57cc5b939eb2faf25ec598/lib/Whateverable.pm6#L143-L148

[08:42] <AlexDaniel> so basically, if somebody sends a message, then the watchdog is notified and the bot is kept alive

[08:42] <AlexDaniel> if it's too quiet, then the bots are killed

[08:43] <AlexDaniel> I can increase the timeout but then bots will be “stuck” reconnecting because of that bug in IRC::Client

[08:43] <sjn> killed by... who?

[08:43] <AlexDaniel> does that make sense?

[08:43] <AlexDaniel> systemd

[08:44] <AlexDaniel> oh also https://github.com/Raku/whateverable/issues/276

[09:03] *** squashable6 joined
[09:04] *** tellable6 joined
[09:04] *** bisectable6 joined
[09:05] *** committable6 joined
[09:05] *** benchable6 joined
[10:04] *** reportable6 joined
[10:33] *** dogbert11 left
[11:09] *** sena_kun joined
[12:03] *** reportable6 left
[13:34] *** codesections joined
[14:04] *** reportable6 joined
[14:52] *** frost left
[14:56] *** mattil joined
[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[16:12] *** linkable6 left
[16:12] *** evalable6 left
[16:13] *** evalable6 joined
[17:11] *** b2gills left
[17:11] *** b2gills joined
[17:25] *** sena_kun left
[18:03] *** reportable6 left
[18:04] *** reportable6 joined
[18:14] *** linkable6 joined
[18:59] <lizmat> weekly:  https://phoenixtrap.com/2021/08/17/perl-raku-best-frenemies/

[18:59] <notable6> lizmat, Noted! (weekly)

[19:31] *** discord-raku-bot left
[19:31] *** discord-raku-bot joined
[19:45] *** discord-raku-bot left
[19:46] *** discord-raku-bot joined
[20:21] *** mattil left
[20:31] <Geth> ¦ nqp/new-disp: 86 commits pushed by (Jonathan Worthington)++, Altai-man++

[20:31] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/compare/6c28ff34b23f...c1fcaa61e530

[20:32] <Geth> ¦ rakudo/new-disp: 105 commits pushed by (Jonathan Worthington)++, (Stefan Seifert)++, Altai-man++

[20:32] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/compare/9c83541e2cb0...0fd5d99e7154

[20:34] <Geth> ¦ nqp/new-disp: 4 commits pushed by (Stefan Seifert)++

[20:34] <Geth> ¦ nqp/new-disp: f5d0fde425 | Map the new gettypehllrole op in preparation for hllization dispatchers

[20:34] <Geth> ¦ nqp/new-disp: 32b465679a | Re-bootstrap to get the gettypehllrole op for the hllization dispatcher

[20:34] <Geth> ¦ nqp/new-disp: badc8825e9 | Replace nqp::hllize op with hllization dispatcher on MoarVM

[20:34] <Geth> ¦ nqp/new-disp: 6d1b8925c2 | Replace nqp::hllizefor op with hllization dispatcher on MoarVM

[20:34] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/compare/c1fcaa61e530...6d1b8925c264

[20:34] <Geth> ¦ rakudo/new-disp: 27f37a6b98 | (Stefan Seifert)++ | src/Perl6/Actions.nqp

[20:34] <Geth> ¦ rakudo/new-disp: Fix argument to nqp::hllize inadvertently getting a name

[20:34] <Geth> ¦ rakudo/new-disp: 

[20:34] <Geth> ¦ rakudo/new-disp: The value of a Pair in an arglist gets a .named annotation. The p6callmethodhow

[20:34] <Geth> ¦ rakudo/new-disp: desugar re-used the existing QAST::Op node, modified it and used it as argument

[20:34] <Geth> ¦ rakudo/new-disp: to nqp::hllize. The new dispatcher based implementation doesn't cope with the

[20:34] <Geth> ¦ rakudo/new-disp: name though. Fix by creating a new un-named QAST::Op and copying over the data

[20:34] <Geth> ¦ rakudo/new-disp: we need.

[20:34] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/27f37a6b98

[20:34] <Geth> ¦ rakudo/new-disp: 48ddac6ce7 | (Stefan Seifert)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[20:34] <Geth> ¦ rakudo/new-disp: Add an raku-hllize dispatcher to replace nqp::hllize(for) on MoarVM

[20:34] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/48ddac6ce7

[23:04] *** evalable6 left
[23:04] *** linkable6 left
[23:05] *** evalable6 joined
