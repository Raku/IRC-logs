[00:59] *** greppable6 left
[00:59] *** coverable6 left
[00:59] *** bloatable6 left
[00:59] *** evalable6 left
[00:59] *** bisectable6 left
[00:59] *** tellable6 left
[00:59] *** unicodable6 left
[00:59] *** committable6 left
[00:59] *** releasable6 left
[00:59] *** statisfiable6 left
[00:59] *** notable6 left
[00:59] *** sourceable6 left
[00:59] *** shareable6 left
[00:59] *** quotable6 left
[00:59] *** linkable6 left
[00:59] *** benchable6 left
[00:59] *** squashable6 left
[01:00] *** coverable6 joined
[01:00] *** unicodable6 joined
[01:01] *** squashable6 joined
[01:01] *** bisectable6 joined
[01:02] *** committable6 joined
[01:02] *** evalable6 joined
[01:02] *** linkable6 joined
[01:02] *** benchable6 joined
[01:04] *** frost left
[01:34] *** frost joined
[02:01] *** frost left
[02:18] *** notable6 joined
[02:38] *** nativecallable6 joined
[03:19] *** tellable6 joined
[03:50] *** bloatable6 joined
[04:04] *** greppable6 joined
[04:16] *** squashable6 left
[05:17] *** shareable6 joined
[05:50] *** releasable6 joined
[06:04] *** reportable6 joined
[06:10] *** codesections left
[08:12] *** Kaiepi left
[08:20] *** Kaiepi joined
[08:26] *** Kaiepi left
[08:39] *** Kaiepi joined
[08:39] *** frost joined
[09:04] *** statisfiable6 joined
[09:43] *** sourceable6 joined
[09:44] *** frost left
[09:46] *** frost joined
[09:50] *** frost left
[10:45] *** sivoais left
[10:46] *** sivoais joined
[11:20] <[Tux]> Rakudo v2021.07-1-ga14655a5c (v6.d) on MoarVM 2021.07-3-g20f363d43

[11:20] <[Tux]> csv-test-xs-20      0.374 -  0.376

[11:20] <[Tux]> csv-ip5xs           0.871 -  0.890

[11:20] <[Tux]> test-t --race       0.940 -  0.988

[11:20] <[Tux]> test-t              1.962 -  1.999

[11:20] <[Tux]> test                7.766 -  8.173

[11:21] <[Tux]> csv-ip5xs-20        8.960 -  9.335

[11:21] <[Tux]> test-t-20 --race   10.141 - 11.436

[11:21] <[Tux]> csv-parser         27.281 - 27.394

[11:21] <[Tux]> test-t-20          32.680 - 32.850

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[13:15] <Kaiepi> m: role Foo { multi method foo(::?ROLE: --> 1) { } }; role Bar { multi method foo(::?ROLE: --> 2) { } }; say Bar.foo

[13:15] <camelia> rakudo-moar a14655a5c: OUTPUT: «2␤»

[13:15] <Kaiepi> m: role Foo[::T] { multi method foo(::?ROLE: --> 1) { } }; role Bar[::T] { multi method foo(::?ROLE: --> 2) { } }; say Bar.foo

[13:15] <camelia> rakudo-moar a14655a5c: OUTPUT: «No appropriate parametric role variant available for 'Bar':␤    Cannot resolve caller (Bar); none of these signatures match:␤        (::$?CLASS ::::?CLASS Mu, ::T Mu)␤  in block <unit> at <tmp> line 1␤␤»

[13:15] <Kaiepi> m: role Foo[::T] { multi method foo(::?ROLE: --> 1) { } }; role Bar[::T] { multi method foo(::?ROLE: --> 2) { } }; say Bar[1].foo

[13:15] <camelia> rakudo-moar a14655a5c: OUTPUT: «2␤»

[13:28] <Kaiepi> oh wait

[13:28] <Kaiepi> m: role Foo[::T] { multi method foo(::?ROLE: --> 1) { } }; role Bar[::T] does Foo[T] { multi method foo(::?ROLE: --> 2) { } }; say Bar[1].foo

[13:28] <camelia> rakudo-moar a14655a5c: OUTPUT: «Ambiguous call to 'foo(Bar[Int]: )'; these signatures all match:␤  (Bar: *%_)␤  (Foo: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[13:39] <Geth> ¦ rakudo: 74d7ff771a | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[13:39] <Geth> ¦ rakudo: Revert "Revert "Rework IterateOneWithoutPhaser.push-all a bit""

[13:39] <Geth> ¦ rakudo: 

[13:39] <Geth> ¦ rakudo: This reverts commit 271b64f0d91ed58f91b9242f6cbfcbcd514a18dd.

[13:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/74d7ff771a

[13:58] *** Xliff joined
[15:28] *** codesections joined
[15:30] *** notna joined
[16:28] *** quotable6 joined
[17:47] *** notna left
[18:02] *** reportable6 left
[18:41] *** discord-raku-bot left
[18:42] *** discord-raku-bot joined
[19:00] *** Xliff left
[19:10] *** discord-raku-bot left
[19:11] *** discord-raku-bot joined
[21:13] *** evalable6 left
[21:13] *** linkable6 left
[21:13] <ugexe> revert revert rework

[21:14] <MasterDuke> sounds like a daft punk song

[21:14] *** linkable6 joined
[21:15] *** evalable6 joined
[21:16] *** reportable6 joined
[21:26] <MasterDuke> m: .say for 2..0 # should this warn? if so, what should the conditions be. literals with the start greater than the end? any time the optimizer can figure out that the start is greater than the end?

[21:26] <camelia> rakudo-moar 74d7ff771: ( no output )

[22:40] <Util> MasterDuke: a starting point higher than the ending point should produce should produce no iteration. I have relied on this in code where one endpoint or the other was a variable. If both endpoints are *constant*, perhaps a warning would be helpful.

[22:40] <Util> https://github.com/Raku/roast/blob/master/S03-operators/range-int.t#L245

[23:38] *** linkable6 left
[23:38] *** evalable6 left
[23:39] *** evalable6 joined
[23:40] *** linkable6 joined
