[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[01:04] *** nativecallable6 left
[01:04] *** bloatable6 left
[01:04] *** evalable6 left
[01:04] *** benchable6 left
[01:04] *** notable6 left
[01:04] *** reportable6 left
[01:04] *** squashable6 left
[01:04] *** unicodable6 left
[01:04] *** greppable6 left
[01:04] *** linkable6 left
[01:04] *** shareable6 left
[01:04] *** releasable6 left
[01:04] *** tellable6 left
[01:04] *** coverable6 left
[01:04] *** bisectable6 left
[01:04] *** quotable6 left
[01:04] *** committable6 left
[01:04] *** sourceable6 left
[01:04] *** statisfiable6 left
[01:05] *** sourceable6 joined
[01:05] *** quotable6 joined
[01:05] *** bisectable6 joined
[01:05] *** shareable6 joined
[01:05] *** coverable6 joined
[01:05] *** notable6 joined
[01:05] *** releasable6 joined
[01:05] *** greppable6 joined
[01:06] *** nativecallable6 joined
[01:06] *** squashable6 joined
[01:06] *** linkable6 joined
[01:06] *** bloatable6 joined
[01:06] *** tellable6 joined
[01:07] *** committable6 joined
[01:07] *** evalable6 joined
[01:07] *** unicodable6 joined
[01:07] *** benchable6 joined
[01:07] *** statisfiable6 joined
[01:07] *** reportable6 joined
[02:07] *** notable6 left
[02:07] *** unicodable6 left
[02:07] *** bisectable6 left
[02:07] *** linkable6 left
[02:07] *** nativecallable6 left
[02:07] *** quotable6 left
[02:07] *** bloatable6 left
[02:07] *** shareable6 left
[02:07] *** committable6 left
[02:07] *** reportable6 left
[02:07] *** sourceable6 left
[02:07] *** evalable6 left
[02:07] *** tellable6 left
[02:07] *** benchable6 left
[02:07] *** statisfiable6 left
[02:07] *** releasable6 left
[02:07] *** coverable6 left
[02:07] *** greppable6 left
[02:07] *** squashable6 left
[02:08] *** releasable6 joined
[02:08] *** committable6 joined
[02:08] *** tellable6 joined
[02:08] *** linkable6 joined
[02:08] *** sourceable6 joined
[02:08] *** quotable6 joined
[02:08] *** statisfiable6 joined
[02:09] *** coverable6 joined
[02:09] *** benchable6 joined
[02:09] *** unicodable6 joined
[02:09] *** nativecallable6 joined
[02:09] *** greppable6 joined
[02:09] *** bloatable6 joined
[02:09] *** shareable6 joined
[02:10] *** evalable6 joined
[02:10] *** notable6 joined
[02:10] *** reportable6 joined
[02:10] *** squashable6 joined
[02:10] *** bisectable6 joined
[02:36] <Geth> ¦ rakudo: vrurg++ created pull request #4416: [WIP] Fix freezes caused by concurrently produced iterators
[02:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4416
[02:59] *** melezhik left
[03:11] <Geth> ¦ roast: vrurg++ created pull request #738: Add tests for hyper/race throwing on second .iterator
[03:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/738
[03:59] *** evalable6 left
[03:59] *** linkable6 left
[04:01] *** linkable6 joined
[04:02] *** evalable6 joined
[05:02] *** benchable6 left
[05:02] *** statisfiable6 left
[05:02] *** linkable6 left
[05:02] *** tellable6 left
[05:02] *** committable6 left
[05:02] *** coverable6 left
[05:02] *** bisectable6 left
[05:02] *** releasable6 left
[05:02] *** quotable6 left
[05:02] *** evalable6 left
[05:02] *** reportable6 left
[05:02] *** squashable6 left
[05:02] *** nativecallable6 left
[05:02] *** shareable6 left
[05:02] *** sourceable6 left
[05:02] *** greppable6 left
[05:02] *** notable6 left
[05:02] *** unicodable6 left
[05:02] *** bloatable6 left
[05:02] *** greppable6 joined
[05:02] *** statisfiable6 joined
[05:02] *** reportable6 joined
[05:03] *** nativecallable6 joined
[05:03] *** tellable6 joined
[05:03] *** unicodable6 joined
[05:03] *** quotable6 joined
[05:04] *** coverable6 joined
[05:04] *** releasable6 joined
[05:04] *** notable6 joined
[05:04] *** benchable6 joined
[05:04] *** evalable6 joined
[05:04] *** bisectable6 joined
[05:04] *** linkable6 joined
[05:04] *** committable6 joined
[05:04] *** squashable6 joined
[05:05] *** sourceable6 joined
[05:05] *** bloatable6 joined
[05:05] *** shareable6 joined
[05:31] *** Xliff left
[06:03] *** reportable6 left
[06:05] *** reportable6 joined
[07:05] *** evalable6 left
[07:05] *** linkable6 left
[07:06] *** linkable6 joined
[07:06] *** evalable6 joined
[08:19] *** shareable6 left
[08:19] *** greppable6 left
[08:19] *** benchable6 left
[08:19] *** sourceable6 left
[08:19] *** committable6 left
[08:19] *** bloatable6 left
[08:19] *** notable6 left
[08:19] *** linkable6 left
[08:19] *** reportable6 left
[08:19] *** squashable6 left
[08:19] *** quotable6 left
[08:19] *** nativecallable6 left
[08:19] *** bisectable6 left
[08:19] *** tellable6 left
[08:19] *** statisfiable6 left
[08:19] *** coverable6 left
[08:19] *** unicodable6 left
[08:19] *** evalable6 left
[08:19] *** releasable6 left
[08:19] *** reportable6 joined
[08:19] *** nativecallable6 joined
[08:20] *** notable6 joined
[08:20] *** unicodable6 joined
[08:20] *** committable6 joined
[08:20] *** sourceable6 joined
[08:20] *** evalable6 joined
[08:20] *** tellable6 joined
[08:21] *** quotable6 joined
[08:21] *** bisectable6 joined
[08:21] *** coverable6 joined
[08:21] *** greppable6 joined
[08:21] *** shareable6 joined
[08:21] *** benchable6 joined
[08:21] *** linkable6 joined
[08:21] *** bloatable6 joined
[08:22] *** statisfiable6 joined
[08:22] *** releasable6 joined
[08:22] *** squashable6 joined
[08:48] *** lizmat left
[08:50] *** LizBot_ joined
[08:51] *** lizmat joined
[08:51] *** RakuIRCLogger_ joined
[08:52] *** LizBot left
[08:52] *** RakuIRCLogger left
[08:53] *** RakuIRCLogger_ left
[08:53] *** RakuIRCLogger joined
[11:29] <gfldex> how do I disable precomp completely?
[11:33] <lizmat> no precompilation
[11:34] <gfldex> Is there an ENV variable?
[11:34] <lizmat> don't think so?
[11:35] <lizmat> I guess the easiest way to implement this, would be to have a $*REPO that just never says it has a binary version of something available?
[11:35] <gfldex> I'm running a script as a user with no write access. It does work but there is much clutter on STDERR when modules are loaded.
[11:36] <gfldex> Diverting the .precomp directory to /tmp/ would work too I guess.
[11:37] <lizmat> yup
[11:42] <Geth> ¦ rakudo: 9743035f45 | (Christian Bartolomäus)++ | src/vm/jvm/runtime/org/raku/rakudo/Binder.java
[11:42] <Geth> ¦ rakudo: [JVM] Don't try and concatenate with closure
[11:42] <Geth> ¦ rakudo: 
[11:42] <Geth> ¦ rakudo: This mimics the fix from 3ed51de397 that went into
[11:42] <Geth> ¦ rakudo: /src/Perl6/Metamodel/BOOTSTRAP.nqp and didn't apply for the JVM
[11:43] <Geth> ¦ rakudo: backend.
[11:43] <Geth> ¦ rakudo: 
[11:43] <Geth> ¦ rakudo: It makes sure that string concatenation is only tried on a string.
[11:43] <Geth> ¦ rakudo: See 3ed51de397 for the full explanation.
[11:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9743035f45
[11:43] <Geth> ¦ rakudo: 57070f0597 | (Christian Bartolomäus)++ | src/vm/jvm/runtime/org/raku/rakudo/Binder.java
[11:43] <Geth> ¦ rakudo: [JMV] Die in signature destructuring with Junction
[11:43] <Geth> ¦ rakudo: 
[11:43] <Geth> ¦ rakudo: This mimics the fix from 15d372e2f6 that went into
[11:43] <Geth> ¦ rakudo: src/Perl6/bootstrap.c/BOOTSTRAP.nqp and didn't apply for the JVM
[11:43] <Geth> ¦ rakudo: backend.
[11:43] <Geth> ¦ rakudo: 
[11:43] <Geth> ¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/3027 for rakudo-j.
[11:43] <Geth> ¦ rakudo: (The examples from the issue led to a segfault with rakudo-j -- at
[11:43] <Geth> ¦ rakudo: least with on OpenJDK on FreeBSD.)
[11:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/57070f0597
[11:50] <Altai-man> releasable6, status
[11:50] <releasable6> Altai-man, Next release in ≈7 hours. There are no known blockers. 1 out of 37 commits logged
[11:50] <releasable6> Altai-man, Details: https://gist.github.com/9c05d9c8ce33b65b2a2089fe8a377bcd
[12:01] <Geth> ¦ roast: cce9d986c9 | (Christian Bartolomäus)++ | S32-exceptions/misc.t
[12:01] <Geth> ¦ roast: [JVM] Unfudge now passing test
[12:01] <Geth> ¦ roast: 
[12:01] <Geth> ¦ roast: Fixed with https://github.com/rakudo/rakudo/commit/9743035f45.
[12:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/cce9d986c9
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:08] <[TuxCM]> Rakudo v2021.05-37-gca8dea277 (v6.d) on MoarVM 2021.05-16-gb015e1a46
[12:08] <[TuxCM]> csv-test-xs-20      0.374 -  0.392
[12:08] <[TuxCM]> csv-ip5xs           0.850 -  0.875
[12:08] <[TuxCM]> test-t --race       0.902 -  0.918
[12:08] <[TuxCM]> test-t              2.092 -  2.151
[12:08] <[TuxCM]> test                7.434 -  7.504
[12:08] <[TuxCM]> csv-ip5xs-20        9.002 -  9.514
[12:08] <[TuxCM]> test-t-20 --race    9.993 - 10.071
[12:08] <[TuxCM]> csv-parser         26.057 - 27.316
[12:08] <[TuxCM]> test-t-20          34.176 - 34.624
[12:27] <gfldex> I'm getting `Failed to create directory '/home/rakubot/.raku/short' with mode '0o777': Failed to mkdir: Permission denied`
[12:27] <gfldex> Does that mean that any user is able to modify precomp files?
[12:46] <lizmat> that would be... meh ?
[12:46] <lizmat> maybe you have a weird umask ?
[12:49] *** cognominal joined
[13:11] <lizmat> m: my @a = ^2000; for ^2000 { @a.map: { Nil } }; say now - INIT now
[13:11] <camelia> rakudo-moar 57070f059: OUTPUT: «0.148984556␤»
[13:11] <lizmat> m: my @a = ^2000; for ^2000 { @a.map: { Nil } }; say now - INIT now
[13:11] <camelia> rakudo-moar 57070f059: OUTPUT: «0.14738786␤»
[13:11] <lizmat> m: my @a = ^2000; for ^2000 { @a.map: { Nil } }; say now - INIT now
[13:11] <camelia> rakudo-moar 57070f059: OUTPUT: «0.145506012␤»
[13:11] <lizmat> m: my @a = ^2000; for ^2000 { @a.map: { Nil } }; say now - INIT now
[13:11] <camelia> rakudo-moar 57070f059: OUTPUT: «0.5831918␤»
[13:11] <lizmat> this feels very weird to me...
[13:11] <lizmat> that particular piece of code either performs at .15 seconds, or at .58 seconds
[13:12] <lizmat> m: my @a = ^2000; for ^2000 { @a.map: { Nil } }; say now - INIT now
[13:12] <camelia> rakudo-moar 57070f059: OUTPUT: «0.145589601␤»
[13:12] <lizmat> m: my @a = ^2000; for ^2000 { @a.map: { Nil } }; say now - INIT now
[13:12] <camelia> rakudo-moar 57070f059: OUTPUT: «0.152023078␤»
[13:12] <lizmat> m: my @a = ^2000; for ^2000 { @a.map: { Nil } }; say now - INIT now
[13:12] <camelia> rakudo-moar 57070f059: OUTPUT: «0.15427925␤»
[13:12] <lizmat> m: my @a = ^2000; for ^2000 { @a.map: { Nil } }; say now - INIT now
[13:12] <camelia> rakudo-moar 57070f059: OUTPUT: «0.573228222␤»
[13:41] * Altai-man sees https://gist.github.com/Altai-man/c5a003ca3e9db0c395528f3c48778111 sometimes appearing when working on the App::Raku::Log
[13:42] <gfldex> Running Rakudo with a user that doesn't got write access to $HOME doesn't work. I get all sort of weird errors.
[13:43] <gfldex> raku -e 'await Proc::Async.new("/usr/local/raku").start'
[13:44] <gfldex> results in "Failed to spawn process /usr/local/raku: no such file or directory (error code -2)"
[14:23] <Geth> ¦ rakudo: 99e4cf8df6 | Altai-man++ | 5 files
[14:23] <Geth> ¦ rakudo: Revert "s/Perl6/Raku in more places"
[14:23] <Geth> ¦ rakudo: 
[14:23] <Geth> ¦ rakudo: This reverts commit 48de177274435f1d48c6619fae5603b776941056.
[14:23] <Geth> ¦ rakudo: 
[14:23] <Geth> ¦ rakudo: This does cause CompUnit::Repository::Mask module to fail its tests,
[14:23] <Geth> ¦ rakudo: so revert before the release so we could have more time to investigate.
[14:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/99e4cf8df6
[14:33] * Altai-man starts a release
[14:51] *** Altai-man_ joined
[14:54] <Altai-man> releasable6, status
[14:54] <releasable6> Altai-man, Next release in ≈4 hours. There are no known blockers. 1 out of 40 commits logged
[14:54] <releasable6> Altai-man, Details: https://gist.github.com/c0f5356f81563278cabb255b39e59b55
[16:01] *** linkable6 left
[16:02] <Geth> ¦ rakudo/release-2021.06: 1d0f1b8828 | Altai-man++ | 3 files
[16:02] <Geth> ¦ rakudo/release-2021.06: Update changelog + announcement
[16:02] <Geth> ¦ rakudo/release-2021.06: 
[16:02] <Geth> ¦ rakudo/release-2021.06: Deliberately not logged:
[16:02] <Geth> ¦ rakudo/release-2021.06: 
[16:02] <Geth> ¦ rakudo/release-2021.06: 1962e67 ce943fc 919fe7b faec804 9433d0f 5885e2c 16eaa06 48de177
[16:02] <Geth> ¦ rakudo/release-2021.06: 4f61a10 f0b7ee7 d881ac0 292e8c8 2c3a1a0 ca8dea2 99e4cf8
[16:02] <Geth> ¦ rakudo/release-2021.06: review: https://github.com/rakudo/rakudo/commit/1d0f1b8828
[16:02] <Geth> ¦ rakudo: Altai-man++ created pull request #4417: Release 2021.06
[16:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4417
[16:03] *** linkable6 joined
[16:08] *** Altai-man_ left
[16:08] *** linkable6 left
[16:11] *** linkable6 joined
[16:23] *** Altai-man left
[16:26] *** sena_kun joined
[16:28] <sena_kun> very oops
[16:28] <sena_kun> can anyone check if spectest works?
[16:29] <sena_kun> oh, one of them is me
[16:31] *** linkable6 left
[16:31] <sena_kun> the request is still valid
[16:33] <Geth> ¦ roast: b807e27ebf | Altai-man++ | S22-package-format/local.t
[16:33] <Geth> ¦ roast: Revert "Fix test after s/Perl6/Raku change"
[16:33] <Geth> ¦ roast: 
[16:33] <Geth> ¦ roast: This reverts commit acdd8d21b9c7b648831266cffa44f0929d5ffc64.
[16:33] <Geth> ¦ roast: As the original commit was reverted.
[16:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b807e27ebf
[16:34] *** linkable6 joined
[16:49] <sena_kun> never mind
[17:50] *** Altai-man joined
[17:58] *** Altai-man left
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:16] <gfldex> is 'use nqp;' hardcoded?
[18:33] <Geth> ¦ nqp: 8f58357f6b | Altai-man++ | tools/templates/MOAR_REVISION
[18:33] <Geth> ¦ nqp: [release] Bump MoarVM revision to 2021.06
[18:33] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/8f58357f6b
[18:33] <Geth> ¦ nqp: def4955957 | Altai-man++ | VERSION
[18:33] <Geth> ¦ nqp: [release] Bump VERSION to 2021.06
[18:33] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/def4955957
[18:33] <Geth> ¦ rakudo/release-2021.06: c8142a54a7 | Altai-man++ | tools/templates/NQP_REVISION
[18:33] <Geth> ¦ rakudo/release-2021.06: [release] Bump NQP revision to 2021.06
[18:33] <Geth> ¦ rakudo/release-2021.06: review: https://github.com/rakudo/rakudo/commit/c8142a54a7
[18:33] <Geth> ¦ rakudo/release-2021.06: 4887a169b4 | Altai-man++ | VERSION
[18:33] <Geth> ¦ rakudo/release-2021.06: [release] Bump VERSION to 2021.06
[18:33] <Geth> ¦ rakudo/release-2021.06: review: https://github.com/rakudo/rakudo/commit/4887a169b4
[18:37] *** Altai-man joined
[18:40] *** Altai-man left
[18:56] <Geth> ¦ rakudo/master: 4 commits pushed by Altai-man++
[18:56] <Geth> ¦ rakudo/master: 1d0f1b8828 | Update changelog + announcement
[18:56] <Geth> ¦ rakudo/master: c8142a54a7 | [release] Bump NQP revision to 2021.06
[18:56] <Geth> ¦ rakudo/master: 4887a169b4 | [release] Bump VERSION to 2021.06
[18:56] <Geth> ¦ rakudo/master: cd01706216 | Merge pull request #4417 from rakudo/release-2021.06
[18:56] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/99e4cf8df667...cd01706216d6
[18:57] <lizmat> sena_kun++
[18:57] <sena_kun> lizmat, ping?
[18:57] <lizmat> pong
[18:58] <sena_kun> lizmat, hey. Hope you are doing fine. I got the templates and spent most of today to adapt them. A couple of questions: 1)are search results loaded lazily, as in can we have pagination with page count? 2)the templates you did not mention are `targets` and `around`, can you please give me an example how can I trigger them?
[18:59] <lizmat> sena_kun: you can't trigger those at the moment, only by manually adapting a URL
[19:00] <lizmat> search results are basically a lazy iterator, so I don't know how many there are
[19:00] <sena_kun> lizmat, if I can access it by some custom URL, I'd like to have it unless you want to defer their UI to some later time
[19:00] <lizmat> but you *can* page through them
[19:00] <sena_kun> oh-uh
[19:00] <sena_kun> hmmmm
[19:01] <sena_kun> maybe I'll present it then and we can look at how it'd be best to patch together when there is some code to work with
[19:01] <sena_kun> lizmat, alright, I'll try to finish missing bits of JS here and there and send a big PR.
[19:02] <lizmat>  /channel/targets.html?targets=target,target,target
[19:03] <sena_kun> lizmat, and those target,target,target can be?..
[19:03] <lizmat>  /channel/around.html?target=target,nr-entries=5
[19:03] <sena_kun> just something arbitrary is fine
[19:04] <lizmat> e.g.: 2021-06-19Z13:11-0002
[19:06] *** b2gills left
[19:12] <sena_kun> I feel like something is wrong, but already spent more than I could afford today and cannot exactly pinpoint what's wrong except for the roundtrip.t issue. :S
[19:14] <lizmat> roundtrip issue ?
[19:14] <sena_kun> lizmat, https://github.com/rakudo/rakudo/issues/4418
[19:15] <lizmat> ah, that one... yeah.. no worries there until the next release I'd say
[19:19] <sena_kun> lizmat, I also reverted a commit by you, I think you got the notification.
[19:19] <lizmat> yeah no worries about that either...  :-)
[19:19] <lizmat> at least I now know where to look for failures :-)
[19:20] <sena_kun> yesh
[19:24] <lizmat> sena_kun: confirmed release 2021.06 builds and tests ok
[19:25] <sena_kun> lizmat++
[19:26] <MasterDuke> sena_kun++
[19:51] <Geth> ¦ problem-solving: coke assigned to JJ Issue Separate Community Resource pages https://github.com/Raku/problem-solving/issues/286
[19:52] <Geth> ¦ problem-solving: coke unassigned from JJ Issue Separate Community Resource pages https://github.com/Raku/problem-solving/issues/286
[19:59] <[Coke]> ^^ I don't mind if JJ is assigned, but it's not strictly a docs issue, so didn't want to lock him in.
[20:01] <lizmat> [Coke] : you *can* remove the assignment before actually creating an issue :-)
[20:01] <[Coke]> Didn't realize it had been done or I would have.
[20:06] <Geth> ¦ rakudo: a8f144cc94 | (Elizabeth Mattijsen)++ | 3 files
[20:06] <Geth> ¦ rakudo: Simplify iterator selection for map
[20:06] <Geth> ¦ rakudo: 
[20:06] <Geth> ¦ rakudo: This should allow for easier inlining and marginally faster calls
[20:06] <Geth> ¦ rakudo: to .map.
[20:06] <Geth> ¦ rakudo: 
[20:06] <Geth> ¦ rakudo: - Add "has_phasers" methods to WhateverCode and ForeignCode
[20:06] <Geth> ¦ rakudo:   So that we don't have to check what type of Callable we actually
[20:06] <Geth> ¦ rakudo: <…commit message has 10 more lines…>
[20:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a8f144cc94
[20:09] <Geth> ¦ rakudo/last-with-value: 4 commits pushed by (Elizabeth Mattijsen)++
[20:09] <Geth> ¦ rakudo/last-with-value: 7f093a05de | Introduce "last foo" to end loops *and* return a value
[20:09] <Geth> ¦ rakudo/last-with-value: 8886a8dc9c | Also make "last foo" work on .grep
[20:09] <Geth> ¦ rakudo/last-with-value: 02c554cf18 | Make various other loop constructs sensitive to "last foo"
[20:09] <Geth> ¦ rakudo/last-with-value: 44858552f2 | Fix issue with grep when storing result in array
[20:09] <Geth> ¦ rakudo/last-with-value: review: https://github.com/rakudo/rakudo/compare/5429d909c2b0...44858552f2be
[20:09] <lizmat> rebase on master
[22:01] *** b2gills joined
[23:01] *** evalable6 left
[23:01] *** linkable6 left
[23:01] *** linkable6 joined
[23:03] *** evalable6 joined
