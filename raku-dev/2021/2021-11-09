[00:01] <timo> because i've got a simple for/when with integers where ACCEPTS is called against an enum

[00:01] <timo> and that was going via Numeric:D's ACCEPT, which tries to cast via .Numeric first, and then also checks for nan and inf

[00:02] <timo> and putting an ACCEPTS into Int makes it much better

[00:02] <timo> since the numeric accepts has a body too big to be inlined, the int one is much much smaller

[00:02] *** reportable6 left
[00:07] <lizmat> timo: sounds like a good idea...

[00:09] <timo> 1.74s vs 9.5s user time for my code

[00:09] <timo> rakudo -e 'enum lmao <first second third fourth>; sub do-my-bidding { for ^2000 { when first { print ">." }; when second { print "." }; when third { print "." }; when fourth { print ".\n" } } }; for ^1000 { do-my-bidding }'

[00:11] <timo> i did not actually check what exact semantics we have for ACCEPTSing between two defined Int objects

[00:14] <timo> so i just used literally self == other

[00:36] <timo> spec tests look good so far

[00:40] *** frost joined
[00:44] <Geth> ¦ rakudo/int-accepts-int-quickly: 1b63dbf239 | (Timo Paulssen)++ | src/core.c/Int.pm6

[00:44] <Geth> ¦ rakudo/int-accepts-int-quickly: Very simple ACCEPTS for Int:D vs Int:D

[00:44] <Geth> ¦ rakudo/int-accepts-int-quickly: 

[00:44] <Geth> ¦ rakudo/int-accepts-int-quickly: Otherwise running ACCEPTS on an Enum goes via Numeric's ACCEPTS,

[00:44] <Geth> ¦ rakudo/int-accepts-int-quickly: which first calls to .Numeric to coerce, and has checks for nan

[00:44] <Geth> ¦ rakudo/int-accepts-int-quickly: and inf on top of the numeric value comparison.

[00:44] <Geth> ¦ rakudo/int-accepts-int-quickly: 

[00:44] <Geth> ¦ rakudo/int-accepts-int-quickly: This new candidate has a bytecode small enough to be inlined, as

[00:44] <Geth> ¦ rakudo/int-accepts-int-quickly: opposed to the Numeric ACCEPTS method.

[00:45] <Geth> ¦ rakudo/int-accepts-int-quickly: review: https://github.com/rakudo/rakudo/commit/1b63dbf239

[00:46] <Geth> ¦ rakudo: timo++ created pull request #4625: Very simple ACCEPTS for Int:D vs Int:D

[00:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4625

[00:49] <timo> passed my spec tests

[00:52] <[Coke]> nice.

[01:00] <timo> not sure if much real-world code will actually look much like this

[01:03] *** reportable6 joined
[01:14] <timo> Kaiepi: what's your suggestion, to make it look just like the other one, i.e. hllbool eq_I?

[01:14] <Kaiepi> more or less, yeah

[01:15] <timo> and Num gets one that looks just like Numeric's except without .Numeric on the "other" argument?

[01:17] <timo> how useful is a num other than nan or inf accepting another num, when we have rounding and imprecision and all that to worry about

[01:19] *** MasterDuke left
[01:20] <Kaiepi> that one doesn't quite correspond

[01:21] <Kaiepi> it would need to be similar to Int:D's candidates, but with an extra check for NaN i think

[01:22] <timo>         (try my \numeric = a.Numeric).defined

[01:22] <timo>                 ?? (self.isNaN && numeric.isNaN or numeric == self)

[01:22] <timo>                 !! False

[01:22] <timo> this one i mean

[01:37] <Geth> ¦ rakudo/int-accepts-int-quickly: d7ecc018a7 | (Timo Paulssen)++ | src/core.c/Int.pm6

[01:37] <Geth> ¦ rakudo/int-accepts-int-quickly: Very simple ACCEPTS for Int:D vs Int:D

[01:37] <Geth> ¦ rakudo/int-accepts-int-quickly: 

[01:37] <Geth> ¦ rakudo/int-accepts-int-quickly: Otherwise running ACCEPTS on an Enum goes via Numeric's ACCEPTS,

[01:37] <Geth> ¦ rakudo/int-accepts-int-quickly: which first calls to .Numeric to coerce, and has checks for nan

[01:37] <Geth> ¦ rakudo/int-accepts-int-quickly: and inf on top of the numeric value comparison.

[01:37] <Geth> ¦ rakudo/int-accepts-int-quickly: 

[01:37] <Geth> ¦ rakudo/int-accepts-int-quickly: This new candidate has a bytecode small enough to be inlined, as

[01:37] <Geth> ¦ rakudo/int-accepts-int-quickly: opposed to the Numeric ACCEPTS method.

[01:37] <Geth> ¦ rakudo/int-accepts-int-quickly: review: https://github.com/rakudo/rakudo/commit/d7ecc018a7

[01:37] <timo> does that look good to you?

[01:37] <Kaiepi> i'm not sure how to type an Any:D coercion for Int.ACCEPTS and Num.ACCEPTS w/o the rounding errors off the top of my head. it would need a more narrow type to consider maybe

[01:39] <Kaiepi> m: use nqp; say nqp::iseq_I(1, my $ = 1)

[01:39] <camelia> rakudo-moar 490229998: OUTPUT: «P6opaque: get_boxed_ref could not unbox for the representation 'P6bigint' of type Scalar␤  in block <unit> at <tmp> line 1␤␤»

[01:39] <timo> i'm not entirely sure what you're looking to do; i'm mostly thinking of putting ACCEPTS for matching types in this spec test

[01:39] <timo> ok, needs a decont

[01:39] <timo> m: use nqp; say nqp::iseq_I(1, my \xyz = 1)

[01:39] <camelia> rakudo-moar 490229998: OUTPUT: «1␤»

[01:39] <timo> or not

[01:40] <Kaiepi> it needs the decont i think

[01:40] <Kaiepi> m: use nqp; sub foo(\topic) { nqp::iseq_I(1, topic) }(my $ = 1)

[01:40] <camelia> rakudo-moar 490229998: OUTPUT: «P6opaque: get_boxed_ref could not unbox for the representation 'P6bigint' of type Scalar␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:41] <timo> indeed

[01:42] <Geth> ¦ rakudo/int-accepts-int-quickly: 4d067e360c | (Timo Paulssen)++ | src/core.c/Int.pm6

[01:42] <Geth> ¦ rakudo/int-accepts-int-quickly: Very simple ACCEPTS for Int:D vs Int:D

[01:42] <Geth> ¦ rakudo/int-accepts-int-quickly: 

[01:42] <Geth> ¦ rakudo/int-accepts-int-quickly: Otherwise running ACCEPTS on an Enum goes via Numeric's ACCEPTS,

[01:42] <Geth> ¦ rakudo/int-accepts-int-quickly: which first calls to .Numeric to coerce, and has checks for nan

[01:42] <Geth> ¦ rakudo/int-accepts-int-quickly: and inf on top of the numeric value comparison.

[01:42] <Geth> ¦ rakudo/int-accepts-int-quickly: 

[01:42] <Geth> ¦ rakudo/int-accepts-int-quickly: This new candidate has a bytecode small enough to be inlined, as

[01:42] <Geth> ¦ rakudo/int-accepts-int-quickly: opposed to the Numeric ACCEPTS method.

[01:42] <Geth> ¦ rakudo/int-accepts-int-quickly: review: https://github.com/rakudo/rakudo/commit/4d067e360c

[01:51] <timo> that's what i get for using \ sigil

[01:51] <timo> hold on, perhaps it's actually faster now to use $ sigil

[02:00] <timo> don't actually hold on, tho

[02:00] <timo> the latest commit passes spec tests, or at least hasn't failed any yet

[02:14] <timo> anyway, feel like hitting merge on the PR if you think it looks good, we can add more ACCEPTS candidates in other places later

[02:15] <timo> (when the tests pass)

[02:19] *** linkable6 left
[02:19] *** evalable6 left
[02:20] *** evalable6 joined
[03:39] *** squashable6 left
[03:39] *** evalable6 left
[03:39] *** tellable6 left
[03:39] *** notable6 left
[03:39] *** bloatable6 left
[03:39] *** nativecallable6 left
[03:39] *** quotable6 left
[03:39] *** sourceable6 left
[03:39] *** coverable6 left
[03:39] *** statisfiable6 left
[03:39] *** greppable6 left
[03:39] *** unicodable6 left
[03:39] *** benchable6 left
[03:39] *** shareable6 left
[03:39] *** bisectable6 left
[03:39] *** reportable6 left
[03:39] *** committable6 left
[03:39] *** releasable6 left
[03:40] *** squashable6 joined
[03:40] *** notable6 joined
[03:40] *** reportable6 joined
[03:41] *** sourceable6 joined
[03:41] *** shareable6 joined
[03:41] *** committable6 joined
[03:41] *** bloatable6 joined
[03:41] *** unicodable6 joined
[03:41] *** nativecallable6 joined
[03:42] *** greppable6 joined
[03:42] *** releasable6 joined
[03:42] *** evalable6 joined
[04:20] *** linkable6 joined
[04:41] *** benchable6 joined
[04:42] *** coverable6 joined
[04:42] *** statisfiable6 joined
[04:44] *** frost left
[04:44] *** dogbert17 left
[04:44] *** gfldex left
[04:45] *** frost joined
[04:45] *** dogbert17 joined
[04:45] *** gfldex joined
[05:37] *** casaca left
[05:42] *** tellable6 joined
[05:42] *** quotable6 joined
[05:54] *** japhb left
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:23] *** frost left
[06:49] *** japhb joined
[08:57] *** MasterDuke joined
[09:56] *** casaca joined
[10:56] *** linkable6 left
[10:56] *** evalable6 left
[10:58] *** linkable6 joined
[11:11] <timo> skarsnik's example code with gumbo and XML got slower between 2021.09 and master, but at least int-accepts-int-quickly seems to make it perform better

[11:41] *** bisectable6 joined
[12:02] *** reportable6 left
[13:27] <Geth> ¦ rakudo/add-Any.infer: 402d434b7c | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[13:27] <Geth> ¦ rakudo/add-Any.infer: Add an Any(iterable).infer method

[13:27] <Geth> ¦ rakudo/add-Any.infer: 

[13:27] <Geth> ¦ rakudo/add-Any.infer: Given an iterable thing of values, will return the type / role that

[13:27] <Geth> ¦ rakudo/add-Any.infer: is tightest for the values given.

[13:27] <Geth> ¦ rakudo/add-Any.infer: 

[13:27] <Geth> ¦ rakudo/add-Any.infer: As proposed by jnthn on https://logs.liz.nl/moarvm/2021-11-09.html#10:25-0001

[13:27] <Geth> ¦ rakudo/add-Any.infer: review: https://github.com/rakudo/rakudo/commit/402d434b7c

[13:28] <Geth> ¦ rakudo: lizmat++ created pull request #4626: Add an Any(iterable).infer method

[13:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4626

[13:45] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4627: Change SetHash.values() from `is rw` to `is raw`

[13:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4627

[13:48] *** Geth left
[13:48] *** Geth joined
[13:49] <Geth> ¦ rakudo: 6598746027 | (Daniel Green)++ | src/core.c/SetHash.pm6

[13:49] <Geth> ¦ rakudo: Change SetHash.values() from `is rw` to `is raw`

[13:49] <Geth> ¦ rakudo: 

[13:49] <Geth> ¦ rakudo: Doesn't change the semantics, but makes it consistent with

[13:49] <Geth> ¦ rakudo: (Mix|Bag)Hash.values().

[13:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6598746027

[13:49] <Geth> ¦ rakudo: 4ea2ca2d18 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/SetHash.pm6

[13:49] <Geth> ¦ rakudo: Merge pull request #4627 from MasterDuke17/consistently_use_is-raw_for_(Mix|Bag|Set)Hash_.values

[13:49] <Geth> ¦ rakudo: 

[13:49] <Geth> ¦ rakudo: Change SetHash.values() from `is rw` to `is raw`

[13:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4ea2ca2d18

[14:56] *** [Coke] left
[14:58] *** evalable6 joined
[14:59] *** [Coke] joined
[15:03] *** reportable6 joined
[15:09] <Geth> ¦ rakudo/replace-attrinited: 6 commits pushed by (Jonathan Worthington)++

[15:09] <Geth> ¦ rakudo/replace-attrinited: aca7dbfe67 | Add a p6attrinited desugar

[15:09] <Geth> ¦ rakudo/replace-attrinited: 1a40ea3b64 | Switch defaults to new initialization scheme

[15:09] <Geth> ¦ rakudo/replace-attrinited: 01c3ed8f9b | Switch `is required` to new initialization scheme

[15:09] <Geth> ¦ rakudo/replace-attrinited: fe8458a705 | Eliminate nqp::attrinited in clone

[15:09] <Geth> ¦ rakudo/replace-attrinited: 09d524ea5d | Eliminate nqp::attrinited in optimizer

[15:09] <Geth> ¦ rakudo/replace-attrinited: 6fd37c7144 | Update BUILDPLAN debug script

[15:09] <Geth> ¦ rakudo/replace-attrinited: review: https://github.com/rakudo/rakudo/compare/7ebabb6cf684...6fd37c7144b6

[15:14] <Geth> ¦ rakudo: db136bc52d | (Stefan Seifert)++ | 5 files

[15:14] <Geth> ¦ rakudo: Fix segfaults when multiple threads initialize dynamics

[15:14] <Geth> ¦ rakudo: 

[15:14] <Geth> ¦ rakudo: When multiple threads try to access an uninitialized dynamic like $*PROGRAM-NAME

[15:14] <Geth> ¦ rakudo: at the same time, they all will run the initialization code. This is mostly

[15:14] <Geth> ¦ rakudo: benign (just a little wasteful) but the actual assignment into the PROCESS::

[15:14] <Geth> ¦ rakudo: stash may lead to segfault as that's unsafe writing into a hash. Indeed, this

[15:14] <Geth> ¦ rakudo: not only affects PROCESS variables, but stashes in general. Since stashes are

[15:14] <Geth> ¦ rakudo: <…commit message has 7 more lines…>

[15:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/db136bc52d

[15:14] <Geth> ¦ rakudo: 09f5069cc5 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 5 files

[15:14] <Geth> ¦ rakudo: Merge pull request #4622 from rakudo/fix_stash_threading_issues

[15:14] <Geth> ¦ rakudo: 

[15:14] <Geth> ¦ rakudo: Fix segfaults when multiple threads initialize dynamics

[15:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/09f5069cc5

[15:16] *** squashable6 left
[15:49] <Geth> ¦ rakudo/replace-attrinited: 77720e06e2 | (Jonathan Worthington)++ | 2 files

[15:49] <Geth> ¦ rakudo/replace-attrinited: Fix Array/Hash attribute initialization

[15:49] <Geth> ¦ rakudo/replace-attrinited: 

[15:49] <Geth> ¦ rakudo/replace-attrinited: We need to clear the UninitializedAttribute descriptor upon a STORE to

[15:49] <Geth> ¦ rakudo/replace-attrinited: an array or hash, otherwise we'll consider it uninitialized and wrongly

[15:49] <Geth> ¦ rakudo/replace-attrinited: give errors or apply defaults.

[15:49] <Geth> ¦ rakudo/replace-attrinited: review: https://github.com/rakudo/rakudo/commit/77720e06e2

[16:14] <Geth> ¦ rakudo/int-accepts-int-quickly: f537ac880e | (Timo Paulssen)++ | src/core.c/Int.pm6

[16:14] <Geth> ¦ rakudo/int-accepts-int-quickly: Use sigiled parameter instead of sigil-less

[16:14] <Geth> ¦ rakudo/int-accepts-int-quickly: review: https://github.com/rakudo/rakudo/commit/f537ac880e

[16:16] <timo> ^- running spectests right now

[16:26] *** [Coke]_ joined
[16:28] *** [Coke] left
[16:28] *** [Coke]_ is now known as [Coke]

[16:28] <timo> spec tests succeeded

[17:28] *** evalable6 left
[17:28] *** linkable6 left
[17:31] *** linkable6 joined
[17:39] <Geth> ¦ roast: b112eb0f4c | (Jonathan Worthington)++ | S12-class/attributes-required.t

[17:39] <Geth> ¦ roast: Cover `is required` with @ and % sigils

[17:39] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b112eb0f4c

[17:40] <Geth> ¦ rakudo/replace-attrinited: 10 commits pushed by (Jonathan Worthington)++

[17:40] <Geth> ¦ rakudo/replace-attrinited: review: https://github.com/rakudo/rakudo/compare/77720e06e291...dd049edeebb3

[18:03] *** reportable6 left
[18:31] *** evalable6 joined
[18:32] <Geth> ¦ rakudo/add-Any.infer: fd16f72bda | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[18:32] <Geth> ¦ rakudo/add-Any.infer: Make .infer take a fast path for all identical types

[18:32] <Geth> ¦ rakudo/add-Any.infer: 

[18:32] <Geth> ¦ rakudo/add-Any.infer: And fall back to the old algorithm if a different type is

[18:32] <Geth> ¦ rakudo/add-Any.infer: detected.

[18:32] <Geth> ¦ rakudo/add-Any.infer: 

[18:32] <Geth> ¦ rakudo/add-Any.infer: This makes (1,2,3,4,5,6,7,8,9,10).infer about 9x as fast.

[18:32] <Geth> ¦ rakudo/add-Any.infer: review: https://github.com/rakudo/rakudo/commit/fd16f72bda

[18:52] <Geth> ¦ nqp/new-disp-nativecall: b7c05b2ff0 | (Stefan Seifert)++ | 4 files

[18:52] <Geth> ¦ nqp/new-disp-nativecall: API for asking whether the compiler supports a certain nqp op

[18:52] <Geth> ¦ nqp/new-disp-nativecall: 

[18:52] <Geth> ¦ nqp/new-disp-nativecall: This can be used to conditionally compile backend specific code in

[18:52] <Geth> ¦ nqp/new-disp-nativecall: modules like NativeCall

[18:52] <Geth> ¦ nqp/new-disp-nativecall: review: https://github.com/Raku/nqp/commit/b7c05b2ff0

[18:52] <Geth> ¦ nqp/new-disp-nativecall: 3945533f58 | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[18:52] <Geth> ¦ nqp/new-disp-nativecall: Remove last remnant of old invocation protocol

[18:52] <Geth> ¦ nqp/new-disp-nativecall: review: https://github.com/Raku/nqp/commit/3945533f58

[18:53] <Geth> ¦ rakudo/new-disp-nativecall: 12 commits pushed by (Stefan Seifert)++

[18:53] <Geth> ¦ rakudo/new-disp-nativecall: review: https://github.com/rakudo/rakudo/compare/5df1c80a3908...eae5e6a0dfad

[18:54] <Geth> ¦ rakudo: niner++ created pull request #4629: New disp nativecall

[18:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4629

[19:03] *** reportable6 joined
[19:12] <Geth> ¦ rakudo/add-Any.isa-all: 2ca8fddfcb | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[19:12] <Geth> ¦ rakudo/add-Any.isa-all: Add Any(iterable).isa-all(type) method

[19:12] <Geth> ¦ rakudo/add-Any.isa-all: 

[19:12] <Geth> ¦ rakudo/add-Any.isa-all: This returns a boolean whether all values produced by the iterable

[19:12] <Geth> ¦ rakudo/add-Any.isa-all: match the given type.  Intended to be used in e.g. constraints such

[19:12] <Geth> ¦ rakudo/add-Any.isa-all: as:

[19:12] <Geth> ¦ rakudo/add-Any.isa-all:     sub foo(@a where .isa-all(Int))

[19:12] <Geth> ¦ rakudo/add-Any.isa-all: 

[19:12] <Geth> ¦ rakudo/add-Any.isa-all: <…commit message has 10 more lines…>

[19:12] <Geth> ¦ rakudo/add-Any.isa-all: review: https://github.com/rakudo/rakudo/commit/2ca8fddfcb

[19:12] <Geth> ¦ rakudo: lizmat++ created pull request #4630: Add Any(iterable).isa-all(type) method

[19:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4630

[19:48] *** Geth joined
[19:51] *** Kaipi joined
[19:53] *** childlikempress joined
[19:57] <Geth> ¦ rakudo/add-Any.isa-any: 1a930fd87c | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[19:57] <Geth> ¦ rakudo/add-Any.isa-any: Add Any(iterable).isa-any(type) method

[19:57] <Geth> ¦ rakudo/add-Any.isa-any: 

[19:57] <Geth> ¦ rakudo/add-Any.isa-any: This returns a boolean whether *any* values produced by the iterable match

[19:57] <Geth> ¦ rakudo/add-Any.isa-any: the given type. Intended to be used in e.g. constraints such as:

[19:57] <Geth> ¦ rakudo/add-Any.isa-any: 

[19:57] <Geth> ¦ rakudo/add-Any.isa-any:     sub foo(@a where .isa-any(Int))

[19:57] <Geth> ¦ rakudo/add-Any.isa-any: 

[19:57] <Geth> ¦ rakudo/add-Any.isa-any: <…commit message has 5 more lines…>

[19:57] <Geth> ¦ rakudo/add-Any.isa-any: review: https://github.com/rakudo/rakudo/commit/1a930fd87c

[19:58] <Geth> ¦ rakudo: lizmat++ created pull request #4631: Add Any(iterable).isa-any(type) method

[19:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4631

[20:00] *** Kaiepi left
[20:00] *** discord-raku-bot left
[20:00] *** moon-child left
[20:17] <Geth> ¦ rakudo/add-Any.isa-none: 7fd4deec42 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[20:17] <Geth> ¦ rakudo/add-Any.isa-none: Add Any(iterable).isa-none(type) method

[20:17] <Geth> ¦ rakudo/add-Any.isa-none: 

[20:17] <Geth> ¦ rakudo/add-Any.isa-none: This returns a boolean whether none of the values produced by the iterable

[20:17] <Geth> ¦ rakudo/add-Any.isa-none: match the given type. Intended to be used in e.g. constraints such as:

[20:17] <Geth> ¦ rakudo/add-Any.isa-none: 

[20:17] <Geth> ¦ rakudo/add-Any.isa-none:     sub foo(@a where .isa-none(Str))

[20:17] <Geth> ¦ rakudo/add-Any.isa-none: 

[20:17] <Geth> ¦ rakudo/add-Any.isa-none: <…commit message has 5 more lines…>

[20:17] <Geth> ¦ rakudo/add-Any.isa-none: review: https://github.com/rakudo/rakudo/commit/7fd4deec42

[20:18] <Geth> ¦ rakudo: lizmat++ created pull request #4632: Add Any(iterable).isa-none(type) method

[20:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4632

[20:26] *** childlikempress is now known as moon-child

[21:07] *** [Tux] left
[21:16] *** squashable6 joined
[21:25] *** [Tux] joined
[21:30] *** discord-raku-bot joined
[21:59] <Geth> ¦ rakudo: jnthn++ created pull request #4633: Replace nqp::attrinited with a descriptor-based approach

[21:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4633

[22:33] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4634: Make concurrent access to an enum by value safe

[22:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4634

[23:44] *** dogbert17 left
