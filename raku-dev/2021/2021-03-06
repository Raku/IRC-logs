[00:41] *** frost-lab joined
[00:58] *** JRaspass joined
[01:59] *** JRaspass left
[02:31] *** kvw_5_ joined
[02:31] *** Kaiepi left
[02:34] *** kvw_5 left
[03:02] *** Kaiepi joined
[03:29] <Geth> ¦ rakudo: codesections self-assigned Wasteful convesions between Order and Bool https://github.com/rakudo/rakudo/issues/4238

[07:15] *** jdv79 left
[07:15] *** jdv79 joined
[08:19] *** sena_kun left
[08:22] *** sena_kun joined
[09:02] *** domidumont joined
[09:02] <Geth> ¦ rakudo: lizmat self-assigned eefc785e0 seems to have broken YAMLish https://github.com/rakudo/rakudo/issues/4237

[09:39] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4239: Optimize truth checks of arrays in whiles and ifs

[09:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4239

[10:09] *** JRaspass joined
[10:22] *** domidumont left
[10:35] *** JRaspass left
[10:36] <sena_kun> japhb++ # a nice report!

[10:37] *** domidumont joined
[10:53] *** Kaiepi left
[11:25] <Geth> ¦ rakudo: 70a8e3661f | (Elizabeth Mattijsen)++ | 4 files

[11:25] <Geth> ¦ rakudo: Make sorting up to 2x as fast

[11:25] <Geth> ¦ rakudo: 

[11:25] <Geth> ¦ rakudo: Following up on a question on StackOverflow:

[11:25] <Geth> ¦ rakudo:   https://stackoverflow.com/questions/66496614/raku-slow-mixes-sorting

[11:25] <Geth> ¦ rakudo: it turned out that checking whether an Order enum is not Same, would

[11:25] <Geth> ¦ rakudo: create a Bool object, which would then be converted to a native int.

[11:25] <Geth> ¦ rakudo: Research is going on into fixing that (bypassing the Bool object), but

[11:25] <Geth> ¦ rakudo: <…commit message has 13 more lines…>

[11:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/70a8e3661f

[11:29] <codesections> lizmat++ 

[11:31] *** domidumont1 joined
[11:34] *** domidumont left
[11:40] *** domidumont1 left
[11:40] <codesections> (I think "up to 2× as fast" is underselling the perf gains from ^^^^.  I just benchmarked a sort based on the SO question, and saw a 4× speedup)

[11:42] <lizmat> better like that than the other way around  :-)

[11:43] <codesections> yep!

[11:45] *** Kaiepi joined
[12:48] <Geth> ¦ rakudo: d61d9836ae | (Elizabeth Mattijsen)++ | 3 files

[12:48] <Geth> ¦ rakudo: Make some more infix cmp candidates upto 7x as fast

[12:48] <Geth> ¦ rakudo: 

[12:48] <Geth> ¦ rakudo: Specifically allomorph cmp, Pair cmp and Complex cmp.  This should

[12:48] <Geth> ¦ rakudo: be quite visible when sorting allomorphs, Pairs or Complex numbers.

[12:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d61d9836ae

[12:49] <lizmat> this should be possible for more cases where cmp is called, but then we have a chicken-egg problem

[12:49] <lizmat> in order to be able to check for Order::Same and friends, the code in the setting needs to be *after* the Order enum code

[12:49] <codesections> hmmm 70a8e3661f seems to break sorting with custom comparators that don't return an Order. 

[12:49] <lizmat> but the Order enum code cannot exists without the Enumeration role

[12:49] <lizmat> codesections 

[12:50] <codesections> c: 70a8e3661f say (^10).sort({$^a > $^b ?? True !! False}); say (^10).sort({$^a > $^b ?? Order::More !! Order::Less});

[12:50] *** linkable6 left
[12:50] <committable6> codesections, ¦70a8e36: «(9 8 7 6 5 4 3 2 1 0)␤(0 1 2 3 4 5 6 7 8 9)␤»

[12:50] <lizmat> well... then they're naughty, as comparators are supposed to return an Order

[12:50] <codesections> True.  But I bet a lot out there don't (it's not enforced)

[12:50] <lizmat> yeah, probably  :-(

[12:51] <codesections> I can take a look at how we could handle it, though

[12:52] *** linkable6 joined
[12:53] <lizmat> sena_kun: could you do a Blin run to check for any module testing fallout? wrt https://github.com/rakudo/rakudo/commit/70a8e3661f

[12:57] <codesections> it also seems like not returning an Order is something we might want to support, though?  Eg <D E F a b c>.sort({$^a.fc gt $^b.fc})

[12:58] <lizmat> don't know...  I mean... https://github.com/rakudo/rakudo/commit/70a8e3661f didn't break any spectests

[12:58] <codesections> that seems pretty clear from a dwim perspective, and works on current release

[12:58] <codesections> true

[13:20] <codesections> Looking at Roast, I _think_ the intent is for Bools to work.  See https://github.com/Raku/roast/blob/master/S32-list/sort.t#L248

[13:23] <lizmat> yeah, testing some changes  :-)

[13:34] <lizmat> it will only take the Order checking path if the Callable indicates returning an Order:D in the signature

[13:35] <lizmat> otherwise it will take the candidate that coerces to Int (now without first coercing to Bool)

[13:42] <Geth> ¦ rakudo: b2ae599a75 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Sorting.pm6

[13:42] <Geth> ¦ rakudo: Take a little bit of different approach on sorting comparators

[13:42] <Geth> ¦ rakudo: 

[13:42] <Geth> ¦ rakudo: Instead of checking for Inty return values of the comparator, and

[13:42] <Geth> ¦ rakudo: Order return values, just check for Order values being returned by

[13:42] <Geth> ¦ rakudo: the comparator, and make that take the fast nqp::eqaddr path.

[13:42] <Geth> ¦ rakudo: 

[13:42] <Geth> ¦ rakudo: Otherwise, use the old generic code path, but instead implicitely

[13:42] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[13:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b2ae599a75

[13:49] <lizmat> codesections: ^^ I think that addresses your points :-)

[13:51] <codesections> thanks, lizmat++  If I'm reading that correctly, only subs with a `--> Order:D` _constraint_ take the ...LIST-WITH-enum path, right?

[13:51] <lizmat> yup

[13:51] <codesections> m: sub returns-order() { Order::Less }; say &returns-order.returns

[13:51] <camelia> rakudo-moar 726a75e24: OUTPUT: «(Mu)␤»

[13:52] <lizmat> m: sub returns-order(--> Order:D) { Order::Less }; say &returns-order.returns

[13:52] <camelia> rakudo-moar 726a75e24: OUTPUT: «(Order:D)␤»

[13:53] <codesections> right.  So a lot of inline fns will probably take the ...WITH-int path.  Which is fine, just a bit slower

[13:53] <lizmat> yeah...  now to make sure all of the builtins have the correct return sig  :-)

[13:54] <codesections> (inline fns that actually do return an Order, I mean)

[13:55] <codesections> haha, yeah.  But this is good -- we're getting to the point where types are speeding things up, not just adding a runtime cost.  Which has always been the goal

[14:06] <Geth> ¦ rakudo: 0ad991e476 | (Elizabeth Mattijsen)++ | 2 files

[14:06] <Geth> ¦ rakudo: Make infix before / after about 40% faster

[14:06] <Geth> ¦ rakudo: 

[14:06] <Geth> ¦ rakudo: By moving their definitions until *after* we know about the Order enum

[14:06] <Geth> ¦ rakudo: and then use the same fast-path approach as with sorting.  Also slap

[14:06] <Geth> ¦ rakudo: the return signature on the proto.

[14:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0ad991e476

[14:09] *** finsternis left
[14:30] *** epony left
[14:38] <Geth> ¦ rakudo: 599b6ea5e4 | (Elizabeth Mattijsen)++ | 12 files

[14:38] <Geth> ¦ rakudo: Add --> Order:D to protos of <=> cmp leg unicmp coll

[14:38] <Geth> ¦ rakudo: 

[14:38] <Geth> ¦ rakudo: So that using these as comparators with sorting will take the fast

[14:38] <Geth> ¦ rakudo: path.  Also remove any --> Order:D from other candidates of these

[14:38] <Geth> ¦ rakudo: infixes, as they are not needed there anymore.

[14:38] <Geth> ¦ rakudo: 

[14:38] <Geth> ¦ rakudo: This caused the movement of some protos and candidates, as they

[14:38] <Geth> ¦ rakudo: should now appear *after* the Order enum has been created in the

[14:38] <Geth> ¦ rakudo: setting.

[14:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/599b6ea5e4

[14:49] *** JRaspass joined
[14:51] <Geth> ¦ rakudo: afab11e6af | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Sorting.pm6

[14:51] <Geth> ¦ rakudo: Make --> Order:D in comparator actually take fast path

[14:51] <Geth> ¦ rakudo: 

[14:51] <Geth> ¦ rakudo: Turns out this is now only a few % faster than the "slow" path, but

[14:51] <Geth> ¦ rakudo: I guess still worth it in some situations.

[14:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/afab11e6af

[14:57] *** frost-lab left
[15:05] *** epony joined
[15:19] <Geth> ¦ rakudo: 9ad4717080 | (Elizabeth Mattijsen)++ | 2 files

[15:19] <Geth> ¦ rakudo: Fixups around infix unicmp and coll

[15:19] <Geth> ¦ rakudo: 

[15:19] <Geth> ¦ rakudo: - Move protos to Order for clarity

[15:19] <Geth> ¦ rakudo: - Pair comparisons with unicmp and coll now fast-path using Order::Same

[15:19] <Geth> ¦ rakudo: - Add Cool candidate for unicmp, it was missing

[15:19] <Geth> ¦ rakudo: - On JVM, make it throw X::NYI instead of just dying

[15:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9ad4717080

[15:21] <lizmat> ok, so sorting with &[coll] will spend 25% of its time looking up $*COLLATION  :-(

[15:32] *** gfldex left
[15:37] *** squashable6 left
[15:40] *** squashable6 joined
[16:13] *** gfldex joined
[16:40] <Geth> ¦ rakudo: codesections++ created pull request #4240: Add --> Order:D for Num's cmp and don't create Bools

[16:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4240

[16:43] <codesections> lizmat: ^^^ is basically the same as what you've been doing, and gets rid of the extra `Bool` that was the other cause of the slowdown in the SO question

[17:43] <Geth> ¦ rakudo: 7f2dba7aee | (Daniel Sockwell)++ | src/core.c/Num.pm6

[17:43] <Geth> ¦ rakudo: Prevent Num &infix:<cmp> from creating useless Bool

[17:43] <Geth> ¦ rakudo: 

[17:43] <Geth> ¦ rakudo: This is another commit following up on b2ae599a75.  This commit

[17:43] <Geth> ¦ rakudo: replaces Num's use of &infix:<or>, which was needlessly constructing a

[17:43] <Geth> ¦ rakudo: Bool.

[17:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7f2dba7aee

[17:43] <Geth> ¦ rakudo: 42a73f1706 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Num.pm6

[17:43] <Geth> ¦ rakudo: Merge pull request #4240 from codesections-forks/num-cmp

[17:43] <Geth> ¦ rakudo: 

[17:43] <Geth> ¦ rakudo: Add --> Order:D for Num's cmp and don't create Bools

[17:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/42a73f1706

[18:43] *** JRaspass left
[18:44] <Geth> ¦ rakudo: 3d2940afea | (Elizabeth Mattijsen)++ | src/core.c/Hyper.pm6

[18:44] <Geth> ¦ rakudo: Fix one more sub reference to nodemap / deepmap

[18:44] <Geth> ¦ rakudo: 

[18:44] <Geth> ¦ rakudo: Skips one level of indirection, which is always good

[18:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3d2940afea

[18:55] <lizmat> hmmm... looks like camelia is stuck again, this time on 726a75e24

[18:55] <lizmat> aka the 2021.02.1 release

[18:55] *** linkable6 left
[18:56] <lizmat> m: dd $*VM.version

[18:56] <camelia> rakudo-moar 726a75e24: OUTPUT: «v2021.02.3.g.4.ae.157.c.33␤»

[18:56] *** linkable6 joined
[18:56] <lizmat> huh?

[18:57] <lizmat> ah, so the git commit reporting is stuck ?

[19:00] <Geth> ¦ rakudo: b21bb5ab62 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[19:00] <Geth> ¦ rakudo: Make sure nodemap / deepmap pass :INITIALIZE to STORE

[19:00] <Geth> ¦ rakudo: 

[19:00] <Geth> ¦ rakudo: This indicates that it is an initialization, which is needed for Maps

[19:00] <Geth> ¦ rakudo: as these cannot be altered later.

[19:00] <Geth> ¦ rakudo: 

[19:00] <Geth> ¦ rakudo: Fixes #4237, japhb++ for the spot!

[19:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b21bb5ab62

[19:01] *** linkable6 left
[19:03] *** linkable6 joined
[19:07] <Geth> ¦ roast: 324d3eda72 | (Elizabeth Mattijsen)++ | S03-metaops/hyper.t

[19:07] <Geth> ¦ roast: Add test for R#4237

[19:07] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/324d3eda72

[19:08] *** linkable6 left
[19:10] *** linkable6 joined
[20:34] *** JRaspass joined
[23:03] *** dogbert11 left
[23:06] *** dogbert11 joined
[23:08] *** dogbert11 left
[23:16] *** dogbert11 joined
[23:43] *** JRaspass left
[23:52] *** JRaspass joined
