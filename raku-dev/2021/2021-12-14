[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:19] <Geth> ¦ DBIish/rbt.complex-types: 5246282492 | (Rod Taylor)++ | 9 files

[00:19] <Geth> ¦ DBIish/rbt.complex-types: Restructure type conversions

[00:19] <Geth> ¦ DBIish/rbt.complex-types: 

[00:19] <Geth> ¦ DBIish/rbt.complex-types: Allow for 2-way registered conversions. From Raku objects to a format suitable for the database (this was hardcoded for Buf already) in addition to the previously registerable conversions from DB to Raku (Bool, DateTime, Buf).

[00:19] <Geth> ¦ DBIish/rbt.complex-types: 

[00:19] <Geth> ¦ DBIish/rbt.complex-types: Allow registration of conversion via register-type-conversion() function calls. This hides the internal implementation which will probably change at some point.

[00:19] <Geth> ¦ DBIish/rbt.complex-types: 

[00:19] <Geth> ¦ DBIish/rbt.complex-types: The pg_custom_type.p6 file contains a sample Raku Point(:$x, :$y) object to a Pg "point" type in both directions.

[00:19] <Geth> ¦ DBIish/rbt.complex-types: review: https://github.com/raku-community-modules/DBIish/commit/5246282492

[00:20] *** Geth left
[00:20] *** Geth joined
[00:27] <Geth> ¦ DBIish: 89dfb87ebb | (Rod Taylor)++ | lib/DBDish/Pg/StatementHandle.pm6

[00:27] <Geth> ¦ DBIish: Use dashy variable names

[00:27] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/89dfb87ebb

[00:27] *** Geth left
[00:27] *** Geth joined
[00:31] *** Geth left
[00:32] *** Geth joined
[00:36] *** Geth left
[00:36] *** Geth joined
[00:37] *** hankache joined
[00:45] <Geth> ¦ DBIish/rbt.fix-ci: 682715c0a5 | (Rod Taylor)++ | .github/workflows/test.yml

[00:45] <Geth> ¦ DBIish/rbt.fix-ci: Additional Debug information for CI

[00:45] <Geth> ¦ DBIish/rbt.fix-ci: review: https://github.com/raku-community-modules/DBIish/commit/682715c0a5

[00:47] *** Geth left
[00:47] *** Geth joined
[00:50] <Geth> ¦ DBIish/rbt.fix-ci: a973742c14 | (Rod Taylor)++ | .github/workflows/test.yml

[00:50] <Geth> ¦ DBIish/rbt.fix-ci: fixup! Additional Debug information for CI

[00:50] <Geth> ¦ DBIish/rbt.fix-ci: review: https://github.com/raku-community-modules/DBIish/commit/a973742c14

[00:50] <Geth> ¦ DBIish/rbt.fix-ci: c3bd587ec1 | (Rod Taylor)++ | .github/workflows/test.yml

[00:50] <Geth> ¦ DBIish/rbt.fix-ci: Remove mysql-client installation

[00:50] <Geth> ¦ DBIish/rbt.fix-ci: 

[00:50] <Geth> ¦ DBIish/rbt.fix-ci: This is already installed and good enough even when it isn't the latest version. Upgrading to the latest version can mess things up.

[00:50] <Geth> ¦ DBIish/rbt.fix-ci: review: https://github.com/raku-community-modules/DBIish/commit/c3bd587ec1

[00:51] <Geth> ¦ DBIish/rbt.fix-ci: f8a0f6d39c | (Rod Taylor)++ | .github/workflows/test.yml

[00:52] <Geth> ¦ DBIish/rbt.fix-ci: Additional Debug information for CI

[00:52] <Geth> ¦ DBIish/rbt.fix-ci: review: https://github.com/raku-community-modules/DBIish/commit/f8a0f6d39c

[00:52] <Geth> ¦ DBIish/rbt.fix-ci: 6590a59d7a | (Rod Taylor)++ | .github/workflows/test.yml

[00:52] <Geth> ¦ DBIish/rbt.fix-ci: Remove mysql-client installation

[00:52] <Geth> ¦ DBIish/rbt.fix-ci: 

[00:52] <Geth> ¦ DBIish/rbt.fix-ci: This is already installed and good enough even when it isn't the latest version. Upgrading to the latest version can mess things up.

[00:52] <Geth> ¦ DBIish/rbt.fix-ci: review: https://github.com/raku-community-modules/DBIish/commit/6590a59d7a

[00:52] *** Geth left
[00:52] *** Geth joined
[00:58] <Geth> ¦ DBIish/rbt.complex-types: 64d7ce54d6 | (Rod Taylor)++ | 9 files

[00:58] <Geth> ¦ DBIish/rbt.complex-types: Restructure type conversions

[00:58] <Geth> ¦ DBIish/rbt.complex-types: 

[00:58] <Geth> ¦ DBIish/rbt.complex-types: Allow for 2-way registered conversions. From Raku objects to a format suitable for the database (this was hardcoded for Buf already) in addition to the previously registerable conversions from DB to Raku (Bool, DateTime, Buf).

[00:58] <Geth> ¦ DBIish/rbt.complex-types: 

[00:58] <Geth> ¦ DBIish/rbt.complex-types: Allow registration of conversion via register-type-conversion() function calls. This hides the internal implementation which will probably change at some point.

[00:58] <Geth> ¦ DBIish/rbt.complex-types: 

[00:58] <Geth> ¦ DBIish/rbt.complex-types: The pg_custom_type.p6 file contains a sample Raku Point(:$x, :$y) object to a Pg "point" type in both directions.

[00:59] <Geth> ¦ DBIish/rbt.complex-types: review: https://github.com/raku-community-modules/DBIish/commit/64d7ce54d6

[00:59] <Geth> ¦ DBIish: f8a0f6d39c | (Rod Taylor)++ | .github/workflows/test.yml

[00:59] <Geth> ¦ DBIish: Additional Debug information for CI

[00:59] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/f8a0f6d39c

[00:59] <Geth> ¦ DBIish: 6590a59d7a | (Rod Taylor)++ | .github/workflows/test.yml

[00:59] <Geth> ¦ DBIish: Remove mysql-client installation

[00:59] <Geth> ¦ DBIish: 

[00:59] <Geth> ¦ DBIish: This is already installed and good enough even when it isn't the latest version. Upgrading to the latest version can mess things up.

[00:59] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/6590a59d7a

[00:59] *** hankache left
[00:59] <Geth> ¦ DBIish/rbt.complex-types: d7f6ae4741 | (Rod Taylor)++ | 9 files

[00:59] <Geth> ¦ DBIish/rbt.complex-types: Restructure type conversions

[00:59] <Geth> ¦ DBIish/rbt.complex-types: 

[00:59] <Geth> ¦ DBIish/rbt.complex-types: Allow for 2-way registered conversions. From Raku objects to a format suitable for the database (this was hardcoded for Buf already) in addition to the previously registerable conversions from DB to Raku (Bool, DateTime, Buf).

[00:59] <Geth> ¦ DBIish/rbt.complex-types: 

[00:59] <Geth> ¦ DBIish/rbt.complex-types: Allow registration of conversion via register-type-conversion() function calls. This hides the internal implementation which will probably change at some point.

[00:59] <Geth> ¦ DBIish/rbt.complex-types: 

[01:00] <Geth> ¦ DBIish/rbt.complex-types: The pg_custom_type.p6 file contains a sample Raku Point(:$x, :$y) object to a Pg "point" type in both directions.

[01:00] <Geth> ¦ DBIish/rbt.complex-types: review: https://github.com/raku-community-modules/DBIish/commit/d7f6ae4741

[01:00] *** Geth left
[01:01] *** Geth joined
[01:05] <Geth> ¦ DBIish/rbt.complex-types: f8dcea8a6e | (Rod Taylor)++ | 9 files

[01:05] <Geth> ¦ DBIish/rbt.complex-types: Restructure type conversions

[01:05] <Geth> ¦ DBIish/rbt.complex-types: 

[01:05] <Geth> ¦ DBIish/rbt.complex-types: Allow for 2-way registered conversions. From Raku objects to a format suitable for the database (this was hardcoded for Buf already) in addition to the previously registerable conversions from DB to Raku (Bool, DateTime, Buf).

[01:05] <Geth> ¦ DBIish/rbt.complex-types: 

[01:05] <Geth> ¦ DBIish/rbt.complex-types: Allow registration of conversion via register-type-conversion() function calls. This hides the internal implementation which will probably change at some point.

[01:05] <Geth> ¦ DBIish/rbt.complex-types: 

[01:05] <Geth> ¦ DBIish/rbt.complex-types: The pg_custom_type.p6 file contains a sample Raku Point(:$x, :$y) object to a Pg "point" type in both directions.

[01:05] <Geth> ¦ DBIish/rbt.complex-types: review: https://github.com/raku-community-modules/DBIish/commit/f8dcea8a6e

[01:05] *** Geth left
[01:05] *** Geth joined
[01:35] <Geth> ¦ DBIish/rbt.schedule-ci: 176c28f453 | (Rod Taylor)++ | .github/workflows/test.yml

[01:35] <Geth> ¦ DBIish/rbt.schedule-ci: Schedule daily CI run

[01:35] <Geth> ¦ DBIish/rbt.schedule-ci: review: https://github.com/raku-community-modules/DBIish/commit/176c28f453

[01:37] *** Geth left
[01:38] *** Geth joined
[01:41] <Geth> ¦ DBIish: 176c28f453 | (Rod Taylor)++ | .github/workflows/test.yml

[01:41] <Geth> ¦ DBIish: Schedule daily CI run

[01:41] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/176c28f453

[01:42] *** Geth left
[01:42] *** Geth joined
[01:57] *** discord-raku-bot left
[03:22] *** sourceable6 left
[03:22] *** notable6 left
[03:22] *** nativecallable6 left
[03:22] *** coverable6 left
[03:22] *** greppable6 left
[03:22] *** releasable6 left
[03:22] *** committable6 left
[03:22] *** shareable6 left
[03:22] *** bloatable6 left
[03:22] *** squashable6 left
[03:22] *** evalable6 left
[03:22] *** unicodable6 left
[03:22] *** benchable6 left
[03:22] *** reportable6 left
[03:22] *** linkable6 left
[03:22] *** tellable6 left
[03:22] *** bisectable6 left
[03:22] *** quotable6 left
[03:22] *** statisfiable6 left
[03:22] *** committable6 joined
[03:23] *** linkable6 joined
[03:23] *** reportable6 joined
[03:24] *** unicodable6 joined
[03:24] *** sourceable6 joined
[03:24] *** notable6 joined
[03:24] *** quotable6 joined
[03:24] *** nativecallable6 joined
[03:25] *** greppable6 joined
[04:23] *** evalable6 joined
[04:23] *** bisectable6 joined
[04:24] *** coverable6 joined
[04:25] *** releasable6 joined
[04:25] *** bloatable6 joined
[05:23] *** tellable6 joined
[05:24] *** shareable6 joined
[05:24] *** benchable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:23] *** statisfiable6 joined
[06:23] *** squashable6 joined
[08:56] <lizmat> Files=1349, Tests=117874, 315 wallclock secs (34.94 usr  9.36 sys + 4355.06 cusr 353.43 csys = 4752.79 CPU)

[09:30] *** [Tux] left
[09:39] *** dogbert17 left
[09:39] *** moon-child left
[09:45] *** TempIRCLogger__ left
[09:46] *** statisfiable6 left
[09:46] *** Xliff left
[09:46] *** Kaiepi left
[09:46] *** rypervenche left
[09:46] *** Colt left
[09:46] *** kawaii_ left
[09:46] *** JRaspass left
[09:46] *** jdv left
[09:46] *** masak left
[09:46] *** sivoais left
[09:46] *** eof left
[09:46] *** reportable6 left
[09:46] *** benchable6 left
[09:46] *** shareable6 left
[09:46] *** tellable6 left
[09:46] *** bloatable6 left
[09:46] *** releasable6 left
[09:46] *** coverable6 left
[09:46] *** bisectable6 left
[09:46] *** evalable6 left
[09:46] *** jjatria left
[09:46] *** sjn left
[09:46] *** ilogger2 left
[09:46] *** greppable6 left
[09:46] *** nativecallable6 left
[09:46] *** notable6 left
[09:46] *** linkable6 left
[09:46] *** committable6 left
[09:46] *** samcv left
[09:46] *** timo left
[09:46] *** casaca left
[09:46] *** sena_kun left
[09:46] *** Geth left
[09:46] *** Util_ left
[09:46] *** codesections left
[09:46] *** qorg11 left
[09:46] *** djinni` left
[09:46] *** Voldenet left
[09:46] *** squashable6 left
[09:46] *** quotable6 left
[09:46] *** sourceable6 left
[09:46] *** unicodable6 left
[09:46] *** frost left
[09:46] *** [Coke] left
[09:46] *** vrurg left
[09:46] *** nine left
[09:46] *** tonyo left
[09:46] *** ugexe left
[09:46] *** tbrowder left
[09:46] *** japhb left
[09:46] *** gfldex left
[09:46] *** maettu left
[09:46] *** zostay left
[09:46] *** camelia left
[09:46] *** lizmat left
[09:46] *** SmokeMachine left
[09:46] *** nebuchadnezzar left
[09:46] *** leont left
[09:46] *** rba left
[09:52] *** Colt left
[09:52] *** Colt joined
[10:07] *** Geth left
[10:07] *** Geth joined
[10:16] *** Geth left
[10:16] *** Geth joined
[10:29] <[Tux]> Rakudo v2021.10-146-gc7e456d35 (v6.d) on MoarVM 2021.10-126-g83c53580a

[10:29] <[Tux]> csv-test-xs-20      0.408 -  0.412

[10:29] <[Tux]> csv-ip5xs           0.853 -  0.869

[10:29] <[Tux]> test-t --race       0.968 -  1.004

[10:29] <[Tux]> test-t              1.670 -  1.711

[10:29] <[Tux]> csv-parser          4.215 -  4.218

[10:29] <[Tux]> csv-ip5xs-20        5.157 -  5.409

[10:29] <[Tux]> test                7.304 -  7.374

[10:29] <[Tux]> test-t-20 --race    7.530 -  7.861

[10:29] <[Tux]> test-t-20          24.622 - 24.840

[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:29] *** evalable6 left
[11:29] *** linkable6 left
[11:31] *** linkable6 joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:32] *** evalable6 joined
[12:38] *** squashable6 left
[12:42] *** discord-raku-bot joined
[13:56] <lizmat> m: class Foo { class Zippo { }; class Zappo { }; class Zippo::Deeper { }; }; say Zippo; say Zappo   # why is Zippo visible, and Zappo not?

[13:56] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Zappo used at line 1. Did you mean 'Zippo'?␤␤»

[13:57] <lizmat> nine  ^^ ?

[13:58] <lizmat> or put differently: why *is* Zippo visible?  Because it has a subclass Zippo::Deeper ?

[13:59] <lizmat> making the deeper class a my:

[13:59] <lizmat> m: class Foo { class Zippo { }; class Zappo { }; my class Zippo::Deeper { }; }; say Zippo; say Zappo   # why is Zippo visible, and Zappo not?

[13:59] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared names:␤    Zappo used at line 1␤    Zippo used at line 1␤␤»

[14:00] <lizmat> so, having an "our" subclass makes the parent class visible

[14:09] <ugexe> m: class Foo::Bar { }; say Foo

[14:09] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(Foo)␤»

[14:09] <ugexe> isnt it just that?

[14:19] <lizmat> m: class Foo { }; say Foo

[14:19] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(Foo)␤»

[14:19] <lizmat> no?

[14:20] <lizmat> m: class Foo { class Bar { } }; say Foo; say Foo::Bar

[14:20] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(Foo)␤(Bar)␤»

[14:20] <lizmat> m: class Foo { my class Bar { } }; say Foo; say Foo::Bar

[14:20] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(Foo)␤Could not find symbol '&Bar' in 'Foo'␤  in block <unit> at <tmp> line 1␤␤»

[14:20] <lizmat> m: class Foo { my class Bar { }; my class Bar::Baz { } }; say Foo; say Foo::Bar

[14:20] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(Foo)␤Could not find symbol '&Bar' in 'Foo'␤  in block <unit> at <tmp> line 1␤␤»

[14:20] <lizmat> m: class Foo { my class Bar { }; class Bar::Baz { } }; say Foo; say Foo::Bar

[14:20] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(Foo)␤Could not find symbol '&Bar' in 'Foo'␤  in block <unit> at <tmp> line 1␤␤»

[14:20] <lizmat> m: class Foo { my class Bar { }; class Bar::Baz { } }; say Foo; say Foo::Bar::Baz

[14:20] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(Foo)␤Could not find symbol '&Baz' in 'Foo::Bar'␤  in block <unit> at <tmp> line 1␤␤»

[14:21] <lizmat> m: class Foo { class Bar { }; class Bar::Baz { } }; say Foo; say Foo::Bar::Baz

[14:21] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(Foo)␤(Baz)␤»

[14:21] <lizmat> m: class Foo { my class Bar { }; class Bar::Baz { } }; say Foo; say Bar

[14:21] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(Foo)␤(Bar)␤»

[14:22] <lizmat> I could understand if that would make Foo::Bar visible, in order to make Foo::Bar::Baz visible

[14:22] <lizmat> but why would that make Bar (without Foo::) visible ?

[14:39] *** squashable6 joined
[14:59] *** frost left
[15:35] <nine> lizmat: I've come across a bunch of issues with nested and multi part names when working on in-process precompilation. Apparently the fixes didn't make it into master.

[15:38] <Geth> ¦ rakudo/precomp-singleprocess-endgame: 20 commits pushed by (Arne Skjærholt)++, (Stefan Seifert)++

[15:38] <Geth> ¦ rakudo/precomp-singleprocess-endgame: review: https://github.com/rakudo/rakudo/compare/3fe0dea7d398^...60436d41eb3a

[15:39] *** Geth left
[15:39] *** Geth joined
[15:39] <nine> https://github.com/rakudo/rakudo/commit/60436d41eb3a80ce7e3d74a05153ca182b03b2c3#diff-8367cb076963fa68f66865e95b749c4e14458a637898db8adc7e6157314797adL1662

[15:42] *** atroxaper joined
[15:49] <atroxaper> I have a dev related question. I try to investigate how compunit id are created for filename in .precomp directory. I've read FileSystem.pm6 and think that is something like sha1( sha1(meta_name:ver<meta_ver>:auth<meta_auth>:api<meta_api>) ~ module-short-name). But my experiments fails. I have a distribution with META6.json and a module A::B (for example) and I have compiled module in the .precomp. But I cannot reproduce the module id. 

[15:49] <atroxaper> Where I am wrong?

[15:54] <ugexe> first, im obliged to say you probably shouldnt be depending on implementation details

[15:54] <ugexe> second, you are forgetting to include the distribution name when sha1ing the ver/auth/api

[15:56] <atroxaper> ugexe: precomp at all is implementation details :)

[15:57] <atroxaper> ugexe: meta_name is META6.json{name}. Is it distribution name?

[15:57] <ugexe> not the parts covered by roast

[15:57] <ugexe> oh i didnt see meta_name for some reason

[15:57] <atroxaper> Agree. But zef does so too :)

[15:58] <ugexe> probably not for long

[15:59] <ugexe> a lot of what it does is because i hadnt yet implemented public interfaces in rakudo, which ive since done for some things

[16:00] <ugexe> and even then it is only using it to look up stuff in rakudo because so many people want to look up sha1

[16:00] <ugexe> there is nothing critical that uses it

[16:01] <atroxaper> For my purpose it will not be some critical. It will speed up.

[16:02] <ugexe> what is it supposed to do

[16:04] <atroxaper> Anyway. I found a second option, when FileSystem does not use META6.json. It creates a hash with face information. I do not understand which value $prefix has? https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/Repository/FileSystem.pm6#L295

[16:07] <atroxaper> It is for Rococo. To my shame, I found that I calculate .precomp id for modules in a wrong way and always use precomp files compiled by myself. I want to use lib/.precomp files to if they there.

[16:09] <atroxaper> A hard and naive way is analysing all .precomp files and get the information from dependencies header.

[16:10] <ugexe> fwiw i personally wouldn't encourage users to even think about .precomp

[16:10] <ugexe> if you are doing something with .precomp that should be invisible to the users

[16:10] <ugexe> otherwise you are promoting the implementation details themselves

[16:11] <ugexe> so like `--fix-compunit - erase <library>/.precomp directory ` shoudl instead say like 'erase precomp files'

[16:17] <ugexe> i would also have to discourage telling users errors like to please only have X number of directories in lib/.precomp is 

[16:17] <ugexe> i think instead you would want to create your own CompUnit::Repository

[16:20] <jdv> sena_kun is altai-man, right?

[16:20] <ugexe> yes

[16:21] <jdv> sena_kun: thanks for the blin run the other day.

[16:21] <jdv> i just finally got one that's basically a superset of that one - https://github.com/rakudo/rakudo/issues/4667

[16:23] <jdv> codesections: looks like your ro thing is responsible for some fallut

[16:23] <jdv> *fallout

[16:23] <jdv> do we care about November?  i seem to recall maybe not.

[16:24] <nine> What is Rococo_

[16:25] <atroxaper> ugexe: How my own CompUtin::Repository can help me? A user run the code -> I want to analyze his precomp files if they exists.

[16:26] <MasterDuke> nine: https://raku-advent.blog/2021/12/09/raku-code-coverage/

[16:26] <jdv> nine: looks like some of the fallout maybe be from your recent works

[16:27] *** Geth left
[16:27] <nine> jdv: what fallout?

[16:27] *** Geth joined
[16:27] <jdv> blin

[16:27] <nine> ah, #moarvm

[16:28] <jdv> and ^, but yes

[16:38] <ugexe> atroxaper: can the user ever run code and the precomp files not exist?

[16:39] <ugexe> i would expect the act of running the code to precompile the files in the first place

[16:40] <atroxaper> ugexe: In my experiments, not all modules will be precompiles. Dunno why.

[16:41] <ugexe> you might try to capture the RAKUDO_MODULE_DEBUG=1 from an instance it fails to precompile

[16:41] <ugexe> (for us to look at)

[16:41] <atroxaper> Ok.

[16:42] <ugexe> also parsing the output of RAKUDO_MODULE_DEBUG=1 can probably give you the information you want

[16:42] <atroxaper> So. I think, I will try to use native CompUnit::Repository::FileSystem to retrieve ids.

[16:44] <ugexe> thats one way to guess, although RAKUDO_MODULE_DEBUG=1 will literally tell you

[16:45] <ugexe>  1 RMD: Loading precompiled

[16:45] <ugexe>         /Users/ugexe/repos/zef/.precomp/5D2982B12B342A3DE3151613889FE10DB41E6685/CF/CF569252EA8F158C63A712BA13344194C93C6B07

[16:47] <atroxaper> I need a map like FileName.rakumod -> id

[16:49] <ugexe> you can make a map out of what i said

[16:49] <nine> I'm still worried that this is the wrong approach in the first place. I'm very tempted to do away with those .precomp directories alltogether because https://github.com/rakudo/rakudo/issues/4655#issuecomment-991837842 has a point

[16:50] <ugexe> thats just moving .precomp :P

[16:52] <atroxaper> Hm... :)

[17:27] *** evalable6 left
[17:27] *** linkable6 left
[17:28] *** evalable6 joined
[17:29] *** linkable6 joined
[18:02] *** reportable6 left
[18:48] *** [Coke] left
[18:58] *** [Coke] joined
[18:59] *** Geth left
[19:00] *** Geth joined
[19:00] *** linkable6 left
[19:04] *** Geth left
[19:04] *** Geth joined
[19:04] *** atroxaper left
[19:08] *** Geth left
[19:09] *** Geth joined
[19:38] <Geth> ¦ rakudo: usev6++ created pull request #4668: [JVM] Don't let signal(SIGINT) break the REPL

[19:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4668

[19:40] *** Geth left
[19:40] *** Geth joined
[20:01] *** linkable6 joined
[20:05] *** reportable6 joined
[20:42] *** vrurg left
[20:44] *** vrurg joined
[20:57] *** Geth left
[20:57] *** Geth joined
[21:24] *** patrickb joined
[21:29] *** sena_kun left
[21:31] *** sena_kun joined
[22:03] <Geth> ¦ whateverable: 757a0f9fc7 | (Elizabeth Mattijsen)++ | 3 files

[22:03] <Geth> ¦ whateverable: Make Whateverable work with latest IRC::Client

[22:03] <Geth> ¦ whateverable: 

[22:03] <Geth> ¦ whateverable: Basically, just "use IRC::Client" will give you everything you need.

[22:03] <Geth> ¦ whateverable: review: https://github.com/Raku/whateverable/commit/757a0f9fc7

[22:04] <lizmat> jdv: ^^^  just FYI

[22:04] *** Geth left
[22:04] *** Geth joined
[22:04] <jdv> lizmat: ok

[22:05] <lizmat> I've tried to get it to work again all day, but as nine also confirmed, there's stuff there that we need to look into deeper

[22:05] <lizmat> the fix was easy: remove one line, and remove ::Message from another

[22:05] <jdv> cool

[22:13] <lizmat> I never saw the point of having a Foo/Bar.pm6, which does a "use Foo"

[22:15] <jdv> sure.  as long as it works:)

[22:26] *** patrickb left
[22:27] <Geth> ¦ nqp: MasterDuke17++ created pull request #752: Change nqp::radix(_I)? to return # chars converted

[22:27] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/752

[22:28] *** Geth left
[22:28] *** Geth joined
[22:39] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4669: Adapt to nqp::radix(_I)? now returning # chars converted

[22:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4669

[23:19] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4670: Restore larger limit for using string_to_int on 64bit systems

[23:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4670

[23:50] <timo> codesections: have you considered instead of giving Block an .is method, introducing a .is postfix operator?

[23:51] <timo> m: sub postfix:<.is>(&b) { return %( value => &b() ) }; { 5 + 9 }.is.value.say

[23:51] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «No such method 'value' for invocant of type 'Hash'.  Did you mean␤'values'?␤  in block <unit> at <tmp> line 1␤␤»

[23:51] <timo> m: sub postfix:<.is>(&b) { return %( value => &b() ) }; { 5 + 9 }.is<value>.say

[23:51] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «No such method 'is' for invocant of type 'Block'.  Did you mean 'isa'?␤  in block <unit> at <tmp> line 1␤␤»

[23:51] <timo> welp! never mind then?

[23:53] <MasterDuke> m: sub postfix:<?is>(&b) { return %( value => &b() ) }; { 5 + 9 }?is<value>.say

[23:53] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «14␤»

