[00:02] *** reportable6 left
[00:41] *** linkable6 joined
[01:10] *** frost joined
[01:11] *** frost left
[01:58] *** melezhik left
[02:04] *** reportable6 joined
[02:07] *** frost joined
[03:07] *** linkable6 left
[03:07] *** squashable6 left
[03:07] *** greppable6 left
[03:07] *** reportable6 left
[03:07] *** coverable6 left
[03:07] *** bloatable6 left
[03:07] *** committable6 left
[03:07] *** benchable6 left
[03:07] *** releasable6 left
[03:07] *** shareable6 left
[03:07] *** statisfiable6 left
[03:07] *** evalable6 left
[03:07] *** quotable6 left
[03:07] *** tellable6 left
[03:07] *** bisectable6 left
[03:07] *** benchable6 joined
[03:07] *** committable6 joined
[03:08] *** releasable6 joined
[03:09] *** shareable6 joined
[03:10] *** reportable6 joined
[04:07] *** squashable6 joined
[04:08] *** bloatable6 joined
[04:08] *** statisfiable6 joined
[04:09] *** quotable6 joined
[04:24] *** MasterDuke left
[05:09] *** greppable6 joined
[06:02] *** reportable6 left
[06:08] *** tellable6 joined
[06:08] *** coverable6 joined
[06:27] <Geth> ¦ roast: usev6++ created pull request #761: [JVM] Fudge some failing tests
[06:27] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/761
[06:34] *** japhb left
[06:35] *** japhb joined
[06:38] <Geth> ¦ rakudo: usev6++ created pull request #4574: [JVM] Restore pre-new-disp behaviour for phasers
[06:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4574
[07:04] *** reportable6 joined
[07:07] *** linkable6 joined
[07:07] *** bisectable6 joined
[07:08] *** evalable6 joined
[07:19] *** patrickb joined
[07:49] *** patrickb left
[07:50] *** patrickb joined
[09:30] *** squashable6 left
[09:33] *** squashable6 joined
[10:34] *** Altai-man joined
[10:35] <Altai-man> releasable6, status
[10:35] <releasable6> Altai-man, Next release in ≈7 days and ≈8 hours. 5 blockers. Changelog for this release was not started yet
[10:36] <releasable6> Altai-man, Details: https://gist.github.com/1c9eb6eda3f29e83daa887c06c1e8b9e
[11:34] <lizmat> am I going crazy?
[11:34] <lizmat> if @!channels is filled with strings, how can:
[11:34] <lizmat> @!channels = @!channels.map: { $_ }
[11:34] <lizmat> empty it ?
[11:34] <Altai-man> lizmat, what's your rakudo version?
[11:35] <lizmat> master
[11:35] <Altai-man> lizmat, does it have https://github.com/rakudo/rakudo/commit/8d1f24f9c740efd6a274fce550544b74641f77d9 ?
[11:36] <lizmat> yes
[11:37] <Altai-man> no idea then
[11:38] <Altai-man> lizmat, is it the same on release?
[11:38] <lizmat> no idea...
[11:38] <timo> lizmat: can you try .eager-ing it?
[11:38] <lizmat> m: class A { has @.a; method TWEAK { @!a = @!a.map: { $_ } } }; dd A.new(a => <a b c>).a   # the golf doesn't have it
[11:38] <camelia> rakudo-moar 33296d406: OUTPUT: «Array @!a = ["a", "b", "c"]␤»
[11:39] <lizmat> ahhh   the golf *does* have it:
[11:39] <lizmat> m: class A { has str @.a; method TWEAK { @!a = @!a.map: { $_ } } }; dd A.new(a => <a b c>).a   # the golf doesn't have it
[11:39] <camelia> rakudo-moar 33296d406: OUTPUT: «array[str].new()␤»
[11:39] <lizmat> bisectable6: class A { has str @.a; method TWEAK { @!a = @!a.map: { $_ } } }; dd A.new(a => <a b c>).a
[11:39] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight
[11:40] <lizmat> aka, if the it is a native str array, it fails
[11:41] <bisectable6> lizmat, Output on all releases: https://gist.github.com/c0ea9c584f324aedf8a2f02d18d96abc
[11:41] <bisectable6> lizmat, Bisecting by exit signal (old=2018.10 new=2018.11). Old exit signal: 1 (SIGHUP)
[11:42] <bisectable6> lizmat, bisect log: https://gist.github.com/84bac622e7f8d54ea1e9a06cede3aefd
[11:42] <bisectable6> lizmat, (2018-11-18) https://github.com/rakudo/rakudo/commit/f1fa5adfff114757cb7c1e76c506f1d02f6d48e5
[11:42] <bisectable6> lizmat, Bisecting by exit signal (old=2018.03 new=2018.04.1). Old exit signal: 0 (None)
[11:42] <lizmat> wow, that's been there for a while then
[11:42] <Altai-man> so timo a-and...
[11:43] <bisectable6> lizmat, bisect log: https://gist.github.com/4cba1b2ad5aeee817f270df1db4f454a
[11:43] <bisectable6> lizmat, (2018-04-09) https://github.com/rakudo/rakudo/commit/72473bd0ad0677558d64895c31075c4215ddbcf1
[11:43] <bisectable6> lizmat, Bisecting by exit code (old=2016.02 new=2016.03). Old exit code: 1
[11:43] <bisectable6> lizmat, bisect log: https://gist.github.com/89a3e97794e139c2cb4d38bf0b08beda
[11:43] <bisectable6> lizmat, (2016-03-17) https://github.com/rakudo/rakudo/commit/eed4ebb0c0f5c7169c9f4536f4bd13f405d8f3cd
[11:44] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/ed7c64a7a6e9693e18b3e07045cd263e
[11:46] <lizmat> it looks like the attribute is emptied before it is iterated
[11:54] * lizmat takes the easy way out for now:
[11:54] <lizmat>  s/str/Str/
[11:55] <timo> you would assume that the code to assign first empties the array so stuff can be pushed into it, then iterates the iterator used to generate the values, which then finds the empty array
[12:02] *** reportable6 left
[12:03] <lizmat> I think I know where it goes wrong now... will look at it after unstacking what I'm working on now
[12:09] <timo> yak it all back
[12:17] <lizmat> yeah  :-(
[12:21] <lizmat> m: my str @a = <a b c>; @a = @a.map({$_}); dd @   # shortest golf
[12:21] <camelia> rakudo-moar 33296d406: OUTPUT: «Array @ = []␤»
[12:22] <lizmat> m: my int @a = 1,2,3; @a = @a.map({$_}); dd @a   # int natives as well
[12:22] <camelia> rakudo-moar 33296d406: OUTPUT: «array[int].new()␤»
[12:22] <lizmat> m: my num @a = 1e0,2e0,3e0; @a = @a.map({$_}); dd @a   # num natives as well
[12:22] <camelia> rakudo-moar 33296d406: OUTPUT: «array[num].new()␤»
[12:38] <timo> i don't think we have any choice but either make this a DIHWIDT or defensively copy every native array we iterate over
[12:51] <lizmat> I think we can actually check in STORE whether the source == destination, and only do that then
[12:51] <lizmat> hmmm... maybe not :-(
[12:52] <lizmat> meh
[13:03] <timo> not necessarily if the iterator is any more complex than just iterating over the original array
[13:05] *** reportable6 joined
[13:19] <lizmat> hmmm... think this could be fixed in codegen
[13:19] <lizmat> and perhaps should
[13:27] *** frost left
[13:28] <timo> I don't know how that would work but I am all ears
[13:28] <lizmat> if codegen spots @a = @a  something and @a is a native, add a .clone ?
[13:29] <lizmat> I guess that will be more easily spottable in RakuAST
[13:30] <timo> i think we already have a "can't use variable in declaration of itself" check somewhere
[13:30] <timo> m: my $foo = $foo ~ "hi"
[13:30] <camelia> rakudo-moar 33296d406: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $foo in declaration to initialize itself␤at <tmp>:1␤------> 3my $foo = $7⏏5foo ~ "hi"␤    expecting any of:␤        term␤»
[13:30] <lizmat> yeah, but this would not be a declaration
[13:30] <timo> m: my int @foo = @foo.map({ *.Str })
[13:30] <camelia> rakudo-moar 33296d406: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable @foo in declaration to initialize itself␤at <tmp>:1␤------> 3my int @foo = @7⏏5foo.map({ *.Str })␤    expecting any of:␤        term␤»
[13:30] <timo> yes, but the code to figure it out already exists somewhere, ripe to be stolen
[13:31] <lizmat> guess it's the static optimizer  :-(
[13:40] <timo> ah, hm, but this isn't always as easy tho
[13:40] <timo> just mentioning the variable being assigned to, i mean
[13:40] <timo> there's valid uses for that
[13:40] <timo> @!bleh = 0 xx @!bleh.elems or what have you
[13:42] <lizmat> m: my @a = 0 xx @a.elems
[13:42] <camelia> rakudo-moar 33296d406: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable @a in declaration to initialize itself␤at <tmp>:1␤------> 3my @a = 0 xx @7⏏5a.elems␤    expecting any of:␤        term␤»
[13:42] <lizmat> that is able to see it ?
[13:42] <timo> i mean not in declaration
[13:43] <timo> like your golf earlier; my str @a = <a b c>; @a = 0 xx @a;
[13:43] <timo> that should not be rejected by whatever's doing the checking
[13:43] *** patrickb left
[13:44] *** patrickb joined
[13:49] <Altai-man> releasable6, status
[13:49] <releasable6> Altai-man, Next release in ≈7 days and ≈5 hours. 5 blockers. Changelog for this release was not started yet
[13:49] <releasable6> Altai-man, Details: https://gist.github.com/f5008efaea5f43630b7ef6998ec26882
[15:18] *** vrurg left
[15:21] *** patrickb left
[15:30] <[Coke]> at one point we (i?) added "has conflicts" as a tag to some PRs. It looks like github is managing this for us now. Anyone mind if I kill that tag on the Rakudo PRs?
[15:30] *** melezhik joined
[15:32] *** melezhik left
[15:38] <[Coke]> https://github.com/rakudo/rakudo/pull/4447 - any objection to me merging Altai-man's PR here?
[15:39] <Altai-man> [Coke], I think it wants one more commit from vrurg to be addressed.
[15:40] <Altai-man> .oO ( You can (not) adverb )
[15:41] <[Coke]> eh. I agree with your comment.
[15:41] <Geth> ¦ rakudo/add-two-error-message-tests: 5aba3d3126 | Altai-man++ (committed using GitHub Web editor) | t/05-messages/03-errors.t
[15:41] <Geth> ¦ rakudo/add-two-error-message-tests: Use longer error message
[15:41] <Geth> ¦ rakudo/add-two-error-message-tests: review: https://github.com/rakudo/rakudo/commit/5aba3d3126
[15:41] <[Coke]> ... /me kills the test he was just running.
[15:42] <Geth> ¦ nqp: 6b52bd89be | (Jonathan Worthington)++ | tools/templates/MOAR_REVISION
[15:42] <Geth> ¦ nqp: Bump for assorted MoarVM fixes
[15:42] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/6b52bd89be
[15:42] <tbrowder> .tell jnthn roast PR #759 for the heredoc change is ready for review again
[15:42] <tellable6> tbrowder, I'll pass your message to jnthn
[15:43] <[Coke]> Altai-man: ok, if the checks pass, let's merge that.
[15:44] <Geth> ¦ rakudo: ef95fe2e1b | (Jonathan Worthington)++ | tools/templates/NQP_REVISION
[15:44] <Geth> ¦ rakudo: Bump for assorted MoarVM fixes
[15:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ef95fe2e1b
[15:44] <Geth> ¦ rakudo: ca3355a873 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp
[15:44] <Geth> ¦ rakudo: Get callwith working with complex dispatches
[15:44] <Geth> ¦ rakudo: 
[15:44] <Geth> ¦ rakudo: When we combine different kinds of dispatch and also have callwith, the
[15:44] <Geth> ¦ rakudo: arguments need to apply to all outer dispatches too. For example, if we
[15:44] <Geth> ¦ rakudo: have a wrap of a multi method, and do a `callwith` in the wrapper, then
[15:44] <Geth> ¦ rakudo: the arguments have to apply to the multi and method dispatches too. A
[15:44] <Geth> ¦ rakudo: description of the strategy can be found in the large comment added in
[15:44] <Geth> ¦ rakudo: this commit.
[15:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ca3355a873
[15:44] <Geth> ¦ rakudo: d6d90f41e0 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp
[15:44] <Geth> ¦ rakudo: Don't set up a dead resumption with no wrappers
[15:44] <Geth> ¦ rakudo: 
[15:44] <Geth> ¦ rakudo: If the resumption will already be exhausted, there's no reason to set it
[15:44] <Geth> ¦ rakudo: up in the first place. An alternative is to handle the already exhausted
[15:44] <Geth> ¦ rakudo: at resume initialization case in the resume callback, but this is both
[15:45] <Geth> ¦ rakudo: simpler and cheaper.
[15:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d6d90f41e0
[15:45] <Geth> ¦ roast: 6d88220c78 | (Jonathan Worthington)++ | S06-advanced/dispatching.t
[15:45] <Geth> ¦ roast: Unfudge some dispatcher tests, add some more
[15:45] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6d88220c78
[15:47] <Altai-man> releasable6, status
[15:47] <releasable6> Altai-man, Next release in ≈7 days and ≈3 hours. 3 blockers. Changelog for this release was not started yet
[15:47] <releasable6> Altai-man, Details: https://gist.github.com/5b908bff8eb5ee187f32cf185019a5ec
[15:57] <[Coke]> lizmat: for https://github.com/rakudo/rakudo/pull/3897, is the fix to add an explicit use MONKEY-SEE-NO-EVAL in the impacted test files?
[16:00] <lizmat> I'd say, yes
[16:14] *** MasterDuke joined
[16:16] <[Coke]> for an older PR like that, should we rebase and force push?
[16:16] <[Coke]> (and then deal wtih fallout) Seems slightly nicer than merging master in.
[17:08] *** melezhik joined
[17:10] *** Altai-man left
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:51] *** Geth left
[18:51] *** Geth joined
[18:52] *** RakuIRCLogger joined
[19:01] <lizmat> the new logs server is now live: https://logs.liz.nl/home.html
[19:18] *** sena_kun left
[19:35] *** sena_kun joined
[20:01] *** melezhik left
[20:06] *** vrurg joined
[20:48] *** RakuIRCLogger left
[20:49] *** RakuIRCLogger joined
[21:07] *** melezhik joined
[22:14] <Geth> ¦ rakudo: a78c9f0dba | (Tom Browder)++ | src/Perl6/Grammar.nqp
[22:14] <Geth> ¦ rakudo: Prevent heredocs continuing after a block
[22:14] <Geth> ¦ rakudo: 
[22:14] <Geth> ¦ rakudo: This change addresses proper handling of heredocs
[22:14] <Geth> ¦ rakudo: raised in issue #4539 where the docs implied
[22:14] <Geth> ¦ rakudo: a heredoc could be defined following a block.
[22:14] <Geth> ¦ rakudo: 
[22:14] <Geth> ¦ rakudo: Jonathan said that was not intended and explained
[22:14] <Geth> ¦ rakudo: <…commit message has 7 more lines…>
[22:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a78c9f0dba
[22:14] <Geth> ¦ rakudo: 308d68561d | (Tom Browder)++ (committed using GitHub Web editor) | src/Perl6/Grammar.nqp
[22:15] <Geth> ¦ rakudo: Merge pull request #4567 from tbrowder/fix-heredoc
[22:15] <Geth> ¦ rakudo: 
[22:15] <Geth> ¦ rakudo: Prevent heredocs continuing after a block
[22:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/308d68561d
[22:15] *** linkable6 left
[22:16] *** linkable6 joined
[22:33] *** timo left
