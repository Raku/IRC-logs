[00:02] <japhb> Xliff: Yeah, raydiak had the idea of what I meant.  Sorry I'm in and out -- working on TinyFloats and CBOR::Simple improvements

[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:06] *** kjp left
[00:10] <Xliff> How can I check if a compunit has been loaded?

[00:11] *** kjp joined
[00:22] <ugexe> call .loaded on a cur

[00:23] <Xliff> ugexe: How can I get a CUR by name?

[00:25] <ugexe> m: say CompUnit::RepositoryRegistry.^methods

[00:25] <camelia> rakudo-moar 0de28ae72: OUTPUT: «(repository-for-spec setup-repositories use-repository repository-for-name register-name name-for-repository file-for-spec run-script head resolve-unknown-repos resolve_repossession_conflicts BUILDALL)␤»

[00:26] <Xliff> use ICal::GLib::Raw::Definitions; my $a = try ::("ICal::GLib::Raw::Definitions"); say $a.HOW.^name unless $a ~~ Failure

[00:26] <Xliff> Tells me 'Perl6::Metamodel::PackageHOW'

[00:28] <Xliff> Without the use statement, I get (Any) not failure, so

[00:29] <Xliff> What's the best way to test for Any? I thought "$a =:= Nil" worked.

[00:29] <moon-child> Any ~~ $a?

[00:31] <moon-child> m: my $x := Nil; say Any ~~ $x # hmm, maybe not quite

[00:31] <camelia> rakudo-moar 0de28ae72: OUTPUT: «False␤»

[00:31] <Xliff> Huh! Works for my intended use-case...

[00:33] <moon-child> oh, Nil ~~ Any, so you can use Nil ~~ $a

[00:35] <Xliff> Odd. Why the reversed operands?

[00:36] <moon-child> well, $x ~~ Any is almost invariably true...

[00:38] <moon-child> $x ~~ Nil is true only if $x is actually Nil, but not if it's a type object

[00:38] <moon-child> Also my Any ~~ apparently doesn't work correctly either

[00:38] <moon-child> m: my $x; my Int $y; say Any ~~ $x; say Any ~~ $y #same with Nil ~~

[00:38] <camelia> rakudo-moar 0de28ae72: OUTPUT: «True␤False␤»

[00:39] <ugexe> Int $y does not accept Any

[00:40] <ugexe> i generally try to read $x ~~ $y as "does $y ACCEPT $x"

[00:59] *** Xliff left
[02:00] *** [Coke] left
[02:00] *** [Coke] joined
[02:20] *** timo left
[02:20] *** timo joined
[03:20] *** statisfiable6 left
[03:20] *** committable6 left
[03:20] *** reportable6 left
[03:20] *** linkable6 left
[03:20] *** quotable6 left
[03:20] *** squashable6 left
[03:20] *** sourceable6 left
[03:20] *** greppable6 left
[03:20] *** evalable6 left
[03:20] *** shareable6 left
[03:20] *** releasable6 left
[03:20] *** nativecallable6 left
[03:20] *** notable6 left
[03:20] *** unicodable6 left
[03:20] *** benchable6 left
[03:20] *** tellable6 left
[03:20] *** coverable6 left
[03:20] *** bisectable6 left
[03:20] *** bloatable6 left
[03:21] *** linkable6 joined
[03:21] *** greppable6 joined
[03:21] *** nativecallable6 joined
[03:21] *** unicodable6 joined
[03:22] *** sourceable6 joined
[03:22] *** notable6 joined
[03:22] *** coverable6 joined
[03:22] *** bisectable6 joined
[03:22] *** committable6 joined
[03:22] *** squashable6 joined
[03:23] *** tellable6 joined
[03:23] *** reportable6 joined
[03:23] *** statisfiable6 joined
[03:23] *** quotable6 joined
[03:23] *** shareable6 joined
[03:23] *** benchable6 joined
[03:23] *** releasable6 joined
[03:24] *** bloatable6 joined
[03:24] *** evalable6 joined
[06:03] *** reportable6 left
[06:06] *** reportable6 joined
[06:42] <Geth> ¦ rakudo: niner++ created pull request #4393: Speed up setup of NativeCall subs and reduce memory usage

[06:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4393

[07:45] *** patrickb joined
[07:50] *** patrickb left
[08:23] *** patrickb joined
[09:11] *** Altai-man joined
[09:13] *** Altai-man left
[10:04] *** patrickb left
[10:38] *** patrickb joined
[11:02] *** |Tux| joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:07] *** cognominal left
[12:07] *** cognominal joined
[13:16] *** Xliff joined
[13:39] *** vrurg left
[13:52] *** vrurg joined
[14:44] *** frost left
[15:45] <Geth> ¦ rakudo/rakuast: fff9aad3da | (Jonathan Worthington)++ | 2 files

[15:45] <Geth> ¦ rakudo/rakuast: RakuAST handling of regex adverbs on m//, rx//

[15:45] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/fff9aad3da

[16:09] <lizmat> notable6: weekly

[16:09] <notable6> lizmat, 3 notes: https://gist.github.com/9631289339b5d9742fde20f15279f11d

[16:11] <Geth> ¦ rakudo/rakuast: 69ef021910 | (Jonathan Worthington)++ | 2 files

[16:11] <Geth> ¦ rakudo/rakuast: Compile @$foo style contextualizers to RakuAST

[16:11] <Geth> ¦ rakudo/rakuast: 

[16:11] <Geth> ¦ rakudo/rakuast: They're the same as @($foo) semantically, so no need for another AST

[16:11] <Geth> ¦ rakudo/rakuast: node type.

[16:11] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/69ef021910

[16:12] <lizmat> notable6: weekly reset

[16:12] <notable6> lizmat, Moved existing notes to “weekly_2021-06-07T16:12:19Z”

[16:15] *** evalable6 left
[16:15] *** linkable6 left
[16:16] *** evalable6 joined
[16:18] *** linkable6 joined
[16:24] <Xliff> lizmat: I know you are working on the weekly, but do you know if the RakuAST node for "do" blocks has been created?

[16:24] <Xliff> lizmat: At your leisure.

[16:26] <lizmat> Xliff: looks like there are passing tests for it: https://github.com/rakudo/rakudo/blob/rakuast/t/12-rakuast/statementprefixes.t#L29

[16:26] <lizmat> so I'd say: yes

[16:26] <Xliff> lizmat++ # Thanks!

[16:43] *** samcv_ is now known as samcv

[16:57] <Geth> ¦ rakudo/rakuast: bf8e2a967b | (Jonathan Worthington)++ | src/Raku/ast/code.rakumod

[16:57] <Geth> ¦ rakudo/rakuast: Regex thunks should have their own $/

[16:57] <Geth> ¦ rakudo/rakuast: 

[16:57] <Geth> ¦ rakudo/rakuast: Otherwise we can end up with incorrect modifications of an outer $/ if

[16:57] <Geth> ¦ rakudo/rakuast: there are embedded code blocks.

[16:57] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/bf8e2a967b

[17:17] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/06/07/2021-23-going-funky/

[17:34] <Geth> ¦ rakudo/rakuast: 5e80ee42f4 | (Jonathan Worthington)++ | src/Raku/ast/regex.rakumod

[17:34] <Geth> ¦ rakudo/rakuast: Make /<foo>/ assertions look for lexical rules too

[17:34] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/5e80ee42f4

[17:42] <lizmat> afk for a few hours&

[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:38] *** sena_kun left
[18:41] <[Coke]> to build a raku with rakuast, just checkout the branch and go? Any env vars to set or config options to pass?

[19:04] *** sena_kun joined
[19:14] <raydiak> I just built it the normal way, seems to run all the ast tests just fine

[19:35] <[Coke]> ok

[19:38] <MasterDuke> don't you have to set an env variable at runtime to actually use the new frontend?

[19:39] <MasterDuke> RAKUDO_RAKUAST

[20:18] *** patrickb left
[21:21] *** AlexDaniel joined
[21:46] *** MasterDuke left
[21:47] <Geth> ¦ rakudo/rakuast: ae2ba0a5aa | (Jonathan Worthington)++ | src/Raku/ast/regex.rakumod

[21:47] <Geth> ¦ rakudo/rakuast: Don't try and compile args if there aren't any

[21:47] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/ae2ba0a5aa

[21:47] <Geth> ¦ rakudo/rakuast: 203a83f308 | (Jonathan Worthington)++ | src/Raku/ast/regex.rakumod

[21:47] <Geth> ¦ rakudo/rakuast: Don't leak internal mods out of capture groups

[21:47] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/203a83f308

[21:47] <Geth> ¦ rakudo/rakuast: f7244fc1e0 | (Jonathan Worthington)++ | src/Raku/ast/regex.rakumod

[21:47] <Geth> ¦ rakudo/rakuast: Coalesce sequences of regex literals

[21:47] <Geth> ¦ rakudo/rakuast: 

[21:47] <Geth> ¦ rakudo/rakuast: When we have `/st/`, the compiler frontend currently produces two

[21:47] <Geth> ¦ rakudo/rakuast: RakuAST::Regex::Literal nodes. These were individually compiled also,

[21:47] <Geth> ¦ rakudo/rakuast: which breaks matching against the ligature ﬆ (with the appropriate

[21:47] <Geth> ¦ rakudo/rakuast: options set). Coalesce these as part of the compilation from RakuAST to

[21:47] <Geth> ¦ rakudo/rakuast: QAST, meaning that the same job doesn't have to be done by all those

[21:47] <Geth> ¦ rakudo/rakuast: synthetically constructing RakuAST in order to get correct matching.

[21:47] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/f7244fc1e0

[21:57] *** MasterDuke joined
[22:55] <raydiak> quite possibly. I only ran the tests in 12-rakuast, which build RakuAST nodes explicitly. it could still be using the old frontend and run those tests

[22:58] <raydiak> looks like yes, to enable the new frontend you need RAKUDO_RAKUAST as stated in https://github.com/rakudo/rakudo/blob/rakuast/src/Raku/ast/README.md and at https://github.com/rakudo/rakudo/blob/rakuast/src/main.nqp#L18

[23:00] <raydiak> when running. I don't see any sign that it matters for building

