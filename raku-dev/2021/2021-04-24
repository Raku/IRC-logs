[00:45] *** epony left
[01:03] *** kvw_5_ joined
[01:06] *** kvw_5 left
[01:11] *** epony joined
[01:19] <raydiak> .tell japhb I checked out 0.0.3, those enums did help the clarity for sure. I noticed there's places you do numeric addition instead of bitwise OR. Seems like +| is probably semantically closer to the intentded meaning, though I don't know for sure which performs better on current rakudos

[01:19] <tellable6> raydiak, I'll pass your message to japhb

[01:20] <raydiak> .tell japhb also, I'm not really concerned about it either way, but you said you were open to a persuasive argument about mu/any/nil/undefined/null: https://gist.github.com/raydiak/b8d2eb22b51ae186f686bddfb1a794ba

[01:20] <tellable6> raydiak, I'll pass your message to japhb

[01:21] <japhb> raydiak: I'm here.

[01:21] <tellable6> 2021-04-23T11:04:11Z #raku-dev <raydiak> japhb cool deal! I'll check it out tomorrow, about to hit the hay. spent a sickening amount of time today riding the distro merry-go-round and now it's 4 AM

[01:21] <raydiak> oh, cool. I was about to step outside but I'll be back in a couple minutes

[01:22] <japhb> Yeah, I dunno which is faster.  I tend to use + just because I figure if any ops are going to get optimization, base arithmetic is going to be on that list.

[01:22] <japhb> SGTM

[01:26] <japhb> raydiak: Read the gist.  I think it's a decent argument, but it doesn't feel overwhelmingly so; appealing to our docs or error messages is sometimes a self-reinforcing thing (meaning its hard to tell the difference between "mostly correct" and "absolutely solid", and if it's the former and we treat it as the latter, we can't do better than that).

[01:27] <japhb> Still, I think you've got a good point, especially about Nil, and I'd like to hear some more thoughts.  Anyone else care to comment on raydiak's gist?

[01:27] <japhb> Certainly I will say that supporting Mu is a bit of a pain, since e.g. === doesn't work with Mu arguments.

[01:29] <raydiak> literally if you don't define something, it's Any. Not Mu. That's both spec and implementation. But I'm about out of steam on the front of that point, I personally don't think I'd use those things in places where I'd use CBOR anyway

[01:30] <raydiak> and if I did, I can still write ~~ Any or :U, regardless of whether I'm testing againt Mu or Any

[01:31] <japhb> If we don't support a particular undefined value, we can always substitute.  For example, I could make CBOR undefined === Raku Any, and then have Raku Mu === CBOR "absent" (https://github.com/svaarala/cbor-specs/blob/master/cbor-absent-tag.rst)

[01:32] <raydiak> erm, not ~~ Any

[01:32] <japhb> Hmmm, that's a little appealing actually.

[01:32] <raydiak> absent is exactly what null/Nil is for. didn't know CBOR had an "absent"

[01:34] <japhb> OK, so what are you suggesting for the three concepts (null, undefined, absent)?

[01:35] <raydiak> it felt intuitive to my understanding of these concepts that null would be Nil and undefined would be Any. I didn't know there was an absent, so I hadn't considered it. all the abstractness after researching and writing that is making my brain feel squishy, whatever seems best to you is cool with me :)

[01:35] <japhb> IIUC absent is intended for "this key doesn't exist", as opposed to "this key has an undef value" or "this column hasn't been filled yet"

[01:36] <japhb> To be clear, I very much appreciate you writing that up.  Gives me stuff to think about.

[01:38] <japhb> At the very least, I'm going to keep trying to make the core Mu-safe on encode (meaning a Mu somewhere in a struct won't cause a problem), but it's totally reasonable to never produce Mu on decode.  There is definitely usefulness to only producing non-Any if that's specifically intended, since as you point out it's the default type in most places.

[01:39] <japhb> Also, remember that we can add an extension relatively easily; Raku Mu could be specified as a new tagged undefined -- or even, a bit weirdly perhaps, a tag of a tag.

[01:40] <raydiak> who knew...glad my drinking too much coffee and sprinting headlong down rabbitholes might be somewhat useful! yeah that's a wrinkle for sure, we use :exists for that in Raku

[01:41] <raydiak> that's what I was thinking, Mu and many other things that don't map well to CBOR would be some tag thing

[01:41] <japhb> Yeah, I haven't read all the tag specs yet, so I keep finding interesting bits.

[01:43] <raydiak> the empty thing might be useful to serialize elements in Raku structures that don't :exist

[01:44] <raydiak> or not empty, absent I mean

[01:44] <japhb> The other thing I've done is extend my perf test script with different structures, from a JSON dump of the zef ecosystem to 100x100 matrices of various types, to large raw blobs.  On basically every one, CBOR output is smaller than JSON (even with !pretty on the latter).  Sometimes JSON::Fast is 3-5x faster, sometimes they're within 1.5x of each other, and for some cases (such as blobs) CBOR is so much 

[01:44] <japhb> faster it's hard to accurately measure.  (Orders of magnitude faster for packed arrays.)

[01:45] <japhb> raydiak: hmmm, yes.  To be explicit about the not existing, yeah.

[01:46] <japhb> And of course, a fair number of the test structures don't roundtrip in JSON, but do RT in CBOR.

[01:46] <japhb> Still, I'd be happy if I could get CBOR handling to be strictly faster than JSON for All The Things.

[01:46] <japhb> (It's good to have goals.  ;-)  )

[01:47] <raydiak> I really don't get how CBOR is anything like "binary JSON" like I've read in multiple places. they seem completely different to me

[01:48] <japhb> Yeah, it's really not.  JSON's *data model* is a strict subset of CBOR, but a fair number of formats can claim that.

[01:48] <japhb> *of CBOR's data model

[01:49] <raydiak> well...it's more compact in many cases, so already faster over the wire!

[01:49] <japhb> Given that JSON was pretty much intended to be "Look, we can all agree that every modern language wants these data types, right?  So what if we had a serialization format that was just those?"

[01:49] <japhb> If you have a slow wire, yes.  ;-)

[01:49] <japhb> Gotta run, BBL

[01:50] <raydiak> o/

[02:55] *** epony left
[03:06] *** epony joined
[04:33] <japhb> BAK

[05:48] *** softmoth left
[07:57] <nine> Funny: one of our release blockers (GH#4009 gmake fails on windows) ultimately depends on a MoarVM PR that's marked "After a release" (https://github.com/MoarVM/MoarVM/pull/1472)

[07:57] <nine> sena_kun: ^^^

[07:57] *** linkable6 left
[07:58] *** linkable6 joined
[08:08] *** Geth joined
[09:03] <nwc10> nine: by what route of dependenies?

[09:05] <nwc10> in that I can't see it, and that ticket has been marked as a blocker for some months, yet MoarVM's 1472 only appeared last week. So I'm confused.

[09:06] <nwc10> and the MinGW issue is (I think) actually fixed by a combination of a fix in the relevant PR, and ony] has joined #raku-dev

[09:06] <nwc10> 04:33 < japhb> BAK

[09:06] <nwc10> er.

[09:06] <nwc10> *that* https://github.com/Raku/nqp/pull/716

[09:07] <nwc10> Dear Firefox, X, dammit

[09:07] <nwc10> none of which needs Ryū

[09:43] <nine> nwc10: oh, I misread the discussion in https://github.com/MoarVM/MoarVM/pull/1385

[10:25] <sena_kun> nine, re "After a release" - I think a misconception that one can control people's time with the blocker label is among the worst misconceptions I had while doing all this. :S

[10:26] <sena_kun> releasable6, status

[10:26] <releasable6> sena_kun, Next release will happen when it's ready. 2 blockers. 31 out of 191 commits logged (⚠ 1 warnings)

[10:26] <releasable6> sena_kun, Details: https://gist.github.com/8875cd273b84b5a91833186b406c2e35

[10:44] *** Geth left
[10:44] *** Geth joined
[10:45] <nine> sena_kun: well you for sure can't control anyone's time with labels, but at least I try to give blockers higher priority.

[10:46] <sena_kun> nine, you have my utmost respect for this. :)

[10:55] <sena_kun> releasable6, status

[10:55] <releasable6> sena_kun, Next release will happen when it's ready. 2 blockers. 58 out of 191 commits logged (⚠ 1 warnings)

[10:55] <releasable6> sena_kun, Details: https://gist.github.com/cdaf2efd7323901c62709022117ea010

[10:56] *** Kaiepi left
[10:57] *** Kaiepi joined
[11:35] <sena_kun> releasable6, status

[11:35] <releasable6> sena_kun, Next release will happen when it's ready. 2 blockers. 86 out of 191 commits logged (⚠ 1 warnings)

[11:35] <releasable6> sena_kun, Details: https://gist.github.com/e85f28a3172f295c85dc1b14356dc6f4

[11:52] *** Kaiepi left
[11:53] *** Kaiepi joined
[12:04] *** Kaiepi left
[12:04] *** epony left
[12:21] *** Kaiepi joined
[12:30] *** epony joined
[12:42] <sena_kun> releasable6, status

[12:42] <releasable6> sena_kun, Next release will happen when it's ready. 2 blockers. 92 out of 191 commits logged (⚠ 1 warnings)

[12:42] <releasable6> sena_kun, Details: https://gist.github.com/bd4e227b13676e9ab74d8710082320df

[12:55] *** epony left
[13:03] <nwc10> Also, I thought that https://github.com/Raku/nqp/pull/716 was good, but I'd like someone else to say whether it's daft or not.

[13:08] * lizmat doesn't think it's daft, but also feels out of her league to judge it

[13:08] <lizmat> nwc10: do you feel this should be in the 2021.4 release ?

[13:09] <nwc10> I honestly don't know. It fixes the MinGW problem, and I don't think that it introduces new problems, but the MinGW problem was still a problem a month ago, so the cautious part of me thinks "probably better not to"

[13:09] <nwc10> and also, there are many things where I think "reviewing this is out of my league"

[13:10] *** Kaiepi left
[13:10] *** Kaiepi joined
[13:10] <lizmat> then I propose we merge it after the 2021.4 release, unless sena_kun thinks it is a good idea to merge it now

[13:11] <nwc10> I'm fine with that.

[13:11] <nwc10> Also, I might well be AFK for a few hours. Stuff "needs" doing outside

[13:11] <nwc10> (and it's still daylight)

[13:15] <sena_kun> no merge

[13:19] *** domidumont joined
[13:20] <lizmat> m: dd "zip/zop/foo.bar".IO.basename   # looks like we don't have an easy way to get to "foo" ?

[13:20] <camelia> rakudo-moar ea102883d: OUTPUT: «"foo.bar"␤»

[13:28] <lizmat> guess I'll settle for:

[13:28] <lizmat> m: dd "zip/zop/foo.bar".IO.basename.split(".").head

[13:28] <camelia> rakudo-moar ea102883d: OUTPUT: «"foo"␤»

[13:28] <nine> lizmat: PR 716 seems very un-magical to me. It's closely related to the problem of calculating large exponents. The naive method of just multiplying in a loop from 1..exponent is quite slow and with floating points can be quite unprecise, since you do exponent number of multiplications.

[13:31] <lizmat> well, if I had been RM, I would have merged it, but I'm not RM  :-)

[13:31] <lizmat> and I'm glad sena_kun *is*!

[13:31] <tonyo> rm ?

[13:31] <lizmat> Release Manager

[13:32] <tonyo> ah

[13:32] <nine> For example you could calculate 10^13 by just doing 13 multiplications. Or you re-use intermediary results. E.g. a = 10 * 10, then 10^13 is a * a * a * a * a * a * 10, i.e. 7 multiplications. But then you can set b = a * a and 10^13 becomes b * b * b * 10, i.e. only 5 multiplications

[13:37] *** Kaiepi left
[13:37] *** Kaiepi joined
[13:37] <nine> With the added twist that we only want to use those factors for the multiplications where we know they are precise

[14:10] *** Kaiepi left
[14:11] <sena_kun> releasable6, status

[14:11] <releasable6> sena_kun, Next release will happen when it's ready. 2 blockers. 160 out of 191 commits logged

[14:11] <releasable6> sena_kun, Details: https://gist.github.com/f76840868d78e5d4a1e1d2e17f0b5599

[14:12] *** Kaiepi joined
[14:13] *** Kaiepi left
[14:13] *** Kaiepi joined
[14:41] <sena_kun> releasable6, status

[14:41] <releasable6> sena_kun, Next release will happen when it's ready. 2 blockers. 191 out of 191 commits logged

[14:41] <releasable6> sena_kun, Details: https://gist.github.com/b1c8d199f0d3934546fa16973b15f4b2

[14:41] *** epony joined
[14:42] <sena_kun> please check https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft for grammar, my writing is as awful as usual, feel free to reword

[14:42] * sena_kun goes after MoarVM log

[14:43] *** b2gills left
[14:44] *** b2gills joined
[14:48] * lizmat made one minor change re SetHash.grab

[14:48] <lizmat> afk for a few hours&

[15:07] *** titsuki joined
[15:13] *** epony left
[15:35] *** titsuki left
[15:37] *** titsuki joined
[15:42] <[Tux]> Rakudo v2021.03-191-gea102883d (v6.d) on MoarVM 2021.03-61-gb553aba6f

[15:42] <[Tux]> csv-test-xs-20      0.371 -  0.373

[15:42] <[Tux]> csv-ip5xs           0.829 -  0.833

[15:42] <[Tux]> test-t --race       0.861 -  0.983

[15:42] <[Tux]> test-t              1.966 -  1.989

[15:42] <[Tux]> test                7.620 -  7.873

[15:42] <[Tux]> csv-ip5xs-20        8.239 -  8.549

[15:42] <[Tux]> test-t-20 --race    9.972 - 10.320

[15:42] <[Tux]> csv-parser         26.542 - 27.442

[15:42] <[Tux]> test-t-20          34.018 - 34.059

[15:50] <vrurg> sena_kun: Forgot to post it yesterday. https://github.com/rakudo/rakudo/issues/4339

[15:50] <sena_kun> vrurg, thanks. Phew, the results do not prevent the release.

[15:57] *** epony joined
[16:13] *** domidumont left
[16:18] *** domidumont joined
[16:54] *** bloatable6 joined
[17:23] *** notable6 joined
[17:31] *** Xliff joined
[17:34] <Geth> ¦ roast/6.c-errata: 7c20c1cfb6 | (Elizabeth Mattijsen)++ (committed by Altai-man) | S06-signature/errors.t

[17:34] <Geth> ¦ roast/6.c-errata: unival(42.2) shouldn't fail if (42.2).unival doesn't

[17:34] <Geth> ¦ roast/6.c-errata: 

[17:34] <Geth> ¦ roast/6.c-errata: Built-in sub versions should just pass on to their method counterparts.

[17:34] <Geth> ¦ roast/6.c-errata: 

[17:34] <Geth> ¦ roast/6.c-errata: (42.2).unival returns NaN, unival(42.2) should as well, therefore this

[17:34] <Geth> ¦ roast/6.c-errata: test is incorrect.

[17:34] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/7c20c1cfb6

[17:34] <Geth> ¦ roast/6.c-errata: d51ae9444f | (Elizabeth Mattijsen)++ (committed by Altai-man) | S15-unicode-information/unimatch-general.t

[17:34] <Geth> ¦ roast/6.c-errata: Make unimatch test fail for the right reason

[17:34] <Geth> ¦ roast/6.c-errata: 

[17:34] <Geth> ¦ roast/6.c-errata: unimatch should always be called with at least 2 parameters as a sub,

[17:34] <Geth> ¦ roast/6.c-errata: or one parameter as a method.

[17:34] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/d51ae9444f

[17:35] <Geth> ¦ roast/6.c-errata: 1dd1a2ab6a | (Elizabeth Mattijsen)++ (committed by Altai-man) | S32-temporal/DateTime-Instant-Duration.t

[17:35] <Geth> ¦ roast/6.c-errata: Adjust troublesome Instant / Duration test

[17:35] <Geth> ¦ roast/6.c-errata: 

[17:35] <Geth> ¦ roast/6.c-errata: The test depended on the Instant / Durations actually having a Rat

[17:35] <Geth> ¦ roast/6.c-errata: at their core.  Since this may not be the case, an Instant or a Duration

[17:35] <Geth> ¦ roast/6.c-errata: of 2/7 seconds, will not test correctly in real life, as 2/7 seconds

[17:35] <Geth> ¦ roast/6.c-errata: can not actually be represented on any actual hardware now or in the

[17:35] <Geth> ¦ roast/6.c-errata: future (other than by having Rats implemented in hardware I guess).

[17:35] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/1dd1a2ab6a

[17:44] *** domidumont left
[18:00] *** Kaiepi left
[18:01] *** Kaiepi joined
[18:02] *** Geth left
[18:10] *** epony left
[18:17] *** MasterDuke left
[18:19] *** Kaiepi left
[18:25] *** MasterDuke joined
[18:30] *** Kaiepi joined
[18:34] *** Kaeipi joined
[18:35] *** Kaiepi left
[18:56] *** Kaeipi left
[18:57] *** Kaeipi joined
[19:09] *** ChanServ sets mode: +o lizmat

[19:10] *** lizmat changes topic to: 🦋 Welcome to the IRC channel of the core developers of the Raku Programming Language (https://raku.org).  This channel is logged for the purpose of history keeping about its development | evalbot usage: 'm: say 3;' or /msg camelia m: ... | Logs can be inspected at https://colabti.org/irclogger/irclogger_log/raku-dev | For MoarVM see #moarvm

[19:11] *** ChanServ sets mode: -o lizmat

[19:49] *** Xliff left
[20:17] *** Kaeipi left
[20:38] *** ChanServ sets mode: +o lizmat

[20:40] *** lizmat sets mode: +k LizBot

[20:40] *** lizmat sets mode: -k *

[20:47] *** Kaiepi joined
[21:10] *** epony joined
[21:16] *** maggotbrain left
[21:16] *** nine left
[21:16] *** tyil left
[21:16] *** moon-child left
[21:16] *** commavir left
[21:16] *** |Tux| left
[21:16] *** jjatria left
[21:16] *** notable6 left
[21:16] *** bloatable6 left
[21:16] *** linkable6 left
[21:16] *** nativecallable6 left
[21:16] *** leont left
[21:16] *** committable6 left
[21:16] *** quotable6 left
[21:16] *** statisfiable6 left
[21:16] *** benchable6 left
[21:16] *** releasable6 left
[21:16] *** bisectable6 left
[21:16] *** chansen_ left
[21:16] *** ugexe left
[21:16] *** tbrowder left
[21:16] *** SmokeMachine left
[21:16] *** b2gills left
[21:16] *** dogbert11 left
[21:16] *** LizBot left
[21:16] *** sena_kun left
[21:16] *** raydiak left
[21:16] *** gugod left
[21:16] *** literal left
[21:16] *** MasterDuke left
[21:16] *** greppable6 left
[21:16] *** tellable6 left
[21:16] *** unicodable6 left
[21:16] *** jdv79 left
[21:16] *** bartolin_ left
[21:16] *** rba left
[21:16] *** zostay left
[21:16] *** kawaii left
[21:16] *** djinni` left
[21:16] *** camelia left
[21:16] *** epony left
[21:16] *** finsternis left
[21:16] *** HarmtH left
[21:16] *** kvw_5_ left
[21:16] *** brown121407 left
[21:16] *** rypervenche left
[21:16] *** moritz left
[21:16] *** Kaiepi left
[21:16] *** cog left
[21:16] *** japhb left
[21:16] *** eater left
[21:16] *** tonyo left
[21:16] *** krunen left
[21:16] *** sjn left
[21:16] *** samcv left
[21:16] *** klapperl left
[21:16] *** samebchase- left
[21:16] *** nebuchadnezzar left
[21:16] *** kvw_5_ joined
[21:16] *** brown121407 joined
[21:17] *** notable6 joined
[21:17] *** bloatable6 joined
[21:17] *** b2gills joined
[21:17] *** linkable6 joined
[21:17] *** dogbert11 joined
[21:17] *** LizBot joined
[21:17] *** sena_kun joined
[21:17] *** nativecallable6 joined
[21:17] *** leont joined
[21:17] *** committable6 joined
[21:17] *** quotable6 joined
[21:17] *** statisfiable6 joined
[21:17] *** benchable6 joined
[21:17] *** releasable6 joined
[21:17] *** bisectable6 joined
[21:17] *** chansen_ joined
[21:17] *** |Tux| joined
[21:17] *** maggotbrain joined
[21:17] *** MitarashiDango[m joined
[21:17] *** summerisle joined
[21:17] *** [Tux] joined
[21:17] *** gugod joined
[21:17] *** tyil joined
[21:17] *** nine joined
[21:17] *** commavir joined
[21:17] *** moon-child joined
[21:17] *** jjatria joined
[21:17] *** SmokeMachine joined
[21:17] *** tbrowder joined
[21:17] *** ugexe joined
[21:17] *** raydiak joined
[21:17] *** literal joined
[21:17] *** MasterDuke joined
[21:18] *** patrickbkr[m] joined
[21:18] *** rypervenche joined
[21:18] *** moritz joined
[21:18] *** samebchase- joined
[21:18] *** nebuchadnezzar joined
[21:18] *** AlexDaniel` joined
[21:18] *** uzl[m] joined
[21:18] *** samcv joined
[21:18] *** klapperl joined
[21:19] *** Kaiepi joined
[21:19] *** cog joined
[21:19] *** japhb joined
[21:19] *** eater joined
[21:19] *** tonyo joined
[21:19] *** krunen joined
[21:19] *** sjn joined
[21:19] *** greppable6 joined
[21:19] *** tellable6 joined
[21:19] *** uzl[m] left
[21:19] *** MitarashiDango[m left
[21:20] *** unicodable6 joined
[21:20] *** jdv79 joined
[21:20] *** bartolin_ joined
[21:20] *** AlexDaniel` left
[21:20] *** rba joined
[21:20] *** zostay joined
[21:20] *** kawaii joined
[21:20] *** djinni` joined
[21:20] *** camelia joined
[21:20] *** kawaii left
[21:22] *** finsternis joined
[21:22] *** HarmtH joined
[21:22] *** gfldex joined
[21:22] *** finstern1s joined
[21:22] *** finsternis left
[21:22] *** patrickbkr[m] left
[21:23] *** kawaii joined
[21:48] *** patrickbkr[m] joined
[21:48] *** dogbert11 left
[21:49] *** dogbert11 joined
[21:58] *** AlexDaniel` joined
[21:58] *** MitarashiDango[m joined
[21:58] *** uzl[m] joined
[22:28] *** dogbert17 joined
[22:32] *** finstern1s is now known as finsternis

[22:33] *** dogbert11 left
[22:39] *** epony joined
[22:52] *** dogbert11 joined
[22:52] *** dogbert12 joined
[22:55] *** dogbert17 left
[22:56] *** dogbert11 left
[23:01] *** dogbert17 joined
[23:02] *** dogbert12 left
[23:15] *** dogbert11 joined
[23:19] *** dogbert17 left
