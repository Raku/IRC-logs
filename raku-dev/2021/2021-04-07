[00:39] *** dogbert17 left
[00:59] *** dogbert17 joined
[01:09] *** frost-lab joined
[01:22] *** kvw_5 joined
[01:25] *** kvw_5_ left
[02:38] *** notable6 left
[02:38] *** releasable6 left
[02:38] *** statisfiable6 left
[02:38] *** sourceable6 left
[02:38] *** committable6 left
[02:38] *** greppable6 left
[02:38] *** nativecallable6 left
[02:38] *** coverable6 left
[02:38] *** quotable6 left
[02:38] *** bloatable6 left
[02:38] *** tellable6 left
[02:38] *** squashable6 left
[02:38] *** unicodable6 left
[02:38] *** bisectable6 left
[02:38] *** shareable6 left
[02:38] *** benchable6 left
[02:38] *** evalable6 left
[02:38] *** linkable6 left
[02:38] *** bisectable6 joined
[02:39] *** bloatable6 joined
[02:39] *** shareable6 joined
[02:39] *** committable6 joined
[02:39] *** releasable6 joined
[02:39] *** sourceable6 joined
[02:39] *** quotable6 joined
[02:39] *** unicodable6 joined
[02:39] *** statisfiable6 joined
[02:39] *** tellable6 joined
[02:40] *** notable6 joined
[02:40] *** benchable6 joined
[02:40] *** greppable6 joined
[02:40] *** nativecallable6 joined
[02:40] *** squashable6 joined
[02:40] *** coverable6 joined
[02:40] *** evalable6 joined
[02:41] *** linkable6 joined
[03:41] *** bloatable6 left
[03:41] *** shareable6 left
[03:41] *** greppable6 left
[03:41] *** tellable6 left
[03:41] *** nativecallable6 left
[03:41] *** coverable6 left
[03:41] *** committable6 left
[03:41] *** bisectable6 left
[03:41] *** benchable6 left
[03:41] *** unicodable6 left
[03:41] *** notable6 left
[03:41] *** squashable6 left
[03:41] *** releasable6 left
[03:41] *** evalable6 left
[03:41] *** quotable6 left
[03:41] *** statisfiable6 left
[03:41] *** linkable6 left
[03:41] *** sourceable6 left
[03:42] *** releasable6 joined
[03:42] *** sourceable6 joined
[03:43] *** nativecallable6 joined
[03:43] *** greppable6 joined
[03:43] *** benchable6 joined
[03:43] *** evalable6 joined
[03:43] *** tellable6 joined
[03:43] *** statisfiable6 joined
[03:43] *** bisectable6 joined
[03:43] *** notable6 joined
[03:43] *** linkable6 joined
[03:43] *** committable6 joined
[03:43] *** squashable6 joined
[03:44] *** bloatable6 joined
[03:44] *** unicodable6 joined
[03:44] *** quotable6 joined
[03:44] *** coverable6 joined
[03:44] *** shareable6 joined
[05:12] *** Kaiepi left
[06:31] *** domidumont joined
[06:58] *** Kaiepi joined
[07:43] *** [Tux] left
[07:52] *** [Tux] joined
[07:58] *** sena_kun joined
[08:43] *** [Tux] left
[08:44] *** b2gills left
[08:46] *** [Tux] joined
[08:48] *** b2gills joined
[08:51] *** patrickbkr[m] left
[09:09] *** patrickbkr[m] joined
[10:06] <Geth> ¦ rakudo: 97b2b3f073 | (Elizabeth Mattijsen)++ | src/core.c/unicodey.pm6

[10:06] <Geth> ¦ rakudo: Make uniprops a proper multi and about 4x as fast

[10:06] <Geth> ¦ rakudo: 

[10:06] <Geth> ¦ rakudo: - abstract the code/propname -> prop/pref logic

[10:06] <Geth> ¦ rakudo: - create a proper iterator for generating values

[10:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/97b2b3f073

[10:34] <lizmat> m: dd unimatch(-1,"Latin")   # whee  !

[10:34] <camelia> rakudo-moar 726a75e24: OUTPUT: «Internal Error: MVM_codepoint_to_row_index call requested a synthetic codepoint that does not exist.␤Requested synthetic 1 when only 6 have been created.␤  in block <unit> at <tmp> line 1␤␤»

[11:14] <Geth> ¦ roast: 2b556e0aac | (Elizabeth Mattijsen)++ | S15-unicode-information/unimatch-general.t

[11:14] <Geth> ¦ roast: Make unimatch test fail for the right reason

[11:14] <Geth> ¦ roast: 

[11:14] <Geth> ¦ roast: unimatch should always be called with at least 2 parameters as a sub,

[11:14] <Geth> ¦ roast: or one parameter as a method.

[11:14] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2b556e0aac

[11:25] <Geth> ¦ rakudo: e1c2d792a7 | (Elizabeth Mattijsen)++ | src/core.c/unicodey.pm6

[11:25] <Geth> ¦ rakudo: Make unimatch a proper multi

[11:25] <Geth> ¦ rakudo: 

[11:25] <Geth> ¦ rakudo: No functional changes: just make it pass on whatever it gets, and

[11:25] <Geth> ¦ rakudo: locate the backend specific bits at one place.

[11:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e1c2d792a7

[11:25] <Geth> ¦ rakudo: 84eac183ae | (Elizabeth Mattijsen)++ | src/core.c/unicodey.pm6

[11:25] <Geth> ¦ rakudo: Forgot to remove an obsolere sub uniprops candidate

[11:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/84eac183ae

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: 0f79bd89f6 | (Elizabeth Mattijsen)++ | 11 files

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: Remove uniprop-(int|str|bool)

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: 

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: They appear to have been added at some point, but they are not tested

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: nor are they documented, nor are they needed in the setting nor any

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: core modules.

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: 

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: Their functionality seems to intended as a performance shortcut for the

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: more general "uniprop" and "uniprops" functions.  My argument would be

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: that *if* one knows about these, one might as well use the underlying

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: nqp::ops as these appear to be a very thin HLL wrapper for them.

[11:47] <Geth> ¦ rakudo/no-uniprop-foo: review: https://github.com/rakudo/rakudo/commit/0f79bd89f6

[11:47] <Geth> ¦ rakudo: lizmat++ created pull request #4308: Remove uniprop-(int|str|bool)

[11:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4308

[11:47] *** MasterDuke left
[11:50] * lizmat wonders whether an .UP coercion in Raku would allow for an .IO like abstraction of the Unicode database

[11:50] <lizmat> which, looking at this more and more, is more like a hash of hash of hashes

[11:51] <lizmat> and maybe Raku should provide such an interface for it

[12:40] <Geth> ¦ rakudo: e6823863bb | (Elizabeth Mattijsen)++ | src/core.c/unicodey.pm6

[12:40] <Geth> ¦ rakudo: Make uniparse a proper multi

[12:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e6823863bb

[12:48] <Geth> ¦ rakudo: 2562d57461 | (Patrick Böker)++ | 3 files

[12:48] <Geth> ¦ rakudo: .p6 -> .raku in compiled release README

[12:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2562d57461

[12:48] <Geth> ¦ rakudo: 2c7acb74c4 | (Patrick Böker)++ (committed using GitHub Web editor) | 3 files

[12:48] <Geth> ¦ rakudo: Merge pull request #4307 from patrickbkr/p6-to-raku-bin-release

[12:48] <Geth> ¦ rakudo: 

[12:48] <Geth> ¦ rakudo: .p6 -> .raku in compiled release README

[12:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2c7acb74c4

[13:02] *** frost-lab left
[13:05] <lizmat> I think this concludes my unicodey work for now

[13:05] <lizmat> I hope I didn't break too much on non-MoarVM backends

[14:02] <Geth> ¦ rakudo: da34b40abc | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[14:02] <Geth> ¦ rakudo: Make Str.substr(-rw) handle subclasses of Str properly

[14:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/da34b40abc

[14:02] <Geth> ¦ rakudo: f4bfeea66b | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[14:02] <Geth> ¦ rakudo: Make Str.chop|chomp handle subclasses of Str properly

[14:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f4bfeea66b

[14:09] *** b2gills left
[14:30] *** b2gills joined
[14:35] <dogbert17> lizmat: there might possibly be a problem with the module Test::Async

[15:08] *** domidumont left
[15:12] *** domidumont joined
[15:21] *** leont left
[15:24] *** leont joined
[15:34] *** MasterDuke joined
[16:36] <nine> MasterDuke: got a fix for you!

[17:07] <lizmat> dogbert17: in what context?  what commit ?

[17:08] <nine> lizmat: ah, see #moarvm. I thought I was there

[17:10] *** domidumont left
[17:10] <nine> lizmat: oh, sorry. Turns out I'm even more confused than I thought. Didn't see that you were talking to dogbert17

[17:17] *** vrurg left
[17:17] *** MasterDuke left
[17:18] *** vrurg joined
[17:18] *** vrurg left
[18:03] *** patrickb joined
[18:18] <Geth> ¦ rakudo: 813d4f1aa9 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[18:18] <Geth> ¦ rakudo: Make Str.pred|succ handle subclasses of Str properly

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/813d4f1aa9

[18:29] <dogbert17> lizmat: yeah, I forgot the important part and went for a walk :)

[18:30] <dogbert17> one of the modules tests fails with the cryptic message 'not ok 3 - The type Num can do the method 'NFKD''

[18:31] <dogbert17> This test was supposed to fail but didn't and since it mentioned NFKD I thought it might have to do with some recent change

[18:33] <dogbert17> Let me check a bit more ...

[18:34] <lizmat> ++dogbert17

[18:38] *** MasterDuke joined
[18:40] <dogbert17> m: say Num.^can("NFKD")

[18:40] <camelia> rakudo-moar 726a75e24: OUTPUT: «()␤»

[18:41] <dogbert17> lizmat: ^^

[18:41] <lizmat> yeah, it's become a Cool method

[18:42] <dogbert17> Bug or should the test in the module be changed?

[18:42] <lizmat> $ r 'dd 42e1.NFKD'

[18:42] <lizmat> Uni.new(0x0034, 0x0032, 0x0030).NFKD

[18:42] <lizmat> it's now a proper Cool method, so any Cool class (like Num, but more importantly Match) now just work

[18:43] <dogbert17> If vrurg shows up we can tell him

[18:43] <lizmat> so I guess the test in the module is incorrectly assuming it shouldn't work ?

[18:44] <dogbert17> That would seem to be the case yes

[18:44] <dogbert17>     test-flunks;

[18:44] <dogbert17>     can-ok Num, "NFKD";

[18:45] <dogbert17> anyway, your change is pretty Cool :)

[18:50] <lizmat> :-)

[19:02] *** vrurg joined
[19:10] <sena_kun>  

[19:11] <sena_kun> releasable6, status

[19:11] <releasable6> sena_kun, Next release in ≈9 days and ≈23 hours. 2 blockers. Changelog for this release was not started yet

[19:11] <releasable6> sena_kun, Details: https://gist.github.com/2724a4aacfa8a4991687ea5ffdedfaba

[19:11] <sena_kun> what, 9 days

[19:11] <sena_kun> that's scary

[19:29] *** rypervenche joined
[19:31] *** vrurg left
[20:03] *** patrickb left
[20:04] <ugexe> its only scary for all the bugs that got fixed and the release manager

[20:10] <sena_kun> fair enough

[20:11] <sena_kun> we still have a regression blocker to beat though

[20:12] <nine> sena_kun: but the regression can be fixed by a simple revert, can it not?

[20:13] <sena_kun> nine, alas we released it last release, so I would be really glad to see it getting a proper fix.

[20:13] <sena_kun> it is not the first time something like this happens, but still I feel like reverting an introduced feature is the last resort.

[20:15] <MasterDuke> vrurg: i think i fixed at least one of the changes due to the nqp::time PR  that caused module breakage. could you do another blin run?

[20:15] <tellable6> MasterDuke, I'll pass your message to vrurg

[20:16] *** vrurg joined
[20:21] <dogbert17> vrurg: did you see the discussion I had with lizmat above about a failing test in raku-Test-Async?

[20:21] <dogbert17> it's in a file called t/110-can-ok.t

[20:21] <vrurg> dogbert17: No, but I know the problem and it is already fxied.

[20:21] <tellable6> 2021-04-07T20:15:35Z #raku-dev <MasterDuke> vrurg: i think i fixed at least one of the changes due to the nqp::time PR  that caused module breakage. could you do another blin run?

[20:22] <dogbert17> you're faster than lightning :) vrurg++

[20:23] <vrurg> dogbert17: pure coincidence. I wanted to try new module tests with Test::Async and needed to install it first.

[20:24] <vrurg> .tell MasterDuke Not sure if will be able to run blin today. But will try to remember.

[20:24] <tellable6> vrurg, I'll pass your message to MasterDuke

[20:24] <MasterDuke> thanks

[20:25] <vrurg> dogbert17: anyway, it'll take me a little time to finalize new Test::Async version and I'm going to publish it ASAP on zef ecosystem.

[20:25] * vrurg is afk for a couple of hours.

[20:25] *** vrurg left
[20:26] <[Coke]> fez?

[20:26] <[Coke]> (is zef the original ecosystem?)

[20:31] <ugexe> zef is the tool for downloading. fez is the tool for authoring. the service they both use can probably be called either fez or zef ecosystem

[20:47] *** vrurg joined
[20:47] *** MasterDuke left
[20:47] *** MasterDuke joined
[20:51] *** vrurg left
[20:52] *** vrurg joined
[20:57] *** vrurg left
[21:31] <MasterDuke> nqp: multi sub a() { say("hi") }; a

[21:31] <camelia> nqp-moarvm: OUTPUT: «Cannot find method 'reverse' on object of type NQPArray␤   at gen/moar/stage2/NQP.nqp:207  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/nqp.moarvm:get_legacy_block_list)␤ from gen/moar/stage2/NQP.nqp:3092  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/nqp.moa…»

[21:34] <MasterDuke> comes from here https://github.com/Raku/nqp/blame/master/src/NQP/World.nqp#L59 via https://github.com/Raku/nqp/blame/master/src/NQP/Actions.nqp#L903

[21:37] <MasterDuke> .ask jnthn any idea if https://github.com/Raku/nqp/blame/master/src/NQP/World.nqp#L56 happened? the code below dies with `Cannot find method 'reverse' on object of type NQPArray` if you run `multi sub a() { say("hi") };` in nqp

[21:37] <tellable6> MasterDuke, I'll pass your message to jnthn

[21:56] <Geth> ¦ nqp: MasterDuke17++ created pull request #711: Finish getting rid of NQPCursor

[21:56] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/711

[23:23] *** sxmx left
[23:43] *** sxmx joined
