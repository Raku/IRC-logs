[00:02] *** sena_kun left
[00:32] *** squashable6 left
[00:34] *** squashable6 joined
[00:34] *** leont left
[00:46] *** lizmat left
[01:51] *** kalkin-- joined
[01:55] *** kalkin- left
[03:24] *** sourceable6 left
[03:24] *** notable6 left
[03:24] *** reportable6 left
[03:24] *** nativecallable6 left
[03:24] *** bisectable6 left
[03:24] *** squashable6 left
[03:24] *** quotable6 left
[03:24] *** greppable6 left
[03:24] *** statisfiable6 left
[03:24] *** benchable6 left
[03:24] *** releasable6 left
[03:24] *** bloatable6 left
[03:24] *** unicodable6 left
[03:24] *** committable6 left
[03:24] *** shareable6 left
[03:24] *** coverable6 left
[03:24] *** releasable6 joined
[03:24] *** statisfiable6 joined
[03:25] *** shareable6 joined
[03:25] *** sourceable6 joined
[03:25] *** committable6 joined
[03:25] *** squashable6 joined
[03:25] *** reportable6 joined
[03:25] *** unicodable6 joined
[03:25] *** nativecallable6 joined
[03:26] *** greppable6 joined
[03:26] *** benchable6 joined
[03:26] *** coverable6 joined
[03:27] *** notable6 joined
[03:27] *** quotable6 joined
[03:27] *** bloatable6 joined
[03:27] *** bisectable6 joined
[04:27] *** sourceable6 left
[04:27] *** quotable6 left
[04:27] *** shareable6 left
[04:27] *** statisfiable6 left
[04:27] *** bisectable6 left
[04:27] *** benchable6 left
[04:27] *** nativecallable6 left
[04:27] *** unicodable6 left
[04:27] *** reportable6 left
[04:27] *** squashable6 left
[04:27] *** coverable6 left
[04:27] *** notable6 left
[04:27] *** greppable6 left
[04:27] *** releasable6 left
[04:27] *** committable6 left
[04:27] *** bloatable6 left
[04:28] *** notable6 joined
[04:28] *** quotable6 joined
[04:28] *** nativecallable6 joined
[04:28] *** benchable6 joined
[04:29] *** reportable6 joined
[04:29] *** bisectable6 joined
[04:29] *** statisfiable6 joined
[04:29] *** shareable6 joined
[04:29] *** committable6 joined
[04:29] *** bloatable6 joined
[04:29] *** coverable6 joined
[04:30] *** squashable6 joined
[04:30] *** unicodable6 joined
[04:30] *** greppable6 joined
[04:30] *** releasable6 joined
[04:30] *** sourceable6 joined
[05:49] *** statisfiable6 left
[05:49] *** coverable6 left
[05:49] *** benchable6 left
[05:49] *** quotable6 left
[05:49] *** reportable6 left
[05:49] *** releasable6 left
[05:49] *** notable6 left
[05:49] *** bisectable6 left
[05:49] *** tellable6 left
[05:49] *** sourceable6 left
[05:49] *** bloatable6 left
[05:49] *** squashable6 left
[05:49] *** unicodable6 left
[05:49] *** committable6 left
[05:49] *** evalable6 left
[05:49] *** greppable6 left
[05:49] *** nativecallable6 left
[05:49] *** shareable6 left
[05:49] *** benchable6 joined
[05:49] *** unicodable6 joined
[05:49] *** bisectable6 joined
[05:50] *** coverable6 joined
[05:50] *** bloatable6 joined
[05:50] *** committable6 joined
[05:50] *** tellable6 joined
[05:50] *** quotable6 joined
[05:51] *** squashable6 joined
[05:51] *** reportable6 joined
[05:51] *** nativecallable6 joined
[05:51] *** statisfiable6 joined
[05:51] *** notable6 joined
[05:51] *** shareable6 joined
[05:51] *** evalable6 joined
[05:51] *** releasable6 joined
[05:51] *** greppable6 joined
[05:52] *** sourceable6 joined
[08:03] *** kalkin-- left
[08:16] *** kalkin-- joined
[08:24] *** kalkin-- left
[09:43] *** sena_kun joined
[09:49] *** kalkin-- joined
[10:15] *** kalkin-- left
[11:22] *** sena_kun left
[11:37] *** sena_kun joined
[12:07] *** pheix joined
[12:09] <sena_kun> what's the tool for bumping?

[12:09] <sena_kun> and what's the policy for bumping?

[12:12] *** pheix_ joined
[12:12] *** pheix_ left
[12:32] <nine> .bothelp

[12:32] <nine> .help

[12:32] <nine> .bots

[12:33] <nine> releasable6: help

[12:33] <releasable6> nine, status | status link # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Releasable

[12:34] <nine> sena_kun: I've only ever bumped manually. Policy seems to be "whenever it seems to make sense to you"

[12:35] <sena_kun> nine: I see, thanks, the messages look as generated ones... there is nothing wrong with bumping to latest moar to get some fixes? I see a mention of a new bug, but if it has a workaround, I'd like to go for it.

[12:36] <nine> sena_kun: do you have any idea on when the MoarVM release will be made? If it's within the next day, I'd like to commit my workaround first.

[12:37] *** AlexDaniel joined
[12:37] *** AlexDaniel left
[12:37] *** AlexDaniel joined
[12:37] <sena_kun> nine: my plan for today is either 1)get fresh fixes, count this revision as "we'll do a release from that" and then check stuff for regressions; 1)get old (six days old) version we have blin results for already and make a release out of it.

[12:38] *** lizmat joined
[12:38] <AlexDaniel> sena_kun: this is the only tool: https://github.com/perl6/z

[12:38] <sena_kun> I'd go for a first one, so yes, I can wait for a workaround

[12:39] <sena_kun> AlexDaniel, I see, thanks

[12:39] <nine> sena_kun: ok, then I'll definitely commit the workaround :)

[12:39] <sena_kun> nine: +1

[13:01] <Geth_> ¦ nqp: ac4b11d438 | (Stefan Seifert)++ | tools/templates/MOAR_REVISION

[13:01] <Geth_> ¦ nqp: Bump MoarVM for NativeCall fixes

[13:01] <Geth_> ¦ nqp: review: https://github.com/perl6/nqp/commit/ac4b11d438

[13:01] <Geth_> ¦ rakudo: 6bc64c7132 | (Stefan Seifert)++ | tools/templates/NQP_REVISION

[13:01] <Geth_> ¦ rakudo: Bump NQP for NativeCall fixes

[13:01] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6bc64c7132

[13:01] <nine> sena_kun: ^^^

[13:02] * lizmat pulls, builds and spectests

[13:08] *** pheix left
[13:11] *** pheix joined
[13:21] <lizmat> all clear

[13:23] *** sena_kun left
[13:37] <Geth_> ¦ rakudo: b6afa71277 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[13:37] <Geth_> ¦ rakudo: Add is-lazy named to `gather` iterator

[13:37] <Geth_> ¦ rakudo: 

[13:37] <Geth_> ¦ rakudo: So that the underlying iterator *can* be told to act as a lazy iterator.

[13:37] <Geth_> ¦ rakudo: Now all we need is a syntax to mark a `gather` block as lazy.  This in

[13:37] <Geth_> ¦ rakudo: response to #3380

[13:37] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b6afa71277

[13:38] *** sena_kun joined
[13:59] *** Xliff joined
[13:59] <lizmat> m: role A { method a() { 666 } }; class B does A { has $.a = 42 }; dd B.new.a

[13:59] <camelia> rakudo-moar 672c5d403: OUTPUT: «666␤»

[13:59] <Xliff> Merry Christmas, #raku!

[13:59] <lizmat> that feels wrong to me

[13:59] <lizmat> Xliff o/

[13:59] <lizmat> Merry Xmas is not what feels wrong to me  :-)

[13:59] <Xliff> lizmat: Yeah, there should be some warning there, but that's really a case of a badly named override.

[14:00] <lizmat> I think it's a wrongly handled override

[14:00] <Xliff> More like a badly named method that's causing an unintended override?

[14:00] <lizmat> m: role A { method a() { 666 } }; class B does A { has $.a = 42; method a() { $!a } }; dd B.new.a

[14:00] <camelia> rakudo-moar 672c5d403: OUTPUT: «42␤»

[14:01] <lizmat> if I declare an attribute to be public, it should override anything that the role provided

[14:01] <Xliff> And I would expect that last one to at least throw a warning!

[14:01] <lizmat> I think the check for creating the accessor is faultry

[14:01] <lizmat> *faulty

[14:02] <Xliff> And I would say you have a very good point!

[14:02] <Xliff> lizmat: So what brings you to IRC on this fine day?

[14:02] <lizmat> a love/hate relationship with this particular date ?

[14:02] <Xliff> Ah.

[14:03] <lizmat> mostly hate

[14:03] <Xliff> EEp.

[14:03] <lizmat> it's why I celebrate my birthday on 21st of June  :-)

[14:04] <Xliff> Hopefully you and yours will have a nice get-together for dinner, at least.

[14:04] <lizmat> had that yesterday  :-)

[14:04] <Xliff> Oh, good.

[14:04] <lizmat> still stuffed  :-)

[14:04] <Xliff> Heheh

[14:04] <Xliff> Something tells me I will be back into the guts of Method::Also, today.

[14:05] <lizmat> did you see my update?

[14:06] <Xliff> Guess not. When did that happen?

[14:06] <lizmat> on Monday, to fix a release blocker

[14:07] <Xliff> Looking

[14:08] <Xliff> Hah! I missed that!

[14:08] <Xliff> lizmat: What was the blocker?

[14:09] <lizmat> that Method::Also did not install  :-)

[14:09] <Xliff> Odd. I hadn't beeen having problems with the old code.

[14:09] <Xliff> Maybe exposed via newer rakudo?

[14:09] <lizmat> yeah, I think it's related to vrurg's role work

[14:10] <Xliff> Ah! OK.

[14:10] <Xliff> Was hoping I could leverage that into a better solution. Now role-based aliases are not showing up in my code.

[14:12] <lizmat> well, I guess you need to figure that out with vrurg  :-)

[14:12] <Xliff> lizmat: Yeah.. this bug is mine... https://github.com/lizmat/Method-Also/commit/1cd031a9c9d8992494f0cd0d277b34e725a12fa1#diff-c06a4ab846b40c65a192b755b15c09b0R57

[14:13] <lizmat> ok, well looking forward to your fix then  :-)

[14:13] <Xliff> Hahahahaha!

[14:13] <Xliff> Me too!

[14:14] <Geth_> ¦ rakudo: 07072f3803 | (Elizabeth Mattijsen)++ | 2 files

[14:14] <Geth_> ¦ rakudo: Introduce :is-lazy named for gather { } blocks

[14:14] <Geth_> ¦ rakudo: 

[14:14] <Geth_> ¦ rakudo: After this commit, you can indicate that your `gather` block is to

[14:14] <Geth_> ¦ rakudo: be treated as a lazy one:

[14:14] <Geth_> ¦ rakudo: 

[14:14] <Geth_> ¦ rakudo:     gather {

[14:14] <Geth_> ¦ rakudo:         ...

[14:14] <Geth_> ¦ rakudo:     } :is-lazy;

[14:14] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/07072f3803

[14:18] <Xliff> lizmat: Well, the big problem preventing that fix is the fact that this code never executes and I can't figure out why: https://github.com/lizmat/Method-Also/blob/master/lib/Method/Also.pm6#L27

[14:19] <Xliff> I since moved it to incorporate_multi_methods and it's still not working.

[14:19] <Xliff> So... I guess next step is easy.

[14:22] <Geth_> ¦ rakudo: 8e3b0a7144 | (Elizabeth Mattijsen)++ | 2 files

[14:22] <Geth_> ¦ rakudo: Revert "Introduce :is-lazy named for gather { } blocks"

[14:22] <Geth_> ¦ rakudo: 

[14:22] <Geth_> ¦ rakudo: This reverts commit 07072f380327db9b118cab4a2babc33ba73c683c.

[14:22] <Geth_> ¦ rakudo: 

[14:22] <Geth_> ¦ rakudo: We actually have syntax for lazy gather blocks: it's called:

[14:22] <Geth_> ¦ rakudo: 

[14:22] <Geth_> ¦ rakudo:     lazy gather {

[14:22] <Geth_> ¦ rakudo:         ...

[14:22] <Geth_> ¦ rakudo:     }

[14:22] <Geth_> ¦ rakudo: 

[14:22] <Geth_> ¦ rakudo: jnthn++

[14:22] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8e3b0a7144

[14:39] *** kalkin joined
[15:22] *** sena_kun left
[15:36] *** pheix left
[15:37] *** sena_kun joined
[17:22] *** sena_kun left
[17:38] *** sena_kun joined
[18:27] <Geth_> ¦ rakudo: 55d0143e2b | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[18:27] <Geth_> ¦ rakudo: Revert "Add is-lazy named to `gather` iterator"

[18:27] <Geth_> ¦ rakudo: 

[18:27] <Geth_> ¦ rakudo: This reverts commit b6afa71277c6f0405a1fb31976fb8aa70310b5a3.

[18:27] <Geth_> ¦ rakudo: 

[18:27] <Geth_> ¦ rakudo: This is not going to be used, so remove it.

[18:27] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/55d0143e2b

[18:51] <Geth_> ¦ rakudo: 971174f4d8 | (Elizabeth Mattijsen)++ | src/core.c/Iterable.pm6

[18:51] <Geth_> ¦ rakudo: Make `lazy gather` up to 15% faster

[18:51] <Geth_> ¦ rakudo: 

[18:51] <Geth_> ¦ rakudo: By using nqp::ifnull to see whether there has been an iterator created

[18:51] <Geth_> ¦ rakudo: already.  The benchmark is for:

[18:51] <Geth_> ¦ rakudo: 

[18:51] <Geth_> ¦ rakudo:     lazy gather { .take for ^500000 }

[18:51] <Geth_> ¦ rakudo: 

[18:51] <Geth_> ¦ rakudo: so very light on what is actually been gathered.  So your actual mileage

[18:51] <Geth_> ¦ rakudo: will vary.

[18:51] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/971174f4d8

[19:10] <Geth_> ¦ rakudo: e8a9e07fd2 | (Elizabeth Mattijsen)++ | 2 files

[19:10] <Geth_> ¦ rakudo: Move the Lazy iterator class to Rakudo::Iterator

[19:10] <Geth_> ¦ rakudo: 

[19:10] <Geth_> ¦ rakudo: To make it more in line with other iterators that live there.  And

[19:10] <Geth_> ¦ rakudo: more generally available, should that be needed.  And add some comments.

[19:10] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e8a9e07fd2

[19:13] <lizmat> .ask jnthn what was the reason for implementing "lazy" as an Iterable method called by codegen magic, rather than as a sub ?

[19:13] <tellable6> lizmat, I'll pass your message to jnthn

[19:17] <lizmat> .ask jnthn I guess the same goes for "hyper" and "race"

[19:17] <tellable6> lizmat, I'll pass your message to jnthn

[19:23] *** sena_kun left
[19:37] *** sena_kun joined
[19:42] <Geth_> ¦ rakudo: 17d8116069 | (Elizabeth Mattijsen)++ | src/core.c/Iterable.pm6

[19:42] <Geth_> ¦ rakudo: Don't need to create a Seq object when recursing in flat

[19:42] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/17d8116069

[20:03] <Geth_> ¦ rakudo: d5a34f19f5 | (Elizabeth Mattijsen)++ | 2 files

[20:03] <Geth_> ¦ rakudo: Move the Flat iterator class to Rakudo::Iterator

[20:03] <Geth_> ¦ rakudo: 

[20:03] <Geth_> ¦ rakudo: To make it more in line with other iterators that live there.  And

[20:03] <Geth_> ¦ rakudo: more generally available, should that be needed.  And add some comments.

[20:03] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d5a34f19f5

[20:56] *** pheix joined
[21:23] *** sena_kun left
[21:27] *** |Tux| left
[21:35] *** |Tux| joined
[21:37] *** sena_kun joined
[21:59] <AlexDaniel> sena_kun: fwiw this is the repo for working on alwaysfails: https://github.com/perl6/ecosystem-unbitrot

[21:59] <AlexDaniel> sena_kun: the issue tracker can be updated by using the data.json file and a script somewhere

[22:00] <AlexDaniel> sena_kun: I can do it but only if we don't have too many erroneous alwaysfails…

[22:11] *** pheix left
[22:23] *** Hotbees left
[22:24] *** Hotbees joined
[23:22] *** sena_kun left
[23:38] *** sena_kun joined
