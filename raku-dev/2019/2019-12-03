[00:36] *** sena_kun left
[01:46] *** Kaiepi left
[01:48] *** Kaiepi joined
[04:17] *** Xliff left
[05:52] *** TreyHarris left
[06:03] *** sena_kun joined
[06:39] *** sena_kun left
[07:48] *** pochi_ joined
[07:51] *** pochi left
[09:39] <lizmat> Files=1290, Tests=109646, 207 wallclock secs (28.09 usr  8.28 sys + 2925.77 cusr 258.99 csys = 3221.13 CPU)

[09:40] *** TreyHarris joined
[09:42] *** discord6 left
[09:42] *** timotimo left
[09:56] *** timotimo joined
[11:00] <|Tux|> Rakudo version 2019.11-87-g672c5d403 - MoarVM version 2019.07.1-402-g34813e181

[11:00] <|Tux|> csv-test-xs-20      0.425 -  0.451

[11:00] <|Tux|> test-t --race       0.805 -  0.883

[11:00] <|Tux|> csv-ip5xs           0.727 -  0.879

[11:00] <|Tux|> test-t              1.764 -  1.822

[11:00] <|Tux|> test                5.754 -  6.175

[11:00] <|Tux|> csv-ip5xs-20        6.383 -  6.413

[11:00] <|Tux|> test-t-20 --race    9.496 -  9.634

[11:00] <|Tux|> csv-parser         21.078 - 21.263

[11:00] <|Tux|> test-t-20          29.108 - 29.710

[11:47] *** Guest38485 joined
[12:09] *** lucasb joined
[12:09] *** sena_kun joined
[13:02] *** sena_kun left
[13:12] <Geth> ¦ rakudo: 74c8017cd1 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[13:12] <Geth> ¦ rakudo: Re-imagine Str.parse-base from scratch

[13:12] <Geth> ¦ rakudo: 

[13:12] <Geth> ¦ rakudo: - create shortcut for integers

[13:12] <Geth> ¦ rakudo: - don't parse what you don't need to parse

[13:12] <Geth> ¦ rakudo: - use nqp:: ops directly

[13:12] <Geth> ¦ rakudo: - make it between 3x (with decimal point) and 5x (without) as fast

[13:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/74c8017cd1

[13:13] <Geth> ¦ rakudo: MasterDuke17++ created pull request #3338: Use Visual Studio 2017 in AppVeyor

[13:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3338

[13:13] * lizmat waits for AppVeyor results   MasterDuke++

[13:16] *** sena_kun joined
[13:38] <MasterDuke> wow it's slow. but looking good so far...

[13:39] <Geth> ¦ rakudo: 7ecc5bfd92 | (Daniel Green)++ | appveyor.yml

[13:39] <Geth> ¦ rakudo: Use Visual Studio 2017 in AppVeyor

[13:39] <Geth> ¦ rakudo: 

[13:39] <Geth> ¦ rakudo: It was switched for MoarMV in

[13:39] <Geth> ¦ rakudo: https://github.com/MoarVM/MoarVM/commit/3d2f8d739f99e0af3fbba4a83c1bf3e8bc167cd5

[13:39] <Geth> ¦ rakudo: and

[13:39] <Geth> ¦ rakudo: https://github.com/MoarVM/MoarVM/commit/bed44f1d51195e5e50a1d1a87b8f5101b39b987e.

[13:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7ecc5bfd92

[13:39] <Geth> ¦ rakudo: 7ce4947211 | MasterDuke17++ (committed using GitHub Web editor) | appveyor.yml

[13:39] <Geth> ¦ rakudo: Use Visual Studio 2017 in AppVeyor (#3338)

[13:39] <Geth> ¦ rakudo: 

[13:40] <Geth> ¦ rakudo: Use Visual Studio 2017 in AppVeyor

[13:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7ce4947211

[14:04] <Geth> ¦ rakudo: 3ce924539a | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[14:04] <Geth> ¦ rakudo: Make Str.parse-base again 1.5x as fast

[14:04] <Geth> ¦ rakudo: 

[14:04] <Geth> ¦ rakudo: By bypassing postcircumfix:<[ ]>.  Apparently a native list is returned by

[14:04] <Geth> ¦ rakudo: nqp::radix_I, so we don't need to do any HLL access.

[14:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3ce924539a

[14:04] <lizmat> so that brings it to 4.5x to 7.5x as fast for today

[14:11] <MasterDuke> nice

[14:14] *** MasterDuke left
[14:17] *** MasterDuke joined
[14:18] <nine> Nice to see those "x times faster" commits again :)

[14:22] <MasterDuke> yes indeed. now if we can somehow get those for grammars/regexes...

[14:22] <[Coke]> lizmat++

[15:02] *** sena_kun left
[15:14] <Geth> ¦ rakudo: b42957cc9f | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[15:14] <Geth> ¦ rakudo: Make Str.Int a few percent faster

[15:14] <Geth> ¦ rakudo: 

[15:14] <Geth> ¦ rakudo: - use self instead of $!value, this appears most of the gain, not sure why

[15:14] <Geth> ¦ rakudo: - rewrite using ternaries instead of nqp::if

[15:14] <Geth> ¦ rakudo:   - they codegen the same now, so go for readability

[15:14] <Geth> ¦ rakudo: - on the slow path, also check for Int, so no unnecessary coercion attempt

[15:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b42957cc9f

[15:17] *** sena_kun joined
[15:26] <lizmat> nqp::radix lists flag values: https://github.com/perl6/nqp/blob/master/docs/ops.markdown#radix

[15:26] <lizmat> any reason why these are not nqp::const values ?

[15:26] <lizmat> and where should I add these ?

[15:27] <lizmat> (assuming we want constants for them)

[15:55] *** jmerelo joined
[16:01] *** |Tux| left
[16:20] <jmerelo> Did you check out today's tmtvl amazing article on the Advent Calendar on stack frame reduction? https://rakuadventcalendar.wordpress.com/2019/12/03/day-3-stack-frame-reduction/

[16:20] <jmerelo> Great stuff about functional programming

[16:20] <jmerelo> Read and/or spread

[16:49] *** robertle joined
[17:02] *** sena_kun left
[17:17] *** sena_kun joined
[17:36] <AlexDaniel> lizmat++ # weekly and speedups!

[17:41] <AlexDaniel> squashable6: status

[17:41] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 2 days and ≈10 hours (2019-12-07 UTC-12⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:57] <Geth> ¦ rakudo: 37474a7a24 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[17:57] <Geth> ¦ rakudo: Re-imagine Str.Numeric

[17:57] <Geth> ¦ rakudo: 

[17:57] <Geth> ¦ rakudo: - use nqp ops were possible

[17:57] <Geth> ¦ rakudo: - check for empty string first

[17:57] <Geth> ¦ rakudo: - makes all numerification a few percent faster except:

[17:57] <Geth> ¦ rakudo: - makes numerification of the empty string about 13x faster

[17:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/37474a7a24

[18:16] *** tellable6 left
[18:18] *** tellable6 joined
[18:33] *** travis-ci joined
[18:33] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make Str.Int a few percent faster

[18:33] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/620170051 https://github.com/rakudo/rakudo/compare/3ce924539ac0...b42957cc9f2e

[18:33] *** travis-ci left
[18:50] *** Kaiepi left
[18:50] *** Kaiepi joined
[18:51] *** Kaiepi left
[19:03] *** sena_kun left
[19:04] <lizmat> restarted the one failing job

[19:18] *** sena_kun joined
[19:18] * lizmat wonders why there is no proto for val() in the setting

[19:36] <lizmat> ===SORRY!===

[19:36] <lizmat> Failed to parse the zef config file '/Users/liz/Github/rakudo.moar/install/share/perl6/site/resources'

[19:37] <lizmat> is what I get when following the directions for installing Inline::Perl5 for spectest

[19:37] <lizmat> Kaiepi ^^

[19:38] <Geth> ¦ rakudo: 2652d9c59b | (Elizabeth Mattijsen)++ | src/core.c/allomorphs.pm6

[19:38] <Geth> ¦ rakudo: Sanitize val()'s special cases a bit

[19:38] <Geth> ¦ rakudo: 

[19:38] <Geth> ¦ rakudo: - let dispatch handle the difference between List and Slip

[19:38] <Geth> ¦ rakudo: - show any Mu value, specifically IterationEnd (which may help in debugging)

[19:38] <Geth> ¦ rakudo: - simplify reporting on other single values

[19:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2652d9c59b

[19:39] *** jmerelo left
[19:46] *** MasterDuke left
[19:55] *** squashable6 left
[19:57] *** squashable6 joined
[20:02] *** squashable6 left
[20:02] *** MasterDuke joined
[20:04] *** squashable6 joined
[20:28] *** lucasb left
[21:02] *** sena_kun left
[21:17] *** sena_kun joined
[21:46] <Geth> ¦ rakudo: 6c85e69101 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[21:46] <Geth> ¦ rakudo: Abstract partse-base Failure into a method

[21:46] <Geth> ¦ rakudo: 

[21:46] <Geth> ¦ rakudo: - making size of other methods smaller, so more likely to inline

[21:46] <Geth> ¦ rakudo: - add some comments

[21:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6c85e69101

[21:57] *** Kaiepi joined
[22:00] <Kaiepi> hey guys, so you know that pattern you sometimes see in rakudo where a class has a parameterize metamethod that mixes in a paremetric role that just adds a method returning its parameter?

[22:01] <Kaiepi> m: class Named { method ^parameterize(Named:U ::T, Str:D $name) { T.^add_method: 'name', anon method name(T: --> Str:D) { $name }; T } }; class Foo is Named['foo'] { }; say Foo.name

[22:01] <camelia> rakudo-moar 672c5d403: OUTPUT: «foo␤»

[22:01] <Kaiepi> yeah, you don't need to mixin the role for that

[22:02] <Kaiepi> at least, i don't think it's needed

[22:02] <Kaiepi> nvm, just tested doing that with two classes doing that and it doesn't work

[22:07] <Kaiepi> still, i wonder if there are ways to avoid needing to make a mixin for each parameterization of a parametric class

[22:20] <lizmat> m: my %h = a => slip(1,2,3); .say for %h<a>   # I wonder if this is intended behaviour, or an artefact, jnthn?

[22:20] <camelia> rakudo-moar 672c5d403: OUTPUT: «1␤2␤3␤»

[22:21] <lizmat> afk&

[22:34] <vrurg> Does anybody knows if it's possible to connect comma to an external debug session?

[22:35] <sena_kun> vrurg: it is not.

[22:35] <vrurg> :(

[22:35] <sena_kun> vrurg: we surely should wishlist it when the time for debugger fixes comes

[22:36] <sena_kun> though I am aware of some more "interesting" issues than this feature missing. :(

[22:36] <vrurg> Perhaps there is a plugin for emulating a terminal in debug session?

[22:36] * sena_kun is confused

[22:36] <vrurg> pardon... an ANSI terminal

[22:36] <sena_kun> you mean REPL of debugger as timotimo++ module does or?

[22:37] <vrurg> No, vt* emulation. ANSI, vt100, etc.

[22:37] <sena_kun> no idea then, sorry

[22:38] <vrurg> I'm writing a simplistic text-UI framework. 

[22:39] <vrurg> Exactly the case where debug prints are not really useful and I hoped for some debugger support. :)

[22:42] <sena_kun> yeah, that's the case... maybe something more sophisticated than prints, e.g. https://modules.raku.org/dist/LogP6:cpan:ATROXAPER may help?

[22:42] *** lucasb joined
[22:55] <vrurg> Maybe... It's a bit overcomplicated for a simple task though. 

[23:02] *** sena_kun left
[23:03] *** sena_kun joined
[23:03] *** sena_kun left
[23:24] *** Xliff joined
[23:24] <Xliff> .

[23:27] <Xliff> m: .say for DateTime.new('2019-12-12T12:00:00Z') ... DateTime.new('2019-12-12T15:00:00Z')

[23:27] <camelia> rakudo-moar 672c5d403: OUTPUT: «2019-12-12T12:00:00Z␤No such method 'succ' for invocant of type 'DateTime'. Did you mean any of these?␤    sum␤    utc␤␤  in block <unit> at <tmp> line 1␤␤»

[23:27] <Xliff> m: .say for DateTime.new('2019-12-12T12:00:00Z') ... DateTime.new('2019-12-12T12:00:00Z')

[23:28] <camelia> rakudo-moar 672c5d403: OUTPUT: «(timeout)2019-12-12T12:00:00Z␤2019-12-12T12:00:00Z␤2019-12-12T12:00:00Z␤2019-12-12T12:00:00Z␤2019-12-12T12:00:00Z␤2019-12-12T12:00:00Z␤2019-12-12T12:00:00Z␤2019-12-12T12:00:00Z␤2019-12-12T12:00:00Z␤2019-12-12T12:00:00Z␤2019-12-12T1…»

[23:38] <Xliff> AlexDaniel: I've been saying I'd write the damned thing if someone would give me specs.

[23:38] <Xliff> I'm sick of ppl asking "What web framework" when the tools are there to develop one.

[23:38] <Xliff> Funny... no one seems to want to take me up on it. :p

[23:39] <AlexDaniel> Xliff: just take a web framework for other language and do the same but in raku style?

[23:39] <Xliff> Um. No.

[23:39] <AlexDaniel> so you want someone to do it from scratch, or what?

[23:40] <Xliff> First and foremost, you really can't do that. Unconsciously, when you port, you do something using the original languages paradigm.

[23:40] <Xliff> Kinda like confirmation bias.

[23:40] <AlexDaniel> no but it gives you a list of objectives for sure

[23:40] <Xliff> With a spec, you adjust what you do based on the language you have chosen.

[23:40] <Xliff> Um. No.

[23:41] <Xliff> Again. I don't want to port.

[23:41] <AlexDaniel> I'm not telling you to port, I'm saying there are existing projects that get the job done, and you can see what they do/can do

[23:41] <Xliff> Do you know how horrible things would be if I tried to write specs from WordPress code?

[23:41] <Xliff> And I'm telling you that I don't want to go through that process.

[23:41] <Xliff> I shouldn't have to.

[23:42] <Xliff> If you know what a "decent web framework" does, you can write it down and pass it to someone to create.

[23:42] <Xliff> I just don't have the bandwidth to do everything. Much of it is consumed with other projects (which you can guess... :p)

[23:43] <Xliff> .oO( GIMP bindings... yum! )

[23:44] <AlexDaniel> weekly: Xliff++ wants to create a Raku web framework. Help from others is needed to create an initial list of objectives/spec. https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-12-03#l177

[23:44] <notable6> AlexDaniel, Noted! (weekly)

[23:51] <Xliff> Oh. You. BASTARD! ;p

