[00:01] *** patrickz joined
[00:05] *** patrickb left
[00:22] <japhb> vrurg: I concur that there are some basic playground modules that people almost certainly want, such as JSON::Fast, OO::Monitors, Linenoise, debugger/tracer modules, etc.  I expect that eventually there will be better replacements for each, but until that happens, they're pretty basic needs.

[00:23] <vrurg> japhb: The exact set of modules to be called "basic" could be discussible. I don't expect it to be permanent forever. 

[00:24] <vrurg> Just what is considered to be good at some point in time.

[00:24] <japhb> AlexDaniel: val() is (by design) able to handle a very wide range of different number formats.  I could twist your brain with some of the things I was testing when I did the first version of Str.Numeric (which val() was based on).

[00:24] <japhb> vrurg: Yeah, with some history so that people who are dabbling don't have to worry their basic scripts will suddenly stop working without much notice.

[00:24] <AlexDaniel> vrurg: does it?

[00:25] <Geth> ¬¶ rakudo: c24bec1feb | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/NQP_REVISION

[00:25] <Geth> ¬¶ rakudo: [NQP Bump] Brings 7 commits

[00:25] <Geth> ¬¶ rakudo: 

[00:25] <Geth> ¬¶ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2019.11-17-gbe4b3c055...2019.11-24-gc85c2adbf

[00:25] <Geth> ¬¶ rakudo: c85c2adbf Merge pull request #590 from vrurg/nqp_589

[00:25] <Geth> ¬¶ rakudo: fd6920f50 Make NQP::Configure::NQP take care of jars

[00:25] <Geth> ¬¶ rakudo: 15efae732 [jvm] Pass jars as an argument

[00:25] <Geth> ¬¶ rakudo: 29215797e [js] Implement '‚àí' (U+2212) minus support in nqp::radix(_I)

[00:25] <Geth> ¬¶ rakudo: df9f7c16e Merge pull request #588 from patrickbkr/sub-mod-upd-no-silent-error

[00:25] <Geth> ¬¶ rakudo: f994d5ea6 Prevent silently swallowing errors on submodule update

[00:25] <Geth> ¬¶ rakudo: 1b5834027 [js] Bump serialization format version

[00:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/c24bec1feb

[00:26] <vrurg> AlexDaniel: This is Rakudo version 2019.11-258-g6c1528263 built on MoarVM version 2019.07.1-403-g9442b1a7c

[00:27] <AlexDaniel> hmmmm

[00:27] <vrurg> AlexDaniel: did you bump MOAR?

[00:27] <pmurias> vrurg: re change that should fix that problem

[00:27] <tellable6> 2019-12-12T21:12:06Z #raku-dev <vrurg> pmurias Could you pls try and see if https://github.com/perl6/nqp/pull/591 fixes nqp-runtime.jar problem?

[00:27] <AlexDaniel> did I both the release or something‚Ä¶

[00:27] <AlexDaniel> botch

[00:28] <vrurg> AlexDaniel: MOAR_REVISION: 2019.07.1-403-g9442b1a7c

[00:28] <pmurias> vrurg: I have been manually applying a similiar fix on nqp-j to make working on nqp-j not super horrible

[00:28] <AlexDaniel> ok I didn't: https://github.com/perl6/nqp/blob/3e05931f3b7ecbc46794bced4b443240ad6aecd5/tools/templates/MOAR_REVISION

[00:28] <vrurg> AlexDaniel: seemingly, the release needs minors as it comes with 2019.07 moar

[00:28] <AlexDaniel> that's a good start

[00:28] <vrurg> Hm...

[00:29] <vrurg> pmurias: Shall I merge it?

[00:30] <vrurg> AlexDaniel: I suspect the moar bump in release did not merge back to the master.

[00:31] <AlexDaniel> vrurg: that's actually correct, I think

[00:31] <AlexDaniel> because 2019.07* describe string was actually ahead of the release

[00:32] <AlexDaniel> (even though it is based off 2019.07)

[00:32] <AlexDaniel> so when I merged back I left it intact

[00:32] <AlexDaniel> but it is surprising that there were several bumps after that

[00:32] <AlexDaniel> and all of them are of 2019.07‚Ä¶

[00:32] <AlexDaniel> wait a minute‚Ä¶

[00:34] *** ZzZombo_ joined
[00:36] *** Kaiepi left
[00:36] *** ZzZombo left
[00:36] *** AlexDaniel left
[00:37] *** ZzZombo_ is now known as ZzZombo

[00:37] *** AlexDaniel joined
[00:37] *** AlexDaniel left
[00:37] *** AlexDaniel joined
[00:37] *** pmurias left
[00:39] <AlexDaniel> yeah, I see now

[00:39] <AlexDaniel> we have a dangling tag in moarvm

[00:41] <AlexDaniel> ookay

[00:41] <Geth> ¬¶ nqp: 01e1e62773 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/MOAR_REVISION

[00:41] <Geth> ¬¶ nqp: [MoarVM Bump] Brings 3 commits

[00:41] <Geth> ¬¶ nqp: 

[00:41] <Geth> ¬¶ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2019.07.1-403-g9442b1a7c...2019.11-90-g0bcdda3f2

[00:41] <Geth> ¬¶ nqp: 0bcdda3f2 Merge tag '2019.11'

[00:41] <Geth> ¬¶ nqp: 3a212c9ab Update VERSION for release

[00:41] <Geth> ¬¶ nqp: 019fd77ea Remove extra newlines in ChangeLog

[00:41] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/01e1e62773

[00:42] <Geth> ¬¶ rakudo: 5c00496a70 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/NQP_REVISION

[00:42] <Geth> ¬¶ rakudo: [NQP Bump] 01e1e6277 [MoarVM Bump] Brings 3 co [‚Ä¶]

[00:42] <Geth> ¬¶ rakudo: 

[00:42] <Geth> ¬¶ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2019.11-24-gc85c2adbf...2019.11-25-g01e1e6277

[00:42] <AlexDaniel> I'll write a short explanation on #moarvm

[00:42] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/5c00496a70

[00:43] <AlexDaniel> vrurg: thanks!

[00:44] *** Kaiepi joined
[00:44] *** Kaiepi left
[00:45] *** Kaiepi joined
[00:45] <AlexDaniel> sena_kun: interesting release situation: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-12-13#l21

[00:45] <vrurg> welcome! :)

[00:45] <tellable6> AlexDaniel, I'll pass your message to sena_kun

[00:46] <AlexDaniel> sena_kun: this can never happen on nqp/rakudo side because the sakefile makes sure it can push everything and then it pushes

[00:46] <tellable6> AlexDaniel, I'll pass your message to sena_kun

[00:47] <AlexDaniel> sena_kun: so it's not a big problem, just something to keep in mind maybe

[00:47] <tellable6> AlexDaniel, I'll pass your message to sena_kun

[00:59] *** patrickb joined
[01:03] *** patrickz left
[01:27] *** lucasb left
[01:58] *** patrickb left
[02:32] *** Kaiepi left
[02:32] *** Kaiepi joined
[02:46] *** ZzZombo_ joined
[02:47] *** ZzZombo left
[02:47] *** ZzZombo_ is now known as ZzZombo

[04:31] *** reportable6 left
[04:31] *** bisectable6 left
[04:31] *** releasable6 left
[04:31] *** statisfiable6 left
[04:31] *** quotable6 left
[04:31] *** notable6 left
[04:31] *** nativecallable6 left
[04:31] *** bloatable6 left
[04:31] *** shareable6 left
[04:31] *** committable6 left
[04:31] *** sourceable6 left
[04:31] *** coverable6 left
[04:31] *** greppable6 left
[04:31] *** benchable6 left
[04:31] *** unicodable6 left
[04:31] *** squashable6 left
[04:31] *** releasable6 joined
[04:31] *** shareable6 joined
[04:31] *** notable6 joined
[04:31] *** nativecallable6 joined
[04:31] *** bisectable6 joined
[04:31] *** greppable6 joined
[04:31] *** quotable6 joined
[04:32] *** unicodable6 joined
[04:32] *** committable6 joined
[04:32] *** coverable6 joined
[04:32] *** sourceable6 joined
[04:33] *** bloatable6 joined
[04:33] *** squashable6 joined
[04:33] *** benchable6 joined
[04:33] *** reportable6 joined
[04:33] *** statisfiable6 joined
[08:44] *** sena_kun joined
[08:54] *** sena_kun left
[09:10] *** sena_kun joined
[09:15] *** robertle joined
[09:21] *** sena_kun left
[09:25] *** ufobat_ joined
[09:28] *** ufobat left
[09:58] *** robertle left
[10:00] *** robertle joined
[10:11] *** robertle left
[10:13] *** robertle joined
[11:13] *** patrickb joined
[12:00] <lizmat> m: m: dd <4/5*2**9>, 4/5*2**9   # is this to be expected ?   Or is val processing getting it wrong ?

[12:00] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´RatStr.new(0.0015625, "4/5*2**9")‚ê§409.6‚ê§¬ª

[12:01] <lizmat> m: dd 4/(5*2**9)

[12:01] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´0.0015625‚ê§¬ª

[12:01] *** robertle left
[12:02] <jnthn> I'm a bit surprised val attempts such a complex expression at all...

[12:02] <lizmat> fwiw, in my refactor, that would be 409.6, as it would be in an ordinary expression

[12:02] <lizmat> it's in the spec, and it does

[12:02] <jnthn> OK

[12:02] <lizmat> are you saying that it shouldn't?  It would make things a *lot* simpler  :-)

[12:03] <jnthn> Then I'd assume the spec would want ordinary precedence rules to be followed.

[12:03] <lizmat> indeed... ok...

[12:03] <lizmat> it will  :-)

[12:03] <jnthn> Well, not sure without looking into the history of it, but I'm a bit surprised

[12:03] <jnthn> I thought val was meant to handle, well, values.

[12:03] <jnthn> e.g. things that full beneath <value>

[12:04] <lizmat> I guess we agree on that, it's just the definition of what constitutes a value, I guess

[12:04] <jnthn> I guess I can see the use of it

[12:04] <lizmat> m: BEGIN @*ARGS = "2*10**3"; sub MAIN(Int:D $a) { dd $a }   # YIL I learned that this actually works

[12:04] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´IntStr.new(2000, "2*10**3")‚ê§¬ª

[12:05] <lizmat> would be one reason it is nice to have  :-)

[12:05] <AlexDaniel> not really?

[12:05] <AlexDaniel> allowing some math but not other

[12:06] *** robertle joined
[12:08] <nine> 2*10**3 looks like some poor man's scientific notation

[12:09] <AlexDaniel> m: BEGIN @*ARGS = "-1/-2*-10**+10"; sub MAIN(Rat:D $a) { dd $a }

[12:09] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´RatStr.new(0.00000000005, "-1/-2*-10**+10")‚ê§¬ª

[12:10] <AlexDaniel> m: BEGIN @*ARGS = "-2*-10**+3-2*-10**+3i"; sub MAIN(Complex:D $a) { dd $a }

[12:10] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´ComplexStr.new(<2000+2000i>, "-2*-10**+3-2*-10**+3i")‚ê§¬ª

[12:11] <AlexDaniel> that last one I'm not too worried about because honestly how often have you seen complex numbers in real code :)

[12:12] <jnthn> Yeah, I figured it's there as a way to put an exponent on it

[12:17] <AlexDaniel> m: dd val("-1/-2*-10**+10")

[12:17] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´RatStr.new(0.00000000005, "-1/-2*-10**+10")‚ê§¬ª

[12:17] <AlexDaniel> m: dd -1/-2*-10**+10

[12:17] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´-5000000000.0‚ê§¬ª

[12:17] <AlexDaniel> jnthn: what's the use for it?

[12:18] <AlexDaniel> because I don't really see it

[12:28] *** lucasb joined
[12:52] *** sena_kun joined
[12:56] *** robertle left
[13:00] *** robertle joined
[13:14] *** pmurias joined
[13:53] <pmurias> vrurg: line that causes the error: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/C3MRO.nqp#L77

[13:53] <pmurias> vrurg: when $_ is nqp::null on the JVM .HOW throws an exception

[14:05] <pmurias> vrurg: and $_ is nqp::null in that case when building on the JVM

[14:11] <|Tux|> Rakudo version 2019.11-260-g5c00496a7 - MoarVM version 2019.11-90-g0bcdda3f2

[14:11] <|Tux|> csv-test-xs-20      0.420 -  0.430

[14:11] <|Tux|> csv-ip5xs           0.708 -  0.711

[14:11] <|Tux|> test-t --race       0.789 -  0.796

[14:11] <|Tux|> test-t              1.720 -  1.736

[14:11] <|Tux|> csv-ip5xs-20        6.330 -  6.467

[14:11] <|Tux|> test                7.156 -  7.441

[14:11] <|Tux|> test-t-20 --race    9.348 -  9.393

[14:11] <|Tux|> csv-parser         22.667 - 22.995

[14:11] <|Tux|> test-t-20          29.858 - 30.406

[14:21] <vrurg> pmurias: thanks! I'll workaround it. Though the problem with nulls in JVM is better be fixed at some point. :(

[14:21] *** Kaiepi left
[14:21] *** Kaiepi joined
[14:23] *** TreyHarris left
[14:24] *** Kaiepi left
[14:25] *** Kaiepi joined
[14:27] *** pmurias left
[14:27] *** pmurias joined
[14:32] <pmurias> vrurg: is a nqp::null expected to be there?

[14:33] <vrurg> pmurias: actually, no. Two lone bugs meet each other and annihilated... Copy-paste brought in $_ instead of correct $c.

[14:35] * vrurg is rebuilding jvm to see if it's fixed now.

[14:36] *** TreyHarris joined
[14:37] <vrurg> pmurias: does it make sense to merge https://github.com/perl6/nqp/pull/591?

[14:40] *** patrickb left
[14:42] <Geth> ¬¶ nqp: 9e582e24dc | (Vadim Belman)++ | 2 files

[14:42] <Geth> ¬¶ nqp: An attempt to fix nqp-runtime.jar dependency

[14:42] <Geth> ¬¶ nqp: 

[14:42] <Geth> ¬¶ nqp: Don't send it into gen/jvm but only use the `base_dir` to keep a single

[14:42] <Geth> ¬¶ nqp: copy of it. Still, not the best solution but we keep all the jars there

[14:42] <Geth> ¬¶ nqp: anyway for now.

[14:42] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/9e582e24dc

[14:42] <Geth> ¬¶ nqp: c073b0ce08 | (Pawe≈Ç Murias)++ (committed using GitHub Web editor) | 2 files

[14:42] <Geth> ¬¶ nqp: Merge pull request #591 from vrurg/nqp_589_runtime-fix

[14:42] <Geth> ¬¶ nqp: 

[14:42] <Geth> ¬¶ nqp: An attempt to fix nqp-runtime.jar dependency

[14:42] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/c073b0ce08

[14:42] <vrurg> Ok, serves as an answer. :D

[14:43] <pmurias> vrurg: yes, that's how stuff was before the changes, likely not the best spot to generate the .jar in but that can be fixed later

[14:44] <vrurg> And rakudo-jvm builds again. pmurias++ for spotting the bug location!

[14:46] <pmurias> vrurg: re fixing nqp::null, the way the JVM handles those is not good, but I strongely belive that the truffle one is the future not the old bytecode one so I don't want to spend a lot of time doing large changes to the old JVM backend

[14:47] <vrurg> pmurias: makes sense. After all, most of the nullish problems are easily workaroundable.

[14:48] <Geth> ¬¶ rakudo: vrurg++ created pull request #3350: Fix a copy/paste bug

[14:48] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3350

[14:54] *** sena_kun left
[15:07] *** sena_kun joined
[15:28] *** robertle left
[15:35] <pmurias> vrurg: on the old jvm backend they are stored as jvm null

[15:45] <Geth> ¬¶ rakudo: ee66a6b1c5 | (Vadim Belman)++ | src/Perl6/Metamodel/C3MRO.nqp

[15:45] <Geth> ¬¶ rakudo: Fix a copy/paste bug

[15:45] <Geth> ¬¶ rakudo: 

[15:45] <Geth> ¬¶ rakudo: $_ instead of correct $c

[15:45] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/ee66a6b1c5

[15:45] <Geth> ¬¶ rakudo: 0f49ba1918 | (Vadim Belman)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/C3MRO.nqp

[15:45] <Geth> ¬¶ rakudo: Merge pull request #3350 from vrurg/problem-solving-103-jvm-null-fix

[15:45] <Geth> ¬¶ rakudo: 

[15:45] <Geth> ¬¶ rakudo: Fix a copy/paste bug

[15:45] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/0f49ba1918

[15:51] *** ExtraCrispy left
[15:54] *** unclechu left
[16:11] *** pmurias left
[16:40] *** ExtraCrispy joined
[16:41] *** ExtraCrispy left
[16:41] *** ExtraCrispy joined
[16:43] *** ExtraCrispy left
[16:43] *** ExtraCrispy joined
[16:44] *** ExtraCrispy left
[16:44] *** ExtraCrispy joined
[16:46] *** ExtraCrispy left
[16:46] *** ExtraCrispy joined
[16:47] *** ExtraCrispy left
[16:53] *** ufobat_ left
[16:55] *** sena_kun left
[16:56] *** ExtraCrispy joined
[17:08] *** sena_kun joined
[17:44] *** AlexDani` joined
[17:46] *** AlexDaniel left
[18:02] *** ExtraCrispy left
[18:41] *** ExtraCrispy joined
[18:44] *** ExtraCrispy left
[18:51] <tobs> vrurg++ # closing my open issues!

[18:54] *** sena_kun left
[19:03] <vrurg> tobs: welcome :)

[19:09] *** sena_kun joined
[19:28] *** TreyHarris left
[19:35] <lizmat> m: dd :1(123)    # are base-1 numbers a thing ?  :-)

[19:35] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´This call only converts base-1 strings to numbers; value 123 is of type Int, so cannot be converted!‚ê§(If you really wanted to convert 123 to a base-1 string, use 123.base(1) instead.)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:48] *** TreyHarris joined
[20:18] <lizmat> m: dd :2<10*10**10>, 2*2**2   # the first feels wrong to me, as they

[20:18] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´20000000000‚ê§8‚ê§¬ª

[20:19] <lizmat> parsed the multiplier and the exponent in base 10, rather than base  2?

[20:20] <lizmat> ah, the specs are explicit about that: multiplier and exponent are always in base 10

[20:32] <Geth> ¬¶ rakudo: vrurg++ created pull request #3351: Don't use client core rev to determine class language version

[20:32] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3351

[20:54] *** sena_kun left
[21:08] *** sena_kun joined
[21:49] <lizmat> wow, a bare start of raku calls val() 24x

[21:50] <lizmat> looking at the strings it's been given, I wonder why val() is called at all

[21:50] <lizmat> I can't imagine path names ever making sense for val() processing

[21:52] <lizmat> hmm... seems to be a side-effect of using <>

[21:53] <lizmat> m: my %h; dd %h<a>   # even in this case, "a" is pulled through val()

[21:53] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´Any %h{'a'} = Any‚ê§¬ª

[21:57] *** pmurias joined
[22:12] <lizmat> so can we have something in an environment variable that does not start with a digit or a period ?

[22:12] <lizmat> that would create a valid allomorph ?

[22:13] <dogbert17> lizmat: accessing hash elements is very slow, any opts there would be more than welcome :-)

[22:13] <lizmat> dogbert17: I think I've done what I could there already  :-(

[22:14] <lizmat> FOO=.123 raku -e 'dd %*ENV<FOO>'   # RatStr element = RatStr.new(0.123, ".123")

[22:14] <dogbert17> argh, I get the impression that it can be orders of magnitude slower than P5

[22:14] <lizmat> well, when you consider that Raku hashes are basically like tied hashes in Perl, I think Raku is doing pretty well

[22:15] <dogbert17> is there a way to 'avoid' that using some clever syntax?

[22:17] <lizmat> use nqp

[22:19] <lizmat> m: FOO= raku -e 'dd %*ENV<FOO>'   # TIL why empty env variable wind up as 0 in numeric context

[22:19] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3FOO= raku -e7‚èè5 'dd %*ENV<FOO>'   # TIL why empty env v‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        state‚Ä¶¬ª

[22:19] <lizmat> FOO= raku -e 'dd %*ENV<FOO>'   # TIL why empty env variable wind up as 0 in numeric context

[22:19] <lizmat> IntStr element = IntStr.new(0, "")

[22:19] *** pmurias left
[22:21] <lizmat> looks like my 29 ENV entries are responsible for about 14 msecs for each raku startup

[22:21] <lizmat> afk for a bit&

[22:34] <japhb> lizmat: Woah -- that's around 10-15% of startup on my machines.  Is that true for all hash lookups via <key>, only for lookups in dynamic hashes, or only lookups in %*ENV?

[22:35] <japhb> Depending on the answer to that, there's a metric ton of optimization I can go and do in some of my modules ....

[22:35] <japhb> (Tempted to go and test it now, excpet I've got $dayjob tasks to complete.  :-/)

[22:36] *** pmurias joined
[22:43] * japhb realizes (again) how important it is to test assumptions -- I always assumed hash lookup by compile-time short string constant would be about as fast a hash lookup as you could get.

[22:54] *** sena_kun left
[23:10] *** sena_kun joined
[23:11] *** pmurias left
[23:11] *** pmurias joined
[23:15] <lizmat> it can't be compile time, because hash lookups are methods and late bound

[23:24] <Geth> ¬¶ rakudo: 15a5580164 | (Vadim Belman)++ | src/Perl6/Metamodel/LanguageRevision.nqp

[23:24] <Geth> ¬¶ rakudo: Don't use client core rev to determine class language version

[23:24] <Geth> ¬¶ rakudo: 

[23:24] <Geth> ¬¶ rakudo: It doesn't play well with precompilation where `CompUnit` can be

[23:24] <Geth> ¬¶ rakudo: detected as the client.

[23:24] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/15a5580164

[23:24] <Geth> ¬¶ rakudo: f722715c1e | (Vadim Belman)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/LanguageRevision.nqp

[23:24] <Geth> ¬¶ rakudo: Merge pull request #3351 from vrurg/class-lang-ver-bug

[23:24] <Geth> ¬¶ rakudo: 

[23:24] <Geth> ¬¶ rakudo: Don't use client core rev to determine class language version

[23:24] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/f722715c1e

[23:26] <lizmat> japhb: looks like the 10 msecs where mostly from parsing the test code

[23:27] <lizmat> val("a") for ^29   was about 14 msecs extra

[23:28] <lizmat> m: val("a") for ^29; say now - INIT now    # but actual execution was much less

[23:28] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´0.0028296‚ê§¬ª

[23:28] <lizmat> will look at making this smarter tomorrow

[23:29] <lizmat> sleep&

[23:34] *** sena_kun left
