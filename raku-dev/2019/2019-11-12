[01:03] *** squashable6 left
[01:05] *** squashable6 joined
[01:07] *** pmurias left
[01:12] *** squashable6 left
[01:14] *** squashable6 joined
[01:36] *** vrurg joined
[02:49] <Geth> Â¦ roast: mienaikage++ created pull request #596: Add test to check UInt on non-numeric Str returns a Failure

[02:49] <Geth> Â¦ roast: review: https://github.com/perl6/roast/pull/596

[03:41] *** Xliff left
[04:41] *** statisfiable6 left
[04:41] *** bloatable6 left
[04:41] *** unicodable6 left
[04:41] *** releasable6 left
[04:41] *** reportable6 left
[04:41] *** benchable6 left
[04:41] *** quotable6 left
[04:41] *** greppable6 left
[04:41] *** committable6 left
[04:41] *** squashable6 left
[04:41] *** coverable6 left
[04:41] *** nativecallable6 left
[04:41] *** shareable6 left
[04:41] *** notable6 left
[04:42] *** notable6 joined
[04:42] *** committable6 joined
[04:42] *** reportable6 joined
[04:43] *** evalable6 joined
[04:43] *** tellable6 joined
[04:43] *** releasable6 joined
[04:43] *** unicodable6 joined
[04:43] *** greppable6 joined
[04:43] *** quotable6 joined
[04:43] *** nativecallable6 joined
[04:44] *** benchable6 joined
[04:44] *** shareable6 joined
[04:44] *** squashable6 joined
[04:44] *** statisfiable6 joined
[04:44] *** coverable6 joined
[04:44] *** bloatable6 joined
[05:15] *** entonian joined
[05:17] *** entonian left
[07:06] *** sena_kun joined
[07:22] *** ufobat joined
[09:07] *** Altai-man_ joined
[09:09] *** sena_kun left
[10:06] *** patrickb joined
[10:29] <Geth> Â¦ roast: 0a0fa6d574 | (Daniel Mita)++ | S32-str/numeric.t

[10:29] <Geth> Â¦ roast: Add test to check UInt on non-numeric Str returns a Failure

[10:29] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/0a0fa6d574

[10:29] <Geth> Â¦ roast: 0a0835a209 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S32-str/numeric.t

[10:29] <Geth> Â¦ roast: Merge pull request #596 from mienaikage/uint-failure-test

[10:29] <Geth> Â¦ roast: 

[10:29] <Geth> Â¦ roast: Add test to check UInt on non-numeric Str returns a Failure

[10:29] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/0a0835a209

[10:34] <Geth> Â¦ rakudo: a9cd6404de | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[10:34] <Geth> Â¦ rakudo: Remove support for :match from comb() if not needed

[10:34] <Geth> Â¦ rakudo: 

[10:34] <Geth> Â¦ rakudo: After a night's sleep, I realized that the :match named variable only makes

[10:34] <Geth> Â¦ rakudo: sense if you specify a Regex.  So remove the support for :match for the other

[10:34] <Geth> Â¦ rakudo: candidates for now, as to prevent confusing people even more when specifying

[10:34] <Geth> Â¦ rakudo: :match in those cases, wouldn't actually produce Match object results.

[10:34] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a9cd6404de

[10:41] <|Tux|> Rakudo version 2019.07.1-470-gdd2f072d6 - MoarVM version 2019.07.1-315-gf10a31b43

[10:41] <|Tux|> csv-test-xs-20      0.417 -  0.424

[10:41] <|Tux|> csv-ip5xs           0.706 -  0.722

[10:41] <|Tux|> test-t --race       0.827 -  0.844

[10:41] <|Tux|> test-t              1.731 -  1.851

[10:41] <|Tux|> csv-ip5xs-20        6.297 -  6.507

[10:41] <|Tux|> test                5.811 -  7.043

[10:41] <|Tux|> test-t-20 --race    9.342 - 10.039

[10:41] <|Tux|> csv-parser         21.186 - 21.699

[10:41] <|Tux|> test-t-20          28.559 - 29.052

[11:08] *** sena_kun joined
[11:10] *** Altai-man_ left
[11:19] <lizmat> so, what does this error actually mean?

[11:19] <lizmat> Deprecated use of %*LANG<dynamic-scope> assignment detected in use; module should export syntax using $*LANG.define_slang("dynamic-scope",<grammar>,<actions>) instead

[11:19] <lizmat>   (value in braid: BOOTCode, value in %*LANG: BOOTCode)

[11:20] <lizmat> it seems to occur when a some of my P5 modules are used inside a pre-compiled module, aka P5built-ins

[11:21] <lizmat> specifically P5getservbyname, P5math and P5-X

[11:22] <jnthn> Do they make use of slangs somehow?

[11:29] <jnthn> Ah, though looking at the name...I wonder if it's about the dynamic $_ mechanism

[11:33] <Geth> Â¦ rakudo: 7f15a57c38 | Altai-man++ | t/05-messages/10-warnings.t

[11:33] <Geth> Â¦ rakudo: Test rakudo-specific warning for shape specifier

[11:33] <Geth> Â¦ rakudo: 

[11:33] <Geth> Â¦ rakudo: A simple test that runs code and checks if a warning is issued.

[11:33] <Geth> Â¦ rakudo: Closes https://github.com/rakudo/rakudo/issues/2545

[11:33] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7f15a57c38

[11:33] <Geth> Â¦ rakudo: d36c2e5a44 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | t/05-messages/10-warnings.t

[11:33] <Geth> Â¦ rakudo: Merge pull request #3245 from Altai-man/test-warning

[11:33] <Geth> Â¦ rakudo: 

[11:33] <Geth> Â¦ rakudo: Test rakudo-specific warning for shape specifier

[11:33] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d36c2e5a44

[11:35] <lizmat> jnthn: yeah, but it only complains about those 3 modules

[11:35] <lizmat> and many modules make use of the $_ mechanism

[11:36] <lizmat> it feels to me, it is some kind of corruption going on

[11:36] * lizmat tries to change the order of module loading to see if that makes a difference

[11:36] <jnthn> Doubt it, I suspect just some of them hit the path that triggers the deprecation check

[11:38] <lizmat> well, P5getservbyname and P5getnetbyname are basically the same, but call differen libc functions

[11:38] <lizmat> yet P5getservbyname complains, and P5getnetbyname doesn't

[11:40] <lizmat> also, just loading the module separately, does not make that message appear

[11:40] <lizmat> only if that module is used *inside* of another module being precomped

[11:41] <lizmat> oops... user error, it wasn't P5getservbyname

[11:42] <lizmat> P5print is the one, which support your $_ theory, jnthn 

[11:44] <lizmat> ok, looks like "my sub term:<> is export" is the cause in that case

[11:45] <jnthn> Ah, and that is a language tweak (adding a new term) so would feasibly trigger the deprecation check too

[11:45] <lizmat> yeah, so it looks like exporting a term into a precomped module is not doing it right

[11:46] <lizmat> ah, and P5-X is doing sub prefix:<> is export

[11:47] <lizmat> ah, and P5seek is also doing a sub term:<> is export

[11:47] <lizmat> ok, so they all share the same issue

[11:48] <lizmat> jnthn: now where in the bowels, would I find this ?

[11:48] <lizmat> any hints?

[11:48] <jnthn> grep for dynamic-scope as a starting point 

[11:48] <lizmat> oki

[11:48] <Geth> Â¦ rakudo/master: 4 commits pushed by (Christian BartolomÃ¤us)++, (Elizabeth Mattijsen)++

[11:48] <Geth> Â¦ rakudo/master: fae105b070 | Micro-optimize analyze_dispatch

[11:48] <Geth> Â¦ rakudo/master: 73d5e74d96 | An object will never work if native is expected

[11:48] <Geth> Â¦ rakudo/master: 12d4514a3d | Fix rw handling in compile time dispatch

[11:48] <Geth> Â¦ rakudo/master: a62d9c7856 | Merge pull request #3231 from usev6/literal_to_rw_2019

[11:48] <Geth> Â¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/d36c2e5a4492...a62d9c7856e8

[11:51] *** travis-ci joined
[11:51] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Remove support for :match from comb() if not needed

[11:51] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/610793859 https://github.com/rakudo/rakudo/compare/dd2f072d6aae...a9cd6404de26

[11:51] *** travis-ci left
[11:51] <lizmat> restarted the one failing job

[11:53] <lizmat> jnthn: so it looks like it is doing a: $*LANG.set_pragma('dynamic-scope'

[11:53] <lizmat> but it is not actually setting %*LANG<dynamic-scope> there

[11:53] <lizmat> so I guess it's inside .set_pragme

[11:53] <lizmat> *set_pragma

[11:54] <jnthn> Hmm, curious...

[11:54] <lizmat> but that's an NQP thing, no?

[11:54] <lizmat> can't seem to find any method by that name in src/Perl6

[11:55] <moritz> lizmat: it's in NQP, QRegex/Cursor.nqp

[11:56] <lizmat> right... so this would indicate an NQP issue, rather than a Rakudo one ?

[12:09] <moritz> can't say

[12:33] <lizmat> hmmm... does not appear to be easily reproducable

[12:39] *** AlexDaniel` left
[12:39] *** rba[m] left
[12:39] *** timotimo[m] left
[12:43] <lizmat> afk for most of the rest of the day&

[13:07] *** Altai-man_ joined
[13:09] *** sena_kun left
[13:24] *** tyil[m] joined
[13:24] *** Demos[m] joined
[13:24] *** AlexDaniel` joined
[13:24] *** rba[m] joined
[13:24] *** timotimo[m] joined
[13:26] *** robertle_ joined
[14:11] *** lucasb joined
[15:08] *** sena_kun joined
[15:09] *** Altai-man_ left
[16:05] *** robertle_ left
[16:38] *** patrickb left
[17:07] *** Altai-man_ joined
[17:09] *** sena_kun left
[17:44] *** MasterDuke left
[18:06] *** Altai-man_ left
[18:10] *** sena_kun joined
[18:11] *** sena_kun left
[18:14] *** patrickb joined
[18:29] *** sena_kun joined
[18:31] *** sena_kun left
[18:35] *** sena_kun joined
[18:36] *** sena_kun left
[18:43] *** vrurg left
[18:44] *** vrurg joined
[18:58] *** vrurg left
[18:58] *** vrurg joined
[19:23] *** squashable6 left
[19:25] *** squashable6 joined
[19:48] *** entonian joined
[19:50] *** entonian left
[19:51] *** entonian joined
[19:54] *** entonian left
[20:14] *** ufobat_ joined
[20:18] *** ufobat left
[20:27] *** brrt joined
[20:32] <TreyHarris> tbrowder: I've had a go at responding to https://github.com/rakudo/rakudo/issues/3296 we discussed yesterday.

[20:42] *** MasterDuke joined
[21:33] <tbrowder> Trey Harris: sounds excellent to me. i hope todd will consider it carefully (maybe with a lawyer present)

[21:38] *** patrickb left
[21:40] * [Coke] wonders why make install has one step in ALL CAPS.

[21:40] <[Coke]> +++ MOAR BACKEND INSTALLED

[22:24] *** Kaiepi left
[22:24] *** Kaeipi joined
[23:07] <vrurg> [Coke]: I'm now asking myself - why. No good answer comes into mind. ;)

[23:09] *** brrt left
[23:13] <vrurg> greppable6: find_method_qualified

[23:13] <greppable6> vrurg, 2 lines, 1 module: https://gist.github.com/a64d6fe4ffa2c42ae61d6eefd8fad24d

[23:38] <jnthn> 'CUS IT'S EXCITING! ;)

[23:41] <[Coke]> jnthn: :P

[23:44] * vrurg is blush

[23:45] <vrurg> jnthn: BTW, would would you say if I make find_method_qualified method return not only method itself but the concrete type object it was found on?

[23:46] <vrurg> *what would

[23:46] <jnthn> Hm, why?

[23:46] <jnthn> It feels odd to me

[23:46] <jnthn> Can't you query that by doing .package on the returned method?

[23:47] <vrurg> jnthn: .package would return non-concrete, AFAIR.

[23:48] <vrurg> I'm trying to get a proper fix for qualified calls. They're currently flawed as they might pick up incorrect role.

[23:48] <jnthn> Hm, what do you mean specifically by "concrete type object"?

[23:48] <jnthn> m: role R { method m() { } }; class C does R { }; C.^lookup('m').package.say

[23:48] <camelia> rakudo-moar a62d9c785: OUTPUT: Â«(R)â¤Â»

[23:49] <jnthn> Ah, right, that's a declarative property

[23:49] <jnthn> m: role R { method m() { } }; class C does R { }; C.^lookup('m').signature.params[0].type.say

[23:49] <camelia> rakudo-moar a62d9c785: OUTPUT: Â«(C)â¤Â»

[23:49] <vrurg> It could be either role conretization or $qtype itself, depending if concretization is possible.

[23:49] <jnthn> That's...hacky though :)

[23:50] <jnthn> I think it'd want some kind of new API rather than changing the return value of the existing one, anyway.

[23:50] <jnthn> Though I do wonder if there's a way to pass something as an option to find_method_qualified so *it* can do the check and just not return the method if it doesn't match up to that?

[23:51] *** lucasb left
[23:51] <vrurg> jnthn: The problem is a bit more complex than that. Let me find the gist which demoes part of the problem.

[23:52] <vrurg> https://gist.github.com/vrurg/1063b8a6226025a9461e1f405edb9f5d

[23:52] <vrurg> m: https://gist.github.com/vrurg/1063b8a6226025a9461e1f405edb9f5d

[23:52] <camelia> rakudo-moar a62d9c785: OUTPUT: Â«--- Foo::fooâ¤Foo a==1â¤Foo!a: 1â¤R::info ::?CLASS: (Foo)â¤--- Bar::fooâ¤1. Bar a==1â¤Foo a==2â¤Foo!a: 0â¤R::info ::?CLASS: (Bar)â¤2. Bar a==2â¤Â»

[23:52] <vrurg> This is just one issue: parent class referring same role as it's child gets qualification pointing at child's concretization.

[23:53] <jnthn> Ah

[23:53] <jnthn> Um, I'm surprised that `self.Foo::R::info` even works

[23:54] <vrurg> Worse happens if class consumes a parameterized role and another role which consumes another parameterization of the same role.

[23:54] <jnthn> Yeah, that's an interesting problem...

[23:55] <jnthn> Wonder if it's solvable by giving find_method_qualified a :from, and we pass the enclosing package.

[23:55] <vrurg> So, dispatch of :: must preserve the concrete type object it used to resolve a method in order for any subsequent dispatch to know where to look.

[23:56] <vrurg> jnthn: find_method_qualified doesn't need it. 

[23:57] <jnthn> So...what does?

[23:57] <jnthn> The thing that finds concretizations?

[23:57] <vrurg> dispatch:<::>. I provide it with ::?CALLER-TYPE from upstream in Actions and it kinda works.

[23:58] <vrurg> Right, I currently see no other option but to replace it with a dynamic $*CALLER-TYPE or alike and upstream dispatcher would set it to the concretization.

[23:59] <vrurg> Compile-time is obviously faster, but, unfortunately, only run-time knows the correct answer. :(

