[00:03] *** patrickb left
[00:04] *** rmmm joined
[00:05] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; }; role A { }; A.HOW does Metamodel::MyRoleHOW; A.^name.say

[00:05] <camelia> rakudo-moar f608a7a41: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot declare our-scoped role inside of a role␤(the scope inside of a role is generic, so there is no unambiguous␤package to install the symbol in)␤at <tmp>:1␤------> 3*@pos, *%named) { say 'M…»

[00:05] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; }; }; role A { }; A.HOW does Metamodel::MyRoleHOW; A.^name.say

[00:05] <camelia> rakudo-moar f608a7a41: OUTPUT: «A␤»

[00:05] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; }; }; role A { }; A.HOW does Metamodel::MyRoleHOW; A.HOW.^name.say

[00:05] <camelia> rakudo-moar f608a7a41: OUTPUT: «Perl6::Metamodel::ParametricRoleGroupHOW+{Metamodel::MyRoleHOW}␤»

[00:05] <jnthn> Xliff: The group contains all roles with the same short name

[00:06] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; }; }; role A { }; A.HOW does Metamodel::MyRoleHOW; A.HOW.^name.say; class B does A { }; B.new

[00:06] <camelia> rakudo-moar f608a7a41: OUTPUT: «Perl6::Metamodel::ParametricRoleGroupHOW+{Metamodel::MyRoleHOW}␤»

[00:06] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; }; }; role A { }; A.HOW does Metamodel::MyRoleHOW; class B does A { }; B.new

[00:06] <camelia> rakudo-moar f608a7a41: ( no output )

[00:06] <jnthn> Xliff: So given role R[::T] { } and role R[::T1, ::T2] { } then there's one parametric role group installed at R, holding the two parametric roles

[00:06] <Xliff> jnthn: How come I don't see 'Mee'?

[00:07] <Xliff> Or 'Meee!'?

[00:07] <Xliff> specialize used to be called in this manner, now it's not.

[00:08] <jnthn> Xliff: Not sure, that surprises me a bit

[00:08] <Xliff> And even that is different. A role defined inside a compunit is a Perl6::Metamodel::ParametricRoleHOW, not a ParametricRoleGroupHOW.

[00:08] <jnthn> Oh!!

[00:08] <jnthn> Actually it's obvious

[00:08] <Xliff> Maybe to you! :)

[00:08] <jnthn> `does` happens at runtime, but compile-time composition happens at compile time

[00:08] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; }; }; role A { }; A.HOW but Metamodel::MyRoleHOW; class B does A { }; B.new

[00:08] <camelia> rakudo-moar f608a7a41: OUTPUT: «Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤»

[00:09] <jnthn> You need to do the mixin at compile time

[00:09] <Xliff> Hrm... best way to do that?

[00:09] <jnthn> BEGIN

[00:09] <Xliff> LOL! OK.

[00:09] <Xliff> That... does not help me a bit.

[00:09] <jnthn> Well, obvious as in "compared to going through the source wondering what on earth" :)

[00:09] <jnthn> How so?

[00:10] <Xliff> Well, I need to pun the roles via a trait_mod

[00:10] <jnthn> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; }; }; role A { }; BEGIN A.HOW does Metamodel::MyRoleHOW; class B does A { }; B.new

[00:10] <camelia> rakudo-moar f608a7a41: OUTPUT: «Meee!␤5===SORRY!5=== Error while compiling <tmp>␤Cannot find method 'collisions' on object of type Perl6::Metamodel::EnumHOW␤at <tmp>:1␤»

[00:10] <jnthn> Um, what...

[00:11] <jnthn> Where did the enum come from...

[00:11] <jnthn> Oh...but it did output "Meee!"

[00:11] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; }; }; role A { }; BEGIN { A.HOW does Metamodel::MyRoleHOW; }; class B does A { }; B.new 

[00:11] <camelia> rakudo-moar f608a7a41: OUTPUT: «Meee!␤5===SORRY!5=== Error while compiling <tmp>␤Cannot find method 'collisions' on object of type Perl6::Metamodel::EnumHOW␤at <tmp>:1␤»

[00:11] <jnthn> Oh, it's 'cus `say` returns `True` :D

[00:11] <Xliff> Ah.

[00:11] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; Nil}; }; role A { }; BEGIN { A.HOW does Metamodel::MyRoleHOW; }; class B does A { }; B.new 

[00:11] <camelia> rakudo-moar f608a7a41: OUTPUT: «Meee!␤5===SORRY!5=== Error while compiling <tmp>␤Cannot find method 'collisions' on object of type Perl6::Metamodel::ClassHOW␤at <tmp>:1␤»

[00:12] <jnthn> Well, you need to actually return a specialization :)

[00:12] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named --> Nil) { say 'Meee!'; Nil }; }; role A { }; BEGIN { A.HOW does Metamodel::MyRoleHOW; }; class B does A { }; B.new 

[00:12] <camelia> rakudo-moar f608a7a41: OUTPUT: «Meee!␤5===SORRY!5=== Error while compiling <tmp>␤Cannot find method 'collisions' on object of type Perl6::Metamodel::ClassHOW␤at <tmp>:1␤»

[00:12] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named --> Nil) { say 'Meee!' }; }; role A { }; BEGIN { A.HOW does Metamodel::MyRoleHOW; }; class B does A { }; B.new 

[00:12] <camelia> rakudo-moar f608a7a41: OUTPUT: «Meee!␤5===SORRY!5=== Error while compiling <tmp>␤Cannot find method 'collisions' on object of type Perl6::Metamodel::ClassHOW␤at <tmp>:1␤»

[00:12] <Xliff> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; self; }; }; role A { }; BEGIN { A.HOW does Metamodel::MyRoleHOW; }; class B does A { }; B.new 

[00:12] <camelia> rakudo-moar f608a7a41: OUTPUT: «Meee!␤5===SORRY!5=== Error while compiling <tmp>␤Cannot find method 'collisions' on object of type NQPClassHOW␤at <tmp>:1␤»

[00:12] <Xliff> ?!?

[00:13] <Xliff> OK. Well one question answered... sorta.

[00:13] <jnthn> m: role Metamodel::MyRoleHOW { method specialize (Mu \r, Mu:U \obj, *@pos, *%named) { say 'Meee!'; nextsame }; }; role A { }; BEGIN A.HOW does Metamodel::MyRoleHOW; class B does A { }; B.new

[00:13] <camelia> rakudo-moar f608a7a41: OUTPUT: «Meee!␤»

[00:13] <jnthn> There we go :)

[00:13] <Xliff> Ahhh!

[00:14] <jnthn> Don't know if that's ultimately what you want, but delegating to the original implementation will do the job

[00:14] <Xliff> OK. Is there any way to delay some of this until run-time?

[00:14] <Xliff> Are trait_mods compile time?

[00:14] <jnthn> Yes

[00:14] <Xliff> OK. Great! 

[00:14] <jnthn> Can you define "some of this"? :)

[00:15] <jnthn> Ah, if trait application being compile time suffices, then fine :)

[00:15] <Xliff> Yes.

[00:15] <Xliff> However I need to know if BEGIN time at the compunit level is enough.

[00:16] <Xliff> If I am compiling multiple compunits, will begin wait until all are compiled?

[00:16] <Xliff> s/begin/BEGIN/

[00:16] <jnthn> BEGIN is executed as soon as the compiler reaches it

[00:16] <jnthn> Well, after it's parsed it

[00:16] <jnthn> Modulo a hack to make sure it's eaten a heredoc

[00:17] <Xliff> So I want to define a way to execute a piece of code for every comp unit compiled.

[00:17] <jnthn> If you're in a trait_mod then you're implicitly at compile time

[00:17] <Xliff> So that I can then compose method aliases.

[00:18] <jnthn> So no need to write BEGIN in one of those

[00:18] <Xliff> Method aliases are established at compile time, but due to how roles compose protos, those protos are NOT available until class composition time.

[00:19] <Xliff> s/protos/method candidate/

[00:21] <Xliff> So I want to wait until the class is composed before I assign the method aliases established in the role.

[00:22] <jnthn> Ah, hm.

[00:22] <Xliff> jnthn: See discussion here ... https://github.com/lizmat/Method-Also/issues/1

[00:22] <jnthn> That's an interesting one

[00:22] <jnthn> And probably needs more brain than I have left today

[00:22] <Xliff> This was fixed a while ago... now we're back to square one.

[00:22] <Xliff> Yeah... well... *sigh*

[00:22] <Xliff> My stuff is broken until I can get this fixed again... and I still have partially eaten brain left.

[00:23] <Xliff> It's just so DISAPPOINTING to get something fixed and have it break again.

[00:23] <Xliff> This issue PROBABLY needs an internal fix and should not be left to module space.

[00:25] <jnthn> If the problem is that you want to do something after protos have been produced, maybe you want to override incorporate_multi_candidates, callsame it, and then do your stuff

[00:27] <jnthn> You probably don't want to really wait until after the class composition is totally done, otherwise you're after method cache handling

[00:28] <jnthn> Probably hooking in at the earliest point after the things you need are in place would work

[00:29] <Xliff> So that would be incorporate_multi_candidates?

[00:29] *** sena_kun left
[00:30] <Xliff> I'm still trying to understand why it stopped working when punning to ParametricRoleHOW!

[00:30] <Kaiepi> oh boy, mixing in features to roles...

[00:31] <Kaiepi> doesn't sound fun

[00:31] <Xliff> Worse... roles in the Metamodel!

[00:31] <Kaiepi> i'm mixing in support for parameterization to subsets atm, and that's bad enough, let alone roles

[00:32] <Kaiepi> for different reasons though

[00:33] <jnthn> Could be worse; you could have been the one that had to design and implement the whole thing in the first place... ;-)

[00:33] <Kaiepi> heh

[00:33] <Kaiepi> part of the problem is raku classes and roles don't always play nice with the nqp ones for rakudo's metamodels

[00:34] <Kaiepi> m: class FooHOW does Metamodel::MethodContainer { }; say FooHOW.^methods.^name

[00:34] <camelia> rakudo-moar f608a7a41: OUTPUT: «List␤»

[00:34] <Kaiepi> m: class FooHOW does Metamodel::MethodContainer { }; say FooHOW.^method_table.^name

[00:34] <camelia> rakudo-moar f608a7a41: OUTPUT: «Hash␤»

[00:34] <Kaiepi> wait what?

[00:34] <jnthn> Return values get hllize'd

[00:34] <Kaiepi> that was returning nqp::null() last time i tried

[00:35] <Kaiepi> i'll have to figure out what i was doing at the time for that to happen

[00:35] <jnthn> Are you sure you're doing what you thing you're doing? YOu're calling a method on the meta-class of FooHOW, not on FooHOW

[00:35] <Kaiepi> oh right

[00:35] <jnthn> *think

[00:36] <Kaiepi> m: class FooHOW does Metamodel::MethodContainer { method new_type() { Metamodel::Primitives.create_type: self.new } }; my constant Foo = FooHOW.new_type; say Foo.^methods.^name

[00:36] <camelia> rakudo-moar f608a7a41: OUTPUT: «Cannot iterate over a VMNull type object␤  in block <unit> at <tmp> line 1␤␤»

[00:36] <Kaiepi> there we go

[00:36] <jnthn> Urgh, yes

[00:36] <jnthn> I can guess how that happens; there's probably not an easy fix

[00:36] <jnthn> (Though surely a not-easy one is possible :))

[00:38] <Kaiepi> with parametric subsets, the issue i'm having rn is ensuring they can handle parameterizations without keeping state since raku attributes don't play nice either

[00:38] <Kaiepi> luckily i've been learning haskell lately so there's a functional approach to this i can use to accomplish this

[00:39] <Kaiepi> *parameterizations with generics

[00:47] <jnthn> sleep time o/

[00:50] <Kaiepi> night

[00:50] <japhb> Is there a way to change the default method invocant constraint for a class so that all methods are constrained to be instance methods (or alternately, constrained to be class methods) unless otherwise specified?

[00:52] <japhb> Having `::?CLASS:D: ` at the start of every signature is very cluttery

[00:53] <Xliff> Oh... that would be nice.

[01:07] <japhb> Actually, I'd love to be able to default *all* of the type smilies to :D, then use :U or :_ explicitly for the other choices.  I'm fairly certain that would not only de-clutter my code, but vastly reduce a big source of bugs -- it ought to be possible for people to say "Make me do extra work to allow undefined arguments".

[01:26] <Kaiepi> m: role Foo[\T] { say (try my ::?CLASS:D $ = T) // 'oops!' }; Foo[1].new

[01:26] <camelia> rakudo-moar f608a7a41: OUTPUT: «oops!␤oops!␤»

[01:26] <Kaiepi> generics mess with this though

[01:28] <Kaiepi> wait nvm that's a separate issue

[01:29] <Kaiepi> it'd be nice but i'm wary of what would happen if that were the case

[02:19] *** rmmm left
[02:51] *** Kaiepi left
[02:53] *** Kaiepi joined
[02:53] *** Kaiepi left
[02:54] *** Kaiepi joined
[02:55] *** Kaiepi left
[02:56] *** Kaiepi joined
[03:08] *** cognominal joined
[03:10] *** Kaiepi left
[03:11] *** Kaiepi joined
[03:11] *** cognomin_ left
[03:14] *** cognomin_ joined
[03:18] *** cognominal left
[04:27] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates (|) { my \r := callsame; say 'HIII!'; r; }; }; role =

[04:27] <camelia> rakudo-moar f608a7a41: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse role definition␤at <tmp>:1␤------> 3 := callsame; say 'HIII!'; r; }; }; role7⏏5 =␤    expecting any of:␤        generic role␤»

[04:28] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates (|) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; 

[04:28] <camelia> rakudo-moar f608a7a41: ( no output )

[04:28] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates (|) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; A.HOW does NewRoleHow; A.new.a('H')

[04:28] <camelia> rakudo-moar f608a7a41: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    NewRoleHow used at line 1. Did you mean 'NewRoleHOW'?␤␤»

[04:28] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates (|) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; A.HOW does NewRoleHOW; A.new.a('H')

[04:28] <camelia> rakudo-moar f608a7a41: OUTPUT: «Str␤»

[04:28] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates (|c) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; A.HOW does NewRoleHOW; A.new.a('H')

[04:28] <camelia> rakudo-moar f608a7a41: OUTPUT: «Str␤»

[04:29] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates (|c) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN A.HOW does NewRoleHOW; A.new.a('H')

[04:29] <camelia> rakudo-moar f608a7a41: OUTPUT: «Str␤»

[04:29] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates (|c) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN { A.HOW does NewRoleHOW; }; A.new.a('H')

[04:29] <camelia> rakudo-moar f608a7a41: OUTPUT: «Str␤»

[04:29] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates (|c) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN { A.HOW does NewRoleHOW; }; A.new.a('H')

[04:29] <camelia> rakudo-moar f608a7a41: OUTPUT: «Str␤»

[04:30] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates (|c) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN { A.HOW does NewRoleHOW; }; A.new.a('H')

[04:30] <camelia> rakudo-moar f608a7a41: OUTPUT: «Str␤»

[04:54] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates ($obj) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN { A.HOW does NewRoleHOW; }; A.new.a('H')

[04:54] <camelia> rakudo-moar f608a7a41: OUTPUT: «Str␤»

[04:55] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates ($obj) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN { A.HOW does NewRoleHOW; }; A.HOW.^name.say

[04:55] <camelia> rakudo-moar f608a7a41: OUTPUT: «Perl6::Metamodel::ClassHOW+{NewRoleHOW}␤»

[04:56] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates ($obj) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN A.HOW but NewRoleHOW; A.HOW.^name.say

[04:56] <camelia> rakudo-moar f608a7a41: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  Died with X::Method::NotFound␤    in code  at <tmp> line 1␤␤»

[04:56] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates ($obj) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN A.HOW does NewRoleHOW; A.HOW.^name.say

[04:56] <camelia> rakudo-moar f608a7a41: OUTPUT: «Perl6::Metamodel::ClassHOW+{NewRoleHOW}␤»

[04:56] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates ($obj) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN A.HOW does NewRoleHOW; 

[04:56] <camelia> rakudo-moar f608a7a41: ( no output )

[04:57] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates ($obj) { my \r := callsame; say 'HIII!'; r; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN A.HOW does NewRoleHOW; A.new.a(1)

[04:57] <camelia> rakudo-moar f608a7a41: OUTPUT: «Int␤»

[04:57] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates ($obj) { callsame; say 'HIII!'; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN A.HOW does NewRoleHOW; A.new.a(1)

[04:57] <camelia> rakudo-moar f608a7a41: OUTPUT: «Int␤»

[04:57] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates ($obj) { callsame; say 'HIII!'; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN A.HOW does NewRoleHOW;

[04:57] <camelia> rakudo-moar f608a7a41: ( no output )

[04:58] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates ($obj) { callsame; say 'HIII!'; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN B.HOW does NewRoleHOW;

[04:58] <camelia> rakudo-moar f608a7a41: ( no output )

[04:58] <Xliff> m: role NewRoleHOW { method incorporate_multi_candidates ($obj) { callsame; say 'HIII!'; }; }; role B { multi method a (Str $a) { say 'Str'; }; multi method a (Int $i) { say 'Int'; }; }; class A does B { }; BEGIN { A.HOW does NewRoleHOW; B.HOW does NewRoleHOW; };

[04:58] <camelia> rakudo-moar f608a7a41: ( no output )

[04:58] <Xliff> jnthn: ^^^ ????

[06:30] *** Kaiepi left
[06:37] *** Kaiepi joined
[06:37] *** Kaiepi left
[06:38] *** Kaiepi joined
[06:39] *** Kaiepi left
[06:40] *** discord61 joined
[06:40] *** Kaiepi joined
[06:40] *** discord6 left
[06:40] *** discord61 is now known as discord6

[06:55] *** discord6 left
[06:55] *** discord6 joined
[07:13] *** Kaiepi left
[08:07] *** Kaiepi joined
[08:23] *** Xliff left
[09:16] *** Kaiepi left
[09:22] *** Kaiepi joined
[10:23] *** ufobat joined
[10:37] *** jmerelo joined
[10:37] <jmerelo> hey

[10:37] <tellable6> 2019-11-30T14:35:13Z #raku <tbrowder> jmerelo post updated--basically done, but still some minor edits to make (i need to add another note), and i'll try to fix the wordpress issues with extra newlines.

[10:37] <tellable6> 2019-11-30T19:03:57Z #raku <tbrowder> jmerelo i took 9 dec slot. though i'm happy to give it up if someone else wants it, but speak soon!

[10:37] <tellable6> 2019-11-30T19:06:10Z #raku <tbrowder> jmerelo check yr email

[10:37] <tellable6> 2019-12-01T00:04:15Z #raku <tbrowder> jmerelo wordpress is not showing my latest version!!!! wp sucks rocks

[10:37] <tellable6> 2019-12-01T00:12:48Z #raku <tbrowder> jmerelo it looks like it's finally taken my update-whew!

[10:38] * jmerelo clickbaits the first day of the Advent Calendar https://rakuadventcalendar.wordpress.com/2019/12/01/day-1-raku-%f0%9f%a0%94-perl-transforming-old-perl-code/

[10:40] <jmerelo> Also, now Google search from the search slot actually searches docs.raku.org. Check it out at https://docs-stage.raku.org/

[10:40] <jmerelo> As usual, if everything's OK, I'll deploy to docs.raku.org

[10:40] <jmerelo> Tanks rba++ for setting up this stating infrastructure. It's great for, well, staging changes before being deployed to the actual site.

[10:41] <jmerelo> s/stating/staging/

[10:50] *** sena_kun joined
[10:58] <jmerelo> sena_kun: ready for today's advent calendar?

[10:59] <jmerelo> tonight, rather

[11:00] <jmerelo> I see it's already scheduled. I'll add some links, if you don't mind.

[11:02] *** sena_kun left
[11:03] <jmerelo> .tell sena_kun I've done a bit of editing here and there. Other than that, perfect!

[11:03] <tellable6> jmerelo, I'll pass your message to sena_kun

[11:16] *** sena_kun joined
[11:40] *** ufobat_ joined
[11:43] *** ufobat left
[11:50] *** ufobat joined
[11:52] *** ufobat_ left
[11:56] <Geth> ¦ rakudo: lizmat self-unassigned LTA: Heredocs give warning trouble with empty lines that are partially indented https://github.com/rakudo/rakudo/issues/2409

[11:58] *** MasterDuke left
[11:58] <lizmat> Files=1290, Tests=109646, 207 wallclock secs (27.95 usr  7.92 sys + 2915.13 cusr 261.17 csys = 3212.17 CPU)

[12:16] <[Tux]> Rakudo version 2019.11-71-gc16b5a204 - MoarVM version 2019.07.1-395-geb3d981d7

[12:16] <[Tux]> csv-test-xs-20      0.426 -  0.434

[12:16] <[Tux]> csv-ip5xs           0.723 -  0.819

[12:16] <[Tux]> test-t --race       0.823 -  0.946

[12:16] <[Tux]> test-t              1.747 -  1.790

[12:16] <[Tux]> csv-ip5xs-20        6.669 -  6.727

[12:16] <[Tux]> test                7.425 -  7.619

[12:16] <[Tux]> test-t-20 --race    9.054 -  9.665

[12:16] <[Tux]> csv-parser         21.604 - 23.045

[12:16] <[Tux]> test-t-20          28.953 - 29.193

[12:31] *** ufobat left
[12:40] <tbrowder> lizmat: does the heredoc issue seem hard to fix?

[12:41] <lizmat> tbrowder: I'm a complete noob wrt to heredocs, so I'm not the most efficient person to be responsible for fixing that issue

[12:41] <tbrowder> can it be fixed in Rakudo instead of nqp?

[12:41] <lizmat> I have no idea

[12:42] <tbrowder> ok, thnx

[12:42] * lizmat 's mind is in CoC land atm

[12:44] <Geth> ¦ problem-solving/CoC: 48f4c51ebe | (Elizabeth Mattijsen)++ | solutions/meta/CoC.md

[12:44] <Geth> ¦ problem-solving/CoC: Rework the "Responsibility" section

[12:44] <Geth> ¦ problem-solving/CoC: review: https://github.com/perl6/problem-solving/commit/48f4c51ebe

[12:55] <SmokeMachine> .

[12:55] <tellable6> 2019-11-30T16:07:57Z #raku-dev <lizmat> SmokeMachine could you please check that Red survived https://github.com/rakudo/rakudo/commit/1d8d62d46d ?

[12:56] <SmokeMachine> lizmat: I’ll take a look

[13:02] *** sena_kun left
[13:04] <SmokeMachine> thanks!

[13:05] * lizmat is off for some F1&

[13:17] *** sena_kun joined
[13:17] *** sena_kun left
[13:30] *** MasterDuke joined
[13:38] <MasterDuke> anyone know anything about this? "Tree-sitter - a new parsing system for programming tools" by Max Brunsfeld, https://www.youtube.com/watch?v=Jes3bD6P0To

[13:42] <jnthn> .tell Xliff You'd need to arrange for that to be overridden in the ClassHOW

[13:42] <tellable6> jnthn, I'll pass your message to Xliff

[14:04] <Geth> ¦ nqp: 4b3bb9c8c3 | (Stefan Seifert)++ | tools/templates/MOAR_REVISION

[14:04] <Geth> ¦ nqp: Bump MoarVM for NativeCall's new serialize_lib_name attribute

[14:04] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4b3bb9c8c3

[14:04] <Geth> ¦ rakudo: 55b3ed5626 | (Stefan Seifert)++ | 2 files

[14:04] <Geth> ¦ rakudo: Fix relocatability of bundled native libraries

[14:04] <Geth> ¦ rakudo: 

[14:04] <Geth> ¦ rakudo: Native libraries (and other resource files) bundled with installed modules are

[14:04] <Geth> ¦ rakudo: supposed to be relocatable, i.e. their path is always relative to the current

[14:04] <Geth> ¦ rakudo: path of the repository. This is especially important for packaging as the

[14:04] <Geth> ¦ rakudo: module will get installed into a temporary build directory using the Staging

[14:04] <Geth> ¦ rakudo: repository. The generated files will be moved to their final location when

[14:04] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[14:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/55b3ed5626

[14:09] *** sena_kun joined
[15:02] *** sena_kun left
[15:18] *** sena_kun joined
[15:52] *** patrickb joined
[15:56] *** jmerelo left
[16:00] *** ufobat joined
[16:20] <Geth> ¦ rakudo: 7cfdd59823 | (Patrick Böker)++ | 18 files

[16:20] <Geth> ¦ rakudo: Rename PERL6_HOME to RAKUDO_HOME

[16:20] <Geth> ¦ rakudo: 

[16:20] <Geth> ¦ rakudo: Same for Configure.pl parameter --perl6-home -> --rakudo-home.

[16:20] <Geth> ¦ rakudo: Stay backwards compatible by mapping --perl6-home to --rakudo-home and

[16:20] <Geth> ¦ rakudo: accepting both PERL6_HOME and RAKUDO_HOME environment variables.

[16:20] <Geth> ¦ rakudo: This commit does not yet touch any file system paths.

[16:20] <Geth> ¦ rakudo: These changes require a newer nqp_configure which the commit also pulls in.

[16:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7cfdd59823

[16:20] <Geth> ¦ rakudo: ab2ba1ab22 | (Patrick Böker)++ (committed using GitHub Web editor) | 18 files

[16:20] <Geth> ¦ rakudo: Merge pull request #3321 from patzim/perl6-to-rakudo-home

[16:20] <Geth> ¦ rakudo: 

[16:20] <Geth> ¦ rakudo: Rename PERL6_HOME to RAKUDO_HOME

[16:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ab2ba1ab22

[16:22] <Geth> ¦ problem-solving/CoC: e2b18bf640 | (Elizabeth Mattijsen)++ | solutions/meta/CoC.md

[16:22] <Geth> ¦ problem-solving/CoC: Make discrimination clause more specific

[16:22] <Geth> ¦ problem-solving/CoC: review: https://github.com/perl6/problem-solving/commit/e2b18bf640

[16:28] *** ufobat left
[16:33] <patrickb> .tell nine Can you have a look this PR please? -> https://github.com/rakudo/rakudo/pull/3282

[16:33] <tellable6> patrickb, I'll pass your message to nine

[17:00] *** sena_kun left
[17:06] <Geth> ¦ rakudo: patzim++ created pull request #3335: Make the raku symlinks relative

[17:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3335

[17:11] *** discord6 left
[17:11] *** AlexDaniel left
[17:11] *** vrurg left
[17:11] *** jjatria left
[17:11] *** moon-child left
[17:11] *** pochi left
[17:11] *** jnthn left
[17:11] *** klapperl left
[17:11] *** go|dfish left
[17:11] *** timotimo left
[17:11] *** patrickb left
[17:11] *** Geth left
[17:11] *** robertle left
[17:11] *** cognomin_ left
[17:11] *** dmc00 left
[17:11] *** nebuchadnezzar left
[17:11] *** TreyHarris left
[17:11] *** rba[m] left
[17:11] *** unicodable6 left
[17:11] *** committable6 left
[17:11] *** Demos[m] left
[17:11] *** kawaii left
[17:11] *** Kaiepi left
[17:11] *** maettu left
[17:11] *** samcv left
[17:11] *** [Coke] left
[17:11] *** japhb left
[17:11] *** lucs left
[17:11] *** moritz left
[17:11] *** jdv79 left
[17:11] *** b2gills left
[17:11] *** sjn left
[17:11] *** Ulti left
[17:11] *** timotimo[m] left
[17:11] *** quotable6 left
[17:11] *** bloatable6 left
[17:11] *** benchable6 left
[17:11] *** coverable6 left
[17:11] *** reportable6 left
[17:11] *** greppable6 left
[17:11] *** nativecallable6 left
[17:11] *** statisfiable6 left
[17:11] *** shareable6 left
[17:11] *** squashable6 left
[17:11] *** tellable6 left
[17:11] *** kubrat left
[17:11] *** rba left
[17:11] *** epony left
[17:11] *** EuAndreh[m] left
[17:11] *** zostay left
[17:11] *** MasterDuke left
[17:11] *** lizmat left
[17:11] *** releasable6 left
[17:11] *** notable6 left
[17:11] *** bisectable6 left
[17:11] *** tyil[m] left
[17:11] *** evalable6 left
[17:11] *** ZzZombo left
[17:11] *** AlexDaniel` left
[17:11] *** kurahaupo left
[17:12] *** patrickb joined
[17:12] *** MasterDuke joined
[17:12] *** Kaiepi joined
[17:12] *** discord6 joined
[17:12] *** cognomin_ joined
[17:12] *** AlexDaniel joined
[17:12] *** ZzZombo joined
[17:12] *** Geth joined
[17:12] *** lizmat joined
[17:12] *** dmc00 joined
[17:12] *** vrurg joined
[17:12] *** robertle joined
[17:12] *** quotable6 joined
[17:12] *** releasable6 joined
[17:12] *** notable6 joined
[17:12] *** unicodable6 joined
[17:12] *** bloatable6 joined
[17:12] *** committable6 joined
[17:12] *** benchable6 joined
[17:12] *** coverable6 joined
[17:12] *** bisectable6 joined
[17:12] *** reportable6 joined
[17:12] *** nativecallable6 joined
[17:12] *** greppable6 joined
[17:12] *** statisfiable6 joined
[17:12] *** shareable6 joined
[17:12] *** squashable6 joined
[17:12] *** jjatria joined
[17:12] *** timotimo[m] joined
[17:12] *** tyil[m] joined
[17:12] *** EuAndreh[m] joined
[17:12] *** Demos[m] joined
[17:12] *** rba[m] joined
[17:12] *** AlexDaniel` joined
[17:12] *** maettu joined
[17:12] *** moon-child joined
[17:12] *** pochi joined
[17:12] *** nebuchadnezzar joined
[17:12] *** samcv joined
[17:12] *** [Coke] joined
[17:12] *** tellable6 joined
[17:12] *** japhb joined
[17:12] *** TreyHarris joined
[17:12] *** evalable6 joined
[17:12] *** b2gills joined
[17:12] *** epony joined
[17:12] *** sjn joined
[17:12] *** jnthn joined
[17:12] *** kubrat joined
[17:12] *** kurahaupo joined
[17:12] *** lucs joined
[17:12] *** camelia joined
[17:12] *** dogbert17 joined
[17:12] *** tony-o joined
[17:12] *** bartolin joined
[17:12] *** nine joined
[17:12] *** SyrupThinker joined
[17:12] *** masak joined
[17:12] *** tyil joined
[17:12] *** tobs joined
[17:12] *** Hotbees joined
[17:12] *** klapperl joined
[17:12] *** go|dfish joined
[17:12] *** timotimo joined
[17:12] *** Ulti joined
[17:12] *** moritz joined
[17:12] *** kawaii joined
[17:12] *** jdv79 joined
[17:12] *** rba joined
[17:12] *** zostay joined
[17:13] <tbrowder> MasterDuke: looks pretty slick!

[17:15] *** sena_kun joined
[17:24] <Geth> ¦ rakudo: 92a8a08f5d | (Elizabeth Mattijsen)++ | src/core.c/Int.pm6

[17:24] <Geth> ¦ rakudo: Introducing .base("beer") and .base("camel")

[17:24] <Geth> ¦ rakudo: 

[17:24] <Geth> ¦ rakudo: Yes, this isn't serious, but doesn't affect performance of Int.base at all,

[17:24] <Geth> ¦ rakudo: and it was too long ago since we added another easter egg to Rakudo.  The

[17:24] <Geth> ¦ rakudo: amount of -Oseriousness was at a maximum.

[17:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/92a8a08f5d

[17:40] *** AlexDaniel left
[17:41] *** AlexDaniel joined
[17:41] *** AlexDaniel left
[17:41] *** AlexDaniel joined
[17:55] <Geth> ¦ rakudo: 314aa05e9b | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/core.c/Int.pm6

[17:55] <Geth> ¦ rakudo: Revert "Introducing .base("beer") and .base("camel")"

[17:55] <Geth> ¦ rakudo: 

[17:55] <Geth> ¦ rakudo: This reverts frivolous commit 92a8a08f5dd073fe1d8c774bfbd52d916362afd7.

[17:55] <Geth> ¦ rakudo: 

[17:55] <Geth> ¦ rakudo: “You think it's funny today” except that it's not even funny.

[17:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/314aa05e9b

[18:02] <lizmat> wow, not even 30 minutes

[18:02] <lizmat> ok, just about 30 minutes

[18:03] <AlexDaniel> :)

[18:03] <lizmat> is this the signal to remove all of the other easter eggs ?

[18:04] * lizmat is a little disappointed

[18:05] * sjn thinks there's too little humour and wit in software development in general

[18:09] * sena_kun thought there is Raku Advent where people can show off tricks and write things like this one

[18:09] <sena_kun> AlexDaniel ping...?

[18:10] <sena_kun> I am playing with sake all for releasing, resolving the arising questions... the one thing I am worrying right now is that won't I accidentally "release" nqp? as in, I have access to push.

[18:10] <AlexDaniel> if you want to introduce fun stuff, please commit to whateverable :D

[18:10] <AlexDaniel> sena_kun: no

[18:10] <sena_kun> great

[18:11] <AlexDaniel> sena_kun: unless you run `sake human-upload`

[18:11] <AlexDaniel> and even that will fail

[18:11] <sena_kun> .oO ( failures are welcome )

[18:11] * sena_kun continues to stare at logs

[18:17] * lizmat goes off to do something else for the rest of the day

[18:26] *** ufobat joined
[18:57] *** lucasb joined
[19:00] *** sena_kun left
[19:03] <japhb> lizmat: Idea for mixing in easter eggs -- a branch named something egg-related, like 'fritatta' because it's baked eggs with other stuff mixed in, that has all the patches for various easter eggs.  If someone wants an up-to-date but eggy form of rakudo, they can just rebase that branch onto master and build it.  :-)

[19:14] <nine> Wait...beer and camel are gone already? Wanted to try them on camelia but went for cooking first :(

[19:14] <tellable6> 2019-12-01T16:33:42Z #raku-dev <patrickb> nine Can you have a look this PR please? -> https://github.com/rakudo/rakudo/pull/3282

[19:17] *** sena_kun joined
[19:19] <Geth> ¦ rakudo: a00628e0fb | (Patrick Böker)++ | tools/templates/moar/Makefile.in

[19:19] <Geth> ¦ rakudo: Make the raku symlinks relative

[19:19] <Geth> ¦ rakudo: 

[19:19] <Geth> ¦ rakudo: This makes them work when relocated.

[19:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a00628e0fb

[19:19] <Geth> ¦ rakudo: 84ef864cb3 | (Patrick Böker)++ (committed using GitHub Web editor) | tools/templates/moar/Makefile.in

[19:19] <Geth> ¦ rakudo: Merge pull request #3335 from patzim/relative-raku-symlink

[19:19] <Geth> ¦ rakudo: 

[19:19] <Geth> ¦ rakudo: Make the raku symlinks relative

[19:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/84ef864cb3

[19:19] <Geth> ¦ rakudo/master: 5 commits pushed by (Patrick Böker)++

[19:19] <Geth> ¦ rakudo/master: 8b7d0651e5 | The build home dir now has a more serious name

[19:19] <Geth> ¦ rakudo/master: 52a7bab917 | Give a hint of how to run Perl 5 integration tests

[19:19] <Geth> ¦ rakudo/master: d7d9a2f496 | Clean up temporary build dir raku home on `realclean`

[19:19] <Geth> ¦ rakudo/master: 470c9b7ea0 | Make `make spectest` more independent of CWD

[19:19] <Geth> ¦ rakudo/master: c74e5e4646 | Merge pull request #3282 from patzim/spectest-inlinep5-hint

[19:19] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/84ef864cb321...c74e5e464637

[19:23] <patrickb> .tell rba Now I'm at the point where I need external feedback to progress with the rakudo.org website changes. Any updates on the test server?

[19:23] <tellable6> patrickb, I'll pass your message to rba

[20:02] <AlexDaniel> nine: try them on committable then

[20:02] <AlexDaniel> c: 92a8a08f5 say 42.base(‘beer’)

[20:02] <committable6> AlexDaniel, ¦92a8a08: «🍻🍺🍻🍺🍻🍺␤»

[20:03] <Geth> ¦ rakudo: MasterDuke17++ created pull request #3336: Fix "unused variable" compiler warnings in C ops

[20:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3336

[20:18] *** ufobat_ joined
[20:22] *** ufobat left
[20:22] <AlexDaniel> u: 🩂

[20:22] <unicodable6> AlexDaniel, U+1FA42 NEUTRAL CHESS BISHOP ROTATED TWO HUNDRED SEVENTY DEGREES [So] (🩂)

[20:22] <AlexDaniel> what

[20:23] <AlexDaniel> https://gist.github.com/Whateverable/5f092c7742048a103d0990dafee14a35

[20:24] <AlexDaniel> u: 🨆

[20:24] <unicodable6> AlexDaniel, U+1FA06 WHITE CHESS KNIGHT ROTATED FORTY-FIVE DEGREES [So] (🨆)

[20:26] <AlexDaniel> u: white chess knight

[20:26] <unicodable6> AlexDaniel, U+2658 WHITE CHESS KNIGHT [So] (♘)

[20:26] <unicodable6> AlexDaniel, U+1FA06 WHITE CHESS KNIGHT ROTATED FORTY-FIVE DEGREES [So] (🨆)

[20:26] <unicodable6> AlexDaniel, 11 characters in total (♘🨆🨍🨛🨢🨰🨷🩅🩎🩏🩐): https://gist.github.com/70c0843cbd039fc69461e80812e87cad

[20:28] <AlexDaniel> https://github.com/ryn1x/Terminal-Spinners/issues/5

[20:32] *** ufobat_ left
[21:01] *** sena_kun left
[21:16] *** sena_kun joined
[21:30] *** Xliff joined
[21:48] *** travis-ci joined
[21:48] <travis-ci> Rakudo build passed. Patrick Böker 'Merge pull request #3335 from patzim/relative-raku-symlink

[21:48] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/619314597 https://github.com/rakudo/rakudo/compare/314aa05e9ba0...84ef864cb321

[21:48] *** travis-ci left
[21:58] <AlexDaniel> m: my $a = ‘🐪’; for ^30 { say $a++ }

[21:58] <camelia> rakudo-moar f608a7a41: OUTPUT: «🐪␤🐫␤🐫🐪␤🐫🐫␤🐫🐪🐪␤🐫🐪🐫␤🐫🐫🐪␤🐫🐫🐫␤🐫🐪🐪🐪␤🐫🐪🐪🐫␤🐫🐪🐫🐪␤🐫🐪🐫🐫␤🐫🐫🐪🐪␤🐫🐫🐪🐫␤🐫🐫🐫🐪␤🐫🐫🐫🐫␤…»

[21:58] <AlexDaniel> e: my $a = ‘🐪’; for ^30 { say $a++ }

[21:58] <evalable6> AlexDaniel, rakudo-moar c74e5e464: OUTPUT: «🐪␤🐫␤🐫🐪␤🐫🐫␤🐫🐪🐪␤…»

[21:58] <evalable6> AlexDaniel, Full output: https://gist.github.com/9bbd9af332dea12b87deff3334dfc54f

[22:18] <Geth> ¦ rakudo: 77ffb06330 | (Elizabeth Mattijsen)++ | 3 files

[22:18] <Geth> ¦ rakudo: "I think that the source code is not the place where you make jokes by introducing special cases"

[22:18] <Geth> ¦ rakudo: 

[22:18] <Geth> ¦ rakudo: I guess this is the consequence of Raku becoming a serious programming

[22:18] <Geth> ¦ rakudo: language.  :-(

[22:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/77ffb06330

[22:23] <lizmat> I guess I should have stayed away from the keyboard this evening  :-(

[22:23] <lizmat> I will now

[22:36] <AlexDaniel> lizmat: I guess I'm wrong, actually

[22:36] <AlexDaniel> I totally forgot that ++ does that magic

[22:37] <AlexDaniel> there was a ticket somewhere discussing .succ on strings, but as long as this behavior is there, you can do whatever

[22:37] <AlexDaniel> beer or not beer, it's unpredictable anyway

[22:45] <AlexDaniel> .oO( Tonight on Raku FM! AlexDaniel learns about ++ operator )

[22:46] <AlexDaniel> so both .succ and ++ on strings do the same, but there's also another behavior that you can get with ..

[22:46] * AlexDaniel shrugs and runs away

[22:49] <AlexDaniel> m: my $x = ‘-42’; $x++; say $x

[22:49] <camelia> rakudo-moar f608a7a41: OUTPUT: «-43␤»

[22:49] <AlexDaniel> rrrright

[22:49] <AlexDaniel> m: my $x = ‘-42’; say $x + 1

[22:49] <camelia> rakudo-moar f608a7a41: OUTPUT: «-41␤»

[22:50] <Geth> ¦ rakudo: 68cee0dd41 | (Daniel Green)++ | src/vm/moar/ops/perl6_ops.c

[22:50] <Geth> ¦ rakudo: Fix "unused variable" compiler warnings in C ops

[22:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/68cee0dd41

[22:50] <Geth> ¦ rakudo: a707633755 | niner++ (committed using GitHub Web editor) | src/vm/moar/ops/perl6_ops.c

[22:50] <Geth> ¦ rakudo: Merge pull request #3336 from MasterDuke17/remove_unused_variables_in_c_code

[22:50] <Geth> ¦ rakudo: 

[22:50] <Geth> ¦ rakudo: Fix "unused variable" compiler warnings in C ops

[22:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a707633755

[22:53] <Xliff> m: my $x = -42; $x++; say $x;

[22:53] <camelia> rakudo-moar f608a7a41: OUTPUT: «-41␤»

[22:53] <Xliff> m: my $x = '-42'; $x++; say $x;

[22:53] <camelia> rakudo-moar f608a7a41: OUTPUT: «-43␤»

[22:54] <Xliff> Ouch.

[22:54] <AlexDaniel> Xliff: yeah I can't exactly blame myself for not remembering that ++ works on strings :D

[22:54] <AlexDaniel> because it kinda doesn't :)

[22:54] <Xliff> Can see that! LOL

[22:55] <Xliff> say 🐪 + 2 

[22:55] <Xliff> m: say '🐪' + 2 

[22:55] <camelia> rakudo-moar f608a7a41: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5🐪' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[22:55] <Xliff> m: say '🐪'.succ.succ

[22:55] <camelia> rakudo-moar f608a7a41: OUTPUT: «🐫🐪␤»

[22:55] <Xliff> Actually, I don't see why that needs to come out.

[22:56] <Xliff> m: '⚀'

[22:56] <camelia> rakudo-moar f608a7a41: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "⚀" in sink context (line 1)␤»

[22:56] <Xliff> m: my $a = '⚀'; $a.succ xx 7; $a.say

[22:56] <camelia> rakudo-moar f608a7a41: OUTPUT: «⚀␤»

[22:56] <AlexDaniel> Xliff: I guess it really doesn't matter what comes out of it, it's surprising anyway and .. range feature is more so

[22:56] <Xliff> m: my $a = '⚀'; $a .= succ for ^7; $a.say

[22:56] <camelia> rakudo-moar f608a7a41: OUTPUT: «⚀⚁␤»

[22:57] <Xliff> AlexDaniel: Any less surprising than ^^

[22:58] <Xliff> Another solution would be a tongue-in-cheek reference in the docs. 

[22:58] <Xliff> Would take the "surprise" out of it and leave the character.

[22:59] <Xliff> AlexDaniel: Same with this...

[22:59] <Xliff> m: say ++'▁'

[22:59] <camelia> rakudo-moar f608a7a41: OUTPUT: «Cannot resolve caller prefix:<++>(Str:D); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool $a is rw)␤    (Int:D $a is rw --> Int:D)␤    (M…»

[22:59] <Xliff> m: say (++'▁')

[22:59] <camelia> rakudo-moar f608a7a41: OUTPUT: «Cannot resolve caller prefix:<++>(Str:D); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool $a is rw)␤    (Int:D $a is rw --> Int:D)␤    (M…»

[22:59] <Xliff> ?!?

[22:59] <AlexDaniel> put it in a variable

[23:00] <Xliff> m: my $a = '▁'; say ++$a;

[23:00] <camelia> rakudo-moar f608a7a41: OUTPUT: «▂␤»

[23:00] <Xliff> But you get my point!

[23:00] <AlexDaniel> 😕

[23:00] <Xliff> If you think these are surprising, I think it's better we take all of these ranges and document them, rather than removing things because they are "surprising"

[23:01] *** sena_kun left
[23:01] <AlexDaniel> Xliff: that's right, yes, beer doesn't matter as long as it does that

[23:02] <Xliff> m: "᱅".Int.say

[23:02] <camelia> rakudo-moar f608a7a41: OUTPUT: «5␤»

[23:02] <Xliff> m: my $wtf = "᱅"; $wtf .= succ xx 10000.rand; $wtf.say

[23:02] <camelia> rakudo-moar f608a7a41: OUTPUT: «᱃᱈᱃␤»

[23:02] <Xliff> m: my $wtf = "᱅"; $wtf .= succ xx 10000.rand; $wtf.say. $wtf.Int.say

[23:02] <camelia> rakudo-moar f608a7a41: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at <tmp>:1␤------> 3"; $wtf .= succ xx 10000.rand; $wtf.say.7⏏5 $wtf.Int.say␤»

[23:02] <Xliff> m: my $wtf = "᱅"; $wtf .= succ xx 10000.rand; $wtf.say; $wtf.Int.say

[23:02] <camelia> rakudo-moar f608a7a41: OUTPUT: «᱄᱁᱆᱆␤4166␤»

[23:02] *** travis-ci joined
[23:02] <travis-ci> Rakudo build passed. Patrick Böker 'Merge pull request #3282 from patzim/spectest-inlinep5-hint

[23:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/619314911 https://github.com/rakudo/rakudo/compare/84ef864cb321...c74e5e464637

[23:02] *** travis-ci left
[23:03] <Xliff> I could swear I've seen these symbols, before... I'm looking at you, Stargate!!!

[23:03] <Xliff> (kidding)

[23:04] <Xliff> AlexDaniel: And yes. Beer documents quite well. When you spill it on your shirt it quite visibly notes: "I'm drunk!"

[23:18] *** sena_kun joined
[23:20] *** kurahaupo left
[23:39] *** dmc00 left
