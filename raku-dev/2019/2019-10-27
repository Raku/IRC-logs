[00:09] <AlexDaniel> japhb: alright

[00:09] <AlexDaniel> can you file a bug report?

[00:09] <AlexDaniel> japhb: or maybe share your findings here?

[00:09] <AlexDaniel> japhb: https://github.com/MoarVM/MoarVM/issues/1206

[00:14] <AlexDaniel> u: butterfly

[00:14] <unicodable6> AlexDaniel, U+1F98B BUTTERFLY [So] (🦋)

[00:59] <AlexDaniel> japhb: see this: https://github.com/MoarVM/MoarVM/issues/1206#issuecomment-546652291

[00:59] <AlexDaniel> japhb: I'd appreciate if you can test it and get back to me

[01:22] *** Kaiepi left
[01:22] *** Kaiepi joined
[01:24] *** AlexDani` joined
[01:29] *** AlexDaniel left
[01:30] *** AlexDani` is now known as AlexDaniel

[01:30] *** AlexDaniel left
[01:30] *** AlexDaniel joined
[02:25] <japhb> AlexDaniel: Sorry, lost connectivity for a while.  Taking a look at your link.

[02:26] <japhb> Hmmm, OK, will try using earlier zef.  Strange that that would work, but *shrug*

[03:34] *** squashable6 left
[03:35] *** squashable6 joined
[04:35] *** notable6 left
[04:35] *** releasable6 left
[04:35] *** squashable6 left
[04:35] *** evalable6 left
[04:35] *** tellable6 left
[04:35] *** greppable6 left
[04:35] *** unicodable6 joined
[04:35] *** quotable6 joined
[04:36] *** bisectable6 joined
[04:37] *** squashable6 joined
[04:37] *** statisfiable6 joined
[04:37] *** notable6 joined
[04:37] *** shareable6 joined
[04:37] *** greppable6 joined
[04:37] *** reportable6 joined
[04:37] *** coverable6 joined
[04:38] *** bloatable6 joined
[04:38] *** tellable6 joined
[04:38] *** benchable6 joined
[04:38] *** committable6 joined
[04:38] *** evalable6 joined
[04:38] *** releasable6 joined
[04:38] *** nativecallable6 joined
[06:37] *** unicodable6 left
[06:37] *** releasable6 left
[06:37] *** nativecallable6 left
[06:37] *** tellable6 left
[06:37] *** notable6 left
[06:37] *** greppable6 left
[06:37] *** reportable6 left
[06:37] *** quotable6 left
[06:37] *** statisfiable6 left
[06:37] *** bisectable6 left
[06:37] *** coverable6 left
[06:37] *** shareable6 left
[06:37] *** evalable6 left
[06:37] *** benchable6 left
[06:37] *** bloatable6 left
[06:37] *** committable6 left
[06:37] *** squashable6 left
[06:38] *** benchable6 joined
[06:38] *** committable6 joined
[06:38] *** releasable6 joined
[06:38] *** quotable6 joined
[06:38] *** squashable6 joined
[06:38] *** statisfiable6 joined
[06:39] *** notable6 joined
[06:39] *** bisectable6 joined
[06:39] *** bloatable6 joined
[06:39] *** coverable6 joined
[06:39] *** tellable6 joined
[06:39] *** evalable6 joined
[06:39] *** unicodable6 joined
[06:39] *** shareable6 joined
[06:39] *** nativecallable6 joined
[06:40] *** reportable6 joined
[06:40] *** greppable6 joined
[07:46] <japhb> AlexDaniel: Added comment to bug.  zef 0.7.4 worked first try; I'm a bit worried that this means the newer zef was revealing a real problem in rakudo, and the older one just doesn't happen to trigger the bug.

[07:46] <japhb> But at least now I have a workaround for my immediate issue.

[07:57] *** ExtraCrispy left
[08:05] <MasterDuke> huh. if i do `zef --list installed` i get a bunch of identities. but if i then do `zef uninstall <any of the previously listed identities>` i get "!!!> Found no matching candidates to uninstall"

[08:06] <MasterDuke> even for ones where it's just a single bare word (i.e., no ver, auth, or api specified)

[10:40] <MasterDuke> pmurias: ah, `./nqp-j nqp-truffle.nqp -e 'sub foo() { say("hi") }; my $a := &foo; nqp::setcodename($a, "bar"); say(nqp::getcodename($a))'` prints "bar". so when i explicitly call nqp::setcodename then nqp::getcodename works

[10:40] <tellable6> MasterDuke, I'll pass your message to pmurias

[10:49] <MasterDuke> hm, so does moarvm call setcodename when creating a sub? or does the name get set some other way?

[10:50] <MasterDuke> also works on regular jvm without explicitly calling setcodename...

[10:58] *** ExtraCrispy joined
[11:01] *** redable joined
[11:12] *** ExtraCrispy left
[11:13] *** redable left
[11:20] <MasterDuke> ah, for the regular jvm version it's part of the CodeRef constructor

[11:21] *** ExtraCrispy joined
[11:30] <[Tux]> Rakudo version 2019.07.1-449-gefd7146c4 - MoarVM version 2019.07.1-305-g71af77b5c

[11:30] <[Tux]> csv-test-xs-20      0.423 -  0.431

[11:30] <[Tux]> csv-ip5xs           0.720 -  0.760

[11:30] <[Tux]> test-t --race       0.832 -  0.859

[11:30] <[Tux]> test-t              1.749 -  1.880

[11:30] <[Tux]> csv-ip5xs-20        6.311 -  6.678

[11:30] <[Tux]> test                7.105 -  7.162

[11:31] <[Tux]> test-t-20 --race    9.413 - 11.174

[11:31] <[Tux]> csv-parser         21.299 - 21.445

[11:31] <[Tux]> test-t-20          29.966 - 31.959

[11:45] *** redable joined
[11:52] *** redable left
[12:58] *** ExtraCrispy left
[13:01] <Geth_> ¦ nqp/truffle: 5d88bd949a | (Daniel Green)++ | 4 files

[13:01] <Geth_> ¦ nqp/truffle: [truffle] Implement (g|s)etcodename

[13:01] <Geth_> ¦ nqp/truffle: 

[13:01] <Geth_> ¦ nqp/truffle: However, currently getcodename only works if you've explicitly called

[13:01] <Geth_> ¦ nqp/truffle: setcodename on the code ref first. Setting the name needs to be added to

[13:01] <Geth_> ¦ nqp/truffle: the NQPCodeRef constructor (which is easy), but actually getting a real

[13:01] <Geth_> ¦ nqp/truffle: value to put in there I haven't figured out how to do yet, and may

[13:01] <Geth_> ¦ nqp/truffle: require implementing something like CodeRefAnnotation in/for truffle.

[13:01] <Geth_> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/5d88bd949a

[13:15] *** squashable6 left
[13:16] *** squashable6 joined
[13:16] <MasterDuke> hm. the truffle currently has a couple different types of blocks it creates (Block, StaticBlock, ForcedOuterBlock). i somehow need to know when a block is a sub or method vs a non-named block

[13:21] *** lucasb joined
[13:27] <MasterDuke> is that going to be a new block type? or a new constructor to the existing type(s)?

[13:33] <MasterDuke> oh, nqp creates a regular block, but just binds a new lexical with the sub's name?

[13:34] *** ggoebel left
[14:12] <samcv> wondering if anyone can help me a bit with this code. i am getting 'This type (List) does not support positional operations' which is an error created by MoarVM. it says it happened on line 47, but i don't think the number is telling the truth, because when i add print statements it's not there the error in generated

[14:12] <samcv> this file https://cry.nu/p/z6df/

[14:18] <samcv>               my $pattern-prepends := nqp::atpos($pattern-parts, 0); is i guess where the warning where it came from, wondering if there is a better way other than putting prints every other line

[14:34] *** evalable6 left
[14:36] *** evalable6 joined
[15:13] *** evalable6_ joined
[15:13] *** evalable6_ left
[15:15] *** tellable6 left
[15:15] *** evalable6 left
[15:16] *** tellable6 joined
[15:16] *** evalable6 joined
[15:18] <timotimo> samcv: you probably need to get the $!reified or whatever attribute of the object

[15:19] <timotimo> line numbers with heavily nqp-ified code are often not right

[15:19] <timotimo> so even if you can breakpoint the error position in gdb, the stacktrace isn't very helpful. but maybe MVM_dump_bytecode(tc) can help

[15:23] *** Voldenet left
[15:28] *** Voldenet joined
[15:28] *** Voldenet left
[15:28] *** Voldenet joined
[15:35] <samcv> timotimo, i think it's because i have a helper `sub get-parts`, so it turns into a p6 object. is there a way I can have a sub but without p6ifying it?

[15:35] <timotimo> is there something like nqp::invoke?

[15:35] <timotimo> i think using nqp ops to invoke something was in some circumstance the right way to prevent hllization of arguments

[15:39] <samcv> timotimo, hmm. there is nqp::callmethod. but idk about subs?

[15:39] <samcv> maybe nqp::getlexcaller('&get-parts') and nqp::call?

[15:40] <timotimo> i'd have to try myself, but i'm working on other moar stuff right now

[15:40] <samcv> it's refered to once in the callmethod nqp routine, but not documented in ops.markdown

[16:08] <timotimo> how do i even compile. and how do i read bytecode. and why am i deadly tired even after having an energy drink

[16:10] <timotimo> ahahaha, it helps to run the code you're working on instead of the version you had installed

[16:14] <AlexDaniel> kawaii: hello? :)

[16:43] *** pmurias joined
[16:43] <pmurias> timotimo: hllization of arguments is done on the callee side

[16:44] <tellable6> https://gist.github.com/039252fe424dce2572060223c0ca373d

[16:44] <timotimo> ah dang

[16:45] <AlexDaniel> so what's the actual limit

[16:45] <AlexDaniel> 01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345

[16:45] <AlexDaniel> wow that fits

[16:45] <AlexDaniel> 01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345

[16:58] <AlexDaniel> 01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345

[16:58] <AlexDaniel> .seen AlexDaniel

[16:58] <tellable6> AlexDaniel, https://gist.github.com/927fb3e211ddc3a344dd5d3b94553be4

[17:00] <pmurias> MasterDuke: the name of the block is on QAST::Block as name

[17:08] <pmurias> MasterDuke: anonymous blocks just get a "" name 

[17:56] <MasterDuke> pmurias: i see NQPCodeRefs getting created at https://github.com/perl6/nqp/blob/truffle/src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/control/NQPBlockNode.java#L17 and https://github.com/perl6/nqp/blob/truffle/src/vm/jvm/runtime/org/perl6/nqp/truffle/ManageScopes.java#L79,91,100

[17:58] <MasterDuke> but i don't know where to get a name from to add to those calls (assuming i add a name parameter to the NQPCodeRef constructor)

[18:16] * pmurias looks into that

[18:17] * japhb has discovered that ... GAH! ... the incredibly infuriating crash he beat on for hours was actually a trivially testable precomp bug.

[18:18] <japhb> Except by "trivially testable" I mean "take the original script, copy it entirely into a module, change sub MAIN to `is export`, then create a new script that contains only `use Module;` and nothing else, watch everything break, add `no precompilation;` to the module, watch everything work."

[18:19] <japhb> Now to figure out how to turn the several hundred line script, and the hundreds of lines of libraries *it* depends on, into a short test case.

[18:19] <japhb> :-P

[18:20] * japhb wonders if caffeine qualifies as "liquid courage"

[18:20] <pmurias> MasterDuke: you see the @Deserializer annotation? When we are deserializing TAST (see --target=tast) the things that's annotated with it gets the tast elements

[18:28] <japhb> AlexDaniel: Oh wait, my bug may actually be fixed.  It looks like the fix for MoarVM #1209 fixed Rakudo #2897 and we just need a bump?

[18:28] <japhb> Not sure that's the same problem as I'm facing, but it looks similar.

[18:35] <MasterDuke> pmurias: `Unknown compilation target 'tast'`

[18:38] *** tobs joined
[18:40] <MasterDuke> pmurias: ah-ha! i had my --target before the 'nqp-truffle.nqp'

[18:42] <pmurias> MasterDuke: so if you add $new_arg something to a TAST.new($type, [$op, $arg1, $arg2, $new_arg...]) in Truffle.nqp you than add need to add it to the thing with the corresponding @Deserializer

[18:46] <MasterDuke> pmurias: so i might need to do something like https://github.com/perl6/nqp/blob/truffle/src/vm/jvm/Truffle.nqp#L480-L485 somewhere?

[18:48] <MasterDuke> oh. or add a '$!name' here https://github.com/perl6/nqp/blob/truffle/src/vm/jvm/Truffle.nqp#L698-L736 ?

[19:03] <pmurias> MasterDuke: don't $!name to BlockInfo

[19:03] <pmurias> * don't add

[19:04] <pmurias> the name is available as $!qast.name if it's ever need from there

[19:05] <pmurias> (BlockInfo is stored in $*BLOCK and contains the stuff we infer about the block we are compiling) 

[19:06] <pmurias> MasterDuke: I would add it without wrapping it into an ['sval'] like https://github.com/perl6/nqp/blob/truffle/src/vm/jvm/Truffle.nqp#L1131

[19:07] <MasterDuke> thanks, i'll give that a try

[19:10] <pmurias> src/vm/jvm/dsl contains the code responsible for generating code from the @Deserializer annotations

[19:12] <pmurias> (if you are curious how that works but that's fairly boring code)

[19:16] <MasterDuke> should it be `@tree.push($node.name)` instead?

[19:19] <MasterDuke> this seems like it should be simple and i'm just not connecting some dots...

[19:23] <pmurias> MasterDuke: yes

[19:24] <MasterDuke> how come NQPBlockNodes don't have a name and cuid?

[19:26] <pmurias> names are just NYI

[19:27] <MasterDuke> ah, but that's where it belongs?

[19:29] <pmurias> MasterDuke: yes I would put add the name there

[19:29] <pmurias> s/put//

[19:30] <pmurias> the cuid isn't put on NQPCodeRef because that's not needed atm

[19:32] <MasterDuke> ah

[19:37] <MasterDuke> ok, so i've added a name (with default value of '') to NQPBlock and NQPCodeRef and now `./nqp-j nqp-truffle.nqp -e 'sub foo() { say("hi") }; my $a := &foo; say(nqp::getcodename($a))'` just prints that empty string instead of dying

[19:38] <Geth_> ¦ nqp: 40ffec8194 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/MOAR_REVISION

[19:38] <Geth_> ¦ nqp: [MoarVM Bump] Brings 5 commits

[19:38] <Geth_> ¦ nqp: 

[19:38] <Geth_> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2019.07.1-301-g769faa11c...2019.07.1-306-g0b531f9ce

[19:38] <Geth_> ¦ nqp: 0b531f9ce say hello to MVM_CONFPROG_DEBUG env var

[19:38] <Geth_> ¦ nqp: 71af77b5c Merge pull request #1209 from vrurg/rakudo_2897_fix

[19:38] <Geth_> ¦ nqp: 8a5cc88a7 Re-fix the previous fix

[19:38] <Geth_> ¦ nqp: af76729dc Fix incorrect conditional

[19:38] <Geth_> ¦ nqp: 59fa3b822 Fix for run-away CORE context on closures

[19:38] <Geth_> ¦ nqp: review: https://github.com/perl6/nqp/commit/40ffec8194

[19:38] <Geth_> ¦ rakudo: 7e3d023b4b | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/NQP_REVISION

[19:38] <Geth_> ¦ rakudo: [NQP Bump] 40ffec819 [MoarVM Bump] Brings 5 co […]

[19:38] <Geth_> ¦ rakudo: 

[19:38] <Geth_> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2019.07.1-156-g373a2965c...2019.07.1-157-g40ffec819

[19:38] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7e3d023b4b

[19:39] <MasterDuke> pmurias: so i somehow need to modify the generated create*Block() calls in bin/org/perl6/nqp/truffle/ByteCodeRunnerGen.java and bin/org/perl6/nqp/truffle/adapters/TruffleCompilerGen.java

[19:52] *** redable joined
[19:52] *** pmurias left
[19:53] <AlexDaniel> japhb: bumped, can you test it?

[19:54] <AlexDaniel> japhb: this is different from the zef issue, correct?

[19:54] *** pmurias joined
[19:55] <pmurias> MasterDuke: how do you want to modify that?

[19:56] <MasterDuke> pmurias: to add a name parameter. and just got it working

[19:56] <MasterDuke> `./nqp-j nqp-truffle.nqp -e 'sub foo() { say("hi") }; my $a := &foo; say(nqp::getcodename($a))'` now prints 'foo'

[19:56] <pmurias> awesome

[19:59] <MasterDuke> doing a (not so) quick run_tests.pl to confirm that didn't break anything...

[20:01] *** lucasb left
[20:01] <Geth_> ¦ nqp/truffle: a76b34f5e3 | (Daniel Green)++ | 5 files

[20:01] <Geth_> ¦ nqp/truffle: [truffle] Add support for a Block's name

[20:01] <Geth_> ¦ nqp/truffle: 

[20:01] <Geth_> ¦ nqp/truffle: nqp::getcodename now works without requiring nqp::setcodename to be

[20:01] <Geth_> ¦ nqp/truffle: explicitly called beforehand.

[20:01] <Geth_> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/a76b34f5e3

[20:01] <MasterDuke> pmurias: ^^^ please take a look and make sure i didn't do anything terrible

[20:05] <pmurias> MasterDuke: looks fine, thanks

[20:06] <Geth_> ¦ nqp/truffle: e99b653d3e | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/control/NQPBlockNode.java

[20:06] <Geth_> ¦ nqp/truffle: [truffle] Remove unused default value

[20:06] <Geth_> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/e99b653d3e

[20:07] <MasterDuke> cool

[20:09] <Geth_> ¦ nqp/truffle: 8b50ad70ee | (Paweł Murias)++ | 2 files

[20:09] <Geth_> ¦ nqp/truffle: [truffle] Turn fields that shouldn't be public into private ones

[20:09] <Geth_> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/8b50ad70ee

[20:13] *** pmurias left
[20:14] *** pmurias joined
[20:21] <MasterDuke> huh. why does an nqp version of jnthn's Point benchmark take 2s when the perl6 version takes 0.5s?

[20:27] *** Kaeipi joined
[20:28] *** Kaiepi left
[20:30] *** redable left
[20:36] <MasterDuke> pmurias: any idea how hard (bind|get)attr are going to be to implement?

[20:37] *** Kaiepi joined
[20:38] *** Kaeipi left
[20:45] <timotimo> MasterDuke: can you show your translation of it?

[20:46] <MasterDuke> 'class Point { has $!x; has $!y; method x() { $!x }; method y() { $!y } }; my $total := 0; my int $i := -1; while ++$i < 1000000 { my $p := Point.new(x => 2, y => 3); $total := $total + $p.x + $p.y; }; say($total)'

[20:47] <MasterDuke> a profile shows '6001010 call frames were entered' for it, and only '1072916 call frames were entered' for the perl6 version

[20:49] <timotimo> m: say 6001010 / 1072916

[20:49] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «5.5931778␤»

[20:50] <timotimo> whew

[20:50] <timotimo> a speshlog of the nqp version may show what wasn't being inlined

[20:53] *** Kaiepi left
[20:55] *** [Coke] left
[20:55] <MasterDuke> "could not inline 'MATCH' (138) candidate 0: bytecode is too large to inline"

[20:56] <MasterDuke> "could not inline 'prepare-hash' (17) candidate 0: bytecode is too large to inline"

[20:56] <pmurias> MasterDuke: for the truffle part that will mostly be hooking stuff up to DynamicObject

[20:57] <MasterDuke> ./src/vm/jvm/runtime/org/perl6/nqp/truffle/runtime/DynamicContext.java ?

[20:59] <pmurias> nope, we use https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/object/DynamicObject.html

[21:00] <MasterDuke> ah

[21:00] <pmurias> P6opaque instances end up DynamicObjects in truffle

[21:00] <pmurias> * in nqp-truffle

[21:00] *** Kaiepi joined
[21:01] <pmurias> https://lafo.ssw.uni-linz.ac.at/pub/papers/2016_PLDI_Truffle.pdf this has info how objects are supposed to be implemented

[21:02] <pmurias> (search for DynamicObject) in it

[21:02] <MasterDuke> wait, what's this then? https://github.com/perl6/nqp/blob/truffle/src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/sixmodel/NQPAttributeBindNode.java

[21:03] <timotimo> MasterDuke: that looks a little like stuff from the compiler rather than the main run; wonder what's going on with the main loop part then

[21:04] <pmurias> MasterDuke: that's a partially correct and unoptimized implemantion of setting an attribute

[21:04] <pmurias> MasterDuke: it's emitted as attribute-bind if you search for it in Truffle.nqp

[21:05] <MasterDuke> pmurias: ah. should it be expanded/optimized? or something new written? 

[21:05] <MasterDuke> pmurias: but it could serve as nqp::bindattr right now?

[21:06] <pmurias> MasterDuke: yes, an incorrect and slow one

[21:07] *** [Coke] joined
[21:07] <MasterDuke> timotimo: i see 'x', and 'y', and 'new' being optimized. the after does look better (but i couldn't say if better enough)

[21:07] <timotimo> if they aren't inlined, that'd be bad :)

[21:08] <timotimo> for the scalar replacement to happen, the value in question must not escape

[21:08] <timotimo> calling a method on it without it being inlined, that'll be an escape

[21:09] <MasterDuke> there's only one 'inline of' in the spesh log and it says "inline of '!reduce' (94) candidate 0"

[21:10] *** Kaiepi left
[21:11] <MasterDuke> setting MVM_SPESH_NODELAY=1 causes a lot more inlines. but isn't any faster

[21:13] <pmurias> MasterDuke: that node can't be directly used for nqp::bindattr

[21:13] <pmurias> MasterDuke: because nqp::bindattr can take a classHandle/name computed at runtime

[21:13] *** Kaiepi joined
[21:14] <MasterDuke> timotimo: but most of those attempted inlines cause a 'could not inline <foo> : bytecode is too large to inline'

[21:15] *** [Coke] left
[21:16] <pmurias> MasterDuke: but the way it sets attributes is fine for now just to get tests working

[21:16] * pmurias is fairly confused today and likely needs sleep to get back to thinking clearly

[21:17] <timotimo> MasterDuke: the new method of the object isn't inlined

[21:17] <MasterDuke> same here. don't think i'm going to get anything more than that Block name business done this evening

[21:17] <timotimo> can you try giving it an explicit new method?

[21:20] *** [Coke] joined
[21:22] <MasterDuke> 'class Point { has $!x; has $!y; method new(:$x, :$y) { my $obj := nqp::create(self); nqp::bindattr($obj, Point, q|$!x|, $x); nqp::bindattr($obj, Point, q|$!y|, $y); $obj; }; method x() { $!x }; method y() { $!y } }; my $total := 0; my int $i := -1; while ++$i < 1000000 { my $p := Point.new(x => 2, y => 3); $total := $total + $p.x + $p.y; };

[21:22] <MasterDuke> say($total)'

[21:22] <MasterDuke> that takes 0.1s

[21:23] <MasterDuke> '8639 call frames were entered'

[21:27] <timotimo> good

[21:28] <timotimo> try using bindattrinvres to have a tiny bit better code

[21:30] <MasterDuke> that's just a rakudo thing

[21:32] <MasterDuke> fwiw, if you up the repetitions to 10000000 (add a 0), the moarvm backend takes 0.51s and the (regular) jvm backend takes 3.5s

[21:35] *** pmurias left
[21:42] *** pmurias joined
[21:52] *** brrt joined
[22:00] <MasterDuke> pmurias: btw, i just built the js nqp backend, but it complains `/home/dan/Source/perl6/nqp/src/vm/js/nqp-runtime/runtime.js:201          throw e;          ^Unsupported serialization format version: 22` if i try to run anything

[22:08] <MasterDuke> pmurias: i just changed the value on this line (https://github.com/perl6/nqp/blob/master/src/vm/js/nqp-runtime/deserialization.js#L543) to 22 and the code ran fine

[22:09] <MasterDuke> at 10000000 repetitions the js backend takes 19s

[22:34] <pmurias> MasterDuke: I'll update the js to handle the new serialization format changes tommorow

[22:34] <MasterDuke> cool

[22:46] *** brrt left
[22:49] *** pmurias left
[23:33] *** Kaiepi left
[23:34] *** Kaiepi joined
[23:44] <vrurg> greppable6: X::Caller::NotDynamic

[23:44] <greppable6> vrurg, 5 lines, 2 modules: https://gist.github.com/1636cf388191ae9d636022d1e4770423

