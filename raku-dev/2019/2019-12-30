[00:18] *** |Tux| left
[00:29] *** |Tux| joined
[00:32] *** bartolin left
[00:32] *** bartolin joined
[00:41] *** sena_kun left
[00:56] *** sena_kun joined
[01:21] *** Voldenet left
[01:26] *** Voldenet joined
[01:26] *** Voldenet left
[01:26] *** Voldenet joined
[01:58] <Geth_> ¦ roast: vrurg++ created pull request #608: Test for export of long names

[01:58] <Geth_> ¦ roast: review: https://github.com/perl6/roast/pull/608

[02:42] *** sena_kun left
[02:56] *** sena_kun joined
[03:56] *** quotable6 left
[03:56] *** shareable6 left
[03:56] *** benchable6 left
[03:56] *** nativecallable6 left
[03:56] *** committable6 left
[03:56] *** sourceable6 left
[03:56] *** bloatable6 left
[03:56] *** unicodable6 left
[03:56] *** statisfiable6 left
[03:56] *** releasable6 left
[03:56] *** reportable6 left
[03:56] *** greppable6 left
[03:56] *** notable6 left
[03:56] *** bisectable6 left
[03:56] *** coverable6 left
[03:56] *** squashable6 left
[03:57] *** unicodable6 joined
[03:57] *** shareable6 joined
[03:57] *** bisectable6 joined
[03:57] *** nativecallable6 joined
[03:57] *** statisfiable6 joined
[03:57] *** notable6 joined
[03:57] *** reportable6 joined
[03:58] *** sourceable6 joined
[03:58] *** committable6 joined
[03:58] *** coverable6 joined
[03:58] *** benchable6 joined
[03:58] *** quotable6 joined
[03:59] *** greppable6 joined
[03:59] *** squashable6 joined
[03:59] *** releasable6 joined
[03:59] *** bloatable6 joined
[04:41] *** sena_kun left
[04:56] *** sena_kun joined
[05:35] *** Voldenet left
[05:41] *** Voldenet joined
[05:41] *** Voldenet left
[05:41] *** Voldenet joined
[06:41] *** sena_kun left
[06:55] *** sena_kun joined
[07:21] *** Xliff left
[08:00] *** squashable6 left
[08:03] *** squashable6 joined
[08:08] *** Voldenet left
[08:14] *** Voldenet joined
[08:14] *** Voldenet left
[08:14] *** Voldenet joined
[08:18] *** Voldenet left
[08:19] *** squashable6 left
[08:20] *** squashable6 joined
[08:23] *** Voldenet joined
[08:23] *** Voldenet left
[08:23] *** Voldenet joined
[08:38] <lizmat> Files=1294, Tests=109635, 209 wallclock secs (28.23 usr  8.32 sys + 2952.08 cusr 269.24 csys = 3257.87 CPU)

[08:42] *** sena_kun left
[08:57] *** sena_kun joined
[09:18] <Geth_> ¦ rakudo: a3afde6037 | (Elizabeth Mattijsen)++ | 6 files

[09:18] <Geth_> ¦ rakudo: Re-imagine val() handling

[09:18] <Geth_> ¦ rakudo: 

[09:18] <Geth_> ¦ rakudo: This replaces the old val() handling by a completely re-imagined version that

[09:18] <Geth_> ¦ rakudo: caters to the way that Raku is being optimized.  The goal was to reach an

[09:18] <Geth_> ¦ rakudo: overall speed increase of 2x, but this was not achieved.  But this commit makes

[09:18] <Geth_> ¦ rakudo: val handling more correct, and about 2x faster in the most common case, namely

[09:18] <Geth_> ¦ rakudo: that *no* number is encountered.  Which helps at every startup, as each %*ENV

[09:18] <Geth_> ¦ rakudo: <…commit message has 39 more lines…>

[09:18] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a3afde6037

[09:20] <lizmat> so, that's out of my system

[09:24] <Geth_> ¦ nqp: d69855343c | (Stefan Seifert)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp

[09:24] <Geth_> ¦ nqp: Fix "Decoder may not be used concurrently" errors with concurrent EVAL

[09:24] <Geth_> ¦ nqp: 

[09:24] <Geth_> ¦ nqp: String decoders are stateful objects, so sharing one between concurrently

[09:24] <Geth_> ¦ nqp: running compilers has never been a good idea. Give every MAST compiler its

[09:24] <Geth_> ¦ nqp: own latin1decoder to avoid concurrency issues.

[09:24] <Geth_> ¦ nqp: review: https://github.com/perl6/nqp/commit/d69855343c

[09:44] *** AlexDaniel left
[09:44] *** AlexDaniel joined
[09:44] *** AlexDaniel left
[09:44] *** AlexDaniel joined
[10:09] *** titsuki joined
[10:43] *** sena_kun left
[10:55] *** sena_kun joined
[11:02] *** squashable6 left
[11:04] *** squashable6 joined
[11:33] *** Voldenet left
[11:38] *** Voldenet joined
[11:38] *** Voldenet left
[11:38] *** Voldenet joined
[12:30] <Geth_> ¦ roast: fd2c4ad9c5 | usev6++ | S17-procasync/stress.t

[12:30] <Geth_> ¦ roast: [JVM] Skip hanging test

[12:30] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/fd2c4ad9c5

[12:41] *** sena_kun left
[12:57] *** sena_kun joined
[13:18] <lizmat> what would be a good way to benchmark Supply.lines ?

[14:40] *** sena_kun left
[14:57] *** sena_kun joined
[15:05] *** Xliff joined
[15:47] *** rba[m] left
[15:50] *** lucasb joined
[16:34] <moritz> lizmat: you could cycle through an array of strings, some containing newlines and some not, and feed them to the supplier

[16:41] *** sena_kun left
[16:56] *** sena_kun joined
[17:21] <lizmat> moritz: I came up with my int $a; ("words".IO.slurp x 5).Supply.lines.tap: { ++$a }; dd $a

[18:14] <Geth_> ¦ rakudo: aea2a36ce0 | (Elizabeth Mattijsen)++ | src/core.c/control.pm6

[18:14] <Geth_> ¦ rakudo: Make emit about 30% faster

[18:14] <Geth_> ¦ rakudo: 

[18:14] <Geth_> ¦ rakudo: From what I can gather from a --profile.  Before, an "emit/THROW" combo

[18:14] <Geth_> ¦ rakudo: would take 588 msecs in a benchmark, and after the "emit" by itself takes

[18:14] <Geth_> ¦ rakudo: 442 msecs.  Since this is pretty hot code in Supply handling, thought that

[18:14] <Geth_> ¦ rakudo: every little bit counts.

[18:14] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aea2a36ce0

[18:26] *** patrickb joined
[18:26] *** AlexDani` joined
[18:29] *** AlexDaniel left
[18:42] *** sena_kun left
[18:56] *** sena_kun joined
[19:44] *** stoned75 left
[20:31] <Geth_> ¦ rakudo: a91813d017 | (Elizabeth Mattijsen)++ | src/core.c/control.pm6

[20:31] <Geth_> ¦ rakudo: Make `take foo` about 20% faster

[20:31] <Geth_> ¦ rakudo: 

[20:31] <Geth_> ¦ rakudo: By not using the helper THROW sub, but instead do all of the stuff

[20:31] <Geth_> ¦ rakudo: inside `take`.

[20:31] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a91813d017

[20:41] *** sena_kun left
[20:45] <Geth_> ¦ rakudo: 533a2ad9e9 | (Elizabeth Mattijsen)++ | src/core.c/control.pm6

[20:45] <Geth_> ¦ rakudo: Make `take-rw foo` about 20% faster

[20:45] <Geth_> ¦ rakudo: 

[20:45] <Geth_> ¦ rakudo: By not using the helper THROW sub, but instead do all of the stuff

[20:45] <Geth_> ¦ rakudo: inside `take-rw`.  Also fix containerization issue that I noticed in

[20:45] <Geth_> ¦ rakudo: `take` while working on `take-rw`.

[20:45] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/533a2ad9e9

[20:55] *** Xliff left
[20:56] *** sena_kun joined
[21:05] <Geth_> ¦ rakudo: e1aaa83cc1 | (Elizabeth Mattijsen)++ | src/core.c/control.pm6

[21:05] <Geth_> ¦ rakudo: Make `take foo, bar` about 60% faster

[21:05] <Geth_> ¦ rakudo: 

[21:05] <Geth_> ¦ rakudo: By not using the helper THROW or RETURN-LIST subs, but instead do all

[21:05] <Geth_> ¦ rakudo: of the stuff inside `take`.  Which could be made a lot simpler, as that

[21:05] <Geth_> ¦ rakudo: candidate can only be called if there is more than one parameter, so

[21:05] <Geth_> ¦ rakudo: the whole check for number of elements was not necessary.

[21:05] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e1aaa83cc1

[21:10] <vrurg> lizmat: t/spectest.data.6.c is not used anymore. All tests are in t/spec/spectest.data

[21:11] <vrurg> I think it is time to remove the file as confusing. It was left there for transition period as some tooling might have depend on it.

[21:13] * vrurg has added the test into the right place.

[21:15] <Geth_> ¦ rakudo: bed716bed2 | (Elizabeth Mattijsen)++ | src/core.c/control.pm6

[21:15] <Geth_> ¦ rakudo: Make `take-rw foo, bar` about 60% faster

[21:15] <Geth_> ¦ rakudo: 

[21:15] <Geth_> ¦ rakudo: Same way as `take foo, bar`.

[21:15] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bed716bed2

[21:22] *** squashable6 left
[21:24] *** squashable6 joined
[21:33] *** |Tux| left
[21:36] <Geth_> ¦ rakudo: 63f117502a | (Elizabeth Mattijsen)++ | src/core.c/control.pm6

[21:36] <Geth_> ¦ rakudo: Make `succeed foo` 30% and `succeed foo,bar` 60% faster

[21:36] <Geth_> ¦ rakudo: 

[21:36] <Geth_> ¦ rakudo: A rince a repeat of the `take` optimizations

[21:36] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/63f117502a

[21:54] *** Xliff joined
[22:12] *** lucasb left
[22:27] *** |Tux| joined
[22:41] <dogbert11>     not ok 146 - parsed literal == val()   [.08548480145036831822e-304]

[22:41] <dogbert11>     # Failed test 'parsed literal == val()   [.08548480145036831822e-304]'

[22:41] <dogbert11>     # at t/spec/S32-num/stress.t line 43

[22:41] *** sena_kun left
[22:57] *** sena_kun joined
[23:23] <Geth_> ¦ rakudo: ee1b9918ce | (Patrick Böker)++ | 5 files

[23:23] <Geth_> ¦ rakudo: Add MacOS binary release files and Perl 6 -> Raku renames

[23:23] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ee1b9918ce

[23:24] *** patrickb left
[23:34] <Geth_> ¦ rakudo: 5162e6f5a3 | (Elizabeth Mattijsen)++ | 7 files

[23:34] <Geth_> ¦ rakudo: Remove now useless THROW helper sub

[23:34] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5162e6f5a3

