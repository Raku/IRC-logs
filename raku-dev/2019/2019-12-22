[00:52] <Geth_> ¦ roast: tbrowder++ created pull request #604: New test for pod leading declarator user-format capability

[00:52] <Geth_> ¦ roast: review: https://github.com/perl6/roast/pull/604

[00:53] <Geth_> ¦ roast: 945b67793d | (Tom Browder)++ (committed using GitHub Web editor) | 2 files

[00:53] <Geth_> ¦ roast: New test for pod leading declarator user-format capability (#604)

[00:53] <Geth_> ¦ roast: 

[00:53] <Geth_> ¦ roast: * Add test for user-formatted pod leading declarator blocks

[00:53] <Geth_> ¦ roast: 

[00:53] <Geth_> ¦ roast: * Correct test for new pod leading decl user-format capability\n\nadd it to the list of required tests

[00:53] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/945b67793d

[01:20] *** Altai-man_ joined
[01:23] *** sena_kun left
[01:57] *** kalkin-- joined
[02:01] *** kalkin- left
[03:01] *** bisectable6 left
[03:01] *** sourceable6 left
[03:01] *** benchable6 left
[03:01] *** nativecallable6 left
[03:01] *** releasable6 left
[03:01] *** committable6 left
[03:01] *** bloatable6 left
[03:01] *** statisfiable6 left
[03:01] *** squashable6 left
[03:01] *** reportable6 left
[03:01] *** greppable6 left
[03:01] *** quotable6 left
[03:01] *** coverable6 left
[03:01] *** shareable6 left
[03:01] *** unicodable6 left
[03:01] *** notable6 left
[03:02] *** nativecallable6 joined
[03:02] *** bisectable6 joined
[03:02] *** greppable6 joined
[03:02] *** coverable6 joined
[03:02] *** benchable6 joined
[03:03] *** statisfiable6 joined
[03:03] *** quotable6 joined
[03:03] *** sourceable6 joined
[03:03] *** unicodable6 joined
[03:03] *** shareable6 joined
[03:03] *** releasable6 joined
[03:03] *** notable6 joined
[03:03] *** committable6 joined
[03:04] *** squashable6 joined
[03:04] *** bloatable6 joined
[03:04] *** reportable6 joined
[03:21] *** sena_kun joined
[03:23] *** Altai-man_ left
[03:41] <Geth_> ¦ rakudo: vrurg++ created pull request #3375: Fix the order of DESTROY invocation.

[03:41] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3375

[03:52] <Geth_> ¦ roast: vrurg++ created pull request #605: Adjust tests to correspond with fixed DESTROY order

[03:52] <Geth_> ¦ roast: review: https://github.com/perl6/roast/pull/605

[03:58] <Geth_> ¦ roast: vrurg++ created pull request #606: Adjust tests to correspond with fixed DESTROY order (fixed)

[03:58] <Geth_> ¦ roast: review: https://github.com/perl6/roast/pull/606

[04:02] *** benjif1 joined
[04:03] *** benjif1 left
[04:16] <Geth_> ¦ rakudo: f2a416133f | (Vadim Belman)++ | src/Perl6/Metamodel/Finalization.nqp

[04:16] <Geth_> ¦ rakudo: Fix the order of DESTROY invocation.

[04:16] <Geth_> ¦ rakudo: 

[04:16] <Geth_> ¦ rakudo: Make it correspond to S12-construction/destruction.t, i.e. from subclass

[04:16] <Geth_> ¦ rakudo: to parent classes; or, in other wosrds, reverse to (R)MRO.

[04:16] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f2a416133f

[04:16] <Geth_> ¦ rakudo: 9a571b6851 | (Vadim Belman)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/Finalization.nqp

[04:17] <Geth_> ¦ rakudo: Merge pull request #3375 from vrurg/fix-DESTROY-order

[04:17] <Geth_> ¦ rakudo: 

[04:17] <Geth_> ¦ rakudo: Fix the order of DESTROY invocation.

[04:17] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9a571b6851

[04:17] <Geth_> ¦ roast: 30329959d0 | (Vadim Belman)++ | S12-construction/destruction.t

[04:17] <Geth_> ¦ roast: Unfudge test for destruction.

[04:17] <Geth_> ¦ roast: 

[04:17] <Geth_> ¦ roast: The order is now fixed.

[04:17] <Geth_> ¦ roast: 

[04:17] <Geth_> ¦ roast: Also, change the test to remove deprecated `undefine` and to base test

[04:17] <Geth_> ¦ roast: result not on fixed number of loops but on some physical timeout (5

[04:17] <Geth_> ¦ roast: seconds as for now). This way I seemingly got rid of test flapping.

[04:17] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/30329959d0

[04:17] <Geth_> ¦ roast: 596695790e | (Vadim Belman)++ | S12-construction/roles-6e.t

[04:17] <Geth_> ¦ roast: Fix test for destructors in roles

[04:17] <Geth_> ¦ roast: 

[04:17] <Geth_> ¦ roast: It was based on incorrect direct order whereas in fact it must use

[04:17] *** vrurg_ is now known as vrurg

[04:17] <Geth_> ¦ roast: reverse order to constructors. Also, test is now based on physical

[04:17] <Geth_> ¦ roast: timeout of 5 seconds to detect a destructors invocation.

[04:17] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/596695790e

[04:17] <Geth_> ¦ roast: 4e5c8a8d20 | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[04:17] <Geth_> ¦ roast: Merge pull request #606 from vrurg/fix-DESTROY-order

[04:17] <Geth_> ¦ roast: 

[04:17] <Geth_> ¦ roast: Adjust tests to correspond with fixed DESTROY order (fixed)

[04:17] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/4e5c8a8d20

[04:33] *** AlexDaniel joined
[04:33] *** AlexDaniel left
[04:33] *** AlexDaniel joined
[05:20] *** Altai-man_ joined
[05:23] *** sena_kun left
[06:23] *** statisfiable6 left
[06:23] *** benchable6 left
[06:23] *** quotable6 left
[06:23] *** shareable6 left
[06:23] *** greppable6 left
[06:23] *** coverable6 left
[06:23] *** bisectable6 left
[06:23] *** committable6 left
[06:23] *** bloatable6 left
[06:23] *** unicodable6 left
[06:23] *** squashable6 left
[06:23] *** nativecallable6 left
[06:23] *** sourceable6 left
[06:23] *** releasable6 left
[06:23] *** notable6 left
[06:23] *** reportable6 left
[06:23] *** notable6 joined
[06:23] *** bisectable6 joined
[06:23] *** nativecallable6 joined
[06:23] *** committable6 joined
[06:23] *** squashable6 joined
[06:24] *** quotable6 joined
[06:24] *** statisfiable6 joined
[06:24] *** bloatable6 joined
[06:24] *** unicodable6 joined
[06:25] *** benchable6 joined
[06:25] *** greppable6 joined
[06:25] *** releasable6 joined
[06:25] *** coverable6 joined
[06:25] *** sourceable6 joined
[06:25] *** reportable6 joined
[06:26] *** shareable6 joined
[07:21] *** sena_kun joined
[07:23] *** Altai-man_ left
[07:58] *** AlexZahatski joined
[08:00] *** AlexZahatski is now known as Zag

[08:00] *** Zag is now known as aZag

[08:32] *** aZag left
[08:40] *** AlexDani` joined
[08:43] *** AlexDaniel left
[08:49] *** AlexDani` is now known as AlexDaniel

[08:49] *** AlexDaniel left
[08:49] *** AlexDaniel joined
[09:20] *** Altai-man_ joined
[09:23] *** sena_kun left
[09:58] *** kalkin-- is now known as kalkin0-

[09:58] *** kalkin0- is now known as kalkin-

[11:02] <lizmat> Files=1294, Tests=109647, 209 wallclock secs (28.19 usr  8.29 sys + 2952.50 cusr 265.87 csys = 3254.85 CPU)

[11:21] *** sena_kun joined
[11:23] *** Altai-man_ left
[11:39] *** masak_ is now known as masak

[12:47] <[Tux]> Rakudo version 2019.11-291-g9a571b685 - MoarVM version 2019.11-97-geb13ccad1

[12:47] <[Tux]> csv-test-xs-20      0.419 -  0.439

[12:47] <[Tux]> csv-ip5xs           0.744 -  0.790

[12:47] <[Tux]> test-t --race       0.846 -  0.901

[12:47] <[Tux]> test-t              1.896 -  1.940

[12:47] <[Tux]> csv-ip5xs-20        6.484 -  6.854

[12:47] <[Tux]> test                7.368 -  7.928

[12:47] <[Tux]> test-t-20 --race    9.205 -  9.292

[12:47] <[Tux]> csv-parser         22.909 - 23.190

[12:47] <[Tux]> test-t-20          29.917 - 31.402

[13:20] *** Altai-man_ joined
[13:23] *** sena_kun left
[13:42] *** bobv joined
[14:59] *** [Tux] left
[15:06] *** [Tux] joined
[15:21] *** sena_kun joined
[15:23] *** Altai-man_ left
[15:47] *** leont joined
[16:15] *** bobv left
[17:21] *** Altai-man_ joined
[17:22] *** sena_kun left
[18:43] *** evalable6 left
[18:44] *** evalable6 joined
[19:20] *** sena_kun joined
[19:23] *** Altai-man_ left
[20:46] <sena_kun> rba++

[20:47] *** Xliff joined
[20:49] <Geth_> ¦ rakudo/release-2019.12: 9806457202 | Altai-man++ | docs/announce/2019.12.md

[20:49] <Geth_> ¦ rakudo/release-2019.12: Fix year

[20:49] <Geth_> ¦ rakudo/release-2019.12: review: https://github.com/rakudo/rakudo/commit/9806457202

[21:20] *** Altai-man_ joined
[21:23] *** sena_kun left
[21:49] <lizmat> m: dd 0x_11

[21:49] <camelia> rakudo-moar 672c5d403: OUTPUT: «17␤»

[21:50] <lizmat> m: dd :16<_11>

[21:50] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed radix number␤at <tmp>:1␤------> 3dd :16<7⏏5_11>␤    expecting any of:␤        number in radix notation␤»

[21:50] <lizmat> can someone explain me the rationale of this difference ?

[21:50] <lizmat> I think either both should be an error, or both should be ok

[21:50] <lizmat> jnthn:  ^^  ??

[22:01] <jnthn> m: say 1_2

[22:01] <camelia> rakudo-moar 672c5d403: OUTPUT: «12␤»

[22:01] <jnthn> m: say _12

[22:01] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    _12 used at line 1␤␤»

[22:01] <jnthn> m: say 12_

[22:01] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say 127⏏5_␤»

[22:02] <jnthn> Those semantics (_ must be internal - between digits) match how I expected it to work. It's a little odd it allows a _ right after the x

[22:02] <jnthn> m: say 0x12_

[22:02] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say 0x12_7⏏5<EOL>␤»

[22:02] <jnthn> m: say 0x1_2

[22:02] <camelia> rakudo-moar 672c5d403: OUTPUT: «18␤»

[22:02] <jnthn> m: say 0x_12

[22:02] <camelia> rakudo-moar 672c5d403: OUTPUT: «18␤»

[22:02] <jnthn> Curious; agree that's inconsistent.

[22:03] <jnthn> Unless the x is counted as a digit somehow, but... :)

[22:06] <jnthn> Maybe check if S02 had an opinion. Also I suspect the grammar parsing this is all the way down in NQP's HLL::Grammar

[22:07] <lizmat> :-(   /me looks at specs

[22:08] <jnthn> I think it's actually written using the grammar language rather than being defined in some low-level way. Been probably years since I last looked at it though, so I may remember wrong :)

[22:08] <jnthn> I'm also curious if I faithfully translit this behavior into the comma parser...

[22:09] <lizmat> what I'm trying to do now, is to unite val parsing 

[22:09] <jnthn> haha, yes, I did :)

[22:09] <lizmat> so that we don't have to maintain at least 2 versions of that code

[22:09] <lizmat> so Comma doesn't allow for leading or trailing underscore ?

[22:10] <lizmat> or does it?

[22:10] <jnthn> It allows 0x_1

[22:10] <jnthn> Like Rakudo 

[22:10] <jnthn> But not _1 and 1_ or 0x1_

[22:10] <jnthn> So it seems to match just what Rakudo does 

[22:10] <lizmat> A single underscore is allowed only between any two digits in a literal

[22:10] <lizmat> number, where the definition of digit depends on the radix.  (A single

[22:10] <lizmat> underscore is also allowed between a radix prefix and a following digit, as

[22:10] <lizmat> explained in the next section.) Underscores are not allowed anywhere else in

[22:10] <lizmat> any numeric literal, including next to the radix point or exponentiator, or

[22:10] <lizmat> at the beginning or end.

[22:11] <jnthn> Aha...and 0x is a radix prefix.

[22:11] <lizmat> yeah, so 0x_42 should be ok, but _42 not

[22:11] <jnthn> Yes

[22:11] <jnthn> OK, so it's at least in line with what S02 says

[22:11] <jnthn> I guess perhaps the rationale is it lets you get a bit more visual separation on the prefix

[22:12] <lizmat> yeah, I guess

[22:12] <jnthn> I'd argue that still doesn't imply that :16<_1> need work, though

[22:12] <jnthn> Since there's no radix prefix in the number there

[22:13] <lizmat> also working on :2{ 01101001 11001101 } making Blob.new(105,205)

[22:13] <jnthn> Hmm, cute...also in S02?

[22:13] <lizmat> well, handwavy

[22:14] <lizmat> https://design.raku.org/S02.html#Blob_literals

[22:15] <jnthn> uff, wow, sub-byte blobs...

[22:15] <lizmat> I think that predates on what a Blob actually meant

[22:16] <lizmat> so I'm going for a whitespace delimited list of byte values

[22:16] <jnthn> That does feel a bit more useful...

[22:16] <lizmat> :10{ 1 2 3 4 }

[22:16] <lizmat> would be a Blob.new(1,2,3,4)

[22:17] <lizmat> :16{ 00 ff 0f f0 }

[22:31] <lizmat> m: 0b1.1e10

[22:31] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 030b1.7⏏051e10␤»

[22:32] <lizmat> m: dd <0b1.1e10>

[22:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «"0b1.1e10"␤»

[22:32] <lizmat> m: dd <0b1.1>

[22:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «RatStr.new(1.5, "0b1.1")␤»

[22:32] <lizmat> m: 0b1.1

[22:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 030b1.7⏏051␤»

[22:32] <lizmat> jnthn: 0b1.1 vs <0b1.1>   seem inconsistent

[22:34] <lizmat> m: 0b1e0

[22:34] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 030b17⏏5e0␤    expecting any of:␤        whitespace␤»

[22:34] <lizmat> m: dd <0b1e0>

[22:34] <camelia> rakudo-moar 672c5d403: OUTPUT: «"0b1e0"␤»

[23:09] <Xliff> lizmat: Why would you want an exponent specifier with a binary literal?

[23:09] <Xliff> Conflates bases, really.

[23:09] <Xliff> 0b1 being binary and e0 being decimal'

[23:09] <lizmat> yeah, that was a thinko

[23:10] <Xliff> :)

[23:10] <lizmat> also, "e" is ambiguous with 0x

[23:10] <Xliff> Would it make sense to make "e" magical and have it mutate by the literal base?

[23:11] <Xliff> 0x1e1 would be 0x10

[23:11] <Xliff> 0b1e2 would be 0b10

[23:11] <Xliff> But then those technically become Nums, right?

[23:12] <Xliff> So... now I'm not certain if that makes sense at all.

[23:21] *** sena_kun joined
[23:23] *** Altai-man_ left
[23:27] <jnthn> Well, e in the main language always means floating point

[23:27] <jnthn> There is some justification for being able to write those in binary or hex

[23:28] <Xliff> OK

[23:28] <jnthn> (Namely, that's how they are represented in memory, so if for some reason you want to absolutely nail the exact value without any conversion from decimal...)

[23:29] <jnthn> I know some (mainstream) language relatively recently added support for that; forget which

[23:29] <Xliff> Ah. That would be nice.

[23:29] <Xliff> Probably Python.

[23:31] <Xliff> Yeah... python has 'e' in floating point literals.

[23:32] <Xliff> C has hex binary exponent using 'P'

