[00:13] *** sena_kun left
[00:27] *** Kaeipi left
[00:27] *** sena_kun joined
[00:28] *** Kaeipi joined
[01:41] <vrurg_> .seen altai-men

[01:41] <tellable6> vrurg_, I haven't seen altai-men around, did you mean Altai-man_?

[01:41] <vrurg_> .seen Altai-man

[01:41] <tellable6> vrurg_, I saw Altai-man 2019-12-23T13:21:08Z in #raku-dev: <Altai-man_> ok, now $dayjob

[01:41] *** vrurg_ is now known as vrurg

[01:43] <vrurg> .tell Altai-man I made #3311 a blocker. Even though it's macos specific but it's a cornerstone feature which is broken.

[01:43] <tellable6> vrurg, I'll pass your message to Altai-man_

[01:57] <Xliff> vrurg: o/

[01:57] <vrurg> Xliff: o/ :)

[01:57] <Xliff> vrurg: Are you going to be around this weekend?

[01:58] <vrurg> Likely. But can't promise.

[01:58] <Xliff> Can you tell me why this method isn't executing: https://github.com/Xliff/Method-Also/blob/proto-role-fix-again/lib/Method/Also.pm6#L38

[01:59] <Xliff> Do I have the method name wrong?

[01:59] <Xliff> AliasableClassHOW to be punned to ClassHOW

[02:00] <vrurg> Yes, you have.

[02:00] <Xliff> Argh!

[02:00] <Xliff> Thanks!

[02:00] <vrurg> Xliff: You can't do proper MOP without introspecting rakudo sources.

[02:01] <Xliff> Heh. Yeah. Was doing that. 

[02:01] <Xliff> Bad brain.

[02:01] <vrurg> Xliff: BTW, what do you need specialize_with for? I mean, I saw you take typeenv, but what for?

[02:02] <Xliff> Need that for .^add_multi_method()

[02:02] <vrurg> The problem is that specialize_with is a backend kind of method. I would rather have it private for that matter. 

[02:02] <Xliff> Rather. I need it for .code.instantiate_generic()

[02:03] <Xliff> If I don't need .instantiate_generic() I can remove the need for .specialize_with() altogether.

[02:04] <vrurg> Xliff: There must be a way. I hope it is somewhere.

[02:05] <Xliff> vrurg: OK. I will see if I can work around that, but I used existing code sources to build that bit.

[02:06] <vrurg> Xliff: the point is your installed methods are better be instantiated by the core MOP. So, best if you get them installed prior to role specialization.

[02:07] <Xliff> Not if it's a proto....

[02:08] <Xliff> It's that same issue....

[02:08] <Xliff> Would this be better done in compose?

[02:09] <vrurg> Errr, right... protos... 

[02:10] <vrurg> compose should be ok, but I'm too sucked out for today to consider all possible side effects.

[02:11] <vrurg> Xliff: BTW, Vikna turn out to be way more complicated task than I initially expected. 

[02:11] <Xliff> vrurg: Will try compose, then.

[02:12] <Xliff> So I should just use .^add_method rather than .^add_multi_method, you think?

[02:13] <vrurg> Xliff: I think it still has to be add_multi_method. Best if you look into RoleToClassApplier.

[02:14] *** sena_kun left
[02:14] <Xliff> Ah! Thanks for the tip!

[02:15] <vrurg> What's good about that is apply method receives concretized roles as its input. Thus, you get all parameterizations and closures done.

[02:16] <Xliff> OK.

[02:20] <Geth_> ¬¶ rakudo: vrurg++ created pull request #3385: Try matching parameters by their addresses

[02:20] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3385

[02:30] *** sena_kun joined
[02:37] <Geth_> ¬¶ roast: vrurg++ created pull request #607: Add tests for smarmatching of parameterized Array against Positional

[02:37] <Geth_> ¬¶ roast: review: https://github.com/perl6/roast/pull/607

[02:40] <vrurg> Xliff: it was a great advise on my side except that you can't use it. It just've crossed my mind that RoleClassApplier is never getting instantiated. There is no way to intercept a method of it... :(

[02:41] <Xliff> :(

[02:41] <Xliff> Is that a bug?

[02:41] <vrurg> No, it's implementation specific. It's used as a kind of a module, only contains methods.

[02:42] <Xliff> Ahhh...

[02:42] <Xliff> Even so, those can still be overridden, correct?

[02:42] <vrurg> Xliff: but in either case you could try with add_concretization which is anyway invoked for each concrete role.

[02:42] <Xliff> OK.

[02:42] <vrurg> Xliff: it can but what's the point? ClassHOW compose invokes it as `RoleToClassApplier.apply(...)`

[02:43] <vrurg> Ah!!!!

[02:43] <vrurg> Kill me!

[02:43] <Xliff> I'd rather not.

[02:44] <vrurg> Ok, a good sleep would do too. :D Can't get it if `does` would do the trick in this case or not? I would rather say it won't because ClassHOW has the pure RoleToClassApplier type object compiled into.

[02:45] <Xliff> Good idea.

[02:45] * vrurg is getting back to what he is capable of at this moment...

[02:45] <Xliff> I'll be around. Just .tell me something if necessary. ;)

[02:45] <Xliff> Thanks for the help!

[02:45] <vrurg> yep!

[02:46] * vrurg is leaving murmuring...

[02:46] <vrurg> Xliff: welcome!

[03:41] <Geth_> ¬¶ rakudo: fb55ae295a | (Vadim Belman)++ | src/Perl6/Metamodel/CurriedRoleHOW.nqp

[03:41] <Geth_> ¬¶ rakudo: Try matching parameters by their addresses

[03:41] <Geth_> ¬¶ rakudo: 

[03:41] <Geth_> ¬¶ rakudo: Thus we can match a definite to itself and have R[T:D] ~~ R[T:D] in

[03:41] <Geth_> ¬¶ rakudo: cases where lhs comes from a class as a consumed role and has different

[03:41] <Geth_> ¬¶ rakudo: object id from rhs. For example, this solves `Array[Str:D] ~~

[03:41] <Geth_> ¬¶ rakudo: `Positional[Str:D]`.

[03:41] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/fb55ae295a

[03:41] <Geth_> ¬¶ rakudo: 8d47f64cdd | (Vadim Belman)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/CurriedRoleHOW.nqp

[03:41] <Geth_> ¬¶ rakudo: Merge pull request #3385 from vrurg/rakudo_3383

[03:41] <Geth_> ¬¶ rakudo: 

[03:41] <Geth_> ¬¶ rakudo: Try matching parameterization parameters by their addresses

[03:41] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/8d47f64cdd

[03:41] <Geth_> ¬¶ roast: eee0c322ae | (Vadim Belman)++ | S03-smartmatch/any-type.t

[03:41] <Geth_> ¬¶ roast: Add tests for smarmatching of parameterized Array against Positional

[03:41] <Geth_> ¬¶ roast: 

[03:41] <Geth_> ¬¶ roast: Also structurize tests using `subtest` routine.

[03:41] <Geth_> ¬¶ roast: review: https://github.com/perl6/roast/commit/eee0c322ae

[03:42] <Geth_> ¬¶ roast: e7d4dea402 | (Vadim Belman)++ (committed using GitHub Web editor) | S03-smartmatch/any-type.t

[03:42] <Geth_> ¬¶ roast: Merge pull request #607 from vrurg/rakudo_3383

[03:42] <Geth_> ¬¶ roast: 

[03:42] <Geth_> ¬¶ roast: Add tests for smarmatching of parameterized Array against Positional

[03:42] <Geth_> ¬¶ roast: review: https://github.com/perl6/roast/commit/e7d4dea402

[04:15] *** sena_kun left
[04:30] *** sena_kun joined
[04:56] *** Kaeipi left
[04:57] *** Kaeipi joined
[04:57] *** Kaeipi left
[04:58] *** Kaeipi joined
[05:20] <Xliff> m: my $p = Promise.new; $p.break;

[05:20] <camelia> rakudo-moar 672c5d403: ( no output )

[05:30] <Xliff> m: say while False;

[05:30] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun‚ê§at <tmp>:1‚Ä¶¬ª

[05:30] <Xliff> m: say '' while False;

[05:30] <camelia> rakudo-moar 672c5d403: ( no output )

[06:14] *** sena_kun left
[06:28] *** cognomin_ joined
[06:30] *** sena_kun joined
[06:31] *** cognominal left
[07:31] *** sourceable6 left
[07:31] *** nativecallable6 left
[07:31] *** greppable6 left
[07:31] *** notable6 left
[07:31] *** releasable6 left
[07:31] *** quotable6 left
[07:31] *** benchable6 left
[07:31] *** coverable6 left
[07:31] *** tellable6 left
[07:31] *** reportable6 left
[07:31] *** bisectable6 left
[07:31] *** bloatable6 left
[07:31] *** statisfiable6 left
[07:31] *** squashable6 left
[07:31] *** shareable6 left
[07:31] *** evalable6 left
[07:31] *** committable6 left
[07:31] *** unicodable6 left
[07:32] *** statisfiable6 joined
[07:32] *** unicodable6 joined
[07:32] *** shareable6 joined
[07:32] *** benchable6 joined
[07:32] *** nativecallable6 joined
[07:32] *** quotable6 joined
[07:33] *** sourceable6 joined
[07:33] *** notable6 joined
[07:33] *** greppable6 joined
[07:33] *** committable6 joined
[07:33] *** releasable6 joined
[07:33] *** coverable6 joined
[07:33] *** squashable6 joined
[07:33] *** evalable6 joined
[07:34] *** bisectable6 joined
[07:34] *** reportable6 joined
[07:34] *** tellable6 joined
[07:34] *** bloatable6 joined
[07:42] <Xliff> .tell vrurg Hmmm... If I am already overriding ClassHOW.compose, doesn't that mean I can use my own RoleToClassApplier?

[07:42] <tellable6> Xliff, I'll pass your message to vrurg

[07:50] *** Xliff left
[08:14] *** sena_kun left
[08:28] *** sena_kun joined
[09:06] <sena_kun>  

[09:12] <lizmat> Files=1294, Tests=109635, 211 wallclock secs (28.31 usr  7.81 sys + 2966.28 cusr 267.88 csys = 3270.28 CPU)

[09:15] *** Voldenet left
[09:19] <sena_kun> vrurg: I don't mind the new blocker, and we probably won't make a release anyway, too close to holidays. Yet I'll patch Blin considering my ideas and findings, hope it'll make checking things much more easier.

[09:21] <sena_kun> .oO ( first release and such a failure already, me is pathetic )

[10:14] *** sena_kun left
[10:28] *** sena_kun joined
[11:02] <AlexDaniel> sena_kun: it's alright. Releasing in late December isn't the best plan anyway

[11:03] <AlexDaniel> robertle: what's the situation with debian?

[11:03] <AlexDaniel> robertle: I see that rakudo was yeeted from testing

[11:04] <AlexDaniel> at the same time unstable seems to be up to date

[11:21] <lizmat> grr... benchmarking my new val code shows that it is only 2x as fast for a very simple case, and 2-3% slower for most other cases

[11:22] <lizmat> on the brighter side, the new code does pass all of the new val tests, whereas the old code fails 254 / 1856 tests

[11:23] <lizmat> and the new code has about 60% of the allocations of the old code

[11:23] <lizmat> but still  :-(

[11:23] <lizmat> seems I need to go back to the drawing board

[11:23] <lizmat> at least there's more test coverage now

[11:46] <nine> Yeah, more correct and only twice as fast in common cases? I'd be disappointed, too :)

[11:46] <nine> Or maybe not ;)

[12:00] <lizmat> well, I'm not happy with it yet...

[12:01] <lizmat> my goal was to make it faster overall

[12:01] <lizmat> and I'm not happy with the maintainability of the new code either  :-(

[12:12] <nine> Well, still sounds like you made a pretty good first step :)

[12:13] <lizmat> doesn't feel like it, after 2 weeks or so  :-(

[12:14] *** sena_kun left
[12:16] <lizmat> meanwhile, I'm finding bugs: https://github.com/rakudo/rakudo/issues/3386

[12:17] <lizmat> also: https://github.com/rakudo/rakudo/issues/3382

[12:29] *** sena_kun joined
[12:40] *** Voldenet joined
[12:40] *** Voldenet left
[12:40] *** Voldenet joined
[13:40] *** evalable6 left
[13:40] *** evalable6 joined
[14:13] *** sena_kun left
[14:29] *** sena_kun joined
[15:50] <Geth_> ¬¶ rakudo: 5c65a126c4 | (Stefan Seifert)++ | 2 files

[15:50] <Geth_> ¬¶ rakudo: Fix race condition in NativeCall setup

[15:50] <Geth_> ¬¶ rakudo: 

[15:50] <Geth_> ¬¶ rakudo: Since commit 9ef7a7e9dd0a6baecc811faa42c1b042d8bc5452 a NativeCall site is

[15:50] <Geth_> ¬¶ rakudo: marked as set up as soon as the nqp::buildnativecall op is run. At that point

[15:50] <Geth_> ¬¶ rakudo: however a few attributes had not been initialized yet. Fix this by moving

[15:50] <Geth_> ¬¶ rakudo: their initialization to before nqp::buildnativecall. Replacing the native sub's

[15:50] <Geth_> ¬¶ rakudo: body with the optimized version may wait for initialization as worst case we're

[15:50] <Geth_> ¬¶ rakudo: <‚Ä¶commit message has 6 more lines‚Ä¶>

[15:50] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/5c65a126c4

[16:14] *** sena_kun left
[16:29] *** sena_kun joined
[18:13] *** sena_kun left
[18:28] *** sena_kun joined
[19:11] *** Xliff joined
[19:11] <Xliff> .

[19:21] <sena_kun> lizmat: ping?

[19:39] <lizmat> pong

[19:40] <lizmat> sena_kun: pretty sure the precomp issues with constant &a has been around for a loooong time

[19:44] <sena_kun> lizmat: ah, okay, then no need to check it by hands

[19:45] <sena_kun> though that'd be odd, I mean, we do have different modules with constants and they are, hmm, precompiled

[19:45] <lizmat> yeah, but no *code* constants

[19:45] <lizmat> I don't think ?

[19:45] <sena_kun> but what I was going to ask is how do you run it, because I am actually getting `Could not find A at line 1 in:`. : O

[19:45] <sena_kun> which is odd

[19:46] <sena_kun> or maybe not

[19:46] <sena_kun> oh, I am dumb

[19:46] <sena_kun> ok, confirmed

[19:46] <lizmat> I put the file in "lib" and run it with -Ilib, not -I.

[19:46] <lizmat> ok  :-)

[19:46] <sena_kun> `-I.` instead of `-Ilib` helped me. :)

[20:14] *** sena_kun left
[20:20] *** Xliff left
[20:30] *** sena_kun joined
[21:26] *** |Tux| left
[21:55] *** Kaeipi left
[21:56] *** Kaeipi joined
[22:14] *** sena_kun left
[22:19] *** |Tux| joined
[22:28] *** sena_kun joined
[23:28] *** sena_kun left
