[00:07] *** pmurias left
[01:14] *** Xliff left
[01:28] *** lucasb left
[02:15] *** ggoebel left
[04:58] *** vrurg left
[05:02] *** vrurg joined
[06:05] *** jmerelo joined
[07:06] *** jmerelo left
[07:59] *** sena_kun joined
[08:09] *** donaldh joined
[08:34] <El_Che> AlexDaniel: I am uploading the container, it's huge to the zillion deps

[08:34] <El_Che> I am off, butI'll leave my pc on :)

[08:42] <El_Che> AlexDaniel: should work now: https://github.com/nxadm/raku-blin-docker (the dblin script)

[08:43] <AlexDaniel> El_Che: “Images will be automatically built from the master branch with the "latest" tag”

[08:43] <AlexDaniel> El_Che: there's no need for that?

[08:43] <AlexDaniel> ahhhh sorry, misunderstood

[08:44] <AlexDaniel> nevermind :)

[08:45] <AlexDaniel> El_Che: any reason not to merge it into Blin repo itself?

[09:17] *** ggoebel joined
[09:56] *** Altai-man_ joined
[09:59] *** sena_kun left
[10:02] *** MasterDuke left
[10:28] <El_Che> just to see ifbitbworks, not tobstep on any toes, easy upload tobdocker hub

[10:28] <El_Che> if it works, can we merge it if you want to

[10:29] <El_Che> mobile typing ;)

[10:42] *** rba[m] left
[10:42] *** timotimo[m] left
[10:42] *** tyil[m] left
[10:42] *** AlexDaniel` left
[11:03] *** rba[m] joined
[11:14] *** donaldh left
[11:19] *** AlexDaniel` joined
[11:19] *** tyil[m] joined
[11:19] *** timotimo[m] joined
[11:19] *** pmurias joined
[11:23] *** squashable6 left
[11:25] *** squashable6 joined
[11:57] *** sena_kun joined
[11:58] *** Altai-man_ left
[12:03] *** ExtraCrispy joined
[12:18] *** pmurias left
[12:39] *** pmurias joined
[13:12] *** lucasb joined
[13:56] *** Altai-man_ joined
[13:58] *** sena_kun left
[14:24] <tony-o> there is a nightly built already on docker if thats what youre looking for El_Che 

[14:24] <tellable6> 2019-10-30T12:59:36Z #raku <tbrowder> tony-o thanks for the links

[14:25] <tony-o> iirc its around 600M

[15:26] *** vrurg left
[15:28] <El_Che> (on mobile) It's for Blin and a zillion binary dependencies

[15:47] <tony-o> ah

[15:58] *** Altai-man_ left
[16:06] *** Kaiepi left
[16:12] *** Kaiepi joined
[16:18] *** pmurias left
[16:23] *** jmerelo joined
[16:50] *** vrurg joined
[16:52] *** ggoebel left
[16:57] <tbrowder> :tony-o link to using unique constraint in Xoos, Xoos syntax fits my style of coding, so i look forward to playing with it

[16:57] <tellable6> 2019-10-28T17:41:18Z #raku <tony-o> tbrowder an example can be found here https://github.com/tony-o/perl6-xoo/blob/master/t/06-compound-keys.t

[16:57] <tellable6> 2019-10-30T16:40:56Z #raku <tony-o> tbrowder  i assume you mean in the READMEs, no problem, thank you for writing those mods

[16:59] <tony-o> .tbrowder happy to hear it, if you run into issues i'm happy to fix/help

[17:08] <discord6> <kelly> is https://nxadm.github.io/rakudo-pkg/ safe for installing raku

[17:14] *** MasterDuke joined
[17:22] <jmerelo> Raku container (github) action just published to the Github Actions marketplace: https://github.com/marketplace/actions/raku-container-actio

[17:22] <tellable6> 2019-10-29T19:45:15Z #raku-dev <rba> jmerelo: Not sure if I can now ask for the double.

[17:22] <jmerelo> .tell rba no problem, we'll make do.

[17:22] <tellable6> jmerelo, I'll pass your message to rba

[17:27] <tyil> https://github.com/perl6/nqp/blob/master/docs/release_guide.pod speaks about a `make release` step to create a tarball with all things in it, however, there's no makefile

[17:30] <tony-o> jmerelo: was something missing from the rakudo nightly you wanted?

[17:30] *** AlexDaniel left
[17:30] <jmerelo> tony-o: sorry, you lost me here...

[17:30] *** AlexDaniel joined
[17:30] *** AlexDaniel left
[17:30] *** AlexDaniel joined
[17:31] <tony-o> https://cloud.docker.com/u/tonyodell/repository/docker/tonyodell/rakudo-nightly

[17:31] <vrurg> tyil: what do you mean 'there is no makefile'?

[17:31] <[Coke]> tyil ;the makefile was removed at some point.

[17:31] <[Coke]> er, the *build* doesn't use it anymore, I mean.

[17:31] <[Coke]> so it's possible other things that relate to it are no longer functional.

[17:31] <tony-o> and: https://deathbyperl6.com/rakudo-nightly-faster-ci/

[17:31] <tony-o> has instructions for travis & circle 

[17:32] <tyil> vrurg: well, just like that, there's no Makefile

[17:32] <tyil> [Coke]: is there any documentation on how to create a tarball for it now?

[17:32] <tyil> because I need one in order to build r*

[17:33] <jmerelo> tony-o: cool. Still can't remember when I wanted that, though :-). Sorry.

[17:33] <[Coke]> wait, in p6-doc?

[17:33] <[Coke]> there *is* a Makefile in perl6-doc

[17:33] <tyil> what

[17:33] <[Coke]> it's just not used to build the site anymore.

[17:33] <tyil> no, nqp

[17:33] * [Coke] checks again

[17:33] <vrurg> tyil: step3, perl Configure.pl creates the makefile

[17:34] <tyil> why does it start with a make step if there's no makefile at that point

[17:34] <tony-o> jmerelo: ah, i think i misunderstood what your container was for, i thought it was for testing raku modules in general but it's for testing your module specifically?

[17:34] <tyil> I mean, thanks for the help, I really appreciate it, but documentation for releasing the parts of raku is quite bad

[17:35] * [Coke] is looking at https://github.com/perl6/doc/blob/master/Makefile

[17:35] <tyil> I'm not sure why

[17:36] <tyil> I've said multiple times I'm looking at NQP

[17:36] <vrurg> tyil: 'make realclean' is just to make sure everything is wiped out. If it fails – it's ok

[17:36] <jmerelo> tony-o: ah, OK. No, there's this (relatively new) thing called GitHub actions. It needs to get its Dockerfiles published in some specific places (not Docker Hub).

[17:36] <tyil> vrurg: something to update in the docs once I get this stuff working then

[17:36] <tony-o> i don't mind extending my image to github actions if that's helpful to you

[17:37] <tony-o> so we don't all have to maintain docker images of rakudo

[17:37] <vrurg> tyil: the release guide is primarly for release manager. So, it expects people to be familiar with the process in general.

[17:37] <jmerelo> tony-o: that's what I have just done; I've used the code for my perl6-test Docker container (based on an Alpine) and put it in a place where it can be used in GitHub actions.

[17:37] <tyil> vrurg: but that leaves a massive hole in knowledge if there's no release manager :/

[17:37] <tyil> as we see with R* now

[17:38] <jmerelo> tony-o: er. The image I've just published is already usable as a GitHub actions. (sign up for the beta), drop a .github/workflows/test.yml file that contains just that, and you've got your Raku doce tested every time you push by GitHub itself.

[17:38] <tony-o> my concern is mainly that we just keep a consistent nightly available everywhere and i'm offering to maintain a nightly on github actions for testing with gh's ci

[17:39] <jmerelo> tony-o: Ah, OK, great.

[17:39] <vrurg> tyil: It's not for R* manager but for rakudo release manager. You, besides of R* there could other distros exists, we can't take care of everything. Hence the focus on the particular process.

[17:39] <tony-o> are you interested in that or would you like to keep maintaining the gh ci image?

[17:39] <vrurg> tyil: R* must have it's own guide for the purpose.

[17:39] <tyil> yes, which expects a working NQP dist which I didn't have, so I have to understand at least some parts of the NQP release

[17:39] <jmerelo> tony-o: yes, let's do that. Let me check, and I'll PR so that it can be used directly in GH

[17:40] <vrurg> tyil: Though I agree that some details in the doc need updating. In particular, openjdk requirement has changed.

[17:40] <tyil> which, it turns out, could use a little polishing, and then literally everyone can make a tarball when needed

[17:40] <[Coke]> (docs vs. nqp) whoops. I saw docs in a different context, my bad, apologies.

[17:40] <vrurg> tyil: If you provide a PR with doc updates – that'd be graat! :)

[17:40] <tyil> perhaps once I get R* building

[17:41] <tyil> which can take a while at this speed

[17:41] <jmerelo> tony-o: can you give me the GH URL? Docker hub is now 500'ing

[17:42] <tony-o> rakudo nightly repo is here: https://github.com/tony-o/rakudo-nightly

[17:42] <vrurg> tyil: We're in lack of resources. Not every aspect could be taken care in timely manner.

[17:42] <tyil> hence I'm trying to bring some resources to release R*

[17:42] <tyil> preferably automated, ofcourse

[17:44] <jmerelo> tony-o: I'm checking it out. It'll need a bit of work in the way of instructions. I'll work on that. Thanks!

[17:44] <vrurg> tyil: regarding openjdk, I currently build with openjdk11. Not sure of 12 and 13 will do but should too.

[17:45] <jmerelo> El_Che: this is failing https://app.shippable.com/github/perl6/doc/runs/3218/1/console Is this temporary?

[17:47] <vrurg> tyil: and good luck! looking forwartd for your success!

[17:47] <tyil> same

[17:47] <jmerelo> tyil++

[17:52] <lizmat> hmmm looks like the search box on docs.raku.org generates improper links  :-(

[17:52] <lizmat> hmmm... looks like links like https://docs.raku.org/language/setbagmix create a 404

[17:52] <lizmat> rba jmerelo ^^

[17:53] <lizmat> https://docs.perl6.org/language/control#index-entry-with_orwith_without-with_orwith_without

[17:53] <lizmat> works and

[17:53] <lizmat> https://docs.raku.org/language/control#index-entry-with_orwith_without-with_orwith_without

[17:53] <lizmat> gives a 404

[18:07] <jmerelo> lizmat: hum

[18:07] <jmerelo> Thanks

[18:08] <jmerelo> lizmat: state works, though https://docs-stage.raku.org/language/setbagmix

[18:09] <jmerelo> s/state/stage/

[18:09] <lizmat> I have no explanation, I guess the error log will tell more (maybe)

[18:12] <jmerelo> weird

[18:16] <jmerelo> lizmat: the files are actually there. 

[18:16] <lizmat> yeah, feels like a server config issue

[18:16] <jmerelo> .tell rba something weird is going on with https://docs.raku.org. The files are there, but they return 404

[18:16] <tellable6> jmerelo, I'll pass your message to rba

[18:17] <jmerelo> this works: https://docs.raku.org/language/control.html#index-entry-with_orwith_without-with_orwith_without

[18:18] <jmerelo> It's a site configuration issue. I'll try and see if I can fix it.

[18:18] <jmerelo> Thanks for the heads up, lizmat 

[18:21] *** vrurg left
[18:28] <jmerelo> lizmat: https://docs.rakulang.site/language/5to6-overview

[18:28] <jmerelo> lizmat:  https://docs.perl6.org/language/control#index-entry-with_orwith_without-with_orwith_without 

[18:28] <lizmat> that works for me

[18:29] <lizmat> the second also

[18:29] <jmerelo> https://docs.raku.org/language/control#index-entry-with_orwith_without-with_orwith_without

[18:29] <lizmat> but that URL feels wrong to e

[18:29] <jmerelo> nginx configuration

[18:29] <jmerelo> lizmat: sorry, which one?

[18:29] <lizmat> the last one

[18:29] <jmerelo> .tell rba it's fixed now.

[18:29] <tellable6> jmerelo, I'll pass your message to rba

[18:30] <jmerelo> lizmat: the whole one, or the docs.raku.org part?

[18:30] <lizmat> it repeats the "with_orwith_without" part ?

[18:30] <jmerelo> lizmat: ah, that's another piece of cloth...

[18:31] <lizmat> https://docs.perl6.org/language/control#with_orwith_without   # the perl6.prg version

[18:31] <discord6> <kelly> hi

[18:31] <jmerelo> lizmat: it also works: https://docs.raku.org/language/control#with_orwith_without

[18:32] <jmerelo> hi, +kelly!

[18:32] <lizmat> if I click from the search results menu, I get https://docs.raku.org/language/control#index-entry-with_orwith_without-with_orwith_without

[18:32] <lizmat> is there a reason for that ?

[18:33] <jmerelo> lizmat: ... probably not?

[18:33] *** sena_kun joined
[18:33] <lizmat> :-)

[18:33] <jmerelo> lizmat: that's indexed three times, as a matter of fact

[18:34] <lizmat> ah?

[18:36] <rba> jmerelo: I see what you changed. Thank you

[18:36] <tellable6> 2019-10-30T17:22:57Z #raku-dev <jmerelo> rba no problem, we'll make do.

[18:36] <tellable6> 2019-10-30T18:16:29Z #raku-dev <jmerelo> rba something weird is going on with https://docs.raku.org. The files are there, but they return 404

[18:36] <discord6> <kelly> is raku as other scripting languages(perl5, python) for general use?

[18:36] <jmerelo> rba: no problem. I remembered we did something like that back in August

[18:36] <jmerelo> kelly: yes.

[18:37] <jmerelo> lizmat: raised an issue: https://github.com/perl6/Documentable/issues/55

[18:37] <rba> jmerelo: As I never had logon on the other tmp server, I couldn't know that.

[18:38] <lizmat> kelly: yes

[18:38] * rba is afk for dinner. when pinged back in 30 mins...

[18:38] <jmerelo> rba: no problem :-). Bon appetit

[18:39] <discord6> <kelly> Sorry, what i meant was *as fast as other scripting languages?

[18:40] *** ggoebel joined
[18:41] <sena_kun> kelly: from task to task it differs. some code can be faster than perl/python/ruby, some code in general is slower.

[18:41] <jmerelo> kelly your mileage may vary, but it's pretty fast

[18:43] <discord6> <kelly> i'm mostly looking into cro for webservices

[18:43] <discord6> <kelly> however i have not stress tested the server

[18:45] <discord6> <kelly> if someone here has experience can tell abt performance related to web side of things

[18:47] <sena_kun> it depends greatly on your setup, caching, database you use...

[18:49] <discord6> <kelly> but it will comparable to python/perl5 right? if the setup is more or less similar

[19:02] <nine> kelly: that's really hard to answer in a general way.

[19:14] *** ExtraCrispy left
[19:59] *** sena_kun left
[20:23] <El_Che> jmerelo: It seems I cleaned to much on my Fall cleaning, I will fix it now

[20:25] <El_Che> jmerelo: shall I rename the repo to raku-doc?

[20:27] <El_Che> jmerelo: or better: rakudo-pkg-for-doc? (http://dl.bintray.com/nxadm/rakudo-pkg-for-doc/...)

[20:27] <El_Che> I'll put the old name back and rename it when it's easier for you

[20:28] <El_Che> jmerelo: sorry for the breakage

[20:36] <El_Che> jmerelo: building the doc packagesn ow

[20:36] <El_Che> AlexDaniel: were you able to test the Blin image? Does it work as expected?

[20:36] <AlexDaniel> El_Che: I haven't tested it yet

[20:37] <El_Che> AlexDaniel: the prog does not take switches, like --help. It whould be handy to test it :)

[20:38] <El_Che> Good you haven't tested it, I see and error in the image. Fixing it now. :)

[20:42] *** lucasb left
[20:46] <El_Che> AlexDaniel: is this normal behavious when running blin without params? https://gist.github.com/nxadm/1f034c65a1567371b21a0070f36328cd

[20:47] <El_Che> (if so, I'll push the new image)

[20:48] *** pmurias joined
[21:00] <AlexDaniel> El_Che: hmmmmmm no

[21:00] <AlexDaniel> El_Che: looks like a bug after updates in whateverable

[21:01] <jmerelo> El_Che: I don't know.. If you do, please let me know.

[21:23] *** jmerelo left
[21:38] *** [Coke] left
[21:45] *** [Coke] joined
[21:45] *** [Coke] left
[21:45] *** [Coke] joined
[21:59] *** sena_kun joined
[22:05] <Geth_> ¦ nqp/truffle: 730812fff9 | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/sixmodel/NQPAttributeGetNode.java

[22:05] <Geth_> ¦ nqp/truffle: [truffle] Specialize attribute getting

[22:05] <Geth_> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/730812fff9

[22:05] <Geth_> ¦ nqp/truffle: e7964642bc | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/sixmodel/NQPAttributeGetNode.java

[22:05] <Geth_> ¦ nqp/truffle: [truffle] Remove unused attribute

[22:05] <Geth_> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/e7964642bc

[22:05] <Geth_> ¦ nqp/truffle: 91ac2ace5d | (Paweł Murias)++ | 2 files

[22:05] <Geth_> ¦ nqp/truffle: [truffle] Optimize nqp::bindattr

[22:05] <Geth_> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/91ac2ace5d

[22:06] <AlexDaniel> El_Che: I fixed whateverable, it should now work

[22:08] *** sena_kun left
[22:11] <pmurias> MasterDuke: pushed some speed ups for the point benchmark

[22:13] <Geth_> ¦ nqp/truffle: 14fd2afe24 | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/expression/NQPWValNode.java

[22:13] <Geth_> ¦ nqp/truffle: [truffle] Remove some debugging WVal code we pay a hefty price for

[22:13] <Geth_> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/14fd2afe24

[22:13] <pmurias> MasterDuke: and the WVal code was seriously slowing our "benchmark" down

[22:49] *** vrurg joined
[22:52] *** Xliff joined
[23:06] <Xliff> \o

[23:07] <Xliff> m: use NativeCall; role R[::T] { method a { CArray[T].new }; }; class A is repr<CPointer> { }; R[A].a.say

[23:07] <camelia> rakudo-moar 9f433da0d: OUTPUT: «===SORRY!===␤Type check failed in binding to parameter '<anon>'; expected Any but got T (?)␤»

[23:07] <Xliff> m: use NativeCall; role R[::T] { method a { CArray[T].new }; }; class A is repr<CPointer> { }; R[uint32].a.say

[23:07] <camelia> rakudo-moar 9f433da0d: OUTPUT: «===SORRY!===␤Type check failed in binding to parameter '<anon>'; expected Any but got T (?)␤»

[23:08] <Xliff> ^^ Is something like this possible?

[23:08] <Xliff> m: use NativeCall; role R[::T] { method a { CArray[Str].new }; }; class A is repr<CPointer> { }; R[uint32].a.say

[23:08] <camelia> rakudo-moar 9f433da0d: OUTPUT: «NativeCall::Types::CArray[Str].new␤»

[23:12] <Xliff> m: use NativeCall; role R[::T] { method a { CArray[::T].new }; }; class A is repr<CPointer> { }; R[uint32].a.say

[23:12] <camelia> rakudo-moar 9f433da0d: OUTPUT: «===SORRY!===␤Type check failed in binding to parameter '<anon>'; expected Any but got T (?)␤»

[23:13] <Xliff> m: use NativeCall; role R[::T] { method a { CArray[::T].new }; }; class A is repr<CPointer> { }; R[A].a.say

[23:13] <camelia> rakudo-moar 9f433da0d: OUTPUT: «===SORRY!===␤Type check failed in binding to parameter '<anon>'; expected Any but got T (?)␤»

[23:20] <MasterDuke> pmurias: nice! that gets truffle equal to regular jvm for 10000000 and beating it by 3s for 50000000

[23:20] <Geth_> ¦ rakudo: vrurg++ created pull request #3272: Unify dynamic lookups performed by pseudo-packages and &DYNAMIC

[23:20] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3272

[23:21] <Xliff> MasterDuke: CArray doesn't support use in parameterized roles, does it?

[23:22] <MasterDuke> Xliff: sadly i have no idea. i know almost nothing about nativecall

[23:22] <Xliff> Ah.

[23:22] <AlexDaniel> greppable6: kill

[23:22] <greppable6> AlexDaniel, 565 lines, 81 modules: https://gist.github.com/122a43ea349370973c3cbd8db4ffe18b

[23:22] <AlexDaniel> greppable6: \.kill

[23:22] <greppable6> AlexDaniel, 139 lines, 36 modules: https://gist.github.com/0025fd5f68fb497823a1cc26df2f01e8

[23:27] <pmurias> MasterDuke: what is your exact benchmark?

[23:28] <MasterDuke> pmurias: time ./nqp-j nqp-truffle.nqp -e 'class Point { has $!x; has $!y; method new(:$x, :$y) { my $obj := nqp::create(self); nqp::bindattr($obj, Point, q|$!x|, $x); nqp::bindattr($obj, Point, q|$!y|, $y); $obj; }; method x() { $!x }; method y() { $!y } }; my $total := 0; my int $i := -1; while ++$i < 50000000 { my $p := Point.new(x => 2, y => 3);

[23:28] <MasterDuke> $total := $total + $p.x + $p.y; }; say($total)'

[23:28] <pmurias> MasterDuke: I'm using this: https://paste.debian.net/1112140

[23:28] <MasterDuke> yep, looks the same

[23:29] *** ggoebel left
[23:30] <Geth_> ¦ nqp/truffle: b8b625c7d9 | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/expression/NQPWValNode.java

[23:30] <Geth_> ¦ nqp/truffle: [truffle] Optimize WVal with specialization

[23:30] <Geth_> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/b8b625c7d9

[23:31] *** MasterDuke left
[23:32] <pmurias> MasterDuke: with that commit we should be beating the old backkend on 10_000_000

[23:32] <tellable6> pmurias, I'll pass your message to MasterDuke

[23:32] <AlexDaniel> greppable6: ^\s*await

[23:32] <greppable6> AlexDaniel, 658 lines, 136 modules: https://gist.github.com/67beac3ef7f845a78428f3a110763016

[23:35] *** MasterDuke joined
[23:36] <MasterDuke> pmurias: awesome. and yeah, consistently ~0.5s faster for me after that last commit

[23:36] <tellable6> 2019-10-30T23:32:05Z #raku-dev <pmurias> MasterDuke: with that commit we should be beating the old backkend on 10_000_000

[23:36] <MasterDuke> wish i could say i understood exactly what was going on in those optimizations you just did, i'll have to study the commits a bit more

[23:37] <jnthn> I figure the WVal one is just saying that once we have resolved it once, then it's a constant.

[23:38] <jnthn> And so it can effectively treat it like a Java `final` and do the related Nice Things.

[23:39] <MasterDuke> yeah. i understand some of the intent. but how it's achieved...

[23:42] <pmurias> MasterDuke: I would suggest reading the truffle slides from the readme

[23:43] <pmurias> jnthn: yes, that what it does

[23:44] <pmurias> https://lafo.ssw.uni-linz.ac.at/pub/papers/2016_PLDI_Truffle.pdf

[23:46] <Xliff> "How it should be" --> "Write in Java"

[23:46] <Xliff> :p

[23:50] <Xliff> pmurias: So are you using truffle concepts for nqp/moar?

[23:50] <Xliff> Or the JVM backend?

[23:51] <jnthn> pmurias: ooc, how does the JVM and (not fair 'cus it's still in progress) truffle compare to the MoarVM result?

[23:52] <MasterDuke> jnthn: for 50000000, moarvm is 2.4s, truffle is 9.5s, and jvm is 14s

[23:55] <jnthn> moarvm master, I guess?

[23:55] <jnthn> In theory (totally untested) more-pea would also help this one

[23:56] <Geth_> ¦ roast: 464b05b1f1 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S17-procasync/kill.t

[23:56] <Geth_> ¦ roast: Fix test by ignoring the failed Proc

[23:56] <Geth_> ¦ roast: 

[23:56] <Geth_> ¦ roast: The test is trying to check if rapid-killing a Proc doesn't hang, but

[23:56] <Geth_> ¦ roast: while doing so it awaits the result in sink context. Of course, a

[23:56] <Geth_> ¦ roast: killed Proc should complain loudly, but it didn't do that in the past

[23:56] <Geth_> ¦ roast: because of a bug in Rakudo.

[23:56] <Geth_> ¦ roast: 

[23:56] <Geth_> ¦ roast: Resolves rakudo/rakudo#3271.

[23:56] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/464b05b1f1

[23:56] <MasterDuke> moarvm and jvm HEAD of master, truffle head of truffle branch (which is way behind master, but don't know that any of the missing commits would do much for performance anyway)

[23:56] <Geth_> ¦ roast/6.d-errata: 4330d8bf22 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S17-procasync/kill.t

[23:56] <Geth_> ¦ roast/6.d-errata: Fix test by ignoring the failed Proc

[23:56] <Geth_> ¦ roast/6.d-errata: 

[23:56] <Geth_> ¦ roast/6.d-errata: The test is trying to check if rapid-killing a Proc doesn't hang, but

[23:56] <Geth_> ¦ roast/6.d-errata: while doing so it awaits the result in sink context. Of course, a

[23:56] <Geth_> ¦ roast/6.d-errata: killed Proc should complain loudly, but it didn't do that in the past

[23:56] <Geth_> ¦ roast/6.d-errata: because of a bug in Rakudo.

[23:56] <Geth_> ¦ roast/6.d-errata: 

[23:56] <Geth_> ¦ roast/6.d-errata: Resolves rakudo/rakudo#3271.

[23:56] <Geth_> ¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/4330d8bf22

[23:57] <AlexDaniel> jnthn: ↑ thoughts?

[23:57] <AlexDaniel> jnthn: it's in 6.d-errata too, fyi

[23:57] <jnthn> AlexDaniel: Just found that ticket while trying to catch up on the neverending email inbox... :)

[23:57] <jnthn> AlexDaniel: I think I agree with nine's call

[23:57] <jnthn> I suspect it might fix as much as it breaks in the wild. :)

[23:58] <AlexDaniel> jnthn: I'm not entirely convinced that this won't break code, but I couldn't come up with a real snippet that'd break because of the change

[23:58] <jnthn> *nod*

[23:58] <AlexDaniel> the change doesn't matter if you're using react/whenever

[23:58] <jnthn> I guess blin has already had its say?

[23:58] <MasterDuke> jnthn: i just tried to use the more-pea branch, but it was too old for nqp and there was a merge conflict when i tried to rebase it head of master

[23:58] <AlexDaniel> jnthn: for that change yes, but I'm still waiting for results on HEAD :(

[23:59] <jnthn> MasterDuke: OK. I really hope to have time to get back to that next week.

[23:59] <AlexDaniel> so to actually have your code broken, you'd need to await a Proc::Async in sink context, while also .kill-ing it yourself

[23:59] <jnthn> Couldn't something else have killed it?

