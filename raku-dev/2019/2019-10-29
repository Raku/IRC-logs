[00:04] *** vrurg joined
[00:06] <Geth_> ¬¶ nqp/truffle: 1bba032683 | (Daniel Green)++ | 2 files

[00:06] <Geth_> ¬¶ nqp/truffle: [truffle] Fixes to build nqp-truffle-impl.jar

[00:06] <Geth_> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/1bba032683

[00:09] <MasterDuke> pmurias: fyi, i was following the substrate instructions, but the `native-image --language:nqp org.perl6.nqp.truffle.svm.Truffle6` step gives `Error: language:nqp contains unknown name in option specification: tool:truffleAvailable tool options are:    tool:chromeinspector    tool:profiler`. going to bed, hopefully will try to debug tomorrow

[00:10] *** lucasb left
[00:15] *** redable joined
[00:16] <MasterDuke> pmurias: commenting out the `Requires = tool:truffle` in <graalvm_root>/jre/languages/nqp/native-image.properties got me farther

[00:16] <MasterDuke> pmurias: `Error: Classes that should be initialized at run time got initialized during image building: org.perl6.nqp.truffle.NQPLanguage was unintentionally initialized at build time.  To see why org.perl6.nqp.truffle.NQPLanguage got initialized use -H:+TraceClassInitializationError: Use -H:+ReportExceptionStackTraces to print stacktrace of

[00:16] <MasterDuke> underlying exceptionError: Image build request failed with exit status 1`

[00:19] <MasterDuke> pmurias: and the stacktrace i get if i add that option doesn't seem relevant

[00:34] *** vrurg left
[00:36] *** tony-o left
[00:41] *** redable left
[00:42] <pmurias> MasterDuke: doesn't ring any bells to me :(

[00:44] *** squashable6 left
[00:45] *** redable joined
[00:45] <pmurias> MasterDuke: last time I was setting up substratevm I asked about on the graalvm/truffle gitter (now they moved it to slack)

[00:45] *** squashable6 joined
[00:49] *** vrurg joined
[00:58] <AlexDaniel> vrurg: I see a bunch of merges of master into your branches, can you use rebasing instead?

[00:59] *** pmurias left
[01:00] <vrurg> AlexDaniel: I do so already. But sometimes it doesn't work.

[01:00] <AlexDaniel> vrurg: it's not extremely important but it pollutes the git history unnecessarily, especially at the amount of work that you do :)

[01:00] <vrurg> AlexDaniel: I know. Don't like it too.

[01:01] <vrurg> What I had to learn at some point is to stash changes before rebase.

[01:05] *** redable left
[01:09] <AlexDaniel> vrurg: also, I advice against commit titles like ‚ÄúFix for R#3035‚Äù

[01:09] <AlexDaniel> instead just say what you fixed

[01:10] <AlexDaniel> that's not your commit though :D

[01:10] <AlexDaniel> lizmat: ‚Üë :)

[01:10] <AlexDaniel> thing is, R#3035 is not even clickable

[01:10] <AlexDaniel> so even if I look at it through the web interface I'd still struggle

[01:11] *** redable joined
[01:12] <vrurg> Sometimes it's hard to shorten a bug report into a oneliner. Thus, some PRs get titles of the kind. But I definitely don't use R#. :)

[01:15] <AlexDaniel> sure, but I'll end up shortening it into a nice title anyway once I get to changelogging, so‚Ä¶

[01:16] <vrurg> Anyway, noted. Will be avoiding those.

[01:17] <AlexDaniel> thanks!

[01:27] <vrurg> np!

[01:36] *** Kaiepi left
[01:39] *** Kaiepi joined
[01:42] *** redable left
[01:45] *** redable joined
[01:59] *** lucs joined
[02:08] *** redable left
[02:20] *** tony-o joined
[03:42] <Geth_> ¬¶ roast: c92b752668 | (Vadim Belman)++ | 3 files

[03:42] <Geth_> ¬¶ roast: Test for precompiled closures

[03:42] <Geth_> ¬¶ roast: 

[03:42] <Geth_> ¬¶ roast: In support of MoarMV/MoarVM#1209

[03:42] <Geth_> ¬¶ roast: 

[03:42] <Geth_> ¬¶ roast: Related to rakudo/rakudo#2897 and a number of other tickets.

[03:42] <Geth_> ¬¶ roast: review: https://github.com/perl6/roast/commit/c92b752668

[03:42] <Geth_> ¬¶ roast: 54c942b7b1 | (Vadim Belman)++ (committed using GitHub Web editor) | 3 files

[03:42] <Geth_> ¬¶ roast: Merge pull request #593 from perl6/rakudo_2897_fix

[03:42] <Geth_> ¬¶ roast: 

[03:42] <Geth_> ¬¶ roast: Test for precompiled closures

[03:42] <Geth_> ¬¶ roast: review: https://github.com/perl6/roast/commit/54c942b7b1

[05:05] *** squashable6 left
[05:07] *** squashable6 joined
[05:28] *** squashable6 left
[05:30] *** squashable6 joined
[06:36] <nine> .tell patrickb yes (assuming you mean a CompUnit::Repository::Installation): perl6 -I'inst#/path/to/folder'

[06:36] <tellable6> nine, I'll pass your message to patrickb

[06:41] <nine> I never write issue numbers in my commit titles. They don't mean anything to the reader anyway. I usually try to mention the number in the commit message body though

[07:43] *** Voldenet left
[07:54] *** sena_kun joined
[08:03] *** bartolin joined
[08:36] *** bartolin left
[08:37] *** bartolin joined
[09:30] *** bartolin left
[09:43] *** bartolin joined
[09:55] *** Altai-man_ joined
[09:57] *** sena_kun left
[10:32] *** pmurias joined
[11:08] *** squashable6 left
[11:11] *** squashable6 joined
[11:28] <Geth_> ¬¶ nqp/truffle: 8b0e270b9f | (Pawe≈Ç Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/runtime/NQPArguments.java

[11:28] <Geth_> ¬¶ nqp/truffle: [truffle] Add some TruffleBoundaries

[11:28] <Geth_> ¬¶ nqp/truffle: 

[11:28] <Geth_> ¬¶ nqp/truffle: Don't inline in the HashMap implementation

[11:28] <Geth_> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/8b0e270b9f

[11:28] <Geth_> ¬¶ nqp/truffle: 14259453ca | (Pawe≈Ç Murias)++ | 2 files

[11:28] <Geth_> ¬¶ nqp/truffle: [truffle] Add slow path specialization for method calls

[11:28] <Geth_> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/14259453ca

[11:35] *** Voldenet joined
[11:35] *** Voldenet left
[11:35] *** Voldenet joined
[11:38] *** pmurias left
[11:45] *** donaldh joined
[11:56] *** sena_kun joined
[11:58] *** Altai-man_ left
[11:59] *** ggoebel joined
[12:03] *** squashable6 left
[12:04] *** pmurias joined
[12:05] *** squashable6 joined
[12:19] *** lucasb joined
[12:23] *** ExtraCrispy joined
[12:39] *** donaldh left
[12:52] *** MasterDuke left
[13:34] *** donaldh joined
[13:56] *** Altai-man_ joined
[13:58] *** sena_kun left
[14:46] *** pmurias left
[14:48] *** pmurias joined
[15:16] <[Coke]> when I run "make spectest", what instance of perl6 is it using? one from the build dir, or the one from 'make install' ?

[15:42] <AlexDaniel> [Coke]: it has to be the one from the build dir, if it's using one from install path then it's wrong

[15:43] <[Coke]> AlexDaniel: danke.

[15:43] <[Coke]> just trying to test Inline::Perl5

[15:44] <[Coke]> ok. installed zef into that build dir. Installed Inline::Perl5 - make spectest still complaining that it's not installed.

[15:44] <[Coke]> $ install/bin/perl6 install/share/perl6/site/bin/zef install Inline::Perl5

[15:44] <[Coke]> (after installing zef into that dir)

[15:44] <[Coke]> make I screwed up the zef install.

[15:45] <[Coke]> *maybe

[15:46] <AlexDaniel> oh, Inline::Perl5 tests, hmm

[15:47] * [Coke] finds the release guide instructions that he may have written at one point and tries that specifically.

[15:49] <AlexDaniel> but these are based on doing `make install`

[15:49] <AlexDaniel> which is going to work for sure

[15:50] <AlexDaniel> well, it should, at least, but it doesn't make it more right? :)

[15:52] <nine> [Coke]: that's a bug and patrickb is working on it

[15:53] <nine> It is trivial to work around by changing t/harness5:45

[15:53] <[Coke]> nine: oh

[15:53] * [Coke] picked a bad time to randomly run a test. :)

[15:56] *** sena_kun joined
[15:58] *** Altai-man_ left
[16:01] *** patrickb joined
[16:01] <patrickb> I just saw the discussion and thought I'd drop by.

[16:01] <tellable6> 2019-10-29T06:36:58Z #raku-dev <nine> patrickb yes (assuming you mean a CompUnit::Repository::Installation): perl6 -I'inst#/path/to/folder'

[16:02] <patrickb> The problem with Inline::Perl5 and the build runner is difficult.

[16:03] <nine> It used to be simple?

[16:04] <patrickb> It boils down to the question of whether we want the build dir raku to access outside repositories.

[16:04] <patrickb> It worked in the past, because before I started refactoring the build dir perl6 was configured to access the installation dir repos.

[16:05] <patrickb> So it also had access to all installed modules.

[16:05] <nine> Sounds like a good thing?

[16:05] <patrickb> Side effect: It created parts the repository folder structure during build (before install).

[16:07] <patrickb> The way it currently is, the build runner has it's home dir (and with that the repo paths) set to a dummy folder in gen/ just to make sure we don't spam anything outside of the build directory before `make install`.

[16:09] <patrickb> So it's a tradeoff. Either we make it access stuff outside the build dir, with the potential of writing there and the outside stuff messing up the build, or we forbid such access and not get automatic access to the outside repos.

[16:09] <nine> So Inline::Perl5 can be installed into that folder. The harness can print instructions to do that.

[16:10] <patrickb> That would be a way out for this specific use case.

[16:11] <nine> AFAIK it's the only use case that's broken currently ;)

[16:11] <patrickb> https://github.com/rakudo/rakudo/commit/cbd1dc2776b1f630a856861b44266ff61a596966 <- That's the commit that moved the build runner home dir.

[16:12] <patrickb> Given we might actually want to use the home folder in gen/ we should rename it. Currently it's called "dummy_p6_home". :-P

[16:12] *** pmurias left
[16:14] <patrickb> [Coke]: You could try to install Inline::Perl5 into `$build_dir/gen/dummy_p6_home` and see if that makes the tests work again. I think it will.

[16:15] <patrickb> nine: Do you think a solution that merely adds instructions to harness / harness6 be good enough for the Inline::Perl5 testing problem?

[16:16] <nine> It would definitely be an improvement and allow for people to run those tests again.

[16:23] <patrickb> nine: I'll look into this.

[16:23] <patrickb> need to leave

[16:23] *** patrickb left
[16:48] <vrurg> When I'm done with a few tasks, I'm gonna open a ticket about changing build directory structure. 

[16:48] <vrurg> We must move things away from the base dir into a subdir. Most likely into blib.

[16:53] *** samcv_ is now known as samcv

[16:55] *** donaldh left
[16:59] *** Kaiepi left
[17:19] <|Tux|> Rakudo version 2019.07.1-451-g9f433da0d - MoarVM version 2019.07.1-309-g48491b896

[17:19] <|Tux|> csv-test-xs-20      0.424 -  0.428

[17:19] <|Tux|> csv-ip5xs           0.709 -  0.720

[17:19] <|Tux|> test-t --race       0.793 -  0.812

[17:19] <|Tux|> test-t              1.763 -  1.820

[17:19] <|Tux|> csv-ip5xs-20        6.569 -  6.728

[17:19] <|Tux|> test                6.967 -  6.980

[17:19] <|Tux|> test-t-20 --race    9.184 -  9.274

[17:19] <|Tux|> csv-parser         21.434 - 21.795

[17:19] <|Tux|> test-t-20          30.184 - 30.598

[17:27] *** MasterDuke joined
[17:40] *** Kaiepi joined
[17:55] *** Altai-man_ joined
[17:57] *** sena_kun left
[18:29] <nine> vrurg: is it possible that your context fix also fixed this todo in t/spec/S10-packages/precompilation.rakudo.moar? ok 23 - precompile exported cached sub # TODO RT #122896

[18:31] <vrurg> nine: I think so. I'm getting somewhat strange behavior when run this test separately, perhaps due to incorrect handling of jvm todos. So, postponed looking closer at it.

[18:32] <vrurg> TODO passed:   23 ‚Äì this is what confuses me for now.

[18:34] <vrurg> nine: Yep, it's a bug in harness5. Removal of todo from 23 just makes the test pass.

[18:36] <nine> vrurg: I'm not sure it's a bug. It makes it very obvious when a todo passes, so we can remove the marker.

[18:37] <vrurg> nine: The bug is about reporting 23 where just 1 is expected. 

[18:38] <nine> It's not "TODOs passed" :) It lists the test numbers that unexpectedly pass

[18:40] * vrurg is doing (facepalm) 

[19:01] <AlexDaniel> ehh I see a stresstest failing, I think

[19:02] <AlexDaniel> t/spec/S17-procasync/kill.rakudo.moar

[19:04] <AlexDaniel> rba: speaking of infrastructure-related things, there are two things that are currently painful to me

[19:05] <AlexDaniel> rba: one is that we don't run Blin regularly, another is that we don't run stresstests for every commit

[19:05] <AlexDaniel> rba: let me know what kind of beefy resources we have that I can fully abuse

[19:06] <AlexDaniel> rba: for Blin, more cores is better

[19:07] <AlexDaniel> stresstests I think I can even run on whateverable's server, but I'm not sure how to make it work‚Ä¶ do we need to integrate it with github somehow, or something?

[19:11] <AlexDaniel> El_Che, jmerelo: what about creating a docker image for Blin, or something like that?

[19:11] <AlexDaniel> with all dependencies installed

[19:11] <AlexDaniel> here's the list of debian packages: https://github.com/perl6/ecosystem-unbitrot/wiki

[19:12] *** jmerelo joined
[19:12] <jmerelo> AlexDaniel: I could try, but I'm really swamped now with work. I might be a bit better from November 15th on...

[19:13] <AlexDaniel> jmerelo: I'm in a similar situation, which is why I'm desperately looking for help :)

[19:13] <jmerelo> AlexDaniel: tyil had his own set of Docker containers, built nightly...

[19:13] <AlexDaniel> jmerelo: I don't need the docker container to be updated regularly

[19:14] <jmerelo> AlexDaniel: I know, my point is that he's got the expertise to give it a try if he's not too busy with something else.

[19:14] <AlexDaniel> tyil: ‚Üë ? help?

[19:15] <AlexDaniel> hm, I think even kawaii had something prepared for Blin‚Ä¶

[19:15] <AlexDaniel> https://github.com/perl6/Blin/pull/10

[19:16] <AlexDaniel> so I guess it just needs to be finished?

[19:18] <rba> jmerelo: Found a copy/past error in authorized_keys for docs-stage.raku.org.

[19:18] <tellable6> 2019-10-29T18:17:56Z #raku <jmerelo> rba you've got email

[19:19] <tyil> currently busy, I'll take a look at the backlog to see what's wrong later

[19:20] <jmerelo> rba: my bad.

[19:20] <jmerelo> rba: did you fix it?

[19:20] <rba> jmerelo: Yes. Not your mistake.

[19:21] <rba> jmerelo: Does your key work now?

[19:21] <jmerelo> rba: let me try

[19:21] <jmerelo> rba: please note I added a new key, the one I use in my desktop

[19:21] <jmerelo> rba: and no, it's not working, still requesting the password

[19:22] <rba> jmerelo: Saw it. Guessed the key called "OpenShift-Key" was the one I added last time. This might be yours too

[19:22] <jmerelo> rba: no, wait, I'm using the wrong user

[19:22] <jmerelo> rba: let me try again

[19:23] <jmerelo> rba: right! Going!

[19:23] <jmerelo> rba: and here we go! https://docs-stage.raku.org/

[19:23] <jmerelo> rba++

[19:23] <jmerelo> rba: right, that's the one in my laptop

[19:24] <rba> AlexDaniel: Not sure yet if we have a chance to get it, yet asked with jmerelos help for an AWS EC2 instance with 8 cores/32 GB. Yet calculate for a max usage of 3 hours/day.

[19:24] <rba> jmerelo++

[19:24] <AlexDaniel> rba: that's not enough

[19:24] <rba> AlexDaniel: huhh. 

[19:25] <AlexDaniel> you can have 3 hours/day if you bump that to 24 cores or so

[19:25] <AlexDaniel> otherwise I think it'll take more time

[19:25] <jmerelo> AlexDaniel: you mean for Blin?

[19:25] <AlexDaniel> yea

[19:25] <jmerelo> AlexDaniel: I thought we were only going to do a few compiles...

[19:27] <jmerelo> AlexDaniel: if we are going to run Blin, even if it's a few days a month, I guess it'll be a bit more... /cc +rba

[19:28] <AlexDaniel> I'd say the goal for Blin is to run it every day, and for stresstest we should run it for every commit

[19:28] <AlexDaniel> so stresstest is easy, it's just a few minutes on any machine really

[19:28] <jmerelo> AlexDaniel: OK, let me check then.

[19:28] <AlexDaniel> the issue is more about how we're going to set it up, like where it's going to push the reports

[19:29] <AlexDaniel> but for Blin we actually need something relatively beefy

[19:29] <jmerelo> AlexDaniel: best way is obviously to set up some Azure client that will spin a new instance only when we need it. Also, if possible, to use spot instances.

[19:30] <jmerelo> AlexDaniel: but I think that if we're set to run Blin every day, and for a good part of the day, we should use reserved instances.

[19:30] <AlexDaniel> why? spot instances should be ok

[19:30] <AlexDaniel> I think

[19:30] <AlexDaniel> depends on how much cheaper they are

[19:31] <jmerelo> Spot instances can be 90% cheaper, reserved instances 75% cheaper

[19:31] *** El_Che joined
[19:31] <El_Che> lo

[19:31] <AlexDaniel> o/

[19:31] <jmerelo> Only, well, they are reserved.

[19:31] <El_Che> I am looking at Blin, it looks easy to create an image if you need one

[19:32] <AlexDaniel> El_Che: see https://github.com/perl6/Blin/pull/10

[19:33] <rba> jmerelo: As you where able to deploy to docs-stage.raku.org, you like to deploy too to https://docs.raku.org?

[19:33] <AlexDaniel> maybe it just needs some brush-up

[19:33] *** Xliff joined
[19:33] <Xliff> \o

[19:33] <tellable6> 2019-10-25T13:47:17Z #raku-dev <AlexDaniel> Xliff: oook‚Ä¶ can you bisect it?

[19:33] <tellable6> 2019-10-25T13:48:38Z #raku-dev <AlexDaniel> Xliff: so it's between 2019.07.1-443-gcfc0f46c0 2019.07.1-398-gf3dda96a8, right?

[19:34] <AlexDaniel> Xliff: o/

[19:34] <El_Che> yeah, that could work, however personnaly I would start from rakudo on the distro or rakudo-pkg if something newer is needed

[19:34] <AlexDaniel> Xliff: ‚Üë these messages are a bit outdated, I tested it and found no significant performance regression

[19:34] <jmerelo> rba: yes, please. Can you copy the last line in authorized_keys there? Thanks.

[19:34] <Xliff> AlexDaniel: Ah. Saw your emails. Thanks for looking into it.

[19:34] <rba> jmerelo: give me a sec.

[19:34] <AlexDaniel> El_Che: I mean‚Ä¶ can you do it? :) Feel free to do whatever you want to make it work

[19:35] <Xliff> AlexDaniel: I think the problem is exacerbated by number of cores.

[19:35] <AlexDaniel> El_Che: the issue with this image, IIRC, is that it's a bit tricky to get the files generated by blin back out of the image

[19:35] <El_Che> Sure, I'll have it a quick go now, see how far I get

[19:35] <jmerelo> AlexDaniel: pretty much everything for Blin happens in memory, right?

[19:35] <Xliff> I will have to bisect on my own, but I am still involved in other things. I will try to get to it by the weekend. 

[19:35] <El_Che> ok, that's just a volume thing, isn't?

[19:36] <AlexDaniel> El_Che: I‚Ä¶ I guess so? I don't speak docker‚Ä¶

[19:36] <El_Che> " -v /tmp/blin-output:/opt/perl6/blin/output:rw" citing kawaai in the ticket

[19:36] <El_Che> ok, I'll cook something quick as a poc and we'll take it from there

[19:36] <AlexDaniel> Xliff: before bisecting I'd recommend to first do a few runs to make sure there's an actual regression

[19:37] <Xliff> Yes.

[19:37] <AlexDaniel> jmerelo: not really, it does write to the disk like all the installed modules and stuff

[19:37] <rba> jmerelo: try to depoly

[19:37] <rba> deploy

[19:37] <AlexDaniel> jmerelo: if you need it to be in RAM then just make it a tmpfs or something

[19:37] <Xliff> AlexDaniel: I have the following versions 2019.07.1-273-g91d53ae7f and 2019.07.1-298-g67b6acf71

[19:38] <jmerelo> AlexDaniel: some instances in AWS are memory-intensive, other CPU-intensive, other storage-intensive. Prices really vary. I was trying to find out which one would be the best

[19:38] <AlexDaniel> IIRC rakudo memory usage improved quite a bit and you no longer need crazy amounts of RAM

[19:39] <jmerelo> rba: https://docs.raku.org/ is live

[19:39] <AlexDaniel> so more CPU, just a bit of storage (if any at all, doesn't matter), and it'll be fine

[19:39] <Xliff> AlexDaniel: So I will test those versions, instead.

[19:39] <jmerelo> AlexDaniel: it's not so much about the size, but the speed

[19:39] <jmerelo> Anyway

[19:39] <jmerelo> We're talking a factor of two or something like that here.

[19:39] <Xliff> So, who can explain %?RESOURCES to me? ;)

[19:39] <Xliff> Pretty please?

[19:40] <rba> jmerelo: So, what are the next steps need to switch to docs.raku.org?

[19:41] <jmerelo> Xliff: it's actually now included in the docs: https://docs.perl6.org/language/modules

[19:41] <rba> jmerelo: I have made 301 redirects (permanent) with perl6.org/* -> raku.org/*

[19:41] <jmerelo> rba: not for the documentation, please

[19:41] <rba> jmerelo: That's why I ask. What is the idea to proceed?

[19:41] <jmerelo> rba: it's in this document https://github.com/perl6/doc/issues/3046

[19:42] <jmerelo> And I really need to to AFK now. WRT AWS, if we use reserved instances and memory-intensive computing nodes it will be more or less in the ballpark

[19:43] <rba> jmerelo: thanks for the initial deployment.

[19:43] <jmerelo> rba: But if you want to add something so that it gets up to 1K, you can request double the instances we have now, and we'll allocate resources as we see fit

[19:43] <jmerelo> rba: impossible without your help... :-)

[19:43] * jmerelo goes off to dinner

[19:44] *** ExtraCrispy left
[19:45] *** jmerelo left
[19:45] <rba> jmerelo: Not sure if I can now ask for the double.

[19:45] <tellable6> rba, I'll pass your message to jmerelo

[19:47] <tony-o> filling up the db from p6c for the api

[19:47] <tony-o> oops, not meant for this channel

[19:52] <Xliff> AlexDaniel: "Use of Nil in string context".

[19:52] <AlexDaniel> e: my $proc = Proc::Async.new: $*EXECUTABLE, "-e", "sleep 1"; my $prom = $proc.start; $proc.kill; await $prom; say ‚Äòfinished‚Äô;

[19:52] <evalable6> AlexDaniel, rakudo-moar 9f433da0d: OUTPUT: ¬´(exit code 1) The spawned command '/tmp/whateverable/rakudo-moar/9f433da0d67cfff5e0b8eacaf5d4c0abbf7c6ef4/bin/perl6' exited unsuccessfully (exit code: 0, signal: 1)‚ê§  in block <unit> at /tmp/BmM_irnuQ5 line 1‚ê§‚ê§¬ª

[19:52] <Xliff> Please note, This module is not currently installed. I thought using %?RESOURCES would handle both the "installed" and "not-installed" situations.

[19:53] <AlexDaniel> c: 2019.07.1 my $proc = Proc::Async.new: $*EXECUTABLE, "-e", "sleep 1"; my $prom = $proc.start; $proc.kill; await $prom; say ‚Äòfinished‚Äô;

[19:53] <committable6> AlexDaniel, ¬¶2019.07.1: ¬´finished‚ê§¬ª

[19:53] <AlexDaniel> c: HEAD,HEAD,HEAD,HEAD,HEAD,HEAD,HEAD,HEAD,HEAD,HEAD,HEAD,HEAD my $proc = Proc::Async.new: $*EXECUTABLE, "-e", "sleep 1"; my $prom = $proc.start; $proc.kill; await $prom; say ‚Äòfinished‚Äô;

[19:53] <committable6> AlexDaniel, https://gist.github.com/d8fcb3b7529e7db4dea9ee75e742d916

[19:53] <AlexDaniel> bisect: old=2019.07.1 my $proc = Proc::Async.new: $*EXECUTABLE, "-e", "sleep 1"; my $prom = $proc.start; $proc.kill; await $prom; say ‚Äòfinished‚Äô;

[19:53] <bisectable6> AlexDaniel, Bisecting by exit code (old=2019.07.1 new=9f433da). Old exit code: 0

[19:53] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/cbf4c86dc7504001f43387f3892612d2

[19:53] <bisectable6> AlexDaniel, (2019-09-05) https://github.com/rakudo/rakudo/commit/225b1c56f96f290f4df4804ab95edeeda445227e

[19:54] <AlexDaniel> 6c: my $proc = Proc::Async.new: $*EXECUTABLE, "-e", "sleep 1"; my $prom = $proc.start; $proc.kill; await $prom; say ‚Äòfinished‚Äô;

[19:55] <committable6> AlexDaniel, https://gist.github.com/9f91b4f67275f05c0244c81589bc868c

[19:55] <AlexDaniel> jnthn: what do you think?

[19:56] <nine> Xliff: it does

[19:56] <AlexDaniel> the test looks a bit wrong to me, but can we actually change that?

[19:56] <tyil> ok

[19:56] <tyil> AlexDaniel: am I still needed?

[19:57] <nine> Xliff: if you ask your actual question I may be able to answer it

[19:57] *** Altai-man_ left
[19:59] *** pmurias joined
[19:59] <rba> AlexDaniel: May you let me know min/max for Cores/Memory/Disk-Space and how much GB over network per day or month?

[20:00] <rba> AlexDaniel: Have the feeling that if we like to have a permanent solution, the cheapest would still be to get a used physical server.

[20:01] <rba> AlexDaniel: Eg. https://www.ricardo.ch/de/a/hp-dl360p-gen8-xeon-e5-2650lv2-64gb-1074308174/ (sorry in German) and then ask someone to put it in there datacenter.

[20:01] <AlexDaniel> rba: for memory 16G should be enough, maybe we can get away with less but 16 should be alright. Disk space doesn't matter, and more cores is better (it'll just run faster)

[20:02] <Xliff> nine: Can you use %?RESOURCE data when a module is in an uninstalled state?

[20:03] *** Kaiepi left
[20:03] <Xliff> Because I have a library I've compiled and %?RESOURCES can't seem to locate it. I always get Nil, no matter what key I use.

[20:03] <Xliff> And %?RESOURCES always seems to be empty

[20:05] <tony-o> do you have the resources in your META Xliff ?

[20:05] <Xliff> Yes

[20:05] *** Kaiepi joined
[20:05] <AlexDaniel> rba: what about those cloud services that give that stuff for free? For example, in the past I use a gce instance that had 24 cores, and they give any person free credit for one year

[20:06] <AlexDaniel> rba: so that's how I had trouble-free blinning for a year

[20:06] <Xliff> cd https://glot.io/snippets/fhd17panto

[20:06] <AlexDaniel> rba: but I used to run it just a few times per month, not every day

[20:06] <tony-o> if you're using aws then a reserved instance is p inexpensive

[20:07] <rba> You mean something like this? https://cloud.google.com/free/docs/gcp-free-tier

[20:07] <Xliff> tony-o: That depends on the instance size.

[20:07] <tony-o> i'm using the ECR stuff to run zef ecosystem testing (mirroring github + allowing users to upload/download directly)

[20:08] <tony-o> if it's serving static content and running scripts in the background a medium instance is probably plenty, no?

[20:08] <Xliff> tony-o: Yep. Should be.

[20:08] <AlexDaniel> rba: yes. Also note that running Blin is not entirely secure, because there are modules that do network access and stuff, and I'd much rather allow these tests to run

[20:08] <tony-o> i'll admit, i don't know what they're running

[20:09] <AlexDaniel> rba: and by not entirely I mean completely not secure :)

[20:09] <Xliff> Had a mediam instance just reserved (not running) and it was running me $20/month.

[20:09] <rba> :-)

[20:10] <Xliff> META6.snippet and directory list here -- https://glot.io/snippets/fhd17panto

[20:10] *** donaldh joined
[20:12] <nine> Xliff: need more info. That a full META6.json, directory tree and your invocation of the failing program would help

[20:13] <Xliff> nine: The FULL META6.json is f(*&ing huge. I don't know why you'd need all of it.

[20:14] <nine> What....is in your META6.json to make it huge?

[20:14] <Xliff> GtkPlus

[20:14] <tony-o> would also help:  `find resources -type f`

[20:15] <Xliff> That was included in the snippet!

[20:15] <rba> El_Che: Like to go ahead with builing docker images. What base do you recommend? AlpineLinux? Or which one? Need both Raku and Perl5.

[20:18] <Xliff> I'm loading up a GCP instance.

[20:30] *** donaldh left
[20:31] <El_Che> older zef's are broken it seem

[20:32] <Xliff> 82 seconds to compile CORE.c -- not impressive on the standard setup.

[20:32] <El_Che> rba: will get back to you, I'll probably release new pkgs with a newer zef, but that won't fix zef in $HOME is the breakage is changes in the ecosystem

[20:33] <Xliff> tony-o, nine: Updated snippet https://glot.io/snippets/fhd1xnu2lz

[20:33] <Xliff> I had to remember my login so I can save. :P

[20:33] <nine> Xliff: try perl6 -I. instead

[20:33] <nine> Xliff: oh, %?RESOURCES is for modules

[20:34] <nine> it won't work in a -e like that

[20:34] <Xliff> So it has to be in a .pm6 or can it be a .pl6

[20:35] <nine> It has to be in something that's loaded by a `use`, `require` or `need` statement

[20:35] <rba> El_Che: What is broken in the older zef? I've troulble-shooted ecosystems-api.p6c.or already.

[20:35] <nine> Well actually just `use` and `need` as %?RESOURCES is compile time

[20:35] <rba> El_Che: Wanted to make sure nothing old is broken. There might be many installations around with old zef.

[20:35] <El_Che> I had 0.7.8 and I had to nuke it and install 0.8.1

[20:35] <El_Che> "Method 'content' must be implemented by Zef::Distribution because it is required by roles: Distribution."

[20:36] <El_Che> it also happens on a fresh container so I don't think it's me

[20:36] <Xliff> nine: Well something is happening. I got "Invalid JSON"

[20:36] <El_Che> I'll bump my packages to 0.8.1

[20:37] *** pmurias left
[20:37] <El_Che> 22 distro/releases so it will take a while

[20:37] <El_Che> sadly 2019.07 is a bitch on i386

[20:37] <El_Che> 9/10 test fail on travis, because the timing is to small. It should be fixed on the upcomng rakudo release

[20:38] <rba> El_Che: Doesn't sound like what we had. Anyway was older, was 0.7.1 I guess...

[20:38] *** pmurias joined
[20:39] <El_Che> 0.7.4

[20:39] <El_Che> https://github.com/nxadm/rakudo-pkg/blob/19f2c800c8008625be6541c912f383a39e683666/.travis.yml#L4

[20:39] <El_Che> bumped to 0.8.1 and creating a updated pkg

[20:41] <MasterDuke> pmurias: built a native image of the point benchmark and can run it, but it's even slower

[20:42] <Xliff> How can I convert "2019.07.1-273-g91d53ae7f" to a commit hash?

[20:42] <nine> Xliff: take everything after the -g

[20:43] <Xliff> Ah.

[20:43] <Xliff> I knew that.

[20:43] * Xliff is not having a swell day./

[20:43] <El_Che> rba: anyway, it's a good excuse to introduce the new fedora 31, Ubuntu 19.10 and CentOS 8 packages :)

[20:44] <rba> El_Che++

[20:44] <rba> El_Che: So which base? Alpine?

[20:44] <El_Che> AlexDaniel: a poc Blin img should be up soon once the rakudo-pkgs are built with the new zef

[20:44] <El_Che> rba: for Blin, debian as documented

[20:45] <El_Che> rba: it's a blin image, not a generic rakudon one

[20:45] <rba> El_Che: and for the website raku.org?

[20:45] <El_Che> rba: but creating a generic rakudo image is as simple and adding a FROM <some distro> and adding the rakudo-pkg repo

[20:45] <rba> El_Che: blin image I will try to spin on a server maettu has around...

[20:46] *** pmurias left
[20:46] <AlexDaniel> El_Che: if you can also push the dockerfile or something to perl6/Blin, possibly with the docs on how to get it going, that'd be awesome

[20:46] <El_Che> sure, let's see how to poc goes and then you're free to put it whatever you want (I'll transder the repo)

[20:47] *** pmurias joined
[20:47] *** redable joined
[20:47] <El_Che> https://github.com/nxadm/raku-blin-docker

[20:48] <El_Che> wating on new rakudo-pkg to be sure it work

[20:48] <El_Che> but the idea is to just run : dblin $what_options_and_parameters_you_give_to_blin.p6

[20:48] * rba afk

[20:50] <El_Che> output will be in /var/tmp/blin-output

[20:58] *** redable left
[21:02] * El_Che should have a look at github action: travis hasn't been great the last months...

[21:04] <AlexDaniel> El_Che: maybe do /var/tmp/blin:/Blin so that the whole directory is shared?

[21:04] <El_Che> sure

[21:04] <AlexDaniel> there's also a data folder and other stuff that could be useful

[21:08] *** redable joined
[21:11] <MasterDuke> pmurias: but it got a bunch faster and stopped spewing exceptions when i commented out this line https://github.com/perl6/nqp/blob/truffle/src/vm/jvm/runtime/org/perl6/nqp/truffle/nodes/expression/NQPWValNode.java#L30

[21:26] <Geth_> ¬¶ nqp/truffle: 0b3a4cb89c | (Daniel Green)++ | 2 files

[21:26] <Geth_> ¬¶ nqp/truffle: [truffle] Fixes for native image building

[21:26] <Geth_> ¬¶ nqp/truffle: review: https://github.com/perl6/nqp/commit/0b3a4cb89c

[21:33] <pmurias> MasterDuke: native images are slower

[21:34] <pmurias> MasterDuke: the ones built with the CE version instead of the EE ones have as far as I know (some) JITing disabled

[21:34] <MasterDuke> ah

[21:34] <Xliff> 91d53ae7f <- this is invalid, but I know that was the hash after perl6 2019.07.1-273

[21:34] <Xliff> Trying to bisect something, now.

[21:35] <Xliff> Should identify with a commit made on 20191015

[21:35] <Xliff> Can someone help?

[21:43] <pmurias> MasterDuke: the graalvm team doesn't seem to like talking how the EE version is different tho

[21:43] <MasterDuke> heh, why am i not surprised

[21:46] <pmurias> if this means they put more features in the open source version that way and market the EE version as being superior in an "unspecified way" I'm happy with the arrangement

[21:48] <MasterDuke> sure, no skin off my back

[21:50] <MasterDuke> Xliff: that's a moarvm commit

[21:50] <MasterDuke> Xliff: https://github.com/MoarVM/MoarVM/commit/91d53ae7f

[21:51] <Xliff> Ah.

[21:55] <MasterDuke> pmurias: any suggestions for easy stuff i could do next?

[21:58] <pmurias> t/nqp/019-file-ops.t contains a lot of stuff that seems fairly easy to do

[21:59] <pmurias> OTOH not sure how fun of a task that would be 

[22:04] *** redable left
[22:06] <MasterDuke> oh, i had been looking in there, forgot about that. i'll take a look (probably not this evening though, think i'm going to go play some disgaea 5 for a bit)

[22:09] *** pmurias left
[22:13] *** epony left
[22:25] *** pmurias joined
[22:37] <pmurias> MasterDuke: I'll try to think of something cooler to do 

[23:51] *** epony joined
