[00:19] *** tbrowder left
[00:24] *** tbrowder joined
[00:48] *** tbrowder left
[00:54] *** tbrowder joined
[00:56] *** AlexDaniel joined
[00:56] *** AlexDaniel left
[00:56] *** AlexDaniel joined
[01:37] <AlexDaniel> yup, they didn't like it :)

[01:44] <Geth> ¬¶ problem-solving: vrurg assigned to jnthn Issue Implementation of importing of classes with composite names perhaps needs better consideration https://github.com/perl6/problem-solving/issues/128

[01:48] *** tbrowder left
[01:54] *** tbrowder joined
[02:48] *** tbrowder left
[02:53] *** tbrowder joined
[03:48] *** squashable6 joined
[05:48] *** tbrowder left
[05:49] *** tbrowder joined
[06:04] *** jmerelo joined
[06:07] *** titsuki left
[06:13] <Kaiepi> i'm not sure how i can handle exposing nqp's type parameterization ops through Metamodel::Primitives methods in a way that doesn't make them dependent on which HOW the type given is using

[06:15] <Kaiepi> Metamodel::ParametricRoleGroupHOW always makes the last parameter either a hash of named parameters or a NO_NAMEDS type, but none of the other HOWs in rakudo do anything like this

[06:16] <Kaiepi> the best i can think of is giving the methods that return any of a type's parameters something like a :named parameter, but then people would need to know whether or not the type can actually take named parameters, which idt people will always know to document

[07:10] *** go|dfish left
[07:23] *** go|dfish joined
[07:38] *** jmerelo left
[08:56] *** sena_kun joined
[09:24] <Geth> ¬¶ star: Tyil++ created pull request #144: Get Rakudo Star working for 2019.07.1

[09:24] <Geth> ¬¶ star: review: https://github.com/rakudo/star/pull/144

[09:28] *** Altai-man_ joined
[09:31] *** sena_kun left
[10:44] <El_Che> tyil: your parameters order for rm shocks me: "rm -fr work" :)

[10:46] <tyil> alphabetical order? :p

[11:08] *** tobs joined
[11:29] *** sena_kun joined
[11:31] *** Altai-man_ left
[11:54] <Geth> ¬¶ rakudo: lizmat++ created pull request #3279: Make Instant.perl a bit less noisy

[11:54] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3279

[12:17] <Geth> ¬¶ rakudo/instant-perl: c0b5fb282c | (Elizabeth Mattijsen)++ | src/core.c/Instant.pm6

[12:17] <Geth> ¬¶ rakudo/instant-perl: Make Instant.perl a bit less noisy

[12:17] <Geth> ¬¶ rakudo/instant-perl: 

[12:17] <Geth> ¬¶ rakudo/instant-perl: By removing the "Bool::False" when it is not needed, and use normal

[12:17] <Geth> ¬¶ rakudo/instant-perl: stringification for the Rat representing the posix value.

[12:17] <Geth> ¬¶ rakudo/instant-perl: review: https://github.com/rakudo/rakudo/commit/c0b5fb282c

[12:18] <lizmat> hmmm.. weird that the PR precedes the commit ?

[12:36] <sena_kun> maybe the bot is just not sync enough? shouldn't be too harmful

[12:39] *** AlexDaniel left
[13:12] *** lucasb joined
[13:16] <lizmat> hmmm... am I understanding the lexicality of $_ wrong?

[13:16] <lizmat> m: $_ = 42; if True { say $_ }

[13:16] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´42‚ê§¬ª

[13:16] <jnthn> I don't think so

[13:16] <jnthn> Well, or maybe you're understanding it wrong if you find that surprising ;)

[13:17] <lizmat> I guess I am

[13:17] <jnthn> `if` doesn't topicalize

[13:17] <jnthn> Unlike `with`

[13:17] <jnthn> So maybe that's the confusion.

[13:17] <lizmat> but we agree on that $_ is lexical, right ?

[13:17] <jnthn> Yes, no disagreement there :) I'm not sure how what you wrote would disprove that :)

[13:18] <lizmat> I guess I'm confused because I know that each scope has its own slot for $_ ?

[13:18] <jnthn> I mean, the $_ assignment you make is lexically outside of the place you say $_, so if anything that illustrates its lexicality

[13:18] <lizmat> *apper to know

[13:18] <jnthn> It does, but it defaults to OUTER::<$_>

[13:19] <jnthn> Run perl6 --target=ast -e '$_ = 42; if True { say $_ }' and look for getlexouter

[13:20] <lizmat> ok, thanks for the clarification

[13:21] <lizmat> trying to write up the difference in handling of $_ between Perl and Raku

[13:22] <lizmat> m: sub a { say $_ }; $_ = 42; a    # 42 in Perl

[13:22] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´(Any)‚ê§¬ª

[13:24] <jnthn> Right, 'cus a routine gets a fresh $_ with no defaulting to the outer one; that's a property of blocks rather than routines.

[13:26] <lizmat> hmmm.. but if that's the property of blocks, why does this say 42?

[13:26] <lizmat> m: $_ = 42; { say $_ }

[13:26] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´42‚ê§¬ª

[13:27] <jnthn> 'cus the {...} there is a block? :)

[13:29] *** Altai-man_ joined
[13:30] <lizmat> "that's a property of blocks rather than routines"  ??

[13:31] <lizmat> sorry to be persistent, but I want to truly grok this for fear of spreading misinformation otherwise  :-)

[13:32] *** sena_kun left
[13:38] <lucasb> iiuc, the property in question is: $_ defaulting to OUTER::<$_> in blocks

[13:49] <lucasb> m: my &f = { .say }; $_ = 42; for ^3 { .say; f }

[13:49] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´0‚ê§42‚ê§1‚ê§42‚ê§2‚ê§42‚ê§¬ª

[13:50] <lucasb> is this right? &f sees 42, not the values from the range

[13:55] <lucasb> m: my &f = { .say }; $_ = 42; { .say; f }  # for comparison :)

[13:55] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´42‚ê§42‚ê§¬ª

[13:55] <lizmat> lucasb: yeah, I think that's correct

[13:56] <jnthn> Yes, that illustrates the lexicality nicely, even.

[13:56] <jnthn> And yes, the property I was referring to is defaulting to OUTER::<$_>

[13:57] <lizmat> m: my &f = -> $_? { .say }; $_ = 42; for ^3 { .say; f }   

[13:57] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´0‚ê§(Mu)‚ê§1‚ê§(Mu)‚ê§2‚ê§(Mu)‚ê§¬ª

[13:58] <lizmat> shouldn't that be (Any) ?

[13:59] <lizmat> jnthn: still, there is something funky going on:

[13:59] <lizmat> m: my &f = -> ;; $_? is raw { .say }; $_ = 42; f

[13:59] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´(Mu)‚ê§¬ª

[14:00] <lizmat> m: my &f = { .say }; $_ = 42; f

[14:00] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´42‚ê§¬ª

[14:00] <lizmat> introspection shows that signature of both cases is identical

[14:00] <lizmat> m: my &f = { .say }; dd &f.signature

[14:00] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´:(;; $_? is raw)‚ê§¬ª

[14:00] <lizmat> m: my &f = -> ;; $_? is raw { .say }; dd &f.signature

[14:00] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´:(;; $_? is raw)‚ê§¬ª

[14:00] <lizmat> so there's something else that makes the tow cases different

[14:01] <lizmat> *two

[14:02] <jnthn> I think somehting is off with signature dumping

[14:02] <jnthn> There's a special flag for "obtain the value from the outer"

[14:02] <jnthn> And probably .perl on the signature doesn't account for it

[14:03] <lizmat> ok, then I will look at that

[14:04] <lizmat> jnthn: do we actually have syntax for that flag ?

[14:07] <jnthn> = OUTER::<$the-variable-name>

[14:07] <jnthn> But I think actually we only ever code-gen it for the $_ case

[14:08] <jnthn> (And it's there so we can easily spit out better code)

[14:08] <lizmat> ok, so the signature in that case should be:

[14:08] <lizmat> -> ;; $_ = OUTER:<$_> is raw

[14:09] <lizmat> am about to go on the road for Amsterdam PM meeting, will look at this later today / tomorrow

[14:11] <El_Che> jnthn: new comma, new cro, new rakudo soon: wow

[14:21] <jnthn> lizmat: Looks right to me

[14:26] <jnthn> El_Che: Yes, nice to have things happening :)

[14:30] *** AlexDaniel joined
[14:30] *** AlexDaniel left
[14:30] *** AlexDaniel joined
[14:31] <AlexDaniel> tyil: can you submit a CLA?

[14:32] <AlexDaniel> tyil: so that in the future you can commit to star directly

[14:32] <tyil> CLA?

[14:33] <[Coke]> contributor license agreement.

[14:33] <AlexDaniel> notable6: new-topic CLA

[14:33] <notable6> AlexDaniel, Topic ‚ÄúCLA‚Äù already exists

[14:33] <AlexDaniel> notable6: CLA

[14:33] <notable6> AlexDaniel, 1 note: 2019-08-01T07:40:37Z <AlexDaniel>: https://www.perlfoundation.org/contributor-license-agreement print it out, sign it, scan it in (resize your scan to 250KB or less). Email to trademark -at- perlfoundation.org and don't forget to CC will at coleda.com

[14:35] <tyil> skimming over this, I retain all my rights to my contributions, but I cannot revoke access to them to TPF?

[14:37] <lizmat> afk&

[14:38] *** lizmat left
[14:38] <[Coke]> tyil: That's part of section 4.1/4.2, yes.

[14:38] <tyil> I'll have to read it in more detail before signing it, but it looks OK to me so far

[14:39] <[Coke]> I imagine that helps the foundation not worry about someone removing access to key functionality.

[14:39] <[Coke]> Let us know if you find anything concerning.

[14:39] <tyil> as I don't have a scanner at home, is a picture made by a phone from 8 years ago acceptable?

[14:39] <[Coke]> Probably

[14:51] <[Coke]> tyil: https://gist.github.com/coke/a0cc69f1558d71d0022051a28167b807

[15:17] <tyil> [Coke]: thanks

[15:21] *** lizmat joined
[15:23] <lizmat> jnthn: where does that special flag live for = OUTER:<$_> ?  I don't see it in the Parameter class, is it something in the Block?

[15:25] <lizmat> ah, found it in bootstrap  :-)

[15:29] *** sena_kun joined
[15:31] *** Altai-man_ left
[15:33] <moritz> killall TabNine

[15:34] <[Coke]> O_o;

[15:38] <moritz> sorry, wrong window

[15:38] <moritz> and for the curious: tabnine is a machine learning autocompletion engine that can be plugged into several editors and IDEs

[15:39] <moritz> it's pretty great, except that occasionally, it gobbles up all RAM and CPU :(

[15:46] <lizmat> m: $_ = 66; my &f := -> $_ = OUTER::<$_> { .say }; f

[15:46] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´(Mu)‚ê§¬ª

[15:47] <lizmat> m: $_ = 66; my &f := { .say }; f

[15:47] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´66‚ê§¬ª

[15:47] <lizmat> looks like the syntax -> $_ = OUTER:<$_> won't cut it, roundtrippable wise  jnthn

[15:48] <lizmat> but I guess .perl on Parameters is mostly FYI anyway, rather than to roundtrip

[15:49] <jnthn> Yeah...though I think we have an issue somewhere noting that default thunks are not marked as thunks and so aren't skipped properly

[15:57] <|Tux|> Rakudo version 2019.07.1-460-g044b33902 - MoarVM version 2019.07.1-313-g836396c74

[15:57] <|Tux|> csv-test-xs-20      0.423 -  0.425

[15:57] <|Tux|> csv-ip5xs           0.694 -  0.710

[15:57] <|Tux|> test-t --race       0.826 -  0.830

[15:57] <|Tux|> test-t              1.745 -  1.760

[15:57] <|Tux|> csv-ip5xs-20        6.373 -  6.538

[15:57] <|Tux|> test                6.881 -  7.082

[15:57] <|Tux|> test-t-20 --race    9.089 -  9.116

[15:57] <|Tux|> csv-parser         20.981 - 21.346

[15:57] <|Tux|> test-t-20          28.675 - 29.298

[16:17] <lizmat> yeah, Geth is definitely lagging...

[16:23] <Geth> ¬¶ rakudo: lizmat++ created pull request #3280: Add support for implicit signature of { ... }

[16:23] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3280

[16:26] <AlexDaniel> lizmat: it could also be that github itself is delivering hooks in a weird way

[16:26] <lizmat> yeah, it's probably that

[16:27] <AlexDaniel> actually, yeah: https://www.githubstatus.com/

[16:27] <AlexDaniel> Notifications ‚Äì ‚ÄúDegraded‚Äù

[16:28] <lizmat> m: $_ = 666; sub a($a = OUTER::<$_>) { say $a }; a   # sigh

[16:28] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´(Any)‚ê§¬ª

[16:28] <lizmat> m: INIT $_ = 666; sub a($a = OUTER::<$_>) { say $a }; a   # sigh

[16:28] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´(Any)‚ê§¬ª

[16:28] <AlexDaniel> lizmat: I don't think that's the OUTER you have in mind

[16:28] *** lizmat left
[16:30] *** lizmat joined
[16:30] <lizmat> m: BEGIN $_ = 666; sub a($a = OUTER::<$_>) { say $a }; a   # huh ?

[16:30] <camelia> rakudo-moar 044b33902: OUTPUT: ¬´666‚ê§¬ª

[16:30] <AlexDaniel> lizmat: well, question is what's OUTER in this case

[16:30] <lizmat> so it looks like it is taking the OUTER::<$_> as a literal value at compile time ?

[16:33] *** jmerelo joined
[16:43] *** lizmat left
[17:01] *** lizmat joined
[17:31] *** sena_kun left
[17:38] <Geth> ¬¶ rakudo/outer-perl: e7c20386cf | (Elizabeth Mattijsen)++ | src/core.c/Parameter.pm6

[17:38] <Geth> ¬¶ rakudo/outer-perl: Add support for implicit signature of { ... }

[17:38] <Geth> ¬¶ rakudo/outer-perl: 

[17:38] <Geth> ¬¶ rakudo/outer-perl: The .perl of parameters did not account for the case where a parameter

[17:38] <Geth> ¬¶ rakudo/outer-perl: was taking the $_ of the outer scope.  This is now simulated by adding

[17:38] <Geth> ¬¶ rakudo/outer-perl: " = OUTER<$_>" in that case.  Please note however that this is a bit of

[17:38] <Geth> ¬¶ rakudo/outer-perl: a kludge, as this will *not* roundtrip correctly.  But it will at least

[17:38] <Geth> ¬¶ rakudo/outer-perl: convey the difference with a block that had a specific signature that

[17:38] <Geth> ¬¶ rakudo/outer-perl: was otherwise identical.

[17:38] <Geth> ¬¶ rakudo/outer-perl: review: https://github.com/rakudo/rakudo/commit/e7c20386cf

[17:42] *** lucasb left
[18:18] *** patrickb joined
[18:55] *** robertle joined
[19:16] *** patrickb left
[19:23] *** patrickb joined
[19:33] *** jmerelo left
[20:07] *** lizmat left
[20:08] *** lizmat joined
[20:13] *** ufobat__ joined
[20:17] *** ufobat_ left
[21:01] *** lizmat left
[21:16] <Geth> ¬¶ rakudo: 88db15f73a | (Aleks-Daniel Jakimenko-Aleksejev)++ | .github/FUNDING.yml

[21:16] <Geth> ¬¶ rakudo: Append myself to the list

[21:16] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/88db15f73a

[21:33] *** TreyHarris joined
[21:51] *** go|dfish left
[22:05] *** go|dfish joined
[23:34] <Geth> ¬¶ rakudo: e7c20386cf | (Elizabeth Mattijsen)++ | src/core.c/Parameter.pm6

[23:34] <Geth> ¬¶ rakudo: Add support for implicit signature of { ... }

[23:34] <Geth> ¬¶ rakudo: 

[23:34] <Geth> ¬¶ rakudo: The .perl of parameters did not account for the case where a parameter

[23:34] <Geth> ¬¶ rakudo: was taking the $_ of the outer scope.  This is now simulated by adding

[23:34] <Geth> ¬¶ rakudo: " = OUTER<$_>" in that case.  Please note however that this is a bit of

[23:34] <Geth> ¬¶ rakudo: a kludge, as this will *not* roundtrip correctly.  But it will at least

[23:34] <Geth> ¬¶ rakudo: convey the difference with a block that had a specific signature that

[23:34] <Geth> ¬¶ rakudo: was otherwise identical.

[23:34] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/e7c20386cf

[23:34] <Geth> ¬¶ rakudo: 1d84c64d63 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/core.c/Parameter.pm6

[23:34] <Geth> ¬¶ rakudo: Merge pull request #3280 from rakudo/outer-perl

[23:34] <Geth> ¬¶ rakudo: 

[23:34] <Geth> ¬¶ rakudo: Add support for implicit signature of { ... }

[23:34] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/1d84c64d63

