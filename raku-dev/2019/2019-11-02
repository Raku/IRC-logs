[00:03] <vrurg> jnthn: I just would like to merge it after the release due to many other things fixed. Don't want the ops to impeed the merge.

[00:03] <AlexDaniel> please no more operators, especially whole family of operators, especially ones that won't be used that often

[00:04] <jnthn> AlexDaniel: They're not really operators, at least in how they're parsed; more just modifiers on `.`

[00:05] <jnthn> But yeah, I'm not yet convinced whether they're worth a short syntax.

[00:05] <AlexDaniel> jnthn: yeah but excuses won't make the code using them more readable :S

[00:05] <vrurg> AlexDaniel: besides, I beeter have $obj.?+foo(...) than $obj.^batch-call('foo', \(...))

[00:06] <vrurg> I doubt the second is more readable than the first.

[00:07] <AlexDaniel> it kinda is

[00:07] <jnthn> AlexDaniel: Well, "different things should look different" (and perhaps "odd things should look odd") are pretty much design principles...

[00:07] <jnthn> But yeah, I'm far from sure about the new . modifiers at this point.

[00:08] <jnthn> The problem with the second one isn't just readability, but also efficiency.

[00:08] <vrurg> I'm not a big fan of new ops either. But found no better solution. 

[00:08] <jnthn> But again, I'm not sure how relevant that is

[00:09] <jnthn> I mean, we have .* and .+ but in reality BUILDALL is custom-compiled to incldue calls to them

[00:09] <vrurg> That's why I proposed experimental status. 

[00:09] <jnthn> Rather than using the operators

[00:09] <jnthn> (To be clear, to include calls to the BUILD submethods)

[00:09] <jnthn> Plus BUILD and TWEAK have to be interleaved

[00:10] <jnthn> I can't remember actually using .+ and .*. I can imagine situations when they'd be useful, I just haven't ended up factoring things that way.

[00:10] <jnthn> Maybe that's 'cus I tend to be a light user of inheritance anyway... :)

[00:10] <vrurg> Interleaving is the biggest reason ops are not applicable to them. But current design makes submethods pretty much useless for a developer. 

[00:11] <AlexDaniel> jnthn: does Comma show docs for operators when you hover on them?

[00:11] <vrurg> The PR changes the situation and provides more opportunities for using submethods.

[00:12] <jnthn> AlexDaniel: It will. We didn't get to it in the current release (the current one is just the start of the integrated docs effort).

[00:13] <jnthn> It's only this one when we started showing docs from doc comments in current source and from used modules, plus from perl6/doc for the built-ins.

[00:14] <jnthn> And that's *nice*, but there's still a load to polish there

[00:19] <AlexDaniel> I see

[00:20] <jnthn> That's why I added a bunch of doc comments to the current Cro release :)

[03:08] <japhb> jnthn: The problem I had earlier with die and react whenever turned out to be a braino.  Rereading https://rt.perl.org/Public/Bug/Display.html?id=130716 carefully yet again yielded new insights.  That's one seriously info-dense bug.

[04:08] *** squashable6 left
[04:11] *** squashable6 joined
[05:16] *** squashable6 left
[05:19] *** squashable6 joined
[07:22] *** AlexDani` joined
[07:23] *** AlexDaniel left
[08:28] *** sena_kun joined
[08:28] <lizmat> Files=1277, Tests=109554, 210 wallclock secs (28.37 usr  7.63 sys + 2933.11 cusr 260.04 csys = 3229.15 CPU)

[08:29] *** sena_kun left
[08:54] <tyil> AlexDaniel`: new output is here https://gitlab.com/tyil/rakudo-star/-/jobs/339846981

[08:55] *** sena_kun joined
[09:04] <tyil> https://github.com/rakudo/rakudo/issues/3274

[09:12] <lizmat> afk for most of the day&

[09:31] <tyil> looks like there's an Any in between each signal which I guess shouldn't be the case

[09:32] <tyil> I could apply a grep and filter out all Any values, but then everything would be shifted one to the left, which could be fixed by inserting an Any at the front again

[09:32] <tyil> but that sounds very dirty ;~;

[09:37] *** ExtraCrispy left
[09:43] *** Altai-man_ joined
[09:45] *** sena_kun left
[10:29] <MasterDuke> pmurias: how should decont be done for truffle?

[10:37] <MasterDuke> huh, why is the jvm spurt implementation so complicated?

[10:49] *** timo1 joined
[10:53] <pmurias> MasterDuke: re decont I think a node with @Specialization for various things it gets

[10:53] <pmurias> MasterDuke: most of the time decont is a noop

[10:54] <pmurias> MasterDuke: what do you mean by the jvm suprt implementation?

[10:56] <pmurias> MasterDuke: if you are looking at nqp::spurtasync it doesn't seem to be used anywhere so I don't think there is any need to implement that

[11:44] *** sena_kun joined
[11:45] *** Altai-man_ left
[12:00] *** ggoebel joined
[12:24] *** donaldh joined
[12:31] *** [Tux] left
[12:36] *** donaldh left
[12:39] *** [Tux] joined
[12:46] *** lucasb joined
[13:03] *** ggoebel left
[13:09] <MasterDuke> pmurias: spurt, slurp, and lines from https://github.com/perl6/nqp/blob/truffle/src/vm/jvm/runtime/org/perl6/nqp/io/AsyncFileHandle.java are what i was surprised by. nqp::open on the jvm creates a AsyncFileHandle, which is why i'm doing it

[13:11] <pmurias> MasterDuke: the low level spurt doesn't seem to be used for anything

[13:12] <MasterDuke> pmurias: as i understand it, those are for the convenience subs nqp provides

[13:13] <MasterDuke> so yeah, probably not a high priority

[13:14] <pmurias> MasterDuke: spurt seems to be only used by the nqp::spurtasync op

[13:15] <pmurias> MasterDuke: which I assume is some no longer used relic

[13:15] <MasterDuke> it's not used in rakudo at all

[13:16] <MasterDuke> huh, it's only in nqp-jvm

[13:16] <pmurias> and it's not implemented on other backends so we don't need that

[13:17] <pmurias> AsyncFileHandle is created by nqp::openasync

[13:17] <pmurias> not nqp::open

[13:18] <MasterDuke> argh, i was looking at the wrong thing!

[13:19] <jnthn> Pretty much all string I/O is coordinated at Rakudo level these days, only demanding binary I/O of the runtime level (and decoder stuff)

[13:21] *** [Tux] left
[13:21] *** [Tux] joined
[13:22] <MasterDuke> jnthn: how recent were any nqp changes that were done for that? maybe we should do the work to rebase up to head if it means we don't have to implement a bunch of stuff that would then just get thrown away

[13:24] <jnthn> MasterDuke: Long ago I don't remember when :) At least a year, surely.

[13:24] <jnthn> Possibly 2+ years 

[13:25] <MasterDuke> hm, i think the truffle branch is pretty old. do you know an easy way to check if it's after that change?

[13:25] <jnthn> I'd just git log on NQP's src/core/IO.nqp or whatever that file is actually called :)

[13:28] <MasterDuke> i see things like `Implement readchars in NQP IO handle.`, `open/close/spew/spurt use NQPFileHandle.`, `Implement set-encoding in NQP file handle.` by you in may 2017

[13:28] <jnthn> That sounds like it.

[13:28] <jnthn> So, 2+ years. :D

[13:29] <MasterDuke> ok, sounds like we're good then

[13:30] <pmurias> MasterDuke: I don't think there have been gigantic changes to nqp-jvm backend since the start of the branch

[13:30] <pmurias> MasterDuke: there are no longer used ops in HEAD nqp

[13:32] <jnthn> I'm pretty sure I didn't do any cleanup of the JVM stuff after doing the I/O changes, just the additions needed to get things working. So there's surely dead code.

[13:43] *** Altai-man_ joined
[13:44] <MasterDuke> pmurias: truffle doesn't have a SixModelObject, right? https://github.com/perl6/nqp/blob/truffle/src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java#L389

[13:46] *** sena_kun left
[13:48] <El_Che> AlexDaniel`: �� No regressions found, dot file not saved

[13:48] <El_Che> will save the output dir

[13:50] <pmurias> MasterDuke: we don't, we use Object instead (will look at the code after food)

[14:06] <pmurias> MasterDuke: I assume that "types" put in hllConfig are TypeObjects

[14:11] <MasterDuke> pmurias: i think i have nqp::open done, but it's obviously not easy to test until i also have nqp::(read|write)fh

[14:13] <Geth_> ¦ nqp/truffle: d49239bb03 | (Daniel Green)++ | 8 files

[14:13] <Geth_> ¦ nqp/truffle: [truffle] Add nqp::open

[14:13] <Geth_> ¦ nqp/truffle: 

[14:13] <Geth_> ¦ nqp/truffle: However, it's hard to test if it actually works without

[14:13] <Geth_> ¦ nqp/truffle: nqp::(read|write)fh also implemented, so caveat emptor.

[14:13] <Geth_> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/d49239bb03

[14:14] <MasterDuke> pmurias: ^^^ anything look off?

[14:21] <El_Che> AlexDaniel`: for you information: # du -sh Bl

[14:21] <El_Che> in-volume-new/

[14:21] <El_Che> AlexDaniel`: 12G

[14:22] <El_Che> so it looks like you need around 14gb space to run Blin on docker

[14:24] <El_Che> AlexDaniel`: output is here: claudio.ulyssis.be/var/tmp/output.tar.gz

[14:24] <El_Che> AlexDaniel`: output is here: http://claudio.ulyssis.be/var/tmp/output.tar.gz

[14:35] <El_Che> AlexDaniel`: I will run it again, as it seems the newer image was not there yet when it started

[14:39] <El_Che> AlexDaniel`: I wonder if ssh isn't a problem on itself. I fixed the unknonw host problem, but it does not mean you can clone those repos: https://gist.github.com/nxadm/d51c57553835b7ac927cd367c13bb282

[14:40] <El_Che> AlexDaniel`: so the unknow host thing may be a red herring and those modules should really point to https

[14:48] <pmurias> MasterDuke: seems correct

[14:49] <MasterDuke> good

[14:52] *** timo1 is now known as timotimo

[14:52] *** AlexDani` is now known as AlexDaniel

[14:53] *** AlexDaniel left
[14:53] *** AlexDaniel joined
[14:54] <El_Che> AlexDaniel`: ^--

[14:55] <AlexDaniel> El_Che: actually…

[14:55] <AlexDaniel> El_Che: your output says that 1100 modules are OK

[14:55] <AlexDaniel> El_Che: previous run was 1055 OK modules

[14:55] <AlexDaniel> so whatever the difference is, your setup is better

[14:56] <El_Che> now running with the ssh fix, so curious about that, but see the remark above about ssh clonin

[14:56] <El_Che> g

[14:56] <AlexDaniel> El_Che: we should just PR all modules with that issue

[14:57] <AlexDaniel> so… hm

[14:58] <AlexDaniel> interestingly, “Unicode::GCB – Flapper”

[14:59] <AlexDaniel> this one should've been bisected, actually

[15:00] <El_Che> so missing dep?

[15:00] <El_Che> I changed to deps from the indructions because they were outdated

[15:01] <El_Che> libqt-something-3 to 4 and jre-default to default-jre

[15:01] <AlexDaniel> El_Che: no, Flapper means it tested it on HEAD and it failed, then it tested it on 2019.07.1 and it succeeded. Then to make sure it's not random it did a few extra runs and got different results

[15:02] <El_Che> Oh

[15:02] <AlexDaniel> this could be because it just crashed for random reason on 2019.07.1

[15:03] <AlexDaniel> but in my experience rakudo is not that unstable…

[15:03] <AlexDaniel> so hmm

[15:03] <AlexDaniel> El_Che: you're doing another run, right?

[15:03] <AlexDaniel> either way, previous run was clean, and this time we got more OK results, so it can't possibly be bad

[15:04] <El_Che> Yes, running one with the ssh changes as we speak

[15:04] <AlexDaniel> samcv: green light from me. We'll be doing some extra checks because I'm paranoid, but there are no issues whatsoever

[15:05] <El_Che> mm, I didn't clean the output dir, is that bad?

[15:05] <El_Che> restart with a new one?

[15:05] <AlexDaniel> El_Che: doesn't matter

[15:05] <El_Che> ah ok, I'll keep it running then

[15:06] <El_Che> AlexDaniel: in the future we can run the image with podman instead of the docker daemon because it doesn't require root

[15:07] <MasterDuke> pmurias: ugh, readfh is going to be more annoying that i thought. and the existing writefh will likely need some work too

[15:08] <AlexDaniel> there are now release branches in nqp and rakudo

[15:29] <discord6> <kelly> what are you guys testing?is there a release coming?

[15:31] <pmurias> MasterDuke: doing readfh and writefh properly requires implementing decoding/encoding (t/nqp/082-decode.t)

[15:31] <pmurias> not the most fun stuff

[15:32] <MasterDuke> yeah, i'm seeing that

[15:32] <AlexDaniel> kelly: yes :)

[15:45] *** Altai-man_ left
[16:00] <El_Che> AlexDaniel: ⏳ 403 out of 1343 modules processed

[16:00] <El_Che> (off to the supermarket)

[16:05] *** ggoebel joined
[16:10] <pmurias> MasterDuke: something at least a little more interesting would be to implement 'if ... -> $cond {}'

[17:33] <MasterDuke> shouldn't https://github.com/perl6/nqp/blob/master/src/QRegex/NFA.nqp#L287-L288 just be `my str $litconst_lc := nqp::fc($node[0]);`?

[17:34] <MasterDuke> (with appropriate changes after)

[17:58] *** SmokeMachine left
[17:59] *** SmokeMachine joined
[18:12] <Kaeipi> should Metamodel::Primitives have methods for nqp's can and type parameterization ops?

[18:12] <Kaeipi> those are the main reason a library i'm writing is stuck using nqp

[18:23] <jnthn> Yes for the type parameterization ones; for nqp::can you can just do .^can, no? I mean, it's already something you ask the MOP, not really a primitive.

[18:23] <jnthn> I thought the type parameterization ones were already in Metamodel::Primitives.

[18:28] <Kaeipi> ik .^can exists, but it isn't guaranteed to exist on a HOW

[18:40] <Kaeipi> afaik at least

[18:41] <jnthn> Right, but .^find_method *is*, because nqp::can is defined in terms of nqp::findmethod which at least falls back to .^find_method

[18:42] <jnthn> Possibly it's worth it for avoiding going via the MOP, though

[18:42] <jnthn> Well, to hit the cache

[19:02] <pmurias> MasterDuke: that seems to be incorrect

[19:02] <pmurias> MasterDuke: ß will match sS using nqp::eqatic

[19:02] <pmurias> MasterDuke: so the NFA matching will have differen semantics

[19:27] *** pmurias left
[20:09] *** Kaeipi left
[20:10] *** Kaeipi joined
[20:20] *** MasterDukeMobile joined
[20:21] <MasterDukeMobile> pmurias: to confirm, you also think the *existing* code is incorrect?

[20:21] <tellable6> MasterDukeMobile, I'll pass your message to pmurias

[20:25] *** pmurias joined
[20:26] <pmurias> MasterDuke: yes, the NFA and regular case insensitive matching *currently* works differently when matching ß and sS

[20:26] <tellable6> 2019-11-02T20:21:29Z #raku-dev <MasterDukeMobile> pmurias: to confirm, you also think the *existing* code is incorrect?

[20:27] <MasterDukeMobile> Should be a relatively easy fix. Not exactly sure how to craft a test case, but I think something with interpolating a literal value should do it

[20:28] *** Kaiepi joined
[20:28] *** Kaeipi left
[20:29] <MasterDukeMobile> E.g., match ß against an interpolated sS

[20:30] *** MasterDukeMobile left
[20:32] *** MasterDukeMobile joined
[20:32] *** MasterDukeMobile left
[20:52] <pmurias> MasterDuke: match something using the NFA

[20:52] <pmurias> MasterDuke: and match something without using the NFA

[21:01] <pmurias> MasterDuke: using say | for the NFA case and having for example an action that stops NFA for the other case

[21:11] <discord6> <kelly> will the new release contain jnthn's EA and other optimization that he talked about in conf

[21:48] <AlexDaniel> it has a bunch of stability and performance improvements

[21:49] <AlexDaniel> don't know about EA, but regardless of that it's a much better release

[21:53] *** ggoebel left
[21:57] <jnthn> There's some EA stuff that ain't ready for merge yet. I'll get back to it soon; I've been distracted with a mixture of AFK stuff, the rename stuff, etc.

[21:57] <jnthn> I really don't want to merge it until I'm feeling really confident about it.

[22:16] *** lucasb left
[22:30] <discord6> <kelly> cool

[23:31] *** pmurias left
