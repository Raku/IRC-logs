[00:20] *** librasteve_ left
[07:00] <patrickb> leont, timo: Is this the bug you're referring to: https://github.com/Leont/yamlish/issues/19

[07:00] <patrickb> ?

[09:54] <Geth> ¦ rakudo/main: 3dbf9c8373 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[09:54] <Geth> ¦ rakudo/main: RakuAST: make RAKU_LANGUAGE_VERSION=vxxx actually work

[09:54] <Geth> ¦ rakudo/main: 

[09:54] <Geth> ¦ rakudo/main: Added originally in 2023 with 632f952b0a, it was missing a crucial

[09:54] <Geth> ¦ rakudo/main: additional change to make it actually work.

[09:54] <Geth> ¦ rakudo/main: 

[09:54] <Geth> ¦ rakudo/main: So this now allows one to set the Raku language version to be used

[09:54] <Geth> ¦ rakudo/main: for a program *without* actually needing to change the code, *provided*

[09:55] <Geth> ¦ rakudo/main: <…commit message has 17 more lines…>

[09:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3dbf9c8373

[10:03] <lizmat> m: say sqrt(-1)

[10:03] <camelia> rakudo-moar 0eef26e18: OUTPUT: «NaN␤»

[10:03] <lizmat> m: use v6.*; say sqrt(-1)

[10:03] <camelia> rakudo-moar 0eef26e18: OUTPUT: «0+1i␤»

[10:03] <lizmat> so, how are we going to handle that in a test?

[10:10] <lizmat> I guess separating them into a different file with a use v6.c

[10:14] <Geth> ¦ roast: f058418278 | (Elizabeth Mattijsen)++ | 2 files

[10:14] <Geth> ¦ roast: Accommodate tests for sqrt(negative number) in 6.e+

[10:14] <Geth> ¦ roast: 

[10:14] <Geth> ¦ roast: The result of sqrt(-1) changed to the complex number i in 6.e.

[10:14] <Geth> ¦ roast: Accommodate for this by moving these tests to a separate file

[10:14] <Geth> ¦ roast: with a "use v6.c" included, and change the tests in the original

[10:14] <Geth> ¦ roast: file to the value expected in 6.e+, and todoing them now to prevent

[10:14] <Geth> ¦ roast: spectest breakage until 6.e has become the default.

[10:15] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f058418278

[10:15] <lizmat> that's one down

[10:27] <Geth> ¦ roast: 6216239c3f | (Elizabeth Mattijsen)++ | 2 files

[10:27] <Geth> ¦ roast: Accommodate tests for sign(Complex) in 6.e+

[10:27] <Geth> ¦ roast: 

[10:27] <Geth> ¦ roast: The result of sign(i) changed to return a complex number rather

[10:27] <Geth> ¦ roast: than throwing an exception.  Accommodate for this by moving this

[10:27] <Geth> ¦ roast: tests to a separate file with a "use v6.c" included, and change

[10:27] <Geth> ¦ roast: the test in the original file to the value expected in 6.e+, and

[10:27] <Geth> ¦ roast: todoing them now to prevent spectest breakage until 6.e has become

[10:27] <Geth> ¦ roast: the default.

[10:27] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6216239c3f

[10:27] <lizmat> that's two

[12:02] <Geth> ¦ roast: 27cbd41108 | (Elizabeth Mattijsen)++ | 2 files

[12:02] <Geth> ¦ roast: Accommodate tests for log(-Ing) in 6.e+

[12:02] <Geth> ¦ roast: 

[12:02] <Geth> ¦ roast: The result of log(-Inf) changed to return a complex number rather

[12:02] <Geth> ¦ roast: than returning NaN.  Accommodate for this by moving this tests to

[12:02] <Geth> ¦ roast: a separate file with a "use v6.c" included, and change the test in

[12:02] <Geth> ¦ roast: the original file to the value expected in 6.e+, and todoing them

[12:02] <Geth> ¦ roast: now to prevent spectest breakage until 6.e has become the default.

[12:02] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/27cbd41108

[12:02] <lizmat> and that's three

[12:24] <lizmat> m: dd SetHash[Str]

[12:24] <camelia> rakudo-moar 3dbf9c837: OUTPUT: «Bool  = SetHash[Str]␤»

[12:24] <lizmat> m: use v6.*; dd SetHash[Str]

[12:24] <camelia> rakudo-moar 3dbf9c837: OUTPUT: «===SORRY!===␤lang-call cannot invoke object of type 'VMNull' belonging to no language␤»

[12:24] <lizmat> meh

[14:09] <lizmat> looks like this is caused by: base.^name ~ '[' ~ type.^name ~ ']' in SetHash.^parameterize

[14:37] <timo> for some reason i didn't see that bug. the explanation that it's blocks inside of "before" assertions sounds like a fit for why my change improves things

[14:38] <lizmat> timo: conctext?

[14:38] <lizmat> *context :-)

[15:01] <Geth> ¦ rakudo/main: 7bf0d52b66 | (Elizabeth Mattijsen)++ | 6 files

[15:01] <Geth> ¦ rakudo/main: Fix weird interaction in 6.e with string concatenation in ^parameterize

[15:01] <Geth> ¦ rakudo/main: 

[15:01] <Geth> ¦ rakudo/main: Methods with a ^ at the start of the name are weird in the sense

[15:01] <Geth> ¦ rakudo/main: that they don't exist as a method of the class itself, but that

[15:01] <Geth> ¦ rakudo/main: they're mixed in the metamodel class of the class (which is usually

[15:01] <Geth> ¦ rakudo/main: written in NQP).

[15:01] <Geth> ¦ rakudo/main: 

[15:01] <Geth> ¦ rakudo/main: <…commit message has 14 more lines…>

[15:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7bf0d52b66

[15:01] <lizmat> that one was weird

[15:04] <timo> the yamlish bug

[15:04] <timo> that patrick linked to before

[15:09] <lizmat> aah... ok... :-)

[20:20] *** rakkable left
[22:26] <Geth> ¦ rakudo/main: c262ef0b2a | (Elizabeth Mattijsen)++ | lib/NativeCall/Dispatcher.rakumod

[22:26] <Geth> ¦ rakudo/main: Fix NativeCall::Dispatcher in 6.e

[22:26] <Geth> ¦ rakudo/main: 

[22:26] <Geth> ¦ rakudo/main: Running tests with RAKU_LANGUAGE_VERSION=v6.* showed that NativeCall

[22:26] <Geth> ¦ rakudo/main: stopped working because PseudoStashes have changed subtly in 6.e,

[22:26] <Geth> ¦ rakudo/main: causing nqp::getattrs to fail because "PseudoStash" now means the

[22:26] <Geth> ¦ rakudo/main: 6.e version, which doesn't have a `$!ctx` attribute.

[22:26] <Geth> ¦ rakudo/main: 

[22:26] <Geth> ¦ rakudo/main: Fixed this by using CORE::v6c::PseudoStash instead (vrurg++ for the

[22:26] <Geth> ¦ rakudo/main: suggestion).  However, this also required NativeCall::Dispatchers to

[22:26] <Geth> ¦ rakudo/main: be running on 6.e.PREVIEW, because CORE::v6c::... isn't set in 6.d

[22:26] <Geth> ¦ rakudo/main: (nor is it in 6.c).

[22:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c262ef0b2a

