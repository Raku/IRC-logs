[08:45] *** sena_kun joined
[12:08] *** librasteve_ left
[12:29] <lizmat> notable6: weekly

[12:29] <notable6> lizmat, 5 notes: https://gist.github.com/32e02500a372f2294969b9fa301204f2

[12:30] <lizmat> notable6: weekly reset

[12:30] <notable6> lizmat, Moved existing notes to “weekly_2025-02-03T12:30:05Z”

[12:31] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/02/03/2025-05-trixie-awaits/

[13:32] *** japhb left
[15:25] <Geth> ¦ rakudo/main: e6f0771a3c | (Elizabeth Mattijsen)++ | src/core.c/Map.rakumod

[15:25] <Geth> ¦ rakudo/main: Simplify Hash/Map.new

[15:25] <Geth> ¦ rakudo/main: 

[15:25] <Geth> ¦ rakudo/main: The nqp::create(Hash/Map) automagically creates the $!storage hash

[15:25] <Geth> ¦ rakudo/main: attribute nowadays

[15:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e6f0771a3c

[15:26] <Geth> ¦ rakudo/main: ddf0734344 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Map.rakumod

[15:26] <Geth> ¦ rakudo/main: Make Map|Hash.new( a => 42, b => 666) more DWIM

[15:26] <Geth> ¦ rakudo/main: 

[15:26] <Geth> ¦ rakudo/main: Inspired by https://github.com/rakudo/rakudo/issues/3211 and the

[15:26] <Geth> ¦ rakudo/main: fact that I've run into this several times myself, and have had to

[15:26] <Geth> ¦ rakudo/main: explain why that didn't work.

[15:26] <Geth> ¦ rakudo/main: 

[15:26] <Geth> ¦ rakudo/main: I think it's fine to make an exception for Map.new / Hash.new and

[15:26] <Geth> ¦ rakudo/main: all of its subclasses

[15:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ddf0734344

[15:46] <Geth> ¦ roast: c2608389f8 | (Elizabeth Mattijsen)++ | 2 files

[15:46] <Geth> ¦ roast: Add tests for #3211

[15:46] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c2608389f8

[15:52] <Geth> ¦ rakudo/main: 9ece34b2b4 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Hash/Object.rakumod

[15:52] <Geth> ¦ rakudo/main: Throw coercion failures on object hashes

[15:52] <Geth> ¦ rakudo/main: 

[15:52] <Geth> ¦ rakudo/main: If an object hash is defined with a coercion type (e.g. Int(Str))

[15:52] <Geth> ¦ rakudo/main: the Failure of the coercion would be stored as the key.  Only to

[15:52] <Geth> ¦ rakudo/main: thrown whenever that key would be accessed in the hash, e.g. with

[15:52] <Geth> ¦ rakudo/main: .keys.

[15:52] <Geth> ¦ rakudo/main: 

[15:52] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[15:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9ece34b2b4

[16:00] <[Coke]> Should that go a step further and not create a failure that can be stored but instead throw there?

[16:01] <lizmat> possibly, but that gets into signature binding area... and that's something I'm still working up the courage to (re)-visit

[16:01] <[Coke]> or, different question: do we have guidance on core items where failures are OK vs. exceptions? (and then cases like this where failures should immediately explode?)

[16:01] <lizmat> I don't think we have an official "guidance" on that

[16:02] <[Coke]> heh. looking at https://github.com/rakudo/rakudo/issues/3211 trying to figure out why there's a smiley face on the ticket (figured it out. :)

[16:02] <[Coke]> OK - Figured this was a topic that we might have started out 

[16:03] <[Coke]> er, as consistent, but is very easy to have situations where we throw vs. fail that might eventually want a review.

[16:03] <[Coke]> Maybe a topic for 6.f

[16:03] <[Coke]> 6.Fail 1

[16:05] <lizmat> hehe

[16:05] <lizmat> sure  :-)

[16:09] <Geth> ¦ roast: cabd39fd8f | (Elizabeth Mattijsen)++ | S09-hashes/objecthash.t

[16:09] <Geth> ¦ roast: Add test for #4301

[16:09] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/cabd39fd8f

[16:43] *** japhb joined
[17:51] <Geth> ¦ rakudo/main: e4157a41d8 | (Elizabeth Mattijsen)++ | 2 files

[17:51] <Geth> ¦ rakudo/main: Make Instant.DateTime timezone aware in 6.e

[17:51] <Geth> ¦ rakudo/main: 

[17:51] <Geth> ¦ rakudo/main: By making it properly revision gated, ab5tract++

[17:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e4157a41d8

[18:16] <Geth> ¦ rakudo/main: 80c21053f6 | (Elizabeth Mattijsen)++ | 2 files

[18:16] <Geth> ¦ rakudo/main: Properly revision gate Date.DateTime

[18:16] <Geth> ¦ rakudo/main: 

[18:16] <Geth> ¦ rakudo/main: The proto must have the trait applied as well

[18:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/80c21053f6

[18:55] <Geth> ¦ rakudo/main: 3b8e50942a | (Elizabeth Mattijsen)++ | src/core.e/Fixups.rakumod

[18:55] <Geth> ¦ rakudo/main: Make Int.uniname return Failure on unassigned in 6.e

[18:55] <Geth> ¦ rakudo/main: 

[18:55] <Geth> ¦ rakudo/main: This effectively implements PR 5658, but for 6.e only.  Sadly it

[18:55] <Geth> ¦ rakudo/main: turned out to be impossible to use true revision gating, as the

[18:55] <Geth> ¦ rakudo/main: almost all dispatch then turned in to ambiguous dispatches.  So

[18:55] <Geth> ¦ rakudo/main: just implement a 6.e candidate, and make that the default.

[18:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3b8e50942a

[19:02] <timo> random idea dump: if we have a "scan" in a regex followed by an NFA invocation, could we reasonably run the NFA in scanning mode? instead of running the NFA over and over again after advancing one step each time for example?

[19:04] <jdv> i feel like i've asked this before but is there info somewhere about @larrys ideas in optimizing the regex engine?

[19:11] <timo> not sure

[19:12] <timo> i'm also feeling like from something like \d\d '-' \d\d '-' \d\d\d\d we could totally build a thing that can immediately go into the needle string search algorithm we are already using, just with a different generation for the lookup table

[19:19] <timo> also maybe someone wants to highlight to these users that \d covers more than just 0..9, but also stuff in the higher unicode spheres

[22:29] <lizmat> m: dd 42.can("gist")

[22:29] <camelia> rakudo-moar 3b8e50942: OUTPUT: «(proto method gist (Mu $:: |) {*}, proto method gist (Mu $:: |) {*})␤»

[22:29] <lizmat> why two ?

[22:29] <lizmat> m: dd 42.can("gist").map({.file ~ ": " ~ .line})

[22:29] <camelia> rakudo-moar 3b8e50942: OUTPUT: «("SETTING::src/core.c/Mu.rakumod: 913", "SETTING::src/core.c/Mu.rakumod: 913").Seq␤»

[22:29] <lizmat> they go back to the same?

[22:30] <lizmat> m: dd 42.can("gist")>>.WHERE

[22:30] <camelia> rakudo-moar 3b8e50942: OUTPUT: «(2426165487480, 2426165275064)␤»

[22:30] <lizmat> but they are different?

[22:30] <lizmat> bisectable6: old=2024.01 dd 42.can("gist")

[22:30] <bisectable6> lizmat, Bisecting by output (old=2024.01 new=3b8e509) because on both starting points the exit code is 0

[22:31] <bisectable6> lizmat, bisect log: https://gist.github.com/d3e6d958a5baac0a148af2b7278b817a

[22:31] <bisectable6> lizmat, (2024-05-26) https://github.com/rakudo/rakudo/commit/f17cd58f3dfd608a0cccda21802a0df24e30b94a

[22:31] <lizmat> that's... unexpected

[22:34] <lizmat> ok, change in .raku output

[22:35] <lizmat> bisectable6: old=2022.01 dd 42.can("gist").elems

[22:35] <bisectable6> lizmat, Cannot find revision “2022.01” (did you mean “2025.01”?)

[22:35] <lizmat> bisectable6: old=2022.02 dd 42.can("gist").elems

[22:35] <bisectable6> lizmat, On both starting points (old=2022.02 new=3b8e509) the exit code is 0 and the output is identical as well

[22:35] <bisectable6> lizmat, Output on both points: «2␤»

[22:35] <lizmat> bisectable6: old=2020.01 dd 42.can("gist").elems

[22:35] <bisectable6> lizmat, On both starting points (old=2020.01 new=3b8e509) the exit code is 0 and the output is identical as well

[22:35] <bisectable6> lizmat, Output on both points: «2␤»

[22:35] <lizmat> weird

[23:51] *** sena_kun left
