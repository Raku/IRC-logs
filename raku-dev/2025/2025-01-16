[00:35] *** kjp left
[00:37] *** kjp joined
[06:16] *** [Coke] left
[06:21] *** [Coke] joined
[10:11] *** [Tux] left
[10:17] *** [Tux] joined
[10:22] *** finanalyst joined
[12:36] <Geth> ¦ rakudo/main: 17fe51b867 | (Elizabeth Mattijsen)++ | src/core.c/Range.rakumod

[12:36] <Geth> ¦ rakudo/main: Allow native arrays to be endpoints for Ranges

[12:36] <Geth> ¦ rakudo/main: 

[12:36] <Geth> ¦ rakudo/main: This is a (hopefully) temporary workaround for #5760.  The problem

[12:36] <Geth> ¦ rakudo/main: is caused by dispatch / coercion not selecting the correct Range.new

[12:36] <Geth> ¦ rakudo/main: candidate, causing it to go to the default candidates, which would

[12:36] <Geth> ¦ rakudo/main: then just plunk the native arrays as endpoints in the Range object.

[12:36] <Geth> ¦ rakudo/main: Which then later causes several types of issues when wanting to

[12:37] <Geth> ¦ rakudo/main: iterate over the Range.

[12:37] <Geth> ¦ rakudo/main: 

[12:37] <Geth> ¦ rakudo/main: This will at least be enough for the 2025.01 release, and unbreak

[12:37] <Geth> ¦ rakudo/main: testing on e.g. the IRC::Log::Colabti module

[12:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/17fe51b867

[13:45] *** sjn left
[14:21] <[Coke]> lizmat: any feedback on the REPL PROMPT? Happy to make any changes needed. Wonder if we could move the subs/method into 6.e as augments

[14:37] *** sjn joined
[18:23] *** TempIRCLogger joined
[18:23] *** TempIRCLogger left
[19:27] <tonyo> patrickb: i need to run a script to fix it, it's on there though just missing from the meta

[19:56] <lizmat> looks like we have a discrepancy here:

[19:56] <lizmat> m: use nqp; my str @a; say nqp::istype(@a,Cool); say @a ~~ Cool

[19:56] <camelia> rakudo-moar 17fe51b86: OUTPUT: «0␤True␤»

[19:58] <lizmat> #5760

[19:58] <lizmat> R#5760

[19:58] <linkable6> R#5760 [open]: https://github.com/rakudo/rakudo/issues/5760 Real(Cool) coercion doesn't work with native arrays

[19:59] <lizmat> m: use nqp; my str @a = <a b c>; say @a.Real   # the coercion works, so it's just in the typing

[19:59] <camelia> rakudo-moar 17fe51b86: OUTPUT: «3␤»

[20:05] <timo> hm.

[20:06] <timo> m: say array[str].new() ~~ Cool; say array[str] ~~ Cool

[20:06] <camelia> rakudo-moar 17fe51b86: OUTPUT: «False␤False␤»

[20:06] <timo> m: my str @a; @a.WHAT.say; @a.^name.say; say @a ~~ Cool

[20:06] <camelia> rakudo-moar 17fe51b86: OUTPUT: «(array[str])␤array[str]␤True␤»

[20:06] <timo> m: my str @a; @a.WHAT.say; @a.^name.say; say @a ~~ Cool; say array[str] ~~ Cool; say array[str].new ~~ Cool

[20:06] <camelia> rakudo-moar 17fe51b86: OUTPUT: «(array[str])␤array[str]␤True␤False␤False␤»

[20:06] <lizmat> intriguing, no?

[20:06] <timo> odd, yeah

[20:07] <lizmat> possibly related

[20:07] <timo> what was the parameter for mro or so to really give everything? or was that for .^methods that i was thinking of?

[20:07] <lizmat> m: my str @a = <a b c>; dd @a.^mro

[20:07] <camelia> rakudo-moar 17fe51b86: OUTPUT: «Invocant of method 'raku' must be an object instance of type␤'array::strarray', not a type object of type 'array[str]'.  Did you␤forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[20:08] <lizmat> however: 

[20:08] <lizmat> m: my str @a = <a b c>;use nqp;  dd nqp::isconcrete(@a)

[20:08] <camelia> rakudo-moar 17fe51b86: OUTPUT: «1␤»

[20:08] <timo> yeah, we're calling .raku on the type object in the mro list

[20:09] <timo> that's what's exploding

[20:09] <lizmat> ah, yes

[20:09] <timo> m: my str @a; @a.WHAT.raku.say

[20:09] <camelia> rakudo-moar 17fe51b86: OUTPUT: «Invocant of method 'raku' must be an object instance of type␤'array::strarray', not a type object of type 'array[str]'.  Did you␤forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[20:09] <timo> m: my @a; @a.WHAT.raku.say

[20:09] <camelia> rakudo-moar 17fe51b86: OUTPUT: «Array␤»

[20:09] <lizmat> m: my str @a = <a b c>; say @a.^mro

[20:09] <camelia> rakudo-moar 17fe51b86: OUTPUT: «((array[str]) (array) (Any) (Mu))␤»

[20:09] <timo> just not implemented

[20:09] <lizmat> yeah, ok

[20:09] <lizmat> so that's why native arrays aren't cool

[20:10] <lizmat> I wonder if that's intentional ?

[20:10] <timo> is that why?

[20:10] <lizmat> m: my str @a = <a b c>; say @a.^roles

[20:10] <camelia> rakudo-moar 17fe51b86: OUTPUT: «((strarray[str]) (Positional[str]) (Positional) (Iterable))␤»

[20:10] <lizmat> yeah

[20:10] <timo> oh, yeah, Cool isn't in there, but why do we get True anyway when asking "my str @a" for matching Cool? does it get listified somehow?

[20:11] <lizmat> no idea..

[20:11] <lizmat> perhaps it's using the List.ACCEPTS ?

[20:12] <timo> i don't think that's it

[20:12] <timo> it should be doing Cool.ACCEPTS

[20:12] <timo> dinner's about to happen. maybe the moar remote debugger can help you figure it out tho while i'm afk

[20:12] <timo> btw ... steppable? :)

[20:12] <lizmat> thanks for looking

[20:13] <lizmat> steppable?  as a bot ?

[20:14] <timo> yeah

[20:14] <timo> if not "the_hotsteppa"

[20:14] <lizmat> interesting idea

[20:14] <lizmat> would get very noisy on a channel ?

[20:14] <timo> oh it wouldn't be interactiv1e

[20:14] <timo> it would just make a big gist i guess

[20:15] <lizmat> ah, ok, feels like a good idea

[20:27] <lizmat> actually, looks like the fix is as easy as adding "is Cool" at the right place

[20:42] <Geth> ¦ rakudo/main: 8f38af87cd | (Elizabeth Mattijsen)++ | 2 files

[20:42] <Geth> ¦ rakudo/main: Make native arrays Cool

[20:42] <Geth> ¦ rakudo/main: 

[20:42] <Geth> ¦ rakudo/main: This was the underlying issue with #5760.

[20:42] <Geth> ¦ rakudo/main: 

[20:42] <Geth> ¦ rakudo/main: This commit also rolls back the temporary fix of 17fe51b867

[20:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8f38af87cd

[21:04] <Geth> ¦ rakudo/main: c0c2e01f4b | (Elizabeth Mattijsen)++ | src/core.c/native_array.rakumod

[21:04] <Geth> ¦ rakudo/main: Make sure strarray.raku doesn't die

[21:04] <Geth> ¦ rakudo/main: 

[21:04] <Geth> ¦ rakudo/main: It was defined as a method, probably to prevent dispatch ambiguity

[21:04] <Geth> ¦ rakudo/main: with the array:D: candidate.  Better to make it a multi and make it

[21:04] <Geth> ¦ rakudo/main: the default on dispatch ambiguity.

[21:04] <Geth> ¦ rakudo/main: 

[21:04] <Geth> ¦ rakudo/main: Found while looking at #5760

[21:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c0c2e01f4b

[21:14] <Geth> ¦ roast: 1c37c7882e | (Elizabeth Mattijsen)++ | 2 files

[21:14] <Geth> ¦ roast: Add tests for #5760

[21:14] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/1c37c7882e

[21:38] <Geth> ¦ roast: 097b734e60 | (Elizabeth Mattijsen)++ | S06-other/main.t

[21:38] <Geth> ¦ roast: Add tests for #5759

[21:38] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/097b734e60

[21:39] *** sena_kun joined
[21:53] <lizmat> [Coke]: I'll look at REPL_PROMPT tomorrow, when I'm fresh  :-)

[21:54] <lizmat> afk&

[22:33] *** sena_kun left
[23:34] <timo> argh, the fix for the multiple packages including the same precomp files issue seems to not have been correct ... or maybe we need to also rebuild the other package that is part of the conflict and not just the one we did rebuild

[23:36] <timo> my head is a little bit too fried to figure that out right now i think

[23:49] <timo> lucky, all it takes is a rebuild of raku-test-meta based on the newer version of raku-license-spdx

