[02:43] *** JimmyZhuo joined
[02:43] <JimmyZhuo> +++ Installing files

[02:43] <JimmyZhuo> Cannot find method 'unshift' on object of type BOOTArray

[02:43] <JimmyZhuo> at src\Perl6\Metamodel\C3MRO.nqp:64  (E:\OpenSource\Rakudo\blib/Perl6/Metamodel.moarvm:compute_mro)

[02:44] <JimmyZhuo> today I can't make install, and yesterday is ok

[03:02] *** JimmyZhuo left
[03:05] *** JimmyZhuo joined
[03:11] <JimmyZhuo> It's my problem, after restart the windows and it's ok now

[05:37] *** JimmyZhuo left
[07:32] *** finanalyst joined
[07:41] <Geth> ¦ rakudo/main: 3b020e9cf5 | (Stefan Seifert)++ | 2 files

[07:41] <Geth> ¦ rakudo/main: RakuAST: prohibit colonpairs on package names (except ver/api/auth)

[07:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3b020e9cf5

[07:41] <nine> 1262

[07:45] <Geth> ¦ rakudo/main: a343c41469 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[07:45] <Geth> ¦ rakudo/main: RakuAST: support is hidden trait on packages

[07:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a343c41469

[07:45] <nine> 1263

[08:15] <Geth> ¦ rakudo/main: e84e7a94dc | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[08:15] <Geth> ¦ rakudo/main: RakuAST: fix being unable to resolve ::?PACKAGE

[08:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e84e7a94dc

[08:15] <Geth> ¦ rakudo/main: ac06d7bec7 | (Stefan Seifert)++ | 2 files

[08:15] <Geth> ¦ rakudo/main: RakuAST: support explicitly declaring package in GLOBAL

[08:15] <Geth> ¦ rakudo/main: 

[08:15] <Geth> ¦ rakudo/main: Fixes: module Foo { class GLOBAL::Bar { } }

[08:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ac06d7bec7

[08:15] <nine> 1264

[08:34] <Geth> ¦ rakudo/main: d9b7d43bd0 | (Stefan Seifert)++ | 3 files

[08:34] <Geth> ¦ rakudo/main: RakuAST: support args on public attribute shorthand accessor notation

[08:34] <Geth> ¦ rakudo/main: 

[08:34] <Geth> ¦ rakudo/main: Fixes: $.foo(1)

[08:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d9b7d43bd0

[08:34] <nine> 1267!

[08:37] <patrickb> nine: Nice you got it to work! I'm unsure if this applies to this specific case, but in general, I prefer for Raku to have clear and comprehensible limits instead of borders being pushed in places, making it basically impossible for the user to know in advance what's possible and what isn't.

[08:40] <patrickb> Two weeks ago or so I wondered who'd be first, You with finishing with RAST or I getting a first prototype of the TUI debugger running. But I guess that's a settled question. I'm not at all unhappy about that. 😊

[08:44] <nine> Well we don't know what may still be lurking in those remaining tests. And then there's the bootstrap

[08:46] <patrickb> I guess paying the bootstrap due respect makes sense...

[08:47] <patrickb> But then I'm currently having a hard time getting that **** PTY running on Windows...

[08:54] <nine> You're probably just the latest in a long list of engineers with such a problem. UNIX ttys are a hell born of a 100 years of history from the dark ages of computing, but with Windows they didn't even seem to try.

[09:04] *** finanalyst left
[09:09] <patrickb> There is native Windows support since recently. ConPTY it's called. In principle it's pretty trivial to use. I just currently fail to get it working in libuv. But I believe it's a pretty solvable issue. I've probably just approached the problem wrong. (Instead of working up from a minimal working example, I tried getting it running directly in the full Rakudo stack with T-W and a Raku 

[09:09] <patrickb> terminal emulator sitting on top.)

[09:10] <nine> Ah yeah, that detour via a minimal example might pay off in this case :) Have fallen into that trap a lot of times myself

[09:10] *** finanalyst joined
[09:10] <patrickb> It's not like I should have learned this by now after more than a decade in IT. 😝

[09:29] *** sena_kun joined
[09:45] *** sena_kun left
[10:17] *** [Tux] left
[10:17] *** JimmyZhuo joined
[10:31] <Geth> ¦ rakudo/main: 0494de12b6 | (Stefan Seifert)++ | src/Raku/ast/type.rakumod

[10:31] <Geth> ¦ rakudo/main: RakuAST: use runtime lookup when accessing package stubs

[10:31] <Geth> ¦ rakudo/main: 

[10:31] <Geth> ¦ rakudo/main: Any package stub we access might get replaced by an actual package

[10:31] <Geth> ¦ rakudo/main: later, so we need to defer settling on the actual value until runtime.

[10:31] <Geth> ¦ rakudo/main: 

[10:31] <Geth> ¦ rakudo/main: Fixes: class X::Y::Z { }; my \x = X::Y; class X::Y {}; x.new

[10:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0494de12b6

[10:31] <nine> 1268

[10:49] <JimmyZhuo> nine++, 77 left

[10:52] *** [Tux] joined
[10:53] *** finanalyst left
[10:56] *** [Tux] left
[11:00] *** [Tux] joined
[11:09] <nine> Thanks! I still would ejoy patches more than cheering btw. I intentionally skipped several spec test files that only lament missing compile time checks. Those are usually quite simple to add. Just look at the --target=ast output of the offending code and add some PERFORM-CHECK code to the appropriate node that checks whether its children fit that pattern and add-sorry the appropriate exception. There's 

[11:10] <nine> plenty of examples already.

[11:10] <lizmat> do you have an example commit that people could look at, that shows that process ?

[11:14] <JimmyZhuo> https://github.com/rakudo/rakudo/commit/3d651c2ef09b2577cfcccf9a28596b5eeadfb796 this?

[11:14] <nine> 3b020e9cf51cd431af21640e6f6d223c4ea19df9 3d651c2ef09b2577cfcccf9a28596b5eeadfb796 6084eb2ff259852543e385c7f39516e5547f108e ad746c66d7d9f60a337b4623ee375c58614100a4 b8ae70efba5962612900f00443fae5d4e6eafe3a

[11:14] <linkable6> (2025-03-07) https://github.com/rakudo/rakudo/commit/3b020e9cf5 RakuAST: prohibit colonpairs on package names (except ver/api/auth)

[11:14] <linkable6> (2025-03-05) https://github.com/rakudo/rakudo/commit/6084eb2ff2 RakuAST: report invalid attribute access in subsets

[11:14] <linkable6> (2025-02-28) https://github.com/rakudo/rakudo/commit/b8ae70efba RakuAST: prohibit clashing of parameter names

[11:14] <lizmat> thanks!

[11:15] <nine> t/spec/S06-signature/optional.t t/spec/S06-signature/positional-placeholders.t t/spec/S06-signature/slurpy-params.t t/spec/S06-traits/misc.rakudo.moar t/spec/S06-traits/native-is-rw.t t/spec/S09-typed-arrays/native-num.rakudo.moar t/spec/S12-attributes/inheritance.t t/spec/S12-attributes/undeclared.t t/spec/S12-attributes/smiley.t t/spec/S12-class/open.t

[12:36] <Geth> ¦ rakudo/main: 19c4cfefcd | (Stefan Seifert)++ | 2 files

[12:36] <Geth> ¦ rakudo/main: RakuAST: complain about package stubs that were never replaced

[12:36] <Geth> ¦ rakudo/main: 

[12:36] <Geth> ¦ rakudo/main: Fixes: class Foo { ... } # to die

[12:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/19c4cfefcd

[12:36] <nine> 1269

[12:36] <nine> Ok, this one sucked. As packagy stuff tends to do

[13:38] <Geth> ¦ rakudo/main: 8a5a40e1b3 | (Stefan Seifert)++ | src/Raku/ast/type.rakumod

[13:38] <Geth> ¦ rakudo/main: RakuAST: ensure we always have a base type for enums

[13:38] <Geth> ¦ rakudo/main: 

[13:38] <Geth> ¦ rakudo/main: Fixes: my enum Foo(1..2) # which got confused by the Range

[13:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8a5a40e1b3

[13:38] <Geth> ¦ rakudo/main: e76deb895c | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[13:38] <Geth> ¦ rakudo/main: RakuAST: use compile time initializer values directly for attribute's build

[13:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e76deb895c

[13:38] <nine> 1270

[13:49] <lizmat> m: sub a(::T $a, T @b) { dd :$a:@b }; a 42, my Int @ = 42   # somehow, an .assuming test for this passes, probably because it doesn't do proper typechecking

[13:49] <camelia> rakudo-moar 19c4cfefc: OUTPUT: «Internal error: inconsistent bind result␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:56] <timo> "inconsistent bind result" sounds like the binding lowering code is making a boo-boo? that code is supposed to be correct, right?

[13:57] <timo> "inconsistent bind result" could mean the fast-path / lowered binder says it's wrong, then the full binder runs in order to generate a good error message and decides that it's actually correct

[13:59] <Geth> ¦ rakudo/main: 812c7ec783 | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[13:59] <Geth> ¦ rakudo/main: RakuAST: turn :ver attributes into Version objects on package names

[13:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/812c7ec783

[13:59] <nine> 1271

[14:20] *** JimmyZhuo left
[14:46] <timo> 00021      const_s            loc_4_str, 'Positional[T]'

[14:46] <timo> 00022      getlexperinvtype_o loc_9_obj, loc_4_str

[14:46] <timo> 00023      istype             loc_8_int, loc_11_obj, loc_9_obj

[14:46] <timo> well, that doesn't seem like it's going to work :)

[14:47] <timo> the code binds to lexical "T" a little further up though

[14:47] <timo> and yes, this is the code the binding lowerer has generated

[15:23] <timo> hrmpf. stepping with the moar remote is still not fully reliable

[15:31] <timo> the qast that comes out of the lowerer has QAST::Var(typevar Positional[T]) for the type of the second parameter, so I wonder what exactly has to happen for the whole thing to work

[15:34] <timo> the next thing the lowerer generates is the code for handling coercive types (since it doesn't know if Positional[T] will result in a coercive type or not)

[15:36] <timo> probably not actually relevant

[15:37] <timo> there's some handling for @ and % sigiled parameters further below, maybe the type check wants to steal a bit from that part (or delegate / defer to it)

[15:37] <timo> maybe we should look if there's a lexical in the block with the name of the typevar and if not just bail out of lowering. it will be "slower" but at least it won't throw an exception :)

[15:42] *** liztormato joined
[15:43] <liztormato> timo: will look at it further when back from cycling

[15:43] *** liztormato left
[15:46] <timo> i'm writing code to bail out if we have the case in question for now

[15:53] <timo> ok, no exception from the code yet

[15:56] <timo> i think it's preventing lowering in places that did use to lower, so i need to go check on that

[16:00] <timo> hrmpf. this doesn't deal with type parameters of an enclosing role for example

[16:01] <timo> m: role R[::TValue] { method ah(TValue @foo) { dd; dd :@foo } }; R[42].ah(my Int @ = 1);

[16:01] <camelia> rakudo-moar 812c7ec78: OUTPUT: «Internal error: inconsistent bind result␤  in method ah at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:01] <timo> so the check for "does the block have it as a lexical" isn't good anyway

[16:02] <timo> m: role R[TValue] { method ah(TValue @foo) { dd; dd :@foo } }; R[Int].ah(my Int @ = 1);

[16:02] <camelia> rakudo-moar 812c7ec78: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Invalid typename 'TValue' in parameter declaration.␤at <tmp>:1␤------> role R[TValue<HERE>] { method ah(TValue @foo) { dd; dd :@fo␤»

[16:02] <timo> maybe we can ask $*W at that point

[16:06] <timo> i found a sub typevar_or_lexical_lookup that i can steal from :3

[16:07] *** liztormato joined
[16:08] <liztormato> timo: have you checked whether it works with RakuAST?

[16:08] <timo> i have not

[16:08] <timo> it's RAKUDO_USE_RAKUAST=1 right?

[16:09] <liztormato> I haven’t yet

[16:09] <liztormato> Yes

[16:09] <timo> m: Q[[[ role R[::TValue] { method ah(TValue @foo) { dd; dd :@foo } }; R[Int].ah(my Int @ = 1); ]]].AST.eval()

[16:09] <camelia> rakudo-moar 812c7ec78: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 131072 bytes␤»

[16:09] <timo> uhhhhhhh

[16:10] * [Coke] wonders why liztormato's text is invisible.

[16:10] <liztormato> I can see mine. ;-)

[16:10] <[Coke]> (until their most recent send)

[16:10] <liztormato> timo: .EVAL

[16:11] <[Coke]> 3 sends before that were black on black text here.

[16:11] <timo> m: Q[[[ role R[::TValue] { method ah(TValue @foo) { dd; dd :@foo } }; R[Int].ah(my Int @ = 1); ]]].EVAL

[16:11] <camelia> rakudo-moar 812c7ec78: OUTPUT: «Internal error: inconsistent bind result␤  in method ah at EVAL_0 line 1␤  in block <unit> at EVAL_0 line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:11] <[Coke]> ^^ like that one.

[16:11] <[Coke]> don't see any weird colorings in the logs.

[16:13] <timo> i see the colors too

[16:19] <timo> maybe it should just bail based on archetypes generic + parametric

[16:22] <liztormato> I’m not sure it should bail

[16:22] <timo> why not?

[16:24] <liztormato> I think it’s valid code?

[16:25] <timo> yeah it is. so the lowerer shouldn't spit out the wrong optimized code for it

[16:25] <timo> m: sub a(::T $a, Positional[T] $b) { dd :$a:$b }; a 42, my Int @ = 42

[16:25] <camelia> rakudo-moar 812c7ec78: OUTPUT: «Internal error: inconsistent bind result␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:26] <timo> a little surprised we don't seem to have any spec tests for this

[16:26] <timo> or maybe all the spec tests that have this in them also have something else that already makes the lowerer bail out

[16:29] <liztormato> Well. There is an .assuming test for it that failed with my new code. But which incorrectly succeeded with the current assuming code

[16:30] <liztormato> That’s how I found this issue

[16:30] <timo> right

[16:31] <timo> something like "parameters with types that are parametrizations with a captured type" seems like something we should have stand-alone tests for though

[16:32] <liztormato> Agree

[16:34] <liztormato> Afk for an hour or so

[16:34] *** liztormato left
[16:36] <Geth> ¦ rakudo/dont_lower_generic_parametric_params: 727d0ee96a | (Timo Paulssen)++ | src/Perl6/Actions.nqp

[16:36] <Geth> ¦ rakudo/dont_lower_generic_parametric_params: Don't try to lower signatures with parametric generic types

[16:36] <Geth> ¦ rakudo/dont_lower_generic_parametric_params: 

[16:36] <Geth> ¦ rakudo/dont_lower_generic_parametric_params: Fixes "inconsistent bind result" for signatures with a type

[16:36] <Geth> ¦ rakudo/dont_lower_generic_parametric_params: capture followed by @ or % sigiled params using the typevar,

[16:36] <Geth> ¦ rakudo/dont_lower_generic_parametric_params: or when such a param uses a type capture param of a role.

[16:36] <Geth> ¦ rakudo/dont_lower_generic_parametric_params: review: https://github.com/rakudo/rakudo/commit/727d0ee96a

[16:39] <Geth> ¦ rakudo: timo++ created pull request #5804: Don't try to lower signatures with parametric generic types

[16:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5804

[18:15] <nine> lizmat: I'm curious. What was the plan for making method literalize work with bootstrap?

[18:20] <lizmat> crossing that bridge when we get to it ?

[18:22] <nine> Do you realize that that means a guaranteed rewrite of the whole thing?

[18:23] * lizmat looks at the code

[18:24] <lizmat> why would a rewrite be needed?  we have all of RakuAST at the start of the bootstrap, don't we ?

[18:27] <nine> Actually at the end of bootstrap. But that does not include src/core.c/RakuAST/Literalize.rakumod

[18:28] * timo is blissfully unaware of all that

[18:31] * lizmat is confused now

[18:32] <nine> why?

[18:32] <lizmat> in Raku/ast there are a few calls to .literalize in ast/name.rakumod

[18:32] <lizmat> the multi methods in src/core.c/Literalize.rakumod live there for convenience

[18:33] <lizmat> they could all be written in the Raku bootstrap

[18:33] <nine> And they should have been

[18:33] <lizmat> why?   most of them won't be needed in the bootstrap?

[18:35] <nine> When bootstrapping we won't even find .literalize at all as it's added via augment by code that we won't even have compiled yet

[18:35] <nine> We could have written the whole compiler frontend in Raku instead of NQP if it weren't for the bootstrap problem.

[18:44] <lizmat> when I wrote .literalize in dd5125aecdb66263b61 I made it clear that this was intended for use in RakuDoc

[18:44] <linkable6> (2023-05-16) https://github.com/rakudo/rakudo/commit/dd5125aecd RakuAST: add .literalize method to selected ::Node classes

[18:44] <lizmat> since the setting doesn't have any rakudoc, I thought it was safe to do so

[18:44] <lizmat> if .literalize is being used for other purposes, we need to fix that

[18:45] <lizmat> but as long as it's for rakudoc, I don't see a problem with the current approach ?

[18:45] <nine> Actually that message does not limit the use to RakuDOC and instead even points out another potential use: "It seems likely that this functionality might actually also be used

[18:45] <nine> for some constant folding purposes"

[18:45] <lizmat> *might*

[18:46] <nine> "might be used for something else" is actually the opposite of "only for a specific purpose"

[18:46] <nine> It's like < and >=

[18:48] <lizmat> ok, still I don't see the problem with the current approach: if we start working on the setting, we can fix the cases that try to use .literalize too early ?

[18:50] *** sena_kun joined
[19:18] <Geth> ¦ rakudo/main: 0bcab7a86f | timo++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[19:18] <Geth> ¦ rakudo/main: Don't try to lower signatures with parametric generic types (#5804)

[19:18] <Geth> ¦ rakudo/main: 

[19:18] <Geth> ¦ rakudo/main: Fixes "inconsistent bind result" for signatures with a type

[19:18] <Geth> ¦ rakudo/main: capture followed by @ or % sigiled params using the typevar,

[19:18] <Geth> ¦ rakudo/main: or when such a param uses a type capture param of a role.

[19:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0bcab7a86f

[19:19] <timo> ^- should we create an issue for this so that we can mark it "testneeded"?

[19:22] <lizmat> I'll eb adding tests for that :-)

[19:23] <lizmat> *be

[19:43] <Geth> ¦ rakudo/main: d773990055 | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[19:43] <Geth> ¦ rakudo/main: RakuAST: fix bogus parse error when trying to call trait_mod:<is>

[19:43] <Geth> ¦ rakudo/main: 

[19:43] <Geth> ¦ rakudo/main: When trying to determine whether a name is a meta op, we call back into

[19:43] <Geth> ¦ rakudo/main: the parser to just try and see whether we find any match. However when

[19:43] <Geth> ¦ rakudo/main: the parser throws a panic, this does not mean that we have to abort. It

[19:43] <Geth> ¦ rakudo/main: simply means that it's not a meta op at all.

[19:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d773990055

[19:43] <Geth> ¦ rakudo/main: adae956262 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[19:44] <Geth> ¦ rakudo/main: RakuAST: don't stumble over parameter terms on blocks

[19:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/adae956262

[20:10] *** [Coke] left
[20:43] <Geth> ¦ rakudo/main: 42d49a979d | (Elizabeth Mattijsen)++ | src/Raku/ast/literals.rakumod

[20:43] <Geth> ¦ rakudo/main: RakuAST: don't create IntLiterals for Int type objects

[20:43] <Geth> ¦ rakudo/main: 

[20:43] <Geth> ¦ rakudo/main: Found while working on #2599

[20:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/42d49a979d

[21:01] <Geth> ¦ roast: df7f71b719 | (Elizabeth Mattijsen)++ | S06-currying/misc.t

[21:01] <Geth> ¦ roast: Fix more .assuming tests

[21:01] <Geth> ¦ roast: 

[21:01] <Geth> ¦ roast: - adjust tests for signatures that were incorrect, and todo them

[21:01] <Geth> ¦ roast: - skip tests that currently don't work without .assuming either

[21:01] <Geth> ¦ roast: - fix tests that were too implementation detail specific

[21:01] <Geth> ¦ roast: 

[21:01] <Geth> ¦ roast: Part of work on #2599

[21:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/df7f71b719

[21:01] <Geth> ¦ roast: 63fb7c1079 | (Elizabeth Mattijsen)++ | S06-currying/positional.t

[21:01] <Geth> ¦ roast: More .assuming test fixes

[21:01] <Geth> ¦ roast: 

[21:01] <Geth> ¦ roast: - remove tests checking on unnamed args in signature

[21:01] <Geth> ¦ roast: - fix tests that check signature for default values, and todo them

[21:01] <Geth> ¦ roast: - remove tests that pass Nil as an arg, which will never work

[21:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/63fb7c1079

[21:14] <Geth> ¦ rakudo/bootstrap-rakuast: 8 commits pushed by (Stefan Seifert)++

[21:14] <Geth> ¦ rakudo/bootstrap-rakuast: af3b00cf01 | RakuAST: first steps towards compiling CORE.c.setting

[21:14] <Geth> ¦ rakudo/bootstrap-rakuast: 33af487454 | RakuAST: another round of getting rid of AT-POS calls

[21:14] <Geth> ¦ rakudo/bootstrap-rakuast: 06185014b1 | RakuAST: more bootstrap workarounds

[21:14] <Geth> ¦ rakudo/bootstrap-rakuast: b4b1718ceb | RakuAST: avoid attaching type objects

[21:14] <Geth> ¦ rakudo/bootstrap-rakuast: 486b9bfe27 | RakuAST: prevent generating [; ] and {; } candidates when compiling setting

[21:14] <Geth> ¦ rakudo/bootstrap-rakuast: 765c8d5317 | RakuAST: work around missing List.Str when compiling setting

[21:14] <Geth> ¦ rakudo/bootstrap-rakuast: 24d2113c4b | RakuAST: only use X::Comp once it's actually compiled

[21:14] <Geth> ¦ rakudo/bootstrap-rakuast: f750b5801f | Add a missing proto to WhateverCode.POSITIONS

[21:14] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/af3b00cf0101^...f750b5801fd8

[21:17] <Geth> ¦ rakudo/main: 4ee9503bdc | (Elizabeth Mattijsen)++ | 2 files

[21:17] <Geth> ¦ rakudo/main: Re-imagine .assuming using RakuAST

[21:17] <Geth> ¦ rakudo/main: 

[21:17] <Geth> ¦ rakudo/main: This completely removes the old implementation of .assuming by

[21:17] <Geth> ¦ rakudo/main: a RakuAST based implementation.  For the users, there should be

[21:17] <Geth> ¦ rakudo/main: no noticeable difference, apart from:

[21:17] <Geth> ¦ rakudo/main: 

[21:17] <Geth> ¦ rakudo/main: - slightly faster creation of new Callable

[21:17] <Geth> ¦ rakudo/main: <…commit message has 17 more lines…>

[21:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4ee9503bdc

[21:19] <lizmat> *phew*    in the past weeks I learned more about signatures than I have ever wanted to know about signatures   :-)

[21:26] *** librasteve_ joined
[21:38] <nine> Well this is stumping me: P6opaque: no such attribute '$!signature' on type Code in a WhateverCode when trying to bind a value

[21:40] <nine> Actually even before: Nominal type check failed for parameter '<anon>'; expected Rakudo::Iterator::Empty but got Rakudo::Iterator::Empty

[21:40] <lizmat> perhaps a container slipped in somewhere, that the error message doesn't show   ?

[21:55] <nine> No, Code is missing from the mro

[22:06] <timo> well for the R::I::E case it could be the mismatch of deconts / non-deconts

[22:06] *** [Coke] joined
[22:06] <timo> could also be two same but not identity-equal type objects / STables?

[22:08] <nine> Oh boy....apply-traits has a CATCH handler to collect any exceptions from applying traits and report them as sorries. We just don't get far enough to do so. And there's yet another AT-POS call in apply that of course fails

[22:08] <nine> I ought to systematically replace those

[23:39] *** sena_kun left
