[00:41] *** [Coke] left
[02:38] *** [Coke] joined
[08:52] <Geth> ¦ rakudo/main: 0d2ab24521 | (Stefan Seifert)++ | 2 files

[08:52] <Geth> ¦ rakudo/main: RakuAST: fix doc-declarator tests after Subset API change

[08:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0d2ab24521

[09:18] <nine> I don't think I want to fix the rest of t/spec/S12-subset/subtypes.rakudo.moar as that's the bizarre error I posted yesterday and that's clearly also in the old frontend.

[09:21] <nine> One way to get that test file to pass is to simply remove the Seq:D multi candidates for is-deeply - which are note even getting called.

[09:23] <nine> Oh, and I just remembered that we've had another controversial test that even carried a comment saying that side effects of where clauses are not supported. Well the subset tests do rely on such side-effects.

[09:27] <nine> It *is* the exact same situation as the other test. Problems are caused by BEGIN time execution of code that modifies lexical variables outside that code. E.g.:

[09:27] <nine> m: my $foo; sub foo() { $foo++ }; BEGIN foo; say $foo; foo; foo; say $foo;

[09:27] <camelia> rakudo-moar 0d2ab2452: OUTPUT: «1␤1␤»

[09:28] <nine> The BEGIN time execution in the subset case is in the compile time check for whether there's a matching multi candidate for the later is-deeply call.

[09:28] <nine> The test file does pass if I remove that check.

[09:46] *** librasteve_ joined
[09:48] <Geth> ¦ rakudo/main: dfa806e6d7 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[09:48] <Geth> ¦ rakudo/main: RakuAST: avoid compile time type comparisons with subsets

[09:48] <Geth> ¦ rakudo/main: 

[09:48] <Geth> ¦ rakudo/main: Type checks involving subsets can have side-effects (i.e. the code in

[09:48] <Geth> ¦ rakudo/main: the subset's where clause may). Doing such checks at compile time may

[09:48] <Geth> ¦ rakudo/main: therefore lead to strange problems like the mere presence of some code

[09:48] <Geth> ¦ rakudo/main: further down the source code file screwing up an earlier type check. We

[09:48] <Geth> ¦ rakudo/main: already avoided such checks in other places and now we also do so in the

[09:48] <Geth> ¦ rakudo/main: multi dispatch compile time check.

[09:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dfa806e6d7

[09:48] <nine> Ah, well, I fixed it after all

[09:49] <nine> Though I still say that the test code is broken.

[09:49] <nine> That's now 1299

[10:13] *** sena_kun joined
[10:22] *** finanalyst joined
[10:52] *** JimmyZhuo joined
[10:55] <JimmyZhuo> nine: 'sub f(Int $, int @a) { }(1,"3");' vs 'sub f(Int $, int @a) { }; f(1,"3");' , they are different ast, and seems have to write type check system, is rw check, args nums check etc..

[11:02] *** finanalyst left
[11:09] <nine> JimmyZhuo: not sure what you're asking

[11:14] <lizmat> notable6: weekly

[11:14] <notable6> lizmat, 3 notes: https://gist.github.com/fc4041f597b93f0629340e1ed73719d7

[11:18] <lizmat> notable6: weekly reset

[11:18] <notable6> lizmat, Moved existing notes to “weekly_2025-03-25T11:18:54Z”

[11:34] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/03/25/2025-12-red-on-rakuast/

[11:36] <[Coke]> (*@#$

[11:37] <[Coke]> So the command in moarvm releng to generate the tar file as written generates an error for me. (but this time did not generate the bad times on the files) - I used the 030 instead of the 03 in the command and it worked *without* error... except it generated a folder with the name 030 instead of 03, which caused the issue in the rakudo/star bug opened this morning.

[11:38] <[Coke]> This is *just* an issue with the release tar ball. It is NOT an issue with git repo itself. Is it safe to replace that tarball? Or can I add a .01 *tarball* but not release? Or do I need to do a full 2025.03.1 release?

[11:38] <[Coke]> Apologies, team. :|

[11:39] <lizmat> patrickb nine might have ideas about that

[11:39] <[Coke]> Excellent. I have calls for a few hours this morning and will fix afternoon my time.

[11:40] <[Coke]> I feel like silently replacing a release on github with a new file sounds bad when I say it out loud. :)

[11:43] <nine> Trust your guts.

[11:43] <nine> Releases are about trust and trust requires transparency.

[12:05] *** librasteve_ left
[12:09] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++

[12:09] <Geth> ¦ rakudo/main: 8946ca02a7 | RakuAST: fix mis-parse of colonpairs in type parameters

[12:09] <Geth> ¦ rakudo/main: f0244a90e1 | RakuAST: make values of colonpairs available at compile time

[12:09] <Geth> ¦ rakudo/main: 62c9b8723e | RakuAST: fix parameter default type check failing on container types

[12:09] <Geth> ¦ rakudo/main: 927118ca0d | RakuAST: parameters don't have compile time values

[12:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/dfa806e6d7b7...927118ca0d52

[12:09] <nine> Finally 1300

[12:09] <JimmyZhuo> nine: the second one type check codes are in RakuAST::Call::Name, the first one seems that it can't use these type check codes in RakuAST::Call::Name, have to write another code about type check etc in the RakuAST::ApplyInfix

[12:10] <lizmat> nine++

[12:11] <nine> JimmyZhuo: ah, yes, that's correct. RakuAST::Call::Name really is a short-cut for ApplyInfix(Term::Name, Call). Sadly that means some code has to be duplicated

[12:18] <patrickb> I think having a .1 tarball without a release will cause issues of some sort. Filename and content won't match up. I'd say either a full release, or fix up the tarball.

[12:18] <JimmyZhuo> the type check system has a lot of space to improve with RakuAST(is rw, slurpy, named, etc), and there may be some refactor in the future by someone who knows the rakudo well enough. sometime I think it's too early to add some ugly check in the ast just for pass more test, and the roast has not

[12:18] <JimmyZhuo> enough tests for the type check.

[12:19] <JimmyZhuo> most move these type check from runtime or bootstrap.nqp to ast 

[12:21] <JimmyZhuo> to check time

[12:23] <nine> JimmyZhuo: I agree. Nevertheless, we need a passing roast to get a reliable regression test suite. With that it's much easier to improve compile time checks, refactor, etc.

[12:23] <JimmyZhuo> agreed

[12:33] *** Voldenet_ joined
[12:34] *** Voldenet left
[12:34] *** Voldenet_ is now known as Voldenet

[12:51] <[Coke]> patrickb: fixing the tarball is the easiest surgery to do.

[12:51] <[Coke]> If you don't see an issue with that, I'll do that. AND add a Readme.md as a release file that explains what happens with a link to the issue on rakudo/star

[12:55] <tbrowder> hi, i've been using the log routine again and wonder why we don't have the 'ln' routine. i know routine 'log(x)' is really log_e x, but it seems awkward to me.

[12:57] <tbrowder> i think, for olld ppl and noobs, addin the explicit 'ln' routine is the roght thing to do

[12:57] <tbrowder> *ignore typos pls

[13:17] <lizmat> m: my %h := :{ }; %h<a>.push: 42; dd %h

[13:17] <camelia> rakudo-moar 927118ca0: OUTPUT: «No such method 'push' for invocant of type 'Mu'.  Did you mean 'put'?␤  in block <unit> at <tmp> line 1␤␤»

[13:17] <lizmat> meh

[13:17] <lizmat> m: my %h{Mu}; %h<a>.push: 42; dd %h

[13:17] <camelia> rakudo-moar 927118ca0: OUTPUT: «Any  = (my Any %{Mu} = :a($[42]))␤»

[13:18] <lizmat> aka: one object hash is not like another

[13:23] <Geth> ¦ rakudo/main: 8f8b95866f | (Elizabeth Mattijsen)++ | src/core.c/Hash.rakumod

[13:23] <Geth> ¦ rakudo/main: Make the :{ } object hash syntax be like my %h{Mu}

[13:23] <Geth> ¦ rakudo/main: 

[13:23] <Geth> ¦ rakudo/main: Before this commit, the :{ } object hash syntax would create containers

[13:23] <Geth> ¦ rakudo/main: with the default value of Mu.  This caused things like:

[13:23] <Geth> ¦ rakudo/main: 

[13:23] <Geth> ¦ rakudo/main:    my %h := : { }

[13:23] <Geth> ¦ rakudo/main:    %h<a>.push(42)

[13:23] <Geth> ¦ rakudo/main: <…commit message has 9 more lines…>

[13:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8f8b95866f

[13:26] <Geth> ¦ rakudo/main: 998cde58a7 | (Elizabeth Mattijsen)++ | 2 files

[13:26] <Geth> ¦ rakudo/main: Make QuantHashes return proper object hash for .Hash

[13:26] <Geth> ¦ rakudo/main: 

[13:26] <Geth> ¦ rakudo/main: Commit bc05703131b66716080 added the possibility to easily create

[13:26] <Geth> ¦ rakudo/main: a proper object hash

[13:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/998cde58a7

[13:28] <Geth> ¦ rakudo/main: bcdbbdd8bc | (Elizabeth Mattijsen)++ | src/core.c/Any.rakumod

[13:28] <Geth> ¦ rakudo/main: Make .classify/.categorize return proper object hashes

[13:28] <Geth> ¦ rakudo/main: 

[13:28] <Geth> ¦ rakudo/main: Commit bc05703131b66716080 made this possible.

[13:28] <Geth> ¦ rakudo/main: 

[13:28] <Geth> ¦ rakudo/main: This breaks a number of .classify/.categorize spectest that are

[13:28] <Geth> ¦ rakudo/main: checking for improperly constructed object hashes.  A fix for

[13:28] <Geth> ¦ rakudo/main: these tests will shortly follow

[13:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bcdbbdd8bc

[13:30] <Geth> ¦ roast: 0afb93d0f0 | (Elizabeth Mattijsen)++ | 2 files

[13:30] <Geth> ¦ roast: Fix .classify/.categorize tests

[13:30] <Geth> ¦ roast: 

[13:30] <Geth> ¦ roast: These were checking for improperly constructed object hashes.

[13:30] <Geth> ¦ roast: 

[13:30] <Geth> ¦ roast: Since https://github.com/rakudo/rakudo/commit/bcdbbdd8bc these are

[13:30] <Geth> ¦ roast: now correctly constructed.  Use the :{ } object hash syntax to create

[13:30] <Geth> ¦ roast: the expected values, and thus make it ready for any other possible

[13:30] <Geth> ¦ roast: future changes to object hashes

[13:30] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0afb93d0f0

[13:37] <lizmat> nine: looks like we lost t/12-rakuast/subset.rakutest ?

[13:39] <lizmat> so: should we move all roast files with "use experimental" to the rakudo repo or not?    

[13:39] <lizmat> I would be in favor of that

[13:40] *** JimmyZhuo left
[13:45] <[Coke]> +1

[13:46] <lizmat> actually, in quite a few cases we'd just need to move some tests

[13:47] <lizmat> https://gist.github.com/lizmat/34dc9b0e7957e8230d7b9383d3377260   # files in question

[13:48] <lizmat> afk for a few hours&

[14:02] *** librasteve_ joined
[14:19] <[Coke]> one potential "solution" - move everything into an experimental folder and remove them from the list of files to run?

[14:37] *** liztormato joined
[14:39] <liztormato> [Coke]: in quite a few cases macro tests are just a few of the tests in a file

[14:41] *** liztormato left
[14:48] *** liztormato joined
[14:55] *** liztormato left
[15:09] <[Coke]> WHERE IS THE NQP TARBALL?

[15:10] <[Coke]> (sigh. Bad Coke)

[15:11] <[Coke]> Fixing that as well.

[15:13] <[Coke]> regenerating the tar.gz file? no error.

[15:16] *** sena_kun left
[15:16] *** sena_kun joined
[15:20] <[Coke]> https://github.com/MoarVM/MoarVM/releases/tag/2025.03 fixed. Added notes in the release info

[15:23] <[Coke]> I also should do a session capture when I do the release so I can say "yes, see, I *did* run this" and have backup. :)

[15:25] *** sena_kun left
[15:26] *** sena_kun joined
[15:28] <[Coke]> https://github.com/Raku/nqp/releases/tag/2025.03

[15:29] <[Coke]> so that was supposed to be created by github-release.p6, according to the docs.

[15:29] <[Coke]> that step also fails regularly because it can't upload files, so I probably ignored a failure about nqp that I shouldn't have.

[15:30] <[Coke]> updated https://github.com/rakudo/star/issues/209

[15:33] *** sena_kun left
[15:33] *** sena_kun joined
[15:38] <Geth> ¦ rakudo/main: 8a3933813e | (Will Coleda)++ | docs/release_guide.pod

[15:38] <Geth> ¦ rakudo/main: Slight clarification to RELENG

[15:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8a3933813e

[15:40] <[Coke]> whateverable question - I don't see any config that ties an irc bot to an executable in whateverable's xbin/ directory - is it really just "the name of the xbin file" that makes a bot?

[15:41] <[Coke]> (trying to figure out if I can temporarily add a bot with lots of extra debug output.)

[15:42] *** liztormato joined
[15:46] *** vrurg left
[15:46] *** vrurg joined
[15:48] <[Coke]> I'm going to make a change to the releaseable6 script itself and see if I can debug this issue that way. It's output will change slightly, but I will revert all debug output shortly.

[15:50] <Geth> ¦ whateverable/main: 72768c708f | (Will Coleda)++ | xbin/Releasable.p6

[15:50] <Geth> ¦ whateverable/main: Add debug output

[15:50] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/72768c708f

[15:50] <[Coke]> (as I recall, that commit should trigger a restart of the bot, we'll see)

[15:52] <Geth> ¦ whateverable/main: 70044973e7 | (Will Coleda)++ | xbin/Releasable.p6

[15:52] <Geth> ¦ whateverable/main: add debug output

[15:52] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/70044973e7

[15:54] *** notable6 left
[15:54] *** linkable6 left
[15:54] *** shareable6 left
[15:54] *** evalable6 left
[15:54] *** tellable6 left
[15:54] *** coverable6 left
[15:54] *** unicodable6 left
[15:54] *** nativecallable6 left
[15:54] *** quotable6 left
[15:54] *** greppable6 left
[15:54] *** sourceable6 left
[15:54] *** benchable6 left
[15:54] *** bloatable6 left
[15:54] *** releasable6 left
[15:54] *** bisectable6 left
[15:54] *** committable6 left
[15:56] *** coverable6 joined
[15:56] *** bloatable6 joined
[15:56] *** bloatable6 left
[15:56] *** coverable6 left
[15:59] *** liztormato left
[15:59] *** nativecallable6 joined
[15:59] *** committable6 joined
[15:59] *** sourceable6 joined
[16:00] *** greppable6 joined
[16:00] *** quotable6 joined
[16:00] *** evalable6 joined
[16:00] *** bisectable6 joined
[16:00] *** tellable6 joined
[16:00] *** coverable6 joined
[16:00] *** unicodable6 joined
[16:00] *** releasable6 joined
[16:01] *** bloatable6 joined
[16:01] *** shareable6 joined
[16:01] *** linkable6 joined
[16:01] *** notable6 joined
[16:01] *** benchable6 joined
[16:08] <Geth> ¦ rakudo/main: eb5620f248 | (Stefan Seifert)++ | 5 files

[16:08] <Geth> ¦ rakudo/main: RakuAST: fix role parameters not found in where clause in role signature

[16:08] <Geth> ¦ rakudo/main: 

[16:08] <Geth> ¦ rakudo/main: We only declared lexicals for role parameters after entering the role

[16:08] <Geth> ¦ rakudo/main: body. That's too late when those parameters are referenced from within

[16:08] <Geth> ¦ rakudo/main: the role's signature. We previously didn't declare those lexicals on

[16:08] <Geth> ¦ rakudo/main: parse because the resolver was still in the role's outer scope. As a

[16:08] <Geth> ¦ rakudo/main: workaround we declared those lexicals manually after entering the role's

[16:08] <Geth> ¦ rakudo/main: <…commit message has 9 more lines…>

[16:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eb5620f248

[16:08] <nine> 1301

[16:08] <Geth> ¦ rakudo/main: 727b7281aa | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[16:08] <Geth> ¦ rakudo/main: RakuAST: fix declarations from role signatures getting lost

[16:08] <Geth> ¦ rakudo/main: 

[16:08] <Geth> ¦ rakudo/main: Since we now enter the package's lexical scope for parsing a role's

[16:08] <Geth> ¦ rakudo/main: signature, it could now happen that declarations from the signature got

[16:08] <Geth> ¦ rakudo/main: put onto the package's scope, which does not actually generate any code.

[16:08] <Geth> ¦ rakudo/main: 

[16:09] <Geth> ¦ rakudo/main: Push those declarations out to the package's outer scope.

[16:09] <Geth> ¦ rakudo/main: 

[16:09] <Geth> ¦ rakudo/main: Fixes: role Foo[R = role { method foo() { } }] { }

[16:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/727b7281aa

[16:10] *** Altai-man joined
[16:10] *** sena_kun left
[16:14] *** Altai-man left
[16:16] *** sena_kun joined
[16:42] <[Coke]> releasable6: status

[16:42] <releasable6> [Coke], Next release in ≈25 days and ≈2 hours. There are no known blockers. 0 out of 384 commits logged (VERSION: $version) (ACTUAL COMMIT: $actual-commit-old) 

[16:42] <releasable6> [Coke], Details: https://gist.github.com/0fb20aa7716fa4ef6355dde9e47d3c10

[16:43] <[Coke]> ^^ Look, debug output. (*&^(*%#@$ :)

[16:44] <Geth> ¦ whateverable/main: c9201b54ad | (Will Coleda)++ | xbin/Releasable.p6

[16:44] <Geth> ¦ whateverable/main: add debug output

[16:44] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/c9201b54ad

[16:44] <[Coke]> but that is nice to know that we can tweak the bots.

[16:44] *** benchable6 left
[16:44] *** unicodable6 left
[16:44] *** bloatable6 left
[16:44] *** bisectable6 left
[16:44] *** evalable6 left
[16:44] *** greppable6 left
[16:44] *** releasable6 left
[16:44] *** quotable6 left
[16:44] *** tellable6 left
[16:44] *** notable6 left
[16:44] *** sourceable6 left
[16:44] *** linkable6 left
[16:44] *** nativecallable6 left
[16:44] *** committable6 left
[16:44] *** coverable6 left
[16:44] *** shareable6 left
[16:47] *** bloatable6 joined
[16:47] *** greppable6 joined
[16:47] *** bisectable6 joined
[16:47] *** unicodable6 joined
[16:48] *** notable6 joined
[16:48] *** evalable6 joined
[16:48] *** nativecallable6 joined
[16:48] *** linkable6 joined
[16:48] *** benchable6 joined
[16:48] *** releasable6 joined
[16:48] *** tellable6 joined
[16:48] *** coverable6 joined
[16:49] *** quotable6 joined
[16:49] *** shareable6 joined
[16:49] *** sourceable6 joined
[16:49] *** committable6 joined
[17:05] <Geth> ¦ rakudo: 0rir++ created pull request #5833: Eliminate magic 37 in Instant class. Modify some comments

[17:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5833

[17:08] <Geth> ¦ rakudo/main: 921be1d83f | (Stefan Seifert)++ | 3 files

[17:08] <Geth> ¦ rakudo/main: RakuAST: support is-traits with types and parameters

[17:08] <Geth> ¦ rakudo/main: 

[17:08] <Geth> ¦ rakudo/main: Fixes: has $.a is foo('bar')

[17:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/921be1d83f

[17:08] <nine> 1303

[17:16] <[Coke]> https://github.com/Raku/whateverable/blob/main/xbin/Releasable.p6#L97 - this appears to be search for two "new in"s in a row? but https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft/ only ever has the single one near the top?

[17:17] <[Coke]> (and that line has been like that in releasable since it was created)

[17:22] <Geth> ¦ whateverable/main: 519bc43cda | (Will Coleda)++ | xbin/Releasable.p6

[17:22] <Geth> ¦ whateverable/main: add debug output

[17:22] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/519bc43cda

[17:23] *** coverable6 left
[17:23] *** shareable6 left
[17:23] *** nativecallable6 left
[17:23] *** committable6 left
[17:23] *** greppable6 left
[17:23] *** notable6 left
[17:23] *** bisectable6 left
[17:23] *** linkable6 left
[17:23] *** quotable6 left
[17:23] *** unicodable6 left
[17:23] *** tellable6 left
[17:23] *** bloatable6 left
[17:23] *** releasable6 left
[17:23] *** benchable6 left
[17:23] *** evalable6 left
[17:23] *** sourceable6 left
[17:25] *** coverable6 joined
[17:25] <[Coke]> coverable6: help

[17:25] <coverable6> [Coke], Like this: coverable6: f583f22 grep=SETTING:: say ‘hello’; say ‘world’ # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Coverable

[17:26] *** greppable6 joined
[17:26] *** linkable6 joined
[17:26] *** benchable6 joined
[17:26] *** nativecallable6 joined
[17:26] <Geth> ¦ whateverable/main: d291613688 | (Will Coleda)++ | xbin/Releasable.p6

[17:26] <Geth> ¦ whateverable/main: Revert "add debug output"

[17:26] <Geth> ¦ whateverable/main: 

[17:26] <Geth> ¦ whateverable/main: This reverts commit 519bc43cdacef3c8fb5dc65d6fdc84c738cde346.

[17:26] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/d291613688

[17:26] *** evalable6 joined
[17:26] *** tellable6 joined
[17:26] *** unicodable6 joined
[17:27] *** releasable6 joined
[17:27] *** shareable6 joined
[17:27] *** committable6 joined
[17:27] *** quotable6 joined
[17:27] *** notable6 joined
[17:27] *** shareable6 left
[17:27] *** releasable6 left
[17:27] *** coverable6 left
[17:27] *** nativecallable6 left
[17:27] *** committable6 left
[17:27] *** benchable6 left
[17:27] *** notable6 left
[17:27] *** quotable6 left
[17:27] *** evalable6 left
[17:27] *** tellable6 left
[17:27] *** linkable6 left
[17:27] *** unicodable6 left
[17:27] *** greppable6 left
[17:29] <timo> [Coke]: i think the (.*?) swallows up the entire section before the next "new in"

[17:29] <[Coke]> so how does it match?

[17:30] <[Coke]> (because it is matching, it's not printing that error)

[17:30] *** greppable6 joined
[17:30] *** quotable6 joined
[17:30] *** bisectable6 joined
[17:31] *** nativecallable6 joined
[17:31] *** releasable6 joined
[17:31] *** evalable6 joined
[17:31] *** committable6 joined
[17:31] *** sourceable6 joined
[17:31] *** linkable6 joined
[17:31] *** coverable6 joined
[17:32] *** bloatable6 joined
[17:32] *** shareable6 joined
[17:32] *** benchable6 joined
[17:32] *** unicodable6 joined
[17:32] *** tellable6 joined
[17:33] *** notable6 joined
[17:33] <timo> were you giving it the url in the command? i'm not sure where in the log i can see the command execution that you're refering to right now

[17:34] <timo> it looks like it takes the contents of the changelog draft wiki page and puts it in front of the changelog from the repository, unless you give it a url in the command

[17:34] <Geth> ¦ whateverable/main: 6b9032a34d | (Will Coleda)++ | xbin/Releasable.p6

[17:34] <Geth> ¦ whateverable/main: add debug output

[17:34] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/6b9032a34d

[17:35] <[Coke]> ooof. OK. thank you

[17:35] <[Coke]> AND I FOUND ANOTHER BUG I DID

[17:35] *** greppable6 left
[17:35] *** releasable6 left
[17:35] <[Coke]> *sigh*

[17:35] *** notable6 left
[17:35] *** unicodable6 left
[17:35] *** linkable6 left
[17:35] *** coverable6 left
[17:35] *** committable6 left
[17:35] *** evalable6 left
[17:35] *** benchable6 left
[17:35] *** bloatable6 left
[17:35] *** nativecallable6 left
[17:35] *** bisectable6 left
[17:35] *** tellable6 left
[17:35] *** shareable6 left
[17:35] *** sourceable6 left
[17:35] *** quotable6 left
[17:38] *** greppable6 joined
[17:38] *** releasable6 joined
[17:38] *** unicodable6 joined
[17:38] *** coverable6 joined
[17:38] <[Coke]> timo++

[17:39] *** committable6 joined
[17:39] <Geth> ¦ rakudo/main: 4c2fa9404a | (Will Coleda)++ | docs/ChangeLog

[17:39] <Geth> ¦ rakudo/main: Actually add Changelog for 2025.03

[17:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4c2fa9404a

[17:39] <timo> debugging an irc bot could be an interesting torture-test for the debugger UI

[17:39] *** evalable6 joined
[17:39] *** shareable6 joined
[17:40] *** quotable6 joined
[17:40] *** notable6 joined
[17:40] *** nativecallable6 joined
[17:40] <Geth> ¦ whateverable/main: e4f2155e4c | (Will Coleda)++ | xbin/Releasable.p6

[17:40] <Geth> ¦ whateverable/main: remove debug output

[17:40] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/e4f2155e4c

[17:40] *** linkable6 joined
[17:40] <timo> although ... you can suspend and resume individual threads, but the "whenever" that handles all incoming messages probably is blocked while you're single-stepping through one of the irc-to-me methods ...

[17:40] *** benchable6 joined
[17:41] *** bloatable6 joined
[17:41] *** sourceable6 joined
[17:41] *** bisectable6 joined
[17:41] *** sourceable6 left
[17:41] *** nativecallable6 left
[17:41] *** bloatable6 left
[17:41] *** benchable6 left
[17:41] *** quotable6 left
[17:41] *** evalable6 left
[17:41] *** coverable6 left
[17:41] <timo> on the other hand, there is awaits and such in there, and it's not supposed to be "blocking" right

[17:41] *** greppable6 left
[17:41] *** bisectable6 left
[17:41] *** committable6 left
[17:41] *** notable6 left
[17:41] *** shareable6 left
[17:41] *** unicodable6 left
[17:41] *** linkable6 left
[17:41] *** releasable6 left
[17:41] <timo> coke, dear, what did you do? :D

[17:42] <[Coke]> That would be less heavy handed than what I'm doing now, for sure.

[17:42] <[Coke]> timo: I made 3 big (but not unrecoverable) mistakes doing the 2025.03 release.

[17:42] <[Coke]> THAT WE KNOW OF. :)

[17:42] <timo> the debugging commandline thingie i've built oh-so-long-ago has some difficulties

[17:43] <timo> the debugger built into comma is good, since it mostly hooks up the intellij-provided debugger UI and UX with the stuff it needs from moarvm

[17:44] *** coverable6 joined
[17:44] *** evalable6 joined
[17:44] *** shareable6 joined
[17:44] *** bisectable6 joined
[17:44] *** benchable6 joined
[17:45] *** tellable6 joined
[17:45] *** releasable6 joined
[17:45] *** notable6 joined
[17:45] *** quotable6 joined
[17:45] *** linkable6 joined
[17:46] *** greppable6 joined
[17:46] *** committable6 joined
[17:46] *** unicodable6 joined
[17:46] *** nativecallable6 joined
[17:46] *** bloatable6 joined
[17:46] *** sourceable6 joined
[17:51] <[Coke]> releasable6: next

[17:51] <releasable6> [Coke], Next release in ≈25 days and ≈1 hour. There are no known blockers. 1 out of 34 commits logged

[17:51] <releasable6> [Coke], Details: https://gist.github.com/268f6f51ac43c6ad00dbd827d3e35128

[17:52] <[Coke]> There, much better.

[17:56] <[Coke]> releasable6: next

[17:56] <releasable6> [Coke], Next release in ≈25 days and ≈1 hour. There are no known blockers. 30 out of 34 commits logged

[17:56] <releasable6> [Coke], Details: https://gist.github.com/3d06a209aee0680b89ab24106e1e3755

[17:57] <[Coke]> there, got a headstart on the rakuast commits (already 23 of them)

[18:07] <Geth> ¦ rakudo/main: 114dafe287 | (Elizabeth Mattijsen)++ | 2 files

[18:07] <Geth> ¦ rakudo/main: Move experimental :pack tests to Rakudo

[18:07] <Geth> ¦ rakudo/main: 

[18:07] <Geth> ¦ rakudo/main: And activate a new directory t/13-experimental in "make test".

[18:07] <Geth> ¦ rakudo/main: 

[18:07] <Geth> ¦ rakudo/main: Also move these tests into a single file for convenience.

[18:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/114dafe287

[18:08] <Geth> ¦ roast: b83b952d7d | (Elizabeth Mattijsen)++ | 3 files

[18:08] <Geth> ¦ roast: Move experimental :pack tests to Rakudo

[18:08] <Geth> ¦ roast: 

[18:08] <Geth> ¦ roast: As long as these are marked "experimental", they shouldn't be part

[18:08] <Geth> ¦ roast: of roast

[18:08] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b83b952d7d

[18:09] <nine> Aw man...even t/spec/S12-construction/roles-6e.t is failing due to BEGIN time disassociation with outer lexical variables

[18:10] <lizmat> make @order a dynvar ?

[18:11] <lizmat> I mean, the side-effects are used to test whether something ran or not

[18:11] <lizmat> we're not testing whether the side-effects work

[18:12] <nine> Given how often we run into this, I wonder if there is a way to just make these tests work. At least it would be a case of a single fix for multiple test files

[18:12] <lizmat> hmmm... making it a dynvar didn't help

[18:13] <nine> dynvars are also lexicals

[18:13] <nine> t/spec/S14-roles/versioning.t expects classes to have generated POPULATE methods

[18:17] <Geth> ¦ roast: 3d3e966b79 | (Elizabeth Mattijsen)++ | S12-coercion/coercion-return.t

[18:17] <Geth> ¦ roast: Remove unneeded "use experimental :will-complain"

[18:17] <Geth> ¦ roast: 

[18:17] <Geth> ¦ roast: And also remove all trailing whitespace

[18:17] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3d3e966b79

[18:22] <nine> lizmat: t/spec/S26-documentation/block-leading-user-format.t fails because with RakuAST the output is missing "line 4" i.e. the last #line directive that's followed only by whitespace. Could you have a look?

[18:22] <lizmat> will do

[18:23] <nine> ++lizmat

[18:24] <Geth> ¦ rakudo/main: f434c4bab4 | (Elizabeth Mattijsen)++ | t/13-experimental/will-complain.rakutest

[18:24] <Geth> ¦ rakudo/main: Move experimental :will-complain tests to Rakudo

[18:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f434c4bab4

[18:24] <nine> What the heck is this now? @array[|| @indices] = 42,666

[18:25] <lizmat> that's flattening syntax in 6.e

[18:25] <lizmat> multidim flattening

[18:26] <Geth> ¦ roast: f3819842d8 | (Elizabeth Mattijsen)++ | 2 files

[18:26] <Geth> ¦ roast: Move experimental :will-complain tests to Rakudo

[18:26] <Geth> ¦ roast: 

[18:26] <Geth> ¦ roast: As long as these are marked "experimental", they shouldn't be part

[18:26] <Geth> ¦ roast: of roast

[18:26] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f3819842d8

[18:27] <lizmat> nine: https://github.com/Raku/problem-solving/issues/287

[18:27] <nine> What does it do?

[18:29] <lizmat> m: use v6.*; my @a = 1,2,3; my %h; %h{||@a} = 42; dd %h

[18:29] <camelia> rakudo-moar 114dafe28: OUTPUT: «{"1" => ${"2" => ${"3" => 42}}}␤»

[18:29] <lizmat> actually, the opposite of flattening  :-)

[18:29] <lizmat> I misremembered

[18:30] <lizmat> it codegens to HyperWhatever as the 2nd arg to postcircumfix { }

[18:30] <nine> I don't find any such thing in the grammar

[18:30] <lizmat> see src/core.e/hash_hyperslice.rakumod

[18:31] <nine> There's also no prefix:<||> there?

[18:34] <lizmat> fwiw, my recollection is that the old grammar already supported it, but the postcircumfix candidates didn't know what to do with it

[18:35] <nine> m: use v6.e.PREVIEW; say [[1,2,3][4,5,6]][||(0,0)]'

[18:35] <camelia> rakudo-moar f434c4bab: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> e.PREVIEW; say [[1,2,3][4,5,6]][||(0,0)]<HERE>'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        st…»

[18:36] <nine> m: use v6.e.PREVIEW; say [[1,2,3][4,5,6]][||(0,0)]

[18:36] <camelia> rakudo-moar f434c4bab: OUTPUT: «(Any)␤»

[18:36] <nine> Hm....looks like I still don't understand what this is supposed to do

[18:36] <lizmat> m: use v6.*; my @a = 1,2,3; my %h; %h{||@a} = 42; dd %h

[18:36] <camelia> rakudo-moar f434c4bab: OUTPUT: «{"1" => ${"2" => ${"3" => 42}}}␤»

[18:37] <lizmat> take the indices and use them as keys into a nested hash

[18:37] <nine> But the failing test is about arrays

[18:39] <lizmat> m: use v6.*; my @a = 1,2,3; my @b; @b[||@a] = 42; dd @b

[18:39] <camelia> rakudo-moar f434c4bab: OUTPUT: «[Any, [Any, Any, [Any, Any, Any, 42]]]␤»

[18:41] <nine> m: use v6.e.PREVIEW; say my @a = [[1,2,3][4,5,6]]; @a[||(0,0)] = 69; say @a[||(0,0)]

[18:41] <camelia> rakudo-moar f434c4bab: OUTPUT: «[(Any) (Any) (Any)]␤69␤»

[18:41] <nine> m: use v6.e.PREVIEW; say my @a = [[1,2,3][4,5,6]]; @a[||(0,0)] = 69; say @a

[18:41] <camelia> rakudo-moar f434c4bab: OUTPUT: «[(Any) (Any) (Any)]␤[[69] (Any) (Any)]␤»

[18:42] <nine> m: use v6.e.PREVIEW; my @a = [[1,2,3][4,5,6]]; say @a; @a[||(0,0)] = 69; say @a

[18:42] <camelia> rakudo-moar f434c4bab: OUTPUT: «[(Any) (Any) (Any)]␤[[69] (Any) (Any)]␤»

[18:42] <nine> m: use v6.e.PREVIEW; say [[1,2,3], [4,5,6]][||(0,0)]

[18:42] <camelia> rakudo-moar f434c4bab: OUTPUT: «1␤»

[18:42] <nine> LOL what a stupid mistake on my part :)

[18:45] <nine> Found it in the git log. It parses as two slip operators but then gets post-processed in the actions

[18:46] <lizmat> that feels hacky

[18:47] <nine> A very Hollywood thing to do: "We'll fix it in post!"

[18:47] <lizmat> indeed

[18:56] <Geth> ¦ roast: 50011a6efe | (Elizabeth Mattijsen)++ | integration/99problems-41-to-50.t

[18:56] <Geth> ¦ roast: Remove use of "is cached"

[18:56] <Geth> ¦ roast: 

[18:56] <Geth> ¦ roast: It's not material to the testing that is done on the algorithm,

[18:56] <Geth> ¦ roast: and performance-wise it's not noticeable.  Remove it since it is

[18:56] <Geth> ¦ roast: an experimental feature that shouldn't be tested on roast

[18:56] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/50011a6efe

[19:02] <Geth> ¦ rakudo/main: b43527a6b8 | (Elizabeth Mattijsen)++ | t/13-experimental/is-cached.rakutest

[19:02] <Geth> ¦ rakudo/main: Move experimental :cached tests to Rakudo

[19:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b43527a6b8

[19:04] <lizmat> o

[19:04] <Geth> ¦ roast: 9b41ab3507 | (Elizabeth Mattijsen)++ | 2 files

[19:04] <Geth> ¦ roast: Move experimental :cached tests to Rakudo

[19:04] <Geth> ¦ roast: 

[19:04] <Geth> ¦ roast: As long as these are marked "experimental", they shouldn't be part

[19:04] <Geth> ¦ roast: of roast

[19:04] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9b41ab3507

[19:26] <Geth> ¦ rakudo/main: ab34d10801 | (Elizabeth Mattijsen)++ | 2 files

[19:26] <Geth> ¦ rakudo/main: Port the ":cached" precompilation test from roast

[19:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ab34d10801

[19:28] <Geth> ¦ roast: 6336804343 | (Elizabeth Mattijsen)++ | 2 files

[19:28] <Geth> ¦ roast: Remove "is cached" precomilation test

[19:28] <Geth> ¦ roast: 

[19:28] <Geth> ¦ roast: As long as these are marked "experimental", they shouldn't be part

[19:28] <Geth> ¦ roast: of roast

[19:28] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6336804343

[19:32] <Geth> ¦ rakudo/main: fd069d6685 | (Elizabeth Mattijsen)++ | t/13-experimental/pack.rakutest

[19:32] <Geth> ¦ rakudo/main: Port :pack Buf test from roast

[19:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fd069d6685

[19:33] <Geth> ¦ roast: b158c5f19c | (Elizabeth Mattijsen)++ | S03-operators/buf.t

[19:33] <Geth> ¦ roast: Remove "experimental :pack" test

[19:33] <Geth> ¦ roast: 

[19:33] <Geth> ¦ roast: As long as these are marked "experimental", they shouldn't be part

[19:33] <Geth> ¦ roast: of roast

[19:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b158c5f19c

[19:35] <Geth> ¦ rakudo/main: 067236b320 | (Elizabeth Mattijsen)++ | t/13-experimental/pack.rakutest

[19:35] <Geth> ¦ rakudo/main: Only need to mention experimental :pack once

[19:35] <Geth> ¦ rakudo/main: 

[19:35] <Geth> ¦ rakudo/main: Copy pasto from the port from roast

[19:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/067236b320

[19:39] <Geth> ¦ rakudo/main: 3c7bd84917 | (Elizabeth Mattijsen)++ | t/13-experimental/pack.rakutest

[19:39] <Geth> ¦ rakudo/main: Port :pack error throwing tests from roast

[19:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3c7bd84917

[19:40] <Geth> ¦ roast: c6d9d67a05 | (Elizabeth Mattijsen)++ | S32-exceptions/misc2.t

[19:40] <Geth> ¦ roast: Remove "experimental :pack" throwing tests

[19:40] <Geth> ¦ roast: 

[19:40] <Geth> ¦ roast: As long as these are marked "experimental", they shouldn't be part

[19:40] <Geth> ¦ roast: of roast

[19:40] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c6d9d67a05

[19:43] <Geth> ¦ rakudo/main: 42557e38b5 | (Elizabeth Mattijsen)++ | t/13-experimental/pack.rakutest

[19:43] <Geth> ¦ rakudo/main: Port :pack visibility test from roast

[19:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/42557e38b5

[19:44] <Geth> ¦ roast: a92f20bc9f | (Elizabeth Mattijsen)++ | S32-exceptions/misc2.t

[19:44] <Geth> ¦ roast: Remove "experimental :pack" visibility test

[19:44] <Geth> ¦ roast: 

[19:44] <Geth> ¦ roast: As long as these are marked "experimental", they shouldn't be part

[19:44] <Geth> ¦ roast: of roast

[19:44] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a92f20bc9f

[19:49] <[Coke]> releasable6: next

[19:49] <releasable6> [Coke], Next release in ≈24 days and ≈23 hours. There are no known blockers. 35 out of 41 commits logged

[19:49] <releasable6> [Coke], Details: https://gist.github.com/4ce07487498ad3d7a1574b7c5d45312c

[19:52] <lizmat> nine: re t/spec/S26-documentation/block-leading-user-format.t  I will need to sleep over that: not entirely sure it's an implementation or a test issue yet

[19:57] <lizmat> I think there are now only experimental :macros tests in roast now (no other "use experimental" ones

[19:57] <lizmat> which I will handle tomorrow as well

[19:57] <lizmat> afk&

[20:05] *** librasteve_ left
[21:56] <Geth> ¦ rakudo/main: ba9a70b162 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[21:56] <Geth> ¦ rakudo/main: RakuAST: fix BEGIN time disassociation with outer lexical variables

[21:56] <Geth> ¦ rakudo/main: 

[21:56] <Geth> ¦ rakudo/main: When code compiled at BEGIN time references variables declared in outer

[21:56] <Geth> ¦ rakudo/main: scopes, those scopes don't even exist yet when we compile and maybe run

[21:56] <Geth> ¦ rakudo/main: that code. Thus we replaced variable access with whatever compile time

[21:56] <Geth> ¦ rakudo/main: value we could find. This worked better than one would expect since even

[21:56] <Geth> ¦ rakudo/main: normal variables have compile time values, namely their containers.

[21:56] <Geth> ¦ rakudo/main: <…commit message has 13 more lines…>

[21:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ba9a70b162

[21:56] <nine> 1305 :)

[21:56] <nine> Realized how to fix it when I was on my rower :)

[21:57] <nine> Currently covers only role bodies as only those get the benefit of LexicalFixup, but that should be easy to generalize.

[23:14] <timo> man, i wonder what kind of fixes you could come up with if you upgraded from rower to rowest

[23:17] *** sena_kun left
