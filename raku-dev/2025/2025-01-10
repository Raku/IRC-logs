[00:10] <lizmat> reading https://news.ycombinator.com/item?id=42638508 I wonder whether we could use a NOTFIRST phaser in Raku

[00:16] <coleman> What would be different from "once" (in loops) https://docs.raku.org/syntax/once

[00:18] <timo> so a shortcut for `if $++ { ... }`?

[00:19] <timo> m: for ^10 { if True ^ff^ False { say "ah" }; say $_ }

[00:19] <camelia> rakudo-moar 633df2893: OUTPUT: «0␤ah␤1␤ah␤2␤ah␤3␤ah␤4␤ah␤5␤ah␤6␤ah␤7␤ah␤8␤ah␤9␤»

[00:19] <timo> m: for ^10 { if $++ { say "ah" }; say $_ }

[00:19] <camelia> rakudo-moar 633df2893: OUTPUT: «0␤ah␤1␤ah␤2␤ah␤3␤ah␤4␤ah␤5␤ah␤6␤ah␤7␤ah␤8␤ah␤9␤»

[00:29] <coleman> that's elegant

[00:30] <timo> m: for ^10 { if $++ { say "ah"; if $++ { say "ah!"; if $++ { say "Ah!"; if $++ { say "AH!" } } }; say $_ }

[00:30] <camelia> rakudo-moar 633df2893: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> Ah!"; if $++ { say "AH!" } } }; say $_ }<HERE><EOL>␤»

[00:31] <timo> m: for ^10 { if $++ { say "ah"; if $++ { say "ah!"; if $++ { say "Ah!"; if $++ { say "AH!" } } } }; say $_ }

[00:31] <camelia> rakudo-moar 633df2893: OUTPUT: «0␤ah␤1␤ah␤2␤ah␤3␤ah␤4␤ah␤5␤ah␤6␤ah␤7␤ah␤8␤ah␤9␤»

[00:31] <timo> not like that hm?

[00:31] <timo> the inner ifs are all closure-cloned?

[00:32] <coleman> meaning they're 0 every time maybe?

[00:51] <timo> yeah a simple $++ inside of the first if $++ is always 0 sadface

[00:52] <timo> i guess that's what you get for anonymous state variables, they just attach to the closest block they're in

[01:22] <coleman> Seems like a bug but I don't know if it technically violates any rules. if isn't supposed to topicalize, but that's technically not the same thing

[01:23] <coleman> ah nevermind; the docs say it gets reset in each lexical scope

[01:23] <coleman> https://docs.raku.org/syntax/$

[02:40] *** guifa joined
[03:48] *** guifa left
[04:33] *** nine left
[04:33] *** camelia left
[04:33] *** nine_ joined
[04:41] *** camelia joined
[08:45] *** finanalyst joined
[08:50] *** finanalyst left
[09:33] *** sena_kun joined
[09:35] <lizmat> FWIW, I think the anonymous state variable has been a mistake from readability point of view

[09:39] *** sena_kun left
[11:01] <timo> you're not wrong. it's probably something that should only be used rarely

[11:04] <lizmat> having a NOTFIRST phaser would help with that  :-)

[11:05] <lizmat> and hide $ under that :-)

[11:06] <lizmat> anyways, I recently could have used that, but resorted to $++ :-(

[11:12] <timo> firstn't

[11:12] <lizmat> SECONDLY

[11:12] <timo> OTOH { ... }

[11:13] <lizmat> heh, I like that

[11:13] <lizmat> THEN

[11:13] <lizmat> meh

[11:19] <timo> TSRIF { }

[11:19] <lizmat> ⊥SȢIℲ { }

[11:25] <timo> so, we have reverse for lists right. why don't we have "reverse but upside down"

[11:25] <timo> you have a module to create text in unicode pseudo-alphabets like upside-down, don't you?

[11:27] <lizmat> Acme::Text::UpsideDown, which installs an "ud" script  :-)

[11:27] <timo> .ʇsıʃ

[11:27] <timo> there's also coke's App::Unicode::Mangle with --invert

[11:28] <lizmat> indeed  :-)

[12:38] <lizmat> bisectable6: old=2020.01 use v6.*; say &nano

[12:39] <bisectable6> lizmat, Bisecting by output (old=2020.01 new=633df28) because on both starting points the exit code is 1

[12:39] *** bisectable6 left
[12:40] <lizmat> meh

[12:42] *** bisectable6 joined
[12:42] <lizmat> bisectable6: old=2020.01 use v6.*; say &term:<nano>

[12:42] <bisectable6> lizmat, Bisecting by exit code (old=2020.01 new=633df28). Old exit code: 1

[12:44] <bisectable6> lizmat, bisect log: https://gist.github.com/7f75a45d7871ff4414c35b60e42aa6c1

[12:44] <bisectable6> lizmat, (2022-08-08) https://github.com/rakudo/rakudo/commit/10feda116910f71c04a6b87e2743768177f3b069

[15:47] <Geth> ¦ rakudo/coke/ps1: 69168d04bd | (Will Coleda)++ | src/core.c/REPL.rakumod

[15:47] <Geth> ¦ rakudo/coke/ps1: add compiler & language version to PROMPT

[15:47] <Geth> ¦ rakudo/coke/ps1: review: https://github.com/rakudo/rakudo/commit/69168d04bd

[16:40] <Geth> ¦ rakudo/coke/ps1: 13e0f8e0b8 | (Will Coleda)++ | src/core.c/REPL.rakumod

[16:40] <Geth> ¦ rakudo/coke/ps1: Add RAKUDO_REPL_PROMPT2

[16:40] <Geth> ¦ rakudo/coke/ps1: 

[16:40] <Geth> ¦ rakudo/coke/ps1: * extract fixup to a sub, allow same expansions as on main PROMPT.

[16:40] <Geth> ¦ rakudo/coke/ps1: review: https://github.com/rakudo/rakudo/commit/13e0f8e0b8

[16:51] <lizmat> No such method 'dispatch_info' for invocant of type 'Signature'

[16:51] <lizmat> ab5tract: does that ring a bell??  ^^

[16:52] <Geth> ¦ rakudo/coke/ps1: bd98afd4b6 | (Will Coleda)++ | src/core.c/REPL.rakumod

[16:52] <Geth> ¦ rakudo/coke/ps1: Support \e for ESC in PROMPT

[16:52] <Geth> ¦ rakudo/coke/ps1: review: https://github.com/rakudo/rakudo/commit/bd98afd4b6

[16:54] <[Coke]> ^^ with that, you can at least use the ansi codes to switch colors/bold on the prompt. RAKUDO_REPL_PROMPT='[\i \l \e\t\e]> ' (index, language version, time in red)

[17:07] <ab5tract> lizmat: that sounds like something is being misapplied somehow/somewhere

[17:07] <lizmat> yeah... :-)

[17:07] <ab5tract> dispatch_info lives on Routine

[17:08] <ab5tract> But nothing has changed around that for a while AFAIK

[17:08] <lizmat> yeah... ok, looks like it's a local change in ParaSeq that's causing this

[17:08] <lizmat> wonder how that happened

[17:08] <ab5tract> Weird

[17:09] <ab5tract> I you can push to a branch or something I may be able to poke at it this weekend

[17:12] <lizmat> you know what?

[17:13] <lizmat> the problem went away after nuking the local .precomp

[17:15] <lizmat> running a coverage test on all of the ParaSeq tests now

[17:16] <lizmat> 56.86%

[17:16] <lizmat> not bad on first try  :-)

[17:23] <ab5tract> :D

[20:06] <Geth> ¦ rakudo/coke/ps1: 3d6daf3838 | (Will Coleda)++ | src/core.c/REPL.rakumod

[20:06] <Geth> ¦ rakudo/coke/ps1: Add \V, \L for more verbose versions

[20:06] <Geth> ¦ rakudo/coke/ps1: 

[20:06] <Geth> ¦ rakudo/coke/ps1: of version, language

[20:06] <Geth> ¦ rakudo/coke/ps1: review: https://github.com/rakudo/rakudo/commit/3d6daf3838

[20:54] <[Coke]> [1] >raku(14230,0x1f7060f40) malloc: Heap corruption detected, free list is damaged at 0x600003948240

[20:54] <[Coke]> getting this SOO often

[20:54] <lizmat> on Intel or ARM ?

[20:54] <[Coke]> (in the REPL on 2024.12 on mac)

[20:54] <lizmat> apple Silicon ?

[20:54] <[Coke]> M2

[20:54] <lizmat> ack  hmmm  so it's not the JIT

[20:54] <lizmat> is there any precomp involved ?

[20:55] <lizmat> ah, REPL

[20:55] <lizmat> ok, so repeated EVALs

[20:56] <timo> isn't that just the MakeRaw thing?

[20:58] <[Coke]> I thought I had installed the latest everything, but it's possible I have not

[20:58] <[Coke]> it used to be occasionally, it's like 75% of my REPLs today

[20:58] <[Coke]> (the standard ones, not the ones I'm testing on coke/ps1

[20:59] <lizmat> patrickb said that it was updated, however I don't see it on raku.land?

[20:59] <lizmat> maybe looking for the wrong nameM

[20:59] <lizmat> ?

[21:00] <[Coke]> I am switching to '-e' for now

[21:47] <Geth> ¦ rakudo/coke/ps1: 7517d2ab35 | (Will Coleda)++ | src/core.c/REPL.rakumod

[21:47] <Geth> ¦ rakudo/coke/ps1: remove \A, upgrade \t

[21:47] <Geth> ¦ rakudo/coke/ps1: 

[21:47] <Geth> ¦ rakudo/coke/ps1: \t now takes an optional {arg} which support a subset of strftime

[21:47] <Geth> ¦ rakudo/coke/ps1: review: https://github.com/rakudo/rakudo/commit/7517d2ab35

[21:50] <patrickb> https://raku.land/zef:patrickb/Terminal-MakeRaw/changes?v=1.0.1

[21:50] <patrickb> It's there.

[21:52] <patrickb> But: I did not bump the version in the deps (Terminal-LineEditor (I don't recall the second)) as those depend on it with a + (https://github.com/japhb/Terminal-LineEditor/blob/main/META6.json#L9)

[21:53] <patrickb> I think it does mean, that you'll have to manually make sure you have the latest version installed and maybe the older uninstalled.

[21:53] <[Coke]> - Installed: Yes, as Terminal-MakeRaw:ver<1.0.0>:auth<zef:patrickb>

[21:54] <[Coke]> ... I don't have terminal lineeditor installed at all on that raku

[21:54] <[Coke]> so guessing that's not the failure mode?

[21:54] <patrickb> Hm, there was some other module as well but I don't recall which one. Terminal-Print?

[21:54] <[Coke]> oops

[21:55] <[Coke]> - Installed: Yes / - Identity: Terminal::LineEditor:ver<0.0.17>:auth<zef:japhb>

[21:55] <patrickb> https://github.com/ab5tract/Terminal-Print/blob/master/META6.json#L12

[21:55] <patrickb> Yeah, that's the one.

[22:59] <Geth> ¦ problem-solving/coke/repl: d3a10c7da9 | (Will Coleda)++ | solutions/rakudo/Configurable-REPL.md

[22:59] <Geth> ¦ problem-solving/coke/repl: Add Solution for #459

[22:59] <Geth> ¦ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/d3a10c7da9

[23:01] <Geth> ¦ problem-solving/coke/repl: 04eae3684e | (Will Coleda)++ | solutions/rakudo/Configurable-REPL.md

[23:01] <Geth> ¦ problem-solving/coke/repl: add defaults

[23:01] <Geth> ¦ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/04eae3684e

[23:02] <Geth> ¦ problem-solving/coke/repl: cdaa27bae6 | (Will Coleda)++ (committed using GitHub Web editor) | solutions/rakudo/Configurable-REPL.md

[23:02] <Geth> ¦ problem-solving/coke/repl: fix markdown

[23:02] <Geth> ¦ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/cdaa27bae6

[23:03] <Geth> ¦ problem-solving/coke/repl: ccd0bad368 | (Will Coleda)++ (committed using GitHub Web editor) | solutions/rakudo/Configurable-REPL.md

[23:03] <Geth> ¦ problem-solving/coke/repl: fix markdown

[23:03] <Geth> ¦ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/ccd0bad368

[23:03] <Geth> ¦ problem-solving/coke/repl: d574b3cbc8 | (Will Coleda)++ (committed using GitHub Web editor) | solutions/rakudo/Configurable-REPL.md

[23:03] <Geth> ¦ problem-solving/coke/repl: fix env var set

[23:03] <Geth> ¦ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/d574b3cbc8

[23:04] <Geth> ¦ problem-solving/coke/repl: 73bfd80c82 | (Will Coleda)++ (committed using GitHub Web editor) | solutions/rakudo/Configurable-REPL.md

[23:04] <Geth> ¦ problem-solving/coke/repl: fix markdown

[23:04] <Geth> ¦ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/73bfd80c82

[23:07] <Geth> ¦ problem-solving/coke/repl: 29bdec4ca9 | (Will Coleda)++ (committed using GitHub Web editor) | solutions/rakudo/Configurable-REPL.md

[23:07] <Geth> ¦ problem-solving/coke/repl: fixes

[23:07] <Geth> ¦ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/29bdec4ca9

[23:08] <Geth> ¦ problem-solving/coke/repl: a52cfe4491 | (Will Coleda)++ (committed using GitHub Web editor) | solutions/rakudo/Configurable-REPL.md

[23:08] <Geth> ¦ problem-solving/coke/repl: Update Configurable-REPL.md

[23:08] <Geth> ¦ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/a52cfe4491

[23:09] <Geth> ¦ problem-solving: coke++ created pull request #460: Configurable REPL prompt

[23:09] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/460

