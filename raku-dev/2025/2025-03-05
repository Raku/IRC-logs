[00:10] *** sena_kun left
[07:50] *** finanalyst joined
[07:52] *** finanalyst left
[07:52] *** finanalyst joined
[10:07] *** finanalyst left
[10:16] <Geth> ¦ rakudo/main: 02ce95d902 | (Elizabeth Mattijsen)++ | t/02-rakudo/12-proto-arity-count.t

[10:16] <Geth> ¦ rakudo/main: Allow Mu:U as synonym for Mu in testing signatures

[10:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/02ce95d902

[10:21] <Geth> ¦ nqp/main: cb8bded5a9 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[10:21] <Geth> ¦ nqp/main: Bump MoarVM for no-lexicals in frame fix, MasterDuke++

[10:21] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/cb8bded5a9

[10:32] *** sena_kun joined
[10:41] *** sena_kun left
[11:32] <Geth> ¦ rakudo/main: 60309b6aee | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[11:32] <Geth> ¦ rakudo/main: Bump NQP for no-lexicals in frame fix, MasterDuke++

[11:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/60309b6aee

[11:37] *** rakkable left
[11:37] *** rakkable joined
[13:22] <lizmat> m: say Q|:(2)|.AST.statements.head.expression.signature.parameters.head

[13:22] <camelia> rakudo-moar 60309b6ae: OUTPUT: «RakuAST::Parameter.new(␤  type  => RakuAST::Type::Simple.new(␤    RakuAST::Name.from-identifier("Int")␤  ),␤  value => 2␤)␤»

[13:23] <lizmat> nine: looking at "value => 2", feels like that should be: "value => RakuAST::IntLiteral.new(2)" or "value => RakuAST::Literal.from-value(2)"  ??

[15:03] <nine> Wouldn't work for negative numbers

[15:04] <lizmat> value => -1 ?

[15:27] <nine> Yeah, that would probably work out ok, though these would be the only negative number literals

[15:27] <nine> But then, what would this exercise actually solve?

[15:36] *** vrurg_ joined
[15:37] *** vrurg left
[16:50] <lizmat> my point is that it currently seems to codegen incorrectly

[16:50] <lizmat> nine ^^

[16:50] <nine> how?

[16:53] <Geth> ¦ roast: 548e7b9aad | (Stefan Seifert)++ | S12-attributes/class.t

[16:53] <Geth> ¦ roast: Add missing } in test

[16:53] <Geth> ¦ roast: 

[16:53] <Geth> ¦ roast: The test was relying on the implementation detail that the invalid $!a

[16:53] <Geth> ¦ roast: access would be reported before the parse error due to the missing }.

[16:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/548e7b9aad

[16:55] <lizmat> nine: because in "my $a = 1" the one is codegenned as RakuAST::IntLiteral.new(1)

[16:55] <lizmat> and in "sub a(2) { }' the 2 is codegenned as "2" instead of RakuAST::IntLiteral.new(2)

[16:57] <nine> That's not codegen, that's parsing. And it's just a different and arguably weird way that parameter literals are parsed. Who's to say it's wrong?

[16:57] <nine> After all:

[16:57] <nine> m: sub a(2) { }; a(2);

[16:57] <camelia> rakudo-moar 60309b6ae: ( no output )

[16:57] <nine> m: sub a(2) { }; a(3);;

[16:57] <camelia> rakudo-moar 60309b6ae: OUTPUT: «Constraint type check failed in binding to parameter '<anon>'; expected 2 but got 3␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:01] <lizmat> ok, if "1" is arguably as right as RakuAST::IntLiteral.new("1"), why do we have the RakuAST::IntLiteral class at all then ?

[17:01] <Geth> ¦ rakudo/main: 11 commits pushed by (Stefan Seifert)++

[17:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/60309b6aeecf...6084eb2ff259

[17:01] <nine> 1251

[17:01] <nine> Because of:

[17:01] <nine> m: 1

[17:01] <camelia> rakudo-moar 60309b6ae: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 1 in sink context (line 1)␤»

[17:02] <lizmat> looks like you're feeling better  :-)

[17:02] <nine> You can't just put a literal value in the AST

[17:02] <lizmat> then why is it ok in a signature ?

[17:02] <nine> But let's flip the question: if RakuAST::Parameter.new(... value => 2) is wrong, why is RakuAST::LiteralInt.new(value => 2) right?

[17:03] <nine> It's ok for a Parameter because the Parameter does know what to do with the value. Same as LiteralInt

[17:03] <lizmat> IntLiteral, but yeah

[17:04] <lizmat> hmmm... the IntLiteral class has special QASTing logic, perhaps that would be a reason for having it?

[17:05] <nine> To be honest, at this point I don't care whether there's a good reason for this seemingly arbitrary distinction. Maybe we could unify it and get rid of that complicated handling for negative values I had to put in. But what we have works.

[17:06] <nine> Fever's gone and with it the headache. Haven't felt hungry since Sunday though, despite eating very little.

[17:08] <lizmat> glad to hear you're feeling better....  I started having a cold on Monday last week,  thought I was over it, but alas

[17:15] <lizmat> m: sub a([2]) { }; dd &a.signature.params.head    # looks like Parameter.raku could use some TLC  :-)

[17:15] <camelia> rakudo-moar 6084eb2ff: OUTPUT: «Positional  = @ (2)␤»

[17:16] <lizmat> m: sub a(@ (2)) { dd }; a [2]    # surprised to see it's actually valid syntax

[17:16] <camelia> rakudo-moar 6084eb2ff: OUTPUT: «sub a(@ (2))␤»

[17:26] <nine> "surprised to see it's actually valid syntax" I get that a lot

[17:26] <lizmat> hehe

[17:26] <lizmat> oh what a tangled web we weave  :-)

[17:33] *** finanalyst joined
[18:04] *** finanalyst left
[18:07] <Geth> ¦ roast: a47ca2b065 | (Elizabeth Mattijsen)++ | S06-currying/positional.t

[18:07] <Geth> ¦ roast: Weed out .assuming tests (part 1)

[18:07] <Geth> ¦ roast: 

[18:07] <Geth> ¦ roast: As part of work on #2599 and its new implementation, it became clear

[18:07] <Geth> ¦ roast: that a lot of these tests are testing a particular implementation's

[18:07] <Geth> ¦ roast: side effects, rather than the inherent functionality.

[18:07] <Geth> ¦ roast: 

[18:07] <Geth> ¦ roast: The new implementation of .assuming produces different signatures

[18:07] <Geth> ¦ roast: <…commit message has 26 more lines…>

[18:07] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a47ca2b065

[19:55] <Geth> ¦ rakudo/main: 00a93bf827 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[19:55] <Geth> ¦ rakudo/main: RakuAST: don't call blocks used as attribute defaults prematurely

[19:55] <Geth> ¦ rakudo/main: 

[19:55] <Geth> ¦ rakudo/main: Need to put blocks in non-sink context to ensure they are not called

[19:55] <Geth> ¦ rakudo/main: immediately but instead used as default value.

[19:55] <Geth> ¦ rakudo/main: 

[19:55] <Geth> ¦ rakudo/main: Fixes: class Foo { has $.code = { die } }.new

[19:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/00a93bf827

[19:55] <Geth> ¦ rakudo/main: f8b15dcc6a | (Stefan Seifert)++ | 2 files

[19:55] <Geth> ¦ rakudo/main: RakuAST: make attributes available before class is composed

[19:55] <Geth> ¦ rakudo/main: 

[19:55] <Geth> ¦ rakudo/main: Attaching to the class right away means that we have to re-sequence the

[19:55] <Geth> ¦ rakudo/main: attribute's BEGIN handler a bit, so early traits are applied before we

[19:55] <Geth> ¦ rakudo/main: generate the attribute's meta object.

[19:55] <Geth> ¦ rakudo/main: 

[19:55] <Geth> ¦ rakudo/main: Fixes: BEGIN $?CLASS.attributes

[19:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f8b15dcc6a

[19:55] *** finanalyst joined
[21:04] <Geth> ¦ rakudo: 0rir++ created pull request #5800: Test and fix that Instant.from-posix-nanos and Instant.from-posix  match.

[21:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5800

[22:00] *** finanalyst left
[22:03] *** sena_kun joined
[23:01] *** lizmat left
[23:01] *** [Coke]_ joined
[23:04] *** [Coke] left
