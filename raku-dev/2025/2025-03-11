[00:14] *** sena_kun left
[00:21] <timo> from what i understood what nine wrote, things like that should go into a CHECK-related method of a rakuast node, and which part exactly it goes into probably depends on where it makes the most sense; i imagine "as far towards the leaves as you can, but if you need information from siblings, go up a node" makes a good first approximation

[00:30] *** MasterDuke left
[07:20] *** finanalyst joined
[07:25] <nine> timo hi it right on the mark. $^foo is a RakuAST::VarDeclaration::Placeholder (which you can see from --target=ast output). That's the node the sorry has to be attached to in order for it to get reported at the right place.

[07:31] <nine> However it could be that the actual check needs to be done by the LexicalScope because that has the full view. The last check in LexicalScope is an example for it doing the check but attaching the sorry to the offending child node.

[07:32] <nine> LexicalScope already does multiple checks that lead to X::Redeclaration. Maybe they just need tweaking for it to recognize the Placeholder.

[08:15] <Geth> ¦ rakudo/main: f40b747a3d | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[08:15] <Geth> ¦ rakudo/main: RakuAST: optimize private method calls that we can resolve

[08:15] <Geth> ¦ rakudo/main: 

[08:15] <Geth> ¦ rakudo/main: We don't have to go throught dispatch:<!> if we already know the current

[08:15] <Geth> ¦ rakudo/main: type and can look up the callee at compile time. Generate a call op to

[08:15] <Geth> ¦ rakudo/main: the resolved method object in that case.

[08:15] <Geth> ¦ rakudo/main: 

[08:15] <Geth> ¦ rakudo/main: This also avoids bootstrapping issues.

[08:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f40b747a3d

[08:16] <Geth> ¦ rakudo/main: 1a6bca622f | (Stefan Seifert)++ | 3 files

[08:16] <Geth> ¦ rakudo/main: RakuAST: support trusts statement

[08:16] <Geth> ¦ rakudo/main: 

[08:16] <Geth> ¦ rakudo/main: Fixes: class Foo { trusts Bar; }

[08:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1a6bca622f

[08:16] <Geth> ¦ rakudo/main: da6c8e3634 | (Stefan Seifert)++ | 2 files

[08:16] <Geth> ¦ rakudo/main: RakuAST: support qualified private method calls

[08:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/da6c8e3634

[08:40] <Geth> ¦ rakudo/main: c6e0a64862 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[08:40] <Geth> ¦ rakudo/main: RakuAST: relax check for multiple positional slurpies

[08:40] <Geth> ¦ rakudo/main: 

[08:40] <Geth> ¦ rakudo/main: Slurpy positional args don't have to have a @ sigil. They may not have a

[08:40] <Geth> ¦ rakudo/main: sigil at all. The really important part is that they don't have a %

[08:40] <Geth> ¦ rakudo/main: sigil.

[08:40] <Geth> ¦ rakudo/main: 

[08:41] <Geth> ¦ rakudo/main: Fixes: sub unique(+a, |c) { }

[08:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c6e0a64862

[10:15] *** sena_kun joined
[10:55] *** JimmyZhuo joined
[11:06] *** finanalyst left
[11:42] <nine> If anyone is ever curious. This is the minimal setting required for a RakuAST compilation:

[11:42] <nine> use nqp; class Pair { ... }; role Iterable { ... }; role Positional { ... }; role Associative { ... }; class Attribute { method compose($) { } }; class Array { method new() { nqp::create(self) }; method elems() { 0 } }; class Pair { }; class CompUnit::RepositoryRegistry { }; class Any { method Hashray() { self } }

[11:48] <lizmat> I'm surprised about the Hashray

[11:48] <lizmat> that's a fairly recent addition

[11:48] <nine> RakuAST::Doc::Block.Hashray

[12:12] *** [Tux] left
[12:15] *** [Tux] joined
[12:45] <lizmat> interesting... but there's no rakudoc in the setting ?   If there is, it should be removed  :-)

[12:48] <lizmat> rakkable: eco-provides .=

[12:48] <rakkable> lizmat, Running: eco-provides .=, please be patient!

[12:48] <rakkable> lizmat, Found 7042 lines in 1885 files (655 distributions):

[12:48] <rakkable> lizmat, https://gist.github.com/9b2495d0d5e8fbc59a79e11ca153deb9

[12:49] <lizmat> clearly a popular feature

[12:58] <nine> Stage parse      :  34.385

[12:58] <nine> Stage syntaxcheck:   0.000

[12:58] <nine> Stage ast        :   0.000

[12:58] <nine> Stage qast       :   2.901

[12:58] <nine> Stage mast       :   6.887

[12:58] <nine> Stage mbc        :   0.652

[12:58] <nine> +++ Compiling   blib/Perl6/BOOTSTRAP/v6d.moarvm

[13:00] <JimmyZhuo> The following step can take a long time, please be patient.

[13:00] <JimmyZhuo> Stage start      :   0.000

[13:00] <JimmyZhuo> Stage parse      :  74.196

[13:00] <JimmyZhuo> Stage syntaxcheck:   0.000

[13:00] <JimmyZhuo> Stage ast        :   0.000

[13:00] <JimmyZhuo> Stage optimize   :   8.097

[13:00] <JimmyZhuo> Stage mast       :  14.151

[13:00] <JimmyZhuo> Stage mbc        :   2.522

[13:00] <JimmyZhuo> long time :)

[13:01] <nine> Well mine was with the RakuAST frontend :) For comparison the old frontend:

[13:01] <nine> Stage parse      :  29.314

[13:01] <nine> Stage syntaxcheck:   0.000

[13:01] <nine> Stage ast        :   0.000

[13:01] <nine> Stage optimize   :   2.926

[13:01] <nine> Stage mast       :   5.377

[13:01] <nine> Stage mbc        :   0.950

[13:01] <nine> Also this means that we're through CORE.c.setting!

[13:01] <JimmyZhuo> nine++

[13:03] <sjn> nice

[13:03] <JimmyZhuo> I have a very old cpu, 10+ years old

[13:04] <[Coke]> great news on CORE.c

[13:10] <lizmat> NICE!    nine++

[13:18] *** vrurg joined
[13:18] *** vrurg_ left
[13:18] <JimmyZhuo> throws-like ' {my $foo; $^foo;}(1) ', X::Redeclaration is bit hard for me, because 'if $lexical-name &&  ! $_ =:= self {' always true, I change it to 'if $lexical-name && (!nqp::istype($_, RakuAST::VarDeclaration::Implicit) || ! $_ =:= self)' , then 

[13:18] <JimmyZhuo> $ RAKUDO_RAKUAST=1 ./rakudo-m -Ilib t/spec/S06-signature/positional-placeholders.t

[13:18] <JimmyZhuo> ===SORRY!===

[13:18] <JimmyZhuo> Redeclaration of symbol '%_'.

[13:18] <JimmyZhuo> at E:\OpenSource\Rakudo\lib\Test.rakumod (Test):69

[13:18] <JimmyZhuo> Redeclaration of symbol '$?CLASS'.

[13:18] <JimmyZhuo> at E:\OpenSource\Rakudo\lib\Test.rakumod (Test):68

[13:18] <JimmyZhuo> Redeclaration of symbol '::?CLASS'.

[13:18] <JimmyZhuo> at E:\OpenSource\Rakudo\lib\Test.rakumod (Test):68

[13:19] <JimmyZhuo> *always false*

[13:25] <nine> JimmyZhuo: before changing the code, I'd add some debug print to check whether the RakuAST::VarDeclaration::Placeholder even appears in that place and to see why its name doesn't match the existing lexical's (probably $x vs $^x or the like)

[13:27] <JimmyZhuo> yeah, I tried, because 'if $lexical-name &&  ! $_ =:= self {' always false,  seems it never work before

[13:28] <JimmyZhuo> so '! $_ =:= self' this one , I don't know how to change it, to make all test happy

[13:32] <nine> JimmyZhuo: a Placeholder is not is-simple-lexical-declaration. So I wouldn't expect it to even be in the list self.ast-lexical-declarations. If it declares something, it'll appear in self.generated-lexical-declarations.

[13:32] <JimmyZhuo> yes, it is

[13:33] <nine> at-lexical-declarations is everything where we know from the AST node just being there that it's a declaration. Like VarDeclaration::Simple. That's always gonna declare something (it's is-simple-lexical-declaration).

[13:33] <nine> Everything that needs some calculation to determine whether it's even gonna declare something or not is a generated lexical declaration.

[13:35] <nine> Not every Placeholder is a declaration, e.g. in $^x, $^x only the first occurence will declare, while the second one is just a variable access. Thus the first Placeholder node will generate the declaration.

[13:35] <JimmyZhuo> 'my $foo' can't be in %lookup, because  'if $lexical-name &&  ! $_ =:= self {' always false, and $^foo is right there

[13:36] <nine> Why is that false? Is it because $lexical-name is empty or because $_ =:= self? And do you at least encounter the VarDeclaration::Simple in that look?

[13:36] <nine> s/look/loop/

[13:37] <JimmyZhuo>  ! $_ =:= self 

[13:37] <JimmyZhuo> this one

[13:37] <nine> That means $_ =:= self. That's surprising as self would be the LexicalScope (i.e. the RakuAST::Sub)

[13:38] <nine> You sure you're interpreting your debug output correctly?

[13:38] <JimmyZhuo> yes

[13:40] <JimmyZhuo> put nqp::say(1) after 'if $lexical-name &&  ! $_ =:= self {', it never outputs

[13:51] <nine> What do nqp::say($_); and nqp::say(self) say before that?

[13:54] <JimmyZhuo> I didn't try it, sleep time here, good night 

[13:54] *** JimmyZhuo left
[15:16] <Geth> ¦ rakudo/main: c9423ed2a3 | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[15:16] <Geth> ¦ rakudo/main: RakuAST: don't replace outer scope's package stubs with lexical package

[15:16] <Geth> ¦ rakudo/main: 

[15:16] <Geth> ¦ rakudo/main: A lexically defined package in a nested scope must not be used to

[15:16] <Geth> ¦ rakudo/main: replace a package stub defined in an outer scope.

[15:16] <Geth> ¦ rakudo/main: 

[15:16] <Geth> ¦ rakudo/main: Fixes: class Foo { ... }; { my class Foo { } }

[15:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c9423ed2a3

[15:49] <Geth> ¦ rakudo/main: 068f564cac | (Stefan Seifert)++ | 2 files

[15:49] <Geth> ¦ rakudo/main: RakuAST: fix stubs of packages with multi-part names not found

[15:49] <Geth> ¦ rakudo/main: 

[15:49] <Geth> ¦ rakudo/main: Fixes: class Foo::Bar { ... }; class Foo::Bar { }

[15:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/068f564cac

[15:49] <nine> That's one less workaround in the setting

[15:50] <nine> Though I still think it's not a great idea to have a my class Map in Rakudo::Internals::HyperRaceSharedImpl

[16:02] <lizmat> why not rename that class then?  It's an implementation detail ?

[16:08] <nine> out of scope

[16:29] <Geth> ¦ rakudo/main: fed35e5796 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals/HyperRaceSharedImpl.rakumod

[16:29] <Geth> ¦ rakudo/main: Use less confusing "private" class names

[16:29] <Geth> ¦ rakudo/main: 

[16:29] <Geth> ¦ rakudo/main: Making setting compilation under RAKUDO_RAKUAST=1 less troublesome

[16:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fed35e5796

[16:30] <lizmat> probably mustard after the meal, but yeah

[16:32] <nine> Well it did uncover a bug that needed fixing

[16:33] <lizmat> there's that  :-)

[16:34] <[Coke]> (MaaM) huh, TIL

[16:34] <[Coke]> (MatM) letters hard.

[16:58] <Geth> ¦ rakudo/main: ab04e6b60f | (Elizabeth Mattijsen)++ | tools/add-leap-second.raku

[16:58] <Geth> ¦ rakudo/main: Update leap second date adding logic

[16:58] <Geth> ¦ rakudo/main: 

[16:58] <Geth> ¦ rakudo/main: In response to #5769.  It will now just write to the source-file.

[16:58] <Geth> ¦ rakudo/main: Use git diff to check results.

[16:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ab04e6b60f

[17:05] <Geth> ¦ rakudo/main: ee28391b87 | (Elizabeth Mattijsen)++ | docs/release_guide.pod

[17:05] <Geth> ¦ rakudo/main: Remove leap second check step from release process

[17:05] <Geth> ¦ rakudo/main: 

[17:05] <Geth> ¦ rakudo/main: It looks like there won't be another leap second *added* in our

[17:05] <Geth> ¦ rakudo/main: lifetime.  There might be a negatve leap second, but that would

[17:05] <Geth> ¦ rakudo/main: require quite a bit more than just running the leap day script.

[17:05] <Geth> ¦ rakudo/main: 

[17:05] <Geth> ¦ rakudo/main: In any case, having another leap second added, will be major news

[17:05] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[17:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ee28391b87

[17:29] *** finanalyst joined
[18:02] <lizmat> inspired by a reaction to https://dev.to/lizmat/quicker-to-assume-2cpj I was wondering why we couldn't support a syntax such as:

[18:02] <lizmat> -> $a // 0, $b // 0 { $b < $a }

[18:02] <lizmat> basically a variation on:

[18:02] <lizmat> -> $a = 0, $b = 0 { $b < $a }

[18:03] <lizmat> but instead of having the default value applied if the argument is absent, have the default applied if the argument is !.defined

[18:04] <lizmat> would prove to be an interesting challenge to hang in the binder, but still... 

[18:21] <gfldex> I would prefer `-> $a //= True { ... }` . Closer to general Raku syntax.

[18:25] <lizmat> https://github.com/Raku/problem-solving/issues/469

[18:25] <lizmat> good point, will adapt accordingly

[18:32] <ugexe> i brought this up before, and remember jnthn had some comments. alas, i cannot find any record of this

[18:33] <lizmat> yeah, it feels like this idea is too good to be just imagined for the first time by me just now

[18:33] <lizmat> what I *do* know, is that jnthn didn't want to work on the binder, which this feature would require

[18:34] <lizmat> but also, I'm pretty sure these comments were then pre new dispatch mechanism

[18:34] <ugexe> just a recent comment by myself "	in perl 5.38 you can use //= in subroutine signatures, something you can't do in raku"

[18:35] <lizmat> aha... ok, maybe I subconsciously remembered that

[18:35] <ugexe> anyways if my memory is true then i think jnthns comments were along the lines of "that could be nice, although $some_edge_case needs some thought"

[18:37] <ugexe> similarly ||=

[18:49] <ugexe> https://irclogs.raku.org/perl6-dev/2017-07-31.html#15:31

[18:51] <lizmat> and https://irclogs.raku.org/perl6-dev/2017-07-31.html#15:33-0005

[18:51] <ugexe> i feel like im still thinking of another earlier conversation

[18:51] <lizmat> well Zoffix mentioned a proposal

[18:51] <ugexe> yeah there is a whole conversation

[18:52] <lizmat> actual, it's in the speculation

[18:54] <lizmat> https://github.com/Raku/old-design-docs/blob/master/S06-routines.pod#optional-parameters

[18:54] <lizmat> "Missing optional arguments default to their default values, or to an undefined value if they have no default. (A supplied argument that is undefined is not considered to be missing, and hence does not trigger the default. Use //= within the body for that.)"

[18:54] <lizmat> ah, U misread

[18:54] <lizmat> *I

[18:55] <lizmat> *in the body*

[18:55] <lizmat> nvm

[19:52] <Geth> ¦ rakudo/lizmat-backtrace: b90acbeb0b | (Elizabeth Mattijsen)++ | src/core.c/Backtrace.rakumod

[19:52] <Geth> ¦ rakudo/lizmat-backtrace: Add support for RAKUDO_NOPATH_STACKFRAME envvar

[19:52] <Geth> ¦ rakudo/lizmat-backtrace: 

[19:52] <Geth> ¦ rakudo/lizmat-backtrace: In response to #5751 .  When specified with a True value, will

[19:52] <Geth> ¦ rakudo/lizmat-backtrace: shorten a line such as:

[19:52] <Geth> ¦ rakudo/lizmat-backtrace: 

[19:52] <Geth> ¦ rakudo/lizmat-backtrace:   in method relationship-model at /opt/rakudo-pkg/share/perl6/site/sources/9740DDE0E85E093DCDF40F690C620BD9BAEE9078 (Red::Attr::Relationship) line 43

[19:52] <Geth> ¦ rakudo/lizmat-backtrace: 

[19:52] <Geth> ¦ rakudo/lizmat-backtrace: to:

[19:52] <Geth> ¦ rakudo/lizmat-backtrace: 

[19:52] <Geth> ¦ rakudo/lizmat-backtrace:   in method relationship-model at Red::Attr::Relationship line 43

[19:52] <Geth> ¦ rakudo/lizmat-backtrace: review: https://github.com/rakudo/rakudo/commit/b90acbeb0b

[19:53] <Geth> ¦ rakudo: lizmat++ created pull request #5811: Add support for RAKUDO_NOPATH_STACKFRAME envvar

[19:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5811

[19:56] <SmokeMachine> That looks like the reduce problems I fixed on red today…

[20:06] <ugexe> i really dislike that option. people already seem to forget when they have e.g. RAKULIB=lib set, then they file issues, and the only way someone knows what their issue is (since of course no one posts their e.g. ENV vars or other useful debugging information unless explicitly asked) is to recognize it from those paths

[20:07] <ugexe> its a stack frame, it should be verbose

[20:07] <ugexe> end users shouldnt be seeing them, and if they are then the code author should fix their code

[20:11] <ugexe> I'm not sure the code is implemented in a satisfactory way either since it seems to rely on .words, and paths can certainly contain spaces

[20:16] <lizmat> well, yes, I had my doubts as well, hence made it into a PR  :-)

[20:16] <lizmat> afk&

[20:20] <SmokeMachine> How can I see if Red is failing in blin?

[20:35] <[Coke]> blin runs are manual.

[20:35] <[Coke]> I can check my last run.

[20:36] <[Coke]> This will be pre-last release.

[20:37] <[Coke]> nope, didn't fail

[20:38] <[Coke]> when a blin run is done, there's a ticket that's created for core devs to work off of -

[20:38] <[Coke]> https://github.com/rakudo/rakudo/issues?q=is%3Aissue%20blin

[20:48] <SmokeMachine> Thanks! That’s very odd… the change on `reduce` broke Red and its tests… it should show on blin, no?

[20:50] <SmokeMachine> I’m afraid Red is not being tested… :(

[20:54] <[Coke]> when did that change go in?

[20:54] <[Coke]> Might be being skipped for some reason

[20:55] <[Coke]> I only checked if it was explicitly failing, checking if it was skipped

[20:58] <SmokeMachine> Red had no change and I tested with 2025.02, and it was broken… then I fixed it…

[20:59] <[Coke]> weird, I'm seeing it as Red – AlwaysFail

[20:59] <SmokeMachine> That explains it… but why? It works…

[21:00] <[Coke]> that's in the overview, not sure why it's not in the markdown

[21:00] <[Coke]> oh, because it failed before and after.

[21:00] <[Coke]> I can try it manually on that box.

[21:00] <SmokeMachine> Please! (Thanks for your help)

[21:01] <[Coke]> Sure!

[21:02] <[Coke]> (anything with AlwaysFail should probably be tracked separately and tickets opened with the various modules (or we can remove them from the test runs)

[21:05] <ugexe> probably has to do with setting up Postgres or whatever

[21:07] <ugexe> in other words: it wouldnt surprise me if distributions that depend on system configuration / setup are often marked as AlwaysFail or skip etc for Blin runs since setting those things up for each such distribution would take more effort than what was desired at the time by whoever was doing it

[21:07] <[Coke]> Very likely

[21:08] <[Coke]> there is a list of "hey install all this random crap so you can test more distros" but it's not checking the distro itself to see what's required.

[21:08] <SmokeMachine> Red tests test only SQLite… :)

[21:08] <[Coke]> if that's it, I'll add it to the box and the blin directions, at least.

[21:08] <[Coke]> Same thing, different package.

[21:10] <[Coke]>                 "pq:from<native>:ver<5>"

[21:10] <[Coke]> isn't that postgress?

[21:10] <[Coke]> that's in DB::Pg

[21:11] <SmokeMachine> Yes, Postgres… it does not test Postgres, but depends on it

[21:11] <[Coke]> ... ok, but we still have to build it...

[21:11] <SmokeMachine> https://github.com/FCO/Red/blob/master/META6.json#L9

[21:12] <[Coke]> so it does depend on it.

[21:12] <SmokeMachine> Yes… makes sense…

[21:12] <[Coke]> starting a blin run is very slow and I've had to do it 3 times now to get to the punchline to verify, apologies.

[21:13] <SmokeMachine> Sorry for all the work…

[21:13] <[Coke]> eh. no worries.

[21:13] <[Coke]> Good catch. I hadn't reviewed the alwaysfails yet.

[21:14] <[Coke]> something about updating the fez mirror is very slow on this box.

[21:17] <[Coke]> ... crap I should have saved the previous run's output folder.

[21:24] <[Coke]> wait, Red is using sqllite in tests? It doesn't depend on anything native?

[21:24] <SmokeMachine> Sqlite3

[21:25] <[Coke]> ok - but it's not a declared dependency?

[21:25] <[Coke]> (also, there is a pq installed on this box, but it's in /usr/games/pq)

[21:26] <SmokeMachine> It depends on DBIish and I think that depends on swlite3 (or one of its dependencies)

[21:29] <[Coke]> blin run is just hanging now.

[21:29] <[Coke]> nothing in top showing anything using cpu

[21:31] <[Coke]> SmokeMachine: can you add any native deps needed for blin for your stuff (or deps) here: https://github.com/Raku/ecosystem-unbitrot/wiki ?

[21:31] <[Coke]> I'll make sure I have those installed before the next blin run (and I'll do a full run in the next few days)

[21:32] <SmokeMachine> [Coke]: add it on Red’s META or on that wiki?

[21:56] *** finanalyst left
[22:01] <[Coke]> no need to add it to red's meta if it is in a dependency's meta - but if a dependency you're using has a 3rd party dep and it's not on that list, please add that.

[22:02] <[Coke]> Or let me know, and I'll do it before the next blin run.

[22:03] <SmokeMachine> ok, I'll add pq and sqlite3... I'll try to find out another module depending on it to copy the exact name...

[22:06] <[Coke]> +1

[22:06] <[Coke]> if none of your deps depend on sqlite3, you should also add it to your own deps. I can check that too, one sec.

[22:12] <[Coke]> zef-deps Red | grep 'from<native>' # doesn't show a dep on sqlite at all

[22:12] <[Coke]> (only pq:ver<5>:from<native> shows up)

[22:13] <[Coke]> so yes, you'll need to add that to Red's meta

[22:59] *** sena_kun left
