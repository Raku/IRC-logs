[00:18] <timo> slightly surprised that the naive-word-wrapper puts double space after any period apparently?

[00:19] <timo> hm. maybe not after all of them?

[00:20] <timo> m: say "hello there. how are you?".naive-word-wrapper(:50max).raku

[00:20] <camelia> rakudo-moar 8263885ca: OUTPUT: «"hello there.  how are you?"␤»

[00:29] <[Coke]> -1 from me on that

[00:45] <timo> m: $_ = "Hello!"; with 99 -> $sth { say "dollar underscore is $_.raku()"; } else { say "dollar underscore is $_.raku()" }

[00:45] <camelia> rakudo-moar 8263885ca: OUTPUT: «dollar underscore is "Hello!"␤»

[00:45] <timo> m: $_ = "Hello!"; with Int -> $sth { say "dollar underscore is $_.raku()"; } else { say "dollar underscore is $_.raku()" }

[00:45] <camelia> rakudo-moar 8263885ca: OUTPUT: «dollar underscore is Int␤»

[00:46] <timo> m: $_ = "Hello!"; with Int -> $sth { say "dollar underscore is $_.raku()"; } else -> $noth { say "dollar underscore is $_.raku()" }

[00:46] <camelia> rakudo-moar 8263885ca: OUTPUT: «dollar underscore is "Hello!"␤»

[00:46] <Geth> ¦ rakudo/coke/doublespace: 675beed75d | (Will Coleda)++ | src/core.c/Str.rakumod

[00:46] <Geth> ¦ rakudo/coke/doublespace: Don't use two spaces after . or ?

[00:46] <Geth> ¦ rakudo/coke/doublespace: 

[00:46] <Geth> ¦ rakudo/coke/doublespace: Per https://www.chicagomanualofstyle.org/qanda/data/faq/topics/OneSpaceorTwo.html et al.

[00:46] <Geth> ¦ rakudo/coke/doublespace: review: https://github.com/rakudo/rakudo/commit/675beed75d

[00:47] <Geth> ¦ rakudo: coke++ created pull request #5913: Don't use two spaces after . or ?

[00:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5913

[00:47] <[Coke]> timo++

[02:19] <timo> Text::Wrap also doesn't support ansi escape codes (i.e. treats them as having a width based on the number of characters in them)

[03:00] <japhb> timo: Text::MiscUtils::Layout does this a bit better, methinks.  There are a couple different text wrapping algorithms in there, both of which use duospace-width() under the covers, which strips ANSI codes and respects Unicode TR11 width standards.

[03:00] <timo> nice.

[03:02] <timo> ooh i like the columns one

[07:47] <lizmat> note it's a "naive" word wrapper, intended to make error messages with variable widths more readable

[07:48] <lizmat> [Coke]: should we merge https://github.com/MoarVM/MoarVM/pull/1948 before or post 2025.06 release ?

[07:53] <Geth> ¦ rakudo/main: 5d9f489dc5 | (Will Coleda)++ (committed using GitHub Web editor) | src/core.c/Str.rakumod

[07:53] <Geth> ¦ rakudo/main: Don't use two spaces after . or ? (#5913)

[07:53] <Geth> ¦ rakudo/main: 

[07:53] <Geth> ¦ rakudo/main: Per https://www.chicagomanualofstyle.org/qanda/data/faq/topics/OneSpaceorTwo.html et al.

[07:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5d9f489dc5

[08:04] <lizmat> weekly: https://wakelift.de/2025/06/20/can-you-say-that-again-you-can-say-that-again/

[08:04] <notable6> lizmat, Noted! (weekly)

[08:09] <lizmat> timo: .subst(/\W+/, :g).fc   # faster cleanup

[09:55] <Geth> ¦ rakudo/main: 72cdcde409 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[09:55] <Geth> ¦ rakudo/main: RakuAST: ignore RAKU_LANGUAGE_VERSION in EVAL

[09:55] <Geth> ¦ rakudo/main: 

[09:55] <Geth> ¦ rakudo/main: The default of an EVAL should be the current language version, *not*

[09:55] <Geth> ¦ rakudo/main: whatever is specified with the RAKU_LANGUAGE_VERSION environment

[09:55] <Geth> ¦ rakudo/main: variable.

[09:55] <Geth> ¦ rakudo/main: 

[09:55] <Geth> ¦ rakudo/main: This should now make RAKU_LANGUAGE_VERSION fully functional.

[09:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/72cdcde409

[09:55] <Geth> ¦ rakudo/main: 4768ab5877 | (Elizabeth Mattijsen)++ | src/core.c/Num.rakumod

[09:55] <Geth> ¦ rakudo/main: Remove return constraint from atanh/acotanh num sub candidates

[09:55] <Geth> ¦ rakudo/main: 

[09:55] <Geth> ¦ rakudo/main: In 6.e, these may return Complex values when given a negative

[09:55] <Geth> ¦ rakudo/main: values, rather than NaN (which is acceptable as a num)

[09:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4768ab5877

[10:06] <lizmat> m: use v6.*; say sqrt(my num $x = -1e0)   # double checking

[10:06] <camelia> rakudo-moar 5d9f489dc: OUTPUT: «NaN␤»

[10:06] <lizmat> that'd be incorrect  :-

[10:07] <lizmat> )

[10:12] <Geth> ¦ rakudo/main: f6a3472c0d | (Elizabeth Mattijsen)++ | src/core.c/Num.rakumod

[10:12] <Geth> ¦ rakudo/main: Make sure sub sqrt num candidate works correctly on 6.e

[10:12] <Geth> ¦ rakudo/main: 

[10:12] <Geth> ¦ rakudo/main: It was set up to directly use nqp::sqrt_n(), but that produces

[10:12] <Geth> ¦ rakudo/main: NaN for negative values.  So if the value given is negative, use

[10:12] <Geth> ¦ rakudo/main: the method interface instead, which *will* produce a Complex

[10:12] <Geth> ¦ rakudo/main: value in 6.e.  Also, remove the return constraint because of that.

[10:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f6a3472c0d

[10:52] <Geth> ¦ roast: 2c910bdb78 | (Elizabeth Mattijsen)++ | 3 files

[10:52] <Geth> ¦ roast: Adjust atanh() tests for 6.e behaviour

[10:52] <Geth> ¦ roast: 

[10:52] <Geth> ¦ roast: Add a 6.d specific file for the 6.d behaviour, and rework the

[10:52] <Geth> ¦ roast: existing atanh() tests to produce Complex values where appropriate

[10:52] <Geth> ¦ roast: (but TODOd for now)

[10:52] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2c910bdb78

[11:22] <ab5tract> On the one hand, it’s somewhat refreshing  to be reminded that Raku blocks can return whatever they please

[11:23] <ab5tract> On the other hand, working in statically typed languages has made me more uncomfortable with that very thing :)

[11:25] <ab5tract> This is probably an example with very few (if any) downsides, though. Still makes me wonder if there shouldn’t be a dummy role called Mathy or MathValue or something that bridges across all of these classes

[11:26] <lizmat> I guess there is: Numeric

[11:27] <lizmat> but since none of the other candidates had any return constraint either, I thought I'd bring them in line with that

[11:27] <lizmat> the absence is probably because of performance

[11:27] <lizmat> but in the new-disp era, that may not apply

[11:28] <lizmat> not willing to spend tuits on that atm though

[11:28] <ab5tract> Yeah no worries about that. It was less about the constraint and more about the caller’s requirements

[11:29] <ab5tract> (potential requirements)

[11:39] <ab5tract> Which is to say, as long as they can use a single type constraint to cover all potential return values from a routine, my point is pointless :)

[12:05] <Geth> ¦ roast: f3494505eb | (Elizabeth Mattijsen)++ | 3 files

[12:05] <Geth> ¦ roast: Adjust grammar.(sub)parse(file) tests for 6.e behaviour

[12:05] <Geth> ¦ roast: 

[12:05] <Geth> ¦ roast: Add 6.e specific file for the 6.d behaviour (in which these methods

[12:05] <Geth> ¦ roast: *do* set $/ in the callers context), and correct the existing tests

[12:05] <Geth> ¦ roast: for the 6.e behaviour to be (which is *not* setting $/).  TODO these

[12:05] <Geth> ¦ roast: tests to prevent roast breakage

[12:05] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f3494505eb

[12:05] <lizmat> grr  6.d specific file  :(

[12:10] <Geth> ¦ roast: 2ff72620f5 | (Elizabeth Mattijsen)++ | S05-capture/named.t

[12:10] <Geth> ¦ roast: Adjust grammar.parse test for 6.e behaviour

[12:10] <Geth> ¦ roast: 

[12:10] <Geth> ¦ roast: Since the test was really about the content of the parse result,

[12:10] <Geth> ¦ roast: just set $/ manually, which works in 6.d as well as in 6.e.

[12:10] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2ff72620f5

[12:18] <[Coke]> lizmat: let's get it now and tested. rather go forward than back

[12:19] <lizmat> ok, will do a bump now

[12:20] <[Coke]> and we need to get it tested on thoser alpine boxes again also.

[12:23] <Geth> ¦ nqp/main: cb2c427a33 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[12:23] <Geth> ¦ nqp/main: Bump MoarVM to get latest mimalloc version, MasterDuke++

[12:23] <Geth> ¦ nqp/main: 

[12:23] <Geth> ¦ nqp/main: Also get all of japhb's work on unicode, but that's helper scripts

[12:23] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/cb2c427a33

[12:30] <Geth> ¦ rakudo/main: 25b1a3b124 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[12:30] <Geth> ¦ rakudo/main: Bump NQP for MoarVM's mimalloc bump, MasterDuke++

[12:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/25b1a3b124

[12:30] <lizmat> [Coke] ^^

[12:30] <lizmat> m: say grammar { token TOP { <.return> }; token return { .+ } }.parse("foo")

[12:30] <camelia> rakudo-moar f6a3472c0: OUTPUT: «｢foo｣␤»

[12:30] <lizmat> m: use v6.*; say grammar { token TOP { <.return> }; token return { .+ } }.parse("foo")   # meh

[12:30] <camelia> rakudo-moar f6a3472c0: OUTPUT: «Attempt to return outside of any Routine␤  in regex return at <tmp> line 1␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:38] <[Coke]> lizmat++

[16:31] <ab5tract> lizmat: would it be useful to have an ‘is shaped’ trait for signatures that would match for shaped arrays?

[16:32] <ab5tract> Meaning, would that allow us to modify the behavior for :k in the specific case of shaped arrays?

[16:38] <lizmat> as I said in #5907, I think we cannot change the meaning of :k

[16:39] <lizmat> but we could introduce a :c named arg that would be the same as :k for unshaped, but would create coordinate lists for shaped arrays with more than 1 dimension

[16:59] <Geth> ¦ rakudo/main: be9b0742ee | (Elizabeth Mattijsen)++ | 2 files

[16:59] <Geth> ¦ rakudo/main: (Implicitely) specifying Mu for actions means: no actions

[16:59] <Geth> ¦ rakudo/main: 

[16:59] <Geth> ¦ rakudo/main: when parsing a grammar.  Rather then execute any methods that

[16:59] <Geth> ¦ rakudo/main: happen to exist on Mu.  Fixes .subparse in 6.d, as well as .parse

[16:59] <Geth> ¦ rakudo/main: and .subparse in 6.e

[16:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/be9b0742ee

[17:03] <ab5tract> I wasn’t clear on why we can’t change the behavior of :k, sorry

[17:04] <ab5tract> I was therefore contemplating technical solutions

[17:04] <lizmat> well, it feels very deeply entrenched

[17:04] <lizmat> if would at least require a language version bump

[17:05] <lizmat> and then we would take away the (faster) "flat" semantics of :k on shaped arrays

[17:06] <lizmat> hmmm...  or course the latter would be less than useful.... hmmm

[17:08] <Geth> ¦ roast: d3524ea736 | (Elizabeth Mattijsen)++ | S05-grammar/protoregex.t

[17:08] <Geth> ¦ roast: Remove test for grammar.subparse setting $/

[17:08] <Geth> ¦ roast: 

[17:08] <Geth> ¦ roast: We already have specific tests for 6.d that $/ is getting set, and

[17:08] <Geth> ¦ roast: specific tests for 6.e that $/ is *not* being set.  Removin that

[17:08] <Geth> ¦ roast: test makes the test file ready for language bump to 6.e

[17:08] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d3524ea736

[17:11] <Geth> ¦ roast: a37a53ffc3 | (Elizabeth Mattijsen)++ | S05-metasyntax/longest-alternative.t

[17:11] <Geth> ¦ roast: Adjust grammar.parse test for 6.e behaviour

[17:11] <Geth> ¦ roast: 

[17:11] <Geth> ¦ roast: Since the test was really about the content of the parse result,

[17:11] <Geth> ¦ roast: just set $/ manually, which works in 6.d as well as in 6.e.

[17:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a37a53ffc3

[17:35] <Geth> ¦ roast: 6696213828 | (Elizabeth Mattijsen)++ | 3 files

[17:35] <Geth> ¦ roast: Adjust shaped array:delete tests for 6.e behaviour

[17:35] <Geth> ¦ roast: 

[17:35] <Geth> ¦ roast: Add 6.d specific file for the 6.d behaviour (in which an out of bounds

[17:35] <Geth> ¦ roast: :delete throws because the indices are out of range), and correct the

[17:35] <Geth> ¦ roast: existing tests to check for the default value of the array, just like

[17:35] <Geth> ¦ roast: out-of-bounds :delete for unshaped arrays).  TODO these tests to

[17:35] <Geth> ¦ roast: prevent roast breakage

[17:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6696213828

[17:46] <ab5tract> lizmat: I might take a stab and see if revision gating works properly there

[18:15] <Geth> ¦ roast: a44e04e829 | (Elizabeth Mattijsen)++ | 4 files

[18:15] <Geth> ¦ roast: Make role versioning tests 6.e proof

[18:15] <Geth> ¦ roast: 

[18:15] <Geth> ¦ roast: Adding a file with 6.d logic, and treat it as any other language

[18:15] <Geth> ¦ roast: level in the tests.  Just need to make sure that each role has a

[18:15] <Geth> ¦ roast: different signature to prevent dispatch issues

[18:15] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a44e04e829

[18:23] <Geth> ¦ roast: 8c20f6926a | (Elizabeth Mattijsen)++ | integration/99problems-41-to-50.t

[18:23] <Geth> ¦ roast: Adjust truth table test for 6.e behaviour

[18:23] <Geth> ¦ roast: 

[18:23] <Geth> ¦ roast: Since the test was really about the content of the parse result,

[18:23] <Geth> ¦ roast: just set $/ manually, which works in 6.d as well as in 6.e.

[18:23] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8c20f6926a

[18:25] <Geth> ¦ roast: 1d298bb0dc | (Elizabeth Mattijsen)++ | integration/advent2009-day10.t

[18:25] <Geth> ¦ roast: Adjust inventory test for 6.e behaviour

[18:25] <Geth> ¦ roast: 

[18:25] <Geth> ¦ roast: Since the test was really about the content of the parse result,

[18:25] <Geth> ¦ roast: just set $/ manually, which works in 6.d as well as in 6.e.

[18:25] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/1d298bb0dc

[18:25] <lizmat> and that concludes my hacking for today

[18:45] *** MasterDuke joined
[19:03] <MasterDuke> .

[19:03] <tellable6> 2025-06-18T09:13:48Z #raku-dev <nine> MasterDuke: any progress on the RakuAST fix?

[19:23] <MasterDuke> nine: making slow progress. https://github.com/MasterDuke17/rakudo/tree/try_to_fix_how_multi-part_names_are_installed has what i've done so far (aside from roast changes)

[19:31] <MasterDuke> https://gist.github.com/MasterDuke17/75444d08468fe3efcb51f685f72ba1a1 has the roast changes so far

[20:10] *** melezhik joined
[20:11] *** melezhik left
[20:12] <MasterDuke> https://gist.github.com/MasterDuke17/06fc1cac44628dbcfcebb800379698af is what the result of a spectest looks like now

[20:15] <MasterDuke> m: q|role R { my class C { method C-hi() { say "hi" } }; method R-hi { C.C-hi } }|.AST

[20:15] <camelia> rakudo-moar be9b0742e: ( no output )

[20:15] <MasterDuke> hm. locally that's a golf of the failure in t/spec/S12-methods/qualified.t

[20:16] <MasterDuke> where i get `Undeclared routine: C used at line 1. Did you mean ''?`

[20:16] <MasterDuke> m: q|role R { my class C { method C-hi() { say "hi" } }; method R-hi { C.C-hi } }|.AST.EVAL

[20:16] <camelia> rakudo-moar be9b0742e: ( no output )

[20:17] <MasterDuke> yeah, guess it really is a local change that's causing it

[20:21] <MasterDuke> change the test and it passes, success

[20:26] <MasterDuke> afk, but in case anybody has any suggestions, the current error for t/spec/S12-class/magical-vars.t is `===SORRY!=== Error while compiling EVAL_2

[20:26] <MasterDuke> Undeclared routine: evo used at line 1`

[20:31] *** MasterDuke left
[20:52] * [Coke] yawns.

