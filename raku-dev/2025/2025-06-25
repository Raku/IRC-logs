[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:10] <Geth> ¦ problem-solving: patrickbkr++ created pull request #478: Solution for #455 - New Script Wrappers

[07:10] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/478

[07:23] *** donaldh left
[08:40] <ab5tract> does anyone have an example of a metaprefix::hyper expression? I'm having trouble conjuring an incantation

[09:21] <ab5tract> what is going on with `xx-fixed-in-rakuast.rakutest`? it only runs 99 of the tests?

[09:29] *** donaldh joined
[11:10] <Geth> ¦ L10N-Complete/main: fca0871030 | (Elizabeth Mattijsen)++ | 12 files

[11:10] <Geth> ¦ L10N-Complete/main: Initial commit after cat-licensing the L10N distro

[11:10] <Geth> ¦ L10N-Complete/main: review: https://github.com/Raku-L10N/L10N-Complete/commit/fca0871030

[11:13] <Geth> ¦ L10N-Complete/main: 09a70b8125 | (Elizabeth Mattijsen)++ | Changes

[11:13] <Geth> ¦ L10N-Complete/main: 0.0.1

[11:13] <Geth> ¦ L10N-Complete/main: review: https://github.com/Raku-L10N/L10N-Complete/commit/09a70b8125

[12:03] <ab5tract> t/12-rakuast/xx-fixed-in-rakuast.rakutest                     (Wstat: 256 Tests: 99 Failed: 5)

[12:03] <ab5tract>   Failed tests:  63-65, 88, 95

[12:04] <ab5tract> what's the point of having a test file to ensure we don't regress if it's not checked and contains regressions?

[12:04] <lizmat> I guess the point is that if someone does see a regression, it can be acted upon (albeit a bit late) ?

[12:07] <ab5tract> one shouldn't push changes that cause regressions in the first place. now it's just up to whoever has time or patience to deal with, which hardly seems fair

[12:08] <lizmat> true, but sadly testing with RAKUAST=1 is not in CI yet, afaik ?

[12:09] <ab5tract> maybe not, but we were counting test successes/failures pretty consistently for RAKUDO_RAKUAST=1 

[12:10] <lizmat> I'll make sure it's clean before release

[12:10] <lizmat> it's probably my fault anyways  :-)

[12:11] <ab5tract> I think we should comment out test 99 as well until it doesn't cause the rest of the tests to be ignored

[12:11] <ab5tract> lizmat: cheers :)

[12:11] <Geth> ¦ rakudo/main: 61541d63f5 | ab5tract++ | src/Raku/ast/expressions.rakumod

[12:11] <Geth> ¦ rakudo/main: Remove unnecessary WhateverApplicable

[12:11] <Geth> ¦ rakudo/main: 

[12:11] <Geth> ¦ rakudo/main: This class is only required for the Apply* family,

[12:11] <Geth> ¦ rakudo/main: so remove it now to avoid any potential confusion later.

[12:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/61541d63f5

[12:28] <lizmat> meh, looks like the failure of xx-fixed made into my reference result, which is why I didn't see it  :-(

[12:30] <Geth> ¦ rakudo/main: 498bb93ada | ab5tract++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[12:30] <Geth> ¦ rakudo/main: Adjust xx-fixed-in-rakuast.rakutest

[12:30] <Geth> ¦ rakudo/main: 

[12:30] <Geth> ¦ rakudo/main: Due to some weirdness around using `try` with

[12:30] <Geth> ¦ rakudo/main: `throws-like`, "throws wrong error" tests have

[12:30] <Geth> ¦ rakudo/main: been commented out and the total number of tests

[12:30] <Geth> ¦ rakudo/main: has been adjusted.

[12:30] <Geth> ¦ rakudo/main: 

[12:30] <Geth> ¦ rakudo/main: (The weirdness involves subsequent tests becoming part

[12:30] <Geth> ¦ rakudo/main: of the first `try throws-like` subtests, even across the

[12:30] <Geth> ¦ rakudo/main: scope boundary).

[12:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/498bb93ada

[12:31] <ab5tract> lizmat: what do you mean by reference result here?

[12:31] <ab5tract> ohh, you mean the list of pass/fail test names?

[12:31] <lizmat> the output I diff against to see changes

[12:31] <lizmat> yup

[12:31] <ab5tract> gotcha

[12:32] <lizmat> also, your commits should have been marked with RakuAST: no ?

[12:32] <ab5tract> ah, probably

[12:33] <Geth> ¦ rakudo/main: 840e3eaf5b | (Elizabeth Mattijsen)++ | src/Raku/ast/compunit.rakumod

[12:33] <Geth> ¦ rakudo/main: RakuAST: make sure $?FILE is a relative path

[12:33] <Geth> ¦ rakudo/main: 

[12:33] <Geth> ¦ rakudo/main: This to ensure some packagers reproducibility logic won't fire,

[12:33] <Geth> ¦ rakudo/main: now that $?FILE is actually in the string heap (since 313dfb7df0fd).

[12:33] <Geth> ¦ rakudo/main: 

[12:33] <Geth> ¦ rakudo/main: This means that $?FILE will have slightly different semantics once

[12:33] <Geth> ¦ rakudo/main: we switch to 6.e

[12:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/840e3eaf5b

[12:33] <lizmat> jdv [Coke] 61541d63f5 and 498bb93ada are RakuAST commits

[12:33] <linkable6> (2025-06-25) https://github.com/rakudo/rakudo/commit/61541d63f5 Remove unnecessary WhateverApplicable

[12:33] <linkable6> (2025-06-25) https://github.com/rakudo/rakudo/commit/498bb93ada Adjust xx-fixed-in-rakuast.rakutest

[12:42] <lizmat> m: say Q|class A { has $.a = :() }|.AST    # I wonder whether :() is being interpreted as a no-arg call on ":"

[12:42] <camelia> rakudo-moar 61541d63f: OUTPUT: «===SORRY!=== Error while compiling EVAL_0␤BEGIN time calls only supported for simple constructs so far␤at EVAL_0:1␤»

[12:43] <lizmat> m: say Q|class A { has $.a = Signature.new }|.AST   # is fine

[12:43] <camelia> rakudo-moar 61541d63f: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::Class.new(␤      name => RakuAST::Name.from-identifier("A"),␤      body => RakuAST::Block.new(␤        body => RakuAST::Blockoid.new(␤          Ra…»

[12:43] <lizmat> m: say Q|:()|.AST   # is also fine

[12:43] <camelia> rakudo-moar 61541d63f: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::FakeSignature.new(␤      RakuAST::Signature.new(␤        parameters => $( )␤      )␤    )␤  )␤)␤»

[12:57] <lizmat> m: my enum E <one>; class A { has $.a = one }; dd one === A.new.a

[12:57] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «Bool::True␤»

[12:57] <lizmat> m: my enum E <one>; role A { has $.a = one }; dd one === A.new.a

[12:57] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «Bool::False␤»

[12:57] <lizmat> m: my enum E <one>; class A { has $.a = one }; dd A.new.a

[12:57] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «E::one␤»

[13:00] <lizmat> m: my enum E <one>; role A { has $.a = one }; dd one, A.new.a, one === A.new.a   # wtf ?

[13:00] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «E::one␤E::one␤Bool::False␤»

[13:02] <ab5tract> m: Q| my enum E <one>; role A { has $.a = one }; dd one, A.new.a, one === A.new.a |.AST.EVAL

[13:02] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «Could not instantiate role 'A'; exception details:␤␤    Unknown compilation input 'qast'␤      in any IMPL-COMPILE-DYNAMICALLY at src/Raku/ast/code.rakumod line 410␤      in any  at src/Raku/ast/code.rakumod line 148␤      in sub  at src/Rak…»

[13:02] <lizmat> meh

[13:02] <ab5tract> :(

[13:04] <ab5tract> m: Q| my enum E <one>; class A { has $.a = one }; dd one, A.new.a, one === A.new.a |.AST.EVAL

[13:04] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «===SORRY!===␤Unknown compilation input 'qast'␤»

[13:08] <lizmat> the failure of === in that case feels like a dispatch issue

[13:18] <patrickb> lizmat: Is CWD the right base to make $?FILE relative to? I.e. is CWD guaranteed to be set to the lib path at that point in the code?

[13:18] <lizmat> what else could be used at that point ?

[13:20] <lizmat> m: my enum E <one>; class A { has $.a = one }; dd one =:= A.new.a

[13:20] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «Bool::True␤»

[13:20] <lizmat> m: my enum E <one>; role A { has $.a = one }; dd one =:= A.new.a

[13:20] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «Bool::False␤»

[13:20] <lizmat> the difference between "class" and "role"

[13:24] <lizmat> m: my enum E <one>; role A { has $.a = one }; dd one =:= A.new(:a(one)).a

[13:24] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «Bool::True␤»

[13:24] <lizmat> so it's something in the default assignment

[13:24] <lizmat> m: my enum E <one>; my $one := one; role A { has $.a = $one }; dd one =:= A.new.a

[13:24] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «Bool::True␤»

[13:29] <patrickb> An ugly hack would be to cycle through all the lib paths and pick the one that is the longest prefix of $?FILE.

[13:53] <lizmat> how would one get at the lib paths at that time ?

[13:57] <lizmat> I think the enum issue boils down to:

[13:57] <lizmat> m: my enum A <a>; dd a =:= a.clone

[13:57] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «Bool::False␤»

[13:57] <lizmat> m: my enum A <a>; dd a.WHICH

[13:57] <camelia> rakudo-moar 840e3eaf5: OUTPUT: «ValueObjAt.new("A|0")␤»

[13:57] <lizmat> since enums are a value type, a clone should return the invocant

[14:14] <Geth> ¦ rakudo/main: 398ac8a5b9 | (Elizabeth Mattijsen)++ | src/core.c/Enumeration.rakumod

[14:14] <Geth> ¦ rakudo/main: Make Enumeration:D.clone return invocant

[14:14] <Geth> ¦ rakudo/main: 

[14:14] <Geth> ¦ rakudo/main: Because instantiated Enumerations are value types, a .clone should

[14:14] <Geth> ¦ rakudo/main: return the invocant unaltered, as there can only be one of a value

[14:14] <Geth> ¦ rakudo/main: type.

[14:14] <Geth> ¦ rakudo/main: 

[14:14] <Geth> ¦ rakudo/main: Because Enumeration:U would also need to return the invocant, take

[14:14] <Geth> ¦ rakudo/main: <…commit message has 14 more lines…>

[14:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/398ac8a5b9

[14:19] <Geth> ¦ roast: b17e4bfd84 | (Elizabeth Mattijsen)++ | S12-enums/thorough.t

[14:19] <Geth> ¦ roast: Add test for #5599

[14:19] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b17e4bfd84

[14:20] <Geth> ¦ rakudo/main: 8b10ad12d4 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[14:20] <Geth> ¦ rakudo/main: Remove test for now fixed #5599

[14:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8b10ad12d4

[14:30] <Geth> ¦ rakudo/main: b9765b477e | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[14:30] <Geth> ¦ rakudo/main: RakuAST: Mark failing tests in RakuAST also as TODO

[14:30] <Geth> ¦ rakudo/main: 

[14:30] <Geth> ¦ rakudo/main: It looks like the RakuAST implementation has taken on some of the

[14:30] <Geth> ¦ rakudo/main: issues that the legacy implementation has.  Todo those tests for

[14:30] <Geth> ¦ rakudo/main: now, at least for the 2025.06 release.

[14:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b9765b477e

[14:30] <lizmat> basically +3 issues in RakUAST, and -1 in legacy and RakuAST

[14:31] <jdv> lizmat: k

[14:31] <lizmat> ab5tract: sorry, this feels like all I could do without causing further potential ecosystem fallout

[14:43] <lizmat> m: say Q|sub a(uint $a --> uint) { $a }; a 18446744073709551615|.AST.EVAL

[14:43] <camelia> rakudo-moar 8b10ad12d: OUTPUT: «-1␤»

[14:43] <lizmat> but take away the return constraint:

[14:44] <lizmat> m: say Q|sub a(uint $a) { $a }; a 18446744073709551615|.AST.EVAL

[14:44] <camelia> rakudo-moar 8b10ad12d: OUTPUT: «18446744073709551615␤»

[14:44] <lizmat> ab5tract: willing to take that on?

[14:50] <ab5tract> hmm, maybe...

[14:52] <ab5tract> but it looks like the same behavior in the base compiler?

[14:53] <lizmat> m: sub a(uint $a --> uint) { $a }; say a 18446744073709551615

[14:53] <camelia> rakudo-moar b9765b477: OUTPUT: «-1␤»

[14:53] <ab5tract> ah, so I guess it's a dispatch issue

[14:53] <ab5tract> m: dd my uint $a = 18446744073709551615

[14:53] <camelia> rakudo-moar b9765b477: OUTPUT: «-1␤»

[14:53] <lizmat> ab5tract: right, the idea it being fixed in RukuAST?

[14:53] <lizmat> and now not anymore ?

[14:53] <ab5tract> ohh, interesting

[15:37] <ab5tract> bisectable6: Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL == -1

[15:37] <bisectable6> ab5tract, Will bisect the whole range automagically because no endpoints were provided, hang tight

[15:38] <bisectable6> ab5tract, Output on all releases: https://gist.github.com/66d54d97d996d38df5c1e07d1f4bf5c4

[15:38] <bisectable6> ab5tract, Bisecting by exit code (old=2023.02 new=2023.04). Old exit code: 1

[15:38] <bisectable6> ab5tract, bisect log: https://gist.github.com/4180365d5a208d7f81b7ab1e6d5448d4

[15:38] <bisectable6> ab5tract, (2023-03-01) https://github.com/rakudo/rakudo/commit/97d15491ae51905fd8acb00bace86c15b050cecd

[15:39] <bisectable6> ab5tract, Bisecting by output (old=2022.12 new=2023.02) because on both starting points the exit code is 1

[15:39] <bisectable6> ab5tract, bisect log: https://gist.github.com/3731ef808b54f566963daa37e788abcd

[15:39] <bisectable6> ab5tract, (2023-01-02) https://github.com/rakudo/rakudo/commit/2d559ef42d978f581e88fd0d541970556c6a886e

[15:39] <bisectable6> ab5tract, Bisecting by output (old=2016.09 new=2016.10) because on both starting points the exit code is 1

[15:39] <bisectable6> ab5tract, bisect log: https://gist.github.com/84d8e6ebcf907ed599dbc2cdbd72693d

[15:39] <bisectable6> ab5tract, ⚠ New output detected, please review the results manually

[15:39] <bisectable6> ab5tract, Output on all releases and bisected commits: https://gist.github.com/450b524c242c8b521e41a5e4426a1613

[15:40] <ab5tract> bisectable6: help

[15:40] <bisectable6> ab5tract, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^∞).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Bisectable

[15:41] <lizmat> I'd try with old=2024.01 or so

[15:41] <ab5tract> I always forget how to hold this thing :)

[15:42] <ab5tract> bisectable6: old=2024.01 exit 0 if Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL == -1

[15:42] <bisectable6> ab5tract, On both starting points (old=2024.01 new=b9765b4) the exit code is 0 and the output is identical as well

[15:42] <bisectable6> ab5tract, Output on both points: «»

[15:42] <lizmat> say missing ?

[15:42] <ab5tract> bisectable6: old=2024.1 exit 0 if Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL == -1

[15:42] <bisectable6> ab5tract, Cannot find revision “2024.1” (did you mean “2024.12”?)

[15:43] <ab5tract> yeah that woiuld fix the useless use, but I think I'm supposed to involve exit or something?

[15:43] <ab5tract> bisectable6: old=2023.01 exit 0 if Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL == -1

[15:43] <bisectable6> ab5tract, Cannot find revision “2023.01” (did you mean “2025.01”?)

[15:44] <ab5tract> bisectable6: old=2023.02 exit +(Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL == -1)

[15:44] <bisectable6> ab5tract, Bisecting by exit code (old=2023.02 new=b9765b4). Old exit code: 1

[15:44] <lizmat> the suspense is killing...  :-)

[15:44] <ab5tract> gar, that's opposite

[15:44] <ab5tract> I think I may have killed the poor bot

[15:44] <lizmat> don't matter in this case ?

[15:45] <bisectable6> ab5tract, bisect log: https://gist.github.com/e46db5547f22aa926774349477ad0961

[15:45] <bisectable6> ab5tract, (2023-03-01) https://github.com/rakudo/rakudo/commit/97d15491ae51905fd8acb00bace86c15b050cecd

[15:45] <lizmat> meh, false positive

[15:45] <ab5tract> yup

[15:45] <ab5tract> let me throw a try in there too

[15:45] <ab5tract> bisectable6: old=2023.02 exit +(try Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL != -1)

[15:46] <bisectable6> ab5tract, Bisecting by exit code (old=2023.02 new=b9765b4). Old exit code: 0

[15:46] <bisectable6> ab5tract, bisect log: https://gist.github.com/1739cd5ebc2efcc2fa8b9ba1b54916f0

[15:46] <bisectable6> ab5tract, (2023-03-01) https://github.com/rakudo/rakudo/commit/97d15491ae51905fd8acb00bace86c15b050cecd

[15:47] <ab5tract> bisectable6: old=2024.01 exit +(try Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL != -1)

[15:47] <bisectable6> ab5tract, On both starting points (old=2024.01 new=b9765b4) the exit code is 1 and the output is identical as well

[15:47] <bisectable6> ab5tract, Output on both points: «»

[15:47] <lizmat> bisectable6: old=2024.1 say Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL

[15:47] <bisectable6> lizmat, Cannot find revision “2024.1” (did you mean “2024.12”?)

[15:47] <lizmat> bisectable6: old=2024.01 say Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL

[15:47] <bisectable6> lizmat, On both starting points (old=2024.01 new=b9765b4) the exit code is 0 and the output is identical as well

[15:47] <bisectable6> lizmat, Output on both points: «18446744073709551615␤»

[15:47] <lizmat> huh?

[15:48] <ab5tract> bisectable6: old=2023.08 exit +(try Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL != -1)

[15:48] <bisectable6> ab5tract, On both starting points (old=2023.08 new=b9765b4) the exit code is 1 and the output is identical as well

[15:48] <bisectable6> ab5tract, Output on both points: «»

[15:48] <lizmat> bisectable6: old=2024.01 say Q| sub a(uint $a --> uint) { $a }; a 18446744073709551615 |.AST.EVAL

[15:48] <ab5tract> yeah that's certainly weird

[15:48] <bisectable6> lizmat, Bisecting by output (old=2024.01 new=b9765b4) because on both starting points the exit code is 0

[15:48] <bisectable6> lizmat, bisect log: https://gist.github.com/cec16442f05e40d7aba0caa8e8fa1834

[15:48] <bisectable6> lizmat, There are 2 candidates for the first “new” revision. See the log for more details

[15:49] <ab5tract> ah, that seems to work better than worrying about the exit code

[15:50] <ab5tract> 7b4ba29c3fa39cf580c273004db3ab278e59cdee

[15:50] <linkable6> (2025-03-19) https://github.com/rakudo/rakudo/commit/7b4ba29c3f RakuAST: only generate return handlers when there's a chance of explicit return

[15:52] <lizmat> it's not 57fcb1f1b07229e3 for sure

[15:52] <linkable6> (2025-03-19) https://github.com/rakudo/rakudo/commit/57fcb1f1b0 RakuAST: dont' decont return values of rw routines

[15:58] <ab5tract> alright, will take a look

[16:12] <Geth> ¦ rakudo/main: 62915529b8 | (Elizabeth Mattijsen)++ | lib/RakuAST/L10N.rakumod

[16:12] <Geth> ¦ rakudo/main: RakuAST: some maint / dev on RakUAST::L10N

[16:12] <Geth> ¦ rakudo/main: 

[16:12] <Geth> ¦ rakudo/main: - added sub fresh-translation-file

[16:12] <Geth> ¦ rakudo/main: - added sub missing-translations

[16:12] <Geth> ¦ rakudo/main: - allow calling read-hash without args to get core translations

[16:12] <Geth> ¦ rakudo/main: - some code cosmetics and doc fixes

[16:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/62915529b8

[16:40] <ab5tract> this is pretty strange...

[16:42] <ab5tract> bisectable6: old=2024.01 say Q| sub a(uint $a) { $a }; a 18446744073709551615 |.AST.EVAL

[16:42] <bisectable6> ab5tract, On both starting points (old=2024.01 new=6291552) the exit code is 0 and the output is identical as well

[16:42] <bisectable6> ab5tract, Output on both points: «18446744073709551615␤»

[17:11] <lizmat> ab5tract: yeah, it's the adding of the return constraint that does it

[17:19] <Geth> ¦ rakudo/main: 60a72b05c0 | (Elizabeth Mattijsen)++ | src/core.c/Process.rakumod

[17:19] <Geth> ¦ rakudo/main: Make $*PROGRAM-NAME *always* assignable

[17:19] <Geth> ¦ rakudo/main: 

[17:19] <Geth> ¦ rakudo/main: It would become unassignable if BEGIN $*PROGRAM had been executed.

[17:19] <Geth> ¦ rakudo/main: And we want to use that in roast as a replacement for $?FILE, which

[17:19] <Geth> ¦ rakudo/main: will become a relative path

[17:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/60a72b05c0

[17:21] <Geth> ¦ rakudo/main: 15ab56c464 | (Elizabeth Mattijsen)++ | 2 files

[17:21] <Geth> ¦ rakudo/main: Use $*PROGRAM instead of $?FILE in 'use lib'

[17:21] <Geth> ¦ rakudo/main: 

[17:21] <Geth> ¦ rakudo/main: As $?FILE will become a relative path, which could cause havoc on

[17:21] <Geth> ¦ rakudo/main: testing if not testing from the "base" directory

[17:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/15ab56c464

[17:22] <Geth> ¦ roast: ae67421edb | (Elizabeth Mattijsen)++ | 321 files

[17:22] <Geth> ¦ roast: Use $*PROGRAM instead of $?FILE in 'use lib'

[17:22] <Geth> ¦ roast: 

[17:22] <Geth> ¦ roast: As $?FILE will become a relative path, which could cause havoc on

[17:22] <Geth> ¦ roast: testing if not testing from the "base" directory

[17:22] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ae67421edb

[17:24] <ugexe> there are going to be quite a few more instances that need to be replaced, such as https://github.com/Raku/roast/blob/ae67421edb133d3b037b1232ff76091c0a4b52ad/S10-packages/precompilation.t#L5

[17:24] * lizmat is on it

[17:25] <ugexe> https://github.com/Raku/roast/pull/390/files - it is probably worth checking this PR for anywhere $?FILE is used that isn't on a `use lib` line

[17:28] <lizmat> rak --modify-files '*.subst(q/$?FILE.IO.parent/,q/$*PROGRAM.parent/)' --extensions=t

[17:28] <lizmat> to the rescue  :-)

[17:29] <Geth> ¦ roast: a4211ce40f | (Elizabeth Mattijsen)++ | 29 files

[17:29] <Geth> ¦ roast: Use $*PROGRAM instead of $?FILE in 'use lib' (2)

[17:29] <Geth> ¦ roast: 

[17:29] <Geth> ¦ roast: As $?FILE will become a relative path, which could cause havoc on

[17:29] <Geth> ¦ roast: testing if not testing from the "base" directory

[17:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a4211ce40f

[17:30] <lizmat> ugexe++ for the nudges

[17:33] <ab5tract> lizmat: what's the nqp op for checking if something is a lower case numeric?

[17:33] <ab5tract> I'm hoping that it also works for the type object

[17:34] <lizmat> lower case numeric ?

[17:34] <lizmat> ah, you mean native

[17:35] <ab5tract> yeah, for some reason that label seemed weird. brain bubble

[17:36] <lizmat> something with primspec

[17:36] <lizmat> nqp::objprimspec ?

[17:38] <ab5tract> that rings a bell, thanks for the hint :)

[17:39] <lizmat> basically, if it's not 0, then it's a native

[17:39] <ab5tract> now it does make me wonder whether the "right" place to fix this is in code.rakumod ... or maybe in p6typecheckrv itself?

[17:40] <lizmat> as the error is in the legacy as well, it would seem p6typecheckrv would be the place?

[17:40] <ab5tract> sure sure, make it harder on me ;)

[17:40] <lizmat> heh...

[17:41] <ab5tract> ahh, ok it's NQP at least

[17:41] <lizmat>       !! nqp::objprimspec(nqp::decont($type))

[17:41] <lizmat>         ?? $value

[17:41] <lizmat> looks like it's already DTRT ?

[17:43] <ab5tract> yeah, just saw that!

[17:45] <ab5tract> ok, this is interesting

[17:45] <ab5tract> m: say Q| sub a(uint $a) { dd $a; $a }; a 18446744073709551615 |.AST.EVAL

[17:45] <camelia> rakudo-moar 15ab56c46: OUTPUT: «-1␤18446744073709551615␤»

[17:47] <ab5tract> ... how?

[17:49] <lizmat> m: sub a(uint $a) { dd $a; $a }; a 18446744073709551615

[17:49] <camelia> rakudo-moar 15ab56c46: OUTPUT: «-1␤»

[17:49] <lizmat> m: sub a(uint $a) { dd $a; $a }; say a 18446744073709551615

[17:49] <camelia> rakudo-moar 15ab56c46: OUTPUT: «-1␤18446744073709551615␤»

[17:49] <lizmat> weird

[17:49] <lizmat> afk for some fresh ice-cream

[17:49] <ab5tract> enjoy!

[17:49] <lizmat> &

[17:51] <ab5tract> nine: any thoughts on what might be going on above? ^^

[17:54] *** librasteve_ joined
[18:01] *** vrurg left
[18:02] *** vrurg joined
[18:17] <ab5tract> lizmat: looks like there is a bug in dd

[18:17] <ab5tract> m: sub a(uint $a) { dd $a; say $a; $a }; say a 18446744073709551615

[18:17] <camelia> rakudo-moar 15ab56c46: OUTPUT: «-1␤18446744073709551615␤18446744073709551615␤»

[18:28] *** bisectable6 left
[18:28] *** greppable6 left
[18:28] *** bisectable6 joined
[18:28] *** greppable6 joined
[19:13] <lizmat> interesting

[19:13] <lizmat> m: 'my uint $a = 18446744073709551615; dd $a

[19:13] <camelia> rakudo-moar 15ab56c46: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> my uint $a = 18446744073709551615; dd $a<HERE><EOL>␤    expecting any of:␤…»

[19:14] <lizmat> m: my uint $a = 18446744073709551615; dd $a

[19:14] <camelia> rakudo-moar 15ab56c46: OUTPUT: «18446744073709551615␤»

[19:38] <Geth> ¦ roast: a0a632a5be | (Elizabeth Mattijsen)++ | 9 files

[19:38] <Geth> ¦ roast: Use .sibling( instead of .parent.child(

[19:38] <Geth> ¦ roast: 

[19:38] <Geth> ¦ roast: For more clarity and less code

[19:38] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a0a632a5be

[19:46] <Geth> ¦ nqp/main: e4cc3c69e6 | (Elizabeth Mattijsen)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp

[19:46] <Geth> ¦ nqp/main: Micro-optimize MASTing QAST::Stmt

[19:46] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/e4cc3c69e6

[19:55] <Geth> ¦ rakudo/main: aa4ac197c9 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[19:55] <Geth> ¦ rakudo/main: Bump NQP for micro-opt in MASTing QAST::Stmt

[19:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/aa4ac197c9

[20:37] <nine> MoarVM bytecode might be worth a look for uint issues. Even nqp contains a lot of magic coercion that wont be apparent from the QAST

[22:44] *** sivoais left
[22:46] *** sivoais joined
