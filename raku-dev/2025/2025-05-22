[00:14] *** Guest72 left
[01:29] *** nine left
[01:30] *** nine joined
[02:31] *** Guest72 joined
[08:15] *** finanalyst joined
[09:02] *** finanalyst left
[09:32] <lizmat> m: dd infix:<,>(1); my $op = &infix:<,>; dd $op(1)

[09:32] <camelia> rakudo-moar 46ed7b403: OUTPUT: «1␤(1,)␤»

[09:32] <lizmat> that feels... inconsistent

[09:35] <lizmat> looking at the QAST of: dd infix:<,>(1)   it QASTs as: dd 1

[09:42] <lizmat> so which one is correct?   opinions ab5tract nine ?

[10:30] <Geth> ¦ rakudo/main: 9564c4fdc6 | (Elizabeth Mattijsen)++ | src/core.c/metaops.rakumod

[10:30] <Geth> ¦ rakudo/main: Return to original approach of triangle METAOP_REDUCE_LIST

[10:30] <Geth> ¦ rakudo/main: 

[10:30] <Geth> ¦ rakudo/main: As described in #5882, commit ba2431f4456ad43 actually changed the

[10:30] <Geth> ¦ rakudo/main: internal logic of the triangle metaop list reducer to check for

[10:30] <Geth> ¦ rakudo/main: the first value: if that indicated the end of the values, then

[10:30] <Geth> ¦ rakudo/main: the iterator wouldn't actually be returned, but an optimized version

[10:30] <Geth> ¦ rakudo/main: for empty lists.

[10:30] <Geth> ¦ rakudo/main: <…commit message has 13 more lines…>

[10:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9564c4fdc6

[10:33] <Geth> ¦ roast: 3b28f5e8c7 | (Elizabeth Mattijsen)++ | S13-overloading/metaoperators.t

[10:33] <Geth> ¦ roast: Add test for R#5882

[10:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3b28f5e8c7

[10:33] <linkable6> R#5882 [open]: https://github.com/rakudo/rakudo/issues/5882 "Triangular comma" metaoperator [\,] unexpectedly puts first element inside a list

[10:35] <nine> lizmat: with RakuAST both print (1,)

[10:35] <lizmat> ah, good, so another test in rakuast-fixed is warranted  :-)

[10:50] <lizmat> meh, doesn't appear to be testable

[10:51] <lizmat> easily  

[10:55] <lizmat> ab5tract: looks like the subset error fixes broke xx-fixed-in-rakuast.rakutest test 100

[10:57] <Geth> ¦ rakudo/main: 94ebbccdbf | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[10:57] <Geth> ¦ rakudo/main: Add test for infix:<,>(42) behaviour

[10:57] <Geth> ¦ rakudo/main: 

[10:57] <Geth> ¦ rakudo/main: As spotted in https://irclogs.raku.org/raku-dev/2025-05-22.html#09:32

[10:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/94ebbccdbf

[10:59] <Geth> ¦ rakudo/main: 79a332b52d | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[10:59] <Geth> ¦ rakudo/main: Oops, forgot to todo the test without RakuAST

[10:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/79a332b52d

[12:09] *** Guest72 left
[12:23] <ab5tract> lizmat: I don't comprehend

[12:23] <tellable6> 2025-05-22T08:00:24Z #raku <wayland76> ab5tract: To clarify, I wouldn't want to introduce extra stuff into Raku constructors either; it'd be a module.  

[12:24] <lizmat> ab5tract: RAKUDO_RAKUAST=1 raku t/12-rakuast/xx-fixed-in-rakuast.rakutest  fails

[12:24] <lizmat> well, actually dies

[12:25] <lizmat> aah... maybe not...

[12:26] <lizmat> hmmm... the output is weird...  

[12:27] <lizmat> looks like tests following test 100 are now part of its subtests ?

[12:27] <ab5tract> I didn't take this to be related to my subset changes, as it seemed wildly broken for some reason

[12:28] <ab5tract> ie, this is the error I get "Type check failed in assignment to $grammar; expected Mu but got Raku::Grammar (Raku::Grammar.new() ...)"

[12:28] <lizmat> is this on HEAD?

[12:28] <ab5tract> yeah

[12:29] <ab5tract> recompiling to be sure

[12:29] <ab5tract> maybe it's mad at -Ilib

[12:29] <lizmat> this is what I see: https://gist.github.com/lizmat/c6f61d8cda9a64e5e4d3ebb6440c2ef2

[12:29] <lizmat> the test in line 46 is what I just added

[12:35] <lizmat> hmmm... ab5tract indeed doesn't appear to be anything related to subsets, sorry for the noise

[12:36] <lizmat> what I don't get, is that without RakuAST it runs 108 tests

[12:36] <lizmat> and with only 100?   But still comes out ok ?

[12:36] <ab5tract> well the test does seem to be broken in that there is no expectation that the thing would die

[12:37] <ab5tract> `throws-like` shouldn't imply death

[12:37] <ab5tract> I guess I can toss a use fatal in there though

[12:41] <ab5tract> now, as to how the further tests get nested as subtests, I have no clue

[12:49] <ab5tract> hmm, it seems that there is something unfortunate happening with the `unk_routines` tests

[12:53] <ab5tract> I don't think `throws-like` appreciates being put into a try

[12:53] <ab5tract> but without it we get `This representation (P6int) cannot unbox to a native string (for type BOOTInt)`

[12:56] <ab5tract> also, I don't understand why the EVAL'd code is reproduced in the output for throws-like in the subset tests, but not in other uses of throws-like

[13:01] <lizmat> ab5tract: I'll put it on my list to figure out, thanks for looking!

[13:11] <Geth> ¦ rakudo/main: b29ab0f523 | ab5tract++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[13:11] <Geth> ¦ rakudo/main: Force new subset-type-without-default test to die

[13:11] <Geth> ¦ rakudo/main: 

[13:11] <Geth> ¦ rakudo/main: Without `use fatal`, this code doesn't satisfy the

[13:11] <Geth> ¦ rakudo/main: current expectations of `throws-like`, which needs

[13:11] <Geth> ¦ rakudo/main: a proper "death" to feel satisfied.

[13:11] <Geth> ¦ rakudo/main: 

[13:11] <Geth> ¦ rakudo/main: Catching is a bit of an issue in general with worries,

[13:11] <Geth> ¦ rakudo/main: but that's for tackling at a later date.

[13:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b29ab0f523

[13:20] <lizmat> ab5tract++

[13:20] <lizmat> afk&

[15:06] *** librasteve_ joined
[19:23] *** Guest72 joined
[19:45] *** librasteve_ left
[20:06] *** Guest72 left
[20:07] *** Guest72 joined
[21:20] *** Guest72 left
[21:23] *** Guest72 joined
[22:51] *** Guest72 left
[23:08] *** Guest72 joined
