[03:45] *** JimmyZhuo joined
[03:58] *** JimmyZhuo left
[08:03] *** finanalyst joined
[08:14] *** finanalyst left
[08:16] *** finanalyst joined
[08:24] <Geth> ¦ rakudo/main: 88566130ae | (Stefan Seifert)++ | 2 files

[08:24] <Geth> ¦ rakudo/main: RakuAST: properly support natively typed sigilless parameters

[08:24] <Geth> ¦ rakudo/main: 

[08:24] <Geth> ¦ rakudo/main: Fixes: sub foo(int \i) { bar(i) }; sub bar(int $i) { }

[08:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/88566130ae

[08:24] <Geth> ¦ rakudo/main: 4ede82f6e1 | (Stefan Seifert)++ | src/Raku/ast/type.rakumod

[08:24] <Geth> ¦ rakudo/main: RakuAST: fix method not found after failing to resolve type

[08:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4ede82f6e1

[08:24] <Geth> ¦ rakudo/main: f20251a5ed | (Stefan Seifert)++ | src/Raku/Actions.nqp

[08:24] <Geth> ¦ rakudo/main: RakuAST: fix missing $?CLASS and $?PACKAGE in augment

[08:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f20251a5ed

[08:24] <nine> That makes it 1206 fully bootstrapped.

[08:25] <nine> Btw. I love that last commit. When trying that change I wondered for which obscure problem this code was the wrong solution. Turns out, there wasn't any. Fixed things by just removing that special case.

[08:37] *** finanalyst left
[08:38] <patrickb> My guess would be that this bit of code was a workaround that did help at some point in the past.

[08:39] <nine> Yep. Probably from an early try to get augment going

[08:40] <nine> Ah, there used to be a $*PACKAGE.IMPL-CHECK($*R, $*CU.context, 1); which got translated to $*PACKAGE.to-begin-time

[08:49] *** sena_kun joined
[09:25] *** finanalyst joined
[09:25] <Geth> ¦ rakudo/bootstrap-rakuast: 25 commits pushed by (Stefan Seifert)++

[09:25] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/9cf753578f99...9f2a4d00d5e6

[09:25] <nine> 1219 now

[09:26] <nine> So what will happen first? Me catching up fully bootstrapped with setting compiled with regular grammar? Or the rest of the team finishing spectests on the old setting? :D

[09:29] <gfldex> nine: Please don't forget to set the turning light when overtaking them. You are already breaking the coding speed limit.

[09:34] <nine> Which should not distract from the fact that it's still a ton of work and every little bit of help is greatly appreciated.

[09:46] <nine> Oh boy....there's a RakuAST vs. spesh bug

[10:09] *** sena_kun left
[10:23] <nine> Pushed a fix to MoarVM which brings us to 1224

[10:23] <nine> The RakuAST component of the problem was that even in a method foo(|c) we declare the implicit *%_, which the old frontend doesn't.

[10:31] <Geth> ¦ nqp/main: ccb993497d | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[10:31] <Geth> ¦ nqp/main: Bump MoarVM for various fixes

[10:31] <Geth> ¦ nqp/main: 

[10:31] <Geth> ¦ nqp/main: - prevent stuff happening at exit (timo++, MasterDuke++)

[10:31] <Geth> ¦ nqp/main: - avoid segfault with nqp::objectid in GC (nine++)

[10:31] <Geth> ¦ nqp/main: - avoid mis-spec of signatures with multiple slurpies (nine++)

[10:31] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/ccb993497d

[10:33] <lizmat> nine: maybe the new frontend shouldn't either

[10:34] <nine> It definitely shouldn't. But apart from bugs like that in spesh it also shouldn't make any semantic difference, so it's just a missing optimization.

[10:35] <timo> makes me wonder if there's any sensible way to make an automatic fuzzer for spesh

[10:38] <lizmat> hmm...  got 3 new make test failures after bumping NQP

[10:38] <lizmat> not sure whether they are caused by the bump or not  :-(

[10:39] * lizmat re-conpiles without the bump

[10:39] <lizmat> t/02-rakudo/07-implementation-detail-6.c.t   # ditto 6.d.t and 6.e.t

[10:43] <lizmat> it wasn't the bump

[10:56] <lizmat> nine: got spectest failure now *without* RakuAST: t/spec/S06-signature/arity.t

[10:56] <lizmat> Slurpy named parameters with type constraints are not supported

[10:56] <lizmat> since this looks related to .assuming, I'll have a look

[10:57] <Geth> ¦ rakudo/main: 024827436a | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[10:57] <Geth> ¦ rakudo/main: Bump NQP for various MoarVM fixes

[10:57] <Geth> ¦ rakudo/main: 

[10:57] <Geth> ¦ rakudo/main: - prevent stuff happening at exit (timo++, MasterDuke++)

[10:57] <Geth> ¦ rakudo/main: - avoid segfault with nqp::objectid in GC (nine++)

[10:57] <Geth> ¦ rakudo/main: - avoid mis-spec of signatures with multiple slurpies (nine++)

[10:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/024827436a

[11:00] *** rakkable left
[11:00] *** rakkable joined
[11:05] <lizmat> bisectable6: old=2025.02 sub a($a, Mu *%_) { }

[11:05] <bisectable6> lizmat, On both starting points (old=2025.02 new=f20251a) the exit code is 1 and the output is identical as well

[11:05] <bisectable6> lizmat, Output on both points: «===SORRY!=== Error while compiling /tmp/eF9hJABYjP␤Slurpy named parameters with type constraints are not supported␤at /tmp/eF9hJABYjP:1␤------> sub a($a, Mu *%_<HERE>) { }␤    expecting any of:␤        constraint␤»

[11:05] <lizmat> aha

[11:07] <lizmat> so somehow now the Mu constraint is being added

[11:10] *** finanalyst left
[11:11] *** JimmyZhuo joined
[11:17] <lizmat> bisectable6: old=2025.02 class A { our method a() { } }; dd &A::a.signature.params[1].type

[11:17] <bisectable6> lizmat, On both starting points (old=2025.02 new=f20251a) the exit code is 0 and the output is identical as well

[11:17] <bisectable6> lizmat, Output on both points: «Mu␤»

[11:39] <nine> Seems like there's at least one case where the generated BUILDALL differs from the interpreting POPULATE

[11:39] <nine> The latter hllizes bound values while the former doesn't.

[11:40] <lizmat> BUILDALL is no longer generated. POPULATE is generated

[11:40] <lizmat> BUILDALL is a shim

[11:41] <nine> # Attempt to auto-generate a BUILDALL method.

[11:41] <nine> unless self.declares_method($target, 'BUILDALL')

[11:41] <nine> "Basically a flattened version of Mu.BUILDALL"

[11:42] <nine> nqp::die('Invalid ' ~ $object.HOW.name($object) ~ '.BUILDALL plan: ' ~ $code);

[11:42] <nine> So forgive me when I use the name that occurs in many more places

[11:42] <nine> Still doesn't change anything about there being a difference

[11:53] <nine> AFAICT it's not actually possible for a routine to receive an NQP hash as argument. It will always be hllized. The only exception seems to be that generated constructor. Thus I would say hllize is just missing from that.

[11:54] <Geth> ¦ rakudo/main: 0adcacd4f0 | (Elizabeth Mattijsen)++ | 4 files

[11:54] <Geth> ¦ rakudo/main: Hopefully reduce BUILDALL -> POPULATE confusion

[11:54] <Geth> ¦ rakudo/main: 

[11:54] <Geth> ¦ rakudo/main: Only comment changes.

[11:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0adcacd4f0

[11:55] <lizmat> nine: what is this affecting?

[11:55] <lizmat> the reason I'm asking is that I'm close to getting rid of all compiler services / BUILDPLAN  etc. logic in RakuAST

[11:56] <lizmat> so RakuAST will generate the POPULATE method itself, and the accessor where applicable

[11:56] <nine> https://github.com/rakudo/rakudo/blob/main/src/core.e/PseudoStash.rakumod#L331 relies on $lexpad (which may be an nqp::hash) getting bound un-hllized

[11:56] <lizmat> so we can get rid of the generate_BUILDPLAN / BUILDPLAN interpreting logic altogether as soon as the Raku bootstrap is merged

[12:00] <lizmat> nine: it also works the other way around:

[12:00] <lizmat> m: use nqp; my %h = :42a; dd nqp::atkey(%h,"a")

[12:00] <camelia> rakudo-moar 024827436: OUTPUT: «element of %h = 42␤»

[12:01] <lizmat> so I don't think that's the issue ?

[12:05] <nine> It is:

[12:05] <nine> m: use nqp; my %h; nqp::iterator(%h)

[12:05] <camelia> rakudo-moar 024827436: OUTPUT: «Cannot iterate object with P6opaque representation (Hash)␤  in block <unit> at <tmp> line 1␤␤»

[12:12] <lizmat> I guess nqp::atkey is special like that

[12:12] <Geth> ¦ rakudo/bootstrap-rakuast: 18106bf302 | (Stefan Seifert)++ | src/core.e/PseudoStash.rakumod

[12:12] <Geth> ¦ rakudo/bootstrap-rakuast: RakuAST: fix reliance on missing hllize in generated POPULATE

[12:12] <Geth> ¦ rakudo/bootstrap-rakuast: 

[12:12] <Geth> ¦ rakudo/bootstrap-rakuast: Arguments are supposed to be hllized. Apparently this is missing from

[12:12] <Geth> ¦ rakudo/bootstrap-rakuast: the generated POPULATE methods, so it wasn't obvious that binding an NQP

[12:12] <Geth> ¦ rakudo/bootstrap-rakuast: hash to an attribute via constructor call cannot work as expected.

[12:12] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/commit/18106bf302

[12:12] <nine> 1225

[12:16] <timo> right, a few things can go to the positional or associative delegate slot by default. i think we allow an object to have both a positional and an associative delegate slot, in that case it wouldn't be clear what you would want to iterate?

[12:17] <nine> Sadly t/spec/S02-names/SETTING-6e.t still fails, because it's expecting every comp unit to have a <unit> wrapped in a <unit-outer> scope. The latter fulfils no purpose though and is absent in RakuAST

[12:18] <nine> I may be biased, but I find SETTING::OUTER::OUTER to get from v6.e to v6.c to be much clearer than SETTING::OUTER::OUTER::OUTER::OUTER

[12:20] <lizmat> agree... and we can fix that on the merge

[12:21] <lizmat> anyways, it's not a roast test, so why not adapt that test in the bootstrap-rakuast branch ?

[12:24] <nine> It *is* a roast test

[12:28] <[Coke]> lizmat: did you see the blin run I did a few days ago?

[12:28] <[Coke]> I only posted the .md in a gist, I didn't open a ticket (yet)

[12:28] <lizmat> nine: ah,, yes :-(

[12:28] <lizmat> missed it

[12:29] <lizmat> been focused on issues lately  :-)

[12:29] <[Coke]> https://gist.githubusercontent.com/coke/9d9afd2e8eb702b982fcc311d21d67a4/raw/380793fbb14695b2e432159a6fe90c1d4f35eca7/failure.md

[12:29] <[Coke]> there's an issue with .assuming

[12:31] <lizmat> ok, looks like there are some .assuming regressions in there

[12:32] <lizmat> ok, getting a bit swamped now:  will do the weekly first, then look at blin, then look at spectest regression

[12:45] <lizmat> nine: then I wonder, should it be a roast test?   feels to me that's pretty implementation dependent

[12:56] <nine> I don't know.

[12:57] <nine> I wish vrurg would explain what issues his fixes actually solve. But as with the generic stuff all commit messages, comments, GitHub issues and PRs basically just give you a wordy "re-wrote a bunch of code to fix some issues"

[12:58] <nine> Commit message says "Tests to cover fixed CORE loading and pseudo-packages [...] In support of rakudo/rakudo#3055"

[12:58] <linkable6> RAKUDO#3055 [closed]: https://github.com/rakudo/rakudo/pull/3055 Re-implement CORE loading sequence

[12:59] <nine> That issue says "PR #3040 wasn't a complete fix to the new symbols issue." without further explaining what the "new symbols issues" was

[12:59] <nine> The referenced PR says "Because loading of all CORE settings caused some tests to fail due to the way SETTING and CORE pseudo-packages behaved, this fix also includes improvements to PseudoStash class"

[12:59] <nine> "some tests to fail" yeah, that is helpful

[13:03] <[Coke]> lizmat: I'll plan on one more blin run before this weekend.

[13:04] <[Coke]> (this weekend) - I am going to do the release on Sunday

[13:04] <lizmat> [Coke]: ok

[13:04] <lizmat> ok

[13:04] <[Coke]> (unless jdv gets really excited about it. :)

[13:07] <nine> m: my $a will init { say 'init!' };

[13:07] <camelia> rakudo-moar 0adcacd4f: ( no output )

[13:07] <lizmat> that used to work ?

[13:08] <lizmat> bisectable6: old=2023.01 my $a will init { say "innit" }

[13:08] <bisectable6> lizmat, Cannot find revision “2023.01” (did you mean “2025.01”?)

[13:08] <lizmat> bisectable6: old=2023.02 my $a will init { say "innit" }

[13:08] <bisectable6> lizmat, On both starting points (old=2023.02 new=0adcacd) the exit code is 0 and the output is identical as well

[13:08] <bisectable6> lizmat, Output on both points: «»

[13:08] <lizmat> hmmm.. I guess not

[13:08] <Geth> ¦ rakudo/main: 085953b822 | (Stefan Seifert)++ | src/core.c/Variable.rakumod

[13:08] <Geth> ¦ rakudo/main: Fix accidental execution of stub code when trying to report will phaser NYI

[13:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/085953b822

[13:09] <nine> No, that was never implemented

[13:09] <lizmat> heh, indeed

[13:10] <nine> It's just that the error reporting code was never tested

[13:13] <lizmat> well, it feels a bit weird to test for a NYI in roast ?

[13:14] <nine> Even a single manual test would have uncovered this immediately

[13:17] <lizmat> true

[13:17] <lizmat> I guess I didn't  :-(

[13:21] <lizmat> bisectable6: old=2025.02 class A { our method a() { } }; &A::a.assuming(A)

[13:21] <bisectable6> lizmat, Bisecting by exit code (old=2025.02 new=085953b). Old exit code: 0

[13:21] <bisectable6> lizmat, bisect log: https://gist.github.com/fb1d471a4e114dd2728fd203dbbe2de8

[13:21] <bisectable6> lizmat, (2025-03-16) https://github.com/rakudo/rakudo/commit/518596b47ee659a85f949081955971f688d09d51

[13:22] <[Coke]> I agree that NYIs should probably either not be in roast, or either explicitly or implicitly be preventative.

[13:23] <[Coke]> (because NYI at this point doesn't necessarily mean "we are really going to I this")

[13:23] <timo> would probably make sense to have NYIs as fudged tests?

[13:23] <[Coke]> (but if they come out, you'd still need to run those tests somewhere.... rakudo t/?)

[13:24] <[Coke]> still want to make sure that nine's case is covered.

[13:24] <[Coke]> if they're fudged, we'd miss it, yah?

[13:24] <timo> well, they can be fudged to generate a todo that's expected to fail, right?

[13:25] <timo> and i think we can also use fudge to output specific different code per backend?

[13:25] <lizmat> but it's not supposed to fail

[13:25] <timo> instead of just marking a single test, or a series of tests as to be skipped

[13:32] <vrurg> nine: It was unrealistic to mention all the details anyway. So, https://github.com/Raku/roast/pull/557 summarizes the changed tests. :) The whole thing started, as I now remember, with the SETTINGS pseudo not doing right.

[13:33] <nine> vrurg: that's again a PR that just says that something is fixed. And it refers to the Rakudo PR that says that "some tests failed"

[13:35] <JimmyZhuo> nine: for 'role E { method e { $!e = 1 }};class F does E { };' , my $package := $!package.meta-object; $package.HOW.has_attribute($package, $!name); can't find $!e. How can I find it/

[13:35] <tellable6> 2025-03-17T07:55:14Z #raku <patrickb> JimmyZhuo: Ok. Then I understand why you had so much trouble. As not all back ends use a C toolchain and provide respective $CC, ... make variables 

[13:35] <JimmyZhuo> ah, I am wrong

[13:38] <vrurg> nine: Well, no reviewer mentioned that problem back then. My only excuse is that there are even worse commit messages in the log. Event worse it was when they were accompanying incorrect changes to the roast.

[13:42] <nine> It's the same reason why I have given up on generics. Tests expect "instantiated". Commit message just says "Add test for instantiation of a generic class

[13:42] <nine> In support of rakudo/rakudo#5493"

[13:42] <linkable6> RAKUDO#5493 [closed]: https://github.com/rakudo/rakudo/pull/5493 Complete generic instantiation 4

[13:43] <nine> That issue tells me "The epic saga continues with the fourth episode"

[13:44] <nine> The probably relevant commit from that PR just says "Add support for nominalizables on generic classes"

[13:44] <nine> But what does that mean?!

[13:52] <vrurg> Unfortunately, true. Due to the absolute lack of time back then I was happy to get that working and fix a real problem in my JSON::Class implementation. 

[13:52] <nine> And yes, I'm smart and I have by now written most of the compiler frontend for Raku which gave me a pretty intimate understanding of the language and I if I invest a few hours digging through those tests and commits I could figure out what it's all supposed to mean.

[13:53] <nine> But why should I? Why should I spend hours on something that wasn't worth the minutes to you that it would have taken to include a few code examples and bits of background information?

[13:59] <vrurg> nine: Cool down, please. I was digging hours and hours too. I was pissed off of many commits and absolutely non-explaining messages of one person. Nobody even knows who that person was. Like you don't know what was my personal state when I was submitting these PRs.

[14:00] <vrurg> But mainly, the problem is that there must be review process working in first place. We didn't have it with this respect. So, everybody is prone to errors of some kind. But somebody needs to be around to help fix these errors.

[14:02] <jdv> [Coke]: why would i be excited?

[14:02] <lizmat> I'd say: let us all try to create better commit messages 

[14:03] <lizmat> in the future

[14:03] <JimmyZhuo> the roast has a little test about compiling time type check test

[14:05] <Geth> ¦ rakudo/main: 2e82abc353 | (Elizabeth Mattijsen)++ | src/Raku/ast/signature.rakumod

[14:05] <Geth> ¦ rakudo/main: Revert "throw X::Parameter::TypedSlurpy exception, pass two test in t/spec/S06-signature/slurpy-params.t (#5818)"

[14:05] <Geth> ¦ rakudo/main: 

[14:05] <Geth> ¦ rakudo/main: This reverts commit 518596b47ee659a85f949081955971f688d09d51.

[14:05] <Geth> ¦ rakudo/main: 

[14:05] <Geth> ¦ rakudo/main: The added test was breaking .assuming on methods.  Further research

[14:05] <Geth> ¦ rakudo/main: is needed as to why this was the case.

[14:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2e82abc353

[14:07] <nine> Wouldn't it be quite surprising if commit 518596b47ee659a85f949081955971f688d09d51 was wrong? As checks go it doesn't seem much more straight forward than that

[14:09] <timo> the .rakumod files in the ast folder go through some special kind of extra compilation step, right?

[14:10] *** JimmyZhuo left
[14:11] <Geth> ¦ roast: 101b02e8db | (Elizabeth Mattijsen)++ | S04-declarations/will.t

[14:11] <Geth> ¦ roast: Make sure will init tests are skipped

[14:11] <Geth> ¦ roast: 

[14:11] <Geth> ¦ roast: As they will throw X::NYI at compilation now.  Also remove test

[14:11] <Geth> ¦ roast: for "will compose" as that will most likely never get implemented.

[14:11] <Geth> ¦ roast: 

[14:11] <Geth> ¦ roast: Also commented out "will post" code, as that also broke compilation

[14:11] <Geth> ¦ roast: now with X::NYI (although it looks like the test was really being

[14:11] <Geth> ¦ roast: able to compile at this time).

[14:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/101b02e8db

[14:11] <lizmat> that should make spectest clean again

[14:13] <nine> timo: yes, tools/build/raku-ast-compiler.nqp

[14:14] <timo> ah, it leaves bodies of subs and stuff completely alone, doesn't it?

[14:14] <nine> timo: src/Raku/ast/README.md might also be worth a look

[14:14] <nine> yes

[14:14] <timo> OK, that can't be the culprit then

[14:16] <timo> it does "kind of tokenize" the source at a very basic level, but that should be simple enough not to get confused by that code, i'm just assuming. though it's probably easier to just look at the output

[14:17] <lizmat> afk for a few hours&

[14:18] <nine> timo: how's it breaking?

[14:30] <timo> i have yet to actually run the code to see

[15:12] <[Coke]> jdv: that is ... a fair question. :)

[15:26] <timo> the slurpy signature tests have a bunch of "dies-ok" which don't test for a specific type of exception. i wonder if that's wise

[15:29] <timo> ah, we get an X::AdHoc for these cases

[15:31] <timo> feels like we should be able to do better than that

[15:38] <nine> Wow, that's a subtle bug... multi method candidates get sorted into the wrong order if a parameter type is just a stub at the time the class gets composed

[15:41] <timo> eep

[15:52] <[Coke]> wow

[15:53] <nine> But for some reason I see this only in the setting

[15:54] <timo> could it be particularly bootstrappy?

[15:57] <timo> uhhh on current rakudo/main i fail 4 tests in t/spec/S06-signature/slurpy-params.t but on the commit right before it, i.e. without the revert, i fail only 2 tests in that file?

[15:58] *** librasteve_ joined
[15:59] <timo> oh, i was looking at the wrong spot, the trouble isn't in slurpy-params.t at all

[16:02] <timo> uhhh i actually have no idea where the failing code lives that has to do with that commit. presumably one of the failures from the blin run log?

[16:19] <timo> > Serialization Error: missing static code ref for closure 'assumed.great-circle-waypoint' (:1)

[16:21] <timo> this is the real error behind Astro-Utils's "SORRY" with "chars requires a concrete string, but got null"

[16:23] <timo> moar has a commit for that now

[16:35] *** finanalyst joined
[16:36] <timo> got a shorter reproduction case

[16:43] <nine> Same here:

[16:44] <nine> m: 'class Simple { ... }; class Foo { multi method foo(Simple \x, \y, :$a) { say "Simple Any" }; multi method foo(\x, Whatever \y, :$a) { say "Any Whatever" }; multi method foo(\x, \y, :$a) { } }; BEGIN Foo.foo(Any, Any); class Simple { }; Foo.foo(Simple, Whatever);'.AST.EVAL

[16:44] <camelia> rakudo-moar 2e82abc35: OUTPUT: «===SORRY!===␤Unknown compilation input 'qast'␤»

[16:44] <timo> https://github.com/rakudo/rakudo/issues/5819

[16:44] <nine> (would print "Any Whatever" instead of the expected "Simple Any")

[16:45] <timo> [Coke]: when you create an issue for the blin run, you can put this as the source of the problem of Astro::Utils, but the problem is caused by `use Math::Trig;`

[16:45] <nine> It's because of that BEGIN time call to the multi

[16:47] <timo> begin time call, eh? in our company we just say "daily standup"

[16:58] <[Coke]> scruuuuuum

[17:07] <nine> Plot twist!

[17:07] <nine> m: class Simple { ... }; class Foo { multi method foo(Simple \x, \y, :$a) { say "Simple Any" }; multi method foo(\x, Whatever \y, :$a) { say "Any Whatever" }; multi method foo(\x, \y, :$a) { } }; BEGIN Foo.foo(Any, Any); class Simple { }; Foo.foo(Simple, Whatever);

[17:07] <camelia> rakudo-moar 2e82abc35: OUTPUT: «Any Whatever␤»

[17:08] <nine> The exact same problem actually exists on the old frontend. It's just some coincidence that it's hidden

[17:39] <Geth> ¦ nqp/main: db1c963b24 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[17:39] <Geth> ¦ nqp/main: Bump MoarVM to handle unnamed CU serialization, timo++

[17:39] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/db1c963b24

[17:39] <timo> i also realize that this is with assuming but not related to methods, so probably not what liz was actually hunting down

[17:41] <lizmat> I think somewhere a RakuAST::Type::Simple.new("Mu") is added to the Parameter, but I haven't looked yet exactly

[17:41] <lizmat> that makes the RakuAST::Parameter.type concrete, and that triggers the error

[17:42] <lizmat> it probably shouldn't trigger when the type is Mu either

[17:42] <lizmat> m: sub a(Mu *@a) { }

[17:42] <camelia> rakudo-moar 2e82abc35: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Slurpy positional parameters with type constraints are not supported␤at <tmp>:1␤------> sub a(Mu *@a<HERE>) { }␤    expecting any of:␤        constraint␤»

[17:43] <lizmat> I wonder why that is actually an error, you can't get more non-typy in Raku

[17:51] <Geth> ¦ rakudo/main: e633a64c95 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[17:51] <Geth> ¦ rakudo/main: Bump NQP to handle unnamed CU serialization, timo++

[17:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e633a64c95

[17:52] <timo> m: dd :$!; # a random fun "Confused" if anyone is into that kinda thing

[17:52] <camelia> rakudo-moar 2e82abc35: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> dd :$<HERE>!; # a random fun "Confused" if anyone i␤    expecting any of:␤        colon pair␤»

[17:57] <Geth> ¦ rakudo/main: cbccee08a4 | (Stefan Seifert)++ | 2 files

[17:57] <Geth> ¦ rakudo/main: RakuAST: sort multi candidates at check time

[17:57] <Geth> ¦ rakudo/main: 

[17:57] <Geth> ¦ rakudo/main: If aa multi candidate's parameter is typed with a stub and we call that

[17:57] <Geth> ¦ rakudo/main: proto at BEGIN time, we may produce a wrong dispatch order. The reason

[17:57] <Geth> ¦ rakudo/main: is that the type stub will not yet have any parents and so it won't even

[17:57] <Geth> ¦ rakudo/main: beat an Any typed canidate in terms of specificity. Thus we need to

[17:57] <Geth> ¦ rakudo/main: re-sort those dispatch canidates at CHECK time, i.e. when we've fully

[17:57] <Geth> ¦ rakudo/main: <…commit message has 12 more lines…>

[17:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cbccee08a4

[17:58] <nine> 1228

[17:58] <lizmat> and 1279 non-bootstrapped, right?

[17:58] <lizmat> asking for the weekly editor

[17:59] <nine> correct

[18:00] <nine> I still don't see why the perfectly fine commit 518596b47ee659a85f949081955971f688d09d51 was reverted

[18:00] <nine> This of course now causes a rebase conflict in bootstrap-rakuast

[18:07] <lizmat> nine: because it caused a roast regression

[18:07] <lizmat> it just added / removed 4 lines ?

[18:08] <lizmat> you mean you changed something in those 4 lines in the bootstrapped branch?

[18:08] <lizmat> otherwise I don't see how that could create conflicts ?

[18:09] <nine> Yes the branch changes a line there

[18:09] <lizmat> maybe that change needs to be ported to main then ?

[18:09] * lizmat is getting curious now

[18:10] <nine> So there are 2 changes: one is that 2 line super easy and straight forward commit that's quite obviously correct. The other is the massive rewrite of assuming. Now something using assuming breaks and the immediate conclusion is that the tiny commit is to blame?

[18:11] <nine> Isn't it just as massively more likely that there's a few kinks in the new assuming implementation?

[18:11] <lizmat> I'm not saying the .assuming implementation is without kinks

[18:11] <lizmat> I'm just saying that it broke roast

[18:12] <nine> I say assuming broke roast

[18:12] <nine> Wanna bet?

[18:12] <lizmat> no, not particularly

[18:13] <lizmat> I'm just saying roast was fine for a week with the new assuming implementation

[18:13] <lizmat> and that addition in rakuast broke roast

[18:14] <lizmat> and we're a few days away from a release

[18:15] <nine> And then a new error check actually showed that the new assuming implementation has a flaw. And as far as I understood from what you wrote here, you already confirmed that - the parameter gets a type set when it shouldn't. So the check was totally correct in throwing the error.

[18:16] <nine> If its a problem for the release, then assuming should be reverted, not the innocent check that showed that assuming is not ready for prime time.

[18:16] <lizmat> ok, but that's the thing: I verified that the new assuming implementation does **not** add a type to the parameter

[18:17] <nine> Yet there is one there, isn't there?

[18:17] <lizmat> I haven't look at it in depth yet, but the test is:

[18:17] <lizmat> if $was-slurpy && nqp::isconcrete($!type) {

[18:17] <lizmat> so I can only assume that $!type is getting set somewhere

[18:18] * lizmat triple checks

[18:20] <lizmat> hmmm... and indeed it shows a type was added

[18:21] <lizmat> meh

[18:22] <Geth> ¦ rakudo/main: fa7697e212 | (Elizabeth Mattijsen)++ | src/Raku/ast/signature.rakumod

[18:22] <Geth> ¦ rakudo/main: Revert "Revert "throw X::Parameter::TypedSlurpy exception, pass two test in t/spec/S06-signature/slurpy-params.t (#5818)""

[18:22] <Geth> ¦ rakudo/main: 

[18:22] <Geth> ¦ rakudo/main: This reverts commit 2e82abc35389110abb915306926977b4fb16c82b.

[18:22] <Geth> ¦ rakudo/main: 

[18:22] <Geth> ¦ rakudo/main: By popular demand

[18:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fa7697e212

[18:23] *** finanalyst left
[18:53] <Geth> ¦ rakudo/main: 729d26ea61 | (Elizabeth Mattijsen)++ | src/core.c/core_epilogue.rakumod

[18:53] <Geth> ¦ rakudo/main: Preliminary fix for .assuming producing typed slurpies

[18:53] <Geth> ¦ rakudo/main: 

[18:53] <Geth> ¦ rakudo/main: Problem became apparent after 518596b47ee659a8 but did not appear

[18:53] <Geth> ¦ rakudo/main: to create any problems in roast before that.

[18:53] <Geth> ¦ rakudo/main: 

[18:53] <Geth> ¦ rakudo/main: There is still a kind of tangled mess in RakuAST land handling

[18:53] <Geth> ¦ rakudo/main: typed @ and % sigilled parameters, because internally this is

[18:53] <Geth> ¦ rakudo/main: handled as Positional[type] / Associative[type], but in other

[18:53] <Geth> ¦ rakudo/main: places the sigil appears to be leading, causing stacked types

[18:53] <Geth> ¦ rakudo/main: such as Positional[Positional[type]] in certain situations.

[18:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/729d26ea61

[19:00] <releasable6> Next release in ≈4 days and ≈23 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:09] <lizmat> notable6: weekly

[19:09] <notable6> lizmat, 6 notes: https://gist.github.com/6ffed0c2c6fb0a86ba66455c7ea1453d

[19:09] <lizmat> notable6: weekly reset

[19:09] <notable6> lizmat, Moved existing notes to “weekly_2025-03-17T19:09:43Z”

[19:25] *** sena_kun joined
[19:26] <nine> WTF

[19:26] <nine> m: my int @a = 1, 2; @a.first = 3

[19:26] <camelia> rakudo-moar 729d26ea6: ( no output )

[19:27] <nine> > rakudo -e 'my int @a = 1, 2; say @a.first = 2'

[19:27] <nine> Cannot modify an immutable Int (1)

[19:29] <lizmat> that's with the bootstrapped version ?

[19:32] <nine> No, my plain normal rakudo from openSUSE package

[19:33] <nine> But also with a locally compiled one

[19:33] <lizmat> looks like I fixed that on 9 Feb: de08b4c67d

[19:34] <nine> Oooh...and my locally compiled one was compiled with --optimize=off instead of --optimize=3 from earlier debugging.

[19:34] <nine> And both using a too old rakudo and one compiled without optimization lead to the exact same error

[19:45] <Geth> ¦ rakudo/main: 26a9c1a702 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[19:45] <Geth> ¦ rakudo/main: RakuAST: fix wrong flags on natively typed array parameters

[19:45] <Geth> ¦ rakudo/main: 

[19:45] <Geth> ¦ rakudo/main: Fixes: sub foo(int @a) { }; my int $i = 1; foo($i)

[19:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/26a9c1a702

[19:45] <nine> 1229

[19:45] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/03/17/2025-11-cuddlies-for-sale/

[19:53] *** sena_kun left
[19:55] *** sena_kun joined
[20:06] <nine> rakudo (bootstrap-rakuast *<>)> ./rakudo-m --ll-exception -e 'my @a = map &sprintf.assuming("%x"), 9..12;'

[20:06] <nine> This element has not been resolved. Type: RakuAST::Term::Name

[20:07] * lizmat looks

[20:08] <lizmat> bisectable6: old=2025.02 my @a = (9..12).map(&sprintf.assuming("%x")); dd @a

[20:08] <bisectable6> lizmat, On both starting points (old=2025.02 new=26a9c1a) the exit code is 0 and the output is identical as well

[20:08] <bisectable6> lizmat, Output on both points: «["9", "a", "b", "c"]␤»

[20:09] <lizmat> bisectable6: old=2023.02 my @a = (9..12).map(&sprintf.assuming("%x")); dd @a

[20:09] <bisectable6> lizmat, Bisecting by output (old=2023.02 new=26a9c1a) because on both starting points the exit code is 0

[20:14] *** bisectable6 left
[20:14] <lizmat> m: my @a = (9..12).map(&sprintf.assuming("%x")); dd @a

[20:14] <camelia> rakudo-moar 26a9c1a70: OUTPUT: «["9", "a", "b", "c"]␤»

[20:14] <lizmat> I wonder where the a b c come from ?

[20:14] <nine> those numbers in hex

[20:15] <lizmat> aaaahhh   ... "%x"  :-

[20:15] <lizmat> )

[20:16] <lizmat> nine: RakuAST::Term::Name.new(RakuAST::Name.from-identifier("param.2"))

[20:18] *** bisectable6 joined
[20:18] <bisectable6> lizmat, There are 10 candidates for the first “new” revision. See the log for more details

[20:18] <lizmat> eh...   :-)

[20:18] <lizmat> bisectable6: old=2024.08 my @a = (9..12).map(&sprintf.assuming("%x")); dd @a

[20:18] <bisectable6> lizmat, On both starting points (old=2024.08 new=26a9c1a) the exit code is 0 and the output is identical as well

[20:18] <bisectable6> lizmat, Output on both points: «["9", "a", "b", "c"]␤»

[20:19] <lizmat> bisectable6: old=2024.08 my @a = (9..12).map(&sprintf.assuming("%x")); dd @a

[20:19] <bisectable6> lizmat, On both starting points (old=2024.08 new=26a9c1a) the exit code is 0 and the output is identical as well

[20:19] <bisectable6> lizmat, Output on both points: «["9", "a", "b", "c"]␤»

[20:19] <lizmat> bisectable6: old=2024.01 my @a = (9..12).map(&sprintf.assuming("%x")); dd @a

[20:19] <bisectable6> lizmat, Bisecting by output (old=2024.01 new=26a9c1a) because on both starting points the exit code is 0

[20:19] <bisectable6> lizmat, bisect log: https://gist.github.com/f65affb2045f1c85e8d0f15af5601528

[20:19] <bisectable6> lizmat, (2024-05-18) https://github.com/rakudo/rakudo/commit/0a0435d7f8cf8941e4445768a4b94f0683b6afac

[20:20] <lizmat> nine: the param.2 is a generated name to be able to refer to the nameless capture in the proto of sprintf

[20:21] <lizmat> the deparsed code is: proto sub assumed.sprintf (|param.2) { self("\%x", |param.2) 

[20:21] <lizmat> where self refers to the invocant of .assuming

[20:25] <lizmat> the RakuAST::Term::Name thing was inspired by:

[20:26] <lizmat> m: say Q/sub a(|c) { a |c }/.AST.statements.head.expression.body.statement-list.statements.head.expression.args

[20:26] <camelia> rakudo-moar 26a9c1a70: OUTPUT: «RakuAST::ArgList.new(␤  RakuAST::ApplyPrefix.new(␤    prefix  => RakuAST::Prefix.new("|"),␤    operand => RakuAST::Term::Name.new(␤      RakuAST::Name.from-identifier("c")␤    )␤  )␤)␤»

[20:28] <lizmat> nine: if the use of RakuAST::Term::Name is wrong there, please advise what it should be  :-)

[20:30] <nine> looks legit

[20:30] <nine> Though "param.2" is not exactly a valid identifier, I don't think that matters

[20:37] *** librasteve_ left
[20:38] <lizmat> I specifically chose to create an invalid identifier to prevent collisions with actual identifiers

[20:38] <lizmat> and within the context of that sub, it shouldn't matter, I think  ?

[20:40] *** Altai-man joined
[20:41] <nine> As I said, I don't think it matters

[20:41] <lizmat> right

[20:41] *** sena_kun left
[20:49] <lizmat> afk&

[21:59] *** finanalyst joined
[22:08] *** Altai-man left
[22:09] *** sena_kun joined
[22:43] *** finanalyst left
[23:46] *** sena_kun left
