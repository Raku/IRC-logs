[01:40] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5844: Some random attribute access consistency changes

[01:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5844

[05:51] <ab5tract> nine: ah, I see that the evals in that test are now evaling into the same package. I guess this was broken previously? Or else this has been failing for a long time without my noticing :(

[05:54] <ab5tract> Since I'm using `is-run`, I'm really surprised to see ths behavior

[06:48] <nine> ab5tract: even if you leave just one of the is-runs it fails. I'd say it's because that warning code just doesn't know about revision-gated at all. It just sees 3 completely identical signatures

[06:57] <Geth> ¦ rakudo/bootstrap-rakuast: 8 commits pushed by (Stefan Seifert)++

[06:57] <Geth> ¦ rakudo/bootstrap-rakuast: dd33f0c4ad | RakuAST: work around serialization problem with static code object

[06:57] <Geth> ¦ rakudo/bootstrap-rakuast: 808459beda | RakuAST: work around bootstrapping issues with CORE:: lookups

[06:57] <Geth> ¦ rakudo/bootstrap-rakuast: 3305d27110 | RakuAST: work around parse error

[06:57] <Geth> ¦ rakudo/bootstrap-rakuast: bd13deb116 | RakuAST: work around self not found in lambdas declared in BEGIN block

[06:57] <Geth> ¦ rakudo/bootstrap-rakuast: ca118e5d3f | RakuAST: remove workaround needed by the old compiler frontend

[06:57] <Geth> ¦ rakudo/bootstrap-rakuast: c3c6f94cd0 | RakuAST: work around indirect lookups not available early enough in the bootstrap

[06:57] <Geth> ¦ rakudo/bootstrap-rakuast: a33a6818a4 | RakuAST: work around segfaults trying to access a non-existing outer

[06:57] <Geth> ¦ rakudo/bootstrap-rakuast: 938b218196 | Fix bootstrap issues with Buf

[06:58] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/2e4feb5d4d2e...938b218196df

[08:13] <ab5tract> Intriguing… I’m a bit out of the coding vibe at the moment but I will try to take a look. Unfortunately there have been some other holes in the current implementation of the trait

[08:13] <ab5tract> It doesn’t do well on targets that are invoked heavily during bootstrapping, for instance

[08:15] *** [Tux] left
[08:18] *** [Tux] joined
[09:26] *** finanalyst joined
[11:41] <ab5tract> nine: that test file runs perfectly fine in base, so it seems to point more towards a bug in the RakuAST frontend?

[11:51] <nine> Well that's what I said :)

[11:52] <nine> ab5tract: I even posted the specific RakuAST commit that caused the failure: https://irclogs.raku.org/raku-dev/2025-04-07.html#14:15

[12:03] <ab5tract> Yeah, got it

[12:03] <ab5tract> I have an easy mode patch in progress

[12:04] <ab5tract> It just skips this exception check if the proto has a required revision set

[12:04] <ab5tract> But I could also make it a bit more robust… maybe I’ll do that

[12:16] <ab5tract> hmm, that's going to require a bit more thinking than I want to do right now

[12:17] <ab5tract> I'll push the easy win version

[12:17] <nine> cool

[12:31] <Geth> ¦ rakudo/main: 304581eb3c | ab5tract++ | src/Raku/ast/code.rakumod

[12:31] <Geth> ¦ rakudo/main: RakuAST: Fix failing revision gating tests

[12:31] <Geth> ¦ rakudo/main: 

[12:31] <Geth> ¦ rakudo/main: The RakuAST frontend now ignores revision gated

[12:31] <Geth> ¦ rakudo/main: protos and their dispatchees when deciding whether

[12:31] <Geth> ¦ rakudo/main: to throw an exception for multiple candidates of

[12:31] <Geth> ¦ rakudo/main: the same signature.

[12:31] <Geth> ¦ rakudo/main: 

[12:31] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[12:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/304581eb3c

[12:32] * ab5tract just realizes he didn't run the full test suite(s) before pushing

[12:32] <ab5tract> but I can't see how it could harm anything (famous last words)

[12:33] <nine> Looks quite safe indeed

[12:38] <ab5tract> nine: I notice that a fair amount of the remaining tests from t/ are related to macros

[12:39] <ab5tract> are we going to take the time to "finalize" macros, to whatever degree that they need to move out of experimental? or just implement against the current tests and move on?

[12:42] *** JimmyZhuo joined
[12:47] <nine> ab5tract: as I understood it there's no intention of implementing support for the macros that these tests are covering. After all the point of RakuAST has mostly been to enable proper AST based macros.

[12:47] <ab5tract> right, got it

[12:48] <nine> So these tests should just be skipped. I'm actually surprised that they aren't already

[12:48] <ab5tract> I've been assuming they are an "aftermarket add-on"

[12:48] <ab5tract> If we skip those, we boost the stats big time. Corporate says Go for it!

[12:55] <ab5tract> alas, I'm not savvy enough with the test harness stuff to know how to skip

[12:56] <nine> https://docs.raku.org/type/Test#sub_skip

[12:57] <nine> Or rather https://docs.raku.org/type/Test#sub_skip-rest

[13:26] <Geth> ¦ rakudo/skip-exp-macro-tests: d8aed405d6 | ab5tract++ | 6 files

[13:26] <Geth> ¦ rakudo/skip-exp-macro-tests: Skip experimental macro implementation tests

[13:26] <Geth> ¦ rakudo/skip-exp-macro-tests: review: https://github.com/rakudo/rakudo/commit/d8aed405d6

[13:26] <Geth> ¦ rakudo: ab5tract++ created pull request #5846: Skip experimental macro implementation tests

[13:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5846

[13:26] <ab5tract> plan :skip-all seems even more appropriate

[13:27] <ab5tract> however I get issues with the harness: 'Parse errors: No plan found in TAP output'

[13:29] <Geth> ¦ rakudo/skip-exp-macro-tests: 80f51f199d | ab5tract++ | 6 files

[13:29] <Geth> ¦ rakudo/skip-exp-macro-tests: Skip experimental macro implementation tests

[13:29] <Geth> ¦ rakudo/skip-exp-macro-tests: review: https://github.com/rakudo/rakudo/commit/80f51f199d

[13:29] <ab5tract> if we changed the extension to .rakutest.skip ... ?

[13:30] <nine> I don't think you need done-testing if you have a plan and the docs tell you to remove it

[13:31] <Geth> ¦ rakudo/skip-exp-macro-tests: b8c62d96a9 | ab5tract++ | 12 files

[13:31] <Geth> ¦ rakudo/skip-exp-macro-tests: Rename files instead

[13:31] <Geth> ¦ rakudo/skip-exp-macro-tests: review: https://github.com/rakudo/rakudo/commit/b8c62d96a9

[13:32] <ab5tract> nine: yeah, I was already removing them as you wrote that :)

[13:32] <ab5tract> I was just poking around because it feels like this is a problem at the harness level

[13:33] <nine> I guess there would still be compilation errors even with a skip-all

[13:33] <ab5tract> indeed

[13:33] <ab5tract> but renaming works :)

[13:41] <nine> Oh, a BEGIN plan :skip-all would have as well

[13:44] <ab5tract> there we go

[13:44] <ab5tract> this is all in a PR for a reason :)

[13:46] <ab5tract> nine: hmm, it doesnt seem to work that way here..

[13:46] <nine> In what way does it fail?

[13:48] <nine> > RAKUDO_RAKUAST=1 make t/13-experimental/macros-opaque-ast.rakutest

[13:48] <nine> '/usr/bin/perl' -I'/home/nine/rakudo.main/tools/lib' -I'/home/nine/rakudo.main/3rdparty/nqp-configure/lib' t/harness5 --moar --fudge --keep-exit-code --verbosity=1 t/13-experimental/macros-opaque-ast.rakutest

[13:48] <nine> skipped: NYI

[13:48] <nine> Files=1, Tests=0,  1 wallclock secs ( 0.01 usr  0.00 sys +  0.16 cusr  0.02 csys =  0.19 CPU)

[13:48] <ab5tract> as mentioned, `Parse errors: No plan found in TAP output`

[13:48] <nine> +BEGIN plan :skip-all('NYI');

[13:48] <ab5tract> I'm running make test and not seeing any changes

[13:49] <nine> I don't see any BEGIN in the PR

[14:02] *** JimmyZhuo left
[14:18] <ab5tract> I didn't push it because it doesn't seem to work :)

[14:19] <ab5tract> it's easy enough to try locally, for now the .skip extension in the current PR is the only one I've gotten to work

[14:19] <nine> Also means I can't look at the code. What does it say when you run in manually instead of through the harness?

[14:20] <ab5tract> `Some exceptions were thrown in END blocks:`

[14:20] <ab5tract> `X::Multi::NoMatch: Cannot resolve caller Numeric(Pair:D: ); none of these signatures matches:`

[14:23] <ab5tract> Ah, I think I see the problem

[14:25] <ab5tract> > ./rakudo-m -Ilib t/13-experimental/macros.rakutest

[14:25] <ab5tract> 1..skip-all	True	RakuAST macros supercede the macros described in these tests

[14:25] <ab5tract> ===SORRY!=== Error while compiling t/13-experimental/macros.rakutest

[14:27] <ab5tract> Yeah, that's all the time I can put into it today, unfortunately

[14:27] <ab5tract> At least we got the revision gated stuff sorted

[14:45] <Geth> ¦ rakudo/main: fd7d18088c | (Stefan Seifert)++ | 8 files

[14:45] <Geth> ¦ rakudo/main: RakuAST: skip macro tests if running on RakuAST

[14:45] <Geth> ¦ rakudo/main: 

[14:45] <Geth> ¦ rakudo/main: There are no plans to implement the kind of macros described in these

[14:45] <Geth> ¦ rakudo/main: tests given that RakuAST's reason for existing is to provide a way to

[14:45] <Geth> ¦ rakudo/main: proper AST based macros.

[14:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fd7d18088c

[14:45] <nine> ab5tract: can you give this ^^^ a try? It....just works :D

[14:49] <japhb> nine: Misspelled supersede  :-)

[14:49] <nine> I thought it looks fishy but I trusted that native speaker I copied it from :D

[14:50] <japhb> Nah, we native speakers are lazier and more typo-prone.  ;-)

[14:52] <[Coke]> donaldh: there is a #raku-doc btw

[16:46] *** finanalyst left
[18:01] *** sena_kun joined
[18:03] *** sena_kun left
[18:04] *** sena_kun joined
[18:06] *** sena_kun left
[18:07] *** sena_kun joined
[19:02] *** finanalyst joined
[19:49] *** lizmat_ left
[19:50] *** lizmat joined
[21:59] <donaldh> thanks [Coke]++

[22:03] <[Coke]> thanks for the PR!

[22:06] <donaldh> The #raku-doc channel is not well advertised, https://raku.org/community/ only mentions #raku

[22:14] *** sena_kun left
[22:19] *** donaldh_ joined
[22:20] <[Coke]> releasable6: next

[22:20] <releasable6> [Coke], Next release in ≈9 days and ≈20 hours. 2 blockers. 233 out of 233 commits logged

[22:20] <releasable6> [Coke], Details: https://gist.github.com/26b4ab63c8d7dd76be827e1ac73dee70

[22:21] <[Coke]> doesn't advertise this channel, either. :)

[22:22] <[Coke]> I think the thought is get folks to raku, and invite them elsewhere if appropriate.

[22:22] *** donaldh_ left
[22:22] <jdv> why do they need advert?

[22:22] <[Coke]> but also a PR to the raku.org repo also welcome. ;)

[22:23] <[Coke]> I don't think we want to advert raku-dev, it helps to have a little privacy by obscurity.

[22:24] <jdv> i mean anyone new makes sense in raku and can move on from there.  nice to keep traffic more focused maybe.

[22:44] <[Coke]> agreed

