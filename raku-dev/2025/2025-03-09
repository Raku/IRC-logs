[00:16] *** sena_kun left
[00:46] <lizmat> nine: I think I found the general area where this needs changes... will look at it in the morning

[07:44] *** finanalyst joined
[07:53] <finanalyst> I'm trying to create a docker container using croservices/cro-http-web. I'm getting errors. Are the links bad on docker hub?

[09:53] <lizmat> I haz no idea

[09:54] <lizmat> nine: https://gist.github.com/lizmat/47db42f10642c06fbde165ce901602ee  feels that it should be the fix for the T @b issue, but isn't  :-(

[09:58] <nine> Shouldn't you make it use the full binder instead?

[10:03] <lizmat> probably, but am at a loss to make it do that?

[10:04] <lizmat> I was merely going by code similarity, not grokking the bigger view

[10:05] <nine> look for needs-full-binder

[10:07] * lizmat looks

[10:20] <Geth> ¦ rakudo/main: 49da3628d1 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[10:20] <Geth> ¦ rakudo/main: RakuAST: fix accessing implicit %_ in methods

[10:20] <Geth> ¦ rakudo/main: 

[10:20] <Geth> ¦ rakudo/main: The placeholder parameter will be added to the method before the

[10:20] <Geth> ¦ rakudo/main: signature gets its BEGIN time, so the IMPL-HAS-PARAMETER check will

[10:20] <Geth> ¦ rakudo/main: fail. Luckily we *know* that methods get a %_.

[10:20] <Geth> ¦ rakudo/main: 

[10:20] <Geth> ¦ rakudo/main: Fixes: method foo() { dd %_ }

[10:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/49da3628d1

[10:33] <lizmat> nine: updated gist, copied code from the full-binder handling

[10:33] <lizmat> changes the error to "Method T.ACCEPTS not found" instead of inconsistent bind result

[10:41] <nine> No, the point is to not generate any signature lowering code at all in this case. You need to detect this situation early enough so :needs-full-binder gets passed to IMPL-QAST-BINDINGS

[10:48] <lizmat> ack

[11:00] *** finanalyst left
[11:00] *** finanalyst joined
[11:08] *** finanalyst left
[11:29] *** JimmyZhuo joined
[11:30] <JimmyZhuo> Cannot put required parameter $b after optional parameters

[11:30] <JimmyZhuo> at -e:1

[11:30] <JimmyZhuo> ------> sub wrong2 ($a = 1, $b<HERE>) {...}

[11:30] <JimmyZhuo>     expecting any of:

[11:30] <JimmyZhuo>         constraint

[11:30] <JimmyZhuo> E:\OpenSource\Rakudo>rakudo-m -e "sub wrong2 ($a = 1, $b) {...}"

[11:30] <JimmyZhuo> ===SORRY!=== Error while compiling -e

[11:30] <JimmyZhuo> Cannot put required parameter $b after optional parameters

[11:30] <JimmyZhuo> at -e:1

[11:30] <JimmyZhuo> ------> sub wrong2 ($a = 1, $b<HERE>) {...}

[11:30] <JimmyZhuo>     expecting any of:

[11:30] <JimmyZhuo>         constraint

[11:30] <JimmyZhuo> How to get the "------> sub wrong2 ($a = 1, $b<HERE>) {...}" infomation in RAKU AST?

[11:31] <JimmyZhuo> seems the check is moved from action to "PERFORM-CHECK"

[11:34] <lizmat> nine: gist updated, the error is changed, but is this the right approach?

[11:53] <nine> The point was more to get $needs-full-binder passed to IMPL-QAST-BINDINGS in the first place, so it doesn't have to check anything else anymore

[11:55] <nine> JimmyZhuo: yes, a PERFORM-CHECK method needs to detect this condition before we even generate QAST. Most likely on RakuAST::Signature

[11:56] <lizmat> nine: understood

[12:12] *** bartolin left
[12:13] *** bartolin joined
[12:37] <Geth> ¦ rakudo/main: 3a6c59c0ce | (Elizabeth Mattijsen)++ | src/core.c/core_epilogue.rakumod

[12:37] <Geth> ¦ rakudo/main: Backport RakuAST::Utils fixes to core

[12:37] <Geth> ¦ rakudo/main: 

[12:37] <Geth> ¦ rakudo/main: - Fixes handling of generics in .assuming if they are not curried

[12:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a6c59c0ce

[12:45] <nine> I wonder why those use string comparisons instead of proper type checks

[12:51] <lizmat> I wanted to make sure they won't break once we start working on Raku/Metamodel/Foo  ?

[12:53] <lizmat> meanwhile, I got the fix for ::T handling, spectesting now

[13:00] <lizmat> meh.... breaks a number of other tests  :-(

[13:02] <lizmat> nine: gist updated, do you see anything obviously wrong 

[13:02] <lizmat> ?

[13:07] <lizmat>  nine: realized the reason why checks on names

[13:07] <lizmat> m: dd Perl6::Metamodel::ParametricRoleGroupHOW

[13:07] <camelia> rakudo-moar 3a6c59c0c: OUTPUT: «Could not find symbol '&ParametricRoleGroupHOW' in 'GLOBAL::Perl6::Metamodel'␤  in block <unit> at <tmp> line 1␤␤»

[13:08] <Geth> ¦ rakudo/main: 7cba23e34d | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[13:08] <Geth> ¦ rakudo/main: RakuAST: simplify Call::Method code for qualified calls

[13:08] <Geth> ¦ rakudo/main: 

[13:08] <Geth> ¦ rakudo/main: No need to do all that string manipulation business just to end up with

[13:08] <Geth> ¦ rakudo/main: non-standard name structures.

[13:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7cba23e34d

[13:08] <lizmat> m: dd Perl6::Metamodel::CoercionHOW

[13:08] <camelia> rakudo-moar 3a6c59c0c: OUTPUT: «Could not find symbol '&CoercionHOW' in 'GLOBAL::Perl6::Metamodel'␤  in block <unit> at <tmp> line 1␤␤»

[13:08] <nine> m: Metamoel::CoercionHOW

[13:08] <camelia> rakudo-moar 3a6c59c0c: OUTPUT: «Could not find symbol '&CoercionHOW' in 'GLOBAL::Metamoel'␤  in block <unit> at <tmp> line 1␤␤»

[13:08] <nine> m: Metamodel::CoercionHOW

[13:08] <camelia> rakudo-moar 3a6c59c0c: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant value Metamodel::CoercionHOW in sink context (line 1)␤»

[13:08] <lizmat> ah?

[13:08] <lizmat> hmmm...

[13:09] <nine> It's just called differently in user space code

[13:09] <lizmat> TIL

[13:09] <nine> Outside Perl6::ModuleLoader there's no good reason for comparing type names

[13:09] <lizmat> ack

[13:10] <nine> Even if we want to rename those types at some point (and it'd just be rather pointless cosmetics) it's just a perl -p -i -e 's/Perl6::Metamodel/Raku::Metamodel/g' on the whole codebase anyway

[13:11] <nine> Ironically the only cases that this wouldn't catch *are* the ones where people do some string manipulation business with names

[13:12] <lizmat> understood  :-)

[13:15] <lizmat> nine: see anything obviously wrong with the updated gist ?

[13:17] <nine> lizmat: no looks fine. I'm a bit surprised though. Does our lowered code really not support any parametric types at all?

[13:18] <lizmat> well, I was just following Timo's lead on the fix

[13:18] <lizmat> for the legacy grammar

[13:19] <lizmat> Timo's judgement was that it did not support parametric types for that case anyway

[13:19] <lizmat> m: :(::T $a, T @b)

[13:19] <camelia> rakudo-moar 7cba23e34: ( no output )

[13:19] *** sena_kun joined
[13:19] <nine> I'd be extremely surprised if we didn't support e.g. sub foo(int @a) 

[13:20] <lizmat> note that :(::T $a, T $b)   was find

[13:20] <lizmat> *fine

[13:20] <lizmat> but things turn for the worse with :(::T $a, T @b, T %c)

[13:21] <lizmat> aka, generically typed non-scalars

[13:22] <nine> That's not what the gist is checking for though

[13:23] <nine> Look at the context in which the original code is placed: https://github.com/rakudo/rakudo/commit/0bcab7a86f

[13:24] <lizmat> it's checking whether the parameter is parametric

[13:25] <lizmat> that's what the gist also does, no ?

[13:25] <nine> in what context?

[13:26] <lizmat> ah, you mean: $is_generic && !$is_coercive  ?

[13:26] <nine> The comment says "Parametric types that are generic" the commit message says "with parametric generic types" and 2 lines above that code is an "if $is_generic && !$is_coercive"

[13:26] <lizmat> right

[13:27] <nine> At least this is a great show case for why it sucks having to port fixes from one branch to the other when the author of the original didn't bother.

[13:29] <lizmat> perhaps, but I'm glad for all fixes, great or small or incomplete

[13:31] <nine> I'm not. I need to get this RakuAST thing done. Everything that makes it take longer just hurts.

[13:32] <Geth> ¦ rakudo/main: aff6eaf3e2 | (Elizabeth Mattijsen)++ | src/core.c/core_epilogue.rakumod

[13:32] <Geth> ¦ rakudo/main: Use proper typechecks in .assuming logic

[13:32] <Geth> ¦ rakudo/main: 

[13:32] <Geth> ¦ rakudo/main: nine++ for the nudge

[13:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/aff6eaf3e2

[13:38] <nine> What's the point of an "is default(Nil)" in a variable that's immediately initialized anyway? my $old-handle is default(Nil) = $!active-handle

[13:39] <lizmat> m: my $a is default(Nil) = 42;  $a = Nil;  say $a

[13:39] <camelia> rakudo-moar 7cba23e34: OUTPUT: «Nil␤»

[13:40] <lizmat> it might get Nil assigned later, and then needs to produce Nil instead of the default "Any" (if no "is default" was specified)

[13:45] <Geth> ¦ rakudo/main: 15e4299ab1 | (Elizabeth Mattijsen)++ | src/Raku/ast/signature.rakumod

[13:45] <Geth> ¦ rakudo/main: RakuAST: provide ::T $a, T @a fix

[13:45] <Geth> ¦ rakudo/main: 

[13:45] <Geth> ¦ rakudo/main: Basically the RakuAST equivalent of 0bcab7a86f.  Nine++ for

[13:45] <Geth> ¦ rakudo/main: guidance

[13:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/15e4299ab1

[13:46] <Geth> ¦ roast: 4d8ee0422f | (Elizabeth Mattijsen)++ | S06-currying/misc.t

[13:46] <Geth> ¦ roast: Add test for :(::T $a, T @b) handling

[13:46] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/4d8ee0422f

[13:57] <Geth> ¦ roast: 44594f7309 | (Elizabeth Mattijsen)++ | S06-currying/misc.t

[13:57] <Geth> ¦ roast: Add some more currying tests

[13:57] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/44594f7309

[13:57] <lizmat> nine: ^^ yes, they pass on RakuAST  :-)

[14:01] <lizmat> afk for a few hours&

[14:05] *** JimmyZhuo left
[14:33] <timo> i didn't know rakuast had an equivalent to the lowerer

[14:34] <nine> Why wouldn't it?

[14:34] <nine> Everything from Perl6/World and Perl6/Actions has to go somewhere

[14:49] <timo> lowering of signature binding could potentially have been postponed since it's kind of an optimization more than something that gets more tests to run. though priorities don't usually work rigidly like that

[14:50] <timo> we don't have anything in place to alert us if newly written tests fail with rakuast on, right?

[14:52] <nine> no

[15:00] <timo> only that it explodes when your "make spectest" pulls fresh tests and you have to wonder why the failures went up

[15:01] <timo> do you have something like a "good first issue" for me to look at in terms of RakuAST right now?

[15:02] <nine> https://irclogs.raku.org/raku-dev/2025-03-07.html#11:09

[15:09] <timo> cool thanks

[16:36] *** rakkable left
[16:36] *** rakkable joined
[17:22] *** librasteve_ joined
[17:25] <lizmat> m: BEGIN my &a = &max.assuming(42)   

[17:25] <camelia> rakudo-moar 15e4299ab: ( no output )

[17:26] <lizmat> looking at the QAST of ^^ I am surprised I see QAST generated for the &max.assuming(42) part

[17:27] <lizmat> I sorta expected to just see a WVAL for the sub, with all of the QAST needed to create the sub discarded

[17:37] <nine> That BEGIN block may contain nested blocks that need to survive

[17:38] <Geth> ¦ rakudo/main: e2ec3a2d09 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[17:38] <Geth> ¦ rakudo/main: RakuAST: support multiple slurpy parameters on routines

[17:38] <Geth> ¦ rakudo/main: 

[17:38] <Geth> ¦ rakudo/main: Fixes: sub foo(**@a, |c) { }

[17:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e2ec3a2d09

[17:40] <timo> is the optimizer able to throw these out? if not, probably not a good time to put that in, what with rakuast being around the corner

[17:40] <lizmat> yeah, indeed.... :-)

[17:40] <lizmat> don't spend time on that  :-)

[18:38] *** finanalyst joined
[19:04] *** notna joined
[19:49] <Geth> ¦ rakudo/main: d6d385952a | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[19:49] <Geth> ¦ rakudo/main: RakuAST: use low level ops for assignment

[19:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d6d385952a

[19:49] <Geth> ¦ rakudo/main: 1132925ea4 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[19:49] <Geth> ¦ rakudo/main: RakuAST: move check for multiple slurpies to BEGIN time

[19:49] <Geth> ¦ rakudo/main: 

[19:49] <Geth> ¦ rakudo/main: CHECK may not have been performed when we generate QAST at BEGIN time,

[19:49] <Geth> ¦ rakudo/main: e.g. for role bodies.

[19:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1132925ea4

[19:49] <Geth> ¦ rakudo/main: 1fd7db7f48 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[19:49] <Geth> ¦ rakudo/main: RakuAST: fix using declarations of native variables as expressions

[19:49] <Geth> ¦ rakudo/main: 

[19:49] <Geth> ¦ rakudo/main: Fixes: (my str $a, my str $b) = "a:b".split: ":"

[19:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1fd7db7f48

[19:49] <nine> 1272 (despite not even working on spectests)

[20:34] *** notna left
[20:53] *** notna joined
[20:54] *** notna left
[20:55] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5806: RakuAST: throw correct exception for disallowed adverbs when augmenting

[20:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5806

[21:26] <Geth> ¦ rakudo/main: 672126d45b | (Daniel Green)++ | src/Raku/ast/package.rakumod

[21:26] <Geth> ¦ rakudo/main: RakuAST: throw correct exception for disallowed adverbs when augmenting

[21:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/672126d45b

[21:26] <Geth> ¦ rakudo/main: 0fb4b32a60 | niner++ (committed using GitHub Web editor) | src/Raku/ast/package.rakumod

[21:26] <Geth> ¦ rakudo/main: Merge pull request #5806 from MasterDuke17/throw_correct_exception_when_using_disallowed_adverbs_when_augmenting

[21:26] <Geth> ¦ rakudo/main: 

[21:26] <Geth> ¦ rakudo/main: RakuAST: throw correct exception for disallowed adverbs when augmenting

[21:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0fb4b32a60

[22:37] *** finanalyst left
[23:22] *** librasteve_ left
