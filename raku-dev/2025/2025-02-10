[00:20] *** vrurg left
[00:20] *** vrurg_ joined
[05:54] *** guifa left
[06:32] *** camelia left
[06:34] *** camelia joined
[07:36] *** [Tux] left
[07:43] *** [Tux] joined
[08:51] *** sena_kun joined
[10:13] *** sena_kun left
[11:41] *** rakkable left
[11:41] *** rakkable joined
[11:59] <timo> i saw that the latest version of python got a method to BaseException called "add_note" where you can attach a string to an exception that will be printed below the traceback when the exception is outputted, as well as a getter for the notes that are on an exception

[12:00] <timo> that seems kind of useful to have? though maybe it'd be nice to have something structured rather than just strings

[12:00] <timo> especially if you have a different exception printer, like one that outputs exceptions as json

[12:01] <timo> also i stumbled upon python's `except*` syntax, which lets you react to a type of exception that's contained inside of an ExceptionGroup

[12:02] <lizmat> isn't that what "does" does ?

[12:02] <lizmat> $exception does annotation("foobar"

[12:03] <lizmat> with  role annotation { $.annotation }

[12:03] <lizmat> and then do $exception.?annotation ?

[12:16] <timo> that could do. then the annotation role would do something so that the annotations also show up in the message presumably

[12:28] <lizmat> well, yeah, the error reporting would need to do the if self.?annotation -> $annotation { ... } bit

[12:34] <timo> so it would probably want to be part of rakudo, then? if it is meant to be useful

[12:35] <lizmat> well, the $exception.?annotation bit can be added without any problems

[12:36] <lizmat> whether an "annotation" role should be added to the core, I'm less sure

[12:36] <lizmat> although any lexically defined role would take precedence of on in the core...  so  ...hmmm

[12:37] <lizmat> fwiw, such an annotation role would be generally usable

[12:37] <timo> not very useful to add an annotation role if it isn't displayed unless there's code everywhere to check for it

[12:37] <timo> also, adding more than a single annotation would be good, so adding each annotation with "does" is maybe not the best thing

[12:38] <lizmat> m: role annotation { has Str $.annotation }; my $a = "foo" but annotation("bar'); say $a.annotation

[12:38] <camelia> rakudo-moar de08b4c67: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot use variable $a in declaration to initialize itself␤at <tmp>:1␤------>  $a = "foo" but annotation("bar'); say $<HERE>a.annotation␤    expecting any of:␤        argument list␤        double qu…»

[12:38] <timo> instead, Exception could have a method like "annotate" or even "add-note" that mixes in the annotation role to self if it's not there yet and otherwise just adds the thing

[12:38] <lizmat> m: role annotation { has Str $.annotation }; my $a = "foo" does annotation("bar'); say $a.annotation

[12:38] <camelia> rakudo-moar de08b4c67: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot use variable $a in declaration to initialize itself␤at <tmp>:1␤------> $a = "foo" does annotation("bar'); say $<HERE>a.annotation␤    expecting any of:␤        argument list␤        double qu…»

[12:38] <timo> your quotes are mismatched

[12:39] <lizmat> m: role annotation { has Str $.annotation }; my $a = "foo" does annotation("bar"); say $a.annotation

[12:39] <camelia> rakudo-moar de08b4c67: OUTPUT: «bar␤»

[12:39] <lizmat> m: role annotation { has Str $.annotation }; my $a = "foo" but annotation("bar"); say $a.annotation

[12:39] <camelia> rakudo-moar de08b4c67: OUTPUT: «bar␤»

[12:40] <timo> m: role annotation { has Str $.annotation; only method message() { callsame ~ " ($.annotation)" } }; my $e = X::AdHoc.new("blargh!") but annotation("testing"); say $e.message

[12:40] <camelia> rakudo-moar de08b4c67: OUTPUT: «Default constructor for 'X::AdHoc' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[12:41] <timo> m: role annotation { has Str $.annotation; only method message() { callsame ~ " ($.annotation)" } }; my $e = X::AdHoc.new(message => "blargh!") but annotation("testing"); say $e.message

[12:41] <camelia> rakudo-moar de08b4c67: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in method message at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:41] <timo> well that's not right

[12:41] <timo> m: role annotation { has Str $.annotation; only method message() { callsame ~ " ($.annotation)" } }; my $e = X::AdHoc.new(payload => "blargh!") but annotation("testing"); say $e.message

[12:41] <camelia> rakudo-moar de08b4c67: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in method message at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:42] <timo> m: role annotation { has Str $.annotation; only method message() { callsame() ~ " ($.annotation)" } }; my $e = X::AdHoc.new(payload => "blargh!") but annotation("testing"); say $e.message

[12:42] <camelia> rakudo-moar de08b4c67: OUTPUT: «blargh! (testing)␤»

[12:42] <timo> m: role annotation { has Str $.annotation; only method message() { callsame() ~ " ($.annotation)" } }; my $e = X::OutOfRange.new() but annotation("testing"); say $e.message

[12:42] <camelia> rakudo-moar de08b4c67: OUTPUT: «Argument out of range. Is: <unknown>, should be in <unknown> (testing)␤»

[12:43] <timo> that doesn't seem too bad at first glance

[12:44] <lizmat> would probably add a newline, but yeah

[12:44] <lizmat> with that, it could be an ecosystem module

[12:44] <timo> did we ever have a "dba" that could be used to make stack traces that are more human-friendly? i seem to recall ... something

[12:45] * lizmat doesn't recall

[12:49] <timo> it might have been something that can go into grammars, in the long-ago-times. maybe in STD?

[12:52] <timo> i wonder if raku would benefit from something like ExceptionGroup, or if it makes more sense to use Failure objects inside a structure for this purpose. though then there's nothing cheap that can check "is anything in this arbitrarily deeply nested structure of arrays and hashes a Failure?". in general, that strikes me as something that would need careful speccing

[12:52] <lizmat> ah, yes, there's definitely a "dba"  "doing business as" annotation there, at least in the legacy grammar

[12:52] <timo> ExceptionGroup is an exception by itself, so it is thrown and that's how it reaches your exception handlers

[12:53] <lizmat> I don't think the new Raku grammar has / needs as much, as the RakuAST tree is basically the annotation

[12:53] <timo> we do have X::Comp::Group, but that's obviously for compile errors and warnings

[12:53] <lizmat> yeah, and there's also something for erorrs thrown inside a thread, to be rethrown somewhere else ?

[12:54] <timo> there is where?

[12:54] <timo> i think you can pass an "uncaught exception handler" to Thread.new or so? and for start{}-ed stuff there's of course the Promise that can be rejected with an exception

[12:56] <timo> OK i gotta run an errand that will take me a frustrating amount of driving time

[12:56] <lizmat> drive safely!

[12:56] <lizmat> ttyl

[12:56] <timo> always :)

[14:04] <lizmat> rakkable: eco-provides frobnicate

[14:04] <rakkable> lizmat, Looking for 'frobnicate' using 'eco-provides', please be patient!

[14:04] <rakkable> lizmat, Found 8 lines in 4 files (4 distributions):

[14:04] <rakkable> lizmat, https://gist.github.com/9d8489cbfa63787c6125c574138406fe

[14:08] *** rakkable left
[14:08] *** rakkable joined
[14:09] <lizmat> rakkable: eco-provides frobnicate

[14:09] <rakkable> lizmat, Looking for 'frobnicate' using 'eco-provides', please be patient!

[14:09] <rakkable> lizmat, Found 8 lines in 4 files (4 distributions):

[14:09] <rakkable> lizmat, https://gist.github.com/6fd78c8a51dcf621f3b281676d439653

[14:10] <lizmat> rakkable: help

[14:10] <rakkable> lizmat, Rakking on #raku-dev with Raku module IRC::Client::Plugin::Rakkable 0.0.1

[14:10] <rakkable> lizmat, Currently supported: eco-code | eco-doc | eco-provides | eco-tests | eco-scripts | unicode query [rak args]

[14:21] *** rakkable left
[14:21] *** rakkable joined
[14:26] *** rakkable left
[14:26] *** rakkable joined
[14:27] <lizmat> rakkable: help

[14:27] <rakkable> lizmat, Rakking on #raku-dev with Raku module IRC::Client::Plugin::Rakkable 0.0.1

[14:27] <rakkable> lizmat, Currently supported: eco-code | eco-doc | eco-provides | eco-tests | eco-scripts | unicode query [rak args]

[14:27] <rakkable> lizmat, Please put any suggestions / bug reports in https://github.com/lizmat/IRC-Client-Plugin-Rakkable/issues.  Thank you!

[14:35] <jdv> be neat if there was a man page or some sort of longer form doc

[14:36] <lizmat> I've only got 10 fingers  :-)

[14:36] <lizmat> but you're right  :-)

[14:39] <jdv> it just popped into my head when i realized idk what that help output really means.  but i don't mean to make work for anyone else.  its fine:)

[14:44] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/02/10/2025-06-its-a-bot/

[16:10] *** vrurg joined
[16:10] *** vrurg_ left
[16:23] *** vrurg left
[16:25] *** vrurg joined
[16:47] <timo> my first thought about the slow grammar compilation is that it's probably making a tremendously large NFA for LTM purposes? i don't immediately see many things that terminate LTM

[16:49] <timo> oh actually <td> might do

[16:49] <timo> oh those are also all tokens, and tokens have ratchet don't they?

[16:51] <lizmat> I think so ?

[16:52] <timo> actually, td doesn't terminate LTM because <Comment> doesn't, and that's one of the options

[16:55] <timo> Stage parse      :   0.316 - with a {} before the contents of "token td"

[16:55] <timo> Stage parse      :   1.753 - without changes from the code on glot.io

[16:58] <timo> 0.901 vs 11.587 after uncommenting RelationalExpression and one of the two EqualityExpressions

[16:59] <timo> uncommented a few more, ram is rising steadily as it compiles ...

[17:01] <timo> 81.378 but now i actually had the {} in td, not sure what exactly happened there. presumably a path that lets you go through different things without hitting a td

[18:22] *** sena_kun joined
[18:55] <Geth> ¦ nqp/main: e76ec6cc4b | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[18:55] <Geth> ¦ nqp/main: Bump MoarVM to get string utf8 decode tweak

[18:55] <Geth> ¦ nqp/main: 

[18:55] <Geth> ¦ nqp/main: MasterDuke++

[18:55] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/e76ec6cc4b

[19:05] *** rakkable left
[19:05] *** rakkable joined
[19:05] <lizmat> eco-code terminal

[19:05] <lizmat> rakkable: eco-code terminal

[19:05] <rakkable> lizmat, Looking for 'terminal' using 'eco-code', please be patient!

[19:06] <rakkable> lizmat, Found 1040 lines in 206 files (101 distributions):

[19:06] <rakkable> lizmat, https://gist.github.com/977fda533e8e89ac92ca595902171982

[19:06] <lizmat> lucs: ^^

[19:18] <timo> i've been letting it run, it'? now at 2:15h run time, 32.5 gigabyte ram usage

[19:19] <lizmat> wow

[19:27] *** rakkable left
[19:27] *** rakkable joined
[19:41] *** rakkable left
[19:41] *** rakkable joined
[19:48] <timo> https://gist.github.com/timo/3f3926c6e42b68f3c8731072ba747991 here's a stack trace i grabbed at a random spot

[19:51] <lizmat> 832 -> 951 ad infinitum

[19:51] <lizmat> hmmm

[19:52] <timo> yeah it recursively merges substates of NFAs together

[19:52] <timo> mergesubrule / mergesubstates

[19:53] <timo> here i have an array with 158627822 entries

[19:53] <lizmat> that's.... a lot  :-)

[19:54] <timo> the first entry is also an NQPArray

[19:55] <timo> and it looks like it's spending a huge amount of time in GC at this point

[19:58] <timo> or that could just be where it's easiest to hit when pressing ctrl-c

[20:00] <lizmat> in any case, a keeper in the sense of: a potentially golfable case of grammar slowness

[20:00] <lizmat> meh

[20:01] <timo> i'd assume this is also related to the reason why we have EXPR and not a classical recursive descent parser for operator precedence parsing

[20:02] <lizmat> possibly

[20:02] <timo> after this whole merging of stuff is done, there's also going to be a run of the optimizer on this NFA

[20:02] <timo> haha. 96% of time spent in VMArray_gc_mark

[20:03] <lizmat> having that plough through 32G of data, isn't going to go fast either

[20:03] <timo> nope.

[20:05] <timo> i have decided against outputting the states to a .dot and rendering it to a png

[20:05] <timo> because i only have a few terabytes of hard drive space left :P

[20:11] <lizmat> yeah, that feels... wise  :-)

[20:11] <timo> i freed up a lot of ram and i'm going to let it continue running to see how it changes in its behaviour

[20:12] <lizmat> you're feeling adventurous !  :-)

[20:15] <timo> maybe it could be good to have something like a little check with a before/after timing of creating an NFA and if it's a very long time, output some information, like what NFAs are being merged together and why

[20:15] <timo> or a check in the merge functionality when it goes above 500k states or 1m states

[20:16] <lizmat> well, if it survives the legacy and Raku grammars...  those are among the largest...

[20:16] <lizmat> right?

[20:16] <timo> well, their NFAs aren't, i don't think?

[20:18] <timo> this mechanism would help figure out when something goes into "accidentally bonkers" territory

[20:19] <lizmat> would you want to do this in spesh, or in the NFA mechanism itself, keeping counters and such ?

[20:19] <timo> neither

[20:19] <timo> this would be in nqp

[20:19] <timo> oh the cpu usage just dropped off a whole lot

[20:20] <lizmat> OOM ?

[20:20] <timo> something about its behaviour is changing

[20:20] <timo> i still have 18 gig "available"

[20:21] <timo> i think it might have taken something out of swap

[20:22] <timo> in any case, cpu usage went up again soon after i mentioned that

[20:24] *** rakkable left
[20:24] *** rakkable joined
[20:36] <Geth> ¦ rakudo/main: 553bd7566c | (Elizabeth Mattijsen)++ | 2 files

[20:36] <Geth> ¦ rakudo/main: Make $() work properly on scalar values

[20:36] <Geth> ¦ rakudo/main: 

[20:36] <Geth> ¦ rakudo/main: - let Mu.item return a container if there is none yet

[20:36] <Geth> ¦ rakudo/main: - make sub item() actually return containers (is raw was missing)

[20:36] <Geth> ¦ rakudo/main: - make the sub item version call the method item, for consistency

[20:36] <Geth> ¦ rakudo/main: 

[20:36] <Geth> ¦ rakudo/main: All spectest clean.

[20:36] <Geth> ¦ rakudo/main: <…commit message has 14 more lines…>

[20:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/553bd7566c

[20:48] <lizmat> m: sub a($x is rw) { $x++; dd $x; $x }; a($[1,2])

[20:48] <camelia> rakudo-moar de08b4c67: OUTPUT: «Parameter '$x' expects a writable container (variable) as an argument,␤but got '[1 2]' (Array) as a value without a container.␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:48] <lizmat> that error feels wrong?

[20:48] <lizmat> m: dd $[1,2]

[20:48] <camelia> rakudo-moar de08b4c67: OUTPUT: «$[1, 2]␤»

[20:58] <Geth> ¦ rakudo/main: e34b767fd7 | (Elizabeth Mattijsen)++ | 4 files

[20:58] <Geth> ¦ rakudo/main: Remove now unnecessary .item methods

[20:58] <Geth> ¦ rakudo/main: 

[20:58] <Geth> ¦ rakudo/main: The same semantics now apply to **all** objects, not just to

[20:58] <Geth> ¦ rakudo/main: Iterables, Captures and QuantHashes

[20:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e34b767fd7

[21:00] *** vrurg left
[21:01] *** vrurg joined
[21:27] <lucs> lizmat: Oh, eh, thanks :)

[21:28] <lizmat> yeah, I think it was down at the moment you tried it, it didn't generate a gist afaics

[21:29] <lucs> I was just wondering roughly what it does.

[21:30] <lucs> Now I see what eco-code does, eh.

[21:30] *** rakkable left
[21:30] *** rakkable joined
[21:31] <lizmat> rakkable: help

[21:31] <rakkable> lizmat, Help sections available: eco-code eco-doc eco-provides eco-scripts eco-tests

[21:31] <rakkable> lizmat, unicode version.

[21:31] <lizmat> rakkable: help eco-code

[21:31] <rakkable> lizmat, Search all of the code of the active distributions in the ecosystem

[21:31] <rakkable> lizmat, which is the sum of 'eco-provides', 'eco-tests', 'eco-scripts'

[21:31] <lucs> Aha, gotcha.

[21:31] <lizmat> added a little help section

[21:32] <lizmat> rakkable: unicode heart

[21:32] <rakkable> lizmat, Looking for 'heart' using 'unicode', please be patient!

[21:32] <rakkable> lizmat, Found 52 matches

[21:32] <rakkable> lizmat, https://gist.github.com/d3393f1c4a6fc692923f6e405e354c6f

[21:32] <lizmat> if you're ever in need of a heart symbol  :-)

[21:33] <lucs> Oh, nice.

[21:35] <lucs> Hmm... "Knight" of hearts is "C", since K is already taken by King.

[21:36] <lucs> Probably "C" for French "Cavalier".

[21:36] <lucs> In chess problems, it's the letter "S" (for German "Springer") that was chosen.

[21:36] <lucs> (In the English speaking community anyway.)

[21:37] <lucs> Now, with gazillions of chess players online, it's moving to "N" (they know nothing of over a century of chess problems history).

[21:37] <lizmat> hehe

[22:16] *** guifa joined
[22:44] *** librasteve_ joined
[23:07] *** guifa left
[23:09] *** guifa joined
[23:25] *** sena_kun left
[23:32] *** guifa left
[23:53] *** guifa joined
