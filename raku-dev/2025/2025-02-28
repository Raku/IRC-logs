[00:14] *** sena_kun left
[02:10] <jdv> nightwish in berlin in 2015.  good times.

[04:03] *** guifa left
[09:22] *** finanalyst joined
[09:25] *** sena_kun joined
[09:57] <nine> jdv: wrong window? Anyway sounds fantastic indeed :)

[09:58] <nine> m: ub foo(Int &bar:()) { }

[09:58] <camelia> rakudo-moar 101f50557: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤You can't adverb :()␤at <tmp>:1␤------> ub foo(Int &bar:()<HERE>) { }␤»

[09:58] <nine> m: sub foo(Int &bar:()) { }

[09:58] <camelia> rakudo-moar 101f50557: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Redeclaration of return type for '&bar:()' (previous return type was␤Int ).␤at <tmp>:1␤------> sub foo(Int &bar:()<HERE>) { }␤»

[09:59] * nine thinks that syntax can't be in use very much...

[10:04] *** djinni` left
[10:16] *** djinni` joined
[10:28] *** sena_kun left
[10:35] <lizmat> so, some of the .assuming tests check the signature that is generated

[10:36] <lizmat> for instance:   sub a(::T $a, T $b).assuming(42)    expects the generated signature to be :($b)

[10:37] <lizmat> the code that I'm working on using RakuAST, generates a signature:   :(Int $b)

[10:37] <lizmat> do we agree that that new signature is more correct than the old one?

[10:38] <lizmat> because currying with an Int as the first argument, forces ::T to become Int, and thus describes the constraint on the second argument ?

[10:39] <lizmat> so I'm inclined to fix those tests

[10:46] <Geth> ¦ rakudo/main: 6 commits pushed by (Stefan Seifert)++

[10:46] <Geth> ¦ rakudo/main: 84ef3bbbb8 | RakuAST: fix declaration of callable params with signatures

[10:46] <Geth> ¦ rakudo/main: 8f532679bb | RakuAST: implement sub signature type checking

[10:46] <Geth> ¦ rakudo/main: 5c3522237b | RakuAST: fix named arguments with signature constraints

[10:46] <Geth> ¦ rakudo/main: 089fe248b5 | RakuAST: fix signature constraint on anything but the first parameter

[10:46] <Geth> ¦ rakudo/main: 8c6284b37c | RakuAST: fix "Cannot find method 'instantiate_generic'" with parametric roles

[10:46] <Geth> ¦ rakudo/main: a2c554e3f0 | RakuAST: prohibit double declaration of return types in callable params

[10:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/101f50557d7d...a2c554e3f0c7

[10:46] <nine> 1217

[10:56] *** finanalyst left
[12:04] *** guifa joined
[12:10] <Geth> ¦ rakudo/main: f5aa9fbcf4 | (Stefan Seifert)++ | 4 files

[12:10] <Geth> ¦ rakudo/main: RakuAST: recognize more compile time values in return check

[12:10] <Geth> ¦ rakudo/main: 

[12:10] <Geth> ¦ rakudo/main: Fixes: sub foo(--> "foo") { }

[12:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f5aa9fbcf4

[12:10] <Geth> ¦ rakudo/main: dc8dce7312 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[12:10] <Geth> ¦ rakudo/main: RakuAST: prohibit return with args when signature already has return value

[12:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dc8dce7312

[12:10] <nine> 1218

[12:10] <Geth> ¦ rakudo/main: ca3c621a25 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[12:10] <Geth> ¦ rakudo/main: RakuAST: fix explicit return to return value from signature

[12:10] <Geth> ¦ rakudo/main: 

[12:10] <Geth> ¦ rakudo/main: Fixes: sub foo(--> 1) { return }

[12:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ca3c621a25

[12:41] <lizmat> m: sub a(**@a is raw is copy) { dd @a.shift }; a 42   # meh

[12:41] <camelia> rakudo-moar ca3c621a2: OUTPUT: «Cannot call 'shift' on an immutable 'List'␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:41] <lizmat> either this should work, or should be an error ?

[12:41] <lizmat> ah, fixed in RakuAST

[12:44] <lizmat> m: sub a(**@a is raw) { dd @a.shift }; a 42   # meh

[12:44] <camelia> rakudo-moar ca3c621a2: OUTPUT: «Cannot call 'shift' on an immutable 'List'␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:44] <lizmat> m: say Q|sub a(**@a is raw) { dd @a.shift }; a 42|.AST.EVAL

[12:44] <camelia> rakudo-moar ca3c621a2: OUTPUT: «42␤Nil␤»

[12:46] *** guifa left
[12:51] <Geth> ¦ rakudo/main: 5b7650c006 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[12:51] <Geth> ¦ rakudo/main: RakuAST: throw appropriate errors on twigiled arguments

[12:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5b7650c006

[12:51] <Geth> ¦ rakudo/main: 78d9bf5d24 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[12:51] <Geth> ¦ rakudo/main: RakuAST: include non-matching signature(s) in "will never match" error

[12:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/78d9bf5d24

[12:54] <timo> do we already have an idea how we should be handling what the Optimizer used to do in the new era of the RakuAST?

[12:55] <lizmat> walk the tree like before, but with more information ?

[12:56] <timo> does it go after the stage where we create QAST from RakuAST? so would it be a QAST -> QAST transformation like the optimizer has been so far?

[12:58] <lizmat> no, it would be RakuAST -> RakuAST transformation, I would think?

[12:58] <lizmat> it would be in the CHECK phaser stage

[12:58] <lizmat> nine: that's the current thought, no ?

[13:01] <timo> thing is, i'm not sure RakuAST covers the entirety of stuff that we may want to spit out of the optimizer

[13:01] <nine> 1219

[13:03] <nine> Definitely RakuAST -> RakuAST after CHECK. After all half the point of RakuAST is to retain more semantics for the optimizer.

[13:05] <lizmat> m: use nqp; my @a = 1,2,3; dd nqp::iscont(@a.shift)    # is this expected ?

[13:05] <camelia> rakudo-moar ca3c621a2: OUTPUT: «0␤»

[13:06] <lizmat> m: use nqp; my @a = 1,2,3; dd nqp::iscont(@a.head)

[13:06] <camelia> rakudo-moar ca3c621a2: OUTPUT: «1␤»

[13:07] <Geth> ¦ rakudo/main: 324fd3828f | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[13:07] <Geth> ¦ rakudo/main: RakuAST: set default_value on Parameter meta objects

[13:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/324fd3828f

[13:07] <nine> 1221!

[13:20] <timo> m: my @a = 1,2,3; @a.unshift(my $) = 99; say @a

[13:20] <camelia> rakudo-moar 324fd3828: OUTPUT: «[99]␤»

[13:20] <timo> unshift returns self rather than the thing just added i assume?

[13:20] <lizmat> yes

[13:20] <timo> ok, that's probably specced and designed

[13:21] <lizmat> it's most definitely spectested

[13:21] <timo> that would be an odd ommisson to not spec test, yeah

[13:21] <timo> just a random thought i had, don't mind me

[13:22] <lizmat> m: my @a = 1,2,3;  my $b := @a.pop = 42; say $b   # that feels it should be legal?

[13:22] <camelia> rakudo-moar 324fd3828: OUTPUT: «Cannot modify an immutable Int (3)␤  in block <unit> at <tmp> line 1␤␤»

[13:22] <lizmat> there are actually spectests for this behaviour

[13:23] <timo> for pop to not return a container?

[13:23] <lizmat> yes

[13:23] <lizmat> actually, the speculation says:

[13:23] <lizmat> Remove the first element from C<@array> and return it.

[13:23] <lizmat> If C<@array> is empty returns a failure.

[13:24] <lizmat> nothing about containerness there

[13:24] <nine> Sometimes I really hate Raku

[13:25] <nine> Why on earth do we need Array of Int AND Array[Int] syntaxes? Not a single other language needs more than one way to do this, much less 3 (!)

[13:26] <lizmat> yeah..   maybe we could deprecate the "of Int" syntax

[13:26] *** rakkable left
[13:26] *** rakkable joined
[13:27] <lizmat> and the "returns Fpp" syntax as well  :-)

[13:27] <nine> How successful could we have been if we had concentrated on the features that are useful rather than shoving yet one more way to spell the exact same thing into the language just because it looks cute/

[13:28] <lizmat> well, I think parts of these "warts" are because of a design process of 10+ years

[13:28] <nine> No, more because of a lack of people with the will to say "no"

[13:29] <lizmat> well, I have tried to say no to a lot of things over the years  :-(

[13:36] *** JimmyZ joined
[13:37] <JimmyZ> I +1 to say no to some 'more than way to do it' syntax :)

[13:38] *** JimmyZ left
[13:41] <lizmat> anyways, looks like making .shift / .pop raw cannot be made to work for native arrays

[13:41] <lizmat> as we lack a nqp::shift_ref / nqp::pop_ref op

[13:42] <lizmat> and faking it with first binding an atposref, and then shifting and then returning that was bound, feels meh

[13:43] <timo> oh, it took me a moment to see what you mean

[13:44] <timo> but how is that supposed to even work

[13:45] <timo> after you have popped something out of the native array, you can't have a nativeref to it any more, since a nativeref is essentially a reference to the array + the index the element is at

[13:45] <timo> so after the element was kicked out of the array, what's the ref supposed to reference?

[13:46] <lizmat> aha...  TIL

[13:47] <timo> you can make a fresh container if you want

[13:47] <nine> Why would you even want that in the first place?

[13:48] <timo> now that i read the very first message about this again, i'm also not sure what it should do in the non-native array case

[13:48] <lizmat> I ran into it while working on .assuming: I get an array with the curries, and they can be containers

[13:49] <lizmat> I thought I could just handle that array of curries one by one by shifting off of it

[13:49] <lizmat> and then found it deconts

[13:50] <lizmat> I was just surprised by it

[13:56] <lizmat> afk&

[13:59] <timo> OK

[13:59] <Geth> ¦ rakudo/main: b5ea8bd310 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[13:59] <Geth> ¦ rakudo/main: RakuAST: always mark capture parameters as raw

[13:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b5ea8bd310

[13:59] <Geth> ¦ rakudo/main: 5c43bc69c1 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[13:59] <Geth> ¦ rakudo/main: RakuAST: implement parameterization with Foo of Bar syntax

[13:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5c43bc69c1

[14:00] <nine> 1223

[14:13] <nine> 1224

[14:14] <Geth> ¦ rakudo/main: bfb070a7bb | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[14:14] <Geth> ¦ rakudo/main: RakuAST: set twigil on Parameter meta objects

[14:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bfb070a7bb

[14:32] <Geth> ¦ rakudo/main: e0aaadf192 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[14:32] <Geth> ¦ rakudo/main: RakuAST: support PositionalBindFailover on Positional $p

[14:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e0aaadf192

[14:32] <nine> 1225

[16:09] <Geth> ¦ rakudo/main: 2493f33348 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[16:09] <Geth> ¦ rakudo/main: RakuAST: cope with where blocks returning strings

[16:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2493f33348

[16:09] <Geth> ¦ rakudo/main: b8ae70efba | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[16:09] <Geth> ¦ rakudo/main: RakuAST: prohibit clashing of parameter names

[16:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b8ae70efba

[16:09] <nine> 1226

[16:09] <nine> Encountering lots and lots of missing checks for user errors

[17:28] <Geth> ¦ rakudo/main: 6539e984e6 | (Stefan Seifert)++ | 3 files

[17:28] <Geth> ¦ rakudo/main: RakuAST: check shape of shaped array arguments

[17:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6539e984e6

[17:28] <nine> 1227

[17:42] <Geth> ¦ rakudo/main: ad746c66d7 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[17:42] <Geth> ¦ rakudo/main: RakuAST: check for redeclarations of type captures

[17:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ad746c66d7

[17:42] <nine> And 1228

[17:44] *** finanalyst joined
[17:50] <nine> Riddle of the day: find the no less than 2 errors in this spectest from t/spec/S06-signature/unpack-array.t that make its result bogus: for [1,2],[3,4] -> $a [$x, $y] { isa-ok $a.VAR, Scalar, "[...] doesn't lose containerization"; }

[18:09] <timo> i would assume $a always gets a container just by virtue of being a $ variable?

[18:11] <lizmat> $a is a read-only container ?

[18:19] <nine> Well for one, considering that it's a test about array unpacking, shoulnd't it test the unpackad variables instead of the packed one?

[18:21] <nine> But that doesn't actually matter, since the test would still always succeed

[18:22] <timo> because the [ ] also makes fresh containers in any case?

[18:22] <nine> nope

[18:23] *** finanalyst left
[18:23] *** sena_kun joined
[18:31] <nine> It's because isa-ok's first argument will always be wrapped in a Scalar

[18:35] <lizmat> heh

[18:35] <lizmat> that could be fixed

[18:35] <Geth> ¦ rakudo/main: 47f8008fe3 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[18:35] <Geth> ¦ rakudo/main: RakuAST: wrap arguments in Scalars unless we know they cannot flatten

[18:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/47f8008fe3

[18:36] <nine> 1231!!

[18:42] <lizmat> fixing isa-ok is not an option

[18:49] *** sena_kun left
[18:49] * lizmat wishes Ukraine well, and the USA as well, as they both need to deal with Comrade Krasnov

[18:50] * lizmat feels sick and goes afk&

[18:50] *** sena_kun joined
[18:53] *** finanalyst joined
[19:08] <nine> right you are

[19:14] *** finanalyst left
[19:27] <Geth> ¦ rakudo/main: 9354366ca2 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[19:27] <Geth> ¦ rakudo/main: RakuAST: instantiate generic types in variable declarations

[19:27] <Geth> ¦ rakudo/main: 

[19:27] <Geth> ¦ rakudo/main: Fixes: sub foo(::T) { my T $a }

[19:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9354366ca2

[19:27] <nine> 1232

[19:36] <nine> We are now at 90.44 % passing spec test files

[19:42] <nine> class RT102478_1 { BEGIN EVAL q[has $.x] }; is RT102478_1.new(x => 3).x, 3, 'can declare attribute inside of a BEGIN EVAL in class';

[19:43] <nine> Why on earth is that important? Is the language really that unusable without making stunts like this easy?

[20:07] <Geth> ¦ rakudo/main: 507172d663 | (Stefan Seifert)++ | src/Raku/ast/resolver.rakumod

[20:07] <Geth> ¦ rakudo/main: RakuAST: find outer attach targets from BEGIN time EVAL

[20:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/507172d663

[20:52] <jdv> oops.  wrong chan.  it was fantastic:)

[21:11] *** notna joined
[21:11] *** notna left
[21:12] *** notna joined
[21:34] *** notna left
[22:04] *** finanalyst joined
[22:26] *** guifa joined
[22:51] *** guifa left
[22:53] *** guifa joined
[23:07] *** sena_kun left
[23:36] <lizmat> nine: I guess it tries to do things that we want to do with RakuAST

[23:46] *** guifa left
[23:57] *** guifa joined
