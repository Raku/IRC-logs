[01:06] *** MasterDuke joined
[01:06] <MasterDuke> 41 of `2160-2199| ⎡constant IterationEnd = nqp::create(Mu)⎤`

[01:07] <MasterDuke> which is from src/core.c/core_prologue.rakumod:63

[01:08] <MasterDuke> so why is that to-begin-time()ed 41 times?

[01:08] <MasterDuke> 15 of `3226773-3226776| ⎡str⎤`

[01:11] <MasterDuke> and why is the most common `0-3| ⎡# T⎤`, at 46 times? that is just the first three chars of gen/moar/CORE.c.setting, not even the entire first line

[01:25] <MasterDuke> 21 times the node is a RakuAST::Postcircumfix::ArrayIndex and 25 times it's a RakuAST::Infix

[01:26] <MasterDuke> ^^^ doesn't make sense

[01:27] <MasterDuke> but the `constant IterationEnd...` one was always a RakuAST::VarDeclaration::Constant, which does make sense

[01:49] <MasterDuke> https://gist.github.com/MasterDuke17/5450406aa958b36c0bfe28487b81df40 here's a log of a couple random backtraces when .from == 0 and .to == 3

[01:50] <MasterDuke> but afk now

[01:55] *** MasterDuke left
[06:15] *** Xliff left
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 2 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:54] *** nine left
[07:54] *** nine joined
[08:38] <lizmat> wasn't Nodify on the top of the list of subs being called ?

[08:39] <lizmat> the only reason Nodify exists, is that Grammer/Actions for some reason don't have direct access to the RakuAST:: classes at compile time

[08:40] <lizmat> if we could fix that, than we could replace all Nodify("Foo") calls to direct RakuAST::Foo  specifications

[09:40] <Geth> ¦ rakudo/main: 7741548f50 | (Elizabeth Mattijsen)++ | src/core.c/Distro.rakumod

[09:40] <Geth> ¦ rakudo/main: Future proof $*DISTRO.desc on MacOS systems

[09:40] <Geth> ¦ rakudo/main: 

[09:40] <Geth> ¦ rakudo/main: burak++ for the mention, fixes #5852

[09:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7741548f50

[09:57] <nine> Grammar/Actions don't have access to RakuAST node types because those are declared in the bootstrap and the bootstrap is getting compiled later. However, I don't see a reason why it has to be this way.

[09:57] <nine> I think the order could be Metamodel, bootstrap, Grammar, Actions

[09:59] <nine> Or rather Actions, Grammar since Grammar has a use RakuAST::Actions

[12:41] <Geth> ¦ rakudo/main: bff242f6c9 | (Elizabeth Mattijsen)++ | src/core.c/Array.rakumod

[12:41] <Geth> ¦ rakudo/main: Change internal handling of index out of range

[12:41] <Geth> ¦ rakudo/main: 

[12:41] <Geth> ¦ rakudo/main: It doesn't need to be a private method, it can be a sub

[12:41] <Geth> ¦ rakudo/main: 

[12:41] <Geth> ¦ rakudo/main: Instigated by #5835

[12:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bff242f6c9

[13:10] <lizmat> m: my @a = 1,2,3; dd @a.Slip[2] = 42;   # should this be expected to work ?

[13:10] <camelia> rakudo-moar bff242f6c: OUTPUT: «Cannot modify an immutable Slip ((1 2 3))␤  in block <unit> at <tmp> line 1␤␤»

[13:11] <lizmat> m: my Int @a = 1,2,3; dd @a.Slip[2] = 42;   # or this ?

[13:11] <camelia> rakudo-moar bff242f6c: OUTPUT: «Cannot modify an immutable Slip ((1 2 3))␤  in block <unit> at <tmp> line 1␤␤»

[13:11] <lizmat> m: my @a[3] = 1,2,3; dd @a.Slip[2] = 42; dd @a   # or this

[13:11] <camelia> rakudo-moar bff242f6c: OUTPUT: «42␤Array.new(:shape(3,), [1, 2, 42])␤»

[13:14] <lizmat> m: my Int @a = lazy 1,2,3; dd @a.Slip[2] = 42; dd @a[^3]   # or this

[13:14] <camelia> rakudo-moar bff242f6c: OUTPUT: «Int element of @a = 42␤(1, 2, 42)␤»

[13:16] <lizmat> seems like 12d7d5b48add8347eb1 has something to do with weird behaviour

[13:16] <linkable6> (2017-07-23) https://github.com/rakudo/rakudo/commit/12d7d5b48a Handle slipping Arrays with default values

[13:20] * lizmat spectests ripping out all that

[13:23] <lizmat> hmmm   R#2930 appears related

[13:23] <linkable6> R#2930 [closed]: https://github.com/rakudo/rakudo/issues/2930 Arrays coerced to Slip can be pushed to after which values appear in the Slip

[13:24] <lizmat> and https://github.com/Raku/old-issue-tracker/issues/6406 

[13:24] * lizmat is going to mull about this afk&

[13:31] <[Coke]> I imagine "ripping something out" will land post-release?

[13:33] <[Coke]> Still one outstanding Blin issue: https://github.com/rakudo/rakudo/issues/5849

[13:36] <[Coke]> Still some issues with 6.x-errata branches. Will try to address those later today if no one beats me to it

[13:41] <Geth> ¦ rakudo: zhuomingliang++ created pull request #5856: Interned int, str and num

[13:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5856

[13:49] <[Coke]> huh. out of space on my blin box.

[13:49] <[Coke]> thankfully it helpfull complained at the beginning. :)

[14:12] <[Coke]> kicking off one more 'just in case' blin run which will be the first one on zef 1.0

[14:26] *** dogbert17 joined
[14:29] *** dogbert11 left
[14:34] *** finanalyst left
[16:11] <lizmat> [Coke]: no worries... it needs more thought, and it broke 2 spectest

[16:11] <lizmat> s

[16:11] <lizmat> re: Text::Markdown::Discount, it looks like I need to nuke homebrow first before being able to install any native libs again

[16:12] <lizmat> (the time machine backup copied all intel based versions, and that is not going to work anymore on ARM and Sequoia apparently

[16:26] <lizmat> meh, even after a reboot of brew, it cannot seem to find libmarkdown  :-(

[17:03] *** finanalyst joined
[17:44] <ugexe> they should work fine

[17:45] <ugexe> https://en.wikipedia.org/wiki/Rosetta_(software)

[17:45] <ugexe> https://en.wikipedia.org/wiki/Rosetta_%28software%29

[17:49] <lizmat> hmmm... could be that some of those binaries predated universal binaries, and were Intel only

[18:03] <ugexe> the binaries dont have to be universal

[18:03] <ugexe> rosetta runs x86

[18:04] <ugexe> a universal binary just lets the binary run natively on x86 or arm (i.e. without a translation layer like rosetta)

[18:14] <lizmat> well, nuking the old binaries fixed several issues for me  :-)

[18:16] *** lizmat left
[18:22] *** lizmat joined
[18:32] *** finanalyst left
[19:31] <Geth> ¦ roast/6.c-errata: 3898b36a50 | (Will Coleda)++ | S04-declarations/will.t

[19:31] <Geth> ¦ roast/6.c-errata: Update test from master

[19:31] <Geth> ¦ roast/6.c-errata: 

[19:31] <Geth> ¦ roast/6.c-errata: For #872

[19:31] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/3898b36a50

[19:34] <Geth> ¦ roast/6.d-errata: efad8adc7b | (Will Coleda)++ | S04-declarations/will.t

[19:34] <Geth> ¦ roast/6.d-errata: Update test from master

[19:34] <Geth> ¦ roast/6.d-errata: 

[19:34] <Geth> ¦ roast/6.d-errata: For #872

[19:34] <Geth> ¦ roast/6.d-errata: review: https://github.com/Raku/roast/commit/efad8adc7b

[19:40] <Geth> ¦ roast/6.d-errata: 4bd3d16b15 | (Will Coleda)++ | S04-declarations/will.t

[19:40] <Geth> ¦ roast/6.d-errata: Update test from master

[19:40] <Geth> ¦ roast/6.d-errata: 

[19:40] <Geth> ¦ roast/6.d-errata: For #872

[19:40] <Geth> ¦ roast/6.d-errata: review: https://github.com/Raku/roast/commit/4bd3d16b15

[19:45] <Geth> ¦ roast/6.c-errata: 0e4e72bd16 | (Elizabeth Mattijsen)++ (committed by Will Coleda) | 2 files

[19:45] <Geth> ¦ roast/6.c-errata: Fix .classify/.categorize tests

[19:45] <Geth> ¦ roast/6.c-errata: 

[19:45] <Geth> ¦ roast/6.c-errata: These were checking for improperly constructed object hashes.

[19:45] <Geth> ¦ roast/6.c-errata: 

[19:45] <Geth> ¦ roast/6.c-errata: Since https://github.com/rakudo/rakudo/commit/bcdbbdd8bc these are

[19:45] <Geth> ¦ roast/6.c-errata: now correctly constructed.  Use the :{ } object hash syntax to create

[19:45] <Geth> ¦ roast/6.c-errata: the expected values, and thus make it ready for any other possible

[19:45] <Geth> ¦ roast/6.c-errata: future changes to object hashes

[19:45] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/0e4e72bd16

[19:48] <Geth> ¦ roast/6.d-errata: d66b99bcba | (Elizabeth Mattijsen)++ (committed by Will Coleda) | 2 files

[19:48] <Geth> ¦ roast/6.d-errata: Fix .classify/.categorize tests

[19:48] <Geth> ¦ roast/6.d-errata: 

[19:48] <Geth> ¦ roast/6.d-errata: These were checking for improperly constructed object hashes.

[19:48] <Geth> ¦ roast/6.d-errata: 

[19:48] <Geth> ¦ roast/6.d-errata: Since https://github.com/rakudo/rakudo/commit/bcdbbdd8bc these are

[19:48] <Geth> ¦ roast/6.d-errata: now correctly constructed.  Use the :{ } object hash syntax to create

[19:48] <Geth> ¦ roast/6.d-errata: the expected values, and thus make it ready for any other possible

[19:48] <Geth> ¦ roast/6.d-errata: future changes to object hashes

[19:48] <Geth> ¦ roast/6.d-errata: review: https://github.com/Raku/roast/commit/d66b99bcba

[19:53] *** finanalyst joined
[21:12] <Geth> ¦ roast/6.c-errata: 72b4be5533 | (Will Coleda)++ | S32-io/IO-Socket-Async.t

[21:12] <Geth> ¦ roast/6.c-errata: Use dynamic port when possible

[21:12] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/72b4be5533

[21:28] <Geth> ¦ roast/6.d-errata: 6b368f71ef | (Will Coleda)++ | S32-io/IO-Socket-Async.t

[21:28] <Geth> ¦ roast/6.d-errata: Don't use hardcoded port known to fail on OS X

[21:28] <Geth> ¦ roast/6.d-errata: 

[21:28] <Geth> ¦ roast/6.d-errata: Workaround for #868

[21:28] <Geth> ¦ roast/6.d-errata: review: https://github.com/Raku/roast/commit/6b368f71ef

[21:28] <Geth> ¦ roast/6.d-errata: a04588a5fc | (Will Coleda)++ | S32-io/IO-Socket-Async.t

[21:28] <Geth> ¦ roast/6.d-errata: Use dynamic port where appropriate (#875)

[21:28] <Geth> ¦ roast/6.d-errata: review: https://github.com/Raku/roast/commit/a04588a5fc

[21:36] <Geth> ¦ roast/6.c-errata: 854c2fbd51 | (Will Coleda)++ | S32-str/utf8-c8.t

[21:36] <Geth> ¦ roast/6.c-errata: Copy updated test from master

[21:36] <Geth> ¦ roast/6.c-errata: 

[21:36] <Geth> ¦ roast/6.c-errata: Old version was failing with a shell error, nothing to do with Raku.

[21:36] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/854c2fbd51

[21:40] <[Coke]> https://github.com/Raku/roast/blob/master/S32-str/utf8-c8.t#L96 - that says it's testing a non utf8 filename... but it's doing so with a Str with no special encoding?

[21:40] <[Coke]> blin run *seems* faster.

[21:41] <[Coke]> m: my $filename = "L\xe9on";

[21:41] <camelia> rakudo-moar bff242f6c: ( no output )

[21:41] <[Coke]> m: dd (my $filename = "L\xe9on";)

[21:41] <camelia> rakudo-moar bff242f6c: OUTPUT: «$filename = "Léon"␤»

[21:42] <[Coke]> 694c5aed938147148460abce5d879bb46d07f5fa

[21:42] <linkable6> (2019-03-12) https://github.com/Raku/roast/commit/694c5aed93 Fix issue with macOS /bin/sh and weird source names

[21:45] <[Coke]> if someone can look at this via https://github.com/Raku/roast/issues/878 I'd appreciate it

[22:34] *** finanalyst left
[23:20] *** guifa joined
