[00:16] *** sena_kun left
[03:16] *** guifa left
[04:24] *** guifa joined
[05:14] <[Coke]> ⏳ 1382 out of 2288 modules processed (60.4%)

[05:52] *** guifa left
[07:22] *** [Coke] left
[07:39] <Geth> ¦ rakudo/main: 91e767b267 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[07:39] <Geth> ¦ rakudo/main: RakuAST: fix thunked once

[07:39] <Geth> ¦ rakudo/main: 

[07:39] <Geth> ¦ rakudo/main: The once statement prefix implicitly declares a state variable. If the

[07:39] <Geth> ¦ rakudo/main: expression was thunked this variable would not get added to the thunk's

[07:39] <Geth> ¦ rakudo/main: declarations but instead to the outer scope. The p6stateinit op would

[07:39] <Geth> ¦ rakudo/main: then not run in a frame that was marked as having state variables.

[07:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/91e767b267

[07:40] <nine> And that's 1063. But I fear that this is not the last we hear of this. I don't like the fix. It's more of a workaround. But the problem it solves is so stupid, I can't find the motivation to spend more time on it.

[07:42] <nine> It fixes once { say "hi" } for 1, 2; # Why on earth would you put a loop modifier on a once statement? It's like saying "loop this! But actually, you know, now that I'm thinking about it, maybe I'd rather you don't". That doesn't sound like sensible code.

[07:49] *** [Coke] joined
[09:10] <ab5tract> nine: is this behavior in roast? :O

[09:14] <ab5tract> I agree that supporting this syntax just doesn't make a whole lot of sense. But I guess I do see the utility in some other statement mods. 

[09:15] <ab5tract> If the for modifier case is not explicitly engraved in roast, I would support emitting a sorry for such a combination

[09:20] <ab5tract> m: for ^5 { once { say "seen even" } if ($_+1) %% 2; say $_ }

[09:20] <camelia> rakudo-moar 91e767b26: OUTPUT: «0␤1␤2␤3␤4␤»

[09:20] <ab5tract> m: Q| for ^5 { once { say "seen even" } if ($_+1) %% 2; say $_ } |.AST.EVAL

[09:20] <camelia> rakudo-moar 91e767b26: OUTPUT: «0␤1␤2␤3␤4␤»

[09:23] <ab5tract> nine: is this supposed to work?

[09:23] <ab5tract> m: Q| for ^5 { once { say "seen the truth" } if $_; say $_ } |.AST.EVAL

[09:23] <camelia> rakudo-moar 91e767b26: OUTPUT: «0␤1␤2␤3␤4␤»

[10:25] *** sena_kun joined
[10:33] <nine> This is from a roast test

[10:34] <nine> m: @ = (L1: while True { while True { say "run"; last L1 } });

[10:34] <camelia> rakudo-moar 91e767b26: OUTPUT: «run␤»

[10:34] <nine> m: @ = (while True { while True { say "run"; last } });

[10:34] <camelia> rakudo-moar 91e767b26: ( no output )

[10:35] <nine> Why does the explicit loop label make that supposedly lazy loop run?

[10:37] <lizmat> perhaps a git blame on the test could tell us something ?

[10:41] <nine> Neither the commit that added the test https://github.com/raku/roast/commit/53d332addf516cb31c5237319efd6b1a2d3318ca nor the commit that fixed the thing that the test is actually about https://github.com/rakudo/rakudo/pull/3623/commits/66a2250aa143cdb363d33bd9b63fae9d926b91c7 nor the bug report https://github.com/rakudo/rakudo/issues/3622 mention anything about laziness

[10:42] <nine> I dare say that spec tests is clearly written against an implementation and is not so much a specification. Not least because the comment hints in that same direction.

[10:42] <nine> bartolin_: can you shine any light on this?

[10:54] <nine> The design docs say "lazy loops can be indicated by putting the loop in parens or brackets:" with examples (... if COND for LIST), [for LIST { ... }] and (loop { ... }) or explicitly with the "lazy" prefix

[11:05] <lizmat> TIL

[11:54] *** lizmat left
[12:18] *** lizmat joined
[12:28] *** lizmat_ joined
[12:30] *** lizmat left
[12:37] *** sena_kun left
[12:45] *** lizmat_ left
[12:45] *** lizmat joined
[12:54] *** sena_kun joined
[13:32] <Geth> ¦ rakudo/main: d244790beb | (Stefan Seifert)++ | 2 files

[13:32] <Geth> ¦ rakudo/main: RakuAST: better way to detect compile-time values

[13:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d244790beb

[13:32] <Geth> ¦ rakudo/main: 8e095d0489 | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[13:32] <Geth> ¦ rakudo/main: RakuAST: support lazy loops with constant conditions

[13:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8e095d0489

[13:32] <Geth> ¦ rakudo/main: 318b123172 | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[13:32] <Geth> ¦ rakudo/main: RakuAST: support labels on lazy infinite loops

[13:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/318b123172

[15:33] <[Coke]> dot: graph is too large for cairo-renderer bitmaps. Scaling by 0.17618 to fit - that's new

[15:34] <[Coke]> (from biln)

[15:40] <[Coke]> https://github.com/rakudo/rakudo/issues/5783 has 9 failures bisected to 5 commits

[15:41] <[Coke]> https://gist.github.com/coke/e04258b645f2bd88e4b2141cf48c4e58 has the full output

[16:00] <Geth> ¦ rakudo/main: 62c83711df | (Stefan Seifert)++ | tools/templates/NQP_REVISION

[16:00] <Geth> ¦ rakudo/main: Bump NQP for repeat-loop fix

[16:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/62c83711df

[16:00] <Geth> ¦ nqp/main: c1e89a23ee | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[16:00] <Geth> ¦ nqp/main: Fix missing register initialization in repeat loops

[16:00] <Geth> ¦ nqp/main: 

[16:00] <Geth> ¦ nqp/main: This is finally a proper fix replacing the workaround introduced in

[16:00] <Geth> ¦ nqp/main: commit 2f2ac2f0665980ef54e2bd8a634ad5ff0a590b4a.

[16:00] <Geth> ¦ nqp/main: 

[16:00] <Geth> ¦ nqp/main: The problem was that for loops for which we need to pass the condition

[16:00] <Geth> ¦ nqp/main: to the block (think while $cond -> $foo { }) we only compile the

[16:00] <Geth> ¦ nqp/main: <…commit message has 10 more lines…>

[16:00] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/c1e89a23ee

[16:00] <nine> Turns out fixing a 6 year old bug brings us to 1164 :)

[16:47] <lizmat> nice!

[18:25] <timo> nice, indeed

[19:15] <lizmat> [Coke]: looking at the blin run now

[19:22] *** rakkable left
[19:22] *** rakkable joined
[19:23] *** rakkable left
[19:23] *** rakkable joined
[19:46] <[Coke]> lizmat++ hopefully some real issues and not more flappers

[19:55] <lizmat> yeah real issues

[20:01] <[Coke]> \o/ I guess? :)

[20:05] <lizmat> well, so far naughty modules

[20:32] <lizmat> 3 done so far

[21:04] <lizmat> [Coke]: status update: basically 2 issues remain, one with its cause in MoarVM most likely, and one in coercion cause by "item" change

[21:04] <lizmat> the former is probably easily reverted and/or fixed

[21:04] <lizmat> looking with vrurg at the coercion one

[21:11] <Geth> ¦ rakudo/main: d82d91e853 | (Elizabeth Mattijsen)++ | src/core.c/Iterable.rakumod

[21:11] <Geth> ¦ rakudo/main: Update comment

[21:11] <Geth> ¦ rakudo/main: 

[21:11] <Geth> ¦ rakudo/main: Iterable doesn't have a dedicated .item method anymore

[21:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d82d91e853

[22:16] *** sena_kun left
[22:25] <Geth> ¦ nqp/main: 6d98d8da02 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[22:25] <Geth> ¦ nqp/main: Bump MoarVM for syn codepoint fix, Timo++

[22:25] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/6d98d8da02

[22:36] <Geth> ¦ rakudo/main: ac06359c47 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[22:36] <Geth> ¦ rakudo/main: Bump NQP for syn codepoint fix, Timo++

[22:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ac06359c47

[22:38] <lizmat> afk&

[22:39] *** lizmat_ joined
[22:43] *** lizmat left
[22:57] *** guifa joined
[23:39] *** lizmat_ left
[23:40] *** lizmat joined
