[02:21] *** sjn left
[07:16] *** guifa left
[08:33] <ab5tract> Is it a bug to not be able to use `need` to bring in multi candidates from multiple modules?

[08:33] <ab5tract> m:  module A { multi sub s() is export { "S!"; callsame(5) } }; module B { multi sub s(Int $i) is export { "$i!!!" } }; module C { need A; need B; sub f() is export { s() } }; import C; f

[08:33] <camelia> rakudo-moar 4217a5cfd: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤A symbol '&s' has already been exported␤at <tmp>:1␤»

[08:36] *** finanalyst joined
[08:37] *** dev2 joined
[08:39] <dev2> hi

[08:39] <dev2> I was wondering about the state of the operator precendece parser. What the current issues are, what features does it lack.

[08:44] <ab5tract> I don't mean to say it is perfect, but I'm not aware of any glaring deficiencies

[08:49] <dev2> For one thing, I remember reading somewhere that user defined operators of a certain associativity silently didn't work or something.

[08:50] <dev2> Then there is the fact that, inside the ternary operator, putting a low precedece operator automatically leads to a syntax error. Maybe it's part of the spec and is unfixable but most users would assume that you can put an arbitrary expression inside. The current behavior doesn't buy you anything.

[08:51] <dev2> Then the parsing of the metaoperator seems highly dodgy.

[08:53] <dev2> Also, since the ternary operator behavior always result in a syntax error, fixing its behavior would result in zero breaking change.

[09:03] <ab5tract> If any of these are missing from the current bug tracker, it would be great if you could add them

[09:04] <ab5tract> Anyway, I don't think there is a separate "thing" that is the operator precedence parser. There's just the parser.

[09:05] <ab5tract> I'd need to see an example of the ternary operator problem you mention

[09:05] <ab5tract> Also, I would be interested to hear what about metaoperators is dodgy

[09:05] <ab5tract> Other than the long-discussed issues with METAOP_NEGATE

[09:12] <dev2> I guess but that's not why I'm here. I almost finished a pretty neat standalone operator precedence parser that can handle a lot of things: prefix, postfix, infix, ternary, circumfix and postcircumfix and almost all the different assoicativities that Raku needs. So I was asking for specfic details so that I can finish it or extend it and give it to you, so that you can replace the old one by mine.

[09:15] <dev2> I hope your philsophing or whatever. The recursive descent parser is pretty different than the operator precedence one, but yeah they are tightly integreated and call each others.

[09:15] <dev2> for the ternary operator: 

[09:15] <dev2> my $a = 10; say 1 ?? $a = 2 !! 3;

[09:15] <dev2> my $a = 10; say 1 ?? $a, 2 !! 3;

[09:23] <dev2> Concerning the metaoperators, again I hope your joking. The whole thing feels like a big hack. Look at how many boolean variables in relies on, lookahead, and even a freaking regex match inside the parser. And they are handled by the recursive descent parser. Theoretically, each metaoperator could be parsed by a specially dediacted operator precedence parser where the terms are the normal operators (+, -, etc..) and where the operators are the 

[09:23] <dev2> metaoperators (prefix metaoperators, postfix metaoperators, circumfix metaoperators).

[10:25] *** dev2 left
[13:29] <nine> dev2: I'm quite sure the refusal to accept low precedence operators in a ternary is to provide a useful message when someone does this accidentally, like in my $foo = $bar ?? baz or die "not what I expected"

[13:29] <tellable6> nine, I'll pass your message to dev2

[13:35] <[Coke]> back in an hour or so to finish the release - timo, if you have any fixups for the Changelog, now's the time!

[13:37] *** guifa joined
[15:06] <[Coke]> starting the moarvm release.

[15:21] <[Coke]> moarvm branch is telling me it has "new commits" in 3rdparty/mimalloc. I didn't change anything there, wtf.

[15:22] <[Coke]> "submodule update"

[15:32] <[Coke]> jdv: here's the failure I'm getting in moarvm on make release: 

[15:32] <[Coke]> https://gist.github.com/coke/c24f7e6e4cc2e059122a47bc09cb571e

[15:33] <[Coke]> Note that doing a release of 2025.040 *works* but then generates a tar file with the wrong name that I have to rename.

[15:33] <[Coke]> So I really wish we could explain why the release branches have that extra 0, because it appears to be incorrect.

[15:34] <[Coke]> This is, I believe, the root cause of the bad time stamps on the first run I did, because using 2025.040 as the release VERSION seems to work with either tar

[15:35] <jdv> im unfortunately out and aboit

[15:36] <jdv> maybe send me you sh hist?  ive never had that issue...

[15:36] <[Coke]> Yup, I have workarounds, just writing it down and updating the release guide this time. We can figure out why you and I are having different experiences later.

[15:36] <jdv> i can be online for real in an hpur or so.  on dumbphone atm

[15:43] <[Coke]> it's definitely the extra 0 on the branch name.

[15:43] <[Coke]> No worries, the release is fine

[15:44] <[Coke]> We do have to figure out at some point why it works when you use the extra 0 on the release. Looking at the code, it seems impossible.

[16:13] <[Coke]> moarvm release done (except for merging the moarvm.org PR)

[16:45] <[Coke]> I'm not going to update the Changelog given it was only 2 small nits.

[16:45] <[Coke]> Up to 'stresstest on master'

[16:55] *** donaldh left
[16:59] <[Coke]> SmokeMachine: you around?

[17:00] <SmokeMachine> [Coke]: yes, but without access to a computer

[17:14] <[Coke]> OK, no worries, doing a one off test on Red right now

[17:16] <SmokeMachine> Oh! Great! Thanks!

[17:16] *** dev2 joined
[17:17] <dev2> nine: I really don't think this is the case. The orginal? ternary operator from C works fine with low precedence operator in this position whereas Perl, Ruby, Raku, JavaScript and PHP all have this problem. I'm pretty sure that everyone fucked this up because the authors of those languages either didn't pay attention to this detail, or possibly that it's not trivial to implement it in YACC. Yacc doesn't have a %ternary directive after all, only 

[17:17] <dev2> %infix which is what Perl's yacc grammar uses for '?' and ':'. The original C parser was a hybrid recursive descent and operator precedence parser and my guess is that the ternary was handled with the rec descent parser which called parse_expression() in the middle of the ternary.

[17:17] <tellable6> 2025-04-19T13:29:19Z #raku-dev <nine> dev2: I'm quite sure the refusal to accept low precedence operators in a ternary is to provide a useful message when someone does this accidentally, like in my $foo = $bar ?? baz or die "not what I expected"

[17:18] <dev2> ty telltable6 bot

[17:28] *** sjn joined
[17:29] <[Coke]> Red installed no issues with rakudo head

[17:34] <jdv> my guess is its just a diffferent interpretation of the relase guide

[17:37] <[Coke]> Could be.

[17:37] <[Coke]> Have some verbiage changes we can run through before .05

[17:39] <jdv> i think the last set of changes to the moarvm release guide made it more confusing

[17:41] <[Coke]> So yes, let's review, because without my changes, it works even worse here. :)

[17:41] <jdv> doing a partial mock moarvm release locally.  i'll show you in a minute...

[17:41] <[Coke]> perhaps today's revisions will help, who knows.

[17:49] <jdv> https://gist.github.com/jdv/6908ee968f940c635373b67547435725

[17:49] <jdv> is that what you see for that portion?

[17:49] <SmokeMachine> [Coke]: great! Thanks!

[17:49] <jdv> I think you've focused on this extra zero thing a bit too hard and have confused it

[17:50] <[Coke]> ... There were many branches with the extra 0, and you said you were using it.

[17:51] <[Coke]> Your example there is not.

[17:51] <[Coke]> So, yes, that would be why it's not working for me.

[17:51] <[Coke]> and my fixes today are "don't use the extra 0, it's broken"

[17:51] <jdv> this change - https://github.com/MoarVM/MoarVM/commit/a0118445e5257ef82aa72ea707b80b47a1101888 - is technically wrong

[17:51] <jdv> its only the remote that has a trailing 0

[17:52] <jdv> and like i've said before i think its just to disambiguate with the tage

[17:52] <jdv> *tag

[17:52] <[Coke]> OK. this clarification would have been great months ago. :)

[17:52] <jdv> if its too confusing maybe we just use a different branch naming scheme 

[17:52] <[Coke]> You don't need it to disambiguate with the tag, you can be explicit in referring to "branch with this name" vs. "tag with this name"

[17:52] <jdv> you're the one that updated the guide

[17:52] <japhb> dev2: Other languages don't have ternary at the same precedence as C does, because C was wrong on this.  The change was intentional, and not because every language from the 90s "fucked this up".

[17:53] <[Coke]> Yes, after a conversation with you about it

[17:53] <[Coke]> Great, glad we're in agreement now, at least.

[17:53] <jdv> i just followed hte guide and looked at how it was done before me:)

[17:54] <[Coke]> OK. I'm stepping away from this convo and finishing the release.

[17:54] *** [Coke] left
[17:57] <jdv> except by default the "ref namespace" includes tags and branches - its just speculation on my part as to why it was done like that.

[17:57] <Geth> ¦ nqp/main: d18068bf9b | (Will Coleda)++ | tools/templates/MOAR_REVISION

[17:57] <Geth> ¦ nqp/main: [release] Bump MoarVM revision to 2025.04

[17:57] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/d18068bf9b

[17:57] <Geth> ¦ nqp/main: 447549dd76 | (Will Coleda)++ | VERSION

[17:57] <Geth> ¦ nqp/main: [release] Bump VERSION to 2025.04

[17:57] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/447549dd76

[17:57] <Geth> ¦ rakudo/release-2025.04: 9d3bdad34e | (Will Coleda)++ | tools/templates/NQP_REVISION

[17:57] *** [Coke] joined
[17:57] <Geth> ¦ rakudo/release-2025.04: [release] Bump NQP revision to 2025.04

[17:57] <Geth> ¦ rakudo/release-2025.04: review: https://github.com/rakudo/rakudo/commit/9d3bdad34e

[17:57] <Geth> ¦ rakudo/release-2025.04: 57778e4320 | (Will Coleda)++ | VERSION

[17:57] <Geth> ¦ rakudo/release-2025.04: [release] Bump VERSION to 2025.04

[17:57] <Geth> ¦ rakudo/release-2025.04: review: https://github.com/rakudo/rakudo/commit/57778e4320

[17:58] <[Coke]> remote: This repository moved. Please use the new location:

[17:58] <[Coke]> (seen in the ake file output)

[17:59] <jdv> uh oh

[17:59] <[Coke]> Akefile still has perl6 in it somewhere.

[17:59] <jdv> did someone rename a master to a main again?

[17:59] <jdv> oh...

[18:01] <Geth> ¦ rakudo: coke self-assigned Update old github 'perl6' reference. https://github.com/rakudo/rakudo/issues/5860

[18:06] <Geth> ¦ rakudo: coke++ created pull request #5861: Release 2025.04

[18:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5861

[18:08] <dev2> japhb: It doesn't matter at exact level the ternary operator is. In C as in other languages, the ternary operator has low precedence but is not the lowest precedence operator, so the precedence situation is equivalent. I believe that C parses the middle of the ternary the same way the inside of a parenthesized expression is parsed, and that the other languages treat '?' and ':' as infix operators. They bind the operands of the lower precedence 

[18:08] <dev2> operator inside and at this point the parse tree is completely non-sensical and the parse always fails. That's the only explanation that makes sense.

[18:44] <Geth> ¦ rakudo/main: 4 commits pushed by (Will Coleda)++

[18:44] <Geth> ¦ rakudo/main: a32ac4ce73 | Update changelog + announcement

[18:44] <Geth> ¦ rakudo/main: 9d3bdad34e | [release] Bump NQP revision to 2025.04

[18:44] <Geth> ¦ rakudo/main: 57778e4320 | [release] Bump VERSION to 2025.04

[18:44] <Geth> ¦ rakudo/main: 9090fa775f | Merge pull request #5861 from rakudo/release-2025.04

[18:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/4217a5cfd07c...9090fa775f04

[18:59] <lizmat> [Coke]++

[19:00] <Geth> ¦ rakudo/coke/releng2: d4288c6ec4 | (Will Coleda)++ | docs/release_guide.pod

[19:00] <Geth> ¦ rakudo/coke/releng2: more notes

[19:00] <Geth> ¦ rakudo/coke/releng2: review: https://github.com/rakudo/rakudo/commit/d4288c6ec4

[19:00] *** donaldh joined
[19:01] <Geth> ¦ rakudo/coke/releng2: 8 commits pushed by (Will Coleda)++

[19:01] <Geth> ¦ rakudo/coke/releng2: 18fa130196 | RELENG Split rakudo-stress-errata into lang vers

[19:01] <Geth> ¦ rakudo/coke/releng2: 3c1bc8682c | RELENG cleanup release guide slightly

[19:01] <Geth> ¦ rakudo/coke/releng2: 4478e83d6e | RELENG pod, not markdown

[19:01] <Geth> ¦ rakudo/coke/releng2: 72e5bbe620 | RELENG remove ref to z tool

[19:01] <Geth> ¦ rakudo/coke/releng2: c6918ddf94 | RELENG Remove stale step #'s from comments

[19:01] <Geth> ¦ rakudo/coke/releng2: 0e8b119338 | RELENG - renumber steps after content changes

[19:01] <Geth> ¦ rakudo/coke/releng2: 9149c6e068 | RELENG don't repeat all vars each time

[19:01] <Geth> ¦ rakudo/coke/releng2: 832f5c0485 | more notes

[19:01] <Geth> ¦ rakudo/coke/releng2: review: https://github.com/rakudo/rakudo/compare/d4288c6ec457...832f5c04858e

[19:02] <[Coke]> afk for a bit

[19:20] <dev2> good night

[19:20] *** dev2 left
[19:34] <Geth> ¦ rakudo/main: 298fed53f2 | (Will Coleda)++ | tools/releasable/Akefile

[19:34] <Geth> ¦ rakudo/main: Track github group rename

[19:34] <Geth> ¦ rakudo/main: 

[19:34] <Geth> ¦ rakudo/main: Fixes #5860

[19:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/298fed53f2

[20:26] <[Coke]> jdv: do you care if tools/release-dates.raku does anything other than show the numbers for the next few releases? right now it tries to work for any year you give it (and gets it wrong)

[20:55] <timo> sorry i was too late for the changelog fixup question

[21:02] <jdv> i've only used it for the "current" release

[21:02] <jdv> i guess if its easier to just make that work, whatever

[21:02] <jdv> maybe it can be made working fancy at a later date

[21:02] <jdv> [Coke]: ^

[21:02] <jdv> nice on the release.  nothing went wrong except the usual on the moarvm side of the house?

[21:44] *** finanalyst left
[22:00] *** rakkable left
[22:00] *** rakkable joined
