[00:01] *** finanalyst left
[02:06] *** guifa left
[02:09] *** guifa joined
[06:16] *** guifa left
[09:21] <Geth> ¦ rakudo/main: b6ea57833e | (Patrick Böker)++ | azure-pipelines.yml

[09:21] <Geth> ¦ rakudo/main: Get PRs working for everyone

[09:21] <Geth> ¦ rakudo/main: 

[09:21] <Geth> ¦ rakudo/main: The `build.addbuildtag` command requires special permissions of the PR

[09:21] <Geth> ¦ rakudo/main: creator. Effectively failing PRs for many people. Thus that command is not

[09:21] <Geth> ¦ rakudo/main: suitable in a public CI pipeline.

[09:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b6ea57833e

[09:21] <Geth> ¦ rakudo/main: 49d06524d0 | (Patrick Böker)++ (committed using GitHub Web editor) | azure-pipelines.yml

[09:21] <Geth> ¦ rakudo/main: Merge pull request #5753 from patrickbkr/make-PRs-work-for-everyone

[09:21] <Geth> ¦ rakudo/main: 

[09:21] <Geth> ¦ rakudo/main: Get PRs working for everyone

[09:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/49d06524d0

[09:24] <Geth> ¦ nqp/main: 6dd486179d | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[09:24] <Geth> ¦ nqp/main: Bump MoarVM for fallthru fixes

[09:24] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/6dd486179d

[09:34] <Geth> ¦ rakudo/main: 6363b8e176 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[09:34] <Geth> ¦ rakudo/main: Bump NQP to get MoarVM fallthru fixes

[09:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6363b8e176

[09:54] *** sena_kun joined
[10:03] *** finanalyst joined
[10:04] *** finanalyst left
[10:05] *** finanalyst joined
[11:12] *** finanalyst left
[13:22] *** guifa joined
[13:59] *** guifa left
[14:01] *** guifa joined
[17:00] *** MasterDuke joined
[17:01] <MasterDuke> committable6: releases my @a; my $t = now; for ^10 { @a.push:$_ }; say now - $t; say @a[2]

[17:02] <committable6> MasterDuke, https://gist.github.com/bf8afbb4dad4ead0e074006ca281b19a

[17:02] <MasterDuke> committable6: releases my @a; for ^10 { @a.push:$_ }; say @a[2]

[17:03] <committable6> MasterDuke, ¦releases (86 commits): «(Any)␤»

[17:14] *** MasterDuke left
[17:17] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: d308e3e482 | (Nick Logan)++ (committed by ab5tract) | 5 files

[17:17] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Deprecate IO subs that operate on multiple paths in 6.e

[17:17] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[17:17] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: While convienient, being able to pass multiple paths to e.g. &rmdir

[17:17] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: is problematic because there isn't a blessed way to handle what to

[17:17] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: do when an exception or failure occurs, i.e. should it try to rmdir

[17:17] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: every entry even if some things fail, or stop on the first failure?

[17:17] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[17:17] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: <…commit message has 24 more lines…>

[17:17] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/d308e3e482

[18:47] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: acdb021d9a | (Nick Logan)++ (committed by ab5tract) | 5 files

[18:47] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Deprecate IO subs that operate on multiple paths in 6.e

[18:47] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[18:47] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: While convienient, being able to pass multiple paths to e.g. &rmdir

[18:47] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: is problematic because there isn't a blessed way to handle what to

[18:47] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: do when an exception or failure occurs, i.e. should it try to rmdir

[18:47] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: every entry even if some things fail, or stop on the first failure?

[18:47] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[18:47] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: <…commit message has 24 more lines…>

[18:47] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/acdb021d9a

[19:03] <ab5tract> freaking Windows...

[19:06] <Geth> ¦ rakudo/main: 8991173fcf | (Christian Bartolomäus)++ (committed using GitHub Web editor) | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[19:06] <Geth> ¦ rakudo/main: [JVM] Reduce backend-specific code in find_best_dispatchee (#5714)

[19:06] <Geth> ¦ rakudo/main: 

[19:06] <Geth> ¦ rakudo/main: This is a follow-up to fa853abc7f which reverted 99f52bcd75 for the

[19:06] <Geth> ¦ rakudo/main: JVM backend.

[19:06] <Geth> ¦ rakudo/main: 

[19:06] <Geth> ¦ rakudo/main: From what I understand the cause of the breakage on the JVM was the

[19:06] <Geth> ¦ rakudo/main: the removal of the call to nqp::hllizefor in 99f52bcd75. I'm not sure

[19:07] <Geth> ¦ rakudo/main: <…commit message has 14 more lines…>

[19:07] <jdv> i used to work in a window factory which is the only gig ive worked at a 100% m$ shop

[19:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8991173fcf

[19:07] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: ed7c6651e8 | (Nick Logan)++ (committed by ab5tract) | 5 files

[19:07] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Deprecate IO subs that operate on multiple paths in 6.e

[19:07] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[19:07] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: While convienient, being able to pass multiple paths to e.g. &rmdir

[19:07] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: is problematic because there isn't a blessed way to handle what to

[19:07] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: do when an exception or failure occurs, i.e. should it try to rmdir

[19:07] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: every entry even if some things fail, or stop on the first failure?

[19:07] <jdv> useless info for the day

[19:07] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[19:07] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: <…commit message has 24 more lines…>

[19:07] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/ed7c6651e8

[19:07] <ab5tract> jdv: the fact that you lived to tell the tale is useful information :)

[19:08] <jdv> ha, i guess

[19:26] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 0cc1a84581 | (Nick Logan)++ (committed by ab5tract) | 5 files

[19:26] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Deprecate IO subs that operate on multiple paths in 6.e

[19:26] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[19:26] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: While convienient, being able to pass multiple paths to e.g. &rmdir

[19:26] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: is problematic because there isn't a blessed way to handle what to

[19:26] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: do when an exception or failure occurs, i.e. should it try to rmdir

[19:26] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: every entry even if some things fail, or stop on the first failure?

[19:26] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[19:27] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: <…commit message has 24 more lines…>

[19:27] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/0cc1a84581

[19:55] <ab5tract> .... How does this work? 100% of tests passed, but still failed? https://usercontent.irccloud-cdn.com/file/ky6enJxu/image.png

[19:57] <[Coke]> in tap, that could be wrong number of tests run

[20:01] <lizmat> or no "done-testing" without a plan

[20:04] <ab5tract> hmm... but that shouldn't be the case here, unless a new test file in t/02-rakudo needs to be manually registered somewhere... And it was succeeding in just a previous run.

[20:04] <ab5tract> I'll kick it and see if it flaps

[20:05] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 1f3e360c62 | (Nick Logan)++ (committed by ab5tract) | 5 files

[20:05] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Deprecate IO subs that operate on multiple paths in 6.e

[20:05] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[20:05] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: While convienient, being able to pass multiple paths to e.g. &rmdir

[20:05] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: is problematic because there isn't a blessed way to handle what to

[20:05] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: do when an exception or failure occurs, i.e. should it try to rmdir

[20:05] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: every entry even if some things fail, or stop on the first failure?

[20:05] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[20:05] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: <…commit message has 24 more lines…>

[20:05] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/1f3e360c62

[20:05] <lizmat> ab5tract: also, all test pass, but on the MoarVM teardown something happens that causes a non-zero exit code

[20:05] <lizmat> such as a segfault

[20:05] <lizmat> I've seen that

[20:05] <ab5tract> hmm, ok that would make sense too

[20:07] <ab5tract> Unrelated to the previous query, but I'm wondering whether it is possible that we are returning different values for chown on Windows vs Linux

[20:07] <ab5tract> m: say chown("/tmp/nonexistent", "/tmp/also-nonexistent", :uid(111), :gid(222)) ~~ []

[20:08] <camelia> rakudo-moar 8991173fc: OUTPUT: «True␤»

[20:08] <ab5tract> that apparently returns False on Windows :S

[20:08] <ab5tract> (if I'm reading the test outputs right)

[20:08] <lizmat> uid and gid on Windows are really iffy

[20:09] <ab5tract> yeah, I figured as much. But when then I'd still expect the code to produce an empty array for two failures (in the old code path)

[20:10] <lizmat> only recently I've made $*USER return something sensible

[20:10] <lizmat> on Windows

[20:11] <ugexe> it could also potentially be related to the addition of the file-stat syscall that was added https://github.com/rakudo/rakudo/blob/8991173fcf3926da60a084b13b60389a464361b7/src/core.c/IO/Path.rakumod#L494

[20:12] <ugexe> as in a source of potentially odd guid and uid values

[20:14] <ab5tract> Maybe I should just flub those tests for Windows then..

[20:15] <ugexe> actually the syscall thing shouldnt have anything to do with it since that is only used when the uid and gid are not provided

[20:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 95bb11b83f | (Nick Logan)++ (committed by ab5tract) | 5 files

[20:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Deprecate IO subs that operate on multiple paths in 6.e

[20:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[20:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: While convienient, being able to pass multiple paths to e.g. &rmdir

[20:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: is problematic because there isn't a blessed way to handle what to

[20:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: do when an exception or failure occurs, i.e. should it try to rmdir

[20:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: every entry even if some things fail, or stop on the first failure?

[20:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[20:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: <…commit message has 24 more lines…>

[20:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/95bb11b83f

[20:32] <ugexe> i suspect chown on windows is a no-op, but that we are missing a piece where we check the file for existence first

[20:37] <ugexe> for nodejs i think that might be handled by this check that the user has write permissions to the file first - https://github.com/nodejs/node/blob/a344300bfa146fce9d1f20a71b073263a4720eab/src/node_file.cc#L2869-L2873

[20:38] <ugexe> for our case we can probably just make that file-stat syscall unconditionally and check that. it will already throw an error if the path doesnt exist i think

[20:40] *** finanalyst joined
[20:50] <ab5tract> ugexe: so looking the IO::Path source, the file-stat does seem to be unconditional already. But the result is only used in a few 'stat-flags' calls for UID/GID. Is your suggestion to add an additional flag check for file existence?

[20:50] <ab5tract> Unfortunately I'm a bit lost in connecting the Node source code to the syscalls in IO::Path

[20:54] <ugexe> ah i was thinking one of those would emit the "Failed to stat file: no such file or directory" error but i guess i was wrong

[20:54] <ugexe> although I suppose that data already exists in the result of that file-stat call

[20:55] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: ace48c2486 | ab5tract++ | src/core.c/IO/Path.rakumod

[20:55] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Check for file existence first

[20:55] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/ace48c2486

[20:56] <ugexe> the line using uv_fs_chown is on line 2876. i linked to line 2869. between those two lines there is only one significant thing that happens, that call to THROW_IF_INSUFFICIENT_PERMISSIONS

[20:56] <ugexe> i'm presuming that has to stat the file or something to check if it has sufficient permissions, and on windows if the file does not exist that would fail

[20:57] <ugexe> and never reach the uv_fs_chown call at all

[21:04] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: efbf3e411c | ab5tract++ | 2 files

[21:04] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Check for file existence first

[21:04] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/efbf3e411c

[21:07] <ugexe> thats fine but i think the better solution would be to check $stat to avoid the extra syscalls

[21:08] <ugexe> with the .e the file ends up getting stat-ed multiple times presumably, once with the call to .e, and once with the file-stat

[21:09] <ugexe> (and avoiding that scenario is what file-stat was implemented for)

[21:14] <ab5tract> ugexe: yeah makes sense. I figured this would help verify that solution first

[21:15] <ab5tract> and maybe make it work across moarvm + JVM at the same time

[21:16] <ugexe> presumably jvm has no problem 

[21:16] <ugexe> but im just guessing. the core of the issue is libuv uv_fs_chown is a noop on windows

[21:19] <ugexe> nqp::syscall("stat-flags", $stat, nqp::const::STAT_EXISTS) fwiw

[21:20] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: d5f6baa6c3 | ab5tract++ | 3 files

[21:20] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Check for file existence first

[21:20] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/d5f6baa6c3

[21:21] <ab5tract> should have waited to push until migrating to checking the result of the stat call

[21:25] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: da28b2e7dc | ab5tract++ | 3 files

[21:25] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Check for file existence first

[21:25] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/da28b2e7dc

[21:30] <ab5tract> FWIW, I'm not sure that Win_JVM actuallty runs tests ..

[21:41] <ab5tract> I hope I don't jinx anything by saying this, but I think we've finally got it :)

[21:54] <guifa> speaking of the JVM --- where do hold the sys calls ?  

[22:13] <ab5tract> ugexe: Looks like the PR has gone green once again

[22:19] <timo> guifa: pardon?

[22:29] <guifa> timo: so in MoarVM there's a bunch of syscalls, called from NQP fairly directly with nqp::syscall(...). Where do those reside in our code for JVM (and for JS as well)?  So I can bring over my multicast code to the other ones too

[22:30] <timo> they don't have an equivalent, but also they don't need to, their implementations of nqp ops go much more directly to functions being called without going through some kind of bytecode like MBC

[22:34] *** kjp left
[22:36] *** kjp joined
[22:38] *** kjp left
[22:38] *** kjp joined
[23:01] <guifa> hmm okay

[23:17] <ab5tract> It would be nice to be able to develop reasonable analogs

[23:17] <ab5tract> So that we don’t have to diverge

[23:18] <ab5tract> IIUC guifa would need to implement some NQP functions to do the work on JVM, etc

[23:19] <ab5tract> Then these functions are VM specific, which feels wrong

[23:19] *** sena_kun left
[23:20] <timo> yeah, they would become nqp::blabla ops from the perspective of the code inside rakudo or nqp

[23:20] <timo> but we can also support nqp::syscall("blabla", ...) to just mean nqp::blabla(...) for a set of names

[23:25] <guifa> So in Rakudo I just see nqp::foo, I guess I'm trying to figure out how to locate that code in JVM.  

[23:25] <guifa> but I admit I'm probably going a bit over my head

[23:26] * guifa also hates Java haha

[23:36] <timo> https://github.com/raku/nqp/blob/9a843dc6edfea13316b2894fe46ff3c7f32566fa/src/vm/jvm/runtime/org/raku/nqp/runtime/Ops.java#L536-L537  <-  https://github.com/raku/nqp/blob/9a843dc6edfea13316b2894fe46ff3c7f32566fa/src/vm/jvm/QAST/Compiler.nqp#L2399

