[00:48] *** librasteve_ left
[02:10] *** JimmyZhuo joined
[02:20] <JimmyZhuo> CORE.c.setting.moarvm 28.5MB VS 23.3MB(rakuast)

[02:30] <jdv> is back compat really a big issue?  unless raku gets super popular i'd think prio'ing "improvements" over back compat makes more sense, no?

[05:20] <JimmyZhuo> rakudo-m -Ilib t\spec\S03-operators\set_equality.t

[05:20] <JimmyZhuo> ===SORRY!===

[05:20] <JimmyZhuo> Cannot resolve caller MAKE_REGEX(Regex:D, Bool:D, Bool:D, Int:D, PseudoStash:D); none of these signatures matches:

[05:20] <JimmyZhuo>     (Regex \arg, $, $, int \monkey, $)

[05:20] <JimmyZhuo>     (Match::CachedCompiledRegex \arg, $, $, int \monkey, $)

[05:20] <JimmyZhuo>     (\arg, \i, \m, int \monkey, \context)rakudo-m -Ilib t\spec\S03-operators\set_equality.t

[05:20] <JimmyZhuo> ===SORRY!===

[05:20] <JimmyZhuo> Cannot resolve caller MAKE_REGEX(Regex:D, Bool:D, Bool:D, Int:D, PseudoStash:D); none of these signatures matches:

[05:20] <JimmyZhuo>     (Regex \arg, $, $, int \monkey, $)

[05:20] <JimmyZhuo>     (Match::CachedCompiledRegex \arg, $, $, int \monkey, $)

[05:20] <JimmyZhuo>     (\arg, \i, \m, int \monkey, \context)

[05:20] <JimmyZhuo> seems I can't run test in bootstrap-rakuast branch

[05:42] *** JimmyZhuo left
[06:47] *** finanalyst joined
[07:39] *** lizmat left
[08:05] *** lizmat joined
[09:53] *** sena_kun joined
[10:51] *** librasteve_ joined
[11:07] *** finanalyst left
[11:19] *** JimmyZhuo joined
[11:35] <JimmyZhuo> m: sub a() {my int $a = "ss";}

[11:35] <camelia> rakudo-moar 4a8ee5d22: ( no output )

[11:36] <JimmyZhuo> m: my int $a = "ss";

[11:36] <camelia> rakudo-moar 4a8ee5d22: OUTPUT: «This type cannot unbox to a native integer: P6opaque, Str␤  in block <unit> at <tmp> line 1␤␤»

[11:36] <JimmyZhuo> m: sub a(int $a = 'ss') {}

[11:36] <camelia> rakudo-moar 4a8ee5d22: ( no output )

[11:37] <JimmyZhuo> m: sub foo(Int $x = "omg") { }

[11:37] <camelia> rakudo-moar 4a8ee5d22: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Default value 'omg' will never bind to a parameter of type Int␤at <tmp>:1␤------> sub foo(Int $x = "omg"<HERE>) { }␤    expecting any of:␤        constraint␤»

[11:37] <JimmyZhuo> m: sub a(int $a = 'ss') {}; a();

[11:37] <camelia> rakudo-moar 4a8ee5d22: OUTPUT: «This type cannot unbox to a native integer: P6opaque, Str␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:39] <JimmyZhuo> m: sub foo(Int $x = +"omg") { }

[11:39] <camelia> rakudo-moar 4a8ee5d22: ( no output )

[11:41] <JimmyZhuo> these are inconsistency?

[11:46] <nine> Yes, there's not much of a visible system

[11:56] *** JimmyZhuo left
[11:57] *** JimmyZhuo joined
[12:14] *** zostay left
[12:15] *** zostay joined
[12:21] <[Coke]> huh. logged into the azure box this morning and the blin run is done already??

[12:21] <[Coke]> That's jdv speeds, not coke speeds.

[12:23] <[Coke]> https://gist.github.com/coke/9d9afd2e8eb702b982fcc311d21d67a4 - that's the full output from this run, I don't have time to make a ticket

[12:24] <[Coke]> looks like the .assuming broke some stuff

[12:30] <[Coke]> SmokeMachine: Red – AlwaysFail

[12:32] <[Coke]> It doesn't look like blin is saving output from alwaysfail, only the ones that switch

[12:32] <[Coke]> added "overview" output to that gist which has the status of each individual module.

[12:33] <SmokeMachine> That’s odd, the tests pass, at least locally…

[12:34] <SmokeMachine> And it seem that pass on GH too: https://github.com/FCO/Red/actions

[12:34] <[Coke]> Yah, I thought I'd get lucky with the full run, but guess I have to run it by hand again - give me a day or two to get that sorted.

[12:35] <[Coke]> SmokeMachine: I've only been doing the blin runs for a few months, and it took some effort to get it running, I've probably missed something in the setup on this azure box.

[12:39] <SmokeMachine> It seems the modules depending on Red are also working: https://github.com/FCO/Red/actions/runs/13785597633/job/38552778142#step:6:1

[12:40] <SmokeMachine> [Coke]: sure, I don’t mean to say that’s your fault nor something like that. I’m sorry if I passed that impression.

[12:41] <JimmyZhuo> nine: just make spectest, my pr has no regressions, I think it's safe to merge

[12:42] *** JimmyZhuo left
[12:42] <nine> JimmyZhuo: with or without RAKUDO_RAKUAST=1?

[12:42] <tellable6> nine, I'll pass your message to JimmyZhuo

[12:43] <[Coke]> SmokeMachine: no worries. *I* was the one who was suggesting it. :)

[12:43] <[Coke]> Definitely want the blin runs to be reliable.

[12:44] *** JimmyZhuo joined
[12:45] <SmokeMachine> I don’t know if that helps, but I’m sure blin have already run Red… it has even found releases problems while running it more than once…

[12:45] <[Coke]> Yes, that was with jdv running it on his box.

[12:47] <[Coke]> afk - will try to get the red failure tracked in the next few days.

[12:47] <[Coke]> I'm sure it's a setup issue on this box.

[12:47] <[Coke]> cheers.

[12:48] <SmokeMachine> Thanks! And I’ll add the missing dependencies on my META6.json as soon as possible

[12:55] <JimmyZhuo> nine: main branch with  RAKUDO_RAKUAST=1

[12:55] <tellable6> 2025-03-13T12:42:32Z #raku-dev <nine> JimmyZhuo: with or without RAKUDO_RAKUAST=1?

[12:56] <nine> JimmyZhuo: how did you check? I'm surprised because I'm pretty sure that when I tested it did regress

[12:58] <JimmyZhuo> nine: these https://colabti.org/ircloggy/raku-dev/2025-03-12#l92?

[13:00] <nine> probably, yes

[13:01] <nine> My usual testing procedure is: make && TEST_JOBS=32 RAKUDO_RAKUAST=1 nice make spectest | grep '\. ok' | sort | tee $(git describe).pure.tests | wc -l

[13:01] <nine> I do that before my change. Then commit my change. Then run again and vimdiff the two resulting .pure.tests files

[13:04] <nine> I hear that you're running tests :D

[13:05] <JimmyZhuo> haha

[13:07] <JimmyZhuo> nine: I tried again, it's same 1274

[13:08] <nine> Ok, then everything is indeed fine :)

[13:09] <Geth> ¦ rakudo/main: 1d0829631e | (Jimmy Zhuo)++ | src/Raku/ast/scoping.rakumod

[13:09] <Geth> ¦ rakudo/main: add redeclaration exception of placeholder parameter

[13:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1d0829631e

[13:09] <Geth> ¦ rakudo/main: 0ab88eec76 | niner++ (committed using GitHub Web editor) | src/Raku/ast/scoping.rakumod

[13:09] <Geth> ¦ rakudo/main: Merge pull request #5812 from zhuomingliang/placeholder

[13:09] <Geth> ¦ rakudo/main: 

[13:09] <Geth> ¦ rakudo/main: add redeclaration exception of placeholder parameter

[13:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0ab88eec76

[13:18] <jdv> i run blin in the container so if there's an issue its likely in the image, not a local box

[13:18] <jdv> but iirc Red was never a real issue

[13:40] <JimmyZhuo>  RAKUDO_RAKUAST=1 ./rakudo-m -e 'sub foo(int $x = "omg") { }'

[13:40] <JimmyZhuo> ===SORRY!=== Error while compiling 

[13:40] <JimmyZhuo> Default value 'omg' will never bind to a parameter of type int

[13:40] <JimmyZhuo> at line 

[13:40] <JimmyZhuo> it's better with rakuast

[13:59] <nine> I hope that there's no spectest requiring us to be worse :)

[14:00] <JimmyZhuo> just passed t/spec/S06-signature/optional.t

[14:03] * JimmyZhuo can't open github again because of GFW

[14:04] <JimmyZhuo> now it's 1275

[14:04] <nine> JimmyZhuo++ # yeah!

[14:11] <JimmyZhuo> nine: it is  https://github.com/zhuomingliang/rakudo TypeCheck branch, I can't create the pr, the GFW always blocks github web, which always ERR_CONNECTION_TIMED_OUT

[14:12] <Geth> ¦ rakudo: zhuomingliang++ created pull request #5814: add X::Parameter::Default::TypeCheck exception to parameters

[14:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5814

[14:12] <JimmyZhuo> ok now, just open the web

[14:12] <JimmyZhuo> It's hard :)

[14:12] <nine> my $type := $!type.PRODUCE-META-OBJECT; # That's wrong. Should be $!type.meta-object

[14:13] <nine> We really only want to produce that meta-object once. It's then cached.

[14:17] <JimmyZhuo> nine: thanks , force pushed

[14:17] <JimmyZhuo> and it's 1276?

[14:18] <Geth> ¦ rakudo/main: 9713c41f85 | (Jimmy Zhuo)++ | src/Raku/ast/signature.rakumod

[14:18] <Geth> ¦ rakudo/main: add X::Parameter::Default::TypeCheck exception to parameters

[14:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9713c41f85

[14:18] <Geth> ¦ rakudo/main: 2a6f1822e4 | niner++ (committed using GitHub Web editor) | src/Raku/ast/signature.rakumod

[14:18] <Geth> ¦ rakudo/main: Merge pull request #5814 from zhuomingliang/TypeCheck

[14:18] <Geth> ¦ rakudo/main: 

[14:18] <Geth> ¦ rakudo/main: add X::Parameter::Default::TypeCheck exception to parameters

[14:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2a6f1822e4

[14:18] <nine> That was a quick one :)

[14:21] *** JimmyZhuo left
[16:30] <Geth> ¦ rakudo/main: 9bb1fc7d4e | (Elizabeth Mattijsen)++ | 4 files

[16:30] <Geth> ¦ rakudo/main: RakuAST: allow literal expression such as 2³⁺²ⁱ

[16:30] <Geth> ¦ rakudo/main: 

[16:30] <Geth> ¦ rakudo/main: In response to #4465.  Felt that the most sense it would make to

[16:30] <Geth> ¦ rakudo/main: allow val() based expression in so far the superscript characters

[16:30] <Geth> ¦ rakudo/main: allow that (since there is no superscript period or e, this disallows

[16:30] <Geth> ¦ rakudo/main: Rats and Nums).

[16:30] <Geth> ¦ rakudo/main: 

[16:30] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[16:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9bb1fc7d4e

[16:34] <nine> Does this ^^^ work in a bootstrapped RakuAST compiler?

[16:41] <lizmat> is that merged ?

[16:42] <lizmat> or do I just do:  RAKUDO_RAKUAST=1 make install ?

[16:43] <[Coke]> red: https://gist.githubusercontent.com/coke/9d9afd2e8eb702b982fcc311d21d67a4/raw/380793fbb14695b2e432159a6fe90c1d4f35eca7/data.json

[16:44] <[Coke]> Could not find JSON::Class:ver<0.0.20+> in:\n[Red] 

[16:46] <[Coke]> if I do a zef look on Red, I don't see JSON::Class anywhere in that distro. wtf.

[16:47] <nine> Not merged yet. Just run RAKUDO_RAKUAST=1 make in the branch

[16:50] <[Coke]> guessing one of the deps uses it but doesn't declare?

[16:50] <lizmat> nine: that dies with:

[16:50] <lizmat> ===SORRY!=== Error while compiling /Users/liz/Github/rakudo/tools/build/clean-target-files.raku

[16:50] <lizmat> A unit-scoped sub definition is not allowed in a subscope;

[16:50] <lizmat> Please use the block form.

[16:50] <lizmat> at /Users/liz/Github/rakudo/tools/build/clean-target-files.raku:3

[16:51] <lizmat> ah, with make install

[16:51] <lizmat> didn't try with just "make" just yet

[16:52] <[Coke]> hurm. I see in the dep chain                     JSON::Class:ver<0.0.20+> - so Red should be able to compile...

[16:53] <nine> I have never tried make install with RakuAST

[16:55] <[Coke]> JSON::Class – AlwaysFail

[16:56] <[Coke]> So not Red's fault, SmokeMachine. :)

[16:57] <SmokeMachine> Oh! Thanks! That’s good to know! Can it be related to existing 2 different JSON::Class modules?

[16:57] <[Coke]> Might be nice to do dep analysis on all the AlwaysFails to see which ones are the most productive to fix.

[16:58] <[Coke]> we're going to get whichever one 'zef info' on the dep reports.

[16:59] <Geth> ¦ rakudo/main: cbc29eee7d | (Elizabeth Mattijsen)++ | src/core.c/Exception.rakumod

[16:59] <Geth> ¦ rakudo/main: Add a tip to MethodNotFound logic for !cursor_start

[16:59] <Geth> ¦ rakudo/main: 

[16:59] <Geth> ¦ rakudo/main: In response to #3025.

[16:59] <Geth> ¦ rakudo/main: 

[16:59] <Geth> ¦ rakudo/main:   $ raku -e 'my regex foo {.}; foo "a"'

[16:59] <Geth> ¦ rakudo/main:   No such method '!cursor_start' for string 'a'.  Did you try to call a

[16:59] <Geth> ¦ rakudo/main:   token / rule / regex directly?

[16:59] <Geth> ¦ rakudo/main:     in regex foo at -e line 1

[16:59] <Geth> ¦ rakudo/main: 

[16:59] <Geth> ¦ rakudo/main: I think this case of basically DIHWIDT is covered sufficiently with

[16:59] <Geth> ¦ rakudo/main: this.

[16:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cbc29eee7d

[17:00] <[Coke]> ah. JSON::Class deps on Test::Async which is a hard skip in blin.

[17:00] <[Coke]> afk

[17:08] <ugexe> https://go.dev/blog/osroot would be nice to have

[17:10] <ugexe> "The new os.Root type represents a directory somewhere in the local filesystem ... Root provides methods to operate on files within the root. These methods all accept filenames relative to the root, and disallow any operations that would escape from the root either using relative path components ("..") or symlinks."

[17:11] <lizmat> IO::Root ?

[17:11] <lizmat> and force all abspaths to be starting with the abspath of IO::Root ?

[17:12] <lizmat> resolved abspaths I mean?

[17:14] <ugexe> not sure, cause it does seem specific to directory but we don't have IO::Dir for instance. really it seems like os.OpenRoot opens a handle to a folder, but that handle has methods for doing things that ensure they do not escape the root

[17:16] <lizmat> doesn't look like "openat" is used by libuv

[17:18] <lizmat> https://linux.die.net/man/2/openat

[17:22] *** librasteve_ left
[17:26] <ugexe> not yet at least https://github.com/libuv/libuv/pull/4434

[17:29] <lizmat> so looks like we would need to look at using that once that'e merged >

[17:29] <lizmat> ?

[17:29] <lizmat> nine: branch builds with "make" for me

[17:31] <[Coke]> Might need a new blin status for skipped-due-to-dependencies

[17:33] <nine> lizmat: does the thing you implemented also work?

[17:33] <[Coke]> (because I won't remember this in six months when it comes up again) also, removing the hard skip and trying a run for JSON::Class again.

[17:33] * lizmat doublechecks

[17:37] <lizmat> nine: meanwhile, looks like the unit sub MAIN form is NYI

[17:37] <lizmat> m: say Q|unit sub MAIN(|);|.AST

[17:37] <camelia> rakudo-moar cbc29eee7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> say Q|unit sub MAIN(|<HERE>);|.AST␤»

[17:37] <lizmat> m: say Q/unit sub MAIN(|);/.AST

[17:37] <camelia> rakudo-moar cbc29eee7: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤A unit-scoped sub definition is not allowed in a subscope;␤Please use the block form.␤at /home/camelia/EVAL_0:1␤------> unit sub MAIN(|);<HERE><EOL>␤»

[17:37] *** finanalyst joined
[17:37] <nine> It is. Skipped that spectest because I was sure this wouldn't get me closer to compiling the setting

[17:38] <nine> Also that's probably easy for someone else to implement

[17:38] <lizmat> ok, so I'll work around it for now in that script that "make install" uses ?

[17:39] <nine> Why not just implement that support?

[17:39] <lizmat> fair enough  :-)

[17:39] <lizmat> I'll give it a stab, even though RakuAST is not in my current mindset  :-)

[18:08] *** finanalyst left
[19:09] <lizmat> nine: so I got a StatementList for the unit sub MAIN case, but that somehow needs to be turned into a Block to get it to work

[19:10] <lizmat> do we have an official way to do that?   I guess we could thunk the StatementLIst ?

[19:15] <lizmat> ok. just wrap it in a RakuAST::Blockoid  :-)

[19:17] <nine> Probably just the same as with unit scoped packages?

[19:18] <lizmat> I think I only need to find out why the unless $*R.outer-scope =:= $*UNIT condition fires

[19:19] <lizmat> I just commented out that bit while getting the rest to work

[19:23] <lizmat> looks like $*UNIT isn't set ?

[19:25] <lizmat> which isn't strange, as that doesn't appear to get set anywhere ?

[19:31] <lizmat> $*OUTER-RESOLVER =:= $*R  doesn't cut it

[19:33] <nine> That's a totally different thing

[19:34] <lizmat> so what is the RakuAST equivalent of

[19:34] <nine> Why don't you check whether outer-scope is a CompUnit?

[19:34] <lizmat> unless $*R.outer-scope =:= $*UNIT { ?

[19:34] <lizmat> ok, will try that

[19:38] <lizmat> nine: like this?

[19:38] <lizmat> unless $*R.outer-scope.HOW.name($*R.outer-scope) eq 'RakuAST::C

[19:38] <lizmat> ompUnit' {

[19:39] <nine> Didn't we agree that class names never have a use besides printing?

[19:39] <lizmat> well, yeah, but how can I get at the RakuAST::CompUnit class in the Grammar ?

[19:40] <nine> self.actions.r('CompUnit')

[19:40] <lizmat> aaah... yes, ok, it's coming back to me now  :-)

[19:41] <lizmat> that's what I meant it's not in my current mindset  :-)

[19:45] <lizmat> running spectest now

[19:51] <Geth> ¦ rakudo/main: 490a23b0cd | (Elizabeth Mattijsen)++ | 2 files

[19:51] <Geth> ¦ rakudo/main: RakuAST: add support for "unit sub MAIN"

[19:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/490a23b0cd

[19:51] <lizmat> that appears to give us t/spec/S06-other/main-semicolon.t

[19:52] <lizmat> but indeed, S32num/power.t is failing now, fixing that now

[19:56] <lizmat> m: dd ⁰⁺¹²   # huh?

[19:56] <camelia> rakudo-moar cbc29eee7: OUTPUT: «0␤»

[19:56] <lizmat> what crazy value is that ?

[19:57] <lizmat> why do we even allow that ?

[20:26] <Geth> ¦ roast: 12b4bb8fa3 | (Elizabeth Mattijsen)++ | S32-num/power.t

[20:26] <Geth> ¦ roast: Skip failing test on RakuAST

[20:26] <Geth> ¦ roast: 

[20:26] <Geth> ¦ roast: I believe this whole set of tests is bogus, and *all* of the tested

[20:26] <Geth> ¦ roast: sequences should be compilation errors

[20:26] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/12b4bb8fa3

[20:35] <lizmat> 1276 for me, which should mean 1278 for nine

[20:35] <lizmat> afk&

[20:55] <[Coke]> so removing "Test::Async" from the havok set of modules didn't work, presumably because we're missing test-depends when doing the tests.

[20:57] <[Coke]> SmokeMachine: I wonder if red used to get tested because JSON::Class didn't always depend on Test::Async

[21:00] <[Coke]> (nope that doesn't seem to be it)

[21:00] <jdv> does red work outside of blin?

[21:01] *** finanalyst joined
[21:02] <[Coke]> yup

[21:03] <[Coke]> in my blin, it can't find JSON::Class, which in turn can't find Test::Async

[21:03] <[Coke]> I'm trying to at least get JSON::Class working. (and found bin/blin's code that is pulling in test-depends)

[21:08] <[Coke]> ugexe: use Zef::Distribution; my $a = Zef::Distribution.new(name => "JSON::Class"); seems to have an empty test-depends-spec.

[21:11] <ugexe> sure, it doesnt contain any data

[21:11] <ugexe> Zef::Dsitribution.new(name => "JSON::Class") doesnt do anything like query for the module and fill out the meta data

[21:11] <[Coke]> ah

[21:12] <[Coke]> missed a step in bin/blin then, checking...

[21:35] <[Coke]> ... weird. on this azure box, I vi output/data.json (blin output), type /JSON::Class and at the C... it hangs. I connected again, it hung in the same place.

[22:21] *** finanalyst left
[22:33] <SmokeMachine> Red does not directly depends on JSON::Class…

[22:42] <SmokeMachine> Red test-depends on Test::META and Test::META depends on META6 that depends on JSON::Class… I would expect more modules to depend on that…

[22:44] <SmokeMachine> [Coke]: ^^

[23:21] *** kjp left
[23:22] *** kjp joined
[23:23] *** kjp left
[23:24] *** kjp joined
[23:39] *** sena_kun left
