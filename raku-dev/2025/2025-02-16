[00:00] *** sena_kun left
[03:00] <releasable6> Next release in ≈6 days and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:04] *** Voldenet_ joined
[03:05] *** Voldenet left
[03:05] *** Voldenet_ is now known as Voldenet

[10:06] <Geth> ¦ rakudo/main: 0da7a67daa | (Stefan Seifert)++ | 6 files

[10:06] <Geth> ¦ rakudo/main: RakuAST: preserve proper nesting of blocks

[10:06] <Geth> ¦ rakudo/main: 

[10:06] <Geth> ¦ rakudo/main: Previously we added all blocks as declarations of the surrounding

[10:06] <Geth> ¦ rakudo/main: lexical scope. This worked well enough because most times it's a lexical

[10:06] <Geth> ¦ rakudo/main: scope that generates a block. However this is not always the case.

[10:06] <Geth> ¦ rakudo/main: Thunks also generate blocks. Problems start when we e.g. closure clone

[10:06] <Geth> ¦ rakudo/main: such a thunk. If blocks belonging to its children are not properly

[10:06] <Geth> ¦ rakudo/main: nested, the closure clone won't cover them. Then we end up with invalid

[10:06] <Geth> ¦ rakudo/main: values in variables.

[10:06] <Geth> ¦ rakudo/main: 

[10:06] <Geth> ¦ rakudo/main: Fix by differentiating between lexical scopes and block creators.

[10:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0da7a67daa

[10:06] <Geth> ¦ rakudo/main: f00e5edf45 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[10:06] <Geth> ¦ rakudo/main: RakuAST: use raku-smartmatch dispatcher for matching regexes

[10:06] <Geth> ¦ rakudo/main: 

[10:06] <Geth> ¦ rakudo/main: We should use the dispatcher for everything, but this fixes the test for

[10:06] <Geth> ¦ rakudo/main: now.

[10:06] <Geth> ¦ rakudo/main: 

[10:06] <Geth> ¦ rakudo/main: Fixes "abc" ~~ m:g/. { say $/ }/;

[10:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f00e5edf45

[10:06] <nine> That was....hard to get right

[10:31] <Geth> ¦ rakudo/main: 1aea298ded | (Elizabeth Mattijsen)++ | src/core.c/Hyper.rakumod

[10:31] <Geth> ¦ rakudo/main: Streamline hypering a bit more

[10:31] <Geth> ¦ rakudo/main: 

[10:31] <Geth> ¦ rakudo/main: It either works storing in a similar data structure, or it does not.

[10:31] <Geth> ¦ rakudo/main: So on need to check whether it can STORE or not.  #5778

[10:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1aea298ded

[10:49] *** sena_kun joined
[11:11] <Geth> ¦ roast: 100b632514 | (Elizabeth Mattijsen)++ | S12-methods/parallel-dispatch.t

[11:11] <Geth> ¦ roast: Fix bogus >>.?foo test

[11:11] <Geth> ¦ roast: 

[11:11] <Geth> ¦ roast: Since >>. tries to create the same data structure as the invocant

[11:11] <Geth> ¦ roast: (which in this case is an untyped array), the production of Nil

[11:11] <Geth> ¦ roast: causes the elements in the new array to be set to the default

[11:11] <Geth> ¦ roast: value, aka Any.

[11:11] <Geth> ¦ roast: 

[11:11] <Geth> ¦ roast: <…commit message has 5 more lines…>

[11:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/100b632514

[11:27] <lizmat> argh, waterbed!

[11:50] <Geth> ¦ rakudo/main: a6d76f8c8f | (Elizabeth Mattijsen)++ | 2 files

[11:50] <Geth> ¦ rakudo/main: Make sure that .deepmap returns the right structure

[11:50] <Geth> ¦ rakudo/main: 

[11:50] <Geth> ¦ rakudo/main: And make sure that it is filled in the correct way.  Previously

[11:50] <Geth> ¦ rakudo/main: it would just hack the IterationBuffer into an object of the same

[11:50] <Geth> ¦ rakudo/main: type as the invocant, which allowed wrong values to appear inside

[11:50] <Geth> ¦ rakudo/main: the data structure, as was spotted in #5778.

[11:50] <Geth> ¦ rakudo/main: 

[11:50] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>

[11:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a6d76f8c8f

[12:18] <Geth> ¦ roast: 30dc6a2995 | (Elizabeth Mattijsen)++ | 2 files

[12:18] <Geth> ¦ roast: Add tests for #5778

[12:18] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/30dc6a2995

[12:51] <Geth> ¦ rakudo/main: 1faf11482f | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[12:51] <Geth> ¦ rakudo/main: Introduce Hash::Ordered

[12:51] <Geth> ¦ rakudo/main: 

[12:51] <Geth> ¦ rakudo/main: This subclass of Hash will keep the order in which keys have been

[12:51] <Geth> ¦ rakudo/main: added, with as little overhead as possible.

[12:51] <Geth> ¦ rakudo/main: 

[12:51] <Geth> ¦ rakudo/main: The theory of operation is that whenever a key is accessed, and the

[12:51] <Geth> ¦ rakudo/main: key does **not** exist in the hash, then the key will be added to

[12:51] <Geth> ¦ rakudo/main: <…commit message has 29 more lines…>

[12:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1faf11482f

[14:19] <Geth> ¦ rakudo/main: cd2ed227be | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[14:19] <Geth> ¦ rakudo/main: RakuAST: work around "Misordered regex compilation" problem

[14:19] <Geth> ¦ rakudo/main: 

[14:19] <Geth> ¦ rakudo/main: Regex nodes need their IMPL-REGEX-QAST called first, so their body gets

[14:19] <Geth> ¦ rakudo/main: generated with the correct modifiers that are passed to this method.

[14:19] <Geth> ¦ rakudo/main: Only then are we allowed to call IMPL-THUNKED-REGEX-QAST.

[14:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cd2ed227be

[14:19] <Geth> ¦ rakudo/main: 6922f88fc1 | (Stefan Seifert)++ | 2 files

[14:19] <Geth> ¦ rakudo/main: RakuAST: fix regex captures not found

[14:19] <Geth> ¦ rakudo/main: 

[14:19] <Geth> ¦ rakudo/main: This gave us a VMNull cannot be called because the __REGEX_CAPTURE_

[14:19] <Geth> ¦ rakudo/main: lexical was declared in a nested block instead of the surrounding

[14:19] <Geth> ¦ rakudo/main: lexical scope.

[14:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6922f88fc1

[14:19] <Geth> ¦ rakudo/main: 204a8379da | (Stefan Seifert)++ | 3 files

[14:19] <Geth> ¦ rakudo/main: RakuAST: get cuid annotations in closure clones QAST dump

[14:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/204a8379da

[14:22] <nine> Btw. official count is currently 1167

[14:24] <lizmat> nice!!   nine++

[14:38] <Geth> ¦ rakudo/main: 698c5861d8 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[14:38] <Geth> ¦ rakudo/main: RakuAST: properly support raw slurpy args

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: Fixes sub(*@a is raw) { @a[0]++ } to actually write back

[14:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/698c5861d8

[14:38] <nine> Ha! That's 2 for the price of 1. Making it 1169

[16:49] <timo> ah sweet

[18:30] <lizmat> nine: fwiw, I'm still seeing one less

[18:30] <lizmat> wonder if it is ARM related

[20:22] <Geth> ¦ rakudo/main: 4a63e5c37c | (Elizabeth Mattijsen)++ | src/core.c/Main.rakumod

[20:22] <Geth> ¦ rakudo/main: Handle single param to named array args better in MAIN

[20:22] <Geth> ¦ rakudo/main: 

[20:22] <Geth> ¦ rakudo/main: Before this, the handling of named array args was to first just

[20:22] <Geth> ¦ rakudo/main: try to bind the given args to the MAIN signatures.  If that failed

[20:22] <Geth> ¦ rakudo/main: it would convert all named parameters to lists in the capture,

[20:23] <Geth> ¦ rakudo/main: and then try again.

[20:23] <Geth> ¦ rakudo/main: 

[20:23] <Geth> ¦ rakudo/main: <…commit message has 11 more lines…>

[20:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4a63e5c37c

[20:31] <Geth> ¦ roast: 41602e2493 | (Elizabeth Mattijsen)++ | S06-other/main.t

[20:31] <Geth> ¦ roast: Add tests for #5159

[20:31] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/41602e2493

[23:00] <releasable6> Next release in ≈5 days and ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:18] *** sena_kun left
[23:53] <SmokeMachine> rakkable: Stash

[23:53] <rakkable> SmokeMachine, Don't know how to handle 'Stash'

[23:53] <SmokeMachine> rakkable: help

[23:59] <SmokeMachine> rakkable: eco-provides Stash

[23:59] <rakkable> SmokeMachine, Running: eco-provides Stash, please be patient!

[23:59] <rakkable> SmokeMachine, Found 50 lines in 16 files (13 distributions):

