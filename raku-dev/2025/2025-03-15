[02:59] *** librasteve_ left
[06:54] <Geth> ¦ rakudo/main: f3f31de633 | (Daniel Green)++ | src/Raku/ast/variable-declaration.rakumod

[06:54] <Geth> ¦ rakudo/main: RakuAST: throw for '!' vars in 'my' | 'our' | 'state' scope

[06:54] <Geth> ¦ rakudo/main: 

[06:54] <Geth> ¦ rakudo/main: So e.g., `role A { my $!foo }` now throws `X::Syntax::Variable::Twigil`.

[06:54] <Geth> ¦ rakudo/main: 

[06:54] <Geth> ¦ rakudo/main: No new spectest files pass, but fixes one of the two failing tests in

[06:54] <Geth> ¦ rakudo/main: t/spec/6.c/S14-roles/mixin-6c.t.

[06:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f3f31de633

[06:55] <Geth> ¦ rakudo/main: e524c0438c | niner++ (committed using GitHub Web editor) | src/Raku/ast/variable-declaration.rakumod

[06:55] <Geth> ¦ rakudo/main: Merge pull request #5816 from MasterDuke17/rakuast_fail_for_private_vars_in_my_or_our_or_state_scope

[06:55] <Geth> ¦ rakudo/main: 

[06:55] <Geth> ¦ rakudo/main: RakuAST: throw for '!' vars in 'my' | 'our' | 'state' scope

[06:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e524c0438c

[07:36] *** finanalyst joined
[09:00] *** JimmyZhuo joined
[09:42] *** sena_kun joined
[09:49] *** rakkable left
[09:49] *** rakkable joined
[10:04] *** finanalyst left
[10:23] <lizmat> nine: golfed final error in t/spec/APPENDICES/A01-limits/misc.t to https://gist.github.com/lizmat/28ae4ee61f0ba3563c154a56b61a19af

[10:24] <lizmat> looks like the consumption of a role changes its outer lexical scope

[10:27] <lizmat> perhaps that rings an immediate bell with you ?

[10:44] <nine> lizmat: better golf: my $a = "NOT set"; sub a() { $a = "set" }; BEGIN a(); say $a;

[10:45] <nine> But here's the kicker:

[10:45] <nine> m: my $a = "NOT set"; sub a() { $a = "set" }; BEGIN a(); say $a;

[10:45] <camelia> rakudo-moar e524c0438: OUTPUT: «NOT set␤»

[10:45] <nine> Same with:

[10:45] <nine> m: my $a = "NOT set"; role Foo { $a = "set" }; class Bar does Foo { }; say $a;

[10:45] <camelia> rakudo-moar e524c0438: OUTPUT: «NOT set␤»

[10:46] <lizmat> so this issue was known to you already

[10:46] <lizmat> aka the compile time outer is different from the runtime outer scope?

[10:47] <nine> No, just golfed it further. But it's really a bug in that code. Think about when BEGIN really runs.

[10:47] <nine> It does so before $a is initialized with "NOT set";

[10:47] <nine> So the fix to your golf is: BEGIN my $a = "NOT set"; role A { method a($ where { say "in where"; dd $a; $a = "set" }) { dd } }; class B does A { }; A.new.a(2); say $a;

[10:48] <lizmat> that would imply the test is faulty

[10:49] <lizmat> hmmm otoh, without RakuAST it does work...

[10:51] <lizmat> without the BEGIN, and also with optimization switched off

[10:55] <nine> On the other hand the A.new.a is at runtime and definitely after $a is initialized.

[10:56] <nine> What definitely happens at BEGIN time is dynamic compilation of that method.

[10:56] <lizmat> I just don't understand why it works in the legacy grammar

[10:58] <nine> It's World's compile_in_context vs. IMPL-COMPILE-DYNAMICALLY

[11:00] <lizmat> so the latter is missing:

[11:00] <lizmat> Create outer lexical contexts with all symbols visible. Maybe

[11:00] <lizmat>         # we can be a bit smarter here some day. But for now we just make a

[11:00] <lizmat>         # single frame and copy all the visible things into it.

[11:00] <lizmat> ?

[11:01] <nine> It's not missing that. We take a different approach with self.IMPL-FIXUP-DYNAMICALLY-COMPILED-BLOCK

[11:11] <JimmyZhuo> m: my Str @AoS = <a b>;

[11:11] <camelia> rakudo-moar e524c0438: ( no output )

[11:14] <Geth> ¦ rakudo/main: b12b45b52e | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[11:14] <Geth> ¦ rakudo/main: RakuAST: don't add role stubs to their role groups

[11:14] <Geth> ¦ rakudo/main: 

[11:14] <Geth> ¦ rakudo/main: Normally when a package is stubbed, the generated meta-object is later

[11:14] <Geth> ¦ rakudo/main: re-used when the package is fully defined. This ensures that any lookups

[11:14] <Geth> ¦ rakudo/main: done between stubbing and defining ultimately resolve to the meta object

[11:14] <Geth> ¦ rakudo/main: that is fully defined.

[11:14] <Geth> ¦ rakudo/main: 

[11:15] <Geth> ¦ rakudo/main: <…commit message has 10 more lines…>

[11:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b12b45b52e

[11:15] <Geth> ¦ rakudo/main: d02dd8e36e | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[11:15] <Geth> ¦ rakudo/main: RakuAST: fix our scoped proto methods missing from their package

[11:15] <Geth> ¦ rakudo/main: 

[11:15] <Geth> ¦ rakudo/main: Fixes: my class Dummy { our proto method foo() { } }; dd &Dummy::foo

[11:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d02dd8e36e

[11:15] <nine> 1078 fully bootstrapped (because it fixed auto-generation of proto methods)

[11:16] <lizmat> coming back to my gist

[11:17] <lizmat> I still don't grok why initializing $a at BEGIN time would fix the issue

[11:17] <lizmat> as the method is called at runtime

[11:17] <lizmat> *after* $a got initialized

[11:18] <lizmat> and the where block is also called at runtime afaics

[11:22] <nine> $a in that where block no longer refers to the lexical defined in the outer scope. Actually it never did because that scope (and thus the lexical) didn't even exist yet when the method was compiled. The old frontend fakes up a frame containing all lexically visible symbols and uses that as outer.

[11:23] <nine> In RakuAST we instead resolve all symbols at compile time and replace e.g. a QAST::Var(:scope<lexical>) with a QAST::WVal holding the compile tiem value

[11:23] <lizmat> so the test is faulty / or needs changing

[11:23] <nine> not sure about that

[11:25] <nine> While neither the scope nor the lexical will exist yet, the container that eventually gets bound to it does.

[11:26] <nine> m: 'my $a; BEGIN $a = 1; say $a'.AST.EVAL

[11:26] <camelia> rakudo-moar e524c0438: OUTPUT: «===SORRY!===␤Unknown compilation input 'qast'␤»

[11:27] <nine> That's why this ^^^ works at all (ignoring that EVAL issue)

[11:29] <lizmat> well, the test appears to be about determining the order in which candidates are run, so I can change the test using a dynvar

[11:32] <Geth> ¦ roast: c473f3ceac | (Elizabeth Mattijsen)++ | APPENDICES/A01-limits/misc.t

[11:32] <Geth> ¦ roast: Fix test checking candidate checking order

[11:32] <Geth> ¦ roast: 

[11:32] <Geth> ¦ roast: Accessing lexicals from within where blocks is not guaranteed to

[11:32] <Geth> ¦ roast: work.  So use a dynvar to do the checking, rather than a lexical.

[11:32] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c473f3ceac

[11:32] <lizmat> that's +1 for RakuAST  :-)

[11:33] <nine> But that just sweeps a problem under the rug

[11:34] <lizmat> the test was not about this issue...  and it already mentioned it was using unsupported features to make the test

[11:36] <lizmat> I mean, isn't that similar to incorrectly thinking that classes are closure clones?

[11:41] <nine> This reproduces the same problem without using unsupported where clause side effects: my $a = "NOT set"; role Foo { method foo() { $a = "set" } }; class Bar does Foo { }; Foo.new.foo; say $a;

[11:44] <lizmat> ok, then I'll add a test for that

[12:24] <Geth> ¦ roast: 0398c33174 | (Elizabeth Mattijsen)++ | 6.c/S14-roles/mixin-6c.t

[12:24] <Geth> ¦ roast: Add test for accesing outer lexicals in role

[12:24] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0398c33174

[12:26] <Geth> ¦ rakudo: zhuomingliang++ created pull request #5817: improve type check, there still a lot of improvement

[12:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5817

[12:40] * nine is afk for a few hours

[13:20] <Geth> ¦ roast: dca7e75327 | (Jimmy Zhuo)++ | 2 files

[13:20] <Geth> ¦ roast: change runtime error to compiling error

[13:20] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/dca7e75327

[13:43] <JimmyZhuo> hmm, t/spec/S17-promise/nonblocking-await.t and t/spec/S17-procasync/many-processes-no-close-stdin.t sometimes failed

[13:54] *** JimmyZhuo left
[13:58] *** MasterDuke joined
[14:00] <MasterDuke> m: q|say pi()|.EVAL; CATCH { dd $_ }

[14:00] <camelia> rakudo-moar d02dd8e36: OUTPUT: «X::Undeclared.new(what => "Variable", symbol => "\&pi", suggestions => [], pos => Any, filename => "EVAL_0", line => 1, directive-filename => Any, column => Any, modules => [], is-compile-time => Bool::True, pre => "say ", post => "pi()", highexpect =…»

[14:00] <tellable6> hey MasterDuke, you have a message: https://gist.github.com/9edafe8329124e982b6bde08ec1715a6

[14:00] <MasterDuke> m: q|say pi()|.AST.EVAL; CATCH { dd $_ }

[14:00] <camelia> rakudo-moar d02dd8e36: OUTPUT: «X::Undeclared::Symbols.new(post_types => {}, unk_types => {}, unk_routines => {:pi($(1,))}, routine_suggestion => {:pi($( ))}, type_suggestion => {}, pos => Any, filename => "EVAL_0", line => Any, directive-filename => Any, column => Any, modules => […»

[14:01] <MasterDuke> this is why a couple spectests fail. `X::Undeclared::Symbols` isn't a subclass of `X::Undeclared`

[14:02] <MasterDuke> however, i like the error message from the RakuAST version better

[14:03] <MasterDuke> `Variable '&pi' is not declared.  Perhaps you forgot a 'sub' if this was intended to be part of a signature?` from legacy vs `Undeclared routine: pi used at line 1` from RakuAST

[14:22] *** MasterDuke left
[15:11] <lizmat> hmmm: No such method 'add-worry' for invocant of type

[15:11] <lizmat> 'RakuAST::Resolver::EVAL'

[15:11] <lizmat> which is weird, as that inherits from RakuAST::Resolver, and that *has* an "add-worry"

[15:41] <lizmat> m: class A { method TWEAK { dd } }; class B is A { }; B.new    # I wonder this is a bug

[15:41] <camelia> rakudo-moar d02dd8e36: OUTPUT: «method TWEAK(A $:: *%_)␤method TWEAK(A $:: *%_)␤»

[15:41] <lizmat> yes, I understand that you should make it a submethod if you don't want that

[15:42] <lizmat> but why is it callled twice ??

[16:57] <Geth> ¦ roast/master: 4 commits pushed by (Daniel Green)++, MasterDuke17++

[16:57] <Geth> ¦ roast/master: cb53fd9876 | Simplify test

[16:57] <Geth> ¦ roast/master: a781dd3ff8 | Fix `Useless use of constant integer 1 in sink context` warning

[16:57] <Geth> ¦ roast/master: 05592084f9 | Fix `Useless use of constant integer 1 in sink context` seen with RakuAST

[16:57] <Geth> ¦ roast/master: d31db093e3 | Merge pull request #871 from MasterDuke17/simplify_6.c/S14-roles/mixin-6c.t

[16:57] <Geth> ¦ roast/master: review: https://github.com/Raku/roast/compare/dca7e75327e0...d31db093e363

[20:11] *** MasterDuke joined
[20:11] *** finanalyst joined
[20:12] <MasterDuke> huh. why doesn't `try self.actions.r('EXPERIMENTAL-' ~ nqp::uc($feature))` succeed when `$feature` eq 'MACROS' in src/Raku/Grammar.nqp?

[20:13] <nine> That's actually the reason why my reported numbers are a bit higher: I have a local change in t/spec changing that X::Undeclared into X::Undeclared::Symbols

[20:14] <MasterDuke> ha, nice

[20:30] *** MasterDuke left
[20:48] *** MasterDuke joined
[20:48] <MasterDuke> can't find EXPERIMENTAL-PACK either

[20:50] <MasterDuke> both are defined in lib/experimental.rakumod

[20:53] <timo> was pack thrown out?

[20:53] <timo> m: use experimental :pack;

[20:53] <camelia> rakudo-moar d02dd8e36: ( no output )

[20:54] <timo> guess not

[20:57] <MasterDuke> i thought maybe i could try implementing some of the grammar to recognize macros, but pretty sure i don't want to get into having to deal with exporting symbols and such

[21:33] *** MasterDuke left
[21:44] *** finanalyst left
[22:31] <timo> i'm gonna try making a better reproducer for gh1201 based on a fresh theory i just developed

[22:59] *** sena_kun left
[23:12] <[Coke]> I wouldn't do anything with macros with the non-RakuAST impl.

[23:13] <timo> i think he was suggesting to work on the rakuast bits related to macros?

[23:14] <[Coke]> ah

