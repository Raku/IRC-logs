[00:11] <japhb> Welp, looks like I need to rebuild all.  Managed to crash rak trying to see if I'm using wait-condition/need-condition anywhere.

[00:11] <japhb> FWIW, I think those are *far* more likely to be used in bespoke code in the wild than in the ecosystem anyway.

[00:43] <japhb> Is it expected that as of rakudo/main HEAD (f3ae9c3876) that it would fail `make test`

[00:43] <japhb> ?

[01:31] <ugexe> Tests_Lin Lin_MVM_normal started failing on Feb 23, 2025 and hasn't been green since

[01:31] <ugexe> which seems kind of odd, since I doubt rakudo would have been broken that long without anyone noticing

[01:32] <ugexe> https://dev.azure.com/Rakudo/rakudo/_build/results?buildId=7139&view=ms.vss-test-web.build-test-results-tab

[01:33] <ugexe> that shows the tests that are failing in CI, not sure if it correlates to the failures you're seeing though

[01:35] <ugexe> i wonder if those tests pass in rakuast or something. that could explain how the failures are being missed during active development

[01:43] <japhb> ugexe: Yeah, those look related.  I wasn't too surprised about the t/12-rakuast/ failures, figuring that was a "committed on wrong branch" sort of issue.  I was a bit more surprised by the t/02-rakudo/07-implementation-detail-* tests failing, indicating visible new "global lowercase CORE::/SETTING:: subs added" -- not because of the chance of that happening, but because the expected/got pair is 

[01:43] <japhb> `Set.new()` versus `Set.new("")`.  Which seems like an actual bug.

[01:44] <japhb> I mean, we still need to fix the t/12-rakuast/ failures in the `main` branch before release, but that's probably trivial.

[03:53] *** codesections joined
[03:57] *** codesections left
[04:23] *** codesections joined
[04:28] *** codesections left
[04:28] *** codesections joined
[04:32] *** codesections left
[04:55] *** codesections joined
[05:00] *** codesections left
[08:34] *** finanalyst joined
[09:36] <Geth> ¦ rakudo/main: 03372894d3 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[09:36] <Geth> ¦ rakudo/main: Skip multislice array test for now

[09:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/03372894d3

[10:00] *** sena_kun joined
[10:14] <Geth> ¦ rakudo/main: 8475b1d607 | (Elizabeth Mattijsen)++ | t/12-rakuast/signature.rakutest

[10:14] <Geth> ¦ rakudo/main: Mark failing test as todo for now

[10:14] <Geth> ¦ rakudo/main: 

[10:14] <Geth> ¦ rakudo/main: Apparently creating a sub programmatically with RakuAST does **not**

[10:14] <Geth> ¦ rakudo/main: set the parameter type correctly.  Creating a sub in the full grammar

[10:14] <Geth> ¦ rakudo/main: *does* work correctly.

[10:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8475b1d607

[10:40] <lizmat> bisectable6: old=2025.02 use v6.*; say RakuAST::Var::Attribute::Public.new("foo")

[10:40] <bisectable6> lizmat, Bisecting by exit code (old=2025.02 new=8475b1d). Old exit code: 0

[10:41] <bisectable6> lizmat, bisect log: https://gist.github.com/ad8e5dc96c996853acdb57a203071e4d

[10:41] <bisectable6> lizmat, (2025-03-21) https://github.com/rakudo/rakudo/commit/f7f670f39d8c7b97bb1dbfbfd1b61d18c30c19f8

[10:44] <Geth> ¦ rakudo/main: b801bb5b98 | (Elizabeth Mattijsen)++ | 2 files

[10:44] <Geth> ¦ rakudo/main: RakuAST: fix testing / .raku of ::Var::Attribute::Public

[10:44] <Geth> ¦ rakudo/main: 

[10:44] <Geth> ¦ rakudo/main: Commit f7f670f changed the intreface of RakuAST::Var::Attribute::Public

[10:44] <Geth> ¦ rakudo/main: from one positional to two nameds, with the second named being optional

[10:44] <Geth> ¦ rakudo/main: and apparently used for internal purposes only.

[10:44] <Geth> ¦ rakudo/main: 

[10:44] <Geth> ¦ rakudo/main: This commit adapts to this changed interface, although I doubt it

[10:44] <Geth> ¦ rakudo/main: should have.  At least it is clean for the 2025.03 release now.

[10:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b801bb5b98

[10:49] <lizmat> bisectable6: old=2025.02 use v6.*; say Q|s/o/x/|.AST

[10:49] <bisectable6> lizmat, On both starting points (old=2025.02 new=8475b1d) the exit code is 0 and the output is identical as well

[10:49] <bisectable6> lizmat, https://gist.github.com/446fe263750ac1be4628a2156c4625d1

[10:53] <Geth> ¦ rakudo/main: c7cfbfca3a | (Elizabeth Mattijsen)++ | t/12-rakuast/regex-substitution.rakutest

[10:53] <Geth> ¦ rakudo/main: RakuAST: mark broken tests as todo for now

[10:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c7cfbfca3a

[11:06] *** finanalyst left
[11:24] <Geth> ¦ rakudo/main: 7826a7672f | (Elizabeth Mattijsen)++ | t/12-rakuast/role.rakutest

[11:24] <Geth> ¦ rakudo/main: RakuAST: skip role tests for now

[11:24] <Geth> ¦ rakudo/main: 

[11:24] <Geth> ¦ rakudo/main: Programmatically built roles are severely broken at the moment

[11:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7826a7672f

[11:37] *** Geth joined
[11:44] <nine> lizmat: actually I added that second parameter for Var::Attribute::Public explicitly for synthetic ASTs. Would have been slightly less effort to just call replace-args from the Actions :)

[11:45] <nine> Otherwise how would you create an AST for $.foo: 1, 2?

[11:45] <lizmat> well, if you change the API, you need to change the tests that test the API  :-)

[11:47] <Geth> ¦ rakudo/main: 69d4fcb4ee | (Elizabeth Mattijsen)++ | 3 files

[11:47] <Geth> ¦ rakudo/main: Remove special casing in implementation-detail test

[11:47] <Geth> ¦ rakudo/main: 

[11:47] <Geth> ¦ rakudo/main: Apparently an empty "" would be created before, but no longer.

[11:47] <Geth> ¦ rakudo/main: No idea what changed this, but this simplifies the test, so it is

[11:47] <Geth> ¦ rakudo/main: probably good

[11:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/69d4fcb4ee

[11:47] <nine> Yes, I probably should. Still I cannot overstate how overstressed I am with this whole thing, so I take every little shady excuse to trim down the amount of work necessary to get to the minimal goal for the grant.

[11:53] *** JimmyZhuo joined
[12:05] <lizmat> at least "make test" is clean now

[12:09] <lizmat> nine: I'm not understanding why $.a: 1,2 would need special handling ?

[12:10] <lizmat> could have generated that as self.a.item: 1,2

[12:11] <lizmat> also: shouldn't $!a: 1,2 need to work as well then ?

[12:12] <lizmat> anyways, post 2025.03 release  :-)

[12:12] <lizmat> going to be mostly afk& for most of the day

[12:18] <nine> $!a translates direclty nqp::attribute. There's no way this can refer to a private method

[12:19] <nine> And yes, that's one of the inconsistencies that $.foo syntax brought with it.

[12:19] <nine> Just like $.^name could have also meant "give me the type name of the value in the anonymous scalar variable"

[12:19] <nine> And $.name could have meant "call method `name` on the value in $" for that matter

[12:20] <nine> In fact with my commit $.a: 1, 2 no longer has special handling. It generates exactly the same way as $.a(1, 2)

[12:21] <nine> $.a(1, 2) previously had special handling in EXPR-POSTFIX which my commit removed. That was the one case where supporting a dubious feature actually made the code better :)

[12:22] <lizmat> ok, I see your point now

[12:22] <lizmat> afk&

[13:20] *** JimmyZhuo left
[14:36] *** librasteve_ left
[18:34] *** [Coke] left
[19:43] *** rakkable left
[19:43] *** rakkable joined
[19:59] *** finanalyst joined
[20:01] *** finanalyst left
[20:30] *** [Coke] joined
[21:09] *** vrurg joined
[21:09] *** vrurg_ left
[23:34] *** sena_kun left
[23:40] *** sena_kun joined
[23:47] *** sena_kun left
