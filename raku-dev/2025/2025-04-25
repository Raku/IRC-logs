[00:30] *** MasterDuke joined
[00:31] <MasterDuke> anyone have any objections to merging https://github.com/rakudo/rakudo/pull/5844 ?

[00:33] <MasterDuke> JimmyZ: are you going to do any more work on https://github.com/Raku/nqp/pull/843 or is it ready to merge?

[00:33] <tellable6> MasterDuke, I'll pass your message to JimmyZ

[00:35] <MasterDuke> i have a branch that makes singletons for the most common Nodify() calls, but if there's a way to get rid of Nodify all together that's even better...

[00:48] *** [Coke]_ joined
[00:49] *** greenfork_ joined
[00:49] *** nativecallable6_ joined
[00:49] *** shareable6__ joined
[00:49] *** releasable6__ joined
[00:50] *** releasable6 left
[00:50] *** nativecallable6 left
[00:50] *** shareable6 left
[00:50] *** [Coke] left
[00:50] *** greenfork left
[00:50] *** greenfork_ is now known as greenfork

[00:51] *** jdv left
[00:52] *** jdv joined
[00:53] *** MasterDuke left
[08:55] <Geth> ¦ rakudo/main: b527cefcb2 | MasterDuke17++ (committed using GitHub Web editor) | 5 files

[08:55] <Geth> ¦ rakudo/main: Some random attribute access consistency changes (#5844)

[08:55] <Geth> ¦ rakudo/main: 

[08:55] <Geth> ¦ rakudo/main: Fix a couple cases of native attributes not using the typed accessor,

[08:55] <Geth> ¦ rakudo/main: and make some other attributes consistent with similar ones.

[08:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b527cefcb2

[09:25] <nine> MasterDuke: I've played around a bit with the build system. With this you get it to compile the BOOTSTRAP before Raku::Actions:

[09:25] <tellable6> nine, I'll pass your message to MasterDuke

[09:25] <nine> @comp(@bsm(RAKUDO_A_R)@: @bpm(NQP_VERSION_FILE)@ @use_prereqs(@nfp(@bpm(BUILD_DIR)@/RakuActions.nqp)@)@ @bsm(RAKUDO_P)@ @bsm(RAKUDO_BOOTSTRAP_C)@ @bsm(RAKUDO_OPS)@)@

[09:26] <nine> Then you can use Perl6::BOOTSTRAP::v6c; in Raku::Actions

[09:26] <nine> However that also imports the EXPORTHOW so we then try to create Raku classes instead of NQP classes and the metamodel is very confused. So I think we'd have to put RakuAST into its own file and import that from both Raku::Actions and the SETTING

[09:49] *** dogbert17 left
[11:07] *** JimmyZhuo joined
[11:08] <JimmyZhuo> MasterDuke: I think it's ok to merge, but I didn't test raku roast yet.

[11:08] <tellable6> JimmyZhuo, I'll pass your message to MasterDuke

[12:21] *** [Coke]_ is now known as [Coke]

[12:27] *** melezhik joined
[12:27] <melezhik> copy pasting from raku channel - "question from Alpine maintainer who is doing raku-* package for Sparrow - "are the precompilation files specific to a particular version of Rakudo? In other words, after a Rakudo upgrade, do i need to precompile every Raku module again?"	11:28	 My knowlege it is not, but I am not sure."

[12:38] *** melezhik left
[12:39] <nine> Yes they are. That's why the compiler's id is included in the path name

[12:44] *** melezhik joined
[12:44] <melezhik> .

[12:44] <tellable6> 2025-04-25T12:43:02Z #raku <nine> melezhik: if that alpine list impresses you, what about the openSUSE one? https://build.opensuse.org/project/show/devel:languages:raku

[12:45] <melezhik> nine: what then alpine maintainer should do? recomple every time for every new rakudo version is bad idea

[12:46] <nine> No, it's exactly the right idea.

[12:46] <nine> It's also absolutely pain free on e.g. the open build service.

[13:04] *** melezhik left
[13:05] <JimmyZhuo> by using moar --dump Grammar.moarvm, and reading these codes, I can see there is a lot of room for improvement to reduce it's size, and make it faster. some of these improvements is easy, and some is hard for me

[13:05] <nine> JimmyZhuo: keep in mind that spesh will simplify that code a lot at runtime with the information about observed types

[13:07] <JimmyZhuo> nine: yes, I think some can be remove by spesh, and some can't 

[13:14] *** JimmyZhuo left
[13:24] *** melezhik joined
[13:26] <melezhik> nine: I am looking from an end user point of vie - so every time Rakudo gets upgraded on VM they need to upgrade all the Raku packages , doubt this is a good scenario 

[13:29] <nine> Why is it not? It's exactly the same as I get with almost every other software including Python and Perl

[13:30] *** melezhik left
[13:30] *** raku joined
[13:36] *** raku left
[13:45] <lizmat> also: why include .precomp files at all for modules?

[13:46] <lizmat> they're created automatically on first usage ?

[13:46] <nine> For the same reason we're not all using Gentoo?

[13:47] <nine> Why would you do the same work millions of times when the result should be identical in every case?

[13:48] <lizmat> ok, but don't we have an issue then with updates, leaving stale .precomp files around?

[13:49] <nine> On inferior systems maybe. But since we're talking about Linux distributions with proper package managers, no, not at all.

[13:49] <nine> That's after all the point of having package managers in the first place.

[13:49] <lizmat> ok, I'm glad to hear then:   melezhik: please ignore my earlier "advice" :-)

[13:50] <nine> It's actually the opposite: the stale .precomp problem only exists if you rely on Rakudo's auto-compilation.

[13:52] <lizmat> which I do a lot...  :-)   hence my worries

[13:53] <lizmat> nine: does this not also imply that one could exclude source files from a distribution ?

[13:54] <nine> Almost. I think I wrote about binary-only distributions years back and the conclusion was that it would only take a few tweaks to make that possible

[13:54] <lizmat> cool...  something to think about  :)

[13:54] <lizmat> afk&

[15:01] *** finanalyst joined
[15:34] *** melezhik joined
[15:35] *** melezhik left
[15:35] *** melezhik joined
[15:36] *** melezhik left
[15:36] *** melezhik joined
[15:37] <melezhik> nine: ok, looks like Python has the similar situation with that regards - https://stackoverflow.com/a/43547026/5147708

[15:37] <tellable6> 2025-04-25T13:44:14Z #moarvm <lizmat> melezhik: .precomp directories will be created automatically on first execution of a module

[15:37] <tellable6> 2025-04-25T13:44:44Z #moarvm <lizmat> melezhik: they should probably *not* be included in a distribution

[15:38] <melezhik> ok, I will update alpine maintenaners  on that matter

[15:40] <melezhik> looks like given all the distributions are in place apk update && apk upgrade should be enough

[15:42] *** melezhik left
[16:12] *** finanalyst left
[16:37] *** nine left
[16:37] *** nine joined
[16:58] <[Coke]> releasable6__: next

[16:58] <releasable6__> [Coke], Next release in ≈22 days and ≈2 hours. There are no known blockers. 5 out of 7 commits logged

[16:58] <releasable6__> [Coke], Details: https://gist.github.com/31ea17d24eae49f5ae96ae3622c40499

[16:59] <[Coke]> anyone know how to get them to rename themselves? I think I can do a trivial change on the repo, but is there a better/devops way?

[17:12] *** Xliff joined
[18:41] *** finanalyst joined
[19:41] *** finanalyst left
[20:31] <patrickb> jdv: I did not intend for this to happen again. I actually spent 2 hours or so moving my PC to my parents to keep it available during my absence. But for some reason I'm again unable to access the system. Argh!

[20:32] <patrickb> I did recently buy a JetKVM (did not arrive yet) which will hopefully once end for all put an end to this misery.

[20:34] <patrickb> Fundamental issue: How do I remotely and reliably boot up a computer? (Failed attempts: WakeOnLAN, a WiFi plug + PC boot up on power up)

[20:35] <jdv> nice:)

[20:42] <ab5tract> patrickb: you can always try bribing the parental units into pressing the power button as necessary :)

[20:46] <ab5tract> the folks who I know who have tried the non-human-driven options have not been able to make them work reliable

[20:46] <ab5tract> *reliably

[20:57] <jdv> there's these things called laptops

[20:58] <jdv> i've used console server type stuff before but its a pain

[21:19] <ugexe> iDRAC, etc

[22:00] <lizmat> patrickb: remote power switch ?

[22:21] *** rakkable left
[22:21] *** rakkable joined
