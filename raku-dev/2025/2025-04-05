[05:05] *** guifa left
[05:52] *** finanalyst joined
[06:02] <Geth> ¦ rakudo/main: c736ec009f | (Jimmy Zhuo)++ | src/Raku/ast/statements.rakumod

[06:02] <Geth> ¦ rakudo/main: RakuAST: Fix while "D" {  last  }

[06:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c736ec009f

[06:02] <Geth> ¦ rakudo/main: 403252cf63 | niner++ (committed using GitHub Web editor) | src/Raku/ast/statements.rakumod

[06:02] <Geth> ¦ rakudo/main: Merge pull request #5840 from zhuomingliang/main

[06:02] <Geth> ¦ rakudo/main: 

[06:02] <Geth> ¦ rakudo/main: RakuAST: Fix while "D" {  last  }

[06:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/403252cf63

[06:54] <Geth> ¦ rakudo/main: 9ebb5c87e1 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[06:54] <Geth> ¦ rakudo/main: RakuAST: prohibit using attribute accessors as parameter targets in submethods

[06:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9ebb5c87e1

[06:54] <Geth> ¦ rakudo/main: 038a6e8567 | (Stefan Seifert)++ | 2 files

[06:54] <Geth> ¦ rakudo/main: RakuAST: prohibit attribute access as parameter target in subs

[06:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/038a6e8567

[06:54] <Geth> ¦ rakudo/main: d505730c5d | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[06:54] <Geth> ¦ rakudo/main: RakuAST: avoid misleading error when attribute accessor is used in sig outside package

[06:54] <nine> 1340

[06:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d505730c5d

[07:04] *** timo left
[07:07] *** timo joined
[07:36] <Geth> ¦ roast: 83b89bd1de | (Stefan Seifert)++ | S14-roles/parameterized-type.t

[07:36] <Geth> ¦ roast: Fix accidental declaration of our scoped role in another role's signature

[07:36] <Geth> ¦ roast: 

[07:36] <Geth> ¦ roast: The declarations made in a role's signature are meant to go into that role's

[07:36] <Geth> ¦ roast: body. However it's illegal to make our scoped declarations inside roles

[07:36] <Geth> ¦ roast: as that scope is generic. Thus it should be wrong to declare an our

[07:36] <Geth> ¦ roast: scoped role in another role's signature and a more picky compiler might

[07:36] <Geth> ¦ roast: complain.

[07:36] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/83b89bd1de

[07:41] <Geth> ¦ rakudo/main: b0ff120046 | (Stefan Seifert)++ | 4 files

[07:41] <Geth> ¦ rakudo/main: RakuAST: prohibit our scoped declarations in roles

[07:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b0ff120046

[07:41] <nine> 1341

[08:55] *** samebchase4 joined
[08:55] *** gfldex left
[08:55] *** samebchase left
[08:55] *** samebchase4 is now known as samebchase

[08:56] *** gfldex joined
[09:22] *** sena_kun joined
[09:34] <Geth> ¦ rakudo/main: 1a8c681367 | (Stefan Seifert)++ | 3 files

[09:34] <Geth> ¦ rakudo/main: RakuAST: allow for parameterization of type with variables

[09:34] <Geth> ¦ rakudo/main: 

[09:34] <Geth> ¦ rakudo/main: The variable can resolve to a container and that's what the type will be

[09:34] <Geth> ¦ rakudo/main: parameterized with.

[09:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1a8c681367

[09:48] <nine> I think this is about as far as I'm gonna take it.

[09:49] <nine> t/spec/S02-types/generics.t, t/spec/S02-types/is-type.rakudo.moar, t/spec/S02-types/nominalizables.t and most likely t/spec/S12-methods/qualified.t are vrurg's generics stuff.

[09:50] <nine> t/spec/S14-roles/versioning.t fails due to missing POPULATE which feels bogus as I don't think we should require an implementation to generate a POPULATE method. That it's expecting a POPULATE is more a workaround for there being such a method and the test really should make it optional.

[09:51] <nine> I assume lizmat++ will take care of the 5 failing files in S26-documentation as she's vastly more qualified than me for the RakuDOC stuff.

[09:51] <nine> And that's it.

[09:53] <nine> Oh, I forgot, there's also t/spec/S04-statements/label.t. It fails 2 cases where the proper behavior is still up for discussion and where I think that the tests are wrong.

[09:53] <nine> m: @ = (while True { while True { say "WhileLoop"; last } }) # Obviously this is lazy

[09:53] <camelia> rakudo-moar 1a8c68136: ( no output )

[09:54] <nine> m: @ = (L1: while True { while True { say "WhileLoop"; last L1 } }) # this however is eager and the test requires this, but why would the precense of a label make the loop eager?

[09:54] <camelia> rakudo-moar 1a8c68136: OUTPUT: «WhileLoop␤»

[09:55] <nine> Like I detailed the first time I encountered this spectest file, the code for while/until loops is riddled with bugs and this spectest just enshrines those bugs

[09:57] <lizmat> nine: i just realized re declarator doc bugs, I've been looking at the wrong place

[09:58] <lizmat> suppose this case:

[09:58] <lizmat> #= leading doc

[09:58] <lizmat> my $foo = 42

[09:58] <lizmat> does the leading doc attach to the 42, or to the container of $foo

[09:58] <lizmat> ?

[10:00] <nine> I do not have the slightest idea :) I barely have spent any time with RakuDOC at all

[10:01] <nine> Not just in the RakuAST effort. Even when writing Raku code I haven't used it

[10:04] <lizmat> well, in the legacy grammar, it attached to the value afaics

[10:04] <lizmat> in RakuAST it attaches to the container

[10:04] <lizmat> which I think would be the correct behaviour

[10:05] <lizmat> it's just that .WHY currently decontainerizes

[10:05] <lizmat> and thus never finds the .WHY on the container

[10:05] <lizmat> (at least, that's my current theory)

[10:07] <nine> Well, yes, documenting the variable would make more sense to me than documenting that value.

[10:09] <lizmat> well, I guess in the case of a "my" variable maybe not so much, unless it is exported (can we do that now?)

[10:09] <lizmat> anyways, trying to fix MU.WHY sends the settings compilation into a tailspin... so moving that code now to core_epilogue

[10:10] <lizmat> as we don't need that in the setting itself anyway

[10:12] <Geth> ¦ rakudo/bootstrap-rakuast: 15 commits pushed by (Stefan Seifert)++

[10:12] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/61ca7ac09a2b...270d8fb9bcbf

[10:25] <lizmat> hmmm... but if we attach it to the container, we would at least to mix in a $!why attribute into it

[10:26] <lizmat> which then leads to the question: why do things like Attribute / Block objects have a $!why attribute, when that could have been mixed in when needed ?

[10:27] <lizmat> all in all this is starting to look like a legacy house of cards that is pretty fragile   :-(

[10:29] <nine> Sounds exactly like my experience with package installation

[10:30] <lizmat> #| leading

[10:30] <lizmat> my $a = sub { };

[10:30] <lizmat> say $a.WHY;

[10:30] <lizmat> $a = 42;

[10:30] <lizmat> say $a.WHY;

[10:30] <lizmat> shows:   leading

[10:30] <lizmat> Sorry, no documentation is attached to Int.

[10:31] <lizmat> so in the legacy grammar, it is attached to the sub and not $a

[10:31] <lizmat> and the spectests are testing for that

[10:31] <lizmat> so now I have half a mind to just remove those spectests

[10:35] <Geth> ¦ rakudo/bootstrap-rakuast: 1b0fd7daac | (Stefan Seifert)++ | src/Raku/ast/type.rakumod

[10:35] <Geth> ¦ rakudo/bootstrap-rakuast: RakuAST: don't type check native values in enums

[10:35] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/commit/1b0fd7daac

[11:45] <lizmat> m: role A { has $.a }; my $a = 42; $a.VAR does A(666); say $a.a; $a = 43    # apparently we can't mixin roles into a container  :-(

[11:45] <camelia> rakudo-moar 1a8c68136: OUTPUT: «666␤Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[11:46] <lizmat> at least not with infix:<does>

[11:47] <lizmat> m: role A { has $.a }; my $a = 42; $a.VAR.^mixin(A); say $a.a; $a = 43    # also not with ^mixin  :-(

[11:47] <camelia> rakudo-moar 1a8c68136: OUTPUT: «(Any)␤Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[12:18] *** finanalyst left
[12:28] <lizmat> nine: I'm now leaning towards *not* allowing declarator docs on variables

[12:28] <lizmat> which provides a bit of a conundrum, as we *do* want to allow declarator docs on attributes

[12:29] <lizmat> but variables and attributes in RakuAST share the same RakuAST::Var::Declaration::Simple class 

[12:38] <lizmat> nine: did you ever consider making a RakuAST::Attribute class, as a subcllass of RakuAST::Var::Declararion::Simple ?

[12:56] <lizmat> argh, now I find that subroutines that do not take any args *can* have trailing declarator doc after the opening {

[12:56] <lizmat> but subroutines that *do* take arguments can not, as they potentially would apply to the parameter

[12:58] <lizmat> so I'm thinking of simply disallowing any trailing declarator docs on blocky things

[13:13] *** rakkable left
[13:13] *** rakkable joined
[13:13] <lizmat> rakkable: eco-pr ^#=

[13:13] <rakkable> lizmat, Running: eco-provides ^#=, please be patient!

[13:13] *** rakkable left
[13:14] *** rakkable joined
[13:22] *** Altai-man joined
[13:24] *** sena_kun left
[13:25] *** guifa joined
[13:29] * lizmat just finds 4 community modules that use declarator docs incorrectly  *sigh*

[13:48] <nine> lizmat: As its name says VarDeclaration::Simple is so complicated that I do not dare touch it unless I absolutely must

[13:50] <nine> After all a "simple" var declaration can be a lexical, a parameter, an object attribute or a class attribute or a dynamic variable

[17:01] <Geth> ¦ rakudo/main: 8bdbc9f8d9 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[17:01] <Geth> ¦ rakudo/main: RakuAST: only set declarand for attributes

[17:01] <Geth> ¦ rakudo/main: 

[17:01] <Geth> ¦ rakudo/main: Setting declarator docs on variables in general is currently impossible

[17:01] <Geth> ¦ rakudo/main: without a significant overhaul of the way declarator docs are being

[17:01] <Geth> ¦ rakudo/main: handled: currently, object types that support declarator docs have a

[17:01] <Geth> ¦ rakudo/main: $!why attribute, which is usually not used.  An approach with mixing

[17:01] <Geth> ¦ rakudo/main: in a $!why attribute on demand on Scalar containers proved to be a

[17:01] <Geth> ¦ rakudo/main: failure.

[17:01] <lizmat> 1342

[17:01] <Geth> ¦ rakudo/main: 

[17:01] <Geth> ¦ rakudo/main: So all variable declarations (apart from attributes) are now ignored.

[17:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8bdbc9f8d9

[17:06] <Geth> ¦ roast: 63732f8490 | (Elizabeth Mattijsen)++ | S26-documentation/why-trailing.t

[17:06] <Geth> ¦ roast: Put trailing declarator doc at right position

[17:06] <Geth> ¦ roast: 

[17:06] <Geth> ¦ roast: In RakuDoc this is a lot more strict than in the legacy grammar

[17:06] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/63732f8490

[17:06] <lizmat> 1343

[17:08] <Geth> ¦ roast: 66b5f51a26 | (Elizabeth Mattijsen)++ | S26-documentation/why-both.t

[17:08] <Geth> ¦ roast: Put trailing declarator doc at right position

[17:08] <Geth> ¦ roast: 

[17:08] <Geth> ¦ roast: In RakuDoc this is a lot more strict than in the legacy grammar

[17:08] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/66b5f51a26

[17:08] <lizmat> 1344

[17:27] *** finanalyst joined
[17:49] <lizmat> nine: looks like t/spec/S26-documentation/block-xxx  is blocking on #(  ) constructs not working

[17:49] <lizmat> which appears to be related to quibble handling

[18:42] <Geth> ¦ roast: ef16fc6c67 | (Elizabeth Mattijsen)++ | S26-documentation/block-trailing.t

[18:42] <Geth> ¦ roast: Put trailing declarator doc at right position

[18:42] <Geth> ¦ roast: 

[18:42] <Geth> ¦ roast: In RakuDoc this is a lot more strict than in the legacy grammar

[18:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ef16fc6c67

[18:53] <[Coke]> nine++

[18:53] <[Coke]> lizmat++

[18:54] <[Coke]> by my count, that leaves 6 spectests?

[18:54] <[Coke]> (many of which nine listed above as needing attention)

[18:55] <[Coke]> amazing work.

[18:57] <Geth> ¦ roast: caf6dd4137 | (Elizabeth Mattijsen)++ | 2 files

[18:57] <Geth> ¦ roast: Declarator doc #| and #= *must* have a whitespace following

[18:57] <Geth> ¦ roast: 

[18:57] <Geth> ¦ roast: Maybe we can relax that at a later point, but the RakuDoc definition

[18:57] <Geth> ¦ roast: states there must be whitespace.  So enforce that in the tests

[18:57] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/caf6dd4137

[18:59] <Geth> ¦ rakudo/main: 7b0f03ea70 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[18:59] <Geth> ¦ rakudo/main: RakuAST: must have whitespace after #| and #=

[18:59] <Geth> ¦ rakudo/main: 

[18:59] <Geth> ¦ rakudo/main: As stated in the RakuDoc v2.0 definition

[18:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7b0f03ea70

[18:59] <lizmat> 136

[18:59] <lizmat> 1346  I mean  :-)

[19:10] <[Coke]> looks like we lost some make test - 26 failures now.

[19:10] <lizmat> yeah  :-)

[19:10] <[Coke]> down to 140 passing make test. will see if I can golf some of them.

[19:11] <lizmat> you mean without RAKUDO_RAKUAST=1 ?

[19:11] <[Coke]> oh, 6 of the are macros, which I think are a very likely cut.

[19:11] <[Coke]> lizmat: no, with that

[19:11] <[Coke]> we were passing 145/166, now at 140

[19:12] <lizmat> hmmm... will look at that tomorrow   probably  :-)

[19:15] <[Coke]> ok.

[19:19] <[Coke]> oh - outside of a release, I just did a make spectest which said inline::perl5 isn't installed, so I ran that zef command it suggested, and then ran spectest again ... still get the "not installed" message. so I am wondering if the issue is NOT with the Akefile.

[19:32] <lizmat> it probably isn't... I noticed that just now myself

[19:42] <lizmat> afk&

[20:17] <[Coke]> spectest isn't clean here.

[20:20] * [Coke] updates https://github.com/rakudo/rakudo/issues/5841

[20:23] *** codesections joined
[20:25] *** codesections left
[21:54] *** finanalyst left
[22:25] *** guifa left
[22:39] *** guifa joined
[22:43] *** Altai-man left
