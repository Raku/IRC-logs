[00:01] <timo> it might have to be "make $<simple-variable>.made` or something perhaps?

[00:29] <[Coke]> You've gained 2 more on 'make test'

[00:30] <[Coke]> up to 145/166 (probably passing tests copied in from roast, now the total is higher.)

[01:33] *** codesections joined
[01:48] *** codesections left
[02:13] *** codesections joined
[02:42] *** codesections left
[02:42] *** codesections1 joined
[02:45] *** codesections1 is now known as codesections

[03:02] *** codesections1 joined
[03:03] *** codesections left
[03:03] *** codesections1 is now known as codesections

[04:01] *** codesections1 joined
[04:01] *** codesections left
[04:01] *** codesections1 is now known as codesections

[04:12] *** codesections1 joined
[04:14] *** codesections left
[04:14] *** codesections1 is now known as codesections

[04:51] *** codesections left
[05:00] *** codesections joined
[05:19] *** codesections left
[08:33] <nine> MasterDuke: you need to arrive at the $*R.declare-lexical call in method variable-declarator in Actions. That's where the compiler is made aware of there being a new lexical variable.

[08:33] <tellable6> nine, I'll pass your message to MasterDuke

[08:34] <nine> MasterDuke: simple-variable uses self.compile-variable-access which already tries to resolve that variable. It's not suitable for making a declaration.

[08:34] <tellable6> nine, I'll pass your message to MasterDuke

[08:36] <nine> MasterDuke: correction, stub-variable is where most variables are declared. The other thing was for `has $foo` only

[08:36] <tellable6> nine, I'll pass your message to MasterDuke

[08:56] <Geth> ¦ roast: fc6af9344e | (Stefan Seifert)++ | integration/advent2011-day11.t

[08:56] <Geth> ¦ roast: Fix use of undeclared variable in private method test

[08:56] <Geth> ¦ roast: 

[08:56] <Geth> ¦ roast: The test used an undeclared variable $o instead of the existing $order.

[08:56] <Geth> ¦ roast: Apparently the old compiler reported the problem with the private method

[08:56] <Geth> ¦ roast: call before even checking whether the variable it's called on exists.

[08:56] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/fc6af9344e

[09:04] <Geth> ¦ rakudo/main: 55e087ac4a | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[09:04] <Geth> ¦ rakudo/main: RakuAST: prohibit unqualified private method calls on variables

[09:04] <Geth> ¦ rakudo/main: 

[09:04] <Geth> ¦ rakudo/main: Fixes: $foo!private # to fail

[09:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/55e087ac4a

[09:04] <nine> 1129

[09:37] <lizmat> nine: https://github.com/niner/Inline-Perl5/pull/188

[09:38] <lizmat> reason I didn't make this yesterday is that apparently one needs to nuke "resources" *and* .precomp before testing each time

[09:39] <nine> I guess the precomp files lack a dependency on Inline::Perl5

[09:40] <lizmat> possibly, but it got very confusing at one point, I can tell you :-)

[09:40] <lizmat> it's when I realized that even the unchanged Inline::Perl5 would crash on pre-POPULATE rakudo, I figured something was interfering  :-)

[09:41] <nine> I wonder how this problem survived blin

[09:41] <lizmat> because there was no test for it

[09:42] <lizmat> Inline::Perl5 installed fine on post-POPULATE

[09:42] <lizmat> it's Fritz's golf that triggered it somehow

[09:42] <lizmat> perhaps because it's also using NativeCall for LibXML ?

[09:42] <lizmat> ah no... nvm

[09:43] <lizmat> perhaps because perl's Excel::Writer::XLSX does some nasty tricks under the hood ?

[09:43] <lizmat> although I understand that to be pure perl fwiw

[09:49] <Geth> ¦ roast: b49054a37a | (Stefan Seifert)++ | integration/rule-in-class-Str.t

[09:49] <Geth> ¦ roast: Fix wrong translation from Perl5 to Raku regex syntax

[09:49] <Geth> ¦ roast: 

[09:49] <Geth> ¦ roast: Was broken by 0cf20295bc3e00ac0fd0945cff38681b52f9a455

[09:49] <Geth> ¦ roast: 

[09:49] <Geth> ¦ roast: japhb++ for noticing

[09:49] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b49054a37a

[09:50] <lizmat> nine: but did you notice that those tests are bogus, as it doesn't matter whether the translation was broken ?

[09:51] <lizmat> m: say so "bar" ~~ /<[a]>/

[09:51] <camelia> rakudo-moar 55e087ac4: OUTPUT: «True␤»

[09:51] <lizmat> m: say so "bar" ~~ /<[-a]>/

[09:51] <camelia> rakudo-moar 55e087ac4: OUTPUT: «True␤»

[09:51] <nine> I think any matching regex is ok for that test

[09:55] <lizmat> I think all 3 tests should be "lives-ok" tests, because that's what it is essentially testing

[09:55] <lizmat> will adapt test accordingly

[10:02] <Geth> ¦ roast: 2cacfd8896 | (Elizabeth Mattijsen)++ | integration/rule-in-class-Str.t

[10:02] <Geth> ¦ roast: Reduce test to what actually needs testing

[10:02] <Geth> ¦ roast: 

[10:02] <Geth> ¦ roast: Namely: can we call a method in a subclass of Str, an augmented

[10:02] <Geth> ¦ roast: version of Str, and a re-augmented version of Str.

[10:02] <Geth> ¦ roast: 

[10:02] <Geth> ¦ roast: This all completely bypasses the fact that augment is a compile

[10:02] <Geth> ¦ roast: time event, so that all tests could actually be placed *before*

[10:02] <Geth> ¦ roast: any of the augmentation is done in the code.

[10:02] <Geth> ¦ roast: 

[10:02] <Geth> ¦ roast: All in all, pretty dubious tests

[10:02] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2cacfd8896

[10:04] <Geth> ¦ rakudo/main: 804603ab38 | (Stefan Seifert)++ | 2 files

[10:04] <Geth> ¦ rakudo/main: RakuAST: throw proper X::Comp for exceptions thrown by package compose

[10:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/804603ab38

[10:06] <nine> lizmat: I don't think that test is testing what it was supposed to test anymore. The description says "Difficulty using a rule in a method of Str." which strongly implies that regex is the essential part

[10:06] <lizmat> but <[a]> isn't a rule ?

[10:07] <nine> The wording may have changed sind < 2009

[10:08] <Geth> ¦ roast: 8dc881737a | (Elizabeth Mattijsen)++ | integration/rule-in-class-Str.t

[10:08] <Geth> ¦ roast: Revert "Reduce test to what actually needs testing"

[10:08] <Geth> ¦ roast: 

[10:08] <Geth> ¦ roast: This reverts commit 2cacfd889645294d82edfa32524b25a31544a76e.

[10:08] <Geth> ¦ roast: 

[10:08] <Geth> ¦ roast: It's "rule", not "role", I misread.  Still weird tests, as no

[10:08] <Geth> ¦ roast: rule is involved?

[10:08] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8dc881737a

[10:20] *** rakkable left
[10:20] *** rakkable joined
[10:34] *** sena_kun joined
[10:41] <nine> m: %::{''}

[10:41] <camelia> rakudo-moar 804603ab3: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '%' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> <BOL><HERE>%::{''}␤»

[10:42] <nine> This is an odd error to have, since:

[10:42] <nine> m: %

[10:42] <camelia> rakudo-moar 804603ab3: OUTPUT: «WARNINGS for <tmp>:␤Useless use of unnamed % variable in sink context (line 1)␤»

[10:42] <nine> How can the anonymous variable be undeclared?

[10:43] <nine> The history of this test is that the above code was taken from a Perl module without any translation and it led to an internal compiler error. That error later changed to the Undefined we're seeing now and that got enshrined into a spec test. But I don't see why that would be correc.t

[10:43] * lizmat neither

[10:45] <nine> RakuAST parses it as a variable called "::" with a % sigil and then of course the hash index

[10:46] <lizmat> m: $::

[10:46] <camelia> rakudo-moar 804603ab3: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> <BOL><HERE>$::␤»

[10:46] <nine> m: dd ::

[10:46] <camelia> rakudo-moar 804603ab3: OUTPUT: «PseudoStash.new(("!UNIT_MARKER" => !UNIT_MARKER,"\$!" => Nil,"\$/" => Nil,"\$=finish" => Mu,"\$=pod" => [],"\$?LANGUAGE-REVISION" => 2,"\$?PACKAGE" => GLOBAL,"\$_" => Any,"\$¢" => Nil,"::?PACKAGE" => GLOBAL,:EXPORT(EXPORT),:GLOBALish(GLOBAL)))␤»

[11:50] *** JimmyZhuo joined
[12:03] *** JimmyZhuo left
[12:05] *** JimmyZhuo joined
[12:39] <JimmyZhuo> lto1.exe: fatal error: could not open symbol resolution file: No such file or directory

[12:39] <JimmyZhuo> compilation terminated.

[12:39] <JimmyZhuo> lto-wrapper.exe: fatal error: gcc returned 1 exit status

[12:39] <JimmyZhuo> compilation terminated.

[12:39] <JimmyZhuo> C:/Strawberry/c/bin/../lib/gcc/x86_64-w64-mingw32/13.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: error: lto-wrapper failed

[12:39] <JimmyZhuo> collect2.exe: error: ld returned 1 exit status

[12:39] <JimmyZhuo> gmake: *** [makefile:158: win-runner.exe-tmpl] Error 1

[12:39] <JimmyZhuo> patrickb: sometimes I can't connet github, put error here ^^

[13:18] <JimmyZhuo> ./rakudo-gdb-m

[13:18] <JimmyZhuo> Unhandled exception: While looking for '/home/jimmyz/rakudo3/perl6.moarvm': no such file or directory

[13:39] *** JimmyZhuo left
[13:44] <patrickb> JimmyZhuo: I've updated the PR again. Somehow GCC lto doesn't work on your system. I've disabled it.

[13:44] <tellable6> patrickb, I'll pass your message to JimmyZhuo

[14:19] *** codesections joined
[14:31] <Geth> ¦ rakudo/main: e237e2b2ff | (Stefan Seifert)++ | 10 files

[14:31] <Geth> ¦ rakudo/main: RakuAST: don't swallow the leading :: in names

[14:31] <Geth> ¦ rakudo/main: 

[14:31] <Geth> ¦ rakudo/main: For names starting with :: we neglected to generate an empty name part

[14:31] <Geth> ¦ rakudo/main: to start the name with.

[14:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e237e2b2ff

[14:31] <Geth> ¦ rakudo/main: 1cd100123e | (Stefan Seifert)++ | src/Raku/ast/variable-access.rakumod

[14:31] <Geth> ¦ rakudo/main: RakuAST: throw appropriate exception on %::

[14:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1cd100123e

[14:32] <nine> OMG I'd have never ever thought that so late in the game (we're almost at 99 %!) there'd be major changes to something as fundamental as our handling of names

[14:45] *** codesections1 joined
[14:45] *** codesections left
[14:45] *** codesections1 is now known as codesections

[14:49] <Geth> ¦ roast: b85f41ac37 | (Stefan Seifert)++ | integration/error-reporting.t

[14:49] <Geth> ¦ roast: Fix unrelated error from error checking test

[14:49] <Geth> ¦ roast: 

[14:49] <Geth> ¦ roast: The test code contains 2 errors and the test relied on the compiler to

[14:49] <Geth> ¦ roast: report the "interesting" one first (and only that). A compiler may

[14:50] <Geth> ¦ roast: however also report the redeclaration first (and arguably that's the

[14:50] <Geth> ¦ roast: more helpful message even). That redeclaration however is not needed for

[14:50] <Geth> ¦ roast: testing whether X::Composition::NotComposable.message is accessible so

[14:50] <Geth> ¦ roast: remove it.

[14:50] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b85f41ac37

[14:58] *** codesections1 joined
[15:00] *** codesections left
[15:00] *** codesections1 is now known as codesections

[15:04] *** codesections left
[15:12] *** codesections joined
[15:14] <[Coke]> releasable6: next

[15:14] <releasable6> [Coke], Next release in ≈23 days and ≈3 hours. There are no known blockers. 61 out of 62 commits logged

[15:14] <releasable6> [Coke], Details: https://gist.github.com/3c8425b6a88c7fdbaa23c7d4d0e2c50d

[15:20] *** codesections left
[15:20] *** codesections joined
[15:31] *** codesections left
[15:31] *** codesections1 joined
[15:33] *** codesections1 is now known as codesections

[15:38] *** codesections1 joined
[15:39] *** codesections left
[15:39] *** codesections1 is now known as codesections

[15:44] <Geth> ¦ rakudo/main: 5 commits pushed by (Stefan Seifert)++

[15:44] <Geth> ¦ rakudo/main: 65a0e54321 | RakuAST: ensure Use and Import nodes know their location for error messages

[15:44] <Geth> ¦ rakudo/main: 1560d014c1 | RakuAST: don't throw away worries and sorries we've collected before CHECK time

[15:44] <Geth> ¦ rakudo/main: 65ec90735e | RakuAST: wrap exceptions thrown during IMPL-BEGIN-TIME-EVALUATE

[15:44] <Geth> ¦ rakudo/main: 802c265927 | RakuAST: throw proper redeclaration error on roles

[15:44] <Geth> ¦ rakudo/main: f9f232f4ba | RakuAST: fix mixing in of X::Comp for compile time exceptions

[15:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/1cd100123ee9...f9f232f4ba13

[15:44] <nine> 1330. This file was a lot more effort than I anticipated at this stage

[15:51] <[Coke]> m: say 1330/1350

[15:51] <camelia> rakudo-moar 1cd100123: OUTPUT: «0.985185␤»

[15:51] <[Coke]> *squeee*

[15:55] <Geth> ¦ rakudo/main: 3caa98a97c | (Stefan Seifert)++ | lib/Test.rakumod

[15:55] <Geth> ¦ rakudo/main: Fix throws-like applying matchers to group instead of expected exception

[15:55] <Geth> ¦ rakudo/main: 

[15:55] <Geth> ¦ rakudo/main: When throws-like finds an X::Comp::Group it also looks inside this group

[15:55] <Geth> ¦ rakudo/main: for the expected exception as the compiler may report multiple problems

[15:55] <Geth> ¦ rakudo/main: at once. However we still applied any matchers to the group instead of

[15:55] <Geth> ¦ rakudo/main: the exception that we want to test.

[15:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3caa98a97c

[15:55] <nine> 1331

[15:59] <[Coke]> weird. I added the 5 rakuast ones in the combo geth report above... and releasable is saying those don't exist.

[16:04] <[Coke]> next

[16:04] <[Coke]> releaseable6: next

[16:04] <releasable6> [Coke], Next release in ≈23 days and ≈2 hours. There are no known blockers. 61 out of 62 commits logged (⚠ 5 warnings)

[16:04] <releasable6> [Coke], Details: https://gist.github.com/97302bf30cec8a1e16a92fb075f75754

[16:04] <[Coke]> (but 65a0e543 *is* on main. weird.)

[16:05] <[Coke]> c: 65a0e543: say 3

[16:05] <committable6> [Coke], ¦65a0e543:: «Cannot find this revision (did you mean “45ae5b9”?)»

[16:06] <[Coke]> ah, it's stuck behind a build queue, maybe? (feels like that should only depend on git log, not whateverable buildS)

[16:15] <lizmat> nine: it looks like the new .assuming now survives on the legacy backend

[16:16] <lizmat> in precomped modules

[16:17] <nine> How did that happen?

[16:17] <lizmat> I haz no idea

[16:18] <lizmat> going to double check the failing modules in the blin ticket

[16:18] <nine> Be sure to clean your .precomps

[16:19] <nine> And that there's no accidental RAKUDO_RAKUAST in your environment :)

[16:19] <lizmat> module B with: our &foo = &sprintf.assuming("%x");

[16:19] <lizmat> raku -Ilib -MB -e 'say foo(666)

[16:19] <lizmat> 29a

[16:20] <lizmat> I think that qualifies as precomped usage

[16:21] <lizmat> hmmm

[16:21] <lizmat> ah, but BEGIN our &foo ...   still fails  :-(

[16:21] <lizmat> meh

[16:22] <lizmat> ah, yes, without the BEGIN, the .assuming was still runtime when the mainline of the module executed on loading

[16:22] <lizmat> sh*t

[16:23] <nine> I'd have been quite surprised if things had fixed themselves magically

[16:24] <lizmat> the RakuAST error appears to have become more meaningful:

[16:24] <lizmat> Serialization Error: missing static code ref for closure '' (src/Raku/ast/code.rakumod:145)

[16:25] *** codesections left
[16:26] *** codesections joined
[16:37] *** codesections left
[16:44] *** codesections joined
[16:56] <[Coke]> releasable6: next

[16:56] <releasable6> [Coke], Next release in ≈23 days and ≈2 hours. There are no known blockers. 66 out of 68 commits logged

[16:56] <releasable6> [Coke], Details: https://gist.github.com/6e90e138e26226d145549b74d441a80c

[16:59] <lizmat> heh.   even the old .assuming implementation has issues with: BEGIN our &foo = &sprintf.assuming("%x");

[16:59] <lizmat> No such method 'list' for invocant of type 'VMNull'

[16:59] <lizmat>   in sub __PRIMED_ANON at EVAL_2 line 4

[16:59] <lizmat>   in sub __PRIMED_ANON at EVAL_2 line 1

[17:05] *** codesections1 joined
[17:07] *** codesections left
[17:07] *** codesections1 is now known as codesections

[17:41] *** codesections left
[18:05] <lizmat> rakkable: eco-pr use OO::Monitors

[18:05] <rakkable> lizmat, Running: eco-provides use OO::Monitors, please be patient!

[18:05] <rakkable> lizmat, Found 22 lines in 22 files (18 distributions):

[18:06] *** rakkable left
[18:06] *** rakkable joined
[18:06] <lizmat> rakkable: eco-pr use OO::Monitors

[18:06] <rakkable> lizmat, Running: eco-provides use OO::Monitors, please be patient!

[18:06] <rakkable> lizmat, Found 22 lines in 22 files (18 distributions):

[18:06] <rakkable> lizmat, https://gist.github.com/35c246c5517be7c9e410a7d8c52ecbaa

[19:21] <lizmat> nine: the following hack https://gist.github.com/lizmat/16e307181584f0aa99e2485eaed84372 makes RakuAST and legacy both produce:

[19:21] <lizmat> Serialization Error: missing static code ref for closure '' (src/Raku/ast/code.rakumod:145)

[19:22] <lizmat> (well the same error type)

[19:23] <lizmat> suggestions for a different hack that would to avoid the "Nil" not resolved error ?

[19:37] <lizmat> nine:  should this work?    CHECK $*CU.EVAL

[19:37] <lizmat> if not, why?

[19:37] <lizmat> afk&

[19:42] <nine> Why not just fix it for real on RakuAST?

[19:47] *** codesections joined
[19:58] *** codesections left
[20:35] *** MasterDuke joined
[20:39] <MasterDuke> nine: the `$*R.declare-lexical` is only hit in the `if $var.is-attribute && !$var.twigil {` block, where `method is-attribute` is `$scope eq 'has' || $scope eq 'HAS'`

[20:39] <tellable6> 2025-03-27T08:33:32Z #raku-dev <nine> MasterDuke: you need to arrive at the $*R.declare-lexical call in method variable-declarator in Actions. That's where the compiler is made aware of there being a new lexical variable.

[20:39] <tellable6> 2025-03-27T08:34:50Z #raku-dev <nine> MasterDuke: simple-variable uses self.compile-variable-access which already tries to resolve that variable. It's not suitable for making a declaration.

[20:39] <tellable6> 2025-03-27T08:36:46Z #raku-dev <nine> MasterDuke: correction, stub-variable is where most variables are declared. The other thing was for `has $foo` only

[20:40] <MasterDuke> oh, maybe that's what your last message was saying...

[20:52] <nine> Yes, that's what I meant

[20:58] *** dawids_ joined
[21:00] *** dawids_ left
[21:04] *** dawids_ joined
[21:07] <MasterDuke> huh, `method stub-variable($stub) { ... }` never actually uses `$stub`?

[21:08] <nine> That's wrong. It should be $/

[21:09] <nine> From time to time I think that arguments passed to grammar methods end up in the associated action method which just isn't how this works

[21:10] <MasterDuke> oh, but the first line is `my $/ := $*VARIABLE-MATCH;`

[21:10] <nine> Yep. That's why it doesn't matter that this parameter has the wrong name

[21:12] <MasterDuke> ha. well now i got `my $kinds = 4; say $kinds` to just print '(Mu)' instead of throwing...progress?

[21:13] <MasterDuke> (by changing the argument to $/ and commenting out the assignment)

[21:14] <nine> That doesn't sound right

[21:16] <MasterDuke> there's much here that isn't right

[21:21] <nine> You mean in main or with your local changes?

[21:23] <MasterDuke> local changes

[21:25] <nine> I'm glad :D

[21:34] <Geth> ¦ rakudo/main: e5adb4d9b7 | (Will Coleda)++ | tools/releasable/Akefile

[21:34] <Geth> ¦ rakudo/main: RELENG Fix -I path, use META6.json

[21:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e5adb4d9b7

[21:44] *** MasterDuke left
[21:49] <[Coke]> jdv: do you ever use L<Z script|https://github.com/Raku/z> ?

[21:50] <[Coke]> If not, I'm going to remove it from the release guide

[22:15] *** dawids_ left
[22:27] <Geth> ¦ rakudo/coke/releng2: 620dfda3b1 | (Will Coleda)++ | 2 files

[22:27] <Geth> ¦ rakudo/coke/releng2: RELENG Split rakudo-stress-errata into lang vers

[22:27] <Geth> ¦ rakudo/coke/releng2: 

[22:27] <Geth> ¦ rakudo/coke/releng2: New targets are

[22:27] <Geth> ¦ rakudo/coke/releng2: rakudo-stress-errata-c rakudo-stress-errata-d

[22:27] <Geth> ¦ rakudo/coke/releng2: 

[22:27] <Geth> ¦ rakudo/coke/releng2: Closes #5827

[22:27] <Geth> ¦ rakudo/coke/releng2: review: https://github.com/rakudo/rakudo/commit/620dfda3b1

[22:27] <Geth> ¦ rakudo/coke/releng2: 3af63de646 | (Will Coleda)++ | docs/release_guide.pod

[22:27] <Geth> ¦ rakudo/coke/releng2: RELENG cleanup release guide slightly

[22:27] <Geth> ¦ rakudo/coke/releng2: 

[22:27] <Geth> ¦ rakudo/coke/releng2: * use valid perldoc

[22:27] <Geth> ¦ rakudo/coke/releng2: * Move some items around to match practice (e.g. changelog work can be done all month)

[22:28] <Geth> ¦ rakudo/coke/releng2: * slight cleanup

[22:28] <Geth> ¦ rakudo/coke/releng2: review: https://github.com/rakudo/rakudo/commit/3af63de646

[22:30] <[Coke]> jdv: I'll throw a bunch of stuff on that branch and make you a reviewer of the PR.

[22:32] *** codesections joined
[22:48] *** kjp left
[22:49] *** kjp joined
[22:51] *** kjp left
[22:51] *** kjp joined
[23:00] <jdv> [Coke]: never used Z

[23:00] <jdv> cook

[23:00] <jdv> *cool

[23:04] <Geth> ¦ rakudo/coke/releng2: 845f53c5e8 | (Will Coleda)++ | docs/release_guide.pod

[23:04] <Geth> ¦ rakudo/coke/releng2: RELENG pod, not markdown

[23:04] <Geth> ¦ rakudo/coke/releng2: review: https://github.com/rakudo/rakudo/commit/845f53c5e8

[23:04] <Geth> ¦ rakudo/coke/releng2: 9b991dcbde | (Will Coleda)++ | docs/release_guide.pod

[23:04] <Geth> ¦ rakudo/coke/releng2: RELENG remove ref to z tool

[23:04] <Geth> ¦ rakudo/coke/releng2: 

[23:04] <Geth> ¦ rakudo/coke/releng2: Not used by current RELENG

[23:04] <Geth> ¦ rakudo/coke/releng2: review: https://github.com/rakudo/rakudo/commit/9b991dcbde

[23:20] *** sena_kun left
[23:20] *** codesections1 joined
[23:22] *** codesections left
[23:24] *** codesections1 left
[23:28] *** codesections joined
[23:43] *** codesections left
[23:48] <lizmat> nine: re "Why not just fix it for real on RakuAST?"   My point was that you could conceptually consider "CHECK $*CU.EVAL" as the process that turns an AST tree into bytecode and execute it

[23:49] <lizmat> so, what is missing if we take an artificially built AST (which shouldn't be too different from the one built by the Raku grammar) and call .EVAL on it?

[23:49] <lizmat> I'll get back to this after some sleep&

