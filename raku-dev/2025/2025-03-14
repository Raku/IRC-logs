[00:28] <[Coke]> Well, there are a LOT of alwaysfails.

[00:32] <[Coke]> weird. JSON::Class has a test-depends on Test::Async but blin is not seeing that dep - but so does WWW::GCloud:auth<zef:vrurg>:ver<0.0.7>, and blin *does* see that one.

[00:39] <[Coke]> JSON:Class is defaulting to 0.0.6, but Red's dep hierarchy has two hits at v 0.0.14+ and 0.0.20+

[00:41] <[Coke]> (so my testing of JSON::Class wasn't helpful, since I was testing the wrong (old) version)

[00:47] <SmokeMachine> That might be the “wrong” JSON::Class…

[00:48] <SmokeMachine> https://raku.land/?q=JSON::Class

[00:52] <SmokeMachine> [Coke]: ^^

[00:52] <SmokeMachine> We have: JSON::Class:ver<0.0.6>:auth<zef:vrurg>:api<1.0.5> and JSON::Class:ver<0.0.21>:auth<zef:jonathanstowe>:api<1.0>

[00:54] <[Coke]> so if you want a particular author's version, I'd put that in the declarations.

[00:55] <[Coke]> (oh, except it's not one of red's direct dependencies)

[00:56] <SmokeMachine> Yeah… that’s not a direct dependency…

[00:58] <[Coke]> so I think my pointer to Test::Async was wrong, I was testing the wrong JSON::Class. (So let me test the right one...)

[00:59] <[Coke]> the last Red diagnostic I had was that JSON::Class wasn't installed, so hopefully the real error will be revealed shortly, sorry about the noise.

[01:01] <SmokeMachine> No problem at all… I plan to open a MR to this: https://github.com/jonathanstowe/META6/blob/3e0a3e8094745de6252fffa645425c7dfb148523/META6.json#L34

[01:16] <SmokeMachine> https://github.com/jonathanstowe/META6/pull/32

[01:18] * [Coke] tries to figure out why WWW::GCloud::API::Storage is showing up in a Blin run for Red.

[01:18] * [Coke] gives up for the night.

[01:49] *** MasterDuke joined
[01:50] <MasterDuke> m: q|my $a = 0; my $b; for ^3 { $a++; 1 but last; $a++; }; say $a|.EVAL

[01:50] <camelia> rakudo-moar 490a23b0c: OUTPUT: «1␤»

[01:50] <MasterDuke> m: q|my $a = 0; my $b; for ^3 { $a++; 1 but last; $a++; }; say $a|.AST.EVAL

[01:50] <camelia> rakudo-moar 490a23b0c: OUTPUT: «Potential difficulties:␤    Useless use of constant integer 1 in sink context␤    at EVAL_0:1␤1␤»

[01:51] <MasterDuke> m: q|my $a = 0; my $b; for ^3 { $a++; $_ but last; $a++; }; say $a|.EVAL

[01:51] <camelia> rakudo-moar 490a23b0c: OUTPUT: «1␤»

[01:51] <MasterDuke> m: q|my $a = 0; my $b; for ^3 { $a++; $_ but last; $a++; }; say $a|.AST.EVAL

[01:51] <camelia> rakudo-moar 490a23b0c: OUTPUT: «1␤»

[01:52] <MasterDuke> so RakuAST warns about the `1 but last`. regular frontend doesn't warn, and both do the right thing

[01:59] <MasterDuke> i found this when running https://github.com/Raku/roast/blob/master/6.c/S14-roles/mixin-6c.t#L155. it's not what's being tested, but i noticed the difference and don't know what's correct

[02:01] <MasterDuke> however, i also found what i do think is a bug in RakuAST accidentally triggered by that test file

[02:03] <MasterDuke> ha, maybe two bugs, now that i'm trying to get it in a form easily showable on irc

[02:04] <MasterDuke> m: use Test; role A { method a() { say "a" } }; throws-like { EVAL q[role A { method b() { say "b" } }] }, X::Syntax::Variable::Twigil

[02:04] <camelia> rakudo-moar 490a23b0c: OUTPUT: «# Subtest: did we throws-like X::Syntax::Variable::Twigil?␤    1..2␤    not ok 1 - code dies␤    # Failed test 'code dies'␤    # at <tmp> line 1␤    ok 2 - # SKIP Code did not die, can not check exception␤    # You failed 1 test of 2␤not…»

[02:04] <MasterDuke> m: use Test; { role A { method a() { say "a" } } }; throws-like { EVAL q[role A { method b() { say "b" } }] }, X::Syntax::Variable::Twigil

[02:04] <camelia> rakudo-moar 490a23b0c: OUTPUT: «# Subtest: did we throws-like X::Syntax::Variable::Twigil?␤    1..2␤    not ok 1 - code dies␤    # Failed test 'code dies'␤    # at <tmp> line 1␤    ok 2 - # SKIP Code did not die, can not check exception␤    # You failed 1 test of 2␤not…»

[02:06] <MasterDuke> notice both examples did not throw any exception and the second one differed in wrapping the initial `role A ...` declaration in braces

[02:06] <MasterDuke> m: q|use Test; role A { method a() { say "a" } }; throws-like { EVAL q[role A { method b() { say "b" } }] }, X::Syntax::Variable::Twigil|.AST.EVAL

[02:06] <camelia> rakudo-moar 490a23b0c: OUTPUT: «lang-call cannot invoke object of type 'VMNull' belonging to no language␤  in block <unit> at <tmp> line 1␤␤»

[02:07] <MasterDuke> that's the second bug, but why i can't show the RakuAST behavior

[02:08] <MasterDuke> with `RAKUDO_RAKUAST=1`, the first version behaves the same, it doesn't die

[02:10] <MasterDuke> however, the second version (with the extra scope around the initial `role A ...`), instead fails because the exception type is `X::Redeclaration` and the message is `Redeclaration of symbol 'A'`

[02:11] <MasterDuke> that's a simplified version of https://github.com/Raku/roast/blob/master/6.c/S14-roles/mixin-6c.t#L111-L116

[02:25] <Geth> ¦ roast: MasterDuke17++ created pull request #871: Simplify 6.c/s14 roles/mixin 6c.t

[02:25] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/871

[02:27] <MasterDuke> so i think the first RakuAST bug is that the two role declarations are leaking into the same scope

[02:29] <MasterDuke> easy to work around it by changing one of the names, but thought i'd mention it in case i'm just understanding what's going on incorrectly

[02:29] *** nine left
[02:30] *** nine joined
[02:52] *** MasterDuke left
[06:58] *** finanalyst joined
[07:46] <nine> MasterDuke: That's not a bug in RakuAST but in the spec tests and the old frontend. See https://github.com/Raku/roast/commit/172634a3cdce36f07123c58afb3f2375e3476180 and https://github.com/Raku/roast/commit/6d58693398c40118d128ae357e5204b6a2736026

[07:46] <tellable6> nine, I'll pass your message to MasterDuke

[09:07] *** finanalyst left
[12:03] *** JimmyZhuo joined
[12:04] <JimmyZhuo> $ RAKUDO_RAKUAST=1 ./rakudo-m -e '1'

[12:04] <JimmyZhuo> Cannot find method 'parse' on object of type NQPMu

[12:04] <JimmyZhuo>    at NQP::src\HLL\Compiler.nqp:532  (E:\OpenSource\MoarVM\install\share\nqp\lib/NQPHLL.moarvm:parse)

[12:04] <JimmyZhuo>  from NQP::src\HLL\Compiler.nqp:447  (E:\OpenSource\MoarVM\install\share\nqp\lib/NQPHLL.moarvm:execute_stage)

[12:04] <JimmyZhuo>  from NQP::src\HLL\Compiler.nqp:483  (E:\OpenSource\MoarVM\install\share\nqp\lib/NQPHLL.moarvm:run)

[12:04] <JimmyZhuo> $ ./rakudo-m -e '1'

[12:04] <JimmyZhuo> WARNINGS for -e:

[12:04] <JimmyZhuo> Useless use of constant integer 1 in sink context (line 1)

[12:05] <JimmyZhuo> seems rakuast is broken on window

[12:06] <nine> I guess something in the build system

[12:07] <JimmyZhuo> I think I get the problem

[12:10] <JimmyZhuo> turns out my  windows file system sometimes is broken

[12:25] <lizmat> nine: https://github.com/rakudo/rakudo/issues/5815 made me reailize that we probably need logic that converts the BUILDPLAN to a RakuAST version of the POPULATE method

[12:26] <lizmat> so that any introspection would also allow changes to the POPULATE method

[12:26] <lizmat> do you agree?

[12:26] <lizmat> for context maybe: the POPULATE method is the new BUILDALL  :-)

[12:31] * JimmyZhuo likes the name BUILDALL 

[12:33] <lizmat> you can still use BUILDALL if you want: it's just a thin shim around POPULATE nowadays

[12:50] <Geth> ¦ rakudo/main: 170711bde8 | (Stefan Seifert)++ | 4 files

[12:50] <Geth> ¦ rakudo/main: RakuAST: add lexical fixups for role bodies

[12:50] <Geth> ¦ rakudo/main: 

[12:50] <Geth> ¦ rakudo/main: When code runs at BEGIN time, such as role bodies and BEGIN blocks, we need

[12:50] <Geth> ¦ rakudo/main: to ensure we get lexical outers fixed up properly when deserializing after

[12:50] <Geth> ¦ rakudo/main: pre-comp. To do this we make a list of closures, which each point to the outer

[12:50] <Geth> ¦ rakudo/main: context. These survive serialization and thus point at what has to be fixed up.

[12:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/170711bde8

[12:50] <nine> That was a day and a half of hard work to get right. But it gets us to 851 passing spectest files on the bootstrapped compiler

[12:52] <lizmat> wow!

[12:52] <lizmat> nine: re https://github.com/rakudo/rakudo/issues/5815 

[12:53] <lizmat> I was thinking of taking a stab at the compiler services logic: the part in World responsible for creating accessors and creating the POPULATE method

[12:54] <lizmat> and turn them into proper RakuAST trees that can be incorporated into the RakuAST tree of a class

[12:54] <nine> The accessor part already exists

[12:54] <lizmat> in true RakuAST ?

[12:54] <lizmat> that's not using World's logic under the hood ?

[12:55] <lizmat> must've missed that

[12:55] <nine> There is no World in RakuAST

[12:55] <nine> Look for RakuAST::CompilerServices

[12:56] <lizmat> ah, but that generates directly to QAST ?

[12:57] <lizmat> I mean, you wouldn't be able to do something to the accessor at CHECK / optimize  time ?

[12:57] <lizmat> as it wouldn't exist as a tree ?

[12:58] <nine> Again, look for RakuAST::CompilerServices and it will answer your questions

[13:02] <lizmat> ok, the answer is: it doesn't exists as a tree, it's directly QASTed

[13:03] <nine> There isn't much QAST involved at all. How much less could it be?

[13:04] <lizmat> I'm not worried about direct correctness, I'm worried about modules that would like to insert stuff into accessors, and not being able to because they don't exist in the tree

[13:05] <lizmat> anyways, I've found the text: "# TODO: create method BUILDALL here"

[13:05] <lizmat> and the absence of the string BUILDPLAN in the ast dir

[13:05] <lizmat> so I guess BUILDPLAN -> RakuAST tree part would still have to be written

[13:06] <lizmat> and we're going to need that if we want Perl6/World.nqp to die

[13:06] <lizmat> nine: agree ?

[13:07] <nine> Eventually, yes. I just wonder whether it would make more sense to have a complete regression test suite first?

[13:07] <nine> After all the BUILDPLAN thing should behave exactly the same, just faster

[13:08] <lizmat> the thing for *me* is, is that working on RakuAST with its build cycle, is getting to be really annoying on my current MBP

[13:09] <lizmat> or should say: M1 MacMini

[13:09] <lizmat> After April 1st I'll be able to get me a much faster machine

[13:09] <nine> You can have an account on my desktop as well. JimmyZhuo already has one

[13:09] <nine> Spectests in 2 minutes

[13:10] <lizmat> but not if we're all doing that at the same time, I guess ?

[13:10] <nine> Well, we're not :)

[14:09] <nine> JimmyZhuo: there's a regression caused by your commit 9713c41f859e4179fea3ff5958bc09619cc94400: Default value '6.c' will never bind to a parameter of type str

[14:09] <nine> Default value '72' will never bind to a parameter of type int

[14:09] <nine> So the check is failing on native types

[14:12] <JimmyZhuo> lizmat: https://github.com/Rakudo/Rakudo/commit/4f6da10a6e3a1dfd5e8bbdd7068cae43c02f125d, could you give me a test for this commit, thanks

[14:13] <JimmyZhuo> nine: which test?

[14:14] <nine> Happens when building rakudo on the bootstrap-rakuast branch (rebased on current main)

[14:15] <JimmyZhuo>                     if nqp::objprimspec($value-type) {

[14:15] <JimmyZhuo>                         $value-type := $value-type.HOW.mro($value-type)[1];

[14:15] <JimmyZhuo>                     }

[14:15] <JimmyZhuo> need some code like this?

[14:16] <nine> yes

[14:20] <JimmyZhuo> nine: feel free to add it, and it's sleep time here , good night

[14:20] <JimmyZhuo> 22:20 clock here

[14:20] *** JimmyZhuo left
[14:27] <Geth> ¦ rakudo/main: 1a1aa92fc2 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[14:27] <Geth> ¦ rakudo/main: RakuAST: don't sink target of bind

[14:27] <Geth> ¦ rakudo/main: 

[14:27] <Geth> ¦ rakudo/main: Binding is a way to specifically avoid sinking, so don't.

[14:27] <Geth> ¦ rakudo/main: Fixes some infinite loops caused by accidental sinking of lazy infinite

[14:27] <Geth> ¦ rakudo/main: iterators.

[14:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1a1aa92fc2

[14:32] <nine> That's 881

[15:35] <Geth> ¦ rakudo/main: 8d62f88d37 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[15:35] <Geth> ¦ rakudo/main: RakuAST: fix ** and + rw/raw slurpies to not containerize args

[15:35] <Geth> ¦ rakudo/main: 

[15:35] <Geth> ¦ rakudo/main: Fixes: sub foo(**@a) { }

[15:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8d62f88d37

[15:35] <nine> And now it's 943

[15:35] <Geth> ¦ rakudo/bootstrap-rakuast: 48 commits pushed by (Stefan Seifert)++

[15:35] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/d4c6215cdada...6e92add74215

[16:08] *** librasteve_ joined
[16:09] <Geth> ¦ rakudo/main: 291a614032 | (Stefan Seifert)++ | src/Raku/ast/nqp.rakumod

[16:09] <Geth> ¦ rakudo/main: RakuAST: never sink the results of nqp ops

[16:09] <Geth> ¦ rakudo/main: 

[16:09] <Geth> ¦ rakudo/main: NQP ops are low level tools. They are used when magic is explicitly

[16:09] <Geth> ¦ rakudo/main: unwanted.

[16:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/291a614032

[16:09] <Geth> ¦ rakudo/main: b34d0f080b | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[16:09] <Geth> ¦ rakudo/main: RakuAST: don't sink assigments

[16:09] <Geth> ¦ rakudo/main: 

[16:09] <Geth> ¦ rakudo/main: Assignments are also used to explicitly avoid sinking values.

[16:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b34d0f080b

[16:09] <nine> 970 passing. Most notably those pesky infinite loops are now gone

[16:09] *** finanalyst joined
[16:29] <Geth> ¦ rakudo/main: 20 commits pushed by (Stefan Seifert)++

[16:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/b34d0f080b11...21e52bcf6148

[16:31] <Geth> ¦ rakudo/bootstrap-rakuast: 28 commits pushed by (Stefan Seifert)++

[16:31] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/6e92add74215...9cf753578f99

[16:46] <[Tux]> Rakudo v2025.02-233-g21e52bcf6 (v6.d) on MoarVM 2025.02-10-g282254418

[16:46] <[Tux]> csv-test-xs-20      0.136 -  0.137

[16:46] <[Tux]> csv-ip5xs           0.271 -  0.277

[16:46] <[Tux]> test-t --race       0.269 -  0.282

[16:46] <[Tux]> test-t              0.412 -  0.416

[16:46] <[Tux]> csv-ip5xs-20        1.114 -  1.118

[16:46] <[Tux]> csv-parser          1.126 -  1.148

[16:47] <[Tux]> test-t-20 --race    1.269 -  1.284

[16:47] <[Tux]> test                1.827 -  1.874

[16:47] <[Tux]> test-t-20           4.997 -  5.216

[16:47] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[16:48] <Geth> ¦ rakudo/main: 4cb9daf8e2 | (Stefan Seifert)++ | 2 files

[16:48] <Geth> ¦ rakudo/main: RakuAST: tell QASTContext our actual language version

[16:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4cb9daf8e2

[16:48] <Geth> ¦ rakudo/main: c1378a280b | (Stefan Seifert)++ | src/Raku/ast/scoping.rakumod

[16:48] <Geth> ¦ rakudo/main: RakuAST: fix missing IMPL-TO-QAST on LexicalPackage

[16:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c1378a280b

[16:48] <Geth> ¦ rakudo/main: c8fb690291 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[16:48] <Geth> ¦ rakudo/main: RakuAST: fix overly zealous parameter bind type compile time check

[16:48] <Geth> ¦ rakudo/main: 

[16:48] <Geth> ¦ rakudo/main: We can be more lenient on native types as the binder can lower

[16:48] <Geth> ¦ rakudo/main: arguments.

[16:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c8fb690291

[16:51] <nine> Setting still doesn't build though: Default value '0' will never bind to a parameter of type NuT:D

[16:51] <nine> Thing is, I think the compiler is correct here.

[16:52] <nine> my role Rational[::NuT = Int, ::DeT = Mu] does Real

[16:52] <nine> method new(NuT:D \nu = 0, DeT:D \de = 1)

[16:52] <nine> On the one hand, yes the default for NuT is Int to which 0 would most definitely bind. On the other hand though, it doesn't have to be.

[16:57] *** finanalyst left
[17:03] <Geth> ¦ rakudo/main: 584ea0ff59 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[17:03] <Geth> ¦ rakudo/main: RakuAST: fix overzealous parameter default type check failing on generics

[17:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/584ea0ff59

[17:03] <nine> Ok, this brings us back on track

[17:20] <lizmat> nice, 1278 for me now

[17:21] <lizmat> bisectable6: old=2024.04 enum E (A => %(class => Array)); dd A.pairs

[17:21] <bisectable6> lizmat, Bisecting by output (old=2024.04 new=8d62f88) because on both starting points the exit code is 0

[17:23] <bisectable6> lizmat, bisect log: https://gist.github.com/7bff1f5a7d8c3f45fef5d961bd626f41

[17:23] <bisectable6> lizmat, There are 18 candidates for the first “new” revision. See the log for more details

[17:23] <lizmat> me

[17:23] <lizmat> h

[17:42] *** finanalyst joined
[17:53] <Geth> ¦ rakudo/main: a36de41a4a | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/EnumHOW.nqp

[17:53] <Geth> ¦ rakudo/main: Wrap enum value stringification in a quietly

[17:53] <Geth> ¦ rakudo/main: 

[17:53] <Geth> ¦ rakudo/main: In response to #5794.  Enums keep both a forward hash as well as

[17:53] <Geth> ¦ rakudo/main: an inverted hash.  The issue describes warning creating the reverse

[17:53] <Geth> ¦ rakudo/main: hash if type values were encountered in data-structures such as

[17:53] <Geth> ¦ rakudo/main: hashes and arrays used as value in an enum.

[17:53] <Geth> ¦ rakudo/main: 

[17:53] <Geth> ¦ rakudo/main: Since this needed a fix in the metamodel, and NQP doesn't know

[17:53] <Geth> ¦ rakudo/main: quietly, basically copied the QAST from the quietly handling in

[17:53] <Geth> ¦ rakudo/main: the grammar.

[17:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a36de41a4a

[18:18] *** finanalyst left
[18:23] *** sena_kun joined
[19:01] *** finanalyst joined
[19:07] <Geth> ¦ rakudo/main: 63a4ba3f2b | (Stefan Seifert)++ | 2 files

[19:07] <Geth> ¦ rakudo/main: RakuAST: fix accessing natively typed parameters in nqp ops

[19:07] <Geth> ¦ rakudo/main: 

[19:07] <Geth> ¦ rakudo/main: Fixes; sub foo(int $digits) { nqp::pow_I(10, $digits, Num, Int) };

[19:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/63a4ba3f2b

[19:08] <nine> And we're at 1024 in full bootstrap mode :)

[19:08] <lizmat> NICE!

[19:09] <nine> At least it payed off. That was a hard one with all the entanglement between variable declarations, parameters, signatures and signature binds

[19:24] <Geth> ¦ rakudo/main: f8a30b2955 | (Elizabeth Mattijsen)++ | 4 files

[19:24] <Geth> ¦ rakudo/main: RakuAST: Fix my @a = :a:b;

[19:24] <Geth> ¦ rakudo/main: 

[19:24] <Geth> ¦ rakudo/main: As indicated by #5680.  This commit:

[19:24] <Geth> ¦ rakudo/main: 

[19:24] <Geth> ¦ rakudo/main: - change ::ColonPairs.new to use a slurpy, but still maintains

[19:24] <Geth> ¦ rakudo/main:   the semantics of the old interface as well (which is used in

[19:24] <Geth> ¦ rakudo/main:   the Raku grammar)

[19:24] <Geth> ¦ rakudo/main: - add .raku and deparsing logic

[19:24] <Geth> ¦ rakudo/main: - add missing IMPL-TO-QAST method

[19:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f8a30b2955

[19:30] <Geth> ¦ roast: fb962f394c | (Elizabeth Mattijsen)++ | S02-literals/pairs.t

[19:30] <Geth> ¦ roast: Add TODOd test for #5680

[19:30] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/fb962f394c

[19:41] <lizmat> and that concludes my hacking for today&

[19:43] *** finanalyst left
[20:08] *** Altai-man joined
[20:10] *** sena_kun left
[21:39] *** finanalyst joined
[21:42] <Geth> ¦ rakudo/main: 3805890479 | (Stefan Seifert)++ | 2 files

[21:42] <Geth> ¦ rakudo/main: RakuAST: fix enums getting shadowed by pre-existing packages

[21:42] <Geth> ¦ rakudo/main: 

[21:42] <Geth> ¦ rakudo/main: Fixes: package Foo::Bar {}; enum Foo <a b>;

[21:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3805890479

[21:42] <nine> 1027

[22:56] *** finanalyst left
[23:13] *** Altai-man left
[23:31] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5816: RakuAST: throw for '!' vars in 'my' | 'our' | 'state' scope

[23:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5816

