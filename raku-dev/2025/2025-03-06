[00:03] *** [Coke]_ is now known as [Coke]

[00:34] *** sena_kun left
[03:52] *** JimmyZ joined
[03:56] *** JimmyZ is now known as JimmyZ_

[03:57] *** JimmyZ_ is now known as JimmyZ

[04:08] *** JimmyZ left
[04:24] *** JimmyZ joined
[04:37] *** JimmyZ is now known as JimmyZ__

[04:37] *** JimmyZ__ is now known as JimmyZ

[04:49] *** JimmyZ is now known as JimmyZhuo

[04:51] *** JimmyZhuo left
[04:51] *** JimmyZhuo joined
[05:43] *** JimmyZhuo left
[08:45] *** JimmyZhuo joined
[08:46] *** JimmyZhuo is now known as JimmyZ

[08:46] *** JimmyZ is now known as JimmyZhuo

[08:53] <nine> A trillion features in this language but a "protected" like access level is not one of them. Baffles me why we lack this super common OO feature

[08:56] <JimmyZhuo> m: class A { has $.a is protected; }

[08:56] <camelia> rakudo-moar f8b15dcc6: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Can't use unknown trait 'is' -> 'protected' in an attribute declaration.␤at <tmp>:1␤    expecting any of:␤        rw␤        readonly␤        box_target␤        leading_docs␤        trailing_doc…»

[08:59] <JimmyZhuo> maybe nobody asked for it?

[09:03] <nine> That's still as baffling. We have super obscure things like a flip-flop operator which in 33 years of programming I have needed a grand total of 0 times. But a basic OO feature that almost everyone has and that I could use all the time? Nope

[09:03] *** finanalyst joined
[09:05] *** finanalyst left
[09:07] * JimmyZhuo thinks we can have such a trait

[09:29] *** lizmat joined
[09:30] *** finanalyst joined
[09:36] <timo> .o( raku can have little a java, as a treait )

[09:43] *** sena_kun joined
[09:59] *** finanalyst left
[10:11] <lizmat> well, we have private methods and "trusts" https://docs.raku.org/language/typesystem#trait_trusts ?

[10:12] <lizmat> I guess an "is protected" trait on an attribute would autogen a private method?

[10:13] <lizmat> and then maybe an "is trusting" attribute on classes to allow all subclasses access to private methods ?

[10:14] <lizmat> note that we also have "is implementation-detail" on methods

[10:15] <lizmat> It isn't as strict as "is protected" appears to be, but still, plenty of ways to indicate possible capabilities?

[10:17] <lizmat> nine ^^

[10:18] <lizmat> although I guess I would call the attribute trait "is private" to keep more in the Raku vocabulary

[10:18] <lizmat> instead of "is protected"

[10:19] *** [Coke] left
[10:20] *** finanalyst joined
[10:24] *** finanalyst left
[10:41] * JimmyZhuo wants 'switch' syntax

[10:46] *** [Coke] joined
[10:46] <lizmat> isn't that what "when" is ?

[11:02] <JimmyZhuo> ah, I forgot given when

[11:13] *** finanalyst joined
[11:30] *** JimmyZhuo left
[11:33] *** finanalyst left
[12:10] *** JimmyZhuo joined
[12:53] <Geth> ¦ roast: dff9bd2cbb | (Elizabeth Mattijsen)++ | S06-currying/positional.t

[12:53] <Geth> ¦ roast: Remove test that would check implementation detail

[12:53] <Geth> ¦ roast: 

[12:53] <Geth> ¦ roast: The old implementation of .assuming would re-create the constant

[12:53] <Geth> ¦ roast: value in the signature of the generated Callable.  In the new

[12:53] <Geth> ¦ roast: implementation, it will pass thru the nameless array that contained

[12:53] <Geth> ¦ roast: the value.  However, to be able to pass it through, it needs a name

[12:53] <Geth> ¦ roast: to refer to, which is implementation dependent.

[12:53] <Geth> ¦ roast: 

[12:53] <Geth> ¦ roast: Rather than replace one implementation dependent test with another

[12:53] <Geth> ¦ roast: it feels like a better idea to remove this test.

[12:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/dff9bd2cbb

[13:06] <lizmat> m: sub a(Positional[Int] $a) { }; dd &a.signature.params.head.type   # all is good

[13:06] <camelia> rakudo-moar f8b15dcc6: OUTPUT: «Int  = Positional[Int]␤»

[13:07] <lizmat> m: sub a(Int @a) { }; dd &a.signature.params.head.type   # should be "Int" because of the @ sigil

[13:07] <camelia> rakudo-moar f8b15dcc6: OUTPUT: «Int  = Positional[Int]␤»

[13:08] <nine> I thought Int @a literally means Positional[Int]?

[13:09] <lizmat> it does

[13:09] <lizmat> but we get one level of Positional too many if we combine it with a @ sigil

[13:10] <Geth> ¦ rakudo/main: 8faa16a5db | (Stefan Seifert)++ | 3 files

[13:10] <Geth> ¦ rakudo/main: RakuAST: generate tailor made attribute accessors

[13:10] <Geth> ¦ rakudo/main: 

[13:10] <Geth> ¦ rakudo/main: We can still improve the generated code by cutting out standard

[13:10] <Geth> ¦ rakudo/main: signature checks, but this at least fixes some problems with native

[13:10] <Geth> ¦ rakudo/main: types.

[13:10] <Geth> ¦ rakudo/main: 

[13:10] <Geth> ¦ rakudo/main: Fixes: my class C { has uint8 $.ff is rw }; say C.new.ff = 255

[13:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8faa16a5db

[13:10] <Geth> ¦ rakudo/main: 3d651c2ef0 | (Stefan Seifert)++ | src/Raku/ast/variable-access.rakumod

[13:10] <Geth> ¦ rakudo/main: RakuAST: throw compile time error when attribute alias is used outside method

[13:10] <Geth> ¦ rakudo/main: 

[13:10] <Geth> ¦ rakudo/main: Fixes: class Foo { has $a; say $a }

[13:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3d651c2ef0

[13:11] <nine> 1253

[13:11] <lizmat> so I think that 'Parameter.type" needs to return Int in that case, or the .assuming logic needs to work around this

[13:11] <lizmat> nine++

[13:12] <nine> I think the burden is on assuming's part here. That type is correct. Positional[Int] *is* the type of that first param. Would be weird to ask a parameter for its type and get an answer that one then has to somehow combine with the parameter's name to get the actual answer to the initial question

[13:13] <lizmat> ok, than I'll attack it from that end... although not really convinced yet  :-)

[13:14] <lizmat> fwiw, Parameter.raku has this beaut in it:

[13:15] <lizmat> $type ~~ / .*? \[ <( .* )> \] $$/;

[13:15] <lizmat>  $raku ~= $/ ~ $modifier if $/;

[13:15] <nine> When a typical user asks a Parameter for its type, they will want to know what kind of argument they may pass to this parameter. And in this case that is a Positional[Int]. It's hardly the typical use case to try to build a signature that looks similar.

[13:18] *** JimmyZhuo left
[13:27] *** finanalyst joined
[13:29] <lizmat> m: sub a(::T $a, Positional[T] $b) { dd }    # placeholder type ok

[13:29] <camelia> rakudo-moar f8b15dcc6: ( no output )

[13:29] <lizmat> m: sub a(Positional[::T] $a, T $b) { dd }    # placeholder type not recognized  :-(

[13:29] <camelia> rakudo-moar f8b15dcc6: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No such symbol 'T'␤at <tmp>:1␤------> sub a(Positional[::T<HERE>] $a, T $b) { dd }    # placeholder type␤»

[13:33] <Geth> ¦ rakudo/main: 8026638f7a | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[13:33] <Geth> ¦ rakudo/main: RakuAST: fix attributes bound in signatures accidentally becoming read-only

[13:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8026638f7a

[13:33] <Geth> ¦ rakudo/main: 1f958343b7 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[13:33] <Geth> ¦ rakudo/main: RakuAST: mark rw acessor methods as rw

[13:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1f958343b7

[13:33] <nine> 1257!

[13:33] <nine> So that was why my initial support for binding attributes in signatures did not fix more spec tests

[13:39] <lizmat> nice!

[13:50] <Geth> ¦ rakudo/main: 79175d2c33 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[13:50] <Geth> ¦ rakudo/main: RakuAST: fix bogus error about required attribute needing to be marked required

[13:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/79175d2c33

[13:50] <nine> Holy cow another 3 down!

[13:50] <nine> 1260

[14:02] *** finanalyst left
[14:04] <jdv> woohoo

[14:30] *** finanalyst joined
[14:34] <[Coke]> nine++

[16:02] *** finanalyst_ joined
[16:04] *** finanalyst left
[17:00] *** finanalyst_ left
[17:38] <Geth> ¦ roast: 169ddf4749 | (Elizabeth Mattijsen)++ | S06-currying/positional.t

[17:38] <Geth> ¦ roast: Further adjustments on .assuming tests

[17:38] <Geth> ¦ roast: 

[17:38] <Geth> ¦ roast: - remove superstitious .item

[17:38] <Geth> ¦ roast: - remove tests currying Nil, these can never work

[17:38] <Geth> ¦ roast: - give defaults to hash arguments a sensible value: "%a = 2" doesn't work

[17:38] <Geth> ¦ roast: - move special data stuctures to where they are actually needed

[17:38] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/169ddf4749

[19:24] <Geth> ¦ rakudo/main: 5 commits pushed by (Stefan Seifert)++

[19:24] <Geth> ¦ rakudo/main: fe3bc9d134 | RakuAST: fix compiler error on signature declaration of attribute alias

[19:24] <Geth> ¦ rakudo/main: fe1a0f5c68 | RakuAST: fix signature attribute declarations to actually declare

[19:24] <Geth> ¦ rakudo/main: df73f8d16b | RakuAST: fix accessing attribute aliases declared in signatures

[19:24] <Geth> ¦ rakudo/main: b3546fe5ad | RakuAST: throw more useful exception on $.foo outside method

[19:24] <Geth> ¦ rakudo/main: 339ee6494b | RakuAST: fix attribute type for @ and % sigils

[19:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/79175d2c334f...339ee6494b8d

[19:24] <nine> 1261

[19:42] <jdv> yes please

[19:49] *** rakkable left
[19:49] *** rakkable joined
[20:36] <nine> So, 84 spec tests before the finish line, I finally come across the deal breaker.

[20:36] <nine> The one test that destroys the whole house of cards.

[20:37] <nine> m: class A61354_1 { EVAL('method x { "OH HAI" }') }.x

[20:37] <camelia> rakudo-moar 339ee6494: ( no output )

[20:37] <nine> m: class A61354_1 { EVAL('method x { "OH HAI" }') }.x.say

[20:37] <camelia> rakudo-moar 339ee6494: OUTPUT: «OH HAI␤»

[20:41] <nine> This is fundamentally incompatible with the way we stitch things together in RakuAST. To find the package to attach that method to, we ask the resolver for the nearest "package" attach target which would be the RakuAST::Package node representing that package. Alas there is none, because we're at runtime, and the AST is long gone.

[21:16] <patrickb> How relevant is that capability? In principle the mop is very much capable to modify classes at runtime. So maybe we can live with forbidding this specific way of doing it?

[21:17] <patrickb> RakuAST is happening on a version boundary anyways. So it's more than fair to clean up where it makes sense.

[21:17] <patrickb> Or do I miss the point here?

[22:02] <nine> The question is valid. Alas...

[22:02] <Geth> ¦ rakudo/main: bb1737fc0e | (Stefan Seifert)++ | 3 files

[22:02] <Geth> ¦ rakudo/main: RakuAST: fake attach target for adding methods to packages via EVAL

[22:02] <Geth> ¦ rakudo/main: 

[22:02] <Geth> ¦ rakudo/main: At runtime we won't have any AST nodes anymore. Thus if we're in an EVAL

[22:02] <Geth> ¦ rakudo/main: and there's a $?PACKAGE from outside, use a

[22:02] <Geth> ¦ rakudo/main: RakuAST::Declaration::External::Package as attach target. It pretends to

[22:02] <Geth> ¦ rakudo/main: be a RakuAST::Package just enough for attaching methods to work.

[22:02] <Geth> ¦ rakudo/main: 

[22:02] <Geth> ¦ rakudo/main: Fixes: class C { EVAL q[method a() { "hi" }] }; C.a.say

[22:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bb1737fc0e

[22:03] <nine> ...where there's a will, there's a way. With enough blunt force that is.

[23:51] *** sena_kun left
