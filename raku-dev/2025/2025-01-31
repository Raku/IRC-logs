[00:21] *** finanalyst left
[00:58] <[Coke]> lizmat: desired URL to replace the issue in https://github.com/Raku/raku.org/issues/229 ?

[02:05] <[Coke]> https://github.com/Raku/doc/pull/4513 - JJ says Test is Rakudo, not Raku, but that's not right, is it?

[05:24] *** guifa left
[08:41] <ab5tract> It's certainly a fuzzy distinction. I don't see how one could implement a new Raku compiler/interpreter/whatever-er that doesn't include a Test that conforms to the existing API

[08:44] <ab5tract> that said, according to a strict viewpoint, Test is indeed Rakudo and not Raku

[09:25] <lizmat> I'd say that Test is Raku as it is used in roast, and that specifies Raku ?

[10:11] *** sena_kun joined
[10:42] <Geth> ¦ roast: bd38ef0bfd | (Elizabeth Mattijsen)++ | S03-metaops/reduce.t

[10:42] <Geth> ¦ roast: Fix tests wrt to [>>+<<]

[10:42] <Geth> ¦ roast: 

[10:42] <Geth> ¦ roast: This has actually little todo with #1705, but needs a fix in the

[10:42] <Geth> ¦ roast: handling of the HYPER sub in rakudo.  Until then, change the test

[10:42] <Geth> ¦ roast: to a state where they can be TODOed

[10:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/bd38ef0bfd

[10:47] <Geth> ¦ roast: 7a0b23bea1 | (Elizabeth Mattijsen)++ | S32-list/reduce.t

[10:47] <Geth> ¦ roast: Adapt test to no-automatic handling 1 arg case

[10:47] <Geth> ¦ roast: 

[10:47] <Geth> ¦ roast: Since the magic of handling the 1-arg case for reduction with left

[10:47] <Geth> ¦ roast: associativity will be removed as it is *too* magic (and the zero

[10:47] <Geth> ¦ roast: argument case was **not** magically handled).

[10:47] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/7a0b23bea1

[10:55] <Geth> ¦ rakudo/main: 9bcb01e966 | (Elizabeth Mattijsen)++ | src/core.c/metaops.rakumod

[10:55] <Geth> ¦ rakudo/main: Remove the magic handling of left one-arg reduction

[10:55] <Geth> ¦ rakudo/main: 

[10:55] <Geth> ¦ rakudo/main: As this is considered to be the conclusion of #1705:

[10:55] <Geth> ¦ rakudo/main: - there is magic handling for 1-arg with left-associativity

[10:55] <Geth> ¦ rakudo/main: - there is NO magic handling for 0-arg with left-associativity

[10:55] <Geth> ¦ rakudo/main: - there is NO magic handling for 1 and 0-arg with any other

[10:55] <Geth> ¦ rakudo/main:   associativity

[10:55] <Geth> ¦ rakudo/main: 

[10:55] <Geth> ¦ rakudo/main: This broke a few spectests, which have been fixed with

[10:55] <Geth> ¦ rakudo/main: - https://github.com/Raku/roast/commit/bd38ef0bfd

[10:55] <Geth> ¦ rakudo/main: - https://github.com/Raku/roast/commit/7a0b23bea1

[10:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9bcb01e966

[11:10] *** finanalyst joined
[11:12] *** sena_kun left
[11:34] *** finanalyst left
[11:59] <Geth> ¦ rakudo/main: b2198d9e18 | (Elizabeth Mattijsen)++ | src/core.c/metaops.rakumod

[11:59] <Geth> ¦ rakudo/main: Make reduction of hyperop work on 0 / 1 arguments

[11:59] <Geth> ¦ rakudo/main: 

[11:59] <Geth> ¦ rakudo/main: This was first noted in

[11:59] <Geth> ¦ rakudo/main: 

[11:59] <Geth> ¦ rakudo/main:   https://github.com/Raku/old-issue-tracker/issues/3475

[11:59] <Geth> ¦ rakudo/main: 

[11:59] <Geth> ¦ rakudo/main: in 2014.  Its partial fix in the end caused inconsistency in handling

[11:59] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[11:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b2198d9e18

[12:11] <Geth> ¦ roast: d34202519b | (Elizabeth Mattijsen)++ | S03-metaops/reduce.t

[12:11] <Geth> ¦ roast: unTODO now passing tests

[12:11] <Geth> ¦ roast: 

[12:11] <Geth> ¦ roast: Becaise of https://github.com/rakudo/rakudo/commit/b2198d9e18

[12:11] <Geth> ¦ roast: 

[12:11] <Geth> ¦ roast: And make them a little bit more specific.

[12:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d34202519b

[12:19] <Geth> ¦ roast: 75eb5f103b | (Elizabeth Mattijsen)++ | S03-metaops/reduce.t

[12:19] <Geth> ¦ roast: Replace TODOed test (from 2008)

[12:19] <Geth> ¦ roast: 

[12:19] <Geth> ¦ roast: with a test that tests for the currently expected semantics of

[12:19] <Geth> ¦ roast: [,], namely as a producer of a List

[12:19] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/75eb5f103b

[12:19] <lizmat> one fewer test file that needs fudging :-)

[12:26] *** ilogger2 left
[12:26] *** ilogger2_ joined
[13:07] *** finanalyst joined
[13:11] <lizmat> m: dd [and]

[13:11] <camelia> rakudo-moar b2198d9e1: OUTPUT: «Bool::True␤»

[13:11] <lizmat> m: dd [!and]

[13:11] <camelia> rakudo-moar b2198d9e1: OUTPUT: «Bool::True␤»

[13:11] <lizmat> that feels wrong

[13:36] <ab5tract> lizmat: R#5690

[13:36] <linkable6> R#5690 [open]: https://github.com/rakudo/rakudo/pull/5690 Address long-standing discrepancy for != and METAOP_NEGATE

[13:36] <ab5tract> I think it's the same underlying issue?

[13:37] <lizmat> I was about to commit a fix to METAOP_NEGATE

[13:38] <ab5tract> cool :)

[13:40] <lizmat> but reading that now, feels not good

[13:40] <lizmat>  sub METAOP_NEGATE(\op) is implementation-detail {

[13:40] <lizmat> -    -> |c { c.elems > 1 ?? !op.(|c) !! True }

[13:40] <lizmat> +    -> |c { !op.(|c) }

[13:41] <lizmat> or at least incomplete

[13:41] <lizmat> m: say &infix:<==>()

[13:41] <camelia> rakudo-moar b2198d9e1: OUTPUT: «True␤»

[13:41] <lizmat> m: say &infix:<!=>()

[13:41] <camelia> rakudo-moar b2198d9e1: OUTPUT: «True␤»

[13:41] <lizmat> m: say &infix:<!==>()

[13:41] <camelia> rakudo-moar b2198d9e1: OUTPUT: «True␤»

[13:41] <lizmat> feels the latter two should both be False ?

[13:41] <lizmat> or am I missing something

[13:42] <lizmat> it should then also affect:

[13:42] <lizmat> multi sub infix:<!=>(  --> True) { }

[13:42] <lizmat> multi sub infix:<!=>($ --> True) { }

[13:55] <lizmat> afk for a few hours&

[14:03] *** finanalyst left
[16:51] <ab5tract> lizmat: Ah, yes that PR is not polished yet. I've marked it now as a draft  

[16:52] <lizmat> after cycling, decided not to commit that fix to METAOP_NEGATE

[18:48] <Geth> ¦ rakudo/main: 4f8cfb1268 | (Elizabeth Mattijsen)++ | src/core.c/Hash.rakumod

[18:48] <Geth> ¦ rakudo/main: Give Hash.clone the same semantics as Array.clone

[18:48] <Geth> ¦ rakudo/main: 

[18:48] <Geth> ¦ rakudo/main: As in: re-containerize any containerized values when cloning, but

[18:48] <Geth> ¦ rakudo/main: don't go any deeper than the values in the instance itself.  In

[18:48] <Geth> ¦ rakudo/main: respnse to #1997

[18:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4f8cfb1268

[19:24] *** jdv left
[19:30] <Geth> ¦ rakudo/main: 72e2dcd13d | (Elizabeth Mattijsen)++ | src/core.c/Hash/Object.rakumod

[19:30] <Geth> ¦ rakudo/main: Give Hash::Object.clone the same semantics as Array.clone

[19:30] <Geth> ¦ rakudo/main: 

[19:30] <Geth> ¦ rakudo/main: https://github.com/rakudo/rakudo/commit/4f8cfb1268 gave Hash.clone

[19:30] <Geth> ¦ rakudo/main: the same semantics as Array.clone.  But that broke .clone on object

[19:30] <Geth> ¦ rakudo/main: hashes.  This commit fixes that.  In response to #1997

[19:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/72e2dcd13d

[19:36] *** jdv joined
[19:41] <Geth> ¦ roast: 6ea6294fa4 | (Elizabeth Mattijsen)++ | 2 files

[19:41] <Geth> ¦ roast: Add tests for #1997

[19:41] <Geth> ¦ roast: 

[19:41] <Geth> ¦ roast: As fixed by:

[19:41] <Geth> ¦ roast: - https://github.com/rakudo/rakudo/commit/4f8cfb1268

[19:41] <Geth> ¦ roast: - https://github.com/rakudo/rakudo/commit/72e2dcd13d

[19:41] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6ea6294fa4

[19:41] *** sena_kun joined
[22:29] *** guifa joined
[22:42] *** sena_kun left
[23:12] *** sena_kun joined
[23:15] *** sena_kun left
