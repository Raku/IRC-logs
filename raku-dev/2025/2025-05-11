[03:00] <releasable6> Next release in ≈6 days and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[08:19] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: 3216812a2f | (Stefan Seifert)++ | src/core.c/Parameter.rakumod

[08:19] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: Remove type specification by name in Parameter constructor

[08:19] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: 

[08:19] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: The Parameter constructor has a "type" argument that besides type

[08:19] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: objects also accepts concrete values. In moste cases it used that

[08:19] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: value's type but if the value was a string, it instead checked whether

[08:19] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: that string might be a type name and looked up that type instead.

[08:19] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: 

[08:19] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: <…commit message has 8 more lines…>

[08:19] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: review: https://github.com/rakudo/rakudo/commit/3216812a2f

[08:19] <Geth> ¦ rakudo: niner++ created pull request #5877: Remove type specification by name in Parameter constructor

[08:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5877

[08:53] *** lizmat joined
[09:10] *** lizmat left
[09:46] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: 11be008b9d | (Stefan Seifert)++ | src/core.c/Parameter.rakumod

[09:46] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: Remove type specification by name in Parameter constructor

[09:46] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: 

[09:46] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: The Parameter constructor has a "type" argument that besides type

[09:46] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: objects also accepts concrete values. In most cases it uses that

[09:46] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: value's type but if the value is a string, it instead checks whether

[09:46] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: that string might be a type name and looks up that type instead.

[09:46] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: 

[09:46] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: <…commit message has 8 more lines…>

[09:46] <Geth> ¦ rakudo/remove-types-specification-by-name-in-parameter-constructor: review: https://github.com/rakudo/rakudo/commit/11be008b9d

[09:46] <Geth> ¦ rakudo/main: 11be008b9d | (Stefan Seifert)++ | src/core.c/Parameter.rakumod

[09:46] <Geth> ¦ rakudo/main: Remove type specification by name in Parameter constructor

[09:46] <Geth> ¦ rakudo/main: 

[09:46] <Geth> ¦ rakudo/main: The Parameter constructor has a "type" argument that besides type

[09:46] <Geth> ¦ rakudo/main: objects also accepts concrete values. In most cases it uses that

[09:46] <Geth> ¦ rakudo/main: value's type but if the value is a string, it instead checks whether

[09:46] <Geth> ¦ rakudo/main: that string might be a type name and looks up that type instead.

[09:46] <Geth> ¦ rakudo/main: 

[09:47] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>

[09:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/11be008b9d

[09:47] <Geth> ¦ rakudo/main: a82696a1af | niner++ (committed using GitHub Web editor) | src/core.c/Parameter.rakumod

[09:47] <Geth> ¦ rakudo/main: Merge pull request #5877 from rakudo/remove-types-specification-by-name-in-parameter-constructor

[09:47] <Geth> ¦ rakudo/main: 

[09:47] <nine> lizmat: thanks for the quick review :)

[09:47] <tellable6> nine, I'll pass your message to lizmat

[09:47] <Geth> ¦ rakudo/main: Remove type specification by name in Parameter constructor

[09:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a82696a1af

[11:26] <ab5tract> so …does MAIN somehow override that GLOBAL points to?

[11:41] <nine> ab5tract: PseudoStash is the word for those pseudo packages

[11:42] <ab5tract> Ah! Right, now I remember

[11:43] <ab5tract> It’s just really confusing because the runtime details appear exactly the same between the “in scope” and the imported versions

[11:44] <ab5tract> Except that when the thevalue sub is called for the import version, GLOBAL::(a) resolves to Nil

[11:45] <nine> Because module loading tries to be as lexical as possible

[11:45] <ab5tract> But importing should bring it into GLOBAL

[11:46] <ab5tract> I sent a few things to camellia last night showing that was the cas

[11:46] <nine> That wouldn't be very lexical :)

[11:46] <nine> m: module Test {}; say GLOBAL::.keys

[11:46] <camelia> rakudo-moar a82696a1a: OUTPUT: «(Test)␤»

[11:47] <nine> m: use Test; say GLOBAL::.keys

[11:47] <camelia> rakudo-moar a82696a1a: OUTPUT: «()␤»

[11:47] <ab5tract> m: package P { enum E is export <f g> }; import P; dd GLOBAL::(f), ::(f)

[11:47] <camelia> rakudo-moar a82696a1a: OUTPUT: «Failure.new(exception => X::NoSuchSymbol.new(symbol => "GLOBAL::f"))␤E::f␤»

[11:48] <ab5tract> Hmm, now I’m even more confused

[11:48] <nine> m: package P { enum E is export <f g> }; import P; dd GLOBAL::(f), ::(f)

[11:48] <camelia> rakudo-moar a82696a1a: OUTPUT: «Failure.new(exception => X::NoSuchSymbol.new(symbol => "GLOBAL::f"))␤E::f␤»

[11:48] <nine> m: package P { enum E is export <f g> }; dd GLOBAL::(f), ::(f)

[11:48] <camelia> rakudo-moar a82696a1a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    f used at lines 1, 1␤␤»

[11:48] <ab5tract> Anyway, it doesn’t pick it up in global and it doesn’t pick it up with the lexy ::()

[11:48] <ab5tract> (In thevalue, I mean)

[11:49] <ab5tract> I am just tapping on my phone at the moment but will try to provide a usable paste for it

[11:53] <nine> m: use Test; say MY::.keys

[11:53] <camelia> rakudo-moar a82696a1a: OUTPUT: «(&lives-ok &diag $=finish &fails-like &MONKEY-SEE-NO-EVAL !UNIT_MARKER Test &skip-rest &plan &use-ok &throws-like &unlike &nok $/ $?LANGUAGE-REVISION &is-deeply &isa-ok &bail-out &eval-dies-ok &is $¢ &subtest &trait_mod:<is> GLOBALish &does-ok &dies-…»

[12:06] <ab5tract> nine: things are working as expected in the non-import case, but if you put in some print debugging into ‘thevalue’ you will find that ::(a) resolves to Nil, so it’s only picking it up from GLOBAL

[12:06] <ab5tract> I would expect the lexical lookup to also succeed

[12:06] <ab5tract> s/lookup/psuedostash/

[12:07] <ab5tract> R#5875

[12:07] <linkable6> R#5875 [open]: https://github.com/rakudo/rakudo/issues/5875 [good first issue][enumerations][objects] Success in enum resolution during &MAIN invocation depends on declaration scope of the enum.

[12:25] <nine> m: package P { enum E is export <f g> }; import P; dd ::(f)

[12:25] <camelia> rakudo-moar a82696a1a: OUTPUT: «E::f␤»

[12:25] <nine> A lexical lookup apparently does succeed?

[12:29] <ab5tract> nine: not in ‘thevalue’ it doesn’t

[12:30] <ab5tract> Neither for enums imported nor directly declared within the current scope

[12:30] <nine> And why would it? How would those enum values appear in the lexical scope of a sub defined in src/core.c/operators.rakumod?

[12:30] <nine> The whole point of lexical scoping is to avoid the mess such magical name appearing would create :)

[12:31] <ab5tract> Because the lookup is lexical and runtime

[12:31] <nine> lexical *where*

[12:31] <ab5tract> The snippet you just shared should be exactly the same

[12:31] <ab5tract> Ie, an imported enum should be usable in a signature for MAIn

[12:32] <nine> Look at https://github.com/rakudo/rakudo/blob/main/src/core.c/operators.rakumod

[12:33] <nine> How would those enum values appear in that file if they are not imported into that file?

[12:33] <ab5tract> Why am I looking at operators?

[12:33] <ab5tract> The subject is MAIN

[12:33] <nine> Ah, sorry, https://github.com/rakudo/rakudo/blob/main/src/core.c/Main.rakumod

[12:35] <ab5tract> What’s the point of psuedostashea at all if they don’t allow for this kind of thing?

[12:35] <ab5tract> And before we discuss further, is your position that MAiN signatures shouldn’t be able to use imported enums?

[12:36] <ab5tract> Why then can I used imported classes?

[12:36] <nine> The ::(a) can find e.g. core-a, the-value, default-args-to-capture, RUN-MAIN and thanks to the setting being all those core files concatenated, also every top level name in the setting.

[12:36] <nine> Because those are in the lookup's lexical scope.

[12:37] <nine> A enum or any other name imported into a completely different scope is not in that lexical scope, so those cannot be found that way.

[12:37] <ab5tract> Except this only affects enums

[12:38] <ab5tract> You can totally do “use Foo; sub MAIN(Foo $f)

[12:39] <ab5tract> (I say confidently without directly testing 😅)

[12:40] <ab5tract> I recall it working, anyway

[12:41] <nine> > rakudo -Ilib -e 'use Foo; sub MAIN(Foo $a) { }' 1

[12:41] <nine> Usage: -e '...' <a>

[12:41] <nine> With a class Foo is Int { }

[12:42] <ab5tract> Well shucks

[12:42] <ab5tract> This feels unfortunately brittle

[12:43] <ab5tract> But also apparently not so much of an issue that we had tickets about it prior to this ticket

[12:44] <nine> Probably because the things you can reasonably expect to get on the command line are numbers, strings and if you stretch it enums.

[12:44] <ab5tract> Right

[12:45] <ab5tract> But one could also reasonably stash some subset deflations in a separate package

[12:45] <ab5tract> *definitions

[12:45] <nine> true

[12:46] <nine> Anyway, the core of the issues really seems to be that that lookup written like that cannot work as intended.

[12:46] <ab5tract> So… is this remotely fixable? Or do we somehow try to fix the LTA of the current situation with some targeted error? (Producing the error would probably require more or less the same solution as fixing the problem..)

[12:47] <ab5tract> Well the current code did fix some edge case or another, though I can’t recall which atm

[12:47] <nine> Sure. The lookup needs to be done on the actually interesting scope

[12:49] <ab5tract> You make it sound so easy :P

[12:50] <ab5tract> Can we pass psuedostashes as parameters? So I could send the right LEXICAL all the way down to thevalue?

[12:50] <nine> https://docs.raku.org/language/packages#Pseudo-packages

[12:51] <nine> PseudoStash is just an object

[12:51] <ab5tract> Oooo

[12:51] <ab5tract> CLIENT

[12:51] <ab5tract> sounds reasonable

[12:52] <nine> m: sub MAIN() { }

[12:52] <camelia> rakudo-moar a82696a1a: ( no output )

[12:52] <ab5tract> Though MAIN is pretty funky and need not be in a package of its own (maybe that would still meet the right criteria)

[12:52] <nine> In what package is this ^^^ MAIN?

[12:52] <nine> exactly

[12:53] <nine> But I think, you should now quite well what the call stack will look like

[12:53] <ab5tract> So if I do an import outside of a package, these symbols get imported into a pseudostash, right?

[12:53] <nine> Names are imported into a lexical scope

[12:54] <nine> That lexical scope might get accessed via a PseudoStash as that class' implementation contains the necessary low level magic

[12:54] <ab5tract> I think CLIENT might still qualify

[12:55] <ab5tract> Because CALLER refers to lexical scope, not a package

[12:55] <ab5tract> According to the docs anyway

[12:55] <nine> Why are you so interested in some package?

[12:59] <ab5tract> I’m not

[13:00] <ab5tract> I’m looking at the list of pauedosatashes for something that would work for MAIN

[13:00] <ab5tract> CLIENT goes up the call chain until you are no longer in Main.Ramiro’s

[13:00] <ab5tract> lol

[13:00] <ab5tract> Main.rakumod

[13:02] <ab5tract> Maybe it would be simpler if you explained what you have in mind for accessing the correct scope

[13:05] <nine>  from SETTING::src/core.c/Main.rakumod:78  (/home/nine/rakudo.main/blib/CORE.c.setting.moarvm:thevalue)

[13:05] <nine>  from SETTING::src/core.c/Main.rakumod:148  (/home/nine/rakudo.main/blib/CORE.c.setting.moarvm:)

[13:05] <nine>  from SETTING::src/core.c/Main.rakumod:92  (/home/nine/rakudo.main/blib/CORE.c.setting.moarvm:default-args-to-capture)

[13:05] <nine>  from SETTING::src/core.c/Main.rakumod:427  (/home/nine/rakudo.main/blib/CORE.c.setting.moarvm:RUN-MAIN)

[13:05] <nine>  from -e:1  (<ephemeral file>:<unit>)

[13:08] <nine> Looks to me like it's about 4 CALLER::s out. So maybe something like CALLER::CALLER::CALLER::CALLER::

[13:09] <nine> Or rather CALLER::CALLER::CALLER::CALLER::MY::

[13:10] <ab5tract> trying that now

[13:10] <ab5tract> tried CLIENT and it  doesn't work

[13:10] <nine> Which can be made less fragile by taking the CALLER::MY:: in RUN-MAIN's top-level and storing it in a lexical that's accessed in thevalue

[13:12] <ab5tract> the fragile variant doesn't work either :(

[13:13] <ab5tract> I'll try the RUN-MAIN now

[13:13] <nine> How do you know?

[13:13] <ab5tract> I got my laptop out :)

[13:13] <ab5tract> is callframe(1).my different than CALLER::MY:: ?

[13:16] <ab5tract> grrr. the one time I don't do a full recompile of Rakudo...

[13:16] <ab5tract> so maybe it did work.

[13:16] <ab5tract> checking now

[13:20] <ab5tract> so checking %caller-my{a} works fine! CALLER::CALLER::CALLER::CALLER::MY:: is not

[13:22] <Geth> ¦ rakudo/r5875: 7757312e7d | ab5tract++ | src/core.c/Main.rakumod

[13:22] <Geth> ¦ rakudo/r5875: Better commit message coming soon

[13:22] <Geth> ¦ rakudo/r5875: review: https://github.com/rakudo/rakudo/commit/7757312e7d

[14:01] <ab5tract> nine: do you reckon that ::(a) was always wrong? or should I do something like try ::(a) // %caller-my{a} ?

[14:03] <nine> The former

[14:07] <ab5tract> 4 TODOs passing :O

[14:07] <ab5tract> I think that must just be noise

[14:11] <nine> That's likely the TODOs added for RakuAST

[14:12] <nine> I.e. spec tests that only pass accidentally on the old frontend

[14:15] <ab5tract> ok so interestingly enough, we *do* need to attempt to get ::(a)

[14:15] <ab5tract> or else enums don't convert properly

[14:16] <ab5tract> it's above my paygrade to know why :D

[14:18] <ab5tract> ... how can a subtest be marked as failing when all of it's component tests are marked passing? 🙃

[14:19] <ab5tract> .... because I misread the output, naturally

[14:26] <Geth> ¦ rakudo/r5875: 020eccdf5b | ab5tract++ | src/core.c/Main.rakumod

[14:26] <Geth> ¦ rakudo/r5875: Allow MAIN args to reference imported names

[14:26] <Geth> ¦ rakudo/r5875: 

[14:26] <Geth> ¦ rakudo/r5875: Previously the following was not possible:

[14:26] <Geth> ¦ rakudo/r5875: 

[14:26] <Geth> ¦ rakudo/r5875:     module M { enum E is export <F G> }

[14:26] <Geth> ¦ rakudo/r5875:     import M;

[14:26] <Geth> ¦ rakudo/r5875:     sub MAIN (E $f, E :$g) { ... }

[14:26] <Geth> ¦ rakudo/r5875: <…commit message has 5 more lines…>

[14:26] <Geth> ¦ rakudo/r5875: review: https://github.com/rakudo/rakudo/commit/020eccdf5b

[14:27] <Geth> ¦ rakudo: ab5tract++ created pull request #5878: Allow MAIN args to reference imported names

[14:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5878

[15:35] *** guifa left
[15:39] *** guifa joined
[19:48] *** MasterDuke joined
[20:42] <MasterDuke> m: my $s; my $a; my $b; for ^1_000_000 { $a = rand < 0.5 ?? Int !! 5; $b = rand < 0.5 ?? Int !! 2; $s += $a // $b // -1 }; say now - INIT now; say $s

[20:42] <camelia> rakudo-moar a82696a1a: OUTPUT: «1.110254003␤2751773␤»

[20:42] <MasterDuke> m: my $s; my $a; my $b; for ^1_000_000 { $a = rand < 0.5 ?? Int !! 5; $b = rand < 0.5 ?? Int !! 2; $s += $a // ($b // -1) }; say now - INIT now; say $s

[20:42] <camelia> rakudo-moar a82696a1a: OUTPUT: «0.853582615␤2748287␤»

[20:43] <MasterDuke> noticed that from https://6guts.wordpress.com/2017/07/02/optimizing-reading-lines-from-a-file/

[20:45] <MasterDuke> looks like there are a couple cases of chained // in rakudo. might be worth investigating if they should be parenthized

[20:51] * ab5tract crosses his fingers in hopes that we have the right knobs now that we can eliminate the performance hit of not parenthesizing

[21:21] *** MasterDuke left
[21:27] <ugexe> I wonder if we still need %*ENV<PERL6_PROGRAM_NAME>. it looks like it was originally added by nine almost a decade ago to be used by CURI (although it no longer seems to be used by anything) in https://github.com/rakudo/rakudo/commit/b597b7cd814ec19e57f8e34ace36be9811d72ba8

[21:29] *** lizmat joined
[21:30] <ugexe> hmmm its used by App::InstallerMaker::WiX - https://github.com/raku-community-modules/App-InstallerMaker-WiX/blob/37fdd89037b0b4bc3fad43f8fb87e55b7ac0b4f9/lib/App/InstallerMaker/WiX/InstallerBuilder.rakumod#L246

[22:19] <Geth> ¦ rakudo/main: 28a1cdcafe | ab5tract++ | src/core.c/Main.rakumod

[22:19] <Geth> ¦ rakudo/main: Allow MAIN args to reference imported names

[22:19] <Geth> ¦ rakudo/main: 

[22:19] <Geth> ¦ rakudo/main: Previously the following was not possible:

[22:19] <Geth> ¦ rakudo/main: 

[22:19] <Geth> ¦ rakudo/main:     module M { enum E is export <F G> }

[22:19] <Geth> ¦ rakudo/main:     import M;

[22:19] <Geth> ¦ rakudo/main:     sub MAIN (E $f, E :$g) { ... }

[22:19] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[22:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/28a1cdcafe

[23:00] <releasable6> Next release in ≈5 days and ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

