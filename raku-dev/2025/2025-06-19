[00:08] <ab5tract> patrickb: have you seen https://microsoft.github.io/debug-adapter-protocol/?

[00:09] <ab5tract> Saw this because zed editor just added a debugger that supports that

[00:10] <ab5tract> nine: unfortunately it has been a time issue for me, otherwise I would have poked at those other two tickets

[01:29] *** nine left
[01:30] *** nine joined
[04:21] <patrickb> ab5tract: IIRC that's closely related to the language server protocol.

[08:06] <patrickb> nine: We'll get there eventually. It just needs to move to the top of a few people's to-do lists.

[08:51] *** nine left
[08:51] *** nine joined
[09:02] <lizmat> just spotted on Mastodon:

[09:02] <lizmat> m: class A { has $.b = 42; method bb() { $.b++; } }; my $A = A.new; $A.bb; dd $A.b

[09:02] <camelia> rakudo-moar 92068d9b4: OUTPUT: «42␤»

[09:02] <lizmat> feels that should fail, just like:

[09:03] <lizmat> m: class A { has $.b = 42; method bb() { self.b++; } }; my $A = A.new; $A.bb; dd $A.b

[09:03] <camelia> rakudo-moar 92068d9b4: OUTPUT: «Cannot resolve caller postfix:<++>(Int:D); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw --> Int:D)␤    (int $a is rw --> int)␤    (uint $a is rw --> uint)␤    (num $a is rw …»

[09:03] <lizmat> fwiw, same issue exists with = 42, and += 42

[09:06] <lizmat> bisectable6: class A { has $.b = 42; method bb() { $.b++; } }; my $A = A.new; $A.bb; dd $A.b

[09:06] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[09:07] <bisectable6> lizmat, More than 3 changes to bisect, please try a narrower range like old=2025.01 new=HEAD

[09:07] <bisectable6> lizmat, Output on all releases: https://gist.github.com/50206818ba8c11170b34723c0280cb84

[09:07] <lizmat> bisectable6: old=2023.02 class A { has $.b = 42; method bb() { $.b++; } }; my $A = A.new; $A.bb; dd $A.b

[09:07] <bisectable6> lizmat, Bisecting by exit code (old=2023.02 new=92068d9). Old exit code: 1

[09:08] <bisectable6> lizmat, bisect log: https://gist.github.com/d4e1990a77de9b2548d0c22f36d90e2d

[09:08] <bisectable6> lizmat, (2025-02-15) https://github.com/rakudo/rakudo/commit/a6608c2121fccb5a1f33ca46127abbc5ffe83e68

[09:09] <lizmat> aahhh.. the $.foo is self.foo.item case  :-(

[09:25] *** [Tux] left
[09:26] <lizmat> m: sub a($a) { use nqp; say nqp::iscont($a) }; a 666   # untyped, $a is a container

[09:26] <camelia> rakudo-moar 92068d9b4: OUTPUT: «1␤»

[09:26] <lizmat> m: sub a($a) { use nqp; say nqp::iscont($a); $a = 1 }; a 666   # but not one can assign to

[09:26] <camelia> rakudo-moar 92068d9b4: OUTPUT: «1␤Cannot assign to a readonly variable or a value␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[09:27] <lizmat> m: sub a(Int $a) { use nqp; say nqp::iscont($a) }; a 666   # typed, $a is NOT a container

[09:27] <camelia> rakudo-moar 92068d9b4: OUTPUT: «0␤»

[09:29] *** [Tux] joined
[09:38] <lizmat> nine: looking in the binder to find where (and how) read-only containers are created

[09:38] <lizmat> but so far, appear to be glancing over it  :-(

[09:38] <lizmat> ab5tract: maybe I'm looking at the wrong place?

[10:32] <Geth> ¦ rakudo/main: f95f85ac3e | (Elizabeth Mattijsen)++ | src/core.c/Mu.rakumod

[10:32] <Geth> ¦ rakudo/main: Make sure .item returns a read-only container

[10:32] <Geth> ¦ rakudo/main: 

[10:32] <Geth> ¦ rakudo/main: Issue #5908 showed that the container that .item should return,

[10:32] <Geth> ¦ rakudo/main: should either be the invocant (if it is a container already), or

[10:32] <Geth> ¦ rakudo/main: a read-only container if it is not.

[10:32] <Geth> ¦ rakudo/main: 

[10:32] <Geth> ¦ rakudo/main: This commit achieves that by introducing a helper sub called

[10:32] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[10:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f95f85ac3e

[10:38] <Geth> ¦ roast: 5dc49a8fe5 | (Elizabeth Mattijsen)++ | S12-methods/accessors.t

[10:38] <Geth> ¦ roast: Add test for #5908

[10:38] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/5dc49a8fe5

[12:05] <[Tux]> Rakudo v2025.05-87-gf95f85ac3 (v6.d) on MoarVM 2025.05-70-g66f31681f

[12:05] <[Tux]> csv-test-xs-20      0.114 -  0.115

[12:05] <[Tux]> csv-ip5xs           0.262 -  0.263

[12:05] <[Tux]> test-t --race       0.273 -  0.279

[12:05] <[Tux]> test-t              0.409 -  0.427

[12:05] <[Tux]> csv-parser          1.120 -  1.124

[12:05] <[Tux]> test-t-20 --race    1.248 -  1.260

[12:05] <[Tux]> csv-ip5xs-20        1.050 -  1.398

[12:05] <[Tux]> test                1.772 -  1.779

[12:05] <[Tux]> test-t-20           4.993 -  5.042

[12:05] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[12:09] <Geth> ¦ rakudo/main: 67c1b5182d | (Timo Paulssen)++ | src/vm/moar/ops/perl6_ops.c

[12:09] <Geth> ¦ rakudo/main: Better error when p6invokeunder gets passed wrong arg types

[12:09] <Geth> ¦ rakudo/main: 

[12:09] <Geth> ¦ rakudo/main: instead of segfaulting.

[12:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/67c1b5182d

[12:10] <timo> someone can take over from this; this addresses the `use nqp; nqp::p6isbindable(Signature.new,Capture.new)` segfault

[12:10] <lizmat> timo++

[12:19] <[Coke]> getting tux to be able to run rakuast would also be nice.

[12:20] <[Coke]> tux++

[12:22] <[Tux]> [Coke] : https://tux.nl/Files/rebuild is the script to build/install raku. What should be changed?

[12:22] <lizmat> https://raku.land/zef:slavenskoj/Inline::Python3   I wonder how much of this is AI hallucinated 

[12:22] * lizmat hopes none of it is

[12:39] <timo> turning off GC to optimize GC performance is certainly A Choice

[12:52] <Geth> ¦ rakudo/main: 8263885caf | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[12:52] <Geth> ¦ rakudo/main: RakuAST: don't allow upping language versions in EVAL

[12:52] <Geth> ¦ rakudo/main: 

[12:52] <Geth> ¦ rakudo/main: This code silently does the wrong thing.

[12:52] <Geth> ¦ rakudo/main: 

[12:52] <Geth> ¦ rakudo/main:     use v6.c;

[12:52] <Geth> ¦ rakudo/main:     "use v6.*; say nano".EVAL;  # expect "nano" to work

[12:52] <Geth> ¦ rakudo/main:     ===SORRY!=== Error while compiling EVAL_0

[12:52] <Geth> ¦ rakudo/main: <…commit message has 13 more lines…>

[12:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8263885caf

[12:56] <lizmat> m: use v6.*; "use v6.d; say nano".EVAL   # still needs work  :-(

[12:56] <camelia> rakudo-moar 67c1b5182: OUTPUT: «1750337785053634567␤»

[12:59] <lizmat> afk for a bit&

[13:42] <timo> do we already know how it's supposed to work?

[13:42] <timo> do we just put the 6.whichever setting in between the eval's scope and the scope of the thing that calls eval?

[13:50] <[Coke]> tux - While we might be able to fake it, ideally you'd want one raku installed defaulting to RAKUAST and one with it off (the current default). We have a blocker on make install with the AST version just now, We'll ping you when we can do it both ways.

[13:50] <[Coke]> You could probably do a run right now with `RAKUDO_RAKUAST=1 (your script)`

[13:51] <[Coke]> be curious to see the results of that, I guess.

[14:05] <[Tux]> +++ Compiling   blib/CORE.c.setting.moarvm

[14:05] <[Tux]> The following step can take a long time, please be patient.

[14:05] <[Tux]> Stage start      :   0.000

[14:05] <[Tux]> Class X::Redeclaration+{X::Comp} cannot inherit from X::Redeclaration because the parent is not composed yet

[14:05] <[Tux]>    at src/Perl6/Metamodel/Configuration.nqp:53  (/pro/3gl/CPAN/rakudo/blib/Perl6/Metamodel.moarvm:throw_or_die)

[14:06] <[Tux]>  from src/Perl6/Metamodel/MultipleInheritance.nqp:60  (/pro/3gl/CPAN/rakudo/blib/Perl6/Metamodel.moarvm:add_parent)

[14:06] <[Tux]> (fail on `🐧 env RAKUDO_RAKUAST=1 rebuild`

[14:07] <ugexe> "We have a blocker on make install with the AST version just now, We'll ping you when we can do it both ways."

[14:07] <[Tux]> I saw that, but it does not even build like that. I'll awit instructions :}

[14:36] <ab5tract> lizmat: I don’t know if $.a++ should fail. We have allowed people to use the accessor form as an equivalent to $!a for so long that it feels off to diverge the behavior. Though I never use the accessor form so maybe I don’t know the expectations of those who do

[14:38] <ab5tract> The commit says prevent upping the version in an eval. But going from more less specific does make some sense, doesn’t it?

[14:39] <ab5tract> [Tux] you don’t really need to be able to compile with RakuAST to get the csv timings tho, right?

[14:39] <ugexe> lizmat: i would be surprised if that Python3 library works. at a minimum https://github.com/slavenskoj/raku-inline-python3/blob/268783ec9aba7737449b7ec4f83f8fd244fbc889/META6.json#L25-L27 isn't right

[14:39] <ab5tract> But the broken zef situation may still be a major blocker

[14:40] <ab5tract> As [Coke]++ pointed out

[14:41] <ugexe> yeah it definitely is not at a point it should be in the ecosystem

[14:41] <ugexe> https://github.com/slavenskoj/raku-inline-python3/blob/268783ec9aba7737449b7ec4f83f8fd244fbc889/lib/Inline/Python3.rakumod#L15

[16:53] *** nine left
[16:53] *** nine joined
[16:59] <ab5tract> *going from less specific to more specific

[18:05] <El_Che> [Coke]: is there a chance the back-out will be backed out?

[18:40] *** coleman left
[18:41] *** coleman joined
[18:49] <patrickb> re Inline python3, the readme states:

[18:49] <patrickb> "This is an initial implementation focusing on core functionality and is in development and testing."

[18:50] <patrickb> So seems some stuff works already.

[18:50] <patrickb> I think this is pretty cool.

[18:56] <ab5tract> yeah definitely. I don't think we have ever set up a minimum criteria for publishing something to the ecosystem, have we?

[18:57] <ab5tract> I could see some simple filters in fez that check whether the resource handling is sane or not, amongst other details

[18:57] <ab5tract> but I don't think it would be fair to single this module out in particular as "ecosystem unworthy" 

[19:12] <[Coke]> El_Che: it should be, yes. Would love it if you could submit a PR.

[19:13] <[Coke]> Issue is https://github.com/rakudo/rakudo/issues/5864

[19:21] <lizmat> ab5tract: $.a++ *should* fail, if $.a does not have "is rw", for the same reason that 42++ fails

[19:21] <lizmat> m: 42++

[19:21] <camelia> rakudo-moar 8263885ca: OUTPUT: «Cannot resolve caller postfix:<++>(Int:D); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw --> Int:D)␤    (int $a is rw --> int)␤    (uint $a is rw --> uint)␤    (num $a is rw …»

[20:03] <lizmat> m: use v6.*; sub a() { say $CALLER::a }; my $a = 42; a

[20:03] <camelia> rakudo-moar 8263885ca: OUTPUT: «42␤»

[20:03] <lizmat> m: use v6.d; sub a() { say $CALLER::a }; my $a = 42; a

[20:03] <camelia> rakudo-moar 8263885ca: OUTPUT: «Cannot access '$a' through CALLER, because it is not declared as dynamic␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:03] <lizmat> So I wonder: is that change in 6.e made consciously, or is it a NYI in the new PseudoStash handling ?    vrurg ?

[20:04] *** guifa_ left
[20:06] <lizmat> m: say ::("Exception").gist

[20:06] <camelia> rakudo-moar 8263885ca: OUTPUT: «(Exception)␤»

[20:07] <lizmat> m: use v6.*; say ::("Exception").gist

[20:07] <camelia> rakudo-moar 8263885ca: OUTPUT: «Died with Exception␤  in block <unit> at <tmp> line 1␤␤»

[20:14] <ab5tract> I don’t follow how a clearly containerized value can’t handle ++ versus a non containerized value

[20:15] <ab5tract> My point is more about the cultural usage pf $.foo than the technical correctness of it

[20:15] <ab5tract> Ah, never mind, forgot about .item

[20:15] <lizmat> m: sub a($a) { use nqp; say nqp::iscont($a) };  a 42

[20:15] <camelia> rakudo-moar 8263885ca: OUTPUT: «1␤»

[20:15] <lizmat> so $a is a container here

[20:15] <lizmat> yet:

[20:15] <ab5tract> But hen how is it working now? 🙃

[20:16] <lizmat> m: sub a($a) { $a = 666 };  a 42

[20:16] <camelia> rakudo-moar 8263885ca: OUTPUT: «Cannot assign to a readonly variable or a value␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:16] <ab5tract> Yes that part I grok and accept

[20:16] <lizmat> it's a special sort of container that is read-only

[20:16] <lizmat> so what's the issue with $.foo++ not working ?

[20:16] <ab5tract> I have never used $.foo outside of a gas declaration

[20:16] <lizmat> well, you can't

[20:16] <ab5tract> ?

[20:17] <lizmat> I read "gas" as "class" ?

[20:17] <ab5tract> I meant has

[20:17] <ab5tract> (Switching to a real keyboard now :))

[20:18] <lizmat> aah... ok

[20:18] <ab5tract> IMO it was a mistake to have $.whatever outside of a has. I find it unreadable, but more than that, I don't think the people using it understand the distinction

[20:19] <lizmat> well, the nice thing about $.foo is that you can interpolate it in a string, and self.foo you can't

[20:19] <lizmat> also, it is subclass proof

[20:19] <lizmat> vs $!foo not being subclass proof

[20:20] <ab5tract> hmm, I hadn't considered that... why isn't $!foo sub-class proof?

[20:20] <ab5tract> because someone might have declared custom methods for handling the value?

[20:20] <lizmat> because it directly accesses the attribute, even if a subclass created their own accessor

[20:20] <lizmat> yup

[20:21] <ab5tract> okay, I could buy that. *iff* it wasn't tacking on a .item call

[20:22] <lizmat> yeah, I'm still not sure why *that* was done

[20:23] <ab5tract> but I guess I should summarize my concern as: this will almost certainly break user-space in a way that surprises people who had (reasonably or not) assumed that $!foo and $.foo were equivalent syntax

[20:24] <ab5tract> I wonder what would collapse if we un-itemized it... because then the distinction is only along a single, easy to describe axis (via accessor or not)

[20:25] <ab5tract> Anyway, despite that concern, I do support your fix for this :)

[20:33] <japhb> The .item call is the difference between $.foo and @.foo, IIRC.

[20:33] <lizmat> eh, I think it's the other way around?

[20:33] <japhb> Because really they're both wrapped around self.foo()

[20:34] <japhb> lizmat: Possibly confusing wording.  I think we agree.

[20:34] <lizmat> $ sigilled attributes get an .item attached, @ attributes a .list, and % attributes a .hash ?

[20:37] <lizmat> m: use v6.d; subset A of Int; my A $a = 42; $a = Nil; say $a

[20:37] <camelia> rakudo-moar 8263885ca: OUTPUT: «(A)␤»

[20:37] <lizmat> m: use v6.*; subset A of Int; my A $a = 42; $a = Nil; say $a

[20:37] <camelia> rakudo-moar 8263885ca: OUTPUT: «(Int)␤»

[20:38] <lizmat> actually:

[20:38] <lizmat> m: use v6.d; subset A of Int; my A $a; say $a.VAR.default

[20:38] <camelia> rakudo-moar 8263885ca: OUTPUT: «(A)␤»

[20:38] <lizmat> m: use v6.*; subset A of Int; my A $a; say $a.VAR.default

[20:38] <camelia> rakudo-moar 8263885ca: OUTPUT: «(Int)␤»

[20:39] <lizmat> ok, will look at that tomorrow

[20:39] <lizmat> &

[20:39] <ab5tract> o/

