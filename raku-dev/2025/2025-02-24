[01:48] <[Coke]> metoo

[01:48] <[Coke]> it was a killer feature from an alternate timeline.

[06:50] <patrickb> The binaries for 2025.02 are now available on rakudo.org (and thus also in rakubrew).

[08:50] *** sena_kun joined
[09:00] <nine> m: sub foo() { ... }; sub foo() { say "foo" }; foo

[09:00] <camelia> rakudo-moar 1505faae1: OUTPUT: «foo␤»

[09:01] <nine> So far so clear.

[09:01] <nine> m: our sub foo() { ... }; our sub foo() { say "foo" }; foo

[09:01] <camelia> rakudo-moar 1505faae1: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Redeclaration of routine 'foo' (already defined in package GLOBAL). ␤Did you mean to declare a multi-sub?␤at <tmp>:1␤------> o() { ... }; our sub foo() { say "foo" }<HERE>; foo␤    expecting any of:…»

[09:01] <nine> Still clear?

[09:12] <timo> sounds like we're just not checking if something in the package is a stub?

[09:43] *** finanalyst joined
[09:48] <timo> so, the attempt to from-xml the S05.html from the perl6-web-scraper tests comes from the fact that perl6-web-scraper only tries to use HTML::Parser::XML when the thing being passed to the scrape method is an http or https url, but if it's a string or something that can be slurped, it will just call from-xml on it. the tests of perl6-web-scraper therefore hang because the XML module doesn't bail

[09:48] <timo> out fast when an XML document is malformed, instead going into catastrophic backtracking

[10:00] <Geth> ¦ rakudo/main: 080e71f31d | (Stefan Seifert)++ | src/Raku/Actions.nqp

[10:00] <Geth> ¦ rakudo/main: RakuAST: fix exceptions in BEGIN time EVAL leaving resolver in inconsistent state

[10:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/080e71f31d

[10:00] <Geth> ¦ rakudo/main: d5fb927c65 | (Stefan Seifert)++ | 3 files

[10:00] <Geth> ¦ rakudo/main: RakuAST: support replacing routine stubs without special syntax

[10:00] <Geth> ¦ rakudo/main: 

[10:00] <Geth> ¦ rakudo/main: Fixes: sub foo() { ... }; sub foo() { say "for real" };

[10:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d5fb927c65

[10:01] <nine> 1186

[10:19] <Geth> ¦ rakudo: lizmat unassigned from tbrowder Issue multi-line comment problems https://github.com/rakudo/rakudo/issues/3339

[10:19] <Geth> ¦ rakudo/main: 3ee9c20bfe | (Elizabeth Mattijsen)++ | src/core.c/REPL.rakumod

[10:19] <Geth> ¦ rakudo/main: Allow multi-line comments in REPL as well

[10:19] <Geth> ¦ rakudo/main: 

[10:19] <Geth> ¦ rakudo/main: Fixes #3339

[10:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3ee9c20bfe

[10:29] *** sena_kun left
[10:36] <lizmat> nine: do you think we could make this work in RakuAST:

[10:36] <lizmat> m: my $a; { q/$a := 42/.EVAL }

[10:36] <camelia> rakudo-moar 3ee9c20bf: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Cannot bind to '$a' because it was bound in a signature and variables␤bound in signatures cannot be rebound unless they were declared with the␤'is rw' or 'is copy' traits␤at /home/camelia…»

[10:36] <lizmat> hmmm   further golf:

[10:36] <lizmat> m: my $a; q/$a := 42/.EVAL

[10:36] <camelia> rakudo-moar 3ee9c20bf: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Cannot bind to '$a' because it was bound in a signature and variables␤bound in signatures cannot be rebound unless they were declared with the␤'is rw' or 'is copy' traits␤at /home/camelia…»

[10:37] <nine> probably?

[10:38] <lizmat> in light of #1565

[10:38] <lizmat> in light of R#1565

[10:38] <linkable6> R#1565 [open]: https://github.com/rakudo/rakudo/issues/1565 [REPL][Will be addressed in RakuAST] In REPL cannot bind to scalars declared on earlier lines

[10:38] <lizmat> ok, I'll leave the "will be addressed" tag on it then  :-)

[11:09] *** finanalyst left
[11:10] <Geth> ¦ rakudo/main: b6eed683ba | (Elizabeth Mattijsen)++ | src/core.c/Range.rakumod

[11:10] <Geth> ¦ rakudo/main: Add Range.min/max(:k,:kv,:p) support

[11:10] <Geth> ¦ rakudo/main: 

[11:10] <Geth> ¦ rakudo/main: As mentioned lacking in #5791

[11:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b6eed683ba

[11:46] <Geth> ¦ roast: bbd506e1bf | (Elizabeth Mattijsen)++ | S02-types/range.t

[11:46] <Geth> ¦ roast: Add Range tests for #5791

[11:46] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/bbd506e1bf

[12:44] <lizmat> notable6: weekly

[12:44] <notable6> lizmat, 4 notes: https://gist.github.com/a196e798a226837de45c371e8d09fe20

[12:48] <lizmat> notable6: weekly reset

[12:48] <notable6> lizmat, Moved existing notes to “weekly_2025-02-24T12:48:56Z”

[13:14] <Geth> ¦ rakudo/main: e39269087e | (Stefan Seifert)++ | 2 files

[13:14] <Geth> ¦ rakudo/main: RakuAST: support taking operators as sub arguments

[13:14] <Geth> ¦ rakudo/main: 

[13:14] <Geth> ¦ rakudo/main: Lets us successfully parse and compile: sub foo2(&infix:<@@>)

[13:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e39269087e

[13:14] <Geth> ¦ rakudo/main: 37b45597a9 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[13:14] <Geth> ¦ rakudo/main: RakuAST: don't die when operator doesn't resolve to routine directly

[13:14] <Geth> ¦ rakudo/main: 

[13:15] <Geth> ¦ rakudo/main: When an operator is passed as an argument or stored in a variable, we

[13:15] <Geth> ¦ rakudo/main: won't resolve to the routine directly. Thus we can't ask the routine for

[13:15] <Geth> ¦ rakudo/main: its precedence information.

[13:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/37b45597a9

[13:16] <nine> 1187

[13:19] *** |Tux| left
[13:23] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/02/24/2025-08-starting-an-avalanche/

[14:10] <Geth> ¦ roast: f21880cb52 | (Elizabeth Mattijsen)++ | S02-types/range.t

[14:10] <Geth> ¦ roast: More tests for #5791

[14:10] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f21880cb52

[14:11] <Geth> ¦ rakudo/main: 2d6dd3e3f5 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[14:11] <Geth> ¦ rakudo/main: Make min/max(Range) do the right thing

[14:11] <Geth> ¦ rakudo/main: 

[14:11] <Geth> ¦ rakudo/main: Fixes #5791

[14:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2d6dd3e3f5

[14:13] *** [TuxCM] joined
[14:45] <Geth> ¦ rakudo/main: 7940f6d82e | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[14:45] <Geth> ¦ rakudo/main: RakuAST: support operators declared as variables (instead of constants)

[14:45] <Geth> ¦ rakudo/main: 

[14:45] <Geth> ¦ rakudo/main: Fixes: my &infix:<foo> = sub ($a, $b) { $a ~ $b }; say "foo" foo "bar"

[14:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7940f6d82e

[14:45] <Geth> ¦ rakudo/main: 4dde69f9a4 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[14:45] <Geth> ¦ rakudo/main: RakuAST: fix explicit return with pair syntax

[14:45] <Geth> ¦ rakudo/main: 

[14:45] <Geth> ¦ rakudo/main: Fixes: return :a(1);

[14:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4dde69f9a4

[14:45] <nine> 1188

[14:45] <Geth> ¦ rakudo/main: 3610e7abac | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[14:45] <Geth> ¦ rakudo/main: RakuAST: ignore empty statements for sink and return value determination

[14:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3610e7abac

[15:10] *** liztormato joined
[15:19] *** liztormato left
[16:53] *** [TuxCM] left
[18:04] *** leont left
[18:04] *** leont joined
[18:46] *** sena_kun joined
[22:40] *** rakkable left
[22:40] *** rakkable joined
[23:12] *** sena_kun left
