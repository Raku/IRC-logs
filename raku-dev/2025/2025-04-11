[00:11] <[Coke]> yes, next blin run will probably do that.

[00:12] <[Coke]> ... I'll kick that off now while thinking of it.

[00:22] <[Coke]> Merging GLOBAL symbols failed: duplicate definition of symbol SSL # haven't seen that in a while

[00:24] <[Coke]> ok, maybe will kick this off tomorrow...

[00:24] *** MasterDuke left
[01:03] *** MasterDuke joined
[01:04] <MasterDuke> timo: any idea why there are so many deopts happening when compiling CORE.c.setting with rakuast?

[01:05] <MasterDuke> MVM_spesh_deopt_find_inactive_frame_deopt_idx was called ~40m times

[01:07] <MasterDuke> and `spesh_cand->body.num_deopts` has some decently high numbers. most common value is 86 at 3.7m times, and 1134 (which is one of the largest numbers) occurs 556k times

[01:07] <MasterDuke> guess i should see what the numbers are during a non-rakuast compile to compare...

[01:17] <MasterDuke> ok, almost the same. 36m total calls. largest value is actually almost twice as high (2700)

[01:17] <MasterDuke> but i guess number of deopts isn't the reason rakuast is slower...

[01:18] *** MasterDuke left
[06:59] *** [Tux] left
[07:03] *** [Tux] joined
[07:21] *** lizmat joined
[07:33] <nine> The pretty obvious next step is fixing make install

[07:34] *** [Tux] left
[07:36] <nine> MasterDuke: I put almost no consideration on performance when implementing except for the architectural avoidance of traversing the whole tree multiple times. A plain normal Raku-level profile would probably be a good start

[07:36] <tellable6> nine, I'll pass your message to MasterDuke

[07:37] *** [Tux] joined
[07:51] <[Tux]> Rakudo v2025.03-236-gbe3d06a71 (v6.d) on MoarVM 2025.03-13-gb405e940e

[07:51] <[Tux]> csv-test-xs-20      0.137 -  0.138

[07:51] <[Tux]> csv-ip5xs           0.260 -  0.278

[07:51] <[Tux]> test-t --race       0.268 -  0.275

[07:51] <[Tux]> test-t              0.408 -  0.417

[07:51] <[Tux]> csv-parser          1.095 -  1.100

[07:51] <[Tux]> csv-ip5xs-20        1.118 -  1.176

[07:51] <[Tux]> test-t-20 --race    1.255 -  1.264

[07:51] <[Tux]> test                1.820 -  1.889

[07:51] <[Tux]> test-t-20           4.957 -  5.055

[07:51] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[08:04] *** nine left
[08:04] *** nine joined
[09:17] *** lizmat left
[09:56] *** finanalyst joined
[10:34] <timo> deopt is not equal to deopt :)

[10:35] <timo> "deopt all" vs "deopt one" is already a decent difference

[10:36] <timo> "deopt all" on very very deep stacks can be rather expensive, which i saw on one of these worst-case generated-code kind of examples

[10:44] <nine> I think the number of deopts alone tells you practically nothing. You'd need to compare it to number of optimized runs.

[10:46] <timo> and whether the deopt happens early or late in a frame, and if it's in an OSR'd frame, it might actually deopt many more times than it is invoked

[10:54] <nine> Anyway, as I said, it's the wrong end to start from anyway. You look at spesh logs to see how you can improve spesh. When freshly written, totally unoptimized code is running a bit slow on the 10 year old battle-tested VM, you should look at that new code, not the VM.

[11:30] *** JimmyZhuo joined
[11:34] <JimmyZhuo> From: 6guts blog, Closer examination revealed that the cloning of the backtrack stack was, however, overly defensive; eliminating that copying led to a huge memory and time improvement.

[11:36] <JimmyZhuo> this is a longstanding problem, It was about 200+ secs to compile the setting with parrot for me, with moarvm it's about 70 secs.

[11:38] <JimmyZhuo> not sure how much DFA helps 

[11:44] <JimmyZhuo> I think It's a big headache?

[12:39] *** JimmyZhuo left
[12:47] <timo> can you be more specific?

[13:09] *** JimmyZhuo joined
[13:09] <JimmyZhuo> timo: me?

[13:20] *** JimmyZhuo left
[13:33] <timo> yes

[13:34] <timo> this is about core setting compilation performance? or something related to deopt?

[14:10] *** dogbert17 joined
[14:11] <dogbert17> lizmat, do you know if anyone has run 'make stresstest' under RAKUAST?

[14:14] <[Coke]> I think that run was spec, not stress.

[14:15] <dogbert17> [Coke], I gave it a try and there were a couple of failures

[14:16] <[Coke]> Sure, can you put them in a gist?

[14:16] <[Coke]> (or a ticket on rakudo/rakudo)

[14:16] <[Coke]> I think spectest has 3 remaining failures.

[14:17] <dogbert17> Can do

[14:31] <dogbert17> the following three files might warrant a look: t/spec/6.c/MISC/bug-coverage-stress.t, t/spec/S02-types/version-stress.t, t/spec/integration/advent2012-day04.t

[16:26] *** dogbert17 left
[16:56] *** dogbert17 joined
[19:00] <dogbert17> I have posted morde detail wrt the failing stress test here: https://gist.github.com/dogbert17/ddad8ff59598bf400e00ef394549101c

[20:49] *** MasterDuke joined
[20:52] <MasterDuke> nine: yeah, i was hoping there was something to do in rakudo (specifically rakuast) to reduce the deopts

[20:52] <tellable6> hey MasterDuke, you have a message: https://gist.github.com/3381f5f695cbe84b69d936d0f3928fb2

[20:53] <MasterDuke> i've tried doing a --profile-compile of compiling CORE.c.setting on the bootstrap branch, but it just silently dies (though maybe it's memory related, i should try on my desktop)

[20:56] <MasterDuke> i've done one when compiling CORE.e.setting, but nothing stood out. nodify is called a *lot*, but i couldn't find out an effective way to cache the results or create singletons for the most common things looked up ('Node', 'Origin', 'Name', 'ApplyListInfix', 'CompUnit' are the top 5)

[20:59] *** MasterDuke left
[21:10] *** MasterDuke joined
[21:11] <MasterDuke> same thing on my desktop, it just silently dies and doesn't create a profile (and no notifications from the oom killer in dmesg)

[21:19] <MasterDuke> if anyone is curious, https://i.imgur.com/E6fHBNf.png is a screen shot of my CORE.e.setting profile-compile, sorted by exclusive time

[21:23] <MasterDuke> a couple days ago i tried adding `attach()` and `SET-NODE-ORIGIN()` variants without the `:$as-key-origin` parameter and its handling in the body, since that was only set *very* infrequently, but it didn't seem to make any difference

[21:26] <MasterDuke> i also tried adding a `Nodify()` that only took a single scalar argument since that was also most common, but again it didn't seem to make a difference

[21:28] *** guifa left
[21:39] *** mandrillone joined
[21:40] <mandrillone> Maybe a good optimization would be to keep the Rakuast nodes in a flat array and reference them by their index. That’s normally a big win for treelike structures

[21:40] <mandrillone> It improves cache locality and often reduces memory usage

[21:42] <mandrillone> I’d say surely reduces memory usage in a language with containers

[21:43] <mandrillone> one has always to be careful about the layout of data in each node and their size

[21:43] <MasterDuke> yeah. but probably not a trivial change

[21:44] <mandrillone> I can imagine that

[21:49] *** mandrillone left
[21:49] *** mandrillone joined
[21:53] *** MasterDuke left
[21:55] *** lizmat joined
[22:06] *** mandrillone left
[22:30] *** lizmat left
