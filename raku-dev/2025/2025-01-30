[00:19] *** librasteve_ left
[04:53] *** ab5tract left
[04:56] *** ab5tract joined
[10:48] *** nebuchadnezzar joined
[10:58] <Geth> ¦ roast: 2a85a8a7ec | (Elizabeth Mattijsen)++ | S03-metaops/reduce.t

[10:58] <Geth> ¦ roast: Fix [\orelse] test

[10:58] <Geth> ¦ roast: 

[10:58] <Geth> ¦ roast: The test incorrectly expects Any to be produced, rather than Nil.

[10:58] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2a85a8a7ec

[11:03] <Geth> ¦ rakudo/main: ba2431f445 | (Elizabeth Mattijsen)++ | src/core.c/metaops.rakumod

[11:03] <Geth> ¦ rakudo/main: Streamline list triangle metaop

[11:03] <Geth> ¦ rakudo/main: 

[11:03] <Geth> ¦ rakudo/main: Use a proper iterator instead of gather / take.  Makes it up to

[11:03] <Geth> ¦ rakudo/main: 45% faster, and fixes a bug that produced Any instead of Nil.

[11:03] <Geth> ¦ rakudo/main: 

[11:03] <Geth> ¦ rakudo/main: Part of research into #1705

[11:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ba2431f445

[11:15] *** sena_kun joined
[11:59] *** finanalyst left
[12:05] <Geth> ¦ rakudo/main: dbc7bfc84e | (Elizabeth Mattijsen)++ | src/core.c/metaops.rakumod

[12:05] <Geth> ¦ rakudo/main: Streamline list infix reduction

[12:05] <Geth> ¦ rakudo/main: 

[12:05] <Geth> ¦ rakudo/main: Create an IterationBuffer with decontainerized values, then slip

[12:05] <Geth> ¦ rakudo/main: that in the argument list.  Makes [Z+] about 10% faster.  Part of

[12:05] <Geth> ¦ rakudo/main: work on #1705

[12:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dbc7bfc84e

[12:06] *** [Tux] left
[12:09] *** [Tux] joined
[12:20] <ab5tract> Hmm… is there any hope for improving gather/take performance?

[12:21] <ab5tract> (Question inspired by the massive performance improvement in lizmat++’s commit)

[12:21] <lizmat> if we can find out in RakuAST that gather / take can be reduced to a push to an IterationBuffer, then these opts would be automatic

[12:22] <lizmat> but throwing an exception for each "take", and returning from it is just expensive

[12:22] <ab5tract> That sounds promising

[12:23] <lizmat> although I believe jnthn already did a lot to optimize that

[12:33] *** nebuchadnezzar left
[13:14] <ab5tract> Is that the “normal” way to implement coroutines?

[13:18] <lizmat> afaik gather / take are basically Raku's way of hiding coroutine sheninagans

[13:20] <timo> once we know that the gather will be consumed eagerly, we know we don't have to do coroutiney stuff

[13:20] <timo> but if the list is actually being iterated over in any meaningful way, where the code in the "gather" has some side-effects between the individual "take"s, we can't just throw that away

[13:20] <ab5tract> Yeah, but I don’t know many other languages with coroutines that are marked “do not use, too slow”

[13:21] <lizmat> they're not marked: do not use, too slow

[13:21] <lizmat> it's just that in these cases that I'm working on, they were not necessary

[13:21] <timo> at least we don't have these fun very-deep call trees with lots of "reify" in them any more :)

[13:21] <ab5tract> Culturally their use has been discouraged

[13:22] <timo> well, for internals code it's a little bit of a different story than for user code

[13:22] <lizmat> well, I'd say that's true: use them only if you really need them, or if you don't care that much about efficiency

[13:22] <timo> we usually want to give the user the fastest implementation for things that are going to be used "commonly"

[13:23] <ab5tract> Sure, I’m not intending to conflate the two. I just mean that IME gather/take is often written off for user space as well

[13:23] <timo> i use gather/take every now and then, it's very handy if you're going through nested stuff for example

[13:24] <ab5tract> So my line of questioning is just to ask: do they need to be implemented this way?

[13:24] <ab5tract> But probably the answer is yes

[13:24] <timo> doesn't have to be coroutines, could be threads instead. though of course that's worse, not better

[13:24] <lizmat> I don't think generally people realize that gather / take is lazy

[13:26] <lizmat> I often see things like:   my @a = gather {   ... take, take, take }

[13:27] <lizmat> which sorta defeats the purpose, I'd say

[13:28] <lizmat> apart from maybe readabiility

[13:38] <Geth> ¦ rakudo/main: 6c5afe65d0 | (Elizabeth Mattijsen)++ | src/core.c/metaops.rakumod

[13:38] <Geth> ¦ rakudo/main: Streamline triangle list infix reduction

[13:38] <Geth> ¦ rakudo/main: 

[13:38] <Geth> ¦ rakudo/main: Use a proper iterator, makes it about 2.5x as fast.  Part of #1705

[13:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6c5afe65d0

[13:52] <ab5tract> Unfortunately a fair number of the examples in the docs seem to be of that variety

[13:52] <ab5tract> Anyway, just dropping this here for future reference: https://zelang-dev.github.io/c-coroutine/

[14:06] *** sena_kun left
[14:07] *** sena_kun joined
[14:36] <lizmat> m: say [\<]   # this feels... wrong ?

[14:36] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «(True)␤»

[14:37] <lizmat> I'd expect that to be the ()

[14:40] <lizmat> m: say [\<] 42

[14:40] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «(True)␤»

[14:43] <ab5tract> m: dd [**]

[14:43] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «1␤»

[14:43] <lizmat> m: dd [\**]

[14:43] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «(1,).Seq␤»

[14:43] <lizmat> hmmm

[14:43] <lizmat> m: dd [\**] 42

[14:43] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «(42,).Seq␤»

[14:44] <ab5tract> m: dd [%%]

[14:44] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «Failure.new(exception => X::NoZeroArgMeaning.new(name => "infix:<\%\%>"))␤»

[14:44] <lizmat> m: dd [\%%]

[14:44] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «().Seq␤»

[14:44] <lizmat> m: dd [\+]

[14:44] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «().Seq␤»

[14:45] <ab5tract> Having that exception in (almost) all circumstances would be mostly ok for me.

[14:46] <lizmat> but many ops *do* have a meaning for the non-args case

[14:46] <lizmat> namely the identity of the op

[14:47] <lizmat>  / and % and %% can't have that, as they have no identity

[14:48] <ab5tract> But that’s by convention, right?

[14:49] <ab5tract> [**] could easily return a failure, and [%%] could have been made to return a NaN

[14:49] <lizmat> well... I guess a very logical convention ?

[14:50] <lizmat> that behaviour sorta falls out of meta ops

[14:50] <lizmat> well, reduction meta ops such as [op] and [\op]

[14:50] <ab5tract> I guess the primary distinction is whether the op chains or not.?

[14:51] <ab5tract> Ah right, they are there for the metas. Got it

[14:51] <lizmat> well, the precedence determines how it is handled: left, right, chain, list

[14:52] <lizmat> the logical ops have chain precedence

[14:52] <lizmat> m: say 3 < 4 < 5 < 6

[14:52] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «True␤»

[14:52] <lizmat> m: say 3 < 4 < 5 < 5

[14:52] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «False␤»

[14:53] <lizmat> that;s just short for: 3 < 4 && 4 < 5 &&  5 < 5

[14:53] <ab5tract> I’m not un familiar with:)

[14:53] <ab5tract> I’m saying that an identity makes sense for chain ops

[14:54] <ab5tract> I’m not as convinced about other precedence’s

[14:54] <lizmat> m: say infix:<==>()

[14:54] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «True␤»

[14:54] <ab5tract> I’m pretty sure that chains?

[14:55] <lizmat> yeah, that does

[14:55] <lizmat> m: dd &infix:<+>.prec

[14:55] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «{:assoc("left"), :dba("additive"), :prec("t=")}␤»

[14:56] <lizmat> actually, it's associativity  :-)

[14:57] <lizmat> m: dd &infix:<+>.associative    # newer interface

[14:57] <camelia> rakudo-moar 6c5afe65d: OUTPUT: «"left"␤»

[15:40] <[Tux]> Rakudo v2025.01-36-g6c5afe65d (v6.d) on MoarVM 2025.01-9-gfc2d31f32

[15:40] <[Tux]> csv-test-xs-20      0.137 -  0.138

[15:40] <[Tux]> csv-ip5xs           0.262 -  0.265

[15:40] <[Tux]> test-t --race       0.269 -  0.273

[15:40] <[Tux]> test-t              0.413 -  0.416

[15:40] <[Tux]> csv-ip5xs-20        1.113 -  1.142

[15:40] <[Tux]> csv-parser          1.078 -  1.116

[15:40] <[Tux]> test-t-20 --race    1.291 -  1.303

[15:40] <[Tux]> test                1.856 -  1.882

[15:40] <[Tux]> test-t-20           5.034 -  5.127

[15:41] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[15:51] <[Tux]> The CSV speed test pointed me to an update for julia and that the CSV module was not available anymore

[15:51] <[Tux]> so I updated julia and re-installed the CSV parser

[15:52] <[Tux]> 2025-01-11 13:44:54 csv-julia 3.336

[15:52] <[Tux]> 2025-01-11 13:45:47 csv-julia 3.313

[15:52] <[Tux]> 2025-01-30 16:48:46 csv-julia 0.734

[15:52] <[Tux]> 2025-01-30 16:49:25 csv-julia 0.718

[15:52] <[Tux]> Wow!

[16:09] <jdv> is that gooder?

[16:10] <[Coke]> (could be threads) https://www.youtube.com/watch?v=UA_E57ePSR4

[16:10] <[Coke]> ^ timo

[16:10] <timo> i haven't seen the show, but i've seen many memes from it and it is high on my to-watch list

[16:11] <[Tux]> jdv, it is 4½ times faster, so yes. (still slow compared to the other languages, but stll)

[16:12] <[Coke]> timo: it was amazing: well written, funny, clever.

[16:12] <timo> "yes yes it's the good tv show, we've all seen it" :P

[16:13] * [Tux] did not

[16:15] <[Coke]> AHAHAAH

[16:16] <[Coke]> timo: I was just searching for clips and just watched "chidi sees the time knife"

[16:16] <[Coke]> excellent! convergence! a sign!

[16:16] <timo> "it's a The Good Place insult. it's devastating. you're devastated right now."

[17:41] *** finanalyst joined
[18:17] *** finanalyst left
[21:12] *** finanalyst joined
[22:45] *** sena_kun left
[23:11] <[Coke]> what's the bot channela gain?

[23:22] <[Coke]> ... we lost all the bots?

[23:22] <[Coke]> I'll try the commit ping to restart them.

[23:23] <Geth> ¦ whateverable/main: a02729bd40 | (Will Coleda)++ | .ping

[23:23] <Geth> ¦ whateverable/main: Force a restart

[23:23] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/a02729bd40

[23:26] <[Coke]> releasable6: uptime

[23:26] <releasable6> [Coke], and I oop! Backtrace: https://gist.github.com/4d89fdc470524756d8294564c0aae88b

[23:27] <[Coke]> releasable6: status

[23:27] <releasable6> [Coke], Next release will happen when it's ready. There are no known blockers. 49 out of 53 commits logged

[23:27] <releasable6> [Coke], Details: https://gist.github.com/0e19c2295bf805a212a0ac85e115733c

[23:27] *** bloatable6 left
[23:27] *** benchable6 left
[23:27] *** shareable6 left
[23:27] *** greppable6 left
[23:27] *** notable6 left
[23:27] *** sourceable6 left
[23:27] *** evalable6 left
[23:27] *** releasable6 left
[23:27] *** unicodable6 left
[23:27] *** linkable6 left
[23:27] *** coverable6 left
[23:27] *** committable6 left
[23:27] *** nativecallable6 left
[23:27] *** quotable6 left
[23:27] *** bisectable6 left
[23:27] *** tellable6 left
[23:29] *** committable6 joined
[23:30] *** sourceable6 joined
[23:30] *** linkable6 joined
[23:30] *** nativecallable6 joined
[23:30] *** notable6 joined
[23:30] *** greppable6 joined
[23:30] *** coverable6 joined
[23:30] *** quotable6 joined
[23:30] *** releasable6 joined
[23:30] *** guifa joined
[23:31] *** evalable6 joined
[23:31] *** bloatable6 joined
[23:31] *** bisectable6 joined
[23:31] *** shareable6 joined
[23:31] *** benchable6 joined
[23:32] *** unicodable6 joined
[23:32] *** tellable6 joined
[23:36] <[Coke]> .seen undercover

[23:36] <tellable6> [Coke], I saw undercover 2017-07-19T19:02:52Z in #perl6-dev: <Undercover> Zoffix, Use cover: trigger with args to give to sourcery sub. e.g. cover: Int, 'base'. See http://modules.perl6.org/dist/CoreHackers::Sourcery

