[00:17] *** kjp joined
[00:21] *** kjp left
[00:21] *** kjp joined
[07:46] *** sourceable6 left
[07:46] *** sourceable6 joined
[09:38] <lizmat> notable6: weekly

[09:38] <lizmat> meh

[09:54] *** notable6 left
[09:54] *** notable6 joined
[09:54] <lizmat> notable6: weekly

[10:05] <lizmat> meh

[10:44] *** rakkable joined
[10:53] *** coverable6 left
[10:53] *** coverable6 joined
[11:18] <lizmat> nine: question: in RakuAST: if we create an AST of the Raku source (e.g. from a module file), should an .EVAL on that AST always work and produce the same result as compiling the source?

[11:21] <lizmat> notable6: weekly

[11:23] <nine> So it would be source -parse-> AST -EVAL-> result?

[11:25] <lizmat> basically: raku lib/Foo.rakumod     and   raku -e '"lib/Foo.rakumod".IO.slurp.AST.EVAL'

[11:26] <lizmat> or perhaps better:

[11:26] <lizmat> basically: raku lib/Foo.rakumod     and   raku -e '"lib/Foo.rakumod".IO.slurp.AST.raku.EVAL.EVAL'

[11:26] <lizmat> to more simulate building an AST synthetically

[11:27] <nine> Well presumably .AST just runs the normal compiler with --target=ast while EVAL takes that ast and runs the compiler with --from=ast, so really it's just an interruption of the normal compilation process

[11:28] <lizmat> I was more thinking along CHECK { say $*CU; exit } as the --target

[11:28] <lizmat> but yeah

[11:31] <lizmat> it feels to me we should be able to guarantee that, otherwise macro handling will become very error prone indeed ?

[11:36] <nine> You mean serializing the AST as Raku source code?

[11:37] <lizmat> the AST.raku creates a string representation of the AST, EVALling that would create the RakuAST tree synthetically, and the subsequent EVAL would turn it into bytecode

[11:37] <lizmat> well, something executable

[11:38] <nine> How is that related to macros?

[11:39] <lizmat> it's related in the sense that a macro could create a RakuAST tree synthetically, which would then get inserted into the outer RakuAST

[11:39] <nine> That usually doesn't involve serializing any AST

[11:39] <lizmat> however, as we've seen yesterday, a synthetically created role would probably not work   :-(

[11:40] <nine> not right now

[11:40] <lizmat> so my question would be: do we agree it should ?

[11:40] <lizmat> because I was not clear on that yesterday

[11:40] <lizmat> *your position on that

[11:40] <nine> I think it would be useful to create role ASTs synthetically.

[11:41] <nine> No serialization needed for that :)

[11:41] <nine> useful to be a able to create

[11:41] <lizmat> but not to serialize, is what you're saying?

[11:42] <lizmat> fwiw, the L10N logic depends on that atm

[11:42] <nine> No, I'm saying that I have no idea what serialization has to do with it. It's completely orthogonal

[11:43] <lizmat> so you're saying that the current approach to synthetically create a role in the L10N logic (to create a L10N::NL module e.g.) should work

[11:45] <nine> I have not reviewed that logic

[11:45] <lizmat> well, that's why I asked the question more generally, so you wouldn't have to  :-)

[12:39] <lizmat> notable6: weekly

[12:53] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/06/16/2025-23-24-vibe-codified/

[13:24] *** [Coke] joined
[13:26] * [Coke] 's mac mini apparently just needed to be rebooted a few times

[13:26] <[Coke]> I have it plugged into the UPS, AND we have a generator. It never should have been impacted by the (&#@$ power outage.)

[13:29] <lizmat> [Coke]: welcome back!

[14:17] <Geth> ¦ rakudo/main: 1d69f5a70b | (Elizabeth Mattijsen)++ | lib/RakuAST/L10N.rakumod

[14:17] <Geth> ¦ rakudo/main: RakuAST: fix bitrotted L10N support

[14:17] <Geth> ¦ rakudo/main: 

[14:17] <Geth> ¦ rakudo/main: Roles need to be created with RoleBody objects, at least atm

[14:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1d69f5a70b

[14:26] *** notable6 left
[14:29] *** releasable6 left
[14:29] *** releasable6 joined
[14:36] <[Coke]> I am late on this because of my power outage, but, following up on a joke from a week ago saturday... "hey, nine: How are you feeling?"

[14:36] <[Coke]> (setup was nine saying "ask me in a week")

[14:41] <timo> well, i'm coughing. i think i'm carrying forward nine's feeling in spirit

[15:03] <nine> Unfortunately that sounds very much like it

[15:03] <nine> Pro tip: keep it at one infection. That will at least go away in a reasonable time frame

[15:04] <nine> Though I'm happy to report that yesterday I switched from minute long coughing fits to "just" coughing. A welcome improvement.

[15:10] <nine> lizmat: I guess a check in RakuAST::Role would be nice to ensure that $.body is a RakuAST::RoleBody. That would defuse this trap.

[15:31] <[Coke]> Thankfully I don't seem to have that, only a very mild case of pollen allergies.

[15:31] <[Coke]> (and I was around a few hundred unmasked people saturday)

[17:25] <timo> > next. core summit? out of the door, line on the left. one infection each. next. core summit?

[17:29] <timo> m: my @foo[2;2] = [[1,2],[3,4]]; my @bar = @foo >>+>> 0; say @bar.raku

[17:29] <camelia> rakudo-moar 1d69f5a70: OUTPUT: «Ignoring [Any] as shape specification, did you mean 'my Any @foo' ?␤[1, 2, 3, 4]␤  in block <unit> at <tmp> line 1␤»

[17:37] *** linkable6 left
[17:37] *** linkable6 joined
[17:59] *** shareable6 left
[17:59] *** shareable6 joined
[19:11] <ab5tract> That’s curious…

[19:13] <Geth> ¦ rakudo/main: c59b4eeb3a | (Elizabeth Mattijsen)++ | lib/RakuAST/L10N.rakumod

[19:13] <Geth> ¦ rakudo/main: RakuAST: update L10N generation logic

[19:13] <Geth> ¦ rakudo/main: 

[19:13] <Geth> ¦ rakudo/main: - create constant mappings, instead of lookups that need to be

[19:13] <Geth> ¦ rakudo/main:   created at runtime

[19:13] <Geth> ¦ rakudo/main: - add support for translation of "temp" core element

[19:13] <Geth> ¦ rakudo/main: - add support for these enums (treated as "term" in the logic):

[19:14] <Geth> ¦ rakudo/main:   True False Less Same More Broken Planned Kept

[19:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c59b4eeb3a

[19:15] <lizmat> nine: re "ensure that $.body is a RakuAST::RoleBody"  noted

[19:26] *** coverable6 left
[19:26] *** coverable6 joined
[19:26] <Geth> ¦ L10N/main: 5068e9aa2a | (Elizabeth Mattijsen)++ | 14 files

[19:26] <Geth> ¦ L10N/main: CI test prior to release

[19:26] <Geth> ¦ L10N/main: review: https://github.com/Raku/L10N/commit/5068e9aa2a

[19:37] <Geth> ¦ L10N/main: bd60d535c2 | (Elizabeth Mattijsen)++ | 5 files

[19:37] <Geth> ¦ L10N/main: Remove non-sensical CI stuff

[19:37] <Geth> ¦ L10N/main: 

[19:37] <Geth> ¦ L10N/main: We need proper git submodules for that

[19:37] <Geth> ¦ L10N/main: review: https://github.com/Raku/L10N/commit/bd60d535c2

[19:49] <lizmat> hmmm... it feels like the current setup of raku/L10N is less easy in practice

[19:50] <lizmat> either it should have submodules (meh)

[19:50] <lizmat> or just a separate repo for each language, but then access management becomes...  unwieldy ?

[19:52] <[Coke]> put the access rights in a group?

[19:52] <lizmat> it's just that the global access management of the raku org is very lenient

[19:52] <lizmat> and that would take precedence, no ?

[19:56] <[Coke]> Looks like it's already locked down to l10n maintainers?

[19:56] <lizmat> hmm... I guess not

[19:56] <[Coke]> with no access from the org?

[19:57] <lizmat> could you check whether you can make changes to the raku/L10N repo ?

[20:05] <Geth> ¦ L10N/coke/test: 2bc8ef0341 | (Will Coleda)++ | README.md

[20:05] <Geth> ¦ L10N/coke/test: WIP

[20:05] <Geth> ¦ L10N/coke/test: review: https://github.com/Raku/L10N/commit/2bc8ef0341

[20:05] <[Coke]> huh

[20:05] <lizmat> that's in a branch ?

[20:06] <[Coke]> based on what https://github.com/Raku/L10N/settings/access is showing me, that seems a bug

[20:06] <[Coke]> Yes.

[20:06] <lizmat> ok, I'm less worried about that

[20:06] <[Coke]> no branch protections in place anyway

[20:06] <[Coke]> want me to try main?

[20:06] <lizmat> yes, please

[20:07] <Geth> ¦ L10N/main: 95b266f3b4 | (Will Coleda)++ | README.md

[20:07] <Geth> ¦ L10N/main: whitespace

[20:07] <Geth> ¦ L10N/main: review: https://github.com/Raku/L10N/commit/95b266f3b4

[20:07] <lizmat> yup, that's what I mean  :)

[20:08] <lizmat> ok, will sleep on it...

[20:08] <[Coke]> ah.

[20:08] <[Coke]> Probably need to set base permissions?

[20:09] <[Coke]> ah, no base is at the org level, not the repo level.

[20:10] <lizmat> perhaps Projects base permissions ?

[20:11] <lizmat> meh... that's why I'm thinking a new org  

[20:11] <lizmat> anyways, will sleep on it...  thanks for trying!

[20:11] <lizmat> &

[20:12] <[Coke]> maybe add raku/everyone with "read" only?

[22:16] *** tellable6 left
[22:36] *** benchable6 left
[22:36] *** benchable6 joined
[23:15] *** shareable6 left
[23:15] *** greppable6 left
[23:15] *** linkable6 left
[23:15] *** coverable6 left
[23:15] *** unicodable6 left
[23:15] *** committable6 left
[23:15] *** evalable6 left
[23:15] *** bisectable6 left
[23:15] *** bloatable6 left
[23:15] *** nativecallable6 left
[23:15] *** quotable6 left
[23:15] *** sourceable6 left
[23:15] *** benchable6 left
[23:15] *** releasable6 left
[23:18] *** evalable6 joined
[23:18] *** unicodable6 joined
[23:18] *** coverable6 joined
[23:18] *** greppable6 joined
[23:18] *** sourceable6 joined
[23:18] *** shareable6 joined
[23:19] *** nativecallable6 joined
[23:19] *** linkable6 joined
[23:19] *** notable6 joined
[23:19] *** bisectable6 joined
[23:20] *** bloatable6 joined
[23:20] *** benchable6 joined
[23:20] *** releasable6 joined
[23:20] *** quotable6 joined
[23:20] *** committable6 joined
[23:21] *** tellable6 joined
