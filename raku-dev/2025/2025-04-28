[04:01] *** Voldenet_ joined
[04:02] *** Voldenet left
[04:02] *** Voldenet_ is now known as Voldenet

[07:14] <Geth> ¦ rakudo/presize-slurps: 8e37f3f691 | (John Longwalker)++ | src/core.c/IO/Path.rakumod

[07:14] <Geth> ¦ rakudo/presize-slurps: IO::Handle.slurp: Read entire file contents at once

[07:14] <Geth> ¦ rakudo/presize-slurps: 

[07:14] <Geth> ¦ rakudo/presize-slurps: We can easily pre-size the read volume in the call to nqp::readfh

[07:14] <Geth> ¦ rakudo/presize-slurps: for the cases where it makes sense (ie., every path that isn't

[07:14] <Geth> ¦ rakudo/presize-slurps: "-".IO).

[07:14] <Geth> ¦ rakudo/presize-slurps: 

[07:14] <Geth> ¦ rakudo/presize-slurps: We still preserve the older behavior in case the byte length is

[07:14] <Geth> ¦ rakudo/presize-slurps: super low or if there is some other interruption to getting the

[07:14] <Geth> ¦ rakudo/presize-slurps: self.s value at runtime.

[07:14] <Geth> ¦ rakudo/presize-slurps: review: https://github.com/rakudo/rakudo/commit/8e37f3f691

[07:15] <Geth> ¦ rakudo: ab5tract++ created pull request #5867: IO::Handle.slurp: Read entire file contents at once

[07:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5867

[07:23] *** melezhik joined
[07:23] <Geth> ¦ rakudo/presize-slurps: d5c3dc9d23 | (John Longwalker)++ | src/core.c/IO/Path.rakumod

[07:23] <Geth> ¦ rakudo/presize-slurps: Protect against self.s failures

[07:23] <Geth> ¦ rakudo/presize-slurps: review: https://github.com/rakudo/rakudo/commit/d5c3dc9d23

[07:28] *** melezhik left
[07:28] *** melezhik joined
[07:33] *** melezhik left
[10:06] *** Xliff joined
[10:06] <Xliff> \p

[10:06] <tellable6> 2025-04-27T08:55:46Z #raku-dev <gfldex> Xliff https://www.spansh.co.uk/dumps

[10:06] <Xliff> \o even

[11:40] <lizmat> notable6: weekly

[11:40] <notable6> lizmat, 1 note: 2025-04-27T03:02:50Z <SmokeMachine>: https://dev.to/fco/testing-raku-applications-with-cro-red-and-redfactory-g3e

[11:40] <lizmat> notable6: weekly reset

[11:40] <notable6> lizmat, Moved existing notes to “weekly_2025-04-28T11:40:50Z”

[11:41] <SmokeMachine> \o/

[13:07] *** melezhik joined
[13:14] *** melezhik left
[13:14] *** JimmyZhuo joined
[13:21] *** melezhik joined
[13:37] *** melezhik left
[13:53] *** JimmyZhuo left
[14:18] <Geth> ¦ whateverable/main: 4ae5b66d6f | Coke++ | .ping

[14:18] <Geth> ¦ whateverable/main: Force a restart

[14:18] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/4ae5b66d6f

[14:19] <[Coke]> releasable6__: next

[14:19] <releasable6__> [Coke], Next release in ≈19 days and ≈4 hours. There are no known blockers. 7 out of 7 commits logged

[14:20] *** linkable6 left
[14:20] *** nativecallable6_ left
[14:20] *** quotable6 left
[14:20] *** releasable6__ left
[14:20] *** unicodable6 left
[14:20] *** shareable6__ left
[14:20] *** evalable6 left
[14:20] *** committable6 left
[14:20] *** tellable6 left
[14:21] *** benchable6 left
[14:21] *** notable6 left
[14:21] *** sourceable6 left
[14:21] *** bloatable6 left
[14:21] *** bisectable6 left
[14:21] *** greppable6 left
[14:21] *** coverable6 left
[14:22] *** linkable6 joined
[14:23] *** greppable6 joined
[14:23] *** nativecallable6 joined
[14:24] *** quotable6 joined
[14:24] *** notable6 joined
[14:24] *** benchable6 joined
[14:24] *** unicodable6 joined
[14:24] *** bloatable6 joined
[14:25] *** releasable6 joined
[14:25] *** coverable6 joined
[14:25] *** committable6 joined
[14:25] *** sourceable6 joined
[14:25] *** bisectable6 joined
[14:25] *** shareable6 joined
[14:25] *** tellable6 joined
[14:26] *** evalable6 joined
[14:32] *** nine left
[14:32] *** nine joined
[15:02] <[Coke]> Do we have a threshold for "shouldn't bother with a release"?

[15:03] <[Coke]> the bots have the right names again

[18:20] *** finanalyst joined
[21:30] *** finanalyst left
[23:32] *** MasterDuke joined
[23:34] <MasterDuke> i thought `@foo.min(&callable)` was supposed to do a schwartzian transform and only call the callable @foo.elems times?

[23:36] <MasterDuke> m: sub s4(Str:D() $s) { say "checking $s"; $s.chars }; say (^5).Array.min(&s4)

[23:36] <camelia> rakudo-moar b527cefcb: OUTPUT: «checking 1␤checking 0␤checking 2␤checking 0␤checking 3␤checking 0␤checking 4␤checking 0␤0␤»

[23:39] <MasterDuke> seems it's always 2*n - 2

[23:48] *** MasterDuke left
