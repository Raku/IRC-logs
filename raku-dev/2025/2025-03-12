[03:49] *** JimmyZhuo joined
[04:03] <JimmyZhuo> ===SORRY!===

[04:03] <JimmyZhuo> Redeclaration of symbol '%_'.

[04:03] <JimmyZhuo> at lib/Test.rakumod:69

[04:03] <JimmyZhuo> Redeclaration of symbol '$?CLASS'.

[04:03] <JimmyZhuo> at lib/Test.rakumod:68

[04:03] <JimmyZhuo> Redeclaration of symbol '::?CLASS'.

[04:03] <JimmyZhuo> at lib/Test.rakumod:68

[04:03] <JimmyZhuo> %_

[04:03] <JimmyZhuo> RakuAST::VarDeclaration::Simple<4923585009792>

[04:03] <JimmyZhuo> RakuAST::Method<4923582445440>

[04:03] <JimmyZhuo> ----------------------------------

[04:03] <JimmyZhuo> $?CLASS

[04:03] <JimmyZhuo> RakuAST::Type::Capture<4923496484976>

[04:03] <JimmyZhuo> RakuAST::RoleBody<4923556529664>

[05:00] *** JimmyZhuo left
[05:06] *** JimmyZhuo joined
[05:16] <JimmyZhuo> nine: these three are both in ast-lexical-declarations and generated-lexical-declarations

[05:25] *** JimmyZhuo left
[07:41] *** finanalyst joined
[08:23] <Geth> ¦ rakudo/main: 7addb39da2 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[08:23] <Geth> ¦ rakudo/main: RakuAST: use low level op for binding our-scoped constants when loading

[08:23] <Geth> ¦ rakudo/main: 

[08:23] <Geth> ¦ rakudo/main: Scope's BIND-KEY won't be available until we've loaded the setting.

[08:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7addb39da2

[08:23] <Geth> ¦ rakudo/main: 7d4800940f | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[08:23] <Geth> ¦ rakudo/main: RakuAST: fix call to VMNull when calling before entering frame where sub's declared

[08:23] <Geth> ¦ rakudo/main: 

[08:23] <Geth> ¦ rakudo/main: Fixes: class Foo { ... }; Foo.new; class Foo { sub foo() { }; method new() { foo } }

[08:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7d4800940f

[09:25] *** sena_kun joined
[10:25] *** sena_kun left
[10:31] <Geth> ¦ rakudo/main: 0a4260b3a9 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[10:31] <Geth> ¦ rakudo/main: RakuAST: fix accidental sinking of bound values

[10:31] <Geth> ¦ rakudo/main: 

[10:31] <Geth> ¦ rakudo/main: As with assignment only the target can be sunk. The operands are very

[10:31] <Geth> ¦ rakudo/main: much used.

[10:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0a4260b3a9

[10:34] <lizmat> nine: the previous commit seems to have lost 6 spectest files ?

[10:35] <lizmat> t/spec/S06-operator-overloading/imported-subs.t

[10:35] <nine> Huh...my latest spectest run is still at 1275

[10:35] <lizmat> ok I'll pull for the last commit and run again

[10:36] <lizmat> meh, wrong branch

[10:37] *** JimmyZhuo joined
[10:38] * nine slowly exhales

[10:38] <lizmat> sorry...  :-(

[10:39] <JimmyZhuo> nine: do you have a idea how to fix it? or which place is right?

[10:39] <JimmyZhuo> https://colabti.org/ircloggy/raku-dev/2025-03-12#l18

[10:42] <JimmyZhuo> I found the '$_ =:= self' part doesn't work at all,  will change it to nqp::eqaddr($_, self)

[10:42] <nine> =:= should be exactly the same as eqaddr

[10:43] <JimmyZhuo> I tested it always false, but eqaddr is true

[10:45] <nine> Is a negation involved? I certainly have made the mistake of writing !$_ =:= self instead of !($_ =:= self)

[10:48] <JimmyZhuo> I give it a try again. but the real problem is '%_', '$?CLASS' and '::?CLASS' are both in ast-lexical-declarations and generated-lexical-declarations'

[10:51] <nine> In which test case and with what local changes?

[10:53] <JimmyZhuo> change  $_ =:= self to nqp::eqaddr($_, self), and the lib/Test.rakumod breaks

[10:55] <nine> which line?

[10:55] <nine> I can't see your screen from here :0

[10:55] <JimmyZhuo> $ RAKUDO_RAKUAST=1 ./rakudo-m lib/Test.rakumod > debug.txt$ RAKUDO_RAKUAST=1 ./rakudo-m lib/Test.rakumod > debug.txt

[10:55] <JimmyZhuo> ===SORRY!===

[10:55] <JimmyZhuo> Redeclaration of symbol '%_'.

[10:55] <JimmyZhuo> at lib/Test.rakumod:69

[10:55] <JimmyZhuo> Redeclaration of symbol '$?CLASS'.

[10:55] <JimmyZhuo> at lib/Test.rakumod:68

[10:55] <JimmyZhuo> Redeclaration of symbol '::?CLASS'.

[10:55] <JimmyZhuo> at lib/Test.rakumod:68

[10:56] <JimmyZhuo> for self.IMPL-UNWRAP-LIST(self.ast-lexical-declarations) {

[10:56] <JimmyZhuo>    my $lexical-name := $_.lexical-name;

[10:56] <JimmyZhuo>    if $lexical-name && !nqp::eqaddr($_, self) {

[10:57] <JimmyZhuo> changed !$_ =:= self to !nqp::eqaddr($_, self)

[10:58] <nine> Oh, yes, there's definitely a precedence error in "if $lexical-name && ! $_ =:= self"

[10:58] <nine> Should be if $lexical-name && ! ($_ =:= self)

[10:59] *** finanalyst left
[10:59] <nine> You have uncovered a bug there. Now the question is how we can recognize that those symbols are not in fact duplicates.

[11:00] <JimmyZhuo> yeah

[11:02] <nine> Maybe the object you find in %lookup is exactly the same as $_? In that case, since it's the same AST node, it cannot really be a duplicate

[11:06] <JimmyZhuo> I saw some code somewhere about duplicates

[11:07] <JimmyZhuo> I forget the place

[11:08] <nine> in the generated-lexical-declarations loop we already write the generated declarations into %lookup. In the ast loop when checking for whether a key exists in the lookup you could also check whether it's the same object after all

[11:10] <JimmyZhuo> oh, see it 'nqp::push(@not-if-duplicate, $decl);' in ast-lexical-declarations()

[11:29] <Geth> ¦ rakudo: zhuomingliang++ created pull request #5812: add redeclaration exception of placeholder parameter

[11:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5812

[11:31] <JimmyZhuo> nine++ for help

[11:47] <nine> JimmyZhuo: why did you switch the two loops?

[11:48] <nine> I guess it's to detect the error on the placeholder instead of the actual original declaration?

[11:48] <Geth> ¦ rakudo/main: cb0a49313a | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[11:48] <Geth> ¦ rakudo/main: RakuAST: fix bogus warning about "unused" expressions in short circuiting operators

[11:48] <Geth> ¦ rakudo/main: 

[11:48] <Geth> ¦ rakudo/main: Fixes: myy $a = "hi"; $_ eq "hi" and $_ = "$_ you" with $a

[11:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cb0a49313a

[11:52] <JimmyZhuo> nine: I have to push 'my $foo' to %lookup first, so I can check the $^foo later

[11:53] <JimmyZhuo> so the error will be same as the non-RAKUAST frontend

[11:55] <nine> JimmyZhuo: unfortunately your change regresses t/spec/6.c/S04-declarations/my-6c.rakudo.moar t/spec/S02-types/hash.t  t/spec/S04-declarations/multiple.t t/spec/S04-declarations/my-6e.rakudo.moar t/spec/S05-metasyntax/interpolating-closure.rakudo.moar t/spec/S06-advanced/stub.rakudo.moar t/spec/S06-traits/is-copy.t

[11:58] <nine> While it's true that hash.t does redeclare the %h variable, that's surprisingly legal in Raku:

[11:58] <nine> m: my %h; my %h; say "still here"

[11:58] <camelia> rakudo-moar 0a4260b3a: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '%h'.␤    at <tmp>:1␤    ------> my %h; my %h<HERE>; say "still here"␤still here␤»

[11:58] <nine> Not that this is just a warning

[12:10] <lizmat> JimmyZhuo: OOC, is there a reason you use https://colabti.org/ircloggy/raku-dev/2025-03-12#l18 instead of https://irclogs.raku.org/raku-dev/2025-03-12.html#05:16 ?

[12:12] <JimmyZhuo> lizmat: the later is very slow here, sometimes I can't open it

[12:12] <lizmat> ok, understood  :-)

[12:13] <lizmat> there's too much not cached at the moment ;-(

[12:15] <JimmyZhuo> nine: If I switch back the two loops, I don't know how to check the placeholder

[12:16] <nine> JimmyZhuo: I'm fine with switching the loops. Was just wondering if that was required or just a leftover from debugging.

[12:17] <nine> JimmyZhuo: but those regressions need to be taken care of

[12:17] <JimmyZhuo> yeah

[12:23] <Geth> ¦ rakudo/main: cb52491816 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[12:23] <Geth> ¦ rakudo/main: RakuAST: fix bogus warning about "unused" values used in atomic assignment

[12:23] <Geth> ¦ rakudo/main: 

[12:23] <Geth> ¦ rakudo/main: Fixes: my atomicint $s; $s ⚛= 0

[12:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cb52491816

[12:29] <JimmyZhuo> {

[12:29] <JimmyZhuo>     my $x = 2;

[12:29] <JimmyZhuo>     my $y := $x;

[12:29] <JimmyZhuo>     my $x = 3;

[12:29] <JimmyZhuo>     is $y, 3, 'Two lexicals with the name in same scope are the same variable';

[12:29] <JimmyZhuo> }

[12:30] <JimmyZhuo> so it is about !($_ =:= self) 

[12:30] <nine> No, because self is the LexicalScope there

[12:31] <nine> First step is to figure out the rules for when to warn and when to fail

[12:31] <nine> That's really the hardest part of the whole RakuAST thing: discovering the undocumented rules. It's nice that they are tested automatically via those spectests, but spectests are not really readable documentation that explains anything.

[12:33] <JimmyZhuo> m: {my $x = 2; my $y := $x; my $x = 3; say($y);}

[12:33] <camelia> rakudo-moar cb5249181: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$x'.␤    at <tmp>:1␤    ------> {my $x = 2; my $y := $x; my $x<HERE> = 3; say($y);}␤3␤»

[12:33] <JimmyZhuo> how the old frontend pass the test and throw exception with -e 

[12:34] <nine> "Potential difficulties" is just a warning.

[12:34] <nine> So add-worry instead of add-sorry

[12:46] <JimmyZhuo> $ RAKUDO_RAKUAST=1 ./rakudo-m -e '    my $x = 2;  my $x = 3;  '

[12:46] <JimmyZhuo> Potential difficulties:

[12:46] <JimmyZhuo>     Redeclaration of symbol '$x'.

[12:46] <JimmyZhuo>     at -e:1

[12:46] <JimmyZhuo>     Redeclaration of symbol '$x'.

[12:46] <JimmyZhuo>     at -e:1

[12:46] <JimmyZhuo>     ------>     my $x = 2;  my $x<HERE> = 3;

[12:47] <JimmyZhuo> two worries

[12:48] <JimmyZhuo> with comment

[12:48] <JimmyZhuo>                     # self.add-worry:

[12:48] <JimmyZhuo>                     #   $resolver.build-exception: 'X::Redeclaration',

[12:48] <JimmyZhuo>                     #     :symbol($lexical-name), :what($_.declaration-kind);

[12:48] <JimmyZhuo> it will only one

[12:48] <JimmyZhuo> $ RAKUDO_RAKUAST=1 ./rakudo-m -e  'my $x = 2;  my $x = 3;  '

[12:48] <JimmyZhuo> Potential difficulties:

[12:48] <JimmyZhuo>     Redeclaration of symbol '$x'.

[12:48] <JimmyZhuo>     at -e:1

[12:48] <JimmyZhuo>     ------> my $x = 2;  my $x<HERE> = 3;

[12:50] <JimmyZhuo> so I just comment it? or I add cond to check if it is RakuAST::VarDeclaration?

[12:56] <nine> Certainly needs a check.

[12:58] <JimmyZhuo> nine: I force pushed the pr

[13:01] <JimmyZhuo> have to update again ,placeholder is not worry

[13:02] <JimmyZhuo> pushed, I think it's ok now

[13:07] <nine> Did you check the spectests for any regressions?

[13:09] <JimmyZhuo> I just check these you posted here, full spectest takes longtime for me

[13:10] <nine> It's worth it :) I have rarely done any change that didn't cause any unexpected regressions

[13:13] <JimmyZhuo> it's about half a hour here

[13:13] <lizmat> JimmyZhuo: how many cores does your machine have ?

[13:13] <JimmyZhuo> E3-1230v1 cpu

[13:14] <JimmyZhuo> 4 cores 8 threads, 10+ years old

[13:14] <lizmat> have you tried setting: TEST_JOBS=8 environment variable ?

[13:19] <JimmyZhuo> +++ Compiling   blib\CORE.c.setting.moarvm

[13:19] <JimmyZhuo> The following step can take a long time, please be patient.

[13:19] <JimmyZhuo> Stage start      :   0.000

[13:19] <JimmyZhuo> Stage parse      :  76.182

[13:19] <JimmyZhuo> Stage syntaxcheck:   0.000

[13:19] <JimmyZhuo> Stage ast        :   0.000

[13:19] <JimmyZhuo> Stage optimize   :   9.441

[13:19] <JimmyZhuo> Stage mast       :  12.815

[13:19] <JimmyZhuo> Stage mbc        :   2.335

[13:19] <lizmat> which makes it roughly 2x as slow as the M1 I work on

[13:20] <lizmat> with TEST_JOBS=8 you should be able to run the spectest in about 8 minutes or so ?

[13:20] <nine> You don't have to sit an watch it for that half an hour :)

[13:23] <nine> We now make it through compilation of CORE.d.setting! What this really means is that we can actually load the newly compiled CORE.c setting and survive running its mainline

[13:23] <lizmat> whee!

[13:25] <JimmyZhuo> that's very good

[13:25] *** nine left
[13:26] *** nine joined
[13:28] *** librasteve_ joined
[13:29] <nine> Also the diff with workarounds in the setting is getting smaller and smaller

[13:43] *** JimmyZhuo left
[13:57] <nine> Btw. a common one of these workarounds is s/Perl6::Metamodel::/Metamodel::/g. I.e. we need to refer to the metamodel by the same name as user space code does. I think that the metamodel was available via the Perl6:: namespace was just a side effect of loading Perl6::Grammar and Perl6::Actions.

[15:34] <lizmat> couldn't we do that aliasing in bootstrap.nqp ?

[15:37] <timo> it would probably be nice if we could give it a deprecation notice if we see it used. that's probably something for Actions or even Optimizer to look at

[15:41] *** rakkable left
[15:42] *** rakkable joined
[15:42] <lizmat> rakkable: eco-provides Perl6::Metamodel

[15:42] <rakkable> lizmat, Running: eco-provides Perl6::Metamodel, please be patient!

[15:42] <rakkable> lizmat, Found 15 lines in 10 files (8 distributions):

[15:42] <rakkable> lizmat, https://gist.github.com/54e62071fd433331c0454d3fc9271a26

[15:42] <lizmat> that looks overseeable

[16:07] <nine> timo: this change affects only the setting itself. Outside the setting Perl6::Metamodel has always just been called Metamodel.

[16:07] <timo> oh!

[16:08] <nine> m: Perl6::Metamodel

[16:08] <camelia> rakudo-moar cb5249181: OUTPUT: «Could not find symbol '&Metamodel' in 'GLOBAL::Perl6'␤  in block <unit> at <tmp> line 1␤␤»

[16:09] <nine> m: say Metamodel::ClassHOW.HOW.name(Metamodel::ClassHOW)

[16:09] <camelia> rakudo-moar cb5249181: OUTPUT: «Perl6::Metamodel::ClassHOW␤»

[16:15] <lizmat> do you feel that's an issue?

[16:15] <lizmat> I mean it's the same issue as:

[16:15] <lizmat> m: constant Foo is Int; say Foo.^name

[16:15] <camelia> rakudo-moar cb5249181: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing initializer on constant declaration␤at <tmp>:1␤------> constant Foo is Int<HERE>; say Foo.^name␤»

[16:15] <lizmat> m: my constant Foo is Int; say Foo.^name

[16:15] <camelia> rakudo-moar cb5249181: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing initializer on constant declaration␤at <tmp>:1␤------> my constant Foo is Int<HERE>; say Foo.^name␤»

[16:15] <lizmat> m: my constant Foo = Int; say Foo.^name

[16:15] <camelia> rakudo-moar cb5249181: OUTPUT: «Int␤»

[16:33] <nine> No, why would it?

[16:34] <lizmat> I was wondering why you showed the Metamodel::ClassHOW.^name

[16:34] <nine> The name it knows itself by is inconsequential

[16:34] <lizmat> indeed, that's why I wondered whether I was missing something  :)

[16:34] <nine> Just to show that it's definitely not available as Perl6::Metamodel::ClassHOW but Metamodel::ClassHOW refers to that exact class

[16:36] <lizmat> understood

[16:58] <Geth> ¦ rakudo/main: b707a43746 | (Stefan Seifert)++ | src/Raku/ast/term.rakumod

[16:58] <Geth> ¦ rakudo/main: RakuAST: give Term::Self a second chance to resolve

[16:58] <Geth> ¦ rakudo/main: 

[16:58] <Geth> ¦ rakudo/main: At the time Term::Self's PARSE runs, the surrounding methodish may not

[16:58] <Geth> ¦ rakudo/main: have declared its implicit self. No worry, we only need it resolved at

[16:58] <Geth> ¦ rakudo/main: CHECK time, so try again there.

[16:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b707a43746

[17:00] <nine> We are through the build!

[17:15] <lizmat> wow! 

[17:19] <nine> Of course trying to run anything immediatly crashes because of my &*WHENEVER-BLOCK-TO-ADD := Nil; in Supply

[17:19] <nine> m: my &callable := Nil

[17:19] <camelia> rakudo-moar b707a4374: OUTPUT: «Type check failed in binding; expected Callable but got Nil (Nil)␤  in block <unit> at <tmp> line 1␤␤»

[17:19] <nine> m: my &*callable := Nil

[17:19] <camelia> rakudo-moar b707a4374: ( no output )

[17:20] <nine> Why is it suddenly alright to ignore a bind constraint on a dynamic variable?

[17:20] <lizmat> good question

[17:21] <lizmat> m: my &*FOO = 42

[17:21] <camelia> rakudo-moar b707a4374: OUTPUT: «Type check failed in assignment to &*FOO; expected Callable but got Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[17:21] <lizmat> m: my &*FOO := 42

[17:21] <camelia> rakudo-moar b707a4374: ( no output )

[17:21] <lizmat> hmmm  not limited to Nil

[17:28] <nine> This is what I really hate about Raku. It's not consistent at all, that was just marketing. It's got literally thousands of rules many of which are frankly just non-sensical.

[17:33] <[Coke]> Perhaps improved consistency can be a target of 6.f?

[17:38] <lizmat> yeah...  agree,...  also the handling of generic needs to be overhauled

[17:38] <lizmat> subjects for a RCS2 consensus  :-)

[17:48] <nine> 554 spectest files passing with a full RakuAST build. That's better than expected

[17:51] <[Coke]> Nice.

[17:56] *** finanalyst joined
[18:08] *** librasteve_ left
[18:19] <ugexe> i'm always harping on about consistency in reviews/issues, and largely because i'm not sure how you can improve inconsistency after-the-fact if we also want to maintain strong backcompat. consistency needs to be strongly considered ahead of any and all changes

[18:20] <nine> absolutely

[18:20] <nine> The biggest problem with removing inconsistencies is that these rules are just not documented at all. Spectests make terrible documentation for humans.

[18:22] <lizmat> especially if the enshrine implementation details  :-(

[18:25] *** sena_kun joined
[19:42] <[Coke]> installed all the missing packages from SmokeMachine and the unbitrot page and kicked off a blin run

[19:42] <[Coke]> let me know if we get to a point where we want a blin run with RAKUAST turned on

[19:45] <Geth> ¦ rakudo/bootstrap-rakuast: 45 commits pushed by (Stefan Seifert)++

[19:45] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/f750b5801fd8...d4c6215cdada

[19:45] <nine> 3500 lines of diff to get us through the bootstrap. The good news is that there are no spectest regressions :)

[19:49] <[Coke]> I forgot how painful it is to do anything on train wifi in the states.

[19:52] *** sena_kun left
[19:55] *** sena_kun joined
[20:40] *** ggoebel joined
[20:45] <ggoebel> nine: good to see you back at RakuAST :-)  Are you keeping a log of the inconsistencies and pain points that frustrate you?  Might minimize the bus factor and increase the odds that someone other than you can work on them.

[20:46] *** ggoebel left
[20:49] <nine> Only in the form of IRC posts

[20:54] <ugexe> something something feed LLM irc logs something something LLM makes a nice list of pain points

[20:55] <nine> That's....not the worst LLM suggestion I've heard so far :D

[21:05] *** librasteve_ joined
[21:06] *** ggoebel joined
[21:29] <Geth> ¦ rakudo/main: 4a8ee5d22d | (Stefan Seifert)++ | 3 files

[21:29] <Geth> ¦ rakudo/main: RakuAST: fix while/loop loop statement mods when we skip CHECK time

[21:29] <Geth> ¦ rakudo/main: 

[21:29] <Geth> ¦ rakudo/main: StatementModifier::WhileUntil needs us to thunk loop-condition, condition-

[21:29] <Geth> ¦ rakudo/main: modifier and expression but crucially it only needs this if we're not a block

[21:29] <Geth> ¦ rakudo/main: statement and we're not sunk. The problem is that at BEGIN time we don't know

[21:29] <Geth> ¦ rakudo/main: that yet.

[21:29] <Geth> ¦ rakudo/main: 

[21:29] <Geth> ¦ rakudo/main: Previously we therefore thunked at CHECK time, but we may not even get a

[21:29] <Geth> ¦ rakudo/main: CHECK time if the statement is executed at BEGIN time. Thus we now thunk at

[21:29] <Geth> ¦ rakudo/main: BEGIN time just in case and if it turns out the statement is sunk, we undo

[21:29] <Geth> ¦ rakudo/main: that thunking again.

[21:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4a8ee5d22d

[21:46] *** ggoebel left
[21:46] *** ggoebel joined
[21:51] *** ggoebel left
[22:06] <[Coke]> ⏳ 565 out of 2295 modules processed (24.61%)

[22:39] *** finanalyst left
[22:42] *** sena_kun left
