[00:55] <[Coke]> f

[01:22] <ugexe> f

[01:47] *** camelia left
[01:48] *** camelia joined
[05:11] *** vrurg_ joined
[05:13] *** vrurg left
[06:42] *** finanalyst joined
[06:49] *** vrurg joined
[06:51] *** vrurg_ left
[08:15] <Geth> ¦ rakudo/main: c2282618bb | (Stefan Seifert)++ | src/Raku/ast/statement-mods.rakumod

[08:15] <Geth> ¦ rakudo/main: RakuAST: fix statement modifier with stumbling over null values

[08:15] <Geth> ¦ rakudo/main: 

[08:15] <Geth> ¦ rakudo/main: We must not call .defined on a VMNull as VMNull does not have any

[08:15] <Geth> ¦ rakudo/main: methods at all. So bail out early if we got a null value on our hands.

[08:15] <Geth> ¦ rakudo/main: 

[08:15] <Geth> ¦ rakudo/main: Fixes: my $i := 1 if False; $_ with $i

[08:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c2282618bb

[08:15] <nine> 1266 bootstrapped

[08:46] <Geth> ¦ rakudo/main: cca6be6649 | (Stefan Seifert)++ | 2 files

[08:46] <Geth> ¦ rakudo/main: RakuAST: fix public attribute accessors swallowing call chains

[08:46] <Geth> ¦ rakudo/main: 

[08:46] <Geth> ¦ rakudo/main: While a shorthand method call like $.foo may take arguments, we

[08:46] <Geth> ¦ rakudo/main: accidentally cut down a whole call chain like $.foo()()(1) and passed

[08:46] <Geth> ¦ rakudo/main: the last arg list to foo. Fix by ensuring that we only move arguments

[08:46] <Geth> ¦ rakudo/main: once.

[08:46] <Geth> ¦ rakudo/main: 

[08:46] <Geth> ¦ rakudo/main: Fixes: $.foo()(1)

[08:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cca6be6649

[08:46] <nine> 1267

[08:55] *** nine left
[08:55] *** nine joined
[09:15] *** sena_kun joined
[09:36] <lizmat> [Coke]: did you do a blin run already?

[09:53] *** sena_kun left
[10:03] *** finanalyst left
[10:34] *** JimmyZhuo joined
[10:44] <Geth> ¦ rakudo/main: fc4811a235 | MasterDuke17++ (committed using GitHub Web editor) | src/core.c/Mu.rakumod

[10:44] <Geth> ¦ rakudo/main: Add variable name if possible to warning about use of uninitialized numeric

[10:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fc4811a235

[10:45] <lizmat> m: my %h; dd %h.of; %h<a>.push(42); dd %h    # all is well

[10:45] <camelia> rakudo-moar cca6be664: OUTPUT: «Mu␤{:a($[42])}␤»

[10:46] <lizmat> m: my M %h; dd %h.of; %h<a>.push(42); dd %h    # huh

[10:46] <camelia> rakudo-moar cca6be664: OUTPUT: «===SORRY!===␤Type 'M' is not declared␤at <tmp>:1␤------> my M<HERE> %h; dd %h.of; %h<a>.push(42); dd %h    ␤Malformed my␤at <tmp>:1␤------> my<HERE> M %h; dd %h.of; %h<a>.push(42); dd %h  ␤␤»

[10:46] <lizmat> m: my Mu %h; dd %h.of; %h<a>.push(42); dd %h    # huh

[10:46] <camelia> rakudo-moar cca6be664: OUTPUT: «Mu␤No such method 'push' for invocant of type 'Mu'.  Did you mean 'put'?␤  in block <unit> at <tmp> line 1␤␤»

[10:48] *** [Coke] left
[10:48] <JimmyZhuo> nine: re 9f58a3420e978acd3f001236c31caf481fc63e98 regressed t/spec/S12-attributes/class.t: 'my $package := $!package.meta-object;' in PERFORM-CHEC causes "No such method 'z-thunk' for invocant of type 'RT130748d'" error, I don't know why  

[10:48] <linkable6> (2025-03-18) https://github.com/rakudo/rakudo/commit/9f58a3420e throw X::Attribute::Undeclared, pass the test of "class D { method d { $!e = 1 }};" (#5820)

[10:48] <tellable6> 2025-03-18T15:43:20Z #raku-dev <nine> JimmyZhuo: somehow commit 9f58a3420e978acd3f001236c31caf481fc63e98 regressed t/spec/S12-attributes/class.t

[10:49] <JimmyZhuo> *PERFORM-CHECK

[10:51] <lizmat> m: my %h; use nqp; dd nqp::getattr(%h,Hash,q/$!descriptor/).default

[10:51] <camelia> rakudo-moar cca6be664: OUTPUT: «Any␤»

[10:51] <lizmat> m: my Mu %h; use nqp; dd nqp::getattr(%h,Hash,q/$!descriptor/).default

[10:51] <camelia> rakudo-moar cca6be664: OUTPUT: «Mu␤»

[10:51] <lizmat> the underlying difference

[10:52] <nine> JimmyZhuo: almost all strange RakuAST problems are because of timing. If you call $!package.meta-object, that will end up calling PRODUCE-META-OBJECT in RakuAST::Package. I guess that when the PERFORM-CHECK runs that package is not yet ready for getting composed, i.e. the methods have not been added yet.

[10:53] <nine> I usually debug this by adding an nqp::cluckfull to both the PRODUCE-META-OBJECT and that PERFORM-CHECK method and see the difference with and without the meta-object call

[10:55] <JimmyZhuo> cluckfull? I never see this op

[10:55] <nine> It's from my NQP debug helpers: https://gist.github.com/niner/717890812dd187538ed19690ac6e4737

[10:56] <nine> Apply that patch to your NQP to get nqp::note, nqp::cluck and nqp::cluckfull

[10:57] <JimmyZhuo> thanks, I will give it a try

[10:59] <JimmyZhuo> nine: from the error msg, seems it's a runtime error.

[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:00] <nine> JimmyZhuo: yes it is a runtime error. But it's caused because that class does not have any methods.

[11:02] <nine> Normal flow is: we create the class meta object stub as soon as we encounter the { in class Foo {. Then we parse the methods which as a BEGIN time effect add themselves to the class. When we reach the class' } we finish building the meta object (by calling $meta-object.HOW.compose($meta-object)).

[11:02] <nine> If you call $!package.meta-object before we even have reached that } the class will remain incomplete. No more methods will get added.

[11:03] <nine> That's why there's also a .stubbed-meta-object accessor. This gives you the type object without trying to compose it first. Obviously that type object will not have all the information yet.

[11:03] <nine> But it's good enough for straight forward type checks

[11:05] <JimmyZhuo> a lot of things runs before CHECK TIME, I thought the IMPL-QAST-XXXX always run after CHECK TIME, but it's not for role

[11:07] <nine> BEGIN time calls make everything extremely hard. And when you do class Foo does Bar { } this runs Bar's body at compile time

[11:10] <nine> lizmat: fun fact: https://github.com/rakudo/rakudo/commit/de08b4c67d2f45a7257b02abea8c261c39ba4e03 works only because of a bug in the optimizer

[11:11] <lizmat> you mean "is raw" should be added ?

[11:13] <nine> I think is rw but both probably do the same

[11:13] <lizmat> ok, will do

[11:13] <nine> It also would not work without the optimizer

[11:14] <JimmyZhuo> the most hard one is making it fast ;)

[11:16] <JimmyZhuo> I think it will be easier with RAKUAST?

[11:17] <nine> That's the hope

[11:25] <JimmyZhuo>  make

[11:25] <JimmyZhuo> +++ Compiling	blib/Perl6/BOOTSTRAP/v6c.moarvm

[11:25] <JimmyZhuo> Unknown QAST node type NQPMu

[11:25] <JimmyZhuo>    at NQP::src/vm/moar/QAST/QASTCompilerMAST.nqp:2115  (/home/jimmyz/nqp/../moarvm/install/share/nqp/lib/QAST.moarvm:compile_node)

[11:25] <JimmyZhuo>  from NQP::src/vm/moar/QAST/QASTCompilerMAST.nqp:645  (/home/jimmyz/nqp/../moarvm/install/share/nqp/lib/QAST.moarvm:as_mast)

[11:26] <JimmyZhuo> after adding nqp::cluckfull();

[11:26] <nine> Needs a message: nqp::cluckfull('here');

[11:27] <JimmyZhuo> works now, it's LTA error

[11:48] <Geth> ¦ rakudo/main: 19f77e302a | (Elizabeth Mattijsen)++ | 2 files

[11:48] <Geth> ¦ rakudo/main: Make sure that .head/first/head() on natives are "raw"

[11:48] <Geth> ¦ rakudo/main: 

[11:48] <Geth> ¦ rakudo/main: They apparently *do* need that, and the only reason this worked so

[11:48] <Geth> ¦ rakudo/main: far, is because of a bug in that (legacy) static optimizer.

[11:48] <Geth> ¦ rakudo/main: 

[11:48] <Geth> ¦ rakudo/main: nine++ for spotting

[11:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/19f77e302a

[12:46] *** [Coke] joined
[12:51] *** JimmyZhuo left
[13:04] <Geth> ¦ rakudo/main: bc05703131 | (Elizabeth Mattijsen)++ | 3 files

[13:04] <Geth> ¦ rakudo/main: Expand Hash parameterization

[13:04] <Geth> ¦ rakudo/main: 

[13:04] <Geth> ¦ rakudo/main: This allows one to specify a default value for any containers as

[13:04] <Geth> ¦ rakudo/main: well.  By default, this is the same as the "of" type, as it was

[13:04] <Geth> ¦ rakudo/main: before.

[13:04] <Geth> ¦ rakudo/main: 

[13:04] <Geth> ¦ rakudo/main: So the standard hash "parameterization" is now Hash[Mu,Str(Any),Any]

[13:04] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>

[13:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bc05703131

[13:05] <[Coke]> blin run started - haven't  yet figured out what was skipping Red, so it will fail pre/post again, apologies.

[13:07] <SmokeMachine> [Coke]: thanks for letting me know, I'll test Red on Rakudo's `main` branch locally then, thanks

[13:17] <[Coke]> c: bc05703131b667160808974f99fd8b3546fa2607

[13:17] <committable6> [Coke], I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Committable

[13:18] <[Coke]> c: bc05703131b667160808974f99fd8b3546fa2607 say 3

[13:18] <committable6> [Coke], ¦bc05703: «3␤»

[13:19] <[Coke]> blin exploded after a minute, bad timing on that commit, but it looks OK now?

[13:19] <lizmat> bc05703131 should not make a difference for non-RakuAST related stuff

[13:19] <linkable6> (2025-03-19) https://github.com/rakudo/rakudo/commit/bc05703131 Expand Hash parameterization

[13:20] <lizmat> the two failing spec tests *are* RakuAST related because of the new .assuming implementation

[13:21] <lizmat> and I'm not sure yet whether that needs a fix in the test, or in the new .assuming logic

[13:36] <Geth> ¦ roast: 0e3a65e3cd | (Stefan Seifert)++ | S06-advanced/return.t

[13:36] <Geth> ¦ roast: Fix test for return in parameter defaults and skip it

[13:36] <Geth> ¦ roast: 

[13:36] <Geth> ¦ roast: According to the linked issue, parameter default thunks are supposed to

[13:36] <Geth> ¦ roast: run inside the routine body they're attached to. Thus a return in such a

[13:36] <Geth> ¦ roast: thunk would be caught by the return handler of this routine.

[13:36] <Geth> ¦ roast: 

[13:36] <Geth> ¦ roast: The test for this however relied on the return handler of the

[13:36] <Geth> ¦ roast: <…commit message has 8 more lines…>

[13:36] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0e3a65e3cd

[13:37] <Geth> ¦ rakudo/main: 7b4ba29c3f | (Stefan Seifert)++ | 2 files

[13:37] <Geth> ¦ rakudo/main: RakuAST: only generate return handlers when there's a chance of explicit return

[13:37] <Geth> ¦ rakudo/main: 

[13:37] <Geth> ¦ rakudo/main: Routines only need a return handler if it's actually possible that an

[13:37] <Geth> ¦ rakudo/main: explicit return is performed. Unfortunately finding out with certainty

[13:37] <Geth> ¦ rakudo/main: whether that's the case is impossible because there are many ways of

[13:37] <Geth> ¦ rakudo/main: calling return including method calls and from EVALed strings. Thus we

[13:37] <Geth> ¦ rakudo/main: need to be prudent and add the handler if there's even a possibility

[13:37] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[13:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7b4ba29c3f

[13:37] <Geth> ¦ rakudo/main: 57fcb1f1b0 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[13:37] <Geth> ¦ rakudo/main: RakuAST: dont' decont return values of rw routines

[13:37] <Geth> ¦ rakudo/main: 

[13:37] <Geth> ¦ rakudo/main: Routines that are rw or raw are meant to return a container or lexref

[13:37] <Geth> ¦ rakudo/main: that can be written to. Thus deconting would be counter productive.

[13:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/57fcb1f1b0

[13:38] <nine> 1269

[13:52] <[Coke]> Anything tagged RakuAST in the commit only matters (right now) when the env var is enabled, right?

[13:53] <[Coke]> (so those are safe as "last minute" commits to the release)

[13:53] *** tbrowder left
[13:54] <nine> Usually yes

[13:54] *** tbrowder joined
[13:55] <nine> m: class Foo { has @.command is List }; my @command = [1, 2]; dd Foo.new(:@command)

[13:55] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «Foo.new(command => (1, 2))␤»

[13:55] <nine> When you disable generate_buildplan_executor, this ^^^ prints Foo.new(command => ())

[14:00] <lizmat> m: class Foo { has @.command is List }; use BUILDPLAN Foo

[14:00] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «class Foo BUILDPLAN:␤ 0 nqp::getattr(obj,Foo,'@!command') := initializer-code()␤ 1 nqp::getattr(obj,Foo,'@!command') = :$command if possible␤»

[14:01] <lizmat> m: class Foo { has @.command  }; use BUILDPLAN Foo

[14:01] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «class Foo BUILDPLAN:␤ 0 nqp::getattr(obj,Foo,'@!command') = :$command if possible␤ 1 vivify nqp::getattr(obj,Foo,'@!command') if part of a mixin␤»

[14:02] <lizmat> quite possibly the initializer code is turning the @.command into a List before it's getting assigned ?

[14:03] <lizmat> nine: I propose getting rid of the buildplan logic as soon as possible, instead of trying to fix it in RakuAST

[14:05] <nine> Well for now I consider this problem out of scope for RakuAST.

[14:05] <lizmat> indeed, and it is, and we can fix it in RakuAST  :)

[14:06] <nine> Can we?

[14:07] <nine> I'm not actually sure what difference RakuAST makes to this

[14:09] <lizmat> because we can pass the right args to @.command.STORE to make it work on what is essentially a list

[14:10] <lizmat> inside the POPULATE sub that we generate

[14:10] <nine> Why can we not do that with the old frontend?

[14:10] <lizmat> *method

[14:10] <lizmat> we could, but why would we at this point ?

[14:11] <nine> Why did we keep Mu.BUILDPLAN for so long?

[14:11] <lizmat> because NQP?

[14:12] <nine> ?

[14:12] <nine> Last I checked, NQP still exists, so I clearly don't understand that answer :)

[14:13] <lizmat> yeah, I was wrong: I thought NQP also had a BUILDPLAN logic 

[14:13] <lizmat> so to answer your question: because nobody tried to get rid of it ?

[14:14] <lizmat> actually, I just checked: the current logic *should* allow it?

[14:15] <lizmat> m: class A { has @.foo is List }; dd A.new(foo => (1,2,3)).foo

[14:15] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «(1, 2, 3)␤»

[14:15] <lizmat> m: class A { has @.foo }; dd A.new(foo => (1,2,3)).foo

[14:15] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «[1, 2, 3]␤»

[14:15] <lizmat> so is already handled correctly ?

[14:16] <lizmat> so I guess I don't understand your point about disabling generate_buildplan_executor ?

[14:16] <nine> It only works on the old frontend because of generate_buildplan_executor. The bug is in Mu.POPULATE

[14:16] <lizmat> ok, I'm not sure what the bug is now ?

[14:17] <lizmat> if there's a bug in Mu.POPULATE, it's been there for at least 5 years, if not longer

[14:18] <nine> It is there and yes, likely for that long

[14:18] <lizmat> but what is the bug?

[14:18] <nine> > ./rakudo-m -e 'class Foo { has @.command is List }; my @command = [1, 2]; dd Foo.new(:@command)'

[14:18] <nine> Foo.new(command => ())

[14:18] <lizmat> m: class Foo { has @.command is List }; my @command = [1, 2]; dd Foo.new(:@command)

[14:18] <nine> Clearly wrong, isn't it?

[14:18] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «Foo.new(command => (1, 2))␤»

[14:18] <lizmat> yes

[14:19] <lizmat> so the bug is in the bootstrapped RakuAST version ?

[14:19] <lizmat> that has the generate_buildplan_executor disiabled?

[14:19] <lizmat> I'm not surprised then ?

[14:19] <nine> No, the bug is in POPULATE. It just so happens that RakuAST does not have a buildplan executor generator, so it always uses POPULATE

[14:20] <nine> But if you disable the generator in the old frontend, you see the bug there as well. So it's got nothing to do with RakuAST per se.

[14:20] <lizmat> I see...  /me checks

[14:22] <[Coke]> ⏳ 252 out of 2296 modules processed (10.97%)

[14:24] <[Coke]> ah, when I see "attempting to fetch" mid blin run, it's bisecting. duh

[14:25] <lizmat> ok, looks like the Mu::POPULATE does not call .STORE for array inits

[14:25] <lizmat> nine: I *think* that's because of bootstrapping issues, because the method .STORE may not yet exist

[14:26] <nine> Wouldn't everything that's compiled in the setting get a generated executor?

[14:27] <lizmat> no, not until some point during the bootstrap when compiler services become a thing ?

[14:27] *** vrurg_ joined
[14:28] <lizmat> which is after the Attribute class is compiled ?

[14:28] <lizmat> and attribute.compose exists ?

[14:28] *** vrurg left
[14:31] <nine> Ah, indeed, there's a try block

[14:31] <lizmat> still, only class Mu and class Any precede that, 

[14:34] <lizmat> still, I'd rather spend time on getting a RakuAST based POPULATE method, then trying to fix this in the old backend at this point

[14:35] <lizmat> with it, all BUILDPLAN generator logic / Mu::POPULATE and compiler services, can be eradicated

[14:47] <nine> There's still gonna be the bootstrapping issue and the case where a class is purely generated via MOP at runtime

[14:48] <lizmat> yeah, this is why I'm not sure where to feed the POPULATE logic from: from the RAKUAST tree info?   Or from the generated meta-object?

[14:49] <lizmat> if it were to be from the generated meta-object, the MOP case could be covered as well

[14:52] <lizmat> nine: what do you think ?

[14:53] <nine> Feeding from generated meta-object is not enough. The MOP would still need access to the compiler

[14:53] <nine> After all, the whole point of CompilerServices is to give the MOP access to the compiler

[14:54] <lizmat> but basically just for COMPOSE phaser functionality?  or am I missing something?

[14:55] <nine> huh?

[14:55] <lizmat> basicallly, generating any accessors that should be created, and the POPULATE method ?

[14:57] <nine> Well, yes, that's what CompilerServices is used for

[14:57] <lizmat> there are no other uses, right?   there aren't afaik

[14:58] <nine> right

[14:58] <lizmat> my original plan was to generate the accessors and POPULATE before CHECK time

[14:59] <lizmat> building classes with the MOP sorta clashes with that idea  ;-)

[14:59] <nine> that's my point

[15:00] <lizmat> but we already have the meta-object just before CHECK time, right ?

[15:02] <lizmat> so we conceptually could generate accessors and POPULATE, and in the case of MOP created classes, put them into a role and mix them in ?

[15:06] <nine> Why would we need a role when we're in the metaclass' compose method where we can just add stuff as we like?

[15:07] <lizmat> so you'd want to call .EVAL on each generated component ?

[15:08] <nine> what?

[15:13] <lizmat> each generated accessor method, and the POPULATE method 

[15:14] <nine> How does EVAL enter the picture?

[15:14] <lizmat> .EVAL on the created RakuAST tree ?

[15:14] <nine> We're talking about generating a bunch of methods and adding it to the class

[15:14] <lizmat> for the MOP case

[15:15] <lizmat> we don't have a RakuAST for the MOP case, do we ?

[15:15] <nine> If you don't have a RakuAST then how would you call .EVAL on it?

[15:15] <nine> And anyway EVAL would just be a very roundabout way to call into the compiler

[15:16] <lizmat> I have to go afk now, for a few hours

[15:16] <lizmat> I'll get back to it, ok ?

[15:17] <nine> k

[15:17] <lizmat> afk&

[17:37] *** rakkable left
[17:38] *** rakkable joined
[17:38] <lizmat> rakkable: eco-pr ^*

[17:38] <rakkable> lizmat, Running: eco-provides ^*, please be patient!

[17:38] <rakkable> lizmat, Found 117 lines in 25 files (25 distributions):

[17:38] <rakkable> lizmat, https://gist.github.com/eb95839bd01a9f4ef6903667248d1bf9

[17:39] <[Coke]> ⏳ 1020 out of 2296 modules processed (44.42%)

[17:39] <lizmat> rakkable: eco-pr ^* --type=contains

[17:39] <rakkable> lizmat, Running: eco-provides ^* --type=contains, please be patient!

[17:39] <rakkable> lizmat, Found 117 lines in 25 files (25 distributions):

[17:39] <rakkable> lizmat, https://gist.github.com/7f174e08a5a6d90c5fc74677c0751174

[17:39] <lizmat> meh

[17:51] <Geth> ¦ rakudo/main: 90d8e011da | (Stefan Seifert)++ | src/Raku/ast/statementprefixes.rakumod

[17:51] <Geth> ¦ rakudo/main: RakuAST: only optimize to SUPPLY-ONE-WHENEVER in v6.d and above

[17:51] <Geth> ¦ rakudo/main: 

[17:51] <Geth> ¦ rakudo/main: The setting itself is language version 6.c and SUPPLY-ONE-WHENEVER is

[17:51] <Geth> ¦ rakudo/main: only available from 6.d onwards. Using it would lead to strange errors

[17:51] <Geth> ¦ rakudo/main: because dynamic variables are not found.

[17:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/90d8e011da

[17:51] <Geth> ¦ rakudo/main: 1d32d9020d | (Stefan Seifert)++ | 4 files

[17:51] <Geth> ¦ rakudo/main: RakuAST: fix detecting number of whenevers in a supply

[17:51] <Geth> ¦ rakudo/main: 

[17:51] <Geth> ¦ rakudo/main: The previously used logic to detect whether a supply has a single

[17:51] <Geth> ¦ rakudo/main: whenever was inadequate to the complexities of Raku code. It only

[17:51] <Geth> ¦ rakudo/main: detected the straight forward cases of multiple whenever statements

[17:51] <Geth> ¦ rakudo/main: directly in the supply block or one whenever directly in the

[17:51] <Geth> ¦ rakudo/main: block of another whenever. There are however constructs like:

[17:51] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[17:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1d32d9020d

[17:51] <nine> We're at 1270 fully bootstrapped

[18:10] <Geth> ¦ rakudo/bootstrap-rakuast: 29 commits pushed by (Stefan Seifert)++

[18:10] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/afa24ab4d728...d75cb9e33783

[18:10] <nine> 1271

[18:39] <nine> m: sub foo(int $tz) { }; foo($*TZ)

[18:39] <camelia> rakudo-moar 1d32d9020: OUTPUT: «Cannot auto-decontainerize argument␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:41] <nine> So I had this super nice golf of the problem. I thought I had a fix for it. Then it turns out, the golf fails exactly the same way in the old frontend.

[18:41] <nine> Now I'm back to finding out what in the 10 layer callstack makes the problem go away in the old frontend :/

[18:49] <nine> m: sub foo(int $tz) { }; sub bar(Int(Cool) $tz) { foo($tz) }; bar($*TZ) # the better golf

[18:49] <camelia> rakudo-moar 1d32d9020: ( no output )

[18:51] *** sena_kun joined
[19:09] <Geth> ¦ rakudo/main: bcff40fc5f | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[19:09] <Geth> ¦ rakudo/main: RakuAST: ensure we decont the result of parameter coercion

[19:09] <Geth> ¦ rakudo/main: 

[19:09] <Geth> ¦ rakudo/main: During parameter processing we set up a local variable for the parameter

[19:09] <Geth> ¦ rakudo/main: and also a deconted one. In some cases like with coercive parameter

[19:09] <Geth> ¦ rakudo/main: types we use that deconted value and produce yet another value. In the

[19:09] <Geth> ¦ rakudo/main: compiler code we then clear $get-decont-var to signify that it no longer

[19:09] <Geth> ¦ rakudo/main: refers to the most current version of the parameter value (that would be

[19:09] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>

[19:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bcff40fc5f

[19:09] <nine> 1272

[19:26] <[Coke]> I really feel like Blin got faster on this box without me doing anything

[19:27] <[Coke]> I wonder if I'm just getting more resources from azure just by luck.

[20:14] <[Coke]> I don't remember happening to see Device::Velleman::K8055 before

[20:56] <[Coke]> ⏳ 1666 out of 2296 modules processed (72.56%)

[20:58] <[Coke]> one of the packages is "SparrowCI - super fun and flexible CI system with many programming languages support"

[20:58] <[Coke]> which I can search for on raku.land but not get a useful page out of.

[21:00] <[Coke]> looks like zef is reporting on 0.0.2, but the 0.0.12 in the repo has that in the description, not the name.

[21:01] <[Coke]> (guessing something else depends on that old name)

[21:01] <[Coke]> ... or we need a way to delete old stuff.

[21:22] *** notna joined
[21:34] <Geth> ¦ rakudo/main: c6e150a7e0 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[21:34] <Geth> ¦ rakudo/main: RakuAST: fix defined subset types not checked in dispatch

[21:34] <Geth> ¦ rakudo/main: 

[21:34] <Geth> ¦ rakudo/main: While we did emit code for checking subset types, we did not do so if

[21:34] <Geth> ¦ rakudo/main: the subset type was augmented with a definedness-constraint.

[21:34] <Geth> ¦ rakudo/main: 

[21:34] <Geth> ¦ rakudo/main: Fixes: multi foo(UInt:D $i) { }; foo(-1) # To fail

[21:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c6e150a7e0

[21:34] <nine> 1273

[21:37] *** notna left
[21:43] <patrickb> Do we currently or have we ever supported clang on Windows?

[21:59] <Geth> ¦ rakudo/main: 9fe52a1d58 | (Elizabeth Mattijsen)++ | 2 files

[21:59] <Geth> ¦ rakudo/main: Make sure Hash/::Typed/::Object take same parameterization

[21:59] <Geth> ¦ rakudo/main: 

[21:59] <Geth> ¦ rakudo/main: Not entirely sure exactly what is going on here, but .assuming got

[21:59] <Geth> ¦ rakudo/main: confused by the fact that Hash::Typed only took 2 paremeterization

[21:59] <Geth> ¦ rakudo/main: arguments, and Hash and Hash::Object take 3.

[21:59] <Geth> ¦ rakudo/main: 

[21:59] <Geth> ¦ rakudo/main: Code should just use the Hash[...] parameterization.  But internally

[21:59] <Geth> ¦ rakudo/main: <…commit message has 16 more lines…>

[21:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9fe52a1d58

[22:06] *** rakkable left
[22:06] *** rakkable joined
[22:06] <lizmat> rakkable: eco-pr --pattern=^*

[22:06] <rakkable> lizmat, '--pattern' argument not allowed / unknown: ignored

[22:06] <rakkable> lizmat, Running: eco-provides , please be patient!

[22:06] <rakkable> lizmat, Found 9937 lines in 64 files (11 distributions):

[22:06] <rakkable> lizmat, https://gist.github.com/3a638aa4b918f2d5e05e85928adb404f

[22:09] <Geth> ¦ rakudo/bootstrap-rakuast: 30 commits pushed by (Stefan Seifert)++

[22:09] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/d75cb9e33783...000f03a9cbce

[22:09] <nine> And that's 1273

[22:09] <nine> 1274

[22:09] <nine> All remaining additional failures are .assuming related (except for the BUILDALL thing we discussed today), so I consider them out of scope.

[22:10] <nine> Thus bootstrap is complete from my perspective!

[22:11] <lizmat> Nice!

[22:12] <lizmat> so what's the next step in your opinion: I guess it's too early to merge the bootstrap, right?

[22:13] <lizmat> because that would set us back from 1345 -> 1274 passing 

[22:13] <lizmat> and defnitely not now so close to the 2025.03 release

[22:18] <lizmat> afk again&

[22:41] <[Coke]> ⏳ 1862 out of 2296 modules processed (81.09%)

[22:50] *** sena_kun left
