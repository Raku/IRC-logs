[01:16] *** MasterDuke joined
[01:19] <MasterDuke> ugh/arg. still trying to figure out this numeric variable exception. i've kind of reduced the problem to the fact that this https://gist.github.com/MasterDuke17/f81a0a2cfe46be69de9c132e0c450783 cases `my $kinds = 4; say $kinds` to die with `Variable '$kinds' is not declared.  Perhaps you forgot a 'sub' if this

[01:19] <MasterDuke> was intended to be part of a signature?`

[01:29] <MasterDuke> both stock and with that patch, `$*VARIABLE-NAME` is '$kinds' for the `$/.add-variable($*VARIABLE-NAME);` call

[01:41] <MasterDuke> nine: do you have any suggestions for debugging rakuast grammar weirdness? i'm finding this considerably harder to make any progress on than the other rakuast stuff i just did, and hopefully i'm just missing something trivial in either the implementation or the debugging

[01:42] <MasterDuke> anyway, likely afk until probably tomorrow evening

[01:47] *** MasterDuke left
[02:14] <timo> is `$<var><sigil>` correct there, does it have to be `$<var-dec><sigil>` instead?

[02:27] *** MasterDuke joined
[02:28] <MasterDuke> timo: oops, i had fixed that locally, the error is with the fix

[02:28] <timo> OK

[02:39] <MasterDuke> for a little more context, i had added some error reporting to `token variable`, but it wasn't hitting. i realized it's because in src/Raku/Grammar.nqp, `token variable-declarator` has those three alternations, whereas in src/Perl6/Grammar.nqp it has `<variable>` instead (which is where the exception i added is thrown)

[02:42] <MasterDuke> so i changed `token variable-declarator` in rakuast to also call `<variable>` instead and got the error i reported. at first i thought it was because of some other difference between the `token variable`s in rakuast vs legacy, but then was able to minimize it to just moving the existing lines out into a new token broke the same way

[02:58] <MasterDuke> hm, i wonder if it's some inconsistency between `$*VAR`, `$*VARIABLE`, and `$*VARIABLE-NAME`? the legacy grammar doesn't even have `$*VARIABLE-NAME` at all. well, something investigate tomorrow

[03:05] *** MasterDuke left
[07:48] <nine> MasterDuke: stupid question, but does this patch come with accompanying changes in the actions?

[07:48] <tellable6> nine, I'll pass your message to MasterDuke

[09:22] *** sena_kun joined
[09:37] *** sena_kun left
[10:13] <Geth> ¦ rakudo/main: fa95e44195 | (Stefan Seifert)++ | 3 files

[10:13] <Geth> ¦ rakudo/main: RakuAST: support multislice prefix

[10:13] <Geth> ¦ rakudo/main: 

[10:13] <Geth> ¦ rakudo/main: Fixes: @a[||(1, 2)] # to mean the same as @a[1; 2]

[10:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fa95e44195

[10:25] <Geth> ¦ rakudo/main: 989a3fc07f | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[10:25] <Geth> ¦ rakudo/main: RakuAST: support multislice for hashes, too

[10:25] <Geth> ¦ rakudo/main: 

[10:25] <Geth> ¦ rakudo/main: Fixes: %h{||<a 2b} # to mean the same as %h['a'; 'b']

[10:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/989a3fc07f

[10:26] <nine> That's 1308

[10:36] *** djinni` left
[10:39] <lizmat> nine: No registered operation handler for 'note'

[10:39] <lizmat> setting doesn't build atm

[10:42] <nine> Oh darn...must have left in some debug output

[10:42] <Geth> ¦ rakudo/main: 01a3362125 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[10:42] <Geth> ¦ rakudo/main: RakuAST: remove debug output

[10:42] <Geth> ¦ rakudo/main: 

[10:42] <Geth> ¦ rakudo/main: lizmat++ for the heads up

[10:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/01a3362125

[10:43] <lizmat> much better  :-)

[10:49] *** JimmyZhuo joined
[11:19] *** JimmyZhuo left
[11:23] *** djinni` joined
[11:59] <[Coke]> rakudo-star was impacted by one of my issues in the release and needs to be re-generated.

[11:59] <[Coke]> (it's including the previous version of nqp)

[12:18] <Geth> ¦ roast: 34d83553bc | (Elizabeth Mattijsen)++ | S26-documentation/block-leading-user-format.t

[12:18] <Geth> ¦ roast: Fix test for declarator docs

[12:18] <Geth> ¦ roast: 

[12:18] <Geth> ¦ roast: Declarator docs need to be consecutive in RakuDoc: any (empty)

[12:18] <Geth> ¦ roast: lines will break the connection with the declarand

[12:18] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/34d83553bc

[12:28] <Geth> ¦ rakudo/main: ee87a4bb71 | (Elizabeth Mattijsen)++ | 3 files

[12:28] <Geth> ¦ rakudo/main: RakuAST: tighten up handling of declarator docs

[12:28] <Geth> ¦ rakudo/main: 

[12:28] <Geth> ¦ rakudo/main: Declarator docs need to be on consecutive lines: no (empty) lines

[12:28] <Geth> ¦ rakudo/main: inbetween are allowed, or the declarator doc will be considered to

[12:28] <Geth> ¦ rakudo/main: be without a declarand and cause a worry.

[12:28] <Geth> ¦ rakudo/main: 

[12:28] <Geth> ¦ rakudo/main: The first whitespace character after a #= or #| is ignored, but does

[12:28] <Geth> ¦ rakudo/main: not have to exist.  So this allows '#=' as content of a whole line,

[12:28] <Geth> ¦ rakudo/main: but also '#=foo' to be generating the "foo" string.

[12:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ee87a4bb71

[12:29] <lizmat> nine: I'm at 1305 now, which includes the -4 files I moved to "make test" yesterday

[12:30] <lizmat> in any case: t/spec/S26-documentation/block-leading-user-format.t now passes

[12:48] <nine> lizmat: bootstrapped or old frontend?

[12:49] <lizmat> old frontend

[12:50] <lizmat> (assuming you're talking about the number)

[12:50] <nine> I am. Weird, my t/spec is clean

[13:04] <Geth> ¦ roast: 99443c9bf3 | (Elizabeth Mattijsen)++ | S06-operator-overloading/circumfix.t

[13:04] <Geth> ¦ roast: Remove macro test that was skipped

[13:04] <Geth> ¦ roast: 

[13:04] <Geth> ¦ roast: Because that particular case was a NYI in the first place

[13:04] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/99443c9bf3

[13:07] <Geth> ¦ roast: e72b07a130 | (Elizabeth Mattijsen)++ | S06-signature/sub-ref.t

[13:07] <Geth> ¦ roast: Remove macro test that was skipped because NYI

[13:07] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e72b07a130

[13:09] <Geth> ¦ roast: 645623a4ab | (Elizabeth Mattijsen)++ | 6.c/S14-roles/mixin-6c.t

[13:09] <Geth> ¦ roast: Remove duplicated macro test

[13:09] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/645623a4ab

[13:10] <Geth> ¦ rakudo/main: 27e6dc36f9 | (Elizabeth Mattijsen)++ | t/13-experimental/macros.rakutest

[13:10] <Geth> ¦ rakudo/main: Moved all non-specific macros tests here from roast

[13:10] <Geth> ¦ rakudo/main: 

[13:10] <Geth> ¦ rakudo/main: These tests were collected from test files that were testing

[13:10] <Geth> ¦ rakudo/main: non-macro specific properties of macros

[13:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/27e6dc36f9

[13:11] <Geth> ¦ roast: e5ed02c883 | (Elizabeth Mattijsen)++ | 7 files

[13:11] <Geth> ¦ roast: Remove all non-specific macros tests

[13:11] <Geth> ¦ roast: 

[13:11] <Geth> ¦ roast: As they have been moved to the rakudo repo

[13:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e5ed02c883

[13:17] <lizmat> 1307 after ^^

[13:25] <Geth> ¦ rakudo/main: 2604cb5d16 | (Stefan Seifert)++ | 3 files

[13:25] <Geth> ¦ rakudo/main: RakuAST: fix QUIT phaser in supply preventing quit signal

[13:25] <Geth> ¦ rakudo/main: 

[13:25] <Geth> ¦ rakudo/main: The QUIT phaser needs to return any unhandled exception so it can get

[13:25] <Geth> ¦ rakudo/main: forwarded to a quit signal.

[13:25] <Geth> ¦ rakudo/main: 

[13:25] <Geth> ¦ rakudo/main: Fixes:

[13:25] <Geth> ¦ rakudo/main: my class UselessException is Exception { };

[13:25] <Geth> ¦ rakudo/main: my $trigger = Supplier.new;

[13:25] <Geth> ¦ rakudo/main: my $s = supply { whenever $trigger { QUIT { when UselessException { } } } };

[13:25] <Geth> ¦ rakudo/main: $s.tap(quit => { say "quit" });

[13:25] <Geth> ¦ rakudo/main: $trigger.quit(Exception.new);

[13:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2604cb5d16

[13:25] <nine> 1309 now for me

[13:26] <nine> Seems like we're 1 test file apart

[13:29] <Geth> ¦ roast: 46447c3578 | (Elizabeth Mattijsen)++ | S06-macros/returning-string.t

[13:29] <Geth> ¦ roast: Remove macros test file that was not part of spectest

[13:29] <Geth> ¦ roast: 

[13:29] <Geth> ¦ roast: Would not compile at all, so assuming it's a NYI

[13:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/46447c3578

[13:34] <Geth> ¦ roast: 9fb378c6d1 | (Elizabeth Mattijsen)++ | S06-macros/returning-closure.t

[13:34] <Geth> ¦ roast: Remove macros test file that was not part of spectest

[13:34] <Geth> ¦ roast: 

[13:34] <Geth> ¦ roast: Would compile, but fail with a bytecode validation error

[13:34] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9fb378c6d1

[13:35] <Geth> ¦ roast: e11750d9da | (Stefan Seifert)++ | S05-mass/rx.t

[13:35] <Geth> ¦ roast: Remove todo'ed Perl5 regex syntax test

[13:35] <Geth> ¦ roast: 

[13:35] <Geth> ¦ roast: There are no plans to implement this and indeed there's a consensus to

[13:35] <Geth> ¦ roast: remove Perl5 regex syntax support altogether. So remove this test that's

[13:35] <Geth> ¦ roast: failing more violently on the RakuAST based compiler.

[13:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e11750d9da

[13:39] <nine> Oh, turns out my t/spec was tracking another local checkout instead of the upstream git repo

[13:40] <nine> So I'm now at 1311.

[13:40] <Geth> ¦ roast: 5fda75c47f | (Elizabeth Mattijsen)++ | S06-macros/postfix.t

[13:40] <Geth> ¦ roast: Remove macros test file that was not part of spectest

[13:40] <Geth> ¦ roast: 

[13:40] <Geth> ¦ roast: Would not compile at all, so assuming it's a NYI

[13:40] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/5fda75c47f

[13:40] <nine> I confirmed that the ones we lost were just removed from the repo.

[13:45] <Geth> ¦ rakudo/main: 570d1f895b | (Elizabeth Mattijsen)++ | 5 files

[13:45] <Geth> ¦ rakudo/main: Move viable macro tests from roast to rakudo

[13:45] <Geth> ¦ rakudo/main: 

[13:45] <Geth> ¦ rakudo/main: These test files passed on the legacy grammar, but should not have

[13:45] <Geth> ¦ rakudo/main: been part of roast as they test experimental features

[13:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/570d1f895b

[13:46] <Geth> ¦ roast: 18cb0ec726 | (Elizabeth Mattijsen)++ | 6 files

[13:46] <Geth> ¦ roast: Remove valid macro test that now live in the rakudo repo

[13:46] <Geth> ¦ roast: 

[13:46] <Geth> ¦ roast: As they were testing experimental features, and so shouldn't have

[13:46] <Geth> ¦ roast: been in roast in the first place

[13:46] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/18cb0ec726

[13:51] <tbrowder> has anyone seen the security warning for the nqp dir? says jquery version needs updating

[13:52] <lizmat> nine: 1309 for me now

[13:54] <nine> Seems like we're gonna have to compare lists at some point

[13:56] <tbrowder> never mind, but warning about old github/perl6/std (jquery needs updating...

[14:00] <lizmat> nine: my list: https://gist.github.com/lizmat/4673679ad5b797909b8a50d950fa1a1f

[14:01] <nine> t/spec/S12-attributes/augment-and-initialization.rakudo.moar and t/spec/integration/role-composition-vs-attribute.rakudo.moar

[14:03] <Geth> ¦ rakudo/main: 76be78354b | (Stefan Seifert)++ | src/Raku/Actions.nqp

[14:03] <Geth> ¦ rakudo/main: RakuAST: remove support for Perl5 regex syntax

[14:03] <Geth> ¦ rakudo/main: 

[14:03] <Geth> ¦ rakudo/main: Ironically the spectest will skip all and thus pass if all Perl 5

[14:03] <Geth> ¦ rakudo/main: regexes fail. There's a community consenus that this feature should be

[14:03] <Geth> ¦ rakudo/main: removed as it's outdated, unmaintained and barely used.

[14:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/76be78354b

[14:03] <nine> 1321 in the weirdest way to gain 10 spec tests :D

[14:04] <lizmat> hehe

[14:05] <lizmat> so, I think I see what the problem is: the grep on the error output: the file names were too long  :-)

[14:07] <nine> LOL

[14:07] <nine> Isn't computing fun?

[14:07] <lizmat> sometimes  :-)

[14:11] <lizmat> 1321 confirmed

[14:13] <lizmat> aka 98%

[14:19] <[Coke]> releasable6: next

[14:19] <releasable6> [Coke], Next release in ≈24 days and ≈4 hours. There are no known blockers. 50 out of 51 commits logged

[14:19] <lizmat> You can't adverb &

[14:19] <lizmat> at /Users/liz/Github/rakudo/t/spec/integration/advent2013-day10.t:84

[14:19] <lizmat> ------>     $z & $y :adverb⏏;    # applies to &

[14:19] <releasable6> [Coke], Details: https://gist.github.com/733e63fa6f5788e308b0ad45aa39005e

[14:19] <lizmat> nine: that sorta implies we should be able to adverb infix:<&> ?

[14:23] <nine> looks like

[14:25] <[Coke]> As one of the people who added some of the integration tests, i reiterate - that was probably a mistake. the advent article isn't "spec", it was just something we didn't want to break in early days.

[14:26] <nine> I'm fine with that, too :)

[14:26] <[Coke]> Maybe we can consider removing them in 6.e's spec suite.

[14:29] *** codesections joined
[14:30] <[Coke]> https://github.com/rakudo/rakudo/issues/5775 - we do want to be testing Inline::Perl5 as part of each release, yes?

[14:30] <[Coke]> (Because right now we are skipping it)

[14:32] <[Coke]> Is there a stress test make target that *just* runs the delta between stress and spec? or does it always include base spec plus extra stress?

[14:47] <Geth> ¦ rakudo/main: c522ddff89 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[14:47] <Geth> ¦ rakudo/main: RakuAST: support call-assign initializer on shaped arrays

[14:47] <Geth> ¦ rakudo/main: 

[14:47] <Geth> ¦ rakudo/main: Fixes: my @c[2;2] .= new(:shape(2, 2), <a b>, <c d>);

[14:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c522ddff89

[14:47] <nine> 1322

[14:49] <Geth> ¦ rakudo: coke self-assigned release guide is in p5 pod https://github.com/rakudo/rakudo/issues/5834

[14:49] <[Coke]> jdv: any issues with converting the release guide to rakudoc?

[14:50] <jdv> will it render on gh?

[14:50] <jdv> i just need to be able to read it.  whatever works.

[14:50] <jdv> (easily)

[14:52] <Geth> ¦ roast: 4a284ebc7b | (Stefan Seifert)++ | S32-str/split.t

[14:52] <Geth> ¦ roast: Remove incidental testing of Perl5 regex syntax

[14:52] <Geth> ¦ roast: 

[14:52] <Geth> ¦ roast: Both Raku and Perl5 regex syntax ought to compile to the exact same

[14:52] <Geth> ¦ roast: regex code. Thus in the context of testing Str split functionality, it

[14:52] <Geth> ¦ roast: doesn't make sense to test both regex styles. The input to split will be

[14:52] <Geth> ¦ roast: exactly the same. As there is a consensus around removing Perl5 regex

[14:52] <Geth> ¦ roast: syntax support, it seems better to remove these superfluous tests.

[14:52] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/4a284ebc7b

[14:52] <nine> 1323

[14:58] <[Coke]> No, pretty sure rakudoc won't render on github. :|

[15:01] <lizmat> but we haz nice rakudoc -> markdown translators

[15:05] <nine> But then, why does it matter? If the release guide is readable as it is, why change? I'd bet there are plenty of ways to improve the whole release process that have more effect than translating the same information from one format to another.

[15:07] <[Coke]> Me asking about something here is not "this is my highest priority"

[15:08] <Geth> ¦ rakudo/main: ffb3741b69 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[15:08] <Geth> ¦ rakudo/main: RakuAST: fix regex signatures missing arity and count

[15:08] <Geth> ¦ rakudo/main: 

[15:08] <Geth> ¦ rakudo/main: Fixes: rx/b/.count

[15:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ffb3741b69

[15:08] <nine> 1324

[15:08] <[Coke]> documenting issues as I notice them.

[15:17] <nine> That's the point: I wouldn't even consider this an issue :)

[15:20] <Geth> ¦ rakudo/main: f46e99409e | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[15:20] <Geth> ¦ rakudo/main: RakuAST: fix arguments missing from metaop hyper calls

[15:20] <Geth> ¦ rakudo/main: 

[15:20] <Geth> ¦ rakudo/main: Fixes: (-> $a { say $a },)>>.(1)

[15:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f46e99409e

[15:20] <nine> 1325

[15:34] <lizmat> looks like https://rakudo.org/community/ is pretty outdated

[15:41] <lizmat> only 25 to go!

[15:53] <Geth> ¦ rakudo/main: 5c35f2129e | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[15:53] <Geth> ¦ rakudo/main: RakuAST: support adverbing of list infixes

[15:53] <Geth> ¦ rakudo/main: 

[15:53] <Geth> ¦ rakudo/main: Fixes: sub infix:<&>($a, $b, :$adverb){ }; 1 & 2 :adverb

[15:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5c35f2129e

[15:53] <nine> 1326

[15:54] *** codesections left
[16:14] <nine> lizmat: AFAIK the failing RakuDoc tests are because of macros

[17:03] <[Coke]> ugexe: how can I use zef to list modules installed in, say, my $CLONE/install/share/perl6/site ? (Looks like I can use --to="#inst"... when installing, but what about listing?)

[17:05] <[Coke]> the Ake release scripts are not installing inline-perl5 to a specific inst, but instead are relying on the right perl6 (yes) and zef being first in path, which I'm not 100% certain is working.

[17:08] *** finanalyst joined
[17:21] <Geth> ¦ rakudo/coke/releng1: 267603b867 | (Will Coleda)++ | tools/releasable/Akefile

[17:21] <Geth> ¦ rakudo/coke/releng1: Fix -I path, use META6.json

[17:21] <Geth> ¦ rakudo/coke/releng1: review: https://github.com/rakudo/rakudo/commit/267603b867

[17:34] <ugexe> [Coke]: zef list --installed site

[17:37] <ugexe> you can do `zef list --installed` to see what each individual local repo has

[17:37] <[Coke]> ok, so that has to be the zef in that install, yes?

[17:37] <[Coke]> I can't use system zef to poke around in a local rakudo clone's install dir.

[17:39] <ugexe> you don't have to have zef installed to use it

[17:40] <ugexe> m: say $*REPO.resolve(CompUnit::DependencySpecification.new(:short-name<Test>)).repo

[17:40] <camelia> rakudo-moar 5c35f2129: OUTPUT: «inst#/home/camelia/rakudo-m-inst-2/share/perl6/core␤»

[17:40] <ugexe> you could s/Test/Inline::Perl5/ though if you want a 1 liner to find where something is resolving (and thus installed) to

[17:42] <[Coke]> this ake task is installing zef... but it looks like it's not even installing zef to the ./install dir, so no surprise inline-perl5 isn't there. I'll try hardcoding the -to= here rather than trying to rely on paths.

[17:42] <ugexe> if you want to install to site make sure you use -to=site and not -to=inst#/path/to/site

[17:43] <ugexe> they both work, but the former doesn't need to double precompile since its referencing the repo by name

[17:43] <[Coke]> (ugh, have 3 rakudo checkouts here. zef *is* getting installed to the ./install dir)

[17:46] <[Coke]> Thanks for the pointers.

[17:53] <[Coke]> (something screwy here; it says all candidates are installed when I try to install Inline::Perl5, but then that doesn't up in the list --installed from the installed zef.

[17:54] <ugexe> show me the commands and the output for both of those steps

[17:56] <[Coke]> it's in ake, trying to reduce it to shell and getting it working then convert it back.

[17:56] <ugexe> ake is probably adding some paths to e.g. RAKULIB

[17:56] <ugexe> and Inline::Perl5 is installed to one of those

[17:57] <ugexe> when you run zef outside of ake it presumably does not have e.g. RAKULIB set the same

[17:57] <ugexe> so it does not list anything installed in those paths

[18:00] <[Coke]> https://gist.github.com/coke/1450cc7d1f9e10e90fdbbefdf42208fe is the custom env passed to the run() commands.

[18:01] <[Coke]> I don't see anything suspicious there, and do see the updated PATH entries so we are running the just-built-and-installed perl6/zef

[18:01] <[Coke]> (no RAKULIB)

[18:06] <ugexe> hmm im not following entirely, but that kind of suggests it is not the same version of zef. i think what we want to know is 1) what is the full path of zef being invoke in ake to install Inline::Perl5, the arguments passed to zef to install Inline::Perl5, and what the env is at the time of install for Inline::Perl5. And then 2) the same aforementioned steps but for the `zef list --installed`

[18:06] <ugexe> command

[18:06] <ugexe> s/same version of zef/same zef installation/

[18:09] <[Coke]> https://github.com/rakudo/rakudo/blob/main/tools/releasable/Akefile#L494-L500

[18:11] <[Coke]> that env is passed to both install zef and install inline-perl5. if I add a shell('which perl6', :%env) and zef, I get:

[18:12] <[Coke]> /home/azureuser/raku-release/rakudo/tools/releasable/rakudo/install/bin/perl6

[18:12] <[Coke]> /home/azureuser/raku-release/rakudo/tools/releasable/rakudo/install/share/perl6/site/bin/zef

[18:12] <[Coke]> which look right.

[18:14] <ugexe> /home/azureuser/raku-release/rakudo/tools/releasable/rakudo/install/share/perl6/site/bin/zef list --installed

[18:14] <ugexe> does that show Inline::Perl5?

[18:19] *** codesections joined
[18:35] *** codesections1 joined
[18:37] <[Coke]> nope

[18:37] *** codesections left
[18:37] *** codesections1 is now known as codesections

[18:37] <[Coke]> (it does show zef)

[18:42] <[Coke]> oh:

[18:42] <[Coke]> ===> Found via inst#/home/azureuser/raku/share/perl6/site

[18:43] <[Coke]> it's not looking in what I would consider "its own" site

[18:44] *** codesections left
[18:52] *** sena_kun joined
[19:13] *** finanalyst left
[19:16] <ugexe> hmmm what about

[19:16] <ugexe> /home/azureuser/raku-release/rakudo/tools/releasable/rakudo/install/bin/perl6 /home/azureuser/raku-release/rakudo/tools/releasable/rakudo/install/share/perl6/site/bin/zef list --installed

[19:16] <[Coke]> AHA

[19:17] <[Coke]> So the install is actually working (Inline::Perl5 is there)

[19:17] *** rakkable left
[19:17] *** rakkable joined
[19:24] <[Coke]> interesting, the path complained aboutt in the stress test is different:

[19:25] <[Coke]>     zef --install-to=inst#/home/azureuser/raku-release/rakudo/tools/releasable/rakudo/t/../gen/build_rakudo_home/site install Inline::Perl5 --exclude='perl'

[19:25] <[Coke]> is the suggested command.

[19:31] <Geth> ¦ rakudo/main: 6fd413c05f | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[19:31] <Geth> ¦ rakudo/main: Add RakuAST::Node.parent method

[19:31] <Geth> ¦ rakudo/main: 

[19:31] <Geth> ¦ rakudo/main: Inside RakuAST::Node.grep/map/first this will return the parent

[19:31] <Geth> ¦ rakudo/main: object of the invocant.  Takes an optional integer argument to

[19:31] <Geth> ¦ rakudo/main: indicate the number of generations you want to add (default: 0)

[19:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6fd413c05f

[20:53] <Geth> ¦ roast: 0cf20295bc | (Stefan Seifert)++ | integration/rule-in-class-Str.t

[20:53] <Geth> ¦ roast: Avoid using Perl 5 regex syntax when not actually testing Perl 5 regex support

[20:53] <Geth> ¦ roast: 

[20:53] <Geth> ¦ roast: Usage of Perl5 regex syntax in this test was purely incidental. Since

[20:53] <Geth> ¦ roast: there's a consensus to remove the outdated, incomplete and unmaintained

[20:53] <Geth> ¦ roast: Perl 5 regex syntax support, it's best not to use it unless it's

[20:53] <Geth> ¦ roast: specifically required.

[20:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0cf20295bc

[20:53] <nine> 1327

[20:58] <ab5tract> nine: I’m out of the loop. Is the RakuAST backend now bootstrapped?

[20:59] <nine> ab5tract: that's right

[20:59] <ab5tract> Wow! 😮

[21:00] <nine> There's just 23 spectest files still failing. A few are due to advanced generics stuff. The rest is practically all missing compile time checks.

[21:03] <ab5tract> There is indeed an end to this tunnel, and it’s appearing before us now.

[21:04] <ab5tract> Next comes macros and all sorts of other goodness :D

[21:05] <ab5tract> I am grateful for your stalwart efforts nine

[21:05] <nine> :)

[21:05] <[Coke]> 23? I have 1327/1355 on the changelog draft.

[21:06] <nine> [Coke]: I went on lizmat's "only 25 to go" which was 2 spectest files ago

[21:06] <[Coke]> m: say 1355 - 1327

[21:06] <camelia> rakudo-moar 6fd413c05: OUTPUT: «28␤»

[21:07] <[Coke]> I'm just bumping the first number there whenever you say something here.

[21:08] <nine> Files=1350, Tests=119667, 75 wallclock secs (12.79 usr  2.74 sys + 1712.37 cusr 142.92 csys = 1870.82 CPU)

[21:08] <nine> That's a normal spectest run

[21:08] <nine> lizmat moved a bunch of tests for experimental features to rakudo repo today. So that's why the total number went down

[21:08] <nine> Fix tests by removing tests :D

[21:09] <[Coke]> oh, right

[21:09] <[Coke]> releasable6: next

[21:09] <releasable6> [Coke], Next release in ≈23 days and ≈21 hours. There are no known blockers. 55 out of 56 commits logged

[21:09] <releasable6> [Coke], Details: https://gist.github.com/cb2f9340cd74ea5a337605678392f996

[21:09] <[Coke]> updated ^^

[21:11] <nine> Now this is odd....with RAKUDO_RAKUAST=1 I get:

[21:11] <nine> Files=1352, Tests=119180, 81 wallclock secs (13.24 usr  2.81 sys + 1925.67 cusr 163.75 csys = 2105.47 CPU)

[21:11] <nine> 2 more spectest files with RakuAST?

[21:23] <Geth> ¦ rakudo/main: 870239b4a2 | (Stefan Seifert)++ | src/Raku/ast/traits.rakumod

[21:23] <Geth> ¦ rakudo/main: RakuAST: report warnings emitted during trait application as worries

[21:23] <Geth> ¦ rakudo/main: 

[21:23] <Geth> ¦ rakudo/main: This makes us report the proper location in the code rather than some

[21:23] <Geth> ¦ rakudo/main: internal function.

[21:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/870239b4a2

[21:27] *** codesections joined
[21:36] <Geth> ¦ rakudo/main: 06a7b5daf5 | (Stefan Seifert)++ | src/Raku/ast/term.rakumod

[21:36] <Geth> ¦ rakudo/main: RakuAST: report no such symbol for unknown terms

[21:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/06a7b5daf5

[21:37] <nine> 1328

[21:50] *** codesections1 joined
[21:51] *** codesections left
[21:51] *** codesections1 is now known as codesections

[22:00] *** codesections left
[23:05] *** sena_kun left
[23:13] *** codesections joined
[23:19] *** sena_kun joined
[23:20] *** codesections1 joined
[23:22] *** codesections left
[23:22] *** codesections1 is now known as codesections

[23:23] *** sena_kun left
[23:38] *** MasterDuke joined
[23:42] <MasterDuke> nine: doh, yes, i had forgotten to add a `method var-dec` to Actions. however, doing so with a body of `self.simple-variable($/);` doesn't change anything. i see it creating something that looks reasonable in `simple-variable()`, but i still get the `Variable '$kinds' is not declared...` error

[23:42] <tellable6> 2025-03-26T07:48:35Z #raku-dev <nine> MasterDuke: stupid question, but does this patch come with accompanying changes in the actions?

[23:47] *** MasterDuke left
[23:58] *** codesections left
