[00:41] *** MasterDuke joined
[00:44] <MasterDuke> i'm back to looking at why `my $23kinds` doesn't throw `X::Syntax::Variable::Numeric` in RakuAST. it looks like it's somehow getting through EXPR (which is re-implemented in RakuAST instead of using the method from NQP like the legacy frontend does), without detecting that there's a variable declaration

[00:46] <MasterDuke> so that gets it through `<statement>` and then `<statementlist>`, but doesn't get through `<.eat-terminator>` and dies with `two terms in a row`

[00:46] <MasterDuke> but i'm really not sure how to debug further

[01:32] *** MasterDuke left
[04:26] <Geth> ¦ rakudo: zhuomingliang++ created pull request #5824: A bunch of Undeclared Attribute check fixes.

[04:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5824

[04:56] *** JimmyZhuo joined
[05:41] *** JimmyZhuo left
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:59] *** vrurg joined
[08:00] *** vrurg_ left
[08:34] <nine> We cannot really merge the bootstrap branch because there's one commit in there that busts the old frontend.

[08:35] <nine> The other reason I haven't merged it yet is that I want to see whether any of the remaining fixes will make some workaround obsolete

[08:46] <Geth> ¦ rakudo/main: 7c62a5ad99 | (Jimmy Zhuo)++ | 2 files

[08:46] <Geth> ¦ rakudo/main: A bunch of Undeclared Attribute check fixes.

[08:46] <Geth> ¦ rakudo/main: 

[08:46] <Geth> ¦ rakudo/main: This fixed some regression in t/spec/S12-attributes/class.t, and passed t/spec/S12-attributes/undeclared.t

[08:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7c62a5ad99

[08:46] <Geth> ¦ rakudo/main: a630609d53 | niner++ (committed using GitHub Web editor) | 2 files

[08:46] <Geth> ¦ rakudo/main: Merge pull request #5824 from zhuomingliang/UndeclaredAttribute

[08:46] <Geth> ¦ rakudo/main: 

[08:46] <Geth> ¦ rakudo/main: A bunch of Undeclared Attribute check fixes.

[08:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a630609d53

[08:46] <nine> 1281 courtesy of JimmyZhuo!

[08:56] <[Tux]> Rakudo v2025.02-295-g9fe52a1d5 (v6.d) on MoarVM 2025.02-14-g3ecde0a0f

[08:56] <[Tux]> csv-test-xs-20      0.136 -  0.139

[08:56] <[Tux]> csv-ip5xs           0.258 -  0.263

[08:56] <[Tux]> test-t --race       0.269 -  0.269

[08:56] <[Tux]> test-t              0.413 -  0.418

[08:56] <[Tux]> csv-parser          1.111 -  1.137

[08:56] <[Tux]> csv-ip5xs-20        1.124 -  1.231

[08:56] <[Tux]> test-t-20 --race    1.240 -  1.265

[08:56] <[Tux]> test                1.834 -  1.836

[08:56] <[Tux]> test-t-20           5.044 -  5.054

[08:56] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[09:13] *** finanalyst joined
[09:56] <Geth> ¦ rakudo/main: 22 commits pushed by (Stefan Seifert)++

[09:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/a630609d5353...2856fc81cf4d

[09:56] <nine> This is the risk-free part of the bootstrap-rakuast branch, i.e. the part that only touches RakuAST classes and should therefore be 0 risk for the release.

[09:57] <nine> Only exception is one commit that adds code to src/Perl6/bootstrap.c/BOOTSTRAP.nqp. But that does not modify any existing code and instead just adds a new bootstrapped class that's used by the RakuAST frontend. Again, should be 0 risk.

[09:58] <nine> With this merged, we should have far less conflicts when rebasing that branch as all of the AT-POS removal is in

[09:59] <lizmat> nine: regarding the categorize / classify breakage in RakuAST: I will fix that after the release

[10:00] <lizmat> as it will subtly change the object hashes created by classify and categorize

[10:00] <lizmat> and I don't want to do that without a blin run

[10:06] <nine> Makes sense. It's only a few more days anyway.

[10:09] <lizmat> coming back on how to handle POPULATE without BUILDPLAN

[10:10] <lizmat> nine: in your opinion, the POPULATE creation logic should be based on the meta-object, aka the actual class object

[10:11] <lizmat> did I get that right ?

[10:12] *** sena_kun joined
[10:13] <lizmat> come to think of it: this actually poses a bigger question: how should one create classes programmatically?   Through the MOP, or through building RakuAST trees and calling .EVAL on it?

[10:14] <nine> Not sure.

[10:14] <nine> MOP is completely fine for creating classes. After all that's what the compiler itself does

[10:14] <lizmat> could / should we consider the MOP an implementation-detail in the future

[10:15] <nine> no

[10:15] <lizmat> so we'd have 2 ways of programmatically creating classes: one with RakuAST, and one with the MOP

[10:18] <nine> Very rakuish

[10:19] <nine> Though they are really complementing each other. It's just different layers

[10:21] <lizmat> we've been playing with the idea to directly generate MAST from RakuAST at some point: would that still go through the MOP?

[10:22] <lizmat> if not, then we'd have 2 ways of generating MAST, which would be bad?

[10:23] <nine> The MOP has nothing to do with MAST

[10:23] <lizmat> old situation:

[10:24] <lizmat> grammar -> MOP -> QAST -> MAST

[10:24] <lizmat> new situation:

[10:24] <lizmat> grammar -> RakuAST -> MOP -> QAST -> MAST

[10:24] <lizmat> of RakuAST would create MAST itself, then it would bypass the MOP -> QAST parts, no?

[10:25] <lizmat> maybe we should have this discussion IRL in June  :-)

[10:28] <Geth> ¦ rakudo/bootstrap-rakuast: 14 commits pushed by (Stefan Seifert)++

[10:28] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/000f03a9cbce...f8c94e098467

[10:29] <nine> Good news! The workarounds that I was most worried about are no longer needed. All the bizarre errors went away, probably with the sink calculation fixes

[10:29] <nine> MOP has nothing at all to do with QAST. Nothing.

[10:29] <nine> QAST leads to executable code. MOP is used for creating objects.

[10:30] <lizmat> I guess I wasn't fully awake yet: only one mention of QAST in the metamodel

[10:31] <lizmat> TIL (again probably :-)

[10:33] <nine> The thing that makes me really wonder is that the bootstrap branch passes 2 spectest files that main doesn't. No idea which of the workarounds left in that branch is so beneficial though

[10:34] <lizmat> apart from the classify / categorize, right ?

[10:34] <nine> Yes, those fail on both branches

[10:35] <nine> t/spec/6.c/S32-io/file-tests.t and t/spec/S06-other/misc.t

[10:35] <lizmat> ack

[10:35] <nine> Oooh... t/spec/S06-other/misc.t is the one with X::Undeclared::Symbols

[10:37] <nine> And t/spec/6.c/S32-io/file-tests.t failed because it's horribly written and scatters files/symlinks in the build directory and in /tmp and then stumbles over them when they already exist

[10:38] <nine> I've had 10k perl6_roast* files in /tmp

[10:43] <nine> So we're at 1283 now non-bootstrapped

[10:58] *** librasteve_ joined
[11:00] <Geth> ¦ rakudo/main: 0730199b32 | (Elizabeth Mattijsen)++ | src/core.c/Numeric.rakumod

[11:00] <Geth> ¦ rakudo/main: Add missing .Numeric to infix %

[11:00] <Geth> ¦ rakudo/main: 

[11:00] <Geth> ¦ rakudo/main: Spotted in #5823

[11:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0730199b32

[11:01] <lizmat> afk for a bit&

[11:09] *** finanalyst left
[11:12] *** JimmyZhuo joined
[11:15] <nine> m: sub foo { dd @_; if rand <= 1 { dd @_ } }(1, 2)

[11:15] <camelia> rakudo-moar 0730199b3: OUTPUT: «[1, 2]␤[Bool::True]␤»

[11:15] <nine> m: sub foo(*@_) { dd @_; if rand <= 1 { dd @_ } }(1, 2)

[11:15] <camelia> rakudo-moar 0730199b3: OUTPUT: «[1, 2]␤[1, 2]␤»

[11:15] <nine> The totally inconsistent language of a 1000 rules

[11:17] <nine> [Coke]: since you asked about this. @_ is one of the things I'd kill off completely.

[11:25] <lizmat> yeah, implicit @_ is a perlism

[11:31] <nine> https://github.com/Raku/old-issue-tracker/issues/1488 is such a great case of ad-hoc language design gone wrong. Someone comes across something unexpected, there's no discussion and when an incidental change makes the problem disappear this behavior is enshrined in a spec test.

[11:31] <nine> Thing is the previous unexpected behavior is arguably totally correct!

[11:32] <nine> The block in if True { } is a real block, not just a syntactic grouping. That's how it's advertised as "strangely consistent" and why you can give it a signature with if True -> $true { }

[11:33] <nine> @_ is a magical auto-declaring variable that contains the surrounding block's positional arguments. Since the if statement's block is such a block, that's what it should be declared on.

[11:34] <nine> m: sub foo { dd @_; if True -> $true { dd @_ } }(1, 2)

[11:34] <camelia> rakudo-moar 0730199b3: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Placeholder variable '@_' cannot override existing signature␤at <tmp>:1␤------> sub foo { dd @_; if True <HERE>-> $true { dd @_ } }(1, 2)␤»

[11:34] <nine> After all it does complain about that if block having a signature in this example

[11:36] <lizmat> he

[11:37] <lizmat> m: my uint @a = 14256035878013490812; use nqp;  dd nqp::atpos_u(@a,0)   # this feels buggy

[11:37] <camelia> rakudo-moar 0730199b3: OUTPUT: «-4190708195696060804␤»

[11:37] <nine> m: sub foo { dd @_; if True { dd @_ } }(1, 2)

[11:37] <camelia> rakudo-moar 0730199b3: OUTPUT: «[1, 2]␤[Bool::True]␤»

[11:37] <nine> But wrap it in another sub:

[11:37] <nine> m: sub bar(*@_) { sub foo { dd @_; if True { dd @_ } }(1, 2) }()

[11:37] <camelia> rakudo-moar 0730199b3: OUTPUT: «Too many positionals passed; expected 0 arguments but got 2␤  in sub foo at <tmp> line 1␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:41] <lizmat> m: my uint @a = 14256035878013490812; use nqp; my uint64 $a = nqp::atpos_u(@a,0); say $a

[11:41] <camelia> rakudo-moar 0730199b3: OUTPUT: «14256035878013490812␤»

[11:43] <lizmat> nine: looks like the auto-coerce of native uints to str is using int logic

[11:46] <nine> Not surprised that there are problems left

[11:47] <nine> I think I'm not gonna try fix that spectest about @_. As demonstrated the expectation there is non-sensical and makes a bad situation only worse.

[11:48] <lizmat> agree, fwiw

[11:49] <nine> If we can gather a bit more feedback from the usual suspects, I'd like to remove that test

[11:49] <timo> yeah, turning the expectation to be explicitly about Routine (or whichever type/role it is that sub and method do) gets us additional special cases in the rules that you've already shown many of

[11:50] <nine> I think all the existing behavior including the incidental pasisng of the test just comes from a check somewhere whether @_ is visible lexically or not with no regards of where it's actually declared.

[11:51] <JimmyZhuo> less special rules make things simpler

[11:56] <Geth> ¦ roast: 0b8c717e66 | (Stefan Seifert)++ | S06-signature/slurpy-params.t

[11:56] <Geth> ¦ roast: Remove dubious test that only incidentally passed anyway

[11:56] <Geth> ¦ roast: 

[11:56] <Geth> ¦ roast: https://github.com/Raku/old-issue-tracker/issues/1488 is such a great show case

[11:56] <Geth> ¦ roast: of ad-hoc language design gone wrong. Someone comes across something unexpected,

[11:56] <Geth> ¦ roast: there's no discussion and when an incidental change makes the problem disappear

[11:56] <Geth> ¦ roast: this behavior is enshrined in a spec test.

[11:56] <Geth> ¦ roast: 

[11:56] <Geth> ¦ roast: <…commit message has 26 more lines…>

[11:56] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0b8c717e66

[11:58] <Geth> ¦ rakudo/main: 01369236da | (Elizabeth Mattijsen)++ | 2 files

[11:58] <Geth> ¦ rakudo/main: Fix Buf/Blob.join/raku for uints

[11:58] <Geth> ¦ rakudo/main: 

[11:58] <Geth> ¦ rakudo/main: Currently there appears to be a deficiency in the automatic coercion

[11:58] <Geth> ¦ rakudo/main: of a native 64bit integer with the most significant bit set, to a

[11:58] <Geth> ¦ rakudo/main: native string.  This is probably because there is no special handling

[11:58] <Geth> ¦ rakudo/main: for that, and so the signed integer handling is used.  Which isn't

[11:58] <Geth> ¦ rakudo/main: a problem if the msb is not set.

[11:58] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[11:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/01369236da

[11:59] <nine> Shouldn't this be fixed in NQP instead?

[12:00] <lizmat> probably, but it would take me multiple hours to figure out where that auto-coercion is happening, and we're close to a release

[12:00] <lizmat> nine: unless you have an idea of where I should look?

[12:02] <nine> I wouldn't let the release stress me. After all we've done just fine for 10 years with this bug.

[12:03] <nine> The whole point of doing frequent regular releases is so that there's a next release soon and people don't rush to get half baked fixes and features in :)

[12:05] <nine> QASTCompilerMAST.coercion is the place to start looking

[12:06] <Geth> ¦ roast: a0eb4b9968 | (Stefan Seifert)++ | S06-signature/slurpy-params.t

[12:06] <Geth> ¦ roast: Update plan after test removal in previous commit

[12:06] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a0eb4b9968

[12:06] <nine> So much for rushing half baked fixes...

[12:08] <lizmat>                elsif $got == nqp::const::MVM_reg_uint64 {

[12:08] <lizmat>                     %core_op_generators{'coerce_us'}($!mast_frame, $res_reg, $reg);

[12:09] <lizmat> looks like it is already in ther

[12:09] <lizmat> e

[12:09] <Geth> ¦ roast: a3710eaf46 | (Stefan Seifert)++ | S06-signature/slurpy-params.t

[12:09] <Geth> ¦ roast: Fix syntax error in test descriptions

[12:09] <Geth> ¦ roast: 

[12:09] <Geth> ¦ roast: Those test descriptions go all the way to include super helpful

[12:09] <Geth> ¦ roast: copy&pasteable code, but then stumble over a superfluous closing bracket

[12:09] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a3710eaf46

[12:11] <nine> lizmat: in that case it's worth having a look at the generated mbc

[12:12] <[Coke]>  here's the result of the blin run https://gist.github.com/coke/a7866fff243d3230aed3632a743e7204 - I will convert this to a ticket later today, but wanted to get it out there asap

[12:12] <[Coke]> is 7c62a5ad99 safe for a last minute merge?

[12:13] <linkable6> (2025-03-20) https://github.com/rakudo/rakudo/commit/7c62a5ad99 A bunch of Undeclared Attribute check fixes.

[12:13] <lizmat> [Coke]: yeah, the problem with that commit, is the message: it's missing the RakuAST: header

[12:14] <lizmat> nine: it probably is

[12:14] <lizmat> but I'll first have a look at the blin run results

[12:14] <[Coke]> Seeing a lot of commits...

[12:15] <patrickb> Given that 1. Raku has a small user base, 2. we have Blin and 3. we don't guarantee compatibility across language versions; I support every endeavour to remove special cases and features in our implementation driven by increasing the consistency and decreasing the complexity in the *implementation* (in contrast to perceived consistency in the language, which is arguably harder to reason 

[12:15] <patrickb> about).

[12:15] <nine> [Coke]: https://irclogs.raku.org/raku-dev/2025-03-20.html#09:56-0002

[12:16] *** finanalyst joined
[12:17] <[Coke]> thanks, did see that. Still a large merge just before release.

[12:17] <[Coke]> (and post blin)

[12:17] <patrickb> I do believe that a simpler implementation will reflect into a language that is easier to reason about once one accepts that it's necessary to partially understand the implementation and it's not just "magic". I.e. no abstraction is perfect.

[12:21] <patrickb> On that note, what would be a good place to collect RakuAST implementation annoyances we might ponder to remove in the next language version? problem-solving? (For now I'd just collect them, deciding what to do could be a next step.)

[12:22] <lizmat> problem solving

[12:29] <JimmyZhuo> 1282 here

[12:29] *** finanalyst left
[12:43] <lizmat> nine: looks like the remaining blin issues are with .assuming and precomp:

[12:43] <lizmat> Serialization Error: missing static code ref for closure 'assumed.' (:1)

[12:44] <lizmat> I assume this may caused by the use of "self" as the subroutine to be called, rather than putting that into a variable?

[12:46] <lizmat> having: sub a($a,$b) { },   and &a.assuming(42)   the generated sub is:

[12:46] <lizmat> sub assumed.a ($b) {

[12:46] <lizmat>     self(42, $b)

[12:46] <lizmat> }

[12:47] <nine> I don't know the internals of assuming, so can't tell

[12:50] <lizmat> ah, found the issue (sort of)

[12:51] <lizmat> the problem occurs when a precompiled module A (with an .assuming) is used in a precompiled module B

[12:53] <lizmat> https://gist.github.com/lizmat/4868dc2a33cc77b4eb2f33e87f54261d

[12:55] <lizmat> ah, been able to golf it

[12:56] <lizmat> updated the gist

[12:56] <lizmat> precomping with: BEGIN my &b = &a.assuming(42);   is the issue apparently

[13:02] <Geth> ¦ rakudo/main: 2e637594c9 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[13:02] <Geth> ¦ rakudo/main: RakuAST: respect "is required" trait on named args

[13:02] <Geth> ¦ rakudo/main: 

[13:02] <Geth> ¦ rakudo/main: Fixes: sub foo(:$n is required, *%_) { }; foo(:x(1)) # to fail

[13:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2e637594c9

[13:02] <nine> 1284

[13:03] <nine> JimmyZhuo: the difference in test counts is due to one local change in t/spec I have which I intend to commit once we switch over

[13:11] <lizmat> nine: perhaps we're missing a nqp::markcodestatic somewhere in the RakuAST.EVAL ?

[13:15] <patrickb> https://github.com/Raku/problem-solving/issues/472 <- I've created a bucket for RakuAST implementation inconsistencies. Feel free to add to that ticket. Maybe I'll find the time to extract IRC rants and put them there.

[13:16] <nine> patrickb: Piping the irc logs into an AI still sounds like a great idea to speed that up :D

[13:17] <nine> lizmat: unlikely. That error usually means that the QAST is missing for that code object

[13:20] <lizmat> nine: updated the gist so that is *not* using .assuming

[13:20] <JimmyZhuo>  I ask deepseek how to improve nqp or rakudo(i.e, give nqp a DFA feature), and it gives me a diff patch which looks good, but can't use at all.

[13:21] <lizmat> nine: the odd thing is that the "say" isn't run either

[13:21] <JimmyZhuo> and someone uses cursor + deepseek ?

[13:22] <lizmat> nine: feels to me some basic issue with RakuAST and precomp

[13:24] <patrickb> antononcube: I'm currently looking for a way to extract nines rants about inconsistencies in the language from the IRC logs. That might be a good job for an AI. Do you maybe want to give it a try? (Given you're our local AI expert.)

[13:24] <lizmat> returning the whole compunit with .EVAL(:compunit) doesn't work either

[13:25] <nine> lizmat: let me ask it from the other direction: what work has been done to ensure that BEGIN EVALed ASTs actually work with precomp?

[13:26] <lizmat> I would not know the answer to that, but figured that setting compilation is precomp, and so some work has been done in that direction?

[13:26] *** JimmyZhuo left
[13:27] <lizmat> I mean, the new sprintf logic in 6.e is basically a precomped module?  and that works?

[13:27] <lizmat> o

[13:31] <nine> nine@sphinx:~/rakudo.main (main *=)> echo 'use v6.e.PREVIEW; BEGIN zprintf "%s", "foo"' > lib/Foo.rakumod 

[13:31] <nine> nine@sphinx:~/rakudo.main (main *=)> rakudo -Ilib -e 'use Foo;'

[13:31] <nine> ===SORRY!=== Error while compiling -e

[13:31] <nine> ===SORRY!===

[13:31] <nine> chars requires a concrete string, but got null

[13:32] * lizmat makes a mental note

[13:32] <lizmat> nine: looking at ast/code/IMPL-STUB-CODE

[13:33] <lizmat> it does not get run in the .EVAL case, should it not ?

[13:33] <nine> It should be run as a BEGIN time effect

[13:34] *** vrurg_ joined
[13:34] <lizmat> it's not with the code in my gist

[13:34] <lizmat> at least, not before the error is thrown

[13:36] *** vrurg left
[13:38] <timo> > Serialization Error: missing static code ref for closure '<unit>' (:1)

[13:38] <timo> that recent moarvm patch improves this exact error message

[13:38] <lizmat> so this is the improved, or should something be merged and bumped ?

[13:39] <nine> I was using an old rakudo

[13:39] <nine> nine@sphinx:~/rakudo.main (main *=)> ./rakudo-m -Ilib -e 'use Foo;'

[13:39] <nine> ===SORRY!=== Error while compiling -e

[13:39] <nine> ===SORRY!===

[13:39] <nine> Serialization Error: missing static code ref for closure '<unit>' (:1)

[13:40] <timo> yeah

[13:41] <lizmat> I'm afraid this is getting above my current level of understanding the nitty gritty bytecode stuff

[13:42] <timo> i assume that just means we didn't add the code object in the right list so that it gets compiled into the same file

[13:42] <timo> but i don't really know

[13:42] <nine> timo's on the right track

[13:42] <lizmat> World has something like:

[13:43] <lizmat>         my $code_ref_idx := self.add_root_code_ref($stub, $code_past);

[13:43] <lizmat>         self.context().sub_id_to_sc_idx(){$cuid} := $code_ref_idx;

[13:43] <lizmat> in finish_code_object

[13:48] <timo> /* Given a closure, locate the static code reference it was originally cloned

[13:48] <timo>  * from. */

[13:49] <nine> And static code is ~~ the QAST that we generated

[13:49] <timo> the code below that looks if there's a static_code, and if yes if that object has a SC assigned to it

[13:49] <lizmat> i've further golfed the gist https://gist.github.com/lizmat/4868dc2a33cc77b4eb2f33e87f54261d

[13:50] <timo> and if the static_code is null, or if the static_code has no SC, and if "fatal" isn't false (which i guess is used to turn this into a check instead of automatic explosion) it will give that serialization error

[13:50] <timo> we don't give a different error message for whether static_code is null or if the static_code has no sc

[13:51] <timo> i would naively expect it to be the second case, though

[13:51] <timo> not sure if we can have a closure that doesn't have a static_code at all

[13:59] <lizmat> afk for a few hours&

[13:59] <[Coke]> moved from gist to ticket for blin: 

[13:59] <[Coke]> https://github.com/rakudo/rakudo/issues/5825

[14:00] <[Coke]> if someone could copy over liz's comments from the gist at https://gist.github.com/coke/a7866fff243d3230aed3632a743e7204, I'd apprciate it (have to jump back on calls)

[14:06] <[Coke]> (nevermind, copied them over) - @lizmat, please continue with comments on the ticket, thanks!

[14:39] <nine> 1285

[14:51] <nine> Geth down?

[14:52] *** liztormato joined
[14:53] <liztormato> Geth: help

[14:53] <liztormato> Geth: help

[14:54] <timo> Geth: help

[14:54] <Geth> timo, Source at https://github.com/Raku/geth To add repo, add an 'application/json' webhook on GitHub pointing it to https://webhooks.liz.nl/?chan=%23raku and choose 'Send me everything' for events to send | use `ver URL to commit` to fetch version bump changes

[14:54] <timo> liztormato: can't get help from geth when your messages are grey

[14:55] <liztormato> Strange.  Maybe Girhub is not delivering push

[14:56] <liztormato> Messages   Am afk at the moment. Won’t be able to check for at least an hour

[14:57] *** liztormato left
[15:22] *** codesections joined
[15:23] *** codesections left
[15:23] *** codesections joined
[15:50] *** sena_kun left
[15:53] *** sena_kun joined
[16:29] <nine> 1286

[16:42] <nine> I have looked through most of the remaining spec tests and found nothing that scared me.

[16:43] <nine> I did notice that there are several test files where it's just that X::Undeclared vs. X::Undeclared::Symbols problem. I.e. the test expects the compiler to complain about a certain symbol and only that whereas the RakuAST frontend will report that and other unknown symbols in an exception that cover all of them.

[16:46] <lizmat> that feels to me the specttest is too specific and should be made more general ?

[16:46] *** Geth left
[16:46] *** Geth joined
[16:47] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++

[16:47] <Geth> ¦ rakudo/main: bc37a2a9a3 | RakuAST: fix IMPL-UNWRAP-LIST on half reified lazy lists

[16:47] <Geth> ¦ rakudo/main: 34fc932e6e | RakuAST: fix enums made from Seq or other listy sources

[16:47] <Geth> ¦ rakudo/main: a213ee7282 | RakuAST: deal properly with name conflicts of enum values

[16:47] <Geth> ¦ rakudo/main: cbc4af86f2 | RakuAST: keep the position of enum values

[16:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/2e637594c931...cbc4af86f29e

[16:48] <Geth> ¦ rakudo/bootstrap-rakuast: 15 commits pushed by (Stefan Seifert)++

[16:48] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/f8c94e098467...caf22fd70bc2

[16:48] <Geth> ¦ rakudo/main: 5386a7a25b | (Stefan Seifert)++ | 2 files

[16:48] <Geth> ¦ rakudo/main: RakuAST: support EXPORTHOW

[16:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5386a7a25b

[16:50] <lizmat> nine; I think those

[16:50] <lizmat> nine: I think those where the ones you missed

[16:51] <nine> indeed

[16:53] *** codesections left
[16:53] <Geth> ¦ rakudo/main: 6e9504e3bc | (Stefan Seifert)++ | src/Raku/ast/resolver.rakumod

[16:53] <Geth> ¦ rakudo/main: RakuAST: throw an X::Undeclared if there's only one undeclared symbol

[16:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6e9504e3bc

[16:53] <nine> 1288!

[16:54] <lizmat> nice!

[16:54] <nine> I think this may actually be the appropriate fix. At least it fixes all 3 cases where I know that this was the only problem.

[16:54] <nine> Also lets me get rid of that local patch to t/spec

[18:26] <lizmat> getting back to the .assuming / precomp issue

[18:28] <lizmat> nine: does RakuAST have something akin to CompilationContext ?

[19:53] *** codesections joined
[20:28] *** [Coke] left
[20:31] *** codesections left
[20:31] *** codesections joined
[20:36] *** [Coke] joined
[20:48] *** librasteve_ left
[21:06] *** codesections left
[21:06] *** codesections joined
[21:12] *** finanalyst joined
[21:27] <nine> Yes, that RakuAST::IMPL::QASTContext that we pass around

[21:30] *** finanalyst left
[21:46] <Geth> ¦ rakudo/main: 0e1c64761e | (Stefan Seifert)++ | src/Raku/ast/resolver.rakumod

[21:46] <Geth> ¦ rakudo/main: RakuAST: fix copy pasta in resolver

[21:46] <Geth> ¦ rakudo/main: 

[21:46] <Geth> ¦ rakudo/main: Thanks to MasterDuke++ for catching this

[21:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0e1c64761e

[22:52] *** codesections left
[23:22] *** sena_kun left
