[00:55] *** gfldex left
[00:57] *** gfldex joined
[00:58] *** japhb left
[01:00] *** japhb joined
[01:06] *** japhb left
[01:06] *** gfldex left
[01:06] *** japhb joined
[01:06] *** gfldex joined
[01:13] *** japhb left
[01:14] *** japhb joined
[01:31] *** japhb left
[01:33] *** japhb joined
[02:04] *** guifa left
[02:18] *** guifa joined
[03:01] *** guifa left
[05:28] <ab5tract> I'm once again a bit confused about the expectations of resources WRT distributions

[05:29] <ab5tract> if it's not cool to determine a path for these resources,  I would expect that the anticipation is that resources would be written to temporary paths at every runtime

[05:29] <ab5tract> the behavior of OpenSSL seems like a security risk to me

[05:30] <ab5tract> as well as muddying the waters as to why we can't just access it at the path its installed to instead of installing into a semi-permanent path anyway

[07:10] <nine> The one thing you absolutely must not assume is that the path you get at compilation time of your model will be the same as the path you'd get at runtime

[07:14] *** sjm_ joined
[07:22] *** [Tux] left
[07:28] *** [Tux] joined
[07:47] *** sjm_ left
[07:47] *** sjm_ joined
[07:52] *** sjm_ left
[07:53] *** sjm_ joined
[11:25] <ab5tract> right, that's a beg no-go. Maybe we could make a trait that can mark routines and methods as runtime only, and then .absolute in the wrong phase will produce a failure or die?

[11:25] *** guifa joined
[11:47] <ab5tract> Actually a sorry would be more appropriate

[11:59] <timo> well, it'd be okay to access and use the path at compile time, it's just not okay to try to persist the path until run time and try to access it again

[12:26] <patrickb> May I point a few eyes towards https://github.com/rakudo/rakudo/pull/5725 ? I believe it's ready to be merged.

[12:57] <ugexe> ab5tract can you explain the security risk or is it just a feeling? The file is put into the users home directory so there should be no issue

[12:58] *** guifa left
[13:01] <ugexe> The whole sorry thing also ignores that it might not even be a file based resource 

[13:02] <ugexe> If something else is needed it needs to be designed and go through the whole problem solving rigmarole. It is not a simple problem with a simple answer and almost certain requires new api 

[13:22] *** sjm_ left
[13:22] *** sjm_ joined
[13:25] *** sjm_ left
[13:25] *** sjm_ joined
[13:54] <ab5tract> I would argue that it’s this resource-is-not-a-file (which feels very theoretical to me, do you have an example?) is what should have gotten the new API

[13:58] <ab5tract> How does one specify a non-file resource at this moment?

[13:59] <ab5tract> I’d have to look into how Windows handles access to temp files from other processes. If there is no protection, then using deterministic file paths would allow for other processes running under the user account to replace the OpenSSL DLL file with a nefarious one

[13:59] <ab5tract> nine linked to the category of exploit yesterday

[14:07] <ugexe> CompUnit::Repository::* such as Tar or Github

[14:07] <ugexe> in the case of tar there is an actual file, but the resource/modules/etc come from inside the tar file

[14:07] <timo> did anyone try something like FatPacker yet?

[14:08] <ugexe> with Github they get loaded by a socket or some such

[14:08] <ugexe> ab5tract: nine linked to something that boiled down to using /tmp, which you pointed out isnt happening with openssl

[14:08] <ugexe> on windows

[14:10] <ugexe> if a malicious user can access files under a users home directory somewhere (which is apparently where $*TMPDIR is on windows by default) then even if we installed openssl dlls with the other raku files it would still be replaceable by said malicious user

[14:10] <ugexe> hence why the issue there boils down to using /tmp

[14:11] <ugexe> which is not necessarily the same thing as a "temporary directory"

[14:11] <timo> there's also fun things like putting a symbolic link in the place before the process writes its thing to cause other files to be overwritten

[14:11] <ugexe> does windows do symbolic links?  for this specific openssl case we have the benefit of being restricted to windows

[14:11] <timo> the raku file may be write-protected when stuff in $*TMPDIR wouldn't be

[14:11] <timo> there are ntfs "junctions" which i hear is similar

[14:12] <timo> but i never actually tried them myself

[14:12] <ugexe> we can write protect a file we put in tmpdir as well

[14:12] <timo> yes but with the caveat you mentioned before that if the "attacker process" has the same rights as our raku process it could just un-writeprotect it immediately?

[14:13] <timo> the big issue with the /tmp is that /tmp is shared by all users, though with systemd it's trivial to give individual processes or groups of processes their very own private /tmp

[14:13] <ugexe> again, not /tmp

[14:13] <timo> yeah

[14:14] <timo> i was mentioning it kind of as a contrast to the windows situation

[14:14] <ab5tract> Windows is pretty broken at the user access control level

[14:16] <ab5tract> But yeah, I guess if it can access the temp files it can access the installed one

[14:17] <ugexe> does windows come with a package manager by default yet that could be invoked to install openssl at build time in Build.rakumod?

[14:17] <timo> if raku is installed to Program Files it has special protections and privileges

[14:18] <timo> not aware of an installed-by-default thing apart from the MSI stuff which is not exactly that

[14:18] <timo> i'm sure a dev with some actual deep windows knowledge could do some great things

[14:18] <ugexe> winget?

[14:19] <ugexe> i forget if it is turned on by default now or if some toggle needs to be switched

[14:19] <timo> wowser

[14:20] <ugexe> regardless, the pattern of installing an external library somewhere outside of the raku source files invoking the installation is not exactly uncommon

[14:20] <ugexe> which is quite similar to what openssl does, although far more naive

[15:09] <timo> nine: it looks like we will revert to not packaging precomped files in raku modules on debian just for now. not great, but it does at least prevent breakage, and we get to fix things after making sure that the packages at least don't get dropped from debian

[15:19] <[Tux]> Rakudo v2025.04-8-ge5c74d0ac (v6.d) on MoarVM 2025.04-5-gc99d245d5

[15:19] <[Tux]> csv-test-xs-20      0.114 -  0.118

[15:19] <[Tux]> csv-ip5xs           0.259 -  0.263

[15:19] <[Tux]> test-t --race       0.271 -  0.277

[15:19] <[Tux]> test-t              0.413 -  0.422

[15:19] <[Tux]> csv-ip5xs-20        1.071 -  1.081

[15:19] <[Tux]> csv-parser          1.117 -  1.120

[15:19] <[Tux]> test-t-20 --race    1.239 -  1.279

[15:19] <[Tux]> test                1.830 -  1.842

[15:19] <[Tux]> test-t-20           4.942 -  5.136

[15:19] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[15:58] <nine> ugexe: the $*TMPDIR usage was in Resource::Wrangler, not OpenSSL

[15:59] <nine> timo: what's the problem on Debian in the first place?

[16:00] <timo> it's a whole clusterfuck involving me not using my eyes i guess

[16:00] <ugexe> $*TMPDIR is used in OpenSSL as well and probably what Resource::Wrangler was emulating. however, openssl only uses $*TMPDIR on windows (which is fine)

[17:17] *** sjm_ left
[17:17] *** sjm_ joined
[17:22] *** sjm__ joined
[17:22] *** sjm_ left
[17:26] *** sjm_ joined
[17:27] *** sjm__ left
[17:50] *** finanalyst joined
[17:52] <patrickb> timo: rakubrew is using fatpack

[18:03] *** finanalyst left
[19:12] <timo> but that's perl5's fat packer right?

[20:31] *** [Coke] left
[20:59] <patrickb> yes

[22:04] <timo> right, i was wondering particularly if anyone made a fat pack equivalent for raku yet

[22:09] <ugexe> CompUnit::Repository::Tar is sort of along those lines

[22:11] <ugexe> Could probably hack something that takes a script, puts all its source and dependencies into a tar file, save that binary data in the new fat packed generated script, and then feed that data into the C::R::Tar-like thing

[22:12] <ugexe> gonna be slow without precompilation though

[22:27] *** [Coke] joined
[22:52] *** guifa joined
[23:10] *** japhb left
[23:17] *** japhb joined
[23:42] *** japhb left
[23:43] *** japhb joined
