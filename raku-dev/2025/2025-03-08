[00:15] *** librasteve_ left
[00:34] <lizmat> nine: now that I'm done with .assuming for now, I could take the chainsaw and remove all AT-POSses ?

[00:34] <lizmat> I seem to recall I was the one who put them in in the first place ?

[00:42] <japhb> What's the reason for removing them?

[00:48] <lizmat> AT-POS doesn't exist that early in the bootstrap, I think

[00:49] <lizmat> sleep&

[02:01] *** lizmat left
[08:33] <nine> Oh, that "expected Rakudo::Iterator::Empty but got Rakudo::Iterator::Empty" seems to be some confusion between constant Empty which is declared very early and my class Empty in Rakudo::Iterator.

[08:33] <nine> Renaming the latter to EmptyIteratorType also makes us move forward

[09:12] *** finanalyst joined
[09:16] *** Geth joined
[09:52] <nine> lizmat_: thanks, but I'm almost through with it anyway

[10:07] *** lizmat_ left
[10:07] *** lizmat joined
[10:17] *** sena_kun joined
[10:50] <timo> how do we feel about an exception class for reporting an istype that failed with some additional smarts in the message method like "if the things have the same name, figure out why they are actually different"

[10:51] <timo> or is there already an exception for that which we should be using in `multi method are` in Any-Iterable-methods.rakumod?

[10:52] <timo> i guess we do have X::TypeCheck

[10:56] <lizmat> yup, that's the one

[10:57] <timo> not sure it has anything to handle "they have the same name, so wtf" situations

[10:58] <lizmat> it's got $!expected and $!got attributes, that are the types that were checked, afaik

[10:59] <lizmat> so I think it could ?

[10:59] <timo> it could, yeah

[11:00] *** ^Dan joined
[11:05] <Geth> ¦ nqp/main: 990e179bd1 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[11:05] <Geth> ¦ nqp/main: Bump MoarVM to get big slurpies fix, timo++

[11:05] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/990e179bd1

[11:10] *** ^Dan left
[11:23] <Geth> ¦ rakudo/main: 9233a89f91 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[11:23] <Geth> ¦ rakudo/main: Bump NQP to get big slurpies fix, timo++

[11:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9233a89f91

[11:30] <Geth> ¦ rakudo/main: d02733a40b | (Elizabeth Mattijsen)++ | lib/Telemetry.rakumod

[11:30] <Geth> ¦ rakudo/main: Fix snapper's memory reporting on MacOS

[11:30] <Geth> ¦ rakudo/main: 

[11:30] <Geth> ¦ rakudo/main: Earlier versions of libuv didn't correct for MacOS's memory usage

[11:30] <Geth> ¦ rakudo/main: reporting, but newer versions do.  And MoarVM uses that newer

[11:30] <Geth> ¦ rakudo/main: version, so we can remove the special handling in the snapper.

[11:30] <Geth> ¦ rakudo/main: 

[11:30] <Geth> ¦ rakudo/main: Spotted by Timo++

[11:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d02733a40b

[11:37] <Geth> ¦ rakudo/main: f7023342ca | (Elizabeth Mattijsen)++ | lib/Telemetry.rakumod

[11:37] <Geth> ¦ rakudo/main: Show initial memory values with _ between thousands

[11:37] <Geth> ¦ rakudo/main: 

[11:37] <Geth> ¦ rakudo/main: Timo++ for the suggestion

[11:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f7023342ca

[13:27] <Geth> ¦ rakudo/main: 3bbb521ae7 | (Elizabeth Mattijsen)++ | src/core.c/core_epilogue.rakumod

[13:27] <Geth> ¦ rakudo/main: Make sure that sub-signatures with returns work ok

[13:27] <Geth> ¦ rakudo/main: 

[13:27] <Geth> ¦ rakudo/main: The "make-simple-type" sub takes names of types, not types

[13:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3bbb521ae7

[13:31] <Geth> ¦ roast: e98f54674a | (Elizabeth Mattijsen)++ | 4 files

[13:31] <Geth> ¦ roast: Remove all TODOs from tests that now pass

[13:31] <Geth> ¦ roast: 

[13:31] <Geth> ¦ roast: Since https://github.com/rakudo/rakudo/commit/4ee9503bdc

[13:31] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e98f54674a

[15:07] *** CIAvash joined
[15:46] *** finanalyst left
[15:51] <nine> Huh...another super obscure problem: in BEGIN blocks any calls to methods on e.g. an argument Capture object fail. First by dispatching to Any's candidates instead of Capture's and then by leading to a VMNull called there. Here's the twist: they do succeed if I first manually ^find_method them _and_ call that result.

[19:00] *** librasteve_ joined
[19:22] <Geth> ¦ rakudo/main: c9c2ca453d | (Elizabeth Mattijsen)++ | src/core.c/core_epilogue.rakumod

[19:22] <Geth> ¦ rakudo/main: Add support for type-smileys in .assuming

[19:22] <Geth> ¦ rakudo/main: 

[19:22] <Geth> ¦ rakudo/main: Found missing while working on RakuAST::Utils

[19:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c9c2ca453d

[19:27] <nine> lizmat: can't motivate you to look at spectests?

[19:31] <lizmat> you mean because of this latest commit ?

[19:31] <nine> yes :)

[19:32] <nine> Also the notable absence of any spec test fixing commits :)

[19:35] <lizmat> spectest is clean for me?

[19:36] <lizmat> apart from the two tests that you todoed because they only pass if optimization is on ?

[19:37] <nine> I mean with RAKUDO_RAKUAST=1

[19:38] *** CIAvash left
[19:43] <lizmat> running one now

[19:47] <lizmat> well, at least we won t/spec/S06-currying/positional.t ?

[19:51] <lizmat> seems like this is caused by:

[19:51] <lizmat> m: ay Q|:(:$a = True)|.AST.DEPARSE

[19:51] <camelia> rakudo-moar c9c2ca453: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    ay used at line 1␤␤»

[19:51] <lizmat> m: say Q|:(:$a = True)|.AST.DEPARSE

[19:51] <camelia> rakudo-moar c9c2ca453: OUTPUT: «:(:$a = True)␤␤»

[19:51] <lizmat> m: say Q|:(:$a = True)|.AST.EVAL

[19:51] <camelia> rakudo-moar c9c2ca453: OUTPUT: «(:$a = Code.new)␤»

[19:52] <lizmat> what I think is the issue, is that RakuAST just checks for Parameter.default, which *always* returns a Callable

[19:53] <lizmat> nine: ^^

[19:53] <nine> What is caused by that?

[19:54] <lizmat> that the .EVAL returns a Code.new as the default for the named parameter

[19:54] <lizmat> rather than True

[19:54] <lizmat> is what triggers the test failing

[19:55] <nine> Incidentally I just made a local change that made it recognize True/False as compile time constants and thus set them as default_value instead of default closures

[19:56] <lizmat> then that should fix a lot of those tests

[19:57] <lizmat> pretty sure that would fix all in t/spec/S06-currying/named.t

[19:57] <lizmat> will look at the others after the meeting

[20:00] <lizmat> .

[20:21] <lizmat> t/spec/S06-currying/slurpy.rakudo.moar will also be fixed if you handle True/False as default_value

[20:21] <lizmat> so we should be good after that

[20:28] <nine> good in what way?

[20:28] <lizmat> the files should pass again in entirety ?

[20:29] <lizmat> with RAKUDO_RAKUAST=1 ?

[20:29] <nine> Oh, I didn't realize there were assuming related regressions

[20:34] <lizmat> yup  :-)   gotten very familiar with those tests in the past 2 weeks

[20:36] <lizmat> m: sub a(::T $a, Array[T] $b) { dd :$a:$b }; a 42, my Int @ = 666    # something is leaking out

[20:36] <camelia> rakudo-moar c9c2ca453: OUTPUT: «Use of RakuAST is experimental; please 'use experimental :rakuast'␤␤Actually thrown at:␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:38] <lizmat> bisectable6: old=2025.02 sub a(::T $a, Array[T] $b) { dd :$a:$b }; a 42, my Int @ = 666

[20:38] <bisectable6> lizmat, On both starting points (old=2025.02 new=c9c2ca4) the exit code is 1 and the output is identical as well

[20:38] <bisectable6> lizmat, Output on both points: «Use of RakuAST is experimental; please 'use experimental :rakuast'␤␤Actually thrown at:␤  in sub a at /tmp/xcfeQZp9aZ line 1␤  in block <unit> at /tmp/xcfeQZp9aZ line 1␤␤»

[20:38] <lizmat> ah?

[20:38] <lizmat> bisectable6: old=2024.02 sub a(::T $a, Array[T] $b) { dd :$a:$b }; a 42, my Int @ = 666

[20:38] <bisectable6> lizmat, On both starting points (old=2024.02 new=c9c2ca4) the exit code is 1 and the output is identical as well

[20:38] <bisectable6> lizmat, Output on both points: «Use of RakuAST is experimental; please 'use experimental :rakuast'␤␤Actually thrown at:␤  in sub a at /tmp/4l9J0qmfGb line 1␤  in block <unit> at /tmp/4l9J0qmfGb line 1␤␤»

[20:38] <lizmat> heh

[20:39] <lizmat> bisectable6: old=2025.02 sub a(::T $a, T @b) { dd :$a:@b }; a 42, my Int @ = 666

[20:39] <bisectable6> lizmat, Bisecting by exit code (old=2025.02 new=c9c2ca4). Old exit code: 1

[20:39] <bisectable6> lizmat, bisect log: https://gist.github.com/8de69d7f53e41e4377b51d087884c805

[20:39] <bisectable6> lizmat, (2025-03-07) https://github.com/rakudo/rakudo/commit/0bcab7a86f1dcc26a035c2519d22759c112414f0

[20:44] <nine> I actually meant fixing any of the remaining spectests

[20:44] <nine> But of course the regressed ones would be a good start

[20:45] <lizmat> "[20:55:25]  <nine> Incidentally I just made a local change that made it recognize True/False as compile time constants and thus set them as default_value instead of default closures"

[20:46] <lizmat> that should fix those two recently broken by my .assuming work

[20:48] <lizmat> I'm about to break one again: 

[20:48] <lizmat> m: sub foo(::T $a, T @b) { "$a:@b[]" }; say foo(42, my Int @ = 666,137)

[20:48] <camelia> rakudo-moar c9c2ca453: OUTPUT: «42:666 137␤»

[20:48] <lizmat> breaks under RAKUDO_RAKUAST=1

[20:49] <Geth> ¦ rakudo/main: 19fe378097 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[20:49] <Geth> ¦ rakudo/main: RakuAST: recognize True/Default as compile time known for default values

[20:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/19fe378097

[20:49] <nine> Well, it doesn't look like they do

[20:49] <lizmat> ok, /me pulls anc checks

[20:58] <lizmat> t/spec/S06-currying/named.rakudo.moar and t/spec/S06-currying/slurpy.t now pass for me with RAKUDO_RAKUAST=1 ?

[21:01] <nine> Ah, was missing commits from upstream main

[21:03] <lizmat> nine: I'm seeing 146 occurrences of AT-POS in src/Raku/ast

[21:03] <lizmat> want me to fix those to postcircumfixes ?

[21:04] <nine> No, I have fixed them locally already

[21:04] <lizmat> okido

[21:05] <lizmat> I'll take that as a cue to end my hacking for today  :-)

[21:10] <lizmat> m: sub foo(::T $a, T @b) { "$a:@b[]" }; say foo(42, my Int @ = 666,137)

[21:10] <camelia> rakudo-moar c9c2ca453: OUTPUT: «42:666 137␤»

[21:10] <lizmat> nine: re ^^, looks like Raku actions need the equivalent of https://github.com/rakudo/rakudo/pull/5804/files

[21:10] <lizmat> but I haven't been able to trace that down yet

[21:10] <lizmat> afk&

[21:15] <nine> Are you saying that this fix went in with no regard for RakuAST despite the standing RSC decision that everything going into main is to be accompanied by an appropriate RakuAST version?

[21:15] <nine> Color me surprised

[23:46] *** librasteve_ left
