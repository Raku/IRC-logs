[00:14] *** codesections left
[00:46] *** MasterDuke joined
[00:49] <MasterDuke> well, i now have `my $kinds = 4; say $kinds` surviving under RakuAST, and `my $23kinds` throwing the correct exception (X::Syntax::Variable::Numeric). however...it loses 290 other spectests...

[00:54] <MasterDuke> but it does get us t/spec/S15-literals/identifiers.t

[01:02] <MasterDuke> https://gist.github.com/MasterDuke17/0b0d6085c2c3ce5dfcbebfcd0c15fe9d is the current status. this change just loses 16 spectests, but doesn't gain any. if i uncomment the added bit in `token variable`, the loss increases to 292, but it also gains one new one (t/spec/S15-literals/identifiers.t)

[01:48] *** MasterDuke left
[02:28] *** codesections joined
[02:41] *** codesections left
[04:07] *** codesections joined
[04:36] *** codesections1 joined
[04:37] *** codesections left
[04:37] *** codesections1 is now known as codesections

[05:48] *** codesections left
[08:37] <nine> timo: you don't have to play with the MOP do fall for this.

[08:37] <nine> m: my $T := Int; dd array[$T]

[08:37] <camelia> rakudo-moar cfc74a80e: OUTPUT: «"Can only parameterize array with a native type, not Int"␤»

[08:51] *** sena_kun joined
[08:55] *** sena_kun left
[09:20] <Geth> ¦ nqp/main: 755945a5d1 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[09:20] <Geth> ¦ nqp/main: Bump MoarVM to get mimalloc bump, MasterDuke++

[09:20] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/755945a5d1

[09:30] <Geth> ¦ rakudo/main: 29064c7113 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[09:30] <Geth> ¦ rakudo/main: Bump NQP to get MoarVM mimalloc bump, MasterDuke++

[09:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/29064c7113

[09:31] <lizmat> m: array[Int]    # what's wrong with this, nine ?

[09:31] <camelia> rakudo-moar cfc74a80e: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Can only parameterize array with a native type, not Int␤at <tmp>:1␤------> array[Int]<HERE>    # what's wrong with this, nine ?␤»

[09:38] <Geth> ¦ rakudo/main: 6ba184927b | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.rakumod

[09:38] <Geth> ¦ rakudo/main: RakuAST: fix deparse snafu on subsets

[09:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6ba184927b

[09:46] <nine> lizmat: this is wrong with it:

[09:46] <nine> m: my $T := Int; array[$T]

[09:46] <camelia> rakudo-moar cfc74a80e: ( no output )

[09:46] <nine> m: my $T := Int; say array[$T].^name

[09:46] <camelia> rakudo-moar cfc74a80e: OUTPUT: «Str␤»

[09:46] <lizmat> aaahhh

[09:51] <lizmat> appears that 08b449e1ab36ad18c781 was the original reason

[09:51] <linkable6> (2018-07-26) https://github.com/rakudo/rakudo/commit/08b449e1ab Make parameterization errors show where they occur

[09:51] <lizmat> to fix https://github.com/rakudo/rakudo/issues/2032

[09:58] <lizmat> so I guess we need to have some heuristic to determine we're at compile time or not

[10:29] <lizmat> looks like our fudging logic doesn't support .rakutest extensions yet

[10:40] *** rakkable left
[10:40] *** rakkable joined
[10:47] <nine> Why not just throw an exception like in the original code?

[10:49] <nine> It's quite common for us to re-pack such exceptions at a higher level in the call stack

[11:04] <Geth> ¦ rakudo/main: 4b884364dc | (Elizabeth Mattijsen)++ | src/core.c/native_array.rakumod

[11:04] <Geth> ¦ rakudo/main: Make native array parameterization die

[11:04] <Geth> ¦ rakudo/main: 

[11:04] <Geth> ¦ rakudo/main: To prevent it from just returning a string on a failed parameterization

[11:04] <Geth> ¦ rakudo/main: at runtime, spotted by nine++

[11:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4b884364dc

[11:53] <nine> lizmat: the same is in Buf and there's still the workaround code for turning strings into exceptions

[11:55] <lizmat> the workaround code is in World, and I'm not spending time on that

[11:55] <lizmat> will fix the Buf case

[12:09] * lizmat is apparently not awake yet, because can't find the Buf case ?

[13:02] *** sena_kun joined
[13:12] *** finanalyst left
[13:25] * [Coke] wonders if whateverable has a million old gists lying about.

[14:54] <Geth> ¦ rakudo/main: a22d6740d4 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[14:54] <Geth> ¦ rakudo/main: Remove parameterization returning Str workaround code

[14:54] <Geth> ¦ rakudo/main: 

[14:54] <Geth> ¦ rakudo/main: By popular request

[14:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a22d6740d4

[18:44] <Geth> ¦ rakudo/main: bf4646e065 | (Stefan Seifert)++ | 3 files

[18:44] <Geth> ¦ rakudo/main: RakuAST: report failure to parameterize types at BEGIN time

[18:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bf4646e065

[18:44] <Geth> ¦ rakudo/main: ef387e8600 | (Stefan Seifert)++ | src/Raku/ast/type.rakumod

[18:44] <Geth> ¦ rakudo/main: RakuAST: report trying to parameterize non-parametric type

[18:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ef387e8600

[18:52] *** finanalyst joined
[19:01] *** MasterDuke joined
[19:04] <MasterDuke> patrickb: i saw https://github.com/soloterm/screen recently and thought there might be something useful there for your terminal work

[19:06] <MasterDuke> so if i change `$*IN_DECL` into the correct `$*IN-DECL` in my patch, then i lose 16 spectests but gain one

[19:06] <Geth> ¦ rakudo/main: ce32eb4157 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[19:06] <Geth> ¦ rakudo/main: RakuAST: throw typed exception on failure to adverb

[19:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ce32eb4157

[19:06] <Geth> ¦ rakudo/main: 716449d64c | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[19:06] <Geth> ¦ rakudo/main: RakuAST: throw somewhat more helpful error on infix:(&)

[19:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/716449d64c

[19:07] * nine is still working on t/spec/S32-exceptions/misc.t

[19:08] <MasterDuke> the one that i gain is t/spec/S15-literals/identifiers.t

[19:17] <Xliff_> nine: To answer your last question: 1,240,000. And I am allowed to find things daunting if its in a different domain! :D

[19:19] <MasterDuke> some of the spectests i lose are surprising. in t/spec/S32-hash/perl.t, expected: '(my Int %{Str} = :a(1), :b(2))', got: '(my Int % = :a(1), :b(2))'

[19:19] <MasterDuke> so missing a parameterization

[19:20] <MasterDuke> but then later in the same file. expected: '$(my Any %)', got: '$(my Any %{Any})'

[19:20] <MasterDuke> now adding a parameterization

[19:20] <MasterDuke> anyway, afk for a bit

[19:24] <nine> Xliff_: holy cow!

[19:24] *** MasterDuke left
[19:31] <Geth> ¦ rakudo/main: 48c6805100 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[19:31] <Geth> ¦ rakudo/main: RakuAST: report redeclaration of our-scoped routines

[19:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/48c6805100

[19:31] <Geth> ¦ rakudo/main: 5a45937c44 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[19:31] <Geth> ¦ rakudo/main: RakuAST: fix internal compiler error on redeclaration of regexes

[19:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5a45937c44

[19:39] <Geth> ¦ rakudo/main: 551e2a6191 | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[19:39] <Geth> ¦ rakudo/main: RakuAST: prohibit changing repr of stubbed packages

[19:39] <Geth> ¦ rakudo/main: 

[19:39] <Geth> ¦ rakudo/main: Fixes: class Foo { ... }; class Foo is repr('Uninstantiable') { } # to

[19:39] <Geth> ¦ rakudo/main: fail

[19:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/551e2a6191

[19:51] <Xliff_> Moo.

[19:54] <Xliff_> nine: So, since we last talked, I have worked on the following: https://github.com/Xliff/raku-GOffice, https://github.com/Xliff/raku-GCR, https://github.com/Xliff/raku-Gnumeric

[19:55] <Xliff_> Oh... I also wrote a teleprompter in Raku: https://github.com/Xliff/raku-Teleprompter

[19:55] <Xliff_> Still trying to get things zef-ready and if anyone wants to help, that's the area I need it in.

[20:22] <Geth> ¦ rakudo/main: 7458db3faa | (Stefan Seifert)++ | src/Raku/ast/variable-access.rakumod

[20:22] <Geth> ¦ rakudo/main: RakuAST: report variables in sink context

[20:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7458db3faa

[20:22] <Geth> ¦ rakudo/main: be1d946342 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[20:22] <Geth> ¦ rakudo/main: RakuAST: don't sink targets of metainfix assign

[20:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/be1d946342

[20:22] <Geth> ¦ rakudo/main: 44c3655134 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[20:22] <Geth> ¦ rakudo/main: RakuAST: don't sink operands of smart match

[20:22] <Geth> ¦ rakudo/main: 

[20:23] <Geth> ¦ rakudo/main: Smart match can have lots of side effects, so it's often done in sink

[20:23] <Geth> ¦ rakudo/main: context and warnings about this are counter productive.

[20:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/44c3655134

[21:05] *** finanalyst left
[22:52] *** sena_kun left
[22:58] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5837: RakuAST: Throw right exceptions for declaring numeric and match variables

[22:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5837

