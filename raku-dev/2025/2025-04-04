[00:08] *** guifa left
[00:32] *** Xliff left
[00:48] *** guifa joined
[03:50] *** guifa left
[04:54] <ab5tract> camelia:

[04:54] <ab5tract> Whoops

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: 4 commits pushed by ab5tract++

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: dd274e6522 | Address long-standing discrepancy for != and METAOP_NEGATE

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: d9e9dbc1d1 | Scope to symmetric comparison ops

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: 037463fb56 | Use OperatorProperties

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: aa99bdc2dc | Revision gating is not working with `&infix:<ne>`

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: review: https://github.com/rakudo/rakudo/compare/bc518ee0b8ac...aa99bdc2dc66

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: 4 commits pushed by ab5tract++

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: a88e686a0e | Address long-standing discrepancy for != and METAOP_NEGATE

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: 6b1538e816 | Scope to symmetric comparison ops

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: a3e71f3d53 | Use OperatorProperties

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: 35453db4fe | Revision gating is not working with `&infix:<ne>`

[07:21] <Geth> ¦ rakudo/fix-negated-junctions: review: https://github.com/rakudo/rakudo/compare/aa99bdc2dc66...35453db4fe0a

[07:52] *** sena_kun joined
[08:29] <Geth> ¦ rakudo/main: f1980a8cfc | (Stefan Seifert)++ | 2 files

[08:29] <Geth> ¦ rakudo/main: RakuAST: prohibit placeholders with same name as variables already used in scope

[08:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f1980a8cfc

[08:29] <nine> 1336 (t/spec/S06-signature/positional-placeholders.t fixed)

[08:50] *** finanalyst joined
[08:51] <nine> lizmat: sure. I just haven't come across a spectest demanding it.

[09:05] <Geth> ¦ rakudo/main: 25c5350f82 | (Stefan Seifert)++ | src/Raku/ast/type.rakumod

[09:05] <Geth> ¦ rakudo/main: RakuAST: fix enum values missing from surrounding package stash

[09:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/25c5350f82

[09:05] <nine> Fixes the enum problem in t/spec/S06-other/main.t

[09:14] <Geth> ¦ rakudo/main: 550ad11d50 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[09:14] <Geth> ¦ rakudo/main: RakuAST: fix copy pasta in check for rw params of MAIN subs

[09:14] <Geth> ¦ rakudo/main: 

[09:14] <Geth> ¦ rakudo/main: Also tightens the check to only cover subs, so we don't accidentally

[09:14] <Geth> ¦ rakudo/main: warn about an unrelated method MAIN

[09:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/550ad11d50

[09:14] <nine> 1337! We shall never fix another spec test :D

[09:28] *** sena_kun left
[09:29] <patrickb> But reducing the number of total spec tests without increasing the number of succeeding ones is allowed.

[09:33] <nine> Absolutely! Best case we end up with 100 % passing without changing that number ;)

[09:42] *** JimmyZhuo joined
[11:18] *** guifa joined
[11:22] <Geth> ¦ rakudo/main: 46f933a756 | (Stefan Seifert)++ | 2 files

[11:22] <Geth> ¦ rakudo/main: RakuAST: complain at compile time about assigning to a r/o native parameters

[11:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/46f933a756

[11:22] <nine> Quick! Someone delete some spectest file!

[11:38] *** guifa left
[11:53] *** [Tux] left
[11:56] <nine> Oh how I love spectests prohibiting us from detecting an error at compile time...

[11:57] *** [Tux] joined
[12:00] <JimmyZhuo> RAKUDO_RAKUAST=1 ./rakudo-m --ll-exception --target=ast -e 'while "D" {  last  }'

[12:00] <JimmyZhuo> This type cannot unbox to a native integer: P6opaque, Failure

[12:01] <JimmyZhuo> nine: for '$!condition.maybe-compile-time-value == $while', is it ok change to '$!condition.maybe-compile-time-value.Bool == $while' ?

[12:02] <JimmyZhuo> or maybe a better one

[12:03] <nine> .Bool may cause bootstrap issues but it's worth a try

[12:04] <nine> Maybe nqp::istrue($!condition.maybe-compile-time-value) == $while

[12:17] <JimmyZhuo> thanks 

[12:21] <patrickb> JimmyZhuo: Did you manage to validate the Windows native runner PR?

[12:21] <[Tux]> Rakudo v2025.03-174-g46f933a75 (v6.d) on MoarVM 2025.03-11-g778b5d309

[12:21] <[Tux]> csv-test-xs-20      0.138 -  0.138

[12:21] <[Tux]> csv-ip5xs           0.264 -  0.267

[12:21] <[Tux]> test-t --race       0.270 -  0.273

[12:21] <[Tux]> test-t              0.410 -  0.411

[12:21] <[Tux]> csv-ip5xs-20        1.092 -  1.106

[12:21] <[Tux]> csv-parser          1.107 -  1.177

[12:22] <[Tux]> test-t-20 --race    1.234 -  1.255

[12:22] <[Tux]> test                1.852 -  1.858

[12:22] <[Tux]> test-t-20           4.975 -  5.100

[12:22] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[12:24] <JimmyZhuo> patrickb: git clone github is very unstable and slow here

[12:25] <JimmyZhuo> can't even do a fresh clone rakudo 

[12:29] <[Coke]> O_o;

[12:32] <Geth> ¦ rakudo: zhuomingliang++ created pull request #5840: RakuAST: Fix while "D" {  last  }

[12:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5840

[12:40] <JimmyZhuo> patrickb: your branch builds ok, but it's hard to test by me.

[12:42] <patrickb> JimmyZhuo: Ok, cool. Thanks for all the testing and feedback so far!

[12:44] <[Coke]> patrickb: need something tested on windows? I can try something if needed.

[13:23] *** JimmyZhuo left
[14:20] *** codesections joined
[14:32] <finanalyst> [Coke] pls test new tweak https://new-raku.finanalyst.org/en/type/AST

[14:35] *** codesections1 joined
[14:36] <[Coke]> that works!

[14:36] *** codesections left
[14:39] *** codesections1 left
[15:06] <patrickb> [Coke]: We've been talking about https://github.com/rakudo/rakudo/pull/5725 I've originally developed that PR on Windows, but I welcome all testing.

[15:08] <patrickb> [Coke]: After all JimmyZ uncovered something like 4 separate issues in the build of that PR by trying it out on their Windows machine....

[17:37] *** sena_kun joined
[18:14] *** sena_kun left
[18:17] *** sena_kun joined
[18:27] *** notna joined
[18:27] *** notna left
[18:48] *** sena_kun left
[18:49] *** sena_kun joined
[18:53] *** sena_kun left
[18:54] *** sena_kun joined
[19:34] *** finanalyst left
[19:52] *** finanalyst joined
[20:03] *** sena_kun left
[20:49] <Geth> ¦ rakudo/main: 28b4b3377c | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[20:49] <Geth> ¦ rakudo/main: RakuAST: fix overzealous compile time attr default value check

[20:49] <Geth> ¦ rakudo/main: 

[20:49] <Geth> ¦ rakudo/main: If the attribute type has a definedness constraint, a mere type won't be

[20:49] <Geth> ¦ rakudo/main: able to match it. So check a possible compile time value against the

[20:49] <Geth> ¦ rakudo/main: full type and compare mere types with the attribute base type.

[20:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/28b4b3377c

[20:49] <Geth> ¦ rakudo/main: 7f1cf26242 | (Stefan Seifert)++ | 2 files

[20:49] <Geth> ¦ rakudo/main: RakuAST: return-type for Type::Simple

[20:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7f1cf26242

[20:49] <Geth> ¦ rakudo/main: 3a8a337c89 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[20:49] <Geth> ¦ rakudo/main: RakuAST: use private name when reporting attribute default type errors

[20:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a8a337c89

[20:49] <Geth> ¦ roast: 64359c41a7 | (Stefan Seifert)++ | S12-attributes/smiley.t

[20:49] <Geth> ¦ roast: Change a bunch of attribute default tests to expect compile time errors

[20:49] <Geth> ¦ roast: 

[20:49] <Geth> ¦ roast: These tests as written originally expect us to throw a runtime error for

[20:49] <Geth> ¦ roast: certain situations where a default value does not pass an attribute's

[20:49] <Geth> ¦ roast: type constraint. This in turn means that catching such errors at compile

[20:49] <Geth> ¦ roast: time is actually prohibited (as that would make the whole test file fail

[20:49] <Geth> ¦ roast: to compile). It's clearly better to detect problems at compile time, so

[20:49] <Geth> ¦ roast: this changes those tests and marks them as todo. This way the RakuAST

[20:49] <Geth> ¦ roast: frontend can exceed the old compiler's capabilities without disrupting

[20:49] <Geth> ¦ roast: the build checks.

[20:50] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/64359c41a7

[20:57] *** MasterDuke joined
[21:26] *** MasterDuke left
[21:40] *** guifa joined
[21:53] *** codesections joined
[21:58] *** finanalyst left
[22:24] *** codesections1 joined
[22:26] *** codesections left
[22:26] *** codesections1 is now known as codesections

[22:26] *** Voldenet left
[22:35] *** Voldenet joined
[22:50] *** codesections left
