[00:12] <timo> m: my @foo; @foo[2 ** 45 - 2 ** 16] = 1;

[00:12] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: ¬´MoarVM panic: Memory allocation failed; could not allocate 281474976186376 bytes‚ê§¬ª

[00:13] <timo> m: my @foo; @foo[2 ** 45 - 2 ** 19] = 1;

[00:13] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: ¬´MoarVM panic: Memory allocation failed; could not allocate 281474972516360 bytes‚ê§¬ª

[00:16] <timo> it looks like there's some (very large) sizes that you can ask for that will cause an abort inside mimalloc (can't reproduce it here on camelia though)

[00:18] <timo> 0xfffffffe0000 is the largest that mimalloc will allow in a check that's earlier than the abort i've seen

[00:18] <timo> m: say (2 ** 45 - 2 ** 19).base(16); say (2 ** 45 - 2 ** 16).base(16)

[00:18] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: ¬´1FFFFFF80000‚ê§1FFFFFFF0000‚ê§¬ª

[00:19] <timo> m: say 281474972516360.base(16)

[00:19] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: ¬´FFFFFFC00008‚ê§¬ª

[00:22] <timo> there's also a check in set_size_internal that says we can only allocate up to 1ULL << (CHAR_BIT * sizeof(size_t) - elem_addr_size) elements, but there's a tighter limit than the 8 or 4 bytes of pointers, since even on a 64bit architecture, we can only use ... i think 48 bits? at the moment

[04:15] *** guifa left
[04:50] *** guifa joined
[07:41] *** finanalyst joined
[08:01] *** sena_kun joined
[08:23] <finanalyst> .tell suna_kun I would appreciate some help. Please see https://new-raku.finanalyst.org/language/REPL and try edit button. Looking to make a PR in github

[08:23] <tellable6> finanalyst, I haven't seen suna_kun around, did you mean sena_kun?

[08:37] <sena_kun> finanalyst, hi! How exactly can I help?

[08:38] <sena_kun> I see that the styles on the website were broken, but to fix that one needs to revert the changes

[08:39] <Geth> ¬¶ roast: 69970ea7d7 | (Elizabeth Mattijsen)++ | S26-documentation/block-leading-user-format.t

[08:39] <Geth> ¬¶ roast: Fudge test passing in RakuAST

[08:39] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/69970ea7d7

[08:40] <lizmat> spectest clean again

[08:41] <finanalyst> sena_kun: I have been asking around how to integrate with github. It was suggested I contact you. 

[08:41] <sena_kun> the TOC styles got a lot worse: 1)nobody uses a separate button like "Contents" to operate the sidebar. Well, except the docs website now; 2)opening the sidebar moves the main column content, that's a bug/mistake; 3)no separation of the sidebar (a mistake), but instead the separate now have the common background, creating a confusing button-like feeling

[08:42] <sena_kun> somebody also removed the logic of sidebar widening

[08:43] <finanalyst> Styling is all my fault and I am happy to discuss. 

[08:43] <finanalyst> BUt it is not styling that is currently a breaker

[08:43] <finanalyst> It is integration with github

[08:44] <sena_kun> what's the issue?

[08:44] <finanalyst> Styling is now VERY easily sorted, via templates and choosing the CSS framework

[08:44] <finanalyst> Have you tried the edit button? top right of page

[08:45] <sena_kun> I think github has a preview mode for markdown too

[08:45] <sena_kun> Yes, I am looking at the form right now

[08:45] <finanalyst> The editor is Ace, a user can make changes. The changes are in browser. How to reaise a PR with those changes

[08:46] <finanalyst> Ideally, the user should be authenticated with github, for giving credit to changes to the documents

[08:46] <finanalyst> I have been reading all the documentation, but I have not yet sorted out how to do this

[08:46] <sena_kun> doing this would be a lot more complex than just providing an edit url to github file

[08:47] <finanalyst> indeed

[08:47] <finanalyst> But, an edit url does not allow for seeing the rendered HTML in real time of changes

[08:48] <finanalyst> Or to see when a change breaks the RakuDoc source

[08:48] <finanalyst> It is because of the complexity that I am asking for help. If it were easy, it would take considerably more time

[08:50] <sena_kun> as I understand it, you first need to get the user's github auth token, via providing a login form for the docs website, to obtain the user and its auth token. Then you use a gh api directly or via octokit to create a branch and the commit nn their behalf (this will also require asking the user to give the docs website write access to their repositories, which is super scary), you construct the URL of a new PR and redirect the 

[08:50] <sena_kun> user there in a new tab

[08:51] <sena_kun> this is quite complex and involves doing some super scary and weird things (like the docs website asking you to log into github and give it write rights...). Personally, I do not believe a live preview is a feature that justifies the efforts

[08:51] <finanalyst> that seems to be the pattern I have read. Bit it seems to involve setting up a third - user invisible - server to match code and token

[08:52] <sena_kun> the docs website itself could've done that if it had a dynamic routing too

[08:52] <sena_kun> but that's not the matter

[08:52] <sena_kun> are you very keen on implementing this?

[08:52] <finanalyst> from what I can see is that much finer grain write access is possible, so only writing to the repo to create a PR can be granted to the app

[08:53] <sena_kun> yes, that's true

[08:53] <sena_kun> the problem is, you still grant write access from your account to somebody

[08:53] <sena_kun> to a documentation website (!)

[08:53] <sena_kun> I never saw that

[08:53] <finanalyst> I am keen on doing this because it will encourage a wider community help in correcting eg typos

[08:54] <finanalyst> Also after speaking to [Coke] and lizmat , the ease of minor changes seems something to persue

[08:54] <sena_kun> Are you sure this is a significant thing that prevents people from contributing?

[08:55] <sena_kun> But even so, a requirement to log into the docs github with your account would scare off everyone a lot more than absence of live preview

[08:55] <lizmat> seeing this conversation, and sleeping a bit over it

[08:56] <lizmat> I wonder whether it wouldn't make more sense to just ask people if / how they would like to be mentioned in the suggested change

[08:56] <lizmat> keep that in a cookie

[08:56] <finanalyst> I have spoken to Bruce (util) who does not have commit access to Raku/doc. It is a big hassle to clone the who Raku/doc repo, make a minor change, raise a PR, just to add one letter

[08:56] <lizmat> and have each suggestion just be put into a queue for someone else to process and commit to the repo

[08:56] <sena_kun> maybe a bot can be provided then?

[08:57] <lizmat> that someone else having write access to the doc repo

[08:57] <sena_kun> yes, that's a better way

[08:58] <finanalyst> Since the online editor generates a patch, maybe we could just store the patches, then have someone get the patches

[08:58] <lizmat> finanalyst: yeah, that's what I was saying  :)

[08:58] <finanalyst> That would be safer, and much easier to implement

[08:58] <lizmat> and less alarming to people wanting to contribute

[08:58] <lizmat> and also would remove the need of the contributor to have a github account

[08:59] <finanalyst> indeed

[09:00] <finanalyst> very useful discussion. Thanks.

[09:01] <finanalyst> sena_kun: I'm happy to discuss the other styling issues you have

[09:01] <finanalyst> did you try the Raku REPL baar?

[09:01] <sena_kun> finanalyst, I don't have that much time right now, alas, but I think most of what I see on the live website now would be resolved by a revert

[09:02] <finanalyst> not a revert at all. this is a complete refactoring of the software

[09:02] <finanalyst> let me know when you have time

[09:02] <sena_kun> why? There was a replacement of a flag-based sidebar control with a "Contents" button

[09:02] <sena_kun> Just revert that change?

[09:03] <finanalyst> its not a revert

[09:03] <sena_kun> I don't see what has it to do with software

[09:03] <finanalyst> its built from scratch

[09:03] <sena_kun> if the software cannot render the sidebar how it was, it has to be changed

[09:03] <finanalyst> or do you mean the Icon? That can be changed

[09:03] <sena_kun> yup

[09:03] <sena_kun> plus the styles of the sidebar, can we get them back?

[09:04] <sena_kun> the styles of the search bar widening are not working as they were

[09:04] <finanalyst> Ino they do not work as before, because it was broken

[09:04] <sena_kun> just make it as it was and it'll be OK üëç

[09:05] <sena_kun> in what way?

[09:05] <finanalyst> the problem comes when resizing the screen. 

[09:05] <sena_kun> you mean the sidebar covering the main column content?

[09:05] <finanalyst> Looking at the sidebar with Mac/Safari or using a tablet, and the TOC and main content overlap.

[09:06] <finanalyst> You can see this on the current docs.raku.org site

[09:06] <sena_kun> that's how it is everywhere. that's why usually the sidebar is hidden

[09:06] <finanalyst> the new-raku site is built differently

[09:06] <sena_kun> it's the default UI solution in the industry

[09:06] <finanalyst> did you try the REPL bar?

[09:08] <finanalyst> I would like for the TOC to have collapsible hierarchy, which open / close when clicking

[09:08] <finanalyst> Also, you should look at the new-raku site in a mobile - its way better

[09:09] <sena_kun> oh, I am scared to look there

[09:10] <finanalyst> The current site uses Bulma v0.9, the new-raku site uses Bulma v1, and the new site uses RakuDoc v2, not v1

[09:11] <finanalyst> thank you for the consultation over github integration. I'm going to implement the new strategy

[09:13] <sena_kun> anyway, my 5c is that UI guidelines of how a website should look in 20s is different compared to 10s, 00s and 90s. not following the current modern UI standards, IMO, does a lot more harm to getting more people who see outdated stuff, than minor features like a convenient preview. It may not look like what you are used to, but this doesn't make modern UI "broken" or "less convenient" (well, for you it may be, for new generations 

[09:13] <sena_kun> of users it's the opposite). I believe Raku wants new generations of users to keep living, even as a niche language, so I think adapting everything for them is worth the effort

[09:13] <sena_kun> hope I could help even a little bit, good luck!

[09:24] <finanalyst> sena_kun: adapting for a wider diverse set of users is my ambition. Did you see how the UI is multilingual?

[09:27] <finanalyst> currently it has: English, Japanese, Ukrainian, Welsh, French and Dutch

[11:08] <lizmat> m: say Q|my role R[::T] { }; my class C does R[Int] { }|.AST    # nine: feels that should be fixable?

[11:08] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: ¬´===SORRY!=== Error while compiling EVAL_0‚ê§Could not instantiate role 'R'; exception details:‚ê§‚ê§    Unknown compilation input 'qast'‚ê§      in any IMPL-COMPILE-DYNAMICALLY at src/Raku/ast/code.rakumod line 410‚ê§      in any  at src/Raku/ast/code‚Ä¶¬ª

[11:09] <lizmat> golfed from t/spec/S02-types/generics.t

[11:12] <lizmat> heh...   appears to work with RAKUDO_RAKUAST=1 raku -e

[11:14] <nine> That Unknown compilation input 'qast' hits me every time I try to use .AST in camelia

[11:14] <lizmat> aha, ok

[11:15] * lizmat makes mental note

[11:19] <lizmat> m: role R[::T] { has @.a is T }; dd R[Int].new(:42a).a #  something wrong in legacy grammar as well  :-)

[11:19] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: ¬´Cannot modify an immutable Int (0)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:20] <lizmat> aka, we've created an "a" attribute that is an Int, yet it has the @ sigil

[11:20] <lizmat> actually, this goes deeper:

[11:20] <lizmat> m: my @a is Int = 1,2,3

[11:20] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: ¬´Cannot modify an immutable Int (0)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:21] <lizmat> either we need to make "my @a is Int" the same as "my Int @a", or we need to throw at compile time with a typecheck failure that Int isn't Positional

[11:22] <lizmat> nine: do you agree ?

[11:25] <nine> Sounds like we should prohibit. AFAIK the other way to write `my Int @a` is my @a of Int

[11:26] <nine> This is definitely an area that needs way less magic and options instead of more

[11:27] <lizmat> yeah, forgot the "of" option... so throwing feels appropriate

[11:31] <Geth> ¬¶ rakudo/bootstrap-rakuast: cdd9bba7cc | (Stefan Seifert)++ | 5 files

[11:31] <Geth> ¬¶ rakudo/bootstrap-rakuast: WIP

[11:31] <Geth> ¬¶ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/commit/cdd9bba7cc

[12:16] <Geth> ¬¶ rakudo/main: 4fad4276ef | (Elizabeth Mattijsen)++ | src/core.c/Any.rakumod

[12:16] <Geth> ¬¶ rakudo/main: RakuAST: add bare dd CHECK functionality

[12:16] <Geth> ¬¶ rakudo/main: 

[12:16] <Geth> ¬¶ rakudo/main: As a core developer, I'm interested in the exact RakuAST tree that

[12:16] <Geth> ¬¶ rakudo/main: is being built for a given piece of code.  Until now, I usually

[12:16] <Geth> ¬¶ rakudo/main: resorted to:

[12:16] <Geth> ¬¶ rakudo/main: 

[12:16] <Geth> ¬¶ rakudo/main:     raku -e 'say Q|the code|.AST'

[12:16] <Geth> ¬¶ rakudo/main: <‚Ä¶commit message has 20 more lines‚Ä¶>

[12:16] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4fad4276ef

[12:16] <lizmat> code > commit message  :-)

[12:17] <lizmat> actually: commit message > code  :)

[12:17] <Geth> ¬¶ nqp/main: 4d4ac9fce3 | (Daniel Green)++ | 2 files

[12:17] <Geth> ¬¶ nqp/main: Use correct typed accessors where able

[12:17] <Geth> ¬¶ nqp/main: 

[12:17] <Geth> ¬¶ nqp/main: This prevents them from getting HLLized unnecessarily.

[12:17] <Geth> ¬¶ nqp/main: review: https://github.com/Raku/nqp/commit/4d4ac9fce3

[12:19] <Geth> ¬¶ rakudo/main: de421f7969 | (Daniel Green)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[12:19] <Geth> ¬¶ rakudo/main: Use correct typed accessors where able

[12:19] <Geth> ¬¶ rakudo/main: 

[12:19] <Geth> ¬¶ rakudo/main: This prevents them from getting HLLized unnecessarily.

[12:19] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/de421f7969

[12:19] <lizmat> ooohhh!

[12:19] <lizmat> going afk now, will bump NQP if not bumped already by then

[12:38] *** finanalyst left
[12:57] <Geth> ¬¶ rakudo/main: 5bd76f547c | (Daniel Green)++ | tools/templates/NQP_REVISION

[12:57] <Geth> ¬¶ rakudo/main: Bump NQP for micro-optimizations

[12:57] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5bd76f547c

[13:15] <Geth> ¬¶ rakudo/bootstrap-rakuast: 5 commits pushed by (Stefan Seifert)++

[13:15] <Geth> ¬¶ rakudo/bootstrap-rakuast: 9ce10f871f | RakuAST: CtxSave should be a term

[13:15] <Geth> ¬¶ rakudo/bootstrap-rakuast: 5edca5e175 | RakuAST: fix typo preventing interpretation of p6box_i

[13:15] <Geth> ¬¶ rakudo/bootstrap-rakuast: e1de930e71 | RakuAST: fix problems when trying to report compilation error in setting

[13:15] <Geth> ¬¶ rakudo/bootstrap-rakuast: e12cc3f363 | RakuAST: fix unwanted redeclaration error on my scoped multi-part-name packages

[13:15] <Geth> ¬¶ rakudo/bootstrap-rakuast: 277a62d609 | RakuAST: fix bogus complaints about placeholder use in methods

[13:15] <Geth> ¬¶ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/cdd9bba7ccd0...277a62d6095c

[13:20] <Geth> ¬¶ rakudo/bootstrap-rakuast: 21 commits pushed by (Stefan Seifert)++

[13:20] <Geth> ¬¶ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/277a62d6095c...d441b159dcd7

[13:21] <nine> Bootstrap is now also up to date and working

[14:02] *** finanalyst joined
[16:39] *** sena_kun left
[18:05] *** finanalyst left
[18:57] <[Coke]> next

[18:57] <[Coke]> releasable6: next

[18:57] <releasable6> [Coke], Next release in ‚âà13 days and ‚âà0 hours. 1 blocker. 188 out of 189 commits logged

[18:57] <releasable6> [Coke], Details: https://gist.github.com/1edfea280253ed483b4326d5e4bb7b22

[20:31] *** finanalyst joined
[21:51] *** sena_kun joined
[21:57] *** finanalyst left
[22:22] *** sena_kun left
