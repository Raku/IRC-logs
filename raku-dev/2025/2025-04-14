[00:39] <[Coke]> release this saturday - any help on cleaning up roast appreciated: https://github.com/rakudo/rakudo/issues/5841

[00:39] <[Coke]> The changelog is up to date as of right now.

[00:44] <[Coke]> another blin run in progress now.

[00:45] <[Coke]> ⏳ 1659 out of 2303 modules processed (72.03%)

[00:53] <ugexe> i just added 'use v6.d' to all zef source files since modern versions of zef dont work on rakudos so old they dont support v6.d. maybe the non-blocking await will give a boost to performance

[00:54] <ugexe> i bumped the version to v1.0.0 and also made the first release on the zef ecosystem

[01:00] <[Coke]> O_o

[01:16] <[Coke]> I will probably do another blin run mid week then to test out the updated zef.

[01:16] <[Coke]> just in case.

[01:18] *** kjp left
[01:19] *** kjp joined
[01:20] *** kjp left
[01:20] *** kjp joined
[03:30] *** sourceable6 left
[03:30] *** bloatable6 left
[03:30] *** nativecallable6 left
[03:30] *** committable6 left
[03:30] *** linkable6 left
[03:30] *** notable6 left
[03:30] *** bisectable6 left
[03:30] *** coverable6 left
[03:31] *** unicodable6 left
[03:31] *** unicodable6 joined
[03:31] *** notable6 joined
[03:31] *** coverable6 joined
[03:31] *** bisectable6 joined
[03:31] *** sourceable6 joined
[03:31] *** linkable6 joined
[03:32] *** bloatable6 joined
[03:32] *** nativecallable6 joined
[03:39] *** unicodable6 left
[03:39] *** committable6 joined
[03:40] *** bloatable6 left
[03:40] *** nativecallable6 left
[03:40] *** notable6 left
[03:40] *** sourceable6 left
[03:40] *** notable6 joined
[03:40] *** nativecallable6 joined
[03:40] *** sourceable6 joined
[03:40] *** bloatable6 joined
[03:40] *** unicodable6 joined
[07:24] <Geth> ¦ rakudo/main: 25117e3001 | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[07:24] <Geth> ¦ rakudo/main: RakuAST: fix accidental sharing of meta object in nested declarations

[07:24] <Geth> ¦ rakudo/main: 

[07:24] <Geth> ¦ rakudo/main: Fixes: module Foo { class Foo { has $.foo } }

[07:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/25117e3001

[07:25] <nine> This gets you to the redeclaration error with module MoarVM::Profiler { class MoarVM::Profiler { } }

[07:26] <nine> MasterDuke: yes, I've seen those messages. Tried to debug them and failed. They are about a mismatch between $*PACKAGE and nqp::getattr($!braid, Braid, '$!package') but I can't for the life of mine find where its coming from. Also haven't found any negative effects.

[07:26] <tellable6> nine, I'll pass your message to MasterDuke

[07:28] <nine> Wity more debug info:

[07:28] <nine> Out-of-sync package detected in LANG1 at se::L10N::$slang;

[07:28] <nine> RakuAST::Dep (value in braid 1665795248: RakuAST::Class Map, value in $*PACKAGE: RakuAST::Class RakuAST::Deparse)   at NQP::src/core/IO.nqp:297  (/home/nine/rakudo/install/share/nqp/lib/NQPCORE.setting.moarvm:)

[08:10] <nine> Seems to help with the EVAL problem:

[08:10] <nine>      my $context := nqp::defined($ctx) ?? $ctx !! CALLER::LEXICAL::;

[08:10] <nine> +    unless $context<$_>:exists { # Probably called from NQP where there's no implicit $_

[08:10] <nine> +        $context := { LEXICAL:: }();

[08:10] <nine> +    }

[08:10] *** finanalyst joined
[09:53] *** lizmat left
[11:12] *** lizmat joined
[11:22] *** lizmat left
[11:27] *** liztormato joined
[11:28] <liztormato> PSA:  back from travelling, now waiting for my new MBP to restore a full backup from my old MBP

[11:29] <liztormato> I do not expect to be able to do a weekly today

[11:33] *** liztormato left
[12:23] <[Coke]> https://github.com/rakudo/rakudo/issues/5849

[12:23] <[Coke]> blin run had only 1 failure which I'm guessing is a false positive.

[12:24] <[Coke]> esp. as the most recent failing output says:

[12:24] <[Coke]> [Text::Markdown::Discount] Failed to get passing tests, but continuing with --force-test

[12:24] <[Coke]> ... but there are no failing tests in the output

[13:10] <Geth> ¦ setup-raku: skaji++ created pull request #40: update package.json

[13:10] <Geth> ¦ setup-raku: review: https://github.com/Raku/setup-raku/pull/40

[13:15] *** JimmyZhuo joined
[13:15] <Geth> ¦ setup-raku: 0f5fe214b0 | (Shoichi Kaji)++ | CHANGELOG.md

[13:15] <Geth> ¦ setup-raku: v1.9.0

[13:15] <Geth> ¦ setup-raku: review: https://github.com/Raku/setup-raku/commit/0f5fe214b0

[13:23] <finanalyst> [Coke] ping

[13:47] *** JimmyZhuo left
[13:48] <finanalyst> .tell [Coke] i just sent you an email

[13:48] <tellable6> finanalyst, I'll pass your message to [Coke]

[13:49] <finanalyst> .tell lizmat pls check email

[13:49] <tellable6> finanalyst, I'll pass your message to lizmat

[13:53] *** finanalyst left
[16:49] *** finanalyst joined
[17:06] <finanalyst> [Coke] ping

[17:09] <[Coke]> pong

[17:22] <finanalyst> [Coke] I was just testing on my mobile

[17:23] <finanalyst> It seems to be a CSS problem. I was being too clever and styling based on the value of a data-attribute

[17:24] <finanalyst> I will rewrite to include an invisible checkbox. This sort of html/css styling is more widespread. Its the way I handle the REPL bar

[18:31] *** lizmat joined
[18:31] *** lizmat left
[18:31] *** lizmat joined
[18:32] * lizmat is somewhat back

[18:32] <tellable6> 2025-04-14T13:49:04Z #raku-dev <finanalyst> lizmat pls check email

[18:33] <finanalyst> lizmat Hi somewhat back :)

[18:52] <lizmat> ok, looks like I can't compile Rakudo on a M4Max CPU

[18:53] <lizmat> actually, can't build NQP

[18:54] <lizmat> perl Configure.pl --optimize --prefix=/Users/liz/Github/nqp/install --make-install

[18:54] <lizmat> Can't exec "perl": Bad CPU type in executable at /Users/liz/Github/nqp/3rdparty/nqp-configure/lib/NQP/Config.pm line 1502.

[19:00] <releasable6> Next release in ≈4 days and ≈23 hours. 2 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:06] <[Coke]> weird. I don't see "Bad" in 3rdparty/nqp-configure that would match that

[19:07] <timo> that's not something nqp-configure says

[19:07] <[Coke]> ah. 32 bit perl maybe?

[19:07] <timo> that's another part of the OS that says that

[19:07] <lizmat> yeah, it's the OS that says that  :-(

[19:07] <timo> yeah, check what the perl it's trying to execute actually is

[19:08] <timo> i don't know how you work with rosetta

[19:08] <[Coke]> maybe change the sub around line 1502 to diag the system args first?

[19:09] <lizmat> tried that, nothing wrong to see there  :-(

[19:09] <timo> the args are probably correct

[19:09] <[Coke]> I assume new mac, you're forced to be on 15.x?

[19:09] <[Coke]> I'm on 14.7.5 here.

[19:09] <timo> please also check the environment variables, like PATH

[19:10] <timo> or alternatively

[19:10] <[Coke]> could also be intel vs arm64?

[19:10] <lizmat> It came with 15.x something, on 15.4 now

[19:10] <timo> system a /bin/sh so you can type commands yourself and inspect from "the inside"

[19:10] <[Coke]> just using sys perl?

[19:10] <lizmat> hmmm.... double checking

[19:11] <timo> it could be it's executing like an arm64 bash, then that tries to exec "perl" and finds an x86_64 one, and whatever is necessary for cross-architecture execing isn't properly set up in that particular case?

[19:11] <lizmat> hmmm...  could be a perl a built long ago

[19:12] <lizmat> yeah, removing that fixed the issue it seems

[19:14] <lizmat> https://gist.github.com/lizmat/708e871e2b96328aca8bd6d0badf71cc

[19:15] <lizmat> now Moar doesn't want to build

[19:15] <timo> which moar do you have there? we had a patch for that months ago i thought

[19:16] <lizmat> heh  good question

[19:16] <lizmat> 2022.06-9-gced366862

[19:16] <lizmat> where did that come from?

[19:16] <timo> good question :)

[19:16] <lizmat> ah, it's still on "master"   

[19:16] <timo> that'd do it

[19:16] <lizmat> I guess I'll do a fresh clone

[19:17] <timo> in theory we can push a completely empty state to the master branch with like a readme

[19:18] <lizmat> yeah, that might be a good idea

[19:24] <timo> but i'm not sure how many machines are still out there that have a moar checkout that's from like mid 2022

[19:30] <lizmat> In my case it was part of a Time Machine backup I used to set up my new MBP

[19:48] <lizmat> hnmmm... looks like NQP's "make test" insists on a /usr/local/bin/perl

[19:48] <lizmat> prove -j0 -r --exec '/Users/liz/Github/nqp/nqp-m' t/nqp t/hll t/qregex t/p5regex t/qast t/moar t/serialization t/nativecall t/concurrency

[19:48] <lizmat> sh: /usr/local/bin/prove: /usr/local/bin/perl: bad interpreter: No such file or directory

[19:49] <timo> sounds like ti has a hashbang

[19:50] <lizmat> hmmm....

[19:50] <timo> please check if your nqp-m is up to date, too? it's supposed to be a binary nowadays, but it might be a text file

[19:51] <timo> oh

[19:51] <timo> actually, that sounds more like your prove is the thing with the hashbang?

[19:52] <lizmat> aha... yes

[19:52] <lizmat> there was a /usr/local/bin/prove

[19:52] <timo> looks like your whole system is just full of land-mines just waiting to be stepped on one by one

[19:52] <lizmat> now nuked

[19:53] <lizmat> yeah

[19:59] <timo> would be kinda nice to have some mac-native containers-like thing to have some amount of isolation and reproducibility

[20:03] <[Coke]> wonder if minikube would help

[20:03] <timo> that'll give you a linux

[20:04] <timo> much like docker for windows will also give you linux containers

[20:04] <[Coke]> I am seeing "mac os workloads" but no deets.

[20:04] <timo> i can look into that

[20:05] <timo> do you have a source where exactly you saw that?

[20:05] <[Coke]> some google result ai hint, but that did lead to https://medium.com/agoda-engineering/how-we-integrated-native-macos-workloads-with-kubernetes-b4d3c14881a0#:~:text=Conclusion,project's%20README%20file%2C%20which%20includes:

[20:07] <[Coke]> heh. step 1: start with a hundred or so mac minis. :)

[20:09] <timo> ah, ok

[20:09] <timo> no that post is mostly about making macos virtual machines manageable with your existing kubernetes-centric workloads

[20:09] <timo> so it's not as containers-like as i'd like

[20:12] <[Coke]> Yup, unsuprisingly, the ai snippet wasn't as helpful as it thought it was. :)

[20:13] <timo> we can of course look into making liz's raku development more VM-focused, but stuff based on containers have certain benefits. a bit easier to run a tool like rak that actually lives inside a container to search through files on your host machine? possible with VMs of course, but probably a bit more fiddly?

[20:24] <ugexe> i wonder how you end up with perl/prove in /usr/local/bin. afaik macs come with those in /usr/bin

[20:45] <ugexe> if those aren't actually default macos binaries i would guess they are built for the wrong arch

[20:45] <timo> that's my guess as well, yeah

[20:45] <timo> they were perhaps compiled manually from source at some point and then put in the system with "make install"?

[20:46] <ugexe> run `file /usr/local/bin/perl` and see what it says

[20:46] <ugexe> could be, or something like homebrew

[20:46] <timo> and when the backup put them back in place, they were of course not replaced by system-provided binaries with the correct arch, because the system doesn't have anything there

[20:46] <timo> but they come earlier in the PATH, so they are preferred

[20:46] <timo> even though they don't actually work - the PATH doesn't care, the program looking to invoke something doesn't get some kind of "retry with next candidate" semantics for free

[20:46] <ugexe> file /usr/bin/perl

[20:46] <ugexe> /usr/bin/perl: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]

[20:46] <ugexe> /usr/bin/perl (for architecture x86_64):	Mach-O 64-bit executable x86_64

[20:47] <ugexe> /usr/bin/perl (for architecture arm64e):	Mach-O 64-bit executable arm64e

[20:49] <timo> congrats on the 1.0.0 btw, that's a big symbolic step :)

[22:03] <timo> wondering if Nil.iterator should be implemented to give an Iterator::Empty

[22:03] <timo> m: my @foo; Nil.iterator.push-all(@foo); dd @foo

[22:03] <camelia> rakudo-moar 25117e300: OUTPUT: «[Any]␤»

[22:03] <timo> m: my $foo := IterationBuffer.new; Nil.iterator.push-all($foo); dd $foo

[22:03] <camelia> rakudo-moar 25117e300: OUTPUT: «(Nil,).IterationBuffer␤»

[22:03] <timo> so those would both give no elements

[22:05] <timo> it's currently specced to give OneValue(Nil)

[22:06] <timo> i will try a spectest to see what the fallout is

[22:49] <timo> would be lovely if we had a cancellable "read bytes from stdin"

[22:54] *** finanalyst left
