[07:46] *** [Coke] left
[07:48] *** [Coke] joined
[09:34] <ab5tract> so I'm still struggling to make sense of utilizing %?RESOURCES in a test context

[09:34] <ab5tract> is there any way to ask a package for it's resources?

[09:34] <ab5tract> or a dist, or ... ?

[14:29] <[Coke]> You have to have a method in your package that returns it.

[15:39] *** AlexDaniel joined
[15:41] <AlexDaniel> jdv: “why does tellable disappear?” – I don't know :)

[15:42] <AlexDaniel> there used to be issues with IRC::Client stability, I don't know if that got fixed somehow

[15:45] <AlexDaniel> [Coke]: “any need to cleanup old whateverable gists?” – I don't know, github certainly didn't tell me that I should, and it has been 9 years.

[15:47] <AlexDaniel> [Coke]: “Question on raku/ecosystem-unbitrot - says tickets are closed automatically, how? Why a GPL license?” – I'm pretty sure it happens if you run this script: https://github.com/Raku/ecosystem-unbitrot/blob/master/bin/update-issues.p6

[15:47] <AlexDaniel> clearly nobody is running it nowadays so I'd expect issues to not be closed automatically :) I was running the script during the event

[15:49] <AlexDaniel> if the license is limiting you, I allow you to use code written by me in that repo for any purpose, and you can relicense as you see fit. I can also push a commit with a different license if you need it

[15:52] <AlexDaniel> as to why I use GPL license for most of my repos, well, it's a standard choice for a software project… I remember perl projects using something odd, maybe I should've used that

[16:46] *** lizmat joined
[16:56] <ab5tract> [Coke]: Thanks! much appreciated

[16:57] <ab5tract> It both makes sense and is kind of an anti-pattern at the same time

[16:57] <ab5tract> Why wouldn't we just add such a method to Package in the first place?

[18:15] *** lizmat left
[18:35] *** AlexDaniel left
[18:48] *** lizmat joined
[18:49] *** lizmat left
[18:49] *** lizmat joined
[19:00] <lizmat> .

[19:26] <nine> ab5tract: to which package? There may not even be one. Or there may be multiple. It's much more a property of the comp unit

[19:40] *** guifa joined
[19:43] <ab5tract> nine: I meant adding it to the Package "class", or to the metamodel that defines it, or whatever

[19:43] <ab5tract> Any::Package.^resources

[19:44] <ab5tract> but I guess $*REPO.^resources would be even better

[19:59] *** lizmat left
[19:59] *** lizmat_ joined
[20:13] <ab5tract> ah, intriguing... CompUnit::Repository does seem to provide a `resource` method. However, the implementation I'm looking at appears to be entirely path-based, which is a bit surprising

[20:31] <nine> ab5tract: point is, a lib/Foo.rakumod may just be "export sub foo() { %?RESOURCES }". There may not be any package to add it to

[20:31] *** lizmat_ left
[20:31] <nine> Even an empty file would be a valid Foo.rakumod

[20:32] *** lizmat joined
[20:32] <ab5tract> right, you've already got me on board that this belongs better in the comp unit

[20:32] <ab5tract> (this theoretical thing)

[20:33] <ab5tract> For me it feels a lot less clean to manually expose %?RESOURCES than to have a standard, built in mexchanism to do so

[20:33] <ab5tract> but to quote a guy, "I'll not die on that hill" ;)

[20:40] <nine> CompUnit may be the right place

[20:41] *** finanalyst joined
[20:45] <[Coke]> raku 2025.04 - raku | egrep -v '1|3'

[20:46] <[Coke]> ^^ this hangs. hit ^C - "uncaught exception" - but it doesn't quite, can hit ^C repeateadly

[20:46] <ab5tract> it makes a lot more sense than package, that's for sure

[20:46] <[Coke]> ^\ does kill it

[20:47] <ab5tract> R#5875 is driving me crazy

[20:47] <linkable6> R#5875 [open]: https://github.com/rakudo/rakudo/issues/5875 [good first issue][enumerations][objects] Success in enum resolution during &MAIN invocation depends on declaration scope of the enum.

[20:47] <ab5tract> might have to nuke that "good first issue" tag, as I'm completely baffled

[20:48] <ab5tract> m: m: package CoinFlip { enum coin is export <heads tail> }; import CoinFlip; dd ::(heads);

[20:48] <camelia> rakudo-moar bb0857c8b: OUTPUT: «coin::heads␤»

[20:48] <ab5tract> so it sees the enum via ::()

[20:49] <[Coke]> I have almost never found a correct "good first issue" tag on any raku repo. :)

[20:49] <ab5tract> indeed.. but some find my wishful thinking endearing :)

[20:49] <ab5tract> so when the `thevalue` sub is run while processing MAIN, ::(heads) returns Nil

[20:50] <ab5tract> m: m: package CoinFlip { enum coin is export <heads tail> }; import CoinFlip; dd GLOBAL::(heads);

[20:50] <camelia> rakudo-moar bb0857c8b: OUTPUT: «Failure.new(exception => X::NoSuchSymbol.new(symbol => "GLOBAL::heads"))␤»

[20:51] <ab5tract> m: enum coin <heads tail>;  dd GLOBAL::(heads);

[20:51] <camelia> rakudo-moar bb0857c8b: OUTPUT: «coin::heads␤»

[20:52] <ab5tract> so when the enum is not imported but declared inline, it shows up in GLOBAL::() and ::() (do we call this latter one the lexotic lookup?)

[20:53] <ab5tract> I don't care as much about GLOBAL, but this discrepancy in ::() is batty

[20:54] *** lizmat left
[20:54] *** MasterDuke joined
[20:56] *** lizmat joined
[21:03] *** finanalyst left
[21:10] <ab5tract> Are GLOBAL::(), CORE::(), and ::() all there is?

[21:10] <ab5tract> or are there other all-caps whatever-these-are? (couldn't find any docs)

[21:11] <MasterDuke> SETTING:: also

[21:14] <ab5tract> ok interesting. is that for the stuff tht lives in lib/

[21:14] <ab5tract> because I only ever hear setting in combination with core setting :)

[21:14] <ab5tract> I was hoping for a CALLER::()

[21:15] <MasterDuke> yeah, i think that exists also

[21:15] <ab5tract> hmm

[21:15] <ab5tract> yeah it didnt explode

[21:15] <ab5tract> unfortunately:

[21:15] <ab5tract> m: sub b(\a) { CALLER::(a) }; module M { enum F <q r s>;  our sub m { b(q) } }; M::m()

[21:15] <camelia> rakudo-moar bb0857c8b: OUTPUT: «No such symbol 'CALLER::q'␤  in sub b at <tmp> line 1␤  in sub m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:16] <ab5tract> m: sub b(\a) { CALLER::(a) }; module M { enum F <q r s>;  our sub m { b(F::q) } }; M::m()

[21:16] <camelia> rakudo-moar bb0857c8b: OUTPUT: «No such symbol 'CALLER::q'␤  in sub b at <tmp> line 1␤  in sub m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:16] <ab5tract> maybe it's specific to the block scope in m

[21:16] <ab5tract> m: sub b(\a) { CALLER::(a) }; module M { our sub m { enum F <q r s>; b(F::q) } }; M::m()

[21:16] <camelia> rakudo-moar bb0857c8b: OUTPUT: «Cannot access 'q' through CALLER, because it is not declared as dynamic␤  in sub b at <tmp> line 1␤  in sub m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:17] <ab5tract> m: sub b(\a) { CALLER::(a) }; module M { our sub m { our enum F <q r s>; b(F::q) } }; M::m()

[21:17] <camelia> rakudo-moar bb0857c8b: OUTPUT: «Cannot access 'q' through CALLER, because it is not declared as dynamic␤  in sub b at <tmp> line 1␤  in sub m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:17] <ab5tract> "declared as dynamic" <---- the third surprise of the evening. I think I better make it the last one for tonight

[21:18] <MasterDuke> also LEXICAL:: and UNIT::

[21:18] <ab5tract> thanks [Coke] nine MasterDuke 

[21:18] <ab5tract> MasterDuke: is LEXICAL:: different from ::()

[21:18] <MasterDuke> dunno

[21:18] <ab5tract> :)

[21:18] <ab5tract> ok

[21:24] <ab5tract> added a doc ticket

[21:36] <ab5tract> m: package CoinFlip { enum coin is export <heads tail> }; dd GLOBAL::(CoinFlip);  dd ::(CoinFlip)

[21:36] <camelia> rakudo-moar bb0857c8b: OUTPUT: «Use of uninitialized value of type CoinFlip in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤Failure.new(exception => X::NoSuchSymbol.new(symbol => "G…»

[21:37] <ab5tract> ah, that's about stringy-ness

[21:38] <ab5tract> m: package CoinFlip { enum coin is export <heads tail> }; dd GLOBAL::("CoinFlip");  dd ::("CoinFlip")

[21:38] <camelia> rakudo-moar bb0857c8b: OUTPUT: «CoinFlip␤CoinFlip␤»

[22:06] *** lizmat left
[22:09] *** MasterDuke left
[22:21] <jdv> .tell alexdaniel wut?  idk.

[22:21] <tellable6> jdv, I'll pass your message to AlexDaniel

