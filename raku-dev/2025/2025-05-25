[01:11] *** coleman left
[01:12] *** coleman joined
[01:13] *** coleman left
[01:14] *** coleman joined
[01:19] *** notable6 left
[01:19] *** notable6 joined
[03:27] <[Coke]> coleman: you have insight into the whateverable bots

[03:41] <coleman> I do not, unfortunately 

[03:42] <coleman> I could try to deploy but it would be a new deployment 

[03:42] <coleman> I'll look tomorrow

[03:42] <coleman> off to bed now 

[05:11] *** notable6 left
[05:11] *** notable6 joined
[05:13] *** nativecallable6 left
[05:15] *** greppable6 left
[05:24] *** kjp left
[05:25] *** committable6 left
[05:26] *** kjp joined
[05:28] *** kjp left
[05:29] *** kjp joined
[08:29] *** finanalyst joined
[08:38] *** finanalyst left
[09:19] *** notable6 left
[09:19] *** notable6 joined
[10:34] *** finanalyst joined
[11:12] *** bisectable6 left
[11:12] *** coverable6 left
[11:12] *** notable6 left
[11:12] *** benchable6 left
[11:13] *** quotable6 left
[11:13] *** sourceable6 left
[11:15] *** bloatable6 left
[11:27] *** nativecallable6 joined
[11:28] *** quotable6 joined
[11:28] *** greppable6 joined
[11:28] *** benchable6 joined
[11:28] *** evalable6 joined
[11:29] *** sourceable6 joined
[11:29] *** releasable6 joined
[11:29] *** linkable6 joined
[11:29] *** coverable6 joined
[11:29] *** committable6 joined
[11:29] *** bloatable6 joined
[11:30] *** shareable6 joined
[11:31] *** unicodable6 joined
[11:31] *** notable6 joined
[11:31] *** tellable6 joined
[11:35] *** bisectable6 joined
[12:14] *** finanalyst left
[13:15] *** finanalyst joined
[14:42] <timo> hmm. i feel like the docs should really point out that ARGFILES / CatHandle will close each handle in turn when you iterate over its .handles

[14:49] <ugexe> it has always felt like those were poorly thought out, similar to other apis we have designed to make something already easy even easier for some reason

[14:50] <ugexe> reactive programming

[14:51] <ugexe> or maybe reactive designing is a better term

[15:03] <timo> argfiles was in order to make something equivalent to `while (<>) {` work, right?

[15:04] <timo> it does make sense that CatHandles wouldn't be the right thing for zipping all specified files. it's cat after all, not ... uh ... zebra?

[15:09] *** kjp left
[15:10] *** kjp joined
[15:11] *** finanalyst left
[15:13] <ugexe> presumably, but that is sort of what i'm talking about. CatHandles is really more like <<>> in perl, but was seemingly implemented and sold as if it was <>

[15:19] <timo> can you elaborate? i don't perl much at all, you see

[15:23] <ugexe> <> uses two arg open and thus lets you do a lot more things... potentially dangerous things but you can do dangerous things with what it is meant to emulate (awk/sed behavior, pipes). for example in perl could write `while (<*.rakumod>) {`

[15:34] <jdv> tu

[15:34] <jdv> oops

[15:34] <timo> i only vaguely recall something about two arg open being problematic. three arg open is where you also put an explicit mode in it, like "<" or ">" for reading or writing respectively?

[15:35] <ugexe> yes. but what do you presume <>/<<>> was being used for in perl? my presumption is it is mostly used for one liners and throw away scripts, scenarios where you generally are open to using powerful footguns

[15:35] <ugexe> like i don't recall actually seeing anyone use <<>>

[15:38] <ugexe> it is trivial to iterate over filenames and do precisely whatever you want in raku. yet that is the only part of the <> from perl that was implemented

[15:46] <timo> what use cases besides reading all lines from all files by pattern would there be? you can't safely write to a text handle in the middle of a file, right? unless what you do doesn't have to move parts of files around of course

[15:47] <timo> you have special variables for stuff like currently opened file name, current line number, stuff like that right? and presumably also the file handle itself is reachable

[15:49] <timo> does the "in place" flag for perl make it possible to like, stream-transform files line-by-line, i wonder?

[16:02] <ugexe> i don't think there is another good use case, no. in perl it is a powerful footgun, and those things make sense for one liners. in raku we did not get the powerful footgun <>, we got the the neutered/safer version <<>> which is not as useful for one liners. so our api around that ultimately accommodated the wrong use case imo, and it probably came about because someone requested to do the simple

[16:02] <ugexe> "process each file" / <<>> behavior

[16:07] <timo> OK I think I understand

[17:07] *** finanalyst joined
[18:18] *** librasteve_ joined
[18:58] *** AlexDaniel joined
[18:58] <AlexDaniel> .

[18:58] <tellable6> 2025-05-10T22:21:41Z #raku-dev <jdv> alexdaniel wut?  idk.

[18:58] <AlexDaniel> c: HEAD say 42

[18:58] <committable6> AlexDaniel, ¦HEAD(1464a0f): «42␤»

[18:59] <AlexDaniel> I was outside of town. During that time, the server froze. Eventually, this was automatically detected and it was sent into a hard reboot. I guess that's when the bots went back up

[19:00] <AlexDaniel> if anybody is willing, we can deploy them on your infra. Just need to transfer the builds and set up docker.

[19:09] <Geth> ¦ rakudo/main: 2ec173ab07 | (Elizabeth Mattijsen)++ | src/Raku/ast/expressions.rakumod

[19:09] <Geth> ¦ rakudo/main: RakuAST: Alternate fix for #5883

[19:09] <Geth> ¦ rakudo/main: 

[19:09] <Geth> ¦ rakudo/main: A less hacky way, as suggested by nine++

[19:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2ec173ab07

[20:33] <Geth> ¦ rakudo: patrickbkr++ created pull request #5888: Change Linux pre-built release pipeline, CentOS 7 -> Ubuntu 16.04

[20:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5888

[20:38] <japhb> I think my brain broke a little reading that PR title

[20:50] <Geth> ¦ whateverable/main: 751467e3df | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Discordable.pm6

[20:50] <Geth> ¦ whateverable/main: Update the discord bot name again

[20:50] <Geth> ¦ whateverable/main: 

[20:50] <Geth> ¦ whateverable/main: Not sure what the second fallback is, but probably one of those.

[20:50] <Geth> ¦ whateverable/main: 

[20:50] <Geth> ¦ whateverable/main: Context: https://irclogs.raku.org/raku/2025-05-25.html#20:47-0001

[20:50] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/751467e3df

[20:52] <Geth> ¦ rakudo/main: 72bf08fc73 | (Patrick Böker)++ | 3 files

[20:52] <Geth> ¦ rakudo/main: Change Linux pre-built release pipeline, CentOS 7 -> Ubuntu 16.04

[20:52] <Geth> ¦ rakudo/main: 

[20:52] <Geth> ¦ rakudo/main: Azure removed support for the Ubuntu 20.04 agent OS. We need to

[20:52] <Geth> ¦ rakudo/main: mount the docker binary into the container to work around missing root

[20:52] <Geth> ¦ rakudo/main: permissions in the container. That only works when the host's docker binary

[20:52] <Geth> ¦ rakudo/main: is glibc compatible with the container glibc. Upgrading Ubuntu from 20.04

[20:52] <Geth> ¦ rakudo/main: to 22.04 made the host's docker binary incompatible with CentOS' 7 glibc.

[20:52] <Geth> ¦ rakudo/main: <…commit message has 10 more lines…>

[20:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/72bf08fc73

[20:52] <Geth> ¦ rakudo/main: 7783e28b82 | (Patrick Böker)++ (committed using GitHub Web editor) | 3 files

[20:52] <Geth> ¦ rakudo/main: Merge pull request #5888 from patrickbkr/azure-linux-fix

[20:52] <Geth> ¦ rakudo/main: 

[20:52] <Geth> ¦ rakudo/main: Change Linux pre-built release pipeline, CentOS 7 -> Ubuntu 16.04

[20:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7783e28b82

[20:54] *** shareable6 left
[20:54] *** linkable6 left
[20:54] *** releasable6 left
[20:54] *** committable6 left
[20:54] *** nativecallable6 left
[20:54] *** bloatable6 left
[20:54] *** greppable6 left
[20:54] *** bisectable6 left
[20:54] *** benchable6 left
[20:54] *** notable6 left
[20:54] *** tellable6 left
[20:54] *** sourceable6 left
[20:54] *** unicodable6 left
[20:54] *** quotable6 left
[20:54] *** coverable6 left
[20:54] *** evalable6 left
[20:57] *** linkable6 joined
[20:57] *** nativecallable6 joined
[20:57] *** quotable6 joined
[20:57] *** bloatable6 joined
[20:57] *** greppable6 joined
[20:58] *** coverable6 joined
[20:58] *** notable6 joined
[20:58] *** committable6 joined
[20:58] *** tellable6 joined
[20:58] *** unicodable6 joined
[20:58] *** evalable6 joined
[20:58] *** shareable6 joined
[20:59] *** bisectable6 joined
[20:59] *** benchable6 joined
[20:59] *** releasable6 joined
[21:00] *** sourceable6 joined
[21:23] *** AlexDaniel48 joined
[21:24] *** AlexDaniel left
[21:57] *** AlexDaniel48 left
[22:02] <patrickb> and finally the pre-built release pipeline is working again and the Linux binaries for 2025.05 are released.

[22:04] <lizmat> patrickb++

[22:04] <tellable6> hey lizmat, you have a message: https://gist.github.com/8e44117b654ad07f059f5cff6c9de9c0

[22:05] <lizmat> thanks tellable6 

[22:05] <tellable6> lizmat, Thank you! You love me, you really love me!

[22:07] *** librasteve_ left
