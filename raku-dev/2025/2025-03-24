[00:03] <lizmat_> [Coke]++ jdv++

[00:06] *** lizmat_ left
[00:06] *** lizmat joined
[00:07] <[Coke]> It was just me this time. :)

[00:18] <lizmat> okidoki  :-)   

[00:27] *** rakkable left
[00:27] *** rakkable joined
[00:32] <[Coke]> jdv did merge a PR for me, that counts, I guess. :)

[01:01] <[Coke]> .seen jnthn

[01:01] <tellable6> [Coke], I saw jnthn 2024-12-02T14:00:59Z in #moarvm: <jnthn> :q

[08:09] *** sena_kun joined
[08:25] <patrickb> I've just uploaded the precompiled release files to rakudo.org. Thanks for the release [Coke]!

[08:37] *** finanalyst joined
[09:44] *** sena_kun left
[09:46] *** sena_kun joined
[09:47] *** finanalyst left
[09:51] *** sena_kun left
[10:38] *** finanalyst joined
[11:03] *** Voldenet left
[11:03] *** Voldenet joined
[12:00] <lizmat> nine: looks like we lost all nativecall tests in "make test" under RakuAST

[12:01] <lizmat> appears related to the handling of require

[12:02] <nine> lizmat: noticed that, too yesterday evening and working on a fix

[12:02] <lizmat> ack

[12:03] <nine> The fix really is making late bound sub calls work in BEGIN blocks

[12:03] <nine> I.e. my &call-foo := BEGIN { -> { foo } }; sub foo() { }

[12:16] <lizmat> nine: running the bootrstapped version: is there something else that I need to do apart from switching to the branch ?

[12:17] <nine> You still need to set RAKUDO_RAKUAST=1 but apart from that no. I actually ran it accidentally a few times

[12:18] <lizmat> also at build time?

[12:20] <nine> yes

[12:21] <nine> I could probably remove that switch in the branch and force it to RakuAST since it's not buildable with the old frontend anyway

[12:51] *** finanalyst left
[12:52] *** JimmyZhuo joined
[13:11] *** finanalyst joined
[13:20] *** JimmyZhuo left
[13:49] <Geth> ¦ rakudo/bootstrap-rakuast: 16 commits pushed by (Stefan Seifert)++

[13:49] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/caf22fd70bc2...35b86e17aad6

[13:49] <Geth> ¦ rakudo/main: 37c301eaa0 | (Stefan Seifert)++ | 3 files

[13:49] <Geth> ¦ rakudo/main: RakuAST: fix calling post-declared subs from role methods

[13:49] <Geth> ¦ rakudo/main: 

[13:49] <Geth> ¦ rakudo/main: When a Role's method tries to call a sub that is declared after the role

[13:49] <Geth> ¦ rakudo/main: itself, the lookup for this routine would fail. That's because role

[13:49] <Geth> ¦ rakudo/main: bodies are compiled immediately after the role is parsed. At this point

[13:49] <Geth> ¦ rakudo/main: the callee does not exist yet, so we won't find it. However at runtime

[13:49] <Geth> ¦ rakudo/main: the lookup may very vell succeed.

[13:49] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[13:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/37c301eaa0

[13:49] <Geth> ¦ rakudo/main: 4f5f4cde4f | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[13:49] <Geth> ¦ rakudo/main: RakuAST: fix inlined containers in CStructs

[13:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4f5f4cde4f

[13:50] <nine> NativeCall is back on track and this also gets rid of one more workaround in the bootstrap branch :)

[13:51] <lizmat> nice!

[14:02] *** finanalyst left
[14:16] <Geth> ¦ rakudo/bootstrap-rakuast: 7 commits pushed by (Stefan Seifert)++

[14:16] <Geth> ¦ rakudo/bootstrap-rakuast: a68e0cfbb5 | RakuAST: work around serialization problem with static code object

[14:16] <Geth> ¦ rakudo/bootstrap-rakuast: 796587fd42 | RakuAST: work around bootstrapping issues with CORE:: lookups

[14:16] <Geth> ¦ rakudo/bootstrap-rakuast: 26796ccb16 | RakuAST: work around parse error

[14:16] <Geth> ¦ rakudo/bootstrap-rakuast: 3c19ed1833 | RakuAST: work around self not found in lambdas declared in BEGIN block

[14:16] <Geth> ¦ rakudo/bootstrap-rakuast: acb416b89d | RakuAST: remove workaround needed by the old compiler frontend

[14:16] <Geth> ¦ rakudo/bootstrap-rakuast: d9a20be875 | RakuAST: work around indirect lookups not available early enough in the bootstrap

[14:16] <Geth> ¦ rakudo/bootstrap-rakuast: b3333b7f05 | RakuAST: work around segfaults trying to access a non-existing outer

[14:16] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/35b86e17aad6...b3333b7f05fe

[14:17] <nine> I merged the non-zero-chance-of-failure fixes from bootstrap-rakuast to main

[14:19] <nine> Now the bootstrap branch contains just 6 workarounds and removes 1 workaround. I'd like to find better solutions for those workarounds but none of them feel terrible. So unless better solutions appear, I intend for them to go in.

[14:22] <[Coke]> releaseable6: status

[14:22] <releasable6> [Coke], Release date for Rakudo 2025.03 is listed in “Planned future releases”, but it was already released.

[14:22] <releasable6> [Coke], and I oop! Backtrace: https://gist.github.com/df5a481ebf861ef18518c982616bd278

[14:23] <Geth> ¦ rakudo/main: 184d325706 | (Will Coleda)++ | docs/release_guide.pod

[14:23] <Geth> ¦ rakudo/main: update next release date

[14:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/184d325706

[14:23] <[Coke]> releaseable6: status

[14:23] <releasable6> [Coke], Release date for Rakudo 2025.03 is listed in “Planned future releases”, but it was already released.

[14:23] <releasable6> [Coke], and I oop! Backtrace: https://gist.github.com/0172d26d4caac85b5f27bc566988eb7a

[14:24] <[Coke]> releaseable6: status

[14:24] <releasable6> [Coke], Release date for Rakudo 2025.03 is listed in “Planned future releases”, but it was already released.

[14:24] <releasable6> [Coke], and I oop! Backtrace: https://gist.github.com/96df471088b354c628845446dc275947

[14:25] <Geth> ¦ rakudo/main: bc5b2673f5 | (Will Coleda)++ | docs/release_guide.pod

[14:25] <Geth> ¦ rakudo/main: actually claim next release

[14:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bc5b2673f5

[14:25] <[Coke]> releaseable6: status

[14:25] <releasable6> [Coke], Release date for Rakudo 2025.03 is listed in “Planned future releases”, but it was already released.

[14:25] <releasable6> [Coke], and I oop! Backtrace: https://gist.github.com/7fe3425b8c9ed260c930249d053a9b10

[14:26] <Geth> ¦ nqp/main: 06c8273f50 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[14:26] <Geth> ¦ nqp/main: Bump MoarVM to get 32/64bit writing to file working

[14:26] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/06c8273f50

[14:26] <Geth> ¦ rakudo/main: 9c9d822e44 | (Will Coleda)++ | docs/release_guide.pod

[14:26] <Geth> ¦ rakudo/main: next release

[14:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9c9d822e44

[14:27] <[Coke]> releaseable6: status

[14:27] <releasable6> [Coke], Release date for Rakudo 2025.03 is listed in “Planned future releases”, but it was already released.

[14:27] <releasable6> [Coke], and I oop! Backtrace: https://gist.github.com/cc3122deccbf34760550f4fe1e4ef45b

[14:33] <[Coke]> I think it's running off a cache now; will check in privmsgs going forward

[14:37] <[Coke]> wonder if it's actually using the month as part of the calculation and I have to wait until Apr-01

[14:37] <[Coke]> tag is there, release is there.

[14:38] <Geth> ¦ rakudo/main: 606e4eb084 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[14:38] <Geth> ¦ rakudo/main: Bump NQP to get 32/64bit writing to file working

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: Fixes #5776

[14:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/606e4eb084

[14:45] <[Coke]> yah, running it against a local copy, it's seeing 2025.04 as the next release.

[14:47] <[Coke]> .seen alexdaniel

[14:47] <tellable6> [Coke], I saw alexdaniel 2024-09-01T02:48:19Z in #raku-dev: <AlexDaniel> and I'm happy to see that this tooling is getting some love again <3

[14:48] <lizmat> nine: fwiw, I can't get the bootstrapped version to build:

[14:48] <lizmat> Cannot find method 'add_attribute' on object of type Perl6::Metamodel::ModuleHOW

[14:48] <lizmat>    at src/Raku/ast/package.rakumod:408  (/Users/liz/Github/rakudo/blib/Perl6/BOOTSTRAP/v6c.moarvm:ATTACH-ATTRIBUTE)

[14:56] <nine> Huh...just tried again on a clean directory and after make clean. Just did RAKUDO_RAKUAST=1 make

[14:56] <nine> lizmat: oh, did you try make install?

[14:58] <lizmat> ah, yes...

[14:59] <nine> This was actually my first time ever trying make install with RakuAST :D And yes, see that error as well

[15:06] <lizmat> so where do I find the updated "raku" if I don't do "make installl" ?

[15:06] <nine> ./rakudo-m

[15:06] <nine> in the rakudo directory

[15:09] <lizmat> thanks

[15:10] <lizmat> so the error that blocked the .assuming, is much more benign in the bootstrapped rakudo

[15:10] <lizmat> Could not find a compile-time-value for lexical Nil

[15:10] <nine> I'd assume that (pun intended)

[15:11] <lizmat> I was hoping It'd just work  :-)

[15:29] *** rakkable left
[15:29] *** rakkable joined
[15:44] <[Coke]> jdv: I put myself down for April, unless you want it.

[15:45] <jdv> if its the rakuast one then yes

[15:45] <jdv> iirc the release guide is not updated for the next

[15:45] <[Coke]> We don't know when that is yet, I don't think. nine, lizmat, let us know. :)

[15:45] <[Coke]> It is now.

[15:47] <[Coke]> ... I am concerned that again, I missed a step here - might need to patch releaseable6 so it's all set before we start going through the changelog next release. I'll take that as a task for this week

[15:47] <jdv> nine: any good guess possible when rakuast will supplant legacy?

[15:47] <[Coke]> (the next release wasn't listed in the tag/release in the release_guide but only the announcement). :(

[15:48] <[Coke]> (So I'll do April as penance unless it's the the rakuast one. :)

[15:48] <[Coke]> lizmat: https://github.com/Raku/roast/issues/872 - I tried to cherry pick that one commit, but there are conflicts.

[15:48] <jdv> i feel like we should know well in advance as well as be very conservative about the schedule so maybe not hard to know whuch release will land it

[15:50] <[Coke]> I think getting us to 100% is step one - if that happens before April, then we say May is the one that gets it.

[15:51] <[Coke]> That gives core devs a bit to do any cleanup before we move it out of experimental. Are we also bumping to 6.e with that release?

[15:51] <jdv> i think that might be a rsc thing.  no idea.

[15:54] <[Coke]> jdv: can you verify this also happens to you: https://github.com/rakudo/rakudo/issues/5775

[15:54] <nine> The RSC is the last resort to get some decision when the community fails to achieve consensus

[15:54] <[Coke]> and, do you have an opinion on https://github.com/rakudo/rakudo/issues/5827 ?

[15:56] <jdv> [Coke]: can you shoot he a quick email on those?  i get a lot of gh noise.

[15:57] <jdv> *me

[15:58] <jdv> does the community agree wut 6.e is?

[15:59] <[Coke]> "should include working rakuast, anything already in 6.e.PREVIEW" - not sure we have a process (or a list that's a work in progress)

[16:00] <[Coke]> Seems like something we should have in a raku/ repo somewhere for language releases going forward: Language Changelog

[16:00] <jdv> that unfortunately doesnt answer the question if rakuast triggers 6.e though, right?

[16:07] <nine> m: my &pos-match-block = { say "here"; True }; my $pos-b where &pos-match-block = 42; use Test; dd $pos-b ~~ Seq:D; is-deeply $pos-b, 42

[16:07] <camelia> rakudo-moar 606e4eb08: OUTPUT: «Type check failed in assignment to $pos-b; expected <anon> but got Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[16:07] <nine> But:

[16:07] <nine> m: my &pos-match-block = { say "here"; True }; my $pos-b where &pos-match-block = 42; use Test; is-deeply $pos-b, 42

[16:07] <camelia> rakudo-moar 606e4eb08: OUTPUT: «here␤ok 1 - ␤»

[16:07] <nine> What a bizarre error! The assignment fails if later we would do that type comparison

[16:12] <[Coke]> jdv: I would argue that rakuast has to be in 6.e but it doesn't force it to occur.

[16:13] <[Coke]> I would propose at least (based on previous discussions here) removing experimental macro support (and maybe experimental cache)

[16:14] <[Coke]> I mean, maybe it makes sense to put this in as a PS ticket, with the result being a doc describing what is in 6.e language.

[16:15] <[Coke]> https://github.com/Raku/problem-solving/tree/main/solutions/language already has some "what's in language version X" notes 

[17:01] *** finanalyst joined
[17:21] <nine> Dubiously legal Raku syntax riddle of the day. What does the following code mean exactly?

[17:21] <nine> my (2);

[17:21] <nine> m: my (2);

[17:21] <camelia> rakudo-moar 606e4eb08: ( no output )

[17:33] <gfldex> m: for my (2) { .say };

[17:33] <camelia> rakudo-moar 606e4eb08: OUTPUT: «(<anon>)␤»

[18:02] <[Coke]> m: dd my ([+])

[18:02] <camelia> rakudo-moar 606e4eb08: OUTPUT: «([],)␤»

[18:13] <jdv> nine: stop:)

[18:21] <[Coke]> m: my ('stop')

[18:21] <camelia> rakudo-moar 606e4eb08: ( no output )

[18:26] <nine> m: my (2) = 3;

[18:26] <camelia> rakudo-moar 606e4eb08: OUTPUT: «Type check failed in assignment to anon; expected <anon> but got Int (3)␤  in block <unit> at <tmp> line 1␤␤»

[18:26] <nine> The error message does give a hint

[18:26] <nine> It also helps to think about what a my ($x); exactly is

[18:36] <[Coke]> m: my ($a,$b) =2,3; dd $a; dd $b

[18:36] <camelia> rakudo-moar 606e4eb08: OUTPUT: «$a = 2␤$b = 3␤»

[18:37] <[Coke]> shouldn't that still require var names in the parens, though?

[18:37] <[Coke]> (also is this one of the few places where we use parens, not just a comma?

[18:37] <[Coke]> few/only

[18:38] <[Coke]> m: my (2) = 2;

[18:38] <camelia> rakudo-moar 606e4eb08: ( no output )

[18:39] <[Coke]> m: my (2) = 2,3,4;

[18:39] <camelia> rakudo-moar 606e4eb08: ( no output )

[18:43] <jdv> how does that even make sense?

[18:48] *** sena_kun joined
[19:13] <[Coke]> ls

[20:58] <[Coke]> releasable6: status

[20:58] <releasable6> [Coke], Next release in ≈25 days and ≈22 hours. There are no known blockers. Changelog for this release was not started yet

[20:58] <releasable6> [Coke], Details: https://gist.github.com/59125bc6c42b0c20fc66ae5d5d98c704

[20:58] <[Coke]> \o/ it *was* cached, I didn't break it. :)

[21:03] <[Coke]> releasable6: status

[21:03] <releasable6> [Coke], Next release in ≈25 days and ≈21 hours. There are no known blockers. Changelog for this release was not started yet

[21:03] <releasable6> [Coke], Details: https://gist.github.com/c7fb9c4cd6d7fee01940d6890a7eb569

[21:03] <[Coke]> ... ok, it *has* started, stop caching things! :)

[21:04] <[Coke]> releasable6: status

[21:04] <releasable6> [Coke], Next release in ≈25 days and ≈21 hours. There are no known blockers. 14 out of 366 commits logged

[21:04] <releasable6> [Coke], Details: https://gist.github.com/8375974342711cb88c76d3f93d9830cf

[21:04] <[Coke]> .... where is it getting 366...

[21:05] <[Coke]> I did update https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft for 2025.04 already, trying to at least keep up with the rakuast commits which require processing but no thought.

[21:20] *** finanalyst left
[21:29] <nine> It makes "sense" once you see it as a signature declaration.

[21:29] <nine> The part in the parens in my ($a, $b) is a signature, same as on a routine.

[21:30] <nine> So my (2) is the equivalent of a sub (2).

[22:08] <Geth> ¦ rakudo/main: 5 commits pushed by (Stefan Seifert)++

[22:08] <Geth> ¦ rakudo/main: c92b798da9 | RakuAST: fix initializer type check to avoid subsets

[22:08] <Geth> ¦ rakudo/main: 083f0fb2f6 | RakuAST: support declarator type on subsets

[22:08] <Geth> ¦ rakudo/main: 3359acdc04 | RakuAST: support where clauses in signature declarations

[22:08] <Geth> ¦ rakudo/main: 6e6a78558c | RakuAST: support where clauses on terms in signature definitions

[22:08] <Geth> ¦ rakudo/main: 060f462fed | RakuAST: support sigilless where literals in signature declarations

[22:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/606e4eb08438...060f462fed7a

[22:08] <nine> And now we have that madness also with RakuAST ;)

[22:21] <lizmat> m: say Q|my (2)|.AST.DEPARSE   # wow

[22:21] <camelia> rakudo-moar 606e4eb08: OUTPUT: «my (2)␤␤»

[22:37] <lizmat> nine: looks like we lost t/12-rakuast/doc-declarator.rakutest after this last batch of commits

[22:37] <lizmat> No such method 'meta-object' for invocant of type 'RakuAST::Trait::Of'

[22:37] <lizmat> afk&

[23:19] <Geth> ¦ rakudo/main: dd0b647d45 | (Will Coleda)++ | docs/announce/YYYY.MM.md

[23:19] <Geth> ¦ rakudo/main: remove literal YYYY.MM.dd typo

[23:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dd0b647d45

[23:36] *** sena_kun left
[23:38] <coleman> This will become an emergency very soon unless addressed https://github.com/Raku/infra/issues/61

[23:55] <jdv> nine: oh geez

