[03:43] <timo> finished at 8 hours of elapsed time

[03:43] <timo> however, it didn't actually finish

[03:43] <timo> it got killed actually

[03:47] <timo> > due to memory used (60302766080) / total (66999218176) and swap used (17509400576) / total (19327344640) being more than 90.00%

[04:05] <timo> so i really don't know if it was making progress or if it was just infinitely recursing while building NFAs

[04:07] *** Xliff joined
[04:10] <Xliff> rakkable: eco-provides iptables

[04:10] <rakkable> Xliff, Looking for 'iptables' using 'eco-provides', please be patient!

[04:10] <tellable6> 2025-02-10T21:49:59Z #raku <librasteve> rakkable: mop

[04:11] <rakkable> Xliff, No occurrences found for 'eco-provides 'iptables''

[04:12] <Xliff> rakkable: eco-provides netfilter

[04:12] <rakkable> Xliff, Looking for 'netfilter' using 'eco-provides', please be patient!

[04:12] <rakkable> Xliff, No occurrences found for 'eco-provides 'netfilter''

[04:33] *** nine_ joined
[04:33] *** nine left
[04:33] *** camelia left
[04:40] *** camelia joined
[04:42] *** guifa left
[06:21] *** Xliff left
[06:21] *** Xliff joined
[09:39] *** sena_kun joined
[10:21] *** patrickb left
[10:21] *** greenfork left
[10:34] *** librasteve_ left
[10:40] <lizmat> eco-provides netfilter --ignorecase

[10:40] <lizmat> rakkable: eco-provides netfilter --ignorecase

[10:40] <rakkable> lizmat, Looking for 'netfilter' --ignorecase using 'eco-provides', please be patient!

[10:40] <rakkable> lizmat, No occurrences found for 'eco-provides 'netfilter' --ignorecase'

[11:00] <Geth> ¦ nqp/main: 0b64382627 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[11:00] <Geth> ¦ nqp/main: Bump NQP to get utf8 decode fix fix

[11:00] <Geth> ¦ nqp/main: 

[11:00] <Geth> ¦ nqp/main: MasterDuke++

[11:00] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/0b64382627

[11:10] <lizmat> meh, MoarVM of course  :-(

[11:28] <Geth> ¦ rakudo/main: 22367bb973 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[11:28] <Geth> ¦ rakudo/main: Bump NQP to get utf8 decode fix, MasterDuke++

[11:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/22367bb973

[11:35] *** greenfork joined
[11:35] *** patrickb joined
[11:45] <Geth> ¦ rakudo/main: 6 commits pushed by (Stefan Seifert)++

[11:45] <Geth> ¦ rakudo/main: c26e7af3a0 | RakuAST: fix pointy blocks with loop modifiers

[11:45] <Geth> ¦ rakudo/main: a9bce4d5af | RakuAST: do not overwrite $_ in statements with for postfix

[11:45] <Geth> ¦ rakudo/main: d77a3bd982 | Fix nested thunks not finding variables declared by the outer thunk

[11:45] <Geth> ¦ rakudo/main: 9a96e8b2c3 | RakuAST: Fix code order in nested thunks

[11:45] <Geth> ¦ rakudo/main: e1b9fd8351 | RakuAST: support thunking of variable declarations

[11:45] <Geth> ¦ rakudo/main: 66de0b44cd | RakuAST: sink thunked expressions if necessary

[11:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/22367bb9737b...66de0b44cded

[11:49] <nine_> 1159 before and 1156 after git pull -r

[11:49] <lizmat> wheeee!

[11:51] <lizmat> nine_'s back!

[12:00] *** nine_ is now known as nine

[12:52] <Xliff> \o/ # nine

[12:52] <Xliff> nine: Did you enjoy your break?

[13:04] <Geth> ¦ rakudo/main: 50d8725ab8 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[13:04] <Geth> ¦ rakudo/main: RakuAST: fix overzealous setting of post constraints on parameters

[13:04] <Geth> ¦ rakudo/main: 

[13:04] <Geth> ¦ rakudo/main: Parameters with coercion types got that type also set as post constraint

[13:04] <Geth> ¦ rakudo/main: when we meant to only do so for subset types.

[13:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/50d8725ab8

[13:04] <Geth> ¦ rakudo/main: 1a56f5b29a | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[13:04] <nine> 1157

[13:04] <Geth> ¦ rakudo/main: RakuAST: cope with exceptions from ACCEPTS in check for duplicate multi sigs

[13:04] <Geth> ¦ rakudo/main: 

[13:04] <Geth> ¦ rakudo/main: Trying to match signatures at compile time can lead to exceptions, i.e.

[13:04] <Geth> ¦ rakudo/main: when one or both of the signatures contain types with customized ACCEPTS

[13:04] <Geth> ¦ rakudo/main: methods. In this case we just cannot know whether the signatures are

[13:04] <Geth> ¦ rakudo/main: identical, thus we should fail open and assume that the programmer knows

[13:04] <Geth> ¦ rakudo/main: what they're doing.

[13:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1a56f5b29a

[13:10] <nine> Xliff: well to be honest I just worked on different things :) Though to be even more honest I also played a lot of OpenTTD in my evenings which I did enjoy even though viewed from a certain perspective is not that different from programming and can be just as frustrating

[13:10] <Xliff> OpenTTD?

[13:17] <nine> Open source remake of Transport Tycoon Deluxe. It's a game that's about as old as it looks :D

[13:17] <Xliff> Ah, nvm. Found the video.

[13:17] <Xliff> I--+

[13:18] <Xliff> It's funny. It took me a while to appreciate that the vintage of the game does not determine its worth. In fact, for the good ones, they age like fine wine.

[13:18] <Xliff> Hope you enjoyed yourself.

[13:33] *** explorer joined
[13:35] *** explorer left
[13:36] *** rakkable left
[13:36] *** rakkable joined
[13:38] *** explorer joined
[13:40] <nine> lizmat: I think both the test and the old frontend are wrong https://github.com/Raku/roast/commit/98bc514cc9

[13:42] <nine> According to the docs "To avoid ambiguity when chaining metaoperators, use square brackets to help the compiler understand you." Unfortunately the docs don't explain what exactly is the disambiguated meaning, but the one example makes me assume that the meta operator applies to what's within the brackets. In this case this would be the `and` operator

[13:42] <nine> Thus `and` is what we cannot meta, not the assignment.

[13:44] <nine> On the other hand reversing arguments makes sense precisely for non-symmetric operators like `and`, so why would this trigger the error?

[13:45] <nine> Unfortunately no where is explained what "too fiddly" actually means. It is mentioned in the glossary but only as "Too complicated to apply a metaop to. See operator.". Great! The operator cannot be meta'ed because it we cannot apply a metaop.

[14:07] <Geth> ¦ rakudo/main: d2ad724f0c | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[14:07] <Geth> ¦ rakudo/main: RakuAST: fix generating "too fiddly" error for MetaInfix::Assign

[14:07] <Geth> ¦ rakudo/main: 

[14:07] <Geth> ¦ rakudo/main: Fixes my $a; $a R[and]= 42; # to fail with correct message

[14:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d2ad724f0c

[14:08] <nine> Ok, it was just a bug in RakuAST after all. And still that it's almost impossible to understand that example code from the docs

[14:31] <nine> Btw. it's telling that even t/12-rakuast/xx-fixed-in-rakuast.rakutest fails when actually run with RakuAST :/

[14:33] <Geth> ¦ rakudo/main: 19770e453f | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[14:33] <Geth> ¦ rakudo/main: RakuAST: add a bunch of missing operators to parser

[14:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/19770e453f

[14:33] <Geth> ¦ rakudo/main: 77631d9b41 | (Stefan Seifert)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[14:33] <Geth> ¦ rakudo/main: RakuAST: fix compilation failure with `is required`

[14:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/77631d9b41

[14:50] <[Coke]> (fails in rakuast) can we add that specifically to the CI?

[14:53] *** nine left
[14:53] *** nine joined
[16:37] <Geth> ¦ rakudo/main: 9943330403 | (Stefan Seifert)++ | 2 files

[16:37] <Geth> ¦ rakudo/main: RakuAST: fix anonymous hash vars not getting their shape

[16:37] <Geth> ¦ rakudo/main: 

[16:37] <Geth> ¦ rakudo/main: Fixes my %{Mu} = :1; # to actually be an object hash

[16:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9943330403

[16:37] <Geth> ¦ rakudo/main: 045c280f9d | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[16:37] <Geth> ¦ rakudo/main: RakuAST: Remove counter productive special handling of shaped hashes

[16:37] <Geth> ¦ rakudo/main: 

[16:37] <Geth> ¦ rakudo/main: This fixes is defualt on shaped hashes

[16:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/045c280f9d

[16:38] *** dawids joined
[17:04] *** sena_kun left
[17:45] *** dawids left
[20:17] *** guifa joined
[21:07] *** rakkable left
[21:07] *** rakkable joined
[21:08] *** rakkable left
[21:08] *** rakkable joined
[21:22] *** rakkable left
[21:22] *** rakkable joined
[21:25] *** rakkable left
[21:26] *** rakkable joined
[21:29] *** rakkable left
[21:29] *** rakkable joined
[21:54] *** sena_kun joined
[22:45] <Geth> ¦ rakudo/main: a440fb843b | (Stefan Seifert)++ | 2 files

[22:45] <Geth> ¦ rakudo/main: RakuAST: fix &?ROUTINE and other implicits missing from methods

[22:45] <Geth> ¦ rakudo/main: 

[22:45] <Geth> ¦ rakudo/main: A simple coding error replaced the standard list of implicits with self

[22:45] <Geth> ¦ rakudo/main: instead of adding self. Additionally we always have to make &?ROUTINE

[22:45] <Geth> ¦ rakudo/main: available as the list of implicits gets generated too early for methods

[22:45] <Geth> ¦ rakudo/main: to peek into the method's body.

[22:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a440fb843b

[22:45] <nine> And that's 1161

[23:07] *** sena_kun left
[23:07] *** sena_kun joined
[23:22] *** sena_kun left
[23:39] *** explorer left
