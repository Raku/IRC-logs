[01:29] *** nine left
[01:30] *** nine joined
[02:50] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5847: Use var name in wrong literal type exception

[02:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5847

[07:58] *** rakkable left
[07:59] *** rakkable joined
[07:59] *** lizmat left
[09:09] *** sena_kun joined
[11:46] *** sena_kun left
[11:47] *** sena_kun joined
[11:52] *** sena_kun left
[11:53] *** sena_kun joined
[11:56] *** sena_kun left
[11:57] *** sena_kun joined
[12:07] *** JimmyZhuo joined
[12:16] *** sena_kun left
[12:17] *** sena_kun joined
[13:32] *** greenfork_ joined
[13:35] *** JimmyZhuo_ joined
[13:40] *** JimmyZhuo left
[13:40] *** greenfork left
[13:40] *** greenfork_ is now known as greenfork

[13:43] *** JimmyZhuo_ left
[14:13] <[Coke]> t/12-rakuast/xx-fixed-in-rakuast.rakutest                     (Wstat: 0 Tests: 105 Failed: 0) TODO passed:   82-83

[14:16] <Geth> ¦ rakudo/main: 8ef1651c75 | (Will Coleda)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[14:16] <Geth> ¦ rakudo/main: These tests pass in default grammar

[14:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8ef1651c75

[14:29] <[Coke]> only 3 failures on AST/make test

[14:29] <[Coke]> (test files)

[14:30] <[Coke]> we still at 1349/1350 for roast?

[14:32] <[Coke]> (also, is that spectest on those runs, or stresstest?)

[14:45] <nine> [Coke]: it's 1349/1352

[14:45] <nine> for spectest

[14:56] <[Coke]> ok.

[14:56] <[Coke]> Thanks!

[14:57] <[Coke]> note: we have test *failures* (not just passing todos) in 6.c-errata.

[15:02] <Geth> ¦ roast/coke/6.c-cleanup: eb4c95cae2 | (Will Coleda)++ | 5 files

[15:02] <Geth> ¦ roast/coke/6.c-cleanup: un-TODO several passing tests

[15:02] <Geth> ¦ roast/coke/6.c-cleanup: review: https://github.com/Raku/roast/commit/eb4c95cae2

[15:06] <Geth> ¦ roast: coke++ created pull request #874: un-TODO several passing tests

[15:06] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/874

[15:06] <[Coke]> some of those are tagged as "nom regression", btw. :)

[15:14] <[Coke]> github: coke mentioned this PR 3 days ago!

[15:14] <[Coke]> (go home github, you're drunk)

[15:31] *** sena_kun left
[15:37] *** finanalyst left
[15:48] *** sena_kun joined
[15:50] <[Coke]> ugexe: added coke/io-socket-async branch to roast to try to better fix that io sync test - It's now dying instead.

[15:51] <[Coke]> https://github.com/Raku/roast/commit/fb6d336e55d796e0f097436ead59789f60411689

[15:53] <[Coke]> (note: I do not mean that it dying is better. :)

[16:05] *** sena_kun left
[16:33] <[Coke]> Fixed. There are other hardcoded ports in the file that *aren't* failing here (and presumably not elsewhere)

[16:35] <[Coke]> That should make the test a little more reliable, at least.

[16:35] <ugexe> i think in general those should be using port 0

[16:35] <ugexe> since the tests can be run in parallel 

[16:37] <[Coke]> ok. I'll see about updating those as well.

[16:43] <Geth> ¦ roast/coke/io-socket-async: bb7d8b75e0 | (Will Coleda)++ | S32-io/IO-Socket-Async.t

[16:43] <Geth> ¦ roast/coke/io-socket-async: Use dynamic port where appropriate

[16:43] <Geth> ¦ roast/coke/io-socket-async: review: https://github.com/Raku/roast/commit/bb7d8b75e0

[16:46] <[Coke]> https://github.com/Raku/roast/pull/875

[16:46] <[Coke]> squashed it all on the branch.

[17:05] *** finanalyst joined
[18:12] *** lizmat joined
[18:14] <Geth> ¦ roast/coke/shortcuts: d79f40d836 | (Will Coleda)++ | S03-operators/shortcuts.t

[18:14] <Geth> ¦ roast/coke/shortcuts: Remove unused test file that doesn't compile.

[18:14] <Geth> ¦ roast/coke/shortcuts: 

[18:14] <Geth> ¦ roast/coke/shortcuts: Resolves #157

[18:14] <Geth> ¦ roast/coke/shortcuts: review: https://github.com/Raku/roast/commit/d79f40d836

[18:15] <Geth> ¦ roast: coke++ created pull request #876: Remove unused test file that doesn't compile.

[18:15] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/876

[18:29] <[Coke]> Anyone know if we're testing Test::Helpers in t/spec, or is it just "passing the spectest means it works"?

[18:29] *** lizmat left
[18:58] <Geth> ¦ roast: 896a34fefc | (Will Coleda)++ | packages/Test-Helpers/lib/Test/Util.rakumod

[18:58] <Geth> ¦ roast: Update to use current language name.

[18:58] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/896a34fefc

[19:10] <ugexe> we do not explicitly test it (or the almost identical one in t/packages from the rakudo repo). i do not think anyone has ever thought about if it should have its own tests or not, so i wouldnt assume the current state is the way it is due to some previous considerations

[22:01] *** guifa joined
[22:17] *** lizmat joined
[22:21] <lizmat> .

[22:53] *** lizmat_ joined
[22:56] *** lizmat left
[23:09] <japhb> ,

[23:09] <Geth> ¦ rakudo/main: 7cf3b085c9 | (Daniel Green)++ | src/core.c/Exception.rakumod

[23:09] <Geth> ¦ rakudo/main: Use var name in wrong literal type exception

[23:09] <Geth> ¦ rakudo/main: 

[23:09] <Geth> ¦ rakudo/main: Now something like `my int $a = 1e2` mentions `$a` in the message.

[23:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7cf3b085c9

[23:09] <Geth> ¦ rakudo/main: be3d06a711 | MasterDuke17++ (committed using GitHub Web editor) | src/core.c/Exception.rakumod

[23:09] <Geth> ¦ rakudo/main: Merge pull request #5847 from MasterDuke17/use_var_name_in_wrong_literal_type_exception

[23:09] <Geth> ¦ rakudo/main: 

[23:09] <Geth> ¦ rakudo/main: Use var name in wrong literal type exception

[23:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/be3d06a711

[23:17] <timo> :

[23:36] *** lizmat_ left
[23:43] *** MasterDuke joined
[23:44] <MasterDuke> nine++ for sure, impressive work

[23:45] <MasterDuke> think it would make sense to do a preliminary blin run with `RAKUDO_RAKUAST=1` to get a heads up what the fallout looks like?

[23:46] <MasterDuke> also, has there been any thought put into how to port optimizations out of src/Perl6/Optimizer.nqp ?

[23:49] <MasterDuke> and/or, what are the next steps for speeding up its parsing? iirc, stage parse for CORE.c.setting on the bootstrap branch was about 30% slower

[23:54] *** finanalyst left
