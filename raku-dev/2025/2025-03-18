[01:38] *** MasterDuke joined
[01:39] <MasterDuke> here's an interesting situation

[01:39] <MasterDuke> m: q|my $১০kinds;|.EVAL; CATCH { dd $_ }

[01:39] <camelia> rakudo-moar 26a9c1a70: OUTPUT: «X::Syntax::Variable::Numeric.new(what => "variable", pos => 6, filename => "/home/camelia/EVAL_0", line => 1, directive-filename => Any, column => Any, modules => [], is-compile-time => 1, pre => "my \$১০", post => "kinds;", highexpect => [])␤==…»

[01:40] <MasterDuke> m: q|my $১০kinds;|.AST.EVAL; CATCH { dd $_ }

[01:40] <camelia> rakudo-moar 26a9c1a70: OUTPUT: «X::Syntax::Confused.new(reason => "Two terms in a row", pos => 4, filename => "/home/camelia/EVAL_0", line => 1, directive-filename => Any, column => Any, modules => [], is-compile-time => Bool::True, pre => "my \$", post => "১০kinds;", highexpect…»

[01:41] <MasterDuke> it looked like an easy fix. add the missing `[<?{ $*IN-DECL }> <.typed-panic: "X::Syntax::Variable::Numeric">]?` to `token variable`, so it looks identical to the legacy version

[01:44] <MasterDuke> but that didn't change anything. and then i noticed the error is coming from `eat-terminator`. it looks like it goes straight through <statementlist> and then dies in <eat-terminator>

[01:45] <Geth> ¦ problem-solving: clsn assigned to samcv Issue Regex matching and combining characters https://github.com/Raku/problem-solving/issues/471

[01:52] <MasterDuke> ah, the legacy version of `token variable` has a different ordering of the alternations

[01:54] <MasterDuke> it uses `|` for the alternations, which is LTM, so you would think the order doesn't matter...but let's try re-ordering to be the same as legacy...

[02:17] *** MasterDuke left
[04:19] *** codesections joined
[04:34] *** codesections left
[04:34] *** codesections1 joined
[04:34] *** codesections1 left
[04:35] *** codesections joined
[04:55] *** codesections left
[04:56] *** codesections joined
[05:22] *** codesections left
[06:35] *** JimmyZhuo joined
[06:42] <JimmyZhuo> nine: 'class D { method d { $!d = 1 }};' vs 'role E { method e { $!e = 1 }}' , the Raku Action performs a '$COMPUNIT.check($RESOLVER)' for the 'class D', but didn't for 'Role E', I added 'RakuAST::Var::Attribute' check  to  RakuAST::Var::Attribute, and it's only works for the 'class D', How to make

[06:42] <JimmyZhuo> it works for  role ? 

[06:43] <JimmyZhuo> I added 'X::Attribute::Undeclared' check to RakuAST::Var::Attribute

[06:53] *** JimmyZhuo left
[06:59] <nine> JimmyZhuo: I'm confused. The CompUnit's check should always be called - unless there was a panic before we get there

[06:59] <tellable6> nine, I'll pass your message to JimmyZhuo

[07:38] <nine> I'm working on a problem where a Seq contained in a List gets consumed prematurely when the List is destructured by a for loop.

[07:39] <nine> The problem comes from List's Capture coercer method. It contains this loop:

[07:39] <nine> nqp::istype(($v := nqp::atpos($!reified, $i)),Pair) ?? nqp::bindkey($hash, $v.key.Str, $v.value) !! nqp::push($list,$v) while nqp::islt_i(++$i,$elems)

[07:40] <nine> The Seq gets consumed because the ternary here gets sunk and nqp::push returns the pushed value. Thus the value (our Seq) gets sunk which makes it consume the iterator its based on.

[07:40] <nine> Now my real problem is: I think that's entirely correct behavior.

[07:44] <nine> m: my $i = 2; class Foo { method sink() { say "{self.^name} sank" } }; class Bar is Foo { }; $i > 1 ?? Foo.new !! Bar.new while $i--

[07:44] <camelia> rakudo-moar 26a9c1a70: OUTPUT: «Bar sank␤Bar sank␤»

[07:44] <nine> This ^^^ seems to agree with me.

[07:45] <nine> But for some reason:

[07:45] <nine> m: my $i = 3; class Foo { method sink() { say "{self.^name} sank" } }; use nqp; my $l := nqp::list; class Bar is Foo { }; $i > 1 ?? nqp::push($l, Foo.new) !! nqp::push($l, Bar.new) while $i--

[07:45] <camelia> rakudo-moar 26a9c1a70: ( no output )

[07:46] <nine> m: use nqp; say nqp::push(nqp::list, "pushed")

[07:46] <camelia> rakudo-moar 26a9c1a70: OUTPUT: «pushed␤»

[07:48] <nine> The QAST does know that it should be sunk: - QAST::Op(while) <sunk> :statement_id<12> $i > 1 ?? nqp::push($l, Foo.new) !! nqp::push($l, ...

[07:48] <nine> And: - QAST::Op(if &infix:<??>) <sunk okifnil> ?? nqp::push($l, Foo.new) !!

[08:02] *** finanalyst joined
[08:54] <Geth> ¦ rakudo/main: 02e32a22ea | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[08:54] <Geth> ¦ rakudo/main: RakuAST: don't create implicit slurpy hash when there's a capture parameter

[08:54] <Geth> ¦ rakudo/main: 

[08:54] <Geth> ¦ rakudo/main: In method foo(|c) the c parameter already slurps all named args. There's

[08:54] <Geth> ¦ rakudo/main: no need for an implicit *%_ in such cases, so we can avoid the effort of

[08:54] <Geth> ¦ rakudo/main: setting it up.

[08:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/02e32a22ea

[08:54] <Geth> ¦ rakudo/main: 773f9b9793 | (Stefan Seifert)++ | 2 files

[08:54] <Geth> ¦ rakudo/main: RakuAST: don't sink expressions with loop modifiers

[08:54] <Geth> ¦ rakudo/main: 

[08:54] <Geth> ¦ rakudo/main: For unknown reason we must not sink the bodies of loops created from

[08:54] <Geth> ¦ rakudo/main: statement modifiers. This restriction may not even have been

[08:54] <Geth> ¦ rakudo/main: intentional, but it's certainly being relied upon by code in the setting

[08:54] <Geth> ¦ rakudo/main: like this from List.Capture:

[08:54] <Geth> ¦ rakudo/main: 

[08:54] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>

[08:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/773f9b9793

[08:54] <nine> Well, I guess it's just yet another one of these thousands of rules.

[08:58] *** sena_kun joined
[09:49] *** JimmyZhuo joined
[10:04] <JimmyZhuo> $ RAKUDO_RAKUAST=1 ./rakudo-m --ll-exception -e 'role E { method e { $!e = 1 }};'

[10:04] <JimmyZhuo> No $!e attribute in E

[10:04] <JimmyZhuo>    at src\Perl6\Metamodel\AttributeContainer.nqp:91  (E:\OpenSource\Rakudo\blib/Perl6/Metamodel.moarvm:get_attribute_for_usage)

[10:04] <JimmyZhuo>  from src\Raku\ast\variable-access.rakumod:303  (E:\OpenSource\Rakudo\blib/Perl6/BOOTSTRAP/v6c.moarvm:IMPL-EXPR-QAST)

[10:04] <JimmyZhuo>  from src\Raku\ast\expressions.rakumod:58  (E:\OpenSource\Rakudo\blib/Perl6/BOOTSTRAP/v6c.moarvm:IMPL-TO-QAST)

[10:04] <tellable6> 2025-03-18T06:59:25Z #raku-dev <nine> JimmyZhuo: I'm confused. The CompUnit's check should always be called - unless there was a panic before we get there

[10:05] <JimmyZhuo> nine: for role: IMPL-EXPR-QAST is executed before check

[10:05] <lizmat> JimmyZhuo: that feels.. valid 

[10:05] <lizmat> ?

[10:05] <JimmyZhuo> nine: and for class, check is excuted before IMPL-EXPR-QAST

[10:05] <lizmat> I mean, the error

[10:08] <Geth> ¦ rakudo/main: ee50ab5be3 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[10:08] <Geth> ¦ rakudo/main: RakuAST: Fix stupid copy-pasto in exception class naming

[10:08] <Geth> ¦ rakudo/main: 

[10:08] <Geth> ¦ rakudo/main: The name of the class is **without** .new!  Fixes #5798

[10:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ee50ab5be3

[10:09] <JimmyZhuo> lizmat: not for consistency

[10:15] <Geth> ¦ rakudo/main: c5fa7bb363 | (Elizabeth Mattijsen)++ | t/12-rakuast/highlight.rakutest

[10:15] <Geth> ¦ rakudo/main: RakuAST: fix highlighting test

[10:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c5fa7bb363

[10:26] <Geth> ¦ rakudo/main: fba808c224 | (Elizabeth Mattijsen)++ | src/Raku/ast/resolver.rakumod

[10:26] <Geth> ¦ rakudo/main: RakuAST: make fallback error handling more informative

[10:26] <Geth> ¦ rakudo/main: 

[10:26] <Geth> ¦ rakudo/main: Since the name of the exception that was attempted to be resolved

[10:26] <Geth> ¦ rakudo/main: is known, show that.  That would have helped a *lot* when trying

[10:26] <Geth> ¦ rakudo/main: to fix #5798  :-(

[10:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fba808c224

[10:38] <JimmyZhuo> nine: I found the problem: the IMPL-COMPOSE of RakuAST::Role calls IMPL-FINISH-ROLE-BODY, which calls IMPL-QAST-BLOCK before checktime, while RakuAST::Class does not. so I can't do the check for role

[10:38] <JimmyZhuo> but I don't know how to deal it

[10:41] <lizmat> bisectable6: old=2025.01 say Q|my role A { has $.a = 42 }|.AST.statements[0].expression

[10:41] <bisectable6> lizmat, Bisecting by output (old=2025.01 new=fba808c) because on both starting points the exit code is 0

[10:41] <bisectable6> lizmat, bisect log: https://gist.github.com/a45b5a4d174eca9d615a7023f29878a7

[10:41] <bisectable6> lizmat, (2025-03-05) https://github.com/rakudo/rakudo/commit/00a93bf82750ba9c033612f64b1a5a58d63c9e14

[10:46] <nine> JimmyZhuo: CHECK should not have any influence on IMPL-QAST-BLOCK and vice versa.

[10:47] <nine> JimmyZhuo: however it's possible that IMPL-QAST-BLOCK fails because of a condition that you'd report as error in PERFORM-CHECK. That sucks and my only solution there is to try to detect it in IMPL-QAST-BLOCK and fail gracefully.

[10:52] <nine> lizmat: oh that superfluous .new looks super devious. Confusing for sure

[10:53] <nine> lizmat: in the bootstrap-rakuast branch the exception type fallback is already implemented :/

[10:54] <lizmat> sorry about that...

[11:03] *** finanalyst left
[11:25] <lizmat> nine: did you look / fix the problems with "make test" t/12rakuast tests in the bootstrapped version ?

[11:25] <lizmat> feels like I'm going to be in your way  :-(

[11:28] <nine> Haven't looked at make test in quite a while

[11:29] <lizmat> ok, the role one is baffling me...  the other ones I can work on, fwiw

[11:30] <lizmat> m: use lib "lib"; use NativeCall::Compiler::GNU; use NativeCall::Compiler::MSVC; say NativeCall::.keys

[11:30] <camelia> rakudo-moar fba808c22: OUTPUT: «(Compiler Types)␤»

[11:30] <lizmat> hmmm... for me, that says (Compiler) locally

[11:31] <lizmat> m: use NativeCall::Compiler::GNU; use NativeCall::Compiler::MSVC; say NativeCall::.keys

[11:31] <camelia> rakudo-moar fba808c22: OUTPUT: «(Compiler Types)␤»

[11:32] <lizmat> probably because "use lib 'lib'" doesn't work for Camelia, and thus gets the installed versions, and that *does* supply NativeCall::Types

[11:32] <lizmat> but should it ?

[11:38] <nine> You sure you want to dig into that particular cluster fuck? :D

[11:38] <nine> Importing module symbols is lexical - except when it isn't

[11:40] <lizmat> yeah... I'll just add a "use NativeCall::Types" to the test file

[11:40] <Geth> ¦ rakudo/main: f646c5a244 | (Stefan Seifert)++ | 2 files

[11:40] <Geth> ¦ rakudo/main: RakuAST: fix missing condition modifier on statements with loop modifiers

[11:40] <Geth> ¦ rakudo/main: 

[11:40] <Geth> ¦ rakudo/main: Commit 95f6c5b4e9697d6a2fc66ade32d2333d375e0ac8 made us omit condition

[11:40] <Geth> ¦ rakudo/main: modifiers on statements that also carry loop modifiers as the condition

[11:40] <Geth> ¦ rakudo/main: would be handled inside the thunk. For StatementModifier::WhileUntil

[11:40] <Geth> ¦ rakudo/main: however we do not thunk in certain conditions. Then we do have to wrap

[11:40] <Geth> ¦ rakudo/main: the expression in the condition modifier.

[11:41] <lizmat> nine: a gist about the role issue: https://gist.github.com/lizmat/4b7fb14673ca0bdcef9925e23c98d136

[11:41] <Geth> ¦ rakudo/main: 

[11:41] <Geth> ¦ rakudo/main: Fixes: foo unless bar while baz;

[11:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f646c5a244

[11:41] <nine> 1237 fully bootstrapped

[11:43] <nine> lizmat: so apparently a RakuAST::Parameter did not get its begin time

[11:44] <lizmat> there is no parameter?

[11:44] <lizmat> unless maybe implicit in the role parameterization ?

[11:45] <lizmat> I mean, the role body is transmogrified into a sub, no ?

[11:45] <nine> RakuAST::RoleBody isa RakuAST::Sub

[11:45] <nine> The signature at least has the ::$?CLASS capture

[11:46] <lizmat> but is that something that you would need to specify in programmatically creating a role ?

[11:47] <Geth> ¦ rakudo/main: f9dd316561 | (Elizabeth Mattijsen)++ | t/04-nativecall/24-cpp_param_letter.t

[11:47] <Geth> ¦ rakudo/main: Make test always work

[11:47] <Geth> ¦ rakudo/main: 

[11:47] <Geth> ¦ rakudo/main: Apparently the test file depends on NativeCall::Types being

[11:47] <Geth> ¦ rakudo/main: implicitely imported, but sometimes it apparently isnt't.

[11:47] <Geth> ¦ rakudo/main: Add a "use NativeCall::Types" to make sure the necessary

[11:47] <Geth> ¦ rakudo/main: stuff is always known

[11:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f9dd316561

[11:49] <nine> Btw. since I notice that I do complain about Raku a lot lately. The lexical import cluster fuck I mentioned is on me. When I implemented lexical module loading I really had no idea what I was doing. I took it as far as I could without having to ask the hard questions and that's where we are now.

[11:50] <lizmat> right, understood, and I won't hold it against you: on the contrary

[11:50] <lizmat> only people that actually make things, make mistakes

[11:50] <lizmat> hopefully we learn from them  :-)

[11:51] <nine> Well I took the lesson to heart and stay far away from language design =) Precicely because it's so hard to anticipate all implications

[12:04] <Geth> ¦ rakudo/main: 69dc86fa5a | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.rakumod

[12:04] <Geth> ¦ rakudo/main: RakuAST: fix deparsing of 3²²

[12:04] <Geth> ¦ rakudo/main: 

[12:04] <Geth> ¦ rakudo/main: The power value is the real thing already and doesn't need

[12:04] <Geth> ¦ rakudo/main: additional deparsing.

[12:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/69dc86fa5a

[12:15] <Geth> ¦ rakudo: zhuomingliang++ created pull request #5820: Throw X::Attribute::Undeclared, pass the test of "class D { method d { $!e = 1 }};"

[12:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5820

[12:17] <lizmat> bisectable6: old=2025.02 say Q|s/o/x/|.AST.EVAL

[12:17] <bisectable6> lizmat, On both starting points (old=2025.02 new=69dc86f) the exit code is 1 and the output is identical as well

[12:17] <bisectable6> lizmat, Output on both points: «Use of uninitialized value $_ of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at EVAL_0 line 1␤===SORRY!===␤Unknown compilation input 'qast'␤»

[12:17] <lizmat> bisectable6: old=2025.01 say Q|s/o/x/|.AST.EVAL

[12:17] <bisectable6> lizmat, Bisecting by exit code (old=2025.01 new=69dc86f). Old exit code: 0

[12:17] <bisectable6> lizmat, bisect log: https://gist.github.com/f655b3f481ad15438eb10a68993d070a

[12:17] <bisectable6> lizmat, (2025-02-16) https://github.com/rakudo/rakudo/commit/cd2ed227be7a81aa4a494d002e375ada2f4ac311

[12:17] <Geth> ¦ rakudo/bootstrap-rakuast: 27 commits pushed by (Stefan Seifert)++

[12:17] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/18106bf302fb...78094f5f66ba

[12:18] <nine> 1244 fully bootstrapped. That's exactly the state of 2 weeks ago :)

[12:18] <lizmat> nine: is say Q|s/o/x/|.AST.EVAL something that's fixed on the bootstrapped version ?

[12:19] <lizmat> cd2ed227be broke t/12-rakuast/regex-substitution.rakutest

[12:19] <linkable6> (2025-02-16) https://github.com/rakudo/rakudo/commit/cd2ed227be RakuAST: work around "Misordered regex compilation" problem

[12:19] <JimmyZhuo> nine++ for the hard work

[12:20] <nine> rakudo (bootstrap-rakuast *<>)> RAKUDO_RAKUAST=1 ./rakudo-m -e 'say Q|s/o/x/|.AST.EVAL'

[12:20] <nine> Type check failed in assignment to $grammar; expected Mu but got Raku::Grammar (Raku::Grammar.new() ...)

[12:20] <lizmat> and without RAKUDO_RAKUAST=1 ?

[12:21] <nine> Can't run the bootstrapped version without RAKUDO_RAKUAST=1: Missing or wrong version of dependency 'gen/moar/BOOTSTRAP/v6c.nqp' (from 'gen/moar/CORE.c.setting')

[12:21] <nine> That grammar error comes even with Q||.AST.EVAL

[12:22] <lizmat> ack

[12:23] <lizmat> I'm just going through the "make test" errors, making sure "make test" gets clean before the release on Sun

[12:24] <lizmat> perhaps we should disable the tests that are failing atm, and re-instate them after the bootstrapped version becomes main ?

[12:25] <lizmat> bisectable6: old=2025.01 my $foo; say Q|++$foo while $foo < 5|.AST.EVAL

[12:25] <bisectable6> lizmat, On both starting points (old=2025.01 new=69dc86f) the exit code is 0 and the output is identical as well

[12:25] <bisectable6> lizmat, Output on both points: «Use of uninitialized value of type Any in numeric context␤Nil␤  in block <unit> at EVAL_0 line 1␤»

[12:25] <lizmat> heh

[12:25] <lizmat> bisectable6: old=2024.08 my $foo; say Q|++$foo while $foo < 5|.AST.EVAL

[12:25] <bisectable6> lizmat, On both starting points (old=2024.08 new=69dc86f) the exit code is 0 and the output is identical as well

[12:25] <bisectable6> lizmat, Output on both points: «Use of uninitialized value of type Any in numeric context␤Nil␤  in block <unit> at EVAL_0 line 1␤»

[12:27] <lizmat> m: my $foo; say Q|++$foo while $foo < 5|.AST.EVAL; say $foo

[12:27] <camelia> rakudo-moar 69dc86fa5: OUTPUT: «Use of uninitialized value of type Any in numeric context␤Nil␤5␤  in block <unit> at EVAL_0 line 1␤»

[12:28] <lizmat> so it does work, just produces a warning somewhere

[12:30] <nine> As it should. After all $foo is uninitialized when entering the loop, yet we are doing a numeric comparison on it

[12:32] <Geth> ¦ rakudo/main: a2f7c1aa7c | (Elizabeth Mattijsen)++ | t/12-rakuast/statement-mods.rakutest

[12:32] <Geth> ¦ rakudo/main: RakuAST: remove unwanted Statement::Expression

[12:32] <Geth> ¦ rakudo/main: 

[12:32] <Geth> ¦ rakudo/main: Apparently in an older version of the Raku Grammar this was needed

[12:32] <Geth> ¦ rakudo/main: for the statement modifier, but not anymore.  A nice simplification!

[12:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a2f7c1aa7c

[12:32] <lizmat> nine: right

[12:36] <nine> Huh...that's an odd one. From the very commit introducing RakuAST::StatementModifier it has taken a RakuAST::Expression (which a Statement::Expression isn't)

[12:41] <lizmat> well, the grammar doesn't create it (anymore)

[12:41] <lizmat> m: my $foo; say Q|++$foo while $foo < 5|.AST.statements[0].loop-modifier

[12:41] <camelia> rakudo-moar 69dc86fa5: OUTPUT: «RakuAST::StatementModifier::While.new(␤  RakuAST::ApplyInfix.new(␤    left  => RakuAST::Var::Lexical.new("\$foo"),␤    infix => RakuAST::Infix.new("<"),␤    right => RakuAST::IntLiteral.new(5)␤  )␤)␤»

[12:53] <lizmat> bisectable6: old=2025.01 my $foo; say Q|++$foo while $foo < 5|.AST.statements[0].loop-modifier

[12:53] <bisectable6> lizmat, On both starting points (old=2025.01 new=69dc86f) the exit code is 0 and the output is identical as well

[12:53] <bisectable6> lizmat, Output on both points: «RakuAST::StatementModifier::While.new(␤  RakuAST::ApplyInfix.new(␤    left  => RakuAST::Var::Lexical.new("\$foo"),␤    infix => RakuAST::Infix.new("<"),␤    right => RakuAST::IntLiteral.new(5)␤  )␤)␤»

[12:53] <lizmat> bisectable6: old=2024.08 my $foo; say Q|++$foo while $foo < 5|.AST.statements[0].loop-modifier

[12:53] <bisectable6> lizmat, On both starting points (old=2024.08 new=69dc86f) the exit code is 0 and the output is identical as well

[12:53] <bisectable6> lizmat, Output on both points: «RakuAST::StatementModifier::While.new(␤  RakuAST::ApplyInfix.new(␤    left  => RakuAST::Var::Lexical.new("\$foo"),␤    infix => RakuAST::Infix.new("<"),␤    right => RakuAST::IntLiteral.new(5)␤  )␤)␤»

[12:53] <lizmat> ok, apparently a long time ago already

[12:54] <lizmat> bisectable6: old=2025.01 say Q|my $a is default(42)|.AST.DEPARSE

[12:54] <bisectable6> lizmat, Bisecting by output (old=2025.01 new=69dc86f) because on both starting points the exit code is 0

[12:54] <bisectable6> lizmat, bisect log: https://gist.github.com/82812fd829ca6c42704b20397a291833

[12:54] <bisectable6> lizmat, (2025-03-16) https://github.com/rakudo/rakudo/commit/51d403a51861dd7d489b894a25bfd743cf7fbf7b

[12:54] <lizmat> aha, self inflicted  :-)

[12:57] <Geth> ¦ rakudo/main: 9f58a3420e | (Jimmy Zhuo)++ (committed using GitHub Web editor) | src/Raku/ast/variable-access.rakumod

[12:57] <Geth> ¦ rakudo/main: throw X::Attribute::Undeclared, pass the test of "class D { method d { $!e = 1 }};" (#5820)

[12:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9f58a3420e

[13:00] <Geth> ¦ rakudo/main: b6346aad0b | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.rakumod

[13:00] <Geth> ¦ rakudo/main: RakuAST: fix deparsing of traits with argument

[13:00] <Geth> ¦ rakudo/main: 

[13:00] <Geth> ¦ rakudo/main: If the argument is already some sort of expression with parentheses,

[13:00] <Geth> ¦ rakudo/main: don't add any extra ones.  This is just for readability, as the

[13:00] <Geth> ¦ rakudo/main: extra parentheses would be ignore on parsing anyway

[13:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b6346aad0b

[13:00] <[Coke]> Getting close to release day.

[13:00] <[Coke]> Going to kick off final blin run this afternoon

[13:00] <lizmat> [Coke]: working on making "make test" clean

[13:01] <lizmat> [Coke]: if you could make an issue for the result of the blin run, that would help tremendously

[13:02] <lizmat> the gist only is just too noisy

[13:02] <[Coke]> Yes, sorry about that.

[13:02] <[Coke]> Were you able to address any issues in that one or no?

[13:03] <[Coke]> (the problem is the markdown is enormous and you have to cut a lot of it, but not the helpful parts.)

[13:03] <[Coke]> It'll take a day to run the next one, I'll convert that gist into a ticket after kicking off another round.

[13:04] <lizmat> timo++ found an assuming / precomp bug in there that probably hit a number of modules that has been fixed now

[13:04] <lizmat> so I'm expecting a cleaner blin run in that respect

[13:04] *** rakkable left
[13:05] *** rakkable joined
[13:05] <Geth> ¦ rakudo/main: cc2e941981 | (Stefan Seifert)++ | 2 files

[13:05] <Geth> ¦ rakudo/main: RakuAST: ensure all routines (and mainline) have $¢

[13:05] <Geth> ¦ rakudo/main: 

[13:05] <Geth> ¦ rakudo/main: Previously we declared it only in regex declarations, but apparently its

[13:05] <Geth> ¦ rakudo/main: also available for normal regex expressions.

[13:05] <Geth> ¦ rakudo/main: 

[13:05] <Geth> ¦ rakudo/main: Fixes: my $c; 'abc' ~~ /.{ $c = $¢ }/

[13:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cc2e941981

[13:06] <lizmat> rakkable: eco-pro .assuming

[13:06] <rakkable> lizmat, Running: eco-provides .assuming, please be patient!

[13:06] <rakkable> lizmat, Found 65 lines in 44 files (32 distributions):

[13:06] <rakkable> lizmat, https://gist.github.com/3fbdbdc7558168a7ded469ab4d8b908e

[13:06] <lizmat> [Coke]: ^^ potential blin errors fixed 

[13:06] <Geth> ¦ rakudo/bootstrap-rakuast: 27 commits pushed by (Stefan Seifert)++

[13:06] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/78094f5f66ba...cf0ec541045d

[13:06] <nine> 1245

[13:09] <lizmat> bisectable6: old=2025.01 say Q|my @matrix[2;2]; @matrix["0"; "0"] = 42|.AST.EVAL

[13:09] <bisectable6> lizmat, Bisecting by exit code (old=2025.01 new=69dc86f). Old exit code: 0

[13:09] <bisectable6> lizmat, bisect log: https://gist.github.com/3dd62355e3635291bc5208b319524c8c

[13:09] <bisectable6> lizmat, (2025-03-09) https://github.com/rakudo/rakudo/commit/d6d385952a99ba8ba6b7d84061de7fc4ff433979

[13:11] <lizmat> d6d3859  an example of a not so good commit message

[13:12] <nine> indeed

[13:14] <nine> Sadly by the time I committed I didn't know anymore in what specific case this helped. Came up as a bootstrap workaround

[13:14] *** JimmyZhuo left
[13:21] <lizmat> nine: we all are in such a situation every now and then

[13:22] <lizmat> fwiw, reverting that makes my @matrix[2;2]; @matrix["0"; "0"] = 42 work again

[13:24] <nine> m: my @matrix[2;2]; @matrix["0"; "0"] = 42

[13:24] <camelia> rakudo-moar cc2e94198: OUTPUT: «Partially dimensioned views of shaped arrays not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»

[13:24] <nine> Apparently it's not even supposed to work?

[13:24] <lizmat> m: use v6.e.PREVIEW; my @matrix[2;2]; @matrix["0"; "0"] = 42

[13:24] <camelia> rakudo-moar cc2e94198: OUTPUT: «Partially dimensioned views of shaped arrays not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»

[13:24] <lizmat> huh?

[13:25] <nine> Fails in exactly the same way with RakuAST for me

[13:25] <Geth> ¦ rakudo/bootstrap-rakuast: afa24ab4d7 | (Stefan Seifert)++ | src/core.e/Grammar.rakumod

[13:25] <Geth> ¦ rakudo/bootstrap-rakuast: RakuAST: fix "Could not find symbol '&Compiler' in 'Grammar::HLL'"

[13:25] <Geth> ¦ rakudo/bootstrap-rakuast: 

[13:25] <Geth> ¦ rakudo/bootstrap-rakuast: Need to load NQP modules explicitly.

[13:25] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/commit/afa24ab4d7

[13:25] <nine> That's 1248

[13:25] <lizmat> #1297

[13:25] <nine> And no, I really don't know why we need to load NQP modules explicitly in the setting with RakuAST. Or rather why we don't with the old compiler.

[13:25] <lizmat> https://github.com/rakudo/rakudo/issues/1297

[13:28] <lizmat> m: my @matrix[2;2]; @matrix[0; 0] = 42

[13:28] <camelia> rakudo-moar cc2e94198: ( no output )

[13:28] <lizmat> it's the stringiness of the arguments that caused the NYI error to be shown

[13:31] <lizmat> $ RAKUDO_RAKUAST=1 raku -e 'my @matrix[2;2]; @matrix["0"; "0"] = 42; dd @matrix'

[13:31] <lizmat> Array.new(:shape(2, 2), [42, Any], [Any, Any])

[13:31] <lizmat> weird

[13:34] <nine> Apparently works as intended when going through infix:<=> but not with whatever IMPL-ASSIGN-OP generates

[13:38] <lizmat> m: my %h{Int}; say %h.of

[13:38] <camelia> rakudo-moar cc2e94198: OUTPUT: «(Any)␤»

[13:38] <lizmat> m: my %h; say %h.of

[13:38] <camelia> rakudo-moar cc2e94198: OUTPUT: «(Mu)␤»

[13:38] <lizmat> that feels... inconsistent ?

[13:39] <lizmat> I guess that's one of the things we thought we fixed in RakuAST, but in the end didn't

[13:40] <lizmat> m: say Q|my %h{Int}; %h.of|.AST.EVAL

[13:40] <camelia> rakudo-moar cc2e94198: OUTPUT: «(Any)␤»

[13:40] <lizmat> bisectable6: old=2025.01 say Q|my %h{Int}; %h.of|.AST.EVAL

[13:40] <bisectable6> lizmat, Bisecting by output (old=2025.01 new=69dc86f) because on both starting points the exit code is 0

[13:40] <bisectable6> lizmat, bisect log: https://gist.github.com/8905793bb6a7a59b4a9ee8f880d8e510

[13:40] <bisectable6> lizmat, (2025-03-02) https://github.com/rakudo/rakudo/commit/24bde349be3938d39c2e6e4421f88ea06f87e7bb

[13:41] <lizmat> discussion at https://github.com/rakudo/rakudo/issues/5419

[13:43] <lizmat> nine: suggest we revert 24bde349 and fix the spectest

[13:43] <nine> Do we know whether this affects other spectests?

[13:45] <lizmat> sadly the commit message doesn't mention the commit that changed the default originally

[13:49] * lizmat goes afk for a few hours&

[13:51] <nine> It's commit 93e96b44e1b9d97efb388d376ad4d3bceb4176c6

[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:21] *** MasterDuke joined
[15:21] <MasterDuke> i don't remember. is it at all possible to get the name of the variable holding the object from a class's method?

[15:22] <MasterDuke> m: class A { method a { say self.VAR.name } }; my $b = A.new; $b.a    # e.g., i want it to print '$b'

[15:22] <camelia> rakudo-moar cc2e94198: OUTPUT: «No such method 'name' for invocant of type 'A'.  Did you mean any of␤these: 'are', 'none', 'note', 'take'?␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:26] <nine> How could that work? It's perfectly fine to have multiple variables contain the same object

[15:28] <MasterDuke> well, for what i want to use it for a list of name would be fine

[15:29] <MasterDuke> m: class A { method a(\b:) { say b.VAR.name } }; my $b = A.new; $b.a

[15:29] <camelia> rakudo-moar cc2e94198: OUTPUT: «$b␤»

[15:34] <nine> Honestly this sounds like a "if you need that, you want the wrong thing in the first place"

[15:35] <MasterDuke> just more context in error/warn messages

[15:43] <nine> JimmyZhuo: somehow commit 9f58a3420e978acd3f001236c31caf481fc63e98 regressed t/spec/S12-attributes/class.t

[15:43] <tellable6> nine, I'll pass your message to JimmyZhuo

[15:43] <linkable6> (2025-03-18) https://github.com/rakudo/rakudo/commit/9f58a3420e throw X::Attribute::Undeclared, pass the test of "class D { method d { $!e = 1 }};" (#5820)

[15:44] <nine> I guess it's because it causes the class to get composed before we add the methods to the package

[15:48] <Geth> ¦ rakudo/main: 507584f3ca | (Stefan Seifert)++ | 2 files

[15:48] <Geth> ¦ rakudo/main: RakuAST: ensure sink is calculcated when generating QAST for subs/methods

[15:48] <Geth> ¦ rakudo/main: 

[15:48] <Geth> ¦ rakudo/main: We really need to have sink calculated before we generate QAST as it can

[15:48] <Geth> ¦ rakudo/main: gravely affect compilation output, by e.g. turning lazy loops into eager

[15:48] <Geth> ¦ rakudo/main: ones. In normal compilation flow this isn't an issue, but of course

[15:48] <Geth> ¦ rakudo/main: routines can be called at BEGIN time which means we also generate the

[15:48] <Geth> ¦ rakudo/main: QAST before CHECK time (at which we normally would calculate sink).

[15:48] <Geth> ¦ rakudo/main: 

[15:48] <Geth> ¦ rakudo/main: So force calculation when we generate QAST. We already did so before but

[15:48] <Geth> ¦ rakudo/main: just for role bodies (as those are always compiled at BEGIN time). Now

[15:48] <Geth> ¦ rakudo/main: we extend that to all subs and methods.

[15:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/507584f3ca

[15:48] <nine> 1250

[15:55] *** MasterDuke left
[16:04] <[Coke]> ~.

[16:04] <[Coke]> ~

[16:32] *** codesections joined
[16:47] <lizmat> accidentally ran into this:

[16:47] <lizmat> m: my %h{Str(Eny)}

[16:47] <camelia> rakudo-moar 507584f3c: OUTPUT: «===SORRY!===␤Cannot find method 'value' on object of type QAST::Op␤»

[16:47] <lizmat> m: my %h{Str(Any)}

[16:47] <camelia> rakudo-moar 507584f3c: ( no output )

[16:59] <lizmat> m: my %h; %h<a> = 5 | 6; say %h<a> == 5

[16:59] <camelia> rakudo-moar 507584f3c: OUTPUT: «any(True, False)␤»

[16:59] <lizmat> m: my %h{Str}; %h<a> = 5 | 6; say %h<a> == 5

[16:59] <camelia> rakudo-moar 507584f3c: OUTPUT: «Type check failed for an element of %h; expected Any but got Junction (any(5, 6))␤  in block <unit> at <tmp> line 1␤␤»

[16:59] *** codesections left
[17:00] <lizmat> that's why I think the default constraint should be Mu for typed hashes, like it is for normal hashes

[17:00] <lizmat> it shouldn't make a difference whether a Hash is typed or not

[17:02] <nine> But what about the autoviv Typed hash problem?

[17:03] <lizmat> that was a commit from 2013

[17:03] <lizmat> I can't even find that code anymore in World, at least

[17:04] <lizmat> I mean, in Actions duh

[17:09] <lizmat> :{  } is the alternate syntax for creating object hashes

[17:10] <lizmat> m: say :{ a => 5 | 6 }<a> == 5

[17:10] <camelia> rakudo-moar 507584f3c: OUTPUT: «any(True, False)␤»

[17:10] <lizmat> there it *does* work

[17:27] *** finanalyst joined
[17:51] <lizmat> nine: looks like the last commit made us lose: t/spec/S12-attributes/class.t

[17:51] <lizmat> No such method 'z-thunk' for invocant of type 'RT130748d'

[17:51] <lizmat>   in block <unit> at t/spec/S12-attributes/class.t line 161

[17:53] <nine> No it's 9f58a3420e978acd3f001236c31caf481fc63e98

[17:53] <linkable6> (2025-03-18) https://github.com/rakudo/rakudo/commit/9f58a3420e throw X::Attribute::Undeclared, pass the test of "class D { method d { $!e = 1 }};" (#5820)

[17:58] <lizmat> hehe, indeed, sorry old news  :-)

[18:07] <Geth> ¦ roast: b3429ef625 | (Elizabeth Mattijsen)++ | S09-typed-arrays/hashes.t

[18:07] <Geth> ¦ roast: Assume Hash.of alwaysi defaults to Mu

[18:07] <Geth> ¦ roast: 

[18:07] <Geth> ¦ roast: Commit 7b7bab4a6c in 2013 assumed Any, as a follow up of

[18:07] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/93e96b44e1b9d9 .

[18:07] <Geth> ¦ roast: 

[18:07] <Geth> ¦ roast: However, since then a lot has happened, and an inconsistency

[18:07] <Geth> ¦ roast: has crept in:

[18:07] <Geth> ¦ roast: <…commit message has 20 more lines…>

[18:07] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b3429ef625

[18:08] <Geth> ¦ rakudo/main: d1466f7397 | (Elizabeth Mattijsen)++ | src/Raku/ast/variable-declaration.rakumod

[18:08] <Geth> ¦ rakudo/main: Revert "RakuAST: make default value type of shaped hashes Any instead of Mu"

[18:08] <Geth> ¦ rakudo/main: 

[18:08] <Geth> ¦ rakudo/main: This reverts commit 24bde349be3938d39c2e6e4421f88ea06f87e7bb.

[18:08] <Geth> ¦ rakudo/main: 

[18:08] <Geth> ¦ rakudo/main: The original situation on RakuAST was correct, the test that instigated

[18:08] <Geth> ¦ rakudo/main: this commit has been corrected.

[18:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d1466f7397

[18:30] *** finanalyst left
[18:40] <lizmat> bisectable6: old=2025.01 my num @a = -Inf .. 0e0; dd @a

[18:41] <bisectable6> lizmat, On both starting points (old=2025.01 new=d1466f7) the exit code is 0 and the output is identical as well

[18:41] <bisectable6> lizmat, Output on both points: «num  = array[num].new()␤»

[18:44] <lizmat> ok, this is getting weird:

[18:46] <lizmat> m: my num @a = 1e0,2e0; @a = -Inf..0e0; dd @a    # oddly enough doesn't throw, but doesn't re-initialize @a either

[18:46] <camelia> rakudo-moar d1466f739: OUTPUT: «num  = array[num].new(1e0, 2e0)␤»

[18:48] <lizmat> m: use Test; my num @a = 1e0,2e0; throws-like { @a = -Inf..0e0 }, Exception, "foo"   # but inside a throws-like, it throws ??

[18:48] <camelia> rakudo-moar d1466f739: OUTPUT: «# Subtest: foo␤    1..2␤    ok 1 - code dies␤    ok 2 - right exception type (Exception)␤ok 1 - foo␤»

[19:29] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5821: Add variable name if possible to warning about use of uninitialized numeric

[19:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5821

[20:45] <Geth> ¦ rakudo/main: ef38f301a8 | (Stefan Seifert)++ | src/Raku/ast/term.rakumod

[20:45] <Geth> ¦ rakudo/main: RakuAST: hllize the result of topic calls

[20:45] <Geth> ¦ rakudo/main: 

[20:45] <Geth> ¦ rakudo/main: Method calls may call into foreign languages, so we need to hllize their

[20:45] <Geth> ¦ rakudo/main: results. We already did this for normal method calls. Topic calls were

[20:45] <Geth> ¦ rakudo/main: left out till now.

[20:45] <Geth> ¦ rakudo/main: 

[20:45] <Geth> ¦ rakudo/main: Fixes: .foo.raku # When .foo returns a BOOTHash

[20:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ef38f301a8

[20:45] <nine> 1251

[20:48] <nine> A bunch of spectests in S06-currying fail due to .assuming issues

[20:48] <nine> on bootstrap

[21:52] <Geth> ¦ rakudo/main: 9d7abd04ad | (Stefan Seifert)++ | src/Raku/ast/statement-mods.rakumod

[21:52] <Geth> ¦ rakudo/main: RakuAST: fix missing condition on statements with a given modifier

[21:52] <Geth> ¦ rakudo/main: 

[21:52] <Geth> ¦ rakudo/main: Similar to commit f646c5a244295c9f3336858c8de0afb3b41a6ae3

[21:52] <Geth> ¦ rakudo/main: Same fix was needed for StatementModifier::Given

[21:52] <Geth> ¦ rakudo/main: 

[21:52] <Geth> ¦ rakudo/main: Fixes: say $_ if $_ > 3 given 1 # to not say

[21:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9d7abd04ad

[21:52] <nine> 1259 fully bootstrapped.

[21:53] <nine> Would be 1261, but t/spec/S32-list/categorize.t and t/spec/S32-list/classify.rakudo.moar suddenly fail (even on non-bootstrapped)

[21:53] <nine> lizmat: I think that revert is responsible

[22:46] *** sena_kun left
[22:55] <lizmat> ok, will look

[22:56] <lizmat> hmmm... how can that revert affect the legacy grammar ?

[22:57] <lizmat> ah, misunderstood

[23:15] <lizmat> nine: confirmed it is the revert... but I will sleep on whether to change the test, or the way categorize and classify create their object hashes

[23:15] <lizmat> so will look at that tomorrow

[23:16] <lizmat> well, actually later today  :-)

