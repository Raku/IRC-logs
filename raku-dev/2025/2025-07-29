[01:30] *** nine left
[01:30] *** nine joined
[02:37] *** japhb left
[02:42] *** japhb joined
[03:08] *** apogee_ntv left
[03:09] *** apogee_ntv joined
[07:00] *** finanalyst joined
[08:18] *** finanalyst left
[10:33] *** gfldex left
[10:34] *** gfldex joined
[11:21] *** guifa left
[11:34] <Geth> ¦ rakudo: heyajulia++ created pull request #5936: Change enum's raku method to return valid code

[11:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5936

[11:34] <Geth> ¦ roast: heyajulia++ created pull request #879: Add test for enum's raku method

[11:34] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/879

[11:49] *** guifa joined
[12:17] *** guifa left
[12:48] <Geth> ¦ rakudo/main: 5e8d7f6567 | Julia++ (committed using GitHub Web editor) | src/core.c/Enumeration.rakumod

[12:48] <Geth> ¦ rakudo/main: Change enum's raku method to return valid code (#5936)

[12:48] <Geth> ¦ rakudo/main: 

[12:48] <Geth> ¦ rakudo/main: Fixes #5935

[12:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5e8d7f6567

[12:51] <Geth> ¦ roast: 51e8aff2cf | Julia++ (committed using GitHub Web editor) | S12-enums/misc.t

[12:51] <Geth> ¦ roast: Add test for enum's raku method (#879)

[12:51] <Geth> ¦ roast: 

[12:51] <Geth> ¦ roast: This test aims to ensure that calling the raku method on a enum member

[12:51] <Geth> ¦ roast: returns valid code when the enum member is an emoji.

[12:51] <Geth> ¦ roast: 

[12:51] <Geth> ¦ roast: See rakudo/rakudo#5935.

[12:51] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/51e8aff2cf

[12:51] <linkable6> ROAST#879 [closed]: https://github.com/Raku/roast/pull/879 Add test for enum's raku method

[12:51] <linkable6> RAKUDO#5935 [closed]: https://github.com/rakudo/rakudo/issues/5935 [good first issue] `raku` method returns invalid code for emoji enum members

[12:52] <[Coke]> julia++

[13:01] <Geth> ¦ roast: 1dfe687e4c | (Elizabeth Mattijsen)++ | S12-enums/basic.t

[13:01] <Geth> ¦ roast: Adapted tests to more correct enum.raku representation

[13:01] <Geth> ¦ roast: 

[13:01] <Geth> ¦ roast: For an enum A <👍 👎>, A::👍 is not a grammatically correct .raku

[13:01] <Geth> ¦ roast: representation, but A::<👍> *is*.  As described in:

[13:01] <Geth> ¦ roast: 

[13:01] <Geth> ¦ roast:   https://github.com/rakudo/rakudo/pull/5936

[13:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/1dfe687e4c

[14:17] <lizmat> weekly: https://github.com/Raku/problem-solving/issues/490

[14:17] <notable6> lizmat, Noted! (weekly)

[14:17] <lizmat> tonyo ugexe  ^^

[14:21] <ugexe> im a bit confused, the ability of those two tools to not handle that trait shouldn't be an argument against it

[14:21] <ugexe> zef handles api perfectly fine

[14:22] <ugexe> so i dont understand why we wouldn't consider those things bugs of those programs

[14:24] <lizmat> because fixing those bugs would mean considerable effort, for a very small result

[14:24] <ugexe> if you take that to its logical conclusion one might argue that mi6 can't be used at all because it uses a separator that is also valid in the module name and version

[14:24] <ugexe> no that is not a reason to change the language spec

[14:25] <ugexe> i'm not sure why you think fixing it would take considerable effort

[14:25] <lizmat> so what would be a reason for you to allow identical name:auth:version: but with different :api ?

[14:30] <ugexe> there are a few, but first i'd point out that not immediately being able to think of what those are also shouldn't be a reason for removing a feature. as for why... why does e.g. debian have packages like gtk2, gtk3, where part of the version is encoded into the name itself? adding a level of abstraction why wouldn't it make sense to have a gtk native call module with api 2 or 3, and a separate

[14:30] <ugexe> version for the raku module updates themselves?

[15:00] *** guifa joined
[15:08] <lizmat> true

[15:44] <tonyo> i thought the api field was for versioning the META file, not for specifying the dist api.  for the scenario above loading it would just `use Gtk:ver<2.*>` noo?

[15:47] <ugexe> there are versions of the native code (the api it provides). then is the version of the nativecall raku module itself

[15:47] <[Coke]> I thought api was one of the 4 attributes on the distro. what does it mean to version a META file

[15:47] <ugexe> versioning the meta file is theoretically done with https://github.com/Raku/old-design-docs/blob/master/S22-package-format.pod#meta-version

[18:47] *** melezhik joined
[18:47] <jdv> lizmat: how's that whateverable move?

[18:51] *** melezhik left
[19:05] <lizmat> jdv: stalled on the fact that I couldn't get any test running  :-(

[19:07] <jdv> ok, how can we fix that?

[19:08] <jdv> can coke or i finish it or do some part(s)...

[19:08] <lizmat> well, at this moment, my head is firmly in SBOM/PURL land, I don't expect to be able to work on it until the weekend

[19:09] <jdv> i guess if i could fork and release under me

[19:09] <jdv> ok, thanks

[19:09] <lizmat> the work I've done is in a branch

[19:10] <jdv> ok

[19:10] <lizmat> the "communification" branch

[22:14] *** guifa left
[22:15] *** guifa joined
