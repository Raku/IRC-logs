[01:32] *** guifa left
[01:34] *** guifa joined
[02:21] *** guifa left
[02:37] *** guifa joined
[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. 2 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:23] <[Coke]> much easier to keep the changelog up to date as you go

[03:24] <[Coke]> blin #3 is 97% done

[03:39] <[Coke]> trying to stay awake so I can cleanly shut off the vm.. :)

[04:08] *** guifa left
[06:29] <[Tux]> Rakudo v2025.03-245-gbff242f6c (v6.d) on MoarVM 2025.03-13-gb405e940e

[06:29] <[Tux]> csv-test-xs-20      0.115 -  0.116

[06:29] <[Tux]> csv-ip5xs           0.266 -  0.270

[06:29] <[Tux]> test-t --race       0.266 -  0.271

[06:29] <[Tux]> test-t              0.421 -  0.431

[06:29] <[Tux]> csv-parser          1.087 -  1.096

[06:29] <[Tux]> csv-ip5xs-20        1.077 -  1.131

[06:29] <[Tux]> test-t-20 --race    1.240 -  1.252

[06:29] <[Tux]> test                1.874 -  1.877

[06:29] <[Tux]> test-t-20           4.879 -  4.947

[06:29] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[07:23] <nine> [Coke]: LLMs have become pretty decent at turning commit lists into changelogs

[08:30] *** Xliff joined
[08:30] <Xliff> \o

[08:31] <Xliff> So... can I ask what will trigger 6.e?

[08:31] <Xliff> 6.d is getting long in the tooth.

[08:32] <nine> Realistically: someone arguing convincingly that it's time for 6.e

[08:33] <Xliff> Wouldn't RakuAST provide a good reason?

[08:34] <Xliff> 10th anniversary is coming up. That would be a good enough time as any.

[08:34] <nine> IIRC we did discuss 6.e in the RSC and RakuAST was a prominent point in that discussion

[09:13] <Xliff> nine: Fair enough. Thanks for the update. I'm going to take a nap before $dayJob.

[09:13] *** Xliff left
[09:16] *** lizmat left
[09:16] *** lizmat_ joined
[09:17] *** lizmat_ left
[09:18] *** lizmat joined
[09:24] <nine> May be a good point for a reminder that according to its charter, the RCS decides only if the community does not come to a decision by itself.

[09:43] <lizmat> focusing on https://github.com/rakudo/rakudo/issues/5855 now

[09:44] <lizmat> looks like $=finish and $=rakudoc are not visible at CHECK time

[09:44] <lizmat> but $=pod is (in RakuAST)

[09:46] <lizmat> yet I can't really see any difference in handling between RakuAST::VarDeclaration::Implicit::Doc::Pod and RakuAST::VarDeclaration::Implicit::Doc::Finish

[09:46] <lizmat> in their PERFORM-CHECK logic

[09:49] <lizmat> so why is $=pod known to the resolver at CHECK time, but $=rakudoc and $=finish aren't?

[09:49] <lizmat> any suggestions, nine?

[09:50] <lizmat> perhaps the PERFORM_CHECK logic in RakuAST::VarDeclaration::Implicit::Doc::Finish should add $=finish to the given resolver ?

[09:50] <lizmat> or would that be too late ?

[09:56] *** finanalyst joined
[10:50] <nine> Despite its name PERFORM-CHECK has nothing to do with this

[11:24] <lizmat> but that method is run at CHECK time, is it not ?

[11:27] <nine> yes

[11:33] <nine> A more accurate and helpful statement would probably be that that method is *also* run at CHECK time

[11:33] <lizmat> right

[11:37] <lizmat> I seem to be missing where $=pod actually winds up being resolvable

[11:41] <nine> I don't see RakuAST::Var::Doc use the resolver at all.

[11:41] <nine> m: say SETTING::<$=pod>

[11:41] <camelia> rakudo-moar bff242f6c: OUTPUT: «[]␤»

[11:41] <nine> m: say SETTING::<$=finish>

[11:41] <camelia> rakudo-moar bff242f6c: OUTPUT: «Nil␤»

[11:41] <nine> m: say SETTING::<$=data>

[11:41] <camelia> rakudo-moar bff242f6c: OUTPUT: «Nil␤»

[11:42] <nine> This ^^^ is the answer to your riddle

[11:43] <lizmat> m: say SETTING::<$=data>:exists

[11:43] <camelia> rakudo-moar bff242f6c: OUTPUT: «False␤»

[11:44] <lizmat> m: say CORE::<$=pod>:exists

[11:44] <camelia> rakudo-moar bff242f6c: OUTPUT: «True␤»

[11:45] <nine> The fix is most likely to get rid of RakuAST::Var::Doc

[11:48] <lizmat> totally ?

[11:48] <nine> Yes. I don't see a need for it.

[12:00] <lizmat> ok, so what should the AST then be for a $=rakudoc access ?

[12:01] <nine> Just a RakuAST::Var::Lexical

[12:01] <nine> After all, it's just a lexical variable with a funny name and contents filled by the compiler

[12:04] <lizmat> Variable '$=finish' is not declared.

[12:05] <lizmat> and for $=pod I get:

[12:05] <lizmat> Lexical symbol '$=pod' is already bound to an outer symbol.

[12:05] <nine> Solving those will as a side-effect solve the CHECK issue

[12:12] <lizmat> add(RakuAST::VarDeclaration::Implicit::Special.new(:name('$=finish')));    appears to make it worse

[12:13] <nine> Why would you do that?

[12:13] <lizmat> Lexical symbol '$=finish' is already bound to an outer symbol

[12:13] <lizmat> to declare it ?

[12:16] <nine> Why would you need a VarDeclaration::Implicit::Special for that when there's already a RakuAST::Var**Declaration**::Implicit::Doc::Pod.new

[12:18] <lizmat> ah, duh... :-)   but why doesn't that "vivify" that $=finish in the SETTING::  then ?

[12:18] *** guifa joined
[12:27] <nine> Why would it do that? How would it do that? And why would you even want that?

[12:29] <lizmat> to make the "Variable '$=finish' is not declared" error go away ?

[12:30] <lizmat> the not-declared error is coming from a resolver

[12:30] <lizmat> how do I get the resolver to resolve it ?

[12:31] <nine> I get the impression that you are lacking a basic understanding of how variables (and other names) are declared and resolved.

[12:31] <lizmat> I think you are right  :-)

[12:32] <nine> Reading time then. I suggest starting at RakuAST::Resolver::Compile.resolve-lexical

[12:32] * lizmat reads

[12:34] <lizmat> I guess "resolve-lexical-in-outer" is the fallback being executed in this case

[12:35] <lizmat> ?

[12:35] <lizmat> ok, so this chases back the contexts until it reaches CORE-SETTING-REV

[12:36] <lizmat> which was basically my understanding so far

[12:37] <lizmat> so I'm still not sure how it will be able to find "$=finish" if nothing has put it in the CORE-SETTING-REV context ?

[12:38] <nine> What does any of this have to do with the setting?

[12:38] <lizmat> because SETTING::<$=finish>:exists is expected to be True ?

[12:39] <nine> I suggest you take a step or 3 back. Would you expect to find the $=finish of your own code somewhere in the setting?

[12:41] <lizmat> heh, good point

[12:41] <lizmat> nope, it should be in UNIT::  ??

[12:43] <lizmat> m: dd SETTING::<$pod>:exists

[12:43] <camelia> rakudo-moar bff242f6c: OUTPUT: «Bool::False␤»

[12:44] <lizmat> m: dd CORE::<$pod>:exists   # this is really an artefact

[12:44] <camelia> rakudo-moar bff242f6c: OUTPUT: «Bool::False␤»

[12:44] <lizmat> hmmm.. I guess not: in the legacy grammar that would be what $=pod resolves to if there is none in UNIT::   right ?

[12:46] <nine> Again, I don't think there's anything special about $=pod at all. It's just a lexical variable

[12:47] <lizmat> that lives in the compunit if there's any pod

[12:56] <[Coke]> 3 blin failures bisected to https://github.com/rakudo/rakudo/commit/bff242f6c9a0846c3382a2d3f1dee04a47a3ea9a

[12:56] <lizmat> meh

[12:57] <timo> huh.

[12:57] <lizmat> [Coke]: which ones?

[12:57] <[Coke]> https://gist.github.com/coke/e2c3aba29f56501161124b7625cce431

[12:58] <[Coke]> this laptop is nearly dead, will post full failures.md in a bit.

[12:58] <lizmat> ++[Coke]

[13:08] *** guifa left
[13:18] <[Coke]> https://github.com/rakudo/rakudo/issues/5857

[13:18] <nine> [HTML::Canvas::To::PDF] # MoarVM panic: Internal error: invalid thread ID -1755445856 in GC work pass

[13:18] <nine> I doubt that bisection result is meaningful

[13:19] <lizmat> well....  that commit could be tickling a bug ?

[13:19] <lizmat> anyways, going to ruminate afk for a few hours&

[13:19] <timo> if that error happens 100% every time you run the tests, then yes

[13:19] <timo> but that kind of error rarely happens reproductibly

[13:20] <timo> so the majority of "good" commits are still suspect

[13:20] <timo> making the pin-pointed commit most likely wrong

[13:21] <[Coke]> 2 other modules didn't like the commit either, and i only see the panic on one of them.

[13:22] <[Coke]> but I leave it to the devs. I do note that the run with the new zef but the empty zef store took 2 more hours than the previous run

[13:28] <timo> we'll need to look more closely than the automatic bisection can do it i think

[14:13] <[Coke]> https://github.com/Raku/roast/pull/874/files - I think I made a mistake here - just because these are passing on the *latest* rakudo, doesn't mean they are passing on *earlier* rakudos.

[14:14] <[Coke]> so I think my desire to get a clean pass here is not sufficient reason to break someone testing against, e.g. 2023.06 rakudo

[14:14] <[Coke]> Any thoughts?

[14:16] <[Coke]> https://github.com/rakudo/rakudo/issues/5841 - running 6.d again now, but still have two failures in 6.c that need to be addressed.

[14:18] <[Coke]> With the release tomorrow, could use any eyes on https://github.com/rakudo/rakudo/issues/5841

[14:22] <[Coke]> 5 different failing files now across c & d.

[14:32] <jdv> are there corresponding changes in main that could be cherry picked?

[14:35] <[Coke]> for one of them, the change is master itself is suspect.

[14:35] <[Coke]> Others I've already applied.

[14:36] <[Coke]> the remaining ones in d I haven't gotten to yet.

[14:36] <[Coke]> there were a suprising amount of failures here.

[14:36] <[Coke]> https://github.com/Raku/roast/issues/878  - the suspect one

[15:42] <Geth> ¦ rakudo/main: 4217a5cfd0 | (Elizabeth Mattijsen)++ | src/core.c/Array.rakumod

[15:42] <Geth> ¦ rakudo/main: Revert "Change internal handling of index out of range"

[15:42] <Geth> ¦ rakudo/main: 

[15:42] <Geth> ¦ rakudo/main: This reverts commit bff242f6c9a0846c3382a2d3f1dee04a47a3ea9a.

[15:42] <Geth> ¦ rakudo/main: 

[15:42] <Geth> ¦ rakudo/main: This produced (possibly false positive) failures in blin.  Being

[15:42] <Geth> ¦ rakudo/main: so close before the release, it feels safer to revert for now

[15:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4217a5cfd0

[15:42] <lizmat> [Coke]: we can check again after the release

[15:47] <[Coke]> Sounds good

[16:00] <lizmat> nine: I just found out that "CHECK say $=pod" in RakuAST shows the wrong $=pod

[16:01] <lizmat> so the fact that $=pod works in a CHECK phaser, is an artefact of it existing in CORE::

[16:01] <nine> I know

[16:01] <nine> That's why I posted the stuff about SETTING::<$=pod>

[16:02] <lizmat> right, but I didn't realize it was the wrong one, so that put me on a goose chase to find the difference in handling of $=pod and $=finish

[16:02] <lizmat> when there isn't any, really

[16:04] <nine> How could it have been the right one, when you're looking at the setting instead of your compunit?

[16:05] <lizmat> yeah, it all makes sense *now*   :-)

[16:07] <lizmat> ok, so at runtime, UNIT::<$=finish> has the right value

[16:08] <lizmat> so it's a matter of timing

[16:10] <nine> Well only in the broadest of senses

[16:11] <lizmat> I still don't grok how we get from

[16:11] <lizmat>     has RakuAST::VarDeclaration::Implicit::Doc::Finish  $.finish;

[16:12] <lizmat> in ::CompUnit to setting UNIT::<$=finish>  *after* CHECK time, and before any INIT phaser is run

[16:13] <nine> I would forget about UNIT::<$=finish> as it's just a distraction. That's a totally different way of accessing that lexical

[16:14] <nine> UNIT:: has nothing to do with the resolver

[16:23] <nine> Reading from RakuAST::Resolver::Compile.resolve-lexical should lead you to where you need to be

[16:34] <lizmat> afk&

[17:21] <[Coke]> releasable6: next

[17:21] <releasable6> [Coke], Next release in ≈1 day and ≈1 hour. 1 blocker. 246 out of 246 commits logged

[17:21] <releasable6> [Coke], Details: https://gist.github.com/51aa8d239bcf1234c30fb8dc1a2f79c5

[18:49] <[Coke]> do we have CI running for spectest/stresstest on master on a regular basis?

[18:51] <[Coke]> sorry, I should be more precise: given "regular basis", I don't mean *continuous*. Are we running the spec tests automatically at all?

[18:54] <nine> I don't think so

[20:11] <ab5tract> It would be interesting to run them on PR merge. Or we could trigger them with a specific tag format (*-prerelease or so)

[20:17] *** finanalyst left
[20:29] <[Coke]> Would definitely make the release easier on those months where spec tests are failing

[20:30] <jdv> it only takes a few minutes on a decet box though

[20:30] <jdv> *decent

[20:30] <[Coke]> retrying my spec test runs on the blin box, as it only just occurred to me maybe it's an OSX thing

[20:31] <[Coke]> jdv: Yes, but if it's *manual*, it's still a PITA

[20:31] <[Coke]> You know how many times I've run stresstest this month? :)

[20:31] <jdv> regular blin runs could be more worhwhile, to me at least

[20:31] <[Coke]> I did four blin runs this month. Do you mean more regular?

[20:31] <jdv> i mean automatic

[20:31] <jdv> its a real hassle

[20:31] <[Coke]> mmm

[20:32] <[Coke]> I'm sure we could improve the state of both, for sure.

[20:32] <[Coke]> Let me get through a release or two with zero issues then I can think about that more. :)

[20:34] *** finanalyst joined
[20:38] <[Coke]> ... dammit. 6.c and 6.d are both fine at this point on the blin box.

[20:38] <[Coke]> so any remaining issues are either the "we're not testing the unicode thing we think we are" or "this test fails on osx"

[20:38] <[Coke]> good news, no more changes needed in roast for the release tomorrow

[20:41] <[Coke]> releasable6: next

[20:41] <releasable6> [Coke], Next release in ≈22 hours. There are no known blockers. 246 out of 246 commits logged

[21:13] <Geth> ¦ rakudo/release-2025.04: a32ac4ce73 | (Will Coleda)++ | 3 files

[21:13] <Geth> ¦ rakudo/release-2025.04: Update changelog + announcement

[21:13] <Geth> ¦ rakudo/release-2025.04: 

[21:13] <Geth> ¦ rakudo/release-2025.04: Deliberately not logged:

[21:13] <Geth> ¦ rakudo/release-2025.04: 

[21:13] <Geth> ¦ rakudo/release-2025.04: [f796a996][184d3257][bc5b2673][9c9d822e][dd0b647d][8a393381]

[21:13] <Geth> ¦ rakudo/release-2025.04: [4c2fa940][a3841c26][aad9c3bd][403252cf][5bd76f54][690370ad]

[21:13] <Geth> ¦ rakudo/release-2025.04: [f140ce2c][be3d06a7][e494d4d8][bff242f6][4217a5cf]

[21:13] <Geth> ¦ rakudo/release-2025.04: review: https://github.com/rakudo/rakudo/commit/a32ac4ce73

[21:14] <[Coke]> Little head start. That's everything before "do the MoarVM release"

[21:16] <[Coke]> (so anything else going on main is not in the release... please wait until post release for anything else if possible, and if something has to get in the release that wasn't already on main, it'll have to get merged to the release branch (and I need to get pinged)

[21:16] <[Coke]> jdv: remembered the Changelog itself this time

[21:17] <[Coke]> jdv: didn't accidentally create a YYYY.MM.md

[21:36] <timo> if i'm allowed to pick nits, "these tests pass in default grammar" and "remove useless `,`" seem a little small to be getting their own entry?

[21:37] <timo> i'd reword the one above that "Update vendored mimalloc version"; it's not really important to change log readers what a bump is, i think?

[21:43] <[Coke]> Sure - I didn't put much effort into rewriting the ones that were standalone.

[21:44] <[Coke]> note that the changelog draft has been there all month for updates from devs.

[21:44] <timo> yeah i know :<

[21:45] <[Coke]> Well, better tonight than tomorrow!

[21:45] <[Coke]> If you have any suggestions, throw them in a gist (or a PR for the release branch), and I'll deal with them tomorrow morning, no worries, timo

[21:46] <[Coke]> Thanks for reviewing!

[21:46] <[Coke]> (note to self, update both the changelog & the rel ann.)

[21:51] *** finanalyst left
[21:56] *** guifa joined
[22:59] <jdv> [Coke]: ok

[23:00] <releasable6> Next release in ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

