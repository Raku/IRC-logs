[08:05] *** donaldh left
[08:10] *** [Tux] left
[08:15] *** [Tux] joined
[11:50] <Geth> ¦ rakudo/DateTime-valuetype: 376b1dba7c | (Elizabeth Mattijsen)++ | src/core.c/DateTime.rakumod

[11:50] <Geth> ¦ rakudo/DateTime-valuetype: Make DateTime a value type

[11:50] <Geth> ¦ rakudo/DateTime-valuetype: 

[11:50] <Geth> ¦ rakudo/DateTime-valuetype: I don't see a reason why it shouldn't be.  Because the formatter is

[11:50] <Geth> ¦ rakudo/DateTime-valuetype: also part of the object, it uses the formatter's output as string

[11:50] <Geth> ¦ rakudo/DateTime-valuetype: in .WHICH.

[11:50] <Geth> ¦ rakudo/DateTime-valuetype: review: https://github.com/rakudo/rakudo/commit/376b1dba7c

[11:50] <Geth> ¦ rakudo: lizmat++ created pull request #5933: Make DateTime a value type

[11:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5933

[12:25] <lizmat> do we actually have a description somewhere of what is expected / possible in a META6.json file ?

[12:40] <jdv> ugexe or nine would know

[12:40] <tellable6> 2025-07-21T02:01:56Z #raku <tbrowder> jdv i just read what i replied and now i understand your confusion. what i was trying to say is that raku's class system encapsulates much of what Steven was showing us about closures in perl. and with much cleaner syntax.

[12:40] <jdv> tbrowder: ok

[12:41] <patrickb> I believe the best we have is in https://docs.raku.org/language/modules#Preparing_the_module

[12:43] <jdv> that looks like the old spec and the old spec is even linked!

[12:45] <lizmat> hmm... I think we should remove the p6c section there, and move the fex section before the CPAN section

[12:46] <patrickb> Right. the design docs are still the most encompassing text we have: https://github.com/Raku/old-design-docs/blob/master/S22-package-format.pod

[12:46] <lizmat> I guess https://github.com/Raku/old-design-docs/blob/master/S22-package-format.pod#distribution-1

[12:47] <patrickb> lizmat: there is a PR by Weyland doing that. In the last phase of the review process: https://github.com/Raku/doc/pull/4570

[12:47] <lizmat> ah, good

[12:50] <patrickb> The old design docs are afaik still pretty accurate, but loads of the things stated there are not implemented. So there currently is no good reference of implemented stuff.

[12:51] <jdv> in terms of regex perf and related - is anyone working on that?  I think the 6.e checklist mentions it, right?

[12:51] <lizmat> it does... but no guarantees there  :-)

[12:51] <jdv> or was that more about rakuast perf regressions?

[12:52] <lizmat> don't think so

[12:52] <jdv> who would know about that stuff, aside from timtoady?

[12:52] <jdv> or jnthn i guess.  as they are both "out" at this point:(

[12:53] <lizmat> pmichaud jnthn 

[12:53] <lizmat> yeah  :-(

[12:53] <jdv> patrick is also "out" afaik

[13:00] <nine> S22 might be slightly dated (e.g. s/perl/raku/) but it's probably still the most authoritative source on this and AFAIK most of it is implemented as written.

[13:01] <lizmat> thanks everyone, will take that as definition source for now while working on META6.json -> SBOM functionality

[14:14] <ugexe> remember that arbitrary fields can be included as well

[14:35] <ugexe> as for why that is useful, here is an example from an old prototyping repository which stores file contents in the meta6.json file itself, and which can be installed to a CURI: https://github.com/ugexe/zef2/blob/5a9c581648cd3b28975f0b98e31d9a2e395c28f2/t/distribution.t#L107-L132

[15:00] *** librasteve_ joined
[15:17] *** nine left
[15:18] *** nine joined
[16:43] <librasteve_> teases https://rakudoweekly.blog/2025/07/21/2025-29-just-sleeping/

[16:50] * [Coke] cringes at the thought of there being youtube video of him out there again. :)

[17:26] <jdv> you be a celebrity now

[17:50] *** guifa left
[18:29] *** guifa joined
[18:32] *** releasable6 left
[18:32] *** releasable6 joined
[22:03] <tbrowder> hi, i'm working on a new module that eases use of the GNU OpenType FreeFont and fiddling with what to name it. my current choice is 'GNU::FreeFont::OT'. any thoughts will be greatly appreciated.

[22:04] <tbrowder> note OTF is the typical abbreviation but OT is a bit shorter and i believe is not unclear to font users

[22:51] <tbrowder> sorry. wrong channel

