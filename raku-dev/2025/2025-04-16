[02:47] <Geth> ¦ nqp/zhuomingliang/cleanup: 640856d117 | (Jimmy Zhuo)++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp

[02:47] <Geth> ¦ nqp/zhuomingliang/cleanup: cleanup some code in QASTRegexCompilerMAST

[02:47] <Geth> ¦ nqp/zhuomingliang/cleanup: review: https://github.com/Raku/nqp/commit/640856d117

[06:00] *** Xliff joined
[06:01] <Xliff> \o

[06:23] <nine> lizmat: there actually *is* a blog post :D https://niner.name/blog/rakuast_grant_report/index.html

[06:58] <lizmat> weekly: https://niner.name/blog/rakuast_grant_report/index.html

[06:58] <notable6> lizmat, Noted! (weekly)

[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. 2 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:18] <Geth> ¦ roast: 0d01cf9018 | (Will Coleda)++ (committed using GitHub Web editor) | S03-operators/shortcuts.t

[11:18] <Geth> ¦ roast: Remove unused test file that doesn't compile. (#876)

[11:18] <Geth> ¦ roast: 

[11:18] <Geth> ¦ roast: Resolves #157

[11:18] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0d01cf9018

[11:18] <linkable6> ROAST#876 [closed]: https://github.com/Raku/roast/pull/876 Remove unused test file that doesn't compile.

[11:19] <linkable6> ROAST#157 [closed]: https://github.com/Raku/roast/issues/157 Review S03-operators/shortcuts.t

[11:20] <Geth> ¦ roast: 73eef396d7 | (Will Coleda)++ (committed using GitHub Web editor) | S32-io/IO-Socket-Async.t

[11:20] <Geth> ¦ roast: Use dynamic port where appropriate (#875)

[11:20] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/73eef396d7

[11:20] <linkable6> ROAST#875 [closed]: https://github.com/Raku/roast/pull/875 Use dynamic port where appropriate

[11:21] <Geth> ¦ roast/6.c-errata: c365a0c508 | (Will Coleda)++ (committed using GitHub Web editor) | 5 files

[11:21] <Geth> ¦ roast/6.c-errata: un-TODO several passing tests (#874)

[11:21] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/c365a0c508

[12:14] <[Coke]> lizmat++ thanks 

[12:19] <[Coke]> reminder - this week will be the third friday of the month, so https://news.perlfoundation.org/post/tprf-community-roundtable will happen again.

[12:20] <[Coke]> notes from last month's: https://news.perlfoundation.org/post/perl-community-roundtable-march-2025

[12:23] <[Coke]> biggest news for me: Util is on the board now.

[12:28] <Geth> ¦ nqp/zhuomingliang/cleanup: d8ba4b9009 | (Jimmy Zhuo)++ | 2 files

[12:28] <Geth> ¦ nqp/zhuomingliang/cleanup: Reuse method name

[12:28] <Geth> ¦ nqp/zhuomingliang/cleanup: review: https://github.com/Raku/nqp/commit/d8ba4b9009

[12:35] <ab5tract> nine: just read your post

[12:36] *** JimmyZhuo joined
[12:37] <ab5tract> Congratulations on making it up that mountain

[12:37] <ab5tract> 900 commits… incredible

[12:38] <lizmat> indeed!

[12:39] <ab5tract> I wish I could have helped more towards the end, but the comma revival had its claws in deep

[12:47] <JimmyZhuo> comma is slow on windows, maybe my computer is too old.

[12:54] <JimmyZhuo> I understand why the influx of community contributions to this project were a lot lower than I had hoped for.  For me: compiling setting is so slow, when I tried to change something to debug the code, at least half time is waiting for  compiling setting. that is, 8 hours work, 4+ hours is waiting :)

[12:58] <JimmyZhuo> chaning one line code and wait for 120+ secs for confirmation

[13:04] <lizmat> JimmyZhuo: wish I could get you a faster computer

[13:10] <JimmyZhuo> not everyone has fast computer,  it would be nice to improve rakudo comipling time

[13:10] <lizmat> true...  and in the short term it will only get worse with RakuAST in the bootstrap

[13:11] <lizmat> but at least we should have a better idea on how to optimize that, as the code is definitely more accessible than "manually" messing around with QAST trees

[13:16] <JimmyZhuo> I do like switching to new RakuAST grammar and drop the old one.

[13:17] <lizmat> I guess we should do that after the 20245.04 release, right nine ?

[13:18] <JimmyZhuo> not sure, the new one has no optimize stage, a lot of code will be slow.

[13:26] <JimmyZhuo> Rakudo compiling setting time performance analysis pictures by Visual Studio, posted to https://github.com/rakudo/rakudo/issues/5851

[13:33] <Geth> ¦ nqp: zhuomingliang++ created pull request #843: Some code cleanup and re-order, reduces blib\Raku\Grammar.moarvm about 43KB

[13:33] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/843

[13:43] *** JimmyZhuo left
[14:14] <Geth> ¦ rakudo: tbrowder self-assigned =begin para/=end para blocks do not preserve interior blank lines https://github.com/rakudo/rakudo/issues/5850

[14:32] <[Tux]> Rakudo v2025.03-242-ge494d4d80 (v6.d) on MoarVM 2025.03-13-gb405e940e

[14:32] <[Tux]> csv-test-xs-20      0.115 -  0.116

[14:32] <[Tux]> test-t --race       0.267 -  0.289

[14:32] <[Tux]> csv-ip5xs           0.268 -  0.280

[14:32] <[Tux]> test-t              0.412 -  0.427

[14:32] <[Tux]> csv-ip5xs-20        1.089 -  1.118

[14:32] <[Tux]> csv-parser          1.093 -  1.097

[14:32] <[Tux]> test-t-20 --race    1.236 -  1.327

[14:32] <[Tux]> test                1.836 -  1.858

[14:32] <[Tux]> test-t-20           4.946 -  4.996

[14:32] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[14:37] <nine> lizmat: since not even make install runs without errors, I'd say we're still a bit away from switching defaults

[14:37] <nine> ab5tract: so don't worry. There's still quite a few things left to do to chime in :)

[14:39] <lizmat> nine: I assume the "make install" issue is another manifestation of the .assuming / BEGIN "foo".EVAL issue ?

[14:44] <nine> No. BEGIN "foo".EVAL itself is fine after all. Without this not even module loading would work.

[14:44] <nine> The problem with .assuming is just that it *doesn't* do the necessary things that BEGIN EVAL handling does

[14:45] <lizmat> and what is the "make install" issue the, apart from it doesn't work?  :-)

[14:46] <nine> It's far more simple. It just runs into no outer $_ being available. The EVALed comp unit contains something like QAST::Var.new(:scope<local>, :name<$_>, :decl<static>, :value(QAST::Op(:op<getlexouter>, :name<$_>))

[14:47] <nine> There's also some RakuDoc issue with $=finish not being found in a CHECK phaser in RakuAST::L18N

[14:47] <nine> And last but most worrying the whole module MoarVM::Profiler { class MoarVM::Profiler { }} WAT

[14:48] <nine> m: module MoarVM::Profiler { my class MoarVM::Profiler { } }.HOW.^name.say

[14:48] <camelia> rakudo-moar e494d4d80: OUTPUT: «Perl6::Metamodel::ModuleHOW␤»

[14:49] <nine> m: module MoarVM::Profiler { my class MoarVM::Profiler { } }; say MoarVM::Profiler.HOW.^name

[14:49] <camelia> rakudo-moar e494d4d80: OUTPUT: «Perl6::Metamodel::ClassHOW␤»

[14:49] <nine> ^^^

[16:09] <[Coke]> t/12-rakuast/xx-fixed-in-rakuast.rakutest                     (Wstat: 256 Tests: 105 Failed: 1)

[16:13] <Geth> ¦ rakudo/main: 01a66c1288 | (Will Coleda)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[16:13] <Geth> ¦ rakudo/main: Add todo for legacy grammar

[16:13] <Geth> ¦ rakudo/main: 

[16:13] <Geth> ¦ rakudo/main: (pass make test)

[16:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/01a66c1288

[18:17] *** finanalyst joined
[19:57] <jdv> we're thinkin more july for rakuast, right?

[19:58] <[Coke]> I would guess at least that far.

[19:59] <[Coke]> need to fix make install, be able to run zef, make it the default, do a blin run without much fallout...

[19:59] <[Coke]> I'm not sure if there's a decision that that also triggers 6.d...

[20:00] <[Coke]> er, e

[20:24] <patrickb> Does not trigger 6.e

[20:24] <patrickb> We can, but no need.

[20:26] <tbrowder> note rakudo issue 5851 was a mistake and was closed

[20:27] <jdv> i feel triggered

[20:27] <jdv> jk

[20:31] <Geth> ¦ rakudo: tbrowder self-unassigned =begin para/=end para blocks do not preserve interior blank lines https://github.com/rakudo/rakudo/issues/5850

[21:59] *** MasterDuke joined
[22:02] <MasterDuke> nine: i was thinking about that the other day (finding places where we re-do work) and it's tough. those are sort of algorithmic changes, which require both knowing what the current algorithm is and how to improve it

[22:02] <tellable6> hey MasterDuke, you have a message: https://gist.github.com/bbc99badfc2e2d940d81dd319a26db33

[22:05] <MasterDuke> and finding them

[22:06] <MasterDuke> japhb has an interesting idea. i was just wondering about counting all `method <...>` in the rakudo source and seeing how closely the number of calls to `<method-def>` match

[22:22] <MasterDuke> well, that one seems to match up. `git grep -P '\bmethod [^ ]+\(' src/core.* | wc -l` give 7,691 and there are 7,896 calls in nine's profile

[22:25] <MasterDuke> same with subs, grepping gives 2,295 and the profile has 2,470 calls to `<routine-def>`

[22:46] <MasterDuke> `term:sym<nqp::op>` roughly matches also

[22:48] <MasterDuke> which makes me think there probably isn't a problem of duplicating grammar? since nqp ops would show up in most constructs, except maybe signatures?

[23:00] <MasterDuke> but i guess something like `method to-begin-time` from `class RakuAST::ParseTime` is a random example of something that could potentially be called more than necessary (3,235,503 times in this profile)?

[23:01] <MasterDuke> though i could imagine 3.2m RakuAST nodes being created while parsing

[23:14] <timo> we could log the byte offset and type of every node that to-begin-time is called on and side-by-side it with the source code to see what's up

[23:39] <MasterDuke> `to-begin-time of: 2160 - 2199` 41 times

[23:40] <MasterDuke> `to-begin-time of: 3226773 - 3226776` 15 times

[23:40] <MasterDuke> those are the .from and the .to of the node's .origin

[23:45] <MasterDuke> is that around the `#- StatementPrefix -------------------------------------------------------------` section of gen/moar/CORE.c.setting?

[23:45] <MasterDuke> but afk for a bit

[23:48] *** MasterDuke left
