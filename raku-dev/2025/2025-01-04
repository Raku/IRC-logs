[01:28] *** guifa left
[03:18] *** lizmat left
[05:30] *** guifa joined
[06:36] *** guifa left
[07:31] *** [Coke] left
[08:52] *** sena_kun joined
[09:11] *** lizmat joined
[09:26] *** [Coke] joined
[10:20] *** sena_kun left
[10:33] *** finanalyst joined
[13:12] *** guifa joined
[16:09] *** sena_kun joined
[17:01] *** guifa left
[17:02] *** guifa joined
[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: ebf3eca792 | ab5tract++ | 3 files

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Fix revision-gating for more complex cases

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/ebf3eca792

[19:23] <ab5tract> Managed to iron out the issue with  revision gating in that branch

[19:32] *** guifa left
[19:33] <ugexe> what is `nqp::chr(nqp::ord('c')` for?

[19:34] <ugexe> ah i missed there isn't a closing paren yet

[19:37] <ugexe> i wonder if there is a way to make the CI test show a summary at the end of what actually failed now that its outputting JUnit

[19:37] <ugexe> otherwise it is difficult to find what failed due to all the TODOd tests in the output

[19:41] <ugexe> looks like t/02-rakudo/12-multi-revision-gated.t is failing now

[19:41] <ugexe> in that PR rather

[19:41] <ab5tract> Maybe some debug is leftover

[19:41] <ab5tract> I’ll check that bit in a while

[19:43] <ab5tract> I can also remove the changes to the exception class, as a user should never be presented with a conflicted resolution for gated candidates

[19:46] <ab5tract> Ah, yeah, I see the problem now

[19:46] <ab5tract> Not debug related after all

[19:57] <ab5tract> ugexe: are we using a TAP -> JUnit converter? Or how is that working?

[19:58] <ab5tract> Regardless, it would be absolutely amazing to have a “final report” in CI

[20:02] *** guifa joined
[20:02] <ugexe> when i used JUnit before the CI system (in this case jenkins) had a page for showing / navigating the test results that is generated from the final JUnit output artifact

[20:04] <coleman> As long as the file isn't too big, and your CI execution context has 1) support for secrets and 2) curl, you could use these example scripts to upload files to the Raku Zulip https://github.com/MoarVM/MoarVM/pull/1839/files

[20:05] <coleman> It won't parse XUnit, though. Something else will need to do that. But it might help avoid digging around in the CI logs.

[20:06] <ugexe> it looks like the test results get published *somewhere* so i imagine there is a summary view somewhere

[20:12] <ugexe> https://dev.azure.com/Rakudo/rakudo/_build/results?buildId=6744&view=ms.vss-test-web.build-test-results-tab

[20:12] <ugexe> that has a summary

[20:12] <ugexe> i dont know how i got to that page though lol

[20:13] <ugexe> ah ok, i go to azure pipelines from the github actions page by clicking the 1 errors/0 warnings link. that goes to https://dev.azure.com/Rakudo/rakudo/_build/results?buildId=6744&view=results

[20:13] <ugexe> then click the 'tests' tab

[20:15] <ugexe> if you have a small screen you might not see the relevant test summary stuff at the very bottom of that page

[20:19] *** sena_kun left
[20:19] <coleman> I can see it. Very nice

[21:02] <patrickb> timo: I'm looking at a CI failure releated to Azure failing to set a tag because of a permissions issue. It seems not everyone is allowed to create Azure build tags.

[21:02] <patrickb> timo: It's probably this line that's causing the issue: https://github.com/rakudo/rakudo/blob/main/azure-pipelines.yml#L216

[21:03] <patrickb> timo: Do you recall if that tag is only informational or needed for anything? If purely informational, I'd probably drop it.

[21:05] <timo> purely informational

[21:13] *** guifa left
[21:14] <patrickb> Agree to delete?

[21:14] <patrickb> This is the pr btw: https://github.com/rakudo/rakudo/pull/5750

[21:24] <timo> no problem to delete

[21:27] <timo> could i potentially get you to port some of the improvements over to the moarvm CI script?

[21:32] <patrickb> Depends on where on my ever growing todo list you want me to place that...

[21:34] <timo> ehehe. low priority on that

[21:35] <timo> i haven't confirmed, but i think we're still doing the thing that takes ten minutes to find the "enterDevMode" powershell script on windows

[21:36] <patrickb> ugh...

[21:36] <timo> did you see that? :D

[21:36] <patrickb> I didn't look

[21:36] <timo> was a big WTF moment for me when i looked into why that stage was so slow

[21:37] <timo> >    if (Test-Path -Path ../where_is_devshell/here.txt -PathType leaf) {

[21:37] <patrickb> I vaguely remember. We brainstormed what could possibly take so long trying to find the VS install...

[21:37] <timo> this whole thing in thte CI script does that

[21:37] <timo> well, that part implements a simple cache that tries the same path that was correct last time

[21:39] <timo> ok yeah the moar config uses the PWSH_DEV snippet that the rakudo one used before as well. that should be easy to port over, i'll just do that quickly

[21:41] <timo> 2024-12-27T13:36:32.8590848Z ========================== Starting Command Output ===========================

[21:41] <timo> 2024-12-27T13:36:32.8591392Z ##[command]"C:\Program Files\PowerShell\7\pwsh.exe" -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command ". 'D:\a\_temp\849583f9-8434-49d4-baa4-881add10c477.ps1'"

[21:41] <timo> 2024-12-27T13:42:18.0784780Z **********************************************************************

[21:41] <timo> 2024-12-27T13:42:18.0785786Z ** Visual Studio 2019 Developer PowerShell v16.11.42

[21:41] <timo> you thought when i just wrote "ten minutes" i was exaggerating. well, i did exaggerate a little bit. it's only about seven minutes and 40 seconds

[21:42] <timo> i should give that github codeql tool a try to make a million pull requests that saves people around the globe minutes and minutes each to get a dev mode powershell if they do it dumb like we used to

[22:24] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 8f52fb73b7 | ab5tract++ | 3 files

[22:24] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Fix revision-gating for more complex cases

[22:24] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/8f52fb73b7

[22:25] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: e3542abaec | ab5tract++ | 3 files

[22:25] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Fix revision-gating for more complex cases

[22:25] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/e3542abaec

[22:40] *** lizmat left
[23:02] <SmokeMachine> Hi! I'm having problems when releasing distros, my several last releases did not work. Not for new versions neither for new distros. For example, I just released 3 distros (Red, Cromponent and CSS::Nested) and none of them seems to appear on raku.land... is that happening only to me? I have opened a issue when it first happened (https://github.com/tony-o/raku-fez/issues/121).

[23:10] <SmokeMachine> any idea/suggestion?

[23:55] <ab5tract> I can't quite tell what's gone wrong with the Rakudo test suite on Windows... https://dev.azure.com/Rakudo/rakudo/_build/results?buildId=6746&view=logs&j=d0548f19-0da4-5f1c-ce15-47ad8758b4fe&t=ee953748-9255-507b-8dd7-7f6f3c7db921

[23:56] <ugexe> not ok 1 - shell output

[23:58] <ugexe> it'd be nice if the test summary showed the test file names, but it looks like maybe they dont

[23:58] <ugexe> t/02-rakudo/15-gh_1202.t is the only thing i find with git grep

[23:59] <ugexe> probably just flakey cause that doesn't look like it has anything to do with that pr

