[00:53] <Geth> ¦ roast: 02023cf10a | (Daniel Green)++ | S06-advanced/return-prioritization.t

[00:53] <Geth> ¦ roast: Mark new return prioritization tests as 'done'

[00:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/02023cf10a

[01:15] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5926: Optimize unsigned native ++/--

[01:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5926

[06:08] *** librasteve_ joined
[08:38] <Geth> ¦ rakudo/andthen-orelse: 9 commits pushed by ab5tract++

[08:38] <Geth> ¦ rakudo/andthen-orelse: 113ec5999f | First pass at new andthen/orelse for 6.e

[08:38] <Geth> ¦ rakudo/andthen-orelse: ea1ae01189 | Normalize version strings

[08:38] <Geth> ¦ rakudo/andthen-orelse: c2701b3e51 | Add auto-await to andthen

[08:38] <Geth> ¦ rakudo/andthen-orelse: a45e787c99 | Add auto-await to orelse

[08:39] <Geth> ¦ rakudo/andthen-orelse: 5c377c3463 | Fix whitespace

[08:39] <Geth> ¦ rakudo/andthen-orelse: df407979e7 | More whitespace

[08:39] <Geth> ¦ rakudo/andthen-orelse: 1eb5c9704b | Please be the final whitespace!

[08:39] <Geth> ¦ rakudo/andthen-orelse: 1dafba0fdf | Use .then instead of starting synchronous Awaitables

[08:39] <Geth> ¦ rakudo/andthen-orelse: 2ba28de080 | Fix the rest of the synchronous stuff

[08:39] <Geth> ¦ rakudo/andthen-orelse: review: https://github.com/rakudo/rakudo/compare/7516cb67d148...2ba28de08057

[09:27] *** librasteve_ left
[10:27] *** librasteve_ joined
[11:02] *** guifa left
[11:48] <Geth> ¦ rakudo/main: f52cc9284d | MasterDuke17++ (committed using GitHub Web editor) | src/Perl6/Optimizer.nqp

[11:48] <Geth> ¦ rakudo/main: Optimize unsigned native ++/-- (#5926)

[11:48] <Geth> ¦ rakudo/main: 

[11:48] <Geth> ¦ rakudo/main: Check for `uint` in addition to `int` and then change the `assign_*` as

[11:48] <Geth> ¦ rakudo/main: needed.

[11:48] <Geth> ¦ rakudo/main: 

[11:48] <Geth> ¦ rakudo/main: Now `my uint $a; $a++ for ^10_000_000; say $a; say now - INIT now` takes

[11:48] <Geth> ¦ rakudo/main: ~0.24s, same as the `int` version, where before it was ~1.15s.

[11:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f52cc9284d

[13:46] *** nine left
[13:47] *** nine joined
[15:11] *** vrurg_ left
[15:11] *** vrurg joined
[16:24] <librasteve_> https://rakudoweekly.blog/2025/07/07/2025-27-your-first-language/

[17:24] <[Coke]> m: use Test; my $posix = 915148800.999_999_999_999_9; is Instant.from-posix-nanos( ($posix * 10**9).Int ), Instant.from-posix( $posix), '.from-posix-nanos vs .from-posix';

[17:24] <camelia> rakudo-moar f52cc9284: OUTPUT: «not ok 1 - .from-posix-nanos vs .from-posix␤# Failed test '.from-posix-nanos vs .from-posix'␤# at <tmp> line 1␤# expected: 'Instant:915148832.999999999'␤#      got: 'Instant:915148800.999999999'␤»

[18:33] <lizmat> librasteve_++

[18:36] *** librasteve_ left
[18:58] <Geth> ¦ rakudo/coke/touch: 240b16547e | rir++ (committed by Will Coleda) | 2 files

[18:58] <Geth> ¦ rakudo/coke/touch: Test and fix that Instant.from-posix-nanos and Instant.from-posix  match

[18:58] <Geth> ¦ rakudo/coke/touch: 

[18:58] <Geth> ¦ rakudo/coke/touch: * Add test that Instant.from-posix and .from-posix-nanos agree

[18:58] <Geth> ¦ rakudo/coke/touch: 

[18:58] <Geth> ¦ rakudo/coke/touch: * Fix Instant::from-posix-nanos to include leap-seconds

[18:58] <Geth> ¦ rakudo/coke/touch: review: https://github.com/rakudo/rakudo/commit/240b16547e

[18:59] <Geth> ¦ rakudo: coke++ created pull request #5927: Test and fix that Instant.from-posix-nanos and Instant.from-posix  match

[18:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5927

[19:33] <[Coke]> lizmat: ^^ Leaving that as a draft right now so we don't lose the original intent of 0rir, which was to make that new test in t/ pass (but it broke stuff in t/sped)

[19:36] <lizmat> [Coke]: ack

[19:37] <[Coke]> (0rir trying to fix an issue discovered in Touch back in 2023.11)

[19:37] <[Coke]> Just doing the setup right now, will continue to try to make that patch work. :)

[19:59] *** guifa joined
