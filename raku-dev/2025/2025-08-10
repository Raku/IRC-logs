[02:09] *** guifa joined
[03:14] *** guifa left
[08:30] *** [Tux] left
[08:33] *** [Tux] joined
[08:45] <[Tux]> Rakudo v2025.06.1-13-g15a2a9b1f (v6.d) on MoarVM 2025.06-5-gb1c74b8d8

[08:45] <[Tux]> csv-test-xs-20      0.115 -  0.116

[08:45] <[Tux]> csv-ip5xs           0.259 -  0.278

[08:45] <[Tux]> test-t --race       0.290 -  0.293

[08:45] <[Tux]> test-t              0.458 -  0.478

[08:45] <[Tux]> csv-parser          1.120 -  1.133

[08:46] <[Tux]> csv-ip5xs-20        1.094 -  1.169

[08:46] <[Tux]> test-t-20 --race    1.435 -  1.492

[08:46] <[Tux]> test                1.851 -  1.959

[08:46] <[Tux]> test-t-20           5.852 -  5.884

[08:46] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[10:42] <Geth> ¦ rakudo/main: 2d75c305eb | (Elizabeth Mattijsen)++ | src/core.c/Enumeration.rakumod

[10:42] <Geth> ¦ rakudo/main: Revert enum.raku representation for just word chars

[10:42] <Geth> ¦ rakudo/main: 

[10:42] <Geth> ¦ rakudo/main: 5e8d7f6567dd49c caused a test in roast to fail that depended on the

[10:42] <Geth> ¦ rakudo/main: enum.raku representation.  Instead of changing the test, revert the

[10:42] <Geth> ¦ rakudo/main: enum.raku representation to *not* use < > if there are just word

[10:42] <Geth> ¦ rakudo/main: characters in the enum.

[10:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2d75c305eb

[11:35] *** librasteve_ joined
[12:15] *** masukomi joined
[12:30] *** masukomi left
[13:47] *** guifa joined
[14:05] *** librasteve_ left
[14:59] *** librasteve_ joined
[16:14] *** guifa left
[17:09] *** librasteve_ left
[18:06] <lizmat> m: use nqp; dd nqp::istype(Str,Int())   # this feels wrong

[18:06] <camelia> rakudo-moar 2d75c305e: OUTPUT: «1␤»

[18:07] <lizmat> did Str somehow slip into the type cache of Int() ?

[18:07] <japhb> lizmat: Why so?  Str is Cool, which is coercible to Int ... using nqp::istype with a coercible type might be DIHWIDT, but ....

[18:08] <japhb> (But then, I never stared at the coerce rules all that hard.)\

[18:09] <lizmat> m: say Str.ACCEPTS(Int()

[18:09] <camelia> rakudo-moar 2d75c305e: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> say Str.ACCEPTS(Int()<HERE><EOL>␤»

[18:09] <lizmat> m: say Str.ACCEPTS(Int())

[18:09] <camelia> rakudo-moar 2d75c305e: OUTPUT: «False␤»

[18:14] <japhb> m: say Int().ACCEPTS(Str)

[18:14] <camelia> rakudo-moar 2d75c305e: OUTPUT: «True␤»

[18:19] <lizmat> m: my Int() @a = <a b>; dd @a

[18:19] <camelia> rakudo-moar 2d75c305e: OUTPUT: «Int(Any)  = Array[Int(Any)].new(Failure.new(exception => X::Str::Numeric.new(source => "a", pos => 0, reason => "base-10 number must begin with valid digits or '.'"), backtrace => Backtrace.new), Failure.new(exception => X::Str::Numeric.new(source => …»

[18:19] <lizmat> that also feels LTA

[18:21] *** guifa joined
[19:54] <lizmat> weird windows problem: https://stackoverflow.com/questions/79731417/i-have-a-problem-using-the-command-line-and-raku

[20:47] *** coleman left
[20:48] *** coleman joined
