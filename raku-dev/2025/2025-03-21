[02:31] *** codesections joined
[02:58] *** codesections left
[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:45] *** codesections joined
[04:40] *** codesections left
[08:00] *** finanalyst joined
[08:25] <Geth> ¦ rakudo/main: dc4e30ce2a | (Stefan Seifert)++ | src/Raku/ast/resolver.rakumod

[08:25] <Geth> ¦ rakudo/main: RakuAST: use type suggestions when reporting undeclared types

[08:25] <Geth> ¦ rakudo/main: 

[08:25] <Geth> ¦ rakudo/main: No idea why I thought routine suggestions would be of any help here.

[08:25] <Geth> ¦ rakudo/main: 

[08:25] <Geth> ¦ rakudo/main: Again MasterDuke++ for staying vigilant!

[08:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dc4e30ce2a

[08:39] <Geth> ¦ rakudo/main: 8f268d294e | (Stefan Seifert)++ | 2 files

[08:39] <Geth> ¦ rakudo/main: RakuAST: actually support old EXPORTHOW API

[08:39] <Geth> ¦ rakudo/main: 

[08:39] <Geth> ¦ rakudo/main: Even though according to a comment, this API should have been removed

[08:39] <Geth> ¦ rakudo/main: before "6.0.0" there's at least one spectest still using it.

[08:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8f268d294e

[08:40] <nine> 1290 by implementing a feature that has been deprecated for more than 10 years

[08:45] <nine> Intruiging: there are 6 POD related spectest files failing. Of these, 5 fail due to missing support for macros. Who'd have thought that macros play such a large role in documentation?

[08:46] <nine> On a side note: I'm quite surprised that there are even spectests about macros. Right now the language specification requires an implementation to have an "experimental" support (i.e. even the test files need `use experimental :macros;`). So the specification requires something that by definition is subject to change.

[09:17] *** librasteve_ joined
[09:42] <lizmat> update on the remaining blin issue:

[09:43] <lizmat> reverting the .assuming work is an option, but would require todoing a lot of spectests

[09:53] *** sena_kun joined
[10:00] *** sena_kun left
[10:03] *** finanalyst left
[10:06] <lizmat> nine: just confirmed that the &sub returned by .assuming does not have a serialization context

[10:11] <nine> If assuming is running at BEGIN time it needs to do everything that a BEGIN time EVAL does, i.e. it needs to be running as part of the outer compilation.

[10:11] *** finanalyst joined
[10:13] <lizmat> I understand what you're saying: is that a matter of setting the outer context correctly ?

[10:15] <lizmat> in the $ast.EVAL call?   

[10:19] <nine> Look at what happens in Actions when outer_ctx is set in the compilation options

[10:19] <lizmat> or some parameter to $compunit.IMPL-TO-QAST-COMP-UNIT  ?

[10:25] * lizmat looks

[10:38] <lizmat> ok, I'm getting the impression that this is going to be unsolvable until we've merged the bootstrap

[10:39] <lizmat> as the legacy grammar doesn't have an $*OUTER-RESOLVER

[10:39] *** finanalyst left
[10:39] <lizmat> which would be required if a specific context were to be specified in .EVAL

[10:44] <nine> That can very well be the case

[10:50] *** sivoais left
[10:51] *** sivoais joined
[11:23] <Geth> ¦ roast: cb93f5abcb | (Elizabeth Mattijsen)++ | 4 files

[11:23] <Geth> ¦ roast: TODO all test that depend on RakuAST based .assuming

[11:23] <Geth> ¦ roast: 

[11:23] <Geth> ¦ roast: It looks like using a RakuAST-based assuming won't be able to work

[11:23] <Geth> ¦ roast: in pre-compiled modules, at least not until the Raku bootstrap has

[11:23] <Geth> ¦ roast: been merged.

[11:23] <Geth> ¦ roast: 

[11:23] <Geth> ¦ roast: So mark all tests that would fail with the old implementation as

[11:23] <Geth> ¦ roast: TODO, hopefully only for a short time

[11:23] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/cb93f5abcb

[11:26] <Geth> ¦ rakudo/main: eb2315f1c4 | (Elizabeth Mattijsen)++ | 2 files

[11:26] <Geth> ¦ rakudo/main: Restore the old implementation of .assuming

[11:26] <Geth> ¦ rakudo/main: 

[11:26] <Geth> ¦ rakudo/main: A blin run made it clear that quite a few modules in the ecosystem

[11:26] <Geth> ¦ rakudo/main: depend on .assuming being used in a pre-compiled module environment.

[11:26] <Geth> ¦ rakudo/main: 

[11:26] <Geth> ¦ rakudo/main: Alas, this appears to be incompatible with the RakuAST based .assuming

[11:26] <Geth> ¦ rakudo/main: while running with the legacy system: it looks like it is going to

[11:26] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[11:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eb2315f1c4

[11:29] *** JimmyZhuo joined
[11:41] <nine> bootstrap-rakuast is now at 1289, just one test behind main (a Proc::Async test failing because of the POPULATE issue)

[11:41] <nine> lizmat++

[11:51] <JimmyZhuo>                 nqp::die("RO assignment");

[11:51] <JimmyZhuo>                 $lhs_ast.node.typed_sorry('X::Assignment::RO::Comp',

[11:51] <JimmyZhuo>                     variable => $lhs_ast.name);

[11:51] <JimmyZhuo> It seems there is no good way to add_sorry here, and Var::Lexical has no attr $!is-parameter, so can't do it at check time?

[11:56] <nine> I'm sure it's possible. It's just hard :)

[11:57] <nine> Var::Lexical has no $!is-parameter, but what about what Var::Lexical resolves to?

[11:57] <nine> i.e. $left.resolution

[11:59] <nine> You could probably also cheat and in RakuAST::ApplyInfix's PERFORM-CHECK generate the QAST for $left and then check whether that fits the criteria

[12:27] <nine> So, one of the big breaks from Perl to Raku is sigil invariance, i.e. you always use the same sigil to access some value unlike Perl where you write $a[0] for accessing @a's first element.

[12:28] <nine> m: class Foo { has $.name; method foo() { say $.name } }.new(:name(me => "you")).foo;

[12:28] <camelia> rakudo-moar eb2315f1c: OUTPUT: «me => you␤»

[12:28] <nine> m: class Foo { has $.name; method foo() { say @.name } }.new(:name(me => "you")).foo;

[12:28] <camelia> rakudo-moar eb2315f1c: OUTPUT: «(me => you)␤»

[12:28] <nine> m: class Foo { has $.name; method foo() { say %.name } }.new(:name(me => "you")).foo;

[12:28] <camelia> rakudo-moar eb2315f1c: OUTPUT: «{me => you}␤»

[12:28] <nine> So much for that...

[12:35] * lizmat realizes she's badly in need of a vacation

[12:35] <nine> You and me both baby :)

[12:38] <[Coke]> I am all for removing :experimental spec tests. Those should probably be in rakudo itself so we don't accidentally break anything, but not roast.

[12:39] <[Coke]> (Or having them all be TODO?, I guess?)

[12:40] <nine> Test harness complains even about passing TODOs

[12:40] <JimmyZhuo> t/experimental/xxx.t ??

[12:41] <nine> Also it's not even a TODO. A TODO would imply "this is what we want but just don't have yet". It's *experimental*. It's "we don't even know what we want". A specification saying "we require you to do....something, we actually don't know what" isn't much of a specification at all.

[12:50] <[Coke]> So let's rip it out, yes.

[13:05] <Geth> ¦ rakudo/main: 6c791595e7 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[13:05] <Geth> ¦ rakudo/main: RakuAST: support shorthand syntax for meta method calls

[13:05] <Geth> ¦ rakudo/main: 

[13:05] <Geth> ¦ rakudo/main: Fixes: $.^name

[13:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6c791595e7

[13:05] <nine> 1291

[13:05] <JimmyZhuo> nine: thanks, looks like I get the way, will try it tomorrow

[13:06] *** JimmyZhuo left
[13:06] <nine> ++JimmyZhuo

[13:07] <nine> JimmyZhuo: just a heads up. My desktop won't be available over the weekend

[13:07] <tellable6> nine, I'll pass your message to JimmyZhuo

[13:53] <Geth> ¦ rakudo/main: 7476648eea | (Stefan Seifert)++ | 2 files

[13:53] <Geth> ¦ rakudo/main: RakuAST: fix $?CLASS not resolved on implicit method signature

[13:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7476648eea

[13:53] <Geth> ¦ rakudo/main: a4c3ed56c0 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[13:53] <Geth> ¦ rakudo/main: RakuAST: prohibit special dispatchers on macroish calls

[13:53] <Geth> ¦ rakudo/main: 

[13:53] <Geth> ¦ rakudo/main: Calls like .WHAT or .WHO are not really method calls but more akin to

[13:53] <Geth> ¦ rakudo/main: macros, only that they are special cased by the compiler itself. Using

[13:53] <Geth> ¦ rakudo/main: special dispatchers like .? on them doesn't make sense.

[13:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a4c3ed56c0

[13:53] <nine> 1292

[16:08] *** codesections joined
[16:08] <Geth> ¦ rakudo/main: c19be7eefd | (Stefan Seifert)++ | 2 files

[16:08] <Geth> ¦ rakudo/main: RakuAST: support indirect method calls with multiple arguments

[16:08] <Geth> ¦ rakudo/main: 

[16:08] <Geth> ¦ rakudo/main: Fixes: foo $o: 1, 2

[16:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c19be7eefd

[16:09] <nine> 1294 by fixing a feature that I'd kill off in an instant

[16:09] <[Coke]> lizmat: can you bump nqp & moar to latest?

[16:11] <[Coke]> (or anyone!) (I am on a train at the moment)

[16:11] <[Coke]> releasable6: status

[16:11] <releasable6> [Coke], Next release in ≈1 day and ≈2 hours. There are no known blockers. Changelog for this release was not started yet

[16:11] <releasable6> [Coke], Details: https://gist.github.com/67a215c33d7dbd55ec9e10842aff3b3c

[16:14] <[Coke]> https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[16:15] <[Coke]> I have't categorized any yet, looks like a majority of rakuast, which I think we just pull the commit hashs for and add a status report of passing tests.

[16:18] <nine> [Coke]: seems like they are already at the latest

[16:19] <[Coke]> nine++ #thanks for checking!

[16:25] <Geth> ¦ rakudo/main: a70fbf6f48 | (Will Coleda)++ | docs/release_guide.pod

[16:25] <Geth> ¦ rakudo/main: This module is explicitly skipped by blin

[16:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a70fbf6f48

[16:29] *** codesections left
[16:33] <[Coke]> looks like the only one left on https://github.com/rakudo/rakudo/issues/5825 is for HTTP::Tiny which lizmat could not reproduce

[16:34] <[Coke]> ... and looking at the "new output" - I don't see a failure.

[16:35] <[Coke]> I see 3 TODO'd subtests that didn't pass

[16:36] <[Coke]> ah, a bunch of 503 Service Temporarily Unavailable.

[16:36] <[Coke]> so that's probably fine. closing blin ticket.

[17:07] <Geth> ¦ rakudo/main: 8fbe800efd | (Stefan Seifert)++ | 2 files

[17:07] <Geth> ¦ rakudo/main: RakuAST: support hypering of private method calls

[17:07] <Geth> ¦ rakudo/main: 

[17:07] <Geth> ¦ rakudo/main: Fixes: class Foo { trusts GLOBAL; method !foo { } }; (Foo.new,)>>!Foo::foo

[17:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8fbe800efd

[17:07] <nine> 1295

[17:09] <[Coke]> 4ee9503bdcd65d9017f24c5455f297eec7409cc5

[17:09] <linkable6> (2025-03-07) https://github.com/rakudo/rakudo/commit/4ee9503bdc Re-imagine .assuming using RakuAST

[17:19] <[Coke]> so many rakuast tickets today (cleaning those up in the changelog draft)

[17:23] <[Coke]> m: say ( 39*7+4)

[17:23] <camelia> rakudo-moar 8fbe800ef: OUTPUT: «277␤»

[17:23] <[Coke]> ^^ # of rakuast commits as of right now for this release

[17:24] <[Coke]> formatting looks off on that draft for rakuast, will investigate later.

[17:24] <[Coke]> -> afk

[17:25] <nine> I don't think that number is gonna change in the next few hours :) Next one is a tricky parsing problem and I have to leave soon

[17:59] <Geth> ¦ rakudo/main: f7f670f39d | (Stefan Seifert)++ | 3 files

[17:59] <Geth> ¦ rakudo/main: RakuAST: support $.foo: 1,2 syntax

[17:59] <Geth> ¦ rakudo/main: 

[17:59] <Geth> ¦ rakudo/main: RakuAST equivalent of commit 4a1323ed262f579abbb69dae5708e9baba2e874d

[17:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f7f670f39d

[17:59] <nine> Ok, I was wrong. 1296 it is

[18:02] <jdv> aka the 23cm ham band

[18:02] <jdv> 1296mhz;)

[18:16] <lizmat> [Coke]: MoarVM and NQP are already up to date on rakudo main

[18:22] <Geth> ¦ rakudo/main: 9b95ab96c3 | (Stefan Seifert)++ | 2 files

[18:22] <Geth> ¦ rakudo/main: RakuAST: support quoted private method calls

[18:22] <Geth> ¦ rakudo/main: 

[18:22] <Geth> ¦ rakudo/main: Fixes: self."!foo"()

[18:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9b95ab96c3

[18:22] <Geth> ¦ rakudo/main: 915c8defd6 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[18:22] <Geth> ¦ rakudo/main: RakuAST: throw appropriate exception class when private method not found at compile time

[18:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/915c8defd6

[18:23] <nine> 1297

[18:30] <nine> Huh...a case that fails on RakuAST exactly in the same way that it fails on JVM.

[18:31] <nine> And when the optimizer is turned off.

[18:35] <nine> The optimizer optimizes using a raku-meth-call-qualified dispatcher. That's why it fails on JVM.

[18:43] *** rakkable left
[18:44] *** rakkable joined
[18:44] <lizmat> rakkable: eco-pr macro

[18:44] <rakkable> lizmat, Running: eco-provides macro, please be patient!

[18:44] <rakkable> lizmat, Found 285 lines in 66 files (38 distributions):

[18:44] <rakkable> lizmat, https://gist.github.com/ebe9d3bcda5150269501ea5908f99ae2

[18:46] <lizmat> rakkable: eco-pr §macro

[18:46] <rakkable> lizmat, Running: eco-provides §macro, please be patient!

[18:46] <rakkable> lizmat, Found 107 lines in 37 files (26 distributions):

[18:46] <rakkable> lizmat, https://gist.github.com/a4efbbdd1865735d048d99344ab6478f

[18:46] <lizmat> much better

[18:47] <lizmat> rakkable: eco-pr 'use experimental :macros'

[18:47] <rakkable> lizmat, Running: eco-provides 'use experimental :macros', please be patient!

[18:47] <rakkable> lizmat, No occurrences found for: eco-provides 'use experimental :macros'

[18:47] <lizmat> rakkable: eco-pr ':macros'

[18:47] <rakkable> lizmat, Running: eco-provides ':macros', please be patient!

[18:47] <rakkable> lizmat, No occurrences found for: eco-provides ':macros'

[18:48] <lizmat> rakkable: eco-pr :macros

[18:48] <rakkable> lizmat, Running: eco-provides :macros, please be patient!

[18:48] <rakkable> lizmat, Found 4 lines in 4 files (4 distributions):

[18:48] <rakkable> lizmat, https://gist.github.com/c3ca023eb02f182ffb9af0791aa2c2a7

[18:49] <lizmat> ok, looks like there are only 2 modules that actually use the experimental :macros feature in the ecosystem

[18:50] <lizmat> Xliff's GLib::Raw::Macros and OO::Monitors

[18:50] <lizmat> the latter now being an ecosystem module, so relatively easy to get fixed  :-)

[18:52] <lizmat> rakkable: eco-pr wait-condition

[18:52] <rakkable> lizmat, Running: eco-provides wait-condition, please be patient!

[18:52] <rakkable> lizmat, OO::Monitors:ver<1.1.4>:auth<zef:raku-community-modules>/lib/OO/Monitors.rakumod

[18:52] <rakkable> lizmat, 108:macro wait-condition($cond) is export {

[18:52] <rakkable> lizmat, 109:    my $cond-attr = get-cond-attr($cond, 'wait-condition');

[18:52] <rakkable> lizmat, That was all!

[18:52] <lizmat> rakkable: eco-pr meet-condition

[18:52] <rakkable> lizmat, Running: eco-provides meet-condition, please be patient!

[18:52] <rakkable> lizmat, OO::Monitors:ver<1.1.4>:auth<zef:raku-community-modules>/lib/OO/Monitors.rakumod

[18:52] <rakkable> lizmat, 113:macro meet-condition($cond) is export {

[18:52] <rakkable> lizmat, 114:    my $cond-attr = get-cond-attr($cond, 'meet-condition');

[18:52] <rakkable> lizmat, That was all!

[18:53] <lizmat> ok, looks like nobody is using the macros exported by OO::Monitors  *phew*

[18:55] <Geth> ¦ rakudo/main: f3ae9c3876 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[18:55] <Geth> ¦ rakudo/main: RakuAST: optimize qualified method calls

[18:55] <Geth> ¦ rakudo/main: 

[18:55] <Geth> ¦ rakudo/main: This actually fixes a case that would otherwise fail (and still does so

[18:55] <Geth> ¦ rakudo/main: on the JVM):

[18:55] <Geth> ¦ rakudo/main: class Baz { submethod blarb() { } }; class Grtz is Baz { }; Grtz.new.Baz::blarb

[18:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f3ae9c3876

[18:55] <nine> 1298 and that's it for today

[18:55] <nine> Turning computer off now :)

[19:02] <lizmat> .tell Xliff: are you using OO::Monitor's wait-condition / need-condition in your code ?

[19:02] <tellable6> lizmat, I'll pass your message to Xliff

[20:19] *** finanalyst joined
[21:19] <jdv> was 1298 a good year?

[21:46] *** sena_kun joined
[21:46] *** finanalyst left
[23:00] <releasable6> Next release in ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:25] *** sena_kun left
