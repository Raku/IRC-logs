[00:14] *** MasterDuke joined
[00:14] <MasterDuke> what tests did 4d4ac9fce3103821d25d1678154b6a29018ad7a7 break?

[00:14] <tellable6> 2025-04-05T07:09:54Z #raku <librasteve> MAsterDuke: thanks - now merged

[00:35] *** MasterDuke left
[00:44] <[Coke]> ugexe: https://docs.raku.org/type/IO/Socket/Async#method_listen describes how. I'll fix the roast test

[00:47] <[Coke]> actually, I think we still need the random port for test #2.

[00:47] <[Coke]> it tries to connect before the server runs to verify the failure.

[00:49] <ugexe> wouldnt you just use the port from the first test? i'm presuming the first listening socket will be closed and thus the port should be free

[00:49] <ugexe> i guess that doesn't take the host/address into account

[00:53] <[Coke]> right, it's two different hosts.

[00:54] <[Coke]> just like the first hostname is unlikely to match, I think we need a similar port choice.

[00:54] <[Coke]> then for the "happy" path we can do it the right way.

[01:34] <[Coke]> this is a little harder, will report back tomorrow

[01:37] *** RakuIRCLogger left
[01:39] <jdv> faster

[04:23] *** lizmat_ left
[04:43] *** guifa left
[06:07] *** lizmat joined
[07:19] <Geth> ¦ nqp/main: a890b03cf0 | (Stefan Seifert)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp

[07:19] <Geth> ¦ nqp/main: Ensure we declare our dynamics even when there's no compunit

[07:19] <Geth> ¦ nqp/main: 

[07:19] <Geth> ¦ nqp/main: Naughty users (like Rakudo's ProxyReaderFactory dispatch helper) might

[07:19] <Geth> ¦ nqp/main: compile a block without enclosing it in a compunit. In that case we

[07:19] <Geth> ¦ nqp/main: wouldn't declare the %*BLOCKS_DONE and $*BLOCK dynamic variables which

[07:19] <Geth> ¦ nqp/main: may lead to them getting auto-vivified in the package (and exported) and

[07:19] <Geth> ¦ nqp/main: may pick up confusing values from outside. Better declare them in a

[07:19] <Geth> ¦ nqp/main: place that's harder to avoid.

[07:19] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/a890b03cf0

[07:22] <Geth> ¦ rakudo/main: 690370ad50 | (Stefan Seifert)++ | tools/templates/NQP_REVISION

[07:22] <Geth> ¦ rakudo/main: Bump NQP to get a fix for misbehaving compiler

[07:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/690370ad50

[07:29] <Geth> ¦ rakudo/main: 00aa9b8f38 | (Stefan Seifert)++ | t/packages/Test-Helpers/lib/Test/Helpers/QAST.rakumod

[07:29] <Geth> ¦ rakudo/main: RakuAST: fix tests failing when compiler doesn't have stage optimize

[07:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/00aa9b8f38

[07:37] <ab5tract> nine: looking at d47c8febdd817089f75602617051f40d296731c7 now

[07:37] <linkable6> (2023-11-05) https://github.com/rakudo/rakudo/commit/d47c8febdd RakuAST: Make multi subs check for re-declaration of signatures

[07:37] <ab5tract> I'm a bit surprised that there is an issue, as it wasn't an issue when I added it

[07:38] <nine> I don't see how t/02-rakudo/12-multi-revision-gated.t could have passed back then

[07:50] <Geth> ¦ rakudo/main: 76951f3e6a | (Stefan Seifert)++ | t/08-performance/02-qast-rewrites.t

[07:50] <Geth> ¦ rakudo/main: RakuAST: todo optimizer tests

[07:50] <Geth> ¦ rakudo/main: 

[07:50] <Geth> ¦ rakudo/main: Note that even some of the passing tests are wrong because they look for

[07:50] <Geth> ¦ rakudo/main: p6for which the RakuAST frontend doesn't generate ever.

[07:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/76951f3e6a

[07:50] <Geth> ¦ nqp/main: d9cf3a92ea | (Stefan Seifert)++ | 2 files

[07:50] <Geth> ¦ nqp/main: Reapply "Use correct typed accessors where able"

[07:50] <Geth> ¦ nqp/main: 

[07:50] <Geth> ¦ nqp/main: This reverts commit 703149cbb3d67fc73c0d2b879ab7009509aea01e.

[07:50] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/d9cf3a92ea

[07:53] *** sena_kun joined
[08:02] <nine> Turns out that commit was innocent after all. The actual problem is a miscompile of the NativeCall module with RakuAST. In my test I simply forgot to clear .precomp, so even my test on non-RakuAST used the RakuAST compiled module.

[08:02] <nine> Reverting that commit then triggered a recompile and that gave me fresh precomp files which looked liked it would have fixed the issue.

[08:24] <Geth> ¦ rakudo/bootstrap-rakuast: 20 commits pushed by (Stefan Seifert)++

[08:24] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/d441b159dcd7...ae1f9915bcd0

[08:28] <Geth> ¦ rakudo/main: 12 commits pushed by (Stefan Seifert)++

[08:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/76951f3e6a69...cf8c5ef25c73

[08:29] *** sena_kun left
[08:29] <nine> A bisect of the problem revealed the actual source which luckily already had a fix on the bootstrap branch. So I cherry picked all fixes from that branch that are clearly compatible with the non-RakuAST frontend

[08:31] <Geth> ¦ rakudo/bootstrap-rakuast: 8 commits pushed by (Stefan Seifert)++

[08:31] <Geth> ¦ rakudo/bootstrap-rakuast: dcd14f9737 | RakuAST: work around serialization problem with static code object

[08:31] <Geth> ¦ rakudo/bootstrap-rakuast: 324433758d | RakuAST: work around bootstrapping issues with CORE:: lookups

[08:31] <Geth> ¦ rakudo/bootstrap-rakuast: 16a34d93e5 | RakuAST: work around parse error

[08:31] <Geth> ¦ rakudo/bootstrap-rakuast: d07f166383 | RakuAST: work around self not found in lambdas declared in BEGIN block

[08:31] <Geth> ¦ rakudo/bootstrap-rakuast: 54ad832ec6 | RakuAST: remove workaround needed by the old compiler frontend

[08:31] <Geth> ¦ rakudo/bootstrap-rakuast: 0ef4f4e16c | RakuAST: work around indirect lookups not available early enough in the bootstrap

[08:31] <Geth> ¦ rakudo/bootstrap-rakuast: a8d069ecf2 | RakuAST: work around segfaults trying to access a non-existing outer

[08:31] <Geth> ¦ rakudo/bootstrap-rakuast: 2e4feb5d4d | Fix bootstrap issues with Buf

[08:31] <Geth> ¦ rakudo/bootstrap-rakuast: review: https://github.com/rakudo/rakudo/compare/ae1f9915bcd0...2e4feb5d4d2e

[08:45] *** finanalyst joined
[08:54] *** sena_kun joined
[10:03] *** donaldh joined
[10:09] *** donaldh- joined
[10:17] <Geth> ¦ rakudo/main: 52658b94e7 | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[10:17] <Geth> ¦ rakudo/main: RakuAST: fix bogus warnings about unused values in if statements with KEEP/UNDO phasers

[10:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/52658b94e7

[10:17] <Geth> ¦ rakudo/main: ef3950464a | (Stefan Seifert)++ | t/05-messages/10-warnings.t

[10:17] <Geth> ¦ rakudo/main: RakuAST: make warnings test more lenient

[10:17] <Geth> ¦ rakudo/main: 

[10:17] <Geth> ¦ rakudo/main: In the old frontend the optimizer collects warnings about unused values,

[10:17] <Geth> ¦ rakudo/main: groups them by message and appends the list of line numbers for each.

[10:17] <Geth> ¦ rakudo/main: All of this is manual code just dealing with message strings. The

[10:18] <Geth> ¦ rakudo/main: RakuAST frontend however builds an exception for each occurence and adds

[10:18] <Geth> ¦ rakudo/main: them to an X::Comp::Group which is arguably the more structured

[10:18] <nine> t/05-messages/10-warnings.t passes now

[10:18] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[10:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ef3950464a

[10:18] <Geth> ¦ rakudo/main: f0e8b57168 | (Stefan Seifert)++ | t/05-messages/10-warnings.t

[10:18] <Geth> ¦ rakudo/main: RakuAST: todo a macro test

[10:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f0e8b57168

[10:23] *** donaldh left
[10:26] *** donaldh- is now known as donaldh

[10:42] <Geth> ¦ rakudo/main: 8d0fe4d4f7 | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[10:42] <Geth> ¦ rakudo/main: RakuAST: fix error trying to report keyword used as listop error

[10:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8d0fe4d4f7

[11:07] <Geth> ¦ rakudo/main: fc01dfd6fa | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[11:07] <Geth> ¦ rakudo/main: RakuAST: complain about &function in a feed

[11:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fc01dfd6fa

[11:20] <Geth> ¦ rakudo/main: edc7ae9701 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[11:20] <Geth> ¦ rakudo/main: RakuAST: throw appropriate exception for invalid language version

[11:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/edc7ae9701

[11:30] <Geth> ¦ rakudo/main: f59944b1bf | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[11:30] <Geth> ¦ rakudo/main: RakuAST: bring back suggestions for private method not found

[11:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f59944b1bf

[11:35] <Geth> ¦ rakudo/main: cbb2eb1d0d | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[11:35] <Geth> ¦ rakudo/main: RakuAST: bring back specific messages for errors in declarations

[11:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cbb2eb1d0d

[11:35] <nine> t/05-messages/01-errors.t passes now

[12:06] <lizmat> nine: there are 2 "method apply-sink" in Raku/ast

[12:06] <lizmat> and one of them is not accepting: :$okifnil

[12:07] <lizmat> and it's causing t/12-rakuast/var.rakutest to break

[12:07] <lizmat> should I just add a dummy :$okifnil to the one that hasn't got it, or is there something deeper afoot ?

[12:07] <nine> Please don't

[12:08] <nine> $okifnil is only for Expressions. If there's an error because of it, that means that a non-expression appears in a place where there must only be expressions

[12:08] <lizmat> ok, I will research that avenue then  :-)

[12:08] <nine> See the various fixes where I turned things into terms

[12:08] <lizmat> could be the test, haven't look at that yet

[12:10] <nine> A Blockoid is certainly not an Expression, so the test is wrong

[12:11] <lizmat> but a PointyBlock is, right?

[12:13] <nine> yes

[12:14] *** guifa joined
[12:16] <Geth> ¦ rakudo/main: 726864bb4b | (Elizabeth Mattijsen)++ | t/12-rakuast/var.rakutest

[12:16] <Geth> ¦ rakudo/main: RakuAST: fix fault RakuAST::Var test

[12:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/726864bb4b

[12:31] *** guifa left
[12:37] <Geth> ¦ rakudo/main: 42197d93cc | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[12:37] <Geth> ¦ rakudo/main: RakuAST: fix order of post constraints on parameters

[12:37] <Geth> ¦ rakudo/main: 

[12:37] <Geth> ¦ rakudo/main: There's (error reporting) code that relies on a specific orders in which

[12:37] <Geth> ¦ rakudo/main: post constraints get added on a parameter. While this is horribly

[12:37] <Geth> ¦ rakudo/main: fragile, for now we just match the incidental order that the old

[12:37] <Geth> ¦ rakudo/main: frontend produces.

[12:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/42197d93cc

[12:37] <nine> At least this order is very clear as it's coming from a single place in the RakuAST code where it's spread around a lot in the old actions

[12:37] <nine> Actions and grammar. It also depends on parse order.

[12:42] <nine> lizmat: what do we do? A test is failing because it's expecting an X::Comp::AdHoc but it's getting an X::QuoteWords::Missing::Closer instead.

[12:43] <lizmat> X::QuoteWords::Missing::Closer is more specific than just a BEGIN die

[12:44] <lizmat> so I'd say, change the test to either just check for dying, or for the more specific error (provided it's not implementation dependent?)

[12:44] <nine> Well you didn't change the old frontend to use the new exception type when you introduced it, so it would fail that test if I changed it.

[12:45] <nine> The test also tests the message which we would lose if I just changed it to expect the code to die.

[12:45] <lizmat> I have no active recollection from that  :)

[12:45] <nine> After all the point of the test *is* checking that message for being helpful on a parse error.

[12:46] <lizmat> and the X::QuoteWords::Missing::Closer is more helpful, I gather >

[12:46] <lizmat> ?

[12:46] <nine> It's exactly the same message. Just a more tightly typed exception.

[12:46] *** JimmyZhuo joined
[12:47] <lizmat> wouldn't then just testing for Exception and the message be a solution?

[12:49] <Geth> ¦ rakudo/main: eac975fb91 | (Stefan Seifert)++ | t/05-messages/03-errors.t

[12:49] <Geth> ¦ rakudo/main: RakuAST: defuse overly specific test

[12:49] <Geth> ¦ rakudo/main: 

[12:49] <Geth> ¦ rakudo/main: The RakuAST frontend throws a more tightly typed exception (with exactly

[12:49] <Geth> ¦ rakudo/main: the same message). As the important part is the message and to keep the

[12:49] <Geth> ¦ rakudo/main: old frontend passing the test also, reduce the constraint to just any

[12:49] <Geth> ¦ rakudo/main: exception. Expecting an AdHoc specifically doesn't make sense anyway as

[12:49] <Geth> ¦ rakudo/main: it's preventing us precicely from introducing a more targeted type.

[12:49] <Geth> ¦ rakudo/main: 

[12:49] <Geth> ¦ rakudo/main: lizmat++ for the suggestion

[12:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eac975fb91

[12:50] <nine> Good thing I asked you :)

[12:50] <lizmat> hehe   glad to have been of service  :-)

[12:53] <lizmat> notable6: weekly

[12:53] <notable6> lizmat, 3 notes: https://gist.github.com/efb989c42a8c09a60cdf1898d03b3a00

[12:54] <lizmat> notable6: weekly reset

[12:54] <notable6> lizmat, Moved existing notes to “weekly_2025-04-08T12:54:08Z”

[13:03] <nine> m: class Foo { method foo() { $^a } }

[13:03] <camelia> rakudo-moar 42197d93c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Placeholder variables (eg. $^a) cannot be used in a method.␤Please specify an explicit signature, like method foo ($a) { ... }␤at <tmp>:1␤------> class Foo { method foo() { <HERE>$^a } }␤»

[13:03] <nine> Oh, ok, so placeholder variables cannot be used in a method? Good to know. Thanks for the clear message!

[13:03] <nine> m: class Foo { method foo { $^a } }

[13:03] <camelia> rakudo-moar 42197d93c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Placeholder variables (eg. $^a) cannot be used in a method.␤Please specify an explicit signature, like method foo ($a) { ... }␤at <tmp>:1␤------> class Foo { method foo { <HERE>$^a } }␤»

[13:04] <nine> Really, placeholders would be one of the first things I'd just remove from the language :)

[13:05] <nine> There's so many exceptions to where they can be used anyway

[13:05] <lizmat> m: class Foo { method foo { @_ } }

[13:05] <camelia> rakudo-moar 42197d93c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Placeholder variables (eg. @_) cannot be used in a method.␤Please specify an explicit signature, like method foo (*@_) { ... }␤at <tmp>:1␤------> class Foo { method foo { <HERE>@_ } }␤»

[13:05] <lizmat> he

[13:06] <JimmyZhuo> m: say { * * * }(2,5);

[13:06] <camelia> rakudo-moar 42197d93c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed double closure; WhateverCode is already a closure without curlies, so either remove the curlies or use valid parameter syntax instead of *␤at <tmp>:1␤------> say { * * * }<HERE>(2,5);␤    expe…»

[13:09] <lizmat> notable6: weekly reset

[13:09] <notable6> lizmat, Moved existing notes to “weekly_2025-04-08T13:09:50Z”

[13:10] <JimmyZhuo> looks like a lots of special rules makes it hard to optimize, to read, and torture the implementors?

[13:15] <Geth> ¦ rakudo/main: d475334c9b | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[13:15] <Geth> ¦ rakudo/main: RakuAST: prohibit placeholders %_ in methods

[13:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d475334c9b

[13:15] <nine> t/05-messages/03-errors.t passes now

[13:18] <lizmat> hmmmm... not sure what to make of https://ssojet.com/escaping/regex-escaping-in-raku/ 

[13:19] <lizmat> similarly https://ssojet.com/encryption-decryption/rc6-128-in-raku/

[13:20] <nine> The words/information ratio and the wording itself suggests these articles being AI generated

[13:21] <lizmat> yeah....  :-(

[13:22] * lizmat plonks ssojet

[13:23] <nine> So I gave it a try and asked ChatGPT to "Please write an article about how to escape regex characters in Raku". The result is almost identical

[13:23] <lizmat> thanks for the confirmation

[13:35] *** donaldh left
[13:39] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/04/08/2025-14-diving/

[13:43] <nine> m: (:::[])

[13:43] <camelia> rakudo-moar d475334c9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No such symbol ':<>'␤at <tmp>:1␤------> (:::[]<HERE>)␤»

[13:44] <nine> I kinda doubt that an error message about ":<>" is more helpful here than the "Empty name lookup not possible as a constant" that RakuAST gives

[13:46] <lizmat> yeah, it feels like one of those tests from the mists of time that used to crash the parser, and then got enshrined with a particular error message

[13:46] <lizmat> rather than just testing that the parser lived

[13:46] <nine> That's exactly what it is. On this particular one jnthn even wrote "My motivation to fix these things, or have them clutter RT, is

[13:47] <nine> relatively low, fwiw."

[13:47] <nine> Well the parser does die, just no longer with a "ResizablePMCArray​: index

[13:48] <nine> out of bounds!"

[13:48] <lizmat> suggest then replacing it with a lives-ok { q/(:::[])/.EVAL }

[13:48] <lizmat> ah...

[13:48] <nine> This code is so non-sensical, I don't even have a clue what the intended one could have been :)

[13:49] <lizmat> fwiw, there appear to be 15 references to PMC still in roast

[13:49] <lizmat> all in comments though, afaics

[13:57] *** donaldh joined
[14:00] <lizmat> afk for a few hours&

[14:00] <jdv> is make test failing with and without rakuast for anyone else?

[14:01] <[Coke]> Was for me, yes.

[14:01] *** sena_kun left
[14:01] <[Coke]> (yesterday, haven't tried the flurry of updates from today!)

[14:01] <jdv> just wanted to make sure it wasn't something i did locally.  ok.

[14:02] *** sena_kun joined
[14:04] <lizmat> aaah...  it looks like .rakutest files are not getting fudged

[14:05] <lizmat> if someone with knowledge about fudging could have a look at that, that would be great  :-)

[14:07] <nine> lizmat: there's no fudging in make test in general

[14:08] <nine> It wouldn't make sense anyway since fudging exists to allow for different compiler implementations having different levels of language support. make test is for one specific compiler implementation

[14:10] *** JimmyZhuo left
[14:11] <[Coke]> nine - any thoughts on unTODOing roast tests that are passing (on master, and -errata?)

[14:12] <[Coke]> (or, as probably is the case, unfudging, haven't look at the files, only at the test results)

[14:12] <lizmat> nine: fudging to handle #?rakudo skip   I mean

[14:13] <lizmat> e.g.:   raku t/13-experimental/macros-opaque-ast.rakutest

[14:13] <lizmat> fails and: make t/13-experimental/macros-opaque-ast.rakutest   passes with # SKIPs

[14:13] <[Coke]> the equivalent of rakudo skip in make test is probably wrapping it in a pod comment.

[14:14] <[Coke]> (if you're trying to avoid some compiler error)

[14:16] <jdv> i unTODO'd a bunch not that long ago.  it was too much noise.

[14:17] *** leont left
[14:17] *** leont joined
[14:19] *** ab5tract left
[14:20] *** ab5tract joined
[14:21] <Geth> ¦ rakudo/main: f7369d34fb | (Elizabeth Mattijsen)++ | 3 files

[14:21] <Geth> ¦ rakudo/main: Remove skipped macro tests

[14:21] <Geth> ¦ rakudo/main: 

[14:21] <Geth> ¦ rakudo/main: On the assumption that they won't get implemented anyway in that

[14:21] <Geth> ¦ rakudo/main: way, and because they are no longer fudged, produce errors otherwise

[14:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f7369d34fb

[14:28] <Geth> ¦ rakudo/main: 0bf9e87e93 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[14:28] <Geth> ¦ rakudo/main: Todo a confusing test about the repl under RakuAST

[14:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0bf9e87e93

[14:29] <lizmat> make test clean again under legacy grammar

[14:29] <lizmat> afk for a few hours&

[14:41] * timo prepares a huge stackoverflow response to the hyper/race/gather question

[15:12] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++

[15:12] <Geth> ¦ rakudo/main: 61710f17cc | RakuAST: warn about uninitialized variables in enum initializer list

[15:12] <Geth> ¦ rakudo/main: 7414f91580 | RakuAST: mark test as todo that expects a generated POPULATE

[15:12] <Geth> ¦ rakudo/main: 5236bc99d7 | Revert "RakuAST: remove valid identifier check for now"

[15:12] <Geth> ¦ rakudo/main: 7745d93831 | RakuAST: throw the expected error on (:::[])

[15:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/0bf9e87e9306...7745d938313b

[15:12] <nine> t/05-messages/02-errors.t fixed now

[15:12] <nine> That last one was way more effort than that test deserved

[16:02] *** sena_kun left
[16:07] *** sena_kun joined
[16:30] *** zostay left
[16:30] *** tbrowder left
[16:31] *** zostay joined
[16:31] *** tbrowder joined
[16:35] <timo> https://stackoverflow.com/a/79562603/804005 my hyper/race/gather ... "extravaganza"?

[16:42] *** guifa joined
[17:05] <Geth> ¦ rakudo/main: 0957a8b73a | (Stefan Seifert)++ | 2 files

[17:05] <Geth> ¦ rakudo/main: RakuAST: better fix for clobbered $_ in EVAL

[17:05] <Geth> ¦ rakudo/main: 

[17:05] <Geth> ¦ rakudo/main: With commit ede438efa8e83b66e4286ab1bdff1c236e7e95c3 we started

[17:05] <Geth> ¦ rakudo/main: declaring a $_ in an EVAL to stop the outer $_ from getting clobbered

[17:05] <Geth> ¦ rakudo/main: e.g. by an exception in a smartmatch and the resulting failure to reset

[17:05] <Geth> ¦ rakudo/main: $_ to the previous value. However this meant that an outer $_ was no

[17:05] <Geth> ¦ rakudo/main: longer visible in an EVAL which broke other tests.

[17:05] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[17:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0957a8b73a

[17:05] <nine> And t/12-rakuast/regex-substitution.rakutest is back with us

[17:09] <nine> m: try 1

[17:09] <camelia> rakudo-moar 7745d9383: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 1 in sink context (line 1)␤»

[17:09] <donaldh> I went to go and fix the missing 'Sigils' headline text on https://docs.raku.org/language/variables

[17:09] <nine> m: try +"a"

[17:09] <camelia> rakudo-moar 7745d9383: ( no output )

[17:09] <nine> m: +"a"

[17:09] <camelia> rakudo-moar 7745d9383: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "+" in expression "+\"a\"" in sink context (line 1)␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '<HERE>a' (indicated by <HERE>)␤  in block <unit> at <tmp> line 1␤␤»

[17:10] <donaldh> But realise I don't know what this is trying to achieve: https://github.com/Raku/doc/blob/f157d1b8a4d712fb6e500888038ddc9e9e9e3d1e/doc/Language/variables.rakudoc#L14-L15

[17:10] <nine> Can someone explain to me why we don't warn about the useless +"a" when it's in a try but we do warn about the useless 1?

[17:12] <lizmat> nine: couldn't we make that a compilation error now, rather than a worry ?

[17:12] <lizmat> ah, missed the "inside a try"

[17:14] <donaldh> I can't tell the intended goal from either the source or the generated HTML: https://gist.github.com/donaldh/e359feedb8e9ad8cf8159675f13b62de

[17:43] *** finanalyst left
[17:58] <[Coke]> basically the X<> syntax there going into the search index, so we can find those items even if there isn't a header specifically for them.

[18:00] <[Coke]> Were you looking at the HTML or the source first to ask that question?

[18:06] <Geth> ¦ rakudo/main: 211641a42a | (Stefan Seifert)++ | src/Raku/ast/statementprefixes.rakumod

[18:06] <Geth> ¦ rakudo/main: RakuAST: don't warn about unused values in try statements

[18:06] <Geth> ¦ rakudo/main: 

[18:06] <Geth> ¦ rakudo/main: A try is an indicator that an expression may be executed for

[18:06] <Geth> ¦ rakudo/main: side-effects.

[18:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/211641a42a

[18:07] <nine> t/02-rakudo/repl.t passes

[18:07] <nine> With that it looks like my grant is finally done :)

[18:16] <[Coke]> \o/

[18:34] <jdv> woohoo

[18:54] <timo> whoa

[18:54] <timo> amazing :)

[19:54] <[Coke]> releasable6: next

[19:54] <releasable6> [Coke], Next release in ≈10 days and ≈23 hours. 2 blockers. 228 out of 231 commits logged

[19:54] <releasable6> [Coke], Details: https://gist.github.com/27b45e11551d42a3ff96e3f31bbb6f61

[19:55] <[Coke]> one of those blockers is the blin run (wherein the bad commit was already reverted), and updates for roast tests, which include a bunch of passing TODOs, and https://github.com/Raku/roast/issues/872

[19:56] <[Coke]> that roast issue is basically a cherry pick (except there's a merge conflict)

[19:56] <[Coke]> so, no really coding required, just some git maintenance.

[20:38] *** [Coke] left
[20:53] *** finanalyst joined
[20:56] *** [Coke] joined
[22:10] *** guifa left
[22:23] <donaldh> coke: I looked at the HTML first and got confused

[22:26] <donaldh> I _think_ the fix is just to swap the two lines so the X<...> entries are before the =head1

[22:27] <donaldh> Updated https://gist.github.com/donaldh/e359feedb8e9ad8cf8159675f13b62de seems to work.

[22:50] *** finanalyst left
[22:51] *** sena_kun left
[22:55] *** lizmat left
[22:55] *** lizmat_ joined
