[00:25] *** donaldh left
[03:12] *** guifa left
[04:40] *** guifa joined
[07:57] <nine> ab5tract: oh my....of course that my $_ in RakuAST::Call::Method.IMPL-INTERPRET would not help. We're looking for a $_ in the lexical outer frames, not the caller frames.

[07:58] <nine> Ah, no. That's not it. As EVAL does my $context := nqp::defined($ctx) ?? $ctx !! CALLER::LEXICAL::;

[08:52] *** finanalyst joined
[09:34] *** finanalyst left
[10:24] <ab5tract> What I’ve noticed is that the blow up is happening with a compile resolver, presumably being handed off from the eval resolver

[10:25] <ab5tract> But I was a bit surprised to be working with a compile resolver where I would have expected an eval resolver

[10:26] <ab5tract> nine: any idea what RakuAST::IMPL::InterpContext is for? It’s passed to all IMPL-INTERPRET calls but is an empty class and I never see anything done with it

[10:27] <ab5tract> I *think* the issue could be solved by correctly passing the eval resolver’s outer to the compile resolver constructor. But I’m really just stabbing at shadows at the moment

[10:48] <nine> ab5tract: resolvers wont help you

[10:49] <nine> The EVAL resolver is only for evaluating full RakuAST trees which is a different use case

[10:49] <nine> That context is also unused for now

[10:51] <ab5tract> that saves me from wasting time going down false paths. thanks!

[10:52] <ab5tract> I do wonder about that though.... `src/Raku/ast/resolver.rakumod:1004` appears near the top of the stack trace

[10:52] <ab5tract> But also: taking your word for it usually works out well for me :)

[10:53] <ab5tract> If you have any thoughts as to where I can direct my future stabbings, please share!

[11:00] <nine> It's something about CALLER::LEXICAL not finding symbols from the nqp code. IOW I don'tknow how to give it a $_

[11:00] <nine> You can work around in EVAL itself 

[11:01] <nine> Check whether $ctx has a $_ and if not take a LEXICAL:: froma block as $ctx

[11:02] <nine> I would really like to know if theres another way though. PseudoStash is not easy to understand though

[11:23] <ab5tract> I think the from-context code is wrong because it disregards the resolver’s $!outer when constructing the new derived resolver

[11:24] <ab5tract> nothing changed when adjusting this, though :(

[11:24] <ab5tract> I'll try the less awesome approach first

[11:31] <ab5tract> Wow, you were not joking about PseudoStash :O

[11:46] *** El_Che joined
[12:00] <El_Che> timo: test mimalloc_alpine_fix_for_2025.04_release atm

[12:01] *** guifa left
[12:03] <El_Che> bad news: 

[12:03] <El_Che> https://productionresultssa18.blob.core.windows.net/actions-results/1c20a1fc-7786-418c-93f4-538cc4d6e879/workflow-job-run-dbfbb46d-a6b2-587d-497f-7c737266253b/logs/job/job-logs.txt?rsct=text%2Fplain&se=2025-04-21T12%3A13%3A12Z&sig=97dEHZ1tTKEMNPLJonZUuwb0YaBnIW62PfrLPqJRrWQ%3D&ske=2025-04-21T22%3A22%3A37Z&skoid=ca7593d4-ee42-46cd-af88-8b886a2f84eb&sks=b&skt=2025-04-21T10%3A22%3A37Z&sktid=398a6654-997b-47e

[12:03] <El_Che> 9-b12b-9515b896b4de&skv=2025-01-05&sp=r&spr=https&sr=b&st=2025-04-21T12%3A03%3A07Z&sv=2025-01-05

[12:03] <El_Che> ooops

[12:03] <El_Che> to long url

[12:04] <El_Che> summary on top, full log below: https://gist.github.com/nxadm/4109ec01e6ccac8bf948ffa8addcf0d3

[12:20] <timo> is there a package that has the linux headers inside it?

[12:51] <timo> i've seen a different patch where the include for prctl was moved inside the if(__GLIBC__) below, could you try that? that'd be the "if !defined(PR_SET_VMA)" and also the include for prctl.h

[12:52] <timo> https://github.com/microsoft/mimalloc/commit/951538d469f72532e43a2437d556a73518f5dde4 - so this patch that's already included from the moarvm branch, but moved one line down essentially

[12:54] <timo> On musl-libc the required types for prctl are defined in sys/prctl.h and including linux/prctl.h fails either because the file does not exist or because it redefines the types.

[12:54] <timo> ^- from one of the issues on github

[12:57] <El_Che> Hi

[12:58] <El_Che> yes, linux-headers

[12:58] <El_Che> and compiling with gcc

[12:58] <El_Che> I addedd it before

[12:58] <El_Che> before the branch, whilke debugging

[12:58] <El_Che> but it then complains a function is redeclared

[13:08] <[Coke]> Maybe it's better to go back than forward here.

[13:08] <timo> the code below that also uses prctl uses "if defined" to make sure it doesn't try to call prctl with something that's missing

[13:08] <timo> yeah coke i think you're right

[13:08] <[Coke]> And only update mimalloc until after it's safe.

[13:09] <timo> El_Che: can you easily change the mimalloc 3rdparty commit for the submodule? or just revert the individual commit that updates the mimalloc version?

[13:33] *** finanalyst joined
[13:34] *** finanalyst left
[14:36] <[Coke]> patrickb: do we have any docs describing our current CI?

[14:36] <[Coke]> seeing a bunch of warnings in https://dev.azure.com/Rakudo/rakudo/_build/results?buildId=7321&view=results

[15:01] <patrickb> [Coke]: Sadly I don't. It's only in my and timo's head...

[15:03] <patrickb> I believe many of those warnings relate to the release build pipeline.

[15:03] <jdv> it is slightly odd we only really guarantee any rando release will work on vanilla linux distros

[15:04] <patrickb> Those have the special requirement to run on the oldest possible OS. 

[15:04] <jdv> might need to trade velocity for platform support i guess

[15:04] <patrickb> That's because of glibc being forward, but not backward compatible.

[15:04] <timo> ok so the warning about tools in the ubuntu image not working any more doesn't concern us i don't think

[15:05] <patrickb> Thus I build on one of the distros with the oldest glibc still in use.

[15:07] <patrickb> IIRC it's CentOS 6 in a docker container on an Ubuntu host.

[15:07] <[Coke]> patrickb, timo: as time permits, getting that documented (wiki page in rakudo git repo?) would be great. Would have loved to have an early warning about the el_che issue for this release, e.g.

[15:08] <jdv> id guess nobody else builds on alpine

[15:09] <timo> we could maybe get people who have their own packaging to contribute a little bit to the rakudo release pipeline on azure pipelines? most should be able to get their build stuff into a dockerfile and we could build that in our pipeline

[15:09] <timo> well, linux distros that is

[15:09] <jdv> i only build on debian:|

[15:29] <[Coke]> my azure box is ubuntu

[15:29] <[Coke]> (for blin & release stuff)

[15:30] <jdv> ?ironic? that m$'s cloud stuff is basically linux

[15:32] <[Coke]> oh, it's an option on the VMs - I could be using any of a number of windows boxes also

[15:33] <[Coke]> (looks like they also have some RHEL options, and then some one offs)

[15:34] <jdv> even more odd is a friend of mine workscat amazon scripting azure stuff:)

[17:20] <timo> where all my comet snowman lovers at?

[22:15] *** guifa joined
[22:38] *** guifa left
