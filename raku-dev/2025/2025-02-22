[03:21] <Geth> ¦ nqp: MasterDuke17++ created pull request #841: Use locals instead of class variables

[03:21] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/841

[03:38] <timo> can you try "pop a value from @arg_kinds and @arg_mast until empty" instead of increasing $i from 0 to length of @arg_mast for that last bit?

[04:14] <jdv> releasable6: we'll see about that

[04:14] <releasable6> jdv, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Releasable

[05:50] *** guifa left
[08:24] <nine> m: my class InterpolationTest { has $!a = "a"; method m() { "a" ~~ /$!a/ } }; dd InterpolationTest.new.m

[08:24] <camelia> rakudo-moar f5e82265b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Attribute '$!a' not available inside of a regex, since regexes are␤methods on the Cursor class.  Consider storing the attribute in a␤lexical, and using that in the regex.␤at <tmp>:1␤------>  has $!a =…»

[08:24] <nine> m: 'my class InterpolationTest { has $!a = "a"; method m() { "a" ~~ /$!a/ } }; dd InterpolationTest.new.m'.AST.EVAL

[08:24] <camelia> rakudo-moar f5e82265b: OUTPUT: «Match.new(:orig("a"), :from(0), :pos(1))␤»

[08:25] <nine> Funny...we forbid interpolating attributes in regexes because back then we couldn't figure out a way for it to DWIM and now spec tests fail on RakuAST because it just DWIMs instead of failing...

[08:46] <Geth> ¦ rakudo/main: fc3fca455e | (Stefan Seifert)++ | src/Raku/Actions.nqp

[08:46] <Geth> ¦ rakudo/main: RakuAST: throw appropriate exceptions on unsupported name assertions in regexes

[08:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fc3fca455e

[08:46] <Geth> ¦ rakudo/main: 62b8a649f3 | (Stefan Seifert)++ | src/Raku/ast/regex.rakumod

[08:46] <Geth> ¦ rakudo/main: RakuAST: forbid interpolating attributes in regexes

[08:46] <Geth> ¦ rakudo/main: 

[08:46] <Geth> ¦ rakudo/main: We forbade interpolating attributes in regexes, because regexes are

[08:46] <Geth> ¦ rakudo/main: really methods and have their own self, thus the attribute would refer

[08:46] <Geth> ¦ rakudo/main: to a (likely non-existing one) on the Cursor. Since there seemed to be

[08:46] <Geth> ¦ rakudo/main: no way to make this do what the user probably meant, it was deemed

[08:46] <Geth> ¦ rakudo/main: better to forbid this usage altogether.

[08:46] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[08:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/62b8a649f3

[08:46] <nine> 1186

[09:27] <nine> m: my $counter = 0; my $subrule = '{$counter++; \'<alpha>\'}'; 'abc' ~~ /<$subrule>/;

[09:27] <camelia> rakudo-moar 62b8a649f: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Prohibited regex interpolation (use the MONKEY-SEE-NO-EVAL pragma to␤override this error but only if you're VERY sure your data contains no␤injection attacks).␤at /home/camelia/EVAL_0:1…»

[09:27] <nine> m: use Test; my $counter = 0; my $subrule = '{$counter++; \'<alpha>\'}'; 'abc' ~~ /<$subrule>/;

[09:27] <camelia> rakudo-moar 62b8a649f: ( no output )

[09:27] <nine> WTF?

[10:08] <timo> does "use Test" accidentally export monkey somehow?

[10:21] *** sena_kun joined
[10:33] <lizmat> yes

[10:37] <nine> Actually it seems to be on purpose: sub MONKEY-SEE-NO-EVAL() is export { 1 }

[10:38] <lizmat> yup

[10:38] <lizmat> a lot of spectests break without, is my recollection

[11:13] <Geth> ¦ rakudo/main: 1665ac0f83 | (Stefan Seifert)++ | src/Raku/ast/regex.rakumod

[11:13] <Geth> ¦ rakudo/main: RakuAST: support indirect lookups in regex interpolations

[11:13] <Geth> ¦ rakudo/main: 

[11:13] <Geth> ¦ rakudo/main: Fixes: /<::($name)>/

[11:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1665ac0f83

[11:13] <Geth> ¦ rakudo/main: cd0fd56db9 | (Stefan Seifert)++ | 2 files

[11:13] <Geth> ¦ rakudo/main: RakuAST: Allow for interpolating code via strings in regexes

[11:13] <Geth> ¦ rakudo/main: 

[11:13] <Geth> ¦ rakudo/main: Fixes: my $c = 0; my $r = '{$c++; \'<alpha>\'}'; say 'abc' ~~ /<$r>/;

[11:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cd0fd56db9

[11:13] <Geth> ¦ rakudo/main: 83694c0548 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[11:13] <Geth> ¦ rakudo/main: RakuAST: support imported MONKEY-SEE-NO-EVAL sub

[11:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/83694c0548

[11:13] <nine> 1187

[12:04] *** Guest93 joined
[12:05] <Guest93> lizmat: re https://stackoverflow.com/questions/79411348/really-slow-compilation-of-a-big-grammar, it's very fast by setting RAKUDO_RAKUAST=1

[12:05] <lizmat> and does it do the right thing ?

[12:06] <lizmat> I mean, backing up to /dev/null is also very fast  :-)

[12:06] <Guest93> i see it outputs qast code

[12:07] <Guest93> at leas Stage parse is fast

[12:07] <Guest93> least

[12:09] <Guest93> without RAKUDO_RAKUAST, looks like moarvm gc eats most cpu, so it's slow

[12:10] <lizmat> well, the new Raku grammar does not do the right thing in a lot of cases yet: this may be one of them

[12:10] <lizmat> so unless it completes compilation *and* it produces the expected results, I'm not going to declare victory just yet

[12:13] <nine> Well according to spec tests, our grammar stuff is actually in pretty good shape

[12:13] *** Guest93 is now known as JimmyZ

[12:14] *** JimmyZ left
[12:15] *** Guest93 joined
[12:16] *** Guest93 is now known as JimmyZ

[12:18] <JimmyZ> lizmat: https://github.com/rakudo/rakudo/issues/5789 ,  recently I found nqp::getrusage(@rusage) eats about 15%CPU on my computer.

[12:18] <lizmat> yeah, if the supervisor runs, it takes a bit of a single core

[12:18] <lizmat> and apparently the repl starts the supervisor thread

[12:20] <lizmat> (or probably rather the underlying editor logic does)

[12:43] *** JimmyZ left
[14:38] <Geth> ¦ rakudo/main: 1f8f25f04b | (Stefan Seifert)++ | 2 files

[14:38] <Geth> ¦ rakudo/main: RakuAST: fix overzealous synthetic code point in charranges prohibition

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: Looks like code points generated from octal or hex sequences should be

[14:38] <Geth> ¦ rakudo/main: exempt from the check.

[14:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1f8f25f04b

[14:38] <Geth> ¦ rakudo/main: b64475789f | (Stefan Seifert)++ | src/Raku/ast/regex.rakumod

[14:38] <Geth> ¦ rakudo/main: RakuAST: fix LTM on lexical regex assertions

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: The CALL_SUBRULE indirection made it impossible to find the NFA which

[14:38] <Geth> ¦ rakudo/main: made LTM impossible.

[14:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b64475789f

[14:38] <Geth> ¦ rakudo/main: 4e811d550b | (Stefan Seifert)++ | src/Raku/ast/regex.rakumod

[14:38] <Geth> ¦ rakudo/main: RakuAST: fix LTM with interpolated constants in regexes

[14:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4e811d550b

[14:38] <nine> 1188

[14:49] *** guifa joined
[15:23] <Geth> ¦ rakudo/main: 1a6fe31ccb | (Stefan Seifert)++ | src/Raku/ast/regex.rakumod

[15:23] <Geth> ¦ rakudo/main: RakuAST: flip conditions of <?after ...> regex assertions

[15:23] <Geth> ¦ rakudo/main: 

[15:23] <Geth> ¦ rakudo/main: Method after expects the QAST of the condition to have been flipped

[15:23] <Geth> ¦ rakudo/main: during compilation.

[15:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1a6fe31ccb

[15:23] <nine> 1189

[15:36] <nine> Huh, tr is totally unimplemented

[15:38] <jdv> gonna start the release in a bit.  generating changelogs now.

[15:41] <Geth> ¦ nqp/main: f86b874c9a | (Justin DeVuyst)++ | tools/templates/MOAR_REVISION

[15:41] <Geth> ¦ nqp/main: Bump MoarVM for release testing

[15:41] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/f86b874c9a

[15:42] <Geth> ¦ rakudo/main: 67d722ca75 | (Justin DeVuyst)++ | tools/templates/NQP_REVISION

[15:42] <Geth> ¦ rakudo/main: Bump NQP for release testing

[15:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/67d722ca75

[17:58] <lizmat> jdv: am online to do any changelog vetting, if that still makes sense

[17:59] <jdv> how did ccccfb7 break spectests but make it into the last release?

[18:00] <jdv> lizmat: thanks.  almost done with rakudo changelog.  moarvm one's been done for a bit.

[18:00] <nine> jdv: it broke them when running with RakuAST

[18:02] <jdv> ah

[18:06] <jdv> lizmat: rakudo one is up now

[18:09] *** finanalyst joined
[18:13] <lizmat> jdv: done

[18:24] <jdv> ah, cool.  thanks!

[18:25] <jdv> was just grabbing a bite to eat.  i'll start the releases now then.

[18:25] <lizmat> ++jdv

[18:49] <Geth> ¦ rakudo/release-2025.02: cbe20d8f2b | (Justin DeVuyst)++ | 3 files

[18:49] <Geth> ¦ rakudo/release-2025.02: Update changelog + announcement

[18:49] <Geth> ¦ rakudo/release-2025.02: 

[18:49] <Geth> ¦ rakudo/release-2025.02: Deliberately not logged:

[18:49] <Geth> ¦ rakudo/release-2025.02: 

[18:49] <Geth> ¦ rakudo/release-2025.02: [01339daf][e123587f][b891c808][bbd27707][e4e56554][e413a6e2]

[18:49] <Geth> ¦ rakudo/release-2025.02: [3b064798][0cad3547][4350d5ca][c250768b][2be9b080][af3b5a65]

[18:49] <Geth> ¦ rakudo/release-2025.02: [736208db][3cfb4f17][22367bb9][6d8e7474][62c83711][d82d91e8]

[18:49] <Geth> ¦ rakudo/release-2025.02: [ac06359c][a8fe6d8a][81d59d64][61fa0c85][67d722ca]

[18:49] <Geth> ¦ rakudo/release-2025.02: review: https://github.com/rakudo/rakudo/commit/cbe20d8f2b

[19:58] *** guifa left
[21:01] <jdv> looks like errata spectest fallout, handling...

