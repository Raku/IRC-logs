[00:17] *** sena_kun left
[01:59] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5808: RakuAST: warn for duplicate traits

[01:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5808

[03:30] <Geth> ¦ rakudo: zhuomingliang++ created pull request #5809: add X::Parameter::WrongOrder exception to wrong order parameters

[03:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5809

[07:32] *** finanalyst joined
[07:42] <Geth> ¦ rakudo/main: 0cd87d3ee2 | (Daniel Green)++ | src/Raku/ast/traits.rakumod

[07:42] <Geth> ¦ rakudo/main: RakuAST: warn for duplicate traits

[07:42] <Geth> ¦ rakudo/main: 

[07:42] <Geth> ¦ rakudo/main: Now `sub foo is raw is raw {}` will warn:

[07:42] <Geth> ¦ rakudo/main: 

[07:42] <Geth> ¦ rakudo/main: Potential difficulties:

[07:42] <Geth> ¦ rakudo/main:     Duplicate 'is raw' trait

[07:42] <Geth> ¦ rakudo/main:     at line

[07:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0cd87d3ee2

[07:42] <Geth> ¦ rakudo/main: 91c98a2e25 | niner++ (committed using GitHub Web editor) | src/Raku/ast/traits.rakumod

[07:42] <Geth> ¦ rakudo/main: Merge pull request #5808 from MasterDuke17/warn_for_duplicate_traits

[07:42] <Geth> ¦ rakudo/main: 

[07:42] <Geth> ¦ rakudo/main: RakuAST: warn for duplicate traits

[07:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/91c98a2e25

[09:01] *** sena_kun joined
[09:09] <Geth> ¦ rakudo/main: f0913170f6 | (Jimmy Zhuo)++ | src/Raku/ast/signature.rakumod

[09:09] <Geth> ¦ rakudo/main: add X::Parameter::WrongOrder exception to wrong order parameters

[09:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f0913170f6

[09:09] <Geth> ¦ rakudo/main: dc47d51c46 | niner++ (committed using GitHub Web editor) | src/Raku/ast/signature.rakumod

[09:09] <Geth> ¦ rakudo/main: Merge pull request #5809 from zhuomingliang/WrongOrder

[09:09] <Geth> ¦ rakudo/main: 

[09:09] <Geth> ¦ rakudo/main: add X::Parameter::WrongOrder exception to wrong order parameters

[09:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dc47d51c46

[10:14] <nine> I am working on this bizarre problem:

[10:14] <nine> > RAKUDO_RAKUAST=1 ./rakudo-m --ll-exception -e 'multi foo($s) { say "str" }; multi foo("1") { say 1 }; foo("5")'

[10:14] <nine> str

[10:14] <nine> So, fine, but:

[10:15] <nine> > RAKUDO_RAKUAST=1 ./rakudo-m --ll-exception -e 'multi foo($s) { say "str" }; multi foo("1") { say 1 }; BEGIN foo("5")'

[10:15] <nine> Constraint type check failed in binding to parameter '<anon>'; expected "1" but got "5"

[10:16] <nine> Can't find why multi dispatch makes the wrong decision at BEGIN time but is fine at runtime. I have looked at the QAST generated for foo and it's identical in both cases. That means there must be a difference in meta data. But I can't find any either.

[10:16] <nine> Parameter flags are just 128 for that literal parameter. signature gists look identical.

[10:17] <nine> And of course the proto has both candidates

[10:22] * lizmat needs to update rakudo first  :-)

[10:23] *** sena_kun left
[10:25] <lizmat> nine: fwiw, I get this error:

[10:25] <lizmat> No such method 'compile-time-value' for invocant of type

[10:25] <lizmat> 'RakuAST::VarDeclaration::Implicit::Block'

[10:28] <lizmat> another thing: I just found this discrepancy, not sure what to make of it:

[10:28] <lizmat> m: say Q|now|.AST.statements.head.expression

[10:28] <camelia> rakudo-moar dc47d51c4: OUTPUT: «RakuAST::Term::Named.new("now")␤»

[10:28] <lizmat> m: say Q|False|.AST.statements.head.expression

[10:28] <camelia> rakudo-moar dc47d51c4: OUTPUT: «RakuAST::Term::Name.new(␤  RakuAST::Name.from-identifier("False")␤)␤»

[10:29] <lizmat> why aren't both ::Named or both ::Name ?

[10:36] <Geth> ¦ rakudo/main: 7b093be2b1 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[10:36] <Geth> ¦ rakudo/main: RakuAST: fix No such method 'compile-time-value' on BEGIN with subs in scope

[10:36] <Geth> ¦ rakudo/main: 

[10:36] <Geth> ¦ rakudo/main: Fixes: sub foo() { }; BEGIN say "hi"

[10:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7b093be2b1

[10:36] <nine> lizmat: ^^^

[10:37] <nine> I'd say the comments above class RakuAST::Term::Name and RakuAST::Term::Named explain the difference

[10:40] <lizmat> ok, that explains their origin.  Not sure they should be treated different at tree level

[10:40] <lizmat> but that's for later  :-)

[10:41] <lizmat> I was just struck by the different handling just now

[10:41] <nine> Btw can you check whether that latest commit regresses spec tests? It does so for me with t/spec/S04-declarations/will.rakudo.moar t/spec/S06-multi/compile-time.t or t/spec/S16-io/home.t but when I run them individually they're just fine

[10:42] <lizmat> fwiw I now get the same error that you say for the BEGIN dispatch issue

[10:42] <lizmat> checking spectest now

[10:45] *** JimmyZhuo joined
[10:45] <JimmyZhuo> m: sub foo(Int $x = "omg") { }

[10:45] <camelia> rakudo-moar dc47d51c4: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Default value 'omg' will never bind to a parameter of type Int␤at <tmp>:1␤------> sub foo(Int $x = "omg"<HERE>) { }␤    expecting any of:␤        constraint␤»

[10:49] <lizmat> nine: yeah, got quite a few regressions

[10:50] <lizmat> t/spec/S04-declarations/will.rakudo.moar apears to be a flapper, as it runs fine on its own

[10:50] <lizmat> I do get:

[10:50] <lizmat> WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was:

[10:50] <lizmat> Stub code executed

[10:51] <lizmat> in any IMPL-BEGIN-TIME-CALL at src/Raku/ast/begintime.rakumod line 56

[10:51] <lizmat> t/spec/S06-advanced/stub.rakudo.moar also flaps

[10:51] <lizmat> as does t/spec/S06-multi/compile-time.t

[10:52] <lizmat> as does t/spec/S06-signature/introspection.rakudo.moar

[10:52] <lizmat> t/spec/S16-io/home.t  fails with: No such method 'CALL-ME' for invocant of type 'Mu'

[11:02] *** finanalyst left
[11:06] <Geth> ¦ rakudo/main: c77434ad24 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[11:06] <Geth> ¦ rakudo/main: RakuAST: better fix for No such method compile-time-value

[11:06] <Geth> ¦ rakudo/main: 

[11:06] <Geth> ¦ rakudo/main: Honestly no idea why the previous version caused the strange

[11:06] <Geth> ¦ rakudo/main: regressions.

[11:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c77434ad24

[11:06] <nine> Ok, this distraction is hopefully out of the way

[11:06] <nine> No back to the bizarre dispatch problem

[12:23] <lizmat> notable6: weeklly

[12:23] <notable6> lizmat, No notes for “weeklly”

[12:23] <lizmat> notable6: weekly

[12:23] <notable6> lizmat, 2 notes: 2025-03-03T21:15:41Z <antononcube>: https://rakuforprediction.wordpress.com/2025/03/03/rock-paper-scissors-extensions/  ;  2025-03-06T15:34:00Z <antononcube>: https://rakuforprediction.wordpress.com/2025/03/06/military-forces-interactions-graphs/

[12:23] <lizmat> notable6: weekly reset

[12:23] <notable6> lizmat, Moved existing notes to “weekly_2025-03-10T12:23:44Z”

[13:07] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/03/10/2025-10-final-cfp-week/

[13:34] <nine> Oh, the first real lead!

[13:35] <nine> nine@sphinx:~/rakudo.main (main <>)> RAKUDO_RAKUAST=1 ./rakudo-m --ll-exception -e 'proto foo(|c) {*}; multi foo($s) { "str" }; multi foo("1") { 1 }; BEGIN foo("1"); BEGIN foo("5")'

[13:35] <nine> nine@sphinx:~/rakudo.main (main <>)> RAKUDO_RAKUAST=1 ./rakudo-m --ll-exception -e 'proto foo(|c) {*}; multi foo($s) { "str" }; multi foo("1") { 1 }; BEGIN foo("5")'

[13:35] <nine> Constraint type check failed in binding to parameter '<anon>'; expected "1" but got "5"

[13:40] <nine> And a fix!

[13:45] <Geth> ¦ rakudo/main: 70fd1bfaf9 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[13:45] <Geth> ¦ rakudo/main: RakuAST: fix bind failures in BEGIN time multi-dispatch

[13:45] <Geth> ¦ rakudo/main: 

[13:45] <Geth> ¦ rakudo/main: The multi-dispatcher wants to force compilation of a not-yet fully

[13:45] <Geth> ¦ rakudo/main: compiled routine before trying the bind-check. This is so that the

[13:45] <Geth> ¦ rakudo/main: compiler's call frames don't interfere with the dispatch resumtion.

[13:45] <Geth> ¦ rakudo/main: The RakuAST frontend however neglected to give it a way to do so.

[13:45] <Geth> ¦ rakudo/main: 

[13:45] <Geth> ¦ rakudo/main: Fixes: multi foo(1) { }; multi foo(Int $a) { }; BEGIN foo(2);

[13:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/70fd1bfaf9

[13:45] <nine> Even fixes a spectest so we're now at 1275

[13:51] <nine> Ironically compilation now fails in RakuAST related setting code

[13:54] <nine> 'class Foo { has $.generator; submethod BUILD() { $!generator = BEGIN -> { say self } } }; Foo.new.generator.()'.AST.EVAL

[13:54] <nine> m: 'class Foo { has $.generator; submethod BUILD() { $!generator = BEGIN -> { say self } } }; Foo.new.generator.()'.AST.EVAL

[13:54] <camelia> rakudo-moar 70fd1bfaf: OUTPUT: «===SORRY!===␤Symbol 'self' does not have a compile-time value␤»

[13:59] *** JimmyZhuo left
[15:19] *** liztormato joined
[15:25] *** liztormato left
[16:10] *** liztormato joined
[16:11] <nine> m: class Foo { ... }

[16:11] <camelia> rakudo-moar 70fd1bfaf: OUTPUT: «The following packages were stubbed but not defined:␤    Foo␤»

[16:11] <nine> m: role Foo { ... }

[16:11] <camelia> rakudo-moar 70fd1bfaf: ( no output )

[16:11] *** liztormato left
[16:11] <nine> Huh?

[16:12] <nine> Looks like we don't care at all about stubbed but undefined roles

[16:19] <Geth> ¦ rakudo/main: 6224971e72 | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[16:19] <Geth> ¦ rakudo/main: RakuAST: don't complain about stubbed but undefined roles

[16:19] <Geth> ¦ rakudo/main: 

[16:19] <Geth> ¦ rakudo/main: No idea why. The old frontend didn't either and this gets around a

[16:19] <Geth> ¦ rakudo/main: problem with multi-part names.

[16:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6224971e72

[16:50] *** liztormato joined
[16:51] *** liztormato left
[16:55] <Geth> ¦ rakudo/main: 45c4f74f87 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[16:55] <Geth> ¦ rakudo/main: RakuAST: skip type check on native constants

[16:55] <Geth> ¦ rakudo/main: 

[16:55] <Geth> ¦ rakudo/main: Would only fail.

[16:55] <Geth> ¦ rakudo/main: 

[16:55] <Geth> ¦ rakudo/main: Fixes: my int constant $i = 1;

[16:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/45c4f74f87

[17:04] <lizmat> m: role A { ... }

[17:04] <camelia> rakudo-moar 6224971e7: ( no output )

[17:04] <lizmat> m: role A { ... }; class B does A { }

[17:04] <camelia> rakudo-moar 6224971e7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No appropriate parametric role variant available for 'A':␤    Cannot resolve caller (B); Routine does not have any candidates.  Is only the proto defined?␤at <tmp>:1␤»

[17:04] <lizmat> hmmm... that's LTA ?

[17:05] <lizmat> I mean, I get it that we don't complain about stubbed roles 

[17:05] <lizmat> in a way, it's similar to:

[17:05] <lizmat> m: sub a() { ... }

[17:05] <camelia> rakudo-moar 6224971e7: ( no output )

[17:05] <lizmat> m: sub a() { ... }; a

[17:05] <camelia> rakudo-moar 6224971e7: OUTPUT: «Stub code executed␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:06] <lizmat> and since the body of a role is essentially a sub with the parameterization as arguments...

[17:07] <nine> Why complain about classes then?

[17:07] <lizmat> actually, I think  we should worry about stubbed roles

[17:08] <Geth> ¦ rakudo/main: fa865469d2 | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[17:08] <Geth> ¦ rakudo/main: RakuAST: fix copy pasta in check for multiple CATCH/CONTROL blocks

[17:08] <Geth> ¦ rakudo/main: 

[17:08] <Geth> ¦ rakudo/main: Fixes: CATCH { }; CONTROL { }

[17:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fa865469d2

[17:18] <nine> m: sub foo(*%_) { -> { %_ } }

[17:18] <camelia> rakudo-moar 45c4f74f8: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Placeholder variable '%_' cannot override existing signature␤at <tmp>:1␤------> sub foo(*%_) { <HERE>-> { %_ } }␤»

[17:18] <nine> but:

[17:18] <nine> m: my method foo() { -> { %_ } }

[17:18] <camelia> rakudo-moar 45c4f74f8: ( no output )

[17:19] <nine> even:

[17:19] <nine> m: my method foo(*%_) { -> { %_ } }

[17:19] <camelia> rakudo-moar 45c4f74f8: ( no output )

[17:19] <lizmat> there are many variations on this theme, afaik

[17:22] <nine> The joy of a language where stuff just magically appears. But I guess you just have to learn from the winners, like PHP.

[17:23] <jdv> oh my, php:)

[17:24] <jdv> my last full time gig was mostly php for 5y.

[17:26] <lizmat> fwiw, I think the automatic adding of *%_ methods, has been a msitake

[17:26] <lizmat> *error  :-)

[17:29] <nine> As is checking for declarations of @_ and %_ only in the immediate surrounding block

[17:53] *** finanalyst joined
[17:54] <Geth> ¦ rakudo/main: 9f1fff2f45 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[17:54] <Geth> ¦ rakudo/main: RakuAST: always give placeholder parameters their begin time

[17:54] <Geth> ¦ rakudo/main: 

[17:54] <Geth> ¦ rakudo/main: Fixes compiler error in: my method foo() { -> { %_ }() }

[17:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9f1fff2f45

[18:08] *** finanalyst left
[18:34] *** sena_kun joined
[18:50] <Geth> ¦ rakudo/main: 7f6af8e4bd | (Stefan Seifert)++ | 2 files

[18:50] <Geth> ¦ rakudo/main: RakuAST: fix bogus complaint about placeholder parameters

[18:50] <Geth> ¦ rakudo/main: 

[18:50] <Geth> ¦ rakudo/main: There's a %_ if we're inside a method, regardless of how many blocks

[18:50] <Geth> ¦ rakudo/main: deep.

[18:50] <Geth> ¦ rakudo/main: 

[18:50] <Geth> ¦ rakudo/main: Fixes: my method foo() { -> { %_ } }

[18:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7f6af8e4bd

[18:57] <Geth> ¦ rakudo/main: c1eead8776 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[18:57] <Geth> ¦ rakudo/main: RakuAST: thunk parameters default value at BEGIN time

[18:57] <Geth> ¦ rakudo/main: 

[18:57] <Geth> ¦ rakudo/main: We should keep CHECK time for actual checks and not rely on CHECK time

[18:57] <Geth> ¦ rakudo/main: for anything that influences the compilation result.

[18:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c1eead8776

[19:04] <nine> Aw man... RakuAST::Var::Attribute::Public should really have become a RakuAST::Expression instead of pretending to be one

[19:05] <lizmat> why not change ?

[19:05] <nine> Exhaustion

[19:06] <nine> Actually I think it shouldn't even exist

[19:09] <lizmat> RakuAST::Var::Attribute::Public  ?

[19:10] <nine> yes

[19:11] <lizmat> well, I guess it exists because $.foo attribute accesses get an .item called in it, where as $!foo accesses do not ?

[19:11] <lizmat> (and .list for @ and .hash for % sigilled attributes)

[19:12] <lizmat> couldn't we get rid of that class and handle it in the actions ?

[19:14] *** finanalyst joined
[19:18] <nine> That's exactly what we did before you replaced that with the class :)

[19:21] <lizmat> ok, we learn from our mistakes?

[19:23] <lizmat> ah, I see 527b9788d9

[19:23] <linkable6> (2024-07-16) https://github.com/rakudo/rakudo/commit/527b9788d9 RakuAST: introduce ::Var::Attribute::Public

[19:24] <lizmat> deparsing and manual creation as reasons

[19:24] <lizmat> manual creation reason could be done in RakuAST::Utils 

[19:24] <lizmat> deparsing I'm not too sure about we want to break

[19:25] <nine> Break in what way?

[19:26] <nine> Stage parse      :  35.347

[19:26] <nine> Stage syntaxcheck:   0.000

[19:26] <nine> Stage ast        :   0.000

[19:26] <lizmat> m: say Q|class A { my method a() { $.foo } }|.AST.DEPARSE

[19:26] <camelia> rakudo-moar c1eead877: OUTPUT: «class A {␤    my method a () {␤        $.foo␤    }␤}␤␤»

[19:27] <nine> We make it through parsing and checking!

[19:27] <lizmat> whee!

[19:27] <lizmat> and how much slower is the stage parse for you ?

[19:28] <lizmat> also: perhaps switch of stage optimize for now?

[19:28] <lizmat> the deparse would become:   self.foo.item

[19:29] <nine> It's about 20 % slower than the old frontend. Which sounds like a great start to me considering that performance of compilation wasn't really a priority

[19:29] <lizmat> re: RakuAST::Var::Attribute::Public:  would s/is RakuAST::Node/isis RakuAST::Expression/  ??

[19:30] <lizmat> be a solution for your problem?

[19:30] <lizmat> 20%!  pretty good

[19:31] <nine> Probably yes. Though I still don't see why it needs to exist at all. After all $.foo *is* exactly self.foo.item

[19:31] <lizmat> most users don't realize that: they just think of $.foo as a subclass safe way of accessing the $!foo attribute / method

[19:32] <lizmat> ah: another reason to keep it: if $.foo is interpolated in a string, deparsing would become really troubles if that class is removed

[19:33] <nine> Nobody says that self.foo.item HAS to deparse as exactly that

[19:33] <nine> In a string using the $.foo form makes more sense. After all I'm pretty sure that's what it was invented for

[20:02] <nine> What does +$ mean in a parameter like in multi sub infix:<orelse>(+$)?

[20:05] <timo> it's a special kind of slurpy, but i thought those were supposed to go with @ and not $

[20:06] <timo> it's like * but implements "single argument rule" semantics, right?

[20:18] <nine> That's +@

[20:39] <timo> i thought +$ is just "+@ but wrongly generalized"

[20:54] <nine> Yeah looks like it's equivalent to +@

[21:25] <nine> 76 % through stage QAST now. Qualified private method calls NYI

[21:50] <[Coke]> nine++

[22:32] *** finanalyst left
[23:45] *** MasterDuke joined
[23:47] <MasterDuke> i'm not sure where to address t/spec/S06-signature/positional-placeholders.t. this is an example failing test `{my $foo; $^foo;}(1)`, it's supposed to throw X::Redeclaration, but currently it's just an X::AdHoc from NQP with `RAKUDO_RAKUAST=1`

[23:49] <lizmat> that's because that condition wasn't spotted before it was handed over to NQP: I guess the former is a compile time error, and the latter is runtime ?

[23:49] <MasterDuke> but i can't figure out if i should be adding a check in src/Raku/Actions.nqp, or src/Raku/ast/resolver.rakumod, or src/Raku/ast/variable-declaration.rakumod

[23:49] <lizmat> feels to me in variable-declaration

[23:50] <lizmat> but then it's late for me and I really should hit the sack  :-)

[23:50] <lizmat> &

[23:50] <MasterDuke> later...

