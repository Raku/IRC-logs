[08:25] *** finanalyst left
[08:40] *** TheAthlete joined
[09:16] *** guifa left
[09:19] *** guifa joined
[09:45] <lizmat> notable6: weekly

[09:45] <notable6> lizmat, 1 note: 2025-05-26T07:49:49Z <librasteve>: https://rakujourney.wordpress.com/2025/05/26/harc-stack-navigation/

[09:45] <lizmat> notable6: weekly reset

[09:45] <notable6> lizmat, Moved existing notes to “weekly_2025-05-26T09:45:44Z”

[09:57] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/05/26/2025-21-harcigation/

[10:32] *** finanalyst joined
[11:38] <lizmat> nine: looking at https://github.com/rakudo/rakudo/commit/2ec173ab07  it feels that this really should be an operator property

[11:40] <lizmat> also feels that https://github.com/rakudo/rakudo/blob/main/src/Raku/ast/expressions.rakumod#L331-L333 is missing a few cases

[11:40] <lizmat> such as ⚛+= , ⚛-= and ⚛−= ?

[11:55] <lizmat> m: my atomicint $a; $a ⚛+= 42    # shows a worry in RakuAST, but not in legacy

[11:55] <camelia> rakudo-moar 7783e28b8: ( no output )

[11:57] <lizmat> so I was thinking of adding a "sinky" attribute in OperatorProperties

[11:57] <lizmat> but that would mean a default of true: looking for a term to use to allow for a default of false (like the other attributes)

[11:58] <lizmat> half serious: titanicy   (as in unsinkable)

[11:58] <nine> I think the major advantage operator properties have is that they are available for custom operators. That is certainly a big plus for that idea.

[11:59] <nine> Not sure about the name though. Those existing property names are overly cute and not at all descriptive ("fiddly", err...right, huh?). I wouldn't know what "sinky" means either.

[12:00] <lizmat> ok, so a straightforward: unsinkable then ?

[12:00] <nine> That would be wrong. It's entirely possible to sink the result of such an operator.

[12:01] <nine> What really differentiates here is whether an operator may have side effects or not. We shouldn't warn if the point of applying the operator may be the side effect.

[12:01] <lizmat> so the name of the method "can-be-sunk" is not really right then either ?

[12:01] <nine> As the side effect may be the reason for applying the operator in the first place as is usually the case with anything that assigns.

[12:02] <lizmat> "has-side-effects" then ?

[12:03] <nine> Well the opposite of has-side-effects is "pure" which is a term we already use for precisely this meaning

[12:06] <nine> I'd say can-be-sunk is not great but not entirely wrong either given the context. It's about whether the compiler may generate the .sink call.

[12:11] <lizmat> but we can't use the "pure"ness of an operator as a flag for can-be-sunk semantics, right ?

[12:15] <lizmat> or: if we make "pure" an Operator Property, then we could get rid of all of the "is pure" on operators in core  :-)

[12:18] *** finanalyst left
[12:38] *** finanalyst joined
[12:52] *** rakkable left
[12:52] *** rakkable__ joined
[12:55] <Geth> ¦ rakudo/main: bffe23777c | (Elizabeth Mattijsen)++ | src/Raku/ast/expressions.rakumod

[12:55] <Geth> ¦ rakudo/main: RakuAST: rename "can-be-sunk" to the more appropriate "is-pure"

[12:55] <Geth> ¦ rakudo/main: 

[12:55] <Geth> ¦ rakudo/main: Following discussion at

[12:55] <Geth> ¦ rakudo/main:   https://irclogs.raku.org/raku-dev/2025-05-26.html#11:38

[12:55] <Geth> ¦ rakudo/main: 

[12:55] <Geth> ¦ rakudo/main: Also make sure that use of ⚛+= , ⚛-= and ⚛−= do not cause worries.

[12:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bffe23777c

[14:14] <Geth> ¦ roast: 3549a55760 | (Daniel Green)++ | packages/Test-Helpers/lib/Test/Util.rakumod

[14:14] <Geth> ¦ roast: Remove useless `,`

[14:14] <Geth> ¦ roast: 

[14:14] <Geth> ¦ roast: It wasn't a real problem, but was causing

[14:14] <Geth> ¦ roast: ```

[14:14] <Geth> ¦ roast: Potential difficulties:

[14:14] <Geth> ¦ roast:     Useless use of , in sink context

[14:14] <Geth> ¦ roast:     at <...>/rakudo/t/spec/packages/Test-Helpers/lib/Test/Util.rakumod (Test::Util):433

[14:14] <Geth> ¦ roast: ```

[14:14] <Geth> ¦ roast: warnings if some tests files were run directly.

[14:14] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3549a55760

[14:59] *** finanalyst left
[19:31] <japhb> Did 2025.04 have known stability issues?  I'm trying to bisect a seeming incompatibility between Terminal::Widgets (or one of its dependencies) and latest Rakudo, but when I try to build everything for 2025.04, random tests fail all over the place -- some in Rakudo's own test suite, some in the tests of various modules.  No real consistency that I've seen so far.

[19:32] <japhb> (And the failing tests don't repeat from run to run.)

[19:34] *** TheAthlete left
[20:14] <[Coke]> I believe I did that release - didn't notice any stability issues doing testing, no one else has reported issues.

[20:17] <[Coke]> :(

[20:34] <japhb> Maybe I'm just unlucky today

[22:18] <lizmat> japhb: I see instability like that if you didn't nuke install between building different versions

[22:20] <japhb> I have been, though with enough flapping tests across Rakudo and all of the modules I build, it can be a pain to get a good build from scratch if there's even a *little* more instability than usual.

[22:21] <japhb> Still, I'm slowly closing in on where Rakudo and Terminal::Widgets start fighting, though it's a bit of a slog TBH.

