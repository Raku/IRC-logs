[10:46] <Geth> ¦ rakudo/main: 7 commits pushed by (Stefan Seifert)++

[10:46] <Geth> ¦ rakudo/main: b511aac052 | RakuAST: re-structure package installation sequence

[10:46] <Geth> ¦ rakudo/main: 4163edc855 | RakuAST: give a helpful error message on using post declared types

[10:46] <Geth> ¦ rakudo/main: 5110d6728d | RakuAST: throw appropriate exception on "else if"

[10:46] <Geth> ¦ rakudo/main: a5ad6110e1 | RakuAST: report X::Undeclared when pi, tau or e are used as functions

[10:46] <Geth> ¦ rakudo/main: bb57f409e5 | RakuAST: fix internal compiler error when encountering a syntax error in regex

[10:46] <Geth> ¦ rakudo/main: 5bdb8c183a | RakuAST: support canonicalization of empty colonpair

[10:46] <Geth> ¦ rakudo/main: 1c2f72374b | RakuAST: warn about anonymous var in sink context

[10:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/86c5bc108bc1...1c2f72374b8f

[11:35] <Geth> ¦ rakudo/main: 91904bc306 | (Stefan Seifert)++ | 2 files

[11:35] <Geth> ¦ rakudo/main: RakuAST: fix overeager reporting of variable in sink context

[11:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/91904bc306

[11:35] <Geth> ¦ rakudo/main: bf5e15688e | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[11:35] <Geth> ¦ rakudo/main: RakuAST: report trying to call unknown routines in BEGIN blocks

[11:35] <Geth> ¦ rakudo/main: 

[11:35] <Geth> ¦ rakudo/main: If we encounter a call to an unknown routine in BEGIN time code, there's

[11:35] <Geth> ¦ rakudo/main: two cases:

[11:35] <Geth> ¦ rakudo/main: * the call is in some nested code block

[11:35] <Geth> ¦ rakudo/main: * the call is at the top level of the BEGIN block

[11:35] <Geth> ¦ rakudo/main: 

[11:35] <Geth> ¦ rakudo/main: <…commit message has 11 more lines…>

[11:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bf5e15688e

[12:08] <lizmat> nine: should having a valud :outer-cu in a ::CompUnit.new be enough to fix the .assuming issue?

[12:08] <lizmat> *valid

[12:11] <nine> That would be nice. It might be :) Usually there's always yet another corner with problems though until there isn't

[12:12] <lizmat> ok, then I'll focus on that.  Because under RakuAST doing a BEGIN $ast.EVAL  *does* have a valid $*CU to work with as outer

[12:13] <lizmat> so it should just work, really  :-)

[12:13] <lizmat> and it doesn't atm

[12:53] <lizmat> bisectable6: old=2024.01 my @a; @a[my $ = -1]="meow"

[12:53] <bisectable6> lizmat, On both starting points (old=2024.01 new=bf5e156) the exit code is 0 and the output is identical as well

[12:53] <bisectable6> lizmat, Output on both points: «»

[12:53] <lizmat> bisectable6: old=2020.01 my @a; @a[my $ = -1]="meow"

[12:53] <bisectable6> lizmat, On both starting points (old=2020.01 new=bf5e156) the exit code is 0 and the output is identical as well

[12:53] <bisectable6> lizmat, Output on both points: «»

[12:53] <lizmat> wow

[12:54] <lizmat> bisectable6: old=2020.01 my @a; @a[my $ = -1]="meow"; dd @a

[12:54] <bisectable6> lizmat, Bisecting by output (old=2020.01 new=bf5e156) because on both starting points the exit code is 0

[12:58] <bisectable6> lizmat, bisect log: https://gist.github.com/0c0fc2b47a8065aa63125a5f92e8ca76

[12:58] <bisectable6> lizmat, There are 10 candidates for the first “new” revision. See the log for more details

[12:59] <lizmat> ok, so basically this has been like forever

[13:00] <lizmat> m: my @a; @a.AT-POS(-1)="meow"

[13:00] <camelia> rakudo-moar bf5e15688: OUTPUT: «Index out of range. Is: -1, should be in 0..^Inf␤  in block <unit> at <tmp> line 1␤␤»

[13:00] <lizmat> m: my @a; @a.ASSIGN-POS(-1,"meow")

[13:00] <camelia> rakudo-moar bf5e15688: OUTPUT: «Index out of range. Is: -1, should be in 0..^Inf␤  in block <unit> at <tmp> line 1␤␤»

[13:00] <lizmat> weird

[13:24] <lizmat> m: my @a; @a[my $ = -1] = "meow"

[13:24] <camelia> rakudo-moar bf5e15688: ( no output )

[13:24] <lizmat> m: my @a; (@a[my $ = -1] = "meow").sink

[13:24] <camelia> rakudo-moar bf5e15688: OUTPUT: «Index out of range. Is: -1, should be in 0..^Inf␤  in block <unit> at <tmp> line 1␤␤»

[13:24] <lizmat> looks like the return value of postcircumfixes is not getting sunk ?

[13:26] <nine> Assignment targets in general don't get sunk

[13:27] <lizmat> ok, but we agree that:  my @a; @a[my $ = -1] = "meow"   silently not doing anything, is bad, right ?

[13:27] <nine> Sure. I wonder why it even needs to be sunk to actually try that assignment?

[13:28] <lizmat> well, it returns a Failure, and if that gets sunk, it throws

[13:28] <lizmat> since we don't sink it, it just goes on silently, which I feel is pretty wrong ?

[13:29] <lizmat> so I think we need to fix postcircumfix to throw if the ASSIGN-POS returns a Failure

[13:33] <nine> I get that Failure is a clever way to let the user decide whether they want to deal with exceptions or wrap calls in if statements. But who would write if @a[my $ = -1] = "meow" { ... } to catch a problem with the assignment itself?

[13:34] <nine> When I see that code, I'd expect it to check the assigned value

[13:35] <lizmat> the my $ = -1 is only there to make it not trigger the compile time check

[13:35] <lizmat> m: my @a; @a[-1] = "meow"

[13:35] <camelia> rakudo-moar bf5e15688: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unsupported use of a negative -1 subscript to index from the end.  In␤Raku please use: a function such as *-1.␤at <tmp>:1␤------> my @a; @a[-1]<HERE> = "meow"␤»

[13:35] <nine> I know

[13:35] <nine> if @a[$foo] = $bar { ... }

[13:36] <nine> Still I'd expect this to check $bar, not whether @a[$foo] is a valid position

[13:36] <nine> Just like with if $foo = $bar

[13:36] <lizmat> yeah, but if you just do:

[13:37] <lizmat> @a[$foo] = $bar

[13:37] <lizmat> with $foo being OOR, nothing happens

[13:37] <lizmat> it quietly contines, not doing the assignment and not throwing an error

[13:37] <nine> Yeah, because we return a Failure in a case where absolutely no one would check for one

[13:38] <lizmat> so my proposal is to *not* return a Failure in that case, but to throw it

[13:38] <nine> Looks to me like a case of "whoo, there's Failures in this language, let's put them everywhere without thinking about whether it's even appropriate"

[13:39] <lizmat> ok, so you mean it should always throw in the AT-POS / ASSIGN-POS ?

[13:40] <nine> yes

[13:42] <nine> With `if @a[$foo] = $bar { ... }` you don't even know whether $foo contains an invalid index or $bar is just falsey if it doesn't execute

[13:54] <lizmat> afk for a few hours&

[14:24] <nine> Sigh.... seems like t/spec/S32-exceptions/misc.t alone is as much work as the rest combined

[14:32] <[Coke]> Only two failures in blin run: https://github.com/rakudo/rakudo/issues/5836

[14:33] <[Coke]> both bisected to https://github.com/rakudo/rakudo/commit/83d35bb5d75e81292234b35b09c79222caf86f39

[14:33] <[Coke]> (which is weird because that says RakuAST)

[14:37] <[Coke]> Doesn't look like Test::Async had any problems... but also doesn't look like it gained us many modules

[15:01] *** liztormato joined
[15:02] <liztormato> [Coke]: looks to me CSS::Stylesheet is a flapper

[15:03] <nine> liztormato is sending invisible messages

[15:13] *** liztormato left
[15:20] <[Coke]> when I see the invisible ones, I know to highlight it. :)

[15:20] <[Coke]> I think they also look fine in the logs. it's weird.

[15:25] *** liztormato joined
[15:25] <liztormato> Weird.

[15:26] <liztormato> I can see my messages ok. Also on the irclogs site

[15:52] *** liztormato left
[16:21] <[Coke]> lizmat: the flap protectin is running it up to 4 times.

[16:25] <Geth> ¦ rakudo/main: 6 commits pushed by (Stefan Seifert)++

[16:25] <Geth> ¦ rakudo/main: f684570800 | RakuAST: report proper location of errors from BEGIN blocks

[16:25] <Geth> ¦ rakudo/main: 635aa89b58 | RakuAST: report location of exceptions thrown when initializing constants

[16:25] <Geth> ¦ rakudo/main: fd7efd2e1f | RakuAST: report when variable type is not a type at all

[16:25] <Geth> ¦ rakudo/main: d9002913a0 | RakuAST: fix imported symbols shadowing existing ones in outer scopes

[16:25] <Geth> ¦ rakudo/main: e85f262800 | RakuAST: report when parameter type is not a type at all

[16:25] <Geth> ¦ rakudo/main: 18b6cef6aa | RakuAST: report undeclared symbols in args of `no` statement

[16:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/bf5e15688eba...18b6cef6aa57

[17:21] <timo> does the irclog site strip out irc colors? 4test for red text

[17:23] <timo> that shows up as "4test for red text" so i might not have done it exactly correctly? but it shows up correctly in my own irc client

[17:25] <timo> before 0cyan text (code 10) between 9light green (code 09) between bold text end

[17:25] <timo> yeah looks like only the first letter of the color code is stripped for presentation in the irclog viewer

[17:27] <lizmat> hmmm... interesting...

[17:28] *** liztormato joined
[17:29] * timo learns about cursor mode in weechat

[17:30] <timo> whoops, that was a command for my ssh, not my irc

[17:30] <liztormato> Can you see me now?

[17:31] <timo> yes

[17:31] <lizmat> ok, changed a setting in Colloquy

[17:31] <lizmat> should be able to not speak in cloudy tongues the next time  :-)

[17:32] <timo> is it related to away mode or something?

[17:33] <timo> the weird messages are outside of my irc raw buffer so i can't see what they actually were

[17:34] <lizmat> [Coke]: could it be that CSS::Stylesheet has a repeatable segfault at that commit ?

[17:35] *** liztormato left
[17:56] <lizmat> m: my Int @a; @a[my $ = -1] = 42

[17:56] <camelia> rakudo-moar 18b6cef6a: ( no output )

[17:56] <lizmat> m: my int @a; @a[my $ = -1] = 42

[17:56] <camelia> rakudo-moar 18b6cef6a: OUTPUT: «Index out of range. Is: -1, should be in 0..^Inf␤  in block <unit> at <tmp> line 1␤␤»

[18:00] <timo> m: my Int @a; @a[my $ = -1] = 42; dd @a

[18:00] <camelia> rakudo-moar 18b6cef6a: OUTPUT: «Int  = Array[Int].new()␤»

[18:00] <timo> m: my Int @a; dd @a[my $ = -1];

[18:00] <camelia> rakudo-moar 18b6cef6a: OUTPUT: «Failure.new(exception => X::OutOfRange.new(what => "Index", got => -1, range => "0..^Inf", comment => Any))␤»

[18:00] <timo> assigning to a Failure doesn't throw it, huh

[18:00] <timo> m: my int @a; dd @a[my $ = -1];

[18:01] <camelia> rakudo-moar 18b6cef6a: OUTPUT: «Index out of range. Is: -1, should be in 0..^Inf␤  in block <unit> at <tmp> line 1␤␤»

[18:01] <timo> and on a native array we don't return a failure, we throw immediately

[18:03] <lizmat> running a spectest to make it throw immediately for non-natives as well

[18:10] <lizmat> making it throw immediately, breaks quite a few spectests  :-(

[18:10] <timo> at least attempting to assign to a Failure should throw it

[18:12] <lizmat> How would you assign to a Failure?  You mean if it's in a container ?

[18:14] <timo> m: my Int @a; @a[my $ = -1] = 42

[18:14] <camelia> rakudo-moar 18b6cef6a: ( no output )

[18:14] <timo> this is assigning to the Failure object

[18:15] <timo> m: Failure.new(exception => X::AdHoc.new(message => "oh no")) = 5

[18:15] <camelia> rakudo-moar 18b6cef6a: OUTPUT: «Failed␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:15] <timo> ah, so this is not about the failure that's returned from postcircumfix:<[ ]> being assigned into

[18:15] <timo> instead, it's ASSIGN-POS not doing anything

[18:16] <timo> which spec tests rely on that not throwing?

[18:23] <lizmat> t/spec/S09-multidim/XX-POS-on-undimensioned.t 

[18:23] <lizmat> t/spec/S32-basics/xxPOS.rakudo.moar

[18:25] <timo> so you made AT-POS throw immediately?

[18:25] <lizmat> yeah

[18:25] <timo> why? that already successfully returned a Failure

[18:26] <timo> i thought the issue was that ASSIGN-POS wasn't explodey in any way for negative indices

[18:27] <lizmat> the problem is that the return value of:   @a[foo] = 42    is not being sunk

[18:27] <lizmat> ASSIGN-POS returns a Failure fine

[18:27] <timo> ah

[18:27] <lizmat> but because the postcircumfix isn't sunk because of the assignment, it just silently does nothing

[18:28] <lizmat> m: my @a; @a[my $ = -1] = "foo"

[18:28] <camelia> rakudo-moar 18b6cef6a: ( no output )

[18:28] <timo> makes sense for the return value of postfix assign not to be sunk as a general thing, it's just bitey here

[18:28] <lizmat> yup

[18:28] <timo> then does making ASSIGN-POS throw, but not AT-POS, also break lots of spec tests?

[18:29] <lizmat> it would

[18:29] <lizmat> but I was working on multi sub postcircumfix:<[ ]>(\SELF, Int:D \pos, Mu \assignee) is raw {

[18:29] <lizmat> and have *that* check for Failure and throw if it is

[18:29] <timo> ah

[18:30] <timo> does ASSIGN-POS return the thing you assign?

[18:30] <timo> we will not want to make Failures that you want to stash into an array be thrown for this reason

[18:30] <lizmat> m: my @a = ^10; say @a.ASSIGN-POS(3,42) = 666; dd @a

[18:30] <camelia> rakudo-moar 18b6cef6a: OUTPUT: «666␤[0, 1, 2, 666, 4, 5, 6, 7, 8, 9]␤»

[18:31] <lizmat> so yes

[18:37] <lizmat> [Coke]: fwiw, I cannot repro the CSS::Stylesheet issue

[18:37] <[Coke]> OK. I'll see if running it by hand on the blin box is instructive.

[18:38] * lizmat also realizes she's too tired to be programming after cycling almost 2 hours, so goes afk&

[18:38] <timo> hm?

[18:38] <timo> ah

[18:47] <[Coke]> lizmat: installs fine from the main shell

[18:49] <[Coke]> sorry for the noise!

[18:52] <[Coke]> oh wait, main shell isn't at head. recalibrating. :)

[19:07] *** codesections joined
[19:34] *** codesections1 joined
[19:36] *** codesections left
[19:39] *** codesections1 left
[19:44] *** codesections joined
[19:58] *** codesections1 joined
[19:59] *** codesections left
[19:59] *** codesections1 is now known as codesections

[20:24] *** codesections left
[20:53] *** codesections joined
[20:58] *** codesections1 joined
[20:59] *** codesections left
[20:59] *** codesections1 is now known as codesections

[21:18] *** codesections1 joined
[21:22] *** codesections left
[21:22] *** codesections1 is now known as codesections

[21:37] <Geth> ¦ rakudo/main: 915c14c05b | (Stefan Seifert)++ | 2 files

[21:37] <Geth> ¦ rakudo/main: RakuAST: report conflicting type on signature declarations

[21:37] <Geth> ¦ rakudo/main: 

[21:37] <Geth> ¦ rakudo/main: Fixes: my Int (Str $x) # to fail

[21:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/915c14c05b

[21:38] *** codesections left
[21:40] <nine> It's somewhat comical that on the day we discuss about Failure being used too often I come across the fact that array.^parameterize returns plain strings on errors. No exceptions, not even Failures, just a return "Can only parameterize array with a native type, not {t.^name}"

[22:00] <timo> you take the MOP, you get to mop up the dirt :D

[23:22] <Geth> ¦ rakudo/main: cfc74a80ef | (Elizabeth Mattijsen)++ | src/core.c/Hash.rakumod

[23:22] <Geth> ¦ rakudo/main: Add a "die" that was missed in 69dd7d66ea

[23:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cfc74a80ef

[23:23] *** codesections joined
[23:28] *** codesections1 joined
[23:30] *** codesections left
[23:30] *** codesections1 is now known as codesections

[23:31] *** sena_kun left
