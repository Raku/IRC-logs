[00:05] <ab5tract> R#5778 is super interesting

[00:05] <linkable6> R#5778 [open]: https://github.com/rakudo/rakudo/issues/5778 hyperoperator with typed array expects result to be of type matching type of array operand

[00:05] <ab5tract> m: dd my Int @a = False, False, True; 

[00:05] <camelia> rakudo-moar 72e2dcd13: OUTPUT: «Int  = Array[Int].new(Bool::False, Bool::False, Bool::True)␤»

[00:06] <timo> where did the name go in that display?

[00:07] <ab5tract> I think this one of those places where the available set of implemented features constrained the implementation of other, mostly unrelated things on the way

[00:07] <ab5tract> eg, if coercion was already implemented when Bool was made, we probably wouldn't have made `(Bool ~~ Int) ~~ True`

[00:08] <timo> right, here's actually possibly a spot where more parameterization and some amount of type inference would be able to help?

[00:09] <ab5tract> dd is liable to drop names quite often

[00:10] <ab5tract> m: my @a = "foo"; dd @a

[00:10] <camelia> rakudo-moar 72e2dcd13: OUTPUT: «["foo"]␤»

[00:10] <timo> mhm

[00:10] <timo> i tend to dd :$foo, :@bar to get names

[00:10] <ab5tract> yeah, me too :)

[00:11] <timo> there's a bit of trickyness with hyper ops and the types of things they create for the return values, since hypers descend into iterables of any type

[00:11] <timo> so you can have user-defined array-like or hash-like classes too

[00:12] <timo> so the obvious solution i first thought of, of dropping type arguments would work for typed arrays but not for something where the type arguments don't directly correspond to types of inner containers doesn't generalize :|

[00:12] <ab5tract> yeah, that's a good point. 

[00:13] <timo> special-casing for Positional[...] or Associative[...] could be okay

[00:13] <ab5tract> Ah, I was thinking more along the lines of the fact that `Array[Int]` shouldn't really be storing `Bool`

[00:13] <timo> since that's the roles you are supposed to use when you have some kind of "type of values (and optionally, keys)" in your thing

[00:13] <timo> oh, i don't mind that too much

[00:13] <timo> it's definitely a "huh" when you first see it

[00:14] <timo> m: my Str @words = <dog cat mouse horse chinchilla>; dd @words>>.chars;

[00:14] <camelia> rakudo-moar 72e2dcd13: OUTPUT: «Str  = Array[Str].new(3, 3, 5, 5, 10)␤»

[00:14] <ab5tract> I don't see any reason for them to be a type of `Int` when everything that you could do with them in terms of comparison to `Int` values will coerce anyway

[00:15] <timo> this doesn't even error, LOL

[00:15] <ab5tract> eek

[00:15] <timo> i assume we take a shortcut there where we create the results as an IterationBuffer and just bind it into the result

[00:15] <ab5tract> well, that's Allomorphism, which I *also* think would have been handled differently if we had coercion in place ahead of time :)

[00:16] <timo> oh, is it?

[00:16] <ab5tract> ah,  good call out. I'm not actually sure :/

[00:16] <timo> m: my Str @words = <dog cat mouse horse chinchilla>; my $res = @words>>.chars; dd $res[0].WHAT, $res[0].^name, $res.^name, $res.^name;

[00:16] <camelia> rakudo-moar 72e2dcd13: OUTPUT: «Int␤"Int"␤"Array[Str]"␤"Array[Str]"␤»

[00:16] <ab5tract> too late for me to find out tonight

[00:16] <timo> nope, it's legit Int objects in there

[00:17] <ab5tract> wild :)

[00:18] <ab5tract> maybe I've been doing too much in statically typed langs lately, but bools and strings in `Array[Int]` feels not good to me

[00:18] <timo> well, the Str in Array[Int] is absolutely without-a-doubt wrong

[00:19] <timo> m: my Str @words = <dog cat mouse horse chinchilla>; my $res = @words>>.chars; $res[0] = $res[0];

[00:19] <camelia> rakudo-moar 72e2dcd13: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[00:19] <timo> it doesn't actually even put scalars in the resulting Array it seems like

[00:20] <timo> i wonder if that should be a "sub-issue" of the issue we were just discussing? how do these "sub-issues" work in github?

[00:20] <ab5tract> They are pretty new, right?

[00:20] <timo> https://docs.github.com/en/issues/tracking-your-work-with-issues/using-issues/adding-sub-issues

[00:20] <ab5tract> I don't think I've worked with them before

[00:22] <timo> i think it doesn't necessarily make sense as a sub-issue of this issue, but there could be a parent issue with something like "hyper operators and typed containers don't work together very well" and the created issue could perhaps be renamed to cover dwimmy and non-dwimmy two-op hyperops, and a new issue for hyper-methodcall

[00:23] <ab5tract> yeah, the strings are definitely off. I'm not saying that it's worth anyone's time to unwind the Bool ~~ Int thing, but I do wonder whether we could keep everything we care about WRT to using Bools in numeric contexts without it

[00:25] <timo> if you don't mind, i'll quickly respond on the issue about the Int ~~ Bool thing as well as the custom type thing. or if you want, you can

[00:25] <ab5tract> please go ahead

[00:26] <ab5tract> I'm going Shaq face over here :) https://i2.kym-cdn.com/photos/images/newsfeed/001/225/928/a11.jpg

[00:31] <timo> have a good Shaq

[00:39] <timo> m: my $silly = (my @foo = 1, 2, 3, 4) but Positional[Str]; say $silly.^name

[00:39] <camelia> rakudo-moar 72e2dcd13: OUTPUT: «Array+{Positional[Str]}␤»

[00:39] <timo> m: my $silly = (my @foo = 1, 2, 3, 4) but Array[Str]; say $silly.^name

[00:39] <camelia> rakudo-moar 72e2dcd13: OUTPUT: «Cannot mix in non-composable type Array[Str] into object of type Array␤  in block <unit> at <tmp> line 1␤␤»

[00:40] <timo> m: my $silly = (my @foo = 1, 2, 3, 4) but Positional[Str]; $silly[10] = "hello"; dd $silly;

[00:40] <camelia> rakudo-moar 72e2dcd13: OUTPUT: «$silly = $[1, 2, 3, 4, Any, Any, Any, Any, Any, Any, "hello"]␤»

[00:40] <timo> m: my $silly = (my @foo = 1, 2, 3, 4) but Positional[Str]; $silly[10] = "hello"; $silly[11] = 5; dd $silly;

[00:40] <camelia> rakudo-moar 72e2dcd13: OUTPUT: «$silly = $[1, 2, 3, 4, Any, Any, Any, Any, Any, Any, "hello", 5]␤»

[00:41] <timo> i guess just adding Positional[Str] doesn't cause the containers that it creates for holding new stuff to become typed

[00:43] <timo> that may be considered a DIHWIDT

[01:39] *** lizmat_ joined
[01:41] *** lizmat left
[02:08] *** guifa left
[02:08] *** guifa joined
[05:58] *** guifa left
[09:40] *** sena_kun joined
[10:39] *** lizmat_ left
[10:39] *** lizmat joined
[14:27] <Geth> ¦ rakudo/main: 0a70811438 | (Elizabeth Mattijsen)++ | 2 files

[14:27] <Geth> ¦ rakudo/main: Make iterating Map/Hash ~1% faster

[14:27] <Geth> ¦ rakudo/main: 

[14:27] <Geth> ¦ rakudo/main: By doing repeated attribute lookups only once: this adds some

[14:27] <Geth> ¦ rakudo/main: overhead, but reduces bytecode size, which gives more inlining

[14:27] <Geth> ¦ rakudo/main: opportunities

[14:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0a70811438

[14:56] *** guifa joined
[17:17] *** zostay left
[17:17] *** zostay joined
[19:20] *** guifa left
[19:27] <Geth> ¦ rakudo: lizmat self-assigned [RakuDoc / RakuAST] Adding config data to a RakuAST::Doc::Block https://github.com/rakudo/rakudo/issues/5777

[19:27] <Geth> ¦ rakudo: lizmat self-assigned hyperoperator with typed array expects result to be of type matching type of array operand https://github.com/rakudo/rakudo/issues/5778

[19:52] <Geth> ¦ rakudo/lizmat-Hash-Ordered: 148c3d4815 | (Elizabeth Mattijsen)++ | 2 files

[19:52] <Geth> ¦ rakudo/lizmat-Hash-Ordered: Introduce Hash::Ordered

[19:52] <Geth> ¦ rakudo/lizmat-Hash-Ordered: 

[19:52] <Geth> ¦ rakudo/lizmat-Hash-Ordered: This subclass of Hash will keep the order in which keys have been

[19:52] <Geth> ¦ rakudo/lizmat-Hash-Ordered: added, with as little overhead as possible.

[19:52] <Geth> ¦ rakudo/lizmat-Hash-Ordered: 

[19:52] <Geth> ¦ rakudo/lizmat-Hash-Ordered: The theory of operation is that whenever a key is accessed, and the

[19:52] <Geth> ¦ rakudo/lizmat-Hash-Ordered: key does **not** exist in the hash, then the key will be added to

[19:52] <Geth> ¦ rakudo/lizmat-Hash-Ordered: <…commit message has 29 more lines…>

[19:52] <Geth> ¦ rakudo/lizmat-Hash-Ordered: review: https://github.com/rakudo/rakudo/commit/148c3d4815

[19:53] <[Coke]> I have a dirty checkout that shows changes in 3rdparty/libuv - how to discard those? 

[19:53] <Geth> ¦ rakudo: lizmat++ created pull request #5779: Introduce Hash::Ordered: hashes that keep the order of the keys

[19:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5779

[19:55] <coleman> [Coke] if I remember submodules correctly, you need to cd down to the libuv directory and reset to the commit the parent repo expects

[19:56] <Geth> ¦ rakudo: lizmat self-unassigned [JVM] Error when trying to assign to variable typed as native int and use the result of the expression directly as key for nqp::hash https://github.com/rakudo/rakudo/issues/4732

[20:37] <[Coke]> git submodule foreach --recursive git reset --hard

[20:37] <[Coke]> git submodule update --recursive --init

[21:08] *** librasteve_ joined
[21:35] *** japhb left
[22:26] *** japhb joined
[23:23] *** sena_kun left
