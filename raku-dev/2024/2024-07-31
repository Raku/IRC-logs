[02:09] *** [Coke] left
[02:09] *** [Coke] joined
[03:35] *** vrurg_ joined
[03:36] *** vrurg left
[05:25] *** MasterDuke left
[05:40] *** sena_kun joined
[07:51] *** kawaii joined
[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: 29c35a1b5e | (Stefan Seifert)++ | 3 files

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: RakuAST: make attribute initializers compile in correct context

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: 

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: Attribute initializers are transparently wrapped in a method that will

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: be called by the object's constructor. Previously this method's AST node

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: was created after we parsed the initializer. However since the method

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: provides `self` as an implicit term if the initializer tried to use

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: `self`, it would fail to resolve the symbol.

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: 

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: Fix by splitting off creation of the Method AST node and doing this at

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: the variable declaration's parse time, so we can enter the method's

[08:04] <Geth> ¦ rakudo/rakuast-phase-cleanup: scope before parsing the initializer.

[08:05] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/commit/29c35a1b5e

[09:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: 34203afe7b | (Stefan Seifert)++ | 3 files

[09:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: RakuAST: make attribute initializers compile in correct context

[09:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: 

[09:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: Attribute initializers are transparently wrapped in a method that will

[09:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: be called by the object's constructor. Previously this method's AST node

[09:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: was created after we parsed the initializer. However since the method

[09:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: provides `self` as an implicit term if the initializer tried to use

[09:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: `self`, it would fail to resolve the symbol.

[09:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: 

[09:16] <Geth> ¦ rakudo/rakuast-phase-cleanup: Fix by splitting off creation of the Method AST node and doing this at

[09:16] <Geth> ¦ rakudo/rakuast-phase-cleanup: the variable declaration's parse time, so we can enter the method's

[09:16] <Geth> ¦ rakudo/rakuast-phase-cleanup: scope before parsing the initializer.

[09:16] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/commit/34203afe7b

[09:17] <nine> Turns out, there was a neat solution after all :) We already stub declared variables and this happens right before parsing the initializer. So this gave me a place where I can create that wrapper method at parse time and then parse the initializer in this method's scope. If there's no initializer, we just discard the method again (that got added in the second push)

[09:18] <nine> 6 more spectest files to pass before I can merge rakuast-phase-cleanup

[09:21] <lizmat> nine++

[10:00] *** kawaii left
[10:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: 24 commits pushed by (Stefan Seifert)++

[10:15] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/compare/34203afe7bc9...41132aa79827

[11:34] *** librasteve_ joined
[11:34] <librasteve_> o/

[12:13] <Geth> ¦ rakudo/rakuast-phase-cleanup: c19a9c1598 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[12:13] <Geth> ¦ rakudo/rakuast-phase-cleanup: RakuAST: have double parentheses act as currying barrier

[12:13] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/commit/c19a9c1598

[12:15] <nine> 5 more spectest files before rakuast-phase-cleanup is complete

[12:24] <nine> Huh.... why does this give a single curried expression:

[12:24] <nine> m: dd (* > 1) + 3

[12:24] <camelia> rakudo-moar 934e86105: OUTPUT: «WhateverCode.new␤»

[12:25] <nine> while this gives 3:

[12:25] <nine> m: dd (* > 1) xx 3'

[12:25] <camelia> rakudo-moar 934e86105: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> dd (* > 1) xx 3⏏'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifie…»

[12:25] <nine> m: dd (* > 1) xx 3

[12:25] <camelia> rakudo-moar 934e86105: OUTPUT: «(WhateverCode.new, WhateverCode.new, WhateverCode.new).Seq␤»

[12:40] <lizmat> xx's left side is thunked ?

[12:49] <nine> m: dd * > 1 xx 3

[12:49] <camelia> rakudo-moar 934e86105: OUTPUT: «WhateverCode.new␤»

[12:50] <nine> Not always it seems

[12:58] <lizmat> well, they produce different ASTs

[13:41] <Geth> ¦ rakudo/rakuast-phase-cleanup: 0253b05c26 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[13:41] <Geth> ¦ rakudo/rakuast-phase-cleanup: RakuAST: honor xx's currying barrier

[13:41] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/commit/0253b05c26

[15:23] *** librasteve_ left
[15:40] <Geth> ¦ rakudo/rakuast-phase-cleanup: 6fce6f65d0 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[15:40] <Geth> ¦ rakudo/rakuast-phase-cleanup: RakuAST: need to call IMPL-BEGIN on synthetic node trees

[15:40] <Geth> ¦ rakudo/rakuast-phase-cleanup: 

[15:40] <Geth> ¦ rakudo/rakuast-phase-cleanup: to-begin-time only handles the node it's called on. To get fully

[15:40] <Geth> ¦ rakudo/rakuast-phase-cleanup: recursive running of BEGIN handling, one needs to call IMPL-BEGIN

[15:40] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/commit/6fce6f65d0

[15:57] <Geth> ¦ rakudo/rakuast-phase-cleanup: 38 commits pushed by (Jonathan Worthington)++, (Stefan Seifert)++

[15:57] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/compare/6fce6f65d0a6...15d7a8e52bac

[15:57] <nine> :

[16:05] <nine> And with this, rakuast-phase-cleanup passes all spectest files that main does plus two more :)

[16:08] <lizmat> WOW!

[16:12] <nine> There are still some RakuAST specific tests failing

[16:17] <lizmat> such as?

[16:19] <nine> t/12-rakuast/class.rakutest fails because we don't declare the %_ lexical in the test method

[16:20] <nine> My guess is that we cache the AST declarations before we create those implicits

[16:24] <lizmat> and that isn't caught by another test?

[16:25] <nine> only happens with synthetic ASTs

[16:26] <lizmat> but synthetic ASTs should probably define *%_ explicitely?

[16:26] <lizmat> on methods, I mean

[16:27] <lizmat> if not, then that's a deficiency in the test ?

[16:27] <lizmat> *they do not

[16:28] <lizmat> because for sure, I would like to be able to create methods that do *not* have an implicit *%_

[16:28] <lizmat> as a candidate in dispatch for when *no* named args are specified

[16:42] <nine> So we're back to AST nodes for these implicits getting generated at BEGIN time while already at PARSE time we try to look up names which triggers caching of AST declarations..

[16:44] <lizmat> eh... couldn't we adjust the Actions to always *explicitely* add *%_ to methods ?

[16:45] <nine> That's not the only implicit

[16:45] <lizmat> you mean, self also ?

[16:46] <nine> yes

[16:48] <lizmat> is that the only one, or are you referring to $_ $/ $! as well?

[16:49] <nine> invocant and slurpy hash are the ones created by IMPL-ENSURE-IMPLICITS

[16:50] <lizmat> well, to me "self" feels like a very special case that we could possibly solve another way, really late?

[16:50] <lizmat> and if %_ is the only other one, then I'd say we handle *that* in Actions 

[16:51] <lizmat> and thus get rid of IMPL-ENSURE-IMPLICITS ?

[16:51] <nine> self still has to be added early enough to be done before we start resolving names

[16:52] <lizmat> m: my method a { my \self = 42 }

[16:52] <camelia> rakudo-moar 934e86105: OUTPUT: «===SORRY!===␤Lexical 'self' already declared␤»

[16:53] <lizmat> I mean, do we really have to resolve "self"?   couldn't we equate that to the first argument always ?

[16:54] <lizmat> if the callable is a method ?

[16:54] <nine> You still need to find that AST node representing the thing self points at, to have it generate the required QAST

[16:55] <lizmat> but: RakuAST::Term::Self is already a whole class to itself

[16:56] <lizmat> couldn't that be used as a hook to have it find where it points at?

[17:04] <nine> m: my \self = "hi"; say self # A Term::Self does *not* always refer to the first argument of an enclosing method.

[17:04] <camelia> rakudo-moar 934e86105: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤'self' used where no object is available␤at <tmp>:1␤------> my \self = "hi"; say ⏏self # A Term::Self does *not* always re␤    expecting any of:␤        argument list␤        term␤»

[17:05] <nine> Apparently that check is NYI in RakuAST. Anyway:

[17:05] <nine> m: my method foo() { { my \self = "hi"; say self } }

[17:05] <camelia> rakudo-moar 934e86105: ( no output )

[17:06] <nine> m: my method foo() { { my \self = "hi"; say self } }(1)

[17:06] <camelia> rakudo-moar 934e86105: OUTPUT: «hi␤»

[17:07] <lizmat> heh   :-)

[17:07] <lizmat> afk for a few hours&

[17:08] <nine> I guess better no check than a broken one like we've just seen with the old frontend

[17:55] <nine> method ast-lexical-declarations() # Find the lexical declarations due to AST nodes. This does not include any generated ones thanks to BEGIN-time effects (for example, those due to `import` or `use`). These are cached rather than walking the tree every time.

[17:55] <nine> method generated-lexical-declarations() # Get a list of generated lexical declarations. These are symbols that are produced thanks to BEGIN-time side-effects.

[17:56] <nine> These comments strongly suggest that these implicitly generated declarations should just be listed as generated declarations as they are indeed crated due to BEGIN-time effects.

[17:56] <nine> The problem with this is that they are still connected to the tree. Thus ast-lexical-declarations will find them if they have already been added at the first time it runs on that scope.

[18:33] *** [Tux] left
[18:38] *** [Tux] joined
[19:48] *** vrurg joined
[19:51] *** vrurg_ left
[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: 1229c9faba | (Stefan Seifert)++ | 3 files

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: RakuAST: defuse timing around signature implicits

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: 

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: In synthetic ASTs, lookups are done at parse time while signature

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: implicits are only created at begin time. Lookups trigger caching of AST

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: declarations in scopes, so the implicits will get ignored later on.

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: However declarations added at begin time are supposed to be added as

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: generated declarations anyway. Only trouble was that these declarations

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: would also get connected to the AST, thus they could be found twice when

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: they were created before the AST declaration cache was filled. Simply

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: deduplicate both lists when generating QAST to get out of this

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: conundrum.

[20:01] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/commit/1229c9faba

[20:02] <nine> Fixes 3 of the failing test files and gains us one more spectest file.

[20:14] <lizmat> nine++

[21:07] *** sena_kun left
