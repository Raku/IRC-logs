[01:12] <ugexe> m: my $o = 42; say $oo

[01:12] <camelia> rakudo-moar 24a1cdbbb: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$oo' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> my $o = 42; say <HERE>$oo␤»

[01:13] <ugexe> m: my $oo = 42; say $ooo

[01:13] <camelia> rakudo-moar 24a1cdbbb: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$ooo' is not declared.  Did you mean '$oo'?␤at <tmp>:1␤------> my $oo = 42; say <HERE>$ooo␤»

[01:13] <ugexe> kind of odd those errors have different suggestions

[02:34] <ugexe> https://gist.github.com/ugexe/de3ead91b4b12d5343ef1a0834b254a9 - i wrote a program that generates 1 million conditionals. i was originally wanting to do 4 billion since https://andreasjhkarlsson.github.io//jekyll/update/2023/12/27/4-billion-if-statements.html is what was leading me to try, but the precompilation of the generated library ran by the generated script is taking forever at just 1

[02:34] <ugexe> million conditionals

[03:00] *** kjp left
[03:01] *** kjp joined
[03:03] *** kjp left
[03:03] *** kjp joined
[03:13] <ugexe> 1 million conditionals has been (presumably) precompiling for 40 minutes so far

[07:57] <ab5tract> Xliff: are you running blead in production? It’s making me nervous just thinking about it

[07:59] <[Tux]> Rakudo v2024.10-48-g24a1cdbbb (v6.d) on MoarVM 2024.10-27-gc3629fb7e

[07:59] <[Tux]> csv-test-xs-20      0.142 -  0.142

[07:59] <[Tux]> csv-ip5xs           0.254 -  0.260

[07:59] <[Tux]> test-t --race       0.260 -  0.267

[07:59] <[Tux]> test-t              0.395 -  0.400

[07:59] <[Tux]> csv-ip5xs-20        1.081 -  1.084

[08:00] <[Tux]> test-t-20 --race    1.161 -  1.178

[08:00] <[Tux]> csv-parser          1.515 -  1.523

[08:00] <[Tux]> test                1.885 -  1.887

[08:00] <[Tux]> test-t-20           4.731 -  4.806

[08:00] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[08:03] <Geth> ¦ rakudo/main: 7 commits pushed by (Patrick Böker)++

[08:03] <Geth> ¦ rakudo/main: f2c70c7f0e | Fix is-run on Windows

[08:03] <Geth> ¦ rakudo/main: 686a65d14d | Fix a few warnings in Test::Helpers.is-run

[08:03] <Geth> ¦ rakudo/main: 65451f8379 | Silence warnings in xx-fixed-in-rakuast.rakuast

[08:03] <Geth> ¦ rakudo/main: c772ad8edc | Fix errors in t/09-moar/01-profilers.t

[08:03] <Geth> ¦ rakudo/main: 82dd2f6d21 | Un-todo a few passing tests

[08:03] <Geth> ¦ rakudo/main: 3820a9bafb | Fix azure command for testing reloc on Win

[08:03] <Geth> ¦ rakudo/main: 1ff7f08511 | Merge pull request #5700 from patrickbkr/fix-win-is-run

[08:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/24a1cdbbbbfd...1ff7f08511cf

[08:04] <patrickb> lizmat: ab5tract: Can one of you have a quick look at: https://github.com/rakudo/rakudo/pull/5700/commits/82dd2f6d212d12877bd2d21b8c7f2baff8db96e7 This is untodoing a few passing rakuast tests. I find it a bit unexpected that they should start passing.

[08:04] <patrickb> With that PR merged, we are now passing the rakudo tests on Windows again. Yay!

[08:07] <ab5tract> Awesome!

[08:07] <ab5tract> This one feels suspicious to me https://github.com/rakudo/rakudo/pull/5700/commits/65451f8379328e85bfd70b9dbbe398779af3ee64

[08:07] <Geth> ¦ roast: d57047f66e | (Patrick Böker)++ | S32-io/IO-Socket-INET.t

[08:07] <Geth> ¦ roast: Test mixed bin/no bin access in IO::Socket

[08:07] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d57047f66e

[08:07] <Geth> ¦ roast: 3032bcf423 | (Patrick Böker)++ (committed using GitHub Web editor) | S32-io/IO-Socket-INET.t

[08:07] <Geth> ¦ roast: Merge pull request #857 from patrickbkr/test-io-socket-mixed-access

[08:07] <Geth> ¦ roast: 

[08:07] <Geth> ¦ roast: Test mixed bin/no bin access in IO::Socket

[08:07] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3032bcf423

[08:11] <ab5tract> But since is-run is not publicly available, the idea that there could be a difference in how platforms handle :out<> vs :out(‘’) is less serious

[08:16] <patrickb> ab5tract: There was a compile time warning saying that <> is an empty list, not a list with the empty string.

[08:17] <patrickb> It worked with <> as well, just that pesky warning.

[08:17] <ab5tract> On Windows, or everywhere? If the latter than I guess somehow the warning got swallowed or otherwise went unnoticed when I added the test

[08:18] <ab5tract> If we ever want to polish is-run for general audiences, maybe using :!err would be even cleaner

[08:19] <ab5tract> I like that :err(*) works (or maybe I’m glossing over warnings there too, hmm)

[08:21] <patrickb> It's on Windows, yes.-

[08:23] <ab5tract> Ok, that at least explains how I didn’t notice it. It’s not a big deal, since is-run is internal for now. Otherwise I would suggest we (further) alter things to work with uniformly rather than alter the test itself

[08:24] <patrickb> I believe this: https://github.com/rakudo/rakudo/blob/main/src/Perl6/Grammar.nqp#L1591 is the warning I saw.

[08:25] <ab5tract> .o( would an EVAL bot running on Windows add any utility? Maybe it could shadow all evals and report any differences in output… )

[08:25] <patrickb> I wonder why that didn't trigger on Linux.

[08:26] <ab5tract> Yeah, now I’m more worried about that aspect :)

[08:27] <ab5tract> Okay, back to poking at your actual question

[08:41] <ab5tract> patrickb: well, I have no clue what happened but all of those examples are passing without RAKUDO_RAKUAST on macOS for me

[08:44] <patrickb> What I can say: the rakuast tests did not run on the CI up until yesterday. That at least explains why nobody noticed.

[08:46] <ab5tract> Ah,  was it not included in the `make test` target?

[08:47] <ab5tract> Anyway, I think that commit is 100% good to go.

[08:49] <ab5tract> m: dd uclc => *.uc ~ *.lc; Q| dd lcuc => *.lc ~ *.uc |.AST.EVAL

[08:49] <camelia> rakudo-moar 1ff7f0851: OUTPUT: «:uclc(WhateverCode.new)␤:lcuc(.lc ~ *.uc)␤»

[08:50] <ab5tract> not sure why `*.lc` is becoming `.lc`there, but otherwise I'm pretty proud of having added that patch :)

[08:53] <patrickb> ab5tract: it was in make test, but the CI called `prove` directly. And that by default only looks at files with the .t extension.

[08:53] <patrickb> The rakuast tests have .rakutest.

[08:53] <ab5tract> ahhh

[09:52] *** sena_kun joined
[10:10] *** sena_kun left
[10:15] <Geth> ¦ nqp/main: 09807b7dd0 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[10:15] <Geth> ¦ nqp/main: Bump MoarVM to get Windows long path fixes

[10:15] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/09807b7dd0

[10:32] <Geth> ¦ rakudo/main: c632dd7749 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[10:32] <Geth> ¦ rakudo/main: Bump NQP to get Windows long path fixes

[10:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c632dd7749

[10:32] <lizmat> patrickb: t/spec/S32-io/dir.t started to fail for me  :-(

[10:32] <lizmat> 7, 10 failed

[10:33] <patrickb> I'll look

[10:48] <patrickb> It's this: https://github.com/MoarVM/MoarVM/pull/1745#issue-1597874453

[10:48] <patrickb> I'll just need to find the place where that . / .. processing happens make the change.

[12:31] <Geth> ¦ rakudo: patrickbkr++ created pull request #5701: Fix `dir` to give "." and ".." again

[12:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5701

[12:32] <patrickb> There you go.

[12:35] <lizmat> patrickb: looks ok, waiting for CI results :-)

[12:37] <Geth> ¦ rakudo: patrickbkr++ created pull request #5702: Fix tests on Win/cl/debug, make runner resilient to long paths

[12:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5702

[12:38] <Geth> ¦ nqp: patrickbkr++ created pull request #832: Deal with long paths in moar runner

[12:38] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/832

[13:01] <Geth> ¦ rakudo/main: b1c4062415 | (Patrick Böker)++ (committed using GitHub Web editor) | src/core.c/Rakudo/Iterator.rakumod

[13:01] <Geth> ¦ rakudo/main: Fix `dir` to give "." and ".." again

[13:01] <Geth> ¦ rakudo/main: 

[13:01] <Geth> ¦ rakudo/main: Now that Moar does not give "." and ".." for dirs anymore, we need to put

[13:01] <Geth> ¦ rakudo/main: it in ourselves, just as we do for the JVM.

[13:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b1c4062415

[13:17] <Geth> ¦ nqp/main: bea7fbb404 | (Patrick Böker)++ | src/vm/moar/runner/main.c

[13:17] <Geth> ¦ nqp/main: Deal with long paths in moar runner

[13:17] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/bea7fbb404

[13:17] <Geth> ¦ nqp/main: 38161c4f20 | (Patrick Böker)++ (committed using GitHub Web editor) | src/vm/moar/runner/main.c

[13:17] <Geth> ¦ nqp/main: Merge pull request #832 from patrickbkr/win-long-path-runner

[13:17] <Geth> ¦ nqp/main: 

[13:17] <Geth> ¦ nqp/main: Deal with long paths in moar runner

[13:17] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/38161c4f20

[13:36] <Geth> ¦ rakudo/main: 3b2fb62ad4 | (Patrick Böker)++ | t/04-nativecall/CompileTestLib.rakumod

[13:36] <Geth> ¦ rakudo/main: Fix nativecall tests on Windows/cl/enabled debugging

[13:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3b2fb62ad4

[13:36] <Geth> ¦ rakudo/main: 61ee2fdfb4 | (Patrick Böker)++ | src/vm/moar/runner/main.c

[13:36] <Geth> ¦ rakudo/main: Deal with long paths in moar runner

[13:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/61ee2fdfb4

[13:36] <Geth> ¦ rakudo/main: 461b81f794 | (Patrick Böker)++ (committed using GitHub Web editor) | 2 files

[13:36] <Geth> ¦ rakudo/main: Merge pull request #5702 from patrickbkr/win-long-paths

[13:36] <Geth> ¦ rakudo/main: 

[13:36] <Geth> ¦ rakudo/main: Fix tests on Win/cl/debug, make runner resilient to long paths

[13:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/461b81f794

[13:40] <lizmat> patrickb: odd, 61ee2fdfb4 doesn't cause a re-compilation, it probably should ?

[13:40] <linkable6> (2024-11-27) https://github.com/rakudo/rakudo/commit/61ee2fdfb4 Deal with long paths in moar runner

[13:46] <patrickb> You mean a re-run of the CI?

[13:46] <lizmat> no, after a pull, a "make install" did not re-compile rakudo at all

[13:47] <lizmat> effectively making the change in src/vm/moar/runner/main.c unnoticed ?

[13:48] <patrickb> That it's not recompiling all of rakudo is expected. That it's not even recreating the executables is unexpected.

[13:50] <lizmat> ok, then sorry for the noise

[13:51] <lizmat> yeah, it did mention: +++ Compiling	inst-rakudo  and friends

[13:51] <lizmat> so I guess it did DTRT

[14:46] *** librasteve_ joined
[15:34] <timo> i never run with --silent-build %)

[15:42] *** donaldh left
[15:43] *** donaldh joined
[15:46] <patrickb> timo: Now that the RTL issue on Windows is solved, can we merge #5642? That's a pretty epic PR that would give us tremendously faster Windows tests, pretty test results to look at and (because it disables Win_JVM) finally a ✅ again.

[15:49] <ugexe> it would be nice if that PR could be rebased into more comprehensible commits

[15:51] <patrickb> All the gems are hidden in there. Just needs a thorough rebase -i removing all the debug cruft and squashing the rest into a few commits.

[15:52] <patrickb> At least that's my understanding. :) Awaiting timos opinion on this.

[15:54] <timo> if you want to do that work, that's okay. i would just squash the branch into a single commit and keep the old branch around for documentation reasons or to look back at the Fun Times i have had?

[15:54] <patrickb> timo: If the windows stuff is still too much of an annoyance to you, I can take over. But a quick "yes, there are no blockers it actually makes sense to merge would be great."

[15:56] <timo> oh, yeah, i'm not aware of blockers, but i haven't touched it in a while and don't remember very accurately

[15:56] <patrickb> Want me to take over?

[15:57] <timo> i would appreciate it :)

[15:57] <timo> maybe i should have ported the "find powershell thingie very fast" thing over to the main branch long ago already

[15:57] <timo> and also to moarvm's CI

[15:58] <patrickb> Cool! I'll do so. It's nice to harvest the did-something-great-feel without all the untreated-sewage part. :-P

[15:59] <timo> hahaha

[15:59] <timo> man i got so enraged ...

[15:59] <ugexe> i left my 1 million line program precompiling overnight but i think not much happened when my laptop went to sleep since htop shows the TIME+ as only 3.5 hours

[15:59] <timo> i'm analysing it a little bit

[15:59] <ugexe> its still precompiling though

[16:00] <timo> looks like there is a big amount of work by the GC, and i looked at some hashes that we're gc-mark-ing and there's a humongous one with integer keys which i expect are CUIDs of blocks we're creating

[16:01] <ugexe> are you talking about the for-loop one or the if-elsif-else one?

[16:03] <timo> the if-elsif-else one

[16:04] <timo> if you're cool with attaching gdb to the process i can show you how to have a look where in the source it's currently at with parsing

[16:07] <ugexe> i'm attached with lldb

[16:07] <timo> what does the memory usage look like on your end? i've made a change to the source and it's reached 2.5 gig already

[16:07] <timo> ah, ok, i'm not fully familiar with the lldb syntax, but you would want to set a breakpoint in nqp_nfa_run

[16:11] <timo> ooooh

[16:11] <timo> hello below-quadratic-growth-of-arrays my old friend

[16:13] <timo> not sure it's actually responsible for a big part of the run time, maybe not

[16:16] <ugexe> https://gist.github.com/ugexe/156bbfe4e6f3ece48a86fbfcca74961f this is what my memory usage looks like

[16:19] <timo> i'm not sure what i'm seeing here. why is so much memory allocated in a region called "IOAccelerator"?

[16:19] <timo> can you get an output of how much the process has spent swapping stuff in and out? like, are the swapped-out bits of memory mostly dormant, or is it swapping back and forth over and over?

[16:24] <ugexe> i'm largely surprised by the 32gb used in virtual memory and only 1gb of resident memory

[16:24] <timo> when i set a breakpoint to any of the nfa functions that are interesting and continue, gdb spikes to 100% cpu usage and doesn't react to trying to ctrl-c it, wtf

[16:25] <timo> oh, could be mimalloc doing that? is mimalloc actually in use in your case? just some virtual memory tricks perhaps?

[16:26] <timo> hahaha oh shit :D

[16:27] <timo> i think it's the string pretty-printer being pointed at the huge-ass source string and just trying to transfer a huge amount of memory from the client memory to its own?

[16:27] <timo> and it's not reacting to ctrl-c while custom python code is running?

[16:27] <timo> well, i can turn that off, so that's good

[16:29] <timo> so you're on macos, right?

[16:58] <timo> oh, the virtual size is actually virtual + swapped, so it's not virtual memory tricks, it's almost all real memory

[17:20] <timo> LOL i was debug-printing stuff in the string pretty printer code and was getting "could not locate compile-time value for symbol" and i was so confused, until i realized that that's the content of the string, not an error from gdb to my python code

[17:38] <lizmat> reminds me if a prank I pulled in the DOS days

[17:38] <lizmat> put a file called "secret.txt" on somebody's startup disketter

[17:38] <lizmat> with as contents: "Access denied"  :-)

[17:48] <Geth> ¦ App-MoarVM-Debug: slid1amo2n3e4++ created pull request #21: Run Rakudo from inside the script

[17:48] <Geth> ¦ App-MoarVM-Debug: review: https://github.com/raku-community-modules/App-MoarVM-Debug/pull/21

[17:50] <timo> ehehehe

[19:01] *** sena_kun joined
[19:54] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 8def6255f0 | ab5tract++ | 3 files

[19:54] <Geth> ¦ rakudo/lower-bound-for-revision-gating: Add lower-bounding for the revision-gated trait

[19:54] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 

[19:54] <Geth> ¦ rakudo/lower-bound-for-revision-gating: This adds a finishing touch to revision gating: the ability to

[19:54] <Geth> ¦ rakudo/lower-bound-for-revision-gating: use revision gating to evolve methods that otherwise have the exact

[19:54] <Geth> ¦ rakudo/lower-bound-for-revision-gating: same signature.

[19:54] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 

[19:54] <Geth> ¦ rakudo/lower-bound-for-revision-gating: The is done by adding the trait to the candidate that is to be replaced:

[19:54] <Geth> ¦ rakudo/lower-bound-for-revision-gating: <…commit message has 23 more lines…>

[19:54] <Geth> ¦ rakudo/lower-bound-for-revision-gating: review: https://github.com/rakudo/rakudo/commit/8def6255f0

[20:14] <Geth> ¦ rakudo: usev6++ created pull request #5704: Type second param of proto for Stash::ASSIGN-KEY

[20:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5704

[20:16] <Geth> ¦ rakudo/lower-bound-for-revision-gating: c49f878cd0 | ab5tract++ | 3 files

[20:16] <Geth> ¦ rakudo/lower-bound-for-revision-gating: Add lower-bounding for the revision-gated trait

[20:16] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 

[20:16] <Geth> ¦ rakudo/lower-bound-for-revision-gating: This adds a finishing touch to revision gating: the ability to

[20:16] <Geth> ¦ rakudo/lower-bound-for-revision-gating: use revision gating to evolve methods that otherwise have the exact

[20:16] <Geth> ¦ rakudo/lower-bound-for-revision-gating: same signature.

[20:16] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 

[20:16] <Geth> ¦ rakudo/lower-bound-for-revision-gating: The is done by adding the trait to the candidate that is to be replaced:

[20:16] <Geth> ¦ rakudo/lower-bound-for-revision-gating: <…commit message has 23 more lines…>

[20:16] <Geth> ¦ rakudo/lower-bound-for-revision-gating: review: https://github.com/rakudo/rakudo/commit/c49f878cd0

[20:50] <Xliff> ab5tract: Um. TMI?

[20:51] <ab5tract> Sorry, I don’t get it

[20:52] <Xliff> ab5tract: Good! You'll sleep better!

[20:52] <Xliff> timo: No, I do not have an AMD Zen. This is 13th Gen Intel(R) Core(TM) i9-13900K

[20:53] <ab5tract> Why would someone in the community making sideways comments that they refuse to explain help me sleep better?

[20:54] <ab5tract> Now I’m just left wondering what I’ve written that led you to react that way

[20:59] <patrickb> Possibly "too much information". And then glad you didn't get it (i.e. wasn't meant to be snarky, but was in retrospect). I personally like long commit messages.

[21:00] <Xliff> ab5tract: You mentioned something about blead in production, recently. I was trying to assuage your fears withouth actually touching on them.

[21:00] <ab5tract> I didn’t write the robot that can’t handle a force pushed

[21:01] <ab5tract> *push

[21:07] <ab5tract> Text is hard yall

[21:08] <ab5tract> I expect I can come off as fairly cranky at times, so I want to take a moment to say how much I appreciate everyone here

[21:10] <ab5tract> (Was that TMI? ;)

[21:18] <Xliff> Nope.

[21:18] <Xliff> And it's in tune with the season. We're glad you're here, ab5tract!

[21:19] <ab5tract> ❤️‍🔥

[22:14] <Geth> ¦ rakudo: patrickbkr++ created pull request #5705: Reimagine Azure CI

[22:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5705

[22:22] *** sena_kun left
[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: ea4f39e754 | (Timo Paulssen)++ (committed by Patrick Böker) | 2 files

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: Reimagine Azure CI

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: 

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: - Prettier output (using the JUnit test result formatter)

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: - Restructure making better use of parameters

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: - Disable OOMing Win_JMV

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: - Speed up CI on Windows by working around the compiler search

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: - More granular output using `echo` commands

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: - add a nodelay & blocking spec test run

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: - persist build artifacts

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: - Speed up testing by running tests in parallel

[22:28] <Geth> ¦ rakudo/azure_improvements_squashed: review: https://github.com/rakudo/rakudo/commit/ea4f39e754

[22:29] <Geth> ¦ rakudo: patrickbkr++ created pull request #5706: Reimagine Azure CI

[22:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5706

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: fc6ad5c3de | (Timo Paulssen)++ (committed by Patrick Böker) | 2 files

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: Reimagine Azure CI

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: 

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: - Prettier output (using the JUnit test result formatter)

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: - Restructure making better use of parameters

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: - Disable OOMing Win_JMV

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: - Speed up CI on Windows by working around the compiler search

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: - More granular output using `echo` commands

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: - add a nodelay & blocking spec test run

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: - persist build artifacts

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: - Speed up testing by running tests in parallel

[22:35] <Geth> ¦ rakudo/azure_improvements_squashed: review: https://github.com/rakudo/rakudo/commit/fc6ad5c3de

[22:51] <Geth> ¦ rakudo/azure_improvements_squashed: d7fbf904a1 | (Patrick Böker)++ | azure-pipelines.yml

[22:51] <Geth> ¦ rakudo/azure_improvements_squashed: Fixup perms

[22:51] <Geth> ¦ rakudo/azure_improvements_squashed: review: https://github.com/rakudo/rakudo/commit/d7fbf904a1

[23:06] <Geth> ¦ rakudo/azure_improvements_squashed: 394545f95f | (Patrick Böker)++ | azure-pipelines.yml

[23:06] <Geth> ¦ rakudo/azure_improvements_squashed: More perm fixes

[23:06] <Geth> ¦ rakudo/azure_improvements_squashed: review: https://github.com/rakudo/rakudo/commit/394545f95f

