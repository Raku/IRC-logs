[05:33] <Geth> ¦ rakudo/main: 5f5fe4fe13 | (Stefan Seifert)++ | 2 files

[05:33] <Geth> ¦ rakudo/main: RakuAST Support adverbs on infixes

[05:33] <Geth> ¦ rakudo/main: 

[05:33] <Geth> ¦ rakudo/main: Makes 3 zin 4 :x(5) equivalent to infix:<zin>(3, 4, :x(5))

[05:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5f5fe4fe13

[05:42] <Geth> ¦ roast: a07d730526 | (Stefan Seifert)++ | S03-operators/adverbial-modifiers.t

[05:42] <Geth> ¦ roast: Fix expected value in todo'ed test

[05:42] <Geth> ¦ roast: 

[05:42] <Geth> ¦ roast: The stringified capture would contain the leading backslash if the test

[05:42] <Geth> ¦ roast: ran successfully.

[05:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a07d730526

[05:42] <Geth> ¦ roast: 87d20252ec | (Stefan Seifert)++ | S03-operators/adverbial-modifiers.t

[05:42] <Geth> ¦ roast: Skip todo'ed test that fails to compile on RakuAST

[05:42] <Geth> ¦ roast: 

[05:42] <Geth> ¦ roast: While the old frontend would at least parse the construct, it has never

[05:42] <Geth> ¦ roast: been supported. No harm in making it fail straight out.

[05:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/87d20252ec

[09:44] *** finanalyst joined
[09:58] <lizmat> 1085

[09:59] <lizmat> so +16 so far this week  :-)

[10:43] <lizmat> m: my $a = ""; say Int.+"$a"()   # feels to me the suggestions are a little too LLM like in this case

[10:43] <camelia> rakudo-moar 5f5fe4fe1: OUTPUT: «No such method '' for invocant of type 'Int'.  Did you mean any of␤these: 'IO', 'fc', 'kv', 'lc', 'so', 'tc', 'uc'?␤  in block <unit> at <tmp> line 1␤␤»

[10:50] <lizmat> m: say Int.""()   # feels to me this should be a compile-time warning

[10:50] <camelia> rakudo-moar 5f5fe4fe1: OUTPUT: «No such method '' for invocant of type 'Int'.  Did you mean any of␤these: 'IO', 'fc', 'kv', 'lc', 'so', 'tc', 'uc'?␤  in block <unit> at <tmp> line 1␤␤»

[11:08] *** finanalyst left
[11:10] *** finanalyst joined
[11:35] <Geth> ¦ rakudo/main: bcb39d0b4c | (Elizabeth Mattijsen)++ | 5 files

[11:35] <Geth> ¦ rakudo/main: RakuAST: fix .? .+ .* dispatches

[11:35] <Geth> ¦ rakudo/main: 

[11:35] <Geth> ¦ rakudo/main: This commit replaces the approach of specifying a special class

[11:35] <Geth> ¦ rakudo/main: indicating what type of dispatch to perform, with specifying the

[11:35] <Geth> ¦ rakudo/main: type of dispatch by indicating the Raku equivalent of it.  So

[11:35] <Geth> ¦ rakudo/main: 

[11:35] <Geth> ¦ rakudo/main:    dispatch => '.?'   # return Nil if method does not exist

[11:35] <Geth> ¦ rakudo/main: <…commit message has 19 more lines…>

[11:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bcb39d0b4c

[11:49] <Geth> ¦ rakudo/main: 06d11b591d | (Elizabeth Mattijsen)++ | lib/RakuAST/Deparse/Highlight.rakumod

[11:49] <Geth> ¦ rakudo/main: RakuAST: return "" on compilation errors inn ASTing

[11:49] <Geth> ¦ rakudo/main: 

[11:49] <Geth> ¦ rakudo/main: when trying to syntax highlight a piece of Raku code

[11:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/06d11b591d

[12:13] *** finanalyst left
[13:04] *** finanalyst joined
[13:09] <[Coke]> Started looking at my rakuast rakudoc ticket on a fresh rakudo. it's showing the classes of C< C<stuff> > as nested formatting codes - should the *parse* be saving the inner C<> as a formatting code or just a string? (since C<> is supposed to contain verbatim things)

[13:10] <[Coke]> or is it saving all the potential formatting and intending to render the inner C<> as text instead? (guessing it should be the former)

[13:11] <lizmat> hmmmm   are there other situations like that?

[13:12] <lizmat> I guess V< V< > > ?

[13:12] <[Coke]> m: qq|=begin pod\nC< C<a> >\n=end pod|.AST.say

[13:12] <camelia> rakudo-moar 06d11b591: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Doc::Block.new(␤    type       => "pod",␤    paragraphs => (␤      RakuAST::Doc::Paragraph.new(␤        RakuAST::Doc::Markup.new(␤          letter => "C",␤          opener => "<",␤          closer…»

[13:22] <[Coke]> (is there an better  way to gen that class list? THough that is pretty easy)

[13:27] <[Coke]> ... I can't believe after all those raku/doc commits that I just used "an" wrong. :)

[13:38] <lizmat> there better be an better way  :-)

[13:52] <Geth> ¦ rakudo/main: e007c70816 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[13:52] <Geth> ¦ rakudo/main: RakuAST: fix stringification of E< >

[13:52] <Geth> ¦ rakudo/main: 

[13:52] <Geth> ¦ rakudo/main: Fixes #5618

[13:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e007c70816

[13:53] <[Coke]> lizmat++

[14:33] <Geth> ¦ rakudo/main: 6f687f10f7 | (Elizabeth Mattijsen)++ | 2 files

[14:33] <Geth> ¦ rakudo/main: RakuAST: fix rendering of C< > in pod and rakudoc

[14:33] <Geth> ¦ rakudo/main: 

[14:33] <Geth> ¦ rakudo/main: Fixes #5617

[14:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6f687f10f7

[15:32] <Geth> ¦ rakudo/main: e16400b187 | (Elizabeth Mattijsen)++ | lib/RakuAST/Deparse/Highlight.rakumod

[15:32] <Geth> ¦ rakudo/main: RakuAST: in highlighting, wrap any errors in a Failure

[15:32] <Geth> ¦ rakudo/main: 

[15:32] <Geth> ¦ rakudo/main: As to allow any renderer to inform users of the error in the source

[15:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e16400b187

[15:52] *** finanalyst left
[16:02] *** finanalyst joined
[16:20] *** finanalyst left
