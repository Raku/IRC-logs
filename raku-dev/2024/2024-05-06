[07:48] *** sena_kun joined
[09:05] <Geth> ¦ rakudo/main: 69a335640e | (Elizabeth Mattijsen)++ | 3 files

[09:05] <Geth> ¦ rakudo/main: Add Compiler.flavor

[09:05] <Geth> ¦ rakudo/main: 

[09:05] <Geth> ¦ rakudo/main: https://github.com/rakudo/rakudo/commit/f253d68b85 added support

[09:05] <Geth> ¦ rakudo/main: for #RAKUDO_FLAVOR# in source code that is being handled by the

[09:05] <Geth> ¦ rakudo/main: tools/build/gen-cat.nqp script.

[09:05] <Geth> ¦ rakudo/main: 

[09:05] <Geth> ¦ rakudo/main: This commit slightly tweaks that, by just returning the actual

[09:05] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[09:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/69a335640e

[09:29] <ab5tract> lizmat: not to make more work for you, but maybe it’s a good idea to update the ticket/discussion so that notna and others involved know about how the new approach works

[09:29] <lizmat> yeah, was about to, when NativeCall issue popped up

[09:34] <lizmat> https://github.com/rakudo/rakudo/pull/5553#issuecomment-2095561756

[09:53] <ab5tract> lizmat++

[10:47] <lizmat> greppable6: NativeCall::EXPORT

[10:47] <greppable6> lizmat, 2 lines, 1 module: https://gist.github.com/cafc301392a42028f0827b9611ddfa8e

[13:28] *** MasterDuke joined
[13:54] *** MasterDuke left
[13:58] *** MasterDuke joined
[14:03] <Geth> ¦ rakudo: lizmat self-assigned  Could not find symbol '&EXPORT' in 'NativeCall https://github.com/rakudo/rakudo/issues/5561

[14:32] <ab5tract> m: with -> Int $ {} { *.signature ~~ :(Int) ?? say "yeah" !! say "no" }

[14:32] <camelia> rakudo-moar 69a335640: OUTPUT: «no␤»

[14:34] <ab5tract> it doesn't blow up here like it does in R#5175... but maybe that's not a good thing

[14:34] <linkable6> R#5175 [open]: https://github.com/rakudo/rakudo/issues/5175 [CORE.setting] where-clause in subset does not work with Block/Callable

[14:38] <ab5tract> m: with -> Int $i { $i } { *.(5) == 5 ?? say "yeah" !! say "no" }

[14:38] <camelia> rakudo-moar 69a335640: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Whatever'␤  in block <unit> at <tmp> line 1␤␤»

[14:39] <ab5tract> hmmm

[14:56] <ab5tract> nine: btw I think there might be some issues with the new .raku for WhateverCodes

[14:56] <ab5tract> m: Q| dd *.Int == 5 |.AST.EVAL

[14:56] <camelia> rakudo-moar 69a335640: OUTPUT: «==␤»

[14:57] <ab5tract> m: Q| dd *.signature.raku |.AST.EVAL

[14:57] <camelia> rakudo-moar 69a335640: OUTPUT: «.raku␤»

[14:58] <nine> Could it be that the wrong origin is set on these expressions?

[15:01] <ab5tract> most likely

[15:03] <ab5tract> I don't remember doing any origin tracking when building the whatvercode fortress

[15:03] <ab5tract> ah, tower is the word I was looking for, not fortress :)

[15:03] <ab5tract> m: dd (*.signature)(-> Int $ {})

[15:03] <camelia> rakudo-moar 69a335640: OUTPUT: «:(Int $)␤»

[15:04] <ab5tract> dd (*.signature ~~ :(Int))(-> Int $ {})

[15:04] <ab5tract> m: dd (*.signature ~~ :(Int))(-> Int $ {})

[15:04] <camelia> rakudo-moar 69a335640: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Bool'␤  in block <unit> at <tmp> line 1␤␤»

[15:04] <ab5tract> this is a weird one :(

[15:08] <ab5tract> I mean, the surface level failure is totally clear, but the failure to thunk is a totaly mystery

[16:53] <ab5tract> m: dd (*.Int ~~ 5)(5.5) # Did this ever work?

[16:53] <camelia> rakudo-moar 69a335640: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Bool'␤  in block <unit> at <tmp> line 1␤␤»

[16:54] <ab5tract> bisectable6: (*.Int ~~ 5)(5.5)

[16:54] <bisectable6> ab5tract, Will bisect the whole range automagically because no endpoints were provided, hang tight

[16:54] <bisectable6> ab5tract, Output on all releases: https://gist.github.com/1d570e620450180c42de224c16163c1f

[16:55] <bisectable6> ab5tract, Bisecting by output (old=2017.05 new=2017.06) because on both starting points the exit code is 1

[16:55] <bisectable6> ab5tract, bisect log: https://gist.github.com/63e9ff50b7f04a6375ecf63953f80f03

[16:55] <bisectable6> ab5tract, (2017-05-27) https://github.com/rakudo/rakudo/commit/061d3aa5dd1126902638f4cdcaa5dcf7346a7e5a

[16:55] <bisectable6> ab5tract, Bisecting by output (old=2016.05 new=2016.06) because on both starting points the exit code is 1

[16:55] <bisectable6> ab5tract, bisect log: https://gist.github.com/356e95a8e2233258b269dca6f8315dc1

[16:55] <bisectable6> ab5tract, (2016-06-09) https://github.com/rakudo/rakudo/commit/b6902e5192929a733a37079d5dc414430078bc7d

[16:55] <bisectable6> ab5tract, Output on all releases and bisected commits: https://gist.github.com/faaee76c5158dbfbb275361511f32223

[16:56] * ab5tract wishes one could have private conversations with bisectable6

[17:00] <ab5tract> ok, that's really interesting.. I could have sworn that the thunking would expand and include the infix operator here.

[17:01] <ab5tract> question is: should I work on making it do so? or should I work on catching this syntax so that it doesn't produces something incomprehensible when used in a subset clause?

[17:02] <ab5tract> (currently it produces `Can only use dispatcher-track-attr on a P6opaque`)

[17:03] <ab5tract> s/thunking/"currying"/

[17:05] <lizmat> notable6: weekly

[17:05] <notable6> lizmat, No notes for “weekly”

[17:37] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/05/06/2024-19-behaviorally-constrained/

[18:35] <Geth> ¦ rakudo/main: 335a0b0cee | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[18:35] <Geth> ¦ rakudo/main: Export subs from within NativeCall module

[18:35] <Geth> ¦ rakudo/main: 

[18:35] <Geth> ¦ rakudo/main: Commit 894075587d5d8 moved many exportable subs out of the NativeCall

[18:35] <Geth> ¦ rakudo/main: package.  But apparently, some modules in the ecosystem (NativeLibs

[18:35] <Geth> ¦ rakudo/main: directly, and DBIish indirectly) depend on that (apparently) untested

[18:35] <Geth> ¦ rakudo/main: behaviour.

[18:35] <Geth> ¦ rakudo/main: 

[18:35] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[18:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/335a0b0cee

[19:35] *** MasterDuke left
[20:08] *** MasterDuke joined
[20:10] *** MasterDuke left
[20:27] <ab5tract> wait, why does `(*.Int ~~ 5)(5.5)` *not* work, but `[<h e r e>].grep( *.uc eq "E" )` _does_?

[20:30] <ab5tract> ah, duh... `~~` only curries `Whatever` ...

[20:31] <ab5tract> nine, lizmat: do either of you remember why that is the case?

[20:46] <gfldex> ab5tract: Sounds like an oversight to me. This would be the only case where a { .foo } is not equivalent to *.foo .

[20:47] <ab5tract> It's not an oversight inasmuch as the internals explicitly mark `~~` as only currying `Whatever`

[20:48] <ab5tract> ∘ and o have the same exception

[20:48] <gfldex> What could very well be an mere workaround to get v6.c out of the door.

[20:50] <ab5tract> Maybe

[20:50] <ab5tract> the fact that make spectest isn't completing when changing it to curry both is not a hopeful sign, however

[20:51] <ab5tract> it also breaks 8 tests in make test

[20:52] <ab5tract> hopefully someone who remembers more details can chime in

[20:53] <ab5tract> it breaks *a lot* of spectest

[20:53] <nine> Different infixes have different currying behavior

[20:54] <nine> Currying Whatever vs. currying WhateverCode vs. both is clearly on purpose

[20:54] <nine> NativeCall compiles again and with that we're at 116 make test files passing

[20:54] <ab5tract> nine: nice work!

[20:55] <gfldex> That's a fairly big ENODOC then.

[20:56] <ab5tract> https://docs.raku.org/language/traps#Smartmatch_and_WhateverCode

[20:57] <gfldex> I'm looking at https://docs.raku.org/type/Whatever#index-entry-Whatever-currying

[20:57] <ab5tract> looks like there is a 3rd option

[20:59] <gfldex> Also, it is hardly surprising that loads of spectests explode when you change the semantics of ~~ .

[20:59] <ab5tract> No, it isn't surprising. 

[21:01] <ab5tract> It just definitively demonstrates that it is not an oversight

[21:07] <ab5tract> I think the best solution is to add a worry when `~~` has a WhateverCode on its LHS and to update the docs

[21:08] <ab5tract> but even adding that worry might be too heavy a change

[21:08] <gfldex> Agreed, anthing else if the v6.f or later anyways.

[21:08] <gfldex> s/if the/is for/

[21:24] <lizmat> ab5tract: fwiw, this was decided before my active involvement, aafaik

[21:24] <ab5tract> gotcha, thanks 

[21:25] <ab5tract> the explanation on the language traps docs actually explains it pretty succinctly

[21:25] <ab5tract> gfldex: can I trouble you to take care of the docs? I'll get a PR for the worry together

[21:29] <gfldex> ab5tract: I will file the ENODOC after the worry is in. I will need examples to make clear what the problem is.

[21:32] *** MasterDuke joined
[21:33] <ab5tract> as I've gotten from the traps doc explanation, the problem is: `*.method ~~ $thing` desugars to `$thing.ACCEPTS(*.method)` aka `$thing.ACCEPTS(WhateverCode)` (or Block, in the docs)

[21:39] <ab5tract> worry is working in RakuAST

[21:44] <Geth> ¦ rakudo/r5175: 0d0ed1a411 | ab5tract++ | src/Raku/ast/expressions.rakumod

[21:44] <Geth> ¦ rakudo/r5175: Add worry for WhateverCode on LHS of ~~

[21:44] <Geth> ¦ rakudo/r5175: review: https://github.com/rakudo/rakudo/commit/0d0ed1a411

[21:45] <ab5tract> man, I almost forgot how wonderful it is to hack in RakuAST :)

[21:46] <ab5tract> will add a custom exception type for this after getting some confirmation that this approach is agreeable

[21:46] <ab5tract> but for now: good night all o/

[21:58] <Geth> ¦ problem-solving: bbkr assigned to samcv Issue Add `nomark` for striping accents, `samemark` is counterintuitive and slow for that purpose. https://github.com/Raku/problem-solving/issues/427

[23:34] *** sena_kun left
