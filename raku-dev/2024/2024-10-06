[06:36] <[Tux]> Rakudo v2024.09-46-g2e3050325 (v6.d) on MoarVM 2024.09-5-g174aa1ba9

[06:36] <[Tux]> csv-test-xs-20      0.141 -  0.144

[06:36] <[Tux]> csv-ip5xs           0.260 -  0.261

[06:36] <[Tux]> test-t --race       0.267 -  0.271

[06:36] <[Tux]> test-t              0.401 -  0.402

[06:36] <[Tux]> csv-ip5xs-20        1.113 -  1.115

[06:36] <[Tux]> test-t-20 --race    1.174 -  1.190

[06:36] <[Tux]> csv-parser          1.519 -  1.541

[06:36] <[Tux]> test                1.835 -  1.844

[06:36] <[Tux]> test-t-20           4.892 -  4.913

[06:36] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[09:59] *** sena_kun joined
[10:04] *** lizmat_ joined
[10:05] <lizmat> .

[10:06] *** lizmat_ left
[10:14] *** lizmat_ joined
[10:15] *** lizmat_ left
[11:39] <lizmat> m: my $a := (1,my $ = 2,3); my $b := $a.clone; $b[1] = 42; dd $a, $b        # meh, entanglement of cloned lists, an issue ?

[11:39] <camelia> rakudo-moar 1e0025c30: OUTPUT: «(1, 42, 3)␤(1, 42, 3)␤»

[12:02] <Geth> ¦ roast: bb8de71453 | (Elizabeth Mattijsen)++ | 10 files

[12:02] <Geth> ¦ roast: Add tests for #2167

[12:02] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/bb8de71453

[12:05] <timo> we don't do deep cloning in the .clone method, this should be expected

[12:06] <timo> with arrays it's more of A Thing since array has the property of putting stuff into scalars for you, so there you might perhaps expect cloning to give you fresh scalars? though i'd still argue you'd want to use list assignment for that instead of cloning

[12:06] <lizmat> m: my @a =1,2,3; my @b := @a.clone; @b[1] = 42; dd @a, @b

[12:06] <camelia> rakudo-moar 1e0025c30: OUTPUT: «[1, 2, 3]␤[1, 42, 3]␤»

[12:07] <lizmat> also: https://github.com/rakudo/rakudo/issues/1997

[12:08] <timo> interesting. yeah i'd say we should look into making Hash.clone behave similarly. that feels like a change that can break user code though, so may want to go behind 6.e?

[12:09] <timo> if we make cloning give fresh scalars, do we want an "extra-shallow" cloning that binds the scalars for the user?

[12:09] <timo> m: my @a = 1,2,3; my @b := @a.clone; @b[$_] := @a[$_] for @a.keys; @b[1] = 42; dd :@a, :@b

[12:09] <camelia> rakudo-moar 1e0025c30: OUTPUT: «:a([1, 42, 3])␤:b([1, 42, 3])␤»

[12:10] <timo> you know, it would be pretty dope if we gathered coverage info in our blin runs

[12:11] <timo> it's not so easy to grep for "does Hash.clone ever end up getting called" with just string search

[12:11] <timo> but if we have line-based or even just sub-based coverage info from the tests of modules, that'd be a different story

[12:17] <timo> coverable6: my @a = 1,2,3; my @b := @a.clone; @b[$_] := @a[$_] for @a.keys; @b[1] = 42; dd :@a, :@b

[12:17] <coverable6> timo, and I oop! Backtrace: https://gist.github.com/ee755fd7ab196590558afca2a1648246

[12:18] <ab5tract> Yeah that would definitely be pretty killer

[12:18] <timo> coverable6: 2024.08 my @a = 1,2,3; my @b := @a.clone; @b[$_] := @a[$_] for @a.keys; @b[1] = 42; dd :@a, :@b

[12:18] <coverable6> timo, https://gist.github.com/6450119b473afe9e24c31876fea7e0a3

[12:19] <timo> ah, i think "SETTING::" is probably not the right default any more

[12:20] <timo> coverable6: 2024.08 grep=SETTING my @a = 1,2,3; my @b := @a.clone; @b[$_] := @a[$_] for @a.keys; @b[1] = 42; dd :@a, :@b

[12:20] <coverable6> timo, https://gist.github.com/87a1d8f1ed74b81e777fa939b263d5be

[12:20] <timo> coverable6: 2024.08 grep=. my @a = 1,2,3; my @b := @a.clone; @b[$_] := @a[$_] for @a.keys; @b[1] = 42; dd :@a, :@b

[12:20] <coverable6> timo, https://gist.github.com/2f4afdcaf9f68bafecd9f1b00ed81ddc

[12:20] <timo> no, that doesn't seem to be it

[12:21] <ab5tract> timo: not to reopen fresh wounds, but what was the end result of the windows compilation stuff again?

[12:24] <timo> so, i've been able to verify with the help of my windows-using friend that the crash happens when we try to longjmp, which on newer versions of MSVC (or the windows c library or something else that changed) uses SEH aka Structured Exception Handling (mostly unrelated to things like c++ exceptions) in order to unwind the stack, and when there's a frame from our jit on the stack that has to be

[12:24] <timo> unwound, it violently asplodes because we don't provide the data used by SEH to do the unwinding

[12:25] <ab5tract> Ahhh

[12:26] <timo> fortunately, our jit is pretty simple in that regard. the C stack always looks the same, as long as we're not in a jitted frame ta the  very top of the stack, which if we're calling into something that longjmps we are not, kind of by definition

[12:27] <timo> fixing this is now essentially a SMOP for someone with a correctly shaped tuit, though it would be great if someone who already did all this research wrote this down for someone to pick up effectively (me. i'm talking about me)

[12:32] <timo> what worries me more than the windows issue is how moarvm crashes on 32bit powerpc and that other arch i forgot which one it was

[12:33] <timo> because that one i can't reproduce, and even though there was definitely a bug there that i found and fixed, that didn't help yet

[12:34] <timo> TIL colrm(1)

[12:34] <timo> > The colrm command appeared in 3.0BSD.

[12:34] <timo> this is *old*

[12:37] <timo> ok i'm not sure why coverable doesn't output any lines; when i run rakudo with MVM_LINE_COVERAGE i definitely get a file that looks correct, then i run grep with "SETTING" and the flags that coverable uses and the output looks good, then the sort command also looks good, and finally the colrm command also looks good

[12:38] <timo> of course it does a bunch more conversion before it actually lands in the table, so i guess that's where the problem lies?

[12:41] <timo> i need to do more fun stuff with the whateverables

[13:12] <Geth> ¦ rakudo/main: 391e3b507d | (Elizabeth Mattijsen)++ | src/core.c/Exception.rakumod

[13:12] <Geth> ¦ rakudo/main: Add "quit" as an obsolete alternative to "exit"

[13:12] <Geth> ¦ rakudo/main: 

[13:12] <Geth> ¦ rakudo/main: And make the lookup hash compile time.

[13:12] <Geth> ¦ rakudo/main: 

[13:12] <Geth> ¦ rakudo/main: In response to https://github.com/rakudo/rakudo/issues/2214 so that

[13:12] <Geth> ¦ rakudo/main: people in the REPL get the suggestion to use "exit" instead, as per

[13:12] <Geth> ¦ rakudo/main: AlexDaniel++ suggestion

[13:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/391e3b507d

[13:25] <Geth> ¦ roast: b79213fe17 | (Elizabeth Mattijsen)++ | S32-temporal/DateTime-Instant-Duration.t

[13:25] <Geth> ¦ roast: Add test for #2221

[13:25] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b79213fe17

[14:21] <timo> i don't think i understand why it's exploding with the dependency error

[14:26] <timo> i think i was looking wrong, and i was accidentally using a package that was not the one i had just built

[14:51] *** kjp_ left
[15:29] <ugexe> imo having quit as an alias to exit is not ideal 

[15:30] <ugexe> We are further overloading what “quit” means, as such a method is already used for supplies 

[15:35] <ugexe> The OP even appears to have been convinced their idea was less ideal than having it. That seems to be the general consensus I got from the issue at least 

[15:36] <ugexe> than not having it ^

[15:36] <ugexe> https://github.com/rakudo/rakudo/issues/2214#issuecomment-413000196

[16:18] <timo> ok i have the powerpc 32bit nativecall test failure reproduced locally at least

[16:29] <timo> ehehe. when i change the value that the C code writes to the variable to something with all bytes set to some value, the value spills over into the next variable

[16:38] <timo> wtf, i can't use gdb on this? >_>

[16:41] <timo> oh, ok, i need to use the qemu gdbstub for this purpose

[16:51] <lizmat> m: quit

[16:51] <camelia> rakudo-moar 391e3b507: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    quit used at line 1 (in Raku please use 'exit' instead)␤␤»

[16:52] <lizmat> ugexe: there is no sub called "quit", there's just extra feedback referring to 'exit' 

[16:52] <lizmat> should you happen to want to call a sub called "quit" and it doesn't exist

[17:37] <ugexe> ah ok. i wonder why there isn't a quit() similar to done()

[17:48] *** vrurg_ joined
[17:50] *** vrurg left
[17:57] <Geth> ¦ rakudo/main: 7faddfd2f9 | (Elizabeth Mattijsen)++ | 2 files

[17:57] <Geth> ¦ rakudo/main: Require a mutable container for .substr-rw

[17:57] <Geth> ¦ rakudo/main: 

[17:57] <Geth> ¦ rakudo/main: and return a Failure instead of a Proxy if there's no mutable

[17:57] <Geth> ¦ rakudo/main: container.

[17:57] <Geth> ¦ rakudo/main: 

[17:57] <Geth> ¦ rakudo/main: Fixes #2304

[17:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7faddfd2f9

[21:06] <Geth> ¦ rakudo/main: 91c9302979 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.rakumod

[21:06] <Geth> ¦ rakudo/main: Allow cool values in .trans specification

[21:06] <Geth> ¦ rakudo/main: 

[21:06] <Geth> ¦ rakudo/main: Fixes #2305

[21:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/91c9302979

[21:09] <Geth> ¦ roast: 1f99a76372 | (Elizabeth Mattijsen)++ | S05-transliteration/trans.t

[21:09] <Geth> ¦ roast: Add test for #2305

[21:09] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/1f99a76372

[21:35] <Geth> ¦ rakudo/main: 1660d96f21 | (Elizabeth Mattijsen)++ | src/core.c/Int.rakumod

[21:35] <Geth> ¦ rakudo/main: Produce correct result for atomicint.Range

[21:35] <Geth> ¦ rakudo/main: 

[21:35] <Geth> ¦ rakudo/main: Fixes #2317

[21:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1660d96f21

[21:35] <Geth> ¦ roast: afeb5b38cd | (Elizabeth Mattijsen)++ | S17-lowlevel/atomic.t

[21:35] <Geth> ¦ roast: Add test for #2317

[21:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/afeb5b38cd

[21:38] *** kjp joined
[21:59] *** sena_kun left
[22:01] *** kjp left
[22:01] *** kjp joined
[22:13] <timo> can we replace t/spec/S32-io/socket-test.bin with something else?

[22:21] <timo> lizmat++ # big number of tickets addressed

[22:22] <timo> lintian be like "hey why do you have a prebuilt binary in your source package? and why is its sections chopped off?

[23:09] <[Coke]> (coverage in Blin) because blin is not slow enough! :)

