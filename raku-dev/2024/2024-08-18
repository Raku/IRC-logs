[01:22] *** japhb joined
[08:26] *** sena_kun joined
[09:51] <Geth> ¦ rakudo/main: ec381c7002 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[09:51] <Geth> ¦ rakudo/main: RakuAST: fix `let` not restoring values on unsuccessful block exit

[09:51] <Geth> ¦ rakudo/main: 

[09:51] <Geth> ¦ rakudo/main: Fixes: my $a = 42; { let $a = 23; Mu }; say $a

[09:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ec381c7002

[09:51] <Geth> ¦ rakudo/main: 37b5aeb891 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[09:51] <Geth> ¦ rakudo/main: RakuAST: fix `let` restoring values even on successful block exit

[09:51] <Geth> ¦ rakudo/main: 

[09:51] <Geth> ¦ rakudo/main: If a code block contains let statements, we need to keep its return

[09:51] <Geth> ¦ rakudo/main: value even if the block is in sink context or the routine has a --> Nil

[09:51] <Geth> ¦ rakudo/main: signature. Otherwise the UNDO phaser won't know whether to undo

[09:51] <Geth> ¦ rakudo/main: anything.

[09:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/37b5aeb891

[11:05] <Geth> ¦ rakudo/main: 1849fc8b4a | (Stefan Seifert)++ | 4 files

[11:05] <Geth> ¦ rakudo/main: RakuAST: stub TEMP phaser support

[11:05] <Geth> ¦ rakudo/main: 

[11:05] <Geth> ¦ rakudo/main: This is about as far as the old frontend ever got.

[11:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1849fc8b4a

[11:07] <nine> m: use Test; my $x = 2; my $y := $x; my $x = 3; is $y, 3

[11:07] <camelia> rakudo-moar 37b5aeb89: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$x'.␤    at <tmp>:1␤    ------> use Test; my $x = 2; my $y := $x; my $x⏏ = 3; is $y, 3␤ok 1 - ␤»

[11:09] <nine> m: my $x; my $x;

[11:09] <camelia> rakudo-moar 37b5aeb89: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$x'.␤    at <tmp>:1␤    ------> my $x; my $x⏏;␤»

[11:09] <nine> Why on earth did we not make this a hard error?

[13:15] <Geth> ¦ rakudo/main: c1f424a5e5 | (Stefan Seifert)++ | 3 files

[13:15] <Geth> ¦ rakudo/main: RakuAST: fix compilation failing on duplicate variable declarations

[13:15] <Geth> ¦ rakudo/main: 

[13:15] <Geth> ¦ rakudo/main: Apparently it's ok to declare the same variable multiple times and we

[13:15] <Geth> ¦ rakudo/main: only warn about it. However the QAST compiler is not so lenient, so we

[13:15] <Geth> ¦ rakudo/main: need to avoid ading the same QAST variable declaration.

[13:15] <Geth> ¦ rakudo/main: 

[13:15] <Geth> ¦ rakudo/main: Fixes: my $x; my $x;

[13:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c1f424a5e5

[13:15] <Geth> ¦ rakudo/main: 8bbd71044b | (Stefan Seifert)++ | 3 files

[13:15] <Geth> ¦ rakudo/main: RakuAST: suggest declaring a multi on redeclaration of routines

[13:15] <Geth> ¦ rakudo/main: 

[13:15] <Geth> ¦ rakudo/main: Gets the correct error message for: sub foo() { }; sub foo() { }

[13:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8bbd71044b

[13:15] <nine> That's 1116 now

[14:10] <Geth> ¦ rakudo/main: d0be5d1be1 | (Stefan Seifert)++ | 2 files

[14:10] <Geth> ¦ rakudo/main: RakuAST: prohibit usage of placesholders in routines with explicit signature

[14:10] <Geth> ¦ rakudo/main: 

[14:10] <Geth> ¦ rakudo/main: Fixes sub foo() { $^x } # to fail appropriately

[14:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d0be5d1be1

[14:10] <nine> And 1117

[14:16] <nine> If my LibreOffice foo is correct, I'll hit the finish line in 14 weeks, that's late November

[15:13] <nine> m: { constant $foo = 1 }; { constant $foo = 2 }; say GLOBAL::<$foo>

[15:13] <camelia> rakudo-moar d0be5d1be: OUTPUT: «2␤»

[15:14] <nine> Currently the RakuAST frontend complains about this re-declaration of an our-scoped constant in the same package. I'd argue that's a sensible position to hold. Right? If yes, I'll just fix the spectest that does this by accident.

[16:00] <ab5tract> nine: I 100% endorse such an adjustment

[16:02] <ab5tract> Sometimes the phrase “times were different back then” really do reasonably apply, and whatever logic was behind setting that into spec is no longer useful to us now

[16:02] <ab5tract> *does

[16:04] <ab5tract> Oh, just re-read and noticed the “by accident” .. that’s miles ahead of this being put to writ on purpose

[17:36] <MasterDuke> nine: is there a spectest that explicitly allows redeclaration with only a warning? i'd be happy to make that a compile error

[17:38] <nine> MasterDuke: S04-declarations/constant.t just uses the same names "foo" and "bar for several more or less unrelated tests.

[17:48] <Geth> ¦ roast: fb3d3a08f4 | (Stefan Seifert)++ | S04-declarations/constant.t

[17:48] <Geth> ¦ roast: Skip tests for NYI constants as type constraints

[17:48] <Geth> ¦ roast: 

[17:48] <Geth> ¦ roast: Support for using constants as type constraints in variable definitionsa

[17:48] <Geth> ¦ roast: has never been implemented and these tests have only "worked" because

[17:48] <Geth> ¦ roast: the compiler didn't look too closely and because the tests for type

[17:48] <Geth> ¦ roast: constraints did not ask why the code would die. A different compiler

[17:48] <Geth> ¦ roast: (frontend) would stumble over these without actually having fewer

[17:48] <Geth> ¦ roast: features.

[17:48] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/fb3d3a08f4

[17:48] <Geth> ¦ roast: 172634a3cd | (Stefan Seifert)++ | 4 files

[17:48] <Geth> ¦ roast: Fix redeclaration of our-scoped constants in tests

[17:48] <Geth> ¦ roast: 

[17:48] <Geth> ¦ roast: Older compilers didn't notice that these tests were re-declaring the

[17:48] <Geth> ¦ roast: same our-scoped constants over and over. Newer compilers rightfully

[17:48] <Geth> ¦ roast: complain, so fix the tests.

[17:48] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/172634a3cd

[17:49] <nine> MasterDuke, ab5tract ^^^

[17:49] <Geth> ¦ rakudo/main: 5 commits pushed by (Stefan Seifert)++

[17:49] <Geth> ¦ rakudo/main: 7114c6c1bf | RakuAST: support declaring operator aliases as constants

[17:49] <Geth> ¦ rakudo/main: 5fc6547591 | RakuAST: coerce constants to their sigil type

[17:49] <Geth> ¦ rakudo/main: 331d5ea232 | RakuAST: put our scoped constants into their package

[17:49] <Geth> ¦ rakudo/main: ba94f702da | RakuAST: throw correct exception type on missing constant initializer

[17:49] <Geth> ¦ rakudo/main: 5cca0b4fca | RakuAST: fix deparse and .raku on routines without explicit signature

[17:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/d0be5d1be147...5cca0b4fca46

[17:49] <nine> 1118

[17:50] <MasterDuke> nice

[17:51] <nine> Our spectest authors clearly did not notice that constants are our scoped by default

[19:11] <lizmat> that feels like why t/spec/S32-array/splice.t is now consistently failing?

[19:11] <lizmat> already have an 'our constant @tests' in the package ?

[19:25] <nine> yes

[19:33] <Geth> ¦ roast: b9bb4f6bf9 | (Elizabeth Mattijsen)++ | S32-array/splice.t

[19:33] <Geth> ¦ roast: Fix test

[19:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b9bb4f6bf9

[19:46] <lizmat> what percentage were we thinking about again to start thinking about the actual language release ?

[22:08] *** sena_kun left
