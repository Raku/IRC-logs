[03:00] <releasable6> Next release in ≈6 days and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:58] *** sena_kun joined
[08:09] *** MasterDuke left
[08:35] *** sena_kun left
[11:21] *** lizmat_ joined
[11:24] *** lizmat left
[11:25] *** lizmat_ left
[11:25] *** lizmat joined
[11:32] <lizmat> `ok, finally able to look at https://github.com/lizmat/App-Rak/issues/60#issuecomment-2303793077

[11:34] <lizmat> the stack trace is *really* weird, as the only hash involved in the .^find_method call, is the *%_ in the signature of Perl6::Metamodel::MROBasedMethodDispatch.find_method

[11:35] <lizmat> so is *%_ or %_ somehow global?    nine any idea?

[11:35] <lizmat> guess I'll need to look at the signature binder to find out

[11:38] <lizmat> and the NQP one

[11:41] <nine> certainly not

[11:41] *** lizmat_ joined
[11:42] *** lizmat_ left
[11:42] *** lizmat_ joined
[11:44] *** lizmat left
[11:44] *** lizmat_ left
[11:44] *** lizmat joined
[13:09] *** finanalyst joined
[13:12] <ab5tract> lizmat: is it locally reproducible? I wonder if this could be a spesh issue..

[13:12] <lizmat> no reproduction so far

[13:15] <timo> there are barely any uses of MVM_str_hash_fetch_nocheck in moar

[13:18] <timo> MVM_sc_find_by_handle uses it

[13:18] <timo> oh, ok, MVM_str_hash_fetch calls into MVM_str_hash_nocheck

[13:18] <timo> that probably explains it then

[14:07] *** finanalyst left
[14:59] <ab5tract> So a race condition then?

[15:00] <lizmat> yes, but a weird one: it's complaining about hash accesses, but the only hash I see there is *%_ in the signature

[15:04] <ab5tract> Isn’t there a hash underneath the match object?

[15:05] <lizmat> hmmmm

[15:06] <lizmat> actually, there can be many   hmmm  good point

[15:49] <Geth> ¦ rakudo/main: fd9cd0a5c8 | (Elizabeth Mattijsen)++ | 2 files

[15:49] <Geth> ¦ rakudo/main: RakuAST: fix .rak / deparsing issue with "is type"

[15:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fd9cd0a5c8

[16:06] <Geth> ¦ rakudo/main: c1520df7cd | (Elizabeth Mattijsen)++ | lib/RakuAST/Deparse/Highlight.rakumod

[16:06] <Geth> ¦ rakudo/main: RakuAST: make highlighting more resilient

[16:06] <Geth> ¦ rakudo/main: 

[16:06] <Geth> ¦ rakudo/main: Basically, look at any error seen, and attempt to work around that

[16:06] <Geth> ¦ rakudo/main: by adapting the source, ASTing that, and then remove the additional

[16:06] <Geth> ¦ rakudo/main: AST objects before deparsing again.  Handled are:

[16:06] <Geth> ¦ rakudo/main: 

[16:06] <Geth> ¦ rakudo/main: - undefined variables (by prefixing "no strict")

[16:06] <Geth> ¦ rakudo/main: - undefined types / classes (by prefixing "my class foo { }")

[16:06] <Geth> ¦ rakudo/main: - undefined subroutines (by prefixing "sub foo (|) { }")

[16:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c1520df7cd

[16:07] <timo> a c-level backtrace might be interesting for the oops in question

[16:07] <timo> hey i wonder how much work it is to get libunwind into your program ...

[16:36] <timo> now how do i oops moar most easily ...

[16:46] <[Coke]> heh. similar tricks to the "does this code compile" script in raku/doc

[16:50] <[Coke]> we hardcoded a bunch of preambles for code - if we could adapt the dynamic retries you're doing here, could reduce a lot of misc crap from raku/doc

[17:15] <lizmat> [Coke]: where should I look ?

[17:25] <timo> https://gist.github.com/timo/34e867145227376375ba6519d792eeeb this is what it could look like

[17:29] <lizmat> looks nice

[17:35] *** sena_kun joined
[17:40] <lizmat> [Coke]: xt/examples-compilation.rakutest I presume

[17:40] <lizmat> ?

[17:47] <[Coke]> sorry, had stepped away, yes.

[17:48] <lizmat> ok I looked at that... I don't immediately see cases that I could cover in the same manner

[17:48] <lizmat> e.g. this thing about WHAT ?

[17:49] <lizmat> and why multi sub should be a problem?

[17:50] <[Coke]> Sorry, wasn't suggesting it was stuff you could adapt, I'm saying I can adapt what you just did there to make my code less verbose.

[17:50] <[Coke]> was basically  just saying "Neat!". :)

[17:50] <lizmat> ah, ok... :-)   

[17:51] <lizmat> it should make finanalyst's work easier

[17:52] <Geth> ¦ rakudo: lizmat self-assigned [Rakuast highlighting] Post comments fail, pre comments highlight https://github.com/rakudo/rakudo/issues/5629

[17:52] <Geth> ¦ rakudo: lizmat self-assigned [Rakuast-highlighting] Highlighting of undeclared sub https://github.com/rakudo/rakudo/issues/5628

[18:06] <lizmat> bisectable6: /./; "no worries; if False \{\nclass :: \{\n;\n/a b/\n\n}}".EVAL;

[18:06] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[18:07] <bisectable6> lizmat, Output on all releases: https://gist.github.com/ac180c677c9cdd526ada2aa53bf287cd

[18:07] <bisectable6> lizmat, Bisecting by output (old=2018.12 new=2019.03.1) because on both starting points the exit code is 0

[18:07] <[Coke]> heh, was just about to do that. :)

[18:08] <bisectable6> lizmat, bisect log: https://gist.github.com/95e518c72abb5948de0b6469b32ee9fc

[18:08] <bisectable6> lizmat, (2019-01-14) https://github.com/rakudo/rakudo/commit/1c101a04f92ed199eec62cc31a6b2ffba874a8cd

[18:08] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/768419cc92632d1d11077996e00c6daa

[18:08] <lizmat> looks like it got fixed  -)

[18:08] <[Coke]> Nice. I'll close the ticket.

[18:09] <[Coke]> lizmat++ nine++

[18:31] <Geth> ¦ rakudo/main: 5c532a3e20 | (Elizabeth Mattijsen)++ | lib/RakuAST/Deparse/Highlight.rakumod

[18:31] <Geth> ¦ rakudo/main: RakuAST: fix various issues with highlighting

[18:31] <Geth> ¦ rakudo/main: 

[18:31] <Geth> ¦ rakudo/main: - fix comment highlighting #5629

[18:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5c532a3e20

[18:44] *** librasteve_ joined
[19:07] <timo> got libunwind hooked up to also understand how to unwind a moar jit frame (same gist was updated)

[19:42] <[Tux]> Rakudo v2024.07-211-g5c532a3e2 (v6.d) on MoarVM 2024.07-13-g5e52422f4

[19:42] <[Tux]> csv-test-xs-20      0.142 -  0.143

[19:42] <[Tux]> csv-ip5xs           0.257 -  0.257

[19:42] <[Tux]> test-t --race       0.273 -  0.276

[19:42] <[Tux]> test-t              0.403 -  0.417

[19:43] <[Tux]> csv-ip5xs-20        1.117 -  1.161

[19:43] <[Tux]> test-t-20 --race    1.178 -  1.232

[19:43] <[Tux]> csv-parser          1.517 -  1.528

[19:43] <[Tux]> test                1.851 -  1.864

[19:43] <[Tux]> test-t-20           4.946 -  4.974

[19:43] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[20:51] <timo> updated the libunwind gist: oops and panic now show a bit of bytecode around the current instruction on the topmost stack frame if it's not a jit frame

[21:23] *** sena_kun left
[22:54] *** librasteve_ left
[23:00] <releasable6> Next release in ≈5 days and ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:43] *** MasterDuke joined
[23:44] <MasterDuke> timo: i really like that libunwind output. could we easily add it as a debug option to moarvm?

