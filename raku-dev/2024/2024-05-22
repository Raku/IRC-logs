[00:57] <[Coke]> why is it .add_phaser?

[00:57] <[Coke]> should it be changed to add-phaser at some point?

[01:01] *** Voldenet left
[01:06] *** Voldenet joined
[05:02] *** vrurg_ joined
[05:03] *** vrurg left
[05:24] *** vrurg_ left
[05:25] *** vrurg joined
[08:19] *** sena_kun joined
[08:34] *** sena_kun left
[08:43] *** finanalyst joined
[09:01] *** kjp_ joined
[09:01] *** RakuIRCLogger left
[09:01] *** kjp left
[09:32] <lizmat> [Coke]: that touches on a more general thing: in the Raku grammar I have tried to use kebab-case where possible.  However, some of it goes back to NQP

[09:32] <lizmat> and thus back to snake_case

[09:34] <lizmat> also add_phaser is not tested anywhere, and could thus be considered to be an implementation-detail

[10:44] <lizmat> so I've run into something that's really puzzling, at least to me:

[10:44] <lizmat> m: use Telemetry; say (^Inf).grep(*.is-prime).skip(999999).head; say T<cpu-user>/1000000

[10:44] <camelia> rakudo-moar 22932c27a: OUTPUT: «15485863␤5.405457␤»

[10:45] <lizmat> iow, give me the millionth prime number

[10:45] <lizmat> in the single threaded case, this takes 5.4 CPU seconds

[10:45] <lizmat> if we hyper that:

[10:46] <lizmat> m: use Telemetry; say (^Inf).hyper.grep(*.is-prime).skip(999999).head; say T<cpu-user>/1000000

[10:46] <camelia> rakudo-moar 22932c27a: OUTPUT: «15485863␤21.335601␤»

[10:47] <lizmat> it takes quite a few CPU seconds more

[10:47] <lizmat> however, if we set a bigger batch size (larger than the 64 by default):

[10:47] <lizmat> m: use Telemetry; say (^Inf).hyper(batch => 1024).grep(*.is-prime).skip(999999).head; say T<cpu-user>/1000000

[10:47] <camelia> rakudo-moar 22932c27a: OUTPUT: «15485863␤3.584926␤»

[10:47] <lizmat> it takes a lot less CPU!

[10:48] <lizmat> but the weird thing (to me at least) is that it takes *less* CPU than the single threaded case!

[10:49] <lizmat> m: say 3.584926 / 5.405457

[10:49] <camelia> rakudo-moar 22932c27a: OUTPUT: «0.66320498␤»

[10:50] <lizmat> on my M1 the difference is even more pronounced 0.52

[10:55] <lizmat> so what causes this difference?

[11:07] <lizmat> m: use Telemetry; use nqp; my $i = -1; nqp::while(++$i < 15485863, nqp::isprime_I(nqp::unbox_i($i))); say T<cpu-user>/1000000

[11:07] <camelia> rakudo-moar 22932c27a: OUTPUT: «1.960859␤»

[11:07] <lizmat> so that would be the NQP minimum CPU usage

[11:34] <Geth> ¦ rakudo/main: 097b50cd0d | (Elizabeth Mattijsen)++ | t/12-rakuast/fixed-in-rakuast.rakutest

[11:34] <Geth> ¦ rakudo/main: Properly mark failing test as todo

[11:34] <Geth> ¦ rakudo/main: 

[11:34] <Geth> ¦ rakudo/main: Apparently "make test" files are not fudged

[11:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/097b50cd0d

[12:50] *** lizmat left
[13:04] *** lizmat joined
[13:13] <Geth> ¦ rakudo/main: 2e4bc48a1b | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[13:13] <Geth> ¦ rakudo/main: Micro-optimize basic iterators

[13:13] <Geth> ¦ rakudo/main: 

[13:13] <Geth> ¦ rakudo/main: .push-all / sink-all specifically, by creating lexical shortcuts to

[13:13] <Geth> ¦ rakudo/main: static attributes, so that these can be lowered into locals in the

[13:13] <Geth> ¦ rakudo/main: hot code paths.

[13:13] <Geth> ¦ rakudo/main: 

[13:13] <Geth> ¦ rakudo/main: Makes:

[13:13] <Geth> ¦ rakudo/main: 

[13:13] <Geth> ¦ rakudo/main:   for ^10000 { (^1000).map(* + 1).iterator.push-all(IterationBuffer.CREATE) }

[13:13] <Geth> ¦ rakudo/main: 

[13:13] <Geth> ¦ rakudo/main: about 1.5% faster

[13:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2e4bc48a1b

[13:47] <lizmat> looks like the problem is in grep:

[13:48] <lizmat> m: use Telemetry; say (^Inf).map({ $_ if .is-prime}).skip(999999).head; say T<cpu-user>/1000000

[13:48] <camelia> rakudo-moar 2e4bc48a1: OUTPUT: «15485863␤2.240862␤»

[13:48] <lizmat> m: use Telemetry; say (^Inf).grep(*.is-prime).skip(999999).head; say T<cpu-user>/1000000

[13:48] <camelia> rakudo-moar 2e4bc48a1: OUTPUT: «15485863␤5.768551␤»

[13:49] <lizmat> consequently with the proper hyper:

[13:50] <lizmat> m: use Telemetry; say (^Inf).hyper(batch => 2048).map({ $_ if .is-prime}).skip(999999).head; say T<cpu-user>/1000000

[13:50] <camelia> rakudo-moar 2e4bc48a1: OUTPUT: «15485863␤3.76585␤»

[14:04] <Geth> ¦ rakudo/main: 72b46fe292 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[14:04] <Geth> ¦ rakudo/main: Some more lexical shortcuts

[14:04] <Geth> ¦ rakudo/main: 

[14:04] <Geth> ¦ rakudo/main: These were missed in 2e4bc48a1b

[14:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/72b46fe292

[14:04] * lizmat refrains from being drawn into the grep vortex for now

[14:10] <[Coke]> (add_phaser not tested) so not spec, so not part of docs. Excellent :)

[14:10] <lizmat> greppable6: add_phaser

[14:10] <greppable6> lizmat, 11 lines, 5 modules: https://gist.github.com/1eec5b78ac2819b8929076943af07936

[14:12] <lizmat> mostly the usual suspects :-)

[14:15] <[Coke]> ... weird, I no longer see the add_phaser ticket. :|

[14:27] *** vrurg_ joined
[14:27] *** vrurg left
[15:31] *** nine left
[15:31] *** nine joined
[17:25] *** sena_kun joined
[18:36] <Geth> ¦ rakudo/main: 6846c49ed1 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[18:36] <Geth> ¦ rakudo/main: Adding some more lexical shortcuts

[18:36] <Geth> ¦ rakudo/main: 

[18:36] <Geth> ¦ rakudo/main: In the grep hierarchy of push-alls

[18:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6846c49ed1

[19:14] <Geth> ¦ rakudo/r1378: 16981ad9ba | ab5tract++ | 2 files

[19:14] <Geth> ¦ rakudo/r1378: Provide better feedback for ambiguous adverb usage

[19:14] <Geth> ¦ rakudo/r1378: 

[19:14] <Geth> ¦ rakudo/r1378: This fixes an LTA situation:

[19:14] <Geth> ¦ rakudo/r1378: 

[19:14] <Geth> ¦ rakudo/r1378:     > my %h = :1k; say 1 ~ %h<k>:exists ~ 1

[19:14] <Geth> ¦ rakudo/r1378:     ===SORRY!===

[19:14] <Geth> ¦ rakudo/r1378:     MVMArray: Can't pop from an empty array

[19:14] <Geth> ¦ rakudo/r1378: <…commit message has 10 more lines…>

[19:14] <Geth> ¦ rakudo/r1378: review: https://github.com/rakudo/rakudo/commit/16981ad9ba

[19:20] <Geth> ¦ nqp/r1378: 25362cf803 | ab5tract++ | src/HLL/Grammar.nqp

[19:20] <Geth> ¦ nqp/r1378: Provide better feedback for ambiguous adverb usage

[19:20] <Geth> ¦ nqp/r1378: 

[19:20] <Geth> ¦ nqp/r1378: This fixes an LTA situation:

[19:20] <Geth> ¦ nqp/r1378: 

[19:20] <Geth> ¦ nqp/r1378:     > my %h = :1k; say 1 ~ %h<k>:exists ~ 1

[19:20] <Geth> ¦ nqp/r1378:     ===SORRY!===

[19:20] <Geth> ¦ nqp/r1378:     MVMArray: Can't pop from an empty array

[19:20] <Geth> ¦ nqp/r1378: <…commit message has 9 more lines…>

[19:20] <Geth> ¦ nqp/r1378: review: https://github.com/Raku/nqp/commit/25362cf803

[19:25] <Geth> ¦ nqp/r1378: 3e1c47538a | ab5tract++ | src/HLL/Grammar.nqp

[19:25] <Geth> ¦ nqp/r1378: Provide better feedback for ambiguous adverb usage

[19:25] <Geth> ¦ nqp/r1378: 

[19:25] <Geth> ¦ nqp/r1378: This fixes an LTA situation:

[19:25] <Geth> ¦ nqp/r1378: 

[19:25] <Geth> ¦ nqp/r1378:     > my %h = :1k; say 1 ~ %h<k>:exists ~ 1

[19:25] <Geth> ¦ nqp/r1378:     ===SORRY!===

[19:25] <Geth> ¦ nqp/r1378:     MVMArray: Can't pop from an empty array

[19:25] <Geth> ¦ nqp/r1378: <…commit message has 9 more lines…>

[19:25] <Geth> ¦ nqp/r1378: review: https://github.com/Raku/nqp/commit/3e1c47538a

[19:26] <Geth> ¦ nqp/r1378: 8dba195cb8 | ab5tract++ | src/HLL/Grammar.nqp

[19:26] <Geth> ¦ nqp/r1378: Provide better feedback for ambiguous adverb usage

[19:26] <Geth> ¦ nqp/r1378: 

[19:26] <Geth> ¦ nqp/r1378: This fixes an LTA situation:

[19:26] <Geth> ¦ nqp/r1378: 

[19:26] <Geth> ¦ nqp/r1378:     > my %h = :1k; say 1 ~ %h<k>:exists ~ 1

[19:26] <Geth> ¦ nqp/r1378:     ===SORRY!===

[19:26] <Geth> ¦ nqp/r1378:     MVMArray: Can't pop from an empty array

[19:26] <Geth> ¦ nqp/r1378: <…commit message has 9 more lines…>

[19:26] <Geth> ¦ nqp/r1378: review: https://github.com/Raku/nqp/commit/8dba195cb8

[19:26] <[Coke]> ab5tract: "nowehere"

[19:28] <Geth> ¦ rakudo/r1378: 3c5988198a | ab5tract++ | 2 files

[19:28] <Geth> ¦ rakudo/r1378: Provide better feedback for ambiguous adverb usage

[19:28] <Geth> ¦ rakudo/r1378: 

[19:28] <Geth> ¦ rakudo/r1378: This fixes an LTA situation:

[19:28] <Geth> ¦ rakudo/r1378: 

[19:28] <Geth> ¦ rakudo/r1378:     > my %h = :1k; say 1 ~ %h<k>:exists ~ 1

[19:28] <Geth> ¦ rakudo/r1378:     ===SORRY!===

[19:28] <Geth> ¦ rakudo/r1378:     MVMArray: Can't pop from an empty array

[19:28] <Geth> ¦ rakudo/r1378: <…commit message has 10 more lines…>

[19:28] <ab5tract> [Coke]: thanks!

[19:28] <Geth> ¦ rakudo/r1378: review: https://github.com/rakudo/rakudo/commit/3c5988198a

[19:31] <[Coke]> ab5tract++

[19:50] <Geth> ¦ nqp/main: fa489fe301 | ab5tract++ (committed using GitHub Web editor) | src/HLL/Grammar.nqp

[19:50] <Geth> ¦ nqp/main: Provide better feedback for ambiguous adverb usage

[19:50] <Geth> ¦ nqp/main: 

[19:50] <Geth> ¦ nqp/main: This fixes an LTA situation:

[19:50] <Geth> ¦ nqp/main: 

[19:50] <Geth> ¦ nqp/main:     > my %h = :1k; say 1 ~ %h<k>:exists ~ 1

[19:50] <Geth> ¦ nqp/main:     ===SORRY!===

[19:50] <Geth> ¦ nqp/main:     MVMArray: Can't pop from an empty array

[19:50] <Geth> ¦ nqp/main: <…commit message has 9 more lines…>

[19:50] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/fa489fe301

[19:51] <Geth> ¦ rakudo/main: 3ce05fa0db | ab5tract++ (committed using GitHub Web editor) | 2 files

[19:51] <Geth> ¦ rakudo/main: Provide better feedback for ambiguous adverb usage

[19:51] <Geth> ¦ rakudo/main: 

[19:51] <Geth> ¦ rakudo/main: This fixes an LTA situation:

[19:51] <Geth> ¦ rakudo/main: 

[19:51] <Geth> ¦ rakudo/main:     > my %h = :1k; say 1 ~ %h<k>:exists ~ 1

[19:51] <Geth> ¦ rakudo/main:     ===SORRY!===

[19:51] <Geth> ¦ rakudo/main:     MVMArray: Can't pop from an empty array

[19:51] <Geth> ¦ rakudo/main: <…commit message has 10 more lines…>

[19:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3ce05fa0db

[20:15] <Geth> ¦ rakudo/main: 3a928a5616 | ab5tract++ | t/12-rakuast/fixed-in-rakuast.rakutest

[20:15] <Geth> ¦ rakudo/main: Test for ambiguous adverb exception

[20:15] <Geth> ¦ rakudo/main: 

[20:15] <Geth> ¦ rakudo/main: This is only properly testable in RakuAST, as

[20:15] <Geth> ¦ rakudo/main: base dies in NQP's HLL::Grammar without an exception

[20:15] <Geth> ¦ rakudo/main: class to verify against (#1378).

[20:15] <Geth> ¦ rakudo/main: 

[20:15] <Geth> ¦ rakudo/main: We could test against the text of the die message, but

[20:15] <Geth> ¦ rakudo/main: my experience has led me to consider that bad practice

[20:15] <Geth> ¦ rakudo/main: and the situation in base is only temporary anyway.

[20:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a928a5616

[21:24] *** finanalyst left
[21:43] <Geth> ¦ rakudo/main: a26b756a50 | ab5tract++ | t/12-rakuast/fixed-in-rakuast.rakutest

[21:43] <Geth> ¦ rakudo/main: Tests indices for shaped arrays automatically coerced to Int

[21:43] <Geth> ¦ rakudo/main: 

[21:43] <Geth> ¦ rakudo/main: This is to keep R#1297 (#1297) from regressing in RakuAST.

[21:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a26b756a50

[21:43] <linkable6> R#1297 [open]: https://github.com/rakudo/rakudo/issues/1297 [shaped][Fixed in RakuAST] Indices for shaped arrays need manually coerced to numbers

[21:59] <Geth> ¦ rakudo: ab5tract++ created pull request #5576: Give META_REDUCE_RIGHT behavior for 1-arg case

[21:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5576

[22:00] *** sena_kun left
[22:55] <leont> I haven't looked into it yet, but I'm guessing this Perl issue is also relevant for Raku quoting constructs https://github.com/Perl/perl5/issues/22228

[22:58] <[Coke]> leont++

[23:06] <ab5tract> not just Perl. macOS won't even successfully highlight the `$weird` example

