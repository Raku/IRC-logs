[04:47] *** vrurg joined
[04:48] *** vrurg_ left
[08:13] <lizmat> timo: I'd say: yes, but what ?

[08:13] <lizmat> *what with

[08:31] *** sena_kun joined
[09:51] <Geth> ¦ rakudo/main: 066afa401c | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[09:51] <Geth> ¦ rakudo/main: Add test for #2360

[09:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/066afa401c

[10:16] <Geth> ¦ rakudo/main: 8b61f16776 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[10:16] <Geth> ¦ rakudo/main: Add test for #2362

[10:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8b61f16776

[10:47] <Geth> ¦ roast: c3e2e7685b | (Elizabeth Mattijsen)++ | S04-phasers/enter-leave.t

[10:47] <Geth> ¦ roast: Add tests for #2380

[10:47] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c3e2e7685b

[11:00] <lizmat> m: sub a(|c) { dd c }; a(1;2)   # where is this behaviour documented ?

[11:00] <camelia> rakudo-moar 8b61f1677: OUTPUT: «\((1,), (2,))␤»

[11:01] <lizmat> [Coke] ^^  ??

[11:18] *** sjn left
[11:29] <Geth> ¦ nqp/main: d280677bd7 | (Elizabeth Mattijsen)++ | src/QRegex/Cursor.nqp

[11:29] <Geth> ¦ nqp/main: Micro-optimize Match!cursor_init a bit

[11:29] <Geth> ¦ nqp/main: 

[11:29] <Geth> ¦ nqp/main: If working on a freshly created object, it is not necessary to

[11:29] <Geth> ¦ nqp/main: initialize the $!from / $!pos attributes, as they're native ints

[11:29] <Geth> ¦ nqp/main: that are created with 0

[11:29] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/d280677bd7

[11:30] *** sjn joined
[11:45] <Geth> ¦ rakudo/main: 427f8b7a1a | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[11:45] <Geth> ¦ rakudo/main: Bump NQP for Match!cursor_init micro-opt

[11:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/427f8b7a1a

[12:46] *** sjn_ joined
[13:53] <Geth> ¦ roast: 8498f84f10 | (Elizabeth Mattijsen)++ | S02-names-vars/signature.t

[13:53] <Geth> ¦ roast: Add test for #2416

[13:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8498f84f10

[13:58] <[Coke]> https://docs.raku.org/language/signatures#Capture_parameters

[14:30] <timo> lizmat: literally anything that's got some "binary" bytes in it

[14:31] <lizmat> so maybe it's a matter of just changing the extension of that file?

[14:39] <lizmat> notable6__: weekly

[14:39] <notable6__> lizmat, 1 note: 2024-10-04T09:22:02Z <lizmat>: https://github.com/zag/raku-knowledge-base

[14:39] <lizmat> notable6__: weekly reset

[14:39] <notable6__> lizmat, Moved existing notes to “weekly_2024-10-07T14:39:48Z”

[14:59] <timo> no the extension is already .bin, lintian looks at the contents and sees that we're trying to smuggle an elf through

[15:03] <timo> i mean, we could also turn the first couple of bytes into something not elf-compatible

[15:03] <timo> but clearly someone just took any random library or executable from parrot, chopped it off at the desired size and plopped it in there

[15:05] <lizmat> wouldn't something like: my $a := buf16.new; $a.push($_) for ^1000; "wop".IO.spurt($a)   do the trick?

[15:12] <[Coke]> timo: where is this .bin file?

[15:15] <timo> t/spec/S32-io/socket-test.bin

[15:15] <timo> lizmat: it probably could, actually

[15:15] *** sjn_ left
[15:16] <timo> this is only vaguely related, but "magical binary files in the test data" was how the xz-utils backdoor was disguised

[15:27] <timo> well, it was one part of the disguise

[15:28] <Geth> ¦ roast: efe9245fd4 | (Elizabeth Mattijsen)++ | S32-io/socket-test.bin

[15:28] <Geth> ¦ roast: Create non-sensical binary file for testing

[15:28] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/efe9245fd4

[15:28] <lizmat> timo: ^^ would this be better ?

[15:30] <timo> looks good

[15:41] <lizmat> actually, we don't need the file at all

[15:46] <Geth> ¦ roast: 2306979015 | (Elizabeth Mattijsen)++ | 3 files

[15:46] <Geth> ¦ roast: Don't need a binary file to test binary IO

[15:46] <Geth> ¦ roast: 

[15:46] <Geth> ¦ roast: Just create a blob during testing in memory.  This should make the

[15:46] <Geth> ¦ roast: debian people a lot happier

[15:46] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2306979015

[15:46] <lizmat> timo: ^^ a better fix

[15:47] <timo> well, "the debian people" didn't really complain, i just saw an automated checking tool point it out

[15:47] <lizmat> hehe... well, if debian people would look at that output, they would complain no?

[15:48] <timo> i'm actually not 100% sure if the t/spec/ should be part of the source package at all, and i'm not sure if maybe i broke something to cause them to be there when previously they weren't

[15:48] <lizmat> do they run "make spectest" ?

[15:56] <jdv> iirc its 6.d that in the src tarball, probably by acvident

[15:56] <jdv> 6d errata spec i mean

[16:01] <timo> only "make test" is run for the "autopkgtest" thing

[16:03] <timo> there are a whole bunch of warnings when building that files have been removed or something that i don't yet really understand what causes them

[16:16] <timo> https://salsa.debian.org/timotimo-guest/rakudo/-/jobs/6386574#L146 here's an example output from lintian mentioning the .bin file, https://timotimo-guest.pages.debian.net/-/rakudo/-/jobs/6386574/artifacts/debian/output/lintian.html has it in pretty html (but the links that are supposed to explain the error codes are all dead links)

[16:30] <[Coke]> Looks like lots of instance of 'allows to' in rakudo src, but not sure where the man page is defined, I'm sure I've seen it recently on the debian side...

[16:31] <timo> yeah it's generated from stuff in the debian/ folder

[16:32] <timo>  pod2man --name=perl6 docs/running.pod debian/perl6.1

[16:44] * [Coke] forgot how nice "authorize git over ssh with touch id" was.

[16:46] <Geth> ¦ roast: 9f75bc5d2c | (Elizabeth Mattijsen)++ | S14-roles/composition.t

[16:46] <Geth> ¦ roast: Add test for #2418

[16:46] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9f75bc5d2c

[16:46] <Geth> ¦ rakudo/main: a60b4e7d2b | (Will Coleda)++ | docs/running.pod

[16:46] <Geth> ¦ rakudo/main: Fix grammar issue

[16:46] <Geth> ¦ rakudo/main: 

[16:46] <Geth> ¦ rakudo/main: noticed by debian++ build process.

[16:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a60b4e7d2b

[16:49] <[Coke]> Not to erase history, but is it worth keeping Reini & Moritz listed explicitly on the docs/running.pod page?

[16:52] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/10/07/2024-41-knowlite/

[17:05] <timo> how do you feel about me picking nits in the weeklies?

[17:06] <lizmat> I welcome nits  :-)

[17:07] <lizmat> .oO( they're a great band )

[17:12] <lizmat> https://www.youtube.com/watch?v=Un0VLiPKKyg  :-)

[17:26] <Geth> ¦ rakudo/main: c9d03adff9 | (Elizabeth Mattijsen)++ | src/Raku/ast/statements.rakumod

[17:26] <Geth> ¦ rakudo/main: RakuAST: PAST is a thing of the past

[17:26] <Geth> ¦ rakudo/main: 

[17:26] <Geth> ¦ rakudo/main: In light of https://github.com/rakudo/rakudo/issues/2431

[17:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c9d03adff9

[19:08] <Geth> ¦ rakudo/main: 0774293522 | (Elizabeth Mattijsen)++ | src/core.c/Num.rakumod

[19:08] <Geth> ¦ rakudo/main: Fix LTA error message on num % / ** num

[19:08] <Geth> ¦ rakudo/main: 

[19:08] <Geth> ¦ rakudo/main: The problem is really that *returning* a Failure from a sub that has

[19:08] <Geth> ¦ rakudo/main: a native return constraint **dies**, rather than passing on the

[19:08] <Geth> ¦ rakudo/main: Failure.

[19:08] <Geth> ¦ rakudo/main: 

[19:08] <Geth> ¦ rakudo/main: If however a CONTROL message is used to return a Failure, all is

[19:08] <Geth> ¦ rakudo/main: well.  So work around this issue by using `fail` with the Failure

[19:08] <Geth> ¦ rakudo/main: rather than just returning it.

[19:08] <Geth> ¦ rakudo/main: 

[19:08] <Geth> ¦ rakudo/main: Fixes #2434

[19:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0774293522

[19:09] <Geth> ¦ roast: e2d90988f9 | (Elizabeth Mattijsen)++ | S02-types/num.t

[19:09] <Geth> ¦ roast: Add tests for #2434

[19:09] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e2d90988f9

[19:51] <Geth> ¦ rakudo/main: 0fc7d45f66 | (Elizabeth Mattijsen)++ | 5 files

[19:51] <Geth> ¦ rakudo/main: Make Iterable:U.flat do the right thing

[19:51] <Geth> ¦ rakudo/main: 

[19:51] <Geth> ¦ rakudo/main: This also exposed a bug in Iterable.flat in that it was **NOT**

[19:51] <Geth> ¦ rakudo/main: marked as "nodal".  Now that there's only one proto with "is nodal"

[19:51] <Geth> ¦ rakudo/main: the Iterable:D.flat also became nodal.

[19:51] <Geth> ¦ rakudo/main: 

[19:51] <Geth> ¦ rakudo/main: This in turn exposed a faulty test in S03-metaops/hyper.t, which

[19:51] <Geth> ¦ rakudo/main: will be fixed shortly.

[19:51] <Geth> ¦ rakudo/main: 

[19:51] <Geth> ¦ rakudo/main: Fixes #2442

[19:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0fc7d45f66

[19:52] <Geth> ¦ roast: 7afb05d9c3 | (Elizabeth Mattijsen)++ | 2 files

[19:52] <Geth> ¦ roast: Adapt some .flat tests

[19:52] <Geth> ¦ roast: 

[19:52] <Geth> ¦ roast: in light of https://github.com/rakudo/rakudo/commit/0fc7d45f66

[19:52] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/7afb05d9c3

[19:57] <Geth> ¦ roast: 789419a1ec | (Elizabeth Mattijsen)++ | S02-types/flattening.t

[19:57] <Geth> ¦ roast: Add tests for #2442

[19:57] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/789419a1ec

[20:31] *** [Coke] left
[22:28] *** sena_kun left
