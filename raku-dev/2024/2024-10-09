[06:16] <[Tux]> Rakudo v2024.09-60-g19a32df00 (v6.d) on MoarVM 2024.09-5-g174aa1ba9

[06:16] <[Tux]> csv-test-xs-20      0.142 -  0.142

[06:16] <[Tux]> csv-ip5xs           0.260 -  0.264

[06:16] <[Tux]> test-t --race       0.268 -  0.271

[06:16] <[Tux]> test-t              0.401 -  0.404

[06:16] <[Tux]> csv-ip5xs-20        1.078 -  1.113

[06:16] <[Tux]> test-t-20 --race    1.171 -  1.176

[06:16] <[Tux]> csv-parser          1.483 -  1.514

[06:16] <[Tux]> test                1.811 -  1.883

[06:16] <[Tux]> test-t-20           4.781 -  4.953

[06:16] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[07:48] *** sena_kun joined
[09:30] <Geth> ¦ rakudo/main: ebe9136f15 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[09:30] <Geth> ¦ rakudo/main: Add test for #2619

[09:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ebe9136f15

[10:09] <Geth> ¦ roast: f48dfbbebf | (Elizabeth Mattijsen)++ | S04-exception-handlers/control.t

[10:09] <Geth> ¦ roast: Add test for #2665

[10:09] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f48dfbbebf

[10:09] *** sena_kun left
[10:41] <Geth> ¦ roast: 3b4981dd82 | (Elizabeth Mattijsen)++ | S03-operators/range.t

[10:41] <Geth> ¦ roast: Add test for #2676

[10:41] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3b4981dd82

[10:59] <Geth> ¦ roast: 3d5ce92a15 | (Elizabeth Mattijsen)++ | S12-class/attributes.t

[10:59] <Geth> ¦ roast: Add tests for #2692

[10:59] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3d5ce92a15

[11:11] <timo> do we have a recommended deep cloning approach? (re: the "nice to have" ticket about deep clones R#2710)

[11:11] <linkable6> R#2710 [closed]: https://github.com/rakudo/rakudo/issues/2710 [feature request] nice to have a .deepclone method for classes and grammers

[11:11] <lizmat> maybe open a problem solving issue for it?

[11:16] <timo> is "reifier" a thing we still say?

[11:18] <lizmat> well, "reified" is still a term that's being used ?

[11:18] <timo> right

[11:18] <timo> Array changed a bit, didn't it? does it still have "a reifier" inside it?

[11:19] <timo> > Note from version 6.d, .raku (.perl before version 2019.11) can be called on multi-dimensional arrays.

[11:19] <timo> that seems like an odd thing to specifically point out?

[11:21] <Geth> ¦ rakudo/main: d3f058d9bd | (Elizabeth Mattijsen)++ | 2 files

[11:21] <Geth> ¦ rakudo/main: Mark "lazy-if" method as implementatio detail

[11:21] <Geth> ¦ rakudo/main: 

[11:21] <Geth> ¦ rakudo/main: In response to #2712

[11:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d3f058d9bd

[11:21] <lizmat> List has reifier in it

[11:22] <timo> m: my @a = 1, {rand} … ∞; my @b = @a.clone; say @b[^3]; say @a[^3];

[11:22] <camelia> rakudo-moar ebe9136f1: OUTPUT: «(1 0.8498968507708198 0.1060283607939646)␤(1 0.8498968507708198 0.1060283607939646)␤»

[11:23] <timo> this is the example in Array's clone method documentation where it tells you that an array's reifier is shared with its clones

[11:26] <timo> notable6__: new-topic bugbearer

[11:26] <notable6__> timo, New topic added (“bugbearer”)

[11:27] <timo> notable6__: bugbearer give Array doc page a bit of text about, or link to, the concept of reification

[11:27] <notable6__> timo, Noted! (bugbearer)

[11:28] <timo> notable6__: bugbearer maybe create a doc.raku.org redirect to docs.raku.org

[11:28] <notable6__> timo, Noted! (bugbearer)

[11:29] <Geth> ¦ roast: b2f53f7f37 | (Elizabeth Mattijsen)++ | 6.c/APPENDICES/A04-experimental/01-misc.t

[11:29] <Geth> ¦ roast: Fix another faulty test

[11:29] <Geth> ¦ roast: 

[11:29] <Geth> ¦ roast: since https://github.com/rakudo/rakudo/commit/0fc7d45f66344cd97e12720a

[11:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b2f53f7f37

[11:29] <timo> notable6__: bugbearer moarvm: nativecall on ppc32 writes outside bounds of local variables with "is rw" arguments pointing at native scalars

[11:29] <notable6__> timo, Noted! (bugbearer)

[11:36] <timo> cool, there is an example of a custom clone method in the docs of Mu.clone

[11:37] <timo> notable6__: bugbearer docs wishlist: generate anchors for code examples and provide a button to make a direct link / deep link

[11:37] <notable6__> timo, Noted! (bugbearer)

[11:39] <timo> the documentation of method clone on Mu starts with "This method will clone type objects" but it literally doesn't though?

[11:40] <timo> m: my Mu $othermu := Mu.clone(); say $othermu =:= Mu; 

[11:40] <camelia> rakudo-moar d3f058d9b: OUTPUT: «True␤»

[11:42] <Geth> ¦ roast: f6eb795f34 | (Elizabeth Mattijsen)++ | S29-any/deg-trans.t

[11:42] <Geth> ¦ roast: Remove overzealous test

[11:42] <Geth> ¦ roast: 

[11:42] <Geth> ¦ roast: This was testing implementation dependent behaviour

[11:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f6eb795f34

[11:44] <Geth> ¦ rakudo/main: d332d19a9b | (Elizabeth Mattijsen)++ | src/core.c/Any.rakumod

[11:44] <Geth> ¦ rakudo/main: Repair behaviour of Any|Match.print-nl

[11:44] <Geth> ¦ rakudo/main: 

[11:44] <Geth> ¦ rakudo/main: Call .print on whatever .nl-out returns.  Fixes #2713

[11:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d332d19a9b

[11:57] <timo> it's super convenient to be able to $foo.say and $foo.print and whatnot, but it feels kind of foot-gunny that it's "backwards" when run on an IO

[11:58] <timo> now if IO::print() and IO::say(), i.e. without arguments, were to throw an exception, however ...

[11:59] <timo> but yeah, the correct fix is to only use .print and .say if you know you're not getting an IO. and if you're outputting random stuff with .print or .say, maybe your use case is actually better served by dd $foo and $foo.&dd

[12:00] <timo> i feel like there's already a problem-solving ticket about this though

[12:01] <Geth> ¦ roast: 3772d8497b | (Elizabeth Mattijsen)++ | S03-junctions/misc.t

[12:01] <Geth> ¦ roast: Add tests for #2719

[12:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3772d8497b

[12:03] <timo> m: say "foo".substr-eq("f")

[12:03] <camelia> rakudo-moar d332d19a9: OUTPUT: «True␤»

[12:04] <timo> interesting, so the case without further arguments turns into starts-with?

[12:04] <timo> m: say "".substr-eq("f"); say "".substr-eq(""); say "".starts-with("f"); say "".starts-with("")

[12:04] <camelia> rakudo-moar d332d19a9: OUTPUT: «False␤True␤False␤True␤»

[12:14] <lizmat> yeah, it assumes 0 for the position in that case

[12:38] *** bisectable6 left
[12:41] *** bisectable6 joined
[12:52] <Geth> ¦ rakudo/main: 3359987a5d | (Elizabeth Mattijsen)++ | src/core.c/unicodey.rakumod

[12:52] <Geth> ¦ rakudo/main: Allow empty names in .uniparse

[12:52] <Geth> ¦ rakudo/main: 

[12:52] <Geth> ¦ rakudo/main: Fixes #2744

[12:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3359987a5d

[12:53] <Geth> ¦ roast: baa750f9ff | (Elizabeth Mattijsen)++ | S32-str/uniparse.t

[12:53] <Geth> ¦ roast: Adapt .uniparse tests allowing empty names

[12:53] <Geth> ¦ roast: 

[12:53] <Geth> ¦ roast: Following https://github.com/rakudo/rakudo/commit/3359987a5d

[12:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/baa750f9ff

[13:26] <Geth> ¦ rakudo/main: 278eb69a39 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.rakumod

[13:26] <Geth> ¦ rakudo/main: Handle .comb with negative limit better

[13:26] <Geth> ¦ rakudo/main: 

[13:26] <Geth> ¦ rakudo/main: Fixes #2745

[13:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/278eb69a39

[13:30] <Geth> ¦ roast: c35293bfe8 | (Elizabeth Mattijsen)++ | S32-str/comb.t

[13:30] <Geth> ¦ roast: Add tests for #2745

[13:30] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c35293bfe8

[13:41] <Geth> ¦ roast: 3358ebd904 | (Elizabeth Mattijsen)++ | S17-supply/watch-path.t

[13:41] <Geth> ¦ roast: Make sure tests are actually run on MacOS

[13:41] <Geth> ¦ roast: 

[13:41] <Geth> ¦ roast: Note that some of these fail: but this file is currently **not**

[13:41] <Geth> ¦ roast: part of spectesting.

[13:41] <Geth> ¦ roast: 

[13:41] <Geth> ¦ roast: See https://github.com/rakudo/rakudo/issues/2760

[13:41] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3358ebd904

[13:50] <Geth> ¦ roast: 37ead4114f | (Elizabeth Mattijsen)++ | S04-exceptions/fail.t

[13:50] <Geth> ¦ roast: Add tests for #2764

[13:50] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/37ead4114f

[14:16] <Geth> ¦ rakudo/main: cf664300cc | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.rakumod

[14:16] <Geth> ¦ rakudo/main: Make ForeignCode.gist less verbose

[14:16] <Geth> ¦ rakudo/main: 

[14:16] <Geth> ¦ rakudo/main: Use the verbose version for .raku, just produce the name for .Str/.gist

[14:16] <Geth> ¦ rakudo/main: 

[14:16] <Geth> ¦ rakudo/main: Fixes #2774

[14:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cf664300cc

[14:20] <Geth> ¦ roast: 82d5b1b0e7 | (Elizabeth Mattijsen)++ | S32-array/delete-adverb.t

[14:20] <Geth> ¦ roast: Add tests for #3657

[14:20] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/82d5b1b0e7

[14:36] <lizmat> m: say "C"  ~~ / <:Lu> <!before \S > /

[14:36] <camelia> rakudo-moar cf664300c: OUTPUT: «｢C｣␤»

[14:36] <lizmat> bisectable6: say "C"  ~~ / <:Lu> <!before \S > /

[14:36] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:37] <bisectable6> lizmat, Output on all releases: https://gist.github.com/d260e7f5f67064132b1e52c883001ad0

[14:37] <bisectable6> lizmat, Bisecting by output (old=2021.06 new=2021.07) because on both starting points the exit code is 0

[14:37] <bisectable6> lizmat, bisect log: https://gist.github.com/9511d580074a76ba582b4e54169e1c95

[14:37] <bisectable6> lizmat, (2021-07-19) https://github.com/rakudo/rakudo/commit/853dc393699937b5e151cf176bc82be5c33d8c90

[14:38] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/c671fd0cc2093b173b6b282b562be7dd

[14:42] <Geth> ¦ roast: 523da0259e | (Elizabeth Mattijsen)++ | S05-metasyntax/lookaround.t

[14:42] <Geth> ¦ roast: Add test for #2791

[14:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/523da0259e

[14:53] <Geth> ¦ roast: f323d69daa | (Elizabeth Mattijsen)++ | S06-other/main.t

[14:53] <Geth> ¦ roast: Add tests for #2794

[14:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f323d69daa

[15:06] <Geth> ¦ rakudo/main: eda67b3a31 | (Elizabeth Mattijsen)++ | src/core.c/Supplier.rakumod

[15:06] <Geth> ¦ rakudo/main: Mark Supplier.unsanitized-supply as an implementation detail

[15:06] <Geth> ¦ rakudo/main: 

[15:06] <Geth> ¦ rakudo/main: In response to #2803

[15:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eda67b3a31

[15:24] <Geth> ¦ roast: 6f5c89817e | (Elizabeth Mattijsen)++ | S12-construction/BUILD.t

[15:24] <Geth> ¦ roast: Add tests for #2832

[15:24] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6f5c89817e

[16:17] <Geth> ¦ rakudo/main: 804c40411e | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[16:17] <Geth> ¦ rakudo/main: Add test for #2836

[16:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/804c40411e

[16:33] <Geth> ¦ roast: ff9bcf57bc | (Elizabeth Mattijsen)++ | S06-advanced/callframe.t

[16:33] <Geth> ¦ roast: Add test for #2853

[16:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ff9bcf57bc

[17:01] <Geth> ¦ roast: 9a15e3d6bc | (Elizabeth Mattijsen)++ | S02-names/name.t

[17:01] <Geth> ¦ roast: Add tests for #2928

[17:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9a15e3d6bc

[17:07] <Geth> ¦ roast: d095a28f13 | (Elizabeth Mattijsen)++ | S32-array/exists-adverb.t

[17:07] <Geth> ¦ roast: Add tests for #2929

[17:07] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d095a28f13

[17:19] <Geth> ¦ roast: d2f6b9b346 | (Elizabeth Mattijsen)++ | S05-modifier/ignoremark.t

[17:19] <Geth> ¦ roast: Add test for #2961

[17:19] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d2f6b9b346

[17:27] <Geth> ¦ roast: 002bbf8272 | (Elizabeth Mattijsen)++ | S32-exceptions/misc.t

[17:27] <Geth> ¦ roast: Add test for #2974

[17:27] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/002bbf8272

[17:29] <lizmat> <1K open issues  :-)

[17:32] <[Coke]> \o/

[19:11] <vrurg> lizmat: considering the `handles` case, you'd need something extra to handle the `handles => *`. Though it could be another entry in the hash. 

[19:12] <vrurg> lizmat: Another point: conflicts. Especially dynamically added methods. The current semantics would be hard to follow then.

[19:14] <vrurg> Though I'm not happy with the semantics either way. Using `handles` as a fallback resolution is more appealing to me. In which case `*` becomes the fallback of fallback. :) 

[21:14] *** sena_kun joined
[21:51] *** MasterDuke joined
[21:59] *** bisectable6 left
[22:00] <MasterDuke> lizmat: you're running the whateverables now right? i just killed bisectable somehow

[22:03] *** bisectable6 joined
[22:06] <MasterDuke> huh. may have just killed it again. not sure why this particular query is causing it so much trouble though

[22:09] *** bisectable6 left
[22:13] *** bisectable6 joined
[22:31] *** sena_kun left
[22:32] <lizmat> MasterDuke: AlexDaniel is still running them

[22:32] <lizmat> I just run Geth and RakuIRCLogger 

