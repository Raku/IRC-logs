[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:09] <ab5tract> it took quite a lot of tweaking to get it all together

[00:13] *** benchable6_ left
[00:13] *** linkable6_ left
[00:13] *** coverable6_ left
[00:13] *** committable6_ left
[00:13] *** bloatable6_ left
[00:13] *** unicodable6_ left
[00:13] *** quotable6_ left
[00:13] *** shareable6_ left
[00:13] *** bisectable6_ left
[00:13] *** notable6_ left
[00:13] *** greppable6_ left
[00:13] *** statisfiable6 left
[00:13] *** evalable6_ left
[00:13] *** nativecallable6_ left
[00:13] *** sourceable6_ left
[00:13] *** releasable6_ left
[00:13] *** tellable6_ left
[00:13] *** squashable6 left
[00:13] *** reportable6 left
[00:15] <ab5tract> gah, just trying to generate a list of installed packages in Perl is unbelievably annoying

[00:19] <MasterDuke> ab5tract: are you experimenting with my moarvm branch that turns cuuids into ints?

[00:20] *** AlexDaniel joined
[00:24] <ab5tract> MasterDuke: trying to pave the way for that by removing Inline::Perl5's dependence on random mega-ranged cuids

[00:24] <tellable6> 2024-04-29T00:21:20Z #raku <AlexDaniel> ab5tract buildable is making builds for all branches

[00:24] <MasterDuke> nice

[00:24] <AlexDaniel> c: is-item-redux say 42

[00:24] <committable6> AlexDaniel, ¦is-item-redux: «42␤»

[00:24] <[Coke]> I was never able to get it working on macOS!

[00:25] <AlexDaniel> true, there needs to be a server that makes builds on macOS

[00:25] <MasterDuke> 64-bits is obviously a *much* smaller state space for randomness, but maybe it'd be enough in practicality?

[00:25] <AlexDaniel> if you want to run stuff natively that is

[00:25] <AlexDaniel> (if that note was about whateverable, haha)

[00:26] <[Coke]> blin

[00:26] <ab5tract> I think just exposing QAST::Block.next-cuid through an nqp op should be enough 

[00:26] <[Coke]> so yes?

[00:26] <AlexDaniel> yeah

[00:26] <ab5tract> but I'm trying to test that by importing every installed perl5 module through Inline::Perl5 and ... wow.. what a mess

[00:27] <AlexDaniel> [Coke]: I mean, I have about 11629 builds for amd64, so if we want to run stuff on macos then somebody has to make some builds

[00:27] <AlexDaniel> [Coke]: I can store them, that's not a problem (will take less than 50GB which I now have)

[00:28] <ab5tract> [Coke]: https://github.com/ab5tract/Blin and https://github.com/ab5tract/whateverable/

[00:28] <ab5tract> _should_ get you there

[00:28] <AlexDaniel> btw I joined here to announce that the old server will be shut down relatively soon. If there's anything relying on that server, then hmmmmm, brace yourself I guess?

[00:28] <ab5tract> AlexDaniel: my use case for blin is much simpler -- testing single commits

[00:29] <AlexDaniel> but the good news is that all whateverable bots were running on a new server for a few months, so nothing should be affected at all

[00:29] <AlexDaniel> but you never know :)

[00:30] <ab5tract> AlexDaniel: the mothership setting in blin's config could use an update, assuming general access is intended

[00:30] <AlexDaniel> and dockerizing ≈16 websites that I host was kinda fun and not fun at the same time :)

[00:31] <ab5tract> I definitely hear that :)

[00:31] <AlexDaniel> ab5tract: hmmm, what kind of update?

[00:33] <ab5tract> I assume it points to the old server

[00:33] <ab5tract> but in general, Whateverable has seen major changes with no version bump

[00:34] <AlexDaniel> It point to "https://whateverable.6lang.org", which points at the new server now :)

[00:34] <ab5tract> I was stuck looking for Whateverable::Building for ages

[00:34] <AlexDaniel> points*

[00:34] <ab5tract> ok :)

[00:36] <AlexDaniel> ab5tract: but feel free to bump versions and do anything else that you need? New changes to the `main` branch in whateverable repo are deployed automatically

[00:37] <AlexDaniel> also, I'm not monitoring this or other channels anymore, but I do follow the repo, so feel free to file tickets with any requests, I might even have time to do it O:3

[00:38] <AlexDaniel> pull requests are even more welcome, especially if you also take the time to press the merge button XD

[00:38] <ab5tract> understoodl thanks

[01:34] *** AlexDaniel left
[07:51] *** sena_kun joined
[08:04] <nine> We have EXPORT and EXPORTHOW. I think we really just need an EXPORTPHASERS, e.g. my package EXPORTPHASERS { our sub INIT::restore-inline-perl5 { self.restore_interpreter; self.restore_modules; } };

[08:13] <ab5tract> Hmmm

[08:19] *** finanalyst joined
[08:22] <finanalyst> .tell coleman please take a look at question on #356 of Raku/doc-website. how best to make ebook available in container?

[08:22] <tellable6> finanalyst, I'll pass your message to coleman

[08:30] *** MasterDuke left
[08:34] <ab5tract> nine: that would be nice to have but I don't feel like it should be a prerequisite for migrating cuid to ints

[08:36] <nine> I disagree. There is no reason to rush this. Everything works just fine the way it is. There is just the hope of getting some minor performance improvement out of a switch. So why not solve a long standing problem first and therefore get rid of the blocker? Why invest time and effort into replacing one hack with another?

[08:47] <ab5tract> idk, for me it just feels a bit like "my using a hack is okay, but _your_ using a hack is definitely not"

[08:50] <ab5tract> that said, I usually come around to your way of thinking on these things, so...

[08:51] <nine> It's less "my vs. yours" and more "way back then vs. now"

[08:52] <nine> I never wanted that hack. There was just no other way to do that and I didn't have the skills to provide a proper solution.

[08:52] <ab5tract> fair enough

[08:53] <lizmat> yeah, knowing now after spending several months in internals, also has changed my view on many hacks / solutions of my own  :-)

[09:11] <ab5tract> I guess my biggest concern with EXPORTPHASERS is whether that means two separate front end solutions or not

[09:19] *** [Tux] left
[09:24] *** [Tux] joined
[09:25] *** sena_kun left
[09:37] <nine> Now if you want to prepend RakuAST as a blocker and shave that yak first, I'm not at all disappointed :D

[10:19] *** finanalyst left
[10:38] <ab5tract> Would that be an entirely separate mechanism apart from EXPORTPHASERS?

[10:48] <[Tux]> Rakudo v2024.04-10-ga4c7d5d19 (v6.d) on MoarVM 2024.04-2-g8ccb87755

[10:48] <[Tux]> csv-test-xs-20      0.142 -  0.142

[10:48] <[Tux]> csv-ip5xs           0.260 -  0.260

[10:48] <[Tux]> test-t --race       0.280 -  0.281

[10:48] <[Tux]> test-t              0.422 -  0.424

[10:48] <[Tux]> csv-ip5xs-20        1.107 -  1.129

[10:48] <[Tux]> test-t-20 --race    1.217 -  1.238

[10:48] <[Tux]> csv-parser          1.548 -  1.553

[10:48] <[Tux]> test                1.961 -  1.963

[10:48] <[Tux]> test-t-20           5.093 -  5.137

[10:58] *** rba left
[11:01] *** rba joined
[11:18] <Geth> ¦ nqp: ab5tract++ created pull request #821: Draft: Add nqp::getnextcuid

[11:18] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/821

[11:33] <nine> ab5tract: I don't understand your question

[11:34] <nine> Would what be that separate mechanism?

[11:35] * nine might be more dense than usual since yesterday's hike was much more exhausting than planned due to half a meter of snow on the north flank

[11:35] <ab5tract> would a RakuAST solution also use this new EXPORTPHASERS?

[11:35] <lizmat> ab5tract: my understanding would be: yes

[11:35] <ab5tract> because I could also imagine something where you just EVAL some ast

[11:36] <nine> Sure. RakuAST is just one way to implement EXPORTPHASERS. Just like with EXPORTHOW

[11:36] <ab5tract> so two frontends it is then :)

[11:36] <nine> Yes. But neither should be particularly challenging or much work at all.

[14:04] <ab5tract> bisectable6: subset S where { m/"aaa"/ }; class C { method Str { "aaa" } }; my S $s = C.new

[14:04] <bisectable6> ab5tract, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:05] <bisectable6> ab5tract, More than 3 changes to bisect, please try a narrower range like old=2020.06 new=HEAD

[14:05] <bisectable6> ab5tract, Output on all releases: https://gist.github.com/7f26ff8bb1cde01e32c1ca1b89e494d1

[14:08] <ab5tract> bisectable6: sub s($s where { m/"aaa"/ }) { dd :$s }; class C { method Str { "aaa" } }; s C.new

[14:08] <bisectable6> ab5tract, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:08] <bisectable6> ab5tract, Output on all releases: https://gist.github.com/f3b6a8c215e5e09bea0197b04280c45f

[14:08] <bisectable6> ab5tract, More than 3 changes to bisect, please try a narrower range like old=2020.06 new=HEAD

[14:13] <ab5tract> ...

[14:14] <ab5tract> how does this code make any sense? `  method match(Any:U: |) { self.Str; nqp::getlexcaller('$/') = Nil }`

[14:14] <ab5tract> m: Any.Str.say

[14:14] <camelia> rakudo-moar a4c7d5d19: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤␤  in block <unit> at <tmp> line 1␤»

[15:07] <ab5tract> okay, so I'm bumping up against a Bad Thing that I did.. apparently a4c7d5d193 was merged without proper testing (I swear I thought I ran spectest!) 

[15:07] <linkable6> (2024-04-28) https://github.com/rakudo/rakudo/commit/a4c7d5d193 Provide conditional exit status for USAGE

[15:09] <ab5tract> presuming that this is a nice thing to have and that we want to keep it, what is the actual approach to adjusting the test failures (which are all, shockingly, related to expecting 0 as a status code)

[15:12] <ab5tract> I feel like I was just reading a thread about this (how to assign tests to specific versions) but I can't seem to find it at the moment

[15:34] <ab5tract> bisectable6: ' $_ = "abc"; my $i = 1; s:i(1)/a/b/ '

[15:34] <bisectable6> ab5tract, Will bisect the whole range automagically because no endpoints were provided, hang tight

[15:35] <bisectable6> ab5tract, ¦6c (79 commits): «WARNINGS for /tmp/qsGz3qFQjR:␤Useless use of constant string " $_ = \"abc\"; my $i = 1; s:i(1)/a/b/ " in sink context (line 1)␤»

[15:35] <bisectable6> ab5tract, Nothing to bisect!

[15:35] <ab5tract> m: ' $_ = "abc"; my $i = 1; s:i(1)/a/b/ '

[15:35] <camelia> rakudo-moar a4c7d5d19: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string " $_ = \"abc\"; my $i = 1; s:i(1)/a/b/ " in sink context (line 1)␤»

[15:36] <ab5tract> m: $_ = "abc"; my $i = 1; s:i(1)/a/b/ 

[15:36] <camelia> rakudo-moar a4c7d5d19: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Adverb i value must be known at compile time␤at <tmp>:1␤------> $_ = "abc"; my $i = 1; s:i(1)⏏/a/b/␤»

[15:36] <ab5tract> bisectable6: $_ = "abc"; my $i = 1; s:i(1)/a/b/ 

[15:36] <bisectable6> ab5tract, Will bisect the whole range automagically because no endpoints were provided, hang tight

[15:36] <bisectable6> ab5tract, ¦6c (79 commits): «4===SORRY!4=== Error while compiling /tmp/CbRPOxEd5k␤Adverb i value must be known at compile time␤at /tmp/CbRPOxEd5k:1␤------> 3$_ = "abc"; my $i = 1; s:i(1)8⏏4/a/b/ ␤ «exit code = 1»»

[15:36] <bisectable6> ab5tract, Nothing to bisect!

[15:37] <ab5tract> ... then how come there is a failing test saying that this should work? :(

[15:40] <ab5tract> sigh.. today is one of those days that I think I should hand my brain back in for a warranty return

[15:41] <ab5tract> `#?rakudo todo 'be smarter about constant detection'`

[16:02] <ugexe> dear sir/madam we've been trying to reach you about your brain's extended warranty

[16:05] <ab5tract> lol!

[16:21] <[Coke]> HA

[16:33] <lizmat> notable6: weekly

[16:33] <notable6> lizmat, 2 notes: 2024-04-11T19:48:46Z <gfldex>: weekly https://www.youtube.com/watch?v=pFKLHOygtqQ&t=945s  ;  2024-04-14T22:09:43Z <antononcube>: https://rakuforprediction.wordpress.com/2024/04/14/exorcism-for-exercism/

[16:33] <lizmat> notable6: weekly reset

[16:33] <notable6> lizmat, Moved existing notes to “weekly_2024-04-29T16:33:47Z”

[16:33] <lizmat> oops, forgot to reset last week

[16:34] <[Coke]> oops

[17:53] *** sena_kun joined
[18:00] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/04/29/2024-18-over-the-finish-line/

[18:32] <Geth> ¦ rakudo/r5464: 14f1a866c7 | ab5tract++ | src/core.c/Any.rakumod

[18:32] <Geth> ¦ rakudo/r5464: Supply an Any.match method candidate for Any:D

[18:32] <Geth> ¦ rakudo/r5464: 

[18:32] <Geth> ¦ rakudo/r5464: This addresses the use of non-`Str` candidates arriving

[18:32] <Geth> ¦ rakudo/r5464: in `where` constraints that attempt to match against

[18:32] <Geth> ¦ rakudo/r5464: a regex. (R#5464 / #5464).

[18:32] <Geth> ¦ rakudo/r5464: 

[18:33] <Geth> ¦ rakudo/r5464: ```

[18:33] <Geth> ¦ rakudo/r5464: <…commit message has 26 more lines…>

[18:33] <linkable6> R#5464 [open]: https://github.com/rakudo/rakudo/issues/5464 [dispatching] Invocant of method 'match' must be a type object of type 'Any'

[18:33] <Geth> ¦ rakudo/r5464: review: https://github.com/rakudo/rakudo/commit/14f1a866c7

[18:37] <Geth> ¦ rakudo: ab5tract++ created pull request #5559: Supply an Any.match method candidate for Any:D

[18:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5559

[18:41] <Geth> ¦ rakudo/r5464: 9522e3e3ee | ab5tract++ | src/core.c/Any.rakumod

[18:41] <Geth> ¦ rakudo/r5464: Supply an Any.match method candidate for Any:D

[18:41] <Geth> ¦ rakudo/r5464: 

[18:41] <Geth> ¦ rakudo/r5464: This addresses the use of non-`Str` candidates arriving

[18:41] <Geth> ¦ rakudo/r5464: in `where` constraints that attempt to match against

[18:41] <Geth> ¦ rakudo/r5464: a regex. (R#5464 / #5464).

[18:41] <Geth> ¦ rakudo/r5464: 

[18:41] <Geth> ¦ rakudo/r5464: ```

[18:41] <linkable6> R#5464 [open]: https://github.com/rakudo/rakudo/issues/5464 [dispatching] Invocant of method 'match' must be a type object of type 'Any'

[18:41] <Geth> ¦ rakudo/r5464: <…commit message has 32 more lines…>

[18:41] <Geth> ¦ rakudo/r5464: review: https://github.com/rakudo/rakudo/commit/9522e3e3ee

[19:31] *** finanalyst joined
[19:47] <[Coke]> m: Metamodel::InvocationProtocol.new

[19:48] <camelia> rakudo-moar a4c7d5d19: OUTPUT: «Could not find symbol '&InvocationProtocol' in 'Metamodel'␤  in block <unit> at <tmp> line 1␤␤»

[19:48] <[Coke]> m: MetaModel::InvocationProtocol.new

[19:48] <camelia> rakudo-moar a4c7d5d19: OUTPUT: «Could not find symbol '&InvocationProtocol' in 'GLOBAL::MetaModel'␤  in block <unit> at <tmp> line 1␤␤»

[19:48] <[Coke]> docs refer to Metamodel::InvocationProtocol but that doesn't compile

[19:49] <[Coke]> m: Perl6::MetaModel::InvocationProtocol.new

[19:49] <camelia> rakudo-moar a4c7d5d19: OUTPUT: «Could not find symbol '&InvocationProtocol' in 'GLOBAL::Perl6::MetaModel'␤  in block <unit> at <tmp> line 1␤␤»

[19:49] <[Coke]> m: Perl6::Metamodel::InvocationProtocol.new

[19:49] <camelia> rakudo-moar a4c7d5d19: OUTPUT: «Could not find symbol '&InvocationProtocol' in 'GLOBAL::Perl6::Metamodel'␤  in block <unit> at <tmp> line 1␤␤»

[19:58] <[Coke]> oh! it was removed and we didn't update the docs yet. 

[20:22] <Geth> ¦ roast: 918f55a151 | ab5tract++ | 3 files

[20:22] <Geth> ¦ roast: Migrate USAGE -> GENERATE-USAGE

[20:22] <Geth> ¦ roast: 

[20:22] <Geth> ¦ roast: GENERATE-USAGE is a part of Raku for a while now and not just

[20:22] <Geth> ¦ roast: a Rakudo implementation detail.

[20:22] <Geth> ¦ roast: 

[20:22] <Geth> ¦ roast: This patch is a compromise for changing USAGE to conditionally

[20:22] <Geth> ¦ roast: set the exit status in the same way that GENERATE-USAGE does.

[20:22] <Geth> ¦ roast: <…commit message has 12 more lines…>

[20:22] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/918f55a151

[21:14] <Geth> ¦ roast: 6f7d6ae582 | ab5tract++ | 6.c/S06-other/main-refactored.t

[21:14] <Geth> ¦ roast: Don't pollute test exit status

[21:14] <Geth> ¦ roast: 

[21:14] <Geth> ¦ roast: This is a leftover change missed in the previous commit.

[21:14] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6f7d6ae582

[21:31] <coleman> .

[21:31] <tellable6> 2024-04-29T08:22:13Z #raku-dev <finanalyst> coleman please take a look at question on #356 of Raku/doc-website. how best to make ebook available in container?

[21:50] *** finanalyst left
[22:52] *** sena_kun left
