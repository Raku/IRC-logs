[10:50] <Geth> ¦ rakudo/main: 8815167856 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/Explaining.nqp

[10:50] <Geth> ¦ rakudo/main: Streamline Metamodel::Explaining

[10:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8815167856

[10:50] <Geth> ¦ rakudo/main: 975b663428 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/Finalization.nqp

[10:50] <Geth> ¦ rakudo/main: Streamline Metamodel::Finalization

[10:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/975b663428

[11:42] <Geth> ¦ roast: dde864e917 | (Elizabeth Mattijsen)++ | S12-introspection/can.t

[11:42] <Geth> ¦ roast: Get rid of warning during testing

[11:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/dde864e917

[12:18] <lizmat> odd finding just now: there seems to be a pattern of building the "all_method_table" for classes during core compilation

[12:18] <lizmat> with a little debug message in all_method_table and invalidate_method_cache, I e.g. get:

[12:18] <lizmat> invalidate: Array

[12:18] <lizmat> all_method_table: Array (263)

[12:18] <lizmat> invalidate: Array

[12:18] <lizmat> all_method_table: Array (264)

[12:18] <lizmat> invalidate: Array

[12:18] <lizmat> all_method_table: Array (264)

[12:18] <lizmat> invalidate: Array

[12:18] <lizmat> all_method_table: Array (264)

[12:18] <lizmat> invalidate: Array

[12:18] <lizmat> all_method_table: Array (264)

[12:19] <lizmat> this feels *hugely* sub-optimal

[12:19] <lizmat> suggestions / comments / reasoning welcome!

[12:21] <lizmat> I wonder if it's invalidating the cache for each multi method being added (when it shouldn't, as the only thing in the cache will be the proto)

[12:23] <lizmat> also: perhaps .can and .find_method should just use the all_method_table cache, instead of walking the MRO each time

[12:23] <lizmat> and e.g. have "add_method" just add to the cache

[12:34] <lizmat> vrurg nine jnthn ^^

[12:51] <Geth> ¦ rakudo/main: 1dfd7b4bc0 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/MROBasedMethodDispatch.nqp

[12:51] <Geth> ¦ rakudo/main: Streamline Metamodel::MROBasedMethodDispatch

[12:51] <Geth> ¦ rakudo/main: 

[12:51] <Geth> ¦ rakudo/main: There seems to be a pattern of building the "all_method_table" for

[12:51] <Geth> ¦ rakudo/main: classes during core compilation.  I wonder if it's invalidating the

[12:51] <Geth> ¦ rakudo/main: cache for each multi method being added (when it shouldn't, as the

[12:51] <Geth> ¦ rakudo/main: only thing in the cache will be the proto).

[12:51] <Geth> ¦ rakudo/main: 

[12:51] <Geth> ¦ rakudo/main: Also: perhaps .can and .find_method should just use the

[12:51] <Geth> ¦ rakudo/main: all_method_table cache, instead of walking the MRO each time

[12:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1dfd7b4bc0

[14:13] *** MasterDuke joined
[14:38] *** sena_kun joined
[15:20] *** sena_kun left
[16:48] <Geth> ¦ rakudo/main: 9f0d361b91 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/MROBasedTypeChecking.nqp

[16:48] <Geth> ¦ rakudo/main: Streamline Metamodel::MROBasedTypeChecking

[16:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9f0d361b91

[18:02] *** MasterDuke left
[18:16] *** MasterDuke joined
[18:37] <MasterDuke> lizmat: btw, i noticed that the nqp jvm build broke recently, `Can not invoke object '&reverse' in publish_method_cache (gen/jvm/stage1/nqpmo.nqp:1579)`

[18:53] <Geth> ¦ nqp/main: e3225825d5 | (Daniel Green)++ | 11 files

[18:53] <Geth> ¦ nqp/main: Unbreak JVM build

[18:53] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/e3225825d5

[19:00] <releasable6> Next release in ≈4 days and ≈23 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:35] *** MasterDuke left
[19:39] <Geth> ¦ rakudo/main: 80ac433643 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/MetaMethodContainer.nqp

[19:39] <Geth> ¦ rakudo/main: Streamline Metamodel::MetaMethodContainer

[19:39] <Geth> ¦ rakudo/main: 

[19:39] <Geth> ¦ rakudo/main: Also make sure that adding a meta method, and composing meta methods

[19:39] <Geth> ¦ rakudo/main: into the the meta object, are threadsafe.

[19:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/80ac433643

[20:02] *** finanalyst joined
[21:00] *** sena_kun joined
[22:56] *** sena_kun left
