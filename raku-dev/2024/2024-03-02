[00:00] *** sena_kun left
[00:05] *** kjp left
[00:08] *** kjp joined
[01:19] *** MasterDuke joined
[01:20] <MasterDuke> .

[01:20] <tellable6> 2024-03-01T20:31:16Z #raku-dev <[Coke]> masterduke - Tried building HEAD and 2024.01, both die with guarantee(requested_word_size <= chunklevel::MAX_CHUNK_WORD_SIZE) failed: Requested size too large (620714) - max allowed size per allocation is 524288.

[01:20] <tellable6> 2024-03-01T20:31:39Z #raku-dev <[Coke]> Masterduke this on OSX w/ javac 20.0.2

[01:21] <MasterDuke> [Coke]: IIRC, java 20 has a known problem that was introduced in 17 and wasn't fixed until 21

[08:40] *** sena_kun joined
[09:34] *** sena_kun left
[13:37] <Geth> ¦ rakudo/main: 97a0eeab69 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:37] <Geth> ¦ rakudo/main: Streamline bind_one_param in the bootstrap

[13:37] <Geth> ¦ rakudo/main: 

[13:37] <Geth> ¦ rakudo/main: - abstract concreteness / typecheck error handling into separate subs

[13:37] <Geth> ¦ rakudo/main: - reorder some conditionals for more efficient throughput

[13:37] <Geth> ¦ rakudo/main: - don't create error message for junction returns

[13:37] <Geth> ¦ rakudo/main: - add some more comments

[13:37] <Geth> ¦ rakudo/main: 

[13:37] <Geth> ¦ rakudo/main: In preparation for more thorough streamlining

[13:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/97a0eeab69

[13:54] <Geth> ¦ rakudo/main: 18989a661b | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:54] <Geth> ¦ rakudo/main: Make order of positionals bind/bind_one_param match

[13:54] <Geth> ¦ rakudo/main: 

[13:54] <Geth> ¦ rakudo/main: Mostly for readability / orderedness  :-)

[13:54] <Geth> ¦ rakudo/main: 

[13:54] <Geth> ¦ rakudo/main: Also move helper sub to the helper sub area for easier browsing

[13:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/18989a661b

[15:02] *** sena_kun joined
[16:04] <MasterDuke> i haven't been doing a proper bisect, just stepping by nqp bumps, but so far rakudo has built up to 5c9156e268b103997f451f0ed2d0f4ebcd9e6698 (i had to cherry-pick my unbreak the jvm build nqp commit for the last couple bumps, but that was expected)

[16:04] <linkable6> (2024-02-12) https://github.com/rakudo/rakudo/commit/5c9156e268 Bump NQP to get latest MoarVM tweaks

[16:17] <MasterDuke> heh. and now i've gotten myself into a situation where the moarvm rakudo build failed, but the jvm build seems to be soldiering on...

[18:03] <lizmat> MasterDuke: 6583e61c5b265257 broke the build

[18:03] <lizmat> and was reverted

[18:03] <lizmat> could that be it?

[18:04] <lizmat> which leaves 94ee052770e28adc03e21 , which was a MoarVM bump

[18:04] <linkable6> (2024-02-12) https://github.com/Raku/nqp/commit/94ee052770 Bump MoarVM for the latest tweaks/optimizations

[18:06] <lizmat> which basically means 6a9c523dd5145d4c2d

[18:06] <linkable6> (2024-02-11) https://github.com/MoarVM/MoarVM/commit/6a9c523dd5 Slightly optimize creating backtraces

[18:06] <lizmat> or a1a18e9842464fdc17a

[18:06] <linkable6> (2024-02-12) https://github.com/MoarVM/MoarVM/commit/a1a18e9842 Fix uninitialized is_unsigned flag in P6num

[18:11] <MasterDuke> the moarvm thing is probably just an artifact of something not getting quite cleaned up completely. i am playing fast and loose with checking out various commits, cherry-picking others, etc

[18:16] <lizmat> .oO( playing fast and loose: the SpaceX way :-)

[18:18] <MasterDuke> as long as there aren't any rapid unscheduled disassemblies in my house...

[18:22] <jdv> used to be the fb thing until zuck realized he was young and dumb

[19:10] <MasterDuke> Voldenet: i was surprised by your statement that memory use on my fastutil branch was higher. how did you measure?

[19:13] <Voldenet> I measured the memory consumption during build using mem_usage_ui

[19:15] <MasterDuke> huh. not at all what i was expecting

[19:18] <Voldenet> I think the difference is too substantial to be coincidence

[19:18] <Voldenet> plots of compilations https://imgur.com/a/uYLBepJ

[19:19] <Voldenet> iirc I didn't get full profile of raku-ast-compiler, but the difference is clearly seen

[19:21] <lizmat> am I reading this correctly that the RakuAST compiler takes way less memory ?

[19:21] <MasterDuke> hm. well i think there were one or two commits that didn't use fastutil but i thought would help, i'll try to measure them independently

[19:21] <Voldenet> Yes

[19:21] <Voldenet> but it takes a lot more time

[19:22] <Voldenet> (both profiles are not full, I didn't plan to use them for anything)

[19:22] <Voldenet> v6c consumes similar amount of memory

[19:31] <Voldenet> I'm speculating that it takes less memory in general, but some frequent list/dict gets a lot bigger than it needs to

[19:34] <Voldenet> I might re-run that later while doing more accurate profiling, for now I simply tried to build it all

[19:38] <MasterDuke> could you try with just the change in https://github.com/MasterDuke17/nqp/commit/c736e9988c492814d063e5e43172a68b81df0bfd (but done to stock nqp, not my branch)?

[19:39] <MasterDuke> probably afk for a while &

[19:45] <lizmat> greppable6: .AUTOTHREAD

[19:45] <greppable6> lizmat, Found nothing!

[19:47] <lizmat> greppable6: AUTOTHREAD

[19:47] <greppable6> lizmat, Found nothing!

[20:07] <[Coke]> MasterDuke: thanks

[20:53] *** japhb left
[21:02] *** japhb joined
[22:40] *** sena_kun left
[23:37] <Geth> ¦ rakudo/main: fb7e44fcd5 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[23:37] <Geth> ¦ rakudo/main: Streamline bind_sig, is_bindable, bind_cap_to_sig

[23:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fb7e44fcd5

