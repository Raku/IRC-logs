[02:05] *** japhb left
[02:09] *** japhb joined
[03:09] *** MasterDuke joined
[05:31] *** MasterDuke left
[09:29] *** sena_kun joined
[12:59] *** rba left
[13:02] *** rba joined
[14:53] <Geth> ¦ nqp/add-is-interactive: 430373b14c | ab5tract++ | src/HLL/Compiler.nqp

[14:53] <Geth> ¦ nqp/add-is-interactive: Add is-interactive to HLL::Compiler

[14:53] <Geth> ¦ nqp/add-is-interactive: 

[14:53] <Geth> ¦ nqp/add-is-interactive: This commit nukes the hard-to-grok distinction of

[14:53] <Geth> ¦ nqp/add-is-interactive: `interactive` vs `non-interactive` repl-modes and

[14:53] <Geth> ¦ nqp/add-is-interactive: replaces it with the following options:

[14:53] <Geth> ¦ nqp/add-is-interactive: 

[14:53] <Geth> ¦ nqp/add-is-interactive:     - `tty`

[14:53] <Geth> ¦ nqp/add-is-interactive: <…commit message has 21 more lines…>

[14:53] <Geth> ¦ nqp/add-is-interactive: review: https://github.com/Raku/nqp/commit/430373b14c

[15:02] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: b3d1b1da94 | ab5tract++ | 3 files

[15:02] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: Be the change you wish to see

[15:02] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: review: https://github.com/rakudo/rakudo/commit/b3d1b1da94

[15:17] <Geth> ¦ nqp/add-is-interactive: 73289f5a7b | ab5tract++ | src/HLL/Compiler.nqp

[15:17] <Geth> ¦ nqp/add-is-interactive: Update repl-mode options in HLL::Compiler

[15:17] <Geth> ¦ nqp/add-is-interactive: 

[15:17] <Geth> ¦ nqp/add-is-interactive: This commit nukes the hard-to-grok distinction of

[15:17] <Geth> ¦ nqp/add-is-interactive: `interactive` vs `non-interactive` repl-modes and

[15:17] <Geth> ¦ nqp/add-is-interactive: replaces it with the following options:

[15:17] <Geth> ¦ nqp/add-is-interactive: 

[15:17] <Geth> ¦ nqp/add-is-interactive:     - `tty`

[15:17] <Geth> ¦ nqp/add-is-interactive: <…commit message has 21 more lines…>

[15:17] <Geth> ¦ nqp/add-is-interactive: review: https://github.com/Raku/nqp/commit/73289f5a7b

[15:19] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: 295890e243 | ab5tract++ | tools/templates/NQP_REVISION

[15:19] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: Update with newest relevant NQP commit

[15:19] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: review: https://github.com/rakudo/rakudo/commit/295890e243

[15:43] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: 78ef764d1b | ab5tract++ | 2 files

[15:43] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: Migrate REPL tests to repl-mode=process

[15:43] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: review: https://github.com/rakudo/rakudo/commit/78ef764d1b

[15:45] <ugexe> ab5tract: i think a good reason for not including many things in the core that seem ok now is that often those things were written before or without long term design considerations. The classic example would probably be php and its multiple methods that do the same thing but some more securely than others. They threw all sorts of features into the language where it was easy enough to implement

[15:45] <ugexe> but there was little thought into the design. For example a path library probably has to make some less than perfect tradeoffs to be cross platform (for example how to treat symlinks, file locking, etc on windows). To be clear I'm not arguing the stdlib or core should be tiny; I like Golangs stdlib but everything in it had a lot of design consideration including areas that should be taken into

[15:45] <ugexe> account but are often ignored until later (such as windowsy things). Golang can habve a package manager in the core because they have tar and ssl in the core and they work on any platform. 

[15:46] <ab5tract> yeah, that's fair. Maybe we can develop some rubrik for this though

[15:47] <ab5tract> In terms of Test::Helpers, we have thousands of tests in roast running this code

[15:47] <ugexe> i think for something to be included in the core the author should be familiar with the problem space pretty well, not just having learned it as they put together the thing. and they should be familiar with that problem space across platforms as well unfortunately

[15:48] <ugexe> from what i remember Test.rakumod is already a mess, which probably puts people off to adding more test stuff based on it (even if it will never go away) 

[15:49] <ab5tract> it doesn't feel particularly messy from a user point of view until you start wondering why things are missing

[15:49] <ab5tract> s/you/I/

[15:50] <ab5tract> and why would Test ever go away? messy code can be refactored as long as it presents the same interface

[15:51] <ugexe> yeah but i think multiple people have tried refactoring it, including myself. largely to get it to work better / at-all in parallel 

[15:51] <ugexe> it has quite a few globals i think was the main thing

[15:53] <ab5tract> I imagine it could be significantly simplified via RakuAST/macros

[15:55] <ab5tract> but even if it were just replaced wholesale, don't we have the capability via `:api<>` to easily replace it even with a revised and incompatible interface?

[15:55] <[Coke]> we also have the concept of rakudo not being the official version - which is more of an ideal at this point than a reality - that means that if we expose something and say it's part of the spec, we're having an impact outside of rakudo. I feel like this was a stronger prohibition 15 years ago than it is today. :|

[15:55] <ugexe> ab5tract: no, because we dont have a dual life mechamism

[15:56] <ugexe> old versions of raku dont have access to other versions of Test

[15:58] <ab5tract> that doesn't seem important to me, we specifiy minimum language versions in META6.json

[15:58] <ab5tract> that logic seems to imply that no one would ever code against anything besides v6.c

[15:59] <ab5tract> it even seems to me that 

[15:59] <ab5tract> Test:api<2.x> could be de-coupled from language revisions via a specification in test-depends

[16:00] <[Coke]> or test-depends on v6.e

[16:38] <ugexe> Language version doesn’t map to core library versions 

[16:40] <ab5tract> I'm not sure I understand. If v6.e introduced a Test:api<2.0>, then wouldn't such a mapping exist?

[16:41] <ab5tract> and then if a user had Test:api<2.1> in their test-depends, I would expect the module to fail to install on rakudo releases that don't include that version of Test

[16:42] <[Coke]> I think that sounds reasonable, but I don't think any of that scaffolding exists.

[16:43] <ab5tract> true. this has been the subject of quite some debate over the years.

[16:44] <ab5tract> (the relationship of rakudo releases to defining user expectations about what is provided by `raku` and Raku)

[16:45] <ugexe> I’m typing in a phone so it’s difficult to explain the nuance right now. But another thing is that all core modules share the same distribution 

[16:46] <ugexe> I.e. making a test api 2.1 that requires 6.e also does the same to e.g. NativeCall

[16:52] <ugexe> regardless i think we need a dual life strategy, which means splitting the core modules into separate distributions (harder than it sounds do to internal uses of -Ilib needing to be -Ilib/Test -Ilib/NativeCall etc) as well as releasing every change to those modules to an ecosystem

[17:01] <ab5tract> ugexe: ahhh, ok the shared distribution issue clarifies a a lot

[17:15] <[Coke]> why is rakudo-m-early-build using the *installed* nqp path?

[17:16] <[Coke]> if we're doing --gen-nqp, we should be using the one we gen'd, yes?

[17:25] <ab5tract> Ah, this answers the query I just posed in #raku

[17:25] <[Coke]> also, cannot build on windows anymore (it's been 3 months since I built there) - nuking nqp and updating rakudo to 2024.10 got me far, but now dying on building CORE.c.setting - tried also nuking the install directory. no love.

[17:25] <[Coke]> C:\Strawberry\perl\bin\perl.exe Configure.pl "--gen-moar" "--gen-nqp" "--backends=moar" "--prefix=C:\raku" $*

[17:26] <[Coke]> ^^ Contents of config.status

[17:26] <ab5tract> Well we have been flying blind on CI/CD for windows … I guess maybe a genuine breakage got through :(

[17:27] <[Coke]> (still using installed nqp, presumably it's installed by the time the initial config step is done. ah well

[17:27] <[Coke]> Yah, will start trying previous release tags, I guess.

[17:27] <[Coke]> then I can bisect if I find something working.

[17:31] <ab5tract> In NQP::Config::Rakudo I see that nqp_home is set to $prefix/share/nqp of no —nqp-home is specified

[17:32] *** japhb left
[17:32] <ab5tract> s/of/if/

[17:37] *** japhb joined
[17:55] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: 35baad52a5 | ab5tract++ | t/02-rakudo/repl.t

[17:55] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: Add test for failure of repl-mode=tty outside of TTY

[17:55] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: review: https://github.com/rakudo/rakudo/commit/35baad52a5

[18:02] <[Coke]> tried 2024.09, 2024.05, no luck so far. Guessing my build config is borked, somehow.

[18:11] <ab5tract> Maybe it actually was the Win11 upgrade after all?

[18:11] <ab5tract> Seems strange tho

[18:17] <[Coke]> hard to tell, since I haven't been building regularly - and it's not impacting the win builds at release time...

[18:21] * [Coke] sees a /DAO_ASSUME_WIN_98 or something similar fly past.

[18:23] <[Coke]> jumped releases, but 2023.10 didn't work either. Must be me. Maybe a reinstall of VS.

[18:27] <ugexe> i think the last version i was able to build on win11 was 2023.03 or something

[18:28] <ugexe> win11 on arm at least

[18:30] <ugexe> maybe try 2023.04 and 2022.12 as i see those are the two non broken versions i have on my windows vm

[18:34] <[Coke]> already kicked off the VS update, will try those versions.

[18:35] <[Coke]> ugexe++ ab5tract++

[18:44] <[Coke]> (oof. installing package 604 of 743)

[19:16] <[Coke]> nope022.12 dies same place

[19:16] <[Coke]> nope: 2022.12 dies same place

[19:18] <[Coke]> updating to vs 2022...

[19:27] <Geth> ¦ App-MoarVM-Debug/main: 7f992bbb19 | (Timo Paulssen)++ | lib/App/MoarVM/Debug.rakumod

[19:27] <Geth> ¦ App-MoarVM-Debug/main: Fix holding down enter with "step"

[19:27] <Geth> ¦ App-MoarVM-Debug/main: 

[19:27] <Geth> ¦ App-MoarVM-Debug/main: This also makes the prompt show up after

[19:27] <Geth> ¦ App-MoarVM-Debug/main: the step finishes if it finishes quickly instead

[19:27] <Geth> ¦ App-MoarVM-Debug/main: of slipping in between the request and

[19:27] <Geth> ¦ App-MoarVM-Debug/main: response.

[19:27] <Geth> ¦ App-MoarVM-Debug/main: 

[19:27] <Geth> ¦ App-MoarVM-Debug/main: <…commit message has 7 more lines…>

[19:27] <Geth> ¦ App-MoarVM-Debug/main: review: https://github.com/raku-community-modules/App-MoarVM-Debug/commit/7f992bbb19

[19:46] <patrickb> The CI pipeline that compiles the Windows builds every month is working reliably. So in general the build is working on Windows.

[19:53] <ugexe> does it compile arm builds for windows?

[19:53] <ugexe> my issues are likely related to that

[19:56] <Geth> ¦ Crane/main: baeaebe3c3 | (Elizabeth Mattijsen)++ | 78 files

[19:56] <Geth> ¦ Crane/main: Prepare for transfer to Raku Community Modules

[19:56] <Geth> ¦ Crane/main: review: https://github.com/raku-community-modules/Crane/commit/baeaebe3c3

[20:02] <Geth> ¦ Crane/main: 1171f81c12 | (Elizabeth Mattijsen)++ | 2 files

[20:02] <Geth> ¦ Crane/main: 0.1.2

[20:02] <Geth> ¦ Crane/main: review: https://github.com/raku-community-modules/Crane/commit/1171f81c12

[20:19] <ab5tract> patrickb: I would argue from the 119 commits in R#5642 tells a different story

[20:19] <linkable6> R#5642 [open]: https://github.com/rakudo/rakudo/pull/5642 Try improving the azure pipeline (focus on windows builds)

[20:20] <ab5tract> the CI pipeline that compiles Windows successfully is more an exception to the rule in my experience

[20:24] <[Coke]> OK, doing another build attempt on 2022.12 with VS2022

[20:27] <ab5tract> also: R#5566.

[20:27] <linkable6> R#5566 [open]: https://github.com/rakudo/rakudo/issues/5566 [MoarVM][Windows] Rakudo doesn't build on GitHub "windows-latest"... and any recent Windows OS and/or MSVC release?!

[20:28] <ab5tract> [Coke]: if you're feeling wild, you can try with this MoarVM PR: https://github.com/MoarVM/MoarVM/pull/1852

[20:29] <[Coke]> wouldn't I want a working build first?

[20:29] <[Coke]> or do you suspect that might fix the issue?

[20:36] <[Coke]> heh.

[20:37] <[Coke]> I got past stage start! ... and then died on stage optimize.

[20:40] <patrickb> The pipeline that compiles the precomp builds for every release is also on azure, but a separate pipeline from the one that runs on every commit.

[20:42] <patrickb> https://github.com/rakudo/rakudo/blob/02910e431d0af85cf56d53d4f5b3c4962492a02f/azure-pipelines.yml#L239 This is the precomp pipeline.

[20:43] <patrickb> ugexe: Currently it's not doing ARM.

[20:43] <ab5tract> patrickb: my point is that there success of that CI is not indicative of building on Windows being “generally” successful

[20:43] <patrickb> ugexe: Do you think it's worth it already?

[20:43] <ab5tract> Considering it’s the only known success story at the moment

[20:44] <patrickb> Agreed

[20:44] <ab5tract> [Coke]: that MR is intended to resolve a diagnosed Windows compilation issue

[20:44] <patrickb> Given I just started working on getting the terminal stack on Windows working I'll soon be hitting the same issues...

[20:44] <Geth> ¦ Config-TOML/main: da642b4c11 | (Elizabeth Mattijsen)++ | 59 files

[20:44] <Geth> ¦ Config-TOML/main: Prepare for transfer to Raku Community Modules

[20:44] <Geth> ¦ Config-TOML/main: review: https://github.com/raku-community-modules/Config-TOML/commit/da642b4c11

[20:45] <ab5tract> Whether it solves *your* issue would be useful to know

[20:45] <ab5tract> But I also only proposed it based on your current $*WILD value :)

[20:46] <[Coke]> ab5tract: will check

[20:46] <ugexe> ab5tract: my appveyor builds always work for zef

[20:47] <ugexe> so another success that is reproducible 

[20:47] <ab5tract> patrickb: indeed. I’m also looking forward to hearing how it goes for Bas for Git

[20:47] <ab5tract> ugexe: true I forget about that

[20:48] <ab5tract> IIIRC that also uses 2019, right?

[20:48] <Geth> ¦ Config-TOML/main: e11faf586a | (Elizabeth Mattijsen)++ | 2 files

[20:48] <Geth> ¦ Config-TOML/main: 0.1.3

[20:48] <Geth> ¦ Config-TOML/main: review: https://github.com/raku-community-modules/Config-TOML/commit/e11faf586a

[20:49] <[Coke]> trying 2024.10 rakudo with default nqp and that moarvm branch

[20:49] <ugexe> it uses Visual Studio 2022

[20:50] <ugexe> not sure if that is windows 2019 or not

[20:51] <ugexe> patrickb: i dunno if its worth it probably not. i only use it because i couldnt run x86 windows on a m2

[20:52] <ugexe> yeah it does appear appveyor is using Windows Server 2019 

[20:53] <timo> https://github.com/raku-community-modules/App-MoarVM-Debug/actions/runs/11804318946/job/32884253835 - is this just "windows doesn't like long paths"?

[20:54] <lizmat> perhaps, but maybe it's the auth error [Coke] saw earlier today?

[20:54] <lizmat> hidden inside another error?

[20:55] <lizmat> afk&

[20:55] <timo> i have zero clue how to figure that out

[20:56] <ab5tract> I thought we had the long path problem in Windows fixed :S

[20:59] <timo> no idea

[21:04] <[Coke]> ab5tract: no change, 2024.10 dies the same way

[21:04] <[Coke]> fixed? no

[21:04] <[Coke]> there was a partial PR that I don't think was applied.

[21:05] <ugexe> timo: it doesnt appear too long but im not entirely sure. zef/raku does not see the file, so i would probably try to download the file with curl similar to how zef does and see if that works

[21:05] <ugexe> https://github.com/ugexe/zef/blob/45f3ac7624ea3388e334e756e32fb3a48ef6098a/lib/Zef/Service/Shell/curl.rakumod#L108-L111

[21:06] <ugexe> curl.exe '-L', '-z', $save-as.absolute, '-o', $save-as.absolute, $uri

[21:08] <ab5tract> [Coke]: just double checking that you bumped MOAR_REVISION in nqp, comitted that, and then bumped the NQP_REVISION in rakudo

[21:14] <ab5tract> though since that MR is still a draft, maybe timo++ hasn't fully worked out the kinks

[21:19] <[Coke]> I did a top level configure with gen-nqp, gen-moar=<branch name>

[21:20] <[Coke]> (starting at HEAD on rakudo)

[21:21] <patrickb> timo, ugexe: I'm going to be working mostly on Windows stuff in Rakudo the next few weeks and thus will have a Windows 11 machine running. If there is anything I can do to help push forward with the long path PR or the JIT/RTL PR. Please ping me.

[21:23] <ab5tract> I've never used gen-moar=branch-name

[21:23] <ab5tract> that sounds handy, if it works

[21:38] <ab5tract> tried it and it doesn't work OOB

[21:38] <ab5tract> https://gist.github.com/ab5tract/eb6f2ffbe8d9e7d1df5865ae73d15d59

[21:43] <ab5tract> maybe it works more reliably for others but I don't think I'll trust it

[22:31] <ab5tract> The first example in that gist (without-force-rebuild) is obviously wrong because it didn't recompile MoarVM

[22:43] <timo> patrickb: it'd be cool if you could try slotting https://github.com/GlinkieGamesInc/longjmp_win64 into moar and see if that fixes jit on windows for newer MSVCs. i unfortunately ran out of steam before i could try that

[22:45] <timo> ab5tract: i think it would have worked if the reprotest_tile_compiler branch was rebased onto a newer moarvm version, or alternatively if you --gen-nqp=some_older_version, really anything that gives you a MOAR_VERSION that is older than what's in the branch

[22:46] <ab5tract> ah, that makes sense. seems like more work than managing the revisions myself, but that does explain why it failed

[23:01] <timo> i really really want a flag or environment variable that lets me tell the "your version is too old" part of configure.pl (which also runs multiple times during compilation, so you're not safe by just skipping the actual Configure.pl step) to please shut up and let me continue

[23:15] *** sena_kun left
[23:25] <Geth> ¦ Config-TOML/main: 7b920e4c49 | (Elizabeth Mattijsen)++ | 19 files

[23:25] <Geth> ¦ Config-TOML/main: Make sure tests use -I. logic in fetching modules

[23:25] <Geth> ¦ Config-TOML/main: review: https://github.com/raku-community-modules/Config-TOML/commit/7b920e4c49

[23:49] <Geth> ¦ Digest-xxHash/main: 231b322fce | (Elizabeth Mattijsen)++ | 14 files

[23:49] <Geth> ¦ Digest-xxHash/main: Prepare for transfer to Raku Community Modules

[23:49] <Geth> ¦ Digest-xxHash/main: review: https://github.com/raku-community-modules/Digest-xxHash/commit/231b322fce

[23:52] <Geth> ¦ Digest-xxHash/main: 9899e548d3 | (Elizabeth Mattijsen)++ | .github/workflows/linux.yml

[23:52] <Geth> ¦ Digest-xxHash/main: Fix Linux CI native lib fetching

[23:52] <Geth> ¦ Digest-xxHash/main: review: https://github.com/raku-community-modules/Digest-xxHash/commit/9899e548d3

[23:54] <Geth> ¦ Digest-xxHash/main: d7cda3390f | (Elizabeth Mattijsen)++ | .github/workflows/linux.yml

[23:54] <Geth> ¦ Digest-xxHash/main: Be more specific in native lib version for linux

[23:54] <Geth> ¦ Digest-xxHash/main: 

[23:54] <Geth> ¦ Digest-xxHash/main: Apparently it installs 0.8.1.1 instead of 0.8.2

[23:54] <Geth> ¦ Digest-xxHash/main: review: https://github.com/raku-community-modules/Digest-xxHash/commit/d7cda3390f

[23:55] <lizmat> meh

[23:55] <lizmat> sleep&

