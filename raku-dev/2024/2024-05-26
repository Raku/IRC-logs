[08:04] *** samebchase left
[08:22] *** finanalyst joined
[09:48] *** sena_kun joined
[09:49] *** finanalyst left
[10:17] <Geth> ¦ rakudo/main: 23b94de650 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Any-iterable-methods.rakumod

[10:17] <Geth> ¦ rakudo/main: Introduce Any.are(type --> Bool:D)

[10:17] <Geth> ¦ rakudo/main: 

[10:17] <Geth> ¦ rakudo/main: This would allow a shorter way to say:

[10:17] <Geth> ¦ rakudo/main: 

[10:17] <Geth> ¦ rakudo/main:     sub a(@a where .are ~~ Int) { }

[10:17] <Geth> ¦ rakudo/main: 

[10:17] <Geth> ¦ rakudo/main: namely:

[10:17] <Geth> ¦ rakudo/main: <…commit message has 11 more lines…>

[10:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/23b94de650

[10:29] <ab5tract> lizmat++

[10:51] <ab5tract> m: for "some\nlines".lines -> $_ is raw { $_ ~= "EXTRA"; say $_ }

[10:51] <camelia> rakudo-moar 23b94de65: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[10:52] <lizmat> a line from a string with lines is a Str without container

[10:52] <lizmat> making $_ is raw doesn't change that

[10:52] <lizmat> m: for "some\nlines".lines -> $_ is sopy { $_ ~= "EXTRA"; say $_ }

[10:52] <camelia> rakudo-moar 23b94de65: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Can't use unknown trait 'is' -> 'sopy' in a parameter declaration.␤at <tmp>:1␤    expecting any of:␤        rw␤        readonly␤        copy␤        required␤        raw␤        leading_…»

[10:52] <lizmat> m: for "some\nlines".lines -> $_ is copy { $_ ~= "EXTRA"; say $_ }

[10:52] <camelia> rakudo-moar 23b94de65: OUTPUT: «someEXTRA␤linesEXTRA␤»

[10:52] <ab5tract> ahh

[10:52] <ab5tract> there we go

[10:52] <ab5tract> that was the question I was typing out

[10:53] <lizmat> read your mind :-)

[10:53] <ab5tract> makes total sense, of course

[10:54] <ab5tract> geez, RakuAST is so freaking lovely

[10:54] * lizmat reading your mind?  :-)

[10:54] <ab5tract> that too :)

[11:03] <Geth> ¦ rakudo/main: f17cd58f3d | ab5tract++ (committed using GitHub Web editor) | src/core.c/Parameter.rakumod

[11:03] <Geth> ¦ rakudo/main: Add :invocant option to Parameter.new

[11:03] <Geth> ¦ rakudo/main: 

[11:03] <Geth> ¦ rakudo/main: Previously a user would be required to `use nqp` in order to get

[11:03] <Geth> ¦ rakudo/main: access to the `nqp::const::SIG_ELEM_INVOCANT` constant and manually

[11:03] <Geth> ¦ rakudo/main: twiddle that flags being provided to the `Parameter` constructor.

[11:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f17cd58f3d

[11:05] <Geth> ¦ rakudo/main: a690eeccb5 | ab5tract++ | src/Raku/Actions.nqp

[11:05] <Geth> ¦ rakudo/main: Maintain the entire list of package names in Nodify

[11:05] <Geth> ¦ rakudo/main: 

[11:05] <Geth> ¦ rakudo/main: The previous approach would provide incomplete failure

[11:05] <Geth> ¦ rakudo/main: messages:

[11:05] <Geth> ¦ rakudo/main: 

[11:05] <Geth> ¦ rakudo/main:     Nodify('NotFound')

[11:05] <Geth> ¦ rakudo/main:     # No such node RakuAST::

[11:05] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>

[11:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a690eeccb5

[11:07] <lizmat> ab5tract++

[11:14] <Geth> ¦ rakudo/r1915: c382350bef | ab5tract++ | src/Raku/Actions.nqp

[11:14] <Geth> ¦ rakudo/r1915: RakuAST: Add -n and -p compiler options

[11:14] <Geth> ¦ rakudo/r1915: 

[11:14] <Geth> ¦ rakudo/r1915: Once again RakuAST proves itself by making the implementation of

[11:14] <Geth> ¦ rakudo/r1915: this feature dead-simple while also fixing a long-standing bug.

[11:14] <Geth> ¦ rakudo/r1915: 

[11:14] <Geth> ¦ rakudo/r1915: From R#1915 (#1915):

[11:14] <Geth> ¦ rakudo/r1915: 

[11:14] <linkable6> R#1915 [open]: https://github.com/rakudo/rakudo/issues/1915 [LTA] LTA error message when using ${_}

[11:14] <Geth> ¦ rakudo/r1915: <…commit message has 7 more lines…>

[11:14] <Geth> ¦ rakudo/r1915: review: https://github.com/rakudo/rakudo/commit/c382350bef

[11:15] <ab5tract> now to figure out how to actually test this :)

[11:17] *** samcv left
[11:18] <Geth> ¦ rakudo: ab5tract++ created pull request #5581: RakuAST: Add -n and -p compiler options

[11:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5581

[11:30] <nine> patrickb: finally managed to concentrate enough to give you an answer :) Sorry for the delay

[11:31] <nine> ab5tract: that PR of yours makes me wonder how -n and -p are implemented in the old frontend. Do I even want to look? :D

[11:31] <ab5tract> probably not :)

[11:33] <ab5tract> As usual, there's a fair amount of indirection with and of course our good friend `make_topic_block_ref` makes an appearance

[11:33] <ab5tract> honestly it's not the most gruesome of base examples, but in terms of actually resolving the bug? that's where the sausage factory lives

[11:57] <Geth> ¦ rakudo/r1590: 81c7064ba7 | ab5tract++ | 3 files

[11:57] <Geth> ¦ rakudo/r1590: Provide deeper context into `run` failures

[11:57] <Geth> ¦ rakudo/r1590: 

[11:57] <Geth> ¦ rakudo/r1590: After 92bd7e4, we stopped returning an exit code of `-1` for

[11:57] <Geth> ¦ rakudo/r1590: cases when attempting to `run` a nonexistent command.

[11:57] <Geth> ¦ rakudo/r1590: 

[11:57] <Geth> ¦ rakudo/r1590: This patch returns the previous behavior while also surfacing

[11:57] <Geth> ¦ rakudo/r1590: the underlying error from `libuv`, which makes it much more

[11:57] <Geth> ¦ rakudo/r1590: <…commit message has 10 more lines…>

[11:58] <Geth> ¦ rakudo/r1590: review: https://github.com/rakudo/rakudo/commit/81c7064ba7

[12:00] <ab5tract> nine: adding the error code to the callback was indeed easy :)

[12:10] <Geth> ¦ rakudo/main: c021e6889c | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[12:10] <Geth> ¦ rakudo/main: Also handle type.Int(type) in 6.e

[12:10] <Geth> ¦ rakudo/main: 

[12:10] <Geth> ¦ rakudo/main: Spotted while writing tests

[12:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c021e6889c

[12:11] <Geth> ¦ roast: 103a9f4a11 | (Elizabeth Mattijsen)++ | S29-any/are.t

[12:11] <Geth> ¦ roast: Add tests for .are(type)

[12:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/103a9f4a11

[12:24] <Geth> ¦ rakudo/r1915: 4ac06e5da4 | ab5tract++ | src/Raku/Actions.nqp

[12:24] <Geth> ¦ rakudo/r1915: RakuAST: Add -n and -p compiler options

[12:24] <Geth> ¦ rakudo/r1915: 

[12:24] <Geth> ¦ rakudo/r1915: Once again RakuAST proves itself by making the implementation of

[12:24] <Geth> ¦ rakudo/r1915: this feature dead-simple while also fixing a long-standing bug.

[12:24] <Geth> ¦ rakudo/r1915: 

[12:24] <Geth> ¦ rakudo/r1915: From R#1915 (#1915):

[12:24] <Geth> ¦ rakudo/r1915: 

[12:25] <linkable6> R#1915 [open]: https://github.com/rakudo/rakudo/issues/1915 [LTA][Fixed in RakuAST] LTA error message when using ${_}

[12:25] <Geth> ¦ rakudo/r1915: <…commit message has 7 more lines…>

[12:25] <Geth> ¦ rakudo/r1915: review: https://github.com/rakudo/rakudo/commit/4ac06e5da4

[12:51] <Geth> ¦ rakudo/r1915: a61a0dd7ea | ab5tract++ | 2 files

[12:51] <Geth> ¦ rakudo/r1915: RakuAST: Add -n and -p compiler options

[12:51] <Geth> ¦ rakudo/r1915: 

[12:51] <Geth> ¦ rakudo/r1915: Once again RakuAST proves itself by making the implementation of

[12:51] <Geth> ¦ rakudo/r1915: this feature dead-simple while also fixing a long-standing bug.

[12:51] <Geth> ¦ rakudo/r1915: 

[12:51] <Geth> ¦ rakudo/r1915: From R#1915 (#1915):

[12:51] <Geth> ¦ rakudo/r1915: 

[12:51] <Geth> ¦ rakudo/r1915: <…commit message has 7 more lines…>

[12:51] <linkable6> R#1915 [open]: https://github.com/rakudo/rakudo/issues/1915 [LTA][Fixed in RakuAST] LTA error message when using ${_}

[12:52] <Geth> ¦ rakudo/r1915: review: https://github.com/rakudo/rakudo/commit/a61a0dd7ea

[12:52] <Geth> ¦ rakudo/main: 53eebb7c58 | ab5tract++ | 2 files

[12:52] <Geth> ¦ rakudo/main: RakuAST: Add -n and -p compiler options

[12:52] <Geth> ¦ rakudo/main: 

[12:52] <Geth> ¦ rakudo/main: Once again RakuAST proves itself by making the implementation of

[12:52] <Geth> ¦ rakudo/main: this feature dead-simple while also fixing a long-standing bug.

[12:52] <Geth> ¦ rakudo/main: 

[12:52] <Geth> ¦ rakudo/main: From R#1915 (#1915):

[12:52] <Geth> ¦ rakudo/main: 

[12:52] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[12:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/53eebb7c58

[12:57] <Geth> ¦ rakudo/main: aca5e4c129 | ab5tract++ | 3 files

[12:57] <Geth> ¦ rakudo/main: Provide deeper context into `run` failures

[12:57] <Geth> ¦ rakudo/main: 

[12:57] <Geth> ¦ rakudo/main: After 92bd7e4, we stopped returning an exit code of `-1` for

[12:57] <Geth> ¦ rakudo/main: cases when attempting to `run` a nonexistent command.

[12:57] <Geth> ¦ rakudo/main: 

[12:57] <Geth> ¦ rakudo/main: This patch returns the previous behavior while also surfacing

[12:57] <Geth> ¦ rakudo/main: the underlying error from `libuv`, which makes it much more

[12:57] <Geth> ¦ rakudo/main: <…commit message has 10 more lines…>

[12:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/aca5e4c129

[13:06] <Geth> ¦ nqp/main: d8a7e5c440 | ab5tract++ | tools/templates/MOAR_REVISION

[13:06] <Geth> ¦ nqp/main: Bump MoarVM

[13:06] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/d8a7e5c440

[13:06] <Geth> ¦ nqp/main: 3003541701 | ab5tract++ | tools/templates/MOAR_REVISION

[13:06] <Geth> ¦ nqp/main: Bump MoarVM

[13:06] <Geth> ¦ nqp/main: 

[13:06] <Geth> ¦ nqp/main: Includes the return of error codes from failed

[13:06] <Geth> ¦ nqp/main: proc runs via the error handling callback.

[13:06] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/3003541701

[13:08] <Geth> ¦ rakudo/main: 1ace350e08 | ab5tract++ | tools/templates/NQP_REVISION

[13:08] <Geth> ¦ rakudo/main: Bump NQP to bump MoarVM

[13:08] <Geth> ¦ rakudo/main: 

[13:08] <Geth> ¦ rakudo/main: Moar now provides the error codes for failed proc runs

[13:08] <Geth> ¦ rakudo/main: by passing it into the error handling callback declared

[13:08] <Geth> ¦ rakudo/main: in Proc::Async.

[13:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1ace350e08

[13:09] <ab5tract> hmm, looks like a transient bump was included in the nqp push... my bad :/

[14:04] <Geth> ¦ roast: 3805504e59 | ab5tract++ | S29-os/system.t

[14:04] <Geth> ¦ roast: Cover run's exception when passed a non-existent command

[14:04] <Geth> ¦ roast: 

[14:04] <Geth> ¦ roast: This address R#1590 and should prevent future regressions.

[14:04] <Geth> ¦ roast: 

[14:04] <Geth> ¦ roast: Obviously if you are working on `run()` or `Proc` related

[14:04] <Geth> ¦ roast: features and you are adjusting the exception text to be even

[14:04] <Geth> ¦ roast: more accurate, do not hesitate to change this test again. It's

[14:04] <linkable6> R#1590 [open]: https://github.com/rakudo/rakudo/issues/1590 [tests needed][regression][severe][procs] Procs should not get back with “exit code: 1” if the program does not exist at all

[14:04] <Geth> ¦ roast: only here to prevent regressions, not improvements.

[14:04] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3805504e59

[14:21] <ab5tract> nine: any particular reason that R#5578 has been left all on its lonesome? :)

[14:21] <linkable6> R#5578 [open]: https://github.com/rakudo/rakudo/pull/5578 Allow reduce to return containers as generated

[14:45] <nine> No. Approved it

[14:48] <Geth> ¦ rakudo/main: ecd7580993 | ab5tract++ | 2 files

[14:48] <Geth> ¦ rakudo/main: Allow reduce to return containers as generated

[14:48] <Geth> ¦ rakudo/main: 

[14:48] <Geth> ¦ rakudo/main: As pointed out in R#2000 (#2000), using `reduce` on a list

[14:48] <Geth> ¦ rakudo/main: that includes a container was losing all knowledge of this

[14:48] <Geth> ¦ rakudo/main: container.

[14:48] <Geth> ¦ rakudo/main: 

[14:48] <Geth> ¦ rakudo/main: The following would previously fail:

[14:48] <linkable6> R#2000 [open]: https://github.com/rakudo/rakudo/issues/2000 [data types][metaop] `reduce` needlessly deconts

[14:48] <Geth> ¦ rakudo/main: <…commit message has 19 more lines…>

[14:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ecd7580993

[15:00] <releasable6__> Next release in ≈4 days and ≈3 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:01] <Geth> ¦ roast: 8c34c67aac | ab5tract++ | S32-list/reduce.t

[15:01] <Geth> ¦ roast: Test for reduce with `is raw`

[15:01] <Geth> ¦ roast: 

[15:01] <Geth> ¦ roast: Containers are now returned when reduce is provided

[15:01] <Geth> ¦ roast: with callables that utilize `is raw`.

[15:01] <Geth> ¦ roast: 

[15:01] <Geth> ¦ roast: This resolves R#2000.

[15:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8c34c67aac

[15:01] <linkable6> R#2000 [open]: https://github.com/rakudo/rakudo/issues/2000 [data types][metaop] `reduce` needlessly deconts

[15:15] <Geth> ¦ rakudo: ab5tract self-assigned feed operator does not recognise sub-form of method calls https://github.com/rakudo/rakudo/issues/4991

[15:26] <Geth> ¦ rakudo/main: cd74aa79a0 | ab5tract++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[15:26] <Geth> ¦ rakudo/main: Add test for andthen chaining with WhateverCodes

[15:26] <Geth> ¦ rakudo/main: 

[15:26] <Geth> ¦ rakudo/main: This tests the behavior described in R#5004 (#5004).

[15:26] <Geth> ¦ rakudo/main: 

[15:26] <Geth> ¦ rakudo/main: Note that the product of `problems(16)` is non-deterministic.

[15:26] <Geth> ¦ rakudo/main: However, since this test only relies on knowing that the expression

[15:26] <Geth> ¦ rakudo/main: lived ok, this is not actually an issue.

[15:26] <linkable6> R#5004 [open]: https://github.com/rakudo/rakudo/issues/5004 [Fixed in RakuAST] Bad variable resolution inside WhateverCode in an andthen chain

[15:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cd74aa79a0

[15:28] <ab5tract> so, if we actually consider the 'Fixed in RakuAST' tests to be "closed", then we are below 1300 open issues :D \o/

[16:05] <nine> nice :)

[16:20] <lizmat> kudos!

[16:39] <ab5tract> re: R#4666 ... do we avoid sorting in Set.gist exclusively for performance reasons? or, maybe a more pertinent question: are we planning to move forward with using `.gist` as the basis for caching?

[16:39] <linkable6> R#4666 [open]: https://github.com/rakudo/rakudo/issues/4666 is cached sometimes fails to cache invocations with hash-like arguments.

[16:42] <ab5tract> there's probably also an argument against sort based solely on disabusing users of any expectations towards stable ordering

[16:49] <nine> Wait.... .gist as basis for caching? How? gist has always been meant for human consumption and it often doesn't even show the whole data

[16:54] <ab5tract> https://github.com/rakudo/rakudo/blob/cd74aa79a00b809ade65adfdd00c875fbbeaf52d/lib/experimental.rakumod#L11

[16:55] <ab5tract> so, maybe I'm an evil genius or maybe I'm simply mad... but changing that hash to `my %cache{Capture}` seems to DWIM :)

[16:58] <nine> Well that comes from a commit quite aptly called "Naively implement "is cached" on Routines" from 2014 and hasn't really been updated since

[17:00] <ab5tract> apparently so :)

[17:00] <nine> Wait, that's actually wrong. Initially it used .WHICH but was changed to .gist in commit 07dcb22d6c3a611ac71441a0be4abe96b8413bf4

[17:01] <nine> "Use .perl instead of .WHICH on Capture as key" "Suggested by masak++.  This will however cause cache misses for named parameters as the keys in Hash.perl are not sorted.  Perhaps they should be?  Even though it is not necessary for roundtripping per se, SortKeys *is* one of the features I always used to switch on on Perl 5's Data::Dumpern when debugging."

[17:02] <nine> Sadly this does not give any indication for why .WHICH wasn't good. lizmat: Remember what the problem was? It's only been 10 years since :D

[17:06] <ab5tract> I've been assuming that it didn't use WHICH because then `my $a = set <a b c>` and `my $b = set <a b c>` would be cached separately

[17:09] <ab5tract> unfortunately that sort of causes the same issue when using `cache{Capture}`

[17:12] <nine> "Marks a subroutine as being memoized, or at least memoizable. In the abstract, this cache is just a hash where incoming argument Captures are mapped to return values.  If the Capture is found in the hash, the return value need not be recalculated.  If you use this trait, the compiler will assume two things:

[17:12] <nine> A given Capture would always calculate the same return value.  That is, there is no state hidden within the dynamic scope of the call.

[17:12] <nine> The cache lookup is likely to be more efficient than recalculating the value in at least some cases, because either most uncached calls would be slower (and reduce throughput), or you're trying to avoid a significant number of pathological cases that are unacceptably slow (and increase latency)."

[17:13] <nine> Unfortunately this also doesn't really tell us how the cache key was intended to be calculated.

[17:14] <ab5tract> Well, at least `.raku` is probably more appropriate than `.gist` .. we fall through to this in `eqv`, IIUC

[17:15] <nine> .gist can't be the answer as it's for human consumption and will e.g. include all values of a long list

[17:15] <ab5tract> yeah, hmm

[17:15] <nine> .Str has ambiguous output, e.g. <a b c> vs <<a "b c">>

[17:15] <nine> So .raku seems to be the top contender

[17:16] <ab5tract> however, if .raku doesn't include all the values of a long list, then it might create keys that match for more than one Capture, right?

[17:17] <ab5tract> thorny problem :)

[17:18] <ab5tract> presumably you start to lose the efficiency of caching really quickly if you resort to keeping a list and calling first with a smartmatch on it 

[17:19] <nine> But .raku definitely should include all values. It's purpose is to "return a perlish representation of the object, so that calling EVAL on the returned string reproduces the object as accurately as possible."

[17:20] <ab5tract> ah, ok. I must have misinterpreted your comment about .gist and long lists

[17:20] <nine> gist bad, raku good :)

[17:21] <ab5tract> then I guess the last missing puzzle piece for raku is: do we add sorting to unordered collections just to satisfy this experimental caching?

[17:21] <ab5tract> *sorting to .raku on unordered collections

[17:22] <nine> Interestingly we already do sort on Maps and thus Hashes

[17:23] <ab5tract> wild! TIL

[17:23] <nine> And we sort in Setty.gist but not in .Str or .raku

[17:23] <nine> I doubt there's a system there

[17:28] <ab5tract> ah, that's weird... Capture.gist would call Setty.gist, it contained a set, right? but then 

[17:28] <ab5tract> the code in the github issue should actually work ...

[18:03] <lizmat> I think the implementation of is cached predates ValuObjAt

[18:03] <lizmat> and that was the reason .WHICH didn't make any sense

[18:03] <lizmat> nowadays I guess one could introspect the .WHICH of value types

[18:04] <lizmat> in any case, "is cached" is not threadsafe

[18:07] <[Coke]> I wouldn't expect we'd be able to cache with gist since it's by definition not the full data all the time.

[18:20] <lizmat> m: sub a(|c) { say c; say c.WHICH }; a 1,2,3

[18:20] <camelia> rakudo-moar cd74aa79a: OUTPUT: «\(1, 2, 3)␤Capture|(Int|1)(Int|2)(Int|3)␤»

[18:20] <lizmat> I guess nowadays I would think .WHICH *would* be the best choice

[18:20] <lizmat> sub a(|c) { say c; say c.WHICH }; a 1,2,3, Date.today'

[18:21] <lizmat> m: sub a(|c) { say c; say c.WHICH }; a 1,2,3, Blob.new(1,2,3)

[18:21] <camelia> rakudo-moar cd74aa79a: OUTPUT: «\(1, 2, 3, Blob.new(1,2,3))␤Capture|(Int|1)(Int|2)(Int|3)(Blob|7037807198C22A7D2B0807371D763779A84FDFCF)␤»

[18:21] <lizmat> m: sub a(|c) { say c; say c.WHICH }; a 1,2,3, Blob.new(1,2,4)

[18:21] <camelia> rakudo-moar cd74aa79a: OUTPUT: «\(1, 2, 3, Blob.new(1,2,4))␤Capture|(Int|1)(Int|2)(Int|3)(Blob|AB7911513DEBC7015AD50429A8159771458B24CE)␤»

[18:27] <lizmat> aaah... I know the reason;

[18:27] <lizmat> m: sub a(|c) { say c; say c.WHICH }; my @b = 1,2,3; a @b

[18:27] <camelia> rakudo-moar cd74aa79a: OUTPUT: «\([1, 2, 3])␤Capture|(Array|5008854635240)␤»

[18:28] <lizmat> *that*'s why .gist was being used

[18:31] <lizmat> m: sub a(|c) { say c; say c.WHICH }; a 1,2e0,3

[18:31] <camelia> rakudo-moar cd74aa79a: OUTPUT: «\(1, 2e0, 3)␤Capture|(Int|1)(Num|2)(Int|3)␤»

[18:31] <lizmat> m: sub a(|c) { say c; say c.WHICH }; a 1,2/1,3

[18:31] <camelia> rakudo-moar cd74aa79a: OUTPUT: «\(1, 2.0, 3)␤Capture|(Int|1)(Rat|2/1)(Int|3)␤»

[18:35] <ab5tract> m: sub a(|c) { say c; say c.WHICH }; my @b = 1,2,3; a @b; a my @c = 1,2,3;

[18:35] <camelia> rakudo-moar cd74aa79a: OUTPUT: «\([1, 2, 3])␤Capture|(Array|4205024385712)␤\([1, 2, 3])␤Capture|(Array|4204923602656)␤»

[18:36] <ab5tract> because it would create two cache entries in this case, right?

[18:37] <lizmat> right

[18:37] <lizmat> you would have to look into Positionals, get the .WHICH of each element (potentially recursively)

[18:38] <lizmat> also for Associatives

[18:38] <lizmat> and %_

[18:39] <ab5tract> m: sub a(|c) { say c; say c.WHICH }; my $a = set <a z r v x>; a($a) xx 4;

[18:39] <camelia> rakudo-moar cd74aa79a: OUTPUT: «\(Set.new("x","z","r","v","a"))␤Capture|(Scalar|2793189052704)␤\(Set.new("x","z","r","v","a"))␤Capture|(Scalar|2793189052704)␤\(Set.new("x","z","r","v","a"))␤Capture|(Scalar|2793189052704)␤\(Set.new("x","z","r","v","a"))␤Capture|(Scalar|…»

[18:40] <ab5tract> m: sub a(|c) { say c; }; my $a = set <a z r v x>; a($a) xx 4;

[18:40] <camelia> rakudo-moar cd74aa79a: OUTPUT: «\(Set.new("x","a","z","v","r"))␤\(Set.new("x","a","z","v","r"))␤\(Set.new("x","a","z","v","r"))␤\(Set.new("x","a","z","v","r"))␤»

[18:40] <lizmat> m: sub a(|c) { say c.WHICH; }; my $a = set <a z r v x>; a($a) xx 4;

[18:40] <camelia> rakudo-moar cd74aa79a: OUTPUT: «Capture|(Scalar|3630406314496)␤Capture|(Scalar|3630406314496)␤Capture|(Scalar|3630406314496)␤Capture|(Scalar|3630406314496)␤»

[18:41] <lizmat> m: sub a(|c) { say c.WHICH; }; my $a := set <a z r v x>; a($a) xx 4;

[18:41] <camelia> rakudo-moar cd74aa79a: OUTPUT: «Capture|(Set|FAC542F2B0E327C881C5BDC6F6FDD9B0AC03DBB3)␤Capture|(Set|FAC542F2B0E327C881C5BDC6F6FDD9B0AC03DBB3)␤Capture|(Set|FAC542F2B0E327C881C5BDC6F6FDD9B0AC03DBB3)␤Capture|(Set|FAC542F2B0E327C881C5BDC6F6FDD9B0AC03DBB3)␤»

[18:41] <ab5tract> m: use experimental :cache; sub a($s) is cached { say $s; }; my $a = set <a z r v>; a($a) xx 44;

[18:41] <camelia> rakudo-moar cd74aa79a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Error while importing from 'experimental': no such tag 'cache'␤at <tmp>:1␤------> use experimental :cache⏏; sub a($s) is cached { say $s; }; my $a␤»

[18:42] <ab5tract> m: use experimental :cached; sub a($s) is cached { say $s; }; my $a = set <a z r v>; a($a) xx 44;

[18:42] <camelia> rakudo-moar cd74aa79a: OUTPUT: «Set(a r v z)␤»

[18:42] <ab5tract> so weird.. locally I get multiple orderings, just like in R#4666

[18:42] <linkable6> R#4666 [open]: https://github.com/rakudo/rakudo/issues/4666 is cached sometimes fails to cache invocations with hash-like arguments.

[18:43] <lizmat> anyways, I think the correct approach would be:

[18:43] <lizmat> drill down Positionals and Associatives

[18:43] <lizmat> if any value is not an ObjValueAt, then stop trying to cache

[18:44] <lizmat> create a key and add a lock for thread-safety

[18:44] <lizmat> and rewrite using nqp  :-)

[18:44] <ab5tract> ugh

[18:44] <lizmat> well, "is cached" is an optimization

[18:45] <ab5tract> agreed

[18:45] <lizmat> so deciding it is too much trouble to create a key somewhere, is also valid

[18:47] <ab5tract> m: use experimental :cached; sub a($s) is cached { say $s; }; a(<a z r v>.Set) xx 44;

[18:47] <camelia> rakudo-moar cd74aa79a: OUTPUT: «Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z)␤Set(a r v z…»

[18:47] <ab5tract> that was unexpected :)

[18:49] *** finanalyst joined
[18:59] <ab5tract> evalable6: https://gist.githubusercontent.com/ab5tract/107ee9a925e2150803bd012d489a88dd/raw/232ae378c6f47638de7cd8d23f1c5d48a676d931/r4666.raku

[18:59] <evalable6> ab5tract, Successfully fetched the code from the provided URL

[18:59] <evalable6> ab5tract, rakudo-moar cd74aa79a: OUTPUT: «not cached: 2 3 1␤Saw 1 occurrence of deprecate…»

[18:59] <evalable6> ab5tract, Full output: https://gist.github.com/cb2d292e232f158d5a7f5f585819ec63

[19:01] *** sena_kun left
[19:02] *** sena_kun joined
[19:18] <lizmat> meh looks like Github is having issues

[19:31] *** finanalyst left
[19:35] <ab5tract> trying again:

[19:35] <ab5tract> m: https://gist.githubusercontent.com/ab5tract/107ee9a925e2150803bd012d489a88dd/raw/6345c992120807cb0fce5aa0c3f22f8a3a3969ac/r4666.raku

[19:35] <camelia> rakudo-moar cd74aa79a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> https:⏏//gist.githubusercontent.com/ab5tract/10␤    expecting any of:␤        colon pair␤»

[19:35] <ab5tract> evalable6: https://gist.githubusercontent.com/ab5tract/107ee9a925e2150803bd012d489a88dd/raw/6345c992120807cb0fce5aa0c3f22f8a3a3969ac/r4666.raku

[19:35] <evalable6> ab5tract, Successfully fetched the code from the provided URL

[19:35] <evalable6> ab5tract, rakudo-moar cd74aa79a: OUTPUT: «not cached: 3 1 2␤Saw 1 occurrence of deprecate…»

[19:35] <evalable6> ab5tract, Full output: https://gist.github.com/523921d71054bf84e21cdc449ff13aca

[19:36] <ab5tract> 🤷

[20:18] <Geth> ¦ rakudo/r4666: b02dc31bc2 | ab5tract++ | 3 files

[20:18] <Geth> ¦ rakudo/r4666: Provide some fixups to experimental :cached

[20:18] <Geth> ¦ rakudo/r4666: 

[20:18] <Geth> ¦ rakudo/r4666: Addresses R#4666 (#4666), the discussion of which

[20:18] <Geth> ¦ rakudo/r4666: raised several issues with the previous `is cached`

[20:18] <Geth> ¦ rakudo/r4666: implementation:

[20:18] <Geth> ¦ rakudo/r4666: 

[20:18] <Geth> ¦ rakudo/r4666: - `.gist` is not appropriate as details may be truncated,

[20:18] <linkable6> R#4666 [open]: https://github.com/rakudo/rakudo/issues/4666 is cached sometimes fails to cache invocations with hash-like arguments.

[20:18] <Geth> ¦ rakudo/r4666: <…commit message has 10 more lines…>

[20:18] <Geth> ¦ rakudo/r4666: review: https://github.com/rakudo/rakudo/commit/b02dc31bc2

[20:18] <Geth> ¦ rakudo: ab5tract++ created pull request #5582: Provide some fixups to experimental :cached

[20:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5582

[20:30] <ab5tract> I don't imagine that it's actually possible, but it would be pretty nice to be able to only use a lock when actually necessary

[20:31] <ab5tract> ie, not pay their price in single-threaded code. though I guess the cost is reduced when there is no contention...

[20:39] <lizmat> indeed... the overhead is pretty minimal when single threaded

[20:42] <ab5tract> lizmat: from the commit message - "Additionally, Setty.raku and Baggy.raku have been adjusted to produce sorted contents."

[20:42] <ab5tract> otherwise there will be cache misses for these unordered collections

[20:42] <lizmat> ah... ok... hmmm

[20:43] <ab5tract> Hash.raku already does this

[20:49] *** hankache joined
[20:54] <ab5tract> I considered doing the recursive checking of the capture elements, but it would end up looking almost exactly like calling `.raku`, since the goal would be to end up with a unique identifier for values :)

[21:17] *** hankache left
[22:25] <Geth> ¦ rakudo: ab5tract self-assigned Inconsistencies when defining postcircumfix operators  https://github.com/rakudo/rakudo/issues/4722

[23:09] *** sena_kun left
