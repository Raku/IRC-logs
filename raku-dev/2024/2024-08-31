[00:09] <[Coke]> pretty sure I undersized the VM.

[01:08] <[Coke]> blin depends on Pakku? 

[01:13] <ab5tract> Technically it depends on everything:)

[01:14] <ab5tract> But I forget how tied it is to Pakku

[01:14] <[Coke]> ===SORRY!=== Error while compiling /home/azureuser/Blin/site#sources/EDD4D63DD8EE273BF634E5332B98B365B8455AD4 (Whateverable)

[01:14] <[Coke]> Merging GLOBAL symbols failed: duplicate definition of symbol SSL

[01:15] <ab5tract> Yeah, it does need Pakku

[01:17] <ab5tract> It looks like I had to do some wrangling https://github.com/ab5tract/whateverable

[01:17] <ab5tract> Maybe try using that repo instead

[01:19] <[Coke]> Thanks.

[01:28] <[Coke]> same error installing your version

[01:35] <[Coke]> bug on IRC::Client suggests installing an older version of that to avoid the problem, but then I get a different error installing Whateverable.

[01:38] <[Coke]> will pick this up again tomorrow

[02:29] *** ilogger2 left
[02:55] *** ilogger2 joined
[06:48] <nine> CI threw an error on that PR:

[06:48] <nine> MoarVM panic: Internal error: zeroed target thread ID in work pass

[06:48] <nine> t/02-rakudo/12-proto-arity-count.t

[06:53] <[Tux]> Rakudo v2024.08-9-g23da1ce11 (v6.d) on MoarVM 2024.08-6-gac82e446f

[06:53] <[Tux]> csv-test-xs-20      0.141 -  0.142

[06:53] <[Tux]> test-t --race       0.260 -  0.264

[06:53] <[Tux]> csv-ip5xs           0.263 -  0.265

[06:53] <[Tux]> test-t              0.402 -  0.410

[06:53] <[Tux]> csv-ip5xs-20        1.144 -  1.162

[06:53] <[Tux]> test-t-20 --race    1.182 -  1.252

[06:53] <[Tux]> csv-parser          1.488 -  1.522

[06:53] <[Tux]> test                1.803 -  1.843

[06:53] <[Tux]> test-t-20           4.819 -  4.869

[06:53] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[08:11] *** finanalyst joined
[09:29] *** finanalyst left
[10:38] *** sena_kun joined
[11:30] <Geth> ¦ problem-solving: ab5tract assigned to samcv Issue `uniprop` and friends are buggy, inconsistent, and potentially replaceable https://github.com/Raku/problem-solving/issues/437

[11:31] <ab5tract> that's been cooking for a *long* time :)

[11:40] <ab5tract> samcv appears to be auto assigned for unicode issues

[12:22] <nine> This is odd. A @a = do loop { last; } basically compiles to Seq.from-loop(-> { last }, -> { 1 }). What's odd about that is that it could just be Seq.from-loop(-> { last }) which would create a lazy Seq. For some reason, we don't use that.

[12:22] <nine> m: my @arr = do loop { state $x = 0; last if ++$x > 2; $x }; say @arr

[12:22] <camelia> rakudo-moar 23da1ce11: OUTPUT: «[1 2]␤»

[12:22] <nine> BUT:

[12:22] <nine> m: my @arr = do while True { state $x = 0; last if ++$x > 2; $x }; say @arr

[12:22] <camelia> rakudo-moar 23da1ce11: OUTPUT: «[...]␤»

[12:24] <ab5tract> oh, that is strange indeed

[12:25] <ab5tract> I wonder which of these is the oversight

[12:35] <Geth> ¦ rakudo/main: 65c318f091 | (Stefan Seifert)++ | 2 files

[12:35] <Geth> ¦ rakudo/main: RakuAST: avoid compile time type checks involving subsets

[12:35] <Geth> ¦ rakudo/main: 

[12:35] <Geth> ¦ rakudo/main: The where clause on a subset can have side-effects. Thus we must not run

[12:35] <Geth> ¦ rakudo/main: this code at compile time if we can avoid it.

[12:35] <Geth> ¦ rakudo/main: 

[12:35] <Geth> ¦ rakudo/main: Fixes: subset A of Int where { $_ < state $x++ }; my A $y = -1; $y = 0

[12:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/65c318f091

[12:35] <Geth> ¦ rakudo/main: 9ffadf8027 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[12:35] <Geth> ¦ rakudo/main: RakuAST: properly support state scope on signature declarations

[12:35] <Geth> ¦ rakudo/main: 

[12:35] <Geth> ¦ rakudo/main: Fixes: state (@a) = (1, 2); # to only initialize on first run

[12:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9ffadf8027

[12:35] <Geth> ¦ rakudo/main: 7c3b2b181c | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[12:35] <Geth> ¦ rakudo/main: RakuAST: first bits of lazy loop implementation

[12:35] <Geth> ¦ rakudo/main: 

[12:35] <Geth> ¦ rakudo/main: Fixes: my @a = do loop { last; };

[12:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7c3b2b181c

[13:01] <nine> ab5tract: all RakuAST tests fail on latest main due to: Cannot resolve caller splice(Array:D: Int:D, Int:D); none of these signatures matches:

[13:02] <nine> ...

[13:02] <nine>     (Array:D $:: Int:D $offset, Int:D $size, **@new, *%_ --> Array:D)

[13:04] <nine> Reverting c2c8d7a01362e21e9ae71a5e962d5003472f89c0 fixes the problem

[13:04] <linkable6> (2024-08-24) https://github.com/rakudo/rakudo/commit/c2c8d7a013 [6.e] Provide `is revision-gated("6.x")` trait

[13:06] <ab5tract> weird, I didn't see any test failures locally

[13:07] <nine> Did you test with RAKUDO_RAKUAST=1?

[13:07] <ab5tract> do you mean the tests in t/12-rakuast

[13:07] <nine> No, spectests

[13:09] <ab5tract> interesting.. I thought I had done it with and without

[13:09] <ab5tract> let me see

[13:10] <ab5tract> when you say "all", are you saying literally 0/1352 spectests?

[13:11] <nine> As far as I can tell. I didn't wait for the run to complete as it takes ages since it's trying to compile Test.rakumod for about every test

[13:11] <ab5tract> i see...

[13:13] <ab5tract> damn.. clearly I didn't run the test suite with RAKUDO_RAKUAST=1 after all :(

[13:14] <nine> Sounds like you can repro :)

[13:15] <ab5tract> yeah.. I would never have merged if I say only 21 files in t/ are passing in RakuAST

[13:15] <ab5tract> *saw

[13:20] <ab5tract> give me a bit, if I can fix it in a reasonable amount of time we can roll forward

[13:20] <ab5tract> otherwise we'll revert

[13:22] <nine> k

[13:28] <ab5tract> from a first glance and guess, I think the issue is related to fetching $?LANGUAGE-REVISION via getlexcaller

[13:28] <ab5tract> `say("LANGUAGE REVISION: " ~ nqp::getlexcaller('$?LANGUAGE-REVISION') // "NOOOO");`

[13:28] <ab5tract> lang-call cannot invoke object of type 'VMNull' belonging to no language

[13:29] <nine> I guess we do catch that exception somewhere and then treat it as a dispatch failure instead of an implementation error?

[13:30] <ab5tract> yeah, I *think* that's what we are seeing

[13:33] <ab5tract> or else nqp::getlexcaller is not throwing an exception within dispatchers.nqp (there is a lexcaller, after all)

[13:33] <ab5tract> but it goes to to the `no candidates` path because `(my $caller-revision := nqp::getlexcaller('$?LANGUAGE-REVISION'))` isn't truthy

[13:34] <ab5tract> easy enough to check this out

[13:37] <ab5tract> yeah, that's it

[13:37] <ab5tract> this fixes it: `(my $caller-revision := nqp::getlexcaller('$?LANGUAGE-REVISION') // 1)`

[13:38] <ab5tract> so, while RakuAST sets $?LANGUAGE-REVISION for the QAST it outputs, it's not setup for its own scope, if that makes sense

[13:40] <nine> Yes, it's not set in the Compiler's BOOTSTRAP which is NQP after all. So maybe an alternative fix would be to declare it there?

[13:43] <ab5tract> Yeah that would make sense. Is there a BOOTSTRAP specifically for the RakuAST compiler? Because I do set it in compunit-y section of bootstrap.c/BOOTSTRAP.NQP

[13:44] <ab5tract> ahh, no! that was in World

[13:51] <ab5tract> to be clear, I wasn't suggesting the defined-or approach as a genuine fix, but just a fix that proved the theory I proposed

[14:00] <ab5tract> nine: any tips for how to define it, exactly? `[my|our] $?LANGUAGE-REVISION := 1` in BOOTSTRAP.nqp doesn't appear to do the thing

[14:06] <nine> Looking at gen/moar/BOOTSTRAP/v6c.nqp that actually should do the trick. 

[14:11] <ab5tract> trying the nqp::bindlex approach now

[14:13] <ab5tract> in case it's somehow related to the '?' twigil

[14:14] <ab5tract> oh.. that only works when the lexical already exists :S

[14:18] <ab5tract> the BOOTSTRAP files cascade, right?

[14:20] <ab5tract> or am I screwing up by editing bootstrap.c instead of bootsrap.e? FWIW, I also tried the same in `rakuast-prologue.rakumod`

[14:22] <nine> Nah, it's something else. When I add it to RakuAST::CompUnit's check method, it'll work again

[14:24] <nine> Oh, that's because the RakuAST setup code is run in a BEGIN block!

[14:25] <nine> (probably)

[14:26] <ab5tract> ah!

[14:27] <ab5tract> I guess it's also an open question whether nqp::getcomp('Raku').language_version is (or should be) set at this point

[14:28] *** dawids_ joined
[14:28] *** dawids_ left
[14:29] <nine> No that's not a thing in this context

[14:29] <nine> Ok, it's not the BEGIN thing either. Even declaring it in src/Raku/ast/rakuast-prologue.nqp does not help

[14:31] <nine> https://gist.github.com/niner/ef48bf732bb1c67f79e97636ec1f5653 is the only working patch so far

[14:34] <ab5tract> interestingly, this patch also works despite leaning on nqp::getcomp: https://gist.github.com/ab5tract/86782bc95b70344184ca745b6d8f45dd

[14:35] <ab5tract> yours feels cleaner but thought it might still be worth sharing

[14:38] <nine> The source of the problem is that in this case the caller is not Raku code at all, but really NQP code.

[14:38] <nine> So I wonder whether nqp::getlexcaller('$?LANGUAGE-REVISION') // 1 would actually be the correct solution here.

[14:43] <nine> Know what? I'd really commit that and get on with life :) After all, the implicit assumption here is that the caller is Raku code, which clearly is not always true.

[14:46] <ab5tract> Well, RakuAST implementation code is definitely a pretty unique-inbetween

[14:50] <ab5tract> doing the test rounds just to be sure (though were there recent problems introduced by the MoarVM bump?)

[14:53] <ab5tract> I've got 142/1143

[14:58] <nine> sounds close enough ;)

[15:09] <Geth> ¦ rakudo/main: 6fa7c425cb | ab5tract++ | src/vm/moar/dispatchers.nqp

[15:09] <Geth> ¦ rakudo/main: Fix the new revision-gated dispatch logic for the RakuAST compiler

[15:09] <Geth> ¦ rakudo/main: 

[15:09] <Geth> ¦ rakudo/main: Without this, almost all tests fail when RAKUDO_RAKUAST=1.

[15:09] <Geth> ¦ rakudo/main: 

[15:09] <Geth> ¦ rakudo/main: A few different approaches were attempted to ensure that

[15:09] <Geth> ¦ rakudo/main: `$?LANGUAGE-REVISION` would be installed in the lexical scope

[15:09] <Geth> ¦ rakudo/main: that is accessed by `nqp::getlexcaller(...)` in `dispatchers.nqp`

[15:09] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[15:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6fa7c425cb

[15:25] <[Coke]> is jdv the only person with a successful Blin install?

[15:25] *** finanalyst joined
[15:26] <[Coke]> s/install/setup/

[15:28] <ab5tract> [Coke]: those repos I linked to worked for me

[15:34] <[Coke]> ok. I'm still getting the global error

[15:34] <Geth> ¦ rakudo/main: 1081b051d0 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[15:34] <Geth> ¦ rakudo/main: RakuAST: fix compilation error on CompUnit phasers

[15:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1081b051d0

[15:34] <Geth> ¦ rakudo/main: c612b32b0f | (Stefan Seifert)++ | 2 files

[15:34] <Geth> ¦ rakudo/main: RakuAST: ensure INIT phasers run before compunit's ENTER phasers

[15:34] <Geth> ¦ rakudo/main: 

[15:34] <Geth> ¦ rakudo/main: Fixes: INIT say "INIT"; ENTER say "ENTER';

[15:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c612b32b0f

[15:34] <nine> 1147

[15:34] <ab5tract> [Coke]: global error = the SSL one?

[15:35] <ab5tract> nine++

[15:35] <[Coke]> https://github.com/lizmat/IRC-Client/blob/main/META6.json#L10C1-L11C1 - why this very specific version?

[15:35] <[Coke]> ab5tract: yes

[15:35] <[Coke]> (I end up having to have two copies of it installed)

[15:36] <[Coke]> (and am wondering if that might be impacting the global SSL error)

[15:38] <ab5tract> yeah, I don't understand how jdv does this consistently

[15:38] <ab5tract> I just got this error for `podman build -t rakudo-blin .`

[15:38] <ab5tract> `/bin/sh: 1: cannot create /etc/ssh/ssh_config: Directory nonexistent`

[15:40] <ab5tract> the amount of Whateverable that is actually necessary for Blin has very little overlap with all the IRC-oriented hoopla, IIRC

[15:41] <[Coke]> ok, going down the rabbit hole of golfing the symbol merge error (happens just loading xt/lib/Testable.pm6 in Whateverable.

[15:42] <ab5tract> Maybe I'm just getting too old for this, but the amount of bitrot here is just to damn high

[15:42] <ab5tract> *too

[15:44] <ab5tract> [Coke]: I would recommend that you set a reasonable cutoff threshold for $smoldering-rage

[15:46] <ab5tract> because there has got to be an easier way to do what we actually want to do (check a revision (merged or not) against @known-modules)

[15:46] <[Coke]> Here's a minimal golf that you can run inside a whateverable checkout:

[15:47] <ab5tract> that doesn't involve method that don't even know whether they are being called by IRC bots or now (https://github.com/Raku/whateverable/commit/5125b69113983dfa45dd8c6d59606af8c4b730ad#diff-c8002e7e57cc4073fe189ac78edefd21c64a8398d715aa7f96c74941c33a9fad)

[15:47] <[Coke]> raku -I. -e 'use IRC::Client; use Whateverable::Builds'

[15:47] <[Coke]> That triggers the merge error.

[15:47] <ab5tract> it's so irrelevant to the intended use case that I might cry if I stare too long

[15:47] <nine> ab5tract: of course there is

[15:48] <nine> It's https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot

[15:48] <ab5tract> but then again, I'm already near enough to tears given that jnthn(++) hsa left us with a comma build plan that requires Windows

[15:49] <nine> Jesus

[15:51] <ab5tract> I might even ask an LLM about how to interpret this .cmd file (at least call it a .bat, so I know how screwed I am!)  

[15:51] <ab5tract> I guess if an automated translation doesn't Just Work, I'm out a few pnenies and nothing's the worse for it.

[15:53] <ab5tract> nine: it's even pretty cute, in the end. The instructions are: `./comma-build/complete-plugin.cmd -Dintellij.build.use.compiled.classes=false -Dintellij.build.target.os=linux`

[15:54] <ab5tract> oh, and bash registers no problem when interpreting the .cmd file

[16:01] *** sena_kun left
[16:17] <[Coke]> ab5tract: narrowd it down to a completely different module (several times): https://github.com/Raku/whateverable/issues/386

[16:17] <[Coke]> it's now failing with raku -I. -e 'use IRC::Client; use IO::Socket::Async::SSL'

[16:18] <[Coke]> but then I don't get the same error debugging in that module.

[16:19] <[Coke]> ... and that class is defined twice in that module. :P

[16:19] <ab5tract> 🙃

[16:21] <[Coke]> OOPS

[16:22] <[Coke]> no, the other definition is my copy. Curses. Ok, still digging (but also opening a ticket in that module with what I have.)

[16:26] <[Coke]> https://github.com/jnthn/p6-io-socket-async-ssl/issues/77 with less info than I'd hoped.

[16:47] <Geth> ¦ rakudo/main: 59257a4b10 | (Stefan Seifert)++ | 2 files

[16:47] <Geth> ¦ rakudo/main: RakuAST: fix silent removal of colonpairs from indirect lookups

[16:47] <Geth> ¦ rakudo/main: 

[16:47] <Geth> ¦ rakudo/main: Fixes: &CORE::infix:<orelse>

[16:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/59257a4b10

[17:31] <Geth> ¦ roast: 0a62ade253 | (Stefan Seifert)++ | S04-exceptions/fail.t

[17:31] <Geth> ¦ roast: Fix unexpected error in Failure test

[17:31] <Geth> ¦ roast: 

[17:31] <Geth> ¦ roast: The 1 in sink context in the unless block would ordinarily cause a

[17:31] <Geth> ¦ roast: warning (if the compiler is smart enough) but the test also fatalizes

[17:31] <Geth> ¦ roast: and thus turn it into an error that will make the test fail despite the

[17:31] <Geth> ¦ roast: Failure the test is about being defused correctly.

[17:31] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0a62ade253

[17:31] <Geth> ¦ roast: 8c0edcb2d4 | (Stefan Seifert)++ | S04-phasers/begin.t

[17:31] <Geth> ¦ roast: Skip previously todo'ed test about binding at BEGIN time

[17:31] <Geth> ¦ roast: 

[17:31] <Geth> ¦ roast: Binding at BEGIN time to variables declared outside the BEGIN block has

[17:31] <Geth> ¦ roast: never worked. It was just treated as a no-op. Thus we could get by with

[17:31] <Geth> ¦ roast: todo'ing the test. However this may not be true for all compilers, so

[17:31] <Geth> ¦ roast: skip it to avoid compilation errors.

[17:31] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8c0edcb2d4

[17:35] <Geth> ¦ rakudo/main: 7857b8021a | (Stefan Seifert)++ | src/Raku/ast/scoping.rakumod

[17:35] <Geth> ¦ rakudo/main: RakuAST: fix accidental de-containerization of external constants

[17:35] <Geth> ¦ rakudo/main: 

[17:35] <Geth> ¦ rakudo/main: Fixes: my $x = 1; EVAL Q[BEGIN { $x = 2" }];

[17:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7857b8021a

[17:35] <nine> Nice! This one fixes 5 spectest files all at once.

[17:35] <nine> We're at 1153 now.

[17:38] <[Coke]> neat.

[17:41] <lizmat> which brings us to 85_+%

[17:42] <nine> indeed :)

[17:43] <ab5tract> are we ready to try actually compiling CORE.setting?

[17:43] <lizmat> that was my thought as well...

[17:51] <ab5tract> so who's gonna remove the nqp::die and give it a go? :D

[17:51] * ab5tract goes to make dinner

[17:56] <nine> I already tried that a few days ago. Then decided that it's an unneccessary distraction for now. There's certainly some work to be done there.

[17:57] <nine> I fear, the move to using AT-POS to access implicit lookups for example was a bit premature. That method doesn't exist when we start compiling the setting.

[17:58] <[Coke]> https://github.com/jnthn/p6-io-socket-async-ssl/issues/77 - should this work without error?

[17:58] <[Coke]> we have two different versions of IO::Socket::Async::SSL in the Whateverable toolchain (because IRC::Client hardcodes a specific version), and that's what causes the duplicate symbol.

[17:59] <[Coke]> The workaround for now is probably: remove the hardcoded version in IRC::Client and cut a new version.

[17:59] <[Coke]> but whether or not this should work is probably a question for this channel and not jnthn on IO::Socket::Async::SSL

[18:00] <[Coke]> yay, now i can go watch youtube videos. :)

[18:04] <ab5tract> :)

[18:05] <Geth> ¦ rakudo/main: ed5c906c91 | (Stefan Seifert)++ | 2 files

[18:05] <Geth> ¦ rakudo/main: RakuAST: fix result of ENTER phasers not found in thunks.

[18:05] <Geth> ¦ rakudo/main: 

[18:05] <Geth> ¦ rakudo/main: ENTER's result has to be lexical. Otherwise it won't be found in nested

[18:05] <Geth> ¦ rakudo/main: blocks.

[18:05] <Geth> ¦ rakudo/main: 

[18:05] <Geth> ¦ rakudo/main: Fixes: LEAVE say now - ENTER now;

[18:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ed5c906c91

[18:05] <nine> 1154

[18:05] <ab5tract> \o/ 

[18:07] <lizmat> nine: re AT-POS: just use postcircumfix:<[ ]> instead?

[18:09] <nine> Won't be defined at the start of the setting either

[18:10] <lizmat> so: reduces to NQP array and use nqp::atpos then

[18:12] <lizmat> s///

[18:12] <lizmat> s/s//   :-)

[18:14] <nine> That's what we did do before commit 2caaf9f4d7011b1266f8e1f412b7ffc54f44ec56

[18:14] <linkable6> (2023-08-16) https://github.com/rakudo/rakudo/commit/2caaf9f4d7 RakuAST: some more resolver streamlining

[18:14] <lizmat> ack... will revert that then (manually)

[18:15] <nine> Err.. commit 38254c49413af8e4838c6d348d3ffbd14723de5b

[18:15] <linkable6> (2023-04-06) https://github.com/rakudo/rakudo/commit/38254c4941 RakuAST: streamline lookups

[18:15] <nine> Well, let's cross that bridge when we get there

[18:16] <lizmat> I got the impression we're there now?

[18:16] <nine> 85 % is not 100?

[18:17] <nine> m: my @a = []; for ^10 { POST @a.push($_); 42 }; is @a, [42, 42, 42, 42, 42, 42, 42, 42, 42, 42], 'POST should not see outer $_';

[18:17] <camelia> rakudo-moar ed5c906c9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    is used at line 1␤␤»

[18:17] <nine> m: use Test; my @a = []; for ^10 { POST @a.push($_); 42 }; is @a, [42, 42, 42, 42, 42, 42, 42, 42, 42, 42], 'POST should not see outer $_';

[18:17] <camelia> rakudo-moar ed5c906c9: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤ok 1 - POST should not see outer $_␤»

[18:17] <lizmat> no, but being able to build the setting...

[18:17] <nine> Is it me or does this test test the opposite of what the description says? Looks to me like it wants to access the outer $_ there?

[18:17] <nine> Well, I guess that depends on what "outer" refers to exactly.

[18:18] <lizmat> I'd say it's seeing the inner, from the for loop?

[18:19] <nine> But isn't the for loop the outer one from the POST phaser thunk's perspective?

[18:21] <lizmat> no, because a thunk does't have its ow scope ?

[18:22] <lizmat> aah.... but POST is supposed to get the return value in $_, so yes, outer $_ would be the $_ of the loop

[18:29] *** finanalyst left
[18:38] <lizmat> [Coke]: I've just released a new IRC::Client

[19:09] <nine> m: my @a = do loop { FIRST say "first"; LAST say "last"; last; }

[19:09] <camelia> rakudo-moar ed5c906c9: OUTPUT: «last␤first␤»

[19:09] <nine> m: my @a = do loop { LAST say "last"; last; }

[19:09] <camelia> rakudo-moar ed5c906c9: OUTPUT: «last␤No such method '!capture_phasers' for invocant of type 'Code'␤  in block <unit> at <tmp> line 1␤␤»

[19:09] <nine> whoooops

[19:23] <nine> m: loop { FIRST say "first"; LAST say "last"; last; }

[19:23] <camelia> rakudo-moar ed5c906c9: OUTPUT: «first␤last␤»

[19:23] <nine> but:

[19:23] <nine> m: my @a = do loop { FIRST say "first"; LAST say "last"; last; }

[19:23] <camelia> rakudo-moar ed5c906c9: OUTPUT: «last␤first␤»

[19:23] <nine> The last will be the first I guess :)

[19:29] <Geth> ¦ rakudo/main: 1fda647fcb | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[19:29] <Geth> ¦ rakudo/main: RakuAST: keep block result if there's a POST phaser

[19:29] <Geth> ¦ rakudo/main: 

[19:29] <Geth> ¦ rakudo/main: A POST phaser gets the block's result as argument, so we must not sink

[19:29] <Geth> ¦ rakudo/main: the last statement of that block.

[19:29] <Geth> ¦ rakudo/main: 

[19:29] <Geth> ¦ rakudo/main: Fixes: { POST say $_; 69 }

[19:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1fda647fcb

[19:29] <Geth> ¦ rakudo/main: 0c9a00ada0 | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[19:29] <Geth> ¦ rakudo/main: RakuAST: actually run LAST phasers in (non-for) loops

[19:30] <Geth> ¦ rakudo/main: 

[19:30] <Geth> ¦ rakudo/main: Fixes loop { LAST say "last"; last }

[19:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0c9a00ada0

[19:30] <nine> And that's 1155 which means that there are only 200 spectest files left :)

[19:30] <[Coke]> lizmat++

[19:31] <ugexe> last firing before first like that seems like a foot gun. i'm sort of feel like i need to double check any of my usage of those now :(

[19:36] <[Coke]> ok, also have to fix Whateverable to not pin the old version of IRC::Client.

[19:36] <[Coke]> (which ab5tract removed from their version)

[19:38] <[Coke]> At some point, I'm going to have to write up a "get Blin setup" script that does all the rakudo/zef/module installs/apt installs, etc.

[19:38] <jdv> only 200?

[19:38] <[Coke]> All Blin deps now safely installed on the azure box.

[19:40] <ab5tract> jdv: how do you manage with blin? From the outside it seems really broken, even after just a few months since I had it running

[19:40] <[Coke]> ab5tract: how old is your fork of Whateverable?

[19:41] <ab5tract> I’m guessing April at the latest, but let me check the commits

[19:42] <ab5tract> 4/28/24

[19:43] <[Coke]> https://gist.github.com/coke/b22633c236dc6efa6d4c1fd4e9ceb23b - error in ensure-config

[19:44] <[Coke]> (part of Whateverable::Config, I'm using your version)

[19:44] <ab5tract> Hmm

[19:45] <ab5tract> Can you try it with a specific commit instead?

[19:45] <[Coke]> of your whateverable, or the old/new ?

[19:46] <ab5tract> Sorry, I meant as an argument

[19:46] <[Coke]> time RAKULIB=lib bin/blin.p6  --new=bd85145ee IRC::Client same error

[19:47] <ab5tract> The major addition of my branch to whateverable / blin is the ability to check a single commit

[19:47] <ab5tract> That’s not the argument. One second

[19:49] <ab5tract>     #| Single revision (overrides --old and --new)

[19:49] <ab5tract>     Str :single($single-revision) is copy,

[19:49] <ab5tract> only relevant if you are using my blin as well as whateverable

[19:52] <ab5tract> the whole thing is complicated by the fact that those branches also have fixes for arm64 :(

[19:52] <[Coke]> ok, i'm on x64 here in azure.

[19:53] <ab5tract> the arm64 changes are entirely Dockerfile related

[19:54] <jdv> the same way i deal with most of life i don't enjoy.  i keep it arms left so to speak:)

[19:54] <ab5tract> jdv: how does that work though? are you able to just spin up the same docker image month after month?

[19:54] <jdv> it generally works and i dont mess with it unless i need to.

[19:54] <jdv> yes

[19:55] <jdv> *length

[19:56] <jdv> sorry, on my boat half asleep.  good luck and soldier on!

[19:56] <jdv> afk &

[19:56] <ab5tract> sleep well upon the waves my friend

[19:56] <jdv> be well

[19:57] <ab5tract> all's well that blin's well ;)

[20:03] <[Coke]> getting the same error with mainline Whateverable (which I was finally able to install after a local fix to https://github.com/Raku/whateverable/issues/390

[20:05] <[Coke]> https://github.com/Raku/whateverable/issues/391 - not sure if this is blin or whateverable's fault

[20:05] <[Coke]> ... or mine

[20:13] <ab5tract> `- sub latest-repo($project = $*PROJECT) { “$*TMPDIR/whateverable/{$project}-repo”.IO }`

[20:13] <ab5tract> `+ sub latest-repo($project = $*PROJECT) { $CONFIG<projects>{$project}<repo-path>.IO }`

[20:13] <ab5tract> lib/Whateverable/Building.pm6

[20:14] <ab5tract> pretty sure that's the patch that solves that

[20:14] <ab5tract> my fault for not getting these fixes merged back upstream

[20:15] <ab5tract> but equally my fault for not bothering to replace the 1% of Whateverable that is required for this job with a new module

[20:26] *** finanalyst joined
[20:31] <[Coke]> ab5tract: doesn't seem to change anything

[20:31] <ab5tract> boo

[20:31] <ab5tract> I honestly don't know at this point

[20:32] <ab5tract> apparently this is an entire grant's worth of work

[20:33] *** AlexDaniel joined
[20:38] <AlexDaniel> [Coke]: it's just checking your config file and failing to find something in it

[20:38] <AlexDaniel> https://github.com/Raku/whateverable/blob/5c74583a0433b1f5ec11458aa6b7f2370e873144/lib/Whateverable/Config.pm6#L61

[20:39] <AlexDaniel> [Coke]: what do you have in <projects> ?

[20:39] <AlexDaniel> it seems that this is out of date maybe? https://github.com/Raku/Blin/blob/master/config-default.json

[20:41] <AlexDaniel> [Coke]: here's the up-to-date config: https://github.com/Raku/whateverable/blob/main/config-default.json

[20:41] <AlexDaniel> I guess I did some work on whateverable and didn't update blin accordingly, my fault

[20:43] <AlexDaniel> it's just the “projects” part that's different, try changing it to the one that's in whateverable and see if it works

[20:51] <AlexDaniel> [Coke]: as for writing a script that does the setup, did you know that whateverable bots are running as docker swarm services? The entire recipe for the setup is here: https://github.com/Raku/whateverable/blob/main/Dockerfile

[20:53] <AlexDaniel> I see no reason why the same cannot be done for Blin. Then just run Blin in docker, no need for setting anything up

[20:54] <AlexDaniel> I might as well do that tomorrow if I have time… but currently dealing with some annoying Caddy issue and I'm about to pull the remaining hair out

[21:15] <[Coke]> ok, that updated file gets me a new error, cool. :)

[21:16] <[Coke]> https://gist.github.com/coke/a2a88ff7a6d2ee8fb08076711b41c08b

[21:16] *** librasteve_ joined
[21:17] <AlexDaniel> [Coke]: do you have `git` installed? :)

[21:18] <AlexDaniel> in general you need: zstd lrzip libssl-dev build-essential (based on the Dockerfile above)

[21:19] <AlexDaniel> in the future whateverable will not need lrzip, and hopefully zstd will be included one way or another :)

[21:20] <AlexDaniel> I think new long-term storage builds are already created with zstd only

[21:20] <AlexDaniel> (zstd will be included in the distros I mean, for example as part of build-essential)

[21:20] <[Coke]> yes, git is installed.

[21:21] <[Coke]> those packages all installed with apt-get

[21:22] <AlexDaniel> [Coke]: alright, but you're on that line: https://github.com/Raku/whateverable/blob/5c74583a0433b1f5ec11458aa6b7f2370e873144/lib/Whateverable/Builds.pm6#L48

[21:23] <AlexDaniel> ah wait, that code doesn't make any sense, does it?

[21:23] <[Coke]> Blin/data/moarvm exists and is https://github.com/MoarVM/MoarVM.git

[21:23] <AlexDaniel> it's meant to be `$CONFIG<projects><rakudo-moar><repo-path>`

[21:24] <AlexDaniel> it's trying to cwd into the url D:

[21:26] <[Coke]> trying local patch..

[21:29] <[Coke]> muuuuch better

[21:30] <[Coke]> finally appear to be running Blin on the azure box.

[21:32] <Geth> ¦ whateverable/main: 2104e7f0e2 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Builds.pm6

[21:32] <Geth> ¦ whateverable/main: Fix `:cwd` thinko from months ago

[21:32] <Geth> ¦ whateverable/main: 

[21:32] <Geth> ¦ whateverable/main: I'm not entirely sure how this is working in the currently running bots,

[21:32] <Geth> ¦ whateverable/main: but this is definitely causing issues in Blin. Basically, when the

[21:32] <Geth> ¦ whateverable/main: directory structure was changed, I changed these lines incorrectly. As

[21:32] <Geth> ¦ whateverable/main: the result, when running this sub, it was trying to `:cwd` into the URL

[21:32] <Geth> ¦ whateverable/main: of the repo (which is obviously wrong).

[21:32] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/2104e7f0e2

[21:32] <AlexDaniel> ah, config structure, not directory structure, but you get the point :)

[21:32] <AlexDaniel> if everything is still cool it should restart/redeploy all bots… let's see

[21:33] <AlexDaniel> [Coke]: can you commit the config update to Blin too?

[21:34] <[Coke]> AlexDaniel: just opened #392 which I think you just closed.

[21:34] <[Coke]> er, *fixed*, and can close.

[21:34] <[Coke]> I can just push the new config file I have if you like.

[21:35] <[Coke]> also #390 is a simple "fix" but I have no idea if it's the right one. I can push that too if you like.

[21:35] <[Coke]> er, I can't, can I? I'm not sure I have privs

[21:35] *** coverable6 left
[21:35] *** quotable6 left
[21:35] *** benchable6 left
[21:35] *** greppable6 left
[21:35] *** tellable6 left
[21:35] *** sourceable6 left
[21:35] *** releasable6 left
[21:35] *** evalable6__ left
[21:35] *** bisectable6__ left
[21:35] *** notable6 left
[21:35] *** nativecallable6 left
[21:35] *** shareable6 left
[21:35] *** linkable6 left
[21:35] *** committable6 left
[21:35] *** bloatable6 left
[21:35] *** unicodable6 left
[21:36] <AlexDaniel> [Coke]: how come? 206 people can write to whateverable. Not sure about Blin, I don't have admin access there to see

[21:37] <[Coke]> oh, right, that was Blin, not Wh.

[21:38] *** committable6 joined
[21:38] <AlexDaniel> [Coke]: push the fix please, we'll see what happens. Webhooks are used in various places (even for building rakudo/moarvm), but there's a timer fallback so it will not break anything

[21:38] *** nativecallable6 joined
[21:38] *** greppable6 joined
[21:38] *** coverable6 joined
[21:39] *** shareable6 joined
[21:39] *** notable6 joined
[21:39] *** releasable6 joined
[21:39] *** linkable6 joined
[21:39] <AlexDaniel> the bots are running on rakudo star 2023.02, so maybe they're not even affected by things like that.

[21:39] *** bisectable6 joined
[21:39] <AlexDaniel> e: say 42

[21:39] *** evalable6 joined
[21:39] *** quotable6 joined
[21:39] *** sourceable6 joined
[21:40] <AlexDaniel> e: say 42

[21:40] <evalable6> AlexDaniel, rakudo-moar 0c9a00ada: OUTPUT: «42␤»

[21:40] *** benchable6 joined
[21:40] *** bloatable6 joined
[21:40] *** unicodable6 joined
[21:40] *** tellable6 joined
[21:40] <[Coke]> (not trivial because I checked everything out with https assuming readonly. one moment.)

[21:43] <AlexDaniel> btw guys you can actually comment out the bots that you don't need here: https://github.com/Raku/whateverable/blob/main/compose.yaml I'm pretty sure people haven't used some of the bots for a while :)

[21:44] <[Coke]> Do Blin and Whateverable *both* have a config-default.json?

[21:45] <[Coke]> I think this was also part of my confusion. :)

[21:49] <Geth> ¦ Blin: 9b7a0744be | (Will Coleda)++ | config-default.json

[21:49] <Geth> ¦ Blin: Pull some updated settings

[21:49] <Geth> ¦ Blin: 

[21:49] <Geth> ¦ Blin: from https://raw.githubusercontent.com/Raku/whateverable/main/config-default.json

[21:49] <Geth> ¦ Blin: 

[21:49] <Geth> ¦ Blin: (avoiding those that are outside the scope of what Blin needs)

[21:49] <Geth> ¦ Blin: review: https://github.com/Raku/Blin/commit/9b7a0744be

[21:51] <AlexDaniel> pretty sure that all updates below "sandbox-path" were not needed :)

[21:52] <AlexDaniel> [Coke]: yeah, Blin doesn't need all these values for running the bots, just some values for running itself

[21:53] <[Coke]> AlexDaniel: ok.

[21:56] <[Coke]> testing (it needs some of it, will remove what i can)

[22:01] *** finanalyst left
[22:02] <AlexDaniel> [Coke]: Also I just realized that there's this: https://github.com/Raku/Blin/tree/master/docker#blin-docker-image

[22:02] <Geth> ¦ Blin: 1562d7ce1f | (Will Coleda)++ | config-default.json

[22:02] <Geth> ¦ Blin: Remove un-needed Whateverable boilerplate

[22:02] <Geth> ¦ Blin: 

[22:02] <Geth> ¦ Blin: AlexDaniel++

[22:02] <Geth> ¦ Blin: review: https://github.com/Raku/Blin/commit/1562d7ce1f

[22:04] <[Coke]> docker has never worked for me on mac m2, so I was just trying to run out of the repo

[22:04] <[Coke]> er, *Blin on docker has...*

[22:04] <[Coke]> which now it seems to be doing.

[22:05] <[Coke]> (running out of repo, with the fixes and workarounds from today.)

[22:05] <[Coke]> anyone know why I get dozens of

[22:05] <[Coke]> 🥞🥞 Module Test::Async is ignored because it causes havoc

[22:06] <[Coke]> Looks like locks not getting freed. Run once - fine. Run again, get:

[22:06] <[Coke]> /tmp/whateverable/rakudo-moar/e390ae09e880c3d9a38373fed883bfaacc8e63ab is locked. Waiting…

[22:12] <[Coke]> ab5tract: so NOW I can think about "can we test a specific revision and not just tags (looks like I can't do time RAKULIB=lib bin/blin.p6  --new=361cf2310 App::SudokuHelper right now

[22:17] <[Coke]> (up to 49¢ usage so far in August (pretty sure it's a day lagged)

[22:21] <[Coke]> AlexDaniel: one of those config removals killed the ability to fetch non-fetched builds.

[22:22] <[Coke]> so anything after that worked but complained about the endpoints.

[22:22] <[Coke]> "worked"

[22:27] <Geth> ¦ Blin: 371c3fef86 | (Will Coleda)++ | config-default.json

[22:27] <Geth> ¦ Blin: Restore latest config

[22:27] <Geth> ¦ Blin: 

[22:27] <Geth> ¦ Blin: Removed too much config, missing part that allowed downloads of not-previously downloaded rakudo versions

[22:27] <Geth> ¦ Blin: review: https://github.com/Raku/Blin/commit/371c3fef86

[22:37] *** sena_kun joined
[22:54] *** sena_kun left
[23:06] <AlexDaniel> Hmm, yeah, that "mothership" line was definitely needed

[23:07] <AlexDaniel> everything else, not so much :)

[23:46] *** AlexDaniel left
[23:52] *** AlexDaniel joined
