[02:38] *** librasteve_ left
[08:57] *** sena_kun joined
[10:33] <timo> has anyone used Grammar::Debugger or Grammar::Tracer recently?

[10:47] <lizmat> about a year ago, when I started the =rakudoc handling, why ?

[10:47] <lizmat> did it bitrot?

[10:48] <lizmat> notable6: weekly

[10:48] <notable6> lizmat, 1 note: 2024-12-10T12:59:58Z <antononcube>: https://rakuforprediction.wordpress.com/2024/12/10/graph-neat-examples-in-raku-set-3/

[10:48] <lizmat> notable6: weekly reset

[10:48] <notable6> lizmat, Moved existing notes to “weekly_2024-12-23T10:48:43Z”

[10:49] <timo> i'm not entirely sure. i seemed to recall it didn't work when i last tried it? two months ago or so maybe

[10:52] <lizmat> It's a Raku Community module now

[10:52] <lizmat> so go for it  :-)

[10:54] <lizmat> I can give you a zef upload bit if necessary

[11:04] <timo> i kind of wish we had a common standard way for module authors to put benchmarks in their distros, maybe in xt/, for the purposes of measuring long-time changes in rakudo and moarvm performance

[11:05] <timo> so we could do something similar to a blin run, but for benchmarks found in ecosystem modules

[11:06] <lizmat> bt/ ?

[11:07] <timo> .o( backtraces )

[11:12] <lizmat> I was thinking "benchmark tests"

[11:12] <timo> what i'd like to see at the very least is standardised ways to handle setup and teardown, and a way to specify size of the "workload" to check how scaling behaves, and maybe a rough guideline to create essentially an estimation for what workload size corresponds to what run time. also it'd be important to consider multithreading and multi-processing in this, as well as necessary external

[11:12] <timo> components. say, a postgres database has to be running in order to sensibly benchmark a postgres client library, i imagine

[11:31] <timo> and we probably want to measure some performance counters instead of wallclock time, since other activity on the system that runs the benchmark can easily make timing data become worthless :)

[11:33] <lizmat> in that respect I would love to see cpu time / thread metrics

[11:35] <timo> most performance counters can be impacted by other stuff on the system; i think if there's more load, the program may be context-switched away more often, CPU caches evicted causing an increase in cache misses, stuff like that :|

[11:36] <timo> i guess if we have to ensure whatever the "benchmark runner" is doesn't get distracted :)

[11:36] <timo> then we can also use cpu time for measurement

[11:57] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/12/23/2024-52-connecting-the-dots/

[13:06] <patrickb> I've used Grammar::Tracer recently when creating Rainbow. worked like a charm.

[13:07] <timo> oh, ok that's good!

[16:04] <lizmat> ab5tract: I wonder whether we should allow "is revision-gated" as well, indicating the lowest language level being supported

[16:08] <ab5tract> That’s how I originally implemented it but nine didn’t like that

[16:08] <lizmat> ah, ok  :-)

[18:07] <timo> it was denined

[18:31] <lizmat> aaw!

[18:31] <timo> lizmat: do you know how to trigger the "exception doesn't have a serialization function" error?

[18:31] <lizmat> I do not

[18:34] <lizmat> Ah, I do

[18:34] <timo> i've been trying a few things with no luck

[18:35] <lizmat> put this in a module, and use that module:

[18:35] <lizmat> my constant $a = do { my $e; CATCH { $e := $_; .resume } die; $e }

[18:35] <lizmat> my constant $a = do { my $e; CATCH { $e := $_; .resume }; die; $e }

[18:40] <timo> my code also dies when the exception has no message so i'd want to put `die "argh!";`

[18:40] <timo> (but i'm also fixing that problem)

[18:41] <lizmat> golf: my constant $a = do { try die; $! }

[18:45] <timo> hm, i get "no message" even with `die "blergh!"` i wonder why that is

[19:00] <timo> ok, cool. give my moar branch a shot, will you? :)

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 1d2a5670d6 | (Nick Logan)++ | 3 files

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Deprecate IO subs that operate on multiple paths in 6.e

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: While convienient, being able to pass multiple paths to e.g. &rmdir

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: is problematic because there isn't a blessed way to handle what to

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: do when an exception or failure occurs, i.e. should it try to rmdir

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: every entry even if some things fail, or stop on the first failure?

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: <…commit message has 10 more lines…>

[19:21] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/1d2a5670d6

[19:24] <lizmat> bisectable6: old=2023.10 dd <42>.narrow

[19:24] <bisectable6> lizmat, Bisecting by output (old=2023.10 new=bcd7bea) because on both starting points the exit code is 0

[19:28] *** bisectable6 left
[19:29] <lizmat> awww  I killed bisectable6 ?

[19:31] <ugexe> did we intentionally stop running a spectest CI?

[19:31] <lizmat> not to my knowledge?

[19:32] <ugexe> or did we just forget to re-add it during the CI reworking

[19:32] <lizmat> patrickb might know

[19:32] *** bisectable6 joined
[19:36] <ugexe> maybe it is just named something else now as well

[19:55] <patrickb> I seem to recall having seen a spectest in the reworked CI. I'm pretty sure it's not been left out intentionally.

[19:58] <patrickb> I think it's behind Lin_Spesh_Nodelay

[20:03] <timo> wow, a spec test run with nodelay? i guess that'll be good to tickle out specializer bugs?

[20:45] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: 4919b64780 | (Nick Logan)++ | src/core.c/CompUnit/PrecompilationRepository.rakumod

[20:45] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: Prevent concurrent hash access

[20:45] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: 

[20:45] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: Currently two threads can read null from the $resolved hash and

[20:45] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: both end up trying to resolve the same thing. This restores the

[20:46] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: original lock protect scope from before 95fb926 to ensure read

[20:46] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: and write don't have a race condition.

[20:46] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: review: https://github.com/rakudo/rakudo/commit/4919b64780

[20:46] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: b6242f4bf4 | (Nick Logan)++ | src/core.c/CompUnit/PrecompilationRepository.rakumod

[20:46] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: Give each hash their own lock

[20:46] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: 

[20:46] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: There should be no need for the loading mechanism to always block

[20:46] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: the resolve mechanism. This gives the $resolved hash its own lock

[20:46] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: instead of using the lock for the $loaded hash.

[20:46] <Geth> ¦ rakudo/ugexe/readd-original-protect-block: review: https://github.com/rakudo/rakudo/commit/b6242f4bf4

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: f8a78ce7e7 | (Nick Logan)++ | src/core.c/CompUnit/RepositoryRegistry.rakumod

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: Allow default CURIs to be disabled

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: 

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: Previously there was no convenient way to disable the e.g. site,

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: vendor, and core repositories. But when developing with application

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: specific module install locations one might not want for modules

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: to be used outside of that location. This add a new environment

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: variables, RAKU_DISABLE_DEFAULT_CURIS, which can be set to anything

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: to prevent the default repositories from being added to the repo

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: chain itself. Note that it does still register those repositories

[20:48] <Geth> ¦ rakudo/ugexe/disable-default-curis: with the registry.

[20:49] <Geth> ¦ rakudo/ugexe/disable-default-curis: review: https://github.com/rakudo/rakudo/commit/f8a78ce7e7

[21:08] <Geth> ¦ rakudo/main: 4919b64780 | (Nick Logan)++ | src/core.c/CompUnit/PrecompilationRepository.rakumod

[21:08] <Geth> ¦ rakudo/main: Prevent concurrent hash access

[21:08] <Geth> ¦ rakudo/main: 

[21:08] <Geth> ¦ rakudo/main: Currently two threads can read null from the $resolved hash and

[21:08] <Geth> ¦ rakudo/main: both end up trying to resolve the same thing. This restores the

[21:09] <Geth> ¦ rakudo/main: original lock protect scope from before 95fb926 to ensure read

[21:09] <Geth> ¦ rakudo/main: and write don't have a race condition.

[21:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4919b64780

[21:09] <Geth> ¦ rakudo/main: b6242f4bf4 | (Nick Logan)++ | src/core.c/CompUnit/PrecompilationRepository.rakumod

[21:09] <Geth> ¦ rakudo/main: Give each hash their own lock

[21:09] <Geth> ¦ rakudo/main: 

[21:09] <Geth> ¦ rakudo/main: There should be no need for the loading mechanism to always block

[21:09] <Geth> ¦ rakudo/main: the resolve mechanism. This gives the $resolved hash its own lock

[21:09] <Geth> ¦ rakudo/main: instead of using the lock for the $loaded hash.

[21:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b6242f4bf4

[21:09] <Geth> ¦ rakudo/main: f58bed9f61 | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/PrecompilationRepository.rakumod

[21:09] <Geth> ¦ rakudo/main: Merge pull request #5299 from rakudo/ugexe/readd-original-protect-block

[21:09] <Geth> ¦ rakudo/main: 

[21:09] <Geth> ¦ rakudo/main: Fix potential concurrent hash access race condition

[21:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f58bed9f61

[23:13] *** sena_kun left
