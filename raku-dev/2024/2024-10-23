[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[05:45] *** [Coke] left
[05:49] *** [Coke] joined
[07:19] *** [Coke] left
[07:19] *** [Coke] joined
[08:17] <Geth> ¦ GD-Raw: 0racle++ created pull request #1: Add some in-place filters

[08:17] <Geth> ¦ GD-Raw: review: https://github.com/raku-community-modules/GD-Raw/pull/1

[08:40] *** sena_kun joined
[08:56] <Geth> ¦ GD-Raw/main: 21113fdddb | 0racle++ | lib/GD/Raw.rakumod

[08:56] <Geth> ¦ GD-Raw/main: Add some in-place filters

[08:56] <Geth> ¦ GD-Raw/main: 

[08:56] <Geth> ¦ GD-Raw/main: Adds some of the functions documented here: -

[08:56] <Geth> ¦ GD-Raw/main: https://libgd.github.io/manuals/2.3.0/files/gd_filter-c.html

[08:56] <Geth> ¦ GD-Raw/main: 

[08:56] <Geth> ¦ GD-Raw/main: I have inserted them below gdImagePixelate as that is where they appear

[08:56] <Geth> ¦ GD-Raw/main: in the C header

[08:56] <Geth> ¦ GD-Raw/main: https://github.com/libgd/libgd/blob/master/src/gd.h

[08:56] <Geth> ¦ GD-Raw/main: review: https://github.com/raku-community-modules/GD-Raw/commit/21113fdddb

[08:56] <Geth> ¦ GD-Raw/main: 6654e5af23 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | lib/GD/Raw.rakumod

[08:56] <Geth> ¦ GD-Raw/main: Merge pull request #1 from 0racle/add-filters

[08:56] <Geth> ¦ GD-Raw/main: 

[08:56] <Geth> ¦ GD-Raw/main: Add some in-place filters

[08:56] <Geth> ¦ GD-Raw/main: review: https://github.com/raku-community-modules/GD-Raw/commit/6654e5af23

[08:57] *** sena_kun left
[09:02] <Geth> ¦ GD-Raw/main: 399cb5b06d | (Elizabeth Mattijsen)++ | 3 files

[09:02] <Geth> ¦ GD-Raw/main: 0.4

[09:02] <Geth> ¦ GD-Raw/main: review: https://github.com/raku-community-modules/GD-Raw/commit/399cb5b06d

[09:27] *** lizmat left
[09:29] *** lizmat joined
[09:47] <Geth> ¦ rakudo/main: ce03069d2b | (Elizabeth Mattijsen)++ | 3 files

[09:47] <Geth> ¦ rakudo/main: Make Iterable.flat an only again

[09:47] <Geth> ¦ rakudo/main: 

[09:47] <Geth> ¦ rakudo/main: Turning it into a multi broke Dan, and possibly other modules that

[09:47] <Geth> ¦ rakudo/main: Blin didn't catch.  Turning it back into an only again, required

[09:47] <Geth> ¦ rakudo/main: changes in Range and native array as well.

[09:47] <Geth> ¦ rakudo/main: 

[09:47] <Geth> ¦ rakudo/main: The problem is really caused by the fact that current consumers ofi

[09:48] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[09:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ce03069d2b

[10:12] <Geth> ¦ rakudo/main: 2750112c08 | (Elizabeth Mattijsen)++ | src/core.c/REPL.rakumod

[10:12] <Geth> ¦ rakudo/main: Handle REPL case if %*ENV<_> is not set

[10:12] <Geth> ¦ rakudo/main: 

[10:12] <Geth> ¦ rakudo/main: Which may happen if modules start instantiating the REPL class,

[10:12] <Geth> ¦ rakudo/main: which I'm not sure is actually documented or supported.

[10:12] <Geth> ¦ rakudo/main: 

[10:12] <Geth> ¦ rakudo/main: Unbreaks Text::CodeProcessing module

[10:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2750112c08

[10:24] <lizmat> jdv: concluded my blin induced investigations

[14:24] <jdv> looks like its all figured then.  Thanks!

[14:28] <jdv> i wasn't able to repro the gio one.  i guess its fine.

[14:29] <jdv> its normal for a test to fail but not really a moarvm panic like that, at least not in a long time

[14:30] <jdv> i meant fail in the blin run but not be reproducable

[14:34] <lizmat> well, there's still some gremlins in MoarVM and NativeCall specifically, so I'm not really surprised by the non-reproducebility 

[14:37] <jdv> maybe a few years ago or so it was way more common for moarvm to freak iirc

[14:38] <jdv> hopefully this is not a new regression

[14:39] <lizmat> I hope so too  :-)   

[14:40] <lizmat> the fact that they're less common now, is a good sign

[14:40] <jdv> yes, i remember a few people did a lot of work to fix that up back in the day.

[16:44] <ab5tract> once again wrestling while angry with the native `to-json` .. why is `no worries` not enough to suppress the deprecation notice?

[16:45] <ab5tract> imagine a script that wants to output some json to be read by another process. is it impossible to do this without a third-party module?

[16:47] <ab5tract> I mean, at least the deprecation notice arrives on stderr, so I guess the above concern is mitigated

[16:47] <jdv> what would be the vm cored json lib?  the simd one?

[16:49] <ugexe> ab5tract: https://github.com/ugexe/zef/blob/45f3ac7624ea3388e334e756e32fb3a48ef6098a/lib/Zef.rakumod#L5-L8 >:)

[16:49] <ab5tract> ooooo

[16:50] <ugexe> naturally this is the part where i have to tell you not to do that, which you are free to ignore

[16:50] <ab5tract> jdv: If / when I have the tuits, I would try wiring the simdjson.c or whatever it's called into MoarVM

[16:50] <ab5tract> then likewise deliver jackson -- or if I get around to it -- kotlin serilization for the JVM backend

[16:51] <ab5tract> both exposed via a single nqp api

[16:52] <ab5tract> ugexe: I had no idea that zef was such a mischevious machine :)

[16:52] <jdv> that could be cool.  ctilme did some nice work modularly but iirc ultimately its the c/nqp/raku barrier that eats resources

[16:53] <ab5tract> yeah, I don't want to make NativeCall resemble XS by any means

[16:54] <ab5tract> but the flipside of that is that in situations where NativeCall is unfairly handicapping an important (imo integral) component of the language, we need a way to vault over the issue and deliver a VM-level solution

[16:56] <ab5tract> but who knows, maybe smarter minds than mine already have some notions about how to cleanly provide VM hashes to NativeCall space ... I know nine has some ideas on where the current implementation could receive an upgrade

[16:57] <jdv> except hes busy building a biz:)

[16:57] <ab5tract> One last thought: I think this all falls under the principle of making the difficult possible

[16:58] <ab5tract> To which I mean, don't handicap our external libraries to the lowest common denominator, but instead allow VMs to have VM-specific libraries

[17:00] <jdv> that was kinda the point of nqp:)  but maybe with a lot of careful effort it could be threaded around well.

[17:00] <ab5tract> if the JVM backend ever reaches strong interoperability with other JVM libraries and the like, then it would be fair to expect that there would be Raku modules that would either only run on JVM or would run with significant changes to the backed

[17:01] <ab5tract> nqp is a perfect solution for how to allow two backends to have divergent solutions to the same problem but comply to the same API

[17:01] <ab5tract> I'm talking more about trying to integrate C but not being able to access any Raku datastructures. Which is fair, but it doesn't make sense to me that we wouldn't allow easy-ish access to MoarVM ones

[17:02] <ab5tract> Or trying to integrate a Java/Scala/Kotlin library but being forced to use a sub-optimal data structure to do so

[17:02] <ab5tract> not even a datastructure, essentially a function callback

[17:05] <ab5tract> Right now all the weight is placed on the "maybe one day Rakudo will run on a zillion VMs next to another zillion independent Raku implementations" ... and I just don't see the utility in that line of thinking. I'm not saying we should abandon that dream, but it needs to be tempered with the reality of where we are currently at.

[17:07] * jdv fondly remembers parrot

[17:09] * ab5tract fondly remembers reading the initial Perl + Python = Parrot announcement on slashdot.org

[17:11] <jdv> did dan get a pie in the face?  i barely remember.

[17:40] *** sena_kun joined
[19:49] <Geth> ¦ roast: 9bf4b1ea07 | (Christian Bartolomäus)++ | spectest.data

[19:49] <Geth> ¦ roast: Revert "Disable test file that hogs up all memory"

[19:49] <Geth> ¦ roast: 

[19:49] <Geth> ¦ roast: This reverts commit a9808b7896ab5f675ccca910b411e34bbd0dbfa2.

[19:49] <Geth> ¦ roast: 

[19:49] <Geth> ¦ roast: The underlying problem has been fixed and the test file can (and

[19:49] <Geth> ¦ roast:  should) be used again. Relevant commits for Rakudo:

[19:49] <Geth> ¦ roast: * https://github.com/rakudo/rakudo/commit/4b53990c2b

[19:49] <Geth> ¦ roast: * https://github.com/rakudo/rakudo/commit/6f8d314c2a

[19:49] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9bf4b1ea07

[20:14] <[Coke]> pretty sure yes

[20:43] *** lizmat left
[21:52] <ab5tract> Dan?

[22:06] <[Coke]> https://www.perlmonks.org/?node_id=502226

[22:15] *** sena_kun left
[23:00] <releasable6> Next release in ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:22] *** lizmat joined
