[10:18] *** sena_kun joined
[11:50] <timo1> Xliff, I was wondering how your nickname is meant to be pronounced

[11:50] *** timo1 is now known as timo

[11:53] *** |Tux| left
[11:53] <timo> i kind of like saying it like "axel F"

[12:56] <lizmat> m: say ("a", Int, "b").first(Numeric)

[12:56] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «(Int)␤»

[12:57] <lizmat> m: say "found" if ("a", Int, "b").first(Numeric)

[12:57] <camelia> rakudo-moar 0e9a2d73e: ( no output )

[12:57] <lizmat> I wonder if it would make sense to add a :b / :bool adverb to "first" that would return True in the above case

[12:58] <timo> ah, since even .defined will not be correct there

[12:59] <timo> and even if you check specifically for Nil as the return value, what if you have a list with Nil in it where the Nil in it is actually what you want to find? :D

[12:59] <timo> but i would suggest :exists might be good to mirror what [] and {} have

[12:59] <lizmat> actually I just realized that :p will do the trick also

[12:59] <timo> btw do we have an abbreviation for postcircumfix that's kinda long to type

[12:59] <lizmat> m: say "found" if ("a", Int, "b").first(Numeric, :p)

[12:59] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «found␤»

[12:59] <timo> yeah

[13:00] <timo> i was going to suggest k instead of p, but with p you get he value as well of course

[13:00] <lizmat> and k wouldn't work for the first element

[13:00] <lizmat> m: say "found" if (Int, "b").first(Numeric, :k)

[13:00] <camelia> rakudo-moar 0e9a2d73e: ( no output )

[13:00] <timo> m: say "found $_" with (Int, "a", "b").first(Numeric, :k)

[13:00] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «found 0␤»

[13:00] <timo> that's what with is for :)

[13:01] <timo> so i would have suggested :k along with with not :k along with if

[13:01] <timo> but yeah, makes sense

[13:01] <timo> m: dd (Int, "a", "b").first(* > 1000, :p)

[13:01] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «Use of uninitialized value of type Int in numeric context␤  in block <unit> at <tmp> line 1␤␤»

[13:01] <timo> pff :)

[13:01] <lizmat> from a performance point of view I try t avoid with

[13:01] <timo> m: dd (Int, "a", "b").first({ try $_ > 1000 }, :p)

[13:01] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «Nil  = Nil␤»

[13:04] <timo> oh this is a little odd

[13:04] <timo> m: dd (Str, "a", "b").first(* > 1000, :p); say "alive"

[13:04] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «Use of uninitialized value of type Str in numeric context␤alive␤  in block <unit> at <tmp> line 1␤Nil  = Nil␤»

[13:04] <timo> m: dd (Str, "a", "b").first(* > 1000, :p); dd "alive" # make sure it's all on stderr so it's in order

[13:04] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «Use of uninitialized value of type Str in numeric context␤  in block <unit> at <tmp> line 1␤Nil  = Nil␤"alive"␤»

[13:05] <timo> m: dd (Int, "a", "b").first(* > 1000, :p); dd "alive"

[13:05] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «Use of uninitialized value of type Int in numeric context␤  in block <unit> at <tmp> line 1␤␤»

[13:05] <timo> well, really this is just

[13:05] <timo> m: dd Str > 1000; dd "alive"

[13:05] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «Use of uninitialized value of type Str in numeric context␤  in block <unit> at <tmp> line 1␤Bool::False␤"alive"␤»

[13:05] <timo> m: dd Int > 1000; dd "alive"

[13:05] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «Use of uninitialized value of type Int in numeric context␤  in block <unit> at <tmp> line 1␤␤»

[13:47] <Geth> ¦ rakudo: patrickbkr++ created pull request #5738: Move precomp docker host ubuntu 24.04 -> 20.04

[13:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5738

[13:47] <Geth> ¦ rakudo/main: eba9332df1 | (Patrick Böker)++ | azure-pipelines.yml

[13:47] <Geth> ¦ rakudo/main: Move precomp docker host ubuntu 24.04 -> 20.04

[13:47] <Geth> ¦ rakudo/main: 

[13:47] <Geth> ¦ rakudo/main: This should get the build working again.

[13:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eba9332df1

[13:47] <Geth> ¦ rakudo/main: 3efc376a5b | (Patrick Böker)++ (committed using GitHub Web editor) | azure-pipelines.yml

[13:47] <Geth> ¦ rakudo/main: Merge pull request #5738 from patrickbkr/fix-precomp-release-pipeline

[13:47] <Geth> ¦ rakudo/main: 

[13:47] <Geth> ¦ rakudo/main: Move precomp docker host ubuntu 24.04 -> 20.04

[13:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3efc376a5b

[15:26] *** librasteve_ joined
[15:35] *** kawaii joined
[16:02] <Geth> ¦ nqp/address-proc-issues-redux: 79fa780d88 | ab5tract++ | src/HLL/Compiler.nqp

[16:02] <Geth> ¦ nqp/address-proc-issues-redux: Explicitly deactivate repl-mode for -e

[16:02] <Geth> ¦ nqp/address-proc-issues-redux: review: https://github.com/Raku/nqp/commit/79fa780d88

[16:02] <Geth> ¦ rakudo/address-proc-issues-redux: 2a1c050968 | ab5tract++ | tools/templates/NQP_REVISION

[16:02] <Geth> ¦ rakudo/address-proc-issues-redux: Update NQP

[16:02] <Geth> ¦ rakudo/address-proc-issues-redux: review: https://github.com/rakudo/rakudo/commit/2a1c050968

[16:03] <Geth> ¦ rakudo: ab5tract++ created pull request #5739: Draft: Adress proc issues caused by repl-mode

[16:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5739

[16:20] <Geth> ¦ nqp: ab5tract++ created pull request #834: Explicitly deactivate repl-mode for -e

[16:20] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/834

[16:38] *** unicodable6 left
[16:38] *** unicodable6 joined
[17:45] *** kawaii left
[22:39] *** guifa joined
[22:54] *** sena_kun left
[22:58] <guifa> So I think I've found a bug with respect to broadcast sockets.  Not sure where along the way the bug might be though.  But basically, you cannot open a socket on a common multicast port (like 5353), even when using the :broadcast option.   The error is just that the address is already in use

[23:08] <guifa> aha it might be because 5353 is used for multicast, that's separate to broadcast and I don't see any code in MoarVM for activating multicast membership

