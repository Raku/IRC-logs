[01:19] *** AlexDaniel left
[04:30] *** epony left
[04:49] *** epony joined
[05:54] *** epony left
[05:56] *** epony joined
[07:55] *** sena_kun joined
[09:09] *** sena_kun left
[10:15] *** Voldenet left
[10:16] *** Voldenet joined
[11:22] <lizmat> notable6: weekly

[11:22] <notable6> lizmat, No notes for “weekly”

[11:22] <tellable6> 2024-01-02T13:07:23Z #raku-dev <lizmat> notable6: weekly

[11:48] *** nine left
[11:48] *** nine joined
[13:09] *** japhb left
[13:26] *** japhb joined
[16:01] *** japhb left
[16:05] *** japhb joined
[16:15] *** japhb left
[16:19] *** japhb joined
[17:55] * [Coke] yawns

[18:53] *** sena_kun joined
[19:40] <patrickb> lizmat: Would it be difficult to make explicit return inside of LEAVE blocks a compile time error?

[19:40] <patrickb> In RakuAST that is.

[19:50] <patrickb> Hm, given that return is just a subroutine call, doing so is also kind of dirty. Doing so at runtime might be cleaner, but would impose a performance penalty with every return. Ugh...

[20:00] <vrurg> patrickb: what's so bad about explicit return? What if one wants to alter the return value?

[20:06] <Voldenet> it doesn't work in runtime now, but compiles

[20:06] <Voldenet> m: sub x { LEAVE { return 2 }; 1 }; x

[20:06] <camelia> rakudo-moar 225533d6f: OUTPUT: «Attempt to return outside of any Routine␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:06] <patrickb> vrurg: In general I'm unsure if this would be a helpful mechanism and I suspect it brings with it some foot guns. I'm currently looking at https://gist.github.com/patrickbkr/36e2591f427316d47ccd36c5c8766eb5

[20:07] <patrickb> m: sub x { LEAVE { return 5; } return 2; }; x

[20:07] <camelia> rakudo-moar 225533d6f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> sub x { LEAVE { return 5; }⏏ return 2; }; x␤    expecting any of:␤        infix␤        infix stopper␤     …»

[20:07] <patrickb> m: sub x { LEAVE { return 5; }; return 2; }; x

[20:07] <camelia> rakudo-moar 225533d6f: OUTPUT: «Attempt to return outside of any Routine␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:09] <patrickb> m: sub x { with Nil { } else { LEAVE { return 5; }; return 2; } }; x

[20:09] <camelia> rakudo-moar 225533d6f: ( no output )

[20:09] <patrickb> m: sub x { with Nil { } else { LEAVE { return 5; }; return 2; } }; say x

[20:09] <camelia> rakudo-moar 225533d6f: OUTPUT: «5␤»

[20:11] <Voldenet> …huh

[20:11] <Voldenet> m: sub x { { LEAVE { return 2 }; return 1 } }; x

[20:11] <camelia> rakudo-moar 225533d6f: ( no output )

[20:11] <Voldenet> Huh.

[20:12] <Voldenet> it makes a bit of sense, but it's weird

[20:15] <Voldenet> some languages (java/js) allow return, some languages (C#) don't

[20:19] <discord-raku-bot> <nemokosch> how does it make sense?

[20:20] <discord-raku-bot> <nemokosch> does the LEAVE return terminate the surrounding function, then?

[20:20] <discord-raku-bot> <nemokosch> m: sub x { { LEAVE { return 2 }; return 1 }; return 42 }; say x

[20:20] <evalable6> nemokosch, rakudo-moar 225533d6f: OUTPUT: «2␤»

[20:20] <discord-raku-bot> <Raku eval>  2 

[20:20] <discord-raku-bot> <nemokosch> perhaps...

[20:20] <discord-raku-bot> <nemokosch> well yeah, it makes sense implementation-wise but not if you actually want to read the code

[20:21] <discord-raku-bot> <nemokosch> it's horribly unstructured

[20:28] <vrurg> To me LEAVE, as a part of routine body, should be able act as such. Best explanation for it in the most simple words would be: it is the code being ran the last before `return`. Correspondingly, it's rather natural for it to be able to return earlier.

[20:33] <Voldenet> in all languages LEAVE can throw, but in some it can't return Result<T>, so it makes sense to support it

[20:33] <vrurg> Besides, the error message about `return outside of routine` is highly misleading because if the phaser is outside then how come it has access to the lexicals?

[20:34] <Voldenet> imo, after all, it should work

[20:35] <discord-raku-bot> <nemokosch> it should work but not from outside of the scope... right?

[20:35] <discord-raku-bot> <nemokosch> it shouldn't act like a hook embedded after the function

[20:36] <Voldenet> it should act like it's written at the end of the block imo

[20:36] <discord-raku-bot> <nemokosch> at the end, inside the block

[20:36] <Voldenet> ofc, inside

[20:36] <discord-raku-bot> <nemokosch> so change the return

[20:36] <discord-raku-bot> <nemokosch> like the try-finally magic in JS 😄

[20:36] <Voldenet> m: sub db-query { LEAVE { return Failure.new("Cleanup failed"); }; … } # This makes perfect sense

[20:36] <camelia> rakudo-moar 225533d6f: ( no output )

[20:37] <discord-raku-bot> <nemokosch> yep

[20:37] <discord-raku-bot> <nemokosch> then I think all 3 of us said basically the same thing

[20:37] <Voldenet> meaning it's a good idea ;)

[20:37] <discord-raku-bot> <nemokosch> of course! you know what they say about great minds...

[21:29] <patrickb> Thanks for the input!

[21:29] <patrickb> Off to bed for me. o/

[23:40] *** sena_kun left
