[00:03] *** vrurg left
[00:06] <MasterDuke> Voldenet: works as in completely builds rakudo?

[00:07] <Voldenet> "works" as it builds nqp-j

[00:08] <Voldenet> but the process of compiling gets killed, probably by oom killer

[00:08] <Voldenet> I am giving it only 4GB of ram to use

[00:09] <MasterDuke> yeah, i think it wants at least 16gb, though i'm not sure exactly how much it actually uses

[00:18] <Voldenet> I'm running it with some monitoring tools attached and I don't see any steep increase of memory usage

[00:19] *** vrurg joined
[00:24] *** vrurg left
[00:34] <Voldenet> I must say that raku-ast-compiler.nqp is painfully long and not threaded in particular

[00:35] *** vrurg joined
[00:36] <Voldenet> nevermind, it is threaded

[00:38] *** vrurg left
[00:40] *** vrurg joined
[01:20] <Voldenet> Indeed it was an oom killer, I've checked that by default compilation process uses -Xmm6G, so it's obvious why it failed for me

[01:24] <Voldenet> Building v6c actually uses up to 7.38G even with Xmm6G

[01:46] <Voldenet> So, I've checked that it compiles

[01:47] <Voldenet> with openjdk 11.0.19 2023-04-18

[03:02] <MasterDuke> Voldenet: rakudo compiles?

[03:21] <MasterDuke> for anybody who's interested, https://github.com/MasterDuke17/nqp/tree/add_and_use_fastutil_for_java_collections is my wip for this nqp jvm backend work

[03:31] <Voldenet> I've looked and I doubt it will be substantially faster, but I'm sure it is faster

[03:31] <Voldenet> though since raku-ast-compiler takes 1h to compile, even 10% is a win

[03:33] <MasterDuke> oh, but it did finish for you? i'm using openjdk 21. maybe i should get 11 if that will at least build rakudo

[03:34] <Voldenet> I just grabbed whatever was available on the randomly cloned vm, didn't pick this version in particular

[03:34] <MasterDuke> it didn't used to take that long. it was always slower than moarvm, but istr it was about 10m, not 1h

[03:35] <MasterDuke> looks like i have 11 already installed...

[03:39] <Voldenet> I think it's well-paralellized, so it can take 10 minutes if I gave it 4 or 8 cores instead of 2

[03:41] <MasterDuke> trying with openjdk 11 now

[03:46] <MasterDuke> it's allocating tons of TreeMap-related objects

[03:47] <MasterDuke> i wish visualvm told me where in our source things were being allocated from...

[03:54] <Voldenet> Hm, if allocations are the problem, then maybe an object pool could help?

[03:55] <Voldenet> something like ThreadLocal<ObjectPool>

[03:55] <MasterDuke> yeah, that's why i want to know where they're being allocated

[03:58] <MasterDuke> i also don't know if HashMaps would be better and/or iterating them with the new (since the code was originally written) forEach

[03:59] <Voldenet> async-profiler has allocation profiling

[04:01] <Voldenet> I've never used it though

[04:09] <MasterDuke> ah, it seems to be showing me where in our code stuff is being allocated

[04:12] <MasterDuke> and no surprise, it's runNFA (as called by nfarunalts)

[04:26] <MasterDuke> well, with openjdk 11 i get farther in the build, but now it dies with `java.lang.NullPointerException in callsame (gen/jvm/CORE.c.setting:1044)`

[04:27] <MasterDuke> oh, i hadn't pulled the most recent rakudo commits, let me try again with those

[05:08] <MasterDuke> nope, same NPE

[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:02] <Voldenet> are you sure you're building from scratch?

[07:03] <Voldenet> It'd be good if this wasn't a data race or something env-specific

[07:10] <Voldenet> the version I've built is 3c9f07a

[07:11] <Voldenet> erm, 3c9f07a8

[07:11] <linkable6> (2024-02-25) https://github.com/rakudo/rakudo/commit/3c9f07a881 Streamline Metamodel::PackageHOW

[07:50] <Voldenet> So, i'm building rakudo with that fastutil branch, and raku-ast-compiler seems to eat way more memory

[07:51] <Voldenet> in a bit I'll be seeing if build times improved

[07:56] <Voldenet> Memory usage is up from 910MB to 2190MB, Build times improved from around 56 minutes to 8 minutes

[07:58] <Voldenet> during v6c build the memory usage also went up by a lot

[08:05] <Voldenet> MasterDuke: I get exactly the same error, it's some fastutil build problem

[08:06] <Voldenet> in `'/usr/bin/perl' rakudo-j-build –setting=NULL.c –ll-exception –optimize=3 –target=jar –stagestats –output=blib/CORE.c.setting.jar 'gen/jvm/CORE.c.setting'`

[08:07] <Voldenet> in `'/usr/bin/perl' rakudo-j-build --setting=NULL.c --ll-exception --optimize=3 --target=jar --stagestats --output=blib/CORE.c.setting.jar 'gen/jvm/CORE.c.setting'`

[08:17] <Voldenet> MasterDuke: https://github.com/Raku/nqp/commit/654e227e934f166ef9e1cd5018384d0935a4b198 this is wrong, .get returns null and not -1

[08:19] <Voldenet> use Object2IntOpenHashMap<STable> and .getOrDefault(…, -1)

[08:24] <Voldenet> related docs https://fastutil.di.unimi.it/docs/it/unimi/dsi/fastutil/objects/Object2IntMap.html#get(java.lang.Object)

[08:47] <Voldenet> intriguingly, nqp tests pass

[09:10] *** sena_kun joined
[10:07] <Geth> ¦ nqp/main: 73f53f1297 | (Elizabeth Mattijsen)++ | 8 files

[10:07] <Geth> ¦ nqp/main: Mark all potentially useless arguments

[10:07] <Geth> ¦ nqp/main: 

[10:07] <Geth> ¦ nqp/main: - if a method accepts a single positional argument and it is **NOT**

[10:07] <Geth> ¦ nqp/main:   being used inside the method, rename it to $XXX and make it optional

[10:07] <Geth> ¦ nqp/main: - if the first positional argument *is* used in the method, rename

[10:07] <Geth> ¦ nqp/main:   it to $target and change all references to that as well.  It may

[10:07] <Geth> ¦ nqp/main:   well be that it turns out that the argument *is* useless in the

[10:07] <Geth> ¦ nqp/main: <…commit message has 6 more lines…>

[10:08] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/73f53f1297

[10:27] <Geth> ¦ rakudo/main: cf4babd282 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[10:27] <Geth> ¦ rakudo/main: Bump NQP for JVM build fix

[10:27] <Geth> ¦ rakudo/main: 

[10:27] <Geth> ¦ rakudo/main: And variable renaming

[10:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cf4babd282

[11:43] <Geth> ¦ nqp/main: 9ecf1f156d | (Elizabeth Mattijsen)++ | src/how/NQPAttribute.nqp

[11:43] <Geth> ¦ nqp/main: Fix typo, Masterduke++

[11:43] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/9ecf1f156d

[12:15] <Geth> ¦ rakudo/main: 4f64b4876b | (Elizabeth Mattijsen)++ | 33 files

[12:15] <Geth> ¦ rakudo/main: Mark all potentially useless arguments

[12:15] <Geth> ¦ rakudo/main: 

[12:15] <Geth> ¦ rakudo/main: - if a method accepts a single positional argument and it is **NOT**

[12:15] <Geth> ¦ rakudo/main:   being used inside the method, rename it to $XXX and make it optional

[12:15] <Geth> ¦ rakudo/main: - if a method accepts multiple positional arguments and the first one

[12:15] <Geth> ¦ rakudo/main:   is not being used, rename it to $XXX

[12:16] <Geth> ¦ rakudo/main: - if the first positional argument *is* used in the method, rename

[12:16] <Geth> ¦ rakudo/main:   it to $target and change all references to that as well.  It may

[12:16] <Geth> ¦ rakudo/main:   well be that it turns out that the argument *is* useless in the

[12:16] <Geth> ¦ rakudo/main:   end.  By renaming it, it is at least clear that we've looked at

[12:16] <Geth> ¦ rakudo/main:   it.

[12:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4f64b4876b

[12:27] <Geth> ¦ nqp/main: 91b6bd236a | (Elizabeth Mattijsen)++ | src/how/NQPClassHOW.nqp

[12:27] <Geth> ¦ nqp/main: (is_)array_type don't need any positional argument

[12:27] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/91b6bd236a

[12:34] <Geth> ¦ rakudo/main: 5585454f54 | (Elizabeth Mattijsen)++ | 4 files

[12:34] <Geth> ¦ rakudo/main: (is_)array_type don't need any positional argument

[12:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5585454f54

[12:40] <Geth> ¦ problem-solving: patrickbkr assigned to codesections Issue Code highlighting / inspection / IDE tooling https://github.com/Raku/problem-solving/issues/422

[13:10] <Geth> ¦ rakudo/main: cf773dc2df | (Elizabeth Mattijsen)++ | 15 files

[13:10] <Geth> ¦ rakudo/main: Abstract .new handling in Metamodel::BUILDALL role

[13:10] <Geth> ¦ rakudo/main: 

[13:10] <Geth> ¦ rakudo/main: So we only need to look up where NQPMu.BUILDALL lives, and

[13:10] <Geth> ¦ rakudo/main: allow for other debugging / optimising in the future

[13:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cf773dc2df

[13:27] <Geth> ¦ rakudo/main: 68cd850fb8 | (Elizabeth Mattijsen)++ | 11 files

[13:27] <Geth> ¦ rakudo/main: language_revision doesn't need any positional argument

[13:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/68cd850fb8

[14:38] <Geth> ¦ rakudo/main: fd936efefa | (Elizabeth Mattijsen)++ | 2 files

[14:38] <Geth> ¦ rakudo/main: Use shortcuts for $target.HOW

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: So we don't need to do that over and over again

[14:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fd936efefa

[14:38] <Geth> ¦ rakudo/main: 0422989966 | (Elizabeth Mattijsen)++ | 12 files

[14:38] <Geth> ¦ rakudo/main: Use "self" as shortcut for $target.HOW

[14:38] <Geth> ¦ rakudo/main: 

[14:39] <Geth> ¦ rakudo/main: Although technically it *is* possible to call a method on a

[14:39] <Geth> ¦ rakudo/main: xxxHOW class where the target does not have the invocant as

[14:39] <Geth> ¦ rakudo/main: its HOW, it would really naughty to do so.

[14:39] <Geth> ¦ rakudo/main: 

[14:39] <Geth> ¦ rakudo/main: So use "self" as a shortcut for $target.HOW where possible.

[14:39] <Geth> ¦ rakudo/main: This should at least reduce the bytecode size.

[14:39] <Geth> ¦ rakudo/main: 

[14:39] <Geth> ¦ rakudo/main: This also makes naughtiness a DIHWIDT.

[14:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0422989966

[14:44] *** sena_kun left
[15:07] *** sena_kun joined
[15:18] *** sena_kun left
[15:19] *** sena_kun joined
[16:52] <Geth> ¦ rakudo/main: 3c2182652d | (Elizabeth Mattijsen)++ | 7 files

[16:52] <Geth> ¦ rakudo/main: Streamline name / ver / auth / api setting

[16:52] <Geth> ¦ rakudo/main: 

[16:52] <Geth> ¦ rakudo/main: All of the methods that do this, accept these settings as named

[16:52] <Geth> ¦ rakudo/main: arguments.  So add a "set_identity" method in the Versioning role

[16:52] <Geth> ¦ rakudo/main: that will set the appropriate attributes from the info of the

[16:52] <Geth> ¦ rakudo/main: named arguments.

[16:52] <Geth> ¦ rakudo/main: 

[16:52] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[16:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3c2182652d

[17:06] *** Xliff joined
[17:06] <Xliff> Has anyone had a chance to look at #5534, yet?

[17:11] <lizmat> MasterDuke ^^ ??

[17:59] <Geth> ¦ rakudo/main: 192d7d0ab1 | (Elizabeth Mattijsen)++ | 11 files

[17:59] <Geth> ¦ rakudo/main: Trailing whitespace cleanup

[17:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/192d7d0ab1

[19:36] <lizmat> Geth 

[19:37] *** Geth left
[19:37] *** Geth joined
[19:37] <Geth> ¦ rakudo/main: 3271329c84 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/Trusting.nqp

[19:37] <Geth> ¦ rakudo/main: Streamline Metamodel::Trusting

[19:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3271329c84

[19:37] <Geth> ¦ rakudo/main: 71dcfd42c6 | (Elizabeth Mattijsen)++ | 10 files

[19:37] <Geth> ¦ rakudo/main: Use nqp::push(foo,bar) instead of foo[+foo] := bar

[19:37] <Geth> ¦ rakudo/main: 

[19:37] <Geth> ¦ rakudo/main: nqp::push has a smaller bytecode size and is about 1.7x as fast.

[19:37] <Geth> ¦ rakudo/main: Hopefully also helps with better inlining

[19:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/71dcfd42c6

[19:42] <Xliff> lizmat: ME reference?

[19:42] <lizmat> ?

[19:43] <Xliff> "Geth". Is it a Mass Effect reference?

[19:43] <lizmat> I have no idea: the name predates my deep involvement in Raku

[19:43] <Xliff> Origin, then?

[19:46] <lizmat> I guess it could well be a Mass Effect reference  :-)

[19:47] <lizmat> "Servant of the People" describes it well :-)

[20:04] *** codesections1 joined
[20:09] <gfldex> Xliff: Before Geth we had Dalek. Surprisingly, no extermination ever transpired.

[20:10] <lizmat> aah... yes... I remember now  :-)

[20:13] <gfldex> I just checked we switched the bots at: Log opened Sun Jan 08 10:08:46 2017

[20:18] <lizmat> I guess my memory isn't what it used to be

[20:19] <gfldex> Without IRC logs I would be lost too. :->

[20:20] <lizmat> :-)

[20:37] <Geth> ¦ rakudo/main: 52dfda3fc3 | (Elizabeth Mattijsen)++ | 9 files

[20:37] <Geth> ¦ rakudo/main: Change remaining +@foo to nqp::elems(@foo)

[20:37] <Geth> ¦ rakudo/main: 

[20:37] <Geth> ¦ rakudo/main: And some additional streamlining.  nqp::elems(@foo) is about 50x

[20:37] <Geth> ¦ rakudo/main: as fast as +@foo.

[20:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/52dfda3fc3

[20:49] <Geth> ¦ rakudo/main: b720babdea | (Elizabeth Mattijsen)++ | 2 files

[20:49] <Geth> ¦ rakudo/main: Change the few cases of if foo -> int bar {

[20:49] <Geth> ¦ rakudo/main: 

[20:49] <Geth> ¦ rakudo/main: Although this is pretty normal in Raku, it only occurred twice in

[20:49] <Geth> ¦ rakudo/main: the NQP part of Rakudo.  And the few other times I used that construct

[20:49] <Geth> ¦ rakudo/main: I got *very* weird runtime errors.  So even though NQP allows the

[20:49] <Geth> ¦ rakudo/main: syntax, I'm not convinced it actually codegens correctly.

[20:49] <Geth> ¦ rakudo/main: 

[20:49] <Geth> ¦ rakudo/main: So, it is a bit superstitious, but it felt an easy decision to make.

[20:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b720babdea

[20:59] *** codesections1 left
[21:04] <Geth> ¦ nqp/main: eb7016e7f8 | (Elizabeth Mattijsen)++ | 5 files

[21:04] <Geth> ¦ nqp/main: The method_table method is always an instance method

[21:04] <Geth> ¦ nqp/main: 

[21:04] <Geth> ¦ nqp/main: And can therefore be called without any additional arguments.

[21:04] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/eb7016e7f8

[21:07] <lizmat> greppable6: method method_table

[21:07] <greppable6> lizmat, 3 lines, 2 modules: https://gist.github.com/0ae12e4aa34e596ca8a1c9afb66fe22a

[21:12] *** codesections1 joined
[21:24] <Geth> ¦ nqp/main: 16b425ce63 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[21:24] <Geth> ¦ nqp/main: Bump MoarVM to get better Int -> int error message

[21:24] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/16b425ce63

[21:31] *** codesections1 left
[21:31] *** codesections1 joined
[21:32] *** codesections1 left
[21:34] *** codesections1 joined
[21:39] <Geth> ¦ roast: 2e0f5f7c55 | (Elizabeth Mattijsen)++ | S02-types/declare.t

[21:39] <Geth> ¦ roast: Fix error testing because message got more verbose

[21:39] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2e0f5f7c55

[21:40] <Geth> ¦ rakudo/main: a4d3396ee1 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[21:40] <Geth> ¦ rakudo/main: Bump NQP to get various fixes

[21:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a4d3396ee1

[22:09] *** codesections1 left
[22:27] *** sena_kun left
[23:09] *** lizmat_ joined
[23:12] *** lizmat left
