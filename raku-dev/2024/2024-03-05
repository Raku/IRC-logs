[03:01] *** MasterDuke joined
[03:03] <MasterDuke> huh. well that whole exercise was somewhat unnecessary. turns out the jvm build is fine at HEAD of nqp/rakudo. however, it may require openjdk 11 (instead of openjdk 21 as was my system default) and/or `make -j1` (instead of `make -j12`, like i usually use)

[04:21] <MasterDuke> hm. but my fastutil branch doesn't seem to build even with `make -j1`...ugh

[06:53] *** Util left
[07:00] *** Util joined
[08:21] *** timo left
[08:58] *** timo joined
[09:19] *** sena_kun joined
[09:34] <Geth> ¦ nqp/main: 4262be61ea | (Elizabeth Mattijsen)++ | 2 files

[09:34] <Geth> ¦ nqp/main: Add SIG_ELEM_ALL_NAMES_OK + SIG_ELEM_SLURPY_ARITY

[09:34] <Geth> ¦ nqp/main: 

[09:34] <Geth> ¦ nqp/main: And fix SIG_ELEM_IS_NOT_POSITIONAL on the JVM backend

[09:34] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/4262be61ea

[09:50] <Geth> ¦ rakudo/main: 2f67432810 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[09:50] <Geth> ¦ rakudo/main: Bum NQP to get new nqp::const values

[09:50] <Geth> ¦ rakudo/main: 

[09:50] <Geth> ¦ rakudo/main: - SIG_ELEM_ALL_NAMES_OK

[09:50] <Geth> ¦ rakudo/main: - SIG_ELEM_SLURPY_ARITY

[09:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2f67432810

[11:01] *** timo left
[11:15] *** timo joined
[11:27] *** timo left
[11:27] *** timo joined
[11:52] <Geth> ¦ rakudo/main: 8f9ad9a3ef | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[11:52] <Geth> ¦ rakudo/main: Streamline Routine quite a bit

[11:52] <Geth> ¦ rakudo/main: 

[11:52] <Geth> ¦ rakudo/main: Including the sort_dispatchees logic.  This causes "make test" to drop

[11:52] <Geth> ¦ rakudo/main: from 202 CPU seconds -> 195 CPU seconds, and lose a few seconds wallclock

[11:52] <Geth> ¦ rakudo/main: on "make spectest", as well as installing core modules < 8 seconds

[11:52] <Geth> ¦ rakudo/main: wallclock.

[11:52] <Geth> ¦ rakudo/main: 

[11:52] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[11:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8f9ad9a3ef

[11:52] <lizmat> actual dispatch logic next

[12:56] <[Coke]> MasterDuke: if you can add whatever is state of the art needed for build in the jvm readme, it'll help the occasional dabbler like myself.

[13:12] <Geth> ¦ rakudo: coke assigned to lizmat Issue discrepancy in --doc output between standard/RAKUAST https://github.com/rakudo/rakudo/issues/5536

[13:13] * [Coke] understands if the answer is "we'll get the bug fix when RakuAST lands"

[13:14] <lizmat> I think the answer is: the old renderer gets it wrong

[13:14] <lizmat> :-)

[14:18] <Geth> ¦ rakudo/main: 8b00ff5b70 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[14:18] <Geth> ¦ rakudo/main: Remove "add_to_cache" functionality from Moar backend

[14:18] <Geth> ¦ rakudo/main: 

[14:18] <Geth> ¦ rakudo/main: Instead of just blocking out the contents of the method

[14:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8b00ff5b70

[15:26] *** MasterDuke left
[17:15] <Geth> ¦ rakudo/main: 0b65e78b44 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[17:15] <Geth> ¦ rakudo/main: Add Routine.dispatch_order accessor

[17:15] <Geth> ¦ rakudo/main: 

[17:15] <Geth> ¦ rakudo/main: Which will sort the dispatchees on demand of not sorted already

[17:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0b65e78b44

[17:59] <Geth> ¦ rakudo/main: 3a66dc104d | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[17:59] <Geth> ¦ rakudo/main: Streamlining Routine.find_best_dispatchee (Part 1)

[17:59] <Geth> ¦ rakudo/main: 

[17:59] <Geth> ¦ rakudo/main: This is mostly about de-indenting the code, and localizing some

[17:59] <Geth> ¦ rakudo/main: variables to the scope that their needed.

[17:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a66dc104d

[18:13] <Geth> ¦ rakudo/main: c9ecbda2b7 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[18:13] <Geth> ¦ rakudo/main: Streamlining Routine.find_best_dispatchee (Part 2)

[18:13] <Geth> ¦ rakudo/main: 

[18:13] <Geth> ¦ rakudo/main: We only need one flag to indicate mismatches

[18:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c9ecbda2b7

[18:18] <lizmat> going to do the streamlining of find_best_dispatchee very carefully and in small steps

[18:18] <lizmat> as this is really deep at the heart of Raku, and if something gets borked, (and it undoubtedly will), we can have a better bisect

[18:20] <jdv> is this mostly part of "new disp" or does it predate that?

[18:23] <lizmat> this goes all the way back to nom

[18:23] <lizmat> with some additions for unsigned ints since then

[18:25] <Geth> ¦ rakudo/main: 48509e00b8 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[18:25] <Geth> ¦ rakudo/main: Streamlining Routine.find_best_dispatchee (Part 3)

[18:25] <Geth> ¦ rakudo/main: 

[18:25] <Geth> ¦ rakudo/main: Flip the meaning of the mismatch flag, so we don't have to negate

[18:25] <Geth> ¦ rakudo/main: when checking.  For changing the value, it doesn't matter whether

[18:25] <Geth> ¦ rakudo/main: 1 or 0 is set.

[18:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/48509e00b8

[19:08] <Geth> ¦ rakudo/main: 70b8b229fa | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[19:08] <Geth> ¦ rakudo/main: Streamlining Routine.find_best_dispatchee (Part 4)

[19:08] <Geth> ¦ rakudo/main: 

[19:08] <Geth> ¦ rakudo/main: Some more object vs native checking

[19:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/70b8b229fa

[19:50] *** MasterDuke joined
[19:52] <MasterDuke> [Coke]: i don't think anything terribly special is needed, though i guess i could try a couple java versions other than 11 and 21 and mention which ones work

[19:57] <MasterDuke> ah, the nqp readme says 9 is the minimum, so i guess i just need to try 17 and 21 (since we know 11 works)

[21:06] <[Coke]> +1

[21:07] <[Coke]> I haven't had luck with os x java (Which is I think is the oracle version)

[21:07] <[Coke]> don't think I've built a java build since I got the mac.

[22:56] <lizmat> fwiw, I gave up on building on the JVM backend on MacOS

[23:21] <MasterDuke> the mac jvm ci jobs are passing, so it must be possible to build somehow

[23:25] <MasterDuke> looks like it's using java 11

[23:37] *** sena_kun left
