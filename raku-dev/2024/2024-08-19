[07:26] *** sena_kun joined
[07:38] *** sena_kun left
[07:59] <[Tux]> Rakudo v2024.07-169-g5cca0b4fc (v6.d) on MoarVM 2024.07-13-g5e52422f4

[07:59] <[Tux]> csv-test-xs-20      0.141 -  0.141

[07:59] <[Tux]> csv-ip5xs           0.257 -  0.261

[07:59] <[Tux]> test-t --race       0.263 -  0.267

[07:59] <[Tux]> test-t              0.394 -  0.403

[07:59] <[Tux]> csv-ip5xs-20        1.119 -  1.130

[07:59] <[Tux]> test-t-20 --race    1.162 -  1.179

[07:59] <[Tux]> csv-parser          1.464 -  1.524

[07:59] <[Tux]> test                1.802 -  1.852

[07:59] <[Tux]> test-t-20           4.875 -  4.934

[07:59] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[08:00] <[Tux]>  5 2024-08-01 13:21:54 test-t 0.403

[08:00] <[Tux]>  4 2024-08-05 14:33:33 test-t 0.399

[08:00] <[Tux]>  3 2024-07-18 08:42:10 test-t 0.399

[08:00] <[Tux]>  2 2024-08-01 13:22:46 test-t 0.395

[08:00] <[Tux]>  1 2024-08-19 09:58:29 test-t 0.394

[08:00] <[Tux]> 20240801 0.403❙20240805 0.399❙20240718 0.399❙20240801 0.395❙20240819 0.394❙

[08:01] <[Tux]> smallest possible win :)

[08:56] *** MasterDuke left
[10:47] <nine> m: use Test; ok EVAL('not OUTER::<$x>:exists'), 'OUTER::<$x>'; my $x; #OK not used

[10:47] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «ok 1 - OUTER::<$x>␤»

[10:48] <nine> Ok, why is this the correct behavior? The evaled expression's outer scope is the one that contains the my $x

[10:49] <nine> The ticket this test was written for is https://github.com/Raku/old-issue-tracker/issues/655 which only talks about my $a if 0; say $a leading to a compiler crash. The commit message only says that the test is for this ticket and the test description is anything but descriptive.

[10:54] <nine> m: use Test; my $x; ok EVAL('not OUTER::<$x>:exists'), 'OUTER::<$x>';

[10:54] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «ok 1 - OUTER::<$x>␤»

[10:55] <nine> This ^^^ makes it look somewhat suspicious. Why is the variable declared after the EVAL when it's actual position doesn't matter? That introduces an unneeded element to the test that can only serve to confuse the reader.

[10:56] <nine> m: use Test; ok EVAL('not OUTER::OUTER::<$x>:exists'), 'OUTER::<$x>'; my $x; #OK not used

[10:56] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «not ok 1 - OUTER::<$x>␤# Failed test 'OUTER::<$x>'␤# at <tmp> line 1␤»

[10:58] *** guest555 joined
[10:59] <nine> And here there's a plot twist! This change reveals that all the test is really testing is that the EVAL implementation does not use a variable called $x. Presumably because the old frontend generates an additional lexical scope wrapped around a comp unit..

[10:59] <nine> m: my $x; EVAL('say OUTER::.keys') # Outer scope of eval'ed code is empty.

[10:59] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «()␤»

[10:59] <nine> m: my $x; EVAL('say OUTER::OUTER::.keys') # Go out one more scope to get to the actual outer scope

[10:59] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «(::?PACKAGE GLOBALish $=pod !UNIT_MARKER $_ $¢ $/ $?PACKAGE $x EXPORT $=finish $!)␤»

[11:00] <nine> I'm gonna remove that test. It's bogus, undocumented, has never done what it intended and would fail if we fixed it.

[11:01] <lizmat> +1

[11:18] *** guest555 left
[11:20] <Geth> ¦ roast: 2cfdc68b89 | (Stefan Seifert)++ | S04-declarations/my-6e.t

[11:20] <Geth> ¦ roast: Remove bogus test

[11:20] <Geth> ¦ roast: 

[11:20] <Geth> ¦ roast: The old compiler frontend creates an additional lexical scope that's

[11:20] <Geth> ¦ roast: wrapped around the compunit's scope. Thus OUTER::.keys in an EVAL would

[11:20] <Geth> ¦ roast: always return an empty list. To access the actual outer scope of the

[11:20] <Geth> ¦ roast: EVAL, one would have to access OUTER::OUTER. Thus this test did not

[11:20] <Geth> ¦ roast: actually check whether the variable could be found in the intended

[11:20] <Geth> ¦ roast: <…commit message has 17 more lines…>

[11:20] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2cfdc68b89

[11:44] <lizmat> notable6: weekly

[11:44] <notable6> lizmat, No notes for “weekly”

[11:57] <nine> Is it me or did this commit introduce a missing semicolon error in line 15? https://github.com/Raku/roast/commit/d7f03fcb90d3cc26ae0c284ac879364834539919

[11:58] <lizmat> it did, and it wasn't caught because of the + on the next line

[11:59] <nine> RakuAST caught it because it throws a "Cannot use variable $sample in declaration to initialize itself" error which I think is quite correct.

[12:00] <nine> Of course when I add that semicolon, 2 tests fail now: ok picker-seems-random( { $z = @array[ rand*@array ]; } ), '$z = @array[ rand*@array ];';

[12:01] <nine> Btw. what the hell is the point of just repeating the tested code in the test "description" that's so common in the spec tests?!

[12:02] <nine> That doesn't tell the reader anything at all

[12:02] <lizmat> it does the watcher of the test output 

[12:03] <nine> Doesn't tell them what the test means either

[12:03] <lizmat> there's that...

[12:03] <nine> # Failed test '$z = @array[ rand*@array ];'

[12:03] <nine> So what now?

[12:04] <ab5tract> Is it broken in base as well?

[12:06] <ab5tract> Re: description, I like it best when there is both an explanation and a representation of the (at least some of the) test content

[12:07] <nine> yes it is

[12:10] <nine> m: my $i = 0; my $sample = set (1..15).map({ $i++ }); dd $sample

[12:10] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «$sample = Set.new(5,6,2,10,9,4,1,12,14,0,7,11,3,13,8)␤»

[12:10] <nine> m: my $i = 0; my $z; my $sample = set (1..15).map({ $z = $i++ }); dd $sample

[12:10] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «$sample = Set.new(14)␤»

[12:10] <nine> This ^^^ difference is why it fails

[12:11] <nine> My guess is that we repeatedly add $z's container to the set, thus we retain only the last added element.

[12:11] <lizmat> m: my $i = 0; my $z; my $sample = set (1..15).map({ $z = $i++; $z<> }); dd $sample

[12:11] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «$sample = Set.new(11,4,6,2,10,1,0,8,3,5,13,9,7,14,12)␤»

[12:11] <lizmat> indeed

[12:12] <lizmat> maybe dd should be taught to show containers as well

[12:13] <nine> Test is taken straight from a blog post. Original is:

[12:13] <nine>  # Pick a random array element

[12:13] <nine>  $z = $array[ int(rand scalar(@array)) ];

[12:13] <nine>  $z = $array[ rand @array ];

[12:13] <nine> So that $z = is just copy pasta

[12:17] <Geth> ¦ roast: e6502dcf1c | (Stefan Seifert)++ | integration/advent2011-day23.t

[12:17] <Geth> ¦ roast: Fix missing semicolon in test

[12:17] <Geth> ¦ roast: 

[12:17] <Geth> ¦ roast: Commit d7f03fcb90d3cc26ae0c284ac879364834539919 introduce a missing

[12:17] <Geth> ¦ roast: semicolon error. This however did not surface because the following line

[12:17] <Geth> ¦ roast: starts with a prefix + which without the semicolon was interpreted as an

[12:17] <Geth> ¦ roast: infix. The result is that the test sub always returned a true value.

[12:17] <Geth> ¦ roast: 

[12:17] <Geth> ¦ roast: <…commit message has 9 more lines…>

[12:17] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e6502dcf1c

[14:13] *** coleman left
[14:21] *** coleman joined
[14:51] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/08/19/2024-34-steaming-ahead/

[15:34] <Geth> ¦ roast: 99ab3a00bd | (Stefan Seifert)++ | S12-class/augment-supersede.t

[15:34] <Geth> ¦ roast: Fix syntax error in test

[15:34] <Geth> ¦ roast: 

[15:34] <Geth> ¦ roast: The test contains an expected error but also an unintended syntax error.

[15:34] <Geth> ¦ roast: If the compiler delays reporting the expected error, it may never get to

[15:34] <Geth> ¦ roast: the point of reporting it. So fix the unintended error.

[15:34] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/99ab3a00bd

[15:36] <jdv> nine: is this your full time job for the moment?

[15:38] <Geth> ¦ rakudo/main: 9 commits pushed by (Stefan Seifert)++

[15:38] <Geth> ¦ rakudo/main: 1b843c756d | RakuAST: fix terms in signature declarations

[15:38] <Geth> ¦ rakudo/main: 82e5aada31 | RakuAST: fix duplicate declarations with type captures on variable declarations

[15:38] <Geth> ¦ rakudo/main: dcec75e952 | RakuAST: give a more helpful error when defaulting variable with itself

[15:38] <Geth> ¦ rakudo/main: c0880471d0 | RakuAST: give a more helpful error when initializing variable with itself

[15:38] <Geth> ¦ rakudo/main: 76d9e1c239 | RakuAST: ParameterTarget::Var is no longer a ContainerCreator

[15:38] <Geth> ¦ rakudo/main: 86502c46c5 | RakuAST: fix typed signature declarations not creating typed variables

[15:38] <Geth> ¦ rakudo/main: 25e6280adf | RakuAST: fix default value of &-sigiled variables

[15:38] <Geth> ¦ rakudo/main: 87db5bddbb | RakuAST: complain about term in signature declarations without initializer

[15:38] <Geth> ¦ rakudo/main: e6c2490e01 | RakuAST: report exceptions thrown by traits as sorries

[15:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/5cca0b4fca46...e6c2490e01e8

[15:38] <nine> 1119 - a lot of work for a single test file

[15:39] <nine> jdv: well it has been for the past 3 weeks thanks to the grant. But I have to prioritize another customer for now.

[15:40] <nine> Wanted to do so today already but thought I'd finish up that one test file I had already started working on yesterday first. Didn't anticipate this to be such a hard one

[15:55] <jdv> cool.  does your real job use raku at all?

[15:57] <nine> Actually no :)

[15:57] <nine> Well, a really tiny bit

[15:58] <jdv> probably safer for the moment:)

[16:20] <Geth> ¦ rakudo/main: f829dd376b | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[16:20] <Geth> ¦ rakudo/main: RakuAST: fix our-scoped signature declarations writing to package

[16:20] <Geth> ¦ rakudo/main: 

[16:20] <Geth> ¦ rakudo/main: We accidentally only updated the declared variables' scopes when there

[16:20] <Geth> ¦ rakudo/main: were also traits to apply.

[16:20] <Geth> ¦ rakudo/main: 

[16:20] <Geth> ¦ rakudo/main: Fixes: package Foo { our ($a) = 1; }; say Foo::a

[16:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f829dd376b

[16:21] <nine> And then there are simple straight forward bug fixes like this bringing us up to 1120

[16:40] *** sena_kun joined
[16:50] *** lizmat left
[16:51] *** lizmat joined
[19:31] *** dawids_ joined
[19:44] <Geth> ¦ rakudo/main: efea1da0fd | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[19:44] <Geth> ¦ rakudo/main: RakuAST: fix mis-parsing version-like variable names as versions

[19:44] <Geth> ¦ rakudo/main: 

[19:44] <Geth> ¦ rakudo/main: Fixes: my \v1 = 42; say v1

[19:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/efea1da0fd

[19:44] <nine> That was literally a 5 minute job :)

[19:49] <nine> 1121

[20:05] <Geth> ¦ rakudo/main: 67ab2fb43f | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[20:05] <Geth> ¦ rakudo/main: RakuAST: remove counter productive invocant type check on Grammar methods

[20:05] <Geth> ¦ rakudo/main: 

[20:05] <Geth> ¦ rakudo/main: Grammar methods like tokens or rules are odd in that they are not called

[20:05] <Geth> ¦ rakudo/main: with the grammar itself as an invocant but instead with a Match object.

[20:05] <Geth> ¦ rakudo/main: Thus doing the usual type check on the invocant would prevent calls from

[20:05] <Geth> ¦ rakudo/main: succeeding. The old frontend does not do any type check and so we

[20:05] <Geth> ¦ rakudo/main: shouldn't either.

[20:05] <Geth> ¦ rakudo/main: 

[20:05] <Geth> ¦ rakudo/main: Fixes: grammar D { our token doo { doo }; }; say "doo" ~~ &D::doo

[20:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/67ab2fb43f

[20:05] <nine> Number 1122 did not take much longer

[21:41] *** dawids_ left
[21:47] *** sena_kun left
[23:01] *** MasterDuke joined
