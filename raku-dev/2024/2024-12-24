[10:59] *** sena_kun joined
[11:45] <ab5tract> m: { .keys Z .values }(<a b c d e f>) ==> say()

[11:45] <camelia> rakudo-moar f58bed9f6: OUTPUT: «((0 a) (1 b) (2 c) (3 d) (4 e) (5 f))␤»

[11:47] <ab5tract> lizmat: ^^

[11:48] <lizmat> ah, duh, yeah, the default for Z is , not =>  duh  :-)

[11:48] <lizmat> which is what it is effectively now

[11:49] <ab5tract> Not really

[11:50] <ab5tract> Imo flattening kv was unnecessary and needlessly breaks the semantics of map and grep from being a simple “processes a list on element at a time”

[11:50] <ab5tract> *one

[11:51] <ab5tract> The zip of keys and values is the actual implementation of kv if you git log it

[11:52] <ab5tract> *actual implementation originally

[11:54] <ab5tract> Anyway, imo that’s the actual source of conflict from that thread. .kv doesn’t have the same shape as .kv.map or .kv.grep (when those operations return both k and v)

[12:05] <ab5tract> But: if there are significant performance benefits from the way it works now…

[12:14] *** sena_kun left
[12:17] <lizmat> m: my $i = <a b c>.kv.iterator; say $i.pull-one for ^6

[12:17] <camelia> rakudo-moar f58bed9f6: OUTPUT: «0␤a␤1␤b␤2␤c␤»

[12:17] <lizmat> this is how .kv is implemented: no additional objects are created

[12:20] *** sena_kun joined
[12:20] *** sena_kun left
[12:23] *** sena_kun joined
[12:33] <ab5tract> I’m a bit confused. That example just shows that .kv produces a flat list, I don’t see how it reflects the actual implementation (since your example calls .kv )

[12:34] <ab5tract> I’m not disputing that it does this. I’m mentioning that it did not always do that.

[12:35] <ab5tract> But it’s early here and I’m recovering from a cold, so apologies in advance for grok failures

[12:56] <lizmat> I was jus showing that creating Lists would be extra work

[14:29] <[Tux]> Rakudo v2024.12-25-gf58bed9f6 (v6.d) on MoarVM 2024.12-8-gf4680765f

[14:29] <[Tux]> csv-test-xs-20      0.142 -  0.145

[14:29] <[Tux]> csv-ip5xs           0.264 -  0.268

[14:29] <[Tux]> test-t --race       0.272 -  0.293

[14:29] <[Tux]> test-t              0.413 -  0.421

[14:29] <[Tux]> csv-ip5xs-20        1.133 -  1.155

[14:29] <[Tux]> test-t-20 --race    1.252 -  1.295

[14:29] <[Tux]> csv-parser          1.518 -  1.594

[14:29] <[Tux]> test                1.860 -  1.903

[14:29] <[Tux]> test-t-20           5.041 -  5.100

[14:29] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[14:29] <[Tux]> slight slowdown. PC is not busy

[16:45] <ab5tract> It looks like the make list / destructure list required in my idealized .kv is 3x as slow :(

[16:55] <ab5tract> So yeah, I'll let that dream go away

[20:47] *** bartolin left
[20:47] *** bartolin joined
[20:47] *** lizmat_ joined
[20:50] *** lizmat left
[23:17] *** sena_kun left
