[08:07] *** sena_kun joined
[08:35] *** finanalyst joined
[08:38] <finanalyst> .tell [Coke] please take another look at doc-website PR#363. Makes indexed=true default, and defaults are not written unless changed

[08:38] <tellable6> finanalyst, I'll pass your message to [Coke]

[09:18] *** finanalyst left
[10:50] <lizmat> https://github.com/Raku/problem-solving/issues/424

[12:16] <nine> lizmat: LOL did I really just guess an actual module and that's even written by yourself? What are the odds? :)

[12:16] <lizmat> hehe

[12:58] <nine> Btw. I'm not convinced that small reductions in bytecode size would be worth anything but minor changes. The most likely source of any performance improvement would be getting some routines below the inlining limit. But if that really helps so much we could as well just increase that limit by 5 %.

[12:58] <lizmat> https://github.com/Raku/problem-solving/issues/425

[12:58] <lizmat> I think the current limit is there for a reason

[12:59] <lizmat> but perhaps we need to play with that as well to see what gives better performance

[13:01] <nine> There's already a different max_inline_size for Raku (384) than the default of 192 (which still gets used for NQP). Both were determined empirically.

[13:19] <lizmat> % bceval c '.frames.grep({ 385 < .opcodes.elems < 400}).elems' 

[13:19] <lizmat> 268

[13:19] <lizmat> the C setting has 268 frames that are just above the threshold

[13:20] <lizmat> currently c setting has 18720 frames below the threshold

[13:20] <lizmat> % bceval c '.frames.grep({ .opcodes.elems <= 384}).elems'

[13:20] <lizmat> 18720

[13:21] <lizmat> all of this with a grain of salt, of course, as the bytecode from disk is really quickly altered by spesh in the runtime

[13:22] <nine> Speshed bytecode can be a lot smaller than the original

[13:22] <nine> That's the norm actually

[14:08] *** Altai-man joined
[14:10] *** sena_kun left
[16:25] *** finanalyst joined
[17:51] <finanalyst> [Coke] I've implemented a reset button as requested for the search options. Its working on new-raku. Tests still in progress on doc-website

[18:11] <finanalyst> [Coke] tests passing

[18:43] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++

[18:43] <Geth> ¦ rakudo/main: fe579a3b50 | RakuAST: thunk arguments of meta-operators appropriately

[18:43] <Geth> ¦ rakudo/main: d890d89e81 | RakuAST: thunk operands of meta operations if required

[18:43] <Geth> ¦ rakudo/main: cd19726468 | RakuAST: Only thunk literal list operands of meta operators

[18:43] <Geth> ¦ rakudo/main: 5485db2254 | RakuAST: don't thunk arguments to MetaInfix::Assign

[18:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/a4c7d5d1939f...5485db22541e

[19:01] <lizmat> 1058!

[19:12] <ab5tract> heck yeah :)

[19:25] <Geth> ¦ rakudo/main: d6dc3610ea | ab5tract++ (committed using GitHub Web editor) | src/core.c/Any.rakumod

[19:25] <Geth> ¦ rakudo/main: Supply an Any.match method candidate for Any:D (#5559)

[19:25] <Geth> ¦ rakudo/main: 

[19:25] <Geth> ¦ rakudo/main: This addresses the use of non-`Str` candidates arriving

[19:25] <Geth> ¦ rakudo/main: in `where` constraints that attempt to match against

[19:25] <Geth> ¦ rakudo/main: a regex. (R#5464 / #5464).

[19:25] <Geth> ¦ rakudo/main: 

[19:25] <Geth> ¦ rakudo/main: ```

[19:25] <linkable6> R#5464 [open]: https://github.com/rakudo/rakudo/issues/5464 [dispatching] Invocant of method 'match' must be a type object of type 'Any'

[19:25] <Geth> ¦ rakudo/main: <…commit message has 32 more lines…>

[19:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d6dc3610ea

[19:47] <Geth> ¦ rakudo/main: 51b0ef2561 | (Elizabeth Mattijsen)++ | 2 files

[19:47] <Geth> ¦ rakudo/main: Final tweaks in Any.match fixes

[19:47] <Geth> ¦ rakudo/main: 

[19:47] <Geth> ¦ rakudo/main: - The JVM backend isn't smart enough to make the an "empty" proto

[19:47] <Geth> ¦ rakudo/main:   disappear, so it needs an extre level of nqp::getlexcaller.

[19:47] <Geth> ¦ rakudo/main: - Int.match(foo) would still fail: fixed by making the Cool.match

[19:47] <Geth> ¦ rakudo/main:   method a multi

[19:47] <Geth> ¦ rakudo/main: 

[19:47] <Geth> ¦ rakudo/main: ab5tract++ for perseverance!

[19:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/51b0ef2561

[19:55] <ab5tract> lizmat: shouldn't Int.match still fail though?

[19:56] <lizmat> it warns, that should be enough?

[19:56] <lizmat> m: dd Int ~~ Cool

[19:56] <camelia> rakudo-moar 51b0ef256: OUTPUT: «Bool::True␤»

[19:57] *** nativecallable6_ joined
[19:58] *** reportable6 joined
[19:58] *** sourceable6_ joined
[19:58] *** notable6_ joined
[19:58] *** unicodable6_ joined
[19:58] *** coverable6_ joined
[19:58] *** linkable6_ joined
[19:58] *** bloatable6_ joined
[19:58] <ab5tract> locally without your commit I get: `Invocant of method 'match' must be an object instance of type 'Cool', t a type object of type 'Int'.  Did you forget a '.new'?`

[19:59] *** tellable6_ joined
[19:59] <ab5tract> that seems to match the expected behavior, no?\

[19:59] *** evalable6_ joined
[19:59] *** greppable6_ joined
[19:59] <lizmat> no, that was actually incorrect

[19:59] *** squashable6 joined
[19:59] *** releasable6_ joined
[19:59] <lizmat> type objects stringify to the empty string with a warning

[19:59] <ab5tract> ie, the `Any:U:` candidate that calls `self.Str`

[19:59] *** statisfiable6 joined
[19:59] <lizmat> m: say Int.Str

[19:59] *** bisectable6_ joined
[19:59] <camelia> rakudo-moar 51b0ef256: OUTPUT: «Use of uninitialized value of type Int in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤␤  in block <unit> at <tmp> line 1␤»

[20:00] *** shareable6_ joined
[20:00] <lizmat> m: my $a = Int.Str; dd $a

[20:00] <camelia> rakudo-moar 51b0ef256: OUTPUT: «Use of uninitialized value of type Int in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤Mu $a = ""␤»

[20:00] *** benchable6_ joined
[20:00] *** committable6_ joined
[20:00] *** quotable6_ joined
[20:00] <ab5tract> ah, gotcha

[20:01] <ab5tract> thanks for the fix :)

[20:01] <lizmat> hmmm on that thought....

[20:02] <lizmat> m: say "" ~~ /^ $/

[20:02] <camelia> rakudo-moar 51b0ef256: OUTPUT: «｢｣␤»

[20:02] <lizmat> so it looks like it should set the empty match if that is what was requested

[20:10] <lizmat> so we can actually simplify maters

[20:10] <lizmat> matters

[20:15] *** Altai-man left
[20:15] *** sena_kun joined
[20:18] <Geth> ¦ rakudo/main: 881c1e87a7 | (Elizabeth Mattijsen)++ | 2 files

[20:18] <Geth> ¦ rakudo/main: Simplify the Any.match issue

[20:18] <Geth> ¦ rakudo/main: 

[20:18] <Geth> ¦ rakudo/main: There shouldn't really be a difference between instantiated or

[20:18] <Geth> ¦ rakudo/main: uninstantiated Any matching.  Both should first stringify and then

[20:18] <Geth> ¦ rakudo/main: call .match on the result.  If a class doesn't handle strinngification

[20:18] <Geth> ¦ rakudo/main: of its type object, this will be handled by Any.Str, which will warn

[20:18] <Geth> ¦ rakudo/main: and produce the empty string (which *can* potentially match).

[20:18] <Geth> ¦ rakudo/main: 

[20:18] <Geth> ¦ rakudo/main: Because this is now done by Any.match, Cool.match doesn't need to

[20:18] <Geth> ¦ rakudo/main: exist anymore as it will fall back to Any.match.

[20:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/881c1e87a7

[20:26] *** committable6_ left
[20:29] *** committable6_ joined
[20:41] *** sena_kun left
[20:41] *** sena_kun joined
[21:02] *** sena_kun left
[21:33] *** sena_kun joined
[22:30] *** finanalyst left
[23:06] *** sena_kun left
