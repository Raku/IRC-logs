[02:45] <Geth> ¦ rakudo/string-repo-id: c1742f045b | (Nick Logan)++ | 2 files

[02:45] <Geth> ¦ rakudo/string-repo-id: Ensure path-spec is a Str

[02:45] <Geth> ¦ rakudo/string-repo-id: review: https://github.com/rakudo/rakudo/commit/c1742f045b

[02:49] <Geth> ¦ rakudo: ugexe++ created pull request #5621: Ensure path-spec is a Str

[02:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5621

[06:45] <Geth> ¦ rakudo/main: c1742f045b | (Nick Logan)++ | 2 files

[06:45] <Geth> ¦ rakudo/main: Ensure path-spec is a Str

[06:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c1742f045b

[06:45] <Geth> ¦ rakudo/main: 233fe99ebe | niner++ (committed using GitHub Web editor) | 2 files

[06:45] <Geth> ¦ rakudo/main: Merge pull request #5621 from rakudo/string-repo-id

[06:45] <Geth> ¦ rakudo/main: 

[06:45] <Geth> ¦ rakudo/main: Ensure path-spec is a Str

[06:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/233fe99ebe

[07:51] *** sena_kun joined
[08:02] *** sena_kun left
[09:33] <Geth> ¦ rakudo/main: ed1c48a53d | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[09:33] <Geth> ¦ rakudo/main: RakuAST: warn about precedence issues with range operator

[09:33] <Geth> ¦ rakudo/main: 

[09:33] <Geth> ¦ rakudo/main: Warns about |4.. 5 and ~4.. 5

[09:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ed1c48a53d

[09:33] <Geth> ¦ rakudo/main: dfd2ccdaa2 | (Stefan Seifert)++ | 3 files

[09:33] <Geth> ¦ rakudo/main: RakuAST: promote worries to sorries in scopes where fatal is active

[09:33] <Geth> ¦ rakudo/main: 

[09:33] <Geth> ¦ rakudo/main: Makes use fatal; { |4.. 5} throw at compile time

[09:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dfd2ccdaa2

[09:33] <Geth> ¦ rakudo/main: d87bd876ff | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[09:33] <Geth> ¦ rakudo/main: RakuAST: warn about precedence issues with reversed range operator

[09:33] <Geth> ¦ rakudo/main: 

[09:33] <Geth> ¦ rakudo/main: Warns about |4 R.. 5 and ~4 R.. 5

[09:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d87bd876ff

[10:34] <lizmat> 1102 for me

[10:35] <lizmat> I wonder whether the failing test for me could be related to the fact on Apple silicon we don't have any JIT

[10:35] <lizmat> so I wonder what your result would be with the JIT disabled

[10:39] <nine> But it passes even for you when run individually and it's still not JITing then

[10:44] <lizmat> hmmm true

[10:51] <ab5tract> I always nuke *.moar before running tests, not sure if that could have anything to do with it..

[10:52] <ab5tract> Maybe slowly expanding upwards in the test hierarchy to see if there’s some sort of freaky interdependence on a previous test?

[10:53] <ab5tract> Though I assume you run spectests concurrently, so dependent ordering shouldn’t really be a thing anyway

[10:54] <ab5tract> lizmat: I’ll give it a run on my Mac and see what happens

[10:54] <lizmat> is it an Intel or a Apple Silicon Mac ?

[10:54] <lizmat> *an

[10:56] <lizmat> ok, this is getting weird:

[10:56] <lizmat> t/spec/S26-documentation/07a-tables.rakudo.moar             (Wstat: 0 Tests: 77 Failed: 0)

[10:56] <lizmat>   TODO passed:   42

[10:57] <lizmat> however, if I run it manually it fails that TODOd test

[10:57] <lizmat> oops, my bad... it does pass

[10:58] <lizmat> so, it looks like there's quite a number of test files that pass TODOd tests (and all other tests) but are marked as failures

[11:02] <lizmat> at least 3: S26-documentation/07a-tables, S26-documentation/08-formattingcode.t S26-documentation/09-configuration.t

[11:03] <lizmat> oops, my bad (again): they are already ok

[11:04] <lizmat> they're just listed at the end...  which put me on a false trail

[11:04] * lizmat goes back to hacking on App::Rak and associated modules

[11:19] <Geth> ¦ rakudo/main: d9037aea5f | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[11:19] <Geth> ¦ rakudo/main: RakuAST: fix chaining of smartmatches

[11:19] <Geth> ¦ rakudo/main: 

[11:19] <Geth> ¦ rakudo/main: In many cases we can compile a smartmatch just like a normal infix. Even

[11:19] <Geth> ¦ rakudo/main: more, we have to do so to allow for chaining smart matches.

[11:19] <Geth> ¦ rakudo/main: 

[11:19] <Geth> ¦ rakudo/main: Fixes 0 ~~ 0 ~~ 0

[11:19] <Geth> ¦ rakudo/main: Fixes 0 ~~ 0 ~~ /0/

[11:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d9037aea5f

[11:19] <Geth> ¦ rakudo/main: cd1aae8989 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[11:19] <Geth> ¦ rakudo/main: RakuAST: fix chaining of negated meta operators

[11:19] <Geth> ¦ rakudo/main: 

[11:19] <Geth> ¦ rakudo/main: Sadly we have to remove the shortcut as it interferes with chaining.

[11:19] <Geth> ¦ rakudo/main: 

[11:19] <Geth> ¦ rakudo/main: Fixes 3 !> 3 !> 1

[11:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cd1aae8989

[11:19] <Geth> ¦ rakudo/main: f340f39edd | (Stefan Seifert)++ | src/Raku/ast/circumfix.rakumod

[11:19] <Geth> ¦ rakudo/main: RakuAST: have parentheses break up operator chains

[11:19] <Geth> ¦ rakudo/main: 

[11:19] <Geth> ¦ rakudo/main: Fixes ($x =:= $x) ~~ Bool

[11:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f340f39edd

[11:19] <nine> And that's 1106

[11:27] <lizmat> 1104 for me: t/spec/S02-names-vars/names.t flapped

[11:28] <lizmat> running again

[11:32] <lizmat> it unflapped

[11:33] <lizmat> so 1105 for me

[11:42] *** MasterDuke left
[11:52] <lizmat> Meh, can't synthetically create a whatevercode yet

[12:01] <nine> What do you mean?

[12:04] <lizmat> m: say Q|*.Str|.AST

[12:04] <camelia> rakudo-moar f340f39ed: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::ApplyPostfix.new(␤      operand => RakuAST::WhateverCode::Argument.new,␤      postfix => RakuAST::Call::Method.new(␤        name => RakuAST::Name.fr…»

[12:04] <lizmat> operand => RakuAST::WhateverCode::Argument.new

[12:04] <nine> That looks correct?

[12:05] <lizmat> it needs more info to when *not* generated from the grammar

[12:05] <lizmat> aka: the .raku representation is incomplete, but I don't know how to make that complete

[12:07] <nine> Oh, you mean something like assembling a curried expression completely manually?

[12:07] <lizmat> yes

[12:08] <nine> What's the point? Currying is just a syntactic shortcut. It exists because typing { $_.Str } is boring, so we can just write *.Str instead. If you're creating an AST, you'll have to type a lot anyway, so you may as well create that RakuAST::Block the curried expression represents

[12:10] <lizmat> well, that's what I'm doing now  :-)

[12:11] <lizmat> and actually, it's not a lot of typing, it is a lot of copy-pasting

[12:11] <lizmat> thanks to .AST

[12:22] <nine> Oh darn....seems like I'm gonna have to implement "Useless use" warnings now

[13:58] <nine> That goes about as badly as I expected :D

[14:16] <nine> But surprisingly the prep work actually already makes a test file pass.

[14:16] <nine> Prep work being propagating sink information into expressions

[14:17] <lizmat> oooh... didn't realize we weren't doing that already

[14:18] <nine> No, only statements so far as that's what we need to know whether to generate a p6sink op

[15:05] *** dawids joined
[15:15] <Geth> ¦ rakudo/main: bac1ee8f61 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[15:15] <Geth> ¦ rakudo/main: RakuAST: fix short-circuiting of ^^ and xor

[15:15] <Geth> ¦ rakudo/main: 

[15:15] <Geth> ¦ rakudo/main: Xor is different to other iffy infixes in that it can only short-circuit

[15:15] <Geth> ¦ rakudo/main: a possible third argument when chaining. Thus we must not compile

[15:15] <Geth> ¦ rakudo/main: chained xor as a set of nested calls to infix:<xor> and instead have to

[15:15] <Geth> ¦ rakudo/main: compile it to an xor op with all operands. Furthermore to get a Nil as

[15:15] <Geth> ¦ rakudo/main: falsey result, we need to add that as an additional argument.

[15:15] <Geth> ¦ rakudo/main: 

[15:15] <Geth> ¦ rakudo/main: Fixes 1 ^^ 2 ^^ say "no!"

[15:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bac1ee8f61

[15:15] <Geth> ¦ rakudo/main: c3c6e4585f | (Stefan Seifert)++ | 2 files

[15:15] <Geth> ¦ rakudo/main: RakuAST: propagate sink context into expressions

[15:15] <Geth> ¦ rakudo/main: 

[15:15] <Geth> ¦ rakudo/main: Will be used for "Useless use of ... in sink context" warnings.

[15:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c3c6e4585f

[15:15] <Geth> ¦ rakudo/main: 4cfc790075 | (Stefan Seifert)++ | src/Raku/ast/literals.rakumod

[15:15] <Geth> ¦ rakudo/main: RakuAST: warn about literals being used in sink context

[15:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4cfc790075

[15:31] <lizmat> 1107!

[16:26] *** sena_kun joined
[16:27] <nine> 11081109

[16:27] <Geth> ¦ rakudo/main: 10297c640e | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[16:27] <Geth> ¦ rakudo/main: RakuAST: fix exceptions thrown by the grammar missing additional info

[16:27] <Geth> ¦ rakudo/main: 

[16:27] <Geth> ¦ rakudo/main: While the <.foo: ...> syntax may be more eye pleasing, it's not actually

[16:27] <Geth> ¦ rakudo/main: possible to pass named arguments with this syntax. Instead those args

[16:27] <Geth> ¦ rakudo/main: are silently swallowed. Switch to {self.foo: ...} instead.

[16:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/10297c640e

[16:27] <Geth> ¦ rakudo/main: bc16b3c246 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[16:27] <Geth> ¦ rakudo/main: RakuAST: throw proper error when adverbing things that can't be adverbed

[16:27] <Geth> ¦ rakudo/main: 

[16:27] <Geth> ¦ rakudo/main: Fixes 3 :foo to throw the correct exception

[16:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bc16b3c246

[16:27] <Geth> ¦ rakudo/main: 191787bb4d | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[16:27] <Geth> ¦ rakudo/main: RakuAST: throw proper error when trying to meta the ternary operator

[16:27] <Geth> ¦ rakudo/main: 

[16:27] <Geth> ¦ rakudo/main: Fixes: 1 R?? 2 !! 3

[16:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/191787bb4d

[16:28] <nine> 1109

[17:24] <lizmat> confirmed minus 1  :-)

[17:28] <nine> Wow....got a test that reproducably segfaults

[17:29] <lizmat> nice!

[17:29] <jdv> love a segfault.  i got perl to kick one sans xs recently.  good times.

[17:30] <jdv> much easier with raku, unfortunately.

[17:33] <nine> A frame without a static frame

[17:40] <lizmat> .oO( I was not properly framed! )

[17:42] <jdv> shame

[17:53] <nine> Shortest segfault in quite a while: RAKUDO_RAKUAST=1 ./rakudo-m -e '() ~~ :()'

[17:55] <jdv> thats an impressive golf of a segfault

[17:56] *** dawids left
[17:56] <lizmat> confirmed

[17:56] <lizmat> on Apple Silicon

[17:59] <nine> Smartmatch (p6invokeunder to be precise) assumes hat a Signature always has a $!code object. Apparently the old compiler adds a stub there.

[18:00] <nine> I meant p6isbindable

[18:54] <Geth> ¦ rakudo/main: f6b628f346 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[18:54] <Geth> ¦ rakudo/main: RakuAST: fix segfault trying to smartmatch a signature

[18:54] <Geth> ¦ rakudo/main: 

[18:54] <Geth> ¦ rakudo/main: p6isbindable requires a Signature to have an associated code object

[18:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f6b628f346

[21:55] *** sena_kun left
[23:12] *** MasterDuke joined
