[00:02] <MasterDuke> timo: any reason not to merge the runc pr?

[00:05] <timo> it's proooobably OK to merge? maybe a spectest / stresstest with SPESH NODELAY and BLOCKING first though ...

[00:06] <timo> > 

[00:06] <timo>     Too young, only 3 of 5 days old

[00:06] <timo> only a matter of time

[00:11] <MasterDuke> what about the todo for when the number of elems is known-but-not-0?

[00:12] <timo> someone can do that at some point

[00:17] <MasterDuke> tons of failed spectests with `MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1` at head of main moarvm/nqp/rakudo

[00:17] <timo> welp, that's not great

[00:20] <MasterDuke> https://gist.github.com/MasterDuke17/f7931bedc567c7ee6548df159de837c7

[00:21] <MasterDuke> hm...wait...

[00:22] <MasterDuke> that might not be correct

[00:23] <MasterDuke> afk for a while, but will re-run that during

[00:23] <timo> today while napping i was dreaming of a much shinied up spec test runner

[00:25] <timo> i'm also wondering how much time we could save if we prefork an instance that has already run through at least a little cross-section of the parser, compiler, optimizer

[00:26] <timo> and of course it has to give better details than "non-zero exit status" when something goes south

[00:31] *** rypervenche left
[00:38] <[Coke]> timo: like the JVM runner?

[00:38] <[Coke]> but for moarvm?

[00:58] *** ab5tract left
[01:01] *** ab5tract joined
[01:52] <MasterDuke> huh. those results seem correct

[01:53] <MasterDuke> [dan@alexandria rakudo]$ ./rakudo-m -I lib t/spec/S05-modifier/exhaustive.t

[01:53] <MasterDuke> 1..104

[01:53] <MasterDuke> Iteration past end of grapheme iterator

[01:53] <MasterDuke>   in block <unit> at t/spec/S05-modifier/exhaustive.t line 29

[01:53] <MasterDuke> # You planned 104 tests, but ran 0

[01:53] <MasterDuke> does that fail when run completely unmodified for anybody else?

[01:56] <MasterDuke> m: my $str = "abrAcadAbbra"; say $str ~~ m:i:exhaustive/ a .+ a /

[01:56] <camelia> rakudo-moar 045644e0a: OUTPUT: «(｢abrAcadAbbra｣ ｢abrAcadA｣ ｢abrAca｣ ｢abrA｣ ｢AcadAbbra｣ ｢AcadA｣ ｢Aca｣ ｢adAbbra｣ ｢adA｣ ｢Abbra｣)␤»

[01:56] <MasterDuke> huh. locally i get `Iteration past end of grapheme iterator`

[01:57] <MasterDuke> i double checked i'm on main and rebuilt everything, but i must have some bad precomp file from when i was working on my remove-repetitions-from-MVMString branch

[02:00] <MasterDuke> hm. remove all .precomp directories and still same thing

[02:06] <MasterDuke> just rebuilt all three and still the same

[02:18] <MasterDuke> ugh. a clean checkout of rakudo built with `--gen-nqp --gen-moar` works fine. so some(where|how) rebuilding my normal setup isn't overwriting something

[02:58] <MasterDuke> only one fail in the clean checkout for `MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 make m-spectest`

[02:58] <MasterDuke> t/spec/S09-typed-arrays/native-shape1-num.rakudo.moar       (Wstat: 256 (exited 1) Tests: 333 Failed: 1)

[02:58] <MasterDuke>   Failed test:  237

[02:58] <MasterDuke>   Non-zero exit status: 1

[07:37] *** [Tux] left
[07:41] *** [Tux] joined
[10:33] <timo> under some circumstances, when a moar/nqp/rakudo is still running, it can prevent "make install" from overwriting the binary

[11:59] <lizmat> notable6__: weekly

[11:59] <notable6__> lizmat, 3 notes: https://gist.github.com/eee7548a8ae7dcde1d8b3122c40316e5

[12:14] <lizmat> notable6__: weekly reset

[12:14] <notable6__> lizmat, Moved existing notes to “weekly_2024-09-10T12:14:44Z”

[14:08] *** MasterDuke left
[15:55] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/09/10/2024-37-rainbow-highlighting/

[16:24] *** finanalyst joined
[16:26] <Geth> ¦ rakudo: lizmat self-assigned [rakuast-highlighter] Formating different uses of '{' https://github.com/rakudo/rakudo/issues/5640

[16:52] <timo> lizmat: "a CVE for minilua that potentially affected MoarVM" i would downgrade the severity of that statement by a few notches tbh

[16:53] <lizmat> how would you phrase it then

[17:00] <timo> "a CVE in minilua that is unlikely to affect MoarVM" maybe?

[17:01] <lizmat> so done

[17:23] <Geth> ¦ rakudo/main: 7ddaf755f8 | (Elizabeth Mattijsen)++ | lib/RakuAST/Deparse/Highlight.rakumod

[17:23] <Geth> ¦ rakudo/main: RakuAST: partial fix for postcircumfix:<{ }> highlighting

[17:23] <Geth> ¦ rakudo/main: 

[17:23] <Geth> ¦ rakudo/main: ::SemiList has its own deparsing logic. It is a subclass of ::StatementList.

[17:23] <Geth> ¦ rakudo/main: The Highlight module injects its own handling for ::StatementList,

[17:23] <Geth> ¦ rakudo/main: shadowing the handling of ::SemiList.

[17:23] <Geth> ¦ rakudo/main: 

[17:23] <Geth> ¦ rakudo/main: Fix by adding a Highlight candidate for ::SemiList, that just does what

[17:23] <Geth> ¦ rakudo/main: it is supposed to do.

[17:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7ddaf755f8

[21:44] *** tellable6 left
[21:44] *** tellable6 joined
