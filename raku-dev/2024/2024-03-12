[09:20] *** sena_kun joined
[11:34] <Geth> ¦ raku-File-Temp/master: 5 commits pushed by (Tom Browder)++

[11:34] <Geth> ¦ raku-File-Temp/master: 4b6dcdb152 | test for release

[11:34] <Geth> ¦ raku-File-Temp/master: 0de14f4a02 | Update Changes file

[11:34] <Geth> ¦ raku-File-Temp/master: 1090bf95f4 | Correct Meta info for the final repo location

[11:34] <Geth> ¦ raku-File-Temp/master: 00acbc8b1a | Correction, I did not convert to App::Mi6 use, @2coulours did

[11:34] <Geth> ¦ raku-File-Temp/master: 3cfcfc8f4c | Merge pull request #5 from tbrowder/new-ver

[11:34] <Geth> ¦ raku-File-Temp/master: review: https://github.com/raku-community-modules/raku-File-Temp/compare/6eef25a2059c...3cfcfc8f4c37

[12:25] <Geth> ¦ File-Temp/main: ea1f2f57d2 | (Elizabeth Mattijsen)++ | 4 files

[12:25] <Geth> ¦ File-Temp/main: Final check for zef:community-modules release

[12:25] <Geth> ¦ File-Temp/main: review: https://github.com/raku-community-modules/File-Temp/commit/ea1f2f57d2

[12:27] <Geth> ¦ File-Temp/main: 3ffce36b98 | (Elizabeth Mattijsen)++ | 2 files

[12:27] <Geth> ¦ File-Temp/main: Oops, fix META6.json

[12:27] <Geth> ¦ File-Temp/main: review: https://github.com/raku-community-modules/File-Temp/commit/3ffce36b98

[12:30] <Geth> ¦ File-Temp/main: 73522bdef5 | (Elizabeth Mattijsen)++ | 8 files

[12:30] <Geth> ¦ File-Temp/main: Modernize test-file extensions

[12:30] <Geth> ¦ File-Temp/main: review: https://github.com/raku-community-modules/File-Temp/commit/73522bdef5

[12:33] <Geth> ¦ File-Temp/main: d16758f71a | (Elizabeth Mattijsen)++ | 3 files

[12:33] <Geth> ¦ File-Temp/main: 0.0.11

[12:33] <Geth> ¦ File-Temp/main: review: https://github.com/raku-community-modules/File-Temp/commit/d16758f71a

[12:55] <Geth> ¦ rakudo/main: 2ce4b655c5 | (Elizabeth Mattijsen)++ | 7 files

[12:55] <Geth> ¦ rakudo/main: Revert "Create the ProtoInfo class"

[12:55] <Geth> ¦ rakudo/main: 

[12:55] <Geth> ¦ rakudo/main: It's going take much longer to fix core setting breakage than

[12:55] <Geth> ¦ rakudo/main: expected, so remove this for now and put it in a branch later on.

[12:55] <Geth> ¦ rakudo/main: This means that for now, Routine objects remainn way more bulky

[12:55] <Geth> ¦ rakudo/main: memory-wise than they could be.

[12:55] <Geth> ¦ rakudo/main: 

[12:55] <Geth> ¦ rakudo/main: This reverts commit 4751e6fee63cb4a2844d95daca62586577e041be.

[12:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2ce4b655c5

[12:56] <Geth> ¦ rakudo/liz-ProtoInfo: f52dc71db6 | (Elizabeth Mattijsen)++ | 7 files

[12:56] <Geth> ¦ rakudo/liz-ProtoInfo: Create the ProtoInfo class

[12:56] <Geth> ¦ rakudo/liz-ProtoInfo: 

[12:56] <Geth> ¦ rakudo/liz-ProtoInfo: This class will contain the proto / dispatcher logic that is now

[12:56] <Geth> ¦ rakudo/liz-ProtoInfo: part of the Routine object.  In the near future, the Routine

[12:56] <Geth> ¦ rakudo/liz-ProtoInfo: $!dispatcher attribute will contain 3 possible values:

[12:56] <Geth> ¦ rakudo/liz-ProtoInfo: - NQPMu to indicate the Routine is an "only"

[12:56] <Geth> ¦ rakudo/liz-ProtoInfo: - a Callable of the dispatcher to indicate it is a "multi"

[12:56] <Geth> ¦ rakudo/liz-ProtoInfo: <…commit message has 5 more lines…>

[12:56] <Geth> ¦ rakudo/liz-ProtoInfo: review: https://github.com/rakudo/rakudo/commit/f52dc71db6

[12:59] <Geth> ¦ rakudo/liz-ProtoInfo: acb48f0920 | (Elizabeth Mattijsen)++ | 7 files

[12:59] <Geth> ¦ rakudo/liz-ProtoInfo: Work in progress on integration of ProtoInfo class

[12:59] <Geth> ¦ rakudo/liz-ProtoInfo: 

[12:59] <Geth> ¦ rakudo/liz-ProtoInfo: The problem is that at the first use of "is rw" on a Routine in

[12:59] <Geth> ¦ rakudo/liz-ProtoInfo: the setting, the dispatch fails.  However, at that early in the

[12:59] <Geth> ¦ rakudo/liz-ProtoInfo: setting, basically nothing works yet, so debugging becomes *very*

[12:59] <Geth> ¦ rakudo/liz-ProtoInfo: hard.  After spending 2 days on this, I decided to leave this

[12:59] <Geth> ¦ rakudo/liz-ProtoInfo: work in a branch for the time being, until more clarity is

[12:59] <Geth> ¦ rakudo/liz-ProtoInfo: obtained.

[12:59] <Geth> ¦ rakudo/liz-ProtoInfo: review: https://github.com/rakudo/rakudo/commit/acb48f0920

[13:59] *** kjp left
[14:13] *** kjp joined
[18:55] <vrurg> There is an idea that circulates in my mind for some time now. Rakudo pays big performance penalty by allocating a Scalar for each non-bound variable. Yet, many of them a purely read-only and don't require a container. Is it possible to implement COW-like semantics by vivifying a Scalar on demand?

[21:34] <japhb> vrurg: What do you propose for the method of detecting a write?  (I can think of a couple, but it's not clear to me what the relative performance gain or hit would be.)

[22:36] <vrurg> japhb: Best if supported by VM with some help from dispatchers, perhaps. But that's as much I can think up for now. I'm sure there will be gain because when there is something like `for ^1000000 { my $cached_value = $obj.get_something($_); ... }` and the $cached_value is RO only then allocating 1000000 scalars with following GC run over them is most definitely a cost we pay for nothing.

[22:38] <vrurg> As far as I understand, it's a subset of tasks Jonathan's work on PEA was intended to resolve.

[23:52] *** sena_kun left
