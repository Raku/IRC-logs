[04:28] <timo1> is anyone else surprised by the size of svgs for the typegraph in the docs being above a gigabyte apparently?

[04:31] <timo1> oh huh, this "announcements" feature on docs.raku.org is interesting, but are we showing that to every first-time user on their first visit? how about people who generally have cookies turned off or whatever we use to only cause the popup to happen once?

[05:31] <japhb> timo1: I'd be quite surprised by SVGs that were more than a *mega*byte.

[05:33] <japhb> SVGs should be really small unless they have inline-encoded bitmaps in them, but there's no reason for that to occur in something that is basically just generated from a GraphViz DOT file (or at least, that was the case when I first created them; I know there have been refactorings since then)

[05:56] *** sena_kun left
[05:56] *** sena_kun joined
[06:01] <timo1> japhb: > The difference between a fresh install and a rebuild is that the directory Website/plugins/typegraph/typegraphs/ is empty on a fresh install and contains 3GB in 423 .svg files thereafter.

[06:02] <timo1> m: say 3 * 1024 / 423, " megabytes per svg file average"

[06:02] <camelia> rakudo-moar 1a61ed025: OUTPUT: «7.262411 megabytes per svg file average␤»

[06:03] <timo1> more probably there's like, one svg file that has every type ever in it, including about two hundred exception classes? or i guess every exception class svg typegraph has every other exception in it??

[07:42] *** sena_kun left
[07:45] *** sena_kun joined
[07:50] *** finanalyst joined
[08:11] *** lizmat_ joined
[08:12] *** Geth left
[08:12] *** [Tux] left
[08:14] *** lizmat left
[08:16] *** lizmat_ left
[08:16] *** lizmat joined
[08:24] *** [Tux] joined
[08:33] <lizmat> bisectable6: =fortnite

[08:33] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[08:33] <bisectable6> lizmat, Output on all releases: https://gist.github.com/e6c99f7a8a388f65b4e92d1bde5a888f

[08:33] <bisectable6> lizmat, Bisecting by output (old=2017.11 new=2017.12) because on both starting points the exit code is 1

[08:33] <bisectable6> lizmat, bisect log: https://gist.github.com/36e47ee780b3aea4f4b08e83c8dd03e2

[08:33] <bisectable6> lizmat, (2017-12-13) https://github.com/rakudo/rakudo/commit/2c951798a2162cede2f8d25aa6318f9482ca398b

[08:33] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/cad68212ec671811abe0c424132f1e6e

[08:36] *** nine left
[08:36] *** nine joined
[09:00] *** Geth joined
[09:01] <Geth> ¦ roast: a557dc07b3 | (Elizabeth Mattijsen)++ | S17-promise/nonblocking-await.t

[09:01] <Geth> ¦ roast: Make sure non-blocking tests don't block forever

[09:01] <Geth> ¦ roast: 

[09:01] <Geth> ¦ roast: Every once in a while this test file hangs "make spectest".  Make

[09:01] <Geth> ¦ roast: sure that *if* it fails, it fails in a more friendly way

[09:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a557dc07b3

[09:02] <Geth> ¦ rakudo/main: 587cd72f62 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[09:02] <Geth> ¦ rakudo/main: RakuAST: handle F<foo|bar> the same as L<foo|bar>

[09:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/587cd72f62

[09:09] *** sena_kun left
[09:40] <nine> lizmat: 20s sounds rather tight. That test file takes some 3s on my really fast desktop. Cloud based CI can be much, much slower and also suffer from stutters in execution. If we introduce such last-resort arbitrary timeouts, please lets make them _large_. At least several minutes.

[09:42] <Geth> ¦ roast: 4cb2348142 | (Elizabeth Mattijsen)++ | S17-promise/nonblocking-await.t

[09:42] <Geth> ¦ roast: Increase timeout to 2 minutes

[09:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/4cb2348142

[09:56] *** [Tux] left
[10:08] *** [Tux] joined
[11:35] <patrickb> nine: I'm curious, any news wrt your grant?

[11:38] <nine> patrickb: nope. Getting ghosted by the grants committee.

[11:40] <nine> That's the reason why I have stopped working on RakuAST. Can't justify the hours when it doesn't generate income. Better invest them into the startup I'm involved with.

[11:52] <patrickb> Meh. Hope they move forward at some point.

[11:59] <[Coke]> I apologize retroactively for all the times I ghosted someone when I was in that position.

[12:01] <nine> Well "ghosted" is a bit tongue in cheek. It's all volunteers with real lifes and all. I will hear from them eventually.

[12:11] <lizmat> bisectable6: say (^20).map: { LAST say "last"; last if $_ == 10; $_ }

[12:11] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[12:11] <lizmat> m: say (^20).map: { LAST say "last"; last if $_ == 10; $_ }

[12:11] <camelia> rakudo-moar 587cd72f6: OUTPUT: «(0 1 2 3 4 5 6 7 8 9)␤»

[12:12] <lizmat> why doesn't it say "last" ?

[12:12] <bisectable6> lizmat, Output on all releases: https://gist.github.com/071e65d12b0b6ccaeb3b8484957fbb30

[12:12] <bisectable6> lizmat, Bisecting by output (old=2021.06 new=2021.07) because on both starting points the exit code is 0

[12:12] <bisectable6> lizmat, bisect log: https://gist.github.com/d2f11c525098c7deeaedc7c0acd4e157

[12:12] <bisectable6> lizmat, (2021-07-14) https://github.com/rakudo/rakudo/commit/bfa6b295c4440ce7bff1587ec774ed6874ade571

[12:12] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/ed60b9ac97dad07d2030c3657efc6aaa

[12:13] <lizmat> aha!

[12:13] <lizmat> seems this got borked 3 years ago  :-(

[12:13] <nine> Depends on whether you interpret a "last" call as "abort loop processing so we never get to process the last iteration" or as "declare this to be the last iteration of this loop"

[12:15] <lizmat> m: (^20).map: { LAST say "last"; last if $_ == 10; $_ }

[12:15] <camelia> rakudo-moar 587cd72f6: OUTPUT: «last␤»

[12:16] <lizmat> the semantics of the LAST phaser are clear: it *should* have said "last"

[12:16] <lizmat> in both case, and it used to until that change

[12:17] <lizmat> sadly, that commit cannot be reverted :-(

[12:18] <lizmat> well, automatically I guess

[12:21] <lizmat> looks like the issue is in the pull-one

[12:55] <Geth> ¦ rakudo/main: 16ce594e44 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[12:55] <Geth> ¦ rakudo/main: Make sure the LAST phaser is fired in .map

[12:55] <Geth> ¦ rakudo/main: 

[12:55] <Geth> ¦ rakudo/main: when a `last` is done with a mapper that is being run through

[12:55] <Geth> ¦ rakudo/main: .pull-one, rather than through .push-all or .sink-all.

[12:55] <Geth> ¦ rakudo/main: 

[12:55] <Geth> ¦ rakudo/main: Fixes #5590

[12:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/16ce594e44

[13:01] <Geth> ¦ roast: 1346ec74cc | (Elizabeth Mattijsen)++ | S32-list/map.t

[13:01] <Geth> ¦ roast: Add test for #5590

[13:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/1346ec74cc

[18:10] <jdv> what is the value judgement here.  what's the percentage of rakudo users affected?

[18:11] <jdv> I only budget "1 release a month"'s worth of time so it has to be an emergency to do another.

[18:13] <jdv> or get someone else to do it - i don't care:)

[18:18] <lizmat> patrickb can explain better

[18:19] <lizmat> I think we can actually live with having patrickb make Window binaries off of the 2024.05.1 branch

[18:19] <nine> If the fix is only needed on Windows, maybe we can just include it in the Windows packages? I have occasionally included backported fixes in the openSUSE packages

[18:20] <jdv> that seems easier on everyone.  i might be biased.

[18:20] <nine> You're entitled to a bit of bias there :)

[18:33] <[Coke]> works for me.

[18:34] <jdv> sounds fun enough.  thanks!

[18:43] *** sena_kun joined
[18:49] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/06/03/2024-23-sparkling/

[18:49] <patrickb> So I'll do the binaries 2024.05 for everything != win

[18:49] <patrickb> and only win 2024.05.1

[18:52] <patrickb> I think I can do so in a few hours. Thanks everyone!

[18:52] <lizmat> ++patrickb 

[18:54] <patrickb> weekly correction: binary packages have not yet become available

[18:54] <lizmat> updated

[19:05] *** finanalyst left
[20:47] *** AlexDaniel joined
[20:48] <AlexDaniel> Hey! kiwiirc is not working (it has been broken for quite some time now), so the links to IRC are not helpful. You can replace it with web.libera.chat link I suppose

[20:48] <AlexDaniel> And then, this is how I see the docs: https://i.imgur.com/ht8JqMH.png

[21:07] <coleman> AlexDaniel: I have opened https://github.com/Raku/doc-website/issues/396 if you could add your browser info that would help

[21:08] <coleman> docs team hangs here and in #raku-doc

[21:11] <AlexDaniel> there's no need for browser info, you can reproduce it by just resizing your browser window

[21:12] <AlexDaniel> I left a comment

[21:25] <jdv> not for me

[21:25] <jdv> ff 126 here

[21:40] <AlexDaniel> jdv: have you opened the sidebar? Show a screenshot of the page with the same size and 100% zoom.

[21:44] <jdv> oh, i thought you meant the sidebar was open on its own

[21:45] <jdv> yeah, same here - seems the sidebar assumes a desktop browser has a very wide viewport

[21:46] <jdv> maybe they focused on mobile and "wide" desktops.  idk.

[21:46] <jdv> i'm not a huge fan of the new sidebar thing myself as i've mentioned before so i avoid using it:(

[21:53] <patrickb> The binaries are done. \o/

[21:59] <AlexDaniel> I assume all bots are working fine? I don't check regularly anymore :)

[22:00] <AlexDaniel> if they ever don't, please file a ticket here: https://github.com/Raku/whateverable/issues/new

[22:23] *** AlexDaniel left
[22:33] <Geth> ¦ rakudo/main: ad0afb047e | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[22:33] <Geth> ¦ rakudo/main: Don't set the FIRST flag always

[22:33] <Geth> ¦ rakudo/main: 

[22:33] <Geth> ¦ rakudo/main: But only if there are actually FIRST phasers involved.

[22:33] <Geth> ¦ rakudo/main: 

[22:33] <Geth> ¦ rakudo/main: This buglet was introduced in 5ecc8308fc , but did not have any

[22:33] <Geth> ¦ rakudo/main: adverse effects apart from a little overhead for those cases of

[22:33] <Geth> ¦ rakudo/main: .map where the block had *any* phaser in its body.

[22:33] <Geth> ¦ rakudo/main: 

[22:33] <Geth> ¦ rakudo/main: Found while developing ParaSeq.map, that wants only to execute any

[22:33] <Geth> ¦ rakudo/main: FIRST phaser while processing the first batch

[22:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ad0afb047e

[23:04] *** sena_kun left
[23:07] <[Coke]> AlexDaniel++

