[01:02] *** librasteve_ left
[02:36] *** MasterDuke joined
[02:36] <MasterDuke> .

[02:36] <tellable6> 2024-02-13T10:52:35Z #raku-dev <lizmat> MasterDuke: that's probably my work on NQP streamlining NQPClassHOW  :-(

[02:36] <tellable6> 2024-02-13T10:53:16Z #raku-dev <lizmat> MasterDuke: sadly, the problem didn't expose itself in NQP itself  :-(

[02:36] <tellable6> 2024-02-13T10:53:32Z #raku-dev <lizmat> MasterDuke: am working on it

[02:36] <tellable6> 2024-02-13T12:14:52Z #raku-dev <lizmat> MasterDuke: fwiw, 6445646954776 appears to be an objectid    this is used as a key in the typecache, and thus needs stringification

[02:36] <tellable6> 2024-02-13T12:43:20Z #raku-dev <lizmat> MasterDuke: looks like the issue in rakudo is caused by some circularity in setting up the type cache: a class having roles having classes that have the same roles or some such

[02:36] <tellable6> 2024-02-13T13:25:33Z #raku-dev <lizmat> MasterDuke: all should be well again now

[02:36] <MasterDuke> lizmat++

[03:01] <MasterDuke> hm. on two different system strstr is quite a bit faster than memmem (searching for a non-matching string in all the words of /usr/share/dict 1k times takes ~1.6s for strstr and ~2.3s for memmem). MoarVM uses memmem in some of the cases in MVM_string_index

[03:03] <MasterDuke> however, i'm not sure how easily we could switch to strstr, since it expects c-style strings (i.e., null-terminated), and MVMStrings are not null-terminated

[03:04] <MasterDuke> also, i don't know how much MVM_string_index is called. But maybe it's a bunch when parsing and speeding it up would be useful?

[03:16] *** MasterDuke left
[06:11] *** vrurg_ joined
[06:13] *** vrurg left
[08:22] *** epony left
[08:35] *** sena_kun joined
[09:47] *** finanalyst joined
[10:45] *** epony joined
[11:05] *** finanalyst left
[13:28] *** ilogger2 left
[13:42] *** ilogger2 joined
[14:22] *** vrurg_ is now known as vrurg

[14:24] *** epony left
[14:25] *** epony joined
[15:32] <Geth> ¦ nqp/main: cc1f4f9253 | (Elizabeth Mattijsen)++ | src/how/NQPClassHOW.nqp

[15:32] <Geth> ¦ nqp/main: Streamline NQPClassHOW some more

[15:32] <Geth> ¦ nqp/main: 

[15:32] <Geth> ¦ nqp/main: - add a $!lock attribute and a dummy protect method for now

[15:32] <Geth> ¦ nqp/main: - put all attribute updates into a protected block

[15:32] <Geth> ¦ nqp/main: 

[15:32] <Geth> ¦ nqp/main: This does not provide any actual protection against race conditions

[15:32] <Geth> ¦ nqp/main: yet, but clearly marks where they can occur.  Creating an NQPLockHOW

[15:32] <Geth> ¦ nqp/main: will be needed to get actual protection.

[15:32] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/cc1f4f9253

[16:12] *** epony left
[16:13] *** epony joined
[17:29] *** epony left
[18:13] *** epony joined
[18:46] <Geth> ¦ nqp/main: 6355d2914a | (Elizabeth Mattijsen)++ | src/how/RoleToRoleApplier.nqp

[18:46] <Geth> ¦ nqp/main: Streamline RoleToRoleApplier logic

[18:46] <Geth> ¦ nqp/main: 

[18:46] <Geth> ¦ nqp/main: - no more for loops

[18:46] <Geth> ¦ nqp/main: - replace postcircumfixes by nqp::atpos/key

[18:46] <Geth> ¦ nqp/main: - abstract some logic in subs

[18:46] <Geth> ¦ nqp/main: - remove dead code

[18:46] <Geth> ¦ nqp/main: - add more comments

[18:46] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/6355d2914a

[19:08] *** epony left
[20:01] *** finanalyst joined
[23:10] *** epony joined
[23:25] *** sena_kun left
[23:27] *** epony left
[23:36] *** finanalyst left
