[06:51] *** camelia left
[06:52] *** nine left
[06:59] *** camelia joined
[07:03] *** nine joined
[07:38] *** sena_kun joined
[07:45] *** sena_kun left
[07:51] *** sena_kun joined
[07:55] *** sena_kun left
[08:24] *** finanalyst joined
[09:03] *** finanalyst left
[09:36] *** finanalyst joined
[09:47] <Geth> ¦ rakudo/r2000: 7a682d7f9b | ab5tract++ | 2 files

[09:47] <Geth> ¦ rakudo/r2000: Allow reduce to return containers as generated

[09:47] <Geth> ¦ rakudo/r2000: 

[09:47] <Geth> ¦ rakudo/r2000: As pointed out in R#2000 (#2000), using `reduce` on a list

[09:47] <Geth> ¦ rakudo/r2000: that includes a container was losing all knowledge of this

[09:47] <Geth> ¦ rakudo/r2000: container.

[09:47] <Geth> ¦ rakudo/r2000: 

[09:47] <Geth> ¦ rakudo/r2000: The following would previously fail:

[09:47] <linkable6> R#2000 [open]: https://github.com/rakudo/rakudo/issues/2000 [data types][metaop] `reduce` needlessly deconts

[09:47] <Geth> ¦ rakudo/r2000: <…commit message has 19 more lines…>

[09:47] <Geth> ¦ rakudo/r2000: review: https://github.com/rakudo/rakudo/commit/7a682d7f9b

[09:47] <Geth> ¦ rakudo: ab5tract++ created pull request #5578: Allow reduce to return containers as generated

[09:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5578

[09:57] <lizmat> .oO( the most line-noisy reduce I've seen in a long time: .reduce(&[(|)]) )

[09:58] <lizmat> alternately, less linenoisy:   .reduce(&[∪])

[10:25] <ab5tract> :)

[12:49] <ab5tract> a bit surprised that we don't provide secondary candidates for the "flaggy" methods in Parameter

[12:50] <ab5tract> ie, `$param.invocant(True)`

[12:51] *** sena_kun joined
[13:02] <ab5tract> or even more simply an `:$invocant` argument to BUILD .. maybe this is just an oversight?

[13:32] <Geth> ¦ rakudo/add-invocant: 63d7d61510 | ab5tract++ | src/core.c/Parameter.rakumod

[13:32] <Geth> ¦ rakudo/add-invocant: Add :invocant option to Parameter.new

[13:32] <Geth> ¦ rakudo/add-invocant: review: https://github.com/rakudo/rakudo/commit/63d7d61510

[13:36] <Geth> ¦ rakudo: ab5tract++ created pull request #5579: Add :invocant option to Parameter.new

[13:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5579

[13:36] <Geth> ¦ rakudo/add-invocant: f1a5e878f5 | ab5tract++ | src/core.c/Parameter.rakumod

[13:36] <Geth> ¦ rakudo/add-invocant: Add :invocant option to Parameter.new

[13:36] <Geth> ¦ rakudo/add-invocant: 

[13:36] <Geth> ¦ rakudo/add-invocant: Previously a user would be required to `use nqp` in order to get

[13:36] <Geth> ¦ rakudo/add-invocant: access to the `nqp::const::SIG_ELEM_INVOCANT` constant and manually

[13:36] <Geth> ¦ rakudo/add-invocant: twiddle that flags being provided to the `Parameter` constructor.

[13:36] <Geth> ¦ rakudo/add-invocant: review: https://github.com/rakudo/rakudo/commit/f1a5e878f5

[13:52] *** finanalyst left
[14:02] <Geth> ¦ nqp-configure/main: d1437267ba | ab5tract++ | lib/NQP/Config.pm

[14:02] <Geth> ¦ nqp-configure/main: Don't blow up when no reason is provided for 'not ok'

[14:02] <Geth> ¦ nqp-configure/main: review: https://github.com/Raku/nqp-configure/commit/d1437267ba

[14:59] <Geth> ¦ rakudo/main: cbc4f08500 | ab5tract++ | 3rdparty/nqp-configure

[14:59] <Geth> ¦ rakudo/main: Bump nqp-configure

[14:59] <Geth> ¦ rakudo/main: 

[14:59] <Geth> ¦ rakudo/main: Small fix recently added to stop it from trying to

[14:59] <Geth> ¦ rakudo/main: interpolate a sometimes-undefined variable if that variable

[14:59] <Geth> ¦ rakudo/main: happens to be undefined.

[14:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cbc4f08500

[14:59] <Geth> ¦ rakudo/main: 39705b0045 | ab5tract++ | 2 files

[14:59] <Geth> ¦ rakudo/main: Re-name "fixed in RakuAST" test file

[14:59] <Geth> ¦ rakudo/main: 

[14:59] <Geth> ¦ rakudo/main: Now it is clearly separated from the other tests when

[14:59] <Geth> ¦ rakudo/main: sorted alphabetically, which is appropriate since the

[14:59] <Geth> ¦ rakudo/main: tests are quite varied and are testing behaviors _changed_

[14:59] <Geth> ¦ rakudo/main: by RakuAST, rather than RakuAST behavior itself.

[14:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/39705b0045

[14:59] <Geth> ¦ rakudo/main: a1f98bf155 | ab5tract++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[14:59] <Geth> ¦ rakudo/main: Add test for uint parameter wrapping

[14:59] <Geth> ¦ rakudo/main: 

[14:59] <Geth> ¦ rakudo/main: In the base compiler:

[14:59] <Geth> ¦ rakudo/main: 

[14:59] <Geth> ¦ rakudo/main: ```

[14:59] <Geth> ¦ rakudo/main:     sub a(uint $a) { dd $a }

[14:59] <Geth> ¦ rakudo/main:     a -1

[14:59] <Geth> ¦ rakudo/main:     # -1

[14:59] <Geth> ¦ rakudo/main: ```

[14:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a1f98bf155

[15:00] <ab5tract> putting Geth to work today :)

[15:50] <ab5tract> is R#4863 something that can (or should) be reasonably fixed in RakuAST?

[15:50] <linkable6> R#4863 [open]: https://github.com/rakudo/rakudo/issues/4863 `$a .= uc.lc` is inconsistent

[15:54] <ab5tract> or is better addressed with a compile-time worry a la #4863?

[15:55] <ab5tract> erm, a la R#3621

[15:55] <linkable6> R#3621 [open]: https://github.com/rakudo/rakudo/issues/3621 [LTA] Emit compile-time warning for $x .= m.n

[16:24] <ab5tract> evalable6: https://gist.githubusercontent.com/ab5tract/c1dcc3752ff2f45e38f040d28384e587/raw/0fc47face64f6052959b4a8ef242248ff0ff7881/r1920.raku

[16:24] <evalable6> ab5tract, Successfully fetched the code from the provided URL

[16:24] <evalable6> ab5tract, rakudo-moar a1f98bf15: OUTPUT: «(signal SIGSEGV) »

[16:24] <ab5tract> damn :(

[16:24] <ab5tract> passes like a charm locally

[16:25] <ab5tract> which will make it difficult to debug... hmmm.. (R#1920)

[16:25] <linkable6> R#1920 [open]: https://github.com/rakudo/rakudo/issues/1920 [SEGV] Module loading is not thread safe

[16:53] <Geth> ¦ rakudo/main: 13f5a74416 | ab5tract++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[16:53] <Geth> ¦ rakudo/main: Add tests for "Useless use of &... in sink context"

[16:53] <Geth> ¦ rakudo/main: 

[16:53] <Geth> ¦ rakudo/main: Or rather, the current lack-thereof of in RakuAST.

[16:53] <Geth> ¦ rakudo/main: 

[16:53] <Geth> ¦ rakudo/main: This may very well be because we haven't added the useless use

[16:53] <Geth> ¦ rakudo/main: worries into RakuAST at this moment, but this will make it less

[16:53] <Geth> ¦ rakudo/main: likely that we will overlook fixing this when we get to that point.

[16:53] <Geth> ¦ rakudo/main: 

[16:53] <Geth> ¦ rakudo/main: R#4424 (#4424)

[16:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/13f5a74416

[16:53] <linkable6> R#4424 [open]: https://github.com/rakudo/rakudo/issues/4424 [Fixed in RakuAST] Bogus 'useless use of...in sink context'

[17:40] <Geth> ¦ rakudo/main: b08810e418 | ab5tract++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[17:40] <Geth> ¦ rakudo/main: Fix the new tests

[17:40] <Geth> ¦ rakudo/main: 

[17:40] <Geth> ¦ rakudo/main: Someone forgot a few newlines...

[17:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b08810e418

[17:47] *** japhb left
[17:49] *** finanalyst joined
[18:24] *** japhb joined
[18:29] *** Altai-man joined
[18:32] *** sena_kun left
[18:51] *** finanalyst left
[19:00] <releasable6__> Next release in ≈4 days and ≈23 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:29] *** Altai-man left
[19:30] *** Altai-man joined
[19:33] *** sena_kun joined
[19:34] *** Altai-man left
[20:32] <Geth> ¦ rakudo/r1590: cc80e8535d | ab5tract++ | 3 files

[20:32] <Geth> ¦ rakudo/r1590: Provide deeper context into `run` failures

[20:32] <Geth> ¦ rakudo/r1590: 

[20:32] <Geth> ¦ rakudo/r1590: After 92bd7e4, we stopped returning an exit code of `-1` for

[20:32] <Geth> ¦ rakudo/r1590: cases when attempting to `run` a nonexistent command.

[20:32] <Geth> ¦ rakudo/r1590: 

[20:32] <Geth> ¦ rakudo/r1590: This patch returns the previous behavior while also surfacing

[20:32] <Geth> ¦ rakudo/r1590: the underlying error from `libuv`, which makes it much more

[20:32] <Geth> ¦ rakudo/r1590: <…commit message has 10 more lines…>

[20:32] <Geth> ¦ rakudo/r1590: review: https://github.com/rakudo/rakudo/commit/cc80e8535d

[20:33] <Geth> ¦ rakudo: ab5tract++ created pull request #5580: Provide deeper context into `run` failures

[20:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5580

[20:49] <Geth> ¦ roast: 288cd5b89a | ab5tract++ | S12-coercion/coercion-types.t

[20:49] <Geth> ¦ roast: Test for no leaking BOOTStr with Str(Any)

[20:49] <Geth> ¦ roast: 

[20:49] <Geth> ¦ roast: This resolves R#1800 by testing whether a BOOTStr leaks

[20:49] <Geth> ¦ roast: when using a Str(Any) coercion in combination with a

[20:49] <Geth> ¦ roast: lookup hash.

[20:49] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/288cd5b89a

[20:49] <linkable6> R#1800 [open]: https://github.com/rakudo/rakudo/issues/1800 [tests needed] leaking BOOTStr

[21:09] *** sena_kun left
