[01:21] *** explorer left
[04:30] *** kjp left
[04:35] *** kjp joined
[10:24] <Geth> ¦ L10N/main: 0a7cc9687b | (Elizabeth Mattijsen)++ | TEMPLATE

[10:24] <Geth> ¦ L10N/main: Add translation template

[10:24] <Geth> ¦ L10N/main: 

[10:24] <Geth> ¦ L10N/main: So that localizations can use this as a starting point, rather than

[10:24] <Geth> ¦ L10N/main: the EN/EN one.  This template has all translations commented out so

[10:24] <Geth> ¦ L10N/main: that you can easily see the elements that have been translated already.

[10:24] <Geth> ¦ L10N/main: review: https://github.com/Raku/L10N/commit/0a7cc9687b

[10:30] *** sena_kun joined
[10:51] *** lizmat_ joined
[10:52] *** lizmat_ left
[10:53] *** lizmat_ joined
[10:54] *** lizmat left
[11:24] *** lizmat_ left
[11:25] *** lizmat joined
[12:48] <[Tux]> Rakudo v2023.12-41-gbafa5ad46 (v6.d) on MoarVM 2023.12-14-gc3fea4f58

[12:48] <[Tux]> csv-test-xs-20      0.141 -  0.141

[12:48] <[Tux]> csv-ip5xs           0.266 -  0.274

[12:48] <[Tux]> test-t --race       0.283 -  0.292

[12:48] <[Tux]> test-t              0.420 -  0.438

[12:48] <[Tux]> csv-ip5xs-20        1.152 -  1.161

[12:48] <[Tux]> test-t-20 --race    1.215 -  1.247

[12:48] <[Tux]> csv-parser          1.568 -  1.598

[12:48] <[Tux]> test                1.964 -  1.986

[12:48] <[Tux]> test-t-20           5.097 -  5.226

[13:02] *** melezhik joined
[13:05] *** melezhik left
[13:06] *** melezhik joined
[13:07] *** melezhik left
[13:14] <Geth> ¦ rakudo/lizmat-extension: 6e6d04e5ed | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.rakumod

[13:14] <Geth> ¦ rakudo/lizmat-extension: Handle .extension("foo") on IOs without extension differently

[13:14] <Geth> ¦ rakudo/lizmat-extension: 

[13:14] <Geth> ¦ rakudo/lizmat-extension: Before this commit, "foo".IO.extension("bar") would return "foo".IO

[13:14] <Geth> ¦ rakudo/lizmat-extension: instead of the probably expected "foo.bar".IO.  To get that behaviour

[13:14] <Geth> ¦ rakudo/lizmat-extension: one needs to specify :parts(0) as well.  Which, at least to me, was

[13:14] <Geth> ¦ rakudo/lizmat-extension: a bit of a WAT.

[13:14] <Geth> ¦ rakudo/lizmat-extension: 

[13:14] <Geth> ¦ rakudo/lizmat-extension: <…commit message has 7 more lines…>

[13:14] <Geth> ¦ rakudo/lizmat-extension: review: https://github.com/rakudo/rakudo/commit/6e6d04e5ed

[13:15] <Geth> ¦ rakudo: lizmat++ created pull request #5512: Handle .extension("foo") on IOs without extension differently

[13:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5512

[15:28] <Geth> ¦ rakudo/lizmat-Sub: 8ffce7c4a9 | (Elizabeth Mattijsen)++ | src/core.c/Mu.rakumod

[15:28] <Geth> ¦ rakudo/lizmat-Sub: Add Mu.Sub($method) "coercer"

[15:28] <Geth> ¦ rakudo/lizmat-Sub: 

[15:28] <Geth> ¦ rakudo/lizmat-Sub: The idea being that *Raku* should provide a HLL interface to obtain

[15:28] <Geth> ¦ rakudo/lizmat-Sub: a Sub object for the given method name on the invocant.

[15:28] <Geth> ¦ rakudo/lizmat-Sub: 

[15:28] <Geth> ¦ rakudo/lizmat-Sub:     $ raku -e 'say Int.Sub("Str")(687, :subscript)'

[15:28] <Geth> ¦ rakudo/lizmat-Sub:     ₆₈₇

[15:28] <Geth> ¦ rakudo/lizmat-Sub: <…commit message has 5 more lines…>

[15:28] <Geth> ¦ rakudo/lizmat-Sub: review: https://github.com/rakudo/rakudo/commit/8ffce7c4a9

[15:28] <Geth> ¦ rakudo: lizmat++ created pull request #5513: Add Mu.Sub($method) "coercer"

[15:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5513

[15:38] <ugexe> does that mean everything would have a Sub method? that doesn't seem ideal

[15:41] <lizmat> yes, it would: why wouldn't that be ideal?

[16:04] <ugexe> well i guess on second thought maybe it seems ok to me. what i don't like is adding new methods with short names that can have different programming meanings in different contexts (similar to why i think the 'cache' method name turned out to be a bit too huffmanized). So like I can see people already implementing their own 'method Sub' to do subtraction or as a getter/setter for some callback

[16:04] <ugexe> registering thing. On the other hand there is already a 'Sub' type, and we generally already provide method names of other types, so i think it is consistent in that regard and is what makes me think its actually fine in my view

[16:05] <lizmat> :-)

[16:06] <gfldex> m: 42.Sub # <-- this should do `is pure`.

[16:06] <camelia> rakudo-moar bafa5ad46: OUTPUT: «No such method 'Sub' for invocant of type 'Int'.  Did you mean 'sum'?␤  in block <unit> at <tmp> line 1␤␤»

[16:08] <gfldex> m: my $very-variable = 42; "$very-variable".Sub # How about interpolation?

[16:08] <camelia> rakudo-moar bafa5ad46: OUTPUT: «No such method 'Sub' for string '42'.  Did you mean 'sum'?␤  in block <unit> at <tmp> line 1␤␤»

[16:11] <Geth> ¦ rakudo/main: b8aaffd6e9 | (Elizabeth Mattijsen)++ | src/core.c/Int.rakumod

[16:11] <Geth> ¦ rakudo/main: nqp::syscall is Moar specific, so protect it

[16:11] <Geth> ¦ rakudo/main: 

[16:11] <Geth> ¦ rakudo/main: This should hopefully unbreak the JVM build

[16:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b8aaffd6e9

[16:14] <Geth> ¦ rakudo/lizmat-Sub: d71d911d39 | (Elizabeth Mattijsen)++ | src/core.c/Mu.rakumod

[16:14] <Geth> ¦ rakudo/lizmat-Sub: Mark Mu.Sub($method) as pure

[16:14] <Geth> ¦ rakudo/lizmat-Sub: review: https://github.com/rakudo/rakudo/commit/d71d911d39

[16:30] <gfldex> m: { 42 }.Sub # Sub or Block? May be .Sub should be .Callable ?

[16:30] <camelia> rakudo-moar bafa5ad46: OUTPUT: «No such method 'Sub' for invocant of type 'Block'.  Did you mean 'sum'?␤  in block <unit> at <tmp> line 1␤␤»

[16:30] <gfldex> lizmat: ^^^

[18:12] <Geth> ¦ rakudo/lizmat-Sub: b23f0e5fe6 | (Elizabeth Mattijsen)++ | src/core.c/Mu.rakumod

[18:12] <Geth> ¦ rakudo/lizmat-Sub: Handle failed search better

[18:12] <Geth> ¦ rakudo/lizmat-Sub: 

[18:12] <Geth> ¦ rakudo/lizmat-Sub: - use nqp::tryfindmethod instead of nqp::findmethod

[18:12] <Geth> ¦ rakudo/lizmat-Sub: - use nqp::ifnull instead of // to handle VMnull values

[18:12] <Geth> ¦ rakudo/lizmat-Sub: review: https://github.com/rakudo/rakudo/commit/b23f0e5fe6

[18:13] <lizmat> gfldex: perhaps, and you could consider .Sub premature huffmanization...   please leave a comment on the PR

[18:15] <lizmat> gfldex: BTW,  { 42 }.Sub($method) would never work, as a block cannot have methods

[18:43] <Geth> ¦ rakudo/main: f067300355 | (Elizabeth Mattijsen)++ | docs/dispatchers.md

[18:43] <Geth> ¦ rakudo/main: Document the easier MoarVM dispatchers

[18:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f067300355

[18:51] <Geth> ¦ rakudo/main: 2aa796fd88 | (Elizabeth Mattijsen)++ | docs/dispatchers.md

[18:51] <Geth> ¦ rakudo/main: Move recommended reading section up

[18:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2aa796fd88

[20:18] <gfldex> lizmat: I will have this rolling around in my head a little more and add comments if needed.

[20:23] <gfldex> m: constant block = { 42 }; block.wrap(-> | {});

[20:24] <camelia> rakudo-moar 2aa796fd8: OUTPUT: «No such method 'wrap' for invocant of type 'Block'.  Did you mean any␤of these: 'Map', 'WHAT', 'grep', 'map'?␤  in block <unit> at <tmp> line 1␤␤»

[20:35] *** epony left
[20:38] *** bartolin left
[20:38] *** epony joined
[20:38] *** bartolin joined
[21:55] *** samebchase left
[22:14] <ugexe> i guess there is .assuming()

[22:37] *** sena_kun left
[22:38] *** sena_kun joined
[22:41] *** sena_kun left
[22:42] *** sena_kun joined
[22:50] *** sena_kun left
[22:51] *** sena_kun joined
[23:30] *** sena_kun left
