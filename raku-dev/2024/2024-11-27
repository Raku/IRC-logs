[01:32] <timo> with a 26k deep call stack, i should maybe not ask moar-remote for "all lex" %)

[01:33] <timo> oh, "step" asks for a backtrace of course, so stepping will now take multiple seconds for a tiny step

[01:46] <timo> > find_macro_routine

[01:46] <timo> hmm.

[01:58] <timo> https://gist.github.com/timo/d8aa2c3924a99da2fa66b1566bd36550

[02:19] <timo> i think we're forcing a deopt every time we enter token statement because there's an unconditional rebless in it

[02:29] <timo> i wonder why i'm randomly ending up in handling an exception with message "could not locate compile-time value for symbol say"

[02:29] <timo> that's from is_type it looks like

[02:30] <timo> an authoritative cache every, say, 100 frames might be a good idea for ridiculous examples like 10000 deep nested for loop

[02:31] <timo> otherwise i think we're doing a couple of things where we walk all the way up the call stack

[02:33] <timo> oh, i wonder if we are going up the call chain to give every frame a "caller info needed" flag, if we hit one where it's already set, can we stop?

[07:43] <bartolin> there is another spectest failure on the JVM backend which I golfed down to this:

[07:43] <bartolin> m: proto sub foo ($) {*}; multi sub foo(Mu $a) { say "got a Mu" }; foo(Mu)

[07:43] <camelia> rakudo-moar ba3b24cff: OUTPUT: «got a Mu␤»

[07:43] <bartolin> I believe this is equivalent to 

[07:43] <bartolin> m: proto sub foo (Any $) {*}; multi sub foo(Mu $a) { say "got a Mu" }; foo(Mu)

[07:43] <camelia> rakudo-moar ba3b24cff: OUTPUT: «got a Mu␤»

[07:43] <bartolin> on the JVM backend both fail with: Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)

[07:45] <bartolin> In the documentation it says (https://docs.raku.org/syntax/proto): "[...] arguments of multi candidates may have subtypes of those of the proto [...]"

[07:45] <bartolin> but this doesn't seem to apply here, since Mu isn't a subtype of Any

[07:49] <bartolin> I also noticed that there are different variants for signatures for protos in the core: often it's something like :(Mu, *%) or :(Mu, |) but other cases it's :($, *%). (And there are many more variants.)

[07:54] <bartolin> btw, the test failure happens in integration/advent2011-day07.t and I believe that it fails to dispatch to the multi variants of Stash::ASSIGN-KEY https://github.com/rakudo/rakudo/blob/ba3b24cff2/src/core.c/Stash.rakumod#L62 when something is passed in that doesn't derive from Any

[07:55] <bartolin> but I'm mostly curious why/how MoarVM dispatches to the multi sub in my example. Does it ignore the types for the proto?

[07:56] <nine> insane.raku with 10000 loops finished in 3:27.79 minutes. So at least we know that it does so eventually.

[07:57] <bartolin> whoa

[07:59] <bartolin> m: proto sub foo (Str $) {*}; multi sub foo(Mu $a) { say "got a Mu" }; foo(Int)

[07:59] <camelia> rakudo-moar ba3b24cff: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling foo(Int) will never work with signature of the proto (Str)␤at <tmp>:1␤------> ulti sub foo(Mu $a) { say "got a Mu" }; <HERE>foo(Int)␤»

[07:59] <bartolin> no, doesn't look like it bypasses it completely.

[08:00] <bartolin> m: proto sub foo (Str $) {*}; multi sub foo(Mu $a) { say "got a Mu" }; foo(Cool)

[08:00] <camelia> rakudo-moar ba3b24cff: OUTPUT: «got a Mu␤»

[08:00] * bartolin is puzzled

[08:02] <nine> bartolin: the multi dispatcher optimizes away the call to the proto when it has an inconsequential signature and is an onlystar. Apparently the definition of "inconsequential" is a bit off with regards to Any vs. Mu

[08:05] <bartolin> ah, thanks. would this be a place where I could start to look for the details? https://github.com/rakudo/rakudo/blob/ba3b24cff2/src/vm/moar/dispatchers.nqp#L1806

[08:06] <nine> Yes, definitely

[08:06] <bartolin> (I didn't remember the term "onlystar". I even looked for "multistar" and "protostar" ;))

[08:06] <bartolin> cool, thanks, nine++

[08:28] <bartolin> one thing I noticed: this just prints "got a Mu" when running with --optimize=off. so without the optimizer it seems to really just ignores the types of the proto for the "is-simple-args-proto" case.

[08:28] <bartolin> m: proto sub foo (Str $) {*}; multi sub foo(Mu $a) { say "got a Mu" }; foo(Int)

[08:28] <camelia> rakudo-moar ba3b24cff: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling foo(Int) will never work with signature of the proto (Str)␤at <tmp>:1␤------> ulti sub foo(Mu $a) { say "got a Mu" }; <HERE>foo(Int)␤»

[10:06] <Geth> ¦ nqp/main: 5d3ba92f3d | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[10:06] <Geth> ¦ nqp/main: Bump MoarVM to get MasterDuke++ UBSAN fixes

[10:06] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/5d3ba92f3d

[10:26] <Geth> ¦ rakudo/main: 2147e6b81d | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[10:26] <Geth> ¦ rakudo/main: Bump NQP to get MasterDuke++ UBSAN fixes on MoarVM

[10:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2147e6b81d

[10:33] *** sena_kun joined
[10:36] <timo> > 269.121712700 seconds time elapsed

[10:42] *** sena_kun left
[10:44] <timo> it's also using an impressive amount of memory. just hit a gigabyte before it finished

[10:54] *** rba_ joined
[11:01] <lizmat> .oO( oh what a tangled web we weave )

[11:02] *** coleman left
[11:02] *** japhb left
[11:02] *** rba left
[11:02] *** samebchase left
[11:02] *** sjn left
[11:02] *** rba_ is now known as rba

[11:05] *** coleman joined
[11:05] *** japhb joined
[11:05] *** samebchase joined
[11:05] *** sjn joined
[11:07] <timo> so many more things i have to add to the debug protocol ...

[11:07] <timo> time to invent yet another way to do pagination i guess

[11:43] *** gfldex left
[11:50] *** gfldex joined
[12:29] <timo> <!!{ if !nqp::eqaddr($/.WHAT, (my $sgm := self.slang_grammar('MAIN'))) { note("reblessing " ~ $/.HOW.name($/) ~ " to " ~ $sgm.HOW.name($/)); nqp::rebless($/, $sgm); }; 1 }>

[12:30] <timo> MVM_spesh_deopt_all goes from 23.7% to 2.41% of samples

[12:33] * lizmat doesn't follow

[12:52] <timo> that's in Perl6/Grammar.nqp at the beginning of the "statement" rule

[12:52] <timo> well, i changed it from just the rebless call to have the if wrapped around it

[13:02] <lizmat> aha, so not reblessing if the .WHAT is already the same ?

[13:12] <timo> yes

[13:12] <timo> rebless unconditionally causes a full deoptimization

[13:13] <lizmat> I seem to recall that that was on purpose...  but maybe not needed if the .WHAT is already the same

[13:13] <lizmat> but wouldn't that be better handled in nqp::rebless ?

[13:13] <lizmat> I mean, check for .WHAT equality ?

[13:17] <nine> No. Ops should be simple and dumb. If the checking logic is in HLL code, there's a possibility to optimize it away.

[13:22] <patrickb> Is it right, that the t/12-rakuast tests are not run by default?

[13:22] <nine> No, they should be run

[13:22] <patrickb> They don't seem to be run when I look at the latest azure runs.

[13:23] <patrickb> Looking at the code I don't see any logic to skip them, they do get run when I try locally.

[13:24] <patrickb> It's doing `prove -e ../install/bin/perl6 -vlr t`.

[13:25] <patrickb> But it stops at t/11-ts/eval-js.t

[13:26] <patrickb> It's the file extension.

[13:26] <patrickb> :facepalm:

[13:26] <patrickb> t vs rakutest

[13:27] <patrickb> it'd be better to replace the hard prove command with `make test` I'd say. Agreed?

[13:28] <patrickb> o/ nine

[13:28] <patrickb> Long time no read! How are you?

[13:30] <nine> \o patrickb Doing great! Having my own product developing startup is surprise, surprise just a lot of work :) How're you?

[13:33] <patrickb> Also good. I moved places recently. Still a huge mess everywhere. Tidying tends to take longer and if you don't pay attention reverse with two small ones...

[13:36] <nine> I would just get used to that :D

[13:39] <patrickb> :-P

[13:47] <Geth> ¦ rakudo: patrickbkr++ created pull request #5699: Azure run rakuast tests

[13:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5699

[14:48] <Geth> ¦ rakudo/main: ad3e9c5795 | (Patrick Böker)++ | azure-pipelines.yml

[14:48] <Geth> ¦ rakudo/main: Run t as well as rakutest tests in azure

[14:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ad3e9c5795

[14:48] <Geth> ¦ rakudo/main: cfa5115c43 | (Patrick Böker)++ | azure-pipelines.yml

[14:48] <Geth> ¦ rakudo/main: azure s/perl6/raku/

[14:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cfa5115c43

[14:48] <Geth> ¦ rakudo/main: 24a1cdbbbb | (Patrick Böker)++ (committed using GitHub Web editor) | azure-pipelines.yml

[14:48] <Geth> ¦ rakudo/main: Merge pull request #5699 from patrickbkr/azure-run-rakuast-tests

[14:48] <Geth> ¦ rakudo/main: 

[14:48] <Geth> ¦ rakudo/main: Azure run rakuast tests

[14:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/24a1cdbbbb

[14:55] *** Xliff joined
[14:55] <Xliff> timo: Here is fine. Probably better because scrollback can be used to write a guide.

[14:56] <timo> OK

[14:56] <timo> oh, MVM_JIT_DISABLE=1 while recording will give C stack traces back

[14:57] <Xliff> WARNING: event 'N/A' not valid (bits 16,20,22 of config '5111c4' not supported by kernel)!

[14:57] <timo> ah crap, your CPU may not be supported by rr yet

[14:57] <timo> maybe there's a newer version of rr that you can install?

[14:58] <timo> oh, do you have an amd zen?

[14:59] <timo> it's not crucial that we use rr. with MVM_JIT_DISABLE=1 we will have more to work with as well

[14:59] <Xliff> It should be. Unfortunately I have to split for a meeting in $dayJob. Can we pick up when I'm done?

[15:00] <timo> how long will it be? i might have to go soon as well :(

[15:03] <timo> my roadmap for figuring stuff out would be to find the object that we're trying to assign to, then printing STABLE(obj)->debug_name should give us an idea why it's telling us we have an immutable value on the receiving end

[15:03] <timo> usually it's a bit annoying to get a handle on the "obj" because much of the time you just get "value has been optimized out"; if you can rebuild your moarvm with --optimize=0 that usually goes away, for a noticeable performance penalty

[15:05] <timo> if you have the bytecode in front of you, and you're in MVM_interp_run, you can usually get reg_base[number_of_register].o for the right value

[15:22] <Xliff> Oh thank god. It was short.

[15:22] <Xliff> Let

[15:22] <Xliff> Let's see if we can get it working without rr for now.

[15:24] <timo> OK

[15:24] <Xliff> First call to MVM_exception_throw_adhoc is "Cannot move to outers or callers with non-traversable context"

[15:26] <timo> that's fine, that always happens and is an exception we expect and catch

[15:28] <Xliff> OK, so how to move beyond this?

[15:28] <timo> just "c" again will resume running until the next time a breakpoint is hit

[15:28] <Xliff> Nevermind found it.

[15:28] <timo> or you ctrl-c to manually interrupt execution

[15:28] <Xliff> #0  MVM_exception_throw_adhoc (tc=0x3128a020100, messageFormat=0x7ffff79c2488 "Cannot assign to an immutable value") at src/core/exceptions.c:901

[15:28] <Xliff> #1  0x00007ffff78357e0 in MVM_interp_run (tc=0x3128a020100, initial_invoke=0x7ffff79c2488, initial_invoke@entry=0x7ffff796c1b0 <toplevel_initial_invoke>, 

[15:28] <Xliff>     invoke_data=0x7ffff79c2488, invoke_data@entry=0x7ffff796c1b0 <toplevel_initial_invoke>, outer_runloop=outer_runloop@entry=0x0) at src/core/interp.c:2805

[15:28] <Xliff> #2  0x00007ffff796d269 in MVM_vm_run_file (instance=instance@entry=0x3128a010800, 

[15:28] <Xliff>     filename=filename@entry=0x555555559570 "/home/cbwood/.rakubrew/versions/moar-blead/install/share/perl6/runtime/perl6.moarvm") at src/moar.c:524

[15:28] <Xliff> #3  0x00005555555558de in main (argc=<optimized out>, argv=<optimized out>) at src/vm/moar/runner/main.c:480

[15:29] <timo> ok, cool, so we're in the case where the object we are trying to assign to doesn't have a container spec in the first place

[15:29] <Xliff>   at src/vm/moar/dispatchers.nqp:222  (/home/cbwood/.rakubrew/versions/moar-blead/install/share/perl6/lib/Perl6/BOOTSTRAP/v6c.moarvm:)

[15:29] <Xliff>  from /home/cbwood/Work/RacquetAppServer/app/lib/Applications/Bizzell/Inventory/Instance.pm6 (Applications::Bizzell::Inventory::Instance):48  (/home/cbwood/Work/RacquetAppServer/app/lib/.precomp/D69BDF306EBF6CADBB78BF26AE45271D9FD3BB75/CA/CAAB3B2684593984EDC20968A2AA667B2CE6626E:BUILDALL)

[15:29] <Xliff>  from SETTING::src/core.c/Mu.rakumod:158  (/home/cbwood/.rakubrew/versions/moar-blead/install/share/perl6/runtime/CORE.c.setting.moarvm:bless)

[15:29] <Xliff>  from /home/cbwood/Work/RacquetAppServer/app/lib/Racquet/DB/ClassBase.pm6 (Racquet::DB::ClassBase):856  (/home/cbwood/Work/RacquetAppServer/app/lib/.precomp/D69BDF306EBF6CADBB78BF26AE45271D9FD3BB75/E5/E5804E959AB548F13781714DC8C6C7642F1B3556:new)

[15:29] <Xliff>  from /home/cbwood/Work/RacquetAppServer/app/lib/Racquet/DB/ClassBase.pm6 (Racquet::DB::ClassBase):852  (/home/cbwood/Work/RacquetAppServer/app/lib/.precomp/D69BDF306EBF6CADBB78BF26AE45271D9FD3BB75/E5/E5804E959AB548F13781714DC8C6C7642F1B3556:new)

[15:29] <Xliff>  from /home/cbwood/Work/RacquetAppServer/app/lib/Racquet/DB/ClassBase.pm6 (Racquet::DB::ClassBase):349  (/home/cbwood/Work/RacquetAppServer/app/lib/.precomp/D69BDF306EBF6CADBB78BF26AE45271D9FD3BB75/E5/E5804E959AB548F13781714DC8C6C7642F1B3556:getRecordReal)

[15:29] <timo> "frame 1" will put you in the frame of the interpreter

[15:29] <Xliff>  from /home/cbwood/Work/RacquetAppServer/app/lib/Racquet/DB/ClassBase.pm6 (Racquet::DB::ClassBase):302  (/home/cbwood/Work/RacquetAppServer/app/lib/.precomp/D69BDF306EBF6CADBB78BF26AE45271D9FD3BB75/E5/E5804E959AB548F13781714DC8C6C7642F1B3556:getRecord)

[15:29] <Xliff>  from units/test-instance.raku:32  (<ephemeral file>:MAIN)

[15:29] <Xliff> Ok. There.

[15:30] <timo> please try if "print cont" gives you something

[15:30] <timo> hopefully not "value has been optimized out"

[15:30] <Xliff> (MVMObject *) 0x7ffff79c2488

[15:30] <timo> but we can deal with it even if it does

[15:30] <timo> perfect, then print STABLE(cont)->debug_name

[15:31] <Xliff> "Cannot access memory at address 0x756d7d79206e6b18

[15:32] <Xliff> And I had to type that out by hand!

[15:33] <timo> ok that's odd. then let's look at  print cont[0]  to see if it looks reasonable or if it looks messed up

[15:33] <Xliff> $3 = {header = {sc_forward_u = {forwarder = 0x6120746f6e6e6143, sc = {sc_idx = 1852727619, idx = 1629516911}, st = 0x6120746f6e6e6143}, owner = 1734964083, 

[15:33] <Xliff>     flags1 = 110 'n', flags2 = 32 ' ', size = 28532}, st = 0x756d6d69206e6120}

[15:34] <timo> yeah that's not an object at all

[15:34] <Xliff> OK. Can you tell what it is?

[15:35] <timo> can you paste the output of  call MVM_dump_bytecode(tc)  to gist or some pasting service? it'd be tens of lines long

[15:35] <timo> IRC is not so great for multi-line output

[15:35] <Xliff> OK. What do you need multi line of, and I'll create a gist or a pasty

[15:36] <timo> actually we just need that one line with "assign reg_bla, reg_blubb" in it

[15:36] <Xliff> And how can I get that?

[15:37] <timo> call MVM_dump_bytecode(tc)

[15:37] <timo> is the gdb command

[15:38] <Xliff> OK. Creating pastebin.

[15:39] <Xliff> https://pastebin.com/k5jd79Gp

[15:40] <timo> perfect. see if reg_base[0].o is different from what we got when we did "print cont"

[15:40] <timo> print reg_base[0].o

[15:40] <timo> i would expect 0x7ffff79c2488 but it'd be better if it was something different

[15:46] <Xliff> $4 = (MVMObject *) 0x3128a031728

[15:46] <timo> now that looks more reasonable

[15:46] <timo> print STABLE($4)->debug_name

[15:46] <Xliff> Could have fooled me! :)

[15:47] <Xliff> $5 = 0x3128f59df08 "Int"

[15:47] <timo> well, one of the reasons is that 0x7ffff79c2488 is, or at least very suspiciously looks like, an address into the stack

[15:47] <Xliff> So am I attempting to assing something to the Int type object?

[15:48] <timo> let's look at  print *$4  and see the flags to see if it's the type object, it's more likely an instance

[15:48] <Xliff> $6 = {header = {sc_forward_u = {forwarder = 0x0, sc = {sc_idx = 0, idx = 0}, st = 0x0}, owner = 1, flags1 = 0 '\000', flags2 = 1 '\001', size = 40}, st = 0x3128a7334d0}

[15:48] <timo> ok, flags1 is 0; if it's an odd number it's a type object, so that means it's an instance

[15:49] <timo> we can look into the BUILDALL frame to get to know more

[15:49] <Xliff> OK, and how can we do that?

[15:49] <Xliff> This is where I got to when I logged into IRC

[15:50] <timo> do this:  call MVM_dump_bytecode_stackframe(tc, 1)

[15:50] <timo> it will probably be much longer than the previous one, so pastebin again

[15:50] <Xliff> Oh yes, it is.

[15:50] <timo> if we're lucky - and i'm not sure why we sometimes aren't - we get a line that has a -> in it

[15:51] <timo> but importantly, we should be seeing names of attributes and variables

[15:51] <Xliff> And that looks like application code, but I've checked the BUILD for this object, and it supposedly exits.

[15:51] <timo> BUILDALL is a submethod we automatically generate from the BUILDALLPLAN when a class gets composed

[15:51] <Xliff> And yes, we are seeing attribute names.

[15:52] <timo> it used to be a little interpreter of the build plan, but now we compile it because it go zoom instead of go snore

[15:52] <Xliff> How can I throw that output into a file?

[15:52] <timo> you can't copypaste from the terminal? i'll look up the gdb command that spits stuff into a file

[15:52] <timo> though this goes into the stderr of the process, not exactly sure if gdb can steal that

[15:52] <Xliff> This is a LONG list of attributes.

[15:53] <timo> and there is no line with a -> ?

[15:55] <Xliff> https://pastebin.com/RW4p7iZ7 - # Warning: LOTS of output. This is a very complex object.

[15:55] <timo> oh hey look there's the ->

[15:55] <timo> it should be the $!total-disk attrubte that's causing you trouble

[15:56] <Xliff> OIC. Not $!free-disk?

[15:57] <Xliff> So maybe $!total-disk is Nil?

[15:57] <Xliff> OK. That's something to check on. Thanks!

[15:57] <timo> oh we can output the hash that the values are coming from if you want, but i don't think it'd be nil, it should be some Int

[15:58] <Xliff> OK, lets try!

[15:58] <Xliff> I suspect it might not be in the hash.

[15:58] <timo> i think the isnull a few lines further up guards against that

[15:59] <timo> ok first we have to reach the hash, that should be ` print tc->cur_frame->caller->work[9].o[0] `

[15:59] <timo> that will give you a $99 to refer to this by

[16:00] <Xliff> Hm. No it gives a $7

[16:00] <timo> then you can ` print $99.st->debug_name ` to ensure it's actually a kind of hash

[16:00] <timo> you can "print 1" 92 times then you should be at $99 :P

[16:00] <Xliff> Yeah, "History has not yet reached $99;

[16:01] <timo> otherwise replace $99 with $7 in my commands

[16:01] <Xliff> $8 = 0x312959736c0 "Applications::Bizzell::Inventory::Instance"

[16:01] <timo> ok i think i got the wrong register then

[16:02] <Xliff> Should I try 8 or 10?

[16:02] <timo> ah yes, we wanted work[4] rather than work[9]

[16:02] <timo> 9 is the object we're constructing

[16:02] <Xliff> $10 = 0x3128a5f0240 "BOOTHash"

[16:03] <timo> no, more accurately, 9 is the type of the object we're constructing

[16:03] <timo> perfect, that's the one we want

[16:03] <Xliff> OK. I am underatanding some of this.

[16:05] <Xliff> OK. So how do I extract data from the BOOTHash?

[16:06] <timo> a moment

[16:08] <timo> ` call MVM_str_hash_fsck(tc, &((MVMHash *)$10)->body.hashtable.table, 10) `

[16:09] <timo> .o( this really wants to become a more trivial to use function for debugging sessions )

[16:21] <Xliff> Hmm... I'm segfaulting with that. What member is body a part of? st?

[16:21] <timo> no, one "outside" of st

[16:22] <timo> in other words, st lives next to body, but st is a pointer and body is just a piece of the struct

[16:22] <timo> was $10 wrong? it should have been the result of work[4].o

[16:22] <timo> no, oops

[16:22] <timo> $10 was the debug_name

[16:22] <timo> it's probably $9 on your end then?

[16:23] <Xliff> No. I had to restart. It

[16:23] <Xliff> This is what I get from work[4].o

[16:23] <Xliff> $14 = {header = {sc_forward_u = {forwarder = 0x0, sc = {sc_idx = 0, idx = 0}, st = 0x0}, owner = 1, flags1 = 0 '\000', 

[16:23] <Xliff>     flags2 = 1 '\001', size = 32}, st = 0x4bb7c720498}

[16:23] <timo> ah right because your call to fsck segfaulted

[16:23] <timo> it's possible we're in a different spot now

[16:23] <timo> because that content of register 4 there is a type object

[16:24] <Xliff> OK, so now this is work[4].o after a restart

[16:24] <Xliff> $17 = {header = {sc_forward_u = {forwarder = 0x0, sc = {sc_idx = 0, idx = 0}, st = 0x0}, owner = 1, flags1 = 0 '\000', 

[16:24] <Xliff>     flags2 = 1 '\001', size = 32}, st = 0x3ab5e728498}

[16:24] <Xliff> ....And... that looks like a type object.

[16:24] <timo> no, flags1 is where we have to look and that'? 0

[16:25] <timo> that's 0, so concrete not type object

[16:25] <timo> ok, let's verify again that $17->st->debug_name is BOOTHash or so

[16:25] <Xliff> And it is BOOTHash, again.

[16:25] <timo> good, then the fsck like but with $17 should work this time

[16:26] <Xliff> so "

[16:26] <Xliff> call MVM_str_hash_fsck(tc, &((MVMHash *)$17)->body.hashtable.table, 10) ... ?

[16:26] <timo> that should work yeah

[16:27] <timo> that'll show us the keys that have something

[16:27] <Xliff> Still SEGV

[16:27] <timo> the heck?

[16:27] <timo> oh, can you print tc? that sometimes gets messed up

[16:28] <timo> (the next time we've reached this spot, ahem)

[16:28] <timo> i'm about to suggest we use moar-remote instead of gdb

[16:29] <Xliff> $23 = (MVMThreadContext *) 0x3ab5e020280

[16:29] <Xliff> One sec. Let me restart to make sure.

[16:30] <Xliff> tc=0x5fb12020000

[16:32] <timo> ok that doesn't look wrong

[16:32] <timo> did it show what line it segfaulted on when you last tried it?

[16:34] <Xliff> 0x00007ffff78378d9 in MVM_str_hash_fsck (tc=0x3ab5e020280, hashtable=0x18, mode=10) at src/core/str_hash_table.c:877

[16:35] <Xliff> Does a MVMHash** get passed to MVM_str_hash_fsck?

[16:36] <timo> oh that very looks wrong, yeah

[16:36] <Xliff> &((MVMHash *)$17) -> MVMHash **

[16:36] <timo> it's not supposed to be a MVMHash* or **, it should be the address of the hashtable that's embeded inside its body

[16:36] <Xliff> So would that be $17.st?

[16:37] <timo> the & is lower precedence than the -> after the closing parethesis

[16:37] <timo> so you're turning $17 into an MVMHash *, then you're accessing ->body.hashtable and finally taking the address of that

[16:37] <timo> but if the value that gets passed is 0x18, that's certainly not right

[16:37] <Xliff> Yeah, but if I print $17, I don't see body

[16:38] <timo> yeah because MVMObject doesn't have a body, but MVMHash does

[16:38] <Xliff> Cannot access memory at address 0x3ab5e032c80

[16:38] <timo> (gdb) print obj

[16:38] <timo> $1 = (MVMObject *) 0x2bd1bd24e60

[16:38] <timo> (gdb) print &((MVMHash *)$1)->body.hashtable 

[16:38] <timo> $2 = (MVMStrHashTable *) 0x2bd1bd24e78

[16:39] <timo> m: say 0x78 - 0x60

[16:39] <camelia> rakudo-moar 24a1cdbbb: OUTPUT: «24␤»

[16:39] <timo> d'oh

[16:39] <timo> but that is probably where the 0x18 came from, it's only the offset. maybe $17 was actually 0 or NULL?

[16:40] <timo> you're re-typing all these commands by hand?

[16:42] <Xliff> That and using history.

[16:43] <Xliff> So I'm currently here at frame 1: (gdb) print $29.st->debug_name

[16:43] <Xliff> $30 = 0x5fb125f0240 "BOOTHash"

[16:43] <Xliff> (gdb) print tc->cur_frame->caller->work[4].o[0]

[16:43] <Xliff> $29 = {header = {sc_forward_u = {forwarder = 0x0, sc = {sc_idx = 0, idx = 0}, st = 0x0}, owner = 1, flags1 = 0 '\000', 

[16:43] <Xliff>     flags2 = 1 '\001', size = 32}, st = 0x5fb12728498}

[16:44] <timo> oh, is $29 the .o or the .o[0] because the latter might already be dereferenced? not exactly sure how that works with using history items as input for other things

[16:44] <Xliff> .o[0]

[16:45] <timo> ok let's try without the [0] there

[16:45] <Xliff> print tc->cur_frame->caller->work[4].o is (MVMObject *) 0x5fb12033798

[16:45] <Xliff> OK, so you want me to try the call with that?

[16:45] <timo> yes, please

[16:45] <timo> fingers crossed

[16:45] <timo> oh wait

[16:46] <timo> gdb has a kind of snapshot mechanism

[16:46] <Xliff> So I'll be running: "call MVM_str_hash_fsck(tc, &((MVMHash *)$31)->body.hashtable.table, 10)"

[16:46] <timo> never mind: "checkpoint: can't checkpoint multiple threads"

[16:46] <timo> if $31 is equivalent to 0x5fb12033798 then yes, and if tc isn't messed up

[16:51] <Xliff> \o/

[16:52] <timo> sorry that was an unnecessary amount of pain my oversight caused >_>

[16:52] <Xliff> https://pastebin.com/S8Xcg8Cn # ROFLMAO!

[16:52] <Xliff> s'okay.

[16:53] <Xliff> BTW - This is the application server I've been writing for Raku for the last 4 years.

[16:53] <timo> phew!

[16:53] <Xliff> $dayJob released it!

[16:53] <timo> awesome!

[16:53] <timo> i'm not sure what was so funny about that paste though %)

[16:53] <Xliff> Still. I need an app for it and the one it was written for still belongs to $dayJob.

[16:53] <Xliff> Oh no. It wasn't the paste. It was your smiley.

[16:54] <Xliff> This really isn't pain for me. I'm grateful for your help!

[16:54] <timo> i'm glad

[16:54] <timo> soon(?) App::MoarVM::Debugger will be good enough that I'd recommend it first instead of gdb

[16:55] <Xliff> Now my largest concern for this is that I can't seem to find the line where this error is occurring. So it looks to me like it's occurring somewhere in new. Somewhere AFTER my ClassBase.BUILD and and Instance.TWEAK, but before new returns with the object.

[16:55] <timo> if you find out why it was complaining about that one attribute, please drop a quick report so we can build a reproducer for the LTA error

[16:55] <Xliff> ClassBase is Instance's parent.

[16:55] <timo> yeah it's in the generated code from the buildplan

[16:55] <Xliff> Along with other Micins.

[16:55] <Xliff> Mixins even.

[16:56] <timo> there's not really a source to go with it, so it doesn't actually have line numbers it could point to

[16:56] <Xliff> So getting the attribute with the problem is still more than I had to go on.

[16:56] <timo> in theory we could put the line numbers that any given attribute is defined on in there, but that will point all over the place for classes that have parents and mixins

[16:57] <Xliff> Yeah. OK, so how can I get the value for "total-disk" from this MVMHash?

[16:58] <timo> uh oh, you do need that? :S

[16:58] <Xliff> he he he he

[16:58] <timo> i mean, we have it in a register also at this point i think

[16:59] <timo> we have the object we've tried to assign, and it comes from the hash

[16:59] <timo> that should be good enough right?

[16:59] <Xliff> Is getting the total-disk value that bad?

[16:59] <Xliff> Is enough really enough?

[17:00] <timo> haha

[17:00] <timo> let's do the easier thing first

[17:00] <Xliff> OK

[17:01] <timo> in the MVM_interp_run frame again, we'd get the value we're trying to assign as work[9].o and the container it was in, if any, as work[25].o

[17:01] <timo> these might be the same if it didn't have a container

[17:01] <timo> we'd want to look at these objects' st again, in particular the debug_name, to see what they are

[17:02] <Xliff> (gdb) print tc->cur_frame->caller->work[25].o[0].st->debug_name

[17:02] <Xliff> $42 = 0x4a006710070 "VMNull"

[17:02] <timo> if you just print the .o you'll see why i always put [0], because it just shows you the pointer value, not the struct members, so you have to ` print *$ ` or ` print $[0] ` as the next thing ($ by itself refers to the latest $99)

[17:02] <timo> oh i read from the wrong part of the paste

[17:03] <timo> we need 7 and/or 23 rather than 9 and 25

[17:03] <Xliff> print tc->cur_frame->caller->work[23].o[0].st->debug_name

[17:03] <Xliff> $43 = 0x4a00b5ba890 "Scalar"

[17:04] <Xliff> (gdb) print tc->cur_frame->caller->work[7].o[0].st->debug_name

[17:04] <Xliff> $44 = 0x4a00b5bda10 "Int"

[17:05] <timo> hold on, we don't want to go to the caller frame

[17:05] <timo> wait

[17:05] <Xliff> This is frame 1

[17:05] <timo> disregard my last message

[17:06] <timo> OK we should be able to get the value of the number with ` print MVM_repr_get_int(tc, tc->cur_frame->caller->work[7].o) `

[17:06] <Xliff> $45 = 25821052928 -- Looks right

[17:07] <timo> and we can get some info about the scalar, like what its descriptor looks like, though i expect it to not be very exciting, with ` call MVM_dump_p6opaque(tc, tc->cur_frame->caller->work[23].o) `

[17:08] <Xliff> call MVM_dump_p6opaque(tc, tc->cur_frame->caller->work[23].o)

[17:08] <Xliff> Scalar.new(#`(from Scalar) $!descriptor=ContainerDescriptor::Untyped.new(#`(from ContainerDescriptor) $!of=(Mu), $!name='%', $!default=(Any), $!dynamic=0, $!complainee), $!value=Int.new(#`(from Int) $!valueError getting the string representation of a big integer: Buffer overflow))

[17:08] <Xliff> ???

[17:08] <Geth> ¦ rakudo: patrickbkr++ created pull request #5700: (Sort of) Fix is-run on Windows

[17:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5700

[17:09] <Xliff> OK. I'll attempt to debug this. If I run into this problem again, I should be able to continue to debug from what we've done tonight. It's a BIG help! 

[17:09] <timo> haha cool

[17:09] <timo> ignore the wild output of the dump_p6opaque

[17:09] <Xliff> I now know enough to hang myself umpteen times over! :>

[17:09] <Xliff> Thanks for the rope.

[17:10] <Xliff> I think I'll use it to attempt to free myself from the abyss.

[17:10] <timo> don't hesitate to ask again

[17:10] <timo> plenty of rope in my top drawer

[17:13] <timo> yeah i think the code to dump bigints is just wrong; it's asking how many bits the number has, then divides that by 8 to allocate a buffer to write the string into, and tries to convert it to a base10 decimal string

[17:15] <timo> we could divide by 4 and convert it to hexadecimal, that should work? since 8 bits of number translate into one two-character hex piece

[17:15] <timo> otherwise there's a conversion factor, i think log2 / log10, that we need to multiply the number of bits with to get the right number of chars in the result

[17:20] <Xliff> Why not just use log10.Int and use base10?

[17:20] <Xliff> Actually....

[17:21] <Xliff> Why not just use log10.Int.succ and use base10?

[17:29] <timo> (gdb) call MVM_dump_p6opaque(tc, $19)

[17:29] <timo> H�L�^▒D�T$I�Cf���t8H�E��H��HD�I�K �AH�H�rH�J▒H�FD�T$H���.new(

[17:29] <timo> Thread 1 "rakudo" received signal SIGSEGV, Segmentation fault.

[17:29] <timo> lmao

[17:29] <timo> because it's C code ;)

[17:45] <timo> (gdb) call MVM_dump_p6opaque(tc, tc->cur_frame->caller->caller->params.arg_info.source[0].o)

[17:45] <timo> Foo.new(#`(from Foo) $!blorb=Scalar.new(#`(from Scalar) $!descriptor=ContainerDescriptor.new(#`(from ContainerDescriptor) $!of=(Int), $!name='$!blorb', $!default=<already seen>, $!dynamic=0, $!complainee), $!value=Int.new(#`(from Int) $!value=0x100000000000000000000000000000000)))

[17:48] <timo> Scalar.new(#`(from Scalar) $!descriptor=ContainerDescriptor::Untyped.new(#`(from ContainerDescriptor) $!of=(Mu), $!name='$res', $!default=(Any), $!dynamic=0, $!complainee), $!value=Foo.new(#`(from Foo) $!blorb=Scalar.new(#`(from Scalar) $!descriptor=ContainerDescriptor.new(#`(from ContainerDescriptor) $!of=(Int), $!name='$!blorb', $!default=<already seen>, $!dynamic=0, $!complainee),

[17:48] <timo> $!value=Int.new(#`(from Int) $!value=0x-BFE75246069C573EA404E45B8DDBF930C84F700E0B8A97F6099FCA6C5E92E4EBA229A0D50200F8F0F5E915DA01273A0DEE2F6D380D9CD368E2D1DD2FD7FEE9A5F174BAB7ED31A89D34CB738FD1919B8A1D31D0F684A3CDEF415E40FF11BC32F24EB66A5A))))

[17:49] <timo> also works with negative values, here's one random value i picked from up to 2 ** 800

[17:55] <timo> ok, fix for the "buffer overflow" in MVM_dump_p6opaque is pushed

[17:56] <timo> "buffer overflow" makes it sound dangerous, but it's simply the error it returns when it reaches the end of the buffer and still has more number to write

[18:49] *** sena_kun joined
[19:29] <tbrowder> hi, i’m working on a new module for my upcoming advent article and was reminded once again that, as far as i know, Raku has no built-in method for converting a decimal number to a hexadecimal number. am i wrong? is there a way to use parse-base to do it?

[19:45] <ugexe> m: say 255.base(16)

[19:45] <camelia> rakudo-moar 24a1cdbbb: OUTPUT: «FF␤»

[20:28] <tbrowder> ah, .base on the raw number, thanks!

[21:56] *** sena_kun left
[22:12] <tbrowder> 👍🏻

[22:27] <Xliff> ===SORRY!=== Error while compiling /home/cbwood/Work/RacquetAppServer/app/lib/Racquet/Subs.pm6 (Racquet::Subs)

[22:27] <Xliff> No such method 'protect' for invocant of type 'NQPArray'

[22:27] <Xliff> ??

[22:28] <Xliff> Welcome to Rakudo™ v2024.10-48-g24a1cdbbb.

[22:28] <Xliff> Implementing the Raku® Programming Language v6.d.

[22:28] <Xliff> Built on MoarVM version 2024.10-26-gaec32b1f9.

[22:28] <Xliff> That wasn't happening bnefore I took a nap.

[22:37] <patrickb> timo: now that the RTL issue on Windows is solved, can we merge #5642? That's a pretty epic PR that would give us tremendously faster Windows tests and pretty test results to look at.

[22:39] <Xliff> patrickb: I'm having some issues with the commits you've pushed. Code that was working prior will not even compile, now.

[22:39] <Xliff> I'm attempting to isolate the commit.

[22:40] <Xliff> Could you hold on merging until I do that?

[22:40] <patrickb> Which commit?

[22:40] <Xliff> That's what I'm attempting to determine. Within the last 5 hours, I would suspect.

[22:41] <patrickb> Already merged or only in a PR?

[22:46] <Xliff> Already merged.

[22:48] <patrickb> Huh? The only PR I've merged is changing the azure pipelines file. That can't be related.

[22:51] <Xliff> I'm going back further, now. Still getting this:

[22:52] <Xliff> ===SORRY!=== Error while compiling /home/cbwood/Work/RacquetAppServer/app/units/test-instance.raku

[22:52] <Xliff> New type Block for List is not a mixin type

[22:52] <Xliff> ===SORRY!=== Error while compiling /home/cbwood/Work/RacquetAppServer/app/units/test-instance.raku

[22:52] <Xliff> New type Block for List is not a mixin type

[22:52] <Xliff> Which is definitely NOT what I was getting 5 hours ago.

[22:53] <Xliff> OK, I guess if I am going backwards you can proceed with your merge. Just this issue is odd and it's in the code for a production system.

