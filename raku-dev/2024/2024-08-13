[10:26] <Geth> ¦ rakudo/main: fde5d87fe9 | (Stefan Seifert)++ | 3 files

[10:26] <Geth> ¦ rakudo/main: Fix iterating over Junction with non-simple loop bodies

[10:26] <Geth> ¦ rakudo/main: 

[10:26] <Geth> ¦ rakudo/main: say .^name for any 1; should print "Junction" as we are iterating over a

[10:26] <Geth> ¦ rakudo/main: single Junction item. This already worked but only because of an

[10:26] <Geth> ¦ rakudo/main: optimization for loop bodies without any phasers or other complications.

[10:26] <Geth> ¦ rakudo/main: for any 1 { say .^name; LAST { } } printed "Int" indicating that the

[10:26] <Geth> ¦ rakudo/main: loop body got auto-threaded. That's because Junction objects don't

[10:26] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[10:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fde5d87fe9

[10:26] <Geth> ¦ rakudo/main: 5cfa33aae1 | niner++ (committed using GitHub Web editor) | 3 files

[10:26] <Geth> ¦ rakudo/main: Merge pull request #5620 from rakudo/fix-looping-over-junction

[10:26] <Geth> ¦ rakudo/main: 

[10:26] <Geth> ¦ rakudo/main: Fix iterating over Junction with non-simple loop bodies

[10:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5cfa33aae1

[14:41] *** evalable6 left
[14:41] *** evalable6 joined
[14:41] *** benchable6 left
[14:41] *** benchable6 joined
[15:55] *** [Coke] left
[15:56] *** [Coke] joined
[16:08] <Geth> ¦ roast: 371ce805ce | (Stefan Seifert)++ | S03-operators/assign.t

[16:08] <Geth> ¦ roast: Make %= test independent of the optimizer

[16:08] <Geth> ¦ roast: 

[16:08] <Geth> ¦ roast: This test would fail when rakudo is run with --optimize=off as the

[16:08] <Geth> ¦ roast: broken usage of the operator does not throw an exception but instead

[16:08] <Geth> ¦ roast: stores a Failure. This Failure is stored in the variable. As it then is

[16:08] <Geth> ¦ roast: inside a container, p6sink won't call .sink on the Failure.

[16:08] <Geth> ¦ roast: 

[16:08] <Geth> ¦ roast: The test worked as intended with the optimizer enabled, as we then

[16:08] <Geth> ¦ roast: generate a p6assign op which seems to have slightly different semantics.

[16:08] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/371ce805ce

[16:54] <Geth> ¦ rakudo/main: 7 commits pushed by (Stefan Seifert)++

[16:54] <Geth> ¦ rakudo/main: 10fecfb5b4 | RakuAST: Fix compile time indirect name lookups of package variables

[16:54] <Geth> ¦ rakudo/main: 74c48ea33b | RakuAST: fix miscompilation of anonymous variables declared in signatures

[16:54] <Geth> ¦ rakudo/main: 3d9361a9d8 | RakuAST: fix precedence of meta infix assign on list assignment

[16:54] <Geth> ¦ rakudo/main: a80fcb1ad2 | RakuAST: fix assignment meta operator orelse=

[16:54] <Geth> ¦ rakudo/main: b50eb2004e | RakuAST: fix ^^= and xor= assign meta operators

[16:54] <Geth> ¦ rakudo/main: 7971a150a6 | RakuAST: fix typo in error reporting code

[16:54] <Geth> ¦ rakudo/main: 80abf79c52 | RakuAST: fix default type of parameter with is copy trait

[16:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/5cfa33aae153...80abf79c5220

[16:54] <nine> That brings the count up to 1090

[16:58] <sjn> really cool to see this kind of work done :-D

[17:02] <nine> The whole exercise is really what I'd call "Learning Raku the hard way"

[17:03] *** sena_kun left
[17:05] *** sena_kun joined
[17:21] <Geth> ¦ rakudo/main: 87f150f71b | (Stefan Seifert)++ | src/Raku/Actions.nqp

[17:21] <Geth> ¦ rakudo/main: RakuAST: fix compilation of postfix ops on implicit $_

[17:21] <Geth> ¦ rakudo/main: 

[17:21] <Geth> ¦ rakudo/main: Fixes .++ as a shortcut for $_++

[17:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/87f150f71b

[17:21] <nine> That was an easy one

[17:30] <nine> I hate it when tests depend on the optimizer

[17:34] <Geth> ¦ roast: b9b4770ed9 | (Stefan Seifert)++ | S03-operators/buf.t

[17:34] <Geth> ¦ roast: Fix tests depending on implementation details

[17:34] <Geth> ¦ roast: 

[17:34] <Geth> ¦ roast: Whether the implementation of ~= uses the .Stringy method or the ~

[17:34] <Geth> ¦ roast: prefix operator to stringify operands is an implementation detail and

[17:34] <Geth> ¦ roast: indeed even in current Rakudo depends on whether the optimizer is

[17:34] <Geth> ¦ roast: active, or not. We already check a very specific exception type. There

[17:34] <Geth> ¦ roast: shouldn't be a need to go beyond that.

[17:34] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b9b4770ed9

[17:34] <nine> That's 1092 then.

[18:21] *** sena_kun left
[18:22] *** sena_kun joined
[18:57] <lizmat> 1091 for me

[20:30] *** sena_kun left
[20:41] *** finanalyst joined
[20:51] *** finanalyst left
[21:42] *** MasterDuke joined
[22:53] *** tbrowder left
[22:55] *** tbrowder joined
