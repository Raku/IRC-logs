[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:30] *** nine left
[01:30] *** nine joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:53] *** finanalyst joined
[08:04] *** finanalyst left
[09:24] *** sena_kun joined
[11:58] <Geth> ¦ rakudo/main: 40c7b77fc9 | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[11:58] <Geth> ¦ rakudo/main: Streamline NativeCall (part 1/N)

[11:58] <Geth> ¦ rakudo/main: 

[11:58] <Geth> ¦ rakudo/main: - reorganizing code with similar functionality in clear sections

[11:58] <Geth> ¦ rakudo/main: - limit the scope of the NativeCall module to parts that really

[11:58] <Geth> ¦ rakudo/main:   need to be in that scope

[11:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/40c7b77fc9

[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:12] <nine> *sigh* implementing Rakudo in Raku would be so much easier if Raku was a statically typed language >/

[12:13] <nine> :/

[12:14] <nine> RakuAST::Node has a type method that is supposed to return the type object of the value a node may yield. It hasn't been used for anything much yet, so nobody noticed that all those $.type attributes containing RakuAST::Type object or even just strings violate this contract.

[12:17] <lizmat> meh  :-(

[12:26] <nine> Of course "not anything much" is also not nothing

[12:26] <lizmat> of course not, just enough to be annoying, right ?

[12:29] <nine> Of course.

[12:29] <nine> I'm gonna rename type() to return-type()

[12:35] <lizmat> why not "may-yield-type" 

[12:35] <lizmat> ?

[12:36] <nine> It's not a may. The value the node yields is guaranteed to check against that type.

[12:36] <nine> If we don't know better we just return a Mu there.

[12:36] <lizmat> my suggestion was based on your remark: "RakuAST::Node has a type method that is supposed to return the type object of the value a node may yield"

[12:37] <nine> That's a "may" in the sense of "is allowed to"

[12:37] <lizmat> ok, understood: language is hard  :-)

[12:38] <lizmat> whether natural or programming :)

[12:38] <nine> Of course that leaves "yields-type" as an option. But "return-type" is closer to the terminology in the old frontend (where it's just "returns") and return-type is unique enough for a simple search&replace if someone feels strongly enough to rename it once more.

[12:38] <lizmat> for me that would be a reason to call it differently from the old frontend

[12:39] <lizmat> to ease searching for "old" behaviour and "new" behaviour

[12:39] <lizmat> *name it differently

[12:42] <Geth> ¦ rakudo/main: 3041066496 | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[12:42] <Geth> ¦ rakudo/main: Streamline NativeCall (part 2/N)

[12:42] <Geth> ¦ rakudo/main: 

[12:42] <Geth> ¦ rakudo/main: - finding the right name mangler

[12:42] <Geth> ¦ rakudo/main: - abstract checking into a helper sub for convenience

[12:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3041066496

[12:43] <nine> But old and new frontend are completely separated in different directory trees? There cannot be any confusion what you're looking at. Using different names for the same concepts is a great way to make code harder to understand.

[12:52] <gfldex> m: sub foo(Int() @ints) { dd @ints }; foo [1,2,3];

[12:52] <camelia> rakudo-moar 304106649: OUTPUT: «Type check failed in binding to parameter '@ints'; expected Positional[Int(Any)] but got Array ([1, 2, 3]).  You have to␤pass an explicitly typed array, not one that just might happen to␤contain elements of the correct type.␤  in sub foo at <tmp…»

[12:52] <gfldex> Should this ^^^ DWIM?

[12:54] <lizmat> it should probably complain at compile time, at least for now

[12:55] <gfldex> It feels inconsitent to me.

[12:56] <gfldex> Also, making it easy to use typed Arrays might get folk to use them. :->

[12:56] <lizmat> well, it feels largely as NYI to me  :-)

[13:09] <Geth> ¦ rakudo/main: bf81c62f9c | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[13:09] <Geth> ¦ rakudo/main: Streamline NativeCall (part 3/N)

[13:09] <Geth> ¦ rakudo/main: 

[13:09] <Geth> ¦ rakudo/main: - move "use dispatcher flag" to constant section

[13:09] <Geth> ¦ rakudo/main: - minor tweaks in non-dispatcher code (old/JVM backend)

[13:09] <Geth> ¦ rakudo/main: 

[13:09] <Geth> ¦ rakudo/main: I wonder whether this shouldn't be replaced by backend dependent

[13:09] <Geth> ¦ rakudo/main: pre-processing source code by now

[13:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bf81c62f9c

[13:21] <nine> Few compile time exceptions in the RakuAST frontend contain a line number. One would have to supply a :line argument to the exception constructor to get that. Getting that line number is a few lines of code and I wouldn't want to repeat them all over the place. Luckily actually building the exception is done by build-exception.

[13:22] <nine> And adding the exception to the resolver is done again by a centralized add-sorry or add-worry. Problem is: build-exception is a method on the resolver and that one doesn't have access to the node throwing the exception.

[13:22] <lizmat> yup  :-(

[13:22] <nine> Now add-sorry and add-worry are on the node itself (provided by CheckTime role) but they only see the fully built exception

[13:22] <lizmat> fixing that will fix a *lot* of tests

[13:30] <Geth> ¦ rakudo/main: 4a64b3af22 | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[13:30] <Geth> ¦ rakudo/main: Streamline NativeCall (part 4/N)

[13:30] <Geth> ¦ rakudo/main: 

[13:30] <Geth> ¦ rakudo/main: - replace all ~~ to nqp::istype() where possible

[13:30] <Geth> ¦ rakudo/main: - replace test for Buf | Blob by just Blob as Bufs are Blobs

[13:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4a64b3af22

[13:53] <Geth> ¦ rakudo/main: ee52581423 | (Stefan Seifert)++ | 6 files

[13:53] <Geth> ¦ rakudo/main: RakuAST: Rename RakuAST::Node's type() to return-type()

[13:53] <Geth> ¦ rakudo/main: 

[13:53] <Geth> ¦ rakudo/main: type() is supposed to return a type object for the type of values a node

[13:53] <Geth> ¦ rakudo/main: may yield. However since this hasn't been used much, no one noticed that

[13:53] <Geth> ¦ rakudo/main: lots of subclasses have attributes called "$.type" that usually hold

[13:53] <Geth> ¦ rakudo/main: RakuAST::Type nodes or even just strings.

[13:53] <Geth> ¦ rakudo/main: 

[13:53] <Geth> ¦ rakudo/main: Rather than going through the whole code-base and finding new names for

[13:53] <Geth> ¦ rakudo/main: all these attributes rename the method in the base class to something

[13:53] <Geth> ¦ rakudo/main: more unique: return-type(). This uniqueness will help if someone comes up

[13:53] <Geth> ¦ rakudo/main: with an even better name.

[13:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ee52581423

[13:53] <Geth> ¦ rakudo/main: fcbd5303e4 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[13:53] <Geth> ¦ rakudo/main: RakuAST: detect type mismatches in assignments at compile time

[13:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fcbd5303e4

[13:54] <nine> We really have 3 ways to define the return type of a sub?!

[13:54] <lizmat> sub a of Int

[13:55] <lizmat> sub a(--> Int)

[13:55] <nine> Oh wait, it's 4

[13:55] <lizmat> sub a() returns Int

[13:55] <lizmat> which one did I miss 

[13:55] <lizmat> ?

[13:55] <nine> my Int sub a()

[13:56] <lizmat> TIL   but yeah, that makes sense

[13:56] <lizmat> never used that one  :-)

[13:57] <lizmat> I feel that the --> foo syntax is clearest, as it makes clear it's part of the signature of the block, not actually of the block itself

[13:59] <nine> I'm close to refusing to implement that...

[14:00] <lizmat> --> ?

[14:05] <nine> It's just one of the syntactic features that need not have been. I don't see it contributing any value to the language while it's yet again a special case that the compiler has to support and one more thing a user has to learn.

[14:07] <nine> When implementing all of this I often get reminded of AlexDaniel. While he was needlessly agressive and inconsiderate on the subject matter he was not always completely wrong. Raku is a huge language and that's not always a benefit for the user.

[14:11] <ab5tract> unfortunately `-->` is also the form that I've seen most often

[14:12] <ab5tract> but yeah, four separate syntaxes is mega-YAGNI

[14:13] <ab5tract> YAGNI was perhaps an under-appreciated principle during certain phases of Raku's design :)

[14:15] <nine> To be clear: I have no quarrel with -->. It's "my Int sub" that I don't see the point of.

[14:17] <nine> Also having both of(Int) and returns(Int) seems superfluous

[14:17] <nine> They do exactly the same

[14:20] <nine> As to the cost for the user: besides having to know all of these variants to be able to properly read code, just look at all the checks for conflicting declarations we do. When there are multiple ways to do the same you can end up with such conflicts. So you have to disallow using multiple of these ways. Disallowing something means adding one more rule to the language

[14:20] * gfldex .o( approved of redundant ministry of redundancy approval )

[14:24] <[Coke]> This seems like great items to push for cleanup in future language versions.

[14:25] <[Coke]> And for us to eventually push for dropping versions of languages from monthly compiler releases. (having last supported versions of 6.c would eventually be nice)

[14:25] <nine> alongside has $x; (incidentally also something RakuAST does not yet support)

[14:25] <ugexe> deprecate everything

[14:32] <ab5tract> has $x infuriated

[14:32] <ab5tract> Infuriates me to a probably unreasonable degree

[14:34] <ab5tract> “It makes it easier to onboard people into OO” ??? No! Teaching them the actual freaking syntax makes it easier to onboard

[14:40] <gfldex> I agree with redundant redundant redundancy to be too much of a good thing. But I would keep `my Int sub foo() {}` and `sub foo(--> Int) {}` because a) Huffman-coding and b) consistency. I acutally like `my Int` because that's the same way then declaring type constrains on containers. It also allows to put the important thing at the front (when the return value type is important).

[14:43] <nine> Except that it actually conflicts with the use for container types. In my Int $foo; The Int is a type constraint on the declared $foo; In my Int sub foo however, the &foo declared here is still a Sub object. It's type is unaffected. Instead its signature is modified.

[14:43] <Geth> ¦ rakudo/main: 622f58adcb | (Stefan Seifert)++ | src/Raku/Actions.nqp

[14:43] <Geth> ¦ rakudo/main: RakuAST: support my Foo sub ... syntax for return type declaration

[14:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/622f58adcb

[14:43] <Geth> ¦ rakudo/main: b50fb0c4a5 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[14:43] <Geth> ¦ rakudo/main: RakuAST: prohibit multiple type constraints on a single parameter

[14:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b50fb0c4a5

[14:43] <nine> 1059

[14:54] <lizmat> confirmed  :-)

[15:01] <ab5tract> that's a huge issue with moving forward.. each feature is appreciated by at least someone, it seems :/

[15:39] *** finanalyst joined
[15:49] <[Coke]> Good thing we have a committee

[16:03] <ab5tract> it helps, but no matter what one proposes removing there is pushback from the community. so even if it's a committee that decides, it seems that there will be > 0 people disappointed, disaffected, or disgusted

[16:06] <Geth> ¦ rakudo: ab5tract self-assigned where-clause in subset does not work with Block/Callable https://github.com/rakudo/rakudo/issues/5175

[16:19] <lizmat> fwiw, if there's one way to specify return constraint, I'd vote for the "returns" trait

[16:20] <lizmat> it is the most verbose, it's place in the syntax is confusing, and it would simplify the grammar significantly  :-)

[16:27] <ab5tract> "it's place in the syntax is confusing," -- is that an argument for or against? :)

[16:28] <nine> Obligatory xkcd: https://xkcd.com/1172/

[16:29] <lizmat> :-)

[17:34] <Geth> ¦ rakudo/main: 1278c5bbb6 | (Stefan Seifert)++ | 2 files

[17:34] <Geth> ¦ rakudo/main: RakuAST: don't absolutify file names of compunit

[17:34] <Geth> ¦ rakudo/main: 

[17:34] <Geth> ¦ rakudo/main: Several spectests expect file names in backtraces to be relative.

[17:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1278c5bbb6

[17:34] <nine> 1062 # this is one of these super surprising ones

[17:35] <nine> 3 lines deleted, 3 more passing spec test files

[17:53] <nine> m: class Foo { has $; }

[17:53] <camelia> rakudo-moar 1278c5bbb: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot declare an anonymous attribute␤at <tmp>:1␤------> class Foo { has $⏏; }␤    expecting any of:␤        constraint␤»

[17:53] <nine> Ok fair enough. But I really want to!

[17:53] <nine> m: class Foo { has $!; }

[17:53] <camelia> rakudo-moar 1278c5bbb: ( no output )

[17:54] <nine> I guess bang is Raku's sudo

[17:57] <nine> If you want to confuse people even more, adopt a healthy attitude of Whatever:

[17:57] <nine> m: class Foo { has $*foo = 1; method foo() { $!foo }; }; note Foo.new.foo

[17:57] <camelia> rakudo-moar 1278c5bbb: OUTPUT: «1␤»

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:41] <lizmat> 1062 confirmed!

[18:50] <lizmat> nine: but one fail in make test: Special compiler variable $?FILE   expected "EVAL_1", got "/foo/bar/rakudo/EVAL_1"

[19:02] <lizmat> feels like changing the test would be wrong

[19:02] <lizmat> in t/12-rakuast/var.rakutest

[19:03] <lizmat> nine ^^

[19:07] <nine> Huh....I did fix that test

[19:10] <nine> ok 1 - Special compiler variable $?FILE

[19:10] <nine> # Subtest: Special compiler variable $?FILE

[19:10] <nine> And I'm on 2024.04-26-g1278c5bbb with no local modifications

[19:11] <nine> Oh, it fails without RAKUDO_RAKUAST=1! But then "/home/nine/rakudo/EVAL_1" is clearly wrong, isn't it?

[19:13] <lizmat> I would say so, yes

[19:14] <lizmat> this is odd: NativeCall has:

[19:14] <lizmat> multi sub postcircumfix:<[ ]>(CArray:D \array) is export(:DEFAULT, :types) {

[19:14] <lizmat>     array.ZEN-POS

[19:14] <lizmat> }

[19:15] <lizmat> but I can't find any mention of ZEN-POS in the core?

[19:17] *** linkable6_ left
[19:17] *** evalable6_ left
[19:18] *** linkable6_ joined
[19:19] *** evalable6_ joined
[19:20] <Geth> ¦ rakudo/main: d5eb39f71b | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[19:20] <Geth> ¦ rakudo/main: Streamline NativeCall (part 5/N)

[19:20] <Geth> ¦ rakudo/main: 

[19:20] <Geth> ¦ rakudo/main: - streamline the Native role

[19:20] <Geth> ¦ rakudo/main: - give guess_library_name a proto as a single export point

[19:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d5eb39f71b

[19:29] <ugexe> https://github.com/rakudo/rakudo/commit/5391c3db3b3d2533c718f7843aee69db86fcb1c1

[19:31] <ugexe> deleted in https://github.com/rakudo/rakudo/commit/ca7bc91e71afe9373b57cd629215f843e8026df1

[19:32] <nine> lizmat giveth and lizmat taketh away

[19:32] <lizmat> I wonder if that was intentional

[19:32] <lizmat> as ZEN-KEY still exists

[19:33] <ugexe> the commit message doesn't mention it being intentional, so we can only assume it wasnt

[19:34] <lizmat> yet nobody appears to have missed it in the past 3+ years

[19:36] <lizmat> anyways, it is about to be eradicated from NativeCall

[19:55] <Geth> ¦ rakudo/main: 0c9e990d40 | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[19:55] <Geth> ¦ rakudo/main: Streamline NativeCall (part 6/N)

[19:55] <Geth> ¦ rakudo/main: 

[19:55] <Geth> ¦ rakudo/main: - replace reference to .ZEN-POS by nqp::decont(), as that was the

[19:55] <Geth> ¦ rakudo/main:   original meaning of .ZEN-POS before it was removed with ca7bc91e7

[19:55] <Geth> ¦ rakudo/main: - some variable renaming for clarity

[19:55] <Geth> ¦ rakudo/main: - some variable removal

[19:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0c9e990d40

[19:55] <lizmat> afk&

[21:05] *** finanalyst left
[22:04] <lizmat> m: sub postfix:<π>($a) { $a * π }; say 2π   # wonders whether that should be in core

[22:04] <camelia> rakudo-moar 0c9e990d4: OUTPUT: «6.283185307179586␤»

[22:14] <[Coke]> that opens the door to a bunch of stuff, I would start from no

[22:16] <[Coke]> m: say τ

[22:16] <camelia> rakudo-moar 0c9e990d4: OUTPUT: «6.283185307179586␤»

[22:16] <[Coke]> m: say e

[22:16] <camelia> rakudo-moar 0c9e990d4: OUTPUT: «2.718281828459045␤»

[22:43] *** sena_kun left
[23:15] <[Coke]> eh. there's probably a way to do that consistently across constants. +1 from me.

