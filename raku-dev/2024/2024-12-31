[00:08] <SmokeMachine> any sugestion on how to fix that?

[00:15] <lizmat> get nqp::getdynlex to do all the work that &DYNAMIC does

[00:15] <lizmat> sleep&

[00:20] <SmokeMachine> should that be changed on Cro? I was trying to avoid that...

[00:30] *** finanalyst left
[04:47] *** guifa left
[08:16] *** finanalyst joined
[10:18] *** sjn left
[10:18] *** sjn joined
[11:24] *** sena_kun joined
[12:30] *** guifa joined
[13:09] *** guifa left
[13:13] *** sjn left
[13:20] *** sjn joined
[13:39] *** sjn left
[13:40] *** sjn joined
[14:23] <ab5tract> SmokeMachine: I poked at this a bit last night and couldn’t fully reconcile what’s going wrong

[14:26] <ab5tract> ugexe:  it does look like there is still a subtle bug in the candidate filtering for revision gating with coercion types

[14:27] <ab5tract> A surface level solution is to fully qualify all of the argument types (other than the slurpy)

[14:29] <ab5tract> But I’ll also look into what’s going wrong underneath. The question is, do we need that deeper patch in place prior to merging or is the surface patch Good Enough For  The Meanwhile?

[14:30] <ab5tract> FWIW, having single arg callers go through the slurpy is probably subtly wrong because the input will be returned as a single value array..

[14:32] * ab5tract just now sees R#5749 😅

[14:32] <linkable6> R#5749 [closed]: https://github.com/rakudo/rakudo/issues/5749 "none of these signatures matches" output is confusing when using revision-gated trait

[14:34] <ab5tract> I was trying to verify if this was revision gating specific last night but couldn’t find an incantation to demonstrate it wasn’t, so I would be curious to see that when you get a chance ugexe

[16:51] <[Tux]> Rakudo v2024.12-33-ge7f9223c5 (v6.d) on MoarVM 2024.12-10-g1c2ea87e7

[16:51] <[Tux]> csv-test-xs-20      0.143 -  0.146

[16:51] <[Tux]> csv-ip5xs           0.259 -  0.259

[16:51] <[Tux]> test-t --race       0.277 -  0.280

[16:51] <[Tux]> test-t              0.413 -  0.415

[16:51] <[Tux]> csv-ip5xs-20        1.088 -  1.135

[16:51] <[Tux]> test-t-20 --race    1.248 -  1.285

[16:51] <[Tux]> csv-parser          1.424 -  1.503

[16:51] <[Tux]> test                1.833 -  1.881

[16:51] <[Tux]> test-t-20           4.999 -  5.051

[16:51] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[16:52] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 53177c6698 | (Nick Logan)++ (committed by ab5tract) | 3 files

[16:52] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Deprecate IO subs that operate on multiple paths in 6.e

[16:52] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[16:52] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: While convienient, being able to pass multiple paths to e.g. &rmdir

[16:52] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: is problematic because there isn't a blessed way to handle what to

[16:52] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: do when an exception or failure occurs, i.e. should it try to rmdir

[16:52] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: every entry even if some things fail, or stop on the first failure?

[16:52] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: <…commit message has 10 more lines…>

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/53177c6698

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 6e7221a6bd | ab5tract++ | 3 files

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Apply revision-gating to chmod/chown/rmdir/unlink

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: The idea is that the semantics of providing multiple-path

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: versions of these subs is a mistake.

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: As currently implemented, this patch leaves the behavior the same

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: for all previous language versions and adding a deprecation message

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: <…commit message has 6 more lines…>

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/6e7221a6bd

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 6a1c0dd9f2 | ab5tract++ | src/core.c/io_operators.rakumod

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Solidify all argument types to resolve dispatch ambiguity

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Also ensure that single argument editions return their inputs.

[16:53] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/6a1c0dd9f2

[16:59] *** gfldex joined
[16:59] *** gfldex left
[16:59] *** gfldex joined
[18:10] *** sjn left
[18:11] *** sjn joined
[18:19] *** sena_kun left
[18:24] *** sjn left
[18:24] *** sjn joined
[18:41] *** sjn left
[18:43] *** sjn joined
[18:51] *** sjn left
[18:52] *** sjn joined
[21:15] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: bd47ea7d2e | ab5tract++ | src/core.c/io_operators.rakumod

[21:15] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Back to more multi candidates to avoid ambiguity

[21:15] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/bd47ea7d2e

[21:30] *** sjn left
[21:32] *** sjn joined
[21:50] *** guifa joined
[21:58] *** sjn left
[22:00] *** sjn joined
[22:20] <ugexe> ab5tract: the single path candidates for unlink, rmdir (and maybe others?) also need to continue returning the path for 6.c and 6.d

[22:47] <ab5tract> rmdir needs to return the result of the rmdir operation

[22:47] <ab5tract> I learned this while fixing some broken rmdir tests :)

[22:48] <ab5tract> The expectation is a Bool

[22:48] <ab5tract> I assume this is the case for unlink as well, but I'll double check

[22:53] <ab5tract> m: dd unlink("/tmp/nonexistent")

[22:53] <camelia> rakudo-moar e7f9223c5: OUTPUT: «["/tmp/nonexistent"]␤»

[22:53] <ab5tract> m: dd rmdir("/tmp/nonexistent")

[22:53] <camelia> rakudo-moar e7f9223c5: OUTPUT: «[]␤»

[22:53] <ab5tract> wtf...

[22:53] <ab5tract> ah, ok, so it returns the path iff it succeeded

[22:54] <ab5tract> m: dd  "/tmp/nonexistent".IO.rmdir

[22:54] <camelia> rakudo-moar e7f9223c5: OUTPUT: «Failure.new(exception => X::IO::Rmdir.new(path => "/tmp/nonexistent", os-error => "Failed to rmdir: no such file or directory", error-code => Any))␤»

[22:55] <ab5tract> m: dd "/tmp/nonexistent".IO.unlink

[22:55] <camelia> rakudo-moar e7f9223c5: OUTPUT: «Bool::True␤»

[23:10] *** finanalyst left
[23:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: bbdb8f29e0 | ab5tract++ | src/core.c/io_operators.rakumod

[23:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Where the waterbed leaves us...

[23:23] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/bbdb8f29e0

[23:24] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 18be884554 | ab5tract++ | src/core.c/io_operators.rakumod

[23:24] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Where the waterbed leaves us...

[23:24] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/18be884554

[23:26] <ab5tract> slurpees seem to be a bit of a weak spot either in revision gating or dispatch disambiguation at large

[23:41] *** sjn left
[23:43] *** sjn joined
