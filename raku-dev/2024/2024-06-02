[08:51] <ab5tract> https://github.com/rakudo/rakudo/issues/5589

[08:52] <ab5tract> This one is so interesting.. haven’t been able to poke at it (left the laptop at home)

[08:53] <ab5tract> But the | operation on the array results in nothing, but earlier | is used against the method chain to obtain the parameters.. and this seems to work without issue

[09:16] *** finanalyst joined
[09:21] *** sena_kun joined
[10:55] <finanalyst> .tell lizmat just sent you an email about C<> & V<> markup that been config'ed

[10:55] <tellable6> finanalyst, I'll pass your message to lizmat

[10:57] <lizmat_> finanalyst: so if I understand correctly, you'd want all markup to be always parsed and disregard any :allow() during parsing ?

[10:57] <tellable6> 2024-06-01T19:10:20Z #raku-dev <patrickb> lizmat: https://github.com/rakudo/rakudo/commit/7766fbbd6e13d54ad011a1967c3fbc59e821f96c#r142633905

[10:57] <tellable6> 2024-06-02T10:55:20Z #raku-dev <finanalyst> lizmat just sent you an email about C<> & V<> markup that been config'ed

[10:59] <finanalyst> problem with allow  is that it can now be configured with a config for a markup code and for a block, 

[10:59] <lizmat_> ok, so you're saying it's become the renderers responsibility

[10:59] *** lizmat_ left
[10:59] <finanalyst> Also, we had a discussion that meta data should handled by Renderer

[11:00] *** lizmat joined
[11:01] <lizmat> ok, gotcha... am in the middle of patrickb's bug report, will look at this after that

[11:01] <finanalyst> understood

[11:25] *** finanalyst left
[11:46] <Geth> ¦ rakudo/main: 9502bcbbb2 | (Elizabeth Mattijsen)++ | 3 files

[11:46] <Geth> ¦ rakudo/main: Hopefully final fix for CPP name mangling

[11:46] <Geth> ¦ rakudo/main: 

[11:46] <Geth> ¦ rakudo/main: - copied the original implementation to a new test file

[11:46] <Geth> ¦ rakudo/main: - made new cpp_param_letter implementation "our" for testability

[11:46] <Geth> ¦ rakudo/main: - added tests to run all possible types

[11:46] <Geth> ¦ rakudo/main: - compare results of original with new implementation

[11:46] <Geth> ¦ rakudo/main: - found and fixed some discrepancies

[11:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9502bcbbb2

[11:46] <lizmat> patrickb ^^

[13:33] <patrickb> lizmat: Thanks! Sadly CI still fails with the same error. Maybe I can have a look in the late evening. 

[14:01] *** finanalyst joined
[15:56] <lizmat> patrickb: then I guess my assumption abour $P / $R / $K being always empty, is incorrect

[16:24] <Geth> ¦ rakudo/main: cc52ff1251 | (Elizabeth Mattijsen)++ | 2 files

[16:24] <Geth> ¦ rakudo/main: Restrore NativeCall::Compiler::MSVC to its original state

[16:24] <Geth> ¦ rakudo/main: 

[16:24] <Geth> ¦ rakudo/main: And adapt tests for it accordingly.  Mostly to see how CI will

[16:24] <Geth> ¦ rakudo/main: react to this.

[16:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cc52ff1251

[16:24] <lizmat> patrickb ^^

[16:40] <Geth> ¦ rakudo/main: 946ab9024a | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[16:40] <Geth> ¦ rakudo/main: RakuAST: don't flatten markup inside C<>

[16:40] <Geth> ¦ rakudo/main: 

[16:40] <Geth> ¦ rakudo/main: Let a renderer make that decision

[16:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/946ab9024a

[17:23] <patrickb> https://dev.azure.com/Rakudo/rakudo/_build/results?buildId=5817&view=results

[17:23] <patrickb> lizmat: Now it succeeded 

[17:42] <lizmat> ok, then I'm gonna leave it at that

[17:44] <Geth> ¦ rakudo/main: c99d4369a4 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[17:44] <Geth> ¦ rakudo/main: RakuAST: don't flatten markup inside V<> either

[17:44] <Geth> ¦ rakudo/main: 

[17:44] <Geth> ¦ rakudo/main: Let a renderer make that decision, as per the 2.0 rakudoc

[17:44] <Geth> ¦ rakudo/main: specification

[17:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c99d4369a4

[18:22] *** finanalyst left
[18:59] <patrickb> lizmat: Thanks for wading through this.

[19:00] <lizmat> well, I caused it, so it's only fair

[19:00] <patrickb> Do you think this is worth a point release?

[19:00] <patrickb> Still annoying;-)

[19:01] <lizmat> not sure

[19:02] <lizmat> it wasn't borked in 2024.04 right ?

[19:03] <patrickb> Nope. Currently prevents me doing the binaries. I could either fake something up to make the build go through, or a point release.

[19:03] <lizmat> then I guess a point release is in order :-(

[19:06] <patrickb> jdv: Can you do a point release containing lizmats MSVC native call fixes?

[19:07] <patrickb> lizmat: Could you create a branch containing only the relevant changes? i.e. 2024.05 + cherry-picking the respective commits?

[19:08] <lizmat> yeah, can do

[19:09] <patrickb> Thanks!

[19:52] <Geth> ¦ rakudo/main: 1a61ed025e | (Elizabeth Mattijsen)++ | 2 files

[19:52] <Geth> ¦ rakudo/main: RakuAST: allow for =formula, as per rakudoc 2.0

[19:52] <Geth> ¦ rakudo/main: 

[19:52] <Geth> ¦ rakudo/main: The reason this didn't work is because =formula shares the prefix

[19:52] <Geth> ¦ rakudo/main: with =for.  Fixed for now by adding a specific token for =formula.

[19:52] <Geth> ¦ rakudo/main: 

[19:52] <Geth> ¦ rakudo/main: Turns out the legacy grammar **also** has an issue with any

[19:52] <Geth> ¦ rakudo/main: abbreviated rakudoc items that share the prefix with a directive,

[19:52] <Geth> ¦ rakudo/main: such as =beginna and =enda.  I wonder why nobody found this to be

[19:52] <Geth> ¦ rakudo/main: a problem before in the past 10+ years: I guess a general fix is

[19:52] <Geth> ¦ rakudo/main: just not that easy, *or* would slow down parsing in general too

[19:52] <Geth> ¦ rakudo/main: much.

[19:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1a61ed025e

[20:05] <Geth> ¦ rakudo/2024.05.1: 4 commits pushed by (Elizabeth Mattijsen)++

[20:05] <Geth> ¦ rakudo/2024.05.1: 70b8b7c826 | Fix discrepancy introduced in 7766fbbd6e13d54

[20:05] <Geth> ¦ rakudo/2024.05.1: 86799cfd83 | Make sure the prefix is prefixed

[20:05] <Geth> ¦ rakudo/2024.05.1: 9d2d79b89e | Hopefully final fix for CPP name mangling

[20:05] <Geth> ¦ rakudo/2024.05.1: b5ae529f64 | Restrore NativeCall::Compiler::MSVC to its original state

[20:05] <Geth> ¦ rakudo/2024.05.1: review: https://github.com/rakudo/rakudo/compare/70b8b7c826eb^...b5ae529f6426

[20:05] <lizmat> patrickb jdv ^^

[20:16] <lizmat> afk&

[21:53] <Geth> ¦ nqp/main: e7d1bbe3df | (Daniel Green)++ | src/vm/js/Operations.nqp

[21:53] <Geth> ¦ nqp/main: One step toward maybe unbreaking the JS build

[21:53] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/e7d1bbe3df

