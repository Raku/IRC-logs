[00:00] <timo> we do have things like trait_mod:is<blah> and friends but these have a word between the : and <...>

[00:00] <timo> and of course the statement:sym<if> and such in the grammar

[00:01] <ab5tract> I was thinking along the lines of porting the `%h<key>:kv` behavior

[00:01] <timo> right, that applies to all kinds of operators, so a map operator could be made to take these

[00:01] <ab5tract> but maybe it's just as good to provide the candidates you already mentioned

[00:04] <ab5tract> hmm...  an infix:<map> ... very intriguing :)

[00:05] <timo> m: multi sub postcircumfix:<🗺️ 🗺️>($on, $with) { $on.map($with) }; multi sub postcircumfix:<🗺️ 🗺️>($on, $with, :$flat!) { $flat ?? $on.flatmap($with) !! $on.map($with) }; multi sub postcircumfix:<🗺️ 🗺️>($on, $with, :$deep!) { $deep ?? $on.deepmap($with) !! $on.map($with) }; .say for [[1, "a"], [2, "b"], [3, "c"]]🗺️ * ~ "lol" 🗺️:flat; .say for [[1, "a"], [2,

[00:05] <timo> "b"], [3, "c"]]🗺️ * ~ "lol" 🗺️:deep;

[00:05] <camelia> rakudo-moar dd45859fe: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in array composer; couldn't find final ']' (corresponding starter was at line 1)␤at <tmp>:1␤------>  ~ "lol" 🗺️:flat; .say for [[1, "a"], [2,<HERE><EOL>␤    expecting any…»

[00:05] <timo> ah damn too long

[00:06] <ab5tract> EOLostThePlot

[00:07] <timo> m: multi sub postcircumfix:<🗺️ 🗺️>($on, $w) { $on.map($w) }; multi sub postcircumfix:<🗺️ 🗺️>($on, $w, :$flat!) { $flat ?? $on.flatmap($w) !! $on.map($w) }; multi sub postcircumfix:<🗺️ 🗺️>($on, $w, :$deep!) { $deep ?? $on.deepmap($w) !! $on.map($w) }; my @a = [1, "a"], [2, "b"], [3, "c"]; .say for @a🗺️ * ~ "lol" 🗺️:flat; .say for @a🗺️ * ~ "lol"

[00:07] <timo> 🗺️:deep;

[00:07] <camelia> rakudo-moar dd45859fe: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in postcircumfix:sym<🗺️ 🗺️>; couldn't find final '🗺️' (corresponding starter was at line 1)␤at <tmp>:1␤------> * ~ "lol" 🗺️:flat; .say for @a🗺️ * ~ "lol…»

[00:07] <timo> nooooo

[00:07] <timo> m: multi sub postcircumfix:<🗺️ 🗺️>($on, $w) {$on.map($w)}; multi sub postcircumfix:<🗺️ 🗺️>($on, $w, :$flat!) {$flat ?? $on.flatmap($w) !! $on.map($w)}; multi sub postcircumfix:<🗺️ 🗺️>($on, $w, :$deep!) {$deep ?? $on.deepmap($w) !! $on.map($w)}; my @a = [1,"a"],[2,"b"],[3,"c"]; .say for @a🗺️ *~"!" 🗺️:flat; .say for @a🗺️ *~"?" 🗺️:deep;

[00:08] <camelia> rakudo-moar dd45859fe: OUTPUT: «WARNINGS for <tmp>:␤1 a!␤2 b!␤3 c!␤[1? a?]␤[2? b?]␤[3? c?]␤Useless use of "~" in expression "*~\"?\"" in sink context (line 1)␤Useless use of "~" in expression "*~\"!\"" in sink context (line 1)␤»

[00:10] <timo> i'm not sure why it's behaving like that 

[00:10] <timo> like, it's doing what i expect it to, it's mapping flat first, and deep second, but the warnings though?

[00:14] <ab5tract> EEMOJITOOPOWERFULDOWNGRADEORCRY

[00:14] <ab5tract> which of cours triggers EERRTXT2LNG

[00:15] <ab5tract> timo: does it break that way locally?

[00:17] <timo> m: multi sub postcircumfix:<☺ ☺>($on, $w) {$on.map($w)}; multi sub postcircumfix:<☺ ☺>($on, $w, :$flat!) {$flat ?? $on.flatmap($w) !! $on.map($w)}; multi sub postcircumfix:<☺ ☺>($on, $w, :$deep!) {$deep ?? $on.deepmap($w) !! $on.map($w)}; my @a = [1,"a"],[2,"b"],[3,"c"]; .say for @a☺ *~"!" ☺:flat; .say for @a☺ *~"?" ☺:deep;

[00:17] <camelia> rakudo-moar dd45859fe: OUTPUT: «WARNINGS for <tmp>:␤1 a!␤2 b!␤3 c!␤[1? a?]␤[2? b?]␤[3? c?]␤Useless use of "~" in expression "*~\"!\"" in sink context (line 1)␤Useless use of "~" in expression "*~\"?\"" in sink context (line 1)␤»

[00:18] <timo> this should be more copy-paste-friendly

[00:21] <timo> it doesn't throw "useless use" warnings when i make it a curly block with $_ instead of a WhateverCode

[00:23] <timo> m: sub postcircumfix:<X[ ]X>($on, $w) { say "yop"; $on.map($w) }; say [1,2,3]X[* ~ "hi"]X

[00:23] <camelia> rakudo-moar dd45859fe: OUTPUT: «WARNINGS for <tmp>:␤yop␤(1hi 2hi 3hi)␤Useless use of "~" in expression "* ~ \"hi\"" in sink context (line 1)␤»

[00:24] <timo> not related to using silly emoji and stuff, and also triggers without an adverb

[00:26] <ab5tract> m: sub infix:<map>($inv, &block, :$flat!) { $inv.flatmap: &block }; dd [[1,2],[3,4]] map:flat { $_.map(*+1) }

[00:26] <camelia> rakudo-moar dd45859fe: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> map: &block }; dd [[1,2],[3,4]] map:flat<HERE> { $_.map(*+1) }␤    expecting any of:␤     …»

[00:27] <ab5tract> ^^ the semantics my druthers dream of

[00:27] <ab5tract> m: sub infix:<map>($inv, &block, :$flat!) { $inv.flatmap: &block }; dd [[1,2],[3,4]] map { $_.map(*+1) } :flat

[00:27] <camelia> rakudo-moar dd45859fe: OUTPUT: «(2, 3, 4, 5).Seq␤»

[00:27] <ab5tract> ^^ the way it works

[00:27] <ab5tract> m: sub infix:<map>($inv, &block, :$flat!) { $inv.flatmap: &block }; dd [[1,2],[3,4]] map:flat, { $_.map(*+1) }

[00:27] <camelia> rakudo-moar dd45859fe: OUTPUT: «Type check failed in binding to parameter '&block'; expected Callable but got Pair (:flat)␤  in sub infix:<map> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:28] <ab5tract> That's probably a bit of an infix quirk.. I wonder what it would take to get that functional

[00:29] <ab5tract> m: Q| sub postcircumfix:<X[ ]X>($on, $w) { say "yop"; $on.map($w) }; say [1,2,3]X[* ~ "hi"]X |.AST.EVAL.say

[00:29] <camelia> rakudo-moar dd45859fe: OUTPUT: «===SORRY!===␤Cannot find method 'to-begin-time' on object of type QAST::Op␤»

[00:30] <ab5tract> dang, I love it when that just Fixes It

[00:32] <timo> i think it makes sense that it would do that thing with the pair object up there

[00:32] <timo> you are terminatign the argument sequence with the , so it takes what it can

[00:32] <timo> i imagine if the argument asked for Any $foo it would then complain about the lack of the named argument

[00:33] <ab5tract> well my initial example doesn't inclue a `,`

[00:34] <ab5tract> that was just a stab. the preferred semantics are (1) `@a.map:flat[':'?] &block` or (2) @a map:flat &block

[00:35] <ab5tract> anyway, I should take an honest try at sleeping :)

[00:35] <timo> best of luck!

[01:42] *** librasteve_ left
[07:59] <Geth> ¦ PrettyDump/main: 447beb12a1 | (Patrick Böker)++ | lib/PrettyDump.rakumod

[07:59] <Geth> ¦ PrettyDump/main: Fix `pd` to print the results out, as it should

[07:59] <Geth> ¦ PrettyDump/main: review: https://github.com/raku-community-modules/PrettyDump/commit/447beb12a1

[07:59] <Geth> ¦ PrettyDump/main: 3010484511 | (Patrick Böker)++ | lib/PrettyDump.rakumod

[07:59] <Geth> ¦ PrettyDump/main: Make `pd` return it's input

[07:59] <Geth> ¦ PrettyDump/main: 

[07:59] <Geth> ¦ PrettyDump/main: This allows putting pd in the middle of a pipeline.

[07:59] <Geth> ¦ PrettyDump/main: review: https://github.com/raku-community-modules/PrettyDump/commit/3010484511

[07:59] <Geth> ¦ PrettyDump/main: 0aa97642af | (Patrick Böker)++ (committed using GitHub Web editor) | lib/PrettyDump.rakumod

[07:59] <Geth> ¦ PrettyDump/main: Merge pull request #2 from raku-community-modules/pd-fix-and-improvement

[07:59] <Geth> ¦ PrettyDump/main: 

[07:59] <Geth> ¦ PrettyDump/main: Pd fix and improvement

[08:00] <Geth> ¦ PrettyDump/main: review: https://github.com/raku-community-modules/PrettyDump/commit/0aa97642af

[09:40] *** sena_kun joined
[09:56] <Geth> ¦ PrettyDump/refs/tags/1.2.3: 53652f96c3 | (Patrick Böker)++ | 2 files

[09:56] <Geth> ¦ PrettyDump/refs/tags/1.2.3: 1.2.3

[09:56] <Geth> ¦ PrettyDump/refs/tags/1.2.3: review: https://github.com/raku-community-modules/PrettyDump/commit/53652f96c3

[09:57] *** sjn joined
[09:58] <Geth> ¦ PrettyDump/main: 8831aa6de3 | (Patrick Böker)++ | 2 files

[09:58] <Geth> ¦ PrettyDump/main: 1.2.3

[09:58] <Geth> ¦ PrettyDump/main: review: https://github.com/raku-community-modules/PrettyDump/commit/8831aa6de3

[10:42] <timo> MasterDuke, the graph for the sorted_keys timings is a bit silly, since you can't really see any values except for the 1M one on the left and the 10M on the right ad just the linear connection between the two makes up 99% of the plot :D

[10:49] <timo> indexingoptimized has the drawback of allocating new storage for the string ... i wonder though if we should re-do the heuristic for when we should and shouldn't be using strands for a concatenated string; in the lowered_lex + _ + 12345 case for example. we are re-using the initial string, and i assume also the string of the _ in between. so strand storage is pointer + two int for start and end +

[10:49] <timo> 32bit repetition count

[10:50] <timo> sizeof tells me it's 24 bytes

[10:51] <timo> and we'll also have a string for the number but those are likely always in_situ_8

[10:52] <timo> an MVMString is 48 bytes, which includes its header

[10:53] <timo> i should double-check if the _ in the middle really is a string of its own or not

[13:26] <patrickb> ugexe, MasterDuke, timo, nine, whoever else is interested: I'd like your feedback on https://github.com/Raku/problem-solving/issues/455 - "Revamping wrapper scripts in CURI" (It's a long one, sorry!)

[15:45] <ugexe> patrickb: just to be sure we're on the same page, you are aware you can do `zef install 'ABC:ver<0.6.13>:auth<zef:colomon>'` on windows by using double quotes right?

[15:46] <ugexe> which i would agree is not ideal either

[15:51] <patrickb> did you try that and managed to make it work?

[15:51] <patrickb> (I did not)

[15:52] <patrickb>  I tried in a powershell

[16:12] <timo> surely powershell is able to represent < and > inside of strings

[16:15] <patrickb> it is. but "zef" is a goodctually "zef.bat" And that's where the horrors are.

[16:15] <patrickb> *actually

[16:16] <timo> badctually?

[16:18] <patrickb> androidorected

[16:31] <ugexe> patrickb: ah ok it does not work. i was thinking of when i use bin/zef, not an installed zef

[16:32] <ugexe> i.e. raku -I. bin/zef 'ABC:ver<0.6.13>:auth<zef:colomon>'

[16:33] <patrickb> Yes that works (because it skips the bat/COM part).

[16:37] <patrickb> And replacing those bat files is one of the key points I want to work towards. :-)

[18:40] <ugexe> i think im just realizing (or re-realizing) that bin scripts do not get the naming "benefits" of modules that we sha1

[18:40] <ugexe> since the installed wrapper still has to retain the original file name

[19:13] <patrickb> Right. But I think it's not that bad. Scripts are usually at the end of the line. If we have to normalize the script file names some time in the future we'll mostly only break the muscle memory of the users, not much more. I guess we'll just I've with that.

[20:02] <ugexe> over the years i've actually gone in the opposite direction: i wish we would have never tried to rename files

[20:21] <lizmat> m: my str $a = "foo"; my str $a = "foo"; say $a

[20:21] <camelia> rakudo-moar dd45859fe: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$a'.␤    at <tmp>:1␤    ------> my str $a = "foo"; my str $a<HERE> = "foo"; say $a␤Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[20:21] <lizmat> m: no worries; my str $a = "foo"; my str $a = "foo"

[20:21] <camelia> rakudo-moar dd45859fe: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[20:21] <lizmat> this happens in the dispatcher

[20:22] <lizmat> fortunately, this does not happen (yet) in RakuAST

[21:09] <ab5tract> patrickb: what do you mean by breaking the muscle memory of users? How are they supposed to invoke scripts if we have renamed the script files?

[21:27] <patrickb> They'll have to adapt. I.e. relearn that the script has a slightly different name (because their filesystem doesn't support the actual name).

[21:28] <patrickb> I'd guess that a typical human user will typically figure it out.

[22:06] *** kjp left
[22:06] *** kjp_ joined
[22:43] *** kjp_ left
[22:43] *** kjp joined
[22:58] *** sena_kun left
[23:46] <ab5tract> That does sound misty read If their file system doesn’t support the actual name, how would they have gotten used to typing that name in?

[23:46] <ab5tract> *misty read = mostly reasonable

[23:48] <ab5tract> gah, the whole message is poorly worded

[23:50] <ab5tract> Rather than the question of typing the name, I am curious how they would have gotten used to referring to a script that cannot exist as a file in their FS

[23:52] <ugexe> the easiest way to think of ways to hit problems is case insensitive file systems

[23:54] <ugexe> for example on macOS you can use `ZEF`, `Zef`, etc instead of `zef` because by default the file system is not case sensitive

