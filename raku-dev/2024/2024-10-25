[09:16] *** sena_kun joined
[09:30] *** sena_kun left
[09:30] <Geth> ¦ rakudo/main: c81d9cfe86 | (Elizabeth Mattijsen)++ | 3 files

[09:30] <Geth> ¦ rakudo/main: Re-imagine .polymod as an iterator

[09:30] <Geth> ¦ rakudo/main: 

[09:30] <Geth> ¦ rakudo/main: rather than a loop with "gather".  Advantages:

[09:30] <Geth> ¦ rakudo/main: 

[09:30] <Geth> ¦ rakudo/main: - is about 1.8x as fast

[09:30] <Geth> ¦ rakudo/main: - actual iterator lives in the Rakudo::Iterator class

[09:30] <Geth> ¦ rakudo/main: - a value of 1 (aka mod identity) also stops the .polymod, instead

[09:30] <Geth> ¦ rakudo/main:   of continuing and potentially hanging

[09:30] <Geth> ¦ rakudo/main: 

[09:30] <Geth> ¦ rakudo/main: Fixes #4523

[09:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c81d9cfe86

[09:31] <Geth> ¦ roast: bd0d3e068a | (Elizabeth Mattijsen)++ | S32-num/polymod.t

[09:31] <Geth> ¦ roast: Add tests for #4523

[09:31] <Geth> ¦ roast: 

[09:31] <Geth> ¦ roast: And a test for non-integer .polymod, which apparently didn't exist yet

[09:31] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/bd0d3e068a

[14:21] <patrickb> PSA: I'm moving this weekend. I'm pretty sure I can't do the binary release today or tomorrow.

[15:58] <lizmat> patrickb: understood, safe moving!

[16:29] <Geth> ¦ rakudo/main: da291b5501 | (Elizabeth Mattijsen)++ | src/core.c/Cool.rakumod

[16:29] <Geth> ¦ rakudo/main: Simplify Cool.substr-eq candidates

[16:29] <Geth> ¦ rakudo/main: 

[16:29] <Geth> ¦ rakudo/main: Because new-disp is much better at handling these cases and it will

[16:29] <Geth> ¦ rakudo/main: make it easier to add new Str.substr-eq candidates

[16:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/da291b5501

[17:11] <[Coke]> jdv++

[17:14] <Geth> ¦ rakudo/main: c32cb4f6a3 | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[17:14] <Geth> ¦ rakudo/main: Allow *-x (aka a Callable) for position in .substr-eq

[17:14] <Geth> ¦ rakudo/main: 

[17:14] <Geth> ¦ rakudo/main: As suggested in #1720

[17:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c32cb4f6a3

[18:07] *** sena_kun joined
[19:07] *** dogbert11 left
[19:42] <ab5tract> I need a little help figuring out how to resolve core-provided libraries to their contents

[19:42] <ab5tract> Here's what I have so far:

[19:42] <ab5tract> m: my $repo = CompUnit::RepositoryRegistry.repository-for-name("core");  my $test = $repo.candidates("Test").head;  dd repo-files =>  $repo.files("lib/Test.rakumod"); $repo.distribution($test.id).meta<provides><Test><lib/Test.rakumod><file>.IO.e  ==> say()

[19:42] <camelia> rakudo-moar c32cb4f6a: OUTPUT: «:repo-files(Empty)␤False␤»

[19:43] <ab5tract> m: my $repo = CompUnit::RepositoryRegistry.repository-for-name("core");  my $test = $repo.candidates("Test").head;  dd repo-files =>  $repo.files("lib/Test.rakumod"); $repo.distribution($test.id).meta<provides><Test><lib/Test.rakumod><file>.IO  ==> say()

[19:43] <camelia> rakudo-moar c32cb4f6a: OUTPUT: «:repo-files(Empty)␤"72A28666F10B17ED5620989C3CAF776808C14EA3".IO␤»

[19:46] <ab5tract> Sorry, this is a better example:

[19:46] <ab5tract> m: my $repo = CompUnit::RepositoryRegistry.repository-for-name("core");  my $test = $repo.candidates("Test").head;  dd repo-files =>  $repo.files("lib/Test.rakumod");  dd source => $test.meta<source>, :try-read((try $test.read-dist()($test.meta<source>)) // "ERROR")

[19:46] <camelia> rakudo-moar c32cb4f6a: OUTPUT: «:repo-files(Empty)␤:source("72A28666F10B17ED5620989C3CAF776808C14EA3")␤:try-read("ERROR")␤»

[19:47] <ab5tract> in the stacktrace for `$test.read-dist`, it's clear that it is resolving `source` to an actual path, even though it's only outputting the id here

[19:47] <ab5tract> an actual nonexistent path, rather

[19:48] <ugexe> it won't be entirely simple because whatever is backing a CUR might not be a file, it could be a socket for instance. so the code is written as such

[19:48] <ugexe> source is the sha1 part of the path

[19:48] <ugexe> it needs to be prefixed with the CURI prefix and /source or some such

[19:48] <ab5tract> This is an example exception from read-dist:

[19:49] <ab5tract> Failed to open file /home/camelia/rakudo-m-inst-2/share/perl6/core/dist/72A28666F10B17ED5620989C3CAF776808C14EA3: No such file or directory

[19:49] <ab5tract> there's nothing that matches the sha1 inside of `./share/perl6` locally either

[19:49] <ugexe> i guess the first thing that im thinking is i dont know what read-dist is so i assume its an implementation detail as well

[19:51] <ugexe> $.prefix.add('sources').add($source-file-name);

[19:51] <ugexe> i guess i would have expected it there

[19:52] <ab5tract> repo.prefix.add("/sources").add($test.meta<source>).IO.slurp.say

[19:52] <ab5tract> this seems to work

[19:52] <ab5tract> thanks ugexe

[20:01] <ugexe> my $repo = CompUnit::RepositoryRegistry.repository-for-name("core"); my @files = $repo.installed.map(-> $d { $d.meta<provides>.values.map(-> $v { $v.keys[0] => $d.content($v.keys[0]).IO.absolute }) }).flat; for @files { say $_.raku }

[20:01] <evalable6> ugexe, rakudo-moar c32cb4f6a: OUTPUT: «"lib/RakuDoc/To/Text.rakumod" => "/tmp/whatever…»

[20:01] <evalable6> ugexe, Full output: https://gist.github.com/57c43b55602ca7f18562c4ddf236ffa5

[20:02] <ugexe> I'd probably write it more like that, although as i mentioned extracting a path from the results of $dist.content(...) isn't specced and won't work for e.g. CompUnit::Repository::Github

[20:03] <ugexe> also having to do the .keys[0] thing isn't ideal. it is unfortunate we mutate the meta data on install in away that changes the data structure

[20:05] <ugexe> (see https://github.com/rakudo/rakudo/pull/2778 for an attempt I made to fix that)

[20:30] <ab5tract> https://www.irccloud.com/pastebin/PxfgDP5C/

[20:32] <ab5tract> though I guess `CompUnit::*` don't live in core or else don't work this way because they don't resolve

[20:32] <ab5tract> Let me try with your version

[20:34] <ab5tract> thanks for the snippet ugexe, that's way nicer than keeping track of an a priori list of modules

[20:49] <ugexe> my snippet should continue working if we split the core modules into cohesive distributions as well

[20:50] <ugexe> the distribution stuff only works for modules/distributions, i.e. things under lib/. there is nothing for looking up stuff in src/core*

[20:51] <ugexe> you cant `use IO::Path;` for instance

[21:17] <ab5tract> right, that will require a different approach. but I think it won't be too much work to offer the option of adding a rakudo src directory for looking up files under `src/`

[21:18] <ugexe> what are you trying to do more precisely that would need to know about stuff in src?

[21:49] <ab5tract> just as an option. It's probably not super-helpful for an end user, but it should also be mostly trivial to wire up.

[21:49] <ab5tract> Wiring up the docs is probably more useful, ultimately

[23:26] *** sena_kun left
