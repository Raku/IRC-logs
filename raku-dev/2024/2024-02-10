[00:47] *** sena_kun left
[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: 155818f4ad | (Nick Logan)++ | src/core.c/CompUnit/Repository/Installation.rakumod

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: Avoid leaking repo.lock handle

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: 

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: The repo.lock file would be opened when installing a distribution,

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: but would never get closed. On windows this could manifest as an

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: error saying it can't delete repo.lock because the resource is

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: busy. This updates CURI.install to close the repo.lock file when

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: leaving the function.

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: review: https://github.com/rakudo/rakudo/commit/155818f4ad

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: e620769939 | (Nick Logan)++ | src/core.c/CompUnit/Repository/Installation.rakumod

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: Simplify unlock logic

[03:06] <Geth> ¦ rakudo/ugexe/fix-leaking-handles: review: https://github.com/rakudo/rakudo/commit/e620769939

[03:12] <Geth> ¦ rakudo: ugexe++ created pull request #5523: Avoid leaking repo.lock handle 

[03:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5523

[03:41] *** epony left
[04:50] *** epony joined
[07:34] *** [Coke] left
[07:37] *** [Coke] joined
[07:55] <patrickb> ugexe++

[08:25] <Geth> ¦ rakudo/main: 155818f4ad | (Nick Logan)++ | src/core.c/CompUnit/Repository/Installation.rakumod

[08:25] <Geth> ¦ rakudo/main: Avoid leaking repo.lock handle

[08:25] <Geth> ¦ rakudo/main: 

[08:25] <Geth> ¦ rakudo/main: The repo.lock file would be opened when installing a distribution,

[08:25] <Geth> ¦ rakudo/main: but would never get closed. On windows this could manifest as an

[08:25] <Geth> ¦ rakudo/main: error saying it can't delete repo.lock because the resource is

[08:25] <Geth> ¦ rakudo/main: busy. This updates CURI.install to close the repo.lock file when

[08:25] <Geth> ¦ rakudo/main: leaving the function.

[08:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/155818f4ad

[08:25] <Geth> ¦ rakudo/main: e620769939 | (Nick Logan)++ | src/core.c/CompUnit/Repository/Installation.rakumod

[08:25] <Geth> ¦ rakudo/main: Simplify unlock logic

[08:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e620769939

[08:25] <Geth> ¦ rakudo/main: 107810b969 | niner++ (committed using GitHub Web editor) | src/core.c/CompUnit/Repository/Installation.rakumod

[08:25] <Geth> ¦ rakudo/main: Merge pull request #5523 from rakudo/ugexe/fix-leaking-handles

[08:25] <Geth> ¦ rakudo/main: 

[08:25] <Geth> ¦ rakudo/main: Avoid leaking repo.lock handle

[08:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/107810b969

[09:36] *** sena_kun joined
[10:13] *** finanalyst joined
[10:49] <Geth> ¦ rakudo/main: 7ca96bbd90 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/Repository/Installation.rakumod

[10:49] <Geth> ¦ rakudo/main: Properly leave the install scope

[10:49] <Geth> ¦ rakudo/main: 

[10:49] <Geth> ¦ rakudo/main: Check for there actually being a concrete lock, before trying to

[10:49] <Geth> ¦ rakudo/main: unlock and close.

[10:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7ca96bbd90

[11:36] *** finanalyst left
[12:38] *** epony left
[13:41] *** epony joined
[15:20] <Geth> ¦ rakudo/main: 71c0151aa7 | (Daniel Green)++ | 2 files

[15:20] <Geth> ¦ rakudo/main: Add Int/Real coercing versions of `infix:<div|mod>`

[15:20] <Geth> ¦ rakudo/main: 

[15:20] <Geth> ¦ rakudo/main: This makes them consistent with the other operators, so e.g., `say "6"

[15:20] <Geth> ¦ rakudo/main: div 3` now prints `2`, instead of

[15:20] <Geth> ¦ rakudo/main: `Calling infix:<div>(Str, Int) will never work with any of these multi signatures:

[15:20] <Geth> ¦ rakudo/main:     (Int:D \a, Int:D \b --> Int:D)

[15:20] <Geth> ¦ rakudo/main:     (int $a, int $b --> int)

[15:20] <Geth> ¦ rakudo/main:     (uint $a, uint $b --> uint)`

[15:20] <Geth> ¦ rakudo/main: 

[15:20] <Geth> ¦ rakudo/main: Fixes https://github.com/Raku/problem-solving/issues/326

[15:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/71c0151aa7

[15:20] <Geth> ¦ rakudo/main: 3eba92f5bf | MasterDuke17++ (committed using GitHub Web editor) | 2 files

[15:20] <Geth> ¦ rakudo/main: Merge pull request #4946 from MasterDuke17/add_multis_for_div_and_mod_that_coerce_to_Int_and_Real_respectively

[15:20] <Geth> ¦ rakudo/main: 

[15:20] <Geth> ¦ rakudo/main: Add Int/Real coercing versions of `infix:<div|mod>`

[15:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3eba92f5bf

[16:45] <Geth> ¦ rakudo/main: 35760cebc3 | (Elizabeth Mattijsen)++ | src/vm/moar/dispatchers.nqp

[16:45] <Geth> ¦ rakudo/main: Streamline raku-multi-core dispatcher and helper subs

[16:45] <Geth> ¦ rakudo/main: 

[16:45] <Geth> ¦ rakudo/main: - move initialization of Positional(BindFailover) to when they're needed

[16:45] <Geth> ¦ rakudo/main: - simplify multi-junction-failover helper sub

[16:45] <Geth> ¦ rakudo/main: - add MultiDispatchCall.trivial method to faster check for trivial dispatch

[16:45] <Geth> ¦ rakudo/main: - add MultiDispatchAmbiguous.more method to faster trivial ambiguity

[16:45] <Geth> ¦ rakudo/main: - much more internal comments

[16:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/35760cebc3

[17:09] <Geth> ¦ nqp/main: cd8b1bb61f | (Elizabeth Mattijsen)++ | 2 files

[17:09] <Geth> ¦ nqp/main: Add all SIG_ELEM constants as nqp::const::xx constants

[17:09] <Geth> ¦ nqp/main: 

[17:09] <Geth> ¦ nqp/main: Allowing the prevention of a lot of initializations in the Raku

[17:09] <Geth> ¦ nqp/main: bootstrap.

[17:09] <Geth> ¦ nqp/main: 

[17:09] <Geth> ¦ nqp/main: NOTE: note sure why this has to be maintained for the MoarVM and

[17:09] <Geth> ¦ nqp/main: JVM backends seperately.

[17:09] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/cd8b1bb61f

[17:51] <jdv> note note sure:)

[17:52] <lizmat> heh   not  :-)

[18:03] *** epony left
[18:09] *** epony joined
[18:11] <ugexe> hmm, why *dont* we have something like golang/perl `defer $thing`

[18:11] <ugexe> we have LEAVE, but yeah as noted in that recent commit it isn't exactly the same

[18:15] <jdv> how exactly is it different?

[18:16] <ugexe> m: sub foo { die 666; LEAVE say 42; }; foo()

[18:16] <camelia> rakudo-moar 35760cebc: OUTPUT: «42␤666␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:16] <lizmat> you mean: when the LEAVE phaser gets activated

[18:16] <leont> defer activates on runtime, LEAVE on scope enter

[18:16] <leont> (poor words, can't find the better ones)

[18:16] <lizmat> LEAVE is actually compile time, but yes

[18:17] <lizmat> in RakuAST I thin a DEFER phaser could actually be added relatively easy

[18:17] <lizmat> *think

[18:22] <Geth> ¦ nqp/main: bdf63a606c | (Elizabeth Mattijsen)++ | 2 files

[18:22] <Geth> ¦ nqp/main: Add some more SIG_ELEM constants to nqp::const::xxx

[18:22] <Geth> ¦ nqp/main: 

[18:22] <Geth> ¦ nqp/main: These occurred inside Raku's Parameter class

[18:22] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/bdf63a606c

[19:02] <ugexe> lizmat: i'm not really seeing why your commit would have broken windows installation, but apparently it does

[19:03] <lizmat> which commit ?

[19:03] <lizmat> 7ca96bbd90 ??

[19:03] <linkable6> (2024-02-10) https://github.com/rakudo/rakudo/commit/7ca96bbd90 Properly leave the install scope

[19:06] <ugexe> yeah

[19:07] <lizmat> Failed to unlock filehandle: 158

[19:07] <ugexe> only thing i can think of is there could be something that happens when .close is called before .unlock (my PR called .close first)

[19:07] <lizmat> when I did that order, rakudo wouldn't build

[19:08] <lizmat> because .close would nullify the $!PIO and so .unlock had nothing to work on

[19:09] <ugexe> its technically not building now either though

[19:09] <ugexe> just on a different OS

[19:09] <lizmat> true

[19:11] <ugexe> i imagine reverting your commit and then changing my lines to $lock.?close and $lock.?unlock might be sufficient to get working, but i'm still curious what is going on

[19:12] <ugexe> i wonder if there could be a weird interaction between LEAVE $handle.whatever and IO::Handle::DESTROY

[19:13] <lizmat> ahhh... that might be it

[19:14] <lizmat> in any case, doing the unlock after the close, won't work

[19:14] <lizmat> unlock does nqp::unlockfh($!PIO)

[19:14] <lizmat> and close does:  $!PIO := nqp::null

[19:15] <ugexe> .?close wont work either hmm

[19:15] <ugexe> m: my IO::Handle $x; $x.?close

[19:15] <camelia> rakudo-moar 35760cebc: OUTPUT: «Invocant of method 'close' must be an object instance of type␤'IO::Handle', not a type object of type 'IO::Handle'.  Did you forget a␤'.new'?␤  in block <unit> at <tmp> line 1␤␤»

[19:16] <ugexe> doing the unlock after the close does work though

[19:16] <ugexe> we saw that

[19:17] <ugexe> its just that if that `die` on an earlier line is thrown there is a regression

[19:17] <ugexe> but we do know we can call LEAVE $h.close; LEAVE $h.unlock;

[19:17] <ugexe> we know that because my PR passed all the CI tests

[19:19] <lizmat> m: LEAVE say "one"; LEAVE say "two"

[19:19] <camelia> rakudo-moar 35760cebc: OUTPUT: «two␤one␤»

[19:19] <lizmat> which would imply your code would first do an unlock, and then a close

[19:20] <lizmat> which mine does as well?

[19:20] <ugexe> right, thats what i meant

[19:20] <ugexe> it does do it in the same order, but it isn't exactly the same as mine

[19:20] <lizmat> LEAVE (say "one"),(say "two")

[19:20] <evalable6> lizmat, rakudo-moar 35760cebc: OUTPUT: «one␤two␤»

[19:20] <ugexe> i'm not sure what all is different. at a minimum there is an additional phaser registered

[19:21] <lizmat> I wonder if it's a timing issue ?

[19:21] <ugexe> and that could potentially change how DESTROY works

[19:23] <ugexe> i wonder if calling $handle.do-not-close-automatically would help

[19:24] <ugexe> that would presumably rule our DESTROY

[19:24] <ugexe> s/our/out/

[19:25] <lizmat> by all means, try  :-)

[19:25] <lizmat> I thought I was just preventing an execetion error if the open would fail

[19:26] <Geth> ¦ nqp/main: ad8bf79cf1 | (Elizabeth Mattijsen)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[19:26] <Geth> ¦ nqp/main: Correct value of SIG_ELEM_IS_NOT_POSITIONAL constant

[19:26] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/ad8bf79cf1

[19:33] <Geth> ¦ rakudo/ugexe-patch-2: 7c844bb712 | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/Repository/Installation.rakumod

[19:33] <Geth> ¦ rakudo/ugexe-patch-2: Work around repo.lock unlocking on windows

[19:33] <Geth> ¦ rakudo/ugexe-patch-2: 

[19:33] <Geth> ¦ rakudo/ugexe-patch-2: Commit 7ca96bbd90 started showing a `Failed to unlock filehandle: 158` error on Windows. This attempts to work around a presumed issue in how `IO::Handle::DESTROY` and e.g. `LEAVE $handle.unlock` interact by disabling the auto closing behavior of the lock file being used.

[19:33] <Geth> ¦ rakudo/ugexe-patch-2: review: https://github.com/rakudo/rakudo/commit/7c844bb712

[19:33] <Geth> ¦ rakudo: ugexe++ created pull request #5524: Work around repo.lock unlocking on windows

[19:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5524

[19:34] <lizmat> ugexe: I guess now we await the CI, right ?

[19:34] <ugexe> yeah

[19:35] <lizmat> chec

[19:35] <lizmat> k

[19:41] <Geth> ¦ rakudo/main: 9afcfd1bc1 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[19:41] <Geth> ¦ rakudo/main: Bump NQP to get the new nqp::const::SIG_ELEMxxx constants

[19:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9afcfd1bc1

[19:42] <Geth> ¦ rakudo/main: 512978791d | (Elizabeth Mattijsen)++ | 4 files

[19:42] <Geth> ¦ rakudo/main: Use the new nqp::const::SIG_ELEMxxx constants

[19:42] <Geth> ¦ rakudo/main: 

[19:42] <Geth> ¦ rakudo/main: Instead of initializing them here and there, with the danger that

[19:42] <Geth> ¦ rakudo/main: they do not use the same name and/or the same values in the various

[19:42] <Geth> ¦ rakudo/main: bootstrap cases.

[19:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/512978791d

[19:53] <ugexe> Didn't work

[19:53] <lizmat> meh   so maybe it *is* timing related ?

[19:55] <ugexe> I'm not sure. honestly i don't think any additional timing from having a second LEAVE block would be sufficient to have this consistent change in behavior

[19:55] <ugexe> but then i'm not sure what else it could be

[19:56] *** finanalyst joined
[20:07] <ugexe> oh hmm, it looks like calling .unlock might re-register the file to be automatically closed

[20:10] <ugexe> maybe not... cant tell

[20:38] *** [Coke]_ joined
[20:41] *** [Coke] left
[20:46] *** [Coke]_ is now known as [Coke]

[20:59] <ugexe> the error 158 suggests that the error is the file is not locked

[21:01] <ugexe> m: my $x = q|META6.json|.IO.open(:w, :shared); $x.lock; $x.close; $x.unlock

[21:01] <camelia> rakudo-moar 512978791: OUTPUT: «get native descriptor requires an object with REPR MVMOSHandle (got VMNull with REPR Null)␤  in block <unit> at <tmp> line 1␤␤»

[21:01] <ugexe> not sure that is related, but not a great error

[21:06] <ugexe> m: my $x = q|META6.json|.IO.open(:w, :shared); $x.lock; $x.unlock; $x.unlock;

[21:06] <camelia> rakudo-moar 512978791: ( no output )

[21:07] <ugexe> on windows that gives

[21:07] <ugexe> Failed to unlock filehandle: 158

[21:07] <ugexe>   in method unlock at 'SETTING::'src/core.c/IO/Handle.pm6 line 650

[21:08] <ugexe> so how the heck is that handle becoming unlocked, seemingly by the rearrangement of that LEAVE logic...

[21:09] <Geth> ¦ rakudo/main: bae06a2c8c | (Elizabeth Mattijsen)++ | src/core.c/Parameter.rakumod

[21:09] <Geth> ¦ rakudo/main: Streamline some Parameter methods, specifically .ACCEPTS

[21:09] <Geth> ¦ rakudo/main: 

[21:09] <Geth> ¦ rakudo/main: Mostly about using a native int instead of the attribute: this

[21:09] <Geth> ¦ rakudo/main: codegens to faster local references instead of attribute fetches.

[21:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bae06a2c8c

[21:09] <lizmat> ugexe: perhaps the lock failed in the first place?

[21:10] <lizmat> (silently)

[21:11] <ugexe> maybe, but using .lock on a handle seems to block correctly on windows on a 1 liner

[21:12] <lizmat> weird

[21:21] <ugexe> maybe it is timing related. your pr worked on my windows vm

[21:24] <ugexe> `LEAVE { try .unlock; try .close };` might be a workaround

[21:25] <ugexe> oh jeez

[21:25] <ugexe> its obvious

[21:25] <ugexe> https://github.com/rakudo/rakudo/commit/7ca96bbd90f79bfa9d51d80b93e62506eb2e44c5

[21:26] <ugexe> accidently removed the call to $lock.lock

[21:29] <Geth> ¦ rakudo/ugexe-patch-2: a723c387ce | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/Repository/Installation.rakumod

[21:29] <Geth> ¦ rakudo/ugexe-patch-2: Fix removal of file locking during installation

[21:29] <Geth> ¦ rakudo/ugexe-patch-2: 

[21:29] <Geth> ¦ rakudo/ugexe-patch-2: 7ca96bb accidentally removed the logic to lock the file. This reintroduces the necessary locking.

[21:29] <Geth> ¦ rakudo/ugexe-patch-2: review: https://github.com/rakudo/rakudo/commit/a723c387ce

[21:29] <Geth> ¦ rakudo: ugexe++ created pull request #5525: Fix removal of file locking during installation

[21:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5525

[21:37] <ugexe> i wonder if rakudo should make unlocking an unlocked file the same on Windows as on other os

[21:37] <ugexe> which don't throw an error

[21:40] *** epony left
[22:23] *** finanalyst left
[23:00] <ugexe> currently it looks like calling something like `$handle.do-not-close-automatically; $handle.unlock;` would cause the handle to still be closed automatically do to `.unlock` re-registering it to be auto-closed (presumably because .lock un-registers auto-closing). however, intuitively i expect calling $handle.do-not-close-automatically to cause it not be closed regardless of what i do with the

[23:00] <ugexe> handle later

[23:01] <ugexe> it feels like do-not-close-automatically needs an attribute to mark it has been called by e.g. user code, so the later call to .unlock doesn't try to re-register it to be auto closed

[23:18] * jdv is slightly concerned this seems complicated.  seems coukd be simple.

[23:23] *** epony joined
[23:24] <ugexe> yeah, i'm not sure I like DESTROY auto-closing handles or not

[23:26] <ugexe> it could be interested to get rid of all that logic, and have DESTROY just warn about unclosed file handles

[23:26] <ugexe> interesting^

[23:48] <Geth> ¦ rakudo/main: a723c387ce | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/Repository/Installation.rakumod

[23:48] <Geth> ¦ rakudo/main: Fix removal of file locking during installation

[23:48] <Geth> ¦ rakudo/main: 

[23:48] <Geth> ¦ rakudo/main: 7ca96bb accidentally removed the logic to lock the file. This reintroduces the necessary locking.

[23:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a723c387ce

[23:48] <Geth> ¦ rakudo/main: 5be1824c9f | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/Repository/Installation.rakumod

[23:48] <Geth> ¦ rakudo/main: Merge pull request #5525 from rakudo/ugexe-patch-2

[23:48] <Geth> ¦ rakudo/main: 

[23:48] <Geth> ¦ rakudo/main: Fix removal of file locking during installation

[23:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5be1824c9f

[23:52] *** sena_kun left
