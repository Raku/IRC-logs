[01:52] *** MasterDuke joined
[03:33] *** nine left
[03:34] *** camelia left
[03:49] *** MasterDuke left
[04:05] *** camelia joined
[04:10] *** nine joined
[08:46] <patrickb> ugexe: I think if we don't add any repo upgrade logic, the worst that will happen is that the different rakudos start creating different wrappers which results in CURIs with mixed wrappers. The wrappers themself should continue to work as is. That's maybe the best way forward. We could add upgrade logic that deletes and regenerates all the wrappers. But my guess is this causes more disruption 

[08:46] <patrickb> than it helps.

[09:56] *** sena_kun joined
[10:35] <Geth> ¦ rakudo/main: ca7933b872 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | src/core.c/Match.rakumod

[10:35] <Geth> ¦ rakudo/main: Don't use Match::chomp on string

[10:35] <Geth> ¦ rakudo/main: 

[10:35] <Geth> ¦ rakudo/main: This avoids the following error on the JVM backend when calling .gist

[10:35] <Geth> ¦ rakudo/main: on Match objects:

[10:35] <Geth> ¦ rakudo/main: 

[10:35] <Geth> ¦ rakudo/main:   Cannot dispatch to method chomp on Match because it is not inherited

[10:35] <Geth> ¦ rakudo/main:   or done by Str

[10:35] <Geth> ¦ rakudo/main: 

[10:35] <Geth> ¦ rakudo/main: I don't understand how this works on MoarVM, but using an unqualified

[10:35] <Geth> ¦ rakudo/main: method call looks reasonable to me.

[10:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ca7933b872

[10:36] <Geth> ¦ rakudo/main: ef46c8e9cb | (Christian Bartolomäus)++ (committed using GitHub Web editor) | src/core.c/Stash.rakumod

[10:36] <Geth> ¦ rakudo/main: Type second param of proto for Stash::ASSIGN-KEY

[10:36] <Geth> ¦ rakudo/main: 

[10:36] <Geth> ¦ rakudo/main: As explained in https://github.com/rakudo/rakudo/issues/5703 the

[10:36] <Geth> ¦ rakudo/main: current version leads to a spectest failure on the JVM backend. Running

[10:36] <Geth> ¦ rakudo/main: https://github.com/Raku/roast/blob/3032bcf423/integration/advent2011-day07.t

[10:36] <Geth> ¦ rakudo/main: eventually Stash::ASSIGN-KEY is called with something that derives from

[10:36] <Geth> ¦ rakudo/main: Metamodel::GrammarHOW (and doesn't type match with Any) as the second

[10:36] <Geth> ¦ rakudo/main: argument.

[10:36] <Geth> ¦ rakudo/main: 

[10:36] <Geth> ¦ rakudo/main: Typing the second parameter as Mu solves this problem -- and it also

[10:36] <Geth> ¦ rakudo/main: matches the types used in the multi variants of Stash::ASSIGN-KEY.

[10:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ef46c8e9cb

[11:16] <lizmat> m: my @a = 1,2,3; dd @a.EXISTS-POS(-1)

[11:16] <camelia> rakudo-moar ef46c8e9c: OUTPUT: «Bool::False␤»

[11:32] <lizmat> m: my @a = 1,2,3; dd @a.DELETE-POS(-1)

[11:32] <camelia> rakudo-moar ef46c8e9c: OUTPUT: «Failure.new(exception => X::OutOfRange.new(what => "Index", got => -1, range => "0..^Inf", comment => Any))␤»

[13:35] <Geth> ¦ rakudo/main: e7945cf996 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.rakumod

[13:35] <Geth> ¦ rakudo/main: Handle classes that don't have a find_method also

[13:35] <Geth> ¦ rakudo/main: 

[13:35] <Geth> ¦ rakudo/main: This was causing an error message inside an error message during

[13:35] <Geth> ¦ rakudo/main: debugging of #3658, which wasn't very helpful

[13:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e7945cf996

[13:53] <lizmat> m: dd "foo"[2..4]

[13:53] <camelia> rakudo-moar ef46c8e9c: OUTPUT: «(Failure.new(exception => X::OutOfRange.new(what => "Index", got => 2, range => "0..0", comment => Any), backtrace => Backtrace.new), Failure.new(exception => X::OutOfRange.new(what => "Index", got => 3, range => "0..0", comment => Any), backtrace => …»

[13:54] <lizmat> m: use Test; is 'foo'[2..4].elems, 0

[13:54] <camelia> rakudo-moar e7945cf99: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: '0'␤#      got: '3'␤»

[13:54] <lizmat> m: use Test; is 'foo'[2..*].elems, 0

[13:54] <camelia> rakudo-moar e7945cf99: OUTPUT: «ok 1 - ␤»

[13:54] <lizmat> meh

[13:59] <lizmat> I'd say that test is faulty

[15:26] <Geth> ¦ rakudo/main: a4b87c9186 | (Elizabeth Mattijsen)++ | 2 files

[15:26] <Geth> ¦ rakudo/main: Make (almost) any Failure in a slice throws immediately

[15:26] <Geth> ¦ rakudo/main: 

[15:26] <Geth> ¦ rakudo/main: Before this commit, there was difference in handling slices in which

[15:26] <Geth> ¦ rakudo/main: the indices are produced by a lazy or a non-lazy iterator.  That is

[15:26] <Geth> ¦ rakudo/main: because with indices produced by a lazy iterator, the first element

[15:26] <Geth> ¦ rakudo/main: that returns False on EXISTS-POS will indicate the end of the list

[15:26] <Geth> ¦ rakudo/main: of indices.

[15:26] <Geth> ¦ rakudo/main: <…commit message has 40 more lines…>

[15:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a4b87c9186

[15:31] <Geth> ¦ roast: 63243e28e8 | (Elizabeth Mattijsen)++ | S02-types/lists.t

[15:31] <Geth> ¦ roast: Fix tests in light of #3658

[15:31] <Geth> ¦ roast: 

[15:31] <Geth> ¦ roast: See https://github.com/rakudo/rakudo/commit/a4b87c9186

[15:31] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/63243e28e8

[15:32] <Geth> ¦ roast: 2093fb3bf0 | (Elizabeth Mattijsen)++ | S02-types/lists.t

[15:32] <Geth> ¦ roast: Fix copy-pasto

[15:32] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2093fb3bf0

[15:32] <timo> .o( please dispose of the wrappers separately from the product )

[15:36] <lizmat> not sure I understand ?

[15:45] <donaldh_> Is there an idiomatic way to iterate a list as a sequence of adjacent pairs?

[15:45] <donaldh_> Something less funky than: for @l[0..*-1] Z @l[1..*] -> $a, $b { ... }

[15:46] *** donaldh_ is now known as donaldh

[15:57] <timo> my message? that was just a joke

[15:57] <timo> donaldh: you want rotor i think?

[15:57] <timo> rotor(2 => -1) specifically

[16:00] <donaldh> Thanks timo++ I had a complete memory blank on rotor and couldn't think of what to search in the docs.

[16:07] <[Coke]> donaldh: vaguely related are metaoperators like:

[16:07] <[Coke]> m: say [+] <2 3 5 7 9 11>

[16:07] <camelia> rakudo-moar a4b87c918: OUTPUT: «37␤»

[16:10] <Geth> ¦ rakudo/main: a047a8f7bf | (Elizabeth Mattijsen)++ | src/core.c/Hash.rakumod

[16:10] <Geth> ¦ rakudo/main: Fix stringification of self referential Hashes

[16:10] <Geth> ¦ rakudo/main: 

[16:10] <Geth> ¦ rakudo/main: Inspired by #4768

[16:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a047a8f7bf

[16:11] <donaldh> coke: yep, my AoC day 2 soln was all meta and hyper operators https://donaldh.wtf/2024/12/2024-aoc-day-2-red-nosed-reports/

[16:15] <donaldh> Oh welp, I see .comb can do the same for strings as .rotor can for lists :-)

[16:16] <Geth> ¦ roast: d1d9bc1aa3 | (Elizabeth Mattijsen)++ | 2 files

[16:16] <Geth> ¦ roast: Add stringification tests for self-referencing (object) hashes

[16:16] <Geth> ¦ roast: 

[16:16] <Geth> ¦ roast: Inspired by #4768

[16:16] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d1d9bc1aa3

[16:18] <donaldh> In this case I was wanting to compute the differentials of a list

[16:18] <donaldh> m: <2 5 6 8 14 15>.rotor(2 => -1).map(-> @pair { abs([-] @pair) })

[16:18] <camelia> rakudo-moar a4b87c918: ( no output )

[16:18] <donaldh> m: say <2 5 6 8 14 15>.rotor(2 => -1).map(-> @pair { abs([-] @pair) })

[16:18] <camelia> rakudo-moar a4b87c918: OUTPUT: «(3 1 2 6 1)␤»

[17:06] *** [Tux] left
[17:11] <Geth> ¦ rakudo/main: 0911eca222 | (Elizabeth Mattijsen)++ | 2 files

[17:11] <Geth> ¦ rakudo/main: Hopefully address $*USER / $*GROUP on Windows

[17:11] <Geth> ¦ rakudo/main: 

[17:11] <Geth> ¦ rakudo/main: Thanks to Will Coleda's guidance in #5066, this will hopefully give

[17:11] <Geth> ¦ rakudo/main: some meaningful value to $*USER and $*GROUP on Windows systems, albeit

[17:11] <Geth> ¦ rakudo/main: *without* a numerical component.

[17:11] <Geth> ¦ rakudo/main: 

[17:11] <Geth> ¦ rakudo/main: As I don't have access to a Windows machine, this is untested, but

[17:11] <Geth> ¦ rakudo/main: <…commit message has 9 more lines…>

[17:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0911eca222

[17:17] *** [Tux] joined
[21:05] <ab5tract> This seems weird, but I don't use Signature de-structuring all that often

[21:05] <ab5tract> m: ("a", "b") ~~ :($, $) ==> say(); my $a = "a" => 1; $a ~~ Pair ==> say(); ($a, $a) ~~ :(Pair $, Pair $) ==> say()

[21:05] <camelia> rakudo-moar 0911eca22: OUTPUT: «True␤True␤False␤»

[21:06] <ab5tract> Also, the obligatory RakuAST check is troubling... 

[21:06] <ab5tract> m: Q|("a", "b") ~~ :($, $) ==> say(); my $a = "a" => 1; $a ~~ Pair ==> say(); ($a, $a) ~~ :(Pair $, Pair $) ==> say()|.AST.EVAL

[21:06] <camelia> rakudo-moar 0911eca22: OUTPUT: «True␤True␤False␤»

[21:07] <ab5tract> oh.. locally I get a SIGSEGV

[21:13] <ab5tract> This is from poking at R#5718

[21:13] <linkable6> R#5718 [open]: https://github.com/rakudo/rakudo/issues/5718 [LTA] LTA: for <a b c>.pairs.combinations(2) -> ($a,$b) doesn't work

[21:23] <ab5tract> I guess pairs are sort of sensitive due to the dispatching of names args?

[21:56] *** sena_kun left
[22:18] <Geth> ¦ nqp-configure/if-double-colon-config-key: 5b782265a6 | (Patrick Böker)++ | lib/NQP/Macros.pm

[22:18] <Geth> ¦ nqp-configure/if-double-colon-config-key: Allow config keys with double colon in @if()@

[22:18] <Geth> ¦ nqp-configure/if-double-colon-config-key: review: https://github.com/Raku/nqp-configure/commit/5b782265a6

[22:18] <Geth> ¦ nqp-configure: patrickbkr++ created pull request #29: Allow config keys with double colon in @if()@

[22:18] <Geth> ¦ nqp-configure: review: https://github.com/Raku/nqp-configure/pull/29

