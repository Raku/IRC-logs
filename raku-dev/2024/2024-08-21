[00:35] <ugexe> I do it all the time. Thing is I’m using Golang when I do it 😬

[01:43] *** MasterDuke joined
[06:47] *** sena_kun joined
[07:01] *** sena_kun left
[07:07] *** sena_kun joined
[07:07] <ab5tract> Sometimes these things are a function of their historical moment of implementation (or even design, when aged of the apocalypses)

[07:08] <ab5tract> Failures are also designed to fail as late as possible and seem like a reasonable fit for a return value from Nil.nonexistent

[07:13] <nine> Was specced on 2010-08-16 by larray

[07:13] <nine> s/larray/Larry/

[07:13] <nine> Sorry, pre-coffee

[07:16] *** dawids joined
[07:16] *** dawids left
[07:27] <gfldex> Please consider that Nil (and it's odd behaviour) is needed so we can have Failure.

[07:28] <gfldex> Also, a NativeCall call might return a zeropointer and we have to handle that somehow.

[07:30] *** sena_kun left
[08:19] *** donaldh_ joined
[08:22] *** donaldh left
[08:32] *** djinni` left
[08:49] *** djinni` joined
[08:57] <nine> m: grammar Foo { token TOP { <foo> }; proto token foo { * }; token foo:sym<a> { a }; }; say Foo.^method_table<foo>.is_dispatcher; say Foo.^method_table<foo>.dispatchees; say Foo.new.foo

[08:57] <camelia> rakudo-moar 70059eb1a: OUTPUT: «True␤()␤#<failed match>␤»

[08:57] <nine> but:

[08:57] <nine> m: class Foo { proto method foo() { * }; }; say Foo.^method_table<foo>.is_dispatcher; say Foo.^method_table<foo>.dispatchees; say Foo.new.foo

[08:57] <camelia> rakudo-moar 70059eb1a: OUTPUT: «True␤Cannot resolve caller foo(Foo:D); Routine does not have any candidates.  Is only the proto defined?␤  in block <unit> at <tmp> line 1␤␤()␤»

[08:59] <nine> What am I missing? How can the call to the proto token succeed when it has no candidates? Both calls should go through the same dispatchers and they should conclude that it's a proto and look for matching dispatchees and not find any and complain with that exception

[09:00] <nine> That's at least what happens with RakuAST, but somehow it works with the old frontend.

[09:00] <ab5tract> gfldex: is returning Nil for nonexistent methods part of the Failure implementation?

[09:00] <ab5tract> I’m not suggesting we remove Nil

[09:10] <nine> Aaaaah! It's not something I have to add, but something I have to take away: the $routine.set_onlystar call. While the proto has an onlystar body, we must not take the dispatch shortcut and instead have to just invoke the proto

[09:18] <lizmat> .oO( less is more! )

[09:29] <timo> gfldex: for null pointers we do have type objects to represent them

[10:59] <Geth> ¦ rakudo/main: bce9c3db3a | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[10:59] <Geth> ¦ rakudo/main: RakuAST: make multi regexes operational

[10:59] <Geth> ¦ rakudo/main: 

[10:59] <Geth> ¦ rakudo/main: A proto regex must not be marked onlystar as we would then use the

[10:59] <Geth> ¦ rakudo/main: optimized dispatcher for multis which would not find any candidates.

[10:59] <Geth> ¦ rakudo/main: That's because while a proto regex is a proto routine, the multi

[10:59] <Geth> ¦ rakudo/main: candidates will not be actual multis and will retain their full name

[10:59] <Geth> ¦ rakudo/main: including the :sym colonpair.

[10:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bce9c3db3a

[10:59] <Geth> ¦ rakudo/main: 74b357b0dd | (Stefan Seifert)++ | 3 files

[10:59] <Geth> ¦ rakudo/main: RakuAST: support <sym> in multi regexes

[10:59] <Geth> ¦ rakudo/main: 

[10:59] <Geth> ¦ rakudo/main: That <sym> is referring to the :sym colonpair in the regexes name is

[10:59] <Geth> ¦ rakudo/main: specially supported syntax.

[10:59] <Geth> ¦ rakudo/main: 

[10:59] <Geth> ¦ rakudo/main: Fixes: token foo:sym<bar> { <sym> }

[10:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/74b357b0dd

[10:59] <Geth> ¦ rakudo/main: aada362ff7 | (Stefan Seifert)++ | src/Raku/ast/regex.rakumod

[10:59] <Geth> ¦ rakudo/main: RakuAST: fix confusion of subs and regexes in regex tokens

[10:59] <Geth> ¦ rakudo/main: 

[10:59] <Geth> ¦ rakudo/main: A <something> in a regex first looks for a regex in lexical scope and

[10:59] <Geth> ¦ rakudo/main: only if it cannot find one, it generates a method call on the grammar.

[10:59] <Geth> ¦ rakudo/main: We already had most of this in place, but did not check whether the

[10:59] <Geth> ¦ rakudo/main: lexical we found was an actual regex and instead took any routine.

[10:59] <Geth> ¦ rakudo/main: 

[10:59] <Geth> ¦ rakudo/main: Fixes: token foo { <pair> } # which called &pair from the setting.

[10:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/aada362ff7

[11:01] <Geth> ¦ roast: f2c73fa651 | (Stefan Seifert)++ | S04-declarations/will-complain.t

[11:01] <Geth> ¦ roast: Make test for assignment error compatible with compile time detection

[11:01] <Geth> ¦ roast: 

[11:01] <Geth> ¦ roast: A smarter compiler will detect this broken construct at compile time and

[11:01] <Geth> ¦ roast: throw a subclass of X::TypeCheck::Assignment. So use string EVAL instead

[11:01] <Geth> ¦ roast: of the block to have the test succeed.

[11:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f2c73fa651

[11:01] <nine> These bring us up to 1141! So my quota for today is actually fulfilled already and I can switch to that other customer whith the end-of-the-week deadline...

[11:02] <lizmat> nine++

[11:32] *** MasterDuke left
[12:17] <Geth> ¦ rakudo/main: 29a032138c | (Elizabeth Mattijsen)++ | src/core.c/Regex.rakumod

[12:17] <Geth> ¦ rakudo/main: Prevent dispatch errors on Regex.Bool

[12:17] <Geth> ¦ rakudo/main: 

[12:17] <Geth> ¦ rakudo/main: By deconting the result of the match before calling .Bool on that.

[12:17] <Geth> ¦ rakudo/main: This makes:

[12:17] <Geth> ¦ rakudo/main: 

[12:17] <Geth> ¦ rakudo/main:     my $code = $*PROGRAM.slurp x 10000;

[12:17] <Geth> ¦ rakudo/main:     my atomicint $seen;

[12:18] <Geth> ¦ rakudo/main: <…commit message has 19 more lines…>

[12:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/29a032138c

[14:11] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++

[14:11] <Geth> ¦ rakudo/main: c2fac3ba3c | RakuAST: ensure block phasers added by traits are executed

[14:11] <Geth> ¦ rakudo/main: 11bf1065ed | RakuAST: call FIRST phasers added by traits only once per loop run

[14:11] <Geth> ¦ rakudo/main: f7c1242a57 | RakuAST: fix UNDO phaser in conditional/loop/etc. statements

[14:11] <Geth> ¦ rakudo/main: a30ba8aaae | RakuAST: fix UNDO phasers added by traits

[14:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/29a032138c66...a30ba8aaaed0

[14:24] <nine> 1142

[14:28] <Geth> ¦ rakudo: patrickbkr++ created pull request #5627: Revert "Assorted grammar tests"

[14:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5627

[14:38] <Geth> ¦ rakudo/main: 423ede6fc4 | (Patrick Böker)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[14:38] <Geth> ¦ rakudo/main: Revert "Assorted grammar tests"

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: This reverts commit f6b5422b44e77daf56b96db134773018a0cd713c.

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: I'm pretty sure I was wrong. LTM explains well, why a leading `<!ww>

[14:38] <Geth> ¦ rakudo/main: prevents a branch from taking precedence.

[14:38] <Geth> ¦ rakudo/main: Whether a variable interpolation should terminate the LTM chain can be

[14:38] <Geth> ¦ rakudo/main: discussed, but is definitely not clear-cut wrong.

[14:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/423ede6fc4

[14:38] <Geth> ¦ rakudo/main: e1ffa0fe16 | (Patrick Böker)++ (committed using GitHub Web editor) | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[14:38] <Geth> ¦ rakudo/main: Merge pull request #5627 from patrickbkr/revert-add-grammar-interpol-test

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: Revert "Assorted grammar tests"

[14:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e1ffa0fe16

[15:53] *** donaldh_ left
[15:53] *** japhb left
[15:54] *** japhb joined
[15:54] *** donaldh joined
[21:25] *** sena_kun joined
[23:09] *** sena_kun left
