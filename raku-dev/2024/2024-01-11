[00:09] *** epony left
[00:52] *** epony joined
[02:37] *** epony left
[03:56] *** vrurg_ joined
[03:59] *** vrurg left
[04:31] *** epony joined
[05:09] *** patrickb left
[05:37] *** epony left
[07:08] *** epony joined
[07:14] *** epony left
[09:15] *** sena_kun joined
[10:41] <Geth> ¦ rakudo/main: 61a87f0758 | (Elizabeth Mattijsen)++ | src/core.c/IO/Pipe.rakumod

[10:41] <Geth> ¦ rakudo/main: Revert "Install workaround for R#5444"

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: This reverts commit b7def4aae0ad1d63013f1f1637bcb552dc266669.

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: It did not help.

[10:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/61a87f0758

[10:41] <linkable6> R#5444 [open]: https://github.com/rakudo/rakudo/issues/5444 [edge cases] REA Harvester occasional crash

[13:21] *** patrickb joined
[13:26] <Geth> ¦ rakudo/main: 9b179a5540 | (Elizabeth Mattijsen)++ | docs/dispatchers.md

[13:26] <Geth> ¦ rakudo/main: Initial stab at internally documenting dispatch handlers

[13:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9b179a5540

[13:42] *** patrickb left
[13:51] *** patrickb joined
[13:56] *** patrickb left
[16:39] <Geth> ¦ nqp/main: 564cb03d05 | (Elizabeth Mattijsen)++ | docs/bootstrapping.pod

[16:39] <Geth> ¦ nqp/main: Update IRC link for bootstrapping process

[16:39] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/564cb03d05

[17:05] <ab5tract> Regarding Rust, it wouldn't be my preference for retrofitting MoarVM.

[17:10] <ab5tract> It's a seriously deep, complex language (not a bad thing, so is Rakue). That raises the barrier to entry for Raku devs who want to dip their toes into statically typed languages, maybe even for their first time.

[17:13] <ab5tract> I'd rather use Zig because it is a much simpler, more batteries-included systems programming language that allows for very fine granularity over memory management.

[17:16] <ab5tract> Not to mention incredible C integration. I'll have to check into how well `MVM_ROOT` and the rest of the MoarVM macros are handled but unless they are properly obscure, they might just translate to Zig without issue, as it can handle some level of C macro-fu.

[17:16] <jdv> this whole conversation feels parrotish:(

[17:16] <ab5tract> jdv: sorry to hear that

[17:17] <jdv> lotsa real stuff is built in c.  idk if that is a real problem.

[17:18] <ab5tract> I'd say the contributor count to moarvm suggests otherwise

[17:19] <jdv> hypthetically if the vm was written in $en_vogue_tech would it mean raku would be in a better place?

[17:20] <ab5tract> my hypothesis is that if we were to see real forward momentum happening in moarvm, it would put Raku in a better place

[17:21] <ab5tract> funny enough, this conversation didn't feel parrot-ish to me until you brought your water pail to pour on it :)

[17:23] <Geth> ¦ nqp/main: 082fb2d549 | (Elizabeth Mattijsen)++ | 2 files

[17:23] <Geth> ¦ nqp/main: Add nqp::syscall, nqp::register, nqp::delegate ops

[17:23] <Geth> ¦ nqp/main: 

[17:23] <Geth> ¦ nqp/main: These are short-cuts for:

[17:23] <Geth> ¦ nqp/main:   syscall   nqp::dispatch('boot-syscall', …)

[17:23] <Geth> ¦ nqp/main:   register  nqp::dispatch('boot-syscall', 'dispatcher-register', …)

[17:23] <Geth> ¦ nqp/main:   delegate  nqp::dispatch('boot-syscall', 'dispatcher-delegate', …)

[17:23] <Geth> ¦ nqp/main: 

[17:23] <Geth> ¦ nqp/main: This should hopefully make the dispatcher setup code in core, as well

[17:23] <Geth> ¦ nqp/main: as in Rakudo, a lot better readable.

[17:23] <Geth> ¦ nqp/main: 

[17:23] <Geth> ¦ nqp/main: Also adjust most of the tests to use these new ops

[17:23] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/082fb2d549

[17:23] <Geth> ¦ nqp/main: 04dc665920 | (Elizabeth Mattijsen)++ | 3 files

[17:23] <Geth> ¦ nqp/main: Use new syscall/register/delegate ops in dispatcher setup

[17:23] <Geth> ¦ nqp/main: 

[17:23] <Geth> ¦ nqp/main: This improves the readability of these internals significantly.

[17:23] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/04dc665920

[17:23] <Geth> ¦ nqp/main: 2cc7e329f5 | (Elizabeth Mattijsen)++ | 11 files

[17:23] <Geth> ¦ nqp/main: Rebootstrap to get new syscall/register/delegate ops

[17:23] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/2cc7e329f5

[17:26] <jdv> pugs, Niecza, parrot.  do we need another vm?

[17:29] <ab5tract> I'm not talking about another vm

[17:34] <jdv> make it so then!:)

[17:34] <Geth> ¦ rakudo/main: a3645497bd | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[17:34] <Geth> ¦ rakudo/main: Bump NQP to get new nqp::syscall/register/delegate ops

[17:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a3645497bd

[18:29] *** timo left
[18:46] *** timo joined
[19:20] <Geth> ¦ rakudo/main: 690c6c01ba | (Elizabeth Mattijsen)++ | docs/dispatchers.md

[19:20] <Geth> ¦ rakudo/main: Add set-cur-hll-config-key dispatch key

[19:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/690c6c01ba

[19:20] <Geth> ¦ rakudo/main: becb682e14 | (Elizabeth Mattijsen)++ | 11 files

[19:20] <Geth> ¦ rakudo/main: Use new nqp::syscall/register/delegate ops

[19:20] <Geth> ¦ rakudo/main: 

[19:20] <Geth> ¦ rakudo/main: Instead of their long nqp::dispatch(....) versions

[19:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/becb682e14

[19:29] <Geth> ¦ nqp/main: f7451a8f0d | (Elizabeth Mattijsen)++ | 2 files

[19:29] <Geth> ¦ nqp/main: Use new syscall/register/delegate ops in more tests

[19:29] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/f7451a8f0d

[19:48] <Geth> ¦ rakudo/main: bef0a9bfbf | (Elizabeth Mattijsen)++ | src/Raku/ast/signature.rakumod

[19:48] <Geth> ¦ rakudo/main: RakuAST: use new nqp::syscall op

[19:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bef0a9bfbf

[20:18] <Geth> ¦ nqp/main: df955144fd | (Elizabeth Mattijsen)++ | docs/ops.markdown

[20:18] <Geth> ¦ nqp/main: Add preliminary docs for nqp::dispatch and friends

[20:18] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/df955144fd

[20:20] <vrurg_> ab5tract: what real advantages Zig could bring in?

[20:21] <lizmat> memory safety is one of them, i understand

[20:23] <Geth> ¦ nqp/main: d06cf15ec0 | (Elizabeth Mattijsen)++ | docs/ops.markdown

[20:23] <Geth> ¦ nqp/main: Fix two anchors in ops docs

[20:23] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/d06cf15ec0

[20:25] <vrurg_> lizmat: I don't see much of it. Introduction of optional type is helpful with this respect. But does it take care of double allocations? And, as I see it, concurrent access is yet to be fully manually managed.

[20:26] <lizmat> ab5tract ^^ has looked into it way more than I did ^^

[20:26] <vrurg_> I know. :) Just expressing what I found so far.

[20:26] <lizmat> afk&  done my hacking for today

[20:26] <vrurg_> lizmat: rest well today!

[20:26] *** vrurg_ is now known as vrurg

[20:28] <vrurg> My preliminary view on zig attempt would be: worth trying if it doesn't take too much resources. Otherwise Rust would provide more robust grounds both from safety perspective and from the perspective of potential user base.

[20:52] *** epony joined
[21:14] <nine> I somehow doubt that C is the real barrier here. There are tons of successful free software projects written in C out there. A different language might help in a few places, but really it wouldn't make developing MoarVM much easier.

[21:14] <nine> Thing is, the problems MoarVM tries to solve are really, really hard. That's independent of the language the solution is written in.

[21:32] <vrurg> nine: yes, and no. Ultimately, if moar to be started like today then the choice would be clear to me. But rewriting the existing codebase? Hell, no! Waste of time.

[21:49] <Voldenet> `zig cc` could probably compile moarvm right now and zig fundamentally allows compile time execution

[21:53] <Voldenet> it's not bad of a choice, but it's difficult to say why it's better

[21:54] <Voldenet> there's some design decisions like Allocator or async that could simplify a lot of things

[23:22] <ab5tract> Voldenet: it does indeed compile moarvm, I’ve got a branch with it working.

[23:23] <Voldenet> it probably isn't significantly faster or anything like that

[23:23] *** sena_kun left
[23:24] <Voldenet> but lets you use zig painlessly

[23:24] <ab5tract> Not at the moment, no.

[23:24] <ab5tract> It would also likely make Windows compilation an easier story, though I haven’t tested that hypothesis yet

[23:32] <Voldenet> and probably other architectures too (if it works as advertised)

