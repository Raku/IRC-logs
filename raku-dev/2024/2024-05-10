[00:13] <Xliff_> For reference, I know this code worked as of March 24th of this year.

[01:34] <[Coke]> bisectable6: my $a = "(b)"; my $b = $a.encode; $b.^name.say; use NativeCall; my $ca = CArray[uint8].new($b)

[01:34] <bisectable6> [Coke], Will bisect the whole range automagically because no endpoints were provided, hang tight

[01:35] <[Coke]> oh, this was already done in #raku

[01:35] <bisectable6> [Coke], Output on all releases: https://gist.github.com/e0b78471299540b643d745dab8d7ec5c

[01:35] <bisectable6> [Coke], More than 3 changes to bisect, please try a narrower range like old=2024.04 new=HEAD

[06:23] <Geth> ¦ rakudo/rakuast-phase-cleanup: 25 commits pushed by (Stefan Seifert)++

[06:23] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/compare/797dbc29c38a...861f32c08d2d

[06:33] *** _Guapo_ joined
[06:40] *** _Guapo_ left
[07:12] <Geth> ¦ rakudo/rakuast-phase-cleanup: c5b634266d | (Stefan Seifert)++ | src/Raku/ast/variable-access.rakumod

[07:12] <Geth> ¦ rakudo/rakuast-phase-cleanup: RakuAST: give dynamics a second chance at resolving

[07:12] <Geth> ¦ rakudo/rakuast-phase-cleanup: 

[07:12] <Geth> ¦ rakudo/rakuast-phase-cleanup: There are two ways for finding dynamically scoped variables: if they are

[07:12] <Geth> ¦ rakudo/rakuast-phase-cleanup: in the current scope, we have to access the lexical direclty. If they

[07:12] <Geth> ¦ rakudo/rakuast-phase-cleanup: are not in the current scope, we have to use dynamic lookup. Thus we

[07:12] <Geth> ¦ rakudo/rakuast-phase-cleanup: look up these variables only in the current scope.

[07:12] <Geth> ¦ rakudo/rakuast-phase-cleanup: 

[07:12] <Geth> ¦ rakudo/rakuast-phase-cleanup: <…commit message has 9 more lines…>

[07:12] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/commit/c5b634266d

[07:48] <lizmat> Xliff_: I probably borked that, please make an issue and assign me

[08:00] *** sena_kun joined
[08:25] <Geth> ¦ rakudo/main: d0cbe4ae30 | (Elizabeth Mattijsen)++ | 2 files

[08:25] <Geth> ¦ rakudo/main: Unbreak CArray.new

[08:25] <Geth> ¦ rakudo/main: 

[08:25] <Geth> ¦ rakudo/main: An optimization in 3861b8f8f27028426f27 inadvertently broke some

[08:25] <Geth> ¦ rakudo/main: use cases without being noticed.  This unbreaks that by adding a

[08:25] <Geth> ¦ rakudo/main: fast path for Blobs and Lists, while retaining the original slow

[08:25] <Geth> ¦ rakudo/main: path for all other Positionals.

[08:25] <Geth> ¦ rakudo/main: 

[08:25] <Geth> ¦ rakudo/main: Add test to make sure this doesn't happen again unnoticed.

[08:25] <Geth> ¦ rakudo/main: 

[08:25] <Geth> ¦ rakudo/main: Spotted by Xliff++

[08:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d0cbe4ae30

[08:26] <lizmat> m: dd "(b)".encode.^roles   # found this while investigating ^^

[08:26] <camelia> rakudo-moar dc172ab5e: OUTPUT: «(Blob[uint8], UnsignedBlob[uint8], Positional[uint8], Stringy, UnsignedBlob[uint8])␤»

[08:27] <lizmat> note that UnsignedBlob[uint8] is occurring twice

[08:27] <lizmat> wonder what that is about

[08:38] <lizmat> m: dd "(b)".encode.^roles.Set

[08:38] <camelia> rakudo-moar d0cbe4ae3: OUTPUT: «Set.new(Blob[uint8],Positional[uint8],Stringy,UnsignedBlob[uint8])␤»

[08:38] <lizmat> so they *are* the same UnsignedBlob[uint8], not just by name, but also by WHICH

[08:39] <lizmat> afk for quite a few hours&

[09:25] *** sena_kun left
[10:44] <Xliff_> 'morn

[10:44] <Xliff_> lizmat: Looks like your fix broke something else... 

[10:47] <Xliff_> Can you please check the following gist: https://gist.github.com/Xliff/0fdb4edcca961deeb004f15b3c858b3a

[10:49] <Xliff_> Added a raku backtrace to it.

[11:56] *** liztormato joined
[11:57] <liztormato> Xliff_: am afk atm. Will look when back later today

[11:59] <Xliff_> liztormato: Understood. Thanks!

[12:01] *** liztormato left
[12:40] *** finanalyst joined
[16:01] *** finanalyst left
[16:56] <Geth> ¦ rakudo/main: b36cceb36b | (Elizabeth Mattijsen)++ | lib/NativeCall/Types.rakumod

[16:56] <Geth> ¦ rakudo/main: Remove Blob fast path in CArray.new

[16:56] <Geth> ¦ rakudo/main: 

[16:56] <Geth> ¦ rakudo/main: Apparently it causes segfaults

[16:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b36cceb36b

[16:57] <lizmat> Xliff_: ^^

[17:15] <Xliff_> lizmat: Has camelia been updated?

[17:18] <Xliff_> lizmat: New error - "==SORRY!=== Error while compiling /home/cbwood/Projects/p6-GLib/lib/GLib/Raw/Definitions.pm6 (GLib::Raw::Definitions) New type Block for List is not a mixin type at /home/cbwood/Projects/p6-GLib/lib/GLib/Raw/Definitions.pm6 (GLib::Raw::Definitions):9"

[17:46] <[Coke]> m: say 3

[17:46] <camelia> rakudo-moar b36cceb36: OUTPUT: «3␤»

[17:47] <[Coke]> Note the commit ID in the response

[18:41] <Geth> ¦ rakudo/main: b6028f9da6 | (Elizabeth Mattijsen)++ | lib/NativeCall/Types.rakumod

[18:41] <Geth> ¦ rakudo/main: Remove List fast path in CArray.new as well

[18:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b6028f9da6

[18:41] <lizmat> Xliff_: ^^

[19:53] <nine> lizmat: isn't there still an off-by-one error in there?

[19:53] <nine> Ah, no --$n

[20:44] <Xliff_> lizmat: Same error. You can check yourself.

[20:44] <Xliff_> Pull down https://github.com/Xliff/p6-GLib

[20:44] <Xliff_> 1) Make change; 2) cd into p6-GLib; 3) raku -Ilib -e 'use GLib::Raw::Definitions'

[20:45] <Xliff_> The advantage here: It gives you a chance to look at GLib::Raw::Definitions to see what the root issue is, and if it can be solved by changing that compunit. I will be doing the same, here. 

[20:48] <Xliff_> Looks like the problem is triggered by GLib::Raw::Distro

[20:53] <Xliff_> Found the problem. Recompiled it. Problem went away.

[20:53] <Xliff_> Now went back to the original version of the code and problem did NOT return. Weird.

[20:54] <Xliff_> Problem found again in GLib::Object::Supplyish

[20:55] <Xliff_> Commented out the entire compunit.

[20:55] <Xliff_> Recompiled it. Fine.

[20:55] <Xliff_> Uncommented. Recompiled. Fine

[20:57] <Xliff_> Same with GLib::Roles::Protection

[20:58] <Xliff_> So I can't confirm what the problem is, but I have found a workaround.

[20:58] *** sena_kun joined
[22:23] *** sena_kun left
[22:51] *** Xliff_ left
[23:26] *** MasterDuke joined
