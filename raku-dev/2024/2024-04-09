[11:04] <Geth> ¦ rakudo/main: b833018251 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[11:04] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 5/N)

[11:04] <Geth> ¦ rakudo/main: 

[11:04] <Geth> ¦ rakudo/main: - smarter submethod and yada checks

[11:04] <Geth> ¦ rakudo/main: - replace for by while loops

[11:04] <Geth> ¦ rakudo/main: - atpos/atkey vs [] and {}

[11:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b833018251

[11:05] <Geth> ¦ rakudo/main: 8753b0d9c7 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[11:05] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 5/N)

[11:05] <Geth> ¦ rakudo/main: 

[11:05] <Geth> ¦ rakudo/main: - multi method collision handling

[11:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8753b0d9c7

[11:06] <lizmat> meh, 6/N

[11:19] <ab5tract> lizmat++

[11:19] <ab5tract> that module has needed a lot of love :)

[11:20] <lizmat> yeah, and the effects on make (spec)test are noticeable

[11:22] <Geth> ¦ rakudo/main: b1167851cd | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[11:22] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 7/N)

[11:22] <Geth> ¦ rakudo/main: 

[11:22] <Geth> ¦ rakudo/main: - abstract role/method logic in a Candidate class

[11:22] <Geth> ¦ rakudo/main: - and use that were appropriate

[11:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b1167851cd

[11:59] <lizmat> bisectable6: 10.3 mod 3.3

[11:59] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[11:59] <lizmat> bisectable6: say 10.3 mod 3.3

[11:59] <bisectable6> lizmat, Output on all releases: https://gist.github.com/7776812ff93a0f9a12a77f4bc7fa5382

[11:59] <bisectable6> lizmat, More than 3 changes to bisect, please try a narrower range like old=2024.01 new=HEAD

[11:59] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[12:00] <bisectable6> lizmat, Output on all releases: https://gist.github.com/a000d3cb45e6029ae1236663fbd071e4

[12:00] <bisectable6> lizmat, More than 3 changes to bisect, please try a narrower range like old=2024.01 new=HEAD

[12:01] <lizmat> bisectable6: old=2024.01 say 10.3 mod 3.3

[12:01] <bisectable6> lizmat, Bisecting by exit code (old=2024.01 new=b116785). Old exit code: 1

[12:01] <bisectable6> lizmat, bisect log: https://gist.github.com/3e1d7105c7160fa737105dc57e65c260

[12:01] <bisectable6> lizmat, (2024-02-04) https://github.com/rakudo/rakudo/commit/71c0151aa7c09cb86ed74960db818f7429f88fb7

[12:34] <Geth> ¦ rakudo/main: 5749812681 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[12:34] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 8/N)

[12:34] <Geth> ¦ rakudo/main: 

[12:34] <Geth> ¦ rakudo/main: Abstract various candidate logic into methods in the Candidate class

[12:34] <Geth> ¦ rakudo/main: and adapt code accordingly.

[12:34] <Geth> ¦ rakudo/main: 

[12:34] <Geth> ¦ rakudo/main: This may possibly create superfluous Candidate instances, but only

[12:34] <Geth> ¦ rakudo/main: if the exact same method is introduced from multiple roles.  Which

[12:34] <Geth> ¦ rakudo/main: isn't very likely.

[12:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5749812681

[13:06] *** nebuchad` left
[13:07] *** nebuchad` joined
[13:09] <Geth> ¦ rakudo/main: df5fc0e30f | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/MultiMethodContainer.nqp

[13:09] <Geth> ¦ rakudo/main: Streamline Metamodel::MultiMethodContainer a bit

[13:09] <Geth> ¦ rakudo/main: 

[13:09] <Geth> ¦ rakudo/main: - change scope of helper class and uptimize it

[13:09] <Geth> ¦ rakudo/main: - streamline a multi method a bit faster

[13:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/df5fc0e30f

[13:18] <lizmat> bisectable6: dd Pod::Block::Table

[13:18] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[13:19] <bisectable6> lizmat, ¦6c (78 commits): «Pod::Block::Table␤»

[13:19] <bisectable6> lizmat, Nothing to bisect!

[13:19] <lizmat> bisectable6: old=2023.01 dd Pod::Block::Table

[13:19] <bisectable6> lizmat, Cannot find revision “2023.01” (did you mean “2024.01”?)

[13:19] <lizmat> bisectable6: old=2023.01 dd Pod::Block::Table

[13:19] <bisectable6> lizmat, Cannot find revision “2023.01” (did you mean “2024.01”?)

[13:19] <lizmat> bisectable6: old=2023.02 dd Pod::Block::Table

[13:19] <bisectable6> lizmat, On both starting points (old=2023.02 new=df5fc0e) the exit code is 0 and the output is identical as well

[13:19] <bisectable6> lizmat, Output on both points: «Pod::Block::Table␤»

[13:20] <lizmat> hmmm

[13:27] <Geth> ¦ rakudo/main: e57d8233d6 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/MultiMethodContainer.nqp

[13:27] <Geth> ¦ rakudo/main: Make adding a multi method threadsafe

[13:27] <Geth> ¦ rakudo/main: 

[13:27] <Geth> ¦ rakudo/main: And also add a "add_multi_methods" to add multiple multi methods

[13:27] <Geth> ¦ rakudo/main: sharing the same name in one fell swoop

[13:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e57d8233d6

[13:39] <ab5tract> BTW: I think I found a bug in the optimizer -- https://github.com/rakudo/rakudo/blob/e57d8233d64427564461364bf9177bcdf72838fa/src/Perl6/Optimizer.nqp#L701

[13:39] <Geth> ¦ rakudo/main: ece585016a | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[13:39] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 9/N)

[13:39] <Geth> ¦ rakudo/main: 

[13:39] <Geth> ¦ rakudo/main: Use the new "add_multi_methods" method

[13:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ece585016a

[13:40] <lizmat> ab5tract: and what would the bug be?

[13:41] <ab5tract> `while ++$i < $n` isn't valid in NQP, unless I'm mistaken?

[13:41] <lizmat> pretty valid in NQP

[13:41] <ab5tract> I mean, it works, but it isn't the semantics you are expecting

[13:41] <lizmat> ah?   when $i starts at -1, why wouldn't it ?

[13:44] <ab5tract> if that's the case, why does every other while loop increment in the loop body?

[13:44] <lizmat> well... I usually wrote them like that in the past

[13:44] <ab5tract> anyway, I spent a good while tearing my hair out before when using this syntax

[13:44] <lizmat> feel free to change the loop  :-)

[13:44] <ab5tract> and the loop ony worked as expected when I did a separate increment

[13:45] <lizmat> in the past, until I realized that this way you'd always do one increment too many

[13:45] <lizmat> especially in the case where the number of elements is 0

[13:46] <lizmat> so I'm changing them nowadays whenever I run into them

[13:52] <ab5tract> hm, weird. the failure mode I encountered made me think that there was a deeper issue with such expressions, though I couldn't really make sense of what they would be.

[14:17] <Geth> ¦ rakudo/main: d442a5baa8 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[14:17] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 10/N)

[14:17] <Geth> ¦ rakudo/main: 

[14:17] <Geth> ¦ rakudo/main: Basically rework the way attributes are beinng registered into

[14:17] <Geth> ¦ rakudo/main: object creation.  Also rename some variables for readability

[14:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d442a5baa8

[16:13] <Geth> ¦ rakudo/main: 4fa4ca5225 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[16:13] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 11/N)

[16:13] <Geth> ¦ rakudo/main: 

[16:13] <Geth> ¦ rakudo/main: Abstract attribute conflict resolution into a method in the

[16:13] <Geth> ¦ rakudo/main: attribute registration class.

[16:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4fa4ca5225

[16:21] <Geth> ¦ rakudo/is-item-redux: 5 commits pushed by ab5tract++

[16:21] <Geth> ¦ rakudo/is-item-redux: 819312c6a3 | Scaffolding for 'is item' trait on parameters

[16:21] <Geth> ¦ rakudo/is-item-redux: d6e80016fc | Ensure that candidates carry itemization reqs

[16:21] <Geth> ¦ rakudo/is-item-redux: 11ae6958ea | Add dispatch disambiguation for 'is item'

[16:21] <Geth> ¦ rakudo/is-item-redux: db3c2e8fae | (Legacy dispatch) disambiguate itemization with 'is item'

[16:21] <Geth> ¦ rakudo/is-item-redux: 5bcd298682 | Add sigil exception for 'is item' to RakuAST

[16:21] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/compare/b1d699c50baf...5bcd298682c8

[16:21] <Geth> ¦ nqp/main: 70c1641805 | ab5tract++ | src/vm/jvm/runtime/org/raku/nqp/runtime/Ops.java

[16:21] <Geth> ¦ nqp/main: [JVM] Fix capturenamedshash to actually include objects

[16:21] <Geth> ¦ nqp/main: 

[16:21] <Geth> ¦ nqp/main: The condition `(flagged & CallSiteDescriptor.ARG_OBJ) != 0` will

[16:21] <Geth> ¦ nqp/main: never be true because ARG_OBJ is defined as 0.

[16:21] <Geth> ¦ nqp/main: 

[16:21] <Geth> ¦ nqp/main: It's not clear when this broke, and it also looks like capturenamedshash

[16:21] <Geth> ¦ nqp/main: is never really called anywhere -- at least my angry debug statements

[16:21] <Geth> ¦ nqp/main: never seemed to be output during the building of CORE.setting.

[16:21] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/70c1641805

[16:26] <ab5tract> And... `is item` should be done! \o/

[16:26] <lizmat> great!   so, merge time is at hand ?

[16:28] <ab5tract> could be, could be.. maybe let's let the dust settle a bit

[16:34] <lizmat> ok  :-)

[17:02] <Geth> ¦ rakudo/main: 5c27242bb2 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[17:02] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 12/N)

[17:02] <Geth> ¦ rakudo/main: 

[17:02] <Geth> ¦ rakudo/main: Simplify conflict check: the name always matches, so there's no

[17:02] <Geth> ¦ rakudo/main: need to check it

[17:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5c27242bb2

[18:44] <Geth> ¦ rakudo/main: f4943c9bf2 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[18:44] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 13/13)

[18:44] <Geth> ¦ rakudo/main: 

[18:44] <Geth> ¦ rakudo/main: - add some more internal documentation

[18:44] <Geth> ¦ rakudo/main: - fix potential issue with setting array types

[18:44] <Geth> ¦ rakudo/main: - one else if -> elsif change

[18:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f4943c9bf2

[19:49] <Geth> ¦ rakudo/main: c6adc333ca | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/MultiMethodContainer.nqp

[19:49] <Geth> ¦ rakudo/main: Streamline Metamodel::MultiMethodContainer (Part 1/N)

[19:49] <Geth> ¦ rakudo/main: 

[19:49] <Geth> ¦ rakudo/main: - make sure only one thread is incorporating at a time

[19:49] <Geth> ¦ rakudo/main: - for to while loops

[19:49] <Geth> ¦ rakudo/main: - atpos/atkey instead of [] {}

[19:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c6adc333ca

[21:35] *** japhb left
[21:39] *** japhb joined
[22:52] *** sena_kun left
