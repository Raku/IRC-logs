[01:13] <ab5tract> Heisenfactor 5

[07:51] *** sena_kun joined
[09:27] <lizmat> Xliff_: a git clone tells me:

[09:27] <tellable6> lizmat, I'll pass your message to Xliff_

[09:27] <lizmat> warning: the following paths have collided (e.g. case-sensitive paths

[09:27] <lizmat> on a case-insensitive filesystem) and only one from the same

[09:27] <lizmat> colliding group is in the working tree:

[09:27] <lizmat>   'lib/GLib/URI.pm6'

[09:27] <lizmat>   'lib/GLib/Uri.pm6'

[09:28] <lizmat> so I guess your modules won't work on MacOS. period  :-(

[09:54] *** finanalyst joined
[10:17] <ab5tract> Oh yeah… that’s such a WAT on macOS

[10:18] <ab5tract> Though one might argue that the library is being a bit obtuse here, as well. I’m not sure how an end user should choose between these two

[10:34] *** finanalyst left
[11:42] <Geth> ¦ rakudo/main: 66c4acad2c | (Elizabeth Mattijsen)++ | 4 files

[11:42] <Geth> ¦ rakudo/main: RakuAST: =place requires a URL in its specification

[11:42] <Geth> ¦ rakudo/main: 

[11:42] <Geth> ¦ rakudo/main: This was previously missed in the =place implememnation.

[11:42] <Geth> ¦ rakudo/main: finanalyst++ for reporting and nudging

[11:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/66c4acad2c

[12:33] <ugexe> Won’t work on windows either then 

[12:34] <ugexe> Actually maybe I’m misremember windows file system case insensitivity 

[12:51] *** finanalyst joined
[13:33] <ugexe> "Windows (local) file systems, including NTFS, as well as FAT and variants, are case insensitive (normally)."

[13:33] <ugexe> guess i was correct

[14:38] <[Tux]> Rakudo v2024.04-79-g66c4acad2 (v6.d) on MoarVM 2024.04-4-gc1eedd502

[14:38] <[Tux]> csv-test-xs-20      0.143 -  0.144

[14:38] <[Tux]> csv-ip5xs           0.263 -  0.276

[14:38] <[Tux]> test-t --race       0.277 -  0.299

[14:38] <[Tux]> test-t              0.426 -  0.429

[14:38] <[Tux]> csv-ip5xs-20        1.166 -  1.222

[14:38] <[Tux]> test-t-20 --race    1.284 -  1.336

[14:38] <[Tux]> csv-parser          1.556 -  1.589

[14:38] <[Tux]> test                1.963 -  2.015

[14:38] <[Tux]> test-t-20           5.377 -  5.382

[17:06] *** finanalyst left
[18:12] <jdv> where the graphs again?  i don't know why i can't google them:(

[18:24] <lizmat> https://tux.nl/Talks/CSV6/speed.log

[18:56] <jdv> i thought there were graphs.  i guess i could remeber how to gnuplot or soemthing on that.

[19:18] <jdv> hasn't really moved lately it seems

[19:21] <jdv> https://imgur.com/a/evvgkBr

[19:22] <jdv> lizmat: thanks

[19:35] <ab5tract> any idea where I can find the code that actually does the dumping of QAST for --target=[q]ast ?

[19:36] <ab5tract> I'd like to add it to the nqp edition of `dd`

[19:38] <MasterDuke> i think src/HLL/Com(mandLine|piler).nqp in nqp. but not 100% sure on that

[19:42] <ab5tract> ah, it was in the Compiler.nqp you mentioned, thanks MasterDuke

[19:43] <MasterDuke> np

[21:48] <ab5tract> do we have a quick way for a user to disable worries?

[21:49] <ab5tract> iirc they don't dispatch through the regular exception path, so you can't just catch them

[21:53] <Geth> ¦ rakudo/r5175: 4e5bb8fb57 | ab5tract++ | 3 files

[21:53] <Geth> ¦ rakudo/r5175: Add worry for WhateverCode on LHS of smartmatch

[21:53] <Geth> ¦ rakudo/r5175: 

[21:53] <Geth> ¦ rakudo/r5175: Smartmatch only curries `Whatever`, so any user that provides

[21:53] <Geth> ¦ rakudo/r5175: a `WhateverCode` expression as an LHS is likely to encounter

[21:53] <Geth> ¦ rakudo/r5175: a surprising failure (when compared to the behavior of most

[21:53] <Geth> ¦ rakudo/r5175: other infix operaators).

[21:53] <Geth> ¦ rakudo/r5175: 

[21:53] <Geth> ¦ rakudo/r5175: In order to be proactive and helpful to such users, we emit

[21:53] <Geth> ¦ rakudo/r5175: a descriptive worry in this scenario.

[21:53] <Geth> ¦ rakudo/r5175: review: https://github.com/rakudo/rakudo/commit/4e5bb8fb57

[21:54] <Geth> ¦ rakudo: ab5tract++ created pull request #5564: Add worry for WhateverCode on LHS of smartmatch

[21:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5564

[21:55] <ab5tract> dangit, a typo... here comes another round of Geth

[21:57] <Geth> ¦ rakudo/r5175: 9078c4dc21 | ab5tract++ | 3 files

[21:57] <Geth> ¦ rakudo/r5175: Add worry for WhateverCode on LHS of smartmatch

[21:57] <Geth> ¦ rakudo/r5175: 

[21:57] <Geth> ¦ rakudo/r5175: Smartmatch only curries `Whatever`, so any user that provides

[21:57] <Geth> ¦ rakudo/r5175: a `WhateverCode` expression as an LHS is likely to encounter

[21:57] <Geth> ¦ rakudo/r5175: a surprising failure (when compared to the behavior of most

[21:57] <Geth> ¦ rakudo/r5175: other infix operaators).

[21:57] <Geth> ¦ rakudo/r5175: 

[21:57] <Geth> ¦ rakudo/r5175: In order to be proactive and helpful to such users, we emit

[21:57] <Geth> ¦ rakudo/r5175: a descriptive worry in this scenario.

[21:57] <Geth> ¦ rakudo/r5175: review: https://github.com/rakudo/rakudo/commit/9078c4dc21

[21:58] <ab5tract> third time is the charm..

[21:58] <Geth> ¦ rakudo/r5175: cb33a2b5ff | ab5tract++ | 3 files

[21:58] <Geth> ¦ rakudo/r5175: Add worry for WhateverCode on LHS of smartmatch

[21:58] <Geth> ¦ rakudo/r5175: 

[21:58] <Geth> ¦ rakudo/r5175: Smartmatch only curries `Whatever`, so any user that provides

[21:58] <Geth> ¦ rakudo/r5175: a `WhateverCode` expression as an LHS is likely to encounter

[21:58] <Geth> ¦ rakudo/r5175: a surprising failure (when compared to the behavior of most

[21:58] <Geth> ¦ rakudo/r5175: other infix operaators).

[21:58] <Geth> ¦ rakudo/r5175: 

[21:58] <Geth> ¦ rakudo/r5175: In order to be proactive and helpful to such users, we emit

[21:59] <Geth> ¦ rakudo/r5175: a descriptive worry in this scenario.

[21:59] <Geth> ¦ rakudo/r5175: review: https://github.com/rakudo/rakudo/commit/cb33a2b5ff

[22:20] <ab5tract> my only remaining confusion in all of this is why `*.(5)` doesn't curry here:

[22:20] <ab5tract> m: with -> Int $i { $i } { *.(5) == 5 ?? say "yeah" !! say "no" }

[22:20] <camelia> rakudo-moar 66c4acad2: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Whatever'␤  in block <unit> at <tmp> line 1␤␤»

[22:20] <ab5tract> m: with -> Int $i { $i } { $_.(5) == 5 ?? say "yeah" !! say "no" }

[22:20] <camelia> rakudo-moar 66c4acad2: OUTPUT: «yeah␤»

[22:21] <ab5tract> m: with -> Int $i { $i } { dd $_.(5) }

[22:21] <camelia> rakudo-moar 66c4acad2: OUTPUT: «5␤»

[22:21] <ab5tract> m: with -> Int $i { $i } { dd*.(5) }

[22:21] <camelia> rakudo-moar 66c4acad2: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "*" in expression "dd*.(5)" in sink context (line 1)␤block (;; $_ is raw)␤Use of Nil in numeric context␤  in block  at <tmp> line 1␤»

[22:21] <ab5tract> m: with -> Int $i { $i } { dd *.(5) }

[22:21] <camelia> rakudo-moar 66c4acad2: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Whatever'␤  in block <unit> at <tmp> line 1␤␤»

[22:22] <ab5tract> my confusion is based on my pre-existing general rule of thumb that dispatching a method on a Whatever is a sure-fire way to get a WhateverCode

[22:50] <ab5tract> sanity checking on the above:

[22:50] <ab5tract> m: with "lol" { say *.uc eq "Lol" ?? "yo" !! "no" }

[22:50] <camelia> rakudo-moar 66c4acad2: OUTPUT: «yo␤»

[23:37] *** sena_kun left
