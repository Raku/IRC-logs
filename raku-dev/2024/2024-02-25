[00:12] *** finanalyst left
[08:56] *** sena_kun joined
[09:26] <Geth> ¦ rakudo/main: 760e7a7271 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/MethodDelegation.nqp

[09:26] <Geth> ¦ rakudo/main: Streamline Metamodel::MethodDelegation

[09:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/760e7a7271

[10:52] <Geth> ¦ rakudo/main: eef5337156 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/Mixins.nqp

[10:52] <Geth> ¦ rakudo/main: Streamline Metamodel::Mixins

[10:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eef5337156

[11:42] <Geth> ¦ rakudo/main: 02aaf9e902 | (Elizabeth Mattijsen)++ | 2 files

[11:42] <Geth> ¦ rakudo/main: Add Metamodel::Composing role

[11:42] <Geth> ¦ rakudo/main: 

[11:42] <Geth> ¦ rakudo/main: This role provides a framework for all meta classes that need

[11:42] <Geth> ¦ rakudo/main: composing.

[11:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/02aaf9e902

[11:43] <Geth> ¦ rakudo/main: 0b759a7ac3 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ModuleHOW.nqp

[11:43] <Geth> ¦ rakudo/main: Streamline Metamodel::ModuleHOW

[11:43] <Geth> ¦ rakudo/main: 

[11:43] <Geth> ¦ rakudo/main: Also use the new Metamodel::Composing role

[11:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0b759a7ac3

[12:17] <Geth> ¦ rakudo/main: 614571d28f | (Elizabeth Mattijsen)++ | 2 files

[12:17] <Geth> ¦ rakudo/main: Make Metamodel::ClassHOW a consumer of ::Composing

[12:17] <Geth> ¦ rakudo/main: 

[12:17] <Geth> ¦ rakudo/main: Also add ::Composing.run_if_not_composed method for convenience

[12:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/614571d28f

[12:20] <lizmat> can we agree that during core / setting compilation, we will never have any race conditions, as it's all done in a single thread ?

[12:29] <Geth> ¦ rakudo/main: 67153138df | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/NativeHOW.nqp

[12:29] <Geth> ¦ rakudo/main: Make Metamodel::NativeHOW a consumer of ::Consuming

[12:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/67153138df

[12:45] <gfldex> Do we got a bot that allows full-text search on the Ecosystem?

[12:46] <lizmat> not that I know of

[12:46] <lizmat> OOC, you're interested in documentation, source or both ?

[12:47] <Geth> ¦ rakudo/main: 4c86ef7722 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ParametricRoleHOW.nqp

[12:47] <Geth> ¦ rakudo/main: Make Metamodel::ParametricRoleHOW a consumer of ::Consuming

[12:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4c86ef7722

[12:55] <lizmat> greppable6: Foo

[12:55] <lizmat> greppable6: help

[12:55] <greppable6> lizmat, Like this: greppable6: password # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Greppable

[12:55] <greppable6> lizmat, 3109 lines, 177 modules: https://gist.github.com/34074df8073fbab9a48d67b4cac6a905

[12:55] <lizmat> gfldex ^^

[12:59] *** vrurg_ joined
[12:59] *** vrurg left
[13:03] <Geth> ¦ rakudo/main: dab2c235db | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/PackageHOW.nqp

[13:03] <Geth> ¦ rakudo/main: Make Metamodel::PackageHOW consumer of ::Composing

[13:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dab2c235db

[13:07] <gfldex> greppable6: **@

[13:07] <greppable6> gfldex, Sorry, can't do that

[13:07] <lizmat> greppable6: \*\*@

[13:07] <greppable6> lizmat, 124 lines, 35 modules: https://gist.github.com/97d91afb22b0212059081472637abf22

[13:07] <gfldex> thanks!

[13:07] <lizmat> it'd doing a get-grep underneath, and I guess it doesn't escape *

[13:08] <lizmat> *it's

[13:12] <Geth> ¦ rakudo/main: c944dae4d6 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ConcreteRoleHOW.nqp

[13:12] <Geth> ¦ rakudo/main: Make Metamodel::ConcreteRoleHOW consumer of ::Composing

[13:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c944dae4d6

[13:17] <lizmat> greppably: Klingon

[13:17] <greppable6> lizmat, 3 lines, 3 modules: https://gist.github.com/7199c7ac7ef6af7f7babd6cb97e781dc

[13:18] <lizmat> meh: looks like the source of greppable6 is not up to date

[13:18] <lizmat> https://raku.land/zef:lizmat/L10N::TLH  is not listed

[13:20] <Geth> ¦ rakudo/main: 2e4113c577 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/NativeRefHOW.nqp

[13:20] <Geth> ¦ rakudo/main: Make Metamodel::NativeRefHOW consumer of ::Composing

[13:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2e4113c577

[13:31] <Geth> ¦ rakudo/main: 6987704759 | (Elizabeth Mattijsen)++ | 2 files

[13:31] <Geth> ¦ rakudo/main: Make Metamodel::EnumHOW consumer of ::Composing

[13:31] <Geth> ¦ rakudo/main: 

[13:31] <Geth> ¦ rakudo/main: Also relax sigature on default .compose, as it's not being checked

[13:31] <Geth> ¦ rakudo/main: anyway, so just blindly eat any nameds by default

[13:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6987704759

[13:46] *** MasterDuke joined
[13:46] <Geth> ¦ rakudo: gfldex++ created pull request #5532: Implement sub form of &trans, mainly to support feed operators.

[13:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5532

[13:47] <gfldex> m: my $*RAKU++ for -> **@ {};

[13:47] <camelia> rakudo-moar 2e4113c57: ( no output )

[13:47] <gfldex> I wonder if Larry added **@ to Signatures to support feed operators.

[13:48] <lizmat> quite possibly

[13:48] <MasterDuke> gfldex, lizmat: fyi, greppable6 uses moritz's old perl6-all-modules (i don't remember the name exactly), which hasn't been updated in years

[13:48] <lizmat> I wonder if it could be upgraded based on the REA

[13:50] <MasterDuke> lizmat: and re single-threaded core setting compilation. that's certainly the case now, but i hope we'd get to place where (all) compilation happens multi-threaded

[13:50] <gfldex> I wanted to query the Ecosystem because the feed operator is underused and I had the suspicion that **@ is also underused.

[13:50] <lizmat> I'm specifically asking about the core settig

[13:51] <lizmat> MasterDuke: I think that e.g. it should be possible to generate QAST and perhaps MAST asynchronously in RakuAST

[13:51] <lizmat> on a per routine basis

[13:51] <MasterDuke> yeah, but if we *can/could* do multi-threaded compilation, is there any reason the core setting *couldn't* be done multi-threaded?

[13:52] <lizmat> ok, lemme rephrase that as: can we expect the core setting *parse* stage to be single threaded always

[13:54] <MasterDuke> dunno. but i sort of hope not. unless it gets dramatically faster some other way, multi-threading seems like the best way to significantly speed it up

[13:55] <MasterDuke> now if that's 10+ years away in the best possible case, maybe we can make some tradeoffs now. but i wouldn't want to have something like python's GIL problem

[13:56] <MasterDuke> at least, if there are single-threaded assumptions that get baked in, i hope they're are very well documented in the code so we know exactly what/where needs to be addressed when we try to make it multi-threaded

[13:59] <lizmat> the reason I'm asking, is that there are *many* race potential race conditions in the MOP

[13:59] <lizmat> so I was thinking of giving each HOW class its own lock, and do all the potentially racy things in a protect block

[14:00] <lizmat> except when $*CORE-COMPILING is set, then the protect block would just run the code without locks

[14:02] <MasterDuke> (unrelated, but does https://github.com/rakudo/rakudo/blob/main/src/Perl6/Metamodel/ArrayType.nqp#L7 need to exist? isn't it 0 already by virtue of being a native?)

[14:03] <MasterDuke> maybe that would be a nice way to have the option of easily turning multi-threaded safety on

[14:04] <lizmat> good point, I'll get rid of it

[14:21] *** vrurg_ is now known as vrurg

[14:41] <Geth> ¦ rakudo/main: d49cd4e09f | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ArrayType.nqp

[14:41] <Geth> ¦ rakudo/main: Remove unnecessary TWEAK from Metamodel::ArrayType

[14:41] <Geth> ¦ rakudo/main: 

[14:41] <Geth> ¦ rakudo/main: Native ints instantiate to 0, Masterduke++

[14:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d49cd4e09f

[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[17:07] <Geth> ¦ rakudo/main: 9a82845494 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/NativeHOW.nqp

[17:07] <Geth> ¦ rakudo/main: Streamline Metamodel::NativeHOW

[17:07] <Geth> ¦ rakudo/main: 

[17:07] <Geth> ¦ rakudo/main: - make ctype -> nativesize mapping use a constant lookup

[17:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9a82845494

[17:32] <Geth> ¦ rakudo/main: de923f1b0f | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/NativeRefHOW.nqp

[17:32] <Geth> ¦ rakudo/main: Streamline Metamodel::NativeRefHOW

[17:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/de923f1b0f

[18:08] <Geth> ¦ rakudo/main: 1ce9b4c681 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/Nominalizable.nqp

[18:08] <Geth> ¦ rakudo/main: Streamline Metamodel::Nominalizable

[18:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1ce9b4c681

[18:20] <Geth> ¦ rakudo/main: 3c9f07a881 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/PackageHOW.nqp

[18:20] <Geth> ¦ rakudo/main: Streamline Metamodel::PackageHOW

[18:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3c9f07a881

[18:44] <japhb> lizmat: Are you sure that checking the value of a dynamic variable in order to elide a lock is actually a net win for us?  ISTR dynamic var lookups not being particularly speedy ....

[18:45] <lizmat> japhb: which dynvar are you referring to?

[18:47] <lizmat> also: in NQP, dynvars are relatively cheaper as they don't need to call &DYNAMOC

[18:47] <japhb> $*CORE-COMPILING

[18:48] <lizmat> ah that one...  that would only be checked once in the mainline, if I can help it :-)

[18:48] <japhb> Ah, gotcha.

[20:36] *** sena_kun left
[20:37] *** sena_kun joined
[23:24] *** sena_kun left
[23:44] *** MasterDuke left
