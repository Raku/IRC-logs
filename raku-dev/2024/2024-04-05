[09:02] *** lizmat joined
[09:05] *** Geth joined
[09:09] <lizmat> .

[09:10] <lizmat> it appears we lost our Internet connection during the night  :-(

[09:10] <lizmat> so potentially several hours are missing :-(

[10:36] <lizmat> vrurg: isn't it so that only type objects that have a GenericHOW are generic ?

[10:36] <tellable6> lizmat, I'll pass your message to vrurg

[12:57] <Geth> ¦ rakudo/main: 502a6a15fe | (Elizabeth Mattijsen)++ | src/core.c/Exception.rakumod

[12:57] <Geth> ¦ rakudo/main: Make X::Comp::BeginTime a bit more resilient

[12:57] <Geth> ¦ rakudo/main: 

[12:57] <Geth> ¦ rakudo/main: Against compilation errors early in the setting compilation

[12:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/502a6a15fe

[13:17] <vrurg_> lizmat: roles

[13:17] <tellable6> 2024-04-05T10:36:19Z #raku-dev <lizmat> vrurg: isn't it so that only type objects that have a GenericHOW are generic ?

[13:17] *** vrurg_ is now known as vrurg

[13:18] <lizmat> because a role can be parameterized and the parameterization may contain a generic ?

[13:23] <vrurg> Exactly.

[13:24] <lizmat> ack

[13:24] <vrurg> Basically, this is the primary way how we get generics in first place.

[13:25] <vrurg> Then, there are nominalizables. I.e. with T:D() we actually get a generic definite coercion.

[13:38] <ab5tract> shouldn't we already know whether roles can parameterize based on their declaration?

[13:43] <ab5tract> ah, nevermind, I grok the point now

[14:03] <[Tux]> MasterDuke: https://tux.nl/Talks/CSV6/speed4-20.html

[14:03] <tellable6> [Tux], I'll pass your message to MasterDuke

[14:04] <[Tux]> also note that the tux.nl domain has a chance of being EOL

[16:01] <Geth> ¦ rakudo/main: a4423566c7 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[16:01] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 1/N)

[16:01] <Geth> ¦ rakudo/main: 

[16:01] <Geth> ¦ rakudo/main: - rename some variables for clarity

[16:01] <Geth> ¦ rakudo/main: - saner handling of .yada checks

[16:01] <Geth> ¦ rakudo/main: - remove unneeded nqp::hllize()s.  At least on the MoarVM backend

[16:01] <Geth> ¦ rakudo/main:   they do not appear to be needed.

[16:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a4423566c7

[16:02] <lizmat> hmmmm  that is actually just RoleToRoleApplier  hmmm

[16:13] *** elcaro_ left
[16:44] <Geth> ¦ rakudo/main: 9f0b8689dc | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[16:44] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 2/N)

[16:44] <Geth> ¦ rakudo/main: 

[16:44] <Geth> ¦ rakudo/main: - more variable renaming for clarity

[16:44] <Geth> ¦ rakudo/main: - add helper sub for checking whether a method already exists

[16:44] <Geth> ¦ rakudo/main: - change for loop into while loop

[16:44] <Geth> ¦ rakudo/main: - extract submethod inclusion condition out of loop

[16:44] <Geth> ¦ rakudo/main: - refactor methods by name addition completely

[16:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9f0b8689dc

[17:18] <Geth> ¦ rakudo/main: 5256102d98 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[17:18] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 3/N)

[17:18] <Geth> ¦ rakudo/main: 

[17:18] <Geth> ¦ rakudo/main: - some variable renaming

[17:18] <Geth> ¦ rakudo/main: - change for loops to while loops

[17:18] <Geth> ¦ rakudo/main: - refactor target method addition

[17:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5256102d98

[17:42] <Geth> ¦ rakudo/main: a153c729c0 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[17:42] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToRoleApplier (Part 4/N)

[17:42] <Geth> ¦ rakudo/main: 

[17:42] <Geth> ¦ rakudo/main: - abstract method addition / collision recording in a helper sub

[17:42] <Geth> ¦ rakudo/main: - let both method and private method addition use this helper sub

[17:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a153c729c0

[18:24] <Geth> ¦ rakudo/main: f0d5a9425b | (Stefan Seifert)++ | 2 files

[18:24] <Geth> ¦ rakudo/main: RakuAST: fix symbols declared in role bodies disappearing for the resolver

[18:24] <Geth> ¦ rakudo/main: 

[18:24] <Geth> ¦ rakudo/main: After we finish parsing a role we replace the generated Block with a

[18:24] <Geth> ¦ rakudo/main: fully fledged Sub by moving over the block's body. The Block however is

[18:24] <Geth> ¦ rakudo/main: also a lexical scope and as such carries declarations that we also have

[18:24] <Geth> ¦ rakudo/main: to move to the new Sub object.

[18:24] <Geth> ¦ rakudo/main: 

[18:24] <Geth> ¦ rakudo/main: Fixes role R[::T] { package G { class A is Array[T] {} }; has @.a is G::A; }

[18:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f0d5a9425b

[18:35] <lizmat> aw, still 1019, nine++ nonetheless!

[19:04] <lizmat> greppable6: multi_methods_to_incorporate

[19:04] <greppable6> lizmat, Found nothing!

[19:19] <Geth> ¦ rakudo/is-item-redux: e62e394874 | ab5tract++ | 5 files

[19:19] <Geth> ¦ rakudo/is-item-redux: Scaffolding for 'is item' trait on parameters

[19:19] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/e62e394874

[19:24] <ab5tract> as suggested by lizmat++, restarting with the intent of using the is item trait solely as a tie-breaker in multi dispatch, rather than an actual working constraint on the argument's item-ness outside of a multi dispatch context

[20:08] <ab5tract> it would be great to dig to into the bottom of why 'callstatic' and 'callmethod' decont the args, but that's a bit beyond my current ken

[20:18] <ab5tract> TIL that the order of named args matters in multi dispatch.. (this seems wrong)

[20:18] <ab5tract> m: multi sub q(:@z, :@b) { say 1 }; multi sub q(:@b, :@z) { say 2 }; q :b([]), :z([])

[20:18] <camelia> rakudo-moar f0d5a9425: OUTPUT: «1␤»

[20:19] <ab5tract> let me rephrase: the ordering *doesn't matter from a caller standpoint

[20:20] <ab5tract> what seems wrong is that this doesn't result in an ambiguous disptach

[20:21] <lizmat> I vaguely recall the reason: optional named args are never part of initial candidate selection

[20:21] <lizmat> they only serve as a tie-braker in case of ambiguous dispatch: and the first matching wins

[20:21] <lizmat> so yes, the order in which you specify candidates *does* currently matter for optional named args

[20:22] <ugexe> m: multi sub q(:@z!, :@b!) { say 1 }; multi sub q(:@b!, :@z!) { say 2 }; q :b([]), :z([])

[20:22] <camelia> rakudo-moar f0d5a9425: OUTPUT: «1␤»

[20:22] <lizmat> heh

[20:22] <lizmat> interesting...  

[20:23] <lizmat> now, the reasoning for this behaviour, I'm not sure about...

[20:23] <ab5tract> I'm poking at this particular bear specifically to determine how complicated I should make the `is item` disambiguation

[20:25] <ab5tract> since the easy way is to record and compare the indices of `is item` params against the indices of capture args, which raises this question of the variable indices of named args and params 

[20:30] <ab5tract> but I'll consider worrying about named order as out of bounds for this current patch :)

[20:35] <lizmat> m: multi a(:$a, *%_) { dd %_ }; multi a(:$b, *%_) { dd %_ }; a :a(42), :b(666)

[20:35] <camelia> rakudo-moar f0d5a9425: OUTPUT: «{:b(666)}␤»

[20:36] <lizmat> m: multi a(:$a, *%_) { dd %_ }; multi a(:$b, *%_) { dd %_ }; a ::b(666), :a(42)

[20:36] <camelia> rakudo-moar f0d5a9425: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No such symbol 'b'␤at <tmp>:1␤------> %_ }; multi a(:$b, *%_) { dd %_ }; a ::b⏏(666), :a(42)␤»

[20:36] <lizmat> m: multi a(:$a, *%_) { dd %_ }; multi a(:$b, *%_) { dd %_ }; a :b(666), :a(42)

[20:36] <camelia> rakudo-moar f0d5a9425: OUTPUT: «{:b(666)}␤»

[20:37] <lizmat> ab5tract: ^^ how would you disambiguate that, other than by the order of the candidates ?

[20:37] <lizmat> m: multi a(:$a, *%_) { dd; dd %_ }; multi a(:$b, *%_) { dd; dd %_ }; a :b(666), :a(42)

[20:37] <camelia> rakudo-moar f0d5a9425: OUTPUT: «sub a(:$a, *%_)␤{:b(666)}␤»

[20:53] *** lizmat_ joined
[20:56] *** lizmat left
[20:58] <ab5tract> good question. *%_ does complicate the story significantly

[21:00] <ab5tract> but for explicitly defined params in a signature, my instinct would be to throw a compile time sorry: "(:$a, :$b) and (:$b, :$a) are ambiguous"

[21:03] <ab5tract> but anyway, I've absolutely never had to worry about this before and I don't expect it's a major trouble for other users

[21:05] <lizmat_> the *%_ is always implicit with methods

[21:06] *** lizmat_ left
[21:06] *** lizmat joined
[21:08] <ab5tract> sure, but I'm talking about explicitly defined parameters

[21:09] <lizmat> m: multi a(:$a, :$b) { dd }; multi a(:$a, :$b) { dd }; a :b(666), :a(42)

[21:09] <camelia> rakudo-moar f0d5a9425: OUTPUT: «sub a(:$a, :$b)␤»

[21:09] <lizmat> m: multi a(:$a, :$b) { dd }; multi a(:$b, :$a) { dd }; a :b(666), :a(42)

[21:09] <camelia> rakudo-moar f0d5a9425: OUTPUT: «sub a(:$a, :$b)␤»

[21:09] <lizmat> m: multi a(:$a, :$b) { dd "one" }; multi a(:$b, :$a) { dd "two"}; a :b(666), :a(42)

[21:09] <camelia> rakudo-moar f0d5a9425: OUTPUT: «"one"␤»

[21:10] <lizmat> I guess that *could* be a compile time error

[21:13] <ab5tract> I can understand the argument for the current behavior, but I think it might be more polite to let the user know that they are writing a multi that won't really multi

[21:40] <Geth> ¦ rakudo/is-item-redux: 1475aab465 | ab5tract++ | src/vm/moar/dispatchers.nqp

[21:40] <Geth> ¦ rakudo/is-item-redux: Add dispatch disambiguation for 'is item'

[21:40] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/1475aab465

[21:45] <Geth> ¦ rakudo/is-item-redux: db1404a74b | ab5tract++ | src/vm/moar/dispatchers.nqp

[21:45] <Geth> ¦ rakudo/is-item-redux: Add dispatch disambiguation for 'is item'

[21:45] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/db1404a74b

[22:17] <lizmat> so I have this patch for the RoleToRoleApplier that takes about 4 CPU seconds off of "make test" (191 -> 187)

[22:17] <lizmat> but it kills Inline::Perl5 and I can't figure out why  :-(

[22:18] <lizmat> will sleep on it&

