[01:23] *** librasteve_ left
[09:05] *** sena_kun joined
[09:59] *** sena_kun left
[10:14] *** andinus left
[10:15] *** andinus joined
[10:31] <Geth> ¦ rakudo/main: fd6ffe3310 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToClassApplier.nqp

[10:31] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToClassApplier (Part 1/N)

[10:31] <Geth> ¦ rakudo/main: 

[10:31] <Geth> ¦ rakudo/main: - split method lookup in local / non-local case

[10:31] <Geth> ¦ rakudo/main: - simplify lookups to bare nqp::existkey

[10:31] <Geth> ¦ rakudo/main: - move all error handling into separate methods to reduce bytecode

[10:31] <Geth> ¦ rakudo/main:   size for the fast path

[10:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fd6ffe3310

[10:56] <ab5tract> Looking for a way to determine the "shape" of a Parameter (eg, '$', '@', or '%') ... from the Parameter class code it really looks like the only option is to check the sigil. `$!container_descriptor` appears to be undefined for the general cases I've tried.

[11:07] <lizmat> good question, I propose to abstract that functionality into a Parameter.method, so we can easily make it a better check in the future

[11:44] <ab5tract> good answer :)

[12:42] <ab5tract> m: class C { multi method m(Positional $a where [&&] *.map({ $_ == 1|2 })) { say "scalar" }; multi method m(@a) { say "array" } }; (my $c = C.new).m([1,2]); $c.m([3,4])

[12:42] <camelia> rakudo-moar fd6ffe331: OUTPUT: «scalar␤scalar␤»

[12:43] <ab5tract> m: class C { multi method m(Positional $a where { [&&] $_.map({ $_ == 1|2 })}) { say "scalar" }; multi method m(@a) { say "array" } }; (my $c = C.new).m([1,2]); $c.m([3,4])

[12:43] <camelia> rakudo-moar fd6ffe331: OUTPUT: «scalar␤array␤»

[12:59] <ab5tract> ^^ this is weird, right?

[13:26] <lizmat> do you need the example to be methods?  

[13:27] <lizmat> m: multi m(Positional $a where [&&] *.map({ $_ == 1|2 })) { say "scalar" }; multi method m(@a) { say "array" }; m([1,2]); m([3,4])

[13:27] <camelia> rakudo-moar fd6ffe331: OUTPUT: «Potential difficulties:␤    Useless declaration of a has-scoped multi-method in mainline (did you mean 'my method m'?)␤    at <tmp>:1␤    ------> = 1|2 })) { say "scalar" }; multi method⏏ m(@a) { say "array" }; m([1,2]); m([3,4␤scalar…»

[13:27] <lizmat> m: multi m(Positional $a where [&&] *.map({ $_ == 1|2 })) { say "scalar" }; multi m(@a) { say "array" }; m([1,2]); m([3,4])

[13:27] <camelia> rakudo-moar fd6ffe331: OUTPUT: «scalar␤scalar␤»

[13:29] <lizmat> I wonder whether it would make sense to make the Parameter object available in where blocks somehow

[13:33] <Geth> ¦ rakudo: ab5tract++ created pull request #5543: Add multi disambiguation for positional scalars / use disambiguation in Array.splice

[13:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5543

[13:37] <ab5tract> this is just a weird behavior that I noticed while doing some testing of the multi disambiguation ("Now available in PR!") 

[13:39] * lizmat left some comments

[13:39] <lizmat> will look at it in more depth later

[14:13] <Geth> ¦ rakudo/main: aa02c8b89b | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToClassApplier.nqp

[14:13] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToClassApplier (Part 2/N)

[14:13] <Geth> ¦ rakudo/main: 

[14:13] <Geth> ¦ rakudo/main: - remove $!to_compose_meta attribute: it can be derived from $!to_compose

[14:13] <Geth> ¦ rakudo/main:   when needed

[14:13] <Geth> ¦ rakudo/main: - restructure helper subs and add a few new ones

[14:13] <Geth> ¦ rakudo/main: - turn error methods into error subs: we're in a class so that's possible

[14:13] <Geth> ¦ rakudo/main: - don't use attributes where local shortcuts can be used

[14:13] <Geth> ¦ rakudo/main: - fininsh streamlining the .apply method

[14:13] <Geth> ¦ rakudo/main: - some more internal comments

[14:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/aa02c8b89b

[14:53] <ab5tract> lizmat: thanks for once again giving me reason to dislike the JVM backend :/

[15:08] <ab5tract> just waiting for this thing to re-compile to test changes is going to be enough to drain a significant portion of my will to live, er, code

[15:13] <ab5tract> is there a way to disable the newdisp dispatcher in MoarVM so that I can at least test via a usable pipeline?

[15:14] <ab5tract>  +++ Generating	gen/jvm/ast.nqp  # it's been here for nearly 10 minutes already

[15:23] *** sena_kun joined
[15:41] <ab5tract> total time was closer to 30 minutes... I think I'd rather abandon the whole concept behind the PR then deal with developing under those conditions

[15:41] <ab5tract> *than

[15:57] <ab5tract> at least re-compilation is not quite so lengthy

[16:35] <lizmat> ab5tract: sorry

[16:36] <ab5tract> :)

[16:56] *** djinni`_ left
[17:14] *** djinni` joined
[17:21] <nine> JVM backend is slower but that sounds excessive. But then this step takes a surprisingly long time even on MoarVM

[17:42] <nine> m: role Foo[::T] {}; dd my Foo:D[Int] $i = Foo[Int].new

[17:42] <camelia> rakudo-moar aa02c8b89: OUTPUT: «Foo:D $i = Foo[Int].new␤»

[17:42] <nine> m: role Foo[::T] {}; dd my Foo:D[Int] $i .= new

[17:42] <camelia> rakudo-moar aa02c8b89: OUTPUT: «No appropriate parametric role variant available for 'Foo':␤    Cannot resolve caller (Foo); none of these signatures matches:␤        (::$?CLASS ::::?CLASS Mu, ::T Mu)␤  in block <unit> at <tmp> line 1␤␤»

[17:42] <nine> Another one of these bugs in the old frontend that become clear when you actually try to understand the code :)

[17:45] <lizmat> ab5tract: https://github.com/Raku/nqp/pull/816  may be of interest

[18:24] *** MasterDuke joined
[18:28] <MasterDuke> the jvm build is currently broken because of 196fbee64e8002272a4a7ed853315eedd160204f. i have been holding off on merging https://github.com/Raku/nqp/pull/816 because it break on windows, but may merge anyway since then at least things fail faster...

[18:46] <ab5tract> MasterDuke: thanks for mentioning this. it was breaking for me but I don't have the patience to bisect

[18:51] <ab5tract> Legacy dispatch can now also distinguish between $[] and []

[18:54] <Geth> ¦ rakudo/main: b411252a53 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToClassApplier.nqp

[18:54] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToClassApplier (Part 3/N)

[18:54] <Geth> ¦ rakudo/main: 

[18:54] <Geth> ¦ rakudo/main: - statically inline compose_method_table sub: it's only called in

[18:54] <Geth> ¦ rakudo/main:   one location, so why not have the code live there

[18:54] <Geth> ¦ rakudo/main: - streamline private/only method composition

[18:54] <Geth> ¦ rakudo/main: - add some more internal comments

[18:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b411252a53

[18:54] <lizmat> ab5tract++   whee!

[19:16] *** librasteve_ joined
[19:21] <ab5tract> lizmat: so how do I kick the tires on a blin run? I don't think I want to set that up on my local machine

[19:22] <lizmat> jdv probably knows

[19:40] <ab5tract> pinging jdv re: blin runs on PR branches

[20:20] <Geth> ¦ rakudo/main: d1a5b47970 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToClassApplier.nqp

[20:20] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToClassApplier (Part 4/N)

[20:20] <Geth> ¦ rakudo/main: 

[20:20] <Geth> ¦ rakudo/main: - make checking for suitable candidates much smarter and much less

[20:20] <Geth> ¦ rakudo/main:   involved, by having a local lookup hash with all candidates by name

[20:20] <Geth> ¦ rakudo/main: - added has_matching_candidate helper sub to check whether a given

[20:20] <Geth> ¦ rakudo/main:   code object has a matching candidate in a list of code objects

[20:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d1a5b47970

[20:21] <lizmat> this appears to bring CPU seconds of make spectest down from 1242 -> 1234, or .4%

[20:40] <ab5tract> Nice one!

[20:40] <lizmat> ah, 1230 even  :-)

[20:42] <Geth> ¦ rakudo/main: 3b736e56d6 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToClassApplier.nqp

[20:42] <Geth> ¦ rakudo/main: Streamline Metamodel::RoleToClassApplier (Part 5/5)

[20:42] <Geth> ¦ rakudo/main: 

[20:42] <Geth> ¦ rakudo/main: - streamline attributes, parents and array_type handling

[20:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3b736e56d6

[20:46] <japhb> If you mean it went 1242 -> 1230, that's a full 1%.  :-D

[20:47] <lizmat> well, almost

[20:47] <lizmat> m: say 1230 / 1242

[20:47] <camelia> rakudo-moar d1a5b4797: OUTPUT: «0.990338␤»

[21:09] <Geth> ¦ rakudo/main: c7d24b3dfb | (Elizabeth Mattijsen)++ | 2 files

[21:09] <Geth> ¦ rakudo/main: Don't bother passing the target in the stubs

[21:09] <Geth> ¦ rakudo/main: 

[21:09] <Geth> ¦ rakudo/main: It's always the same, and available when composing a class

[21:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c7d24b3dfb

[21:09] <lizmat> and that concludes my hacking for today&

[21:24] <ab5tract> enjoy your rest!

[23:31] *** sena_kun left
[23:34] <japhb> m: say 1229 / 1242

[23:34] <camelia> rakudo-moar c7d24b3df: OUTPUT: «0.989533␤»

[23:35] <japhb> lizmat: ^^ OK fine, within rounding error, 1230 is closer to 1% than 1129 is.  ;-)

[23:50] <jdv> ab5tract: it *should* work in docker

[23:50] <jdv> at least that's how i run it

[23:51] <ab5tract> Nice! Which Dockerfile do you use?

[23:51] *** sena_kun joined
[23:51] <jdv> its in blin

[23:52] <jdv> docker/Dockerfile iirc

[23:53] <jdv> it might have a missing builds issue though.  if it does i have a way around it but either AlexDaniel needs to fix it or we need to move it to community run (the mothership

[23:53] <jdv> )

[23:53] <ab5tract> Ah, I should have looked more carefully. I’ll try to add something to the blin documentation about it once I get it working

[23:53] <jdv> ok.  i think there's a doc in that dir

[23:54] <jdv> good luck

[23:54] <ab5tract> The readme could use a mention of it somewhere near the skull emoji, I reckon :)

[23:55] <jdv> its pretty resource intensive and takes a while to run (at least on my piddly box)

[23:56] <ab5tract> Thanks for the heads up. I’ll put some extra focus on patience

[23:58] *** librasteve_ left
