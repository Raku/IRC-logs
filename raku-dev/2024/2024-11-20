[00:11] *** gfldex left
[00:22] *** lizmat joined
[00:32] *** gfldex joined
[00:40] *** gfldex left
[00:42] *** gfldex joined
[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[08:24] *** librasteve_ joined
[09:02] *** sena_kun joined
[09:34] *** sena_kun left
[09:56] *** sena_kun joined
[10:24] *** sena_kun left
[12:46] *** donaldh joined
[12:53] <[Coke]> lovely. powershell isn't utf8. it's "utf8 with BOM"

[12:59] <[Coke]> and if no BOM, you get some windows encoding, and so mojibake.

[13:19] <[Coke]> (also chcp doesn't seem to fix it. :(

[13:24] <timo> how does "utf8 with bom" even work for a shell

[13:33] *** librasteve_ left
[15:04] <timo> given the path to a source file installed in a CompUnit Repository, how do i find the distribution it belongs to? the only way i can see is to search through the dist/ folder for any files that have the filename in it

[15:06] <timo> i can go from the source to any files that are precomped from it, but that only gives me stuff that file depends on, and apparently not a hint for where the file comes from?

[15:10] <ugexe> it probably doesnt matter, but you'd have to ask to find source files installed i a CompUnit Repository *Installation*

[15:10] <ugexe> other CURs may not even have files on disk, i.e. https://github.com/ugexe/Raku-CompUnit--Repository--Github

[15:11] <ugexe> otherwise you can probably grep the files in dist/ for provides.values.file

[15:12] <ugexe> when distributio is installed the meta6.json provides section is mutated (which is bad and dumb but lets ignore that) to contain vallue of not "Foo::Bar" but "Foo::Bar" => { "file":$some_sha1 }

[15:13] <timo> ah, right. i'm writing a piece of code that turns the path from an annotation in bytecode into something clickable to open the source (hopefully even at the right line number). so that would be a file:/// url in some cases, an https:// url in other cases, and just nothing in the more complicated cases

[15:14] <timo> so it's okay if there's not actually a file on disk that i can point the user at, as long as i can get something url-like in common cases

[15:18] <ugexe> ah ok. note that you can't edit such source files and have those changes visible, but certainly still useful for seeing the code itself

[15:19] <timo> indeed. there would ideally be some kind of mechanism for the user to provide a way to find the local checkout they installed that dist from

[15:20] <timo> though on the other hand, this is for the debugger, so jumping to the file on disk that was used for compilation is better than going to the "latest" version of the file in the source code repo

[15:20] <ugexe> in this scenario do you care if they have been loaded already? CompUnit object has the distribution set on it

[15:20] <ugexe> although maybe that is only set when in certain situations

[15:21] <timo> the debug client runs in its own process, and while it can theoretically invoke code on the debuggee, i'm not sure if i want to do it like that?

[15:21] <ugexe> the thing is if it jumps to the file used for compilation and you edit that file, the original compiled file would still exist and thus be loaded

[15:22] <timo> oh, is there a lexical actually somewhere in the outers of any frame i might have?

[15:22] <timo> or is it like a PseudoStash situation where the lookup would be done relatively late

[15:22] <timo> yes, that's true

[15:23] <timo> ... when it's in a backtrace, the file names have the distribution name in them in parenthesis LOL

[15:24] <ugexe> those are module names i thought

[15:24] <timo> oh, yes that's right

[15:24] <timo> but also, when they go into the tables used inside of moarvm for breakpoints, i cut that off because until now the user would have to know to literally type it in exactly like that

[15:26] <ugexe> zef locate $some-sha1 --sha1

[15:26] <ugexe> https://github.com/ugexe/zef/blob/a103ae4ac7f40f2995bbafc10870848b6d49f4e7/lib/Zef/CLI.rakumod#L801-L829

[15:27] <ugexe> that is how zef looks them up although its using some implementation details like assuming the directory structure of CURI

[15:30] <timo> i think i'd like a 20/80 solution here :D

[15:32] <timo> Comma has a big benefit here, since it already knows basically everything about the code you're debugging, since if i remember correctly you can't just attach it to a random program you're running manually

[15:33] <timo> plus it has a proper parse tree of the code and all that jazz

[15:40] <timo> annoyingly, there is currently nothing in the debug server protocol that lets us get an object's WHO or HOW or WHAT

[17:04] <patrickb> I still want to put the source into the comp unit itself. But I also still have no idea what I'm doing in that domain. :-P

[17:39] *** librasteve_ joined
[20:09] <timo> that's fine if you have a good way to display it

[21:21] *** sena_kun joined
[21:23] <ugexe> i think most places we do CompUnit.new(...) we have a mechanism for accessing the source for when set handle => $precomp-code // &load-fromsource

[21:25] <ugexe> for example: https://github.com/rakudo/rakudo/blob/d00d8497ec7ae068117d04934878c38e68103ee8/src/core.c/CompUnit/Repository/AbsolutePath.rakumod#L33-L42

[21:26] <ugexe> ah i guess in that example you dont know the source file if $precompiled is true

[21:41] <timo> the debug client is very happy when asked about the positionals of an array with 78518 entries

[21:43] <timo> there's a spot where i flatten the list of things when formatting them for table printing, so it's now hard-capped to 65535 until i change that, but what's the sense in spewing 65k lines to the terminal

[21:46] <timo> and maybe the positionals request should also be able to do pagination so you don't have to transfer the entirety of an object's contents to the client

[22:01] *** sena_kun left
[22:13] <ab5tract> That pagination idea sounds perfect!

[22:17] <timo> also annoying to implement i think

[22:18] <timo> but what i just made is a "show" that combines the effects of "metadata" + whichever are appropriate out of "attrs", "pos", and "assoc", and also recurses two levels deep

[22:22] <timo> something i have dearly missed for ... a little while :)

[22:56] <ab5tract> I can’t wait to see it in action

[23:00] <releasable6> Next release in ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:16] <timo> ab5tract: https://asciinema.org/a/ZUydbBeO06o54VelwomN7y3bG here's a quick recording of it

