[02:55] *** shareable6 joined
[02:55] *** [Coke]_ joined
[03:00] *** shareable6__ left
[03:00] *** tellable6 left
[03:00] *** notable6 left
[03:00] *** quotable6 left
[03:00] *** coverable6 left
[03:00] *** greppable6 left
[03:00] *** evalable6 left
[03:00] *** bisectable6 left
[03:00] *** [Coke] left
[03:00] *** nebuchad` left
[03:00] *** ilogger2 left
[03:21] *** tellable6 joined
[03:21] *** coverable6 joined
[03:21] *** notable6 joined
[03:21] *** bisectable6 joined
[03:21] *** quotable6 joined
[03:21] *** evalable6 joined
[03:24] *** greppable6 joined
[03:24] *** ilogger2 joined
[03:39] *** zostay_ joined
[03:41] *** SmokeMachine_ joined
[03:44] *** zostay left
[03:44] *** zostay_ is now known as zostay

[03:48] *** greenfork_ joined
[03:53] *** eof left
[03:53] *** SmokeMachine left
[03:53] *** greenfork left
[03:53] *** rypervenche left
[03:53] *** JRaspass left
[03:53] *** greenfork_ is now known as greenfork

[03:53] *** SmokeMachine_ is now known as SmokeMachine

[03:54] *** rypervenche joined
[03:55] *** eof joined
[03:58] *** JRaspass joined
[04:03] *** [Coke]_ is now known as [Coke]

[04:08] *** eof left
[04:08] *** summerisle joined
[08:46] *** sena_kun joined
[08:53] <lizmat> bisectable6: old=2024.04 dd Failure.new

[08:53] <bisectable6> lizmat, Bisecting by output (old=2024.04 new=f521883) because on both starting points the exit code is 0

[08:53] <bisectable6> lizmat, bisect log: https://gist.github.com/f401c830019989eb67a7bc2e6bc51866

[08:53] <bisectable6> lizmat, (2024-05-16) https://github.com/rakudo/rakudo/commit/e1bd3ffd3e6f93a3314bc2948d5598295123298f

[09:38] <ab5tract> well that's an unexpected side effect :/

[09:38] <lizmat> yeah, looking at it now

[10:05] <lizmat> all those pesky little passages  :-(

[10:54] *** finanalyst joined
[11:00] <lizmat> ab5tract: seems your last MAIN fixes also have some fallout

[11:00] <lizmat> WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was:

[11:00] <lizmat> No such symbol 'foo'

[11:01] <lizmat> basically, any argument given generates this  :(

[11:01] <ab5tract> It shouldn’t? I wrapped the accesses in try

[11:01] <ab5tract> Will take a look when I get back to the computer

[11:01] <lizmat> not sure what's going on here, but it's pretty annoying  :-)

[11:02] <lizmat> and left me on a wild goose chase as to how my dd changes where responsible for it :-(

[11:03] <ab5tract> Ahh, shit. Sorry to hear that

[11:04] <ab5tract> Weird that none of the main-specific tests were failing. Anyway , I will fix it this afternoon

[11:04] <Geth> ¦ rakudo/main: 0a0435d7f8 | (Elizabeth Mattijsen)++ | 2 files

[11:04] <Geth> ¦ rakudo/main: Make dd handle Failures better

[11:04] <Geth> ¦ rakudo/main: 

[11:04] <Geth> ¦ rakudo/main: And generally make for a more pleasant experience by e.g. removing

[11:04] <Geth> ¦ rakudo/main: 'Mu' from type information, and "Backtrace.new) from Failure showing

[11:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0a0435d7f8

[11:06] <lizmat> m: dd try Failure.new

[11:06] <camelia> rakudo-moar f52188348: OUTPUT: «Nil␤»

[11:22] <Geth> ¦ rakudo/main: 5fbda71d7e | (Elizabeth Mattijsen)++ | src/core.c/Main.rakumod

[11:22] <Geth> ¦ rakudo/main: Fix warning on each CLI argument

[11:22] <Geth> ¦ rakudo/main: 

[11:22] <Geth> ¦ rakudo/main: ::(a) was *not* protected with a try

[11:22] <Geth> ¦ rakudo/main: 

[11:22] <Geth> ¦ rakudo/main: And some code synthetics

[11:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5fbda71d7e

[11:23] <Geth> ¦ nqp/main: 597f46f019 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[11:23] <Geth> ¦ nqp/main: Bump MoarVM to get MasterDuke17++ bigint ops error fixes

[11:23] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/597f46f019

[11:25] <lizmat> ab5tract: fixed the warning

[11:25] <lizmat> noticed that the new mod nqp ops are not mentioned in https://github.com/Raku/nqp/blob/main/docs/ops.markdown#const yet

[11:25] <ab5tract> Ahh, thanks!

[11:25] <lizmat> could you add them?

[11:26] <ab5tract> Sure thing.

[11:29] <ab5tract> nine: Is M#1803 up to snuff?

[11:29] <linkable6> M#1803 [open]: https://github.com/MoarVM/MoarVM/pull/1803 Provide some mechanisms for introspecting file mode

[11:30] <lizmat> ab5tract: it is for me, but I didn't want to mix it with MasterDuke's PR because of blin bisectability

[11:31] * nine is taking a look

[11:32] <nine> Though I'm quite underpowered today. A week at the construction site for a friend's new house left me a bit drained. If only I had studied something useful. I hear software developer would be a quite comfy job

[11:32] <lizmat> hehe  :-)

[11:32] <ab5tract> :)

[11:33] <Geth> ¦ rakudo/main: 5d6a7dfcac | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[11:33] <Geth> ¦ rakudo/main: Bump NQP to get MasterDuke17++ bigint ops error fixes

[11:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5d6a7dfcac

[11:52] <nine> Left a review

[11:54] <Geth> ¦ rakudo/lizmat-aretype: c49797f649 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[11:54] <Geth> ¦ rakudo/lizmat-aretype: Introduce Any.are(type --> Bool:D)

[11:54] <Geth> ¦ rakudo/lizmat-aretype: 

[11:54] <Geth> ¦ rakudo/lizmat-aretype: This would allow a shorter way to say:

[11:54] <Geth> ¦ rakudo/lizmat-aretype: 

[11:54] <Geth> ¦ rakudo/lizmat-aretype:     sub a(@a where .are ~~ Int) { }

[11:54] <Geth> ¦ rakudo/lizmat-aretype: 

[11:54] <Geth> ¦ rakudo/lizmat-aretype: namely:

[11:54] <Geth> ¦ rakudo/lizmat-aretype: <…commit message has 11 more lines…>

[11:54] <Geth> ¦ rakudo/lizmat-aretype: review: https://github.com/rakudo/rakudo/commit/c49797f649

[11:54] <Geth> ¦ rakudo: lizmat++ created pull request #5571: Introduce Any.are(type --> Bool:D)

[11:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5571

[12:43] <ab5tract> nine: so that poor excuse for a pointer-y type check was only working because the ! operator was applying to the LHS, not the expression :)

[12:43] <ab5tract> but it's been gone for a little while now.

[12:44] <ab5tract> Just pushed some resolutions to your reviews. We've only got a single mode flag and while it is still set via an rw parameter, I've removed that extra function and its call and now set it in the same function that does the regular flag setup.

[12:48] <ab5tract> MasterDuke17: thanks for the review on the MoarVM PR. Somehow I didn't get pinged about them in the GH app

[12:48] <tellable6> ab5tract, I'll pass your message to MasterDuke

[12:55] <ab5tract> lizmat: I really like that change to `.are`

[12:56] <ab5tract> but doesn't that where in the commit need a `*.are(Int)` or a `{ .are(Int) }`

[13:21] <Geth> ¦ nqp/main: 51dd8b9444 | ab5tract++ | docs/ops.markdown

[13:21] <Geth> ¦ nqp/main: Document OPEN_MODE_*

[13:21] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/51dd8b9444

[16:57] *** vrurg left
[16:57] *** vrurg joined
[17:17] <ab5tract> nine: I _think_ third time is the charm :)

[17:23] <lizmat> ab5tract: nope

[17:24] <lizmat> sub a(@a where .are(Int))

[17:24] <lizmat> is enough

[17:26] *** finanalyst left
[17:26] <ab5tract> ok, that's a) great, b) surprising

[17:27] <lizmat> why?

[17:27] <lizmat> m: sub a(@a where .are ~~ Int) { dd @a ); a (1,2,3)

[17:27] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> sub a(@a where .are ~~ Int) { dd @a ⏏); a (1,2,3)␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        s…»

[17:27] <ab5tract> it's not are specific

[17:27] <lizmat> m: sub a(@a where .are ~~ Int) { dd @a }; a (1,2,3)

[17:27] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «(1, 2, 3)␤»

[17:27] <lizmat> that already works ?

[17:27] <lizmat> m: sub a(@a where .are ~~ Int) { dd @a }; a (1,2,3,"foo")

[17:27] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «Constraint type check failed in binding to parameter '@a'; expected anonymous constraint to be met but got List ((1, 2, 3, "foo"))␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:28] <ab5tract> I didn't mean that its surprising that it works for .are

[17:28] <ab5tract> I just meant I am surprised that the implicit topicalization doesn't require a block

[17:28] <lizmat> the condition is thunked afaik

[17:37] <ab5tract> indeed. I think its just a brain fart or something

[17:38] <ab5tract> as I have done a few where-related things in RakuAST, I must have already come across this :)

[17:38] <lizmat> yeah  you have :-)

[17:39] <lizmat> but I know you can develop some tunnel vision when having worked on the same type of issue for a while

[17:39] <lizmat> been there, done that :-)

[17:43] <ab5tract> :)

[20:01] *** MasterDuke joined
[20:02] *** finanalyst joined
[21:47] *** finanalyst left
[22:23] *** sena_kun left
