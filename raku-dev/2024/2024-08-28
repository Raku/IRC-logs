[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[05:02] <timo> m: try { my Int $lol = "a"; CATCH { .raku.say } }

[05:02] <camelia> rakudo-moar 24bc8f41e: OUTPUT: «Method ContainerDescriptor.raku not found␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[05:02] <timo> bisectable: try { my Int $lol = "a"; CATCH { .raku.say } }

[05:02] <bisectable6__> timo, Will bisect the whole range automagically because no endpoints were provided, hang tight

[05:03] <bisectable6__> timo, Output on all releases: https://gist.github.com/c4eefa63a778273e56637f0481b9bc86

[05:03] <bisectable6__> timo, More than 3 changes to bisect, please try a narrower range like old=2024.03 new=HEAD

[05:11] <timo> too internals-y to have a .gist, .Str, or .raku i suppose

[05:12] <timo> should the default raku method cope with objects that don't have any of the common stingifiers?

[06:09] <lizmat> m: my Int $lol = "a"; CATCH { .raku.say }

[06:09] <camelia> rakudo-moar 24bc8f41e: OUTPUT: «Method ContainerDescriptor.raku not found␤  in block <unit> at <tmp> line 1␤␤»

[06:11] <timo> m: my Int $lol = "a"; CATCH { .DUMP.say }

[06:11] <camelia> rakudo-moar 24bc8f41e: OUTPUT: «X::TypeCheck::Assignment<1>(␤    :desc(ContainerDescriptor<2>(...)),␤    :symbol("\$lol"),␤    :operation("assignment"),␤    :$!got("a"),␤    :$!expected(Int),␤    :$!ex(BOOTException<7>(...)),␤    :$!bt(▶Any)␤)␤Type check failed i…»

[06:13] <lizmat> these classes live in src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[06:13] <timo> yeah i saw them

[06:14] <lizmat> a .raku method is easily added

[06:14] <lizmat> I will be afk for today, so I won't be able to do that today

[06:14] <timo> or the default-raku method could check for the existence of a raku method and put something in the result instead of throwing an exception

[06:15] <timo> found something rakuast already does better than non-rakuast

[06:15] <timo> m: subset file of Str where "a".."h"; class A { has (file $.f, file $.g); }; A.new(f => "x", g => "y")

[06:15] <camelia> rakudo-moar 24bc8f41e: OUTPUT: «Type check failed in assignment to $!f; expected <anon> but got Str ("x")␤  in block <unit> at <tmp> line 1␤␤»

[06:16] <timo> the "expected <anon>" gets the proper name in it when RAKUDO_RAKUAST is turned on

[06:16] <timo> splitting it into two has statements also makes the name of the type show up

[06:28] <timo> m: Promise.in(1).then({ say "timeout"; exit }); try { say "a".pred; CATCH { default { say DUMP $_ } } }

[06:28] <camelia> rakudo-moar 24bc8f41e: OUTPUT: «Use of uninitialized value element of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤timeout␤  in block  at <tmp> line 1␤Use of uninitialized value element of type Any in …»

[06:28] <timo> this infinitely recurses while trying to stringify stuff

[06:31] <timo> yeah, it's Failure that's doing it

[06:43] <timo> m: Promise.in(2).then({ say "timeout"; exit }); sub fails { fail "aaaah" }; say DUMP fails

[06:43] <camelia> rakudo-moar 24bc8f41e: OUTPUT: «Use of uninitialized value element of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤timeout␤  in block <unit> at <tmp> line 1␤Use of uninitialized value element of type A…»

[06:48] *** kjp left
[07:12] <timo> it occurs to me that when DUMP uses nqp::where to identify objects it's seen before, and there's a GC run in the middle of running DUMP, then the numbers become invalid / can collide

[07:21] *** tonyo left
[07:21] *** tonyo joined
[07:43] *** kjp joined
[07:46] *** kjp left
[07:47] *** kjp joined
[07:50] *** lizmat_ joined
[07:54] *** lizmat left
[07:56] *** sena_kun joined
[08:17] <timo> m: class Tester { has Str $.bar; method yoink { self.new: bar => fails } }; sub fails { "fails".Failure }; my $to = Tester.new: bar => "aha"; for ^3 { try $to = Tester.yoink; say "afterwards: $to.raku()"; }; $*VM.request-garbage-collection xx 6; say "done"; # R4852

[08:17] <camelia> rakudo-moar 24bc8f41e: OUTPUT: «afterwards: Tester.new(bar => "aha")␤WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was:␤fails␤  in sub fails at <tmp> line 1␤…»

[08:18] <timo> not sure what should be done about this; should attempting to put a Failure into a parameter where it doesn't type-fit blow it up, or should we ask the language user to .self after an operation that may return a Failure?

[08:19] <timo> blow it up, or defuse it, both would be okay i guess?

[08:20] <timo> .seen grondilu

[08:20] <tellable6> timo, I saw grondilu 2023-12-10T16:58:07Z in #raku: <grondilu> m: my @idx = (1;2); say [[1,2,3],[4,5,6],[7,8,9]][|@idx]

[08:24] *** sena_kun left
[09:52] <ab5tract> #R4852

[09:53] <ab5tract> Huh, I thought linkable6 would provide a quick link

[09:53] <ab5tract> R#4582

[09:53] <linkable6> R#4582 [closed]: https://github.com/rakudo/rakudo/pull/4582 Fixes `require STUB:file<>` bug #4488

[09:53] <ab5tract> There we go

[11:56] <timo> but R#4852 definitely exists too and that really is the one i mean

[11:56] <linkable6> R#4852 [open]: https://github.com/rakudo/rakudo/issues/4852 WARNING: unhandled Failure detected in DESTROY. No such symbol '<class 'numpy.int64'>'

[12:23] *** dawids joined
[12:44] <timo> do we perhaps want to use nqp-m instead of nqp-j to run tools/build/raku-ast-compiler.nqp? it's slow as molasses on the jvm backend for whatever reason

[13:00] *** greenfork left
[13:00] *** patrickb left
[13:01] *** greenfork joined
[13:01] *** patrickb joined
[13:20] <[Coke]> sneaky but probably fine.

[13:41] <timo> so, i see the NFA crossing huge spans of input. i guess not being able to pass down fates into subrules hurts us a lot here?

[13:41] <timo> src/Raku/ast/expressions.rakumod

[13:41] <timo> nfa ran from 943 to 96929 in 7532

[13:41] <timo> nfa ran from 1041 to 96929 in 7347

[13:42] <timo> nfa ran from 1260 to 96929 in 7472

[13:42] <timo> nfa ran from 1855 to 96929 in 7404

[13:42] <timo> that's milliseconds at the end there

[13:43] *** finanalyst left
[13:59] *** dawids left
[14:13] <timo> wow that's ... a lot faster huh

[14:16] <timo> moar: before:   7.41s  after:   0.91s

[14:16] <timo> jvm :                  after: 10.38s

[14:30] <timo> .o( why am i running this on a hot day )

[14:45] <timo> jvm : before: 1634.00s after:  10.38s

[14:46] <nine> What is this magic trick you're using there?

[14:46] <timo> hehe.

[14:46] <timo> do you know the raku ast "compiler"?

[14:50] <nine> sure

[14:50] <timo> well, there's this big token called "nqp-code" that "tokenizes" the source

[14:51] <timo> unfortunately, it seems like we're generating an NFA that tends to slurp an extreme amount of input

[14:52] <timo> in order to decide for one bit; now that bit could be an inner nqp-code which can be very long, or a single identifier or string or comment, which is usually relatively short

[14:53] <timo> oh, btw, when i say 10.3 seconds that's user time, it's actually running at 363% cpu so it only elapses 3 seconds

[14:54] <timo> anyway, making the LTM for '(' <nqp-code> ')' and '['...']' and '{'...'}' terminate immediately after the opening paren/bracket/brace removes an immense amount of work

[14:55] <timo> and that's the story of how i made the ast compiler an extreme amount faster for the jvm backend

[14:55] <timo> thank you for coming to my LTM talk

[14:57] <nine> How do you terminate? a {}?

[14:57] <timo> yup, i put a {} before the <nqp-code>

[14:58] <timo> now i'm not exactly sure why the generated NFA actually made it to the EOF so easily

[14:58] <timo> it feels like there's some kind of mistake there

[15:00] <timo> i feel like it can't be anything other than the "other" branch that matches <-[{}()\[\]'"\s\w$/>]+ ... surely the \w in there isn't somehow causing it to be able to consume a '}' or ')' or ']'?

[16:48] <ab5tract> timo: wild! I wonder if this means JDK 20+ can finally compile `rakudo-j`

[17:53] *** finanalyst joined
[18:14] *** sena_kun joined
[19:19] <ab5tract> timo: have you pushed your adjustment anywhere? I have to test something in the old dispatcher and would love to not have to wait 30 minutes for the compile :)

[19:20] *** finanalyst left
[20:15] <Geth> ¦ rakudo/splice-is-item-again-twice: b2d3b4e1e8 | ab5tract++ | 7 files

[20:15] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Dispatch in Array.splice based in `is item` trait

[20:15] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[20:15] <Geth> ¦ rakudo/splice-is-item-again-twice: This allows the following to DWIM:

[20:15] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[20:15] <Geth> ¦ rakudo/splice-is-item-again-twice:     > use v6.e.PREVIEW;

[20:15] <Geth> ¦ rakudo/splice-is-item-again-twice:     > my @a = 1,2,3;

[20:15] <Geth> ¦ rakudo/splice-is-item-again-twice:     > @a.splice(1,1,$[7,8])

[20:15] <Geth> ¦ rakudo/splice-is-item-again-twice: <…commit message has 8 more lines…>

[20:15] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/b2d3b4e1e8

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: aabe618c01 | ab5tract++ | 7 files

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Dispatch in Array.splice based in `is item` trait

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: This allows the following to DWIM:

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice:     > use v6.e.PREVIEW;

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice:     > my @a = 1,2,3;

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice:     > @a.splice(1,1,$[7,8])

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: <…commit message has 8 more lines…>

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/aabe618c01

[20:17] <ab5tract> I think that does it..

[20:18] <ab5tract> Couldn't quite get a working version that auto-attached a required revision to the proto

[20:33] <Geth> ¦ rakudo/splice-is-item-again-twice: 832337754c | ab5tract++ | 7 files

[20:33] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Dispatch in Array.splice based in `is item` trait

[20:33] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[20:33] <Geth> ¦ rakudo/splice-is-item-again-twice: This allows the following to DWIM:

[20:33] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[20:33] <Geth> ¦ rakudo/splice-is-item-again-twice:     > use v6.e.PREVIEW;

[20:33] <Geth> ¦ rakudo/splice-is-item-again-twice:     > my @a = 1,2,3;

[20:33] <Geth> ¦ rakudo/splice-is-item-again-twice:     > @a.splice(1,1,$[7,8])

[20:33] <Geth> ¦ rakudo/splice-is-item-again-twice: <…commit message has 8 more lines…>

[20:33] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/832337754c

[20:36] <nine> Huh...I don't see a change in the PR

[20:37] <nine> find_best_dispatchee still does the find_method(nqp::decont(self), 'REQUIRED-REVISION', :no_fallback));

[20:38] <nine> Oh...some recent commit broke some 249 RakuAST spectests

[20:41] <nine> Maybe not! Those tests segfault and at least one of them recovered after deleting all .precomp

[20:44] <Geth> ¦ rakudo/main: e69bb58a71 | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[20:44] <Geth> ¦ rakudo/main: RakuAST: prohibit multiple CATCH/CONTROL statements per block

[20:44] <Geth> ¦ rakudo/main: 

[20:44] <Geth> ¦ rakudo/main: Fixes: CONTROL {}; CONTROL {} # to throw

[20:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e69bb58a71

[20:44] <nine> Yep, all's well again. 1143 passing

[20:52] <ab5tract> Ah, yeah I fixed that in a version that got stashed, one second

[21:04] <ab5tract> Oh yeah, that's why it gotstashed, because there's some stupid error about containerdescriptor

[21:14] <Geth> ¦ rakudo/splice-is-item-again-twice: 23ecc618fa | ab5tract++ | 7 files

[21:14] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Dispatch in Array.splice based in `is item` trait

[21:14] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[21:14] <Geth> ¦ rakudo/splice-is-item-again-twice: This allows the following to DWIM:

[21:14] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[21:14] <Geth> ¦ rakudo/splice-is-item-again-twice:     > use v6.e.PREVIEW;

[21:14] <Geth> ¦ rakudo/splice-is-item-again-twice:     > my @a = 1,2,3;

[21:14] <Geth> ¦ rakudo/splice-is-item-again-twice:     > @a.splice(1,1,$[7,8])

[21:14] <Geth> ¦ rakudo/splice-is-item-again-twice: <…commit message has 8 more lines…>

[21:14] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/23ecc618fa

[21:16] <ab5tract> that should work.. in fract, it would be possible to just take the approach used in `find_best_dispatchee` and use it in dispatchers.nqp

[21:26] *** lizmat_ left
[21:27] *** lizmat joined
[21:37] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: cf48d4f47c | (Timo Paulssen)++ | tools/build/raku-ast-compiler.nqp

[21:37] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: drastically speed up raku-ast-compiler.nqp

[21:37] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: 

[21:37] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: Terminating the LTM immediately after opening paren, bracket, or

[21:37] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: brace prevents the NFA from running all the way to the end of the

[21:37] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: file whenever it encounters an nqp-code token. This makes nqp-m

[21:37] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: finish the raku-ast-compiler in 4 seconds instead of 1600, and moar

[21:37] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: is a bit faster, too (but already plenty fast)

[21:37] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: review: https://github.com/rakudo/rakudo/commit/cf48d4f47c

[21:39] <timo> i think i might need someone to verify that my findings are actually correct. what if i brok something related to NFA in my nqp?

[21:53] <ab5tract> nine: in fact, the whole thing can be reconfigured so that the trait just updates $!dispatch_info directly, if that seems agreeable

[22:00] <ab5tract> timo: it’s kind of a shame that we don’t have smoke testing anymore

[22:08] <ab5tract> Though there probably aren’t enough rakudo-j installations in the wild to gather usable data anyway

[22:27] <timo> i thought we do blin runs before every release?

[22:28] *** sena_kun left
[22:46] <ab5tract> Not with the JVM version, afaik

[23:00] <releasable6> Next release in ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

