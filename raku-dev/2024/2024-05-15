[01:41] *** lizmat_ joined
[01:45] *** lizmat left
[04:48] *** MasterDuke left
[06:56] <[Tux]> jdv: https://tux.nl/Talks/CSV6/speed5.html

[06:57] <[Tux]> and that page is refreshed on every timing run

[07:32] *** lizmat_ left
[07:32] *** lizmat joined
[07:33] *** guifa left
[07:35] <ab5tract> lizmat: Good point. And probably more evidence that first should behave like map.

[07:35] <ab5tract> Related: am I crazy or did .kv used to output ([$k,$v], ...)? 

[07:35] <lizmat> maybe before the GLR

[07:40] <ab5tract> yeah, if so it's been a looong time

[07:40] <ab5tract> there was a .kxxv at that time too

[07:44] <ab5tract> ah, nope, that's a Baggy/Mixxy feature

[07:45] <lizmat> m: .say for <a a b b c c c>.Bag.kxxv   # indeed

[07:45] <camelia> rakudo-moar e227a4f29: OUTPUT: «b␤b␤c␤c␤c␤a␤a␤»

[08:00] <ab5tract> yeah, looks like it was pre-GLR: "Note that C<kv %hash> returns the same as C<zip(keys %hash; values %hash)>"

[08:00] <ab5tract> m: my %hash = ("x" X~ 1..5) Z=> 1..5; dd zip(%hash.keys, %hash.values)

[08:00] <camelia> rakudo-moar e227a4f29: OUTPUT: «(("x1", 1), ("x4", 4), ("x5", 5), ("x3", 3), ("x2", 2)).Seq␤»

[08:01] <ab5tract> conceptually I kind of preferred it that way, to be honest

[08:01] <ab5tract> but I will not stand in the way of history here :)

[08:03] <ab5tract> lizmat: should there be a ticket for fixing first to match map semantics?

[08:04] <lizmat> perhaps a problem solving one ?

[08:05] <ab5tract> ok, will try to get around to that later today

[10:15] <Geth> ¦ rakudo/main: 967d1a5a47 | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[10:15] <Geth> ¦ rakudo/main: Fix scoping issue in NativeCall

[10:15] <Geth> ¦ rakudo/main: 

[10:15] <Geth> ¦ rakudo/main: This was probably broken with 46a8f32472ea1d158b , but I have no idea

[10:15] <Geth> ¦ rakudo/main: why I didn't spot this before in make test :-(

[10:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/967d1a5a47

[10:19] *** sena_kun joined
[10:20] <Geth> ¦ rakudo/main: 2e05fe4d9a | (Elizabeth Mattijsen)++ | 6 files

[10:20] <Geth> ¦ rakudo/main: Replace outdated references to another language

[10:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2e05fe4d9a

[11:00] <Geth> ¦ rakudo/main: aec7a49d01 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[11:00] <Geth> ¦ rakudo/main: RakuAST: V<> semantics shouldn't extend a whole paragraph

[11:00] <Geth> ¦ rakudo/main: 

[11:00] <Geth> ¦ rakudo/main: As spotted by Coke++

[11:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/aec7a49d01

[12:34] <lizmat> m: (^Inf).reverse   # that should just not infiniloop

[12:34] <camelia> rakudo-moar aec7a49d0: ( no output )

[12:34] <lizmat> m: dd (^Inf).reverse   # that should just not infiniloop

[12:35] <camelia> rakudo-moar aec7a49d0: OUTPUT: «(timeout)»

[12:54] <Geth> ¦ rakudo/main: 5eb1da8c26 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.e/Fixups.rakumod

[12:54] <Geth> ¦ rakudo/main: Add Cool.nomark in 6.e (#5562)

[12:54] <Geth> ¦ rakudo/main: 

[12:54] <Geth> ¦ rakudo/main: As suggested in https://github.com/Raku/problem-solving/issues/427

[12:54] <Geth> ¦ rakudo/main: 

[12:54] <Geth> ¦ rakudo/main: Notes on implementation:

[12:54] <Geth> ¦ rakudo/main: - Cool.nomark converts to string and delegates to Str.nomark

[12:55] <Geth> ¦ rakudo/main: - in Str.nomark: check if empty string, return invocant if so

[12:55] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>

[12:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5eb1da8c26

[13:38] <Geth> ¦ rakudo/main: 26f1c49463 | (Elizabeth Mattijsen)++ | src/core.c/Range.rakumod

[13:38] <Geth> ¦ rakudo/main: Make (^Inf).reverse fail rather than infiniloop

[13:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/26f1c49463

[14:21] <ugexe> should it really not infiniloop?

[14:21] <ugexe> 1..Inf infiniloops as well

[14:22] <ugexe> indeed might seem a bit weird to see every value is 'Inf', but maybe that is correct?

[14:23] <ugexe> to be clear i'm not saying it is, i just know there seem to be non-intuitive rules for what to expect from infinities

[14:24] <ugexe> non-intuitive mathematical rules^ 

[14:28] <ugexe> m: say (-Inf..0).reverse.reverse.raku

[14:28] <camelia> rakudo-moar 26f1c4946: OUTPUT: «Failure.new(exception => X::Cannot::Lazy.new(action => ".reverse", what => "Seq"), backtrace => Backtrace.new)␤»

[15:13] <ab5tract> ugexe: it seems like a case we can trivially catch in RakuAST, throwing an exception that it will infiniloop. The user would then be free to catch and resume if that’s something that they actually want

[15:42] *** Geth left
[15:42] *** Geth joined
[16:04] <Geth> ¦ nqp/r1373: 4 commits pushed by ab5tract++

[16:04] <Geth> ¦ nqp/r1373: e809b15c36 | Check for dump capability first in nqp's dd

[16:04] <Geth> ¦ nqp/r1373: 4fc14959e6 | A few more features and conditions for dd

[16:04] <Geth> ¦ nqp/r1373: c9d8778ae2 | Extending NQPFileHandle

[16:04] <Geth> ¦ nqp/r1373: 58416a717a | Add open mode constants

[16:04] <Geth> ¦ nqp/r1373: review: https://github.com/Raku/nqp/compare/e809b15c36a0^...58416a717a15

[16:05] <ab5tract> git and I are in a bit of a fight today, it seems

[16:06] <Geth> ¦ nqp/r1373: 454ef9dfba | ab5tract++ | 2 files

[16:06] <Geth> ¦ nqp/r1373: Add open mode constants

[16:06] <Geth> ¦ nqp/r1373: 

[16:06] <Geth> ¦ nqp/r1373: This is useful for HLLs to check the (simple) open mode of

[16:06] <Geth> ¦ nqp/r1373: a BOOTIO. Simple here means only the ro/wo/rw part of the mode,

[16:06] <Geth> ¦ nqp/r1373: so no information about append/truncate/etc.

[16:06] <Geth> ¦ nqp/r1373: review: https://github.com/Raku/nqp/commit/454ef9dfba

[16:07] <Geth> ¦ nqp: ab5tract++ created pull request #822: Add open mode constants

[16:07] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/822

[16:07] <lizmat> ab5tract: the JVM ones need to be added at the end per item, due to JVM restrictions, if I re.ember correctly

[16:08] <Geth> ¦ rakudo/r1373: 91eeaa20d0 | ab5tract++ | src/core.c/IO/Handle.rakumod

[16:08] <Geth> ¦ rakudo/r1373: Move the open mode detection down a layer

[16:08] <Geth> ¦ rakudo/r1373: 

[16:08] <Geth> ¦ rakudo/r1373: This allows us to remove the additional instance

[16:08] <Geth> ¦ rakudo/r1373: variable from IO::Handle in order to avoid adding

[16:08] <Geth> ¦ rakudo/r1373: additional weight/complexity to an already unwieldy

[16:08] <Geth> ¦ rakudo/r1373: core class.

[16:08] <Geth> ¦ rakudo/r1373: 

[16:08] <Geth> ¦ rakudo/r1373: This depends on changes in MoarVM (M#1803) and

[16:08] *** finanalyst joined
[16:08] <Geth> ¦ rakudo/r1373: NQP (N#822).

[16:08] <linkable6> M#1803 [open]: https://github.com/MoarVM/MoarVM/pull/1803 Provide some mechanisms for introspecting file mode

[16:08] <Geth> ¦ rakudo/r1373: review: https://github.com/rakudo/rakudo/commit/91eeaa20d0

[16:08] <linkable6> N#822 [open]: https://github.com/Raku/nqp/pull/822 Add open mode constants

[16:09] <ab5tract> lizmat: ah, thanks for the heads up. in fact, I debated on including them... right now they aren't used at all

[16:09] <lizmat> well, if they won't be on the JVM backend, then best to exclude them

[16:10] <ab5tract> let me check how comprehensible the current error message is in JVM

[16:15] <ab5tract> I wonder if zoffix is smiling somewhere, watching his bug reports get fixed

[16:15] <ab5tract> he surely could get things to break

[16:16] <ab5tract> 20% of the open issues originate from him

[16:17] <lizmat> I'm pretty sure they also fixed a decent number of them

[16:26] <ab5tract> yeah, roughly 50/50 balance between open and closed

[16:29] <ab5tract> jdv: how careful are we WRT jvm during releases?

[16:30] <ab5tract> because `rakubrew build jvm 2024.04` just blew up on me

[16:31] <ab5tract> m: m: my $x = 42; .= flip with $x

[16:31] <camelia> rakudo-moar 26f1c4946: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Preceding context expects a term, but found infix .= instead.␤at <tmp>:1␤------> m: my $x = 42; .=⏏ flip with $x␤»

[16:31] <ab5tract> m: my $x = 42; .= flip with $x

[16:31] <camelia> rakudo-moar 26f1c4946: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Preceding context expects a term, but found infix .= instead.␤at <tmp>:1␤------> my $x = 42; .=⏏ flip with $x␤»

[16:32] <ab5tract> m: Q| my $x = 42; .= flip with $x |.AST.EVAL.say

[16:32] <camelia> rakudo-moar 26f1c4946: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Preceding context expects a term, but found infix .= instead.␤at /home/camelia/EVAL_0:1␤------>  my $x = 42; .=⏏ flip with $x ␤»

[16:41] <jdv> ab5tract: we are not

[16:41] <ab5tract> ack

[16:42] <jdv> [Tux]: thanks

[17:17] <ab5tract> yet another longstanding issue fixed in RakuAST! R#2295

[17:17] <linkable6> R#2295 [open]: https://github.com/rakudo/rakudo/issues/2295 [consistency][Fixed in RakuAST] Blocks don't get parametarized with return type

[17:18] <lizmat> nice!

[17:42] <lizmat> m: dd { :42a, :666b }.antipairs

[17:42] <camelia> rakudo-moar 26f1c4946: OUTPUT: «(666 => "b", 42 => "a").Seq␤»

[17:42] <lizmat> m: dd { :42a, :666b }.hyper.antipairs

[17:42] <camelia> rakudo-moar 26f1c4946: OUTPUT: «((:a(42)) => 0, (:b(666)) => 1).Seq␤»

[17:42] <lizmat> should we consider this difference a bug ?

[17:45] <lizmat> or is this a consequence of .hyper considering its invocant to be an Iterable, and thus in the case of an Associative, would produce Pairs

[17:52] <ab5tract> hmmm

[17:54] <ab5tract> since this

[17:55] <ab5tract> m: dd |{ :42a, :666b }.hyper

[17:55] <camelia> rakudo-moar 26f1c4946: OUTPUT: «:a(42)␤:b(666)␤»

[17:55] <ab5tract> and this

[17:55] <ab5tract> m: dd |{ :42a, :666b }

[17:55] <camelia> rakudo-moar 26f1c4946: OUTPUT: «:a(42)␤:b(666)␤»

[17:55] <ab5tract> are the same, I would lean towards bug

[17:59] <ab5tract> but then again, the explanation about invocant iterable makese sense to me

[18:04] <ab5tract> and probably my test cases are mostly irrelevant to the question, in retrospect, except inasmuch as to demonsrate that a user might expect a symmetry of behavior here 

[18:13] <lizmat> another interesting find:

[18:13] <lizmat> m: dd (^Inf).iterator.is-lazy

[18:13] <camelia> rakudo-moar 26f1c4946: OUTPUT: «Bool::True␤»

[18:13] <lizmat> m: dd (^Inf).hyper.iterator.is-lazy

[18:13] <camelia> rakudo-moar 26f1c4946: OUTPUT: «Bool::False␤»

[18:14] <lizmat> and thus:

[18:14] <lizmat> m: dd (^Inf).elems

[18:14] <camelia> rakudo-moar 26f1c4946: OUTPUT: «Failure.new(exception => X::Cannot::Lazy.new(action => ".elems", what => ""), backtrace => Backtrace.new)␤»

[18:14] <lizmat> m: dd (^Inf).hyper.elems

[18:14] <camelia> rakudo-moar 26f1c4946: OUTPUT: «(signal XCPU)»

[18:15] <lizmat> wow  :-)

[18:16] <ab5tract> never seen that signal before :O

[18:53] *** sena_kun left
[19:11] *** sena_kun joined
[19:19] <ab5tract> SEQUENCE.rakumod is a helluva drug

[19:19] <lizmat> tell me about it

[19:20] <ab5tract> any idea why '# don't sink return of take()' ?

[19:21] *** finanalyst left
[19:24] *** finanalyst joined
[19:32] <Geth> ¦ nqp/r1373: 56cd9e4dd1 | ab5tract++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[19:32] <Geth> ¦ nqp/r1373: Add open mode constants

[19:32] <Geth> ¦ nqp/r1373: 

[19:32] <Geth> ¦ nqp/r1373: This is useful for HLLs to check the (simple) open mode of

[19:32] <Geth> ¦ nqp/r1373: a BOOTIO. Simple here means only the ro/wo/rw part of the mode,

[19:32] <Geth> ¦ nqp/r1373: so no information about append/truncate/etc.

[19:32] <Geth> ¦ nqp/r1373: review: https://github.com/Raku/nqp/commit/56cd9e4dd1

[19:32] <Geth> ¦ nqp/main: 9cf971726a | ab5tract++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[19:32] <Geth> ¦ nqp/main: Add open mode constants

[19:32] <Geth> ¦ nqp/main: 

[19:32] <Geth> ¦ nqp/main: This is useful for HLLs to check the (simple) open mode of

[19:32] <Geth> ¦ nqp/main: a BOOTIO. Simple here means only the ro/wo/rw part of the mode,

[19:32] <Geth> ¦ nqp/main: so no information about append/truncate/etc.

[19:32] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/9cf971726a

[19:38] <lizmat> ab5tract: what would that mean

[19:39] <ab5tract> I have no clue, but the consequences of sink context are still a blind spot for me

[19:39] <lizmat> well, sink context makes "for" workl

[19:39] <lizmat> *work

[19:40] <ab5tract> Maybe it's to avoid useless use errors...

[19:40] <ab5tract> or worries, rather

[19:41] <ab5tract> but its also plain weird to me that the taken values aren't, like, used for anything

[19:41] <lizmat> they are gathered ?

[19:42] <ab5tract> ah, right, duh!

[19:43] <ab5tract> but then why assign the result of  take into unused temporary variables? I think that's what threw me off re: the take semantics

[19:43] <lizmat> because otherwise it *would* get sunk

[19:43] <ab5tract> well, I know a surefire way to see what blows up without them :)

[19:43] <lizmat> re sink:

[19:44] <lizmat> remember that:

[19:44] <lizmat> m: for ^3 { .say }

[19:44] <camelia> rakudo-moar 26f1c4946: OUTPUT: «0␤1␤2␤»

[19:44] <lizmat> is really:

[19:44] <lizmat> m: (^3).map({ .say }).iterator.sink-all

[19:44] <camelia> rakudo-moar 26f1c4946: OUTPUT: «0␤1␤2␤»

[19:44] <lizmat> under the hood

[20:01] <ab5tract> hmm.. 

[21:49] <ab5tract> wait.. does `take` work by throwing an exception? :O

[21:59] <ugexe> yes - https://stackoverflow.com/a/43333653/1772220

[22:00] *** finanalyst left
[22:06] <ab5tract> is that a major factor in how we generally consider gather/take to be unusably slow?

[22:07] <lizmat> it's one factor, yes

[22:07] <ab5tract> "unusably' is a bit uncharitable

[22:08] <lizmat> for the same reason I try to refrain from return / next / last in hot code

[22:25] <ab5tract>  now it's starting to all click together

[22:34] *** sena_kun left
[22:41] <ab5tract> now I'm reminded of a blog series about writing a text adventure using exceptions..

[22:42] <gfldex> ab5tract: I found sink-context very useful indeed: https://gfldex.wordpress.com/?s=sink

[22:44] <ab5tract> gfldex: thanks for the reference, will check these posts out

[23:05] <Geth> ¦ rakudo/r1399: ae6ccdc310 | ab5tract++ | src/core.c/Rakudo/SEQUENCE.rakumod

[23:05] <Geth> ¦ rakudo/r1399: Fix memory leaking in infinity-bound ...

[23:05] <Geth> ¦ rakudo/r1399: 

[23:05] <Geth> ¦ rakudo/r1399: It's simple: there's no reason to involve the `righti`

[23:05] <Geth> ¦ rakudo/r1399: iterator at all. Remove that, et voila, no memory leak

[23:05] <Geth> ¦ rakudo/r1399: for inifinite sequences.

[23:05] <Geth> ¦ rakudo/r1399: 

[23:05] <Geth> ¦ rakudo/r1399: There are only two possible `righti` for infinities:

[23:05] <Geth> ¦ rakudo/r1399: <…commit message has 11 more lines…>

[23:05] <Geth> ¦ rakudo/r1399: review: https://github.com/rakudo/rakudo/commit/ae6ccdc310

[23:09] <ab5tract> RT#131829 (just curious if it works)

[23:14] <Geth> ¦ rakudo/r1399: 24057e69cd | ab5tract++ | src/core.c/Rakudo/SEQUENCE.rakumod

[23:14] <Geth> ¦ rakudo/r1399: Fix memory leaking in infinity-bound ...

[23:14] <Geth> ¦ rakudo/r1399: 

[23:14] <Geth> ¦ rakudo/r1399: It's simple: there's no reason to involve the `righti`

[23:14] <Geth> ¦ rakudo/r1399: iterator at all. Remove that, et voila, no memory leak

[23:14] <Geth> ¦ rakudo/r1399: for inifinite sequences.

[23:14] <Geth> ¦ rakudo/r1399: 

[23:14] <Geth> ¦ rakudo/r1399: There are only two possible `righti` for infinities:

[23:14] <Geth> ¦ rakudo/r1399: <…commit message has 11 more lines…>

[23:14] <Geth> ¦ rakudo/r1399: review: https://github.com/rakudo/rakudo/commit/24057e69cd

[23:14] <Geth> ¦ rakudo: ab5tract++ created pull request #5569: Fix memory leaking in infinity-bound ...

[23:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5569

[23:16] <ab5tract> that's probably all for tonight :)

