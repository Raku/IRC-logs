[01:18] <ugexe> if it was fast enough more people might include it with their CI matrix

[05:17] *** Voldenet left
[07:18] *** finanalyst joined
[07:24] *** Voldenet joined
[07:27] <ab5tract> ah, on second thought I think it needs to be setup as it currently is, because the trait is applied prior to the call to `!create_dispatch_info`

[07:29] <ab5tract> but the jury is still out on which option (pre-filtering the candidates is better or doing it inside the loop) is better for `dispatchers.nqp`

[07:40] <ab5tract> ah, there's a few other touch-ups, and one more question: is getting the required revision via a call to find_method better than getting it through calling dispatch_info?

[08:02] *** sena_kun joined
[08:23] *** sena_kun left
[08:45] *** finanalyst left
[09:03] *** dawids joined
[09:37] *** dawids left
[09:45] <Geth> ¦ rakudo/splice-is-item-again-twice: f938727324 | ab5tract++ | 7 files

[09:45] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Provide `is revision-gated("6.x")` trait

[09:45] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[09:45] <Geth> ¦ rakudo/splice-is-item-again-twice: This trait is primarily intended for allowing multi candidates

[09:45] <Geth> ¦ rakudo/splice-is-item-again-twice: to be considered for dispatch only when the caller's compiler

[09:45] <Geth> ¦ rakudo/splice-is-item-again-twice: version is above a certain revision.

[09:45] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[09:45] <Geth> ¦ rakudo/splice-is-item-again-twice: By applying the trait to the proto at its minimum compatible

[09:45] <Geth> ¦ rakudo/splice-is-item-again-twice: <…commit message has 21 more lines…>

[09:45] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/f938727324

[09:45] <Geth> ¦ rakudo/main: de09b60b57 | (Stefan Seifert)++ | 2 files

[09:45] <Geth> ¦ rakudo/main: RakuAST: fix lexially scoped multi-part name roles not found at compile time

[09:45] <Geth> ¦ rakudo/main: 

[09:45] <Geth> ¦ rakudo/main: Turns out, there's no need for special handling for implicitly defined role

[09:45] <Geth> ¦ rakudo/main: groups. Just run the normal package installation code and it'll do

[09:45] <Geth> ¦ rakudo/main: everything we need.

[09:45] <Geth> ¦ rakudo/main: 

[09:45] <Geth> ¦ rakudo/main: Fixes: my role Foo::Bar {}; my constant Foo::Bar $a = Foo::Bar.new;

[09:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/de09b60b57

[10:27] <ab5tract> Huh, I wonder if that was always possible or if other changes made that workable.. I remember PackageInstaller being quite the bear

[10:44] <nine> Every time I encounter a multi-part name package problem, I suddenly find cleaning the appartment or doing book keeping quite attractive

[10:57] *** finanalyst joined
[11:30] <ab5tract> Lol

[11:33] <nine> So, 2023's book keeping is done. Time to pull out the vaccuum :)

[11:56] *** finanalyst left
[12:30] <timo> hm, are we making initial bits of an || alternation part of LTM?

[12:38] <nine> m: use v6.e.PREVIEW; Format.new: ""

[12:39] <camelia> rakudo-moar de09b60b5: ( no output )

[12:39] <nine> so far, so good, but:

[12:39] <timo> the ws token in nqp's grammar is not behaving optimally ...

[12:39] <nine> m: EVAL Q[ use v6.e.PREVIEW; Format.new: "" ]

[12:39] <camelia> rakudo-moar de09b60b5: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Undeclared name:␤    Format used at line 1␤␤»

[12:40] <nine> Turns out, switching language versions in an EVAL does not load that setting. And how could it? You'd still want the EVAL's outer lexical scope to be visible, too. IMHO it was a mistake to allow switching language versions in EVAL.

[12:41] <timo> oh, whew. time for a context sandwich

[12:51] <Geth> ¦ roast: ea5698910d | (Stefan Seifert)++ | S04-declarations/constant-6.d.t

[12:51] <Geth> ¦ roast: Fix odd number of arguments when assigning to hash error

[12:51] <Geth> ¦ roast: 

[12:51] <Geth> ¦ roast: These tests are looking for a compilation error. However a different

[12:51] <Geth> ¦ roast: compiler may run the expected check after the faulty assignment is

[12:51] <Geth> ¦ roast: already done. The test would then fail due to the unexpected error type.

[12:51] <Geth> ¦ roast: 

[12:51] <Geth> ¦ roast: Fix the unintersting error in the test code so we're really testing what

[12:51] <Geth> ¦ roast: the test is about.

[12:51] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ea5698910d

[12:51] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++

[12:51] <Geth> ¦ rakudo/main: bf371c6780 | RakuAST: throw error when constant initializer violates sigil type

[12:51] <Geth> ¦ rakudo/main: f3c9a598a0 | RakuAST: forbid parameterization of constants

[12:51] <Geth> ¦ rakudo/main: 6ad7aaa949 | RakuAST: fix compile time interpretation of number pair

[12:51] <Geth> ¦ rakudo/main: 0932318bee | RakuAST: fix losing outer context when switching language version in EVAL

[12:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/de09b60b574f...0932318bee67

[12:51] <nine> 1144

[12:55] <timo> 1114

[12:56] <nine> ?

[12:56] <timo> randomly the line i just had to breakpoind

[12:56] <jdv> it'd be great if we could hold off committing to main for the next few hours.  releasings are underway.

[12:56] <timo> thanks for your work jdv :+1:

[12:57] <jdv> my box is slow and so rebuilding and spectesting could be funner:(

[12:57] <nine> k

[12:57] *** [Coke] left
[12:58] <jdv> thanks 

[13:23] *** [Coke] joined
[13:28] <jdv> 40k commits.  woohoo!

[13:35] <jdv> changelogs are up

[13:35] <jdv> lizmat: ^

[13:36] <jdv> i have to do an errand for a bit and then will so the meat of it

[13:38] <jdv> did the make test # really go down by 2 or is there a mistake somewhere?

[13:39] <ab5tract> nine: looks like I need to change my commit message :)

[13:40] <ab5tract> Let me know if you have any other feedback

[13:43] <nine> Looks to me like the latest version still uses nqp::can and find_method to detect a revision gated routine?

[13:44] <nine> And yes, I just realized that it's a bit hypocritical of me to complain, given that I also use find_method for checking CUSTOM-DISPATCHER. Maybe that's also worth fixing. Or maybe my reservations are entirely unfounded after all

[14:32] <ab5tract> nqp::can is only used in the building of dispatch info

[14:33] <ab5tract> As I mentioned earlier today, one can’t add to dispatch info from within the trait

[14:33] <ab5tract> That gets run afterwards

[14:34] <ab5tract> I went with find_method because getting dispatch info back out also requires a method check

[14:35] <ab5tract> It seemed like 6 vs half dozen

[14:36] <ab5tract> The candidate checks are sped up by dispatch info, though

[14:41] <nine> My point is that it makes even building up that candidate list more expensive. And that happens once for every callsite of a multi even with newdisp. Raku being Raku this includes all places where an operator is used. That's why I'd prefer a flag in $!flags set by the trait.

[14:44] <ab5tract> When you mentioned this before, you said “maybe a flag”. I went with dispatch info and flags were not mentioned again. I’ll change this of course but I wouldn’t mind having an approach be ruled out earlier in the review cycle to avoid wasted effort.

[14:53] <nine> Ah, sorry about that. You're right, that could have been clearer.

[16:03] <ab5tract> No worries, I’ll flag this up instead

[16:29] <Geth> ¦ rakudo/release-2024.08: f90979577c | (Justin DeVuyst)++ | 3 files

[16:29] <Geth> ¦ rakudo/release-2024.08: Update changelog + announcement

[16:29] <Geth> ¦ rakudo/release-2024.08: 

[16:29] <Geth> ¦ rakudo/release-2024.08: Deliberately not logged:

[16:29] <Geth> ¦ rakudo/release-2024.08: 

[16:29] <Geth> ¦ rakudo/release-2024.08: [7ed82490][934e8610][9e1adaee][056c25e7][8fc83b33][6e6ce83a]

[16:29] <Geth> ¦ rakudo/release-2024.08: [5068524f][e2f2641c][1cfdd167][5cfa33aa][233fe99e][fab0ae21]

[16:29] <Geth> ¦ rakudo/release-2024.08: [423ede6f][e1ffa0fe][a9843ca5]

[16:29] <Geth> ¦ rakudo/release-2024.08: review: https://github.com/rakudo/rakudo/commit/f90979577c

[17:18] *** finanalyst joined
[17:19] <ab5tract> nine: do you reckon the new constant belongs to the `DISP_` family? or should I start a new strand called `ROUTINE_`?

[17:25] <ab5tract> oh, nice. it looks like `nqp::const` values aren't used for Routine flags :S

[17:59] <ab5tract> though, as far as magic numbers go, these are very nice.. why don't other flags use hex when defining themselves?

[18:02] <Geth> ¦ nqp/main: 4f2c54dacc | (Justin DeVuyst)++ | tools/templates/MOAR_REVISION

[18:02] <Geth> ¦ nqp/main: [release] Bump MoarVM revision to 2024.08

[18:02] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/4f2c54dacc

[18:02] <Geth> ¦ nqp/main: 684d80d09d | (Justin DeVuyst)++ | VERSION

[18:02] <Geth> ¦ nqp/main: [release] Bump VERSION to 2024.08

[18:02] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/684d80d09d

[18:02] <Geth> ¦ rakudo/release-2024.08: ae532ff832 | (Justin DeVuyst)++ | tools/templates/NQP_REVISION

[18:02] <Geth> ¦ rakudo/release-2024.08: [release] Bump NQP revision to 2024.08

[18:02] <Geth> ¦ rakudo/release-2024.08: review: https://github.com/rakudo/rakudo/commit/ae532ff832

[18:02] <Geth> ¦ rakudo/release-2024.08: e390ae09e8 | (Justin DeVuyst)++ | VERSION

[18:02] <Geth> ¦ rakudo/release-2024.08: [release] Bump VERSION to 2024.08

[18:02] <Geth> ¦ rakudo/release-2024.08: review: https://github.com/rakudo/rakudo/commit/e390ae09e8

[18:04] <Geth> ¦ rakudo: jdv++ created pull request #5634: Release 2024.08

[18:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5634

[18:04] <Geth> ¦ rakudo/main: 4 commits pushed by (Justin DeVuyst)++

[18:04] <Geth> ¦ rakudo/main: f90979577c | Update changelog + announcement

[18:04] <Geth> ¦ rakudo/main: ae532ff832 | [release] Bump NQP revision to 2024.08

[18:04] <Geth> ¦ rakudo/main: e390ae09e8 | [release] Bump VERSION to 2024.08

[18:04] <Geth> ¦ rakudo/main: 6ca3cdf1be | Merge pull request #5634 from rakudo/release-2024.08

[18:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/0932318bee67...6ca3cdf1be95

[18:17] <jdv> releases are all done.  thanks!

[18:18] <jdv> patrickb: the release is done

[18:18] <jdv> .tell El_Che the release is done

[18:18] <tellable6> jdv, I'll pass your message to El_Che

[18:21] <[Coke]> jdv++

[18:22] <[Coke]> error: short object ID 2024 is ambiguous

[18:22] <[Coke]> we miss a tag push?

[18:22] <[Coke]> nope, that's on me. :)

[18:23] <[Coke]> might want a rakubrew option that complains more if you give a weird tag. :)

[18:24] * jdv pushs coke

[18:24] <jdv> tag you're it!

[18:24] <jdv> afk &

[18:51] <Geth> ¦ rakudo/splice-is-item-again-twice: 59d55dd03d | ab5tract++ | 7 files

[18:51] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Provide `is revision-gated("6.x")` trait

[18:51] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[18:51] <Geth> ¦ rakudo/splice-is-item-again-twice: This trait is primarily intended for allowing multi candidates

[18:51] <Geth> ¦ rakudo/splice-is-item-again-twice: to be considered for dispatch only when the caller's compiler

[18:51] <Geth> ¦ rakudo/splice-is-item-again-twice: version is above a certain revision.

[18:51] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[18:51] <Geth> ¦ rakudo/splice-is-item-again-twice: By applying the trait to the proto at its minimum compatible

[18:51] <Geth> ¦ rakudo/splice-is-item-again-twice: <…commit message has 15 more lines…>

[18:51] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/59d55dd03d

[18:52] <ab5tract> now with flag-based goodness. I made some potentially controversial choices (kebab-case, magic number) so just let me know if further changes are needed

[18:54] *** finanalyst left
[19:06] <ab5tract> now for testing... looks like there is some unexpected fallout to deal with

[19:11] <ab5tract> hmm, corekeys and settingskeys

[19:33] <Geth> ¦ rakudo/splice-is-item-again-twice: c36730c90b | ab5tract++ | 7 files

[19:33] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Provide `is revision-gated("6.x")` trait

[19:33] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[19:33] <Geth> ¦ rakudo/splice-is-item-again-twice: This trait is primarily intended for allowing multi candidates

[19:33] <Geth> ¦ rakudo/splice-is-item-again-twice: to be considered for dispatch only when the caller's compiler

[19:33] <Geth> ¦ rakudo/splice-is-item-again-twice: version is above a certain revision.

[19:33] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[19:33] <Geth> ¦ rakudo/splice-is-item-again-twice: By applying the trait to the proto at its minimum compatible

[19:33] <Geth> ¦ rakudo/splice-is-item-again-twice: <…commit message has 15 more lines…>

[19:33] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/c36730c90b

[19:41] *** sena_kun joined
[19:54] <ab5tract> Ah, that will be because of the newly introduced $?LANGUAGE-REVISION ...

[20:15] <nine> ab5tract: you do realize that you have finally implemented something we have only talked about for 6 or 7 years? Thanks a lot!

[20:15] <ab5tract> \o/

[20:16] <ab5tract> Interestingly, it looks like the branch actually passes one additional test over base:

[20:16] <ab5tract> `	t/12-rakuast/signature.rakutest ................................. ok`

[20:17] <nine> That test also passes here

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: 622c0b800a | ab5tract++ | 14 files

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Provide `is revision-gated("6.x")` trait

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: This trait is primarily intended for allowing multi candidates

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: to be considered for dispatch only when the caller's compiler

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: version is above a certain revision.

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[20:17] <Geth> ¦ rakudo/splice-is-item-again-twice: By applying the trait to the proto at its minimum compatible

[20:18] <Geth> ¦ rakudo/splice-is-item-again-twice: <…commit message has 15 more lines…>

[20:18] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/622c0b800a

[20:18] <ab5tract> okay, not sure what was going here, maybe I ran the tests with an older checkout

[20:18] <ab5tract> anyhoo, tests, adjusted for the existence of $?LANGUAGE-REVISION

[20:19] <ab5tract> nine: thanks for helping hammer it into dispatcher-worthy shape,

[20:23] <nine> :)

[20:33] <ab5tract> kind of reminds me of my trainer at the gym.. he takes care not to tell me how much weight I'm lifting until after I'm done lifting it :)

[20:33] <nine> Sounds like a great strategy :D

[20:34] <[Coke]> heh

[20:43] <ab5tract> nine: sorry to bother you yet again, but can you double check that my test adjustments are sane? I mean, I made them pass and all, but sometimes there is more to be considered than that ;)

[22:24] *** sena_kun left
[22:52] <timo> i wonder what makes gen-cat get a java nio buffer overflow exception in a rakudo build

[22:53] <timo> Method 'java.lang.invoke.MutableCallSite@4d2693d9' not found for invocant of class 'Deprecation'

[22:53] <timo>   in <anon> (gen/jvm/CORE.c.setting:7815)

[22:53] <timo> [...]

[22:53] <timo>   in load_setting (gen/jvm/World.nqp:922)

[22:54] <timo>   in comp_unit_stage1 (gen/jvm/World.nqp:675)

[22:54] <timo> that seems like a slightly strange thing to do while compiling the core setting?

[22:54] <timo> oh this is the core.d.setting though

[22:59] <timo> # A fatal error has been detected by the Java Runtime Environment:

[22:59] <timo> #

[22:59] <timo> #  SIGSEGV (0xb) at pc=0x00007f032c6f6434, pid=2154019, tid=2154020

[22:59] <timo> woof.

[23:21] <ab5tract> timo: which JDK?

[23:22] <ab5tract> 20+ is known to be broken, though I can’t recall if it’s because of that exc exception or not

[23:23] <ab5tract> I truly hope that the JDK implementation doesn’t matter, but it might be useful information regardless

[23:53] <timo> ah, i have openjdk 22.0.2

[23:55] <ab5tract> That’ll do it

[23:59] <ab5tract> https://github.com/rakudo/rakudo/issues/5476

