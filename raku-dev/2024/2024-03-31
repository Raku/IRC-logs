[00:17] *** sena_kun left
[00:58] *** notna joined
[01:13] <MasterDuke> huh. just reverting the src/Raku/ast/name.rakumod part of 196fbee doesn't unbreak the jvm build. didn't expect that

[01:13] *** notna left
[01:14] *** notna joined
[01:16] *** notna left
[01:26] *** notna joined
[02:04] *** notna left
[02:45] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5544: Unbreak the JVM build

[02:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5544

[09:29] <ab5tract> https://borretti.me/article/type-inference-was-a-mistake

[09:30] <ab5tract> (from: https://lobste.rs/s/pkgjno/type_inference_was_mistake)

[09:31] <ab5tract> Is type inference being used synonymously with gradual typing here?

[10:04] <nine> Not really, though they do share some problems.

[10:06] <nine> One of the things Python got right is the mantra that explicit is better than implicit. Of course they then screwed it up by ignoring their own mantra basically everywhere. But at least they had the right idea.

[10:11] <nine> FWIW I have come to a similar conclusion as that author.

[10:11] <nine> OTOH I kinda like that I can just write: val response = basicRequest.post(url).body(write(payload)).contentType("application/json").response(asJson[CreateReportResponse])

[10:12] <nine> and not have to type this monster: val response: sttp.client3.RequestT[Identity, Either[ ResponseException[String, Exception], SingularResponse[CreateAsyncReportResponseValue]], Any] = basicRequest.post(url).body(write(payload)).contentType("application/json").response(asJson[CreateReportResponse])

[10:12] <ab5tract> indeed :)

[10:12] <nine> On the other hand type aliases make that problem go away almost as well: val repsonse: APIResponse = basicRequest...

[10:13] <nine> And I actually needed that type alias anyway as I wanted to pass that response around.

[10:14] <nine> And I guess if type inference weren't as common in Scala, library authors would take more care in making such type aliases available or easier to create.

[10:14] <ab5tract> I'm writing Java at $work and I've gotten more used to it but... damn is it verbose ... and processing JSON? .. not fun

[10:16] <nine> On that tangent, it does look awful at first glance and boy do I wish there was better documentation with more examples for sttp but once you're past that it's damn, the compiler is happy, so you basically know that the code is, too. And this includes handling the different formats you may get for error responses.

[10:23] <nine> The place where I really like type inference though is for the real functional workhorses like map: Array[Int].new(1, 2, 3).map(_ + 1) // gives (2, 3, 4)

[10:27] <ab5tract> so how does all of this intersect with the way we do things in Raku land?

[10:29] <ab5tract> (in terms of your happiness / unhappiness with type inferences)

[10:31] <nine> I don't think it does. Raku doesn't do type inference at all as it's not a statically typed language. It still has the same problems though as from my $a = foo; alone you simply cannot know what type $a has.

[10:36] <ab5tract> Well that was what I was trying to get at. If those problems have pushed you to dislike type inference, then I would (perhaps wrongly) presume that those same problems would push you to dislike gradual typing

[10:38] <ab5tract> If so, what can we do about it? And if not, how can we advertise those successes in contrast to type inference?

[10:41] <ab5tract> If it's just the question of (Java) `var x = someFunction();` and (Raku) `my $x = some-function;` then it seems to be a a pretty limited issue 

[10:42] <ab5tract> in the Java case, the IDE will usually force the type description into the space where you would have typed it out anyway, so I usually just go the long route

[10:45] <nine> Well, yes, I do have indeed found a new appreciation for statically typed languages in the past 2 years. Enough that I would if in doubt pick one over any dynamically or gradually typed language.

[10:46] <nine> The code examples above are Scala btw. which ticks a lot of boxes for me. Doesn't mean it's perfect as I e.g. miss having real type objects or typed undefined values. But I can recommend anyone curious to have a look at it.

[10:48] <ab5tract> are you on Scala 3?

[10:49] <ab5tract> I ask because I started to poke at Scala a while back and the 2/3 divide still seemed pretty severe

[10:51] *** sena_kun joined
[10:52] <nine> Nah, Scala 2 due to Spark. But I have looked at a Scala 3 upgrade and it would actually be possible. The Scala compiler understands both language versions, so you can mix. There are also automated tools to upgrade your code and again, since it's statically typed, those can actually do a thorough job.

[10:54] <ab5tract> that definitely makes it sound like one would need to know both 2 and 3 (or just 2) in order to be fluent

[11:00] <nine> Yes. But then it's not like they are really different languages. Things like parenthesis in if statements becoming optional won't trip you up :)

[11:03] <nine> To not make this too one sided, there are a lot of other features that Raku has had way before Scala 3 picked them up :) Like first class coercion types or fully integrated delegation

[11:36] <ab5tract> I choose to read the above statement as "Raku wins!" :)

[11:55] <nine> Does anyone know why parameterization of constants, i.e. my Int constant @a = Array[Int].new; is forbidden?

[12:01] <lizmat> no, but why would you?  the Array[Int].new would be enough

[12:02] <lizmat> but more generally: I just think the grammar doesn't allow it

[12:02] <lizmat> m: my Int constant @a = Array[Int].new

[12:02] <camelia> rakudo-moar c7d24b3df: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Parameterization of constants is forbidden␤at <tmp>:1␤------> my Int constant @a = Array[Int].new⏏<EOL>␤»

[12:03] <lizmat> could probably be fixed in the Raku grammar, with a compile-time typecheck

[12:03] <lizmat> similar to:

[12:03] <lizmat> m: my Int $a is default("foo")

[12:03] <camelia> rakudo-moar c7d24b3df: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Default value 'foo' will never bind to a variable of type Int␤at <tmp>:1␤------> my Int $a is default("foo")⏏<EOL>␤    expecting any of:␤        constraint␤»

[12:12] <Geth> ¦ rakudo/main: e6a28e1cb2 | (Elizabeth Mattijsen)++ | src/core.c/allomorphs.rakumod

[12:12] <Geth> ¦ rakudo/main: Add Allomorph.narrow

[12:12] <Geth> ¦ rakudo/main: 

[12:12] <Geth> ¦ rakudo/main: To narrow the value of any allomorph to its numeric part.

[12:12] <Geth> ¦ rakudo/main: 

[12:12] <Geth> ¦ rakudo/main: Spotted by habere-et-disper++

[12:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e6a28e1cb2

[12:17] <nine> lizmat: the actions explicitly prohibit it. It'd be easy to support. In fact I had support in RakuAST ready before I realized that it's prohibited. It even has its own exception type, so that was quite deliberate. I just don't know why.

[12:17] <lizmat> possibly an issue with Parrot ?

[12:18] <lizmat> then, I mean

[12:18] <lizmat> how old is the exception class?

[12:19] <nine> 2018, introduced by zoffix

[12:36] <ab5tract> I can't find any relevant issues in closed or open

[12:37] <ab5tract> lizmat: it looks like blin presupposes a commit to the main branch as it relies on whateverable's builds

[12:40] <ab5tract> searching through issues I found this: R#4534.. more parameter pain :(

[12:40] <linkable6> R#4534 [open]: https://github.com/rakudo/rakudo/issues/4534 Capture coercers wrongfully treat all pairs as named arguments  

[12:55] <ab5tract> this one is also kind of interesting... R#1587

[12:55] <linkable6> R#1587 [open]: https://github.com/rakudo/rakudo/issues/1587 `my Int constant .= new: 42` doesn't crash

[12:56] <ab5tract> that one I can at least put a `Fixed in RakuAST` badge on :)

[12:56] <lizmat> :-)

[13:01] <ab5tract> nine: I think this might be the associated issue zoffix was working on: R#1503

[13:01] <linkable6> R#1503 [closed]: https://github.com/rakudo/rakudo/issues/1503 Type constraints on constants not implemented

[13:02] <ab5tract> based on this comment (https://github.com/rakudo/rakudo/issues/1503#issuecomment-401116405) which links to this commit (https://github.com/rakudo/rakudo/commit/a1f544ad42d56aa969f1ea23c62fd3a768027535)

[13:04] <ab5tract> something about a CaR grant, but zoffix helpfully removed all CaR grant labels from tickets he had associated with the car grant

[13:19] <ab5tract> lizmat: do you have any objections to me merging R#5543? since as I mentioned above, there's not direct way to blin a branch anyway

[13:20] <linkable6> R#5543 [open]: https://github.com/rakudo/rakudo/pull/5543 Add multi disambiguation for positional scalars

[13:22] <Geth> ¦ rakudo/main: d1fbc0d707 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ClassHOW.nqp

[13:22] <Geth> ¦ rakudo/main: Streamline Metamodel::ClassHOW (Part 1/N)

[13:22] <Geth> ¦ rakudo/main: 

[13:22] <Geth> ¦ rakudo/main: - remove is_pun attribute for nqp::isnull check

[13:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d1fbc0d707

[13:23] <lizmat> ab5tract: go for it!

[13:27] <Geth> ¦ rakudo/main: ff08bcde7e | ab5tract++ | src/vm/moar/dispatchers.nqp

[13:27] <Geth> ¦ rakudo/main: Add multi disambiguation for positional scalars

[13:27] <Geth> ¦ rakudo/main: 

[13:27] <Geth> ¦ rakudo/main: Until now there has been no way to capture the use of $[]

[13:27] <Geth> ¦ rakudo/main: (as opposed to []) by the caller of a multi routine.

[13:27] <Geth> ¦ rakudo/main: 

[13:27] <Geth> ¦ rakudo/main: For example:

[13:27] <Geth> ¦ rakudo/main:     multi sub($a where *.elems > 0) {...}

[13:27] <Geth> ¦ rakudo/main: <…commit message has 33 more lines…>

[13:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ff08bcde7e

[13:27] <Geth> ¦ rakudo/main: da2d9069ee | ab5tract++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:27] <Geth> ¦ rakudo/main: Add multi positional scalar disambiguation to legacy dispatch

[13:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/da2d9069ee

[13:31] <Geth> ¦ rakudo/main: 10 commits pushed by (Stefan Seifert)++

[13:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/da2d9069ee55...43fe36fb404f

[13:34] <nine> That was one hard earned spec test file (t/spec/MISC/misc.t)

[13:34] <lizmat> nine++ ab5tract++

[13:39] <ab5tract> misc.t sounds painfully random

[13:52] <nine> Surprisingly it was only 2 categories of errors. One related to ARGFILES in MAIN and then a whole lot of issues around definite type constraints like my Int:D $i .= new: 69

[13:52] <lizmat> m: multi a(Positional $a) { dd }; multi a(@a) { dd }; a $(1,2,3); a $[1,2,3]   # ab5tract  shouldn't that go to the same candidate ?

[13:52] <camelia> rakudo-moar 43fe36fb4: OUTPUT: «sub a(@a)␤sub a(Positional $a)␤»

[13:55] <ab5tract> I didn’t include $(), no

[13:56] <ab5tract> I suppose that could lead to confusion, but I was also concerned about keeping the affected surface area small

[13:56] <ab5tract> Might have gotten the balance wrong there

[13:56] <lizmat> well, wrt to splice, I feel this is now more confusing

[13:57] <lizmat> sorry I missed that in the PR  :-(

[13:58] <ab5tract> Let’s see if it’s an easy fix

[13:58] <nine> FWIW I'm pretty skeptical of the whole idea. As I understand Raku @a and Positional $a are equivalent

[14:01] <lizmat> about the syntax, or more generally ?

[14:01] <ab5tract> But in practice there are times when one wants to distinguish between them

[14:02] <ab5tract> Which is literally the only time one would put them both into competing multi sigs

[14:03] <nine> I'm curious: what are those times?

[14:04] <lizmat> https://github.com/rakudo/rakudo/issues/5500

[14:06] <nine> What makes splice flatten so agressively in the first place?

[14:09] <ab5tract> A combination of factors. One is that it supports both `**@args` and `@arg`

[14:10] <ab5tract> but the essential feature is that it inserts elements of whatever list is passed to it one by one

[14:10] <ab5tract> that is, element by element

[14:11] <ab5tract> so it will never DWIM for $[<e x>] without some means of disambiguating $[] from []

[14:12] <ab5tract> FWIW I have encountered this situation in my own code before, though the specifics elude me at the moment

[14:15] <Geth> ¦ nqp/main: 1ca2f18b76 | (Elizabeth Mattijsen)++ | src/how/NQPClassHOW.nqp

[14:15] <Geth> ¦ nqp/main: Add "code_of_method" and "declares_method" methods

[14:15] <Geth> ¦ nqp/main: 

[14:15] <Geth> ¦ nqp/main: to NQPClassHOW.

[14:15] <Geth> ¦ nqp/main: 

[14:15] <Geth> ¦ nqp/main: - declares_method returns 1 if there's a method by that name in

[14:15] <Geth> ¦ nqp/main:   the method table (effectively wrapping an nqp::existskey)

[14:15] <Geth> ¦ nqp/main: - code_of_method returns the code object of the method by the given

[14:15] <Geth> ¦ nqp/main: <…commit message has 8 more lines…>

[14:15] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/1ca2f18b76

[14:21] <ab5tract> regarding aggressiving flattening, I think it's a good question that extends to other use cases:

[14:21] <ab5tract> m: sub a(@a) { dd @a }; a([[[<q e d>]]])

[14:21] <camelia> rakudo-moar 43fe36fb4: OUTPUT: «["q", "e", "d"]␤»

[14:22] <ab5tract> I'm sure there was a strong motivation for why that happens per the single arg rule. But I certainly can't remember it now

[14:46] <Geth> ¦ rakudo: ab5tract++ created pull request #5545: Use positional scalar disambiguation for Array.splice dispatch

[14:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5545

[14:48] <ab5tract> I hadn't actually had time to run spectests for the addtion of `$()` yet, so there may be some surprises there

[14:48] <ab5tract> afk&

[15:32] *** coleman left
[15:32] <nine> But splice(@a, 0, 1, @b) does not have a single arg, so that rune cannot apply.

[15:33] *** coleman joined
[16:13] <ab5tract> m: sub a($, @a) { dd @a }; a *, [[[<u f o>]]]

[16:13] <camelia> rakudo-moar 43fe36fb4: OUTPUT: «["u", "f", "o"]␤»

[16:16] <ab5tract> It’s a single arg as far as the parameter / in scope constructor is concerned, I guess?

[16:26] <ab5tract> (My relative lack of knowledge about how captures match to parameters and become Thingies in the routine is showing :))

[16:31] <MasterDuke> nine: is https://github.com/rakudo/rakudo/commit/196fbee64e8002272a4a7ed853315eedd160204f#diff-e3923fd99bcf4c3a6d24ff094d738ed75968038954e1021f164ae39f4685cf89R217 the only place that would need to explicitly call the renamed-from-new multi in Pseudostash?

[16:33] <MasterDuke> ab5tract: did you see the errors in https://github.com/rakudo/rakudo/pull/5545? it does not like removing `$value` here https://github.com/rakudo/rakudo/pull/5545/files#diff-e115a48c0e3725ac27f6f11618ebe27cf0e9b988c813bfccc7bf1b17510e8c5eL2622

[16:45] <ab5tract> Ah, that’s an accident for sure

[17:16] <nine> MasterDuke: yes

[17:17] <nine> m: sub a($, @a) { dd @a }; a *, [[[<u f o>,],],]

[17:17] <camelia> rakudo-moar 43fe36fb4: OUTPUT: «[[[("u", "f", "o"),],],]␤»

[17:18] <Geth> ¦ rakudo/main: de40bd114b | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[17:18] <Geth> ¦ rakudo/main: Bump NQP to get code_of_method/declares_method methods

[17:18] <Geth> ¦ rakudo/main: 

[17:18] <Geth> ¦ rakudo/main: in NQPClassHOW, so they can be used transparently in Raku's

[17:18] <Geth> ¦ rakudo/main: metamodel

[17:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/de40bd114b

[17:20] <nine> I'm getting more and more convinced that splice is just buggy. It should not flatten that array.

[17:21] <ab5tract> if you do [[<a b>],] , it of course does not

[17:22] <lizmat> nine: that may well be, but pretty sure we will need a language version bump to fix that

[17:23] <lizmat> because there are a. spectests depending on it, and b: ecosystem modules most likely as well

[17:23] <ab5tract> I've been poking at it pretty comprehensively and there's no bug, there is just single arging

[17:23] <ab5tract> *no bug that I've seens

[17:26] <MasterDuke> nine: is there a simple way to test that my attempt at turning those PseudoStash multi news into a singular new + some other method is correct? i.e., some test or spectest or piece of code i can run with the moarvm backend

[17:41] <MasterDuke> https://github.com/rakudo/rakudo/pull/5544 updated with a wip attempt at nine++'s suggestion

[17:43] <ab5tract> to hopefully be more clear, when I say "just single arging" I mean behaving as any other sub which takes an @pos param behaves.

[17:45] <ab5tract> and since it has slurpy candidates, there is no difference between splice(@a, *, *, [1, 2, 3]) and splice(@a, *, *, 1, 2, 3)

[17:46] <ab5tract> the latter re-dispatches to the former

[17:46] <nine> But those should surely be different things?

[17:47] <ab5tract> not according to the spec and the implementation

[17:48] <nine> They could just both be wrong. Wouldnt be the first time

[17:48] <ab5tract> according to user expectations, I agree. which is why I've spent the time to provide a way out that keeps the existing model intact

[17:50] <Geth> ¦ nqp/main: b644c8ed3a | (Elizabeth Mattijsen)++ | 2 files

[17:50] <Geth> ¦ nqp/main: Add "code_of_method" and "declares_method" methods

[17:50] <Geth> ¦ nqp/main: 

[17:50] <Geth> ¦ nqp/main: to NQPConcreteRoleHOW and NQPParametricRoleHOW as well

[17:50] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/b644c8ed3a

[17:52] <MasterDuke> somewhat off-tangent thought, but should we add a CI job that runs `RAKUDO_RAKUAST=1 make m-test` and `RAKUDO_RAKUAST=1 make m-spectest` and just records the results?

[17:52] <MasterDuke> but for now, afk to dye eggs

[17:54] <ab5tract> we could get away with keeping separate implementations for slurpy and non-slurpy, but if we want a single implementation then there wouldn't be a way to pass the slurpy array to the regular array candidate without it the slurpy array becoming a single element in the re-written regular array candidate

[17:55] <ab5tract> unless, of course, there were a way to pass $[] and [] to different candidates ;)

[18:07] <ab5tract> On second thought, even that distinction wouldn’t help without some contortions

[22:07] <Geth> ¦ MoarVM-Remote/main: 81ed891d7d | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | README.md

[22:07] <Geth> ¦ MoarVM-Remote/main: Update README.md

[22:07] <Geth> ¦ MoarVM-Remote/main: review: https://github.com/raku-community-modules/MoarVM-Remote/commit/81ed891d7d

[22:47] *** sena_kun left
[23:14] <MasterDuke> looks like the latest commit to https://github.com/rakudo/rakudo/pull/5544 worked, but i'd appreciate some naming suggestions before i squash and merge

[23:35] *** kjp left
[23:38] *** kjp joined
