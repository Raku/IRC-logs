[02:22] *** japhb left
[02:41] *** japhb joined
[02:45] *** japhb left
[02:46] *** japhb joined
[03:20] *** japhb left
[03:34] *** japhb joined
[08:59] *** sena_kun joined
[09:38] <Voldenet> MasterDuke: I couldn't apply exactly the same patch directly, because of fastutil collections used, but https://0x0.st/H7PR.diff works - with this memory goes up to 2.1GB and is painfully slow (10+ minutes so far, no end in sight)

[09:40] <Voldenet> I'm hardly believing what I see so I'll rerun main branch in a while, just to make sure the memory usage used to be lower

[10:52] <Voldenet> So, I've re-tested things on main branch and the memory usage isn't higher at all, the difference was amount of memory used by VM

[10:53] <Voldenet> both runs were done with AggressiveHeap, but first raku-ast-compiler ran with lower memory (which wasn't enough for v6c)

[10:59] <Voldenet> since I got max value for fastutil branch (RSS 2195MB) I'll compare with maximum from main branch now

[11:03] <Voldenet> AggressiveHeap will make comparisons a bit more difficult, but the resoult should be meaningful either way

[11:04] <Voldenet> though honestly, fastutil branch is many times faster

[12:15] <Voldenet> I confirm that when using the same amount of memory on VM, the memory usage is about the same

[12:15] <Voldenet> except it's a few times slower

[12:16] <Voldenet> on main

[12:16] <lizmat> which one is a few times slower ?

[12:18] <Voldenet> main, I could do exact timings by modifying nqp-j

[12:21] <Voldenet> rough estimate is fastutil being 3x faster

[12:21] <Voldenet> at least

[12:25] <Voldenet> reading these plots isn't really meaningful way of measuring anything either way

[12:54] *** sena_kun left
[13:26] <MasterDuke> Voldenet: when you say "VM", do you mean the jvm or the vm in which you're running these experiments? so the rough conclusion is that memory used while building nqp (and/or rakudo?) on main and the fastutil branch is the same, but fastutil branch is faster?

[13:27] <Geth> ¦ rakudo/main: bef608a8ff | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:27] <Geth> ¦ rakudo/main: Move Binder methods closer to where they operate on

[13:27] <Geth> ¦ rakudo/main: 

[13:27] <Geth> ¦ rakudo/main: Also move variables not needed on the JVM into the "not compiled

[13:27] <Geth> ¦ rakudo/main: on JVM" area

[13:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bef608a8ff

[13:27] <Geth> ¦ rakudo/main: 4b124a9852 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:27] <Geth> ¦ rakudo/main: Streamline container descriptors

[13:27] <Geth> ¦ rakudo/main: 

[13:27] <Geth> ¦ rakudo/main: Mostly esthetics, with ContainerDescriptor.new now bypassing the

[13:27] <Geth> ¦ rakudo/main: BUILDPLAN altogether

[13:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4b124a9852

[13:28] <Voldenet> By saying VM i mean the VM I'm running experiments in and yes, that conclusion is correct

[13:28] <MasterDuke> just successfully built rakudo with the jvm backend at 2fa69e878

[13:28] <linkable6> (2024-02-17) https://github.com/rakudo/rakudo/commit/2fa69e8789 Bump NQP to get latest compose check tweaks

[13:29] <MasterDuke> Voldenet: cool, thanks

[13:32] <MasterDuke> i had hoped it would also reduce memory usage, but i'll take just faster

[13:35] <MasterDuke> Voldenet: oh, and i didn't quite follow what you tested re that one change and its effect. main, main + that change, and fastutil (which includes that change)?

[13:36] <Voldenet> Yes: main 1h+, with change: 23m+, with fastutil: 8m+

[13:36] <MasterDuke> nice!

[13:36] <Voldenet> Btw, the problem with this memory measurement is that RSS is only the total jvm-allocated size

[13:36] <Voldenet> I could probably do some inspection on `jcmd pid GC.heap_info`

[13:37] <Voldenet> iirc it forces GC as well

[13:37] <MasterDuke> yeah, might need to look at a profile to see if we can reduce the size of the heap we configure to run with

[13:38] <Voldenet> or GC.class_histogram, but there's entries like those

[13:38] <Voldenet> > 1:         29383        3055832  __P6opaque__28

[13:39] <Voldenet> > num   #instances        #bytes   class name (module)

[13:43] <MasterDuke> i'm also going to try to reduce the size of the fastutil jar. they have some script to find what classes you actually use and create a minimized jar, which hopefully will be quite a bit smaller than even the "fastutil-core" jar it's using now

[13:47] <MasterDuke> also we're using jna-platform 4.5.0, but they're now at 5.14.0, might be some improvements there

[13:53] <MasterDuke> also we're using asm 4.1, but  they're now at 9.6

[13:56] <MasterDuke> afk for a while, hopefully will get to play around some more this afternoon or evening

[14:13] <Geth> ¦ rakudo/main: 1491f82228 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[14:13] <Geth> ¦ rakudo/main: Streamline Binder.trial_bind

[14:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1491f82228

[18:17] *** sena_kun joined
[20:39] <Geth> ¦ rakudo/main: 8e863c81f5 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[20:39] <Geth> ¦ rakudo/main: Two additional micro-opts in Bindner.trial_bind

[20:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8e863c81f5

[20:39] <Geth> ¦ rakudo/main: 7dee053075 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[20:39] <Geth> ¦ rakudo/main: Streamline creation of several classes in bootstrap

[20:39] <Geth> ¦ rakudo/main: 

[20:39] <Geth> ¦ rakudo/main: Mostly esthetic:

[20:39] <Geth> ¦ rakudo/main: - Mu

[20:39] <Geth> ¦ rakudo/main: - Any

[20:39] <Geth> ¦ rakudo/main: - Cool

[20:39] <Geth> ¦ rakudo/main: - Attribute

[20:39] <Geth> ¦ rakudo/main: - Scalar

[20:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7dee053075

[20:49] <Geth> ¦ rakudo/main: 375393fa50 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[20:49] <Geth> ¦ rakudo/main: Streamline ScalarVAR and xxxRef classes

[20:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/375393fa50

[22:40] *** vrurg_ is now known as vrurg

[23:02] *** sena_kun left
[23:04] *** sena_kun joined
[23:06] *** sena_kun left
