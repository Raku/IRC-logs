[01:01] *** MasterDuke joined
[08:01] *** sena_kun joined
[12:10] <lizmat> greppable6: duckmap

[12:10] <greppable6> lizmat, 16 lines, 2 modules: https://gist.github.com/f50041df2b80d094f2fc47f2750daae1

[12:10] <lizmat> not very popular / understood it seems

[12:20] <Geth> ¦ rakudo/main: af6df81601 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[12:20] <Geth> ¦ rakudo/main: Don't bother calling op in duckmap on sig failure

[12:20] <Geth> ¦ rakudo/main: 

[12:20] <Geth> ¦ rakudo/main: If the signature of the op doesn't accept the value, then there's

[12:20] <Geth> ¦ rakudo/main: no point in trying to call it, as that will only create an exception.

[12:20] <Geth> ¦ rakudo/main: 

[12:20] <Geth> ¦ rakudo/main: This will make sure that any LEAVE phaser in the op will *not* be

[12:20] <Geth> ¦ rakudo/main: run if the signature didn't match the given value.

[12:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/af6df81601

[12:39] <lizmat> m: dd (^10).lazy.map({ $_ == 5 ?? (last) !! $_ })

[12:39] <camelia> rakudo-moar af6df8160: OUTPUT: «(0, 1, 2, 3, 4).lazy.Seq␤»

[12:40] <lizmat> m: dd (^10).lazy.nnodemap({ $_ == 5 ?? (last) !! $_ })

[12:40] <camelia> rakudo-moar af6df8160: OUTPUT: «No such method 'nnodemap' for invocant of type 'Seq'.  Did you mean␤'nodemap'?␤  in block <unit> at <tmp> line 1␤␤»

[12:41] <lizmat> m: dd (^10).lazy.nodemap({ $_ == 5 ?? (last) !! $_ })

[12:41] <camelia> rakudo-moar af6df8160: OUTPUT: «Failure.new(exception => X::Cannot::Lazy.new(action => "nodemap", what => Any))␤»

[12:41] <lizmat> so why does .map allow lazy iterators, and nodemap doesn't ?

[12:41] <lizmat> greppable6: nodemap

[12:41] <greppable6> lizmat, 12 lines, 1 module: https://gist.github.com/d8325c439ff1392ca8eef3b2fe640083

[13:08] <Geth> ¦ rakudo/lizmat-deepmap: ecd656825c | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[13:08] <Geth> ¦ rakudo/lizmat-deepmap: Rince, repeat for .nodemap

[13:08] <Geth> ¦ rakudo/lizmat-deepmap: review: https://github.com/rakudo/rakudo/commit/ecd656825c

[13:10] <Geth> ¦ rakudo/lizmat-deepmap: 4 commits pushed by (Elizabeth Mattijsen)++

[13:10] <Geth> ¦ rakudo/lizmat-deepmap: e2fa55b9b1 | RakuAST: allow for =for formula

[13:10] <Geth> ¦ rakudo/lizmat-deepmap: f85de735d6 | Bump NQP for fix in return / LEAVE interaction

[13:10] <Geth> ¦ rakudo/lizmat-deepmap: af6df81601 | Don't bother calling op in duckmap on sig failure

[13:10] <Geth> ¦ rakudo/lizmat-deepmap: 534dd447bc | Merge branch 'main' into lizmat-deepmap

[13:10] <Geth> ¦ rakudo/lizmat-deepmap: review: https://github.com/rakudo/rakudo/compare/ecd656825c6f...534dd447bc1d

[13:20] *** finanalyst joined
[14:10] <lizmat> greppable6: flatmap

[14:10] <greppable6> lizmat, 77 lines, 28 modules: https://gist.github.com/cc98ccb28c09c744d74cd817442f4450

[14:11] <lizmat> wow, that's 28 modules that will stop working in 6.e  :-(

[14:27] *** MasterDuke left
[14:29] <[Coke]> I note zef is on that list, ugexe

[14:30] <[Coke]> also, why is it "perl6/doc" and not "Raku/doc" ?

[14:31] <[Coke]> raku/doc shouldn't be a module; it was at one point, is that where it's coming from?

[14:44] <finanalyst> [Coke] lizmat: I just you both an email about relative priorities

[15:11] <[Coke]> replied

[15:13] <[Coke]> the raku/doc link is pointing at a six year old commit, I think (and is all docs regardless)

[15:14] <[Coke]> finanalyst: thanks for keeping us in the loop, appreciate it.

[15:20] <ugexe> [Coke]: nah, i just don't think using greppable6 is useful in this case. zef hasn't used flatmap in years, which implies greppable6 is searching all versions, including old ones no one would be using anymore

[15:37] <[Coke]> Maybe if it also had a column for latest version of module there'd at least be context.

[15:38] <[Coke]> ... or even the version it got the hit.

[15:40] <[Coke]> oh - it's doing git grep, not grep.

[15:41] <[Coke]> so there's only one ugexe/zef it's grepping, but since it's git grep...

[15:42] <[Coke]> does https://github.com/lizmat/raku-all-modules need to update submodules?

[15:43] <[Coke]> er, those are subrepos.

[15:48] <[Coke]> so, seeing hits on cpan/ugexe/zef, but also in github/ugexe/zef - I don't have subrepo support setup so can't see more

[15:51] <[Coke]> (wow is this slow)

[15:53] <[Coke]> This is the commit raku-all-modules is tied to:

[15:53] <[Coke]> https://github.com/ugexe/zef/commit/a1d6d5439

[15:53] <[Coke]> from 2019.

[15:55] <[Coke]> and greppable link is to moritz's version of raku-all-modules, which is redirecting to lizmats? I think?

[16:33] <lizmat> re flatmap, after some research, it looks like the documentation is wrong

[16:34] <lizmat> in 095f7f02 (august 2015), jnthn changed flatmap into .map(&blodk).flat

[16:34] <lizmat> basically providing the functionality that the documentation suggests

[16:36] <lizmat> [Coke]: maybe something like: .flatmap(&block) is short for .map(&block).flat

[16:37] <lizmat> apparently the behaviour changed with the GLR, and has been stable since Christmas, judging from the git blame innfo

[16:39] <[Coke]> so the deprecation is still in effect, though?

[16:40] <lizmat> there's no deprecation message

[16:40] <lizmat> and the behaviour is already what is suggested, so I don't think we need to deprecate .flatmap

[16:41] <lizmat> just document it as short for .map().flat

[16:41] <lizmat> I mean, we still *could* deprecate it I guess

[16:42] <lizmat> a deprecation message is added easily enough  :-)

[16:42] <[Coke]> it's been listed as deprecated in the docs for ages.

[16:43] <[Coke]> So remove that from the docs and simplify the examples? I can do that

[16:49] <[Coke]> Done.

[17:17] *** finanalyst left
[19:15] *** finanalyst joined
[22:03] *** finanalyst left
[22:54] *** sena_kun left
