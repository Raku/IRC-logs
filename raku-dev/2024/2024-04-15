[07:34] *** [Tux] left
[07:38] *** [Tux] joined
[07:40] *** sena_kun joined
[09:20] *** sena_kun left
[09:37] *** finanalyst joined
[10:17] *** MasterDuke left
[10:18] <Geth> ¦ rakudo/main: c158228515 | (Stefan Seifert)++ | 2 files

[10:18] <Geth> ¦ rakudo/main: RakuAST: check bind value types in initializers

[10:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c158228515

[10:18] <Geth> ¦ rakudo/main: 830727e539 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[10:18] <Geth> ¦ rakudo/main: RakuAST: ensure symbols accessed by BEGIN time code are resolved

[10:18] <Geth> ¦ rakudo/main: 

[10:18] <Geth> ¦ rakudo/main: Generating a compile-time-value may need some lookups to have been

[10:18] <Geth> ¦ rakudo/main: resolved.

[10:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/830727e539

[10:19] <nine> 1034

[10:22] <lizmat> 150+ runs of REA harvester still clean, I declare the bug squashed!

[10:29] <nine> Yeah!

[10:30] <Geth> ¦ nqp/main: ec940c08c0 | (Elizabeth Mattijsen)++ | src/how/NQPClassHOW.nqp

[10:30] <Geth> ¦ nqp/main: Remove snitch code

[10:30] <Geth> ¦ nqp/main: 

[10:30] <Geth> ¦ nqp/main: The underlying issua has been fixed with

[10:30] <Geth> ¦ nqp/main: https://github.com/MoarVM/MoarVM/commit/d5dafa9b47

[10:30] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/ec940c08c0

[10:48] <Geth> ¦ rakudo/main: 08b77e9431 | (Stefan Seifert)++ | 3 files

[10:48] <Geth> ¦ rakudo/main: RakuAST: support the sink statement-prefix

[10:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/08b77e9431

[10:48] <nine> 1039! This was about one spec test file per minute :D

[10:49] <lizmat> whee!

[10:55] <nine> > RAKUDO_RAKUAST=1 ./rakudo-m -e '"foo bar" ~~ m:s/foo bar/'

[10:55] <nine> Potential difficulties: Space is not significant here; please use quotes or :s (:sigspace)

[10:56] <nine> lizmat: ^^^

[11:04] <lizmat> ?

[11:04] <nine> Looks like your commit fb53d50a8a3068399db4a24ba315ab3b9d71d8c8 is a bit incomplete

[11:04] <linkable6> (2023-03-21) https://github.com/rakudo/rakudo/commit/fb53d50a8a RakuAST: eradicate use of %*RX<s> in the grammar

[11:05] <lizmat> could well be...  it's been a while  :-)

[11:12] *** finanalyst left
[11:58] <Geth> ¦ rakudo/main: 4adf939586 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[11:58] <Geth> ¦ rakudo/main: RakuAST: fix params with post constraints stumbling over junctions

[11:58] <Geth> ¦ rakudo/main: 

[11:58] <Geth> ¦ rakudo/main: When passed a Junction, the result of an ACCEPTS call can again be a

[11:58] <Geth> ¦ rakudo/main: Junction. Before passing that on to paramtypecheck we have to ensure it's

[11:58] <Geth> ¦ rakudo/main: turned into a Boolean.

[11:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4adf939586

[11:58] <nine> 1040

[11:59] * lizmat updates the weekly draft

[12:13] <Geth> ¦ rakudo/main: f43128bd8e | MasterDuke17++ (committed using GitHub Web editor) | 5 files

[12:13] <Geth> ¦ rakudo/main: Convert uses of `if nqp::getcomp('Raku').backend.name eq <...>` to `#?if <...>`

[12:13] <Geth> ¦ rakudo/main: 

[12:13] <Geth> ¦ rakudo/main: So instead of a runtime decision it's done at compile time.

[12:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f43128bd8e

[12:25] <lizmat> notable6: weekly

[12:25] <notable6> lizmat, 2 notes: 2024-04-11T19:48:46Z <gfldex>: weekly https://www.youtube.com/watch?v=pFKLHOygtqQ&t=945s  ;  2024-04-14T22:09:43Z <antononcube>: https://rakuforprediction.wordpress.com/2024/04/14/exorcism-for-exercism/

[12:44] <ab5tract> just saw #5550 ... that's a weird one

[12:44] <ab5tract> R#5550

[12:44] <linkable6> R#5550 [open]: https://github.com/rakudo/rakudo/issues/5550 [Fixed in RakuAST] Simple literal-only regex fails

[12:50] <ab5tract> I wonder if approaching it from the mysterious angle of the repl *not* failing would be the most fruitful path?

[12:50] <ab5tract> obviously grateful that RakuAST gets it right..

[12:57] <nine> The QAST generated by RakuAST is also different from that generated by the old frontend

[13:01] <ab5tract> nqp-moarvm: say("_20__32022320" ~~ /2022320/)

[13:01] <camelia> nqp-moarvm: OUTPUT: «2022320␤»

[13:03] <ab5tract> m: use nqp; say(nqp::index("_20__32022320", "2022320"))

[13:03] <camelia> rakudo-moar f43128bd8: OUTPUT: «6␤»

[13:03] <ab5tract> I guess we don't do an nqp::index() check prior to switching to deeper levels of matching strategy?

[13:06] <ab5tract> probably I'm thinking too small, but that feels like it would be an "obvious" optimization strategy... though it wouldn't be enough on its own to build a proper match object from

[13:16] <ab5tract> nine: is there perhaps some way to dump QAST produced during a repl seession?

[13:16] <ab5tract> maybe with a combination of the two working examples and the failing one, triangulation efforts would be reduced

[13:29] <ab5tract> looks like this might be the answer to the question of why the repl works?

[13:29] <ab5tract> m: say  (Q| 'Xabddcabaacab' ~~ /abaacab/| ~ "\n").EVAL

[13:29] <camelia> rakudo-moar f43128bd8: OUTPUT: «｢abaacab｣␤»

[13:35] <ab5tract> m: say qq|"Xabddcabaacab" ~~ /abaacab/;|.EVAL; say  qq| "Xabddcabaacab" ~~ /abaacab/;\n|.EVAL

[13:35] <camelia> rakudo-moar f43128bd8: OUTPUT: «Nil␤｢abaacab｣␤»

[13:44] <ab5tract> it should be noted that the regex works on the JVM as well (though calling say with a Match argument barfs instead of coercing to Str)

[13:47] <ab5tract> (works without the newline modification, I mean)

[13:56] <ab5tract> QAST for JVM vs MoarVM: https://gist.github.com/ab5tract/5ec0037e2be70caf4860bfdec9e1a662

[13:58] <ab5tract> A major distinction is in the use of `QAST::Dispatch`by MoarVM

[14:00] <ab5tract> just added RakuAST QAST, which is simpler than the JVM output but likewise does not use `QAST::Dispatch('raku-smartmatch', ...)`

[14:07] <ab5tract> bisectable6: so("Xabddcabaacab" ~~ /abaacab/) ~~ True

[14:07] <bisectable6> ab5tract, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:07] <bisectable6> ab5tract, Output on all releases: https://gist.github.com/56c953ccb1fd5c3e0bfe7578d5d4771d

[14:07] <bisectable6> ab5tract, Bisecting by output (old=2015.12 new=2016.01.1) because on both starting points the exit code is 0

[14:07] <bisectable6> ab5tract, bisect log: https://gist.github.com/75659ebda8bf5dd7f21f23b80ec8d98a

[14:08] <bisectable6> ab5tract, Output on all releases and bisected commits: https://gist.github.com/5346c8b98f749b58bc688b6fb3750f17

[14:09] <ab5tract> bisectable6: (so "Xabddcabaacab" ~~ /abaacab/) == True

[14:09] <bisectable6> ab5tract, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:09] <bisectable6> ab5tract, ¦6c (78 commits): «WARNINGS for /tmp/lCEhz5GToC:␤Useless use of "==" in expression "(so \"Xabddcabaacab\" ~~ /abaacab/) == True" in sink context (line 1)␤»

[14:09] <bisectable6> ab5tract, Nothing to bisect!

[14:12] <ab5tract> bisectable6: exit 1 - (so "Xabddcabaacab" ~~ /abaacab/)

[14:12] <bisectable6> ab5tract, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:13] <bisectable6> ab5tract, Output on all releases: https://gist.github.com/31825a3cea3ab688ea08b9b97b09c207

[14:13] <bisectable6> ab5tract, Bisecting by exit code (old=2018.04.1 new=2018.05). Old exit code: 0

[14:13] <Geth> ¦ rakudo/main: 5211345d50 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/Concretization.nqp

[14:13] <Geth> ¦ rakudo/main: Fix some thread-safety issues that were missed

[14:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5211345d50

[14:13] <bisectable6> ab5tract, bisect log: https://gist.github.com/57c92bdd982904c8d413f8085d4789bf

[14:13] <bisectable6> ab5tract, (2018-05-07) https://github.com/rakudo/rakudo/commit/6ae0526f22a53550061386adba8bea9ebfbc8a70

[14:13] <bisectable6> ab5tract, Output on all releases and bisected commits: https://gist.github.com/14195e9cee989bc9b21481fb9b048976

[14:14] <lizmat> ab5tract: re "an "obvious" optimization strategy... though it wouldn't be enough on its own to build a proper match object from", yes, having to create a Match object is stopping a lot of opts

[14:15] <ab5tract> probably something we can get some great wins from with a RakuAST-based optimizer :)

[14:15] <lizmat> having said that, I think in RakuAST we will be able to optimize a lot of very simple cases

[14:15] <lizmat> yes

[14:18] <ab5tract> the fact that adding a newline to the problematic regex _after_ the semicolon makes it work is spooky as hell to me

[14:20] <ab5tract> is there some way to get at the QAST generated by the EVAL?

[14:23] <ab5tract> also, even though `raku-smartmatch` is implicated in the differences between working and non-working QASTs, it seems kind of farfetched in that my understanding is that it is post-newdisp .. and this bug is far older

[14:26] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/04/15/2024-16-incredibly-concise/

[14:27] <ab5tract> lizmat++

[14:50] <ab5tract> ..but if the issue is lower level than this QAST::Dispatch, why do `nqp -e` and RakuAST work?

[14:52] <Geth> ¦ rakudo/main: a15f9f41b8 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ConcretizationCache.nqp

[14:52] <Geth> ¦ rakudo/main: Streamline Metamodel::ConcretizationCache (Part 1/N)

[14:52] <Geth> ¦ rakudo/main: 

[14:52] <Geth> ¦ rakudo/main: Mostly about making sure that the Capture type object is not

[14:52] <Geth> ¦ rakudo/main: used before its HOW is fully composed.

[14:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a15f9f41b8

[14:53] <nine> RakuAST:

[14:53] <nine>     │     │ - QAST::Regex(:rxtype(concat) :subtype()) 

[14:53] <nine>     │     │   - QAST::Regex(:rxtype(scan) :subtype()) 

[14:53] <nine>     │     │   - QAST::Regex(:rxtype(concat) :subtype()) 

[14:53] <nine>     │     │     - QAST::Regex(:rxtype(literal) :subtype()) 

[14:53] <nine>     │     │       - 2022320

[14:53] <nine>     │     │   - QAST::Regex(:rxtype(pass) :subtype())

[14:53] <nine> old:

[14:53] <nine>     │   │   │   - QAST::Regex(:rxtype(concat) :subtype()) 

[14:53] <nine>     │   │   │     - QAST::Regex(:rxtype(scan) :subtype()) 

[14:53] <nine>     │   │   │       - 2022320

[14:53] <nine>     │   │   │     - QAST::Regex(:rxtype(concat) :subtype())  2022320

[14:53] <nine>     │   │   │       - QAST::Regex(:rxtype(literal) :subtype())  2

[14:53] <nine>     │   │   │         - 2022320

[14:53] <nine>     │   │   │     - QAST::Regex(:rxtype(pass) :subtype()) 

[15:05] <ab5tract> ah! great catch

[15:11] <ab5tract> however, NQP output also has :rxtype<scan>

[15:11] <ab5tract>     │           │ - QAST::Stmts

[15:11] <ab5tract>     │           │   - QAST::Regex+{QAST::RegexCursorType}(:rxtype(concat) :subtype() :cursor_type(NQPMatch))

[15:11] <ab5tract>     │           │     - QAST::Regex(:rxtype(scan) :subtype())

[15:11] <ab5tract>     │           │       - abaacab

[15:11] <ab5tract>     │           │     - QAST::Regex(:rxtype(concat) :subtype())  abaacab

[15:11] <ab5tract>     │           │       - QAST::Regex(:rxtype(literal) :subtype())  a

[15:11] <ab5tract>     │           │         - abaacab

[15:11] <ab5tract>     │           │     - QAST::Regex(:rxtype(pass) :subtype())

[15:17] <Geth> ¦ rakudo/main: 75e63ce615 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ConcretizationCache.nqp

[15:17] <Geth> ¦ rakudo/main: Streamline Metamodel::ConcretizationCache (Part 2/N)

[15:17] <Geth> ¦ rakudo/main: 

[15:17] <Geth> ¦ rakudo/main: Make sure that adding to the cache is done in a threadsafe manner.

[15:17] <Geth> ¦ rakudo/main: 

[15:17] <Geth> ¦ rakudo/main: Note that the same concretization technically can appear more than

[15:17] <Geth> ¦ rakudo/main: once in the cache.  Not sure if this is really an often occurring

[15:17] <Geth> ¦ rakudo/main: situation warranting additional uniqueness checks.

[15:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/75e63ce615

[15:30] <ab5tract> ++(nine++)

[15:30] <ab5tract> it looks like it was the scan indeed.

[15:30] <ab5tract> > ./rakudo-m -e '"Xabddcabaacab" ~~ /abaacab/ ==> so() ==> say()'

[15:30] <ab5tract> True

[15:38] <ab5tract> &afk

[15:58] <ab5tract> So I guess that the issue is actually with the implementation of scan, as JVM and NQP QAST includes it

[15:59] <Geth> ¦ rakudo/main: b1aaf338ff | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ConcretizationCache.nqp

[15:59] <Geth> ¦ rakudo/main: Streamline Metamodel::ConcretizationCache (Part 3/3)

[15:59] <Geth> ¦ rakudo/main: 

[15:59] <Geth> ¦ rakudo/main: Make sure that fetching a concretization from the cache is done in

[15:59] <Geth> ¦ rakudo/main: a threadsafe manner.

[15:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b1aaf338ff

[16:00] <ab5tract> Which makes sense with bisectable returning an NQP/MoarVM bump commit

[18:02] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++

[18:02] <Geth> ¦ rakudo/main: fce6e368cb | RakuAST: add bind constraints for $ sigiled variables

[18:02] <Geth> ¦ rakudo/main: b6d8425d2f | RakuAST: give natively typed variables proper container descriptors

[18:02] <Geth> ¦ rakudo/main: 90cbfde5af | RakuAST: fail on variable declaration without mandatory initializer

[18:02] <Geth> ¦ rakudo/main: f7e5031819 | RakuAST: ensure type checks with subsets are correct at compile time

[18:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/b1aaf338ff95...f7e5031819df

[18:03] <nine> Unfortunately while this gains us one spectest we also lose one: t/spec/S12-subset/type-subset.t fails one test because

[18:03] <nine> m: subset F of Int where * %% 2; subset G of F where * %% 3; my G $g = 9

[18:03] <camelia> rakudo-moar b1aaf338f: OUTPUT: «Type check failed in assignment to $g; expected G but got Int (9)␤  in block <unit> at <tmp> line 1␤␤»

[18:03] <nine> fails now at compile time with "Cannot assign a literal of type Int (9) to a variable of type G"

[18:22] *** sena_kun joined
[21:15] *** sena_kun left
[21:17] *** sena_kun joined
[21:20] *** finanalyst joined
[21:53] <ab5tract> nine: that sounds familiar.. I'll try to take a poke at it soon, but feel free to go after it if you have the inclination

[22:26] *** sena_kun left
[23:00] *** finanalyst left
