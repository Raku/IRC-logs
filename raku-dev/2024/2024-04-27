[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[08:02] *** sena_kun joined
[08:46] *** sena_kun left
[09:06] <Geth> ¦ rakudo/main: 10ee220a79 | (Elizabeth Mattijsen)++ | src/core.c/Any.rakumod

[09:06] <Geth> ¦ rakudo/main: Make dd more lenient towards non-of classes

[09:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/10ee220a79

[10:36] <ab5tract> [Coke]: I just realized that my commits changing uniprop -> 0 to uniprop -> '' will actually just make the documentation more complicated, as both have to be mentioned

[10:37] <ab5tract> I will revert those commits later today and wait to address it more comprehensively pending a problem-solving discussion

[10:40] <ab5tract> For now: "`uniprop` will return 0 if the provided property is unknown. Note that some properties may be returned from `uniprop` with space separators between words. These will not roundtrip and instead must be specified with `_` separators when passed to `uniprop`" (see my example with  "e".uniprop("e".uniprop("Block"))'

[10:40] <ab5tract> m:  "e".uniprop("e".uniprop("Block")) ==> say()

[10:40] <camelia> rakudo-moar 10ee220a7: OUTPUT: «␤»

[11:38] <patrickb> nine: Unsure if it's necessary for a grant to work, but there is no amount specified in the grant text.

[11:39] <lizmat> that's... odd?  there was an amount in the version of the proposal that I've seen

[11:43] <patrickb> Maybe I missed it...

[11:44] <patrickb> Still can't find it...

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[13:33] <[Coke]> might have been a cut-and-pasto when Saif made it into an article.

[13:49] <Geth> ¦ rakudo/main: cdf127b15d | ab5tract++ | src/core.c/unicodey.rakumod

[13:49] <Geth> ¦ rakudo/main: Revert "Actually return '' (not Nil) from uniprop"

[13:49] <Geth> ¦ rakudo/main: 

[13:49] <Geth> ¦ rakudo/main: Avoid changing this return value until a more comprehensive

[13:49] <Geth> ¦ rakudo/main: approach to missing uniprops has been proposed, accepted,

[13:49] <Geth> ¦ rakudo/main: and implemented.

[13:49] <Geth> ¦ rakudo/main: 

[13:49] <Geth> ¦ rakudo/main: This reverts commit 05dcd08151bd36e9f7c1dfaeb5d398409749d278.

[13:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cdf127b15d

[13:49] <Geth> ¦ rakudo/main: 741e6eaf99 | ab5tract++ | src/core.c/unicodey.rakumod

[13:49] <Geth> ¦ rakudo/main: Revert "Return '' instead of 0 when a uniprop is not found"

[13:49] <Geth> ¦ rakudo/main: 

[13:49] <Geth> ¦ rakudo/main: This reverts commit aee3d2599a93ca52d90d4666f554781e28b695c9.

[13:49] <Geth> ¦ rakudo/main: 

[13:49] <Geth> ¦ rakudo/main: Avoid changing this return value until a more comprehensive

[13:49] <Geth> ¦ rakudo/main: approach to missing uniprops has been proposed, accepted,

[13:49] <Geth> ¦ rakudo/main: and implemented.

[13:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/741e6eaf99

[13:59] <[Coke]> ab5tract: do we think that uniprop will eventually round trip?

[13:59] <ab5tract> I would prefer it to, for sure

[14:01] <ab5tract> though I'm leaning towards proposing a single `unicode` method that would use named args to provide all of the use cases currently served by the various uni* methods, which would then be deprecated

[14:04] <[Coke]> Having a clear path forward in 6e would be nice.

[14:06] *** sena_kun joined
[14:20] <ab5tract> indeed. it should be straightforward to even turn an unknown property into a compile-time error

[14:32] <ab5tract> jdv: so I finally got a hand-rolled Blin container working, only to get: `Attempting to fetch 05dcd08151bd36e9f7c1dfaeb5d398409749d278…`

[14:35] <ab5tract> we know that this commit was built because I saw the new return value returning from uniprop. I'm specifying it as `old` and `new`

[14:38] <jdv> you'd likely have to talk to alexdaniel

[14:53] <ab5tract> it's potentially an architecture issue...

[14:54] <ab5tract> now I've circled 360 degrees back to just wanting blin to be able to compile a single checkout and test against it..

[14:54] <Geth> ¦ nqp/main: 3b9f3acd7d | ab5tract++ | src/QRegex/Cursor.nqp

[14:54] <Geth> ¦ nqp/main: Add dispatching logic for an HLL override

[14:54] <Geth> ¦ nqp/main: 

[14:54] <Geth> ¦ nqp/main: NQPMatchRole's `!DELEGATE_ACCEPTS` is not robust

[14:54] <Geth> ¦ nqp/main: enough to handle the complexity of inputs that Raku

[14:55] <Geth> ¦ nqp/main: gives it. So, offer the opportunity to override

[14:55] <Geth> ¦ nqp/main: the behavior via a `DELEGATE-ACCEPTS` method defined

[14:55] <Geth> ¦ nqp/main: in a consuming class/role.

[14:55] <Geth> ¦ nqp/main: 

[14:55] <Geth> ¦ nqp/main: This is part of addressing Rakudo Issues #5486 and #5372

[14:55] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/3b9f3acd7d

[14:55] <Geth> ¦ rakudo/main: 22492982c5 | ab5tract++ | src/core.c/Match.rakumod

[14:55] <Geth> ¦ rakudo/main: Add lookup for translating General_Category longnames

[14:55] <Geth> ¦ rakudo/main: 

[14:55] <Geth> ¦ rakudo/main: Also fix broken shortnames "L", "M", "N", "P", "S", "Z", and "C".

[14:55] <Geth> ¦ rakudo/main: 

[14:55] <Geth> ¦ rakudo/main: This fixes #5486 and #5372.

[14:55] <Geth> ¦ rakudo/main: 

[14:55] <Geth> ¦ rakudo/main: The problem this addresses is three-fold:

[14:55] <Geth> ¦ rakudo/main: <…commit message has 23 more lines…>

[14:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/22492982c5

[15:44] <patrickb> lizmat, nine: Can you have a look at: https://github.com/Raku/problem-solving/issues/417#issuecomment-1984532814

[16:22] <lizmat> ab5tract: isn't the NQP commit necessary for the Rakudo commit?

[16:24] <ab5tract> Yes, was going to push a bump shortly

[16:24] <ab5tract> it’s a soft dependency

[16:24] <lizmat> ack

[16:25] <lizmat> *phew*

[17:06] <ab5tract> lizmat: there seem to be some array-related spectests failing

[17:07] * lizmat runs a spectest

[17:11] <lizmat> I don't see anny failures

[17:11] <lizmat> *any

[17:12] <ab5tract> bizarre. I don't see how they could be related to my merged PRs either..

[17:16] <ab5tract> reverting `10ee220a796ddabd9185d2ee84cfe95418e93d8c` fixed the failures for me

[17:17] <Geth> ¦ rakudo/main: f2a7e7d47c | ab5tract++ | tools/templates/NQP_REVISION

[17:17] <Geth> ¦ rakudo/main: Bump MQP_REVISION

[17:17] <Geth> ¦ rakudo/main: 

[17:17] <Geth> ¦ rakudo/main: This enables the NQPMatchRole!DELEGATE_ACCEPTS ->

[17:17] <Geth> ¦ rakudo/main: Match.DELEGATE-ACCEPTS delegation.

[17:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f2a7e7d47c

[17:19] <ab5tract> gah, of course I don't see the typo until its too late..

[17:19] <lizmat> it *is* one step back from N  :-)

[17:19] <Geth> ¦ rakudo/main: 48ef5c3efe | (Elizabeth Mattijsen)++ | src/core.c/Any.rakumod

[17:19] <Geth> ¦ rakudo/main: Revert "Make dd more lenient towards non-of classes"

[17:19] <Geth> ¦ rakudo/main: 

[17:19] <Geth> ¦ rakudo/main: This reverts commit 10ee220a796ddabd9185d2ee84cfe95418e93d8c.

[17:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/48ef5c3efe

[17:21] <ab5tract> imdeed ;)

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[19:32] <nine> Maybe they don't post the amounts publicly?

[19:34] <patrickb> nine: They did in the past. But if you communicated an amount, I'm fine with that. I just wanted to make sure this won't be a issue later on.

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: a2af93feae | ab5tract++ | src/core.c/Main.rakumod

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: Provide conditional exit status for USAGE

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: 

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: Even though it's an older approach, it is trivial

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: to provide `USAGE` the same exit code logic as for

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: `GENERATE-USAGE`:

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: 

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage:   If a `--help` is part of the invocation, exit 0.

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: 

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage:   Otherwise, exit 2.

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: 

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: Addresses R#5514 (#5514).

[22:47] <Geth> ¦ rakudo/supply-exit-status-for-usage: review: https://github.com/rakudo/rakudo/commit/a2af93feae

[22:47] <linkable6> R#5514 [open]: https://github.com/rakudo/rakudo/issues/5514 [CLI] Bug: Command-line interface generator exits with success code 0 even when you pass random jibberish in the arguments

[22:47] <Geth> ¦ rakudo: ab5tract++ created pull request #5558: Provide conditional exit status for `USAGE`

[22:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5558

[22:48] *** linkable6_ left
[22:49] *** linkable6_ joined
[23:59] *** sena_kun left
