[06:37] *** andinus2 left
[06:38] *** andinus joined
[09:11] *** sena_kun joined
[09:27] *** sena_kun left
[09:28] *** sena_kun joined
[09:33] *** sena_kun left
[09:39] <Geth> ¦ roast: 2795530cf3 | (Elizabeth Mattijsen)++ | S02-types/num.t

[09:39] <Geth> ¦ roast: Group #2434 tests together

[09:39] <Geth> ¦ roast: 

[09:39] <Geth> ¦ roast: MasterDuke++ for the nudge

[09:39] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2795530cf3

[10:20] *** andinus left
[10:49] <timo> whee, rakudo-2024.09-1 on arm64 had a rebuild attempt and this time it worked \o/

[10:50] <lizmat> nice!

[10:50] <Geth> ¦ roast: 42efdb75be | (Elizabeth Mattijsen)++ | S06-other/main.t

[10:50] <Geth> ¦ roast: Add test for #2445

[10:50] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/42efdb75be

[10:51] <timo> i wonder why https://buildd.debian.org/status/logs.php?pkg=rakudo&ver=2024.09-1

[10:51] <timo> er

[10:51] <timo> ignore the text before the link

[11:50] <Geth> ¦ roast: 6b4e89cc4d | (Elizabeth Mattijsen)++ | S03-operators/assign.t

[11:50] <Geth> ¦ roast: Add test for #2490

[11:50] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6b4e89cc4d

[12:01] <Geth> ¦ roast: 4f4fe9090a | (Elizabeth Mattijsen)++ | S32-exceptions/misc2.t

[12:01] <Geth> ¦ roast: Add test for #2492

[12:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/4f4fe9090a

[12:28] *** sena_kun joined
[12:34] <Geth> ¦ rakudo/main: 19a32df007 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[12:34] <Geth> ¦ rakudo/main: Add tests for #2541

[12:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/19a32df007

[12:39] *** andinus joined
[12:55] <lizmat> greppable6: Stringy

[12:55] <greppable6> lizmat, 91 lines, 41 modules: https://gist.github.com/fd34065289f35354b09e16bbf16eb6b3

[13:08] *** Voldenet_ joined
[13:09] *** Voldenet left
[13:09] *** Voldenet_ is now known as Voldenet

[16:53] *** [Coke] joined
[17:31] <lizmat> so I had a bit of an epiphany re the "handles" trait

[17:31] <lizmat> this is currently handled by generating a method and adding this to the class, which basically means an extra level of indirection

[17:32] <lizmat> I was thinking we could be smarter in new-disp

[17:33] <lizmat> 1. add a %handles hash in the ClassHOW

[17:33] <lizmat> 2. let the "handles" trait add "method-name" => '$!attribute-name' pairs to that hash

[17:34] <lizmat> 3. let method dispatch first look at this %handles hash

[17:36] <lizmat> 4. if the method name exists in that hash, call ^find_method on the associated attribute, and dispatch to that

[17:36] <lizmat> 5. if not, use current dispatch

[17:38] <lizmat> not only would that save in runtime for handled methods, it would also save in lookup as the current situation really means two full dispatches for handled methods

[17:38] <lizmat> nine ab5tract vrurg does that feel like a viable approach ?

[17:38] <lizmat> greppable6: handles

[17:38] <greppable6> lizmat, 788 lines, 188 modules: https://gist.github.com/782fc3b1c54ee5d13ff39580ccd68e2b

[17:39] <ab5tract> interesting idea

[17:40] <ab5tract> For #3, there should probably be a flag that is added to any class that uses handles, so that the hash is not checked otherwise

[17:41] <lizmat> nqp::atkey on empty hashes is close to a noop

[17:44] <lizmat> m: use nqp; my $h := nqp::hash; nqp::existskey($h,"a") for ^100000000; say now - ENTER now

[17:44] <camelia> rakudo-moar 19a32df00: OUTPUT: «0.561074376␤»

[17:44] <lizmat> m: use nqp; my $h := nqp::hash; Nil for ^100000000; say now - ENTER now

[17:44] <camelia> rakudo-moar 19a32df00: OUTPUT: «0.403713711␤»

[17:46] <lizmat> m: use v6.*; use nqp; my $h := nqp::hash; nqp::existskey($h,"a") for ^100000000; say (nano - ENTER nano) / 100000000

[17:46] <camelia> rakudo-moar 19a32df00: OUTPUT: «5.71919547␤»

[17:46] <lizmat> m: use v6.*; use nqp; my $h := nqp::hash; Nil for ^100000000; say (nano - ENTER nano) / 100000000

[17:46] <camelia> rakudo-moar 19a32df00: OUTPUT: «4.12310636␤»

[17:56] <Geth> ¦ rakudo/main: 7d080edd9e | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[17:56] <Geth> ¦ rakudo/main: Add test for #2581

[17:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7d080edd9e

[18:12] <Geth> ¦ roast: 6dca656e19 | (Elizabeth Mattijsen)++ | S03-smartmatch/capture-signature.t

[18:12] <Geth> ¦ roast: Add test for #2596

[18:12] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6dca656e19

[21:44] *** sena_kun left
[21:58] <[Coke]> timo: https://github.com/rakudo/rakudo/issues/1257 ?

[22:03] <timo> -v

[22:05] <[Coke]> Do we want to create a "6.e" milestone for rakudo/rakudo bugs?

[22:06] <[Coke]> With the thought that anything with that milestone should be fixed by 6.e? (rather than a tag, I find milestones good for grouping things by date or release)

[22:06] <timo> is that text related to that issue? i'm confused

[22:07] <[Coke]> nope

[22:07] <[Coke]> I linked that issue just because it was on debian

[22:10] <timo> oh

[22:13] <timo> did you check the last few comments on that issue? it's only been kept open because there's no automated tests for BE systems?

[22:19] <[Coke]> Nope!

[23:14] <Geth> ¦ rakudo/coke/justyet: 83ea6e1aca | (Will Coleda)++ | 2 files

[23:14] <Geth> ¦ rakudo/coke/justyet: Remove playful "just yet" in error messages.

[23:14] <Geth> ¦ rakudo/coke/justyet: 

[23:14] <Geth> ¦ rakudo/coke/justyet: It's not explicitly checked for in test/spectest

[23:14] <Geth> ¦ rakudo/coke/justyet: review: https://github.com/rakudo/rakudo/commit/83ea6e1aca

[23:15] <Geth> ¦ rakudo: coke++ created pull request #5656: Remove playful "just yet" in error messages.

[23:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5656

[23:26] * timo creates a pull request to replace it with something even more playful

[23:27] <[Coke]> O_.;

