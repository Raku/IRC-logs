[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[03:00] <releasable6_> Next release in ≈1 day and ≈15 hours. GitHub is down. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:51] <Geth> ¦ nqp/r5486: e88e23a227 | ab5tract++ | src/QRegex/Cursor.nqp

[07:51] <Geth> ¦ nqp/r5486: Add lookup for translating General_Category longnames

[07:51] <Geth> ¦ nqp/r5486: 

[07:51] <Geth> ¦ nqp/r5486: Also fix broken shortnames "L", "M", "N", "P", "S", "Z", and "C".

[07:51] <Geth> ¦ nqp/r5486: 

[07:51] <Geth> ¦ nqp/r5486: This fixes R#5486 and R#5372.

[07:51] <Geth> ¦ nqp/r5486: review: https://github.com/Raku/nqp/commit/e88e23a227

[07:51] <linkable6> R#5486 [open]: https://github.com/rakudo/rakudo/issues/5486 [Unicode] Test for Unicode `General_Category` does not work with `L`

[07:51] <linkable6> R#5372 [open]: https://github.com/rakudo/rakudo/issues/5372 Test for Unicode `General_Category` does not work with long forms.

[07:52] <Geth> ¦ nqp: ab5tract++ created pull request #820: Add lookup for translating General_Category longnames

[07:52] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/820

[07:52] *** linkable6_ left
[07:54] <Geth> ¦ nqp/r5486: cb4c8d3466 | ab5tract++ | src/QRegex/Cursor.nqp

[07:54] <Geth> ¦ nqp/r5486: Add lookup for translating General_Category longnames

[07:54] <Geth> ¦ nqp/r5486: 

[07:54] <Geth> ¦ nqp/r5486: Also fix broken shortnames "L", "M", "N", "P", "S", "Z", and "C".

[07:54] <Geth> ¦ nqp/r5486: 

[07:54] <Geth> ¦ nqp/r5486: This fixes R#5486 and R#5372.

[07:54] <Geth> ¦ nqp/r5486: review: https://github.com/Raku/nqp/commit/cb4c8d3466

[07:54] <linkable6> R#5486 [open]: https://github.com/rakudo/rakudo/issues/5486 [Unicode] Test for Unicode `General_Category` does not work with `L`

[07:54] <linkable6> R#5372 [open]: https://github.com/rakudo/rakudo/issues/5372 Test for Unicode `General_Category` does not work with long forms.

[07:55] *** linkable6_ joined
[07:56] <ab5tract> Feedback welcome. The use of lookup hashes is hopefully mitigated by having them be `my` scoped in the Cursor class.. I am under the impression that this means that we only pay the memory penalty once, and not for every cursor

[08:46] *** sena_kun joined
[08:46] <Geth> ¦ nqp/r5486: 07a7a103f9 | ab5tract++ | src/QRegex/Cursor.nqp

[08:46] <Geth> ¦ nqp/r5486: Add lookup for translating General_Category longnames

[08:46] <Geth> ¦ nqp/r5486: 

[08:46] <Geth> ¦ nqp/r5486: Also fix broken shortnames "L", "M", "N", "P", "S", "Z", and "C".

[08:46] <Geth> ¦ nqp/r5486: 

[08:46] <Geth> ¦ nqp/r5486: This fixes R#5486 and R#5372.

[08:46] <Geth> ¦ nqp/r5486: review: https://github.com/Raku/nqp/commit/07a7a103f9

[08:47] <linkable6> R#5486 [open]: https://github.com/rakudo/rakudo/issues/5486 [Unicode] Test for Unicode `General_Category` does not work with `L`

[08:47] <linkable6> R#5372 [open]: https://github.com/rakudo/rakudo/issues/5372 Test for Unicode `General_Category` does not work with long forms.

[08:47] *** linkable6_ left
[08:48] *** linkable6_ joined
[09:16] <Geth> ¦ rakudo/main: 604663a3c4 | (Stefan Seifert)++ | src/Raku/ast/scoping.rakumod

[09:16] <Geth> ¦ rakudo/main: RakuAST: report line number of call to unknown routine

[09:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/604663a3c4

[09:16] <Geth> ¦ rakudo/main: c118661d0f | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[09:16] <Geth> ¦ rakudo/main: RakuAST: fix compilation errors when using meta-ops

[09:16] <Geth> ¦ rakudo/main: 

[09:16] <Geth> ¦ rakudo/main: So far we did well with simple meta-ops like X+ but failed when multiple

[09:16] <Geth> ¦ rakudo/main: meta-ops were stacked like ZX+. Fix by pushing in a layer of abstraction

[09:16] <Geth> ¦ rakudo/main: so we can deal with infixes and meta-infixes.

[09:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c118661d0f

[09:16] <Geth> ¦ rakudo/main: b899592bd4 | (Stefan Seifert)++ | 3 files

[09:16] <Geth> ¦ rakudo/main: RakuAST: support calling meta-ops as functions without &-prefix

[09:16] <Geth> ¦ rakudo/main: 

[09:16] <Geth> ¦ rakudo/main: infix:<X+>((1,), (2,)) is just as valid as &infix:<X+>((1,), (2,)) but

[09:16] <Geth> ¦ rakudo/main: parses totally differently. Add the same handling to this other code

[09:16] <Geth> ¦ rakudo/main: path.

[09:16] <nine> 1057

[09:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b899592bd4

[09:16] *** sena_kun left
[09:28] <lizmat> confirmed  :-)

[10:34] <ab5tract> do I remember correctly that t/spec/S32-io/IO-Socket-Async.t is known to be problematic (at least on macOS)?

[10:53] <lizmat> not for a while afaik, at least not on Apple silicon

[11:13] <ab5tract> hmm.. I thought it was a flapper for some reason. it's failing here for some reason, but can't really see how it could be connected to the General_Category work

[11:15] <lizmat> what's the flap rate you're seeing?

[11:21] <ab5tract> https://gist.github.com/ab5tract/bf578c070073006bd6ada9209b44260f

[11:22] <ab5tract> it's self-explanatory in that the address is likely already in use because test 2 didn't break the promise as expected

[11:23] <lizmat> This is not the web page you are looking for ?

[11:41] <ab5tract> weird, try again?

[11:43] <lizmat> now it works  :-)

[11:44] <lizmat> doesn't look familiar to me, that error message

[11:45] <ab5tract> hmm

[11:45] <ab5tract> thanks for checking :)

[11:45] <lizmat> added the output that I see

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:05] <Geth> ¦ roast: 8fe5a2f2a8 | (Stefan Seifert)++ | S03-metaops/cross.t

[12:05] <Geth> ¦ roast: Fix unrelated error in error checking test

[12:05] <Geth> ¦ roast: 

[12:05] <Geth> ¦ roast: A better compiler will not only detect the invalid X. meta operator but

[12:05] <Geth> ¦ roast: also that the "foo" routine is not defined. Thus we would get an

[12:05] <Geth> ¦ roast: X::Comp::Group exception containing exceptions for both errors and the

[12:05] <Geth> ¦ roast: test would incorrectly fail.

[12:05] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8fe5a2f2a8

[12:12] <Geth> ¦ rakudo/main: eb1069aca0 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[12:12] <Geth> ¦ rakudo/main: RakuAST: fix unknown method errors in some meta-op related situations

[12:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eb1069aca0

[12:12] <Geth> ¦ rakudo/main: 7de8258573 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[12:12] <Geth> ¦ rakudo/main: RakuAST: fix CannotMeta checks looking at the wrong operator

[12:12] <Geth> ¦ rakudo/main: 

[12:12] <Geth> ¦ rakudo/main: The properties of the to-be-metad infix are deciding while we looked at

[12:12] <Geth> ¦ rakudo/main: the meta-operator instead.

[12:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7de8258573

[13:24] <ab5tract> interesting.. so t/spec/S32-io/IO-Socket-Async.t fails for me with current HEAD 

[13:25] <ab5tract> happy it's not related to my uniprop fix, and if it has been failing for a while it would explain why I was under the impression that it is supposed to..

[13:25] <ab5tract> not so happy to have a headscratcher :)

[14:18] <nine> lizmat: 16:18 -!- Irssi: lizmat has closed the connection to you

[14:18] *** lizmat left
[14:19] *** lizmat joined
[14:19] <lizmat> nine: weird, on my end all seemed ok

[14:20] <lizmat> nine: could it be that your end is forcing OTR ?

[16:14] <Geth> ¦ rakudo/r5486: 57efd00287 | ab5tract++ | 3 files

[16:14] <Geth> ¦ rakudo/r5486: Add several symbols to hllsym lookup

[16:14] <Geth> ¦ rakudo/r5486: 

[16:14] <Geth> ¦ rakudo/r5486: These are used by QRegex::Cursor in order to disambiguate

[16:14] <Geth> ¦ rakudo/r5486: between the variety of inputs that it receives.

[16:14] <Geth> ¦ rakudo/r5486: 

[16:14] <Geth> ¦ rakudo/r5486: Part of addressing R#5486 and R#5372, which relate to

[16:14] <Geth> ¦ rakudo/r5486: uses of General_Category in regexes like:

[16:14] <linkable6> R#5486 [open]: https://github.com/rakudo/rakudo/issues/5486 [Unicode] Test for Unicode `General_Category` does not work with `L`

[16:14] <Geth> ¦ rakudo/r5486: 

[16:14] <Geth> ¦ rakudo/r5486:     '$' ~~ /<:General_Category<Currency_Symbol>>/

[16:14] <linkable6> R#5372 [open]: https://github.com/rakudo/rakudo/issues/5372 Test for Unicode `General_Category` does not work with long forms.

[16:14] <Geth> ¦ rakudo/r5486:     'a' ~~ /<:General_Category("Lowercase_Letter")>/

[16:14] <Geth> ¦ rakudo/r5486:     '9' ~~ /<:General_Category("Number")>/

[16:14] <Geth> ¦ rakudo/r5486: review: https://github.com/rakudo/rakudo/commit/57efd00287

[16:15] *** linkable6_ left
[16:17] *** linkable6_ joined
[16:17] <Geth> ¦ nqp/r5486: 8d1a480a32 | ab5tract++ | src/QRegex/Cursor.nqp

[16:17] <Geth> ¦ nqp/r5486: Add lookup for translating General_Category longnames

[16:17] <Geth> ¦ nqp/r5486: 

[16:17] <Geth> ¦ nqp/r5486: Also fix broken shortnames "L", "M", "N", "P", "S", "Z", and "C".

[16:17] <Geth> ¦ nqp/r5486: 

[16:17] <Geth> ¦ nqp/r5486: This fixes R#5486 and R#5372.

[16:17] <Geth> ¦ nqp/r5486: 

[16:17] <Geth> ¦ nqp/r5486: The problem this addresses is three-fold:

[16:17] <linkable6> R#5486 [open]: https://github.com/rakudo/rakudo/issues/5486 [Unicode] Test for Unicode `General_Category` does not work with `L`

[16:17] <Geth> ¦ nqp/r5486: <…commit message has 26 more lines…>

[16:17] <Geth> ¦ nqp/r5486: review: https://github.com/Raku/nqp/commit/8d1a480a32

[16:17] <linkable6> R#5372 [open]: https://github.com/rakudo/rakudo/issues/5372 Test for Unicode `General_Category` does not work with long forms.

[16:18] *** linkable6_ left
[16:19] <ab5tract> lizmat: regarding not fixing bugs in Rakudo because NQP might one day be used somewhere else ...

[16:20] *** linkable6_ joined
[16:23] <ab5tract> I don't really know how to express my reaction to this at the moment, so I'll just leave it at: I strongly disagree

[16:24] <ab5tract> besides, if it can't find those symbols, it will just fall back to the behavior it already had

[16:25] <ab5tract> s/will/can be made to/

[16:26] <lizmat> heh..   well, the only raku strings I can find in NQP are on the JS backend, and for handling ED phasers

[16:26] <lizmat> *END

[16:27] <lizmat> to me it feels a bit like home squatting

[16:28] <ab5tract> to me it feels like making perfect the enemy of good

[16:28] <ab5tract> and it's extremely demotivating

[16:28] <ab5tract> but I'm also a fair bit upset by it, so I will go afk for a while to cool down

[16:34] <lizmat> sorry, didn't mean to de-motivate: I'm definitely in favour of fixing issues, and they don't have to be perfect

[16:35] <nine> ab5tract: it's not so much about NQP being used by something else. That would be the Parrot trap all over again. It's more about proper layering and lower layers not knowing intimate details of higher layers. Sometimes it cannot be avoided, but we should keep the number of these holes at a practical minimum.

[16:35] <nine> So the question is always: is this one of those rare cases where it's the only sensible option?

[16:39] <nine> What is that check for explicit type Str for? I have not understood that yet

[16:44] <ab5tract> that's to account for other ACCEPTS-y `$obj` such as numbers and ranges. it's mostly a performance optimization to avoid those having to fall through the additional lookups and makes those checks safe to use `iseq_s`

[16:46] <ab5tract> lizmat: regarding the JVM concerns -- `Unicode property pairs NYI on jvm backend`

[16:47] <lizmat> ab5tract: ok, so you're saying it would never pass there on the JVM backend

[16:47] <lizmat> then the "unguarded" nqp::istype is ok

[16:47] <lizmat> it's just that I've borked the JVM backend too may times that way

[16:48] <lizmat> as MasterDuke17 can attest to

[16:48] <nine> What is self for a type in that code? Is it a QRegex::Cursor or is it a Match or even some Raku class?

[16:49] <Geth> ¦ nqp/r5486: 7b84b2c10a | ab5tract++ | src/QRegex/Cursor.nqp

[16:49] <Geth> ¦ nqp/r5486: Add lookup for translating General_Category longnames

[16:49] <Geth> ¦ nqp/r5486: 

[16:49] <Geth> ¦ nqp/r5486: Also fix broken shortnames "L", "M", "N", "P", "S", "Z", and "C".

[16:49] <Geth> ¦ nqp/r5486: 

[16:49] <Geth> ¦ nqp/r5486: This fixes R#5486 and R#5372.

[16:49] <Geth> ¦ nqp/r5486: 

[16:49] <Geth> ¦ nqp/r5486: The problem this addresses is three-fold:

[16:49] <Geth> ¦ nqp/r5486: <…commit message has 26 more lines…>

[16:49] <linkable6> R#5486 [open]: https://github.com/rakudo/rakudo/issues/5486 [Unicode] Test for Unicode `General_Category` does not work with `L`

[16:49] <Geth> ¦ nqp/r5486: review: https://github.com/Raku/nqp/commit/7b84b2c10a

[16:49] <linkable6> R#5372 [open]: https://github.com/rakudo/rakudo/issues/5372 Test for Unicode `General_Category` does not work with long forms.

[16:50] *** linkable6_ left
[16:50] <ab5tract> just pushed changes to account for the JVM eventuality but also to address keeping the code workable without the Raku hllsyms

[16:51] *** linkable6_ joined
[16:51] <ab5tract> nine: that's a good question..

[16:54] <ab5tract> this code is in NQPMatchRole, but checking what that might actually be mixed into

[16:56] <ab5tract> `we are WHAT: Match`

[16:57] <ab5tract> hmm... does that mean a Raku `Match`? the debug statement is `say("we are WHAT: " ~ self.WHAT.raku)`

[16:58] <lizmat> you can override NQPMatchRole methods in the Match class in Raku

[17:00] <ab5tract> yeah, I could see where you were pointing :)

[17:01] <ab5tract> I wasn't sure if this `Match` meant a Raku `Match` but I guess that's answered by it responding to Raku

[17:02] <ab5tract> ;)

[17:03] <ab5tract> s/Raku/.raku/ # though the sentence parses the same either way

[17:03] <ab5tract> lizmat++ nine++ 

[17:04] <ab5tract> next time I'm in the guts of an NQPRole I'll be sure to print out some details about what `self` actually is!

[17:05] <ab5tract> does it make sense to keep the lookups as NQP hashes in the Raku implementation? (for size or speed considerations?)

[17:09] <lizmat> yes

[17:09] <lizmat> nqp::atkey is at least one magnitude faster than .AT-KEY

[17:12] <ab5tract> ack

[17:17] *** squashable6 left
[17:20] *** squashable6 joined
[17:41] *** sena_kun joined
[17:45] *** squashable6 left
[17:47] *** squashable6 joined
[17:52] <ab5tract> weird, the overidden `Match!DELEGATE_ACCEPTS` doesn't get called :(

[17:58] <[Coke]> ab5tract++ btw.

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:22] <ab5tract> thanks [Coke]  :)

[19:14] <ab5tract> findings: 1) Defining `method !DELEGATE_ACCEPTS($obj, $arg) {...}` in Match.rakumod does not override that method in NQPMatchRole

[19:17] <ab5tract> 2) naming it Match!DELEGATE-ACCEPTS and calling `self."!DELEGATE-ACCEPTS"($obj, $arg)` from NQPMatchRole doesn't work (`No such method '!DELEGATE-ACCEPTS' for invocant of type 'Match'`) ... neither does using nqp::callmethod

[19:19] <ab5tract> 3) Defining `!DELEGATE_ACCEPTS` for Match in BOOTSTRAP.nqp doesn't override (and naming it `!DELEGATE-ACCEPTS` doesn't make it callable)

[19:20] <nine> What about a non-private method?

[19:24] <ab5tract> 4) non-private works :)

[19:25] <ab5tract> sorry, forgot to mention that

[19:27] <ab5tract> so would a regular method marked with `is implementation-detail` be the way to go then?

[19:30] <nine> I think so

[19:39] <ab5tract> any known and relevant performance difference between nqp::findmethod($?CLASS, 'foo') vs nqp::findmethod(self, 'foo')?

[19:48] <ab5tract> if all things are equal, I'll go with `$?CLASS` since it has no dependency on an instance

[19:52] <lizmat> yup, that sounds ok

[19:52] <lizmat> ab5tract: private methods in NQP don't exist as such, they're normal methods of which the name starts with !

[19:53] <lizmat> in Raku however, private methods are a different beast altogether

[19:53] <lizmat> they're kept separate from normal methods

[19:53] <lizmat> and are more akin to subs, except that they always have at least one positional arg, and that's "self"

[19:56] <ab5tract> that explains why the overriding doesn't work :)

[19:56] <lizmat> you could make it work with .add_method("!DELEGATE_ACCEPTS", ... )

[19:57] <lizmat> probably  :-)

[19:57] <Geth> ¦ rakudo/r5486: 026b6e3c96 | ab5tract++ | src/core.c/Match.rakumod

[19:57] <Geth> ¦ rakudo/r5486: Add lookup for translating General_Category longnames

[19:57] <Geth> ¦ rakudo/r5486: 

[19:57] <Geth> ¦ rakudo/r5486: Also fix broken shortnames "L", "M", "N", "P", "S", "Z", and "C".

[19:57] <Geth> ¦ rakudo/r5486: 

[19:57] <Geth> ¦ rakudo/r5486: This fixes R#5486 and R#5372.

[19:57] <Geth> ¦ rakudo/r5486: 

[19:57] <Geth> ¦ rakudo/r5486: The problem this addresses is three-fold:

[19:57] <linkable6> R#5486 [open]: https://github.com/rakudo/rakudo/issues/5486 [Unicode] Test for Unicode `General_Category` does not work with `L`

[19:57] <Geth> ¦ rakudo/r5486: <…commit message has 26 more lines…>

[19:57] <Geth> ¦ rakudo/r5486: review: https://github.com/rakudo/rakudo/commit/026b6e3c96

[19:57] <linkable6> R#5372 [open]: https://github.com/rakudo/rakudo/issues/5372 Test for Unicode `General_Category` does not work with long forms.

[19:58] *** linkable6_ left
[20:00] *** linkable6_ joined
[20:04] <[Coke]> in commit messages, #id is preferred over R#id (they get auto-linked by github then)

[20:04] <[Coke]> Nifty commit!

[20:05] <[Coke]> (and it links the commit to the ticket)

[20:07] <Geth> ¦ nqp/r5486: ad84f4ceb6 | ab5tract++ | src/QRegex/Cursor.nqp

[20:07] <Geth> ¦ nqp/r5486: Add dispatching logic for an HLL override

[20:07] <Geth> ¦ nqp/r5486: 

[20:07] <Geth> ¦ nqp/r5486: NQPMatchRole's `!DELEGATE_ACCEPTS` is not robust

[20:07] <Geth> ¦ nqp/r5486: enough to handle the complexity of inputs that Raku

[20:07] <Geth> ¦ nqp/r5486: gives it. So, offer the opportunity to override

[20:07] <Geth> ¦ nqp/r5486: the behavior via a `DELEGATE-ACCEPTS` method defined

[20:07] <Geth> ¦ nqp/r5486: in a consuming class/role.

[20:07] <Geth> ¦ nqp/r5486: 

[20:07] <Geth> ¦ nqp/r5486: This is part of addressing Rakudo Issues #5486 and #5372

[20:07] <Geth> ¦ nqp/r5486: review: https://github.com/Raku/nqp/commit/ad84f4ceb6

[20:07] <Geth> ¦ rakudo/r5486: ba98824a8e | ab5tract++ | src/core.c/Match.rakumod

[20:07] <Geth> ¦ rakudo/r5486: Add lookup for translating General_Category longnames

[20:07] <Geth> ¦ rakudo/r5486: 

[20:07] <Geth> ¦ rakudo/r5486: Also fix broken shortnames "L", "M", "N", "P", "S", "Z", and "C".

[20:07] <Geth> ¦ rakudo/r5486: 

[20:07] <Geth> ¦ rakudo/r5486: This fixes #5486 and #5372.

[20:07] <Geth> ¦ rakudo/r5486: 

[20:07] <Geth> ¦ rakudo/r5486: The problem this addresses is three-fold:

[20:07] <Geth> ¦ rakudo/r5486: <…commit message has 26 more lines…>

[20:07] <Geth> ¦ rakudo/r5486: review: https://github.com/rakudo/rakudo/commit/ba98824a8e

[20:07] <ab5tract> [Coke] made me do it :)

[20:09] <ab5tract> re: "you could make it work with .add_method("!DELEGATE_ACCEPTS", ... )" ... not sure about that, it wasn't working when I tried it in BOOTSTRAP.nqp but I may have been holding something wrong

[20:10] <Geth> ¦ rakudo: ab5tract++ created pull request #5555: Add lookup for translating General_Category longnames

[20:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5555

[20:11] <Geth> ¦ rakudo/r5486: c0ca6caa2f | ab5tract++ | src/core.c/Match.rakumod

[20:11] <Geth> ¦ rakudo/r5486: Add lookup for translating General_Category longnames

[20:11] <Geth> ¦ rakudo/r5486: 

[20:11] <Geth> ¦ rakudo/r5486: Also fix broken shortnames "L", "M", "N", "P", "S", "Z", and "C".

[20:11] <Geth> ¦ rakudo/r5486: 

[20:11] <Geth> ¦ rakudo/r5486: This fixes #5486 and #5372.

[20:11] <Geth> ¦ rakudo/r5486: 

[20:11] <Geth> ¦ rakudo/r5486: The problem this addresses is three-fold:

[20:11] <Geth> ¦ rakudo/r5486: <…commit message has 23 more lines…>

[20:11] <Geth> ¦ rakudo/r5486: review: https://github.com/rakudo/rakudo/commit/c0ca6caa2f

[20:12] <ab5tract> ooo, #5555! and at $day-job I pulled MR #555 on a project today too

[20:13] <lizmat> :-)

[20:24] <nine> This looks much nicer now :)

[20:26] <ab5tract> Agreed! thank you both for your help and guidance

[22:25] *** kjp left
[22:47] *** sena_kun left
[23:00] <releasable6_> Next release in ≈19 hours. GitHub is down. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:00] <releasable6> Next release in ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

