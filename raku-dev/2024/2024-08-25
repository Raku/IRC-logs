[02:56] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5631: Use binding for all sub aliases

[02:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5631

[07:24] *** doomlord joined
[07:30] <doomlord> ab5tract: do you know why splice flatten by default? Isn’t it confusing for newbies? Like the opposite of List.push

[07:31] <doomlord> is this a correct statement: there are Lists, Slips, and itemized arrays that are the opposite of Slips

[07:33] <doomlord> You get a slip on an array by the method Slip, you get an itemized array by the method ItemizedArray

[07:40] *** doomlord left
[07:41] <nine> ab5tract: I'm pretty sure it's working, but of course performance would be abysmal.

[07:43] <nine> The best solution to the dispatch-based-on-caller's-language-version problem is, well, to write a dispatcher or extend the current multi-dispatcher.

[07:44] <nine> For NativeCall I introduced the possibility for a routine to say that it needs a custom dispatcher: method CUSTOM-DISPATCHER(--> str) { 'raku-nativecall' }. This could be an easy way to experiment and write at least as first version of such custom dispatch code. Whether we want to keep it that way or incorporate it into the (already quite complex) multi-dispatch code would remain to be seen.

[07:47] <ab5tract> I already wrote the custom dispatcher for is item

[07:47] <ab5tract> Are you suggesting that the version check should live in the dispatcher?

[07:49] *** doomlord joined
[07:51] <nine> Yes. Then the check would happen only once at the call site. Even more, the language version is a very static property of that lexical scope, so it would be super cheap to check (much cheaper than a dynamic variable)

[07:52] <ab5tract> The cheaper version of the check is what I was looking for, so thanks

[07:55] <doomlord> So, how do you get an itemized array out of an array?

[08:00] <doomlord> .Unslip method, .Deslip, .Pils haha

[08:03] *** doomlord left
[08:05] *** doomlord joined
[08:06] <doomlord> last time I checked, dynamics variables and unicode were dooming raku performances. Glad you are doing something against them

[08:07] <doomlord> also gave a glance at lizmat work using rakuast. She’s on a good way to speed up regexes if I understand her trajectory correctly

[08:09] <doomlord> I’m afraid the unicode implementation will doom raku forever though haha

[08:12] *** sena_kun joined
[08:16] *** doomlord left
[08:16] *** doomlord joined
[08:17] *** doomlord left
[08:53] <[Tux]> Rakudo v2024.07-211-g5c532a3e2 (v6.d) on MoarVM 2024.07-13-g5e52422f4

[08:53] <[Tux]> csv-test-xs-20      0.142 -  0.143

[08:53] <[Tux]> csv-ip5xs           0.259 -  0.260

[08:53] <[Tux]> test-t --race       0.267 -  0.271

[08:53] <[Tux]> test-t              0.400 -  0.403

[08:53] <[Tux]> csv-ip5xs-20        1.105 -  1.114

[08:53] <[Tux]> test-t-20 --race    1.179 -  1.190

[08:53] <[Tux]> csv-parser          1.493 -  1.538

[08:53] <[Tux]> test                1.801 -  1.831

[08:54] <[Tux]> test-t-20           4.800 -  4.813

[08:54] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[10:28] *** dawids joined
[10:28] *** dawids left
[14:44] *** finanalyst joined
[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:05] *** finanalyst left
[16:24] <ab5tract> how does one check the Raku version from within NQP?

[16:26] <lizmat> language version or commit ?

[16:26] <lizmat> vrurg_ might actually know that offhand

[16:27] *** sena_kun left
[16:27] *** sena_kun joined
[16:41] *** sena_kun left
[16:41] *** sena_kun joined
[16:57] <ab5tract> loooks like `nqp::getcomp('Raku').language_revision` is the ticket

[17:12] <Geth> ¦ rakudo/splice-is-item-again-twice: cd858513fe | ab5tract++ | src/core.c/Array.rakumod

[17:12] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Dispatch in Array.splice based in `is item` trait

[17:12] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[17:12] <Geth> ¦ rakudo/splice-is-item-again-twice: This allows the following to DWIM:

[17:12] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[17:12] <Geth> ¦ rakudo/splice-is-item-again-twice:     > use v6.e.PREVIEW;

[17:12] <Geth> ¦ rakudo/splice-is-item-again-twice:     > my @a = 1,2,3;

[17:12] <Geth> ¦ rakudo/splice-is-item-again-twice:     > @a.splice(1,1,$[7,8])

[17:12] <Geth> ¦ rakudo/splice-is-item-again-twice:     # [1,[7,8],3]

[17:12] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/cd858513fe

[17:15] <ab5tract> As far as I can tell, pushing the version check to the dispatcher is going to be a significant PITA

[17:15] <Geth> ¦ rakudo/main: 35b89a37de | (Elizabeth Mattijsen)++ | 2 files

[17:15] <Geth> ¦ rakudo/main: RakuAST: handle RakuAST::Trait::WillBuild in .raku/deparsing

[17:15] <Geth> ¦ rakudo/main: 

[17:15] <Geth> ¦ rakudo/main: At least for now: it feels like it is being incorrectly codegenned

[17:15] <Geth> ¦ rakudo/main: for something like "has $.a = 42"

[17:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/35b89a37de

[18:12] <ab5tract> ah, nevermind, I think I've got it figured out. 

[19:49] <Geth> ¦ rakudo/main: c7dd2bc51e | (Elizabeth Mattijsen)++ | lib/RakuAST/Deparse/Highlight.rakumod

[19:49] <Geth> ¦ rakudo/main: RakuAST: initial stab at providing :allow support

[19:49] <Geth> ¦ rakudo/main: 

[19:49] <Geth> ¦ rakudo/main: to syntax highlighting.  This allows RakuDoc markup to be inserted

[19:49] <Geth> ¦ rakudo/main: in source code.  For instance, having B<> rendered as <bold></bold>

[19:49] <Geth> ¦ rakudo/main: and L<> rendered as a hyperlink.  For instance

[19:49] <Geth> ¦ rakudo/main: 

[19:49] <Geth> ¦ rakudo/main:     my B<$a> = L<42|https://the-answer.com>;

[19:49] <Geth> ¦ rakudo/main: <…commit message has 9 more lines…>

[19:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c7dd2bc51e

[19:55] <Geth> ¦ rakudo/splice-is-item-again-twice: 2373cbc973 | ab5tract++ | 3 files

[19:55] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Dispatch in Array.splice based in `is item` trait

[19:55] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[19:55] <Geth> ¦ rakudo/splice-is-item-again-twice: This allows the following to DWIM:

[19:55] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[19:55] <Geth> ¦ rakudo/splice-is-item-again-twice:     > use v6.e.PREVIEW;

[19:55] <Geth> ¦ rakudo/splice-is-item-again-twice:     > my @a = 1,2,3;

[19:55] <Geth> ¦ rakudo/splice-is-item-again-twice:     > @a.splice(1,1,$[7,8])

[19:55] <Geth> ¦ rakudo/splice-is-item-again-twice:     # [1,[7,8],3]

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/2373cbc973

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice: 61310eb82f | ab5tract++ | 3 files

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Dispatch in Array.splice based in `is item` trait

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice: This allows the following to DWIM:

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice:     > use v6.e.PREVIEW;

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice:     > my @a = 1,2,3;

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice:     > @a.splice(1,1,$[7,8])

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice:     # [1,[7,8],3]

[19:56] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/61310eb82f

[19:58] <ab5tract> nine: let me know if this matches your expectations

[20:00] <ab5tract> I wasn't sure how static the language revision is in this context

[20:01] <Geth> ¦ rakudo/splice-is-item-again-twice: 46b6526dec | ab5tract++ | 3 files

[20:01] <Geth> ¦ rakudo/splice-is-item-again-twice: [6.e] Dispatch in Array.splice based in `is item` trait

[20:01] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[20:01] <Geth> ¦ rakudo/splice-is-item-again-twice: This allows the following to DWIM:

[20:01] <Geth> ¦ rakudo/splice-is-item-again-twice: 

[20:01] <Geth> ¦ rakudo/splice-is-item-again-twice:     > use v6.e.PREVIEW;

[20:01] <Geth> ¦ rakudo/splice-is-item-again-twice:     > my @a = 1,2,3;

[20:01] <Geth> ¦ rakudo/splice-is-item-again-twice:     > @a.splice(1,1,$[7,8])

[20:01] <Geth> ¦ rakudo/splice-is-item-again-twice:     # [1,[7,8],3]

[20:01] <Geth> ¦ rakudo/splice-is-item-again-twice: review: https://github.com/rakudo/rakudo/commit/46b6526dec

[21:01] <nine> ab5tract: sorry, doesn't look right. I was more thinking about adding one more magic variable to the generated code, i.e. a QAST::Var(:name<!__RAKU_VERSION__>, :scope<lexical>) that the dispatcher can read from the caller's lexical environment

[21:04] <ab5tract> Ok… I‘ll have to think on that because reading that right now, I have very little conception of what you are suggesting

[21:05] *** donaldh left
[21:08] <ab5tract> Is this a proposal for a new and improved way to gate features by language revision? Because we already do that in places and I’m not clear what makes this case so different that it needs such special treatment

[21:34] *** donaldh joined
[22:08] *** sena_kun left
