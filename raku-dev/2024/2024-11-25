[00:10] <Geth> ¦ rakudo/main: 7d29c62a9c | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[00:10] <Geth> ¦ rakudo/main: Bump NQP to get latest bartolin++ JVM fixes

[00:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7d29c62a9c

[02:07] *** MasterDuke joined
[03:18] *** MasterDuke left
[05:00] *** librasteve_ left
[07:27] *** [Coke] left
[08:33] *** |Tux| left
[08:48] *** sena_kun joined
[09:22] *** [Coke] joined
[09:52] *** sena_kun left
[10:29] *** librasteve_ joined
[12:58] <ab5tract> it looks like I was a naughty human and didn't implement revision gating for JVM

[13:03] <lizmat> naughty!

[13:03] <lizmat> Sinterklaas knows!

[13:18] <ab5tract> kool voor mijn sokje :(

[13:18] <lizmat> de roe!

[13:25] *** patrickb left
[13:26] *** greenfork joined
[13:26] *** patrickb joined
[14:07] <timo> asche auf dein haupt :<

[16:15] <lizmat> notable6: weekly

[16:15] <notable6> lizmat, No notes for “weekly”

[16:23] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/11/25/2024-46-no-release/

[16:29] <timo> "the us conference" is that really what it's called? ;)

[16:41] <lizmat> well...  I don't want mention some names

[17:06] <timo> hum. did i break something? all the interesting lexicals show up as VMNull ...

[17:06] <lizmat> that's not very interesting :-(

[17:10] <timo> i think it was just that after stepping into a new function none of the lexicals have been filled from things like arguments and such yet

[17:11] <timo> one step later they are there

[17:11] <lizmat> ah, interesting  :-)

[17:19] <timo> i haven't looked at the exact output of the debugserver's line number instrumentation in a long time

[17:28] *** coleman left
[17:30] *** coleman joined
[17:41] <timo> hahaha printing the contents of a hash from something that does ANSI stuff from inside the debugger CLI makes the cursor jump around in the middle of printing its table and makes everything mashed up

[17:41] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 0c1d4a48f4 | ab5tract++ | 2 files

[17:41] <Geth> ¦ rakudo/lower-bound-for-revision-gating: Add lower-bounding for the revision-gated trait

[17:41] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 

[17:41] <Geth> ¦ rakudo/lower-bound-for-revision-gating: This adds a finishing touch to revision gating: the ability to

[17:41] <Geth> ¦ rakudo/lower-bound-for-revision-gating: use revision gating to evolve methods that otherwise have the exact

[17:41] <Geth> ¦ rakudo/lower-bound-for-revision-gating: same signature.

[17:41] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 

[17:42] <Geth> ¦ rakudo/lower-bound-for-revision-gating: The is done by adding the trait to the candidate that is to be replaced:

[17:42] <Geth> ¦ rakudo/lower-bound-for-revision-gating: <…commit message has 25 more lines…>

[17:42] <Geth> ¦ rakudo/lower-bound-for-revision-gating: review: https://github.com/rakudo/rakudo/commit/0c1d4a48f4

[17:44] <lizmat> timo: I guess the contents needs to be de-ANSIfied  :-)

[17:46] <timo> maybe just .raku on it would be a good start? maybe for the common case where nothing needs to be escaped, chop off the " at the start and the end though?

[17:47] <Geth> ¦ rakudo: ab5tract++ created pull request #5696: Add lower-bounding for the revision-gated trait

[17:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5696

[17:57] <timo> `step until { .<frames>.none.path.contains("dispatchers.nqp") }` i think i will add this as a built-in command to the moar debugger app for now

[17:57] <timo> until "step out" is implemented

[17:57] <timo> i wonder when that will happen, or who will do it ...

[17:59] <timo> the firefox dev tools have a notion of "ignored sources" where you can mark files or whole subfolders as "not interesting" and they will be skipped by default

[18:02] <lizmat> sounds like a nice feature to have ?

[18:02] <lizmat> but that could be handled by the debugger app, no?

[18:03] <lizmat> just auto-resume if the file / folder is not interesting

[18:03] <lizmat> iow, let the debugger do the work ?

[18:05] <timo> yes, but it's slow

[18:06] <lizmat> I guess it would be, but it would be a first approx

[18:06] <lizmat> if people using it start complaining it's slow, then maybe it could use VM support

[18:06] <timo> sure, so that would be similar to the command i wrote up there

[18:07] <lizmat> right

[18:09] <timo> skipping through dispatchers may be even easier since there's a special thing on the call stack when we're in one

[18:09] <timo> easier for moar, i mean

[18:09] <lizmat> right

[18:10] <timo> it would be kinda nice to have all of the little pointy blocks that we use in dispatchers.nqp actually be something that has a name that shows up in backtraces

[18:10] <timo> otherwise it's all just <anon>, apart from the few helper subs

[18:10] <lizmat> sub foo ($_) { ... }

[18:10] <timo> yeah

[18:10] <lizmat> would work as well and have a name?

[18:10] <timo> maybe nqp::staticcode(...) with it?

[18:11] <timo> not sure if that's necessary at all

[18:11] <timo> just gotta be sure it's not any slower, that would be embarassing

[18:12] *** lizmat_ joined
[18:15] *** lizmat left
[18:21] *** lizmat_ left
[18:21] *** lizmat joined
[18:31] <ab5tract> hmm, would it be totally crazy to add a `:name` parameter to pointy blocks? -> $x {...}:name<a-solid-signifier>

[18:33] <ab5tract> I guess the first step should be to test the impact of using existing forms of named blocks

[18:33] <timo> seems a bit odd

[18:33] <timo> but also this is in nqp code, so no real impact to raku users

[18:49] <ab5tract> that's actually a good point..

[18:49] *** sena_kun joined
[18:59] <ab5tract> should I put some revision-gated tests in `t/02-rakudo` or in `t/spec/12-methods`?

[19:06] <lizmat> in t/02-rakudo I'd say for now

[20:13] <ab5tract> this is so weird... is-run dies with a SORRY for code that runs perfectly fine when passed to the executable directly via `-e`

[20:16] <timo> insufficient amounts of "make install"?

[20:18] <ab5tract> ahhhh

[20:18] <ab5tract> weird

[20:28] <ab5tract> hmmm.. unfortunately that doesn't seem to matter :(

[20:28] *** |Tux| joined
[20:30] <timo> d'oh

[20:34] <ab5tract> the escaping on this seems borked:

[20:34] <ab5tract> "use v6.d;\nproto sub gated(|) is revision-gated(\"6.c\") \{*}\nmulti sub gated(Int \$x) is revision-gated(\"6.c\") \{ say \"6.c\" }\nmulti sub gated(Int \$x) is revision-gated(\"6.d\") \{ say \"6.d\" }\nmulti sub gated(Int \$x) is revision-gated(\"6.e\") \{ say \"6.e\" }\n\ngated;\n\n"

[20:34] <ab5tract> why is it escaping `\{` but not `}` ?

[20:35] <ab5tract> If I try to run that directly, it indeed dies on that first escaped `\{`

[20:37] <ab5tract> but of course is-run is failing differently, with: `===SORRY!=== Error while compiling -e\nCalling gated() will never work with any of these multi signatures:\n    (Int \$x) \n    (Int \$x) \n    (Int \$x)`

[20:41] <ab5tract> ah! it's my fault in the end

[20:42] <ab5tract> I was testing without signatures

[20:42] <ab5tract> use v6.d; proto sub foo(|) is revision-gated("6.c") { * }; multi sub foo(Int $x) is revision-gated("6.c") { say "6.c" }; multi sub foo(Int $x) is revision-gated("6.d") { say "6.d" }; foo'

[20:42] <ab5tract> ^ works fine

[20:44] <ab5tract> sorry for the noise yall... all I needed was to, you know, match the signature. `gated` doesn't work, `gated(5)` does work.

[20:50] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 534fdf3c9d | ab5tract++ | 3 files

[20:50] <Geth> ¦ rakudo/lower-bound-for-revision-gating: Add lower-bounding for the revision-gated trait

[20:50] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 

[20:50] <Geth> ¦ rakudo/lower-bound-for-revision-gating: This adds a finishing touch to revision gating: the ability to

[20:50] <Geth> ¦ rakudo/lower-bound-for-revision-gating: use revision gating to evolve methods that otherwise have the exact

[20:50] <Geth> ¦ rakudo/lower-bound-for-revision-gating: same signature.

[20:50] <Geth> ¦ rakudo/lower-bound-for-revision-gating: 

[20:50] <Geth> ¦ rakudo/lower-bound-for-revision-gating: The is done by adding the trait to the candidate that is to be replaced:

[20:50] <Geth> ¦ rakudo/lower-bound-for-revision-gating: <…commit message has 23 more lines…>

[20:50] <Geth> ¦ rakudo/lower-bound-for-revision-gating: review: https://github.com/rakudo/rakudo/commit/534fdf3c9d

[20:51] <timo> shit happens :)

[20:54] <timo> oh! i was wondering why my escape codes that are supposed to move the cursor and clear lines wasn't working; turns out i was using "say" which of course also puts a newline at the end m)

[20:56] <bartolin> looking at the remaining spectest failures for rakudo-j I noticed that this evaluation (from https://github.com/Raku/roast/blob/298aaac4d4/S32-str/format.t#L28) explodes with a NullPointerException:

[20:56] <bartolin> m: use v6.e.PREVIEW; my $f = Format.new("%5s")

[20:56] <camelia> rakudo-moar 7d29c62a9: ( no output )

[20:57] <bartolin> it happens in https://github.com/rakudo/rakudo/blob/7d29c62a9c/src/Raku/ast/impl.rakumod#L77 -- and $obj is null at that point

[20:57] <bartolin> according to the backtrace it comes from https://github.com/rakudo/rakudo/blob/7d29c62a9c/src/Raku/ast/signature.rakumod#L1255

[20:57] <bartolin> the thing is, that $obj seems to be null on MoarVM as well at that point.

[20:58] <timo> maybe moar just tolerates that? and treats it as a no-op?

[20:58] <bartolin> yeah, I'm pretty sure, that nqp::setobj with a nul object doesn't explode on MoarVM.

[20:59] <bartolin> now I wonder how to fix that or work around that ...

[21:01] <bartolin> the jvm backend is more picky when trying to do operations on null objects. And I don't like the idea to try to change it to be more liberal all over the place ...

[21:02] <ab5tract> bartolin: I don't suppose we could some use a nullsa

[21:02] <ab5tract> nullable Optional ?

[21:03] <ab5tract> I haven't poked at the jvm code enough to know if that's remotely workable though

[21:07] <bartolin> I seem to remember that we had this kind of discussion once in a while over the last years. But in the past the result was usually, that it wouldn't make sense to try to change the inner workings of the JVM backend.

[21:08] <bartolin> that being said I don't feel qualified to judge and decide that

[21:08] <ab5tract> I'd be really curious to see what would happen if I start converting classes to Kotlin one by one :)

[21:08] <ab5tract> one day I'll at least give it a try

[21:09] <bartolin> ab5tract++ :)

[21:09] <ab5tract> Kotlin's nullability story is so freaking good

[21:10] <ab5tract> and you make things final by using `val` instead of `var`. I never make anything final in Java because the code is already so verbose to begin with

[21:11] * bartolin hasn't done anything with Kotlin, but will do some reading

[21:11] <timo> ah, so "l" in val is for fina"l", and r in var is for "r"esettable. so is there vau for "u"nsigned maybe?

[21:11] <timo> does vau vau give you a unsigned long long?

[21:13] <ab5tract> no, but "van van" gives you a pointer to a pointer ;)

[21:16] <ab5tract> the defined-or in kotlin is like: val foo: Int = maybe-null() ?: 5; // could also be statement, so you can return or throw or whateva

[21:18] <ab5tract> beats the heck out of if `Integer foo = maybe-null(); if (foo == null) { foo = 5 }` (and allows final for foo, which isn't possible with this taglietelle)

[21:18] <ab5tract> &sleep; // cheers all .o/

[21:24] <bartolin> o/

[21:39] <timo> don't we have a syntax for a list of base-16 numbers?

[21:39] <timo> m: say :16[<10 20 30 1a 1b 1c>];

[21:39] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «Cannot convert string to number: trailing characters after number in '1<HERE>a' (indicated by <HERE>)␤  in block <unit> at <tmp> line 1␤␤»

[21:40] <timo> m: say :16[<1 2 3 a b c>];

[21:40] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '<HERE>a' (indicated by <HERE>)␤  in block <unit> at <tmp> line 1␤␤»

[21:40] *** librasteve_ left
[21:40] <timo> i thought :16 is syntax for "base 16 number as a string coming in", not base 10? :S

[21:41] <timo> This call only converts base-16 strings to numbers; value $(IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3"), "a", "b", "c") is of type List, so cannot be converted!

[21:41] <timo> :(

[21:42] <timo> gimme a hypercolon

[22:24] *** sena_kun left
[22:36] *** sena_kun joined
[23:14] *** sena_kun left
