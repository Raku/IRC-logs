[08:12] *** sena_kun joined
[09:16] <Geth> ¦ nqp/main: 1ec7ed3fd6 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[09:16] <Geth> ¦ nqp/main: Bump MoarVM with lazy deserialization fix

[09:16] <Geth> ¦ nqp/main: 

[09:16] <Geth> ¦ nqp/main: nine++

[09:16] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/1ec7ed3fd6

[09:26] <Geth> ¦ rakudo/main: d6320eaff9 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[09:26] <Geth> ¦ rakudo/main: Bump NQP to get laze deserialization fix

[09:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d6320eaff9

[09:30] <lizmat> REA harvester now running with fix, keeping fingers crossed!

[10:04] <nine> lizmat: there's something odd in the IRC logs: https://irclogs.raku.org/raku-dev/2024-04-10.html#07:46 that line with "BUT" should be 3 lines below

[10:06] <lizmat> seems to match the raw log: https://irclogs.raku.org/raku-dev/2024-04-10.log

[10:07] <lizmat> so it's not a rendering issue

[10:14] <Geth> ¦ rakudo/main: 312a5d857b | (Stefan Seifert)++ | 2 files

[10:14] <Geth> ¦ rakudo/main: RakuAST: support arguments on require statements

[10:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/312a5d857b

[10:14] <Geth> ¦ rakudo/main: 9ca35fb965 | (Stefan Seifert)++ | 7 files

[10:14] <Geth> ¦ rakudo/main: RakuAST: Fix required  symbols not getting used

[10:14] <Geth> ¦ rakudo/main: 

[10:14] <Geth> ¦ rakudo/main: For Foo::Bar.foo we currently generate code like QAST::Op.new(:op<callmethod>,

[10:14] <Geth> ¦ rakudo/main: :name<foo>, QAST::WVal.new(:value(Foo::Bar)). Works beautifully because we

[10:14] <Geth> ¦ rakudo/main: have a compile-time-value for Foo::Bar which either comes from the setting,

[10:14] <Geth> ¦ rakudo/main: got imported via use (a BEGIN time effect) or is something we just compiled

[10:14] <Geth> ¦ rakudo/main: ourselves.

[10:14] <Geth> ¦ rakudo/main: <…commit message has 15 more lines…>

[10:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9ca35fb965

[10:15] <lizmat> nine: so that'd be 100% of the way now?  :-)

[10:19] <nine> Let's hope so :)

[10:20] <lizmat> cool!

[10:20] <lizmat> REA is running every 10 minutes now, no crashes yet

[10:31] <Geth> ¦ rakudo/main: 698836830d | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[10:31] <Geth> ¦ rakudo/main: RakuAST: support colon pairs on dotty infixes

[10:31] <Geth> ¦ rakudo/main: 

[10:31] <Geth> ¦ rakudo/main: Fixes my Pair $p .= new :key<k>, :value<v>

[10:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/698836830d

[10:45] <lizmat> 1029!

[10:45] <lizmat> nine: oddly enough, I got some new failures on "make test", can you confirm?

[10:46] <lizmat> this could be from any commit in the past days, didn't run any RakuAST tests for a while

[10:46] <nine> Like....all of NativeCall again

[10:50] <lizmat> yeah  :-(

[10:50] <lizmat> ok, so it was not just me  :-(

[10:50] <lizmat> No such method 'is-resolved' for invocant of type

[10:50] <lizmat> 'RakuAST::Declaration::Import'

[10:51] <lizmat> seems an easy fix?

[10:51] <nine> probably

[10:56] <nine> Wth the NativeCall tests segfault

[11:00] <nine> Ok, that may be some precomp screwup. Cleaning those helped with the segfault

[11:09] <lizmat> *phew*

[11:13] *** evalable6 left
[11:18] *** evalable6 joined
[11:29] <Geth> ¦ rakudo/main: e52a456f06 | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[11:29] <Geth> ¦ rakudo/main: RakuAST: fix regression in require

[11:29] <Geth> ¦ rakudo/main: 

[11:29] <Geth> ¦ rakudo/main: Fixes "No such method 'is-resolved' for invocant of type

[11:29] <Geth> ¦ rakudo/main: 'RakuAST::Declaration::Import'". No idea how this could slip through.

[11:29] <Geth> ¦ rakudo/main: 

[11:29] <Geth> ¦ rakudo/main: lizmat++ for spotting

[11:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e52a456f06

[11:48] <Geth> ¦ rakudo/main: 09abf8206c | (Stefan Seifert)++ | src/Raku/Actions.nqp

[11:48] <Geth> ¦ rakudo/main: RakuAST: support the other indirect method call syntax

[11:48] <Geth> ¦ rakudo/main: 

[11:48] <Geth> ¦ rakudo/main: Implements support for e.g. key($pair:)

[11:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/09abf8206c

[11:49] <nine> 1031

[11:50] <nine> Oh, we don't support macros at all yet

[11:52] <lizmat> and 140 for "make test"  :-)

[11:54] *** sena_kun left
[12:18] <Geth> ¦ rakudo/main: 3a836f23b0 | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[12:18] <Geth> ¦ rakudo/main: RakuAST: bring back some more parse checks on calls

[12:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a836f23b0

[12:18] <nine> 1032

[12:28] <lizmat> confirmed  :-)

[12:35] <ab5tract> I'll merge R#5549 in little bit, unless anyone has an objection

[12:35] <linkable6> R#5549 [open]: https://github.com/rakudo/rakudo/pull/5549 Add dispatch disambiguation via 'is item' parameter trait

[12:36] * lizmat has no objection

[14:27] <Geth> ¦ rakudo/main: 5 commits pushed by ab5tract++

[14:27] <Geth> ¦ rakudo/main: 70f16f637f | Scaffolding for 'is item' trait on parameters

[14:27] <Geth> ¦ rakudo/main: 3b42de1805 | Ensure that candidates carry itemization reqs

[14:27] <Geth> ¦ rakudo/main: 36901bb05e | Add dispatch disambiguation for 'is item'

[14:27] <Geth> ¦ rakudo/main: 0ce5575248 | (Legacy dispatch) disambiguate itemization with 'is item'

[14:27] <Geth> ¦ rakudo/main: c02bd131c4 | Add sigil exception for 'is item' to RakuAST

[14:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/3a836f23b02e...c02bd131c403

[14:47] *** [Coke] left
[14:47] *** [Coke] joined
[15:06] <lizmat> 30+ runs of the REA harvester, and no crash yet!  :-)

[15:09] <ugexe> wanna try the example 1 liner from https://github.com/rakudo/rakudo/issues/1920 ?

[15:10] <ugexe> or just `raku -e 'await Promise.allof: (1..100).map({ start { require Test; } });'` a few times

[15:11] <ugexe> that sometimes would give me an error mentioning `dependencies+deserialize`

[15:13] <lizmat> yeah, still crashes, also in RakuAST

[15:14] <lizmat> the REA crash produced a good backtrace though...   one that didn't make sense. but an NQP backtrace still

[15:58] *** MasterDuke left
[17:37] *** sena_kun joined
[18:58] <nine> lizmat: so REA's now fine?

[18:59] <lizmat> nine: yeah, still ok after 50+ runs

[18:59] <lizmat> before, it would have crashed 2..3 times already

[19:08] <nine> That was great detective work of yours :)

[19:08] <lizmat> yeah, bugged me for 6+ months  :-)

[19:09] <lizmat> in hindsight, I had a pretty good idea of what was going on (namely an nqp::create() without calling .new)

[19:10] <lizmat> but I never found how that could happen, until I had an aha erlebnis  :-)

[19:19] *** MasterDuke joined
[21:04] *** sena_kun left
[21:05] *** sena_kun joined
[23:29] *** sena_kun left
