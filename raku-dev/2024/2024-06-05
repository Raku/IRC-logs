[00:33] <jdv> nine: nice

[04:20] *** sivoais joined
[07:29] <patrickb> For those that didn't notice / forgot: That's the Raku ecosystem grant application https://news.perlfoundation.org/post/raku-ecosystem-tonyo

[08:12] *** sena_kun joined
[08:46] *** sena_kun left
[08:52] *** finanalyst joined
[09:41] <lizmat> TIL that deepmap doesn't actuall support FIRST / NEXT / LAST phasers

[09:41] <lizmat> nor blocks with multiple args

[10:28] <ab5tract> :(

[10:31] <lizmat> actually, no multiple args makes sense when you start thinking about it

[10:32] <lizmat> and not supporting phasers, by consequence, also, as you'd need to decide whether or not to fire them when recursinng

[10:37] <ab5tract> Well, I still think multiple args is the wrong approach in regular maps and a relatively serious problem when used in greps

[10:38] <lizmat> fwiw, .kv.map( -> $key, $value { ... } )    feels valid to me

[10:38] <ab5tract> But I still shed a tear or two for consistency’s sake

[10:40] <ab5tract> I think that is a really small reason to implement such a significant departure from the expected semantics of map: processing a single element from a list at a time

[10:40] <lizmat> m: my %h = a => 42, b => 666; %h .= map: -> $key, $value { $key.uc => $value }; dd %h

[10:40] <ab5tract> The original approach of having each k/v be in its own list makes more sense to me

[10:40] <camelia> rakudo-moar ad0afb047: OUTPUT: «No such method 'uc' for invocant of type 'Pair'␤  in block <unit> at <tmp> line 1␤␤»

[10:40] <lizmat> m: my %h = a => 42, b => 666; %h = %h.kv.map: -> $key, $value { $key.uc => $value }; dd %h

[10:40] <camelia> rakudo-moar ad0afb047: OUTPUT: «{:A(42), :B(666)}␤»

[10:45] <ab5tract> m: my %h = :42a, :666b; dd (%h.keys Z %h.values).map: -> [$k,$v] { $k.succ => $v.pred }

[10:45] <camelia> rakudo-moar ad0afb047: OUTPUT: «(:b(41), :c(665)).Seq␤»

[10:46] <lizmat> ab5tract: if falls out of for -> $a, $b { } semantics

[10:47] <lizmat> as "for foo { ... }" is really just foo.map({...}).iterator.sink-all under the hood

[10:47] <ab5tract> Maybe there are performance implications I am not aware of…

[10:48] <lizmat> performance implications of what ?

[10:49] <ab5tract> Making .kv return a flat list instead of a list of tuples

[10:49] <ab5tract> See my invocation above

[10:50] <ab5tract> s/tuples/lists/

[10:50] <lizmat> that would be about 3x as slow, is my guess

[10:51] <ab5tract> You mean that implementation of .kv or using lists of lists in general?

[10:51] <lizmat> as .kv is just about producing values, and Z creates new values and thus allocationns

[10:51] <lizmat> list of lists I'd say

[10:52] <ab5tract> Seems a bit shocking, but I believe you

[10:53] <lizmat> eh, I could be wrong  :-)

[10:55] <ab5tract> R#1661 — here’s some discussion about how this feature interacts with Greg

[10:55] <linkable6> R#1661 [open]: https://github.com/rakudo/rakudo/issues/1661 Remove .grep with .count > 1 Callables

[10:55] <ab5tract> Erm, grep, not Greg :)

[10:59] <lizmat> fwiw, depracating would be an option

[11:04] <ab5tract> My impulse for proposing to do so would be for consistency, both internally and wrt external expectations about how these functional thingies usually behave

[11:05] <ab5tract> lizmat: do those phasers in deepmap result in errors/warnings or are they silently ignored?

[11:06] <lizmat> silently ignored

[11:20] <ab5tract> Ouch :/

[11:20] <ab5tract> That should be adjusted I think

[11:22] <lizmat> yeah, I'll add some checks for that

[13:58] <Geth> ¦ rakudo/lizmat-deepmap: 65f39a512a | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[13:58] <Geth> ¦ rakudo/lizmat-deepmap: Check expectations of .deepmap

[13:58] <Geth> ¦ rakudo/lizmat-deepmap: 

[13:58] <Geth> ¦ rakudo/lizmat-deepmap: - Add warning if the Callable has a FIRST, NEXT or LAST phaser, as

[13:58] <Geth> ¦ rakudo/lizmat-deepmap:   these are not supported by .deepmap

[13:58] <Geth> ¦ rakudo/lizmat-deepmap: - Die if the number of arguments of the Callable is not 1: only

[13:58] <Geth> ¦ rakudo/lizmat-deepmap:   Callables that accept 1 are currently supported

[13:58] <Geth> ¦ rakudo/lizmat-deepmap: review: https://github.com/rakudo/rakudo/commit/65f39a512a

[13:58] <Geth> ¦ rakudo: lizmat++ created pull request #5592: Check expectations of .deepmap

[13:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5592

[17:28] <Geth> ¦ rakudo/main: e2fa55b9b1 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[17:28] <Geth> ¦ rakudo/main: RakuAST: allow for =for formula

[17:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e2fa55b9b1

[17:51] *** sena_kun joined
[18:23] <Geth> ¦ rakudo/lizmat-deepmap: 71550aaa79 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.rakumod

[18:23] <Geth> ¦ rakudo/lizmat-deepmap: Rince and repeat for duckmap

[18:23] <Geth> ¦ rakudo/lizmat-deepmap: review: https://github.com/rakudo/rakudo/commit/71550aaa79

[18:26] *** finanalyst left
[18:52] <lizmat> in he WTF department of today:

[18:52] <lizmat> m: dd (^6).duckmap(-> $_ where * %% 5 { ENTER say "e$_"; LEAVE say "l$_"; $_ + 42 })

[18:52] <camelia> rakudo-moar e2fa55b9b: OUTPUT: «e0␤(42, proto method defined (Mu $:: |) {*}, 2, 3, 4, 47)␤l0␤l1␤l2␤l3␤l4␤e5␤l5␤»

[18:53] <lizmat> 1. even though 4/5 iterations do not ENTER, they *do* fire the LEAVE phaser

[18:54] <lizmat> 2. where on earth does the: proto method defined (Mu $:: |) {*}   value come from

[19:05] <lizmat> I guess 1 is another expression of:

[19:05] <lizmat> m: sub a(Str:D $) { LEAVE say "goodbye" }; a 42

[19:05] <camelia> rakudo-moar e2fa55b9b: OUTPUT: «goodbye␤Type check failed in binding to parameter '<anon>'; expected Str but got Int (42)␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:06] <lizmat> aka: LEAVE is called even if we didn't make it into the body of sub yet

[19:07] <lizmat> which leaves 2.

[19:07] <lizmat> afk&

[19:20] *** finanalyst joined
[21:38] *** finanalyst left
[22:33] *** sena_kun left
[23:25] <Geth> ¦ nqp/main: 7d01903329 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[23:25] <Geth> ¦ nqp/main: Bump MoarVM for fix in return / LEAVE interaction

[23:25] <Geth> ¦ nqp/main: 

[23:25] <Geth> ¦ nqp/main: patrickb++

[23:25] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/7d01903329

[23:37] <Geth> ¦ rakudo/main: f85de735d6 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[23:37] <Geth> ¦ rakudo/main: Bump NQP for fix in return / LEAVE interaction

[23:37] <Geth> ¦ rakudo/main: 

[23:37] <Geth> ¦ rakudo/main: patrickb++

[23:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f85de735d6

