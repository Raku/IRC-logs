[01:35] <japhb> I'm not sure that should be called "sanity checking", because when I looked at it I briefly went insane.

[01:39] <ugexe> a sanity check and an insanity check are the same thing

[02:31] <japhb> ugexe: But if it were merely a predicate it should not have mutated my mental state.  A check that changes state in the process would be ... actually, something like a CAS.  That implies that now somehow we can have atomic operations on brains.  Huh.

[04:55] *** kjp left
[04:56] *** kjp joined
[07:52] <nine> ab5tract: .(5) is not a method call?

[07:57] *** finanalyst joined
[08:52] *** sena_kun joined
[08:54] <[Tux]> jdv: https://tux.nl/Talks/CSV6/speed4.html

[08:55] <[Tux]> and https://tux.nl/Talks/CSV6/speed4-20.html

[09:31] <ab5tract> nine: the why does it look like one?

[09:36] <ab5tract> But you are right, apparently that syntax is not actually method-ical

[09:36] <ab5tract> m: with [1,2,3] { say *.[2] }

[09:36] <camelia> rakudo-moar 66c4acad2: OUTPUT: «WhateverCode.new␤»

[09:37] <ab5tract> Seems surprising to me but 🤷

[09:43] <ab5tract> And CALL-ME should apparently not be considered a method either?

[09:43] <lizmat> CALL-ME to me, is a grey area: not sure whether that is an implementation-detail or not

[09:44] <ab5tract> m: with { dd :$_ } { *.CALL-ME(<crazy>) }

[09:44] <camelia> rakudo-moar 66c4acad2: ( no output )

[09:44] <lizmat> hmmmm I stand corrected: it is being tested in roast

[09:46] <ab5tract> Do we have a name for these no-really-method-calls-written-exactly-as-method-calls?

[09:46] <ab5tract> *not

[09:46] <lizmat> interface methods ?

[09:47] <ab5tract> Hmmm.. could work

[09:49] <ab5tract> Thinking of documentation here. Since there is a clear exception to “method calls curry”, I hope that exception can be similarly clearly stated

[09:49] <ab5tract> go

[09:49] <ab5tract> (No go, that’s a typo)

[09:53] <ab5tract> Maybe “turn-key” methods could also be a contender

[10:41] <jdv> [Tux]: thanks.  i was surprised those aren't easily searchable/discoverable.

[11:24] *** finanalyst left
[12:12] <[Tux]> post them to the ML and pin them :)

[13:03] <[Tux]> Rakudo v2024.04-79-g66c4acad2 (v6.d) on MoarVM 2024.04-4-gc1eedd502

[13:03] <[Tux]> csv-test-xs-20      0.141 -  0.142

[13:03] <[Tux]> csv-ip5xs           0.257 -  0.259

[13:03] <[Tux]> test-t --race       0.280 -  0.285

[13:03] <[Tux]> test-t              0.425 -  0.429

[13:03] <[Tux]> csv-ip5xs-20        1.131 -  1.144

[13:03] <[Tux]> test-t-20 --race    1.238 -  1.247

[13:03] <[Tux]> csv-parser          1.558 -  1.600

[13:03] <[Tux]> test                1.958 -  1.986

[13:03] <[Tux]> test-t-20           5.176 -  5.250

[14:02] *** finanalyst joined
[14:04] <Geth> ¦ rakudo/main: d9863e9ad5 | ab5tract++ | 3 files

[14:04] <Geth> ¦ rakudo/main: Add worry for WhateverCode on LHS of smartmatch

[14:04] <Geth> ¦ rakudo/main: 

[14:04] <Geth> ¦ rakudo/main: Smartmatch only curries `Whatever`, so any user that provides

[14:04] <Geth> ¦ rakudo/main: a `WhateverCode` expression as an LHS is likely to encounter

[14:04] <Geth> ¦ rakudo/main: a surprising failure (when compared to the behavior of most

[14:04] <Geth> ¦ rakudo/main: other infix operaators).

[14:04] <Geth> ¦ rakudo/main: 

[14:04] <Geth> ¦ rakudo/main: In order to be proactive and helpful to such users, we emit

[14:04] <Geth> ¦ rakudo/main: a descriptive worry in this scenario.

[14:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d9863e9ad5

[14:07] <ab5tract> I do still worry that we need a way to ignore/suppress worries :)

[14:11] *** sena_kun left
[14:11] <nine> Love that comment in Actions :D

[14:11] *** sena_kun joined
[14:18] *** sena_kun left
[14:18] *** sena_kun joined
[14:20] *** sena_kun left
[14:20] *** sena_kun joined
[14:22] *** sena_kun left
[14:23] *** sena_kun joined
[14:24] *** sena_kun left
[14:26] *** sena_kun joined
[14:27] *** sena_kun left
[14:28] *** sena_kun joined
[14:31] *** Altai-man joined
[14:32] <ab5tract> after having to revise that condition change for the fifth time, I couldn't help myself :)

[14:33] *** sena_kun left
[14:33] <ab5tract> maybe it was only three times, but still :)

[14:36] <ab5tract> Afterwards I started poking at R#1206, and opened a larger can of worms than I anticipated

[14:36] <linkable6> R#1206 [open]: https://github.com/rakudo/rakudo/issues/1206 [operators] Can’t override !~, =~, >>, << 

[15:52] <ab5tract> m: sub foo(+$x [$ is rw = False]) { $x }; say foo().raku

[15:52] <camelia> rakudo-moar d9863e9ad: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤concatenate requires a concrete string, but got null␤at <tmp>:1␤»

[15:53] <ab5tract> what is this code even trying to accomplish? I don't think I've ever seen a signature this bizarre

[15:53] <ab5tract> (from R#1211)

[15:53] <linkable6> R#1211 [open]: https://github.com/rakudo/rakudo/issues/1211 [LTA] LTA error with `is rw` defaults in an unpacked slurpy

[15:55] *** sena_kun joined
[15:56] *** Altai-man left
[16:06] <ab5tract> TIL: `The plus form flattens according to the single argument rule.`

[16:09] <ab5tract> but I don't see documentation regarding the `[$ is rw = False]` syntax

[17:46] *** lizmat_ joined
[17:48] *** lizmat left
[17:50] <Geth> ¦ rakudo/rakuast-phase-cleanup: 28 commits pushed by (Stefan Seifert)++

[17:50] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/compare/c5b634266dbc...67a612d31dc9

[17:51] <nine> This was a really mysterious bug: https://github.com/rakudo/rakudo/commit/8b894b02bd63eacf8a5b6ecd7d773e0c2c7c1e9e

[17:52] <MasterDuke> ab5tract: isn't that destructuring into a list of a single item?

[17:53] <ab5tract> ah, indeed

[17:55] *** lizmat_ left
[17:55] *** lizmat joined
[17:56] <ab5tract> nine: `This bug was particularly well hidden because we only use the full method cache when we try to find a method in a megamorphic call site.`<--- this sounds tricky indeed

[17:57] <lizmat> nine: shouldn't that commit be in main ?

[17:57] <lizmat> possibly cherry-picked ?

[18:08] <Geth> ¦ rakudo/main: 2cba37f5c4 | (Stefan Seifert)++ (committed by Elizabeth Mattijsen) | 2 files

[18:08] <Geth> ¦ rakudo/main: Fix mysterious failures when class construction process order changes

[18:08] <Geth> ¦ rakudo/main: 

[18:08] <Geth> ¦ rakudo/main: For creating a class' full method list (including inherited ones) we

[18:08] <Geth> ¦ rakudo/main: need an up-to-date MRO (i.e. the linearized inheritance list). This MRO

[18:08] <Geth> ¦ rakudo/main: is getting cached. While we already re-calculated this cache when the

[18:08] <Geth> ¦ rakudo/main: parent list changes, a window of opportunity was left open between

[18:08] <Geth> ¦ rakudo/main: method cache getting updated due to a method getting added and the MRO

[18:08] <Geth> ¦ rakudo/main: <…commit message has 9 more lines…>

[18:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2cba37f5c4

[18:09] <lizmat> nine++

[18:16] <ab5tract> MasterDuke: I've never seen destructuring combined with a slurpy in this way. Zoffix sure was good at surfacing these syntax shenanigans

[18:17] <MasterDuke> destructuring doesn't seem to be terribly common in general in most raku code i've seen

[18:18] <ab5tract> destructuring into an anyonmous scalar even less so :)

[18:19] <ab5tract> m: 'my $x := Int; -> ::($x) $y { say $y }(42.2)'.AST.EVAL

[18:20] <camelia> rakudo-moar d9863e9ad: OUTPUT: «No lexical found with name '::($x)'␤  in block <unit> at EVAL_0 line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:20] <ab5tract> m: 'BEGIN my $x := Int; -> ::($x) $y { say $y }(42.2)'.AST.EVAL

[18:20] <camelia> rakudo-moar d9863e9ad: OUTPUT: «===SORRY!===␤Unknown compilation input 'qast'␤»

[18:26] <ab5tract> I wonder how badly we want this to work (R#1284)

[18:26] <linkable6> R#1284 [open]: https://github.com/rakudo/rakudo/issues/1284 [LTA] `::(...)` as type in signatures silently fails

[19:16] <nine> What on earth does class Foo { my $.foo; } mean now?

[19:34] <ab5tract> nine: nothing good :)

[19:38] <ab5tract> I think the definition you are looking for is `self.typed-sorry: 'X::OutOfDate'` 

[19:41] <ab5tract> I mean, by definition `$.foo` implicates a `self`.. `my` is for singleton-ic variables when used in classes. any design that aimed at providing a guesstimate behavior the bridges the two should be erased IMO

[19:42] <ab5tract> nine: I believe I can close R#1277 as an EWONTFIX, right?

[19:42] <linkable6> R#1277 [open]: https://github.com/rakudo/rakudo/issues/1277 `require` fails to handle `:from` adverb

[20:04] <nine> To answer my own question: it's a class attribute, i.e. a lexical inside that class that gets an accessor generated for it

[20:04] <nine> They are described in https://github.com/Raku/old-design-docs/blob/master/S12-objects.pod

[20:07] <nine> ab5tract: I do not really see a reason to not implement that.

[20:09] <ab5tract> hmmm.. in that case it does make some sense..

[20:09] <ab5tract> but how you do refer to it afterwards? as `$foo`, right?

[20:10] <ab5tract> it just feels kind of disjointed from the usual semantics

[20:10] <ab5tract> s/semantics/syntax/

[20:14] <ab5tract> or does it work as `$.foo` but not as `$!foo`? (which would be even more disjointed)

[20:16] <nine> Yeah, it's $.foo inside the class

[20:16] <nine> And Foo.foo outside

[20:25] <ab5tract> Can't say that I love that

[20:26] <ab5tract> but I should probably save my energy for `has $foo`, as that one bothers me more :)

[20:29] <ab5tract> both cases are similar though: the exception-to-the-rule is more pedagogically/cognitively expensive than just having a dang rule

[20:30] <Geth> ¦ rakudo/main: ecd2dd4698 | ab5tract++ | src/core.c/IO/Socket/Async.rakumod

[20:30] <Geth> ¦ rakudo/main: Provide the host:port that compose the address in use

[20:30] <Geth> ¦ rakudo/main: 

[20:30] <Geth> ¦ rakudo/main: This quality-of-life change supplies the user with

[20:30] <Geth> ¦ rakudo/main: a bit more context when an "address already in use"

[20:30] <Geth> ¦ rakudo/main: exception bubbles up from libuv.

[20:30] <Geth> ¦ rakudo/main: 

[20:30] <Geth> ¦ rakudo/main: This addresses #1266 (R#1266).

[20:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ecd2dd4698

[20:30] <linkable6> R#1266 [open]: https://github.com/rakudo/rakudo/issues/1266 [LTA] LTA error with sock using already-bound port

[22:33] *** finanalyst left
[23:08] *** sena_kun left
