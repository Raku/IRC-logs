[01:26] <[Coke]> 45%

[02:01] <[Coke]> jdv: https://github.com/coke/raku-cal/tags has a signed tag.

[03:00] <releasable6> Next release in ≈6 days and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:55] <jdv> neato

[05:57] *** kjp left
[05:58] *** kjp joined
[05:59] *** kjp left
[05:59] *** kjp joined
[09:40] *** sena_kun joined
[11:41] <ab5tract> m: my $uno = <a b c>.SetHash; my $dos = $uno; $dos<a>:delete; dd $uno, $dos

[11:41] <camelia> rakudo-moar e4e226943: OUTPUT: «$uno = SetHash.new("c","b")␤$dos = SetHash.new("c","b")␤»

[11:41] <ab5tract> Apparently I still don’t know all there is to know about references, assignment, and binding in Raku :(

[11:42] <ab5tract> m: my $uno = <a b c>.SetHash; my $dos = $uno.SetHash; $dos<a>:delete; dd $uno, $dos

[11:42] <camelia> rakudo-moar e4e226943: OUTPUT: «$uno = SetHash.new("b","c")␤$dos = SetHash.new("b","c")␤»

[12:17] *** sena_kun left
[12:42] <lizmat> m: my $a = [1,2,3]; my $b = $a; say $b.pop; dd $a

[12:42] <camelia> rakudo-moar e4e226943: OUTPUT: «3␤$a = $[1, 2]␤»

[12:42] <lizmat> it's the same thing, ab5tract 

[12:43] <lizmat> in $b = $a, you're just putting the same Array object in another container

[12:43] <lizmat> m: my @a = 1,2,3; my @b = @a; say @b.pop; dd @a

[12:43] <camelia> rakudo-moar e4e226943: OUTPUT: «3␤[1, 2, 3]␤»

[12:44] <lizmat> with @b = @a, you're creating a new Array with the elements of @a

[12:45] <ab5tract> So binding is more or less a no-op on scalar containers?

[12:46] <lizmat> binding throws away the container

[12:46] <lizmat> my $a

[12:46] <lizmat> creates a lexical entry '$a' with a container bound to it

[12:46] <lizmat> $a = 42

[12:47] <lizmat> will bind the value 42 to the $!value attribute of the container

[12:47] <lizmat> $a := 42

[12:47] <lizmat> will bind 42 to the lexpad entry

[12:47] <ab5tract> ok, got it

[12:50] <ab5tract> I'm a bit surprised that there isn't a huffmanized operator for "no I actually want a this container to contain its very own contents"

[12:51] <ab5tract> But then again, I haven't really hit any issues with this personally, at least in whatever $time-span it would have/has taken for me to forget about it

[12:53] <ab5tract> I expect this was probably combed over pretty thorougly already, so maybe some kind of copy-on-modify mechanism was already proposed and thrown away...

[12:53] <lizmat> no I actually want a this container to contain its very own contents

[12:53] <lizmat> you mean decontainerize?

[12:54] <lizmat> m: my $a = (1,2,3); .say for $a; .say for $a<>

[12:54] <camelia> rakudo-moar e4e226943: OUTPUT: «(1 2 3)␤1␤2␤3␤»

[12:54] <ab5tract> I mean "I am using this version of the assignment operator to create a new variable based on and old variable but not literally referencing and affecting the state of the old variable"

[12:55] <lizmat> remember, everything is an object

[12:56] <lizmat> so, an "old" variable is a container object bound to a lexpad, with a value bound to its $!value attribute

[12:57] <lizmat> a new variable is a container object bound to a lexpad, that binds the value of the $!value attribute of the old variable's container object, to the $!value attribute of the new container object

[12:57] <lizmat> that's what assignment is, basically

[12:58] <lizmat> m: dd "foobar".trans( a => "x")

[12:58] <camelia> rakudo-moar e4e226943: OUTPUT: «"foobar"␤»

[12:58] <lizmat> so why isn't that "foobxr" ?

[12:59] <lizmat> because a => "x" is a named argument that gets silently eaten  :-(

[12:59] <lizmat> m: dd "foobar".trans( "a" => "x")

[12:59] <camelia> rakudo-moar e4e226943: OUTPUT: «"foobxr"␤»

[13:00] <lizmat> "a" => "x" is a positional Pair argument

[13:04] <ab5tract> Curious you mention that, because I've been wondering you one can distinguish between the two

[13:04] <ab5tract> m: my $a = "a" => 1; $a ~~ Pair ==> say();  dd sadface => ($a, $a) ~~ :(Pair $, Pair $)

[13:04] <camelia> rakudo-moar e4e226943: OUTPUT: «True␤Bool::False␤»

[13:05] <ab5tract> lol

[13:05] <ab5tract> the sadface disappears too

[13:05] <ab5tract> m: my $a = "a" => 1; $a ~~ Pair ==> say();  dd :sadface(($a, $a) ~~ :(Pair $, Pair $))

[13:05] <camelia> rakudo-moar e4e226943: OUTPUT: «True␤Bool::False␤»

[13:06] <ab5tract> m: my $a = "a" => 1; $a ~~ Pair ==> say();  dd :sadface(($a, $a) ~~ :(Pair $, Pair $, *%_))

[13:06] <camelia> rakudo-moar e4e226943: OUTPUT: «True␤Bool::False␤»

[13:08] <ab5tract> I haven't looked yet but I guess trans is using a slurpy *@ to catch the pairs 

[13:08] <ab5tract> *(R#5718)

[13:08] <linkable6> R#5718 [open]: https://github.com/rakudo/rakudo/issues/5718 [LTA] LTA: for <a b c>.pairs.combinations(2) -> ($a,$b) doesn't work

[13:10] <lizmat> well, actually it isn't anymore by default

[13:11] <lizmat> it prefers a single Positional now first, before falling back to the slurpy

[13:12] <lizmat> didn't fi 5718 though

[13:12] <lizmat> *fix

[13:35] <ab5tract> is that a change that was made to signature, etc or was that trans specific?

[13:42] <lizmat> .trans specific

[13:48] <ab5tract> Sometimes I wonder what would actually break if we started to only accept named arguments defined in signatures

[13:49] <ab5tract> Outside of code that is already a no-op because it is passing unused named arguments, I mean

[13:50] <lizmat> I once worked on a trait for that

[13:51] <lizmat> "endpoint" methods should be able to easily say: hey, I'm an endpoint, don't accept any unknown unnamed args

[13:52] <ab5tract> I take it that things got complicated :)

[13:54] <lizmat> I didn't know of the internals then

[13:55] <lizmat> in RakuAST it should be pretty simple: remove the slurpy *%_ from the signature

[13:56] <lizmat> if the trait is set

[13:56] <lizmat> method foo() is endpoint { }

[13:57] <lizmat> m: my method foo() { }; dd &foo.signature

[13:57] <camelia> rakudo-moar e4e226943: OUTPUT: «:(Mu $:: *%_)␤»

[13:58] <lizmat> with the "is endpoint" trait it should say :(Mu $::)

[13:59] <lizmat> there's probably some dispatch fallout as the assumption that %_ is always there, may be ingrained in some places

[13:59] <ab5tract> I'm trying a brutalist stab at setting `SIG_ELEM_ALL_NAMES_OK` to never be true :)

[14:00] <lizmat> that will break a *lot*

[14:00] <lizmat> I fear  :-)

[14:00] <ab5tract> I'm morbidly curious :)

[14:06] <Geth> ¦ rakudo/main: 42675f13b6 | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[14:06] <Geth> ¦ rakudo/main: .trans(Pair:D) in which key / value not defined, is a noop

[14:06] <Geth> ¦ rakudo/main: 

[14:06] <Geth> ¦ rakudo/main: So shortcut that as early as possible

[14:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/42675f13b6

[14:06] <Geth> ¦ rakudo/main: 03e2ee745c | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[14:06] <Geth> ¦ rakudo/main: Issue a warning for .trans(abc => ...)

[14:06] <Geth> ¦ rakudo/main: 

[14:06] <Geth> ¦ rakudo/main: As that is an unexpected named argument, it will be ignored.  And

[14:06] <Geth> ¦ rakudo/main: since there are no other transformation specifications, it would

[14:06] <Geth> ¦ rakudo/main: silently become a noop.

[14:06] <Geth> ¦ rakudo/main: 

[14:06] <Geth> ¦ rakudo/main: Since the op probably meant .trans("abc" => ...) (aka, transforming

[14:06] <Geth> ¦ rakudo/main: <…commit message has 13 more lines…>

[14:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/03e2ee745c

[14:07] <ab5tract> yeah, it doesn't compile :)

[14:08] <ab5tract> that said, I can't seem to find anywhere that this flag is actually toggled

[14:08] <lizmat> probably because that also affected subs / blocks with a slurpy has in the signature

[14:11] <ab5tract> I'm trying to recall whether I've ever seen the passing of *%_ contents from one method to another 

[14:12] <lizmat> I frequently have a frontend doing a *%_ and then passing a possibly modified %_ on so it wouldn't have to unpack / pack the hash again

[14:22] <ab5tract> Hm

[14:23] <ab5tract> m: dd Q|-> ($x,$y) { }|.AST.DEPARSE

[14:23] <camelia> rakudo-moar 03e2ee745: OUTPUT: «"->  \{ }\n"␤»

[14:23] <ab5tract> m: dd q|-> ($x,$y) { }|.AST.DEPARSE

[14:23] <camelia> rakudo-moar 03e2ee745: OUTPUT: «"->  \{ }\n"␤»

[14:35] <Geth> ¦ rakudo/main: 8365a5deb4 | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[14:35] <Geth> ¦ rakudo/main: Make .trans(Regex => Str) about 3 as fast

[14:35] <Geth> ¦ rakudo/main: 

[14:35] <Geth> ¦ rakudo/main: As that case can be simplified to .split(Regex).join(Str)

[14:35] <Geth> ¦ rakudo/main: 

[14:35] <Geth> ¦ rakudo/main: Part of #5488

[14:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8365a5deb4

[14:36] <ab5tract> nice one :)

[15:11] <Geth> ¦ rakudo/main: 4082d2c707 | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[15:11] <Geth> ¦ rakudo/main: Fix issue introduced with 8365a5deb4

[15:11] <Geth> ¦ rakudo/main: 

[15:11] <Geth> ¦ rakudo/main: Only .trans(Regex => Str) without named arguments can fast path.

[15:11] <Geth> ¦ rakudo/main: 

[15:11] <Geth> ¦ rakudo/main: Rearrange various tests so that case is also covered.

[15:11] <Geth> ¦ rakudo/main: 

[15:11] <Geth> ¦ rakudo/main: Part of #5488

[15:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4082d2c707

[15:19] <[Coke]> ugh. Failed to write 2797071 bytes to filehandle: No space left on device

[15:36] <Geth> ¦ App-MoarVM-Debug/main: dce0af95d6 | (Elizabeth Mattijsen)++ | 2 files

[15:36] <Geth> ¦ App-MoarVM-Debug/main: 0.2

[15:36] <Geth> ¦ App-MoarVM-Debug/main: review: https://github.com/raku-community-modules/App-MoarVM-Debug/commit/dce0af95d6

[16:00] <[Coke]> c: 8365a5deb say 3

[16:00] <committable6> [Coke], ¦8365a5d: «Cannot find this revision (did you mean “6bd955e”?)»

[16:15] <lizmat> m: dd "foobar".trans(("a" => "x", "x" => "A"))   # feels to me that should say "foobAr" ?

[16:15] <camelia> rakudo-moar 4082d2c70: OUTPUT: «"foobxr"␤»

[16:16] <lizmat> or is that a case of DIHWIDT ?

[16:16] <lizmat> moritz would know

[16:20] <ab5tract> I feel like that's a bit of DIHWIDT

[16:20] <ab5tract> or maybe a situation where a Failure or worry are warranted

[16:46] <ugexe> i would have expected foobxr, but i can also see why other might expect foobAr

[17:00] <lizmat> m: dd "foobar".trans("acb" => "xy")  # repeats the smaller "to" string

[17:00] <camelia> rakudo-moar 4082d2c70: OUTPUT: «"fooxxr"␤»

[17:01] <lizmat> m: dd "foobar".trans(("acb" => "xy",))  # pads the "to" string with the last char

[17:01] <camelia> rakudo-moar 4082d2c70: OUTPUT: «"fooyxr"␤»

[17:01] <lizmat> meh

[18:38] *** sena_kun joined
[19:03] *** gfldex left
[22:23] <[Coke]> 🥞🥞🥞 Bisecting PBKDF2 on the current run - but the bisect kicked off by blin seems to have failed.

[22:23] <[Coke]> (in case someone wants to dig in)

[22:23] <[Coke]> where can we monitor mothership progres?

[23:00] <releasable6> Next release in ≈5 days and ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:02] <Geth> ¦ rakudo: patrickbkr++ created pull request #5725: New script wrappers

[23:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5725

[23:04] <[Coke]> bookeeping note: shouldn't the *.bak skip be in your own git config, not the project?

[23:05] <[Coke]> otherwise: nifty!

[23:17] *** sena_kun left
[23:42] <[Coke]> ... "bookkeeping", as my kid just pointed out. :)

