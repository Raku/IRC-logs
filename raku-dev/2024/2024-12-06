[03:10] *** kjp left
[03:10] *** greppable6 left
[03:10] *** unicodable6 left
[03:10] *** bloatable6 left
[03:10] *** sourceable6 left
[03:10] *** tellable6 left
[03:10] *** coverable6 left
[03:10] *** lucs left
[03:19] *** lucs joined
[03:20] *** kjp joined
[08:58] *** [TuxCM] joined
[08:58] <[TuxCM]> Rakudo v2024.10-78-g0911eca22 (v6.d) on MoarVM 2024.10-45-gfd9da869d

[08:58] <[TuxCM]> csv-test-xs-20      0.142 -  0.143

[08:58] <[TuxCM]> csv-ip5xs           0.261 -  0.264

[08:58] <[TuxCM]> test-t --race       0.266 -  0.267

[08:58] <[TuxCM]> test-t              0.401 -  0.404

[08:58] <[TuxCM]> csv-ip5xs-20        1.105 -  1.120

[08:58] <[TuxCM]> test-t-20 --race    1.176 -  1.181

[08:58] <[TuxCM]> csv-parser          1.519 -  1.525

[08:58] <[TuxCM]> test                1.880 -  1.933

[08:58] <[TuxCM]> test-t-20           4.743 -  4.794

[08:58] <[TuxCM]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[09:41] <Geth> ¦ nqp-configure/main: 5b782265a6 | (Patrick Böker)++ | lib/NQP/Macros.pm

[09:41] <Geth> ¦ nqp-configure/main: Allow config keys with double colon in @if()@

[09:41] <Geth> ¦ nqp-configure/main: review: https://github.com/Raku/nqp-configure/commit/5b782265a6

[09:41] <Geth> ¦ nqp-configure/main: 566ca58573 | (Patrick Böker)++ (committed using GitHub Web editor) | lib/NQP/Macros.pm

[09:41] <Geth> ¦ nqp-configure/main: Merge pull request #29 from Raku/if-double-colon-config-key

[09:41] <Geth> ¦ nqp-configure/main: 

[09:41] <Geth> ¦ nqp-configure/main: Allow config keys with double colon in @if()@

[09:41] <Geth> ¦ nqp-configure/main: review: https://github.com/Raku/nqp-configure/commit/566ca58573

[09:51] *** nine left
[09:52] *** nine joined
[10:23] *** sena_kun joined
[10:34] *** sena_kun left
[10:44] *** sena_kun joined
[10:46] *** sena_kun left
[11:40] <Geth> ¦ rakudo/lizmat-ownup: 6902531090 | (Elizabeth Mattijsen)++ | 3 files

[11:40] <Geth> ¦ rakudo/lizmat-ownup: Add VM.ownup to produce backtraces of all threads and exit

[11:40] <Geth> ¦ rakudo/lizmat-ownup: 

[11:40] <Geth> ¦ rakudo/lizmat-ownup: This wraps Timo Paulssen's new "all-thread-bt" MoarVM syscall in

[11:40] <Geth> ¦ rakudo/lizmat-ownup: a method on the VM class, and attempts to do the same on other

[11:40] <Geth> ¦ rakudo/lizmat-ownup: backends.

[11:40] <Geth> ¦ rakudo/lizmat-ownup: 

[11:40] <Geth> ¦ rakudo/lizmat-ownup: That syscall generates a complete backtrace of *all* running threads

[11:40] <Geth> ¦ rakudo/lizmat-ownup: <…commit message has 9 more lines…>

[11:40] <Geth> ¦ rakudo/lizmat-ownup: review: https://github.com/rakudo/rakudo/commit/6902531090

[11:40] <Geth> ¦ rakudo: lizmat++ created pull request #5719: Add VM.ownup to produce backtraces of all threads and exit

[11:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5719

[11:52] <Geth> ¦ nqp/main: 7de34898a7 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[11:52] <Geth> ¦ nqp/main: Bump MoarVM to get Timo++ "is-debugserver-running" syscall

[11:52] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/7de34898a7

[12:06] <Geth> ¦ rakudo/main: 998fccfb49 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[12:06] <Geth> ¦ rakudo/main: Bump NQP to get Timo++ "is-debugserver-running" syscall

[12:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/998fccfb49

[12:36] <Geth> ¦ rakudo/main: 4a93b41368 | (Elizabeth Mattijsen)++ | src/core.c/VM.rakumod

[12:36] <Geth> ¦ rakudo/main: Add VM.remote-debugging method

[12:36] <Geth> ¦ rakudo/main: 

[12:36] <Geth> ¦ rakudo/main: On MoarVM, this may return:

[12:36] <Geth> ¦ rakudo/main: 0 - no remote debugging possible

[12:36] <Geth> ¦ rakudo/main: 1 - remote debugging is possible, but no remote debugger is watching

[12:36] <Geth> ¦ rakudo/main: 2 - remote debugger is watching

[12:36] <Geth> ¦ rakudo/main: 

[12:36] <Geth> ¦ rakudo/main: <…commit message has 12 more lines…>

[12:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4a93b41368

[12:52] <Geth> ¦ rakudo/lizmat-no-remote-debugging: 67aeb47bc8 | (Elizabeth Mattijsen)++ | 2 files

[12:52] <Geth> ¦ rakudo/lizmat-no-remote-debugging: Add "no-remote-debugging" module

[12:52] <Geth> ¦ rakudo/lizmat-no-remote-debugging: 

[12:52] <Geth> ¦ rakudo/lizmat-no-remote-debugging: So that you can disable debugging easily from the command line (with

[12:52] <Geth> ¦ rakudo/lizmat-no-remote-debugging: -Mno-remote-debugging) or by adding that to the RAKUDO_OPT environment

[12:52] <Geth> ¦ rakudo/lizmat-no-remote-debugging: variable.

[12:52] <Geth> ¦ rakudo/lizmat-no-remote-debugging: review: https://github.com/rakudo/rakudo/commit/67aeb47bc8

[12:52] <Geth> ¦ rakudo: lizmat++ created pull request #5720: Add "no-remote-debugging" module

[12:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5720

[14:05] *** [TuxCM] left
[14:09] *** donaldh left
[14:24] <Geth> ¦ roast: 2346529e63 | (Elizabeth Mattijsen)++ | 6.c/MISC/bug-coverage-stress.t

[14:24] <Geth> ¦ roast: Fix stress test that used .polymod

[14:24] <Geth> ¦ roast: 

[14:24] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/c81d9cfe86499587cde45a6a539b7c636a8364b0

[14:24] <Geth> ¦ roast: changed the semantics of .polymod for 1.  This test was depending on

[14:24] <Geth> ¦ roast: that behaviour, but was just using the old behaviour to test a scoping

[14:24] <Geth> ¦ roast: issue, rather than the specific output of .polymod.

[14:24] <Geth> ¦ roast: 

[14:24] <Geth> ¦ roast: Fixed the test by adding a subroutine that mimicked the old behaviour

[14:24] <Geth> ¦ roast: and using that instead of the .polymod method call.

[14:24] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2346529e63

[15:04] <Geth> ¦ rakudo: lizmat self-assigned Use of lookbehind assertions in .trans hangs rakudo https://github.com/rakudo/rakudo/issues/5488

[15:19] <lizmat> m: $/ := 42; "foo".trans(/ o / => "b")

[15:19] <camelia> rakudo-moar 4a93b4136: OUTPUT: «Cannot modify an immutable Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[15:44] <Geth> ¦ rakudo/main: 097d668036 | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[15:44] <Geth> ¦ rakudo/main: Make .trans only assign to $/ if it's assignable

[15:44] <Geth> ¦ rakudo/main: 

[15:44] <Geth> ¦ rakudo/main: Found while looking into #5488

[15:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/097d668036

[16:09] <Geth> ¦ rakudo/main: 59bfd7f6d3 | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[16:09] <Geth> ¦ rakudo/main: Check positional .trans args earlier

[16:09] <Geth> ¦ rakudo/main: 

[16:09] <Geth> ¦ rakudo/main: - add candidate without positionals for the noop case

[16:09] <Geth> ¦ rakudo/main: - check candidates using new .are functions before doing anything

[16:09] <Geth> ¦ rakudo/main: 

[16:09] <Geth> ¦ rakudo/main: Found while looking into #5488

[16:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/59bfd7f6d3

[16:19] <lizmat> m: say "foobar".trans("a..f" => "x")   TIL

[16:19] <camelia> rakudo-moar 097d66803: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> say "foobar".trans("a..f" => "x")<HERE>   TIL␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        stat…»

[16:19] <lizmat> m: say "foobar".trans("a..f" => "x")  #  TIL

[16:19] <camelia> rakudo-moar 097d66803: OUTPUT: «xooxxr␤»

[16:25] <lizmat> I don't see any documentation for that

[16:26] <ab5tract> An Easter Egg for Christmas!

[16:27] <ab5tract> m: multi sub add(Int(Str) $a, Int(Str) $b) { say "coercing Str to Int"; dd :$a, :$b }; multi sub add(Int(Num) $a, Int(Num) $b) { say "coercing Num to Int"; dd :$a, :$b }; add("4","1"); add(4.4e0, 2.3e0)

[16:27] <camelia> rakudo-moar 097d66803: OUTPUT: «coercing Str to Int␤:a(4)␤coercing Num to Int␤:b(1)␤:a(4)␤:b(2)␤»

[16:27] <ab5tract> I’m curious why the output is out of order here

[16:27] <ab5tract> I would expect :b(1) to land after :a(4)

[16:28] <lizmat> STDOUT vs STDERR output ?

[16:28] <ab5tract> It’s no Easter Egg, though :)

[16:29] <lizmat> m: multi sub add(Int(Str) $a, Int(Str) $b) { note "coercing Str to Int"; dd :$a, :$b }; multi sub add(Int(Num) $a, Int(Num) $b) { note "coercing Num to Int"; dd :$a, :$b }; add("4","1"); add(4.4e0, 2.3e0)

[16:29] <camelia> rakudo-moar 097d66803: OUTPUT: «coercing Str to Int␤:a(4)␤:b(1)␤coercing Num to Int␤:a(4)␤:b(2)␤»

[16:29] <ab5tract> I guess I hadn’t ever clocked that dd was sent over $*ERR

[16:29] <ab5tract> Or if I had, I managed to forget it

[16:31] <ab5tract> Thanks lizmat

[16:32] <lizmat> yw  :-)

[17:02] *** ggoebel joined
[17:11] <[Coke]> blin run about 1/2 way done.

[17:11] <[Coke]> Might need to double up my 

[17:11] <[Coke]> VM stats next release.

[17:25] *** nine left
[17:25] *** nine joined
[17:37] <[Coke]> guessing we could improve the speed of Blin run if we kept track of known failures. (because if the new version fails, we test the old version - if it also fails, it's not a regression, but if we kept track of "old", there'd be less work to do.

[18:10] <[Coke]> crap. I was running with the wrong "new".

[18:12] <[Coke]> jdv, restarting Blin run right now. :|

[18:21] <Geth> ¦ rakudo/main: de79080dcd | (Elizabeth Mattijsen)++ | 2 files

[18:21] <Geth> ¦ rakudo/main: Some minor .trans optimizations

[18:21] <Geth> ¦ rakudo/main: 

[18:21] <Geth> ¦ rakudo/main: Re-imagined the Rakudo::Internals.EXPAND-LITERAL-RANGE method into

[18:21] <Geth> ¦ rakudo/main: a lexical sub inside the Str class, and removed the method.

[18:21] <Geth> ¦ rakudo/main: 

[18:21] <Geth> ¦ rakudo/main: Makes .trans up to 10% faster

[18:21] <Geth> ¦ rakudo/main: 

[18:21] <Geth> ¦ rakudo/main: Done while looking into #5488

[18:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/de79080dcd

[18:26] <jdv> wut?

[18:27] <jdv> doesnt it default to HEAD?

[18:33] <[Coke]> yes, and I'm not using the defaults.

[18:34] <[Coke]> because I was rerunning so often last time, I didn't want to be changing what "new" meant each time.

[18:34] <[Coke]> how can I tell what whateverable has available to run? 59bfd7f6d isn't baked yet

[18:34] <linkable6> (2024-12-06) https://github.com/rakudo/rakudo/commit/59bfd7f6d3 Check positional .trans args earlier

[18:41] <jdv> it'll work when its available?:)

[18:42] <[Coke]> working my way back from HEAD, first few are 'not found'

[18:44] <jdv> c: 59bfd7f6d say "foo"

[18:44] <committable6> jdv, ¦59bfd7f: «Cannot find this revision (did you mean “69dd7d6”?)»

[18:44] <[Coke]> ah, that's a faster check than "running blin"

[18:44] <[Coke]> c: 998fccfb4 say 3

[18:44] <committable6> [Coke], ¦998fccf: «Cannot find this revision (did you mean “8bfb2c4”?)»

[18:45] <[Coke]> c: 0911eca22 say 3

[18:45] <committable6> [Coke], ¦0911eca: «3␤»

[18:45] <[Coke]> so maybe a day turnaround?

[18:45] <[Coke]> jdv++

[18:48] <[Coke]> there we go, restarted with correctish endpoints

[18:49] *** ggoebel left
[18:49] <Geth> ¦ rakudo: lizmat self-assigned [RakuDoc] Incomplete parsing of three markup codes https://github.com/rakudo/rakudo/issues/5721

[18:50] <Geth> ¦ rakudo: lizmat self-assigned [RakuDoc] Line numbers in AST https://github.com/rakudo/rakudo/issues/5707

[18:50] <Geth> ¦ rakudo: lizmat self-assigned [RakuDoc] Cannot recover `E<>` contents from AST with Deparse https://github.com/rakudo/rakudo/issues/5689

[18:52] <jdv> its not a day.  i think its relatively quick.  at least it used to be.

[18:54] <ab5tract> Would it make sense to keep a composable record of blin results, either in situ via json in the repo or else in a dedicated database?

[18:56] <ab5tract> I just can’t help feeling like the real value of any given “average” blin run is in spotting regressions. You only need to know what didn’t work last time for that, right?

[19:00] <[Coke]> need to run everything against new - you could avoid running 'old' if you already knew those results.

[19:01] <[Coke]> ... but we'd have to be careful as I imagine "old

[19:01] <[Coke]> " is typically a release while "new" is typically a commit a few days before the next tag

[19:01] <[Coke]> tha'ts easy to work with, just have to rmemeber.

[19:02] <ab5tract>  Indeed

[19:03] <ab5tract> But if we could somehow figure out how to keep the resource usage manageable we could theoretically run it weekly or something

[19:03] <jdv> old can be bisect targets too.  an "old cache" could be cool.

[19:03] <ab5tract> Hmm

[19:03] <ab5tract> Sounds like a reasonable use of S3 :)

[19:03] <jdv> well, not "old" but whatever

[19:04] <jdv> we only have hetzner resources afaik

[19:06] <ab5tract> You mean in terms of “provided by The Foundation”?

[19:08] <[Coke]> data storage is the cheap part compared to the cpu cost of doing the runs.

[19:08] *** sena_kun joined
[19:10] <jdv> yeah and yeah:)

[19:11] <jdv> since blin relies on the "mothership" for builds, maybe it makes sense to build that into the mothership?...

[19:11] <[Coke]> (hetzner, aws) I'm running in azure right now (must remember to shut off the VM when done!)

[19:11] <jdv> but that's currently hosted by alexdaniel

[19:12] <jdv> i left a crazy beefy aws vm running once and it cost way too much by accident

[19:12] <jdv> (that i used to use for blin runs)

[19:13] <[Coke]> yah, I left mine running for a moth and doing nothing was about 200USD.

[19:13] <[Coke]> *month

[19:15] <[Coke]> m: 92/2248.say

[19:15] <camelia> rakudo-moar de79080dc: OUTPUT: «WARNINGS for <tmp>:␤2248␤Useless use of "/" in expression "92/2248.say" in sink context (line 1)␤»

[19:15] <[Coke]> m: say 92/2248

[19:15] <camelia> rakudo-moar de79080dc: OUTPUT: «0.040925␤»

[19:24] *** sena_kun left
[19:24] *** sena_kun joined
[20:00] <[Coke]> m: say 133/2248

[20:00] <camelia> rakudo-moar de79080dc: OUTPUT: «0.059164␤»

[20:00] <[Coke]> :sigh:

[20:00] <jdv> that seems a bit slow

[23:23] *** sena_kun left
[23:26] <[Coke]> m: say 296 /2248

[23:26] <camelia> rakudo-moar de79080dc: OUTPUT: «0.131673␤»

[23:26] <[Coke]> Yes, we knew it was slow. let me dig up the specs again.

[23:27] <[Coke]> 8 vCPUs, 32 GiB RAM

[23:27] <[Coke]> running ubuntu 24.04

[23:32] <[Coke]> I'm using 5/32 G of memory, and only half the CPUs

[23:32] <[Coke]> load average: 3.71

[23:34] <[Coke]> .... I should run with a higher nproc.

[23:35] <[Coke]> ... restarting

[23:36] <[Coke]> (I had it pinned at nproc=3 based on an earlier run with a less beefy VM)

[23:46] <[Coke]> load average up to 8+ on an 8 CPU

[23:47] <[Coke]> memory up slightly to 7.8

[23:48] <[Coke]> so hopefully about 2.5* faster this run

