[07:01] *** sena_kun joined
[08:03] <Geth> ¦ rakudo/main: 52 commits pushed by (Jonathan Worthington)++, (Stefan Seifert)++

[08:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/a8745fe878d7...ee3c85e7818a

[08:04] <nine> So, back on fixing spectests :)

[08:05] <nine> Btw. I did a bit of benchmarking compilation of NativeCall. rakuast-phase-cleanup brings RakuAST compilation time back down to that of the old frontend with the optimizer disabled albeit with about 5 % lower memory usage than the old one.

[08:06] <lizmat> that's really nice!

[08:07] <nine> I'd say that this is a good position to be in, considering that with RakuAST we do things during the actual compile phase that the old frontend leaves to the optimizer and that so far I have not cared about compilation performance at all.

[08:13] <lizmat> right!

[09:16] <lizmat> on optimizations:

[09:16] <lizmat> m: say Q|foo()|.AST

[09:16] <camelia> rakudo-moar ee3c85e78: OUTPUT: «===SORRY!=== Error while compiling EVAL_0␤Undeclared routine:␤    foo used at line 1␤␤»

[09:17] <lizmat> I feel that that error is too early: surely one should be able to build synthetic ASTs this way without that error ?

[09:17] <lizmat> nine: aka , that check should go in later, do you agree?

[09:35] <nine> That error is thrown at CHECK time which is quite appropriate for...well checks

[09:37] <lizmat> sure, but we do allow this:

[09:37] <lizmat> m: my &foo; foo()

[09:37] <camelia> rakudo-moar ee3c85e78: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Callable'␤  in block <unit> at <tmp> line 1␤␤»

[09:38] <lizmat> anyways, it's an annoyance

[09:39] <lizmat> perhaps we need to have a way to call .AST and tell it not do CHECKs

[10:07] <Geth> ¦ rakudo/main: 87065a329d | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[10:07] <Geth> ¦ rakudo/main: RakuAST: fix inadvertent cyrring of Whatevers when it should only be WhateverCode

[10:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/87065a329d

[10:08] <lizmat> ooh... I missed the merge!   

[10:26] <lizmat> t/12-rakuast/highlight.rakutest fails for me, is that correct ?

[10:27] <lizmat> ah only first time: suspect some precomp issue

[10:38] <lizmat> 1068!  :-)

[15:26] <MasterDuke> nine++

[16:55] <ab5tract> m: Q|my &foo; foo()|.AST.say

[16:55] <camelia> rakudo-moar 87065a329: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::VarDeclaration::Simple.new(␤      sigil       => "\&",␤      desigilname => RakuAST::Name.from-identifier("foo")␤    )␤  ),␤  RakuAST::Statement…»

[16:56] <ab5tract> lizmat: I must be missing something, because it seems fine to me

[16:57] <ab5tract> Surely it shouldn’t be possible to call a routine before it’s been declared?

[16:58] <ab5tract> If it’s about generating the ast of the call to use synthetically, one should still expect to be required to obey the rules of the language when doing so?

[16:59] <ab5tract> m: my &foo; Q|foo()|.AST.say

[16:59] <camelia> rakudo-moar 87065a329: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::Call::Name.new(␤      name => RakuAST::Name.from-identifier("foo")␤    )␤  )␤)␤»

[17:01] <ab5tract> Important to consider as well, as has been discussed previously, there’s not even a guarantee that .AST survives into general release

[17:12] <lizmat> well, whatever .AST will be replaced with

[17:13] <lizmat> because as a developer, it's really helpful

[17:34] <nine> I bet there will be something to get an AST out of a string, probably with replacements/quasis. But all of that is macro land. We'll think about it when we get there

[19:06] *** rypervenche left
[19:06] *** rypervenche joined
[20:46] <Geth> ¦ rakudo/fix-precomp-build: 6f0201a6c8 | (Patrick Böker)++ | azure-pipelines.yml

[20:46] <Geth> ¦ rakudo/fix-precomp-build: Fix precomp build

[20:46] <Geth> ¦ rakudo/fix-precomp-build: 

[20:46] <Geth> ¦ rakudo/fix-precomp-build: mirrorlist.centos.org is discontinued.

[20:46] <Geth> ¦ rakudo/fix-precomp-build: https://serverfault.com/a/1161847

[20:46] <Geth> ¦ rakudo/fix-precomp-build: review: https://github.com/rakudo/rakudo/commit/6f0201a6c8

[20:55] <Geth> ¦ rakudo/fix-precomp-build: ba0a144a6b | (Patrick Böker)++ | azure-pipelines.yml

[20:55] <Geth> ¦ rakudo/fix-precomp-build: Fix precomp build

[20:55] <Geth> ¦ rakudo/fix-precomp-build: 

[20:55] <Geth> ¦ rakudo/fix-precomp-build: mirrorlist.centos.org is discontinued.

[20:55] <Geth> ¦ rakudo/fix-precomp-build: https://serverfault.com/a/1161847

[20:55] <Geth> ¦ rakudo/fix-precomp-build: review: https://github.com/rakudo/rakudo/commit/ba0a144a6b

[20:58] <Geth> ¦ rakudo/fix-precomp-build: 410e54eaeb | (Patrick Böker)++ | azure-pipelines.yml

[20:58] <Geth> ¦ rakudo/fix-precomp-build: Fix precomp build

[20:58] <Geth> ¦ rakudo/fix-precomp-build: 

[20:58] <Geth> ¦ rakudo/fix-precomp-build: mirrorlist.centos.org is discontinued.

[20:58] <Geth> ¦ rakudo/fix-precomp-build: https://serverfault.com/a/1161847

[20:58] <Geth> ¦ rakudo/fix-precomp-build: review: https://github.com/rakudo/rakudo/commit/410e54eaeb

[21:20] *** sena_kun left
[21:25] <Geth> ¦ rakudo/fix-precomp-build: 47e8ff8480 | (Patrick Böker)++ | 2 files

[21:25] <Geth> ¦ rakudo/fix-precomp-build: Fix precomp build

[21:25] <Geth> ¦ rakudo/fix-precomp-build: 

[21:25] <Geth> ¦ rakudo/fix-precomp-build: mirrorlist.centos.org is discontinued.

[21:25] <Geth> ¦ rakudo/fix-precomp-build: https://serverfault.com/a/1161847

[21:25] <Geth> ¦ rakudo/fix-precomp-build: review: https://github.com/rakudo/rakudo/commit/47e8ff8480

[21:28] <Geth> ¦ rakudo/fix-precomp-build: 0b21441d4f | (Patrick Böker)++ | 2 files

[21:28] <Geth> ¦ rakudo/fix-precomp-build: Fix precomp build

[21:28] <Geth> ¦ rakudo/fix-precomp-build: 

[21:28] <Geth> ¦ rakudo/fix-precomp-build: mirrorlist.centos.org is discontinued.

[21:28] <Geth> ¦ rakudo/fix-precomp-build: https://serverfault.com/a/1161847

[21:28] <Geth> ¦ rakudo/fix-precomp-build: review: https://github.com/rakudo/rakudo/commit/0b21441d4f

[21:35] <Geth> ¦ rakudo: patrickbkr++ created pull request #5614: Fix precomp build

[21:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5614

[22:02] <patrickb> I've finally managed to do the precomp builds. The files are currently uploading.

[22:49] <ab5tract> m: my %h; %h<array>.push: %( i => "d", a => %( b => "c" ), d => %( e => "f" )); say from-json(to-json(%h))<array>[0];  say %h ~~ %( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" ))] ) # why?

[22:49] <camelia> rakudo-moar 87065a329: OUTPUT: «{a => {b => c}, d => {e => f}, i => d}␤False␤»

[22:50] <ab5tract> m: my %h; %h<array>.push: %( i => "d", a => %( b => "c" ), d => %( e => "f" )); say from-json(to-json(%h))<array>[0];  say %h ~~ %( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" ))] ); %h<array>[0] ~~ %( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" ))] )<array>[0]

[22:50] <camelia> rakudo-moar 87065a329: OUTPUT: «{a => {b => c}, d => {e => f}, i => d}␤False␤»

[22:50] <ab5tract> m: my %h; %h<array>.push: %( i => "d", a => %( b => "c" ), d => %( e => "f" )); say from-json(to-json(%h))<array>[0];  say %h ~~ %( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" ))] ); say %h<array>[0] ~~ my $piece = %( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" ))] )<array>[0]; dd :$piece

[22:50] <camelia> rakudo-moar 87065a329: OUTPUT: «{a => {b => c}, d => {e => f}, i => d}␤:piece(:d(${:e("f")}))␤False␤True␤»

[22:51] <ab5tract> see #raku for the JSON-ification problematics

[22:53] <ab5tract> Encountering issues like these while trying to prepare a showcase for Raku amongst colleagues is disheartening, I cannot lie

[23:20] <ab5tract> I guess it’s just a Thing That Is, but I find having a Significant Trailing Comma to be as annoying or more so than when trailing commas are grammatically illegal

[23:20] <ab5tract> m: my %h; %h<array>.push: %( i => "d", a => %( b => "c" ), d => %( e => "f" )); say from-json(to-json(%h))<array>[0];  say %h ~~ %( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" )),] ); say %h<array> ~~ my $piece = %( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" ))] )<array>; dd :$piece

[23:20] <camelia> rakudo-moar 87065a329: OUTPUT: «{a => {b => c}, d => {e => f}, i => d}␤:piece($[:a(${:b("c")}), :d(${:e("f")}), :i("d")])␤True␤False␤»

[23:20] <ab5tract> Argg, paste error

[23:20] <ab5tract> m: my %h; %h<array>.push: %( i => "d", a => %( b => "c" ), d => %( e => "f" )); say from-json(to-json(%h))<array>[0];  say %h ~~ %( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" )),] ); say %h<array> ~~ my $piece = %( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" )),] )<array>; dd :$piece

[23:20] <camelia> rakudo-moar 87065a329: OUTPUT: «{a => {b => c}, d => {e => f}, i => d}␤:piece($[{:a(${:b("c")}), :d(${:e("f")}), :i("d")},])␤True␤True␤»

[23:22] <ab5tract> Still unclear to me why this would result in the JSON parser pretending like there isn’t a hash declared as an element of the array.. maybe that will be more clear by morning

[23:30] <ab5tract> It’s probably slipping when it “shouldn’t” (maybe there is a good reason that I’ll understand later)

