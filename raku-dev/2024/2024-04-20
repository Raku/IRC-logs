[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[06:00] *** reportable6 left
[07:17] *** lizmat joined
[07:21] *** lizmat_ left
[07:22] <Geth> ¬¶ rakudo/main: 0eb99b8a94 | (Stefan Seifert)++ | src/core.c/Exception.rakumod

[07:22] <Geth> ¬¶ rakudo/main: Fix reporting of X::Role::Initialization errors

[07:22] <Geth> ¬¶ rakudo/main: 

[07:22] <Geth> ¬¶ rakudo/main: The $.role attribute was passed to the constructor and used for creating

[07:22] <Geth> ¬¶ rakudo/main: the error message but was not actually declared as an attribute.

[07:22] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0eb99b8a94

[07:41] *** finanalyst joined
[08:37] *** finanalyst left
[08:53] <Geth> ¬¶ rakudo/main: a219c9bc47 | (Stefan Seifert)++ | 2 files

[08:53] <Geth> ¬¶ rakudo/main: RakuAST: fix mixin creation with constructor argument

[08:53] <Geth> ¬¶ rakudo/main: 

[08:53] <Geth> ¬¶ rakudo/main: In 69 but Foo(1) the argument has to be passed to the &infix:<but>

[08:53] <Geth> ¬¶ rakudo/main: function as :value(1). It will then be passed on to the role

[08:53] <Geth> ¬¶ rakudo/main: constructor.

[08:53] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a219c9bc47

[08:53] <nine> 1053

[10:12] <ab5tract> climbing!

[10:15] <ab5tract> nine: so it's definitely this "memmem32" code that is breaking things (re: R#5550)

[10:15] <linkable6> R#5550 [open]: https://github.com/rakudo/rakudo/issues/5550 [Fixed in RakuAST] Simple literal-only regex fails

[10:15] *** linkable6_ left
[10:17] <ab5tract> a while back you asked if we knew what this `:rxtype<scan>` thing was actually doing.. it looks like for `:rxtype<literal>` we enable a pre-search scan that does a quick `index_s`, presumably to fail faster

[10:20] <ab5tract> that `index_s` calls `MVM_string_memmem_grapheme32`, which in turn calls `memmem_uint32`, which does the modulus based scan

[10:22] <ab5tract> replacing `MVM_string_memmem_grapheme32` with its previous contents fixes the issue. but the commit message of `e71ba738` references a 4x-15x speedup.

[10:25] <ab5tract> so I'm feeling a bit stuck about resolution options

[10:29] <ab5tract> I don't even know what test corpus samcv used when they measured that speedup

[10:39] <nine> If in doubt correctness trumps speed. Of course would be nice to fix the actual bug and get both :)

[10:43] <ab5tract> indeed... I guess I should have mentioned that I'm at the end of my skillset when it comes to the relevant C code :)

[10:44] <ab5tract> I've only used to debugging styles: printing swear words at opportune locations and comfy IDE integrations

[10:51] <ab5tract> let's add a third :)

[10:53] <nine> I'm still at printing swear words :D

[10:53] <nine> Well that and poking at stuff in gdb

[10:59] <ab5tract> nine: are you using the `rakudo-gdb-m` wrapper? because it (and `rakudo-lldb-m`) both still reference `perl6.moarvm` ... https://gist.github.com/ab5tract/9030eb22975f273ac6de1b079e546cfe

[11:02] <ab5tract> though changing it to `rakudo.moarvm` or `rakudo-debug.moarvm` just gives a `ModuleLoader.moarvm not found` error 

[11:20] <ab5tract> It looks like --libpath="\@nfp(\@nqp::libdir@)@" in tools/templates/moar/Makefile-runner_opts.in doesn't return anything (anymore)

[11:20] <nine> Nah, I just use gdb --args ./rakudo-m ...

[11:21] <ab5tract> TIL

[11:21] <nine> Ever since rakudo-m became a proper binary, the wrapper kinda lost its purpose

[11:21] <ab5tract> I guess that's why it's a bit of a rotten carcass

[11:24] <ab5tract> probably better to rewrite them than fix them, if we are going to keep them

[11:25] *** sena_kun joined
[12:10] *** sena_kun left
[12:12] *** sena_kun joined
[12:42] <Geth> ¬¶ nqp/main: 97217442cf | ab5tract++ | tools/lib/NQP/Config/NQP.pm

[12:42] <Geth> ¬¶ nqp/main: Allow --moar-option='--no-optimize' to actually work

[12:42] <Geth> ¬¶ nqp/main: review: https://github.com/Raku/nqp/commit/97217442cf

[12:43] <ab5tract> I'll be honest, I'm a bit brain boggled about how `Configure.pl` in rakudo.git depends on a Perl module in `nqp.git` :)

[12:45] <ab5tract> ah, we have `./tools/lib/NQP/Config/Rakudo.pm`, missed that somehow

[12:47] <ab5tract> but I fixed my issue with rakudo's Configure.pl by editing the module in nqp .. so ... ü§∑

[13:03] <ab5tract> unfortunately I've used just about all of my brain juice just getting to this point where the debu

[13:03] <ab5tract> *the debugging process is available

[13:43] *** MasterDuke joined
[13:44] <MasterDuke> ab5tract: some of the comments here https://reviews.freebsd.org/D2601 seem relevant

[13:44] <tellable6> 2024-04-18T06:52:56Z #moarvm <nine> MasterDuke: still doubt that would bring any measurable benefit. Mind that I could also just be wrong.

[13:44] <tellable6> hey MasterDuke, you have a message: https://gist.github.com/11f155971e1c30cfbbc69d77115c8a97

[13:45] <MasterDuke> they mention a bug that was fixed. maybe you could compare that implementation with ours?

[13:45] <ab5tract> MasterDuke++

[13:48] <ab5tract> unfortunately this bug fix predates the implementation of memmem_uint32, but I'll still check this for viability

[13:48] <ab5tract> maybe something was lost in translation

[13:49] <MasterDuke> and there might be newer bug fixes/reports, that's just the first one i found

[13:54] <ab5tract> Yup, looking at https://reviews.freebsd.org/source/src/history/main/lib/libc/string/memmem.c

[13:54] <ab5tract> At least one

[13:55] <ab5tract> but part of the issue is... *none* of this references a `memmem_uint32`

[13:56] <ab5tract> It's hard for me to grok how much of the memmem32 patch was simple porting and how much as adapted

[13:58] <MasterDuke> have you been able to construct an nqp::index_s call that exhibits the bug?

[13:59] <MasterDuke> afk for probably a while &

[13:59] <ab5tract> it's actually a MAST:Op

[14:00] <ab5tract> I haven't tried to create a "tiny" version, but that's a good idea

[14:58] *** kjp left
[15:42] <ab5tract> I wonder why we use 32-bits for our graphemes? wasn't UTF-16 already mostly abandoned as "more bits than necessary"?

[16:31] <ab5tract> even more curious.. the haystack string is stored as MVM_STRING_GRAPHEME_32 but the needle is stored as MVM_STRING_GRAPHEME_8

[16:48] <nine> UTF-16 was the worst of both worlds. It wasted a lot of space on real-world strings that would fit in just 1 byte while it still was a variable length encoding, because 16 bits is just not enough. UTF-32 is a decent internal representation as each unit really represents a code point

[17:03] <MasterDuke> aren't the graphemes 32-bits to support synthetics?

[17:06] <MasterDuke> i wouldn't mind if the string-related code in moarvm was overhauled (probably to have more size-specific code paths for speed), but it's a decently sized undertaking

[17:13] <MasterDuke> this was a poc of the type of thing i'm thinking of https://github.com/MoarVM/MoarVM/compare/main...MasterDuke17:MoarVM:add_fast_path_when_utf8_encoding?expand=1

[17:13] <ab5tract> nine: thanks for the clarification

[17:14] <ab5tract> MasterDuke: that's a link to open a PR, rather than a PR proper

[17:14] <MasterDuke> yeah, i never created a PR

[17:15] <ab5tract> ack. I will check the branch on your repo then

[17:15] <MasterDuke> it's just that one commit

[17:18] <ab5tract> regarding the FreeBSD memmem, it's definitely worth updating 3rdparty/memmem.c to the latest and greatest

[17:19] <ab5tract> but the meat of memmem32.c is apparently samcv's own adaptation 

[17:20] <ab5tract> now to find the bug and squash it  >:)

[17:23] <MasterDuke> http://irclogs.raku.org/moarvm/2023-02-20.html has some chat about that branch, why i tried it, and the results

[17:34] <ab5tract> will dig into it, thanks!

[17:35] <ab5tract> Is assigning -1 to a uint32_t just a run of the mill way to get a variable holding the max value of a uint32_t?

[17:36] <MasterDuke> that's what i would assume

[17:46] *** finanalyst joined
[17:50] <ab5tract> I guess it just feels like an odd pattern, so I was wondering how common it is

[17:50] <lizmat> m: my uint64 $a = -1; say $a

[17:50] <camelia> rakudo-moar a219c9bc4: OUTPUT: ¬´18446744073709551615‚ê§¬ª

[17:50] <lizmat> it is :-)

[17:50] <lizmat> it beats typing:

[17:51] <lizmat> m: my uint64 $a = 0xffffffffffffffff; say $a

[17:51] <camelia> rakudo-moar a219c9bc4: OUTPUT: ¬´18446744073709551615‚ê§¬ª

[17:51] <lizmat> :-)

[18:03] <ugexe> anyone tried pasting memmem32.c into a llm and asking it to find the hidden bug? :)

[18:09] <ab5tract> If that actually works‚Ä¶

[18:09] <ab5tract> I‚Äôll become a believer

[18:38] *** MasterDuke left
[18:38] <ab5tract> as usual, I'm extremely underwhelmed by AI: https://gist.github.com/ab5tract/0ec39f79f452eb5a217a685155f185d4

[18:39] <lizmat> well, the fix is clear:

[18:39] <lizmat> To resolve this bug, the two-way string matching algorithm could be modified to handle cases where the maximal suffix of the needle string is not unique. Another possible approach is to use a different string search algorithm altogether.

[18:39] <lizmat> :-)

[18:39] <ab5tract> but that's not the actual problem

[18:40] <ab5tract> m: "Xabddcabacab" ~~ /abacab/ ==> so() ==> say()

[18:40] <camelia> rakudo-moar a219c9bc4: OUTPUT: ¬´True‚ê§¬ª

[18:40] <lizmat> "Another possible approach is to use a different string search algorithm altogether."

[18:42] *** notna joined
[18:42] <ab5tract> heh 

[19:00] <releasable6> Next release in ‚âà4 days and ‚âà23 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:00] <releasable6_> Next release in ‚âà4 days and ‚âà23 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:50] <Geth> ¬¶ rakudo/main: 35cc0d6aa1 | (Stefan Seifert)++ | 6 files

[19:50] <Geth> ¬¶ rakudo/main: RakuAST: Prohibit re-binding of parameters (unless rw or copy)

[19:50] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/35cc0d6aa1

[20:08] *** notna left
[20:21] <Geth> ¬¶ rakudo/main: 171307e928 | (Stefan Seifert)++ | 2 files

[20:21] <Geth> ¬¶ rakudo/main: RakuAST: Prohibit rebinding of variables declared in bound signatures

[20:21] <Geth> ¬¶ rakudo/main: 

[20:21] <Geth> ¬¶ rakudo/main: my ($a, ) := (1, ); $a := 2; # now fails correctly

[20:21] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/171307e928

[20:55] *** finanalyst left
[21:08] <Geth> ¬¶ rakudo/main: 5f8c7bbeb0 | (Stefan Seifert)++ | src/Raku/ast/term.rakumod

[21:08] <Geth> ¬¶ rakudo/main: RakuAST: throw targeted exception when trying to re-bind term

[21:08] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5f8c7bbeb0

[22:08] *** kjp joined
[22:43] *** bloatable6_ left
[22:43] *** coverable6_ left
[22:43] *** shareable6_ left
[22:43] *** committable6_ left
[22:43] *** unicodable6_ left
[22:43] *** releasable6_ left
[22:43] *** bisectable6_ left
[22:43] *** evalable6_ left
[22:43] *** greppable6_ left
[22:43] *** statisfiable6 left
[22:43] *** tellable6_ left
[22:43] *** quotable6_ left
[22:43] *** sourceable6_ left
[22:43] *** notable6_ left
[22:43] *** nativecallable6_ left
[22:43] *** squashable6 left
[22:43] *** benchable6_ left
[22:43] *** greppable6_ joined
[22:43] *** nativecallable6_ joined
[22:43] *** coverable6_ joined
[22:43] *** notable6_ joined
[22:43] *** squashable6 joined
[22:44] *** bloatable6_ joined
[22:44] *** reportable6 joined
[22:44] *** bloatable6_ left
[22:44] *** nativecallable6_ left
[22:44] *** greppable6_ left
[22:44] *** squashable6 left
[22:44] *** reportable6 left
[22:44] *** notable6_ left
[22:44] *** coverable6_ left
[22:45] *** quotable6_ joined
[22:45] *** linkable6_ joined
[22:45] *** coverable6_ joined
[22:45] *** notable6_ joined
[22:45] *** bisectable6_ joined
[22:46] *** benchable6_ joined
[22:46] *** nativecallable6_ joined
[22:46] *** statisfiable6 joined
[22:46] *** sourceable6_ joined
[22:46] *** bloatable6_ joined
[22:46] *** unicodable6_ joined
[22:46] *** evalable6_ joined
[22:46] *** releasable6_ joined
[22:46] *** shareable6_ joined
[22:47] *** greppable6_ joined
[22:47] *** tellable6_ joined
[22:47] *** reportable6 joined
[22:47] *** committable6_ joined
[22:47] *** squashable6 joined
[23:48] *** shareable6_ left
[23:48] *** tellable6_ left
[23:48] *** reportable6 left
[23:48] *** notable6_ left
[23:48] *** benchable6_ left
[23:48] *** committable6_ left
[23:48] *** nativecallable6_ left
[23:48] *** linkable6_ left
[23:48] *** quotable6_ left
[23:48] *** coverable6_ left
[23:48] *** squashable6 left
[23:48] *** unicodable6_ left
[23:48] *** statisfiable6 left
[23:48] *** releasable6_ left
[23:48] *** sourceable6_ left
[23:48] *** bisectable6_ left
[23:48] *** bloatable6_ left
[23:48] *** evalable6_ left
[23:48] *** greppable6_ left
[23:49] *** greppable6_ joined
[23:49] *** releasable6_ joined
[23:50] *** statisfiable6 joined
[23:50] *** quotable6_ joined
[23:50] *** reportable6 joined
[23:50] *** shareable6_ joined
[23:50] *** coverable6_ joined
[23:51] *** linkable6_ joined
[23:51] *** sourceable6_ joined
[23:51] *** squashable6 joined
[23:51] *** committable6_ joined
[23:51] *** notable6_ joined
[23:51] *** benchable6_ joined
[23:51] *** nativecallable6_ joined
[23:51] *** bloatable6_ joined
[23:51] *** evalable6_ joined
[23:52] *** tellable6_ joined
[23:52] *** bisectable6_ joined
[23:52] *** unicodable6_ joined
[23:55] *** sena_kun left
