[01:49] <Geth> ¦ rakudo/main: 612dd255a6 | (Daniel Green)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[01:49] <Geth> ¦ rakudo/main: Make progress on unbreaking the JVM build

[01:49] <Geth> ¦ rakudo/main: 

[01:49] <Geth> ¦ rakudo/main: I was a bit too hasty with my earlier commits. It's still broken after

[01:49] <Geth> ¦ rakudo/main: this, but gets farther.

[01:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/612dd255a6

[05:06] *** MasterDuke joined
[05:53] <MasterDuke> lizmat: any idea about the current jmv error? https://gist.github.com/MasterDuke17/95bf717008bde088e8da49abda6ac228

[06:05] <MasterDuke> *jvm

[06:06] <MasterDuke> i wondered if the line count was off and tried the diff included in that gist, but it didn't change anything

[06:32] *** MasterDuke left
[09:08] *** sena_kun joined
[09:33] <lizmat> .tell MasterDuke no idea  :-(

[09:33] <tellable6> lizmat, I'll pass your message to MasterDuke

[09:53] *** sena_kun left
[10:02] <Geth> ¦ rakudo/liz-Possible: b91cea9adb | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[10:02] <Geth> ¦ rakudo/liz-Possible: Make Routine $!dispatcher a scalarless attribute

[10:02] <Geth> ¦ rakudo/liz-Possible: 

[10:02] <Geth> ¦ rakudo/liz-Possible: As it's only used internally

[10:02] <Geth> ¦ rakudo/liz-Possible: review: https://github.com/rakudo/rakudo/commit/b91cea9adb

[12:53] *** MasterDuke joined
[12:56] <MasterDuke> lizmat: fwiw, it looks like https://github.com/rakudo/rakudo/commit/99f52bcd75fc05dcf082fc5bdc4449a7715f9a06 is the commit that broke the jvm build

[12:56] <tellable6> 2024-03-08T09:33:23Z #raku-dev <lizmat> MasterDuke no idea  :-(

[13:11] <MasterDuke> lizmat: in the new version there's no equivalent of `$param := nqp::hllizefor($param, 'Raku')` (and then later in the code there are comparisons against $param's type). obviously the new code builds and passes a spectest on moarvm, so i wonder if it's a bug in the jvm implementation?

[13:12] <lizmat> MasterDuke: that is probably it...

[13:12] <lizmat> perhaps add it conditionally on the non-MoarVM backend ?

[13:12] <MasterDuke> but the new code does seem quite a bit different, i.e., are you sure the different checks are the same?

[13:13] <lizmat> pretty sure they do...  at least passes all test and spectest

[13:14] <lizmat> fwiw, I thought I'd maybe mixed up the DEFINED/UNDEFINED check, but no: if I switch that, the spectest breakage is impressive  :-)

[13:15] <MasterDuke> it's this line https://github.com/rakudo/rakudo/commit/99f52bcd75fc05dcf082fc5bdc4449a7715f9a06#diff-15a840b4b269640b19e0943e298ac8cda63d1f51f7169145fc489db7350d3c53L3865 that i'm wondering about

[13:16] <MasterDuke> because that seems it would matter when it gets down to https://github.com/rakudo/rakudo/commit/99f52bcd75fc05dcf082fc5bdc4449a7715f9a06#diff-15a840b4b269640b19e0943e298ac8cda63d1f51f7169145fc489db7350d3c53L3874-L3876

[13:16] <lizmat> https://github.com/rakudo/rakudo/commit/99f52bcd75fc05dcf082fc5bdc4449a7715f9a06#diff-15a840b4b269640b19e0943e298ac8cda63d1f51f7169145fc489db7350d3c53R3863

[13:18] <lizmat> later on, only the type is checked, so I thought it make it clearer to make it the type object there already

[13:18] <lizmat> it also allowed the if structure to become a ternary

[13:18] <MasterDuke> hm. i guess .WHAT is doing the equivalent...

[13:18] <lizmat> well, perhaps not: I'd suggest doing the HLLize there to see if it fixes that

[13:24] <MasterDuke> hm. i could put all the old code back in an `#?if !moar` block, but maybe i can figure out a smaller change...

[13:27] <lizmat> did you try putting the hllize on https://github.com/rakudo/rakudo/commit/99f52bcd75fc05dcf082fc5bdc4449a7715f9a06#diff-15a840b4b269640b19e0943e298ac8cda63d1f51f7169145fc489db7350d3c53R3863 ??

[13:29] <MasterDuke> trying `my $type := nqp::hllizefor($arg, 'Raku').WHAT;` now. however, it takes about 800s to fail, so have to wait a bit to see

[13:35] <lizmat> yeah...  it just takes too long on the JVM  :-(

[13:39] <MasterDuke> this branch i'm working on is a bit faster, but it's still pretty slow. it seems to be the rakuast stuff. '+++ Generating     gen/jvm/ast.nqp' is where half the total time is going (~450s on my branch). stage parse for core.c is only ~90s (compared to 45s for moarvm)

[13:39] <MasterDuke> on main '+++ Generating     gen/jvm/ast.nqp' takes ~1400s

[13:40] <MasterDuke> (i just found out about gnomon and am loving it, makes figuring out these timings so easy)

[13:49] <MasterDuke> heh. now the build dies in a different way, but i think later and maybe because of my branch. now i get to test the *long* build on main...

[13:49] <lizmat> meh... ok, if I push another micro opt in the mean time?

[13:49] <MasterDuke> sure

[13:51] <Geth> ¦ rakudo/main: fda0d13209 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:51] <Geth> ¦ rakudo/main: Don't bother checking natives if no typecheck requested

[13:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fda0d13209

[14:25] <MasterDuke> heh. '+++ Generating     gen/moar/ast.nqp' is only 12s...i wonder why the jvm is *so* much worse, it's not usually 100x slower

[14:28] *** [Tux] left
[14:29] <MasterDuke> hm. don't think that change was right. now it's dying with `Ambiguous call to Bool`

[14:30] <ab5tract> I’ve said it before but maybe it’s time to put the JVM implementation out to pasture

[14:31] *** [Tux] joined
[14:31] <ab5tract> I don’t really like that we advertise a backend that is mostly unused, often broken, and without parity.

[14:33] <ab5tract> It doesn’t help that when people read that Raku runs on the JVM, they imagine that it interoperates with other JVM languages, which it doesn’t

[14:33] <ab5tract> I don’t mean that to discount your valiant efforts MasterDuke!

[14:34] <lizmat> or bartolin's

[19:29] <Geth> ¦ rakudo/main: 3e476241be | (Elizabeth Mattijsen)++ | 2 files

[19:29] <Geth> ¦ rakudo/main: Cache dispatch info on Routine object

[19:29] <Geth> ¦ rakudo/main: 

[19:29] <Geth> ¦ rakudo/main: The dispatch order logic basically stores a list of hashes with

[19:29] <Geth> ¦ rakudo/main: condensed information about each dispatchee.  And this is kept with

[19:29] <Geth> ¦ rakudo/main: the proto, to allow for faster "find_best_dispatchee" logic.

[19:29] <Geth> ¦ rakudo/main: 

[19:29] <Geth> ¦ rakudo/main: However, the condensed information about a candidate was re-created

[19:29] <Geth> ¦ rakudo/main: <…commit message has 10 more lines…>

[19:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3e476241be

[21:41] <japhb> Nice win, lizmat++

[22:08] *** sena_kun joined
[22:12] *** MasterDuke left
[22:45] *** MasterDuke joined
[23:36] *** sena_kun left
[23:52] <MasterDuke> i agree that the jvm backend is not all that it could be. but generally it doesn't take too much effort to keep it working

[23:53] <MasterDuke> i really wish someone else knew truffle well enough to help out on that branch. even in it's very incomplete state it showed lots of promise

[23:53] <MasterDuke> unfortunately i don't really understand it and pmurias hasn't been able to work on it for a while now

