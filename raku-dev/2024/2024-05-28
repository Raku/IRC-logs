[00:51] <jdv> doin the blin run now.  sorry bout the last minuteness.

[01:30] *** nine left
[01:30] *** nine joined
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[08:18] *** finanalyst joined
[08:26] *** sena_kun joined
[08:59] *** kjp_ left
[08:59] <gfldex> m: sub { return-rw(:1a) }

[08:59] <camelia> rakudo-moar 5fb665ba2: OUTPUT: «WARNINGS for <tmp>:␤Useless use of anonymous sub, did you forget to provide a name? (line 1)␤»

[08:59] <gfldex> m: sub { return-rw(:1a) }.();

[08:59] <camelia> rakudo-moar 5fb665ba2: OUTPUT: «Cannot resolve caller return-rw(:a(Int)); none of these signatures matches:␤    ( --> Nil)␤    (Mu \x --> Nil)␤    (**@x is raw --> Nil)␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:59] <gfldex> Well 

[09:01] *** kjp joined
[09:07] <lizmat> would you expect that to return a container with a Pair ?

[09:15] <gfldex> I do.

[09:19] <lizmat> m: sub a() { return-rw(42) }; my $b := a; $b = 666

[09:19] <camelia> rakudo-moar 5fb665ba2: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[09:19] <lizmat> return-rw is not supposed to create a container out of thin air

[09:20] <lizmat> m: sub a() { return :foo }; say a

[09:20] <camelia> rakudo-moar 5fb665ba2: OUTPUT: «foo => True␤»

[09:20] <lizmat> but it returning a Pair looks like it should  :-)

[09:21] <lizmat> m: sub a() { return-rw :foo }; say a

[09:21] <camelia> rakudo-moar 5fb665ba2: OUTPUT: «Cannot resolve caller return-rw(:foo); none of these signatures matches:␤    ( --> Nil)␤    (Mu \x --> Nil)␤    (**@x is raw --> Nil)␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[09:21] <lizmat> looks like this is a grammar thing

[09:21] <lizmat> the signatures on return and return-rw are identical

[09:22] <lizmat> feels like it is worth an issue

[09:25] <ab5tract> Containers seem confusing enough without adding automatic containerization into the mix?

[09:26] <ab5tract> Though it’s still an LTA regardless

[09:27] <lizmat> perhaps return-raw would have been a better name

[09:28] <lizmat> because that's what it essentially does

[09:30] <ab5tract> In looking back at some old IRC logs, it seems that the is raw trait arrived later than is rw, so probably it wasn’t part of the lexicon when return-rw was implemented

[09:30] <lizmat> feels right

[09:31] <ab5tract> Probably return is very special in that it could never be sensibly adverbed

[09:31] <lizmat> ?

[09:31] <ab5tract> return:raw $foo

[09:32] <ab5tract> There are other ops and methods that probably would have been implemented differently if adverbs were available though (sorry, somehow it popped into my brain)

[09:34] <lizmat> m: sub a() { :foo }; say a

[09:34] <camelia> rakudo-moar 5fb665ba2: OUTPUT: «foo => True␤»

[09:34] <lizmat> m: sub a() { return :foo }; say a

[09:34] <camelia> rakudo-moar 5fb665ba2: OUTPUT: «foo => True␤»

[09:38] <ab5tract> What I mean is that return couldn’t have a multi candidate specifying :$raw! Because then no one could ever return a :raw pair in their return statement. It would get matched by the candidate, whose semantics wouldn’t make sense to pass it along

[09:40] <ab5tract> Anyway, it’s just the way my brain works. When I see ‘name-*’ in subs/methods, I see an opportunity to condense into a multi with adverbs. But I don’t see return as a viable candidate

[11:29] *** lizmat_ joined
[11:33] *** lizmat left
[12:05] *** lizmat_ left
[12:06] *** lizmat joined
[14:00] *** finanalyst left
[14:07] <jdv> got a few:( https://github.com/rakudo/rakudo/issues/5584

[14:08] <jdv> ab5tract: blin thinks one is yours

[14:08] <jdv> lizmat: the rest might be yours

[14:10] <ab5tract> Interesting

[15:01] <[Tux]> Rakudo v2024.04-135-g5fb665ba2 (v6.d) on MoarVM 2024.04-8-gf1173cb26

[15:01] <[Tux]> csv-test-xs-20      0.142 -  0.142

[15:01] <[Tux]> csv-ip5xs           0.264 -  0.265

[15:01] <[Tux]> test-t --race       0.275 -  0.278

[15:01] <[Tux]> test-t              0.431 -  0.431

[15:01] <[Tux]> csv-ip5xs-20        1.137 -  1.139

[15:01] <[Tux]> test-t-20 --race    1.239 -  1.253

[15:01] <[Tux]> csv-parser          1.536 -  1.635

[15:01] <[Tux]> test                2.014 -  2.015

[15:01] <[Tux]> test-t-20           5.132 -  5.170

[15:01] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[15:05] *** finanalyst joined
[15:24] *** finanalyst left
[15:35] *** Geth left
[15:35] *** Geth joined
[16:12] *** finanalyst joined
[17:22] <lizmat> greppable6: copy-to-carray

[17:22] <greppable6> lizmat, 19 lines, 7 modules: https://gist.github.com/e65f7561b1aed3ecfa0671cc442f3c72

[17:34] <lizmat> jdv: I think I've done all I can about the blin fails

[17:44] <ab5tract> looking into my share of it now

[18:24] <gfldex> lizmat: I changed my mind about return-rw. This is more of an ENODOC. Easy to fix with a better example.

[18:24] <lizmat> looking forward to a doc PR / commit

[18:34] *** sena_kun left
[18:34] <lizmat> m: my @a; @a[9]="foo"; dd @a[*]:k

[18:34] <camelia> rakudo-moar 5fb665ba2: OUTPUT: «(9,)␤»

[18:34] <lizmat> m: my @a; @a[9]=9; dd @a.keys(:v)

[18:34] <camelia> rakudo-moar 5fb665ba2: OUTPUT: «(0, 1, 2, 3, 4, 5, 6, 7, 8, 9).Seq␤»

[18:34] *** sena_kun joined
[18:35] <lizmat> I wonder whether .keys should accept a :v argument to be compatible with the [*]:k semantics

[19:52] <jdv> lizmat: thanks!

[19:53] <jdv> I guess some day we could handle abandoned dists better but that would require tuits

[19:54] * jdv wonders what percentage of the "always fails" is just that

[19:54] <jdv> so, afaik, we have just the 1 blocker for the release

[20:05] <ab5tract> yeah.. I don't know if I'm going to get it fixed tonight

[20:10] <jdv> it just needs to be "handled" before thursday 09:00 ET or so:)

[21:24] *** nine left
[21:24] *** nine joined
[21:46] <Geth> ¦ rakudo/main: 45966a8cd0 | ab5tract++ | src/core.c/Main.rakumod

[21:46] <Geth> ¦ rakudo/main: Additional guard when selecting the type for MAIN args

[21:46] <Geth> ¦ rakudo/main: 

[21:46] <Geth> ¦ rakudo/main: This is required to fix the situation where ::('a') and

[21:46] <Geth> ¦ rakudo/main: CORE::('a') are the same, but GLOBAL::('a') doesn't

[21:46] <Geth> ¦ rakudo/main: match CORE::('a') by virtue of being `Nil` -- the intent

[21:46] <Geth> ¦ rakudo/main: of the guard is to use GLOBAL::('a') when it is "in front"

[21:46] <Geth> ¦ rakudo/main: of CORE::('a') by virtue of being part of a user-defined

[21:46] <Geth> ¦ rakudo/main: <…commit message has 21 more lines…>

[21:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/45966a8cd0

[21:47] <ab5tract> jdv: I managed to get to it after all

[22:04] *** sena_kun left
[22:10] *** finanalyst left
[22:17] *** [Tux] left
