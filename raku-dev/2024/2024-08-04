[01:34] *** [Coke] left
[01:56] *** [Coke] joined
[08:31] *** sena_kun joined
[08:49] <nine> It occurs to me that we really don't have a good story for pragmas in RakuAST yet. Most just call $*LANG.set_pragma which is fine for pragmas that only influence parsing and AST generation. It's definitely no good for pragmas like fatalize.

[14:54] <Geth> ¦ rakudo/main: bfdbf1cfa3 | (Stefan Seifert)++ | 6 files

[14:54] <Geth> ¦ rakudo/main: RakuAST: no need to traverse the whole AST for BEGIN time

[14:54] <Geth> ¦ rakudo/main: 

[14:54] <Geth> ¦ rakudo/main: Each node should already get a chance to run BEGIN time effects when it

[14:54] <Geth> ¦ rakudo/main: gets added to the AST. IMPL-BEGIN is a very blunt tool that hides places

[14:54] <Geth> ¦ rakudo/main: where we miss to-begin-time calls. It is however only meant to be used

[14:54] <Geth> ¦ rakudo/main: for synthetic ASTs.

[14:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bfdbf1cfa3

[14:55] <nine> Turns out, actually understanding the design really helps with applying it correctly :) Anyway, this change speeds up compilation a bit more and saves a few % of compilation time. RakuAST should now be a little bit faster than the old frontend, even with optimizer disabled.

[14:55] <nine> Looks like I successfully procrastinated on implementing use fatal; today

[16:43] *** japhb_ joined
[16:47] *** japhb left
[16:47] *** timo left
[16:48] *** timo joined
[17:37] <nine> m: dd (defined 1 div 0)

[17:37] <camelia> rakudo-moar bfdbf1cfa: OUTPUT: «Bool::False␤»

[17:37] <nine> m: dd ((1 div 0).defined)

[17:37] <camelia> rakudo-moar bfdbf1cfa: OUTPUT: «Bool::False␤»

[17:38] <nine> m: use fatal; dd (defined 1 div 0)

[17:38] <camelia> rakudo-moar bfdbf1cfa: OUTPUT: «Bool::False␤»

[17:38] <nine> m: use fatal; dd ((1 div 0).defined)

[17:38] <camelia> rakudo-moar bfdbf1cfa: OUTPUT: «Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤»

[17:39] <nine> m: use fatal; dd ((1 div 0).so)

[17:39] <camelia> rakudo-moar bfdbf1cfa: OUTPUT: «Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤»

[17:39] <nine> Arguably that's a bit too fatal

[17:47] <nine> I wonder if I could piggyback on the sinking infrastructure for fatalizing

[17:55] <nine> OTOH maybe I should just steal the old implementation. Sometimes processing QAST is really the lesser evil. fatalize is just 42 LOC and I guess it's ok to do this ast QAST gen time

[21:28] *** sena_kun left
[21:46] <Geth> ¦ rakudo/coolroot: 7c3db0041e | (Timo Paulssen)++ | src/vm/moar/ops/perl6_ops.c

[21:46] <Geth> ¦ rakudo/coolroot: Use fancy new root macro from moarvm pull request #1828

[21:46] <Geth> ¦ rakudo/coolroot: review: https://github.com/rakudo/rakudo/commit/7c3db0041e

