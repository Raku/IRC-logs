[02:41] <jdv> ab5tract: insanity

[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[06:20] *** [Tux] joined
[07:29] *** [Tux] left
[07:32] *** [Tux] joined
[07:45] *** sena_kun joined
[08:00] *** finanalyst joined
[09:28] *** sena_kun left
[09:33] *** sena_kun joined
[10:57] *** lizmat_ joined
[10:59] *** Geth left
[10:59] *** Geth joined
[10:59] *** sena_kun left
[11:01] *** lizmat left
[11:01] *** lizmat_ left
[11:01] *** sena_kun joined
[11:01] *** lizmat joined
[11:13] <[Tux]> Rakudo v2024.04-136-g45966a8cd (v6.d) on MoarVM 2024.04-10-gd67da80f3

[11:13] <[Tux]> csv-test-xs-20      0.141 -  0.141

[11:13] <[Tux]> csv-ip5xs           0.260 -  0.261

[11:13] <[Tux]> test-t --race       0.270 -  0.277

[11:13] <[Tux]> test-t              0.425 -  0.430

[11:13] <[Tux]> csv-ip5xs-20        1.130 -  1.172

[11:13] <[Tux]> test-t-20 --race    1.230 -  1.231

[11:13] <[Tux]> csv-parser          1.603 -  1.607

[11:13] <[Tux]> test                1.999 -  2.027

[11:13] <[Tux]> test-t-20           5.138 -  5.204

[11:13] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[13:48] <lizmat> weird find of the day:

[13:48] <lizmat> my $s = (1,2,3); dd $s.values.values.values.values.values

[13:48] <evalable6> lizmat, rakudo-moar 45966a8cd: OUTPUT: «(1, 2, 3).Seq␤»

[13:48] <lizmat> my $s = (1,2,3); dd $s.values.values.values.values.values.values

[13:48] <evalable6> lizmat, rakudo-moar 45966a8cd: OUTPUT: «(1, 2, 3)␤»

[13:48] <lizmat> List.values changes to a Seq (and is documented as such)

[13:48] <lizmat> Seq.values changes to a List

[13:50] <lizmat> and is not documented

[13:50] <lizmat> feels to me Seq.value should return the invocant, to remain consistent ?

[13:50] <lizmat> *values

[13:53] *** nine left
[13:54] *** nine joined
[13:58] <lizmat> sadly we have a test that checks for Seq.values being a Positional  :-(

[14:00] <lizmat> however, I find that test rather suspicious

[14:02] <lizmat> anyways, for post 2024.05

[14:04] <lizmat> afk&

[14:47] *** jdv left
[14:48] *** jdv joined
[16:04] <Geth> ¦ rakudo/main: 042660d8dc | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[16:04] <Geth> ¦ rakudo/main: RakuAST: handle =numdefn the same as =defn

[16:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/042660d8dc

[18:20] <Geth> ¦ rakudo/main: b7116755eb | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[18:20] <Geth> ¦ rakudo/main: RakuAST: fix issues with new "procedural" table

[18:20] <Geth> ¦ rakudo/main: 

[18:20] <Geth> ¦ rakudo/main: These tables have =cell, =row, =column and =comment blocks in them

[18:20] <Geth> ¦ rakudo/main: and are thus *not* defined by pure text layout and are now produced

[18:20] <Geth> ¦ rakudo/main: as ::Doc::Blocks with types "cell", "row" etc. basically without

[18:20] <Geth> ¦ rakudo/main: any meddling.

[18:20] <Geth> ¦ rakudo/main: 

[18:20] <Geth> ¦ rakudo/main: Also introduce Doc::Block.procedural method, which returns True if

[18:21] <Geth> ¦ rakudo/main: the Doc::Block is this new type of table.  Else it returns False

[18:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b7116755eb

[19:01] <Geth> ¦ rakudo/main: 851aa49030 | ab5tract++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[19:01] <Geth> ¦ rakudo/main: Add test case for parenthesized prime in where clause

[19:01] <Geth> ¦ rakudo/main: 

[19:01] <Geth> ¦ rakudo/main: It should not produce a 'useless use' worry.

[19:01] <Geth> ¦ rakudo/main: 

[19:01] <Geth> ¦ rakudo/main: It should arguably produce a 'probably not what you meant'

[19:01] <Geth> ¦ rakudo/main: worry instead, but that's for a different discussion.

[19:01] <Geth> ¦ rakudo/main: 

[19:01] <Geth> ¦ rakudo/main: R#1525 (#1525)

[19:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/851aa49030

[19:01] <linkable6> R#1525 [open]: https://github.com/rakudo/rakudo/issues/1525 [useless warnings][Fixed in RakuAST] Useless useless when parens used around whatevercode in where

[19:07] <ab5tract> m: class C { method Slip { "doing my thing" } }; dd |C.new

[19:07] <camelia> rakudo-moar b7116755e: OUTPUT: «C.new␤»

[19:07] <ab5tract> how did I get the impression that `|` was just a prefix-y way of calling the Slip coercer on an object? :S

[19:08] <lizmat> | was originally designed to be only usable for flatteninng / deflattening in signatures

[19:09] <lizmat> that was before Slip was a thing (which only came into being during the GLR)

[19:09] <ab5tract> right, I only remember coming to know of both `|` and `Slip` during/after the GLR

[19:10] <ab5tract> maybe that's how they came to be associated in my mind... 

[19:14] <ab5tract> with just  few demonstrations in my terminal, it's quite clear that they do significantly different things :)

[19:15] <ab5tract> regardless, R#1966 raises an interesting question imo

[19:15] <linkable6> R#1966 [open]: https://github.com/rakudo/rakudo/issues/1966 [RFC] Ability to specify how an object flattens in signatures

[19:38] *** finanalyst left
[19:41] *** finanalyst joined
[20:08] *** sena_kun left
[20:15] *** finanalyst left
[20:15] *** finanalyst joined
[21:15] *** finanalyst left
[21:26] <gfldex> m: sub a(*%h) { dd %h; }; class Foo does Associative { method AT-KEY(|) { 42} }; my %h := Foo.new; a %h;

[21:26] <camelia> rakudo-moar 851aa4903: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling a(Associative) will never work with declared signature (*%h)␤at <tmp>:1␤------> od AT-KEY(|) { 42} }; my %h := Foo.new; ⏏a %h;␤»

[21:28] <gfldex> m: sub a(*%h) { dd %h; }; class Foo does Associative { method AT-KEY(|) { 42} }; my %h := Foo.new; a(|%h);

[21:28] <camelia> rakudo-moar 851aa4903: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:34] <gfldex> ab5tract: I updated the example and error message and provided my 2    constant h = Foo.new;

[21:34] <gfldex>     a(|h);

[21:35] <gfldex> ab5tract: I updated the example and error message and provided my 2¢.

[21:35] <jdv> lizmat: around?

[21:40] <jdv> ab5tract: it would help if anything rakuast related had that prefix in the commit subject

[21:45] <ab5tract> I do that whenever I’m actually touching RakuAST.. it didn’t seem quite right for mere tests

[21:46] <jdv> shouldn't almost all of these "fixed in rakuast" test things be part of "rakuast"?

[21:46] <ab5tract> I’ll adjust going forward but I’m also curious why it matters?

[21:46] <jdv> oh, i only read the first half of your sentence somehow

[21:47] <jdv> just for changelog generation - it'd just be faster for me.  that's all

[21:47] <ab5tract> Got it. Will definitely add it in the future

[21:48] <jdv> its fine either way.  for the changelog stuff, for now, anything that mostly deals with rakuast i categorize that way

[21:48] <jdv> i guess until rakuast is "merged" we'll break it out like that

[21:49] <jdv> thanks

[21:59] <jdv> lizmat: changelogs are up - please see comment near top of the rakudo one

[22:05] <lizmat> jdv: tweaked

[22:05] <lizmat> afk again&

[22:30] *** sena_kun joined
[23:00] <releasable6> Next release in ≈19 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:03] *** sena_kun left
