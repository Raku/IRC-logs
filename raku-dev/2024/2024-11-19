[00:08] *** Voldenet left
[00:35] *** Voldenet joined
[01:02] *** kjp left
[01:04] *** kjp joined
[01:06] *** kjp left
[01:07] *** kjp joined
[01:22] *** Voldenet left
[01:32] *** Voldenet joined
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[09:07] *** sena_kun joined
[09:47] *** [Coke] left
[11:43] *** [Coke] joined
[13:44] <[Coke]> oops. my trying to build raku on my windows laptop left me without a working raku. Just went to run something that I forgot I wrote in raku, boom.

[13:45] <lizmat> I get that a lot  :-)

[13:45] <lizmat> the hourly REA harvester is then the victim

[13:47] <patrickb> rakubrew to the rescue?

[13:47] <lizmat> nah, I usually nuke the install dir and start from scratch

[13:48] <[Coke]> I should have separate "I'm using raku" builds from "I'm building raku" builds, but I don't on my windows box, either.

[13:49] <[Coke]> ... and since I successfully built moar we've bumped the revisions so it's too old. The perils of living at HEAD

[13:49] <lizmat> yup  :-)

[14:00] * [Coke] tries rakubrew on powershell to see if that separation works.

[14:30] <patrickb> [Coke]: If it doesn't work, I'd like to hear about it. Powershell is one of the shells I want to support in rakubrew.

[14:35] <[Coke]> patrickb: so far so good. I haven't gotten to the point in the build where my manual build dies yet

[14:35] <[Coke]> powershell always surprises me when it works, I have so much experience with CMD being painful. :)

[14:36] <patrickb> Did you know that you can register some existing folder with a build in it as a version in rakubrew?

[14:37] <patrickb> I tend to have a 'build' version that points to the folder where I do development.

[14:37] <[Coke]> yes.

[14:37] <[Coke]> nope. nothing magical about the rakubrew build on my box - can't build raku moar-2024.10

[14:38] <[Coke]> so, still need to fix the build process (or use the installer)

[14:38] <patrickb> rakubrew download moar-2024.10 would at least give you something to continue working with...

[14:39] <[Coke]> "already installed" except it isn't.

[14:39] <[Coke]> apparently it marked it as installed even though the build died?

[14:40] <[Coke]> ah. list shows BROKEN, but you still can't download over it.

[14:40] <patrickb> Ah. Yeah. rakubrew nuke moar-2024.10 should solve that.

[14:42] <[Coke]> ok - that was pretty painless for the download, thank you

[14:43] <patrickb> 👍🏼

[14:43] <[Coke]> raku --version is showing mojibake, even after running chhcp 65001

[14:44] <Geth> ¦ MoarVM-Remote: slid1amo2n3e4++ created pull request #5: Remove type constraint for breakpoint-to-event.

[14:44] <Geth> ¦ MoarVM-Remote: review: https://github.com/raku-community-modules/MoarVM-Remote/pull/5

[14:54] <Geth> ¦ nqp/main: b79283c5c2 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[14:54] <Geth> ¦ nqp/main: Bump MoarVM to get patrickb's longjmp Windows fixes

[14:54] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/b79283c5c2

[15:05] <Geth> ¦ rakudo/main: b6a72ac4d7 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[15:05] <Geth> ¦ rakudo/main: Bump NQP to get patrickb's longjmp Windows fixes

[15:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b6a72ac4d7

[15:49] <ugexe> patrickb: i believe rakubrew mostly worked in powershell for me

[15:50] <ugexe> i think maybe the logic to automatically do the init stuff didn't work though

[15:50] <patrickb> ugexe: Did you notice that I finally managed to implement exec --with in v40?

[16:05] <Geth> ¦ App-MoarVM-Debug: slid1amo2n3e4++ created pull request #17: Fix incorrect argument coercion when setting a breakpoint.

[16:05] <Geth> ¦ App-MoarVM-Debug: review: https://github.com/raku-community-modules/App-MoarVM-Debug/pull/17

[16:07] <Geth> ¦ App-MoarVM-Debug/main: 4811a08e19 | slid1amo2n3e4++ (committed using GitHub Web editor) | lib/App/MoarVM/Debug.rakumod

[16:07] <Geth> ¦ App-MoarVM-Debug/main: Fix incorrect argument coercion when setting a breakpoint.

[16:07] <Geth> ¦ App-MoarVM-Debug/main: 

[16:07] <Geth> ¦ App-MoarVM-Debug/main: The Match object evaluates to True, even if there's no match, so we have to explicitly cast to Int first.

[16:07] <Geth> ¦ App-MoarVM-Debug/main: review: https://github.com/raku-community-modules/App-MoarVM-Debug/commit/4811a08e19

[16:07] <Geth> ¦ App-MoarVM-Debug/main: af0cad40b8 | timo++ (committed using GitHub Web editor) | lib/App/MoarVM/Debug.rakumod

[16:07] <Geth> ¦ App-MoarVM-Debug/main: Merge pull request #17 from slid1amo2n3e4/patch-1

[16:07] <Geth> ¦ App-MoarVM-Debug/main: 

[16:07] <Geth> ¦ App-MoarVM-Debug/main: Fix incorrect argument coercion when setting a breakpoint.

[16:07] <Geth> ¦ App-MoarVM-Debug/main: review: https://github.com/raku-community-modules/App-MoarVM-Debug/commit/af0cad40b8

[16:10] <ugexe> patrickb: yeah I did, thanks

[16:11] <ugexe> for anyone else that means the follow now works

[16:11] <ugexe> $ rakubrew exec --with moar-2024.03 zef list --installed site vendor 2> /dev/null | rakubrew exec zef install -

[16:11] <ugexe> to install all modules from 2024.03 rakudo to whatever the current rakudo set in rakubrew is

[16:37] <[Coke]> anyone managing the mailing lists?

[16:37] <[Coke]> getting bounce messages.

[18:29] <Geth> ¦ rakudo/main: d00d8497ec | ab5tract++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[18:29] <Geth> ¦ rakudo/main: Add test for successful use of adverbs on hashes with infixes

[18:29] <Geth> ¦ rakudo/main: 

[18:29] <Geth> ¦ rakudo/main: Added to avoid any regressions over #5685 (R#5685)

[18:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d00d8497ec

[18:29] <linkable6> R#5685 [open]: https://github.com/rakudo/rakudo/issues/5685 [Fixed in RakuAST] You can't adverb &infix:<&&>

[18:30] <timo> isn't that to spec?

[18:30] <ab5tract> timo: is what to spec?

[18:30] <ab5tract> dying when a user tries to us an adverb with a hash in conjunction with an infix?

[18:31] <timo> having to put parenthesis for the True && (%foo<a>:exists) case

[18:31] <ab5tract> I doubt that is in spec

[18:32] <timo> https://docs.raku.org/language/traps#Adverbs_and_precedence

[18:33] <ab5tract> that's a trap, sure. doesn't mean it is specified

[18:34] <ab5tract> and even if it is, since we are capable of DWIM in RakuAST, I would argue against keeping less-capable behavior

[18:36] <ab5tract> Also, that documentation still applies in RakuAST

[18:40] <ab5tract> For my taste "Precedence issue with ! and :exists, perhaps you meant :!exists?" is a far cry from "You can't adverb &infix:<&&>"

[18:41] <timo> ok i can't actually find any spec test that requires this, cool

[18:42] <timo> i thought it was just a case of "what an adverb applies to seems kind of random if you don't know the rule" ... do i know the rule? nah :P

[18:42] <ab5tract> :)

[18:44] <ab5tract> I think there have been some longstanding issues with adverbs going to the wrong places, though I don't have the tuits to dig through the open issues at the moment

[18:53] <ab5tract> R#5685 is surprising...

[18:53] <linkable6> R#5685 [open]: https://github.com/rakudo/rakudo/issues/5685 [Fixed in RakuAST] You can't adverb &infix:<&&>

[18:54] <ab5tract> doh! R#5686

[18:54] <linkable6> R#5686 [open]: https://github.com/rakudo/rakudo/issues/5686 [junctions] Junctions don't autothread over negative operators

[18:57] <timo> i wonder if the optimizer does that

[18:58] <timo> oh that would be strange given it's a repl session with not literals?

[18:59] <timo> oh, is that from implementing $a != $b as not($a == $b) and the not immediately collapses the junction because it's a boolean op

[19:10] <ab5tract> ahhhh

[19:10] <ab5tract> yeah

[19:10] <ab5tract> that definitely explains it

[19:11] <ab5tract> now... does that mean the behavior is correct?

[19:12] <ab5tract> It's actually a bit surprising, seeming as how most other operators do autothread

[19:13] <ab5tract> I guess the idea is at "all" boolean context operators collapse the junction

[19:13] <Geth> ¦ MoarVM-Remote/loaded_file_notifications: ef9743b73b | (Timo Paulssen)++ | lib/MoarVM/Remote.rakumod

[19:13] <Geth> ¦ MoarVM-Remote/loaded_file_notifications: Add get-filenames and filenames methods.

[19:13] <Geth> ¦ MoarVM-Remote/loaded_file_notifications: 

[19:13] <Geth> ¦ MoarVM-Remote/loaded_file_notifications: As of now, the caller should make sure to only call get-filenames

[19:13] <Geth> ¦ MoarVM-Remote/loaded_file_notifications: once, and to have called get-filenames before expecting the

[19:13] <Geth> ¦ MoarVM-Remote/loaded_file_notifications: filenames method to return values.

[19:13] <Geth> ¦ MoarVM-Remote/loaded_file_notifications: review: https://github.com/raku-community-modules/MoarVM-Remote/commit/ef9743b73b

[19:14] <Geth> ¦ App-MoarVM-Debug/loaded_file_notifications: fa66665a23 | (Timo Paulssen)++ | lib/App/MoarVM/Debug.rakumod

[19:14] <Geth> ¦ App-MoarVM-Debug/loaded_file_notifications: New command: fns / filenames to list / search filenames

[19:14] <Geth> ¦ App-MoarVM-Debug/loaded_file_notifications: review: https://github.com/raku-community-modules/App-MoarVM-Debug/commit/fa66665a23

[19:15] <timo> i think it should be consistent, i.e. how the issue suggests it should be

[19:17] <timo> the thing i pointed out as the likely source of the issue should count as an implementation detail i think

[19:17] <timo> now i wonder what other fun stuff we can find when we combine metaoperators and autothreading

[19:17] <timo> m: dd any(1,2,3) Z+ (5, 4, 3)

[19:17] <camelia> rakudo-moar d00d8497e: OUTPUT: «(any(6, 7, 8),).Seq␤»

[19:18] <timo> m: dd any(1,2,3) Z+ any([5, 4, 3], [9, 8, 7], [1, 1, 1])

[19:18] <camelia> rakudo-moar d00d8497e: OUTPUT: «(any(any(4, 4, 4), any(5, 5, 5), any(6, 6, 6)),).Seq␤»

[19:18] <timo> m: my ($a, $b, $c); dd any($a, $b, $c) += 9; dd :$a, :$b, :$c

[19:18] <camelia> rakudo-moar d00d8497e: OUTPUT: «Use of uninitialized value of type Any in numeric context␤  in block <unit> at <tmp> line 1␤Use of uninitialized value of type Any in numeric context␤  in block <unit> at <tmp> line 1␤Use of uninitialized value of type Any in numeric context…»

[19:19] <timo> hm, not what i expected there

[19:19] <timo> m: my $a; $a += 5; dd $a

[19:19] <camelia> rakudo-moar d00d8497e: OUTPUT: «$a = 5␤»

[19:20] <timo> not that i have an opinion on what would be correct for this admittedly exotic usage

[19:21] <Geth> ¦ MoarVM-Remote: timo++ created pull request #6: Add get-filenames and filenames methods.

[19:21] <Geth> ¦ MoarVM-Remote: review: https://github.com/raku-community-modules/MoarVM-Remote/pull/6

[19:21] <Geth> ¦ App-MoarVM-Debug: timo++ created pull request #18: New command: fns / filenames to list / search filenames

[19:21] <Geth> ¦ App-MoarVM-Debug: review: https://github.com/raku-community-modules/App-MoarVM-Debug/pull/18

[19:29] <ab5tract> oh weird, I wouldn't have expected that either ...

[19:29] <ab5tract> Now I'm having trouble finding the precise mechanism of `!=`

[19:29] <ab5tract> the qast when using that doesn't contain any reference to `METAOP_NEGATE`

[19:30] <timo> --target=ast or --target=optimize? and do we have a specific &infix:<!=> perhaps?

[19:30] <timo> since != isn't != but really !==

[19:31] <ab5tract> `!==` does bring up METAOP_NEGATE

[19:31] <timo> hm, i seem to recall there was something slightly odd about junctions when it comes to negating stuff

[19:31] <ab5tract> And I do see that there are `infix<!=>` candidates in Int and Num in core

[19:31] <ab5tract> *`infix:<!=>`, rather

[19:32] <ab5tract> `!~~` also collapses

[19:36] <timo> https://github.com/Raku/old-issue-tracker/issues/1787

[19:38] <timo> also https://github.com/rakudo/rakudo/issues/3748 and https://github.com/rakudo/rakudo/pull/3874 and https://github.com/Raku/problem-solving/issues/319

[19:40] <ab5tract> timo: that's some excellent spelunking!

[19:42] <timo> i found the link to that issue in the spec tests in S03-junctions/autothreading.t around line 290

[19:42] <timo> and the others from there

[19:51] <timo> I think i might be too tired to think about anything having more than zero negations in it

[19:53] <ab5tract> :)

[19:54] <lizmat> ah, that old chestnut  :-(

[20:49] <ab5tract> I hope you get some good rest timo, I’ve been running on fumes recently myself

[20:55] <ab5tract> .. what does this signature mean? https://github.com/rakudo/rakudo/blob/eab780f38df83ca60f6e96e10345862355326314/src/core.c/Numeric.pm6#L290

[20:56] <lizmat> 0 or 1 positional

[20:56] <lizmat> don't care about the value, so don't bother to even bind it to a lexical

[20:57] <ab5tract> Ok… that’s kind of what I thought it would mean

[20:57] <lizmat> m: sub a($? { dd }; a; a 42

[20:57] <camelia> rakudo-moar d00d8497e: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> sub a($? ⏏{ dd }; a; a 42␤»

[20:57] <ab5tract> But how you call an infix with 0 positionals

[20:57] <lizmat> m: sub a($?) { dd }; a; a 42

[20:57] <camelia> rakudo-moar d00d8497e: OUTPUT: «sub a($?)␤sub a($?)␤»

[20:57] <lizmat> m: say [!=] ()

[20:57] <camelia> rakudo-moar d00d8497e: OUTPUT: «True␤»

[20:58] <lizmat> m: say [!=] (42,)

[20:58] <camelia> rakudo-moar d00d8497e: OUTPUT: «True␤»

[20:58] <lizmat> m: say [!=] (42,666)

[20:58] <camelia> rakudo-moar d00d8497e: OUTPUT: «True␤»

[20:58] <ab5tract> That doesn’t even seem correct (the first one)

[20:58] <lizmat> m: say [!=] (42,42)

[20:58] <camelia> rakudo-moar d00d8497e: OUTPUT: «False␤»

[20:58] <ab5tract> Why support either?

[20:59] <lizmat> because a meta-op can be presented with a 0 or 1 elem list

[20:59] <ab5tract> ISTR that you were planning on adjusting some semantics related to this

[21:00] <ab5tract> I guess”this nothing” != “this other nothing” could be true

[21:00] <ab5tract> But I am not sure I like it

[21:01] <lizmat> m: say [==]

[21:01] <camelia> rakudo-moar d00d8497e: OUTPUT: «True␤»

[21:01] <lizmat> m: say [==] (42,(

[21:01] <camelia> rakudo-moar d00d8497e: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> say [==] (42,(⏏<EOL>␤»

[21:01] <lizmat> m: say [==] (42,)

[21:01] <camelia> rakudo-moar d00d8497e: OUTPUT: «True␤»

[21:01] <ab5tract> m: say [!==]

[21:01] <camelia> rakudo-moar d00d8497e: OUTPUT: «True␤»

[21:01] <ab5tract> Don’t like that

[21:01] <lizmat> hmmm  you could argue it should be opposite

[21:01] <lizmat> well....   pretty sure Larry had some ideas about that at the time

[21:02] <ab5tract> It is this way for a reason, I understand that

[21:02] <ab5tract> But we ought to interrogate it when it means that

[21:02] <lizmat> interrogate what ?

[21:03] <ab5tract> m: dd [==] (any(1,2,3), any(1,2,3))

[21:03] <camelia> rakudo-moar d00d8497e: OUTPUT: «Bool::True␤»

[21:03] <ab5tract> Hmm

[21:04] <ab5tract> Whether we should allow infixes to do anything but fail when presented with < 2 arguments?

[21:04] <lizmat> m: say [+]

[21:04] <camelia> rakudo-moar d00d8497e: OUTPUT: «0␤»

[21:04] <lizmat> m: say [+] (42,)

[21:04] <camelia> rakudo-moar d00d8497e: OUTPUT: «42␤»

[21:04] <lizmat> m: say [+] (42,666)

[21:04] <camelia> rakudo-moar d00d8497e: OUTPUT: «708␤»

[21:04] <ab5tract> I know we discussed this eegardeing left versus right precedence

[21:05] <ab5tract> Why do I want [+] 1 to succeed?

[21:05] <ab5tract> We have a prefix form for a single argument

[21:05] <ab5tract> Should the prefix succeed for 0 arguments?

[21:05] <lizmat> because (1,) could be an array that was passed to us ?

[21:06] <ab5tract> Well it can be handed back a failure

[21:06] <ab5tract> Not a “sure, that’s obviously True”

[21:06] <lizmat> pretty sure that will break quite some spectests, let alone some ecosystem modules

[21:06] <ab5tract> I remember you saying you were going to fix more or less this exact issue for left associative ops

[21:07] <lizmat> that was something else with metaops I believe

[21:07] <lizmat> I forget atm

[21:08] <ab5tract> Me too :(

[21:09] <ab5tract> Anyway, the overall discussion is relative to junction METAOP_NEGATE not autothreading

[21:09] <ab5tract> I’m signing off for tonight though, sleep has been both chasing and eluding me

[21:18] <lizmat> ack

[21:18] <lizmat> sleep well!   recharge!  kick those bed bugs out!

[22:34] *** lizmat left
[23:00] *** sena_kun left
[23:16] <Geth> ¦ roast: raiph++ created pull request #866: s/`|w`/`?wb`/ (switch from Rakudo feature to Raku feature)

[23:16] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/866

