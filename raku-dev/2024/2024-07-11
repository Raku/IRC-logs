[00:32] <[Coke]> wiping the azure win machine I had setup for now (price quintupled this month and AFAIK no one was using it)

[01:15] *** MasterDuke joined
[08:35] *** sena_kun joined
[08:36] *** finanalyst left
[10:58] *** finanalyst joined
[11:31] *** japhb left
[11:47] *** japhb joined
[12:04] <Geth> ¦ rakudo/main: f8b56432de | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.rakumod

[12:04] <Geth> ¦ rakudo/main: RakuAST: deparse alphanumeric prefixes with space

[12:04] <Geth> ¦ rakudo/main: 

[12:04] <Geth> ¦ rakudo/main: Otherwise most likely won't parse again

[12:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f8b56432de

[12:04] *** finanalyst left
[12:43] <Geth> ¦ rakudo/main: 9d959fae45 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.rakumod

[12:43] <Geth> ¦ rakudo/main: RakuAST: only handle true system methods specially

[12:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9d959fae45

[13:01] *** sena_kun left
[13:15] *** sena_kun joined
[13:44] *** vrurg joined
[13:47] *** vrurg_ joined
[13:47] *** vrurg__ left
[13:50] *** vrurg left
[14:09] *** vrurg joined
[14:10] *** vrurg__ joined
[14:13] *** vrurg left
[14:13] *** vrurg_ left
[14:13] *** vrurg joined
[14:17] *** vrurg__ left
[14:38] *** vrurg_ joined
[14:42] *** vrurg left
[14:48] *** vrurg_ left
[14:49] *** vrurg_ joined
[15:10] *** vrurg joined
[15:12] *** MasterDuke left
[15:13] *** vrurg_ left
[15:33] *** vrurg_ joined
[15:36] *** vrurg left
[16:57] *** vrurg joined
[16:57] *** vrurg_ left
[19:00] <lizmat> m: say Q|use v6.d|.AST    # I understand why, but it is a pain for deparsing  :-)

[19:00] <camelia> rakudo-moar 9d959fae4: OUTPUT: «RakuAST::StatementList.new()␤»

[19:02] *** vrurg left
[19:02] *** vrurg joined
[19:07] <gfldex> So that's basically a comment, without the actual comment?

[19:12] <lizmat> yup

[19:12] <lizmat> actually, treating it like a comment might be TRTDT   hmmm

[19:12] *** vrurg left
[19:25] *** finanalyst joined
[19:25] <patrickb> I'm currently looking at the IO::Socket role. I think this line https://github.com/rakudo/rakudo/blob/main/src/core.c/IO/Socket.rakumod#L74 is fishy.

[19:26] <lizmat> fishy in what way?

[19:26] <patrickb> Do I misunderstand, or does reading loads of data into the decoder and then only using parts of it mean, that subsequent calls to recv(:bin) will not see the data still in the decoder?

[19:27] <lizmat> how: only using parts?

[19:28] <patrickb> get is reading a single line, right?

[19:30] <patrickb> so if that nqp::readfh call reads more bytes than what the next line is, those extra bytes will not be returned from the #!decoder.consume-line-chars and stay in the decoder, right?

[19:33] <lizmat> that's my understanding

[19:34] <patrickb> looking at how the decoder works, it has a mechanism in place to pull out data undecoded. If recv were to use that instead of pulling from the handle directly, things would be fine.

[19:35] <lizmat> OT: looks like the IRC logs server is using significant less actual memory after runing for a day or so

[19:35] <lizmat> *running

[19:35] <patrickb> oh, nice!

[19:36] <lizmat> well..  It's using 16G of RAM now, but really only 5G because it compressed 11G of RAM

[19:36] <lizmat> with the expr jit the amount of compressed RAM was a lot less

[19:38] <patrickb> We cound either change IO::Socket::recv to pull all data through the decoder *if* there is a decoder set. This would only give the perf penalty of using the decoder for :bin access when it was at least used once.

[19:39] <patrickb> Or make get() (and the other functions doing similar), process data bytewise to ensure there is never unprocessed data in the decoder. That seems decidedly worse.

[19:44] <lizmat> I think this design is to allow to first read in text, and then read in :bin and vice-versa

[19:45] <lizmat> e.g. when parsing a HTTP header and then receiving a body in binary ?

[19:49] <patrickb> I'll have a PR in a moment.

[20:13] <patrickb> testing the change now

[20:35] *** vrurg joined
[20:47] *** vrurg left
[20:49] <patrickb> Bah. I've added a few tests. One fails pointing at a misbehavior in moar land. Ugh. Why do I keep falling into these rabbit holes?

[20:49] <ugexe> Yeah I’m pretty sure the intention was to optimize http stuff for the reason Lizmat mentioned 

[20:51] <ugexe> https://6guts.wordpress.com/2017/06/08/sorting-out-synchronous-io/

[20:52] <ugexe> Might have some insight as well

[20:52] *** vrurg joined
[21:10] <patrickb> The current implementation fails as soon as one tries to read binary from a socket that before was read decoded from.

[21:30] <Geth> ¦ rakudo: patrickbkr++ created pull request #5604: Partially fix mixed bin/no bin reads in IO::Socket

[21:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5604

[21:33] <Geth> ¦ roast: patrickbkr++ created pull request #857: Test mixed bin/no bin access in IO::Socket

[21:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/857

[21:45] <patrickb> There we go. There is a doc PR as well trying to document the difficulty of mixing bin / non-bin reads

[21:46] <patrickb> Oh well, I didn't get as far as I hoped with my IO::Socket::SSL lookalike as I liked tonight.

[21:46] <patrickb> Anyways, off to bed for me.

[21:46] <patrickb> 'night every one. o/

[21:47] <patrickb> ugexe: If you want you can join the bikeshedding fun over on the io socket ssl PR discussion.

[22:46] *** sena_kun left
[22:53] <ugexe> I’ll try. I’m pretty busy over the next month but am still checking up on stuff when I can 

[23:42] *** finanalyst left
