[06:56] *** leont left
[06:57] *** leont joined
[06:58] *** camelia left
[07:43] *** sena_kun joined
[07:49] *** camelia joined
[07:54] <nine> I wonder if throws-like should pass if we're looking for an X::Comp exception and don't get that directly but instead get an X::Comp::Group exception that contains the one we're looking for.

[07:59] <nine> On the one hand, changing Test's semantics has wide reaching implications, considering that it's probably used by just about all Raku code out there. On the other hand, I doubt that there are many places outside of Rakudo where tests expect compilation errors to occur.

[08:00] <nine> And even where they do, it might actually be helpful to be more lenient regarding groups as we are getting better at reporting all the compile time errors instead of just the first one.

[08:15] <lizmat> that's problem resolving stuff  :-)

[08:26] <nine> I think I'll just go for it

[08:30] *** camelia left
[08:44] <Geth> ¦ rakudo/main: 43af30aab0 | (Stefan Seifert)++ | lib/Test.rakumod

[08:44] <Geth> ¦ rakudo/main: Have throws-like if the expected compile time exception is part of a group

[08:44] <Geth> ¦ rakudo/main: 

[08:44] <Geth> ¦ rakudo/main: The compiler will throw an X::Comp::Group exception when there are

[08:44] <Geth> ¦ rakudo/main: multiple compile time problems. With time, the compiler gets better and

[08:44] <Geth> ¦ rakudo/main: will report more problems and will also get better at reporting those

[08:44] <Geth> ¦ rakudo/main: problems at the end of compilation instead of right away.

[08:44] <Geth> ¦ rakudo/main: 

[08:45] <Geth> ¦ rakudo/main: <…commit message has 13 more lines…>

[08:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/43af30aab0

[08:45] <Geth> ¦ rakudo/main: 09deed5de4 | (Stefan Seifert)++ | 2 files

[08:45] <Geth> ¦ rakudo/main: RakuAST: ensure we always report usage of placeholders in pointy blocks

[08:45] <Geth> ¦ rakudo/main: 

[08:45] <Geth> ¦ rakudo/main: Pointy blocks always have an explicit signature, even if the block does

[08:45] <Geth> ¦ rakudo/main: not take any parameters at all. Thus pointy blocks must never use any

[08:45] <Geth> ¦ rakudo/main: placeholder parameters.

[08:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/09deed5de4

[08:55] *** camelia joined
[08:59] <Geth> ¦ rakudo/main: 99c530a048 | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[08:59] <Geth> ¦ rakudo/main: RakuAST: make YOU_ARE_HERE reserved syntax

[08:59] <Geth> ¦ rakudo/main: 

[08:59] <Geth> ¦ rakudo/main: YOU_ARE_HERE is a marker that must only be used by the setting.

[08:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/99c530a048

[08:59] <nine> 1087

[09:16] <lizmat> I see 1086: t/spec/S19-command-line-options/05-delimited-options.rakudo.moar fails for me, but not when run as a single file

[09:17] <nine> repeatedly?

[09:17] <lizmat> yes... I wonder if this is an OS difference

[09:18] <lizmat> "Could not open ++FOO. Failed to stat file: no such file or directory\n"

[09:18] <nine> I see t/spec/S29-os/system.t failing somewhat reliably when running with my usual TEST_JOBS=40 but succeed when reducing that to 16

[09:18] <nine> That file contains only a single test and that's TODOed

[09:19] <lizmat> yeah, that's the odd thing about it

[09:19] <lizmat> perhaps we should just delete that file

[09:19] *** sena_kun left
[09:20] <nine> > rakudo '++FOO' '--bar' '++/FOO' '-e' 'say %*OPTS<FOO>'

[09:20] <nine> Could not open ++FOO. Failed to stat file: no such file or directory

[09:21] <nine> Let's delete that test. It seems quite rakudo specific anyway

[09:21] <lizmat> S19 mentions "New C<++> metasyntax allows options to be passed through to subsystems"

[09:22] <lizmat> so looks like a NYI indeed, maybe it's a WNBI ?

[09:22] <nine> probably

[09:24] <Geth> ¦ roast: ae61355101 | (Elizabeth Mattijsen)++ | S19-command-line-options/05-delimited-options.t

[09:24] <Geth> ¦ roast: Remove dodgy test that will probably be never implemented

[09:24] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ae61355101

[13:31] <lizmat> notable6: weekly

[13:31] <notable6> lizmat, 1 note: 2024-08-12T12:56:32Z <lizmat>: https://dev.to/lizmat/the-end-of-p6c-2868

[13:31] <lizmat> notable6: weekly reset

[13:31] <notable6> lizmat, Moved existing notes to “weekly_2024-08-12T13:31:57Z”

[13:38] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/08/12/2024-33-p6c-ending/

[14:52] <Geth> ¦ rakudo/main: 6e253ef59f | (Stefan Seifert)++ | 2 files

[14:52] <Geth> ¦ rakudo/main: RakuAST: fix regex thunks not getting block thunked

[14:52] <Geth> ¦ rakudo/main: 

[14:52] <Geth> ¦ rakudo/main: Some operators require their operands to be block thunked, i.e. not just

[14:52] <Geth> ¦ rakudo/main: turned into code objects but turned into full code blocks with their own

[14:52] <Geth> ¦ rakudo/main: lexical scopes. While regex thunks are code objects, they do not produce

[14:52] <Geth> ¦ rakudo/main: their own lexical scope. Thus even though they are already a kind of

[14:52] <Geth> ¦ rakudo/main: thunk, we need to wrap them again with BlockThunks.

[14:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6e253ef59f

[14:52] <Geth> ¦ rakudo/main: e6c6f5c080 | (Stefan Seifert)++ | src/Raku/ast/scoping.rakumod

[14:52] <Geth> ¦ rakudo/main: RakuAST: fixes declarations from thunked code objects missing

[14:52] <Geth> ¦ rakudo/main: 

[14:52] <Geth> ¦ rakudo/main: Even code objects can get (block)thunked, so we still have to check

[14:52] <Geth> ¦ rakudo/main: whether they are expressions and add thunk declarations to the scope if

[14:52] <Geth> ¦ rakudo/main: they have them.

[14:52] <Geth> ¦ rakudo/main: 

[14:52] <Geth> ¦ rakudo/main: Fixes (S/a/A/ andthen S/b/B/ given "ab") (together with the previous

[14:52] <Geth> ¦ rakudo/main: commit)

[14:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e6c6f5c080

[15:20] <nine> m: my @seen; for any 1 { dd .^name }

[15:20] <camelia> rakudo-moar e6c6f5c08: OUTPUT: «"Junction"␤»

[15:21] <nine> Ok, that's just what the spec test expects, too.

[15:21] <nine> m: my @seen; for any 1 { dd .^name; LAST { } }

[15:21] <camelia> rakudo-moar e6c6f5c08: OUTPUT: «"Int"␤»

[15:21] <nine> trolollol

[15:24] <nine> So this specced behavior actually depends on an optimization of for loops with "simple" bodies.

[15:28] <timo> this would be a surprise for any 1

[17:59] <Geth> ¦ rakudo/fix-looping-over-junction: fde5d87fe9 | (Stefan Seifert)++ | 3 files

[17:59] <Geth> ¦ rakudo/fix-looping-over-junction: Fix iterating over Junction with non-simple loop bodies

[17:59] <Geth> ¦ rakudo/fix-looping-over-junction: 

[17:59] <Geth> ¦ rakudo/fix-looping-over-junction: say .^name for any 1; should print "Junction" as we are iterating over a

[17:59] <Geth> ¦ rakudo/fix-looping-over-junction: single Junction item. This already worked but only because of an

[17:59] <Geth> ¦ rakudo/fix-looping-over-junction: optimization for loop bodies without any phasers or other complications.

[17:59] <Geth> ¦ rakudo/fix-looping-over-junction: for any 1 { say .^name; LAST { } } printed "Int" indicating that the

[17:59] <Geth> ¦ rakudo/fix-looping-over-junction: loop body got auto-threaded. That's because Junction objects don't

[17:59] <Geth> ¦ rakudo/fix-looping-over-junction: <…commit message has 6 more lines…>

[17:59] <Geth> ¦ rakudo/fix-looping-over-junction: review: https://github.com/rakudo/rakudo/commit/fde5d87fe9

[17:59] <Geth> ¦ rakudo: niner++ created pull request #5620: Fix iterating over Junction with non-simple loop bodies

[17:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5620

[18:00] <nine> I'd like to get a review for ^^^ before pushing to main. Question really is "is it worth the hassle?"

[18:39] *** sena_kun joined
[21:05] <ab5tract> I’ll have to double check because it’s been a while and I’m not at a computer, but I think we might have moved past using p6setfirstflag for FIRST… but I might have a wire crossed and it was a different extop / phaser combo that was, erm, phased out

