[06:34] *** [Coke] left
[08:31] *** [Coke] joined
[09:23] *** finanalyst joined
[09:28] *** sena_kun joined
[10:26] <lizmat> timo: yes

[10:38] *** finanalyst left
[10:41] <Geth> ¦ rakudo/main: 021a3bb291 | (Elizabeth Mattijsen)++ | src/core.c/metaops.rakumod

[10:41] <Geth> ¦ rakudo/main: Revert "Give META_REDUCE_RIGHT behavior for 1-arg case"

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: This reverts commit 194206736f4b6edb5f056168940cf791cf67d9f0.

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: It's the META_REDUCE_LEFT case that should change, as discussed in

[10:41] <Geth> ¦ rakudo/main:   https://github.com/rakudo/rakudo/issues/1705

[10:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/021a3bb291

[14:30] *** finanalyst joined
[14:35] *** finanalyst left
[16:42] *** lizmat_ joined
[16:45] *** lizmat left
[17:14] *** lizmat_ left
[17:15] *** lizmat joined
[18:04] <Geth> ¦ rakudo/main: bbd8b65d54 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.rakumod

[18:04] <Geth> ¦ rakudo/main: Remove dead code

[18:04] <Geth> ¦ rakudo/main: 

[18:04] <Geth> ¦ rakudo/main: Fixes #1780

[18:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bbd8b65d54

[18:28] <Geth> ¦ rakudo/main: b1f0f5d13a | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.rakumod

[18:28] <Geth> ¦ rakudo/main: Make sure fractional shapes are intified properly

[18:28] <Geth> ¦ rakudo/main: 

[18:28] <Geth> ¦ rakudo/main: Fixes #1794

[18:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b1f0f5d13a

[18:29] <Geth> ¦ roast: 24aee9f8a2 | (Elizabeth Mattijsen)++ | S02-types/array-shapes.t

[18:29] <Geth> ¦ roast: Add test for #1794

[18:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/24aee9f8a2

[19:53] *** japhb left
[20:24] *** japhb joined
[21:49] <Geth> ¦ rakudo/ugexe-patch-2: f4e6faeb46 | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/PrecompilationRepository.rakumod

[21:49] <Geth> ¦ rakudo/ugexe-patch-2: Restore :$source parameter to load(...) multi

[21:49] <Geth> ¦ rakudo/ugexe-patch-2: 

[21:49] <Geth> ¦ rakudo/ugexe-patch-2: The `:$source` parameter was removed from one of the `load(...)` multi methods because it was presumed to be unused. The problem, however, was that it was not being used and not that the parameter existed. This restores the `:$source` parameter and now correctly passes it along to the next `load(...)` multi method (which does use the parameter).

[21:49] <Geth> ¦ rakudo/ugexe-patch-2: review: https://github.com/rakudo/rakudo/commit/f4e6faeb46

[21:49] <Geth> ¦ rakudo: ugexe++ created pull request #5653: Restore :$source parameter to load(...) multi

[21:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5653

[22:00] <Geth> ¦ rakudo/main: 59631b18da | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/PrecompilationRepository.rakumod

[22:00] <Geth> ¦ rakudo/main: Restore :$source parameter to load(...) multi

[22:00] <Geth> ¦ rakudo/main: 

[22:00] <Geth> ¦ rakudo/main: The `:$source` parameter was removed from one of the `load(...)` multi methods because it was presumed to be unused. The problem, however, was that it was not being used and not that the parameter existed. This restores the `:$source` parameter and now correctly passes it along to the next `load(...)` multi method (which does use the parameter).

[22:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/59631b18da

[22:20] <Geth> ¦ roast: 3b53bff7c7 | (Elizabeth Mattijsen)++ | S04-phasers/enter-leave.t

[22:20] <Geth> ¦ roast: Add test for #1815

[22:20] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3b53bff7c7

[22:40] *** sena_kun left
[23:57] <timo> debian currently builds a separate package "nqp-data" from nqp where all the .moarvm files end up, and the nqp-data has architecture set to "all", in other words it's built for one architecture and the single result used on all architectures

[23:58] <timo> i'm not sure that's actually correct. do we not take any stuff from the OS into the compiled result anywhere?

