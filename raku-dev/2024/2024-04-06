[00:17] *** MasterDuke joined
[00:17] <MasterDuke> .

[00:17] <tellable6> 2024-04-05T14:03:43Z #raku-dev <[Tux]> MasterDuke: https://tux.nl/Talks/CSV6/speed4-20.html

[00:17] <MasterDuke> [Tux]: cool, thanks

[00:44] *** japhb left
[00:45] *** japhb joined
[01:31] *** MasterDuke left
[07:23] <Geth> ¦ nqp/main: e90292265a | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[07:23] <Geth> ¦ nqp/main: Bump MoarVM for MasterDuke++ optimizations

[07:23] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/e90292265a

[07:34] <Geth> ¦ rakudo/main: b4d7db184c | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[07:34] <Geth> ¦ rakudo/main: Bump NQP to get the latest MoarVM optimizations

[07:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b4d7db184c

[07:46] <[Tux]> Rakudo v2024.03-99-gf0d5a9425 (v6.d) on MoarVM 2024.03-3-gf2220d93d

[07:46] <[Tux]> csv-test-xs-20      0.141 -  0.142

[07:46] <[Tux]> test-t --race       0.279 -  0.280

[07:46] <[Tux]> test-t              0.419 -  0.426

[07:46] <[Tux]> test-t-20 --race    1.210 -  1.217

[07:46] <[Tux]> csv-parser          1.565 -  1.568

[07:46] <[Tux]> test                1.947 -  1.988

[07:46] <[Tux]> test-t-20           5.151 -  5.193

[07:47] <[Tux]> https://gist.github.com/Tux/c783b98595f4250572b16bdcc92947f0

[09:17] *** lizmat_ joined
[09:19] <lizmat_> greppable6: role_to_role

[09:19] <greppable6> lizmat_, Found nothing!

[10:20] *** lizmat__ joined
[10:22] *** lizmat_ left
[10:33] *** ab5tract left
[10:33] *** ab5tract joined
[11:13] <Geth> ¦ rakudo/main: 87feb40a16 | (Elizabeth Mattijsen)++ | src/vm/moar/ModuleLoaderVMConfig.nqp

[11:13] <Geth> ¦ rakudo/main: Streamline ModuleLoaderVMConfig role

[11:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/87feb40a16

[12:41] *** lizmat_ joined
[12:41] *** lizmat__ left
[12:44] <Geth> ¦ rakudo/main: 4cec36b724 | (Elizabeth Mattijsen)++ | src/Perl6/ModuleLoader.nqp

[12:44] <Geth> ¦ rakudo/main: Streamline ModuleLoader (Part 1/N)

[12:44] <Geth> ¦ rakudo/main: 

[12:44] <Geth> ¦ rakudo/main: - use nqp::atkey/pos instead of {} and []

[12:44] <Geth> ¦ rakudo/main: - change for loops to while loops

[12:44] <Geth> ¦ rakudo/main: - several other shortcuts

[12:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4cec36b724

[13:05] *** lizmat_ left
[13:05] *** lizmat_ joined
[13:10] *** lizmat_ left
[13:11] *** lizmat_ joined
[13:51] *** lizmat_ left
[13:51] *** lizmat_ joined
[13:57] <nine> Is there an actual difference between [] and atpos in NQP?

[14:06] <lizmat_> [] can serve as a left-value

[14:07] <lizmat_> as can { }

[14:08] <lizmat_> afk&

[14:08] *** lizmat_ left
[14:10] <ab5tract> m: use nqp; say nqp::istype(${:a("B")}, Associative); say nqp::istype(${:a("B")}, nqp::gethllsym("Raku", "Associative")); #surprising

[14:10] <camelia> rakudo-moar 4cec36b72: OUTPUT: «1␤0␤»

[14:24] <lizmat> m: dd nqp::gethllsym("Raku", "Associative")

[14:24] <camelia> rakudo-moar 4cec36b72: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find nqp::gethllsym, did you forget 'use nqp;' ?␤at <tmp>:1␤------> dd nqp::gethllsym("Raku", "Associative")⏏<EOL>␤»

[14:24] <lizmat> m: use nqp; dd nqp::gethllsym("Raku", "Associative")

[14:24] <camelia> rakudo-moar 4cec36b72: OUTPUT: «Mu␤»

[14:24] <lizmat> m: use nqp; dd nqp::gethllsym("Raku", "Foo")

[14:24] <camelia> rakudo-moar 4cec36b72: OUTPUT: «Mu␤»

[14:25] <lizmat> ab5tract ^^

[14:26] <ab5tract> sory, I should have been more specific about what was surprising me: I was surprised that Associative is missing in the Raku HLL

[14:26] <ab5tract> but I still have a lot to learn about the whole HLL concept, to be honest

[14:29] <lizmat> it's simple, really: if nothing does a nqp::bindhllsym('Raku', 'Associative', Associative), then it won't be there

[14:31] <lizmat> afk&

[14:32] <ab5tract> I was under the impression that if it was defined in CORE setting, it was bound into the hll lookup thingy. TIL!

[14:33] <ab5tract> in retrospect the impression I had is obviously impossible, as we are bootstrapping.

[15:35] <Geth> ¦ rakudo/is-item-redux: 840e4e16d0 | ab5tract++ | 5 files

[15:35] <Geth> ¦ rakudo/is-item-redux: Scaffolding for 'is item' trait on parameters

[15:35] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/840e4e16d0

[15:35] <Geth> ¦ rakudo/is-item-redux: a14563be2f | ab5tract++ | 2 files

[15:35] <Geth> ¦ rakudo/is-item-redux: Add dispatch disambiguation for 'is item'

[15:35] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/a14563be2f

[15:35] <Geth> ¦ rakudo/is-item-redux: 8499836dc7 | ab5tract++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[15:35] <Geth> ¦ rakudo/is-item-redux: (Legacy dispatch) disambiguate itemization with 'is item'

[15:35] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/8499836dc7

[16:24] <Geth> ¦ rakudo/is-item-redux: f95f722828 | ab5tract++ | 2 files

[16:24] <Geth> ¦ rakudo/is-item-redux: Add dispatch disambiguation for 'is item'

[16:24] <Geth> ¦ rakudo/is-item-redux: 

[16:24] <Geth> ¦ rakudo/is-item-redux: This allows for multi routines to distinguish between itemized arguments.

[16:24] <Geth> ¦ rakudo/is-item-redux: 

[16:24] <Geth> ¦ rakudo/is-item-redux: For the sake of simplicity, the parameter trait does not add any new

[16:24] <Geth> ¦ rakudo/is-item-redux: ParamTypeChecks to the parameter. Instead it is only used as a marker

[16:24] <Geth> ¦ rakudo/is-item-redux: for disambiguation in multiple dispatch:

[16:24] <Geth> ¦ rakudo/is-item-redux: <…commit message has 6 more lines…>

[16:24] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/f95f722828

[16:24] <Geth> ¦ rakudo/is-item-redux: 9d34483dfc | ab5tract++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[16:24] <Geth> ¦ rakudo/is-item-redux: (Legacy dispatch) disambiguate itemization with 'is item'

[16:24] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/9d34483dfc

[16:26] <ab5tract> lizmat: when an `is item` candidate is dispatched to, do you reckon that the itemization should remain after it is passed to the routine body?

[16:27] <ab5tract> right now I haven't implemented that, but it would be a simple enough change

[16:48] <Geth> ¦ rakudo/is-item-redux: 4ad3b37fe2 | ab5tract++ | 2 files

[16:48] <Geth> ¦ rakudo/is-item-redux: Add dispatch disambiguation for 'is item'

[16:48] <Geth> ¦ rakudo/is-item-redux: 

[16:48] <Geth> ¦ rakudo/is-item-redux: This allows for multi routines to distinguish between itemized arguments.

[16:48] <Geth> ¦ rakudo/is-item-redux: 

[16:48] <Geth> ¦ rakudo/is-item-redux: For the sake of simplicity, the parameter trait does not add any new

[16:48] <Geth> ¦ rakudo/is-item-redux: ParamTypeChecks to the parameter. Instead it is only used as a marker

[16:48] <Geth> ¦ rakudo/is-item-redux: for disambiguation in multiple dispatch:

[16:48] <Geth> ¦ rakudo/is-item-redux: <…commit message has 6 more lines…>

[16:48] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/4ad3b37fe2

[16:48] <Geth> ¦ rakudo/is-item-redux: c50158bba7 | ab5tract++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[16:48] <Geth> ¦ rakudo/is-item-redux: (Legacy dispatch) disambiguate itemization with 'is item'

[16:48] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/c50158bba7

[16:59] <lizmat> ab5tract: I'd say, no, as @foo doesn't imply itemization ?

[17:02] <Geth> ¦ rakudo: ab5tract++ created pull request #5549: Add dispatch disambiguation via 'is item' parameter trait

[17:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5549

[17:05] <Geth> ¦ rakudo/is-item-redux: 9a646a8141 | ab5tract++ | 5 files

[17:05] <Geth> ¦ rakudo/is-item-redux: Scaffolding for 'is item' trait on parameters

[17:05] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/9a646a8141

[17:05] <Geth> ¦ rakudo/is-item-redux: a3758a75fb | ab5tract++ | 2 files

[17:05] <Geth> ¦ rakudo/is-item-redux: Add dispatch disambiguation for 'is item'

[17:05] <Geth> ¦ rakudo/is-item-redux: 

[17:05] <Geth> ¦ rakudo/is-item-redux: This allows for multi routines to distinguish between itemized arguments.

[17:05] <Geth> ¦ rakudo/is-item-redux: 

[17:05] <Geth> ¦ rakudo/is-item-redux: For the sake of simplicity, the parameter trait does not add any new

[17:05] <Geth> ¦ rakudo/is-item-redux: ParamTypeChecks to the parameter. Instead it is only used as a marker

[17:05] <Geth> ¦ rakudo/is-item-redux: for disambiguation in multiple dispatch:

[17:05] <Geth> ¦ rakudo/is-item-redux: <…commit message has 6 more lines…>

[17:05] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/a3758a75fb

[17:05] <Geth> ¦ rakudo/is-item-redux: 1abfd6e676 | ab5tract++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[17:05] <Geth> ¦ rakudo/is-item-redux: (Legacy dispatch) disambiguate itemization with 'is item'

[17:05] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/1abfd6e676

[17:05] <ab5tract> ouch... I guess I will avoid developing on rakudo directly.. I don't like spamming this channel when I inevitably force push some improvements

[17:06] <ab5tract> *rakudo/rakudo

[17:07] <ab5tract> lizmat: makes sense to me too

[17:22] <ab5tract> next up: the RakuAST version. but I will avoid implementing that until the current work is discussed and merged

[17:27] <lizmat> would a separate RakuAST version be needed ?

[17:31] <lizmat> nine: other differences in NQP between postcircumfix [] and nqp::atpos:

[17:31] <lizmat> $ nqp -e 'my $a := nqp::list; my $b := $a[0]; say($b.HOW.name($b))'

[17:31] <lizmat> NQPMu

[17:31] <lizmat> $ nqp -e 'my $a := nqp::list; my $b := nqp::atpos($a,0); say($b.HOW.name($b))'

[17:31] <lizmat> VMNull

[17:32] <lizmat> same for postcircumfic { } and nqp::atkey

[17:33] <ab5tract> lizmat: yeah, but only the setting up of the trait

[17:33] <ab5tract> ie, the stuff that's currently in actions

[17:36] <lizmat> ack

[17:36] <nine> I think I'll just give up on t/spec/S02-types/generics.t. The code is almost impossible to comprehend. The commit messages don't explain anything and the issue referenced just says something about a 4th part of some epic saga but doesn't really explain anything.

[17:36] <nine> I also don't understand why such extensive work was done on the old frontend without any accompanying work on RakuAST at all. And that in late 2023. I thought we had an agreement that that won't happen.

[17:37] <lizmat> yeah, I think we need to revisit generics more generally

[17:38] <lizmat> wrt the work: some people needed it *now* rather than *then*

[17:39] <nine> Then they could have had it in their fork of Rakudo

[17:40] <nine> Rakudo is a collaborative effort, not a dumping ground for people's special needs.

[17:42] *** MasterDuke joined
[17:43] <lizmat> well, afaik generics *were* specced

[17:44] <lizmat> so the special need is in the timing, not in the content, I'd say

[17:51] <MasterDuke> huh. i just profiled tools/build/raku-ast-compiler.nqp (the script that's run during the `+++ Generating  gen/moar/ast.nqp` stage) and 90% of the time is spent in run_alt

[17:51] <lizmat> yeah, that's doing a *lot* of processing

[17:51] <MasterDuke> 12s in NQP::src/QRegex/NFA.nqp:1044

[17:51] <lizmat> so that we don't have to

[17:52] <MasterDuke> ~25k lines in the files it processes

[17:53] <lizmat> it's producing a 32K line / 1.6 MB source file

[17:54] <MasterDuke> but i've never seen *any* nqp/rakudo code spend anywhere *near* that amount of time in run_alt

[17:54] <MasterDuke> is it something about the grammar in the script?

[17:55] <lizmat> MasterDuke: possibly

[17:56] <lizmat> I haven't really dared looking at that yet

[17:56] <MasterDuke> it's not a long script, only 440 lines, but i don't know grammars nearly well enough to tell if there's a slow spot

[18:03] *** kjp left
[18:10] <MasterDuke> well, https://github.com/rakudo/rakudo/blob/main/tools/build/raku-ast-compiler.nqp#L71-L87 is where in the script it spends the most time, but i don't know if that's useful information

[18:12] <lizmat> jnthn probably knows, but that looks like a pretty involved token :-)

[18:13] <japhb> moritz might be able to see the problem too, if he's accessible at all

[18:17] <japhb> Although I am kindof curious about the performance of something that combines | and || in one regex "expression"

[18:20] <ab5tract> lizmat: actually, no RakuAST-specific changes are needed

[18:20] <lizmat> yeah, that's what I was thinking  :-)

[18:21] <ab5tract> pretty slick!

[18:32] <Geth> ¦ rakudo/main: c6fb210a94 | (Stefan Seifert)++ | 3 files

[18:32] <Geth> ¦ rakudo/main: RakuAST: resolve generic lexicals in roles at compose time

[18:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c6fb210a94

[18:32] <Geth> ¦ rakudo/main: 1d609daf40 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[18:32] <Geth> ¦ rakudo/main: RakuAST: prohibit multiple is type traits on variables

[18:32] <Geth> ¦ rakudo/main: 

[18:32] <Geth> ¦ rakudo/main: Complains correctly about: my @a is Int is Str

[18:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1d609daf40

[18:42] <japhb> Stefan: What do allomorphs look like these days?

[18:43] <lizmat> m: dd <42>.isa(Allomorph)

[18:43] <camelia> rakudo-moar 4cec36b72: OUTPUT: «Bool::True␤»

[18:43] <lizmat> so: my @a is Allomorph

[18:43] <lizmat> or: my @a is IntStr

[18:44] <lizmat> m: dd <42e0>.isa(Allomorph)

[18:44] <camelia> rakudo-moar 4cec36b72: OUTPUT: «Bool::True␤»

[18:44] <japhb> TIL .isa()

[22:13] *** kjp joined
[22:17] <Geth> ¦ rakudo/is-item-redux: 0684f1c50d | ab5tract++ | src/Raku/ast/signature.rakumod

[22:17] <Geth> ¦ rakudo/is-item-redux: Add sigil exception for 'is item' to RakuAST

[22:17] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/commit/0684f1c50d

[22:18] <ab5tract> so there was one small detail missing for is item in RakuAST after all

[22:18] <ab5tract> now to bed&

[22:54] <ab5tract> Regarding the question in #raku-beginner re: matches… I sometimes wish there were a “direct-to-result” option that gave me the actual thing, instead of a match object representation of the thing. But maybe we already have that and I’m just unaware?

[23:41] <ab5tract> m: dd my Str() @g = “11 22” ~~ /(\d\d)\s(\d\d)/

[23:41] <camelia> rakudo-moar 1d609daf4: OUTPUT: «Str(Any) @g = Array[Str(Any)].new("11 22")␤»

[23:41] <ab5tract> m: dd my @g = “11 22” ~~ m/(\d\d)\s(\d\d)/

[23:41] <camelia> rakudo-moar 1d609daf4: OUTPUT: «Mu @g = [Match.new(:orig("11 22"), :from(0), :pos(5), :list((Match.new(:orig("11 22"), :from(0), :pos(2)), Match.new(:orig("11 22"), :from(3), :pos(5)))))]␤»

