[00:00] <ab5tract> I wonder if there is some sort of prize available for such intrepid code as can  trigger buffer overflows on the JVM

[00:01] <ab5tract> furthermore, is this an underlying JVM  change that made otherwise excellent NQP code fail

[00:02] <ab5tract> Or is this an underlying JVM change that surfaced an ugly truth in the NQP implementation

[00:03] <ab5tract> Tune in next week on ONLY THE KEPT PROMISE WILL EVER KNOW (tm)

[00:51] *** MasterDuke joined
[00:51] <MasterDuke> jdv++

[00:52] <MasterDuke> timo: amazing find on that jvm stuff. i was trying to make the jvm backend's runNFA faster by porting old moarvm optimizations, but that blows everything i was trying out of the water

[00:54] <MasterDuke> ab5tract, patrickb: i think the best long-term direction for the jvm backend is the truffle work pmurias started. it was showing *great* promise, but i didn't understand it well enough to continue it myself when he didn't have the time

[00:55] <MasterDuke> but i think it could give moarvm a run for its money, and enable near-seamless use of other languages libraries/modules/packages

[00:57] <Geth> ¦ rakudo/main: e1a77dc34d | (Daniel Green)++ | 3 files

[00:57] <Geth> ¦ rakudo/main: Use binding for all sub aliases

[00:57] <Geth> ¦ rakudo/main: 

[00:57] <Geth> ¦ rakudo/main: Using assignment doesn't cause a segfault if you multi the alias name

[00:57] <Geth> ¦ rakudo/main: anymore (what 998a1ef fixed in the past), but might as well make them

[00:57] <Geth> ¦ rakudo/main: all consistent.

[00:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e1a77dc34d

[00:57] <Geth> ¦ rakudo/main: 361cf23106 | MasterDuke17++ (committed using GitHub Web editor) | 3 files

[00:57] <Geth> ¦ rakudo/main: Merge pull request #5631 from MasterDuke17/use_binding_for_all_aliases

[00:57] <Geth> ¦ rakudo/main: 

[00:57] <Geth> ¦ rakudo/main: Use binding for all sub aliases

[00:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/361cf23106

[02:49] *** MasterDuke left
[06:49] *** sena_kun joined
[07:04] *** dawids joined
[07:08] *** dawids left
[07:24] *** sena_kun left
[07:39] *** finanalyst joined
[08:00] <nine> ab5tract: still looks good

[08:20] <Geth> ¦ nqp/main: 63731d9083 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[08:20] <Geth> ¦ nqp/main: Bump MoarVM for latest MasterDuke++ tweaks

[08:20] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/63731d9083

[08:41] <Geth> ¦ rakudo/main: bd85145ee8 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[08:41] <Geth> ¦ rakudo/main: Bump NQP for latest MasterDuke++ MoarVM tweaks

[08:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bd85145ee8

[09:00] *** finanalyst left
[11:04] <Geth> ¦ rakudo: lizmat self-assigned [rakuast-highlight] problems with =finish https://github.com/rakudo/rakudo/issues/5633

[11:12] <Geth> ¦ rakudo/main: c2c8d7a013 | ab5tract++ | 14 files

[11:12] <Geth> ¦ rakudo/main: [6.e] Provide `is revision-gated("6.x")` trait

[11:12] <Geth> ¦ rakudo/main: 

[11:12] <Geth> ¦ rakudo/main: This trait is primarily intended for allowing multi candidates

[11:12] <Geth> ¦ rakudo/main: to be considered for dispatch only when the caller's compiler

[11:12] <Geth> ¦ rakudo/main: version is above a certain revision.

[11:12] <Geth> ¦ rakudo/main: 

[11:12] <Geth> ¦ rakudo/main: By applying the trait to the proto at its minimum compatible

[11:12] <Geth> ¦ rakudo/main: <…commit message has 15 more lines…>

[11:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c2c8d7a013

[12:04] <Geth> ¦ rakudo/main: 778c7a63d2 | (Elizabeth Mattijsen)++ | 2 files

[12:04] <Geth> ¦ rakudo/main: RakuAST: last statement in ::CompUnit is not in sink context

[12:04] <Geth> ¦ rakudo/main: 

[12:04] <Geth> ¦ rakudo/main: because there's nothing to sink to.  This effectively ensures that

[12:04] <Geth> ¦ rakudo/main: the last statement in a ::CompUnit will have a closing semi-colon.

[12:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/778c7a63d2

[14:04] <patrickb> Master Duke: I agree that Truffle is the strategically best way forward for the JVM backend. Still I believe that Inline ::* is the better option for integrating different ecosystems. I think language ports to other VMs will always suffer from subtle incompatibilities. Inline::* sidesteps that issue entirely.

[14:08] <patrickb> Also I've never seen stuff similar to I::* in any other language. I::P5 is simply amazing.

[15:35] <ab5tract> I do wonder about how tricky it will be to hook into the JVM using NativeCall. There are a few missing pieces in current NativeCall that make it even straightforward libraries like raylib tricky to fully wrap.

[15:36] <ab5tract> I don’t intend to be discouraging in any way, I think Inline::Java would be an incredible thing to see

[15:40] <[Coke]> Is there a guide on implementing an Inline other than "Read ::P5"?

[15:40] <[Coke]> I also think .NET would get us some converts as well.

[15:41] <[Coke]> (and might be easier than nqp.NET)

[16:34] <ab5tract> [Coke]: it's definitely the reference implementation by which everything else must be built

[16:35] <ab5tract> as it more or less defines the expectations of an Inline:: module

[16:35] <ab5tract> so, that is to say, no there is no such guide

[17:40] *** guest555 joined
[17:51] <Geth> ¦ rakudo/main: 46d219b4c0 | (Timo Paulssen)++ | src/vm/moar/ops/perl6_ops.c

[17:51] <Geth> ¦ rakudo/main: spell out MVMROOT macro for now for compatibility

[17:51] <Geth> ¦ rakudo/main: 

[17:51] <Geth> ¦ rakudo/main: Moar just changed the macro definition, with this change we

[17:51] <Geth> ¦ rakudo/main: don't need to tiptoe around required revisions and bumpings

[17:51] <Geth> ¦ rakudo/main: and such.

[17:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/46d219b4c0

[18:06] <lizmat> timo: a simple recompile yields a broken raku installation, at least for me

[18:07] * lizmat nukes the install dir

[18:07] <lizmat> and runs Configure again

[18:09] <timo> uhhhh ok let me see

[18:10] <timo> how broken exactly is it?

[18:10] <lizmat> % raku               

[18:10] <lizmat> zsh: killed     raku

[18:10] <timo> i can "make test" just fine

[18:10] <timo> ah

[18:12] <Geth> ¦ rakudo/main: e94758306b | (Timo Paulssen)++ | src/vm/moar/ops/perl6_ops.c

[18:12] <Geth> ¦ rakudo/main: Fix copy-pasto from previous commit

[18:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e94758306b

[18:12] <timo> sorry for the noise

[18:12] <timo> thanks for catching it so quickly

[18:19] <lizmat> % raku

[18:19] <lizmat> zsh: killed     raku

[18:19] * lizmat nukes install again

[18:21] <timo> any chance you could get me a stack trace?

[18:21] <lizmat> alas, no

[18:21] <timo> can you "lldb raku" then "run" or something?

[18:22] <lizmat> I've gotten so used to crashes after rebuilding core setting, that I don't spend any time on it anymore, I just nuke everything

[18:22] <lizmat> I think you should be able to reproduced by checking out 778c7a63d2

[18:22] <linkable6> (2024-08-30) https://github.com/rakudo/rakudo/commit/778c7a63d2 RakuAST: last statement in ::CompUnit is not in sink context

[18:23] <lizmat> then build from there (with Configure.pl)

[18:23] <lizmat> then advance to 46d219b4c0

[18:23] <linkable6> (2024-08-30) https://github.com/rakudo/rakudo/commit/46d219b4c0 spell out MVMROOT macro for now for compatibility

[18:23] <lizmat> and run "make install"

[18:25] <timo> ok, i'm using --gen-moar and currently building nqp

[18:25] <timo> by "build from there" you also mean "make" right?

[18:26] <lizmat> perl Configure.pl --gen-moar --make-install; actually

[18:27] <timo> ok

[18:28] <timo> well, 46d219b4c0 was wrong and e94758306b should be fixed compared to that

[18:28] <linkable6> (2024-08-30) https://github.com/rakudo/rakudo/commit/46d219b4c0 spell out MVMROOT macro for now for compatibility

[18:28] <linkable6> (2024-08-30) https://github.com/rakudo/rakudo/commit/e94758306b Fix copy-pasto from previous commit

[18:32] <timo> i followed the steps you gave me and am currently running "make spectest" and getting lots of "ok"

[18:32] <lizmat> ok, how is "raku" in your path ?

[18:33] <timo> ./install/bin/raku -e 'say "hi"'; that lies under /tmp/tmp.suz2KelKdL/rakudo/

[18:33] <lizmat> ok, how is "raku" in your PATH  :-)

[18:34] <timo> that's from ~/raku/prefix/bin/raku and it's also happy

[18:35] <lizmat> I don't have a ~/raku ?

[18:35] <timo> yeah that's mine

[18:35] <timo> i made a clean clone of raku, nqp, and moarvm under /tmp/blah and used Configure.pl --gen-moar there

[18:36] <timo> to make sure that even if my ~/raku/ stuff has any changes you don't have, it doesn't cause trouble wtih reproducing the crash

[18:37] <lizmat>  /Users/liz/Github/rakudo/install/bin is in my path

[18:37] <timo> my $PATH raku has Rakudo™ v2024.08-6-g778c7a63d / MoarVM version 2024.08-6-gf2dcdcae0. and my freshly made raku has Rakudo™ v2024.08-6-g778c7a63d / MoarVM version 2024.08-5-g2b5dcaee9.

[18:37] <lizmat> well, then I give up  :-(

[18:38] <timo> but you can build a raku that runs after cleaning your install from the newest rakudo commit?

[18:38] <timo> rakudo's CI is happy with the latest commit, including the macos job

[18:39] <lizmat> yeah, that's my point: that's why I nuke install and build from scratch, just like CI does

[18:39] <timo> oh

[18:40] <timo> one of these days i need to come visit you again maybe we can figure it out when sitting at the same table

[18:40] <lizmat> sounds like a plan to me  :-)

[18:41] <lizmat> it is mightily annoying to the point I've all but automated installing zef and all the modules that I need, so that it only takes 2 minutes or so and no interventionn

[18:41] <timo> right

[18:49] *** sena_kun joined
[18:54] <ab5tract> I recently discovered that rakubrew can point the shim towards a local checkout

[18:54] <ab5tract> The only caveat is that I need to incorporate make install into my ‘make-rakudo’ shell function (which I still haven’t done, but easy enough)

[19:00] *** guest555 left
[19:07] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: 81d43af66e | (Timo Paulssen)++ | tools/build/raku-ast-compiler.nqp

[19:07] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: drastically speed up raku-ast-compiler.nqp

[19:07] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: 

[19:07] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: Terminating the LTM immediately after opening paren, bracket, or

[19:07] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: brace prevents the NFA from running all the way to the end of the

[19:07] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: file whenever it encounters an nqp-code token. This makes nqp-m

[19:07] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: finish the raku-ast-compiler in 4 seconds instead of 1600, and moar

[19:07] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: is a bit faster, too (but already plenty fast)

[19:07] <Geth> ¦ rakudo/raku-ast-compiler-shorter-LTM: review: https://github.com/rakudo/rakudo/commit/81d43af66e

[19:08] <Geth> ¦ rakudo: timo++ created pull request #5635: drastically speed up raku-ast-compiler.nqp

[19:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5635

[19:08] <timo> the push was just a rebase on latest main. now there's a pull request to go with it

[19:13] <timo> coolroot is now merged inside moarvm \o/

[19:20] <Geth> ¦ nqp/main: c450b5b96d | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[19:20] <Geth> ¦ nqp/main: Bump MoarVM for Timo's MVMROOT changes

[19:20] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/c450b5b96d

[19:31] <Geth> ¦ rakudo/main: 23da1ce118 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[19:31] <Geth> ¦ rakudo/main: Bump Nqp for Timo's MoarVM MVMROOT changes

[19:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/23da1ce118

[19:36] <lizmat> hmmmm make test / spectest are ok

[19:36] <lizmat> but now the REA harvester is broken

[19:37] <lizmat> % raku -e 'use Ecosystem::Archive::Update'

[19:37] <lizmat> zsh: segmentation fault  raku -e 'use Ecosystem::Archive::Update

[19:39] <lizmat> https://gist.github.com/lizmat/afa393276e21274066e93dd88c0512ef

[19:44] <ab5tract> We do kind of need blin-as-a-service, eh?

[19:44] <ab5tract> not an automated CI/CD, but a big red button to press once and a while

[19:48] <lizmat> if you mean jdv  ?

[19:49] <lizmat> looks like the zef installation problem was caused by a borked Staging module, fixed now

[19:57] <ab5tract> lizmat: no, I do not mean jdv should be considered blin-as-a-service :)

[19:57] <ab5tract> I'm saying that it was two and a half pains in the butt to get blin running on my laptop

[19:58] <ab5tract> It would be infinitely better to have the option to, for example, kick off a blin run based on the new MVMROOT changes

[19:58] <ab5tract> that "anyone" could initiate, with ease and minimal fuss

[19:59] <ab5tract> that way we might get additional data points on what is broken and how

[19:59] <lizmat> sadly, I don't know of such a button  :-(

[20:02] <ab5tract> there's got to be some kind of at-will pipeline option in github

[20:02] <ab5tract> I'll look into it

[20:03] <ab5tract> It would be interesting just to find out what it costs to do a blin on azure

[20:06] <patrickb> ab5tract: Re raylib vs NativeCall, that's just because moar currently doesn't accept externally spawned threads. Incidentally fixing that is also on my to-do list (though way above) :-D

[20:08] <patrickb> If it interests someone, I have my to-do list on the webs: https://boekernet.de/~patrick/finger.txt

[20:10] <[Coke]> (blin on azure) I could give that a shot. I had been using azure to test some windows stuff ocassionally, but setting up a linux vm for blin should be triviail)

[20:12] <ab5tract> [Coke]: that would be awesome

[20:13] <ab5tract> I'd even cover the costs of running it, assuming we can put a cap on it to ensure that we never go above $x/month

[20:14] <ab5tract> patrickb: ah, yeah there is that part indeed! For some reason I recall there being another really annoying thing to try and work around that was more API related, but I admit at the moment it completely escapes me

[20:15] <patrickb> Non pointer structs is impossible to do ATM iirc

[20:15] <ab5tract> that's a big one, yeah

[20:16] <ab5tract> ISTR nine had some ideas for a big NativeCall refresh that would cover that and some other issues

[20:16] <ab5tract> one step at a time, I guess :)

[20:16] <ab5tract> I wonder what macros might add to the binding story, if anything

[20:18] <[Coke]> is ubuntu a reasonable choice for blin?

[20:18] <[Coke]> (any 64bit linux, seems)

[20:18] <ab5tract> one second, let me see what I was using locally

[20:19] <ab5tract> [Coke] Apparently I was using debian/bookworm-slim as an image

[20:19] <ab5tract> which indicates that ubuntu would indeed be a fine fit

[20:20] <ab5tract> patrickb: `my $image   = image-text('*', 32, $white);` <--- snowfall simulator is stuck in ASCII

[20:21] <ab5tract> I couldn't get the cascade of function calls required to use unicode to work correctly. I have a feeling that it's the struct issue you mentioned..

[20:23] <[Coke]> The estimated cost isn't worth complaining about at this point, let me see if I can get something started.

[20:26] <ab5tract> [Coke]: awesome!

[20:27] <ab5tract> patrickb: it is indeed... the Font struct does not seemed to be referenced via pointer in raylib

[20:27] <ab5tract> curse me and my lack of knowledge in this domain.. I would love to be able to fix this

[20:28] <ab5tract> [Coke]: regarding cost, I believe blin took something like 8-12 hours on (a docker image) on my M2

[20:29] <ab5tract> but let's see how it goes

[20:30] <[Coke]> I couldn't get it to even run on docker on my m2. :)

[20:30] <patrickb> ab5tract: Can't do everything at once. One thing after the other. I for one will work on the debugger for the next few months at least. Then the next thing. :-)

[20:31] <ab5tract> patrickb: I hear that indeed

[20:31] <patrickb> On that note, I'm still searching for a good name. ladybug is sadly taken.

[20:31] <ab5tract> which is why I'm bemoaning my lack of ABI skillz :)

[20:31] <[Coke]> installing build tools but heading afk for a bit. Keeping pinging me, I'll get it setup.

[20:31] <ab5tract> [Coke]: regarding that, https://github.com/ab5tract/Blin/commit/d9bc2d4778ff4bb2f042cb761e2c503627458a4b

[20:32] <[Coke]> ... ok, on to building rakudo

[20:32] <patrickb> Currently I'm pondering "rad" the RAku Debugger. Unsure if that word is too overloaded already though.

[20:33] <ab5tract> [Coke]: the most relevant non-arm64 thing in there is the `single-revision` stuff: this is more or a less a must-have for the concept of the Big Red Blin Button

[20:34] <ab5tract> patrickb: I knew a Radmila once, and she was a lovely person. Always thought it was a cool name too

[20:35] <ab5tract> (re: single-revision -- it allows you to specify a commit that isn't necessarily merged yet)

[20:40] <ab5tract> &sleep \o

[22:17] *** sena_kun left
