[07:55] <patrickb> I'm especially impressed with the reliability improvements sprinkled in between (there have been many thread unsafe places in the mop that are now tightened up). lizmat++

[09:43] *** sena_kun joined
[09:56] *** sena_kun left
[10:32] <Geth> ¦ nqp/main: 9b9610ab0c | (Elizabeth Mattijsen)++ | src/QRegex/NFA.nqp

[10:32] <Geth> ¦ nqp/main: Streamline QRegex::NFA.quant

[10:32] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/9b9610ab0c

[10:47] <lizmat> meh, broke 1 rakudo test

[10:57] <Geth> ¦ nqp/main: faf77024d3 | (Elizabeth Mattijsen)++ | src/QRegex/NFA.nqp

[10:57] <Geth> ¦ nqp/main: Fix regression in QRegex::NFA.quant

[10:57] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/faf77024d3

[11:41] <Geth> ¦ nqp/main: 957cd6095e | (Elizabeth Mattijsen)++ | src/QRegex/NFA.nqp

[11:41] <Geth> ¦ nqp/main: Streamline QRegex::NFA some more

[11:41] <Geth> ¦ nqp/main: 

[11:41] <Geth> ¦ nqp/main: - qastnode

[11:41] <Geth> ¦ nqp/main: - subcapture

[11:41] <Geth> ¦ nqp/main: - save

[11:41] <Geth> ¦ nqp/main: - mergesubrule

[11:41] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/957cd6095e

[12:46] <Geth> ¦ nqp/main: f01d1a8197 | (Elizabeth Mattijsen)++ | src/QRegex/NFA.nqp

[12:46] <Geth> ¦ nqp/main: Streamline QRegex::NFA some more

[12:46] <Geth> ¦ nqp/main: 

[12:46] <Geth> ¦ nqp/main: - run

[12:46] <Geth> ¦ nqp/main: - run_alt

[12:46] <Geth> ¦ nqp/main: - generic

[12:46] <Geth> ¦ nqp/main: - instantiate_generic

[12:46] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/f01d1a8197

[12:57] <lizmat> meh, broke 2 tests

[12:59] <Geth> ¦ nqp/main: 0b12b4e9b5 | (Elizabeth Mattijsen)++ | src/QRegex/NFA.nqp

[12:59] <Geth> ¦ nqp/main: Fix regression in QRegex::NFA.mergesubrule

[12:59] <Geth> ¦ nqp/main: 

[12:59] <Geth> ¦ nqp/main: The rule can also be a QAST::Var, not just a str

[12:59] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/0b12b4e9b5

[13:04] *** timo left
[13:21] *** timo joined
[14:11] *** lizmat_ joined
[14:14] *** lizmat left
[14:14] *** samebchase left
[14:14] *** samebchase joined
[14:25] *** lizmat_ left
[14:25] *** lizmat joined
[16:05] <Geth> ¦ nqp/main: faaef56db7 | (Elizabeth Mattijsen)++ | src/QRegex/NFA.nqp

[16:05] <Geth> ¦ nqp/main: Streamline QRegex::NFA.optimize

[16:05] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/faaef56db7

[17:27] <Geth> ¦ nqp/main: 8b69223959 | (Elizabeth Mattijsen)++ | 2 files

[17:27] <Geth> ¦ nqp/main: Create nqp::const::EDGE_xxx connstants

[17:27] <Geth> ¦ nqp/main: 

[17:27] <Geth> ¦ nqp/main: To allow them to be used in QRegex::NFA, instead of locally defined

[17:27] <Geth> ¦ nqp/main: integer variables set at runtime

[17:27] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/8b69223959

[17:27] <Geth> ¦ nqp/main: 784bc37ce5 | (Elizabeth Mattijsen)++ | 10 files

[17:27] <Geth> ¦ nqp/main: Bootstrap NQP, to make nqp::const::EDGE_xxx constants

[17:27] <Geth> ¦ nqp/main: 

[17:27] <Geth> ¦ nqp/main: work in NQP while building NQP

[17:27] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/784bc37ce5

[17:29] <Geth> ¦ nqp/main: 5293014f91 | (Elizabeth Mattijsen)++ | src/QRegex/NFA.nqp

[17:29] <Geth> ¦ nqp/main: Use nqp::const::EDGE_xxx constants

[17:29] <Geth> ¦ nqp/main: 

[17:29] <Geth> ¦ nqp/main: instead of locally defined ints that are set at runtime

[17:29] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/5293014f91

[17:53] <Geth> ¦ rakudo/main: 9d193cedeb | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[17:53] <Geth> ¦ rakudo/main: Bump NQP to get a lot of streamlining tweaks

[17:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9d193cedeb

[18:14] <Geth> ¦ nqp/main: dc8c656412 | (Elizabeth Mattijsen)++ | src/how/NQPClassHOW.nqp

[18:14] <Geth> ¦ nqp/main: Make the value generator only run if really needed

[18:14] <Geth> ¦ nqp/main: 

[18:14] <Geth> ¦ nqp/main: Since the value generator can be relatively expensive, make sure

[18:14] <Geth> ¦ nqp/main: it only runs if it is really necessary: namely when the key is

[18:14] <Geth> ¦ nqp/main: really not in the cache after having unique access to it.

[18:14] <Geth> ¦ nqp/main: 

[18:14] <Geth> ¦ nqp/main: Also, the value generator may have race conditions of its own,

[18:15] <Geth> ¦ nqp/main: so it feels better to have this run inside the protected block.

[18:15] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/dc8c656412

[18:35] *** notna joined
[18:36] *** sena_kun joined
[18:39] <Geth> ¦ nqp/main: db750bb2ad | (Elizabeth Mattijsen)++ | src/how/NQPClassHOW.nqp

[18:39] <Geth> ¦ nqp/main: Don't re-check for given key if it didn't exist

[18:39] <Geth> ¦ nqp/main: 

[18:39] <Geth> ¦ nqp/main: This optimization appears to have negative performance impact.

[18:39] <Geth> ¦ nqp/main: So the value generator *may* run twice for the same key, *but*

[18:39] <Geth> ¦ nqp/main: it will still run in a protected block.

[18:39] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/db750bb2ad

[18:55] <Geth> ¦ rakudo/main: 2a76a52413 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[18:55] <Geth> ¦ rakudo/main: Bump NQP to get cache changes

[18:55] <Geth> ¦ rakudo/main: 

[18:55] <Geth> ¦ rakudo/main: The value generator will now run inside the protected block, to

[18:55] <Geth> ¦ rakudo/main: prevent crashes from race conditions within the value generator.

[18:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2a76a52413

[19:20] *** notna left
[22:48] *** sena_kun left
