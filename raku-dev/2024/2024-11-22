[00:35] <ab5tract> Needed to poke the optimizer as well of course

[01:30] *** librasteve_ left
[08:44] *** sena_kun joined
[09:39] <Geth> Â¦ rakudo/main: c972df6865 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Supply-coercers.rakumod

[09:39] <Geth> Â¦ rakudo/main: Allow a value of 0 with :vent-at

[09:39] <Geth> Â¦ rakudo/main: 

[09:39] <Geth> Â¦ rakudo/main: Hopefully fixing #5358

[09:39] <Geth> Â¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c972df6865

[09:57] *** sena_kun left
[10:05] <Geth> Â¦ rakudo/main: a917cf0321 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.rakumod

[10:05] <Geth> Â¦ rakudo/main: Don't use ANSI color in error messages always

[10:05] <Geth> Â¦ rakudo/main: 

[10:05] <Geth> Â¦ rakudo/main: but also stop doing that if STDERR is not a TTY.  Fixes #5867

[10:05] <Geth> Â¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a917cf0321

[10:07] <Geth> Â¦ rakudo/main: fa72e6be9c | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[10:07] <Geth> Â¦ rakudo/main: Make sure test compiles without RakuAST

[10:07] <Geth> Â¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fa72e6be9c

[10:08] <lizmat> meh #5687, not 5867

[10:39] *** librasteve_ joined
[14:31] <ab5tract> when it comes to patching optimizer, which do you reckon is preferrable? https://gist.github.com/ab5tract/676be98f9b24c2a357cb06cafa7bf207

[14:31] <ab5tract> my gut says the all-QAST option is better?

[14:40] <vrurg> ab5tract: The less code to execute you leave for the runtime â€“ the better. Therefore all-QAST is worse, in my view.

[14:40] <ab5tract> ok, fair

[14:42] <ab5tract> it wasn't clear to me if the over-head of doing it in the optimizer might be larger than the check in QAST

[14:42] <ab5tract> "it" meaning the check

[14:45] <vrurg> The optimizer is executed once, at compile time. While the code it produces might end up in a hot path of runtime.

[14:49] <ab5tract> seems pretty obvious when you put it that way :)

[14:49] <ab5tract> my defense is that I've gotten 4 or less hours of sleep for the last week ðŸ˜…

[14:58] <vrurg> It takes time to wrap one's head around this stuff anyway. But then it clicks at some point...

[15:27] <ab5tract> vrurg: I guess the only potential issue is whether there could ever be a scenario where the lexical `$?LANGUAGE-REVISION` could be different than the revision of the compiler that is doing the optimizing?

[15:28] <ab5tract> I think it's highly unlikely, but as demonstrated my brain isn't 100% reliable at the moment

[15:33] <vrurg> You just should rely on compiler's interface for this.

[15:38] <vrurg> But, anyway, I can think of a scenario where QAST passed into optimizer is created with different compiler version, but it involves so much of handwork that I barely can figure out why would someone ever need this.

[15:43] <ab5tract> got it, thanks!

[16:03] <donaldh> timo: tbrowder: could someone set up a wordpress advent account for me?

[16:11] *** rba joined
[16:11] <Geth> Â¦ rakudo/fix-negated-junctions: 72a7ef2996 | ab5tract++ | 5 files

[16:11] <Geth> Â¦ rakudo/fix-negated-junctions: Address long-standing discrepancy for != and METAOP_NEGATE

[16:11] <Geth> Â¦ rakudo/fix-negated-junctions: 

[16:11] <Geth> Â¦ rakudo/fix-negated-junctions: This patch uses revision-gate to migrate v6e to a version of

[16:11] <Geth> Â¦ rakudo/fix-negated-junctions: negation that preserves junctions while accomplishing the same

[16:12] <Geth> Â¦ rakudo/fix-negated-junctions: underlying functionality as planting `not` in front of `$expr`.

[16:12] <Geth> Â¦ rakudo/fix-negated-junctions: 

[16:12] <Geth> Â¦ rakudo/fix-negated-junctions: Previously:

[16:12] <Geth> Â¦ rakudo/fix-negated-junctions: <â€¦commit message has 17 more linesâ€¦>

[16:12] <Geth> Â¦ rakudo/fix-negated-junctions: review: https://github.com/rakudo/rakudo/commit/72a7ef2996

[16:12] <Geth> Â¦ rakudo: ab5tract++ created pull request #5690: Address long-standing discrepancy for != and METAOP_NEGATE

[16:12] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5690

[16:16] <lizmat> donaldh: what WP username do you have?  or what email address should I use ?

[16:17] <lizmat> donaldh ?   in that case, you should have gotten an invite

[16:20] <donaldh> lizmat: my WP username is donaldhunter 

[16:21] <lizmat> invite sent

[16:21] <donaldh> ty lizmat++

[18:41] <timo> huh, libuv has tty support that translates ansi escape sequences in what you output to the equivalent on windows?

[18:41] <timo> https://docs.libuv.org/en/v1.x/guide/utilities.html#tty

[18:43] <lizmat> oooooh!

[18:50] <timo> less necessary now that Windows Terminal or whatever it's called is Out There, but nonetheless ...

[20:07] <timo> lizmat: is there another change needed to make the ==Sorry!== text also not spit out ansi escape sequences?

[21:33] *** sena_kun joined
[22:14] *** sena_kun left
