[00:44] *** vrurg_ joined
[00:45] *** vrurg left
[00:47] *** vrurg joined
[00:48] *** vrurg_ left
[00:49] *** vrurg_ joined
[00:52] *** vrurg left
[02:07] *** MasterDuke joined
[02:12] <coleman> nine++

[05:52] *** kjp left
[05:54] *** kjp joined
[05:55] *** sena_kun joined
[06:02] *** kjp left
[06:02] *** kjp joined
[06:51] *** sena_kun left
[08:10] <Geth> ¦ nqp/main: 55c4f01e2b | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[08:10] <Geth> ¦ nqp/main: Bump MoarVM for in situ grapheme optimization

[08:10] <Geth> ¦ nqp/main: 

[08:10] <Geth> ¦ nqp/main: MasterDuke++

[08:10] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/55c4f01e2b

[08:11] <nine> Looks like the test at t/spec/S09-typed-arrays/native-shape1-str.t:32 is incredibly flakey. It's dies-ok { @arr[5] }; with @arr being a shaped string array with only 5 slots, so the access is out of bounds. @arr[5] does not explode right away. Instead it gives you a StrPosRef which is akin to a Scalar container. And only if you actually try to use this reference in any way it will explode.

[08:13] <nine> Notice however that we don't use that value for anything, i.e. it's just sunk. Seems like slight changes in code gen will decide whether it dies or not.

[08:13] <nine> m: my @a := array[str].new(:shape(5)); @a[5];

[08:13] <camelia> rakudo-moar 934e86105: ( no output )

[08:13] <nine> m: my @a := array[str].new(:shape(5)); sink @a[5];

[08:13] <camelia> rakudo-moar 934e86105: OUTPUT: «Index 5 for dimension 1 out of range (must be 0..4)␤  in block <unit> at <tmp> line 1␤␤»

[08:13] <Geth> ¦ rakudo/rakuast-phase-cleanup: 808c622f42 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[08:13] <Geth> ¦ rakudo/rakuast-phase-cleanup: RakuAST: also ensure that $?CLASS ::CLASS type captures are always declared

[08:13] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/commit/808c622f42

[08:18] <lizmat> nine: then I suggest we change the test  :-)

[08:21] <Geth> ¦ rakudo/main: 9e1adaeead | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[08:21] <Geth> ¦ rakudo/main: Bump NQP for in situ grapheme optimization on MoarVM

[08:21] <Geth> ¦ rakudo/main: 

[08:21] <Geth> ¦ rakudo/main: MasterDuke++

[08:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9e1adaeead

[09:00] <Geth> ¦ rakudo/main: a8745fe878 | (Stefan Seifert)++ | src/vm/moar/dispatchers.nqp

[09:00] <Geth> ¦ rakudo/main: Ensure that sunk failed lookups in native arrays always explode

[09:00] <Geth> ¦ rakudo/main: 

[09:00] <Geth> ¦ rakudo/main: dies-ok { @arr[2] }; with @arr being a shaped string array with only 1 slot did

[09:00] <Geth> ¦ rakudo/main: not always explode because the raku-sink dispatcher only really called

[09:00] <Geth> ¦ rakudo/main: the sink method on the value if it is not Mu's. Without trying to

[09:00] <Geth> ¦ rakudo/main: dereference the StrPosRef in any way the exception would never got

[09:00] <Geth> ¦ rakudo/main: thrown. Fix by special casing NativeRefHOW in raku-sink to make that

[09:00] <Geth> ¦ rakudo/main: spec test less reliant on precise code gen.

[09:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a8745fe878

[09:01] <nine> lizmat: I think this ^^^ is the better way

[09:01] <lizmat> works for me  :-)

[09:07] <Geth> ¦ rakudo/rakuast-phase-cleanup: 51 commits pushed by (Jonathan Worthington)++, (Stefan Seifert)++

[09:07] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/compare/808c622f4283...0bde6ae8810b

[11:23] <[Tux]> Rakudo v2024.07-7-ga8745fe87 (v6.d) on MoarVM 2024.07-4-g4731ec695

[11:23] <[Tux]> csv-test-xs-20      0.141 -  0.141

[11:23] <[Tux]> test-t --race       0.255 -  0.258

[11:23] <[Tux]> csv-ip5xs           0.254 -  0.256

[11:23] <[Tux]> test-t              0.395 -  0.403

[11:23] <[Tux]> csv-ip5xs-20        1.092 -  1.119

[11:23] <[Tux]> test-t-20 --race    1.154 -  1.159

[11:24] <[Tux]> csv-parser          1.476 -  1.493

[11:24] <[Tux]> test                1.828 -  1.890

[11:24] <[Tux]> test-t-20           4.849 -  4.892

[11:24] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[11:31] <lizmat> nice!   MasterDuke ^^  :-)

[11:32] <lizmat> m: say 0.395 / 0.399

[11:32] <camelia> rakudo-moar a8745fe87: OUTPUT: «0.989975␤»

[11:32] <lizmat> a 1% gain...  :-)

[11:32] <lizmat> all the little bits help!

[11:33] * [Tux] just returned from 1½ weeks of Wales. Overwhelmingly beautiful!

[11:35] <lizmat> yeah.. Wales is nice!  :-)

[11:35] <lizmat> looking forward to going to Cardiff end of October

[11:38] <[Tux]> Cardiff was the least inspoiring place we visited. Drive on for 40 minutes and visit Tenby instead

[11:39] <lizmat> indeed.. but as you said, Tenby is a 40 minute drive from there, from here it's quite a bit longer  :-)

[11:40] <[Tux]> *lots* of roadworks in UK, calculate delays

[12:01] *** greenfork left
[12:01] *** patrickb left
[12:02] *** greenfork joined
[12:02] *** patrickb joined
[12:21] <lizmat> one of the stranger compilation errors I've run into recently:

[12:21] <lizmat> m: sub a(*%_) { if .a -> $a { b %_ } }

[12:21] <camelia> rakudo-moar a8745fe87: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Placeholder variable '%_' cannot override existing signature␤at <tmp>:1␤------> sub a(*%_) { if .a ⏏-> $a { b %_ } }␤»

[12:21] <lizmat> take away the -> $a  and it correctly complains about "b" not being defined

[12:21] <lizmat> m: sub a(*%_) { if .a  { b %_ } }

[12:21] <camelia> rakudo-moar a8745fe87: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    b used at line 1␤␤»

[12:23] <lizmat> m: if .a -> $a { b %_ }   # even shorter golf

[12:23] <camelia> rakudo-moar a8745fe87: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Placeholder variable '%_' cannot override existing signature␤at <tmp>:1␤------> if .a ⏏-> $a { b %_ }   # even shorter golf␤»

[12:25] <lizmat> I guess some sort of scoping issue with resolving %_

[12:26] <lizmat> using a different name, and all is ok

[14:01] *** [Tux] left
[14:09] *** [Tux] joined
[17:33] <ab5tract> Do we have any way to output ANSI codes as-is? I’m trying to move up $n lines and to the beginning of the line but it’s not working (probably because it begins with \x , which appropriated for other uses)

[17:34] *** dawids joined
[17:34] *** dawids left
[17:38] <lizmat> you mean, remove the ANSI codes before display?

[17:53] <ab5tract> What I mean is that we appear to support a very truncated subset of the available vt100 codes that are available in bash or C printf

[17:53] <lizmat> I don't think we support any out of the box ?

[17:55] <ab5tract> We support a small subset of ANSI codes. I was hoping we had a pass-through option but it looks like I will need to bring in Terminal::Print to get what I need

[17:55] <ab5tract> But even there I don’t think I did the work to make this particularly simple

[17:56] <ab5tract> What I’m looking for is essentially a multi-line approach to using \r

[17:56] <lizmat> I guess I need a gist with code and expected output to grok

[18:09] *** sena_kun joined
[18:10] <[Coke]> m: say "3\r4"

[18:10] <camelia> rakudo-moar a8745fe87: OUTPUT: «3

[18:10] <[Coke]> locally that prints 4

[18:11] <lizmat> if you looked very carefully and quickly, you'd seen a 3 as well  :-)

[18:11] <lizmat> m: say "33\r4"

[18:11] <camelia> rakudo-moar a8745fe87: OUTPUT: «33

[18:12] <lizmat> print 43 locally  :-)

[18:20] <ab5tract> Yeah, but \r is only for the current line. Anyway, managed to re-grok my own library enough to utilize Terminal::Print :)

[18:20] <lizmat> yeah, re-grokking is hard sometimes

[19:08] <ab5tract> Some jerk didn’t finish documenting the thing ;)

[21:31] *** finanalyst joined
[21:38] *** sena_kun left
[22:16] *** finanalyst left
