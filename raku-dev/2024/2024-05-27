[00:50] *** coleman left
[00:50] *** coleman joined
[00:54] *** coleman left
[00:54] *** coleman joined
[00:54] *** coleman left
[00:58] *** coleman joined
[01:06] *** coleman left
[01:07] *** coleman joined
[07:45] *** sena_kun joined
[07:53] <ab5tract> Currently dd on RakuAST calls deparse. This feels slightly contrary to the expectations that dd gives back the “nitty gritty”

[08:24] <ab5tract> Ahh… it’s probably arriving there via .raku, which does make sense to be calling deparse.. hmm

[08:25] <ab5tract> (All thoughts arriving from my phone, where it’s harder to properly verify these statements)

[08:26] <lizmat> fwiw, dd checks specifically for RakuAST::Node

[08:26] <lizmat> and then deparses

[08:26] <nine> Well actually.... as quoted yesterday raku should "return a perlish representation of the object, so that calling EVAL on the returned string reproduces the object as accurately as possible". But EVALing the DEPARSE result does not result in those AST nodes getting re-created. It results in the result of running the Raku code.

[08:27] <lizmat> the reason for it is that say of any RakuAST::Node class, will produce the RakuAST classes in a .raku style

[08:27] <lizmat> having dd do that as well, felt sub-optimal

[08:28] <nine> And dd being really just a debugging tool with no elaborate specs it can do just whatever it wants to :)

[08:32] <ab5tract> That behavior of say is defined by what we currently do in RakuAST::Node.gist, IIUC

[08:33] <ab5tract> Anyway, not complaining or saying it’s wrong, only that I was a bit surprised :)

[08:33] <lizmat> well, maybe the .gist should become .raku and vv

[08:39] <ab5tract> it’s maybe a bit more aligned to expectations. for me at least the flow generally goes: “ah, ‘say $foo’ isn’t giving me all the info I need/expected. Let’s switch to ‘dd $foo’.”

[08:40] <ab5tract> Well, really I’m already using ‘dd’, but you get the idea ;)

[08:41] <ab5tract>  It’s doesn’t come as naturally to think ‘dd is omitting details, let’s try say’

[08:43] <ab5tract> But all of this begs a different question: if we are feeling iffy about including Q.AST, are we going to provide a different mechanism for converting expressions to RakuAST?

[08:44] <lizmat> I think the consensus is that QAST us going to stay, as an intermediate to producing bytecode on different backends

[08:44] <lizmat> *is

[08:44] <ab5tract> Ah, I meant Q the quoting function :)

[08:44] <lizmat> ahh  oops

[08:44] <lizmat> ok

[08:45] <lizmat> well, maybe it should be renamed to .RakuAST   but then  we also have .IO which coerces to IO::Path

[08:45] <nine> ab5tract: .AST is really just some sugar for running the compiler with :target<ast>

[08:45] <lizmat> so...

[08:46] <ab5tract> nine: it’s pretty tasty sugar though :)

[08:47] <nine> For someone actively working on RakuAST itself yes. Is there really a case for this beeing appropriate huffmanization in general though?

[08:49] <ab5tract> I shared it in #raku to a user who wants to create a signature with the same parameters as another signature and has been having some issues doing that via the OO interfaces

[08:51] <ab5tract> FWIW I could definitely see creating scaffolding via .AST in order to twiddle things around becoming a fairly standard interaction mode

[08:53] <ab5tract> Maybe it deserves a problem solving ticket though, to gather wider feedback..

[09:08] <nine> I'm all for making it easy to create ASTs, especially given that they will play a large role in macros. I just think that a method on Cool is the wrong place for it. Would you expect it to be there if it wasn't already? Would you look in the docs for Cool for something like this?

[09:10] <nine> Also "any string can turn itself into an AST of code contained in this string" feels just off. Almost all strings will _not_ contain Raku code. Even if AST manipulation will become super common, compared to all other usages of strings using them for turning code into AST will still be exceptionally rare.

[09:12] <nine> I think $*RAKU.compiler.to-ast($code) would still be nice enough

[09:15] <nine> It still confuses me again and again that you can't actually use $*RAKU.compiler to...well....compile!

[09:18] <ab5tract> Ah, as a method on Cool, no, that doesn’t really feel appropriate, no :)

[09:20] <ab5tract> But perhaps potentially as an adverb to Q?

[09:21] <ab5tract> Using $*RAKU.compiler also seems fine, but I would expect anything beyond light usage would immediately result in a wrapper sub :)

[09:22] <nine> Which would be fine

[09:24] <ab5tract> Sure! though it reminds me a bit of the situation surrounding &say in Perl 5. Still can’t enable it by default after all these years (but then again, that’s nothing next to some of their other things that can’t be enabled by default after all these years)

[09:27] *** finanalyst joined
[09:28] <ab5tract> Thanks for clarifying the situation with with .AST though. For some boneheaded reason I had assumed it was implemented via Q, not on the (super) class outputted by Q :)

[09:29] *** sena_kun left
[09:58] *** finanalyst left
[10:02] *** quotable6 left
[10:02] *** committable6 left
[10:02] *** releasable6__ left
[10:02] *** greppable6 left
[10:02] *** evalable6 left
[10:02] *** bisectable6 left
[10:02] *** notable6 left
[10:02] *** coverable6 left
[10:02] *** tellable6 left
[10:02] *** shareable6 left
[10:02] *** benchable6 left
[10:02] *** linkable6 left
[10:02] *** nativecallable6 left
[10:02] *** bloatable6 left
[10:02] *** unicodable6 left
[10:02] *** sourceable6 left
[10:07] *** bisectable6 joined
[10:07] *** unicodable6 joined
[10:07] *** nativecallable6 joined
[10:07] *** committable6 joined
[10:07] *** coverable6 joined
[10:08] *** sourceable6 joined
[10:08] *** releasable6 joined
[10:08] *** bloatable6 joined
[10:08] *** tellable6 joined
[10:08] *** evalable6 joined
[10:09] *** linkable6 joined
[10:09] *** shareable6 joined
[10:09] *** quotable6 joined
[10:09] *** greppable6 joined
[10:09] *** benchable6 joined
[10:10] *** notable6 joined
[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:50] <ab5tract> m:  my %h; my $s = start { sleep 0.5; %h<555> }; my $p := $s.result; dd $p; $p = 42; dd %h

[11:50] <camelia> rakudo-moar cd74aa79a: OUTPUT: «Any␤assign requires a concrete object (got a Any type object instead)␤  in block <unit> at <tmp> line 1␤␤»

[11:51] <lizmat> m: my %h; my $s = start { %h<555> }; my $p := $s.result; dd $p; $p = 42; dd %

[11:51] <camelia> rakudo-moar cd74aa79a: OUTPUT: «Any␤assign requires a concrete object (got a Any type object instead)␤  in block <unit> at <tmp> line 1␤␤»

[11:52] <lizmat> you don't need the sleep, .result will block

[11:52] <ab5tract> ah, good to know

[11:52] <ab5tract> is the loss of container-ship expected / desired?

[11:53] <lizmat> m: my %h; my $s = Promise.start: -> is raw { %h<555> }; my $p := $s.result; dd $p; $p = 42; dd %

[11:53] <camelia> rakudo-moar cd74aa79a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Invalid typename 'is' in parameter declaration.␤at <tmp>:1␤------> my %h; my $s = Promise.start: -> is⏏ raw { %h<555> }; my $p := $s.result; dd␤»

[11:53] <ab5tract> oh maybe with an anonymous sub

[11:53] <lizmat> m: my %h; my $s = Promise.start: sub () is raw { %h<555> }; my $p := $s.result; dd $p; $p = 42; dd %

[11:53] <camelia> rakudo-moar cd74aa79a: OUTPUT: «Any␤assign requires a concrete object (got a Any type object instead)␤  in block <unit> at <tmp> line 1␤␤»

[11:53] <lizmat> apparently not

[11:54] <ab5tract> result would need to be marked is raw as well, I suspecgt

[11:55] <ab5tract> m: my %h; my  $p := { %h<5> }(); $p = 42; dd %h

[11:55] <camelia> rakudo-moar cd74aa79a: OUTPUT: «{"5" => 42}␤»

[11:56] <ab5tract> so unless you need to mark a param is raw, a basic block should be fine

[11:57] <ab5tract> does `is raw` negatively impact performance?

[12:00] <lizmat> well, on dispatch it might

[12:22] <ab5tract> dang, speaking of dispatch... is there a way to "bind" callsame so that it doesn't unintentionally refer to the scope of another function call?

[12:23] <ab5tract> ie, in `multi f($whateva) { if $whateva { return start { callsame } } }`, start "swallows" the callsame

[12:24] <lizmat> no idea off hand

[12:24] <ab5tract> tried OUTER::<&callsame> but that didn't worl

[12:24] <ab5tract> lizmat: gotcha, thanks

[12:25] <ab5tract> (I did check the docs before asking :) )

[12:35] <ab5tract> found it: https://docs.raku.org/syntax/nextcallee

[12:39] <lizmat> ah, TIL you could use nextcallee for that  :)

[12:41] <Geth> ¦ rakudo/r4666: 5bd3ff3efb | ab5tract++ | lib/experimental.rakumod

[12:41] <Geth> ¦ rakudo/r4666: First stab at a synchronized-cached

[12:41] <Geth> ¦ rakudo/r4666: review: https://github.com/rakudo/rakudo/commit/5bd3ff3efb

[12:42] <lizmat> ab5tract: why not use $lock.protect ?

[12:42] <ab5tract> because I hadn't learned about nextcallee :D

[12:44] <ab5tract> that is, it was eating up the callsame

[12:45] <lizmat> isn't the point of a threadsafe cache that you can access it from multiple threads?

[12:49] <ab5tract> which part isn't allowing that?

[12:50] <lizmat> I wonder what the point is of the start { } in there

[12:50] <lizmat> starting a job for each value seems... overkil?

[12:50] <ab5tract> so that the next caller isn't blocked on reading a (maybe already returned) value

[12:51] <ab5tract> otherwise every read is blocked while the cache is filled

[12:52] <ab5tract> s/returned/cached/

[12:53] <nine> This also increases the overhead of the cache.

[12:53] <nine> Have you considered a copy on write solution?

[12:54] <ab5tract> no, I hadn't

[12:55] <nine> Would give advantages *if* writes are rare compared to reads

[12:55] <ab5tract> the blocking of cached reads occurre to me while I was out on a walk and this seemed like a Raku-ish solution

[12:56] <lizmat> also: start is pretty expensive

[12:56] <ab5tract> I'll take a look later today :)

[12:56] <ab5tract> lizmat: I get that

[12:57] <ab5tract> but the whole point of is cached is that the call itself is expensive

[12:57] <nine> That's the problem with a generic "is cached" solution. We have no idea about the actual use case, so we must not make any assumptions.

[12:57] <ab5tract> so blocking cached reads feels super suboptimal

[12:57] <ab5tract> note I also made this a different trait :)

[12:59] <ab5tract> afk&

[12:59] <nine> Considering how trivial it is to add adhoc-caching, is it even worth it to provide this as a builtin? We cannot know which trade-offs to pick. We also have no cache expiry.

[12:59] <lizmat> yeah, the alternative could well be to remove this feature (in its current state) entirely into the ecosystem

[13:00] <lizmat> and remove it from core: it *has* been experimental

[13:01] <lizmat> either that, or make it threadsafe, document the behaviour re the key construction, and and no cache expiry, and put it in core

[13:30] <[Coke]> +1 for removing the experimental feature.

[14:01] <ab5tract> even if we want to punt it to the ecosystem, core probably needs to either ensure that unordered collections do a sort on their contents when .raku is generated or else provide some other usable caching key

[14:03] <lizmat> agree on that

[14:04] <nine> Thing is that neither .raku nor .gist nor .Str were meant to produce stable identifiers. They just incidentally kinda work mostly for that.

[14:05] <lizmat> well, I'd say .raku (if sorted for Associatives) would work for 99.9% of cases as a stable identifier key

[14:06] <nine> On the other hand do they really? my @a = <1 2 3>; my @b = <1 2 3>; some-caching-func(@a); some-caching-func(@b); # should @a and @b considered to be the same even though they are different non-value objects? I argue that depends on some-caching-func. Again it cannot really be decided a priori

[14:06] <lizmat> fwiw, I'd worry more about thread-safety

[14:10] <nine> Which in many cases won't be an issue at all

[14:12] <lizmat> I seem to recall at least one issue about thread-safety and is-cached

[14:16] <ab5tract> nine: that's fair, but if core doesn't give a cache implementor the option to consider them the same, then we've already made the choice for them

[14:16] <ab5tract> without causing a great deal more work on their side relative to a few sorts on the core side, at least

[14:17] <nine> How comes? They are still free to write their own fit for purpose cache key generator. Even a somewhat generic one.

[14:18] <nine> You assume that a few sorts are all that's needed and then we're good. I'm not sure that's really the case. And even if, that still includes hidden assumptions that may just not hold.

[14:19] <nine> It also assumes that there's no downside to adding these sorts.

[14:42] <ab5tract> "They are still free to write their own fit for purpose cache key generator." --> that's the great deal of work I was talking about :)

[14:43] <ab5tract> anyway, given those caveats you've mentioned it is clear that there is no place for `is cached` in core

[14:58] <lizmat> still, moving it into core and making "use experimental :cache" a noop, would have one big advantage

[14:58] <lizmat> no broken code in the ecosystem / darkpan

[14:59] <ab5tract> true, it would at the very least need deprecation

[15:00] <lizmat> if not moved to core, indeed

[15:00] <ab5tract> but even fixing it to use raku instead of gist is a) controversial, b) could "break" code by changing its behavior (even if that behavior is more correct)

[15:10] <ab5tract> R#5197 --> I think it's long past time to drop the pretence of there being a genuine JVM backend. That definitely deserves a problem solving ticket though

[15:10] <linkable6> R#5197 [open]: https://github.com/rakudo/rakudo/issues/5197 [JVM] zef does not compile for rakudo jvm, 2022.12

[15:20] <lizmat> 6120b009e3304bf93b4

[15:20] <linkable6> (2015-08-28) https://github.com/rakudo/rakudo/commit/6120b009e3 strict is now on by default, even for -e

[15:40] <ab5tract> just opened my first problem-solving ticket about that very topic :)

[15:41] <ab5tract> I genuinely would never in a hundred years have guessed that this would happen :)

[16:17] *** finanalyst joined
[17:50] *** sena_kun joined
[18:11] *** coleman left
[18:12] *** coleman joined
[18:18] *** samebchase joined
[18:32] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/05/27/2024-22-detect-incoming/

[19:24] <ab5tract> lizmat++

[19:26] * gfldex .o(week++ lizmat++)

[21:18] <Geth> ¦ rakudo/main: de12a755f3 | ab5tract++ | 3 files

[21:18] <Geth> ¦ rakudo/main: RakuAST: Add test for using a shadowed package

[21:18] <Geth> ¦ rakudo/main: 

[21:18] <Geth> ¦ rakudo/main: This was failing in base:

[21:18] <Geth> ¦ rakudo/main: 

[21:18] <Geth> ¦ rakudo/main:     > use Foo::Bar;

[21:18] <Geth> ¦ rakudo/main:     > use Foo;

[21:18] <Geth> ¦ rakudo/main:     > Foo.new

[21:18] <Geth> ¦ rakudo/main: 

[21:18] <Geth> ¦ rakudo/main: but works as expected in RakuAST. Adding a test in order

[21:18] <Geth> ¦ rakudo/main: to prevent regression. R#1690 (#1690)

[21:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/de12a755f3

[21:18] <linkable6> R#1690 [open]: https://github.com/rakudo/rakudo/issues/1690 [tests needed][REPL][Fixed in RakuAST] REPL messes up namespaces when Foo is `use`d after Foo::Bar

[21:20] <Geth> ¦ rakudo/main: 5fb665ba27 | ab5tract++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[21:20] <Geth> ¦ rakudo/main: Bump test plan in xx-fixed-in-rakuast.rakutest

[21:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5fb665ba27

[21:41] <Geth> ¦ roast: f93a66780f | ab5tract++ | 2 files

[21:41] <Geth> ¦ roast: Add tests for no trailing zeros via Rat.Str and Rat.gist

[21:41] <Geth> ¦ roast: 

[21:41] <Geth> ¦ roast: This closes R#1818.

[21:41] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f93a66780f

[21:41] *** finanalyst left
[21:41] <linkable6> R#1818 [open]: https://github.com/rakudo/rakudo/issues/1818 [tests needed][rationals][stringification] Stringified Rat has traling zeros

[21:43] <Geth> ¦ roast: 8642114ba6 | ab5tract++ | 2 files

[21:43] <Geth> ¦ roast: Revert "Add tests for no trailing zeros via Rat.Str and Rat.gist"

[21:43] <Geth> ¦ roast: 

[21:43] <Geth> ¦ roast: Unfortunately some extraneous tests leaked into this commit.

[21:43] <Geth> ¦ roast: 

[21:43] <Geth> ¦ roast: This reverts commit f93a66780f01a31b6792b5c8315a51c0f07721ea.

[21:43] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8642114ba6

[21:44] <Geth> ¦ roast: ee596d801f | ab5tract++ | S32-num/rat.t

[21:44] <Geth> ¦ roast: Add tests for no trailing zeros via Rat.Str and Rat.gist

[21:44] <Geth> ¦ roast: 

[21:44] <Geth> ¦ roast: This closes R#1818.

[21:44] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ee596d801f

[21:44] <linkable6> R#1818 [open]: https://github.com/rakudo/rakudo/issues/1818 [tests needed][rationals][stringification] Stringified Rat has trailing zeros

[21:45] <[Coke]> if you use the full URL in the roast commit message, it would close the rakudo ticket automatically.

[21:46] <[Coke]> also: Neat!

[22:11] <Geth> ¦ roast: 3078dc2364 | ab5tract++ | 3 files

[22:11] <Geth> ¦ roast: Add test for .pm shadowing .rakumod of the same name

[22:11] <Geth> ¦ roast: 

[22:11] <Geth> ¦ roast: If `Shadow.pm` and `Shadow.rakumod` live in the same

[22:11] <Geth> ¦ roast: directory, we should (and do) load the rakumod file.

[22:11] <Geth> ¦ roast: 

[22:11] <Geth> ¦ roast: This closes R#3783.

[22:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3078dc2364

[22:11] <linkable6> R#3783 [open]: https://github.com/rakudo/rakudo/issues/3783 [tests needed] Raku loads Perl modules first when Raku modules have the same base name

[22:12] <ab5tract> [Coke]: ah, will put the url in the next one :)

[22:19] <ugexe> hmm, we should follow the idiomatic distribution convention of putting module files in a lib folder, especially when it doesn't contain a META6.json in the root

[22:20] <ab5tract> not to disagree, but why?

[22:21] <ugexe> I converted all(?) the roast packages to follow that some time ago. the reasons to do so are primarily because when a library path does not contain a META6.json rakudo has to make some assumptions about what the module names are called, where an e.g. resources/ might be located, etc

[22:21] <ab5tract> in that case I have to append a `/lib` to the path passed to use lib

[22:21] <ab5tract> which seems like a no-op

[22:21] <ugexe> it is not

[22:23] <ab5tract> I mean, I can take you word for it but I would rather understand why

[22:25] <Geth> ¦ roast: d909f834c2 | ab5tract++ | 3 files

[22:25] <Geth> ¦ roast: Migrate packages/R3783/* to packages/R3783/lib/*

[22:25] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d909f834c2

[22:26] <ugexe> https://github.com/rakudo/rakudo/blob/5fb665ba27ae9a340cf5e89ca65f0e8d990f7586/src/core.c/CompUnit/Repository/FileSystem.rakumod#L180-L185

[22:28] <ugexe> in your specific case it is indeed fine, but generally one should use the more conventional naming pattern to avoid the issue mentioned there. and since people will copy what they see in the roast (or use it as a base for making their own roast contributions) we should try to follow the best practices we currently have

[22:28] <ab5tract> ugexe: got it, thanks

[22:29] <ugexe> i think you didn't commit the renamed files in that last commit

[22:29] <ab5tract> damnit :)

[22:29] <Geth> ¦ roast: 52f7b0002a | ab5tract++ | 2 files

[22:29] <Geth> ¦ roast: Don't forget the renamed modules (ugexe++)

[22:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/52f7b0002a

[22:30] <ab5tract> ugexe: the only thing I'm struggling with in that comment is that it specifies `use lib 'packages'` .. but my experience demonstrates that for the well-formed case, that needs to be `use lib 'packages/lib'`

[22:31] <ab5tract> but probably I'm missing something, as often happens

[22:40] <ugexe> https://gist.github.com/ugexe/b43dbb651d2a1fb7098cf0a7ca80831e

[22:41] <ugexe> the first example is a distribution that isn't using a lib/ directory

[22:42] <ugexe> it lists no resources, and the provides relative path is seemingly not correct

[22:55] <ugexe> To give a more contrived example, if you had a user with `/home/user1/mymodule.rakumod` and tried to `use lib '/home/user1'`, it would look for resource files for `%?RESOURCES`/`$?DISTRIBUTION` in `/home/resources` which is obviously not great.

[23:06] *** sena_kun left
[23:11] <Geth> ¦ roast: 36dadc1753 | ab5tract++ | S32-io/spurt.t

[23:11] <Geth> ¦ roast: Add test for spurt failures

[23:11] <Geth> ¦ roast: 

[23:11] <Geth> ¦ roast: This addresses R#4619. While that ticket focuses on permissions,

[23:11] <Geth> ¦ roast: I've taken the approach of generating a failure purely based on

[23:11] <Geth> ¦ roast: trying to spurt a file into a non-existent path.

[23:11] <Geth> ¦ roast: 

[23:11] <Geth> ¦ roast: This feels much less fiddly than what it takes to do a permissions-

[23:11] <linkable6> R#4619 [open]: https://github.com/rakudo/rakudo/issues/4619 [tests needed] spurt-string throws Failure

[23:11] <Geth> ¦ roast: specific test (checking for UID 0 and fudging a dummy test if so,

[23:11] <Geth> ¦ roast: which ignores Windows and also isn't comprehensive).

[23:11] <Geth> ¦ roast: 

[23:11] <Geth> ¦ roast: (https://github.com/rakudo/rakudo/issues/4619)

[23:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/36dadc1753

[23:11] <ab5tract> ugexe: thanks for the clarification, that makes sense to me

[23:13] <ab5tract> that'll be all from me tonight

