[01:34] *** ab5tract left
[06:54] *** ab5tract joined
[09:00] <timo> https://gist.github.com/timo/4f9d318dae901d0755d610eb0fb897f2  ????? %)

[09:03] *** ab5tract left
[09:19] <lizmat> that feels rather repetitive ?

[09:24] <timo> kinda

[09:25] <timo> ok so, what has both "$!bstack" and "HOW", as well as 1 and 1? where the order of "$!bstack" and "HOW" may be in reverse

[09:28] <lizmat> isn't the repeating of Callsite_74 also a bit weird?

[09:31] <timo> and something else or similar might have "$!uid", "gid=", "96", "$!gid", also with an 1 to go with each?

[09:32] <timo> don't think that's weird, why? that's obj, str, obj, str

[09:36] <timo> i'm not sure i'm looking at it correctly. this could be a Metamodel::GenericHOW? maybe a Perl6::Metamodel::AttributeContainer? it could conceivably also be refering to a Metamodel::ModuleHOW?

[09:37] <timo> those are objects in core.c.setting that change from one run of compiling rakudo to another

[09:40] <lizmat> why would they change?

[09:42] <timo> could be related to hash randomization

[09:44] <lizmat> well, it feels it shouldn't?   given a set of source files, shouldn't the bytecode always be *exactly* the same, especially for Debian?

[09:44] <timo> they would certainly like that

[09:45] <timo> well, the reprotest twiddles a bunch of things around to ensure builds are reproducible not just from doing it twice in a row. for example, they also change the locale to french

[09:45] <timo> and there's a thing that reprotest activates that gives you files in directories in random order

[09:45] <timo> and the path where the build is done is also randomized

[09:46] <timo> and it's built from a clean beginning, too, with moar and nqp installed from the same packages though

[09:46] <timo> and yet, the results are different

[09:46] <timo> i mean, the bytecode is the same, but serialized objects are different

[09:47] <lizmat> so: in memory the same, but different on disk ?

[09:47] <timo> not sure about "in memory"

[09:48] <lizmat> then what do you mean with "bytecode" as opposed to serialized objects?

[09:48] <timo> our serialization code has something in it to prevent hash randomization from shuffling things around AIUI

[09:48] <timo> bytecode would be the frames that you see in moar --dump or in the spesh log

[09:48] <timo> whereas serialized objects are all the type objects and constants and whatnot that we have

[09:50] <lizmat> which usually live in a file, no?

[09:53] <timo> i'm not sure i'm following

[09:54] <lizmat> a .moarvm file consists of serialized objects that become objects in memory when they're read from the file

[09:55] <timo> right

[10:00] <timo> ok i don't know what SC 5 IDX 21 is exactly, but there is a whole boatload of 'em in the serialized blob, and just two have their order shuffled from one to the next

[10:02] <timo> i am relatively certain that sc 5 is metamodel.moarvm

[10:02] <timo> or could i be off-by-one here?

[10:03] <timo> ok i really need to go to sleep, this has rabbitholed me something fierce

[10:03] <lizmat> sleep!

[10:04] <lizmat> thanks for all the rabbitholing you've done so far!

[10:10] <Geth> ¦ problem-solving: tbrowder assigned to rba Issue Raku's Github list of popular repositories is outdated and needs a new listk https://github.com/Raku/problem-solving/issues/448

[10:29] <Geth> ¦ problem-solving: lizmat unassigned from rba Issue Raku's Github list of popular repositories is outdated and needs a new list https://github.com/Raku/problem-solving/issues/448

[10:41] <Geth> ¦ roast: 950d347c8c | (Elizabeth Mattijsen)++ | S04-declarations/smiley.t

[10:41] <Geth> ¦ roast: Add tests for #4255

[10:41] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/950d347c8c

[11:49] <Geth> ¦ rakudo/lizmat-anonymous-params: 2b7a767e18 | (Elizabeth Mattijsen)++ | src/core.c/Exception.rakumod

[11:49] <Geth> ¦ rakudo/lizmat-anonymous-params: Make positional parameters anonymous in candidate list

[11:49] <Geth> ¦ rakudo/lizmat-anonymous-params: 

[11:49] <Geth> ¦ rakudo/lizmat-anonymous-params: when throwing an dispatch exception.  Because the actual names ofi

[11:49] <Geth> ¦ rakudo/lizmat-anonymous-params: positional parameters is not important and can be distracting.

[11:49] <Geth> ¦ rakudo/lizmat-anonymous-params: 

[11:49] <Geth> ¦ rakudo/lizmat-anonymous-params: Inspired by https://github.com/rakudo/rakudo/issues/4273

[11:49] <Geth> ¦ rakudo/lizmat-anonymous-params: review: https://github.com/rakudo/rakudo/commit/2b7a767e18

[11:49] <Geth> ¦ rakudo: lizmat++ created pull request #5663: Make positional parameters anonymous in candidate list

[11:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5663

[12:39] <Geth> ¦ rakudo/lizmat-objhash-no-failure: 1ff8e531b1 | (Elizabeth Mattijsen)++ | src/core.c/Hash/Object.rakumod

[12:39] <Geth> ¦ rakudo/lizmat-objhash-no-failure: Throw coercion failures on object hashes

[12:39] <Geth> ¦ rakudo/lizmat-objhash-no-failure: 

[12:39] <Geth> ¦ rakudo/lizmat-objhash-no-failure: If an object hash is defined with a coercion type (e.g. Int(Str))

[12:39] <Geth> ¦ rakudo/lizmat-objhash-no-failure: the Failure of the coercion would be stored as the key.  Only to

[12:39] <Geth> ¦ rakudo/lizmat-objhash-no-failure: thrown whenever that key would be accessed in the hash, e.g. with

[12:39] <Geth> ¦ rakudo/lizmat-objhash-no-failure: .keys.

[12:40] <Geth> ¦ rakudo/lizmat-objhash-no-failure: 

[12:40] <Geth> ¦ rakudo/lizmat-objhash-no-failure: <…commit message has 7 more lines…>

[12:40] <Geth> ¦ rakudo/lizmat-objhash-no-failure: review: https://github.com/rakudo/rakudo/commit/1ff8e531b1

[12:40] <Geth> ¦ rakudo: lizmat++ created pull request #5664: Throw coercion failures on object hashes

[12:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5664

[13:39] <Geth> ¦ rakudo/main: 817c9ae17d | (Elizabeth Mattijsen)++ | 2 files

[13:39] <Geth> ¦ rakudo/main: RakuAST: fix "handles" and "will" traits

[13:39] <Geth> ¦ rakudo/main: 

[13:39] <Geth> ¦ rakudo/main: With regards to .raku and deparsing

[13:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/817c9ae17d

[14:34] <Geth> ¦ rakudo/main: 49005b54d6 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[14:34] <Geth> ¦ rakudo/main: Add test for #4351

[14:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/49005b54d6

[14:43] *** ab5tract joined
[14:44] <ab5tract> Clearly there are some opts that want very badly to init :)

[15:09] *** El_Che left
[17:18] <Geth> ¦ roast: a9808b7896 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | spectest.data

[17:18] <Geth> ¦ roast: Disable test file that hogs up all memory

[17:18] <Geth> ¦ roast: 

[17:18] <Geth> ¦ roast: At least for now

[17:18] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a9808b7896

[17:20] <Geth> ¦ roast: 792ffe2547 | (Elizabeth Mattijsen)++ | S04-declarations/will.t

[17:20] <Geth> ¦ roast: Add test for #4403

[17:20] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/792ffe2547

[17:38] <Geth> ¦ roast: 9178a972fc | (Elizabeth Mattijsen)++ | S04-statements/label.t

[17:38] <Geth> ¦ roast: Add test for #4456

[17:38] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9178a972fc

[17:42] <Geth> ¦ roast: 6e2925bb4b | (Elizabeth Mattijsen)++ | S32-list/reduce.t

[17:42] <Geth> ¦ roast: Add test for #4458

[17:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6e2925bb4b

[17:45] <Geth> ¦ roast: 3eba8ecf34 | (Elizabeth Mattijsen)++ | S15-string-types/Uni.t

[17:45] <Geth> ¦ roast: Add tests for #4464

[17:45] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3eba8ecf34

[18:09] *** ab5tract left
[18:41] <Geth> ¦ rakudo/main: 98fdf95a28 | (Elizabeth Mattijsen)++ | src/core.c/allomorphs.rakumod

[18:41] <Geth> ¦ rakudo/main: Add support for Unicode vulgars to val()

[18:41] <Geth> ¦ rakudo/main: 

[18:41] <Geth> ¦ rakudo/main: This effectively makes <⅓> the same as <1/3>.

[18:41] <Geth> ¦ rakudo/main: 

[18:41] <Geth> ¦ rakudo/main: Fixes #4475

[18:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/98fdf95a28

[19:09] <timo> huh. i "make install", copy away the stuff, "make clean; make install", compare the two folders, and the position of an infix:<**> frame as well as an unnamed frame moves up by one in the core.c.setting file

[19:22] <Geth> ¦ roast: 6896f2f2f3 | (Elizabeth Mattijsen)++ | S32-str/val.t

[19:22] <Geth> ¦ roast: Whip val() tests into shape

[19:22] <Geth> ¦ roast: 

[19:22] <Geth> ¦ roast: A lot of tests are questionable, moved the failing ones to a "todo"

[19:22] <Geth> ¦ roast: hash, or commented whole ranges out.

[19:22] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6896f2f2f3

[19:22] <bartolin> lizmat: may I ask a question? I noticed that something like "flat (42, [], 7)" doesn't remove the empty array on the JVM backend. (Which leads to problems when testing with "is-run".) Does the usage of -1 here rely on the usage of "uint" and the conversion to a very large number in class Flat? https://github.com/rakudo/rakudo/blob/98fdf95a28/src/core.c/Rakudo/Iterator.rakumod#L1877

[19:23] <bartolin> (which doesn't seem to work on the JVM backend)

[19:24] <bartolin> but it also feels like it doesn't work for plain classes created outside of the core. (but maybe I'm doing something wrong here)

[19:24] <bartolin> m: use nqp; class Foo { has uint $!levels; method new(uint $levels) { my $self := nqp::create(self); nqp::bindattr_i($self,Foo,"\$!levels",$levels); $self }; method levels() { nqp::getattr_i(self,Foo,"\$!levels") } }; say Foo.new(-1).levels

[19:24] <camelia> rakudo-moar 98fdf95a2: OUTPUT: «-1␤»

[19:24] <lizmat> possibly... could try changing it to uint.Range.max

[19:24] <bartolin> (I tried to simulate the code from class Flat)

[19:25] <lizmat> m: uint.Range.max

[19:25] <camelia> rakudo-moar 98fdf95a2: ( no output )

[19:25] <lizmat> m: say uint.Range.max

[19:25] <camelia> rakudo-moar 98fdf95a2: OUTPUT: «18446744073709551615␤»

[19:26] <bartolin> thanks, I'll play with that a bit. (but I'm still a bit confused, why my example above still gives back -1)

[19:36] <lizmat> afk&

[19:37] <bartolin> o/

[20:12] <timo> ha!

[20:22] <timo> we have a version of RegexCaptures in rakudo's bootstrap.c where we don't use sorted_keys on the capnames hash

[20:22] <bartolin> uint.Range.max also doesn't work. but int.Range.max seems to avoid all underflow/overflow problems and still looks like a safe value for the levels of flattening

[20:23] <timo> now for some reason i can't call sorted_keys there, not even after putting a copy of it above the regexcaptures class

[20:27] <timo> always fun to be poking around in the bootstrap bits :|

[20:27] <bartolin> *g*

[20:30] <timo> hahaha

[20:30] <timo> i'm now encountering the exact same error that you found here: https://github.com/Raku/nqp/issues/808

[20:31] <bartolin> oopsie

[20:31] <timo> except on moarvm

[20:31] <timo> bootstraps is one hell of a drug

[20:40] <Geth> ¦ rakudo: usev6++ created pull request #5666: [JVM] Flatten without overflow/underflow issues

[20:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5666

[20:40] <timo> OK, now I have a hacky version that sorts the cap names. somehow there still remains the issue where it's compiling these two frames in different orders

[20:42] <timo> and/or a frame there has its lexicals in different order, maybe? or that's a symptom of the/a frame moving around?

[20:43] * bartolin has no clue

[20:44] <timo> ah the order is the same, there's just some stuff in between that causes them to move, and since every line has a line number in this part of the output, diff aligns them by the line number

[20:44] <timo> so it's not obvious to the eye

[20:45] <timo> i kind of hate that in order to make this specialized output that also shows some information from serialized data, i had to copy so so much code from other moarvm source files

[20:48] <timo> https://storage.aperture-labs.org/s/mWjzQgJ5Wriw6tb have a look (but you'll need to download and open it with a browser off your disk for it to work unfortunately, ugh)

[20:49] <timo> there's the traditional "moar --dump" output at he top, the "new" dump format in the middle, and a raw diff of xxd's output at he bottom

[21:28] <patrickb> Is it expected, that Rakudos utf8 decoder will hold back one char (i.e. output is always offset by one char wrt the input)?

[21:35] <[Coke]> has to check if there's a combiner, so that tracks.

[21:36] <patrickb> And combiners can be trailing?

[21:36] <patrickb> Ugh...

[21:37] <patrickb> That majorly sucks for things like terminal emulators. Should I just assume that I always have complete input and don't do streaming decoding?

[21:41] <patrickb> Thanks for explaining!

[21:41] <[Coke]> Yah, I can see where that sucks for streaming - how do you know that you should render the n and you're not waiting for an ñ

[21:42] <[Coke]> (well, an n and a ˜ combiner, an ñ would be easier. :)

[21:42] <[Coke]> unicode is the worst. (except for everything else we've tried)

[21:45] <timo> patrickb: there are characters that can't combine, like newline and actually probably all the low unprintable ascii chars

[21:46] <patrickb> Yeah. But I need insta response for all chars that show up on the screen.

[21:46] <timo> with a terminal emulator, you can probably expect after a short timeout if there's nothing more, there won't be any combiners, since if the user types something like ä

[21:46] <timo> they would be using a dead key or a compose sequence

[21:47] <timo> and if they are typing something more complicated, the IME would have done everything before you get anything, right? i've never worked with IME tbh

[21:47] <patrickb> Given that programs typically don't stop sending output in the midst of a sequence, I'll try to get away with just assuming that I always receive chunks of complete input for now.

[21:47] <[Coke]> good first approx.

[21:48] <timo> hopefully the user can just backspace whenever something goes wrong

[21:52] <patrickb> https://paste.pics/fe66950d7c6550e0b6bb7eff7e90384f

[21:52] <patrickb> https://paste.pics/c2062c36e3f861fb3ec08a7db7ed63ad

[21:53] <patrickb> vim would be almost usable if I'd manage to send ESC :-P

[21:53] <timo> do you know asciinema?

[21:53] <patrickb> I think I'm soon at the point where it's good enough for now

[21:53] <patrickb> did and forgot

[21:54] <timo> can't blame you :D

[23:11] *** |Tux| left
[23:26] *** ab5tract joined
[23:50] *** |Tux| joined
