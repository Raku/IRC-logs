[01:13] *** MasterDuke left
[08:23] <Geth> ¦ rakudo/main: 9b377fcd72 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[08:23] <Geth> ¦ rakudo/main: RakuAST: fix assignment to hash/array slots not getting optimized

[08:23] <Geth> ¦ rakudo/main: 

[08:23] <Geth> ¦ rakudo/main: We accidentally checked the Match object instead of the AST node.

[08:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9b377fcd72

[08:23] <nine> 1022

[09:13] <Geth> ¦ rakudo/main: e75c4168fb | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[09:13] <Geth> ¦ rakudo/main: RakuAST: also detect negative subscript range at compile time

[09:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e75c4168fb

[09:14] <nine> and one more

[09:33] <ab5tract> nine++

[09:37] <lizmat> broke one test in "make test" though, but I will fix that

[09:39] <ab5tract> m: dd my Str(Match) @g = “11 22” ~~ /(\d\d)\s(\d\d)/

[09:39] <camelia> rakudo-moar e75c4168f: OUTPUT: «Str(Match) @g = Array[Str(Match)].new("11 22")␤»

[09:39] <ab5tract> that seems broken, right?

[09:40] <Geth> ¦ rakudo/main: 1ccb95d45c | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[09:40] <Geth> ¦ rakudo/main: RakuAST: fix inadvertent sinking of a semi-lists elements

[09:40] <Geth> ¦ rakudo/main: 

[09:40] <Geth> ¦ rakudo/main: Since SemiList is derived from StatementList, we sank all it's elements

[09:40] <Geth> ¦ rakudo/main: except for the last one. But a SemiList is used for constructing a list,

[09:40] <Geth> ¦ rakudo/main: so we need to retain all its elements.

[09:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1ccb95d45c

[09:40] <nine> And that makes it 1025

[09:40] * lizmat is trying to keep up

[09:40] <lizmat> 1K+  :-)

[09:42] <ab5tract> ah, nevermind, it's converting the match object as expected, sorry

[09:43] <ab5tract> s/as expected/as defined/

[10:09] <ab5tract> lizmat: out of curiosity, why hasn't R#5513 been merged yet?

[10:09] <linkable6> R#5513 [open]: https://github.com/rakudo/rakudo/pull/5513 Add Mu.Callable($method) "coercer"

[10:11] <lizmat> not sure

[10:12] <lizmat> I guess because of jnthn's argument that the current MOP is a de-facto standard

[10:22] <lizmat> nine: what is the point of adding a RakuAST::Role::ResolveInstantiations instance if there are no lexicals to resolve?

[10:23] <ab5tract> ah, I see, thanks

[10:47] <Geth> ¦ rakudo/main: c9b75d737a | (Stefan Seifert)++ | src/Raku/ast/scoping.rakumod

[10:47] <Geth> ¦ rakudo/main: RakuAST: fix order of declarations in generated code

[10:47] <Geth> ¦ rakudo/main: 

[10:47] <Geth> ¦ rakudo/main: We need to ensure that a block topic is declared lexically before we may

[10:47] <Geth> ¦ rakudo/main: want to access it. While normal statements will always come after

[10:47] <Geth> ¦ rakudo/main: declarations are processed, if the block topic is used in an initializer

[10:47] <Geth> ¦ rakudo/main: we may get the wrong value.

[10:47] <Geth> ¦ rakudo/main: 

[10:47] <Geth> ¦ rakudo/main: Fixes $_ = 5; for 1..1 { my @md[1..$_] }

[10:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c9b75d737a

[10:47] <nine> 1026

[10:47] <nine> lizmat: at the point where we have to add it to the tree, we don't know yet whether we're gonna need it

[10:49] <lizmat> nine: from the aspect of building an AST manually, it feels wrong to have to add a statement of which the function is not directly related to a source aspect

[10:51] <nine> Well this is something that you wouldn't do manually anyway. It's basically an implementation detail of RakuAST::Role.

[10:53] <lizmat> so why isn't it part of the RakuAST::Role class then?

[10:53] <nine> Well it _is_ RakuAST::**Role**::ResolveInstantiations

[10:55] <lizmat> but why isn't it RakuAST::Role.resolve_instantiations ?

[10:56] <nine> Because the point of it is that I need an AST node which will generate the right QAST inside the role's body sub

[10:57] <lizmat> well, I think we have prior knowledge about that, e.g. in the handling of some of the phasers (KEEP or UNDO, I forget)

[11:00] <lizmat> well, of injecting a RakuAST tree into an existing RakuAST tree, and generating the QAST from that

[11:19] *** lizmat left
[11:21] <Geth> ¦ rakudo/main: ea0b0d1575 | (Elizabeth Mattijsen)++ | 2 files

[11:21] <Geth> ¦ rakudo/main: RakuAST: initial stab at adding DEPARSE / raku support

[11:21] <Geth> ¦ rakudo/main: 

[11:21] <Geth> ¦ rakudo/main: for RakuAST::Role::ResolveInstantiations.  Sadly the effect of having

[11:21] <Geth> ¦ rakudo/main: a RakuAST class without clear source interpretation, makes it a lot

[11:21] <Geth> ¦ rakudo/main: harder to create a sensible source representation that does not have

[11:21] <Geth> ¦ rakudo/main: visual side-effects depending on whether or not there are other

[11:21] <Geth> ¦ rakudo/main: statements in a statement list  :-(

[11:21] <Geth> ¦ rakudo/main: 

[11:21] <Geth> ¦ rakudo/main: At least .raku and .DEPARSE now do not die with "unimplemented"

[11:21] <Geth> ¦ rakudo/main: errors anymore.

[11:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ea0b0d1575

[11:22] *** lizmat joined
[11:32] <nine> A twigil cannot possible come before a digit, right?

[11:32] <nine> lizmat++ # thanks for the fix!

[11:35] <nine> Raku beginner question: how do I get a \w without digits in a regex?

[11:36] <lizmat> m: say "abc456" ~~ / <[\w]-[\d]>* /

[11:36] <camelia> rakudo-moar ea0b0d157: OUTPUT: «｢abc｣␤»

[11:37] <lizmat> basically, you can add and substract character classes

[11:37] <lizmat> m: say "ABC456" ~~ / <[A..Z]+[\d]>* /

[11:37] <camelia> rakudo-moar ea0b0d157: OUTPUT: «｢ABC456｣␤»

[11:38] <lizmat> m: say "abc456" ~~ / <[A..Z]+[\d]>* /

[11:38] <camelia> rakudo-moar ea0b0d157: OUTPUT: «｢｣␤»

[11:38] <lizmat> hmmm sorta expected ｢456｣ there?

[11:40] <ab5tract> yeah..

[11:41] <lizmat> I guess the * isn't greedy enough

[11:42] <lizmat> m: say "abc456" ~~ / <[A..Z]+[\d]>+ /

[11:42] <camelia> rakudo-moar ea0b0d157: OUTPUT: «｢456｣␤»

[11:42] <ab5tract> feels kind of like a bug though, no?

[11:42] <lizmat> not sure...  

[11:44] <lizmat> I mean, you *are* asking for: match this, 0 or more times

[11:45] <lizmat> it encounters a char that doesn't match, and thinks: we're done!

[11:45] <lizmat> a match of 0 characters

[11:49] <ab5tract> yeah, hmm...

[11:49] <ab5tract> m: say "a1" ~~ /\d*/

[11:49] <camelia> rakudo-moar ea0b0d157: OUTPUT: «｢｣␤»

[11:50] <ab5tract> yeah, so not a bug

[11:51] <ab5tract> or at least consistent ;)

[12:18] <lizmat> afk for a few hours&

[14:42] <ab5tract> m: multi s(@a) { dd @a }; multi s(@a, :$h = "duh") { say $h }; s [1]; s [1], :h<vv>

[14:42] <camelia> rakudo-moar ea0b0d157: OUTPUT: «duh␤vv␤»

[14:42] <ab5tract> I'm a bit shocked that this isn't an ambiguous dispatch

[14:55] <ab5tract> So otherwise equivalent candidates with named args always supersede narrower candidates?

[15:01] <ab5tract> m: multi s(@a) { dd @a }; multi s(@a, :$h = "duh") { say "blah " ~ $h }; multi s(@a, :$h!) { say "meh " ~ $h.raku }; s [1]; s [1], :h<vv>

[15:01] <camelia> rakudo-moar ea0b0d157: OUTPUT: «blah duh␤blah vv␤»

[15:02] <ab5tract> my brain hurts :(

[15:05] <ab5tract> why do allow the compiler to accept nonsensical multis?

[15:06] <ab5tract> seems like it would be more polite to say "only one of these candidates will ever see a dispatch"

[15:58] <lizmat> m: multi s(@a) { dd }; multi s(@a, :$h = "duh") { dd }; multi s(@a, :$h!) { dd }; s [1]; s [1], :h<vv>

[15:58] <camelia> rakudo-moar ea0b0d157: OUTPUT: «sub s(@a, :$h = "duh")␤sub s(@a, :$h = "duh")␤»

[16:56] <ab5tract> similar to what we went over a few days ago regarding the ordering of named args in multi sigs..

[17:02] <lizmat> fwiw, I think the first call:  s [1] should have been handled by the first candidate

[17:02] <lizmat> on account of absence of *%_ in the case of multi subs

[17:02] <lizmat> for methods, I'm less sure

[17:11] <Geth> ¦ rakudo/main: aeccbb4000 | (Elizabeth Mattijsen)++ | 2 files

[17:11] <Geth> ¦ rakudo/main: Better fix for additional statements in roles

[17:11] <Geth> ¦ rakudo/main: 

[17:11] <Geth> ¦ rakudo/main: as done in ea0b0d15753862ad7.  Take the approach of hiding the

[17:11] <Geth> ¦ rakudo/main: additional statements from view, rather than actually provoding

[17:11] <Geth> ¦ rakudo/main: .DEPARSE and .raku support for them.

[17:11] <Geth> ¦ rakudo/main: 

[17:11] <Geth> ¦ rakudo/main: This is really a temporary measure, as this will be one of the cases

[17:11] <Geth> ¦ rakudo/main: where one can **NOT** use the .AST of a role as a template for building

[17:11] <Geth> ¦ rakudo/main: roles programmatically.  So this *will* need some additional thinking

[17:11] <Geth> ¦ rakudo/main: before this can be unleashed onto the world in a official language

[17:11] <Geth> ¦ rakudo/main: version release.

[17:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/aeccbb4000

[18:21] *** gfldex left
[18:25] *** gfldex joined
[19:17] <Geth> ¦ rakudo/main: 2d76783a6d | (Daniel Green)++ | tools/templates/jvm/Makefile.in

[19:17] <Geth> ¦ rakudo/main: Increase JVM max heap

[19:17] <Geth> ¦ rakudo/main: 

[19:17] <Geth> ¦ rakudo/main: After either c6fb210 or 1d609da the JVM backend started failing with

[19:17] <Geth> ¦ rakudo/main: `java.lang.OutOfMemoryError: Java heap space` when it gets to compiling

[19:17] <Geth> ¦ rakudo/main: CORE.c.

[19:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2d76783a6d

[19:27] <lizmat> meh looks like I borked Inline::Perl5 tests already with 9f0b8689dc16718e9b5021

[19:27] <linkable6> (2024-04-05) https://github.com/rakudo/rakudo/commit/9f0b8689dc Streamline Metamodel::RoleToRoleApplier (Part 2/N)

[19:34] <lizmat> will look at that tomorrow *after* the weekly

[20:54] *** MasterDuke joined
[23:28] *** coleman left
[23:30] *** coleman joined
