[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:11] *** djinni` left
[01:24] *** djinni` joined
[05:03] *** guifa left
[05:13] *** guifa joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:08] *** sena_kun joined
[06:14] *** sena_kun left
[08:41] <Geth> ¦ nqp/main: 7170e02da1 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[08:41] <Geth> ¦ nqp/main: Bump MoarVM to get unsigned int fix, MasterDuke17++

[08:41] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/7170e02da1

[09:07] <Geth> ¦ rakudo/main: b2684c07c8 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[09:07] <Geth> ¦ rakudo/main: Bump NQP to get unsigned int fix, MasterDuke17++

[09:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b2684c07c8

[09:36] <Geth> ¦ rakudo/main: 7377655218 | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[09:36] <Geth> ¦ rakudo/main: Streamline NativeCall (part 12/N)

[09:36] <Geth> ¦ rakudo/main: 

[09:36] <Geth> ¦ rakudo/main: - treat the internal validnctype sub: also make it return 0 or 1

[09:36] <Geth> ¦ rakudo/main:   so that it's result can be negated with the faster nqp::not_i

[09:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7377655218

[09:45] <Geth> ¦ rakudo/main: 24f3a16875 | (Elizabeth Mattijsen)++ | t/12-rakuast/var.rakutest

[09:45] <Geth> ¦ rakudo/main: Mark failing test as todo if not run with RakuAST

[09:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/24f3a16875

[09:51] <Geth> ¦ rakudo/main: 8dd91896e7 | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[09:51] <Geth> ¦ rakudo/main: Streamline NativeCall (part 13/N)

[09:51] <Geth> ¦ rakudo/main: 

[09:51] <Geth> ¦ rakudo/main: More work on check_routine_sanity

[09:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8dd91896e7

[09:56] <nine> m: q[use fatal; sub foo() { fail("foo"); }; my $f = foo; say "survived"].AST.EVAL

[09:56] <camelia> rakudo-moar 24f3a1687: OUTPUT: «survived␤»

[09:56] <nine> m: q[use fatal; "a".map: { $_.Int }].AST.EVAL; say "survived";

[09:56] <camelia> rakudo-moar 24f3a1687: OUTPUT: «survived␤»

[09:58] <nine> lizmat: your commit fff197957ad04090e01b24cb2064f9125c7bce57 message only says that you chose to deviate from the original implementation but doesn't go into detail as to why. As it is use fatal; seems to not do anything at all?

[09:58] <linkable6> (2023-02-10) https://github.com/rakudo/rakudo/commit/fff197957a Make "use fatal" operational

[09:59] *** linkable6_ left
[10:00] <lizmat> in my recollection, I was just trying to make "use fatal" do what I thought it needed to do

[10:00] <lizmat> according to the legacy grammar

[10:00] <lizmat> if it deviated, it was unintentional

[10:02] *** linkable6_ joined
[10:03] <nine> The commit message says "Instead of wrapping each block in a check, use the "POST" phaser mechanism to insert a special POST phaser into a block when "use fatal" is active." That sounds very much intentional to me :0

[10:03] <nine> :)

[10:04] <lizmat> *that* part was intentional, but to achieve the goal in a different way

[10:05] <lizmat> as to why that way: I guess it felt more natural to do it that way?

[10:05] <lizmat> "A lexical pragma that makes Failures returned from routines fatal."

[10:06] <nine> m: q[use fatal; sub foo() {Failure.new: "test"}; my $a = foo; say "done"].AST.EVAL

[10:06] <camelia> rakudo-moar 24f3a1687: OUTPUT: «done␤»

[10:06] <nine> It doesn't actually do that either. I can't find any situation where use fatal would have any effect.

[10:07] <lizmat> m: q[sub foo() {use fatal; Failure.new: "test"}; my $a = foo; say "done"].AST.EVAL

[10:07] <camelia> rakudo-moar 24f3a1687: OUTPUT: «done␤»

[10:07] <lizmat> hmmm  then I guess reverting fff197957 appears to be the right thing to do

[10:07] <linkable6> (2023-02-10) https://github.com/rakudo/rakudo/commit/fff197957a Make "use fatal" operational

[10:08] *** linkable6_ left
[10:09] *** linkable6_ joined
[10:21] <Geth> ¦ rakudo/main: 3ec47540d9 | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[10:21] <Geth> ¦ rakudo/main: Streamline NativeCall (part 14/N)

[10:21] <Geth> ¦ rakudo/main: 

[10:21] <Geth> ¦ rakudo/main: Final tweaks on check_routine_sanity: mostly looping faster over

[10:21] <Geth> ¦ rakudo/main: the parameters, with more shortcuts in place.

[10:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3ec47540d9

[10:25] *** MasterDuke left
[10:57] <Geth> ¦ rakudo/main: 9d297a3d75 | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[10:57] <Geth> ¦ rakudo/main: Streamline NativeCall (part 15/15)

[10:57] <Geth> ¦ rakudo/main: 

[10:57] <Geth> ¦ rakudo/main: - make "refresh" an only

[10:57] <Geth> ¦ rakudo/main: - remove unnecessary decont on type object

[10:57] <Geth> ¦ rakudo/main: - final readability and documentation tweaks

[10:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9d297a3d75

[11:23] <Geth> ¦ rakudo/main: 8a7ed37c48 | (Elizabeth Mattijsen)++ | lib/NativeCall/Dispatcher.rakumod

[11:23] <Geth> ¦ rakudo/main: Streamline NativeCall::Dispatcher (part 1/N)

[11:23] <Geth> ¦ rakudo/main: 

[11:23] <Geth> ¦ rakudo/main: - small logic tweaks

[11:23] <Geth> ¦ rakudo/main: - some esthetic tweaks

[11:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8a7ed37c48

[11:46] <Geth> ¦ rakudo/main: 2182fee5e3 | (Elizabeth Mattijsen)++ | lib/NativeCall/Dispatcher.rakumod

[11:46] <Geth> ¦ rakudo/main: Streamline NativeCall::Dispatcher (part 2/N)

[11:46] <Geth> ¦ rakudo/main: 

[11:46] <Geth> ¦ rakudo/main: - removal of some temporaries in raku-nativecall-deproxy logic

[11:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2182fee5e3

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:23] <Geth> ¦ rakudo/main: 9b078a12be | (Elizabeth Mattijsen)++ | lib/NativeCall/Dispatcher.rakumod

[12:23] <Geth> ¦ rakudo/main: Streamline NativeCall::Dispatcher (part 3/N)

[12:23] <Geth> ¦ rakudo/main: 

[12:23] <Geth> ¦ rakudo/main: - removal of some temporaries in raku-nativecall logic

[12:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9b078a12be

[13:52] <Geth> ¦ rakudo/main: ed4db102b5 | (Elizabeth Mattijsen)++ | lib/NativeCall/Dispatcher.rakumod

[13:52] <Geth> ¦ rakudo/main: Streamline NativeCall::Dispatcher (part 4/N)

[13:52] <Geth> ¦ rakudo/main: 

[13:52] <Geth> ¦ rakudo/main: - re-imagine most of raku-nativecall-core

[13:52] <Geth> ¦ rakudo/main: - more NQP level checks

[13:52] <Geth> ¦ rakudo/main: - add some helper subs for code simplification

[13:52] <Geth> ¦ rakudo/main: - remove unnecessary temporaries

[13:52] <Geth> ¦ rakudo/main: - add some more comments

[13:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ed4db102b5

[14:03] <Geth> ¦ rakudo/main: c9a0de80d6 | (Elizabeth Mattijsen)++ | lib/NativeCall/Dispatcher.rakumod

[14:03] <Geth> ¦ rakudo/main: Streamline NativeCall::Dispatcher (part 5/5)

[14:03] <Geth> ¦ rakudo/main: 

[14:03] <Geth> ¦ rakudo/main: - remove dead code

[14:03] <Geth> ¦ rakudo/main: - remove some more unnecessary termporaries

[14:03] <Geth> ¦ rakudo/main: - add more comments

[14:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c9a0de80d6

[14:13] <Geth> ¦ rakudo/main: b6cc74b50d | (Elizabeth Mattijsen)++ | 2 files

[14:13] <Geth> ¦ rakudo/main: Move sub map_return_type logic to NativeCall::Types

[14:13] <Geth> ¦ rakudo/main: 

[14:13] <Geth> ¦ rakudo/main: Since this module is used everywhere, it makes sense to let this logic

[14:13] <Geth> ¦ rakudo/main: live there and import it where needed, as opposed to duplicating the

[14:13] <Geth> ¦ rakudo/main: same logic in more than one place

[14:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b6cc74b50d

[15:46] <nine> lizmat: what's the point of removing temporaries? Isn't it good to have actual names for things?

[16:26] <lizmat> In these cases, I think they obstruct understanding, because you get to deal with more mnemonics

[16:27] <lizmat> now, these temporaries existed before I addd specific nqp::track / guard / etc. ops

[16:30] <lizmat> https://github.com/Raku/nqp/blob/main/docs/ops.markdown#delegate-moar

[16:31] <lizmat> so at that point, they *were* needed for understanding, as functionality such as "track" and "guard" where buried two levels deep in indirection

[16:31] <lizmat> and very verbose indirection at that

[16:32] <lizmat> nqp::track('arg', ...) is short for nqp::dispatch('boot-syscall', 'dispatcher-track-foo', …)

[16:32] <lizmat> which is quite a bit longer  :-)

[16:33] <lizmat> actually nqp::dispatch('boot-syscall', 'dispatcher-track-arg', …)  but you get the picture

[17:13] <nine> Ah, that fatalizing POST phaser never fired because in absence of explicit phasers we never added the phaser handling code to the block

[17:47] <lizmat> I guess that's a lesson for any EXPORT-PHASERS future code as well

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:19] *** gfldex left
[18:51] *** gfldex joined
[19:26] <[Coke]> need to update the notice on the windows rakudo install to not say the perl foundation

[19:39] <[Coke]> what shell are you using?

[19:39] <[Coke]> 'command prompt', 'powershell', are you already in raku's REPL?

[19:40] <[Coke]> ww

[22:50] <ugexe> .tell MasterDuke have you seen 'Exception in thread "main" java.lang.NoClassDefFoundError: it/unimi/dsi/fastutil/ints/IntArrayList' https://dev.azure.com/Rakudo/rakudo/_build/results?buildId=5696&view=logs&j=ab856b8b-876f-5746-08e5-94ac68404358&t=a0aacb72-bf99-5b6c-eb59-f6fa751848ea&l=110

[22:50] <tellable6> ugexe, I'll pass your message to MasterDuke

[22:50] <tellable6_> ugexe, I'll pass your message to MasterDuke

