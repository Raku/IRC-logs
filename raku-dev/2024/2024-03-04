[02:02] <japhb> While looking to trim some extra disk from my rakudo-zef Docker image, I noticed that ~/.zef/store contains two separate copies of each repo contents list (in different directories).  Is this intentional?  Should they be symlinked instead?  Or one copy just deleted?

[03:29] <ugexe> i think you can delete the ones in subdirectories, and the download into subdirectories bit could be changed to a tmp directory. the reason it is the way it is now is because at one time it defaulted to doing e.g. `git pull` to download changes to the ecosystem list and thus needed a location to keep that repo cloned

[03:33] <japhb> gotcha

[03:35] <ugexe> basically this - https://github.com/ugexe/zef/blob/1f100e2bb8c4412a44bd645463c993592c9c87be/lib/Zef/Repository/Ecosystems.rakumod#L128-L142

[03:35] <ugexe> ($!cache typically points at ~/.zef/store)

[04:45] *** japhb left
[04:49] *** japhb joined
[04:53] *** japhb left
[04:54] *** japhb joined
[05:12] *** MasterDuke left
[06:48] <japhb> Making some progress on a debian-slim + Rakudo + Zef docker container:

[06:48] <japhb> REPOSITORY   TAG       IMAGE ID       CREATED       SIZE

[06:48] <japhb> rakudo-zef   2024.02   ee2cd559905d   2 hours ago   174MB

[06:49] <japhb> That's about 35 MB smaller than tonyodell/rakudo-nightly, which itself is over 300 MB smaller than rakudo-star

[06:50] <japhb> I haven't uploaded anything to dockerhub yet, but the Dockerfile for it is at https://github.com/Raku-MUGS/rakudo-zef/blob/main/Dockerfile

[07:55] *** sena_kun joined
[09:23] *** sivoais_ left
[10:08] *** sena_kun left
[10:57] *** kjp left
[11:07] *** kjp joined
[11:48] <Geth> ¦ rakudo/main: 4ee064dc23 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[11:48] <Geth> ¦ rakudo/main: Streamline bootstrap so more

[11:48] <Geth> ¦ rakudo/main: 

[11:48] <Geth> ¦ rakudo/main: - separate deconting self into separate statements: unclear whether

[11:48] <Geth> ¦ rakudo/main:   these deconts are needed, and this way they can be removed easily

[11:48] <Geth> ¦ rakudo/main:   if it becomes clear the deconting is not needed

[11:48] <Geth> ¦ rakudo/main: - switch default for auto_viv_container in scalar_attr: it's more

[11:48] <Geth> ¦ rakudo/main:   common to *not* have an auto_viv_container in the bootstrap: also

[11:48] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[11:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4ee064dc23

[13:51] <Geth> ¦ rakudo/main: ec11e06b28 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:51] <Geth> ¦ rakudo/main: Streamline Block in bootstrap

[13:51] <Geth> ¦ rakudo/main: 

[13:51] <Geth> ¦ rakudo/main: Specifically should now be smarter about handling the case where a

[13:51] <Geth> ¦ rakudo/main: block is cloned and it has phasers.

[13:51] <Geth> ¦ rakudo/main: 

[13:51] <Geth> ¦ rakudo/main: Sadly, the information about which phasers are actually available

[13:51] <Geth> ¦ rakudo/main: in a block, is lost: so we need to check at runtime *every time*

[13:51] <Geth> ¦ rakudo/main: whenever a Block is cloned.  This needs to get smarter.

[13:51] <Geth> ¦ rakudo/main: 

[13:51] <Geth> ¦ rakudo/main: But for now, this appears to make "test" and "spectest" sigificantyly

[13:51] <Geth> ¦ rakudo/main: faster.

[13:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ec11e06b28

[14:30] <jdv> japhb: what's your use case?

[14:31] <jdv> lizmat: is there a number that can be associated with "sigificantyly"?

[15:14] <japhb> jdv: Packaging MUGS: https://irclogs.raku.org/mugs/2024-03-04.html

[15:18] <jdv> i get golfing container images for deployment perf or storage cost opti but for a game? :)

[15:28] <jdv> also curious what your image cut out that the other one didn't

[15:30] <japhb> Well part of the goal was trying to understand the ways that a Raku container can bloat; it turns out that there were (after packaging all the MUGS layers) hundreds of MB of accumulated cruft.

[15:31] <japhb> For example, /tmp/.zef holds a fair amount of unneeded junk, but you can't just remove it entirely always, because of modules that build a binary and leave it in there.

[15:32] <japhb> Likewise, you don't need multiple copies of the repo manifests in the final image.

[15:33] <jdv> ah, nice

[15:33] <japhb> (And of course, you don't want one to slip into a layer either (because deleting on a separate layer doesn't actually save any space), so big RUN '&&' ladders are the norm.

[15:33] <jdv> looks like tony's just pulls in a handful more from apt

[15:34] <japhb> I also wanted to do as much work as I could as the raku user, limiting root use to stuff that needs to do native installs

[15:35] <japhb> Some of tony's apt installs are redundant (they're pulled in by the ones I install), so it's not quite as different there as it looks.

[15:36] <japhb> One of my annoyances is that things that require TLS don't depend on ca-certificates, and it is neither Essential nor build-essential.

[15:36] <japhb> But good luck using https without it ....

[15:37] <lizmat> jdv: not within noise levels

[15:38] <jdv> japhb: yeah, that is odd.  i noticed that recently when i was building a app image for a mojolicious based thing

[15:39] <jdv> lizmat: nice

[15:40] <japhb> lizmat: FYI in English "significant" has two very different meanings: colloquially "enough to make a real difference", and statistically what you said.  They have rather different connotations, hence possible confusion.  :-)

[15:51] * patrickb is once more amused that "curl https://rakubrew.org/" magically does what it does. (I built this, but it's still amusing me.)

[16:15] <ugexe> japhb: in case you run into them again, it i worth know which distributions are building an leaving binaries in ~/.zef that are still referenced after they are installed (i.e. using %?RESOURCES<...>.Str in compile time stuff) so we can fix them

[16:17] <ugexe> actually i'm not sure if the %?RESOURCES<...> thing would cause that... those generally happen when the staging stuff (in /tmp) get referenced after install

[16:18] <ugexe> oh sorry, you did say /tmp/.zef

[16:43] <japhb> ugexe: Term::termios:ver<0.2> leaves a binary in /tmp/.zef, but I haven't tried the very latest version of that one.  (The old version pin is because of some bugs/incompatibilities in subsequent releases, but like I said I haven't tried the very newest one.)

[16:48] *** sivoais joined
[17:07] <lizmat> notable6: weekly

[17:07] <notable6> lizmat, No notes for “weekly”

[18:41] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/03/04/2024-10-grammarism/

[18:58] *** sena_kun joined
[20:03] <jdv> coulda said something about it being a "leap release":)

[20:03] <jdv> lizmat++

[20:04] <lizmat> heh...  good one

[20:04] <lizmat> updated  and afk&

[23:24] *** sena_kun left
[23:40] *** kjp left
[23:47] *** kjp joined
