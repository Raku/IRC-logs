[00:16] *** Voldenet left
[00:18] *** Voldenet joined
[01:06] *** Voldenet left
[01:09] *** Voldenet joined
[02:06] <[Coke]> jdv: you do anything with the long running hanging tests?

[02:07] <[Coke]> I have 4 .t's that are showing times of nearly 2h

[02:24] <jdv> investigate and kill

[02:25] <jdv> normally its just 1 or 2

[02:44] <[Coke]> ⏳ 2233 out of 2249 modules processed

[02:55] <jdv> so close

[03:09] <[Coke]> https://gist.github.com/coke/0a5f70703ba4fa2370923afd8de8332d#file-failures-md - finally got a run that completed.

[03:10] <jdv> cool

[03:11] <jdv> you had no fails?

[03:12] <[Coke]> | Flapper                   |     1 | InstallableButUntested    |     7 | ZefFailure                |    12 | UnhandledException        |    16 | CyclicDependency          |    17 | MissingDependency         |    21 | AlwaysFail                |   736 | OK                        |  1439

[03:14] <jdv> but there is no "Fail" count so that's normally "no regressions"

[03:14] <jdv> iirc

[03:15] <[Coke]> ... weird; I should have gotten the same results you did

[03:15] <jdv> race conditions?

[03:16] <jdv> its normal for stuff to fail under blin and be fine outside so that's my best guess

[03:16] <jdv> super odd though that we were that different

[04:31] *** japhb joined
[06:00] *** japhb left
[07:29] *** sena_kun joined
[07:38] *** sena_kun left
[11:52] *** sena_kun joined
[11:53] <lizmat> bisectable6: old=2024.10 my int @a = ^10; dd @a[5..*]

[11:54] <bisectable6> lizmat, On both starting points (old=2024.10 new=0911eca) the exit code is 0, exit signal is 1 (SIGHUP) and the output is identical as well

[11:54] <bisectable6> lizmat, Output on both points: ««timed out after 10 seconds»»

[13:13] <Geth> ¦ rakudo/main: 65ec7f303c | (Elizabeth Mattijsen)++ | 3 files

[13:13] <Geth> ¦ rakudo/main: Fix issues with slices with N..* ranges

[13:13] <Geth> ¦ rakudo/main: 

[13:13] <Geth> ¦ rakudo/main: Commit a4b87c9 throws earlier than before, and this caused some

[13:13] <Geth> ¦ rakudo/main: ecosystem fallout.  This was because any unbounded ranges would

[13:13] <Geth> ¦ rakudo/main: simply stop on encounter with the first element that didn't exist.

[13:13] <Geth> ¦ rakudo/main: 

[13:13] <Geth> ¦ rakudo/main: This commit fixes that by adding an implementation-detail method

[13:13] <Geth> ¦ rakudo/main: <…commit message has 13 more lines…>

[13:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/65ec7f303c

[13:19] <lizmat> bisectable6: old=2024.10 dd 1400.polymod(256 xx 7).reverse

[13:19] <bisectable6> lizmat, Bisecting by output (old=2024.10 new=0911eca) because on both starting points the exit code is 0

[13:19] <bisectable6> lizmat, bisect log: https://gist.github.com/593ba0249852a94a92aefdd830789690

[13:19] <bisectable6> lizmat, (2024-10-25) https://github.com/rakudo/rakudo/commit/c81d9cfe86499587cde45a6a539b7c636a8364b0

[14:06] <Geth> ¦ rakudo/main: c6872fb036 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.rakumod

[14:06] <Geth> ¦ rakudo/main: Fix issue with .polymod and fixed number of divisors

[14:06] <Geth> ¦ rakudo/main: 

[14:06] <Geth> ¦ rakudo/main: Commit c81d9cf changed the behaviour of .polymod with regards to

[14:06] <Geth> ¦ rakudo/main: handling values if 0 was encountered: it would *always* stop

[14:06] <Geth> ¦ rakudo/main: producing values, rather than continuing until there were no more

[14:06] <Geth> ¦ rakudo/main: divisors.  Which caused the problems shown in #5726.

[14:06] <Geth> ¦ rakudo/main: 

[14:06] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[14:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c6872fb036

[14:50] <[Coke]> getting that heap corruption error in the REPL daily

[14:53] <lizmat> [Coke]: using Terminal::LineEditor ?

[14:55] <[Coke]> the REPL doesn't tell me what it's using when it launches.

[14:55] <[Coke]> that is installed, though

[14:56] <lizmat> are you on HEAD or on 2024.10 ?

[14:56] <[Coke]> Terminal::LineEditor:ver<0.0.17>:auth<zef:japhb>

[14:56] <[Coke]> 2024.10

[14:56] <lizmat> ok, then I suggest uninstalling Terminal::LineEditor and installing Linenoise until 2024.12

[14:58] <[Coke]> ok.

[14:58] <[Coke]> just wanted to raise the flag in case it was a raku thing. Thanks

[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:01] <timo> did we already get a new release of Terminal::MakeRaw with the fix in it?

[15:01] <[Coke]> jdv - I'll try to run a subset of the blin run to see if I can figure out why the ones you're showing as errors aren't showing as errors here.

[15:09] <lizmat> timo: no, patrickb wanted a proper fix

[15:10] <lizmat> since the issue is on MacOS only, and then only with Terminal::LineEditor, it felt ok to me to get patrickb to make a proper fix

[15:11] <patrickb> I'll do a last T::MR release. It's obviously annoying people. Which dependent module are most needed? Only T::LE?

[15:11] <lizmat> yes, afaik

[15:12] <patrickb> (T::Printer is the other one)

[15:14] <timo> i would call it more than just "annoying" though?

[15:14] <timo> it crashes :)

[15:17] <Geth> ¦ rakudo/main: a01021a945 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.rakumod

[15:17] <Geth> ¦ rakudo/main: Fix stupid typo

[15:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a01021a945

[15:24] *** japhb joined
[16:24] <jdv> lizmat: thanks

[16:24] <jdv> [Coke]: ok, cool

[16:24] <lizmat> sadly, polymod issue not fixed yet :-(

[16:24] <lizmat> but close to it

[16:24] <jdv> i guess if abstract can't fix that one we'll revert

[16:24] <jdv> ah

[16:29] <lizmat> m: dd 12.polymod(14)

[16:29] <camelia> rakudo-moar a01021a94: OUTPUT: «(12, 0).Seq␤»

[16:29] <lizmat> m: dd 12.polymod(lazy 14,)

[16:29] <camelia> rakudo-moar a01021a94: OUTPUT: «(12, 0).Seq␤»

[16:30] <lizmat> that should be (12,).Seq

[16:31] <lizmat> jdv: fwiw, this is an edge case, the modules  affected in blin should be fixed

[16:32] <jdv> the repl thing?

[16:33] <lizmat> no, the modules affected by polymod changes

[16:33] <lizmat> the repl thing only affects: MacOS && Terminal::LineEditor

[16:33] <lizmat> any other OS or other module providing editor functions, and you're ok

[16:34] <jdv> no, that's what Jupyter::Chatbook tripped over in the blin run

[16:34] <lizmat> ah?

[16:34] <lizmat> ah, then that may also use the underlying ::TerninalRaw module somehow

[16:35] <lizmat> patrickb said he was going to do an update of that

[16:35] <jdv> anyway, you're saying Digest, Digest::HMAC, EC, PBKDF2 all need to change?

[16:35] <lizmat> nope, they should be ok now

[16:35] <lizmat> fwiw, I only checked Digest, but that was a dependency of the other 3

[16:36] <jdv> didn't you just say the polymod affected modules should be fixed?  now i'm confused.

[16:36] <lizmat> Digest cs were the ones affected by polymod

[16:37] <jdv> ok

[16:38] <lizmat> re polymod issue: fixed it in a local script, but fails again when in core setting

[16:38] <lizmat> so now I'm debugging that, which is much slower due to 1+ minute compilation cycle

[16:39] <jdv> faster than my box 

[16:47] <lizmat> ok, looks like the iterator on "lazy 14," somehow becomes non-lazy  :-(

[16:48] <jdv> if someone could help me "somehow become non-lazy" i'd appreciate it:)

[16:49] <lizmat> hehe

[16:50] <lizmat> .oO( don't be too eager :-)

[16:52] <lizmat> grrr   found the cause in List::Todo:

[16:52] <lizmat> method is-lazy() { $!todo.DEFINITE && $!todo.is-lazy }

[16:55] <lizmat> I think that's another issue: I'm going to alter the failing test for now

[17:14] <patrickb> @ [Coke], lizmat, whoever: Can someone give https://git.sr.ht/~patrickb/Terminal-MakeRaw a quick try on MacOS?

[17:15] <patrickb> I'd like to be sure it's working before I make a release.

[17:18] <Geth> ¦ rakudo/main: 818a543a4e | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.rakumod

[17:18] <Geth> ¦ rakudo/main: Fix remaining issue with polymod

[17:18] <Geth> ¦ rakudo/main: 

[17:18] <Geth> ¦ rakudo/main: Commit c6872fb036 fixed several modules, but broke one polymod test

[17:18] <Geth> ¦ rakudo/main: 

[17:18] <Geth> ¦ rakudo/main:     12.polymod(lazy 14,)

[17:18] <Geth> ¦ rakudo/main: 

[17:18] <Geth> ¦ rakudo/main: which should produce (12,).Seq because of the lazy iterator.

[17:18] <Geth> ¦ rakudo/main: <…commit message has 10 more lines…>

[17:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/818a543a4e

[17:19] <Geth> ¦ roast: cc990cb369 | (Elizabeth Mattijsen)++ | S32-num/polymod.t

[17:19] <Geth> ¦ roast: Fix polymod test

[17:19] <Geth> ¦ roast: 

[17:19] <Geth> ¦ roast: In light of https://github.com/rakudo/rakudo/commit/818a543a4e

[17:19] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/cc990cb369

[17:19] <[Coke]> [Terminal-MakeRaw] Dynamic variable $*DISTO not found

[17:20] <[Coke]> (running zef test . from git)

[17:21] <[Coke]> with that fix, 'zef test .' is OK

[17:22] <[Coke]> ... but there's not of a lot of test - is there a sample or something I can run to see the desired behavior?

[17:23] <[Coke]> README should probably say "In contrast" instead of "I contrast"

[17:23] <[Coke]> patrickb: ^^

[17:36] <patrickb> you'll have to run the repl and try to make it fail while -I ing that module

[17:37] <[Coke]> that seems complicated. :)

[17:38] <[Coke]> my previous failures were not reproducable, just common

[17:38] <[Coke]> perhaps we go with "tests pass" once that typo is fixed.

[18:03] <Geth> ¦ rakudo/main: 7e5e210fe8 | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[18:03] <Geth> ¦ rakudo/main: Revert "Fix issue introduced with 8365a5deb4"

[18:03] <Geth> ¦ rakudo/main: 

[18:03] <Geth> ¦ rakudo/main: This reverts commit 4082d2c707cebcf496b0b974204b238436bcaa35.

[18:03] <Geth> ¦ rakudo/main: 

[18:03] <Geth> ¦ rakudo/main: Revert this commit for the 2024.12 release.  It will return later as

[18:03] <Geth> ¦ rakudo/main: a part of a more extensive rework of .trans after 2024.12 release

[18:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7e5e210fe8

[18:04] <patrickb> Do the tests fail without the commit implementing MacOS support?

[18:23] <lizmat> jdv: looking at Format::Lisp one now

[18:24] <jdv> thanks

[18:24] <Geth> ¦ App-MoarVM-Debug/main: 5 commits pushed by slid1amo2n3e4++

[18:24] <Geth> ¦ App-MoarVM-Debug/main: f84e9ed2ef | Add listing breakpoints and clearing them by ID

[18:24] <Geth> ¦ App-MoarVM-Debug/main: ef4dd6b98a | Use Rakuism to remove a key from hash

[18:24] <Geth> ¦ App-MoarVM-Debug/main: 4943ecac70 | Make file:line unique

[18:24] <Geth> ¦ App-MoarVM-Debug/main: 475e922ce4 | Fix copy-paste typo.

[18:24] <Geth> ¦ App-MoarVM-Debug/main: a019557370 | Merge pull request #20 from slid1amo2n3e4/more-breakpoints-management

[18:24] <Geth> ¦ App-MoarVM-Debug/main: review: https://github.com/raku-community-modules/App-MoarVM-Debug/compare/dce0af95d6a4...a019557370fa

[18:32] <Geth> ¦ Format-Lisp/main: 6ca5a013d0 | (Elizabeth Mattijsen)++ | 82 files

[18:32] <Geth> ¦ Format-Lisp/main: CI test for a 0.0.3 release

[18:32] <Geth> ¦ Format-Lisp/main: review: https://github.com/raku-community-modules/Format-Lisp/commit/6ca5a013d0

[18:34] <[Coke]> no, the tests pass at both HEAD and HEAD^1

[18:34] <[Coke]> (with the typo fix at HEAD)

[18:35] <[Coke]> looks like the tests are only really checking compilation and that a method can be called (not that it does a thing)

[18:38] <lizmat> bisectable6: old=2024.10 my $a = "foo"; $a.substr-rw(*-2,0) = "zip"

[18:38] <bisectable6> lizmat, Bisecting by exit code (old=2024.10 new=0911eca). Old exit code: 0

[18:38] <bisectable6> lizmat, bisect log: https://gist.github.com/8d35ccfb0ba7cec119c6684da45fff84

[18:38] <bisectable6> lizmat, (2024-10-26) https://github.com/rakudo/rakudo/commit/6182ed580bcbb05862747d14dcd79c6ffc4fe13c

[18:50] *** japhb left
[18:53] <Geth> ¦ Format-Lisp/main: f1069ae220 | (Elizabeth Mattijsen)++ | 2 files

[18:53] <Geth> ¦ Format-Lisp/main: 0.0.3

[18:53] <Geth> ¦ Format-Lisp/main: review: https://github.com/raku-community-modules/Format-Lisp/commit/f1069ae220

[19:04] <Geth> ¦ rakudo/main: 0ceb4be2e1 | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[19:04] <Geth> ¦ rakudo/main: Fix support for .substr-rw(Callable, x)

[19:04] <Geth> ¦ rakudo/main: 

[19:04] <Geth> ¦ rakudo/main: Apparently that case was forgotten in 6182ed5, as was spotted

[19:04] <Geth> ¦ rakudo/main: in #5726.  This commit adds that support again

[19:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0ceb4be2e1

[19:06] <lizmat> jdv: only blocker is Jupyter::Chatbook now, with the cause already known, right?

[19:08] <jdv> more or less.  anton is gonna look at it soon.

[19:08] <jdv> later today iirc 

[19:08] <lizmat> ack   so I won't be spending any time on that now

[19:09] <jdv> yup, thanks

[19:13] <Geth> ¦ roast: 043f39d850 | (Elizabeth Mattijsen)++ | S32-str/substr-rw.t

[19:13] <Geth> ¦ roast: Add test for .substr-rw(Callable, x)

[19:13] <Geth> ¦ roast: 

[19:13] <Geth> ¦ roast: As spotted in https://github.com/rakudo/rakudo/commit/0ceb4be2e1

[19:13] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/043f39d850

[21:03] *** vrurg left
[21:09] <bartolin> lizmat: I saw that you worked on polymod. In case you didn't notice, maybe you could give https://github.com/rakudo/rakudo/pull/5712 a quick look? It has a conflict now, but I wonder if I should propose the change for the JVM backend only.

[21:28] *** vrurg joined
[21:44] <[Coke]> https://github.com/Raku/Blin/blob/master/lib/Blin/Processing.rakumod#L476 - where does the $CONFIG here come from??

[21:46] <[Coke]> ah, whateverable::config

[21:47] <[Coke]> jdv: what commit of blin are you on?

[22:38] *** sena_kun left
[23:27] <jdv> maybe 84790935b9e4

[23:27] <linkable6> (2024-01-21) https://github.com/Raku/Blin/commit/84790935b9 Various updates

[23:28] <jdv> there's no .git in the container.  but my wc is at that commit so that's my best guess.

[23:29] <jdv> [Coke]: ^

[23:29] <jdv> afk though

