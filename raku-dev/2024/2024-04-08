[00:38] *** coleman left
[00:40] *** coleman joined
[01:43] *** kjp left
[01:45] *** kjp joined
[07:18] <Geth> ¦ rakudo/main: 6be6f15931 | (Stefan Seifert)++ | 3 files

[07:18] <Geth> ¦ rakudo/main: RakuAST: fix start of initializer getting parsed as twigil

[07:18] <Geth> ¦ rakudo/main: 

[07:18] <Geth> ¦ rakudo/main: In my num $=5e0; the equals sign got parsed as twigil, when it should be

[07:18] <Geth> ¦ rakudo/main: the start of an initializer. Since twigils cannot possibly be followed

[07:18] <Geth> ¦ rakudo/main: by a number, change the look ahead assertion from \w to <alpha>

[07:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6be6f15931

[07:18] <nine> 1027

[07:19] <nine> Btw. <[\w]-[\d]> led to strange parse errors in just 2 of the spectests. But <alpha> is nicer anyway and seems to do the trick

[08:03] <nine> lizmat: 74cd925bf77055b42623093dd674124952f23247 broke add-categorical because `if $actions-mixin` will always be false as $actions-mixin is a type object

[08:05] <lizmat> wow..    good catch

[08:06] <nine> That's exactly why I don't do any optimizations - we don't have full regression test coverage yet.

[08:07] <lizmat> testing fix now

[08:08] <nine> Don't bother, I have reverted the problematic changes locally already

[08:09] <nine> I now wonder: since self.r got replaced with Nodify, how can I use that in the Grammar?

[08:10] <lizmat> you probably shouldn't: if we want the grammar to be re-usable with other Actions, you probably shouldn't need to refer to RakuAST classes

[08:10] <lizmat> self.actions.r('Foo','Bar')

[08:10] <nine> How can add-categorical then add new action methods?

[08:10] <lizmat> if you must  :-)

[08:13] <Geth> ¦ rakudo/main: 08d439b390 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[08:13] <Geth> ¦ rakudo/main: Fix action mixin if mixin is a type object

[08:13] <Geth> ¦ rakudo/main: 

[08:13] <Geth> ¦ rakudo/main: Spotted by nine++

[08:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/08d439b390

[08:13] <lizmat> sorry, couldn't resist  :-)

[08:38] *** sena_kun joined
[08:42] <Geth> ¦ rakudo/main: d0ed8cd980 | (Stefan Seifert)++ | 2 files

[08:42] <Geth> ¦ rakudo/main: RakuAST: implement support for term definitions with colonpairs

[08:42] <Geth> ¦ rakudo/main: 

[08:42] <Geth> ¦ rakudo/main: E.g. my \term:<a> = 1

[08:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d0ed8cd980

[08:42] <nine> And 1028

[08:42] * lizmat update weekly draft

[08:42] <lizmat> *updates

[11:00] <lizmat> notable6: weekly

[11:00] <notable6> lizmat, 3 notes: https://gist.github.com/832be0527fdaf769c095d3fd9434ac7d

[11:11] <lizmat> notable6: weekly reset

[11:11] <notable6> lizmat, Moved existing notes to “weekly_2024-04-08T11:11:43Z”

[11:39] *** nine left
[11:39] *** nine joined
[12:45] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/04/08/2024-14-15-1k-75/

[13:31] *** sena_kun left
[13:32] *** sena_kun joined
[13:34] <Geth> ¦ rakudo/main: 5697089398 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/RoleToRoleApplier.nqp

[13:34] <Geth> ¦ rakudo/main: Fix Inline::Perl5 breakage

[13:34] <Geth> ¦ rakudo/main: 

[13:34] <Geth> ¦ rakudo/main: By extracting a condition out of a loop, it became possible to call

[13:34] <Geth> ¦ rakudo/main: "language_revision" on a NQP role.  Since language revisions are a

[13:34] <Geth> ¦ rakudo/main: HLL thing, this caused a problem for Inline::Perl5, because it has

[13:34] <Geth> ¦ rakudo/main: its own ClassHOW written in NQP.

[13:34] <Geth> ¦ rakudo/main: 

[13:34] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[13:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5697089398

[13:34] <lizmat> afk for a few hours&

[14:42] <ab5tract> testing out a relatively far out edge case of dispatch / signatures.. but are we expecting to be able to use traits with "nested" named parameters?

[14:42] <ab5tract> m: sub s(%a, @b, :p(:%r is rw)) { dd }

[14:42] <camelia> rakudo-moar 569708939: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse named parameter; couldn't find right parenthesis␤at <tmp>:1␤------> sub s(%a, @b, :p(:%r⏏ is rw)) { dd }␤»

[15:23] <gfldex> m: sub s(%a, @b, :p (:%r is rw)) { dd }

[15:23] <camelia> rakudo-moar 569708939: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> sub s(%a, @b, :⏏p (:%r is rw)) { dd }␤»

[15:27] <gfldex> ab5tract: That doesn't work anyway. %-sigiled containers are rw by default and for optional args we don't support is-traits.

[15:28] <ab5tract> is rw was just a test, but good point

[15:28] <gfldex> However, any form of nested signature should work the same way then a non-nested. So this is at least LTA.

[15:28] <ab5tract> m: sub s(%a, @b, :%r is rw) { dd }

[15:28] <camelia> rakudo-moar 569708939: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤For parameter '%r', '%' sigil containers don't need 'is rw' to be writable␤Can only use 'is rw' on a scalar ('$' sigil) parameter, not '%r'␤at <tmp>:1␤»

[15:30] <ab5tract> I would file it under a genuine parser bug, because it doesn't matter what `is` trait you are throwing at it

[15:32] <ab5tract> uncovered this while getting `is item` to work on named args, which does work on % sigil containers

[15:47] *** gfldex left
[15:48] <ab5tract> I still feel a bit like the way that multis work (or at least are allowed to compile) is a bit broken

[15:48] <ab5tract> m: multi s(%a, @b, :$h!) { dd }; multi s(%a, @b, :@h!) { dd }; my %h; my @p; s %h, @p, :h([]); 

[15:48] <camelia> rakudo-moar 569708939: OUTPUT: «sub s(%a, @b, :$h!)␤»

[15:49] <ab5tract> we allow `my $s; my @s;` in the same scope because we consider them different. if we don't consider them different in multi dispatch, it again seems far more polite to throw a compilation error

[15:51] <ab5tract> or maybe a worry is more appropriate in this case, because in here it is about declaration order

[16:09] <ab5tract> but `multi s(:$a, :$b) {...}; multi s(:$b, :$a) {...}` is, for example, obviously nonsensical from a dispatch perspecitve, but we don't even. throw an ambiguous dispatch in this case

[16:10] <Geth> ¦ rakudo/is-item-redux: 5 commits pushed by ab5tract++

[16:10] <Geth> ¦ rakudo/is-item-redux: 8676719cb9 | Scaffolding for 'is item' trait on parameters

[16:10] <Geth> ¦ rakudo/is-item-redux: 3a2af5f847 | Ensure that candidates carry itemization reqs

[16:10] <Geth> ¦ rakudo/is-item-redux: 6925132282 | Add dispatch disambiguation for 'is item'

[16:10] <Geth> ¦ rakudo/is-item-redux: 54a6a7718e | (Legacy dispatch) disambiguate itemization with 'is item'

[16:10] <Geth> ¦ rakudo/is-item-redux: b1d699c50b | Add sigil exception for 'is item' to RakuAST

[16:10] <Geth> ¦ rakudo/is-item-redux: review: https://github.com/rakudo/rakudo/compare/0684f1c50d9b...b1d699c50baf

[16:32] <|Tux|> Rakudo v2024.03-115-g569708939 (v6.d) on MoarVM 2024.03-3-gf2220d93d

[16:32] <|Tux|> csv-test-xs-20      0.141 -  0.141

[16:32] <|Tux|> csv-ip5xs           0.258 -  0.261

[16:32] <|Tux|> test-t --race       0.287 -  0.289

[16:32] <|Tux|> test-t              0.426 -  0.447

[16:32] <|Tux|> csv-ip5xs-20        1.134 -  1.135

[16:32] <|Tux|> test-t-20 --race    1.218 -  1.240

[16:32] <|Tux|> csv-parser          1.525 -  1.530

[16:32] <|Tux|> test                1.955 -  1.957

[16:32] <|Tux|> test-t-20           5.112 -  5.131

[16:39] *** [Coke]_ joined
[16:39] *** nebuchad` joined
[16:42] *** [Coke] left
[16:42] *** nebuchadnezzar left
[16:44] *** gfldex joined
[17:12] *** MasterDuke left
[18:43] <japhb> Anyone know if there's a way to force `mi6 release` to ignore xt/ ?  I'm doing a release specifically to move some broken tests (expired test TLS cert, bleah) from t/ to xt/ so that users don't run into this at install time.

[21:05] *** sena_kun left
[21:57] <ab5tract> sorry japhb, not sure :/

[21:58] <ab5tract> TIL that the jvm version of nqp::capturenamedshash is broken

[22:04] <lizmat> japhb: the only thing I can come up with, is to disable the tests with an environment variable setting, set that during mi6 release

[22:04] <lizmat> ab5tract: but would you need that on the JVM ?

[22:05] <ab5tract> are there other ways to introspect the named arguments of a capture?

[22:05] <lizmat> in NQP ?

[22:06] <ab5tract> yeah

[22:06] <lizmat> nqp::capturehasnameds should tell if there are any

[22:07] <lizmat> but indeed, nqp::capturenamedshash would be the only way that I know of

[22:07] <ab5tract> right, but that doesn't really allow me to check whether the named argument iscont

[22:07] <ab5tract> I'm just porting the is named logic to the legacy dispatch

[22:07] <ab5tract> sorry, is item

[22:07] <ab5tract> probably time to go to bed :)

[22:09] <lizmat> hehe..  same goes for me: the 54km cycling trip this afternoon was more tiresome than I expected  :-)

[22:22] <Geth> ¦ nqp/main: 611deff40a | (Elizabeth Mattijsen)++ | src/how/NQPClassHOW.nqp

[22:22] <Geth> ¦ nqp/main: Remove dead code

[22:22] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/611deff40a

