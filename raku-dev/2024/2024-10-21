[03:06] <jdv> if soneome else could try to do a blin run that'd be cool.  I've failed 2x to get a full run in yet and i'm short on time this week.  looks like something ate all the mem on this box.  i had 24G.

[08:04] <ab5tract> Jeepers creepers

[08:40] <lizmat> it's probably https://github.com/rakudo/rakudo/issues/5665 :-(

[08:40] <lizmat> I'll look at that today

[08:51] <Geth> ¦ rakudo/main: 4b53990c2b | (Elizabeth Mattijsen)++ | 2 files

[08:51] <Geth> ¦ rakudo/main: Revert "Don't create unnecessary Failures on numeric infix operators"

[08:51] <Geth> ¦ rakudo/main: 

[08:51] <Geth> ¦ rakudo/main: This reverts commit 0f5d54d2387c712e242910cb04d6312be2504bcc.

[08:51] <Geth> ¦ rakudo/main: 

[08:51] <Geth> ¦ rakudo/main: To allow the 2024.10 release to go through

[08:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4b53990c2b

[08:53] *** sena_kun joined
[08:56] <Geth> ¦ rakudo/main: 4d6458989a | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[08:56] <Geth> ¦ rakudo/main: Additional test for #5391

[08:56] <Geth> ¦ rakudo/main: 

[08:56] <Geth> ¦ rakudo/main: raiph++ for the nudge

[08:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4d6458989a

[09:22] <timo> https://github.com/rakudo/rakudo/issues/5189 - what did we close this for?

[09:22] <Geth> ¦ rakudo/main: 6f8d314c2a | (Elizabeth Mattijsen)++ | 2 files

[09:22] <Geth> ¦ rakudo/main: Don't create unnecessary Failures on numeric infix operators

[09:22] <Geth> ¦ rakudo/main: 

[09:22] <Geth> ¦ rakudo/main: This time without a stupid typo that made infix %% go infinilooping

[09:22] <Geth> ¦ rakudo/main: upon itself and eating all RAM (at 4GB/sec that was quite a feat :-)

[09:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6f8d314c2a

[09:29] <timo> hrm. i feel like i haven't accomplished anything for this release, or the previous one :|

[09:33] <lizmat> timo: you have, although it's all in the background!

[09:33] <lizmat> well, maybe not all  :-)

[09:34] <lizmat> in any case, it is appreciated!

[09:46] <Geth> ¦ rakudo/main: b50d986a21 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[09:46] <Geth> ¦ rakudo/main: Add test for #5599

[09:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b50d986a21

[10:44] <Geth> ¦ rakudo/main: 91e46d2952 | (Elizabeth Mattijsen)++ | src/core.c/Exception.rakumod

[10:44] <Geth> ¦ rakudo/main: Also show file/line on ambiguous dispatch

[10:44] <Geth> ¦ rakudo/main: 

[10:44] <Geth> ¦ rakudo/main: As suggested by wayland++ in #5655

[10:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/91e46d2952

[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:30] <Geth> ¦ rakudo/main: 5e9d63dafa | (Elizabeth Mattijsen)++ | 2 files

[11:30] <Geth> ¦ rakudo/main: Make Seq.sort in line with sort(Seq)

[11:30] <Geth> ¦ rakudo/main: 

[11:30] <Geth> ¦ rakudo/main: Also make sure that Type.sort does the right thing.

[11:30] <Geth> ¦ rakudo/main: 

[11:30] <Geth> ¦ rakudo/main: Fixes #5662

[11:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5e9d63dafa

[11:33] <Geth> ¦ roast: a82e731dd4 | (Elizabeth Mattijsen)++ | S32-list/seq.t

[11:33] <Geth> ¦ roast: Add test for #5662

[11:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a82e731dd4

[11:36] <lizmat> jdv: pretty sure https://github.com/rakudo/rakudo/commit/6f8d314c2a makes it ok to run a Blin again

[11:58] <Geth> ¦ rakudo/main: 302241feba | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[11:58] <Geth> ¦ rakudo/main: Add test for #1616

[11:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/302241feba

[12:02] <Geth> ¦ rakudo/main: 5e95151b74 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[12:02] <Geth> ¦ rakudo/main: Add test for #1691

[12:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5e95151b74

[12:14] <Geth> ¦ rakudo/main: efb42ea700 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[12:14] <Geth> ¦ rakudo/main: Add test for #1768

[12:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/efb42ea700

[12:18] <Geth> ¦ rakudo/main: a1ccc7d31c | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[12:18] <Geth> ¦ rakudo/main: Add test for #1871

[12:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a1ccc7d31c

[12:32] <Geth> ¦ rakudo/main: 45a6cdd885 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[12:32] <Geth> ¦ rakudo/main: Add tests for #1965

[12:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/45a6cdd885

[13:15] <[Coke]> the debian stuff is super important!

[13:18] <lizmat> timo ^^

[13:19] <timo> i'll drink to that

[13:28] <Geth> ¦ rakudo/main: c0ad99eafd | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[13:28] <Geth> ¦ rakudo/main: Add test for #5249

[13:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c0ad99eafd

[13:33] <Geth> ¦ rakudo/main: 314eb11437 | (Elizabeth Mattijsen)++ | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[13:33] <Geth> ¦ rakudo/main: Add test for #5119

[13:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/314eb11437

[13:37] <jdv> lizmat: i think i can try again tonight.  thanks.

[14:01] <lizmat> ab5tract: got open tests down to 715, then re-opened almost all of the Fixed in rakuAST with tests so that the issues are more easily discoverable

[14:01] <lizmat> now at 778

[14:02] <lizmat> so that's 63 issue that should be closable when 6.e is released :-)

[14:27] <[Coke]> Nice.

[14:27] <[Coke]> Saw there were a few that were docs-only at this point. I'll try to get any of those converted to raku/doc tickets.

[14:27] <lizmat> thanks!

[14:28] <[Coke]> I'd also like to have a doc run before the 6.e release to get us in a good position, will definitely need some volunteers. :)

[14:29] <timo> i wish someone™ could find the time to hook up some kind of "run code from your browser" thing to the docs website, or at least something cheeky that turns a block of code into a `rakudo -e` commandline with here docs or something that reliably makes spaces and quotes and whatnot work properly

[14:32] <timo> for the debian stuff i'm currently waiting for Dominique to do things

[14:34] <japhb> timo: What's "the debian stuff"?

[14:35] <lizmat> making Rakudo available in the Debian distro

[14:35] <timo> after Dominique stepped down from debian maintenance of the raku packages, raku was briefly in peril of being removed from debian

[14:36] <timo> with some help from [Coke]++ I was able to step in and learn how to do many of the things, and Dominique agreed to sponsor my uploads and such (since a proper DD Debian Developer has to do those)

[14:37] <timo> in between, we had a Non-Maintainer-Upload by someone eager to make rakudo available on LoongArch64 which caused trouble with drifting precompilation files, since rakudo is currently not building reproducible results for the different .moar files that come out of it, like the core setting

[14:38] <timo> so now a bunch of packages, when a rebuild is attempted, will explode violently with a "missing or wrong version of dependency: v6c.bootstrap" or something

[14:38] <lizmat> timo: could you give https://github.com/MoarVM/MoarVM/pull/1847 a bit of a description?   (for the weekly readers)

[14:39] <lizmat> and possibly a more descriptive title?  :-)

[14:39] <timo> working on it

[14:41] <[Coke]> (help from Coke) I assure you I basically did nothing. :)

[14:41] <timo> how's that?

[14:42] <timo> [Coke]: you were there to listen to my concerns, which i felt was a big help

[14:42] <Geth> ¦ rakudo/main: 9f41d2c61a | (Christian Bartolomäus)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/RolePunning.nqp

[14:42] <Geth> ¦ rakudo/main: [JVM] Unbreak module loading

[14:42] <Geth> ¦ rakudo/main: 

[14:42] <Geth> ¦ rakudo/main: For some reason the check for nqp::null doesn't work and the method

[14:42] <Geth> ¦ rakudo/main: returns NQPMu. Maybe TWEAK didn't run correctly?

[14:42] <Geth> ¦ rakudo/main: 

[14:42] <Geth> ¦ rakudo/main: I didn't want to undo all (or more changes) of efeb9d7742. Hopefully

[14:42] <Geth> ¦ rakudo/main: the bandaid can be removed at one point.

[14:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9f41d2c61a

[14:44] <Geth> ¦ rakudo/main: ff50e3297e | (Christian Bartolomäus)++ (committed using GitHub Web editor) | src/core.c/Rakudo/Iterator.rakumod

[14:44] <Geth> ¦ rakudo/main: [JVM] Flatten without overflow/underflow issues

[14:44] <Geth> ¦ rakudo/main: 

[14:44] <Geth> ¦ rakudo/main: If I'm not mistaken, the code relies on a $level parameter of -1

[14:44] <Geth> ¦ rakudo/main: being coerced to a big positive number (due to the usage of uint).

[14:44] <Geth> ¦ rakudo/main: This doesn't work for the JVM backend.

[14:44] <Geth> ¦ rakudo/main: 

[14:44] <Geth> ¦ rakudo/main: Since the commit that introduced the uint parameter,

[14:44] <Geth> ¦ rakudo/main: https://github.com/rakudo/rakudo/commit/74cfe8e373, mentioned some

[14:44] <Geth> ¦ rakudo/main: confusion for the expression JIT on Intel, I didn't dare to change

[14:44] <Geth> ¦ rakudo/main: the code for MoarVM.

[14:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ff50e3297e

[14:48] <[Coke]> timo++ # doing all the hard work while I listen to things and drink caffiene.

[14:51] <Geth> ¦ rakudo/main: d964ec93a9 | (Elizabeth Mattijsen)++ | src/core.c/REPL.rakumod

[14:51] <Geth> ¦ rakudo/main: Make "repl" not shell out with rlwrap

[14:51] <Geth> ¦ rakudo/main: 

[14:51] <Geth> ¦ rakudo/main: Because then it loses its context, and will exit the program when

[14:51] <Geth> ¦ rakudo/main: done in the REPL

[14:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d964ec93a9

[15:42] <Geth> ¦ rakudo: lizmat self-assigned $*USER and $*GROUP are Any on windows. https://github.com/rakudo/rakudo/issues/5066

[16:55] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/10/21/2024-43-advent-alert/

[19:46] <ab5tract> returning somewhat to the discussion of which modules should be available by default: we need to incorporate JSON::Fast or (ideall) a faster JSON parser in core

[19:47] <ab5tract> *ideally

[19:48] <ab5tract> a fast JSON serializer seems like something we should expect at the VM level

[19:49] <coleman> I like the idea of pushing more things into an out-of-the-box installation, but is there an intermediate step that we can champion

[19:50] <coleman> does zef have a concept of "meta-libraries" such that we can rally around a collection of versions installable by zef

[19:50] <coleman> and then from there implement lower-level optimizations

[19:52] <[Coke]> ab5tract: you know Rakudo has builtin JSON support, yes?

[19:53] <ab5tract> you mean the one that's been deprecated for over half a decade?

[19:53] <ab5tract> I'm talking about something that can operate at native speeds

[19:54] <[Coke]> sorry, deprecated?

[19:55] <[Coke]> but sure, if the goal is "faster", excellent. just trying to be clear.

[19:56] <[Coke]> (deprecated) ah, yes, the REPL doesn't complain about that until you exit. ;)

[19:56] <ab5tract> the idea is that JSON::Fast is as fast as NQP gets

[19:56] <ab5tract> Java has faster deserializers at hand

[19:56] <ab5tract> so does C

[19:56] <ab5tract> we don't expose VM hashes to the HLL

[19:57] <ab5tract> this is something that caused JSON::SIMD to be unable to achieve much of a performance differential

[20:01] <ab5tract> leaving JSON support to an after-market module in 2024 is ... a choice

[20:02] <jdv> perl does, no?

[20:05] <ugexe> or java :)

[20:05] <ugexe> but Go got the standard library right

[20:05] <ab5tract> yeah, neither of those are good examples

[20:06] <ab5tract> perl got bitten by too many internalized modules (which I understand)

[20:06] <ab5tract> Java is dumbfoundingly useless by itself

[20:06] <ab5tract> it still ships with a CSV parser, iirc

[20:06] <ab5tract> (perl)

[20:07] <ab5tract> which is a rough equivalent of JSON, era to era

[20:09] <ab5tract> Anyway, the whole utility of the idea is that nothing in third-party space can fill a VM hash.. therefore leaving it to a third-party module necessarily leaves performance optimization opportunities on the table

[20:09] <ab5tract> this isn't the case for Perl, or Java

[20:13] <ugexe> yeah, although it sort of gets into the "well what about the jvm backend"

[20:14] <ugexe> although i guess jvm could just use some module like we already do for other stuff

[20:14] <ugexe> some java module

[20:15] <ugexe> it would complicate things a bit though since the "on jvm do this on moar do that" would presumably need to be applied to a *module* i.e. something in lib/ and not actually in the core

[20:16] <ugexe> anyways im sure that problem can be solved so its probably not worth thinking too hard about

[20:25] <jdv> isnt that just doing xs all over again?

[20:26] <ab5tract> in JVM land I would introduce Kotlin and its builtin serialization

[20:27] <ab5tract> jdv: no, it's really not. it's recognizing that some things deserve to be closer to the VM than NativeCall allows, and those things likewise deserve being in core

[20:28] <ab5tract> ugexe: I'm not sure I understand, exactly. Any VM would ultimately expose JSON serialization as nqp routines. So the core `JSON` library would look the same from the perspective of the HLL

[21:18] *** coleman left
[21:21] *** coleman joined
[21:48] <|Tux|> Rakudo v2024.09-138-gd964ec93a (v6.d) on MoarVM 2024.09-10-g939e64dc8

[21:48] <|Tux|> csv-test-xs-20      0.142 -  0.144

[21:48] <|Tux|> csv-ip5xs           0.261 -  0.262

[21:48] <|Tux|> test-t --race       0.269 -  0.273

[21:48] <|Tux|> test-t              0.396 -  0.403

[21:48] <|Tux|> csv-ip5xs-20        1.095 -  1.099

[21:48] <|Tux|> test-t-20 --race    1.163 -  1.179

[21:48] <|Tux|> csv-parser          1.491 -  1.519

[21:48] <|Tux|> test                1.859 -  1.877

[21:48] <|Tux|> test-t-20           4.723 -  4.813

[21:48] <|Tux|> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[22:41] *** sena_kun left
