[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[09:40] <Geth> ¦ rakudo/main: f25dcacceb | (Elizabeth Mattijsen)++ | lib/NativeCall.rakumod

[09:40] <Geth> ¦ rakudo/main: Only ignore last arg in a Method if '%_'

[09:40] <Geth> ¦ rakudo/main: 

[09:40] <Geth> ¦ rakudo/main: Although technically currently all Methods have a *%_ added to

[09:40] <Geth> ¦ rakudo/main: their signature, it *is* possible to create a Method artificially

[09:40] <Geth> ¦ rakudo/main: that does not have that.  So we need to check for the name here,

[09:40] <Geth> ¦ rakudo/main: as is being done in similar situations in NativeCall.

[09:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f25dcacceb

[10:52] <Geth> ¦ rakudo/main: 92da00a970 | (Elizabeth Mattijsen)++ | lib/NativeCall/Compiler/GNU.rakumod

[10:52] <Geth> ¦ rakudo/main: Streamline NativeCall::Compiler::GNU (part 2/2)

[10:52] <Geth> ¦ rakudo/main: 

[10:52] <Geth> ¦ rakudo/main: Re-imagine mangle_cpp_symbol using mostly nqp ops, hopefully having

[10:52] <Geth> ¦ rakudo/main: a good effect on compiling large nativecall libraries

[10:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/92da00a970

[11:11] <Geth> ¦ rakudo/main: cb6e5080cc | (Elizabeth Mattijsen)++ | lib/NativeCall/Compiler/MSVC.rakumod

[11:11] <Geth> ¦ rakudo/main: Streamline NativeCall::Compiler::MSVC (part 1/N)

[11:11] <Geth> ¦ rakudo/main: 

[11:11] <Geth> ¦ rakudo/main: The :R parameter is always the empty string, so remove all references

[11:11] <Geth> ¦ rakudo/main: to it.

[11:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cb6e5080cc

[11:17] <patrickb> lizmat: Is the cpp stuff used in pure C bindings?

[11:17] <lizmat> I haz no idea

[11:28] <Geth> ¦ rakudo/main: 92113fe479 | (Elizabeth Mattijsen)++ | lib/NativeCall/Compiler/MSVC.rakumod

[11:28] <Geth> ¦ rakudo/main: Streamline NativeCall::Compiler::MSVC (part 2/N)

[11:28] <Geth> ¦ rakudo/main: 

[11:28] <Geth> ¦ rakudo/main: cpp_param_letter either only takes a single positional, or a single

[11:28] <Geth> ¦ rakudo/main: positional and two nameds.  Join the nameds together into a single

[11:28] <Geth> ¦ rakudo/main: optional positional for performance

[11:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/92113fe479

[11:48] <Geth> ¦ rakudo/main: 7766fbbd6e | (Elizabeth Mattijsen)++ | lib/NativeCall/Compiler/MSVC.rakumod

[11:48] <Geth> ¦ rakudo/main: Streamline NativeCall::Compiler::MSVC (part 3/N)

[11:48] <Geth> ¦ rakudo/main: 

[11:48] <Geth> ¦ rakudo/main: - simplify helper sub cpp_param_letter into (mostly) a hash lookup

[11:48] <Geth> ¦ rakudo/main: - use more natives

[11:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7766fbbd6e

[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:36] <Geth> ¦ rakudo/main: ca4bd66c53 | (Elizabeth Mattijsen)++ | lib/NativeCall/Compiler/MSVC.rakumod

[12:36] <Geth> ¦ rakudo/main: Streamline NativeCall::Compiler::MSVC (part 4/4)

[12:36] <Geth> ¦ rakudo/main: 

[12:36] <Geth> ¦ rakudo/main: Re-imagine mangle_cpp_symbol using mostly nqp ops, hopefully having

[12:36] <Geth> ¦ rakudo/main: a good effect on compiling large nativecall libraries

[12:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ca4bd66c53

[12:37] <lizmat> and this concludes my hacking on NativeCall for now

[14:34] <nine> coming

[14:35] <nine> ww

[15:41] *** sena_kun joined
[15:56] *** Altai-man joined
[15:58] *** sena_kun left
[16:09] <ab5tract> I was disappointed to discover recently that C++ remains more or less "un-bindable" without writing C wrapper functions. This wasn't Raku-specific though and also now I can't find the direct source of this information.

[16:10] <ab5tract> It actually seems that Swift has made some headway on this problem: https://github.com/apple/swift/blob/main/docs/CppInteroperability/CppInteroperabilityStatus.md

[16:10] <ab5tract> AFAIK its the only language to get so far

[16:15] <coleman> Google's Carbon is experimental but has CPP interop as an explicit goal. 

[16:20] <ab5tract> ah, nice

[16:20] <ab5tract> that's positioned as a sort of C++ superset or replacement, right?

[17:33] <nine> > make && RAKUDO_RAKUAST=1 ./rakudo-m --ll-exception -Ilib -e 'use Test; plan 1; ok 1'

[17:33] <nine> make: Nothing to be done for 'all'.

[17:33] <nine> 1..1

[17:33] <nine> Slowly getting there again...

[17:33] <nine> ok 1 - 

[17:38] <lizmat> ++nine!

[17:51] *** notna joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:26] <coleman> ab5tract: it is a replacement. There is also another experiment: cpp2. that one is a pure superset iirc. then there is ANOTHER one called the Circle compiler, which is a safer SUBSET. 

[18:27] <coleman> So many CPP things going on 

[18:27] <lizmat> it feels to me that if Swift can do  C++ interop, NativeCall should be able to do that as well?   or am I missing something essential?

[18:28] <coleman> I'd bet on Carbon, because Google will throw 1Billion dollars at it, but cpp2 and Circle work today. they're just more solo dev things.

[18:29] <coleman> I don't know enough about the details to know why it's hard to do it. I imagine there are all kinds of move/reference semantics that would be hard to map

[18:30] <lizmat> greppable6: Test::output

[18:30] <greppable6> lizmat, 5 lines, 3 modules: https://gist.github.com/587467f180147d0e9bb53d7bf005f5e1

[18:31] <lizmat> meh

[18:55] <nine> 72/150 make test passing

[18:57] <lizmat> wow, that's a lot from 0

[19:03] <nine> Despite that I can't believe that I'm doing this again :D

[19:03] <lizmat> yes, it has a definite GLR feel about it, yes?

[19:03] <nine> But yeah, at least it's not gonna be a matter of years this time

[19:16] <notna> could someone comment, or better, approve, https://github.com/rakudo/rakudo/pull/5553, please?!? 

[19:16] <notna> thanks!

[19:20] <nine> notna: at a first glance, the commit messages do not tell me why these changes are needed

[19:23] <notna> @nine: well, as I wrote in the commit message.. there is some history i.e. in https://github.com/rakudo/star/pull/198

[19:25] <nine> notna: links in commit messages are not enough. The rakudo repository is now 18 years old. In this time we have already moved off Perl's RequestTracker and onto GitHub. In time we will move again and those links will stop working. Especially since GitHub is not under our control.

[19:26] <notna> nine: so what exactly do you want to finally approve it? 

[19:26] <nine> notna: apart from that you require the reader to read through a discussion containing some 20 messages for them to hopefully arrive at the right conclusion. I.e. you put all that work on the reader. A commit messages is only written once but likely read many times. E.g. someone will go through these messages and create the ChangeLog. For them to go through dozens of commits, having to open links and 

[19:26] <nine> summarizing what they read is a huge drag.

[19:27] <nine> notna: and last but not least, I and probably others as well read commit messages quite often when digging through some code and trying to understand why it is the way it is. This can even happen off-line (which is the most productive time). Links just hide the interesting content.

[19:28] <nine> notna: so first of all I require the commit message to answer the question "Why is this change needed?". I will then look at the change itself and check if the change actually solves this problem as stated. Then I'll look for whether the commit could cause any unrelated problems.

[19:30] <nine> Good advice in general is to make the reviewer's job as easy as possible. That increases your chances of getting a speedy review :)

[19:30] <coleman> nine can you please tell my coworkers to write good commit messages

[19:30] <notna> nine: so, if I should use https://github.com/rakudo/rakudo/blob/main/.github/ISSUE_TEMPLATE.md ... that's what you say? 

[19:30] <lizmat> nine: it was actually me who tagged you on that issue

[19:31] <nine> coleman: only way to get those is to push back hard in reviews. Ask me how I know :)

[19:31] <coleman> I write beautiful little essays all the time. And they're like "bug fixed now"

[19:31] <coleman> WHAT bug? WHAT fix? aahhhh

[19:31] <notna> and "good" is always an own taste and perspective... if now clearly defined, documented..., right?

[19:32] <nine> coleman (and everyone else who wants a laugh): look at my most favourite commit message of all time: https://github.com/ClickHouse/ClickHouse/commit/0006f2a370deccf5cd7af0d6e6a75e5351c5c626

[19:33] <coleman> Oh that looks like GitHub's dreaded "autosquash" feature in action

[19:33] <coleman> I don't like that thing.

[19:33] <coleman> It's like a trash compactor

[19:33] <nine> coleman: that template is good for bugfixes. Not bad for features. But really, if your commit message is the answer to the question "Why is this change needed?" you're doing well

[19:34] <nine> err notna ^^^

[19:34] <nine> coleman: clearly squashed, but even so, the headlines themselves are hilarious. I mean..... Timmy?!

[19:35] <coleman> i mean i dash stuff off while hacking, but clean it up before submitting I hope

[19:35] <coleman> "please work", "please work pt. 2", "wip", etc.

[19:38] <Geth> ¦ rakudo/main: 6e55b118ed | (Anton Oks)++ (committed using GitHub Web editor) | src/Perl6/Compiler.nqp

[19:38] <Geth> ¦ rakudo/main: Compiler.nqp: Add $rakudo-flavor

[19:38] <Geth> ¦ rakudo/main: 

[19:38] <Geth> ¦ rakudo/main: references:

[19:38] <Geth> ¦ rakudo/main:   https://github.com/rakudo/rakudo/pull/5516

[19:38] <Geth> ¦ rakudo/main:   https://github.com/rakudo/star/pull/198

[19:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6e55b118ed

[19:39] <lizmat> nine: you're off the hook  :-)

[19:40] <ab5tract> notna++

[19:41] <ab5tract> nine: I thought I was keeping track of the chat, but apparently not since I have no idea how we landed back at 72 in make test :)

[19:42] <notna> lizmat: THANK YOU!!! And I'll try to have better commit messages in the future!

[19:42] <lizmat> ab5tract: nine went back to a branch by jnthn from last year's RCS

[19:43] <lizmat> to fix all compile-time shenanigans once and for all

[19:43] <ab5tract> Oh, nice!

[19:43] <lizmat> the branch had gone a bit stale and was not complete yet

[19:43] *** notna left
[19:45] <ab5tract> notna: I’ve also struggled with the commit message moment after doing long discussions across tickets

[19:45] <tellable6> ab5tract, I'll pass your message to notna

[20:28] <ugexe> still needed more review tbh

[20:29] <ugexe> for example it doesn't explicitly close the file handle it opens

[20:33] <lizmat> ugexe: other things?

[20:35] <ugexe> im not sure if how it choses path separator is correct on different windows variations, i.e. if it does the same thing as $*SPEC.dir-sep

[20:35] <lizmat> this is NQP land, so $*SPEC doesn't exist yet

[20:37] <Geth> ¦ rakudo/main: c888a1166d | (Elizabeth Mattijsen)++ | src/Perl6/Compiler.nqp

[20:37] <Geth> ¦ rakudo/main: Make sure we close the flavor file

[20:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c888a1166d

[20:37] <ugexe> the env variable also doesn't make sense to me

[20:38] <lizmat> you mean: the name, or the fact that you can set it with a env variable?

[20:38] <ugexe> if we have a file, an environment variable isn't also needed. further, the environment variable is able to influence the output in a way that could potentially confuse users

[20:39] <ugexe> like `\b\b\b\b\b\b\bDonate to Raku <some malicious link>`

[20:40] <lizmat> well, if people are able to affect your environment variables, you might have a bigger issue?

[20:41] <lizmat> and if you're thinking Docker images: adding a flavor file there is also then pretty trivial?

[20:41] *** squashable6 left
[20:41] *** shareable6_ left
[20:41] *** quotable6_ left
[20:41] *** nativecallable6_ left
[20:41] *** benchable6_ left
[20:41] *** bisectable6_ left
[20:41] *** statisfiable6 left
[20:41] *** reportable6 left
[20:41] *** notable6_ left
[20:41] *** bloatable6_ left
[20:41] *** unicodable6_ left
[20:41] *** evalable6_ left
[20:41] *** committable6_ left
[20:41] *** tellable6_ left
[20:41] *** releasable6_ left
[20:41] *** linkable6_ left
[20:41] *** sourceable6_ left
[20:41] *** coverable6_ left
[20:41] *** greppable6_ left
[20:43] <ugexe> HLL::SysConfig.path-sep()

[20:46] <lizmat> % nqp -e 'say(HLL::SysConfig.path-sep())'

[20:46] <lizmat> Cannot look up attributes in a HLL::SysConfig type object. Did you forget a '.new'?

[20:47] <lizmat> I guess a "new" needs to be added :-)

[20:49] <ugexe> https://github.com/Raku/nqp/blob/fe55b7bf853550d188c12a7824de4e9c8f26d3e1/src/HLL/SysConfig.nqp#L16-L24

[20:50] <ugexe> looking at how all that determine install dir i would ask why that logic isn't emulated in the pr

[20:51] <lizmat> I think the "$!path-sep := nqp::backendconfig<osname> eq 'MSWin32' ?? '\\' !! '/';" code comes from https://github.com/Raku/nqp/blob/fe55b7bf853550d188c12a7824de4e9c8f26d3e1/src/HLL/SysConfig.nqp#L14

[20:52] *** sjn left
[20:53] <Geth> ¦ rakudo/main: c8855956dc | (Elizabeth Mattijsen)++ | src/Perl6/Compiler.nqp

[20:53] <Geth> ¦ rakudo/main: Use HLL::SysConfig to obtain path-sep

[20:53] <Geth> ¦ rakudo/main: 

[20:53] <Geth> ¦ rakudo/main: As suggested by ugexe++

[20:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c8855956dc

[20:53] <ugexe> right

[20:54] <ugexe> environment variable also has the potential to be confusing for anyone using e.g. rakubrew

[20:54] <lizmat> why?

[20:54] <ugexe> if the environment variable is used to show the flavor for some rakudo install i have, that shouldn't apply to other unrelated rakudo installs

[20:54] <lizmat> ah, gotcha

[20:54] <lizmat> ok, that clinches the env variable idea for me

[20:58] <ugexe> its too bad there isn't something like BEGIN either, since it feels like it should only ever have to be determined once

[21:00] <lizmat> hmmm

[21:05] <lizmat> I wonder if we can tweak tools/build/gen-cat.nqp to get the flavor in the actual code being compiled

[21:06] <ugexe> that'd probably be more ideal

[21:07] <lizmat> then we could just use the env variable at compile time

[21:07] <lizmat> no need to have a file on the file system then

[21:07] <lizmat> I'll sleep on tha

[21:07] <lizmat> t

[21:09] *** sjn joined
[21:11] <ugexe> yeah

[21:12] <ugexe> m: use Perl6::Compiler:from<NQP>; say Perl6::Compiler.lvs.as-perl6("");

[21:12] <camelia> rakudo-moar c8855956d: OUTPUT: «Don't know how to create Perl6-style language version from Str␤  in block <unit> at <tmp> line 1␤␤»

[21:18] <nine> Maybe the whole thing should just go back to the drawing board?

[21:52] <Geth> ¦ rakudo/main: f253d68b85 | (Elizabeth Mattijsen)++ | 2 files

[21:52] <Geth> ¦ rakudo/main: Generate Rakudo Flavor into the actual code

[21:52] <Geth> ¦ rakudo/main: 

[21:52] <Geth> ¦ rakudo/main: Adapt tools/build/gen-cat.nqp so that it will look for the string

[21:52] <Geth> ¦ rakudo/main:  #RAKUDO_FLAVOR# in the source being processed.  If found, it will

[21:52] <Geth> ¦ rakudo/main: look in the environment for the RAKUDO_FLAVOR variable.  If that is

[21:52] <Geth> ¦ rakudo/main: set, then it will replace the #RAKUDO_FLAVOR# target with a

[21:52] <Geth> ¦ rakudo/main: "' $flavor'".  If it is not found, it will generate an empty string

[21:52] <Geth> ¦ rakudo/main: <…commit message has 18 more lines…>

[21:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f253d68b85

[23:28] *** Altai-man left
[23:39] *** kjp left
[23:40] *** kjp joined
