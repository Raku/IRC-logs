[00:42] <Geth> ¦ rakudo/fix-negated-junctions: cf867f8da0 | ab5tract++ | src/core.c/OperatorProperties.rakumod

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: Whitespace

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: review: https://github.com/rakudo/rakudo/commit/cf867f8da0

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: bc518ee0b8 | ab5tract++ | 8 files

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: Revision gating is not working with `&infix:<ne>`

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: 

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: I've tried all sorts of things, including moving all the sub

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: declarations into `core_epilogue.rakumod` ... with some approaches the

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: CORE.setting fails due to things happening too early or (as is the

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: case with the current commented out code) using `ne` just causes

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: an infinite hang.

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: <…commit message has 7 more lines…>

[00:42] <Geth> ¦ rakudo/fix-negated-junctions: review: https://github.com/rakudo/rakudo/commit/bc518ee0b8

[03:15] *** japhb left
[03:17] *** japhb joined
[03:30] *** librasteve_ left
[03:33] *** japhb left
[03:37] *** japhb joined
[07:31] <Geth> ¦ rakudo: usev6++ created pull request #5692: [JVM] Remove workarounds for broken deserialization of nqp::null

[07:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5692

[08:54] <bartolin_> m: my $m = "foobar" ~~ /oo/; say $m.gist

[08:54] <camelia> rakudo-moar 3f0f974e4: OUTPUT: «｢oo｣␤»

[08:54] <bartolin_> This fails on the JVM backend with "Cannot dispatch to method chomp on Match because it is not inherited or done by Str"

[08:55] <bartolin_> The backtrace points to https://github.com/rakudo/rakudo/blob/3f0f974e4b/src/core.c/Match.rakumod#L397

[08:55] <bartolin_> m: "foo".Match::chomp  ## same error

[08:55] <camelia> rakudo-moar 3f0f974e4: OUTPUT: «Cannot dispatch to method chomp on Match because it is not inherited or done by Str␤  in block <unit> at <tmp> line 1␤␤»

[08:56] <bartolin_> But now I wonder, why/how this works on Moar. Does it take a different code path and never reaches that line?

[09:00] *** bartolin_ left
[09:00] *** bartolin joined
[09:48] *** sena_kun joined
[10:55] <ab5tract> the  entire dispatch pipeline differs between the two now. I suspect this is a side effect of this

[11:06] <Geth> ¦ rakudo/main: 3470f83867 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | 2 files

[11:06] <Geth> ¦ rakudo/main: [JVM] Remove workarounds for broken deserialization of nqp::null

[11:06] <Geth> ¦ rakudo/main: 

[11:06] <Geth> ¦ rakudo/main: This reverts commit 9f41d2c61a14ce468128c17334ca663ef8765c98.

[11:06] <Geth> ¦ rakudo/main: 

[11:06] <Geth> ¦ rakudo/main: The bandaid is no longer needed, because now nqp::null gets deserialized

[11:06] <Geth> ¦ rakudo/main: correctly: https://github.com/Raku/nqp/pull/829

[11:06] <Geth> ¦ rakudo/main: 

[11:06] <Geth> ¦ rakudo/main: This reverts commit 555f4b0049c58bf89301bdc06d9cbce0dbff1958.

[11:06] <Geth> ¦ rakudo/main: 

[11:06] <Geth> ¦ rakudo/main: The bandaid is no longer needed, because now nqp::null gets deserialized

[11:06] <Geth> ¦ rakudo/main: correctly: https://github.com/Raku/nqp/pull/829

[11:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3470f83867

[11:49] <Geth> ¦ nqp/main: 033ffd3a08 | ab5tract++ (committed using GitHub Web editor) | src/HLL/Compiler.nqp

[11:49] <Geth> ¦ nqp/main: Add is-interactive to HLL::Compiler (#827)

[11:49] <Geth> ¦ nqp/main: 

[11:49] <Geth> ¦ nqp/main: This commit nukes the hard-to-grok distinction of

[11:49] <Geth> ¦ nqp/main: `interactive` vs `non-interactive` repl-modes and

[11:49] <Geth> ¦ nqp/main: replaces it with the following options:

[11:49] <Geth> ¦ nqp/main: 

[11:49] <Geth> ¦ nqp/main:     - `tty`

[11:49] <Geth> ¦ nqp/main: <…commit message has 21 more lines…>

[11:49] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/033ffd3a08

[12:03] <Geth> ¦ rakudo/main: 167d1dd9a8 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[12:03] <Geth> ¦ rakudo/main: Bump NQP to get new REPL mode settings ab5tract++

[12:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/167d1dd9a8

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: 3470f83867 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | 2 files

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: [JVM] Remove workarounds for broken deserialization of nqp::null

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: 

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: This reverts commit 9f41d2c61a14ce468128c17334ca663ef8765c98.

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: 

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: The bandaid is no longer needed, because now nqp::null gets deserialized

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: correctly: https://github.com/Raku/nqp/pull/829

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: 

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: This reverts commit 555f4b0049c58bf89301bdc06d9cbce0dbff1958.

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: 

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: The bandaid is no longer needed, because now nqp::null gets deserialized

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: correctly: https://github.com/Raku/nqp/pull/829

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: review: https://github.com/rakudo/rakudo/commit/3470f83867

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: 167d1dd9a8 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: Bump NQP to get new REPL mode settings ab5tract++

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: review: https://github.com/rakudo/rakudo/commit/167d1dd9a8

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: 03394c72d8 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 3 files

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: Merge branch 'main' into fail-gracefully-outside-of-supported-terminal-emulator

[12:04] <Geth> ¦ rakudo/fail-gracefully-outside-of-supported-terminal-emulator: review: https://github.com/rakudo/rakudo/commit/03394c72d8

[12:05] <Geth> ¦ rakudo/main: 6c088c8cfc | ab5tract++ (committed using GitHub Web editor) | 5 files

[12:05] <Geth> ¦ rakudo/main: Fail gracefully when REPL is initialized without TTY

[12:05] <Geth> ¦ rakudo/main: 

[12:05] <Geth> ¦ rakudo/main: This patch was originally intended to address R#4378 (#4378)[^1],

[12:05] <Geth> ¦ rakudo/main: but that problem is actually unresolvable as long as starting

[12:05] <Geth> ¦ rakudo/main: `raku` outside of a TTY automatically engages the wait-until-EOF

[12:05] <Geth> ¦ rakudo/main: mode (the same behavior as calling `perl` without `-e`).

[12:05] <Geth> ¦ rakudo/main: 

[12:05] <linkable6> R#4378 [closed]: https://github.com/rakudo/rakudo/issues/4378 [Windows] `Git for Bash` has no TTY, so raku opens in "non-interactive" mode

[12:05] <Geth> ¦ rakudo/main: <…commit message has 11 more lines…>

[12:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6c088c8cfc

[12:28] <bartolin> lizmat: Could you maybe shed some light on my earlier question regarding the usage of "Match::chomp" in https://github.com/rakudo/rakudo/blob/3f0f974e4b/src/core.c/Match.rakumod#L397? I'd like to understand how that works with Moar.

[12:29] <lizmat> normally, method lookup starts with the class of the invocant

[12:30] <bartolin> This would be Str in this case, right?

[12:30] <lizmat> with a fully qualified method call, you're letting the method lookup start with the given class

[12:31] <lizmat> yeah, looks like

[12:31] <bartolin> ok, that's what I thought as well. But why doesn't it blow up?

[12:31] <bartolin> m: "foo".Match::chomp

[12:31] <camelia> rakudo-moar 6c088c8cf: OUTPUT: «Cannot dispatch to method chomp on Match because it is not inherited or done by Str␤  in block <unit> at <tmp> line 1␤␤»

[12:31] <lizmat> because .chomp is Cool ?

[12:32] *** donaldh_ joined
[12:32] <lizmat> and Match is as well ?

[12:32] <bartolin> So it takes the implementation from Cool::chomp? That makes some sense to me.

[12:33] <bartolin> But why doesn't it do the for the above evaluation?

[12:33] <lizmat> the proto for .chomp lives in Cool

[12:34] <lizmat> m: say 42.chomp

[12:34] <camelia> rakudo-moar 6c088c8cf: OUTPUT: «42␤»

[12:34] <lizmat> m: say 42.Match::chomp

[12:34] <camelia> rakudo-moar 6c088c8cf: OUTPUT: «Cannot dispatch to method chomp on Match because it is not inherited or done by Int␤  in block <unit> at <tmp> line 1␤␤»

[12:34] <lizmat> hmmm

[12:35] <lizmat> m: "foo" ~~ / foo /; dd $/.Match::chomp

[12:35] <camelia> rakudo-moar 6c088c8cf: OUTPUT: «"foo"␤»

[12:35] *** donaldh left
[12:35] <lizmat> m: "foo" ~~ / foo /; dd $/.chomp

[12:35] <camelia> rakudo-moar 6c088c8cf: OUTPUT: «"foo"␤»

[12:36] <lizmat> m: "foo\n" ~~ / .* /; dd $/.chomp

[12:36] <camelia> rakudo-moar 6c088c8cf: OUTPUT: «"foo"␤»

[12:36] <lizmat> m: "foo\n" ~~ / .* /; dd $/.Match::chomp

[12:36] <camelia> rakudo-moar 6c088c8cf: OUTPUT: «"foo"␤»

[12:36] <lizmat> ok, I have no idea why the Match:: is there

[12:38] <bartolin> It first came in with https://github.com/rakudo/rakudo/commit/f2c394120f where you qualified a lot of methods. Maybe it was just an oversight that in this case the invocant was not of type Match?

[12:39] * bartolin is still puzzled why it "just works" there, but not if one does "foo".Match::chomp

[12:40] * lizmat is now also confuse

[12:40] <lizmat> d

[12:40] <lizmat> apparently in b64e683 I once tried to clean up that mess... but it broke stuff

[12:40] <lizmat> please feel free to remove the Match:: there

[12:41] <lizmat> and see if that fixes / breaks things

[12:42] <bartolin> ok, I'll try that out. Thanks for looking

[12:43] <lizmat> maybe in MoarVM the type hierarchy is subtly different..  dunno

[12:50] *** sena_kun left
[13:13] <ab5tract> It could be something subtle that happens in the dispatcher too

[13:17] <bartolin> I'll take a look there as well. but first my spectest for the JVM needs to finish ;)

[13:40] <Geth> ¦ rakudo/main: 238e313ebf | (Elizabeth Mattijsen)++ | src/Perl6/Compiler.nqp

[13:40] <Geth> ¦ rakudo/main: Fix typo in help

[13:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/238e313ebf

[16:16] <Geth> ¦ rakudo: usev6++ created pull request #5693: Don't use Match::chomp on string

[16:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5693

[17:58] <ab5tract> I think I've been overthinking the necessary changes for revising &METAOP_NEGATE

[17:59] <ab5tract> I've been doing `$op.($op.(|c), False)`

[18:00] <ab5tract> but I don't think there's any actual cases where `$op.(|c) == False` wouldn't work

[18:00] *** librasteve_ joined
[18:07] *** sena_kun joined
[18:13] *** Geth left
[18:13] *** Geth joined
[18:14] <Geth> ¦ nqp/main: 5a04b6411a | (Christian Bartolomäus)++ (committed using GitHub Web editor) | 2 files

[18:14] <Geth> ¦ nqp/main: [JVM] Fix nqp::attrinited for attribute set to null

[18:14] <Geth> ¦ nqp/main: 

[18:14] <Geth> ¦ nqp/main: It was wrong to use nqp::isnull for this check with ba4dc47799.

[18:14] <Geth> ¦ nqp/main: An attribute that has been set to nqp::null is still initialized.

[18:14] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/5a04b6411a

[18:34] <Geth> ¦ rakudo/main: b1f741f308 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[18:34] <Geth> ¦ rakudo/main: [JVM] Bump NQP to get bartolin++ attrinited fixes

[18:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b1f741f308

[18:51] <ab5tract> The most major open question is whether `ne` can be adjusted in base, because revision gating is not working for it

[18:56] <ab5tract> m: say do if 1 ne 1|3|4 { 0 } else { 1 }

[18:56] <camelia> rakudo-moar b1f741f30: OUTPUT: «1␤»

[18:58] <ab5tract> I'll have to dig into how discussions evolved into deciding that this was the behavior to go with

[19:00] <lizmat> there have been many

[19:01] <lizmat> have at least 1 closed PR that tried to address this

[19:09] <ab5tract> I'm hoping that revision gating in general will make it more palatable

[19:31] <ab5tract> FWIW, I personally do not think that `unless $foo eq $bar` --> `if $foo ne $bar` is more valuable than having `ne` DWIM for junctions, but this is obviously a controversial topic

[19:37] <Geth> ¦ roast: 3c50d427e4 | (Christian Bartolomäus)++ | 13 files

[19:37] <Geth> ¦ roast: [JVM] Fudge some failing tests

[19:37] <Geth> ¦ roast: 

[19:37] <Geth> ¦ roast: Hopefully we can get back these tests. But for now it's better to fudge

[19:37] <Geth> ¦ roast: them, so that regressions can be noticed.

[19:37] <Geth> ¦ roast: 

[19:37] <Geth> ¦ roast: Unfortunately there are more failing tests, but those look harder to

[19:37] <Geth> ¦ roast: fudge from a first glance. I'll try to further look into them.

[19:37] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3c50d427e4

[20:01] <lizmat> bisectable6: $/ = 42; say "cow cow">>.match(:global, /co(.)/); say $/

[20:01] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[20:02] <bisectable6> lizmat, ¦6c (85 commits): «((｢cow｣␤ 0 => ｢w｣ ｢cow｣␤ 0 => ｢w｣))␤42␤»

[20:02] <bisectable6> lizmat, Nothing to bisect!

[20:10] <lizmat> bisectable6: old=2023.04 $/ = 42; say "cow cow">>.match(:global, /co(.)/); say $/

[20:10] <bisectable6> lizmat, On both starting points (old=2023.04 new=b1f741f) the exit code is 0 and the output is identical as well

[20:10] <bisectable6> lizmat, Output on both points: «((｢cow｣␤ 0 => ｢w｣ ｢cow｣␤ 0 => ｢w｣))␤42␤»

[20:11] <lizmat> bisectable6: old=2020.01 $/ = 42; say "cow cow">>.match(:global, /co(.)/); say $/

[20:11] <bisectable6> lizmat, On both starting points (old=2020.01 new=b1f741f) the exit code is 0 and the output is identical as well

[20:11] <bisectable6> lizmat, Output on both points: «((｢cow｣␤ 0 => ｢w｣ ｢cow｣␤ 0 => ｢w｣))␤42␤»

[20:13] <Geth> ¦ nqp: usev6++ created pull request #831: [JVM] Restore size of curlonglit array

[20:13] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/831

[20:42] <Geth> ¦ rakudo: usev6++ created pull request #5695: [JVM] Unbreak usage of "hash" with named args

[20:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5695

[20:46] <Geth> ¦ rakudo/main: d3d08962a0 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | src/core.c/Hash.rakumod

[20:46] <Geth> ¦ rakudo/main: [JVM] Unbreak usage of "hash" with named args

[20:46] <Geth> ¦ rakudo/main: 

[20:46] <Geth> ¦ rakudo/main: A couple of spectests were failing when "hash" was used with named

[20:46] <Geth> ¦ rakudo/main: arguments, like so:

[20:46] <Geth> ¦ rakudo/main: 

[20:46] <Geth> ¦ rakudo/main:   $ ./rakudo-j -e 'say hash(a => 1)'

[20:46] <Geth> ¦ rakudo/main:   Unexpected named argument 'a' passed

[20:46] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[20:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d3d08962a0

[21:07] <Geth> ¦ nqp/main: c4b44e979a | (Christian Bartolomäus)++ | src/vm/jvm/runtime/org/raku/nqp/runtime/ThreadContext.java

[21:07] <Geth> ¦ nqp/main: [JVM] Restore size of curlonglit array

[21:07] <Geth> ¦ nqp/main: 

[21:07] <Geth> ¦ nqp/main: This was reduced in https://github.com/Raku/nqp/commit/f02dbe4c9b, but

[21:07] <Geth> ¦ nqp/main: I'm now seeing ArrayIndexOutOfBoundsExceptions in a variety of

[21:07] <Geth> ¦ nqp/main:  spectests.

[21:07] <Geth> ¦ nqp/main: 

[21:07] <Geth> ¦ nqp/main: One evaluation that died with this error was the following (from roast's

[21:07] <Geth> ¦ nqp/main: <…commit message has 7 more lines…>

[21:07] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/c4b44e979a

[21:19] <Geth> ¦ roast: 298aaac4d4 | (Christian Bartolomäus)++ | 2 files

[21:19] <Geth> ¦ roast: [JVM] Unfudge tests for "hash" with named arg

[21:19] <Geth> ¦ roast: 

[21:19] <Geth> ¦ roast: This works again (faster than I thought). Fixed with

[21:19] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/d3d08962a0

[21:19] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/298aaac4d4

[21:38] <bartolin> Hh, I just noticed https://github.com/rakudo/rakudo/commit/aca5e4c129. So ab5tract++ already digged into that, nice. I'm seeing test failures in that direction, but the commit should give me a good start. (But not today.)

[22:47] *** sena_kun left
