[00:03] <MasterDuke> every once in a while i think about trying to at least rebase it up to HEAD of main, but it's so old that it would be quite an effort

[00:04] <MasterDuke> but if that branch ever replaced the existing jvm backend then we would have a good path toward using java (and other langs!) libs

[00:36] <japhb> MasterDuke: Maybe rebase on top of each release one at a time and see how far you can get before it gets extra difficult?  That would probably reduce the "background bitrot" a bit

[00:38] <japhb> Or at least constrain the range in which pain might reside

[02:10] *** MasterDuke left
[07:05] * patrickb plans to work on an Inline::Java some time in the future. That's a different approach to using JVM libs.

[09:28] *** sena_kun joined
[10:53] <Geth> ¦ rakudo/main: e294a3e042 | (Elizabeth Mattijsen)++ | 2 files

[10:53] <Geth> ¦ rakudo/main: Always use Routine.dispatch_order to get candidates

[10:53] <Geth> ¦ rakudo/main: 

[10:53] <Geth> ¦ rakudo/main: Make sure that the serialization context is set correct when

[10:53] <Geth> ¦ rakudo/main: generating the sorted list.

[10:53] <Geth> ¦ rakudo/main: 

[10:53] <Geth> ¦ rakudo/main: Without it, we break the reproducibility test in "make test"

[10:53] <Geth> ¦ rakudo/main: although I have yet to come up with a reason why that is.

[10:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e294a3e042

[12:10] *** MasterDuke joined
[12:14] <Geth> ¦ rakudo/main: fa853abc7f | (Daniel Green)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[12:14] <Geth> ¦ rakudo/main: Revert 99f52bc for the JVM, unbreaking its build

[12:14] <Geth> ¦ rakudo/main: 

[12:14] <Geth> ¦ rakudo/main: Without this the JVM build dies while compiling CORE.c.setting with:

[12:14] <Geth> ¦ rakudo/main: Cannot call infix:<+|>; no signatures match

[12:14] <Geth> ¦ rakudo/main:   in throw_or_die (gen/jvm/Metamodel.nqp:51)

[12:14] <Geth> ¦ rakudo/main:   in <anon> (gen/jvm/BOOTSTRAP/v6c.nqp:4179)

[12:14] <Geth> ¦ rakudo/main:   in <anon> (gen/jvm/BOOTSTRAP/v6c.nqp:4149)

[12:14] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[12:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fa853abc7f

[13:22] <Geth> ¦ rakudo/main: 3eed834ccf | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:22] <Geth> ¦ rakudo/main: Abstract the graph checking logic into a Node class

[13:22] <Geth> ¦ rakudo/main: 

[13:22] <Geth> ¦ rakudo/main: This allowed for simplification and way fewer hash lookups and

[13:22] <Geth> ¦ rakudo/main: better readability.  Execution speed improved but only very

[13:22] <Geth> ¦ rakudo/main: slightly better than noise levels for make (spec)test.

[13:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3eed834ccf

[15:32] *** MasterDuke left
[18:31] <Geth> ¦ rakudo/main: 43017b218f | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[18:31] <Geth> ¦ rakudo/main: Use single constant

[18:31] <Geth> ¦ rakudo/main: 

[18:31] <Geth> ¦ rakudo/main: It looks like nqp::const::foo +| nqp::const::bar is *not* statically

[18:31] <Geth> ¦ rakudo/main: optimized into a single constant value (at least judging from the

[18:31] <Geth> ¦ rakudo/main: QAST with --target==optimize.

[18:31] <Geth> ¦ rakudo/main: 

[18:31] <Geth> ¦ rakudo/main: Since nqp::const::foo handling is really a MAST operation, perhaps

[18:31] <Geth> ¦ rakudo/main: that would be the place to optimize nqp::const::foo +| nqp::const::bar

[18:31] <Geth> ¦ rakudo/main: handling.

[18:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/43017b218f

[19:03] <Geth> ¦ rakudo/main: 4d91de6d1b | (Elizabeth Mattijsen)++ | 4 files

[19:03] <Geth> ¦ rakudo/main: Update internal documentation on attributes

[19:03] <Geth> ¦ rakudo/main: 

[19:03] <Geth> ¦ rakudo/main: of classes created in the bootstrap: a few new parameters were

[19:03] <Geth> ¦ rakudo/main: forgotten

[19:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4d91de6d1b

[19:23] <lizmat> .tell MasterDuke re JVM issues in NQP, maybe it needs a bootstrap ?

[19:23] <tellable6> lizmat, I'll pass your message to MasterDuke

[19:47] <Geth> ¦ nqp/main: 216a063547 | (Elizabeth Mattijsen)++ | 2 files

[19:47] <Geth> ¦ nqp/main: Add nqp::const::BIND_(RESULT|VAL)_xxx constants

[19:47] <Geth> ¦ nqp/main: 

[19:47] <Geth> ¦ nqp/main: So that they can be used instead of just numbers like 0, 1, 2, 3

[19:47] <Geth> ¦ nqp/main: or 10 for bind value types, for instance.

[19:47] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/216a063547

[19:47] <Geth> ¦ nqp/main: 106c9c8503 | (Elizabeth Mattijsen)++ | 10 files

[19:47] <Geth> ¦ nqp/main: Bootstrap MoarVM to get nqp::const::BIND_(RESULT|VAL)_ constants

[19:47] <Geth> ¦ nqp/main: 

[19:47] <Geth> ¦ nqp/main: So that we can use them inside NQP as well

[19:47] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/106c9c8503

[19:48] <lizmat> .tell MasterDuke I'll wait with using them inside NQP until the JVM has been bootstrapped  (https://github.com/Raku/nqp/commit/106c9c8503)

[19:48] <tellable6> lizmat, I'll pass your message to MasterDuke

[20:00] <Geth> ¦ rakudo/main: b4b895d799 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[20:00] <Geth> ¦ rakudo/main: Bump NQP to get nqp::const::BIND_(RESULT|VAL)_xxx constants

[20:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b4b895d799

[20:00] *** MasterDuke joined
[20:14] <Geth> ¦ nqp/main: 306001e2da | (Daniel Green)++ | 10 files

[20:14] <Geth> ¦ nqp/main: Bootstrap JVM backend

[20:14] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/306001e2da

