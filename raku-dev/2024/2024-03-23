[00:05] *** sena_kun left
[00:48] *** MasterDuke joined
[04:13] *** Voldenet_ joined
[04:14] *** Voldenet left
[04:14] *** Voldenet_ is now known as Voldenet

[05:14] *** Voldenet_ joined
[05:15] *** Voldenet left
[05:15] *** Voldenet_ is now known as Voldenet

[09:52] *** sena_kun joined
[10:02] <Geth> ¦ rakudo/main: 196fbee64e | (Stefan Seifert)++ | 3 files

[10:02] <Geth> ¦ rakudo/main: RakuAST: fix accessing 6.e PseudoStash at compile time

[10:02] <Geth> ¦ rakudo/main: 

[10:02] <Geth> ¦ rakudo/main: 6.e PseudoStash needs a $!package if one tries to make lookups in CORE::

[10:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/196fbee64e

[10:02] <Geth> ¦ rakudo/main: 3853a0f8be | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[10:02] <Geth> ¦ rakudo/main: RakuAST: fix look up of our scoped subs in my scoped packages at compile time

[10:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3853a0f8be

[10:02] <nine> 3 more

[10:08] <lizmat> nine++

[10:11] <nine> m: my @a .= :a; dd @a

[10:11] <camelia> rakudo-moar 3853a0f8b: OUTPUT: «Mu @a = [Pair, "a", Bool::True]␤»

[10:12] <nine> One can discover bizarre things when studying the source

[10:22] <lizmat> wtf?

[10:23] <lizmat> what would be the use of "my @a .=" anyway?  shouldn't that be a compilation error

[11:05] <nine> Well if Array had a method like list-of-random-numbers then it would actually make sense.

[11:08] <lizmat> Hmmm...

[11:10] <lizmat> but my @a .= :a feels like it should be a compile time error ?

[11:11] <nine> Yes, that seems quite unintended.

[13:59] <Geth> ¦ rakudo/main: 72a4802da8 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/CurriedRoleHOW.nqp

[13:59] <Geth> ¦ rakudo/main: Streamline Metamodel::CurriedRoleHOW

[13:59] <Geth> ¦ rakudo/main: 

[13:59] <Geth> ¦ rakudo/main: - changed for loops to while loops where appropriate

[13:59] <Geth> ¦ rakudo/main: - move a lot of innitializing logic to a TWEAK method

[13:59] <Geth> ¦ rakudo/main: - remove duplicate call to update_role_typecheck_list

[13:59] <Geth> ¦ rakudo/main: - abstracted a lot of logic in subroutines and methods

[13:59] <Geth> ¦ rakudo/main: - make sure complete_parameterization is thread-safe

[14:00] <Geth> ¦ rakudo/main: - add some more internal documentation

[14:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/72a4802da8

[14:28] <MasterDuke> hm, wonder if https://dev.azure.com/jjmerelo0004/jjmerelo/_build/results?buildId=812&view=logs&j=ab856b8b-876f-5746-08e5-94ac68404358&t=a0aacb72-bf99-5b6c-eb59-f6fa751848ea&l=110 has something to do with the long path problem on windows. since the java actually compiles, it's just running the executable after it's built that seems to die

[14:34] <Geth> ¦ rakudo/main: 18abe8c32f | (Elizabeth Mattijsen)++ | 6 files

[14:34] <Geth> ¦ rakudo/main: Eradicate Metamodel::InvocationProtocol role

[14:34] <Geth> ¦ rakudo/main: 

[14:34] <Geth> ¦ rakudo/main: from Moar builds, rather than making it an empty role and still

[14:34] <Geth> ¦ rakudo/main: include that everywhere.

[14:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/18abe8c32f

[14:35] *** notna joined
[14:44] <ugexe> why is that still building under someone's personal account?

[14:47] <ugexe> MasterDuke: I'm not sure if that would hit long path issue or not. it usually ends up being a problem when we use a bunch of sha1s as path parts

[14:48] <ugexe> oh i already opened an issue about azure running under someones personal account - https://github.com/Raku/nqp/issues/805

[14:48] <ugexe> seems patrickb needs admin permissions to Raku/nqp to fix it

[14:50] <lizmat> patrickb is now admin on Raku/nqp

[15:12] *** notna left
[19:00] <releasable6> Next release in ≈4 days and ≈23 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:13] *** [Coke] left
[19:15] *** [Coke] joined
[19:20] *** vrurg joined
[19:20] *** vrurg_ left
[19:20] *** [Coke]_ joined
[19:21] *** [Coke] left
[19:46] <ab5tract> Before I dive too deep into things, I want to double check whether there is even a possible/reasonable way to resolve R#5500

[19:46] <linkable6> R#5500 [open]: https://github.com/rakudo/rakudo/issues/5500 [consistency][CORE.setting] Array.splice insists on flattening the replacement

[20:02] *** vrurg left
[20:03] *** vrurg joined
[20:20] <ab5tract> I guess a new splice method candidate could be added via something like `:no-expand` 

[21:18] *** [Coke]_ is now known as [Coke]

[22:14] *** sena_kun left
[22:48] *** [Coke]_ joined
[22:49] *** [Coke] left
