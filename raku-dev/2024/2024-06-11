[04:47] *** kjp left
[04:48] *** kjp_ joined
[07:34] *** samebchase left
[07:36] *** samebchase joined
[08:28] *** sena_kun joined
[11:21] *** Altai-man joined
[11:25] *** sena_kun left
[12:45] *** raiph joined
[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer: aced91cf4c | (Elizabeth Mattijsen)++ | 2 files

[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer: Improve .flat logic

[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer: 

[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer: - add positional to indicate number of levels to flatten.  Defaults

[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer:   to Inf / Whatever

[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer: - add boolean named arg :hammer.  If specified with a true value,

[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer:   will disregard any containerization on Iterables, and flatten

[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer:   those iterables.  Defaults to False

[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer: 

[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer: Inspired by https://github.com/Raku/problem-solving/issues/431

[12:53] <Geth> ¦ rakudo/lizmat-flat-hammer: review: https://github.com/rakudo/rakudo/commit/aced91cf4c

[12:54] <Geth> ¦ rakudo: lizmat++ created pull request #5594: Improve `.flat` logic

[12:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5594

[13:07] <ugexe> can't that already be done with .tree?

[13:07] <ugexe> i'm not sure, i just remember .tree being able to do something with arbitrarily nested data structures

[13:19] <lizmat> I guess:  .tree(*.flat xx 10) would do 10 levels of flattening

[13:19] <lizmat> but infinite levels of flattening are not supported:

[13:19] <lizmat> m: dd (1,$(2,$(3,(4,5,()))),42,43,(44,45)).tree(*.flat xx 10);

[13:19] <camelia> rakudo-moar 8518cc49f: OUTPUT: «(1, 2, 3, 4, 5, 42, 43, 44, 45).Seq␤»

[13:19] <lizmat> m: dd (1,$(2,$(3,(4,5,()))),42,43,(44,45)).tree(*.flat xx *);

[13:19] <camelia> rakudo-moar 8518cc49f: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[13:48] <ugexe> Should it work though? if yes I'd probably argue *that* should be the supported way of multi-level flattening

[13:52] <lizmat> well... arguably it should work, but whether that would need to be the (only) way to support multi-levek flattening?

[13:52] <lizmat> it would require you to know abour .tree *and*  *.flat xx *

[13:52] <lizmat> the latter I think is definitely not for newbies

[13:55] <ugexe> we have to consider huffmanization, and part of that involves how long raku has existed without anyone asking for an alternative way of doing it

[13:57] <ugexe> regardless, newbies would have to know how to use these additions to .flat. and that knowledge only applies to this one specific function

[14:02] <lizmat> re hufmannization: perhaps :hammer should be True by default in 6.e

[14:02] <ugexe> i imagine that would break a whole lot of code

[14:04] <ugexe> and again: why is this being huffmanized?

[14:04] <lizmat> see https://github.com/Raku/problem-solving/issues/431

[14:05] <ugexe> my interpretation is that one person has asked for this. i

[14:05] <ugexe> i'm not sure that is a good reason to huffmanize something

[14:06] <ugexe> arguably three people :) i'm not sure at what number i would draw the line, it just feels like the beginning of a discovery process or something rather than a sufficient number of people needing it

[14:07] <ugexe> as a discovery process we have found that .tree can potentially solve this issue

[14:09] <ugexe> that being said I don't have much else to add. i was mostly curious if this could already be done without additional api surface area

[14:13] <lizmat> could you add these remarks to the PS issue ?

[14:13] <lizmat> or shall I just add a link to the irclogs ?

[14:14] *** kjp_ left
[14:14] *** kjp joined
[14:15] <lizmat> done so

[14:15] <lizmat> afk&

[14:16] <gfldex> When it comes to flattening large trees performance becomes a consideration. I don't think .tree(*.flat xx 10) would win that race.

[14:17] <ugexe> why not? note i have no idea how .tree or .flat are actually implemented 

[14:18] <gfldex> It has to build that `xx` list and apply a Whatevercode. You can't speed that up with nqp-ops.

[14:31] <ugexe> if the performance difference between those two techniques is large then I'd be more inclined to agree with the proposed PR

[14:42] <nine> That list can be constant folded at compile time and calling a Whatevercode is just that - calling code, which we've become quite good at since newdisp

[14:45] *** librasteve_ joined
[14:45] <librasteve_> o/

[14:45] <librasteve_> some fair comments on the level of ask on :hammer, I have dug up a couple of examples of others on raku channels that have been irked by flat and posted these over on PS

[15:45] *** raiph left
[18:44] <Geth> ¦ rakudo/lizmat-flat-hammer: da853f8367 | (Elizabeth Mattijsen)++ | src/core.c/Array.rakumod

[18:44] <Geth> ¦ rakudo/lizmat-flat-hammer: Make sure Arrays also get hammered

[18:44] <Geth> ¦ rakudo/lizmat-flat-hammer: 

[18:44] <Geth> ¦ rakudo/lizmat-flat-hammer: The Array class had a shortcut to .flat, because all of the elements

[18:44] <Geth> ¦ rakudo/lizmat-flat-hammer: in an Array are always containerized, so calling .flat on it wouldn't

[18:44] <Geth> ¦ rakudo/lizmat-flat-hammer: change anything anyhow.  Until we added the :$hammer named argument.

[18:44] <Geth> ¦ rakudo/lizmat-flat-hammer: 

[18:44] <Geth> ¦ rakudo/lizmat-flat-hammer: So if that is specified with a True value, call the Iterable's version

[18:44] <Geth> ¦ rakudo/lizmat-flat-hammer: of .flat instead

[18:44] <Geth> ¦ rakudo/lizmat-flat-hammer: review: https://github.com/rakudo/rakudo/commit/da853f8367

[19:31] *** librasteve_ left
[20:51] *** Altai-man left
[20:51] *** Altai-man joined
[23:01] *** Altai-man left
