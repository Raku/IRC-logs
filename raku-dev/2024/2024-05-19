[08:55] *** sena_kun joined
[10:13] <ab5tract> Should we do a similar cleanup in RakuAST? https://github.com/Raku/doc/pull/4397

[10:13] <ab5tract> (Curry -> prime)

[10:22] <lizmat> probably

[10:23] <lizmat> % rak curry -i ../../rakudo/ast --count-only

[10:23] <lizmat> 82 matches in 3 files

[10:41] <ab5tract> That can wait for the new branch to be merged though, for sure

[10:41] <lizmat> indeed...  :-)

[12:04] <ab5tract> nine: it's really strange.. I can't reproduce the CI issues locally

[12:07] <ab5tract> looks like `t/09-moar/00-misc.t` is failing at `Subtest: no SPESH crashes with duplicate `use Test``, but I see the same issue in `nqp` results for current main (https://dev.azure.com/jjmerelo0004/f5d947ec-0968-4128-b9ef-fda9bfea2a10/_apis/build/builds/865/logs/145)

[12:40] <Geth> ¦ nqp/main: 808f0c367c | ab5tract++ | src/core/Hash.nqp

[12:40] <Geth> ¦ nqp/main: Add a few capabilities for NQP-level dd

[12:40] <Geth> ¦ nqp/main: 

[12:40] <Geth> ¦ nqp/main: Now we check for dump-ability and then ast-ness before

[12:40] <Geth> ¦ nqp/main: going into the more specific checks.

[12:40] <Geth> ¦ nqp/main: 

[12:40] <Geth> ¦ nqp/main: Also, in the generic fallthrough case, we check for

[12:40] <Geth> ¦ nqp/main: `gist` before using `Str` / ~.

[12:40] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/808f0c367c

[14:12] * ab5tract is not making heads or tails of the CI situation :(

[14:15] <ugexe> i think the moarvm CI relies on some existing version of nqp or some such

[14:16] <ugexe> the failure seems the same across a few different runs

[14:16] <ugexe> MoarVM panic: Memory allocation failed; could not allocate 2109040673 bytes

[14:16] <ugexe> t\nqp/115-nums.t ....................... 

[14:16] <ugexe> Dubious, test returned 1 (wstat 256, 0x100)

[14:24] <ugexe> i guess that can't be the case since the CI is failing in multiple repos and not just moarvm

[14:24] <ugexe> looking at the moarvm CI statuses, my guess would be https://github.com/MoarVM/MoarVM/commit/62e64677ed28ef2996572acb000c423582f7d78b is causing it

[14:25] <ugexe> MasterDuke: ^ could those changes potentially cause that allocation error that is shown?

[14:27] <ugexe> to be clear i'm talking specifically about windows failures

[14:29] <ab5tract> indeed, the Mac and (occasionally Linux) failures appear to be consistently different

[14:38] *** finanalyst joined
[14:39] <ugexe> ah i see, those platforms are running into the SPESH crash you mention earlier

[14:41] <ugexe> in these situations when i have sufficient motivation I generally start pushing up commits to rakudo, nqp, etc that build with older e.g. moarvm commits. once a commit is found where the failure stop, it is probably safe to assume it has been correctly manually bisected

[14:42] <ugexe> the number of commits that have to be checked could also probably be reduced by only initially checking commits that contain a moarvm bump

[14:48] <ab5tract> hmmm..

[14:50] <ab5tract> with (maybe) give that a try .. hardly the most exciting work that can be done, though

[14:50] <ab5tract> especially since the failure doesn't happen locally :/

[14:52] <ab5tract> but ugexe++ thanks for the suggestion

[14:59] <ugexe> hmmm

[14:59] <ugexe> https://dev.azure.com/jjmerelo0004/jjmerelo/_build/results?buildId=842&view=logs&j=1f3a7134-3b80-549a-eaff-49041f6b71c8&t=86d2073b-b96b-5257-34bf-1d6f0afee915&l=1475

[15:00] <ugexe> those 0*-misc.t tests all have `use lib <t/packages>`, which would have a 'Test' namespace

[15:00] <ugexe> like i wonder if that spesh failure would happen with some module other than Test

[15:01] <ugexe> i'm gonna make a PR to fix up our use of t/packages to be more precise, which may or may not help

[15:02] <lizmat> ugexe: fwiw, I think that many of the libraries in t/packages should just be part of Test

[15:03] <ugexe> i dont think we should add or remove things from Test api until we have a way to properly version and depend on certain versions of core modules

[15:07] <ugexe> additionally imo there is too much nuance in Test::Helpers to be something to provide in the core

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: 012cbf6267 | (Nick Logan)++ | 36 files

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: Restructure Test::Helpers

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: 

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: Previously packages were using the `t/packages` library path which

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: would be seen as a distribution containing other unrelated modules.

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: This commit restructures the file layout of Test::Helpers to match

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: what an actual distribution would use, and then updating our tests

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: to point at the new location. This ensures code using Test::Helpers

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: doesn't inadvertantly have access to other modules in t/packages,

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: and potentially avoids an issue when packages were using a sub

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: directory t/packages/02-rakudo which would already have otherwise

[15:43] <Geth> ¦ rakudo/ugexe/restructure-t-packages: been precompiled from loading t/packages.

[15:44] <Geth> ¦ rakudo/ugexe/restructure-t-packages: review: https://github.com/rakudo/rakudo/commit/012cbf6267

[15:46] <Geth> ¦ rakudo/r1378: 897a93ccb9 | ab5tract++ | 2 files

[15:46] <Geth> ¦ rakudo/r1378: Provide better feedback for ambiguous adverb usage

[15:46] <Geth> ¦ rakudo/r1378: 

[15:46] <Geth> ¦ rakudo/r1378: This fixes an LTA situation:

[15:46] <Geth> ¦ rakudo/r1378: 

[15:46] <Geth> ¦ rakudo/r1378:     > my %h = :1k; say 1 ~ %h<k>:exists ~ 1

[15:46] <Geth> ¦ rakudo/r1378:     ===SORRY!===

[15:46] <Geth> ¦ rakudo/r1378:     MVMArray: Can't pop from an empty array

[15:46] <Geth> ¦ rakudo/r1378: <…commit message has 10 more lines…>

[15:46] <Geth> ¦ rakudo/r1378: review: https://github.com/rakudo/rakudo/commit/897a93ccb9

[15:46] <Geth> ¦ rakudo: ab5tract++ created pull request #5572: Provide better feedback for ambiguous adverb usage

[15:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5572

[15:47] <Geth> ¦ rakudo/r1378: 3233f2a5a6 | ab5tract++ | 2 files

[15:47] <Geth> ¦ rakudo/r1378: Provide better feedback for ambiguous adverb usage

[15:47] <Geth> ¦ rakudo/r1378: 

[15:47] <Geth> ¦ rakudo/r1378: This fixes an LTA situation:

[15:47] <Geth> ¦ rakudo/r1378: 

[15:47] <Geth> ¦ rakudo/r1378:     > my %h = :1k; say 1 ~ %h<k>:exists ~ 1

[15:47] <Geth> ¦ rakudo/r1378:     ===SORRY!===

[15:47] <Geth> ¦ rakudo/r1378:     MVMArray: Can't pop from an empty array

[15:47] <Geth> ¦ rakudo/r1378: <…commit message has 10 more lines…>

[15:47] <Geth> ¦ rakudo/r1378: review: https://github.com/rakudo/rakudo/commit/3233f2a5a6

[15:50] <Geth> ¦ nqp/r1378: ff157a4f8e | ab5tract++ | src/HLL/Grammar.nqp

[15:50] <Geth> ¦ nqp/r1378: Provide better feedback for ambiguous adverb usage

[15:50] <Geth> ¦ nqp/r1378: 

[15:50] <Geth> ¦ nqp/r1378: This fixes an LTA situation:

[15:50] <Geth> ¦ nqp/r1378: 

[15:50] <Geth> ¦ nqp/r1378:     > my %h = :1k; say 1 ~ %h<k>:exists ~ 1

[15:50] <Geth> ¦ nqp/r1378:     ===SORRY!===

[15:50] <Geth> ¦ nqp/r1378:     MVMArray: Can't pop from an empty array

[15:50] <Geth> ¦ nqp/r1378: <…commit message has 9 more lines…>

[15:50] <Geth> ¦ nqp/r1378: review: https://github.com/Raku/nqp/commit/ff157a4f8e

[15:51] <Geth> ¦ nqp: ab5tract++ created pull request #823: Provide better feedback for ambiguous adverb usage

[15:51] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/823

[15:52] <ab5tract> ugexe: don't forget to make a PR so that we can see the impact on the pipelines :)

[15:52] <ab5tract> (unless there's some other way to kick them?)

[15:58] <Geth> ¦ rakudo: ugexe++ created pull request #5573: Refactor t/packages

[15:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5573

[16:50] <ugexe> looks like there are some roast tests that are using Test::Helpers from rakudo instead of from the one in the roast already :/

[16:50] <ugexe> as in they expect to use t/packages from rakudo

[16:51] <lizmat> yikes

[17:29] <ugexe> https://github.com/Raku/roast/blob/6aaf1591eeb959a1b92ccb2843740202aff5d45a/S10-packages/precompilation.t#L217

[17:29] <ugexe> that line re-writes one of the modules in t/packages

[17:30] <ugexe> i made some changes to unrelated files, ran spectest, then ran git diff and saw packages/RT128156/lib/RT128156/Needed.rakumod gets changed 

[17:30] <lizmat> yeah, seen that happen as well

[17:31] <ugexe> that test should be copying files to a temp location first

[17:31] <MasterDuke> ugexe: yeah, it looks like i copied the wrong #defines

[17:32] <Geth> ¦ roast: 99b194bbda | (Nick Logan)++ | 2 files

[17:32] <Geth> ¦ roast: Use Test::Util::is_run instead of Test::Helpers::is-run

[17:32] <Geth> ¦ roast: 

[17:32] <Geth> ¦ roast: Previously some tests were relying on using `is-run`, a test helper

[17:32] <Geth> ¦ roast: function from the rakudo (not roast) repo. This updates the code

[17:32] <Geth> ¦ roast: to use the `is_run` test helper that is already included in the

[17:32] <Geth> ¦ roast: roast.

[17:32] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/99b194bbda

[17:39] <ugexe> raku -e 'copy("S06-parameters", "foo")'

[17:39] <ugexe> Failed to copy '/Users/nlogan/.rakubrew/versions/moar-blead/t/spec/S06-parameters' to '/Users/nlogan/.rakubrew/versions/moar-blead/t/spec/foo': Failed to copy file: operation not supported on socket

[17:39] <ugexe>   in block <unit> at -e line 1

[17:39] <ugexe> wtf?

[17:40] <ugexe> m: .say for dir

[17:40] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «".cpanm".IO␤".local".IO␤".npm".IO␤".rcc".IO␤"Perlito".IO␤"evalbot".IO␤"log".IO␤"nqp-js".IO␤"p1".IO␤"p2".IO␤"std".IO␤".bashrc".IO␤"mbox".IO␤".cpan".IO␤"dalek-queue".IO␤"rakudo-j-inst-1".IO␤"rakudo-j-1".IO␤"rakudo-j-ins…»

[17:40] <ugexe> m: copy(".cpanm","foo")

[17:40] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «Failed to copy '/home/camelia/.cpanm' to '/home/camelia/foo': Failed to copy file: illegal operation on a directory␤  in block <unit> at <tmp> line 1␤␤»

[17:40] <lizmat> wow: dalek-queue  :-)

[17:41] <ugexe> hmm

[17:41] <ugexe> maybe its mac specific?

[17:41] <ugexe> notice in my example it says the operation is not supported on socket

[17:43] <lizmat> perhaps the error message is LTA ?

[17:43] <ab5tract> m: dd (5..0).Slip

[17:43] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «slip()␤»

[17:43] <ab5tract> ^^ why do we even allow that to compile?

[17:43] <ugexe> the error seems entirely wrong

[17:44] <lizmat> ab5tract: perhaps a worry ?

[17:45] <ab5tract> I feel like the range constructor should return a Failure, at the very least

[17:45] <ab5tract> anyway, didn't mean to jump in with another issue :)

[17:45] <lizmat> I think I have argued that once, a long time ago (~10 years ago)

[17:53] <ab5tract> ugexe: it does look mac specific -- I get the same failure locally

[17:54] <ab5tract> lizmat: I'll have to do an IRC log search and find some arguments to shed some tears about

[17:55] <ugexe> here is an issue for the overwritten module files in roast - https://github.com/Raku/roast/issues/853

[17:55] <lizmat> ab5tract: if you git blame Range.rakumod, then you should have some starting points, in time I mean

[18:07] <ab5tract> m: (-6..6).rand ==> say()

[18:07] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «2.6544324059042133␤»

[18:07] <ab5tract> m: (-6..6).rand xx 8 ==> say()

[18:07] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «(-4.738164827199453 5.159230762520579 5.975807979877603 -3.851074498988355 1.4637735675423649 5.836261947637158 3.9448290360490006 -4.77231175341916)␤»

[18:07] <ab5tract> why do we (poorly) attempt to restrict endpoints to positive numbers if it works fine with neegatives?

[18:18] <lizmat> ab5tract: not sure I follow ?

[18:20] <ab5tract> https://github.com/rakudo/rakudo/blob/5d6a7dfcac1abeea59a8085a4b98b3ff4784c02f/src/core.c/Range.rakumod#L704

[18:21] <ab5tract> that code appears to be attempting something that it is not succeeding at

[18:23] <ab5tract> and it's really not clear why it even cares

[18:26] <lizmat> it fails if the min is larger than the max ?

[18:26] <MasterDuke> doesn't "positive" there just mean size/length > 0?

[18:31] <ab5tract> MasterDuke: then what on earth is a negative range?

[18:33] <ab5tract> lizmat: that's not what the failure message is describing

[18:34] <lizmat> ok, maybe the wording is a bit LTA

[18:34] <lizmat> m: say (2..-2).rand

[18:34] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «Can only get a random value if the range is positive␤  in block <unit> at <tmp> line 1␤␤»

[18:35] <lizmat> s/the range/max is larger than min

[18:35] <lizmat> ??

[18:37] *** finanalyst left
[18:37] <ab5tract> m: m: (1..1).rand ==> say()

[18:37] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «Can only get a random value if the range is positive␤  in block <unit> at <tmp> line 1␤␤»

[18:38] <ab5tract> lizmat: you mean that thing we don't actually support?

[18:38] <ab5tract> m: dd 3 ~~ 6..0

[18:38] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «Bool::False␤»

[18:39] <lizmat> m: dd 3 ~~ 0..6

[18:39] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «Bool::True␤»

[18:40] <ab5tract> ah, I thought you were clarifying what constitutes a "negative range"

[18:41] <lizmat> no, I just meant the error message "Can only get a random value if the range is positive" is LTA

[18:42] <ab5tract> what I have so far is: Impossible to get a random number from range containing no values.\nOnly the sequence (...) operator supoprts descension between $!min and $!max

[18:43] <lizmat> yes, that was intentionally so

[18:46] <ab5tract> just working on resolving R#1591

[18:46] <linkable6> R#1591 [open]: https://github.com/rakudo/rakudo/issues/1591 [LTA] LTAnesses with Range.rand

[19:00] *** finanalyst joined
[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: d25af712cd | (Nick Logan)++ | 36 files

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: Restructure Test::Helpers

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: 

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: Previously packages were using the `t/packages` library path which

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: would be seen as a distribution containing other unrelated modules.

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: This commit restructures the file layout of Test::Helpers to match

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: what an actual distribution would use, and then updating our tests

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: to point at the new location. This ensures code using Test::Helpers

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: doesn't inadvertantly have access to other modules in t/packages,

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: and potentially avoids an issue when packages were using a sub

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: directory t/packages/02-rakudo which would already have otherwise

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: been precompiled from loading t/packages.

[19:38] <Geth> ¦ rakudo/ugexe/restructure-t-packages: review: https://github.com/rakudo/rakudo/commit/d25af712cd

[19:39] <ugexe> Just a force push after some minor formatting and comment changes

[20:03] <ab5tract> m: dd .rand with 99..99.0000000000000001

[20:03] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «99e0␤»

[20:04] <ab5tract> would it make sense to exclude such endpoints, the same way we do when they are are equal?

[20:06] <ab5tract> m: dd .rand with 99..99.0000000000000001e0

[20:06] <camelia> rakudo-moar 5d6a7dfca: OUTPUT: «Failure.new(exception => X::AdHoc.new(payload => "Can only get a random value if the range is positive"))␤»

[20:06] <lizmat> perhaps let =~= decide ?

[20:06] <lizmat> afk&

[20:07] <ab5tract> good idea!

[20:34] <Geth> ¦ rakudo/main: d25af712cd | (Nick Logan)++ | 36 files

[20:34] <Geth> ¦ rakudo/main: Restructure Test::Helpers

[20:34] <Geth> ¦ rakudo/main: 

[20:34] <Geth> ¦ rakudo/main: Previously packages were using the `t/packages` library path which

[20:34] <Geth> ¦ rakudo/main: would be seen as a distribution containing other unrelated modules.

[20:34] <Geth> ¦ rakudo/main: This commit restructures the file layout of Test::Helpers to match

[20:34] <Geth> ¦ rakudo/main: what an actual distribution would use, and then updating our tests

[20:34] <Geth> ¦ rakudo/main: to point at the new location. This ensures code using Test::Helpers

[20:34] <Geth> ¦ rakudo/main: doesn't inadvertantly have access to other modules in t/packages,

[20:34] <Geth> ¦ rakudo/main: and potentially avoids an issue when packages were using a sub

[20:34] <Geth> ¦ rakudo/main: directory t/packages/02-rakudo which would already have otherwise

[20:34] <Geth> ¦ rakudo/main: been precompiled from loading t/packages.

[20:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d25af712cd

[20:34] <Geth> ¦ rakudo/main: 1fc67b1f45 | (Nick Logan)++ (committed using GitHub Web editor) | 36 files

[20:34] <Geth> ¦ rakudo/main: Merge pull request #5573 from rakudo/ugexe/restructure-t-packages

[20:34] <Geth> ¦ rakudo/main: 

[20:34] <Geth> ¦ rakudo/main: Refactor t/packages to follow idiomatic distribution file structure

[20:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1fc67b1f45

[21:26] <ab5tract> m: (7.94073749745355e-15).FatRat ==> say()

[21:26] <camelia> rakudo-moar 1fc67b1f4: OUTPUT: «0␤»

[22:26] *** finanalyst left
[22:33] *** sena_kun left
[22:45] <Geth> ¦ rakudo/main: 06e45d89f2 | ab5tract++ | 2 files

[22:45] <Geth> ¦ rakudo/main: Clarify Range.rand failure cases and fix infinite loop

[22:45] <Geth> ¦ rakudo/main: 

[22:45] <Geth> ¦ rakudo/main: Previously we would be quite unclear about the specific

[22:45] <Geth> ¦ rakudo/main: reasons for failing to produce a random number from a

[22:45] <Geth> ¦ rakudo/main: range:

[22:45] <Geth> ¦ rakudo/main: 

[22:45] <Geth> ¦ rakudo/main:     > .rand with NaN..NaN

[22:45] <Geth> ¦ rakudo/main: <…commit message has 47 more lines…>

[22:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/06e45d89f2

[23:00] *** azert joined
[23:02] <azert> Is there an option to demote Rats as “never ever get one if I never asked for it”? What about modules using Rats against your wishes?

[23:05] <azert> I just don’t care about 0.1 + 0.2 == 0.3 being true. It is actually an unexpected result for me due to floating point arithmetic

[23:06] <azert> The slowdown is just unacceptable. There are things in Raku that are unexplainably slow, such as the Hash, but for arithmetic it is obvious

[23:07] *** azert left
[23:28] <ab5tract> Num is sticky

[23:28] <ab5tract> m: dd .WHAT with 1e-3 * 1/3

[23:28] <camelia> rakudo-moar 06e45d89f: OUTPUT: «Num␤»

[23:30] <ab5tract> Beyond that, I don't know of any mechanism to prefer Num over Rat, or any plans to provide one

[23:35] <Geth> ¦ roast: 7749803e24 | ab5tract++ | 2 files

[23:35] <Geth> ¦ roast: Provide test cases for X with baggy operators

[23:35] <Geth> ¦ roast: 

[23:35] <Geth> ¦ roast: While not comprehensive for the entire range of baggy ops,

[23:35] <Geth> ¦ roast: these should be enough tests to catch any regressions

[23:35] <Geth> ¦ roast: and satisfy the closure of R#1726.

[23:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/7749803e24

[23:35] <linkable6> R#1726 [open]: https://github.com/rakudo/rakudo/issues/1726 [tests needed][data types][operators] Baggy cross operators

[23:36] <ab5tract> azert: patches are, of course, always welcome

[23:36] <tellable6> ab5tract, I'll pass your message to azert

