[01:03] *** MasterDuke joined
[01:09] <MasterDuke> interesting. for me locally, `raku -e 'my $a = "500k.txt".IO; my int $b = 0; $b++ for $a.lines; say $b; say now - INIT now'` takes ~0.17s, but `raku -e 'my $a = "500k.txt".IO; say $a.lines.elems; say now - INIT now'` takes ~0.28s, and `raku -ne 'BEGIN my Int $a; $a++; END { say $a; say now - INIT now }' 500k.txt` takes ~0.38s, where 500k.txt is a

[01:09] <MasterDuke> 34mb file of 500k lines of just ascii text. for reference, `time perl -Ci -nE '$a++; END { say $a }' 500k.txt` takes ~0.046s

[01:15] <MasterDuke> m: BEGIN my int $a   # is this a known thing?

[01:15] <camelia> rakudo-moar 078651400: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤An exception X::Comp::AdHoc occurred while evaluating a BEGIN:␤Lexical with name '$a' has wrong type. real type 8 wanted type -1␤at <tmp>:1␤Exception details:␤  ===SORRY!=== Error while co…»

[01:18] <MasterDuke> ah, https://github.com/rakudo/rakudo/issues/5043

[01:18] <MasterDuke> fwiw, it's never worked

[03:04] *** MasterDuke left
[08:52] *** lizmat_ joined
[08:56] *** lizmat left
[09:05] *** lizmat_ left
[09:05] *** lizmat joined
[09:10] *** sena_kun joined
[09:29] *** finanalyst joined
[09:30] <finanalyst> lizmat ping

[09:30] <lizmat> pong

[09:30] <finanalyst> good morning!! I sent you an email without replying to a previous one

[09:31] <finanalyst> I suspect its been spammed

[09:31] <lizmat> lemme look.. I didn't check my mail after 10pm last night

[09:31] <finanalyst> is there an evalbot for rakuast here?

[09:32] <lizmat> alas, no

[09:32] <finanalyst> ok. I was thinking it might be easier to sent you one-liners here than document them in an email

[09:32] <lizmat> C<A<>> is the one you meant ?

[09:33] <finanalyst> yes

[09:33] <finanalyst> Its quite serious because C<> is used alot in the documentation

[09:33] <lizmat> ok, looking at it now

[09:34] <finanalyst> I'm asking about the eval bot because I think I found another quirk

[09:34] <lizmat> m: Q|=rakudoc C<A<>>|.AST

[09:34] <camelia> rakudo-moar 078651400: OUTPUT: «===SORRY!===␤Cannot unbox a type object (Nil) to a str.␤»

[09:35] <finanalyst> thats it

[09:35] <finanalyst> i forgot .AST is available in normal rakudo

[09:36] <finanalyst> I think I've found another quirk. 'resolved-config' does not appear to be picking up config from =for blocks

[09:36] <finanalyst> or at least from item

[09:36] <finanalyst> I'm trying to golf where

[09:39] <lizmat> testing a fix now for C<A<>>

[09:44] <Geth> ¦ rakudo/main: 49751627a1 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[09:44] <Geth> ¦ rakudo/main: RakuAST: Fix C<A<>>, spotted by finanalyst++

[09:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/49751627a1

[09:44] <finanalyst> lizmat++ !+

[09:45] <finanalyst> or maybe +!

[10:00] <finanalyst> that fixed C<> but there's something else preventing rakudoc_draft_3.rakudoc from compiling. ...Looking

[10:22] <finanalyst> lizmat I've found an interesting problem with the RakuDoc spec and implementation. I'm documenting it in an issue just to make sure I understand it.

[10:27] <lizmat> finanalyst: ok  :-)

[11:06] <finanalyst> lizmat just finished the Issue

[11:06] <finanalyst> hope it makes sense

[11:07] <lizmat> URL ?

[11:07] <lizmat> found it

[11:07] <finanalyst> https://github.com/Raku/RakuDoc-GAMMA/issues/37

[11:17] <lizmat> finanalyst: testing a fix for the cannot unbox to native string case

[11:18] <finanalyst> I was just about to paste the stacktrace. Is that needed any more?

[11:19] <lizmat> no, generated one of my own  :-)

[11:19] <lizmat> but in the future, please  :-)

[11:19] <finanalyst> I'll try.

[11:20] <finanalyst> It seemed to me to be a problem of conflicting specification rules, though

[11:21] <lizmat> well, it doesn't crash anymore: not sure you like the produced AST though  :-)

[11:21] <Geth> ¦ rakudo/main: a51ee10dbf | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[11:21] <Geth> ¦ rakudo/main: RakuAST: fix another issue with A<>, spotted by finanalyst++

[11:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a51ee10dbf

[12:26] <finanalyst> m: Q|=rakudoc E<laquo>|.AST

[12:26] <camelia> rakudo-moar a51ee10db: ( no output )

[12:27] <finanalyst> m: Q|=rakudoc E<laquo>|.AST.say

[12:27] <camelia> rakudo-moar a51ee10db: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Doc::Block.new(␤    type        => "rakudoc",␤    abbreviated => True,␤    paragraphs  => (␤      RakuAST::Doc::Paragraph.new(␤        RakuAST::Doc::Markup.new(␤          letter => "E",␤          …»

[12:28] <finanalyst> lizmat I got " laquo" is not a valid HTML5 entity as an error

[12:29] <finanalyst> Rakudoc v1 has 'E<laquo>' which is brought into RakuDoc 2

[12:30] <lizmat> yeah, that should work

[12:31] <lizmat> BTW, the error in your mail is caused by " E< foo bar > " not literalizing: investigatingi

[12:32] <finanalyst> same problem here

[12:32] <finanalyst> RakuDoc2 has 'E<B<left- |> laquo>'

[12:33] <lizmat> I don't think we should allow markup inside of a E<>

[12:33] <finanalyst> Agree

[12:33] <finanalyst> I'll raise an issue

[12:34] <[Coke]> +1

[12:44] <[Coke]> finanalyst: should your rakuast-rakudoc-render.git run without error using rakudo-latest?

[12:44] <[Coke]> Getting a compilation error, non AST/pod related

[12:44] <finanalyst> have you downloaded the lastest version.

[12:45] <finanalyst> I have been updating regularly, and I did have an error at one point

[12:46] <finanalyst> most recent version is v0.1.5

[12:47] <lizmat> actually, E< B<foobar>|laquo>  should be ok, finanalyst ?

[12:47] <finanalyst> I'll check

[12:48] <finanalyst> yes removing the leading space is OK

[12:50] <finanalyst> Note that it is "E<B<left- |>laquo>" with the B<> encompassing the `|`

[12:50] <finanalyst> But RakuAST seems happy with it

[12:50] <[Coke]> yes, I have latest version of your repo and v2024.05-31-ga51ee10dbf.

[12:50] <finanalyst> [Coke] I'm about 1/2 way through a Markdown version

[12:51] <[Coke]> Type 'CompletedCells' is not declared

[13:00] <finanalyst> [Coke] what is the verson in the META6?

[13:01] <finanalyst> 'CompletedCells' is in the distribution, so I've not used the module somewhere

[13:02] <[Coke]> it's used in a variable declaration

[13:03] <[Coke]> my CompletedCells...

[13:03] <[Coke]>   "version": "0.1.5",

[13:07] <[Coke]> I ran Build.pm, and am using the command line suggested in the email. I can respond to the email w/ logs if you like

[13:09] <finanalyst> I've just pushed my latest version. It passes all the tests in xt/ and `bin/RenderText rakudociem-upsum` creates the text file

[13:10] <[Coke]> RAKUDO_RAKUAST=1 raku -I. -MRakuDoc::Render --rakudoc=Generic rakudociem-ipsum.rakudoc still dies

[13:11] <finanalyst> try running without RAKUDO_RAKUAST=1

[13:12] <finanalyst> It will not produce output, but it will compile the dependencies

[13:12] <finanalyst> The problem is mentioned in the README

[13:12] <[Coke]> new error: Colon pair value ' E<BALLOT BOX WITH CHECK> ' too complex to use in name

[13:13] <finanalyst> sh..£*^!^!&$!£

[13:13] <finanalyst> That is an update of rakudociem that hasnt been corrected

[13:13] <lizmat> ok, I figured out what the problem is with E<foo|laquo>

[13:14] <finanalyst> It shouf be BALLOT BOX WITH X

[13:14] <lizmat> the parser actually doesn't support it at the moment

[13:14] <lizmat> It expects that here is no actual | in a E<>

[13:14] <lizmat> so no alternate description

[13:14] <lizmat> I guess I must have missed that in RakuDoc 2.0

[13:15] <finanalyst> It's not in Rakudociem

[13:15] <lizmat> finanalyst: are you sure that rakudoc 2.0 that E<foo|laquo> is supposed to be a thing ?

[13:16] <finanalyst> I've raised an issue about it Embedding in E

[13:16] <lizmat> m: say Q|=rakudoc E<laquo>|.AST

[13:16] <camelia> rakudo-moar a51ee10db: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Doc::Block.new(␤    type        => "rakudoc",␤    abbreviated => True,␤    paragraphs  => (␤      RakuAST::Doc::Paragraph.new(␤        RakuAST::Doc::Markup.new(␤          letter => "E",␤          …»

[13:16] <lizmat> m: say Q|=rakudoc E<laquo>|.AST.statements.head

[13:16] <camelia> rakudo-moar a51ee10db: OUTPUT: «RakuAST::Doc::Block.new(␤  type        => "rakudoc",␤  abbreviated => True,␤  paragraphs  => (␤    RakuAST::Doc::Paragraph.new(␤      RakuAST::Doc::Markup.new(␤        letter => "E",␤        opener => "<",␤        closer => ">",␤    …»

[13:16] <lizmat> m: say Q|=rakudoc E<laquo>|.AST.statements.head.paragraphs.head

[13:16] <camelia> rakudo-moar a51ee10db: OUTPUT: «RakuAST::Doc::Paragraph.new(␤  RakuAST::Doc::Markup.new(␤    letter => "E",␤    opener => "<",␤    closer => ">",␤    atoms  => (␤      "«",␤    ),␤    meta   => (␤      "laquo",␤    )␤  )␤)␤»

[13:17] <lizmat> note that the atoms contain the representation of &laquo, and the meta contains the entity name

[13:18] <lizmat> if E<foo|laquo> is a thing, then another way needs to be devised to handle this *or* the handling of the contents of E<> is left to the renderer

[13:18] <lizmat> the latter feels meh

[13:19] <finanalyst> [Coke] I just updated rakudociem-ipsum. Run `raku Build.pm` to get new copy

[13:20] <finanalyst> lizmat I think we need to persuade Damian to let E<> not have alternate renderings.

[13:20] <lizmat> well, fwiw, I can see the use of it

[13:21] <lizmat> I mean: leaving it to the renderer, would allow for custom entities

[13:21] <[Coke]> finanalyst: same error

[13:21] <finanalyst> custom entities - I suppose

[13:22] <finanalyst> [Coke] oh!

[13:22] <[Coke]> there are two instances left in the doc.

[13:25] <finanalyst> On repo, there are five instances of BALLOT BOX, two WITH CHECK and two WITH X

[13:25] <finanalyst> these should be ok

[13:26] <finanalyst> The test is not working yet anyway, so I'll remove them for the time being

[13:27] <finanalyst> [Coke] just uploaded a new rakudociem 

[13:28] <[Coke]> new failures: https://gist.github.com/coke/cd0a48667f4c7695d9970b7e39f4dc17

[13:29] <finanalyst> [Coke] those failures are expected

[13:29] <lizmat> finanalyst: perhaps E<laquo> should parse as atoms => "", meta => laquo => "«"

[13:29] <[Coke]> \o/

[13:29] <finanalyst> but the RakuDoc::Render module has been compiled

[13:30] <finanalyst> Now try with the RAKUDOAST flag back on

[13:30] <lizmat> finanalyst: and E<foo|laquo> as atoms => "foo", meta => laquo => "«" ?

[13:30] <lizmat> aka: make the meta a list of pairs, rather than a list of strings

[13:31] <finanalyst> The problems arise using `RAKUDO-RAKUAST raku --rakudoc=Generic` if RakuDoc::Render has not been compiled and in the environment

[13:32] <finanalyst> So RakuAST tries to compile it, but it uses Monitors, which RakuAST doesnt like

[13:32] <finanalyst> I think the problem will be avoided by installing with zef

[13:35] <lizmat> (that's because OO::Monitors uses macros and macros are NYI in RakuAST)

[13:38] <jdv> is the macro guy gonna come back when rakuast is ready to try to do them again?

[13:42] <finanalyst> [Coke] I've done something wrong with the distribution. I have a Build.pm in the root. Should it be Build.rakumod?

[13:42] <jdv> .seen masak

[13:42] <tellable6> jdv, I saw masak 2021-06-19T16:38:00Z in #raku: <masak> codesections: well, it _parses_. yours, I mean.

[13:44] <lizmat> masak has been pushing to Alma the past weeks / months

[13:45] <lizmat> him being behind the great firewall doesn't make interaction easier :-(

[14:05] <finanalyst> lizmat Coke had a problem with my RakuAST-RakuDoc distribution. So I tried a zef install on the local directory. It is failing for each of the dependencies, but zef . --dep-only reports they are all available

[14:06] <lizmat> did you try to install with RAKUDO_RAKUAST=1 ?

[14:15] <finanalyst> no. so RAKUDO_RAKUAST=1 zef install .    ?

[14:16] <lizmat> no, you shouldn't  :-)

[14:16] <lizmat> there's still some precomp issues with RakuAST

[14:17] <finanalyst> just tried and got them.

[14:18] <finanalyst> I can get everything working, and I tried to explain them in the README, but Coke has not been able to get it to work

[14:18] <Geth> ¦ rakudo/main: 5b44a64b2d | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[14:18] <Geth> ¦ rakudo/main: RakuAST: fix E<foo <bar> |entity> parsing

[14:18] <Geth> ¦ rakudo/main: 

[14:18] <Geth> ¦ rakudo/main: The parser so far didn't anticipate this.  It does now.  However,

[14:18] <Geth> ¦ rakudo/main: this means that the .meta of the node will now contain Pairs,

[14:18] <Geth> ¦ rakudo/main: with the key being the entity name, and the value its rendering.

[14:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5b44a64b2d

[14:19] <lizmat> finanalyst ^^

[14:19] <finanalyst> wow

[14:20] <finanalyst> to be clear: E<BALLOT BOX> will return the character

[14:21] <lizmat> with the meta:

[14:21] <lizmat>           meta   => (

[14:21] <lizmat>             "BALLOT BOX" => "☐",

[14:21] <lizmat>           )

[14:21] <finanalyst> meta as well?

[14:21] <lizmat> ah, I see I need to adapt deparsing  :-)

[14:36] <Geth> ¦ rakudo/main: b2f81c23f7 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[14:36] <Geth> ¦ rakudo/main: RakuAST: fix stringification of E<>

[14:36] <Geth> ¦ rakudo/main: 

[14:36] <Geth> ¦ rakudo/main: Now that E<foo|entity> is a thing

[14:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b2f81c23f7

[14:37] <lizmat> finanalyst: for rendering E<> without the alernate text representation, you need to do .meta.map(*.value).join

[14:39] <finanalyst> lizmat ok

[14:39] <finanalyst> and the config problem?

[14:42] <lizmat> still trying to figure that one out

[14:46] <lizmat> finanalyst: the issue with that one is really: do we expect markup inside :foo<bar B<here> > ?

[14:46] <lizmat> technically, it's a quoted string, as its between < >

[14:47] <lizmat> should we allow that ?

[14:47] <finanalyst> At the moment I am only using it for bullets for item lists, which means I want to be able to get E< BALLOT BOX> as a Str

[14:49] <lizmat> fg

[14:49] <finanalyst> I suppose that if someone (not me!!!) wants more, they can look at the AST

[14:50] <finanalyst> so resolve-config can be specified to only produce Raku objects, not RakuDoc objects

[14:52] <finanalyst> [Coke] I am removing the dependency on OO::Monitors. That should resolve the CompletedCells issue

[14:54] <lizmat> going to mull over it while afk&

[17:38] <Geth> ¦ rakudo/main: 5dd0ad6f50 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.rakumod

[17:38] <Geth> ¦ rakudo/main: RakuAST: make sure E<> markup flattens correctly

[17:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5dd0ad6f50

[17:39] <lizmat> finanalyst: ping

[18:10] <finanalyst> back from dinne

[18:10] <finanalyst> r

[18:14] *** kjp left
[18:14] *** kjp joined
[18:19] <lizmat> pong  :-)

[18:20] <lizmat> I'm afraid the :bullet<E<foo bar>> thing will need an issue

[18:20] <lizmat> Do we apply Raku semantics inside the :bullet< >  or not

[18:21] <lizmat> if we do, then :bullet<E<foo bar>> is the equivalent of bullet => <E<foo bar>>

[18:22] <lizmat> which is the equivalent of bullet => ('E<foo','bar>')

[18:22] <lizmat> ± val semantics

[18:34] <finanalyst> lizmat I'm adding this to the E embed issue

[18:35] <finanalyst> I think that the :bullet possibility for lists is a more useful tweak than allowing a differing format for a custom entity

[18:38] *** [Coke] left
[18:44] <lizmat> but that still wouldn't make it a markup / entity

[18:44] <lizmat> so it would not do what you wanted to do in that example

[19:06] *** [Coke] joined
[19:16] *** lizmat left
[19:22] *** lizmat joined
[19:39] <finanalyst> lizmat I just updated https://github.com/Raku/RakuDoc-GAMMA/issues/38 to reflect my understanding of our conversation

[19:43] <lizmat> yeah, that's describes the issue well...

[19:44] <lizmat> m: dd :a[1,2,3]   # this is also valid Raku syntax

[19:44] <camelia> rakudo-moar 5dd0ad6f5: OUTPUT: «:a([1, 2, 3])␤»

[19:45] <lizmat> afk&

[19:46] <finanalyst> I was looking at the table of syntaxes in the RakuDoc spec, which does not contain a '[ ]'

[19:46] <finanalyst> so we would need a new bracketing character ? :(

[19:47] <lizmat> rakudoc already supports :foo[1,2,3] in config

[19:47] <lizmat> so I guess the table needs an addition :-)

[19:47] <lizmat> really afk&

[19:50] <finanalyst>  ｟ ｠?

[19:51] <finanalyst> \xff5f & \xxff60

[19:54] <finanalyst> so :bullet｟E<BALLOT BOX WITH X>｠    There is no space after 'bullet' thats just the font 

[22:13] <lizmat> =for foo =bullit<BALLOT BOX> ?

[22:14] <lizmat> =for foo :bullit=<BALLOT BOX> ?

[22:16] <lizmat> actually:

[22:16] <lizmat> =for foo :bullit=<E<BALLOT BOX>> ?

[22:16] <lizmat> =for foo =bullit<E<BALLOT BOX>>

[23:04] *** sena_kun left
[23:38] *** djinni` left
[23:48] *** djinni` joined
