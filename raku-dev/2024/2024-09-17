[03:33] *** nine_ joined
[03:33] *** nine left
[03:33] *** camelia left
[03:38] *** camelia joined
[07:28] *** MasterDuke left
[08:02] <|Tux|> Rakudo v2024.08-60-gdde756878 (v6.d) on MoarVM 2024.08-9-g570db2612

[08:02] <|Tux|> csv-test-xs-20      0.141 -  0.141

[08:02] <|Tux|> csv-ip5xs           0.257 -  0.258

[08:02] <|Tux|> test-t --race       0.266 -  0.268

[08:02] <|Tux|> test-t              0.401 -  0.404

[08:02] <|Tux|> csv-ip5xs-20        1.082 -  1.096

[08:02] <|Tux|> test-t-20 --race    1.131 -  1.194

[08:02] <|Tux|> csv-parser          1.467 -  1.483

[08:02] <|Tux|> test                1.846 -  1.899

[08:02] <|Tux|> test-t-20           4.776 -  4.804

[08:02] <|Tux|> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[08:03] <|Tux|> same versions same values

[08:32] *** sena_kun joined
[09:05] *** sena_kun left
[11:15] <timo> m: say Metamodel::ClassHOW; Metamodel::ClassHOW.gist; Metamodel::ClassHOW.Str;

[11:15] <camelia> rakudo-moar dde756878: OUTPUT: «(ClassHOW)␤Use of uninitialized value of type Perl6::Metamodel::ClassHOW in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤»

[11:16] <timo> m: given Metamodel::ClassHOW { say .Str; say .gist; }

[11:16] <camelia> rakudo-moar dde756878: OUTPUT: «Use of uninitialized value of type Perl6::Metamodel::ClassHOW in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤␤(ClassHOW)␤  in block  at <tmp> line 1␤»

[11:16] <timo> m: given Metamodel::CoercionHOW { say .Str; say .gist; }

[11:16] <camelia> rakudo-moar dde756878: OUTPUT: «Method Perl6::Metamodel::CoercionHOW.Str not found␤  in block <unit> at <tmp> line 1␤␤»

[11:17] <timo> DIHWIDT or LTA?

[11:25] <timo> https://gist.github.com/timo/55471f4649415692e1510db85247ce8a

[11:26] <timo> ParametricRoleHOW, CurriedRoleHOW, Primitives, and EnumHOW are okay with calling .gist on them, Metamodel::Primitives is the only one that likes having .Str called on it

[11:57] <lizmat> LTA I'd say

[11:57] <lizmat> notable6__: weekly

[11:57] <notable6__> lizmat, 1 note: 2024-09-14T16:52:29Z <ab5tract>: weekly - https://5ab5traction5.bearblog.dev/introducing-comma-20/

[11:57] <lizmat> notable6__: weekly reset

[11:57] <notable6__> lizmat, Moved existing notes to “weekly_2024-09-17T11:57:44Z”

[12:04] <timo> i was looking for documentation on COERCE and found no entry for COERCE, and the documentation in https://docs.raku.org/language/signatures#Coercion_type doesn't mention the ability to define a COERCE method, or that method new is also tried by default

[12:05] <timo> also, the documentation claims that the method that's called by name on the incoming object doesn't have its return type checked, which doesn't seem correct:

[12:06] <timo> m: class Gimme { }; class Tester { method Gimme() { "lol" } }; sub test(Gimme() $foo) { say $foo.raku }; test(Tester.new())

[12:06] <camelia> rakudo-moar dde756878: OUTPUT: «Impossible coercion from 'Tester' into 'Gimme': method Gimme returned an instance of Str␤  in sub test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:19] <timo> bisectable6: say 99 ~~ Mu:U

[12:19] <bisectable6> timo, Will bisect the whole range automagically because no endpoints were provided, hang tight

[12:19] <bisectable6> timo, ¦6c (83 commits): «False␤»

[12:19] <bisectable6> timo, Nothing to bisect!

[12:23] <timo> oops, got that wrong

[12:24] <timo> m: $_ = 42; say $_ ~~ Mu:U

[12:24] <camelia> rakudo-moar dde756878: OUTPUT: «True␤»

[12:24] <timo> m: say $_ ~~ Mu:U

[12:24] <camelia> rakudo-moar dde756878: OUTPUT: «True␤»

[12:25] <timo> m: say $_ ~~ Any:U

[12:25] <camelia> rakudo-moar dde756878: OUTPUT: «True␤»

[12:25] <timo> m: $_ = 42; say $_ ~~ Any:U

[12:25] <camelia> rakudo-moar dde756878: OUTPUT: «False␤»

[12:25] <timo> bisectable6: $_ = 42; say $_ ~~ Mu:U

[12:25] <bisectable6> timo, Will bisect the whole range automagically because no endpoints were provided, hang tight

[12:26] <bisectable6> timo, Output on all releases: https://gist.github.com/e974c8ed07bf500c50f4bf237ff70bdf

[12:26] <bisectable6> timo, Bisecting by output (old=2021.12 new=2022.02) because on both starting points the exit code is 0

[12:27] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/09/17/2024-38-recomma-plug/

[12:36] <bisectable6> timo, bisect log: https://gist.github.com/22aefb15fea0bad22a4f1e8571829084

[12:36] <bisectable6> timo, Output on all releases and bisected commits: https://gist.github.com/2dc430073cdc43aca2858d97e6d1c0f5

[12:52] *** [Tux] left
[13:12] *** [Tux] joined
[14:29] *** andinus2 left
[14:30] *** andinus joined
[14:37] <timo> linkable6: 2a3f61ef14acb864207734049128139e698d8575

[14:37] <linkable6> (2022-01-03) https://github.com/rakudo/rakudo/commit/2a3f61ef14 Additional fixes and improvements of smartmatch optimizations

[14:37] <timo> potential candidate for the change

[14:38] <timo> linkable6:  f21af28e37e7ed407fdf6fb0d5f837b2ac377877 # as well

[14:38] <linkable6> (2022-01-09) https://github.com/rakudo/rakudo/commit/f21af28e37 Add ACCEPTS candidate for Junction to Bool

[14:40] <timo> 91ec1bbf601f2b9060a3ffc481407508296a481d # does it work without addressing the bot?

[14:40] <linkable6> (2021-12-11) https://github.com/rakudo/rakudo/commit/91ec1bbf60 Implement optimization of topicalized smartmatches

[14:44] <timo> 32401c4762a18c98b3d5b0bdd7c03b27400cb521 # this was the rewrite of smartmatch as a dispatcher, that could have introduced a change like that

[14:44] <linkable6> (2022-01-15) https://github.com/rakudo/rakudo/commit/32401c4762 Implement smartmatch as a dispatcher

[15:16] <timo> https://buildd.debian.org/status/fetch.php?pkg=rakudo&arch=arm64&ver=2024.02-1%7Eexp1.1&stamp=1726227521&raw=0 we have a rakudo build on an arm64 debian build server that got stuck during the testing phase, it looks like. the output isn't terribly enlightening

[17:26] <ab5tract> Why is it trying to  regex replace a line in Compiler.pm6? Not that I expect this to be relevant to the stalling build, but I’m curious

[17:41] *** sena_kun joined
[17:54] <[Coke]> is that the distribution build star was asking for?

[17:56] <[Coke]> ah, no that is probably an old workaround to get the same effect.

[18:25] <timo> > make test || make test || make test || make test || MVM_SPESH_DISABLE=1 make test

[18:25] <timo> :S

[18:36] <[Coke]> ??

[18:44] <timo> from the build commands

[18:45] <timo> retry it three times, and a fifth time without spesh just to make sure

[18:51] <ab5tract> I noticeds that too :)

[19:00] <timo> it's a little bit of a "lolsob"

[19:29] <timo> Bisecting: 9 revisions left to test after this (roughly 3 steps)

[19:38] <timo> 91ec1bbf601f2b9060a3ffc481407508296a481d is the commit that changed how this code works:

[19:38] <linkable6> (2021-12-11) https://github.com/rakudo/rakudo/commit/91ec1bbf60 Implement optimization of topicalized smartmatches

[19:38] <timo> m: my $_ = 42; $_ ~~ Mu:U

[19:38] <camelia> rakudo-moar dde756878: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$_'.␤    at <tmp>:1␤    ------> my $_⏏ = 42; $_ ~~ Mu:U␤»

[19:39] <timo> m: $_ = 42; $_ ~~ Mu:U

[19:39] <camelia> rakudo-moar dde756878: ( no output )

[19:39] <timo> m: $_ = 42; say $_ ~~ Mu:U

[19:39] <camelia> rakudo-moar dde756878: OUTPUT: «True␤»

[19:41] <timo> it flips behaiour with an up-to-date rakudo if you --optimize=off

[19:58] *** sena_kun left
[20:48] <ab5tract> m: Q| my $_ = 42; say $_ ~~ Mu:U |.AST.EVAL

[20:48] <camelia> rakudo-moar dde756878: OUTPUT: «False␤»

[20:49] <ab5tract> #FixedInRakuAST

[20:49] <timo> yeah because rakuast doesn't have an optimizer yet ;) ;)

[20:50] <ab5tract> ah, I always forget about that

[20:50] <ab5tract> it's a bit unfortunate how often that's the case, though

[21:00] <timo> it looks like somehow it thinks the LHS, i.e. $_, has a value and the value is of type Mu and undefined

[22:39] *** sena_kun joined
[22:41] *** sena_kun left
