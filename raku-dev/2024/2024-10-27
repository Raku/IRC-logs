[00:08] <timo> ugghhhh the crash doesn't reproduce

[00:17] <Geth> ¦ rakudo/windows_latest_azure_pipeline: d69f2790d0 | (Timo Paulssen)++ | azure-pipelines.yml

[00:17] <Geth> ¦ rakudo/windows_latest_azure_pipeline: get freshest moarvm change

[00:17] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/d69f2790d0

[00:22] <Geth> ¦ rakudo/windows_latest_azure_pipeline: 962d5a6c4e | (Timo Paulssen)++ | azure-pipelines.yml

[00:22] <Geth> ¦ rakudo/windows_latest_azure_pipeline: previous commit hash was wrong

[00:22] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/962d5a6c4e

[00:31] <Geth> ¦ rakudo/windows_latest_azure_pipeline: 5e5ccbd27e | (Timo Paulssen)++ | azure-pipelines.yml

[00:31] <Geth> ¦ rakudo/windows_latest_azure_pipeline: even newer moar commit

[00:31] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/5e5ccbd27e

[01:10] <Geth> ¦ rakudo/windows_latest_azure_pipeline: c2d395c9d8 | (Timo Paulssen)++ | azure-pipelines.yml

[01:10] <Geth> ¦ rakudo/windows_latest_azure_pipeline: remove debugging stuff for one try?

[01:10] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/c2d395c9d8

[01:26] <Geth> ¦ rakudo/windows_latest_azure_pipeline: f9795ecd77 | (Timo Paulssen)++ | azure-pipelines.yml

[01:26] <Geth> ¦ rakudo/windows_latest_azure_pipeline: turn procdump back on

[01:26] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/f9795ecd77

[01:42] <Geth> ¦ rakudo/windows_latest_azure_pipeline: 291f125999 | (Timo Paulssen)++ | azure-pipelines.yml

[01:42] <Geth> ¦ rakudo/windows_latest_azure_pipeline: moar bump

[01:42] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/291f125999

[01:59] <Geth> ¦ rakudo/windows_latest_azure_pipeline: b62b8a09c9 | (Timo Paulssen)++ | azure-pipelines.yml

[01:59] <Geth> ¦ rakudo/windows_latest_azure_pipeline: try other way of procdump again

[01:59] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/b62b8a09c9

[02:31] <Geth> ¦ rakudo/windows_latest_azure_pipeline: 37325d4ee1 | (Timo Paulssen)++ | azure-pipelines.yml

[02:31] <Geth> ¦ rakudo/windows_latest_azure_pipeline: bump moar

[02:31] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/37325d4ee1

[02:33] <Geth> ¦ rakudo/windows_latest_azure_pipeline: 8702cbc511 | (Timo Paulssen)++ | azure-pipelines.yml

[02:33] <Geth> ¦ rakudo/windows_latest_azure_pipeline: try building without mimalloc as well

[02:33] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/8702cbc511

[02:33] <Geth> ¦ rakudo/windows_latest_azure_pipeline: 4478a4b2eb | (Timo Paulssen)++ | azure-pipelines.yml

[02:33] <Geth> ¦ rakudo/windows_latest_azure_pipeline: fix typo

[02:33] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/4478a4b2eb

[02:34] <[Coke]> timo++

[02:44] <Geth> ¦ rakudo/windows_latest_azure_pipeline: de01bd42f7 | (Timo Paulssen)++ | azure-pipelines.yml

[02:44] <Geth> ¦ rakudo/windows_latest_azure_pipeline: no telemeh with --no-mimalloc for now

[02:44] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/de01bd42f7

[03:08] <Geth> ¦ rakudo/windows_latest_azure_pipeline: a46891fe5b | (Timo Paulssen)++ | azure-pipelines.yml

[03:08] <Geth> ¦ rakudo/windows_latest_azure_pipeline: grab newer moar

[03:08] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/a46891fe5b

[03:13] <timo> [Coke]: this is incredibly tedious and infuriating :(

[04:20] <Geth> ¦ rakudo/windows_latest_azure_pipeline: 34a8a7d39e | (Timo Paulssen)++ | azure-pipelines.yml

[04:20] <Geth> ¦ rakudo/windows_latest_azure_pipeline: get freshest of moars

[04:20] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/34a8a7d39e

[04:39] <timo> the solution was, as it so often is, to stub out the windows-related bit (just a single function call), compile to linux, then run it under valgrind to find your very dumb mistake

[04:52] <timo> ok, still crashy though, just not immediately

[05:53] <timo> so the place we're exploding is when we have just created a container from %cont_info<container_base> in World.nqp line 1882 in method "build_container" where we try to assign the descriptor to the $!descriptor attribute, and it's an array[str] rather than a P6Opaque-repred thing, so it doesn't have the capability to hold attributes, and that's where the exception flies. it's directly inside a

[05:53] <timo> "try" though so it shouldn't be a problem at all, but we happen to be inside jitted code and we can't jump back into the interpreter because we don't have correct unwind information installed for the frame we've jitted

[09:20] *** sena_kun joined
[09:43] *** lizmat left
[09:44] *** lizmat joined
[10:00] *** Geth left
[10:00] *** Geth joined
[10:01] <Geth> ¦ rakudo/windows_latest_azure_pipeline: 103 commits pushed by (Timo Paulssen)++

[10:01] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/compare/34a8a7d39e4b...2d5e8f847eb1

[10:01] <Geth> ¦ rakudo/windows_latest_azure_pipeline: 83ba990058 | (Timo Paulssen)++ | azure-pipelines.yml

[10:01] <Geth> ¦ rakudo/windows_latest_azure_pipeline: after the rebase, get appropriate nqp version again

[10:01] <Geth> ¦ rakudo/windows_latest_azure_pipeline: review: https://github.com/rakudo/rakudo/commit/83ba990058

[10:02] <Geth> ¦ rakudo/main: 00a09d92e6 | (Elizabeth Mattijsen)++ | src/core.c/IO/CatHandle.rakumod

[10:02] <Geth> ¦ rakudo/main: Re-imagine IO::CatHandle internals

[10:02] <Geth> ¦ rakudo/main: 

[10:02] <Geth> ¦ rakudo/main: - use less NQP, and normal object construction

[10:02] <Geth> ¦ rakudo/main: - use an iterator on the slurpy array to get net handle

[10:02] <Geth> ¦ rakudo/main: - allows for lazy lists of files to read

[10:02] <Geth> ¦ rakudo/main: 

[10:02] <Geth> ¦ rakudo/main: Fixes #2796

[10:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/00a09d92e6

[10:02] <Geth> ¦ roast: 0f005e842c | (Elizabeth Mattijsen)++ | S32-io/io-cathandle.t

[10:02] <Geth> ¦ roast: Add test for #2796

[10:02] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0f005e842c

[14:49] <timo> the exception handlers we generate for "try" in nqp look like they could be a lot better and smaller

[14:50] <timo> i'm looking at the one that would be invoked at the time of the latest crashing, but i think they all look similar to this one

[14:51] <timo> World.nqp, cuuid 281 (Frame_135): checkarity, paramnamesused, exception, getexcategory, hllboxtype_i, box_i, set, decont, dispatch_i nqp-intify, const_i64_16, band_i, hllboxtype_i, box_i, set, unless_i, wval, set, return_o

[14:52] <timo> i wonder if a mechanism based on dispatchers could be used here?

[14:54] <timo> anyway, so the code is getting the exception category from the "current" exception, boxes it to an int, deconts and then nqp-intifies that box, ands it with 1, boxes the result, checks if the result is true or not, and then returns either the boxed result integer, or whatever's in wval 2, 44 ... maybe NQPMu?

[14:54] <timo> normally i'd say "spesh will turn this into very optimized code", but if we generate a load of these, the original code size becomes more important

[14:56] <timo> getexcategory is called nqp::getextype in nqp

[14:56] <timo> i think the code gen happens in QASTOperationsMAST.nqp in nqp's src/vm/moar/

[15:00] <timo> so a `try 5` in nqp turns into nqp::handle(IVal(5), 'CATCH', WVal(NQPMu))

[15:05] <timo> it feels like we should be able to do a little bit better than to compile a full block?

[15:08] <timo> maybe we can keep a single "handle CATCH and return NQPMu" block for the whole CompUnit

[16:15] <timo> not seeing any success so far, maybe someone who knows their way around the mast compiler internals and knows how handlers, blocks, gotos, handlerresult, etc interact can figure this out more easily? :)

[16:17] <timo> hm, for a "super simple" case of handles, there may not even want to be a block in the first place

[16:32] <timo> seeing some success now :3

[17:00] <ab5tract> timo: nice! Keep on trucking :D

[17:02] <timo> funny, the same spot i've been looking at is now a problem here as well, in that it seems to infinitely loop on itself. the exception handler seems to jump to before the instruction that causes the exception, even though the code where i generate the code and the handler scope look correct?

[17:39] <timo> hmm. the jit_return_address is set by jit_code_set_current_position, but we longjmp into the interpreter, execute jit_enter, where we take the entry label

[17:44] <timo> i'm guessing that i'm tickling a case that the jit has never seen so far?

[17:44] <timo> and/or i'm unaware of some assumption

[17:45] * timo activates the brrt-signal

[18:06] <timo> so until now, the exception was causing an invocation, but now it's an inside-same-frame goto, and that's not causing the position that the jit is entering the code at to change

[18:10] <timo> 24 frames disappear from World.moarvm's dump output with this change; from 350 to 326. total lines in the dump output go from 45777 down to 44918

[18:11] <timo> 364K after the change, 368K before. not a huge difference, but i'd take it

[18:13] <timo> the other files don't trigger the optimization much at all, unfortunately

[18:13] <timo> and raku doesn't at all, though I haven't looked at the QAST of different instances of nqp::handle in there

[18:18] <timo> looks like "try 5" also has code there to set $! to a value, and i'm explicitly only allowing CATCH -> Stmts -> WVal

[18:33] <timo> i'm not sure under what circumstances we really do have to create a full non-inlined block for the handler(s)

[23:56] *** sena_kun left
