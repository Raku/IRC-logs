[00:05] *** librasteve_ left
[00:41] <[Coke]> Thanks, will try to trim it back again.

[00:41] <[Coke]> (not right now)

[00:51] <Geth> ¦ Blin: cf24264375 | (Will Coleda)++ | config-default.json

[00:51] <Geth> ¦ Blin: Re-trim config defaults

[00:51] <Geth> ¦ Blin: review: https://github.com/Raku/Blin/commit/cf24264375

[00:52] <[Coke]> ok, now

[00:55] * [Coke] kicks off a blin run for the first few commits since the release.

[01:06] <[Coke]> Blin only cares about *new* failures, yes?

[02:14] *** AlexDaniel left
[02:42] *** AlexDaniel joined
[02:46] <AlexDaniel> [Coke]: That's correct! so it will test the module on the `new` revision first. If it's OK, that's it. If it's not, then it'll test it on the `old` revision. If it's also not OK, then it's a SNAFU situation, nothing to do. However, if it's good on the old revision, it should rerun the tests a couple of times on the old revision again (to make sure

[02:46] <AlexDaniel> we're not bisecting a flapper). If it's consistently good on the `old` revision, then it bisects.

[02:46] <AlexDaniel> that's how I remember implementing it :)  Maybe something has changed

[02:48] <AlexDaniel> and I'm happy to see that this tooling is getting some love again <3

[03:06] *** AlexDaniel left
[05:25] *** kjp left
[05:27] *** kjp joined
[05:36] *** kjp left
[05:37] *** kjp joined
[05:46] *** kjp left
[05:47] *** kjp joined
[05:49] *** kjp left
[05:50] *** kjp joined
[05:50] *** kjp left
[05:51] *** kjp joined
[05:51] *** kjp left
[05:51] *** kjp joined
[07:22] <Geth> ¦ rakudo/main: a27ae5ed7d | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod

[07:22] <Geth> ¦ rakudo/main: RakuAST: support NEXT phasers in non-for loops

[07:22] <Geth> ¦ rakudo/main: 

[07:22] <Geth> ¦ rakudo/main: Fixes: loop { NEXT say "next"; last if $++ > 1 }

[07:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a27ae5ed7d

[08:28] <Geth> ¦ rakudo/main: 3e2684a465 | (Stefan Seifert)++ | src/Raku/ast/statementprefixes.rakumod

[08:28] <Geth> ¦ rakudo/main: RakuAST: actually add phasers to CompUnit

[08:28] <Geth> ¦ rakudo/main: 

[08:28] <Geth> ¦ rakudo/main: $resolver.find-attach-target('block') will return Nil when we're in the

[08:28] <Geth> ¦ rakudo/main: CompUnit itself. Sadly this does not throw any error, because the

[08:28] <Geth> ¦ rakudo/main: following method call on Nil will just be ignored. Thus we missed this

[08:28] <Geth> ¦ rakudo/main: special case.

[08:28] <Geth> ¦ rakudo/main: 

[08:29] <Geth> ¦ rakudo/main: Fix by falling back to compunit if there's no surrounding block.

[08:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3e2684a465

[08:29] <Geth> ¦ rakudo/main: a383c8bb6b | (Stefan Seifert)++ | 2 files

[08:29] <Geth> ¦ rakudo/main: RakuAST: fix KEEP, UNDO and LEAVE phasers running in their lexical order

[08:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a383c8bb6b

[09:11] *** sena_kun joined
[10:09] <Geth> ¦ rakudo/main: 307efa6d65 | (Stefan Seifert)++ | src/Raku/ast/statement-mods.rakumod

[10:09] <Geth> ¦ rakudo/main: RakuAST: fix loop modifier on block with placeholders

[10:09] <Geth> ¦ rakudo/main: 

[10:09] <Geth> ¦ rakudo/main: Fixes: { say $^x } given 69

[10:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/307efa6d65

[10:09] <Geth> ¦ rakudo/main: cd0e6ee601 | (Stefan Seifert)++ | 2 files

[10:09] <Geth> ¦ rakudo/main: RakuAST: fix for statement modifier on block with placeholder

[10:09] <Geth> ¦ rakudo/main: 

[10:09] <Geth> ¦ rakudo/main: Fixes: { say $^x } for 69

[10:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cd0e6ee601

[10:09] <nine> 1058 now

[10:55] <ab5tract> [Coke]++ AlexDaniel++

[10:56] <ab5tract> nine++ 

[17:08] <nine> m: { say "block" }; { say "block loop" } for ^1

[17:08] <camelia> rakudo-moar cd0e6ee60: OUTPUT: «block␤block loop␤»

[17:09] <nine> M: -> $_ { say "pointy block" }; -> $_ { say "pointy block loop" } for ^1'

[17:09] <nine> m: -> $_ { say "pointy block" }; -> $_ { say "pointy block loop" } for ^1'

[17:09] <camelia> rakudo-moar cd0e6ee60: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> -> $_ { say "pointy block loop" } for ^1⏏'␤    expecting any of:␤        infix␤        infix stopper␤»

[17:09] <nine> m: -> $_ { say "pointy block" }; -> $_ { say "pointy block loop" } for ^1

[17:09] <camelia> rakudo-moar cd0e6ee60: OUTPUT: «pointy block loop␤»

[17:09] <nine> So what are the real rules for when a pointy block is called automatially?

[17:21] <ab5tract> Oh weird….

[17:21] <ab5tract> m: { dd &?ROUTINE }

[17:21] <camelia> rakudo-moar cd0e6ee60: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    ?ROUTINE used at line 1. Did you mean 'Routine'?␤␤»

[17:24] <ab5tract> I guess that variable isn’t set for mere blocks

[17:25] <nine> m: { dd &?BLOCK }

[17:25] <camelia> rakudo-moar cd0e6ee60: OUTPUT: «-> ;; $_? is raw = OUTER::<$_> { #`(Block|3593690399512) ... }␤»

[17:25] <ab5tract> But I was trying to ascertain whether { say “block? } is really a block that is being run or if it’s just a scope being entered and executed

[17:26] <ab5tract> So I guess that’s the answer to that :)

[17:32] <ab5tract> nine: but I guess it kind of makes sense that pointy blocks don’t run unless called. It seems a bit like having blocks get called automatically is a way to allow arbitrary unnamed scoping. But pointy blocks don’t we’ve such a purpose, and so they don’t need to be called in sink context?

[17:33] <ab5tract> It might make sense to have a warning about a useless use, in such a situation though

[17:36] <nine> yeah

[18:03] *** finanalyst joined
[18:13] <[Coke]> Crap. I had a run yesterday running in azure under tmux and this morning the window was closed and there was no session to reattach to.

[18:15] <[Coke]> Looks like there's an output/overview that has the progress - only "Unknown/MissingDependency/AlwaysFail/OK" in there.

[18:16] <[Coke]> (278 OKs)

[18:48] <Geth> ¦ Blin: cf77811d86 | (Will Coleda)++ | bin/blin.p6

[18:48] <Geth> ¦ Blin: Be slightly more forgiving on command line params.

[18:48] <Geth> ¦ Blin: 

[18:48] <Geth> ¦ Blin: e.g. --heartbeat=300

[18:48] <Geth> ¦ Blin: review: https://github.com/Raku/Blin/commit/cf77811d86

[19:01] *** finanalyst left
[19:47] <[Coke]> the Blin runs aren't completing - I had it in tmux, and while it was waiting, opened a new tmux tab so I could run top - it just hung so I ignored it for a while; came back to the new window, the old window was *gone* and the progress was gone.

[19:47] <[Coke]> the output shows it's getting partway through.

[19:49] <[Coke]> er, the output file

[21:33] <timo> https://gist.github.com/timo/959f8fd36ee9e1741cb8acdf8db199fb - ppc64 spectest results

[22:03] *** sena_kun left
[22:22] *** sena_kun joined
[22:30] *** sena_kun left
[23:26] * [Coke] wonders if he needs to ramp up the VM again for *running* blin (vs. building rakudo&blin)

[23:50] <Geth> ¦ Blin: bfbb25832e | (Will Coleda)++ | bin/blin.p6

[23:50] <Geth> ¦ Blin: follow quote code style

[23:50] <Geth> ¦ Blin: review: https://github.com/Raku/Blin/commit/bfbb25832e

