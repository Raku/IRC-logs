[00:19] *** MasterDuke joined
[02:03] *** vrurg_ left
[02:04] *** vrurg joined
[04:09] *** MasterDuke left
[05:42] *** vrurg left
[05:42] *** vrurg joined
[07:16] <nine> The whole language version management code is absurdely complex. We have - including all subvariants - just 7 different language versions. How can this require 200 lines of code including generated code?

[07:55] *** sena_kun joined
[08:05] <Geth> ¦ rakudo/main: c053144ab5 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[08:05] <Geth> ¦ rakudo/main: RakuAST: fix regression on `use v6.*;`

[08:05] <Geth> ¦ rakudo/main: 

[08:05] <Geth> ¦ rakudo/main: On a use v6.* $vWant turned out to be "v*". But we can just use

[08:05] <Geth> ¦ rakudo/main: @final-version instead. The first part will be the revision number.

[08:05] <Geth> ¦ rakudo/main: 

[08:05] <Geth> ¦ rakudo/main: lizmat++ for the heads-up

[08:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c053144ab5

[09:09] <ab5tract> considering that language versions are not totally clean breaks between each other (v6.d has many more features/fixes now than when released), I wonder if it's worth revisting nemokosch's critiques of the release strategy/versioning scheme now that said discussion is less liable to be soaked in vitriol

[09:15] *** sena_kun left
[10:23] <nine> m: sub foo($a is copy) { BEGIN dd $a; dd $a; $a := Mu }; foo(1)

[10:23] <camelia> rakudo-moar c053144ab: OUTPUT: «Mu␤Any $a = 1␤Type check failed in binding; expected Any but got Mu (Mu)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:24] <nine> Is it really desired behavior that at compile time the parameter $a has a value of Mu instead of Any?

[10:36] <lizmat> I think it's more an implementation artefact than anything else

[10:37] <lizmat> as Mu is the base state in HLL Raku?

[10:38] *** finanalyst joined
[10:43] <nine> t/02-rakudo/13-exceptions.t tests specifically for Mu in that error message

[10:45] <lizmat> I'd say we adapt the test: it's an implementation detail, not in roast

[11:14] *** sjn left
[11:21] <ab5tract> I've been looking for a while but haven't found it yet.. how exactly would one go about peeking into the value held in a MVM (frame) register?

[11:25] <ab5tract> Comments in the source say that I need to use a temporary register to store any value that is going to be read, but that's as far as I've been able to get..

[11:53] *** finanalyst left
[13:03] <[Tux]> Rakudo v2024.03-179-gc053144ab (v6.d) on MoarVM 2024.03-6-gd5dafa9b4

[13:03] <[Tux]> csv-test-xs-20      0.142 -  0.142

[13:03] <[Tux]> csv-ip5xs           0.260 -  0.265

[13:03] <[Tux]> test-t --race       0.272 -  0.272

[13:03] <[Tux]> test-t              0.419 -  0.423

[13:03] <[Tux]> csv-ip5xs-20        1.124 -  1.140

[13:03] <[Tux]> test-t-20 --race    1.198 -  1.235

[13:03] <[Tux]> csv-parser          1.545 -  1.588

[13:03] <[Tux]> test                1.926 -  2.016

[13:03] <[Tux]> test-t-20           5.100 -  5.134

[13:13] <nine> ab5tract: in what environment? In gdb I just `p *tc->cur_frame->work[123].o`

[13:14] <nine> MVM_dump_p6opaque is also quite helpful there

[13:22] <ab5tract> Ah, I was hoping for something a bit more high level, like using debug statements from the QASTRegexCompilerMAST routines I’m poking at

[13:24] <ab5tract> I’ve added a workable print_debug method to MAST::Frame that’s guarded by an env var

[13:41] *** sjn joined
[13:59] *** Util left
[14:11] *** lizmat_ joined
[14:15] *** lizmat left
[14:16] *** lizmat joined
[14:17] *** lizmat__ joined
[14:20] *** lizmat_ left
[14:21] *** lizmat left
[14:21] *** lizmat__ left
[14:21] *** lizmat joined
[15:13] *** lizmat_ joined
[15:16] *** lizmat left
[15:21] <ab5tract> I tried using the assign op, but so far that refuses to work on a variable. Maybe I can get further with bindattr

[15:52] *** lizmat joined
[15:55] *** lizmat_ left
[17:41] <ab5tract> just tried poking at `./rakud-lldb-m` and .. this is definitely going to be a learning curve

[18:01] *** sena_kun joined
[18:30] *** sena_kun left
[18:30] *** sena_kun joined
[18:42] *** Altai-man joined
[18:42] *** sena_kun left
[19:11] *** sena_kun joined
[19:11] *** Altai-man left
[19:34] *** sena_kun left
[19:35] *** sena_kun joined
[19:58] *** finanalyst joined
[20:53] *** sena_kun left
[20:53] *** sena_kun joined
[21:58] *** vrurg left
[22:07] *** vrurg joined
[22:35] *** lizmat_ joined
[22:39] *** lizmat left
[22:49] *** lizmat_ left
[22:49] *** lizmat joined
[23:11] *** sena_kun left
