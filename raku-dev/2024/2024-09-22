[04:31] *** kjp left
[04:33] *** kjp joined
[04:33] *** kjp left
[04:34] *** kjp joined
[08:43] *** sena_kun joined
[10:29] *** sjn left
[10:34] *** sjn joined
[10:39] *** finanalyst joined
[10:41] *** sjn left
[10:46] *** sjn joined
[11:15] <ab5tract> to clarify my self-proclaimed evil genius status of yesterday, I should have acknowledged timo++ and jnthn++ for both mentioning re-use of the Raku bits and bobs

[11:16] <Geth> ¦ rakudo/main: 27565cc1f7 | (Elizabeth Mattijsen)++ | lib/RakuDoc/To/RakuDoc.rakumod

[11:16] <Geth> ¦ rakudo/main: RakuAST: render attributes as doc-attribute

[11:16] <Geth> ¦ rakudo/main: 

[11:16] <Geth> ¦ rakudo/main: in safe RakuDoc generation

[11:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/27565cc1f7

[11:17] <ab5tract> but it felt pretty slick anyway when I realized that Raku being essentially a superset means that re-use wasn't about wiring up existing objects and re-using them in an NQP parsing chain

[11:18] <lizmat> :-)

[11:18] <ab5tract> but rather only required that we create a filetype recognizer and a "language" definition class that just passes `RakuLanguage.INSTANCE` to  its super() :D

[11:27] <ab5tract> https://usercontent.irccloud-cdn.com/file/KDa1ssy1/Screenshot%202024-09-22%20at%2013.26.29.png

[11:27] <lizmat> :-)

[11:31] <Geth> ¦ rakudo/main: 8162f3eb3b | (Elizabeth Mattijsen)++ | lib/RakuDoc/To/RakuDoc.rakumod

[11:31] <Geth> ¦ rakudo/main: RakuAST: properly render submethods in safe RakuDoc

[11:31] <Geth> ¦ rakudo/main: 

[11:31] <Geth> ¦ rakudo/main: Check ::Submethod before ::Method, as Submethod is a subclass of ::Method

[11:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8162f3eb3b

[11:38] <Geth> ¦ rakudo/main: 8eef4c797d | (Elizabeth Mattijsen)++ | lib/RakuDoc/To/RakuDoc.rakumod

[11:38] <Geth> ¦ rakudo/main: RakuAST: merge =leading / =trailing into single paragraph

[11:38] <Geth> ¦ rakudo/main: 

[11:38] <Geth> ¦ rakudo/main: As suggested by patrickb++   Note this can be reverted easily.

[11:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8eef4c797d

[14:03] *** finanalyst left
[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[16:06] *** summerisle is now known as eof

[16:10] <timo> i wonder how much performance penalty we would have to pay to have the objects table in serialized blobs be variable width entries instead of fixed length entries

[16:16] <timo> though of course the deserialized data is a few times bigger than the objects table

[16:19] <timo> m: say "the serialized data is $(0x4b9968 / 0x1bdc00) times bigger"; say "the serialized data is $(0x4b9968 * 100 / 0x1383778)% of the total 'data' section"

[16:19] <camelia> rakudo-moar 8eef4c797: OUTPUT: «the serialized data is 2.7136015 times bigger␤the serialized data is 24.21371095% of the total 'data' section␤»

[16:19] <ab5tract> intriguing

[16:20] <timo> this is the core c setting

[16:22] <ab5tract> how do you reckon we could get reasonable stats on the performance shift (if any)?

[16:23] <coleman> Where is the serialization implemented right now

[16:24] <Geth> ¦ rakudo/main: fdeb87d04b | ab5tract++ | src/Perl6/Optimizer.nqp

[16:24] <Geth> ¦ rakudo/main: Fix small breakage in the Mu:U sm optimization

[16:24] <Geth> ¦ rakudo/main: 

[16:24] <Geth> ¦ rakudo/main: While migrating from an earlier version of the fix, I forgot

[16:24] <Geth> ¦ rakudo/main: to change `$rhs.value` back to `$rhs.ast`.

[16:24] <Geth> ¦ rakudo/main: 

[16:24] <Geth> ¦ rakudo/main: It also appears that my issues with `$sm_type_how` were either

[16:24] <Geth> ¦ rakudo/main: self-inflicted or entirely imagined, as it works fine.

[16:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fdeb87d04b

[16:29] <timo> coleman: you have 6model/serialization.c but src/core/bytecode.c is also important, and (almost) every REPR under src/6model/reprs/ has their own serialize and deserialize functions for both instance data and repr_data

[16:29] <coleman> gotcha; thank you

[16:30] <coleman> For saving space, capnproto objects have an OPTIONAL packing scheme https://capnproto.org/encoding.html#packing

[16:33] <timo> we do want to have almost-random-access to individual elements of a long table

[16:34] <timo> we do have variable width integers in our scheme, and the table in question us all integers

[16:40] <coleman> do we have an integration test in the moarvm repo that deals with bytecode files directly

[16:41] <coleman> even if it's one like "run this and don't crash"

[16:42] <timo> no, no tests at all inside the moarvm repo

[16:43] <timo> nqp's test suite is used as tests for moarvm

[16:52] <timo> i'm about to push a branch to moarvm where you can get a detailed dump of a .moarvm file (work-in-progress though)

[16:53] <timo> i'm aiming for a "what if xxd, but a human-readable index at the start, and things in the middle split up into chunks", so you'd have one hexdump per string, one hexdump per STable data, etc

[16:53] <timo> for some segments right now it's just one dump for the whole thing

[16:58] <coleman> I think that's a prerequisite to any optimization, yea

[16:59] <timo> well, you could alternatively look at the stuff in gdb after moar has loaded it, or measure stuff from a running program

[16:59] <timo> this has been prompted by reproducible builds and diffoscope, so i'm trying to make the dump work as good as it can without reading additional files from disk

[17:01] <timo> but of course what something like python might have "as built-in as it gets" like str, list, dict, are all high-level classes you pull in from the setting, and partially they come in through the bootstrap i think

[17:01] <timo> and the serialization format isn't self-describing like a json would be, so you can't decipher it without having the moar code (or binary of course)

[17:02] <timo> the dumper should not run a single drop of custom code

[17:02] <coleman> agreed

[17:03] <timo> but every moar bytecode has a deserialization frame that is responsible for a bunch of important setup, so we can't trivially have the fruits of that labor be exposed helpfully in the dumper output

[17:03] <timo> plus it should run fast

[17:04] <timo> hm. i assume xxd is a lot faster than my silly hand-crafted hxdump function, so for use in tools like diffoscope there should be a "carve" mode (like binwalk's carve) aka "extract" which makes a set of files with the bits in it

[17:08] <coleman> easy-to-run > faster (at first)

[17:10] <timo> i will probably contribute moarvm support to diffoscope, it's not much. but i don't want to make them add moarvm to the dependencies or even suggested dependencies tbh

[17:10] <timo> it's already a huge tree of dependencies you pull in when you install diffoscope

[17:12] <timo> ok, pull moarvm and check out the detailed_moarvm_file_dump branch

[17:12] <timo> it's not doing everything yet, but it serves as a starting point if you want to go explore

[17:12] <timo> i'll keep hacking at it

[17:14] <coleman> ty

[17:19] <timo> if you want to poke at deserialization, you can `use nqp;` in raku code, then `nqp::getobjsc($existing_thing)` (may need to decont) can give you the sc an object belongs to, then `nqp::scgethandle` tells you what you have the SC of, nqp::scgetdesc gives you the "description" of the SC (probably path or filename), nqp::scobjcount gives you how many objects are in it, and `nqp::scgetobj` gets you

[17:19] <timo> an object out of the SC by its index

[17:19] <timo> breakpoints in "work_loop" can be illuminating when it comes to trees of serialized objects being read

[17:20] <timo> functions with "sc_demand" in the name are also interesting. demand stable, demand code, demand object

[17:21] <ab5tract> timo++

[17:28] <timo> oh the frames data is also quite sizable

[17:34] <timo> m: say "hexdump of 25210 frame data is $(0xbae8b0 / 16) lines"; say "$(0xbae8b0 / 25210) bytes per frame on average"

[17:34] <camelia> rakudo-moar fdeb87d04: OUTPUT: «hexdump of 25210 frame data is 765579 lines␤485.889092 bytes per frame on average␤»

[17:35] <timo> good candidate for a table with the most important info, and if anything in the other parts differs, the byte level diff would show them as well

[17:51] *** sena_kun left
[18:09] <coleman> I'm attempting to install windows on my other NVME drive right now; I have an old windows 10 license i think. I will either succeed and compile Rakudo on windows, succeed and play Rocket League, or fail.

[18:10] <coleman> back in a bit

[18:10] <coleman> one of those 3

[18:13] <timo> i thought rocket league runs perfectly on linux :)

[18:15] <coleman> it stopped when i switched from PopOS to Ubuntu

[18:15] <coleman> or some other upgrade

[18:16] <coleman> or maybe it was Epic Games' fault

[18:16] <coleman> who knows.

[18:44] <timo> https://gist.github.com/timo/4b668a64657c8706c0ac9fd91aad4e4b for other spectators, here's a snipped new moar dump output example, just over 10k lines :)

[18:47] <timo> anyway, dumping the entire core.c setting with this code already just takes one second, unless you dump it to an unbuffered tty

[19:15] <timo> now hunting a spot where the build directory is going into the core setting's string heap

[19:26] *** sena_kun joined
[19:49] <Geth> ¦ rakudo/main: 6e182acdb1 | ab5tract++ | t/08-performance/03-optimizer-regressions.t

[19:49] <Geth> ¦ rakudo/main: Add test for "not-Mu:U" ~~ Mu:U

[19:49] <Geth> ¦ rakudo/main: 

[19:49] <Geth> ¦ rakudo/main: As it is optimizer-related, I've stashed it in the Rakudo test suite

[19:49] <Geth> ¦ rakudo/main: under `08-performance`.

[19:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6e182acdb1

[20:40] *** sena_kun left
[20:40] *** finanalyst joined
[22:07] *** finanalyst left
[22:53] <timo> ok this is slightly odd: when we parse a $?FILE we generate the full file path as a constant ... so when we parse `multi sub trait_mod:<is>(Attribute:D $attr, |c) { X::Comp::Trait::Unknown.new(file => $?FILE, [...]` in the core setting, we just put the core setting's path in there? but when i actually run into it in code, something else must be updating it to point at where it actually happened

[22:53] <timo> as the parser sees it

[22:58] <timo> yeah, World's handle-begin-time-exceptions is one place that does that kind of thing

[22:59] <timo> and directly below that the rethrow method

[23:08] <timo> in any case, i don't think putting $?LINE and $?FILE there is correct at all

[23:16] <timo> m: class A { has $.haha }; try trait_mod:<is>(A.^attributes[0], funny => "very"); say $!.raku

[23:16] <camelia> rakudo-moar 6e182acdb: OUTPUT: «X::Comp::Trait::Unknown.new(pos => Any, filename => Any, line => 220, directive-filename => Any, column => Any, modules => [], is-compile-time => Bool::False, pre => Any, post => Any, highexpect => ["rw", "readonly", "box_target", "leading_docs", "tra…»

[23:17] <timo> mhh ... hmm?

[23:17] <timo> m: say $?FILE

[23:17] <camelia> rakudo-moar 6e182acdb: OUTPUT: «<tmp>␤»

[23:19] <timo> ... ... ... the code was setting "file" rather than "filename"

[23:21] <timo> m: use MONKEY; augment class X::Comp::Trait::Unknown { method new(|c) { say "called with $(c.raku)" } }; try trait_mod:<is>(X::Comp::Trait::Unknown.^attributes[0], funny => "barely"); say $!.raku;

[23:21] <camelia> rakudo-moar 6e182acdb: OUTPUT: «called with \(:declaring("an attribute"), :file("/home/camelia/rakudo-m-1/gen/moar/CORE.c.setting"), :highexpect(("rw", "readonly", "box_target", "leading_docs", "trailing_docs")), :line(220), :subtype("funny"), :type("is"))␤X::Method::NotFound.new(…»

[23:21] <timo> there we go

[23:35] <Geth> ¦ rakudo/no_file_variable_in_precomps: 85a07423e3 | (Timo Paulssen)++ | 2 files

[23:35] <Geth> ¦ rakudo/no_file_variable_in_precomps: Remove $?FILE and $?LINE where they don't make much sense

[23:35] <Geth> ¦ rakudo/no_file_variable_in_precomps: 

[23:35] <Geth> ¦ rakudo/no_file_variable_in_precomps: The filename and line will get set by World if the exception is

[23:35] <Geth> ¦ rakudo/no_file_variable_in_precomps: thrown at BEGIN time, "file" is not a named argument the

[23:35] <Geth> ¦ rakudo/no_file_variable_in_precomps: X::Comp constructor takes ("filename" would be), so this is

[23:35] <Geth> ¦ rakudo/no_file_variable_in_precomps: not a regression. And the filename and line from the core setting

[23:35] <Geth> ¦ rakudo/no_file_variable_in_precomps: is not very helpful, since you also get a stack trace in that case.

[23:35] <Geth> ¦ rakudo/no_file_variable_in_precomps: review: https://github.com/rakudo/rakudo/commit/85a07423e3

[23:37] <Geth> ¦ rakudo: timo++ created pull request #5647: Remove $?FILE and $?LINE where they don't make much sense

[23:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5647

