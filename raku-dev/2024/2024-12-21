[11:27] <[Tux]> Rakudo v2024.12-20-ge5a715ab7 (v6.d) on MoarVM 2024.12-8-gf4680765f

[11:27] <[Tux]> csv-test-xs-20      0.142 -  0.143

[11:27] <[Tux]> csv-ip5xs           0.258 -  0.267

[11:27] <[Tux]> test-t --race       0.271 -  0.274

[11:27] <[Tux]> test-t              0.407 -  0.413

[11:27] <[Tux]> csv-ip5xs-20        1.112 -  1.121

[11:27] <[Tux]> test-t-20 --race    1.260 -  1.274

[11:27] <[Tux]> csv-parser          1.466 -  1.504

[11:27] <[Tux]> test                1.834 -  1.856

[11:27] <[Tux]> test-t-20           5.098 -  5.220

[11:27] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[15:24] *** sena_kun left
[15:24] *** guifa left
[15:24] *** sena_kun joined
[15:28] *** sena_kun left
[15:30] *** sena_kun joined
[17:00] <[Coke]> c: HEAD say 3

[17:00] <committable6> [Coke], ¦HEAD(e5a715a): «3␤»

[17:02] <lizmat> m: my %h; if %h<a> andthen $_ == 666 { } elsif %h<a> andthen $_ == 666 { } }

[17:02] <camelia> rakudo-moar e5a715ab7: OUTPUT: «===SORRY!===␤Cannot find method 'blocktype' on object of type QAST::Op␤»

[17:02] <lizmat> meh

[17:03] * [Coke] kicks off a one week blin run

[17:04] <lizmat> ah, already reported 2+ years ago: #4847

[17:04] <[Coke]> R#4847

[17:04] <linkable6> R#4847 [open]: https://github.com/rakudo/rakudo/issues/4847 [tests committed][Fixed in RakuAST] elsif andthen gives compilation error and weird message

[20:23] <bartolin> m: say q["foo  &   bar"].trans(/(" "+)/ => {" " ~ ("\&nbsp;" x ($0.chars - 1))}, /(\W)/ => {"&#{ord($0)};"})

[20:23] <camelia> rakudo-moar e5a715ab7: OUTPUT: «&#34;foo &nbsp;&#38; &nbsp;&nbsp;bar&#34;␤»

[20:24] <bartolin> This fails on the JVM backend now. The test is from https://github.com/Raku/roast/blob/428a5c2d94/S05-transliteration/trans.t#L194

[20:24] <bartolin> The error is: Cannot resolve caller ord(Nil:U: ); none of these signatures matches: (Cool:D $:: *%_ --> Int:D)

[20:25] <bartolin> And the backtrace points to this nqp::push_s: https://github.com/rakudo/rakudo/blob/e5a715ab7d/src/core.c/Str.rakumod#L3202 

[20:26] <bartolin> ^^ lizmat Do you have an idea what could go wrong there?

[20:35] <bartolin> m: 'say q["f"].trans(/(" "+)/ => {}, /(\W)/ => {"&#{ord($0)};"})'

[20:35] <camelia> rakudo-moar e5a715ab7: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "say q[\"f\"].trans(/(\" \"+)/ => {}, /(\\W)/ => {\"&#{ord($0)};\"})" in sink context (line 1)␤»

[20:35] <bartolin> m: say q["f"].trans(/(" "+)/ => {}, /(\W)/ => {"&#{ord($0)};"})

[20:35] <camelia> rakudo-moar e5a715ab7: OUTPUT: «MVMArray: Index out of bounds␤  in block <unit> at <tmp> line 1␤␤»

[20:36] * bartolin is trying to golf the problem a bit. But this looks like an internal error leaking out

[20:52] <timo> are you still looking? should i take a look as well?

[20:58] <bartolin> I'm still trying to shorten the problem a bit. For now I'm at

[20:58] <bartolin> m: say "x".trans(/y/ => "y", /./ => {$0 ~~ Nil ?? "N" !! $0})

[20:58] <camelia> rakudo-moar e5a715ab7: OUTPUT: «x␤»

[20:58] <bartolin> This gives a "N" on the JVM backend

[20:59] <bartolin> m: say "x".trans(/x/ => "x", /./ => {$0 ~~ Nil ?? "N" !! $0})  ## This one works on the JVM as well

[20:59] <camelia> rakudo-moar e5a715ab7: OUTPUT: «x␤»

[21:00] <bartolin> But if I leave out the first pair, both backends respond with "N":

[21:00] <bartolin> m: say "x".trans(/./ => {$0 ~~ Nil ?? "N" !! $0})

[21:00] <camelia> rakudo-moar e5a715ab7: OUTPUT: «N␤»

[21:03] <bartolin> I'm not even sure what .trans is supposed to do with multiple Pairs. I guess it should do the transformation from the first Pair and then do the transformation from the second Pair on the result of the first transformation?

[21:12] <timo> i'm not sure either

[21:12] <timo> i haven't used trans a lot in the past

[21:12] * bartolin neither

[21:31] <bartolin> well, it looks like the second Pair is used for the part of the input string that hasn't been transformed yet

[21:31] <bartolin> m: say "xyzxyz".trans(/y/ => "a", /./ => {$++})

[21:31] <camelia> rakudo-moar e5a715ab7: OUTPUT: «0a12a3␤»

[21:55] <timo> maybe each is tried in turn for every location?

[21:55] <timo> m: say "xyz x y z ".trans(/y/ => "a", /<?after \s>./ => {$++})

[21:55] <camelia> rakudo-moar e5a715ab7: OUTPUT: «xaz 0 a 1 ␤»

[22:06] <bartolin> m: say "xyzxyz".trans(/y/ => "a", /<?after "y">./ => {$++})

[22:06] <camelia> rakudo-moar e5a715ab7: OUTPUT: «xa0xa1␤»

[22:08] <bartolin> yes, that makes sense. every Pair seems to work on the original input.

[22:09] <bartolin> I'll call it a day. thanks for looking :)

[22:09] <lizmat> m: my $/ = 42; say $0

[22:09] <camelia> rakudo-moar e5a715ab7: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$/'.␤    at <tmp>:1␤    ------> my $/<HERE> = 42; say $0␤42␤»

[22:09] <lizmat> m: $/ = 42; say $0

[22:09] <camelia> rakudo-moar e5a715ab7: OUTPUT: «42␤»

[22:10] <lizmat> bartolin: ^^  what does that say on the JVM ?

[22:10] <bartolin> also 42

[22:14] <lizmat> hmmmm

[22:17] <bartolin> I mostly wonder where this $0 is coming from (or not coming from):

[22:17] <bartolin> m: say "x".trans(/y/ => "y", /./ => {$0 ~~ Nil ?? "N" !! $0}), "x".trans(/./ => {$0 ~~ Nil ?? "N" !! $0})

[22:17] <camelia> rakudo-moar e5a715ab7: OUTPUT: «xN␤»

[22:20] <lizmat> m: "x".trans(/./ => { dd $/, $_; $/)

[22:20] <camelia> rakudo-moar e5a715ab7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> "x".trans(/./ => { dd $/, $_; $/<HERE>)␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier loop␤»

[22:20] <timo> try .WHERE and .VAR.WHERE on $/ in different places

[22:20] <lizmat> m: "x".trans(/./ => { dd $/, $_; $/ })

[22:20] <camelia> rakudo-moar e5a715ab7: OUTPUT: «$/ = Match.new(:orig("x"), :from(0), :pos(1))␤$/ = Match.new(:orig("x"), :from(0), :pos(1))␤»

[22:21] <bartolin> oh, about my question, it's a different candidate

[22:21] <lizmat> m: "x" ~~ /./; dd $/

[22:21] <camelia> rakudo-moar e5a715ab7: OUTPUT: «$/ = Match.new(:orig("x"), :from(0), :pos(1))␤»

[22:21] <lizmat> m: "x" ~~ /./; dd $/, $0

[22:21] <camelia> rakudo-moar e5a715ab7: OUTPUT: «$/ = Match.new(:orig("x"), :from(0), :pos(1))␤Nil  = Nil␤»

[22:21] <lizmat> huh?

[22:21] <lizmat> m: "x" ~~ /./; say $/, $0

[22:21] <camelia> rakudo-moar e5a715ab7: OUTPUT: «｢x｣Nil␤»

[22:22] <lizmat> m: "x" ~~ /./; say $/, $/[0]

[22:22] <camelia> rakudo-moar e5a715ab7: OUTPUT: «｢x｣Nil␤»

[22:22] <lizmat> m: "x" ~~ /(.)/; say $/, $0

[22:22] <camelia> rakudo-moar e5a715ab7: OUTPUT: «｢x｣␤ 0 => ｢x｣｢x｣␤»

[22:23] <lizmat> m: ":" ~~ /(\W)/; say $0

[22:23] <camelia> rakudo-moar e5a715ab7: OUTPUT: «｢:｣␤»

[22:24] <lizmat> bartolin: ^^ what does that say on the JVM ?

[22:24] <bartolin> same output: ｢:｣

[22:26] <lizmat> m: "4" ~~ /(.*)/; say "&#&ord($0);"

[22:26] <camelia> rakudo-moar e5a715ab7: OUTPUT: «&#52;␤»

[22:27] <lizmat> ^^ what does that say on the JVM ?

[22:27] <bartolin> also the same output

[22:27] <lizmat> meh

[22:27] <lizmat> is that one of the tests I recently unfudged ?

[22:28] <lizmat> ah, nope

[22:28] <bartolin> no, it's an old one.

[22:29] <lizmat> what do $/ say in the outer and the inner closure?

[22:29] <lizmat> aka:  {say $/; "&#{say $/; ord($0)};"}

[22:30] <bartolin> m: say $/; "&#{say $/; ord($0)};"  ## you mean like this?

[22:30] <camelia> rakudo-moar e5a715ab7: OUTPUT: «WARNINGS for <tmp>:␤Nil␤Nil␤Useless use of "&#{say $/; ord($0)};" in expression "&#{say $/; ord($0)};" in sink context (line 1)␤Cannot resolve caller ord(Nil:U: ); none of these signatures matches:␤    (Cool:D $:: *%_ --> Int:D)␤  in block…»

[22:32] <bartolin> it's basically the same output on the JVM. (the exception has one more uninteresting line.)

[22:32] <lizmat> no, inside the whole .trans line

[22:33] <bartolin> oh, mom

[22:34] <bartolin> m: say "x".trans(/(y)/ => "y", /./ => {say $/; "&#{say $/; ord($0)};"})

[22:34] <camelia> rakudo-moar e5a715ab7: OUTPUT: «x␤x␤&#120;␤»

[22:34] *** sena_kun left
[22:34] <bartolin> on the JVM that's: "Nil\nNil\nCannot resolve caller ord(Nil:U: ); none of these signatures matches:\n    (Cool:D $:: *%_ --> Int:D)"

[22:35] <lizmat> yea, so $/ is not being propagated on the JVM   

[22:35] <lizmat> m: ":".trans/(\W)/ => {"&#{ord($0)};"})

[22:35] <camelia> rakudo-moar e5a715ab7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Preceding context expects a term, but found infix => instead.␤at <tmp>:1␤------> ":".trans/(\W)/ =><HERE> {"&#{ord($0)};"})␤»

[22:36] <lizmat> m: ":".trans(/(\W)/ => {"&#{ord($0)};"})

[22:36] <camelia> rakudo-moar e5a715ab7: ( no output )

[22:36] <lizmat> m: say ":".trans(/(\W)/ => {"&#{ord($0)};"})

[22:36] <camelia> rakudo-moar e5a715ab7: OUTPUT: «&#58;␤»

[22:36] <lizmat> what does that say on the JVM ?

[22:36] <bartolin> it has the correct output

[22:37] <lizmat> ok, please make an issue for it, I'll look at it tomorroq

[22:37] <lizmat> w

[22:37] <bartolin> btw, I think it fails if I pass that as a List

[22:37] <lizmat> yeah, it probably will

[22:38] <lizmat> m: say ":".trans((/(\W)/ => {"&#{ord($0)};"},))

[22:38] <camelia> rakudo-moar e5a715ab7: OUTPUT: «&#58;␤»

[22:38] <lizmat> those are different code paths

[22:38] <bartolin> yeah, that gives the error "Cannot resolve .."

[22:39] <bartolin> ok, I can't say when I'll be able to create the issue. Hopefully tomorrow ...

[22:39] * bartolin now really heads for bed

[22:39] <lizmat> ok fair enough, I'll make the issue then

[22:40] <bartolin> thanks. but it's nothing urgent ...

[22:40] <bartolin> o/

[22:46] <lizmat> https://github.com/rakudo/rakudo/issues/5744

[22:47] <lizmat> afk&

