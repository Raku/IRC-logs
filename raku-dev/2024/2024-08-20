[01:11] *** kjp left
[01:13] *** kjp joined
[01:14] *** kjp left
[01:14] *** kjp joined
[08:24] *** MasterDuke left
[08:47] <Geth> ¦ rakudo/main: a04a819905 | (Stefan Seifert)++ | 4 files

[08:47] <Geth> ¦ rakudo/main: RakuAST: support trait_mod:<will>

[08:47] <Geth> ¦ rakudo/main: 

[08:47] <Geth> ¦ rakudo/main: Fixes: my $begin; my $b will begin { $begin ~= "b" }; say $begin

[08:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a04a819905

[08:47] <Geth> ¦ rakudo/main: 56a80347be | (Stefan Seifert)++ | 2 files

[08:47] <Geth> ¦ rakudo/main: RakuAST: remove obsolete IMPL-CHECK call from IMPL-BEGIN-TIME-EVALUATE

[08:47] <Geth> ¦ rakudo/main: 

[08:47] <Geth> ¦ rakudo/main: Before the rakuast-phase-cleanup branch, IMPL-CHECK was also responsible

[08:47] <Geth> ¦ rakudo/main: for running BEGIN time. It no longer is, so there's no point to

[08:47] <Geth> ¦ rakudo/main: enforcing CHECK time before we make BEGIN time calls.

[08:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/56a80347be

[08:48] <Geth> ¦ rakudo/main: ce311700dd | (Stefan Seifert)++ | src/Raku/ast/statementprefixes.rakumod

[08:48] <Geth> ¦ rakudo/main: RakuAST: fix CHECK phasers with expressions instead of blocks

[08:48] <Geth> ¦ rakudo/main: 

[08:48] <Geth> ¦ rakudo/main: CHECK takes a blorst, i.e. a block or statement. BEGIN time evaluation

[08:48] <Geth> ¦ rakudo/main: can either run a code object or an expression, but not statements. Thunk

[08:48] <Geth> ¦ rakudo/main: all expressions before evaluating to get around this.

[08:48] <Geth> ¦ rakudo/main: 

[08:48] <Geth> ¦ rakudo/main: Fixes my $f; CHECK $f ~= 1

[08:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ce311700dd

[10:41] *** dawids joined
[11:41] *** dawids left
[12:36] <Geth> ¦ rakudo/main: 4397c0e245 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.rakumod

[12:36] <Geth> ¦ rakudo/main: RakuAST: some small deparsing/highlighting fixes

[12:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4397c0e245

[12:46] <lizmat> heh, while looking at some threading issues, I think I found one of the reasons why precomp on RakuAST is a mess

[12:46] <lizmat>     my constant $compilation-id = nqp::box_s(

[12:46] <lizmat>       nqp::sha1($*W.handle.Str ~ nqp::atkey($config,'source-digest')),Str

[12:46] <lizmat>     );

[12:46] <lizmat> or at least, will need to be fixed to make RakuAST core

[13:11] <Geth> ¦ rakudo/main: 9f34623f81 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[13:11] <Geth> ¦ rakudo/main: RakuAST: remove active mention to $*W

[13:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9f34623f81

[13:48] *** donaldh joined
[13:51] <nine> Looks like we're not running out of low hanging fruit at all :)

[14:04] <nine> lizmat: I already got a commit dealing with $*W in Variable.rakumod

[14:04] <lizmat> cool!

[14:33] <Geth> ¦ rakudo: patrickbkr++ created pull request #5624: Add a test for intepolating variables into grammars

[14:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5624

[14:38] <Geth> ¦ rakudo/main: cd67429898 | (Stefan Seifert)++ | 5 files

[14:38] <Geth> ¦ rakudo/main: RakuAST: fix adding phasers through will trait

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: The will trait tries to add phasers either to the current block or to

[14:38] <Geth> ¦ rakudo/main: the compunit. It needs to access those even in a RakuAST based compiler.

[14:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cd67429898

[14:42] <nine> With this we're at 1126

[15:21] <Geth> ¦ rakudo/main: 06e1fe6cea | (Stefan Seifert)++ | src/Raku/ast/compunit.rakumod

[15:21] <Geth> ¦ rakudo/main: RakuAST: fix CHECK phasers added through will trait accidentally getting added as END phasers

[15:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/06e1fe6cea

[15:21] <Geth> ¦ rakudo/main: f61870cfee | (Stefan Seifert)++ | 2 files

[15:21] <Geth> ¦ rakudo/main: RakuAST: ensure CHECK phasers are run in reverse order of declaration

[15:21] <Geth> ¦ rakudo/main: 

[15:21] <Geth> ¦ rakudo/main: Ironically, this means that StatementPrefix::Check is no longer

[15:21] <Geth> ¦ rakudo/main: CheckTime, but instead has to be BeginTime to add the phaser to the

[15:21] <Geth> ¦ rakudo/main: compunit's queue.

[15:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f61870cfee

[15:21] <nine> And this makes it 1129

[16:41] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++

[16:41] <Geth> ¦ rakudo/main: 5de09e0b34 | RakuAST: have :_ override :D mandated by pragma

[16:41] <Geth> ¦ rakudo/main: a90eeabbd7 | RakuAST: fix confusion between base and subclass' add-pragma methods in CompUnit

[16:41] <Geth> ¦ rakudo/main: 866c77d8b7 | RakuAST: make clear in error message that definedness constraint is from pragma

[16:41] <Geth> ¦ rakudo/main: c7c2503726 | RakuAST: complain about invalid type smileys

[16:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/f61870cfeef4...c7c2503726bf

[16:41] <nine> Surprisingly this brings us up to 1131

[17:01] *** sena_kun joined
[17:21] <Geth> ¦ rakudo/main: fab0ae21e9 | (Patrick Böker)++ (committed using GitHub Web editor) | t/12-rakuast/xx-fixed-in-rakuast.rakutest

[17:21] <Geth> ¦ rakudo/main: Assorted grammar tests

[17:21] <Geth> ¦ rakudo/main: 

[17:21] <Geth> ¦ rakudo/main: Pass with RakuAST, fail with the legacy compiler.

[17:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fab0ae21e9

[18:37] <Geth> ¦ rakudo/main: 43d2b0fb49 | (Stefan Seifert)++ | src/core.c/Exception.rakumod

[18:37] <Geth> ¦ rakudo/main: Support will complain on X::Syntax::Number::LiteralType

[18:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/43d2b0fb49

[18:37] <Geth> ¦ rakudo/main: 0be319b8db | (Stefan Seifert)++ | 2 files

[18:37] <Geth> ¦ rakudo/main: RakuAST: ensure will complain blocks get code-gened

[18:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0be319b8db

[18:37] <nine> I guess there's always room for one more: 1132

[20:36] <Geth> ¦ rakudo/main: 4d35f1e3e9 | (Stefan Seifert)++ | 2 files

[20:36] <Geth> ¦ rakudo/main: RakuAST: support ~ regex metachar

[20:36] <Geth> ¦ rakudo/main: 

[20:36] <Geth> ¦ rakudo/main: Fixes regex { '(' ~ ')' a* }

[20:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4d35f1e3e9

[20:36] <Geth> ¦ rakudo/main: 70059eb1a4 | (Stefan Seifert)++ | 3 files

[20:36] <Geth> ¦ rakudo/main: RakuaST: support proto token

[20:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/70059eb1a4

[20:37] <nine> 1134

[20:38] <nine> I thought maybe proto token was a simple fix, but that just opened the door to a whole load of regex issues. And the commit I pushed is just the proto side. Still need to actually support the multis attached to it.

[20:43] <ugexe> m: Nil.asldkjfalskjdf

[20:43] <camelia> rakudo-moar 0be319b8d: ( no output )

[20:43] <ugexe> why?

[20:43] <lizmat> m: say Nil.bhkjhkghk

[20:43] <camelia> rakudo-moar 0be319b8d: OUTPUT: «Nil␤»

[20:44] <lizmat> the idea being that anything called on Nil will produce Nil

[20:45] <ugexe> im having trouble thinking of a situation where one would want this behavior

[21:01] <lizmat> from S02-bits:

[21:01] <lizmat> "Any undefined method call

[21:01] <lizmat> on C<Nil> returns C<Nil>, so that C<Nil> propagates down method call chains.

[21:01] <lizmat> Likewise any subscripting operation on C<Nil> returns C<Nil>."

[21:06] <[Coke]> You can't fool me, it's Nils all the way down.

[21:15] <ugexe> ok, but im trying to thikn of a time where i've written code and would have wanted that behavior. maybe i'm overlooking something

[22:12] <[Coke]> fail as late as possible.

[22:12] <[Coke]> check for Nil in the last step of the calc so you don't have to do it after each step. Yah, I don't write that way either.

[22:30] *** sena_kun left
