[01:52] *** MasterDuke joined
[01:54] <MasterDuke> lizmat: i think there's a new infini-loop. after pulling the latest nqp commits, the rakudo build hangs in `+++ Generating  gen/moar/BOOTSTRAP/v6c.nqp` and `perf top` shows moarvm spending *lots* of time in `get_attribute`

[03:58] *** MasterDuke left
[05:50] *** [Coke] left
[05:53] *** [Coke] joined
[06:45] *** djinni` left
[06:50] *** djinni` joined
[07:43] <nine> For me it hangs in nqp-m --module-path=blib --ll-exception --target=mbc --output=blib/Perl6/Metamodel.moarvm gen/moar/Metamodel.nqp

[08:20] <lizmat> grrr

[08:21] <lizmat> confirmed

[08:21] <lizmat> :-(

[08:25] <Geth> ¦ nqp/main: 57b956822e | (Elizabeth Mattijsen)++ | src/how/RoleToRoleApplier.nqp

[08:25] <Geth> ¦ nqp/main: Fix infinilooping in Rakudo

[08:25] <Geth> ¦ nqp/main: 

[08:25] <Geth> ¦ nqp/main: Clearly we need more tests in NQP  :-(

[08:25] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/57b956822e

[08:49] <nine> lizmat: don't you run a spectest after changes in NQP?

[08:51] <nine> lizmat: btw. why not return 1 instead of $skip := 1 in can_skip_attribute_by_name? If we find the attribute already in that list, we know it cannot be a duplicate anymore and further checks are unnecessary.

[08:51] <lizmat> nine: I thought I had run a spectest, but evidently I didn't  :-(

[08:52] <nine> I know how that is :)

[08:52] <nine> Or even worse, you do run a spectest but only did make and not make install in NQP, so you only think you tested your change

[08:53] <lizmat> re returning 1: I just followed the original code, and was't sure about the semantics, as it *also* checks for name collisions

[08:55] *** [Coke] left
[08:58] <lizmat> nine: what I find strange in all this, is that actually cannot find a use of the NQP RoleToRoleApplier in rakudo

[08:58] *** [Coke] joined
[08:58] <lizmat> evidently I don't understand the bootstrap well enough yet  :-(

[08:59] *** epony joined
[09:03] <gfldex> lizmat: Do you use git-hooks before `git push`?

[09:05] <lizmat> no

[09:06] <gfldex> I found those helpful to avoid embarrassment. :)

[09:09] <lizmat> well, there's that, but I already run spectests at least 20 times / day, that's more than 1 hour I can spend on social media already  :-)

[09:18] *** finanalyst joined
[09:25] *** epony left
[09:25] *** epony joined
[09:58] *** sena_kun joined
[10:26] *** finanalyst left
[11:21] <Geth> ¦ nqp/main: 5d896651d9 | (Elizabeth Mattijsen)++ | src/how/NQPClassHOW.nqp

[11:21] <Geth> ¦ nqp/main: Streamline NQPClassHOW some more

[11:21] <Geth> ¦ nqp/main: 

[11:21] <Geth> ¦ nqp/main: - add some more helper subs to simplify updates

[11:21] <Geth> ¦ nqp/main: - add "add_tweak" method to support role TWEAKS in the future

[11:21] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/5d896651d9

[11:23] <Geth> ¦ nqp/main: aadfaf9138 | (Elizabeth Mattijsen)++ | src/how/NQPConcreteRoleHOW.nqp

[11:23] <Geth> ¦ nqp/main: Streamline NQPConcreteRoleHOW

[11:23] <Geth> ¦ nqp/main: 

[11:23] <Geth> ¦ nqp/main: - add some helper subs

[11:23] <Geth> ¦ nqp/main: - add protected blocks where necessary (functional at a later stage)

[11:23] <Geth> ¦ nqp/main: - add "add_tweak" method to allow adding multiple role tweaks

[11:23] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/aadfaf9138

[14:14] *** [Coke] left
[14:19] *** [Coke] joined
[16:48] *** nebuchadnezzar left
[17:49] *** librasteve_ joined
[17:53] <librasteve_> o/

[17:55] <librasteve_> I just made a minor PR on rakudo.org (this is a new version that addresses the comments of others - as you can see in the comments) — https://github.com/rakudo/rakudo.org/pull/100

[17:55] <librasteve_> would it help to ping someone to review and merge? if so - who?

[17:57] <librasteve_> (I am happy to be added to the rakudo.org admin if that’s a better option)

[17:57] <lizmat> librasteve: I'm missing a reference to El_Che's packages, is that intentional ?

[17:58] <librasteve_> you mean rakudo-pkg (is El_Che nxadm?)

[17:58] <lizmat> yes

[17:59] <librasteve_> this PR does not change the current ref to rakudo-pkg … I tested that this morning on a clean ubuntu build and it came up with 2022.10 … so I have moved this aspect out to a new Issue https://github.com/rakudo/rakudo.org/issues/99

[18:00] <librasteve_> and asked them to get it working first

[18:00] <lizmat> ack... invite for commit bit on its way!

[18:00] <librasteve_> ta

[18:00] <jdv> is installing a modern raku hard?

[18:01] <librasteve_> it’s easy if you know how

[18:01] <jdv> i must of missed something in my backlogging

[18:01] <jdv> *have

[18:01] <librasteve_> the hard part i navigating all the options

[18:02] <jdv> there are quite a few different ways

[18:05] <jdv> this all came about because of user complaints?

[18:08] <librasteve_> yes - https://www.reddit.com/r/rakulang/comments/1apmed0/rakudo_cant_find_libraries/

[18:09] <jdv> ah

[18:09] <jdv> did we lose our deb porter?

[18:10] <librasteve_> standard apt-get install rakudo is waaay out of date, so I guess yes

[18:11] <jdv> i mean deb is normally out more than others

[18:11] <jdv> but experimental is even super out

[18:12] <librasteve_> since the rakudo_pkg folks are keen, I think the best short term approach would be that (ie attach that cloudsmith repo to your apt-get) … so I am hoping that they will get that up and running (currently it loads 2022.10 for me)

[18:12] <jdv> what is that now?  i think the repo is newer...

[18:13] <librasteve_> 2024.01

[18:13] <lizmat> librasteve_: could it be that your Linux is EOL ?

[18:13] <jdv> iirc Blin uses that repo and it was up to date last i saw

[18:13] <librasteve_> ideally we would get the deb guys on board … but we can also remove some of the footguns on our own sites

[18:14] <librasteve_> let me double check my linux

[18:14] <lizmat> librasteve_: if your Linux is EOL, then El_Che doesn't provide newer Rakudo versions anymore

[18:16] <librasteve_> Welcome to Ubuntu 22.04.1 LTS

[18:17] <jdv> Blin uses deb stable at the moment.  i only know about debian.

[18:25] *** epony left
[18:25] <librasteve_> ah you have to guess its ‘apt-get install rakudo-pkg’ … let me clarify with bazzaar over on the issue

[18:25] *** epony joined
[18:52] <Geth> ¦ rakudo/lizmat-native-int-coercion: b3e846542a | (Elizabeth Mattijsen)++ | 2 files

[18:52] <Geth> ¦ rakudo/lizmat-native-int-coercion: Provide native int coercers to Int/Cool

[18:52] <Geth> ¦ rakudo/lizmat-native-int-coercion: 

[18:52] <Geth> ¦ rakudo/lizmat-native-int-coercion: Specifically:

[18:52] <Geth> ¦ rakudo/lizmat-native-int-coercion: - .int, .int64, .int32, .int16, .int8

[18:52] <Geth> ¦ rakudo/lizmat-native-int-coercion: - .uint, .uint64, .uint32, .uint16, .uint8, .byte

[18:52] <Geth> ¦ rakudo/lizmat-native-int-coercion: 

[18:52] <Geth> ¦ rakudo/lizmat-native-int-coercion: Note that this is just to provide the API.  The implementation is

[18:52] <Geth> ¦ rakudo/lizmat-native-int-coercion: <…commit message has 25 more lines…>

[18:52] <Geth> ¦ rakudo/lizmat-native-int-coercion: review: https://github.com/rakudo/rakudo/commit/b3e846542a

[18:52] <Geth> ¦ rakudo: lizmat++ created pull request #5526: Provide native int coercers to `Int`/`Cool`

[18:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5526

[19:26] <Geth> ¦ nqp/main: 1a399b24cb | (Elizabeth Mattijsen)++ | src/how/RoleToClassApplier.nqp

[19:26] <Geth> ¦ nqp/main: Streamline RoleToClassApplier

[19:26] <Geth> ¦ nqp/main: 

[19:26] <Geth> ¦ nqp/main: - add some helper subs

[19:26] <Geth> ¦ nqp/main: - rename some variables for clarity

[19:26] <Geth> ¦ nqp/main: - replace for loops by while loops

[19:26] <Geth> ¦ nqp/main: - remove some dead code (was marked todo since 2011 :-)

[19:26] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/1a399b24cb

[19:33] *** [Coke]_ joined
[19:35] *** [Coke] left
[19:37] *** [Coke]_ is now known as [Coke]

[19:38] <lizmat> meh, it might be that NQP has borked Rakudo build once again  :-(    even though the spectest was clean  :-(

[19:39] <[Coke]> someone has requested "copilot business" for the raku org on github

[19:41] <lizmat> yeah, I saw that?  cannot find out who did that though

[19:42] <lizmat> How can I run a single test file when built with --with-nqp  ?

[19:43] <lizmat> ./raku t/spec/S06-operator-overloading/imported-subs.t   just says that it can't find Test  :-(

[19:43] <vrurg> To see who's requesting it Copilot needs to be activated first.

[19:44] <lizmat> ./raku -Ilib t/spec/S06-operator-overloading/imported-subs.t    fails with Missing or wrong version of dependency 'gen/moar/stage2/NQPHLL.nqp'

[19:44] <vrurg> lizmat: try removing ~/.raku/precomp

[19:45] <lizmat> no change  :-(

[19:45] <vrurg> There is something off about serialization currently. It feels like compiler's signature may not be changing something or something that causes re-use of older precomps.

[19:46] <lizmat> there's *definitely* something off there  :-(

[19:47] <vrurg> Looks like only removal of the entire installation dir is on the table now.

[19:49] <lizmat> yeah...   :-(

[19:53] <lizmat> even building with --gen-nqp=2024.01-32-g1a399b24c   doesn't allow me to run the test file  :-(

[19:57] <lizmat> Ahhh  I think I know why it first succeeded: if the libs that are used in that test file have already been precompiled, the tests pass

[19:58] <lizmat> so it seems I borked precomping the libraries  :-(

[19:58] * lizmat is going to contemplate further research

[19:58] <lizmat> afk&

[22:03] <librasteve_> hi folks, on Rakudo Star, I have started a discussion issue

[22:04] <librasteve_> the gist is *Please do comment if you would like to restore Star to an effective option - I would love to hear the plan. Meantime, I propose we remove this option from the main rakudo.org menu.*

[22:04] <librasteve_> https://github.com/rakudo/rakudo.org/issues/102

[22:05] <jdv> if star was just rakudo+zef id be into it

[22:05] <jdv> last i looked it was a bunch

[22:06] <jdv> perhaps if it was a minimal "batteries included" but idk if thats possible...

[22:07] <gfldex> I'm trying to find the origin on "Cannot unbox 65 bit wide bigint into native integer" to add a little awesome. Neither ack not a stacktrace are helpful. Any pointers?

[22:09] <librasteve_> jdv: the current journey for a newb is (i) raku.org, (ii) rakudo.org, (iii) rakudo star maybe … I think by pruning Star we can just give everyone rakudo + zef and cut a jump / decision out

[22:10] <jdv> perhaps

[22:10] <librasteve_> why only perhaps?

[22:11] <librasteve_> what are your concerns?

[22:11] <jdv> good luck getting agreement as to what star includes

[22:11] <jdv> otherwise, sounds great!

[22:12] <librasteve_> not needed, this proposal is just to prune the Star variants period

[22:13] <librasteve_> or if someone wants to keep it they need to step up and bring Star back up to date

[22:14] <librasteve_> 2020.04 for macOS Intel only doesn’t help us

[22:14] <jdv> cool

[22:16] <librasteve_> guess I should leave it a day or two to see if anyone wants to raise concerns

[22:30] *** sena_kun left
[22:34] <[Coke]> It may take a bit for folks to digest it. Good luck. (seriously, I'd like to see it go at this point)

[22:36] *** epony left
[22:48] *** MasterDuke joined
[22:50] <MasterDuke> gfldex: https://github.com/MoarVM/MoarVM/blob/main/src/6model/reprs/P6bigint.c for the 'Cannot unpack ...' error

[22:50] <gfldex> Scary scary C-land. :->

[22:54] <MasterDuke> [Coke]: btw, and speaking of error messages, i keep meaning to try and improve the error message in that particular case  of declaring a typed array and passing an array of the wrong type (and also of declaring an array of type Array)

[23:35] *** MasterDuke left
