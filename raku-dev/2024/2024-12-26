[00:17] <timo> randomly wondering what the impact on rakudo compile times, installation file size, and user code parse time would be of creating pre-baked instances of the most common quoting languages like for ' and " ahead of time

[01:04] <[Coke]> - Identity: rakudo:ver<2024.12>:auth<Yet Another Society>

[01:04] <[Coke]> We should use the Rau alias herwe, yes?

[01:05] <[Coke]> Raku

[01:18] <timo> i'm a little miffed that we don't allow assignment to an IO::Path's timestamp "attributes" to do the same thing as touch with -d or -t passed

[06:51] *** gfldex left
[10:15] *** sena_kun joined
[10:41] <lizmat> timo: I'd say performance, as proxies are relatively expensive ?

[13:05] <timo> with new-disp, i think proxies where we immediately assign or decont after getting it should be relatively cheap compared to how it used to be, though i'm not sure we already throw away the allocation of the proxy object? i should check that

[13:51] <Geth> ¦ nqp/main: d37a8d1229 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[13:51] <Geth> ¦ nqp/main: Bump MoarVM to get spesh guard guard

[13:51] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/d37a8d1229

[13:53] <timo> who is guarding the guards?

[13:53] <lizmat> hehe

[14:07] <Geth> ¦ rakudo/main: 79fb513a11 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[14:07] <Geth> ¦ rakudo/main: Bump NQP to get spesh guard guard

[14:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/79fb513a11

[14:07] <sjn> the speshial guards are guarding the guards!

[14:16] *** sena_kun left
[14:18] *** sena_kun joined
[15:09] <timo> random thought about the "'no strict' helps not having to write 'my $foo,$bar,$baz'" discussion that i've read about half of now: we already have the $^foo syntax for declaring arguments to the current block. what if there was a similar syntax - could be a prefix operator instead of a twigil or anything else - for declaring variables in the current scope without having to spell out "my "? you can

[15:09] <timo> already put the my in-line with the first usage, but you'll usually have to enclose it in parens for it to work ...

[15:13] <timo> go has a "assign and declare in one" operator with :=, which is also a thing we might consider how it could fit into raku one-liners

[17:18] <ab5tract> timo: inteesting thought. I believe you are talking about the problem solving ticket regarding an optional switch for one-liners? That one was more controversial than I expected, to be honest. Maybe what is missing is a flag for saying "no" to a pragma (`-/M` or `-M/` maybe)? Do you imagine this alternative declaration syntax to be enabled by a pragma?

[17:18] <lizmat> don't we have that already?

[17:19] <lizmat> m: $*a = 42; say $*a

[17:19] <camelia> rakudo-moar 79fb513a1: OUTPUT: «Dynamic variable $*a not found␤  in block <unit> at <tmp> line 1␤␤»

[17:19] <lizmat> the only thing we'd need to do is to auto-vivify dynamic variables in the -e scope ?

[17:20] <ab5tract> I'd argue that it should be a different flag

[17:20] <ab5tract> or might argue, at least

[17:21] <ab5tract> AFAIK there's nothing really in the compiler that signifies `-e`, and I think that's probably the way to go

[17:21] <lizmat> m: sub DYNAMIC(|c) { dd c }; say $*a

[17:21] <camelia> rakudo-moar 79fb513a1: OUTPUT: «\("\$*a")␤Nil␤»

[17:22] <lizmat> m: sub DYNAMIC(|c) { dd c; &CORE::DYNAMIC(|c) }; say $*a

[17:22] <camelia> rakudo-moar 79fb513a1: OUTPUT: «\("\$*a")␤Dynamic variable $*a not found␤  in sub DYNAMIC at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:27] <lizmat> auto vivification of dynamic vars:

[17:27] <lizmat> m: sub DYNAMIC($key) is raw { my \v = &CORE::DYNAMIC($key); v ~~ Failure ?? PROCESS::{$key} !! $key }; $*a = 42; say $*a

[17:27] <camelia> rakudo-moar 79fb513a1: OUTPUT: «42␤»

[17:38] <ab5tract> nice

[17:39] <timo> that's neat

[17:40] <lizmat> m: sub DYNAMIC($key) is raw { my \v = &CORE::DYNAMIC($key); v ~~ Failure ?? PROCESS::{$key} !! v }; $*a = 42; say $*a  # correct version

[17:40] <camelia> rakudo-moar 79fb513a1: OUTPUT: «42␤»

[17:44] <ab5tract> vaguely surprised that DYNAMIC isn't &*DYNAMIC :)

[17:45] <timo> override the lookup of dynamic variables in a dynamic scope? whew.

[17:46] <lizmat> the only reason this works:q

[17:47] <lizmat> is that nqp::getlexdyn($name) doesn't know about GLOBAL and PROCESS

[17:47] <timo> oh, that's why we have a sub DYNAMIC that is used to handle those as fallback?

[17:47] <lizmat> yup

[17:52] <lizmat> BTW, is there a reason that nqp::getlexdyn would prohibit inlining ?

[17:56] <timo> do you see many inlining failures due to that? do you have some example code that triggers it?

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: cd270714f6 | (Timo Paulssen)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: Verify some sizes in qast compiler mast

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: 

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: If any of the section offsets overflow the 32bit offset

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: number that we write to the file, we throw an exception.

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: 

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: If any frame has more than 65534 locals or lexicals,

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: we throw an exception.

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: If there are more than 65534 frames, we throw an

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: exception as well.

[18:38] <Geth> ¦ nqp/mast_compiler_size_limit_checks: review: https://github.com/Raku/nqp/commit/cd270714f6

[18:39] <Geth> ¦ nqp: timo++ created pull request #835: Verify some sizes in qast compiler mast

[18:39] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/835

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: d77d13fa48 | (Timo Paulssen)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: Verify some sizes in qast compiler mast

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: 

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: If any of the section offsets overflow the 32bit offset

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: number that we write to the file, we throw an exception.

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: 

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: If any frame has more than 65534 locals or lexicals,

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: we throw an exception.

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: If there are more than 65534 frames, we throw an

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: exception as well.

[20:08] <Geth> ¦ nqp/mast_compiler_size_limit_checks: review: https://github.com/Raku/nqp/commit/d77d13fa48

[20:36] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: c87a764588 | ab5tract++ | 2 files

[20:36] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: Apply revision-gating to chmod/chown/rmdir/unlink

[20:36] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[20:36] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: The idea is that the semantics of providing multiple-path

[20:36] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: versions of these subs is a mistake.

[20:36] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: 

[20:36] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: As currently implemented, this patch leaves the behavior the same

[20:36] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: for all previous language versions and adding a deprecation message

[20:36] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: <…commit message has 6 more lines…>

[20:36] <Geth> ¦ rakudo/ugexe/deprecate-multi-file-operations: review: https://github.com/rakudo/rakudo/commit/c87a764588

[20:37] <ab5tract> ugexe: slight bug in my previous iteration, was using "6.d" instead of "6.c" for some candidates

[22:37] *** sena_kun left
[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: 31d5cc698f | (Timo Paulssen)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp

[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: Verify some sizes in qast compiler mast

[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: 

[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: If any of the section offsets overflow the 32bit offset

[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: number that we write to the file, we throw an exception.

[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: 

[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: If any frame has more than 65534 locals or lexicals,

[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: we throw an exception.

[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: If there are more than 65534 frames, we throw an

[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: exception as well.

[22:43] <Geth> ¦ nqp/mast_compiler_size_limit_checks: review: https://github.com/Raku/nqp/commit/31d5cc698f

[23:19] <lizmat> timo: raku -MSIL -e '$*IN for ^10000'

