[04:11] *** [Coke] left
[04:14] *** [Coke] joined
[07:39] *** sena_kun joined
[08:13] <Geth> ¦ roast: 4e23615b17 | (Elizabeth Mattijsen)++ | S03-operators/set_multiply.t

[08:13] <Geth> ¦ roast: Fix X⊍ test and test count

[08:13] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/4e23615b17

[09:04] <ab5tract> Ahh, lizmat++

[09:04] <ab5tract> Thought I’d done it as a subtext

[09:04] <ab5tract> *subtest

[09:04] <lizmat> well, the test also didn't pass  :-(

[09:10] <ab5tract> Yeah, clear operator error there … I think there was a mistake in moving it from the  CLI invocation to the test file.

[09:10] <lizmat> shit happens  :)

[09:11] <ab5tract> Next time I’ll make sure to double check with the harness and not just the executable

[09:18] *** sena_kun left
[09:19] <ab5tract> Re: 06e45d89f .. since we potentially call .rand repeatedly in a tight loop, would it make sense to move the actual work to a !rand method so that the checks are only run once?

[09:20] <ab5tract> Or is the probability of churning in the while loops low enough not to matter?

[09:24] <lizmat> if it were called in a loop with the same Range object, it would fail on the first iteration

[09:24] <lizmat> so I wouldn't worry about that ?

[09:25] <ab5tract> It’s a micro optimization, to be sure

[09:26] <ab5tract> What I mean is that .rand calls itself

[09:28] <lizmat> if you're looking at that: if nqp::isnanorinf($!min) || nqp::isnanorinf($!max) could replace all checks on NaN and Inf and -Inf

[09:30] <ab5tract> nice!

[09:36] <ab5tract> ah, the concern about Range.rand calling itself is actually not the case at all. But I will push a change to using the nqp op

[10:09] <[Tux]> Rakudo v2024.04-103-g06e45d89f (v6.d) on MoarVM 2024.04-6-gc9dd4dd96

[10:09] <[Tux]> csv-test-xs-20      0.142 -  0.142

[10:09] <[Tux]> csv-ip5xs           0.261 -  0.265

[10:09] <[Tux]> test-t --race       0.280 -  0.281

[10:09] <[Tux]> test-t              0.432 -  0.449

[10:09] <[Tux]> csv-ip5xs-20        1.145 -  1.150

[10:09] <[Tux]> test-t-20 --race    1.259 -  1.262

[10:09] <[Tux]> csv-parser          1.516 -  1.555

[10:09] <[Tux]> test                1.957 -  1.997

[10:09] <[Tux]> test-t-20           5.193 -  5.277

[10:09] <[Tux]> https://tux.nl/Talks/CSV6/speed4-20.html / https://tux.nl/Talks/CSV6/speed4.html https://tux.nl/Talks/CSV6/speed.log

[10:14] <ab5tract> m: use nqp; dd nqp::isnanorinf(55) # :(

[10:14] <camelia> rakudo-moar 06e45d89f: OUTPUT: «This type cannot unbox to a native number: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»

[10:17] <ab5tract> looks like I need to check Num-ness first

[10:20] <ab5tract> I guess it can't do the check at the nqp level because it would involve checking against HLL types

[10:34] <lizmat> m: use nqp; dd nqp::isnanorinf(Inf)

[10:34] <camelia> rakudo-moar 06e45d89f: OUTPUT: «1␤»

[10:34] <lizmat> m: use nqp; dd nqp::isnanorinf(5e0)

[10:34] <camelia> rakudo-moar 06e45d89f: OUTPUT: «0␤»

[10:34] <lizmat> m: use nqp; dd nqp::isnanorinf(5)

[10:34] <camelia> rakudo-moar 06e45d89f: OUTPUT: «This type cannot unbox to a native number: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»

[10:34] <lizmat> m: use nqp; dd nqp::isnanorinf(5e0)

[10:34] <camelia> rakudo-moar 06e45d89f: OUTPUT: «0␤»

[10:34] <lizmat> HLL Num is also ok

[10:35] <Geth> ¦ rakudo/main: f233458e1b | ab5tract++ | 2 files

[10:35] <Geth> ¦ rakudo/main: Optimize and clarify Range.rand

[10:35] <Geth> ¦ rakudo/main: 

[10:35] <Geth> ¦ rakudo/main: Switch to using `nqp::isnanorinf` in the Range.rand method

[10:35] <Geth> ¦ rakudo/main: itself.

[10:35] <Geth> ¦ rakudo/main: 

[10:35] <Geth> ¦ rakudo/main: Also add some clarity and fixups to the exception class.

[10:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f233458e1b

[10:37] <ab5tract> yeah, I meant having `nqp::isnanorinf` just return 0 for Int/int/etc, instead of dying. If it were implemented in NQP it would be straight forward to add `return 0 if nqp::isnum($foo)`, but like most things it actually maps directly to a VM function where things are a bit more complex

[10:38] <ab5tract> found `nqp::isnum` after making my comment about not mixing HLL checks into nqp ops

[10:40] <ab5tract> anyway, it was more user error than anything.. `ops.markdown` clearly delineates that the arg must be a num

[10:41] <lizmat> yeah, but some phase in MAST inserts coercion ops 

[10:41] <lizmat> for some nqp ops

[10:48] <ab5tract> true.. could be useful to learn how it works

[10:49] <ab5tract> I was about to push a commit to switch from nqp::istype -> nqp::isnum, but:

[10:49] <ab5tract> m: use nqp; my num64 $f = Inf; dd $f; dd :istype(nqp::istype($f, Num)), :isnum(nqp::isnum($f))

[10:49] <camelia> rakudo-moar 06e45d89f: OUTPUT: «Inf␤:isnum(0)␤:istype(1)␤»

[10:49] <ab5tract> safer to keep it where it's at now :)

[10:50] <lizmat> heh... weird

[11:07] <ab5tract> N#824

[11:07] <linkable6> N#824 [open]: https://github.com/Raku/nqp/issues/824 `nqp::isnum` returns 0 for everything Rakudo considers a `Num`

[11:23] *** finanalyst joined
[12:44] *** MasterDuke left
[13:28] <[Tux]> m: say √π

[13:28] <camelia> rakudo-moar f233458e1: OUTPUT: «===SORRY!===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> say⏏ √π␤Bogus postfix␤at <tmp>:1␤------> say ⏏√π␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤    …»

[13:28] <[Tux]> Why is that not supported? Curious

[13:30] <lizmat> m: sub prefix:<√>($a) { sqrt($a) }; say √π

[13:30] <camelia> rakudo-moar f233458e1: OUTPUT: «1.7724538509055159␤»

[13:30] <lizmat> no idea

[13:30] <lizmat> greppable6: √

[13:30] <greppable6> lizmat, 20 lines, 3 modules: https://gist.github.com/3eb36373d6f60bbff6169a5da3fd1ec4

[13:30] <[Tux]> When supported, I'd also expect support for ∛ and ∜

[13:31] <lizmat> please create a problem solving issue for that

[13:32] <[Tux]> No idea how to :)

[13:32] <lizmat> https://github.com/Raku/problem-solving/issues/new?assignees=&labels=language&projects=&template=issue-template-language.md&title=

[13:37] <[Tux]> done

[13:40] <lizmat> [Tux]++

[14:41] <Geth> ¦ nqp/main: dcf6277d42 | (Christian Bartolomäus)++ (committed by ab5tract) | README.pod

[14:41] <Geth> ¦ nqp/main: Add --gen-moar/--with-moar to build command

[14:41] <Geth> ¦ nqp/main: 

[14:41] <Geth> ¦ nqp/main: As pointed out in https://github.com/Raku/nqp/issues/792 the previously

[14:41] <Geth> ¦ nqp/main: advertised command

[14:41] <Geth> ¦ nqp/main: 

[14:41] <Geth> ¦ nqp/main:   $ perl Configure.pl --backends=moar,jvm

[14:41] <Geth> ¦ nqp/main: 

[14:41] <Geth> ¦ nqp/main: <…commit message has 7 more lines…>

[14:41] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/dcf6277d42

[14:45] <gfldex>  m: sub not-anon { False }; sub foo($a where &not-anon ) { }; foo 42;

[14:45] <camelia> rakudo-moar f233458e1: OUTPUT: «Constraint type check failed in binding to parameter '$a'; expected anonymous constraint to be met but got Int (42)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:46] <[Tux]> nice to see that with that prefix-op, √5² returns 5 and  √π² return π

[14:46] <gfldex> I'm pretty sure that sub is not anonymous. What leads to the question, if the binder knows at runtime the name of that sub. If so, that's an LTA.

[14:49] <lizmat> gfldex: what's further wrong with that, is that if the sub returns a Failure, that information is discarded as well

[14:49] <lizmat> I've looked at fixing it, but it requires to have to do stuff in the bootstrap :-(   so it's something that needs quality time

[14:49] <gfldex> I noticed that too. Would make for much better custom error messages, if $.message could be pulled out of a Failure.

[14:50] <lizmat> especially in combination with https://github.com/rakudo/rakudo/pull/5571

[14:58] <ab5tract> gfldex: FWIW my understanding of the "anonymous constraint" wording has always been that the `where` is not attached to a subset

[15:00] <ab5tract> though that might easily be a misunderstanding on my part

[15:01] <ab5tract> RakuAST should make it straightforward to provide the actual constraint via .deparse, unless that ends up considered as too dirty

[15:16] <ab5tract> gfldex: also, #5175 is merged, if you're still up for fixing the docs

[15:16] <ab5tract> (R#5175)

[15:16] <linkable6> R#5175 [closed]: https://github.com/rakudo/rakudo/issues/5175 [LTA][CORE.setting] where-clause in subset does not work with Block/Callable

[15:21] <ab5tract> lizmat: M#1803 is good to go :)

[15:21] <linkable6> M#1803 [open]: https://github.com/MoarVM/MoarVM/pull/1803 Provide some mechanisms for introspecting file mode

[15:26] <Geth> ¦ nqp/main: 81eb8a8484 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[15:26] <Geth> ¦ nqp/main: Bump MoarVM to get ab5tract++ file mode additions

[15:26] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/81eb8a8484

[15:36] <Geth> ¦ rakudo/main: fa3c633de9 | ab5tract++ | tools/templates/NQP_REVISION

[15:36] <Geth> ¦ rakudo/main: Bump NQP revision for open mode functionality

[15:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fa3c633de9

[15:36] <Geth> ¦ rakudo/main: cf87ccf959 | ab5tract++ | src/core.c/IO/Handle.rakumod

[15:36] <Geth> ¦ rakudo/main: Use NQP for open mode detection in IO::Handle.lock

[15:36] <Geth> ¦ rakudo/main: 

[15:36] <Geth> ¦ rakudo/main: This allows us to remove the additional instance

[15:36] <Geth> ¦ rakudo/main: variable from IO::Handle in order to avoid adding

[15:36] <Geth> ¦ rakudo/main: additional weight/complexity to an already unwieldy

[15:36] <Geth> ¦ rakudo/main: core class.

[15:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cf87ccf959

[15:39] <ab5tract> gahh, looks like I've messed up my first NQP revision bump :/

[15:41] <ab5tract> oh, wait. spoke to soon *phew*

[15:45] <lizmat> yeah, looking good  :-)

[16:24] <lizmat> notable6: weekly

[16:24] <notable6> lizmat, No notes for “weekly”

[16:36] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/05/20/2024-21-curry-primed/

[18:18] *** sena_kun joined
[22:36] *** sena_kun left
[22:42] <ab5tract> m:use nqp; dd nqp::isfalse(False)

[22:42] <evalable6> ab5tract, rakudo-moar cf87ccf95: OUTPUT: «1␤»

[22:43] <ab5tract> because of course there's no rule we make without an exception

[22:43] <ab5tract> (ie, is* is only for native things)

[22:43] *** finanalyst left
[22:48] <Geth> ¦ nqp/main: 0b35d7e321 | ab5tract++ | docs/ops.markdown

[22:48] <Geth> ¦ nqp/main: Clarify the rules regarding some is* ops

[22:48] <Geth> ¦ nqp/main: 

[22:48] <Geth> ¦ nqp/main: Per N#824, some of the is* ops only reflect on native

[22:48] <Geth> ¦ nqp/main: things.

[22:48] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/0b35d7e321

[22:48] <linkable6> N#824 [closed]: https://github.com/Raku/nqp/issues/824 `nqp::isnum` returns 0 for everything Rakudo considers a `Num`

[22:57] <lizmat> m: m:use nqp; dd nqp::isstr("foo")

[22:57] <camelia> rakudo-moar cf87ccf95: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Alphanumeric character is not allowed as a delimiter␤at <tmp>:1␤------> m:use⏏ nqp; dd nqp::isstr("foo")␤»

[22:57] <lizmat> m: use nqp; dd nqp::isstr("foo")

[22:57] <camelia> rakudo-moar cf87ccf95: OUTPUT: «0␤»

[22:58] <lizmat> heh

[22:58] <lizmat> TIL

[23:22] <ab5tract> so the right way to hold this is:

[23:23] <ab5tract> m: use nqp; dd nqp::isstr(nqp::unbox_s("foo"))

[23:23] <camelia> rakudo-moar cf87ccf95: OUTPUT: «0␤»

[23:23] <ab5tract> huh

[23:23] <ab5tract> nevermind lol!

[23:23] <ab5tract> m: use nqp; dd nqp::isstr(nqp::unbox_s(my $s = "foo"))

[23:23] <camelia> rakudo-moar cf87ccf95: OUTPUT: «0␤»

[23:24] <ab5tract> yeah, I'll stick with nqp::istype :)

[23:25] <ab5tract> even if the above did work, it pre-supposes that you already have a string because you would have to call unbox_s on it

