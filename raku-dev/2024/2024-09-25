[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:51] <timo> oh, is this actually also a fix for the ndarray atpos spesh bug i diagnosed the other day? https://github.com/rakudo/rakudo/commit/a8745fe8

[03:51] <timo> or i guess not since this commit is 2 months old?

[06:10] *** [Coke] left
[07:06] *** sena_kun joined
[07:17] *** sena_kun left
[08:08] *** [Coke] joined
[08:51] *** finanalyst joined
[09:46] <lizmat> m: class A { }; proto sub postcircumfix:<[; ]>(|) {*}; multi sub postcircumfix:<[; ]>(A:D, @a) { dd }; multi sub postcircumfix:<[; ]>(|c) { dd }; (A.new)[0;0]

[09:46] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: «sub postcircumfix:<[; ]>(A:D, @a)␤»

[09:46] <lizmat> aha!

[10:01] <ab5tract> There we go :)

[10:04] *** finanalyst left
[11:14] *** sena_kun joined
[11:43] *** sena_kun left
[12:30] <lizmat> so I'm working on a utility module META::varauthapi that will set the ^ver, ^auth, ^api of all classes provided by a distribution, using the info in the META6.json (aka $?DISTRIBUTION)

[12:31] <lizmat> basically: add "use META::verauthapi $?DISTRIBUTION" and your classes will be in sync with the META info

[12:33] <lizmat> problem is: I cannot seem to be able to map what is in META<provides>.keys to the actual classes

[12:34] <lizmat> even passing UNIT:: as an additional argument in the use statement, doesn't work as UNIT:: does not appear to be populated at compile time

[12:34] <lizmat> m: my class A { }; BEGIN dd UNIT::.keys; dd UNIT::.keys

[12:34] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: «().Seq␤("\$?PACKAGE", "::?PACKAGE", "\$=pod", "\$=finish", "\$?LANGUAGE-REVISION", "\$/", "GLOBALish", "!UNIT_MARKER", "EXPORT", "\$¢", "A", "\$!", "\$_").Seq␤»

[12:35] <lizmat> nine ab5tract ideas ?

[12:35] <lizmat> vrurg_ maybe?

[13:29] <vrurg_> I could only tell that I was trying to get this done on the compiler side not without a reason.

[13:30] <jdv> blin finally finished.  took longer than usual.

[13:31] <lizmat> vrurg_ , yes, and I hope we will get there with RakuAST... but I want it now  :-)

[13:31] <jdv> looks like there is some fallout.  i'll get it posted in a bit once i get it cleaned up

[13:31] <lizmat> jdv++

[13:33] <vrurg_> lizmat: Do you want it for private classes too? Because I'd stick to what can be found in the META.

[13:33] <lizmat> yes, that was the plan

[13:34] <lizmat> although for now you can specify the classes as additional arguments

[13:34] <lizmat> https://raku.land/zef:lizmat/META::verauthapi   fwiw  :-)

[14:01] <jdv> https://github.com/rakudo/rakudo/issues/5648 is blin

[14:01] <jdv> ab5tract: one might be yours in there ^

[14:01] <jdv> lizmat: the rest might be yours ?

[14:03] <ab5tract> jdv: ah, that appears to be an error in the test corpus

[14:03] <ab5tract> it's expecting 35 lines but I added another one to the preamble

[14:08] <lizmat> bisectable6: my %h = a => 1, b => 2; dd %h{all(<a b>)}:exists

[14:08] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:09] <bisectable6> lizmat, Output on all releases: https://gist.github.com/576db79d2743283014ab9b0359315acc

[14:09] <bisectable6> lizmat, Bisecting by output (old=2024.08 new=0b6c7dc) because on both starting points the exit code is 0

[14:09] <bisectable6> lizmat, bisect log: https://gist.github.com/6801879cda47ce6f911a6a3782ca8e34

[14:09] <bisectable6> lizmat, (2024-09-08) https://github.com/rakudo/rakudo/commit/dd66162a4095ea0afbd02bcff0f603d52b101319

[14:09] <bisectable6> lizmat, Bisecting by exit code (old=2016.02 new=2016.03). Old exit code: 1

[14:09] <bisectable6> lizmat, bisect log: https://gist.github.com/f9474615db3d82896424b532d2b50f57

[14:09] <bisectable6> lizmat, (2016-03-04) https://github.com/rakudo/rakudo/commit/259624f388e1d804f7681e12c61346d49404c588

[14:09] <bisectable6> lizmat, ⚠ New output detected, please review the results manually

[14:09] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/305a8f3a1100b393c04066f055862bea

[14:13] *** sena_kun joined
[14:35] <Geth> ¦ rakudo/main: 3ca83dc138 | (Elizabeth Mattijsen)++ | src/core.c/hash_slice.rakumod

[14:35] <Geth> ¦ rakudo/main: Make sure we have a Bool to check against with :exists

[14:35] <Geth> ¦ rakudo/main: 

[14:35] <Geth> ¦ rakudo/main: d66162a4095ea0afbd0 introduced a short-cut that would make {}:exists

[14:35] <Geth> ¦ rakudo/main: always return false if the key was a Junction.  Fix this by making

[14:35] <Geth> ¦ rakudo/main: sure we have a Bool:D to compare against (which should be optimized

[14:35] <Geth> ¦ rakudo/main: away pretty quickly if we already had a Bool:D).

[14:35] <Geth> ¦ rakudo/main: 

[14:35] <Geth> ¦ rakudo/main: The alternative would have been to either revert these optimizations,

[14:35] <Geth> ¦ rakudo/main: or to create almost identical candidates handling Junctions specifically.

[14:35] <Geth> ¦ rakudo/main: That felt like a not very DRY approach, so instead have a little

[14:35] <Geth> ¦ rakudo/main: larger bytecode footprint for the fast path.

[14:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3ca83dc138

[14:36] <lizmat> jdv ^^

[14:42] <lizmat> jdv ab5tract the other failure is because $?LANGUAGE-REVISION => 2 has been added to a scope, which alters the number of elements tested for

[14:42] <lizmat> so it is a flaky test

[14:42] <jdv> cool, we're back on track for tomorrow's release then

[14:42] <lizmat> flaky  well, fragile

[14:42] <jdv> yup

[14:43] <jdv> i added an issue to that repo

[14:43] <jdv> thanks all

[16:21] <timo> m: class Wibble { method Bool() { Backtrace.new.Str.say; True } }; my %foo; say %foo<hello>:delete:exists(Wibble.new);

[16:21] <camelia> rakudo-moar 3ca83dc13: OUTPUT: «  in method Bool at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤False␤»

[16:21] <timo> is this funny? i'm not sure if this is funny

[16:28] <timo> m: class Wibble { method Bool() { Backtrace.new.full.say; True } }; my %foo; say %foo<hello>:delete:exists(Wibble.new); # this is what i wanted to look at

[16:28] <camelia> rakudo-moar 3ca83dc13: OUTPUT: «  in method new at SETTING::src/core.c/Backtrace.rakumod line 99␤  in method Bool at <tmp> line 1␤  in any  at src/vm/moar/dispatchers.nqp line 4390␤  in sub postcircumfix:<{ }> at SETTING::src/core.c/hash_slice.rakumod line 49␤  in block <uni…»

[16:32] <timo> jdv: the Data::Dump::Tree output has "please contact the author [...] deprecated code [...]" but what exactly was deprecated isn't in the part that's posted. anything important? or just PERL6LIB?

[16:35] <jdv> that's not why it failed its test suite

[16:35] <timo> ok that's fair

[16:36] <jdv> a lot of stuff still emits that:(

[16:36] <timo> we are generating links to modules.raku.org in the blin output, which unfortunately currently just redirects directly to raku.land/ without trying to get you to the right dist, or even the search function

[16:36] <timo> i'll ticket that in blin

[16:36] <jdv> yeah.  i meant to fix that but there didn't seem to be a 1:1 solution that was quick and easy

[16:37] <timo> fair

[16:37] <jdv> iirc raku.land requires more than just the dist name in a query

[16:38] <timo> probably also the auth

[16:38] <jdv> any only a few people read that report but it definitely should be fixed:)

[17:49] * [Coke] looks forward to working on blin tickets. :)

[18:00] <jdv> nice.  i hope to rebuild the docker image i use by eoy.  i just don't have the time:(

[18:01] <jdv> i hope next month's run doesnt take 11h and oom my box again

[18:30] <[Coke]> jdv++

[19:46] *** finanalyst joined
[21:26] *** sena_kun left
[21:43] <ab5tract> can we please move beyond the idea that `dd` is an implementation detail?

[21:43] <ab5tract> I will outright refuse to use an Raku implementation that decides its too fancy to support `dd`

[21:45] <ab5tract> of all the bonkers, used once in a million years by a mostly mad person things that a Raku implementation is required to support, the idea that `dd` is a theoretically useful afterthought ... frankly it comes off as disrespectful 

[21:47] <jdv> isn't .raku supposed to do "that"

[21:49] <jdv> iirc its because dd shows impl details but i don't remember enough to be useful

[21:50] <ab5tract> m: dd Int; say Int.raku

[21:50] <camelia> rakudo-moar 3ca83dc13: OUTPUT: «Int␤Int␤»

[21:52] <ab5tract> even if all it is is a wrapper function that looks like: `dd ($arg) { say $arg.raku }` (which it isn't), it would still be a required element of a Raku implementation imo

[21:53] <ab5tract> but I'll take a deep breath and do some searches through #raku history to see what kinds of justifications have been wielded against it

[21:54] <timo> i'm thinking it was just never proposed to become a part of the language

[21:54] <ab5tract> what would such a proposal look like? spec tests?

[21:54] <ab5tract> because I'e

[21:55] <ab5tract> because I've added a few features to the language that still have spec tests pending :)

[21:55] <ab5tract> (not proud of that, but it is what it is)

[21:57] <timo> we do what we can

[21:57] <ab5tract> in terms of routines, methods, etc marked as implementation details, there is nothing that comes close to the usage count of `dd` for me

[21:58] <ab5tract> anyway, I'm going to add an explicit exception to the Comma inspection for implementation details, which is the only reason I've had this somewhat contained explosive reaction

[22:01] <timo> i'm pushing the debian packages stuff a bit further to actually getting up-to-date packages into debian sid (one day before the next release, but oh well)

[22:05] <ab5tract> timo: that's seriously cool

[22:06] <ab5tract> so many distros hang off the debian vetting process

[22:06] <ab5tract> or maybe a better way to say, so many distro installations hang off that process

[22:21] <jdv> ab5tract: what's rrally buggin you?

[22:21] <jdv> *really

[22:22] <jdv> :)

[22:23] <ab5tract> 0 < $bugging < Inf

[22:23] <ab5tract> :)

[22:23] <ab5tract> luckily we aren't pushing <= on the last part of the clause ;)

[22:24] <jdv> ha

[22:24] <jdv> timo++

[22:27] <timo> well, you can \+\+timo for now instead of timo\+\+

[22:28] <ab5tract> timo: I've been meaning to ask what happened to the other half of timotimo :)

[22:28] <timo> i'm timo on github and libera, but i'm timotimo on salsa

[22:28] <timo> difficult to say, really!

[22:29] <ab5tract> I'm very pleased to have as much timo as we can get around here :)

[22:29] <timo> hm, what's the limit on nickname length on here then? :P

[22:31] <ab5tract> I don't know if I ever properly expressed my level of stoked-ness upon seeing your `$nick.subst(0, $nick.comb / 2)` resurface here on the regular :)

[22:31] <jdv> i did albeit privately.  i concur.

[22:33] <timo> <3

[22:39] *** finanalyst left
[22:54] <timo> salsa is keeping me hanging :|

[22:55] <timo> leaving me hanging*

[22:57] <jdv> i like my salsa scorching, nothing less;)

[23:00] <releasable6> Next release in ≈19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:00] <jdv> pipe down there

