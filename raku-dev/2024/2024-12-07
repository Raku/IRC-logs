[00:14] <[Coke]> wonder if nrpoc-1 would be better

[03:01] <timo> i'm not sure what the use case is for -Mno-remote-debugging

[09:33] <lizmat> ok, perhaps, but having "use no-remote-debugging" in production code does?

[10:35] *** sena_kun joined
[13:25] <timo> that has the use case of making me very angry and smash my keyboard against the furniture

[14:17] <[Coke]> *sigh* Looks like trying to use more of the VM has just made the whole re-run much slower.

[14:17] <[Coke]> m: say 728/2248

[14:17] <camelia> rakudo-moar de79080dc: OUTPUT: «0.323843␤»

[15:02] <[Coke]> https://gist.github.com/coke/0fd5b8c4e72f5c286e9c2350c9ac09f1 - some notes about Blin. Please feel free to comment here or there.

[15:23] <timo> i would like to bring up once again nine's suggestion to utilise the open build service for smoking the ecosystem

[15:44] <[Coke]> How would that work?

[15:44] <[Coke]> have every module author for the 2300 or so modules set something up for their module, and then test it against non-released versions of rakudo?

[15:44] <[Coke]> Or are you suggesting a different use case from the one Blin is trying to solve?

[15:59] <[Coke]> It reads to me like OBS would be great for generating distros of rakudo itself.

[15:59] <timo> and all the modules too

[15:59] <timo> and in the process, test them against pre-release builds of rakudo

[16:02] <[Coke]> One of the things blin does is compare current results against previous results.

[16:02] <timo> ok, then blin becomes a tool that pulls logs from the obs and looks at them, instead of having to run everything

[16:03] <timo> or it could use the results from obs as a data source to determine what needs to be done, in terms of bisecting and whatnot

[16:04] <[Coke]> Can one programmatically add a package to build?

[16:05] <timo> the open build service has a CLI tool that, aiui, can do anything you wand

[16:05] <timo> want

[16:11] <[Coke]> any idea who owns https://software.opensuse.org/package/rakudo ?

[16:12] <timo> https://build.opensuse.org/request/show/1176479 i believe it's nine

[16:13] <[Coke]> Looks like the last build there is from 2024.04

[16:26] <[Coke]> added some "what would we have to do in OBS to get to Blin parity" to that gist. One thing: who would own the packages we create for the 2300 modules? what if the user already has one setup? What if we set it up and someone reports issues on it?

[16:28] <timo> i believe we would make a "rakudo blin" "Factory" that is essentially an entire namespace for ourselves

[16:29] <timo> there's already a "Factory" for different opensuse releases, for different centos releases, for different distros like the very first entry in the list of projects, AlmaLinux

[16:29] <timo> so i imagine there may be a Krita package in OpenSUSE owned by person A, a Krita package in AlmaLinux by person B, a Krita package in CentOS owned by person C, and they don't conflict

[16:30] <[Coke]> ok. added the factory note

[16:31] <[Coke]> and it looks like each build requires commits to create and perhaps approval from an admin on build.opensuse.org?)

[16:31] <[Coke]> (for rakudo)

[16:32] <timo> i imagine that's a per-factory setting

[16:32] <[Coke]> So would we have our own copy of rakudo as well? is it less restrictive if we never publish a release from it? (so we could do multiple builds of pre-release)?

[16:33] <timo> tbh i'm not entirely sure what puts a "rakudo" into that list of packages you found on software.opensuse.org/package/rakudo

[16:35] <timo> https://build.opensuse.org/project/show/home:patrickbkr:raku-ci would you look at this :)

[16:37] <[Coke]> I just searched for "rakudo"

[16:37] <[Coke]> and that was the first hit.

[16:37] <timo> ok this page here https://build.opensuse.org/repositories/home:patrickbkr:raku-ci/moarvm has a little section called "Publish Flag"

[16:37] <timo> that's possibly what controls if a rakudo would show up on the opensuse software page for a package of that name

[16:39] <timo> since we probably don't want the packages of rakudo we build for blin purposes to be offered to end users, even if they have to click through two layers of "unsupported and experimental" warnings first

[16:39] <[Coke]> patrickb: would a opensuse version of blin live under your ci project?

[16:54] <Geth> ¦ rakudo/main: f532214288 | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[16:54] <Geth> ¦ rakudo/main: Make .trans(Str => Str) 5% to 10% faster

[16:54] <Geth> ¦ rakudo/main: 

[16:54] <Geth> ¦ rakudo/main: Make tight loops all NQP

[16:54] <Geth> ¦ rakudo/main: 

[16:54] <Geth> ¦ rakudo/main: Part of work on #5488

[16:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f532214288

[17:02] <patrickb> not sure I understand the question fully. nine is building rakudo packages which end up in opensuse.

[17:03] <timo> the question is about building packages that are pre-release versions of rakudo

[17:03] <timo> since blin happens before a release. these versions should not be offered to users

[17:04] <timo> specifically, should we be using the raku-ci "project" on the open build service for this?

[17:04] <timo> oh, and is there a difference between factory and project?

[17:04] <patrickb> The rakudo ci bot (given it's currently running) is building every commit.

[17:05] <patrickb> But the intention with the RCB has never been to produce packages (though it's a nice side-effect).

[17:05] <patrickb> No idea about factory vs project

[17:06] <patrickb> Also blin is building the entire ecosystem, while RCB is only building & testing most, nqp & rakudo

[17:08] <timo> right. we would like to use OBS to do the compiling and testing part for a blin run

[17:27] <patrickb> of modules or rakudo?

[17:28] <timo> primarily modules, but why not also rakudo

[17:29] <[Coke]> Note: we have several folks suggesting OBS as a potential replacement for what blin is doing, I'm trying to find out how feasible that is.

[17:32] <[Coke]> patrickb: Yes. we'd have to setup packages for each module, likely, and have them built against certain non-release commits,

[17:35] <patrickb> I guess we could do that.

[17:35] <[Coke]> afk

[17:53] <Geth> ¦ problem-solving: timo assigned to codesections Issue Design a command language for interactive commandline / TUI rakudo-moarvm debugger https://github.com/Raku/problem-solving/issues/456

[17:53] <timo> patrickb: i would like you in particular to also chime in on this one ^

[18:02] <patrickb> Thanks for pulling me in. I'll mull over this.

[18:03] <Geth> ¦ problem-solving: lizmat unassigned from codesections Issue Design a command language for interactive commandline / TUI rakudo-moarvm debugger https://github.com/Raku/problem-solving/issues/456

[18:05] <timo> especially how the language in question could either "still be useful when using TUI" or "enhance, or be enhanced by, the TUI"

[18:42] <jdv> lizmat: changelogs are up

[18:43] <jdv> [Coke]: ^

[18:46] <lizmat> jdv: I always forget the URL  :-(

[18:49] <timo> is a release happening right now?

[18:51] <lizmat> no, a trial run

[18:51] <timo> phew

[18:51] <timo> so i still have a moment to get some stuff into moarvm?

[18:53] <lizmat> I think so: [Coke] jdv ?

[18:57] <timo> well, this commit is only in the debugserver, so it should not have an impact on any modules or something like that

[18:58] <timo> i would really like to get some of the remote protocol changes in, but perhaps it's better to wait another month?

[19:01] <lizmat> I think remote protocol changes (especially if they are additions) are ok at any time

[19:01] <lizmat> as long as it doesn't break Comma ?

[19:07] <timo> it might be a good idea to let them simmer a bit before letting them out of the oven

[19:11] <Geth> ¦ rakudo/main: e0c25da214 | (Elizabeth Mattijsen)++ | src/core.c/Str.rakumod

[19:11] <Geth> ¦ rakudo/main: Make .trans(/ foo / => ...) 1.5x as fast

[19:11] <Geth> ¦ rakudo/main: 

[19:11] <Geth> ¦ rakudo/main: The same for any .trans(Iterable:D) cases.

[19:11] <Geth> ¦ rakudo/main: 

[19:11] <Geth> ¦ rakudo/main: The slowdown was caused by the Pair:D candidate redirecting to the

[19:11] <Geth> ¦ rakudo/main: slow path (if the key and value were not both Str:D) that had a

[19:11] <Geth> ¦ rakudo/main: *@changes signature by wrapping the Pair in a List.

[19:11] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[19:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e0c25da214

[19:40] <ab5tract> Lucky Comma should be reasonably easy to adapt

[19:45] <ab5tract> Hmm, maybe not as simple as all that… I though that there was a Raku script in between

[19:48] <timo> nah it directly speaks the MessagePack-over-TCP protocol to moar

[19:51] <ab5tract> Indeed

[19:52] <ab5tract> The use of MessagePack should be a bit of a simplifier

[19:52] <timo> right, makes it easy on the java side to ignore unknown keys and such

[20:21] <jdv> no, sorry.  no release of any kind today.  just prepping early.

[20:21] <jdv> the changelogs are on the gh wikis of moarvm and rakudo

[20:22] <jdv> the release is planned for next saturday, the 14th.

[20:23] <jdv> but aa we're <= to a week before it would be good to avoid any non-trivial changes, as usual.

[20:23] <jdv> *as

[20:32] <Geth> ¦ roast: ae29b2e13d | (Christian Bartolomäus)++ | S02-types/int-uint.t

[20:32] <Geth> ¦ roast: [JVM] Don't run some non-working tests

[20:32] <Geth> ¦ roast: 

[20:32] <Geth> ¦ roast: This is a bit unusual, because the text aren't fudged as "todo", but

[20:32] <Geth> ¦ roast: are simply not run. I wanted to leave the test setup mostly unchanged.

[20:32] <Geth> ¦ roast: I think that the places are easy enough to spot once overflow for native

[20:32] <Geth> ¦ roast: types fully works on the JVM backend.

[20:32] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ae29b2e13d

[20:59] <[Coke]> yah, this run is just slower. :|

[20:59] <[Coke]> m: say 1009/2248

[20:59] <camelia> rakudo-moar e0c25da21: OUTPUT: «0.448843␤»

[21:29] <Geth> ¦ roast: acb121f2e2 | (Christian Bartolomäus)++ | 3 files

[21:29] <Geth> ¦ roast: [JVM] Unfudge some tests that no longer die

[21:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/acb121f2e2

[21:33] <Geth> ¦ rakudo/main: e4e2269434 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | src/Perl6/Optimizer.nqp

[21:33] <Geth> ¦ rakudo/main: [JVM] Decont Routine object when looking for attribute (#5708)

[21:33] <Geth> ¦ rakudo/main: 

[21:33] <Geth> ¦ rakudo/main: Without this running running S32-list/skip.t from roast failed with a

[21:33] <Geth> ¦ rakudo/main: RuntimeException:

[21:33] <Geth> ¦ rakudo/main: 

[21:33] <Geth> ¦ rakudo/main:   No such attribute '@!dispatchees' for this object

[21:34] <Geth> ¦ rakudo/main: 

[21:34] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[21:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e4e2269434

[22:21] <jdv> [Coke]: how long has it been running to get half way through?

[22:34] <[Coke]> ... it doesn't tell you. :) one sec, checking htop

[22:35] <[Coke]> 36h24m

[22:35] <[Coke]> and it's not even half way. :(

[22:36] <[Coke]> Probably still some contention

[22:40] <jdv> uh, somethings wrong

[22:40] <timo> no timestamped logs?

[22:40] <jdv> at least in october, i could do it in under 9h

[22:41] <jdv> are you using an underpowered box?:)

[22:51] <[Coke]> https://azure.microsoft.com/en-us/blog/introducing-b-series-our-new-burstable-vm-size/ - Standard_B8ms

[22:52] <[Coke]> ... so probably.

[23:00] <[Coke]> I picked the beefiest of the crappy ones, I think. :)

[23:05] <[Coke]> switching to mething that isn't burst.

[23:05] <[Coke]> *something

[23:08] <[Coke]> (i had picked based on estimated monthly cost, but if it's going to take 4x as long to run, that math is suspect. :)

[23:11] <[Coke]> restarting

[23:11] *** sena_kun left
[23:16] <jdv> i just use my year old cheap amd lenovo laptop.  16 core, 16gb ram...

[23:16] <jdv> yeah, maybe "more":)

[23:23] <[Coke]> ok, trying a *new* size...

[23:28] <[Coke]> ok, that's a little better.

[23:29] <[Coke]> running a load of about 11 on an 8 core box that is more for constant CPU usage instead of bursty

[23:29] <[Coke]> just have to be really sure to shut it off when I'm done with it. :)

[23:34] <[Coke]> interesting, it's saying out of 2247 in this run. we lose a module in the last hour?

[23:36] <[Coke]> m: say 128/2247

[23:36] <camelia> rakudo-moar e4e226943: OUTPUT: «0.056965␤»

[23:36] <[Coke]> m: say 100/5.67 * 11

[23:36] <camelia> rakudo-moar e4e226943: OUTPUT: «194.003527␤»

[23:37] <[Coke]> that seems like a better start, anyway.

[23:38] <[Coke]> m: say 100/5.7 * 11 / 60

[23:38] <camelia> rakudo-moar e4e226943: OUTPUT: «3.216374␤»

