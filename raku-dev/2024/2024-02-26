[01:04] *** MasterDuke joined
[01:13] <MasterDuke> i've been experimenting with using collections from fastutil in the jvm backend. i was hoping it would help with memory usage (and speed), but i don't think it has so far. however, i have almost no experience profiling java programs, so i may just be missing something...

[02:12] <[Coke]> put a pr together so folks can profile it?

[02:17] <MasterDuke> yeah, probably will do that. i managed to get a little further with profiling, but i have only figured out how to start a profile of an already running program, which makes it hard to see total change...

[03:00] <MasterDuke> if i'm reading things correctly, the jvm backend is spending almost all the time in runNFA (https://github.com/Raku/nqp/blob/main/src/vm/jvm/runtime/org/raku/nqp/runtime/Ops.java#L6767)

[03:01] <MasterDuke> i think i've reduced the allocated objects in there by a lot, but can't tell if that's sped anything up

[03:10] <Voldenet> profiler is useful for finding out hot code, but not useful for benchmarking it

[03:12] <Voldenet> to find out speed gains you need something like jmh

[03:12] <MasterDuke> yeah. the problem with benchmarking this is finding something short enough that i can easily run it repeatedly, but actually exercises these code paths

[03:15] <Voldenet> I'd consider serializing NFAInstance and mocking ThreadContext for the microbenchmark

[03:18] <Voldenet> maybe Kryo could deal with it

[03:25] <MasterDuke> i've never used any of those tools. if you're able to get it working and tell me how it'd be much appreciated. really the biggest thing right now is that rakudo doesn't even build. `java.nio.BufferOverflowException in consume-line-chars (gen/jvm/stage2/NQPCORE>setting:824)`

[03:37] <MasterDuke> anyway, i'm done for the night

[07:43] *** sena_kun joined
[09:38] <Voldenet> >the biggest thing right now is that rakudo doesn't even build

[09:38] <lizmat> I guess I borked it?   

[09:39] <lizmat> could you give me a gist of the build?

[10:00] *** finanalyst joined
[10:51] <Voldenet> https://0x0.st/HR8M.txt

[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:55] <Geth> ¦ rakudo/main: adc30f399e | (Elizabeth Mattijsen)++ | src/vm/moar/dispatchers.nqp

[11:55] <Geth> ¦ rakudo/main: HOW.archetypes is an instance method

[11:55] <Geth> ¦ rakudo/main: 

[11:55] <Geth> ¦ rakudo/main: So doesn't need any arguments

[11:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/adc30f399e

[12:01] <Geth> ¦ rakudo/main: 11e5ced2bb | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp

[12:01] <Geth> ¦ rakudo/main: HOW.archetypes is an instance method

[12:01] <Geth> ¦ rakudo/main: 

[12:01] <Geth> ¦ rakudo/main: Also some minor refactoring

[12:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/11e5ced2bb

[12:11] <lizmat> Voldenet: I can't find the string "reverse" in the moar version, so I'm not sure wtf is going on

[13:04] <Geth> ¦ rakudo/main: 24a1e67c43 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/Archetypes.nqp

[13:04] <Geth> ¦ rakudo/main: Streamline Archetypes creation

[13:04] <Geth> ¦ rakudo/main: 

[13:04] <Geth> ¦ rakudo/main: - make all attributes native int, so they will default to 0

[13:04] <Geth> ¦ rakudo/main: - use bespoke new method setting attribute only if necessary

[13:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/24a1e67c43

[13:13] <Geth> ¦ rakudo/main: 6f42c89715 | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[13:13] <Geth> ¦ rakudo/main: HOW.archetypes is an instance method

[13:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6f42c89715

[13:22] <Geth> ¦ rakudo/main: 3267834f27 | (Elizabeth Mattijsen)++ | src/vm/moar/Perl6/Ops.nqp

[13:22] <Geth> ¦ rakudo/main: HOW.archetypes is an instance method

[13:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3267834f27

[13:32] <Geth> ¦ rakudo/main: b168277b46 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[13:32] <Geth> ¦ rakudo/main: HOW.archetypes is an instance method

[13:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b168277b46

[13:43] <Geth> ¦ rakudo/main: a3bb844431 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:43] <Geth> ¦ rakudo/main: HOW.archetypes is an instance method

[13:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a3bb844431

[13:52] <Geth> ¦ rakudo/main: 8ca1c48263 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/GenericHOW.nqp

[13:52] <Geth> ¦ rakudo/main: HOW.archetypes is an instance method

[13:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8ca1c48263

[14:15] <vrurg> lizmat: are you sure all these locations deal with type objects and type obejcts only? Because an instance of a class might happen to be generic while its class is not.

[14:16] <lizmat> the positional arg in the method is ignored, so yes  :-)

[14:16] <vrurg> Class' archetypes is not ignoring it.

[14:20] <vrurg> For example, $!default in BOOTSTRAP line 1188 can be a concrete object reporting itself as a generic.

[14:23] <vrurg> Similarly, line 1757 – $avc. And it's just a quick glance at one commit.

[14:23] <vrurg> The argument can only be ignored if the method is invoked on a typeobject.

[14:24] <lizmat> but where are the cases of "method archetypes" then handling those cases?

[14:24] <vrurg> Pardon, what do you mean?

[14:25] <vrurg> If I get you right, then see ClassHOW archetype.

[14:25] <vrurg> Its outcome may depend on argument conretnedness. 

[14:31] <lizmat> I will in a mo, in a meeting atm

[14:34] <vrurg> No problem. In the meantime, these would most definitely break WWW::GCloud because it depends on generic instances. Blin would detect it, but would have hard times determining which exact commit did it. :) 

[14:45] <jdv> a blin run on 3c9f07a was clean

[14:46] <jdv> i got rid of the fast way of doing blin so i hope that the only one we need to do

[14:46] <jdv> aka try not to break the build before 2/29:)

[14:46] <jdv> used to take 2h, now 8h for me

[14:49] <lizmat> vrurg: ok, I guess I'm going to revisit some of the commits  :-)

[14:52] <lizmat> vrurg: so basically, in the case of foo.archetypes(foo)  it's safe to remove the positional, right ?

[14:52] <lizmat> too bad, they made core parse .5 second faster

[14:56] <vrurg> Only if foo is a typeobject. Method outcome is invariant over types – I just can't imagine how could that be different. But a concrete object may serve as a container for a generic type. For example, a container descriptor is not generic type but it may keep record of generics requiring resoslution.

[15:12] <Geth> ¦ rakudo/main: ad9fe2eba1 | (Elizabeth Mattijsen)++ | 7 files

[15:12] <Geth> ¦ rakudo/main: Revert all "HOW.archetypes is an instance method" commits

[15:12] <Geth> ¦ rakudo/main: 

[15:12] <Geth> ¦ rakudo/main: As vrurg++ pointed out there are some MOP classes that *do*

[15:12] <Geth> ¦ rakudo/main: depend on the value passed.  Too bad this optimization is

[15:12] <Geth> ¦ rakudo/main: not possible for this reason: it did scrape off .5 second

[15:12] <Geth> ¦ rakudo/main: from parsing the setting for me.

[15:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ad9fe2eba1

[15:12] <lizmat> jdv vrurg ^^

[15:14] <vrurg> ++. As to the optimization side of the things – wish there be other way around to correctly instantiate attributes.

[15:15] <lizmat> yeah  :-(

[15:25] <Geth> ¦ rakudo/main: 4181d46105 | (Elizabeth Mattijsen)++ | 4 files

[15:25] <Geth> ¦ rakudo/main: All Archetypes class (should) support .coercive

[15:25] <Geth> ¦ rakudo/main: 

[15:25] <Geth> ¦ rakudo/main: Both in Raku and NQP.  So there is no need to check if they can

[15:25] <Geth> ¦ rakudo/main: call a method called 'coercive'.

[15:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4181d46105

[15:25] <lizmat> at least that part can go in  :-)

[15:51] <lizmat> vrurg: re .archetypes(foo), isn't the issue really that we should have different HOWs for generic classes and non-generic classes ?

[15:54] <vrurg> I would only complicate things. BTW, a class itself can't be generic, only its instance. And instances are all about runtime.

[15:54] <vrurg> *It would

[15:54] <jdv> huh?

[15:55] * vrurg is afk

[15:55] * lizmat too

[15:57] *** finanalyst left
[17:04] <lizmat> notable6: weekly

[17:04] <notable6> lizmat, 1 note: 2024-02-24T20:27:24Z <antononcube>: https://rakuforprediction.wordpress.com/2024/02/24/us-constitution-vs-plants-vs-zombies/

[17:17] <lizmat> notable6: weekly reset

[17:17] <notable6> lizmat, Moved existing notes to “weekly_2024-02-26T17:17:03Z”

[18:11] *** lizmat left
[18:11] *** heartburn left
[18:11] *** lizmat joined
[18:19] *** heartburn joined
[18:36] <lizmat> m: sub a($/) { dd $0, $1 }; a (42,666)   # TIL  :-)

[18:36] <camelia> rakudo-moar 4181d4610: OUTPUT: «42␤666␤»

[19:12] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/02/26/2024-09-plants-vs-zombies/

[19:28] *** MasterDuke left
[20:05] <Geth> ¦ rakudo/main: 2c64cbc729 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/DefiniteHOW.nqp

[20:05] <Geth> ¦ rakudo/main: Streamline Metamodel::DefiniteHOW a bit

[20:05] <Geth> ¦ rakudo/main: 

[20:05] <Geth> ¦ rakudo/main: - remove unnecessary args from archetype creation

[20:05] <Geth> ¦ rakudo/main: - remove istrue check: archetype methods are now guaranteed to

[20:05] <Geth> ¦ rakudo/main:   return either 0 or 1

[20:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2c64cbc729

[21:15] *** finanalyst joined
[21:35] *** sena_kun left
[21:35] *** sena_kun joined
[21:44] *** MasterDuke joined
[21:47] <MasterDuke> Voldenet, lizmat: i fixed that error already, rakudo just hasn't bumped NQP yet

[21:47] <Voldenet> oh, that sounds easy

[21:48] <Voldenet> but I bet it still doesn't work even after

[21:48] <MasterDuke> i fixed the `&reverse not found` error, now i get the java.nio.BufferOverflowException

[22:29] <Voldenet> Yep, I confirm that using nqp e3225825d works

[22:29] <linkable6> (2024-02-24) https://github.com/Raku/nqp/commit/e3225825d5 Unbreak JVM build

[22:33] *** finanalyst left
[23:05] *** sena_kun left
