[00:12] *** [Coke]_ is now known as [Coke]

[00:19] *** [Coke]_ joined
[00:21] *** [Coke] left
[08:31] *** sena_kun joined
[11:53] <ab5tract> okay, so diving deeper into the splice thingy...

[11:54] <ab5tract> m: use nqp; [$[<a b c>]].iterator.push-until-lazy(my $a = nqp::create(IterationBuffer)); dd $a

[11:54] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu $a = ($["a", "b", "c"],).IterationBuffer␤»

[11:54] <ab5tract> m: use nqp; ($[<a b c>]).iterator.push-until-lazy(my $a = nqp::create(IterationBuffer)); dd $a

[11:54] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu $a = ("a", "b", "c").IterationBuffer␤»

[11:54] <Geth> ¦ rakudo/main: adff147ea4 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp

[11:54] <Geth> ¦ rakudo/main: Streamline Metamodel::ParametricRoleGroupHOW (Part 1/N)

[11:54] <Geth> ¦ rakudo/main: 

[11:54] <Geth> ¦ rakudo/main: - remove private methods: an nqp::atpos on an out of range element

[11:54] <Geth> ¦ rakudo/main:   produces an nqp::null, so we don't need to wrap that, in some

[11:54] <Geth> ¦ rakudo/main:   case they were even double wrapped.

[11:54] <Geth> ¦ rakudo/main: - add helper sub for typecheck

[11:54] <Geth> ¦ rakudo/main: - add "api" method for consistency, this was apparently NYI

[11:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/adff147ea4

[11:57] <ab5tract> I guess the above is just the single-arg rule in play?

[11:58] <lizmat> m: dd [$[<a b c>]]

[11:58] <camelia> rakudo-moar 18abe8c32: OUTPUT: «[["a", "b", "c"],]␤»

[11:58] <lizmat> m: dd  ($[<a b c>])

[11:58] <camelia> rakudo-moar 18abe8c32: OUTPUT: «$["a", "b", "c"]␤»

[11:59] <lizmat> hmmm

[11:59] <ab5tract> m: my $i = [$[<a b c>]].iterator; dd $i.pull-one

[11:59] <camelia> rakudo-moar 18abe8c32: OUTPUT: «$["a", "b", "c"]␤»

[11:59] <ab5tract> m: my $i = ($[<a b c>]).iterator; dd $i.pull-one

[11:59] <camelia> rakudo-moar 18abe8c32: OUTPUT: «"a"␤»

[12:00] <ab5tract> which on the one hand makes total sense. on the other hand, it feels weird 🙃

[12:01] <lizmat> m: dd my $i = ($[<a b c>]).iterator.^name

[12:01] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu $i = "Rakudo::Iterator::ReifiedArrayIterator"␤»

[12:02] <lizmat> m: dd my $i = [$[<a b c>]].iterator.^name

[12:02] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu $i = "Rakudo::Iterator::ReifiedArrayIterator"␤»

[12:04] <ab5tract> m: dd my $i = ($[<a b c>],).iterator; dd $i.pull-one

[12:04] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu $i = Rakudo::Iterator::ReifiedListIterator.new␤$["a", "b", "c"]␤»

[12:05] <ab5tract> which, again, makes sense..

[12:09] <ab5tract> but none of that makes the splice behavior feel right :/

[13:08] <nine> Array itemizes its elements

[13:18] <ab5tract> The reason this is being discussed is because splice doesn't allow $@a to be treated as an item

[13:19] <ab5tract> which feels less than nice

[14:54] <ab5tract> using the type system, is there any way to distinguish between `$[1,2]` and `[1,2]`

[14:54] <ab5tract> ?

[14:59] <ab5tract> or beyond the type system, for that matter

[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:28] <nine> m: say [] ~~ Scalar

[15:28] <camelia> rakudo-moar adff147ea: OUTPUT: «False␤»

[15:28] <tellable6> 2024-03-24T14:27:29Z #raku <Xliff> nine Could use a bit of your time. I'm having trouble with NativeCall crashes. #5534 could use your attention and also, what's the best way from converting a Str to a gpointer and NOT having it freed by C?

[15:28] <nine> m: say $[] ~~ Scalar

[15:28] <camelia> rakudo-moar adff147ea: OUTPUT: «False␤»

[15:29] <nine> m: say [].VAR ~~ Scalar

[15:29] <camelia> rakudo-moar adff147ea: OUTPUT: «False␤»

[15:29] <nine> m: say $[].VAR ~~ Scalar

[15:29] <camelia> rakudo-moar adff147ea: OUTPUT: «True␤»

[15:29] <nine> ab5tract: ^^^

[15:57] <ab5tract> ah, perfect, thanks!

[16:41] <ab5tract> unfortunately...

[16:41] <ab5tract> m: multi sub f($a where *.VAR ~~ Scalar) { say "scalar"; dd $a }; multi sub f(@a) { dd @a }; f $[1,2]

[16:41] <camelia> rakudo-moar adff147ea: OUTPUT: «[1, 2]␤»

[16:42] <ab5tract> likewise with additional constraint:

[16:42] <ab5tract> m: multi sub f(Array:D $a where *.VAR ~~ Scalar) { say "scalar"; dd $a }; multi sub f(@a) { dd @a }; f $[1,2]

[16:42] <camelia> rakudo-moar adff147ea: OUTPUT: «[1, 2]␤»

[16:44] <ab5tract> and, for logical though unfortunate reasons, scalar-hood does not survive assignment to an array container

[16:44] <ab5tract> (or binding)

[16:45] <ab5tract> so I don't see how it would be possible to make `@a.splice(*, *, $[1,2])` DWIM based on the current implementation (or perhaps ever)

[17:35] <Geth> ¦ rakudo/main: bafa92a601 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp

[17:35] <Geth> ¦ rakudo/main: Streamline Metamodel::ParametricRoleGroupHOW (Part 2/2)

[17:35] <Geth> ¦ rakudo/main: 

[17:35] <Geth> ¦ rakudo/main: - move parameterizer code to the actual parameterizer, instead of

[17:35] <Geth> ¦ rakudo/main:   another "private" method

[17:35] <Geth> ¦ rakudo/main: - make adding a possibility threadsafe

[17:35] <Geth> ¦ rakudo/main: - simplify candidate selection logic and abstract error handling

[17:35] <Geth> ¦ rakudo/main:   into a helper method

[17:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bafa92a601

[21:45] <ab5tract> m: multi sub f($a where *.can("elems") == 2) { say "scalar" }; multi sub f(@a) { say "array" }; f(my $a = [1,2])

[21:45] <camelia> rakudo-moar bafa92a60: OUTPUT: «array␤»

[21:46] <ab5tract> usually I expect multi's to match according to order of defined-ness...

[21:49] <ab5tract> regardless, it just feels out of sorts to me that there is no way for a signature to make a distinction between `$[]` and `[]`

[22:22] <patrickb> lizmat: Wrt fixing the Azure integration on Raku/nqp: I still don't see the buttons I'd like to push (I'm missing settings for integrations). is there any GitHub access level > admin?

[22:28] *** [Coke]_ is now known as [Coke]

[22:30] <[Coke]> patrickb: under settings/integrations/github apps, I see azure pipelines; where does that break for you?

[22:31] <[Coke]> I see you have "Maintain" privs on raku/nqp, not admin

[22:31] <lizmat> it's Admin now

[22:31] <[Coke]> cool.

[22:32] <[Coke]> lizmat++ patrickb++

[22:56] *** sena_kun left
