[00:58] <MasterDuke> lizmat: yeah, i knew you weren't working in core.d stuff, but the code is calling `is_array_type`, which was recently changed in 039dbe495be5eb9a211c9e596f4e91e7aa1f3089

[00:58] <linkable6> (2024-04-02) https://github.com/rakudo/rakudo/commit/039dbe495b Streamline Metamodel::ArrayType

[00:58] <tellable6> 2024-04-03T09:20:54Z #raku-dev <lizmat> MasterDuke: no idea, the error location file I haven't touched yet

[00:58] <MasterDuke> i added some more info in the gist and i'll keep investigating

[00:59] <MasterDuke> nine: huh, thanks for fixing that. the odd thing is i did in fact run a test and a spectest on the branch with `RAKUDO_RAKUAST=1` and compared the results with running on main and they were the same, but obviously i did something wrong...

[01:53] <Geth> ¦ rakudo/main: 555f4b0049 | (Daniel Green)++ | src/Perl6/Metamodel/ArrayType.nqp

[01:53] <Geth> ¦ rakudo/main: Revert 039dbe4 for the JVM backend

[01:53] <Geth> ¦ rakudo/main: 

[01:53] <Geth> ¦ rakudo/main: This unbreaks its build. I think the JVM backend doesn't support TEAK

[01:53] <Geth> ¦ rakudo/main: this early in the build, but I'm not 100% certain.

[01:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/555f4b0049

[02:07] <Geth> ¦ nqp/main: 30 commits pushed by (Daniel Green)++, MasterDuke17++

[02:07] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/compare/1967087e5d96...b9906e170584

[02:35] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5548: Adapt Rakudo to using fastutil for the JVM backend

[02:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5548

[04:10] <Geth> ¦ rakudo/main: 5 commits pushed by (Daniel Green)++, MasterDuke17++

[04:10] <Geth> ¦ rakudo/main: 3b8d5eb04e | Bump NQP for new JVM code with fastutil collections

[04:10] <Geth> ¦ rakudo/main: 05aae71255 | Use fastutil

[04:10] <Geth> ¦ rakudo/main: 23a9fdbe44 | Type the hash keys

[04:10] <Geth> ¦ rakudo/main: 955bc85661 | Adapt nameToHintMap to fastutil

[04:10] <Geth> ¦ rakudo/main: 861caed1d5 | Merge pull request #5548 from MasterDuke17/adapt_to_fastutil_change

[04:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/555f4b0049c5...861caed1d599

[07:23] *** MasterDuke left
[07:30] <nine> "The .literalize method attempts to create literal HLL objects for the given RakuAST::Node object, and returns Nil if for some reason it is impossible to do so."

[07:30] <nine> Except that it doesn't: literalize on RakuAST::WhateverCode::Argument NYI at SETTING::src/core.c/RakuAST/Literalize.rakumod:154

[08:25] <Geth> ¦ rakudo/main: fe279b0516 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[08:25] <Geth> ¦ rakudo/main: RakuAST: implement interpretation of postfix operations

[08:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fe279b0516

[08:25] <Geth> ¦ rakudo/main: 65f349a5cb | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[08:25] <Geth> ¦ rakudo/main: RakuAST: throw the appropriate error for negative array index literals

[08:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/65f349a5cb

[08:55] *** sena_kun joined
[09:10] <ab5tract> Plot twist: in the base compiler, target=ast output does not include optimization

[09:11] <ab5tract> This is probably mostly a benefit, but when looking into a situation where optimize=off makes your changes work as expected, it is certainly an important detail to know

[09:13] <ab5tract> Related conclusion: Lexicals lowered by the optimizer do not respond equivalently to ParamTypeCheck calls

[10:17] <lizmat> MasterDuke: if reverting 039dbe495be5eb9a211c would fix the JVM build, then there's something really weird going on

[10:17] <tellable6> lizmat, I'll pass your message to MasterDuke

[10:17] <linkable6> (2024-04-02) https://github.com/rakudo/rakudo/commit/039dbe495b Streamline Metamodel::ArrayType

[10:19] <lizmat> MasterDuke: because basically the only thing that that changed, was how is_array_type is implemented, and if nqp::not_i(nqp::isnull(...)) doesn't work on JVM, we have a bigger issue?

[10:19] <tellable6> lizmat, I'll pass your message to MasterDuke

[10:50] *** [Tux] left
[10:55] *** [Tux] joined
[11:10] <Geth> ¦ rakudo/main: ea0aa21d7f | (Stefan Seifert)++ | 3 files

[11:10] <Geth> ¦ rakudo/main: RakuAST: support .&{...} method calls

[11:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ea0aa21d7f

[11:10] <Geth> ¦ rakudo/main: ca0d17087d | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[11:10] <Geth> ¦ rakudo/main: RakuAST: Support hypering of hash indexing

[11:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ca0d17087d

[11:11] <lizmat> ab5tract: FWIW TIL  :-)

[11:11] <lizmat> re target=ast

[11:38] <lizmat> nine: 1003!

[11:47] <[Tux]> ............This type (NQPRoutine) does not support positional operations

[11:47] <[Tux]>   in method require at /pro/3gl/CPAN/rakudo/install/share/perl6/site/sources/FE0EA2E16CD0CD31716830FEE610E9B4116A2281 (Inline::Perl5) line 1057

[11:47] <[Tux]>   in method use at /pro/3gl/CPAN/rakudo/install/share/perl6/site/sources/FE0EA2E16CD0CD31716830FEE610E9B4116A2281 (Inline::Perl5) line 1163

[11:47] <[Tux]>   in block <unit> at csv-ip5pp.pl line 8

[11:48] <[Tux]> Rakudo v2024.03-86-gca0d17087 (v6.d) on MoarVM 2024.03-1-g69a06919c

[11:48] <[Tux]> csv-test-xs-20      0.141 -  0.143

[11:48] <[Tux]> csv-ip5xs           0.253 -  0.263

[11:48] <[Tux]> test-t --race       0.272 -  0.294

[11:48] <[Tux]> test-t              0.419 -  0.434

[11:48] <[Tux]> csv-ip5xs-20        1.119 -  1.136

[11:48] <[Tux]> test-t-20 --race    1.220 -  1.229

[11:48] <[Tux]> csv-parser          1.567 -  1.607

[11:48] <[Tux]> test                1.930 -  1.942

[11:48] <[Tux]> test-t-20           5.150 -  5.280

[11:49] <[Tux]> 0.419 is in the top-5, but all top 5 is now 0.419 or 0.420 :)

[12:37] <lizmat> greppable: $!composed_repr

[12:37] <greppable6> lizmat, Found nothing!

[12:37] <lizmat> greppable: composed_repr

[12:37] <greppable6> lizmat, 1 line, 1 module: https://gist.github.com/45362187e5b6c67cf39cb400fdf2e88c

[12:39] <lizmat> funny that greppable doesn't spot $!composed_repr, but does find composed_repr

[12:39] <lizmat> and naughty Inline::Perl5  :-)

[12:51] <Geth> ¦ rakudo/main: 406ad16bb9 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/REPRComposeProtocol.nqp

[12:51] <Geth> ¦ rakudo/main: Streamline Metamodel::REPRComposeProtocol

[12:51] <Geth> ¦ rakudo/main: 

[12:51] <Geth> ¦ rakudo/main: - replace for loops by while loops

[12:51] <Geth> ¦ rakudo/main: - centralize composing

[12:51] <Geth> ¦ rakudo/main: 

[12:51] <Geth> ¦ rakudo/main: Sadly, it was not possible to make the $!composed_repr an int

[12:51] <Geth> ¦ rakudo/main: attribute, as that broke Inline::Perl5

[12:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/406ad16bb9

[13:01] <lizmat> greppable: is_array_type

[13:01] <greppable6> lizmat, Found nothing!

[13:01] <lizmat> greppable: array_type

[13:01] <greppable6> lizmat, 40 lines, 5 modules: https://gist.github.com/4f4e9d11904f97db80ca21fd1004e2d2

[13:14] <nine> class Bar is ::Foo # What does the double-colon here mean?

[13:15] <lizmat> GLOBAL::Foo ??

[13:15] <lizmat> m: class A { }; dd A =:= ::A

[13:15] <camelia> rakudo-moar 406ad16bb: OUTPUT: «Bool::True␤»

[13:16] <lizmat> m: class A { }; {dd A =:= GLOBAL::A

[13:16] <camelia> rakudo-moar 406ad16bb: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> class A { }; {dd A =:= GLOBAL::A⏏<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        statement mo…»

[13:16] <lizmat> m: class A { }; dd A =:= GLOBAL::A

[13:16] <camelia> rakudo-moar 406ad16bb: OUTPUT: «Bool::True␤»

[13:17] <lizmat> actually, looks like it's UNIT::

[13:17] <lizmat> m: my class A { }; { dd A =:= UNIT::A  }

[13:17] <camelia> rakudo-moar 406ad16bb: OUTPUT: «Bool::True␤»

[13:17] <lizmat> m: my class A { }; { dd A =:= GLOBAL::A  }

[13:17] <camelia> rakudo-moar 406ad16bb: OUTPUT: «Bool::False␤»

[13:17] <lizmat> m: my class A { }; { dd A =:= ::A  }

[13:17] <camelia> rakudo-moar 406ad16bb: OUTPUT: «Bool::True␤»

[13:27] <nine> m: my ::T $i; dd $i

[13:27] <camelia> rakudo-moar 406ad16bb: OUTPUT: «Method T.raku not found␤  in block <unit> at <tmp> line 1␤␤»

[13:28] <lizmat> m: my ::T $i; say $i

[13:28] <camelia> rakudo-moar 406ad16bb: OUTPUT: «Method T.gist not found␤  in block <unit> at <tmp> line 1␤␤»

[13:28] <nine> Looks like we're accepting type captures in places where this syntax can only mean global type lookup

[13:28] <lizmat> m: my ::T $i; dd $i.^methods>>.name

[13:28] <camelia> rakudo-moar 406ad16bb: OUTPUT: «No such method 'methods' for invocant of type␤'Perl6::Metamodel::GenericHOW'␤  in block <unit> at <tmp> line 1␤␤»

[13:28] <lizmat> yeah, GenericHOW's find_method always returns nqp::nnull

[13:29] <Geth> ¦ rakudo/main: e64145d284 | (Stefan Seifert)++ | 4 files

[13:29] <Geth> ¦ rakudo/main: RakuAST: fix "is" trait with parameterized type

[13:29] <Geth> ¦ rakudo/main: 

[13:29] <Geth> ¦ rakudo/main: in my @a is Array[Int] we treated the brackets as array constructor and

[13:29] <Geth> ¦ rakudo/main: were quite confused about that.

[13:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e64145d284

[13:29] <Geth> ¦ rakudo/main: a4b6c4019b | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[13:29] <Geth> ¦ rakudo/main: RakuAST: disambiguate global lookup vs type capture in "is" traits

[13:29] <Geth> ¦ rakudo/main: 

[13:29] <Geth> ¦ rakudo/main: In class Bar is ::Foo { } we parsed ::Foo as a type capture leading to a

[13:29] <Geth> ¦ rakudo/main: confusing error message. Instead it should be parsed as a global lookup

[13:29] <Geth> ¦ rakudo/main: (i.e. short for GLOBAL::Foo) which just looks the same.

[13:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a4b6c4019b

[13:29] <nine> 1005

[13:29] <lizmat> nine++

[13:48] <Geth> ¦ rakudo/main: 392213dd80 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/GenericHOW.nqp

[13:48] <Geth> ¦ rakudo/main: Streamline Metamodel::GenericHOW

[13:48] <Geth> ¦ rakudo/main: 

[13:48] <Geth> ¦ rakudo/main: - don't bother with BUILDALL, since the only attributes that need

[13:48] <Geth> ¦ rakudo/main:   to be set, are set with set_name already

[13:48] <Geth> ¦ rakudo/main: - some re-arranging of ifs to ternaries

[13:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/392213dd80

[13:48] <lizmat> afk for a few hours&

[14:08] *** vrurg_ joined
[14:08] *** vrurg left
[14:23] <Geth> ¦ rakudo/is-item: b547b75bb0 | ab5tract++ | src/Perl6/Actions.nqp

[14:23] <Geth> ¦ rakudo/is-item: 'is item' works fine with --optimize=off

[14:23] <Geth> ¦ rakudo/is-item: review: https://github.com/rakudo/rakudo/commit/b547b75bb0

[14:23] <ab5tract> This part is kind of blowing my mind to be honest

[14:24] <ab5tract> the feature works as expected as long as you are not using the optimizer

[14:25] <ab5tract> it also works in the signature of pointy blocks: -> @a is item { dd @a }($[1,2])

[14:28] <ab5tract> I've done all sorts of tryouts in the optimizer, skipping the lowering of lexicals (no effect), skipping the visiting of the sub based on name, and about a bazillion debug states of my own.. nothing has really cleared anything up yet

[14:36] <ab5tract> If someone with more QAST knowledge could take a look at the before/after of optimization for `sub q(@a is item) { dd @a }; q $[5,6];`, I'd _really_ appreciate it: https://gist.githubusercontent.com/ab5tract/972c29df4a980823c71af9c30bbb223e/raw/e09105bd119ad0080ac824859b7739802cd6f9e6/is-item.qast.dump

[14:37] <nine> ab5tract: Inconsistent bind result is the result of QAST not agreeing with the information in the meta-object.

[14:37] <ab5tract> the main thing that I've noticed (aside from the changes to lexical `@a` / `__lowered_lex__1`) is the conversion of `call` to callstatic`

[14:37] <nine> I.e. QAST checks fail on something that according the the signature's flags should pass

[14:37] <ab5tract> nine: right, I haven't bothered to fix the bind

[14:38] <ab5tract> *binder code

[14:38] <ab5tract> the notable thing here is that the first, unoptimized QAST succeeds. the second QAST fails

[14:39] <nine> So what's the failure you get from the optimizer?

[14:39] <nine> So binder is fine with unoptimized but fails on optimized?

[14:40] <ab5tract> the binder is only interacted with when the call fails

[14:40] <ab5tract> it's really only there to give a sensible exception

[14:41] <ab5tract> another way to put it is that the unoptimized QAST computes fine by the VM, but the optimized QAST doesn't

[14:41] <nine> Not entirely true. There are also situations where we need the full binder

[14:41] <ab5tract> well, let's just say for this instance

[14:42] <ab5tract> it would be weird that the optimized path hits the fulle binder when the unoptimized doesn't, right?

[14:42] <ab5tract> again, for this case

[14:47] <ab5tract> From the code that dies with the inconsistent bind result: '# Run full binder to produce an error.'

[14:48] <ab5tract> I spent a lot of time chasing my tail through the binder code trying to understand why it was irrelevant for the case I was trying to dispatch :)

[14:51] <ab5tract> nine: does anything else jump out at you? could it be related to the conversion of `QAST::Op(call &q)` to `QAST::Op(callstatic &q)` ?

[14:51] <nine> And that is the result of an assertparamcheck failing but the binder thinking it should have been successful.

[14:52] <nine> No, that should only affect finding the routine to call

[14:59] <ab5tract> FWIW I'm adding the proper check to the binder now

[15:02] <nine> Worst case it'll at least tell you why the call got rejected

[15:03] <nine> Maybe the problem in your test is actually at the caller's side

[15:04] <ab5tract> it could be... but the how of that is beyond me. it works in signatures attached to pointy blocks, for example

[15:05] <ab5tract> maybe if I follow this down the road a bit: 

[15:05] <ab5tract> m: use nqp; sub s(@a is raw where { nqp::iscont($_) }) { say nqp::iscont(@a) }; s $[1,2];

[15:05] <camelia> rakudo-moar 392213dd8: OUTPUT: «1␤»

[15:13] <Geth> ¦ rakudo/is-item: f9ff6a11b1 | ab5tract++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[15:13] <Geth> ¦ rakudo/is-item: Add error checking to Binder to remove inconsistent bind result ambiguity

[15:13] <Geth> ¦ rakudo/is-item: review: https://github.com/rakudo/rakudo/commit/f9ff6a11b1

[15:15] <ab5tract> nine: it looks like the only inconsistency in the bind is indeed the fact that the ParamTypeCheck added by the `is item` check fails with optimized QAST. but it was a good to remove the ambiguity in any case

[15:20] <nine> So what does it say now why it fails?

[15:21] <ab5tract> `Parameter '@a' only accepts an itemized argument`

[15:23] <ab5tract> this is what I set the error to when it encounters this failure in the binder

[15:27] <ab5tract> it looks perfect now without the optimizer: https://gist.github.com/ab5tract/972c29df4a980823c71af9c30bbb223e?permalink_comment_id=5012274#gistcomment-5012274

[15:28] <ab5tract> (note that it was already working before, just without a targetted error message)

[15:32] <ab5tract> in case it helps readability, I've split the before and after optimization QASTs into two separate files in the gist

[15:46] <ab5tract> nine: I'm a bit surprised why you would expect fixing the binder to return something other than said fix to the binder. am I holding something wrong here?

[15:49] <nine> I expected that to give you a better idea of why the call fails in the first place. After all you do expect the call to succeed, don't you? Since it's not succeeding, it would be interesting to know why.

[15:50] <nine> According to that message you just don't get an itemized argument which makes it reasonable for the call to fail. Now the question is, why don't you get one?

[15:54] <ab5tract> One answer to that question: because of changes made by the optimizer

[15:55] <ab5tract> When I change ParamTypeCheck to include a QAST chain that calls `say __lowered_param__1.VAR.WHAT`, I get `Array` with optimization and `Scalar` without (for `$[]`

[15:58] <ab5tract> there's a `.raku` in that `VAR.WHAT` method chain, for good measure.

[16:01] <nine> Which is consistent with you not getting an itemized argument

[16:04] <Geth> ¦ rakudo/main: 54854d9304 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[16:04] <Geth> ¦ rakudo/main: RakuAST: fix .= calls on non-Scalar containers

[16:04] <Geth> ¦ rakudo/main: 

[16:04] <Geth> ¦ rakudo/main: Fixes "Cannot assign to an immutable value" on my @a = 1, 2; @a .= sort;

[16:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/54854d9304

[16:05] <nine> 1015

[16:05] <ab5tract> oh snap!

[16:05] <ab5tract> nice one :D

[16:06] <lizmat> cool!

[16:06] <lizmat> greppable: instantiate_generic

[16:06] <greppable6> lizmat, 1 line, 1 module: https://gist.github.com/6351b48a48f122f964e07b0bf2b861b6

[16:07] <ab5tract> Re: the consistency of not getting an itemized argument.. yes, it is indeed consistent with that. But I wasn't surprised about not getting an itemized argument, that's been clear for a few days now. What I'm struggling with is understanding what the optimizer is doing and how I can fix it :)

[16:13] <lizmat> greppable6: is_default_generic

[16:13] <greppable6> lizmat, Found nothing!

[16:50] <ab5tract> it's the conversion of `call` to `callstatic`

[17:04] <ab5tract> the former's documentation says "this documentation is missing" and the latter's documentation is conspicuosly absent

[17:08] <nine> Huh....how?

[17:08] <ab5tract> also, TIL that the "soft" pragma exists

[17:09] <ab5tract> nine: I was hoping you might know!

[17:11] <Geth> ¦ rakudo/main: 3a70c5034a | (Stefan Seifert)++ | 2 files

[17:11] <Geth> ¦ rakudo/main: RakuAST: Fix block topic not being raw enough

[17:11] <Geth> ¦ rakudo/main: 

[17:11] <Geth> ¦ rakudo/main: In $_ = 1 for @a we want to be able to write to $_. For this we added

[17:11] <Geth> ¦ rakudo/main: the "is raw" trait to the generated signature for the expression thunk.

[17:11] <Geth> ¦ rakudo/main: However this trait was ineffective as it never got applied. The

[17:11] <Geth> ¦ rakudo/main: signature gets generated after BEGIN time effects have already happened.

[17:11] <Geth> ¦ rakudo/main: Fixing this is not easy as to run BEGIN we need a resolver and context

[17:11] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[17:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a70c5034a

[17:13] <nine> 1019

[17:14] <ab5tract> on a roll!

[17:16] <ab5tract> I can't seem to find the implementation of `callstatic` in MoarVM

[17:17] <nine> Because there is none. https://github.com/Raku/nqp/blob/main/src/vm/moar/QAST/QASTOperationsMAST.nqp#L1757

[17:18] <ab5tract> :O

[17:19] <ab5tract> maybe it's this.. https://github.com/Raku/nqp/blob/b9906e170584e42f1a77edf777973db78fcfddb5/src/vm/moar/QAST/QASTOperationsMAST.nqp#L1553

[17:20] <nine> But that's about the callee, i.e. the sub itself

[17:38] <ab5tract> good point.. just checked with MVM_SPESH_DISABLE, just in case, and that doesn't fix anything

[19:12] <ab5tract> yeah, this is super confusing.. the  lines nine linked to basically show that call and callstatic dispatch to the same exact sub

[19:15] <ab5tract> but `$call.op('callstatic') unless nqp::getenvhash<WTF> eq '3';` in Optimize.nqp definitely makes the whole thing succeed

[19:19] <ab5tract> evidence: https://gist.githubusercontent.com/ab5tract/972c29df4a980823c71af9c30bbb223e/raw/884bb4f614b920e5faae4d8922abab0579a7e8df/0%2520.%2520diff

[19:20] <lizmat> vrurg_: re generics, perhaps a crazy idea:

[19:20] <lizmat> 1. each "instantiate_generic" method should be able to handle the null-case (as in, no instantiation needed)

[19:21] <lizmat> 2. change all "is_generic" checks to nqp::can(..., 'instantiate_generic') and call it when it can

[19:22] <lizmat> why?  because I feel that the current check whether something is generic through the archetypes, is potentially much more expensive than an nqp::can()

[19:22] <lizmat> and a null-return can actually quickly be handled in dispatch (perhaps with a dedicated dispatch handler)

[19:23] <lizmat> this should also reduce bytecode footprint significantly and thus allow for more progressive inlining

[19:23] <vrurg_> But this is why the dispatcher for ClassHOW archetype. It is supposed to take care of the check.

[19:23] *** vrurg_ is now known as vrurg

[19:24] <vrurg> Another thing, what if someone needs to know if something is generic or not?

[19:26] <vrurg> The instantiation process itself can avoid asking for is_generic result the way you propose. That's gonna be beneficial. But for introspection purposes it'd be for worse.

[19:26] <lizmat> hmmm ok, good point...  but other than that, is there something essentially wrong with my idea?

[19:27] <lizmat> Question: why would one need to know whether a type is generic or not ?

[19:28] <vrurg> No, I rather like it. As you noticed, it would even be easier for dispatchers to optimize it. Inlining? I doubt a bit, but a couple of methods, perhaps, would get small enough.

[19:29] <lizmat> ok, I'm pretty tired right now, will look into the feasibility tomorrow

[19:31] <vrurg> Have a good rest! It's so easy to burn out...

[20:05] <ab5tract> the only difference between the `call` and `callstatic` that I can find is here: https://github.com/Raku/nqp/blob/b9906e170584e42f1a77edf777973db78fcfddb5/src/vm/moar/QAST/QASTOperationsMAST.nqp#L1615

[20:15] <ab5tract> but that just seems to be about looking up the routine in question, so how does it end up affecting an argument passed to that routine?

[20:32] <ab5tract> erm, sorry: I meant that the dfifference lies here: https://github.com/Raku/nqp/blob/b9906e170584e42f1a77edf777973db78fcfddb5/src/vm/moar/QAST/QASTOperationsMAST.nqp#L1542

[21:12] *** MasterDuke joined
[21:15] <MasterDuke> lizmat: i don't think it was is_array_type was implemented, but that $!array_type wasn't getting set in the TWEAK

[21:15] <tellable6> 2024-04-04T10:17:23Z #raku-dev <lizmat> MasterDuke: if reverting 039dbe495be5eb9a211c would fix the JVM build, then there's something really weird going on

[21:15] <tellable6> 2024-04-04T10:19:17Z #raku-dev <lizmat> MasterDuke: because basically the only thing that that changed, was how is_array_type is implemented, and if nqp::not_i(nqp::isnull(...)) doesn't work on JVM, we have a bigger issue?

[21:15] <linkable6> (2024-04-02) https://github.com/rakudo/rakudo/commit/039dbe495b Streamline Metamodel::ArrayType

[21:16] <MasterDuke> btw nine++, jdv++, lizmat++, lots-of-people++, cool to see the progress being made

[21:18] <MasterDuke> [Tux]: could you make a page with graphs for test-t-20? might be easier to see changes with that one now that test-t has gotten so much faster

[21:46] <Geth> ¦ rakudo/main: 037fab6c95 | (Daniel Green)++ | src/Perl6/Metamodel/GenericHOW.nqp

[21:46] <Geth> ¦ rakudo/main: Fix typo in JVM part of 392213d

[21:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/037fab6c95

[21:54] <lizmat> MasterDuke++

[21:58] <lizmat> MasterDuke: https://irclogs.raku.org/raku-dev/search.html?type=words&query=test-t-20

[22:02] *** sena_kun left
[23:27] *** MasterDuke left
