[00:02] *** reportable6 joined
[00:36] *** MasterDuke joined
[03:18] *** MasterDuke left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[08:10] *** sena_kun joined
[08:11] *** finanalyst joined
[08:17] <ab5tract> [Coke]: why not? (genuine question as I don't know whether its a complicated process)

[08:54] <lizmat> .tell lizmat hello

[08:54] <tellable6> lizmat, I'll pass that message to your doctor

[08:54] <tellable6_> lizmat, I'll pass that message to your doctor

[08:54] <lizmat> hmmm

[08:55] *** ChanServ sets mode: +o lizmat

[08:55] *** ChanServ sets mode: -o lizmat

[09:18] *** sena_kun left
[09:50] <finanalyst> .tell [Coke] I've answered your question about PR #364. Hoping for a review.

[09:50] <tellable6> finanalyst, I'll pass your message to [Coke]

[09:55] *** finanalyst left
[10:03] <patrickb> jdv: Release build is done.

[11:53] <ab5tract> thanks patrickb++!

[12:00] *** reportable6 left
[12:02] <ab5tract> m: use nqp; my $Block := nqp::unipropcode("Block");  say "with space: " ~ nqp::unipvalcode($Block, "Basic Latin"); say "w/o space: " ~ nqp::unipvalcode($Block, "Basic_Latin"); 

[12:02] <camelia> rakudo-moar 735fc4f3d: OUTPUT: «with space: 0␤w/o space: 1␤»

[12:03] *** reportable6 joined
[12:03] <ab5tract> it's interesting that the nqp version of unipvalcode has signature (int, str) but the MVM one has (int, int)

[12:06] <ab5tract> m: use nqp; my $a = nqp::unipropcode("Basic Latin"), my $b = nqp::unipropcode("Basic_Latin"), $a == $b ==> say()

[12:06] <camelia> rakudo-moar 735fc4f3d: OUTPUT: «(0 6 False)␤»

[12:06] <ab5tract> I actually have no idea how the spaced-version is working :)

[12:07] <lizmat> m: my int $a; my str $b = "42"; $a = $b; say $a

[12:07] <camelia> rakudo-moar 735fc4f3d: OUTPUT: «42␤»

[12:07] <lizmat> if the native string coerces ok, it is automagically converted

[12:07] <lizmat> only works with natives

[12:08] <lizmat> m: sub a(int $a) { dd $a }; a my str $ = "42"

[12:08] <camelia> rakudo-moar 735fc4f3d: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling a(str) will never work with declared signature (int $a)␤at <tmp>:1␤------> sub a(int $a) { dd $a }; ⏏a my str $ = "42"␤»

[12:08] <lizmat> m: sub a(int $a) { dd $a }; a(my str $ = "42")

[12:08] <camelia> rakudo-moar 735fc4f3d: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling a(str) will never work with declared signature (int $a)␤at <tmp>:1␤------> sub a(int $a) { dd $a }; ⏏a(my str $ = "42")␤»

[12:09] <lizmat> pretty sure with optimization off that would work  :-)

[12:15] <ab5tract> ah, sorry, I meant I don't understand how "a" ~~ /<:Block("Basic Latin")>/ is working. `DELEGATE-ACCEPTS` gets "Basic Latin" as the property name and the target, but I can't see how the MAST operations are returning "Basic Latin" instead of "Basic_Latin"

[12:16] <ab5tract> it's actually irrelevant in the long run, just a bit of confusion that my mind would rather see resolved :)

[12:18] <Geth> ¦ rakudo/r5486: d27303a6b8 | ab5tract++ | 2 files

[12:18] <Geth> ¦ rakudo/r5486: Add name check and exception to General_Category uasge

[12:18] <Geth> ¦ rakudo/r5486: 

[12:18] <Geth> ¦ rakudo/r5486: Add a check that we should actually be bothering with

[12:18] <Geth> ¦ rakudo/r5486: General_Category lookups at all.

[12:18] <Geth> ¦ rakudo/r5486: 

[12:18] <Geth> ¦ rakudo/r5486: By doing so, we are able to add a targeted exception

[12:18] <Geth> ¦ rakudo/r5486: in the case where an unknown Unicode General_Category

[12:18] <Geth> ¦ rakudo/r5486: <…commit message has 5 more lines…>

[12:18] <Geth> ¦ rakudo/r5486: review: https://github.com/rakudo/rakudo/commit/d27303a6b8

[12:23] <ab5tract> nine & lizmat, let me know if you still approve of R#5555 and N#820 -- I've added exceptions for when unknown categories and category/property pairs are provided.

[12:23] <linkable6> R#5555 [open]: https://github.com/rakudo/rakudo/pull/5555 Add lookup for translating General_Category longnames

[12:23] <linkable6> N#820 [open]: https://github.com/Raku/nqp/pull/820 Add lookup for translating General_Category longnames

[12:24] *** linkable6_ left
[12:26] *** linkable6_ joined
[12:27] <ab5tract> dang, I thought I had t/12-rakuast/regex-assertion.rakutest fixed.. hold off on review for now

[12:28] <lizmat> too late  :-)

[12:28] <ab5tract> :)

[12:29] <ab5tract> but yeah, basically what seems weird to me is that `nqp::unipvalcode(nqp::unipropcode($category), $constraint-property)` doesn't work for Block and "Basic Latin"

[12:30] <lizmat> is this in Raku or NQP ?

[12:31] <ab5tract> I could solve this with a .subst call on $constraint-property, but wasn't sure how heavy that would be

[12:31] <ab5tract> this call is coming from Raku

[12:32] <lizmat> so what is the failing case?  

[12:34] <ab5tract>  Subtest: Character property with expression assertion works \n # / <+:Block("Basic Latin")>/

[12:35] <ab5tract> but.. from the CLI this works: `set-rakuast; r ' "As" ~~ / <+:Block("Basic Latin")> / ==> say()'`

[12:35] <ab5tract> 🙃

[12:37] <ab5tract> ah, I think I see what's going wrong

[12:38] <ab5tract> from some debug: :constraint-property("Basic Latin") \n :target("Supplemental Symbols and Pictographs")

[12:43] <ab5tract> hmm, but how to fix it..

[12:53] <ab5tract> \o/

[12:56] <ab5tract> but I did have to resort to .subst(' ', '_', :g)

[12:59] <ab5tract> except something is still up.. new tests failing that hadn't failed before

[13:09] <ab5tract> Okay, one more chance and then I'm abandoning this as an exception site. It would probably be cleaner to do this in RakuAST anyway...

[13:15] <ab5tract> I think this whole section of regex's could use a revisit

[13:16] <ab5tract> TIL that 'bc' is a valid "category"

[13:18] <Geth> ¦ rakudo/r5486: 6a7171d565 | ab5tract++ | src/core.c/Match.rakumod

[13:18] <Geth> ¦ rakudo/r5486: Add lookup for translating General_Category longnames

[13:18] <Geth> ¦ rakudo/r5486: 

[13:18] <Geth> ¦ rakudo/r5486: Also fix broken shortnames "L", "M", "N", "P", "S", "Z", and "C".

[13:18] <Geth> ¦ rakudo/r5486: 

[13:18] <Geth> ¦ rakudo/r5486: This fixes #5486 and #5372.

[13:18] <Geth> ¦ rakudo/r5486: 

[13:18] <Geth> ¦ rakudo/r5486: The problem this addresses is three-fold:

[13:18] <Geth> ¦ rakudo/r5486: <…commit message has 23 more lines…>

[13:18] <Geth> ¦ rakudo/r5486: review: https://github.com/rakudo/rakudo/commit/6a7171d565

[13:19] <ab5tract> back to basics :)

[13:23] <ab5tract> okay, I'm flummoxed now.. I know I ran full spectest successfully with the older proposals

[13:24] <ab5tract> will have to investigate further later on

[13:28] <ab5tract> that's what I get  for forgetting to `rm ./install/bin/nqp*` 😭

[13:31] <ab5tract> *phew*

[16:59] *** sena_kun joined
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:16] <ab5tract> m: "e".uniprop("Block").say;  "e".uniprop("Script").say; "e".uniprop("General_Category").say; "e".uniprop("Uppercase_Letter").say

[18:16] <camelia> rakudo-moar 735fc4f3d: OUTPUT: «Basic Latin␤Latin␤Ll␤Ll␤»

[18:19] <ab5tract> I feel like the uni* methods must be some of the earliest pieces of Rakudo... even the method names are a bit more archaic than usual (though`.unicode-property` does feel a bit wordy)

[18:19] <[Coke]> m: "e".uniprop("Random Stuff").say;

[18:19] <camelia> rakudo-moar 735fc4f3d: OUTPUT: «0␤»

[18:19] <tellable6> 2024-04-26T09:50:38Z #raku-dev <finanalyst> [Coke] I've answered your question about PR #364. Hoping for a review.

[18:20] <ab5tract> m: "e".uniprop("Basic Latin").say

[18:20] <camelia> rakudo-moar 735fc4f3d: OUTPUT: «0␤»

[18:20] <ab5tract> note that it doesn't even roundtrip there

[18:21] <[Coke]> Is 0 the right response? Not clear from https://docs.raku.org/type/Cool#routine_uniprop

[18:23] <ab5tract> I would argue that an exception or failure would be more appropriate

[18:25] <ab5tract> I think I'll craft a problem-solving ticket for this $sometime

[18:33] <[Coke]> could you write up a sentence as to what cases would return a 0 here for the docs? I'll edit it and add it in

[18:44] <ab5tract> Sure, will get back to you on that

[18:45] <[Coke]> also just found m Stuff").say;

[18:45] <[Coke]> 14:19 < camelia> rakudo-moar 735fc4f3

[18:45] <linkable6> (2024-04-25) https://github.com/rakudo/rakudo/commit/735fc4f3d1 Merge pull request #5556 from rakudo/release-2024.04

[18:45] <[Coke]> er, https://github.com/Raku/doc/issues/4449

[18:46] *** linkable6_ left
[18:48] *** linkable6_ joined
[18:57] <ab5tract> I wonder how muc 

[18:58] <ab5tract> *I wonder how much community fallout there would be from changing 0 to Nil here..

[19:02] <ab5tract> I would imagine that there would be very little working code out there that depends on looking up a nonexistent property

[19:09] <jdv> community or ecosystem?

[19:11] <ab5tract> ecosystem 

[19:13] <ab5tract> related, it would be an amazing thing to rework blin to be able to run on a branch commit

[19:15] <jdv> idk if it cant.  you can spec a "new" sha iirc

[19:16] <ab5tract> by sending an incantation to buildable?

[19:17] <ab5tract> my understanding from the code was that could only do what's been buildable'd

[19:17] <ab5tract> but maybe (probably) I missed something..

[19:18] <jdv> i meant blin.  itd have to be on gh so a build could be fetched

[19:18] <jdv> yeah.

[19:19] <jdv> youre probably right

[19:19] <jdv> it would be cool

[19:21] <jdv> i guess the first hurdle would be getting that build in the set on the "mothership"

[19:22] <jdv> one issue is its all run by alexdaniel so its not easy to change

[19:36] <ab5tract> indeed...

[19:38] <ab5tract> my thought was maybe it could be refactored to take either a capital-B Build as usual or to work with a local path 

[19:40] <jdv> the sha would have to in the git tree it looks to

[19:40] <jdv> right now thats gh

[19:41] <jdv> point both local maybe

[19:41] <jdv> thats if you want bisecting

[19:42] <ab5tract> bisecting is a great feature but for testing a branch just simple verification was the goal I had in mind

[19:43] <ab5tract> unless its a monster of a branch, I wouldn't expect bisecting to be too important

[19:43] <jdv> yeah

[20:06] <Geth> ¦ rakudo/main: aee3d2599a | ab5tract++ | src/core.c/unicodey.rakumod

[20:06] <Geth> ¦ rakudo/main: Return '' instead of 0 when a uniprop is not found

[20:06] <Geth> ¦ rakudo/main: 

[20:06] <Geth> ¦ rakudo/main: The previous behavior seems to be an unintended consequence

[20:06] <Geth> ¦ rakudo/main: of setting the "pref" to 'I' when no uniprop is found in

[20:06] <Geth> ¦ rakudo/main: codename2proppref.

[20:06] <Geth> ¦ rakudo/main: 

[20:06] <Geth> ¦ rakudo/main: Using '' here as that is what is returned in the bottom of the

[20:06] <Geth> ¦ rakudo/main: nested if's.

[20:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/aee3d2599a

[20:07] <ab5tract> ^^ pushed this directly to main so that it can be tested with blin. if there's any issue, I will of course revert it

[20:13] <ab5tract> m: "e".uniprop("Basic Latin").say

[20:13] <camelia> rakudo-moar aee3d2599: OUTPUT: «Nil␤»

[20:14] <ab5tract> buildable is fast :)

[20:20] <Geth> ¦ rakudo/main: 05dcd08151 | ab5tract++ | src/core.c/unicodey.rakumod

[20:20] <Geth> ¦ rakudo/main: Actually return '' (not Nil) from uniprop

[20:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/05dcd08151

[20:44] <ab5tract> Dang: `WARNING: image platform (linux/amd64) does not match the expected platform (linux/arm64)`

[20:44] <nine> Looks like my grant proposal is up for comments: https://news.perlfoundation.org/post/sseifert-rakuas-apr2024

[20:44] <nine> I'd appreciate feedback :) The committee is voting next weekend

[20:47] <[Coke]> nine++

[20:47] <[Coke]> # commented

[20:49] <lizmat> nine++    .oO( develoer ?? )

[20:54] <[Coke]> ... they never took away my edit rights, I could fix that typo. :|

[20:56] <lizmat> hehe  :-)

[20:56] <[Coke]> .tell Util - hey, can you let Saif know there's a typo "develoer" in https://news.perlfoundation.org/post/sseifert-rakuas-apr2024)

[20:56] <tellable6> [Coke], I'll pass your message to Util

[20:57] *** MasterDuke joined
[21:01] <MasterDuke> ab5tract, jdv: i think blin can do branches, assuming they're pushed to the rakudo repo

[21:02] <MasterDuke> since for a while now the whateverable build process builds branch commits also

[21:03] <ab5tract> ah, that should indeed enable it

[21:05] <MasterDuke> heh, "interpreteter" and "interpretter" in the grant proposal

[21:29] *** sena_kun left
[22:27] <ab5tract> nine++ , I really hope you get this

