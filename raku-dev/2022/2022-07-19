[00:00] *** reportable6 left
[00:00] *** nativecallable6 left
[00:00] *** quotable6 left
[00:00] *** sourceable6 left
[00:00] *** notable6 left
[00:00] *** tellable6 left
[00:00] *** releasable6 left
[00:00] *** shareable6 left
[00:00] *** greppable6 left
[00:00] *** bloatable6 left
[00:00] *** |Tux| left
[00:00] *** ilogger2 left
[00:00] *** |Tux| joined
[00:03] *** ilogger2 joined
[00:09] *** reportable6 joined
[00:46] *** greppable6 joined
[00:46] *** releasable6 joined
[01:46] *** notable6 joined
[01:47] *** shareable6 joined
[01:47] *** bloatable6 joined
[01:48] *** tellable6 joined
[01:48] *** quotable6 joined
[01:54] *** frost joined
[02:48] *** nativecallable6 joined
[03:48] *** evalable6 left
[03:48] *** linkable6 left
[03:49] *** evalable6 joined
[03:50] *** linkable6 joined
[03:53] *** sourceable6 joined
[04:53] *** greppable6 left
[04:53] *** shareable6 left
[04:53] *** committable6 left
[04:53] *** nativecallable6 left
[04:53] *** unicodable6 left
[04:53] *** coverable6 left
[04:53] *** reportable6 left
[04:53] *** quotable6 left
[04:53] *** evalable6 left
[04:53] *** linkable6 left
[04:53] *** benchable6 left
[04:53] *** statisfiable6 left
[04:53] *** bisectable6 left
[04:53] *** releasable6 left
[04:53] *** tellable6 left
[04:53] *** bloatable6 left
[04:53] *** notable6 left
[04:54] *** unicodable6 joined
[04:54] *** reportable6 joined
[04:54] *** releasable6 joined
[04:54] *** coverable6 joined
[04:54] *** benchable6 joined
[04:54] *** evalable6 joined
[04:55] *** bisectable6 joined
[04:55] *** committable6 joined
[04:55] *** greppable6 joined
[04:55] *** quotable6 joined
[04:55] *** notable6 joined
[04:56] *** nativecallable6 joined
[04:56] *** linkable6 joined
[04:56] *** tellable6 joined
[04:56] *** shareable6 joined
[04:56] *** bloatable6 joined
[04:56] *** statisfiable6 joined
[05:56] *** reportable6 left
[05:56] *** sourceable6 left
[05:56] *** releasable6 left
[05:56] *** committable6 left
[05:56] *** unicodable6 left
[05:56] *** notable6 left
[05:56] *** bisectable6 left
[05:56] *** bloatable6 left
[05:56] *** nativecallable6 left
[05:56] *** tellable6 left
[05:56] *** shareable6 left
[05:56] *** benchable6 left
[05:56] *** quotable6 left
[05:56] *** coverable6 left
[05:56] *** greppable6 left
[05:56] *** evalable6 left
[05:56] *** statisfiable6 left
[05:56] *** linkable6 left
[05:57] *** releasable6 joined
[05:57] *** unicodable6 joined
[05:57] *** shareable6 joined
[05:57] *** notable6 joined
[05:58] *** quotable6 joined
[05:58] *** committable6 joined
[05:58] *** bisectable6 joined
[05:58] *** greppable6 joined
[05:58] *** benchable6 joined
[05:58] *** evalable6 joined
[05:59] *** nativecallable6 joined
[05:59] *** linkable6 joined
[05:59] *** bloatable6 joined
[05:59] *** statisfiable6 joined
[05:59] *** sourceable6 joined
[05:59] *** reportable6 joined
[05:59] *** tellable6 joined
[05:59] *** coverable6 joined
[06:06] *** reportable6 left
[06:08] *** reportable6 joined
[07:21] *** [Coke] joined
[07:23] *** sena_kun joined
[07:25] *** [Coke]_ left
[07:26] *** [Tux] left
[07:33] *** [Tux] joined
[08:29] *** Kaiepi left
[09:29] *** evalable6 left
[09:29] *** linkable6 left
[09:31] *** linkable6 joined
[09:32] *** evalable6 joined
[10:53] *** Kaiepi joined
[11:06] *** dogbert2 joined
[11:10] *** dogbert17 left
[11:15] *** frost left
[11:19] *** frost joined
[11:50] *** dogbert2 left
[11:53] *** dogbert11 joined
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:57] *** Xliff joined
[13:53] *** vrurg_ joined
[13:53] *** vrurg left
[14:21] *** dogbert17 joined
[14:21] *** dogbert11 left
[15:26] *** notable6 left
[15:26] *** greppable6 left
[15:26] *** statisfiable6 left
[15:26] *** reportable6 left
[15:26] *** evalable6 left
[15:26] *** quotable6 left
[15:26] *** linkable6 left
[15:26] *** shareable6 left
[15:26] *** coverable6 left
[15:26] *** committable6 left
[15:26] *** tellable6 left
[15:26] *** nativecallable6 left
[15:26] *** bloatable6 left
[15:26] *** benchable6 left
[15:26] *** sourceable6 left
[15:26] *** releasable6 left
[15:26] *** unicodable6 left
[15:26] *** bisectable6 left
[15:27] *** tellable6 joined
[15:27] *** shareable6 joined
[15:27] *** reportable6 joined
[15:27] *** quotable6 joined
[15:27] *** notable6 joined
[15:27] *** coverable6 joined
[15:27] *** bisectable6 joined
[15:27] *** evalable6 joined
[15:27] *** linkable6 joined
[15:27] *** bloatable6 joined
[15:28] *** sourceable6 joined
[15:28] *** greppable6 joined
[15:28] *** committable6 joined
[15:28] *** releasable6 joined
[15:28] *** benchable6 joined
[15:28] *** nativecallable6 joined
[15:28] *** statisfiable6 joined
[15:29] *** unicodable6 joined
[15:38] *** frost left
[15:44] *** Xliff left
[16:33] *** dogbert11 joined
[16:35] *** dogbert17 left
[16:50] *** dogbert11 left
[16:52] *** dogbert11 joined
[17:02] <Geth> ¦ rakudo/lizmat-died-naturally: 072d961bb3 | (Elizabeth Mattijsen)++ | src/main.nqp

[17:02] <Geth> ¦ rakudo/lizmat-died-naturally: Set $*DIED-NATURALLY if exiting program without exception

[17:02] <Geth> ¦ rakudo/lizmat-died-naturally: 

[17:02] <Geth> ¦ rakudo/lizmat-died-naturally: Inspired by https://stackoverflow.com/questions/73040525/how-to-know-in-a-end-block-if-the-programm-died

[17:02] <Geth> ¦ rakudo/lizmat-died-naturally: 

[17:02] <Geth> ¦ rakudo/lizmat-died-naturally: This minimal change allows an END block to do special actions if the

[17:02] <Geth> ¦ rakudo/lizmat-died-naturally: program exited because of an exception:

[17:02] <Geth> ¦ rakudo/lizmat-died-naturally: 

[17:02] <Geth> ¦ rakudo/lizmat-died-naturally: <…commit message has 5 more lines…>

[17:02] <Geth> ¦ rakudo/lizmat-died-naturally: review: https://github.com/rakudo/rakudo/commit/072d961bb3

[17:02] <Geth> ¦ rakudo: lizmat++ created pull request #4988: Set $*DIED-NATURALLY if exiting program without exception

[17:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4988

[17:05] *** dogbert17 joined
[17:05] *** dogbert11 left
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[19:02] <gfldex> lizmat: does `exit(1)` inside an END-phaser do the right thing?

[19:03] <lizmat> I believe so?

[19:04] <lizmat> m: END { exit(1) }

[19:04] <camelia> rakudo-moar 7ec4b10d7: ( no output )

[19:04] <lizmat> m: END { say "last END" }; END { exit(1) }

[19:04] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «last END␤»

[19:04] <lizmat> m: END { say "not last END" }; END { exit(1) }; END { say "last end" }

[19:04] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «last end␤not last END␤»

[19:04] <lizmat> hmmm

[19:05] <lizmat> ah, I remember...  if you're basically inside the exit handler, "exit" becomes a noop ?

[19:05] <lizmat> m: END { say "not last END" }; END { exit(1); say "after exit" }; END { say "last end" }

[19:05] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «last end␤not last END␤»

[19:05] <lizmat> but only for the END block in which you exit

[19:06] <lizmat> m: END { say "last END" }; END { exit(1); say "after exit" }; END { say "not last end" }

[19:06] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «not last end␤last END␤»

[19:06] <lizmat> and in reverse order

[19:06] <lizmat> m: END { say "last END" }; END { say "before exit"; exit(1); say "after exit" }; END { say "not last end" }

[19:06] <camelia> rakudo-moar 7ec4b10d7: OUTPUT: «not last end␤before exit␤last END␤»

[19:08] <gfldex> From a sysadmin standpoint I don't like END at all. It is very tempting to believe the core will be run. And then some native lib segfaults or you hit an OOM-condition.

[19:08] <lizmat> well, there's that of course...  I guess at some point we could think about catching segfaults in a meaningful way

[19:09] *** linkable6 left
[19:09] *** evalable6 left
[19:09] <lizmat> and aren't OOM's handled by a "kill" first?  That should run END, shouldn't it ?

[19:09] *** linkable6 joined
[19:09] <lizmat> unless it's a kill -9 f course

[19:09] *** evalable6 joined
[19:11] <gfldex> And that's why setting the exit-code is important. We typically deal with abnormal termination with a shell wrapper. That `exit`  may not do what you expect it to, is at least an ENODOC.

[19:11] *** vrurg_ left
[19:13] *** vrurg joined
[19:18] <gfldex> m: my atomicint $i; my @proms; for ^20 { @proms.push: start { exit ++⚛$i; } }; await @proms;

[19:18] <camelia> rakudo-moar 7ec4b10d7: ( no output )

[19:18] <gfldex> ^^^ poor way to implement a RNG :)

[19:18] <lizmat> gfldex: the first thread issuing exit() determines the final exit value

[19:19] <lizmat> any other exit values are ignored

[19:19] <gfldex> because of the state container in exit

[19:19] <lizmat> that seemed to be the most sensible way of dealing with multiple threads doing an exit()

[19:19] <lizmat> rught

[19:19] <lizmat> *right

[19:25] <gfldex> ENODOC issed as #4097

[19:28] *** sena_kun left
[19:29] *** sena_kun joined
[19:36] *** discord-raku-bot left
[19:36] *** discord-raku-bot joined
[19:37] *** discord-raku-bot left
[19:37] *** discord-raku-bot joined
[20:58] *** sena_kun left
[21:58] *** evalable6 left
[21:58] *** linkable6 left
[21:59] *** linkable6 joined
[22:01] *** evalable6 joined
[23:01] *** linkable6 left
[23:01] *** evalable6 left
[23:03] *** evalable6 joined
[23:04] *** linkable6 joined
