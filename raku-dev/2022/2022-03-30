[00:05] *** [Coke]_ left
[00:07] *** [Coke] joined
[01:28] *** ShaneC left
[01:37] <japhb> lizmat, nine: Was looking at the code for AT-POS in a few places, and realized some of them have native variants for int and some have uint.  Now that int and uint are actually different, do we need to have *both* int and uint variants of AT-POS (and BIND-POS and such) in order to get the performance boost of calling with native positions?

[07:13] <lizmat> Files=1352, Tests=117129, 292 wallclock secs (35.43 usr  9.40 sys + 4104.12 cusr 305.63 csys = 4454.58 CPU)

[07:14] <lizmat> japhb: I'm not sure actually: at one point I even removed native candidates, as they were significantly *slower* than then non-native candidates, even when called with a native

[09:12] <nine> japhb: in the long term, yes, absolutely. However there are other issues that as lizmat mentioned may actually harm performance or at least prevent us from gaining anything.

[10:01] *** sena_kun left
[10:02] *** sena_kun joined
[10:57] *** Altai-man joined
[12:02] <Geth> ¦ rakudo: 0420a0cf33 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/Repository/Spec.pm6

[12:02] <Geth> ¦ rakudo: Re-imagine CompUnit::Repository::Spec.from-string

[12:02] <Geth> ¦ rakudo: 

[12:02] <Geth> ¦ rakudo: This was using regular expressions and meta ops, for code that is

[12:02] <Geth> ¦ rakudo: really pretty simple.  Since this is being called multiple times

[12:02] <Geth> ¦ rakudo: for *every* pre-compilation, it seems to make sense to streamline

[12:02] <Geth> ¦ rakudo: this code using nqp::ops and without regexes and meta-ops.

[12:02] <Geth> ¦ rakudo: 

[12:02] <Geth> ¦ rakudo: Underlying reason was that another upcoming fix broke because

[12:02] <Geth> ¦ rakudo: meta-ops were being used *before* the Rakudo::Metaops mapper had

[12:02] <Geth> ¦ rakudo: been initialized.

[12:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0420a0cf33

[12:05] <nine> lizmat: wouldn't plain Raku code have been fast enough?

[12:06] <lizmat> well, I wanted to keep to the metal as much as possible, as apparently that code is being called *before* the entire mainline of the setting has been run

[12:07] <nine> I wouldn't mind balancing that with maintainability

[12:12] <lizmat> have you looked at the code ?

[12:14] <nine> yes

[12:16] <nine> I know, to you nqp ops are probably more familiar by now than Dutch. But I still translate nqp::islt_i(++$i,$nr-options) to ++$i < $nr-options in my head :D

[12:17] <lizmat> ok, noted  :-)

[12:17] <lizmat> anyways, getting closer to fixing #1920

[12:18] <lizmat> slowly...  :-(

[12:31] <Geth> ¦ rakudo: dbee70ad33 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/Repository/Spec.pm6

[12:31] <Geth> ¦ rakudo: Use more readable test, nine++

[12:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dbee70ad33

[12:31] <Geth> ¦ rakudo: e95753499f | (Elizabeth Mattijsen)++ | src/core.c/Env.pm6

[12:31] <Geth> ¦ rakudo: Make *CWD initialization non-lazy

[12:31] <Geth> ¦ rakudo: 

[12:31] <Geth> ¦ rakudo: There is some interaction between $*REPO and $*CWD initialization

[12:31] <Geth> ¦ rakudo: that causes https://github.com/rakudo/rakudo/issues/1920 .  Since

[12:31] <Geth> ¦ rakudo: $*CWD is needed for anything related to IO::Path creation, and

[12:31] <Geth> ¦ rakudo: $*REPO initialization creates IO::Path objects, and since $*REPO

[12:31] <Geth> ¦ rakudo: is used *whenever* a module is used or required, it felt that making

[12:31] <Geth> ¦ rakudo: $*CWD non-lazy to be a good trade-off.

[12:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e95753499f

[12:57] <Geth> ¦ rakudo: 4c4d37928d | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/Repository/Spec.pm6

[12:57] <Geth> ¦ rakudo: Revert CompUnit::Repository::Spec.from-string re-imagination

[12:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4c4d37928d

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: 64eee9f621 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/Repository/Spec.pm6

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: Re-imagine CompUnit::Repository::Spec.from-string

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: 

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: This was using regular expressions and meta ops, for code that is

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: really pretty simple (apart from the option partsing).  Since this

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: is being called multiple times for *every* pre-compilation, it seems

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: to make sense to streamline this code and with fewer regexes and

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: no meta-ops.

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: 

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: Underlying reason was that another upcoming fix broke because

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: meta-ops were being used *before* the Rakudo::Metaops mapper had

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: been initialized.

[13:49] <Geth> ¦ rakudo/CUR-spec-reimagined: review: https://github.com/rakudo/rakudo/commit/64eee9f621

[13:49] <Geth> ¦ rakudo: lizmat++ created pull request #4837: Re-imagine CompUnit::Repository::Spec.from-string

[13:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4837

[13:55] <Geth> ¦ rakudo: 2511c219cd | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[13:55] <Geth> ¦ rakudo: Add :precompile = True flag to CURI.install (#4826)

[13:55] <Geth> ¦ rakudo: 

[13:55] <Geth> ¦ rakudo: The idea behind this is to allow modules to just be installed and

[13:55] <Geth> ¦ rakudo: have the runtime decide when it should (re-)precompile any compilation

[13:55] <Geth> ¦ rakudo: units that were not precompiled yet.  This would e.g. allow the

[13:55] <Geth> ¦ rakudo: DateTime::TimeZone distribution to be installed within a second,

[13:55] <Geth> ¦ rakudo: rather than on 4+ minutes.  And only precompile those timezones that

[13:55] <Geth> ¦ rakudo: are actually used at runtime.

[13:55] <Geth> ¦ rakudo: 

[13:55] <Geth> ¦ rakudo: Also add the --/precompile flag to install-dist.raku

[13:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2511c219cd

[13:55] <Geth> ¦ rakudo: 2da9eb22b8 | (Jonathan Worthington)++ (committed using GitHub Web editor) | 2 files

[13:55] <Geth> ¦ rakudo: Improve error when `make` encounters non-Match $/ (#4834)

[13:55] <Geth> ¦ rakudo: 

[13:55] <Geth> ¦ rakudo: Since `make` tries to do a low-level bind directly into $/, if it

[13:55] <Geth> ¦ rakudo: instead sees a different object, the error isn't too informative.

[13:55] <Geth> ¦ rakudo: 

[13:55] <Geth> ¦ rakudo: This most typically comes up when folks do re-parsing in action

[13:55] <Geth> ¦ rakudo: methods, give the parameter normally called `$/` another name, and

[13:55] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[13:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2da9eb22b8

[14:37] *** rypervenche joined
[14:55] *** Altai-man left
[15:05] <nine> Hm...I'm starting to see Inline::Perl5 build failures: https://build.opensuse.org/package/live_build_log/home:niner9:rakudo-git/perl6-Inline-Perl5/15.4/x86_64

[15:06] <nine> First failed build 16:07:41 today

[15:19] <[Coke]> throwing in Match - Jonathan's fix to improve error messages in Match?

[15:28] *** vrurg_ joined
[15:31] *** vrurg left
[15:51] <lizmat> nine: I guess something's not a Match object, then

[16:25] <nine> I guess $/: method statement_control(Mu $/) { my $optree = $*P5CODE; $*W.add_object($optree); make QAST::Op.new(

[16:40] <lizmat> fwiw, confirmed it is jnthn's PR I merged that breaks installing Inline::Perl5

[16:41] <lizmat> nine: shall I revert ?

[16:55] <Geth> ¦ rakudo/CUR-spec-reimagined: 08c70bac6e | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/Repository/Spec.pm6

[16:55] <Geth> ¦ rakudo/CUR-spec-reimagined: Generalize what we allow in a value

[16:55] <Geth> ¦ rakudo/CUR-spec-reimagined: review: https://github.com/rakudo/rakudo/commit/08c70bac6e

[18:11] <Geth> ¦ rakudo: ee0715396f | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/CompUnit/Repository/Spec.pm6

[18:11] <Geth> ¦ rakudo: Re-imagine CompUnit::Repository::Spec.from-string (#4837)

[18:11] <Geth> ¦ rakudo: 

[18:11] <Geth> ¦ rakudo: This was using regular expressions and meta ops, for code that is

[18:11] <Geth> ¦ rakudo: really pretty simple (apart from the option parsing).  Since this

[18:11] <Geth> ¦ rakudo: is being called multiple times for *every* pre-compilation, it seems

[18:11] <Geth> ¦ rakudo: to make sense to streamline this code and with fewer regexes and

[18:11] <Geth> ¦ rakudo: no meta-ops.

[18:11] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[18:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ee0715396f

[19:36] <Geth> ¦ rakudo: e7143e00cd | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.pm6

[19:36] <Geth> ¦ rakudo: Don't initialize PROCESS:: variables more than once

[19:36] <Geth> ¦ rakudo: 

[19:36] <Geth> ¦ rakudo: Cases such as described in issue #1920 would attempt to initialize

[19:36] <Geth> ¦ rakudo: dynamic variables more than once in a process.  Even though these

[19:36] <Geth> ¦ rakudo: would be serialized, there's no point in doing the same again.

[19:36] <Geth> ¦ rakudo: 

[19:36] <Geth> ¦ rakudo: So now check if the PROCESS:: variable has been set already, and

[19:36] <Geth> ¦ rakudo: <…commit message has 8 more lines…>

[19:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e7143e00cd

[20:05] *** sena_kun left
[20:06] *** sena_kun joined
[20:10] <Geth> ¦ rakudo: c08d2ee9f8 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[20:10] <Geth> ¦ rakudo: Fix CU:RepositoryRegistry.resolve-unknown-repos

[20:10] <Geth> ¦ rakudo: 

[20:10] <Geth> ¦ rakudo: In as much that this method *can* be called with $*W being a Failure

[20:10] <Geth> ¦ rakudo: on which can not run a .find_single_symbol.  So get the value for

[20:10] <Geth> ¦ rakudo: $*W once, and adjust the merge-symbols logic accordingly.

[20:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c08d2ee9f8

[21:20] *** discord-raku-bot left
[21:21] *** discord-raku-bot joined
[23:23] *** discord-raku-bot left
[23:23] *** discord-raku-bot joined
