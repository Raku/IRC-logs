[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[01:18] *** evalable6 left
[01:18] *** linkable6 left
[01:18] *** linkable6 joined
[01:20] *** evalable6 joined
[01:49] *** epony left
[01:50] *** epony joined
[01:55] *** Kaipei joined
[03:04] *** nebuchadnezzar left
[03:53] *** epony left
[03:54] *** epony joined
[04:54] *** linkable6 left
[04:54] *** coverable6 left
[04:54] *** tellable6 left
[04:54] *** evalable6 left
[04:54] *** notable6 left
[04:54] *** nativecallable6 left
[04:54] *** statisfiable6 left
[04:54] *** greppable6 left
[04:54] *** quotable6 left
[04:54] *** benchable6 left
[04:54] *** shareable6 left
[04:54] *** bisectable6 left
[04:54] *** reportable6 left
[04:54] *** releasable6 left
[04:54] *** unicodable6 left
[04:54] *** committable6 left
[04:54] *** squashable6 left
[04:54] *** sourceable6 left
[04:54] *** bloatable6 left
[04:55] *** evalable6 joined
[04:55] *** squashable6 joined
[04:55] *** nativecallable6 joined
[04:55] *** releasable6 joined
[04:55] *** tellable6 joined
[04:55] *** notable6 joined
[04:55] *** benchable6 joined
[04:55] *** statisfiable6 joined
[04:55] *** reportable6 joined
[04:56] *** unicodable6 joined
[04:56] *** shareable6 joined
[04:56] *** sourceable6 joined
[04:56] *** greppable6 joined
[04:57] *** coverable6 joined
[04:57] *** committable6 joined
[04:57] *** bisectable6 joined
[04:57] *** quotable6 joined
[04:57] *** linkable6 joined
[04:57] *** bloatable6 joined
[05:44] *** japhb left
[05:45] *** japhb joined
[05:57] *** epony left
[05:59] *** epony joined
[06:05] *** epony left
[06:06] *** reportable6 left
[06:07] *** reportable6 joined
[06:17] *** japhb left
[06:22] *** japhb joined
[08:16] *** epony joined
[08:47] *** Kaipii joined
[08:51] *** Kaipei left
[09:05] *** discord-raku-bot left
[09:05] *** discord-raku-bot joined
[09:18] *** discord-raku-bot left
[09:19] *** discord-raku-bot joined
[09:27] *** Kaipii is now known as Kaiepi

[09:35] *** frost24 joined
[10:08] *** frost24 left
[10:20] *** epony left
[10:22] *** epony joined
[11:06] *** linkable6 left
[11:07] *** linkable6 joined
[11:13] *** Kaiepi left
[11:15] *** Kaiepi joined
[11:30] *** frost53 joined
[11:56] *** frost53 left
[11:57] *** frost70 joined
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:24] *** epony left
[12:26] *** epony joined
[12:27] *** frost70 left
[13:10] <Geth> ¦ rakudo/rakuast: 4 commits pushed by (Stefan Seifert)++

[13:10] <Geth> ¦ rakudo/rakuast: 533fe92a9d | RakuAST: Have StatementList evaluate to the value of the last statement

[13:10] <Geth> ¦ rakudo/rakuast: d2d731d659 | Declare array in bootstrap for easier access by RakuAST

[13:10] <Geth> ¦ rakudo/rakuast: 79cd2a78d4 | RakuAST: Extend BlockThunk to allow for thunking arbitrary expressions.

[13:10] <Geth> ¦ rakudo/rakuast: 971763f2b9 | RakuAST: support custom array types on attributes

[13:10] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/compare/51762f5d86b3...971763f2b938

[13:16] <Geth> ¦ rakudo/rakuast: 31f28de6df | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[13:16] <Geth> ¦ rakudo/rakuast: RakuAST: Support natively typed arrays in attributes

[13:16] <Geth> ¦ rakudo/rakuast: 

[13:16] <Geth> ¦ rakudo/rakuast: Natively typed arrays need to parameterize array instead of Array

[13:16] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/31f28de6df

[13:22] <Geth> ¦ rakudo/rakuast: e5cfb41d22 | (Stefan Seifert)++ | 2 files

[13:22] <Geth> ¦ rakudo/rakuast: RakuAST: Create optimized code for array slot assignment

[13:22] <Geth> ¦ rakudo/rakuast: 

[13:22] <Geth> ¦ rakudo/rakuast: When assigning into an array slot, we can directly call

[13:22] <Geth> ¦ rakudo/rakuast: postcircumfix:<[ ]> with an additional argument.

[13:22] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/e5cfb41d22

[13:25] *** [Coke] joined
[13:49] *** [Tux] left
[13:52] <Kaiepi> i've been chipping away at shaped arrays' various STORE multis for a while, but i don't get something to do with its Iterable:D candidates

[13:53] <Kaiepi> it's specified that it's OK to underfill an array with an Iterable's Iterator, but not produce too many elements https://github.com/Raku/roast/blob/master/S09-multidim/assign.t#L21-L29

[13:55] <Kaiepi> why? it feels inconsistent

[13:57] <vrurg> Perhaps because holes are ok, but lost elements are not?

[14:03] <Kaiepi> how are lost elements not though?

[14:03] *** [Tux] joined
[14:03] <vrurg> If you overfill a row surplus elements are getting lost, right?

[14:04] <nine> I.e. it's ok to leave parts of a multi dimensional array uninitialized (same as when you don't give it an initializer but instead just assign element by element after construction). But you must not have the initializer write data where there is not place for it.

[14:08] <Kaiepi> attempting to write to an invalid offset is how the error is being generated at the moment

[14:08] <Kaiepi> the elements would be lost, yeah, similarly to taking the .head(...) of the rhs

[14:23] <vrurg> Sounds like the principle of early error detection to me. The sooner a problem is detected and reported the easier it is to diagnose the cause.

[14:28] <[Tux]> Rakudo v2022.07-76-gef835615f (v6.d) on MoarVM 2022.07-18-gd22223381

[14:28] <[Tux]> csv-test-xs-20      0.411 -  0.422

[14:28] <[Tux]> csv-ip5xs           0.776 -  0.784

[14:28] <[Tux]> test-t --race       0.806 -  0.809

[14:28] <[Tux]> test-t              1.382 -  1.447

[14:28] <[Tux]> csv-parser          3.457 -  3.700

[14:28] <[Tux]> csv-ip5xs-20        5.074 -  5.378

[14:28] <[Tux]> test                6.373 -  6.623

[14:28] <[Tux]> test-t-20 --race    6.457 -  7.017

[14:28] <[Tux]> test-t-20          20.247 - 20.984

[14:29] *** epony left
[14:30] *** epony joined
[15:30] *** linkable6 left
[15:30] *** evalable6 left
[15:30] *** linkable6 joined
[15:33] *** evalable6 joined
[15:35] *** [Coke] left
[15:38] *** [Coke] joined
[16:21] *** Kaiepi left
[16:33] *** epony left
[16:34] *** epony joined
[16:39] *** [Coke]_ joined
[16:42] *** [Coke] left
[17:15] *** Kaiepi joined
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:21] *** epony left
[19:42] <Geth> ¦ rakudo: usev6++ created pull request #5088: [JVM] Fix defaults for typed optional @/% params

[19:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5088

[20:10] *** [Coke] joined
[20:13] *** [Coke]_ left
[20:33] <Geth> ¦ roast/master: 5 commits pushed by (Ben Davies)++, (Vadim Belman)++

[20:33] <Geth> ¦ roast/master: 3d8314715a | Typecheck optional @/% parameters' defaults

[20:33] <Geth> ¦ roast/master: 4f2ff3070f | Typecheck optional @/% parameter defaults more directly

[20:33] <Geth> ¦ roast/master: 752fb4c6e3 | Don't let errors in implicit returns mess with typechecks either

[20:33] <Geth> ¦ roast/master: f04eca8b6f | Check for definiteness of optional @/% defaults too

[20:33] <Geth> ¦ roast/master: 05eb9f12d9 | Merge pull request #773 from Kaiepi/optional-collections

[20:33] <Geth> ¦ roast/master: review: https://github.com/Raku/roast/compare/1e784bfed6e9...05eb9f12d916

[21:22] *** linkable6 left
[21:22] *** evalable6 left
[21:23] *** evalable6 joined
[21:23] *** linkable6 joined
