[11:28] <lizmat> meh, the logger complained about "connection timed out" and did not recover :-(   guess I'll need to do some manual merging at some point

[11:37] <Geth> ¦ nqp: c20c2ffb7e | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[11:37] <Geth> ¦ nqp: Bump MoarVM for the latest fixes

[11:37] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/c20c2ffb7e

[11:51] *** camelia left
[11:53] <Skarsnik> lizmat, I had a quick look for https://github.com/rakudo/rakudo/pull/1137 there does not seem to have the needed socketbind op in moarvm so I would need to keep the PR similar to what it is (with a pr in nqp/moar/rakudo) and I don't really have much time to do that ~~

[11:53] <Geth> ¦ rakudo: 3aa23bf9bc | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[11:53] <Geth> ¦ rakudo: Bump NQP to get the latest MoarVM fixes

[11:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3aa23bf9bc

[11:54] <lizmat> Skarsnik: so I should leave the PR open?  Or should I close it for now, until you have more time / someone else kicks in?  :-)

[11:55] *** camelia joined
[11:55] <Skarsnik> Probably wait to see if Kaiepi reply

[11:56] <lizmat> oki  :-)  I can do that :-)

[12:21] *** camelia left
[12:22] *** camelia joined
[12:36] <Kaiepi> it pains me to say, but i'm very unwell, and will be until march at the soonest. contributing is very difficult at best for me between now and an unknown point in time, basically

[12:38] <sena_kun> Kaiepi, sad to hear that, please take care.

[12:44] *** camelia left
[12:44] *** camelia joined
[12:44] <lizmat> Kaiepi: get well, anything else is *not* important

[12:44] <lizmat> (well, in the context of #rakulang I'd say :-)

[13:12] *** nine_ joined
[13:12] *** camelia left
[13:13] *** nine left
[13:20] *** camelia joined
[13:20] *** camelia left
[13:21] *** camelia joined
[13:31] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4703: Use simpler code for correct `.length` suggestions test

[13:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4703

[13:35] *** carlmasak joined
[14:04] *** carlmasak left
[14:50] *** frost left
[14:52] *** vrurg left
[14:56] *** vrurg joined
[15:30] <Geth> ¦ rakudo: 9310799cb4 | MasterDuke17++ (committed using GitHub Web editor) | t/05-messages/01-errors.t

[15:30] <Geth> ¦ rakudo: Use simpler code for correct `.length` suggestions test (#4703)

[15:30] <Geth> ¦ rakudo: 

[15:30] <Geth> ¦ rakudo: The existing code causes tons of `WARNING: unhandled Failure detected in

[15:30] <Geth> ¦ rakudo: DESTROY`.

[15:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9310799cb4

[15:31] *** linkable6 left
[15:31] *** linkable6 joined
[15:48] <Geth> ¦ rakudo: 6a8fa2f410 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | 5 files

[15:48] <Geth> ¦ rakudo: Remove RESTRICTED setting (#3965)

[15:48] <Geth> ¦ rakudo: 

[15:48] <Geth> ¦ rakudo: RESTRICTED settings looks as if it is a security feature, but this

[15:48] <Geth> ¦ rakudo: issue cannot be approached with a blacklist. For example, the things

[15:48] <Geth> ¦ rakudo: that it blacklists are still available through method calls and

[15:48] <Geth> ¦ rakudo: nativecall, and there is just no way to plug all the possible

[15:48] <Geth> ¦ rakudo: holes. Moreover, those who actually need to run code securely will

[15:48] <Geth> ¦ rakudo: <…commit message has 10 more lines…>

[15:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6a8fa2f410

[15:49] *** linkable6 left
[15:52] *** linkable6 joined
[15:52] <nine_> lizmat++ # working through open PRs

[16:18] <MasterDuke> nine_: with this change https://gist.github.com/MasterDuke17/cf21dc853d9aac1206821275258c802e i no longer get the WARNINGs when using the original code in the test

[16:20] <nine_> MasterDuke: I like that! There are a few more places that will have to pass the type

[16:20] <MasterDuke> yeah, that was just a quick test

[16:20] <MasterDuke> but, `say 1.VAR.foo` now doesn't give the new containerization message

[16:21] <MasterDuke> oh, i need it in a variable

[16:22] <MasterDuke> ah, it mentions a container, but doesn't give all the extra suggestions

[16:27] <MasterDuke> nope, i was testing incorrectly, those still seem to work

[16:32] <MasterDuke> nqp::what($.invocant) also seems to work, and that doen't require adding a new member

[16:47] <Geth> ¦ rakudo: 36cee696fe | Altai-man++ (committed using GitHub Web editor) | lib/Pod/To/Text.rakumod

[16:47] <Geth> ¦ rakudo: Fix warning in Pod::To::Text signature processing (#3528)

[16:47] <Geth> ¦ rakudo: 

[16:47] <Geth> ¦ rakudo: Do not assume the last argument of signature always has a name,

[16:47] <Geth> ¦ rakudo: as e.g. `|` in proto signatures does not have it.

[16:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/36cee696fe

[16:48] *** linkable6 left
[16:49] *** linkable6 joined
[17:09] <[Tux]> Rakudo v2021.12-83-g36cee696f (v6.d) on MoarVM 2021.12-28-gf12bc4228

[17:09] <[Tux]> csv-test-xs-20      0.403 -  0.407

[17:09] <[Tux]> csv-ip5xs           0.875 -  0.888

[17:09] <[Tux]> test-t --race       0.978 -  1.016

[17:09] <[Tux]> test-t              1.673 -  1.805

[17:09] <[Tux]> csv-parser          4.177 -  4.359

[17:09] <[Tux]> csv-ip5xs-20        5.431 -  5.536

[17:09] <[Tux]> test                7.172 -  7.314

[17:09] <[Tux]> test-t-20 --race    7.444 -  7.459

[17:09] <[Tux]> test-t-20          24.186 - 24.631

[18:18] <Geth> ¦ rakudo: 535e015111 | (Elizabeth Mattijsen)++ | src/Perl6/Grammar.nqp

[18:18] <Geth> ¦ rakudo: Re-imagine PR #4649

[18:18] <Geth> ¦ rakudo: 

[18:18] <Geth> ¦ rakudo: Using jnthn's directions.  This code:

[18:18] <Geth> ¦ rakudo: 

[18:18] <Geth> ¦ rakudo:     $ raku -e 'role A { }; class B does A{ ... }'

[18:18] <gfldex> Does [eq] short circuit?

[18:18] <Geth> ¦ rakudo: 

[18:18] <Geth> ¦ rakudo: Now throws:

[18:18] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/535e015111

[18:19] *** linkable6 left
[18:20] *** linkable6 joined
[18:36] <sena_kun> gfldex, nope, and it probably shouldn't be assumed so

[18:38] <sena_kun> but you can do so try [eq] instead

[18:38] <sena_kun> m: so try [eq] True, False, die "hehe"

[18:38] <camelia> rakudo-moar 535e01511: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "so " in expression "so try [eq] True, False, die \"hehe\"" in sink context (line 1)␤»

[18:38] <sena_kun> m: say so try [eq] True, False, die "hehe"

[18:38] <camelia> rakudo-moar 535e01511: OUTPUT: «False␤»

[18:38] <sena_kun> m: say so try [eq] True, True, True

[18:38] <camelia> rakudo-moar 535e01511: OUTPUT: «True␤»

[18:39] <gfldex> m: [eq] 1,1,1,1,1,1,1 for ^100000; say now - BEGIN now;

[18:39] <camelia> rakudo-moar 535e01511: OUTPUT: «0.557068006␤»

[18:39] <gfldex> m: [eq] 1,2,1,1,1,1,1 for ^100000; say now - BEGIN now;

[18:39] <camelia> rakudo-moar 535e01511: OUTPUT: «0.247998695␤»

[18:40] <gfldex> &infix:<eq> is pure, so it can't hurt to short circuit.

[18:41] <gfldex> I found it in S03-metaops/reduce.t .

[18:42] <gfldex> That's an ENODOC tho.

[18:49] <sena_kun> that's an interesting case, but I suspect it's related to runtime optimizations interpreting the statistics rather than the construction short circuiting

[18:50] <sena_kun> the [&op] construction is pretty generic, so I'm not sure it should make a lot of assumptions about what's the op, is it pure, if it's result is a boolean etc.

[19:02] *** discord-raku-bot left
[19:03] *** discord-raku-bot joined
[19:31] <lizmat> .tell Xliff I would put Debian on a 2021 MacMini  :-)

[19:31] <tellable6> lizmat, I'll pass your message to Xliff

[20:01] *** reportable6 joined
[21:15] *** evalable6 left
[21:15] *** linkable6 left
[21:15] *** evalable6 joined
[21:16] *** linkable6 joined
[21:48] <gfldex> m: ^10 ==> tail(20) ==> say();

[21:49] <camelia> rakudo-moar 535e01511: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    tail used at line 1. Did you mean 'fail'?␤␤»

[21:57] <gfldex> sub hyper is also missing.

[22:15] <moon-child> m: say all (0, 0) == 0

[22:15] <camelia> rakudo-moar 535e01511: OUTPUT: «all(False)␤»

[22:15] <moon-child> ^^ came up recently.  Obviously supposed to be all(0, 0) == 0.  But (0, 0) == 0 is always false; perhaps should have a warning?

[22:20] <Voldenet> m: say say(0, 0) == False; say say (0, 0) == False

[22:20] <camelia> rakudo-moar 535e01511: OUTPUT: «00␤False␤False␤True␤»

[22:20] <Voldenet> happy debugging :)

[22:54] <gfldex> I always use the method form to avoid that problem.

[23:06] <Geth> ¦ rakudo/master: 4 commits pushed by (Jonathan Worthington)++, (Vadim Belman)++

[23:06] <Geth> ¦ rakudo/master: 91e3c983d3 | Make .WHY on role group delegate to default role

[23:06] <Geth> ¦ rakudo/master: d3e74427b4 | Finalize delegation of .WHY on role group

[23:06] <Geth> ¦ rakudo/master: 8f989d1a2e | Make $*PRECEDING_DECL lexically scoped for signature

[23:06] <Geth> ¦ rakudo/master: f77fda7d13 | Merge pull request #3549 from rakudo/WHY-on-role-group

[23:06] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/535e015111e0...f77fda7d131d

[23:06] <Geth> ¦ roast: 642644a5bb | (Vadim Belman)++ | 5 files

[23:06] <Geth> ¦ roast: Make sure role group delegates .WHY to its default candidate

[23:06] <Geth> ¦ roast: 

[23:06] <Geth> ¦ roast: This required to remove tests which were testing for `Role.WHY`

[23:06] <Geth> ¦ roast: returning `Nil`. But as was suggested in this comment:

[23:06] <Geth> ¦ roast: 

[23:06] <Geth> ¦ roast: https://github.com/rakudo/rakudo/pull/3549#issuecomment-687587580

[23:06] <Geth> ¦ roast: 

[23:06] <Geth> ¦ roast: <…commit message has 10 more lines…>

[23:06] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/642644a5bb

[23:06] <Geth> ¦ roast: ab7ca0ca46 | (Vadim Belman)++ | S26-documentation/wacky.t

[23:06] <Geth> ¦ roast: Unfudge a TODO

[23:06] <Geth> ¦ roast: 

[23:06] <Geth> ¦ roast: It is passing since rakudo/rakudo#3549

[23:06] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ab7ca0ca46

[23:06] <Geth> ¦ roast: 250a246ded | (Vadim Belman)++ (committed using GitHub Web editor) | 6 files

[23:06] <Geth> ¦ roast: Merge pull request #783 from Raku/WHY-on-role-group

[23:06] <Geth> ¦ roast: 

[23:06] <Geth> ¦ roast: Make sure role group delegates .WHY to its default candidate

[23:06] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/250a246ded

[23:07] *** linkable6 left
[23:10] *** TempIRCLogger left
[23:10] *** TempIRCLogger joined
