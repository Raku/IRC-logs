[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[02:53] *** Xliff left
[03:35] *** ggoebel left
[05:17] *** frost joined
[06:08] *** reportable6 left
[06:09] *** reportable6 joined
[07:39] *** nativecallable6 left
[07:39] *** greppable6 left
[07:39] *** unicodable6 left
[07:39] *** benchable6 left
[07:39] *** shareable6 left
[07:39] *** statisfiable6 left
[07:39] *** bisectable6 left
[07:39] *** reportable6 left
[07:39] *** linkable6 left
[07:39] *** bloatable6 left
[07:39] *** coverable6 left
[07:39] *** notable6 left
[07:39] *** sourceable6 left
[07:39] *** committable6 left
[07:39] *** evalable6 left
[07:39] *** releasable6 left
[07:39] *** quotable6 left
[07:40] *** coverable6 joined
[07:40] *** sourceable6 joined
[07:40] *** shareable6 joined
[07:40] *** statisfiable6 joined
[07:40] *** linkable6 joined
[07:40] *** reportable6 joined
[07:40] *** releasable6 joined
[07:40] *** greppable6 joined
[07:41] *** notable6 joined
[07:41] *** bisectable6 joined
[07:41] *** unicodable6 joined
[07:41] *** benchable6 joined
[07:41] *** evalable6 joined
[07:42] *** committable6 joined
[07:42] *** quotable6 joined
[07:42] *** bloatable6 joined
[07:42] *** nativecallable6 joined
[08:58] <Geth> ¦ nqp: 27d6a33abc | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[08:58] <Geth> ¦ nqp: Bump MoarVM for C11 atomics and other fixes

[08:58] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/27d6a33abc

[09:02] <lizmat> Files=1352, Tests=117130, 289 wallclock secs (35.82 usr  9.65 sys + 4051.06 cusr 324.89 csys = 4421.42 CPU)

[09:07] *** linkable6 left
[09:07] *** evalable6 left
[09:07] *** evalable6 joined
[09:09] *** linkable6 joined
[09:15] <Geth> ¦ rakudo: 320bc4c721 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[09:15] <Geth> ¦ rakudo: Bump NQP to get MoarVM C11 atomics and other fixes

[09:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/320bc4c721

[09:37] *** bartolin left
[09:37] *** bartolin joined
[10:02] *** Xliff joined
[10:02] <Xliff> p6-GLib-Suite compile times:

[10:02] <Xliff> Total non-parallel compile times: 8927.66s

[10:02] <Xliff> Total parallel compile times: 1554.99279354s

[10:04] <Xliff> Full detail, here: https://gist.github.com/Xliff/715b2d698091996148a35408959747b1

[10:06] <lizmat> Xliff: I'm more interested how it compares to the last time  :-)  

[10:08] <Xliff> The spreadsheet handles that.

[10:11] <Xliff> lizmat: Just for you ... https://gist.github.com/Xliff/7a8b2d94eea029fdc4f84d0a4522691f ;)

[10:13] <lizmat> ok, so non-parallel from 9164 -> 8927

[10:13] <lizmat> that's 2.5% improvement

[10:14] <lizmat> 1645 -> 1555  that's even more than 5% 

[10:14] <lizmat> glad to see that :-)

[10:19] <Xliff> Me too!

[10:48] *** ggoebel joined
[10:54] *** frost left
[11:52] *** sena_kun left
[11:53] *** ggoebel left
[11:53] *** sena_kun joined
[11:55] <Geth> ¦ rakudo: bb9d7497b0 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/Repository/Installation.pm6

[11:55] <Geth> ¦ rakudo: Streamline some CURI private methods

[11:55] <Geth> ¦ rakudo: 

[11:55] <Geth> ¦ rakudo: - just run mkdir, checking in Raku is more expensive.  The mkdir

[11:55] <Geth> ¦ rakudo:   will only fail if the directory does *not* exist afterwards.

[11:55] <Geth> ¦ rakudo: - reduce calls to get to meta info, also we know at compile time

[11:55] <Geth> ¦ rakudo:   that it's going to be an Associative, so use % sigil

[11:55] <Geth> ¦ rakudo: - set the defaults for source and checksum in the signature

[11:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bb9d7497b0

[11:59] *** ggoebel joined
[12:08] *** reportable6 left
[12:08] *** reportable6 joined
[12:17] *** dogbert11 left
[12:33] *** frost joined
[12:37] *** nebuchadnezzar joined
[13:11] *** sena_kun left
[13:15] *** sena_kun joined
[14:24] *** ggoebel left
[14:49] <[Tux]> linking moar

[14:49] <[Tux]> collect2: error: ld returned 1 exit status

[14:49] <[Tux]> make: *** [Makefile:634: moar] Error 1

[14:50] <[Tux]> between "linking …' and 'collect2 …':

[14:50] <[Tux]>  /usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: ./libmoar.so: undefined reference to `uv__cloexec_ioctl'

[14:50] <[Tux]> I guess that will disqualify any timing results

[15:04] *** frost left
[15:05] <nine> [Tux]: make distclean in MoarVM could help

[15:15] <Geth> ¦ rakudo/rakuast: 7a17ab8e6d | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[15:15] <Geth> ¦ rakudo/rakuast: Less hacky way to declare $?PACKAGE in packages' bodies

[15:15] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/7a17ab8e6d

[15:28] <Xliff> Will zef block output from rakudo subprocesses? If so, how can I bypass this?

[15:29] <lizmat> precompilation does that, afaik

[15:33] <lizmat> nine: re CURI, is there a reason why a TWEAK could not just check / create all directories it needs, so we could get rid of a lot of ad-hoc checks in the code?

[15:42] <lizmat> if I e.g. look at my "vendor" CURI, it has all directories created, even though nothing ever got installed there

[15:50] <nine> For core, vendor and site, tools/build/upgrade-repository.raku usually creates all the needed directories.

[15:51] <nine> Custom directories are done one the first write to the repository (i.e. when you install something)

[16:01] <lizmat> but why ?   custom directories exists for a reason, no ?

[16:01] <lizmat> not just for the sake of it?

[16:02] <lizmat> so why wouldn't creating a CURI object not: 1. check version, upgrade if necessary, 2. create all directories, possibly bump version to 3, which would mean: all dirs are created

[16:24] <nine> Because you cannot always write on the file system when the CURI object is created. That's why we still have code for reading version 0 repositories.

[16:24] *** sena_kun left
[16:30] *** sena_kun joined
[16:33] <Geth> ¦ rakudo/rakuast: 0f494f7516 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[16:33] <Geth> ¦ rakudo/rakuast: Replace runtime lexical lookup of $?PACKAGE with faster WVal on init of our vars

[16:33] <Geth> ¦ rakudo/rakuast: 

[16:33] <Geth> ¦ rakudo/rakuast: No need to do a lexical lookup when at compilation time we have the desired

[16:33] <Geth> ¦ rakudo/rakuast: object already at hand and can just reference it directly.  This makes

[16:33] <Geth> ¦ rakudo/rakuast: initialization of package scoped variables a tiny bit faster.

[16:33] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/0f494f7516

[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[19:03] <Geth> ¦ rakudo: 57a65562d6 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[19:03] <Geth> ¦ rakudo: Make IO::Path.mkdir 2x as fast if dir already exists

[19:03] <Geth> ¦ rakudo: 

[19:03] <Geth> ¦ rakudo: If the dir does not exist, it is only one cheap existence check extra,

[19:03] <Geth> ¦ rakudo: which dwarves what is needed to actually make a directory.  And since

[19:03] <Geth> ¦ rakudo: IO::Path.mkdir returns the invocant, one would be inclined to write

[19:03] <Geth> ¦ rakudo: "foo".IO.mkdir.add("bar") to create a file "bar" in a "foo" directory.

[19:03] <Geth> ¦ rakudo: This is now significantly faster if the directory already exists.

[19:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/57a65562d6

[19:03] <lizmat> fwiw, one would think that an existence check would be the first thing done in the "nqp::mkdir" logic

[19:09] *** sena_kun left
[19:10] <Geth> ¦ rakudo: 16bac0c64a | (Elizabeth Mattijsen)++ | lib/CompUnit/Repository/Staging.rakumod

[19:10] <Geth> ¦ rakudo: Make sure we try the right thing in CURS.resource

[19:10] <Geth> ¦ rakudo: 

[19:10] <Geth> ¦ rakudo: Spotted by hythm++

[19:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/16bac0c64a

[19:26] *** sena_kun joined
[19:40] <Geth> ¦ rakudo: 8f7cc08478 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/Repository/Installation.pm6

[19:40] <Geth> ¦ rakudo: Partially revert bb9d7497b05146e1955e918

[19:40] <Geth> ¦ rakudo: 

[19:40] <Geth> ¦ rakudo: Restore the directory accessor private methods for now.

[19:40] <Geth> ¦ rakudo: nine++ and ugexe++ for spotting my fallacy wrt to speed of mkdir

[19:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8f7cc08478

[19:42] <Geth> ¦ rakudo/rakuast: ae3b46ee51 | (Stefan Seifert)++ | 2 files

[19:42] <Geth> ¦ rakudo/rakuast: Un-break class es with methods

[19:42] <Geth> ¦ rakudo/rakuast: 

[19:42] <Geth> ¦ rakudo/rakuast: Calling meta-object caused weird problems with methods not getting added to the

[19:42] <Geth> ¦ rakudo/rakuast: class or getting added multiple times. However we actually don't need a fully

[19:42] <Geth> ¦ rakudo/rakuast: initialized meta-object. We only need a reference to the object itself for

[19:42] <Geth> ¦ rakudo/rakuast: $?PACKAGE and can rely on it getting composed eventually.

[19:42] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/ae3b46ee51

[20:00] *** linkable6 left
[20:02] *** linkable6 joined
[22:59] *** Xliff left
