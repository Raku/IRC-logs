[00:08] *** reportable6 left
[00:11] *** reportable6 joined
[00:35] *** Skarsnik left
[00:43] *** squashable6 joined
[01:18] *** frost joined
[02:18] *** evalable6 left
[02:18] *** linkable6 left
[02:20] *** linkable6 joined
[03:13] *** discord-raku-bot left
[03:13] *** discord-raku-bot joined
[05:20] *** evalable6 joined
[06:08] *** reportable6 left
[06:11] *** reportable6 joined
[06:14] *** japhb left
[06:21] *** japhb joined
[07:07] *** MasterDuke left
[08:39] *** MasterDuke joined
[09:05] <lizmat> Files=1351, Tests=117094, 320 wallclock secs (35.45 usr  9.61 sys + 4450.81 cusr 359.51 csys = 4855.38 CPU)

[09:57] <Geth> ¦ rakudo: 59ea71f7ed | (Elizabeth Mattijsen)++ | src/core.c/Rational.pm6

[09:57] <Geth> ¦ rakudo: Bring Rational.floor/ceiling/round/Int below inlining limit

[09:57] <Geth> ¦ rakudo: 

[09:57] <Geth> ¦ rakudo: The error handling for divide-by-zero (which is an uncommon path to

[09:57] <Geth> ¦ rakudo: take) made the methods too large to inline.  By moving this into a

[09:57] <Geth> ¦ rakudo: separate private method, the common path becomes small enough to

[09:57] <Geth> ¦ rakudo: not prevent inlining.

[09:57] <Geth> ¦ rakudo: 

[09:57] <Geth> ¦ rakudo: Did not benchmark, but it should have a positive effect on many

[09:57] <Geth> ¦ rakudo: uses of these methods.

[09:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/59ea71f7ed

[10:48] <Geth> ¦ rakudo: daeb991508 | (Elizabeth Mattijsen)++ | src/core.c/Array/Typed.pm6

[10:48] <Geth> ¦ rakudo: Reduce bytecode size of Array[TR].BIND-POS

[10:48] <Geth> ¦ rakudo: 

[10:48] <Geth> ¦ rakudo: From 830 to 572, unfortunately still above the inlining limit.

[10:48] <Geth> ¦ rakudo: But when the native unsigned int work is merged, there will be

[10:48] <Geth> ¦ rakudo: more possible :-)

[10:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/daeb991508

[11:55] <nine> lizmat: I'm curious. How will unsigned fixes help there?

[11:55] <lizmat> because then we could dispatch on uint and get rid of the check for < 0 in the code

[11:56] <lizmat> and thus reduce bytecode further ?

[11:56] <nine> oh, yes, indeed

[12:06] *** reportable6 left
[12:20] *** frost73 joined
[12:22] <Geth> ¦ rakudo: 30f1fba3c8 | (Elizabeth Mattijsen)++ | 2 files

[12:22] <Geth> ¦ rakudo: Make adverbless @a[iterable] about 2.5x as fast

[12:22] <Geth> ¦ rakudo: 

[12:22] <Geth> ¦ rakudo: By making sure the hot path can be inlined.

[12:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/30f1fba3c8

[12:23] *** frost left
[12:24] *** frost73 is now known as frost

[12:32] <Geth> ¦ rakudo: ba72309936 | (Elizabeth Mattijsen)++ | src/core.c/array_slice.pm6

[12:32] <Geth> ¦ rakudo: No need to use nqp::ifs, use ternaries instead

[12:32] <Geth> ¦ rakudo: 

[12:32] <Geth> ¦ rakudo: No functional changes from 30f1fba3c8

[12:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ba72309936

[12:46] *** frost left
[13:02] *** sjn_ is now known as sjn

[13:17] <Geth> ¦ rakudo: 8ac55c57ed | (Elizabeth Mattijsen)++ | 2 files

[13:17] <Geth> ¦ rakudo: Make adverbless @a[*] about 20% faster

[13:17] <Geth> ¦ rakudo: 

[13:17] <Geth> ¦ rakudo: By reducing the bytecode size to under the inlining limit

[13:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8ac55c57ed

[13:36] <Geth> ¦ rakudo: 21829c33f6 | (Elizabeth Mattijsen)++ | 2 files

[13:36] <Geth> ¦ rakudo: Make the adverbless zen-slice (@a[]) a few percent faster

[13:36] <Geth> ¦ rakudo: 

[13:36] <Geth> ¦ rakudo: By making it inline because it no longer needs to take a closure

[13:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/21829c33f6

[15:07] *** reportable6 joined
[16:35] <Geth> ¦ rakudo: 6c765609cb | (Elizabeth Mattijsen)++ | src/core.c/Rat.pm6

[16:35] <Geth> ¦ rakudo: Remove two dummy parameters from (Fat)Rat coercer

[16:35] <Geth> ¦ rakudo: 

[16:35] <Geth> ¦ rakudo: These appear to have been added with c33f355a5440ea6b26db in 2011,

[16:35] <Geth> ¦ rakudo: and basically rendered useless a little later in 2011.  Removal is

[16:35] <Geth> ¦ rakudo: spectest clean, so I see no reason to keep them.

[16:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6c765609cb

[16:44] <ugexe> https://gist.github.com/ugexe/4f6ec70c0edb7255bd1b99075dfb7cae

[16:44] <ugexe> is this suggesting $*DISTRO is not thread safe?

[16:49] <ugexe> m: (1..1000000).hyper.map: { die unless $*DISTRO }

[16:49] <camelia> rakudo-moar 21829c33f: ( no output )

[16:50] <ugexe> on osx that gives the same error as my gist

[16:50] <ugexe> ❯ raku -I. -e '(1..1000000).hyper.map: { die unless $*DISTRO }'

[16:50] <ugexe> [1]    15401 segmentation fault  raku -I. -e '(1..1000000).hyper.map: { die unless $*DISTRO }'

[16:50] <ugexe> slightly different error on a different run

[16:52] <lizmat> I guess $*DISTRO initialization may indeed be racey

[16:53] <lizmat> well, Distro.new I guess

[16:56] <Geth> ¦ rakudo: 2fe1bb85b9 | (Elizabeth Mattijsen)++ | src/core.c/Rat.pm6

[16:56] <Geth> ¦ rakudo: Make FatRat.Rat coercion about 6x as fast

[16:56] <Geth> ¦ rakudo: 

[16:56] <Geth> ¦ rakudo: Not that that will happen too often I guess, but there's no need

[16:56] <Geth> ¦ rakudo: to do numerator / denominator normalization again on something that's

[16:56] <Geth> ¦ rakudo: already a correct FatRat (and in range of Rat values).

[16:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2fe1bb85b9

[17:00] <Geth> ¦ DateTime-Format: Xliff++ created pull request #17: - Updated authors in README.md

[17:00] <Geth> ¦ DateTime-Format: review: https://github.com/raku-community-modules/DateTime-Format/pull/17

[17:01] <Geth> ¦ DateTime-Format: 451589490e | Xliff++ | README.md

[17:01] <Geth> ¦ DateTime-Format: - Updated authors in README.md

[17:01] <Geth> ¦ DateTime-Format: review: https://github.com/raku-community-modules/DateTime-Format/commit/451589490e

[17:01] <Geth> ¦ DateTime-Format: b39882242f | Xliff++ (committed using GitHub Web editor) | README.md

[17:01] <Geth> ¦ DateTime-Format: Merge pull request #17 from Xliff/master

[17:01] <Geth> ¦ DateTime-Format: 

[17:01] <Geth> ¦ DateTime-Format: - Updated authors in README.md

[17:01] <Geth> ¦ DateTime-Format: review: https://github.com/raku-community-modules/DateTime-Format/commit/b39882242f

[17:06] *** Guest7 joined
[17:07] *** Guest7 left
[17:08] *** [Coke] left
[17:14] *** [Coke] joined
[18:06] *** reportable6 left
[18:36] <Geth> ¦ rakudo: 38648b4f8f | (Elizabeth Mattijsen)++ | src/core.c/native_array.pm6

[18:36] <Geth> ¦ rakudo: Bring down bytecode size of nativearray.splice helper

[18:36] <Geth> ¦ rakudo: 

[18:36] <Geth> ¦ rakudo: From 1136 to 430, sadly still too large to inline.  Hopefully

[18:36] <Geth> ¦ rakudo: later optimizations will bring it down enough.

[18:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/38648b4f8f

[18:48] *** linkable6 left
[19:07] *** reportable6 joined
[19:33] <Geth> ¦ rakudo: 4d78bc6ace | (Elizabeth Mattijsen)++ | src/core.c/Int.pm6

[19:33] <Geth> ¦ rakudo: Re-arrange Int.base a bit

[19:33] <Geth> ¦ rakudo: 

[19:33] <Geth> ¦ rakudo: So it'll always inline.  With a few percent performance gain.

[19:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4d78bc6ace

[19:50] *** linkable6 joined
[19:54] *** Altai-man left
[19:54] *** sena_kun joined
[21:05] *** qorg11 left
[21:06] *** qorg11 joined
[22:27] <Geth> ¦ rakudo/ugexe-patch-3: 9e3ff604bc | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/Distro.pm6

[22:27] <Geth> ¦ rakudo/ugexe-patch-3: Make $*DISTRO more thread safe

[22:27] <Geth> ¦ rakudo/ugexe-patch-3: 

[22:27] <Geth> ¦ rakudo/ugexe-patch-3: This prevents concurrent write attempts to `PROCESS::<$DISTRO>` when registering `$*DISTRO`.  It also avoids duplicated work in said situations, such as shell calls to `lsb_release -a`.

[22:27] <Geth> ¦ rakudo/ugexe-patch-3: 

[22:27] <Geth> ¦ rakudo/ugexe-patch-3: Fixes #4714

[22:27] <Geth> ¦ rakudo/ugexe-patch-3: review: https://github.com/rakudo/rakudo/commit/9e3ff604bc

[22:27] <Geth> ¦ rakudo: ugexe++ created pull request #4715: Make $*DISTRO more thread safe

[22:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4715

[22:27] *** discord-raku-bot left
[22:28] *** discord-raku-bot joined
[22:56] *** discord-raku-bot left
[22:56] *** discord-raku-bot joined
