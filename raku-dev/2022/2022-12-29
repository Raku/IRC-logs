[00:00] *** reportable6 left
[00:01] <Voldenet> ⚓ is an anchor obviously…

[00:02] *** reportable6 joined
[00:02] <discord-raku-bot> <Nemokosch> xddd

[01:05] <vrurg> 'sunk', 'block', and 'key'

[01:17] *** NemokoschKiwi joined
[01:42] *** Voldenet left
[01:49] *** Voldenet joined
[01:50] *** NemokoschKiwi left
[01:57] <discord-raku-bot> <Nemokosch> 👍

[01:57] <discord-raku-bot> <Nemokosch> vrurg: by the way, when will be the next lesson held? 🥺

[01:58] <vrurg> Jan 7.

[01:58] <vrurg> BTW, it reminds me that I've got a zoom link today and need to publish it.

[01:58] <discord-raku-bot> <Nemokosch> that was quick... is there a schedule somewhere?

[01:59] <vrurg> https://calendar.google.com/calendar/event?action=TEMPLATE&tmeid=MGdpYWNpZGNmdHMxZHYzNnA5bGJhdG5qc2IgMGZiMWQ4NTVlOWI2MTA3ZTlmZWM2OWE5ZTg4YjVhYjYxY2IwZmJmNGUxZTI0OTE3MDg2MjE1Yzc5NjkyMWNkYkBn&tmsrc=0fb1d855e9b6107e9fec69a9e88b5ab61cb0fbf4e1e24917086215c796921cdb%40group.calendar.google.com

[02:00] <discord-raku-bot> <Nemokosch> 🗒️

[02:01] <vrurg> I have updated the entry with Zoom Meeting info.

[02:01] *** Voldenet left
[02:07] <discord-raku-bot> <Nemokosch> trying to add proper &variables to RakuAST... doesn't seem too much work but that doesn't mean I wouldn't mess it up 😄

[02:09] <discord-raku-bot> <Nemokosch> my hope is that this would automatically fix, well, perhaps a number of test cases as well but what seems more appealing is the `my Type &var` anomaly

[02:33] <discord-raku-bot> <Nemokosch> apparently it's troublesome that `Callable` is not a class... for now, I would be happy to generate with `Code`

[02:37] *** squashable6 left
[02:38] *** squashable6 joined
[02:38] *** Voldenet joined
[02:43] <discord-raku-bot> <Nemokosch> hm, no, life would be too simple.... there is something special about Array and Hash, they aren't just any type

[03:17] *** Kaipei left
[03:26] <discord-raku-bot> <Nemokosch> note to self: PRODUCE-META-OBJECT, container descriptors

[05:39] *** Kaipei joined
[05:45] *** Kaipei left
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[08:37] *** bartolin left
[09:11] *** lizmat_ left
[09:11] *** lizmat joined
[09:41] *** Kaipei joined
[10:41] <Geth> ¦ rakudo/main: dd49f98e88 | (Elizabeth Mattijsen)++ | 3 files

[10:41] <Geth> ¦ rakudo/main: Add basic RakuAST::Label tests

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: This is just for the object itself, tests where labels are actually

[10:41] <Geth> ¦ rakudo/main: used inside code will need to be added later.  This appears to be

[10:41] <Geth> ¦ rakudo/main: impossible atm, as the RakuAST::Label class appears to be missing a

[10:41] <Geth> ¦ rakudo/main: IMPL-TO-QAST method implementation.

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: Also, it is unclear how RakuAST::Label should be used when building

[10:41] <Geth> ¦ rakudo/main: ad-hoc structures.  Should it be a member of a StatementList, or an

[10:41] <Geth> ¦ rakudo/main: attribute of a StatementList?

[10:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dd49f98e88

[10:43] *** Geth left
[10:43] *** Geth joined
[10:47] *** sena_kun joined
[11:05] *** Kaipei is now known as Kaiepi

[11:09] *** squashable6 left
[11:10] *** squashable6 joined
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:14] *** squashable6 left
[12:17] *** squashable6 joined
[13:17] *** evalable6 left
[13:17] *** linkable6 left
[13:17] *** reportable6 left
[13:17] *** squashable6 left
[13:17] *** benchable6 left
[13:18] *** linkable6 joined
[13:18] *** benchable6 joined
[13:18] *** reportable6 joined
[13:19] *** squashable6 joined
[13:20] *** evalable6 joined
[16:11] <Geth> ¦ rakudo/main: ddecbe687a | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[16:11] <Geth> ¦ rakudo/main: Change X::NYI.new.throw to NYI.throw

[16:11] <Geth> ¦ rakudo/main: 

[16:11] <Geth> ¦ rakudo/main: To reduce bytecode size, mainly

[16:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ddecbe687a

[16:14] *** Geth left
[16:14] *** Geth joined
[17:10] *** epony left
[17:28] *** epony joined
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[19:00] *** evalable6 left
[19:00] *** linkable6 left
[19:02] *** linkable6 joined
[19:02] *** evalable6 joined
[20:22] *** epony left
[20:29] *** epony joined
[20:56] *** vrurg_ joined
[20:56] *** vrurg left
[21:34] *** NemokoschKiwi joined
[21:38] *** NemokoschKiwi left
[22:12] *** Manifest0 joined
[22:12] <Manifest0> Hi. I asked this in #raku, but maybe here is more appropriated.

[22:12] <Manifest0> I made a little script in raku, but from time to time the script core dumps.

[22:13] <Manifest0> I have no idea why. Is anybody interested in the coredump file? Should i open a github issue with just the coredump? 

[22:22] <vrurg_> Manifest0: first make sure it is not caused by a module using NativeCall.

[22:22] *** vrurg_ is now known as vrurg

[22:23] <Manifest0> how can i know that?

[22:25] <Manifest0> https://paste.opensuse.org/pastes/5c956fba74b4

[22:28] <discord-raku-bot> <Nemokosch> NativeCall itself is a (core) module. Are you using it in your code, or does any of the modules you are using, use it?

[22:29] <discord-raku-bot> <Nemokosch> Usually you don't need to start guessing because it's a fundamental choice for a module if it relies on foreign calls to a binary interface or uses "pure Raku"

[22:30] <Manifest0> I'm not using it directly. Not sure about the modules. I'm using DBIish; DateTime::Parse; Cro::HTTP::Client; XML; Term::ReadKey; Term::termios; HTML::Entity::Fast;

[22:32] <Manifest0> Apparently DBIish uses nativecall: https://github.com/raku-community-modules/DBIish/blob/4649342bdad79f938b17024f7f227ac27e8e1605/lib/DBDish/SQLite/StatementHandle.rakumod

[22:35] <Manifest0> termios and Term::ReadKey also use nativecall. So what should i do now?

[22:46] <discord-raku-bot> <Nemokosch> DBIish is sussy imo 😅

[23:11] *** epony left
[23:13] <vrurg> Manifest0: in your dump it is not clear which thread is the culprit. But often there is no direct link between the cause of a memory corruption and the place where it exploded. So, things are not gonna be that straightforward anyway.

[23:22] *** sena_kun left
