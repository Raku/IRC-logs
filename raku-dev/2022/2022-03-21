[00:06] *** reportable6 left
[00:30] *** linkable6 joined
[02:15] *** unicodable6 left
[02:15] *** squashable6_ left
[02:15] *** statisfiable6_ left
[02:15] *** quotable6 left
[02:15] *** releasable6 left
[02:15] *** committable6 left
[02:15] *** greppable6 left
[02:15] *** linkable6 left
[02:15] *** sourceable6_ left
[02:15] *** bloatable6 left
[02:15] *** shareable6_ left
[02:15] *** bisectable6_ left
[02:15] *** coverable6 left
[02:15] *** nativecallable6_ left
[02:15] *** notable6 left
[02:15] *** benchable6 left
[02:16] *** quotable6 joined
[02:16] *** nativecallable6 joined
[02:16] *** sourceable6 joined
[02:16] *** squashable6 joined
[02:16] *** statisfiable6 joined
[02:17] *** bloatable6 joined
[02:17] *** greppable6 joined
[02:18] *** coverable6 joined
[02:18] *** releasable6 joined
[02:23] *** ggoebel left
[02:29] *** evalable6 joined
[03:09] *** reportable6 joined
[03:16] *** notable6 joined
[03:16] *** bisectable6 joined
[03:17] *** shareable6 joined
[03:34] *** frost joined
[04:17] *** linkable6 joined
[04:17] *** benchable6 joined
[04:17] *** unicodable6 joined
[04:58] *** [Coke] left
[05:17] *** committable6 joined
[06:07] *** reportable6 left
[06:10] *** [Coke] joined
[06:47] *** ggoebel joined
[06:52] *** ggoebel left
[06:52] *** ggoebel joined
[07:46] <Geth> ¦ rakudo: fb749d99ec | (Elizabeth Mattijsen)++ | 3 files

[07:46] <Geth> ¦ rakudo: Give CompUnit::PrecompilationUnit::File its own file

[07:46] <Geth> ¦ rakudo: 

[07:46] <Geth> ¦ rakudo: There is no reason to keep this inside CompUnit::Precompilation::Store::File

[07:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fb749d99ec

[07:48] <nine> lizmat: EVALing CURS is an interesting idea!

[07:51] <nine> lizmat: I see CompUnit::PrecompilationUnit::File as an implementation detail of CompUnit::PrecompilationStore::File.

[07:52] <lizmat> well, perhaps it is now, but maybe not so in the future ?

[07:52] <nine> https://github.com/rakudo/rakudo/blob/fb749d99ec311df4d93c572336ccc8c4877bd605/src/core.c/CompUnit/PrecompilationUnit.pm6 could use some splitting though.

[07:52] <nine> Why would that change?

[07:52] <nine> The public interface is CompUnit::PrecompilationUnit

[07:54] <nine> Though now that I look at it, I have to admit that it's not all that PrecompilationStore::File specific. It could be used in any store that stores precompiled modules in files.

[07:54] <lizmat> right

[07:54] <lizmat> :-)

[07:54] <lizmat> breakfast&

[08:35] *** sena_kun joined
[10:00] *** evalable6 left
[10:00] *** linkable6 left
[10:09] *** reportable6 joined
[10:28] *** TempIRCLogger left
[10:29] *** TempIRCLogger joined
[10:33] *** TempIRCLogger left
[10:33] *** TempIRCLogger joined
[10:36] <MasterDuke> nine: is https://gist.github.com/MasterDuke17/0c5b3f7cf832cb1d27e68cff5b4fcfcd (that's in `optimize_call()`) the sort of thing you're thinking of?

[10:38] <MasterDuke> `MVM_SPESH_BLOCKING=1 CALL_NO_WANT=1 valgrind --tool=callgrind raku -e 'my Int $r = (^100).pick; multi foo (Int $i) { $i + $r }; my int $a; $a = foo 3 for ^100_000; say now - INIT now; say $a'` reports ~2m instructions fewer

[11:00] *** evalable6 joined
[11:03] *** linkable6 joined
[11:20] <MasterDuke> also making the signature `int` now works with the literal value (and correctly doesn't work if the literal value is > max int value)

[12:08] *** reportable6 left
[12:19] <patrickb> jdv: Compiled tarballs are done.

[12:21] *** discord-raku-bot left
[12:21] *** discord-raku-bot joined
[12:27] <lizmat> notable6 weekly

[12:27] <lizmat> notable6: weekly

[12:27] <notable6> lizmat, No notes for “weekly”

[12:41] *** Altai-man joined
[12:47] <dogbert11> lizmat: managed to create a Moarvm PR in case you need more material :)

[13:02] *** [Coke] left
[13:02] <lizmat> dogbert11: thanks :-)

[13:03] <MasterDuke> nine: however, i just remembered that i stopped whatever that other thing i was working on was because jnthn pointed out Actions/Optimizer/etc are getting dramatically changed in rakuast. so this might be another thing to punt until after that lands

[13:07] *** Altai-man left
[13:07] *** [Coke] joined
[13:12] *** [Coke]_ joined
[13:13] *** [Coke] left
[13:22] *** frost left
[13:26] *** [Coke]_ is now known as [Coke]

[13:56] *** Xliff_ left
[14:11] *** reportable6 joined
[14:56] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/03/21/2022-12-releasomatic/

[15:37] <[Tux]> Rakudo v2022.03-3-gfb749d99e (v6.d) on MoarVM 2022.03-1-gefff4cd31

[15:37] <[Tux]> csv-test-xs-20      0.399 -  0.458

[15:37] <[Tux]> csv-ip5xs           0.804 -  0.852

[15:37] <[Tux]> test-t --race       0.980 -  1.065

[15:37] <[Tux]> test-t              1.457 -  1.701

[15:37] <[Tux]> csv-parser          3.739 -  4.147

[15:37] <[Tux]> csv-ip5xs-20        5.181 -  5.618

[15:37] <[Tux]> test-t-20 --race    6.389 -  6.982

[15:37] <[Tux]> test                6.520 -  6.540

[15:37] <[Tux]> test-t-20          21.220 - 21.482

[16:01] <[Tux]> I think it is safe to ignore the 1.7. Likely something kicked in in the background, like a cron-job of some sort

[16:49] <nine> Oh, so maybe we should rally on RakuAST

[16:54] <MasterDuke> i haven't been following it very closely. any lhf available?

[17:03] <nine> No idea. Compiling it for the first time just now

[17:17] <nine> MasterDuke: there's a src/Raku/ast/README.md in the branch with an "If you want to help..." section

[17:19] <MasterDuke> ugh, doesn't cleanly rebase onto master for me

[17:20] <nine> I'd have been surprised if it did considering the intrusiveness of the branch

[17:21] <MasterDuke> i thought i saw that someone else had rebased it a couple days ago

[17:21] <MasterDuke> yeah, on the 14th

[17:22] <MasterDuke> oh, at least that what i assume it was

[17:28] <MasterDuke> did you just gen nqp and moarvm?

[17:31] <MasterDuke> oh, once i did things correctly it did rebase onto master

[17:57] *** nine left
[17:58] *** nine joined
[18:00] *** ilogger2 joined
[18:02] *** lucs_ is now known as lucs

[18:05] *** camelia left
[18:05] *** nine left
[18:06] *** nine joined
[18:09] *** reportable6 left
[18:14] *** camelia joined
[18:15] <Geth> ¦ rakudo: ca09e6fcc3 | (Elizabeth Mattijsen)++ | lib/CompUnit/Repository/Staging.rakumod

[18:15] <Geth> ¦ rakudo: Add .deploy method to CUR::Staging

[18:15] <Geth> ¦ rakudo: 

[18:15] <Geth> ¦ rakudo: This should allow tests to install modules to be tested into a

[18:15] <Geth> ¦ rakudo: Staging directory, run tests, and then simply call .deploy to

[18:15] <Geth> ¦ rakudo: copy the binary files into the right location (rather than needing

[18:15] <Geth> ¦ rakudo: to re-install and re-precompile again).

[18:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ca09e6fcc3

[18:15] <lizmat> ugexe nine ^^

[18:43] *** linkable6 left
[19:03] *** melezhik joined
[19:41] <melezhik> hi raku devs. I am thinking about distributed test systems for selected Raku modules (zef test) against Rakudo daily commits, to catch Rakudo bugs against community modules, difference with Blin - this is distributed system would be run on cluster - in parallel for many modules so we could imagine significantly short time, I am not sure if this is

[19:41] <melezhik> a problem with Blin right now, just testing a water here ...

[19:44] <nine> melezhik: that more or less already exists: https://build.opensuse.org/project/show/home:niner9:rakudo-git

[19:44] <sena_kun> melezhik, Blin can split work over all the cores for a single machine, and with nowadays monsters with 12 or 16 cores it takes about an hour to test everything.

[19:45] <sena_kun> in the bright future of tens of thousands of modules that would be great, but maybe not in the short term

[19:45] <nine> Re-reading your message, I dare say the exact thing you're describing exists

[19:47] <MasterDuke> `Unknown compilation input 'optimize'`, which is an NQP error, when running `RAKUDO_RAKUAST=1 ./rakudo-m --ll-exception -I lib/ t/01-sanity/99-test-basic.t`

[19:48] <MasterDuke> with not a single mention of t/01-sanity/99-test-basic.t anywhere in the backtrace...

[19:48] <nine> MasterDuke: in !produce-reader? That's what I'm currently working on

[19:48] <MasterDuke> yeah. cool, i'll move on

[19:49] *** melezhik left
[19:50] <MasterDuke> oh, lots of them are doing that. well, hopefully when you solve that a bunch of stuff will get unlocked

[20:06] <MasterDuke> even t/12-rakuast/literals.t doesn't run? `===SORRY!===

[20:06] <MasterDuke> Could not find MONKEY-SEE-NO-EVAL in:

[20:06] <MasterDuke>     file#/home/dan/Source/perl6/rakudo/lib`

[20:06] <nine> Haha, that's the one I picked and went with :)

[20:06] <nine> That MONKEY-SEE-NO-EVAL is easy to get around

[20:07] <nine> even the optimize issue is. Getting !produce-reader to actually produce a reader though is harder

[20:50] <drakonis> i find this might be a better place to ask than #moarvm

[20:51] <drakonis> given that rakudo does not have TCO, how would it be added to it?

[20:54] *** melezhik joined
[21:01] *** melezhik left
[21:10] *** reportable6 joined
[21:21] <SmokeMachine> melezhik: could it be a k8s cluster with containers/pods running each module’s tests?

[21:47] *** melezhik joined
[22:32] *** melezhik left
[22:36] <MasterDuke> ok, multi-hour distraction over (why is buying a house so hard?)...so optimize and MONKEY-SEE-NO-EVAL can be gotten around? you mean you fixes those problems or they aren't really problems?

[22:39] <nine> Just rather trivial to stub/fix. What I've gotten so far: https://gist.github.com/niner/a73b112bcee35159e6f7e10a03c1bc55

[22:46] *** linkable6 joined
[22:47] * japhb imagines needing to learn secret handshakes before being allowed to buy a house: "Oh come on!  This handshake has 537 moves and takes half an hour!  Can't I just sign a stack of documents instead?"

[23:31] <Geth> ¦ rakudo/master: 5 commits pushed by (Daniel Green)++, MasterDuke17++

[23:31] <Geth> ¦ rakudo/master: 79cd9d9734 | Don't always create closure for RHS of regex substitution

[23:31] <Geth> ¦ rakudo/master: 55c833adb0 | Create fast path in regex substitution implementation...

[23:31] <Geth> ¦ rakudo/master: 72f2f40055 | Remove `try` when setting `$/` during regex substitution

[23:31] <Geth> ¦ rakudo/master: 4503faacf9 | When substituting, use faster way to iterate matches if possible

[23:31] <Geth> ¦ rakudo/master: f71ada59af | Merge pull request #4807 from MasterDuke17/some_optimizations_for_regex_substitutions

[23:31] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/ca09e6fcc35f...f71ada59afd5

[23:44] *** melezhik joined
[23:56] *** melezhik left
