[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:44] <Geth> ¦ JSON-Unmarshal/main: 3bab708d59 | (Vadim Belman)++ | 2 files

[00:44] <Geth> ¦ JSON-Unmarshal/main: Fixed another problem with nominalizables

[00:44] <Geth> ¦ JSON-Unmarshal/main: 

[00:44] <Geth> ¦ JSON-Unmarshal/main: When the nominal of a nominalizable is a non-supported class (none of

[00:44] <Geth> ¦ JSON-Unmarshal/main: Int, Str, etc. – like, say DateTime) we were failing to obtain

[00:44] <Geth> ¦ JSON-Unmarshal/main: attributes.

[00:44] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/commit/3bab708d59

[00:49] <Geth> ¦ JSON-Unmarshal/main: e0c2237df3 | (Vadim Belman)++ | t/040-types.rakutest

[00:49] <Geth> ¦ JSON-Unmarshal/main: Remove JSON::Class used for debugging purposes

[00:49] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/commit/e0c2237df3

[00:49] <Geth> ¦ JSON-Unmarshal/main: 2a67b3e23f | (Vadim Belman)++ | 2 files

[00:49] <Geth> ¦ JSON-Unmarshal/main: 0.10

[00:49] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/commit/2a67b3e23f

[01:20] *** evalable6 left
[01:20] *** linkable6 left
[01:21] *** evalable6 joined
[01:23] *** linkable6 joined
[02:23] *** evalable6 left
[02:23] *** sourceable6 left
[02:23] *** notable6 left
[02:23] *** bloatable6 left
[02:23] *** statisfiable6 left
[02:23] *** benchable6 left
[02:23] *** committable6 left
[02:23] *** nativecallable6 left
[02:23] *** quotable6 left
[02:23] *** releasable6 left
[02:23] *** linkable6 left
[02:23] *** nativecallable6 joined
[02:23] *** evalable6 joined
[02:24] *** quotable6 joined
[02:24] *** releasable6 joined
[02:25] *** bloatable6 joined
[02:25] *** statisfiable6 joined
[02:26] *** linkable6 joined
[02:26] *** benchable6 joined
[02:26] *** sourceable6 joined
[02:26] *** notable6 joined
[02:26] *** committable6 joined
[02:30] *** japhb left
[02:37] *** japhb joined
[04:15] *** frost joined
[06:06] *** reportable6 left
[06:06] *** reportable6 joined
[06:08] *** kjp left
[06:08] *** codesections left
[06:08] *** masak_ left
[06:08] *** djinni` left
[06:08] *** masak joined
[06:09] *** kjp joined
[06:12] *** SmokeMachine left
[06:12] *** eof left
[06:12] *** summerisle joined
[06:12] *** SmokeMachine joined
[06:12] *** djinni` joined
[07:27] *** sena_kun joined
[08:45] <Geth> ¦ rakudo/rakuast_wip: f6df1a2258 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[08:45] <Geth> ¦ rakudo/rakuast_wip: Add a fallback resolver for BEGIN time run code objects.

[08:45] <Geth> ¦ rakudo/rakuast_wip: 

[08:45] <Geth> ¦ rakudo/rakuast_wip: Ye olde implementation created a wrapper frame containing the lexical symbols

[08:45] <Geth> ¦ rakudo/rakuast_wip: of all outer scopes. This is rather costly and blows up bytecode size. Instead,

[08:45] <Geth> ¦ rakudo/rakuast_wip: we now use the VMs new capability to run a custom resolver when it cannot find

[08:45] <Geth> ¦ rakudo/rakuast_wip: a lexical by itself.

[08:45] <Geth> ¦ rakudo/rakuast_wip: 

[08:45] <Geth> ¦ rakudo/rakuast_wip: This first implementation only gets us compile-time-known values, but it's a

[08:45] <Geth> ¦ rakudo/rakuast_wip: start.

[08:45] <Geth> ¦ rakudo/rakuast_wip: review: https://github.com/rakudo/rakudo/commit/f6df1a2258

[08:45] <Geth> ¦ rakudo/rakuast_wip: e77da5dfc8 | (Stefan Seifert)++ | src/Raku/ast/statementprefixes.rakumod

[08:45] <Geth> ¦ rakudo/rakuast_wip: Fix BEGIN as statement prefix

[08:45] <Geth> ¦ rakudo/rakuast_wip: review: https://github.com/rakudo/rakudo/commit/e77da5dfc8

[08:50] *** evalable6 left
[08:50] *** linkable6 left
[08:50] *** evalable6 joined
[08:51] *** linkable6 joined
[10:07] *** Altai-man joined
[11:07] *** linkable6 left
[11:07] *** evalable6 left
[11:08] *** evalable6 joined
[11:09] *** linkable6 joined
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:34] *** frost left
[12:40] <[Tux]> Rakudo v2022.06-46-g934f9895e (v6.d) on MoarVM 2022.06-6-gc315523ab

[12:40] <[Tux]> csv-test-xs-20      0.402 -  0.436

[12:40] <[Tux]> csv-ip5xs           0.915 -  0.925

[12:40] <[Tux]> test-t --race       1.138 -  1.191

[12:40] <[Tux]> test-t              1.530 -  1.743

[12:40] <[Tux]> csv-parser          3.485 -  3.754

[12:40] <[Tux]> csv-ip5xs-20        5.599 -  5.631

[12:40] <[Tux]> test                6.803 -  7.048

[12:40] <[Tux]> test-t-20 --race    6.769 -  7.405

[12:40] <[Tux]> test-t-20          19.975 - 22.158

[12:58] <lizmat> notable6: weekly

[12:58] <notable6> lizmat, 1 note: 2022-07-07T14:09:57Z <lizmat>: https://stackoverflow.blog/2022/07/06/why-perl-is-still-relevant-in-2022/#comment-3083485

[12:59] <lizmat> notable6: weekly reset

[12:59] <notable6> lizmat, Moved existing notes to “weekly_2022-07-11T12:59:13Z”

[13:03] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/07/11/2022-28-announciations/

[13:04] *** Kaiepi joined
[13:07] *** Kaipei left
[14:38] <vrurg> lizmat++

[16:14] *** Altai-man left
[16:14] *** Altai-man joined
[16:25] *** dogbert17 left
[16:28] *** dogbert17 joined
[17:03] *** melezhik joined
[17:11] *** Altai-man left
[18:06] *** reportable6 left
[18:07] *** melezhik left
[18:07] *** melezhik joined
[18:08] *** reportable6 joined
[18:54] *** melezhik left
[19:00] *** melezhik joined
[19:54] *** [Coke] left
[19:55] *** [Coke] joined
[20:14] <Geth> ¦ rakudo: vrurg++ created pull request #4981: Fix a deep recursion issue in return typecheck dispatcher

[20:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4981

[20:19] <Geth> ¦ rakudo/rakuast: 35b9789dc2 | (Stefan Seifert)++ | src/Raku/ast/statementprefixes.rakumod

[20:19] <Geth> ¦ rakudo/rakuast: Fix BEGIN as statement prefix

[20:19] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/35b9789dc2

[20:19] <Geth> ¦ rakudo/rakuast: 0614d2e4db | (Stefan Seifert)++ | 2 files

[20:19] <Geth> ¦ rakudo/rakuast: Fix anonymous methods checking for wrong invocant type

[20:19] <Geth> ¦ rakudo/rakuast: 

[20:19] <Geth> ¦ rakudo/rakuast: Anonymous methods, i.e. method () { ... } created inside another

[20:19] <Geth> ¦ rakudo/rakuast: method's body checked their invocant against the outer method's package.

[20:19] <Geth> ¦ rakudo/rakuast: This broke method foo() { Proxy.new: FETCH => method () { ... } ... }

[20:19] <Geth> ¦ rakudo/rakuast: 

[20:19] <Geth> ¦ rakudo/rakuast: Fix by only generating code for checking an implicit invocant's type on

[20:19] <Geth> ¦ rakudo/rakuast: named methods.

[20:19] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/0614d2e4db

[20:22] *** sena_kun left
[20:28] *** sena_kun joined
[20:53] *** melezhik left
[21:00] *** lizmat_ joined
[21:03] *** lizmat left
[21:20] *** melezhik joined
[21:28] <timo> i wonder if we need to wargame the kinds of situation happening to other package ecosystems and infrastructures over the last years

[21:32] <timo> like, can we put something on the ipfs that could be used as a fail-safe? signed by a trusted key to give installations of raku that can't easily be maintained in the case of a sudden catastrophical loss of raku packaging infrastructure

[21:32] <japhb> timo: Well, we still have a tendency towards radical trust, which has served us well over the decades, but ... yeah, suboptimal now.

[21:33] <timo> at some point someone will come and prove to us that trusting is foolish :ed

[21:33] <timo> :D

[21:37] *** melezhik left
[21:42] <timo> how well does udp broadcast tend to work in l

[21:42] <timo> cloud infrastructures

[21:42] <timo> can we just put avahi into our package manager

[22:22] *** lizmat_ is now known as lizmat

[22:31] *** melezhik joined
[23:31] <Geth> ¦ rakudo: 9fa76ec642 | (Vadim Belman)++ | src/vm/moar/dispatchers.nqp

[23:31] <Geth> ¦ rakudo: Fix a deep recursion issue in return typecheck dispatcher

[23:31] <Geth> ¦ rakudo: 

[23:31] <Geth> ¦ rakudo: Should have used `wrapee-lookup` on SubsetHOW itself.

[23:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9fa76ec642

[23:31] <Geth> ¦ rakudo: 808b07682a | (Vadim Belman)++ | src/vm/moar/dispatchers.nqp

[23:31] <Geth> ¦ rakudo: Use slightly faster nqp::how_nd where possible

[23:31] <Geth> ¦ rakudo: 

[23:32] <Geth> ¦ rakudo: Where we can guarantee that no container would slip in.

[23:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/808b07682a

[23:32] <Geth> ¦ rakudo: e7acf4930a | (Vadim Belman)++ (committed using GitHub Web editor) | src/vm/moar/dispatchers.nqp

[23:32] <Geth> ¦ rakudo: Merge pull request #4981 from vrurg/rakudo-4980

[23:32] <Geth> ¦ rakudo: 

[23:32] <Geth> ¦ rakudo: Fix a deep recursion issue in return typecheck dispatcher

[23:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e7acf4930a

[23:45] *** melezhik left
