[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[01:09] *** unicodable6 left
[01:09] *** shareable6 left
[01:09] *** reportable6 left
[01:09] *** notable6 left
[01:09] *** coverable6 left
[01:09] *** tellable6 left
[01:09] *** statisfiable6 left
[01:09] *** committable6 left
[01:09] *** sourceable6 left
[01:09] *** linkable6 left
[01:09] *** benchable6 left
[01:09] *** quotable6 left
[01:09] *** evalable6 left
[01:09] *** bloatable6 left
[01:09] *** squashable6 left
[01:09] *** greppable6 left
[01:09] *** releasable6 left
[01:09] *** bisectable6 left
[01:09] *** nativecallable6 left
[01:10] *** committable6 joined
[01:10] *** evalable6 joined
[01:10] *** sourceable6 joined
[01:10] *** shareable6 joined
[01:10] *** linkable6 joined
[01:11] *** quotable6 joined
[01:11] *** reportable6 joined
[01:11] *** squashable6 joined
[01:11] *** bisectable6 joined
[01:11] *** notable6 joined
[01:11] *** unicodable6 joined
[01:11] *** benchable6 joined
[01:11] *** statisfiable6 joined
[01:11] *** bloatable6 joined
[01:11] *** coverable6 joined
[01:12] *** tellable6 joined
[01:12] *** releasable6 joined
[01:12] *** greppable6 joined
[01:12] *** nativecallable6 joined
[03:32] *** frost joined
[04:32] *** greppable6 left
[04:32] *** statisfiable6 left
[04:32] *** notable6 left
[04:32] *** squashable6 left
[04:32] *** sourceable6 left
[04:32] *** coverable6 left
[04:32] *** quotable6 left
[04:32] *** linkable6 left
[04:32] *** nativecallable6 left
[04:32] *** tellable6 left
[04:32] *** benchable6 left
[04:32] *** committable6 left
[04:32] *** shareable6 left
[04:32] *** bisectable6 left
[04:32] *** bloatable6 left
[04:32] *** unicodable6 left
[04:32] *** reportable6 left
[04:32] *** evalable6 left
[04:32] *** releasable6 left
[04:32] *** shareable6 joined
[04:32] *** releasable6 joined
[04:32] *** evalable6 joined
[04:33] *** squashable6 joined
[04:33] *** greppable6 joined
[04:33] *** nativecallable6 joined
[04:33] *** unicodable6 joined
[04:33] *** statisfiable6 joined
[04:33] *** notable6 joined
[04:33] *** committable6 joined
[04:34] *** benchable6 joined
[04:34] *** quotable6 joined
[04:34] *** coverable6 joined
[04:34] *** linkable6 joined
[04:34] *** reportable6 joined
[04:34] *** bloatable6 joined
[04:35] *** sourceable6 joined
[04:35] *** bisectable6 joined
[04:35] *** tellable6 joined
[05:35] *** statisfiable6 left
[05:35] *** greppable6 left
[05:35] *** notable6 left
[05:35] *** bloatable6 left
[05:35] *** committable6 left
[05:35] *** bisectable6 left
[05:35] *** nativecallable6 left
[05:35] *** benchable6 left
[05:35] *** unicodable6 left
[05:35] *** releasable6 left
[05:35] *** squashable6 left
[05:35] *** evalable6 left
[05:35] *** reportable6 left
[05:35] *** tellable6 left
[05:35] *** coverable6 left
[05:35] *** shareable6 left
[05:35] *** quotable6 left
[05:35] *** linkable6 left
[05:35] *** sourceable6 left
[05:35] *** coverable6 joined
[05:36] *** bloatable6 joined
[05:36] *** unicodable6 joined
[05:36] *** sourceable6 joined
[05:36] *** evalable6 joined
[05:36] *** squashable6 joined
[05:36] *** quotable6 joined
[05:36] *** greppable6 joined
[05:37] *** benchable6 joined
[05:37] *** nativecallable6 joined
[05:37] *** releasable6 joined
[05:37] *** tellable6 joined
[05:37] *** bisectable6 joined
[05:38] *** linkable6 joined
[05:38] *** shareable6 joined
[05:38] *** notable6 joined
[05:38] *** statisfiable6 joined
[05:38] *** reportable6 joined
[05:38] *** committable6 joined
[06:06] *** reportable6 left
[06:08] *** reportable6 joined
[09:09] *** linkable6 left
[09:09] *** benchable6 left
[09:09] *** committable6 left
[09:09] *** nativecallable6 left
[09:09] *** statisfiable6 left
[09:09] *** sourceable6 left
[09:09] *** notable6 left
[09:09] *** coverable6 left
[09:09] *** greppable6 left
[09:09] *** bisectable6 left
[09:09] *** shareable6 left
[09:09] *** unicodable6 left
[09:09] *** squashable6 left
[09:09] *** evalable6 left
[09:09] *** quotable6 left
[09:09] *** releasable6 left
[09:09] *** tellable6 left
[09:09] *** bloatable6 left
[09:09] *** releasable6 joined
[09:09] *** shareable6 joined
[09:09] *** sourceable6 joined
[09:09] *** quotable6 joined
[09:10] *** statisfiable6 joined
[09:10] *** tellable6 joined
[09:10] *** benchable6 joined
[09:10] *** unicodable6 joined
[09:10] *** nativecallable6 joined
[09:10] *** greppable6 joined
[09:11] *** squashable6 joined
[09:11] *** bisectable6 joined
[09:11] *** committable6 joined
[09:11] *** notable6 joined
[09:11] *** evalable6 joined
[09:11] *** coverable6 joined
[09:12] *** linkable6 joined
[09:12] *** bloatable6 joined
[09:16] <Geth> ¦ rakudo/lizmat-v-check: 493d9f3fd2 | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp
[09:16] <Geth> ¦ rakudo/lizmat-v-check: Don't blindly make a Version object for vN
[09:16] <Geth> ¦ rakudo/lizmat-v-check: 
[09:16] <Geth> ¦ rakudo/lizmat-v-check: First look up whether there's a lexical symbol for it, and use that
[09:16] <Geth> ¦ rakudo/lizmat-v-check: if we found it.  Should fix #3919
[09:16] <Geth> ¦ rakudo/lizmat-v-check: review: https://github.com/rakudo/rakudo/commit/493d9f3fd2
[09:16] <Geth> ¦ rakudo: lizmat++ created pull request #5020: Don't blindly make a Version object for vN
[09:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5020
[09:57] <Geth> ¦ rakudo/lizmat-io-path-created: cc4a31735d | (Elizabeth Mattijsen)++ | 2 files
[09:57] <Geth> ¦ rakudo/lizmat-io-path-created: Add IO::Path.created returning the Instant a path was created
[09:57] <Geth> ¦ rakudo/lizmat-io-path-created: 
[09:57] <Geth> ¦ rakudo/lizmat-io-path-created: Or returns a Failure if the path does not exist.  Why this wssn't
[09:57] <Geth> ¦ rakudo/lizmat-io-path-created: done before, I don't quite understand, as the NQP support appears
[09:57] <Geth> ¦ rakudo/lizmat-io-path-created: to exist on all backends.
[09:57] <Geth> ¦ rakudo/lizmat-io-path-created: review: https://github.com/rakudo/rakudo/commit/cc4a31735d
[09:57] <Geth> ¦ rakudo: lizmat++ created pull request #5021: Add `IO::Path.created` returning the `Instant` a path was created
[09:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5021
[10:40] *** sena_kun joined
[10:55] *** frost left
[11:19] *** [TuxCM] joined
[11:30] *** Geth left
[11:31] *** Geth joined
[11:53] *** [TuxCM] left
[12:05] *** [TuxCM] joined
[12:07] *** reportable6 left
[12:07] *** reportable6 joined
[13:07] *** linkable6 left
[13:07] *** evalable6 left
[13:08] *** linkable6 joined
[13:08] *** evalable6 joined
[13:47] *** [TuxCM] left
[14:00] *** [Coke]_ joined
[14:02] *** [Coke] left
[15:44] *** discord-raku-bot left
[15:44] *** discord-raku-bot joined
[15:50] *** discord-raku-bot left
[15:50] *** discord-raku-bot joined
[16:04] *** [TuxCM] joined
[16:32] *** sena_kun left
[17:09] *** atroxaper joined
[17:17] <atroxaper> Hello! What do you think about Supply.interval(4 :between).tap(-> $ { #`[something longer then 4 seconds] }). I think that an inability to create in interval with delay between a tap execution is upsetting.
[17:19] <lizmat> not sure what you mean: https://docs.raku.org/routine/interval
[17:19] <lizmat> what is missing there?
[17:25] <atroxaper> lizmat: Let's imagine that tap's lambda takes 5 seconds to execute. Then .interval(3).tap(...) will be executed every 5 seconds. But I want every 8 seconds.
[17:26] <lizmat> you want it to wait 3 seconds after it having executed for 5 seconds
[17:26] <atroxaper> Yes.
[17:27] <lizmat> and if it happened to need 10 seconds for execution, then 3 on top of that ?
[17:27] <atroxaper> yes.
[17:28] <lizmat> do you have control on when something starts executing ?
[17:28] <atroxaper> I even implemented it by custom Tappable class. But I want to consult is it good to add it to the Rakudo code.
[17:29] <lizmat> well, if you want to make it a PR, then make it a PR, then you'll get the right consultation, also by people not necessarily on this channel
[17:29] <atroxaper> I'm talking not about my problem, but about a general user problem - execute something with fixed delay between execution.
[17:30] <lizmat> please make it a PR for more eyes  :-)
[17:31] <atroxaper> lizmat: OK. I thought irc is the first edge for such decisions :)
[17:31] <atroxaper> Going to make a PR.
[17:31] <lizmat> yeah, please.. :-)
[17:57] <leont> How do I force a moar rebuild when building a rakudo (I used --gen-moar in Configure)
[18:06] *** reportable6 left
[18:07] *** reportable6 joined
[18:07] <lizmat> --force-rebuild
[18:08] <leont> On Configure?
[18:08] <leont> Yeah that seems to be doing something
[18:14] <lizmat> afk&
[18:29] *** [Coke]_ is now known as [Coke]
[18:55] *** atroxaper left
[19:52] <patrickb> o/
[20:20] *** discord-raku-bot left
[20:20] *** discord-raku-bot joined
[20:25] *** sena_kun joined
[20:49] <patrickb> The Rakudo CI bot approaches the point where it becomes reasonable to target it at the live repos (instead of some test repos I have set up).
[20:52] <patrickb> But it's probable it will not work flawlessly at first. Worst case are unhelpful CI test entries that are false negative or never turn green.
[20:57] <sena_kun> patrickb, I am sure false positives are worse than false negatives.
[20:58] <sena_kun> I mean, if you have false positive for commit X and it's a flapper, the commit X+1 will complain, but if you have false positives people tend to ignore the whole system.
[20:59] <patrickb> I guess both are possible. Point is: Should I "publish" early and basically force all devs to be testers, or continue developing in private with no one benefiting in the short run?
[21:25] *** evalable6 left
[21:28] *** evalable6 joined
[21:40] * sena_kun is not the core dev
[21:41] <sena_kun> patrickb, since all the repos are linked, I'm not sure if it's possible to do some sort of "partial" exposure? Say only moarvm.
[21:41] *** sena_kun left
[21:42] *** sena_kun left
[21:51] *** pamplemousse joined
[22:03] <patrickb> That should be possible.
[22:14] <patrickb> \q
[22:28] *** pamplemousse left
[23:28] *** linkable6 left
[23:28] *** evalable6 left
[23:29] *** linkable6 joined
[23:31] *** evalable6 joined
[23:34] *** pamplemousse joined
[23:42] *** pamplemousse left
