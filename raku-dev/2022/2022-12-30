[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:02] *** epony joined
[00:22] *** NemokoschKiwi joined
[00:39] *** NemokoschKiwi left
[04:45] *** linkable6 left
[04:45] *** bloatable6 left
[04:45] *** greppable6 left
[04:45] *** coverable6 left
[04:45] *** bisectable6 left
[04:45] *** squashable6 left
[04:45] *** nativecallable6 left
[04:45] *** unicodable6 left
[04:45] *** reportable6 left
[04:45] *** committable6 left
[04:45] *** releasable6 left
[04:45] *** tellable6 left
[04:45] *** benchable6 left
[04:45] *** quotable6 left
[04:45] *** statisfiable6 left
[04:45] *** sourceable6 left
[04:45] *** shareable6 left
[04:45] *** evalable6 left
[04:45] *** notable6 left
[04:45] *** statisfiable6 joined
[04:45] *** notable6 joined
[04:46] *** benchable6 joined
[04:46] *** releasable6 joined
[04:46] *** squashable6 joined
[04:46] *** committable6 joined
[04:46] *** coverable6 joined
[04:46] *** bloatable6 joined
[04:46] *** reportable6 joined
[04:46] *** sourceable6 joined
[04:46] *** nativecallable6 joined
[04:46] *** bisectable6 joined
[04:47] *** quotable6 joined
[04:47] *** linkable6 joined
[04:47] *** shareable6 joined
[04:47] *** tellable6 joined
[04:47] *** unicodable6 joined
[04:47] *** greppable6 joined
[04:48] *** evalable6 joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:42] *** evalable6 left
[07:42] *** linkable6 left
[07:44] *** evalable6 joined
[07:45] *** linkable6 joined
[08:50] *** sena_kun joined
[09:21] *** discord-raku-bot left
[10:30] *** sena_kun left
[10:35] *** discord-raku-bot joined
[10:39] *** discord-raku-bot left
[10:40] *** discord-raku-bot joined
[11:01] <Manifest0> vrurg: It seems when i use MVM_SPESH_DISABLE=1 the issue doesn't happen. However i will tell with more confidence with more testing time.

[11:18] *** sena_kun joined
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[14:27] <vrurg> Manifest0: yep, that normally points at moar itself. For more detailed coredump you could build a debug version. I normally do it with `./Configure.pl --gen-moar --gen-nqp --backends=moar --make-install --moar-option='--debug=3' --moar-option='--no-optimize'`. For own convenience I do it in a dedicated directory and register that installation with rakubrew.

[14:31] <vrurg> Manifest0: BTW, if you do that Configure.pl in a previously configured repo directory then add --force-rebuild.

[15:08] <Manifest0> vrurg: I use archlinux. Let's see if i can rebuild the moarvm with those options.

[15:10] <nine> I just run this in my MoarVM checkout: perl Configure.pl --prefix=/home/nine/rakudo/install --debug --optimize=0 --valgrind && make NOISY=1 -j35 install

[15:11] <nine> No rakudo rebuild needed. I have that in a script called debug-on and there's a corresponding debug-off script, so I can switch quickly

[15:14] *** sena_kun left
[15:43] *** Kaiepi left
[15:58] <Manifest0> https://paste.opensuse.org/pastes/8c4d8ead58ff

[15:59] <Manifest0> I can provide the binary if someone interested

[16:00] <Manifest0> This was done with moarvm with the flags --debug=3 and --no-optimize 

[16:01] *** sena_kun joined
[16:05] *** Kaiepi joined
[16:10] <vrurg> Manifest0: it certainly worth opening an issue in https://github.com/MoarVM/MoarVM.

[16:11] <Manifest0> but i don't have any more info. Just paste there the core dump?

[16:12] <vrurg> And explain the surrounding circumstances.

[16:13] <vrurg> What confuses me in your dump is that it doesn't report which thread has actually thrown. And it doesn't include any detailed info. Best if a dump is produced with gdb. It gives the most details possible.

[16:17] <Manifest0> will run it inside of gdb. Give me a couple mins

[16:21] <vrurg> Ah, I see what happens. I rarely do C debugging, details are slipping out of my memory. So, with a post-mortem dumps I used to use `coredumpctl debug <PID>` (Mint distro). Then it opens with the faulty thread backtrace. So, never noticed that they actually don't report it in the header.

[16:24] <vrurg> Need to go. Good luck!

[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:13] *** discord-raku-bot left
[18:13] *** discord-raku-bot joined
[21:19] <Manifest0> Does anybody knows how to dump everything inside the gbd?

[21:20] <Manifest0> Thread 16 "raku" received signal SIGSEGV, Segmentation fault.

[21:20] <Manifest0> [Switching to Thread 0x7fffceffd6c0 (LWP 235738)]

[21:20] <Manifest0> 0x00007ffff796c774 in uv_fileno () from /usr/lib/libmoar.so

[21:20] <Manifest0> (gdb)

[21:21] <ugexe> thread apply all bt

[21:24] <Manifest0> thanks. Lots of stuff, let me paste it

[21:25] <Manifest0> https://paste.opensuse.org/pastes/fcc1f5fab1cd

[21:27] <ugexe> what is your code using? async tcp sockets, async udp sockets, or spawning processes?

[21:29] <Manifest0> i'm using Cro::HTTP::Client inside promises

[21:30] <Manifest0> react {whenever Supply.Interval(120) {start $lock.protect: { *do stuff with http client* } whenever... }

[22:06] *** epony left
[22:09] <Manifest0> Created this github issue: https://github.com/MoarVM/MoarVM/issues/1732

[22:09] <Manifest0> please let me know if more info is required

[22:27] *** epony joined
[22:47] *** sena_kun left
[22:59] *** squashable6 left
[23:02] *** squashable6 joined
[23:23] *** Xliff joined
