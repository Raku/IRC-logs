[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[00:56] *** frost joined
[01:19] *** frost left
[01:59] *** frost joined
[02:05] *** frost left
[02:24] *** frost joined
[02:30] *** frost left
[02:43] *** frost joined
[03:12] *** discord-raku-bot left
[03:12] *** discord-raku-bot joined
[03:16] *** frost left
[03:21] *** frost joined
[03:41] *** frost left
[03:51] *** frost joined
[03:56] *** frost left
[06:07] *** reportable6 left
[06:19] *** frost joined
[07:10] *** reportable6 joined
[07:38] *** frost left
[07:47] *** frost joined
[07:53] *** frost left
[08:46] <nine> Ooooh....now I know where the spectest failures on my laptop are coming from. I've got 6.d-errata checked out

[09:02] <Geth> ¦ rakudo/fix_unsigned_for_merge: 6 commits pushed by (Stefan Seifert)++

[09:02] <Geth> ¦ rakudo/fix_unsigned_for_merge: 144f2a8b2c | Set up nativeref types for unsigned integers

[09:02] <Geth> ¦ rakudo/fix_unsigned_for_merge: 878c2434fd | Support primspec 10 for unsigned integers

[09:02] <Geth> ¦ rakudo/fix_unsigned_for_merge: f31718c365 | Also check iscont_u when looking for native references

[09:02] <Geth> ¦ rakudo/fix_unsigned_for_merge: 86fd1e25ae | Support uints as their own argument kind in dispatch

[09:02] <Geth> ¦ rakudo/fix_unsigned_for_merge: 118d8fdb37 | Use unsigned ops when handling unsigned buffers

[09:02] <Geth> ¦ rakudo/fix_unsigned_for_merge: 19be217ffd | Fix is_array_type on roles

[09:02] <Geth> ¦ rakudo/fix_unsigned_for_merge: review: https://github.com/rakudo/rakudo/compare/7b0fa9e13dd5...19be217ffdbb

[10:13] *** linkable6 left
[10:13] *** evalable6 left
[10:16] *** evalable6 joined
[10:27] *** frost joined
[10:32] *** frost left
[10:42] *** frost joined
[10:55] *** frost left
[11:02] *** frost joined
[11:26] *** frost left
[11:47] *** frost joined
[11:51] *** frost left
[12:07] *** reportable6 left
[12:14] *** linkable6 joined
[13:07] *** frost joined
[13:33] *** carlmasak joined
[13:41] *** frost left
[14:08] <lizmat> m: dd 0.8144262510988963255087469.nude   # what's wrong with this picture ?

[14:08] <camelia> rakudo-moar a90369e10: OUTPUT: «(8144262510988963255087469, 10000000000000000000000000)␤»

[14:08] <lizmat> m: dd 0.8144262510988963255087469.^name

[14:08] <camelia> rakudo-moar a90369e10: OUTPUT: «"Rat"␤»

[14:08] <lizmat> both values *exceed* the size of 64 native ints

[14:10] *** reportable6 joined
[14:12] <lizmat> but we're ok with that, as Rats currently are created with Int attributes, rather than with 'int" attributes

[14:14] <moon-child> inb4 rat (with a lowercase r)

[14:14] <codesections> lizmat that's all correct (at least according to the current docs)

[14:14] <lizmat> m: dd Rat.new(8144262510988963255087469,10000000000000000000000000).nude   # the real issue

[14:14] <camelia> rakudo-moar a90369e10: OUTPUT: «(8144262510988963255087469, 10000000000000000000000000)␤»

[14:15] <lizmat> that should either have become a Num or a FatRat, or warn or die

[14:15] <lizmat> basically, we don't check for upgrading on creation of a Rat

[14:15] <lizmat> and perhaps we should ?

[14:15] <moon-child> ah, yeah, because:

[14:16] <codesections> The docs *explicitly* allow for that, though: "When constructing a Rat (i.e. when it is not a result of some mathematical expression), however, a larger denominator can be used"

[14:16] <moon-child> m: my $x = Rat.new(8144262510988963255087469,10000000000000000000000000); say WHAT $x; say WHAT 1*$x;

[14:16] <camelia> rakudo-moar a90369e10: OUTPUT: «(Rat)␤(Num)␤»

[14:16] <moon-child> seems odd

[14:16] <codesections> and give my $c = Rat.new(1, 2⁶⁴); as an example

[14:16] <lizmat> seems to me the docs are describing current behaviour rather than desired behaviour

[14:17] <lizmat> if Rats had been created with native ints, this would not have worked

[14:18] <codesections> Well, in general the docs don't (intentionally) describe bugs – so the author of that section (Zoffix, I think?) thought it was desired 

[14:19] <moon-child> S02-types/num.t: ‘Rat supports extended precision rational arithmetic’

[14:19] *** carlmasak left
[14:19] <nine> Or just didn't know any better

[14:22] <codesections> Hmm, that section of the docs previously read:

[14:22] <codesections> > When I<constructing> a L<Rat> (i.e. when it is not

[14:22] <codesections> a result of some mathematical expression), however, a "fattish" L<Rat> with

[14:22] <codesections> larger denominator will be created.

[14:23] <codesections> https://github.com/Raku/doc/blame/6c9a97c23016c1768b4f45c5e8458fe11ef06fe6/doc/Language/numerics.pod6

[14:23] <codesections> (not sure what a "fattish" Rat is :D )

[14:25] <MasterDuke> we used to have Texas operators, we could have NYC rats...

[14:25] <moon-child> haha

[14:25] <lizmat> well, the "fattish" Rat is a Rat with out of range numerator / denominator values

[14:25] <lizmat> that *would* be ok in a FatRat

[14:26] <codesections> MasterDuke: no thanks! nude FatRats are frightening enough

[14:27] <lizmat> of course, if we would silently upgrade to FatRat or downgrade to Num, this would fail:

[14:27] <lizmat> m: my Rat $a = 0.8144262510988963255087469

[14:27] <camelia> rakudo-moar a90369e10: ( no output )

[14:28] <lizmat> m: say Num ~~ Rat; say FatRat ~~ Rat

[14:28] <camelia> rakudo-moar a90369e10: OUTPUT: «False␤False␤»

[14:28] <codesections> lizmat yeah.  And that change was based on a Rat normalization grant, so it presumably _was_ intentional 4 years ago.  (Which isn't to say it's correct, just probably not an accident) 

[14:29] <moon-child> m: say Rat ~~ FatRat

[14:29] <camelia> rakudo-moar a90369e10: OUTPUT: «False␤»

[14:29] <lizmat> if we leave things as they are, then I think that

[14:29] <lizmat> 0.8144262510988963255087469 would need a compile time worry

[14:48] *** MasterDuke left
[14:50] <lizmat> afk for a few hours&

[14:52] *** qorg11 left
[14:53] *** qorg11 joined
[15:06] *** carlmasak joined
[15:06] *** MasterDuke joined
[15:16] *** carlmasak left
[15:36] *** carlmasak joined
[15:36] *** carlmasak left
[16:31] *** kjp left
[16:34] *** kjp joined
[17:24] <codesections> .tell lizmat it looks like the `Rat` initialization is intentional (with the goal of letting users have a Rat that can be used with full precision with FatRats but isn't infectious).  See https://news.perlfoundation.org/post/grant_proposal_perl_6_bugfixin (describing a `MidRat` to provide this functionality) and

[17:24] <codesections> http://blogs.perl.org/users/zoffix_znet/2018/05/perl-6-car-tpf-grant-monthly-report-may-2018.html (deciding to fold that into `Rat` instead of adding `MidRat`) 

[17:24] <tellable6> codesections, I'll pass your message to lizmat

[17:24] <lizmat> codesections: but that is not achieved, as precision is lost!

[17:26] <codesections> Well, only when it's printed :) 

[17:27] <codesections> m: my $var = 0.8144262510988963255087469; my $var2 = 1.FatRat × $var; say $var2;

[17:27] <camelia> rakudo-moar a90369e10: OUTPUT: «0.8144262510988963255087469␤»

[17:28] <lizmat> m: my $var = 0.8144262510988963255087469; my $var2 = 1 × $var; say $var2

[17:28] <camelia> rakudo-moar a90369e10: OUTPUT: «0.8144262510988963␤»

[17:28] <lizmat> m: my $var = 0.8144262510988963255087469; my $var2 = 2 × $var; say $var2

[17:28] <camelia> rakudo-moar a90369e10: OUTPUT: «1.6288525021977927␤»

[17:28] <lizmat> looks to me it's losing precision unless you *know* you want a FatRat ?

[17:29] <lizmat> in any case, I just found out that 0.1234.FatRat is codegenned as a fattish constant Rat with the .FatRat called on it at runtime :-(

[17:30] <codesections> It's a weird creature.  It _has_ the precision internally, but it loses it whenever it's used with anything other than a FatRat

[17:30] <lizmat> and since a FatRat is not a Rat, we cannot just simply create a FatRat constanrt

[17:31] <lizmat> meh

[17:33] <codesections> It seems like your idea of special-casing how Rats print when they have a denominator that's a power of 10 would solve 95% of the issue

[17:35] <lizmat> actually, that was a bad idea

[17:36] <MasterDuke> m: class A is FatRat {}.new.raku.say; class B is Rational {}.new.raku.say   a bunch of other classes have this problem, they hard-code their name in their `method raku` instead of using `self.^name`

[17:36] <camelia> rakudo-moar a90369e10: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> say; class B is Rational {}.new.raku.say⏏   a bunch of other classes have this pr␤    expecting any of:␤        infix␤        infix stopper␤ …»

[17:37] <MasterDuke> m: class A is FatRat {}.new.raku.say; class B is Rational {}.new.raku.say  # a bunch of other classes have this problem, they hard-code their name in their `method raku` instead of using `self.^name`

[17:37] <camelia> rakudo-moar a90369e10: OUTPUT: «FatRat.new(0, 1)␤B.new(numerator => 0, denominator => 1)␤»

[17:39] <[Coke]> MasterDuke: that seems like an easy fix, yes?

[17:45] <lizmat> yeah, that'd be an easy fix

[17:57] <[Coke]> We should probably have a spectest that loops through all the predefined classes, subclasses them, and verifies that the new subclass appears in the raku.

[18:04] *** cognominal joined
[18:04] <codesections> [Coke] would there be any cases where we *don't* want the subclass name in the .raku output?  (I'm wondering if it's ever a signal that the .raku method is a bit "weird")

[18:05] <[Coke]> ... that's possible, but easy enough to adjust the list of classes we're testing.

[18:05] <[Coke]> probably want a specific list not "iterate all classes"

[18:06] *** squashable6 left
[18:06] <codesections> m: my class A is FatRat { has $.attribute}; my $a = A.new: :attribute<value I expected to see>; say $a.raku

[18:06] <camelia> rakudo-moar a90369e10: OUTPUT: «FatRat.new(0, 1)␤»

[18:07] <cognominal> Happy new year to everyone.

[18:07] <codesections> I'm not sure that the string "FatRat" is the *most* surprising part of ^^^

[18:08] <codesections> cognominal same to you 🎉

[18:08] *** reportable6 left
[18:09] <Geth> ¦ rakudo: d6e6afb0b1 | (Elizabeth Mattijsen)++ | src/core.c/Rat.pm6

[18:09] <Geth> ¦ rakudo: Make sure that subclasses of FatRat .raku correctly

[18:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d6e6afb0b1

[18:10] *** reportable6 joined
[18:24] *** squashable6 joined
[18:38] <Geth> ¦ rakudo: 82afbbf04d | (Elizabeth Mattijsen)++ | src/core.c/Rat.pm6

[18:38] <Geth> ¦ rakudo: Make Rat.FatRat about 5x as fast

[18:38] <Geth> ¦ rakudo: 

[18:38] <Geth> ¦ rakudo: Since the Rat's attributes are already normalized, there is no

[18:38] <Geth> ¦ rakudo: reason to go through the whole normalization process again.

[18:38] <Geth> ¦ rakudo: 

[18:38] <Geth> ¦ rakudo: This also affects FatRat literals in the form 0.1234.FatRat, as

[18:38] <Geth> ¦ rakudo: these are currently codegenned as Rat WVal's with the .FatRat

[18:38] <Geth> ¦ rakudo: method called on them at runtime.

[18:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/82afbbf04d

[19:06] <Geth> ¦ rakudo/FatRat-literals: dc4d54020c | (Elizabeth Mattijsen)++ | 3 files

[19:06] <Geth> ¦ rakudo/FatRat-literals: Make FatRat literals codegen as WVals

[19:06] <Geth> ¦ rakudo/FatRat-literals: 

[19:06] <Geth> ¦ rakudo/FatRat-literals: A literal as .123.FatRat was codegenned as a Rat WVal and a call to

[19:06] <Geth> ¦ rakudo/FatRat-literals: the .FatRat method at runtime: it is now codegenned as a FatRat WVal.

[19:06] <Geth> ¦ rakudo/FatRat-literals: 

[19:06] <Geth> ¦ rakudo/FatRat-literals: Also, if a Rat literal exceeds the precision of a Rat, it will issue

[19:06] <Geth> ¦ rakudo/FatRat-literals: a worry that mentions to either make it a Num or a FatRat.

[19:06] <Geth> ¦ rakudo/FatRat-literals: review: https://github.com/rakudo/rakudo/commit/dc4d54020c

[19:07] <Geth> ¦ rakudo: lizmat++ created pull request #4710: Make FatRat literals codegen as WVals

[19:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4710

[19:07] *** [Coke]_ joined
[19:07] <lizmat> codesections:  https://github.com/rakudo/rakudo/pull/4710

[19:10] *** [Coke] left
[19:10] <lizmat> afk&

[20:52] *** [Coke]_ left
[20:55] *** [Coke] joined
[21:18] <Geth> ¦ tap-harness6: 74b2f6d1d1 | (Leon Timmermans)++ | lib/TAP.pm

[21:18] <Geth> ¦ tap-harness6: Rename variables in Test::Harness::run for simplification

[21:18] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/commit/74b2f6d1d1

[21:18] <Geth> ¦ tap-harness6: 73c3a95516 | (Leon Timmermans)++ | lib/TAP.pm

[21:18] <Geth> ¦ tap-harness6: Allow Supplier as output handle

[21:18] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/commit/73c3a95516

[21:18] <Geth> ¦ tap-harness6: cacf119e85 | (Leon Timmermans)++ | 3 files

[21:18] <Geth> ¦ tap-harness6: 0.3.0

[21:19] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/commit/cacf119e85

[22:09] *** cognominal left
[22:10] *** cognominal joined
[22:11] *** cognominal left
[23:51] *** evalable6 left
[23:51] *** linkable6 left
[23:53] *** linkable6 joined
