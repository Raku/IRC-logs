[00:05] *** reportable6 left
[00:08] *** reportable6 joined
[01:46] *** frost joined
[03:07] *** evalable6 left
[03:07] *** shareable6 left
[03:07] *** reportable6 left
[03:07] *** quotable6 left
[03:07] *** bloatable6 left
[03:07] *** linkable6 left
[03:07] *** greppable6 left
[03:07] *** releasable6 left
[03:07] *** unicodable6 left
[03:07] *** committable6 left
[03:07] *** squashable6 left
[03:07] *** nativecallable6 left
[03:07] *** bisectable6 left
[03:07] *** benchable6 left
[03:07] *** tellable6 left
[03:07] *** statisfiable6 left
[03:07] *** sourceable6 left
[03:07] *** notable6 left
[03:07] *** coverable6 left
[03:08] *** tellable6 joined
[03:08] *** bloatable6 joined
[03:08] *** linkable6 joined
[03:09] *** squashable6 joined
[03:09] *** committable6 joined
[03:09] *** shareable6 joined
[03:09] *** reportable6 joined
[03:10] *** greppable6 joined
[03:10] *** notable6 joined
[04:00] *** Xliff left
[04:00] *** Xliff joined
[04:07] *** releasable6 joined
[04:09] *** coverable6 joined
[04:10] *** sourceable6 joined
[05:08] *** quotable6 joined
[05:08] *** unicodable6 joined
[05:09] *** benchable6 joined
[05:10] *** nativecallable6 joined
[05:36] *** squashable6 left
[05:37] *** squashable6 joined
[05:50] *** Voldenet_ joined
[05:50] *** Voldenet left
[05:50] *** Voldenet_ is now known as Voldenet

[06:07] *** reportable6 left
[06:08] *** evalable6 joined
[06:08] *** reportable6 joined
[06:10] *** statisfiable6 joined
[07:10] *** evalable6 left
[07:10] *** linkable6 left
[07:13] *** evalable6 joined
[07:43] *** frost left
[08:08] *** bisectable6 joined
[08:22] *** squashable6 left
[09:13] *** frost joined
[09:23] *** squashable6 joined
[10:24] <gfldex> Is there a reason why Label does not expose $!line and $!file? In .gist they are used and as such not really hidden.

[10:32] <lizmat> I don't see a reason why they could not be exposed, fwiw

[10:32] <lizmat> Files=1351, Tests=117115, 296 wallclock secs (35.16 usr  9.54 sys + 4082.92 cusr 328.76 csys = 4456.38 CPU)

[10:32] *** frost left
[11:55] <Geth> ¦ rakudo: gfldex++ created pull request #4804: expose $!file and $!line in Label

[11:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4804

[12:07] *** reportable6 left
[12:15] *** Altai-man joined
[12:32] *** [Coke] left
[13:10] *** reportable6 joined
[13:47] *** frost joined
[14:12] *** linkable6 joined
[14:38] *** [Coke] joined
[15:04] <|Tux|> Rakudo v2022.02-82-g8fb0a66dc (v6.d) on MoarVM 2022.02-7-g2b96d1828

[15:04] <|Tux|> csv-test-xs-20      0.426 -  0.432

[15:04] <|Tux|> csv-ip5xs           0.782 -  0.805

[15:04] <|Tux|> test-t --race       0.944 -  0.970

[15:04] <|Tux|> test-t              1.588 -  1.590

[15:04] <|Tux|> csv-parser          3.958 -  4.126

[15:04] <|Tux|> csv-ip5xs-20        5.043 -  5.259

[15:04] <|Tux|> test                6.510 -  6.563

[15:04] <|Tux|> test-t-20 --race    7.599 -  7.600

[15:04] <|Tux|> test-t-20          24.271 - 24.445

[15:19] *** Xliff left
[16:16] <[Coke]> is there a way to get a list of modules you installed specifically as opposed to all the ones that are installed?

[16:17] <[Coke]> Would simplify my "force-update rakudo install" script (right now getting a lot of "All candidates are currently installed" at the end since I already installed them as deps of something else)

[16:19] <[Coke]> It's in no way necessary for what I'm doing, but would be nice to have, I think

[16:31] <Altai-man> lizmat, new comma complete just got released, not sure if fits for the weekly.

[16:42] <Altai-man> https://twitter.com/koto_san_kana/status/1498337731067457545 <-

[16:59] <[Coke]> notable6: https://twitter.com/koto_san_kana/status/1498337731067457545 from altai-man

[16:59] <notable6> [Coke], I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Notable

[16:59] <[Coke]> notable6: weekly https://twitter.com/koto_san_kana/status/1498337731067457545 from altai-man

[16:59] <notable6> [Coke], Noted! (weekly)

[17:00] <Altai-man> [Coke], thanks!

[17:17] <ugexe> [Coke]: if you feed zef the list of all modules at once you shouldnt get that message

[17:17] <ugexe> assuming it can all fit in however many characters are allowed for a single command

[17:18] <ugexe> zef install Foo Bar Baz ABC EFG HIJ

[17:20] <ugexe> or write out your list of installed modules to a META6.json with no modules but all the depends listed (which you can then `zef install .`)

[17:23] <ugexe> its also better to do `zef install Foo Bar Baz` instead of `zef install Foo && zef install Bar && zef install Baz` because the former can build a more precise dependency graph, use additional parallelism, and have less overhead in general

[17:25] <ugexe> boths ways work, just zef can take advantage of the additional context when you provide them all in one command

[17:27] <[Coke]> ugexe: fair point, I was doing them one at a time

[17:27] <[Coke]> worth updating just for the ||ism

[17:29] <ugexe> testing itself isn't done by default in parallel yet (although it can be with e.g. --test-degree=42) because module loading isn't thread safe, but fetching and extracting are (and in the future testing will be as well)

[17:59] *** Altai-man left
[18:08] *** reportable6 left
[18:08] *** reportable6 joined
[18:16] <ugexe> while there is an issue testing in parallel it actually wouldn't be because of the thread safety of module loading

[18:16] <ugexe> mispoke on that point

[18:26] *** discord-raku-bot left
[18:26] *** discord-raku-bot joined
[18:30] *** discord-raku-bot left
[18:31] *** discord-raku-bot joined
[18:49] *** Xliff joined
[18:51] <Xliff> Has there been any thought as to being able to introspect t he actual AST of defined objects with RakuAST?

[18:53] <Xliff> sub a ($a) { $a = 42 }; &a.ast <- returns RakuAST that would create &a

[18:54] <Xliff> Of course, the returned AST would be immutable.

[20:07] *** bisectable6 left
[20:07] *** releasable6 left
[20:07] *** statisfiable6 left
[20:07] *** squashable6 left
[20:07] *** coverable6 left
[20:07] *** evalable6 left
[20:07] *** committable6 left
[20:07] *** tellable6 left
[20:07] *** sourceable6 left
[20:07] *** quotable6 left
[20:07] *** shareable6 left
[20:07] *** benchable6 left
[20:07] *** nativecallable6 left
[20:07] *** unicodable6 left
[20:07] *** reportable6 left
[20:07] *** notable6 left
[20:07] *** greppable6 left
[20:07] *** bloatable6 left
[20:07] *** linkable6 left
[20:08] *** bloatable6 joined
[20:08] *** nativecallable6 joined
[20:08] *** reportable6 joined
[20:08] *** committable6 joined
[20:08] *** releasable6 joined
[20:08] *** shareable6 joined
[20:09] *** linkable6 joined
[20:10] *** notable6 joined
[20:10] *** bisectable6 joined
[20:10] *** quotable6 joined
[20:10] *** statisfiable6 joined
[20:47] *** discord-raku-bot left
[20:47] *** discord-raku-bot joined
[21:07] *** evalable6 joined
[21:08] *** tellable6 joined
[21:08] *** coverable6 joined
[21:41] *** MitarashiDango[m joined
[22:07] *** unicodable6 joined
[22:08] *** squashable6 joined
[22:09] *** sourceable6 joined
[22:09] *** greppable6 joined
[22:28] *** sena_kun left
[22:30] *** sena_kun joined
[23:02] *** |Tux| left
[23:32] <Geth> ¦ rakudo: 028828ac88 | (Elizabeth Mattijsen)++ | src/core.c/Label.pm6

[23:32] <Geth> ¦ rakudo: Expose Label.file/line

[23:32] <Geth> ¦ rakudo: 

[23:32] <Geth> ¦ rakudo: To aid introspection and allow self referencing warnings/error messages,

[23:32] <Geth> ¦ rakudo: expose $!file and $!line. Make Label.Str useful.  gfldex++ for the

[23:32] <Geth> ¦ rakudo: impetus.

[23:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/028828ac88

