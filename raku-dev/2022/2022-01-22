[00:03] *** discord-raku-bot left
[00:03] *** discord-raku-bot joined
[00:07] *** reportable6 left
[00:13] <Geth> ¦ roast: 774722cfe8 | (Elizabeth Mattijsen)++ | 2 files

[00:13] <Geth> ¦ roast: UnTODO now passing tests, nine++ for uint work!

[00:13] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/774722cfe8

[00:13] <lizmat> and with that. /me calls it a night

[00:15] *** Geth left
[00:16] *** Geth joined
[01:09] *** reportable6 joined
[01:59] *** linkable6 joined
[03:37] *** linkable6 left
[03:37] *** evalable6 left
[03:39] *** linkable6 joined
[03:40] *** evalable6 joined
[04:30] *** frost joined
[05:09] *** Altai-man joined
[05:11] *** sena_kun left
[05:49] *** frost left
[06:07] *** reportable6 left
[07:07] *** linkable6 left
[07:07] *** evalable6 left
[07:08] *** reportable6 joined
[07:10] *** linkable6 joined
[08:08] *** evalable6 joined
[08:10] <Geth> ¦ rakudo: a64c2f55f9 | (Stefan Seifert)++ | src/core.c/Buf.pm6

[08:10] <Geth> ¦ rakudo: Fix "This container does not reference a native integer" in Blob/Buf

[08:10] <Geth> ¦ rakudo: 

[08:10] <Geth> ¦ rakudo: When initializing a Buf or Blob from a non-iterable holding uints, we errored

[08:10] <Geth> ¦ rakudo: as STORE pushes into the Buf/Blob and there's no push_u yet.

[08:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a64c2f55f9

[08:10] <Geth> ¦ rakudo: fee9e822e5 | (Stefan Seifert)++ | lib/NativeCall/Types.rakumod

[08:10] <Geth> ¦ rakudo: Fix CArray treating all native integers as signed

[08:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fee9e822e5

[09:22] <nine> I've tried to implement push_u instead of the workaround in https://github.com/rakudo/rakudo/commit/a64c2f55f9 but to utilize it I'd have to push Buf's and Blob's STORE candidates into the Signed/Unsigned roles and that causes ambiguous dispatch.

[09:23] <nine> I guess that'll remain something for after my vacation

[09:23] <bartolin_> r: use nqp; my $seen := nqp::hash; say nqp::existskey($seen,(my int $key = 0))

[09:23] <camelia> rakudo-moar fee9e822e: OUTPUT: «0␤»

[09:23] <camelia> ..rakudo-jvm: OUTPUT: «Can't open perl script "/home/camelia/rakudo-j-inst/bin/eval-client.pl": No such file or directory␤»

[09:23] <bartolin_> hmm, rakudo-j complains about "This container does not reference a native string"

[09:24] <bartolin_> m: use nqp; my $seen := nqp::hash; say nqp::existskey($seen,(my $key = 0))

[09:24] <camelia> rakudo-moar fee9e822e: OUTPUT: «This type cannot unbox to a native string: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»

[09:24] <bartolin_> ^^ similar to that error

[09:25] <nine> The error looks correct to me?

[09:25] <bartolin_> this causes some spectest failures for .repeated on native int arrays. The error seems reasonable to me since nqp::existskey wants a str as its second argument

[09:26] <bartolin_> right -- but the code from https://github.com/rakudo/rakudo/commit/369093c837036d2651bc7c1797469d007e32a943 uses this construct

[09:26] <bartolin_> ^^ lizmat 

[09:26] <nine> Oh, that's new code then

[09:26] <bartolin_> (e.g. 'multi method repeated')

[09:27] <bartolin_> yes

[09:30] <bartolin_> the usage of nqp::bindkey in 'multi method repeated(intarray:D:)' also looks a bit strange, since it wants a str as its second argument, too. But that one seems to work somehow.

[09:31] <bartolin_> m: use nqp; my $seen := nqp::hash; nqp::bindkey($seen,(my int $key = 42),1) ## this version blows up on the jvm backend, too

[09:31] <camelia> rakudo-moar fee9e822e: ( no output )

[09:31] <bartolin_> m: use nqp; my $seen := nqp::hash; nqp::bindkey($seen,(my Int $key = 42),1)

[09:31] <camelia> rakudo-moar fee9e822e: OUTPUT: «This type cannot unbox to a native string: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»

[09:36] <bartolin_> nine: btw, the only uint related error I saw was in rakudo's t/04-nativecall/15-rw-args.t (Native call expected argument that references a native integer, but got org.raku.nqp.sixmodel.reprs.NativeRefInstanceIntLex@5155dc15)

[09:36] <bartolin_> do you perhaps remember if you saw that one, too?

[09:37] <bartolin_> not important, I'm just curious

[09:37] <nine> No, I didn't. For me NativeCall tests were passing at the time I pushed the JVM fixes. Is that a regression since then?

[09:37] <bartolin_> I think so, yes (I didn't see that one last week).

[09:38] <MasterDuke> i just saw: t/04-nativecall/05-arrays.t  TODO passed:   39

[09:38] <bartolin_> but again, it's nothing that should worry you too much -- esp. not if you are going to vacation ...

[09:39] <bartolin_> maybe I have a chance to look at it. but good to know that you didn't see it. (Could even be related to me running on FreeBSD.)

[09:40] <nine> MasterDuke: yes, that's a nice side effect of commit fee9e822e513a914ef1a8204e9926ea8aff8efa3

[09:40] <MasterDuke> cool beans

[09:40] *** linkable6 left
[09:41] <bartolin_> and again thanks for porting the uint stuff to the jvm backend. I don't think I would have been able to do that.

[09:42] <nine> Thing is, the Java code is actually nicer to work with than C. I just wish it were a little faster to compile and that I'd have the same level of tooling as for C. jdb is....rather basic

[09:43] <nine> But at least on the 5950X, stage parse is down to ~70s, which makes it somewhat bearable :)

[09:44] <nine> I don't even want to know how long it compiles on my 6 years old laptop :D

[09:45] <bartolin_> 70s -- wow

[09:46] <bartolin_> on the VM I run my stuff it's usually more around 200s :/

[09:46] <nine> That's horrible

[09:47] <nine> I wonder how fast it is on the M1 Mac. I'd guess its memory bandwith could be quite helpful

[09:49] <moon-child> but, no jit

[09:50] <nine> Not even the JVM?

[09:52] <moon-child> oh, right.  Got my wires crossed

[09:53] <MasterDuke> i once tried to profile the jvm build, but i've never actually profiled anything java before (and am pretty out of date with my java dev tools experience) and didn't quite succeed

[09:54] <MasterDuke> but maybe there's some low-hanging fruit for someone to pick up

[09:58] <nine> Tools make a lot of difference

[10:41] *** linkable6 joined
[10:44] <lizmat> bartolin_: on MoarVM you can transparently use natives as keys in nqp::hashes

[10:44] <lizmat> apparently, you cannot on JVM

[10:47] <lizmat> bartolin_: there are other places in the core that use this afaik, these native functions are *not* the only place I think

[10:48] <lizmat> bartolin_: I guess I could put in a "nqp::coerce_is" for the int -> str case

[10:48] <lizmat> but apparently "nqp::coerce_ns" does not exists on the JVM backend?

[10:48] <nine> Could be that the QAST compiler does this automatically on MoarVM

[10:49] <lizmat> bartolin_: just let me know how you want me to proceed on this

[10:50] <nine> Oh, coercion from uint to str is NYI on JVM. Missed that

[10:50] <lizmat> nine: you mean there is a coerce_uis on MoarVM ?

[10:50] <lizmat> or coerce_us ?

[10:51] <nine> there is

[10:51] <lizmat> then ops_markdown needs updating :-)

[10:52] <lizmat> *ops.markdown

[10:52] <lizmat> anything else there that needs updating?

[10:52] <nine> since June 2018

[10:53] <lizmat> I assume moar only

[10:59] <Geth> ¦ nqp: 42712dd8a2 | (Elizabeth Mattijsen)++ | docs/ops.markdown

[10:59] <Geth> ¦ nqp: Add docs for coerce_iu, coerce_us, coerce_ui

[10:59] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/42712dd8a2

[11:03] <bartolin_> lizmat: I have to think about this a bit. I'd say it's not a critical problem for now. If native numbers are coerced to strings automatically on MoarVM, then may it's possible to do that on the JVM as well.

[11:03] <lizmat> ok, I'll await your guidance on that subject then

[11:26] *** nine left
[11:27] *** nine joined
[12:08] *** reportable6 left
[12:08] <Geth> ¦ roast: usev6++ created pull request #786: Tweak some uint tests

[12:08] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/786

[12:09] <lizmat> bartolin_: is a fundge a sort of non fungible fudge ?   :-)

[12:14] <bartolin_> I ... did some stupid typo again?

[12:15] <bartolin_> ah, now I see it. ;) will fix and force push

[12:20] <bartolin_> done. (And it was not an original typo this time, but a copied one.)

[12:22] <lizmat> aah?   ok... I thought in this days of NFTs I thought it was a nice typo  :-)

[12:26] <bartolin_> but you're right -- it was my own invention after all :)

[12:41] *** frost joined
[13:10] *** frost left
[13:11] *** reportable6 joined
[13:28] *** frost joined
[13:48] *** discord-raku-bot left
[13:51] *** discord-raku-bot joined
[14:29] *** frost left
[14:41] <dogbert11> m: my $l = "start = 94 ; end = 96 ; sum = 55"; if (my ($s, $e, $sum) = $l ~~ m:P5/^start = (\d+) ; end = (\d+) ; sum = (-?\d+)$/.list) {say $sum}

[14:41] <camelia> rakudo-moar fee9e822e: OUTPUT: «(Any)␤»

[14:41] <dogbert11> this seems broken

[14:42] <dogbert11> should return 55

[14:45] *** frost joined
[14:45] <dogbert11> bisect: my $l = "start = 94 ; end = 96 ; sum = 55"; if (my ($s, $e, $sum) = $l ~~ m:P5/^start = (\d+) ; end = (\d+) ; sum = (-?\d+)$/.list) {say $sum}

[14:45] <bisectable6> dogbert11, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:46] <bisectable6> dogbert11, Output on all releases: https://gist.github.com/d38d571e88275f82518f75724f62f48d

[14:46] <bisectable6> dogbert11, Bisecting by output (old=2021.12 new=fee9e82) because on both starting points the exit code is 0

[14:46] <bisectable6> dogbert11, bisect log: https://gist.github.com/e93219e0cb5018520bb145e9f95ec859

[14:46] <bisectable6> dogbert11, (2021-12-27) https://github.com/rakudo/rakudo/commit/6b828fe6159ad948aaac24035233ee697a9f72da

[14:46] <bisectable6> dogbert11, Output on all releases and bisected commits: https://gist.github.com/9e357ed38aed5dc5d1e841c2216f728a

[14:46] <dogbert11> looks like something for vrurg

[15:25] *** frost left
[16:25] *** evalable6 left
[16:25] *** linkable6 left
[16:25] *** linkable6 joined
[17:26] *** evalable6 joined
[18:08] *** reportable6 left
[18:33] *** dogbert11 left
[18:34] *** dogbert11 joined
[19:05] <bartolin_> lizmat: I created an issue for the problem with nqp::existskey we discussed earlier today: https://github.com/rakudo/rakudo/issues/4732. I didn't find time to look why this happens. Maybe it makes sense to add a special case for the JVM backend to the 'repeated' methods -- at least for now.

[19:06] <Geth> ¦ rakudo: lizmat self-assigned [JVM] Error when trying to assign to variable typed as native int and use the result of the expression directly as key for nqp::hash https://github.com/rakudo/rakudo/issues/4732

[19:06] <bartolin_> but maybe someone else has a better idea ...

[19:11] *** reportable6 joined
[19:11] <Geth> ¦ roast: b28a53b19e | (Christian Bartolomäus)++ | S11-compunit/compunit-dependencyspecification.t

[19:11] <Geth> ¦ roast: [JVM] Unfudge now-passing test

[19:11] <Geth> ¦ roast: 

[19:11] <Geth> ¦ roast: It started to pass around 2022-01-08, but I don't know what change

[19:11] <Geth> ¦ roast: made it pass.

[19:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b28a53b19e

[19:12] *** timo joined
[19:37] <Geth> ¦ rakudo: nwc10++ created pull request #4733: Remove dead code from MoarVM and JVM extops

[19:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4733

[19:37] <bartolin_> nine: btw, the error I see with 'make test' on the JVM backend (happening in https://github.com/rakudo/rakudo/blob/fee9e822e5/t/04-nativecall/15-rw-args.t#L58) seems to trigger this code: https://github.com/Raku/nqp/blob/42712dd8a2/src/vm/jvm/runtime/org/raku/nqp/runtime/NativeCallOps.java#L569-L571. That looks plausible to me, because only iscont_i is checked there. So NativeCallOps probably needs 

[19:37] <bartolin_> some more adjustment.

[19:39] <bartolin_> oops, that is exactly the same error that Nicholas++ mentioned in his PR a few seconds ago!?

[19:56] <MasterDuke> i think we need moarvm+nqp bumps

[20:23] <Geth> ¦ nqp: cf5b93884c | (Daniel Green)++ | tools/templates/MOAR_REVISION

[20:23] <Geth> ¦ nqp: Bump MoarVM for CArray fix

[20:23] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/cf5b93884c

[20:23] <Geth> ¦ rakudo: acc093c18b | (Daniel Green)++ | tools/templates/NQP_REVISION

[20:23] <Geth> ¦ rakudo: Bump NQP for CArray fix

[20:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/acc093c18b

[20:31] *** nebuchadnezzar left
[20:31] *** nebuchadnezzar joined
[20:41] <vrurg> dogbert11: have you opened an issue on that?

[20:45] <lizmat> Files=1351, Tests=117094, 289 wallclock secs (34.64 usr  9.39 sys + 4013.11 cusr 322.42 csys = 4379.56 CPU)

[20:46] <lizmat> (forgot to post that this morning)

[20:53] *** discord-raku-bot left
[20:54] *** discord-raku-bot joined
[20:56] <Geth> ¦ rakudo: ac009507a2 | (Elizabeth Mattijsen)++ | t/04-nativecall/05-arrays.t

[20:56] <Geth> ¦ rakudo: UnTODO a now passing test

[20:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ac009507a2

[21:54] *** evalable6 left
[21:54] *** linkable6 left
[21:56] *** linkable6 joined
[22:01] <dogbert11> vrurg: no, but I can fix that

[22:02] <vrurg> dogbert11: No, it's not a bug.

[22:03] <vrurg> Remember that method call has tighter precedence. 

[22:04] <vrurg> So, you got not a regex smartmatch but a list smartmatch. m: produces a list of Match objects too. But smartmatch knows it is a regex case and doesn't mangle with it. When you add a method call over m: you get a list match which has different semantics.

[22:27] <japhb> Welp, the build failures are slowly moving later in my big module list.  Current failure on Rakudo HEAD is for the Digest module: https://gist.github.com/japhb/68dded3c8576a1d8fcf968fee0c2ff79

[22:27] <japhb> nine: ^^

[22:43] <MasterDuke> i was happy not to have a QAST::WVal as my first child, but maybe that's just me...

[22:48] *** sena_kun joined
[22:49] *** Altai-man left
