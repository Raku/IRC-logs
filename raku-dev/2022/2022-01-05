[00:07] *** reportable6 left
[01:07] *** linkable6 left
[01:07] *** evalable6 left
[01:07] *** bisectable6 left
[01:10] *** reportable6 joined
[01:10] *** bisectable6 joined
[02:08] *** evalable6 joined
[03:41] *** frost joined
[05:09] <japhb> vrurg: What's the current status of Vikna?  Now that new-disp is done, does it Just Work, or is it necessary to be on one or more branches to make it work still?
[06:07] *** reportable6 left
[06:10] *** linkable6 joined
[07:10] *** linkable6 left
[07:10] *** bisectable6 left
[07:10] *** sourceable6 left
[07:10] *** greppable6 left
[07:10] *** nativecallable6 left
[07:10] *** releasable6 left
[07:10] *** notable6 left
[07:10] *** unicodable6 left
[07:10] *** shareable6 left
[07:10] *** committable6 left
[07:10] *** tellable6 left
[07:10] *** coverable6 left
[07:10] *** evalable6 left
[07:10] *** squashable6 left
[07:10] *** benchable6 left
[07:10] *** statisfiable6 left
[07:10] *** bloatable6 left
[07:10] *** quotable6 left
[07:11] *** benchable6 joined
[07:11] *** greppable6 joined
[07:11] *** linkable6 joined
[07:12] *** tellable6 joined
[07:12] *** bisectable6 joined
[07:12] *** bloatable6 joined
[07:13] *** notable6 joined
[07:13] *** shareable6 joined
[07:13] *** sourceable6 joined
[07:14] *** unicodable6 joined
[08:08] *** reportable6 joined
[08:11] *** squashable6 joined
[08:11] *** statisfiable6 joined
[08:13] *** releasable6 joined
[08:13] *** evalable6 joined
[08:13] *** nativecallable6 joined
[08:37] <MasterDuke> m: dd Array[Str]("a", "b", "c")   # huh, for some reason i wouldn't have expected this to work, it looks like a C-style cast to me. the syntax that's printed (with the .new) is what i'm used to
[08:37] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Array[Str].new("a", "b", "c")␤»
[09:11] *** committable6 joined
[09:12] *** coverable6 joined
[09:13] *** quotable6 joined
[09:26] <lizmat> Files=1351, Tests=117889, 347 wallclock secs (36.25 usr  9.56 sys + 4789.12 cusr 390.35 csys = 5225.28 CPU)
[09:26] <lizmat> vrurg ^^ this seems a lot more than it was, will check again tomorrow if this was a fluke
[10:20] *** discord-raku-bot left
[10:20] *** discord-raku-bot joined
[10:23] *** Geth__ joined
[10:25] *** Geth left
[10:41] <Geth__> ¦ rakudo: 59929f0a23 | (Elizabeth Mattijsen)++ | src/core.c/Any.pm6
[10:41] <Geth__> ¦ rakudo: Make dd output consistent for arrays and hashes
[10:41] <Geth__> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/59929f0a23
[11:00] <Geth__> ¦ rakudo: a8498e8ae2 | (Elizabeth Mattijsen)++ | src/core.c/Any.pm6
[11:00] <Geth__> ¦ rakudo: Fix Nil warning in dd
[11:00] <Geth__> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a8498e8ae2
[11:00] <Geth__> ¦ rakudo: b2f0a9d22e | (Elizabeth Mattijsen)++ | src/core.c/Array.pm6
[11:00] <Geth__> ¦ rakudo: Remove check for nullness of descriptor
[11:00] <Geth__> ¦ rakudo: 
[11:00] <Geth__> ¦ rakudo: Apparently, Arrays nowadays always have a descriptor
[11:00] <Geth__> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b2f0a9d22e
[11:01] *** Geth__ left
[11:01] *** Geth joined
[11:21] <Geth> ¦ rakudo: 95d6062334 | (Elizabeth Mattijsen)++ | src/core.c/Any.pm6
[11:21] <Geth> ¦ rakudo: Fix dd for nameless things
[11:21] <Geth> ¦ rakudo: 
[11:21] <Geth> ¦ rakudo: This will make [1,2] just show as '[1,2]' instead of as
[11:21] <Geth> ¦ rakudo: 'Array % = [1,2]'
[11:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/95d6062334
[11:50] *** Altai-man joined
[12:07] *** reportable6 left
[13:01] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4701: Remove some no longer needed CALL-MEs
[13:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4701
[13:10] *** reportable6 joined
[13:38] *** carlmasak joined
[13:57] <Geth> ¦ rakudo: 25ca2064cb | (Daniel Green)++ | 3 files
[13:57] <Geth> ¦ rakudo: Remove some no longer needed CALL-MEs
[13:57] <Geth> ¦ rakudo: 
[13:57] <Geth> ¦ rakudo: I'm not exactly sure as of when these aren't needed, but likely after
[13:57] <Geth> ¦ rakudo: new-disp landed.
[13:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/25ca2064cb
[13:57] <Geth> ¦ rakudo: 9d58b5dce7 | MasterDuke17++ (committed using GitHub Web editor) | 3 files
[13:57] <Geth> ¦ rakudo: Merge pull request #4701 from MasterDuke17/remove_some_no_longer_needed_CALL-MEs
[13:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9d58b5dce7
[13:57] <MasterDuke> i'm guessing the reason we don't run spectests in rakudo's CI is that it'd take too long. but what if we created one new job that doesn't run rakudo tests and instead runs a spectest?
[13:57] <MasterDuke> the current linux jobs take ~10m, of which the rakudo tests take ~4m. we know we have up to ~25m, because that's how long the windows jobs take
[13:58] <MasterDuke> so that would give us ~20m for a spectest run
[13:59] *** Geth left
[13:59] *** Geth joined
[14:02] <nine> Both test and spectest are important. They do test different things
[14:03] <MasterDuke> so you're saying we deliberately don't want to run spectests in CI?
[14:05] <nine> No, I mean that we should still run tests as well
[14:06] <MasterDuke> oh yeah, i was just proposing one entirely new CI entry that runs a spectest instead of the rakudo tests
[14:07] <MasterDuke> i.e., a new one of these https://github.com/rakudo/rakudo/blob/master/azure-pipelines.yml#L36-L97
[14:09] <Altai-man> MasterDuke, that's likely not the best idea, because our spectest is flappy and people are already suspicious of the CI for being flappy by itself, then you multiply failures from both worlds.
[14:10] *** frost left
[14:12] <MasterDuke> i think the only pure-CI flappiness is when the windows builds sometimes die saying they can't find the nqp version. otherwise i believe all the flappiness is in spectests/rakudo/nqp/moarvm. but i'm not convinced that it's so terribly flappy right now that there's no value
[14:12] <MasterDuke> nine has fixed a lot of the worst flappers
[14:14] <MasterDuke> i'll PR adding it, just to see if it's feasible. we can always disable that job even if it's added, at least then we have something to turn back on
[14:14] <Altai-man> yup, that's partly my point. when your normal tests are flappy and the spec is flappy we'll just get more annoyance when an innocent PR are not passing.
[14:17] <vrurg> japhb: new-disp still have some functionality unimplemented. But worse, I don't have that much time for Vikna as I used to. :(
[14:23] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4702: Add CI job that runs a spectest instead of Rakudo tests
[14:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4702
[14:33] <vrurg> lizmat: There are some tests added. But that's unlikely the primary reason. And I didn't see much difference in my runs. There could be some slowdown because certain cases may require fallback to .ACCEPTS.Bool. And some routines could become uninlinable because of a few additional ops to correctly handle junctions or regexes. But on the other hand where types of operands (especially RHS) are inferrable things must get faster.
[14:41] <vrurg> lizmat: 2021.12, specs as of Dec 20: Files=1349, Tests=117851, 121 wallclock secs (36.52 usr  7.46 sys + 4725.38 cusr 335.11 csys = 5104.47 CPU)
[14:41] <vrurg> lizmat: master, specs master: Files=1351, Tests=117866, 119 wallclock secs (35.41 usr  7.31 sys + 4764.75 cusr 331.95 csys = 5139.42 CPU)
[15:12] <lizmat> vrurg: yeah, we'll find out tomorrow, after I had a spectest run on a cold CPU
[15:13] <vrurg> lizmat: since I've got a dedicated workstation, I don't do it my macbook anymore. It just can't be trusted. :)
[15:14] <Geth> ¦ rakudo: 7ef7b6eddf | (Daniel Green)++ | azure-pipelines.yml
[15:14] <Geth> ¦ rakudo: Add CI job that runs a spectest instead of Rakudo tests
[15:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7ef7b6eddf
[15:14] <Geth> ¦ rakudo: d12a00b8a8 | MasterDuke17++ (committed using GitHub Web editor) | azure-pipelines.yml
[15:14] <Geth> ¦ rakudo: Merge pull request #4702 from MasterDuke17/add_a_CI_job_that_runs_a_spectest_instead_of_rakudo_tests
[15:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d12a00b8a8
[15:15] <[Coke]> wonder if we could do benchmark runs that tracked CPU cycles used instead of wallclock; I know jnthn occasionally reports out that way for some of his more micro-benches.
[15:17] <MasterDuke> i do that occasionally when i'm testing something locally, the problem is that it's really slow. i would like to add a bunch of benchmarks to our CI, but haven't gotten around to it
[15:29] *** Geth left
[15:29] *** reportable6 left
[15:29] *** discord-raku-bot left
[15:29] *** quotable6 left
[15:29] *** coverable6 left
[15:29] *** committable6 left
[15:29] *** nativecallable6 left
[15:29] *** evalable6 left
[15:29] *** releasable6 left
[15:29] *** statisfiable6 left
[15:29] *** squashable6 left
[15:29] *** unicodable6 left
[15:29] *** sourceable6 left
[15:29] *** shareable6 left
[15:29] *** notable6 left
[15:29] *** bloatable6 left
[15:29] *** bisectable6 left
[15:29] *** tellable6 left
[15:29] *** linkable6 left
[15:29] *** greppable6 left
[15:29] *** benchable6 left
[15:29] *** sena_kun left
[15:29] *** [Coke] left
[15:29] *** sjn left
[15:29] *** MasterDuke left
[15:29] *** bartolin left
[15:29] *** Kaiepi left
[15:29] *** lucs left
[15:29] *** tonyo left
[15:29] *** ugexe left
[15:29] *** zostay left
[15:29] *** camelia left
[15:29] *** kawaii_ left
[15:29] *** dogbert11 left
[15:29] *** djinni` left
[15:29] *** moon-child left
[15:29] *** SmokeMachine left
[15:29] *** nebuchadnezzar left
[15:29] *** leont left
[15:29] *** rba left
[15:29] *** JRaspass left
[15:29] *** jdv left
[15:29] *** masak left
[15:29] *** Altai-man left
[15:29] *** kjp left
[15:29] *** Voldenet left
[15:29] *** gfldex left
[15:29] *** maettu_ left
[15:29] *** sivoais left
[15:29] *** TempIRCLogger left
[15:29] *** eof left
[15:29] *** jjatria left
[15:29] *** ilogger2 left
[15:29] *** nine left
[15:29] *** vrurg left
[15:29] *** samcv left
[15:29] *** timo left
[15:29] *** rypervenche left
[15:29] *** tbrowder left
[15:29] *** Util_ left
[15:29] *** codesections left
[15:29] *** Xliff left
[15:29] *** andinus left
[15:29] *** samebchase left
[15:29] *** [Tux] left
[15:29] *** japhb left
[15:29] *** qorg11 left
[15:29] *** lizmat left
[15:29] *** carlmasak left
[15:32] *** timo joined
[15:32] *** samcv joined
[15:32] *** vrurg joined
[15:32] *** nine joined
[15:32] *** ilogger2 joined
[15:32] *** jjatria joined
[15:32] *** codesections joined
[15:32] *** Util_ joined
[15:32] *** tbrowder joined
[15:32] *** rypervenche joined
[15:32] *** carlmasak joined
[15:32] *** rba joined
[15:32] *** leont joined
[15:32] *** zostay joined
[15:32] *** camelia joined
[15:32] *** nebuchadnezzar joined
[15:32] *** SmokeMachine joined
[15:32] *** moon-child joined
[15:32] *** djinni` joined
[15:32] *** ugexe joined
[15:32] *** dogbert11 joined
[15:32] *** tonyo joined
[15:32] *** kawaii_ joined
[15:32] *** lucs joined
[15:32] *** MasterDuke joined
[15:32] *** Kaiepi joined
[15:32] *** bartolin joined
[15:32] *** sjn joined
[15:32] *** [Coke] joined
[15:32] *** sena_kun joined
[15:32] *** benchable6 joined
[15:32] *** greppable6 joined
[15:32] *** linkable6 joined
[15:32] *** tellable6 joined
[15:32] *** bisectable6 joined
[15:32] *** bloatable6 joined
[15:32] *** notable6 joined
[15:32] *** shareable6 joined
[15:32] *** sourceable6 joined
[15:32] *** unicodable6 joined
[15:32] *** squashable6 joined
[15:32] *** statisfiable6 joined
[15:32] *** releasable6 joined
[15:32] *** evalable6 joined
[15:32] *** nativecallable6 joined
[15:32] *** committable6 joined
[15:32] *** coverable6 joined
[15:32] *** quotable6 joined
[15:32] *** discord-raku-bot joined
[15:32] *** reportable6 joined
[15:32] *** Geth joined
[15:32] *** Xliff joined
[15:32] *** andinus joined
[15:32] *** samebchase joined
[15:32] *** [Tux] joined
[15:32] *** JRaspass joined
[15:32] *** jdv joined
[15:32] *** masak joined
[15:32] *** TempIRCLogger joined
[15:32] *** eof joined
[15:33] *** japhb joined
[15:33] *** qorg11 joined
[15:33] *** lizmat joined
[15:33] *** Altai-man joined
[15:33] *** kjp joined
[15:33] *** Voldenet joined
[15:33] *** gfldex joined
[15:33] *** maettu_ joined
[15:33] *** sivoais joined
[15:41] <japhb> I think my last comment got lost in the netsplit, resending ....
[15:41] <japhb> Well, what kinds of things do people want to have benchmarked?  Writing good benchmark suites is a fair amount of work, so if I were to put some energy into it, I'd want it to be stuff people actually care about.  (I've written a lot of benchmarks over the years that aren't used.)
[15:45] <MasterDuke> oh sure, benchmarks are hard. but right now we don't really have anything other than what people report. we can look at other projects for inspiration (e.g., i believe rust has a bot that runs benchmarks on PRs and reports the data)
[15:53] <japhb> Oh, it's not the framework I'm curious about, we've got a lot of bot creators and can make that happen.  I'm actually asking *what things do people want to test*?  What do people care about knowing the long term performance of?  [Tux]'s CSV tests and the runtime of roast have been the closest we've had to that long-term
[15:58] <MasterDuke> parsing, regex interpolation
[16:03] *** carlmasak left
[16:20] *** discord-raku-bot left
[16:21] *** discord-raku-bot joined
[16:37] *** discord-raku-bot left
[16:38] *** discord-raku-bot joined
[17:02] <[Tux]> Rakudo v2021.12-74-gd12a00b8a (v6.d) on MoarVM 2021.12-11-g39e9a6be0
[17:02] <[Tux]> csv-test-xs-20      0.410 -  0.416
[17:02] <[Tux]> csv-ip5xs           0.874 -  0.894
[17:02] <[Tux]> test-t --race       0.931 -  0.968
[17:02] <[Tux]> test-t              1.664 -  1.717
[17:02] <[Tux]> csv-parser          4.181 -  4.233
[17:02] <[Tux]> csv-ip5xs-20        5.603 -  5.858
[17:02] <[Tux]> test                7.031 -  7.066
[17:02] <[Tux]> test-t-20 --race    7.382 -  8.061
[17:02] <[Tux]> test-t-20          24.216 - 24.764
[17:40] <[Coke]> Comparison of the effects of gradual typing (e.g. adding types to method sigs)
[17:50] <japhb> [Coke]: Was that a benchmark suggestion?
[18:01] <tonyo> japhb: i have long term plans of adding benchmark stuff to either fez or zef, that'll probably happen after i get the regression roaster for modules reporting correctly for osx/linux/unix/windows
[18:01] <tonyo> the Bench module is a straight port of the Benchmark module from perl with an enhancement to use the hires timer when available
[18:01] <[Coke]> japhb: yes.
[18:06] *** linkable6 left
[18:06] *** reportable6 left
[18:08] *** reportable6 joined
[18:08] *** linkable6 joined
[18:40] *** Altai-man left
[18:41] *** squashable6 left
[18:44] *** squashable6 joined
[19:06] <Geth> ¦ rakudo: 8321ce10da | (Elizabeth Mattijsen)++ | src/core.c/Proc/Async.pm6
[19:06] <Geth> ¦ rakudo: Re-imagine PR 2425
[19:06] <Geth> ¦ rakudo: 
[19:06] <Geth> ¦ rakudo: The PR was basically accepted and needed its conflicts solved.  It
[19:06] <Geth> ¦ rakudo: appeared easier to just re-imagine the PR and reduce any overhead
[19:06] <Geth> ¦ rakudo: a little.
[19:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8321ce10da
[20:16] <Geth> ¦ rakudo: 27ede8cb0e | (Elizabeth Mattijsen)++ | src/core.c/Capture.pm6
[20:16] <Geth> ¦ rakudo: Re-imagince PR 3276
[20:16] <Geth> ¦ rakudo: 
[20:16] <Geth> ¦ rakudo: The original PR was unsalvageable.
[20:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/27ede8cb0e
[20:18] <Geth> ¦ rakudo: 56b57f617d | Altai-man++ (committed using GitHub Web editor) | t/05-messages/03-errors.t
[20:18] <Geth> ¦ rakudo: Test return constraints for role implementors (#3249)
[20:18] <Geth> ¦ rakudo: 
[20:18] <Geth> ¦ rakudo: Closes https://github.com/rakudo/rakudo/issues/2385
[20:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/56b57f617d
[20:19] *** linkable6 left
[20:24] <Geth> ¦ rakudo/WHY-on-role-group: 1000 commits pushed by 37 authors
[20:24] <Geth> ¦ rakudo/WHY-on-role-group: review: https://github.com/rakudo/rakudo/compare/a8f1e97a921d...9e52c06a0300
[20:37] <Geth> ¦ rakudo/WHY-on-role-group: 01567ff731 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp
[20:37] <Geth> ¦ rakudo/WHY-on-role-group: Add curly that was missed in a conflict fix
[20:37] <Geth> ¦ rakudo/WHY-on-role-group: 
[20:37] <Geth> ¦ rakudo/WHY-on-role-group: Unfortunately, this shows that there are two different opinions
[20:37] <Geth> ¦ rakudo/WHY-on-role-group: about what the method !get_default_candidate means.  I have
[20:37] <Geth> ¦ rakudo/WHY-on-role-group: insufficient fu to fix that one.
[20:37] <Geth> ¦ rakudo/WHY-on-role-group: review: https://github.com/rakudo/rakudo/commit/01567ff731
[22:12] *** Xliff left
[22:33] *** Geth left
[22:34] *** Geth__ joined
[22:49] *** sena_kun left
[22:51] *** sena_kun joined
[23:19] *** Geth__ left
[23:19] *** Geth joined
[23:20] *** RakuIRCLogger__ left
