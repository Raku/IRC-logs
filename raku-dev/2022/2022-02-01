[00:07] *** reportable6 left
[00:49] *** [Coke]_ joined
[00:52] *** [Coke] left
[00:57] *** tellable6 joined
[00:58] *** nativecallable6 joined
[00:58] *** benchable6 joined
[00:59] *** evalable6 joined
[01:07] *** reportable6 joined
[01:18] *** discord-raku-bot left
[01:18] *** discord-raku-bot joined
[01:23] *** discord-raku-bot left
[01:23] *** discord-raku-bot joined
[01:48] <jdv> nine: ok

[01:49] <jdv> i like how the gh wiki preview pane/tab shows the entire page but the actual page is truncated...

[01:56] *** shareable6 joined
[02:14] *** discord-raku-bot left
[02:14] *** discord-raku-bot joined
[02:28] *** Xliff left
[03:01] *** frost joined
[03:03] *** frost left
[03:56] *** statisfiable6 joined
[03:57] *** bloatable6 joined
[04:10] <Geth> ¦ rakudo: vrurg++ created pull request #4751: Fix optimizations of smartmatches over subsets

[04:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4751

[04:57] *** linkable6 left
[04:57] *** evalable6 left
[05:57] *** bloatable6 left
[05:57] *** releasable6 left
[05:57] *** notable6 left
[05:57] *** coverable6 left
[05:57] *** sourceable6 left
[05:57] *** benchable6 left
[05:57] *** committable6 left
[05:57] *** nativecallable6 left
[05:57] *** greppable6 left
[05:57] *** squashable6 left
[05:57] *** bisectable6 left
[05:57] *** reportable6 left
[05:57] *** tellable6 left
[05:57] *** statisfiable6 left
[05:57] *** shareable6 left
[05:57] *** quotable6 left
[05:57] *** unicodable6 left
[05:57] *** quotable6 joined
[05:58] *** bloatable6 joined
[05:58] *** reportable6 joined
[05:58] *** benchable6 joined
[05:58] *** tellable6 joined
[05:59] *** evalable6 joined
[05:59] *** committable6 joined
[05:59] *** bisectable6 joined
[05:59] *** squashable6 joined
[06:00] *** unicodable6 joined
[06:00] *** statisfiable6 joined
[06:07] *** reportable6 left
[06:58] *** nativecallable6 joined
[06:59] *** linkable6 joined
[06:59] *** shareable6 joined
[06:59] *** notable6 joined
[06:59] *** releasable6 joined
[06:59] *** sourceable6 joined
[07:00] *** greppable6 joined
[07:45] *** squashable6 left
[07:57] *** coverable6 joined
[08:08] *** reportable6 joined
[08:12] *** japhb left
[08:34] *** japhb joined
[08:38] *** frost joined
[08:42] *** frost left
[08:47] *** squashable6 joined
[09:32] <lizmat> Files=1351, Tests=117097, 283 wallclock secs (34.43 usr  9.78 sys + 3958.45 cusr 326.80 csys = 4329.46 CPU)

[10:11] *** ugexe left
[10:14] <Geth> ¦ nqp: ee3f49af54 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[10:14] <Geth> ¦ nqp: Bump NQP to get latest MoarVM fixes

[10:14] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/ee3f49af54

[10:14] *** andinus` joined
[10:25] *** ugexe joined
[10:27] <Geth> ¦ rakudo: b9ffbb973c | (Elizabeth Mattijsen)++ | 2 files

[10:27] <Geth> ¦ rakudo: Bump NQP to get latest MoarVM fixes

[10:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b9ffbb973c

[11:16] <Geth> ¦ nqp: 7a93ff1436 | (Stefan Seifert)++ | 3 files

[11:16] <Geth> ¦ nqp: Map bitneg_u op

[11:16] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/7a93ff1436

[11:17] <Geth> ¦ rakudo: ffa09ff68e | (Stefan Seifert)++ | 2 files

[11:17] <Geth> ¦ rakudo: Add unsigned candidate of +^ (bitwise negation) prefix operator

[11:17] <Geth> ¦ rakudo: 

[11:17] <Geth> ¦ rakudo: This fixes +^ returning negative results on unsigned arguments with MSB set.

[11:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ffa09ff68e

[11:19] <nine> This fixes Digest's t/digest.t, but the other test file will probably need some more multi candidates of bitwise operators

[11:19] <nine> At least the problem with the say sub turning unsigneds into signeds should be fixed as well :)

[11:31] <MasterDuke> i can't repro the error in Data::ExampleDatasets anymore. since the problem was an invalid free() and it bisected to using the right allocation functions for NativeCall i thought maybe that NativeCall fix wasn't complete, but Data::ExampleDatasets doesn't use NativeCall anywhere (directly)

[11:33] <MasterDuke> so the actual problem was probably somewhere in one of the modules it uses, e.g., HTTP::UserAgent, Text::CSV

[11:33] <MasterDuke> but then again it also uses UInts, and there were some recent fixes around subsets, right?

[11:39] <[Tux]> MasterDuke: if Text::CSV has a problem, I'd like to know. But then again, lizmat will probably have fixed it before I understand :)

[11:40] <MasterDuke> [Tux]: does Text::CSV use nativecall?

[11:40] <lizmat> no

[11:40] <MasterDuke> then the problem probably isn't there

[11:41] *** AlexDaniel joined
[11:45] <MasterDuke> but there's not much more i can do since i can't repro it now

[11:45] *** CIAvash joined
[11:47] *** AlexDaniel left
[11:47] *** CIAvash left
[11:49] <MasterDuke> oh

[11:50] <MasterDuke> i had been running the tests in a loop successfully, and then all of a sudden...`Please install IO::Socket::SSL in order to fetch https sites   in method get-connection at /home/dan/Source/perl6/install/share/perl6/site/sources/E2CEC167A7022D3B9CB025F2F496EBC87CE06263 (HTTP::UserAgent) line 362 <...>`

[11:53] <MasterDuke> https://github.com/sergot/http-useragent/commit/485fba7270c03f5b8fb0f8a1d1812b484bdd8f1b is probably relevant

[11:55] <nine> Would be nice if it printed $!

[11:56] <MasterDuke> turns out i had HTTP::UserAgent v1.1.49 installed, upgrading it now

[12:00] *** AlexDaniel joined
[12:02] *** AlexDaniel left
[12:06] *** reportable6 left
[12:08] *** AlexDaniel joined
[12:10] <nine> Seems like the remaining issue in Digest is a bug in the module itself. The essence is: if you want to work with native ints, you have to do it consistently. Code like (* +| +^*) +^ * doesn't cut it. Has to be explicit: -> uint32 $x, uint32 $y, uint32 $z --> uint32 { (my uint32 $ = ($x +| +^$y)) +^ $z }

[12:10] *** CIAvash joined
[12:12] <nine> What I don't understand is why this worked previously

[12:14] <nine> Maybe because we didn't even try to put those resulting Ints into unsigned natives, but instead turned them implicitly into signed natives and the converted those to uints

[12:29] <Geth> ¦ nqp: 71418d37c1 | Coke++ | t/docs/opcodes.t

[12:29] <Geth> ¦ nqp: add _u variant

[12:29] <Geth> ¦ nqp: 

[12:29] <Geth> ¦ nqp: (for future-proofing, doesn't change test output)

[12:29] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/71418d37c1

[12:32] <[Coke]_> "we're more correct so you have to be too"

[12:33] *** [Coke]_ is now known as [Coke]

[12:33] <[Coke]> (regarding nine's Digest comment)

[12:34] <MasterDuke> got that `Please install IO::Socket::SSL in order to fetch https sites` again, even after upgrading HTTP::UserAgent to 1.1.51

[12:35] *** AlexDaniel left
[12:36] <MasterDuke> but that might just be a rakudo problem with conditional loading

[12:36] *** AlexDaniel joined
[12:36] *** CIAvash left
[13:07] *** reportable6 joined
[13:32] <[Tux]> Rakudo v2021.12-173-gffa09ff68 (v6.d) on MoarVM 2021.12-107-g3ff5b1113

[13:32] <[Tux]> csv-test-xs-20      0.406 -  0.408

[13:32] <[Tux]> csv-ip5xs           0.804 -  0.875

[13:32] <[Tux]> test-t --race       0.923 -  0.961

[13:32] <[Tux]> test-t              1.614 -  1.618

[13:32] <[Tux]> csv-parser          3.744 -  4.094

[13:32] <[Tux]> csv-ip5xs-20        5.297 -  5.409

[13:32] <[Tux]> test                6.468 -  6.851

[13:32] <[Tux]> test-t-20 --race    7.148 -  7.164

[13:32] <[Tux]> test-t-20          23.201 - 24.351

[13:32] *** CIAvash joined
[13:32] <lizmat> meh  :-)

[15:08] <MasterDuke> m: my $a; $a = try require ::("Test") for ^1; say $a    # LTA error

[15:08] <camelia> rakudo-moar ffa09ff68: OUTPUT: «===SORRY!===␤lang-call cannot invoke object of type 'VMNull' belonging to no language␤»

[15:09] <MasterDuke> https://gist.github.com/Whateverable/400711c6bc1e07664bef942cda7d5e54 never really had a great error

[15:43] *** linkable6 left
[15:45] *** qorg11 left
[15:46] *** linkable6 joined
[15:49] *** qorg11 joined
[15:50] *** linkable6 left
[15:52] *** linkable6 joined
[16:07] <ugexe> m: require ::("Test") for ^1

[16:07] <camelia> rakudo-moar ffa09ff68: OUTPUT: «===SORRY!===␤lang-call cannot invoke object of type 'VMNull' belonging to no language␤»

[16:07] <ugexe> and of course

[16:07] <ugexe> m: (require ::("Test")) for ^1

[16:07] <camelia> rakudo-moar ffa09ff68: ( no output )

[16:07] <ugexe> so seems confused about that

[16:18] <ugexe> m: require ::("Foo") bar;

[16:18] <camelia> rakudo-moar ffa09ff68: OUTPUT: «===SORRY!===␤lang-call cannot invoke object of type 'VMNull' belonging to no language␤»

[16:18] <ugexe> m: require a b;

[16:18] <camelia> rakudo-moar ffa09ff68: OUTPUT: «===SORRY!===␤lang-call cannot invoke object of type 'VMNull' belonging to no language␤»

[16:23] <nine> Oh the horrors of the BUILDPLAN :( It's mapping directly from primspec to opcode and back but the numbers needed for primspec 10 are already taken for something else

[16:35] <Geth> ¦ nqp: 20d8e148a1 | (Stefan Seifert)++ | 4 files

[16:35] <Geth> ¦ nqp: Map/implement (bind|get)attrs?_u ops

[16:35] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/20d8e148a1

[16:35] <Geth> ¦ nqp: c743974ec3 | (Stefan Seifert)++ | 4 files

[16:35] <Geth> ¦ nqp: Map getattrref_u op

[16:35] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/c743974ec3

[16:35] <Geth> ¦ rakudo: 118a0c3d33 | (Stefan Seifert)++ | 3 files

[16:35] <Geth> ¦ rakudo: Fix "Invalid ....BUILDALL plan: 24" error

[16:35] <Geth> ¦ rakudo: 

[16:35] <Geth> ¦ rakudo: The BUILDPLAN logic didn't cope too well with primspec 10.

[16:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/118a0c3d33

[16:35] <Geth> ¦ rakudo: 753c173eac | (Stefan Seifert)++ | src/core.c/Attribute.pm6

[16:35] <Geth> ¦ rakudo: Fix Attribute treating all native integers as signed

[16:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/753c173eac

[16:40] <nine> I'm of a mind to completely renumber the BUILDPLAN thing. But it's a little intimidating

[16:47] <japhb> nine: Is this a good time to test rebuilding my module stack, or are you still in the middle of your commit stream?

[16:54] <nine> If it's not a huge effort it may be worth a try

[17:05] <japhb> OK, new run started

[17:10] <lizmat> nine: ++ on renumbering BUILDPLAN

[17:10] <lizmat> but otoh, perhaps we should wait for RakuAST

[17:11] <lizmat> so that we can actually more easily generate code for the BUILDPLAN

[17:11] <nine> Too late. I've gone with multiplying everyting by 100, except for those entries where we add the primspec to a base

[17:12] <nine> So we get 1501 die if a required int attribute is 0, 1502 die if a required num attribute is 0e0, ...

[17:12] * MasterDuke has flashbacks to numbering lines in qbasic

[17:12] <lizmat> ok  :-)   I can live with that  :-)

[17:23] <japhb> nine: Digest failed again, but this time in t/ripemd.t (I think you already expected this based on your comments from a few hours ago)

[17:23] <nine> Yes, that needs the fix in the module

[17:23] <nine> Invalid Perl6::Metamodel::v6e::GrammarHOW.BUILDALL plan: 11

[17:24] <nine> Where would that 11 be generated?

[17:29] <nine> Oh....it's in NQP

[17:29] <Geth> ¦ roast: 361072eeb7 | (Elizabeth Mattijsen)++ | S12-attributes/native.t

[17:29] <Geth> ¦ roast: UnTODO a now passing test

[17:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/361072eeb7

[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:32] <Geth> ¦ nqp: 56aded28e3 | (Stefan Seifert)++ | 2 files

[18:32] <Geth> ¦ nqp: Re-number BUILDPLAN to accomodate uint support

[18:32] <Geth> ¦ nqp: 

[18:32] <Geth> ¦ nqp: Rakudo maps from primspec to BUILDPLAN opcode and back, but the numbers

[18:32] <Geth> ¦ nqp: required for primspec 10 (uint) are already taken. So re-number to make space.

[18:32] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/56aded28e3

[18:32] <Geth> ¦ rakudo: a38bebecf8 | (Stefan Seifert)++ | 4 files

[18:32] <Geth> ¦ rakudo: Properly support uints in BUILDPLANs

[18:32] <Geth> ¦ rakudo: 

[18:32] <Geth> ¦ rakudo: Re-number BUILDPLAN to accomodate uint support. Rakudo maps from primspec to

[18:32] <Geth> ¦ rakudo: BUILDPLAN opcode and back, but the numbers required for primspec 10 (uint) were

[18:32] <Geth> ¦ rakudo: already taken. So re-number to make space and support uint where appropriate.

[18:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a38bebecf8

[19:42] *** linkable6 left
[20:44] *** linkable6 joined
[20:57] *** Kaiepi left
[21:40] <Geth> ¦ rakudo: b9d8aa4999 | (Vadim Belman)++ | src/Perl6/Metamodel/Nominalizable.nqp

[21:40] <Geth> ¦ rakudo: Add wrappee-lookup method to Nominalizable

[21:40] <Geth> ¦ rakudo: 

[21:40] <Geth> ¦ rakudo: For introspection reasons. The current use for the method is to make

[21:40] <Geth> ¦ rakudo: sure that a nominalizable type has a subset component in it when

[21:40] <Geth> ¦ rakudo: optimizing a smartmatch.

[21:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b9d8aa4999

[21:40] <Geth> ¦ rakudo: d6fb191921 | (Vadim Belman)++ | 2 files

[21:40] <Geth> ¦ rakudo: Fix handling of subsets

[21:40] <Geth> ¦ rakudo: 

[21:40] <Geth> ¦ rakudo: A subset `where` block can be run-time dependent and therefore can't be

[21:40] <Geth> ¦ rakudo: reduced to a value at compile-time. But it's still possible to shortcut

[21:40] <Geth> ¦ rakudo: by either using `nqp::istype` for static optimizations, or by directly

[21:40] <Geth> ¦ rakudo: invoking `accepts_type` method of subset's HOW via the dispatcher.

[21:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d6fb191921

[21:40] <Geth> ¦ rakudo: a1e6bf7786 | (Vadim Belman)++ (committed using GitHub Web editor) | 3 files

[21:40] <Geth> ¦ rakudo: Merge pull request #4751 from vrurg/rakudo-4748

[21:40] <Geth> ¦ rakudo: 

[21:40] <Geth> ¦ rakudo: Fix optimizations of smartmatches over subsets

[21:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a1e6bf7786

[21:58] *** vrurg left
[21:58] *** vrurg joined
[22:03] *** Kaiepi joined
[22:33] <Geth> ¦ rakudo: 14bacc2495 | (Stefan Seifert)++ | src/core.c/Buf.pm6

[22:33] <Geth> ¦ rakudo: Fix "container does not reference a native integer" in UnsignedBlob.STORE

[22:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/14bacc2495

