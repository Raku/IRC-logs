[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[00:17] *** epony joined
[01:36] *** vrurg_ joined
[01:36] *** vrurg left
[02:36] *** notable6 left
[02:36] *** squashable6 left
[02:36] *** unicodable6 left
[02:36] *** greppable6 left
[02:36] *** bloatable6 left
[02:36] *** coverable6 left
[02:36] *** tellable6 left
[02:36] *** linkable6 left
[02:36] *** evalable6 left
[02:36] *** committable6 left
[02:36] *** statisfiable6 left
[02:36] *** quotable6 left
[02:36] *** sourceable6 left
[02:36] *** reportable6 left
[02:36] *** bisectable6 left
[02:36] *** shareable6 left
[02:36] *** releasable6 left
[02:36] *** benchable6 left
[02:36] *** nativecallable6 left
[02:36] *** releasable6 joined
[02:36] *** nativecallable6 joined
[02:36] *** greppable6 joined
[02:36] *** notable6 joined
[02:36] *** unicodable6 joined
[02:36] *** statisfiable6 joined
[02:36] *** bisectable6 joined
[02:37] *** benchable6 joined
[02:37] *** coverable6 joined
[02:37] *** squashable6 joined
[02:37] *** linkable6 joined
[02:37] *** committable6 joined
[02:37] *** tellable6 joined
[02:37] *** shareable6 joined
[02:38] *** quotable6 joined
[02:38] *** reportable6 joined
[02:38] *** sourceable6 joined
[02:38] *** evalable6 joined
[02:39] *** bloatable6 joined
[02:51] *** vrurg joined
[02:51] *** vrurg_ left
[02:56] *** Xliff left
[02:56] *** Xliff_ joined
[03:00] *** vrurg left
[03:01] *** vrurg joined
[03:11] *** vrurg_ joined
[03:11] *** vrurg left
[03:20] *** vrurg_ left
[03:20] *** vrurg joined
[04:06] *** vrurg left
[04:06] *** vrurg_ joined
[04:10] *** vrurg_ left
[04:11] *** vrurg joined
[04:20] *** vrurg left
[04:21] *** vrurg joined
[05:43] *** [Coke] left
[05:45] *** [Coke] joined
[06:07] *** reportable6 left
[06:07] *** reportable6 joined
[06:37] *** Xliff_ left
[07:21] *** vrurg_ joined
[07:21] *** vrurg left
[08:06] *** sena_kun joined
[08:34] *** frost joined
[08:55] *** sena_kun left
[08:57] *** sena_kun joined
[09:15] *** sena_kun left
[10:08] *** sena_kun joined
[11:08] *** tellable6 left
[11:10] *** tellable6 joined
[11:33] *** frost left
[11:33] *** frost joined
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[13:10] *** frost left
[13:23] *** kjp left
[13:27] *** frost joined
[13:34] *** frost left
[13:36] *** kjp joined
[14:35] *** epony left
[14:51] *** epony joined
[16:17] *** vrurg joined
[16:17] *** vrurg_ left
[17:05] *** sena_kun left
[17:05] *** sena_kun joined
[17:15] *** Kaiepi left
[17:21] *** vrurg_ joined
[17:21] *** vrurg left
[17:31] *** vrurg joined
[17:31] *** vrurg_ left
[17:36] *** sena_kun left
[17:44] *** Kaiepi joined
[18:05] *** reportable6 left
[18:08] *** reportable6 joined
[18:10] *** sena_kun joined
[18:21] *** vrurg_ joined
[18:21] *** vrurg left
[18:25] *** crystalfrost[m] joined
[19:04] *** vrurg joined
[19:04] *** vrurg_ left
[20:36] <bartolin_> vrurg: maybe my insights from https://github.com/rakudo/rakudo/issues/5069#issuecomment-1268940409 could be interesting to you. I suspect that https://github.com/rakudo/rakudo/issues/5037 has a (somewhat) similar cause

[20:43] <vrurg> bartolin_: what does 'not the same thing' means?

[20:46] <bartolin_> I was referring to "if (want != got)" in https://github.com/Raku/nqp/blob/bddcbca4b7/src/vm/jvm/runtime/org/raku/nqp/runtime/Ops.java#L3622

[20:47] <bartolin_> "want" and "got" are both instances of P6int at that point -- but different objects

[20:49] <bartolin_> you don't have to look in detail, but since you mentioned that you wondered about the fallout from https://github.com/rakudo/rakudo/commit/71de22321d I thought I'd ping you

[20:53] <vrurg> So, parameterizetype works with instances, not values? I'm unpleasantly surprised.

[20:54] <vrurg> I would expect it to treat natives as-is, integers at least.

[21:06] <bartolin_> probably I'm confused, but is that really specific to parameterizetype?

[21:06] <bartolin_> m: use nqp; say nqp::eqaddr(nqp::bitor_i(15, 0), nqp::bitor_i(15, 0))

[21:06] <camelia> rakudo-moar 30a9d3a40: OUTPUT: «0␤»

[21:11] <bartolin_> (maybe I misunderstood and you just meant that parameterizetype doesn't try to compare the values for integers.)

[21:24] <vrurg> bartolin_: the latter. I mean, I wouldn't expect that parameterize over, say, 12345 in one class would differ from parameterizing over 12345 in another class.

[21:25] <vrurg> Ideally, it must not make difference neither over numbers, nor even over strings if they're native. 

[21:26] <bartolin_> yeah, I agree

[21:28] <bartolin_> if I find the time I'll do more debugging -- and maybe I find a clean way to make this work.

[21:28] <bartolin_> but now, off to bed ...

[21:33] <vrurg> bartolin_: g'night!

[21:55] <Geth> ¦ rakudo: lizmat self-assigned Blob ~ parametrized Blob = Buffer https://github.com/rakudo/rakudo/issues/5071

[22:20] *** linkable6 left
[22:20] *** evalable6 left
[22:21] *** linkable6 joined
[22:23] *** evalable6 joined
[22:31] *** sena_kun left
[23:38] *** Kaiepi left
