[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[01:09] *** evalable6 left
[01:09] *** linkable6 left
[01:11] *** evalable6 joined
[02:09] *** linkable6 joined
[02:14] *** frost joined
[02:18] *** frost left
[02:28] *** vrurg left
[03:57] *** frost joined
[05:05] *** childlikempress joined
[05:06] *** moon-child left
[05:19] *** childlikempress is now known as moon-child

[05:48] *** squashable6 left
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:22] *** squashable6 joined
[06:55] *** discord-raku-bot left
[06:55] *** discord-raku-bot joined
[07:09] <nine> Xliff: now I'm confused. The fix somehow broke your parallel toolchain?

[07:32] *** nebuchadnezzar joined
[09:32] <Xliff> nine: No. Bitrot did. It's been over 15 weeks since it was last used.

[09:32] <Xliff> Today was the first successful parallel run since *Nov*

[09:34] <Xliff> p6-GLib Suite compile times for v2022.02-108-gcd02552c9: 8941.6s (non-parallel) / 1409.57343595s (parallel)

[09:35] <Xliff> Timings taken across 31 raku Projects

[09:36] <Xliff> Note change of benchmark vehicle. Current stats are now: AMD Ryzon 9 5950x (16 processors, 32 threads, 3.4Ghz)

[09:37] <lizmat> Files=1351, Tests=117115, 299 wallclock secs (35.88 usr  9.89 sys + 4158.16 cusr 335.24 csys = 4539.17 CPU)

[09:40] <nine> Xliff: are you still using those long lists of -I?

[09:43] <Xliff> Previous was Intel i9 10900  (10 core, 20 thread, 2.8Ghz)

[09:44] <Xliff> nine: Yes

[09:44] <nine> That's really costing you a lot of performance

[09:44] <Xliff> nine: Irrelevant. There's no way to install them, so how else will it work?

[09:44] <nine> Why is there no way to install them?

[09:45] <Xliff> Until my issues with CURI are addressed, there's no way to handle the significant number of files without proper user feedback.

[09:45] <nine> What issues?

[09:45] <Xliff> CURI / zef is insufficient. Please see the dialog on 4655

[09:45] <Xliff> nine: No proper user feedback during install.

[09:46] <Xliff> I have work designed to address the issue, but it is still in progress.

[09:47] <Xliff> I've investigated ALL of the options currently offered. They all fall short of where I'd expect Raku to be, at this point.

[09:47] <Xliff> Question: How would you leverage existing CURI to handle a GUI based module installer?

[09:48] <Xliff> If you can answer that one, I might reconsider. Please  describe said mechanism in detail.

[09:48] <nine> What are the unique requirements of a GUI based installer as opposed to a CLI based one?

[09:51] <nine> And how does that relate to the build script we were talking about?

[09:53] <Xliff> nine: Name a top 10 language without a GUI installer. 

[09:53] <Xliff> That is my point.

[09:54] <Xliff> If Raku is going to grow, it will need to consider t he end user. End users use GUI installers.

[09:54] <Xliff> One of the staples of a GUI installer is the bar graph. 

[09:54] <Xliff> How will you be able to leverrage current CURI to handle a bar graph?

[09:55] <Xliff> Second question: Why does the list of -I directives affect performance? It sounds to me like a problem that needs to be resolved.

[09:56] <Xliff> If it is not on your priority list, then please describe the issues involved and maybe I will add that to my list of things to investigate.

[10:01] <Xliff>  nine: Would

[10:01] <nine> As to name a top 10 language without GUI installer: C

[10:01] <Xliff> HAH! Installshield was originally written in C.

[10:02] <Xliff> MSVC, but still C. It' s the largest installer in the worl!

[10:02] <Xliff> s/worl/world/

[10:02] <nine> But if that counts, then Raku has GUI installers, too. E.g. yast which you can use to install prepackaged Raku modules on openSUSE

[10:03] <Xliff>  Hmmm.... fair point. I'll then have to conceed C. 

[10:03] <Xliff> But there is a large difference between C and Raku. 

[10:03] <Xliff> C deals with unmanaged code. Raku is managed. 

[10:03] <Xliff> I would then say that comparing C to Raku is akin to comparing different fruit.

[10:04] <Xliff> Just because C doesn't have one is no reason  to conclude that Rakudo doesn't need one.

[10:04] <nine> Well I certainly gave a valid answer to your original question ;) Anyway that's an unproductive tangent

[10:05] <Xliff> I did say I conceded that point. :p

[10:05] <Xliff> nine: My simple answer for CURI - Supply-based events.

[10:06] <Xliff> I'll need to polish up what I have and submit it to problem solving, but that's probably not going to happen before the middle of spring.

[10:06] <Xliff> I have a full dance card atm.

[10:06] <nine> But what does all of this have to do with the long list of -I in your build script?

[10:06] <Xliff> You brought that up. Not me!

[10:07] <Xliff> Again, the long list of -i directives is due to the fact  that I cannot install any of my projects due to the lack of user feedback in CURI!

[10:07] <nine> No, I didn't? All I did was ask why you can't use installation instead of those -I

[10:07] <Xliff> And I just said why I could not!

[10:07] <nine> But -I doesn't give you any more feedback?

[10:08] <nine> It just takes longer which makes the problem worse

[10:08] <Xliff> Actually, there is no hard reason not to. More like a prerence.

[10:08] <Xliff> nine: That's why the build scripts were written. To give me the proper feedback.

[10:08] <nine> If it takes twice as long to compile and doesn't give you any more feedback than installation, then I just don't understand why you use it

[10:09] <nine> But you can have the same level of feedback with installation

[10:09] <Xliff> I have practically spelled out the reason for -I. You are still trying to find a reason for it. Almost as if your eyes are sliding over the reason I've just given.

[10:10] <Xliff> nine: If you are about to speak on the RAKUDO_ variables, I've already touched upon that. NONE of them do what I would like.

[10:10] <Xliff> I do have to complement lizmat for at least trying.

[10:11] <Xliff> nine: What would be the problem for building a non-installed module repository at $*HOME/.rakudo/.precomp where all modules compiled via -I live?

[10:11] <Xliff> That directory is then checked before all given -I directives for precompiled files.

[10:11] <Xliff> This way you are not having to check all over the place.

[10:12] <nine> I've just taken another look at build.sh (AFAIK the script we're talking about)

[10:12] <Xliff> The way -I is currently implemented (as you've described) seems like you are bending over backwards to make it DELIBERATELY slow.

[10:12] <Xliff> That's the way you've described it in #4655, at least.

[10:12] <Xliff> And what did you find out about build.sh?

[10:13] <nine> It does give you more feedback, that's true, because it has per-module output. Installation could give you per-distribution output, so quite a bit less. However I still wonder, if that isn't enough if compilation is a lot faster. Less wait time would mean less need for getting feedback, wouldn't it?

[10:14] <Xliff> That particular script was built primarily for statistics. Its use as a project-build script is secondary.

[10:14] <nine> With -I you _do_ have to check all over the place, regardless of where the precomp files are stored, because all the time you have to check if the sources have changed.

[10:15] <Xliff> nine: Then why doesn't that apply to all Raku modules. Oh, you are keeping the sources with the .precomp, aren't you?

[10:17] <Xliff> nine: Helpful hint. I think we are barking down two mutually exclusive tangents. 

[10:17] <nine> CURI uses an optimized storage format that avoids parsing JSON at all cost.

[10:17] <Xliff> The -I build script is there for statistics. 

[10:17] <Xliff> For project installation, I'm not tied to it. It was the path of least resistance for compiling my code.

[10:18] <Xliff> I would prefer to have CURI properly inform the user as to what is currently being installed. Something that it does not do.

[10:18] <Xliff> I couldn't give a rats ass as to install speed. Speed does not mean that the user need not be informed as to what is happening to her system

[10:19] <Xliff> Therefore t he current CURI implementation is incomplete, from where I stand.

[10:19] <Xliff> I have something in the works that may address the issue, but it will be weeks to a  couple of months before I have the time to complete it.

[10:20] <Xliff> I suspect we can have a more productive discussion, then. 

[10:21] <nine> For the sake of the argument, lets assume that compilation is practically instantaneous. Since the installation call is per distribution, the installer knows that CURI is e.g. currently installing Glib. Since that is done faster than the user could even read the string "Glib", what more would they need?

[10:22] <Xliff> Information as to what the "GLib" installation consisted of and or the time it took to install

[10:23] <Xliff> You can't remove installation time from consideration. It should be reported or tracked.

[10:24] <nine> The installer already knows what the Glib installation consisted of. The information is contained in the META6.json and is what the installer actually gives to CURI

[10:24] <nine> And of course the installer can easily measure how long it took to install Glib

[10:25] <Xliff> I'm Joe end user who just started with Raku. I neither know or care about a META6.json because I am just starting. I do care about how long it takes to install this project that got me interested in the language. And possibly the install time of its dependents.

[10:25] <Xliff> I need to know this because I might want to consider installing this software on a wide variety of machines

[10:25] <Xliff> With a wide variety of resources.

[10:26] <Xliff> It would be nice to have that information so I am better informed on things THE RAKU PROGRAMMERS DON'T NEED TO KNOW OR CARE ABOUT!

[10:26] <Xliff> Empasis mine because you have been ignoring that salient point this entire time.

[10:27] <nine> I'm not sure we mean the same thing with the word "installer". Do you mean the user installing something (e.g. Joe) or the application that the user uses to install something (e.g. zef).

[10:28] <Xliff> Does it matter?

[10:28] <Xliff> A raku user, who has no need to become a raku developer, will not give a shit about META6.json. Why make them?

[10:29] <Xliff> Currently the only way to install Raku software is via CURI (ala zef)

[10:29] <Xliff> So there is only -one- installer ATM.

[10:29] <Xliff> And it is flawed at the CURI core.

[10:30] <nine> It does matter a lot. Because while you're right, that the user doesn't have to care about META6.json, an installer application does have to care. And since the installer application does have to process META6.json, it already knows what modules are contained in the distribution and can already display this information to Joe user

[10:30] <Xliff> nine: Wait until I have a chance to write this up. Your arguments do not even begin to show me that you have an idea as to what my problem is.

[10:30] <nine> So there's nothing CURI has to do to have the user know which modules were installed

[10:30] <Xliff> nine: And that's where we disagree.

[10:30] <Xliff> nine: And you can't see it. You are arguing on a tangent that I am not dealing with at the moment.

[10:30] <nine> On which point exactly? Does the installer app not know the modules?

[10:31] <Xliff> nine: On just about every point that I've raised THAT YOU'VE IGNORED!

[10:31] <Xliff> So just stop. You aren't even close to addressing my issues. None of your questions matter to me.

[10:32] <nine> Have you considered that you may not have actually tried to understand my points either?

[10:33] <Xliff> I have. I have illustrated them to you over and over in this conversation. 

[10:33] <Xliff> You keep retreading backwards like you have not read them.

[10:33] <Xliff> Look at my use case above. Pay CLOSE ATTENTION to what I am asking there.

[10:33] <Xliff> Not a single WHIT of it is addr esseed by your questions.

[10:36] *** Xliff left
[10:39] <nine> What does WHIT stand for? Can't find it in the glossary

[10:41] <nine> Oh, I guess it isn't an acronym

[10:41] <lizmat> "a very small part or amount"

[10:42] <lizmat> I hope Xliff will correct me if I'm wrong

[10:42] <lizmat> the problem their facing is: installing a GUI based-app written in Raku taking very long

[10:43] <nine> Know what? Just forget it. As I will any issues you may report. Getting shouted at by people one is trying to help is decidedly not -Ofun

[10:43] <lizmat> indeed, it is not

[10:43] <lizmat> 2. Xliff wants to be able to report progress on the installation process

[10:44] <lizmat> 3. there is currently no way to do that

[10:44] <lizmat> fwiw, I also find this annoying with e.g. installing modules with zef

[10:44] <lizmat> case in point: try installing DateTime::Timezone  :-)

[10:44] <lizmat> *TimeZone

[10:46] <nine> lizmat: sure. But I bet you wouldn't care anymore about progress reports if installation was just faster.

[10:46] <lizmat> that would reduce the need for sure, but it will be a while before it is less than a few seconds for large module bases and their dependencies

[10:47] <lizmat> I mean, even with modules installed, a re-compile of the core causes modules needing to be re-pre-compiled for some of my workflows

[10:47] <lizmat> and that takes long enough to make a cup of tea in some cases :-(

[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:33] *** dogbert17 joined
[11:38] *** TempIRCLogger left
[11:38] *** TempIRCLogger joined
[11:42] *** TempIRCLogger left
[11:43] *** TempIRCLogger joined
[11:48] *** Geth left
[11:49] *** Geth joined
[11:52] *** TempIRCLogger left
[11:52] *** TempIRCLogger joined
[11:52] *** TempIRCLogger left
[11:53] *** TempIRCLogger joined
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[13:03] *** vrurg joined
[13:06] *** vrurg left
[13:08] *** vrurg joined
[13:20] <Geth> ¦ DBIish: eeb91eeb30 | (Vadim Belman)++ | lib/DBDish/Oracle/Native.pm6

[13:20] <Geth> ¦ DBIish: Use OCI_THREADED for when creating environment

[13:20] <Geth> ¦ DBIish: 

[13:20] <Geth> ¦ DBIish: This simple fix allows to use individual connections per-thread whereas

[13:20] <Geth> ¦ DBIish: with `OCI_DEFAULT` 2+ connections per application are likely to cause

[13:20] <Geth> ¦ DBIish: crashes.

[13:20] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/eeb91eeb30

[13:20] <Geth> ¦ DBIish: 041eb77d73 | (Vadim Belman)++ (committed using GitHub Web editor) | lib/DBDish/Oracle/Native.pm6

[13:20] <Geth> ¦ DBIish: Merge pull request #218 from vrurg/threaded-oracle

[13:20] <Geth> ¦ DBIish: 

[13:20] <Geth> ¦ DBIish: Use OCI_THREADED for when creating environment

[13:20] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/041eb77d73

[13:21] <ugexe> so leets add progress reports to everything

[13:22] <ugexe> sometimes Joe wants to know why their map is so slow and just wants it to sent events telling them when it iterated

[13:22] <ugexe> also each time a coercion occurs

[13:24] <ugexe> we can make the entire language an event store even. maybe even the first one

[13:24] <vrurg> ugexe: Sorry, I missed the previous discussion, it seems. But let me point at a difference: things like map and coercion are under user control. Module loading is not.

[13:24] <lizmat> I agree we need to be able to provide some kind of event stream

[13:25] <ugexe> we could easily find a more appropriate coparison that is equally absurd

[13:25] <lizmat> but I think a prerequisite for this would be in-process pre-compilation

[13:42] *** frost left
[14:20] *** dogbert17 left
[14:21] *** dogbert17 joined
[14:54] *** discord-raku-bot left
[14:55] *** discord-raku-bot joined
[15:05] <Geth> ¦ DBIish: vrurg++ created pull request #219: Prepare for zef ecosystem

[15:05] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/pull/219

[16:47] *** linkable6 left
[16:47] *** evalable6 left
[16:48] *** evalable6 joined
[16:49] *** discord-raku-bot left
[16:49] *** discord-raku-bot joined
[16:56] <nine> The irony is that all the progress reporting infrastructure will make stuff even slower. I have sometimes pondered removing RAKUDO_MODULE_DEBUG, but its still useful too often.

[17:48] *** linkable6 joined
[17:49] <lizmat> true, but the seeing some progress will give people a better idea on how long it is still going to take

[17:49] <lizmat> and that's also pretty important

[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:21] <ugexe> RAKUDO_LOG_PRECOMP is exactly for seeing "some" progress

[18:25] <ugexe> the argument can't be the end user is left in the dark, it has to be that there isnt a complex event emitting system in place to... do almost the same thing

[18:39] <lizmat> true: but you still have no idea how long it is going to take, as it only shows the one that is being pre-comped

[18:40] <ugexe> how would an event telling you the same thing give you any more of an idea how long it will take?

[18:40] <ugexe> i guess thats what my confusion mostly boils down to

[18:40] <lizmat> because it doesn't tell you how many things it still needs to do

[18:41] <ugexe> so if rakudo log precomp prefaced its output with how many modules it is about to precompile it would be fine?

[18:41] <lizmat> I mean, it was just bolted onto the RAKUDO_MODULE_DEBUG machinery

[18:41] <lizmat> that would be a start, yes

[18:42] <lizmat> you could even envision driving off a progress bar off of that

[18:42] <ugexe> you could do the same thing presumably with IO.watch or some such and no additional CUR machinery

[18:43] <lizmat> hmmm....

[18:43] <nine> Sure you can. Already right now. Parsing the installation process' STDERR isn't that hard

[18:43] <lizmat> do we know all of the precomp files that are going to be created beforehand ?

[18:43] <nine> Sure. It's in the META6.sjon

[18:45] <lizmat> recursively?

[18:46] <lizmat> I mean, does the outer outer process know?

[18:46] <nine> An installer only installs one dist at a time anyway.

[18:46] <lizmat> ok,  but what about re-pre-comping?

[18:48] <nine> That's a completely different use case.

[18:48] <nine> In just about any way

[18:55] <lizmat> I guess  :-)

[18:56] <lizmat> BTW, if I install something with "zef install ." from a dist directory

[18:56] <lizmat> should it re-precompile that module on first use without using any -I parameter ?

[19:00] <nine> no

[19:01] <nine> It will need to re-check dependencies, but that's much faster than full compilation.

[19:02] <lizmat> well, then there's something wrong, because it *will* re-precompile in that case

[19:04] <lizmat> meh, of course when I try to reproduce, it works  :-(

[19:06] <lizmat> I guess I'll get back to this when I can reproduce :-)

[19:52] <Geth> ¦ DBIish/main: 4 commits pushed by (Rod Taylor)++, (Vadim Belman)++

[19:52] <Geth> ¦ DBIish/main: 176c28f453 | Schedule daily CI run

[19:52] <Geth> ¦ DBIish/main: 885b9267cc | Change README filename references

[19:52] <Geth> ¦ DBIish/main: eeb91eeb30 | Use OCI_THREADED for when creating environment

[19:52] <Geth> ¦ DBIish/main: 041eb77d73 | Merge pull request #218 from vrurg/threaded-oracle

[19:52] <Geth> ¦ DBIish/main: review: https://github.com/raku-community-modules/DBIish/compare/176c28f45345^...041eb77d735b

[19:53] <Geth> ¦ DBIish/main: ba45fbc2f2 | (Vadim Belman)++ | 4 files

[19:53] <Geth> ¦ DBIish/main: Prepare for zef ecosystem

[19:53] <Geth> ¦ DBIish/main: 

[19:53] <Geth> ¦ DBIish/main: - start using mi6 for release

[19:53] <Geth> ¦ DBIish/main: - keep auth/ver/api of the module in sync with META6.json

[19:53] <Geth> ¦ DBIish/main: - add Changes file

[19:53] <Geth> ¦ DBIish/main: - change auth to `zef:raku-community-modules`

[19:53] <Geth> ¦ DBIish/main: review: https://github.com/raku-community-modules/DBIish/commit/ba45fbc2f2

[19:53] <Geth> ¦ DBIish/main: c5b311c89d | (Vadim Belman)++ (committed using GitHub Web editor) | 4 files

[19:53] <Geth> ¦ DBIish/main: Merge pull request #219 from vrurg/zef-ecosystem

[19:53] <Geth> ¦ DBIish/main: 

[19:53] <Geth> ¦ DBIish/main: Prepare for zef ecosystem

[19:53] <Geth> ¦ DBIish/main: review: https://github.com/raku-community-modules/DBIish/commit/c5b311c89d

[20:18] <vrurg> I have meet this note in NativeCall::TypeDiag with regard to &diag-functions: "REMOVED. It's now part of NativeCall" But it's not there. Any ideas?

[20:19] <vrurg> Can't release DBIish because mi6 fails on xt/ where that is used.

[20:59] <Geth> ¦ DBIish/main: c0e5c636dd | (Vadim Belman)++ | 4 files

[20:59] <Geth> ¦ DBIish/main: Quickfix for xt/ tests

[20:59] <Geth> ¦ DBIish/main: 

[20:59] <Geth> ¦ DBIish/main: Relied upon diag-functions routine used to be provided by

[20:59] <Geth> ¦ DBIish/main: NativeCall::TypeDiag but which is long not there.

[20:59] <Geth> ¦ DBIish/main: 

[20:59] <Geth> ¦ DBIish/main: Needed for `mi6 release` which tries to run tests in xt/ too.

[20:59] <Geth> ¦ DBIish/main: 

[20:59] <Geth> ¦ DBIish/main: NOTE. It looks like nobody did xt/ testing in years since the last

[20:59] <Geth> ¦ DBIish/main: commit to NativeCall::TypeDiag is dated back to 2016! Perhaps it makes

[20:59] <Geth> ¦ DBIish/main: more sense to remove them altogether?

[20:59] <Geth> ¦ DBIish/main: review: https://github.com/raku-community-modules/DBIish/commit/c0e5c636dd

[21:01] <Geth> ¦ DBIish/main: 6b01a57174 | (Vadim Belman)++ | 7 files

[21:01] <Geth> ¦ DBIish/main: 0.6.4

[21:01] <Geth> ¦ DBIish/main: review: https://github.com/raku-community-modules/DBIish/commit/6b01a57174

[23:45] *** benchable6 left
[23:45] *** squashable6 left
[23:45] *** unicodable6 left
[23:45] *** committable6 left
[23:45] *** bloatable6 left
[23:45] *** tellable6 left
[23:45] *** sourceable6 left
[23:45] *** bisectable6 left
[23:45] *** linkable6 left
[23:45] *** reportable6 left
[23:45] *** evalable6 left
[23:45] *** coverable6 left
[23:45] *** nativecallable6 left
[23:45] *** statisfiable6 left
[23:45] *** greppable6 left
[23:45] *** notable6 left
[23:45] *** quotable6 left
[23:45] *** shareable6 left
[23:45] *** releasable6 left
[23:47] *** benchable6 joined
[23:47] *** unicodable6 joined
[23:47] *** evalable6 joined
[23:47] *** notable6 joined
[23:47] *** bloatable6 joined
[23:48] *** reportable6 joined
[23:48] *** squashable6 joined
[23:48] *** tellable6 joined
[23:48] *** quotable6 joined
[23:49] *** linkable6 joined
