[00:08] *** reportable6 left
[00:08] *** reportable6 joined
[00:20] <Kaiepi> i tried something evil to reanimate the jvm: xzip serialized code, stuffed in an uncompressed segment of its jar. doesn't fix rakudo unsurprisingly, but produces much smaller jars ig

[00:22] <Kaiepi> i tried updating nqp's org.objectweb.asm dependency and actually producing jvm 9 bytecode to see if that would at least help, but past version 5.2 it refuses to build nqp alone outright

[00:22] <Kaiepi> because it tries to inline massive methods

[00:25] <Kaiepi> so it's probably not so much a problem with serialization, but the inlining we also do?

[00:37] <[Coke]> jdv: thank you for the release - reminder that we probably want to change "The Perl Foundation" to "The Raku Foundation"

[00:52] <japhb> Hey folks, I did some research on Rakudo versions to use for CI because Jonathan and I were trying to figure out what a reasonable CI horizon is these days, and thought it might be useful here: https://gist.github.com/japhb/88322d76326df16856f31f108c90e567

[00:52] <japhb> Comments and suggestions welcome.

[01:42] <[Coke]> japhb: looks good, looks like you gave that a lot of thought.

[03:04] *** frost joined
[03:16] *** frost left
[03:35] *** frost joined
[03:54] <japhb> Thanks [Coke]!

[04:27] <jdv> thanks guys!

[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:38] *** djinni` left
[06:38] *** rba left
[06:38] *** sjn left
[06:38] *** sjn joined
[06:39] *** rba joined
[06:39] *** djinni` joined
[06:51] *** SmokeMachine joined
[06:54] *** crystalfrost[m] joined
[07:39] *** sena_kun joined
[08:57] <timo> :+1: jdv

[09:22] *** sena_kun left
[09:40] *** discord-raku-bot left
[09:40] *** discord-raku-bot joined
[10:04] *** sena_kun joined
[10:30] *** gfldex left
[10:30] *** discord-raku-bot left
[11:40] *** benchable6 left
[11:40] *** coverable6 left
[11:40] *** greppable6 left
[11:40] *** sourceable6 left
[11:40] *** releasable6 left
[11:40] *** shareable6 left
[11:40] *** reportable6 left
[11:40] *** bloatable6 left
[11:40] *** quotable6 left
[11:40] *** nativecallable6 left
[11:40] *** notable6 left
[11:40] *** unicodable6 left
[11:40] *** linkable6 left
[11:40] *** evalable6 left
[11:40] *** bisectable6 left
[11:40] *** committable6 left
[11:40] *** statisfiable6 left
[11:40] *** tellable6 left
[11:41] *** nativecallable6 joined
[11:41] *** coverable6 joined
[11:41] *** bisectable6 joined
[11:41] *** releasable6 joined
[11:41] *** shareable6 joined
[11:41] *** committable6 joined
[11:41] *** benchable6 joined
[11:42] *** unicodable6 joined
[11:42] *** quotable6 joined
[11:42] *** tellable6 joined
[11:42] *** evalable6 joined
[11:42] *** reportable6 joined
[11:42] *** statisfiable6 joined
[11:42] *** linkable6 joined
[11:43] *** bloatable6 joined
[11:43] *** notable6 joined
[11:43] *** sourceable6 joined
[11:43] *** greppable6 joined
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:38] *** Xliff left
[13:02] <lizmat> notable6: weekly

[13:02] <notable6> lizmat, No notes for “weekly”

[13:09] *** frost left
[13:09] *** vrurg left
[13:10] *** vrurg joined
[13:44] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/08/01/2022-31-justintimerelease/

[13:47] <sena_kun> lizmat++

[14:02] <Kaiepi> i found a java flag combo that seems to help build times: -XX:+UseTransparentHugePages -XX:+AggressiveHeap

[14:02] <Kaiepi> still have no idea how to get CORE.d.setting to build :(

[14:09] <Geth> ¦ rakudo/lizmat-allow-no: 6a91316724 | (Elizabeth Mattijsen)++ | src/core.c/Main.pm6

[14:09] <Geth> ¦ rakudo/lizmat-allow-no: Allow for --no-foo as alternative to --/foo

[14:09] <Geth> ¦ rakudo/lizmat-allow-no: 

[14:09] <Geth> ¦ rakudo/lizmat-allow-no: By setting the new "allow-no" flag in %*SUB-MAIN-OPTS:

[14:09] <Geth> ¦ rakudo/lizmat-allow-no: 

[14:09] <Geth> ¦ rakudo/lizmat-allow-no:   $ raku -r 'sub MAIN(|c) { say c }; my %*SUB-MAIN-OPTS=:allow-no' --no-foo

[14:09] <Geth> ¦ rakudo/lizmat-allow-no:   \(:foo(Bool::False))

[14:09] <Geth> ¦ rakudo/lizmat-allow-no: 

[14:09] <Geth> ¦ rakudo/lizmat-allow-no: as opposed to:

[14:09] <Geth> ¦ rakudo/lizmat-allow-no: 

[14:09] <Geth> ¦ rakudo/lizmat-allow-no:   $ raku -r 'sub MAIN(|c) { say c }' --no-foo

[14:09] <Geth> ¦ rakudo/lizmat-allow-no:   \(:no-foo(Bool::True))

[14:09] <Geth> ¦ rakudo/lizmat-allow-no: review: https://github.com/rakudo/rakudo/commit/6a91316724

[14:09] <Geth> ¦ rakudo: lizmat++ created pull request #5011: Allow for --no-foo as alternative to --/foo

[14:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5011

[14:56] *** [Coke]_ joined
[14:58] *** [Coke] left
[16:41] *** discord-raku-bot joined
[16:58] *** [Coke]_ is now known as [Coke]

[17:02] *** sivoais left
[17:15] *** sivoais joined
[17:18] *** sena_kun left
[17:31] *** sivoais left
[17:39] *** sivoais joined
[17:54] <patrickb> I have just uploaded the compiled release files to rakudo.org

[17:54] *** sena_kun joined
[18:06] *** reportable6 left
[18:07] *** reportable6 joined
[18:57] *** sena_kun left
[19:00] *** sena_kun joined
[19:18] <Geth> ¦ rakudo: 47f9b2860b | (Elizabeth Mattijsen)++ | src/core.c/Int.pm6

[19:18] <Geth> ¦ rakudo: Add a lot of uint candidates for a lot of ops

[19:18] <Geth> ¦ rakudo: 

[19:18] <Geth> ¦ rakudo: This makes ++$a about 40% faster when $a is a native uint

[19:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/47f9b2860b

[19:24] <[Coke]> lizmat: some of those _u candidates invoke nqp_i variants - shouldn't it be _u all the way down?

[19:25] <[Coke]> e.g. prefix:<++> 

[19:25] <lizmat> there are no _u variants for that, I believe?

[19:26] <[Coke]> ... nevermind, Guess there isn't an add_u

[19:26] <lizmat> m: use nqp; nqp::add_u(1,2)

[19:26] <camelia> rakudo-moar 556bf98da: OUTPUT: «===SORRY!===␤No registered operation handler for 'add_u'␤»

[19:26] <[Coke]> yah, just checked the docs file.

[19:27] <[Coke]> is the speedup there because it was hitting Int, not int?

[19:27] <lizmat> yes

[19:27] <[Coke]> cool

[19:27] <[Coke]> ok, I'm all caught up. :)

[19:31] <Kaiepi> P6OpaqueREPRData and its serialization can be compressed somewhat with some bit magic for its attribute flags, but it has no influence on CORE.d.setting's allocation error

[20:55] <Kaiepi> huhhh

[20:55] <Kaiepi> jdk 20 seems to cope?

[21:08] <Kaiepi> wait, env screwup

[21:08] <Kaiepi> tick tock...

[21:21] <Kaiepi> nothing with jdk 19 (20 doesn't behave quite yet)

[21:38] *** sena_kun left
[21:43] *** lucs_ joined
[21:48] *** lucs left
[22:36] *** linkable6 left
[22:38] *** linkable6 joined
