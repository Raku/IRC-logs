[00:00] <Geth> ¦ tap-harness6: 1ececb26f2 | (Leon Timmermans)++ | 2 files

[00:00] <Geth> ¦ tap-harness6: Fix Supplier name in Output::Supplier

[00:00] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/commit/1ececb26f2

[00:00] <Geth> ¦ tap-harness6: 6fb155162e | (Leon Timmermans)++ | 3 files

[00:00] <Geth> ¦ tap-harness6: 0.3.1

[00:00] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/commit/6fb155162e

[00:09] *** reportable6 left
[00:12] *** reportable6 joined
[00:52] *** evalable6 joined
[01:35] *** frost joined
[01:42] *** frost left
[02:27] *** frost joined
[02:39] *** frost left
[03:10] *** frost joined
[03:13] *** discord-raku-bot left
[03:13] *** discord-raku-bot joined
[03:17] *** discord-raku-bot left
[03:17] *** discord-raku-bot joined
[03:20] *** frost left
[04:10] *** frost_ joined
[04:14] *** frost_ left
[04:16] *** frost joined
[04:20] *** frost left
[04:23] *** frost joined
[04:30] *** frost left
[05:10] *** frost joined
[05:25] *** Kaipi joined
[05:30] *** sjn_ joined
[05:35] *** discord-raku-bot left
[05:35] *** kjp left
[05:38] *** RakuIRCLogger left
[05:39] *** sjn_ left
[05:40] *** discord-raku-bot joined
[05:40] *** kjp joined
[05:40] *** Altai-man joined
[05:40] *** TempIRCLogger joined
[05:40] *** japhb joined
[05:40] *** Geth joined
[05:40] *** sjn joined
[06:08] *** reportable6 left
[06:14] *** frost left
[07:10] *** reportable6 joined
[08:03] *** patrickb joined
[08:03] *** patrickb left
[08:12] *** patrickb joined
[08:17] <patrickb> japhb: I have just seen the latest RSC minutes and the question about the state of the CI bot grant. The grant hasn't stalled. It is progressing slower than anticipated though. Latest report is here: https://news.perlfoundation.org/post/2021-10-raku-ci-bot-grant-update

[08:17] <tellable6> 2021-12-19T14:46:51Z #raku <SmokeMachine> patrickb sorry I haven’t seen your issue before, but I’ve just answered: https://github.com/FCO/Red/issues/539#issuecomment-997403720

[08:17] <tellable6> 2021-12-19T14:56:28Z #raku <SmokeMachine> patrickb also this one: https://github.com/FCO/Red/issues/538#issuecomment-997405831

[08:42] <patrickb> Am I assuming correctly, that we have no analytics whatsoever on rakudo.org and raku.org at the moment?

[08:43] <patrickb> If yes, what do people think about adding goatcounter.com to both of them?

[08:47] <nine> patrickb: oh, that report's a joy to read :) Thanks for doing the right thing (TM) about bugs you encounter. That may not be what the grant is actually about, but it's a great service to our users.

[08:47] <nine> OTOH what's the point of CI if not to catch bugs? :D So this may very well be on topic

[08:52] <MasterDuke> patrickb: does raku have a large userbase among goats? i would prefer we count visits by people

[08:54] <patrickb> :-P But how could you know whether there are people or goats sitting in front of all those keyboards? I remain with goatcounter being just as legitimate a name as peoplecounter.

[08:56] <MasterDuke> https://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you%27re_a_dog#/media/File:Internet_dog.jpg

[08:57] <nine> MasterDuke: honestly, if goats find our software useful, I'm ok with that.

[09:01] <nine> patrickb: I'm curious about that NativeCall issue...

[09:03] <MasterDuke> nine: i'll have to look for a means to use raku next time i play goat simulator

[09:06] <nine> patrickb: of course I cannot reproduce it locally... Can you still?

[09:16] <patrickb> nine: I can't.

[09:17] <nine> Not in the full app either?

[09:17] <patrickb> This is a bit frustrating, as that golf is about 1.5 hours worth of golfing...

[09:17] <patrickb> I'll try...

[09:37] <patrickb> nine: I got a repo with the full app.

[09:37] <nine> darn

[09:37] <patrickb> Took 12 runs

[09:42] <patrickb> nine: Are you interested in an explanation on how to set this up? Alternatively, would you recommend me to invest time in golfing this down once more?

[09:45] <nine> I fear a golf would be much more useful, since it's hard to reproduce, will want some rr, etc.

[09:46] <patrickb> OK

[10:03] <patrickb> nine: I might still have the RR record lying around. Is that of any help?

[10:23] *** frost joined
[10:35] *** frost left
[10:36] <nine> Only if you have exactly the same MoarVM + rakudo + OpenSSL installation to go with it. Unfortunately rr recordings do not include the program code and if the latter just differs slightly from the time of the recording rr will usually break 

[10:39] <patrickb> I just tried `rr replay` and it does run through.

[10:42] <nine> Okidoki....so the first challenge would be to set a break point at the place where we notice things to go wrong

[10:43] <patrickb> there is a print "Unable to read key"

[10:43] <patrickb> can I break on stdout/err?

[10:47] <patrickb> Uhm... there is also the warning: "warning: .dynamic section for "//home/patrick/rrepos/install/lib/libmoar.so" is not at the expected address (wrong library or version mismatch?)"

[10:47] <patrickb> Will that mess things up?

[10:48] <patrickb> wait

[10:48] <nine> potentially yes

[10:48] <nine> I'm not aware of a way to break on output

[10:48] <patrickb> ugh

[10:48] <nine> How is that printed?

[10:48] <patrickb> the warning or the Unable to read key?

[10:49] <nine> Unable to read key

[10:49] <patrickb> die "Unable to read key" unless defined($rsa);

[10:49] <nine> Maybe a break on MVM_exception_throw_adhoc will trigger

[10:50] <MasterDuke> MVM_exception_die

[10:50] <patrickb> ok. Lots of "unrecorded signal" warnings. I guess this won't do.

[10:51] <patrickb> I'll try to get a live repro again. I'll report back if / once I succeed.

[10:52] <nine> Well, if you've got to reproduce again anyway, you can at least make debugging easier, e.g. by putting something like nqp::sin_n(1e0) into a place where you want to break. Then place the break point on the sin_n implementation in src/core/interp.c

[10:52] <patrickb> ok

[10:53] *** frost joined
[11:39] *** sena_kun joined
[11:55] *** frost left
[12:07] *** reportable6 left
[12:09] <patrickb> nine: I can repro with a rakudo/MoarVM master as of 2021-11-27 and have it captured in rr, have put in a sin_n and have rr break on that sin_n right before the call to OpenSSL::PEM::PEM_read_bio_RSAPrivateKey (the call that fails to do what it should).

[12:11] <nine> nice!

[12:12] <nine> Btw. why the old master?

[12:16] <patrickb> That's the build that was still lying around

[12:17] <patrickb> I did a build with latest master and it didn't fail. I suspect it's not really fixed by latest master though as there are no changes in MoarVM since then that look like they could have fixed it and the bug is depending on soft factors (as can be seen by not failing any more on 2021.09).

[12:18] <patrickb> So I think it's still worth debugging on this older build even though there is a chance it turns out to have already been fixed.

[12:19] *** frost joined
[12:25] <nine> Ok, so PEM_read_bio_RSAPrivateKey fails. What's the failure mode? Missing return value?

[12:25] <patrickb> yes

[12:26] <nine> What does the bytecode of the frame calling PEM_read_bio_RSAPrivateKey look like?

[12:26] <patrickb> rr somehow still throws exceptions when stepping through the code. Should I try fixing rr or is there a chance of doing this with gdb? 

[12:26] <patrickb> How do I find out?

[12:26] *** frost left
[12:26] <nine> call MVM_dump_bytecode(tc)

[12:29] <patrickb> https://paste.sr.ht/~patrickb/2935953d1e8a2e1fd461629ec91a2ea89c3afbdf

[12:31] <patrickb> https://paste.sr.ht/~patrickb/47d0186b2afd1f2ea10ec2b764a032b2b3a31763the corresponding raku code: 

[12:34] <nine> So this should be the failing call: 00081      dispatch_o         loc_3_obj, 'lang-call', Callsite_8, loc_5_obj, loc_1_obj, loc_9_obj, loc_8_obj, loc_3_obj

[12:34] <nine> Can you advance to just after this call and then have a look at what's in tc->cur_frame->work[3].o?

[12:34] <nine> You can probably just set a break point at PEM_read_bio_RSAPrivateKey (should have thought of this earlier...) and then finish frames until you are back in src/core/interp.c

[12:35] * patrickb is trying

[12:40] <nine> I find it odd that this is clearly unspeshed code while your bugreport says that with spesh disabled the bug bug disappears.

[12:42] *** frost joined
[12:43] <bartolin> Hmm, reading this I can't help to think of https://github.com/sergot/openssl/issues/82 and https://github.com/sergot/openssl/issues/87 which I tried to debug last year. The installation of OpenSSL failed (but not reliably) -- seemingly in the same place. My guess back then was that precomplication was somehow involved with these failures.

[12:44] <bartolin> (hopefully this doesn't point you in the wrong direction and distract you from the real problem)

[12:47] <nine> Looks like different issues

[12:47] <patrickb> back in interp.c I am now looking at OP(return_o)

[12:48] <patrickb> Have I mis-stepped?

[12:49] <nine> You can always dump bytecode to see where you are. There's also call MVM_dump_backtrace(tc)

[12:50] <nine> You could be in the dispatch program

[12:50] <patrickb> that small arrow points to the currently executing op?

[12:51] <patrickb> That's pointing at 00082   -> decont             loc_3_obj, loc_3_obj

[12:54] <nine> Sort of, mostly

[12:55] <patrickb> stepping over the return_o I am now actually in the OP(decont)

[12:55] <nine> on a good day

[12:55] <nine> The one that's following the dispatch_o? Then yes, the return was in the dispatch program. Now tc->cur_frame->work[3].o is of interest

[12:56] <patrickb> {header = {sc_forward_u = {forwarder = 0x550000001e, sc = {sc_idx = 30, idx = 85}, st = 0x550000001e}, owner = 1, flags1 = 1 '\001', flags2 = 2 '\002', size = 24}, st = 0x41a72f8}

[12:56] <nine> What's in st?

[12:56] <patrickb> {header = {sc_forward_u = {forwarder = 0x100000001e, sc = {sc_idx = 30, idx = 16}, st = 0x100000001e}, owner = 1, flags1 = 2 '\002', flags2 = 2 '\002', size = 168},    REPR = 0x7ffff7e41ec0 <CPointer_this_repr>, REPR_data = 0x0, size = 32, type_check_cache_length = 3, mode_flags = 0, type_check_cache = 0x34be6d0, type_cache_id = 849920,    container_spec = 0x0, container_data = 0x0, boolification_spec = 0x34be6f0, hll_owner = 0x4dd190, hll_ro

[12:56] <patrickb> what does st stand for?

[12:56] <nine> STable

[12:58] <nine> The object's flags1 is 1, which is MVM_CF_TYPE_OBJECT, so you got a NULL pointer there

[12:58] <nine> Did PEM_read_bio_RSAPrivateKey really return NULL?

[12:58] <patrickb> now I regret not having rr working...

[12:58] <nine> s/got a NULL/got a CPointer type object which stands for NULL/

[12:58] <nine> Oh, that's in gdb? Bummer :(

[12:59] <patrickb> It's reproducible

[12:59] <patrickb> but yes, somehow rr fails as soon as I start stepping

[12:59] <nine> And with a break point on PEM_read_bio_RSAPrivateKey you should find the right spot quickly

[12:59] <patrickb> true, as I previously did

[12:59] <nine> Locally I use an rr built from source, so I always get the latest bug fixes

[13:00] <nine> Still sometimes happens that a replay crashes but works when tried again. I guess rr does some really deep magic

[13:00] <patrickb> AFK for a bit. Back in a few minutes...

[13:11] *** sena_kun_ joined
[13:13] *** sena_kun left
[14:11] *** reportable6 joined
[14:45] <Geth> ¦ rakudo: 186bd0b026 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[14:45] <Geth> ¦ rakudo: Rename Any.infer to Any.are

[14:45] <Geth> ¦ rakudo: 

[14:45] <Geth> ¦ rakudo: By popular request, also make sure that anything that has an

[14:45] <Geth> ¦ rakudo: .iterator method will work, not just Lists

[14:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/186bd0b026

[14:52] *** frost left
[14:55] *** discord-raku-bot left
[14:55] *** discord-raku-bot joined
[15:34] *** RakuIRCLogger left
[15:49] *** TempIRCLogger joined
[16:03] *** Geth joined
[16:11] *** discord-raku-bot left
[16:12] *** discord-raku-bot joined
[16:12] *** cognominal joined
[16:47] <patrickb> nine: I think I found the error. It's a bug in our OpenSSL wrapper. The `BIO_new_mem_buf` creates a BIO struct and copies the Buf pointer passed as the first argument into it. My golf (just as the OpenSSL wrapper) passes `$key.encode` and thus Rakudo subsequently frees that Buf and leaves the BIO with a broken buf.

[16:49] <patrickb> nine: According to the OpenSSL docs BIO_new_mem_buf does not take ownership of that buf. So the solution can't be to put `explicitly-manage()` around the arg.

[16:51] <patrickb> Is there a way to guarantee that Rakudo will not GC-more a Buf around? I.e. I could just keep the Buf alive in Rakudo land by holding it in a variable. But I need to guarantee that that pointer that escaped into C land stays valid. Can I do that somehow?

[16:53] <lizmat> if the Buf is big enough, it doesn't get created in the nursery?

[16:53] <nine> patrickb: for that pointer to stay valid, the Buf object must be kept alive. And it must stay the same size (otherwise the VMArray may realloc the buffer).

[16:54] <lizmat> ok, scratch my idea  :-)

[16:54] <nine> The buffer itself that's pointed at is malloced, so no worry about that.

[16:57] <patrickb> I think my understanding of moar is flawed. Doesn't the GC shuffle about everything around as it likes? Are Bufs special?

[17:01] <nine> Raku's Bufs (and Blobs) are REPR VMArray. VMArrays are GC-able 6model objects. They consist of the common header, and a body: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/VMArray.h#L39

[17:01] <nine> The body then contains some information about the size of the array and the actual pointer to the memory holding the elements: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/VMArray.h#L8

[17:02] <nine> This slots array is plain malloced memory and the GC doesn't care about this. The GC only cares about the object holding that pointer. C code just gets passed the pointer to the slots array

[17:04] <nine> The slots array gets freed when the VMArray objects gets freed. This is by way of the GC calling the object's gc_free method which takes care of such things: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/VMArray.c#L112

[17:04] <patrickb> I think I understand.

[17:05] <patrickb> Does that general principle apply to all things one can pass to native functions?

[17:06] * patrickb starts to suspect this is one of the things all that REPR stuff is about.

[17:10] <nine> Yes. We never actually pass a pointer to an MVMObject to C code. It depends on the REPR what the C code actually sees. Strings for example go through MVM_string_utf8_encode_C_string or the like. For integers, we pass whatever MVM_repr_get_int returns on that object.

[17:10] *** dogbert17 left
[17:17] <patrickb> nine: Nice. Then I think I know how to fix this bug. Thank you for explaining so much to me!

[17:20] *** dogbert17 joined
[17:50] <nine> You're welcome :)

[17:54] *** [Coke] left
[17:58] *** [Coke] joined
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:15] *** Geth left
[18:15] *** Geth joined
[18:26] *** nebuchad` joined
[18:29] *** sena_kun_ left
[18:30] *** sjn_ joined
[18:35] *** sjn left
[18:35] *** nine left
[18:35] *** kawaii_ left
[18:35] *** djinni` left
[18:35] *** moon-child left
[18:35] *** SmokeMachine left
[18:35] *** nebuchadnezzar left
[18:35] *** leont left
[18:35] *** rba left
[18:35] *** Skarsnik left
[18:35] *** CIAvash left
[18:35] *** eof left
[18:35] *** Geth left
[18:35] *** dogbert17 left
[18:35] *** lizmat left
[18:35] *** Voldenet left
[18:35] *** gfldex left
[18:35] *** maettu_ left
[18:35] *** sivoais left
[18:35] *** AlexDaniel left
[18:35] *** JRaspass left
[18:35] *** jdv left
[18:35] *** masak left
[18:35] *** samcv left
[18:35] *** timo left
[18:35] *** jjatria left
[18:35] *** ilogger2 left
[18:35] *** andinus left
[18:35] *** samebchase left
[18:35] *** [Tux] left
[18:35] *** TempIRCLogger left
[18:35] *** rypervenche left
[18:35] *** tbrowder left
[18:35] *** Util_ left
[18:35] *** reportable6 left
[18:35] *** [Coke] left
[18:35] *** discord-raku-bot left
[18:35] *** Kaipi left
[18:35] *** evalable6 left
[18:35] *** linkable6 left
[18:35] *** squashable6 left
[18:35] *** qorg11 left
[18:35] *** sourceable6 left
[18:35] *** quotable6 left
[18:35] *** statisfiable6 left
[18:35] *** unicodable6 left
[18:35] *** notable6 left
[18:35] *** committable6 left
[18:35] *** releasable6 left
[18:35] *** tellable6 left
[18:35] *** bloatable6 left
[18:35] *** benchable6 left
[18:35] *** bisectable6 left
[18:35] *** nativecallable6 left
[18:35] *** coverable6 left
[18:35] *** shareable6 left
[18:35] *** greppable6 left
[18:35] *** codesections left
[18:35] *** vrurg left
[18:39] *** moon-chi- joined
[18:39] *** djinni`_ joined
[18:39] *** nine_ joined
[18:39] *** leont joined
[18:39] *** kawaii_ joined
[18:39] *** SmokeMachine joined
[18:39] *** rba joined
[18:39] *** Geth joined
[18:39] *** reportable6 joined
[18:39] *** [Coke] joined
[18:39] *** dogbert17 joined
[18:39] *** TempIRCLogger joined
[18:39] *** lizmat joined
[18:39] *** Kaipi joined
[18:39] *** evalable6 joined
[18:39] *** linkable6 joined
[18:39] *** squashable6 joined
[18:39] *** qorg11 joined
[18:39] *** sourceable6 joined
[18:39] *** quotable6 joined
[18:39] *** statisfiable6 joined
[18:39] *** unicodable6 joined
[18:39] *** notable6 joined
[18:39] *** committable6 joined
[18:39] *** releasable6 joined
[18:39] *** tellable6 joined
[18:39] *** bloatable6 joined
[18:39] *** benchable6 joined
[18:39] *** bisectable6 joined
[18:39] *** nativecallable6 joined
[18:39] *** coverable6 joined
[18:39] *** shareable6 joined
[18:39] *** greppable6 joined
[18:39] *** CIAvash joined
[18:39] *** codesections joined
[18:39] *** AlexDaniel joined
[18:39] *** vrurg joined
[18:39] *** Skarsnik joined
[18:39] *** sivoais joined
[18:39] *** maettu_ joined
[18:39] *** gfldex joined
[18:39] *** Voldenet joined
[18:39] *** eof joined
[18:39] *** masak joined
[18:39] *** jdv joined
[18:39] *** JRaspass joined
[18:39] *** [Tux] joined
[18:39] *** samebchase joined
[18:39] *** andinus joined
[18:39] *** timo joined
[18:39] *** samcv joined
[18:39] *** ilogger2 joined
[18:39] *** jjatria joined
[18:39] *** Util_ joined
[18:39] *** tbrowder joined
[18:39] *** rypervenche joined
[18:40] *** discord-raku-bot joined
[19:42] *** bloatable6 left
[19:42] *** nativecallable6 left
[19:42] *** coverable6 left
[19:42] *** statisfiable6 left
[19:42] *** notable6 left
[19:42] *** sourceable6 left
[19:42] *** reportable6 left
[19:42] *** quotable6 left
[19:42] *** greppable6 left
[19:42] *** linkable6 left
[19:42] *** bisectable6 left
[19:42] *** evalable6 left
[19:42] *** releasable6 left
[19:42] *** benchable6 left
[19:42] *** tellable6 left
[19:42] *** committable6 left
[19:42] *** shareable6 left
[19:42] *** squashable6 left
[19:42] *** unicodable6 left
[19:42] *** evalable6 joined
[19:43] *** greppable6 joined
[19:43] *** benchable6 joined
[19:43] *** committable6 joined
[19:43] *** notable6 joined
[19:43] *** nativecallable6 joined
[19:55] *** moon-chi- is now known as moon-child

[20:01] *** discord-raku-bot left
[20:01] *** discord-raku-bot joined
[20:03] <gfldex> m: (^∞).hyper.map({ last });

[20:03] <camelia> rakudo-moar 186bd0b02: OUTPUT: «(signal XCPU)»

[20:04] <gfldex> Should that terminate properly?

[20:04] <lizmat> interesting  :-)

[20:06] <ugexe> im imagine last short-circuits as soon as it can, but that might mean the other units of work need to get finished (but that no more would be created)

[20:07] <ugexe> and of course all the other work is also infinite

[20:07] <ugexe> well no, nevermind thats not right

[20:08] <gfldex> usecase: https://gist.github.com/7b2f312317dc7a598c2627367a05f3fd

[20:08] <gfldex> Should I Rakudobug?

[20:10] <ugexe> it looks like it works for `for` though

[20:38] *** nine_ is now known as nine

[20:42] *** bloatable6 joined
[20:43] *** coverable6 joined
[20:43] *** statisfiable6 joined
[20:44] *** quotable6 joined
[20:44] *** unicodable6 joined
[20:44] *** bisectable6 joined
[21:02] <gfldex> m: my atomicint $bail = 0; (^∞).hyper.map({ say $bail⚛++; last if $bail > 3; });

[21:02] <camelia> rakudo-moar 186bd0b02: OUTPUT: «(signal XCPU)0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49…»

[21:03] <gfldex> The map seems to respect last, but the iterator that spawns batches doesn't know.

[21:04] <gfldex> We are not really good at stopping threads in general.

[21:07] <gfldex> filed as RT#4712

[21:23] <Geth> ¦ rakudo/rakudo-4711: 28b512380b | (Vadim Belman)++ | src/Perl6/World.nqp

[21:23] <Geth> ¦ rakudo/rakudo-4711: Make add_constant lookup setting symbols only

[21:23] <Geth> ¦ rakudo/rakudo-4711: 

[21:23] <Geth> ¦ rakudo/rakudo-4711: The compiler is only uses this method with core types. Limiting lookups

[21:23] <Geth> ¦ rakudo/rakudo-4711: to setting only prevents LTA errors in user code.

[21:23] <Geth> ¦ rakudo/rakudo-4711: 

[21:23] <Geth> ¦ rakudo/rakudo-4711: Fixes #4711

[21:23] <Geth> ¦ rakudo/rakudo-4711: review: https://github.com/rakudo/rakudo/commit/28b512380b

[21:23] <Geth> ¦ rakudo: vrurg++ created pull request #4713: Make add_constant lookup setting symbols only

[21:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4713

[21:42] *** tellable6 joined
[21:43] *** sourceable6 joined
[21:43] *** reportable6 joined
[21:44] *** shareable6 joined
[21:45] *** releasable6 joined
[22:01] <Geth> ¦ rakudo: 28b512380b | (Vadim Belman)++ | src/Perl6/World.nqp

[22:01] <Geth> ¦ rakudo: Make add_constant lookup setting symbols only

[22:01] <Geth> ¦ rakudo: 

[22:01] <Geth> ¦ rakudo: The compiler is only uses this method with core types. Limiting lookups

[22:01] <Geth> ¦ rakudo: to setting only prevents LTA errors in user code.

[22:01] <Geth> ¦ rakudo: 

[22:01] <Geth> ¦ rakudo: Fixes #4711

[22:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/28b512380b

[22:01] <Geth> ¦ rakudo: 94b9d497ef | (Vadim Belman)++ (committed using GitHub Web editor) | src/Perl6/World.nqp

[22:01] <Geth> ¦ rakudo: Merge pull request #4713 from rakudo/rakudo-4711

[22:01] <Geth> ¦ rakudo: 

[22:01] <Geth> ¦ rakudo: Make add_constant lookup setting symbols only

[22:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/94b9d497ef

[22:31] <japhb> (backlogging)  Ah, thank you patrickb for the clarity on the CI bot grant.  Glad to know it's not stalled.  :-)

[23:44] *** linkable6 joined
[23:52] *** Xliff joined
