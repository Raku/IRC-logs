[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[00:10] *** Kaiepi left
[00:17] <sortiz> m: my %h = a => 1, b =>2; say %h ~~ :2b # So good so far.

[00:17] <camelia> rakudo-moar 64f552f32: OUTPUT: «True␤»

[00:17] <sortiz> m: my %h = a => 1, b => 2; EVAL("say %h ~~ :2b") # But

[00:17] <camelia> rakudo-moar 64f552f32: OUTPUT: «No such method 'b' for invocant of type 'Hash'␤  in block <unit> at EVAL_0 line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:18] <sortiz> Seen originally in REPL, that depends of EVAL.

[00:24] <sortiz> Introduced by https://github.com/rakudo/rakudo/commit/7554d73322

[00:54] *** frost joined
[01:03] *** squashable6 left
[01:04] *** squashable6 joined
[01:18] <Geth> ¦ rakudo: coke self-unassigned Curlie in loop issue https://github.com/rakudo/rakudo/issues/4685

[01:19] <Geth> ¦ rakudo: coke self-unassigned Generating contributor list shows duplicate names for one email https://github.com/rakudo/rakudo/issues/1443

[02:03] *** codesections joined
[02:06] *** Kaiepi joined
[02:12] *** codesections left
[02:16] *** codesections joined
[02:16] *** codesections left
[02:32] *** codesections joined
[03:04] *** epony left
[03:20] *** Kaiepi left
[03:22] *** epony joined
[03:24] *** codesections left
[03:30] *** epony left
[03:38] *** codesections joined
[03:46] *** epony joined
[04:13] *** codesections left
[04:17] *** codesections joined
[06:00] *** Kaiepi joined
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[07:39] <Geth> ¦ rakudo: salortiz++ created pull request #5098: Actions: Avoid repeated $<sym> eq 'S'

[07:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5098

[08:31] <Geth> ¦ rakudo: bc3b582417 | (Salvador Ortiz)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[08:31] <Geth> ¦ rakudo: Actions: Avoid repeated $<sym> eq 'S' (#5098)

[08:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bc3b582417

[08:32] *** linkable6 left
[08:33] <sortiz> lizmat, thanks.

[08:33] <lizmat> you're very much welcome!

[08:34] *** linkable6 joined
[08:39] <sortiz> BTW, found another (obscure) regression in recent smartmatch optimizations:

[08:39] <sortiz> m: my %h = a => 1, b =>2; say %h ~~ :2b # So good so far.

[08:39] <camelia> rakudo-moar 64f552f32: OUTPUT: «True␤»

[08:39] <sortiz> m: my %h = a => 1, b => 2; EVAL("say %h ~~ :2b") # But

[08:39] <camelia> rakudo-moar 64f552f32: OUTPUT: «No such method 'b' for invocant of type 'Hash'␤  in block <unit> at EVAL_0 line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:39] *** sena_kun joined
[08:40] <lizmat> bisectable6 old=2022.02 my %h = a => 1, b => 2; EVAL("say %h ~~ :2b")

[08:40] <lizmat> bisectable6: old=2022.02 my %h = a => 1, b => 2; EVAL("say %h ~~ :2b")

[08:40] <bisectable6> lizmat, On both starting points (old=2022.02 new=bc3b582) the exit code is 1 and the output is identical as well

[08:40] <bisectable6> lizmat, Output on both points: «No such method 'b' for invocant of type 'Hash'␤  in block <unit> at EVAL_0 line 1␤  in block <unit> at /tmp/Lahlid1PiZ line 1␤␤»

[08:40] <lizmat> bisectable6: old=2020.01 my %h = a => 1, b => 2; EVAL("say %h ~~ :2b")

[08:40] <bisectable6> lizmat, Bisecting by exit code (old=2020.01 new=bc3b582). Old exit code: 0

[08:41] <bisectable6> lizmat, bisect log: https://gist.github.com/31ef1ad2edbe5ecc4fecc714bcfa0590

[08:41] <bisectable6> lizmat, (2021-12-27) https://github.com/rakudo/rakudo/commit/7554d733228d24416054993b5a17a9710b142a31

[08:42] <lizmat> ok, pretty recent  :-)

[08:44] <sortiz> In run with RAKUDO_OPTIMIZE_NOSM=1 the problem vanish.

[08:45] <sortiz> In the REPL is very visible, as all pass to EVAL.

[08:48] <sortiz> I trace it to the conditional in https://github.com/rakudo/rakudo/blob/master/src/Perl6/Optimizer.nqp#L1994

[09:02] <sortiz> That test doesn't make sense because the case "$lhs is Pair" was already attended in line 1894, and the code controlled by the test is for the case $lhs is Associative.

[09:59] *** lizmat__ joined
[10:02] *** lizmat__ left
[10:02] *** lizmat left
[10:02] *** lizmat__ joined
[10:09] *** lizmat__ left
[10:09] *** lizmat joined
[10:23] *** sortiz left
[10:31] *** sena_kun left
[11:01] *** frost left
[11:14] *** sena_kun joined
[12:06] *** reportable6 left
[12:07] *** reportable6 joined
[12:44] *** frost joined
[13:37] *** Altai-man joined
[13:37] *** sena_kun left
[13:52] *** epony left
[13:53] *** epony joined
[14:20] *** linkable6 left
[14:22] *** linkable6 joined
[14:36] *** [Tux] left
[15:03] *** [Tux] joined
[15:24] <vrurg> sortiz: good catch, thanks! Fixed locally.

[15:24] <tellable6> vrurg, I'll pass your message to sortiz

[15:36] *** codesections left
[15:36] *** sortiz joined
[15:40] <sortiz> .

[15:40] <tellable6> 2022-11-11T15:24:44Z #raku-dev <vrurg> sortiz: good catch, thanks! Fixed locally.

[16:00] <Geth> ¦ nqp: MasterDuke17++ created pull request #785: Chown args should be unsigned

[16:00] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/785

[16:01] <[Coke]> misreading "chown" as "clown" is good for a chuckle.

[16:03] <MasterDuke> hm, don't think i've ever had an opinion on whether clowns should be allowed to argue in sign language or not...

[16:09] *** frost left
[16:10] <lizmat> .oO( or even unsign language :-)

[16:21] <japhb> MasterDuke: Doesn't that describe a mime?

[17:08] <sortiz> vrurg, BTW, while reviewing the code I found that several cases of forced "boolification" can be eliminated, since the respective .ACCEPT methods already return Bool. That can eliminate some "special" cases that only seek to avoid "boolification".

[17:38] *** codesections joined
[17:50] *** Kaiepi left
[18:06] *** reportable6 left
[18:06] *** reportable6 joined
[18:12] *** Altai-man left
[18:56] *** sena_kun joined
[19:07] *** Kaiepi joined
[19:16] *** discord-raku-bot left
[19:16] *** discord-raku-bot joined
[19:21] *** discord-raku-bot left
[19:21] *** discord-raku-bot joined
[19:36] *** MasterDuke left
[19:52] *** sena_kun left
[19:55] *** sena_kun joined
[19:55] <vrurg> sortiz: I was considering some, but it was requiring time I didn't have back then. So, went by safe route.'

[20:09] <sortiz> vrurg, Yes, it certainly has to be reviewed on a case-by-case basis. Tell me if I can help you in any way.

[20:44] *** sortiz left
[20:58] *** sena_kun left
[20:59] *** sena_kun joined
[21:17] <vrurg> .tell sortiz I don't expect to be available for that task soon. You could pick it up if you want.

[21:17] <tellable6> vrurg, I'll pass your message to sortiz

[22:19] *** sortiz joined
[22:57] *** sena_kun left
[23:13] *** codesections left
