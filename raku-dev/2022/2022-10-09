[00:02] <japhb> Digest's tests are failing, but it *appears* unrelated -- something about invalid TAP output

[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[01:44] *** sourceable6 left
[01:44] *** shareable6 left
[01:44] *** nativecallable6 left
[01:44] *** coverable6 left
[01:44] *** bloatable6 left
[01:44] *** committable6 left
[01:44] *** greppable6 left
[01:44] *** bisectable6 left
[01:44] *** quotable6 left
[01:44] *** notable6 left
[01:44] *** unicodable6 left
[01:44] *** evalable6 left
[01:44] *** reportable6 left
[01:44] *** benchable6 left
[01:44] *** statisfiable6 left
[01:44] *** linkable6 left
[01:44] *** tellable6 left
[01:44] *** releasable6 left
[01:44] *** squashable6 left
[01:45] *** shareable6 joined
[01:45] *** nativecallable6 joined
[01:45] *** statisfiable6 joined
[01:45] *** unicodable6 joined
[01:46] *** sourceable6 joined
[01:46] *** greppable6 joined
[01:46] *** bloatable6 joined
[01:46] *** coverable6 joined
[01:46] *** releasable6 joined
[01:47] *** benchable6 joined
[01:47] *** tellable6 joined
[01:47] *** committable6 joined
[01:47] *** squashable6 joined
[01:47] *** quotable6 joined
[01:47] *** evalable6 joined
[01:47] *** notable6 joined
[01:47] *** linkable6 joined
[01:48] *** reportable6 joined
[01:48] *** bisectable6 joined
[02:19] *** frost joined
[02:34] *** squashable6 left
[02:37] *** squashable6 joined
[06:06] *** reportable6 left
[06:06] *** reportable6 joined
[07:06] *** greppable6 left
[07:06] *** shareable6 left
[07:06] *** benchable6 left
[07:06] *** bloatable6 left
[07:06] *** statisfiable6 left
[07:06] *** reportable6 left
[07:06] *** sourceable6 left
[07:06] *** notable6 left
[07:06] *** squashable6 left
[07:06] *** committable6 left
[07:06] *** unicodable6 left
[07:06] *** tellable6 left
[07:06] *** quotable6 left
[07:06] *** releasable6 left
[07:06] *** linkable6 left
[07:06] *** coverable6 left
[07:06] *** evalable6 left
[07:06] *** nativecallable6 left
[07:06] *** nativecallable6 joined
[07:06] *** sourceable6 joined
[07:06] *** evalable6 joined
[07:07] *** reportable6 joined
[07:07] *** squashable6 joined
[07:07] *** benchable6 joined
[07:07] *** linkable6 joined
[07:07] *** committable6 joined
[07:08] *** shareable6 joined
[07:08] *** greppable6 joined
[07:08] *** releasable6 joined
[07:08] *** coverable6 joined
[07:08] *** quotable6 joined
[07:08] *** bloatable6 joined
[07:08] *** unicodable6 joined
[07:08] *** statisfiable6 joined
[07:09] *** notable6 joined
[07:09] *** tellable6 joined
[07:11] <Geth> ¦ rakudo: 191964c5a8 | (Christian Bartolomäus)++ | src/Perl6/World.nqp

[07:11] <Geth> ¦ rakudo: Reuse $v-how instead of calling HOW again

[07:11] <Geth> ¦ rakudo: 

[07:11] <Geth> ¦ rakudo: This won't make much of a difference, but I stumbled upon the repeated

[07:11] <Geth> ¦ rakudo: call to HOW. To me reusing the already computed variable $v-how looks

[07:11] <Geth> ¦ rakudo: a bit more consistent.

[07:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/191964c5a8

[07:11] <Geth> ¦ rakudo: usev6++ created pull request #5075: Fix argument for call to archetypes

[07:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5075

[07:27] <Geth> ¦ rakudo: c915b07c94 | (Christian Bartolomäus)++ | src/Perl6/Metamodel/CurriedRoleHOW.nqp

[07:27] <Geth> ¦ rakudo: Fix argument for call to archetypes

[07:27] <Geth> ¦ rakudo: 

[07:27] <Geth> ¦ rakudo: This buglet sneaked in with 71de22321d where an optional positional

[07:27] <Geth> ¦ rakudo: parameter for archetypes was introduced. Similar to other methods

[07:27] <Geth> ¦ rakudo: of the metamodel API the first argument should be the object that

[07:27] <Geth> ¦ rakudo: HOW was invoked upon.

[07:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c915b07c94

[07:27] <Geth> ¦ rakudo: 3b36d55417 | niner++ (committed using GitHub Web editor) | src/Perl6/Metamodel/CurriedRoleHOW.nqp

[07:27] <Geth> ¦ rakudo: Merge pull request #5075 from usev6/CurriedRoleHow_small_fix

[07:27] <Geth> ¦ rakudo: 

[07:27] <Geth> ¦ rakudo: Fix argument for call to archetypes

[07:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3b36d55417

[09:17] *** sena_kun joined
[10:17] *** shareable6 left
[10:17] *** reportable6 left
[10:17] *** bloatable6 left
[10:17] *** unicodable6 left
[10:17] *** linkable6 left
[10:17] *** squashable6 left
[10:17] *** tellable6 left
[10:17] *** statisfiable6 left
[10:17] *** coverable6 left
[10:17] *** nativecallable6 left
[10:17] *** benchable6 left
[10:17] *** releasable6 left
[10:17] *** committable6 left
[10:17] *** evalable6 left
[10:17] *** greppable6 left
[10:17] *** sourceable6 left
[10:17] *** quotable6 left
[10:17] *** notable6 left
[10:17] *** squashable6 joined
[10:17] *** bloatable6 joined
[10:17] *** notable6 joined
[10:17] *** coverable6 joined
[10:17] *** benchable6 joined
[10:18] *** committable6 joined
[10:18] *** sourceable6 joined
[10:18] *** greppable6 joined
[10:18] *** tellable6 joined
[10:19] *** nativecallable6 joined
[10:19] *** shareable6 joined
[10:19] *** linkable6 joined
[10:19] *** quotable6 joined
[10:19] *** reportable6 joined
[10:20] *** releasable6 joined
[10:20] *** statisfiable6 joined
[10:20] *** unicodable6 joined
[10:20] *** evalable6 joined
[10:22] <Geth> ¦ rakudo: 792418b05e | (Elizabeth Mattijsen)++ | src/core.c/Buf.pm6

[10:22] <Geth> ¦ rakudo: Revert "Make Blob concatenation always return the left-hand type"

[10:22] <Geth> ¦ rakudo: 

[10:22] <Geth> ¦ rakudo: This reverts commit 02a28de5bd7dfdd4b9e56f6934b7f40a86f9c152.

[10:22] <Geth> ¦ rakudo: 

[10:22] <Geth> ¦ rakudo: Reverting because there appears to be significant ecosystem fallout

[10:22] <Geth> ¦ rakudo: in upstream modules such as BSON and HTTP::UserAgent.  Sadly, making

[10:22] <Geth> ¦ rakudo: this fix opt-in with a 6.e version, is tricky until we can dispatch

[10:22] <Geth> ¦ rakudo: on language version.

[10:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/792418b05e

[10:22] <lizmat> japhb ^^

[10:23] <lizmat> it was not an error in the tests

[10:24] <lizmat> it showed in the tests, yes, at least with HTTP::UserAgent

[11:24] *** greppable6 left
[11:24] *** bloatable6 left
[11:24] *** committable6 left
[11:24] *** quotable6 left
[11:24] *** statisfiable6 left
[11:24] *** notable6 left
[11:24] *** evalable6 left
[11:24] *** linkable6 left
[11:24] *** squashable6 left
[11:24] *** sourceable6 left
[11:24] *** coverable6 left
[11:24] *** reportable6 left
[11:24] *** nativecallable6 left
[11:24] *** benchable6 left
[11:24] *** unicodable6 left
[11:24] *** tellable6 left
[11:24] *** shareable6 left
[11:24] *** releasable6 left
[11:25] *** nativecallable6 joined
[11:25] *** benchable6 joined
[11:25] *** shareable6 joined
[11:25] *** greppable6 joined
[11:25] *** unicodable6 joined
[11:25] *** quotable6 joined
[11:25] *** tellable6 joined
[11:26] *** sourceable6 joined
[11:26] *** bloatable6 joined
[11:26] *** releasable6 joined
[11:26] *** squashable6 joined
[11:26] *** linkable6 joined
[11:26] *** committable6 joined
[11:26] *** statisfiable6 joined
[11:26] *** coverable6 joined
[11:27] *** reportable6 joined
[11:27] *** notable6 joined
[11:27] *** evalable6 joined
[11:51] *** sena_kun left
[11:52] *** sena_kun joined
[12:06] *** reportable6 left
[12:08] *** reportable6 joined
[12:24] *** sena_kun left
[12:25] *** sena_kun joined
[13:08] <Geth> ¦ rakudo: e826dbdcb5 | (Elizabeth Mattijsen)++ | 2 files

[13:08] <Geth> ¦ rakudo: Move the iterator logic of Str.comb(N) to RI::Ngrams

[13:08] <Geth> ¦ rakudo: 

[13:08] <Geth> ¦ rakudo: And also make the logic a bit more general, to allow for additional

[13:08] <Geth> ¦ rakudo: uses, such as creating ngrams of a string

[13:08] <Geth> ¦ rakudo: 

[13:08] <Geth> ¦ rakudo: No functional changes, unmeasurable performance change on Str.comb(N)

[13:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e826dbdcb5

[13:22] *** sena_kun left
[13:30] *** frost left
[13:49] *** Kaiepi left
[14:26] *** Kaiepi joined
[15:03] *** epony left
[16:12] *** sena_kun joined
[17:39] <Geth> ¦ rakudo: d12461b097 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[17:39] <Geth> ¦ rakudo: Fix issue with steps / partial

[17:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d12461b097

[17:47] *** sena_kun left
[17:48] *** sena_kun joined
[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: 7fa6311ea4 | (Elizabeth Mattijsen)++ | 2 files

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: Add rotor-like capability to Str.comb

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: 

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: By specifying a Pair with size and step, similar to List.rotor.

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: E.g., to generate trigrams of a string, use .comb(3 => -2):

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: 

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor:    say "abcdef".comb(3 => -2); # abc bcd cde def

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: 

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: Takes an optional :partial flag to also generate partial substrings

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: (less than the specified size):

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: 

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor:    say "abcde".comb(3 => -2, :partial); # abc bcd cde de e

[17:54] <Geth> ¦ rakudo/lizmat-comb-rotor: review: https://github.com/rakudo/rakudo/commit/7fa6311ea4

[17:54] <Geth> ¦ rakudo: lizmat++ created pull request #5076: Add rotor-like capability to Str.comb

[17:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5076

[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:12] <bartolin_> lizmat: it looks like your changes from int to uint from yesterday caused some fallout for the JVM backend :( One prominent example would be 'my str @arr = "a".."z"' which now explodes with "java.lang.ClassCastException: class java.lang.Long cannot be cast to class org.raku.nqp.sixmodel.SixModelObject"

[18:12] <bartolin_> From running with --ll-exceptions it hits the uint candidate of AT-POS: https://github.com/rakudo/rakudo/blob/d12461b097/src/core.c/Array.pm6#L460

[18:13] <bartolin_> And then !AT_POS_SLOW is called: https://github.com/rakudo/rakudo/blob/d12461b097/src/core.c/Array.pm6#L487

[18:13] <lizmat> bartolin_: that feels... weird ?

[18:14] <bartolin_> And the signatures don't look right: !AT_POS_SLOW wants an int, but gets an uint. (I think that is the problem.)

[18:14] <bartolin_> m: 'use nqp; my class Foo { method bar(uint $pos) { self.foo($pos) }; method foo(int $pos) { 42 } }; my int $foo = 42; say Foo.new.bar($foo)'

[18:14] <camelia> rakudo-moar d12461b09: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "use nqp; my class Foo { method bar(uint $pos) { self.foo($pos) }; method foo(int $pos) { 42 } }; my int $foo = 42; say Foo.new.bar($foo)" in sink context (line 1)␤»

[18:14] <bartolin_> m: use nqp; my class Foo { method bar(uint $pos) { self.foo($pos) }; method foo(int $pos) { 42 } }; my int $foo = 42; say Foo.new.bar($foo)

[18:14] <camelia> rakudo-moar d12461b09: OUTPUT: «42␤»

[18:14] <bartolin_> This leads to the same error I see with 'my str @arr = "a".."z"'

[18:15] <bartolin_> m: 'my sub bar(uint $pos) { foo($pos) }; my sub foo(int $pos) { 42 }; say bar(42)'

[18:15] <camelia> rakudo-moar d12461b09: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "my sub bar(uint $pos) { foo($pos) }; my sub foo(int $pos) { 42 }; say bar(42)" in sink context (line 1)␤»

[18:15] <bartolin_> It doesn't seem to work with subs.

[18:15] <bartolin_> (on moar, I mean)

[18:15] <bartolin_> m: my sub bar(uint $pos) { foo($pos) }; my sub foo(int $pos) { 42 }; say bar(42)

[18:15] <camelia> rakudo-moar d12461b09: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling foo(uint) will never work with declared signature (int $pos)␤at <tmp>:1␤------> my sub bar(uint $pos) { ⏏foo($pos) }; my sub foo(int $pos) { 42 }␤»

[18:17] <bartolin_> I think I'll create one or two issues about the problem. Just wanted to note it here in advance.

[18:17] <lizmat> I' going to revert those changes, will revisit after a release

[18:18] <Geth> ¦ rakudo: f35759beeb | (Elizabeth Mattijsen)++ | 2 files

[18:18] <Geth> ¦ rakudo: Revert "Use uint comparisons in native infix:<cmp>"

[18:18] <Geth> ¦ rakudo: 

[18:18] <Geth> ¦ rakudo: This reverts commit b75545d3b835d537291f7b93be420a0e1b785da4.

[18:18] <Geth> ¦ rakudo: 

[18:18] <Geth> ¦ rakudo: Causing issues on JVM backend, backing out for now

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f35759beeb

[18:18] <Geth> ¦ rakudo: 82d4c17c07 | (Elizabeth Mattijsen)++ | 2 files

[18:18] <Geth> ¦ rakudo: Revert "Apply unsigned int comparisons on native arrays"

[18:18] <Geth> ¦ rakudo: 

[18:18] <Geth> ¦ rakudo: This reverts commit 32af3dbeafb5cfc106cf048fe9b5e5ffd7f88f3d.

[18:18] <Geth> ¦ rakudo: 

[18:18] <Geth> ¦ rakudo: Causing issues on JVM backend, backing out for now

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/82d4c17c07

[18:18] <lizmat> bartolin_: sorry for the noise

[18:19] <lizmat> 25c76aed00e3be97228be0171487ec9d490b26de is going to stay, as that actually solved a problem

[18:20] *** linkable6 left
[18:21] *** linkable6 joined
[18:21] *** epony joined
[18:22] <bartolin_> lizmat: thanks, that was quick. I don't want to slow down progress with reports of explosions from the JVM backend, but in this case I'm glad to get the old, working version back :)

[18:25] * bartolin_ is going to trigger a build and spectest run on current HEAD

[18:37] <bartolin_> lizmat: I just saw, that the same error could be triggered without your changes with the following code. That also reaches !AT_POS_SLOW -- which expectes an int.

[18:37] <bartolin_> m: my uint $foo = 1; my @arr = ^Inf; say @arr.AT-POS($foo)

[18:37] <camelia> rakudo-moar 82d4c17c0: OUTPUT: «1␤»

[19:31] *** linkable6 left
[19:31] *** evalable6 left
[19:31] *** evalable6 joined
[19:32] *** linkable6 joined
[21:18] *** benchable6 left
[21:18] *** bisectable6 left
[21:18] *** unicodable6 left
[21:18] *** notable6 left
[21:18] *** reportable6 left
[21:18] *** evalable6 left
[21:18] *** coverable6 left
[21:18] *** shareable6 left
[21:18] *** quotable6 left
[21:18] *** sourceable6 left
[21:18] *** releasable6 left
[21:18] *** linkable6 left
[21:18] *** greppable6 left
[21:18] *** statisfiable6 left
[21:18] *** tellable6 left
[21:18] *** nativecallable6 left
[21:18] *** committable6 left
[21:18] *** squashable6 left
[21:18] *** bloatable6 left
[21:19] *** linkable6 joined
[21:20] *** committable6 joined
[21:21] *** benchable6 joined
[21:21] *** notable6 joined
[21:21] *** statisfiable6 joined
[21:21] *** releasable6 joined
[21:21] *** coverable6 joined
[21:21] *** greppable6 joined
[21:21] *** bisectable6 joined
[21:21] *** bloatable6 joined
[21:21] *** reportable6 joined
[21:21] *** sourceable6 joined
[21:21] *** squashable6 joined
[21:22] *** quotable6 joined
[21:22] *** nativecallable6 joined
[21:22] *** evalable6 joined
[21:22] *** shareable6 joined
[21:22] *** tellable6 joined
[21:22] *** unicodable6 joined
[21:35] *** sena_kun left
[21:56] *** greppable6 left
[21:56] *** coverable6 left
[21:56] *** notable6 left
[21:56] *** evalable6 left
[21:56] *** statisfiable6 left
[21:56] *** nativecallable6 left
[21:56] *** squashable6 left
[21:56] *** benchable6 left
[21:56] *** reportable6 left
[21:56] *** committable6 left
[21:56] *** tellable6 left
[21:56] *** bloatable6 left
[21:56] *** unicodable6 left
[21:56] *** shareable6 left
[21:56] *** linkable6 left
[21:56] *** bisectable6 left
[21:56] *** sourceable6 left
[21:56] *** releasable6 left
[21:56] *** quotable6 left
[21:57] *** greppable6 joined
[21:58] *** tellable6 joined
[21:58] *** sourceable6 joined
[21:58] *** bloatable6 joined
[21:58] *** benchable6 joined
[21:59] *** releasable6 joined
[21:59] *** statisfiable6 joined
[21:59] *** reportable6 joined
[21:59] *** quotable6 joined
[21:59] *** linkable6 joined
[21:59] *** nativecallable6 joined
[21:59] *** notable6 joined
[21:59] *** bisectable6 joined
[22:00] *** evalable6 joined
[22:00] *** committable6 joined
[22:00] *** shareable6 joined
[22:00] *** coverable6 joined
[22:00] *** unicodable6 joined
[22:00] *** squashable6 joined
[22:15] *** kjp left
[22:17] *** kjp joined
