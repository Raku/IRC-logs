[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[02:08] *** reportable6 left
[02:08] *** linkable6 left
[02:08] *** greppable6 left
[02:08] *** coverable6 left
[02:08] *** tellable6 left
[02:08] *** evalable6 left
[02:08] *** unicodable6 left
[02:08] *** bisectable6 left
[02:08] *** shareable6 left
[02:08] *** notable6 left
[02:08] *** bloatable6 left
[02:08] *** committable6 left
[02:08] *** statisfiable6 left
[02:08] *** quotable6 left
[02:08] *** nativecallable6 left
[02:08] *** benchable6 left
[02:08] *** sourceable6 left
[02:08] *** releasable6 left
[02:08] *** benchable6 joined
[02:08] *** bisectable6 joined
[02:09] *** greppable6 joined
[02:09] *** committable6 joined
[02:09] *** evalable6 joined
[02:09] *** unicodable6 joined
[02:09] *** releasable6 joined
[02:10] *** notable6 joined
[02:10] *** quotable6 joined
[02:10] *** reportable6 joined
[02:10] *** tellable6 joined
[02:10] *** linkable6 joined
[02:10] *** nativecallable6 joined
[02:10] *** sourceable6 joined
[02:10] *** bloatable6 joined
[02:10] *** statisfiable6 joined
[02:11] *** shareable6 joined
[02:11] *** coverable6 joined
[02:14] *** frost joined
[03:24] *** frost left
[03:25] *** frost joined
[03:31] *** frost left
[04:33] *** committable6 left
[04:33] *** nativecallable6 left
[04:33] *** releasable6 left
[04:33] *** evalable6 left
[04:33] *** quotable6 left
[04:33] *** benchable6 left
[04:33] *** bloatable6 left
[04:33] *** coverable6 left
[04:33] *** statisfiable6 left
[04:33] *** greppable6 left
[04:33] *** notable6 left
[04:33] *** sourceable6 left
[04:33] *** shareable6 left
[04:33] *** linkable6 left
[04:33] *** unicodable6 left
[04:33] *** tellable6 left
[04:33] *** bisectable6 left
[04:33] *** reportable6 left
[04:33] *** evalable6 joined
[04:33] *** reportable6 joined
[04:33] *** linkable6 joined
[04:33] *** shareable6 joined
[04:34] *** notable6 joined
[04:34] *** sourceable6 joined
[04:34] *** statisfiable6 joined
[04:34] *** releasable6 joined
[04:34] *** bisectable6 joined
[04:34] *** bloatable6 joined
[04:35] *** coverable6 joined
[04:35] *** committable6 joined
[04:35] *** unicodable6 joined
[04:35] *** tellable6 joined
[04:35] *** benchable6 joined
[04:35] *** quotable6 joined
[04:35] *** greppable6 joined
[04:36] *** nativecallable6 joined
[05:43] *** jjatria left
[05:43] *** sivoais left
[05:43] *** jdv left
[05:43] *** qorg11 left
[05:43] *** jdv joined
[05:43] *** sivoais joined
[05:44] *** jjatria joined
[05:44] *** qorg11 joined
[05:48] *** elcaro left
[05:48] *** elcaro joined
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:29] <CIAvash> Should the error messages produced by the compiler(text or JSON output) be considered implementation-dependent? Roast does not defined them? And will not do that in the future? I'm asking just to be clear; if that's the case, the name of tools created which use these error messages should have `rakudo` in their name?
[07:08] *** evalable6 left
[07:08] *** linkable6 left
[07:10] *** linkable6 joined
[07:10] *** evalable6 joined
[07:23] <moon-child> CIAvash: I am not in charge of deciding such things, but: that sounds reasonable
[07:45] <nine> We've had lots of commits in roast where a previous check for a certain error message was replaced by a type check on the exception or at least made more flexible by only testing for parts of error messages (when it's an Adhoc exception).
[07:46] <nine> I haven't seen anyone considering precise error messages as public API (as that would prevent us from improving those messages even). Those overly specific tests have always been considered mistakes.
[08:18] <Geth> ¦ rakudo: 980bfe168c | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/CompUnit/Loader.pm6
[08:18] <Geth> ¦ rakudo: Remove CATCH from CompUnit::Loader.load-source
[08:18] <Geth> ¦ rakudo: 
[08:18] <Geth> ¦ rakudo: It occurred to me that the CATCH was merely there for restoring the
[08:18] <Geth> ¦ rakudo: value in hllsym('Raku','GLOBAL') and then rethrow.  And have the same
[08:18] <Geth> ¦ rakudo: done on exit.  Feels to me a single LEAVE phaser would do that with
[08:18] <Geth> ¦ rakudo: less code.
[08:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/980bfe168c
[08:19] <lizmat> Files=1352, Tests=117184, 297 wallclock secs (36.39 usr  9.65 sys + 4120.64 cusr 339.69 csys = 4506.37 CPU)
[08:41] <[TuxCM]> Rakudo v2022.03-218-g980bfe168 (v6.d) on MoarVM 2022.03-17-g794e1d589
[08:41] <[TuxCM]> csv-test-xs-20      0.401 -  0.402
[08:41] <[TuxCM]> csv-ip5xs           0.757 -  0.770
[08:41] <[TuxCM]> test-t --race       0.816 -  0.889
[08:41] <[TuxCM]> test-t              1.408 -  1.446
[08:41] <[TuxCM]> csv-parser          3.385 -  3.566
[08:41] <[TuxCM]> csv-ip5xs-20        4.967 -  5.018
[08:41] <[TuxCM]> test                6.532 -  6.557
[08:41] <[TuxCM]> test-t-20 --race    6.604 -  7.051
[08:41] <[TuxCM]> test-t-20          19.811 - 20.299
[08:41] *** [TuxCM] left
[08:56] *** frost joined
[09:04] *** frost left
[09:05] <Geth> ¦ rakudo: 2ad2a94a46 | (Elizabeth Mattijsen)++ | 4 files
[09:05] <Geth> ¦ rakudo: Introduce X::File::NotFound and use it
[09:05] <Geth> ¦ rakudo: 
[09:05] <Geth> ¦ rakudo: - reduce the amount of CPU used to signal failure to load
[09:05] <Geth> ¦ rakudo: - removes the recently introduced .not-found(-list) methods
[09:05] <Geth> ¦ rakudo: 
[09:05] <Geth> ¦ rakudo: ugexe++ nine++ for input
[09:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2ad2a94a46
[09:26] *** frost joined
[09:29] <Geth> ¦ rakudo: 504b1512ac | (Elizabeth Mattijsen)++ | 4 files
[09:29] <Geth> ¦ rakudo: s/X::File::NotFound/X::NotFoundInRepository
[09:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/504b1512ac
[09:34] *** dogbert17 left
[10:01] *** dogbert17 joined
[10:33] <lizmat> m: sub a(Int :@a) { dd @a }; a
[10:33] <camelia> rakudo-moar 530e17848: OUTPUT: «Array[Mu].new()␤»
[10:33] <lizmat> that feels like a bug to me
[10:34] <lizmat> expected the array to be Array[Int]
[10:34] <lizmat> m: sub a(Int :%a) { dd %a }; a
[10:34] <camelia> rakudo-moar 530e17848: OUTPUT: «(my Int %)␤»
[10:34] <lizmat> seems to work ok with hashes
[10:36] <lizmat> m: sub a(Int :@a) { dd @a }; a (1,2,3)
[10:36] <camelia> rakudo-moar 530e17848: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[10:36] <lizmat> m: sub a(Int :@a) { dd @a }; a a => (1,2,3)
[10:36] <camelia> rakudo-moar 530e17848: OUTPUT: «Type check failed in binding to parameter '@a'; expected Positional[Int] but got List ((1, 2, 3))␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[10:36] <lizmat> so it does know about it somehow>?
[10:37] <lizmat> bisectable6: sub a(Int :@a) { dd @a }; a
[10:37] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight
[10:37] <bisectable6> lizmat, Output on all releases: https://gist.github.com/ae97f5421fb39ac27ea6bee22014a192
[10:37] <bisectable6> lizmat, More than 4 changes to bisect, please try a narrower range like old=2021.12 new=HEAD
[10:38] <lizmat> bisectable6: old=2020.06 new=2020.07 sub a(Int :@a) { dd @a }; a
[10:38] <bisectable6> lizmat, Bisecting by output (old=2020.06 new=2020.07) because on both starting points the exit code is 0
[10:39] <bisectable6> lizmat, bisect log: https://gist.github.com/ee07f2752b3537796ba9c23ad7cc2ab1
[10:39] <bisectable6> lizmat, (2020-07-09) https://github.com/rakudo/rakudo/commit/90f86d4c9154898f5e081fa944f222d7784c6a17
[10:44] <CIAvash> ok. another question, `pos` is avaialable in JSON error output(for some error messages), but all `column` fields are `null`, why is that? column is also not reported in text error messages
[10:46] <lizmat> CIAvash which JSON module are you referring to ?
[10:54] <Geth> ¦ rakudo: dcb0ac0998 | (Elizabeth Mattijsen)++ | src/core.c/Array/Typed.pm6
[10:54] <Geth> ¦ rakudo: Fix typed named argument arrays not reporting type correctly
[10:54] <Geth> ¦ rakudo: 
[10:54] <Geth> ¦ rakudo: This refines 90f86d4c9154898f5e081fa944f222d7784c6a17 in that it
[10:54] <Geth> ¦ rakudo: will first try the original code path, and if that fails does the
[10:54] <Geth> ¦ rakudo: code path from that commit to fix #3784
[10:54] <Geth> ¦ rakudo: 
[10:54] <Geth> ¦ rakudo: This fixes the output of "sub a(Int :@a) { dd @a }; a" from
[10:54] <Geth> ¦ rakudo:     Array[Mu].new()
[10:54] <Geth> ¦ rakudo: to
[10:54] <Geth> ¦ rakudo:     Array[Int].new()
[10:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dcb0ac0998
[10:55] *** linkable6 left
[10:55] <CIAvash> sorry, I meant JSON output of rakudo errors, output of `RAKU_EXCEPTIONS_HANDLER=JSON raku -c`
[10:56] *** linkable6 joined
[10:57] <lizmat> ah, ok, so that'd be the internal one
[10:57] <lizmat> CIAvash: I guess an issue is in order then :-)
[10:58] <lizmat> m: sub a(Int @a is copy) { dd @a }; a Array[Int].new: 1,2,3
[10:58] <camelia> rakudo-moar 530e17848: OUTPUT: «[1, 2, 3]␤»
[10:58] <lizmat> looks like "is copy" loses typing
[10:59] <lizmat> bisectable6:  sub a(Int @a is copy) { dd @a }; a Array[Int].new: 1,2,3
[10:59] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight
[10:59] <bisectable6> lizmat, Output on all releases: https://gist.github.com/3a8a483f8c977fe8fd62ad48a42e5a0e
[10:59] <bisectable6> lizmat, bisect log: https://gist.github.com/66accc32da775f04446eb5891f110565
[10:59] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/e62eff790d569ed0bd4796f86b25dd4f
[11:00] <lizmat> ok, looks like an issue like forever
[11:18] <lizmat> https://github.com/rakudo/rakudo/issues/4882
[11:38] *** Xliff joined
[11:40] *** frost left
[11:44] *** dogbert17 left
[12:07] *** reportable6 left
[12:07] *** reportable6 joined
[12:08] <Geth> ¦ rakudo/lizmat-binder-elsifs: 77ef4fac75 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp
[12:08] <Geth> ¦ rakudo/lizmat-binder-elsifs: Turn some else/if sequences into elsifs in binder
[12:08] <Geth> ¦ rakudo/lizmat-binder-elsifs: 
[12:08] <Geth> ¦ rakudo/lizmat-binder-elsifs: Probably not very important, but since the binder is pretty hot code
[12:08] <Geth> ¦ rakudo/lizmat-binder-elsifs: I thought it might be worthwhile.
[12:08] <Geth> ¦ rakudo/lizmat-binder-elsifs: review: https://github.com/rakudo/rakudo/commit/77ef4fac75
[12:09] <Geth> ¦ rakudo: lizmat++ created pull request #4883: Turn some else/if sequences into elsifs in binder
[12:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4883
[12:12] *** dogbert17 joined
[12:21] *** [Coke]_ is now known as [Coke]
[12:34] <Geth> ¦ rakudo/lizmat-attribute-binder: bfc052afbb | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp
[12:34] <Geth> ¦ rakudo/lizmat-attribute-binder: Micro optimize "self" lookup for attribute binding
[12:34] <Geth> ¦ rakudo/lizmat-attribute-binder: 
[12:34] <Geth> ¦ rakudo/lizmat-attribute-binder: Assuming in most cases, the search is successful, it makes more sense
[12:34] <Geth> ¦ rakudo/lizmat-attribute-binder: to just do the nqp::atkey and if that fails, then do the error handling.
[12:34] <Geth> ¦ rakudo/lizmat-attribute-binder: Instead of first looking up whether it exists at all, and then do another
[12:34] <Geth> ¦ rakudo/lizmat-attribute-binder: lookup if the first check is successful.
[12:34] <Geth> ¦ rakudo/lizmat-attribute-binder: review: https://github.com/rakudo/rakudo/commit/bfc052afbb
[12:35] <Geth> ¦ rakudo/lizmat-attribute-binder: review: https://github.com/rakudo/rakudo/commit/bfc052afbb
[12:35] <Geth> ¦ rakudo: lizmat++ created pull request #4884: Micro optimize "self" lookup for attribute binding
[12:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4884
[13:55] <[Coke]> https://github.com/Raku/doc/issues/1246 - http://164.90.207.89:10010/ has an updated version of the docs site. Any comments on it definitely appreciated (it's a dynamic site with updates to the UI, search, etc.). Please feel free to comment here or to me and I can summarize on the ticket, or add to the ticket directly (or the linked website repo)
[13:55] <[Coke]> Please go easy on the site since it's privately hosted (no automation, I mean)
[13:56] <[Coke]> er, don't *run* automated stuff against it, I mean.
[14:07] *** sena_kun left
[14:08] *** sena_kun joined
[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft
[15:15] <jdv> lizmat: did you noticed the blin stuff?  the bisects seem to hint at your stuff.
[15:16] <jdv> been a bit too busy lately.  will try to get the changelogs out by tomorrow some time.  probably do a blin run on wed or thurs.  maybe a release on friday:)
[15:22] <[Coke]> jdv: I uncommented a skipped test in nqp, so if you see a new failure in there, that might be the culprit
[15:24] <[Coke]> m: say "../\x[308]"
[15:24] <camelia> rakudo-moar 530e17848: OUTPUT: «../̈␤»
[15:28] <[Coke]> why is https://github.com/raku-community-modules/IO-Path-ChildSecure using nqp:: opcodes?
[15:29] <[Coke]> there should definitely be a comment explaining that in the lib, and we shouldn't be encouraging it outside of core, IMO
[15:30] <[Coke]> should probably also remove MONKEY-GUTS and use nqp only.
[15:31] <nine> I don't see a reason why that code would need nqp. I guess it's really just a modified copy of code from the setting
[15:32] <japhb> nine: Might be the other way around -- IIRC IO-Path-ChildSecure was published before improved code went into the setting.
[15:52] <Geth> ¦ IO-Path-ChildSecure: coke++ created pull request #4: respect OS directory separator for combiner test
[15:52] <Geth> ¦ IO-Path-ChildSecure: review: https://github.com/raku-community-modules/IO-Path-ChildSecure/pull/4
[15:53] <[Coke]> added https://github.com/raku-community-modules/IO-Path-ChildSecure/issues/5
[17:03] *** sena_kun left
[17:04] *** sena_kun joined
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:40] *** [Coke] left
[18:44] *** [Coke] joined
[20:28] *** sena_kun left
[20:29] *** sena_kun joined
[21:42] *** evalable6 left
[21:42] *** linkable6 left
[21:43] *** linkable6 joined
[21:43] *** evalable6 joined
[22:28] *** londoed joined
[23:47] <Geth> ¦ roast: vrurg++ created pull request #804: Add tests for `will complain`
[23:47] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/804
[23:57] *** Xliff left
