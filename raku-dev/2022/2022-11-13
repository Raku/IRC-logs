[00:06] *** reportable6 left
[00:09] *** reportable6 joined
[01:09] *** linkable6 left
[01:09] *** evalable6 left
[01:09] *** linkable6 joined
[01:11] *** evalable6 joined
[03:29] *** MasterDuke joined
[03:45] *** Kaipei joined
[04:33] *** Xliff joined
[04:34] <Xliff> Has anyone considered the possibility of building an in-memory cashe for ..precomp blobs?

[04:49] *** codesections left
[04:57] *** frost joined
[05:44] *** jdv left
[06:04] *** frost left
[06:05] *** frost joined
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:30] *** Xliff left
[08:09] *** frost left
[08:13] <lizmat> I thought "use" would actually mmap precomps?   probably should ask on #moarvm

[09:24] <nine> What would be the benefit of such a cache? We load (mmap) each precomp file once at most.

[09:41] <[Tux]> Friday:

[09:41] <[Tux]> Rakudo v2022.07-87-gbc3b58241 (v6.d) on MoarVM 2022.07-20-g757524899

[09:41] <[Tux]> csv-test-xs-20      0.408 -  0.428

[09:41] <[Tux]> csv-ip5xs           0.758 -  0.768

[09:41] <[Tux]> test-t --race       0.782 -  0.840

[09:41] <[Tux]> test-t              1.351 -  1.355

[09:41] <[Tux]> csv-parser          3.377 -  3.835

[09:41] <[Tux]> csv-ip5xs-20        4.826 -  4.904

[09:41] <[Tux]> test                6.065 -  6.076

[09:41] <[Tux]> test-t-20 --race    6.601 -  7.147

[09:42] <[Tux]> test-t-20          20.001 - 20.354

[09:47] *** Kaipei left
[09:50] *** sena_kun joined
[09:51] <[Tux]> Rakudo v2022.07-90-g5e1f092f5 (v6.d) on MoarVM 2022.07-20-g757524899

[09:51] <[Tux]> csv-test-xs-20      0.421 -  0.429

[09:51] <[Tux]> csv-ip5xs           0.764 -  0.812

[09:51] <[Tux]> test-t --race       0.837 -  0.876

[09:51] <[Tux]> test-t              1.428 -  1.472

[09:51] <[Tux]> csv-parser          3.345 -  3.486

[09:51] <[Tux]> csv-ip5xs-20        5.011 -  5.066

[09:51] <[Tux]> test                6.554 -  6.667

[09:51] <[Tux]> test-t-20 --race    6.351 -  7.501

[09:51] <[Tux]> test-t-20          19.989 - 20.294

[10:16] *** frost joined
[10:25] <lizmat> [Tux]: fwiw, I cannot reproduce that performance regression since Friday

[10:53] *** Kaipei joined
[12:06] *** reportable6 left
[12:09] *** reportable6 joined
[12:29] *** frost left
[12:58] *** frost joined
[13:23] *** frost left
[13:31] *** sena_kun left
[13:33] *** sena_kun joined
[13:43] *** sena_kun left
[13:45] *** sena_kun joined
[14:09] *** frost joined
[17:04] *** Xliff joined
[17:08] <Xliff> P6-GLib suite timing statistics for Raku 2022.07.90.g.5.e.1.f.092.f.5

[17:08] <Xliff> Total number of projects: 33 (502148 loc)

[17:08] <Xliff> Total non-parallel compile times: 8672.000 (262.788 avg)

[17:08] <Xliff> Total parallel compile times: 1307.643 (39.626 avg) 6.632x speedup

[17:20] <Xliff> nine: I was thinking the cache would be persistent across executions of raku.

[17:20] <Xliff> So mmap once, keep for as long as the daemon stays resident

[17:21] <Xliff> However, now that I think about it, that might require a non-insignificant, and non-significant amount of change to moarvm.

[17:22] <Xliff> Is it possible to check how long it takes to load a set of precomp files from disk, and then the times it takes to mmap them?

[17:22] <Xliff> Should be several orders of magnitude. Multiply that by hours of raku use.

[17:22] <Xliff> The time saved should be significant.

[17:23] * Xliff &

[17:23] *** Xliff left
[17:26] *** Kaipei left
[17:26] <nine> Such a cache already exists. It's called "your operating system's page cache"

[17:28] *** Kaipei joined
[18:06] *** reportable6 left
[18:06] *** reportable6 joined
[19:42] <Geth> ¦ rakudo/rakuast: 88d3702379 | (Stefan Seifert)++ | src/Raku/ast/name.rakumod

[19:42] <Geth> ¦ rakudo/rakuast: RakuAST: support GLOBAL::{} lookups

[19:42] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/88d3702379

[19:42] <Geth> ¦ rakudo/rakuast: 06b7d398b0 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[19:42] <Geth> ¦ rakudo/rakuast: RakuAST: fix lookup of GLOBAL when using the new frontend

[19:42] <Geth> ¦ rakudo/rakuast: 

[19:42] <Geth> ¦ rakudo/rakuast: Need to bind the GLOBAL hll sym at the start of compilation as that's

[19:42] <Geth> ¦ rakudo/rakuast: what GLOBAL is looked up from.

[19:42] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/06b7d398b0

[20:21] *** nebuchadnezzar joined
[20:48] <Geth> ¦ problem-solving: rba assigned to lizmat Issue Wanted: new raku infrastructure jack-of-all-trades https://github.com/Raku/problem-solving/issues/352

[20:48] <Geth> ¦ problem-solving: rba assigned to codesections Issue Wanted: new raku infrastructure jack-of-all-trades https://github.com/Raku/problem-solving/issues/352

[21:00] <Geth> ¦ problem-solving: coke assigned to codesections Issue artistic license not a default on github https://github.com/Raku/problem-solving/issues/353

[21:16] *** epony left
[21:56] *** sena_kun left
[22:03] *** MasterDuke left
[22:04] *** epony joined
[23:37] *** linkable6 left
[23:37] *** linkable6 joined
[23:49] *** Kaipei left
[23:50] *** linkable6 left
[23:51] *** linkable6 joined
[23:56] *** linkable6 left
[23:57] *** linkable6 joined
