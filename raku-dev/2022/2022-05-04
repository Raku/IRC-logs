[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[01:09] *** greppable6 left
[01:09] *** shareable6 left
[01:09] *** coverable6 left
[01:09] *** evalable6 left
[01:09] *** linkable6 left
[01:09] *** tellable6 left
[01:09] *** committable6 left
[01:09] *** notable6 left
[01:09] *** unicodable6 left
[01:09] *** bloatable6 left
[01:09] *** releasable6 left
[01:09] *** sourceable6 left
[01:09] *** bisectable6 left
[01:09] *** quotable6 left
[01:09] *** benchable6 left
[01:09] *** nativecallable6 left
[01:09] *** statisfiable6 left
[01:09] *** reportable6 left
[01:09] *** releasable6 joined
[01:09] *** greppable6 joined
[01:09] *** sourceable6 joined
[01:10] *** coverable6 joined
[01:10] *** evalable6 joined
[01:10] *** unicodable6 joined
[01:10] *** quotable6 joined
[01:10] *** reportable6 joined
[01:10] *** statisfiable6 joined
[01:11] *** notable6 joined
[01:11] *** bloatable6 joined
[01:11] *** committable6 joined
[01:11] *** benchable6 joined
[01:11] *** nativecallable6 joined
[01:11] *** bisectable6 joined
[01:11] *** tellable6 joined
[01:12] *** linkable6 joined
[01:12] *** shareable6 joined
[02:40] <vrurg> .tell nine I have located the problem and it is about serialization, after all. nqp::atomicbindattr breaks it. I have updated https://github.com/rakudo/rakudo/pull/4917, so you could check out Stash.merge-symbols method if you wish.

[02:40] <tellable6> vrurg, I'll pass your message to nine

[03:18] *** evalable6 left
[03:18] *** linkable6 left
[03:18] *** tellable6 left
[03:18] *** tellable6 joined
[03:18] *** linkable6 joined
[03:18] *** evalable6 joined
[04:21] *** reportable6 left
[04:21] *** notable6 left
[04:21] *** greppable6 left
[04:21] *** quotable6 left
[04:21] *** coverable6 left
[04:21] *** sourceable6 left
[04:21] *** bloatable6 left
[04:21] *** linkable6 left
[04:21] *** committable6 left
[04:21] *** benchable6 left
[04:21] *** statisfiable6 left
[04:21] *** bisectable6 left
[04:21] *** evalable6 left
[04:21] *** tellable6 left
[04:21] *** releasable6 left
[04:21] *** unicodable6 left
[04:21] *** shareable6 left
[04:21] *** nativecallable6 left
[04:21] *** quotable6 joined
[04:21] *** bloatable6 joined
[04:21] *** evalable6 joined
[04:21] *** statisfiable6 joined
[04:22] *** reportable6 joined
[04:22] *** shareable6 joined
[04:22] *** tellable6 joined
[04:22] *** unicodable6 joined
[04:22] *** nativecallable6 joined
[04:22] *** notable6 joined
[04:22] *** sourceable6 joined
[04:23] *** linkable6 joined
[04:23] *** benchable6 joined
[04:23] *** committable6 joined
[04:23] *** releasable6 joined
[04:23] *** bisectable6 joined
[04:24] *** coverable6 joined
[04:24] *** greppable6 joined
[05:24] *** greppable6 left
[05:24] *** linkable6 left
[05:24] *** nativecallable6 left
[05:24] *** releasable6 left
[05:24] *** coverable6 left
[05:24] *** statisfiable6 left
[05:24] *** evalable6 left
[05:24] *** notable6 left
[05:24] *** bisectable6 left
[05:24] *** tellable6 left
[05:24] *** bloatable6 left
[05:24] *** committable6 left
[05:24] *** quotable6 left
[05:24] *** unicodable6 left
[05:24] *** benchable6 left
[05:24] *** sourceable6 left
[05:24] *** reportable6 left
[05:24] *** shareable6 left
[05:24] *** greppable6 joined
[05:24] *** sourceable6 joined
[05:24] *** statisfiable6 joined
[05:24] *** notable6 joined
[05:24] *** unicodable6 joined
[05:25] *** nativecallable6 joined
[05:25] *** bloatable6 joined
[05:25] *** coverable6 joined
[05:25] *** shareable6 joined
[05:25] *** evalable6 joined
[05:26] *** committable6 joined
[05:26] *** bisectable6 joined
[05:26] *** reportable6 joined
[05:27] *** linkable6 joined
[05:27] *** benchable6 joined
[05:27] *** releasable6 joined
[05:27] *** quotable6 joined
[05:27] *** tellable6 joined
[05:38] *** Xliff left
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[07:14] *** CIAvash left
[07:14] *** AlexDaniel left
[07:14] *** crystalfrost[m] left
[07:18] *** AlexDaniel joined
[07:28] *** CIAvash joined
[07:28] *** crystalfrost[m] joined
[07:43] <lizmat> Files=1353, Tests=117195, 293 wallclock secs (36.06 usr 10.16 sys + 4075.68 cusr 342.00 csys = 4463.90 CPU)

[09:41] *** sena_kun left
[09:42] *** sena_kun joined
[09:49] *** frost joined
[09:58] <lizmat> hmmm... this is getting...  weird

[09:58] <lizmat> this morning https://github.com/rakudo/rakudo/pull/4919 wouldn't compile for me

[09:58] <lizmat> "New type Block for List is not a mixin type"

[09:59] <lizmat> the fix to get it to compile again?  add an empty line somewhere in src/core.c/io_operators

[10:16] <Geth> ¦ rakudo/lizmat-simplify-stdhandle-setup: 5d2ace5a17 | (Elizabeth Mattijsen)++ | src/core.c/io_operators.pm6

[10:16] <Geth> ¦ rakudo/lizmat-simplify-stdhandle-setup: Lose unnnecessary IO::ArgFiles stub

[10:16] <Geth> ¦ rakudo/lizmat-simplify-stdhandle-setup: review: https://github.com/rakudo/rakudo/commit/5d2ace5a17

[10:38] *** Altai-man joined
[10:48] <gfldex> I just had a marketing idea: Raku doesn't reinvent the wheel. We just take all the wheel of other languages, so that your program can't possibly fall over. Like this: https://upload.wikimedia.org/wikipedia/commons/9/99/Postal_Museum_%28London%29_Pentacycle.jpg

[10:50] <lizmat> hmmm... not sure that's sending the right message  :-)

[10:51] <gfldex> I couldn't fine a more modern picture yet, but will keep looking.

[10:51] <gfldex> I do believe it's a nice gag to start a talk or lecture.

[12:03] <nine> vrurg: can you please test this patch? https://gist.github.com/niner/f1f523c4b146e29323d68cbe067c4496

[12:03] <tellable6> hey nine, you have a message: https://gist.github.com/3857bad75524f92132691e63174a58f7

[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:57] *** Xliff joined
[13:16] <gfldex> Joking aside, with slangs our goals align with the Rights-To-Repair-movement. So a capable Rakoon could achieve something like this: https://img.izismile.com/img/img12/20190516/640/this_suv_has_too_many_wheels_640_06.jpg

[13:19] <vrurg> nine: gives a weird error. Left a comment on the gist.

[13:20] <vrurg> Ah, ok, you forgot a block.

[13:22] *** carlmasak joined
[13:28] <vrurg> nine: make test, make spectest are now good with nqp::atomicbindattr in merge-symbols. Thanks!

[13:32] *** timo left
[13:34] <Voldenet> "right to repair" aligns with anything that's open source though

[13:34] *** timo joined
[13:35] <Voldenet> maybe not anything because of patent trolls, but you get the idea

[14:13] *** frost left
[15:03] *** carlmasak left
[17:16] *** Altai-man left
[18:04] <vrurg> nine: with the patch my test script is passing more than 3600 times in a row without a failure. Never seen that many repetitions before!

[18:06] *** reportable6 left
[18:07] *** reportable6 joined
[19:09] <nine> vrurg: wooohoo Ö=

[19:09] <nine> :)

[19:11] * vrurg is now waiting for NQP bump.

[19:12] <vrurg> BTW, stopped at 4460 repetitions. It rather means that require and stash in general are now thread safe in at least the tested scenario.

[19:18] <vrurg> nine: it looks like casattr_o would need the same patch too.

[19:19] <nine> Probably other ops as well. I didn't do a comprehensive check. Just wanted to test this idea first

[19:27] <lizmat> vrurg: please continue your work on CURFS: will rework my branch on top of your work

[19:28] <lizmat> well, actually not a branch yet, just some code in git stash  :-)

[19:28] <vrurg> lizmat: I'm basically done. For the moment just wanna check out some details, but otherwise I don't see any more races in it.

[19:29] <lizmat> cool!

[19:34] <vrurg> The one thing which worries me at the moment is: could it be that $spec in method need and $file.Str in method load would be the same?

[19:38] <lizmat> and still intended to be different ?

[19:40] <lizmat> I guess that could be fixed by adding using the WHICH of the CompUnit::DependencySpecification ?

[19:41] <lizmat> s/adding//

[19:42] <vrurg> No, to be the same. The point is that `need` currently installs a Promise when there is a concurrent request for the same spec. If it can be the same then load must also install/respect Promises.

[19:57] *** sena_kun left
[19:59] *** sena_kun joined
[20:03] <Geth> ¦ rakudo/lizmat-simplify-stdhandle-setup: 219bbea6b7 | (Elizabeth Mattijsen)++ | src/core.c/io_operators.pm6

[20:03] <Geth> ¦ rakudo/lizmat-simplify-stdhandle-setup: Hopefully fix the weird segfault on the JVM

[20:03] <Geth> ¦ rakudo/lizmat-simplify-stdhandle-setup: review: https://github.com/rakudo/rakudo/commit/219bbea6b7

[20:18] <lizmat> vrurg : I guess  :-)

[20:19] <vrurg> lizmat: "Guess it can", or "guess it can't"? :)

[20:32] <japhb> m: enum It < can't can >; dd my \Guess = can|can't;

[20:32] <camelia> rakudo-moar 530e17848: OUTPUT: «any(It::can, It::can't)␤»

[20:33] <japhb> That's interesting.  I wasn't expecting dd to not show the name of a sigilless

[20:44] <vrurg> japhb: they're actually symbols.

[20:45] <japhb> Interesting.  I guess I never looked behind the curtain on that one.

[20:45] <japhb> Does snap into the mental model better though.

[20:46] <vrurg> Think of it as a key in symbol table which is bound directly to the value. No container mediator which can tell you its name.

[20:46] <vrurg> So, basically, dd gets the plain junction.

[20:50] <japhb> Yeah, makes sense to me.

[20:56] *** kaiepi joined
[21:07] *** kaiepi is now known as Kaiepi

[21:40] *** hankache joined
[21:58] <lizmat> vrurg: it can

[22:11] <vrurg> lizmat: ok, thanks.

[22:11] *** hankache left
[23:11] *** Altai-man joined
[23:14] *** sena_kun left
[23:19] *** sena_kun joined
[23:21] *** Altai-man left
[23:37] *** Kaiepi left
