[00:06] *** reportable6 left
[00:30] <leont> ugexe: If you're happy I'm merging and releasing it

[00:35] <ugexe> it works for me, but did you notice the CI failures?

[00:35] <ugexe> Coercion IO(Str) is insufficiently type-like to qualify a variable

[00:35] <ugexe> at /test/lib/TAP.pm (TAP):814

[00:40] <ugexe> i hadnt test the latest commit

[00:53] <leont> I need to build a new CI setup, this travis based one uses a two years old raku

[00:55] <ugexe> ah. its tests pass locally for me

[01:07] <Geth> ¦ tap-harness6: fb2bf01788 | (Leon Timmermans)++ | 2 files

[01:07] <Geth> ¦ tap-harness6: Make t/source-file.t cwd-independent

[01:07] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/commit/fb2bf01788

[01:07] <Geth> ¦ tap-harness6: c1c3c40155 | (Leon Timmermans)++ | lib/TAP.pm

[01:07] <Geth> ¦ tap-harness6: Add cwd attribute to TAP::Harness

[01:07] <Geth> ¦ tap-harness6: 

[01:07] <Geth> ¦ tap-harness6: This will run the tests in the right working directory without affecting the main program's working directory.

[01:07] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/commit/c1c3c40155

[01:30] *** SmokeMachine_ joined
[01:30] *** samcv_ joined
[01:39] *** SmokeMachine left
[01:39] *** SmokeMachine_ is now known as SmokeMachine

[01:39] *** samcv left
[01:39] *** timo left
[01:47] *** timo joined
[02:08] *** reportable6 joined
[02:40] *** frost joined
[02:46] *** kjp left
[02:58] <Geth> ¦ tap-harness6: Leont self-assigned Need to update README.md https://github.com/Raku/tap-harness6/issues/50

[03:00] <releasable6> Next release in ≈6 days and ≈15 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:09] *** kjp joined
[03:12] *** Kaipi left
[03:12] *** Merfont joined
[03:16] *** Merfont left
[03:16] *** Merfont joined
[04:37] *** reportable6 left
[04:37] *** nativecallable6 left
[04:37] *** greppable6 left
[04:37] *** linkable6 left
[04:37] *** shareable6 left
[04:37] *** bisectable6 left
[04:37] *** quotable6 left
[04:37] *** committable6 left
[04:37] *** coverable6 left
[04:37] *** releasable6 left
[04:37] *** statisfiable6 left
[04:37] *** bloatable6 left
[04:37] *** tellable6 left
[04:37] *** squashable6 left
[04:37] *** unicodable6 left
[04:37] *** evalable6 left
[04:37] *** benchable6 left
[04:37] *** notable6 left
[04:37] *** sourceable6 left
[04:37] *** bloatable6 joined
[04:38] *** nativecallable6 joined
[04:38] *** sourceable6 joined
[04:38] *** shareable6 joined
[04:38] *** coverable6 joined
[04:39] *** statisfiable6 joined
[04:39] *** linkable6 joined
[04:39] *** unicodable6 joined
[04:39] *** bisectable6 joined
[04:40] *** evalable6 joined
[04:40] *** committable6 joined
[04:40] *** greppable6 joined
[04:40] *** reportable6 joined
[05:38] *** releasable6 joined
[05:39] *** notable6 joined
[06:08] *** reportable6 left
[06:09] *** reportable6 joined
[06:37] *** benchable6 joined
[07:39] *** tellable6 joined
[08:11] *** discord-raku-bot left
[08:12] *** discord-raku-bot joined
[08:38] *** squashable6 joined
[09:38] *** quotable6 joined
[10:06] <lizmat> Files=1351, Tests=117094, 325 wallclock secs (35.37 usr  9.29 sys + 4484.41 cusr 358.54 csys = 4887.61 CPU)

[10:51] *** frost left
[11:35] <Geth> ¦ rakudo: 11c8f82a04 | (Elizabeth Mattijsen)++ | src/core.c/Capture.pm6

[11:35] <Geth> ¦ rakudo: Make Capture[n] (and thus $0, $1, ...) about 5x as fast

[11:35] <Geth> ¦ rakudo: 

[11:35] <Geth> ¦ rakudo: By making the AT-POS candidates better inlineable by moving the

[11:35] <Geth> ¦ rakudo: Failure creating code to a separate subroutine, thus allowing the

[11:35] <Geth> ¦ rakudo: hotpath to be inlined.

[11:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/11c8f82a04

[12:07] *** reportable6 left
[12:12] <MasterDuke> lizmat: have you noticed any difference in timings now that mimalloc is the default?

[12:12] <lizmat> eh...  that didn't make it to rakudo master yet, did it ?

[12:13] <lizmat> maybe I should do a bump ?

[12:17] <MasterDuke> +1 from me

[12:17] <lizmat> ok, will dop

[12:17] <lizmat> *do

[12:21] <lizmat> MasterDuke: building NQP fails for me:

[12:21] <lizmat> In file included from src/vm/moar/runner/main.c:5:

[12:21] <lizmat> #include <mimalloc.h>

[12:22] <nine> Did you run Configure.pl again?

[12:23] <lizmat> MasterDuke: full gist

[12:23] <lizmat> https://gist.github.com/lizmat/68d545bdaf75fc407c2b653110324010

[12:23] <lizmat> nine ^^   yes

[12:24] <nine> I don't see output by NQP's Configure.pl. But that may be hidden by the build process

[12:27] <Geth> ¦ nqp/fix_unsigned_for_merge: d5e0639f97 | (Stefan Seifert)++ | 12 files

[12:27] <Geth> ¦ nqp/fix_unsigned_for_merge: Add atpos_u and bindpos_u ops on JVM

[12:27] <Geth> ¦ nqp/fix_unsigned_for_merge: review: https://github.com/Raku/nqp/commit/d5e0639f97

[12:27] <Geth> ¦ nqp/fix_unsigned_for_merge: 42adc9185c | (Stefan Seifert)++ | 5 files

[12:27] <Geth> ¦ nqp/fix_unsigned_for_merge: assign_u, atposref_u, captureposarg_u and iscont_u on JVM

[12:27] <Geth> ¦ nqp/fix_unsigned_for_merge: review: https://github.com/Raku/nqp/commit/42adc9185c

[12:31] <nine> If only the JVM backend was a little faster. The code is so nice to work with

[12:32] <MasterDuke> ah, you beat me to it (i thought about implementing those *_u ops for the jvm but obviously didn't get around to it)

[12:33] <MasterDuke> have you experimented with the truffle branch at all? compilation isn't any faster, but some long running code can beat moarvm even now

[12:33] <nine> Well I do want to get on with the unsigned fixes so I can do something else at some point. As JVM kinda blocked that, it was kinda natural to take a look at it

[12:33] <nine> No, I haven't

[12:34] <lizmat> so no bump I guess, right ?

[12:36] <MasterDuke> i'm not sure why it didn't find the .h. maybe a `make clean` first?

[12:37] * lizmat tries with a fresh clone

[12:41] <lizmat> a fresh clone works

[12:41] <lizmat> argh

[12:42] * lizmat tries with the actual bump

[12:43] <MasterDuke> CI was fine, so probably was some stale config

[12:44] <lizmat> ok, after building with a fresh clone, and *then* a change in MOAR_REVISION, it fails again

[12:45] <lizmat> trying with a fresh clone *and* a MOAR_REVISION change before building

[12:46] <nine> lizmat: is that still with--gen-moar?

[12:48] <lizmat> yes

[12:49] <lizmat> ok, good news: with a fresh checkout, bump applied without building before, it builds and tests ok

[12:50] <Geth> ¦ nqp: 5e5502ecb1 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[12:50] <Geth> ¦ nqp: Bump MoarVM to get the latest goodies

[12:50] <Geth> ¦ nqp: 

[12:50] <Geth> ¦ nqp: - mimallic support: MasterDuke++

[12:50] <Geth> ¦ nqp: - various other tweaks and fixes by nine++ and nwc10++

[12:50] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/5e5502ecb1

[12:50] <nine> Would probably work as well the other way round if you manually ran NQP's Configure.pl (most conveniently via config.status0

[12:50] <nine> s/config.status0/config.status)/

[12:51] <lizmat> my primary interest is: does it work after a fresh checkout with the bump applied

[12:52] <lizmat> because that's what people generally do (unless they're a core dev)

[12:54] <lizmat> Rakudo builds ok, now spectesting

[13:00] *** kjp left
[13:03] <Geth> ¦ rakudo: fb909efcee | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[13:03] <Geth> ¦ rakudo: Bump NQP to get the latest MoarVM fixes

[13:03] <Geth> ¦ rakudo: 

[13:03] <Geth> ¦ rakudo: And also some prep work in NQP by nine++

[13:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fb909efcee

[13:04] <lizmat> nine++ MasterDuke++  ^^

[13:07] <Geth> ¦ nqp/master: 8 commits pushed by (Stefan Seifert)++, niner++

[13:07] <Geth> ¦ nqp/master: be3c0b1d9c | Support new objprimspec 10 for unsigned integers

[13:07] <Geth> ¦ nqp/master: ddc722064c | Use uint where appropriate in MAST code

[13:07] <Geth> ¦ nqp/master: dcdb7091c8 | Switch to new bindpos_u op where appropriate

[13:07] <Geth> ¦ nqp/master: 14e772c4ed | Switch to atpos_u where appropriate

[13:07] <Geth> ¦ nqp/master: 01ab05fa99 | Actually tell the VM that uint is unsigned

[13:07] <Geth> ¦ nqp/master: d5e0639f97 | Add atpos_u and bindpos_u ops on JVM

[13:07] <Geth> ¦ nqp/master: 42adc9185c | assign_u, atposref_u, captureposarg_u and iscont_u on JVM

[13:07] <Geth> ¦ nqp/master: 609d071659 | Merge pull request #756 from Raku/fix_unsigned_for_merge

[13:07] <Geth> ¦ nqp/master: review: https://github.com/Raku/nqp/compare/5e5502ecb106...609d071659a3

[13:08] *** reportable6 joined
[13:09] <lizmat> nine: I assume you will be taking care of bumping that, right ?

[13:10] <nine> yes

[13:10] * lizmat focuses on other stuff then

[13:12] *** kjp joined
[14:00] <cognominal> > 0+0i == 0

[14:00] <cognominal> True

[14:00] <cognominal> > 0+0i eq 0

[14:00] <cognominal> False

[14:00] <cognominal> > 

[14:00] <cognominal> Why > I would expect == things to be coerced into eq things

[14:01] <lizmat> perhaps an oversight    :-)

[14:02] <cognominal> I wanted to brag about imaginary support in raku and I am told that its  support is imaginary.

[14:03] <cognominal> Lizmat,  should I file a bug ?

[14:04] <lizmat> hehe.. we try very hard to be non-imaginary  :0)

[14:04] <lizmat> so yes please

[14:07] <nine> m: say 0i

[14:07] <camelia> rakudo-moar fb909efce: OUTPUT: «0+0i␤»

[14:07] <nine> m: say 0i.^name

[14:07] <camelia> rakudo-moar fb909efce: OUTPUT: «Complex␤»

[14:08] <nine> I don't see why this should be string equal to the Int 0?

[14:08] <cognominal> Not the same type indeed            

[14:08] <cognominal> thx

[14:13] <cognominal> I have no excuse. This is covered by the doc. https://docs.raku.org/routine/===,%20infix%20%E2%A9%B6

[15:13] *** evalable6 left
[15:13] *** linkable6 left
[15:55] <bartolin> nine++ for providing the *_u ops for the JVM backend, too

[16:15] *** evalable6 joined
[16:40] <nine> *sigh* as I feared, there are now merge conflicts in src/core.c/native_array.pm6

[16:54] <gfldex> I build from HEAD and the profiler shows really odd stuff.

[16:57] <MasterDuke> gfldex: huh, haven't noticed anything myself, but haven't taken a profile in a couple days. what are you seeing?

[17:06] <Geth> ¦ nqp/fix_unsigned: 8cb72029f9 | (Stefan Seifert)++ | 2 files

[17:06] <Geth> ¦ nqp/fix_unsigned: Use uint64 registers for unsigned arguments in dispatch

[17:06] <Geth> ¦ nqp/fix_unsigned: review: https://github.com/Raku/nqp/commit/8cb72029f9

[17:06] <Geth> ¦ nqp/fix_unsigned: 6f8488372c | (Stefan Seifert)++ | 11 files

[17:06] <Geth> ¦ nqp/fix_unsigned: Rebootstrap

[17:06] <Geth> ¦ nqp/fix_unsigned: review: https://github.com/Raku/nqp/commit/6f8488372c

[17:06] <Geth> ¦ nqp/fix_unsigned: 7ef612304e | (Stefan Seifert)++ | 2 files

[17:07] <Geth> ¦ nqp/fix_unsigned: is pure trait for methods

[17:07] <Geth> ¦ nqp/fix_unsigned: review: https://github.com/Raku/nqp/commit/7ef612304e

[17:11] <gfldex> es

[17:11] <gfldex> In total, NaN call frames were entered and exited by the profiled code. Inlining eliminated the need to create 

[17:11] <gfldex> 844784952697000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

[17:11] <gfldex> 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000282706100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

[17:11] <gfldex> 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 call frames (that's NaN%). Call Frames

[17:11] <gfldex> In total, NaN call frames were entered and exited by the profiled code. Inlining eliminated the need to create 

[17:12] <gfldex> 844784952697000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

[17:12] <gfldex> 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000282706100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

[17:12] <gfldex> 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 call frames (that's NaN%). 

[17:12] <nine> Inlining seems to be really effective in this case

[17:12] <MasterDuke> inline all the atoms in the universe!

[17:13] <nine> far, far more

[17:14] <gfldex> Exclusive Time 

[17:14] <MasterDuke> gfldex: is profiling your code that uses `start`?

[17:14] <gfldex> 0% 

[17:14] <gfldex> 0% (6.287731412877151e+169ms) 

[17:14] <gfldex> That was taken with the .hyper removed.

[17:14] <nine> There are only about 100000000000000000000000000000000000000000000000000000000000000000000000000000000 atoms in the observable universe

[17:15] <MasterDuke> then we'll inline the subatomic particles too, everybody's welcome

[17:15] <gfldex> That's no problem nine. Running the program takes longer then the universe will exist anyways.

[17:17] <MasterDuke> nine: btw, in case you missed it, i commented on https://github.com/Raku/nqp/commit/8cb72029f9

[17:19] <gfldex> I the profiler tested before a monthly release is made?

[17:19] * nine doesn't think so

[17:20] <nine> There are a few tests but I think they are rather basic

[17:20] <MasterDuke> it's tested that it runs and creates a file and that's about it

[18:08] *** reportable6 left
[18:10] *** Util_ left
[18:11] *** reportable6 joined
[18:12] <Geth> ¦ nqp: 4aaf06e204 | (Stéphane Payrard)++ | docs/ops.markdown

[18:12] <Geth> ¦ nqp: sethllconfig doc

[18:12] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/4aaf06e204

[18:13] <cognominal> GitHub.dev is cool. I hope I did not mess things up

[18:15] *** linkable6 joined
[18:25] <Geth> ¦ nqp: aeaab3153c | (Stéphane Payrard)++ | docs/ops.markdown

[18:25] <Geth> ¦ nqp: fix up link for hll MoarVM testfile

[18:25] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/aeaab3153c

[18:49] <cognominal> That sounds interesting. I suppose that would have avoided my misstep. I don't know anything about GitHub actions though

[18:49] <cognominal> https://github.com/marketplace/actions/my-markdown-link-checker

[19:58] *** Merfont left
[19:58] *** Kaiepi joined
[20:03] *** qorg11 left
[20:05] *** qorg11 joined
[20:22] *** Kaiepi left
[20:22] *** Kaiepi joined
[21:35] *** evalable6 left
[21:35] *** linkable6 left
[22:26] *** Kaiepi left
[22:26] *** Kaiepi joined
[23:00] <releasable6> Next release in ≈5 days and ≈19 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:36] *** evalable6 joined
