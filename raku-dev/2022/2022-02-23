[00:07] *** reportable6 left
[01:03] *** frost joined
[01:08] *** reportable6 joined
[02:08] *** linkable6 left
[02:08] *** shareable6 left
[02:08] *** releasable6 left
[02:08] *** evalable6 left
[02:08] *** greppable6 left
[02:08] *** statisfiable6 left
[02:08] *** committable6 left
[02:08] *** nativecallable6 left
[02:08] *** benchable6 left
[02:08] *** coverable6 left
[02:08] *** unicodable6 left
[02:08] *** reportable6 left
[02:08] *** quotable6 left
[02:08] *** notable6 left
[02:08] *** squashable6 left
[02:08] *** bisectable6 left
[02:08] *** tellable6 left
[02:08] *** bloatable6 left
[02:08] *** sourceable6 left
[02:08] *** coverable6 joined
[02:08] *** evalable6 joined
[02:08] *** greppable6 joined
[02:08] *** bloatable6 joined
[02:09] *** tellable6 joined
[02:10] *** squashable6 joined
[03:05] *** frost left
[03:08] *** quotable6 joined
[03:08] *** releasable6 joined
[03:08] *** committable6 joined
[03:09] *** notable6 joined
[03:10] *** statisfiable6 joined
[03:10] *** nativecallable6 joined
[03:10] *** bisectable6 joined
[03:15] *** frost joined
[04:06] *** frost left
[04:09] *** linkable6 joined
[04:10] *** unicodable6 joined
[04:10] *** sourceable6 joined
[04:10] *** benchable6 joined
[04:10] *** reportable6 joined
[05:10] *** sourceable6 left
[05:10] *** unicodable6 left
[05:10] *** linkable6 left
[05:10] *** bloatable6 left
[05:10] *** benchable6 left
[05:10] *** reportable6 left
[05:10] *** bisectable6 left
[05:10] *** evalable6 left
[05:10] *** coverable6 left
[05:10] *** releasable6 left
[05:10] *** notable6 left
[05:10] *** squashable6 left
[05:10] *** quotable6 left
[05:10] *** greppable6 left
[05:10] *** statisfiable6 left
[05:10] *** tellable6 left
[05:10] *** committable6 left
[05:10] *** nativecallable6 left
[05:11] *** shareable6 joined
[05:11] *** sourceable6 joined
[05:11] *** bloatable6 joined
[05:11] *** nativecallable6 joined
[05:12] *** unicodable6 joined
[05:12] *** linkable6 joined
[05:12] *** tellable6 joined
[05:12] *** reportable6 joined
[05:13] *** coverable6 joined
[06:07] *** reportable6 left
[06:11] *** quotable6 joined
[06:11] *** bisectable6 joined
[06:12] *** releasable6 joined
[06:12] *** evalable6 joined
[06:12] *** benchable6 joined
[06:54] *** linkable6 left
[07:11] *** notable6 joined
[07:11] *** committable6 joined
[07:12] *** squashable6 joined
[07:12] *** greppable6 joined
[08:09] *** reportable6 joined
[08:20] *** frost joined
[08:57] *** linkable6 joined
[09:30] *** frost left
[10:05] <lizmat> Files=1351, Tests=117115, 288 wallclock secs (34.72 usr  9.69 sys + 4022.00 cusr 323.90 csys = 4390.31 CPU)

[10:11] *** statisfiable6 joined
[10:44] <Geth> ¦ JSON-JWT/main: 3a43f2abe8 | (Elizabeth Mattijsen)++ | 11 files

[10:44] <Geth> ¦ JSON-JWT/main: First commit in zef ecosystem

[10:44] <Geth> ¦ JSON-JWT/main: review: https://github.com/raku-community-modules/JSON-JWT/commit/3a43f2abe8

[10:48] <Geth> ¦ JSON-JWT/main: 37fdc96db1 | (Elizabeth Mattijsen)++ | Changes

[10:48] <Geth> ¦ JSON-JWT/main: 1.1

[10:48] <Geth> ¦ JSON-JWT/main: review: https://github.com/raku-community-modules/JSON-JWT/commit/37fdc96db1

[10:53] <Geth> ¦ JSON-JWT/main: 76423da9c7 | (Elizabeth Mattijsen)++ | 2 files

[10:53] <Geth> ¦ JSON-JWT/main: Fix typo in pod

[10:53] <Geth> ¦ JSON-JWT/main: review: https://github.com/raku-community-modules/JSON-JWT/commit/76423da9c7

[11:06] *** frost joined
[11:52] <Geth> ¦ JSON-JWT/main: 052510a472 | (Elizabeth Mattijsen)++ | 4 files

[11:52] <Geth> ¦ JSON-JWT/main: 1.1.1

[11:52] <Geth> ¦ JSON-JWT/main: review: https://github.com/raku-community-modules/JSON-JWT/commit/052510a472

[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:56] *** Altai-man joined
[12:58] *** Altai-man left
[12:58] *** Altai-man joined
[14:12] *** frost left
[14:58] *** Altai-man left
[15:01] *** Altai-man joined
[15:26] *** Altai-man left
[15:39] *** [Coke] left
[15:42] *** [Coke] joined
[16:12] *** [Coke] left
[16:15] *** [Coke] joined
[16:37] *** cognominal joined
[18:07] *** reportable6 left
[18:33] *** linkable6 left
[18:34] *** linkable6 joined
[19:09] *** reportable6 joined
[20:52] *** Geth joined
[20:57] *** TempIRCLogger joined
[21:05] <patrickb> good *, everyone

[21:05] <patrickb> I'm looking at the breakage of IO::Path::parent I have caused.

[21:06] <patrickb> m: /tmp/hiea/../foo".parent.parent

[21:06] <camelia> rakudo-moar d53b3ee83: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> /tmp/⏏hiea/../foo".parent.parent␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier…»

[21:06] <patrickb> m: "/tmp/hiea/../foo".parent.parent

[21:06] <camelia> rakudo-moar d53b3ee83: OUTPUT: «No such method 'parent' for invocant of type 'Str'.  Did you mean␤'print'?␤  in block <unit> at <tmp> line 1␤␤»

[21:06] <patrickb> m: "/tmp/hiea/../foo".IO.parent.parent

[21:06] <camelia> rakudo-moar d53b3ee83: ( no output )

[21:06] <patrickb> m: say "/tmp/hiea/../foo".IO.parent.parent

[21:06] <camelia> rakudo-moar d53b3ee83: OUTPUT: «"/tmp/hiea/../..".IO␤»

[21:07] <patrickb> I'd say that is correct behavior. Previous rakudo blindly removed elements from the end (but only if it's an absolute path).

[21:10] <patrickb> Now File::Directory::Tree does: while $path !~~ :e { $path.=parent }

[21:10] <nine> Whether that's correct depends on how "parent" is defined. In the file system sense, the above output is the only correct version. Of course "parent" could be defined as "chop off the last path part", then the previous behaviour would be correct

[21:11] <nine> Seems like File::Directory::Tree is of the chopping persuation

[21:12] <patrickb> The previous behavior was very inconsistent. It did the "blindly chop of" thing only for absolute paths and a broken version of the new behavior for relative paths.

[21:12] <[Coke]> (tree) (chopping) (get it?)

[21:13] * nine is glad someone noticed :D

[21:13] <nine> Seems like chopping is what the design meant: https://design.raku.org/S32/IO-OLD.html#parent

[21:14] <nine> https://design.raku.org/S32/IO.html#.parent only says "Removes last portion of the path and returns the result as a new IO::Path."

[21:15] <patrickb> I'm unsure I would read that into those docs. It also states that it doesn't remove "..".

[21:16] *** discord-raku-bot left
[21:16] <patrickb> Untested, but I'd say the examples given would work both in the new just as in the old implementation.

[21:16] *** discord-raku-bot joined
[21:19] <patrickb> The difficult question is what should happen if the path already contains a ".."

[21:29] <nine> I'm more and more convinced that .parent is meant as a plain stupid path string manipulation method, i.e. "foo/..".IO.parent -> "foo", "/tmp/hiea/../foo".IO.parent.parent -> "/tmp/hiea", etc.

[21:29] <nine> Because if not, what method would fill this role?

[21:30] <ugexe> .stupid-parent

[21:30] <nine> If we had that, then yes :) But we don't, so there's just parent. If you want the smart parent, you do $path.add('..').resolve

[21:32] <nine> Or rather ($path ~~ :d ?? $path.add($*SPEC.updir).resolve !! $path.parent) which...yes... but at least it's possible

[21:37] <Geth> ¦ roast: patrickbkr++ created pull request #802: Change .parent behavior to "stupid" resolving

[21:37] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/802

[21:59] <Geth> ¦ rakudo: patrickbkr++ created pull request #4800: Change parent to always just remove the last element

[21:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4800

