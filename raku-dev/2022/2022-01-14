[00:06] *** reportable6 left
[00:08] *** reportable6 joined
[01:08] *** benchable6 left
[01:08] *** linkable6 left
[01:08] *** notable6 left
[01:08] *** sourceable6 left
[01:08] *** squashable6 left
[01:08] *** greppable6 left
[01:08] *** reportable6 left
[01:08] *** quotable6 left
[01:08] *** nativecallable6 left
[01:08] *** statisfiable6 left
[01:08] *** unicodable6 left
[01:08] *** committable6 left
[01:08] *** coverable6 left
[01:08] *** bloatable6 left
[01:08] *** bisectable6 left
[01:08] *** evalable6 left
[01:08] *** tellable6 left
[01:08] *** releasable6 left
[01:08] *** shareable6 left
[01:08] *** sourceable6 joined
[01:08] *** quotable6 joined
[01:09] *** tellable6 joined
[01:09] *** squashable6 joined
[01:09] *** greppable6 joined
[01:09] *** unicodable6 joined
[01:10] *** notable6 joined
[01:11] *** statisfiable6 joined
[01:11] *** reportable6 joined
[01:11] *** bloatable6 joined
[01:11] *** bisectable6 joined
[01:45] *** frost joined
[02:08] *** committable6 joined
[02:10] *** nativecallable6 joined
[02:10] *** coverable6 joined
[02:10] *** releasable6 joined
[02:36] *** frost left
[02:49] *** frost joined
[03:08] *** discord-raku-bot left
[03:08] *** discord-raku-bot joined
[03:10] *** benchable6 joined
[03:41] *** frost left
[04:09] *** frost joined
[04:11] *** shareable6 joined
[04:18] *** frost left
[05:56] *** greppable6 left
[05:56] *** coverable6 left
[05:56] *** notable6 left
[05:56] *** nativecallable6 left
[05:56] *** statisfiable6 left
[05:56] *** quotable6 left
[05:56] *** sourceable6 left
[05:56] *** bloatable6 left
[05:56] *** squashable6 left
[05:56] *** bisectable6 left
[05:56] *** reportable6 left
[05:56] *** tellable6 left
[05:56] *** unicodable6 left
[05:56] *** releasable6 left
[05:56] *** committable6 left
[05:56] *** benchable6 left
[05:56] *** shareable6 left
[05:57] *** shareable6 joined
[05:57] *** reportable6 joined
[05:57] *** bloatable6 joined
[05:57] *** coverable6 joined
[05:59] *** benchable6 joined
[05:59] *** nativecallable6 joined
[05:59] *** sourceable6 joined
[05:59] *** quotable6 joined
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:57] *** committable6 joined
[06:58] *** squashable6 joined
[06:58] *** releasable6 joined
[06:59] *** greppable6 joined
[06:59] *** tellable6 joined
[07:09] *** linkable6 joined
[07:58] *** statisfiable6 joined
[08:11] *** evalable6 joined
[08:14] *** frost joined
[08:19] *** frost left
[08:19] *** moon-child left
[08:19] *** moon-child joined
[08:25] *** frost joined
[08:59] *** bisectable6 joined
[09:56] *** notable6 joined
[10:01] <Geth> ¦ rakudo: 768ebea783 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.pm6

[10:01] <Geth> ¦ rakudo: Make initialization of core dynamic variables threadsafe

[10:01] <Geth> ¦ rakudo: 

[10:01] <Geth> ¦ rakudo: This fixes #4714, from a suggestion by nine++ in ugexe++

[10:01] <Geth> ¦ rakudo: PR https://github.com/rakudo/rakudo/pull/4715

[10:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/768ebea783

[10:05] *** linkable6 left
[10:18] <patrickb> Are there strong emotions wrt adding minimal analytics to raku.org and rakudo.org? Can I just go ahead and add goatcounter.com to them both? (I wouldn't set up my own instance, but just use the hosted one which is free for us.)

[10:20] <lizmat> patrickb: what would be the purpose of those analytics

[10:20] <lizmat> ?

[10:21] <patrickb> I'm mostly interested in getting some insight in the overall development of hitcount. Basically a metric for how popular Raku is.

[10:21] <lizmat> this also in the light that the Dutch authorities have issued a warning that Google Analytics may become illegal in the near future

[10:21] <patrickb> Also possibly to find out which ways of distribution are how popular.

[10:22] <lizmat> wouldn't you be able to get that info from the logs ?

[10:22] <lizmat> access logs particularly ?

[10:22] <patrickb> Yes, more or less. 

[10:22] <patrickb> lizmat: Have you had a look at goatcounter?

[10:23] <patrickb> It's very conservative wrt tracking. It basically does none and (disclamers apply) doesn't require any consent.

[10:24] <patrickb> If super cautious it can even work without any custom client side code and only be fed with log files.

[10:24] <lizmat> if we would go that way, I would be strongly in favour of running our own instance

[10:30] <lizmat> when I read this, I see NedStat all over again  :-)

[10:38] <lizmat> https://nl.wikipedia.org/wiki/Nedstat

[10:39] <lizmat> (they used to be in the same building as I was, down the corridor even :-)

[10:58] <MasterDuke> i want to make more jokes about how we should count *all* the farm animals

[10:58] *** linkable6 joined
[10:59] *** unicodable6 joined
[11:53] <Geth> ¦ rakudo: ed99df18e4 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[11:53] <Geth> ¦ rakudo: Make unsuccessful .first about 40% faster

[11:53] <Geth> ¦ rakudo: 

[11:53] <Geth> ¦ rakudo: By separating the :end logic from the normal logic in separate

[11:53] <Geth> ¦ rakudo: private methods.  Sadly, still not enough to allow it to be inlined,

[11:53] <Geth> ¦ rakudo: but it does appear to be good for performance nonetheless.

[11:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ed99df18e4

[12:05] <lizmat> m: .42.base(16,*)

[12:05] <camelia> rakudo-moar 768ebea78: OUTPUT: «(timeout)»

[12:05] <lizmat> interesting

[12:06] <lizmat>     # Convert to given base until no fraction left: **CAUTION** this will

[12:06] <lizmat>     # loop indefinitely for simple values such as 1/3

[12:07] *** reportable6 left
[12:10] *** reportable6 joined
[12:11] <lizmat> m: dd .42.base(16).parse-base(16)   # an exact precision Rat shouldn't lose accuracy like that?

[12:11] <camelia> rakudo-moar ed99df18e: OUTPUT: «0.420000016689300537109375␤»

[12:11] <lizmat> m: dd .4.base(2).parse-base(2)

[12:11] <camelia> rakudo-moar ed99df18e: OUTPUT: «0.40625␤»

[12:21] *** Altai-man joined
[12:38] <Geth> ¦ rakudo: 7dc3add843 | (Elizabeth Mattijsen)++ | src/core.c/Rational.pm6

[12:38] <Geth> ¦ rakudo: Extract failure creation into separate subs

[12:38] <Geth> ¦ rakudo: 

[12:38] <Geth> ¦ rakudo: In order to reduce bytecode size of the hot path: still not enough

[12:38] <Geth> ¦ rakudo: to inline.  Basically a redo on Rat of 4d78bc6ace6ba0a1695177b

[12:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7dc3add843

[13:17] <Geth> ¦ rakudo/lizmat-NYI-as-sub: e4f23079f9 | (Elizabeth Mattijsen)++ | 10 files

[13:17] <Geth> ¦ rakudo/lizmat-NYI-as-sub: Introduce NYI as a sub

[13:17] <Geth> ¦ rakudo/lizmat-NYI-as-sub: 

[13:17] <Geth> ¦ rakudo/lizmat-NYI-as-sub: Many places in the core setting use:

[13:17] <Geth> ¦ rakudo/lizmat-NYI-as-sub: 

[13:17] <Geth> ¦ rakudo/lizmat-NYI-as-sub:    Failure.new: X::NYI.new: feature => "unimplemented feature"

[13:17] <Geth> ¦ rakudo/lizmat-NYI-as-sub: 

[13:17] <Geth> ¦ rakudo/lizmat-NYI-as-sub: in relatively hot code.  Another often occurring idiom is:

[13:17] <Geth> ¦ rakudo/lizmat-NYI-as-sub: <…commit message has 17 more lines…>

[13:17] <Geth> ¦ rakudo/lizmat-NYI-as-sub: review: https://github.com/rakudo/rakudo/commit/e4f23079f9

[13:17] <Geth> ¦ rakudo: lizmat++ created pull request #4716: Introduce NYI as a sub

[13:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4716

[14:03] *** Altai-man left
[14:08] *** Altai-man joined
[14:52] *** frost left
[15:01] <patrickb> lizmat: Can you phrase your concerns with not hosting ourself?

[15:22] *** frost joined
[16:01] *** Kaipi left
[16:01] *** Kaipi joined
[16:03] <lizmat> patrickb: because then you don't know what's going to happen with your data, more so then hosting yourself?

[16:22] *** frost left
[16:30] <nine> lizmat: now that I think of it https://github.com/rakudo/rakudo/commit/768ebea783a0123683815ba5d61c7482172b3661 may actually fix the 15-gh_1202.t failures that are plaguing CI

[16:30] <lizmat> well, that's a good bonus then :-)

[16:32] <nine> I would have bet that I have come across this issue before though and that I've even fixed it. But maybe I never comitted or pushed the fix as I got side tracked by the still present expr-jit issue

[16:32] <nine> (which is responsible for the remaining failures of that test)

[16:32] <lizmat> well, maybe it's time to disable the expression JIT by default ?

[16:46] <Geth> ¦ rakudo/lizmat-NYI-as-sub: 63d5ef1ba7 | (Elizabeth Mattijsen)++ | 21 files

[16:46] <Geth> ¦ rakudo/lizmat-NYI-as-sub: Use the NYI shortcut in the core where possible

[16:46] <Geth> ¦ rakudo/lizmat-NYI-as-sub: review: https://github.com/rakudo/rakudo/commit/63d5ef1ba7

[16:46] <nine> Well, honestly, yes. Though it does cost ~ 10 % performance in settings compilation

[16:47] <japhb> lizmat: Hmmm, that NYI-as-sub PR -- it feels like we're underutilizing ... and !!!, but I do understand that X::NYI is way more than either of those.  Just feels odd somehow.

[16:48] <lizmat> well, I see ... and !!! and ??? as quicky stopgaps, NYI as a longer term stopgap

[16:48] <japhb> :-D

[16:49] <lizmat> also, ... seems to confuse the hell out of a lot of newbies

[16:49] <lizmat> e.g. Question: how do you stub a sub ?

[16:49] <lizmat> A: sub foo { ... }

[16:49] <lizmat> Q: but how do you stub it ?

[16:49] <patrickb> lizmat: It's possible I'd not even uncomforable making generic usage data entirely public. I'm not sure what I'd should be afraid of. The worst I can imagine is a shitstorm because the numbers are so low...

[16:50] <japhb> Oh yes, I've noted that.

[16:52] <patrickb> lizmat: I'm ok with going for self-hosting (even though it's more work). But I'd like to understand your point of view.

[16:56] <lizmat> I'm not too worried about low numbers... I'm more worried about people feeling tracked

[16:58] <japhb> I'd prefer not to do client-side tracking at all.

[16:59] <patrickb> OK. So just using goatcounter by only feeding it with access logs would be fine?

[16:59] <lizmat> that seems legit to me

[16:59] <patrickb> Even if not self-hosted?

[17:00] <patrickb> (Not sure if that's technically possible, just asking)

[17:00] <lizmat> I'm not sure that would make a lot of sense

[17:00] <japhb> I'd prefer self-hosted -- logs should not leave our purview.

[17:00] <lizmat> to not self-host parsing logs

[17:03] <patrickb> Third alternative would be to add a hook in the server side code to call the API and feed them the data directly. But yes, I do understand that from an information security pov this isn't any different from just sending over the access logs.

[17:04] <patrickb> lizmat: But then again, what does self / remote hosting change about people feeling tracked?

[17:04] <patrickb> I think I still don't fully understand.

[17:04] <lizmat> at least we can tell them that the access logs are not given to third parties ?

[17:05] <japhb> At this point, whether through malice or incompetence, you have to assume third parties *will* mishandle private data.

[17:05] <japhb> (And I mean that both as a user and a server operator)

[17:10] <patrickb> OK. So the point is distrust in the remote party. That I understand.

[17:11] <lizmat> indeed....

[17:25] *** TempIRCLogger left
[17:25] *** TempIRCLogger joined
[17:26] *** TempIRCLogger left
[17:26] *** TempIRCLogger joined
[17:26] *** TempIRCLogger left
[17:26] *** TempIRCLogger joined
[17:28] <nine> I wonder if numbers generated by something like goatcounter are actually useful for anything. The biggest problem with webstats is filtering out bot access. There are a _lot_ more bots out there than you'd imagine. Unless you are a busy website, bot access will drown real users.

[17:30] <lizmat> yeah, I see that on the logs server as well

[17:30] <patrickb> goatcounter at least claims to be good at filtering out bots. (At least when using client side code.)

[17:31] <patrickb> Is that true for downloads as well?

[17:31] <lizmat> yeah, that's pretty simple that way

[17:31] <lizmat> bots generally don't run the JS

[17:33] <patrickb> OK. So only looking at logfiles isn't worth much, and running client side code is also discouraged. What options do we have left?

[17:34] <lizmat> 1 pixel image

[17:35] <patrickb> Huh? But that's also client side tracking.

[17:41] *** Altai-man left
[17:42] <Geth> ¦ rakudo: codesections++ created pull request #4717: Specify base of non base 10 invalid numbers

[17:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4717

[17:42] <lizmat> well, that's as much client side tracking as doing image requests on a server is ?

[17:43] *** discord-raku-bot left
[17:43] *** discord-raku-bot joined
[17:44] <patrickb> true

[17:45] <patrickb> OK. So self-hosted + tracking pixels it is?

[18:06] *** reportable6 left
[19:09] *** reportable6 joined
[19:41] <nine> At some point one has to decide how important getting those numbers is. Personally I don't see an issue with JS based user counting. Because that's what we want to do: count users. We don't "track" them, are not interested in their habits, don't store anything personal about them and don't want to do anything that could do them harm.

[19:42] <lizmat> that's a really broad statement  :-)

[19:45] <lizmat> Goatcounter appears to basically only use User-Agent and IP: https://github.com/arp242/goatcounter/blob/master/docs/sessions.markdown#goatcounters-solution

[19:45] <lizmat> it's this I'm a bit worried about: "Keeps useful statistics such as browser information, location, and screen size. Keep track of referring sites and campaigns."

[19:46] <lizmat> which would imply they link Referer: to the UA and IP hash

[19:46] <nine> None of which is personal information

[19:46] <moon-child> those can be enough to deanonymize

[19:47] <nine> And then what? What's the threat to the user if someone can find out that they visited raku.org?

[19:55] <nine> Also deanonymization can only happen if we e.g. notice that a user with browser X, location Y, screen size Z, etc. was also active on $other-site where we do have their name or something. But such correlation just would not happen as we don't even have another such site.

[19:56] <nine> That's why it's definitely a problem with Google Analytics (they are everywhere), but not when someone collects the same information in isolation.

[20:00] <lizmat> well, that would *definitely* be a reason to be hosting this ourselves :-)

[20:00] <lizmat> I guess I could live with having JS in that case, as long as the JS is **also** hosted by us

[20:22] *** discord-raku-bot left
[20:22] *** discord-raku-bot joined
[20:48] <Geth> ¦ tap-harness6/cwd: 5d0e2206b0 | (Leon Timmermans)++ | lib/TAP.pm

[20:48] <Geth> ¦ tap-harness6/cwd: WIP

[20:48] <Geth> ¦ tap-harness6/cwd: review: https://github.com/Raku/tap-harness6/commit/5d0e2206b0

[20:50] <Geth> ¦ tap-harness6/cwd: 4007bfd428 | (Leon Timmermans)++ | lib/TAP.pm

[20:50] <Geth> ¦ tap-harness6/cwd: Add cwd attribute to TAP::Harness

[20:50] <Geth> ¦ tap-harness6/cwd: 

[20:50] <Geth> ¦ tap-harness6/cwd: This will run the tests in the right working directory without affecting the main program's working directory.

[20:50] <Geth> ¦ tap-harness6/cwd: review: https://github.com/Raku/tap-harness6/commit/4007bfd428

[20:50] <Geth> ¦ tap-harness6: Leont++ created pull request #49: Add cwd attribute to TAP::Harness

[20:50] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/pull/49

[20:50] <leont> ugexe ^

[20:50] <ugexe> noice

[20:51] <leont> Haven't tested it at all beyond "it compiles", not sure I'll have the time for that this weekend, would be convenient if you could look into that

[20:51] <ugexe> sure

[20:55] <leont> The relativization of the paths made sense to me, but I might be wrong on that

[20:55] <ugexe> seems like it might be prefixing an extra ../ onto the paths i pass to run

[20:55] <ugexe> [zef] Could not open ../t/00-load.t. Failed to stat file: no such file or directory

[20:55] <ugexe> [zef] t/00-load.t ....................... Dubious, test returned 1

[20:55] <leont> Are you passing IO::Path objects or Str?

[20:55] <ugexe> IO::Path for cwd

[20:56] <ugexe> zef test ./zef --debug

[20:56] <ugexe> so im testing from 1 level above the root dist dir

[20:58] <leont> I meant the file paths you pass to run, are they strings or IO::Path?

[20:58] <ugexe> Str

[20:59] <ugexe>             my $parser   = ::("TAP::Harness").new(:@handlers, :output($.stdout), :err($.stderr), :cwd($path));

[20:59] <ugexe>             my $promise  = $parser.run(@test-files.map(*.relative($path)));

[21:00] <ugexe> so i pass $path as the cwd as well as use it to make the test file paths relative

[21:00] <leont> Right, so then it's running .relative twice

[21:01] <leont> I guess it will work if you leave out the map

[21:01] <ugexe> it would seem to me you should check if the path is relative before calling .relative($cwd)

[21:02] <leont> If everything is an IO::Path, it all doesn't matter

[21:02] <leont> They tend to DWIM

[21:02] <leont> (because they remember their own cwd)

[21:03] <ugexe> yeah, most of this code is written this way to instead deal with spawning processes

[21:03] <ugexe> i'll see if that works

[21:04] <ugexe> ah yeah i was probably just calling .relative so TAP showed the shorter name anyway (which is what it is doing now)

[21:08] <ugexe> Type check failed in binding to parameter '$name'; expected Str but got IO::Path (IO::Path.new("./zef/...)

[21:09] <leont> Great, that is totally on me

[21:09] <Geth> ¦ tap-harness6/cwd: 54025224fd | (Leon Timmermans)++ | lib/TAP.pm

[21:09] <Geth> ¦ tap-harness6/cwd: Add cwd attribute to TAP::Harness

[21:09] <Geth> ¦ tap-harness6/cwd: 

[21:09] <Geth> ¦ tap-harness6/cwd: This will run the tests in the right working directory without affecting the main program's working directory.

[21:09] <Geth> ¦ tap-harness6/cwd: review: https://github.com/Raku/tap-harness6/commit/54025224fd

[21:10] <leont> How about now?

[21:11] <ugexe> method make-source(IO::Path(Str):D

[21:11] <ugexe> it doesnt like that

[21:11] <ugexe> ❯ raku -I. -e 'use TAP;'

[21:11] <ugexe> ===SORRY!=== Error while compiling -e

[21:11] <ugexe> ===SORRY!=== Error while compiling /Users/ugexe/repos/tap-harness6/lib/TAP.pm (TAP)

[21:11] <ugexe> Invalid typename 'D' in parameter declaration.

[21:11] <ugexe> at /Users/ugexe/repos/tap-harness6/lib/TAP.pm (TAP):902

[21:11] <ugexe> ------>       method make-source(IO::Path(Str):D⏏ $prename, Any:D :$err, IO::Path:D :$cwd

[21:11] <Geth> ¦ tap-harness6/cwd: 331955feeb | (Leon Timmermans)++ | lib/TAP.pm

[21:11] <Geth> ¦ tap-harness6/cwd: Add cwd attribute to TAP::Harness

[21:11] <Geth> ¦ tap-harness6/cwd: 

[21:11] <Geth> ¦ tap-harness6/cwd: This will run the tests in the right working directory without affecting the main program's working directory.

[21:11] <Geth> ¦ tap-harness6/cwd: review: https://github.com/Raku/tap-harness6/commit/331955feeb

[21:13] <ugexe> :( [zef] Could not open ../t/00-load.t. Failed to stat file: no such file or directory

[21:15] <ugexe> I think you want IO() $prename

[21:16] <ugexe> although if i pass strings instead of IO it looks like it works

[21:17] <ugexe> (Im just using `raku -e 'use TAP; my @handlers = TAP::Harness::SourceHandler::Raku.new(:incdirs(["$*CWD/lib"])); my $parser = TAP::Harness.new(:@handlers, :cwd("./zef".IO)); my $p = $parser.run("t/00-load.t".IO); say $p.result'`)

[21:17] <ugexe> removing the .IO allows it to work

[21:17] <ugexe> "t/00-load.t".IO -> "t/00-load.t" rather

[21:18] <ugexe> although it does show './zef/t/00-load.t .. ok'

[21:19] <Geth> ¦ tap-harness6/cwd: 55a5618d0d | (Leon Timmermans)++ | lib/TAP.pm

[21:19] <Geth> ¦ tap-harness6/cwd: Add cwd attribute to TAP::Harness

[21:19] <Geth> ¦ tap-harness6/cwd: 

[21:19] <Geth> ¦ tap-harness6/cwd: This will run the tests in the right working directory without affecting the main program's working directory.

[21:19] <Geth> ¦ tap-harness6/cwd: review: https://github.com/Raku/tap-harness6/commit/55a5618d0d

[21:23] <leont> No, that doesn't work either

[21:24] <leont> Ok, I may need to think a little about the architecture of this all

[21:27] <ugexe>         method make-source(Str $prename, Any:D :$err, IO::Path:D :$cwd) {

[21:27] <ugexe>             my $name = $prename.IO.is-relative ?? $prename !! $prename.relative($cwd);

[21:27] <ugexe> that seems to work if i pass strings

[22:00] *** notna joined
[22:30] <leont> I almost got it to work with both, but I'm getting a «This type cannot unbox to a native string: P6opaque, Failure» and --ll-exception doesn't seem to do anything here

[22:35] <leont> Right, because that happens in the test it runs.

[22:36] <leont> «raku -I./lib t/source-file.t» works but «(cd t; raku -I../lib source-file.t)» dpesm

[22:36] <leont> doesn't

[22:43] *** Xliff left
[23:21] *** notna left
[23:25] <leont> Ok, main bug is entirely my own fault, but the error message is quite LTA and I may have to take a look at that later.

[23:44] <Geth> ¦ tap-harness6/cwd: 2acaf1dc76 | (Leon Timmermans)++ | 2 files

[23:44] <Geth> ¦ tap-harness6/cwd: Make t/source-file.t cwd-independent

[23:44] <Geth> ¦ tap-harness6/cwd: review: https://github.com/Raku/tap-harness6/commit/2acaf1dc76

[23:44] <Geth> ¦ tap-harness6/cwd: d785a5981d | (Leon Timmermans)++ | lib/TAP.pm

[23:44] <Geth> ¦ tap-harness6/cwd: Add cwd attribute to TAP::Harness

[23:44] <Geth> ¦ tap-harness6/cwd: 

[23:44] <Geth> ¦ tap-harness6/cwd: This will run the tests in the right working directory without affecting the main program's working directory.

[23:44] <Geth> ¦ tap-harness6/cwd: review: https://github.com/Raku/tap-harness6/commit/d785a5981d

[23:44] <leont> Now it should work for IO::Path regardless of it's cwd, and for Str with current cwd.

[23:45] <leont> I don't have strong opinions on how it should interpret Str

[23:46] <ugexe> my $parser = TAP::Harness.new(:@handlers, :cwd("./zef".IO)); my $p = $parser.run("t/00-load.t");

[23:47] <ugexe> my $parser = TAP::Harness.new(:@handlers, :cwd("./zef".IO)); my $p = $parser.run("./zef/t/00-load.t");

[23:47] <ugexe> the later works as expected

[23:47] <ugexe> but i would expect the former to work, not the later

[23:47] <ugexe> I can of course just pass in absolute paths in zef, but still

[23:48] <Geth> ¦ tap-harness6/cwd: 99668d5a02 | (Leon Timmermans)++ | lib/TAP.pm

[23:48] <Geth> ¦ tap-harness6/cwd: Add cwd attribute to TAP::Harness

[23:48] <Geth> ¦ tap-harness6/cwd: 

[23:48] <Geth> ¦ tap-harness6/cwd: This will run the tests in the right working directory without affecting the main program's working directory.

[23:48] <Geth> ¦ tap-harness6/cwd: review: https://github.com/Raku/tap-harness6/commit/99668d5a02

[23:48] <leont> I can make that workI think that should work

[23:48] <ugexe> yeah that seems to work

[23:52] <ugexe> $*PROGRAM.parent.child('source-file-test-data');

[23:52] <ugexe> thats a little nicer way of writing that

[23:53] <ugexe> dirname wont include the volume on windows

[23:53] <ugexe> i dont think anyway

[23:54] <leont> Yeah that looks better

[23:56] <Geth> ¦ tap-harness6/cwd: d7c03e2b4a | (Leon Timmermans)++ | 2 files

[23:56] <Geth> ¦ tap-harness6/cwd: Make t/source-file.t cwd-independent

[23:56] <Geth> ¦ tap-harness6/cwd: review: https://github.com/Raku/tap-harness6/commit/d7c03e2b4a

[23:56] <Geth> ¦ tap-harness6/cwd: 9b63ace2a3 | (Leon Timmermans)++ | lib/TAP.pm

[23:56] <Geth> ¦ tap-harness6/cwd: Add cwd attribute to TAP::Harness

[23:56] <Geth> ¦ tap-harness6/cwd: 

[23:56] <Geth> ¦ tap-harness6/cwd: This will run the tests in the right working directory without affecting the main program's working directory.

[23:56] <Geth> ¦ tap-harness6/cwd: review: https://github.com/Raku/tap-harness6/commit/9b63ace2a3

