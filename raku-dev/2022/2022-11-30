[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:14] *** Kaiepi left
[00:21] *** sortiz left
[00:21] *** sortiz joined
[01:42] *** MasterDuke left
[01:57] <tbrowder> lizmat: so that's your secret! i'm not smart enough to which of 42 versions of a post i'm editing, and it's most always the wrong one :(

[03:12] *** linkable6 left
[03:12] *** evalable6 left
[03:12] *** shareable6 left
[03:12] *** squashable6 left
[03:12] *** nativecallable6 left
[03:12] *** tellable6 left
[03:12] *** committable6 left
[03:12] *** sourceable6 left
[03:12] *** bloatable6 left
[03:12] *** statisfiable6 left
[03:12] *** coverable6 left
[03:12] *** greppable6 left
[03:12] *** unicodable6 left
[03:12] *** benchable6 left
[03:12] *** notable6 left
[03:12] *** bisectable6 left
[03:12] *** quotable6 left
[03:12] *** releasable6 left
[03:12] *** reportable6 left
[03:12] *** unicodable6 joined
[03:12] *** greppable6 joined
[03:12] *** shareable6 joined
[03:12] *** evalable6 joined
[03:13] *** releasable6 joined
[03:13] *** quotable6 joined
[03:13] *** sourceable6 joined
[03:13] *** linkable6 joined
[03:13] *** bloatable6 joined
[03:13] *** squashable6 joined
[03:13] *** notable6 joined
[03:13] *** reportable6 joined
[03:14] *** bisectable6 joined
[03:14] *** benchable6 joined
[03:14] *** tellable6 joined
[03:14] *** statisfiable6 joined
[03:14] *** committable6 joined
[03:15] *** nativecallable6 joined
[03:15] *** coverable6 joined
[03:46] *** Kaiepi joined
[05:50] *** benchable6 left
[05:50] *** committable6 left
[05:50] *** nativecallable6 left
[05:50] *** statisfiable6 left
[05:50] *** evalable6 left
[05:50] *** greppable6 left
[05:50] *** shareable6 left
[05:50] *** bloatable6 left
[05:50] *** sourceable6 left
[05:50] *** reportable6 left
[05:50] *** bisectable6 left
[05:50] *** unicodable6 left
[05:50] *** squashable6 left
[05:50] *** tellable6 left
[05:50] *** linkable6 left
[05:50] *** evalable6 joined
[05:51] *** benchable6 joined
[05:51] *** greppable6 joined
[05:51] *** bisectable6 joined
[05:51] *** reportable6 joined
[05:51] *** nativecallable6 joined
[05:51] *** statisfiable6 joined
[05:51] *** sourceable6 joined
[05:51] *** bloatable6 joined
[05:52] *** shareable6 joined
[05:52] *** tellable6 joined
[05:53] *** squashable6 joined
[05:53] *** linkable6 joined
[05:53] *** committable6 joined
[05:53] *** unicodable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:26] <Geth> ¦ URI: 4e570bdc47 | (JJ Merelo)++ | 2 files

[07:26] <Geth> ¦ URI: badge :arrow_up: + :see_no_evil:

[07:26] <Geth> ¦ URI: 

[07:26] <Geth> ¦ URI: Also closes #50 by adding a tag with current release

[07:26] <Geth> ¦ URI: review: https://github.com/raku-community-modules/URI/commit/4e570bdc47

[07:30] *** epony left
[07:30] *** epony joined
[07:52] <Geth> ¦ problem-solving: JJ assigned to codesections Issue Choose some precise (or rough) way to "adopt" modules in the Raku Module Adoption center https://github.com/Raku/problem-solving/issues/355

[08:14] *** epony left
[08:20] *** epony joined
[08:41] *** sena_kun joined
[08:58] *** sena_kun left
[08:58] <Geth> ¦ URI: ea2cd064f2 | (JJ Merelo)++ | t/missing-components.t

[08:58] <Geth> ¦ URI: Adds test for empty-parts, closes #42

[08:58] <Geth> ¦ URI: review: https://github.com/raku-community-modules/URI/commit/ea2cd064f2

[09:01] *** sena_kun joined
[09:29] <Geth> ¦ URI/master: 4 commits pushed by (JJ Merelo)++

[09:29] <Geth> ¦ URI/master: 226c9df1cc | Old name still around...

[09:29] <Geth> ¦ URI/master: 42c67745d3 | Improves coverage by directly testing tokens

[09:29] <Geth> ¦ URI/master: 273de023e9 | Improves coverage by testing tokens directly, refs #52

[09:29] <Geth> ¦ URI/master: 23f750a7b9 | :see_no_evil:

[09:29] <Geth> ¦ URI/master: review: https://github.com/raku-community-modules/URI/compare/ea2cd064f2d5...23f750a7b974

[09:38] <Geth> ¦ URI: f0dd4ae6b4 | (JJ Merelo)++ | lib/URI.rakumod

[09:38] <Geth> ¦ URI: :recycle: to improve coverage #52

[09:38] <Geth> ¦ URI: review: https://github.com/raku-community-modules/URI/commit/f0dd4ae6b4

[09:38] <Geth> ¦ URI: 02742f2a85 | (JJ Merelo)++ | lib/URI.rakumod

[09:38] <Geth> ¦ URI: :recycle: :coffin: uri is deprecated #52

[09:38] <Geth> ¦ URI: review: https://github.com/raku-community-modules/URI/commit/02742f2a85

[09:38] <Geth> ¦ URI: c2769a4165 | (JJ Merelo)++ | lib/URI.rakumod

[09:38] <Geth> ¦ URI: :recycle: :coffin: init is deprecated #52

[09:38] <Geth> ¦ URI: review: https://github.com/raku-community-modules/URI/commit/c2769a4165

[10:18] <Geth> ¦ rakudo: michaelruigrok++ created pull request #5114: Simplify X::TypeCheck::Assignment for containers

[10:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5114

[10:21] *** sena_kun left
[10:22] *** sena_kun joined
[10:29] *** sena_kun left
[10:37] <Geth> ¦ URI: c0250d7fd1 | (JJ Merelo)++ | 5 files

[10:37] <Geth> ¦ URI: :coffin:

[10:37] <Geth> ¦ URI: review: https://github.com/raku-community-modules/URI/commit/c0250d7fd1

[10:37] <Geth> ¦ URI: 42026d0c9e | (JJ Merelo)++ | 2 files

[10:37] <Geth> ¦ URI: :coffin:

[10:37] <Geth> ¦ URI: review: https://github.com/raku-community-modules/URI/commit/42026d0c9e

[10:37] <Geth> ¦ URI: a5d56402c1 | (JJ Merelo)++ | 2 files

[10:37] <Geth> ¦ URI: Add auth too

[10:37] <Geth> ¦ URI: review: https://github.com/raku-community-modules/URI/commit/a5d56402c1

[10:54] <Geth> ¦ rakudo: 1e30b43c00 | (Michael Ruigrok)++ (committed using GitHub Web editor) | src/core.c/Exception.pm6

[10:54] <Geth> ¦ rakudo: Simplify X::TypeCheck::Assignment for containers (#5114)

[10:54] <Geth> ¦ rakudo: 

[10:54] <Geth> ¦ rakudo: For container assignment type errors, change the message from:

[10:54] <Geth> ¦ rakudo: "Type check failed in assignment to an element of <symbol>; expected <type> but got <type> (<value>)"

[10:54] <Geth> ¦ rakudo: to 

[10:54] <Geth> ¦ rakudo: "Type check failed for an element of <symbol>; expected <type> but got <type> (<value>)".

[10:54] <Geth> ¦ rakudo: 

[10:54] <Geth> ¦ rakudo: This removes possible confusion about assignment syntax. Possibly resolves  #5110.

[10:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1e30b43c00

[10:55] *** linkable6 left
[10:57] *** linkable6 joined
[11:22] *** sena_kun joined
[11:45] *** epony left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:26] *** epony joined
[13:36] *** linkable6 left
[13:36] *** evalable6 left
[13:37] *** evalable6 joined
[13:37] *** linkable6 joined
[13:43] <lizmat> vrurg: any ideas of providing dynamic variables that have a different value depending on the language level ?

[13:56] <sortiz> lizmat: Could you please review my PR #5113, I think it's trivial.

[13:59] <lizmat> I'm ok with it, but we're close to a release, so I'll let the release manager decide

[13:59] <lizmat> it's a trivial change, but the chance of it causing ecosystem fallout in testing, is significant

[14:00] <sortiz> Oki. Thank you.

[14:02] *** Kaipei joined
[14:05] *** Kaiepi left
[14:12] <Geth> ¦ rakudo/lizmat-least-most: 06f8879ffe | (Elizabeth Mattijsen)++ | 6 files

[14:12] <Geth> ¦ rakudo/lizmat-least-most: Introduce Least / Most

[14:12] <Geth> ¦ rakudo/lizmat-least-most: 

[14:12] <Geth> ¦ rakudo/lizmat-least-most: Work in progress as it unearthed a number of issues.

[14:12] <Geth> ¦ rakudo/lizmat-least-most: 

[14:12] <Geth> ¦ rakudo/lizmat-least-most: Introduce the dynamic variables $*LEAST and $*MOST as identifiers

[14:12] <Geth> ¦ rakudo/lizmat-least-most: for the smallest and largest possible value (like -Inf and Inf, but

[14:12] <Geth> ¦ rakudo/lizmat-least-most: without any typing).

[14:12] <Geth> ¦ rakudo/lizmat-least-most: <…commit message has 10 more lines…>

[14:12] <Geth> ¦ rakudo/lizmat-least-most: review: https://github.com/rakudo/rakudo/commit/06f8879ffe

[14:12] <Geth> ¦ rakudo: lizmat++ created pull request #5115: Introduce Least / Most

[14:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5115

[14:17] <[Coke]> ^^ What problem is this trying to fix?

[14:21] <Geth> ¦ rakudo/lizmat-least-most: 58b33c1ca0 | (Elizabeth Mattijsen)++ | 3 files

[14:21] <Geth> ¦ rakudo/lizmat-least-most: Fix basic tests

[14:21] <Geth> ¦ rakudo/lizmat-least-most: review: https://github.com/rakudo/rakudo/commit/58b33c1ca0

[14:21] <lizmat> ().min returning Inf, ().max returning -Inf   which are numeric

[14:22] <lizmat> m: my str @a; say @a.min

[14:22] <camelia> rakudo-moar 1e30b43c0: OUTPUT: «Inf␤»

[14:22] <lizmat> the smallest on a native str array returning a Num

[14:22] <vrurg> lizmat: not possible. The variable might be created by any language.

[14:23] <lizmat> meh  :-)

[14:24] <[Coke]> m: <this that other cat>.min.say

[14:24] <camelia> rakudo-moar 1e30b43c0: OUTPUT: «cat␤»

[14:24] <[Coke]> m: <meh ok>.min.say

[14:24] <camelia> rakudo-moar 1e30b43c0: OUTPUT: «meh␤»

[14:26] <lizmat> afk for a few hours&

[14:26] <vrurg> Out of the box I can think of a kind of a configuration class. class RakuDefaults { method value { pi } }. Then in 6.e core it can be class RakuDefaults is CORE::v6c::RakuDefaults { method value { e } } 

[14:27] *** sena_kun left
[14:27] *** Altai-man joined
[15:38] *** Kaipei left
[16:29] *** sortiz left
[16:29] <nine_> lizmat: aren't -Inf/Inf exactly what Least/Most are supposed to be according to https://github.com/Raku/problem-solving/issues/354#issuecomment-1331490466

[16:30] <nine_> m: say Inf cmp "cat"

[16:30] <camelia> rakudo-moar 1e30b43c0: OUTPUT: «More␤»

[16:34] <discord-raku-bot> <Nemokosch> nine_: the other way around, rather. Least and Most are what -Inf and Inf were supposed to be (but aren't)

[16:43] <nine_> If -Inf and Inf are not what they are supposed to be, why not make them what they are supposed to be? Why instead add yet some new thing instead?

[16:44] <discord-raku-bot> <Nemokosch> how are you gonna change the fact that Inf and -Inf are Nums?

[16:44] <discord-raku-bot> <Nemokosch> while retaining backwards compatibility...

[16:45] <nine_> I wouldn't. And why would I need to do that?

[16:46] <discord-raku-bot> <Nemokosch> because it's inconsistent that the minimum of an empty list of whatever non-Numeric type is a Num?

[16:46] <discord-raku-bot> <Nemokosch> because it breaks the type system?

[16:47] <nine_> Apparently -Inf and Inf are supposed to be treated as undefined value for any (non-numeric) type.

[16:48] <discord-raku-bot> <Nemokosch> Okay, how are you gonna achieve that without breaking the type system?

[16:48] <lizmat> m: say Inf le "J"   # nine

[16:48] <camelia> rakudo-moar 1e30b43c0: OUTPUT: «True␤»

[16:48] <nine_> I don't know. Haven't looked at it yet.

[16:48] <nine_> lizmat: looks like cmp is implemented correctly, while other operators aren't

[16:49] <lizmat> so I guess we could add candidates to infix ops handling Inf

[16:49] <lizmat> and -Inf

[16:49] <lizmat> hmmm

[16:49] <nine_> Such candidates do exist for cmp but probably not for those others, so le stringifies the Inf and find's it smaller than J

[16:50] <lizmat> yeah, duh, that's why the example

[16:51] <discord-raku-bot> <Nemokosch> Anyways, this is not only a lot of work with minor breaking changes everywhere but I frankly have no idea how `Str $smallest = $input.words.min` will ever work with it.

[16:52] <discord-raku-bot> <Nemokosch> when $input happens to contain no words

[16:52] <lizmat> that would never work

[16:52] <lizmat> or: that would only work if it returned Nil

[16:53] <lizmat> fwiw, I think the behaviour of .min and .max predates the existence of Nil

[16:56] <discord-raku-bot> <Nemokosch> does this possibly mean that the "old design documents" have no knowledge of Nil?

[17:06] <lizmat> could well be

[17:07] <nine_> Actually Nil gets mentioned a lot by those docs

[17:08] <nine_> https://design.raku.org/S02.html#Nil

[17:10] <nine_> "Assigning Nil to any scalar container causes the container to throw out any contents and restore itself to an uninitialized state". If we treated -Inf and Inf the same way for any non-numericly typed container, Str $smallest = $input.words.min; would get you an undefined Str

[17:11] <lizmat> the text of Nil is from 2015, the text of method min/max is from 2012

[17:11] <lizmat> in S32-setting-library/Containers.pod

[17:11] *** Kaipei joined
[17:11] <lizmat> so I think my feeling in that regards is correct  :-)

[17:14] <nine_> Contrary to what I've so far written may sound, turning Inf into another Nil doesn't sound like a winning strategy to me. It just bothers me when people talk about language design while dismissing the actual design documents. A lot of thought already went into the language to make it as awesomely consistent as it is. I'd hate for that to get drowned in a sea of bolted on solutions for odd corner cases.

[17:16] <nine_> I wonder, if turning Inf into a Nily thing doesn't work out. Can we turn Nil into Inf instead? I.e. make Nil be larger than the largest value and smaller than the smallest value for any type?

[17:23] <discord-raku-bot> <Nemokosch> I'm about to finish my comment

[17:27] <discord-raku-bot> <Nemokosch> I can say the same thing here as well, though. Design documents can be useful or not useful - just like the design itself can be good or bad.

[17:28] <discord-raku-bot> <Nemokosch> In many cases, the design documents are super useful - here, whether you call it "dismissing" or not, I think the design document itself is totally unconvincing.

[17:29] <discord-raku-bot> <Nemokosch> So I can say the same way that it bothers me when people talk about an admitted language design proposal just by reciting an old, unmaintained document that has proven to cause problems for many people in real-life scenarios.

[17:30] <discord-raku-bot> <Nemokosch> (I intentionally phrased this in a radical way, to illustrate how your sentiment sounded to me.)

[17:37] *** AlexDaniel left
[17:39] <discord-raku-bot> <Nemokosch> Anyways, my impression is that there is a friction within the core regarding design documents, even more so than breaking changes. Some people say they are mostly historical documents, others say they would just need a little maintenance work to be virtually authoritative.

[17:43] *** AlexDaniel joined
[17:44] <discord-raku-bot> <Nemokosch> steering back towards Nil & friends - I'm not sure if Nil can be the biggest and the smallest value without breaking algebra... also, fun fact: Nil acts as 0 with `min` and `max`; I'm not sure if this is intended

[17:48] <discord-raku-bot> <Nemokosch> and `0 cmp Nil` says "Use of Nil in string context"...

[17:53] <nine_> Of course, right now Nil isn't a working replacement for Inf. But maybe it could be?

[17:54] <discord-raku-bot> <Nemokosch> I think this is a very dangerous territory, possibly the term "strangely consistent" would fit here. Let's say Nil could be a minimum and a maximum. Does that mean Nil < Nil? What about Nil >= Nil, then? And so on.

[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:04] <Geth> ¦ rakudo: 6cded78e9a | (Elizabeth Mattijsen)++ | src/core.c/Code.pm6

[18:04] <Geth> ¦ rakudo: Make two WhateverCodes non-equivalent if different

[18:04] <Geth> ¦ rakudo: 

[18:04] <Geth> ¦ rakudo: In response to https://github.com/rakudo/rakudo/issues/5116

[18:04] <Geth> ¦ rakudo: 

[18:04] <Geth> ¦ rakudo: infix:<eqv> falls back to the calling .raku if two objects are of

[18:04] <Geth> ¦ rakudo: the same type.  This makes sure that WhateverCode.raku will produce

[18:04] <Geth> ¦ rakudo: different strings for different WhateverCode objects.

[18:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6cded78e9a

[18:12] <Geth> ¦ roast: e4f4f0945d | (Elizabeth Mattijsen)++ | S03-operators/eqv.t

[18:12] <Geth> ¦ roast: Add tests for WhateverCode equivalence

[18:12] <Geth> ¦ roast: 

[18:12] <Geth> ¦ roast: See https://github.com/rakudo/rakudo/issues/5116

[18:12] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e4f4f0945d

[18:14] *** Altai-man left
[18:22] <leont> lizmat++ # that was a much quicker fix than I expected :-)

[18:23] <lizmat> it was basically cat-licensed from Block.raku

[18:24] <lizmat> the only thing tricky was referencing $!signature like that: it needed the nqp::getattr() as the attribute is not known in HLL space

[18:27] <discord-raku-bot> <Nemokosch> What does HLL stand for?

[18:29] <nine_> High Level Language

[18:31] <[Coke]> like raku, perl, etc. as opposed to nqp, or moarvm bytecode (or PIR if you're as old as I am)

[18:31] <discord-raku-bot> <Nemokosch> that's in the PAST 😛

[18:31] <nine_> Depending on context, NQP may also be a HLL

[18:35] <discord-raku-bot> <Nemokosch> oh okay, so it's an umbrella term?

[18:36] <discord-raku-bot> <Nemokosch> In my mind, it was a mysterious third thing besides Raku and NQP 😅

[18:56] <[Coke]> nine: fair; could just be "higher in the chain than what I'm writing in currently"

[19:11] *** sortiz joined
[20:18] *** sena_kun joined
[20:21] *** epony left
[20:21] *** epony joined
[22:45] *** sena_kun left
[22:48] *** sortiz left
