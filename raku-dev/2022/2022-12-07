[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[01:02] *** Kaiepi left
[01:14] *** epony left
[01:47] <Geth> ¦ nqp: vrurg++ created pull request #786: Add support for RakuAST::Origin::Match

[01:47] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/786

[02:37] *** evalable6 left
[02:37] *** linkable6 left
[02:38] *** evalable6 joined
[02:39] *** linkable6 joined
[02:57] *** epony joined
[05:18] *** evalable6 left
[05:18] *** greppable6 left
[05:18] *** reportable6 left
[05:18] *** squashable6 left
[05:18] *** linkable6 left
[05:18] *** sourceable6 left
[05:18] *** tellable6 left
[05:18] *** statisfiable6 left
[05:18] *** coverable6 left
[05:18] *** nativecallable6 left
[05:18] *** notable6 left
[05:18] *** benchable6 left
[05:18] *** quotable6 left
[05:18] *** committable6 left
[05:18] *** shareable6 left
[05:18] *** unicodable6 left
[05:18] *** bloatable6 left
[05:18] *** releasable6 left
[05:18] *** bisectable6 left
[05:18] *** shareable6 joined
[05:18] *** linkable6 joined
[05:19] *** sourceable6 joined
[05:19] *** bisectable6 joined
[05:19] *** unicodable6 joined
[05:19] *** reportable6 joined
[05:19] *** committable6 joined
[05:19] *** nativecallable6 joined
[05:19] *** squashable6 joined
[05:20] *** quotable6 joined
[05:20] *** benchable6 joined
[05:20] *** greppable6 joined
[05:21] *** bloatable6 joined
[05:21] *** releasable6 joined
[05:21] *** tellable6 joined
[05:21] *** evalable6 joined
[05:21] *** statisfiable6 joined
[05:21] *** notable6 joined
[05:21] *** coverable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:53] *** Kaiepi joined
[08:30] *** sena_kun joined
[08:51] *** sena_kun left
[09:27] <Geth> ¦ rakudo/rakuast: 4 commits pushed by (Stefan Seifert)++

[09:28] <Geth> ¦ rakudo/rakuast: 86663cb0d5 | RakuAST: set correct default for parametric positional/associative args

[09:28] <Geth> ¦ rakudo/rakuast: 9d5824cb5a | RakuAST: set correct default value for optional native args

[09:28] <Geth> ¦ rakudo/rakuast: e8bd1b3fd4 | RakuAST: fix cleanup tasks running too early with BEGIN time EVAL

[09:28] <Geth> ¦ rakudo/rakuast: 3aa8c8778b | RakuAST: placeholder declarations are also terms

[09:28] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/compare/b7173a292ce3...3aa8c8778b20

[10:46] *** frost joined
[11:19] *** squashable6 left
[11:21] *** squashable6 joined
[11:46] *** Xliff joined
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[14:10] *** frost left
[14:29] <gfldex> m: class C { method foo(--> self) {} }

[14:29] <camelia> rakudo-moar d52342eb0: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Type 'self' is not declared␤at <tmp>:1␤------> class C { method foo(--> self⏏) {} }␤»

[14:29] <gfldex> I was under the impression that self is always declared for a method.

[14:33] <discord-raku-bot> <Nemokosch> that makes sense - and why is it recognized as a "type" anyway

[14:44] <gfldex> m: constant self = 42; class C { method foo(--> self) {} }

[14:44] <camelia> rakudo-moar d52342eb0: ( no output )

[14:46] <gfldex> Also, it should throw X::Syntax::NoSelf.

[14:50] <discord-raku-bot> <Nemokosch> so the outer self managed to peek in, although the method defines its own self

[14:51] <discord-raku-bot> <Nemokosch> return values are kinda fragile

[14:51] <discord-raku-bot> <Nemokosch> sub foo(--> -1) {}

[14:53] <Kaiepi> m: role Foo[Mu \T] { method of { T } }; class Bar { method baz(Foo[self] $foo) { $foo.of } }; say Bar.baz: Foo[Bar]

[14:53] <camelia> rakudo-moar d52342eb0: OUTPUT: «Type check failed in binding to parameter '$foo'; expected Foo[NQPMu] but got Foo[Bar] (Foo[Bar])␤  in method baz at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:56] <discord-raku-bot> <Nemokosch> how do function return values work, by the way?

[14:56] <discord-raku-bot> <Nemokosch> sub bar(-->1) { 2 }

[14:56] <discord-raku-bot> <Nemokosch> 1 seems to win here

[14:58] <discord-raku-bot> <Nemokosch> but at the same time, if I wrote -->Int, I wouldn't get the type object back

[14:58] <discord-raku-bot> <Nemokosch> (which is desirable but at least not trivial)

[16:09] <[Coke]> I believe it's :if it's a type object, any concrete return values must match the type. If it's a concrete value, that's what you get.

[16:11] <[Coke]> m: sub a(-->3) { return "a" }; say a();

[16:11] <camelia> rakudo-moar d52342eb0: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No return arguments allowed when return value 3 is already specified in the signature␤at <tmp>:1␤------> sub a(-->3) { return "a" ⏏}; say a();␤»

[16:11] <[Coke]> and also that.

[17:16] *** melezhik joined
[17:19] *** melezhik left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:33] *** melezhik joined
[18:43] *** melezhik left
[18:46] *** [Coke] left
[18:48] *** [Coke] joined
[21:32] *** linkable6 left
[21:32] *** evalable6 left
[21:33] *** linkable6 joined
[21:35] *** evalable6 joined
[23:50] *** squashable6 left
[23:50] *** evalable6 left
[23:50] *** unicodable6 left
[23:50] *** nativecallable6 left
[23:50] *** committable6 left
[23:50] *** greppable6 left
[23:50] *** quotable6 left
[23:50] *** linkable6 left
[23:50] *** shareable6 left
[23:50] *** bisectable6 left
[23:50] *** tellable6 left
[23:50] *** notable6 left
[23:50] *** statisfiable6 left
[23:50] *** benchable6 left
[23:50] *** releasable6 left
[23:50] *** reportable6 left
[23:50] *** coverable6 left
[23:50] *** sourceable6 left
[23:50] *** bloatable6 left
[23:51] *** reportable6 joined
[23:51] *** coverable6 joined
[23:51] *** notable6 joined
[23:51] *** tellable6 joined
[23:51] *** shareable6 joined
[23:52] *** statisfiable6 joined
[23:52] *** nativecallable6 joined
[23:52] *** releasable6 joined
[23:52] *** evalable6 joined
[23:52] *** quotable6 joined
[23:52] *** unicodable6 joined
[23:52] *** bisectable6 joined
[23:52] *** benchable6 joined
[23:53] *** squashable6 joined
[23:53] *** greppable6 joined
[23:53] *** committable6 joined
[23:53] *** bloatable6 joined
[23:53] *** sourceable6 joined
[23:54] *** linkable6 joined
