[00:08] *** reportable6 left
[01:13] <Geth> ¦ rakudo: e521c8e45b | (Vadim Belman)++ | 2 files
[01:13] <Geth> ¦ rakudo: Fix method put failing on junctions
[01:13] <Geth> ¦ rakudo: 
[01:13] <Geth> ¦ rakudo: Resolves #4742. Aside of plain throwing `(1|2).put` also fix recursive
[01:13] <Geth> ¦ rakudo: cases when a junction is an eigenstate of another junction.
[01:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e521c8e45b
[01:13] <Geth> ¦ rakudo: ba4d233283 | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files
[01:13] <Geth> ¦ rakudo: Merge pull request #4743 from vrurg/rakudo-4742
[01:13] <Geth> ¦ rakudo: 
[01:13] <Geth> ¦ rakudo: Fix method put failing on junctions
[01:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ba4d233283
[01:13] <Geth> ¦ roast: ecb92756c1 | (Vadim Belman)++ | S03-junctions/misc.t
[01:13] <Geth> ¦ roast: Add tests for basic IO over junctions
[01:13] <Geth> ¦ roast: 
[01:13] <Geth> ¦ roast: Make sure `say`, `put`, `print`, and `note` all work as expected.
[01:14] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ecb92756c1
[01:14] <Geth> ¦ roast: dfc4cf7e52 | (Vadim Belman)++ (committed using GitHub Web editor) | S03-junctions/misc.t
[01:14] <Geth> ¦ roast: Merge pull request #788 from vrurg/rakudo-4742
[01:14] <Geth> ¦ roast: 
[01:14] <Geth> ¦ roast: Add tests for basic IO over junctions
[01:14] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/dfc4cf7e52
[01:14] *** linkable6 left
[03:15] *** linkable6 joined
[03:36] <Geth> ¦ rakudo: vrurg++ created pull request #4744: Do some better job optimizing Junction on RHS
[03:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4744
[04:01] *** CIAvash left
[04:01] *** AlexDaniel left
[04:08] *** reportable6 joined
[04:36] *** CIAvash joined
[04:48] *** CIAvash left
[05:26] *** rypervenche left
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[07:56] *** squashable6 left
[07:56] *** linkable6 left
[07:56] *** reportable6 left
[07:56] *** bloatable6 left
[07:56] *** coverable6 left
[07:56] *** unicodable6 left
[07:56] *** statisfiable6 left
[07:56] *** notable6 left
[07:56] *** tellable6 left
[07:56] *** releasable6 left
[07:56] *** quotable6 left
[07:56] *** committable6 left
[07:56] *** nativecallable6 left
[07:56] *** bisectable6 left
[07:56] *** benchable6 left
[07:56] *** shareable6 left
[07:56] *** greppable6 left
[07:56] *** sourceable6 left
[07:56] *** evalable6 left
[07:57] *** tellable6 joined
[07:57] *** bisectable6 joined
[07:58] *** evalable6 joined
[07:58] *** statisfiable6 joined
[07:58] *** coverable6 joined
[07:58] *** reportable6 joined
[07:59] *** squashable6 joined
[07:59] *** quotable6 joined
[08:57] *** nativecallable6 joined
[08:57] *** committable6 joined
[08:57] *** releasable6 joined
[08:58] *** benchable6 joined
[08:58] *** bloatable6 joined
[08:58] *** greppable6 joined
[08:59] *** linkable6 joined
[09:48] <lizmat> Files=1351, Tests=117097, 285 wallclock secs (35.05 usr  9.79 sys + 4002.62 cusr 335.68 csys = 4383.14 CPU)
[09:57] *** unicodable6 joined
[09:57] *** notable6 joined
[09:58] *** shareable6 joined
[10:09] *** Xliff joined
[10:40] <Geth> ¦ rakudo/lizmat-show-precompilation: 0aaed91bfe | (Elizabeth Mattijsen)++ | 2 files
[10:40] <Geth> ¦ rakudo/lizmat-show-precompilation: Add "use show-precompilation" as a pragma
[10:40] <Geth> ¦ rakudo/lizmat-show-precompilation: 
[10:40] <Geth> ¦ rakudo/lizmat-show-precompilation: Activates the RAKUDO_PRECOMPILATION_PROGRESS environment variable,
[10:40] <Geth> ¦ rakudo/lizmat-show-precompilation: perhaps making this feature a little more rememberable / accessible.
[10:40] <Geth> ¦ rakudo/lizmat-show-precompilation: review: https://github.com/rakudo/rakudo/commit/0aaed91bfe
[10:40] <Geth> ¦ rakudo: lizmat++ created pull request #4746: Add "use show-precompilation" as a pragma
[10:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4746
[10:43] *** Xliff left
[11:10] <Geth> ¦ rakudo/lizmat-named-anywhere: 94590f6e55 | (Elizabeth Mattijsen)++ | 2 files
[11:10] <Geth> ¦ rakudo/lizmat-named-anywhere: Add "use named-anywhere" as a pragma
[11:10] <Geth> ¦ rakudo/lizmat-named-anywhere: 
[11:10] <Geth> ¦ rakudo/lizmat-named-anywhere: In an attempt to make the "use named arguments on the command line
[11:10] <Geth> ¦ rakudo/lizmat-named-anywhere: at any location" feature more rememberable and accessible.
[11:10] <Geth> ¦ rakudo/lizmat-named-anywhere: 
[11:10] <Geth> ¦ rakudo/lizmat-named-anywhere: Sets named-anywhere key in the %*SUB-MAIN-OPTS has if it already
[11:10] <Geth> ¦ rakudo/lizmat-named-anywhere: exists, or creates it in PROCESS:: with the named-anywhere key set
[11:10] <Geth> ¦ rakudo/lizmat-named-anywhere: in it.
[11:10] <Geth> ¦ rakudo/lizmat-named-anywhere: review: https://github.com/rakudo/rakudo/commit/94590f6e55
[11:10] <Geth> ¦ rakudo: lizmat++ created pull request #4747: Add "use named-anywhere" as a pragma
[11:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4747
[11:27] *** frost joined
[11:59] *** sourceable6 joined
[12:09] *** reportable6 left
[12:10] *** reportable6 joined
[12:19] *** frost left
[13:19] *** benchable6 left
[13:19] *** greppable6 left
[13:19] *** coverable6 left
[13:19] *** unicodable6 left
[13:19] *** shareable6 left
[13:19] *** committable6 left
[13:19] *** releasable6 left
[13:19] *** sourceable6 left
[13:19] *** quotable6 left
[13:19] *** tellable6 left
[13:19] *** reportable6 left
[13:19] *** evalable6 left
[13:19] *** linkable6 left
[13:19] *** notable6 left
[13:19] *** statisfiable6 left
[13:19] *** squashable6 left
[13:19] *** nativecallable6 left
[13:19] *** bisectable6 left
[13:19] *** bloatable6 left
[13:19] *** evalable6 joined
[13:20] *** releasable6 joined
[13:20] *** tellable6 joined
[13:20] *** bloatable6 joined
[13:20] *** unicodable6 joined
[13:20] *** benchable6 joined
[13:20] *** quotable6 joined
[13:20] *** greppable6 joined
[13:21] *** sourceable6 joined
[13:21] *** statisfiable6 joined
[13:22] *** bisectable6 joined
[13:22] *** linkable6 joined
[13:22] *** Xliff joined
[14:14] *** carlmasak joined
[14:14] <carlmasak> greetings, #raku-dev
[14:15] <lizmat> carlmasak o/
[14:20] <lizmat> so what's up in the far east ?
[14:20] *** committable6 joined
[14:21] *** squashable6 joined
[14:25] <carlmasak> the folks around here don't really "do" Christmas (except in a hilariously misappropriated kind of way), but they do practice Spring Festival. which started (in my case) about five hours ago \o/
[14:25] <lizmat> ah... good!
[14:25] <carlmasak> I foresee some nice coding sessions in my near future, as well as some more-than-decent food, and time with family
[14:26] <carlmasak> how are things in the, uh, middle-distance west?
[14:26] <lizmat> it feels like spring here, but it's very windy and still a tad too cold
[14:27] <carlmasak> I feel like the weather this week was very "not yet Spring Festival": rain, clouds, clouds with rain, rain with snow, clouds with rain and snow
[14:27] <lizmat> lockdown is being lifted while the number of young people with Covid in hospital is on the rise
[14:27] <lizmat> ah, yes, that feels familiar
[14:27] <lizmat> storm expected for tomorrow here  :-)
[14:27] <carlmasak> yes, I'm tracking Europe pretty closely. the numbers look... a bit wild
[14:27] <carlmasak> (pandemic/omicron, not storm)
[14:28] <lizmat> yeah  :-(
[14:28] <carlmasak> half of my family in Sweden, as well as some friends, either just got or just had omicron
[14:29] <lizmat> hopefully not too badly
[14:29] <carlmasak> no, seems like a heavy cold, just about
[14:29] <carlmasak> I'm assuming most of those were vaccinated a few times
[14:31] <lizmat> well, that's the thing, vaccination below 30 is still pretty low  :-(
[14:32] <carlmasak> I'm not surprised. both because of the game theory of it all, and because young people tend to come out of it alright
[14:32] <lizmat> except if they don't
[14:33] <carlmasak> right, 'course. just saying that playing the odds in their case does make some sense
[14:34] <carlmasak> it's a little bit selfish, but it's not irrational
[14:34] <lizmat> well, I'm just thinking about polio: "Years after recovery, post-polio syndrome may occur, with a slow development of muscle weakness similar to that which the person had during the initial infection"
[14:34] <lizmat> I hope we don't see something like that for Covid
[14:35] <carlmasak> I read something similar on Charlie Stross's blog, yes
[14:35] <carlmasak> it could happen
[14:36] <lizmat> yeah  :-(   and we already know there's a thing called "long covid"
[14:37] <carlmasak> we do
[14:38] <lizmat> well, on the brighter side: there's FOSDEM next Saturday, and I'm happy that my presentation has been recorded and uploaded :-)
[14:38] <carlmasak> ooh! tell me more? what's it about?
[14:39] <lizmat> https://fosdem.org/2022/schedule/track/raku/
[14:39] <lizmat> https://fosdem.org/2022/schedule/event/backpan/
[14:41] <carlmasak> neat
[14:41] <carlmasak> I've been thinking about something similar lately -- let's see if I can describe it
[14:42] <carlmasak> there's a level of all this where you just import/export between compilation units, and they're a bit isolated from each other in a good way. I call that level "modules", which works quite well with the Raku terminology
[14:43] <carlmasak> but then there's a level which incorporates that but adds the dimension of time/authors/versions. I call that level "packages", which is not an agreed-on term
[14:44] <carlmasak> briefly, I believe very few -- maybe zero -- languages get packages "right"
[14:44] <lizmat> yeah I think the META of a distribution should become more introspectable
[14:45] <lizmat> so, if a module is installed with a META giving an an auth:<zef:lizmat> and a :ver<0.0.14>
[14:45] <lizmat> then all use targets installed from that module should:
[14:46] <lizmat> a. be installed with that meta information embedded in their HOW (the .^ver and .^auth methods on the classes)
[14:47] <lizmat> b. any use of a target *without* qualification should automatically have the :ver and :auth added to their requirement
[14:47] <carlmasak> I think golang gets packages the least wrong of all the languages I know about. they do because they spent a really impressive effort thinking it through
[14:48] <lizmat> in a distribution with :ver<0.42> and :auth<zef:lizmat>, and use target referring to another use target from the same distribution, should have these added
[14:48] <lizmat> ok, need to be afk for linner&
[14:49] <carlmasak> I think packages, done right, could look closer to Git commits: immutable, globally unique, and completely reproducible
[14:50] <nine> Incidentally that's how precomp files are
[14:50] <carlmasak> nine! \o/
[14:51] <carlmasak> yes, I could imagine there are some right ideas in there
[14:54] <nine> carlmasak: I'd ask you how you are, but I've already read the answer in the history :)
[14:55] <carlmasak> heh. I'm fine indeed. more exactly, I'm on my first beer, and the night is (relatively) young
[14:56] <carlmasak> how're you, nine?
[14:57] <nine> I just came home from a week long snowboarding vacation, so couldn't be better :)
[14:57] <carlmasak> npm gets packages wrong, in a way that _has_ affected me: installing modules will automatically choose the newest possible, which is not "stable"/reproducible in the way I mean
[14:58] <carlmasak> nine: no broken thumbs? then it's indeed a good snowboarding vacation :D
[14:58] <nine> No, I'm a....a bit surprised, but I seem to have gotten away without any injuries at all this time :D
[14:59] <carlmasak> also, lockfiles seem to be a symptom of getting the reproducibility stuff wrong on a lower level
[14:59] <carlmasak> golang does without lockfiles, because their dependency system defaults to being reproducible
[15:00] <nine> Pick newest and get unreproducible results with constant breakages because developers suck at backwards compatibility or pin versions and get issues because developers suck at keeping dependencies up to date. Feels like a lose-lose.
[15:00] <carlmasak> no, I don't think so
[15:00] <carlmasak> "keeping dependencies up to date" should be a conscious move, not a thing forced on you by the package manager
[15:01] <carlmasak> the truth is, different projects have different preferences on that. it's a spectrum, of sorts
[15:03] <carlmasak> nine: if you haven't read rsc's series on this, I highly recommend it. it's... opinionated, but I find the opinions interesting
[15:04] <nine> It's also influenced by developer culture. It almost worked in Perl where pinning just isn't a thing and backwards compat was usually maintained. For most time at work we've gotten by with installing latest but at even there we've switched to installing from an internal repository
[15:05] <carlmasak> yeah
[15:06] <carlmasak> I think I'm just very interested in what the OOP world calls "the fragile base class problem". to me, when you see the extent of that problem, it basically ruins the idea of class inheritance forever. and a very similar situation holds between package dependencies
[15:08] <carlmasak> the reason Liskov substitutability is hard is that all those laws/properties in our APIs are implicit in the code; they maybe don't change often, but when they do, they mess things up. I haven't seen a good solution to that, except "put the decision to upgrade squarely in the consumer's hands"
[15:09] <carlmasak> semantic versioning... helps, I guess. but it's also not a perfect solution. there's simply no way to track those implicit laws/invariants
[15:12] <nine> IMHO the underlying problem is that it all depends on humans. We cannot keep a non-trivial codebase at once in our heads lest have a fully accurate model of how it will behave, so we can never judge accurately what effects a change will have.
[15:14] <carlmasak> the thing we expect to get out of abstraction is exactly that, the luxury of not caring about all the details
[15:15] <carlmasak> on the one hand, it's super-comfortable to just say "I want X, Y, and Z", and your node_modules fills up with literally megabytes of other people's source code that just happen to solve your problems
[15:16] <carlmasak> on the other hand, you've taken on a definite risk by not caring. I've lost count of how many left-pad incidents we're up to at this point
[15:16] <carlmasak> both of these perspectives can be true at once
[15:19] <carlmasak> but I think that they're easier to reconcile if you also have reproducible builds (which means no spontaneous upgrading of dependencies)
[15:20] *** reportable6 joined
[15:20] *** notable6 joined
[15:21] *** shareable6 joined
[15:22] <carlmasak> maybe the analogy between Git commits and immutable/reproducible packages is not so incidental -- maybe it's more or less literal
[15:22] *** nativecallable6 joined
[15:25] <ugexe> we use https://github.com/dependabot at work
[15:25] <carlmasak> if I check out the same Git commit, I get _exactly_ the same files. if I build the same package (and its dependencies), I get _exactly_ the same target files
[15:26] <carlmasak> I think dependabot makes sense. it tells people when an upgrade is advisable, and those who have a vested interest in safety over stability tend to heed that
[15:27] <carlmasak> (by the way, does anyone else feel that "prototype pollution" is the "SQL injection attack" of the JavaScript universe?)
[15:50] *** Geth left
[15:51] *** Geth joined
[15:51] *** RakuIRCLogger__ left
[15:52] *** andinus left
[15:53] *** andinus` joined
[16:55] *** carlmasak left
[17:00] *** carlmasak joined
[17:05] *** carlmasak left
[17:07] *** carlmasak joined
[17:22] *** coverable6 joined
[17:29] *** carlmasak left
[18:07] *** reportable6 left
[18:51] *** AlexDaniel joined
[19:03] *** CIAvash joined
[19:09] *** reportable6 joined
[19:19] *** AlexDaniel left
[19:23] *** CIAvash left
[19:52] <Geth> ¦ roast: rafaelschipiura++ created pull request #789: 1.Num doesn't produce Int.
[19:52] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/789
[19:54] <Geth> ¦ roast: 495054fde1 | (Rafael Schipiura)++ (committed using GitHub Web editor) | S02-literals/numeric.t
[19:54] <Geth> ¦ roast: 1.Num doesn't produce Int.
[19:54] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/495054fde1
[19:54] <Geth> ¦ roast: 8436273b77 | MasterDuke17++ (committed using GitHub Web editor) | S02-literals/numeric.t
[19:54] <Geth> ¦ roast: Merge pull request #789 from rafaelschipiura/patch-1
[19:54] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8436273b77
[20:27] *** linkable6 left
[20:27] *** evalable6 left
[20:27] *** evalable6 joined
[22:29] <tonyo> .tell carlmasak if you haven't, check out haskell's package management.  go's isn't great, there are a lot of problems with the way go.mod works, particularly when you're doing stuff inside of containers.  haskell's is
[22:29] <tellable6> tonyo, I'll pass your message to carlmasak
[22:29] <tonyo> .tell carlmasak pretty great but also v picky
[22:29] <tellable6> tonyo, I'll pass your message to carlmasak
