[00:05] <Geth> ¦ roast: 404b5649ca | (David Warring)++ | S26-documentation/why-trailing.t
[00:05] <Geth> ¦ roast: add failing test for #4866
[00:05] <Geth> ¦ roast: 
[00:05] <Geth> ¦ roast: the reason this issue wasn't being detected is that calling WHY on
[00:05] <Geth> ¦ roast: the declarand fixes the Pod link back to the declarand. Add an earlier
[00:05] <Geth> ¦ roast: check on $=pod, which exposes the issue.
[00:05] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/404b5649ca
[00:06] <Geth> ¦ roast: 404b5649ca | (David Warring)++ | S26-documentation/why-trailing.t
[00:06] <Geth> ¦ roast: add failing test for #4866
[00:06] <Geth> ¦ roast: 
[00:06] <Geth> ¦ roast: the reason this issue wasn't being detected is that calling WHY on
[00:06] <Geth> ¦ roast: the declarand fixes the Pod link back to the declarand. Add an earlier
[00:06] <Geth> ¦ roast: check on $=pod, which exposes the issue.
[00:06] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/404b5649ca
[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[00:15] *** Geth left
[00:15] *** Geth joined
[00:20] *** Geth left
[00:20] *** Geth joined
[00:27] *** [Coke]_ joined
[00:29] *** [Coke] left
[00:30] *** [Coke]_ is now known as [Coke]
[01:53] *** coverable6 left
[01:53] *** greppable6 left
[01:53] *** sourceable6 left
[01:53] *** bloatable6 left
[01:53] *** notable6 left
[01:53] *** benchable6 left
[01:53] *** quotable6 left
[01:53] *** committable6 left
[01:53] *** shareable6 left
[01:53] *** releasable6 left
[01:53] *** statisfiable6 left
[01:53] *** unicodable6 left
[01:53] *** bisectable6 left
[01:53] *** tellable6 left
[01:53] *** nativecallable6 left
[01:53] *** evalable6 left
[01:53] *** reportable6 left
[01:53] *** linkable6 left
[01:54] *** coverable6 left
[01:54] *** greppable6 left
[01:54] *** sourceable6 left
[01:54] *** bloatable6 left
[01:54] *** notable6 left
[01:54] *** benchable6 left
[01:54] *** quotable6 left
[01:54] *** committable6 left
[01:54] *** shareable6 left
[01:54] *** releasable6 left
[01:54] *** statisfiable6 left
[01:54] *** unicodable6 left
[01:54] *** bisectable6 left
[01:54] *** tellable6 left
[01:54] *** nativecallable6 left
[01:54] *** evalable6 left
[01:54] *** reportable6 left
[01:54] *** linkable6 left
[01:54] *** quotable6 joined
[01:54] *** evalable6 joined
[01:54] *** nativecallable6 joined
[01:54] *** linkable6 joined
[01:54] *** releasable6 joined
[01:54] *** bisectable6 joined
[01:54] *** unicodable6 joined
[01:54] *** statisfiable6 joined
[01:54] *** committable6 joined
[01:55] *** notable6 joined
[01:55] *** greppable6 joined
[01:55] *** bloatable6 joined
[01:56] *** tellable6 joined
[01:56] *** benchable6 joined
[01:56] *** shareable6 joined
[01:56] *** reportable6 joined
[01:56] *** coverable6 joined
[01:56] *** sourceable6 joined
[03:32] *** frost joined
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[07:36] <lizmat> Files=1353, Tests=117134, 290 wallclock secs (36.58 usr  9.93 sys + 4043.11 cusr 335.21 csys = 4424.83 CPU)
[07:39] <Geth> ¦ rakudo/CATCH-at-start: 83 commits pushed by (Elizabeth Mattijsen)++, (Daniel Green)++, (Nick Logan)++, (Vadim Belman)++, (Justin DeVuyst)++, MasterDuke17++
[07:39] <Geth> ¦ rakudo/CATCH-at-start: review: https://github.com/rakudo/rakudo/compare/64d397da9efd...5322384a9062
[07:40] <Geth> ¦ rakudo: ce86a7dbdf | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files
[07:40] <Geth> ¦ rakudo: Update the meta info of the core (#4856)
[07:40] <Geth> ¦ rakudo: 
[07:40] <Geth> ¦ rakudo: - in Compiler, auth to Yet Another Society, the official name of TPF
[07:40] <Geth> ¦ rakudo: - in install-core-dist.raku, use the info from Compiler
[07:40] <Geth> ¦ rakudo: 
[07:40] <Geth> ¦ rakudo: Mostly because it felt better to have the info in the META match
[07:40] <Geth> ¦ rakudo: what is in Compiler, and to be more specific in Compiler now that
[07:40] <Geth> ¦ rakudo: there is no Perl in the name anymore.
[07:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ce86a7dbdf
[07:41] *** linkable6 left
[07:41] <Geth> ¦ rakudo: add767e22d | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 6 files
[07:41] <Geth> ¦ rakudo: Rename CompUnit::PrecompilationStore::File -> FileSystem
[07:41] <Geth> ¦ rakudo: 
[07:41] <Geth> ¦ rakudo: To make naming consistent with CompUnit::Repository::FileSystem
[07:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/add767e22d
[07:42] <Geth> ¦ rakudo: ca5cfed826 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/bootstrap.c/BOOTSTRAP.nqp
[07:42] <Geth> ¦ rakudo: Turn some else/if sequences into elsifs in binder
[07:42] <Geth> ¦ rakudo: 
[07:42] <Geth> ¦ rakudo: Probably not very important, but since the binder is pretty hot code
[07:42] <Geth> ¦ rakudo: I thought it might be worthwhile.
[07:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ca5cfed826
[07:43] <Geth> ¦ rakudo: 0e55e9ff3d | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/World.nqp
[07:43] <Geth> ¦ rakudo: Do JS backend check only once
[07:43] <Geth> ¦ rakudo: 
[07:43] <Geth> ¦ rakudo: Use compile time preprocessing directives, nine++
[07:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0e55e9ff3d
[07:44] <Geth> ¦ rakudo: 36bdd01aae | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files
[07:44] <Geth> ¦ rakudo: Make compiler config related info more constant
[07:44] <Geth> ¦ rakudo: 
[07:44] <Geth> ¦ rakudo: For better performance
[07:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/36bdd01aae
[07:44] *** linkable6 joined
[07:45] <Geth> ¦ rakudo/lizmat-Failure-coercer: 17 commits pushed by (Elizabeth Mattijsen)++, (Justin DeVuyst)++, (Daniel Green)++, MasterDuke17++
[07:45] <Geth> ¦ rakudo/lizmat-Failure-coercer: review: https://github.com/rakudo/rakudo/compare/40aaf05e763d...74d2004fa1e1
[07:45] <Geth> ¦ rakudo: 636c805e30 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/CompUnit/PrecompilationRepository.pm6
[07:45] <Geth> ¦ rakudo: Fix unneeded dependency check (#4901)
[07:45] <Geth> ¦ rakudo: 
[07:45] <Geth> ¦ rakudo: Commit 199888abedfe843996 in March 2020 borked the setting of the
[07:45] <Geth> ¦ rakudo: repo-id.  This caused unneeded dependency checking for installed
[07:45] <Geth> ¦ rakudo: modules, and a slowdown of e.g. loading NativeCall of about 80 msecs.
[07:45] <Geth> ¦ rakudo: 
[07:45] <Geth> ¦ rakudo: Now, the slowdown will only occur the first time after installation,
[07:45] <Geth> ¦ rakudo: when the repo-id is now updated correctly so that a subsequent loading
[07:45] <Geth> ¦ rakudo: will not have to do dependency checks.
[07:45] <Geth> ¦ rakudo: 
[07:45] <Geth> ¦ rakudo: Spotted by nine++ after looking into https://github.com/rakudo/rakudo/issues/4900
[07:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/636c805e30
[07:46] *** linkable6 left
[07:46] <Geth> ¦ rakudo: bf979d081e | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/CompUnit/Loader.pm6
[07:46] <Geth> ¦ rakudo: Reinstate CATCH versus LEAVE
[07:46] <Geth> ¦ rakudo: 
[07:46] <Geth> ¦ rakudo: Alhough the code with LEAVE is much simpler and clearer, it *does*
[07:46] <Geth> ¦ rakudo: impose the overhead of having to execute a phaser on the most common
[07:46] <Geth> ¦ rakudo: execution path.  And since both a CATCH block or a LEAVE phaser will
[07:46] <Geth> ¦ rakudo: inhibit inlining of a block, from a performance point of view a
[07:46] <Geth> ¦ rakudo: CATCH is better, as that will only be executed when something actually
[07:46] <Geth> ¦ rakudo: goes wrong (which hopefully is not the most common execution path).
[07:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bf979d081e
[07:47] *** linkable6 joined
[08:06] <Geth> ¦ rakudo: 9f8eea4161 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 23 files
[08:06] <Geth> ¦ rakudo: Put CATCH blocks at the start of the scope
[08:06] <Geth> ¦ rakudo: 
[08:06] <Geth> ¦ rakudo: CATCH blocks affect the **entire** scope they're in.  So they should
[08:06] <Geth> ¦ rakudo: be as close to the start of the scope they're in, so that you realize
[08:06] <Geth> ¦ rakudo: that they can fire well before you think they'd might fire.
[08:06] <Geth> ¦ rakudo: 
[08:06] <Geth> ¦ rakudo: This did not change the Rakudo::Internals::JSON class, as that is
[08:06] <Geth> ¦ rakudo: being kept in sync with JSON::Fast.
[08:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9f8eea4161
[08:09] <Geth> ¦ rakudo/lizmat-Failure-coercer: 4 commits pushed by (Elizabeth Mattijsen)++
[08:09] <Geth> ¦ rakudo/lizmat-Failure-coercer: 636c805e30 | Fix unneeded dependency check (#4901)
[08:09] <Geth> ¦ rakudo/lizmat-Failure-coercer: bf979d081e | Reinstate CATCH versus LEAVE
[08:09] <Geth> ¦ rakudo/lizmat-Failure-coercer: 9f8eea4161 | Put CATCH blocks at the start of the scope
[08:09] <Geth> ¦ rakudo/lizmat-Failure-coercer: 5c30354971 | Merge branch 'master' into lizmat-Failure-coercer
[08:09] <Geth> ¦ rakudo/lizmat-Failure-coercer: review: https://github.com/rakudo/rakudo/compare/74d2004fa1e1...5c3035497126
[08:11] <Geth> ¦ rakudo: 20fd4f0454 | (Daniel Sockwell)++ (committed using GitHub Web editor) | 2 files
[08:11] <Geth> ¦ rakudo: Allow optional : on LHS of signature binding declaration
[08:11] <Geth> ¦ rakudo: 
[08:11] <Geth> ¦ rakudo: When using signature binding during variable declaration, the normal
[08:11] <Geth> ¦ rakudo: syntax is
[08:11] <Geth> ¦ rakudo: 
[08:11] <Geth> ¦ rakudo:     my ($a, $b) := (42, 47);
[08:11] <Geth> ¦ rakudo: 
[08:11] <Geth> ¦ rakudo: <…commit message has 80 more lines…>
[08:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/20fd4f0454
[08:12] <Geth> ¦ rakudo: 175e716fcf | (Daniel Sockwell)++ (committed using GitHub Web editor) | src/core.c/Any-iterable-methods.pm6
[08:12] <Geth> ¦ rakudo: Make &[max] and &[min] return RHS for ties
[08:12] <Geth> ¦ rakudo: 
[08:12] <Geth> ¦ rakudo: &[max] and &[min] both have List associativity, which means that
[08:12] <Geth> ¦ rakudo: 
[08:12] <Geth> ¦ rakudo:    $a max $b max $c
[08:12] <Geth> ¦ rakudo: 
[08:12] <Geth> ¦ rakudo: should be the same as
[08:12] <Geth> ¦ rakudo: <…commit message has 18 more lines…>
[08:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/175e716fcf
[08:14] <Geth> ¦ rakudo: 50025c1a48 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | lib/CompUnit/Repository/Staging.rakumod
[08:14] <Geth> ¦ rakudo: Add CUR::Staging.candidates method
[08:14] <Geth> ¦ rakudo: 
[08:14] <Geth> ¦ rakudo: The candidates should *also* take into account any candidates from
[08:14] <Geth> ¦ rakudo: the CURI repository it is shadowing.  Spotted by ugexe++
[08:14] <Geth> ¦ rakudo: 
[08:14] <Geth> ¦ rakudo: Also add :replace attribute to CURS.  When specified, the CURS will
[08:14] <Geth> ¦ rakudo: completely replace the parent CURI in both the registration by name,
[08:15] <Geth> ¦ rakudo: as well as in the $*REPO chain.  Calling .self-destruct will restore the
[08:15] <Geth> ¦ rakudo: original CURI by name and in the $*REPO chain.
[08:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/50025c1a48
[08:16] <Geth> ¦ rakudo: 1c04360de3 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/traits.pm6
[08:16] <Geth> ¦ rakudo: Make handles on attribute of type object more natural
[08:16] <Geth> ¦ rakudo: 
[08:16] <Geth> ¦ rakudo: Instead of dying with: "Cannot look up attributes in a Foo type
[08:16] <Geth> ¦ rakudo: object".  The error message is confusing, take this example:
[08:16] <Geth> ¦ rakudo: 
[08:16] <Geth> ¦ rakudo:     class A { has Int $.foo handles <Str> }; (my A $a).Str
[08:16] <Geth> ¦ rakudo: 
[08:16] <Geth> ¦ rakudo: <…commit message has 13 more lines…>
[08:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c04360de3
[09:06] <lizmat> notable6: weekly
[09:06] <notable6> lizmat, 8 notes: https://gist.github.com/8c78dfc383f840073faa9658682c8e29
[09:35] <lizmat> notable6: weekly reset
[09:35] <notable6> lizmat, Moved existing notes to “weekly_2022-04-25T09:35:15Z”
[09:41] *** evalable6 left
[09:41] *** linkable6 left
[09:41] *** linkable6 joined
[09:43] *** evalable6 joined
[09:46] <Geth> ¦ rakudo: 51c00fddd3 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 46 files
[09:46] <Geth> ¦ rakudo: Introduce (Exception|Cool).Failure coercer
[09:46] <Geth> ¦ rakudo: 
[09:46] <Geth> ¦ rakudo: The main reason for this, is to reduce the bytecode of scopes where
[09:46] <Geth> ¦ rakudo: a Failure needs to be returned.  This reduces the bytecode by 12 bytes
[09:46] <Geth> ¦ rakudo: for every change from "Failure.new(foo)" to "foo.Failure", making
[09:46] <Geth> ¦ rakudo: these scopes more likely to get inlined.
[09:47] <Geth> ¦ rakudo: 
[09:47] <Geth> ¦ rakudo: <…commit message has 5 more lines…>
[09:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/51c00fddd3
[09:48] <Geth> ¦ problem-solving/JJ-patch-1: 84e555ee96 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | .github/CODEOWNERS
[09:48] <Geth> ¦ problem-solving/JJ-patch-1: Remove self as owner of that section
[09:48] <Geth> ¦ problem-solving/JJ-patch-1: 
[09:48] <Geth> ¦ problem-solving/JJ-patch-1: I can no longer claim responsibility for the documentation repo *de facto*. It's only sensible to remove myself from here too.
[09:48] <Geth> ¦ problem-solving/JJ-patch-1: review: https://github.com/Raku/problem-solving/commit/84e555ee96
[09:48] <Geth> ¦ problem-solving: JJ++ created pull request #322: Remove self as owner of that section
[09:48] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/322
[10:07] *** discord-raku-bot left
[10:07] *** discord-raku-bot joined
[10:42] *** |Tux| joined
[10:42] *** Tux__ joined
[10:46] *** Tux__ left
[11:20] *** londoed_ left
[11:20] *** londoed_ joined
[11:54] *** londoed_ left
[11:54] *** londoed_ joined
[12:08] *** reportable6 left
[12:10] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/04/25/2022-16-7-complainrelease/
[12:10] *** reportable6 joined
[12:58] *** frost left
[13:10] *** frost joined
[13:20] *** Altai-man joined
[14:02] <|Tux|> Rakudo v2022.04-18-g51c00fddd (v6.d) on MoarVM 2022.04-1-g4e2eab056
[14:02] <|Tux|> csv-test-xs-20      0.405 -  0.407
[14:02] <|Tux|> csv-ip5xs           0.784 -  0.789
[14:02] <|Tux|> test-t --race       0.840 -  0.938
[14:02] <|Tux|> test-t              1.394 -  1.558
[14:02] <|Tux|> csv-parser          3.554 -  3.927
[14:02] <|Tux|> csv-ip5xs-20        4.910 -  4.947
[14:02] <|Tux|> test-t-20 --race    6.374 -  8.199
[14:02] <|Tux|> test                6.663 -  6.679
[14:02] <|Tux|> test-t-20          21.120 - 21.427
[14:09] *** Altai-man left
[14:09] *** Altai-man joined
[14:09] *** japhb left
[14:13] *** dogbert11 joined
[14:15] *** dogbert17 left
[14:18] *** frost left
[14:38] *** japhb joined
[14:52] *** sivoais left
[15:03] *** sivoais joined
[15:45] *** [Coke] left
[15:47] *** [Coke] joined
[17:10] *** camelia left
[17:10] *** nine left
[17:12] *** nine joined
[17:16] *** nine left
[17:16] *** camelia joined
[17:17] *** nine joined
[17:44] *** Altai-man left
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[19:14] <nine> Looks like we're gonna need a point release :/
[19:17] <[Coke]> uhoh
[19:32] * bartolin just saw test failures in S32-num/stress.t ("Numeric underflow" after 1500 of 3500 tests)
[19:37] <lizmat> confirmed
[19:40] <bartolin> that seems to be from https://github.com/rakudo/rakudo/commit/6f6fd1f76f
[19:40] <lizmat> test 2 dies, but oddly enough. if you take out test #1 it passed
[19:41] * lizmat builds
[19:43] <lizmat> indeed, with that commit reverted, the test passes
[19:45] <MasterDuke> huh (also, it should now use the new .Failure on the exception)
[19:46] <MasterDuke> what is the problematic value?
[19:46] <lizmat> not sure... if you reverse the test, the test passes, so I don't think it's that cut and clear
[19:47] * lizmat goes afk&
[19:52] <bartolin> m: say -10**(2*-10)
[19:52] <camelia> rakudo-moar 530e17848: OUTPUT: «-1e-20␤»
[19:54] <bartolin> If I'm not mistaken that's where current HEAD gives a "Numeric overflow"
[20:00] <bartolin> -10**(-19) works, but -10**(-20) blows up. -10**(-20.1) works, though
[20:05] <bartolin> (but scratch the last part, that's a different multi sub)
[20:07] <MasterDuke> hm. wonder why i thought UINT64_UPPER was the limit where underflow was going to happen
[20:10] <MasterDuke> m: say -10**(-323)
[20:10] <camelia> rakudo-moar 530e17848: OUTPUT: «-1e-323␤»
[20:10] <MasterDuke> m: say -10**(-324)
[20:10] <camelia> rakudo-moar 530e17848: OUTPUT: «Numeric underflow␤  in block <unit> at <tmp> line 1␤␤»
[20:11] <MasterDuke> afk for a bit, might not be able to get back to this until tomorrow. bartolin++ for the spot
[22:54] *** MasterDuke left
