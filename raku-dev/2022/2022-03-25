[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[02:41] <Geth> ¦ rakudo: hythm7++ created pull request #4831: Move CompUnit::Repository::Staging into core

[02:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4831

[06:08] *** reportable6 left
[06:10] *** reportable6 joined
[09:01] *** sena_kun left
[09:03] *** sena_kun joined
[09:29] <lizmat> Files=1351, Tests=117115, 299 wallclock secs (35.29 usr 10.15 sys + 4110.57 cusr 354.02 csys = 4510.03 CPU)

[10:10] *** evalable6 left
[10:10] *** linkable6 left
[10:12] *** evalable6 joined
[10:41] *** sena_kun left
[10:42] *** sena_kun joined
[10:45] <Geth> ¦ rakudo: 430214ba58 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationStore/File.pm6

[10:45] <Geth> ¦ rakudo: Streamline file rename logic

[10:45] <Geth> ¦ rakudo: 

[10:45] <Geth> ¦ rakudo: - don't use a named block for renaming logic, make a sub for that

[10:45] <Geth> ¦ rakudo: - don't use CATCH blocks

[10:45] <Geth> ¦ rakudo: - don't do anything special for Windows, just always try 10 times

[10:45] <Geth> ¦ rakudo: - throw Failure directly rather then depending on it being sunk

[10:45] <Geth> ¦ rakudo: - make sure Failures are disabled to prevent warnings on DESTROY

[10:45] <Geth> ¦ rakudo: - rename some variables to indicate their function

[10:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/430214ba58

[10:57] <nine> lizmat: why did you extend that Windows workaround to sane platforms?

[10:57] <lizmat> because there is zero extra cost ?

[10:57] <lizmat> instead of checking whether we're on Windows

[10:57] <lizmat> we check if the rename worked, and be done with that

[10:58] <nine> But there is no reason to try again on non-Windows

[11:08] <Geth> ¦ rakudo: e82e114714 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationStore/File.pm6

[11:08] <Geth> ¦ rakudo: Don't bother retrying if you're not on Windows

[11:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e82e114714

[11:10] <lizmat> nine ^^

[11:12] *** linkable6 joined
[11:39] <lizmat> am I reading this correctly: https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/Loader.pm6#L44

[11:40] <lizmat> looks like JVM doesn't support loading byte code from an IO::Handle ?

[11:40] <lizmat> shouldn't calling this not die then on the JVM instead of just returning an empty CompUnit::Handle ?

[11:51] <nine> It should. Just hasn't caused issues because we take the right path in the caller: https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/PrecompilationRepository.pm6#L86

[11:52] <nine> A more elegant solution would be to have load-precompilation-file on JVM just slurp the rest of the file handle and pass the buffer to loadbytecodebuffer

[12:07] *** reportable6 left
[12:28] <Geth> ¦ rakudo: 530e178484 | (Elizabeth Mattijsen)++ | 2 files

[12:28] <Geth> ¦ rakudo: Streamline CompUnit::Loader

[12:28] <Geth> ¦ rakudo: 

[12:28] <Geth> ¦ rakudo: - more precise typing

[12:28] <Geth> ¦ rakudo: - better named variables

[12:28] <Geth> ¦ rakudo: - handle load-precompilation-file(IO::Handle:D) on the JVM backend

[12:28] <Geth> ¦ rakudo: - remove special JVM casing in CompUnit::Precompilation::Repository

[12:28] <Geth> ¦ rakudo:   as it is no longer needed

[12:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/530e178484

[12:41] *** Altai-man joined
[12:57] *** linkable6 left
[13:05] *** ggoebel_ left
[13:17] *** lizmat_ joined
[13:17] *** TempIRCLogger__ joined
[13:18] *** RakuIRCLogger__ left
[13:18] *** TempIRCLogger left
[13:18] *** Geth left
[13:19] *** lizmat left
[13:19] *** lizmat_ left
[13:20] *** lizmat joined
[13:20] *** Geth joined
[13:54] *** Altai-man left
[13:56] *** Altai-man joined
[14:08] *** reportable6 joined
[14:27] *** ggoebel_ joined
[14:41] *** ggoebel_ left
[15:58] *** linkable6 joined
[16:34] *** linkable6 left
[16:37] *** linkable6 joined
[18:00] *** Altai-man left
[18:08] *** reportable6 left
[18:10] *** reportable6 joined
[18:15] *** [Coke] left
[18:38] *** [Coke] joined
[18:54] *** ggoebel_ joined
[19:22] *** squashable6 left
[19:24] *** squashable6 joined
[19:24] *** squashable6 left
[19:26] *** squashable6 joined
[20:10] <lizmat> so, the "Need to re-check dependencies" for modules in the "core" repo, for NativeCall costs about 50 msecs (out of total of 270 msecs needed to load NativeCall)

[22:15] *** Xliff joined
[22:18] *** melezhik joined
[22:36] *** melezhik left
