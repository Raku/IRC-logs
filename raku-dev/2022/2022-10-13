[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[01:27] *** frost joined
[01:35] *** masukomi joined
[01:39] *** frost20 joined
[01:39] <masukomi> I've got a proposal for a wee little method to add to IO::Path I'd like a .stem method that returns the basename without the extension (stem seems to be the least ambiguous term i've found for this). So, calling .stem on an IO::Path of "/foo/bar/baz.txt" would return "baz"   Why? Determining the "stem" seems to be something I end up doing frequently in every language I touch.  mentioning it here, because that's hat the

[01:39] <masukomi>  contributing guide told me to do ;) 

[01:39] <tellable6> hey masukomi, you have a message: https://gist.github.com/0614a9770ec2db790a4380160b2e0db3

[01:42] <masukomi> um. the "whateverable" bot just gave me this in response to my proposal and i have no idea what it's on about, but wonder if maybe it's something to do with the fact that Path is defined in Path.pm6..... Very confused: "2016-01-11T10:31:54Z #perl6 <brrt> masukomi: i'm sorry for not responding earlier; do you mean of perl6? if so, the answer (unfortunately) is no, not yet; the other answer is, with a special compunitrepo, this

[01:42] <masukomi>  should be entirely feasible (e.g. the zip-archive-starting-with-an-executable trick)"

[01:42] *** frost left
[01:48] <tbrowder> masukomi: see module IO::Stem

[01:49] <masukomi> huh. well that's nice. but at the same time, that sounds like evidence of the value of this being a builtin

[01:52] <masukomi> side note: i really like the simple solution you used there 

[02:21] *** masukomi left
[02:26] *** masukomi joined
[02:33] *** squashable6 left
[02:33] *** squashable6 joined
[03:42] *** masukomi left
[03:49] *** masukomi joined
[03:59] *** masukomi left
[05:03] *** evalable6 left
[05:03] *** quotable6 left
[05:03] *** notable6 left
[05:03] *** benchable6 left
[05:03] *** linkable6 left
[05:03] *** coverable6 left
[05:03] *** tellable6 left
[05:03] *** shareable6 left
[05:03] *** squashable6 left
[05:03] *** bisectable6 left
[05:03] *** committable6 left
[05:03] *** reportable6 left
[05:03] *** sourceable6 left
[05:03] *** statisfiable6 left
[05:03] *** unicodable6 left
[05:03] *** nativecallable6 left
[05:03] *** greppable6 left
[05:03] *** bloatable6 left
[05:03] *** releasable6 left
[05:03] *** quotable6 joined
[05:04] *** unicodable6 joined
[05:04] *** shareable6 joined
[05:04] *** benchable6 joined
[05:04] *** bisectable6 joined
[05:05] *** bloatable6 joined
[05:05] *** tellable6 joined
[05:05] *** nativecallable6 joined
[05:05] *** squashable6 joined
[05:05] *** reportable6 joined
[05:05] *** releasable6 joined
[05:05] *** notable6 joined
[05:05] *** linkable6 joined
[05:05] *** statisfiable6 joined
[05:06] *** evalable6 joined
[05:06] *** coverable6 joined
[05:06] *** committable6 joined
[05:06] *** greppable6 joined
[05:06] *** sourceable6 joined
[05:16] *** Xliff left
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[07:08] <lizmat> masukomi: see also https://github.com/rakudo/rakudo/pull/5031

[07:08] <tellable6> lizmat, I'll pass your message to masukomi

[09:29] *** sena_kun joined
[09:48] *** frost20 left
[11:18] *** AlexDaniel left
[11:18] *** crystalfrost[m] left
[11:18] *** CIAvash left
[11:26] *** AlexDaniel joined
[11:42] *** Xliff joined
[11:44] <Xliff> Announcing the return off... 

[11:44] *** CIAvash joined
[11:44] *** crystalfrost[m] joined
[11:46] <Xliff> P6-GLib suite timing statistics for Raku 2022.07.65.gfeb.04.dbe.9

[11:46] <Xliff> Total number of projects: 33 (483858 loc)

[11:46] <Xliff> Total non-parallel compile times: 8847.840 (268.116 avg)

[11:46] <Xliff> Total parallel compile times: 1569.956 (47.574 avg) 5.636x speedup

[11:47] <lizmat> ah?  that's good news, right ?

[11:47] <lizmat> 5.6x speedup  :-)

[11:47] <lizmat> any idea what changed ?

[12:08] *** reportable6 left
[12:08] *** reportable6 joined
[12:33] <Xliff> lizmat: Nope. I just got my environment back to a state where Raku doesn't take twice as long to precompile as normal.

[12:34] <Xliff> Turns out something in /usr/local/lib was poisoning my entire system.

[12:34] <tbrowder> lizmat: tn

[12:35] <lizmat> Xliff: aha !  ok  *phew*

[12:35] <tbrowder> thnx for reminder. hope we see that in core soon

[12:35] <Xliff> lizmat: non-parallel times could use a diet... but these are in line with results I've received this year.

[12:38] <lizmat> tbrowder: the PR is closed atm

[12:41] *** masukomi joined
[12:51] *** Altai-man joined
[12:55] *** sena_kun left
[13:11] *** Altai-man left
[13:12] *** Altai-man joined
[13:13] <[Coke]> Xliff++

[13:48] *** vrurg left
[13:49] *** vrurg joined
[14:01] *** Altai-man left
[14:01] *** masukomi left
[14:01] *** Xliff left
[14:01] *** crystalfrost[m] left
[14:02] *** Xliff joined
[14:02] *** Altai-man joined
[14:06] *** crystalfrost[m] joined
[14:37] <Xliff> Anyone know the current status on RakuAST?

[14:40] <japhb> Xliff: The people who feel comfortable working on it are all super busy right now.  :-(  We're trying to convince more people to work on it, but ...

[14:40] <japhb> We did approve in our last RSC meeting merging RakuAST-in-progress into main, at least.

[14:41] <japhb> (To prevent bitrot, get a little more attention, and lower the contribution bar)

[14:44] <Xliff> japhb: If I knew at all what was necessary, I'd offer to help, but I have been following, and I don't know half of the things going on there.

[14:44] <lizmat> I assume this will be discussed at the next RSC meeting, which I will also be able to attend next Sat

[15:03] <tbrowder> lizamat: what should be the proper step for reopening the "stem" issue?

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: 567dc02e3a | (Elizabeth Mattijsen)++ | 2 files

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: Add .stem and .suffix methods to IO::Patyh for 6.e

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: 

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: - stem: anything in basename before first ".", basename if no "."

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: - suffix: anything in basename after first ".", "" if no "."

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: review: https://github.com/rakudo/rakudo/commit/567dc02e3a

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: 1e63cf1993 | (Elizabeth Mattijsen)++ | src/core.e/IO/Path.pm6

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: Remove suffix, adapt stem

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: 

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: Suffix we basically already have, with the "extension" method.

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: 

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: Adapted "stem" to take the number of extension levels to remove.

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: By default all, * and Inf accepted as arguments.

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: 

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix:     say "foo/bar.tar.gz".IO.stem;    # bar

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix:     say "foo/bar.tar.gz".IO.stem(1);  # bar.tar

[15:05] <Geth> ¬¶ rakudo/lizmat-stem-suffix: review: https://github.com/rakudo/rakudo/commit/1e63cf1993

[15:05] <lizmat> It's open again  :-)

[15:09] <vrurg> Xliff: there is a kind of README on RakuAST branch with a list of tasks. Some are simple enough to get a kick-start.

[15:27] *** japhb left
[15:34] *** japhb joined
[16:22] <[Coke]> https://github.com/rakudo/rakudo/blob/rakuast/src/Raku/ast/README.md

[16:22] <[Coke]> (it's close to where the code goes)

[16:43] *** Altai-man left
[18:01] *** masukomi joined
[18:06] *** sena_kun joined
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:34] <masukomi> as per contribution guide, reposting proposal due to no üëç/üëé response:  I'd like a .stem method to IO::Path that returns the basename without the extension (stem seems to be the least ambiguous term i've found for this). So, calling .stem on an IO::Path of "/foo/bar/baz.txt" would return "baz". 

[18:34] <tellable6> 2022-10-13T07:08:03Z #raku-dev <lizmat> masukomi: see also https://github.com/rakudo/rakudo/pull/5031

[18:35] <masukomi> tbrowder pointed to their IO::Stem package which does just that, and that strikes me as supporting evidence for the need. 

[18:36] <masukomi> bot just pointed me to a PR for it so nevermind! also Thanks Liz! 

[18:51] *** hythm joined
[19:27] *** masukomi left
[19:43] *** [Coke]__ joined
[19:46] *** [Coke] left
[19:47] *** [Coke]__ is now known as [Coke]

[20:09] *** masukomi joined
[20:17] *** sena_kun left
[20:18] *** sena_kun joined
[21:58] *** epony left
[21:59] *** epony joined
[22:01] *** sena_kun left
[22:40] *** hythm left
[22:52] *** masukomi left
[23:02] *** masukomi joined
[23:05] *** masukomi left
[23:09] *** masukomi joined
