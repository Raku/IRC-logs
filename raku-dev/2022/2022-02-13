[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[00:55] *** evalable6 joined
[01:56] *** linkable6 joined
[02:37] *** squashable6 left
[02:38] *** frost joined
[04:33] *** frost left
[04:38] *** squashable6 joined
[05:38] *** greppable6 left
[05:38] *** bloatable6 left
[05:38] *** committable6 left
[05:38] *** tellable6 left
[05:38] *** notable6 left
[05:38] *** quotable6 left
[05:38] *** benchable6 left
[05:38] *** coverable6 left
[05:38] *** releasable6 left
[05:38] *** shareable6 left
[05:38] *** nativecallable6 left
[05:38] *** evalable6 left
[05:38] *** statisfiable6 left
[05:38] *** sourceable6 left
[05:38] *** bisectable6 left
[05:38] *** unicodable6 left
[05:38] *** linkable6 left
[05:38] *** reportable6 left
[05:38] *** squashable6 left
[05:38] *** bloatable6 joined
[05:38] *** reportable6 joined
[05:39] *** nativecallable6 joined
[05:39] *** notable6 joined
[05:39] *** evalable6 joined
[05:39] *** quotable6 joined
[05:39] *** bisectable6 joined
[05:40] *** statisfiable6 joined
[05:41] *** releasable6 joined
[05:41] *** committable6 joined
[05:41] *** greppable6 joined
[06:07] *** reportable6 left
[06:40] *** tellable6 joined
[06:40] *** linkable6 joined
[07:40] *** benchable6 joined
[07:41] *** sourceable6 joined
[08:38] *** shareable6 joined
[08:39] *** squashable6 joined
[09:41] <[Tux]> Rakudo v2022.02-12-g72b9e1c28 (v6.d) on MoarVM 2022.02-1-g0539ead63

[09:41] <[Tux]> csv-test-xs-20      0.412 -  0.422

[09:41] <[Tux]> csv-ip5xs           0.787 -  0.837

[09:41] <[Tux]> test-t --race       0.850 -  0.880

[09:41] <[Tux]> test-t              1.490 -  1.492

[09:41] <[Tux]> csv-parser          3.934 -  3.988

[09:41] <[Tux]> csv-ip5xs-20        4.912 -  5.033

[09:41] <[Tux]> test                6.642 -  6.820

[09:41] <[Tux]> test-t-20 --race    7.327 -  7.947

[09:41] <[Tux]> test-t-20          22.109 - 22.787

[09:41] <[Tux]> Note that this time I killed my browser and M$-Teams before running the timing

[09:41] *** unicodable6 joined
[09:44] <[Tux]>  5 2022-02-04 13:53:25 test-t 1.498

[09:44] <[Tux]>  4 2022-01-31 17:20:41 test-t 1.494

[09:44] <[Tux]>  3 2022-01-31 17:22:22 test-t 1.493

[09:44] <[Tux]>  2 2022-02-13 10:34:59 test-t 1.492

[09:44] <[Tux]>  1 2022-02-13 10:36:39 test-t 1.490

[10:13] <lizmat> Files=1351, Tests=117097, 289 wallclock secs (35.03 usr  9.75 sys + 4021.51 cusr 337.44 csys = 4403.73 CPU)

[10:30] <Geth> ¦ rakudo: ce07254a85 | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp

[10:30] <Geth> ¦ rakudo: Optimize simple ^42 loops with uint rather than int

[10:30] <Geth> ¦ rakudo: 

[10:30] <Geth> ¦ rakudo: This won't make much of a difference now, but it will in the future

[10:30] <Geth> ¦ rakudo: when loops like for ^10 { ... @a[$_] } will be able to directly

[10:30] <Geth> ¦ rakudo: dispatch with inlineable uint candidates that do not need to check

[10:30] <Geth> ¦ rakudo: for index < 0.

[10:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ce07254a85

[10:39] *** coverable6 joined
[10:52] <Geth> ¦ rakudo: e000840d65 | (Elizabeth Mattijsen)++ | src/core.c/Uni.pm6

[10:52] <Geth> ¦ rakudo: uintify the Uni class

[10:52] <Geth> ¦ rakudo: 

[10:52] <Geth> ¦ rakudo: - AT-POS int candidate -> uint

[10:52] <Geth> ¦ rakudo: - EXISTS-POS int candidate -> uint

[10:52] <Geth> ¦ rakudo: - Otherwise use uint instead of int to indicate intent

[10:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e000840d65

[11:14] <Geth> ¦ rakudo: 88386a0940 | (Elizabeth Mattijsen)++ | src/core.c/Array/Shaped1.pm6

[11:14] <Geth> ¦ rakudo: uintify the Array::Shaped1 role

[11:14] <Geth> ¦ rakudo: 

[11:14] <Geth> ¦ rakudo: This is mostly about showing intent.  The actual bounds checking

[11:14] <Geth> ¦ rakudo: is actually done inside of the shaped array machinery.

[11:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/88386a0940

[11:25] <Geth> ¦ rakudo: 3e89b30aaa | (Elizabeth Mattijsen)++ | src/core.c/Array/Shaped2.pm6

[11:25] <Geth> ¦ rakudo: uintify the Array::Shaped2 role

[11:25] <Geth> ¦ rakudo: 

[11:25] <Geth> ¦ rakudo: This is mostly about showing intent.  The actual bounds checking

[11:25] <Geth> ¦ rakudo: is actually done inside of the shaped array machinery.

[11:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3e89b30aaa

[11:38] <Geth> ¦ rakudo: 96cbc2be6f | (Elizabeth Mattijsen)++ | src/core.c/Array/Shaped3.pm6

[11:38] <Geth> ¦ rakudo: uintify the Array::Shaped3 role

[11:38] <Geth> ¦ rakudo: 

[11:38] <Geth> ¦ rakudo: This is mostly about showing intent.  The actual bounds checking

[11:38] <Geth> ¦ rakudo: is actually done inside of the shaped array machinery.

[11:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/96cbc2be6f

[11:39] *** evalable6 left
[11:39] *** linkable6 left
[11:39] *** linkable6 joined
[11:51] <Geth> ¦ rakudo: f807186eb6 | (Elizabeth Mattijsen)++ | src/core.c/Sequence.pm6

[11:51] <Geth> ¦ rakudo: uintify Sequence.EXISTS/AT-POS

[11:51] <Geth> ¦ rakudo: 

[11:51] <Geth> ¦ rakudo: For future performance

[11:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f807186eb6

[13:08] *** reportable6 joined
[13:40] *** evalable6 joined
[14:02] *** discord-raku-bot left
[14:03] *** discord-raku-bot joined
[14:07] *** discord-raku-bot left
[14:07] *** discord-raku-bot joined
[14:14] <MasterDuke> m: sub a(uint $a) { say "$a" }; a(my int $b = 3)    # huh, wasn't sure this would work

[14:14] <camelia> rakudo-moar f807186eb: OUTPUT: «3␤»

[14:37] <lizmat> 	m: sub a(uint $a) { say "$a" }; a(my int $b = -3)

[14:37] <camelia> rakudo-moar f807186eb: OUTPUT: «18446744073709551613␤»

[14:38] <lizmat> m: multi a(uint $a) { dd }; multi a(Int:D) { dd }; a(my int $b = -3)

[14:38] <camelia> rakudo-moar f807186eb: OUTPUT: «sub a(Int:D)␤»

[14:38] <lizmat> m: multi a(uint $a) { dd }; multi a(Int:D) { dd }; a(my int $b = 3)

[14:38] <camelia> rakudo-moar f807186eb: OUTPUT: «sub a(Int:D)␤»

[14:38] <lizmat> MasterDuke ^^

[14:40] *** frost joined
[14:44] <Geth> ¦ rakudo: de9eeeb2cb | (Elizabeth Mattijsen)++ | src/core.c/Array.pm6

[14:44] <Geth> ¦ rakudo: uintify Array

[14:44] <Geth> ¦ rakudo: 

[14:44] <Geth> ¦ rakudo: - Add uint candidates to xx-POS where appropriate

[14:44] <Geth> ¦ rakudo: - Mark places that should just re-dispatch in the future

[14:44] <Geth> ¦ rakudo: - Refactored "shift' so that it is now small enough to inline

[14:44] <Geth> ¦ rakudo: - Refactored "pop" so that it will inline earlier

[14:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/de9eeeb2cb

[14:44] <lizmat> Array.shift potentially 20% faster now  :-)

[14:45] <MasterDuke> nice

[14:46] <MasterDuke> btw, jdv++, glad to see another release

[15:13] *** frost left
[17:49] *** nebuchadnezzar left
[17:55] <Geth> ¦ rakudo: 7c5595e225 | (Elizabeth Mattijsen)++ | src/core.c/List.pm6

[17:55] <Geth> ¦ rakudo: uintify List

[17:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7c5595e225

[18:08] *** reportable6 left
[18:15] <Geth> ¦ rakudo: codesections++ created pull request #4786: Improve error msg for traits passed invalid args

[18:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4786

[18:22] <Geth> ¦ roast: codesections++ created pull request #798: Fix over-specific regression test

[18:22] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/798

[18:29] <Geth> ¦ roast: 622cd284d4 | (Daniel Sockwell)++ (committed using GitHub Web editor) | S12-attributes/instance.t

[18:29] <Geth> ¦ roast: Fix over-specific regression test (#798)

[18:29] <Geth> ¦ roast: 

[18:29] <Geth> ¦ roast: Two S12-attribute regression tests checked the exact value of an

[18:29] <Geth> ¦ roast: error's $.declaring property (expecting it to be `n attribute`).  This

[18:29] <Geth> ¦ roast: changes the matcher to test that $.declaring contains `attribute`,

[18:29] <Geth> ¦ roast: which seems more robust.

[18:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/622cd284d4

[18:29] *** linkable6 left
[18:45] <Geth> ¦ nqp: usev6++ created pull request #765: [JVM] Add missing methods (bind|get)lex_u_si

[18:45] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/765

[18:48] <japhb> [Tux]: Which CPU frequency governor are you using?  I happened to read something last week that offhand mentioned workloads that interact badly with the heuristics of the powersave governor, and can be as much as 2x slower than under the performance governor.  I'm curious if the change of governor would make any difference to your benchmarks.

[19:17] <Geth> ¦ rakudo: codesections++ created pull request #4787: Remove unneeded/confusing can('prec') checks

[19:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4787

[19:22] <Geth> ¦ rakudo: a965cdcb3f | (Elizabeth Mattijsen)++ | src/core.c/Range.pm6

[19:22] <Geth> ¦ rakudo: uintify Range

[19:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a965cdcb3f

[19:27] <lizmat> m: dd \(1,2,3).EXISTS-POS(-1)   # oops, an oversight!

[19:27] <camelia> rakudo-moar 7c5595e22: OUTPUT: «Bool::True␤»

[19:39] <lizmat> m: Capture.new.Bool   # boom

[19:39] <camelia> rakudo-moar a965cdcb3: OUTPUT: «elems requires a concrete object (got a VMNull type object instead)␤  in block <unit> at <tmp> line 1␤␤»

[20:07] <codesections> .

[20:08] <[Coke]> (killed teams) teams is a BEAST, at least on windows.

[20:10] <Geth> ¦ rakudo: 771655b0b5 | (Elizabeth Mattijsen)++ | src/core.c/Capture.pm6

[20:10] <Geth> ¦ rakudo: uintify Capture

[20:10] <Geth> ¦ rakudo: 

[20:10] <Geth> ¦ rakudo: And some refactoring on some of the other methods, in light of

[20:10] <Geth> ¦ rakudo: current know-how regarding optimization and inlining.

[20:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/771655b0b5

[20:35] <Geth> ¦ rakudo: cc3ed94bd6 | (Vadim Belman)++ | 2 files

[20:35] <Geth> ¦ rakudo: Turn junctions into value objects

[20:35] <Geth> ¦ rakudo: 

[20:35] <Geth> ¦ rakudo: This may serve many purposes like classification/categorization over

[20:35] <Geth> ¦ rakudo: junctions; or ensuring a junction we have is the one we expect.

[20:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cc3ed94bd6

[20:35] <Geth> ¦ rakudo: b67d38c4e9 | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[20:35] <Geth> ¦ rakudo: Merge pull request #4769 from vrurg/problem-solving-311

[20:35] <Geth> ¦ rakudo: 

[20:35] <Geth> ¦ rakudo: Turn junctions into value objects

[20:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b67d38c4e9

[20:36] <Geth> ¦ rakudo: df09bef0b9 | (Vadim Belman)++ | src/core.c/Hash/Object.pm6

[20:36] <Geth> ¦ rakudo: Fix a bug with gist over Junction keys

[20:36] <Geth> ¦ rakudo: 

[20:36] <Geth> ¦ rakudo: Autothreading over `Junction` caused a throw in `Rakudo::Sorting`

[20:36] <Geth> ¦ rakudo: `MERGESORT-REIFIED-LIST-AS` method. Since this only happens with

[20:36] <Geth> ¦ rakudo: parameterized hashes, the fix is done via adding `:safe` named to

[20:36] <Geth> ¦ rakudo: `Hash::Object` sort method.

[20:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/df09bef0b9

[20:36] <Geth> ¦ rakudo: c50f51f952 | (Vadim Belman)++ | 6 files

[20:36] <Geth> ¦ rakudo: Fix classification and categorization over junctions

[20:36] <Geth> ¦ rakudo: 

[20:36] <Geth> ¦ rakudo: Potentially breaking change!

[20:36] <Geth> ¦ rakudo: 

[20:36] <Geth> ¦ rakudo: Previously `classify` and `categorize` methods were autothreading over

[20:36] <Geth> ¦ rakudo: junctions internally, resulting in confusing results. In particular,

[20:36] <Geth> ¦ rakudo: where same value generally must only appear in a single class, use of a

[20:36] <Geth> ¦ rakudo: <…commit message has 13 more lines…>

[20:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c50f51f952

[20:36] <Geth> ¦ rakudo: fafcca3159 | (Vadim Belman)++ (committed using GitHub Web editor) | 7 files

[20:36] <Geth> ¦ rakudo: Merge pull request #4770 from vrurg/problem-solving-312

[20:36] <Geth> ¦ rakudo: 

[20:36] <Geth> ¦ rakudo: Correctly classify over junctions

[20:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fafcca3159

[21:09] *** reportable6 joined
[21:37] *** nebuchadnezzar joined
[22:04] *** morayj joined
[22:12] *** morayj left
[22:12] *** morayj joined
[22:19] *** morayj left
[23:33] *** linkable6 joined
[23:36] *** Altai-man joined
[23:37] *** samcv left
[23:37] *** discord-raku-bot left
[23:37] *** discord-raku-bot joined
[23:38] *** samcv joined
[23:39] *** sena_kun left
[23:39] *** CIAvash left
[23:40] *** AlexDaniel left
[23:43] *** discord-raku-bot left
[23:43] *** discord-raku-bot joined
[23:51] *** discord-raku-bot left
[23:51] *** discord-raku-bot joined
[23:52] *** CIAvash joined
[23:56] *** AlexDaniel joined
[23:59] *** samcv left
