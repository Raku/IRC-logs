[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[02:56] <MasterDuke> vrurg: not sure what you mean? we're not supposed to be using both nqp and rakudo on the branch named 'main' yet?

[02:57] <vrurg> MasterDuke: did you always use NQP from the tip of master branch? About the same situation here.

[02:57] <vrurg> I'm currently working on better errors for Rakudo and it includes fixed Backtrace.

[03:17] <MasterDuke> yeah, i have all three repos checked out separately configured with a common --prefix and i usually keep them all at HEAD

[03:52] <vrurg> Unfortunately, it doesn't guarantee their compatibility, apparently.

[04:02] <MasterDuke> in unrelated news, i have my convert-list-assignment-into-list-of-assignments branch passing a spectest (not counting the current fails related to backtraces)

[04:04] <MasterDuke> it's not pretty. but `my $a; my $b; my $c; ($a, $b) = ($_, $_) for ^1_000_000; say "$a $b";` now takes ~0.25s instead of ~1.6s

[04:10] <Geth> ¬¶ rakudo: MasterDuke17++ created pull request #5128: Try to convert `($a, $b) = ($c, $d)` into `$a = $c; $b = $d`

[04:10] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/5128

[04:33] <Geth> ¬¶ rakudo: vrurg++ created pull request #5129: Make use of line directive information for compile time errors

[04:33] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/5129

[04:35] <vrurg> MasterDuke: +++ !!! 

[05:33] *** epony left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:17] *** epony joined
[07:44] *** sena_kun joined
[10:40] <patrickb> ugexe: re rakubrew and mail,

[10:42] <patrickb> *main, I suspect it will be a problem. I'll probably manage to look at this in the evening.

[10:46] *** evalable6 left
[10:49] *** evalable6 joined
[11:39] <lizmat> I assume we want RakuAST to be a 6.e thing only, right?   and then only with "use experimental :rakuast", right ?

[11:54] <lizmat> nine vrurg 

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[13:11] *** |Tux| left
[13:13] <ugexe> patrickb++

[13:19] *** |Tux| joined
[13:19] *** Tux__ joined
[13:23] *** Tux__ left
[14:12] <vrurg> lizmat: neither I think this is really possible, nor it makes sense when we switch to it completely. How could be block RakuAST in 6.c if the version going to be implemented in it?

[14:13] <vrurg> *could we

[15:21] <[Coke]> (ast 6.e) that seems very reasonable to me.

[15:21] <[Coke]> (the ask, not the implementation :)

[15:25] *** squashable6 left
[15:26] *** squashable6 joined
[15:50] <vrurg> [Coke]: ??

[15:50] <vrurg> What does (ast 6.e) means?

[15:55] <leont> <lizmat> I assume we want RakuAST to be a 6.e thing only, right?

[15:58] <discord-raku-bot> <Nemokosch> it all boils down to "when we switch to it completely" doesn't it

[16:01] *** discord-raku-bot left
[16:01] *** discord-raku-bot joined
[16:42] *** Kaiepi left
[16:44] <[Coke]> vrurg: was referring to lizmat's ask about ast in 6.e

[17:01] *** Kaiepi joined
[17:45] *** lizmat left
[17:47] *** lizmat joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:22] *** sena_kun left
[18:23] *** sena_kun joined
[19:20] *** discord-raku-bot left
[19:20] *** discord-raku-bot joined
[19:38] <lizmat> notable6: weekly

[19:38] <notable6> lizmat, 2 notes: 2022-12-05T21:05:10Z <El_Che>: rakudo-pkg releases for 2022.12 + added packages for newly released alpine 3.17  ;  2022-12-07T13:59:44Z <lizmat>: https://twitter.com/jnthnwrthngtn/status/1600488908722257920

[19:46] <lizmat> notable6: weekly reset

[19:46] <notable6> lizmat, Moved existing notes to ‚Äúweekly_2022-12-12T19:46:18Z‚Äù

[19:53] *** Nemokosch joined
[19:54] <Nemokosch> bisectable6: enum BooleanEnum (:!Lies, :Truth); say False ~~ BooleanEnum;

[19:54] <bisectable6> Nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight

[19:54] *** Nemokosch left
[19:54] <bisectable6> Nemokosch, Output on all releases: https://gist.github.com/f0e879eb4cfc6ce67c9dbc144a1b1c41

[19:54] <bisectable6> Nemokosch, Bisecting by output (old=2021.12 new=2022.02) because on both starting points the exit code is 0

[19:55] <bisectable6> Nemokosch, bisect log: https://gist.github.com/4c74467d315f8fd21fc12f7a0f9f1cf6

[19:55] <bisectable6> Nemokosch, (2021-12-27) https://github.com/rakudo/rakudo/commit/9f80771c91c0fad65ceade5a6309a1decd5dcc79

[19:55] <bisectable6> Nemokosch, Output on all releases and bisected commits: https://gist.github.com/7759c03d6978abeff0fdc5dc3d152927

[20:21] *** discord-raku-bot left
[20:21] *** discord-raku-bot joined
[20:26] *** sena_kun left
[20:27] *** sena_kun joined
[20:30] *** discord-raku-bot left
[20:30] *** discord-raku-bot joined
[20:32] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/12/12/2022-50-mainified/

[20:39] *** discord-raku-bot left
[20:39] *** discord-raku-bot joined
[20:57] <bartolin> lizmat++

[21:06] <patrickb> ugexe: I have just uploaded rakubrew v31 accounting for the master -> main rename. Previous rakubrew versions continue to work for the most part, as rakubrew rarely accesses the master / main branch. `rakubrew self-upgrade` is what one can do to upgrade an installation.

[21:06] <lizmat> patrickb

[21:06] <lizmat> ++

[21:08] <discord-raku-bot> <Nemokosch> üéâ

[21:12] <bartolin> does anyone know about the impact of rakuast on the jvm backend? if I'm not mistaken the jvm backend doesn't compile anymore since we switched to main (fka rakuast). Currently it complains about the unknown nqp::const::DISP_ONLYSTAR -- e.g. https://dev.azure.com/Rakudo/rakudo/_build/results?buildId=3096&view=logs&j=4b893f53-7e1e-5c61-1e1e-e4fc61ee1c48&t=eecb2d6d-5078-534f-db49-36810221fdff

[21:16] <bartolin> but if I add that constant a new failure mode comes up: "Operation 'dispatch' requires 4 operands". Is this expected at this point? I've seen, that there are various conditionals '#if moar' around the RakuAST things in src/Perl6/bootstrap.c/BOOTSTRAP.nqp. That somehow looks like the jvm backup *should* still work.

[21:17] <lizmat> vrurg nine might know, but nine is on holiday

[21:18] <bartolin> in the longer run, the jvm backend probably needs to learn some of the new things as well (if it want's to live on). I'd be curious if there is a kind of "high level" assessment what needs to be implemented.

[21:18] <lizmat> the thing is: afaik, RakuAST is just bullt on NQP and doesn't need any specific backend things 

[21:19] <lizmat> maybe that assumption is wrong  :-(

[21:22] <bartolin> maybe it's only this one call to nqp::dispatch that doesn't work on the jvm backend: https://github.com/rakudo/rakudo/blob/b0f9d8324e/src/Raku/ast/code.rakumod#L223

[21:28] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: f184794078 | (Elizabeth Mattijsen)++ | 3 files

[21:28] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: Implement "use experimental :rakuast"

[21:28] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: 

[21:28] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: This pretty hacky approach fetches the RakuAST type object at the

[21:28] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: end of the core.c compilation, and stashes that with bindcurhllsym.

[21:28] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: It then replaces the CORE::<RakuAST> entry with Nil, causing all

[21:28] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: lookups for RakuAST classes to fail from thereon.

[21:28] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: 

[21:28] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: <‚Ä¶commit message has 5 more lines‚Ä¶>

[21:28] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: review: https://github.com/rakudo/rakudo/commit/f184794078

[21:28] <Geth> ¬¶ rakudo: lizmat++ created pull request #5131: Implement `use experimental :rakuast`

[21:28] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/5131

[21:30] <vrurg> lizmat: You're right. There is one reference to a dispatcher which currently breaks JVM, but that's just a matter of implementing alternate QAST for JVM.

[21:31] <bartolin> vrurg++

[21:31] <vrurg> And, again, I'm not sure what's the reason of blocking access to RakuAST types in 6.c. New macros are a different story, yes.

[21:31] <lizmat> the pull request also allows it in 6.c

[21:32] <lizmat> it was the simplest way

[21:35] <vrurg> lizmat: am I missing something? `raku -e 'use v6.c; say RakuAST::CompUnit.WHICH'` on main - RakuAST::CompUnit|U3077766583360

[21:35] <vrurg> RakuAST types are part of 6.c bootstrap.

[21:36] <lizmat> it's a PR, did you build it ?

[21:36] <lizmat> % r 'use v6.c; say RakuAST::CompUnit.WHICH' 

[21:36] <lizmat> Could not find symbol '&CompUnit' in 'Nil'

[21:37] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: d68c80e57f | (Elizabeth Mattijsen)++ | 3 files

[21:37] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: Add some comments on when to remove the code

[21:37] <Geth> ¬¶ rakudo/lizmat-experimental-rakuast: review: https://github.com/rakudo/rakudo/commit/d68c80e57f

[21:40] <vrurg> lizmat: Ah, trying to do a couple of things at once makes me slow... You just block it _without_ experimental. Well, it could be done differently, within the BOOTSTRAP. It could optionally install an entry into EXPORT.

[21:41] <lizmat> if this gives you inspiration for a better solution, I'm all for it  :-)

[21:41] <vrurg> Not sure I could do it the coming two days. 

[21:41] <lizmat> jnthn's requirement was that users shouldn't be able to use RakuAST functionality unless it was specifically enabled

[21:42] <lizmat> ok, would you mind if I merged it now, so that we at least have the API working ?

[21:42] <vrurg> Better not or otherwise I would be reluctant to get it done properly. ;)

[21:43] <lizmat> well, it's temporary anyway

[21:43] <lizmat> I want to be able to write a blog post about RakuAST's features now, and tell about "use experimental :rakuast"

[21:45] <vrurg> lizmat: Actually, there is even better way, than I initially thought. That EXPORT::DEFAULT.WHO<RakuAST> := RakuAST; must be replaced with bindhllsym. The `experimental` module can then export the symbol by fetching it with gethllsym.

[21:45] <vrurg> Much less hackery.

[21:45] <lizmat> that's what the experimental module already does

[21:46] <lizmat> I think it's the same idea, just that the bindcurhllsym is different

[21:46] <vrurg> Why the Nil binding then?

[21:46] <lizmat> to disable it

[21:46] <lizmat> to disable lookups of any of the "sub"classes of RakuAST

[21:47] <lizmat> hmmm

[21:47] <lizmat> which line in the bootstrap are you talking abour?

[21:48] <vrurg> That's what I meant by removing the EXPORT::DEFAULT from bootstrap.

[21:48] * lizmat looks

[21:48] <vrurg> I think it is generated by RakuAST compiler.

[21:48] <vrurg> Yes, tools/build/raku-ast-compiler.nqp

[21:49] <vrurg> Line 322.

[21:49] <vrurg> Just deleting it would be sufficient to disable by default.

[21:49] <lizmat> oki

[21:49] * vrurg is on the phone at the same time, so better not edit anything. :)

[21:56] <lizmat> meh, that breaks core.c compilation of RakuAST::Deparse

[21:57] <vrurg> lizmat: I'm sure it is fixable.

[22:01] <lizmat> well, I guess I need to sleep on that  :-)

[22:08] <vrurg> lizmat: last note: RakuAST::Deparse must not be available either then. Perhaps it should live in lib/ for a while and be part of `use experimental` export?

[23:16] <lizmat> vrurg: with my approach:

[23:16] <lizmat> % r 'dd RakuAST::Deparse'                 

[23:16] <lizmat> Could not find symbol '&Deparse' in 'Nil'

[23:16] <lizmat> % r 'use experimental :rakuast; dd RakuAST::Deparse'

[23:16] <lizmat> RakuAST::Deparse

[23:17] <vrurg> lizmat: BTW, rather confusing error message.

[23:33] *** sena_kun left
