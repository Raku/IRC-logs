[00:07] *** reportable6 left
[00:07] *** reportable6 joined
[01:54] *** evalable6 left
[01:54] *** committable6 left
[01:54] *** statisfiable6 left
[01:54] *** sourceable6 left
[01:54] *** shareable6 left
[01:54] *** reportable6 left
[01:54] *** nativecallable6 left
[01:54] *** unicodable6 left
[01:54] *** greppable6 left
[01:54] *** tellable6 left
[01:54] *** quotable6 left
[01:54] *** linkable6 left
[01:54] *** bisectable6 left
[01:54] *** benchable6 left
[01:54] *** coverable6 left
[01:54] *** releasable6 left
[01:54] *** notable6 left
[01:54] *** bloatable6 left
[01:54] *** tellable6 joined
[01:54] *** shareable6 joined
[01:55] *** unicodable6 joined
[01:55] *** sourceable6 joined
[01:55] *** committable6 joined
[01:55] *** bisectable6 joined
[01:55] *** quotable6 joined
[01:56] *** reportable6 joined
[01:56] *** statisfiable6 joined
[01:56] *** linkable6 joined
[01:56] *** greppable6 joined
[01:56] *** coverable6 joined
[01:56] *** bloatable6 joined
[01:56] *** benchable6 joined
[01:57] *** notable6 joined
[01:57] *** evalable6 joined
[01:57] *** nativecallable6 joined
[01:57] *** releasable6 joined
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:14] *** frost joined
[07:14] *** linkable6 left
[07:14] *** evalable6 left
[07:15] *** evalable6 joined
[07:17] *** linkable6 joined
[08:03] <lizmat> Files=1353, Tests=117194, 296 wallclock secs (35.42 usr 10.11 sys + 4069.35 cusr 340.90 csys = 4455.78 CPU)

[08:06] <lizmat> m: say (2, 5, -3).are ~~ UInt   # this feels like a bug?

[08:06] <camelia> rakudo-moar 530e17848: OUTPUT: «True␤»

[08:07] <lizmat> nine ^^

[08:53] *** linkable6 left
[08:53] *** evalable6 left
[08:55] *** linkable6 joined
[08:56] *** evalable6 joined
[09:19] <nine> m: say Int ~~ UInt

[09:19] <camelia> rakudo-moar 530e17848: OUTPUT: «True␤»

[09:22] <nine> lizmat: see commit f9d34a9e8314dc74a1966edb982cc217d455215f

[09:22] <nine> Aren't commit messages that only tell you what changed, but not why it changed, great?

[09:23] *** linkable6 left
[09:25] *** linkable6 joined
[10:22] *** |Tux| left
[10:22] *** [Tux] left
[10:26] *** [Tux] joined
[10:28] <Geth> ¦ rakudo/lizmat-optimize-clone: fa81f48d78 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[10:28] <Geth> ¦ rakudo/lizmat-optimize-clone: Fix segfault for test-t

[10:28] <Geth> ¦ rakudo/lizmat-optimize-clone: 

[10:28] <Geth> ¦ rakudo/lizmat-optimize-clone: Even though previously make test and make spectest passed, running

[10:28] <Geth> ¦ rakudo/lizmat-optimize-clone: test-t would cause a segfault.  So revert to using more temporary

[10:28] <Geth> ¦ rakudo/lizmat-optimize-clone: variable, but give them more indicative names.

[10:28] <Geth> ¦ rakudo/lizmat-optimize-clone: 

[10:28] <Geth> ¦ rakudo/lizmat-optimize-clone: Saves about 6 msecs on test-t.  Note that this method is bright red

[10:28] <Geth> ¦ rakudo/lizmat-optimize-clone: in profiles, so it doesn't get optimized in any way shape or form.

[10:29] <Geth> ¦ rakudo/lizmat-optimize-clone: review: https://github.com/rakudo/rakudo/commit/fa81f48d78

[11:59] <MasterDuke> lizmat: interestingly, while a profile of `sub foo($a) { $a + 1 }; my &bar; &bar = &foo.clone for ^10_000_000; say now - INIT now; say bar(4)` shows Block.clone (i.e., gen/moar/BOOTSTRAP/v6c.nqp:2308) as red, a spesh log shows it getting both speshed and jitted

[12:00] <MasterDuke> maybe it's confused because it looks like later it's getting inlined into the mainline

[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[13:39] *** discord-raku-bot left
[13:40] *** discord-raku-bot joined
[14:14] <nine> lizmat: do you have a backtrace of that segfault?

[14:14] <lizmat> alas, no

[14:15] *** frost left
[15:48] *** ismustachio joined
[15:51] *** ismustachio left
[18:07] *** reportable6 left
[18:07] *** reportable6 joined
[18:56] <MasterDuke> lizmat: how reproducible was the segfault. i just ran test-t in a loop on your branch (minus segfault fix commit) for a while and everything was fine

[18:56] <lizmat> 100% reproducible

[19:00] *** linkable6 left
[19:00] <MasterDuke> fine here, built moarvm with both gcc and clang

[19:03] *** linkable6 joined
[19:05] *** sena_kun left
[19:06] *** sena_kun joined
[20:34] *** evalable6 left
[20:34] *** linkable6 left
[20:36] *** evalable6 joined
[20:37] *** linkable6 joined
[21:33] <vrurg> lizmat: BTW, investigating the `require` concurrency issues and it turns out CUR::FileSystem still has big issues. The lock doesn't help. Just to keep you informed.

[22:02] *** linkable6 left
[22:02] *** evalable6 left
[22:03] *** evalable6 joined
[22:04] *** linkable6 joined
[23:04] *** evalable6 left
[23:04] *** quotable6 left
[23:04] *** benchable6 left
[23:04] *** unicodable6 left
[23:04] *** reportable6 left
[23:04] *** linkable6 left
[23:04] *** nativecallable6 left
[23:04] *** coverable6 left
[23:04] *** greppable6 left
[23:04] *** bisectable6 left
[23:04] *** committable6 left
[23:04] *** shareable6 left
[23:04] *** sourceable6 left
[23:04] *** notable6 left
[23:04] *** tellable6 left
[23:04] *** bloatable6 left
[23:04] *** linkable6 joined
[23:04] *** notable6 joined
[23:04] *** tellable6 joined
[23:04] *** evalable6 joined
[23:05] *** bloatable6 joined
[23:05] *** nativecallable6 joined
[23:05] *** bisectable6 joined
[23:05] *** reportable6 joined
[23:05] *** shareable6 joined
[23:06] *** committable6 joined
[23:06] *** greppable6 joined
[23:06] *** quotable6 joined
[23:06] *** sourceable6 joined
[23:07] *** coverable6 joined
[23:07] *** benchable6 joined
[23:07] *** unicodable6 joined
