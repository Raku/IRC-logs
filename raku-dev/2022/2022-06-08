[00:07] *** reportable6 left
[00:10] *** reportable6 joined
[00:42] *** [Coke]_ joined
[00:43] *** [Coke] left
[01:11] *** [Coke]_ is now known as [Coke]
[02:00] *** melezhik joined
[02:01] <melezhik> I am thinking about resuming r3tool for rakudo commits testing - sparrowhub.io:2222/report/576
[02:01] <melezhik> Let me know if this something that could be useful
[02:02] <melezhik> CI can runs closed issues tests against rakudo commits
[02:02] <melezhik> These are just black box tests in sparrow style
[02:03] <melezhik> https://github.com/melezhik/r3tool
[02:03] <melezhik> So a regression could be spotted on per GitHub issues basis
[02:14] *** melezhik left
[02:14] *** melezhik joined
[02:18] *** melezhik left
[02:26] *** frost joined
[02:37] *** Xliff joined
[03:37] *** statisfiable6 left
[03:37] *** notable6 left
[03:37] *** bloatable6 left
[03:37] *** bisectable6 left
[03:37] *** shareable6 left
[03:37] *** quotable6 left
[03:37] *** releasable6 left
[03:37] *** nativecallable6 left
[03:37] *** unicodable6 left
[03:37] *** linkable6 left
[03:37] *** sourceable6 left
[03:37] *** greppable6 left
[03:37] *** committable6 left
[03:37] *** tellable6 left
[03:37] *** coverable6 left
[03:37] *** evalable6 left
[03:37] *** benchable6 left
[03:37] *** reportable6 left
[03:37] *** bisectable6 joined
[03:37] *** linkable6 joined
[03:37] *** notable6 joined
[03:38] *** coverable6 joined
[03:38] *** releasable6 joined
[03:38] *** unicodable6 joined
[03:38] *** statisfiable6 joined
[03:38] *** tellable6 joined
[03:38] *** shareable6 joined
[03:38] *** bloatable6 joined
[03:38] *** evalable6 joined
[03:39] *** quotable6 joined
[03:39] *** committable6 joined
[03:39] *** greppable6 joined
[03:39] *** reportable6 joined
[03:39] *** benchable6 joined
[03:40] *** nativecallable6 joined
[03:40] *** sourceable6 joined
[06:08] *** reportable6 left
[06:09] *** reportable6 joined
[08:01] *** lizmat joined
[09:26] *** Geth joined
[09:26] *** RakuIRCLogger left
[09:28] <Geth> ¦ rakudo: 41e07ab958 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/CoercionHOW.nqp
[09:28] <Geth> ¦ rakudo: Micro-opt on CoercionHOW.typecheck
[09:28] <Geth> ¦ rakudo: 
[09:28] <Geth> ¦ rakudo: In NQP, =:= alreay returns 1 if condition matches
[09:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/41e07ab958
[09:33] *** Geth left
[09:33] *** Geth joined
[09:37] *** Geth left
[09:37] *** Geth joined
[10:04] <Geth> ¦ rakudo: eceea95cd6 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/CoercionHOW.nqp
[10:04] <Geth> ¦ rakudo: Make coercion more easily inlineable
[10:04] <Geth> ¦ rakudo: 
[10:04] <Geth> ¦ rakudo: If the type is already correct, then the method is really small and
[10:04] <Geth> ¦ rakudo: can be inlined.  However, this does not appear to have any effect on
[10:04] <Geth> ¦ rakudo: runtime, as apparently some other optimization is already preventing
[10:04] <Geth> ¦ rakudo: .coerce from being called in the case of already having the correct
[10:04] <Geth> ¦ rakudo: type.
[10:04] <Geth> ¦ rakudo: 
[10:04] <Geth> ¦ rakudo: Apparently the .coerce method is only called with already correct types
[10:04] <Geth> ¦ rakudo: during compilation.  In any case, the small size allows it to be inlined
[10:04] <Geth> ¦ rakudo: pretty quickly, so in practice this does not add any method call overhead.
[10:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eceea95cd6
[10:07] *** [Tux] left
[10:37] <SmokeMachine> something seems wrong:
[10:37] <SmokeMachine> m: class :: does Sequence does Positional { has Lock $.l .= new; method iterator { die "called iterator" } }.new
[10:37] <camelia> rakudo-moar eceea95cd: OUTPUT: «(signal SEGV)»
[10:37] <SmokeMachine> m: class :: does Sequence does Positional { has Lock $.l; method iterator { die "called iterator" } }.new
[10:37] <camelia> rakudo-moar eceea95cd: ( no output )
[10:37] <SmokeMachine> m: class :: does Sequence does Positional { has Lock $.l .= new }.new
[10:37] <camelia> rakudo-moar eceea95cd: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 131072 bytes␤»
[10:38] <SmokeMachine> bisectable6: class :: does Sequence does Positional { has Lock $.l; method iterator { die "called iterator" } }.new
[10:38] <bisectable6> SmokeMachine, Will bisect the whole range automagically because no endpoints were provided, hang tight
[10:38] <bisectable6> SmokeMachine, Output on all releases: https://gist.github.com/fad0d611bba9621abd3d17355a0d003d
[10:38] <bisectable6> SmokeMachine, Bisecting by exit code (old=2017.09 new=2017.10). Old exit code: 1
[10:38] <bisectable6> SmokeMachine, bisect log: https://gist.github.com/ba34a5629511f97360cfaa819b4c07ed
[10:38] <bisectable6> SmokeMachine, (2017-10-12) https://github.com/rakudo/rakudo/commit/cc2a064395aa4849208bb553bda699b8252c910f
[10:39] <bisectable6> SmokeMachine, Output on all releases and bisected commits: https://gist.github.com/d713dad5a141159f620c73c3c743df49
[10:39] <lizmat> that looks like a false positive
[10:39] <SmokeMachine> this is what is breaking Red on 2022.06
[10:40] <SmokeMachine> (I'm using Lock there as an example... that could be anything... and that's not even being used...)
[10:40] <SmokeMachine> m: class Bla {}; class :: does Sequence does Positional { has Bla $.l; method iterator { die "called iterator" } }.new
[10:40] <camelia> rakudo-moar eceea95cd: ( no output )
[10:41] <SmokeMachine> (sorry, it seems it isn't anything... but on Red that's breaking with Red::AST::Chained and with Lock...)
[10:42] <SmokeMachine> m: class Bla {}; class :: does Sequence does Positional { has Bla $.l .= new; method iterator { die "called iterator" } }.new # I forgot the `.= new`
[10:42] <camelia> rakudo-moar eceea95cd: OUTPUT: «(signal SEGV)»
[10:42] <SmokeMachine> it seems to be anything...
[10:47] <SmokeMachine> On Red, if there is an Attribute with `.= new` on Red::ResultSeq, for some reason when instantiating it, it calls `cache` that calls `iterator` that dies because it's not prepared to run yet...
[10:48] <SmokeMachine> lizmat: sorry, what do you mean by false positive? the bisectable6 answer?
[10:49] <SmokeMachine> bisectable6: old=2022.04 new=2022.06 class :: does Sequence does Positional { has Lock $.l .= new; method iterator { die "called iterator" } }.new
[10:49] <bisectable6> SmokeMachine, Bisecting by exit signal (old=2022.04 new=2022.06). Old exit signal: 0 (None)
[10:49] <bisectable6> SmokeMachine, bisect log: https://gist.github.com/d1085f40370f3ff057c9ddd06d5ddcbd
[10:49] <bisectable6> SmokeMachine, (2022-04-26) https://github.com/rakudo/rakudo/commit/83ea647498961e7154241d317daa0b90929d9597
[10:50] <lizmat> yea, the second bisectable answer is more like it
[10:53] <SmokeMachine> lizmat: that code should work, right?
[10:54] <lizmat> yeah, think so
[10:55] <lizmat> anyway, just confirmed that reverting that commit does indeed fix the segfault
[10:56] <nine> Maybe there was a reason for making that check strict after all.
[10:59] <lizmat> perhaps... looking into it deeper at
[10:59] <lizmat> atm
[11:00] <SmokeMachine> will that be possible to make a new release fixing it? Red is not working on 2022.06 because of that... :(
[11:00] <nine> The segfault and memory allocation error would point at an infinite recursion
[11:01] *** [Tux] joined
[11:01] <lizmat> yeah, if you remove the iterator method from the class in the example, it just hangs
[11:01] <SmokeMachine> yes
[11:02] <nine> We could simply revert the offending commit and do a point release
[11:03] <lizmat> ok, lemme see if that is spectest clean now
[11:10] <lizmat> meh... we would need to revert one spectest as well
[11:12] <lizmat> anyway, I've established that that code is being called for the nameless class twice
[11:13] <lizmat> and actually does not appear to get called for the failing test
[11:13] <lizmat> before reverting, I'd like to do a little more research
[11:14] <lizmat> another thing that it needs to have, is a "method iterator"
[11:16] <lizmat> if it does not exist, it goes into an infiniloop eating all memory
[11:16] <lizmat> however, the method is not getting called  ?
[11:19] <SmokeMachine> on Red (Red::ResultSeq) that has a cache and a iterator methods, cache gets called and it calls iterator...
[11:19] <SmokeMachine> m: class :: does Sequence does Positional { has Lock $.l .= new; method cache { die "called cache" } }.new # just testing
[11:19] <camelia> rakudo-moar eceea95cd: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 131072 bytes␤»
[11:21] <SmokeMachine> the line 87 is the Attribute definition with `.= new: ...` https://usercontent.irccloud-cdn.com/file/4duRTkZQ/image.png
[11:27] <lizmat> m: class A does Sequence does Positional { has Int $.l .= new; method iterator { } }.new   # further golf
[11:27] <camelia> rakudo-moar eceea95cd: OUTPUT: «(signal SEGV)»
[11:30] <lizmat> m: class A does Sequence { }   # shouldn't that complain about not having implemented an "iterator" method ?
[11:30] <camelia> rakudo-moar eceea95cd: ( no output )
[12:01] *** linkable6 left
[12:01] *** evalable6 left
[12:02] *** evalable6 joined
[12:03] *** linkable6 joined
[12:06] *** reportable6 left
[12:09] *** reportable6 joined
[12:22] <Geth> ¦ rakudo: dd7f3eb976 | (Elizabeth Mattijsen)++ | src/core.c/Sequence.pm6
[12:22] <Geth> ¦ rakudo: Make PostionalBindFailover.iterator die
[12:22] <Geth> ¦ rakudo: 
[12:22] <Geth> ¦ rakudo: Apparently, the checks for unimplemented methods do not work for roles
[12:22] <Geth> ¦ rakudo: that are created this early in the setting.  So instead of having a
[12:22] <Geth> ¦ rakudo: compile time error, settle for a similar run-time error if the method
[12:22] <Geth> ¦ rakudo: does not get implemented.
[12:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dd7f3eb976
[12:29] <lizmat> I think this is only part of this puzzle
[12:29] <lizmat> m: class A does Positional does Sequence { has Int $.l .= new }.new
[12:29] <camelia> rakudo-moar eceea95cd: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 131072 bytes␤»
[12:30] <lizmat> right...  after the last commit, this fails with: Method 'iterator' must be implemented by A because it is required by roles: PositionalBindFailover
[12:33] <SmokeMachine> m: class A does Iterable {}.new
[12:33] <camelia> rakudo-moar dd7f3eb97: ( no output )
[12:33] <SmokeMachine> shouldn't `iterator` be required by Iterable?
[12:34] <lizmat> yeah, I think the underlying issue in all of this, is that the method implemented check does not appear to work on roles in Core
[12:36] <lizmat> m: class A does Positional does Sequence { has Int $.l .= new }.new
[12:36] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Method 'iterator' must be implemented by A because it is required by roles: PositionalBindFailover␤  in method  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[12:36] <lizmat> so, it's called on A, *BUT* only if it has an attribute that is by default initialized with a .new
[12:36] <SmokeMachine> m: role B { method iterator {...} }; say class A does B {}.new.iterator
[12:36] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Rakudo::Iterator::ReifiedListIterator.new␤»
[12:37] <lizmat> m: say 42.iterator
[12:37] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Rakudo::Iterator::ReifiedListIterator.new␤»
[12:37] <lizmat> same thing
[12:37] <lizmat> that's just from a scalar being a reified 1 elem list
[12:37] <SmokeMachine> so, it will never fail because it's always implemented...
[12:37] <lizmat> s/being/acting like
[12:38] <lizmat> s/being/acting like
[12:39] <lizmat> hmmm... that should be a compile time error ?
[12:39] <lizmat> m: role B { method iterator {...} }; say class A does B {}
[12:39] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «(A)␤»
[12:40] <lizmat> m: role B { method iderator {...} }; say class A does B {}
[12:40] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Method 'iderator' must be implemented by A because it is required by roles: B.␤at <tmp>:1␤»
[12:40] <lizmat> feels to me the check for implemented methods is a bit wonky
[12:41] <lizmat> it should check whether the method is actually implemented by A, not that it is implemented at all
[12:41] <SmokeMachine> m: class A does Positional does Sequence { has Int $.l .= is-prime }.new # It seems it's not only for `.= new`
[12:41] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Method 'iterator' must be implemented by A because it is required by roles: PositionalBindFailover␤  in method  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[12:41] <lizmat> and *that* may be the underlying issue
[12:42] <lizmat> hmmm... not just initialization, but initialization with .=
[12:43] <SmokeMachine> role R1 { method required { ... } }; role R2 does R1 { method required {} }; class C does R2 {} # lizmat: would your suggestion works for this case?
[12:44] <lizmat> m: class A does Positional does Sequence { has Int $.l = $!l.is-prime }.new   $ actually .= not required
[12:44] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> uence { has Int $.l = $!l.is-prime }.new⏏   $ actually .= not required␤    expecting any of:␤        infix␤        infix stopper␤        statem…»
[12:44] <lizmat> m: class A does Positional does Sequence { has Int $.l = $!l.is-prime }.new   # actually .= not required
[12:44] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Method 'iterator' must be implemented by A because it is required by roles: PositionalBindFailover␤  in method  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[12:45] <lizmat> m: 	role R1 { method required { ... } }; role R2 does R1 { method required {} }; class C does R2 {} 
[12:45] <camelia> rakudo-moar dd7f3eb97: ( no output )
[12:45] <lizmat> m: 	role R1 { method required { ... } }; role R2 does R1 { }; class C does R2 {} 
[12:45] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Method 'required' must be implemented by C because it is required by roles: R2.␤at <tmp>:1␤»
[12:46] <SmokeMachine> : class A does Positional does Sequence { has Int $.l = 42.is-prime }.new # It seems to be by calling any method...
[12:46] <SmokeMachine> m: class A does Positional does Sequence { has Int $.l = 42.is-prime }.new # It seems to be by calling any method...
[12:46] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Method 'iterator' must be implemented by A because it is required by roles: PositionalBindFailover␤  in method  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[12:47] <SmokeMachine> m: class A does Positional does Sequence { has Int $.l = "bla".contains: "l" }.new
[12:47] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Method 'iterator' must be implemented by A because it is required by roles: PositionalBindFailover␤  in method  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[12:47] <lizmat> it looks like .cache is being called from the generated BUILDALL of the class
[12:48] <SmokeMachine> m: class A does Positional does Sequence { has Int $.l = 1 + 1 }.new # Any execution
[12:48] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Method 'iterator' must be implemented by A because it is required by roles: PositionalBindFailover␤  in method  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[12:48] <lizmat> m: class A does Positional does Sequence { has Int $.l = $!l.is-prime }; use BUILDPLAN A
[12:48] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «class A BUILDPLAN:␤ 0: nqp::getattr(obj,A,'$!l') = :$l if possible␤ 1: nqp::getattr(obj,A,'$!l') = execute-code() if not set␤ 2: vivify nqp::getattr(obj,A,'$!list') if part of a mixin␤»
[12:48] <lizmat> the plot thickens
[12:49] <SmokeMachine> I did't know about `use BUILDPLAN`...
[12:49] <lizmat> yeah... it's really just for cases like this  :-)
[12:50] <lizmat> so I bet the "execute-code" bit has an issue somehow
[12:50] <lizmat> simpler case:
[12:50] <lizmat> class A does Positional does Sequence { has Int $.l = 42 }; use BUILDPLAN A
[12:50] <evalable6> lizmat, rakudo-moar dd7f3eb97: OUTPUT: «class A BUILDPLAN:␤ 0: nqp::getattr(obj,A,'$!l') = :$l if possible␤ 1: nqp::getattr(obj,A,'$!l') = 42 if not set␤ 2: vivify nqp::getattr(obj,A,'$!list') if part of a mixin␤»
[12:51] * lizmat prepares mentally for diving into the buildplan code builder again
[12:55] <SmokeMachine> is nqp::getattr(obj,A,'$!list') calling cache (sorry... just gessing)
[12:55] <SmokeMachine> ?
[12:56] <lizmat> nope, it isn't directly, looking at the generated ASTs
[12:56] <lizmat> QAST actually
[12:57] <lizmat> hmmm... where does p6assign live
[13:13] <lizmat> aha..  hmm.. so the Sequence role basically injects .cache for just about anything
[13:13] <lizmat> m: dd 42.cache
[13:13] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «(42,)␤»
[13:13] <lizmat> right
[13:14] *** frost left
[13:14] <lizmat> m: dd 42.^find_method("cache")
[13:14] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Method cache = method cache ($: *%_) { #`(Method|3550451296752) ... }␤»
[13:15] <lizmat> m: dd 42.^find_method("cache").file
[13:15] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «"SETTING::src/core.c/Any.pm6"␤»
[13:15] <lizmat> so it gets the default .cache method, which just turns it into a list
[13:16] <lizmat> m: dd class A does Sequence { }.^find_method("cache").file
[13:16] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «"SETTING::src/core.c/Sequence.pm6"␤»
[13:16] <lizmat> so, when it does Sequence, it gets the PositionalBindFailover one
[13:16] <lizmat> which calls .iterator
[13:17] <lizmat> m: dd class A does Sequence does Positional { }.^find_method("cache").file
[13:17] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «"SETTING::src/core.c/Sequence.pm6"␤»
[13:20] <lizmat> ok, I'm starting to think we should revert the commit and todo the associated test for now
[13:34] <lizmat> also: in Sequence.pm6:  nqp::p6configposbindfailover(Positional, PositionalBindFailover);
[13:39] <Geth> ¦ rakudo/revert-83ea64749896: 6bdac8909e | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp
[13:39] <Geth> ¦ rakudo/revert-83ea64749896: Revert relaxation of positional bind failover binding
[13:39] <Geth> ¦ rakudo/revert-83ea64749896: 
[13:39] <Geth> ¦ rakudo/revert-83ea64749896: It basically makes it impossible to create a class that does both
[13:39] <Geth> ¦ rakudo/revert-83ea64749896: Sequence as well as Positional, and this in turn broke Red.
[13:39] <Geth> ¦ rakudo/revert-83ea64749896: review: https://github.com/rakudo/rakudo/commit/6bdac8909e
[13:41] <Geth> ¦ rakudo: lizmat++ created pull request #4947: Revert relaxation of positional bind failover binding
[13:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4947
[13:42] <Geth> ¦ roast/revert-83ea64749896: dbb03d62fe | (Elizabeth Mattijsen)++ | S06-signature/passing-arrays.t
[13:42] <Geth> ¦ roast/revert-83ea64749896: Mark test as todo
[13:42] <Geth> ¦ roast/revert-83ea64749896: 
[13:42] <Geth> ¦ roast/revert-83ea64749896: To be merged if https://github.com/rakudo/rakudo/pull/4947 is merged
[13:42] <Geth> ¦ roast/revert-83ea64749896: review: https://github.com/Raku/roast/commit/dbb03d62fe
[13:42] <Geth> ¦ roast: lizmat++ created pull request #809: Mark test as todo
[13:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/809
[13:43] <lizmat> SmokeMachine: ^^
[13:45] <SmokeMachine> lizmat: thank you (sorry, I got busy on $DAYJOB...). So should that become a point release?
[13:50] <lizmat> good question...
[13:51] <lizmat> I have one other report of breakage in 2022.06 to look into
[14:17] <vrurg> That's why modules need more tests in hope Blin would catch any breakage...
[14:22] <lizmat> m: class A does Positional does Sequence { has $.a = 42.Int; method iterator { } }.new   # current golf
[14:22] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «(signal SEGV)»
[14:23] <lizmat> I think the thunk of "42.Int" is somehow calling A.cache and then goes into never never land
[14:23] <lizmat> m: class A does Positional does Sequence { has $.a = 42.Int; method iterator { } }.new(:42l)
[14:23] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «(signal SEGV)»
[14:23] <lizmat> hm
[14:23] <lizmat> m: class A does Positional does Sequence { has $.a = 42.Int; method iterator { } }.new(:42a)
[14:23] <camelia> rakudo-moar dd7f3eb97: ( no output )
[14:23] <lizmat> right
[14:24] <lizmat> as to *why* it would call A.cache, I have no idea
[14:24] <lizmat> m: class A does Positional does Sequence { has $.a = 42.Int }.new
[14:24] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Method 'iterator' must be implemented by A because it is required by roles: PositionalBindFailover␤  in method  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[14:25] <lizmat> the --ll-exception trace of that one is also pretty interesting
[14:29] <nine> That raises an interesting question: why did Blin not catch that problem with Red?
[14:30] <SmokeMachine> That’s a very good question…
[14:32] <AlexDaniel> could be that Red is very flappy or didn't pass tests on the old version 🤔
[14:34] <lizmat> https://github.com/rakudo/rakudo/issues/4948
[14:34] <SmokeMachine> m: class A does Positional does Sequence { has $.a = 1+1; method iterator { } }.new
[14:34] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «(signal SEGV)»
[14:34] <lizmat> the initialization of the attribute must be a 400 in the BUILDPLAN
[14:34] <lizmat> m: class A does Positional does Sequence { has int $.a = 1+1; method iterator { } }.new
[14:34] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «(signal SEGV)»
[14:35] <lizmat> or a 401,402,403,410 I guess
[14:35] <SmokeMachine> AlexDaniel: I hope not
[14:59] *** carlmasak joined
[14:59] *** carlmasak left
[15:20] *** ChanServ sets mode: +o lizmat
[15:20] *** lizmat changes topic to: 🦋 Welcome to the IRC channel of the core developers of the Raku Programming Language (https://raku.org #rakulang).  This channel is logged for the purpose of history keeping about its development | evalbot usage: 'm: say 3;' or /msg camelia m: ... | Logs available at https://irclogs.raku.org/raku-dev/live.html | For MoarVM see #moarvm
[15:21] *** ChanServ sets mode: -o lizmat
[15:49] <SmokeMachine> where can I see old blin logs to see if Red hadn't pass the last times?
[15:53] <AlexDaniel> SmokeMachine: you don't even need old logs, whoever ran Blin should have the new logs on the old revision
[16:01] <[Tux]> Rakudo v2022.06-6-gdd7f3eb97 (v6.d) on MoarVM 2022.06-1-ged7e1a51b
[16:01] <[Tux]> csv-test-xs-20      0.413 -  0.419
[16:01] <[Tux]> csv-ip5xs           0.780 -  0.793
[16:01] <[Tux]> test-t --race       0.835 -  0.856
[16:01] <[Tux]> test-t              1.437 -  1.470
[16:01] <[Tux]> csv-parser          3.542 -  3.633
[16:01] <[Tux]> csv-ip5xs-20        5.221 -  5.403
[16:01] <[Tux]> test                6.386 -  6.512
[16:02] <[Tux]> test-t-20 --race    6.439 -  6.774
[16:02] <[Tux]> test-t-20          19.925 - 20.713
[16:06] *** Xliff left
[16:28] *** discord-raku-bot left
[16:29] *** discord-raku-bot joined
[17:11] <Geth> ¦ rakudo/rakuast: 11 commits pushed by (Stefan Seifert)++
[17:11] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/compare/cfcb430e83cb...b9266a04f9df
[17:22] <Geth> ¦ rakudo/rakuast: 4cd038636c | (Stefan Seifert)++ | src/Raku/ast/code.rakumod
[17:22] <Geth> ¦ rakudo/rakuast: Support proto methods
[17:22] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/4cd038636c
[17:29] <lizmat> m: dd QuantHash.does(Associative)
[17:29] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Bool::True␤»
[17:29] <lizmat> all is good, it appears, however somehow QuantHash gets punned
[17:36] <Geth> ¦ roast: efe1f6b710 | (Elizabeth Mattijsen)++ | S02-types/keyhash.t
[17:36] <Geth> ¦ roast: Make sure all methods stubbed by role are implemented
[17:36] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/efe1f6b710
[17:44] <lizmat> m: role A { method list { ... } }; dd A.^pun
[17:44] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «A␤»
[17:45] <lizmat> m: role A { method dist { ... } }; dd A.^pun
[17:45] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Method 'dist' must be implemented by A because it is required by roles: A.␤  in block <unit> at <tmp> line 1␤␤»
[17:45] <lizmat> I feel the first should also fail, fwiw
[18:08] *** reportable6 left
[18:08] *** reportable6 joined
[18:08] *** melezhik joined
[18:14] *** melezhik left
[18:16] <nine> Why should it? The punned class is a subclass of Any which brings in the required list method.
[18:18] <nine> So https://github.com/rakudo/rakudo/commit/dd7f3eb976 should be reverted as well. It breaks that pattern.
[18:19] <nine> m: class A { method iterator() { } }; class B is A does Sequence { }; B.iterator # the error is wrong
[18:19] <camelia> rakudo-moar dd7f3eb97: OUTPUT: «Method 'iterator' must be implemented by B because it is required by roles: PositionalBindFailover␤  in block <unit> at <tmp> line 1␤␤»
[18:39] *** Util joined
[19:05] *** melezhik joined
[19:06] *** melezhik left
[19:11] *** melezhik joined
[19:13] <melezhik> nine: SmokeMachine  people could use sparkyci to test modules against further releases.   I think it's easy to add that support to sparkyci 🤔
[19:14] *** melezhik left
[19:14] *** melezhik joined
[19:18] *** melezhik left
[19:35] *** Geth left
[19:36] *** melezhik joined
[19:41] *** melezhik left
[20:49] *** Geth joined
[20:51] <Geth> ¦ rakudo/lizmat-stubs-check: 6ed67d09ff | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ClassHOW.nqp
[20:51] <Geth> ¦ rakudo/lizmat-stubs-check: Consuming class must provide implementation of stubs
[20:51] <Geth> ¦ rakudo/lizmat-stubs-check: 
[20:51] <Geth> ¦ rakudo/lizmat-stubs-check: This commit changes the way the check for stubbed methods is performed
[20:51] <Geth> ¦ rakudo/lizmat-stubs-check: on classes that consume roles.  Before, if the class could provide a
[20:51] <Geth> ¦ rakudo/lizmat-stubs-check: method for the stub, **even if it was from an inherited class**, it
[20:51] <Geth> ¦ rakudo/lizmat-stubs-check: would be accepted.  This behaviour makes:
[20:52] <Geth> ¦ rakudo/lizmat-stubs-check: 
[20:52] <Geth> ¦ rakudo/lizmat-stubs-check: <…commit message has 50 more lines…>
[20:52] <Geth> ¦ rakudo/lizmat-stubs-check: review: https://github.com/rakudo/rakudo/commit/6ed67d09ff
[20:52] <Geth> ¦ rakudo: lizmat++ created pull request #4950: Consuming class must provide implementation of stubs
[20:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4950
[20:57] *** Geth left
[20:57] *** Geth joined
[20:57] <Geth> ¦ rakudo/lizmat-stubs-check: 8310ae23c5 | (Elizabeth Mattijsen)++ | src/core.c/Sequence.pm6
[20:57] <Geth> ¦ rakudo/lizmat-stubs-check: Revert "Make PostionalBindFailover.iterator die"
[20:57] <Geth> ¦ rakudo/lizmat-stubs-check: 
[20:57] <Geth> ¦ rakudo/lizmat-stubs-check: This reverts commit dd7f3eb976efeaee92d2678af642893cb1e51c60
[20:57] <Geth> ¦ rakudo/lizmat-stubs-check: because it is no longer needed if the consuming class *must*
[20:57] <Geth> ¦ rakudo/lizmat-stubs-check: provide an implementation.
[20:57] <Geth> ¦ rakudo/lizmat-stubs-check: review: https://github.com/rakudo/rakudo/commit/8310ae23c5
[21:01] *** Geth left
[21:01] *** Geth joined
