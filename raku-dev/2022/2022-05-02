[00:08] *** reportable6 left
[00:08] *** reportable6 joined
[00:39] *** frost joined
[01:39] *** linkable6 left
[01:39] *** evalable6 left
[01:42] *** evalable6 joined
[01:42] *** linkable6 joined
[01:51] *** kjp left
[01:58] *** kjp joined
[03:25] *** statisfiable6 left
[03:25] *** releasable6 left
[03:25] *** nativecallable6 left
[03:25] *** tellable6 left
[03:25] *** sourceable6 left
[03:25] *** greppable6 left
[03:25] *** shareable6 left
[03:25] *** linkable6 left
[03:25] *** bisectable6 left
[03:25] *** committable6 left
[03:25] *** notable6 left
[03:25] *** coverable6 left
[03:25] *** unicodable6 left
[03:25] *** reportable6 left
[03:25] *** evalable6 left
[03:25] *** quotable6 left
[03:25] *** benchable6 left
[03:25] *** bloatable6 left
[03:26] *** unicodable6 joined
[03:26] *** bisectable6 joined
[03:26] *** sourceable6 joined
[03:26] *** releasable6 joined
[03:26] *** committable6 joined
[03:27] *** evalable6 joined
[03:27] *** linkable6 joined
[03:27] *** greppable6 joined
[03:27] *** shareable6 joined
[03:27] *** coverable6 joined
[03:27] *** tellable6 joined
[03:27] *** notable6 joined
[03:27] *** benchable6 joined
[03:28] *** nativecallable6 joined
[03:28] *** reportable6 joined
[03:28] *** quotable6 joined
[03:28] *** bloatable6 joined
[03:28] *** statisfiable6 joined
[03:37] *** frost left
[04:28] *** zostay left
[04:28] *** maettu left
[04:28] *** JRaspass left
[04:28] *** maettu joined
[04:28] *** zostay joined
[04:28] *** JRaspass joined
[04:41] *** Altai-man joined
[04:44] *** sena_kun left
[05:44] *** tellable6 left
[05:44] *** quotable6 left
[05:44] *** releasable6 left
[05:44] *** greppable6 left
[05:44] *** evalable6 left
[05:44] *** nativecallable6 left
[05:44] *** shareable6 left
[05:44] *** notable6 left
[05:44] *** statisfiable6 left
[05:44] *** reportable6 left
[05:44] *** bisectable6 left
[05:44] *** bloatable6 left
[05:44] *** unicodable6 left
[05:44] *** sourceable6 left
[05:44] *** committable6 left
[05:44] *** coverable6 left
[05:44] *** linkable6 left
[05:44] *** benchable6 left
[05:44] *** quotable6 joined
[05:44] *** releasable6 joined
[05:44] *** bisectable6 joined
[05:45] *** unicodable6 joined
[05:45] *** bloatable6 joined
[05:45] *** tellable6 joined
[05:45] *** sourceable6 joined
[05:45] *** shareable6 joined
[05:46] *** greppable6 joined
[05:46] *** benchable6 joined
[05:46] *** evalable6 joined
[05:46] *** reportable6 joined
[05:46] *** nativecallable6 joined
[05:46] *** statisfiable6 joined
[05:46] *** committable6 joined
[05:46] *** coverable6 joined
[05:46] *** linkable6 joined
[05:47] *** notable6 joined
[06:08] *** reportable6 left
[06:10] *** reportable6 joined
[06:48] <Geth> ¦ rakudo/rakuast: 4 commits pushed by (Stefan Seifert)++

[06:48] <Geth> ¦ rakudo/rakuast: bf9acaeafe | Make all parameters multi invocants by default

[06:48] <Geth> ¦ rakudo/rakuast: 3be4af213d | Option to get the outer attach target

[06:48] <Geth> ¦ rakudo/rakuast: 8920ff5b4d | RakuAST::VarDeclaration::Implicit::Block class

[06:48] <Geth> ¦ rakudo/rakuast: ce78c5f382 | First support for multis and (auto-generated) protos

[06:48] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/compare/cbff05c81980...ce78c5f382d4

[06:59] *** JRaspass left
[06:59] *** JRaspass joined
[08:16] *** nine left
[08:17] *** nine joined
[08:27] *** |Tux| joined
[08:27] *** Tux__ joined
[08:30] <lizmat> Files=1353, Tests=117195, 297 wallclock secs (36.20 usr 10.00 sys + 4095.85 cusr 341.47 csys = 4483.52 CPU)

[08:34] *** Tux__ left
[08:52] *** frost joined
[09:16] <lizmat> notable6: weekly

[09:16] <notable6> lizmat, 1 note: 2022-05-02T08:19:14Z <MasterDuke>: https://marketplace.visualstudio.com/items?itemName=bscan.raku-navigator

[09:16] <lizmat> notable6: weekly reset

[09:16] <notable6> lizmat, Moved existing notes to “weekly_2022-05-02T09:16:35Z”

[10:14] *** Altai-man left
[10:15] *** Altai-man joined
[10:37] <|Tux|> Rakudo v2022.04-32-g74a60a961 (v6.d) on MoarVM 2022.04-1-g4e2eab056

[10:37] <|Tux|> csv-test-xs-20      0.400 -  0.402

[10:37] <|Tux|> csv-ip5xs           0.774 -  0.859

[10:37] <|Tux|> test-t --race       0.828 -  0.864

[10:37] <|Tux|> test-t              1.397 -  1.430

[10:37] <|Tux|> csv-parser          3.665 -  3.853

[10:37] <|Tux|> csv-ip5xs-20        5.066 -  5.081

[10:37] <|Tux|> test-t-20 --race    6.344 -  6.423

[10:37] <|Tux|> test                6.447 -  6.453

[10:37] <|Tux|> test-t-20          21.029 - 21.603

[10:42] *** sena_kun joined
[10:51] *** frost left
[10:51] *** frost joined
[11:08] <Geth> ¦ problem-solving: e5b8cbf16d | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | .github/CODEOWNERS

[11:08] <Geth> ¦ problem-solving: Remove self as owner of that section

[11:08] <Geth> ¦ problem-solving: 

[11:08] <Geth> ¦ problem-solving: I can no longer claim responsibility for the documentation repo *de facto*. It's only sensible to remove myself from here too.

[11:08] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/commit/e5b8cbf16d

[11:09] <Geth> ¦ problem-solving: 894e41f708 | (Elizabeth Mattijsen)++ | .github/CODEOWNERS

[11:09] <Geth> ¦ problem-solving: Fix formatting in CODEOWNERS

[11:09] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/commit/894e41f708

[12:01] *** frost left
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:37] *** frost joined
[12:47] <Geth> ¦ rakudo: a84e16849d | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[12:47] <Geth> ¦ rakudo: Remove superfluous return statements

[12:47] <Geth> ¦ rakudo: 

[12:47] <Geth> ¦ rakudo: When processing a phaser in your code.

[12:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a84e16849d

[13:03] *** frost left
[13:04] *** carlmasak joined
[13:05] <carlmasak> ahoy, #raku-dev

[13:05] <tellable6> 2022-01-30T22:29:00Z #raku-dev <tonyo> .tell carlmasak if you haven't, check out haskell's package management.  go's isn't great, there are a lot of problems with the way go.mod works, particularly when you're doing stuff inside of containers.  haskell's is

[13:05] <tellable6> 2022-01-30T22:29:00Z #raku-dev <tonyo> .tell carlmasak pretty great but also v picky

[13:05] <carlmasak> hm

[13:06] <carlmasak> way I understand it, Haskell isn't centralized enough to have _one_ package management

[13:07] *** shareable6 left
[13:07] <japhb> o/ carlmasak 

[13:08] <carlmasak> japhb \o

[13:09] <japhb> What's news from your corner of the 'verse?

[13:09] <carlmasak> .tell tonyo the thing that would make me consider Haskell's package management a significant step up from Go's isn't some technicalities around go.mod, but how well it solves the "stable dependencies" problem.

[13:10] <tellable6> carlmasak, I'll pass your message to tonyo

[13:10] *** shareable6 joined
[13:10] <carlmasak> japhb: not much. we've had some interesting experiences with more covid cases here, but fortunately not so many in my city.

[13:11] <carlmasak> japhb: right now I have a few days off around Labor's Day -- going to use that to code up some hobby/dream projects ;)

[13:11] <japhb> :-/  Never good news to see a Covid resurgence.

[13:11] <japhb> Ah, sounds like fun!

[13:12] <carlmasak> it's more of a surgence, not a resurgence

[13:12] <carlmasak> unless you count Wuhan and Hong Kong, both of which you could, I guess :)

[13:13] <japhb> I think that would be falling into the "All countries I'm not in are small" trap

[13:13] <carlmasak> haha

[13:13] <carlmasak> no, I mean, we've been blessed here with two years of no covid. I know that sounds crazy, and hard to believe

[13:14] <japhb> Wow, that's actually quite impressive

[13:14] <carlmasak> yeah. it took a lot of work, though

[13:15] <carlmasak> basically, you can turn a nanny state to good use in a crisis like this. all the infrastructure for tracking and speedy quarantines is already there

[13:16] <carlmasak> and then there was Shanghai last month. they were like "hah, we're Shanghai, we got this". but -- surprise twist -- they didn't

[13:16] <[Coke]> ... trying to use raku to run the equiv of "start https://google.com" from a raku script. I suspect I might need to actually launch 'cmd' and pass args; anyone done this?

[13:16] <japhb> I can imagine.  (But only imagine, since our local area tried very hard to keep the Covid cases down, but Silicon Valley is such a giant intersection of people from across the planet even strict measures couldn't hold it back.

[13:16] <[Coke]> (for windows, obvs.)

[13:17] <[Coke]> oops. wrong window

[13:20] <carlmasak> japhb: Sweden was like "oh, you can't actually stop a virus. individual citizens are welcome to try". the only saving grace is that the population is small and not so dense -- otherwise it would have been a much bigger failure than it was.

[13:20] <carlmasak> but enough about covid! :D

[13:20] <carlmasak> I wanted to say that I think I grok Harper's "abstract binding trees" now.

[13:21] <carlmasak> wasn't all that difficult, in the end

[13:21] <japhb> Yep, quite the topic switch that ....

[13:21] <japhb> carlmasak: You merely needed to reach enlightenment first?>

[13:22] <carlmasak> that has applications for macros, I believe, although Harper himself doesn't use it that way

[13:22] <carlmasak> well, I found out about them a year or so ago -- and only recently did I start reading PFPL

[13:23] <carlmasak> there's something about the way Harper writes (and talks, in the courses he gives) that makes you feel this guy knows what he's on about. like there's a One True Way to do things, but unfortunately people are mostly deviating from that

[13:23] <carlmasak> I know that's not a very Perlish notion ;)

[13:23] <carlmasak> that's more like something GvM would say

[13:25] <japhb> Or one of my math profs in college

[13:25] <carlmasak> here's the super-short summary of abstract binding trees ("abts"): imagine there's a kind of pointer/link between the use of a variable and its "binder" (declaration site). now forget all the symbolic names, and just keep the pointer structure itself. that's abts

[13:25] <carlmasak> if this sounds like "terms modulo alpha renaming", that's exactly it

[13:28] <japhb> Sounds like a long way around saying "You can do this without the extra level of indirection, you know."

[13:28] <carlmasak> japhb: yes! I think Bob Harper is essentially a math prof, but for programming languages :D

[13:31] <carlmasak> japhb: I think what I like about him right not (and this might change, I guess) is that his theories (in the sense of "explanations of the world") feel like they have predictive power. as in, what he's saying isn't just strong opinions, but strong opinions backed by working models of computation and typing

[13:32] <japhb> :-)

[13:33] <carlmasak> I'm mulling over his (scathing) indictment of dynamic languages

[13:42] <japhb> 🙄

[13:43] <carlmasak> japhb: partly because I don't agree with it, at least not fully. but it's like he's arguing for it convincingly _within the framework he set up_.

[13:45] <carlmasak> the short story is, dynamic typing doesn't mean "no types", it means "one big type". (which, fair enough.) but that in turn means that a lot of actual type checking has to be done at runtime. also every time you construct a new value, you have to add a "type tag" to it. both of those things end up harming performance at runtime.

[13:49] <japhb> It's at this point in such discussions that I pull out the "shine a warm light on your DRAM and suddenly you've invalidated all the "

[13:49] <japhb> 'proofs' that the JVM has made about your code"

[13:50] <japhb> argument

[13:50] <carlmasak> oh, you'll have to step me through that one. literally shining a warm light on the DRAM?

[13:50] <japhb> Yeah, lemme see if I can find it

[13:50] <carlmasak> does that... change the bits...?

[13:51] <carlmasak> ok, so your arguments is basically "that runtime slowdown the dynamic language gives you is _necessary_, and you're foolish for believing otherwise" ? interesting.

[13:52] <japhb> https://www.cs.princeton.edu/~appel/papers/memerr.pdf

[13:53] <japhb> Gotta love a paper with the line "Since we lacked the time or inclination to learn the oil drilling trade ..."

[13:53] *** [Coke] left
[13:54] <japhb> carlmasak: Yeah, you can force a bit flip with basic infrared

[13:54] <carlmasak> oh

[13:54] <japhb> And with some care, break out of the sandbox

[13:56] <japhb> So my point is that we actually have proof by example that mathematical proofs about types made before execution actually don't stick.  Now mind you, I'm not saying every VM is going to do "the right thing" faced with bit flips.  But the assumption that you can make proofs at compile time and have them valid throughout run time is just not true.

[13:56] *** [Coke] joined
[13:58] <japhb> So then it becomes a question of just how careful you want to be ... since you can get a null pointer from a valid one via bit flips, do you throw out all the useful null check elision?  I'd argue not (in favor of recovering if it *does* happen), but the sanctity of mathematical proof doesn't survive reality.

[13:58] <japhb> (With current technology, at least.)

[13:58] *** carlmasak left
[13:59] <japhb> ... all of which is to say, this is part of why I stopped worrying about whether dynamic languages are "less than ideal", because meh, so is reality.

[13:59] *** carlmasak joined
[13:59] <carlmasak> argh. I apologies for my spotty connection. comes with the territory -- literally

[14:00] <[Coke]> carlmasak: oh hai

[14:00] * [Coke] also returning from a spotty internet connection... due to 5g for home being spotty here in suburbia.

[14:01] <japhb> carlmasak: Well, I guess that's what logs are for ...

[14:01] <carlmasak> [Coke]: hi. I'm in burbia. that's not the problem here :)

[14:02] <carlmasak> .oO( great walls of fire! )

[14:02] <japhb> Goodness Gracious!

[14:06] *** carlmasak left
[14:12] *** carlmasak joined
[14:13] <carlmasak> someone mentioned logs...?

[14:13] <carlmasak> where are they nowadays?

[14:14] <sena_kun> carlmasak, https://logs.liz.nl/raku-dev/2022-05-02.html

[14:15] <carlmasak> gracias

[14:22] <carlmasak> japhb: your "reality is less than ideal" comment is what I missed. yes, makes sense.

[14:23] <carlmasak> I'm not sure it's all that much of an either-or situation, though.

[14:26] <carlmasak> I can feel the attraction _both_ of the proof-like certainty afforded by typing, and of the lightweight expressiveness of omitting types (which goes further than just "let the inferencer add type annotations")

[14:29] <carlmasak> I guess what I'm looking for is a glorious synthesis

[14:38] <carlmasak> I'm a very visual person. I think of this as programs having three colors: white, if a type system would say it's good; grey if a type system says "bad" but it's actually good; and black if it's actually bad

[14:39] <carlmasak> the grey part is due to things like undecidability, and type systems erring on the side of simplicity

[14:40] <carlmasak> I think the thing the "statically typed" people get wrong is to dismiss the grey part as if it were automatically the black part

[14:41] <carlmasak> but the thing the "dynamically typed" people get wrong is to act not-at-all interested in the black part, which can actually help provide early feedback about program errors without having to discover them at runtime

[14:43] <nine> Also irclogs.raku.org

[14:43] <carlmasak> arigato

[14:44] <japhb> carlmasak: This is part of why a gradually-typed language like Raku appeals to me -- I can spend effort proportional to my desire to detect additional common cases of programmer error.

[14:45] <japhb> For me the synthesis is *having* a type system without being *beholden to it*

[14:45] <carlmasak> japhb: granted, but -- the term "gradually-typed" is too narrow to apply to Raku. sorry to say that

[14:46] <japhb> Do you have a better term?

[14:46] <carlmasak> Raku's type system is steadfastly dynamic. it _could_ be made truly gradual, but... that'd take a rather big change to the spec

[14:46] <carlmasak> and to Rakudo

[14:47] <japhb> Could you expand on that a bit?

[14:47] <carlmasak> yes, I'm trying to now

[14:47] <japhb> ah

[14:47] <carlmasak> give me a few moments with camelia

[14:47] <carlmasak> m: my Int $x = "five"; say $x

[14:47] <camelia> rakudo-moar 530e17848: OUTPUT: «Type check failed in assignment to $x; expected Int but got Str ("five")␤  in block <unit> at <tmp> line 1␤␤»

[14:48] <carlmasak> that's a runtime error, no?

[14:48] <carlmasak> I know we keep saying "well, we _could_ make that a compile-time error, if we wanted, but that would inevitably weigh down on compile times"

[14:48] <carlmasak> it's that (understandably) attitude that makes it a dynamic language

[14:49] <carlmasak> understandable*

[14:49] <carlmasak> gradual typing is "you get what you pay for" -- in the sense that, the more type annotations you put in, the more your program actually turns statically typed

[14:50] <carlmasak> Julia is the same way -- I consider it something of a missed opportunity in both Raku's and Julia's case

[14:50] <japhb> carlmasak: Yes, and that's actually the case for sub calls, because of the "can this ever work" checks

[14:50] <carlmasak> right

[14:50] <carlmasak> we're close, but not quite there

[14:51] <japhb> And in both cases, you're talking about the *implementation* not the *language*.  I grant that in previous Larry languages, those were the same thing.

[14:51] <carlmasak> 100% static languages "never go wrong". the same guarantee for gradual languages say that when something _does_ go wrong, it's the fault of the untyped part of the code

[14:51] <carlmasak> japhb: no, I'm talking about the spec

[14:52] <japhb> That claim bugs me.  "Type correct" does not at all mean "semantically correct".  One is a (tiny) subset of the other.

[14:52] <carlmasak> fully agree

[14:53] <carlmasak> actually, the "never go wrong" claim is dodgy, as soon as you have simple things like division, which isn't defined when the denominator is zero

[14:53] <carlmasak> look, I'm not a statically-typed fanatic myself. that's at least half of my point here

[14:53] <japhb> People have actually tried to prove (in the compiler) that the denominator can never be zero, but I agree.

[14:53] <japhb> nodnod

[14:54] <carlmasak> I'm saying something like, we could actually be more truly gradual if we wanted.

[14:54] <japhb> Fair.

[14:54] <carlmasak> I'm not sure we ever will, because it'd require actually being a bit academic, which doesn't come easy to languages in the Perl family ;)

[14:54] <carlmasak> we "don't have axes to grind"

[14:55] <carlmasak> which I think is our way as a group to say that we're not ivory-tower obsessed with things like types

[14:56] <carlmasak> gradual typing is not a subset of static typing, but it's a heck of a lot closer to static typing than it is to dynamic typing

[14:56] <japhb> (Funny that Audrey worked on PUGS to study TAPL)

[14:56] <carlmasak> I actually remember that detail! I'm a Perl 6 historian, you know :D

[14:57] <carlmasak> and TAPL was written by Benjamin Pierce, who studied under Robert Harper

[14:57] <japhb> Wheee, full circle.

[14:57] <carlmasak> I haven't read all of TAPL, but PFPL reminds me quite a lot of it

[14:57] <carlmasak> both are fueled by operational semantics (with types)

[14:58] <carlmasak> safety = preservation + progress, and all that good stuff

[15:00] <japhb> Tangent: A couple years ago, this book was making the rounds: https://mitpress.mit.edu/books/engineering-safer-world

[15:01] <japhb> Watching how it was applied, there seemed to be a fair number of people who read it as "How many ways can things individually go wrong *without* the whole system melting down?"

[15:02] <carlmasak> ooh -- immediately follow-up question: is there anything you can tell me about "systems thinking" that would make me not conclude it's some kind of nice-sounding mumbo-jumbo?

[15:02] <carlmasak> (not saying it is, just saying I'm not yet convinced either way)

[15:02] <carlmasak> immediate*

[15:04] <carlmasak> "we need to think in terms of systems" sounds very nice, of course. how does it improve on, say, reductionism? a system is the sum of its components and their interactions.

[15:05] <japhb> Hmmm.  I think because it's not natural for most programmers to think like they're trying to prevent Chernobyl- or Challenger-style epic disasters.  Thinking that way is different and affects your brain in somewhat the way that learning a concatenative language does -- it just starts to stretch in new directions.  And analyses of the failure modes that led to the previous disasters is rather instructive 

[15:05] <japhb> in itself.

[15:06] <carlmasak> fair enough

[15:06] <carlmasak> you're saying people have good intentions, and that's not always enough

[15:07] <carlmasak> I think I've been saying similar things in JavaScript courses for many years :P

[15:07] <japhb> Well, actually that's a key point, I think: Truly *safe* systems (as opposed to "merely" reliable) are able to recover from inevitable failure; they have checks-and-balances built in.  For example, a system that stays up 100% of the time but *could* be brought down by one guy flubbing a keystroke may be reliable, but it's not safe.

[15:07] <carlmasak> it's always fun to see people's faces when they enter `0.1 + 0.2` into the JavaScript console

[15:07] <japhb> Heh

[15:08] <carlmasak> ok, I actually get that point. and I think I appreciate it

[15:08] <carlmasak> these days I'm not as 100% sold on TDD as I used to be, but I still like the idea of it

[15:08] <carlmasak> the idea being that you're kind of your own attacker along the way. you try to imagine all the ways not just to use the system under test, but to stress/abuse it, too

[15:09] <japhb> There was a somewhat famous case of the code in the Apollo computers being designed to shed inputs in priority order when it got overloaded.  And that functionality actually got used during an actual landing.  And saved the mission.

[15:09] <carlmasak> happy path; sad path; evil path

[15:09] <carlmasak> nice!

[15:09] <carlmasak> not just stories about failures, but about successes

[15:09] <japhb> nod

[15:11] <carlmasak> recently I've been really interested in "design by contract", not so much as proposed by Eiffel, but as proposed by Racket

[15:11] <carlmasak> it seems to me it's connected to the whole gradual-types story, but in an interesting and non-obvious way

[15:12] <japhb> At Google it was getting a fair amount of traction from SREs looking at what paths (not just code paths, action paths of any sort including operations work) had no safety net.  And discovering for example that someone could push config that was semantically but not syntactically invalid, and the server code might not check the semantics *before* overwriting the current config.  And thus shoot itself in 

[15:12] <carlmasak> "design by contract" is about module boundaries, and about predicates, which are more fine-grained and more runtime-grounded than types

[15:12] <japhb> the foot.

[15:13] <carlmasak> ooh -- sounds a lot like the kind of work I ended up doing as a team lead in some of the best projects I was in at Edument

[15:13] <japhb> :-)

[15:13] <carlmasak> basically, when you have things running smoothly enough, you get time over to optimize for things like that

[15:13] <carlmasak> answering the question "where are we losing productivity due to not enough semantic safety nets?"

[15:13] <japhb> nodnod

[15:13] <carlmasak> the answers that turn up are always really interesting

[15:14] <carlmasak> linters are good, but they are sooooo stupid!

[15:14] <japhb> Heh, indeed

[15:14] <carlmasak> they only care about surface stuff

[15:14] <carlmasak> I would give an arm and a leg for a _semantic_ linter

[15:14] <carlmasak> ...which also brings us full circle, because I think that's what type systems should really be about. but the type systems are also far too narrow-minded

[15:15] <japhb> .oO( Looks at arm and leg.  Looks at semantic linter.  *thinks very hard* )

[15:15] <carlmasak> haha

[15:16] <carlmasak> like I tell my 7-year-old, "it's an expression"

[15:16] <japhb> :-D

[15:17] <carlmasak> the gradual-typing posse have reached an interesting preliminary result, by the way: "gradual typing is dead"

[15:17] *** evalable6 left
[15:17] *** linkable6 left
[15:17] <carlmasak> as in, it's too costly to defend the static/dynamic boundary with runtime type checking

[15:18] <japhb> Shades of Gödel there

[15:18] <japhb> Ah, got it

[15:18] *** linkable6 joined
[15:19] *** evalable6 joined
[15:19] <carlmasak> the result has been cast somewhat in doubt, but it's fairly strong -- the static parts are paying a sizeable "toll" on runtime-checking values coming in

[15:21] <japhb> I mean, I am *regularly* struck by just how much my Raku programs can do before a frame refresh.  And at the same time, there are papers like the one brought up in #moarvm last week that basically say "The cost of GC is *way* worse than people have been thinking!" and yet -- I wouldn't go back to using a non-managed language for anything but the deepest layers of whatever stack I'm working on.

[15:21] <carlmasak> *nod*

[15:22] <carlmasak> people say Java brought GC to the people, but before that there were Perl, awk, and Lisp

[15:23] <japhb> TRUE

[15:23] <carlmasak> :D

[15:24] <japhb> One of the things that gets me about people trying to tweak a few percent more performance out of a compiler is that we regularly lose way more performance than that when a security researcher discovers a way to catch the CPU designers cheating.

[15:25] <japhb> (This from someone who has at least half a bookshelf of books on assembly languages and micro-optimization)

[15:26] <carlmasak> actually, manual memory management vs GC is structurally fairly similar to static typing vs dynamic typing

[15:26] <japhb> From my point of view, what the CPU designers did for around a decade after I left university was make dynamic languages fast enough for me to stop caring about day-to-day stuff.

[15:29] <carlmasak> I believe that's true -- but...

[15:29] <carlmasak> ...that's still too much of a dynamic-languages perspective for me. I'm so spoiled, I want static help from a good type checker _and_ the freedom afforded by dynamic typing

[15:29] <carlmasak> it's all about that grey area in the middle. the type checker can warn me about things, and I'm free to ignore them and run the program anyway

[15:29] *** carlmasak left
[15:30] <japhb> :-)

[15:32] *** carlmasak joined
[15:33] <carlmasak> this kind of assumes the modern setup of an IDE which can give you information/warnings at a quicker clip than just compilation cycles

[15:36] <japhb> nodnod

[15:38] <carlmasak> I believe Raku _could_ be that language. I believe it isn't, right now, by spec. the nicest thing I could say is that it's probably compatible with such a vision.

[15:39] <carlmasak> as in, someone who wanted to really push the gradual-typing angle all the way would find Raku a fairly decent starting point.

[15:41] <carlmasak> japhb: I think I was like you at some point, calling Perl 6 a gradually-typed language. but Raku is only gradually typed from a dynamically-biased perspective.

[15:42] <carlmasak> or, maybe a more fair way to phrase it is this: "gradually typed" means two things -- it means one thing to the static people and another thing to the dynamic people

[15:42] <carlmasak> Raku is "gradually typed" according to the definition prevalent among the dynamic people

[15:43] <carlmasak> unfortunately, it's the static people's definition that's the interesting one. they have evolved a thing called the "gradual guarantee" -- it says that removing type annotations should never make your program fail. I seriously dig that property.

[15:44] <carlmasak> Raku currently does not have that property. I don't have immediate proof.

[15:57] *** |Tux| left
[16:01] <carlmasak> for anyone who's interested, this paper gives the definition of "gradual guarantee": https://drops.dagstuhl.de/opus/volltexte/2015/5031/pdf/21.pdf

[16:08] <japhb> Unless I misunderstand you, Raku fails that guarantee immediately due to the several ways that multi dispatch happens.  (Of course, I haven't read the paper yet, so I don't know if I'm misunderstanding what they mean.)

[16:09] *** |Tux| joined
[16:10] <carlmasak> I'm not sure, but let's say that's why

[16:12] <carlmasak> earlier today, someone on a group I'm on pointed me to a paper they wrote about how "OO-style" code and "FP-style" code can be automatically converted into each other. I haven't read their paper in full yet, but...

[16:13] <carlmasak> ...the question I want to ask them is, if that's true, that there's always a bijection between these two ways of writing things, then isn't there also a way to write code which straddles those two styles?

[16:13] <carlmasak> something more like Lisp's CLOS or Julia's generic functions

[16:15] <carlmasak> in FP, functions are primary. in OOP, classes are primary. in CLOS/Julia, generic functions are primary; these could best be described as a kind of table-join type between classes and functions

[16:38] <Geth> ¦ problem-solving: lizmat assigned to codesections Issue Taking responsibility for Raku Documentation issues https://github.com/Raku/problem-solving/issues/324

[16:38] <Geth> ¦ problem-solving: lizmat unassigned from codesections Issue Taking responsibility for Raku Documentation issues https://github.com/Raku/problem-solving/issues/324

[16:59] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/05/02/2022-18-period/

[17:03] <carlmasak> lizmat: nice! hi!

[17:03] <lizmat> carlmasak o.

[17:03] <lizmat> o/ rather  :-)

[17:03] <carlmasak> :)

[17:03] * carlmasak was wondering whether the '.' was a fist or something

[17:04] <lizmat> nope, . just adjacent to / on my keyboard

[17:04] <carlmasak> "the keys are like right next to each other"

[17:05] <lizmat> so that's quite a lot of discussion while I was away cycling :-)

[17:05] <carlmasak> I have a few days off, and I decided to show up here :)

[17:13] <lizmat> nice to see you here again...

[17:13] <lizmat> and knowing you 3 (4?) are all healthy  :-)

[17:20] <carlmasak> 3. and yes :)

[17:21] <carlmasak> hope that goes for both of you as well.

[17:22] <lizmat> we had a little bout with Covid...  but only a little bit

[17:22] <lizmat> cycled 40km today, so there's that  :)

[17:23] <carlmasak> great

[17:23] <carlmasak> all of my original family members in Sweden have had "a little bout" too at this point -- it seems to be more or less inevitable

[17:24] <lizmat> we also still have no idea where we picked it up

[17:24] <lizmat> we had someone staying for use for a few months, and they tested positive at one point (and they had been out far less than Wendy and I did)

[17:25] <carlmasak> I take it as a really good reason to stay healthy and exercise, something I'm generally bad at

[17:25] <lizmat> a week later Wendy and I also tested positive...

[17:25] <carlmasak> so that when it finally comes to these parts, at least my body has a good defense

[17:26] <lizmat> well, I guess my physical condition (albeit pretty overweight) is compensated for by ~ 800km / month on a bicycle

[17:26] <carlmasak> you do seem to be good at that, yes

[17:26] <carlmasak> I walk to work and back home every day, but that's not enough

[17:27] <lizmat> that would not be enough for me either, and a *lot* less  :-)

[17:27] <carlmasak> during this 5-day vacation, I've taken up running (again). that feels pretty good.

[17:28] *** sena_kun left
[17:28] <carlmasak> will try to keep something like that going when work resumes

[17:28] <carlmasak> like it or not, we're stuck with physical bodies for now, and have to tend to their upkeep

[17:31] <lizmat> indeed....  :-)

[17:40] <carlmasak> lizmat: glad to hear you and wendy have made it through the covid barrier seemingly unscathed

[17:40] *** carlmasak left
[17:44] <nine> I think, the trick is to find some sports or exercises that you can actually enjoy (at least after getting used to them)

[17:59] <jdv> kinda same as $work/$jib

[17:59] <jdv> gah.  $job.

[18:06] *** reportable6 left
[18:07] *** reportable6 joined
[18:11] <drakonis> lizmat: could you amend the visual studio support paragraph to visual studio code?

[18:12] <lizmat> ah, have I misunderstood?

[18:13] <lizmat> drakonis: like this?  (please reload)

[18:14] <drakonis> it hasnt updated here yet

[18:16] <lizmat> it now says: "In related news, bscan has announced Raku Programming Language support in Visual Studio Code."

[18:18] <drakonis> ah, cool.

[18:18] <drakonis> works for me

[18:24] <lizmat> :-)

[18:31] *** rypervenche left
[18:36] *** rypervenche joined
[18:38] <drakonis> it is quite nice to have an lsp implementation

[18:38] <drakonis> its nice to not be locked to comma for editing

[18:41] * lizmat is locked in vi for editing  :-)

[18:47] * jdv is a lazy, stuck vi'er

[18:48] <lizmat> .oO( Stockholm Syndrome )

[18:49] <lizmat> I guess it was a more natural transition from WordStar to vi  :-)

[19:32] *** Altai-man left
[19:33] *** sena_kun joined
[20:21] *** sena_kun left
[20:23] *** sena_kun joined
[20:56] <Geth> ¦ rakudo/rakuast: cecd54ff94 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[20:56] <Geth> ¦ rakudo/rakuast: Automatically set onlystar flag on onlystar routines

[20:56] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/cecd54ff94

[21:00] <discord-raku-bot> <Bscan🍺#6614> I created the vscode Raku extension because I'm interested in learning Raku and didn't want to switch editors (not sure commaIDE does remote dev anyway, and I primarily use a linux VM with a Windows front-end). Hopefully it's useful to other people as well.

[21:09] <[Coke]> bscan++

[21:40] <SmokeMachine> Bscan: Thank you very much for that! Just installed perlnavigator on my nvim and that's working perfectly! Next I'll install rakunavigator! :)

[21:43] <drakonis> it is good to hear that there's interest in raku

[21:43] <drakonis> from the perl community, that is.

[21:50] <timo> it seems a little like overselling to say visual studio gets raku support when it's only vscode

[21:52] <japhb> timo: Isn't vscode where most of Microsoft's effort is going for IDE work these days?

[21:56] <timo> i

[21:56] <timo> don't think so actually?

[21:56] <timo> but i don't actually have any source for that claim

[21:58] <discord-raku-bot> <Bscan🍺#6614> Vscode seems more popular. Maybe not for C/C++, but it's a great fit for Perl and Raku. https://insights.stackoverflow.com/survey/2021#most-popular-technologies-new-collab-tools 

[21:58] <discord-raku-bot> <Bscan🍺#6614> Raku-navigator has far fewer features than the perl-navigator, but pull requests are welcome

[22:00] <drakonis> raku weekly got updated to mention its actually vscode

[22:01] <timo> ah good

[22:02] <timo> i see now you already asked for this exact thing hours ago

[22:05] <discord-raku-bot> <Bscan🍺#6614> smokemachine, if you have any feedback on either navigator, feel free to reach out. The Raku language server piece doesn't do much yet, but it's a start.

[22:35] *** evalable6 left
[22:35] *** linkable6 left
[22:37] *** linkable6 joined
[22:38] *** evalable6 joined
[23:17] *** TempIRCLogger left
