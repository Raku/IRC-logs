[00:07] *** reportable6 left
[00:07] *** reportable6 joined
[00:33] *** [Coke]_ joined
[00:33] *** [Coke] left
[01:43] *** [Coke]_ is now known as [Coke]\

[01:43] *** [Coke]\ is now known as [Coke]

[04:34] *** squashable6 left
[04:34] *** sourceable6 left
[04:34] *** shareable6 left
[04:34] *** evalable6 left
[04:34] *** coverable6 left
[04:34] *** bloatable6 left
[04:34] *** nativecallable6 left
[04:34] *** bisectable6 left
[04:34] *** statisfiable6 left
[04:34] *** unicodable6 left
[04:34] *** linkable6 left
[04:34] *** quotable6 left
[04:34] *** notable6 left
[04:34] *** committable6 left
[04:34] *** reportable6 left
[04:34] *** benchable6 left
[04:34] *** greppable6 left
[04:34] *** releasable6 left
[04:34] *** notable6 joined
[04:34] *** nativecallable6 joined
[04:34] *** coverable6 joined
[04:35] *** committable6 joined
[04:35] *** shareable6 joined
[04:35] *** bisectable6 joined
[04:35] *** squashable6 joined
[04:35] *** bloatable6 joined
[04:35] *** linkable6 joined
[04:37] *** evalable6 joined
[05:08] *** MasterDuke left
[05:09] *** discord-raku-bot left
[05:09] *** discord-raku-bot joined
[05:20] *** discord-raku-bot left
[05:20] *** discord-raku-bot joined
[05:35] *** releasable6 joined
[05:36] *** unicodable6 joined
[05:56] *** frost joined
[06:36] *** statisfiable6 joined
[06:37] *** greppable6 joined
[07:10] *** reportable6 joined
[07:34] *** sourceable6 joined
[07:36] *** benchable6 joined
[08:36] *** greppable6 left
[08:36] *** benchable6 left
[08:36] *** sourceable6 left
[08:36] *** releasable6 left
[08:36] *** reportable6 left
[08:36] *** linkable6 left
[08:36] *** evalable6 left
[08:36] *** notable6 left
[08:36] *** bloatable6 left
[08:36] *** squashable6 left
[08:36] *** statisfiable6 left
[08:36] *** coverable6 left
[08:36] *** bisectable6 left
[08:36] *** shareable6 left
[08:36] *** quotable6 joined
[08:36] *** committable6 left
[08:36] *** unicodable6 left
[08:37] *** statisfiable6 joined
[08:37] *** sourceable6 joined
[08:38] *** releasable6 joined
[08:39] *** reportable6 joined
[09:37] *** committable6 joined
[09:38] *** notable6 joined
[09:39] *** shareable6 joined
[09:39] *** squashable6 joined
[09:39] *** linkable6 joined
[10:15] <lizmat> Files=1351, Tests=117115, 293 wallclock secs (35.02 usr  9.81 sys + 4087.29 cusr 333.99 csys = 4466.11 CPU)

[10:19] *** discord-raku-bot left
[10:19] *** discord-raku-bot joined
[10:36] *** evalable6 joined
[10:37] *** benchable6 joined
[10:38] *** bisectable6 joined
[10:39] *** coverable6 joined
[11:37] *** unicodable6 joined
[11:38] *** bloatable6 joined
[12:07] *** reportable6 left
[12:15] *** frost left
[12:51] <dogbert17> m: multi foo (int) { say "OK!" }; foo 2 # should this work?

[12:51] <camelia> rakudo-moar 3f10f7daa: OUTPUT: «Cannot resolve caller foo(Int:D); none of these signatures matches:␤    (int)␤  in block <unit> at <tmp> line 1␤␤»

[12:56] <Voldenet> m: multi foo (Int) { say "OK!" }; foo 2 # should this work?

[12:56] <camelia> rakudo-moar 3f10f7daa: OUTPUT: «OK!␤»

[12:57] <Voldenet> I'm betting it should

[12:58] <dogbert17> I agree :)

[12:58] <dogbert17> m: sub foo (int) { say "OK!" }; foo 2 # there's also this

[12:58] <camelia> rakudo-moar 3f10f7daa: OUTPUT: «OK!␤»

[12:58] <Voldenet> m: multi foo (int $i) { $i + $i }; say foo 2

[12:58] <camelia> rakudo-moar 3f10f7daa: OUTPUT: «Cannot resolve caller foo(Int:D); none of these signatures matches:␤    (int $i)␤  in block <unit> at <tmp> line 1␤␤»

[12:58] <Voldenet> this should definitely work

[13:00] <dogbert17> yes it's odd

[13:02] <dogbert17> perhaps lizmat knows more

[13:04] <Voldenet> m: say \(2) ~~ :(Int)

[13:04] <camelia> rakudo-moar 3f10f7daa: OUTPUT: «True␤»

[13:04] <Voldenet> m: say \(2) ~~ :(int)

[13:04] <camelia> rakudo-moar 3f10f7daa: OUTPUT: «Lexical with name '<anon>' does not exist in this frame␤  in block <unit> at <tmp> line 1␤␤»

[13:04] <Voldenet> hmmmmmm

[13:12] <dogbert17> your latest case seems to be failing around here I think: https://github.com/rakudo/rakudo/blob/master/src/Perl6/bootstrap.c/BOOTSTRAP.nqp#L424

[13:34] <lizmat> that hasn't worked like forever  :-(

[13:35] <lizmat> multi and natives don't work, jnthn knows the specifics  :-)

[13:36] *** greppable6 joined
[13:45] <nine> That specific case (int literal) could be made to work via the optimizer and it could be quite beneficial. IIRC it's just the Want node that for now is in the way.

[14:09] *** MasterDuke joined
[14:18] *** carlmasak joined
[14:18] *** uzl[m] joined
[14:22] <MasterDuke> nine: you mean collapse all Wants down to just the IVal if there's a compile-time-known value?

[14:30] <nine> Yes

[14:31] <bartolin> just for the record: the jvm backend prints '4' for the 'multi foo' example from above

[14:31] <nine> MasterDuke: I think I did send you my work in progress for optimizations of multi dispatch to native candidates with compile time constants, didn't I?

[14:31] <MasterDuke> this topic sounds somewhat familiar, but if you sent me something i've lost it

[14:33] <nine> Well, GitHub doesn't forget :) https://gist.github.com/niner/05f73c3288e450b7712e723288c8d0f6

[14:35] <MasterDuke> oh, i think i've seen that before, but iirc i was doing something slightly different (don't remember what that was either)

[14:36] <MasterDuke> thanks

[14:49] <MasterDuke> nine: btw, don't remember asking before, but what's wip about it?

[14:53] *** sena_kun left
[14:54] <nine> Actually I don't remember

[14:54] *** sena_kun joined
[14:57] <MasterDuke> m: multi foo (int $i) { $i + $i }; my $a = 2; say foo $a

[14:57] <camelia> rakudo-moar 3f10f7daa: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling foo(Mu) will never work with any of these multi signatures:␤    (int $i)␤at <tmp>:1␤------> oo (int $i) { $i + $i }; my $a = 2; say ⏏foo $a␤»

[14:57] <MasterDuke> why is ^^^ saying `foo(Mu)`?

[14:58] <nine> no idea

[14:58] <MasterDuke> committable6: releases multi foo (int $i) { $i + $i }; my $a = 2; say foo $a

[14:59] <committable6> MasterDuke, https://gist.github.com/09cadebc97fb51e30531a75cadac7821

[14:59] <MasterDuke> bisectable6: old=2019.11 new=2020.01 multi foo (int $i) { $i + $i }; my $a = 2; say foo $a

[14:59] <bisectable6> MasterDuke, Bisecting by output (old=2019.11 new=2020.01) because on both starting points the exit code is 1

[15:00] <bisectable6> MasterDuke, bisect log: https://gist.github.com/8c6f40017b0f5613cb0c0c2669d835c2

[15:00] <bisectable6> MasterDuke, (2019-10-14) https://github.com/rakudo/rakudo/commit/73d5e74d96197312da62509058a0970668913bc8

[15:06] *** squashable6_ joined
[15:06] *** statisfiable6_ joined
[15:07] *** squashable6 left
[15:07] *** statisfiable6 left
[15:07] *** carlmasak left
[15:08] *** shareable6_ joined
[15:08] *** Xliff_ joined
[15:09] *** sourceable6_ joined
[15:10] *** bisectable6_ joined
[15:12] *** shareable6 left
[15:12] *** sourceable6 left
[15:12] *** bisectable6 left
[15:12] *** Xliff left
[15:24] *** dogbert17 left
[15:24] *** Kaiepi left
[15:24] *** evalable6 left
[15:26] *** gfldex left
[15:26] *** gfldex_ joined
[15:26] *** gfldex left
[15:27] *** sivoais_ joined
[15:27] *** sivoais left
[15:27] *** RakuIRCLogger left
[15:27] *** coverable6 left
[15:27] *** coverable6 joined
[15:28] *** bloatable6 left
[15:28] *** bloatable6 joined
[15:28] *** lucs_ joined
[15:29] *** nativecallable6_ joined
[15:30] *** nativecallable6 left
[15:30] *** lucs left
[15:30] *** qorg11 left
[15:30] *** qorg11 joined
[15:35] <jdv> starting the release...

[15:42] <dogbert11> ++jdv

[15:54] <AlexDaniel> for the record, tellable is probably still broken (will try to fix today), let me know if there are issues with anything else

[15:54] <AlexDaniel> does anybody know why colabti stopped working? https://colabti.org/irclogger/irclogger_logs/raku-dev

[15:55] <AlexDaniel> a, ok, that is known but feb can't be reached

[15:55] <AlexDaniel> I see…

[16:09] *** reportable6 joined
[16:36] <bartolin> committable6: fae105b070bb multi foo (int $i) { $i + $i }; my $a = 2; say foo $a

[16:36] <committable6> bartolin, ¦fae105b: «Cannot resolve caller foo(Int:D); none of these signatures match:␤    (int $i)␤  in block <unit> at /tmp/ayhfcbRR8w line 1␤␤ «exit code = 1»»

[16:37] <bartolin> committable6: 6f086e65ee multi foo (int $i) { $i + $i }; my $a = 2; say foo $a  ## just to be sure

[16:37] <committable6> bartolin, ¦6f086e6: «Cannot resolve caller foo(Int:D); none of these signatures match:␤    (int $i)␤  in block <unit> at /tmp/j0limhGhDF line 1␤␤ «exit code = 1»»

[16:38] <bartolin> hmm, so the old one was a runtime error

[16:39] <MasterDuke> ah, i didn't notice that. compile time is better...

[16:40] <bartolin> I guess my former self thought that as well. But than, it probably didn't consider the details in the error message :)

[16:41] <bartolin> probably there is no way to give something else than Mu at compile time, right?

[16:41] <MasterDuke> well, it does get the type if you give it one

[16:42] <MasterDuke> m: multi foo (int $i) { $i + $i }; my Int $a = 2; say foo $a

[16:42] <camelia> rakudo-moar 3f10f7daa: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling foo(Int) will never work with any of these multi signatures:␤    (int $i)␤at <tmp>:1␤------> int $i) { $i + $i }; my Int $a = 2; say ⏏foo $a␤»

[16:42] <bartolin> yeah, that's good at least

[16:46] <bartolin> I'll add that to the issue (https://github.com/rakudo/rakudo/issues/4823)

[16:51] *** sena_kun left
[16:52] *** sena_kun joined
[17:39] <Xliff_> p6-Suite Compile Times: 9094.51s (Non-Parallel )  / 8841.291 (Parallel) 

[17:40] <Xliff_> This represents a serious regression in parallel compilation time. 

[17:40] <Xliff_> For reference, last week's time was almost 7 times faster for parallel.

[17:41] <Xliff_> In some cases, parallel times were longer than non-parallel. Might this be a file locking issue?

[17:43] *** [Coke] left
[17:43] <lizmat> Xliff_: I'm actually looking at that at the moment, but am waiting for the release to finish

[17:47] *** [Coke] joined
[17:53] <Xliff_> lizmat: Thank you.

[18:05] <Geth> ¦ rakudo/release-2022.03: 1920a58258 | (Justin DeVuyst)++ | 3 files

[18:05] <Geth> ¦ rakudo/release-2022.03: Update changelog + announcement

[18:05] <Geth> ¦ rakudo/release-2022.03: 

[18:05] <Geth> ¦ rakudo/release-2022.03: Deliberately not logged:

[18:05] <Geth> ¦ rakudo/release-2022.03: 

[18:05] <Geth> ¦ rakudo/release-2022.03: [0b11a143][83b2417a][ce07254a][b5f49ace][a2cf0ea5][b67d38c4][fafcca31]

[18:05] <Geth> ¦ rakudo/release-2022.03: [fbe73152][2de6d63d][ad85660c][451ad0ea][0dead3c6][d53b3ee8][68a43f9d]

[18:05] <Geth> ¦ rakudo/release-2022.03: [8fb0a66d][1d733cbf][1cd72f1b][1823cdad][5d1056a0][be86adba][66a67dee]

[18:05] <Geth> ¦ rakudo/release-2022.03: [54f98fd7][0831a3b5][26e77d98][430d3dd4][f1eccb39][3bde138c][90724381]

[18:05] <Geth> ¦ rakudo/release-2022.03: [0e9b2b7c][6e6ef03c][a14b92e2][cd02552c][29fc6507][599e33ef][6e383c20]

[18:05] <Geth> ¦ rakudo/release-2022.03: [8d284d8c][46ec1ce7]

[18:05] <Geth> ¦ rakudo/release-2022.03: review: https://github.com/rakudo/rakudo/commit/1920a58258

[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[19:01] *** gfldex_ is now known as gfldex

[19:15] <jdv> should the t/spec in the release tarball be the 6.d-errata branch?

[19:25] <lizmat> sena_kun ^^

[19:29] <lizmat> afk&

[20:01] *** evalable6 left
[20:01] *** linkable6 left
[20:02] *** linkable6 joined
[20:03] *** evalable6 joined
[20:37] <jdv> can someone unblock me from updating the roast errata branches?

[20:37] <jdv> who is a admin or whatever on that repo?

[20:47] <vrurg> jdv: as a member of Raku group you must have the full access.

[20:47] <vrurg> write access, to be precise

[20:49] <vrurg> Ah, there seem to be branch restrictions.

[20:49] <vrurg> jdv: try now.

[20:49] <jdv> same

[20:50] <jdv> maybe takes a moment to take?

[20:50] <vrurg> Sorry, forgot to click "save". :) Now? 

[20:50] <Geth> ¦ roast/6.d-errata: 1cabed24d8 | (Daniel Sockwell)++ (committed by Justin DeVuyst) | S12-attributes/instance.t

[20:50] <Geth> ¦ roast/6.d-errata: Fix over-specific regression test (#798)

[20:50] <Geth> ¦ roast/6.d-errata: 

[20:50] <Geth> ¦ roast/6.d-errata: Two S12-attribute regression tests checked the exact value of an

[20:50] <Geth> ¦ roast/6.d-errata: error's $.declaring property (expecting it to be `n attribute`).  This

[20:50] <Geth> ¦ roast/6.d-errata: changes the matcher to test that $.declaring contains `attribute`,

[20:50] <Geth> ¦ roast/6.d-errata: which seems more robust.

[20:50] <Geth> ¦ roast/6.d-errata: review: https://github.com/Raku/roast/commit/1cabed24d8

[20:50] <jdv> thanks

[20:50] <Geth> ¦ roast/6.d-errata: d2a147d479 | (Vadim Belman)++ (committed by Justin DeVuyst) | 2 files

[20:50] <vrurg> Good!

[20:50] <Geth> ¦ roast/6.d-errata: Accommodate tests to fixes of classification over junctions

[20:50] <Geth> ¦ roast/6.d-errata: 

[20:50] <Geth> ¦ roast/6.d-errata: The previous version of these tests was a statement of buggy behavior

[20:50] <Geth> ¦ roast/6.d-errata: where classify was autothreading over junctions internally and producing

[20:50] <Geth> ¦ roast/6.d-errata: incorrect results. This version establishes less confusing and more

[20:50] <Geth> ¦ roast/6.d-errata: useful standard of method's behavior.

[20:50] <Geth> ¦ roast/6.d-errata: 

[20:50] <Geth> ¦ roast/6.d-errata: <…commit message has 8 more lines…>

[20:51] <Geth> ¦ roast/6.d-errata: review: https://github.com/Raku/roast/commit/d2a147d479

[20:51] <Geth> ¦ roast/6.c-errata: 561e795bb1 | (Daniel Sockwell)++ (committed by Justin DeVuyst) | S12-attributes/instance.t

[20:51] <Geth> ¦ roast/6.c-errata: Fix over-specific regression test (#798)

[20:51] <Geth> ¦ roast/6.c-errata: 

[20:51] <Geth> ¦ roast/6.c-errata: Two S12-attribute regression tests checked the exact value of an

[20:51] <Geth> ¦ roast/6.c-errata: error's $.declaring property (expecting it to be `n attribute`).  This

[20:51] <Geth> ¦ roast/6.c-errata: changes the matcher to test that $.declaring contains `attribute`,

[20:51] <Geth> ¦ roast/6.c-errata: which seems more robust.

[20:51] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/561e795bb1

[20:51] <Geth> ¦ roast/6.c-errata: c36d783518 | (Vadim Belman)++ (committed by Justin DeVuyst) | 2 files

[20:51] <Geth> ¦ roast/6.c-errata: Accommodate tests to fixes of classification over junctions

[20:51] <Geth> ¦ roast/6.c-errata: 

[20:51] <Geth> ¦ roast/6.c-errata: The previous version of these tests was a statement of buggy behavior

[20:51] <Geth> ¦ roast/6.c-errata: where classify was autothreading over junctions internally and producing

[20:51] <Geth> ¦ roast/6.c-errata: incorrect results. This version establishes less confusing and more

[20:51] <Geth> ¦ roast/6.c-errata: useful standard of method's behavior.

[20:51] <Geth> ¦ roast/6.c-errata: 

[20:51] <Geth> ¦ roast/6.c-errata: <…commit message has 8 more lines…>

[20:51] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/c36d783518

[21:38] <Geth> ¦ nqp: e777039f10 | (Justin DeVuyst)++ | tools/templates/MOAR_REVISION

[21:38] <Geth> ¦ nqp: [release] Bump MoarVM revision to 2022.03

[21:38] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/e777039f10

[21:38] <Geth> ¦ nqp: dcb1b6baa1 | (Justin DeVuyst)++ | VERSION

[21:38] <Geth> ¦ nqp: [release] Bump VERSION to 2022.03

[21:38] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/dcb1b6baa1

[21:38] <Geth> ¦ rakudo/release-2022.03: ef5c08b99f | (Justin DeVuyst)++ | tools/templates/NQP_REVISION

[21:38] <Geth> ¦ rakudo/release-2022.03: [release] Bump NQP revision to 2022.03

[21:38] <Geth> ¦ rakudo/release-2022.03: review: https://github.com/rakudo/rakudo/commit/ef5c08b99f

[21:38] <Geth> ¦ rakudo/release-2022.03: 2c3bce8bf4 | (Justin DeVuyst)++ | VERSION

[21:38] <Geth> ¦ rakudo/release-2022.03: [release] Bump VERSION to 2022.03

[21:38] <Geth> ¦ rakudo/release-2022.03: review: https://github.com/rakudo/rakudo/commit/2c3bce8bf4

[21:48] <Geth> ¦ rakudo: jdv++ created pull request #4824: Release 2022.03

[21:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4824

[21:50] <Geth> ¦ rakudo/master: 4 commits pushed by (Justin DeVuyst)++

[21:50] <Geth> ¦ rakudo/master: 1920a58258 | Update changelog + announcement

[21:50] <Geth> ¦ rakudo/master: ef5c08b99f | [release] Bump NQP revision to 2022.03

[21:50] <Geth> ¦ rakudo/master: 2c3bce8bf4 | [release] Bump VERSION to 2022.03

[21:50] <Geth> ¦ rakudo/master: aec3d8a6f3 | Merge pull request #4824 from rakudo/release-2022.03

[21:50] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/3f10f7daaca2...aec3d8a6f3cc

[21:50] <lizmat> whee!

[21:50] <lizmat> jdv++

[21:51] <jdv> almost done, maybe

[22:01] <lizmat> builds and tests ok on MacOS jdv++ once again!

[22:01] <jdv> can i get commit on rakudo.org?  i thought that had happened already.

[22:02] <jdv> lizmat: cool

[22:02] <lizmat> should be able now

[22:03] <lizmat> invite sent

[22:05] <jdv> I believe my part is done.  woohoo.

[22:05] <jdv> patrickb: release

[22:06] <jdv> .tell El_Che release

[22:06] <jdv> i guess not then:(

[22:07] <jdv> lizmat: thanks!

[22:09] <lizmat> AlexDaniel said he'd look at tellable   I guess we need to start looking at hosting that elsewhere potentially

[22:09] <jdv> oh right - i forgot already

[22:09] <jdv> i'm sure El_Che will notice eventually

[22:10] <jdv> dinner and stuff &

[22:12] <Geth> ¦ rakudo: c081f32838 | (Elizabeth Mattijsen)++ | tools/build/install-core-dist.raku

[22:12] <Geth> ¦ rakudo: Don't create a lib/.precomp, we don't need it

[22:12] <Geth> ¦ rakudo: 

[22:12] <Geth> ¦ rakudo: All we need is to load the source of CURS and EVAL it.

[22:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c081f32838

[22:12] <lizmat> afk&

[22:27] *** linkable6 left
[22:27] *** evalable6 left
[22:29] *** evalable6 joined
[22:55] <dogbert11> jdv++

[23:06] <sena_kun> jdv, "should the t/spec in the release tarball be the 6.d-errata branch?" <- I don't think there is a discussed convention right now, so whatever technically happens is "canon". The release should pass all three branches though (main and erratas), so it doesn't matter much in my understanding.

[23:06] <sena_kun> congrats with the release!

[23:23] <jdv> i had just assumed it would be master but then realized its 6d.

[23:24] <jdv> but now that i think about it should it even be included in any form?...

[23:29] *** evalable6 left
[23:34] <ugexe> What is the purpose of changing the CUR used for install dist?

[23:35] <ugexe> Was there any consideration that perhaps it should use the same loading machinery everything else uses so design decisions like e.g. emulates are still relevant?

[23:35] <ugexe> im still out of town for a few days, but I hope to see things are being contemplated before implementation 

[23:36] *** sena_kun left
[23:39] <ugexe> Anyway that commit is wrong other than removing the one use lib li e 

[23:39] <ugexe> line

[23:43] <ugexe> Actually even that line would be wrong then

[23:43] <ugexe> lizmat: please request reviews for these things

[23:44] <ugexe> yes I saw your commit to master but I also felt compelled to comment on it during vacation because it was just pushed right in 

[23:45] <jdv> how is your vaca goin?

[23:45] * jdv needs a vaca

[23:49] <drakonis> a vaca?

[23:49] <drakonis> oh

[23:49] <drakonis> vacation

