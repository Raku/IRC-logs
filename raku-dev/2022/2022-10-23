[00:07] *** reportable6 left
[00:10] *** reportable6 joined
[01:10] *** reportable6 left
[01:10] *** quotable6 left
[01:10] *** squashable6 left
[01:10] *** unicodable6 left
[01:10] *** committable6 left
[01:10] *** evalable6 left
[01:10] *** linkable6 left
[01:10] *** notable6 left
[01:10] *** coverable6 left
[01:10] *** greppable6 left
[01:10] *** nativecallable6 left
[01:10] *** shareable6 left
[01:10] *** tellable6 left
[01:10] *** sourceable6 left
[01:10] *** benchable6 left
[01:10] *** bisectable6 left
[01:10] *** statisfiable6 left
[01:10] *** bloatable6 left
[01:10] *** releasable6 left
[01:10] *** reportable6 joined
[01:10] *** notable6 joined
[01:10] *** statisfiable6 joined
[01:10] *** linkable6 joined
[01:10] *** tellable6 joined
[01:10] *** greppable6 joined
[01:11] *** shareable6 joined
[01:11] *** evalable6 joined
[01:11] *** bisectable6 joined
[01:11] *** releasable6 joined
[01:11] *** coverable6 joined
[01:11] *** nativecallable6 joined
[01:12] *** committable6 joined
[01:12] *** benchable6 joined
[01:12] *** quotable6 joined
[01:12] *** squashable6 joined
[01:13] *** unicodable6 joined
[01:13] *** bloatable6 joined
[01:13] *** sourceable6 joined
[01:33] *** Kaipei left
[01:50] *** timo left
[02:05] *** timo joined
[02:12] *** timo left
[02:43] *** timo joined
[04:20] *** greppable6 left
[04:20] *** evalable6 left
[04:20] *** bisectable6 left
[04:20] *** coverable6 left
[04:20] *** statisfiable6 left
[04:20] *** bloatable6 left
[04:20] *** tellable6 left
[04:20] *** unicodable6 left
[04:20] *** shareable6 left
[04:20] *** benchable6 left
[04:20] *** notable6 left
[04:20] *** nativecallable6 left
[04:20] *** committable6 left
[04:20] *** reportable6 left
[04:20] *** linkable6 left
[04:20] *** sourceable6 left
[04:20] *** releasable6 left
[04:20] *** squashable6 left
[04:20] *** quotable6 left
[04:21] *** quotable6 joined
[04:21] *** benchable6 joined
[04:21] *** statisfiable6 joined
[04:21] *** reportable6 joined
[04:21] *** bisectable6 joined
[04:21] *** nativecallable6 joined
[04:21] *** squashable6 joined
[04:22] *** shareable6 joined
[04:22] *** tellable6 joined
[04:22] *** evalable6 joined
[04:22] *** greppable6 joined
[04:22] *** bloatable6 joined
[04:22] *** notable6 joined
[04:23] *** committable6 joined
[04:23] *** releasable6 joined
[04:23] *** linkable6 joined
[04:23] *** sourceable6 joined
[04:23] *** coverable6 joined
[04:23] *** unicodable6 joined
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[07:01] *** Kaipei joined
[08:10] <[Tux]> Rakudo v2022.07-73-gd9059e3fe (v6.d) on MoarVM 2022.07-16-g3ae8a31c1

[08:10] <[Tux]> csv-test-xs-20      0.405 -  0.616

[08:10] <[Tux]> csv-ip5xs           0.856 -  0.947

[08:10] <[Tux]> test-t --race       0.964 -  1.136

[08:10] <[Tux]> test-t              1.504 -  1.614

[08:10] <[Tux]> csv-parser          3.756 -  3.997

[08:10] <[Tux]> csv-ip5xs-20        5.423 -  5.634

[08:10] <[Tux]> test                6.807 -  7.838

[08:10] <[Tux]> test-t-20 --race    6.883 -  8.519

[08:10] <[Tux]> test-t-20          22.136 - 24.003

[08:24] *** epony left
[09:16] *** epony joined
[09:52] *** sena_kun joined
[10:12] *** Xliff joined
[10:12] <Xliff> P6-GLib suite timing statistics for Raku 2022.07.73.gd.9059.e.3.fe

[10:12] <Xliff> Total number of projects: 33 (484029 loc)

[10:12] <Xliff> Total non-parallel compile times: 8719.240 (264.219 avg)

[10:12] <Xliff> Total parallel compile times: 1609.475 (48.772 avg) 5.417x speedup

[10:13] <Xliff> Better performance on non parallel, but worse performance on parallel from 2 weeks ago. 

[10:13] <Xliff> Timings weren't performed last week due to segfaults in Rakudo.

[12:06] *** reportable6 left
[12:07] *** reportable6 joined
[12:54] <nine> OMG I finally have it. Even the precompilation thing was a red herring. In the end it's just that RakuAST::LexicalScope::IMPL-QAST-DECLS got the order wrong ending in child blocks getting added to the AST before lexical declarations. That led to the QAST compiler to find the outer lexical scope's variable first leading to wrong results. It should have been worse, but I think, if the QAST compiler can't 

[12:54] <nine> find a lexical in the outer scope either, it will generate a runtime lookup which would then find the lexical that's declared too late

[12:55] <lizmat> nine++

[13:29] *** sena_kun left
[13:30] *** sena_kun joined
[13:45] <Geth> ¦ rakudo/rakuast: 874becf258 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[13:45] <Geth> ¦ rakudo/rakuast: Add a fallback resolver for BEGIN time run code objects.

[13:45] <Geth> ¦ rakudo/rakuast: 

[13:45] <Geth> ¦ rakudo/rakuast: Ye olde implementation created a wrapper frame containing the lexical symbols

[13:45] <Geth> ¦ rakudo/rakuast: of all outer scopes. This is rather costly and blows up bytecode size. Instead,

[13:45] <Geth> ¦ rakudo/rakuast: we now use the VMs new capability to run a custom resolver when it cannot find

[13:45] <Geth> ¦ rakudo/rakuast: a lexical by itself.

[13:45] <Geth> ¦ rakudo/rakuast: 

[13:45] <Geth> ¦ rakudo/rakuast: This first implementation only gets us compile-time-known values, but it's a

[13:45] <Geth> ¦ rakudo/rakuast: start.

[13:45] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/874becf258

[13:46] <Geth> ¦ rakudo/rakuast: 522f1b029a | (Stefan Seifert)++ | 2 files

[13:46] <Geth> ¦ rakudo/rakuast: Fix name conflicts of auto-generated proto declarations

[13:46] <Geth> ¦ rakudo/rakuast: 

[13:46] <Geth> ¦ rakudo/rakuast: These "declarations" don't need a name. They are only there so the

[13:46] <Geth> ¦ rakudo/rakuast: auto-generated proto gets added to the QAST somewhere.

[13:46] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/522f1b029a

[13:46] <Geth> ¦ rakudo/rakuast: b89009998d | (Stefan Seifert)++ | src/Raku/ast/scoping.rakumod

[13:46] <Geth> ¦ rakudo/rakuast: Fix lexicals getting declared too late

[13:46] <Geth> ¦ rakudo/rakuast: 

[13:46] <Geth> ¦ rakudo/rakuast: RakuAST::LexicalScope::IMPL-QAST-DECLS got the order wrong ending in child

[13:46] <Geth> ¦ rakudo/rakuast: blocks getting added to the AST before lexical declarations. That led to the

[13:46] <Geth> ¦ rakudo/rakuast: QAST compiler to find the outer lexical scope's variable first leading to

[13:46] <Geth> ¦ rakudo/rakuast: wrong results.

[13:46] <Geth> ¦ rakudo/rakuast: 

[13:46] <Geth> ¦ rakudo/rakuast: It should have been worse, but when the QAST compiler can't find a lexical

[13:46] <Geth> ¦ rakudo/rakuast: in the outer scope either, it will generate a runtime lookup which would

[13:46] <Geth> ¦ rakudo/rakuast: then find the lexical that's declared too late.

[13:46] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/b89009998d

[14:21] *** Xliff left
[14:44] *** lizmat_ joined
[14:48] *** lizmat left
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:18] *** lizmat_ is now known as lizmat

[18:19] *** lizmat left
[18:19] *** lizmat joined
[18:29] *** rypervenche joined
[19:05] *** sena_kun left
[19:06] *** sena_kun joined
[21:16] *** sena_kun left
[23:01] *** [Coke]__ joined
[23:04] *** [Coke] left
[23:17] *** Kaipei left
[23:54] *** frost1 joined
