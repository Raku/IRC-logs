[00:00] <ugexe> though sometimes i fear my compulsion to collaborate and design before implementing public apis may be a determent compared to moving faster

[00:07] *** discord-raku-bot left
[00:07] *** discord-raku-bot joined
[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[00:14] *** elcaro_ is now known as elcaro

[00:26] *** discord-raku-bot left
[00:26] *** discord-raku-bot joined
[00:30] *** discord-raku-bot left
[00:30] *** discord-raku-bot joined
[01:49] <drakonis> where can i see raku 6.e and 6.f's development?

[01:50] <drakonis> i know that problem-solving has a project with tasks related to 6.e

[02:27] *** ugexe left
[03:43] *** ggoebel_ left
[06:08] *** reportable6 left
[06:37] *** ggoebel_ joined
[06:41] *** ggoebel_ left
[07:10] *** reportable6 joined
[07:41] *** ggoebel_ joined
[08:42] *** Xliff joined
[08:43] *** ggoebel_ left
[08:48] <nine> ugexe: you mean "what if the to be deployed dists are already there?". As it is they'd be overwritten. We assume that such a check would have been done beforehand, e.g. zef wouldn't build and test something that it cannot install anyway.

[08:48] <nine> drakonis: I don't think there are any real plans for 6.f yet

[08:49] <MasterDuke> 6.e you can see here https://github.com/rakudo/rakudo/tree/master/src/core.e

[08:51] <Xliff> is there a 'return' equivalent in nqp?

[08:53] <lizmat> return ?

[08:54] <Xliff> sub a { return 1 } # Although in this case, that's redundent

[08:54] <Xliff> # Redundant

[08:55] <lizmat> nqp:  sub a { return 1 }; nqp::say(a())

[08:55] <camelia> nqp-moarvm: OUTPUT: «Routine declaration requires a signature at line 2, near "{ return 1"␤   at gen/moar/stage2/NQPHLL.nqp:1059  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from <unknown>:1  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/nqp.moarvm:routine_…»

[08:55] <lizmat> nqp:  sub a() { return 1 }; nqp::say(a())

[08:55] <camelia> nqp-moarvm: OUTPUT: «1␤»

[08:55] <Xliff> will that work in nqp::stmts?

[08:55] <lizmat> yes, it does, know from experience

[08:55] <Xliff> Oh goodie!

[08:56] <lizmat> however, if it is NQP code in Rakudo, make sure that you get your () right, as in Rakudo, return is just a sub

[08:58] <Xliff> Thanks!

[09:01] *** MasterDuke left
[09:02] <Geth> ¦ rakudo: 190e303d9f | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[09:02] <Geth> ¦ rakudo: Make previous values in REPL accessible with `$*N` (#4796)

[09:02] <Geth> ¦ rakudo: 

[09:02] <Geth> ¦ rakudo: Inspired by:

[09:02] <Geth> ¦ rakudo:   https://www.reddit.com/r/rakulang/comments/sulhq6/how_to_retrieve_the_last_result_in_the_shell_like/

[09:02] <Geth> ¦ rakudo: 

[09:02] <Geth> ¦ rakudo: Indexed previous values available as $*0, $*1, $*2...., and all previous values as the array @*_.

[09:02] <Geth> ¦ rakudo: 

[09:03] <Geth> ¦ rakudo: <…commit message has 14 more lines…>

[09:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/190e303d9f

[09:03] *** linkable6 left
[09:04] *** linkable6 joined
[09:11] *** MasterDuke joined
[09:38] <Xliff> lizmat: Cool feature!

[09:40] <lizmat> ugexe: I try to find the best way between getting completely frustrated by bikeshedding in PRs and being too bold in pushing commits without PRs

[09:41] <lizmat> I see the .deploy and .self-destruct methods on CURS as steps towards making the test/install process of modules in general, and zef in particular, a lot faster

[09:41] <lizmat> because it would allow for modules to be installed to only have to be precompiled once

[09:46] <Xliff> lizmat: Does .new work in nqp or is that create()? If so, how can I pass a parameter to new?

[09:49] <lizmat> .new is a Raku construct, so no

[09:49] <lizmat> you can nqp::create(class)

[09:49] <lizmat> and bind attributes with nqp::bindattr and friends

[09:49] <Xliff> Ah, thanks.

[09:49] <lizmat> Xliff: assuming you're in actual NQP, not nqp code inside Rakudo

[09:59] <Xliff> And if I'm inside an nqp block inside Rakudo?

[10:31] <lizmat> then you're still in Rakudo, and .new will work

[10:31] <lizmat> (sorry, was afk for a bit)

[10:34] <Geth> ¦ rakudo: a56d239d0c | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[10:34] <Geth> ¦ rakudo: Add mention of 'sub' potentially missing

[10:34] <Geth> ¦ rakudo: 

[10:34] <Geth> ¦ rakudo: In response to https://github.com/rakudo/rakudo/issues/4827  The

[10:34] <Geth> ¦ rakudo: error message would now state:

[10:34] <Geth> ¦ rakudo: 

[10:34] <Geth> ¦ rakudo:     Variable '$verbose' is not declared.  Perhaps you forgot a 'sub' if

[10:34] <Geth> ¦ rakudo:     this was intended to be part of a signature?

[10:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a56d239d0c

[10:39] *** linkable6 left
[10:39] *** evalable6 left
[10:39] *** linkable6 joined
[10:45] <lizmat> https://github.com/Raku/problem-solving/pull/318#issuecomment-1076219560

[11:39] *** linkable6 left
[11:42] *** evalable6 joined
[11:50] *** ggoebel_ joined
[12:08] *** reportable6 left
[12:19] <Geth> ¦ rakudo/master: 31 commits pushed by (Elizabeth Mattijsen)++

[12:19] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/a56d239d0ce1...75370b74c258

[12:19] <lizmat> splitting src/core.c/Distribution.pm6 into separate files for each class / role while keeping history

[12:22] *** discord-raku-bot left
[12:23] *** discord-raku-bot joined
[13:11] *** reportable6 joined
[14:20] <Xliff> Does nqp have a way to do 'next'?

[14:20] <Xliff> I see the QAST::Op, but that says "not directly callable"

[14:23] <lizmat> next in Rakudo is just a sub that issues a CONTROL message

[14:23] <lizmat> nqp::handle allows you to "catch" that

[14:24] <lizmat> see Any-iterable.pm6 for plenty of examples

[14:24] <Xliff> Thanks.

[14:40] *** ggoebel__ joined
[14:43] *** ggoebel_ left
[14:46] *** ggoebel_ joined
[14:48] *** ggoebel__ left
[14:58] <MasterDuke> `Method 'signature' not found for invocant of class 'Sub'` that's too bad

[15:09] <MasterDuke> nqp: my int $i := 0; while $i++ < 5 { next if $i == 3; say($i); }      # nqp also has 'next'

[15:09] <camelia> nqp-moarvm: OUTPUT: «1␤2␤4␤5␤»

[15:41] *** linkable6 joined
[15:57] <MasterDuke> m: multi trait_mod:<is>(Routine:D $r, :$purish!) { for $r.signature.params -> $p { warn "$p.name() is not readonly, is $r.name() really pure?" if !$p.readonly } }; sub foo($a is rw) is purish { $a += 1 }; my $a = 1; say foo($a); say $a

[15:57] <camelia> rakudo-moar 75370b74c: OUTPUT: «Potential difficulties:␤    $a is not readonly, is foo really pure?␤    at <tmp>:1␤    ------>  if !$p.readonly } }; sub foo($a is rw) ⏏is purish { $a += 1 }; my $a = 1; say fo␤2␤2␤»

[16:00] <MasterDuke> the check ^^^ is what i was trying to add to https://github.com/rakudo/rakudo/blob/master/src/core.c/traits.pm6#L424-L428 but that gives `Method 'signature' not found for invocant of class 'Sub'` when building rakudo. then i tried moving the  trait to Routine.pm6, but that causes `Method 'hash' not found for invocant of class 'Capture'` when

[16:00] <MasterDuke> building rakudo

[16:23] *** discord-raku-bot left
[16:23] *** discord-raku-bot joined
[17:14] *** Kaipi left
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:42] *** melezhik joined
[18:43] *** Kaipi joined
[19:03] *** melezhik left
[19:31] <Geth> ¦ rakudo: usev6++ created pull request #4829: Revert "An object will never work if native is expected"

[19:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4829

[19:31] <bartolin> m: multi f(int $i) { $i + $i }; my $a = 3; my int $b = 2; $a := $b; say f $a

[19:31] <camelia> rakudo-moar 75370b74c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling f(Mu) will never work with any of these multi signatures:␤    (int $i)␤at <tmp>:1␤------> my $a = 3; my int $b = 2; $a := $b; say ⏏f $a␤»

[19:32] <bartolin> MasterDuke: I'm afraid the reference to Mu in the error message isn't the biggest problem with 73d5e74d96 (https://github.com/rakudo/rakudo/issues/4823)

[19:33] *** linkable6 left
[19:36] <Geth> ¦ rakudo: 94d4820a7b | (Christian Bartolomäus)++ (committed using GitHub Web editor) | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[19:36] <Geth> ¦ rakudo: Revert "An object will never work if native is expected" (#4829)

[19:36] <Geth> ¦ rakudo: 

[19:36] <Geth> ¦ rakudo: This reverts commit 73d5e74d96197312da62509058a0970668913bc8.

[19:36] <Geth> ¦ rakudo: 

[19:36] <Geth> ¦ rakudo: That commit turned out to be incorrect. For more background see

[19:36] <Geth> ¦ rakudo: 

[19:36] <Geth> ¦ rakudo:   https://github.com/rakudo/rakudo/issues/4823

[19:36] <Geth> ¦ rakudo: <…commit message has 15 more lines…>

[19:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/94d4820a7b

[20:17] <Geth> ¦ rakudo: 77ca7a4bcd | (Elizabeth Mattijsen)++ | lib/CompUnit/Repository/Staging.rakumod

[20:17] <Geth> ¦ rakudo: Remove : in self-destruct code

[20:17] <Geth> ¦ rakudo: 

[20:17] <Geth> ¦ rakudo: Leftover from change from private method to sub.  Spotted by hythm++

[20:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/77ca7a4bcd

[20:26] *** ggoebel_ left
[20:42] *** ggoebel_ joined
[20:52] <Geth> ¦ rakudo: 15abaf412d | (Elizabeth Mattijsen)++ | src/core.c/Distribution/Locally.pm6

[20:52] <Geth> ¦ rakudo: Gradually type Distribution::Locally a bit

[20:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/15abaf412d

[20:53] <lizmat> and that concludes my hacking for today&

[21:43] *** sena_kun joined
[21:50] <japhb> Canary says: YAMLish:ver<0.0.6> fails tests at Rakudo HEAD

[22:36] *** ggoebel_ left
[22:54] *** ggoebel_ joined
[23:35] *** linkable6 joined
