[00:07] *** reportable6 left
[00:20] *** melezhik joined
[00:27] *** melezhik left
[01:07] *** reportable6 joined
[01:58] *** _ed joined
[02:11] *** _ed left
[02:22] *** vrurg left
[02:22] *** vrurg joined
[02:25] *** vrurg_ joined
[02:28] *** vrurg left
[02:32] *** _ed joined
[02:36] *** _ed left
[02:44] *** vrurg joined
[02:44] *** vrurg_ left
[03:00] *** _ed joined
[03:06] *** _ed left
[03:10] *** elcaro_ joined
[03:11] *** kjp_ joined
[03:11] *** kjp left
[03:11] *** elcaro left
[03:31] *** _ed joined
[03:39] *** _ed left
[04:39] *** reportable6 left
[04:39] *** statisfiable6 left
[04:39] *** unicodable6 left
[04:39] *** linkable6 left
[04:39] *** bloatable6 left
[04:39] *** evalable6 left
[04:39] *** bisectable6 left
[04:39] *** notable6 left
[04:39] *** greppable6 left
[04:39] *** coverable6 left
[04:39] *** benchable6 left
[04:39] *** quotable6 left
[04:39] *** squashable6 left
[04:39] *** nativecallable6 left
[04:39] *** shareable6 left
[04:39] *** sourceable6 left
[04:39] *** releasable6 left
[04:39] *** committable6 left
[04:39] *** bloatable6 joined
[04:39] *** sourceable6 joined
[04:40] *** evalable6 joined
[04:40] *** committable6 joined
[04:41] *** unicodable6 joined
[04:41] *** notable6 joined
[04:41] *** benchable6 joined
[04:42] *** bisectable6 joined
[04:43] *** _ed joined
[04:54] *** _ed left
[05:14] *** _ed joined
[05:20] *** _ed left
[05:39] *** quotable6 joined
[05:39] *** shareable6 joined
[05:40] *** linkable6 joined
[05:40] *** _ed joined
[05:41] *** statisfiable6 joined
[05:41] *** squashable6 joined
[05:41] *** greppable6 joined
[05:43] *** _ed left
[05:52] *** ggoebel left
[06:08] *** reportable6 joined
[06:41] *** nativecallable6 joined
[06:41] *** releasable6 joined
[07:14] *** _ed joined
[07:18] *** _ed left
[07:20] *** sena_kun left
[08:05] *** vrurg_ joined
[08:07] *** vrurg left
[08:31] <MasterDuke> oh, multiple people working on a branch, need to remember not to force push a lot of rebases

[08:31] *** _ed joined
[08:35] *** _ed left
[08:39] *** coverable6 joined
[08:41] <MasterDuke> anyone object to rebasing rakuast up to master? i.e., after 2022.03

[08:42] <nine> MasterDuke: fine with me, but I guess it's up to jnthn.

[08:50] <lizmat> Files=1351, Tests=117115, 297 wallclock secs (35.63 usr 10.08 sys + 4108.10 cusr 354.32 csys = 4508.13 CPU)

[09:26] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4825: Add .rakumod files to compiler id

[09:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4825

[09:44] <Geth> ¦ rakudo: 970f1828ca | (Elizabeth Mattijsen)++ | lib/CompUnit/Repository/Staging.rakumod

[09:44] <Geth> ¦ rakudo: There's an IO::Path.copy, so use that

[09:44] <Geth> ¦ rakudo: 

[09:44] <Geth> ¦ rakudo: That should also take care of any attributes being copied as well.

[09:44] <Geth> ¦ rakudo: hythm++ for spotting

[09:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/970f1828ca

[09:44] <Geth> ¦ rakudo/rakuast: 30902c0d0f | (Daniel Green)++ | 2 files

[09:44] <Geth> ¦ rakudo/rakuast: Add .rakumod files to compiler id

[09:44] <Geth> ¦ rakudo/rakuast: 

[09:44] <Geth> ¦ rakudo/rakuast: This means a change to them will invalidate precomp files. This wasn't a

[09:44] <Geth> ¦ rakudo/rakuast: problem before rakuast because rakudo/src/* didn't have any .rakumod

[09:44] <Geth> ¦ rakudo/rakuast: files, but now it does.

[09:44] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/30902c0d0f

[09:44] <Geth> ¦ rakudo/rakuast: b330e2a8f5 | MasterDuke17++ (committed using GitHub Web editor) | 2 files

[09:44] <Geth> ¦ rakudo/rakuast: Merge pull request #4825 from MasterDuke17/rakuast_add_rakumod_file_to_compiler_id

[09:45] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/b330e2a8f5

[09:46] <lizmat> MasterDuke: is the removal of lib/.precomp also done for the rakuast branch ?  

[09:47] <MasterDuke> when? it happens during a `make realclean`

[09:58] <lizmat> ah, ok... well there's news: on HEAD, lib/.precomp doesn't even get created anymore

[09:59] <lizmat> hmmm...  lemme double check that  :-)

[09:59] <lizmat> yup

[10:00] <lizmat> c081f32838a863cdb57a6c077c5c26cd6cde0893 took care of that  :-)

[10:00] *** evalable6 left
[10:00] *** linkable6 left
[10:01] <Geth> ¦ roast: 081d05b32c | (Elizabeth Mattijsen)++ | S32-list/are.t

[10:01] <Geth> ¦ roast: Add tests for .are

[10:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/081d05b32c

[10:03] *** linkable6 joined
[10:05] <nine> lizmat: but it will still get created by make test

[10:20] <lizmat> hmmm... it probably shouldn't ?

[10:29] <lizmat> hmmm... I guess "make test" needs to be able to run without having run "make install"  

[10:30] <lizmat> meh

[10:35] <nine> Yes, it is customary to run tests before installing

[10:40] <lizmat> :-)

[11:03] *** evalable6 joined
[11:29] *** ggoebel joined
[11:36] *** [Tux] left
[11:42] *** _ed joined
[11:45] <Geth> ¦ rakudo: ce0d8d6428 | (Elizabeth Mattijsen)++ | lib/CompUnit/Repository/Staging.rakumod

[11:45] <Geth> ¦ rakudo: Add .self-destruct method to CUR::Staging

[11:45] <Geth> ¦ rakudo: 

[11:45] <Geth> ¦ rakudo: So that a CURS can clean up after itself after having deployed

[11:45] <Geth> ¦ rakudo: installed files.

[11:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ce0d8d6428

[11:47] *** _ed left
[11:55] <Geth> ¦ rakudo: aa6b13cdd0 | (Elizabeth Mattijsen)++ | lib/CompUnit/Repository/Staging.rakumod

[11:55] <Geth> ¦ rakudo: Add CUR::Staging.rempove-artefacts method

[11:55] <Geth> ¦ rakudo: 

[11:55] <Geth> ¦ rakudo: To hopefully make it easier to cleanup a CURS repo before packaging.

[11:55] <Geth> ¦ rakudo: Logic lifted from tools/install-dist.raku.

[11:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aa6b13cdd0

[11:55] <lizmat> argh, .remove.artefacts of course  :-(

[11:56] <MasterDuke> hm, don't we usually use american english spellings?

[11:58] <lizmat> I guess  :-(   didn't realize there as a US spelling for it

[11:58] <lizmat> *was

[12:00] <MasterDuke> https://en.wikipedia.org/wiki/American_and_British_English_spelling_differences#Miscellaneous_spelling_differences couple rows down in the table

[12:07] *** reportable6 left
[12:08] <Geth> ¦ rakudo: 6e81f3423c | (Elizabeth Mattijsen)++ | lib/CompUnit/Repository/Staging.rakumod

[12:08] <Geth> ¦ rakudo: s/artefacts/artifacts

[12:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6e81f3423c

[12:19] <Geth> ¦ nqp: MasterDuke17++ created pull request #768: Some potential MAST bytecode writing optimizations

[12:19] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/768

[12:22] *** discord-raku-bot left
[12:22] *** discord-raku-bot joined
[12:32] <Geth> ¦ rakudo: f196efd319 | (Elizabeth Mattijsen)++ | lib/CompUnit/Repository/Staging.rakumod

[12:32] <Geth> ¦ rakudo: Gradually type CUR::Staging

[12:32] <Geth> ¦ rakudo: 

[12:32] <Geth> ¦ rakudo: And use self.foo instead of $.foo

[12:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f196efd319

[12:52] *** ggoebel_ joined
[12:56] *** ggoebel left
[13:04] *** [Tux] joined
[13:05] *** _ed joined
[13:07] <Geth> ¦ rakudo: d369fd1e68 | (Elizabeth Mattijsen)++ | tools/install-dist.raku

[13:07] <Geth> ¦ rakudo: Streamline install-dist to more modern Raku code

[13:07] <Geth> ¦ rakudo: 

[13:07] <Geth> ¦ rakudo: - move pod to end

[13:07] <Geth> ¦ rakudo: - less copy-paste code, more subs

[13:07] <Geth> ¦ rakudo: - more internal documentation

[13:07] <Geth> ¦ rakudo: - consistent error handling

[13:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d369fd1e68

[13:09] *** _ed left
[13:28] *** _ed joined
[13:33] *** _ed left
[13:37] <Geth> ¦ rakudo/install-without-precompile: 1c059c2be6 | (Elizabeth Mattijsen)++ | 2 files

[13:37] <Geth> ¦ rakudo/install-without-precompile: Add :precompile = True flag to CURI.install

[13:37] <Geth> ¦ rakudo/install-without-precompile: 

[13:37] <Geth> ¦ rakudo/install-without-precompile: The idea behind this is to allow modules to just be installed and

[13:37] <Geth> ¦ rakudo/install-without-precompile: have the runtime decide when it should (re-)precompile any compilation

[13:37] <Geth> ¦ rakudo/install-without-precompile: units that were not precompiled yet.  This would e.g. allow the

[13:37] <Geth> ¦ rakudo/install-without-precompile: DateTime::TimeZone distribution to be installed within a second,

[13:37] <Geth> ¦ rakudo/install-without-precompile: rather than on 4+ minutes.  And only precompile those timezones that

[13:37] <Geth> ¦ rakudo/install-without-precompile: are actually used at runtime.

[13:37] <Geth> ¦ rakudo/install-without-precompile: 

[13:37] <Geth> ¦ rakudo/install-without-precompile: Also add the --/precompile flag to install-dist.raku

[13:37] <Geth> ¦ rakudo/install-without-precompile: review: https://github.com/rakudo/rakudo/commit/1c059c2be6

[13:37] <Geth> ¦ rakudo: lizmat++ created pull request #4826: Add :precompile = True flag to CURI.install

[13:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4826

[13:38] <lizmat> afk for a bit&

[14:00] *** carlmasak joined
[14:12] *** _ed joined
[14:12] <[Tux]> WHOOPSAKADEESY!

[14:12] <[Tux]> Rakudo v2022.03-15-gd369fd1e6 (v6.d) on MoarVM 2022.03-1-gefff4cd31

[14:12] <[Tux]> csv-test-xs-20      0.399 -  0.404

[14:12] <[Tux]> csv-ip5xs           0.791 -  0.811

[14:12] <[Tux]> test-t --race       0.829 -  0.838

[14:12] <[Tux]> test-t              1.386 -  1.456

[14:12] <[Tux]> csv-parser          3.595 -  3.685

[14:12] <[Tux]> csv-ip5xs-20        4.943 -  5.147

[14:12] <[Tux]> test                6.509 -  6.541

[14:12] <[Tux]> test-t-20 --race    6.439 -  7.055

[14:12] <[Tux]> test-t-20          19.627 - 20.612

[14:22] *** _ed left
[14:22] <MasterDuke> nice

[14:23] <MasterDuke> [Tux]: do you have test-t-20 graphed over similar timespans?

[14:27] *** _ed joined
[14:32] * japhb wonders what sped things up that much

[14:35] <MasterDuke> probably just a lucky hash randomization. even with MVM_SPESH_BLOCKING i've seen thing where the timing will be pretty consistent between most runs, but with noticeable outliers in either direction

[14:36] <japhb> Wow, the drop in Q4 for test-t-20 is even more dramatic than for test-t

[14:36] <japhb> MasterDuke: interesting

[14:39] <japhb> Meanwhile sadly "test-t --race" still isn't back to where it was in Q4 *2018*

[14:39] <japhb> Makes me wonder why not

[14:41] <MasterDuke> werem

[14:41] *** _ed left
[14:41] <japhb> ?

[14:41] <MasterDuke> *weren't some massive stability problems with race/hyper fixed around then?

[14:41] <japhb> Ah, interesting.

[14:44] <japhb> It looks like the "fixed" version of early 2019 forms a hard performance baseline -- some changes made "test-t --race" slower, but none slower.  You could almost draw a horizontal line below the last 3 years.

[14:44] <japhb> *but none faster

[14:48] *** carlmasak left
[14:50] *** carlmasak joined
[14:54] *** _ed joined
[14:54] <[Tux]> I repeat that test-t --race is an interesting showcase, but *only* for valid CSV as in this test: the --race version will FAIL on any more complex CSV

[14:55] <[Tux]> MasterDuke: https://tux.nl/Talks/CSV6/speed.log - graph all you like

[14:55] <japhb> I'm not sure what you mean by "valid" versus "complex" ... could you explain a bit more?

[14:56] <[Tux]> embedded newlines will cause the race version to parse incomplete lines

[14:57] <japhb> MasterDuke: if you have the Terminal::Quickcharts repo: `wget https://tux.nl/Talks/CSV6/speed-all.log; raku -I. examples/csv-timings "test-t --race"`

[14:58] <japhb> [Tux]: Huh.

[15:00] *** vrurg_ is now known as vrurg

[15:02] *** _ed left
[15:08] <dogbert11> has a vague memory seeing a valgrind error in one of the CSV tests relating to newlines

[15:19] <[Tux]> japhb, IIRC Liz created the race version where each "line" in a file is passed to a parser instance. Multiple parsers then each finish their work, but this will fail on e.g. `1,2,"foo\nbar",3,4"`, as parser 1 gets `1,2,"foo\n` and parser 2 gets `bar",3,4` both being invalid CSV

[15:19] <japhb> [Tux]: AH!  That makes sense now

[16:09] *** reportable6 joined
[16:13] *** _ed joined
[16:19] *** _ed left
[16:23] *** carlmasak left
[16:26] <MasterDuke> japhb: test-t-20 --race does show a drop at new-disp merge

[16:28] <japhb> MasterDuke: Nod, but "test-t --race" does not.

[16:29] <MasterDuke> right, it's currently dominated by startup (process + threads) time

[16:29] <japhb> That's a lot of startup time ....

[16:33] <MasterDuke> well, overhead in general is probably a better word

[16:36] <japhb> Fair.

[16:44] *** _ed joined
[16:51] *** _ed left
[17:00] *** _ed joined
[17:04] *** _ed left
[17:17] *** _ed joined
[17:20] <Geth> ¦ rakudo/master: 16 commits pushed by (Elizabeth Mattijsen)++

[17:20] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/d369fd1e681f...d378be8937e8

[17:21] <lizmat> splitting CompUnit/PrecompilationUnit.pm6 into 4 separate files while keeping git blame history

[17:21] <lizmat> nine ^^

[17:23] *** _ed left
[17:29] *** _ed joined
[17:50] <Geth> ¦ rakudo: 193cb539c3 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationId.pm6

[17:50] <Geth> ¦ rakudo: Simplify CompUnit::PrecompilationId

[17:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/193cb539c3

[17:55] *** _ed left
[18:05] <Geth> ¦ rakudo: 7c1e80c6d7 | (Elizabeth Mattijsen)++ | src/core.c/Block.pm6

[18:05] <Geth> ¦ rakudo: Remove unnnecessary copying from Block.add_phaser

[18:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7c1e80c6d7

[18:09] *** reportable6 left
[18:26] *** _ed joined
[18:40] *** _ed left
[19:01] <Geth> ¦ rakudo: 3187922bcb | (Elizabeth Mattijsen)++ | src/core.c/Block.pm6

[19:01] <Geth> ¦ rakudo: Some more natification in Block

[19:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3187922bcb

[19:24] <Geth> ¦ rakudo: 3e217a0d9a | (Elizabeth Mattijsen)++ | src/core.c/IO/Special.pm6

[19:24] <Geth> ¦ rakudo: Streamline IO::Special a bit

[19:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3e217a0d9a

[20:10] <nine> Thanks for fixing the mistakes of my past :)

[20:11] *** reportable6 joined
[20:11] <lizmat> nine: you're welcome!

[20:50] <Geth> ¦ rakudo: 1f34539969 | (Elizabeth Mattijsen)++ | src/core.c/Process.pm6

[20:50] <Geth> ¦ rakudo: Remove current dir from any path if RAKUDO_MODULE_DEBUG

[20:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1f34539969

[20:50] <Geth> ¦ rakudo: 71edcf2872 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[20:50] <Geth> ¦ rakudo: Split CompUnit::PrecompilationRepository!load-file

[20:50] <Geth> ¦ rakudo: 

[20:50] <Geth> ¦ rakudo: Create separate methods so we don't need to check things all the

[20:50] <Geth> ¦ rakudo: time.  And make the RAKUDO_MODULE_DEBUG output a bit less noisy.

[20:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/71edcf2872

[20:50] <lizmat> and that concludes my hacking for today

[20:53] *** [Coke] left
[20:56] *** [Coke] joined
[21:43] *** squashable6 left
[21:44] *** squashable6 joined
[22:26] <Geth> ¦ rakudo: lizmat self-assigned CompUnit::Repository::Staging: No such method 'need' for invocant of type 'Any' https://github.com/rakudo/rakudo/issues/4799

[22:43] <ugexe> ci looks like the reproducible build test on windows is more flakey than normal as of today

[23:55] <ugexe> what, if any, eqiv to .install(:force) should .deploy have? should .deploy be respecting the repo.lock? i wish i could have asked these questions in a pull request

