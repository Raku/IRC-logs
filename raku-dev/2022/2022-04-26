[00:06] *** discord-raku-bot left
[00:06] *** discord-raku-bot joined
[00:06] *** reportable6 left
[00:08] *** reportable6 joined
[00:10] *** discord-raku-bot left
[00:11] *** discord-raku-bot joined
[01:41] *** frost joined
[02:29] <Xliff> p6-Glib-Suite timings for v2022.03-231-g522c5fc83.
[02:29] <Xliff> Total number of projects: 31
[02:29] <Xliff> Total non-parallel compile times: 9258.21s (298.651935 avg)
[02:29] <Xliff> Total parallel compile times: 1378.31511139s (44.46177778677 avg)
[03:31] *** [Coke] left
[03:34] *** [Coke] joined
[04:34] *** evalable6 left
[04:34] *** benchable6 left
[04:34] *** linkable6 left
[04:34] *** bloatable6 left
[04:34] *** unicodable6 left
[04:34] *** quotable6 left
[04:34] *** notable6 left
[04:34] *** greppable6 left
[04:34] *** statisfiable6 left
[04:34] *** sourceable6 left
[04:34] *** coverable6 left
[04:34] *** tellable6 left
[04:34] *** bisectable6 left
[04:34] *** nativecallable6 left
[04:34] *** releasable6 left
[04:34] *** shareable6 left
[04:34] *** committable6 left
[04:34] *** reportable6 left
[04:34] *** notable6 joined
[04:34] *** releasable6 joined
[04:34] *** linkable6 joined
[04:35] *** sourceable6 joined
[04:35] *** coverable6 joined
[04:35] *** statisfiable6 joined
[04:35] *** bisectable6 joined
[04:35] *** committable6 joined
[04:35] *** benchable6 joined
[04:35] *** quotable6 joined
[04:36] *** unicodable6 joined
[04:36] *** greppable6 joined
[04:37] *** tellable6 joined
[04:37] *** evalable6 joined
[04:37] *** reportable6 joined
[04:37] *** shareable6 joined
[04:37] *** bloatable6 joined
[04:37] *** nativecallable6 joined
[05:39] *** Util left
[05:46] *** Util joined
[06:07] *** reportable6 left
[06:07] *** reportable6 joined
[06:15] *** vrurg joined
[06:17] *** vrurg_ left
[07:53] *** MasterDuke joined
[08:33] *** Util left
[08:39] <lizmat> Files=1353, Tests=117192, 293 wallclock secs (35.65 usr  9.87 sys + 4062.91 cusr 337.05 csys = 4445.48 CPU)
[08:39] *** Util joined
[08:43] <MasterDuke> m: my $a; loop (my Int $i = 0; $i <= 1_000_000_000; $i += 1000) { $a := $i ** -2 }; say now - INIT now
[08:43] <camelia> rakudo-moar 530e17848: OUTPUT: «1.550610147␤»
[08:44] <MasterDuke> locally i have that dropping from ~1.4s down to ~0.5s...let's see what the tests say now...
[08:49] <MasterDuke> yup, passes spectest and stresstest
[09:22] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4908: Fix exponentiation by large negative Ints and speedup exponentiation by any sized negative Ints
[09:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4908
[10:27] *** Altai-man joined
[10:30] *** sena_kun left
[10:40] *** sena_kun joined
[10:43] *** Altai-man left
[12:08] *** reportable6 left
[12:11] *** reportable6 joined
[13:37] *** discord-raku-bot left
[13:37] *** discord-raku-bot joined
[14:02] *** frost left
[15:02] *** RakuIRCLogger left
[15:02] *** TempIRCLogger left
[15:21] <gfldex> m: (1, 1 xx *).flat.is-lazy.say;
[15:21] <camelia> rakudo-moar 530e17848: OUTPUT: «False␤»
[15:21] <gfldex> Should that be True?
[15:37] <gfldex> m: constant @suffix = flat(<st nd rd >, 'th' xx *).lazy; .say for ((1..∞) Z~ @suffix)[^10];
[15:37] <camelia> rakudo-moar 530e17848: OUTPUT: «1st␤2nd␤3rd␤4th␤5th␤6th␤7th␤8th␤9th␤10th␤»
[15:37] <gfldex> ^^^ That's what I want to do and I don't feel like I should need the explicit `.lazy`-call.
[15:38] * gfldex .oO(Getting lazyness right is hard work!)
[15:59] <[Tux]> Rakudo v2022.04-18-g51c00fddd (v6.d) on MoarVM 2022.04-1-g4e2eab056
[15:59] <[Tux]> csv-test-xs-20      0.413 -  0.420
[15:59] <[Tux]> csv-ip5xs           0.781 -  0.830
[15:59] <[Tux]> test-t --race       0.845 -  0.857
[15:59] <[Tux]> test-t              1.451 -  1.494
[15:59] <[Tux]> csv-parser          3.650 -  3.900
[15:59] <[Tux]> csv-ip5xs-20        5.033 -  5.159
[15:59] <[Tux]> test-t-20 --race    6.671 -  6.744
[15:59] <[Tux]> test                6.398 -  6.971
[15:59] <[Tux]> test-t-20          21.697 - 22.139
[16:01] <japhb> gfldex: (Not that it's the thing you were actually asking about, but ...) That logic for English suffixes is wrong past 20.  The pattern repeats for every group of 10 *except* the teens, which all use 'th'.  And then of course it all repeats again for every group of 100.
[16:02] <japhb> (What is it with humans and having an exception to every rule?)
[16:07] *** linkable6 left
[16:07] *** evalable6 left
[16:10] *** linkable6 joined
[16:10] *** evalable6 joined
[16:39] <gfldex> japhb: Don't worry. I wont let rules-inventing humans stop me from having fun with Raku. :)
[18:05] *** sena_kun left
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:11] *** sena_kun joined
[18:30] <japhb> gfldex: :-D
[20:00] *** sena_kun left
[20:02] *** sena_kun joined
[20:06] *** sena_kun left
[20:07] *** sena_kun joined
[20:09] *** timo joined
[20:51] *** Geth__ left
[20:51] *** Geth__ joined
[20:51] *** Geth left
[20:52] *** TempIRCLogger joined
[20:52] *** Geth__ left
[20:52] *** Geth joined
[20:52] *** lizmat left
[20:53] *** lizmat_ left
[20:53] *** lizmat joined
[20:56] *** Geth left
[20:56] *** Geth joined
[21:01] *** Geth left
[21:01] *** Geth joined
[21:22] *** linkable6 left
[21:24] *** linkable6 joined
[22:06] *** linkable6 left
[22:07] <Geth> ¦ rakudo: vrurg++ created pull request #4909: Fix for positional argument binding
[22:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4909
[22:07] *** linkable6 joined
[22:14] <Geth> ¦ rakudo/master: 4 commits pushed by (Daniel Green)++, MasterDuke17++
[22:14] <Geth> ¦ rakudo/master: c66c98fedc | Fix exponentiation by large negative Ints...
[22:14] <Geth> ¦ rakudo/master: e4ae47378c | Re-write body of &infix:<**> into a single ternary
[22:14] <Geth> ¦ rakudo/master: b2c44bf31e | Further speedup exponentation by negative Ints
[22:14] <Geth> ¦ rakudo/master: bfad9bd66e | Merge pull request #4908 from MasterDuke17/fix_and_speedup_exponentiation_by_negative_Ints
[22:14] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/51c00fddd3c8...bfad9bd66ece
