[00:07] *** reportable6 left
[00:07] *** reportable6 joined
[01:07] *** Kaiepi left
[02:07] *** japhb left
[02:16] *** japhb joined
[03:16] *** greppable6 left
[03:16] *** unicodable6 left
[03:16] *** coverable6 left
[03:16] *** statisfiable6 left
[03:16] *** releasable6 left
[03:16] *** bloatable6 left
[03:16] *** committable6 left
[03:16] *** sourceable6 left
[03:16] *** notable6 left
[03:16] *** reportable6 left
[03:16] *** linkable6 left
[03:16] *** shareable6 left
[03:16] *** evalable6 left
[03:16] *** bisectable6 left
[03:16] *** quotable6 left
[03:16] *** tellable6 left
[03:16] *** benchable6 left
[03:16] *** nativecallable6 left
[03:16] *** notable6 joined
[03:16] *** frost joined
[03:16] *** benchable6 joined
[03:17] *** bisectable6 joined
[03:17] *** committable6 joined
[03:17] *** linkable6 joined
[03:17] *** reportable6 joined
[03:17] *** sourceable6 joined
[03:17] *** quotable6 joined
[03:17] *** unicodable6 joined
[03:17] *** nativecallable6 joined
[03:18] *** bloatable6 joined
[03:18] *** statisfiable6 joined
[03:18] *** frost left
[03:18] *** shareable6 joined
[03:18] *** releasable6 joined
[03:19] *** tellable6 joined
[03:19] *** coverable6 joined
[03:19] *** evalable6 joined
[03:19] *** greppable6 joined
[03:22] *** frost joined
[05:54] *** evalable6 left
[05:54] *** sourceable6 left
[05:54] *** bisectable6 left
[05:54] *** committable6 left
[05:54] *** statisfiable6 left
[05:54] *** benchable6 left
[05:54] *** linkable6 left
[05:54] *** coverable6 left
[05:54] *** greppable6 left
[05:54] *** bloatable6 left
[05:54] *** reportable6 left
[05:54] *** quotable6 left
[05:54] *** releasable6 left
[05:54] *** shareable6 left
[05:54] *** nativecallable6 left
[05:54] *** tellable6 left
[05:54] *** unicodable6 left
[05:54] *** notable6 left
[05:54] *** unicodable6 joined
[05:54] *** benchable6 joined
[05:54] *** tellable6 joined
[05:54] *** reportable6 joined
[05:54] *** statisfiable6 joined
[05:54] *** quotable6 joined
[05:55] *** committable6 joined
[05:55] *** evalable6 joined
[05:56] *** nativecallable6 joined
[05:56] *** shareable6 joined
[05:56] *** linkable6 joined
[05:56] *** notable6 joined
[05:56] *** greppable6 joined
[05:56] *** releasable6 joined
[05:57] *** sourceable6 joined
[05:57] *** bloatable6 joined
[05:57] *** coverable6 joined
[05:57] *** bisectable6 joined
[06:05] *** reportable6 left
[06:08] *** reportable6 joined
[07:08] *** nativecallable6 left
[07:08] *** benchable6 left
[07:08] *** linkable6 left
[07:08] *** evalable6 left
[07:08] *** shareable6 left
[07:08] *** bisectable6 left
[07:08] *** committable6 left
[07:08] *** unicodable6 left
[07:08] *** notable6 left
[07:08] *** coverable6 left
[07:08] *** sourceable6 left
[07:08] *** greppable6 left
[07:08] *** reportable6 left
[07:08] *** tellable6 left
[07:08] *** quotable6 left
[07:08] *** releasable6 left
[07:08] *** bloatable6 left
[07:08] *** statisfiable6 left
[07:08] *** tellable6 joined
[07:09] *** statisfiable6 joined
[07:09] *** evalable6 joined
[07:09] *** benchable6 joined
[07:09] *** reportable6 joined
[07:10] *** greppable6 joined
[07:10] *** linkable6 joined
[07:10] *** bisectable6 joined
[07:10] *** sourceable6 joined
[07:10] *** shareable6 joined
[07:10] *** committable6 joined
[07:10] *** nativecallable6 joined
[07:10] *** releasable6 joined
[07:11] *** bloatable6 joined
[07:11] *** notable6 joined
[07:11] *** quotable6 joined
[07:11] *** coverable6 joined
[07:11] *** unicodable6 joined
[08:20] <lizmat> Files=1353, Tests=117175, 295 wallclock secs (36.02 usr 10.15 sys + 4147.73 cusr 346.82 csys = 4540.72 CPU)

[08:26] <[Tux]> Rakudo v2022.04-70-g73b43e5f9 (v6.d) on MoarVM 2022.04-3-ga9fcd5a74

[08:26] <[Tux]> csv-test-xs-20      0.416 -  0.430

[08:26] <[Tux]> csv-ip5xs           0.891 -  0.918

[08:26] <[Tux]> test-t --race       0.983 -  1.091

[08:26] <[Tux]> test-t              1.573 -  1.594

[08:26] <[Tux]> csv-parser          3.642 -  3.811

[08:26] <[Tux]> csv-ip5xs-20        5.750 -  5.818

[08:26] <[Tux]> test                6.650 -  7.556

[08:26] <[Tux]> test-t-20 --race    7.168 -  7.353

[08:26] <[Tux]> test-t-20          21.937 - 22.41

[08:42] *** Kaiepi joined
[08:51] <Geth> ¦ rakudo: bea597626a | (Elizabeth Mattijsen)++ | 2 files

[08:51] <Geth> ¦ rakudo: Update BUILDPLAN helper module to uint renumbering

[08:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bea597626a

[09:41] <Geth> ¦ rakudo: 9fd893f74c | (Elizabeth Mattijsen)++ | lib/BUILDPLAN.rakumod

[09:41] <Geth> ¦ rakudo: Some more BUILDPLAN helper tweaks

[09:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9fd893f74c

[09:41] *** sena_kun left
[10:41] *** evalable6 left
[10:41] *** linkable6 left
[10:42] *** evalable6 joined
[10:42] *** linkable6 joined
[11:17] *** sena_kun joined
[12:07] *** reportable6 left
[12:10] *** reportable6 joined
[12:32] *** MasterDuke joined
[14:06] <Kaiepi> m: say Buf ~~ Blob

[14:06] <camelia> rakudo-moar 530e17848: OUTPUT: «True␤»

[14:07] <Kaiepi> i'm a bit confused by this kind of typecheck, where a role group checks a role group as a supertype of its nonsignatured candidate

[14:08] <Kaiepi> because to my knowledge, that should imply that all candidates of the group have it

[14:09] <Kaiepi> but a bunch of tests depend on this being true

[14:10] <Kaiepi> s/should/would/

[14:13] <Kaiepi> m: role Buf[::T, :::U] { }; say Buf ~~ Blob; say Buf[1, 2] ~~ Blob

[14:13] <camelia> rakudo-moar 530e17848: OUTPUT: «False␤False␤»

[14:14] <Kaiepi> m: role Buf[::T] does Blob[::T] { }; role Buf[::T, :::U] { }; say Buf ~~ Blob; say Buf[1, 2] ~~ Blob

[14:14] <camelia> rakudo-moar 530e17848: OUTPUT: «False␤False␤»

[14:14] <Kaiepi> m: role Buf[::T] does Blob[T] { }; role Buf[::T, :::U] { }; say Buf ~~ Blob; say Buf[1, 2] ~~ Blob

[14:14] <camelia> rakudo-moar 530e17848: OUTPUT: «False␤False␤»

[14:14] <Kaiepi> m: role Buf[::T] does Blob[T] { }; say Buf ~~ Blob; say Buf[1, 2] ~~ Blob

[14:14] <camelia> rakudo-moar 530e17848: OUTPUT: «===SORRY!===␤No appropriate parametric role variant available for 'Buf':␤    Cannot resolve caller (Buf[Int,Int]:U, Int:D, Int:D); none of these signatures matches:␤        (::$?CLASS ::::?CLASS Mu, ::T Mu)␤»

[14:14] <Kaiepi> m: role Buf[::T] does Blob[T] { }; say Buf ~~ Blob; say Buf[1] ~~ Blob

[14:14] <camelia> rakudo-moar 530e17848: OUTPUT: «False␤True␤»

[14:15] <Kaiepi> argh, i'll get what i'm going for elsewhere

[14:17] <Kaiepi> m: role Foo[::T = Mu] does Positional[T] { }; role Foo[::T, ::U] { }; say so all Foo, Foo[0], Foo[0, 1] X~~ Positional

[14:17] <camelia> rakudo-moar 530e17848: OUTPUT: «True␤»

[14:17] <Kaiepi> ^

[14:39] *** linkable6 left
[14:39] *** evalable6 left
[14:40] *** linkable6 joined
[14:42] *** evalable6 joined
[15:35] *** frost left
[15:40] *** [Coke] left
[15:41] *** [Coke] joined
[16:27] *** Kaiepi left
[16:40] *** Kaiepi joined
[18:01] *** sena_kun left
[18:02] *** sena_kun joined
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:44] *** Kaipei joined
[18:48] *** Kaiepi left
[19:00] <releasable6> Next release in ≈4 days and ≈23 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:29] *** sena_kun left
[19:31] *** sena_kun joined
[20:47] <Geth> ¦ rakudo: vrurg++ created pull request #4934: Get back to using Lock in Stash and CompUnit

[20:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4934

[21:07] <Kaipei> so now that i have that weirdness figured out, roast passes again w/ generic/role changes

[21:08] <Kaipei> need to give nqp its once over before i can put up a draft

[21:10] *** Kaipei is now known as Kaiepi

[22:15] <Geth> ¦ rakudo: ddef646171 | (Vadim Belman)++ | 9 files

[22:15] <Geth> ¦ rakudo: Get back to using Lock in Stash and CompUnit

[22:15] <Geth> ¦ rakudo: 

[22:15] <Geth> ¦ rakudo: Use of `Lock::Soft` caused some expected, though not critical,

[22:15] <Geth> ¦ rakudo: performance regression. Yet, in the light of a recent discussion on IRC,

[22:15] <Geth> ¦ rakudo: the non-blocking locking doesn't outweight the regression. Therefore it

[22:15] <Geth> ¦ rakudo: is considered reasonable to get back to use of `Lock`.

[22:15] <Geth> ¦ rakudo: 

[22:15] <Geth> ¦ rakudo: `Lock::Soft` as such remains in place though as it might be useful in

[22:15] <Geth> ¦ rakudo: applications where `Lock::Async` cannot serve as a `Lock` replacement

[22:15] <Geth> ¦ rakudo: due to its specifics.

[22:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ddef646171

[22:15] <Geth> ¦ rakudo: 1c46805449 | (Vadim Belman)++ (committed using GitHub Web editor) | 9 files

[22:15] <Geth> ¦ rakudo: Merge pull request #4934 from vrurg/problem-solving-323-back-to-lock

[22:15] <Geth> ¦ rakudo: 

[22:15] <Geth> ¦ rakudo: Get back to using Lock in Stash and CompUnit

[22:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c46805449

