[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[00:34] *** Kaiepi left
[00:34] *** Kaipei joined
[00:47] *** frost joined
[01:47] *** reportable6 left
[01:47] *** notable6 left
[01:47] *** statisfiable6 left
[01:47] *** bisectable6 left
[01:47] *** nativecallable6 left
[01:47] *** bloatable6 left
[01:47] *** tellable6 left
[01:47] *** greppable6 left
[01:47] *** committable6 left
[01:47] *** coverable6 left
[01:47] *** releasable6 left
[01:47] *** unicodable6 left
[01:47] *** shareable6 left
[01:47] *** quotable6 left
[01:47] *** sourceable6 left
[01:47] *** benchable6 left
[01:47] *** linkable6 left
[01:47] *** evalable6 left
[01:47] *** unicodable6 joined
[01:48] *** tellable6 joined
[01:48] *** sourceable6 joined
[01:48] *** releasable6 joined
[01:48] *** committable6 joined
[01:48] *** coverable6 joined
[01:48] *** nativecallable6 joined
[01:48] *** linkable6 joined
[01:48] *** reportable6 joined
[01:48] *** shareable6 joined
[01:48] *** bloatable6 joined
[01:49] *** greppable6 joined
[01:49] *** benchable6 joined
[01:49] *** statisfiable6 joined
[01:49] *** bisectable6 joined
[01:50] *** quotable6 joined
[01:50] *** notable6 joined
[01:50] *** evalable6 joined
[02:50] *** evalable6 left
[02:50] *** linkable6 left
[02:51] *** linkable6 joined
[02:52] *** evalable6 joined
[03:15] *** [Coke] left
[03:17] *** [Coke] joined
[05:09] *** committable6 left
[05:09] *** statisfiable6 left
[05:09] *** nativecallable6 left
[05:09] *** bloatable6 left
[05:09] *** unicodable6 left
[05:09] *** tellable6 left
[05:09] *** reportable6 left
[05:09] *** shareable6 left
[05:09] *** sourceable6 left
[05:09] *** releasable6 left
[05:09] *** quotable6 left
[05:09] *** benchable6 left
[05:09] *** evalable6 left
[05:09] *** greppable6 left
[05:09] *** linkable6 left
[05:09] *** bisectable6 left
[05:09] *** coverable6 left
[05:09] *** notable6 left
[05:09] *** committable6 joined
[05:09] *** bisectable6 joined
[05:09] *** nativecallable6 joined
[05:10] *** shareable6 joined
[05:10] *** greppable6 joined
[05:10] *** bloatable6 joined
[05:10] *** sourceable6 joined
[05:10] *** evalable6 joined
[05:10] *** unicodable6 joined
[05:10] *** notable6 joined
[05:11] *** tellable6 joined
[05:11] *** releasable6 joined
[05:11] *** linkable6 joined
[05:11] *** benchable6 joined
[05:12] *** quotable6 joined
[05:12] *** statisfiable6 joined
[05:12] *** coverable6 joined
[05:12] *** reportable6 joined
[05:22] *** Xliff left
[06:08] *** reportable6 left
[06:09] *** reportable6 joined
[06:52] *** frost left
[07:22] *** [Coke] left
[07:28] *** [Coke] joined
[08:24] *** frost joined
[09:02] <lizmat> M1 Files=1353, Tests=116312, 192 wallclock secs (16.31 usr  4.17 sys + 1125.45 cusr 60.03 csys = 1205.96 CPU)

[09:04] *** frost left
[09:33] *** lizmat_ joined
[09:33] *** Geth__ joined
[09:35] *** Geth left
[09:35] *** lizmat left
[09:35] *** lizmat_ is now known as lizmat

[09:35] *** Geth__ left
[09:36] *** Geth joined
[10:39] <SmokeMachine> Hi! why don't we have weak references as in Java's sense of weak reference of not disallowing the reference to be gced?

[10:41] <SmokeMachine> I have asked that before but I don't really remember the answer... but lizmat's tweet made m eask about that once again...

[10:48] *** frost joined
[10:49] <SmokeMachine> this one: https://twitter.com/liztormato/status/1536274029509763074?s=20&t=BOzij591eLJz9huyjEa6BA

[10:52] <SmokeMachine> that would be cool for, for example, having a set of currently used objects. If it's not being used anymore, the original ref goes out of scope, some time before it's GCed and then stop existing inside the Set. Without that all the objs inside the Set would exist for ever...

[10:54] <SmokeMachine> (By Set I do not mean the class Set, but some kind of WeakSet)

[11:06] *** frost left
[11:10] <japhb> SmokeMachine: You can get a similar effect with a factory (that stores the new object ID), objects with a DESTROY method (that removes the old object ID), and having the set contain object IDs instead of pointers.

[11:13] *** frost joined
[11:19] <SmokeMachine> japhb: but that's not quite the same, is it? if I get .keys, it won't that the objects, for example...

[11:21] <SmokeMachine> another usage could be having 2 objs having reference to each other, right?

[11:25] *** frost left
[11:36] *** frost joined
[11:58] *** frost left
[11:58] *** frost joined
[12:03] <japhb> SmokeMachine: The reference loop problem is fixed by having a full GC (which can correctly account for unreachable loops and dispose of them), as opposed to reference counting which does indeed have that failure mode (and is why perl5 needs weak refs, for instance).

[12:06] <SmokeMachine> japhb: yes... I just realised that... but that's not the case if I want to collect one of the objs even if the other still exist.

[12:08] *** reportable6 left
[12:11] *** reportable6 joined
[12:14] <japhb> SmokeMachine: Hmmmm.  What's your actual use case?  I feel like we've wandered into XY question territory ... or perhaps I'm just not seeing the actual problem.

[12:17] *** frost left
[12:25] *** frost joined
[12:33] <nine> same here

[12:34] <SmokeMachine> A good usage example (in my mind) would be this: https://irclogs.raku.org/raku/2020-10-12.html#14:11

[12:35] <SmokeMachine> a cache for Red's objects

[12:36] <SmokeMachine> that would allow the objects to be GCed

[12:40] <nine> SmokeMachine: you can still have the "per request" cache without weak refs. Your caching layer just needs to know the concept of a request or session or lifecycle or whatever you want to call it at that layer. And a bit of API so the user is able to tell the cache that this session is done and the cache can be flushed.

[12:42] <SmokeMachine> nine: on that case it would, probably, use even more memory if there are several sessions in parallel, right?

[12:42] <SmokeMachine> and Red isn't always used where there is a "request" concept...

[12:46] <nine> Even in Tau Station there are 2 different kinds of cache life cycle. So the request or session lifecycle one would be strictly optional

[12:46] <nine> If an object can be in use by different sessions, you wouldn't need more memory with parallel sessions.

[13:00] *** frost left
[13:42] *** frost joined
[14:06] *** frost left
[15:42] <[Tux]> Rakudo v2022.06-17-gf2546b446 (v6.d) on MoarVM 2022.06-1-ged7e1a51b

[15:42] <[Tux]> csv-test-xs-20      0.412 -  0.455

[15:42] <[Tux]> csv-ip5xs           0.831 -  0.855

[15:42] <[Tux]> test-t --race       0.857 -  0.879

[15:42] <[Tux]> test-t              1.470 -  1.510

[15:42] <[Tux]> csv-parser          3.538 -  3.551

[15:42] <[Tux]> csv-ip5xs-20        5.165 -  5.520

[15:42] <[Tux]> test-t-20 --race    6.494 -  6.766

[15:42] <[Tux]> test                6.578 -  6.670

[15:42] <[Tux]> test-t-20          21.071 - 23.975

[15:46] <Geth> ¦ rakudo/rakuast: 5 commits pushed by (Stefan Seifert)++

[15:46] <Geth> ¦ rakudo/rakuast: 7a14573c64 | Support constant declarations

[15:46] <Geth> ¦ rakudo/rakuast: 978584aa29 | Implement swapping merge of a package into a package stub

[15:46] <Geth> ¦ rakudo/rakuast: f1659e75bf | Fix imported object missing from SC

[15:46] <Geth> ¦ rakudo/rakuast: 70e0efbf24 | Support replacing package stubs with packages in RakuAST

[15:46] <Geth> ¦ rakudo/rakuast: cab2a6e763 | Install generated role groups into stashes as well

[15:46] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/compare/6bc76c29dc78...cab2a6e763f2

[15:59] *** linkable6 left
[15:59] *** evalable6 left
[16:00] *** evalable6 joined
[16:02] *** linkable6 joined
[18:07] *** reportable6 left
[18:08] *** vrurg joined
[18:08] *** vrurg_ left
[18:09] *** reportable6 joined
[20:10] *** jjatria left
[20:10] *** JRaspass left
[20:10] *** jjatria joined
[20:10] *** JRaspass joined
[20:50] *** jjatria left
[20:50] *** JRaspass left
[20:50] *** jjatria joined
[20:50] *** JRaspass joined
[22:19] *** evalable6 left
[22:19] *** linkable6 left
[22:20] *** evalable6 joined
[22:21] *** linkable6 joined
[22:26] *** [Tux] left
[22:47] *** JRaspass left
[22:47] *** jjatria left
[22:49] *** jjatria joined
[22:49] *** JRaspass joined
[23:05] *** Altai-man joined
[23:07] *** sena_kun left
[23:39] *** eof left
[23:44] <Geth> ¦ DBIish/oracle-blob-read: 572fb66487 | (Vadim Belman)++ | 3 files

[23:44] <Geth> ¦ DBIish/oracle-blob-read: Implement reading of BLOBs

[23:44] <Geth> ¦ DBIish/oracle-blob-read: 

[23:44] <Geth> ¦ DBIish/oracle-blob-read: No writing yet.

[23:44] <Geth> ¦ DBIish/oracle-blob-read: 

[23:44] <Geth> ¦ DBIish/oracle-blob-read: A blob is returned as a `Supply` emitting `Buf` instances. I.e. for a

[23:44] <Geth> ¦ DBIish/oracle-blob-read: row in hash format sending the actual BLOB data into a file would be:

[23:44] <Geth> ¦ DBIish/oracle-blob-read: 

[23:44] <Geth> ¦ DBIish/oracle-blob-read:     react whenever %row<BLOB_COL> {

[23:44] <Geth> ¦ DBIish/oracle-blob-read:         $file.write($_);

[23:44] <Geth> ¦ DBIish/oracle-blob-read:     }

[23:44] <Geth> ¦ DBIish/oracle-blob-read: review: https://github.com/raku-community-modules/DBIish/commit/572fb66487

[23:44] <Geth> ¦ DBIish: vrurg++ created pull request #231: Implement reading of BLOBs

[23:44] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/pull/231

[23:48] *** summerisle joined
[23:57] *** [Tux] joined
