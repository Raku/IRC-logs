[00:07] *** reportable6 left
[00:10] *** reportable6 joined
[01:55] *** evalable6 left
[01:55] *** linkable6 left
[02:20] *** vrurg joined
[02:20] *** frost joined
[02:57] *** linkable6 joined
[03:06] *** frost left
[03:48] *** vrurg left
[03:49] *** vrurg joined
[04:49] *** quotable6 left
[04:49] *** squashable6 left
[04:49] *** benchable6 left
[04:49] *** nativecallable6 left
[04:49] *** releasable6 left
[04:49] *** tellable6 left
[04:49] *** linkable6 left
[04:49] *** notable6 left
[04:49] *** bloatable6 left
[04:49] *** coverable6 left
[04:49] *** shareable6 left
[04:49] *** bisectable6 left
[04:49] *** committable6 left
[04:49] *** greppable6 left
[04:49] *** statisfiable6 left
[04:49] *** unicodable6 left
[04:49] *** sourceable6 left
[04:49] *** reportable6 left
[04:49] *** quotable6 joined
[04:49] *** unicodable6 joined
[04:50] *** committable6 joined
[04:50] *** notable6 joined
[04:50] *** releasable6 joined
[04:52] *** bisectable6 joined
[04:52] *** bloatable6 joined
[04:56] *** frost joined
[04:57] *** evalable6 joined
[05:51] *** coverable6 joined
[06:10] *** squashable6 joined
[06:49] *** nativecallable6 joined
[06:51] *** vrurg_ joined
[06:51] *** sourceable6 joined
[06:51] *** greppable6 joined
[06:52] *** benchable6 joined
[06:54] *** vrurg left
[07:09] *** squashable6 left
[07:10] *** reportable6 joined
[07:11] *** squashable6 joined
[07:19] *** frost left
[07:50] *** linkable6 joined
[07:52] *** tellable6 joined
[08:48] *** frost joined
[08:51] *** statisfiable6 joined
[09:08] *** frost left
[09:08] <lizmat> Files=1351, Tests=117097, 289 wallclock secs (34.98 usr  9.88 sys + 4029.97 cusr 336.74 csys = 4411.57 CPU)

[09:12] <Geth> ¦ rakudo: 7870b446c0 | (Elizabeth Mattijsen)++ | 3 files

[09:12] <Geth> ¦ rakudo: Fix name of Buf role generatot script

[09:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7870b446c0

[09:51] *** shareable6 joined
[10:08] *** squashable6 left
[10:14] <Geth> ¦ rakudo: 4677dcb7ad | (Elizabeth Mattijsen)++ | 2 files

[10:14] <Geth> ¦ rakudo: Address nine++ 's remarks on 65507b89d0602b9

[10:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4677dcb7ad

[10:14] <Geth> ¦ rakudo: fb25bd4e23 | (Elizabeth Mattijsen)++ | 2 files

[10:14] <Geth> ¦ rakudo: Generate the SignedBlob/UnsignedBlob roles

[10:14] <Geth> ¦ rakudo: 

[10:14] <Geth> ¦ rakudo: So that we only need to maintain one set of code

[10:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fb25bd4e23

[10:23] <gfldex> m: my Channel:D $c.=new; start { $c.send(.item) for ^10; $c.close; } sub consumer(*@a) { say @a.shift while @a } consumer($c does Iterable);

[10:23] <camelia> rakudo-moar 7870b446c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> rt { $c.send(.item) for ^10; $c.close; }⏏ sub consumer(*@a) { say @a.shift while ␤    expecting any of:␤       …»

[10:23] <gfldex> m: my Channel:D $c.=new; start { $c.send(.item) for ^10; $c.close; }; sub consumer(*@a) { say @a.shift while @a }; consumer($c does Iterable);

[10:23] <camelia> rakudo-moar 7870b446c: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[10:24] <gfldex> I would much prefer not to have to mix Iterable into that channel.

[10:50] <Geth> ¦ roast: d98a00bfa4 | (Daniel Green)++ | S09-hashes/objecthash.t

[10:50] <Geth> ¦ roast: Make a hash whatever slice test deterministic

[10:50] <Geth> ¦ roast: 

[10:50] <Geth> ¦ roast: Otherwise there would be random fails when the values came back in

[10:50] <Geth> ¦ roast: different orders between runs.

[10:50] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d98a00bfa4

[10:57] *** linkable6 left
[11:09] <gfldex> m: my Channel:D $c.=new; start { $c.send(.item) for ^10; $c.close; }; sub consumer(*@a) { say @a.shift while @a }; consumer(@$c);

[11:09] <camelia> rakudo-moar fb25bd4e2: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[12:05] *** reportable6 left
[12:10] *** squashable6 joined
[13:07] *** reportable6 joined
[13:59] *** linkable6 joined
[14:03] *** discord-raku-bot left
[14:04] *** discord-raku-bot joined
[14:08] *** vrurg joined
[14:10] *** vrurg_ left
[14:55] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4792: Decrement # of calls in a block if any are optimized away

[14:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4792

[15:10] *** linkable6 left
[15:10] *** evalable6 left
[15:12] *** evalable6 joined
[15:13] *** linkable6 joined
[15:46] <Geth> ¦ rakudo: 4d19c236a1 | (Daniel Green)++ | src/Perl6/Optimizer.nqp

[15:46] <Geth> ¦ rakudo: Decrement # of calls in a block if any are optimized away

[15:46] <Geth> ¦ rakudo: 

[15:46] <Geth> ¦ rakudo: This unblocks more removing of magic variables (`$¢`, `$!`, `$/`, `$_`),

[15:46] <Geth> ¦ rakudo: which requires there to not be any calls in the block.

[15:46] <Geth> ¦ rakudo: 

[15:46] <Geth> ¦ rakudo: So this example `my int $a = 0; sub inc-a() { ++$a };` before would

[15:46] <Geth> ¦ rakudo: have the first three magic variables still in the block, since even

[15:46] <Geth> ¦ rakudo: though the call to `&prefix:<++>` was optimized away, the count was

[15:46] <Geth> ¦ rakudo: still non-zero. Now they are all gone.

[15:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4d19c236a1

[15:46] <Geth> ¦ rakudo: fbe731521b | MasterDuke17++ (committed using GitHub Web editor) | src/Perl6/Optimizer.nqp

[15:46] <Geth> ¦ rakudo: Merge pull request #4792 from MasterDuke17/decrement_count_of_calls_in_a_block_if_any_are_optimized_away

[15:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fbe731521b

[15:54] <japhb> Oooh, I wonder if that will affect [Tux]'s benchmarks

[15:57] <MasterDuke> i doubt it. i haven't been able to craft a benchmark with a measurable runtime difference. the optimized qast is definitely better, but i think for the most part spesh is able to optimize it further regardless

[15:58] <lizmat> but it will at least make smaller bytecode, right ?

[15:58] <lizmat> so bigger chance of getting inlined ?

[15:59] <MasterDuke> well, the size reported in a spesh regular log is the same. i didn't check the inline logs

[15:59] <MasterDuke> do you see any difference in what you were measuring?

[16:02] <lizmat> nope, ++$i still at 48, $i = $i + 1 at 40

[16:02] <lizmat> ah.. oops... should pull first  :-)

[16:04] <MasterDuke> probably the `set` vs `sp_fastbox_bi_ic + return_o` is the difference, and that sadly wasn't changed by my optimization

[16:07] *** Xliff joined
[16:07] <lizmat> ok, confirmed: no difference

[16:09] <lizmat> it might actually affect test-t though

[16:09] <lizmat> I just had my first <1 second run on my machine

[16:10] <MasterDuke> huh, that'd be cool

[16:13] <MasterDuke> so both the inc and the add versions have a p6decontrv in their ast, but it's turned into a decont_i in the add version and not in the inc version

[16:21] *** rypervenche left
[16:34] <MasterDuke> tracking what happens in the optimizer is not terribly easy

[18:06] *** reportable6 left
[19:02] *** dogbert11 left
[19:06] *** squashable6 left
[19:11] *** dogbert17 joined
[20:08] <[Tux]> three runs over 1.6

[20:08] <[Tux]> Rakudo v2022.02-36-gfbe731521 (v6.d) on MoarVM 2022.02-1-g0539ead63

[20:08] <[Tux]> csv-test-xs-20      0.411 -  0.419

[20:08] <[Tux]> test-t --race       0.914 -  0.934

[20:08] <[Tux]> csv-ip5xs           0.869 -  0.923

[20:08] <[Tux]> test-t              1.609 -  1.616

[20:08] <[Tux]> csv-parser          4.010 -  4.015

[20:08] <[Tux]> csv-ip5xs-20        5.156 -  5.423

[20:08] <[Tux]> test                6.861 -  7.036

[20:08] <[Tux]> test-t-20 --race    7.380 -  7.412

[20:08] <[Tux]> test-t-20          23.438 - 24.222

[20:08] *** reportable6 joined
[20:09] <MasterDuke> hmmm

[20:11] <japhb> Well that's unexpected

[20:35] <Geth> ¦ rakudo: MasterDuke17++ created pull request #4793: Optimize more cases of p6decontrv ops

[20:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4793

[20:36] <MasterDuke> [Tux]: if you've got some time to spare, could you try with my most recent commit (4d19c236a1) reverted, and/or ^^^ PR applied?

[20:42] <MasterDuke> m: my int $a = 0; sub inc-a() { ++$a }; my int $i = 0; while ++$i < 100_000_000 { inc-a(); }; say now - INIT now; say($a)

[20:43] <camelia> rakudo-moar fbe731521: OUTPUT: «0.493754681␤99999999␤»

[20:43] <MasterDuke> m: my int $a = 0; sub inc-a() { $a = $a + 1 }; my int $i = 0; while ++$i < 100_000_000 { inc-a(); }; say now - INIT now; say($a)

[20:43] <camelia> rakudo-moar fbe731521: OUTPUT: «0.494760397␤99999999␤»

[20:49] <MasterDuke> m: my Int $a = 0; sub inc-a() { ++$a }; my int $i = 0; while ++$i < 10_000_000 { inc-a(); }; say now - INIT now; say($a)

[20:49] <camelia> rakudo-moar fbe731521: OUTPUT: «0.35756092␤9999999␤»

[20:49] <MasterDuke> m: my Int $a = 0; sub inc-a() { $a = $a + 1 }; my int $i = 0; while ++$i < 10_000_000 { inc-a(); }; say now - INIT now; say($a)

[20:49] <camelia> rakudo-moar fbe731521: OUTPUT: «0.326607696␤9999999␤»

[20:49] <MasterDuke> m: use nqp; my Int $a = 0; sub inc-a() { $a = nqp::add_I(nqp::decont($a), 1, Int) }; my int $i = 0; while ++$i < 10_000_000 { inc-a(); }; say now - INIT now; say($a)

[20:49] <camelia> rakudo-moar fbe731521: OUTPUT: «0.292664962␤9999999␤»

[20:50] <japhb> (I'm assuming dropping from 100M to 10M iterations was on purpose ...)

[20:51] <MasterDuke> so for natives the runtime is pretty close between `++$a` and `$a = $a + 1`, but for bigints `++$a` is slower and going right to nqp ops is faster still than `$a = $a + 1`

[20:51] <MasterDuke> yeah, just so it wasn't waiting around for 3+s per run

[20:54] <japhb> nodnod

[20:54] <MasterDuke> m: use nqp; my int $a = 0; sub inc-a() { $a = nqp::add_i($a, 1) }; my int $i = 0; while ++$i < 100_000_000 { inc-a(); }; say now - INIT now; say($a)

[20:54] <camelia> rakudo-moar fbe731521: OUTPUT: «0.492337793␤99999999␤»

[21:07] *** squashable6 joined
[21:11] *** discord-raku-bot left
[21:12] *** discord-raku-bot joined
[21:57] *** qorg11 left
[22:16] *** qorg11 joined
[22:19] *** dogbert17 left
[22:46] <Geth> ¦ rakudo: 2ed885238c | MasterDuke17++ (committed using GitHub Web editor) | src/Perl6/Optimizer.nqp

[22:46] <Geth> ¦ rakudo: Optimize more cases of p6decontrv ops (#4793)

[22:46] <Geth> ¦ rakudo: 

[22:46] <Geth> ¦ rakudo: If there's a QAST::Want in a QAST::Op(p6decontrv), try to optimize based on

[22:46] <Geth> ¦ rakudo: the child of the QAST::Want. This turns the optimized version of `inc-a()` in

[22:46] <Geth> ¦ rakudo: `my int $a = 0; sub inc-a() { ++$a };` into essentially the same as the

[22:46] <Geth> ¦ rakudo: optimized version of `my int $a = 0; sub inc-a() { $a = $a + 1 };`,

[22:46] <Geth> ¦ rakudo: i.e., `decont_i + assign_i + add_i` instead of `p6decontrv + assign_i +

[22:46] <Geth> ¦ rakudo: add_i`.

[22:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2ed885238c

[22:47] *** linkable6 left
[22:48] <MasterDuke> lizmat: have you done any local test-t benchmarking?

[22:48] <lizmat> not without that last patch :)

[22:48] <lizmat> building now

[22:48] <MasterDuke> did you see [Tux]'s latest results?

[22:49] <lizmat> yeah...  no idea why that was

[22:49] <lizmat> or are you suspecting 4d19c236a1ff5921a55c1da8 ?

[22:50] *** linkable6 joined
[22:51] <MasterDuke> yeah, there don't seem to be that many other potentially relevant commits between yesterday and today

[22:53] <lizmat> reverted that one locally... don't see a difference, all within noise levels

[22:54] <MasterDuke> huh, guess we'll see tomorrow

[22:54] <lizmat> I have removed all nqp::add_i from the setting, will commit all of that tomorrow

[22:55] <lizmat> I guess I will be changing the foo = foo + 1 to ++foo next  :-)

[22:55] <lizmat> which will make a lot of code in the setting much more readable

[22:55] <lizmat> but first some sleep

[22:55] <MasterDuke> wow. no change in timings?

[22:56] <lizmat> nope...

[22:56] <MasterDuke> cool

[22:56] <lizmat> I think the benefit is really in the smaller memory footprint, bringing subs within inlining limit 

[23:21] *** linkable6 left
[23:21] *** squashable6 left
[23:21] *** reportable6 left
[23:21] *** evalable6 left
[23:21] *** shareable6 left
[23:21] *** statisfiable6 left
[23:21] *** tellable6 left
[23:21] *** benchable6 left
[23:21] *** greppable6 left
[23:21] *** sourceable6 left
[23:21] *** nativecallable6 left
[23:21] *** coverable6 left
[23:21] *** bloatable6 left
[23:21] *** bisectable6 left
[23:21] *** releasable6 left
[23:21] *** committable6 left
[23:21] *** notable6 left
[23:21] *** unicodable6 left
[23:21] *** quotable6 left
[23:21] *** jjatria left
[23:21] *** [Coke] left
[23:23] *** linkable6 joined
[23:23] *** squashable6 joined
[23:23] *** reportable6 joined
[23:23] *** evalable6 joined
[23:23] *** shareable6 joined
[23:23] *** statisfiable6 joined
[23:23] *** tellable6 joined
[23:23] *** benchable6 joined
[23:23] *** greppable6 joined
[23:23] *** sourceable6 joined
[23:23] *** nativecallable6 joined
[23:23] *** coverable6 joined
[23:23] *** bloatable6 joined
[23:23] *** bisectable6 joined
[23:23] *** releasable6 joined
[23:23] *** notable6 joined
[23:23] *** committable6 joined
[23:23] *** unicodable6 joined
[23:23] *** quotable6 joined
[23:23] *** jjatria joined
[23:23] *** [Coke] joined
