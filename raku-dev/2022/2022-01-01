[00:08] *** reportable6 left
[00:33] *** RakuIRCLogger left
[00:33] *** RakuIRCLogger joined
[00:45] *** [Coke]_ is now known as [Coke]
[01:10] *** reportable6 joined
[03:19] *** committable6 left
[03:19] *** statisfiable6 left
[03:19] *** reportable6 left
[03:19] *** nativecallable6 left
[03:19] *** bisectable6 left
[03:19] *** bloatable6 left
[03:19] *** greppable6 left
[03:19] *** notable6 left
[03:19] *** evalable6 left
[03:19] *** quotable6 left
[03:19] *** shareable6 left
[03:19] *** releasable6 left
[03:19] *** squashable6 left
[03:19] *** linkable6 left
[03:19] *** tellable6 left
[03:19] *** coverable6 left
[03:19] *** sourceable6 left
[03:19] *** unicodable6 left
[03:19] *** benchable6 left
[03:20] *** unicodable6 joined
[03:21] *** coverable6 joined
[03:21] *** tellable6 joined
[03:21] *** sourceable6 joined
[03:21] *** bisectable6 joined
[03:21] *** benchable6 joined
[03:22] *** notable6 joined
[03:22] *** shareable6 joined
[03:22] *** squashable6 joined
[03:23] *** releasable6 joined
[04:07] *** Xliff_ left
[04:20] *** quotable6 joined
[04:20] *** statisfiable6 joined
[04:21] *** linkable6 joined
[04:21] *** greppable6 joined
[04:21] *** committable6 joined
[04:22] *** evalable6 joined
[04:23] *** bloatable6 joined
[05:23] *** evalable6 left
[05:23] *** committable6 left
[05:23] *** quotable6 left
[05:23] *** unicodable6 left
[05:23] *** bloatable6 left
[05:23] *** releasable6 left
[05:23] *** statisfiable6 left
[05:23] *** tellable6 left
[05:23] *** benchable6 left
[05:23] *** squashable6 left
[05:23] *** greppable6 left
[05:23] *** notable6 left
[05:23] *** linkable6 left
[05:23] *** coverable6 left
[05:23] *** bisectable6 left
[05:23] *** shareable6 left
[05:23] *** sourceable6 left
[05:24] *** greppable6 joined
[05:24] *** bisectable6 joined
[05:25] *** releasable6 joined
[05:25] *** statisfiable6 joined
[05:25] *** squashable6 joined
[05:26] *** sourceable6 joined
[05:26] *** unicodable6 joined
[06:09] *** reportable6 joined
[06:23] *** tellable6 joined
[06:24] *** notable6 joined
[06:25] *** evalable6 joined
[07:23] *** coverable6 joined
[07:23] *** bloatable6 joined
[07:25] *** quotable6 joined
[07:25] *** linkable6 joined
[07:26] *** benchable6 joined
[08:26] *** committable6 joined
[09:19] <Geth> ¦ nqp/remove_callsite_flat_named_flag: 908329ce63 | (Stefan Seifert)++ | 13 files
[09:19] <Geth> ¦ nqp/remove_callsite_flat_named_flag: Replace flatnamed arg flag by flat | named
[09:19] <Geth> ¦ nqp/remove_callsite_flat_named_flag: 
[09:19] <Geth> ¦ nqp/remove_callsite_flat_named_flag: No need to have a separate flag when the combination of the existing flags
[09:19] <Geth> ¦ nqp/remove_callsite_flat_named_flag: means the same thing. Will free up the flat for other use in MoarVM.
[09:19] <Geth> ¦ nqp/remove_callsite_flat_named_flag: review: https://github.com/Raku/nqp/commit/908329ce63
[09:19] <Geth> ¦ nqp: niner++ created pull request #754: Replace flatnamed arg flag by flat | named
[09:19] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/754
[09:25] *** shareable6 joined
[10:21] *** nativecallable6 joined
[10:34] <Geth> ¦ nqp/fix_hll_unbox_of_unsigned_ints: d63074cca1 | (Stefan Seifert)++ | 2 files
[10:34] <Geth> ¦ nqp/fix_hll_unbox_of_unsigned_ints: Fix hll_unbox of unsigned ints
[10:34] <Geth> ¦ nqp/fix_hll_unbox_of_unsigned_ints: 
[10:34] <Geth> ¦ nqp/fix_hll_unbox_of_unsigned_ints: This still tried to generate the no longer existing smrt_intify op.
[10:34] <Geth> ¦ nqp/fix_hll_unbox_of_unsigned_ints: Replace with a proper dispatcher based implementation.
[10:34] <Geth> ¦ nqp/fix_hll_unbox_of_unsigned_ints: review: https://github.com/Raku/nqp/commit/d63074cca1
[10:36] <Geth> ¦ nqp: niner++ created pull request #755: Fix hll_unbox of unsigned ints
[10:36] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/755
[11:21] *** evalable6 left
[11:21] *** linkable6 left
[11:22] *** evalable6 joined
[11:23] *** linkable6 joined
[11:29] * lizmat wishes the #raku-dev people a enjoyful 2022!
[11:51] * [Tux] too!
[12:04] <Geth> ¦ nqp: d63074cca1 | (Stefan Seifert)++ | 2 files
[12:04] <Geth> ¦ nqp: Fix hll_unbox of unsigned ints
[12:04] <Geth> ¦ nqp: 
[12:04] <Geth> ¦ nqp: This still tried to generate the no longer existing smrt_intify op.
[12:04] <Geth> ¦ nqp: Replace with a proper dispatcher based implementation.
[12:04] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/d63074cca1
[12:04] <Geth> ¦ nqp: 2a3762ec90 | niner++ (committed using GitHub Web editor) | 2 files
[12:04] <Geth> ¦ nqp: Merge pull request #755 from Raku/fix_hll_unbox_of_unsigned_ints
[12:04] <Geth> ¦ nqp: 
[12:04] <Geth> ¦ nqp: Fix hll_unbox of unsigned ints
[12:04] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/2a3762ec90
[12:04] <nine> lizmat: thanks for the review!
[12:06] <lizmat> BTW, looking at all of the dispatch code, I can't help but think it could use some syntactic sugar
[12:07] <nine> It tends to be a bit verbose, yes. But then at least it's always clear what exactly is done
[12:08] *** reportable6 left
[12:11] *** reportable6 joined
[13:03] <Geth> ¦ roast: 8e61eb8757 | (Christian Bartolomäus)++ | S16-filehandles/filetest.t
[13:03] <Geth> ¦ roast: Simplify fudging for :M, :C, :A
[13:03] <Geth> ¦ roast: 
[13:03] <Geth> ¦ roast: The methods are just not implemented. It doesn't make sense to have
[13:03] <Geth> ¦ roast: a special case for Windows. Also IMHO it's cleaner to just skip the
[13:03] <Geth> ¦ roast: whole block instead of maintaining different skip directives.
[13:03] <Geth> ¦ roast: 
[13:03] <Geth> ¦ roast: Please note that the tests for "README".IO didn't work as well.
[13:03] <Geth> ¦ roast: They have been unfudged back in 2014 with commit ba936a5c8c, but
[13:03] <Geth> ¦ roast: as far as I can see that was only possible because Rakudo's "README"
[13:03] <Geth> ¦ roast: has been renamed to "README.md" a while ago
[13:03] <Geth> ¦ roast: (https://github.com/rakudo/rakudo/commit/633d1fa591).
[13:03] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8e61eb8757
[13:03] <[Tux]> Rakudo v2021.12-27-gd80fb897e (v6.d) on MoarVM 2021.12-5-g06170c973
[13:03] <[Tux]> csv-test-xs-20      0.400 -  0.408
[13:03] <[Tux]> csv-ip5xs           0.877 -  0.883
[13:03] <[Tux]> test-t --race       0.982 -  0.983
[13:03] <[Tux]> test-t              1.654 -  1.681
[13:03] <[Tux]> csv-parser          4.188 -  4.212
[13:03] <[Tux]> csv-ip5xs-20        5.239 -  5.309
[13:03] <[Tux]> test                6.929 -  6.955
[13:03] <[Tux]> test-t-20 --race    7.508 -  7.693
[13:04] <[Tux]> test-t-20          24.295 - 24.727
[13:19] *** linkable6 left
[13:19] *** evalable6 left
[13:21] *** linkable6 joined
[13:51] *** carlmasak joined
[13:57] <carlmasak> m: say now
[13:57] <camelia> rakudo-moar a10042dd9: OUTPUT: «Instant:1641045505.258161955␤»
[13:59] <carlmasak> like giving a certain billionth of a second a serial number
[14:48] *** carlmasak left
[15:08] *** discord-raku-bot left
[15:08] *** discord-raku-bot joined
[15:22] <Geth> ¦ roast: f151ad5c93 | (Christian Bartolomäus)++ | S14-roles/typecheck.t
[15:22] <Geth> ¦ roast: Add missing word to test description
[15:22] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f151ad5c93
[15:28] <lizmat> m: sub infix:<now>(|) { }; say now now now   # carlmasak
[15:28] <camelia> rakudo-moar a10042dd9: OUTPUT: «Nil␤»
[16:01] *** kjp left
[16:03] *** kjp joined
[16:13] <bartolin> m: use NativeCall; sub strlen(Str --> int32) is native { }; dd &strlen; say &strlen.WHAT.^name ~ " " ~ &strlen.VAR.name ~ " = " ~ &strlen.raku
[16:13] <camelia> rakudo-moar a10042dd9: OUTPUT: «Native[Sub+{Callable[int32]},Str]} strlen = sub strlen (Str $ --> int32) { #`(Sub+{Callable[int32]}+{NativeCall::Native[Sub+{Callable[int32]},Str]}|97484856) ... }␤Sub+{Callable[int32]}+{NativeCall::Native[Sub+{Callable[int32]},Str]} strlen = sub st…»
[16:14] <bartolin> m: use NativeCall; sub strlen(Str --> int32) is native { }; dd &strlen
[16:14] <camelia> rakudo-moar a10042dd9: OUTPUT: «Native[Sub+{Callable[int32]},Str]} strlen = sub strlen (Str $ --> int32) { #`(Sub+{Callable[int32]}+{NativeCall::Native[Sub+{Callable[int32]},Str]}|74052280) ... }␤»
[16:15] <bartolin> lizmat: I was confused by this output (esp. the non-matching curlies at the start) -- and only after seeing the call to split in https://github.com/rakudo/rakudo/blob/d80fb897ec/src/core.c/Any.pm6#L596 I understood what was going on. Do you think that is something to worry about?
[16:16] <bartolin> m: use NativeCall; sub strlen(Str --> int32) is native { }; say &strlen.WHAT.^name ~ " " ~ &strlen.VAR.name ~ " = " ~ &strlen.raku
[16:16] <camelia> rakudo-moar a10042dd9: OUTPUT: «Sub+{Callable[int32]}+{NativeCall::Native[Sub+{Callable[int32]},Str]} strlen = sub strlen (Str $ --> int32) { #`(Sub+{Callable[int32]}+{NativeCall::Native[Sub+{Callable[int32]},Str]}|86257392) ... }␤»
[16:17] <bartolin> ^^ That would be the full output, without '.split("::").tail'
[16:18] <bartolin> btw, happy new year to all of you ;)
[16:21] *** evalable6 joined
[16:48] <[Coke]> Happy New Year, folks.
[18:07] *** reportable6 left
[19:08] *** reportable6 joined
[20:46] *** linkable6 left
[20:46] *** evalable6 left
[21:47] *** linkable6 joined
[23:49] *** committable6 left
[23:49] *** coverable6 left
[23:49] *** linkable6 left
[23:49] *** nativecallable6 left
[23:49] *** tellable6 left
[23:49] *** releasable6 left
[23:49] *** unicodable6 left
[23:49] *** sourceable6 left
[23:49] *** reportable6 left
[23:49] *** statisfiable6 left
[23:49] *** notable6 left
[23:49] *** quotable6 left
[23:49] *** bloatable6 left
[23:49] *** bisectable6 left
[23:49] *** squashable6 left
[23:49] *** shareable6 left
[23:49] *** benchable6 left
[23:49] *** greppable6 left
[23:49] *** squashable6 joined
[23:50] *** shareable6 joined
[23:50] *** reportable6 joined
[23:50] *** releasable6 joined
[23:51] *** greppable6 joined
[23:51] *** sourceable6 joined
[23:51] *** quotable6 joined
[23:51] *** tellable6 joined
[23:52] *** unicodable6 joined
