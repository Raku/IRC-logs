[00:03] *** linkable6 left
[00:03] *** evalable6 left
[00:06] *** evalable6 joined
[00:07] *** reportable6 left
[00:36] *** Kaiepi left
[00:39] *** Kaiepi joined
[00:54] *** Kaiepi left
[01:03] *** Kaiepi joined
[01:10] *** reportable6 joined
[01:16] *** Kaiepi left
[01:43] *** Kaiepi joined
[01:46] *** Kaiepi left
[01:49] *** discord-raku-bot left
[01:49] *** discord-raku-bot joined
[01:51] *** Kaiepi joined
[01:53] *** gfldex left
[01:57] *** gfldex joined
[01:58] *** Kaiepi left
[02:00] *** Kaiepi joined
[03:01] *** nine left
[03:01] *** nine joined
[03:05] *** frost joined
[04:21] *** frost left
[04:46] *** kjp left
[04:50] *** kjp joined
[05:23] *** frost joined
[06:02] *** kjp left
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:14] *** kjp joined
[06:37] *** frost left
[06:40] *** frost joined
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:04] *** linkable6 joined
[07:16] *** frost left
[07:28] *** frost joined
[07:34] *** frost left
[08:22] <lizmat> Files=1351, Tests=117094, 280 wallclock secs (35.21 usr  9.88 sys + 3904.09 cusr 321.57 csys = 4270.75 CPU)

[10:21] *** qorg11 left
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:41] *** kjp left
[12:44] *** lucs_ joined
[12:45] *** bartolin_ joined
[12:45] *** tonyo1 joined
[12:46] *** lucs left
[12:46] *** bartolin left
[12:46] *** tonyo left
[12:46] *** ugexe left
[12:46] *** discord-raku-bot left
[12:46] *** [Tux] left
[12:46] *** discord-raku-bot joined
[12:46] *** ugexe joined
[12:47] *** [Tux] joined
[12:54] *** kjp joined
[12:56] <lizmat> Is there a reason why the Distribution::Resource object doesn't have a $.IO attribute ?

[12:56] <lizmat> rather than an .IO method that seems to not cache fetching it ?

[13:10] *** Kaiepi left
[13:10] *** Kaiepi joined
[13:13] <nine> Yes. The actual path and file handle must not become part of the precomp file. They must be resolved at runtime.

[13:15] <nine> Indeed, that's the whole point of having Distribution::Resource in the first place, instead of just returning the IO object from %?RESOURCES access directly.

[13:16] <lizmat> hmmm... but that would only happen if the Distribution::Resource object is created at compile time, no ?

[13:17] <nine> Yes, which it is e.g. in sub foo() is native(%RESOURCES<libraries/foo>) { ... }

[13:21] <lizmat> but at that time, %?RESOURCES is already fixed, no ?

[13:21] <nine> What do you mean by fixed?

[13:22] <lizmat> when the module is compiled, at that time the Locations of the resources is already known ?

[13:22] <lizmat> or is there a reason why we cannot pre-compile an IO::Path object ?

[13:23] <lizmat> I mean, it does *not* have a file handle

[13:24] <nine> No, they are not. Compilation can happen into a staging repository with the files getting moved to their final locations only after compilation is done. This is the case e.g. when packaging modules.

[13:25] <nine> A relocatable rakudo installation amplifies this problem even more.

[13:25] <lizmat> ok, but a lazily set IO attribute wouldn't have that issue, no?

[13:26] <nine> What would that look like?

[13:26] <lizmat>     method IO() {

[13:26] <lizmat>         $!IO //= (self.repo-name  ....

[13:26] <nine> I don't see why this wouldn't have the issue.

[13:26] <lizmat> fwiw, that spectests clean 

[13:27] <lizmat> but I understand your worry

[13:27] <nine> sub foo() is native(%RESOURCES<libraries/foo>) and immediately you get a Distribution::Resource object with a fully initialized .IO attribute with an absolute path in the precomp file.

[13:27] <nine> It's not a worry. This would be definitely wrong and cause breakage. No doubt at all about that.

[13:27] <lizmat> ok  :-)

[13:28] * lizmat reverts a local commit

[13:28] <nine> And yes, having a regression test for this would be nice

[14:29] <Geth__> ¦ rakudo: 67906e48dc | (Elizabeth Mattijsen)++ | src/core.c/Distribution.pm6

[14:29] <Geth__> ¦ rakudo: Add missing methods to Distribution::Resource

[14:29] <Geth__> ¦ rakudo: 

[14:29] <Geth__> ¦ rakudo: Distribution::Resource is supposed to be acting as an IO::Path object.

[14:29] <Geth__> ¦ rakudo: But because the underlying IO::Path object *SHOULD NOT EVER* be serialized

[14:29] <Geth__> ¦ rakudo: during pre-compilation, it is impossible to create an $.IO attribute.

[14:29] <Geth__> ¦ rakudo: 

[14:29] <Geth__> ¦ rakudo: Sadly, "handles" codegens to calling the attribute rather than any accessor

[14:29] <Geth__> ¦ rakudo: <…commit message has 6 more lines…>

[14:29] <Geth__> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/67906e48dc

[14:30] *** Geth__ left
[14:30] *** Geth joined
[14:48] <lizmat> m: class A { method b() handles Str { } }

[14:48] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot unbox a type object (Str) to a str.␤at <tmp>:1␤»

[14:49] <lizmat> interesting

[14:50] *** Geth left
[14:51] *** Geth joined
[16:05] <ugexe> ideally it wouldnt be an IO, but an IO::All (or at least what was proposed for IO::All)

[16:05] <ugexe> since then you can have e.g. resources backed by a socket

[16:05] <ugexe> (maybe it was IO::File.new(uri => ...) actually)

[16:06] <ugexe> long ago there was something on a type of IO abstraction that could have additional uri handlers added to it

[16:11] <ugexe> "For example, calling IO::File.uri('http://....') will throw an error (but will suggest using just uri('http://...') instead)."

[16:12] <ugexe> from https://github.com/Raku/old-design-docs/blob/63e44c36351887f1eb76500d7102f0db44848d27/S32-setting-library/IO.pod#iostreamable

[16:15] <nine> lizmat: that Distribution::Resource doesn't support all IO methods was on purpose. As ugexe++ pointed out, one shouldn't make any assumptions about how resources are stored. We only added methods that make sense regardless of storage backend (like slurp, lines or copy) or that have already been in use at the time we replaced IO with Distribution::Resource.

[16:16] <nine> So if anything it should have fewer methods, not more. That's just hard because auf backwards compatibility

[16:16] <lizmat> ok, but then maybe we should deprecate these methods, and force everybody to use the .IO method ?

[16:17] <lizmat> because .modified was just about the first thing I tried  :-)

[16:17] <lizmat> and it wasn't there

[16:19] <jdv> lizmat: can you look at the PDF::Font::Loader issue (https://github.com/rakudo/rakudo/issues/4724)

[16:19] <jdv> bisected to one of yours

[16:19] <lizmat> jdv: will do

[16:20] <jdv> if you know how to fix Trait::Traced that'd be nice as well.  thanks.

[16:25] <lizmat> I think that's more up vrurg's alley ?

[16:31] *** evalable6 left
[16:31] *** linkable6 left
[17:00] <lizmat> jdv: I'm afraid PDF::Font::Loader is *not* caused by the bisected commit

[17:01] <lizmat> I would be *really* surprised by that, as the commit only changed Capture.raku, which is pretty far away from where the code blows up

[17:02] <lizmat> jdv: did Trait::Traced also fail on the 2021.12 Blin runs?

[17:02] <lizmat> the commit bisected to predates 2021.12 ?

[17:19] <Geth> ¦ rakudo: 25562dd80d | (Elizabeth Mattijsen)++ | src/core.c/Distribution.pm6

[17:19] <Geth> ¦ rakudo: Revert "Add missing methods to Distribution::Resource"

[17:19] <Geth> ¦ rakudo: 

[17:19] <Geth> ¦ rakudo: This reverts commit 67906e48dca69ff9af9dbb4d01dd1ff3a1e759b9.

[17:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/25562dd80d

[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:31] *** evalable6 joined
[18:38] *** dogbert17 joined
[18:40] *** dogbert11 left
[18:55] *** Kaiepi left
[18:56] *** Kaiepi joined
[18:57] <jdv> lizmat: I believe the offending changes were created before the 2021.12 but merged after

[18:59] <jdv> well, given the amount of mess in the current blin we might have to push the release a week and hope next week peeps can get it in shape:(

[18:59] <nine> jdv: looks like the only way out is through. The "unreachable unbox" failures can be fixed by merging the rest of fix_unsigned

[19:00] <jdv> all or nothing, huh?

[19:00] <nine> Thing is, I'm gonna be on vacation for a bit over a week starting this Saturday

[19:01] <nine> And the rest of fix_unsigned will break JVM. Past few days I've made some progress on porting over the changes, but it's hard to say when I'll have it up and running

[19:01] <jdv> nice...  hmm, maybe its worth skipping 2022.01 then?

[19:01] <jdv> or it is easy enough to back out what's in already?

[19:02] <nine> That would also kinda suck because of NQP bootstrap files

[19:05] <jdv> i guess we have no good choice except to skip the Jan release then, right?

[19:08] <nine> Unless....I merge those branches really soon and Blin works out fine. If there are no open issues, it won't matter if I'm available or not

[19:08] <nine> Is JVM mandatory for a release?

[19:09] <jdv> i'm not sure that's specified:)

[19:09] <jdv> do you think there's a good chance it could all be fixed up by 2/18 or 2/25?

[19:10] <jdv> likely dates for the Feb release

[19:11] <jdv> i could probably use a vaca - thanks for reminding me

[19:12] <bartolin_> imho a release with a broken jvm is ok. (it should be pointed out in the release announcement of course)

[19:15] *** Geth left
[19:15] *** Geth joined
[20:00] *** kjp left
[20:01] *** kjp joined
[20:37] <vrurg> lizmat: Trait::Traced bisected to Jonathan's attributes work. I can have a look at it, but that's not really my alley. :)

[20:43] *** qorg11 joined
[21:26] *** ilogger2 left
[21:29] <[Tux]> Rakudo v2021.12-122-g25562dd80 (v6.d) on MoarVM 2021.12-73-gf884085c1

[21:29] <[Tux]> csv-test-xs-20      0.406 -  0.415

[21:29] <[Tux]> test-t --race       0.888 -  0.968

[21:29] <[Tux]> csv-ip5xs           1.087 -  1.094

[21:29] <[Tux]> test-t              1.580 -  1.635

[21:29] <[Tux]> csv-parser          4.182 -  4.288

[21:29] <[Tux]> csv-ip5xs-20        5.714 -  5.747

[21:29] <[Tux]> test                6.878 -  6.977

[21:29] <[Tux]> test-t-20 --race    7.163 -  7.470

[21:29] <[Tux]> test-t-20          23.706 - 24.184

[21:48] <jdv> vrurg: i haven't blin'd your change yet cause there's a lot of blin failure that's yet to be cleaned up.  if and when a bunch does get cleaned i'll re-run

[21:49] <vrurg> jdv: ok. I'm mostly worried about the release.

[21:50] <jdv> why worried?

[22:05] <vrurg> Not to be an obstacle for the next one.

[22:16] <jdv> ah, well there's so much of that there's a real chance the release will not happen on schedule at this point.  thanks for trying though.

[22:21] *** ilogger2 joined
[22:32] *** linkable6 joined
