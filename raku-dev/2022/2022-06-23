[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[01:29] *** [Coke] left
[01:34] *** [Coke] joined
[01:36] *** Kaipei left
[01:40] *** Kaiepi joined
[02:17] *** discord-raku-bot left
[02:17] *** discord-raku-bot joined
[02:36] *** Kaiepi left
[03:36] *** bloatable6 left
[03:36] *** linkable6 left
[03:36] *** reportable6 left
[03:36] *** releasable6 left
[03:36] *** committable6 left
[03:36] *** statisfiable6 left
[03:36] *** quotable6 left
[03:36] *** bisectable6 left
[03:36] *** notable6 left
[03:36] *** sourceable6 left
[03:36] *** evalable6 left
[03:36] *** tellable6 left
[03:36] *** nativecallable6 left
[03:36] *** shareable6 left
[03:36] *** coverable6 left
[03:36] *** benchable6 left
[03:36] *** greppable6 left
[03:36] *** unicodable6 left
[03:36] *** statisfiable6 joined
[03:36] *** sourceable6 joined
[03:36] *** greppable6 joined
[03:36] *** unicodable6 joined
[03:37] *** bisectable6 joined
[03:37] *** bloatable6 joined
[03:37] *** coverable6 joined
[03:38] *** tellable6 joined
[03:38] *** reportable6 joined
[03:38] *** notable6 joined
[03:38] *** nativecallable6 joined
[03:38] *** evalable6 joined
[03:38] *** benchable6 joined
[03:38] *** shareable6 joined
[03:38] *** linkable6 joined
[03:38] *** quotable6 joined
[03:38] *** committable6 joined
[03:39] *** releasable6 joined
[04:43] *** Kaiepi joined
[05:46] *** sjn left
[06:00] *** sjn joined
[06:06] *** reportable6 left
[06:10] *** reportable6 joined
[07:15] <Geth> ¦ rakudo/rakuast: a8de4bb672 | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[07:15] <Geth> ¦ rakudo/rakuast: Make $?ROLE, $?MODULE and $?CLASS available

[07:15] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/a8de4bb672

[07:15] <Geth> ¦ rakudo/rakuast: 24a66ea055 | (Stefan Seifert)++ | 2 files

[07:15] <Geth> ¦ rakudo/rakuast: Properly support access to role attributes from role methods

[07:15] <Geth> ¦ rakudo/rakuast: 

[07:15] <Geth> ¦ rakudo/rakuast: When a role's method tries to access the role's attribute, we need to generate

[07:15] <Geth> ¦ rakudo/rakuast: a runtime lookup for $?CLASS, as attributes will be found on the concrete class

[07:15] <Geth> ¦ rakudo/rakuast: instead of the role's type, i.e. nqp::getattr(self, $?CLASS, '$!attr') instead

[07:16] <Geth> ¦ rakudo/rakuast: of nqp::getattr(self, MyRole, '$!attr')

[07:16] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/24a66ea055

[07:16] <Geth> ¦ rakudo/rakuast: 8ef48b0390 | (Stefan Seifert)++ | 3 files

[07:16] <Geth> ¦ rakudo/rakuast: Fix $?CLASS et al leaking outside the package's scope

[07:16] <Geth> ¦ rakudo/rakuast: 

[07:16] <Geth> ¦ rakudo/rakuast: In addition to adding generated lexicals for $?CLASS, ::?ROLE, etc. to a

[07:16] <Geth> ¦ rakudo/rakuast: package's block, we need to declare those lexicals at BEGIN time, so they are

[07:16] <Geth> ¦ rakudo/rakuast: available to traits, signatures, the parser etc. However doing so in

[07:16] <Geth> ¦ rakudo/rakuast: PERFORM-BEGIN would get them added to the surrounding scope, thus making them

[07:16] <Geth> ¦ rakudo/rakuast: still visible after the class body was finished.

[07:16] <Geth> ¦ rakudo/rakuast: <…commit message has 8 more lines…>

[07:16] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/8ef48b0390

[07:23] <nine> A good day begins with pushed fixes

[07:24] <nine> That last one was hard earned though...took me almost a day :/

[09:09] *** coverable6 left
[09:09] *** nativecallable6 left
[09:09] *** releasable6 left
[09:09] *** committable6 left
[09:09] *** notable6 left
[09:09] *** statisfiable6 left
[09:09] *** benchable6 left
[09:09] *** shareable6 left
[09:09] *** quotable6 left
[09:09] *** greppable6 left
[09:09] *** reportable6 left
[09:09] *** bloatable6 left
[09:09] *** linkable6 left
[09:09] *** evalable6 left
[09:09] *** unicodable6 left
[09:09] *** bisectable6 left
[09:09] *** sourceable6 left
[09:09] *** tellable6 left
[09:09] *** bloatable6 joined
[09:09] *** benchable6 joined
[09:09] *** notable6 joined
[09:09] *** committable6 joined
[09:10] *** nativecallable6 joined
[09:10] *** statisfiable6 joined
[09:11] *** sourceable6 joined
[09:11] *** quotable6 joined
[09:11] *** unicodable6 joined
[09:11] *** evalable6 joined
[09:11] *** linkable6 joined
[09:11] *** greppable6 joined
[09:11] *** shareable6 joined
[09:11] *** tellable6 joined
[09:11] *** coverable6 joined
[09:11] *** bisectable6 joined
[09:11] *** reportable6 joined
[09:12] *** releasable6 joined
[10:21] <Geth> ¦ rakudo: 5a8aa66bc2 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/CoercionHOW.nqp

[10:21] <Geth> ¦ rakudo: Make coercions up to 1.6x as fast

[10:21] <Geth> ¦ rakudo: 

[10:21] <Geth> ¦ rakudo: - calling method named after type, e.g. Int() -> .Int: 1.6x as fast

[10:21] <Geth> ¦ rakudo: - calling .COERCE: 4% faster

[10:21] <Geth> ¦ rakudo: - calling .new:    3% faster

[10:21] <Geth> ¦ rakudo: 

[10:21] <Geth> ¦ rakudo: This has been achieved by breaking up the large "coerce" method into

[10:21] <Geth> ¦ rakudo: <…commit message has 15 more lines…>

[10:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5a8aa66bc2

[10:22] <Geth> ¦ rakudo: d7d8e9d0f4 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/IO/Socket/INET.pm6

[10:22] <Geth> ¦ rakudo: Make unsuccessful connect fail rather than die

[10:22] <Geth> ¦ rakudo: 

[10:22] <Geth> ¦ rakudo: Spotted in https://stackoverflow.com/questions/72639883/how-to-deal-with-exceptions-in-iosocketinet

[10:22] <Geth> ¦ rakudo: 

[10:22] <Geth> ¦ rakudo: There is no documentation or tests covering the behaviour of a failed

[10:22] <Geth> ¦ rakudo: connect.  It is actually the nqp::connect that throws (which turns out

[10:22] <Geth> ¦ rakudo: also to be not documented BTW).

[10:22] <Geth> ¦ rakudo: 

[10:22] <Geth> ¦ rakudo: Having it return a Failure feels more natural indeed.

[10:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d7d8e9d0f4

[10:32] *** sena_kun left
[10:34] *** sena_kun joined
[11:26] <Xliff> use NativeCall; my \mallocParams = :(size_t --> Pointer); mallocParams.say; sub a (&c:(|mallocParams), Int() $s) { my size_t $ss = $s; &c($ss).say; }; sub malloc (size_t --> Pointer) is native {*}; malloc(20).say; a(&malloc, 20);'

[11:26] <Xliff> m: use NativeCall; my \mallocParams = :(size_t --> Pointer); mallocParams.say; sub a (&c:(|mallocParams), Int() $s) { my size_t $ss = $s; &c($ss).say; }; sub malloc (size_t --> Pointer) is native {*}; malloc(20).say; a(&malloc, 20);'

[11:26] <camelia> rakudo-moar d7d8e9d0f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> ve {*}; malloc(20).say; a(&malloc, 20);'⏏<EOL>␤    expecting …»

[11:26] <Xliff> m: use NativeCall; my \mallocParams = :(size_t --> Pointer); mallocParams.say; sub a (&c:(|mallocParams), Int() $s) { my size_t $ss = $s; &c($ss).say; }; sub malloc (size_t --> Pointer) is native {*}; malloc(20).say; a(&malloc, 20);

[11:26] <camelia> rakudo-moar d7d8e9d0f: OUTPUT: «(NativeCall::Types::size_t --> NativeCall::Types::Pointer)␤Cannot resolve caller protect(Lock:U: Block:D); none of these signatures matches:␤    (Lock:D: &code, *%_)␤  in method setup at /home/camelia/rakudo-m-inst-2/share/perl6/core/sources/871…»

[11:27] <Xliff> Hmmm... I get "Signature constraint check failed in binding to parameter '&c'; expected :(|mallocParams) but got :(NativeCall::Types:..."

[11:28] <Xliff> That almost looks like a way to attach function pointers to a symbol, which I desperately need. What kind of changes would it take to make it work?

[11:28] <Xliff> ^^ lizmat vrurg jnthn MasterDuke

[11:29] <lizmat> Xliff: that's really outside of my mindset atm, MasterDuke is moving house and only online occasionally, and jnthn is not on this channel anymore

[11:29] <lizmat> so maybe ask it on #moarvm

[11:34] *** linkable6 left
[11:34] *** evalable6 left
[11:35] *** linkable6 joined
[11:35] *** evalable6 joined
[11:54] <Xliff> lizmat: Thanks.

[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[13:48] *** discord-raku-bot left
[13:48] *** discord-raku-bot joined
[13:53] *** discord-raku-bot left
[13:53] *** discord-raku-bot joined
[14:20] *** sena_kun left
[14:21] *** sena_kun joined
[16:02] *** crystalfrost[m] left
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[20:23] *** discord-raku-bot left
[20:23] *** discord-raku-bot joined
[20:24] *** gfldex left
[20:26] *** gfldex joined
[20:28] *** discord-raku-bot left
[20:28] *** discord-raku-bot joined
[20:59] *** discord-raku-bot left
[20:59] *** discord-raku-bot joined
[21:13] <Geth> ¦ rakudo/lizmat-optimize-native-substr: 714eb6e832 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[21:13] <Geth> ¦ rakudo/lizmat-optimize-native-substr: Add native candidates for sub substr

[21:13] <Geth> ¦ rakudo/lizmat-optimize-native-substr: 

[21:13] <Geth> ¦ rakudo/lizmat-optimize-native-substr: This makes:

[21:13] <Geth> ¦ rakudo/lizmat-optimize-native-substr: 

[21:14] <Geth> ¦ rakudo/lizmat-optimize-native-substr:     my str $a = "foo bar baz";

[21:14] <Geth> ¦ rakudo/lizmat-optimize-native-substr:     my int $f = 4;

[21:14] <Geth> ¦ rakudo/lizmat-optimize-native-substr:     my int $c = 2;

[21:14] <Geth> ¦ rakudo/lizmat-optimize-native-substr:     say substr $a, $f;      # bar baz

[21:14] <Geth> ¦ rakudo/lizmat-optimize-native-substr:     say substr $a, $f, $c;  # ba

[21:14] <Geth> ¦ rakudo/lizmat-optimize-native-substr: 

[21:14] <Geth> ¦ rakudo/lizmat-optimize-native-substr: about 2.8x as fast.

[21:14] <Geth> ¦ rakudo/lizmat-optimize-native-substr: review: https://github.com/rakudo/rakudo/commit/714eb6e832

[21:14] <Geth> ¦ rakudo: lizmat++ created pull request #4965: Add native candidates for sub substr, making it 2.8x as fast

[21:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4965

[21:26] *** discord-raku-bot left
[21:26] *** discord-raku-bot joined
[22:26] *** evalable6 left
[22:26] *** linkable6 left
[22:27] *** evalable6 joined
[22:28] *** linkable6 joined
