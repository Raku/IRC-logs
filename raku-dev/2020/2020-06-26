[00:02] *** sena_kun joined
[00:03] *** Altai-man_ left
[00:07] *** lichtkind left
[02:01] *** Altai-man_ joined
[02:03] *** sena_kun left
[02:09] *** softmoth joined
[02:50] *** [Tux] left
[04:02] *** sena_kun joined
[04:03] *** Altai-man_ left
[04:33] *** camelCaser left
[04:33] *** ccamel joined
[05:29] *** Kaiepi joined
[05:38] *** Kaiepi left
[05:41] *** Kaiepi joined
[06:01] *** Altai-man_ joined
[06:03] *** sena_kun left
[07:05] *** softmoth left
[07:13] *** JJMerelo joined
[07:59] *** [Tux] joined
[08:01] *** sena_kun joined
[08:03] *** Altai-man_ left
[08:11] *** [Tux] left
[08:43] *** [Tux] joined
[09:32] *** JJMerelo left
[10:01] *** Altai-man_ joined
[10:03] *** JJMerelo joined
[10:03] *** sena_kun left
[10:35] *** lichtkind joined
[10:56] <Altai-man_> lizmat, https://gist.github.com/Altai-man/491c91441d25242fa036426fe7d3db0b <- latest blin

[10:56] <lizmat> Altai-man_++

[11:58] <gfldex> raku: sub check { True }; sub s($a where &check) { say $a }; s 'OK';

[11:58] <evalable6> gfldex, rakudo-moar f1960baa9: OUTPUT: «OK␤»

[11:59] <gfldex> using a &subname in a where clause seams not to be in roast. Should it?

[12:00] <jnthn> m: sub check { False }; sub s($a where &check) { say $a }; s 'OK'

[12:00] <camelia> rakudo-moar f1960baa9: OUTPUT: «Constraint type check failed in binding to parameter '$a'; expected anonymous constraint to be met but got Str ("OK")␤  in sub s at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:00] <jnthn> (just checking ;))

[12:00] <jnthn> Yes, though I guess it falls out of smart-match. But these interactions are still worth covering.

[12:02] *** sena_kun joined
[12:02] <gfldex> raku: my &block = { False }; sub s($a where &block) { say $a }; s 'OK';

[12:02] <evalable6> gfldex, rakudo-moar f1960baa9: OUTPUT: «(exit code 1) Constraint type check failed in binding to parameter '$a'; expected anonymous constraint to be met but got Str ("OK")␤  in sub s at /tmp/tDC2OVgXz7 line 1␤  in block <unit> at /tmp/tDC2OVgXz7 line 1␤␤»

[12:02] *** sena_kun left
[12:03] *** sena_kun joined
[12:03] *** Altai-man_ left
[12:05] <gfldex> filed as #650

[12:41] *** JJMerelo left
[12:51] *** lucasb joined
[14:00] *** Altai-man_ joined
[14:03] *** sena_kun left
[14:04] *** statisfiable6 left
[14:04] *** reportable6 left
[14:07] *** statisfiable6 joined
[14:07] *** reportable6 joined
[14:57] <lizmat> finally found one of the match-refactor issues:

[14:57] <lizmat> m: dd "a-z".subst(/. <( "-" )> ./, "..", :g)    # comes out as ".." after the refactor

[14:57] <camelia> rakudo-moar f1960baa9: OUTPUT: «"a..z"␤»

[14:59] <jnthn> ah, that'll be from/to handling issue

[14:59] <lizmat> yeah...

[15:01] <lizmat> indeed. the from falls back to the NQP one, which assumes the $!from has been updated by .MATCH

[15:01] <lizmat> but HLL Match cannot have a .from, as that would interfere with any rule called "from"

[15:02] <lizmat> which it does in one of the modules

[15:04] <lizmat> that's what you get when you're conflating Cursor with Match and Grammar

[15:04] <moritz> aren't there lotsa tests for Match.from in roast?

[15:05] * moritz confused

[15:05] <lizmat> apparently not in conjunction with <( and )>

[15:08] <timotimo> i wonder if we want to put from, and to, and such as ^from and ^to and such

[15:08] <moritz> capture-from, capture-to

[15:09] <lizmat> moritz++

[15:09] <timotimo> prematch, postmatch as well

[15:16] <lizmat> timotimo: those imply capture-from/capture-to, no ?

[15:19] <timotimo> well, they return something else

[15:20] *** JJMerelo joined
[15:21] *** softmoth joined
[15:31] *** lichtkind_ joined
[15:32] *** lichtkind left
[15:33] <Geth> ¦ rakudo/match-refactor: 2a76754af2 | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[15:33] <Geth> ¦ rakudo/match-refactor: Change Match!from to Match.capture-from

[15:33] <Geth> ¦ rakudo/match-refactor: 

[15:33] <Geth> ¦ rakudo/match-refactor: Because the NQP .from still refers to the raw $!from attribute, and

[15:33] <Geth> ¦ rakudo/match-refactor: we needed a smarter .from method that would introspect <( and )>

[15:33] <Geth> ¦ rakudo/match-refactor: captures *without* updating the upper $!from attribute.  However,

[15:33] <Geth> ¦ rakudo/match-refactor: this clashes with grammars that use a rule called "from", so the

[15:33] <Geth> ¦ rakudo/match-refactor: method was initially made private.

[15:33] <Geth> ¦ rakudo/match-refactor: <…commit message has 9 more lines…>

[15:33] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/2a76754af2

[15:34] <Geth> ¦ rakudo/match-refactor: 4bc9918c0e | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[15:34] <Geth> ¦ rakudo/match-refactor: Make Str.subst use capture.from/capture-to

[15:34] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/4bc9918c0e

[15:34] <lizmat> this fixes File::Ignore, but does not fix Inline::Perl5  :-*(

[15:44] <moritz> m: say 'abc' ~~ / b <( c /; say $/.prematch

[15:44] <camelia> rakudo-moar f1960baa9: OUTPUT: «｢c｣␤ab␤»

[16:01] *** sena_kun joined
[16:03] *** Altai-man_ left
[16:15] <lizmat> moritz: unchanged in the match-refactor branch

[18:00] *** Altai-man_ joined
[18:03] *** sena_kun left
[18:40] *** JJMerelo left
[19:17] *** ufobat joined
[19:21] *** Xliff joined
[19:29] *** ufobat_ joined
[19:32] <dogbert17> lizmat: a few other modules are still failing but you probably already know this

[19:32] <lizmat> yeah, Altai-man_ provided me with another Blin run

[19:33] *** ufobat left
[20:01] *** sena_kun joined
[20:03] *** Altai-man_ left
[20:13] *** MasterDuke joined
[20:18] *** patrickb joined
[20:51] <[Tux]> Rakudo version 2020.06-7-gf1960baa9 - MoarVM version 2020.06-6-gbf6af07de

[20:51] <[Tux]> csv-test-xs-20      0.427 -  0.433

[20:51] <[Tux]> csv-ip5xs           0.972 -  1.080

[20:51] <[Tux]> test-t --race       1.267 -  1.703

[20:51] <[Tux]> test-t              2.444 -  2.461

[20:51] <[Tux]> csv-ip5xs-20        9.356 -  9.516

[20:51] <[Tux]> test                9.892 - 10.271

[20:51] <[Tux]> test-t-20 --race   11.623 - 11.676

[20:51] <[Tux]> csv-parser         32.800 - 33.848

[20:51] <[Tux]> test-t-20          41.325 - 42.117

[20:51] <[Tux]> (during the zoom session listening to jnthn)

[20:56] <sena_kun> ouch

[21:04] <[Tux]> https://tux.nl/Files/20200626230356.png system load. So that explains it 

[21:17] *** ufobat_ left
[21:17] <moritz> zoom can be a real resource hog

[22:01] *** Altai-man_ joined
[22:03] *** sena_kun left
[22:22] *** patrickb left
[22:37] *** lichtkind_ left
[22:39] <Geth> ¦ rakudo/match-refactor: 82223076a5 | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[22:39] <Geth> ¦ rakudo/match-refactor: Fix EXISTS-POS and EXISTS-KEY

[22:39] <Geth> ¦ rakudo/match-refactor: 

[22:39] <Geth> ¦ rakudo/match-refactor: Checking the capnames hash by itself is *not* enough, one needs to

[22:39] <Geth> ¦ rakudo/match-refactor: actually look at the $!cstack as well.  Which it now does.

[22:39] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/82223076a5

[22:39] <Geth> ¦ rakudo/match-refactor: 5b626a4d2b | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[22:39] <Geth> ¦ rakudo/match-refactor: Fix typo/thinko

[22:39] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/5b626a4d2b

[22:39] <Geth> ¦ rakudo/match-refactor: c56c996f4f | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[22:39] <Geth> ¦ rakudo/match-refactor: Fix :exists further

[22:39] <Geth> ¦ rakudo/match-refactor: 

[22:39] <Geth> ¦ rakudo/match-refactor: Captures that are expected to return more than one value, are always

[22:39] <Geth> ¦ rakudo/match-refactor: considered to exists, as they always return (a potentially empty)

[22:39] <Geth> ¦ rakudo/match-refactor: Array.  Also, since EXISTS-KEY is probably going to be used much

[22:39] <Geth> ¦ rakudo/match-refactor: more, make that contain the base logic, and have EXISTS-POS refer

[22:39] <Geth> ¦ rakudo/match-refactor: to that.

[22:39] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/c56c996f4f

[22:41] <Altai-man_> lizmat, another blin?

[22:42] <lizmat> Altai-man_: yes please!

[22:42] <Altai-man_> Pancake party...

