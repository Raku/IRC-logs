[00:39] *** lucasb left
[01:27] <Xliff> Is this known?: [OO::Monitors] Could not find Test::Counter

[01:28] <Xliff> Is there a workaround>

[01:28] <Xliff> s/</?/

[01:28] <Xliff> Oh, ffs... you know what I mean.

[01:43] *** Geth left
[01:43] *** Geth joined
[02:08] *** ufobat_ joined
[02:11] *** ufobat left
[05:39] *** releasable6 left
[05:39] *** unicodable6 left
[05:39] *** nativecallable6 left
[05:39] *** bisectable6 left
[05:39] *** quotable6 left
[05:39] *** reportable6 left
[05:39] *** shareable6 left
[05:39] *** coverable6 left
[05:39] *** statisfiable6 left
[05:39] *** committable6 left
[05:39] *** benchable6 left
[05:39] *** bloatable6 left
[05:39] *** notable6 left
[05:39] *** squashable6 left
[05:39] *** greppable6 left
[05:39] *** sourceable6 left
[05:39] *** statisfiable6 joined
[05:39] *** bloatable6 joined
[05:40] *** quotable6 joined
[05:40] *** nativecallable6 joined
[05:40] *** committable6 joined
[05:40] *** squashable6 joined
[05:40] *** coverable6 joined
[05:40] *** benchable6 joined
[05:41] *** sourceable6 joined
[05:41] *** greppable6 joined
[05:41] *** bisectable6 joined
[05:42] *** notable6 joined
[05:42] *** reportable6 joined
[05:42] *** shareable6 joined
[05:42] *** unicodable6 joined
[05:42] *** releasable6 joined
[07:55] *** stoned75 left
[09:01] *** domidumont joined
[09:14] <lizmat> Files=1294, Tests=109644, 209 wallclock secs (28.48 usr  8.04 sys + 2946.76 cusr 275.59 csys = 3258.87 CPU)

[09:16] *** sena_kun joined
[09:37] *** squashable6 left
[09:39] *** squashable6 joined
[09:43] *** Merfont joined
[09:44] *** Kaeipi left
[09:52] *** Altai-man_ joined
[09:55] *** sena_kun left
[10:28] <|Tux|> Rakudo version 2019.11-411-g5d8ef435d - MoarVM version 2020.01-15-g1fa9764bf

[10:28] <|Tux|> csv-test-xs-20      0.417 -  0.428

[10:28] <|Tux|> csv-ip5xs           0.725 -  0.725

[10:28] <|Tux|> test-t --race       0.806 -  0.808

[10:28] <|Tux|> test-t              1.734 -  1.736

[10:28] <|Tux|> csv-ip5xs-20        6.252 -  6.261

[10:28] <|Tux|> test                7.566 -  7.569

[10:28] <|Tux|> test-t-20 --race    9.043 -  9.489

[10:28] <|Tux|> csv-parser         22.527 - 22.696

[10:28] <|Tux|> test-t-20          29.418 - 29.879

[10:28] <|Tux|> 0.002 diff between low and high

[10:47] <Geth> ¦ rakudo: ccb92df2f0 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[10:47] <Geth> ¦ rakudo: Also include "_" in Str.raku fastpath

[10:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ccb92df2f0

[11:25] *** domidumont left
[11:53] *** sena_kun joined
[11:54] *** Altai-man_ left
[12:02] <AlexDaniel> Xliff: yeah… fix the module?

[12:03] <AlexDaniel> Xliff: this line is wrong probably https://github.com/jnthn/oo-monitors/commit/015d1902d22edc01ee5417159f27fa111fbb1828#diff-2ef472ddb0e3d137d38c4da4f14c6a41R3

[12:39] *** Voldenet left
[12:44] *** Voldenet joined
[12:44] *** Voldenet left
[12:44] *** Voldenet joined
[13:01] *** lucasb joined
[13:21] *** AlexDaniel left
[13:30] *** domidumont joined
[13:52] *** Altai-man_ joined
[13:55] *** sena_kun left
[15:09] <japhb> I was able to do a full build (rakudo + all my modules) post-bump, so it looks like nine++'s fix worked for me too.  Time to point release moarvm for packagers, bump to that, and release nqp/rakudo?  Or are we still waiting on Blin results?

[15:41] * vrurg wonders what might cas to block infinitely??

[15:41] <vrurg> *might cause

[15:51] <jnthn> Well, at least using cas ain't the cause ;)

[15:53] *** sena_kun joined
[15:55] *** Altai-man_ left
[16:19] <vrurg> jnthn: looks like blocking was cause by use of Log::Async inside cas code block. Don't know if it's legitimate, but have no time to investigate.

[16:19] <jnthn> Well, you are always vulnerable to live lock if you use cas

[16:20] <jnthn> That's just the nature of the thing

[16:20] <jnthn> It's a global progress bound, but not a local one

[16:32] *** domidumont left
[16:49] *** patrickb joined
[16:51] <patrickb> .tell Xliff Did you try nuking your zef Repo store? I seem to recall this is another instance of the infamous ecosystem-doesn't-support-real-versions problem.

[16:51] <tellable6> patrickb, I'll pass your message to Xliff

[16:55] <patrickb> .tell Xliff You zef most probably still has the OO::Monitor repo checked out on a 2017 something commit  in its repo store. I think the commit AlexDaniel linked is actually the fix for your problem. Zef does not update, because there was no version bump in the repo yet and thus you are stuck with your 2017 checkout.

[16:55] <tellable6> patrickb, I'll pass your message to Xliff

[16:55] <patrickb> jnthn: Can you version bump OO::Monitors?

[17:00] <jnthn> ah, I was going to release it via CPAN instead for the next release...

[17:04] <patrickb> That's the future-proof alternative.

[17:07] <lizmat> bisectable6: class A { method f() { ENTER say "foo" } }; A.f

[17:07] <bisectable6> lizmat, On both starting points (old=2015.12 new=ccb92df) the exit code is 0 and the output is identical as well

[17:07] <bisectable6> lizmat, Output on both points: «foo␤foo␤»

[17:07] <lizmat> wow

[17:07] <lizmat> m: class A { method f() { ENTER say "foo" } }; A.f

[17:07] <camelia> rakudo-moar ccb92df2f: OUTPUT: «foo␤foo␤»

[17:08] <AlexDaniel`> m: class A { method f() { ENTER say "foo" }; say 42 }; A.f

[17:08] <camelia> rakudo-moar ccb92df2f: OUTPUT: «42␤foo␤foo␤»

[17:08] <AlexDaniel`>  * m: class A { method f() { ENTER say "foo"; say 42 } }; A.f

[17:25] <jnthn> patrickb: Done now.

[17:25] <patrickb> jnthn: That was fast. Thank you!

[17:26] <patrickb> .tell Xliff: jnthn++ has just uploaded a new version. When you try again it should just work.

[17:26] <tellable6> patrickb, I'll pass your message to Xliff

[17:26] <jnthn> Welcome; meant to do it before, but forgot.

[17:37] *** patrickb left
[17:52] *** Altai-man_ joined
[17:55] *** sena_kun left
[18:02] *** squashable6 left
[18:03] *** squashable6 joined
[18:18] *** moon-child left
[18:34] *** moon-child joined
[19:25] *** MasterDuke joined
[19:37] *** MasterDuke left
[19:42] *** MasterDuke joined
[19:53] *** sena_kun joined
[19:55] *** Altai-man_ left
[20:52] *** dogbert11 left
[21:16] <Geth> ¦ rakudo: 8ad3d2440a | (Elizabeth Mattijsen)++ | src/core.c/Map.pm6

[21:16] <Geth> ¦ rakudo: Save one scalar allocation per Map.raku

[21:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8ad3d2440a

[21:34] <Geth> ¦ rakudo: 66cf6f811f | (Elizabeth Mattijsen)++ | src/core.c/TypedArray.pm6

[21:34] <Geth> ¦ rakudo: Make Array[Int].raku at least 5% faster

[21:34] <Geth> ¦ rakudo: 

[21:34] <Geth> ¦ rakudo: - at least one scalar allocation less

[21:34] <Geth> ¦ rakudo: - call Type.raku only once

[21:34] <Geth> ¦ rakudo: - better optimized at handling "holes" in the array

[21:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/66cf6f811f

[21:41] <lizmat> if you profile: <foo bar baz>.map: {.raku} for ^1000000

[21:41] <lizmat> versus: <foo bar baz>.map: *.raku for ^1000000

[21:42] <lizmat> you will see that the *.raku case is a slower than the {.raku} case

[21:42] <lizmat> 7110.48ms vs 7352.94ms

[21:43] <sena_kun> lizmat, ooc, is there any special meaning in optimizing .raku? from the user point of view, it doesn't seem to me like a highly hot code, but I wonder if that's the other case for the internals.

[21:43] <lizmat> while debugging stuff with dd, it adds up :-)

[21:43] <lizmat> this particular case is just an example using .raku

[21:44] <lizmat> it could have been any  method

[21:46] <lizmat> the above {.raku} code created 1M Block and 1M Int objects

[21:47] <lizmat> the *.raku case created 1M WhateverCode blocks

[21:48] <lizmat> yet the *.raku case has more GC runs (367 vs 363)

[21:49] <lizmat> so it looks like the {.raku} case is about 3% faster, and has 1% fewer allocations

[21:50] <lizmat> now, there are many cases in the core that use the WhateverCode version in .map e.g.

[21:50] <lizmat> so I'm wondering whether it would make sense to change all of those?

[21:50] <lizmat> or that the WhateverCode version is just under-optimized

[21:51] <lizmat> and should leave it until that is optimized

[21:51] <lizmat> jnthn ^^^

[21:52] *** Altai-man_ joined
[21:54] *** sena_kun left
[22:00] <lizmat> sena_kun: also, the default .gist is calling .raku

[22:00] <tellable6> lizmat, I'll pass your message to sena_kun

[22:00] <lizmat> Altai-man_  ^^^

[22:00] <Altai-man_> ...sorry for my connection...

[22:01] <Altai-man_> yes, read that, thanks for the explanation. :)

[23:52] <Geth> ¦ rakudo/release-2020.01: f60c538d5f | Altai-man++ | docs/release_guide.pod

[23:52] <Geth> ¦ rakudo/release-2020.01: Update new release date

[23:52] <Geth> ¦ rakudo/release-2020.01: review: https://github.com/rakudo/rakudo/commit/f60c538d5f

[23:52] <Geth> ¦ rakudo/release-2020.01: 0266ddd890 | Altai-man++ | 2 files

[23:52] <Geth> ¦ rakudo/release-2020.01: Log all changes (+ announcement)

[23:52] <Geth> ¦ rakudo/release-2020.01: 

[23:52] <Geth> ¦ rakudo/release-2020.01: Deliberately not logged:

[23:52] <Geth> ¦ rakudo/release-2020.01: 

[23:52] <Geth> ¦ rakudo/release-2020.01: 7f15a57 2c5c013 3802cdf 1ec69e1 654d6a1 aa06d32 044b339

[23:52] <Geth> ¦ rakudo/release-2020.01: 88db15f 1d84c64 1d84c64 726c38f d36c2e5 a62d9c7 bbcc342

[23:52] <Geth> ¦ rakudo/release-2020.01: e03f013 830400f 9528bd0 da03d10 9fa4396 f608a7a 82bd9c2

[23:52] <Geth> ¦ rakudo/release-2020.01: <…commit message has 22 more lines…>

[23:52] <Geth> ¦ rakudo/release-2020.01: review: https://github.com/rakudo/rakudo/commit/0266ddd890

[23:52] <Geth> ¦ rakudo/release-2020.01: e8cd0d4462 | Altai-man++ | 2 files

[23:52] <Geth> ¦ rakudo/release-2020.01: Remove reverted commit

[23:52] <Geth> ¦ rakudo/release-2020.01: 

[23:52] <Geth> ¦ rakudo/release-2020.01: Deliberately not logged: [c63d8a87]

[23:52] <Geth> ¦ rakudo/release-2020.01: review: https://github.com/rakudo/rakudo/commit/e8cd0d4462

[23:53] *** sena_kun joined
[23:55] *** Altai-man_ left
