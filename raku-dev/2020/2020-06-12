[00:03] *** Kaiepi left
[00:24] *** leont left
[00:54] *** Altai-man_ joined
[00:56] *** sena_kun left
[01:11] *** chansen_ left
[01:19] *** chansen_ joined
[02:55] *** sena_kun joined
[02:56] *** Altai-man_ left
[03:36] *** softmoth joined
[04:39] *** evalable6 left
[04:39] *** unicodable6 left
[04:39] *** sourceable6 left
[04:39] *** committable6 left
[04:39] *** bisectable6 left
[04:39] *** greppable6 left
[04:39] *** statisfiable6 left
[04:39] *** benchable6 left
[04:39] *** releasable6 left
[04:39] *** quotable6 left
[04:39] *** linkable6 left
[04:39] *** bloatable6 left
[04:39] *** notable6 left
[04:39] *** nativecallable6_ left
[04:39] *** tellable6 left
[04:39] *** shareable6_ left
[04:39] *** coverable6 left
[04:39] *** reportable6 left
[04:39] *** squashable6 left
[04:39] *** sourceable6 joined
[04:40] *** bisectable6 joined
[04:40] *** shareable6 joined
[04:41] *** benchable6 joined
[04:41] *** reportable6 joined
[04:41] *** squashable6 joined
[04:41] *** committable6 joined
[04:41] *** unicodable6 joined
[04:41] *** coverable6 joined
[04:41] *** statisfiable6 joined
[04:41] *** nativecallable6 joined
[04:42] *** notable6 joined
[04:42] *** evalable6 joined
[04:42] *** bloatable6 joined
[04:42] *** tellable6 joined
[04:42] *** greppable6 joined
[04:42] *** linkable6 joined
[04:42] *** releasable6 joined
[04:42] *** quotable6 joined
[04:54] *** Altai-man_ joined
[04:56] *** sena_kun left
[06:04] *** Kaiepi joined
[06:34] *** softmoth left
[06:51] <[Tux]> Rakudo version 2020.05.1-277-g87e91defd - MoarVM version 2020.05-61-g63051257b

[06:51] <[Tux]> csv-test-xs-20      0.395 -  0.400

[06:51] <[Tux]> csv-ip5xs           1.042 -  1.075

[06:51] <[Tux]> test-t --race       1.089 -  1.575

[06:51] <[Tux]> test-t              3.227 -  3.599

[06:51] <[Tux]> test                9.892 - 10.096

[06:51] <[Tux]> csv-ip5xs-20       12.977 - 13.201

[06:51] <[Tux]> test-t-20 --race   14.647 - 14.719

[06:51] <[Tux]> csv-parser         28.223 - 28.682

[06:51] <[Tux]> test-t-20          60.258 - 62.143

[06:52] <[Tux]> is there a reason for this extreme raise or what? I don't se aan extreme load on my workstation

[06:55] *** sena_kun joined
[06:56] *** Altai-man_ left
[07:30] *** patrickb joined
[07:30] <patrickb> o/

[07:32] <patrickb> I'm working on a small module that generates native exec runner programs. Idea: Have a precompiled program that retrieves some arguments attached to its executable (similar to what selfcontained zip archives do) and does exec (an emulation on Windows) with those arguments and the given arguments.

[07:32] <patrickb> Now I'd like some feed back on how to best encode the arguments that I attach to the execuable.

[07:34] <patrickb> I think it's easiest to attach stuff by adding a magic marker prefix which I can then search in my own executable.

[07:35] <patrickb> As far as I currently see the only data I need to attach is an array with the arguments. What would be a sensible way to encode those? I'd like to have it as platform / compiler independent as possible. Also I'd like to generate the data to attach to my program via a raku program.

[07:36] <patrickb> Is the struct data layout stable enough to try to generate a blob directly?

[07:36] <patrickb> Will endianess bite me?

[07:38] <patrickb> Hm... this might have been better asked on #raku, but now it's too late...

[07:52] <lizmat> Files=1306, Tests=111378, 216 wallclock secs (28.84 usr  8.27 sys + 3032.90 cusr 282.70 csys = 3352.71 CPU)

[08:02] <patrickb> I have to leave, but will backlog.

[08:02] <patrickb> o/

[08:07] *** patrickb left
[08:09] <Geth> ¦ rakudo: atroxaper++ created pull request #3752: #3751 Fix vcs conflict marker detection

[08:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3752

[08:09] <linkable6> RAKUDO#3751 [open]: https://github.com/rakudo/rakudo/issues/3751 Find a version control conflict marker only after unspace

[08:10] <Geth> ¦ roast: atroxaper++ created pull request #647: Add test for a vcs conflict marker detection

[08:10] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/647

[08:14] *** atroxaper joined
[08:54] *** Altai-man_ joined
[08:56] *** sena_kun left
[08:57] <Geth> ¦ rakudo: 65e412f7a8 | (Mikhail Khorkov)++ | src/Perl6/Grammar.nqp

[08:57] <Geth> ¦ rakudo: #3751 Fix vcs conflict marker detection

[08:57] <Geth> ¦ rakudo: 

[08:57] <Geth> ¦ rakudo: Previously vcs conflict marker detection work only after unspace.

[08:57] <Geth> ¦ rakudo: Now the marker can be detected as after unspace as without it.

[08:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/65e412f7a8

[08:57] <Geth> ¦ rakudo: f4747daf70 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/Grammar.nqp

[08:57] <Geth> ¦ rakudo: Merge pull request #3752 from atroxaper/3751

[08:57] <linkable6> RAKUDO#3751 [open]: https://github.com/rakudo/rakudo/issues/3751 Find a version control conflict marker only after unspace

[08:57] <Geth> ¦ rakudo: 

[08:57] <Geth> ¦ rakudo: #3751 Fix vcs conflict marker detection

[08:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f4747daf70

[08:58] <Geth> ¦ roast: 98a60f88d2 | (Mikhail Khorkov)++ | S32-exceptions/misc.t

[08:58] <Geth> ¦ roast: Add test for a vcs conflict marker detection

[08:58] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/98a60f88d2

[08:58] <Geth> ¦ roast: 786afd5e2f | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S32-exceptions/misc.t

[08:58] <Geth> ¦ roast: Merge pull request #647 from atroxaper/3751

[08:58] <Geth> ¦ roast: 

[08:58] <Geth> ¦ roast: Add test for a vcs conflict marker detection

[08:58] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/786afd5e2f

[09:22] *** leont joined
[09:53] *** MasterDuke left
[10:42] <Geth> ¦ nqp: 9d156a4ffa | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[10:42] <Geth> ¦ nqp: Bump NQP for latest goodies, like a new libuv

[10:42] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/9d156a4ffa

[10:55] *** sena_kun joined
[10:56] *** Altai-man_ left
[10:59] <Geth> ¦ rakudo: 5b507c8adf | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[10:59] <Geth> ¦ rakudo: Bump NQP to get latest MoarVM and NQP goodies

[10:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5b507c8adf

[11:06] <dogbert11> o/

[11:08] <dogbert11> Have anyone looked into the massive slowdown that [Tux] mentioned above?

[11:08] <dogbert11> test-t 3.227 - 3.599

[11:10] <lizmat> hmmm.. hadn't noticed it yet...

[11:10] <lizmat> lemme do some local test-t's

[11:12] <lizmat> hmmm.. that *does* look way off

[11:13] <dogbert11> I have an idea what it might be

[11:14] <dogbert11> lizmat, to confirm, can you try again without https://github.com/MoarVM/MoarVM/commit/63051257b53a16732e09fcd8794a8a20adb26414

[11:15] * sena_kun hopes it is not a new "take a severe perf drop or segfaults into a release" issue

[11:32] <lizmat> dogbert11: down from 2.237 to 1.272 on my machine, so I'd say: yes, that's the reason  :-(

[11:33] <lizmat> jnthn ^^

[11:35] <lizmat> perhaps, since this was a temporary fix indeed, we should just revert it ?

[11:52] *** jjatria left
[11:53] <lizmat> bisectable6: sub foo() { fail }(); CATCH { default { say .backtrace.elems } }

[11:53] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=5b507c8) because on both starting points the exit code is 0

[11:54] <bisectable6> lizmat, bisect log: https://gist.github.com/f9f0303736f85aef6b52bd4afc2d969d

[11:54] <bisectable6> lizmat, (2019-07-12) https://github.com/rakudo/rakudo/commit/96456b6e7ecf868b66467dbce50a6e11ee58c65a

[11:55] <lizmat> bisectable6: old=2020.05.1 sub foo() { fail }(); CATCH { default { say .backtrace.elems } }

[11:55] <bisectable6> lizmat, On both starting points (old=2020.05.1 new=5b507c8) the exit code is 0 and the output is identical as well

[11:55] <bisectable6> lizmat, Output on both points: «4␤»

[11:57] *** jjatria joined
[11:58] <lizmat> bisectable6: old=2020.05.1 sub foo() { fail }(); CATCH { default { say .backtrace.list[2].code.name } }'

[11:58] <lizmat> foo

[11:58] <bisectable6> lizmat, On both starting points (old=2020.05.1 new=5b507c8) the exit code is 1 and the output is identical as well

[11:58] <bisectable6> lizmat, Output on both points: «04===SORRY!04=== Error while compiling /tmp/N2fvrP0IOY␤Strange text after block (missing semicolon or comma?)␤at /tmp/N2fvrP0IOY:1␤------> 03t { say .backtrace.list[2].code.name } }08⏏04'␤»

[11:58] <lizmat> bisectable6: old=2020.05.1 sub foo() { fail }(); CATCH { default { say .backtrace.list[2].code.name } }

[11:58] <bisectable6> lizmat, On both starting points (old=2020.05.1 new=5b507c8) the exit code is 0 and the output is identical as well

[11:58] <bisectable6> lizmat, Output on both points: «foo␤»

[11:58] <lizmat> bisectable6: old=2020.02 sub foo() { fail }(); CATCH { default { say .backtrace.list[2].code.name } }

[11:58] <bisectable6> lizmat, On both starting points (old=2020.02 new=5b507c8) the exit code is 0 and the output is identical as well

[11:58] <bisectable6> lizmat, Output on both points: «foo␤»

[11:59] * lizmat wonders why t/spec/S32-exceptions/misc.t is failing for her

[12:13] <lizmat> hmmm... HEAD appears to have test errors with JSON::Fast

[12:14] <lizmat> will look at it when back

[12:14] <lizmat> afk for a few hours&

[12:17] <jnthn> lizmat, dogbert11: Please try it as `if (IS_CONCRETE(is->invocation_handler)) {` to see if that help

[12:17] <jnthn> *helps

[12:42] *** atroxaper left
[12:54] *** Altai-man_ joined
[12:56] *** sena_kun left
[13:08] <dogbert11> jnthn: that does ineed help :)

[13:08] <dogbert11> *indeed

[13:08] <jnthn> dogbert11: OK, good, if it spectests clean and you've time to commit it (or PR it), please do :)

[13:09] <jnthn> (I'm on new-disp in the middle of a tricky debug...)

[13:11] <dogbert11> jnthn: will test and submit PR

[13:14] <jnthn> Thanks!

[13:14] <jnthn> [Tux]++ # helping us spot perf regressions

[13:45] *** lichtkind joined
[14:05] *** atroxaper joined
[14:35] <ShimmerFairy> I found another segfault, this time all you have to do is  nqp::mvmstartprofile(nqp::hash("kind", "instrumented")); nqp::mvmendprofile()  (poking at the coredump in gdb at the moment)

[14:42] <jnthn> At a wild guess, it probably expects something to be recorded and trips up when nothing ever was.

[14:43] <jnthn> And of course that's a useless thing to do, so nobody ever ran into this before :)

[14:43] <ShimmerFairy> That's the minimum case. I initially had a simple nqp::hash(...) statement between the two, assuming it would log something.

[14:43] <jnthn> No, that ain't how it works; you need to make a call to actually profile.

[14:44] <jnthn> It can't instrument the frame it's sitting in. We're crazy enough to do OSR, but not so crazy as to do it just for the fun of it :)

[14:46] <ShimmerFairy> It's a good thing I'm trying to improve the documentation, never said anything about what the profiler can and can't log.

[14:48] <jnthn> The nqp:: op docs?

[14:49] <ShimmerFairy> Yeah, but just the docs/ directory in general. I want to write a compiler for an old language in NQP, and if I need to read the source code to understand it, might as well improve the docs.

[14:49] <ShimmerFairy> (and btw, making a call did, of course, work)

[14:53] <jnthn> Long short, but: did anyone here ever do any analysis of the use of flattening args and the stability of the resulting arg set at a particular callsite?

[14:53] <jnthn> *shot

[14:54] *** sena_kun joined
[14:55] <jnthn> I'm guessing the ratio of megamorphic sites must be somewhat higher, but I don't have that much intuition how much higher...

[14:57] *** Altai-man_ left
[14:59] *** softmoth joined
[15:04] <Geth> ¦ rakudo/new-disp: 8a0b228a80 | (Jonathan Worthington)++ | 3 files

[15:04] <Geth> ¦ rakudo/new-disp: Mostly switch qualified method calls to dispatch

[15:04] <Geth> ¦ rakudo/new-disp: 

[15:04] <Geth> ¦ rakudo/new-disp: Which needs filling in an amount of the general dispatch-y logic too.

[15:04] <Geth> ¦ rakudo/new-disp: Some tests fail because multiple dispatch caching needs to be done in

[15:04] <Geth> ¦ rakudo/new-disp: terms of the new dispatcher, which is a rather larger task.

[15:04] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/8a0b228a80

[15:11] <[Tux]> jnthn, np. Glad to be of help.

[15:11] <[Tux]> Just call when you need another run. Note that I am not glued to my screen. I need some sleep once in a while :)

[15:36] <Geth> ¦ rakudo/new-disp: 370d1c84b0 | (Jonathan Worthington)++ | 3 files

[15:36] <Geth> ¦ rakudo/new-disp: Replace .? spesh plugin with dispatcher

[15:36] <Geth> ¦ rakudo/new-disp: 

[15:36] <Geth> ¦ rakudo/new-disp: Probably a win over the spesh plugin, in so far as even before spesh it

[15:36] <Geth> ¦ rakudo/new-disp: can avoid invoking the args-discarding code block and just evaluate to a

[15:36] <Geth> ¦ rakudo/new-disp: Nil constant instead.

[15:36] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/370d1c84b0

[15:40] *** dogbert11 left
[15:40] <Kaiepi> IO::Socket::Async.connect seems to perform around 10-15% better on average with my changes to dns resolution for v6.e compared to v6.c's changes so far

[15:40] <Kaiepi> that's with happy eyeballs' logic for dns queries and connections, but not address sorting yet

[15:41] <jnthn> ooh, nice

[15:56] *** maggotbrain left
[16:04] *** atroxaper left
[16:12] <Geth> ¦ rakudo/new-disp: 049536c1f8 | (Jonathan Worthington)++ | 3 files

[16:12] <Geth> ¦ rakudo/new-disp: Move private method dispatch to the dispatcher

[16:12] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/049536c1f8

[16:54] *** Altai-man_ joined
[16:56] *** sena_kun left
[17:01] <Geth> ¦ rakudo/new-disp: ec6b477b89 | (Jonathan Worthington)++ | 2 files

[17:01] <Geth> ¦ rakudo/new-disp: Stub in the assign dispatcher

[17:01] <Geth> ¦ rakudo/new-disp: 

[17:01] <Geth> ¦ rakudo/new-disp: For now, it just always produces the slow path. Switch over to using the

[17:01] <Geth> ¦ rakudo/new-disp: dispatcher rather than the spesh plugin, to see that this much works.

[17:01] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/ec6b477b89

[17:01] <jnthn> Home time, but by this point I've either done or got WIP on every one of the spesh plugins being moved over to the new dispatcher.

[17:10] *** patrickb joined
[17:14] *** patrickz joined
[17:17] *** patrickb left
[17:27] <[Coke]> nice.

[17:40] *** patrickz left
[18:14] <lizmat> JSON::Fast testing current fails with:

[18:15] <lizmat> raku(68007,0x10dcb65c0) malloc: *** error for object 0x7faf54d466e0: pointer being freed was not allocated

[18:15] <lizmat> raku(68007,0x10dcb65c0) malloc: *** set a breakpoint in malloc_error_break to debug

[18:24] *** MasterDuke joined
[18:26] <MasterDuke> lizmat: which test? sounds like it might be something from that leak cleanup PR of mine jnthn++ merged earlier today

[18:27] <lizmat> MasterDuke: was that from before the bump?  if so, then probably yes

[18:28] <lizmat> it does this trying to parse a *very* troublesome piece of invalid JSON

[18:31] <MasterDuke> hm. i see a double free in t/01-parse.t, but the backtrace doesn't point exactly to code i modified in the PR

[18:31] <lizmat> t/01-parse.t in https://github.com:timo/json_fast.git

[18:32] <lizmat> I feared 87e91defd5a600e1c3a9 could be the reason, but the error occurs without that one as well

[18:32] <linkable6> (2020-06-11) https://github.com/rakudo/rakudo/commit/87e91defd5 Make Match.caps about 35% faster

[18:33] <MasterDuke> it's happening in src/6model/reprs/MVMString.c's gc_free. maybe an exception is being caught (because i did do some freeing of string stuff before exceptions), which keeps the object alive and then it is collected and freed again?

[18:55] *** sena_kun joined
[18:57] *** Altai-man_ left
[19:01] <timotimo> can give valgrind or asan a try

[19:10] <MasterDuke> timotimo: it's here https://github.com/MoarVM/MoarVM/blame/master/src/strings/utf16.c#L258

[19:11] <timotimo> that's where it gets freed the second time?

[19:11] <MasterDuke> first time

[19:11] <timotimo> or the first time?

[19:11] <timotimo> ok let me look very sharply at the code

[19:12] <timotimo> ah, yeah

[19:12] <MasterDuke> second time is https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/MVMString.c#L68

[19:12] <timotimo> since the gc_free function doesn't null-check, you can't just null out the str->body.storage.blob_32

[19:12] <timotimo> but the moment the string object was allocated via gc_alloc_init it has already escaped

[19:13] <timotimo> and gc_free_unmarked will get to it

[19:13] <timotimo> so all the MVM_free(…blob_32) in this function are suspect

[19:13] <MasterDuke> hm. guess i need to go back and double check all those changes?

[19:14] <timotimo> alternatively, move the allocation towards the return

[19:14] <timotimo> yeah, with this new insight, this pattern should be easy-ish to spot

[19:15] <MasterDuke> so if some thing has been repr-allocated, and then some storage malloced into it, we shouldn't free the attached storage?

[19:16] <timotimo> that sounds about right

[19:16] <MasterDuke> (in this case, yeah, the simple fix to the move the allocation to after the exceptions can be thrown and then the frees aren't needed at all)

[19:17] <timotimo> doesn't have to be MVM_repr_alloc_init, that's just a shortcut for REPR(type)->alloc(size) + REPR(type)->init(*obj, blah)

[19:17] <MasterDuke> yep

[19:18] <MasterDuke> i can't swear i'll be able to audit all the changes from the PR this evening, but i should probably be able to by tomorrow

[19:31] <gfldex> react whenever run("/usr/bin/find", "/mnt", :out).out.lines { say $++ }

[19:31] <evalable6> gfldex, rakudo-moar 5b507c8ad: OUTPUT: «0␤»

[19:31] <gfldex> dies with:

[19:31] <gfldex> Died because of the exception:

[19:31] <gfldex>     Malformed UTF-8 near bytes 47 6c 81

[19:31] <gfldex>       in block <unit> at -e line 1

[19:32] <gfldex> Should Rakudo be able to handle malformed utf-8 that pops out of Proc::Async?

[19:36] <MasterDuke> hm. or should the user be required to manually decode/encode before calling .lines?

[19:36] <lizmat> perhaps it should default to utf8-c8 ?

[19:40] <MasterDuke> timotimo: oh, can't simply move the allocation, it's written to in the loop immediately after. so i'll just remove the frees

[19:41] <timotimo> hm?

[19:41] <timotimo> the allocation of the buffer can be separate from the allocation of the object

[19:42] <MasterDuke> oh, you meant move the object allocation after the loop?

[19:42] <timotimo> yes

[19:42] <MasterDuke> hm. is that better? then we still need the frees before the throw

[19:42] *** AlexDani` joined
[19:43] <timotimo> it is better, because then you can free the buffer without crashing moarvm

[19:44] <Geth> ¦ roast: 041a5fce65 | (Elizabeth Mattijsen)++ | 2 files

[19:44] <Geth> ¦ roast: Remove some RT references that are confusing

[19:44] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/041a5fce65

[19:44] <Geth> ¦ roast: 9dcc29e03a | (Elizabeth Mattijsen)++ | S05-mass/rx.t

[19:44] <Geth> ¦ roast: Remove confusing quote

[19:44] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9dcc29e03a

[19:44] <Geth> ¦ roast: 74ca4b2231 | (Elizabeth Mattijsen)++ | 357 files

[19:44] <timotimo> if you just throw out the frees in front of the exception throws, the object with its buffer will stick around until the next GC run

[19:44] <Geth> ¦ roast: Update majority of RT ticket references to new repo

[19:44] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/74ca4b2231

[19:44] *** AlexDaniel left
[19:44] <MasterDuke> ok, i'll just move the object allocation then

[19:45] <timotimo> [X] bully contributors into taking my position by snarkily point out problems with alternative solutions they bring up

[19:45] <timotimo> i'm very good person

[19:46] <gfldex> filed as #3753

[19:46] <MasterDuke> heh. you're making good points though

[19:46] <timotimo> i can make the same good points with less snark, though

[19:47] <MasterDuke> hm, i didn't actually pick up on much snark

[19:51] <timotimo> maybe just a random moment of too much self-reflection

[19:52] <MasterDuke> to confirm, https://gist.github.com/MasterDuke17/4971e3163bb95ff04d575cb7a782d0b7 is what you were thinking/looks good?

[19:55] <timotimo> +    MVMString *result = (MVMString *)REPR(result_type)->allocate(tc, STABLE(result_type));

[19:55] <timotimo> +    result->body.storage.blob_32 = buffer;

[19:55] <timotimo> i think that's a variable declaration after code

[19:58] <MasterDuke> oops, that's a copy+paste and forgot to remove the decl

[20:02] <MasterDuke> fixes the double free in json::fast

[20:11] <MasterDuke> what about this one https://github.com/MoarVM/MoarVM/pull/1291/files#diff-42f4d04f4d47309c4040b02ff2fa4972R115

[20:19] <timotimo> can be fine, if you null out the condvar field after freeing it

[20:28] <MasterDuke> so just make it MVM_free_null?

[20:29] <timotimo> think so

[20:48] *** MasterDuke left
[20:54] *** Altai-man_ joined
[20:56] *** sena_kun left
[21:17] *** MasterDuke joined
[22:55] *** sena_kun joined
[22:57] *** Altai-man_ left
[23:48] *** leont left
