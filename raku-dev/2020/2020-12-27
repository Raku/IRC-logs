[01:34] <AlexDaniel`> “no ssd” option is going to be too slow I think

[01:34] <AlexDaniel`> “Why is docker necessary?” oh god.

[01:35] <AlexDaniel`> I've been running the bots as systemd services, it's terrible

[01:36] <AlexDaniel`> I did that because 1. docker wasn't that much popular at the time and 2. because I couldn't be bothered to spend 20 minutes writing a dockerfile

[01:36] <AlexDaniel`> don't be like me

[01:38] <AlexDaniel`> it'll resolve several long-standing issues with the bots

[06:27] *** oem left
[06:36] *** oem joined
[07:58] *** cog joined
[08:01] *** oem left
[08:02] *** cog__ left
[09:15] *** Altai-man joined
[11:21] <Geth> ¦ nqp: de93c668c6 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[11:21] <Geth> ¦ nqp: Bump MoarVM for latest fixes

[11:21] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/de93c668c6

[11:32] <Geth> ¦ rakudo: 7c37d922fc | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[11:32] <Geth> ¦ rakudo: Bump  NQP to get the latest MoarVM fixes

[11:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7c37d922fc

[11:57] *** sena_kun joined
[11:58] *** Altai-man left
[12:02] *** gugod left
[12:16] <Geth> ¦ rakudo/faster-slice-access: 1628a630a7 | (Elizabeth Mattijsen)++ | 3 files

[12:16] <Geth> ¦ rakudo/faster-slice-access: Make @a[Int]:adverbs between 2x and 6x as fast

[12:16] <Geth> ¦ rakudo/faster-slice-access: 

[12:16] <Geth> ¦ rakudo/faster-slice-access: Introducing Array::Element class and Array::Element::xxx classes for

[12:16] <Geth> ¦ rakudo/faster-slice-access: faster dispatch and direct handling of adverbs using the new adverb

[12:16] <Geth> ¦ rakudo/faster-slice-access: handling infrastructure.  Also contains some other tweaks.

[12:16] <Geth> ¦ rakudo/faster-slice-access: 

[12:16] <Geth> ¦ rakudo/faster-slice-access: This breaks some spectests that look for less specific error messages

[12:16] <Geth> ¦ rakudo/faster-slice-access: <…commit message has 5 more lines…>

[12:16] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/1628a630a7

[12:25] <timotimo> whoa

[12:32] <Geth> ¦ rakudo/faster-slice-access: 0cad82b35c | (Elizabeth Mattijsen)++ | src/core.c/array_slice.pm6

[12:32] <Geth> ¦ rakudo/faster-slice-access: Restore bare @a[Int] candidate

[12:32] <Geth> ¦ rakudo/faster-slice-access: 

[12:32] <Geth> ¦ rakudo/faster-slice-access: This was somehow lost, but vary well cared for by the @a[Any] candidate,

[12:32] <Geth> ¦ rakudo/faster-slice-access: but having a bare @a[Int] candidate *is* better in the short run.  In

[12:32] <Geth> ¦ rakudo/faster-slice-access: the long run it would all get optimized in (almost) the same way anyway.

[12:32] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/0cad82b35c

[12:55] <[Tux]> Rakudo v2020.12-10-g7c37d922f (v6.d) on MoarVM 2020.12-9-gb8663f53a

[12:55] <[Tux]> csv-test-xs-20      0.425 -  0.451

[12:55] <[Tux]> test-t --race       0.906 -  0.924

[12:55] <[Tux]> csv-ip5xs           0.845 -  0.948

[12:55] <[Tux]> test-t              2.083 -  2.313

[12:55] <[Tux]> test                7.529 -  9.183

[12:55] <[Tux]> csv-ip5xs-20        8.324 -  9.189

[12:56] <[Tux]> test-t-20 --race   10.191 - 10.948

[12:56] <[Tux]> csv-parser         27.386 - 31.220

[12:56] <[Tux]> test-t-20          35.029 - 36.024

[13:25] <Geth> ¦ rakudo/faster-slice-access: 6c36067478 | (Elizabeth Mattijsen)++ | 2 files

[13:25] <Geth> ¦ rakudo/faster-slice-access: Rince, repeat for the @a[Any] case

[13:25] <Geth> ¦ rakudo/faster-slice-access: 

[13:25] <Geth> ¦ rakudo/faster-slice-access: Makes the @a[Any]:adverbs case about 2x as fast.

[13:25] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/6c36067478

[13:40] <dogbert17> lizmat: is anything special needed in order to build the faster-slice-access branch?

[13:41] <dogbert17> +++ Compiling blib/Perl6/Metamodel.moarvm

[13:41] <lizmat> you need to run configure again

[13:41] <dogbert17> +++ Compiling blib/Perl6/BOOTSTRAP/v6c.moarvm

[13:41] <dogbert17> make: *** No rule to make target 'src/core.c/Array/Element.pm6', needed by 'blib/CORE.c.setting.moarvm'.  Stop.

[13:41] <dogbert17> I have run 'perl Configure.pl --gen-moar --gen-nqp --backends=moar'

[13:41] <lizmat> argh,.,,  did I forget to push Array/Element ?

[13:42] <dogbert17> impossible :)

[13:42] <Geth> ¦ rakudo/faster-slice-access: 6400152b3f | (Elizabeth Mattijsen)++ | src/core.c/Array/Element.pm6

[13:42] <Geth> ¦ rakudo/faster-slice-access: Oops, forgot to push Array::Element

[13:42] <Geth> ¦ rakudo/faster-slice-access: 

[13:42] <Geth> ¦ rakudo/faster-slice-access: dogbert17++ for the spot!

[13:42] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/6400152b3f

[14:18] <[Tux]> Rakudo v2020.12-10-g7c37d922f (v6.d) on MoarVM 2020.12-9-gb8663f53a

[14:18] <[Tux]> csv-test-xs-20      0.384 -  0.389

[14:18] <[Tux]> csv-ip5xs           0.840 -  0.881

[14:18] <[Tux]> test-t --race       0.846 -  0.977

[14:18] <[Tux]> test-t              1.989 -  2.001

[14:18] <[Tux]> csv-ip5xs-20        8.094 -  8.142

[14:19] <[Tux]> test                8.101 -  8.218

[14:19] <[Tux]> test-t-20 --race    9.410 -  9.755

[14:19] <[Tux]> csv-parser         28.064 - 29.532

[14:19] <[Tux]> test-t-20          31.951 - 33.282

[14:19] <[Tux]> (the first one ran during some relatively heavy network traffic as I noticed when that was done)

[14:21] <dogbert17> m: my @a = ("a" .. "za")[*]; say @a[(^@a).pick]; say @a.elems; say now - INIT now

[14:21] <camelia> rakudo-moar 7c37d922f: OUTPUT: «tu␤677␤6.1435179␤»

[14:21] *** gugod joined
[14:22] <lizmat> dogbert17: why not @a.pick ?

[14:22] <lizmat> m: my @a = ("a" .. "za")[*]; say @a.pick; say @a.elems; say now - INIT now

[14:22] <camelia> rakudo-moar 7c37d922f: OUTPUT: «gv␤677␤5.8618448␤»

[14:22] <lizmat> m: my @a = ("a" .. "za")[*]; say @a.pick; say @a.elems; say now - INIT now

[14:22] <lizmat> aaah... the whatever slice

[14:22] <camelia> rakudo-moar 7c37d922f: OUTPUT: «vc␤677␤6.03103091␤»

[14:23] <dogbert17> lizmat: I stole the example from https://github.com/rakudo/rakudo/issues/3865

[14:30] <lizmat> dogbert17: that slowness of assigning to the Whatever slice will sool be gone

[14:30] <lizmat> *soon

[14:33] <lizmat> seems like the Whatever slice on a Sequence sorta triggers a worse case scenario

[14:34] <lizmat> the code without the [*] has 0 GC's, the one with has 248 GC's  :-(

[14:34] <lizmat> with Str.succ called 229502 times instead of 677

[14:34] <lizmat> wtf ?

[14:34] <lizmat> brrr...

[14:38] <timotimo> i think i saw that before

[14:38] <timotimo> for some reason it starts over and over again

[14:38] <timotimo> from the beginning

[14:40] <lizmat> yeah... looks like

[14:41] <lizmat> maybe I should revisit my Sequence work some day soon

[14:42] <dogbert17> that succ(s) :)

[14:42] <timotimo> i'm hoping this can be improved without redoing sequence :D

[14:52] <lizmat> actually, it's not a Seq, it's a Range  :-)

[14:56] <timotimo> true

[15:35] <Geth> ¦ rakudo: 9ad80af215 | (Elizabeth Mattijsen)++ | src/core.c/array_slice.pm6

[15:35] <Geth> ¦ rakudo: Speedup the basic @a[*] (Whatever slice)

[15:35] <Geth> ¦ rakudo: 

[15:35] <Geth> ¦ rakudo: Spotted by Jan-Olof Hendig++ with my @a = ("a" .. "za")[*].  That

[15:35] <Geth> ¦ rakudo: particular example is now about 80x as fast, but bigger sources

[15:35] <Geth> ¦ rakudo: in number of elements will probably see even better improvements

[15:35] <Geth> ¦ rakudo: as the original situation appears to have iterated the Range again

[15:35] <Geth> ¦ rakudo: and again for each element fetched.

[15:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9ad80af215

[15:35] <lizmat> dogbert17 timotimo ^^

[15:48] <MasterDuke> hey, now i can't use that example as a pathological deopt test case!

[15:53] <lizmat> m: my $r := "a" .. "za"; my @a = $r[^$r.elems]; say now - INIT now

[15:53] <camelia> rakudo-moar 9ad80af21: OUTPUT: «6.21456879␤»

[15:53] <lizmat> MasterDuke: ^^

[15:56] *** Altai-man joined
[15:58] *** sena_kun left
[15:59] *** domidumont left
[15:59] *** domidumont joined
[16:01] <MasterDuke> ha

[16:30] <dogbert17> lizmat++, doesn't that mean you can move R#3865 to testneeded?

[16:30] <linkable6> R#3865 [open]: https://github.com/rakudo/rakudo/issues/3865 [performance] Slow code when using whatever star in index to return full-length object (who'da thunk?)

[16:31] <lizmat> dogbert17: looks like

[16:59] <Geth> ¦ rakudo/faster-slice-access: a3ef39a51d | (Elizabeth Mattijsen)++ | src/core.c/array_slice.pm6

[16:59] <Geth> ¦ rakudo/faster-slice-access: Make bare @a[*-1] about 30% faster

[16:59] <Geth> ¦ rakudo/faster-slice-access: 

[16:59] <Geth> ¦ rakudo/faster-slice-access: Perform more checks locally.  Als add a Failure:D candidate for

[16:59] <Geth> ¦ rakudo/faster-slice-access: handling @a[foo][bar] where the results of @a[foo] would be a Failure.

[16:59] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/a3ef39a51d

[18:23] *** domidumont left
[19:26] *** b2gills left
[19:55] *** b2gills joined
[19:57] *** sena_kun joined
[19:59] *** Altai-man left
[20:38] *** leont joined
[21:22] *** sena_kun left
[21:31] <Geth> ¦ rakudo: 4c91d743af | (Elizabeth Mattijsen)++ | 4 files

[21:31] <Geth> ¦ rakudo: Remove a lot of unnecessary int $pos candidates

[21:31] <Geth> ¦ rakudo: 

[21:31] <Geth> ¦ rakudo: of (AT|ASSIGN|BIND|EXISTS|DELETE)-POS candidates.  These candidates

[21:31] <Geth> ¦ rakudo: were once written with the assumption that using a native integer

[21:31] <Geth> ¦ rakudo: on a candidate with a native int "receiver", would be more efficient.

[21:31] <Geth> ¦ rakudo: It currently isn't, it's even (much) slower than having a native

[21:31] <Geth> ¦ rakudo: integer on an Int "receiver".

[21:31] <Geth> ¦ rakudo: 

[21:31] <Geth> ¦ rakudo: Also, turned out that Array.DELETE-POS(Int) was deferring to the

[21:31] <Geth> ¦ rakudo: Array.DELETE-POS(int) candidate.  By making that the Int candidate

[21:31] <Geth> ¦ rakudo: and removing the int candidate, DELETE-POS is now about 7% faster.

[21:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4c91d743af

[21:38] <Geth> ¦ rakudo/faster-slice-access: 15 commits pushed by (Elizabeth Mattijsen)++

[21:38] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/compare/a3ef39a51dd7...e8a5885d9d1f

[21:38] <lizmat> just a rebase

[23:04] <Geth> ¦ rakudo/faster-slice-access: da7d256a96 | (Elizabeth Mattijsen)++ | src/core.c/array_slice.pm6

[23:04] <Geth> ¦ rakudo/faster-slice-access: Correctly fast-path the bare whatever slice

[23:04] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/da7d256a96

[23:18] *** rypervenche left
[23:36] <Geth> ¦ rakudo/master: 7 commits pushed by (Vadim Belman)++

[23:36] <Geth> ¦ rakudo/master: e3a0c32da5 | Extract find_exception method from throw_and_die

[23:36] <Geth> ¦ rakudo/master: 28b958134e | Add X::Enum::NoValue exception

[23:36] <Geth> ¦ rakudo/master: 184079c9fd | Remove unused line

[23:36] <Geth> ¦ rakudo/master: 5bc394f615 | Make Attribute's $!package point at the actual owner

[23:36] <Geth> ¦ rakudo/master: bcb9a2c932 | Fix a mistype

[23:36] <Geth> ¦ rakudo/master: e44b524e2c | Make EnumType($mixin-value) work again

[23:36] <Geth> ¦ rakudo/master: 5df809e29c | Merge pull request #4130 from vrurg/rakudo_4116

[23:36] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/4c91d743afe0...5df809e29cd2

[23:41] *** rypervenche joined
[23:48] *** leont left
