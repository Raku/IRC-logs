[00:37] *** Kaiepi left
[00:37] *** Kaiepi joined
[00:52] *** upupbb-user2 left
[01:04] *** upupbb-user2 joined
[01:08] *** dogbert17 joined
[01:11] *** dogbert11 left
[01:17] *** upupbb-user2 left
[01:35] *** upupbb-user2 joined
[02:11] *** ufobat_ joined
[02:15] *** ufobat left
[02:44] *** [Coke] joined
[02:44] *** [Coke] left
[02:44] *** [Coke] joined
[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:59] *** upupbb-user2 left
[05:02] *** linkable6 joined
[05:02] *** evalable6 joined
[06:49] *** upupbb-user2 joined
[07:40] *** Kaiepi left
[07:41] *** Kaiepi joined
[08:00] *** ufobat_ left
[08:34] <lizmat> Files=1305, Tests=111221, 205 wallclock secs (28.55 usr  8.23 sys + 2878.34 cusr 271.04 csys = 3186.16 CPU)

[08:47] <Geth> ¦ rakudo: 296fbcf46f | (Ben Davies)++ | 2 files

[08:47] <Geth> ¦ rakudo: Fix reflection for . twigilled parameters

[08:47] <Geth> ¦ rakudo: 

[08:47] <Geth> ¦ rakudo: A "$.foo" parameter would get stringified as "f.foo". There were two

[08:47] <Geth> ¦ rakudo: problems causing this:

[08:47] <Geth> ¦ rakudo: - . twigilled parameters' names were being reset unnecessarily by the

[08:47] <Geth> ¦ rakudo:   compiler

[08:47] <Geth> ¦ rakudo: - Parameter.usage-name wasn't accounting for . twigils

[08:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/296fbcf46f

[09:04] <Geth> ¦ roast: d2ac6d0251 | (Ben Davies)++ | S06-signature/introspection.t

[09:04] <Geth> ¦ roast: Add tests for attribute parameter naming

[09:04] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d2ac6d0251

[09:22] <[Tux]> Rakudo version 2020.02.1-251-g296fbcf46 - MoarVM version 2020.02.1-50-g15e94eecb

[09:22] <[Tux]> csv-test-xs-20      0.390 -  0.395

[09:22] <[Tux]> csv-ip5xs           0.702 -  0.737

[09:22] <[Tux]> test-t --race       0.955 -  0.969

[09:22] <[Tux]> test-t              1.973 -  2.039

[09:22] <[Tux]> csv-ip5xs-20        6.204 -  6.354

[09:22] <[Tux]> test                7.604 -  7.712

[09:22] <[Tux]> test-t-20 --race    9.629 - 10.314

[09:22] <[Tux]> csv-parser         24.431 - 25.461

[09:22] <[Tux]> test-t-20          31.749 - 31.999

[09:24] *** leont joined
[09:53] *** Geth left
[09:53] *** Geth joined
[10:31] *** sena_kun joined
[10:32] <sena_kun> releasable6, status

[10:32] <tellable6> 2020-03-25T11:24:58Z #raku-dev <lizmat> sena_kun should we just start changing https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft ?  It seems to be for 2020.02 ?

[10:32] <releasable6> sena_kun, Next release in ≈1 day and ≈8 hours. 4 blockers. 166 out of 251 commits logged (⚠ 3 warnings)

[10:32] <tellable6> 2020-03-26T11:19:43Z #raku-dev <lizmat> sena_kun updated the ChangeLog Draft with the commits that I had knowledge about 

[10:32] <releasable6> sena_kun, Details: https://gist.github.com/5a8d9033225e1ab64d1567095490ab68

[10:33] <sena_kun> lizmat, thanks a lot for your changelog work!

[10:36] *** AlexDaniel left
[10:37] <lizmat> sena_kun: yw

[10:38] <sena_kun> Now appveyor builds are what's "fun".

[10:38] <Geth> ¦ rakudo: a3f61d7667 | (Elizabeth Mattijsen)++ | 6 files

[10:38] <Geth> ¦ rakudo: Apparently SEQUENCE *must* be a sub

[10:38] <Geth> ¦ rakudo: 

[10:38] <Geth> ¦ rakudo: In order to make pre-compilation of infiix<...> work.  Fixes the

[10:38] <Geth> ¦ rakudo: problem Blin found with Array::Shaped::Console module.

[10:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a3f61d7667

[10:50] *** Altai-man_ joined
[10:53] *** sena_kun left
[11:04] <Geth> ¦ roast: cff9a0ed5b | (Elizabeth Mattijsen)++ | 3 files

[11:04] <Geth> ¦ roast: Add test for precompiling infix:<...>

[11:04] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/cff9a0ed5b

[11:04] <Geth> ¦ roast: a51f7bf8d8 | (Elizabeth Mattijsen)++ | spectest.data

[11:04] <Geth> ¦ roast: Make sure precompilation infix:<...> tests are run

[11:04] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a51f7bf8d8

[11:08] *** cognomin_ joined
[11:33] *** MasterDuke left
[12:39] *** MasterDuke joined
[12:45] *** [Tux] joined
[12:51] *** sena_kun joined
[12:53] *** Altai-man_ left
[13:05] *** MasterDuke left
[13:11] *** [TuxCM] joined
[13:13] *** [Tux] left
[13:22] *** MasterDuke joined
[13:26] *** [Tux] joined
[13:45] <lizmat> TIL that &rand ... * is actually a valid sequence

[13:45] <lizmat> m: dd &rand ... *

[13:45] <evalable6> lizmat, rakudo-moar a3f61d766: OUTPUT: «(0.2016219927186479e0, 0.3831100064267069e0, 0.…»

[13:45] <evalable6> lizmat, Full output: https://gist.github.com/8acf2591846710f2f81b117e8316639e

[13:45] <lizmat> hmmm... camelia is AWOL again?   nine ?

[13:46] *** MasterDuke left
[13:53] <jnthn> lizmat: That's cute :)

[13:54] <jnthn> I mean, rand xx * is neater, but :)

[13:58] *** MasterDuke joined
[14:33] *** lucasb joined
[14:50] *** Altai-man_ joined
[14:53] *** sena_kun left
[14:56] <lizmat> hmmm.. I wonder whether it would make sense for methods that do not use "self", to remove it from the local lexpad, and change the signature to skip the first argument?

[14:59] <nine> What would happen when a derived class overrides that method and actually uses self?

[15:00] <lizmat> nothing: that class method would have its own lexpad / argument receiving logic ?

[15:05] *** upupbb-user2 left
[15:06] *** cognomin_ left
[15:08] *** cognominal joined
[15:09] *** cognominal left
[15:09] <jnthn> lizmat: I'm pretty sure spesh actually discards the parameter instructions for an unused parameter anyway, and lexical to local lowering already happens on self so it should be able to see that it is unused

[15:09] <jnthn> So I think this already falls out of stuff that is already done

[15:10] <jnthn> Except it can do it for any parameter, not just self

[15:10] <jnthn> Bit like how slurpy named parameter processing instructions also just vanish after specialization

[15:10] <jnthn> (If unused)

[15:12] <Geth> ¦ rakudo: 13ca677e93 | (Stefan Seifert)++ | src/core.c/CompUnit/PrecompilationStore/File.pm6

[15:12] <Geth> ¦ rakudo: Fix CompUnit::PrecompilationUnit::File::bytecode not returning bytecode

[15:12] <Geth> ¦ rakudo: 

[15:12] <Geth> ¦ rakudo: Since commit 81ac37f88b294ef90b336562509d0cd51dc0c9a3 the bytecode method only

[15:12] <Geth> ¦ rakudo: returned the bytecode when it wasn't already initialized.

[15:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/13ca677e93

[15:15] <nine> Huh....apparently it's still broken

[15:16] <lizmat> good catch!

[15:16] <lizmat> I guess I was confusing it with nqp::unless semantics

[15:17] <lizmat> m: use nqp; sub a() { nqp::unless(42,666) }; dd a

[15:17] <evalable6> lizmat, rakudo-moar a3f61d766: OUTPUT: «42␤»

[15:17] <lizmat> nine: will look when back from cycling&

[15:19] <nine> Still getting Type check failed for return value; expected Buf:D but got Slip (Empty)

[15:20] <Kaiepi> ohh that sounds familiar

[15:22] <Kaiepi> m: class FooHOW { method new_type() { my $meta := self.new; my Mu $obj := Metamodel::Primitives.create_type: $meta, 'Uninstantiable'; Metamodel::Primitives.configure_type_checking: $obj, (), :!authoritative; $obj }; method type_check(Mu, Mu \a) { say a } }; Metamodel::Primitives.is_type: 1, FooHOW.new_type

[15:22] <evalable6> Kaiepi, rakudo-moar 13ca677e9: OUTPUT: «»

[15:22] <Kaiepi> m: class FooHOW { method new_type() { my $meta := self.new; my Mu $obj := Metamodel::Primitives.create_type: $meta, 'Uninstantiable'; Metamodel::Primitives.configure_type_checking: $obj, (), :!authoritative; $obj }; method type_check(Mu, Mu \a) { say a } }; Metamodel::Primitives.is_type: FooHOW.new_type, 1

[15:22] <evalable6> Kaiepi, rakudo-moar 13ca677e9: OUTPUT: «»

[15:22] <Kaiepi> blegh

[15:23] <Kaiepi> a little while ago when i tried to write a type_check method for a HOW its type_check method would always take Slip as its checkee, no matter what was being typechecked

[15:27] <Geth> ¦ nqp: dbbe9e170d | (Daniel Green)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[15:27] <Geth> ¦ nqp: Remove some unused variables

[15:27] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/dbbe9e170d

[15:36] <Kaiepi> looks like that's been fixed since i last tried

[15:38] <nine> Oh it did help! I've just tested with raku instead of ./raku-m

[15:38] <nine> make install helped

[15:42] <Kaiepi> oh wait, i was forgetting to compose the type

[15:42] <Kaiepi> type_check doesn't get called at all with Metamodel::Primitives.configure_type_checking($obj, (), :!authoritative)...?

[16:51] *** sena_kun joined
[16:53] *** Altai-man_ left
[17:50] <lizmat> m: dd "a",2 ... *   # this feels like it should be an error

[17:50] <evalable6> lizmat, rakudo-moar 13ca677e9: OUTPUT: «("a", 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, …»

[17:50] <evalable6> lizmat, Full output: https://gist.github.com/7c68ea8e2c12552658179c7e3968a1a5

[17:51] <sena_kun> releasable6, status

[17:51] <releasable6> sena_kun, Next release in ≈1 day and ≈1 hour. 3 blockers. 166 out of 253 commits logged (⚠ 3 warnings)

[17:51] <releasable6> sena_kun, Details: https://gist.github.com/b0f2e5953d2070eefee997cf290c4f56

[17:51] <sena_kun> anyone to look at https://github.com/rakudo/rakudo/pull/3572 sanity?

[17:53] <lizmat> I would drop the "ask on the [email@hidden.address] mailing list"

[17:53] <lizmat> that mailing list is pretty dead afaik

[17:53] <sena_kun> fair enough

[17:55] <Geth> ¦ rakudo/Altai-man-patch-1: 0123c6dcca | Altai-man++ (committed using GitHub Web editor) | tools/create-release-announcement.raku

[17:55] <Geth> ¦ rakudo/Altai-man-patch-1: Prefer irc channel over mailing list

[17:55] <Geth> ¦ rakudo/Altai-man-patch-1: review: https://github.com/rakudo/rakudo/commit/0123c6dcca

[17:57] <jnthn> releasable6: status

[17:57] <releasable6> jnthn, Next release in ≈1 day and ≈1 hour. 3 blockers. 166 out of 253 commits logged (⚠ 3 warnings)

[17:57] <releasable6> jnthn, Details: https://gist.github.com/4e5538ddf8b9b7ad12dafb6db4422384

[18:46] <sena_kun> m: say 2 (cont) <1 2 3>; say 2 (elem) <1 2 3>;

[18:46] <evalable6> sena_kun, rakudo-moar 13ca677e9: OUTPUT: «False␤False␤»

[18:46] <sena_kun> shouldn't ^ evaluate to True? I mean, the array has IntStr and

[18:46] <sena_kun> m: say 2 ~~ IntStr.new(2);

[18:46] <evalable6> sena_kun, rakudo-moar 13ca677e9: OUTPUT: «(exit code 1) Too few positionals passed; expected 3 arguments but got 2␤  in block <unit> at /tmp/XVxfQrn10n line 1␤␤»

[18:46] <sena_kun> sigh

[18:47] <sena_kun> m: say 2 ~~ <2>;

[18:47] <evalable6> sena_kun, rakudo-moar 13ca677e9: OUTPUT: «True␤»

[18:47] <sena_kun> ^ evaluates to true

[18:50] *** Altai-man_ joined
[18:53] *** sena_kun left
[18:53] *** patrickb joined
[18:59] *** patrickb left
[18:59] <Geth> ¦ rakudo: Kaiepi++ created pull request #3575: Improve introspection of anonymous parameters

[18:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3575

[19:00] <Geth> ¦ roast: Kaiepi++ created pull request #630: Update tests WRT changes to introspection of anonymous parameters

[19:00] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/630

[19:01] *** lucasb left
[19:07] *** AlexDaniel joined
[19:08] *** AlexDaniel left
[19:08] *** AlexDaniel joined
[19:33] *** MasterDuke left
[19:38] <lizmat> sena_kun: Set semantics means that the .WHICH of objects are used

[19:38] <tellable6> lizmat, I'll pass your message to sena_kun

[19:38] <lizmat> m: dd 1.WHICH, <1>.WHICH

[19:38] <evalable6> lizmat, rakudo-moar 13ca677e9: OUTPUT: «ValueObjAt.new("Int|1")␤ValueObjAt.new("IntStr|1")␤»

[19:38] <lizmat> note that they are not the same

[19:39] *** MasterDuke joined
[19:40] <Geth> ¦ rakudo: 87d2ff9536 | (Ben Davies)++ | src/core.c/Parameter.pm6

[19:40] <Geth> ¦ rakudo: Fix Parameter.raku with OUTER default values

[19:40] <Geth> ¦ rakudo: 

[19:40] <Geth> ¦ rakudo: The parameter for a "{ $_ }" block was winding up with "OUTER::<$_?>" in

[19:40] <Geth> ¦ rakudo: its .raku instead of "OUTER::<$_>".

[19:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/87d2ff9536

[19:45] <Geth> ¦ roast: 399f33576f | (Ben Davies)++ | S06-signature/introspection.t

[19:45] <Geth> ¦ roast: Add test for Parameter.raku with OUTER defaults

[19:45] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/399f33576f

[19:45] *** tyilanmenyn joined
[19:45] *** jdv79 left
[19:45] *** tyil left
[19:46] *** jdv79 joined
[20:08] *** upupbb-user2 joined
[20:13] *** tyilanmenyn is now known as tyil

[20:30] *** patrickb joined
[20:30] <patrickb> o/

[20:34] <patrickb> I have a change in rakudo and MoarVM that depend on each other. So it breaks with either an older MoarVM or an older Rakudo. What's the policy with such changes? Is just bumping versions in nqp and Rakudo enough?

[20:50] <lizmat> I think so, as quickly as possible  :-)

[20:51] *** sena_kun joined
[20:53] *** Altai-man_ left
[21:33] <AlexDaniel> patrickb: if you want things to be even better, make sure that there's a bump before you commit your changes

[21:33] <AlexDaniel> this way your changes are isolated in a single bump

[21:49] *** p6steve joined
[21:52] <p6steve> raku: say 3

[21:52] <evalable6> p6steve, rakudo-moar 87d2ff953: OUTPUT: «3␤»

[21:54] *** upupbb-user2 left
[21:57] *** p6steve left
[22:08] *** p6steve joined
[22:10] *** Kaiepi left
[22:11] *** Kaiepi joined
[22:13] *** p6steve left
[22:41] *** nine left
[22:42] *** nine joined
[22:45] *** camelia joined
[22:48] <nine> m: say "back"

[22:48] <camelia> rakudo-moar 49d1dcd30: OUTPUT: «back␤»

[22:48] <lizmat> whee!

[22:50] *** Altai-man_ joined
[22:53] *** sena_kun left
[22:55] <lizmat> bisectable6: dd 1,2,3, * + 1 ...^ 7,14,28 ...^ * > 100

[22:55] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=87d2ff9) because on both starting points the exit code is 1

[22:55] <lizmat> committable6:dd 1,2,3, * + 1 ...^ 7,14,28 ...^ * > 100

[22:55] <committable6> lizmat, ¦dd: «Cannot find this revision (did you mean “all”?)»

[22:55] <lizmat> committable6: dd 1,2,3, * + 1 ...^ 7,14,28 ...^ * > 100

[22:55] <committable6> lizmat, ¦dd: «Cannot find this revision (did you mean “all”?)»

[22:55] <lizmat> committable6: 1,2,3, * + 1 ...^ 7,14,28 ...^ * > 100

[22:56] <bisectable6> lizmat, bisect log: https://gist.github.com/edfa8fb61d7c04ff8c8f902c37a30a29

[22:56] <bisectable6> lizmat, (2016-06-09) https://github.com/rakudo/rakudo/commit/b6902e5192929a733a37079d5dc414430078bc7d

[22:56] <committable6> lizmat, ¦1,2,3, * (4 commits): «Cannot find this revision (did you mean “all”?)»

[22:56] <lizmat> m: dd 1,2,3, * + 1 ...^ 7,14,28 ...^ * > 100    # this feels LTA

[22:56] <camelia> rakudo-moar 87d2ff953: OUTPUT: «Too many positionals passed; expected 2 arguments but got 3␤  in block <unit> at <tmp> line 1␤␤»

[22:58] *** travis-ci joined
[22:58] <travis-ci> Rakudo build errored. Ben Davies 'Fix Parameter.raku with OUTER default values

[22:58] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/667858209 https://github.com/rakudo/rakudo/compare/13ca677e93f0...87d2ff953666

[22:58] *** travis-ci left
[22:59] <lizmat> restarted the one failing job

[23:00] <releasable6> Next release in ≈19 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:04] <AlexDaniel> 6c: 1,2,3, * + 1 ...^ 7,14,28 ...^ * > 100

[23:04] <committable6> AlexDaniel, https://gist.github.com/cd14193e7272e9d54e5bf5b79907b558

[23:06] *** elcaro left
[23:10] *** Altai-man_ left
[23:26] *** leont left
