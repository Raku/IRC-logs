[00:01] <timotimo> not sure if there's a better way; i would like shorter syntax as well

[00:02] <discord6> <theangryepicbanana> it would be cool if making a sub in a class automatically made the sub a static method

[00:02] <TreyHarris> Well, an 'is static' trait's been banging around as a perennial proposal; hopefully problem-solving will be able to keep institutional memory, because I can't remember why 'is static' was a bad idea :-)

[00:02] <discord6> <theangryepicbanana> since that kinda already makes sense

[00:02] <discord6> <theangryepicbanana> well I mean having an attribute is cool and all, but it'd be ideal to have something as short as sub or method

[00:07] <TreyHarris> m: class B { method foo (B:U: --> Str) { return "Bee" }; our sub foo(--> Str) { return "no bee" } }; say B.foo;  say B::foo();

[00:07] <camelia> rakudo-moar 32bd4ed83: OUTPUT: «Bee␤no bee␤»

[00:08] <TreyHarris> theangryepicbanana: you see the ambiguity ↑

[00:08] <timotimo> having a scoping qualifier seems like the wrong abstraction to me

[00:09] <timotimo> the method is looked up the same way, it just checks the invocant type differently

[00:09] <TreyHarris> well, I just did that because it's a pain to export and import on a single line... 

[00:10] <TreyHarris> I mean, it's probably not best practice for a class to export routines, but it's probably also essential to some edge cases

[00:10] <TreyHarris> and multis are of course frequently "exported" one way or another

[00:11] <timotimo> i think i hallucinated someone suggesting "our" for "static methods"

[00:11] <TreyHarris> like, just now here?

[00:12] <TreyHarris> I'm sure someone proposed it at one point--in fact, I think I may have written a reply if it was on p6-l showing why our subs are useful

[00:12] <discord6> <theangryepicbanana> perhaps a Ruby-like syntax could be used like method self.something(...) {...}?

[00:14] <TreyHarris> Oh good gravy, about to search for that mail I was able to see T&M's latest--he's still hammering on .^name "lying" and why can't you ask a native exactly what signedness and length it is? phew.

[00:14] <discord6> <theangryepicbanana> that would however mean that pretty much every class with a custom new method wouldn't work anymore

[00:14] <timotimo> m: my uint32 $foo = 9; say $foo.VAR.^name

[00:14] <camelia> rakudo-moar 32bd4ed83: OUTPUT: «IntLexRef␤»

[00:15] <timotimo> m: my uint32 $foo = 9; say $foo.VAR.^methods

[00:15] <camelia> rakudo-moar 32bd4ed83: OUTPUT: «No such method 'methods' for invocant of type 'Perl6::Metamodel::NativeRefHOW'␤  in block <unit> at <tmp> line 1␤␤»

[00:15] <timotimo> m: my uint32 $foo = 9; use nqp; say nqp::objprimbits($foo.VAR)

[00:15] <camelia> rakudo-moar 32bd4ed83: OUTPUT: «0␤»

[00:15] <timotimo> m: my uint32 $foo = 9; use nqp; say nqp::objprimbits($foo)

[00:15] <camelia> rakudo-moar 32bd4ed83: OUTPUT: «0␤»

[00:16] <timotimo> m: my uint32 $foo = 9; use nqp; say nqp::objprimbits($foo.VAR<>)

[00:16] <camelia> rakudo-moar 32bd4ed83: OUTPUT: «0␤»

[00:16] <timotimo> m: my uint32 $foo = 9; use nqp; say nqp::objprimbits($foo<>)

[00:16] <camelia> rakudo-moar 32bd4ed83: OUTPUT: «0␤»

[00:16] <timotimo> ehh.

[00:16] <TreyHarris> docs say you can't

[00:16] <TreyHarris> you can do over/underflow heuristics to figure it out

[00:19] <TreyHarris> if -1 assignment produces a positive value that gives you your answer completely in one step; for signed values you have to suss it out

[00:19] <TreyHarris> well, for ints. for floats it would be a serious PITA

[00:21] <timotimo> m: my uint32 $foo = 9; use nqp; say $foo.VAR.of

[00:21] <camelia> rakudo-moar 32bd4ed83: OUTPUT: «No such method 'of' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[00:28] <TreyHarris> rofl... never mind; searching my back mail, I see that I have explained 'our sub' six times since 2016, but each time it was to T&M. 

[00:31] <TreyHarris> I don't see "is static" ever mentioned on p6-l or p6-u. weird. coulda sworn that was a perennial idea

[00:32] *** hungryd11 joined
[00:35] *** hungrydonkey left
[00:36] <TreyHarris> Do it Python-style, `method foo() is classmethod`? (I can't decide whether the Python @staticmethod is entirely obviated already or just mostly. I think "mostly", but the problem space is more than filled up by multis.)

[00:46] *** sena_kun left
[00:48] *** lucasb left
[00:59] *** hungryd11 left
[01:01] *** sena_kun joined
[01:02] *** hungrydonkey joined
[01:14] *** hungrydonkey left
[01:14] *** hungrydonkey joined
[01:23] *** hungrydonkey left
[02:07] *** hungrydonkey joined
[02:46] *** sena_kun left
[03:01] *** sena_kun joined
[03:04] *** squashable6 left
[03:06] *** squashable6 joined
[04:12] *** evalable6 left
[04:12] *** linkable6 left
[04:13] *** linkable6 joined
[04:15] *** evalable6 joined
[04:47] *** sena_kun left
[04:49] *** hungryd7 joined
[04:50] *** hungrydonkey left
[04:54] *** hungryd7 left
[04:54] *** hungrydonkey joined
[04:56] *** hungryd80 joined
[04:57] *** hungrydonkey left
[05:01] *** sena_kun joined
[06:15] *** AlexDaniel joined
[06:15] *** AlexDaniel left
[06:15] *** AlexDaniel joined
[06:45] *** sena_kun left
[06:46] *** AlexDaniel left
[07:00] *** sena_kun joined
[07:25] *** domidumont joined
[07:26] <nine> theangryepicbanana: no, a sub is a sub and a method is a method. When I declare a sub inside a class it's because I want a sub that's visible in that lexical scope. I do that precicely because I don't want the class' users to have access to it.

[07:29] <nine> I wonder if class methods really are so common that they would warrant special (short) syntax. It's not like we're Java where there's only methods. We already have our subs and exporting to make functions available. That doesn't seem to leave many use cases for class methods. Mainly those where you want subclasses to be able to override them.

[07:30] <nine> Now a shorter syntax for object-only methods (::$?CLASS:D) would be very welcome. In hindsight, I'd even wish for that to be the default, but that ship has probably sailed...

[07:31] <nine> Or not, we could still change it with a new language version

[07:43] *** domidumont left
[07:45] *** domidumont joined
[08:46] *** sena_kun left
[08:59] *** sena_kun joined
[09:04] *** domidumont1 joined
[09:05] *** domidumont left
[09:18] *** AlexDaniel joined
[09:19] *** AlexDaniel left
[09:19] *** AlexDaniel joined
[09:19] <AlexDaniel> lol what, now we're getting spam in the old-issue-tracker repo? :D

[09:19] <AlexDaniel> is RT cursed or something

[09:21] <AlexDaniel> this is probably like the second time I see spam on github

[09:52] <lizmat> Files=1302, Tests=109837, 210 wallclock secs (28.20 usr  8.03 sys + 2942.75 cusr 262.98 csys = 3241.96 CPU)

[10:21] <AlexDaniel> oh

[10:21] <AlexDaniel> so now GitHub reports Raku files as Raku

[10:21] <AlexDaniel> awesome

[10:47] *** sena_kun left
[11:02] *** sena_kun joined
[11:05] <Geth> ¦ rakudo: 6df78ca3ed | (Elizabeth Mattijsen)++ | src/core.c/SetHash.pm6

[11:05] <Geth> ¦ rakudo: Add SetHash.set/unset methods

[11:05] <Geth> ¦ rakudo: 

[11:05] <Geth> ¦ rakudo: As proposed about 8 months ago in:

[11:05] <Geth> ¦ rakudo:   https://github.com/rakudo/rakudo/pull/2942

[11:05] <Geth> ¦ rakudo: 

[11:05] <Geth> ¦ rakudo: Since nobody had a big objection against it, and I think it will

[11:05] <Geth> ¦ rakudo: make working with SetHashes much easier, I decided to just put it in

[11:05] <Geth> ¦ rakudo: (as the Pull Request had bitrotted).

[11:05] <Geth> ¦ rakudo: 

[11:05] <Geth> ¦ rakudo: Please revert if disagreeing.

[11:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6df78ca3ed

[11:12] <Geth> ¦ rakudo/SetHash-set-unset: b9d9943c34 | (Elizabeth Mattijsen)++ | src/core/SetHash.pm6

[11:12] <Geth> ¦ rakudo/SetHash-set-unset: Give SetHash a set/unset method

[11:12] <Geth> ¦ rakudo/SetHash-set-unset: 

[11:12] <Geth> ¦ rakudo/SetHash-set-unset: Inspired by seeing things like:

[11:12] <Geth> ¦ rakudo/SetHash-set-unset: 

[11:12] <Geth> ¦ rakudo/SetHash-set-unset:     %sethash{$_} = True for @to-be-added;

[11:12] <Geth> ¦ rakudo/SetHash-set-unset: 

[11:12] <Geth> ¦ rakudo/SetHash-set-unset: in the wild.  Instead, one can now do:

[11:12] <Geth> ¦ rakudo/SetHash-set-unset: <…commit message has 5 more lines…>

[11:12] <Geth> ¦ rakudo/SetHash-set-unset: review: https://github.com/rakudo/rakudo/commit/b9d9943c34

[11:13] <lizmat> huh, what was that ?

[11:13] <lizmat> anyway, branch now deleted

[11:14] *** AlexDaniel left
[11:14] *** committable6 left
[11:14] *** shareable6 left
[11:14] *** reportable6 left
[11:14] *** bisectable6 left
[11:14] *** statisfiable6 left
[11:14] *** quotable6 left
[11:14] *** unicodable6 left
[11:14] *** coverable6 left
[11:14] *** notable6 left
[11:14] *** nativecallable6 left
[11:14] *** tobs left
[11:14] *** evalable6 left
[11:14] *** linkable6 left
[11:14] *** [Tux] left
[11:14] *** rba left
[11:14] *** discord6 left
[11:14] *** eater left
[11:14] *** domidumont1 left
[11:14] *** squashable6 left
[11:14] *** bloatable6 left
[11:14] *** tellable6 left
[11:14] *** sourceable6 left
[11:14] *** benchable6 left
[11:14] *** releasable6 left
[11:14] *** greppable6 left
[11:17] <sena_kun> lizmat: I did it automagically and then thought that something important may be still there and restored. :S

[11:17] *** evalable6 joined
[11:17] *** linkable6 joined
[11:17] *** AlexDaniel` joined
[11:17] *** [Tux] joined
[11:17] *** rba joined
[11:17] *** discord6 joined
[11:18] *** hungryd80 left
[11:18] *** nine left
[11:18] *** jnthn left
[11:18] *** samcv left
[11:18] *** jdv79 left
[11:18] *** domidumont1 joined
[11:18] *** squashable6 joined
[11:18] *** bloatable6 joined
[11:18] *** tellable6 joined
[11:18] *** sourceable6 joined
[11:18] *** benchable6 joined
[11:18] *** releasable6 joined
[11:18] *** greppable6 joined
[11:18] *** AlexDaniel joined
[11:18] *** committable6 joined
[11:18] *** shareable6 joined
[11:18] *** reportable6 joined
[11:18] *** bisectable6 joined
[11:18] *** statisfiable6 joined
[11:18] *** quotable6 joined
[11:18] *** unicodable6 joined
[11:18] *** coverable6 joined
[11:18] *** notable6 joined
[11:18] *** nativecallable6 joined
[11:18] *** tobs joined
[11:18] *** entonian joined
[11:18] *** epony joined
[11:18] *** zostay joined
[11:18] *** moritz joined
[11:18] *** eater joined
[11:20] *** samcv joined
[11:20] *** samcv left
[11:20] *** samcv joined
[11:22] *** kawaii joined
[11:23] *** nine joined
[11:24] *** discord6 left
[11:24] <lizmat> sena_kun: nothing important in there, so it's gone now

[11:24] *** discord6 joined
[11:25] *** Geth joined
[11:25] *** jnthn joined
[11:27] *** hungrydonkey joined
[11:28] *** jdv79 joined
[12:00] *** travis-ci joined
[12:00] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Add SetHash.set/unset methods

[12:00] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/645896933 https://github.com/rakudo/rakudo/compare/32bd4ed83935...6df78ca3ed72

[12:00] *** travis-ci left
[12:14] *** Guest47772 joined
[12:32] *** ufobat joined
[12:46] *** sena_kun left
[13:01] *** sena_kun joined
[13:09] *** lucasb joined
[13:59] <Geth> ¦ rakudo: ce5b5dea55 | (Ben Davies)++ | src/core.c/IO/Socket/INET.pm6

[13:59] <Geth> ¦ rakudo: Don't attempt to split ports from paths for for UNIX sockets

[13:59] <Geth> ¦ rakudo: 

[13:59] <Geth> ¦ rakudo: It's possible for a valid path containing a ':' to wind up as something

[13:59] <Geth> ¦ rakudo: else if the platform allows colons in filenames like this. Since UNIX

[13:59] <Geth> ¦ rakudo: sockets don't use ports in the first place, don't treat them as if they

[13:59] <Geth> ¦ rakudo: do.

[13:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ce5b5dea55

[14:13] <timotimo> https://gist.github.com/timo/6e8a259891326a16f0d62d4ae0d5d1fa - a good chunk of frames in the core.c setting are short: 7 instructions is the msot common, followed by 4 instructions, then 8.

[14:14] <timotimo> there's even 137 frames that have only 2 instructions

[14:15] <timotimo> the first few i found are called !LEXICAL_FIXUP_CSCOPE, i don't think i've seen that before

[14:16] <timotimo> many have an empty name, though

[14:16] <timotimo> oh, the numbers start at 0, so all the instruction counts need to be read as "off by one"

[14:21] <timotimo> very many of the ones that end at 3 are !LEXICAL_FIXUP, many of the ones ending at 4 are the "execution of block eliminated by optimizer" blocks

[14:24] <timotimo> if it's about 1.35k of the "internal error" reporting blocks we can save about 4 bytes each by not putting a return_o directly after the die :D

[14:24] <timotimo> or are nqp::die resumable?

[14:25] <timotimo> ok, they apparently are

[14:46] *** sena_kun left
[14:54] <Geth> ¦ rakudo: 62cb756d91 | (Ben Davies)++ | src/core.c/IO/Socket/INET.pm6

[14:54] <Geth> ¦ rakudo: Don't call nqp::getport when listening on UNIX sockets

[14:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/62cb756d91

[14:56] *** travis-ci joined
[14:56] <travis-ci> Rakudo build passed. Ben Davies 'Don't attempt to split ports from paths for for UNIX sockets

[14:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/645958354 https://github.com/rakudo/rakudo/compare/6df78ca3ed72...ce5b5dea5501

[14:56] *** travis-ci left
[15:00] *** sena_kun joined
[15:49] *** travis-ci joined
[15:49] <travis-ci> Rakudo build passed. Ben Davies 'Don't call nqp::getport when listening on UNIX sockets'

[15:49] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/645982295 https://github.com/rakudo/rakudo/compare/ce5b5dea5501...62cb756d9124

[15:49] *** travis-ci left
[16:43] *** hungrydonkey left
[16:43] *** hungrydonkey joined
[16:45] *** hungrydonkey left
[16:46] *** hungrydonkey joined
[16:47] *** sena_kun left
[16:57] *** entonian left
[17:01] *** sena_kun joined
[17:22] *** lizmat joined
[17:43] *** patrickb joined
[17:59] *** lizmat left
[17:59] *** lizmat joined
[18:03] *** hungrydonkey left
[18:38] <Geth> ¦ rakudo: c1b8ff60f8 | (Elizabeth Mattijsen)++ | 2 files

[18:38] <Geth> ¦ rakudo: Add BagHash.add/remove

[18:38] <Geth> ¦ rakudo: 

[18:38] <Geth> ¦ rakudo: Similar to SetHash.set/unset .  Please revert if you disagree.

[18:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c1b8ff60f8

[18:46] *** sena_kun left
[18:49] *** camelia left
[18:53] *** toddr joined
[19:00] *** evalable6 left
[19:00] *** linkable6 left
[19:00] *** Guest47772 left
[19:00] *** AlexDaniel` left
[19:00] *** [Tux] left
[19:00] *** rba left
[19:02] *** Guest47772 joined
[19:02] *** evalable6 joined
[19:02] *** linkable6 joined
[19:02] *** AlexDaniel` joined
[19:02] *** [Tux] joined
[19:02] *** rba joined
[19:03] *** Geth left
[19:05] *** sena_kun joined
[19:23] *** AlexDaniel left
[19:35] *** domidumont1 left
[19:53] <TreyHarris> Can anyone here kick camelia? I'm guessing since AlexDaniel` disappeared at the same time it may be more than an issue of kicking something, though

[19:53] <TreyHarris> er, "restart", didn't mean "kick" in the IRC sense

[19:54] <AlexDaniel`> I don't maintain camelia

[19:54] <AlexDaniel`> and that was my laptop shutting down, has nothing to do with the bot :)

[19:55] <TreyHarris> AlexDaniel`: I didn't think so, but the times were so coincident I was guessing a big part of the Internet got partitioned. That's good to know at least

[19:55] <TreyHarris> (I didn't think you maintained camelia, I mean)

[20:06] <moritz> restarting it now

[20:46] *** sena_kun left
[20:57] <TreyHarris> I recently switched over from the last rakudo-star to a self-build. Assuming my PATH was `...${rakudo-star}/latest/install/bin:${rakudo-star}/latest/install/share/perl6/site/bin` and it's now  `...:${rakudo}/bin:${rakudo}/install/share/perl6/site/bin`, and I have zef built anew in the latter, how can I best get my old modules rebuilt? Is there anything else from rakudo-star I need to add?

[21:02] *** sena_kun joined
[21:19] *** foo222 joined
[21:19] *** foo222 left
[21:32] *** lizmat left
[21:45] *** toddr left
[22:20] <jnthn> I just pulled/built latest Rakudo and I get one spectest failure that looks like this:

[22:20] <jnthn>     1..3

[22:20] <jnthn> Error in mp_exptmod: Value out of range

[22:20] <jnthn>   in block  at t/spec/S32-num/expmod.rakudo.moar line 31

[22:20] <jnthn>   in block <unit> at t/spec/S32-num/expmod.rakudo.moar line 20

[22:20] <jnthn> The last test, pretty much

[22:25] *** Kaiepi left
[22:25] *** Kaiepi joined
[22:36] *** patrickb left
[22:43] *** MasterDuke joined
[22:44] <MasterDuke> jnthn: yep, i forgot to change the test after the moar ltm v1.2.0 upgrade

[22:44] *** sena_kun left
[23:01] *** sena_kun joined
[23:19] *** lucasb left
[23:34] *** nebuchadnezzar left
