[01:14] <Geth> ¦ rakudo: vrurg++ created pull request #3484: Properly support generic types in Signature 'returns' attribute.

[01:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3484

[01:24] <Kaiepi> vrurg, is this related to that pr you made?

[01:24] <Kaiepi> m: say sub (::T $foo --> T){ $foo }(1)

[01:24] <camelia> rakudo-moar 8c995febd: OUTPUT: «Died with X::TypeCheck::Return␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:24] <Kaiepi> i found this a while ago but keep forgetting to bring it up

[01:29] <Kaiepi> there are a couple other ways generics can fail typechecks in signatures similar to this, but they're something i'd need to golf down

[01:33] *** sena_kun left
[01:42] <vrurg> Kaiepi: if you have these cases somewhere around, can you test them against the PR?

[01:48] <Kaiepi> vrurg, they're similar in that they involve generics that fail typechecks in signatures, but they aren't related to return values

[01:49] <vrurg> Kaiepi: your case is related, as far as I see it. ::T is a generic too. But it looks like the PR doesn't fix it.

[01:49] *** sena_kun joined
[01:56] <vrurg> Looks like the type capture case skips Signature's instantiate_generic. Or the PR would work for this case too.

[02:13] <vrurg> Kaiepi: you'd better open a ticket unless there's one exists already. The type capture case is more complicated as backtracking the chain of events leads me through spesh, p6typecheck op, and grammar. And I just don't have much time to dig it any further.

[03:00] <releasable6> Next release in ≈6 days and ≈15 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:05] *** hungryd49 joined
[03:08] *** hungrydonkey left
[03:12] *** hungrydonkey joined
[03:15] *** hungryd49 left
[03:20] *** Kaiepi left
[03:25] *** Kaiepi joined
[03:25] *** hungrydonkey left
[03:25] *** hungrydonkey joined
[03:34] *** sena_kun left
[03:49] *** sena_kun joined
[03:58] *** epony left
[03:59] *** epony joined
[05:26] *** linkable6 left
[05:27] *** linkable6 joined
[05:34] *** sena_kun left
[05:47] *** sena_kun joined
[06:47] *** bisectable6 left
[06:47] *** releasable6 left
[06:47] *** notable6 left
[06:47] *** quotable6 left
[06:47] *** nativecallable6 left
[06:47] *** shareable6 left
[06:47] *** statisfiable6 left
[06:47] *** bloatable6 left
[06:47] *** benchable6 left
[06:47] *** coverable6 left
[06:47] *** sourceable6 left
[06:47] *** committable6 left
[06:47] *** greppable6 left
[06:47] *** squashable6 left
[06:47] *** reportable6 left
[06:47] *** linkable6 left
[06:48] *** sourceable6 joined
[06:48] *** coverable6 joined
[06:49] *** benchable6 joined
[06:49] *** notable6 joined
[06:49] *** bisectable6 joined
[06:49] *** releasable6 joined
[06:49] *** squashable6 joined
[06:49] *** committable6 joined
[06:49] *** reportable6 joined
[06:49] *** shareable6 joined
[06:49] *** linkable6 joined
[06:49] *** nativecallable6 joined
[06:49] *** quotable6 joined
[06:49] *** greppable6 joined
[06:50] *** bloatable6 joined
[06:50] *** statisfiable6 joined
[07:33] *** sena_kun left
[07:47] *** sena_kun joined
[09:26] *** domidumont joined
[09:32] *** domidumont left
[09:32] *** domidumont joined
[09:34] *** sena_kun left
[09:49] *** sena_kun joined
[10:59] <Geth> ¦ roast/6.c-errata: 5dd6bdda23 | (Elizabeth Mattijsen)++ (committed by Altai-man) | S06-signature/introspection.t

[10:59] <Geth> ¦ roast/6.c-errata: Fix test for unnamed named parameter in signature

[10:59] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/5dd6bdda23

[11:09] <sena_kun> how can a test pass when run on itself and fail during spec?

[11:10] <sena_kun> or, what the reasons can be?

[11:10] <sena_kun> (except races and similar issues)

[11:26] <lizmat> load ?

[11:29] <sena_kun> lizmat: can you please check 6.c-errata (with latest cherry-pick)? rakudo commit is 246f20db147fd1e68b296a509d2c6d2cb2595b4. S12-attributes/smiley.t has no TAP plan, and S06-signature/introspection.t fails one test, but both are clean when ran separately.

[11:30] <lizmat> S12-attributes/smiley.t breaks for me always

[11:34] *** sena_kun left
[11:38] <[Tux]> Rakudo version 2020.01-213-g246f20db1 - MoarVM version 2020.01.1-39-g657b536cf

[11:38] <[Tux]> csv-test-xs-20      0.366 -  0.372

[11:38] <[Tux]> csv-ip5xs           0.709 -  0.817

[11:38] <[Tux]> test-t --race       0.868 -  0.931

[11:38] <[Tux]> test-t              1.877 -  1.944

[11:38] <[Tux]> csv-ip5xs-20        5.917 -  6.080

[11:38] <[Tux]> test                7.994 -  8.179

[11:38] <[Tux]> test-t-20 --race    9.007 -  9.777

[11:39] <[Tux]> csv-parser         23.516 - 23.885

[11:39] <[Tux]> test-t-20          30.676 - 33.730

[11:43] <lizmat> Files=1302, Tests=111141, 224 wallclock secs (28.49 usr  8.49 sys + 3012.46 cusr 299.36 csys = 3348.80 CPU)

[11:43] <lizmat> that's also quite a steep difference  :-(

[11:44] <Geth> ¦ roast/6.c-errata: 0ac2c838d7 | (Elizabeth Mattijsen)++ | S12-attributes/smiley.t

[11:44] <Geth> ¦ roast/6.c-errata: Impossible default attribute values are now compile time errors

[11:44] <Geth> ¦ roast/6.c-errata: 

[11:44] <Geth> ¦ roast/6.c-errata: And they throw a specific exception, so adjust tests for that.

[11:44] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/0ac2c838d7

[11:48] *** sena_kun joined
[11:53] <lizmat> sena_kun: I have no idea what is going on with S06-signature/introspection.t :-(

[11:53] <lizmat> feels like it is related to the closure fix that jnthn did the other day

[11:54] <sena_kun> :S

[11:54] <sena_kun> sounds like a blocker then

[11:55] <lizmat> yeah  :-(

[12:08] <lizmat> hmmm... looks like todays' spectest result included precomping test-libraries (which it shouldn't)

[12:13] *** jjatria joined
[12:15] *** jjatria left
[12:15] *** jjatria joined
[12:30] <Geth> ¦ rakudo: 1a7f16bc42 | (Elizabeth Mattijsen)++ | src/core.c/ThreadPoolScheduler.pm6

[12:30] <Geth> ¦ rakudo: Make sure we assume 1 core on faulty info

[12:30] <Geth> ¦ rakudo: 

[12:30] <Geth> ¦ rakudo: It appears that some OS's at the moment report 0 for nqp::cpucores.

[12:30] <Geth> ¦ rakudo: Other places in the code already make sure there is at least 1 core.

[12:30] <Geth> ¦ rakudo: It seemed appropriate to do the same check for the ThreadPoolScheduler.

[12:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1a7f16bc42

[13:05] *** lucasb joined
[13:35] *** sena_kun left
[13:37] <Geth> ¦ rakudo: b90bebae44 | (Elizabeth Mattijsen)++ | src/core.c/Lock.pm6

[13:37] <Geth> ¦ rakudo: Make Lock.protect raw

[13:37] <Geth> ¦ rakudo: 

[13:37] <Geth> ¦ rakudo: - no longer decontainerize

[13:37] <Geth> ¦ rakudo: - would fix https://github.com/lizmat/Object-Delayed/issues/5

[13:37] <Geth> ¦ rakudo: - **BUT** decontainerization was added specifically:

[13:37] <Geth> ¦ rakudo:   https://github.com/Raku/old-issue-tracker/issues/6573

[13:37] <Geth> ¦ rakudo: - is spectest/stresstest/test clean

[13:37] <Geth> ¦ rakudo: 

[13:37] <Geth> ¦ rakudo: But perhaps we should make a Lock.protect-rw instead??

[13:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b90bebae44

[13:37] <lizmat> .tell jnthn please have a look at https://github.com/rakudo/rakudo/commit/b90bebae44

[13:49] *** sena_kun joined
[15:31] *** hungrydonkey left
[15:35] *** sena_kun left
[15:52] *** sena_kun joined
[15:53] *** Xliff joined
[15:53] <Xliff> niner: You around?

[15:54] <Xliff> nine: f5ce80e1a6d60a6a51a898da85f3100bb088dfb4 breaks my precomp-unlock changes. Are you now saying that the precomp-store requires locking?

[16:23] <Xliff> Does Lock provide a way to check its status?

[16:24] *** hungrydonkey joined
[16:29] <nine> Xliff: I'm kinda surprised. What that commit does is provide the same level of protection to .repo-id files as it does to the precomp files. That should be easy to do in precomp-unlock shouldn't it?

[16:29] <Xliff> nine: Yeah. I actually am pretty sure the problem is mine, after looking at things after waking up.

[16:30] <Xliff> For one thing, I think I removed much of the precomp-store unlocking code.

[16:31] <Xliff> But in my branch, calling destination DOES NOT lock the store without a flag. I am attempting to find the root cause.

[16:31] <Xliff> However, after merging with master, last night. I noticed I could not install rakudo. The installation process would hang on the LAST step.

[16:35] <nine> Probably the ususal small issue with large consequences :)

[16:36] <Xliff> Yeah.

[16:36] <Xliff> But now I am seeing an issue. My changes were originally written with the intent if removing the .precomp lock, entirely.

[16:37] <Xliff> Now your changes are introduced to fix a bug.

[16:37] <Xliff> So we now have the requirement of a .precomp lock in addition to the requirement of a file-level precomp lock.

[16:37] <nine> The .destination method has all the information for creating a lock file for the proper target, since it does get the target extension as well

[16:38] <nine> No need for a .precomp lock

[16:38] *** Kaiepi left
[16:39] <Xliff> OK. So your change just lock the .repo-id file, only?

[16:39] <nine> yes

[16:39] <nine> It protects against half written (i.e. created but empty) .repo-id files

[16:39] <Xliff> But you are doing it with a singluar store object.

[16:40] <nine> yes?

[16:40] <Xliff> This works with vanilla rakudo because you are locking twice.

[16:40] <Xliff> Once for .precomp and another for .repo-id

[16:41] <Xliff> When you unlock .repo-id, in my code, you also unlock the file lock on the individual precomp file.

[16:42] <Xliff> So, in my case, and in my case only... it looks like the .repo-id lock and the file.precomp lock have to be two separate operations, somehow.

[16:43] <nine> sure

[16:43] <Xliff> That will be a pain to figure out a mechanism that can be merged back into master.

[16:43] <Xliff> I'll have to see how best to adjust and update the PR

[16:44] <Xliff> Probably something stack based.

[16:44] *** Kaiepi joined
[16:47] <nine> .destination could e.g. return self!file($compiler-id, $precomp-id, :$extension) but role FileLock { has $!lock; method lock() { $!lock = (self.path.add('.lock').open(:create, :rw); $!lock.lock }; method unlock() { $!lock.unlock }; };

[16:48] <nine> And you either have the caller call .unlock on that object directly or have the caller pass this object to store.unlock

[16:58] <Xliff> Hmmm... nice idea! 

[16:58] <Xliff> However, let me take some time to track down whether th is is root cause.

[17:07] *** domidumont left
[17:08] *** domidumont joined
[17:34] *** sena_kun left
[17:46] <Kaiepi> oooooo

[17:47] <Kaiepi> `use experimental :cached` happens to do the same stuff to routines/methods that my Trait::Traced module does

[17:48] <Kaiepi> which means

[17:49] *** sena_kun joined
[17:49] <Kaiepi> m: use experimental :cached; my method foo() is cached { } 

[17:49] <camelia> rakudo-moar 8c995febd: OUTPUT: «WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was:␤Failed to create directory '/home/camelia/.raku/short' with mode '0o777': Failed…»

[17:49] <Kaiepi> oh that's... not the error i was looking for

[17:49] <Kaiepi> but anyway, i know how to make it work with methods

[17:50] <Kaiepi> which is nyi currently

[18:03] *** hungrydonkey left
[19:13] <nine> m: use experimental :cached; my method foo() is cached { }

[19:13] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'is cached' on methods not yet implemented. Sorry.␤at <tmp>:1␤»

[19:34] *** sena_kun left
[19:46] *** domidumont left
[19:50] *** sena_kun joined
[20:49] <TreyHarris> on #raku I was describing how I havu 422 .precompp dirs scattered all around my homedir, and 23 of them are in cloned Git repos that contain no Raku at all--those each have a 4-entry .precomp tree, of which three entries are dirs and the fourth is a '*.repo-id' file. I was warned by nine not to think of these as disposible, so I'm wondering--what's the purpose of a .precomp like that, and what

[20:49] <TreyHarris> would be the effect of my deleting the entire .precomp tree of those?

[20:51] <TreyHarris> (The initial effect of having .precomp's littered around everywhere may be because until recently I errantly had '.' as the first dir in my PERL6LIB.)

[21:00] *** MasterDuke left
[21:14] *** MasterDuke joined
[21:33] *** sena_kun left
[21:47] *** sena_kun joined
[22:10] *** lucasb left
[22:13] *** Kaiepi left
[22:13] *** Kaiepi joined
[22:18] <Geth> ¦ rakudo: Kaiepi++ created pull request #3487: Implement support for using the `is cached` trait with methods

[22:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3487

[22:18] <Geth> ¦ roast: Kaiepi++ created pull request #618: Add unit tests for use of the `is cached` trait with methods

[22:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/618

[23:00] <releasable6> Next release in ≈5 days and ≈19 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:34] *** sena_kun left
[23:48] *** sena_kun joined
