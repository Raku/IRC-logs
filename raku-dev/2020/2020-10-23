[00:47] *** Xliff joined
[00:47] <Xliff> .

[00:57] *** Kaeipi joined
[00:57] *** Kaiepi left
[03:00] <releasable6> Next release in ≈1 day and ≈15 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:03] <Geth> ¦ rakudo: vrurg++ created pull request #3977: Fix a problem with multi submethods been treated as method

[03:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3977

[03:06] <Geth> ¦ roast: vrurg++ created pull request #691: Add and fix tests for multi-dispatching methods

[03:06] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/691

[03:23] *** Xliff left
[03:26] *** Xliff joined
[04:32] *** committable6 left
[04:32] *** unicodable6 left
[04:32] *** statisfiable6 left
[04:32] *** releasable6 left
[04:32] *** quotable6 left
[04:32] *** sourceable6 left
[04:32] *** coverable6 left
[04:32] *** linkable6 left
[04:32] *** evalable6 left
[04:32] *** tellable6 left
[04:32] *** squashable6 left
[04:32] *** shareable6 left
[04:32] *** nativecallable6 left
[04:32] *** bisectable6 left
[04:32] *** notable6 left
[04:32] *** bloatable6 left
[04:32] *** benchable6 left
[04:32] *** greppable6 left
[04:33] *** sourceable6 joined
[04:33] *** committable6 joined
[04:33] *** shareable6 joined
[04:33] *** bloatable6 joined
[04:33] *** tellable6 joined
[04:34] *** releasable6 joined
[04:34] *** unicodable6 joined
[04:34] *** squashable6 joined
[04:34] *** notable6 joined
[04:34] *** linkable6 joined
[04:34] *** bisectable6 joined
[04:35] *** statisfiable6 joined
[04:35] *** coverable6 joined
[04:35] *** nativecallable6 joined
[04:35] *** evalable6 joined
[04:35] *** benchable6 joined
[04:35] *** greppable6 joined
[04:35] *** quotable6 joined
[04:52] *** MasterDuke left
[05:42] <Xliff> timotimo lizmat vrurg jnthn: https://repl.it/@Xliff/RoleAttributeWeirdness

[05:42] <Xliff> timotimo: I think this golfs what I've been having a problem with.

[05:42] <Xliff> Note the duplicated attributes.

[06:41] *** patrickb joined
[06:59] *** sena_kun joined
[07:03] *** samcv left
[07:34] *** frost-lab joined
[07:49] <Kaeipi> releasable6, status

[07:49] <releasable6> Kaeipi, Next release in ≈1 day and ≈11 hours. 1 blocker. 17 out of 83 commits logged

[07:49] <releasable6> Kaeipi, Details: https://gist.github.com/0dbe51fa3338b224d0ba8572634b143c

[09:42] <lizmat> m: class A { has $!a }; class B is A { has $!a }; .say for B.^attributes.map(  { .package.^name ~ "::" ~ .name } )   # Xliff  

[09:42] <camelia> rakudo-moar 85847d2f1: OUTPUT: «B::$!a␤A::$!a␤»

[09:43] <lizmat> seems a normal consequence of the way you've set up things?

[09:43] <lizmat> this is also why in an nqp::getattr you *must* specify the class to which an attribute in an object belongs

[10:24] *** AlexDaniel` left
[10:24] *** unclechu left
[10:31] *** AlexDaniel` joined
[10:42] *** unclechu joined
[12:16] <Geth> ¦ rakudo: 240bc9eb13 | (Elizabeth Mattijsen)++ | 2 files

[12:16] <Geth> ¦ rakudo: Make .grep/.first on native arrays about 3.5x as fast

[12:16] <Geth> ¦ rakudo: 

[12:16] <Geth> ¦ rakudo: - searching for Str:D on a native str array

[12:16] <Geth> ¦ rakudo: - searching for Int:D on a native int array

[12:16] <Geth> ¦ rakudo: - searching for Num:D on a native num array

[12:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/240bc9eb13

[12:42] <patrickb> Is it possible to create numbered lists in the docs at the moment?

[13:12] <patrickb> I'm still pondering on the lengthy explanation in https://docs.raku.org/routine/bless saying one shouldn't usually create a custom `new`.

[13:13] <patrickb> Both examples given work fine when stripping out the complexity given as reason for not writing custom `new`s.

[13:15] <patrickb> These are my simplified examples: https://docs.raku.org/routine/bless

[13:16] <vrurg> .tell Xliff it's not a bug. You have two instances of attribute per class and this is how roles work. A method on parent class can't have access to attributes of a child class anyway.

[13:16] <tellable6> vrurg, I'll pass your message to Xliff

[13:16] <patrickb> Can anyone enlighten me what's wrong with those?

[13:23] <patrickb> I'm inclinded to remove those examples should there actually be no point to them. (Have they been added at a point in the past where Rakudo was not as capable enough for the more obvious ways?)

[13:27] *** Merfont joined
[13:28] *** Kaeipi left
[13:29] <patrickb> Now looking at the blame of the file. Seems there was some discussion about this in the past in https://github.com/Raku/doc/issues/2077

[13:29] *** patrickb left
[13:30] *** patrickb joined
[13:30] *** frost-lab left
[14:02] *** MitarashiDango[m joined
[14:03] <Geth> ¦ roast: f0e096c092 | (Elizabeth Mattijsen)++ | 3 files

[14:03] <Geth> ¦ roast: Add tests for native array .grep/.first

[14:03] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f0e096c092

[14:05] <Geth> ¦ rakudo: cf2394772c | (Elizabeth Mattijsen)++ | 2 files

[14:05] <Geth> ¦ rakudo: Fix errors in :k, :kv, :p handling

[14:05] <Geth> ¦ rakudo: 

[14:05] <Geth> ¦ rakudo: Spotted *after* writing tests for these cases.  :-(

[14:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cf2394772c

[14:06] <Xliff> vrurg: Hi. Thanks for the response.

[14:06] <tellable6> 2020-10-23T13:16:01Z #raku-dev <vrurg> Xliff it's not a bug. You have two instances of attribute per class and this is how roles work. A method on parent class can't have access to attributes of a child class anyway.

[14:06] <Xliff> So why does the example not set $!origin properly?

[14:10] <timotimo> i would assume you're setting one $!origin and checking the other

[14:10] <timotimo> didn't look close enough yet

[14:14] <MitarashiDango[m> Hello, I want to add a flag to IO::Path's symlink method (something like :literal or :exact), so that a symlink can be created without calling .absolute on the intended link. Would there be any issue with adding that in? 

[14:16] <lizmat> MitarashiDango[m  why is calling .absolute a problem?  what is the use case?

[14:16] <timotimo> to create a relative symlink probably

[14:17] <MitarashiDango[m> ^ Yup, if I create one in a directory, and the directory moves, that symlink breaks because its not relative

[14:17] <lizmat> ok, so it's a shortcoming of the current implementation

[14:17] <ugexe> :literal is one less character than .absolute

[14:17] <tellable6> 2020-10-15T23:22:17Z #raku <tbrowder> ugexe how long should it take before zef finds just-upgraded modules on cpan?

[14:17] <tellable6> 2020-10-15T23:23:07Z #raku <tbrowder> ugexe and modules.raku.org already shows the upgraded module

[14:17] <tellable6> 2020-10-16T00:28:19Z #raku <gfldex> ugexe p6bot has stopped updating the ecosystem files about 14 hours ago

[14:18] <vrurg> Xliff: because you set $!origin on Base, not $!origin on A.

[14:20] <vrurg> Xliff: and when you invoke Origin method you invoke the one which is installed into A.

[14:33] *** patrickb left
[14:40] *** sena_kun left
[14:44] <[Tux]> With teams and Opera killed:

[14:44] <[Tux]> Rakudo v2020.09-85-gcf2394772 (v6.d) on MoarVM 2020.09-17-ga989f7b55

[14:44] <[Tux]> csv-test-xs-20      0.387 -  0.389

[14:44] <[Tux]> csv-ip5xs           0.830 -  0.853

[14:44] <[Tux]> test-t --race       0.861 -  0.871

[14:44] <[Tux]> test-t              1.908 -  1.930

[14:44] <[Tux]> test                7.737 -  7.775

[14:44] <[Tux]> csv-ip5xs-20        7.968 -  8.074

[14:44] <[Tux]> test-t-20 --race    9.318 -  9.641

[14:44] <[Tux]> csv-parser         25.953 - 27.448

[14:44] <[Tux]> test-t-20          33.220 - 35.627

[14:57] <Xliff> vrurg: OK, this  breaks with my understanding of how Object Oriented programming works.

[14:58] <Xliff> For one thing, there is only ever supposed to be One Attribute With A Given Name

[14:58] <Xliff> How can I accomplish that with the given example?

[14:59] <vrurg> Xliff: no if you do understand the model of role Raku embraced. Roles are flattened down into the consuming class. Inheritance keeps classes separate entities.

[14:59] <vrurg> In your example setOrigin must be defined in the role the attribute defined in.

[15:00] <Xliff> OK. So let's move that and see if I can reproduce the error.

[15:01] <vrurg> Xliff: basically, you break the rule of attribute handling to be done where the attribute belongs. 

[15:01] <Xliff> OK

[15:02] <Xliff> OK. If I do that, it's working.

[15:03] <Xliff> So I think, for my purposes, I will need a way to reference the Base version of an attribute.

[15:03] <Xliff> And I really shouldn't even need to think about that when working with Objects and Roles.

[15:03] <Xliff> However, thanks fort the explanation.

[15:07] <Xliff> A.new(origin => 42, origin-attribute2 => Any, origin => 99, origin-attribute2 => Any)

[15:07] <Xliff> So... how to distinguish $!origin?

[15:07] <vrurg> Xliff: when you deal with ! twigil – you have to think of these things. But if you reference an autogen accessor – everything will work as expected.

[15:08] <Xliff> OK, but in this case, I always want to deal with the $!origin found in Base.

[15:08] <Xliff> How would that be expressed?

[15:09] <vrurg> No way to distinguish externally without low-level magic.

[15:09] <vrurg> The only good solution is to split up the roles. 

[15:09] <Xliff> Not even something like $!self::Base::origin?

[15:10] <vrurg> No because A doesn't have access to privates of Base.

[15:10] <vrurg> Again, consider better encapsulation approach. Instead, you're trying to break it.

[15:10] <Xliff> So in this situation, I should remove "does Origin" from Inherits from Origin?

[15:11] <vrurg> Likely so. Besides, 'InheritsFrom' is generally bad name as roles do not inherit. :)

[15:11] <Xliff> Yeah. That seems to do the trick.

[15:12] <Xliff> However, what happens when the intent from InheritsFromOrigin is needed/

[15:12] <Xliff> As in, I need InheritsFromOrigin to access a method from Origin?

[15:13] <Xliff> Do I just expect the composing class to do the right role and regerence that method anyway?

[15:13] <vrurg> First of all, it looks like your mistake here is that you consider roles in terms of inheritance. But, in fact, they're consumed.

[15:13] <vrurg> As to accessing a method – make the other role require a method it needs.

[15:14] <vrurg> This way you'd guarantee compile-time check of the method existance. Then it's up to the consuming class to provide the method no matter which means are used for this.

[15:16] <Xliff> OK. I think I see how this is intended to work.

[15:17] <Xliff> I still think that composing two attributes of the same name in a single object inheritance chain is a Bad Idea and also LTA

[15:18] <vrurg> Xliff: no. Do you care about internal structure of a 3rd-party class when you inherit from it? Do you care if they have $!state if you define same attribute in your class?

[15:19] <Geth> ¦ rakudo: Kaiepi++ created pull request #3978: Add a Mu ACCEPTS candidate for Mu:D

[15:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3978

[15:19] <vrurg> And roles are symbiotic to the class consuming them. The only thing they don't share are submethods.

[15:20] <Xliff> vrurg: I have no problem of the internal state of a third party object, but I should be able to note if I happen to name an attribute the same as someoen elses!

[15:20] <Xliff> Preserving internal state here is irrelevant.

[15:20] *** Merfont is now known as Kaiepi

[15:20] <Xliff> If there is an attribute naming convention, it is more fair to throw an error and let the consuming class handle the conflict.

[15:20] <vrurg> Xliff: a private one you have no access to? Remember, attributes are not part of the published API, only accessors are.

[15:21] <Xliff> Masking the error and then leaving the consuming class in a broken state doesn't make sense!

[15:22] <Xliff> vrurg: I don't see the utility to allow for attribute collision in an inheritance chain.

[15:22] <Xliff> It just leads to confusion.

[15:22] <Geth> ¦ roast: Kaiepi++ created pull request #692: Add tests for Mu smartmatching

[15:22] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/692

[15:23] <Xliff> Whether you have access to it programatically or not.

[15:23] <Xliff> If you are browsing the source code, you have expectations.

[15:23] <Xliff> if you see an attribute named one way, you expect that attribute to be the same across the entire codebase.

[15:23] <Xliff> If you are saying you want that expectation to change, then that's fine.

[15:23] <Xliff> But it is not me that's fighting DECADES of OOP.

[15:23] <Xliff> It's you.

[15:24] <Xliff> If this is the expectation, then maybe a warning?

[15:25] <vrurg> Xliff: I have to ran, don't have time. But your mistake is in mixing up accessors and private attributes. 

[15:28] <Xliff> Acually, my mistake is not understanding how "does" works.

[15:29] <Xliff> I thought if we had a role R that "does A" then the it would be the equivalent of "class A does R does A" on the composing class

[15:29] <Xliff> What you are describing is not that at all.

[15:29] <Xliff> At any rate, thanks for the discussion. I will now have to see how to rework everything.

[15:33] <vrurg> Xliff: I was delayed, so last note: it do 'does+does' eventually. But it only applies directly to the class consuming R. The one which inherits has it's own separate namespace. So, think of A injecting into the consuming class. And what's injected belongs only to the consuming class. Publics are available through MRO, but privates remain privates.

[15:36] *** travis-ci joined
[15:36] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix errors in :k, :kv, :p handling

[15:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/738317107 https://github.com/rakudo/rakudo/compare/240bc9eb131b...cf2394772c72

[15:36] *** travis-ci left
[15:38] <Xliff> OK. So the fix seems to be to move the equivalent of "does Base" from the role to the consuming objects.

[15:38] <Xliff> I was hoping to save that step, but no matter.

[16:26] <dogbert17> I see some native array related spectest fails. Am I seeing WIP?

[16:50] *** zostay_ joined
[16:50] *** ugexe left
[16:55] *** Xliff left
[16:57] *** zostay left
[16:57] *** zostay_ is now known as zostay

[17:18] *** patrickb joined
[17:26] *** ugexe joined
[17:30] *** domidumont joined
[17:39] <patrickb> Numbered lists in docs aren't possible, right? Is there any workaround?

[18:15] <Geth> ¦ rakudo: mid1221213++ created pull request #3979: Fix ecaf334 that partly caused #3966

[18:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3979

[18:15] <linkable6> RAKUDO#3966 [open]: https://github.com/rakudo/rakudo/issues/3966 [BLOCKER][blin][regression] Blin 2020.10, round 1

[18:27] <Geth> ¦ rakudo: f3ffb702cc | (Alexandre Jousset)++ | lib/NativeCall.rakumod

[18:27] <Geth> ¦ rakudo: Fix ecaf334 that partly caused #3966

[18:27] <Geth> ¦ rakudo: 

[18:27] <Geth> ¦ rakudo: The test of installation of Compress::Bzip2

[18:27] <Geth> ¦ rakudo: failed after ecaf334. There was a change from

[18:27] <Geth> ¦ rakudo: isconcrete to isconcrete_nd in excess.

[18:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f3ffb702cc

[18:27] <Geth> ¦ rakudo: cb023b2120 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | lib/NativeCall.rakumod

[18:27] <linkable6> RAKUDO#3966 [open]: https://github.com/rakudo/rakudo/issues/3966 [BLOCKER][blin][regression] Blin 2020.10, round 1

[18:27] <Geth> ¦ rakudo: Merge pull request #3979 from mid1221213/fix-ecaf334

[18:27] <Geth> ¦ rakudo: 

[18:27] <Geth> ¦ rakudo: Fix ecaf334 that partly caused #3966

[18:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cb023b2120

[18:59] <tbrowder> hi, raku ppl, i would like to propose a community project to help increase interest among young ppl.

[19:00] <vrurg> patrickb: ping?

[19:00] <patrickb> vrurg: pong

[19:02] <vrurg> patrickb: have you tried build jvm backend on a linux recently? NQP fails on linux mint for me.

[19:02] <tbrowder> my idea is to have something like small scholarship awards, sponsored overall by the perl foundation, and claimed by individual sponsors.

[19:02] <vrurg> patrickb: "Missing or wrong version of dependency 'gen/jvm/stage2/NQPCORE.setting'"

[19:02] <Geth> ¦ rakudo: mienaikage++ created pull request #3980: Add flag for creating symlinks without absolute path

[19:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3980

[19:03] <tbrowder> the scholarships would be for somthing like a smaller scale version of the google summer of code.

[19:03] *** Xliff joined
[19:04] <patrickb> vrurg: I didn't. (Actually I'm not sure whether I ever managed to build JVM locally. I mostly tested via CI so far...)

[19:04] <patrickb> vrurg: Does the NQP build fails or Rakudo?

[19:04] <tbrowder> we could do something like beef up the module most wanted list...

[19:04] <vrurg> NQP.

[19:05] <patrickb> Do you know whether its

[19:05] <tbrowder> oops, wrong channel

[19:05] <patrickb> missing or stale?

[19:06] <vrurg> patrickb: it's definitely not missing. I can't be stale because it's a fresh build.

[19:08] <Xliff> vrurg: Another aside to the role thing. It makes code maintenance harder, because I can't place the Base object behind a proxy role.

[19:08] <patrickb> Hm. My experience with this failure is that it always ended up being right about the version mismatch. Is there a previous installation in some other folder maybe?

[19:09] <Xliff> Any consuming objects now have to "does Base does SoemthingElseUsingBase"

[19:09] <Xliff> It makes maintenance harder.

[19:09] <vrurg> patrickb: not for JVM.

[19:12] <vrurg> Xliff: I think you have a design issue. If the problematic attribute should be a sole property of Base then make it so! Move everything related to it either into Base or into a separate role.

[19:12] <patrickb> Hm. I'll see if I manage to build a JVM locally.

[19:12] <patrickb> I'm away for a bit...

[19:13] <Xliff> vrurg: I'm using GLib's design.

[19:13] <Xliff> Trying to make Role serve the place of Interface, which it closely maps.

[19:14] <vrurg> patrickb: there is no big deal about it usually. Just install openjdk and that's all you need.

[19:17] <vrurg> Xliff: why you say "does Base does SomethingElse"? "is Base"? And what's SomethingElse?

[19:17] <Xliff> vrurg: Ideally though Base should be an object, not a role. So that might be the problem, right there.

[19:21] <vrurg> Xliff: based on your example, Base is a class. Thus, "is Base". Otherwise I'm lost in what you're trying to achieve. Your code snippet now looks about right to me.

[19:22] <Xliff> vrurg: Yes. Base needs to become an object. It's always been a role and I haven't had time to make it an object. that's been on the software map for a long time. Just never had the chance to fix the implementation

[19:35] <Geth> ¦ rakudo: c37ffe71bd | (Elizabeth Mattijsen)++ | 2 files

[19:35] <Geth> ¦ rakudo: Make .unique/.repeated/.squish on native arrays faster

[19:35] <Geth> ¦ rakudo: 

[19:35] <Geth> ¦ rakudo: - .unique between 1.6x and 7.6x as fast

[19:35] <Geth> ¦ rakudo: - .repeated between 2.0x and 2.5x as fast

[19:35] <Geth> ¦ rakudo: - .squish between 1.8x and 6.8x as fast

[19:35] <Geth> ¦ rakudo: 

[19:35] <Geth> ¦ rakudo: Also add a dedicated native array .Seq method.

[19:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c37ffe71bd

[19:36] <Geth> ¦ roast: 5d93b6803c | (Elizabeth Mattijsen)++ | 3 files

[19:36] <Geth> ¦ roast: Add tests for native array .unique/repeated/squish

[19:36] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/5d93b6803c

[19:47] *** samcv joined
[19:48] * lizmat suddenly realizes that "my @a = ^100; say @a.Seq[99]"  *will* actually copy the @a array into a cache, whereas it could well just access the array underlying the Seq

[19:59] *** finsternis left
[20:05] * lizmat invites thoughts about https://github.com/rakudo/rakudo/pull/3980

[20:05] *** nwc10 joined
[20:05] <nwc10> fatal: Not a git repository: '/home/nick/Perl/rakudo/t/spec/.git'

[20:06] <nwc10> That means my checkout is a little bit old?

[20:06] <lizmat> does it have a config in it ?

[20:06] <nwc10> :-)

[20:07] <lizmat> eh..  the git repo would be "/home/nick/Perl/rakudo/t/spec", no ?

[20:07] <nwc10> seems that I didn't build Rakudo on that machine. nqp says

[20:07] <nwc10> This is nqp version 2015.03-125-g53d43e8 built on MoarVM version 2015.03-148-g8bb5da8

[20:07] <lizmat> ah, wow

[20:07] <nwc10> anyway, woohoo, it has valgrind

[20:08] <nwc10> ho, it's not as crazy as I thought

[20:08] <nwc10> it doesn't actually have a spectest checkout

[20:08] <nwc10> it's not simply that it dates from 2105

[20:10] *** finsternis joined
[20:12] <nwc10> oh pants. its Fedora. no IPC::Cmd

[20:20] * vrurg wonder when was it the last time anybody needed JVM backend?

[20:20] <vrurg> *wonders

[20:21] <Xliff> Windows users want raku to target .exe

[20:21] <Xliff> Until that happens, JVM backend is the closest they can get since they can target JAR

[20:24] <vrurg> Does it build on Windows? 

[20:24] <Xliff> It used to.

[20:24] <Xliff> It used to build under Cygwin, but I couldn't get it to work, last night.

[20:24] <Xliff> I know Star is on Windows. 

[20:25] <Xliff> Would be interested to know how they build rakudo so I can do so, myself.

[20:25] <vrurg> I always had problems building JVM on Win and never on Mac. Now it turns out JVM is broken altogether. 

[20:35] *** Geth left
[20:36] *** Geth joined
[20:37] *** dogbert17 left
[20:37] *** dogbert17 joined
[20:38] *** raku-bridge left
[20:43] <nwc10> fixed that. next problem - branch `nom` is just a little out of date

[20:56] <patrickb> vrurg: I managed to reproduce the problem locally.

[20:57] <vrurg> patrickb: I'm trying to locate the guilty commit. 2020.02.1 release is the last working one. 2020.05 is broken.

[20:58] <vrurg> And I probably found the last working commit right now... Just waiting for build to finish to make sure.

[21:01] <vrurg> patrickb: b0ddeda683a1b90399f92d9845f1499c3ea68f2f still compiles. The likely suspect is 3d69dc107b73d9127235297219c21418148a85e0.

[21:04] <patrickb> Maybe the `#.NOTPARALLEL`?

[21:05] <vrurg> patrickb: It worked well and it should work.

[21:07] <vrurg> But I'm testing it now.

[21:07] <patrickb> :-) me too

[21:09] <vrurg> And it seemingly works. Heh... :(

[21:10] <patrickb> That means, that some dependency is not stated correctly. Right?

[21:12] <patrickb> I think it should compile NQPCORE.setting before nqpmo. (The original error being nqpmo failing with being unable to find NQPCORE.setting, which at that point actually wasn't compiled (NQPCORE.setting.jar didn't exist).)

[21:16] <vrurg> patrickb: I'm trying it.

[21:17] <patrickb> I need to reboot. Back in a bit.

[21:17] <vrurg> Oops, CORE_SETTING depend on nqp_mo

[21:17] *** patrickb left
[21:26] *** patrickb joined
[21:46] <patrickb> vrurg: Can't we deduce a working build order when looking at a `.NOTPARALLEL` build?

[21:48] <vrurg> patrickb: possibly. But I go other way around. JASTNodes currently fails and when it does there is no .jar for NQPCORE. And JASTNodes doesn't actually depend on NQPCORE.

[21:50] <vrurg> But somehow when I add dependency in the template it is not propagated into Makefile. I likely to forget something...

[21:56] * vrurg was editing in a directory different from the one where he was compiling. This evil directory name shortening in CLI prompt...

[22:01] <vrurg> patrickb: ok, that was it. A missing dependency on NQPCORE.

[22:03] <Geth> ¦ nqp: 688019c375 | (Vadim Belman)++ | tools/templates/Makefile-backend-common.in

[22:03] <Geth> ¦ nqp: Add a missing dependency

[22:03] <Geth> ¦ nqp: 

[22:03] <Geth> ¦ nqp: Fixes parallel build.

[22:03] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/688019c375

[22:11] <patrickb> yay!

[23:00] <releasable6> Next release in ≈19 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:04] <Geth> ¦ rakudo: 219978e12e | (Elizabeth Mattijsen)++ | src/core.c/core_epilogue.pm6

[23:04] <Geth> ¦ rakudo: Fix JVM build

[23:04] <Geth> ¦ rakudo: 

[23:04] <Geth> ¦ rakudo: The JVM doesn't know about Uni yet, spotted by vrurg++

[23:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/219978e12e

[23:06] <vrurg> lizmat: didn't expect you to be awake and tried to find a better solution to the problem.

