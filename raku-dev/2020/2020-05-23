[00:26] *** Altai-man_ joined
[00:29] *** sena_kun left
[01:08] *** wildtrees left
[01:08] *** guifa2 left
[01:53] *** Kaiepi left
[01:59] *** Kaiepi joined
[02:01] *** guifa2 joined
[02:27] *** sena_kun joined
[02:29] *** Altai-man_ left
[04:05] <Geth> ¦ nqp: softmoth++ created pull request #638: Fix sprintf() with *-specified negative width argument

[04:05] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/638

[04:26] *** Altai-man_ joined
[04:29] *** sena_kun left
[06:27] *** sena_kun joined
[06:29] *** Altai-man_ left
[08:26] *** Altai-man_ joined
[08:29] *** sena_kun left
[09:02] *** Kaiepi left
[09:04] *** Kaiepi joined
[10:28] *** sena_kun joined
[10:29] *** Altai-man_ left
[11:05] <lizmat> Files=1306, Tests=111304, 213 wallclock secs (28.59 usr  8.26 sys + 3001.01 cusr 272.61 csys = 3310.47 CPU)

[11:10] <Geth> ¦ nqp: 17fa91b03f | (Tim Smith)++ | 2 files

[11:10] <Geth> ¦ nqp: Fix sprintf() with *-specified negative width argument

[11:10] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/17fa91b03f

[11:10] <Geth> ¦ nqp: bf3fb540ba | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[11:10] <Geth> ¦ nqp: Merge pull request #638 from softmoth/sprintf-minus

[11:10] <Geth> ¦ nqp: 

[11:10] <Geth> ¦ nqp: Fix sprintf() with *-specified negative width argument

[11:10] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/bf3fb540ba

[11:17] *** MasterDuke left
[11:27] <Geth> ¦ rakudo: 5b86436c49 | (Christian Bartolomäus)++ | src/core.c/Rakudo/Iterator.pm6

[11:27] <Geth> ¦ rakudo: [JVM] Use typed variant of nqp::shift

[11:27] <Geth> ¦ rakudo: 

[11:27] <Geth> ¦ rakudo: ... because $!dots has been initialized with nqp::list_s().

[11:27] <Geth> ¦ rakudo: 

[11:27] <Geth> ¦ rakudo: Make S32-io/dir.t pass again.

[11:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5b86436c49

[11:28] <lizmat> bartolin_++

[11:29] *** ShimmerFairy left
[11:30] *** ShimmerFairy joined
[12:22] *** MasterDuke joined
[12:26] *** Altai-man_ joined
[12:29] *** sena_kun left
[12:47] <Geth> ¦ roast: 4bf43757c4 | (Elizabeth Mattijsen)++ | S32-io/child-secure.t

[12:47] <Geth> ¦ roast: Add test file for IO::Path.child(foo, :secure)

[12:47] <Geth> ¦ roast: 

[12:47] <Geth> ¦ roast: Shamelessly transmogrified from the tests of IO::Path::ChildSecure

[12:47] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/4bf43757c4

[12:51] <Geth> ¦ rakudo: dc4fcb0948 | (Elizabeth Mattijsen)++ | 2 files

[12:51] <Geth> ¦ rakudo: Add support for :secure in IO::Path.child

[12:51] <Geth> ¦ rakudo: 

[12:51] <Geth> ¦ rakudo: - shamelessly transmogrified the code from IO::Path::ChildSecure

[12:51] <Geth> ¦ rakudo: - added test-file to "make spectest"

[12:51] <Geth> ¦ rakudo: 

[12:51] <Geth> ¦ rakudo: So basically, to get the IO::Path::ChildSecure semantics, you will need

[12:51] <Geth> ¦ rakudo: to pass the ":secure" named parameter to .child as well.  The IO::Path.add

[12:52] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[12:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dc4fcb0948

[12:53] <lizmat> since :secure is opt-in, this should not have broken anything in the ecosystem, nor should it have broken IO::Path::ChildSecure

[12:56] *** patrickb joined
[12:56] <lizmat> .tell timotimo if you want to see an exploding --profile, try running "IO::Spec::Unix.tmpdir for ^10000"

[12:56] <tellable6> lizmat, I'll pass your message to timotimo

[13:02] *** Voldenet left
[13:08] *** Voldenet joined
[13:08] *** Voldenet left
[13:08] *** Voldenet joined
[13:18] <Geth> ¦ rakudo: 4103a3095e | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[13:18] <Geth> ¦ rakudo: Simplify creation of IO::Path::xxx classes

[13:18] <Geth> ¦ rakudo: 

[13:18] <Geth> ¦ rakudo: More for maintenance convenience than anything else

[13:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4103a3095e

[13:22] *** travis-ci joined
[13:22] <travis-ci> Rakudo build failed. Sylvain Colinet 'Make the 'is' routine in Test not throwing an error on failure when the type can't be stringified, falling back on .raku instead.

[13:22] <travis-ci> https://travis-ci.com/Skarsnik/rakudo/builds/167894577 https://github.com/Skarsnik/rakudo/compare/7cf8f4345866...c9e94623bccb

[13:22] *** travis-ci left
[13:36] <Geth> ¦ problem-solving: lizmat assigned to jnthn Issue Should IO::Path.child default to :secure semantics https://github.com/Raku/problem-solving/issues/198

[13:39] <Geth> ¦ rakudo: ecd06c9f9a | (Elizabeth Mattijsen)++ | src/core.c/IO/Spec/Win32.pm6

[13:39] <Geth> ¦ rakudo: Make IO::Spec::Win32.basename about 1.7x as fast

[13:39] <Geth> ¦ rakudo: 

[13:39] <Geth> ¦ rakudo: - convert to native string in signature

[13:39] <Geth> ¦ rakudo: - use nqp ops

[13:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ecd06c9f9a

[14:23] *** rypervenche left
[14:23] *** patrickb left
[14:27] *** sena_kun joined
[14:28] <Geth> ¦ rakudo: 6d427d472b | (Elizabeth Mattijsen)++ | src/core.c/IO/Spec/Win32.pm6

[14:28] <Geth> ¦ rakudo: Make IO::Spec::Win32.tmpdir about 1.8x as fast

[14:28] <Geth> ¦ rakudo: 

[14:28] <Geth> ¦ rakudo: - use for loop with return instead of first()

[14:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6d427d472b

[14:29] *** Altai-man_ left
[14:38] *** rypervenche joined
[15:52] *** Kaiepi left
[15:53] *** Kaiepi joined
[15:56] *** Kaiepi left
[15:56] *** Kaiepi joined
[15:57] *** domidumont joined
[16:02] *** Kaiepi left
[16:05] *** Kaiepi joined
[16:26] *** Altai-man_ joined
[16:29] *** sena_kun left
[16:48] <bartolin_> lizmat: I think I've found something with my "VMArray: Can't shift from an empty array" bug (https://github.com/rakudo/rakudo/issues/3707). Do you think my reasoning makes sense.

[16:55] <nine> bartolin_: so p6argvmarray on JVM gets the wrong CallsiteDescriptor when called in a nested block?

[16:58] <bartolin_> nine: yes, that's what I think. But since the code only runs with optimizer=2, it looks fragile to me for MoarVM, too.

[16:58] <nine> Or is it more like that block getting flattened away in QASTCompilerMAST while it doesn't on the JVM?

[16:58] <nine> Oh, so it gets optimized away even earlier?

[16:58] <nine> But why only on MoarVM then? Isn't the optimizer backend agnostic?

[17:00] <bartolin_> I'm pretty sure there are some optimizations that are not possible (or don't work) on the JVM backend. I've seen other differences there in the past.

[17:01] <nine> I find only a few about spesh plugins

[17:02] <bartolin_> hmm, the test file S16-io/put.t works with --optimize=1 on MoarVM, too.

[17:02] <Geth> ¦ nqp: andreoss++ created pull request #639: [jvm] Put all @Override in place

[17:02] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/639

[17:02] * bartolin_ has to run (dinner), will be back later

[17:16] *** lichtkind joined
[17:23] <bartolin_> m: use nqp; class Foo { has $.a = True; method foo(|) { if $.a { nqp::shift(nqp::p6argvmarray) } } }; say Foo.new.foo(42, 43)

[17:23] <camelia> rakudo-moar 6d427d472: OUTPUT: «Foo.new(a => Bool::True)␤»

[17:23] <Geth> ¦ rakudo: a616fe579e | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[17:23] <Geth> ¦ rakudo: Implement R:It.native_s/i/n for iterating native lists

[17:23] <Geth> ¦ rakudo: 

[17:23] <Geth> ¦ rakudo: - can be used for nqp::list_s/i/n as well as str/int/num arrays

[17:23] <Geth> ¦ rakudo: - are PredictiveIterators, rather than the ones in native_array

[17:23] <Geth> ¦ rakudo: - to be used in the core where they make sense

[17:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a616fe579e

[17:24] <bartolin_> nine: this does not work with '--optimize=1' on MoarVM. So I guess there is a more general problem with the structure.

[17:25] <Geth> ¦ rakudo: e645ff6a76 | (Elizabeth Mattijsen)++ | 2 files

[17:25] <Geth> ¦ rakudo: Let native arrays use the new R:It.native_s/i/n iterators

[17:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e645ff6a76

[17:25] <nine> On MoarVM it accesses the current call frame's arguments. Which doesn't really mean "the current subroutine's"

[17:25] <lizmat> so using nqp::p6argvmarray can only be used in the same frame as the sub ?

[17:25] <nine> bartolin_: I'm more and more convinced that your patch is actually correct and one just has to be very careful when using p6argvmarray

[17:28] <lizmat> bartolin_ nine will take care of patches related to nqp::p6argvmarray

[17:29] <bartolin_> nine: regarding the optimizer: if I'm not mistaken this is one place where it works differently on the JVM backend: https://github.com/rakudo/rakudo/blob/7b4dd30060/src/Perl6/Actions.nqp#L8874-L8879 (picked from https://github.com/rakudo/rakudo/issues/2810)

[17:29] <bartolin_> lizmat++

[17:34] * bartolin_ is always happy if looking at the JVM backend leads to an improvement/fix for MoarVM, too

[17:34] <lizmat> looks like the IO::Handle work I did recently, was the only case where nqp::p6argvmarray was not called in the frame of the sub

[17:35] <lizmat> bartolin_++ # keeping on keeping on the JVM backane

[17:35] <lizmat> *backend

[17:41] *** domidumont left
[17:50] <Geth> ¦ rakudo: 1464b35e48 | (Elizabeth Mattijsen)++ | src/core.c/IO/Handle.pm6

[17:50] <Geth> ¦ rakudo: Fix JVM backend (and MoarVM as well)

[17:50] <Geth> ¦ rakudo: 

[17:50] <Geth> ¦ rakudo: Turns out nqp::p6argvmarray can only be used in the same *frame* as the

[17:50] <Geth> ¦ rakudo: routine it wants the arguments from.  This apparently was covered up on

[17:50] <Geth> ¦ rakudo: MoarVM by the static optimizer, but not so on the JVM which uncovered

[17:50] <Geth> ¦ rakudo: the issue.

[17:50] <Geth> ¦ rakudo: 

[17:50] <Geth> ¦ rakudo: bartolin++ for following up and finding the cause of breakage on JVM

[17:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1464b35e48

[17:50] <lizmat> dinner&

[18:06] *** guifa2 left
[18:06] *** guifa2 joined
[18:07] *** guifa2 left
[18:21] *** guifa2 joined
[18:27] *** sena_kun joined
[18:29] *** Altai-man_ left
[18:45] *** guifa2 left
[18:56] <lizmat> hmmm... is there a reason why nqp::split does not create a nqp::list_s, but an nqp::list ?

[18:56] <lizmat> it can only create strings ?

[19:16] <nine> nqp::split doesn't create a BOOTArray, but an hll->slurpy_array_type

[19:18] <nine> So theoretically it could be something HLL specific. In practice it's always a VMArray

[19:20] *** lucasb joined
[19:28] <lizmat> but why is it not a BOOTStrArray ?

[19:28] <lizmat> I'm surprised that it doesn't, as it can only ever produce strings

[19:32] <nine> because there's simply no slot for a string array type in hll

[19:33] <lizmat> hmmm... feels like a lost opportunity...  perhaps an nqp::split_s would be nice to have then

[19:33] <nine> Question is: what would it gain us?

[19:34] <lizmat> it could make Str.split('x') a lot faster

[19:34] <nine> why?

[19:34] <nine> or rather how?

[19:35] <lizmat> because there's now iterators in core that can iterate over native lists

[19:36] <lizmat> and it would prevent a lot of boxing?

[19:37] <nine> Yeah, that makes sense

[19:38] <nine> Adding a string_array_type to hll seems kinda trivial. It's just some book keeping work

[19:40] <lizmat> let's see what jnthn has to say  :-)

[19:43] <jnthn> No objections from me.

[19:43] <nine> Wow...I'm just experiencing this...moment of clarity. Where the error messages I get are starting to make sense and I get this feeling of finally understanding how nested BEGIN time compilation must work.

[19:48] <nine> And the first step that got me there was documenting these obscure nqp ops freshcoderef, markcodestatic, markcodestub and scsetcode

[19:51] <lizmat> jnthn: so, is that an ok for an nqp::split_s or a nqp::split that creates a list_s

[19:51] <lizmat> the latter with possible ecosystem consequences

[19:52] <nine> I'd be pretty surprised about ecosystem fallout

[19:57] <Geth> ¦ rakudo: 84ff64cf90 | (Elizabeth Mattijsen)++ | src/core.c/Buf.pm6

[19:57] <Geth> ¦ rakudo: Make Blob.join between 4% and 11% faster

[19:57] <Geth> ¦ rakudo: 

[19:57] <Geth> ¦ rakudo: - presize the result array back to 0

[19:57] <Geth> ¦ rakudo: - use push_s instead of bindpos_s

[19:57] <Geth> ¦ rakudo: - use an nqp::while instead of a while

[19:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/84ff64cf90

[20:02] <jnthn> I'd also not expect fallout

[20:03] <jnthn> Though list_s may be easier in so far as not having to go and update NQP also

[20:08] <MasterDuke> greppable6: nqp::split

[20:08] <greppable6> MasterDuke, 1 line, 1 module: https://gist.github.com/0d0a67494461c8408741ad14c8654c73

[20:10] <nine> That ^^^ would be ok

[20:10] <nine> A list_s is still a list after all

[20:21] <lizmat> jnthn: perhaps nqp could benefit from an update performance wise ?

[20:26] <jnthn> Perhaps, yes

[20:27] *** Altai-man_ joined
[20:29] *** sena_kun left
[20:31] <lizmat> meh, probably not

[20:31] <lizmat> and if so, probably best manually migrated to split_s

[20:47] *** rypervenche left
[21:10] <timotimo> i wonder how to optimize rakudo's compiler bits without making the code unreadable / unmaintainable

[21:10] <timotimo> there's probably also not terribly many places that stand out from a time-wastage perspective?

[21:10] <Geth> ¦ rakudo: b55667ef42 | (Elizabeth Mattijsen)++ | src/core.c/Buf.pm6

[21:10] <Geth> ¦ rakudo: Make Blob.gist about 2x as fast

[21:10] <Geth> ¦ rakudo: 

[21:10] <Geth> ¦ rakudo: - use a low-level lookup map for translation, so no conditionals anymore

[21:10] <Geth> ¦ rakudo: - also join the final result in nqp, rather than using ~

[21:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b55667ef42

[21:16] <MasterDuke> timotimo: did i send you that profile of compiling core.c?

[21:19] *** rypervenche joined
[21:23] <lizmat> timotimo: in nqp definitely not, in some places in Raku, most notable Str.split, it could be useful

[21:24] <lizmat> but please, I was just surprised to finally realize that nqp::split does not create an nqp::list_s

[21:25] <timotimo> i was more talking about in general

[21:37] <Geth> ¦ rakudo: 4a728f2ad5 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/QuantHash.pm6

[21:37] <Geth> ¦ rakudo: Speedup some QuantHash internals a bit

[21:37] <Geth> ¦ rakudo: 

[21:37] <Geth> ¦ rakudo: - pre-size the result_s back to 0

[21:37] <Geth> ¦ rakudo: - use push_s to set up the result, so we don't need an index or bindpos_s

[21:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4a728f2ad5

[22:11] * lizmat is off for some sleep&

[22:27] *** sena_kun joined
[22:29] *** Altai-man_ left
[23:34] *** Kaiepi left
[23:35] *** Kaiepi joined
[23:39] *** tyilanmenyn joined
[23:39] *** tyil left
[23:39] *** tyilanmenyn is now known as tyil

