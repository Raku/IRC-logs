[00:22] *** hungrydonkey joined
[00:31] *** patrickz joined
[00:34] *** patrickb left
[00:39] *** Xliff left
[00:42] *** patrickz left
[01:34] *** sena_kun joined
[01:36] *** Altai-man_ left
[01:59] *** entonian joined
[02:14] *** ufobat__ joined
[02:18] *** ufobat_ left
[03:04] *** cognomin_ joined
[03:07] *** cognominal left
[03:33] *** Altai-man_ joined
[03:36] *** sena_kun left
[03:57] *** hungryd88 joined
[04:00] *** hungrydonkey left
[04:56] *** MasterDuke left
[05:34] *** sena_kun joined
[05:36] *** Altai-man_ left
[07:25] *** hungryd88 left
[07:33] *** Altai-man_ joined
[07:36] *** sena_kun left
[07:45] *** hungrydonkey joined
[08:09] *** hungryd95 joined
[08:12] *** hungrydonkey left
[08:14] *** hungrydonkey joined
[08:15] *** hungryd95 left
[08:34] *** hungryd26 joined
[08:38] *** hungrydonkey left
[09:10] *** hungrydonkey joined
[09:13] *** hungryd26 left
[09:34] *** sena_kun joined
[09:36] *** Altai-man_ left
[09:39] *** hungryd98 joined
[09:40] *** hungrydonkey left
[09:57] <lizmat> vrurg: I have a patch that replaces Dummy with something more indicative

[11:00] *** MasterDuke joined
[11:03] *** dumarchie joined
[11:05] <dumarchie> Can someone merge https://github.com/rakudo/rakudo/pull/3502 if there are no objections against the changes?

[11:05] <dumarchie> I don't have the permissions to do it myself.

[11:12] <MasterDuke> dumarchie: i think we're waiting to merge a bunch of stuff until after the release (which is likely to be today or so)

[11:13] <dumarchie> Okay, I understand. But I don't understand why https://github.com/rakudo/rakudo/issues/3459 is not considered a blocker.

[11:14] <dumarchie> A colleague of mine could replicate the issue on his wife's Windows laptop.

[11:16] <dumarchie> I suspect it's a MoarVM issue, maybe compiler-dependent.

[11:17] <MasterDuke> hm. same problem with older versions of rakudo?

[11:18] <dumarchie> Not in latest Rakudo Star version 2019.03.1

[11:19] <MasterDuke> oh, or can you try rebuilding moarvm with a different compiler? e.g., `perl Configure.pl --cc=clang && make install`

[11:21] <dumarchie> I will try to install clang

[11:21] <MasterDuke> i've gotten a little confused following the issue. now you think it's not a DateTime problem, but multi-dispatch on native nums?

[11:22] <MasterDuke> can you create a small test case?

[11:23] <MasterDuke> sena_kun, lizmat: ^^^ 

[11:27] <dumarchie> The first call to `DateTime.now` in t\spec\S32-temporal\DateTime.t reliably triggers a crash on Windows 10 with MoarVM compiled with `gcc`.

[11:29] <sena_kun> ouch

[11:29] <tellable6> 2020-02-21T23:31:49Z #raku-dev <lizmat> sena_kun suggest you cherry pick https://github.com/rakudo/rakudo/commit/21aa02ba0d into the release

[11:30] <lizmat> dumarchie: I think there's a release branch already made, so merging now would not put it in the release, and I would be against cherrypicking that

[11:30] <MasterDuke> dumarchie: what kind of crash? can you run it in gdb and get a backtrace?

[11:30] <sena_kun> dumarchie, what about full build? as in, can you build and then if you DateTime.now in repl, would that crash?

[11:31] <sena_kun> 1)the release is not built yet, so we can put a blocker last minute (now); 2)I don't have any issues with merging new features, we have a stable commit to release from + I'll cherry-pick a couple of fixes;

[11:31] <lizmat> dumarchie: what doe 'use nqp; dd nqp::time_n' say ?

[11:32] <Geth> ¦ rakudo: 8ccfa87e22 | (Peter du Marchie van Voorthuysen)++ | src/core.c/Sequence.pm6

[11:32] <Geth> ¦ rakudo: Make Seq.list return the cached list if it exists

[11:32] <Geth> ¦ rakudo: 

[11:32] <Geth> ¦ rakudo: This is more efficient than returning a new List. It is also more

[11:32] <Geth> ¦ rakudo: consistent with List.list.

[11:32] <dumarchie> The problem is that DateTime.now only crashes if called at that specific point in the spectest.

[11:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8ccfa87e22

[11:32] <Geth> ¦ rakudo: d1d931a7bf | (Peter du Marchie van Voorthuysen)++ | src/core.c/Sequence.pm6

[11:32] <Geth> ¦ rakudo: Base .List and .Slip on .list

[11:32] <Geth> ¦ rakudo: 

[11:32] <Geth> ¦ rakudo: This is more efficient as .list may return a cached list.

[11:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d1d931a7bf

[11:32] <Geth> ¦ rakudo: 65cc0a8b68 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Sequence.pm6

[11:32] <Geth> ¦ rakudo: Merge pull request #3502 from dumarchie/Seq.list

[11:32] <Geth> ¦ rakudo: 

[11:32] <Geth> ¦ rakudo: Make listing and coercion of sequences more efficient

[11:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/65cc0a8b68

[11:33] <dumarchie> lizmat++

[11:33] *** Altai-man_ joined
[11:35] <dumarchie> c:\raku\rakudo\install\bin>perl6-m -e "use nqp; dd nqp::time_n"

[11:35] <dumarchie> 1582371291.8625455e0

[11:35] <lizmat> ok, so it is not with nqp::time_n per se

[11:36] <lizmat> dumarchie: can you gist the exact output of: perl6-m --ll-exception -e 'DateTime.now'

[11:36] *** sena_kun left
[11:37] <dumarchie> MasterDuke, `perl Configure.pl --cc=clang` doesn't work for me.

[11:37] <dumarchie> It can't find stdlib.h

[11:38] <dumarchie> I don't mind running the spectest in the debugger, but I have absolutely no experience with that so you'll have to guide me.

[11:39] <dumarchie> I do appear to have a working gdb

[11:39] <MasterDuke> same problem with `--compiler=clang`?

[11:40] <MasterDuke> getting the entire spectest to run in gdb won't be easy, and might not be all that helpful anyway

[11:40] <dumarchie> How do I get out of the gdb shell?

[11:40] <MasterDuke> q

[11:40] <MasterDuke> but frequently problems show up under load

[11:40] <dumarchie> Thanks :)

[11:41] <MasterDuke> if you have a spectest running at the same time, does DateTime.now by itself ever crash?

[11:41] <lizmat> I think dumarchie said that it did 

[11:42] <lizmat> ah, maybe not

[11:43] <dumarchie> DateTime.now crashes in t\spec\S32-temporal\DateTime.t, both if I ran it standalone and when I run `gmake spectest`.

[11:44] <dumarchie> Other `num` related tests only crash as part of `gmake spectest`

[11:45] <dumarchie> `perl Configure.pl --compiler=clang` also complains about not being able to find stdlib.h

[11:46] <dumarchie> I'll restart Windows to see if that makes the paths available. Back in a minute.

[11:46] <lizmat> dumarchie++

[11:46] *** dumarchie left
[11:47] <[Tux]> Rakudo version 2020.01-256-g65cc0a8b6 - MoarVM version 2020.01.1-45-g926349cde

[11:47] <[Tux]> csv-test-xs-20      0.357 -  0.361

[11:47] <[Tux]> csv-ip5xs           0.757 -  0.770

[11:47] <[Tux]> test-t --race       0.805 -  0.877

[11:47] <[Tux]> test-t              1.835 -  1.835

[11:47] <[Tux]> csv-ip5xs-20        5.814 -  6.313

[11:47] <[Tux]> test                7.341 -  7.393

[11:47] <[Tux]> test-t-20 --race    9.138 - 10.318

[11:47] <[Tux]> csv-parser         23.286 - 23.499

[11:47] <[Tux]> test-t-20          30.927 - 31.605

[11:48] *** dumarchie joined
[11:49] <lizmat> fwiw, have run the S32-temporal/DateTime.t 100x, no fail whatsoever

[11:50] <dumarchie> That's on Linux/Mac I suppose?

[11:50] <lizmat> Mac yes

[11:50] <dumarchie> Yeah, I think it's really a Windows floating point issue.

[11:50] <lizmat> thought I'd run the test in a loop, just in case it was some timing issue that was more likely to show up on Win

[11:51] <dumarchie> I actually tried different compilation options for MoarVM.

[11:51] <dumarchie> `CFLAGS=-mstackrealign` did not make a difference.

[11:52] <MasterDuke> what i'd suggest now is running it under gdb and seeing if you can get a backtrace

[11:52] <dumarchie> Neither did options `--no-optimize` and `--no-jit`

[11:52] <MasterDuke> i.e., something like `gdb --args ./perl6-m -I lib t\spec\S32-temporal\DateTime.t`

[11:53] <MasterDuke> then when gdb starts, `run` in the shell to start the perl6 process. then if/when it crashes, `bt` to get a backtrace

[11:54] <lizmat> dumarchie: if you change the "nqp::time_n" in DateTime.now  to just "now", could you see if that makes a difference ?

[11:54] <MasterDuke> oh, but you should build MoarVM with `--debug=3`

[11:55] <dumarchie> Well, I got something already:

[11:55] <dumarchie> Thread 1 received signal SIGSEGV, Segmentation fault.

[11:55] <dumarchie> 0x0000000069bc3cd6 in MVM_args_get_required_pos_num () from c:\raku\rakudo\install\bin\moar.dll

[11:56] <lizmat> yeah, so it looks like a dispatch issue...

[11:56] <lizmat> well, argument binding

[11:56] <lizmat> dumarchie: could you try the s/nqp::time_n/now/ change in DateTime.now ?

[11:58] <dumarchie> That will require a lengthy rebuild. I already determined that boxing time_n avoids the crash.

[11:58] <lizmat> ok, so what is the patch that you used for that ?

[11:59] <dumarchie> https://github.com/rakudo/rakudo/pull/3463

[12:00] <dumarchie> Masterduke: (gdb) bt

[12:00] <dumarchie> #0  0x0000000069bc3cd6 in MVM_args_get_required_pos_num () from c:\raku\rakudo\install\bin\moar.dll

[12:00] <dumarchie> #1  0x000000000ffe34f5 in ?? ()

[12:00] <dumarchie> Backtrace stopped: previous frame inner to this frame (corrupt stack?)

[12:01] <dumarchie> So maybe this is a stack alignment issue?

[12:02] <dumarchie> Windows 4-byte alignment versus floating point 16-byte alignment or something like that?

[12:02] <Geth> ¦ rakudo: 65ef7db198 | (Elizabeth Mattijsen)++ | src/core.c/DateTime.pm6

[12:02] <Geth> ¦ rakudo: Temporary fix for R#3459

[12:02] <Geth> ¦ rakudo: 

[12:02] <Geth> ¦ rakudo: So we have a whole release to find out what the exact source of the

[12:02] <Geth> ¦ rakudo: problem is on Windows.

[12:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/65ef7db198

[12:02] <linkable6> R#3459 [open]: https://github.com/rakudo/rakudo/issues/3459 [BLOCKER] Issue with native num on Windows

[12:03] <lizmat> Altai-man_ ^^  suggest cherry-picking that, so we fix the 2020.02 release

[12:03] <lizmat> and work on what is going on without the pressure of a release

[12:03] <Altai-man_> lizmat, can't disagree. Thanks.

[12:04] <dumarchie> It only fixes the DateTime.now issue. Other num-related tests still fail under the stress of `gmake spectest`.

[12:04] <lizmat> dumarchie: ah..   :-(   which ones ?

[12:05] <dumarchie> t\spec\S02-types\num.rakudo.moar quite reliably fails when run as part of `gmake spectest`

[12:06] <dumarchie> ...but not when run standalone

[12:06] <lizmat> any idea which test fail / where it crashes ?

[12:06] <MasterDuke> dumarchie: did you rebuild moarvm with --debug=3?

[12:07] <dumarchie> No, I will do that now.

[12:07] <MasterDuke> dumarchie: and does t\spec\S02-types\num.rakudo.moar fail when run byitself if there's a spectest running in the background (to create load)

[12:08] <dumarchie> I can try that after rebuilding MoarVM

[12:08] <MasterDuke> and i don't know anything about stack alignments, etc. might need to get jnthn, timotimo, nine, brrt to help out

[12:16] <dumarchie> With --debug=3 the output of `bt` does not change.

[12:21] <dumarchie> I ran t\spec\S02-types\num.rakudo.moar a number of times by itself while running `gmake spectest`.

[12:22] <dumarchie> By itself it never failed, but it did fail in `gmake spectest`.

[12:25] <MasterDuke> hm, no line numbers in the backtrace now?

[12:28] <dumarchie> No line numbers

[12:28] <MasterDuke> huh

[12:28] <MasterDuke> afk for a bit &

[12:36] *** Ven`` joined
[12:50] <dumarchie> In interp.c, OP(captureposarg_n), what's the point of `.arg.n64`?

[12:51] <dumarchie> It does not have an equivalent in OP(captureposarg_i) or OP(captureposarg_s)

[12:57] <lizmat> jnthn nine timo brrt ^^

[12:57] <MasterDuke> dumarchie: interesting...does removing it change anything for you?

[13:01] <dumarchie> I can try

[13:03] <MasterDuke> oh, and what about disabling the jit when running? e.g., `MVM_JIT_DISABLE=1 gmake m-spectest`

[13:03] <nine> Just removing it will only give you a compiler error

[13:03] <nine> But....it's unnecesary for sure. Give me a sec

[13:05] <dumarchie> compiling src\core\interp.o

[13:05] <nine> dumarchie: please try with this patch applied: https://gist.github.com/niner/be4b8b5b77fd9d8349f16ae9bc413137

[13:05] <MasterDuke> nine: heh, was just looking at that exact same code

[13:07] <nine> Looks like someone went through all the trouble to split off MVM_args_get_required_pos_num from MVM_args_get_pos_num but forgot to actually cash in on the benefits :)

[13:07] <dumarchie> Even with both `.arg.n64` instances removed compilation fails.

[13:08] <dumarchie> src\core\interp.c: In function 'MVM_interp_run':

[13:08] <dumarchie> src\core\interp.c:1079:40: error: incompatible types when assigning to type 'MVMnum64' {aka 'double'} from type 'MVMArgInfo' {aka 'struct MVMArgInfo'}

[13:08] <nine> dumarchie: please try my patch

[13:09] <dumarchie>                  GET_REG(cur_op, 0).n64 = MVM_args_get_required_pos_num(tc, &tc->cur_frame->params,

[13:09] <MasterDuke> nine: looks like i'm the guilty one

[13:09] <dumarchie>                                         ^

[13:10] <nine> dumarchie: please try my patch.

[13:10] <nine> https://gist.github.com/niner/be4b8b5b77fd9d8349f16ae9bc413137

[13:10] <MasterDuke> dumarchie: yeah, you can't just remove if from interp.c, but it can moved into MVM_args_get_required_pos_num, and it's return type changed (i.e., what nine++'s patch does)

[13:11] <MasterDuke> nine: https://github.com/MoarVM/MoarVM/commit/e5321a3662fe41a82dff5dca364fc45596e57397 whoops, didn't follow the example in https://github.com/MoarVM/MoarVM/commit/e4e9c042f5b4a480779a4cad825ec81c71b420cb closely enough

[13:12] <nine> MasterDuke: this also means that the JIT implementation does not match the one in interp.c. And how structs are returned is platform dependend, which would perfectly explain why it only breaks on Windows

[13:13] <MasterDuke> nine: makes sense, but why does it only show up now?

[13:13] <nine> Because we have sooo many Windows users? :)

[13:16] <nine> Though --no-jit reportedly didn't make a difference...

[13:16] <dumarchie> It didn't.

[13:16] <dumarchie> Compiling now.

[13:18] *** Kaiepi left
[13:18] <dumarchie> B.t.w. I read somewhere that 25% of users is on Windows. But apparently not many core devs :)

[13:18] <MasterDuke> nine: it looks like --no-jit is a no-op

[13:21] *** Kaiepi joined
[13:22] <dumarchie> nine: after gmake install of MoarVM with your patch (applied manually), install\bin\perl6 t\spec\S32-temporal\DateTime.t still crashes at the same point

[13:23] <dumarchie> I'll run the complete spectest to see if something else improved

[13:23] <MasterDuke> nine: well, maybe it isn't a no-op. if i build normally (without it) i don't see any reference, but if i do add it it looks like something changes

[13:25] <timotimo> c: releases my $a = { a => $++ } xx 3; say $a[0] ~~ Code

[13:26] <committable6> timotimo, ¦releases (41 commits): «True␤»

[13:26] <timotimo> is the anonymous state variable interpreted the same way $_ would be to cause this to become a block?

[13:27] <dumarchie> nine: t\spec\S02-types\num.rakudo.moar still crashes when run as part of the spectest

[13:29] <MasterDuke> huh, that seemed like it might be a fix...

[13:29] <dumarchie> Afk for lunch

[13:34] *** sena_kun joined
[13:36] *** Altai-man_ left
[13:37] <MasterDuke> oh, isn't there a way to run a verbose spectest? that way we could at least see how far into t\spec\S02-types\num.rakudo.moar it gets before crashing

[13:38] <nine> I'd just run it with raku -Ilib t\spec\S02-types\num.rakudo.moar

[13:39] <MasterDuke> but dumarchie says there aren't any errors when run directly, even with a spectest running in the background

[13:39] <MasterDuke> dumarchie: could you try another spectest setting TEST_VERBOSE=1 ?

[13:40] <nine> dumarchie: have you tried running with MVM_JIT_DISABLE=1 and/or MVM_SPESH_DISABLE=1?

[13:48] *** Ven`` left
[14:04] <lizmat> afk for a few hours&

[14:16] <dumarchie> With TEST_VERBOSE=1 there's no output at all ... at least not while running.

[14:20] <dumarchie> Same with the other options. I'll first restore MoarVM and restart Windows.

[14:20] *** japhb left
[14:26] <dumarchie> Btw I always get the following warnings when compiling MoarVM: https://gist.github.com/dumarchie/8774529617297bcb83b99aae212ec6f2

[14:27] <dumarchie> Apart from the many -Wformat* warnings.

[14:31] *** dumarchie left
[14:33] *** dumarchie joined
[14:40] <dumarchie> Setting TEST_VERBOSE=1 has no effect. But the summary is always the same:

[14:40] <dumarchie> t\spec\S02-types\num.rakudo.moar                                (Wstat: 1280 Tests: 79 Failed: 0)

[14:40] <dumarchie>   Non-zero exit status: 5

[14:40] <dumarchie>   Parse errors: Bad plan.  You planned 108 tests but ran 79.

[14:41] <lucs> I really hate "pat-on-the-back" tests.

[14:42] <lucs> Test suites that go "OK, OK, OK, ..., (200 lines late), OK, not OK, OK, OK...

[14:42] <lucs> I don't care about the OKs, and when I get a "not OK", give me details!

[14:44] <lucs> </end-of-rant>

[14:44] <lucs> "later

[14:44] <lucs> Grrr!

[14:44] <lucs> *later

[14:45] <dumarchie> Setting MVM_JIT_DISABLE=1 and MVM_SPESH_DISABLE=1 does have an effect!

[14:45] <dumarchie> t\spec\S02-types\num.rakudo.moar now passes when run as part of `gmake spectest`

[14:47] <MasterDuke> can you try with just MVM_JIT_DISABLE=1 ?

[14:47] <MasterDuke> and btw, when you run a spectest, does it show you the command it's running? something like `'/usr/bin/perl' -I'/home/dan/Source/perl6/rakudo/tools/lib' -I'/home/dan/Source/perl6/rakudo/3rdparty/nqp-configure/lib' t/harness5 --moar --fudge --keep-exit-code --tests-from-file=t/spec/spectest.data`

[14:47] <dumarchie> I will, when the current test run finishes. That takes a while on 4 just CPUs.

[14:48] <MasterDuke> k, thanks

[14:49] <MasterDuke> if so, can you try the command manually, but adding `--verbosity=1` ? it still doesn't seem to show everything, but maybe it'll give more info on failure

[14:50] <dumarchie> But t\spec\S02-types\num.rakudo.moar doesn't crash if I run it stand-alone...

[14:52] <nine> dumarchie: you could try MVM_SPESH_BLOCKING=1 to make it crash reliably

[14:58] <MasterDuke> the command for the whole spectest, but with that added --verbosity=1

[15:02] <MasterDuke> and maybe MVM_SPESH_NODELAY=1 might help make things crash even outside a spectest

[15:03] <dumarchie> Outside a spectest and with MVM_SPESH_BLOCKING=1 the output stops at:

[15:03] <dumarchie> ok 79 - infix:<**>(num, num)

[15:03] <MasterDuke> ooo, that's promising

[15:06] <dumarchie>         is-approx log(my num $ =  42e0), my num $ = 3.74e0, '42',

[15:06] <MasterDuke> that crashes?

[15:06] <dumarchie> Yes

[15:06] <MasterDuke> can you run that in gdb?

[15:09] <dumarchie> Thread 1 received signal SIGSEGV, Segmentation fault.

[15:09] <dumarchie> (corrupt stack?)

[15:10] <dumarchie> Very similar to the backtrace for DateTime.now

[15:10] <MasterDuke> m: use Test; is-approx log(my num $ =  42e0), my num $ = 3.74e0

[15:10] <evalable6> MasterDuke, rakudo-moar 65ef7db19: OUTPUT: «(exit code 1) not ok 1 - ␤# Failed test at /tmp…»

[15:10] <evalable6> MasterDuke, Full output: https://gist.github.com/401644a53bcd22a254cc29390f1b37ba

[15:12] *** hungryd98 left
[15:13] <MasterDuke> huh

[15:13] <dumarchie> That falls within the :abs-tol(.01)

[15:14] <dumarchie> m: use Test; is-approx log(my num $ =  42e0), my num $ = 3.74e0, :abs-tol(.01)

[15:14] <evalable6> dumarchie, rakudo-moar 65ef7db19: OUTPUT: «ok 1 - ␤»

[15:14] <MasterDuke> oh, ha. didn't see that and got really confused

[15:14] <dumarchie> :)

[15:16] <MasterDuke> so the backtrace still points to MVM_args_get_required_pos_num?

[15:19] <dumarchie> Yes, but note that I reverted the changes to MoarVM as they did not appear to have an effect on DateTime.now.

[15:19] <dumarchie> With MVM_JIT_DISABLE=1 and MVM_SPESH_DISABLE=1 enabled the only spectest that exits early is t\spec\S02-literals\radix.rakudo.moar

[15:20] <MasterDuke> well, that change is required, the previous state was definitely wrong. if fact nine just pushed it the moarvm master a little while ago

[15:21] <MasterDuke> btw, mind trying something i randomly found on stackoverflow?

[15:21] <dumarchie> Okay, I'll rebuild the whole of rakudo first.

[15:21] <MasterDuke> in gdb, after it crashes: set $pc = *(void **)$rsp; set $rsp = $rsp + 8

[15:22] <MasterDuke> then see if bt shows anything different

[15:31] <dumarchie> I'll try that when I've build everything from scratch.

[15:31] <dumarchie> Currently compiling MoarVM.

[15:31] <MasterDuke> you shouldn't have to rebuild nqp/rakudo

[15:33] <dumarchie> I shouldn't ... but I rather to make sure there is no lingering cruft.

[15:33] *** Altai-man_ joined
[15:36] *** sena_kun left
[15:46] *** lucasb joined
[15:53] <dumarchie> First runniing `gmake spectest` with just MVM_JIT_DISABLE=1

[15:56] <dumarchie> t\spec\S02-types\num.rakudo.moar doesn't crash, so it looks like a JIT issue

[16:01] <MasterDuke> ah, that's good to know

[16:01] <dumarchie> MasterDuke:

[16:01] <MasterDuke> how about just MVM_JIT_EXPR_DISABLE=1 ?

[16:02] <dumarchie> (gdb) set $pc = *(void **)$rsp

[16:04] <dumarchie> I'll try `gmake spectest` with just MVM_JIT_EXPR_DISABLE=1 when the current test run is finished.

[16:04] <MasterDuke> you tried those two commands in gdb?

[16:05] <dumarchie> Yes, after the crash in `gdb --args install\bin\raku t\spec\S02-types\num.rakudo.moar`

[16:06] <MasterDuke> did the backtrace look any different?

[16:08] <dumarchie> There was less information for #0 and no #1

[16:08] <dumarchie> Otherwise not

[16:09] <MasterDuke> oh well, that was a stab in the dark anyway

[16:09] <nine> dumarchie: are you running current MoarVM git master including my commit dd20883c34f69c607d7741935d5284983d5f499a?

[16:10] <dumarchie> c:\raku\rakudo\nqp\MoarVM>git status

[16:10] <nine> git describe should read 2020.01.1-47-gdd20883c3

[16:12] <dumarchie> c:\raku\rakudo\nqp\MoarVM>git describe

[16:12] <dumarchie> Why, I did a completely fresh checkout and build of rakudo?

[16:13] <MasterDuke> are you using --gen-nqp?

[16:13] <nine> You did that before I pushed the commit

[16:14] <dumarchie> I always use `perl Configure.pl --gen-moar --gen-nqp --backends=moar`

[16:14] <MasterDuke> you probably want `--gen-nqp=master --gen-moar=master` in this case, to pull in the most recent changes to moarvm

[16:14] <nine> just cd nqp/MoarVM && git pull && make install

[16:14] <MasterDuke> or you could probably just git pull in moarvm

[16:15] <dumarchie> Okay, when `gmake spectest` has finished I'll do `git pull` and `make install` 

[16:17] <dumarchie> Shall I then first run `gmake spectest` without any MVM_* variables set, or with just MVM_JIT_EXPR_DISABLE=1 ?

[16:19] <nine> try without please

[16:20] <MasterDuke> fyi, for moarvm only, make -j4 should be a little faster

[16:21] <dumarchie> Okay, I'll interrupt the current test run which appears to hang at t\spec\S17-supply\classify.t

[16:22] <dumarchie> Hang HARD, co Ctrl-C doesn't even work ... this maybe a Windows thing.

[16:23] <vrurg> .tell lizmat I have that patch too. Thanks! :)

[16:23] <tellable6> vrurg, I'll pass your message to lizmat

[16:24] <MasterDuke> i think rba was working on getting us some credits for windows machines for CI, hopefully we can get them running spectests, and not just the rakudo tests like we do in appveyor

[16:26] <rba> MasterDuke: We got some AWS credits. Not sure though if we can use them for Windows CI.

[16:26] <MasterDuke> maybe even just a windows vm that the core devs could log into and test on?

[16:27] <rba> MasterDuke: I think this I can arrange.

[16:27] <MasterDuke> cool

[16:27] <rba> Either on AWS or somewhere else.

[16:27] <rba> How urgent is it?

[16:29] <MasterDuke> i wouldn't say it's an emergency. but we do appear to have a release blocker only on windows

[16:29] <MasterDuke> but dumarchie is helping us now

[16:29] <MasterDuke> i'm likely going to be afk for a while

[16:34] <dumarchie> Running `gmake spectest` without any MVM_* environment variables against latest MoarVM master.

[16:35] <dumarchie> MasterDuke, note that many spectests are failing on Windows. Mostly due to *nix assumptions about the filesystem and newlines.

[16:41] <dumarchie> More than a year ago ugexe made a summary: https://github.com/perl6/roast/issues/504

[16:55] <dumarchie> nine: `gmake spectest` now hangs after t\spec\S17-supply\migrate.t

[17:02] <dumarchie> I had to kill t\spec\S17-supply\min.t and t\spec\S17-supply\minmax.t before output resumed.

[17:04] <dumarchie> And the first output was that those tests AND t\spec\S17-supply\on-demand.t returned 1 (wstat 256, 0x100)

[17:12] <dumarchie> nine: the good news is that your commit appears to have fixed the issue with `num` on Windows :)

[17:13] <dumarchie> I'll now revert the workaround for DateTime.now that lizmat applied and rerun the spectest

[17:34] *** sena_kun joined
[17:36] *** Altai-man_ left
[17:59] <Geth> ¦ rakudo: dumarchie++ created pull request #3506: Revert workaround for issue with num

[17:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3506

[18:42] <sena_kun> bisectable6, say "foo" but False eqv "foo" but False

[18:42] <bisectable6> sena_kun, On both starting points (old=2015.12 new=65ef7db) the exit code is 0 and the output is identical as well

[18:42] <bisectable6> sena_kun, Output on both points: «False␤»

[19:23] <MasterDuke> dumarchie: glad to hear that particular problem is fixed. maybe you could update ugexe's summary with the current status

[19:35] *** Altai-man_ joined
[19:36] *** sena_kun left
[20:00] *** dumarchie left
[21:05] <Geth> ¦ rakudo: 4064023cc1 | (Peter du Marchie van Voorthuysen)++ | src/core.c/DateTime.pm6

[21:05] <Geth> ¦ rakudo: Revert workaround for issue with num

[21:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4064023cc1

[21:05] <Geth> ¦ rakudo: 858a0e3237 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/DateTime.pm6

[21:05] <Geth> ¦ rakudo: Merge pull request #3506 from dumarchie/master

[21:05] <Geth> ¦ rakudo: 

[21:05] <Geth> ¦ rakudo: Revert workaround for issue with num

[21:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/858a0e3237

[21:15] <lizmat> Altai-man_  is there anything I can do now?

[21:15] <tellable6> 2020-02-22T16:23:17Z #raku-dev <vrurg> lizmat I have that patch too. Thanks! :)

[21:18] <lizmat> I cannot pack a MoarVM release...  I know samcv can

[21:19] <lizmat> Altai-man_: perhaps I should bump MoarVM anyway now?

[21:19] <Altai-man_> lizmat, I don't think there is. It has turned into an interesting situation. We have to bump moarvm to get the fix and then re-test everything to ensure we can release.

[21:19] <Altai-man_> lizmat, yes, please bump

[21:19] <lizmat> ok, will do

[21:20] <Altai-man_> lizmat, also, I saw one of your recent commits (not in release) broke PDF module, but decided to notify about it later, if you're interested, I can share it.

[21:20] <lizmat> the sooner the better

[21:21] <Altai-man_> s/later/after release stuff/

[21:21] <Altai-man_> but I guess no hurt...

[21:22] <Altai-man_> PDF – Fail, Bisected: 539e96c2629d5f7d33bb8cd9a373631d21e72cfb

[21:22] <Geth> ¦ nqp: 91da25aa02 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[21:22] <Geth> ¦ nqp: Bump MoarV<M to get native num fix

[21:22] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/91da25aa02

[21:27] <lizmat> running spectest now

[21:31] <Geth> ¦ rakudo: 271d0b4bea | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[21:31] <Geth> ¦ rakudo: Bump NQP to get native num fixes

[21:31] <Geth> ¦ rakudo: 

[21:31] <Geth> ¦ rakudo: dumarchie++ for perseverance and the golden tip, nine++ for the

[21:31] <Geth> ¦ rakudo: actual fix.

[21:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/271d0b4bea

[21:32] <lizmat> Altai-man_: probably the test in PDF is too specific...  and in I fixed one incompatibility with 3f637af9e11233074d9

[21:32] <linkable6> (2020-02-21) https://github.com/rakudo/rakudo/commit/3f637af9e1 Remove period to fix test

[21:33] <lizmat> so good chance it is already ok again after the next Blin run

[21:34] *** sena_kun joined
[21:34] *** ufobat__ left
[21:36] *** Altai-man_ left
[21:38] <sena_kun> sigh, this connection...

[21:39] <lizmat> sena_kun: in a few years, you can have Internet from the sky anywhere in the world  :-)

[21:40] <sena_kun> I am running errata tests with latest and blin. if blin is ok (which I am not sure about, but will see, maybe we're lucky), it's green light for the release.

[21:40] <[Coke]> when I have internet from the sky, then can i watch picard without it skipping? (probably not)

[21:42] <lizmat> [Coke]: you can wait for the DVD :-)

[21:44] <lizmat> so I felt lucky and locally reverted the cas -> nqp::cas fix

[21:44] <lizmat> and ran the lock async stress test again, repeatedly

[21:44] <sena_kun> *excited drums fill*

[21:45] <lizmat> alas, it failed, so this native num fix does not fix the lock::async / cas / multi-dispatch cache issue

[21:45] <sena_kun> sigh

[21:45] <lizmat> you can't kill all birds with one stone

[21:46] <sena_kun> sane enough

[21:52] <sena_kun> noooooo... restarting stresstest and hoping it's a flapper

[21:52] <jnthn> .oO( meteorites have a good record of killing a lot of birds... )

[21:54] <lizmat> true...  but that's more like deleting the repository to fix all the bugs  :-)

[21:54] <sena_kun> inb4: if you're hoping for something to be a flapper, you're The Worst™

[21:55] * lizmat also runs a stresst test

[21:56] <lizmat> .oO( that's very stressed  :-)

[21:56] <sena_kun> lizmat, I am running 6.c-errata. ok, it was a flapper...

[21:57] <sena_kun> t/spec/S14-roles/basic.rakudo.moar                          (Wstat: 256 Tests: 0 Failed: 0)

[22:01] <lizmat> sena_kun: stresstest was clean for me

[22:01] <lizmat> on master

[22:04] * sena_kun runs blin and goes afk

[22:11] <Geth> ¦ rakudo: 6354c9155a | (Elizabeth Mattijsen)++ | src/core.c/CompUnit.pm6

[22:11] <Geth> ¦ rakudo: Change the default "from" to "Raku"

[22:11] <Geth> ¦ rakudo: 

[22:11] <Geth> ¦ rakudo: This caused 1 test to break, testing specifically for "Perl6".  It

[22:11] <Geth> ¦ rakudo: appears to not interfere with any installation of modules or anything

[22:11] <Geth> ¦ rakudo: else, so I'm actually not sure what this actually means.  But shortly

[22:11] <Geth> ¦ rakudo: after a release is the right time to do this change.

[22:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6354c9155a

[22:13] <Geth> ¦ roast: 30f3b43e5f | (Elizabeth Mattijsen)++ | S22-package-format/local.t

[22:13] <Geth> ¦ roast: Fix checking of "from", because default is now "Raku"

[22:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/30f3b43e5f

[22:47] <Geth> ¦ rakudo: 8dcf652d52 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit.pm6

[22:47] <Geth> ¦ rakudo: Revert "Change the default "from" to "Raku""

[22:47] <Geth> ¦ rakudo: 

[22:47] <Geth> ¦ rakudo: This reverts commit 6354c9155ae0f6deb5722045304cd6e424460bca.

[22:47] <Geth> ¦ rakudo: 

[22:47] <Geth> ¦ rakudo: Hmmm... looks like this breaks zef, will look more in depth later

[22:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8dcf652d52

[22:47] <Geth> ¦ roast: e380549210 | (Elizabeth Mattijsen)++ | S22-package-format/local.t

[22:47] <Geth> ¦ roast: Revert "Fix checking of "from", because default is now "Raku""

[22:47] <Geth> ¦ roast: 

[22:47] <Geth> ¦ roast: This reverts commit 30f3b43e5f3dc3e7ef9b3c3256cdb18693aca913.

[22:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e380549210

[22:48] * lizmat calls it a day...

[23:33] *** cognominal joined
[23:33] *** Altai-man_ joined
[23:36] *** sena_kun left
[23:36] *** cognomin_ left
