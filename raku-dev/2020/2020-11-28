[00:55] *** Kaeipi joined
[00:56] *** Kaeipi left
[00:58] <Geth> ¦ rakudo: Leont++ created pull request #4063: Construct CUR::Distribution correctly in CU!WHICH

[00:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4063

[01:24] <Geth> ¦ roast: vrurg++ created pull request #704: Add tests for nominalizables

[01:24] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/704

[01:38] *** lucasb left
[01:44] *** leont_ left
[03:50] <Geth> ¦ rakudo: d37906d039 | (Vadim Belman)++ (committed using GitHub Web editor) | 8 files

[03:50] <Geth> ¦ rakudo: Implement metmodel transparency of nominalizables (#4058)

[03:50] <Geth> ¦ rakudo: 

[03:50] <Geth> ¦ rakudo: As a matter of fact, a nominalizable is a wrapper around a nominal or another nominalizable. As such, it makes sense to have their MOP classes transparent, similar to how their typeobjects are transparent down to the final nominal type. I.e., it means that for

[03:50] <Geth> ¦ rakudo: 

[03:50] <Geth> ¦ rakudo:     role R[::T] {

[03:50] <Geth> ¦ rakudo:         my subset RS of T;

[03:50] <Geth> ¦ rakudo:         method foo(RS() $v) {...}

[03:50] <linkable6> RAKUDO#4058 [closed]: https://github.com/rakudo/rakudo/pull/4058 [type captures] Implement metmodel transparency of nominalizables

[03:50] <Geth> ¦ rakudo: <…commit message has 14 more lines…>

[03:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d37906d039

[03:50] <Geth> ¦ roast: e6dfbaff2b | (Vadim Belman)++ | 2 files

[03:50] <Geth> ¦ roast: Add tests for nominalizables

[03:50] <Geth> ¦ roast: 

[03:50] <Geth> ¦ roast: Test for subsetting a coercion and nested coercers.

[03:50] <Geth> ¦ roast: 

[03:50] <Geth> ¦ roast: In support of rakudo/rakudo#4058

[03:50] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e6dfbaff2b

[03:51] <Geth> ¦ roast: 79bd3ecb5f | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[03:51] <Geth> ¦ roast: Merge pull request #704 from vrurg/rakudo_2446

[03:51] <Geth> ¦ roast: 

[03:51] <Geth> ¦ roast: Add tests for nominalizables

[03:51] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/79bd3ecb5f

[04:26] *** Kaiepi joined
[06:33] *** sena_kun joined
[07:14] <Geth> ¦ rakudo: 7d0813c3a0 | (Leon Timmermans)++ | src/core.c/CompUnit.pm6

[07:14] <Geth> ¦ rakudo: Construct CUR::Distribution correctly in CU!WHICH

[07:14] <Geth> ¦ rakudo: 

[07:14] <Geth> ¦ rakudo: Without this $compilation-unit.perl fails with

[07:14] <Geth> ¦ rakudo: «Too few positionals passed; expected 2 arguments but got 1»

[07:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7d0813c3a0

[07:14] <Geth> ¦ rakudo: 2a44729d61 | niner++ (committed using GitHub Web editor) | src/core.c/CompUnit.pm6

[07:14] <Geth> ¦ rakudo: Merge pull request #4063 from Leont/compunit-which

[07:14] <Geth> ¦ rakudo: 

[07:14] <Geth> ¦ rakudo: Construct CUR::Distribution correctly in CU!WHICH

[07:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2a44729d61

[08:11] *** Altai-man joined
[08:13] *** sena_kun left
[09:47] *** MasterDuke joined
[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: d0de76647f | (Stefan Seifert)++ | src/Perl6/World.nqp

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: Fix unwanted references to other compilations by CompilerServices

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: 

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: CompilerServices used several lexical variables to store often used supposedly

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: constant QAST nodes and hashes. Turns out these nodes do get modified, i.e.

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: references get added or maybe it's just that they get added to a serialization

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: context. Anyway turning them into attributes and initializing them newly for

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: every compilation fixes issues with references to outer compiler's SCs.

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: 

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: This not only affects cases where multiple comp units are precompiled in the

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: same process but also cases where multiple compilations run in parallel.

[10:27] <Geth> ¦ rakudo/fix-compiler-services-concurrency-issue: review: https://github.com/rakudo/rakudo/commit/d0de76647f

[10:28] <Geth> ¦ rakudo: niner++ created pull request #4064: Fix unwanted references to other compilations by CompilerServices

[10:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4064

[10:37] <Geth> ¦ rakudo: b58510ffc2 | (Stefan Seifert)++ | src/core.c/Process.pm6

[10:37] <Geth> ¦ rakudo: Fix RAKUDO_MODULE_DEBUG output when the message contains meta characters

[10:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b58510ffc2

[10:38] <Geth> ¦ rakudo: 3d4634199b | (Stefan Seifert)++ | src/core.c/IO/Spec/Unix.pm6

[10:38] <Geth> ¦ rakudo: Revert "[io grant] Make IO::Spec::Unix.splitdir 7.7x faster"

[10:38] <Geth> ¦ rakudo: 

[10:38] <Geth> ¦ rakudo: This reverts commit 6ca702fa3d6caff5c094a08cd016dde94d34e77d.

[10:38] <Geth> ¦ rakudo: 

[10:38] <Geth> ¦ rakudo: While faster, the commit made splitdir also return a List instead of a Seq and

[10:38] <Geth> ¦ rakudo: not just a List but always the same List object leading to action at a distance

[10:38] <Geth> ¦ rakudo: issues.

[10:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3d4634199b

[10:40] <Geth> ¦ rakudo/fix-name-of-stub-packages: aab4f55a7f | (Stefan Seifert)++ | src/core.c/Stash.pm6

[10:40] <Geth> ¦ rakudo/fix-name-of-stub-packages: Give stub packages created by package_at_key a proper longname

[10:40] <Geth> ¦ rakudo/fix-name-of-stub-packages: 

[10:40] <Geth> ¦ rakudo/fix-name-of-stub-packages: Stub packages created by simply accessing them like &Foo::Bar::note = sub { };

[10:40] <Geth> ¦ rakudo/fix-name-of-stub-packages: only got the last part of their name ("Bar"). Now they know who they really are

[10:40] <Geth> ¦ rakudo/fix-name-of-stub-packages: (Foo::Bar).

[10:40] <Geth> ¦ rakudo/fix-name-of-stub-packages: review: https://github.com/rakudo/rakudo/commit/aab4f55a7f

[10:40] <Geth> ¦ rakudo: niner++ created pull request #4065: Give stub packages created by package_at_key a proper longname

[10:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4065

[11:02] <lizmat> bisectable6: dd IO::Spec::Unix.splitdir("foo/bar").^name

[11:02] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[11:02] <bisectable6> lizmat, Output on all releases: https://gist.github.com/a18753ee998838fea8eece979b6f17d4

[11:02] <bisectable6> lizmat, bisect log: https://gist.github.com/eca76a710f104a3008a950dddbd4a7d6

[11:02] <bisectable6> lizmat, bisect log: https://gist.github.com/8650f28c7c87c88089930f4597a475d6

[11:02] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/cec541881d86ef9bcaf22647f46d2252

[11:03] <lizmat> bisectable6: old=2016.01 dd IO::Spec::Unix.splitdir("foo/bar").^name

[11:03] <bisectable6> lizmat, Bisecting by output (old=2016.01 new=3d46341) because on both starting points the exit code is 0

[11:04] <bisectable6> lizmat, bisect log: https://gist.github.com/a78f604e9a268fe7dea55c0b32662a43

[11:04] <bisectable6> lizmat, (2020-11-28) https://github.com/rakudo/rakudo/commit/3d4634199b09647b13fcd85c7eec47ea51e45244

[11:05] <AlexDaniel`> 6c: dd IO::Spec::Unix.splitdir("foo/bar").^name

[11:05] *** domidumont joined
[11:05] <AlexDaniel`> yeah, bisectable does it a bit differently… and it's wrong :)

[11:05] <committable6> AlexDaniel`, https://gist.github.com/a880397d9d0628a9cd7133cbd582aea5

[11:06] <AlexDaniel`> that is much clearer

[11:08] <Geth> ¦ rakudo: f154244c6e | (Elizabeth Mattijsen)++ | 3 files

[11:08] <Geth> ¦ rakudo: Properly fix improper use of () in p6bindattrvinres

[11:08] <Geth> ¦ rakudo: 

[11:08] <Geth> ¦ rakudo: () is *NOT* a new instance of the empty List, it *is* the empty List

[11:08] <Geth> ¦ rakudo: and should as such not be used to put things into.  The reason this

[11:08] <Geth> ¦ rakudo: wasn't spotted before, is probably because this functionality is not

[11:08] <Geth> ¦ rakudo: used an awful load in most use cases.  Spotted by Stefan Seifert++

[11:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f154244c6e

[11:08] <lizmat> *lot   *sigh*  :-)

[11:16] *** domidumont1 joined
[11:18] *** domidumont left
[11:47] <Geth> ¦ rakudo: dumarchie++ created pull request #4067: Accept Mu as cas target and values

[11:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4067

[12:12] *** sena_kun joined
[12:14] *** Altai-man left
[12:25] *** raku-bridge joined
[12:25] *** raku-bridge left
[12:25] *** raku-bridge joined
[12:27] <Geth> ¦ rakudo/fix-concurrent-heredoc-compilation: 147bae3bbc | (Stefan Seifert)++ | 2 files

[12:27] <Geth> ¦ rakudo/fix-concurrent-heredoc-compilation: Fix concurrency issue in compilations with heredocs

[12:27] <Geth> ¦ rakudo/fix-concurrent-heredoc-compilation: 

[12:27] <Geth> ¦ rakudo/fix-concurrent-heredoc-compilation: Using a lexical variable for the herestub queue could lead to all sorts of

[12:27] <Geth> ¦ rakudo/fix-concurrent-heredoc-compilation: unwanted sharing between indepenedent compilations and could lead to errors

[12:27] <Geth> ¦ rakudo/fix-concurrent-heredoc-compilation: in parallel compilations. Put it into the World instead to avoid sharing.

[12:27] <Geth> ¦ rakudo/fix-concurrent-heredoc-compilation: review: https://github.com/rakudo/rakudo/commit/147bae3bbc

[12:27] <Geth> ¦ rakudo: niner++ created pull request #4068: Fix concurrency issue in compilations with heredocs

[12:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4068

[12:29] <Geth> ¦ rakudo: d0de76647f | (Stefan Seifert)++ | src/Perl6/World.nqp

[12:29] <Geth> ¦ rakudo: Fix unwanted references to other compilations by CompilerServices

[12:29] <Geth> ¦ rakudo: 

[12:29] <Geth> ¦ rakudo: CompilerServices used several lexical variables to store often used supposedly

[12:29] <Geth> ¦ rakudo: constant QAST nodes and hashes. Turns out these nodes do get modified, i.e.

[12:29] <Geth> ¦ rakudo: references get added or maybe it's just that they get added to a serialization

[12:29] <Geth> ¦ rakudo: context. Anyway turning them into attributes and initializing them newly for

[12:29] <Geth> ¦ rakudo: every compilation fixes issues with references to outer compiler's SCs.

[12:29] <Geth> ¦ rakudo: 

[12:29] <Geth> ¦ rakudo: This not only affects cases where multiple comp units are precompiled in the

[12:29] <Geth> ¦ rakudo: same process but also cases where multiple compilations run in parallel.

[12:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d0de76647f

[12:30] <Geth> ¦ rakudo: e90ed75796 | niner++ (committed using GitHub Web editor) | src/Perl6/World.nqp

[12:30] <Geth> ¦ rakudo: Merge pull request #4064 from rakudo/fix-compiler-services-concurrency-issue

[12:30] <Geth> ¦ rakudo: 

[12:30] <Geth> ¦ rakudo: Fix unwanted references to other compilations by CompilerServices

[12:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e90ed75796

[12:41] *** leont_ joined
[13:46] *** lucasb joined
[14:05] <Geth> ¦ rakudo: Altai-man unassigned from vrurg Issue Performance regression after merge of new coercion semantics https://github.com/rakudo/rakudo/issues/4056

[14:30] <Geth> ¦ rakudo: 147bae3bbc | (Stefan Seifert)++ | 2 files

[14:30] <Geth> ¦ rakudo: Fix concurrency issue in compilations with heredocs

[14:30] <Geth> ¦ rakudo: 

[14:30] <Geth> ¦ rakudo: Using a lexical variable for the herestub queue could lead to all sorts of

[14:30] <Geth> ¦ rakudo: unwanted sharing between indepenedent compilations and could lead to errors

[14:30] <Geth> ¦ rakudo: in parallel compilations. Put it into the World instead to avoid sharing.

[14:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/147bae3bbc

[14:30] <Geth> ¦ rakudo: 22c4bb5cd7 | niner++ (committed using GitHub Web editor) | 2 files

[14:30] <Geth> ¦ rakudo: Merge pull request #4068 from rakudo/fix-concurrent-heredoc-compilation

[14:30] <Geth> ¦ rakudo: 

[14:30] <Geth> ¦ rakudo: Fix concurrency issue in compilations with heredocs

[14:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/22c4bb5cd7

[14:52] *** leont_ is now known as leont

[15:00] *** domidumont joined
[15:03] *** domidumont1 left
[15:16] *** domidumont1 joined
[15:16] *** domidumont left
[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: b46a4cacb5 | (Stefan Seifert)++ | src/how/NQPClassHOW.nqp

[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: Make mixins concurrency safe

[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: 

[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: Multiple threads creating mixins on the same type of object could step on each

[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: other's toes as the mixin cache was not protected against concurrent access.

[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: Instead of adding locks, we now use the VM's parameterization mechanism, which

[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: is already concurrency safe and used for mixins in Rakudo.

[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: 

[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: Fixes "Iteration past end of iterator" when running:

[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: raku -e '(^10000).race.map({EVAL "q[];\n"}).sink'

[15:35] <Geth> ¦ nqp/fix-multithreaded-mixins: review: https://github.com/Raku/nqp/commit/b46a4cacb5

[15:35] <Geth> ¦ nqp: niner++ created pull request #684: Make mixins concurrency safe

[15:35] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/684

[15:35] <nine> Found that when trying my heredocs concurrency fix.

[15:36] <nine> I may not have succeeded with in-process precompilation, but at least I gained a pretty solid understanding of parametrics and mixins on the way :)

[15:37] *** leont left
[15:39] *** leont joined
[15:44] <sena_kun> nine++ # nice fixes

[15:49] *** leont left
[15:49] <MasterDuke> nine: not succeeded yet? or think it's not reasonably possible?

[15:51] <nine> I've given up last Sunday. I was stuck in a perpetual circle of "fix one case, break another"

[15:51] <MasterDuke> ah

[15:52] *** leont joined
[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: 6449effe24 | (Stefan Seifert)++ | src/how/NQPClassHOW.nqp

[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: Make mixins concurrency safe

[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: 

[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: Multiple threads creating mixins on the same type of object could step on each

[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: other's toes as the mixin cache was not protected against concurrent access.

[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: Instead of adding locks, we now use the VM's parameterization mechanism, which

[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: is already concurrency safe and used for mixins in Rakudo.

[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: 

[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: Fixes "Iteration past end of iterator" when running:

[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: raku -e '(^10000).race.map({EVAL "q[];\n"}).sink'

[15:53] <Geth> ¦ nqp/fix-multithreaded-mixins: review: https://github.com/Raku/nqp/commit/6449effe24

[15:53] <nine> ^^^ same commit sans the commented code. MasterDuke++

[15:54] <MasterDuke> nine: does ^^^ fix any todos in roast? there are a lot of rakudo issues that mention EVAL and/or race/hyper

[15:55] <Geth> ¦ nqp: 630bc1d19c | (Nicholas Clark)++ | tools/templates/MOAR_REVISION

[15:55] <Geth> ¦ nqp: Bump MoarVM to get changes since 2020.11

[15:55] <Geth> ¦ nqp: 

[15:55] <Geth> ¦ nqp: This brings in these pull requests:

[15:55] <Geth> ¦ nqp: 

[15:55] <Geth> ¦ nqp: 1c7358004 Merge pull request #1350 from MoarVM/hash-single-allocation

[15:55] <Geth> ¦ nqp: f3e9e356d Merge pull request #1390 from MoarVM/exception-in-spesh-should-oops

[15:55] <Geth> ¦ nqp: bfce05394 Merge pull request #1331 from Kaiepi/lego-jit-rv

[15:55] <Geth> ¦ nqp: <…commit message has 6 more lines…>

[15:55] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/630bc1d19c

[15:55] <nine> maybe, but there are definitely issues left

[15:59] <nwc10> however, I don't have permission to push to rakudo/rakudo

[16:00] *** leont left
[16:03] *** leont joined
[16:03] <Geth> ¦ rakudo: 998cae5749 | (Peter du Marchie van Voorthuysen)++ | src/core.c/atomicops.pm6

[16:03] <Geth> ¦ rakudo: Accept Mu as cas target and values

[16:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/998cae5749

[16:03] <Geth> ¦ rakudo: 1ccfb095d1 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/atomicops.pm6

[16:03] <Geth> ¦ rakudo: Merge pull request #4067 from dumarchie/cas-target

[16:03] <Geth> ¦ rakudo: 

[16:03] <Geth> ¦ rakudo: Accept Mu as cas target and values

[16:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1ccfb095d1

[16:11] *** Altai-man joined
[16:11] <dogbert17> will lizmat do the lat piece of the bump process?

[16:11] <dogbert17> *last

[16:12] <lizmat> sure

[16:12] <dogbert17> yay

[16:12] <lizmat> just NQP I guess

[16:12] <dogbert17> yup

[16:13] *** sena_kun left
[16:14] <lizmat> building and spectesting now

[16:15] <nine> nwc10: you sure, 2020.11-71 is correct? I only get 2020.11-47 on master

[16:16] <lizmat> yeah, I saw that as well, yet NQP and Rakudo appear to build fine with that describe

[16:17] <lizmat> Previous HEAD position was 058b8377b Bump VERSION for release

[16:17] <lizmat> HEAD is now at fecfad191 Add `MVM_index_hash_allocated_size` for MVMStaticFrame's `unmanaged_size`

[16:17] <linkable6> (2020-11-21) https://github.com/MoarVM/MoarVM/commit/058b8377b7 Bump VERSION for release

[16:17] <nine> I get   Found /home/nine/rakudo/install/bin/moar version 2020.11-47-g1c7358004, which is too old. Wanted at least 2020.11-71-gfecfad191 at /home/nine/rakudo/nqp/3rdparty/nqp-configure/lib/NQP/Config.pm line 192.

[16:18] <lizmat> so, should I rebump NQP ?

[16:18] <nine> please

[16:19] <lizmat> oki

[16:20] <lizmat> hmmm....  my NQP now says:

[16:20] <lizmat>   No --prefix supplied, building and installing to /Users/liz/Github/nqp/install

[16:20] <lizmat> Found /Users/liz/Github/nqp/install/bin/moar version 2020.11-71-gfecfad191, which is new enough.

[16:20] <nine> ???

[16:21] <nine> But, there are only 47 commits between 2020.11 and master in MoarVM?

[16:21] <lizmat> maybe a too-high a value will just use HEAD ?

[16:22] <lizmat> still rebump NQP ?

[16:23] <dogbert17> could the difference somehow be connectet to: MoarVM/hash-bits-in-metadata: 24 commits pushed by (Nicholas Clark)++ 

[16:23] <nine> I don't understand this

[16:24] <lizmat> those commits are not listed in the list of PRs merged

[16:24] <lizmat> in the NQP commit

[16:24] <lizmat> but I guess they were in nwc10's checkout

[16:24] <[Tux]> Err, not good

[16:24] <[Tux]> sh: line 1: 28112 Segmentation fault      (core dumped) raku -Ilib csv-parser.pl < empty.csv 2> /dev/null

[16:25] <lizmat> I'll bump NQP back

[16:25] <[Tux]> and the last warning I see:

[16:25] <[Tux]> 3rdparty/libuv/src/unix/linux-core.c:381:10: warning: ‘user_timeout’ may be used                                                                                                                         uninitialized in this function [-Wmaybe-uninitialized]                                                                                                                                                 

[16:25] <[Tux]>        if (timeout == 0)                                                                                                                                                        

[16:25] <[Tux]>           ^                                                                                 

[16:25] <Geth> ¦ nqp: 87ee9469d7 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[16:25] <Geth> ¦ nqp: Correctly bump MoarVM

[16:25] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/87ee9469d7

[16:25] <[Tux]> src/core/interp.c:3318:36: warning: variable ‘coderef’ might be clobbered by ‘lo                                                                                                                        ngjmp’ or ‘vfork’ [-Wclobbered]                                                                                                                                                                         

[16:25] <[Tux]>                          MVMObject *coderef;                                                                                                                                                            

[16:25] <[Tux]>                                     ^~~~~~~

[16:26] <[Tux]> Unhandled exception in code scheduled on thread 4

[16:26] <[Tux]> Unhandled exception in code scheduled on thread 7

[16:26] <[Tux]> This type (Int) does not support positional operations

[16:26] <[Tux]> all kinds of everything

[16:27] <lizmat> yeah, that feels... wrong

[16:27] <[Tux]> 3rdparty/libuv/src/unix/process.c:144:7: warning: implicit declaration of functi                                                                                                                        on ‘pipe2’; did you mean ‘pipe’? [-Wimplicit-function-declaration]                                                                                                                                      

[16:27] <[Tux]>    if (pipe2(fds, flags | O_CLOEXEC))                                                                                                                                                                   

[16:27] <[Tux]>        ^~~~~                                                                                                                    

[16:27] <[Tux]>        pipe                                                                          

[16:27] <[Tux]> I'll skip this timing then

[16:27] <lizmat> yeah, gimme 10 mins or so

[16:28] <[Tux]> ok, I'll see if I remember to try again :)

[16:29] * lizmat nukes install dir to be sure

[16:33] <dogbert17> nine: have you managed to get hold of a new Ryzen CPU yet? They seem to be in short supply.

[16:34] <nine> No, I guess it'll take another month

[16:35] <dogbert17> have you decided on which parts you'll get, i.e. MB, cpu-model etc?

[16:35] <Geth> ¦ rakudo: 1b26983199 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[16:35] <Geth> ¦ rakudo: Bump NQP to get latest MoarVM goodies

[16:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1b26983199

[16:36] <lizmat> [Tux]: ^^

[16:36] <lizmat> afk for dinner&

[16:36] <nine> I'll go for the 5950X, but don't know which board yet

[16:39] <dogbert17> a 16 core monster :-) your compile and spectest timings will be way down

[16:42] <nine> I figure it will have about 4 times the oomph of my 1800X

[16:42] *** travis-ci joined
[16:42] <travis-ci> NQP build passed. Elizabeth Mattijsen 'Correctly bump MoarVM'

[16:42] <travis-ci> https://travis-ci.com/Raku/nqp/builds/205041375 https://github.com/Raku/nqp/compare/630bc1d19cc0...87ee9469d717

[16:42] *** travis-ci left
[16:43] *** travis-ci joined
[16:43] <travis-ci> Rakudo build failed. niner 'Merge pull request #4064 from rakudo/fix-compiler-services-concurrency-issue

[16:43] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/746417770 https://github.com/rakudo/rakudo/compare/f154244c6e0d...e90ed7579677

[16:43] *** travis-ci left
[16:45] <dogbert17> that's a very nice improvement

[16:48] *** leont left
[16:55] <nwc10> nine: I'm confident that I goofed

[16:58] <nwc10> 2020.11-47-g1c7358004 was what I had locally, but I failed to realise that I had not ammended my local commit (properly) before pushing it

[16:58] <nwc10> as in, did `git commit --amend` but had not done `git add` before

[16:59] <nwc10> thanks for fixing this

[17:05] *** leont joined
[17:05] <lizmat> nwc10: you're welcome  :-)

[17:06] <lizmat> thank you for all those cool MoarVM improvements

[17:22] *** leont left
[17:32] *** leont joined
[17:37] <nwc10> are they cool? I have no idea if they make anything measurable.

[17:37] <nwc10> They do (I think) enable jnthn to address some concurrency issues

[17:38] <nwc10> at least, I meant, this lot, not sure if they make anything particularly measurable. The first lot did

[17:40] *** leont left
[17:40] *** leont joined
[17:52] <lizmat> :-)

[18:21] *** leont left
[18:21] *** leont_ joined
[18:36] *** Xliff joined
[18:48] <[Tux]> Rakudo v2020.11-53-g1b2698319 (v6.d) on MoarVM 2020.11-47-g1c7358004

[18:48] <[Tux]> csv-test-xs-20      0.383 -  0.383

[18:48] <[Tux]> test-t --race       0.823 -  0.842

[18:48] <[Tux]> csv-ip5xs           0.814 -  0.836

[18:48] <[Tux]> test-t              1.830 -  1.932

[18:48] <[Tux]> test                7.913 -  8.026

[18:48] <[Tux]> csv-ip5xs-20        7.695 -  8.216

[18:48] <[Tux]> test-t-20 --race    9.298 -  9.494

[18:48] <[Tux]> csv-parser         25.419 - 25.537

[18:48] <[Tux]> test-t-20          31.689 - 32.441

[18:48] <[Tux]> 👍

[18:49] *** domidumont1 left
[19:01] *** leont_ left
[19:02] *** leont_ joined
[19:05] *** leont_ left
[19:05] *** leont_ joined
[20:12] *** sena_kun joined
[20:14] *** Altai-man left
[20:45] *** patrickb joined
[21:39] <Geth> ¦ rakudo: patrickbkr++ created pull request #4071: Adapt filenames in binary release scripts

[21:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4071

[23:32] *** patrickb left
[23:42] <Geth> ¦ rakudo: vrurg self-assigned Performance regression after merge of new coercion semantics https://github.com/rakudo/rakudo/issues/4056

[23:54] *** sena_kun left
[23:54] *** sena_kun joined
[23:58] *** sena_kun left
