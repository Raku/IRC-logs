[00:03] <Geth> Â¦ roast: de0ec138d7 | (Vadim Belman)++ | integration/advent2010-day03.t

[00:03] <Geth> Â¦ roast: Make sure that test current directory is roast root

[00:03] <Geth> Â¦ roast: 

[00:03] <Geth> Â¦ roast: Because it is testing against some roast-specific files.

[00:03] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/de0ec138d7

[00:28] <Geth> Â¦ rakudo: vrurg++ created pull request #3696: Update INSTALL.txt for the latest changes

[00:28] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3696

[01:04] *** AshlyeGraam joined
[01:06] *** AshlyeGraam left
[01:13] <[Coke]> vrurg++ - keep install.txt simple

[06:46] <[Tux]> MasterDuke, not really (for smokes):

[06:46] <[Tux]> Rakudo version 2020.05.1-121-gadfa192bc - MoarVM version 2020.05-12-g3605efdbf

[06:46] <[Tux]> csv-test-xs-20      0.417 -  0.430

[06:46] <[Tux]> csv-ip5xs           0.837 -  0.863

[06:46] <[Tux]> test-t --race       0.867 -  0.944

[06:46] <[Tux]> test-t              1.956 -  2.000

[06:46] <[Tux]> test                7.749 -  8.045

[06:46] <[Tux]> csv-ip5xs-20        8.600 -  8.833

[06:46] <[Tux]> test-t-20 --race    9.379 -  9.988

[06:46] <[Tux]> csv-parser         26.171 - 28.634

[06:46] <[Tux]> test-t-20          32.372 - 33.595

[06:47] <[Tux]> booting, absolutely; starting desktop, sure!

[07:19] <[Tux]> maybe this is good: it shows my tests are pure computing speeds independant of the disk speed

[08:25] *** sena_kun joined
[08:47] <tyil> weekly: https://best-friends.chat/@nvsr/104177209614718661

[08:47] <notable6> tyil, Noted! (weekly)

[08:55] *** domidumont joined
[09:57] <Geth> Â¦ problem-solving: lizmat assigned to jnthn Issue Gist type objects as `(Foo:U)` rather than `(Foo)` https://github.com/Raku/problem-solving/issues/194

[10:03] *** domidumont left
[10:25] *** Altai-man_ joined
[10:28] *** sena_kun left
[11:26] *** jjmerelo joined
[11:42] *** hankache joined
[11:42] <hankache> Hello *

[11:44] <jjmerelo> Hey!

[11:46] <hankache> The RC for Rakudo Star 2020.05.1 on Windows is available at https://hankache.com/files would you be kind enough to test it and report possible issues? I was having trouble setting permissions and one specific file "repo.lock" kept me from installing modules. I figure out a way to adjust permission for said file at install time. Nonetheless if you can test it thoroughly it would be awesome. Thanks

[11:47] <hankache> hi jjmerelo

[12:02] *** hankache left
[12:18] <Geth> Â¦ nqp: 1e3ecca5d6 | (Tom Browder)++ (committed using GitHub Web editor) | docs/release_guide.pod

[12:18] <Geth> Â¦ nqp: perl -> raku

[12:18] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/1e3ecca5d6

[12:26] *** sena_kun joined
[12:28] *** Altai-man_ left
[12:31] *** domidumont joined
[13:00] *** bazzaar joined
[13:30] *** travis-ci joined
[13:30] <travis-ci> NQP build passed. Patrick BÃ¶ker 'Document `--relocatable` flag

[13:30] <travis-ci> https://travis-ci.com/tbrowder/nqp/builds/166519486 https://github.com/tbrowder/nqp/compare/09bf927e6104...4da1580a6d50

[13:30] *** travis-ci left
[13:41] *** domidumont left
[14:11] <tbrowder> don't know why my fork is being announced!

[14:25] *** Altai-man_ joined
[14:28] *** sena_kun left
[15:12] <Geth> Â¦ nqp-configure: Prince213++ created pull request #21: Use the 'Microsoft' keyword to detect nmake.

[15:12] <Geth> Â¦ nqp-configure: review: https://github.com/Raku/nqp-configure/pull/21

[16:26] *** sena_kun joined
[16:28] *** Altai-man_ left
[16:45] *** bazzaar left
[17:17] <Geth> Â¦ rakudo: a56e62de52 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.pm6

[17:17] <Geth> Â¦ rakudo: Enhance R:I.NORMALIZE_ENCODING

[17:17] <Geth> Â¦ rakudo: 

[17:17] <Geth> Â¦ rakudo: Now also takes a type object to indicate 'utf8' encoding.  This is

[17:17] <Geth> Â¦ rakudo: handy when an :$enc parameter is not initialized to a default.  This

[17:17] <Geth> Â¦ rakudo: should also allow passing around $encoding values as is, without needing

[17:17] <Geth> Â¦ rakudo: to provide a default vaklue everywhere.

[17:17] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a56e62de52

[17:17] <Geth> Â¦ rakudo: d03fa4b022 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[17:17] <Geth> Â¦ rakudo: Make IO::Path.slurp upto 4.7x as fast

[17:17] <Geth> Â¦ rakudo: 

[17:17] <Geth> Â¦ rakudo: - 4.7x as fast for :bin on a <4K file

[17:17] <Geth> Â¦ rakudo: - 3.8x as fast for :enc(foo) on a <4K file

[17:17] <Geth> Â¦ rakudo: - 2.8x as fast for :bin on a 2.4M file

[17:17] <Geth> Â¦ rakudo: - 0.1% faster for :enc(foo) on a 2.4M file

[17:17] <Geth> Â¦ rakudo: 

[17:17] <Geth> Â¦ rakudo: This is achieved by going full native in IO::Path.slurp *without*

[17:17] <Geth> Â¦ rakudo: creating an IO::Handle or any of the intermediate objects.  This

[17:17] <Geth> Â¦ rakudo: bypasses the costly creation of an IO::Handle object and calling

[17:17] <Geth> Â¦ rakudo: the "open" function on it.

[17:17] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d03fa4b022

[17:18] <lizmat> and the same goes for the slurp sub as well, of course  :-)

[17:20] <lizmat> and hopefully this should also help with modules that load a lot of precomped modules

[17:37] *** lichtkind joined
[17:39] <Geth> Â¦ rakudo: f3baa389d9 | (Elizabeth Mattijsen)++ | src/core.c/io_operators.pm6

[17:39] <Geth> Â¦ rakudo: Make slurp() upto 40% faster

[17:39] <Geth> Â¦ rakudo: 

[17:39] <Geth> Â¦ rakudo: For a small file with :bin, bigger files and/or with encoding will

[17:39] <Geth> Â¦ rakudo: see smaller improvements.  Achieved by adding candidates for :bin,

[17:39] <Geth> Â¦ rakudo: :enc and none, instead of slurping any nameds and passing them on.

[17:39] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f3baa389d9

[17:48] <nine> lizmat++ # this doesn't just make slurp faster but also more readable as it's clear what argument it supports and this helps with introspection in IDEs

[18:00] <Xliff> \o

[18:01] <Xliff> Restarting work on parallel compilation and .precomp locking

[18:04] *** jjmerelo left
[18:07] <Xliff> nine: So I've looked at the latest changes to the precomp stuff and think another object is needed to handle locking and file access, since PrecompilationStore::File generally only deals with IO::Handles.

[18:08] <Xliff> nine: I'm not set on the name, but something like PrecompilationStore::File::Item, which would then implement all of the file operations, including a .lock. 

[18:09] <Xliff> PrecompilationStore::File would still implement !lock() would would lock the entire store.

[18:09] <Xliff> Does this sound like a suitable train of thought to run down, or do you see problems?

[18:17] <lizmat> Would anybody complain if I would make IO::Handle.slurp not needing an .open anymore ?

[18:22] *** Xliff left
[18:25] *** Altai-man_ joined
[18:28] *** sena_kun left
[18:36] <Geth> Â¦ rakudo: c1decf2a46 | (Elizabeth Mattijsen)++ | src/core.c/IO/Handle.pm6

[18:36] <Geth> Â¦ rakudo: Improve readability of IO::Handle.slurp

[18:36] <Geth> Â¦ rakudo: 

[18:36] <Geth> Â¦ rakudo: Still doesn't make a lot of sense to me.

[18:36] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c1decf2a46

[18:45] <Geth> Â¦ rakudo: a69465a75d | (Elizabeth Mattijsen)++ | 2 files

[18:45] <Geth> Â¦ rakudo: Don't use slurp-rest in the core anymore

[18:45] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a69465a75d

[19:51] <nine> lizmat: would that make sense? What would be the difference to IO::Path.slurp?

[19:52] <lizmat> it would bypass all of the rigamerole of IO::Handle.open

[19:52] <lizmat> and it would call just that

[19:52] <nine> Xliff: I thought you were already pretty close before you stopped? Can't remember a need for shuffling around anything

[19:52] <tellable6> nine, I'll pass your message to Xliff

[19:52] <lizmat> but I've abandoned the idea

[19:53] <nine> I just learned that we can have un-opened IO::Handles and that IO::Handle has a $!path. And am confused by this

[19:54] <lizmat> yeah, it's a mess

[20:26] *** sena_kun joined
[20:28] *** Altai-man_ left
[20:53] <Geth> Â¦ rakudo: fc3e1aea7c | (Elizabeth Mattijsen)++ | src/core.c/io_operators.pm6

[20:53] <Geth> Â¦ rakudo: Make sure :bin / :enc are mandatory in sub slurp

[20:53] <Geth> Â¦ rakudo: 

[20:53] <Geth> Â¦ rakudo: Spotted by ugexe++

[20:53] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fc3e1aea7c

[20:56] <Geth> Â¦ problem-solving: vrurg assigned to jnthn Issue Use of literal named parameters syntax for multi-dispatching https://github.com/Raku/problem-solving/issues/195

[21:03] *** sena_kun left
[21:46] <Geth> Â¦ rakudo: 7571f65a43 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[21:46] <Geth> Â¦ rakudo: Make IO::Path.spurt upto 35% faster

[21:46] <Geth> Â¦ rakudo: 

[21:46] <Geth> Â¦ rakudo: For small files, larger files will see smaller improvements.

[21:46] <Geth> Â¦ rakudo: 

[21:46] <Geth> Â¦ rakudo: This is achieved by going full native in IO::Path.spurt *without*

[21:46] <Geth> Â¦ rakudo: creating an IO::Handle or any of the intermediate objects.  This

[21:46] <Geth> Â¦ rakudo: bypasses the costly creation of an IO::Handle object and calling

[21:46] <Geth> Â¦ rakudo: the "open" function on it.

[21:46] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7571f65a43

[21:47] <lizmat> and this concludes my hacking for today&

[21:52] *** ufobat__ joined
[21:56] *** ufobat_ left
[21:56] *** Kaeipi left
[21:57] *** Kaiepi joined
[22:15] *** Kaiepi left
[22:16] *** Kaiepi joined
[23:28] *** rypervenche joined
