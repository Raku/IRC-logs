[00:35] *** guifa2 left
[00:42] *** guifa2 joined
[00:51] *** guifa2 left
[01:03] *** sena_kun joined
[01:05] *** Altai-man_ left
[01:10] *** Kaiepi joined
[01:27] *** AlexDaniel joined
[01:27] *** AlexDaniel left
[01:27] *** AlexDaniel joined
[01:28] <Geth> ¦ nqp: 62b3b791d4 | Coke++ | docs/ops.markdown

[01:28] <Geth> ¦ nqp: document hllboxtype

[01:28] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/62b3b791d4

[01:30] <[Coke]> hlllist and hllhash look like they are supposed to be returning type objects, but appear to be returning instances. Is returning an instance the desired behavior?

[01:30] <[Coke]> m: use nqp; dd nqp::hllhash, nqp::hlllist

[01:30] <camelia> rakudo-moar ec50b9618: OUTPUT: «Hash element = {}␤()␤»

[01:33] <[Coke]> also: what is hllboolfor for? (compared to hllbool)

[01:33] *** cognomin_ joined
[01:37] *** cognominal left
[01:39] <Geth> ¦ nqp: 467c158b50 | Coke++ | docs/ops.markdown

[01:39] <Geth> ¦ nqp: Document hlllist, hllhash

[01:39] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/467c158b50

[01:39] <Geth> ¦ nqp: 0f8e71a07c | Coke++ | docs/ops.markdown

[01:39] <Geth> ¦ nqp: whitespace, cleanup

[01:39] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/0f8e71a07c

[01:39] <[Coke]> ^^ below 300 test failures on the ops docs test.

[01:41] <timotimo> isn't it for passing the HLL name?

[01:42] <timotimo> hllboolfor(1, "perl6") vs hllboolfor(1, "nqp") or so?

[01:48] <[Coke]> m: use nqp; dd hllboolfor(1,"nqp")

[01:48] <camelia> rakudo-moar ec50b9618: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    hllboolfor used at line 1␤␤»

[01:48] <[Coke]> m: use nqp; dd nqp::hllboolfor(1,"nqp")

[01:48] <camelia> rakudo-moar ec50b9618: OUTPUT: «(signal SEGV)»

[01:48] <[Coke]> m: use nqp; dd nqp::hllboolfor(1,"Raku")

[01:48] <camelia> rakudo-moar ec50b9618: OUTPUT: «Bool::True␤»

[01:48] <[Coke]> m: use nqp; dd nqp::hllboolfor(1,"tcl")

[01:48] <camelia> rakudo-moar ec50b9618: OUTPUT: «(signal SEGV)»

[01:49] <[Coke]> that seems bad. :)

[01:50] <[Coke]> timotimo: Do they *all* take a name? I couldn't get an arg to do anything, and they seem to work without it.

[01:50] <timotimo> no, only the one with "for", if at all

[01:51] <timotimo> but yeah, it grabs the HLL for the given string, and pulls the true or false value out of it

[01:51] <[Coke]> m: use nqp; dd nqp::hllboxtype_s, nqp::hllboxtype_i, nqp::hllboxtype_n, nqp::hlllist, nqp::hllhash, nqp::hllbool(0), nqp::hllbool(1)

[01:51] <camelia> rakudo-moar ec50b9618: OUTPUT: «Str␤Int␤Num␤()␤Hash element = {}␤Bool::False␤Bool::True␤»

[01:51] <timotimo> hlllist definitely returns a type. if not, it would have one instance that i s shared with everything

[01:52] <timotimo> m: use nqp; my $a := nqp::hlllist(); $a.push(1); say $a; my $b := nqp::hlllist(); say $b

[01:52] <camelia> rakudo-moar ec50b9618: OUTPUT: «Cannot find method 'push' on 'BOOTArray': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[01:52] <[Coke]> quirk of dd that it looks like List.new instead?

[01:52] <timotimo> m: use nqp; my $a := nqp::hlllist(); nqp::push($a, 1); say $a; my $b := nqp::hlllist(); say $b

[01:52] <camelia> rakudo-moar ec50b9618: OUTPUT: «push_o requires a concrete object (got a BOOTArray type object instead)␤  in block <unit> at <tmp> line 1␤␤»

[01:52] <timotimo> perhaps

[01:54] <Geth> ¦ nqp: d55e3b70e6 | Coke++ | docs/ops.markdown

[01:54] <Geth> ¦ nqp: fix desc for hlllist, hllhash

[01:54] <Geth> ¦ nqp: 

[01:54] <Geth> ¦ nqp: timotimo++

[01:54] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/d55e3b70e6

[03:02] *** Altai-man_ joined
[03:05] *** sena_kun left
[03:25] <AlexDaniel> sourceable6: Channel.new.send(42)

[03:25] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/ec50b96/src/core.c/Channel.pm6#L42

[04:22] *** hungrydonkey joined
[05:03] *** sena_kun joined
[05:04] *** [Coke] joined
[05:04] *** [Coke] left
[05:04] *** [Coke] joined
[05:05] *** Altai-man_ left
[05:55] *** hungrydonkey left
[06:03] *** guifa2 joined
[06:27] <nine> timotimo: I'm super happy with my Kinesis Freestyle 2. Can't imagine using a flat keyboard anymore

[06:38] *** lichtkind joined
[07:02] *** Altai-man_ joined
[07:05] *** sena_kun left
[07:06] *** hungrydonkey joined
[09:03] *** sena_kun joined
[09:05] *** Altai-man_ left
[09:20] *** MasterDuke left
[10:05] <lizmat> timotimo: :fromend sounds nice

[10:18] *** lichtkind_ joined
[10:20] *** lichtkind left
[10:24] *** squashable6 left
[10:25] *** squashable6 joined
[10:33] <timotimo> nine: i'm not sure i'd settle for anything that doesn't run qmk; there are ways to get qmk onto it, but they require adding a new controller and soldering or jumpering

[10:33] <timotimo> https://camo.githubusercontent.com/6e6076faf975c09413c82a7f2aba577a002a5051/68747470733a2f2f692e696d6775722e636f6d2f48726b47556a632e6a7067

[10:34] <nine> Of....course...even keyboards have firmware

[10:34] <timotimo> i read that the multimedia keys are actually wired up to press key combinations

[10:34] <timotimo> that's ludicrous, in that case i'd really rather have one completely without them

[10:37] <timotimo> qmk is the rockbox of keyboard firmwares :D

[10:39] <lizmat> jnthn: re re-precompilation: instead of taking a SHA of the source, maybe we could take a SHA of all signatures / pads and only precompile if those are changed?

[10:40] <lizmat> it's not like a change of text in an error message in the core really needs re-precompilation of all installed modules

[10:41] <lizmat> in response to https://www.reddit.com/r/rakulang/comments/g5kmnv/something_we_havent_stolen_from_another_language/

[10:41] <timotimo> good luck making changes that don't shuffle cuuids around :)

[10:42] <timotimo> OTOH, if we move to a concept where more stuff starts out as uncompiled and is first interpreted, things like error messages would be harmless to change

[10:42] <timotimo> like, all the exception classes

[10:44] <jnthn> lizmat: What if the string is part of a constant?

[10:44] <jnthn> Or called via BEGIN, or a trait handler, or ends up returned from an EXPORT, or...

[10:45] <lizmat> then maybe I don't fully understand the linkage between precomps  :-)

[10:47] <lizmat> I'm just saying that I know from personal experience working on some larger projects, that having to re-precomp large sets of modules becomes a pain

[10:47] <lizmat> and I see more people mentioning that online

[10:48] <lizmat> I guess one way would be to make parsing faster  :-)

[10:48] <jnthn> More of a pain that just waiting for everything to be parsed/compiled every time? :)

[10:48] <lizmat> *to deal with that

[10:48] <lizmat> well, that's the thing

[10:48] <lizmat> people get spoilt  :-)

[10:48] <timotimo> kind of makes me want to hack up a tiny patch that prints every time we find a #?line thingie

[10:48] * lizmat remembers the day when re-compiling the core meant having to re-install *all* modules

[10:48] <timotimo> so we can see which file from the core takes how long

[10:48] <jnthn> Really, compilation needs to be faster.

[10:51] <nine> Yeah, in the end, that's what will solve these issues. All the other fancy ideas are really just disctractions

[10:53] *** hungrydonkey left
[11:01] <timotimo> one way to be faster at something is to do less of the thing ;)

[11:02] *** Altai-man_ joined
[11:05] *** sena_kun left
[11:07] *** hungrydonkey joined
[11:15] <timotimo> m: my int @res; @res = (-10e0 .. 10e0)>>.sign

[11:15] <camelia> rakudo-moar ec50b9618: OUTPUT: «This type cannot unbox to a native integer: P6opaque, Num␤  in block <unit> at <tmp> line 1␤␤»

[11:15] <timotimo> m: my int @res; @res = (-10e0 .. -1e0)>>.sign

[11:15] <camelia> rakudo-moar ec50b9618: ( no output )

[11:15] <timotimo> m: my int @res; @res = (1e0 .. 10e0)>>.sign

[11:15] <camelia> rakudo-moar ec50b9618: ( no output )

[11:15] <timotimo> m: my int @res; @res = (0e0)>>.sign

[11:15] <camelia> rakudo-moar ec50b9618: OUTPUT: «This type cannot unbox to a native integer: P6opaque, Num␤  in block <unit> at <tmp> line 1␤␤»

[11:15] <timotimo> ^- i don't like this terribly much

[11:21] <lizmat> mL dd 0e0.sign

[11:21] <lizmat> m: dd 0e0.sign

[11:21] <camelia> rakudo-moar ec50b9618: OUTPUT: «0e0␤»

[11:21] <lizmat> hmmm

[11:21] <lizmat> m: dd 1e0.sign

[11:21] <camelia> rakudo-moar ec50b9618: OUTPUT: «1␤»

[11:21] <lizmat> m: dd -1e0.sign

[11:21] <camelia> rakudo-moar ec50b9618: OUTPUT: «-1␤»

[11:22] <lizmat> interesting

[11:26] <lizmat> timotimo: I'd say that 0e0.sign not being an Int is a bug

[11:26] <lizmat> m: +(0e0 cmp 0)

[11:26] <camelia> rakudo-moar ec50b9618: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "+" in expression "+(0e0 cmp 0)" in sink context (line 1)␤»

[11:26] <lizmat> m: dd +(0e0 cmp 0)

[11:26] <camelia> rakudo-moar ec50b9618: OUTPUT: «0␤»

[11:26] <lizmat> m: dd +(1e0 cmp 0)

[11:26] <camelia> rakudo-moar ec50b9618: OUTPUT: «1␤»

[11:27] <lizmat> m: dd +(-1e0 cmp 0)

[11:27] <camelia> rakudo-moar ec50b9618: OUTPUT: «-1␤»

[11:28] <lizmat> m: my $v = 0e0; $v.sign for ^100000; say now - INIT now

[11:28] <camelia> rakudo-moar ec50b9618: OUTPUT: «0.03138225␤»

[11:28] <lizmat> m: my $v = 0e0; $v.sign for ^1000000; say now - INIT now

[11:28] <camelia> rakudo-moar ec50b9618: OUTPUT: «0.0884352␤»

[11:28] <lizmat> m: my $v = 0e0; +($v cmp 0) for ^1000000; say now - INIT now

[11:28] <camelia> rakudo-moar ec50b9618: OUTPUT: «WARNINGS for <tmp>:␤2.2757␤Useless use of "+" in expression "+($v cmp 0)" in sink context (line 1)␤»

[11:29] <lizmat> hmmm

[11:29] <timotimo> the impl literally returns +self if it's neither <0 nor >0

[11:29] <timotimo> which i have to imagine is for nan and negative 0

[11:30] <lizmat> yup

[11:30] <lizmat> changing it to a hard 0 breaks one test

[11:30] <timotimo> mhm

[11:30] <lizmat> I guess that can be fixed by adding a Num.sign candidate

[11:31] <timotimo> so anything Real but not Num will always return Int 0?

[11:31] <timotimo> m: say (1+5i).sign

[11:31] <camelia> rakudo-moar ec50b9618: OUTPUT: «Cannot convert 1+5i to Real: imaginary part not zero␤  in block <unit> at <tmp> line 1␤␤»

[11:31] <timotimo> m: say (1+0i).sign

[11:31] <camelia> rakudo-moar ec50b9618: OUTPUT: «1␤»

[11:31] <timotimo> m: say (0+0i).sign

[11:31] <camelia> rakudo-moar ec50b9618: OUTPUT: «0␤»

[11:31] <timotimo> m: say (0+0i).sign.raku

[11:32] <camelia> rakudo-moar ec50b9618: OUTPUT: «0e0␤»

[11:32] <timotimo> that must go through a .Real or perhaps .Bridge somewhere

[11:32] <lizmat> the only problem with just  making it a hard 0, is the handling of NaN

[11:32] <lizmat> m: dd NaN.sign

[11:32] <camelia> rakudo-moar ec50b9618: OUTPUT: «NaN␤»

[11:33] <timotimo> then it'd also return "always int but Num if it's NaN"

[11:34] <timotimo> :|

[11:34] <timotimo> welp, i'm glad we have rats where this is not an issue i guess?

[11:35] <lizmat> m: dd (1/3).sign

[11:35] <camelia> rakudo-moar ec50b9618: OUTPUT: «1␤»

[11:35] <lizmat> m: dd (0/3).sign

[11:35] <camelia> rakudo-moar ec50b9618: OUTPUT: «0.0␤»

[11:42] *** hungrydonkey left
[12:05] *** MasterDuke joined
[12:15] <Geth> ¦ rakudo: 42a303ecf5 | (Elizabeth Mattijsen)++ | 3 files

[12:15] <Geth> ¦ rakudo: Make Real.sign always return an Int

[12:15] <Geth> ¦ rakudo: 

[12:15] <Geth> ¦ rakudo: Except when the value was NaN, in which case it will return a NaN.

[12:15] <Geth> ¦ rakudo: Added candidates for Num (to handle NaN) and Int (to make it almost

[12:15] <Geth> ¦ rakudo: 2x as fast).

[12:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/42a303ecf5

[12:15] <lizmat> timotimo ^^

[12:16] <timotimo> m: -0e0.sign.say

[12:16] <camelia> rakudo-moar ec50b9618: OUTPUT: «WARNINGS for <tmp>:␤0␤Useless use of "-" in expression "-0e0.sign.say" in sink context (line 1)␤»

[12:16] <timotimo> m:say -0e0.sign

[12:16] <evalable6> timotimo, rakudo-moar ec50b9618: OUTPUT: «-0␤»

[12:17] <timotimo> this won't stay, then?

[12:17] <lizmat> nope, should it ?

[12:17] <timotimo> not sure actually

[12:18] <lizmat> m: dd -0e0.sign

[12:18] <camelia> rakudo-moar ec50b9618: OUTPUT: «-0e0␤»

[12:18] <lizmat> I mean, Int doesn't have a representation for -0

[12:18] <timotimo> true

[12:18] <timotimo> m: say -0e0 < 0e0

[12:18] <camelia> rakudo-moar ec50b9618: OUTPUT: «False␤»

[12:18] <timotimo> m: say -0e0 == 0e0

[12:18] <lizmat> https://docs.raku.org/routine/sign  states -1 0 1 as the possible values

[12:18] <camelia> rakudo-moar ec50b9618: OUTPUT: «True␤»

[12:19] <[Coke]> m: say (-0e0).sign

[12:19] <camelia> rakudo-moar ec50b9618: OUTPUT: «-0␤»

[12:19] <lizmat> in any case, there is no test for the behaviour of -0e0.sign

[12:19] <timotimo> i'm not knowledgable enough in the intricacies of ieee floating point to make a reliable suggestion here

[12:20] <lizmat> I mean, usually you use .sign as a multiplication factor for something

[12:21] <lizmat> in any case, the commit was spectest clean

[12:21] <lizmat> as usual, my commits can be reverted 

[12:22] <timotimo> hopefully we'll coax someone out of their hidey-place to tell us if it's wrong

[12:22] <lizmat> if they are deemed to be not acceptable

[12:22] <lizmat> Oh, I'm sure my commits are being watched  :-)

[12:22] <timotimo> but who commits the watchers?

[12:25] <lizmat> well, they only need to be committed in very rare cases

[12:26] <AlexDaniel> timotimo: `say -0e0.sign` doesn't do what you think

[12:27] <timotimo> yes, but coke corrected it later on

[12:27] <AlexDaniel> although, yeah, if it returns a num then I guess it does anyway…

[12:28] <AlexDaniel> 6c: dd (-0e0).sign

[12:29] <committable6> AlexDaniel, https://gist.github.com/5fd1c1a97183a3de312b4114c11c9bd6

[12:29] <AlexDaniel> Altai-man_: ↑ something you should know about (I dunno if it's an issue or not)

[12:30] <lizmat> fwiw, I was surprised to see that .sign did not always return an Int

[12:30] <lizmat> (well, except in the case of NaN)

[12:31] <Altai-man_> AlexDaniel, will see how blin will be next weekend.

[12:32] <AlexDaniel> lizmat: what about Complex?

[12:32] <AlexDaniel> ah, it can't do that

[12:32] <AlexDaniel> interesting

[12:32] <lizmat> complex can't coerce to a Real if it has an imaginary component

[12:33] <timotimo> there is no concept of "less than" or "greater than" for complex numbers

[12:33] <timotimo> since we define sign based on comparison against 0, that doesn't

[12:37] <timotimo> m: dd NaN.sign

[12:37] <camelia> rakudo-moar 42a303ecf: OUTPUT: «NaN␤»

[12:37] <AlexDaniel> m: dd (0/0).sign

[12:37] <camelia> rakudo-moar 42a303ecf: OUTPUT: «0␤»

[12:37] <AlexDaniel> c: HEAD~10 dd (0/0).sign

[12:37] <committable6> AlexDaniel, ¦HEAD~10: «<0/0>␤»

[12:37] <AlexDaniel> c: HEAD~10,HEAD dd (0/0).sign

[12:38] <committable6> AlexDaniel, ¦HEAD~10: «<0/0>␤» ¦HEAD(42a303e): «0␤»

[12:38] <AlexDaniel> I guess that's better

[12:38] <timotimo> now that is wrong for sure

[12:38] <timotimo> the 0/0 one

[12:38] <AlexDaniel> is it?

[12:38] <timotimo> not sure if 0 is much better

[12:38] <lizmat> bisectable6: dd (0/0).sign

[12:38] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=42a303e) because on both starting points the exit code is 0

[12:38] <bisectable6> lizmat, bisect log: https://gist.github.com/348aee11da64fa40cc2636b1750995e8

[12:38] <bisectable6> lizmat, (2020-04-22) https://github.com/rakudo/rakudo/commit/42a303ecf5c36bcbc0c3a5332fd4a0719c08a417

[12:38] <AlexDaniel> I mean, 0/0 doesn't immediately explode, it's just a Rat

[12:38] <timotimo> yeah

[12:39] <timotimo> m: say 0/0 < 1; say -1 < 0/0

[12:39] <camelia> rakudo-moar 42a303ecf: OUTPUT: «False␤False␤»

[12:39] <timotimo> m: say 0/0 > 1; say -1 > 0/0

[12:39] <camelia> rakudo-moar 42a303ecf: OUTPUT: «False␤False␤»

[12:39] <AlexDaniel> hmm…

[12:39] <AlexDaniel> yeah I guess passthrough is somewhat better because it will likely explode later

[12:39] <timotimo> m: say 0/0 >= 1; say -1 >= 0/0; say 0/0 <= 1; say -1 <= 0/0

[12:39] <camelia> rakudo-moar 42a303ecf: OUTPUT: «True␤True␤True␤True␤»

[12:39] <timotimo> m: say 0/0 == 1; say 0/0 == 2

[12:39] <camelia> rakudo-moar 42a303ecf: OUTPUT: «False␤False␤»

[12:40] <AlexDaniel> or maybe it won't :D

[12:40] <timotimo> is that what you get when you define <= as "not >"?

[12:40] <AlexDaniel> freaking rats

[12:43] <AlexDaniel> lizmat: this got me thinking

[12:44] <AlexDaniel> lizmat: if the whole situation with .. and … are such a trainwreck

[12:45] <AlexDaniel> lizmat: then surely, surely, count-only logic is definitely wrong all over the place

[12:45] <AlexDaniel> first try:

[12:45] <AlexDaniel> m: say +((5..2).reverse)

[12:45] <camelia> rakudo-moar 42a303ecf: OUTPUT: «-1␤»

[12:45] <AlexDaniel> negative amount of elements?

[12:45] <lizmat> m: say +(5..2)

[12:45] <camelia> rakudo-moar 42a303ecf: OUTPUT: «0␤»

[12:46] <lizmat> m: say (5..2).reverse

[12:46] <camelia> rakudo-moar 42a303ecf: OUTPUT: «()␤»

[12:46] <lizmat> hmmm

[12:46] <AlexDaniel> s/are/is/

[12:46] <lizmat> m: say (5..2).elems

[12:46] <camelia> rakudo-moar 42a303ecf: OUTPUT: «0␤»

[12:46] <lizmat> m: say (5..2).reverse.elems

[12:46] <camelia> rakudo-moar 42a303ecf: OUTPUT: «-1␤»

[12:47] <[Coke]> so, just guessing on a lot of ops in the documentation tests. looks like we have references to if_i (and a bunch of similar ones like unless_s) - can someone point me at where those are defined? (trying to do better at catching the "non-standard" definitions and also doc them. looks like it's just a variant where we get a simple obj of that type rather than a block)

[12:47] <AlexDaniel> lizmat: at least its sum is zero…

[12:48] <lizmat> I guess the count-only n NativeIntReverse is off-by-one

[12:50] <AlexDaniel> lizmat: fwiw you don't need .reverse

[12:50] <AlexDaniel> m: say +(5..-∞)

[12:50] <camelia> rakudo-moar 42a303ecf: OUTPUT: «1␤»

[12:50] *** sena_kun joined
[12:50] <AlexDaniel> then this one is an infinite range:

[12:50] <lizmat> AlexDaniel: please file an issue  :-)

[12:50] <AlexDaniel> m: say (-∞..-∞)[^10]

[12:50] <camelia> rakudo-moar 42a303ecf: OUTPUT: «(-Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf)␤»

[12:50] <AlexDaniel> but

[12:50] <AlexDaniel> m: say +(-∞..-∞)

[12:50] <camelia> rakudo-moar 42a303ecf: OUTPUT: «NaN␤»

[12:50] <lizmat> you're saying that should be Inf ?

[12:51] <lizmat> not 2x Inf ?  :-)

[12:51] <[Coke]> (guessing) on finding the definition, that is, using some hueristics to know if an op exists in a particular backend.

[12:51] <AlexDaniel> lizmat: it should be the same as counting the elements

[12:51] *** Altai-man_ left
[12:52] <AlexDaniel> lizmat: if it keeps generating elements forever then yeah, it should probably give an Inf

[12:52] <AlexDaniel> alternatively it can hang, I don't mind

[12:53] <timotimo> when do we systematically put all special reals into all our math operators

[12:53] <timotimo> to double-check if everything looks okay

[12:53] <timotimo> ... not volunteering :P

[12:54] <AlexDaniel> lizmat: I won't be filing an issue though

[12:54] <AlexDaniel> maybe I should've made one will *all* of the bugs I found in .. ...

[12:55] * lizmat doesn't understand why looking up all of the mistakes of something should not result in an issue

[12:56] * lizmat is working on a re-implementation of ... in https://github.com/lizmat/Sequence-Generator

[12:56] <AlexDaniel> it should, yeah

[12:56] <AlexDaniel> but I don't know where to even start

[12:57] <AlexDaniel> I also don't think I'm capable of covering all of the cases

[12:57] <AlexDaniel> so somebody has to do this work anyway

[12:57] *** cognominal joined
[13:00] *** cognomin_ left
[13:02] <AlexDaniel> lizmat: thing is, pretty much any edge case I touch is weird or wrong

[13:02] <AlexDaniel> I might as well file a ticket saying “count-only gives a wrong result”

[13:02] <lizmat> "it's wrong, please fix it"

[13:03] <AlexDaniel> yeah, and you prove that it's fixed for all edge cases

[13:03] <AlexDaniel> and if you can't, then it's likely still wrong :)

[13:03] <AlexDaniel> m: .say for (0^..^0)'

[13:03] <camelia> rakudo-moar 42a303ecf: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3.say for (0^..^0)7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤»

[13:03] <AlexDaniel> m: .say for (0^..^0)

[13:03] <camelia> rakudo-moar 42a303ecf: ( no output )

[13:03] <AlexDaniel> so that thing has no elements

[13:04] <AlexDaniel> m: say +(0^..^0)

[13:04] <camelia> rakudo-moar 42a303ecf: OUTPUT: «0␤»

[13:04] <AlexDaniel> count-only is right

[13:04] <AlexDaniel> m: say ?(0^..^0)

[13:04] <camelia> rakudo-moar 42a303ecf: OUTPUT: «True␤»

[13:04] <AlexDaniel> but what is bool-only even doing here?

[13:05] <AlexDaniel> 6c: say ?(0^..^0)

[13:05] <lizmat> not the right thing ?

[13:05] <committable6> AlexDaniel, ¦6c (42 commits): «True␤»

[13:06] <AlexDaniel> does it ever give anything but True?

[13:06] <AlexDaniel> I mean, if you .reverse it, then surely it does:

[13:06] <AlexDaniel> m: say ?((0^..^0).reverse)

[13:06] <camelia> rakudo-moar 42a303ecf: OUTPUT: «False␤»

[13:17] <AlexDaniel> lizmat: R#3637 R#3639

[13:17] <linkable6> R#3637 [open]: https://github.com/rakudo/rakudo/issues/3637 [ranges] .count-only on Ranges is wrong (say +(5..-∞))

[13:17] <linkable6> R#3639 [open]: https://github.com/rakudo/rakudo/issues/3639 [ranges] .bool-only on Ranges is wrong ( ?(0^..^0) )

[13:20] <lizmat> AlexDaniel++

[13:31] <AlexDaniel> lizmat: and there goes my idea of being able to find the ticket easily :D

[13:31] <AlexDaniel> anyway, lizmat++

[13:39] <AlexDaniel> sourceable6: (0^..^0).reverse.count-only()

[13:39] <sourceable6> AlexDaniel, No idea, boss. Can you give me a Code object? Output: No such method 'count-only' for invocant of type 'Seq'␤  in block <unit> at /tmp/mdMfGPvXoe line 1␤␤

[13:39] <AlexDaniel> sourceable6: (0^..^0).iterator.count-only()

[13:39] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/42a303e/src/core.c/Rakudo/Iterator.pm6#L2017

[13:55] <lizmat> jnthn: do we assume SlippyIterator is an implementation detail or not ?

[13:56] <jnthn> Sounds like one to me

[14:00] <lizmat> then we should probably call it Rakudo::SlippyIterator

[14:03] <AlexDaniel> lizmat: what's the meaning of push-* methods in IntRange?

[14:04] <AlexDaniel> ahh I see a comment above

[14:05] <lizmat> they are part of the Iterator interface that *can* be implemented for better performance

[14:17] *** MasterDuke left
[14:22] *** AlexDaniel left
[14:35] *** MasterDuke joined
[14:39] <nine> [Coke]: not sure I understand your question. if_i for example is https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L279

[14:40] <nine> [Coke]: if_i, unless_i, if_n, ... are low level branching ops. They can't take a block as that doesn't exist anymore in the bytecode level. It takes a truth value in the form of an int, num or string and if true, jumps to the given label

[14:41] <nine> [Coke]: the label is just an offset into the bytecode

[14:43] <[Coke]> my question: where is the logic for "if_i" defined?

[14:44] <[Coke]> the doc test is complaining about if_i, but it looks like there are other variants that the doc test is *not* complaining about, want to be able to report on them more accurately (and then document them, which you've helped with there.)

[14:49] *** Altai-man_ joined
[14:51] *** sena_kun left
[15:04] *** lucasb joined
[15:32] <timotimo> m: .say for (-1, 0, 1, NaN)>>.Int

[15:32] <camelia> rakudo-moar 42a303ecf: OUTPUT: «-1␤Cannot convert NaN to Int: ␤  in block <unit> at <tmp> line 1␤␤0␤1␤»

[15:34] <timotimo> m: dd (-1, 0, 1, NaN)>>.Int

[15:34] <camelia> rakudo-moar 42a303ecf: OUTPUT: «(-1, 0, 1, Failure.new(exception => X::Numeric::CannotConvert.new(target => Int, reason => Any, source => NaN), backtrace => Backtrace.new))␤»

[15:34] <timotimo> m: dd my @foo = (-1, 0, 1, NaN)>>.Int

[15:34] <camelia> rakudo-moar 42a303ecf: OUTPUT: «Array @foo = [-1, 0, 1, Failure.new(exception => X::Numeric::CannotConvert.new(target => Int, reason => Any, source => NaN), backtrace => Backtrace.new)]␤»

[15:34] <timotimo> m: dd my int @foo = (-1, 0, 1, NaN)>>.Int

[15:34] <camelia> rakudo-moar 42a303ecf: OUTPUT: «This type cannot unbox to a native integer: P6opaque, Failure␤  in block <unit> at <tmp> line 1␤␤»

[15:46] <timotimo> m: say NaN // 1

[15:46] <camelia> rakudo-moar 42a303ecf: OUTPUT: «NaN␤»

[15:46] <timotimo> m: say NaN || 1

[15:46] <camelia> rakudo-moar 42a303ecf: OUTPUT: «NaN␤»

[15:46] <timotimo> m: say NaN min 1; say NaN max 1

[15:46] <camelia> rakudo-moar 42a303ecf: OUTPUT: «1␤NaN␤»

[16:00] *** softmoth joined
[16:07] *** AlexDaniel joined
[16:07] *** AlexDaniel left
[16:07] *** AlexDaniel joined
[16:13] <timotimo> greppable6: \>\>.*\<\<

[16:13] <greppable6> timotimo, 271 lines, 46 modules: https://gist.github.com/df7962efcc6aa42e6cd3c874092bd0a6

[16:14] <Altai-man_> .oO ( \>\>.*\<\< is a cool nickname to use )

[16:15] <timotimo> huh, the table breaks at one point in the middle

[16:16] *** scovit joined
[16:17] <scovit> timotimo: it is worring that NaN doesn't propagate

[16:18] <timotimo> yeah, i think that's generally the expectation

[16:18] <timotimo> anything that touches NaN becomes NaN

[16:19] <timotimo> scovit: do you happen to know some examples where you would hyperop some native int/num arrays together into another int/num array?

[16:22] <scovit> timotimo: you mean things like calculating the scalar product of two arrays of vectors

[16:23] <scovit> matrix-vector multiplication

[16:23] <timotimo> that'd be a cross and a reduce, right?

[16:24] <scovit> yes

[16:25] <timotimo> i'm only working with >>+<< shaped hyperops as well as a small set of >>.foo methods

[16:25] <timotimo> but if the result of a Z or X gets assigned into a native array, the lazyness will immediately be discarded / eagerly evaluated, so it could also go in there right away

[16:26] <timotimo> i kind of also want to support @bloop >>*>> |(1, 2, 4, 8) xx *

[16:26] *** lichtkind_ left
[16:26] <scovit> fourier transform comes to my mind

[16:26] <timotimo> though i have no idea if anybody will ever need something like that

[16:27] <timotimo> you'd be a fool to implement a fourier transform yourself instead of going with, for example, fftw

[16:27] <timotimo> or maybe there is a good reason

[16:27] <scovit> yep

[16:28] <scovit> on the other end, you can never predict what people will use them for

[16:29] <timotimo> true for sure

[16:29] <scovit> I think it is useful to have them fast, combined with fast reduction they can be very useful for data anlysis

[16:29] <timotimo> phew, add reduction to the mix, too, hmm

[16:31] <timotimo> i also want to support @a >>+<< @a.reverse

[16:32] <timotimo> and - stop me if that sounds terrible - grep

[16:33] <scovit> that seems more difficult since the size of grep return is not known in advance

[16:33] <timotimo> as soon as i go away from "native arrays only", there'd have to be loads of checks that whatever's coming in would behave the way i implemented it myself

[16:33] <timotimo> that's right, there'll have to be run-time size checks there

[16:34] <timotimo> m: .say for ^100.grep(*.is-prime) <<+<< ^10

[16:34] <camelia> rakudo-moar 42a303ecf: OUTPUT: «Potential difficulties:␤    Precedence of ^ is looser than method call; please parenthesize␤    at <tmp>:1␤    ------> 3.say for ^1007⏏5.grep(*.is-prime) <<+<< ^10␤»

[16:34] <timotimo> m: .say for (^100).grep(*.is-prime) <<+<< ^10

[16:34] <camelia> rakudo-moar 42a303ecf: OUTPUT: «2␤4␤7␤10␤15␤18␤23␤26␤31␤38␤»

[16:34] <timotimo> ^- another way to handle different sizes

[16:34] <Altai-man_> timotimo, sorry if I'll write some dumb thing right now, but I think you can just put up any synthetic examples which cover what you want, even not really useful, and if you can make them hella faster, then every "real world" usage will became faster as a consequence. Or I am not getting something?

[16:35] <timotimo> hmmm

[16:35] <Altai-man_> I mean, if you are making e.g. an addition in a loop faster, you don't really need a real world application of number additions, people will find ways to utilize them.

[16:35] <Altai-man_> Of course, knowing the domain helps a lot.

[16:36] <timotimo> maybe what i'm after is mostly a motivational example and/or something that'll give me a priority what to work on next

[16:36] <Altai-man_> If you know what implications from the user code may be, that's really helpful to know about, but sometimes a loop is a loop.

[16:38] <MasterDuke> https://github.com/moritz/Math-RungeKutta could use it, right?

[16:39] *** lucs is now known as pel

[16:39] <MasterDuke> looks like there are a couple other things in greppable6's results

[16:39] <timotimo> i've seen an example in there

[16:39] <timotimo> yeah most of the results are false positives, some from Q<<blah>>, Q<<blah>>

[16:40] <timotimo> and some from pod

[16:40] *** pel is now known as lucs

[16:40] <MasterDuke> pierre-vigier/Perl6-Math-Matrix, skids/perl6sum, skinkade/p6-crypt-argon2

[16:44] <timotimo> .o( linkable please? )

[16:45] <[Tux]> Rakudo version 2020.02.1-343-g42a303ecf - MoarVM version 2020.02.1-107-gab089e947

[16:45] <[Tux]> csv-test-xs-20      0.397 -  0.398

[16:45] <[Tux]> csv-ip5xs           0.880 -  0.920

[16:45] <[Tux]> test-t --race       0.825 -  1.002

[16:45] <[Tux]> test-t              1.978 -  2.013

[16:45] <[Tux]> test                7.645 -  7.947

[16:45] <[Tux]> csv-ip5xs-20        8.849 -  9.371

[16:45] <[Tux]> test-t-20 --race    9.766 - 10.149

[16:45] <[Tux]> csv-parser         24.954 - 27.082

[16:46] <[Tux]> test-t-20          32.938 - 35.455

[16:46] <[Tux]> I did not post a few days as I was struggling with a VPN that took 200% CPU where it should be 0.2%

[16:46] <nine> Wait a minute! Since when is csv-ip5xs-20 so slow?

[16:46] <[Tux]> now that that is fixed, I feel comfortable in running timings again

[16:49] <timotimo> our sub add(@a, @b){ my @sum = clone(@a); for ^@a.elems -> $row { @sum[$row] = @sum[$row] <<+>> @b[$row] }; @sum; }

[16:50] *** sena_kun joined
[16:50] <timotimo> i'm not going to catch any of that, since currently i bail out if arrays are not declared locally to be native-typed

[16:51] <[Tux]> nine, https://tux.nl/Files/20200422185137.png

[16:51] *** Altai-man_ left
[16:53] <nine> Points at version 0.47. Will have to do some testing

[16:55] <[Tux]> ping me if you want specific tests, though I am not always present

[16:57] <timotimo> MasterDuke: Sum's readme starts like "Very broken at the moment" :D

[17:00] <AlexDaniel> sena_kun: soo can you update Blin again?

[17:01] <AlexDaniel> sena_kun: so that the next run is with the recent changes

[17:01] <sena_kun> let's see...

[17:01] <timotimo> hmm. supporting `($a, $b, $c) >>+&<< ($x, $y, $z)` just to give `($a +& $x, $b +& $y, $c +& $z)`

[17:03] <sena_kun> AlexDaniel, started building of new image.

[17:22] <jdv79> nine: i've used kinesis freestyle keyboards pretty much exclusively for over a decade

[17:23] <jdv79> when i type on a non-split kbd now for a decent time i get rsi flares up but can use the split ones indefinitely without issue\

[17:25] <timotimo> do you also have the keyboard halves "tented"?

[17:26] *** thundergnat joined
[17:27] <thundergnat> timotimo: Looking for real world, in the wild uses of >>op>> ? How about http://rosettacode.org/wiki/Reduced_row_echelon_form#Raku

[17:28] *** thundergnat left
[17:32] <timotimo> ooh of course, rosettacode

[17:40] *** wildtrees joined
[17:41] *** wildtrees left
[17:42] <jdv79> timotimo: yeah, the max setting - whatever that is 

[17:43] <jdv79> maybe its 15deg?

[17:43] *** wildtrees_ joined
[17:43] <jdv79> tented with the palm ext thingees

[17:43] *** wildtrees_ left
[18:09] <timotimo> i saw there's also an accessory where you can have your keyboard halves tented 90 degrees, i.e. like the left and right walls of a cube

[18:31] *** scovit left
[18:40] *** scovit joined
[18:41] <scovit> I was looking at function https://github.com/rakudo/rakudo/blob/master/src/core.c/Num.pm6#L429 ORDER

[18:42] <scovit> sorry, this https://github.com/rakudo/rakudo/blob/master/src/core.c/Order.pm6#L5

[18:42] <scovit> is there a more immediate way to cast an integer as a Enum type?

[18:46] <AlexDaniel> m: say Order(1) # like this?

[18:46] <camelia> rakudo-moar 42a303ecf: OUTPUT: «More␤»

[18:47] <scovit> AlexDaniel, that would make it

[18:47] <scovit> like that function would just disappear

[18:48] <timotimo> you mean ORDER should go away?

[18:48] <timotimo> replaced by Order($number)?

[18:48] <scovit> Not so sure, but it can go away in many places

[18:48] <scovit> like here: https://github.com/rakudo/rakudo/blob/master/src/core.c/Num.pm6#L415

[18:48] <timotimo> i would assume it's much slower than ORDER, though

[18:48] <scovit> nqp::cmp_n seems to return 1, 0 and -1

[18:49] <scovit> timotimo, ah

[18:49] *** Altai-man_ joined
[18:49] <timotimo> m: say &ORDER

[18:49] <camelia> rakudo-moar 42a303ecf: OUTPUT: «&ORDER␤»

[18:49] <[Coke]> are you asking how to do this in NQP or Raku?

[18:49] <scovit> Coke, I'm looking at internals

[18:49] <scovit> some of them I hope are not specced

[18:49] <timotimo> m: use nqp; my int $v; for ^100_000 { $v = 0; ORDER($v); $v = 1; ORDER($v); $v = -1; ORDER($v) }; say now - ENTER now

[18:49] <camelia> rakudo-moar 42a303ecf: OUTPUT: «0.0280534␤»

[18:50] <[Coke]> (just because core does something a certain way doesn't mean it's idiomatic)

[18:50] <timotimo> m: use nqp; my int $v; for ^100_000 { $v = 0; Order($v); $v = 1; Order($v); $v = -1; Order($v) }; say now - ENTER now

[18:50] <camelia> rakudo-moar 42a303ecf: OUTPUT: «3.25035249␤»

[18:50] <timotimo> about 100x slower

[18:50] <scovit> optimization opportunity ;)

[18:51] <timotimo> s: Order(1)

[18:51] <sourceable6> timotimo, No idea, boss. Can you give me a Code object?

[18:51] <timotimo> s: Order.^lookup("CALL-ME")

[18:51] <sourceable6> timotimo, https://github.com/rakudo/rakudo/blob/42a303e/src/core.c/Enumeration.pm6#L35

[18:51] *** sena_kun left
[18:52] <timotimo> s: Order.HOW.^lookup("enum_from_value")

[18:52] <sourceable6> timotimo, No idea, boss. Can you give me a Code object? Output: No such method 'lookup' for invocant of type 'NQPClassHOW'␤  in block <unit> at /tmp/V5uL8Gp8vj line 1␤␤

[18:52] <timotimo> s: Order.HOW.^find_method("enum_from_value")

[18:52] <sourceable6> timotimo, No idea, boss. Can you give me a Code object?

[18:52] <timotimo> pff :)

[18:53] <timotimo> https://github.com/rakudo/rakudo/blob/42a303ecf5c36bcbc0c3a5332fd4a0719c08a417/src/Perl6/Metamodel/EnumHOW.nqp#L87-L96 <- scovit this is what gets called when you do Order(1)

[18:54] <scovit> I wonder if it could not be more low level

[18:56] <timotimo> that's already nqp code

[18:58] <timotimo> in theory, if we can be sure that the things in @!enum_value_list are never anything other than a Pair object, we could nqp::getattr, but the setup only runs a single time in that example code, whereas the accesses run 300_000 times

[18:59] <jnthn> I think that enum coercion might be easier to optimize after I get the dispatch re-work done...

[18:59] <timotimo> cool

[18:59] <timotimo> *punts*

[19:06] *** scovit left
[19:11] *** softmoth left
[19:11] *** softmoth joined
[19:16] <AlexDaniel> sourceable6: Order.HOW.enum_from_value

[19:16] <sourceable6> AlexDaniel, No idea, boss. Can you give me a Code object? Output: Too few positionals passed; expected 3 arguments but got 1␤  in block <unit> at /tmp/SA90oxfAtg line 1␤␤

[19:16] <AlexDaniel> huh!

[19:17] <AlexDaniel> sourceable6: Order.HOW.enum_from_value(1, 1)

[19:17] <sourceable6> AlexDaniel, No idea, boss. Can you give me a Code object?

[19:18] <AlexDaniel> weird, this time I don't know! :)

[19:31] *** patrickb joined
[19:34] *** patrickb left
[19:42] <guifa2> wo wrote the original QRegex code?  I'm trying to figure out how it's handling frugal/greedy modifies but I'm not seeing it

[19:44] <lizmat> I think that jnthn and pmichaud did most of that...  otherwise, git blame ?

[19:54] <timotimo> guifa2: are you interested in how it's compiled to bytecode to actually execute, or how the distinction between greedy and frugal gets passed through to the compiler?

[20:32] <Geth> ¦ rakudo: 50f13f032f | (Elizabeth Mattijsen)++ | 2 files

[20:32] <Geth> ¦ rakudo: Step one of SlippyIterator becoming Rakudo::SlippyIterator

[20:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/50f13f032f

[20:32] <Geth> ¦ rakudo: fa3c0dba9d | (Elizabeth Mattijsen)++ | 11 files

[20:32] <Geth> ¦ rakudo: Step 2 of SlippyIterator becoming Rakudo::SlippyIterator

[20:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fa3c0dba9d

[20:49] *** squashable6 left
[20:50] *** sena_kun joined
[20:50] *** squashable6 joined
[20:51] *** Altai-man_ left
[20:55] <Geth> ¦ roast: patrickbkr++ created pull request #636: Add tests for Windows specific Proc argument quoting

[20:55] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/636

[21:18] *** squashable6 left
[21:18] *** squashable6 joined
[21:20] *** squashable6 left
[21:21] *** squashable6 joined
[21:43] *** softmoth left
[21:44] *** softmoth joined
[21:48] *** commavir joined
[21:52] <[Coke]> in nqp-jvm, it looks like 'ifnonnull' is an opcode (it's used) but I can't see where it's defined.

[21:54] <[Coke]> ugh, is it really hardcoded in a hand rolled hash lookup table?

[22:00] <guifa2> timotimo: the latter.  in the method quant it just sets a min and max based on the original parse.  

[22:06] *** softmoth left
[22:09] <guifa2> I'm trying to code binex/objex stuff as closely to regex as possible, but I guess if I can keep grammar/actions virtually identical, rolling a naïve node code shouldn't be too bad, especially since it seems most of the optimization on regex is for caching certain stringy data (word boundaries, etc) which won't be quite as bad for binary coding

[22:34] *** cognomin_ joined
[22:37] *** cognominal left
[22:42] <Geth> ¦ nqp/master: 5 commits pushed by Coke++

[22:42] <Geth> ¦ nqp/master: d4f6e91745 | Document several atpos variants

[22:42] <Geth> ¦ nqp/master: 788f3b88f5 | fix atposref formatting/missing variant

[22:42] <Geth> ¦ nqp/master: 10ae80b333 | This opcode only one one VM

[22:42] <Geth> ¦ nqp/master: 64b852d0fd | document atposnd

[22:42] <Geth> ¦ nqp/master: fd4eb130e8 | document bindposnd bindpos2d bindpos3d

[22:42] <Geth> ¦ nqp/master: review: https://github.com/Raku/nqp/compare/d55e3b70e620...fd4eb130e8a6

[22:42] <[Coke]> down to 270 failures...

[22:49] *** Altai-man_ joined
[22:51] *** sena_kun left
[23:02] <timotimo> guifa2: it kind of looks like $backtrack can be r, f, or g

[23:03] <timotimo> or maybe it isn't

[23:05] <guifa2> Yeah I see backtrack in cursor, but not in method quant() in NFA which is where it (seems to) just go for the max number of matches

[23:07] <timotimo> OK let's see

[23:13] <timotimo> i mean the difference in quant between the f and not-f branch is quite a lot

[23:18] <guifa2> timotimo: you're in QRegex/NFA.nqp ?

[23:18] <guifa2> (I may just be looking in the wrong place — regex stuff is spread out across several files)

[23:18] <timotimo> that was the QASTRegexCompilerMAST just now

[23:18] <jnthn> The NFA doesn't concern itself with back-tracking; its role is just picking the longest prefix

[23:19] <timotimo> i'm not actually sure if frugal vs greedy is actually even nfa-business

[23:19] <timotimo> ha

[23:20] <guifa2> jnthn: thanks, so I was just looking int he wrong place

