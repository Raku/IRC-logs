[00:54] *** Altai-man_ joined
[00:57] *** sena_kun left
[01:11] *** leont left
[02:00] *** Xliff left
[02:47] *** chansen_ left
[02:50] *** chansen_ joined
[02:55] *** sena_kun joined
[02:57] *** Altai-man_ left
[04:54] *** Altai-man_ joined
[04:57] *** sena_kun left
[06:55] *** sena_kun joined
[06:57] *** Altai-man_ left
[08:51] *** camelCaser left
[08:53] *** camelCaser joined
[08:55] *** Altai-man_ joined
[08:57] *** sena_kun left
[09:10] *** MasterDuke left
[09:20] <lizmat> Files=1306, Tests=111384, 216 wallclock secs (28.69 usr  8.55 sys + 3029.13 cusr 286.43 csys = 3352.80 CPU)

[09:23] <nine> lizmat's law of spec test length: number of tests x rakudo speed ~~ 220s

[09:24] <lizmat> interesting  :-)

[09:26] <Altai-man_> lizmat, hi!

[09:27] *** leont joined
[09:27] <lizmat> Altai-man_ o/

[09:27] <lizmat> .oO( uh oh, what did I break? )

[09:27] <Altai-man_> lizmat, I know Saturday is not the best day, but can I request more playing with IO::Path.dir?

[09:27] <Altai-man_> It seems https://github.com/rakudo/rakudo/commit/484f07443ea146a49f9fd34d1a5e5fb8a969e89f breaks File::Copy module.

[09:28] <lizmat> will look at it now

[09:28] <Altai-man_> I am not sure if revert is wise, because that apparently fixed something else. :S

[09:28] <Altai-man_> Thank you!

[09:28] <lizmat> Altai-man_: the commit fixed a number of cases AlexDaniel pointed out, that weren't tested before

[09:29] <lizmat> but which now have tests, so reverting does not appear to be an option

[09:29] <Altai-man_> lizmat, https://gist.github.com/Altai-man/9f3ebc60b4dbf894c3eba49aecb584df <- is the log.

[09:32] * Altai-man_ tries it out locally

[09:36] <lizmat> the tests are using dirs in the form: ./t/foo, which now get cleaned up to t/foo

[09:38] <Altai-man_> Can we help it or?

[09:39] <lizmat> looking at it now

[09:40] <lizmat> looks like the test gets the original IO paths, not the destination IO Paths

[09:49] <lizmat> ok, I think I see what the problem is

[09:50] <lizmat> the test calls "strip-dir", which uses the uncleaned version of the dir

[09:51] *** MasterDuke joined
[09:51] <lizmat> so it *looks* like we *should* revert, as the internal cleaning of IO does *not* change the outside

[09:59] <Geth> ¬¶ roast: 7661e76fc7 | (Elizabeth Mattijsen)++ | S32-io/dir.t

[09:59] <Geth> ¬¶ roast: Revert "Add some tests for dirty dir specififications"

[09:59] <Geth> ¬¶ roast: 

[09:59] <Geth> ¬¶ roast: This reverts commit cfe16b93c634bcbbfa071211cd162bf4bda86dc2.

[09:59] <Geth> ¬¶ roast: 

[09:59] <Geth> ¬¶ roast: The associated Rakudo commit also got reverted.

[09:59] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/7661e76fc7

[09:59] <Geth> ¬¶ rakudo: e231558c46 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[09:59] <Geth> ¬¶ rakudo: Revert "Make sure we dir with a clean slate"

[09:59] <Geth> ¬¶ rakudo: 

[09:59] <Geth> ¬¶ rakudo: This reverts commit 484f07443ea146a49f9fd34d1a5e5fb8a969e89f.

[09:59] <Geth> ¬¶ rakudo: 

[09:59] <Geth> ¬¶ rakudo: Causes ecosystem breakage.  Apparently, we should *not* use a cleanedup

[09:59] <Geth> ¬¶ rakudo: representation, as that breaks expectancy of what will be returned for

[09:59] <Geth> ¬¶ rakudo: the directory entries.

[09:59] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/e231558c46

[10:00] <Altai-man_> lizmat++ # thank you!

[10:08] <lizmat> Altai-man_: hmmm... the revert broke another spectest

[10:09] <lizmat> S32-io/dir.t

[10:09] <Altai-man_> New tests or old ones?

[10:10] <Altai-man_> I am now preparing a moarvm release, so no hurry, technically we have time to fix it until evening. Not end of the world if delay, of course.

[10:11] <lizmat> hmmm... can't reproduce

[10:12] <lizmat> ah....  I guess that was a pre-revert test

[10:12] <lizmat> *phew*

[10:12] <lizmat> so all green again

[10:12] <Altai-man_> Ooh, thank goodness.

[10:16] <Altai-man_> This is probably over-cautious (can you even be so?), but I'm running Blin again with this. 7 hours is not so long and at the same time it adds some time between moarvm and rakudo releases for me to get a life.

[10:18] <Altai-man_> releasable6, status

[10:18] <releasable6> Altai-man_, Next release in ‚âà8 hours. There are no known blockers. 143 out of 304 commits logged (‚ö† 4 warnings)

[10:18] <AlexDaniel`> so we're not back to the previous behavior?

[10:18] <releasable6> Altai-man_, Details: https://gist.github.com/ca4cb4ba4317ac129069dca9f24b0658

[10:18] <Altai-man_> AlexDaniel`, you mean the one that broke another module?

[10:20] <Altai-man_> There is "Old (working)", "New (broken)", "New (fixed)" (<- after the last revert we are here), "New 2 (Broken)" (we were here just an hour ago.

[10:20] <AlexDaniel`> c: 2020.05.1,HEAD dir("/tmp/.").sort.say

[10:20] <committable6> AlexDaniel`, https://gist.github.com/183421291af54f365a08a8682a1edef0

[10:21] <AlexDaniel`> c: 2020.05.1,HEAD say dir("///").sort

[10:21] <committable6> AlexDaniel`, https://gist.github.com/e035f388a05f3a37c2cdaa5197ae0600

[10:22] * Altai-man_ stops blin

[10:24] <AlexDaniel`> technically both are valid paths, but it was working differently before‚Ä¶

[10:25] <lizmat> 484f07443ea146a49f9fd34d1a5e5fb8a969e89f changed semantics to accommodate the "dirty" paths that AlexDaniel` had found

[10:25] <lizmat> I've reverted that

[10:25] *** JJMerelo joined
[10:25] <lizmat> we need to discuss options here *after* the release

[10:26] <lizmat> the behaviour of accepting dirty paths for dir seems to be what module authors expect

[10:26] <lizmat> if they want clean dirs, they should call .cleanup themselves

[10:27] <lizmat> aka "./foo".IO.cleanup.dir

[10:27] <AlexDaniel`> why did it change?

[10:28] <lizmat> why did what change ?

[10:28] <AlexDaniel`> the behavior

[10:28] <AlexDaniel`> compared to the last release

[10:29] <lizmat> the timeline is like this, to my recollection:

[10:29] <lizmat> 1. /me makes dir a lot faster

[10:30] <lizmat> 2. blin finds it breaks IO::Glob

[10:30] <lizmat> 3. turns out the speedup was caused by dirs of / not being handled correctly

[10:30] <lizmat> 4. /me fixes that

[10:31] <lizmat> 5. AlexDaniel points out that other paths such as "///" and "foo/../bar" do not produce clean results

[10:31] <lizmat> 6. /me adds a .cleanup internally to make that clean

[10:31] <lizmat> 7 /me adds tests for that

[10:31] <lizmat> 8. 7blin finds that it breaks IO::Copy

[10:32] <lizmat> 9. /me reverts additional .cleanup call internally

[10:32] <lizmat> 10. /me reverts tests for dirty paths

[10:32] <lizmat> so we're back at 4.

[10:33] <AlexDaniel`> and we're back to (5) with me pointing out that the behavior changed compared to the last release

[10:33] <lizmat> but did it ?

[10:33] <Altai-man_> It did.

[10:33] <Altai-man_> m: dir("/tmp/.").sort.say

[10:33] <camelia> rakudo-moar e231558c4: OUTPUT: ¬´("/tmp/./.ICE-unix".IO "/tmp/./.Test-unix".IO "/tmp/./.X11-unix".IO "/tmp/./.XIM-unix".IO "/tmp/./.font-unix".IO "/tmp/./.precomp".IO "/tmp/./bla".IO "/tmp/./evalbot-file-002P854eer".IO "/tmp/./evalbot-file-00_X3XPHzv".IO "/tmp/./evalbot-file-02vOJPVa‚Ä¶¬ª

[10:34] <Altai-man_> c: 2020.05 dir("/tmp/.").sort.say

[10:34] <committable6> Altai-man_, ¬¶2020.05: ¬´("/tmp/57fpHgZ5_D".IO "/tmp/83zCyW1Zw0".IO "/tmp/8_uy6app89".IO "/tmp/GI9oILAM1p".IO "/tmp/UHRTkfi3NR".IO "/tmp/XTiCHc7M76".IO "/tmp/ZjXseonYNg".IO "/tmp/aAbWI5qr2Z".IO "/tmp/ctGzXCm43f".IO "/tmp/qBpjxL3Ojm".IO "/tmp/whateverable".IO)‚ê§¬ª

[10:35] <AlexDaniel`> c: 2020.05.1,HEAD my $path = ‚Äò/usr/‚Äô; $path ~= ‚Äò/local‚Äô; say dir($path).sort

[10:35] <committable6> AlexDaniel`, https://gist.github.com/79afc940280bc49c6cc31a34fe19dae2

[10:35] <AlexDaniel`> if you want a realistic example that is relatively common in real life, here it is ‚Üë

[10:36] <AlexDaniel`> it's as simple as appending ‚Äò/foo‚Äô when something already had a slash at the end. I know there's .add in Raku, but people work with strs sometimes

[10:40] <lizmat> c: 2020.05 dir("/tmp/..").sort.say

[10:40] <committable6> lizmat, https://gist.github.com/14e854ae2121d4ccc239bd083ab4676a

[10:49] <lizmat> ok, I can see how /. is incorrect

[10:49] <lizmat> however, I don't think that /usr//local is a problem that dir() should fix

[10:49] <lizmat> or /usr/./local for that matter

[10:50] <lizmat> I think that's a case of garbage in / out

[10:50] <lizmat> if you don't want garbage, cleanup your IO::Path with .cleanup

[10:51] <Altai-man_> lizmat, can we get back to 2020.05 way of things?

[10:52] *** JJMerelo left
[10:54] <lizmat> .oO( that should teach me *again* to do anything IO related )

[10:56] *** sena_kun joined
[10:57] *** Altai-man_ left
[10:58] *** JJMerelo joined
[11:00] <lizmat> so should: "./foo".IO.dir produce "./foo/bar" or "foo/bar" ?

[11:00] <lizmat> sena_kun AlexDaniel` ^^

[11:01] <sena_kun> 2020.05 produced "./foo/bar".

[11:01] <MasterDuke> anything that touches filesytems, filenames, etc. is fraught with complications/complexity. i think there was good reason zoffix did that big chunk of work as a grant

[11:01] <lizmat> that is not the answer

[11:02] <lizmat> and gave the grant back in the end, no ?  MasterDuke  

[11:02] <lizmat> and that's also spent about 3 months of my life on a newio branch

[11:02] <MasterDuke> hm. wasn't that the Rat grant?

[11:02] <lizmat> that got flushed

[11:03] <lizmat> ah, could be

[11:03] <sena_kun> lizmat, we want to be compatible with existing code and avoid visible changes for the user, so I would say `./foo/bar` is the answer.

[11:03] <sena_kun> But yes, this is a complex matter.

[11:04] <MasterDuke> http://blogs.perl.org/users/zoffix_znet/2017/05/completion-report-perl-6-io-tpf-grant.html

[11:04] <AlexDaniel`> lizmat: I think it is the answer. Both are valid paths but someone can have an `is $path, ‚Äò‚Ä¶‚Äô` test in their code and you'd be breaking it

[11:04] <lizmat> well, that is what broke File::Copy's testing

[11:06] <AlexDaniel`> not sure I understand? File::Copy's tests were working fine on 2020.05 ?

[11:08] <lizmat> yes

[11:09] <lizmat> adding the .cleanup broke them

[11:14] <sena_kun> bisectable6, 2020.5,HEAD dir("/tmp/.").sort.say

[11:14] <bisectable6> sena_kun, Will bisect the whole range automagically because no endpoints were provided, hang tight

[11:15] <sena_kun> erm

[11:15] <sena_kun> bisectable6, help

[11:15] <bisectable6> sena_kun, ¬¶6c (43 commits): ¬´04===SORRY!04=== Error while compiling /tmp/hJINN2DhEI‚ê§Undeclared name:‚ê§    HEAD used at line 1‚ê§‚ê§ ¬´exit code = 1¬ª¬ª

[11:15] <bisectable6> sena_kun, Nothing to bisect!

[11:15] <bisectable6> sena_kun, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^‚àû).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Bisectable

[11:15] <AlexDaniel`> ok that looks like a bug

[11:15] <AlexDaniel`> ah no

[11:15] <sena_kun> bisectable6, old=2020.5 new=HEAD dir("/tmp/.").sort.say

[11:16] <bisectable6> sena_kun, Cannot find revision ‚Äú2020.5‚Äù (did you mean ‚Äú2020.05‚Äù?)

[11:16] <AlexDaniel`> not a bug

[11:16] <sena_kun> bisectable6, old=2020.05 new=HEAD dir("/tmp/.").sort.say

[11:16] <AlexDaniel`> sena_kun: 2020.5 is not a valid release

[11:16] <bisectable6> sena_kun, Bisecting by output (old=2020.05 new=e231558) because on both starting points the exit code is 0

[11:16] <bisectable6> sena_kun, bisect log: https://gist.github.com/dc635a3573d5d446fcf45e788ea8bea6

[11:16] <bisectable6> sena_kun, (2020-05-03) https://github.com/rakudo/rakudo/commit/2b6a5829aebd2602310451507bb55ea48530fc19

[11:17] <AlexDaniel`> the output is random

[11:18] <AlexDaniel`> my messages are a bit delayed üòá

[11:18] <sena_kun> Yeah.

[11:19] <sena_kun> bisectable6, old=2020.05 new=HEAD dir("/boot/..").sort.say

[11:19] <bisectable6> sena_kun, On both starting points (old=2020.05 new=e231558) the exit code is 0 and the output is identical as well

[11:19] <bisectable6> sena_kun, https://gist.github.com/e6043673343e3296659b39b296563a31

[11:20] <sena_kun> bisectable6, old=2020.05 new=HEAD dir("/boot/.").sort.say

[11:20] <bisectable6> sena_kun, Bisecting by output (old=2020.05 new=e231558) because on both starting points the exit code is 0

[11:20] <bisectable6> sena_kun, bisect log: https://gist.github.com/a0f158cf6db8a26fc8e5631388b8494d

[11:20] <bisectable6> sena_kun, (2020-05-21) https://github.com/rakudo/rakudo/commit/b63976a8f19e650fe3533562a5fa040d84535de8

[11:21] <sena_kun> So it does point to b63976a8f19e650fe3533562a5fa040d84535de8 after all.

[11:21] <linkable6> (2020-05-21) https://github.com/rakudo/rakudo/commit/b63976a8f1 Make IO::Path.dir between 1.5x and 2.2x as fast

[11:21] <lizmat> yeah, *that* is clear

[11:21] <lizmat> so to fix that, I added a .cleanup internally to clean up the path for which to create a dir

[11:21] <lizmat> and *that* broke IO::Copy

[11:22] <lizmat> I have a fix for trailing /.

[11:22] <sena_kun> I think the trailing `/.` is the main issue we can spot, no?

[11:23] <lizmat> no, because apparently "foo/../bar/  should also produce "bar/baz" and not "foo/../bar/baz" ?

[11:23] <sena_kun> I don't think so.

[11:24] <sena_kun> For me on 2020.05 running `'Work/../Work'.IO.dir` returns paths like `"Work/../Work/foo".IO`.

[11:24] <Geth> ¬¶ rakudo: 9b9d9f64ed | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[11:24] <Geth> ¬¶ rakudo: Correct trailing '/." in dir

[11:24] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/9b9d9f64ed

[11:24] *** ShimmerFairy left
[11:25] *** ShimmerFairy joined
[11:25] <lizmat> that should take care of the "foo/.".IO.dir issue, keep "foo/../bar/" returning "foo/../bar/baz"

[11:26] <sena_kun> Awesome. I am running blin ASAP.

[11:27] <lizmat> but this will *not* fix "///"

[11:28] <lizmat> or "foo//bar"

[11:29] <sena_kun> m: '///'.IO.dir.sort.say;

[11:29] <camelia> rakudo-moar e231558c4: OUTPUT: ¬´("///bin".IO "///boot".IO "///dev".IO "///etc".IO "///home".IO "///lib".IO "///lib64".IO "///mnt".IO "///opt".IO "///proc".IO "///root".IO "///run".IO "///sbin".IO "///selinux".IO "///srv".IO "///sys".IO "///tmp".IO "///usr".IO "///var".IO)‚ê§¬ª

[11:29] <sena_kun> I see.

[11:30] <lizmat> or we should decide we *do* want .cleanup, just not for the "./" in ./"foo" case

[11:30] <sena_kun> So people relied on partial cleaning we did before. Now we can either have full cleaning, which breaks, or bent backwards horribly to fix some cases.

[11:32] <sena_kun> lizmat, I would say let's release with 0 ecosystem breakage for now and specify the situation in changelog special notes. Then we can do a full cleanup in next release and make it breaking, patch modules etc.

[11:32] <lizmat> that's a thought: or we could just not allow IO::Path's to be created that are dirty

[11:33] <lizmat> but the checks for that would come at a significant performance price

[11:33] <lizmat> which is why I think we shouldn't be cleaning up paths involuntarily at all

[11:33] <lizmat> and adding .cleanup internally to dir() was a mistake

[11:37] <lizmat> afk for half an hour or so

[12:05] *** Xliff joined
[12:08] *** JJMerelo left
[12:45] *** lichtkind joined
[12:49] <ShimmerFairy> In general, I would say you should only do as much automatic cleaning as is necessary to make doing IO stuff not a nightmare. As long Raku can traverse directories and open files, you shouldn't clean things up by default if you don't have to.

[12:50] <lizmat> ShimmerFairy: so should "foo/." produce "foo/bar" or "foo/./bar" in that case ?

[12:52] <ShimmerFairy> foo/./bar unless it costs nothing to simplify that, or your IO implementation for whatever reason chokes on that path string. I personally am fine with doing a  $path.cleanup.Str whenever I want a "display path", but I can understand other people not being happy with that.

[12:53] <ShimmerFairy> (maybe string-ifying a path can call cleanup() internally so that people always see a nice path outside of an IO object)

[12:54] <Xliff> sena-kun AlexDaniel: Can you point me to a project that uses %?RESOURCES

[12:55] *** Altai-man_ joined
[12:57] *** sena_kun left
[12:58] <lizmat> ShimmerFairy: it appears either spectest / ecosystem expects "foo/bar"

[12:58] <lizmat> ShimmerFairy: if cleaning up a path would be cheap, I would agree

[12:59] <lizmat> but it isn't  :-(

[13:00] <ShimmerFairy> Yeah, it's worth noting that I'm talking about a perfect world where you don't care about backward compatibility, or where you can safely chuck changes behind a 'use v6.e'

[13:01] <ShimmerFairy> In general, I think ideally IO shouldn't simplify paths unless either a) the user calls .cleanup() or whatever it's actually called, or b) the user wants to stringify the object in some way (e.g. $path.Str or $path.gist causing a cleanup to happen and then be cached)

[14:41] <lizmat> afk for a few hours&

[14:56] *** sena_kun joined
[14:57] *** Altai-man_ left
[15:03] <nine> foo/../bar is NOT equal to foo/bar

[15:03] <nine> err... foo/./bar

[15:04] <ShimmerFairy> isn't it though?

[15:05] * nine needs to exit train

[15:44] *** JJMerelo joined
[15:44] <JJMerelo> releasable6: status

[15:44] <releasable6> JJMerelo, Next release in ‚âà3 hours. There are no known blockers. 143 out of 305 commits logged (‚ö† 4 warnings)

[15:44] <releasable6> JJMerelo, Details: https://gist.github.com/376e86b3da286f0524e07cef5db022fe

[15:47] <sena_kun> Ouch, 3 hours.

[16:21] <JJMerelo> I'm trying to run a raku program from a test. If I do raku t/00-basic.t it works, but if I do zef test . it does not find raku

[16:22] <JJMerelo> The PATH of the shell is inherited from, well, the shell to whatever, but somewhere in zef it gets lost...

[16:25] <JJMerelo> m: say $*RAKU

[16:25] <camelia> rakudo-moar 9b9d9f64e: OUTPUT: ¬´Raku (6.d)‚ê§¬ª

[16:25] <JJMerelo> m: say $*RAKU.raku

[16:25] <camelia> rakudo-moar 9b9d9f64e: OUTPUT: ¬´Raku.new(compiler => Compiler.new(id => "F809199F1E0AF9667C594B6434325AD139D37F83", release => "", codename => "", name => "rakudo", auth => "The Perl Foundation", version => v2020.05.1.305.g.9.b.9.d.9.f.64.e, signature => Blob, desc => Str), name => ‚Ä¶¬ª

[16:25] <JJMerelo> m: say $*EXECUTABLE

[16:25] <camelia> rakudo-moar 9b9d9f64e: OUTPUT: ¬´"/home/camelia/rakudo-m-inst-1/bin/perl6-m".IO‚ê§¬ª

[16:26] <JJMerelo> well, that works but now it does not find the installed libraries...

[16:28] <nine> Ok, looks like I was wrong about /.

[16:32] *** ShimmerFairy left
[16:33] *** ShimmerFairy joined
[16:55] *** Altai-man_ joined
[16:57] *** sena_kun left
[17:36] <nine> Oh, it's use lib that's breaking NativeCall tests with in-process precompilation

[17:45] <lizmat> nine: what's the difference between "foo/bar" and "foo/./bar" ?

[17:46] <nine> lizmat: none, I was in error

[17:46] <lizmat> ah, ok *phew*  :-)

[17:46] <nine> I thought I remembered some obscurity, but research proved me wrong

[18:06] *** patrickb joined
[18:36] *** Xliff left
[18:42] <lizmat> m: "ab" ~~ /(a) $<b>=b/; say $/.keys   # should this always be (0 b) or can it also be (b 0) ?

[18:42] <camelia> rakudo-moar 9b9d9f64e: OUTPUT: ¬´(0 b)‚ê§¬ª

[18:43] <lizmat> it appears we have a spectest for the behaviour of always returning (0 b)

[18:45] <Altai-man_> releasable6, status

[18:45] <releasable6> Altai-man_, Next release is just a few moments away. There are no known blockers. 305 out of 305 commits logged (‚ö† 4 warnings)

[18:45] <releasable6> Altai-man_, Details: https://gist.github.com/c7e5f37c58a3add183e616deb9c04354

[18:55] *** sena_kun joined
[18:55] <sena_kun> releasable6, status

[18:55] <releasable6> sena_kun, Next release is just a few moments away. There are no known blockers. 305 out of 305 commits logged (‚ö† 4 warnings)

[18:55] <releasable6> sena_kun, Details: https://gist.github.com/662a82b8e44f205fb1067348b667a066

[18:56] <sena_kun> Anyone who can help a lot by spending some time proofreading (and fixing grammar) the changelog?

[18:57] <lizmat> I never remember the URL of the draft change log  

[18:57] *** Altai-man_ left
[18:58] <sena_kun> https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:01] <MasterDuke> sena_kun++

[19:04] <lizmat> sena_kun: c0b5fb28 is from Nov ?

[19:05] <lizmat> and it's the *output" that's simpler ?

[19:07] <lizmat> sena_kun: re 077300c5 I would add "when splitting using a regex"

[19:07] <linkable6> (2020-06-15) https://github.com/rakudo/rakudo/commit/077300c56c Make sure push-all doesn't push when exhausted

[19:13] <sena_kun> lizmat, it is, but it was merged only for this release.

[19:13] <sena_kun> I mean, we don't immediately merge all PRs, so sometimes commits from Nov are in Jun. :)

[19:14] <sena_kun> lizmat, anything else?

[19:15] <lizmat> perhaps mention ".raku" for c0b5fb28 , mentioning .perl there now is confusing

[19:15] <linkable6> (2019-11-05) https://github.com/rakudo/rakudo/commit/c0b5fb282c Make Instant.perl a bit less noisy

[19:16] <sena_kun> lizmat, fixed

[19:16] <lizmat> sena_kun: why isn't b63976a8f1 mentioned?

[19:16] <linkable6> (2020-05-21) https://github.com/rakudo/rakudo/commit/b63976a8f1 Make IO::Path.dir between 1.5x and 2.2x as fast

[19:17] <lizmat> because that was the previous release ?

[19:17] <sena_kun> lizmat, erm, it is.

[19:17] <sena_kun> Make IO::Path.dir between 1.5x and 2.2x as fast [b63976a8][6b22c1eb][7691742a][9b9d9f64]

[19:18] <lizmat> he... so we didn't notice any issues with that in the previous release

[19:18] <lizmat> odd

[19:18] <lizmat> ah

[19:18] <lizmat> ok, misunderstood

[19:18] <sena_kun> lizmat, no, it wasn't in the previous release

[19:19] <lizmat> hmmm... maybe mention 700b7432 together with b63976a8f1

[19:19] <linkable6> (2020-05-24) https://github.com/rakudo/rakudo/commit/700b74329d Make dir() about 15% faster

[19:19] <linkable6> (2020-05-21) https://github.com/rakudo/rakudo/commit/b63976a8f1 Make IO::Path.dir between 1.5x and 2.2x as fast

[19:19] <lizmat> as the 1.5x to 2.2x *also* applies to "dir"

[19:19] <lizmat> it's just that the sub version has become 15% faster *on top* of that

[19:20] <sena_kun> I was not bothered enough to calculate^A^K Hmm.

[19:21] <lizmat> hehe... 

[19:21] <lizmat> then just put the "dir" one *after* the IO::Path.dir one

[19:21] <sena_kun> done

[19:22] <lizmat> that's it from me

[19:22] <sena_kun> lizmat, thanks!

[19:23] <sena_kun> 1473 out of 1478 modules processed (left: Spreadsheet::XLSX Cro::HTTP::Session::Red Async::Workers Vikna LibXSLT)

[20:12] <Geth> ¬¶ roast: 410354de4b | (Elizabeth Mattijsen)++ | S05-match/capturing-contexts.t

[20:12] <Geth> ¬¶ roast: Fix test depending on not having a Match.keys

[20:12] <Geth> ¬¶ roast: 

[20:12] <Geth> ¬¶ roast: It might in the future, so change the name of the method we're adding

[20:12] <Geth> ¬¶ roast: to the Match class

[20:12] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/410354de4b

[20:52] <gfldex> raku: class C { has $.a = s; }

[20:52] <evalable6> gfldex, rakudo-moar 9b9d9f64e: OUTPUT: ¬´(exit code 1) 04===SORRY!04===‚ê§Nu‚Ä¶¬ª

[20:52] <evalable6> gfldex, Full output: https://gist.github.com/32369c026dc9a35a37b18988df402de0

[20:52] <gfldex> does rakudo think I wanted to write `= s///`?

[20:54] <gfldex> raku: class C { has $.a = soso; }

[20:54] <evalable6> gfldex, rakudo-moar 9b9d9f64e: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/kXZXJlzhpv‚ê§Undeclared routine:‚ê§    soso used at line 1‚ê§‚ê§¬ª

[20:54] <gfldex> this is kinda bizzar :->

[20:54] <gfldex> raku: class C { has $.a = s(); }

[20:54] <evalable6> gfldex, rakudo-moar 9b9d9f64e: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/BCRKLwjoJZ‚ê§Undeclared routine:‚ê§    s used at line 1‚ê§‚ê§¬ª

[20:55] *** Altai-man_ joined
[20:55] * gfldex .oO( taking the wrong turn in a Grammar ‚Ä¶ )

[20:56] <gfldex> should I file an LTA for this one?

[20:58] *** sena_kun left
[21:33] <Geth> ¬¶ roast/6.d-errata: 8 commits pushed by (Elizabeth Mattijsen)++, (Donald Hunter)++

[21:33] <Geth> ¬¶ roast/6.d-errata: c6e6e96163 | :bin is not a parameter to spurt

[21:33] <Geth> ¬¶ roast/6.d-errata: ff2673343f | Make .split(/foo/,NaN) test less specific

[21:33] <Geth> ¬¶ roast/6.d-errata: 3772ad4474 | Update .gist tests for multidim arrays

[21:33] <Geth> ¬¶ roast/6.d-errata: 5a419a6eb4 | Fix .curupdir tests

[21:33] <Geth> ¬¶ roast/6.d-errata: 9ada79365f | Remove superfluous .IO's

[21:33] <Geth> ¬¶ roast/6.d-errata: c0c3edb0c8 | Make too specific error checking less specific

[21:33] <Geth> ¬¶ roast/6.d-errata: f291c2bbb6 | Make IO::Path.parts test a bit less restrictive

[21:33] <Geth> ¬¶ roast/6.d-errata: a7c53dc11a | Adaptations for change behaviour of .rotate

[21:33] <Geth> ¬¶ roast/6.d-errata: review: https://github.com/Raku/roast/compare/bc25d4b50f7c...a7c53dc11a41

[22:26] *** JJMerelo left
[22:27] <Geth> ¬¶ roast/6.c-errata: 4 commits pushed by Altai-man++, (Donald Hunter)++, (Elizabeth Mattijsen)++

[22:27] <Geth> ¬¶ roast/6.c-errata: 7f429f5bea | Recreate .rotor-related changes

[22:27] <Geth> ¬¶ roast/6.c-errata: 8db7ed6316 | Update .gist tests for multidim arrays

[22:27] <Geth> ¬¶ roast/6.c-errata: 622dfe9296 | Fix .curupdir tests

[22:27] <Geth> ¬¶ roast/6.c-errata: ad211334c0 | Remove testing of error messages

[22:27] <Geth> ¬¶ roast/6.c-errata: review: https://github.com/Raku/roast/compare/2a74a2195554...ad211334c0a6

[22:48] <Geth> ¬¶ rakudo/release-2020.06: 14ba3cf5f7 | Altai-man++ | 3 files

[22:48] <Geth> ¬¶ rakudo/release-2020.06: Update changelog + announcement

[22:48] <Geth> ¬¶ rakudo/release-2020.06: 

[22:48] <Geth> ¬¶ rakudo/release-2020.06: Deliberately not logged:

[22:48] <Geth> ¬¶ rakudo/release-2020.06: 

[22:48] <Geth> ¬¶ rakudo/release-2020.06: 46648b9 fe14bcb 0d238d8 40fdfee 002acb1 25f8395 c8570e8 45df9bc

[22:48] <Geth> ¬¶ rakudo/release-2020.06: e1cefec 7bace1b 8134470 f11d750 dac68b2 2b6a582 3d2522e 43c1f50

[22:48] <Geth> ¬¶ rakudo/release-2020.06: 5965cc3 4a3f29d d7ce52b 0ca0f58 649ef23 9a583dc 8eb7214 e95eb3a

[22:48] <Geth> ¬¶ rakudo/release-2020.06: <‚Ä¶commit message has 10 more lines‚Ä¶>

[22:48] <Geth> ¬¶ rakudo/release-2020.06: review: https://github.com/rakudo/rakudo/commit/14ba3cf5f7

[22:56] *** sena_kun joined
[22:57] *** Altai-man_ left
[23:52] *** leont left
[23:52] *** patrickz joined
[23:54] *** lichtkind left
[23:56] *** patrickb left
[23:57] <Geth> ¬¶ nqp: 0cf2166d6a | Altai-man++ | tools/templates/MOAR_REVISION

[23:57] <Geth> ¬¶ nqp: [release] Bump MoarVM revision to 2020.06

[23:57] <Geth> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/0cf2166d6a

[23:57] <Geth> ¬¶ nqp: 059418f2f3 | Altai-man++ | VERSION

[23:57] <Geth> ¬¶ nqp: [release] Bump VERSION to 2020.06

[23:57] <Geth> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/059418f2f3

[23:57] <Geth> ¬¶ rakudo/release-2020.06: 3434ad69f2 | Altai-man++ | tools/templates/NQP_REVISION

[23:57] <Geth> ¬¶ rakudo/release-2020.06: [release] Bump NQP revision to 2020.06

[23:57] <Geth> ¬¶ rakudo/release-2020.06: review: https://github.com/rakudo/rakudo/commit/3434ad69f2

[23:57] <Geth> ¬¶ rakudo/release-2020.06: eda1a4b477 | Altai-man++ | VERSION

[23:57] <Geth> ¬¶ rakudo/release-2020.06: [release] Bump VERSION to 2020.06

[23:57] <Geth> ¬¶ rakudo/release-2020.06: review: https://github.com/rakudo/rakudo/commit/eda1a4b477

[23:58] <Geth> ¬¶ rakudo: Altai-man++ created pull request #3763: Release 2020.06

[23:58] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3763

[23:58] <Geth> ¬¶ rakudo/master: 4 commits pushed by Altai-man++

[23:58] <Geth> ¬¶ rakudo/master: 14ba3cf5f7 | Update changelog + announcement

[23:58] <Geth> ¬¶ rakudo/master: 3434ad69f2 | [release] Bump NQP revision to 2020.06

[23:58] <Geth> ¬¶ rakudo/master: eda1a4b477 | [release] Bump VERSION to 2020.06

[23:58] <Geth> ¬¶ rakudo/master: 34f985de97 | Merge pull request #3763 from rakudo/release-2020.06

[23:58] <Geth> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/9b9d9f64ed08...34f985de97d4

