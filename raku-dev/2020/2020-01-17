[00:04] *** patrickz joined
[00:08] *** patrickb left
[00:12] <Geth> ¦ problem-solving: MasterDuke17 assigned to jnthn Issue Expmod returns a default value instead of erroring out on libtommath errors https://github.com/Raku/problem-solving/issues/150

[00:20] *** patrickz left
[00:42] *** sena_kun left
[00:58] *** sena_kun joined
[01:02] *** MasterDuke left
[01:03] *** Xliff left
[01:14] *** Xliff joined
[01:15] <Xliff> Files=1296, Tests=109781, 174 wallclock secs (27.67 usr  4.33 sys + 3165.51 cusr 159.69 csys = 3357.20 CPU)

[01:15] <Xliff> TEST_JOBS=20  ;q

[01:15] *** Xliff left
[02:42] *** sena_kun left
[02:51] *** AlexDaniel left
[02:57] *** sena_kun joined
[02:57] *** eaterof joined
[02:57] *** eater left
[03:03] *** hungrydonkey joined
[03:09] *** hungrydonkey left
[03:10] *** hungrydonkey joined
[03:12] *** AlexDaniel joined
[03:12] *** AlexDaniel left
[03:12] *** AlexDaniel joined
[03:13] *** hungrydonkey left
[03:14] *** hungrydonkey joined
[03:15] *** hungrydonkey left
[03:15] *** hungrydonkey joined
[03:18] *** hungrydonkey left
[03:18] *** hungrydonkey joined
[03:19] *** hungrydonkey left
[03:20] *** hungrydonkey joined
[03:21] *** hungrydonkey left
[03:21] *** hungrydonkey joined
[03:22] *** hungrydonkey left
[03:22] *** hungrydonkey joined
[03:24] *** hungrydonkey left
[03:24] *** hungrydonkey joined
[03:28] *** hungrydonkey left
[04:00] <Geth> ¦ rakudo: 8c0a5d6b06 | (Ben Davies)++ | src/core.c/Parameter.pm6

[04:00] <Geth> ¦ rakudo: Fix Parameter.sigil for anonymous scalar params with default values

[04:00] <Geth> ¦ rakudo: 

[04:00] <Geth> ¦ rakudo: This claimed their sigil was \ instead of $. Since anonymous sigilless

[04:00] <Geth> ¦ rakudo: params can't have default values, use the related flags to differentiate

[04:00] <Geth> ¦ rakudo: between the two.

[04:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8c0a5d6b06

[04:42] *** sena_kun left
[04:57] *** sena_kun joined
[06:42] *** sena_kun left
[06:56] *** sena_kun joined
[07:05] <Geth> ¦ rakudo: Kaiepi++ created pull request #3430: Simplify Parameter.raku, add Parameter.prefix and Parameter.suffix

[07:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3430

[07:07] *** domidumont joined
[07:11] *** AlexDani` joined
[07:18] *** AlexDaniel left
[07:18] *** tbrowder left
[07:18] *** tony-o left
[07:26] *** domidumont left
[07:40] *** domidumont joined
[08:05] *** tbrowder joined
[08:05] *** tony-o joined
[08:21] <nine> patrickb: you have never answered my question: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-12-10#l39

[08:21] <tellable6> nine, I'll pass your message to patrickb

[08:30] <lizmat> Files=1296, Tests=109769, 210 wallclock secs (28.37 usr  7.97 sys + 2956.88 cusr 249.80 csys = 3243.02 CPU)

[08:30] <tellable6> 2020-01-16T21:20:51Z #raku-dev <vrurg> lizmat We loose lexically declared dynamic variables within react blocks. Similar happens to start, where Promise preserves the outer context. Does Supply code do the same somewhere?

[08:31] <lizmat> .tell vrurg since most of Supply depends on dynamic variables, I doubt it, but jnthn would know

[08:31] <tellable6> lizmat, I'll pass your message to vrurg

[08:41] *** sena_kun left
[08:56] *** sena_kun joined
[09:04] *** eaterof left
[09:06] <nine> t/spec/S16-io/watch.t ............................................. Dubious, test returned 1 (wstat 256, 0x100)

[09:07] <nine> I get this more often than not

[09:07] *** eater joined
[09:08] <lizmat> nine: on what OS ?

[09:12] <Geth> ¦ rakudo: 1c46740142 | (Stefan Seifert)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[09:12] <Geth> ¦ rakudo: Fix leaking file handles when loading modules

[09:12] <Geth> ¦ rakudo: 

[09:12] <Geth> ¦ rakudo: Since commit efadff2a39641e34a02b32c475b152448d360821 a PrecompilationUnit is

[09:12] <Geth> ¦ rakudo: marked uninitialized after closing. When we use an accessor like .checksum

[09:12] <Geth> ¦ rakudo: after closing (by !load-handle-for-path), the precomp file gets reopened and

[09:12] <Geth> ¦ rakudo: stays that way.

[09:12] <Geth> ¦ rakudo: When we load multiple modules with a shared dependency, we will detect that

[09:12] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[09:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c46740142

[09:14] <nine> sena_kun: https://github.com/rakudo/rakudo/commit/1c46740142 is a candidate for the release. It fixes a regression introduced after the previous release. I'd judge it low risk (but not 0), medium benefit especially to people with large code bases.

[09:14] <nine> lizmat: Linux

[09:15] <lizmat> well, is it at all tested on Linux?  I only recall writing tests for MacOS 

[09:17] * sena_kun has checked blin output and didn't see anything too dangerous there at the first sight, still some new names there. got the point with cherry-pick, a release is likely

[09:17] <sena_kun> &afk

[09:17] <lizmat> sena_kun++

[09:18] <nine> sena_kun++

[09:20] <Geth> ¦ rakudo: 4366980681 | (Elizabeth Mattijsen)++ | 4 files

[09:20] <Geth> ¦ rakudo: Merge Routine.rw/yada into a single generic bitmap

[09:20] <Geth> ¦ rakudo: 

[09:20] <Geth> ¦ rakudo: This makes each Routine carry one native int less, and opens up a way

[09:20] <Geth> ¦ rakudo: to add additional meta-information to a Routine without affecting its

[09:20] <Geth> ¦ rakudo: memory footprint.

[09:20] <Geth> ¦ rakudo: 

[09:20] <Geth> ¦ rakudo: This also adds a Routine.set_flag and Routine.get_flag method that take

[09:20] <Geth> ¦ rakudo: a bit number to set/get.

[09:20] <Geth> ¦ rakudo: 

[09:20] <Geth> ¦ rakudo: Not sure what performance effects this has, but needing 8 bytes less

[09:20] <Geth> ¦ rakudo: per Routine, can't be bad.

[09:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4366980681

[09:35] <lizmat> afk for a few hours&

[09:58] *** |Tux| left
[09:59] *** |Tux| joined
[10:00] *** |Tux| left
[10:14] *** |Tux| joined
[10:36] *** pyrimidi_ joined
[10:39] *** pyrimidine left
[10:42] *** sena_kun left
[10:56] *** sena_kun joined
[11:11] <Geth> ¦ roast: Kaiepi++ created pull request #613: Update tests WRT changes to Parameter.raku

[11:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/613

[11:28] *** brrt joined
[11:33] <|Tux|> Rakudo version 2019.11-487-g436698068 - MoarVM version 2020.01-15-g1fa9764bf

[11:33] <|Tux|> csv-test-xs-20      0.423 -  0.439

[11:33] <|Tux|> csv-ip5xs           0.708 -  0.771

[11:33] <|Tux|> test-t --race       0.784 -  0.837

[11:33] <|Tux|> test-t              1.739 -  1.742

[11:33] <|Tux|> csv-ip5xs-20        6.483 -  6.692

[11:33] <|Tux|> test                7.033 -  7.334

[11:33] <|Tux|> test-t-20 --race    8.465 -  8.519

[11:33] <|Tux|> csv-parser         22.969 - 23.592

[11:34] <|Tux|> test-t-20          30.182 - 30.395

[11:47] *** brrt left
[12:02] <Geth> ¦ roast: a4a4798b55 | (Elizabeth Mattijsen)++ | S02-types/compact.t

[12:02] <Geth> ¦ roast: Remove tests for substr on an int array

[12:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a4a4798b55

[12:25] <Geth> ¦ roast: 3e4f35296c | (Elizabeth Mattijsen)++ | 13 files

[12:25] <Geth> ¦ roast: Batch #19 of roast RT -> GH ticket migration

[12:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3e4f35296c

[12:41] *** sena_kun left
[12:57] *** sena_kun joined
[13:47] *** TreyHarris left
[13:52] <Geth> ¦ rakudo: f8724459f3 | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[13:52] <Geth> ¦ rakudo: Make Supply.comb(... :match) work

[13:52] <Geth> ¦ rakudo: 

[13:52] <Geth> ¦ rakudo: This will first collect all of the emitted strings, combine them

[13:52] <Geth> ¦ rakudo: into a single string, and emit the result of Str.comb with those

[13:52] <Geth> ¦ rakudo: parameters.

[13:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f8724459f3

[13:52] <Geth> ¦ roast: 865b465174 | (Elizabeth Mattijsen)++ | S17-supply/comb.t

[13:52] <Geth> ¦ roast: Adapt tests for Supply.comb(.... :match)

[13:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/865b465174

[14:17] *** lucasb joined
[14:41] *** sena_kun left
[14:57] *** sena_kun joined
[15:17] <AlexDani`> sena_kun: btw did we get results for the release before the last one too?

[15:18] *** AlexDani` is now known as AlexDaniel

[15:18] *** AlexDaniel left
[15:18] *** AlexDaniel joined
[15:18] <AlexDaniel> sena_kun: I mean --old=2019.07.1

[16:04] *** domidumont left
[16:27] <sena_kun> AlexDaniel: nope, but can do, I think. It doesn't look like an urgency to me, at the very least.

[16:29] <sena_kun> I mean, any SUPER SERIOUS things from there up to 2019.11 would be reported already anyway

[16:36] <AlexDaniel> sena_kun: well, not necessarily

[16:36] <AlexDaniel> sena_kun: distro packages are still old, star wasn't released

[16:39] <tony-o> .tell patrickb i have most of the infrastructure for an ecosystem fleshed out, i need some help testing it - i'm writing on a blog post on the current state rn

[16:39] <tellable6> tony-o, I'll pass your message to patrickb

[16:40] <AlexDaniel> sena_kun: and also we had a lot of modules that are not passing tests but did months ago, it could be related

[16:40] <AlexDaniel> sena_kun: how long does it take for Blin to finish?

[16:40] <AlexDaniel> sena_kun: I suggest we run it overnight and see if there are any Bisected results

[16:42] *** sena_kun left
[16:43] <nine> AlexDaniel: the important part for a release is that it does not regress compared to the previous one. This way we ensure steady progress. Our tools let us down, so this was not necessarily true for some releases. But with what we know now we can be sure that 2020.01 is better than 2019.12

[16:44] <nine> So it meets the criteria for releasing.

[16:44] <AlexDaniel> it doesn't meet mine, but sena_kun can decide either way, I'm just suggesting

[16:44] <nine> It doesn't fix all regressions we overlooked in the last release. But it's definitely better than the last release.

[16:45] <AlexDaniel> if you look at Stars then some releases don't matter at all

[16:45] <nine> will 2020.01 be a Star?

[16:46] <AlexDaniel> no idea

[16:46] <AlexDaniel> but there wasn't a 2019.11

[16:47] <AlexDaniel> and then, I'm talking about just running the thing overnight to see if it brings anything up

[16:48] <nine> That can't hurt in any case

[16:57] *** sena_kun joined
[18:17] *** Kaiepi left
[18:17] *** Kaiepi joined
[18:41] *** sena_kun left
[18:56] <lizmat> I would really like to see a Rakudo Star 2020.01 before FOSDEM

[18:57] *** sena_kun joined
[19:58] *** MasterDuke joined
[20:01] <Geth> ¦ roast: 4ae11ca905 | (Elizabeth Mattijsen)++ | 6 files

[20:01] <Geth> ¦ roast: Batch #20 of roast RT -> GH ticket migration

[20:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4ae11ca905

[20:29] <timotimo> this seems like a bug:

[20:29] <timotimo> m: say ("42foo", *.chop.&val ... Numeric)

[20:29] <camelia> rakudo-moar f8724459f: OUTPUT: «(42foo 42fo 42f 42 4                                                                                                ...)␤»

[20:29] <timotimo> m: say "42".&val.^name

[20:29] <camelia> rakudo-moar f8724459f: OUTPUT: «IntStr␤»

[20:29] <timotimo> m: say "42".&val.^name; say IntStr ~~ Numeric

[20:29] <camelia> rakudo-moar f8724459f: OUTPUT: «IntStr␤True␤»

[20:31] <timotimo> committable6: releases say ("42foo", *.chop.&val ... Numeric)

[20:31] <committable6> timotimo, https://gist.github.com/20f48cddc87add87da6de1f65e94beb2

[20:32] <timotimo> used to work for a while, and was broken in a different way for a little while

[20:33] <timotimo> bisectable6: GOOD=2017.06 BAD=2017.07 say ("42foo", *.chop.&val ... Numeric)

[20:33] <bisectable6> timotimo, Bisecting by output (old=2017.06 new=2017.07) because on both starting points the exit code is 0

[20:33] <bisectable6> timotimo, bisect log: https://gist.github.com/488ba60002c90b4e56a80792701c8ca6

[20:33] <bisectable6> timotimo, (2017-07-05) https://github.com/rakudo/rakudo/commit/001135ca2a06cff2218093f29987a3270193c2f4

[20:34] <AlexDaniel> and how is that relevant?

[20:34] <AlexDaniel> c: 001135ca2a^,001135ca2a say ("42foo", *.chop.&val ... Numeric)

[20:34] <committable6> AlexDaniel, ¦001135ca2a^: «(42foo 42fo 42f 42)␤» ¦001135c: «(42foo 42fo 42f 42 4                                                                                                ...)␤»

[20:34] <AlexDaniel> well… I don't know, but it is…

[20:39] <timotimo> how is what relevant?

[20:39] <AlexDaniel> timotimo: that commit

[20:39] <timotimo> good q

[20:39] <timotimo> must have changed semantics in some way by accident

[20:40] <timotimo> we have coverable6, so i can find out what paths it takes at least

[20:40] <timotimo> coverable6: 001135ca2a^,001135c say ("42foo", *.chop.&val ... Numeric)

[20:40] <coverable6> timotimo, Coverable only works with one commit

[20:40] <timotimo> coverable6: 001135ca2a^ say ("42foo", *.chop.&val ... Numeric)

[20:41] *** sena_kun left
[20:41] <coverable6> timotimo, https://gist.github.com/6964b9cea305631635704bf6486fbfbc

[20:41] <timotimo> coverable6: 001135c say ("42foo", *.chop.&val ... Numeric)

[20:42] <coverable6> timotimo, https://gist.github.com/6c56d0a83879b7765e06c19091aaf86f

[20:42] <AlexDaniel> now tell me honestly, does it help? :D

[20:43] <AlexDaniel> it's like the first time somebody used this bot in forever

[20:43] <timotimo> m: say Numeric("42")

[20:43] <camelia> rakudo-moar f8724459f: OUTPUT: «Cannot invoke this object (REPR: Uninstantiable; Numeric)␤  in block <unit> at <tmp> line 1␤␤»

[20:43] <timotimo> m: say Int("42")

[20:43] <camelia> rakudo-moar f8724459f: OUTPUT: «42␤»

[20:44] <timotimo> not completely certain

[20:45] <timotimo> c: 001135ca2a^,001135ca2a say Numeric("42")

[20:45] <committable6> timotimo, ¦001135ca2a^,001135c: «Cannot invoke this object (REPR: Uninstantiable; Numeric)␤  in block <unit> at /tmp/Hd0ZK6CdIM line 1␤␤ «exit code = 1»»

[20:47] * timotimo fires up moar-remote

[20:54] <timotimo> welp, time to debug the debugserver

[20:55] <timotimo> actually, punt that to later

[20:57] *** sena_kun joined
[20:59] <timotimo> d'oh, helps to run the code you're actually thinking you're running

[21:21] *** melezhik joined
[21:22] <AlexDaniel> c: all say rand

[21:23] <committable6> AlexDaniel, https://gist.github.com/04edc44994f81532238e14ce54314ff7

[21:25] *** melezhik left
[21:48] <dogbert17> lizmat: Unexpected closing bracket: at /home/dogbert/repos/rakudo/t/spec/S02-types/flattening.t:125

[22:29] <Geth> ¦ roast: b7561c2a14 | (Elizabeth Mattijsen)++ | S02-types/flattening.t

[22:29] <Geth> ¦ roast: Oops, lost a curly

[22:29] <Geth> ¦ roast: 

[22:29] <Geth> ¦ roast: dogbert17++

[22:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b7561c2a14

[22:40] *** sena_kun left
[22:45] *** lucasb left
[22:55] *** sena_kun joined
[23:03] <lizmat> m: say "{"\r".chars} + {"\n".chars} = {("\r" ~ "\n").chars}"   # :-)

[23:03] <camelia> rakudo-moar f8724459f: OUTPUT: «1 + 1 = 1␤»

[23:13] <tony-o> just updated from 2019.07 to blead and am getting 'Missing serialize REPR function for REPR VMException (BOOTException)' running nearly anything

[23:14] <Geth> ¦ roast: 7082d7970b | (Elizabeth Mattijsen)++ | S17-supply/split.t

[23:14] <Geth> ¦ roast: Use the needles!

[23:14] <Geth> ¦ roast: 

[23:14] <Geth> ¦ roast: Otherwise there is no point in defining them beforehand.

[23:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7082d7970b

[23:20] <Geth> ¦ rakudo: 5d6c0b6b4e | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[23:20] <Geth> ¦ rakudo: Add support for Supply.encode($encoding = "utf8")

[23:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5d6c0b6b4e

[23:21] <Geth> ¦ roast: 1810a494b6 | (Elizabeth Mattijsen)++ | S17-supply/encode.t

[23:21] <Geth> ¦ roast: Add test file for Supply.encode tests

[23:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1810a494b6

[23:22] <Geth> ¦ roast: 62de8f9984 | (Elizabeth Mattijsen)++ | spectest.data

[23:22] <Geth> ¦ roast: Make sure the Supply.encode tests are run

[23:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/62de8f9984

[23:22] <lizmat> tony-o: you should probably retry with a clean checkout

[23:28] <tony-o> yea i nuked everything, figured out it looked like something corrupted, was just happening on two machines

[23:29] <tony-o> one osx, one debian

[23:56] <Geth> ¦ roast/rakudo_3257: 478ce94729 | (Vadim Belman)++ | 2 files

[23:56] <Geth> ¦ roast/rakudo_3257: Consider newly added X::SymbolNotDynamic exception

[23:56] <Geth> ¦ roast/rakudo_3257: 

[23:56] <Geth> ¦ roast/rakudo_3257: Make _S32/exceptions/mist.t_ use v6.c explicitly

[23:56] <Geth> ¦ roast/rakudo_3257: review: https://github.com/perl6/roast/commit/478ce94729

[23:56] <Geth> ¦ roast/rakudo_3257: 23778fabf8 | (Vadim Belman)++ | S02-names/pseudo-6e.t

[23:56] <Geth> ¦ roast/rakudo_3257: Additional tests for dynamic pseudo-packages

[23:56] <Geth> ¦ roast/rakudo_3257: 

[23:56] <Geth> ¦ roast/rakudo_3257: Support for rakudo/rakudo#3272

[23:56] <Geth> ¦ roast/rakudo_3257: review: https://github.com/perl6/roast/commit/23778fabf8

[23:56] <Geth> ¦ roast/rakudo_3257: b9c2cf695c | (Vadim Belman)++ | S02-names/pseudo-6e.t

[23:56] <Geth> ¦ roast/rakudo_3257: Add tests for dynamics within react/whenever blocks

[23:56] <Geth> ¦ roast/rakudo_3257: 

[23:56] <Geth> ¦ roast/rakudo_3257: When react runs under start it gets own continuation effectively loosing

[23:56] <Geth> ¦ roast/rakudo_3257: call stack and access to the outer dynamic variables.

[23:56] <Geth> ¦ roast/rakudo_3257: review: https://github.com/perl6/roast/commit/b9c2cf695c

