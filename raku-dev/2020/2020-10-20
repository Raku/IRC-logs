[00:28] *** ggoebel_ left
[01:50] <Geth> ¦ Blin: hythm7++ created pull request #26: Add Pakku to Blin Testers

[01:50] <Geth> ¦ Blin: review: https://github.com/Raku/Blin/pull/26

[02:29] *** HarmtH_ joined
[02:30] *** HarmtH left
[04:32] *** frost-lab joined
[04:37] *** frost-lab left
[04:48] *** frost-lab joined
[06:53] *** patrickb joined
[07:16] *** patrickb left
[08:19] *** domidumont joined
[09:12] *** sena_kun joined
[09:24] *** AlexDaniel` left
[09:24] *** unclechu left
[09:31] *** unclechu joined
[09:42] *** AlexDaniel` joined
[10:45] <MasterDuke> it would be awesome if a coverage report had filenames, line numbers, etc of the code that caused the rakudo code to run

[10:46] <MasterDuke> e.g., it says that Enumeration.Numeric is covered, but i can't easily find where/why in the spectests

[10:49] <MasterDuke> oh, i can at least easily get the filename

[10:53] <MasterDuke> oh, and i should have at least a guess of the linenumber. can probably hack something into the coverage parser script

[10:54] *** [Tux] left
[10:57] *** [Tux] joined
[10:57] <lizmat> MasterDuke++

[11:18] *** [Tux] left
[11:22] *** [Tux] joined
[12:05] *** frost-lab left
[13:14] *** squashable6 left
[13:15] *** squashable6 joined
[13:30] *** domidumont left
[14:01] *** domidumont joined
[14:07] *** domidumont left
[14:11] *** domidumont joined
[14:28] *** domidumont left
[14:29] *** domidumont joined
[14:40] *** domidumont left
[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 2 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:09] *** domidumont joined
[15:14] <[Tux]> Rakudo version 2020.09-74-g409737062 - MoarVM version 2020.09-12-g8c41f6692

[15:14] <[Tux]> csv-test-xs-20      0.380 -  0.395

[15:14] <[Tux]> csv-ip5xs           0.805 -  0.832

[15:14] <[Tux]> test-t --race       0.837 -  0.866

[15:14] <[Tux]> test-t              1.983 -  2.085

[15:14] <[Tux]> test                7.567 -  7.715

[15:14] <[Tux]> csv-ip5xs-20        7.893 -  8.168

[15:14] <[Tux]> test-t-20 --race    9.028 -  9.612

[15:14] <[Tux]> csv-parser         27.647 - 29.248

[15:14] <[Tux]> test-t-20          31.626 - 36.053

[15:34] *** domidumont left
[16:15] <codesections> Ok, after more back-and-forth with the lawyer (sigh) we've settled on adding the following message to the Rakudo welcome message (we can probably revert the capitalization in a few months, but the lawyer wants it for now)

[16:15] <codesections> Welcome to RAKUDO™ v2020.10 implementing

[16:15] <codesections> Welcome to RAKUDO™ v2020.10 implementing

[16:16] <codesections> RAKU™ Programming Language v6.d

[16:17] <codesections> (sorry for the duplicate first line)

[16:17] <codesections> (I meant to paste the second)

[16:19] *** sena_kun left
[16:20] *** sena_kun joined
[16:24] <codesections> .ask sena_kun do you still think we can add that pretty quickly?  We'd like to get a screenshot to the lawyer (for our trademark application) as soon as we can

[16:24] <tellable6> codesections, I'll pass your message to sena_kun

[16:55] <timotimo> why doesn't python have any tm in its startup message

[16:56] *** ggoebel joined
[16:56] <ggoebel> codesections: thank you for your work with the lawyers on trademarks (codesections++)

[17:01] <timotimo> maybe since they didn't put tm in their stuff we can steal their name

[17:03] <codesections> tin         

[17:07] <codesections> timotimo: :D I don't envy python's situation for trademarks -- they have a lot of statements about being named after Monty Python, which seems like it might complicate things

[17:14] <[Coke]> why does it have to be capitalized?

[17:15] <[Coke]> Did they give a reason?

[17:16] <codesections> They want the trademarked term to be visually distinct from the surrounding text

[17:17] <codesections> at first, they wanted it in bold and on its own line

[17:17] * lizmat is working on it

[17:18] <codesections> lizmat++

[17:20] <[Coke]> ... we can do bold.

[17:20] <lizmat> [Coke]  can we?  

[17:20] <timotimo> indeed

[17:20] <lizmat> you mean, use the unicode bold equivalent?

[17:20] <[Coke]> 𝐑𝐚𝐤𝐮𝐝𝐨™

[17:20] <timotimo> won't be as easy on windows, because not everywhere there's ansi.sys loaded

[17:20] <lizmat> wouldn't that hurt the searchability ?

[17:20] <timotimo> in fact, probably almost nowhere

[17:20] <[Coke]> He already has unicode TM in there. :

[17:20] <[Coke]> :)

[17:20] <[Coke]> fair.

[17:21] <[Coke]> torn between "work everywhere" and "hey, but we have unicode"

[17:21] <lizmat> codesections: thoughts on using 𝐑𝐚𝐤𝐮𝐝𝐨™ vs Rakudo™

[17:21] <lizmat> ?

[17:22] <timotimo> ρακUδο

[17:22] <lizmat> m: dd "𝐑𝐚𝐤𝐮𝐝𝐨".contains("Rakudo")

[17:22] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Bool::False␤»

[17:22] <lizmat> hmmm... I guess we could have a modifier for that  :)

[17:23] <lizmat> google handles 𝐑𝐚𝐤𝐮𝐝𝐨 fine

[17:23] <codesections> I guess there's also the option of using terminal escape codes for bold…

[17:24] <timotimo> you can never escape the terminal

[17:25] <codesections> But I'd probably say to stick with the all-caps version for now.  It's what the lawyer is expecting, and we can always change it later

[17:26] <[Coke]> yup, just anticipating the question on the behalf of others. (maybe we can include a little disclaimer in a faq to point people at.)

[17:26] <[Coke]> again, thanks for dealing with this issue.

[17:27] <codesections> happy to do so :D

[18:21] *** patrickb joined
[18:29] <Geth> ¦ rakudo: 80a4ada62e | (Elizabeth Mattijsen)++ | 3 files

[18:29] <Geth> ¦ rakudo: Add 𝐑𝐚𝐤𝐮𝐝𝐨™ and 𝐑𝐚𝐤𝐮™ welcome message

[18:29] <Geth> ¦ rakudo: 

[18:29] <Geth> ¦ rakudo: - to be shown when starting the REPL

[18:29] <Geth> ¦ rakudo: - to be shown when doing `raku -v`

[18:29] <Geth> ¦ rakudo: 

[18:29] <Geth> ¦ rakudo: As part of the effort of trademarking Rakudo and Raku.  codesections++

[18:29] <Geth> ¦ rakudo: for working with The Perl Foundation on this.

[18:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/80a4ada62e

[18:39] <lizmat> $ raku

[18:39] <lizmat> Welcome to 𝐑𝐚𝐤𝐮𝐝𝐨™ v2020.09-72-gd713e451a.

[18:39] <lizmat> Implementing the 𝐑𝐚𝐤𝐮™ programming Language v6.d.

[18:39] <lizmat> Built on MoarVM version 2020.09-12-g8c41f6692.

[18:41] <lizmat> argh... missed a L

[18:42] <Geth> ¦ rakudo: 4e9178f849 | (Elizabeth Mattijsen)++ | src/Perl6/Compiler.nqp

[18:42] <Geth> ¦ rakudo: Use consistent capitalization

[18:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4e9178f849

[18:47] <codesections> Thanks, lizmat!  Should I build from master and grab a screenshot or should we do a point release?  I kind of think the point release would be better since that's what is more public ally 

[18:48] <codesections> *publicly available 

[18:49] <codesections> (and since the version number will be different/shorter)

[18:55] <tbrowder> .tell niner requested changes have been made

[18:55] <tellable6> tbrowder, I haven't seen niner around, did you mean nine?

[18:56] <lizmat> codesections: I could shorten the versions for now, just for the screenshot

[18:56] <lizmat> doing a point release for this feels...  icky ?

[18:56] <tbrowder> .tell nine  requested changes have been made

[18:56] <tellable6> tbrowder, I'll pass your message to nine

[18:56] <tbrowder> .tell vrurg requested changes have been made

[18:56] <tellable6> tbrowder, I'll pass your message to vrurg

[18:59] <codesections> Well, we *are* representing to the trademark office that this message currently appears in a launch screen -- I'm not wild about doing that with a modified message that requires building from souce

[18:59] <[Coke]> when is the next release expected?

[19:00] <[Coke]> (a point build would have to cherry pick that change)

[19:00] <lizmat> codesections: how about the REPL only showing the main parts of the version

[19:00] <lizmat> and the raku-v version the whole thing

[19:00] <MasterDuke> releasable6: status

[19:00] <releasable6> MasterDuke, Next release in ≈3 days and ≈23 hours. 2 blockers. 0 out of 76 commits logged

[19:00] <releasable6> MasterDuke, Details: https://gist.github.com/f9d6cd8871bf6012daa0e4d2b7a0854a

[19:01] <codesections> lizmat: that seems like a good compromise

[19:03] <codesections> especially if/assuming both messages are in the next release, and that release is pretty soon a

[19:10] <lizmat> $ raku

[19:10] <lizmat> Welcome to 𝐑𝐚𝐤𝐮𝐝𝐨™ v2020.09.

[19:10] <lizmat> Implementing the 𝐑𝐚𝐤𝐮™ programming language v6.d.

[19:10] <lizmat> Built on MoarVM version 2020.09.

[19:10] <lizmat> $ raku -v

[19:10] <lizmat> Welcome to 𝐑𝐚𝐤𝐮𝐝𝐨™ v2020.09-75-g80a4ada62.

[19:10] <lizmat> Implementing the 𝐑𝐚𝐤𝐮™ programming language v6.d.

[19:10] <lizmat> Built on MoarVM version 2020.09-12-g8c41f6692.

[19:11] <codesections> looks perfect.  Tn

[19:11] <codesections> *thanks

[19:12] <codesections> (wow, I can't type today!)

[19:12] <Geth> ¦ rakudo: bae905ef6a | (Elizabeth Mattijsen)++ | 2 files

[19:12] <Geth> ¦ rakudo: Add shorten-versions named and use that for the REPL

[19:12] <Geth> ¦ rakudo: 

[19:12] <Geth> ¦ rakudo: So that REPL users won't need to see "strange" version numbers,

[19:12] <Geth> ¦ rakudo: even if they're not running a released version.

[19:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bae905ef6a

[19:12] *** sena_kun left
[19:13] <codesections> I'll build from master and get the screenshot

[19:14] <lizmat> codesections++

[19:30] <Geth> ¦ rakudo/nativecall-fix-reverted: 272d48ad03 | (Elizabeth Mattijsen)++ | 2 files

[19:30] <Geth> ¦ rakudo/nativecall-fix-reverted: Revert "Fix NativeCall/C++ to allow double instantiation"

[19:30] <Geth> ¦ rakudo/nativecall-fix-reverted: 

[19:30] <Geth> ¦ rakudo/nativecall-fix-reverted: This reverts commit ecaf334c851de35c6e8fbca6a4012bcc4d21246c.

[19:30] <Geth> ¦ rakudo/nativecall-fix-reverted: review: https://github.com/rakudo/rakudo/commit/272d48ad03

[19:31] <lizmat> .tell sena_kun created a branch with the NativeCall fix reverted, for easier Blin testing: nativecall-fix-reverted

[19:31] <tellable6> lizmat, I'll pass your message to sena_kun

[19:35] <nine> lizmat: thanks for taking care of that!

[19:35] <tellable6> 2020-10-20T18:56:44Z #raku-dev <tbrowder> nine  requested changes have been made

[19:36] <nine> huh....requested changes to what?

[19:40] <MasterDuke> nine: something with https://github.com/rakudo/rakudo/pull/3973 perhaps?

[19:56] <Geth> ¦ rakudo: 41a76cadd1 | (Tom Browder)++ | src/core.c/IO/Path.pm6

[19:56] <Geth> ¦ rakudo: Add fix for issue #3971

[19:56] <Geth> ¦ rakudo: 

[19:56] <Geth> ¦ rakudo: File modified:

[19:56] <Geth> ¦ rakudo: 

[19:56] <Geth> ¦ rakudo:     src/core.c/IO/Path.pm6

[19:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/41a76cadd1

[19:56] <Geth> ¦ rakudo: 134adcf953 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/IO/Path.pm6

[19:56] <linkable6> RAKUDO#3971 [open]: https://github.com/rakudo/rakudo/issues/3971 [BLOCKER] Attempting to copy a directory to an existing file throws but destroys the file

[19:56] <Geth> ¦ rakudo: Merge pull request #3973 from tbrowder/clobber

[19:56] <Geth> ¦ rakudo: 

[19:56] <Geth> ¦ rakudo: Fix issue #3971: attempt to copy a directory to a file destroys the file!

[19:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/134adcf953

[19:57] <nine> Oh....I didn't realize that he only changed the PR description, not the commit message itself :(

[19:57] <Geth> ¦ roast: ce40139279 | (Tom Browder)++ | S32-io/copy.t

[19:57] <Geth> ¦ roast: Add test for issue #3971

[19:57] <Geth> ¦ roast: 

[19:57] <Geth> ¦ roast: This commit:

[19:57] <Geth> ¦ roast: 

[19:57] <Geth> ¦ roast: + Adds a new subtest

[19:57] <Geth> ¦ roast: 

[19:57] <Geth> ¦ roast: File affected:

[19:57] <Geth> ¦ roast: 

[19:57] <Geth> ¦ roast:     S32-io/copy.t

[19:57] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ce40139279

[19:57] <Geth> ¦ roast: 7df3c21006 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S32-io/copy.t

[19:57] <Geth> ¦ roast: Merge pull request #690 from tbrowder/clobber

[19:57] <Geth> ¦ roast: 

[19:57] <Geth> ¦ roast: Add test for issue #3971

[19:57] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/7df3c21006

[19:59] <lizmat> nine: how do you change a commit message after it has been pushed ?

[19:59] <nine> amend, then force push

[20:01] <lizmat> well, that introduces a race condition, no ?

[20:01] <nine> ?

[20:01] <MasterDuke> you should only force push to branches, not to master

[20:01] <MasterDuke> generally

[20:02] <nine> yes

[20:02] <lizmat> you could lose commits on master that way ?

[20:02] <nine> Oh, no, I misunderstood the question then

[20:02] <nine> on master there's just no good way

[20:04] <lizmat> ah, and since it was a PR, ok

[20:21] <timotimo> you can push --force-with-lease or something like that

[20:21] <timotimo> it will only actually do the force if what you locally have as the previous version of the remote branch is still actually there on the remote

[20:21] <timotimo> yes that's the right name

[20:28] *** ggoebel left
[20:29] <nine> still not a good idea with github as it might upset repos that are updated on push notifications

[20:42] <Geth> ¦ nqp: patrickbkr++ created pull request #677: Bump MoarVM

[20:42] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/677

[20:46] <Geth> ¦ nqp: 4b531cb6b0 | (Patrick Böker)++ | tools/templates/MOAR_REVISION

[20:46] <Geth> ¦ nqp: Bump MoarVM

[20:46] <Geth> ¦ nqp: 

[20:46] <Geth> ¦ nqp: This pulls in functions to reset STD IO handles. They are required for an

[20:46] <Geth> ¦ nqp: upcoming change in Rakudo.

[20:46] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/4b531cb6b0

[20:46] <Geth> ¦ nqp: 503f2a33ed | (Patrick Böker)++ (committed using GitHub Web editor) | tools/templates/MOAR_REVISION

[20:46] <Geth> ¦ nqp: Merge pull request #677 from patrickbkr/moar-bump

[20:46] <Geth> ¦ nqp: 

[20:46] <Geth> ¦ nqp: Bump MoarVM

[20:46] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/503f2a33ed

[20:57] *** patrickb left
[21:06] <Geth> ¦ rakudo/mathematical-succ-pred: f4910fc019 | (Elizabeth Mattijsen)++ | 2 files

[21:06] <Geth> ¦ rakudo/mathematical-succ-pred: Add Mathematical char ranges to .succ / .pred handling

[21:06] <Geth> ¦ rakudo/mathematical-succ-pred: review: https://github.com/rakudo/rakudo/commit/f4910fc019

[21:07] <Geth> ¦ rakudo: lizmat++ created pull request #3974: Add Mathematical char ranges to .succ / .pred handling

[21:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3974

[21:08] <lizmat> and that concludes my hacking for today&

[21:18] <tbrowder> .tell nine i changed msg too

[21:18] <tellable6> tbrowder, I'll pass your message to nine

[21:23] <tbrowder> .tell nine sorry, i'm mistaken again. i should have cancelled the PR and resubmitted with a better log as i've done in the past

[21:23] <tellable6> tbrowder, I'll pass your message to nine

[21:34] <tbrowder> if someone can revert the two merges i could resubmit them with better commit msgs

[21:35] <lizmat> tbrowder: would that change the code of the PR ?

[21:36] <tbrowder> i would save the code changes and resubmit a new a

[21:36] <tbrowder> new PR with same changes for rakudo and roast.

[21:37] <tbrowder> the window on git fools me every time, so sorry i think it is the commit msg

[21:38] <tbrowder> going to save changes now...

[21:39] <lizmat> if there are no code changes, I would be against reverting and resubmitting

[21:40] <lizmat> so the commit message was not optimal: it wouldn't be the first  :-)

[22:04] <tbrowder> ok, whew, AlexDaniel` had some very pertinent comments, and added the most recent issue discussing the ramifications of the underlying issues. this was a band-aid for the issue found while working on File::Copy so we can try to fix those issues.

[22:04] <AlexDaniel`> it's not a bad thing to have for a user-friendly error message

[22:05] <tbrowder> *this pr is a band-aid on a surface scab

[22:05] <AlexDaniel`> basically “hey, you're trying to use `copy` on a directory, you can't do that”

[22:05] <tbrowder> exactly, and it should save my poor file

[22:06] <AlexDaniel`> so if you change the check to just `self.d and fail X::IO::Copy.new …` then it starts to make sense

[22:06] <AlexDaniel`> then you can probably add the same to `move` too

[22:07] <AlexDaniel`> but in the end we have to figure out how to get libuv to bail if it opens a directory… and I have no idea how to approach that

[22:08] <tbrowder> well, i first want to get dir with files to copy, but i thought this was too important not to put in core immediately even though other issues can be worked on in the module.

[22:09] <tbrowder> elf

[22:09] <AlexDaniel`> it is not important, `copy` is inherently a destructive operation for the destination

[22:11] <tbrowder> well my concern is for someone who makes a stupid mistake

[22:12] <tbrowder> as i did

[22:13] <tbrowder> anyhoo, glad it awakened interest   :-D

[22:13] <AlexDaniel`> but it has to be at least two mistakes :) One to assume that `copy` even works for dirs as sources, then also to run it with a destination that is a file

[22:15] <tbrowder> true, but i was trying to be exhaustive writing cases when i discovered the clobber

[22:15] <AlexDaniel`> I don't mind telling the user that whatever they're trying to do doesn't make sense, but the key here is source, not the destination

[22:15] <AlexDaniel`> as for making `copy` work on directories… should it? Was there a decision?

[22:15] <tbrowder> agree, but we're going toward allowing it, just not yet

[22:16] <tbrowder> no, no decision that i know of. i just said i wanted to develop a module to help investigate os issues.

[22:18] <AlexDaniel`> if anything, I find `copy` to be ambiguous and confusing. Maybe having separate `copyfile` and `copydir` is better

[22:19] <AlexDaniel`> and `copy` can just be made to call `copyfile` for now, some sort of soft deprecation will do I think

[22:22] <AlexDaniel`> ah btw the relevant libuv code seems to be here: https://github.com/libuv/libuv/blob/ed5b42d5b70b69f4c84f99e4112233375b17d6a4/src/unix/fs.c#L1136-L1307

[22:23] <AlexDaniel`> and yeah, that doesn't help. It just opens the source, whatever it is

[22:27] <tbrowder> ok, that's for later. i agree with ugexe that there should be separate io::dir and io::file classes.

[22:40] *** linkable6 left
[22:40] *** evalable6 left
[22:41] *** linkable6 joined
[22:43] *** evalable6 joined
[23:33] *** nebuchadnezzar left
[23:34] *** nebuchadnezzar joined
[23:57] <tbrowder> at the moment i am focusing on the copy subroutine and using it to do most if not all of the copying other than file-to-file

