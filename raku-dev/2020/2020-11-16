[01:01] *** lucasb left
[04:27] *** yuplushi left
[05:35] *** frost-lab joined
[06:26] <Geth_> ¦ z: 6124ea79c7 | (Stoned Elipot)++ | 2 files

[06:26] <Geth_> ¦ z: Fix 'q' command

[06:26] <Geth_> ¦ z: 

[06:26] <Geth_> ¦ z: While here add support for VISUAL environment variable.

[06:26] <Geth_> ¦ z: review: https://github.com/Raku/z/commit/6124ea79c7

[06:26] <Geth_> ¦ z: 48852abc58 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[06:26] <Geth_> ¦ z: Merge pull request #8 from Raku/fix-q

[06:26] <Geth_> ¦ z: 

[06:26] <Geth_> ¦ z: Fix 'q' command

[06:26] <Geth_> ¦ z: review: https://github.com/Raku/z/commit/48852abc58

[06:28] <Geth_> ¦ z: 07924c4446 | (Trey Harris)++ | README.md

[06:28] <Geth_> ¦ z: Add install instructions  for calling z by another name

[06:28] <Geth_> ¦ z: 

[06:28] <Geth_> ¦ z: The [/rupa/z](/rupa/z) script for maintaining a dynamic directory

[06:28] <Geth_> ¦ z: cache is quite popular and included in some Linux distributions.

[06:28] <Geth_> ¦ z: 

[06:28] <Geth_> ¦ z: So the README should probably explain how to install this `z` under a

[06:28] <Geth_> ¦ z: different name (since _that_ `z`, being a shell function, can't be

[06:28] <Geth_> ¦ z: easily renamed without forking the code).

[06:28] <Geth_> ¦ z: review: https://github.com/Raku/z/commit/07924c4446

[06:28] <Geth_> ¦ z: 4a0959a676 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | README.md

[06:28] <Geth_> ¦ z: Merge pull request #6 from treyharris/docs-aliasing-script

[06:28] <Geth_> ¦ z: 

[06:28] <Geth_> ¦ z: Add install instructions  for calling z by another name

[06:28] <Geth_> ¦ z: review: https://github.com/Raku/z/commit/4a0959a676

[06:32] <moritz> what's z?

[07:12] <Geth_> ¦ roast: dumarchie++ created pull request #698: Cover push/unshift with multiple values

[07:12] <Geth_> ¦ roast: review: https://github.com/Raku/roast/pull/698

[07:17] <Geth_> ¦ rakudo: dumarchie++ created pull request #4035: Don't flatten values passed to push/unshift

[07:17] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4035

[08:01] *** Merfont left
[08:01] *** Merfont joined
[08:05] <Geth_> ¦ rakudo: 07c951314e | (Peter du Marchie van Voorthuysen)++ | 2 files

[08:05] <Geth_> ¦ rakudo: Add Windows specific build instructions

[08:05] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/07c951314e

[08:05] <Geth_> ¦ rakudo: 5b282cfc15 | (Peter du Marchie van Voorthuysen)++ | CAVEATS.md

[08:05] <Geth_> ¦ rakudo: Assert that building with MinGW should be possible

[08:05] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5b282cfc15

[08:05] <Geth_> ¦ rakudo: 9070d5cb77 | (Patrick Böker)++ (committed using GitHub Web editor) | 2 files

[08:05] <Geth_> ¦ rakudo: Merge pull request #4030 from dumarchie/Windows-Build

[08:05] <Geth_> ¦ rakudo: 

[08:05] <Geth_> ¦ rakudo: Add Windows specific build instructions

[08:05] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9070d5cb77

[08:10] *** domidumont joined
[08:29] *** Kaeipi joined
[08:29] *** Merfont left
[08:30] *** patrickb joined
[08:33] <patrickb> moritz: z (https://github.com/Raku/z) is a script to support a raku core dev to deal with the rakudo/nqp/moar repos. I automates things like bumping, testing, pulling.

[08:33] <tellable6> 2020-11-15T18:16:49Z #raku-dev <[Coke]> patrickb - got the latest invite... brings me to a 401 page still. ah well

[08:34] <moritz> patrickb: ah, thanks

[08:38] <patrickb> lizmat, Altai-man: AzureCI does indeed cover all test scenarios Travis (and CircleCI and AppVeyor) covers. The only reason we didn't shut the others down yet, is that I wanted to give us some time to make sure Azure is not breaking on us. The capability of doing a re-test seems to be a bit fragile (possibly only because people tend to fail to find

[08:38] <patrickb> the button). But I'm a bit reluctant to look into this, as I'm working on a tool to orchestrate the entire CI stack anyways.

[08:43] <patrickb> Btw. I'm thinking about applying for a grant for the CI manager program in the hopes that will allow me to work on it more often. (I do tend to finish stuff I set out to do. But experience has shown that I often need a long time, because I can't allocate the time to work things.)

[08:47] *** frost-lab left
[08:49] *** frost-lab joined
[08:51] *** patrickb left
[08:57] *** travis-ci joined
[08:57] <travis-ci> Rakudo build errored. Patrick Böker 'Merge pull request #4030 from dumarchie/Windows-Build

[08:57] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/743887592 https://github.com/rakudo/rakudo/compare/1f090e04dcd4...9070d5cb7778

[08:57] *** travis-ci left
[09:15] *** eater left
[09:16] *** eater joined
[09:59] *** sena_kun joined
[10:07] *** maggotbrain left
[11:10] <AlexDaniel`> 6c: my @a = 42; push @a, (42, 50), (50, 30); dd @a

[11:10] <committable6> AlexDaniel`, https://gist.github.com/97df52a4d67a587a0794e711fe72670e

[11:11] <AlexDaniel`> bisect: my @a = 42; push @a, (42, 50), (50, 30); dd @a

[11:11] <bisectable6> AlexDaniel`, Will bisect the whole range automagically because no endpoints were provided, hang tight

[11:12] <bisectable6> AlexDaniel`, Output on all releases: https://gist.github.com/27b6feb10e9d566fc5cd0901265d6ac1

[11:12] <bisectable6> AlexDaniel`, Bisecting by output (old=2020.02.1 new=2020.05.1) because on both starting points the exit code is 0

[11:12] <bisectable6> AlexDaniel`, bisect log: https://gist.github.com/a0cafa0b4f2f8a6acede4cdfed98c740

[11:12] <bisectable6> AlexDaniel`, (2020-03-31) https://github.com/rakudo/rakudo/commit/385ab4cfce38a8b8d959ddd3bd07a549f2d96639

[11:12] <bisectable6> AlexDaniel`, Output on all releases and bisected commits: https://gist.github.com/95e3671da87c452aabeccd90c60699d4

[11:28] *** MasterDuke left
[11:39] <Geth_> ¦ rakudo: lizmat self-assigned Inconsistent flattening by push and unshift https://github.com/rakudo/rakudo/issues/4034

[11:47] <AlexDaniel`> hm, is append even working

[11:48] <AlexDaniel`> 6c: my @a = 42; @a.append: (42, 50), (60, 60); dd @a

[11:48] <committable6> AlexDaniel`, ¦6c (48 commits): «Array @a = [42, (42, 50), (60, 60)]␤»

[11:49] <AlexDaniel`> absolutely not what I expected but OK, maybe it's meant to be this way

[11:52] <lizmat> append uses the single arg rule ?

[11:52] <lizmat> my @a = 42; @a.append: (42, 50); dd @a

[11:52] <evalable6> lizmat, rakudo-moar 9070d5cb7: OUTPUT: «Array @a = [42, 42, 50]␤»

[11:53] <AlexDaniel`> 6c: my @a = 42; push @a, (), (), (); dd @a

[11:53] <lizmat> 6c: my @a = 42; push @a, (), (), (); dd @a

[11:53] <committable6> AlexDaniel`, https://gist.github.com/ef9af3d06ffd7013227c0fb9f02b794e

[11:53] <AlexDaniel`> whoops

[11:53] <committable6> lizmat, https://gist.github.com/d706445497e5394db4ca4b9dc60b417c

[11:54] <AlexDaniel`> I gtg and won't file a ticket for this, but maybe it's related to that last issue

[11:54] <lizmat> guess it's the same issue

[12:10] *** Altai-man joined
[12:13] *** sena_kun left
[12:29] *** domidumont left
[12:30] *** domidumont joined
[12:40] <Geth_> ¦ rakudo: e45bcd53da | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 13 files

[12:40] <Geth_> ¦ rakudo: Reorganize array shaping (#4016)

[12:40] <Geth_> ¦ rakudo: 

[12:40] <Geth_> ¦ rakudo: This doesn't change any functionality, it just makes the code better

[12:40] <Geth_> ¦ rakudo: maintainable and changes some names:

[12:40] <Geth_> ¦ rakudo: 

[12:40] <linkable6> RAKUDO#4016 [closed]: https://github.com/rakudo/rakudo/pull/4016 Reorganize array shaping

[12:40] <Geth_> ¦ rakudo:   TypedArray    -> Array::Typed

[12:40] <Geth_> ¦ rakudo:   ShapedArray   -> Array::Shaped

[12:40] <Geth_> ¦ rakudo: <…commit message has 15 more lines…>

[12:40] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e45bcd53da

[12:47] <Geth_> ¦ rakudo/expose-objecthash-role: 50 commits pushed by (Vadim Belman)++, (Elizabeth Mattijsen)++, (Peter du Marchie van Voorthuysen)++, (Stoned Elipot)++, (Patrick Böker)++

[12:47] <Geth_> ¦ rakudo/expose-objecthash-role: review: https://github.com/rakudo/rakudo/compare/fce3f7764e6e...bdbb71a039ae

[13:29] <Geth_> ¦ rakudo: 1a6cf78770 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 13 files

[13:29] <Geth_> ¦ rakudo: Expose Hash::Object/Hash::Typed roles (#4013)

[13:29] <Geth_> ¦ rakudo: 

[13:29] <Geth_> ¦ rakudo: These roles used to be internal to the Hash class.  By exposing them

[13:29] <Geth_> ¦ rakudo: it is possible to use them for easy typechecking and dispatch.

[13:29] <Geth_> ¦ rakudo: 

[13:29] <Geth_> ¦ rakudo: This makes the rather esoteric check:

[13:29] <linkable6> RAKUDO#4013 [closed]: https://github.com/rakudo/rakudo/pull/4013 Expose Hash::Object/Hash::Typed roles

[13:29] <Geth_> ¦ rakudo: 

[13:29] <Geth_> ¦ rakudo: <…commit message has 15 more lines…>

[13:29] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1a6cf78770

[14:23] *** frost-lab left
[14:29] <Geth_> ¦ rakudo: Altai-man assigned to lizmat Issue Blin 2020.11, round 2 https://github.com/rakudo/rakudo/issues/4037

[14:29] <Geth_> ¦ rakudo: Altai-man assigned to vrurg Issue Blin 2020.11, round 2 https://github.com/rakudo/rakudo/issues/4037

[14:29] *** Geth_ left
[14:29] *** Geth joined
[14:47] <lizmat> bisectable6: use nqp; dd nqp::getattr(nqp::create(Parameter),Parameter,q/$!nominal_type/)

[14:47] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:47] <bisectable6> lizmat, Output on all releases: https://gist.github.com/0f171b5189afaea2bbb6da2b7690238f

[14:47] <bisectable6> lizmat, Bisecting by exit code (old=2020.10 new=1a6cf78). Old exit code: 0

[14:48] <bisectable6> lizmat, bisect log: https://gist.github.com/2f9c139b30e08531b5554f1db7172c28

[14:48] <bisectable6> lizmat, (2020-11-15) https://github.com/rakudo/rakudo/commit/178c85353bdbdc08ab644cf9398de74fe4025233

[14:48] <bisectable6> lizmat, Bisecting by output (old=2016.10 new=2016.11) because on both starting points the exit code is 0

[14:48] <bisectable6> lizmat, bisect log: https://gist.github.com/ca1749435fa82ea02165c811901f32d7

[14:48] <bisectable6> lizmat, (2016-10-20) https://github.com/rakudo/rakudo/commit/94d73091fa49c3ff950954dfc52e0d090e31e6eb

[14:48] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/68f36d72990eb1146567942f40d2f3ad

[14:58] <vrurg> lizmat: Parameter now has just `$!type`.

[14:59] <lizmat> yeah, so the module was doing naughty things and is now caught  :-(

[14:59] <vrurg> We knew it back then when once was discussing it. Don't remember the context, but it was talked about. :)

[15:00] <lizmat> warning this is module is experimental and subject to change

[15:00] <lizmat> warning this module uses unspec'd rakudo internals and could break without warning

[15:01] <vrurg> Anyway, I don't know how you use the attribute, but if $!type is a cercion then you have.^nominal_type, .^target_type, and .^constraint_type.

[15:02] <lizmat> I think it goes further than that: nqp::bindattr_i($param,Parameter,'$!flags',128);

[15:03] <lizmat> didn't the values of flags also change ?

[15:03] <vrurg> Only added one for coercive parameter.

[15:05] <lizmat> https://github.com/LLFourn/p6-DispatchMap/issues/2

[15:05] <lizmat> afk for a  bit&

[15:10] *** lucasb joined
[15:27] * [Coke] test

[15:29] <nwc10> [Coke]: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-11-16#l148

[15:53] <nine> Pretty bizarre:

[15:53] <nine> m: module A::B { class A::B { }; class C::A::B { }; class X::A::B { }; }; my A::B $b; my X::A::B $x; my C::A::B $c;

[15:53] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5===␤Type 'C::A::B' is not declared␤at <tmp>:1␤------> 3}; my A::B $b; my X::A::B $x; my C::A::B7⏏5 $c;␤Malformed my␤at <tmp>:1␤------> 3 }; my A::B $b; my X::A::B $x; my C::A::7⏏5B $c;␤␤»

[15:55] <[Coke]> nwc10: thank you, was a wrong window. :)

[16:11] *** sena_kun joined
[16:12] *** Altai-man left
[16:12] <nine> vrurg: I seem to recall you working on these multi part name declaration issues at some point?

[16:14] <vrurg> nine: The only related thing coming to mind are relaxed resolutions to simplify references to parameterized roles.

[16:15] <vrurg> Ah, nested modules... It was all wrong was I was doing, to start with. 

[16:15] <vrurg> *what I was doing

[16:16] <vrurg> m: module A::B { class A::B { }; class C::A::B is export { }; class X::A::B { }; }; my A::B $b; my X::A::B $x; my C::A::B $c;

[16:16] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5===␤Type 'C::A::B' is not declared␤at <tmp>:1␤------> 3}; my A::B $b; my X::A::B $x; my C::A::B7⏏5 $c;␤Malformed my␤at <tmp>:1␤------> 3 }; my A::B $b; my X::A::B $x; my C::A::7⏏5B $c;␤␤»

[16:17] <vrurg> m: module A::B { class A::B { }; class C::A::B is export { }; class X::A::B { }; }; my A::B $b; my X::A::B $x; my B $c;

[16:17] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5===␤Type 'B' is not declared␤at <tmp>:1␤------> 3 { }; }; my A::B $b; my X::A::B $x; my B7⏏5 $c;␤Malformed my␤at <tmp>:1␤------> 3:B { }; }; my A::B $b; my X::A::B $x; my7⏏5 B $c;␤␤»

[16:17] <vrurg> m: module A::B { class A::B { }; class C::A::B { }; class X::A::B { }; }; my A::B $b; my X::A::B $x; my A::B::C::A::B $c;

[16:17] <camelia> rakudo-moar 85847d2f1: ( no output )

[16:17] <nine> But I guess you learned a bit about how this stuff is supposed to work? Because...I cannot imagine what we have now is really that

[16:18] <vrurg> Actually, I don't see what's wrong about it. C::A::B is declared under A::B namespace. So, it's actually A::B::C::A::B

[16:18] <vrurg> m: module A::B { class A::B { }; class C is export { }; class C::A::B is export { }; class X::A::B { }; }; my A::B $b; my X::A::B $x; my C::A::B $c;

[16:18] <camelia> rakudo-moar 85847d2f1: ( no output )

[16:19] <vrurg> ^ this is how you get C::A::B available outside of A::B

[16:19] <nine> That's actually the one that I understand :) By the same logic though X::A::B should become A::B::X::A::B and class A::B should become A::B::A::B

[16:19] <vrurg> Ah, A::B... Sure, it's all wrong.

[16:19] <vrurg> m: module A::B { class A::B { }; class C is export { }; class C::A::B is export { }; class X::A::B { }; }; my A::B::A::B $b; my X::A::B $x; my C::A::B $c;

[16:19] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5===␤Type 'A::B::A::B' is not declared␤at <tmp>:1␤------> 3{ }; class X::A::B { }; }; my A::B::A::B7⏏5 $b; my X::A::B $x; my C::A::B $c;␤Malformed my␤at <tmp>:1␤------> 3 { }; class X::A::B { }; }; my A::B::A::7⏏5B…»

[16:20] <vrurg> It's no doubt a bug.

[16:20] <nine> m: class A::B { method Str() { "right" }; class A::B { method Str() { "wrong!" } } }; say A::B.Str

[16:20] <camelia> rakudo-moar 85847d2f1: OUTPUT: «wrong!␤»

[16:20] <vrurg> I'd say they whole namespacing needs at least some refurbishing.

[16:21] <nine> Trouble is that this bug is actually depended on in the wild by modules like OpenSSL: unit module OpenSSL::Stack; class OpenSSL::Stack { ... }

[16:21] <vrurg> I think the problem is caused by the outer A::B being stubbed at the point where the inner one is declared. 

[16:22] <vrurg> Then we'd have to patch OpenSSL. Because it just must not be this way.

[16:22] <nine> https://github.com/rakudo/rakudo/blob/master/src/Perl6/World.nqp#L1651

[16:24] <vrurg> Unfortunately, I have to go. And yes, it's about the location I was stumbling upon long ago and thinking that there is a problem with it.

[16:24] <nine> That ^^^ is the code responsible for this surprising behaviour. Looks pretty intentional. Also the X::A::B part is depended on in the wild by e.g. Inline::Perl5.

[16:25] <vrurg> I guess it was supposed to handle stubs, not incomplete outers.

[16:25] * vrurg is afk

[16:30] *** MasterDuke joined
[16:43] <vrurg> nine: I got back for a minute. As I think about it more and more, the thing looks entirely wrong to me. Names must be scoped. Perhaps worth a problem-solving to think more about it, but so far I'd be fore removing that functionality.

[16:43] * vrurg is afk again

[16:43] <nine> Good thing is that it's easy to do in a language version dependent way

[18:14] <nine> Why oh why am I fighting with merge_globals when I could have the deserialization code that I already generate have add those package symbols to the target's globals directly?

[18:16] <nine> Oh I know: because it's yet another intrusive change on top of all the other changes and I'd rather have things settle down

[18:43] *** domidumont left
[19:00] <releasable6> Next release in ≈4 days and ≈23 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:02] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/11/16/2020-46-coercion-renewed/

[19:10] <MasterDuke> lizmat++ (if you care, `sub foo(Int() $f {` is missing a closing paren)

[19:11] <lizmat> oops  :-)  fixed  # MasterDuke++

[19:13] * lizmat wonders how many people will recognize where that picture was taken  :-)

[19:14] <MasterDuke> not i

[19:15] <nwc10> oh, am I supposed to? :-)

[19:15] <nwc10> if so, was it the venue for GPW 2018?

[19:17] <lizmat> nope

[19:17] <lizmat> the building was completed in 1966

[19:17] <nine> Florida?

[19:18] <lizmat> yup

[19:26] <nine> It is kinda hard to think about anything else today - at least if you're watching the live stream all day :)

[19:28] <lizmat> you mean the spacex launch ?

[19:31] <nwc10> That's so last week, er last night. The real hardcore fun is watching the crane, I mean this thing: https://www.youtube.com/watch?v=Ky5l9ZxsG9M

[19:31] *** MasterDuke left
[19:31] <lizmat> aaaahhhh

[19:32] <nine> Ah, tank watchers!

[19:32] <nwc10> Yes. Sometimes the tanks fly.

[19:32] <lizmat> but... that's Texas ?

[19:32] <nwc10> Other times they explode.

[19:32] <nine> it is

[19:32] <lizmat> so what was nine watching in FL ?

[19:32] <nwc10> Yes. Almost Mexico

[19:32] <nine> Crew-1

[19:37] <lizmat> ah, ok, watched the launch live last night

[19:38] <lizmat> afk for a bit&

[19:42] <Geth> ¦ roast: fc3f24592a | (Christian Bartolomäus)++ | 3 files

[19:42] <Geth> ¦ roast: [JVM] Fudge for fallout of new coercion semantics

[19:42] <Geth> ¦ roast: 

[19:42] <Geth> ¦ roast: These tests are dying after (or have been added with) the merge of

[19:42] <Geth> ¦ roast: https://github.com/rakudo/rakudo/pull/4019.

[19:42] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/fc3f24592a

[19:44] <bartolin> vrurg: ^^ spectest showed some fallout on the JVM backend. nothing serious, I'd say. I'll try to understand what goes wrong

[19:44] <bartolin> vrurg++

[19:47] <Geth> ¦ roast: mienaikage++ created pull request #699: Add test for trailing declarator on conditionally set attribute

[19:47] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/699

[20:10] *** Altai-man joined
[20:12] *** sena_kun left
[21:02] <Geth> ¦ rakudo: a3ed02042e | (Christian Bartolomäus)++ | src/vm/jvm/runtime/org/raku/rakudo/Binder.java

[21:02] <Geth> ¦ rakudo: [JVM] Recompute HOW before calling coerce

[21:02] <Geth> ¦ rakudo: 

[21:02] <Geth> ¦ rakudo: In the case of a generic type that needs instantiation (::T, T)

[21:02] <Geth> ¦ rakudo: paramType gets a new value. Therefore it wasn't correct to only

[21:02] <Geth> ¦ rakudo: compute HOW once, at the top of bindOneParam (cmp. of 34bc0b9147).

[21:02] <Geth> ¦ rakudo: 

[21:02] <Geth> ¦ rakudo: This fixes test failures in S06-signature/type-capture.t.

[21:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a3ed02042e

[21:06] <Geth> ¦ roast: 3c9cf75f1e | (Christian Bartolomäus)++ | S06-signature/type-capture.t

[21:06] <Geth> ¦ roast: [JVM] Unskip tests that find coercion method again

[21:06] <Geth> ¦ roast: 

[21:06] <Geth> ¦ roast: Fixed with https://github.com/rakudo/rakudo/commit/a3ed02042e

[21:06] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3c9cf75f1e

[21:07] <bartolin> sorry for the noise (fudge/unfudge), but I didn't really expect to find a quick fix for any of the failing tests

[21:09] <vrurg> bartolin: thanks. On my side I was never even able to complete `make test`. So, I don't even try spectesting on JVM.

[21:13] <nine> To answer my own question: if I forgo merge_globals the code I generate has to become a lot smarter. Since there's no merge I cannot blindly add stub packages but have to use existing ones if they already exist - or actually still merge if the existing one is a stub. I.e. I'd have to generate code that does much of merge_globals.

[21:14] <nine> Might still be worth it as it has the potential to fix existing bugs, but boy, that's a lot of work again...

[21:18] <vrurg> nine: worse if the work would have to be re-done later. The documentation states that `use` is a lexical things. But, in fact, it is not. And worse, I suspect the effects of a use inside a lexical block could propagate to a 3rd party module code.

[21:19] <bartolin> vrurg: you're welcome. Sadly 'make test' doesn't work (it uses the EvalServer which leaks threads and memory). But it is possible to run the test files from roast one after the other. (I have to admit that I don't do that for Rakudo's test ...)

[21:20] <vrurg> bartolin: maybe it worth re-implementing harness to make it get around the EvalServer problem? 

[21:25] <nwc10> and sometimes they melt the engines: https://www.youtube.com/watch?v=1yjAife58eU&feature=youtu.be#t=4m20s

[21:27] <bartolin> vrurg: I took a quick look and I'm actually using the script t/spec/test_summary without further tweaks. It shouldn't be too hard to do something similar for 'make test'. (But I'm kind of afraid to see the results ;))

[21:28] <nwc10> The astute quote being: Failure is an option here. If things are not failing, you are not innovating enough.

[21:48] *** MasterDuke joined
[22:08] *** wildtrees joined
[22:18] *** Xliff left
[22:36] *** eater left
[22:37] *** eater joined
[23:05] *** MasterDuke left
[23:19] *** Altai-man left
[23:26] *** raku-bridge left
[23:26] *** raku-bridge joined
[23:26] *** raku-bridge left
[23:26] *** raku-bridge joined
[23:36] *** travis-ci joined
[23:36] <travis-ci> Rakudo build passed. Christian Bartolomäus '[JVM] Recompute HOW before calling coerce

[23:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/744043062 https://github.com/rakudo/rakudo/compare/1a6cf7877036...a3ed02042e2d

[23:36] *** travis-ci left
