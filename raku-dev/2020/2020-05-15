[00:25] *** Xliff joined
[01:05] *** patrickz left
[01:19] *** MoniAlvarez joined
[01:22] *** MoniAlvarez left
[06:34] *** jjmerelo joined
[06:48] <nine> patrickb: what kind of commit message is "asdf"?? Please write useful commit messages that tell us what the user visible effect is and why a change was needed.

[06:48] <tellable6> nine, I'll pass your message to patrickb

[06:49] <nine> patrickb: and please develop in a branch or your own fork and only push working results to master

[06:49] <tellable6> nine, I'll pass your message to patrickb

[07:09] *** patrickb joined
[07:17] *** jjmerelo left
[07:19] *** Altai-man_ joined
[07:20] <patrickb> .tell vrurg I'm hunting a JVM / Windows build error. Here is the failure: https://github.com/Raku/nqp/issues/629 Any ideas?

[07:20] <tellable6> patrickb, I'll pass your message to vrurg

[07:20] <patrickb> .tell bartolin I'm hunting a JVM / Windows build error. Here is the failure: https://github.com/Raku/nqp/issues/629 Any ideas?

[07:20] <tellable6> patrickb, I'll pass your message to bartolin_

[08:02] <nine> Looks like it's not actually $*UNIT that leaks into the EVAL. But the EVAL's $*UNIT picks up the outer $*UNIT's statements somehow

[08:11] *** jjmerelo joined
[08:11] <jjmerelo> Nice

[08:12] <jjmerelo> (some CSV benchmark below 1.8)

[08:23] *** ufobat_ left
[08:26] *** sena_kun joined
[08:27] *** Altai-man_ left
[08:56] <Geth> ¦ rakudo/master: 5 commits pushed by (Patrick Böker)++

[08:56] <Geth> ¦ rakudo/master: ae07d68512 | Set up CI with Azure Pipelines

[08:56] <Geth> ¦ rakudo/master: 43213e4935 | Remove binary release building configuration on CircleCI

[08:56] <Geth> ¦ rakudo/master: 55529de1a3 | Binary release guide doc: Adapt to Azure Pipelines

[08:56] <Geth> ¦ rakudo/master: 78fe25b81f | Add a testing configuration to Azure Pipelines

[08:56] <Geth> ¦ rakudo/master: 3e487cb772 | Merge pull request #3675 from patrickbkr/azure-pipelines

[08:56] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/f33ce01c11f3...3e487cb7728c

[09:00] <nine> patrickb: oh, those were actually in your own fork and you did everything right! But why did I get notifications about those commits from Github? It says rakudo/rakudo in the mails

[09:00] <patrickb> nine: How many did you receive?

[09:00] <tellable6> 2020-05-15T06:48:04Z #raku-dev <nine> patrickb: what kind of commit message is "asdf"?? Please write useful commit messages that tell us what the user visible effect is and why a change was needed.

[09:00] <tellable6> 2020-05-15T06:49:15Z #raku-dev <nine> patrickb: and please develop in a branch or your own fork and only push working results to master

[09:02] <patrickb> nine: I'm not sure why they leaked out actually...

[09:02] <nine> patrickb: oh, I think, I understand now. You created the pull request and pushed more commits to your branch after that and Github sent notifications to rakudo devs because they became part of the PR

[09:03] <nine> I even clicked on the link, made sure it pointed to the rakudo repository and looked at the commit tab, to ensure the commits actually landed in rakudo master before saying anything

[09:09] <Geth> ¦ rakudo: 42c37997a7 | (Patrick Böker)++ (committed using GitHub Web editor) | README.md

[09:09] <Geth> ¦ rakudo: Add a build badge for Azure Pipelines

[09:09] <Geth> ¦ rakudo: 

[09:09] <Geth> ¦ rakudo: This will show the commit test status of the master branch as reported by Azure Pipelines.

[09:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/42c37997a7

[09:09] <nine> Clarification: the EVAL doesn't pick up statements, but the top level QAST::Block objects that get added to the $*UNIT block after the QAST::Stmts

[09:09] <nine> Now where do those get added?

[09:29] <Geth> ¦ rakudo: 4085cfdc64 | (Patrick Böker)++ | azure-pipelines.yml

[09:29] <Geth> ¦ rakudo: Fix CI failures when commits are added fast

[09:29] <Geth> ¦ rakudo: 

[09:29] <Geth> ¦ rakudo: With a fetch depth of 1 azure pipelines will always clone the master branch

[09:29] <Geth> ¦ rakudo: with only the top most commit and then try to check out the commit that

[09:29] <Geth> ¦ rakudo: is to be tested. This fails when commits are added quickly, because then

[09:29] <Geth> ¦ rakudo: test jobs that weren't fast enough to start will check clone only the newly

[09:29] <Geth> ¦ rakudo: added commit and then checking out the commit to test fails because that's

[09:29] <Geth> ¦ rakudo: not part of the cloned repository.

[09:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4085cfdc64

[09:30] <timotimo> nine: is it broken without the optimizer, too? it's not impossible that the optimizer may play it a little fast and loose with  modifying qast nodes's child lists and perhaps not cloning deep enough etc

[09:31] <nine> timotimo: yes. I already see that we took a wrong turn when running the outer unit's comp_unit action

[09:32] <timotimo> OK

[09:34] <nine> The outer and inner compiler's Worlds do share some state in the Perl6CompilationContext object. This state even includes the lex pads. But I can't find any code that would use this state when adding blocks to the unit

[09:35] <timotimo> OK

[09:46] *** andreoss joined
[09:47] <nine> There is something we share that we really shouldn't: CHECK blocks - like the one NativeCall exports to its user

[09:48] <nine> Unsharing them actually fixes my reduced test case! Alas, not the similar error in Inline::Perl5

[09:58] *** ufobat joined
[10:10] <patrickb> It's absolutely necessary that JVM build errors do not cause a CI run to fail, correct?

[10:14] <sena_kun> patrickb, why?

[10:16] <sena_kun> patrickb, passing tests is another matter, but to be able to at least _build_ JVM build - I'd say that's mandatory.

[10:17] <patrickb> That's what we have been doing for a long time now. I think the idea is that JVM tends to fail and is not fixed immediately and we do not want to hide moar build failures this way.

[10:18] <patrickb> sena_kun: State of the Azure CI is that JVM is built and tested, but JVM failures are *not* ignored. They do cause the build to fail. It's difficult to make it a warning. Azure misses that feature.

[10:19] <sena_kun> patrickb, test failures or build failures?

[10:19] <patrickb> Now I'm unsure whether this is a "just accept" or "make it work no matter the cost" case.

[10:19] <patrickb> At the moment both.

[10:19] <sena_kun> Sacrifice test failures, but not build failures, I'd say.

[10:20] <patrickb> need to leave... Back in ~1.5h

[10:20] <sena_kun> o/

[10:22] <sena_kun> patrickb, there is no need to ignore build failures for any cases. I don't see a real issue with it "hiding moar build failures". Devs are building moar a lot anyway.

[10:25] *** Altai-man_ joined
[10:27] *** sena_kun left
[10:36] <timotimo> we could potentially turn rakudo-moar and rakudo-jvm into different "projects" on azure or whatever, so that they report as two individual build statuses

[10:39] <Geth> ¦ nqp: andreoss++ created pull request #630: [jvm] Rename s/perl6/raku/ & rebootstrap

[10:39] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/630

[10:42] <andreoss> MasterDuke: i took a shortcut by not having two sets of packages for bootstraping, and directly altered stage0 jars at bytecode level

[10:46] <andreoss> i hope it's fine. I tried to extend existing classes with new package, but it produced a lot of issues on NQP side

[10:58] <lizmat> Files=1306, Tests=111291, 214 wallclock secs (28.88 usr  8.60 sys + 3009.43 cusr 276.10 csys = 3323.01 CPU)

[10:59] <Geth> ¦ rakudo: lizmat self-assigned slurp routine with :enc("utf16") broken https://github.com/rakudo/rakudo/issues/3691

[11:17] <Geth> ¦ roast: tbrowder++ created pull request #644: Add test for Rakudo issue GH #3682

[11:17] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/644

[11:22] <MasterDuke> andreoss: do you have a companion PR for rakudo in the works?

[11:24] <andreoss> MasterDuke: yep, I'm working on it rn. They need to be merged at the same time?

[11:26] <MasterDuke> yeah, kind of

[11:27] *** evalable6 left
[11:28] <MasterDuke> once you have the rakudo PR ready, i would suggest merging the nqp pr, then updating the rakudo pr to bump the nqp version required so it pulls in the new nqp at the same time

[11:28] *** evalable6 joined
[11:33] *** Kaiepi left
[11:33] *** Kaiepi joined
[11:36] <Geth> ¦ rakudo: eeb4f43f87 | (Stefan Seifert)++ | 2 files

[11:36] <Geth> ¦ rakudo: Fix BEGIN time EVAL accidentally running CHECK phasers of the outer comp unit

[11:36] <Geth> ¦ rakudo: 

[11:36] <Geth> ¦ rakudo: This could cause wird compilation errors about missing static code refs for

[11:36] <Geth> ¦ rakudo: closures. Fix by simply not sharing the list of CHECK blocks with a nested

[11:36] <Geth> ¦ rakudo: compiler.

[11:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eeb4f43f87

[11:39] <MasterDuke> nice. think there are any open issues this might have fixed?

[11:48] <nine> No idea....truth is I don't look at the issue list much since I get a steady supply of things to fix from my own work ;)

[11:57] <lizmat> nine: I'm afraid you forgot to push BeginTimeEvalAndNativeCall

[11:58] <nine> oh darn

[11:59] <Geth> ¦ rakudo: b874c68eb7 | (Stefan Seifert)++ | t/packages/02-rakudo/lib/BeginTimeEvalAndNativeCall.rakumod

[11:59] <Geth> ¦ rakudo: Add missing test module

[11:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b874c68eb7

[12:00] <lizmat> whee!

[12:26] *** sena_kun joined
[12:27] *** Altai-man_ left
[12:29] *** travis-ci joined
[12:29] <travis-ci> Rakudo build failed. Stefan Seifert 'Fix BEGIN time EVAL accidentally running CHECK phasers of the outer comp unit

[12:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/687398435 https://github.com/rakudo/rakudo/compare/4085cfdc6487...eeb4f43f875b

[12:29] *** travis-ci left
[12:34] <lizmat> should be fixed in the next commit :-)

[12:50] *** jjmerelo left
[12:59] <tbrowder> can anyone knowledgeable of the dev of sprintf give me some help on the NYI features, particularly the int modifiers like 'l', 'll', 'L', etc.?

[13:01] <[Coke]> lizmat: oh no, more os x code names! (I made that script so I could decode them, because I never remember what they are!)

[13:02] <lizmat> I think this list is quite enough  :-)

[13:02] <lizmat> I mean, the oldest is more than 10 years ago, no ?

[13:03] <lizmat> 2001 even

[13:04] <lizmat> also, then PowerPC, so any hardware from then running Raku would be   abysmally slow, if it even had enough memory to run Raku  :-)

[13:06] <tbrowder> i would like to implement them with raku numerics behind the scene but i want to ensure the "semantics" are okay. in my experience, those modifiers in the C world were to ensure sprintf could handle a number of up to that size. i think we are able to do that while letting the raku number handlers take care of the native side.

[13:11] <tbrowder> i guess i need to look at the details of the c lib...

[13:13] <[Tux]> Rakudo version 2020.05.1-117-gb874c68eb - MoarVM version 2020.05-12-g3605efdbf

[13:13] <[Tux]> csv-test-xs-20      0.386 -  0.405

[13:13] <[Tux]> test-t --race       0.839 -  0.877

[13:13] <[Tux]> csv-ip5xs           0.853 -  0.878

[13:13] <[Tux]> test-t              1.871 -  1.961

[13:13] <[Tux]> test                7.463 -  7.569

[13:13] <[Tux]> csv-ip5xs-20        8.044 -  8.903

[13:13] <[Tux]> test-t-20 --race    8.744 -  9.764

[13:13] <[Tux]> csv-parser         25.743 - 26.816

[13:13] <[Tux]> test-t-20          31.717 - 32.737

[13:18] <tbrowder> ok, a refresh look at perl's sprintf doc helps enough, thnx

[13:24] *** vrurg_ joined
[13:26] *** vrurg left
[13:28] *** vrurg joined
[13:31] *** vrurg_ left
[13:34] <Geth> ¦ rakudo: c2e8b22f7b | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[13:34] <Geth> ¦ rakudo: Fix "١٢٣".Numeric and "١٢٣".Int

[13:34] <Geth> ¦ rakudo: 

[13:34] <Geth> ¦ rakudo: - a0e5841 broke this, apparently MoarVM only uses 0..9 for implicit conversion

[13:34] <Geth> ¦ rakudo: - makes "123".Numeric.Int about 1.7x **slower**

[13:34] <Geth> ¦ rakudo: - perhaps we need a CCLASS_DECIMAL class to quickly check for 0..9

[13:34] <Geth> ¦ rakudo:   This would allow the speedup to be brought back again

[13:34] <Geth> ¦ rakudo: - fixes R#3694

[13:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c2e8b22f7b

[13:34] <linkable6> R#3694 [open]: https://github.com/rakudo/rakudo/issues/3694 Unicode numeric digit strings no longer coercible to Numeric

[13:37] <nine> Oh, the remaining missing static code ref in Inline::Perl is actually one from the EVALed code: Serialization Error: missing static code ref for closure '<unit-outer>(nested)' (/home/nine/test/precomp2/lib/A.pm6 (A):1)

[13:37] <Geth> ¦ rakudo: vrurg self-assigned INSTALL.txt out of date https://github.com/rakudo/rakudo/issues/3693

[13:48] <Geth> ¦ roast: 0172bf5bb5 | (Elizabeth Mattijsen)++ | S02-literals/numeric.t

[13:48] <Geth> ¦ roast: Add tests for R#3694

[13:48] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0172bf5bb5

[13:48] <linkable6> R#3694 [open]: https://github.com/rakudo/rakudo/issues/3694 Unicode numeric digit strings no longer coercible to Numeric

[13:51] <nine> I think I know where the static code ref issue about <unit-outer> is coming from: One is just not supposed to be keeping that object around but run it exactly once before we start serialization

[13:52] <MasterDuke> there are some weird issues around BEGIN, precomp, etc. e.g., https://github.com/rakudo/rakudo/issues/2592

[13:53] <nine> MasterDuke: is that one reproducible at HEAD? It may have been fixed by the $*OUT.flush additions to precompilation code. But really, using say that way in precompiled code is not a good idea.

[13:54] <MasterDuke> i just tried it, exact same behavior

[13:54] <MasterDuke> but why does .note() work?

[13:54] <MasterDuke> and .print

[13:55] <MasterDuke> but not .put

[13:56] <nine> Precompilation uses STDOUT for communicating between the precompilation process and it's parent

[13:58] <MasterDuke> ah

[14:01] <lizmat> afk for a few hours&

[14:25] *** Altai-man_ joined
[14:27] *** sena_kun left
[15:10] *** jjmerelo joined
[15:27] *** [Tux] left
[15:41] *** [Tux] joined
[15:42] *** domidumont joined
[16:16] *** Voldenet left
[16:22] *** Voldenet joined
[16:22] *** Voldenet left
[16:22] *** Voldenet joined
[16:25] *** sena_kun joined
[16:27] *** Altai-man_ left
[17:02] *** domidumont left
[17:21] *** patrickb left
[17:23] *** patrickb joined
[17:24] *** patrickz joined
[17:27] *** patrickb left
[18:13] *** jjmerelo left
[18:13] *** lichtkind joined
[18:25] *** Altai-man_ joined
[18:27] <Geth> ¦ rakudo: 5b4faed304 | (Patrick Böker)++ | azure-pipelines.yml

[18:27] <Geth> ¦ rakudo: Fix build artifact publishing

[18:27] <Geth> ¦ rakudo: 

[18:27] <Geth> ¦ rakudo: Artifacts names must be unique. When trying to publish an artifact with a

[18:27] <Geth> ¦ rakudo: name that already exists an "ArtifactExistsException" is thrown and the

[18:27] <Geth> ¦ rakudo: job fails. To solve this we don't explicitly specify the artifact name

[18:27] <Geth> ¦ rakudo: which should then default to a name autogenerated based on the job name.

[18:27] <Geth> ¦ rakudo: See https://github.com/MicrosoftDocs/azure-devops-docs/issues/6765#issue-541875716

[18:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5b4faed304

[18:27] *** sena_kun left
[18:39] <Geth> ¦ roast: b5603799fa | (JJ Merelo)++ | integration/advent2010-day03.t

[18:39] <Geth> ¦ roast: Fixes integration test

[18:39] <Geth> ¦ roast: 

[18:39] <Geth> ¦ roast: And this one really closes #640

[18:39] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b5603799fa

[18:39] <Geth> ¦ roast: a011d15283 | (JJ Merelo)++ | integration/advent2010-day03.t

[18:39] <Geth> ¦ roast: Convert to IO paths as requested

[18:39] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a011d15283

[18:39] <linkable6> ROAST#640 [closed]: https://github.com/Raku/roast/issues/640 Roast depends on Rakudo when it shouldn't

[18:39] <Geth> ¦ roast: b995655d95 | (Vadim Belman)++ (committed using GitHub Web editor) | integration/advent2010-day03.t

[18:39] <Geth> ¦ roast: Merge pull request #642 from JJ/master

[18:39] <Geth> ¦ roast: 

[18:39] <Geth> ¦ roast: Fixes integration test

[18:39] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b995655d95

[18:41] <patrickz> vrurg: wrt the gmake bug: AFAIK the build process has both nmake and gmake available. How can I force it to prefer nmake over gmake?

[18:42] <vrurg> patrickz: it looks reasonable to just disable gmake on Win altogether.

[18:42] <tellable6> 2020-05-15T07:20:06Z #raku-dev <patrickb> vrurg I'm hunting a JVM / Windows build error. Here is the failure: https://github.com/Raku/nqp/issues/629 Any ideas?

[18:43] <patrickz> vrurg: Won't we kill building with the mingw/cygwin pipeline then?

[18:44] <vrurg> Does it work now? 

[18:44] <Geth> ¦ roast: 8d30d3af57 | (Tom Browder)++ (committed using GitHub Web editor) | S32-str/sprintf.t

[18:44] <Geth> ¦ roast: Add test for Rakudo issue GH #3682 (#644)

[18:44] <Geth> ¦ roast: 

[18:44] <Geth> ¦ roast: The issue was an LTA error for interpolated '$' symbols in sprintf

[18:44] <Geth> ¦ roast: format strings.

[18:44] <Geth> ¦ roast: 

[18:44] <Geth> ¦ roast: This commit:

[18:44] <Geth> ¦ roast: 

[18:44] <Geth> ¦ roast: <…commit message has 7 more lines…>

[18:45] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8d30d3af57

[18:45] <vrurg> patrickz: actually, nmake is given preference over gmake in autodetect if msvc compiler is found too.

[18:53] <patrickz> vrurg: Interesting! Then something I didn't expect is happening. I'll look deeper. Thank you!

[19:11] <lizmat> .tell jjmerelo looks like integration/advent2010-day03.t is severely broken

[19:11] <tellable6> lizmat, I'll pass your message to jjmerelo

[19:13] <Geth> ¦ rakudo: 799d627a48 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[19:13] <Geth> ¦ rakudo: Restructure IO::Path.slurp a bit

[19:13] <Geth> ¦ rakudo: 

[19:13] <Geth> ¦ rakudo: - mostly for readability, using ternaries instead of nqp::if

[19:13] <Geth> ¦ rakudo: - don't store the blob in the method, pass it on as is

[19:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/799d627a48

[19:21] *** MasterDuke left
[19:30] *** [Tux] left
[20:01] *** Kaeipi joined
[20:02] *** Kaiepi left
[20:26] *** sena_kun joined
[20:28] *** Altai-man_ left
[20:40] *** andreoss left
[20:43] *** MasterDuke joined
[20:59] <Geth> ¦ rakudo: adfa192bc1 | (Patrick Böker)++ | azure-pipelines.yml

[20:59] <Geth> ¦ rakudo: Partially fix building the JVM in AzureCI

[20:59] <Geth> ¦ rakudo: 

[20:59] <Geth> ¦ rakudo: Installation still fails with a different error.

[20:59] <Geth> ¦ rakudo: 

[20:59] <Geth> ¦ rakudo: Windows has a maximum PATH variable length of 2048 (depending on

[20:59] <Geth> ¦ rakudo: how it's accessed). The length of PATH in AzureCI is already

[20:59] <Geth> ¦ rakudo: really tight. When building the JVM backend we run into the limit

[20:59] <Geth> ¦ rakudo: when we add Java and the MS BuildTools to the path.

[20:59] <Geth> ¦ rakudo: To work around this, we remove a bunch of stuff we won't need

[20:59] <Geth> ¦ rakudo: from PATH.

[21:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/adfa192bc1

[21:05] <patrickz> ^ The joys of using Windows. :-P

[21:18] <vrurg> And they still call it an OS...

[21:27] <vrurg> I'm considering removing mentions of '--with-moar' and '--with-nqp' from INSTALL.txt. These are rather advanced stuff for those who understand what they're doing.

[21:27] * vrurg is afk for couple of hours

[21:43] *** [Tux] joined
[21:44] *** [Tux] left
[21:47] *** [Tux] joined
[21:52] *** ufobat_ joined
[21:56] *** ufobat left
[22:00] *** sena_kun left
[22:01] <[Tux]> system up-and-running again on SSD

[22:05] <[Tux]> new timings tomorrow

[22:07] *** patrickz left
[22:08] <MasterDuke> system feels faster?

[23:42] *** lichtkind left
