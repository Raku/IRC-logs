[00:03] <Geth> ¦ rakudo: vrurg++ created pull request #3689: Fix main-version.nqp dependencies

[00:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3689

[00:42] *** lucasb left
[01:17] <Geth> ¦ rakudo: b71cb3ae7c | (Vadim Belman)++ | 2 files

[01:17] <Geth> ¦ rakudo: Fix main-version.nqp dependencies

[01:17] <Geth> ¦ rakudo: 

[01:17] <Geth> ¦ rakudo: Make it depend on the list of files used to build SHA digest.

[01:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b71cb3ae7c

[01:17] <Geth> ¦ rakudo: b5f23aa0d0 | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[01:17] <Geth> ¦ rakudo: Merge pull request #3689 from vrurg/fix-main-version-deps

[01:17] <Geth> ¦ rakudo: 

[01:17] <Geth> ¦ rakudo: Fix main-version.nqp dependencies

[01:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b5f23aa0d0

[01:21] *** pamplemousse left
[02:06] <Geth> ¦ rakudo: c988f83291 | (Tom Browder)++ | 2 files

[02:06] <Geth> ¦ rakudo: Improve error message for too many directives in routine `sprintf`

[02:06] <Geth> ¦ rakudo: 

[02:06] <Geth> ¦ rakudo: Fix GH issue #3682

[02:06] <Geth> ¦ rakudo: 

[02:06] <Geth> ¦ rakudo: The problem is the erroneous use of a '$' symbol in the sprintf format

[02:06] <Geth> ¦ rakudo: statement does not give a hint of that possibility in the original

[02:06] <Geth> ¦ rakudo: exception code. That, coupled with incomplete sprintf documentation,

[02:06] <linkable6> RAKUDO#3682 [open]: https://github.com/rakudo/rakudo/issues/3682 LTA error msg with improper use of '$' in format string

[02:06] <Geth> ¦ rakudo: <…commit message has 8 more lines…>

[02:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c988f83291

[02:06] <Geth> ¦ rakudo: c75d25c570 | (Tom Browder)++ (committed using GitHub Web editor) | 2 files

[02:06] <Geth> ¦ rakudo: Merge pull request #3688 from tbrowder/sprintf-err

[02:06] <Geth> ¦ rakudo: 

[02:06] <Geth> ¦ rakudo: Improve error message for too many directives in routine `sprintf`

[02:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c75d25c570

[04:32] *** sena_kun joined
[04:37] *** sena_kun left
[04:38] *** sena_kun joined
[06:04] *** Altai-man_ joined
[06:06] *** sena_kun left
[07:18] *** jjmerelo joined
[07:49] *** MasterDuke left
[08:04] *** MasterDuke joined
[08:05] *** sena_kun joined
[08:07] *** Altai-man_ left
[08:24] <sena_kun>  

[08:43] *** jjmerelo left
[09:18] <[Tux]> Rakudo version 2020.05.1-80-gc75d25c57 - MoarVM version 2020.05-10-g5fe4a8114

[09:18] <[Tux]> csv-test-xs-20      0.385 -  0.386

[09:18] <[Tux]> test-t --race       0.809 -  0.828

[09:18] <[Tux]> csv-ip5xs           0.822 -  0.837

[09:18] <[Tux]> test-t              1.874 -  1.874

[09:18] <[Tux]> test                7.267 -  7.422

[09:18] <[Tux]> csv-ip5xs-20        8.212 -  8.510

[09:19] <[Tux]> test-t-20 --race    8.640 -  9.470

[09:19] <[Tux]> csv-parser         24.399 - 26.301

[09:19] <[Tux]> test-t-20          30.518 - 32.805

[09:34] <lizmat> Files=1306, Tests=111281, 213 wallclock secs (28.57 usr  8.28 sys + 2994.20 cusr 271.76 csys = 3302.81 CPU)

[09:45] *** squashable6 left
[09:45] *** squashable6 joined
[10:04] *** Altai-man_ joined
[10:07] *** sena_kun left
[10:07] *** MasterDuke left
[10:14] *** patrickb joined
[10:18] *** lichtkind joined
[10:53] <nine> MasterDuke: I got a change log entry "When we're (int|num)ifying a list or hash..." in NQP. That's rather unhelpful. The commit subject should describe in very few words the user visible change (Fix blah, Speed up bleh, Add support for whatever...)

[10:53] <tellable6> nine, I'll pass your message to MasterDuke

[10:54] <Geth> ¦ rakudo: 3ee1777a6b | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[10:54] <Geth> ¦ rakudo: Make "42".Int about 4.3x faster

[10:54] <Geth> ¦ rakudo: 

[10:54] <Geth> ¦ rakudo: - by the magic of removing code

[10:54] <Geth> ¦ rakudo: - other types of values remain as fast / slow as they were

[10:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3ee1777a6b

[11:06] <lizmat> grrr... the same change that yesterday made Inine::Perl5 fail because of version mismatch with Actions.nqp

[11:06] <lizmat> now works like a charm, probabiy because there have been other changes

[11:06] <lizmat> so it's starting to feel to me some kind of boundary problem that isn't being tickled anymore

[11:09] <nine> lizmat: vrurg fixed the build system, so changes in Actions.nqp no longer break installed modules

[11:09] <lizmat> aaah,,  b71cb3ae7c79ea5e95fa

[11:09] <linkable6> (2020-05-12) https://github.com/rakudo/rakudo/commit/b71cb3ae7c Fix main-version.nqp dependencies

[11:10] <lizmat> ok.... vrurg++

[11:12] <Geth> ¦ rakudo: 37533ee66e | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp

[11:12] <Geth> ¦ rakudo: Use the more idiomatic FLATTENABLE_LIST

[11:12] <Geth> ¦ rakudo: 

[11:12] <Geth> ¦ rakudo: Because that's what it is for: to de-HLLize a HLL Array in NQP.

[11:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/37533ee66e

[11:16] <Geth> ¦ rakudo: cfc3e57f62 | (Donald Hunter)++ | src/core.c/Rakudo/Internals.pm6

[11:16] <Geth> ¦ rakudo: Truncate .gist output for multidim arrays

[11:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cfc3e57f62

[11:16] <Geth> ¦ rakudo: 4bfe5bd5b7 | (Donald Hunter)++ | src/core.c/Rakudo/Internals.pm6

[11:16] <Geth> ¦ rakudo: Clean up whitespace

[11:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4bfe5bd5b7

[11:16] <Geth> ¦ rakudo: 1464310b1d | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Rakudo/Internals.pm6

[11:16] <Geth> ¦ rakudo: Merge pull request #3685 from donaldh/multidim-gist

[11:16] <Geth> ¦ rakudo: 

[11:16] <Geth> ¦ rakudo: Truncate .gist output for multidim arrays

[11:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1464310b1d

[11:16] <Geth> ¦ roast: f607f389ea | (Donald Hunter)++ | S09-multidim/methods.t

[11:16] <Geth> ¦ roast: Update .gist tests for multidim arrays

[11:16] <Geth> ¦ roast: 

[11:16] <Geth> ¦ roast: This updates tests to match https://github.com/rakudo/rakudo/pull/3685

[11:16] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f607f389ea

[11:16] <Geth> ¦ roast: 708faddae3 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S09-multidim/methods.t

[11:16] <Geth> ¦ roast: Merge pull request #643 from donaldh/multidim-gist

[11:16] <Geth> ¦ roast: 

[11:16] <Geth> ¦ roast: Update .gist tests for multidim arrays

[11:17] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/708faddae3

[11:23] <Geth> ¦ rakudo: 8d5a0f7026 | (Tim Smith)++ | 2 files

[11:23] <Geth> ¦ rakudo: Fix .comb(Str) to ensure non-overlapping results

[11:23] <Geth> ¦ rakudo: 

[11:23] <Geth> ¦ rakudo: It is expected that .comb() returns non-overlapping results, and

[11:23] <Geth> ¦ rakudo: .comb('aa') should yield the same results as .comb(/aa/).

[11:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8d5a0f7026

[11:23] <Geth> ¦ rakudo: a4ea2c78b4 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[11:23] <Geth> ¦ rakudo: Merge pull request #3668 from softmoth/comb-str

[11:23] <Geth> ¦ rakudo: 

[11:23] <Geth> ¦ rakudo: Fix .comb(Str) to ensure non-overlapping results

[11:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a4ea2c78b4

[11:24] <Geth> ¦ roast: c9425490dd | (Tim Smith)++ | 3 files

[11:24] <Geth> ¦ roast: Test "aaaa".comb("aa") gives non-overlapping results

[11:24] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c9425490dd

[11:24] <Geth> ¦ roast: 1ca0b17c4f | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 3 files

[11:24] <Geth> ¦ roast: Merge pull request #639 from softmoth/comb-str

[11:24] <Geth> ¦ roast: 

[11:24] <Geth> ¦ roast: Test "aaaa".comb("aa") gives non-overlapping results

[11:24] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/1ca0b17c4f

[11:25] *** MasterDuke joined
[11:28] *** jjmerelo joined
[11:36] <Geth> ¦ rakudo: 3b4794f4ae | (Ben Davies)++ | src/core.c/Mu.pm6

[11:36] <Geth> ¦ rakudo: Allow typechecking of any instance against Mu

[11:36] <Geth> ¦ rakudo: 

[11:36] <Geth> ¦ rakudo: Smartmatching of Mu.new against Mu itself would throw before. This fixes

[11:36] <Geth> ¦ rakudo: that, but causes problems with smartmatching with junctions.

[11:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3b4794f4ae

[11:36] <Geth> ¦ rakudo: 840d3e8101 | (Ben Davies)++ | 3 files

[11:36] <Geth> ¦ rakudo: Improve smartmatching with junctions

[11:36] <Geth> ¦ rakudo: 

[11:37] <Geth> ¦ rakudo: The last commit breaks smartmatching for junctions. While the compiler

[11:37] <Geth> ¦ rakudo: could handle their threading when smartmatching, this would break any

[11:37] <Geth> ¦ rakudo: existing code that has ACCEPTS candidates for junctions. Giving it a

[11:37] <Geth> ¦ rakudo: default ACCEPTS candidate allows existing code to work again.

[11:37] <Geth> ¦ rakudo: 

[11:37] <Geth> ¦ rakudo: While not strictly necessary for this to work, this also moves handling

[11:37] <Geth> ¦ rakudo: of junction smartmatching from Any to Mu. This allows `any(Mu, Any) ~~

[11:37] <Geth> ¦ rakudo: Mu` to return `True` instead of `False`.

[11:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/840d3e8101

[11:37] <Geth> ¦ rakudo: f0594084e8 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 3 files

[11:37] <Geth> ¦ rakudo: Merge pull request #3614 from Kaiepi/mu-any-junction-smartmatching

[11:37] <Geth> ¦ rakudo: 

[11:37] <Geth> ¦ rakudo: Improve smartmatching against Mu/Any/Junction

[11:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f0594084e8

[11:49] *** patrickb left
[11:54] *** patrickb joined
[12:00] *** travis-ci joined
[12:00] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make "42".Int about 4.3x faster

[12:00] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/686518347 https://github.com/rakudo/rakudo/compare/c75d25c570cf...3ee1777a6b78

[12:00] *** travis-ci left
[12:02] <lizmat> ^^ some transient connectivity failure, can't restart the job though  :-(

[12:05] *** sena_kun joined
[12:07] *** Altai-man_ left
[12:08] <patrickb> .tell rba Prebuilt releases of rakudo for 2020.05.1 are available for download from https://rooster.uber.space/patcloud/index.php/s/qmkreEJLQDZcjbf (as always). Can you upload to rakudo.org? Thank you!

[12:08] <tellable6> patrickb, I'll pass your message to rba

[12:09] *** jjmerelo left
[12:10] <patrickb> sena_kun: Sorry for messing up the release. And thank you for pulling 2020.05.1 off. I hope we'll manage to prevent such fallouts in the future.

[12:10] <tellable6> 2020-05-09T18:23:17Z #raku-dev <El_Che> patrickb thanks for the heads-up. Weirdly enough my relocatable tar.gz for linux does not seem to be broken.

[12:10] <tellable6> 2020-05-09T18:23:46Z #raku-dev <El_Che> patrickb: ~/Downloads/rakudo-2020.05/bin$ ./raku -v\nThis is Rakudo version 2020.05 built on MoarVM version 2020.05\nimplementing Raku 6.d.

[12:10] <tellable6> 2020-05-09T18:27:09Z #raku-dev <El_Che> patrickb Oh, I found the github issue for the Windows problem. You're right, NativeCall seems broken on Linux too

[12:10] <tellable6> 2020-05-10T15:00:52Z #raku-dev <El_Che> patrickb: The problem is fixed for relocatable linux as well. patrickb++

[12:10] *** patrickb left
[12:11] <sena_kun> patrickb++ # no problem as long as we can have more tests. :)

[12:25] *** travis-ci joined
[12:25] <travis-ci> Rakudo build errored. Sylvain Colinet 'Make the 'is' routine in Test not throwing an error on failure when the type can't be stringified, falling back on .raku instead.

[12:25] <travis-ci> https://travis-ci.com/Skarsnik/rakudo/builds/165709125 https://github.com/Skarsnik/rakudo/compare/8befe9120d20...33d3bc11fbee

[12:25] *** travis-ci left
[12:28] <nine> Why would BEGIN time EVAL stuff cause us to throw serialization errors due to missing static frames for totally random seeming frames like { $obj.HOW.compose($obj, :$compiler_services) }? 

[12:28] <nine> s/frames/closures/

[12:31] *** samcv left
[12:31] *** samcv joined
[12:44] *** [TuxCM] left
[12:53] *** travis-ci joined
[12:53] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Use the more idiomatic FLATTENABLE_LIST

[12:53] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/686523244 https://github.com/rakudo/rakudo/compare/3ee1777a6b78...37533ee66e65

[12:53] *** travis-ci left
[13:00] *** travis-ci joined
[13:00] <travis-ci> Rakudo build errored. Sylvain Colinet 'Make the 'is' routine in Test not throwing an error on failure when the type can't be stringified, falling back on .raku instead.

[13:00] <travis-ci> https://travis-ci.com/Skarsnik/rakudo/builds/165710315 https://github.com/Skarsnik/rakudo/compare/33d3bc11fbee...7cf8f4345866

[13:00] *** travis-ci left
[13:08] <lizmat> tyil: I think the module bot is awol again

[13:08] <lizmat> or maybe I'm too fast  :-)

[13:12] <[Coke]> I saw an update for your module on #raku

[13:22] <lizmat> argh, looking in the wrong places again  :-(

[13:23] <lizmat> tyil: sorry for the noise

[13:29] <tyil> np

[13:42] *** pamplemousse joined
[13:44] *** MasterDuke left
[13:52] *** MasterDuke joined
[14:04] *** Altai-man_ joined
[14:07] *** sena_kun left
[14:12] <Geth> ¦ nqp/new-disp: 031d8f9ff7 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[14:12] <Geth> ¦ nqp/new-disp: Basic compilation of new dispatch operation

[14:12] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/031d8f9ff7

[14:12] <Geth> ¦ nqp/new-disp: 582cf22c86 | (Jonathan Worthington)++ | t/moar/53-dispatch.t

[14:12] <Geth> ¦ nqp/new-disp: An initial test for the new dispatchers

[14:12] <Geth> ¦ nqp/new-disp: 

[14:12] <Geth> ¦ nqp/new-disp: Failing at time of commit.

[14:12] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/582cf22c86

[14:12] <Geth> ¦ nqp/new-disp: 69f9a65419 | (Jonathan Worthington)++ | 2 files

[14:12] <Geth> ¦ nqp/new-disp: Mark literal call arguments in callsites

[14:12] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/69f9a65419

[15:06] *** lichtkind left
[15:47] <gfldex> Is there a reason why IO::Path can tell me that a file is not 0 size but can't give me the actual size?

[15:48] <gfldex> sorry my bad

[15:48] <gfldex> it's just hard to ctrl-f

[15:59] <[Coke]> how to force a rebuild of --moar when building rakudo? (trying to use --moar-option and it's not even bothering because Moar is new enough)

[16:00] <MasterDuke> rm -rf nqp/MoarVM ?

[16:01] <[Coke]> ah, --force-rebuild. :)

[16:01] <nine> cd nqp/MoarVM ; make clean ; make install

[16:01] <[Coke]> nine++

[16:05] *** sena_kun joined
[16:07] *** Altai-man_ left
[16:22] *** camelCaser left
[16:22] *** ccamel joined
[16:25] *** jjmerelo joined
[16:58] *** guifa2_ joined
[17:01] *** guifa2 left
[17:21] <Geth> ¦ rakudo/master: 4 commits pushed by (Ben Davies)++, (Elizabeth Mattijsen)++

[17:21] <Geth> ¦ rakudo/master: 6a4f79ec8b | Implement Capture.EXISTS-POS

[17:21] <Geth> ¦ rakudo/master: b55ecdf03e | Remove int candidate for Capture.AT-POS

[17:21] <Geth> ¦ rakudo/master: 3372352e6d | Add missing Any candidate for Capture.AT-POS

[17:21] <Geth> ¦ rakudo/master: 846dee327d | Merge pull request #3585 from Kaiepi/capture

[17:21] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/f0594084e88e...846dee327d02

[18:04] *** Altai-man_ joined
[18:06] *** sena_kun left
[18:19] <Geth> ¦ rakudo: c3b1290668 | (Elizabeth Mattijsen)++ | 25 files

[18:19] <Geth> ¦ rakudo: Remove return constraint from .WHICH methods

[18:19] <Geth> ¦ rakudo: 

[18:19] <Geth> ¦ rakudo: These methods are basically very simplistic, so it's clear that what

[18:19] <Geth> ¦ rakudo: is being expected, will actually be returned.  Since for some applications

[18:19] <Geth> ¦ rakudo: this is hot code, this makes sense.  For instance, this makes Str.WHICH

[18:19] <Geth> ¦ rakudo: about 2x as fast.

[18:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c3b1290668

[18:22] <lizmat> :q

[18:25] <jnthn> Yes, but the point of return constraints is also introspection...

[18:26] <jnthn> Each one you remove is also removing information seen by IDE users.

[18:27] <jnthn> Plus making the effects of my new-disp work look like less, 'cus it'd probably speed up these cases anyway :P

[18:28] *** pamplemousse left
[18:30] *** travis-ci joined
[18:30] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Merge pull request #3585 from Kaiepi/capture

[18:30] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/686675825 https://github.com/rakudo/rakudo/compare/f0594084e88e...846dee327d02

[18:30] *** travis-ci left
[18:32] <Geth> ¦ rakudo: be36ec3822 | (Elizabeth Mattijsen)++ | 25 files

[18:32] <Geth> ¦ rakudo: Revert "Remove return constraint from .WHICH methods"

[18:32] <Geth> ¦ rakudo: 

[18:32] <Geth> ¦ rakudo: Make sure IDE users have the return constraint introspection.  It

[18:32] <Geth> ¦ rakudo: also looks like the GDO will ameliorate.

[18:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/be36ec3822

[18:37] <lizmat> jnthn ^^

[18:38] <MasterDuke> i didn't realize return constraints were still so expensive. i remember that being the case a while ago, but for some reason thought that wasn't true anymore

[18:41] <jnthn> I didn't think it was either, fwiw...spesh often rips them out. I do wonder if it somehow isn't in this case.

[18:41] <lizmat> well, for very small methods it becomes visible, such as Str.WHICH

[18:42] <lizmat> which gets pretty hot for something like $str.comb.Bag

[18:42] <jnthn> In new-disp, though, there will not be any invocation of bytecode at all for the return type check in the case it's identity.

[18:42] <jnthn> At the moment the spesh plugin invokes an identity function and then relies on it getting inlined to achieve better peak performance.

[18:43] <lizmat> yeah, but this would not be identity

[18:43] <jnthn> ?

[18:43] <jnthn> Does it have to be decont'd?

[18:43] <lizmat> Str.WHICH returns a ValueObjAt, not a Str

[18:43] <jnthn> Ah, I should explain better

[18:44] <jnthn> The return type check spesh plugin isn't just checking, it's also decont'ing or recont'ing

[18:44] <jnthn> Or in the case we have here, just saying "ok, the value as it is will be fine"

[18:44] <jnthn> *that* is the identity bit

[18:45] <lizmat> ok, indeed, no decont needed

[18:45] <nine> I.e. if it doesn't have to decont or recont and the return value has a known type that's matching, it won't bother to check?

[18:47] <jnthn> nine: Today the spesh plugin sees it's not a container, and that the type matches. It makes a guard entry that is effectively: if it's ValueObjAt, then run -> \x { x } on the return value - e.g. identity

[18:47] <jnthn> Spesh can then inline this, and it inlines to nothing. However, *until* inlining happens, we have to actually pay for an invoke of the identity function there.

[18:47] <nine> Ah, ok, that makes perfect sense now

[18:48] <jnthn> new-disp, however, is capable of more outcomes than "invoke bytecode", including "produce this value out of the set of input arguments"

[18:48] <jnthn> Or at least, will be soon :)

[18:48] <jnthn> Thus the identity case doesn't need to run any bytecode at all.

[18:49] <nine> Btw. music recommendation for deep and hard coding sessions (3:46 hours): https://www.youtube.com/watch?v=Q-vsx84hsbs

[18:49] <jnthn> It'll just say "ah, grab the first arg to the dispatch and set it as the result of the dispatch and we're done"

[18:49] <nine> (was engaged in all my successes in the past two months)

[18:50] <jnthn> Spesh itself will have an easier time of this too; it won't need to take the whole inlining path, it can instead just say "well, I'll turn the dispatch instruction into a set"

[18:50] *** vrurg joined
[18:51] <nine> When looking at the extops I've wondered whether new-disp may give a way to implement FIRST efficiently without the extop (by dispatching to a version running the FIRST code on the first run and a NULL code on subsequent ones)

[18:51] <MasterDuke> i don't really listen to music much nowadays, but i used to listen to the descent (don't remember if it was 1 or 2) soundtrack back when game cds would also work as music cds

[18:59] <Geth> ¦ rakudo: dwarring++ created pull request #3690: expose IO::Handle.forget-about-closing($fd) method

[18:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3690

[19:15] *** travis-ci joined
[19:15] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Remove return constraint from .WHICH methods

[19:15] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/686696707 https://github.com/rakudo/rakudo/compare/846dee327d02...c3b129066882

[19:15] *** travis-ci left
[19:25] *** jjmerelo left
[19:30] *** lichtkind joined
[19:50] <Geth> ¦ rakudo/master: 4 commits pushed by (Elizabeth Mattijsen)++

[19:50] <Geth> ¦ rakudo/master: b3d933b4f4 | Normalize Range.WHICH and streamline Range.raku

[19:50] <Geth> ¦ rakudo/master: 4afaab7395 | Mark CompUnit.WHICH as returning a ValueObjAt

[19:50] <Geth> ¦ rakudo/master: 3796405b61 | Mark CompUnit::Repository::Locally.WHICH as returning ValueObjAt

[19:50] <Geth> ¦ rakudo/master: 17bf5d5f80 | Move WHICH value creation into a private method

[19:50] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/be36ec382224...17bf5d5f80d7

[20:05] *** sena_kun joined
[20:06] *** Altai-man_ left
[20:27] <nine> https://github.com/rakudo/rakudo/pull/3690 is a good example for why I'm sometimes reluctant to review a PR. Probably took me longer than the author needed for the PR to look at it, dig into the topic, find out why I don't like the solution and write up my reasoning all just to end up saying "no" to a contributor, which is never a good feeling.

[20:29] <lizmat> nine++

[20:29] <nine> On the other hand it's vital that we do anyway. Because the only alternatives are getting a screwed up mishmash of an API (and having to break stuff when we want to fix it) or never gaining contributors.

[20:38] *** Altai-man_ joined
[20:40] *** sena_kun left
[20:41] *** MasterDuke left
[21:52] *** ufobat__ joined
[21:56] *** ufobat_ left
[22:08] *** MasterDuke joined
[22:11] *** Altai-man_ left
[23:07] *** lichtkind left
[23:15] <Geth> ¦ rakudo: d9defb6c08 | (Tom Browder)++ (committed using GitHub Web editor) | src/core.c/Exception.pm6

[23:15] <Geth> ¦ rakudo: Tweak error message

[23:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d9defb6c08

[23:32] *** gfldex joined
