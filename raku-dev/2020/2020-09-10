[00:56] *** squashable6 left
[00:58] *** squashable6 joined
[01:48] *** leont left
[02:15] <Geth> ¦ roast: vrurg++ created pull request #674: Fix some coercion-related tests

[02:15] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/674

[03:08] *** linkable6 left
[03:08] *** evalable6 left
[03:08] *** MasterDuke left
[03:08] *** evalable6 joined
[03:10] *** linkable6 joined
[05:29] <Xliff> m: my $a = Pair.new('a', 54); $a.value = 2;

[05:29] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Cannot modify an immutable Int (54)␤  in block <unit> at <tmp> line 1␤␤»

[05:42] <lucs> Xliff: Maybe this can help: search for "worth noting" at https://docs.raku.org/type/Pair

[05:44] <Xliff> lucs: Thanks, but unfortunately, I'm using a hash from another scope and trying to change it while iterating over %myhasn.pair

[05:52] <lucs> Try iterating on %h.kv maybe?

[05:54] <lucs> Not sure how you can change the original %h, might need to copy.

[05:54] <lucs> (where are the experts! :-)

[05:55] <lucs> Oh, something like this: for %h.kv -> $k, $v { %h{$k} = $v + 2 }

[05:57] <lucs> m: my %h = <a 1 b 2>; for %h.kv -> $k, $v { %h{$k} = $v + 2 }; say %h

[05:57] <camelia> rakudo-moar 85847d2f1: OUTPUT: «{a => 3, b => 4}␤»

[06:00] * lucs & # ZZ

[07:04] <Xliff> m: say ('a', 1, 'b', 2, 'c', 3).Hash.gist

[07:04] <camelia> rakudo-moar 85847d2f1: OUTPUT: «{a => 1, b => 2, c => 3}␤»

[07:08] <Xliff> m: say 8 % 2

[07:08] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0␤»

[07:16] *** Altai-man joined
[07:19] *** sena_kun joined
[07:21] *** Altai-man left
[08:59] *** sena_kun left
[08:59] *** sena_kun joined
[10:17] *** raku-bridge left
[10:17] *** raku-bridge joined
[10:17] *** raku-bridge left
[10:17] *** raku-bridge joined
[10:25] <Geth> ¦ rakudo/rakuast: 898cfff995 | (Elizabeth Mattijsen)++ | 2 files

[10:25] <Geth> ¦ rakudo/rakuast: Fix typos in comments

[10:25] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/898cfff995

[10:25] <Geth> ¦ rakudo/rakuast: eea0716f70 | (Elizabeth Mattijsen)++ | 6 files

[10:25] <Geth> ¦ rakudo/rakuast: Introducing Formatter class and associated Grammer

[10:25] <Geth> ¦ rakudo/rakuast: 

[10:25] <Geth> ¦ rakudo/rakuast: This is basically taking my work on the "newer-sprintf" branch into

[10:25] <Geth> ¦ rakudo/rakuast: the RakuAST era, and also making that work a first class citizen.

[10:25] <Geth> ¦ rakudo/rakuast: 

[10:25] <Geth> ¦ rakudo/rakuast: The Formatter class takes a sprintf format string and returns a

[10:25] <Geth> ¦ rakudo/rakuast: Callable that can be called, with the necessary parameters, to have

[10:25] <Geth> ¦ rakudo/rakuast: <…commit message has 26 more lines…>

[10:25] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/eea0716f70

[11:07] <Geth> ¦ rakudo/rakuast: 852bdb8773 | (Elizabeth Mattijsen)++ | src/core.e/Formatter.pm6

[11:07] <Geth> ¦ rakudo/rakuast: Tweaks to actually make it work

[11:07] <Geth> ¦ rakudo/rakuast: 

[11:07] <Geth> ¦ rakudo/rakuast: ./rakudo-m -e 'use v6.e.PREVIEW; say sprintf(q/%02d: %s/,42,"foo")'

[11:07] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/852bdb8773

[11:18] *** Altai-man joined
[11:21] *** sena_kun left
[11:37] <Geth> ¦ rakudo/rakuast: 5c7c58d669 | (Elizabeth Mattijsen)++ | src/core.e/Formatter.pm6

[11:37] <Geth> ¦ rakudo/rakuast: Refactor create-format a bit

[11:37] <Geth> ¦ rakudo/rakuast: 

[11:37] <Geth> ¦ rakudo/rakuast: So that it's more about wrapping things that we got so far, to make

[11:37] <Geth> ¦ rakudo/rakuast: transition to AST easier.

[11:37] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/5c7c58d669

[12:09] *** leont joined
[12:14] <Geth> ¦ rakudo/rakuast: cc2072d7a8 | (Elizabeth Mattijsen)++ | src/core.e/Formatter.pm6

[12:14] <Geth> ¦ rakudo/rakuast: RakuASTify no-arg formats

[12:14] <Geth> ¦ rakudo/rakuast: 

[12:14] <Geth> ¦ rakudo/rakuast: And return the format for one or more arg formats for now.

[12:14] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/cc2072d7a8

[12:14] <lizmat> my first successful RakuASTification!  :-)

[12:23] <moritz> lizmat++

[12:30] <[TuxCM]> Rakudo version 2020.08.2-59-ge65466fcd - MoarVM version 2020.08-91-g590bac47e

[12:30] <[TuxCM]> csv-test-xs-20      0.392 -  0.398

[12:30] <[TuxCM]> test-t --race       0.873 -  0.921

[12:30] <[TuxCM]> csv-ip5xs           0.971 -  1.042

[12:30] <[TuxCM]> test-t              1.957 -  2.103

[12:30] <[TuxCM]> test                7.760 -  7.857

[12:31] <[TuxCM]> test-t-20 --race    9.534 -  9.628

[12:31] <[TuxCM]> csv-ip5xs-20        8.838 -  9.850

[12:31] <[TuxCM]> csv-parser         27.278 - 27.486

[12:31] <[TuxCM]> test-t-20          33.110 - 33.518

[13:28] *** dogbert17 joined
[15:17] <Geth> ¦ rakudo/rakuast: ce4f40e0c0 | (Jonathan Worthington)++ | t/12-rakuast/code.t

[15:17] <Geth> ¦ rakudo/rakuast: Correct a couple of test code descriptions

[15:17] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/ce4f40e0c0

[15:17] <Geth> ¦ rakudo/rakuast: 361093c1bd | (Jonathan Worthington)++ | 4 files

[15:17] <Geth> ¦ rakudo/rakuast: Further parameter support in RakuAST

[15:17] <Geth> ¦ rakudo/rakuast: 

[15:17] <Geth> ¦ rakudo/rakuast: * Named parameters

[15:17] <Geth> ¦ rakudo/rakuast: * Support for basic type constraints on scalar parameters

[15:17] <Geth> ¦ rakudo/rakuast: * Support for optional scalar parameters

[15:17] <Geth> ¦ rakudo/rakuast: * Use Mu or Any as the parameter default depending on if it's on a

[15:17] <Geth> ¦ rakudo/rakuast:   block or a routine

[15:17] <Geth> ¦ rakudo/rakuast: * Wire these things up in the RakuAST-based compiler

[15:17] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/361093c1bd

[15:17] <Geth> ¦ rakudo/rakuast: d3a8cce33b | (Jonathan Worthington)++ | 4 files

[15:17] <Geth> ¦ rakudo/rakuast: Fix lookup of routines using &name

[15:17] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/d3a8cce33b

[15:20] *** sena_kun joined
[15:21] *** Altai-man left
[15:52] *** squashable6 left
[15:53] *** squashable6 joined
[17:03] *** domidumont joined
[17:05] *** ggoebel joined
[17:18] <ggoebel> what is the appropriate channel to discuss documentation wrt to what can be found at raku.org, rakudo.org, moarvm.org, etc?

[17:19] <[Coke]> raku is probably best.

[17:20] <[Coke]> (in general)

[17:20] <[Coke]> moarvm has #moarvm, might make sense for that one in particular.

[17:20] <ggoebel> thx

[17:39] *** MasterDuke joined
[17:44] <sena_kun> releasable6, status

[17:44] <releasable6> sena_kun, Next release in ≈9 days and ≈1 hour. 1 blocker. Changelog for this release was not started yet

[17:44] <releasable6> sena_kun, Details: https://gist.github.com/9159dd74ebf1734a90e247ecd6ef11fd

[17:51] *** rypervenche left
[17:56] *** rypervenche joined
[18:03] *** ggoebel_ joined
[18:06] *** ggoebel left
[18:22] *** squashable6 left
[18:24] *** squashable6 joined
[18:49] *** domidumont left
[18:55] <vrurg> .ask jnthn Could you have another look at https://github.com/Raku/problem-solving/issues/227? It might have consequences for RakuAST too.

[18:55] <tellable6> vrurg, I'll pass your message to jnthn

[18:57] <nine> vrurg: I came across your https://github.com/rakudo/rakudo/pull/3284

[18:58] <nine> vrurg: I've been working on in-process precompilation for quite some time this year already and the biggest obstacle is how we deal with stashes right now.

[18:59] <nine> My latest attempt is to instead of serializing the stashes after compilation, generate code that will assemble them at deserialize time

[19:01] <vrurg> nine: Look similar to what I was trying to do. I never finished it because I was hitting a SEGV and misdiagnosed it as a moar bug.

[19:03] <nine> Well at the very least having two people come up with the same solution for two different problems makes me more confident, that this is indeed the right direction

[19:07] <vrurg> It certainly is. I investigated it down to the point where the conflict of restoring two different stashes of the same parent package is possible but can't be resolved because it would require the backend to know about Stash object and its content. Hence the fixup at deserialization point. Don't know what's your case, apparently. :)

[19:09] <vrurg> BTW, the problem I was resolving was reported by Xliff. I think he can check if your solution fixes that one too.

[19:16] <nine> Well my trouble comes from those stashes being pretty global and get changed by module loading. So if the same process compiles multiple precomp files, the latter ones may pick up dependencies they shouldn't have, just because stashes they refer to have been filled with references by previous compilations

[19:18] *** Altai-man joined
[19:21] *** sena_kun left
[19:22] <vrurg> Hm, that's pretty much opposite problem. In Xliff case symbols were missing because later loaded module overrode earlier one.

[19:26] <nine> Yet the solution could be the same.

[20:00] *** ggoebel_ left
[20:03] *** ggoebel joined
[20:17] <Xliff> vrurg++: You have that soution in a branch?

[20:31] <vrurg> Xliff: there is a PR, but it lags to far behind. Not applicable anymore.

[20:31] <vrurg> Xliff: but there is a branch in my fork.

[20:39] *** Altai-man left
[21:49] <Xliff> vrurg: Let me know if you want me to test!

[21:51] <vrurg> Xliff: I think this time it's better to wait for nine to finish it's work. I think his solution would cover more aspects of the problem.

[21:51] <vrurg> s/it's/his/

[22:03] <Geth> ¦ rakudo/rakuast: 2eb407d19e | (Elizabeth Mattijsen)++ | src/core.e/Formatter.pm6

[22:03] <Geth> ¦ rakudo/rakuast: RakuASTify subs "parameter" and "handle-integer-numeric"

[22:03] <Geth> ¦ rakudo/rakuast: 

[22:03] <Geth> ¦ rakudo/rakuast: Also add RAKUDO_AST parameter to actually EVAL the AST, rather than

[22:03] <Geth> ¦ rakudo/rakuast: EVALling the string representation that is also generated with but.

[22:03] <Geth> ¦ rakudo/rakuast: Add some helper subs as well, for creating string and integer literals.

[22:03] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/2eb407d19e

[22:07] <lizmat> sleep&

[22:12] <Xliff> vrurg: OK!

[22:26] <Geth> ¦ rakudo/rakuast: b4139d9135 | (Jonathan Worthington)++ | 4 files

[22:26] <Geth> ¦ rakudo/rakuast: RakuAST support for slurpy parameters

[22:26] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/b4139d9135

[23:00] *** pamplemousse joined
[23:36] <Xliff> jnthn: How is work on RakuAST progressing?

[23:36] <tellable6> Xliff, I'll pass your message to jnthn

