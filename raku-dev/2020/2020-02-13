[00:25] *** SmokeMachine left
[00:26] *** SmokeMachine joined
[00:52] *** Kaiepi left
[00:53] *** Kaiepi joined
[01:30] *** rypervenche left
[01:33] *** rypervenche joined
[01:34] *** sena_kun left
[01:49] *** sena_kun joined
[01:54] *** AlexDaniel left
[02:11] *** travis-ci joined
[02:11] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Add Compiler.backend method

[02:11] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/649667638 https://github.com/rakudo/rakudo/compare/10e5390ba36d...61b416edb96d

[02:11] *** travis-ci left
[02:13] *** MasterDuke left
[03:34] *** sena_kun left
[03:34] *** robertle joined
[03:48] *** sena_kun joined
[04:03] *** tobs left
[04:28] *** tobs joined
[04:50] *** hungrydonkey left
[04:58] *** hungrydonkey joined
[05:08] *** Kaiepi left
[05:14] *** squashable6 left
[05:17] *** squashable6 joined
[05:34] *** sena_kun left
[05:47] *** sena_kun joined
[06:19] *** moon-child left
[06:19] *** moon-child joined
[07:07] *** jmerelo joined
[07:07] <jmerelo> This persistent error is rather annoying https://travis-ci.com/Raku/doc/builds/148729002?utm_medium=notification&utm_source=email

[07:07] <jmerelo> It fails in different files, almost always in that test, but sometimes in others, too

[07:10] <jmerelo> It's the same error as here: https://github.com/MoarVM/MoarVM/issues/943

[07:33] *** sena_kun left
[07:37] *** domidumont joined
[07:45] <nine> japhb: :api is treated as a version (passed to Version.new). We don't put that many restrictions on versions. They may even be more free than the components that make up a module's short name.

[07:46] <nine> m: say Version.new("Foo")

[07:46] <camelia> rakudo-moar 8c995febd: OUTPUT: «vFoo␤»

[07:47] *** sena_kun joined
[07:54] <lizmat> Files=1302, Tests=110400, 210 wallclock secs (28.92 usr  8.41 sys + 2940.00 cusr 279.21 csys = 3256.54 CPU)

[08:03] <Geth> ¦ nqp: f6eb0c2143 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[08:03] <Geth> ¦ nqp: Bump MoarVM to get srand / rand_I fixes, MasterDuke++

[08:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f6eb0c2143

[08:03] <nine> jmerelo: have you tried what jnthn++ suggested in that MoarVM ticket? Have you tried --ll-exception?

[08:04] <jmerelo> nine: I can try and add that to the Travis configuration, I guess...

[08:05] <nine> So you can't reproduce the issue locally?

[08:06] <jmerelo> nine: it's a flapper. Happens from time to time locally or in Travis You look at history https://travis-ci.org/Raku/doc/builds, most fails are not real fails, but that kind of error

[08:06] <jmerelo> nine: this one, for instance https://travis-ci.org/Raku/doc/builds/648769290

[08:07] <jmerelo> nine: or this one https://travis-ci.org/Raku/doc/builds/649442291

[08:07] <jmerelo> nine: happens once every 10 times or so. Used to be more, but as I say, it totally flaps.

[08:08] <nine> In that case I'd run it like `while perl6 -Ilib t/02-tests-valid.t ; do true ; done` to reproduce locally. That's still much nicer than waiting for Travis to fail

[08:08] <jmerelo> nine: it does not depend on Rakudo version, either. It's been happening for as long as I remember. And it does not always fail in the same place, but it does tend to happen there. But OK, I'll do that

[08:12] <jmerelo> nine: it does fail locally after a while

[08:13] <jmerelo> nine: you can check it out yourself, it's just the normal Raku/doc repo

[08:14] <Geth> ¦ rakudo: f95bf76a7b | (Elizabeth Mattijsen)++ | 2 files

[08:14] <Geth> ¦ rakudo: Bump NQP to get srand / rand_I fixes

[08:14] <Geth> ¦ rakudo: 

[08:14] <Geth> ¦ rakudo: - MasterDuke++

[08:14] <Geth> ¦ rakudo: - also re-enable and extend tests

[08:14] <Geth> ¦ rakudo: - Fixes R#3469

[08:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f95bf76a7b

[08:14] <linkable6> R#3469 [closed]: https://github.com/rakudo/rakudo/issues/3469 [BLOCKER][regression] Varying results despite fixed srand seed

[08:15] <jmerelo> nine: --ll-exception does not add a lot of light, since it does not seem to be a Failure. It simply fails. Also with the options suggested by jnthn

[08:18] <nine> Well that means it's not a spesh or JIT issue and not happening due to parallel run of test files.

[08:19] *** jmerelo left
[08:37] * lizmat wonders whether vrurg has any ideas about https://github.com/rakudo/rakudo/issues/3478

[08:42] *** hungrydonkey left
[08:47] <nine> Intruiging. I've had that test running for quite a while in a loop and it didn't fail. Then I ran the whole test suite (with just one job concurrently) and bang

[08:48] <nine> Oh, the test is using 2 threads! I start to think that this may actually be a bug in p6doc

[08:51] <Geth> ¦ roast: dd77e18ca2 | (Elizabeth Mattijsen)++ | S32-str/contains.t

[08:51] <Geth> ¦ roast: Add tests for invalid position handling

[08:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dd77e18ca2

[08:54] *** hungrydonkey joined
[08:59] *** MasterDuke joined
[09:03] <Geth> ¦ roast: 007a9df08e | (Elizabeth Mattijsen)++ | S32-str/substr-eq.t

[09:03] <Geth> ¦ roast: Add tests for Str.substr-eq(:i, :m)

[09:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/007a9df08e

[09:07] *** domidumont left
[09:24] <Geth> ¦ rakudo: 5e9d98c2a5 | (Elizabeth Mattijsen)++ | 3 files

[09:24] <Geth> ¦ rakudo: Change extension of install-core-dist to .raku

[09:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5e9d98c2a5

[09:24] <Geth> ¦ rakudo: ea1cb40750 | (Elizabeth Mattijsen)++ | 3 files

[09:24] <Geth> ¦ rakudo: Change extension of upgrade-repository to .raku

[09:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ea1cb40750

[09:24] *** domidumont joined
[09:24] <lizmat> a configure will be needed after this

[09:30] <Geth> ¦ rakudo: 3b8104ec77 | (Elizabeth Mattijsen)++ | 3 files

[09:30] <Geth> ¦ rakudo: Change extension of makeMAGIC_INC_DEC to .raku

[09:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3b8104ec77

[09:30] <Geth> ¦ rakudo: 4677f7416b | (Elizabeth Mattijsen)++ | 3 files

[09:30] <Geth> ¦ rakudo: Change extension of makeNATIVE_ARRAY to .raku

[09:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4677f7416b

[09:30] <Geth> ¦ rakudo: ac652c0ecd | (Elizabeth Mattijsen)++ | 3 files

[09:30] <Geth> ¦ rakudo: Change extension of makeNATIVE_SHAPED_ARRAY to .raku

[09:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ac652c0ecd

[09:30] <lizmat> afk for a few hours&

[09:34] *** sena_kun left
[09:39] *** hungryd90 joined
[09:42] *** hungrydonkey left
[09:47] *** sena_kun joined
[09:52] *** Kaiepi joined
[09:52] *** Kaiepi left
[09:53] *** Kaiepi joined
[09:57] <nine> I think, I know what's going on with those p6doc tests

[10:02] *** hungrydonkey joined
[10:03] *** hungryd90 left
[10:09] <|Tux|> Rakudo version 2020.01-172-gac652c0ec - MoarVM version 2020.01.1-37-g3c48ebaa9

[10:09] <|Tux|> csv-test-xs-20      0.365 -  0.370

[10:09] <|Tux|> csv-ip5xs           0.719 -  0.740

[10:09] <|Tux|> test-t --race       0.781 -  0.782

[10:09] <|Tux|> test-t              1.713 -  1.783

[10:09] <|Tux|> csv-ip5xs-20        5.743 -  6.119

[10:09] <|Tux|> test                7.203 -  8.052

[10:09] <|Tux|> test-t-20 --race    8.338 -  8.795

[10:09] <|Tux|> csv-parser         22.393 - 22.691

[10:09] <|Tux|> test-t-20          29.176 - 29.505

[10:30] *** patrickb joined
[10:35] <Geth> ¦ rakudo: f5ce80e1a6 | (Stefan Seifert)++ | 2 files

[10:35] <Geth> ¦ rakudo: Fix concurrency issue with re-checking a precomp file's dependencies

[10:35] <Geth> ¦ rakudo: 

[10:35] <Geth> ¦ rakudo: When the repository's identity changes (whether through changes in source files

[10:35] <Geth> ¦ rakudo: or a `use lib` after loading modules) we re-check dependencies of precomp files

[10:35] <Geth> ¦ rakudo: as the change may have brought in a new version of a dependency. We store the

[10:35] <Geth> ¦ rakudo: resulting repo-id in the precomp store in the form of .repo-id files

[10:35] <Geth> ¦ rakudo: accompanying the precomp files. When writing those files we didn't protect

[10:35] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[10:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f5ce80e1a6

[10:36] <nine> jmerelo: https://github.com/rakudo/rakudo/commit/f5ce80e1a6 fixes p6doc's tests

[10:41] <nine> jmerelo: but please fix those late `use lib` in test files. You could probably just remove them as they're not used consistently anyway

[11:26] <Geth> ¦ rakudo: e572320876 | (Elizabeth Mattijsen)++ | 3 files

[11:26] <Geth> ¦ rakudo: Change extension of makeSLICE to .raku

[11:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e572320876

[11:26] <Geth> ¦ rakudo: deac4407d4 | (Elizabeth Mattijsen)++ | 3 files

[11:26] <Geth> ¦ rakudo: Change extension of makeUNIPROP to .raku

[11:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/deac4407d4

[11:28] <sena_kun> dogbert11: is https://github.com/MoarVM/MoarVM/issues/1237 reliable?

[11:29] <lizmat> sena_kun: it was for me last week

[11:30] <Guest4508> sena_kun: it always happens after a random number of iterations 

[11:30] <Guest4508> it should be noted that this is not a 'new' bug

[11:33] *** sena_kun left
[11:37] *** squashable6 left
[11:39] *** squashable6 joined
[11:39] <lizmat> sena_kun: still does for me on HEAD

[11:40] <Geth> ¦ rakudo: 8fd7172c0f | (Elizabeth Mattijsen)++ | 6 files

[11:40] <Geth> ¦ rakudo: Update she-bang of tools/build .raku scripts

[11:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8fd7172c0f

[11:47] *** sena_kun joined
[11:49] <lizmat> m: dd 1 Xxx 1      # is this correct ?

[11:49] <camelia> rakudo-moar 8c995febd: OUTPUT: «((1,).Seq,).Seq␤»

[11:50] <lizmat> perhaps X should flatten whatever it produces ?

[11:51] <sena_kun> if it won't break anything... which I somehow, to be honest, doubt, no?

[11:51] <jnthn> Don't think so, we'd not want that in general?

[11:52] <lizmat> this is about https://github.com/rakudo/rakudo/issues/3444

[11:55] <jnthn> hmm.

[11:55] <jnthn> lunch, bbiab

[12:04] *** Kaiepi left
[12:05] <Geth> ¦ rakudo: c7e0df64cb | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[12:05] <Geth> ¦ rakudo: Change signature on .rotor

[12:05] <Geth> ¦ rakudo: 

[12:05] <Geth> ¦ rakudo: - as a fix for R#3444

[12:05] <Geth> ¦ rakudo: - the described problem occurred in the handling of the rotor spec

[12:05] <Geth> ¦ rakudo:   *not* in the actual running of the .rotor function

[12:05] <Geth> ¦ rakudo: - not 100% sure this is the right solution

[12:05] <linkable6> R#3444 [open]: https://github.com/rakudo/rakudo/issues/3444 Code produces "Seq is already in use/consumed" error once, but subsequently works.

[12:05] <Geth> ¦ rakudo: - is spectest clean

[12:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c7e0df64cb

[12:07] *** Kaiepi joined
[12:09] <Geth> ¦ roast: 0e07a4d5c9 | (Elizabeth Mattijsen)++ | S32-list/rotor.t

[12:09] <Geth> ¦ roast: Add test for R#3444

[12:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0e07a4d5c9

[12:09] <linkable6> R#3444 [open]: https://github.com/rakudo/rakudo/issues/3444 Code produces "Seq is already in use/consumed" error once, but subsequently works.

[12:19] <Geth> ¦ rakudo: 7b679604c8 | (Elizabeth Mattijsen)++ | 2 files

[12:19] <Geth> ¦ rakudo: Change extension of tools/CREDITS to .raku

[12:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7b679604c8

[12:20] <Geth> ¦ rakudo: 416fd513c3 | (Elizabeth Mattijsen)++ | 2 files

[12:20] <Geth> ¦ rakudo: Change extension of tools/contributors to .raku

[12:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/416fd513c3

[12:20] <Geth> ¦ rakudo: ca99c7ca6a | (Elizabeth Mattijsen)++ | 2 files

[12:20] <Geth> ¦ rakudo: Change extension of tools/create-release-announcement to .raku

[12:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ca99c7ca6a

[12:21] <Geth> ¦ rakudo: 5437517935 | (Elizabeth Mattijsen)++ | 2 files

[12:21] <Geth> ¦ rakudo: Change extension of tools/release-dates to .raku

[12:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5437517935

[12:22] <Geth> ¦ rakudo: 82ea32928e | (Elizabeth Mattijsen)++ | 2 files

[12:22] <Geth> ¦ rakudo: Change extension of tools/speedup to .raku

[12:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/82ea32928e

[12:23] <Geth> ¦ rakudo: 4ec31e2cd2 | (Elizabeth Mattijsen)++ | 2 files

[12:23] <Geth> ¦ rakudo: Change extension of tools/install-dist to .raku

[12:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4ec31e2cd2

[12:24] <Geth> ¦ rakudo: af292586a3 | (Elizabeth Mattijsen)++ | 6 files

[12:24] <Geth> ¦ rakudo: Update she-bangs of tools/*.raku scripts

[12:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/af292586a3

[12:26] <Geth> ¦ rakudo: 81014e7881 | (Elizabeth Mattijsen)++ | tools/install-dist.raku

[12:26] <Geth> ¦ rakudo: Make tools/install-dist.raku internally consistent

[12:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/81014e7881

[12:34] *** lucasb joined
[12:45] <nine> [  339s] cp: cannot stat 'tools/install-dist.p6': No such file or directory

[12:45] <nine> [  339s] error: Bad exit status from /var/tmp/rpm-tmp.VWFvKK (%install)

[12:45] <nine> https://build.opensuse.org/package/live_build_log/home:niner9:rakudo-git/rakudo/openSUSE_Tumbleweed/x86_64

[12:56] <nine> lizmat: ^^^

[12:57] <lizmat> nine: yeah, I was wondering whether that would break stuff

[12:57] <lizmat> want me to revert that one ?

[12:57] <lizmat> or do you have a clue where it is still referenced with the old extension ?

[12:58] <nine> My guess is that it will hit all the distro packagers

[12:59] <lizmat> ok, I'll revert that one for now

[13:00] *** hungrydonkey left
[13:01] <Geth> ¦ rakudo: 925e73df84 | (Elizabeth Mattijsen)++ | 2 files

[13:01] <Geth> ¦ rakudo: Revert "Change extension of tools/install-dist to .raku"

[13:01] <Geth> ¦ rakudo: 

[13:01] <Geth> ¦ rakudo: This reverts commit 4ec31e2cd283e27ec9b2e0e11800fd6f62d30164.

[13:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/925e73df84

[13:01] *** hungrydonkey joined
[13:04] *** patrickb left
[13:08] <Geth> ¦ rakudo: dd7b4ce51b | (Elizabeth Mattijsen)++ | tools/install-dist.p6

[13:08] <Geth> ¦ rakudo: Revert "Change extension of tools/install-dist to .raku"

[13:08] <Geth> ¦ rakudo: 

[13:08] <Geth> ¦ rakudo: This reverts commit 4ec31e2cd283e27ec9b2e0e11800fd6f62d30164.

[13:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dd7b4ce51b

[13:09] <lizmat> not sure how that last commit got that message, but at least it's internally consistent again now

[13:11] <sena_kun> releasable6: status

[13:11] <releasable6> sena_kun, Next release in ≈9 days and ≈5 hours. 4 blockers. 0 out of 179 commits logged

[13:11] <releasable6> sena_kun, Details: https://gist.github.com/6bc99347947cae206391a749e3dfb255

[13:14] <lizmat> sena_kun: I only see 2 blockers ?

[13:14] *** patrickb joined
[13:15] <sena_kun> lizmat: hmm, how so?

[13:15] <lizmat> https://github.com/rakudo/rakudo/issues?q=is%3Aissue+is%3Aopen+label%3ABLOCKER

[13:16] <sena_kun> lizmat: two are from moarvm repo

[13:16] <lizmat> aaah.. ok

[13:17] <sena_kun> one is a moarvm panic on a roast test, which is a serious issue. second is a plain regression, then go build issues and a flapping method call, which seems like a regression to me. not sure if 100% blocker, but giving jnthn++ does some work recently with rakudo, I think it possibly can be investigated.

[13:18] <jnthn> I'm not sure either of the MoarVM ones are regressions?

[13:18] <sena_kun> https://github.com/MoarVM/MoarVM/issues/1237 looks like a regression

[13:19] <jnthn> It ain't; I remember spending hours hunting it 6 months ago... :/

[13:19] <jnthn> I managed to repro it one time in 1000 runs today :/

[13:19] <jnthn> And I'd forgotten to stick a breakpoint in MVM_panic, so it was all for nothing :|

[13:19] <sena_kun> because 1)we passed part of spectest before, it's a release requirement?; 2) lizmat has said yesterday it was reliable?

[13:20] <sena_kun> https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-02-13#l135 <-

[13:20] <lizmat> it's reliable on MacOS

[13:20] <jnthn> Every run?

[13:20] <sena_kun> maybe "reliable" is "reliably works most of the time" rather than "reliably dies"

[13:21] <jnthn> lizmat: Reliably fails, or reliably passes?

[13:21] <lizmat> reliably crashes after 30 to 50 times

[13:21] <sena_kun> "it should be noted that this is not a 'new' bug" <- hmm, not a regression then, indeed.

[13:22] <jnthn> Well yes, given I already said I tried to find it 6 months ago, not new at all ;)

[13:22] <jnthn> The MacOS build one - hmm...I wonder if that's related to us upgrading to a new dyncall? Or does it pre-date that?

[13:22] <jnthn> My assumption with MacOS + build is that Apple broke something yet again :/

[13:24] <lizmat> but it is broken on older MacOS's , no ?

[13:25] <jnthn> ah, it's about gcc-10, which is maybe the thing that's new

[13:25] <patrickb> jnthn: If you are refering to my dyncall update PR - that hasn't been merged yet

[13:25] <jnthn> patrickb: Oh. Then if we're lucky it may even fix it ;-)

[13:26] <lizmat> ok, so merge it and bump ?

[13:26] <patrickb> The PR only updates the separate dyncall repo. After merging and before bumping the respective submodule in the moarvm repo needs to be updated.

[13:27] <jnthn> Let's try that and see if it helps

[13:30] <jnthn> https://github.com/MoarVM/dyncall/pull/7/files#diff-02f0b547c2779d25cff89672135f20e3R31 possibly helps

[13:30] <jnthn> Though doesn't sound a direct hit on the bug

[13:33] *** sena_kun left
[13:48] *** sena_kun joined
[14:07] <patrickb> I won't have time to actually do stuff until at least tomorrow evening... But feel free to just go ahead.

[14:13] * lizmat is not sure what needs to be done more than merging the PR ?

[14:13] <Geth> ¦ rakudo: vrurg self-assigned Build process calling Raku does not use `--ll-exception` https://github.com/rakudo/rakudo/issues/3478

[14:15] <jnthn> lizmat: Bumping the submodule version in the MoarVM repo too

[14:15] <jnthn> I could do it, but by MoarVM is in pieces at the moment things to trying to get derived specializations to work :)

[14:15] <jnthn> *thanks to

[14:16] * lizmat has had quite a few fights with submodules, but will try anyway

[14:16] <jnthn> Who hasn't... :)

[14:16] <lizmat> Ah, I see the PR is already merged

[14:18] <jnthn> Yes, I did that bit :)

[14:18] <lizmat> so I need to clone the dyncall ? then get the git describe and paste that somewhere ?

[14:19] <jnthn> I think you pull it and then commit in MoarVM iirc

[14:19] <jnthn> cd 3rdparty/dyncall ; git pull ; cd ../.. ; probably a commit now?

[14:20] <patrickb> jnthn: Yes, that's about it.

[14:20] <lizmat> You are not currently on a branch.

[14:20] <lizmat> Please specify which branch you want to merge with.

[14:20] <jnthn> This is in the set of things I do rarely enough that I've typically forgotten what to do :)

[14:21] <jnthn> lizmat: ah, git checkout master before the git pull

[14:25] <Geth> ¦ nqp: 3bbce8c3ab | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[14:25] <Geth> ¦ nqp: Bump MoarVM to get latest dyncall support

[14:25] <Geth> ¦ nqp: 

[14:25] <Geth> ¦ nqp: And a fix uninlining segfault fix

[14:25] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3bbce8c3ab

[14:29] <Geth> ¦ roast: 6c88e8735a | (Elizabeth Mattijsen)++ | S32-str/index.t

[14:29] <Geth> ¦ roast: Refine some index() tests

[14:29] <Geth> ¦ roast: 

[14:29] <Geth> ¦ roast: - fix RT references

[14:29] <Geth> ¦ roast: - use fails-like to test for type of failure

[14:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6c88e8735a

[14:36] <Geth> ¦ rakudo: 5685648a31 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[14:36] <Geth> ¦ rakudo: Bump NQP

[14:36] <Geth> ¦ rakudo: 

[14:36] <Geth> ¦ rakudo: - get new dyncall support

[14:36] <Geth> ¦ rakudo: - fix uninlining segfault

[14:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5685648a31

[14:46] *** MasterDuke left
[14:57] <timotimo> lizmat: thank you very much for working on the :i and :m support for more string methods/subs <3

[15:22] <timotimo> i'm not quite grokking the code yet, but i wonder if we can get multi-needle split faster by using the fact that each needle's positions list is sorted; so we can just merge the lists together with the simpler merge algorithm compared to having to actually sort stuff

[15:22] <timotimo> i imagine that $positions is made up of lists where each list has every position a given needle exists at?

[15:33] *** sena_kun left
[15:47] *** sena_kun joined
[16:06] <japhb> nine: I let your idea percolate around in my brain overnight, and this morning it gelled into a new idea, but it hinges on this question:  Is there anything that prevents an auth from itself being a long name for another module?  That feels like less of a conceptual abuse than trying to wedge something into ver ... and it frees up ver itself for allowing the calling program and plugins to agree on an API 

[16:06] <japhb> revision.

[16:08] <japhb> The idea is that, since right now two modules of the same short name but different auth are effectively two different people's (or org's) different view of the module, this would instead be different *module's* view of the plugin slot.

[16:09] <japhb> And since long names are guaranteed unique, we can use those modules

[16:09] <japhb> *module's long names as auths without fear of collision

[16:10] *** hungrydonkey left
[16:14] <japhb> So I'm thinking Foo::Bar::SomeSlot::Plugin:auth('Foo::Bar::Slartibartfast:auth<someauth>:ver<1.2.3>'):ver<5.6> means that Foo::Bar::Slartibartfast:auth<someauth>:ver<1.2.3> plugs into Foo::Bar at the plugin slot Foo::Bar::SomeSlot, expecting that slot's plugin API to be version 5.6 (or compatible)

[16:15] <japhb> Lots of plugin modules could independently install at Foo::Bar::SomeSlot::Plugin, each declaring their expected plugin API, and this would let the current CURI implementation find them all compatible plugins for a particular slot quickly,

[16:15] <japhb> *and* doesn't violate the immutability rules that make vendor packages painless.

[16:16] <japhb> (No need to modify some special plugin registry at install time, in other words.)

[16:34] <nine> Don't you hate it when an obviously horrible idea fixes all the problems so nicely?

[16:34] <nine> And to be clear: I do think that it's horrible and would have unwanted side effects. It's just hard to find them...

[16:36] *** domidumont left
[16:42] *** patrickb left
[16:46] <japhb> nine: Well, right now it's the horrible idea above, or the horrible idea of yet again rejiggering repo installs to make them compatible with a use case the current CURI design wasn't really built for.

[16:49] * japhb briefly considers calling a module that implements this horrible idea "Plugin::Hack" ... or maybe "Plugin::Hack::Horrible::NoReally"

[16:49] <japhb> I mean, if you use a plugin loader with a name like that, you've pretty much signed up for the unwanted side effects right at the get-go.  ;-)

[16:50] <nine> Well one side effect would be that any system grouping modules by auth (e.g. a list on modules.raku.org) will show some confusing output for those plugins.

[16:52] <nine> That's why I'd still prefer abusing :api, as I really can't think of anything where that really hurts. Well except that you'd miss out on :api semantics for specific plugins of course :) Which...a plugin system needs to handle btw. the same plugin may be installed in multiple versions

[16:56] <japhb> Yeah, that last bit is one reason why I was thinking of using real long names in the auth hack -- because they would carry a valid real version for the plugin.

[16:59] <japhb> nine: Thinking about that modules.raku.org issue, I feel like there's a way around that, but I don't have a general solution for that now. ( Some partial solution ideas, but none are terribly satisfying.)

[17:00] <japhb> nine: It's key that not only can plugins be installed with multiple versions, but plugin *slots* also have multiple versions, and plugins need to be able to declare what API version they are safe to load into.

[17:02] <japhb> There's always the possibility of using one of these hacks (auth or ver, doesn't matter) just to find a resources tree, that then can contain metadata for loading.  But pretty soon you're getting into "let's build a database on top of a virtual file system on top of a database implemented as a filesystem" territory.

[17:03] <japhb> All of this would be a lot easier if we didn't have the vendor packages problem to work around.  :-(

[17:34] *** sena_kun left
[17:48] *** sena_kun joined
[17:50] *** dogbert11 left
[17:58] <Geth> ¦ roast: 13ad2bb268 | (Elizabeth Mattijsen)++ | S32-str/index.t

[17:58] <Geth> ¦ roast: Add tests for Str.index(:i, :m)

[17:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/13ad2bb268

[18:33] <Geth> ¦ rakudo: vrurg++ created pull request #3480: Added *_RUNNER_OPTS variable

[18:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3480

[18:33] <Geth> ¦ rakudo: 701c38df64 | (Vadim Belman)++ | 2 files

[18:33] <Geth> ¦ rakudo: Added *_RUNNER_OPTS variable

[18:33] <Geth> ¦ rakudo: 

[18:33] <Geth> ¦ rakudo: It currently defines `--ll-exception` for detailed diagnosis of

[18:33] <Geth> ¦ rakudo: installation stage problems.

[18:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/701c38df64

[18:33] <Geth> ¦ rakudo: fbeb3e346f | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[18:33] <Geth> ¦ rakudo: Merge pull request #3480 from vrurg/rakudo_3478

[18:33] <Geth> ¦ rakudo: 

[18:33] <Geth> ¦ rakudo: Added *_RUNNER_OPTS variable

[18:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fbeb3e346f

[19:32] *** sena_kun left
[19:40] <nine> japh: a solution could be to have plugins register for a namespace prefix. Or that we create lookup directories for all possible prefixes, i.e. Foo, Foo/Bar, Foo/Bar/Plugin for Foo::Bar::Plugin::Baz

[19:48] *** sena_kun joined
[20:07] <lizmat> vrurg++    thanks much!

[20:07] <vrurg> lizmat: my pleasure!

[20:08] <vrurg> It also pushed me to do change perl6- prefix to rakudo- on executables...

[20:09] <lizmat> vrurg: I don't see that in the diff?

[20:09] <vrurg> WIP

[20:09] <lizmat> aaah  ok

[20:14] <Geth> ¦ roast: 085d8a78e1 | (Elizabeth Mattijsen)++ | 2 files

[20:14] <Geth> ¦ roast: Change extension of t/spec/super-fudger to .raku

[20:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/085d8a78e1

[20:15] <Geth> ¦ roast: 9e3e59f3c3 | (Elizabeth Mattijsen)++ | super-fudger.raku

[20:15] <Geth> ¦ roast: Update she-bang

[20:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9e3e59f3c3

[20:19] *** MasterDuke joined
[20:25] <Geth> ¦ rakudo: 90fc61bbb6 | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[20:25] <Geth> ¦ rakudo: Enable :i/:m on sub form of index/rindex

[20:25] <Geth> ¦ rakudo: 

[20:25] <Geth> ¦ rakudo: - except that Str.rindex is not ready for that yet

[20:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/90fc61bbb6

[20:25] <Geth> ¦ roast: 5fe52c27bc | (Elizabeth Mattijsen)++ | S32-str/index.t

[20:25] <Geth> ¦ roast: Add tests for :i/:m for sub form of index

[20:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5fe52c27bc

[20:25] <lizmat> writing tests++  :-)

[20:29] <lizmat> m: index( "foo", "o") for ^50000; say now - INIT now

[20:29] <camelia> rakudo-moar 8c995febd: OUTPUT: «0.02802055␤»

[20:29] <lizmat> m: "foo".index("o") for ^50000; say now - INIT now

[20:29] <camelia> rakudo-moar 8c995febd: OUTPUT: «0.0155095␤»

[20:30] <lizmat> hmmm... looks like I pessimized that with 90fc61bbb6

[20:30] <linkable6> (2020-02-13) https://github.com/rakudo/rakudo/commit/90fc61bbb6 Enable :i/:m on sub form of index/rindex

[20:43] *** dogbert17 joined
[20:49] * dogbert17 is trying to figure out which commit broke Perl6::Parser

[20:55] <lizmat> dogbert17++

[20:55] <dogbert17> it might come back and bite you :)

[20:56] <dogbert17> I'm getting close, only three possibilities left

[20:58] <Geth> ¦ rakudo: ec13c3d014 | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[20:58] <Geth> ¦ rakudo: Make sub index about 20x as fast (again)

[20:58] <Geth> ¦ rakudo: 

[20:58] <Geth> ¦ rakudo: Commit 90fc61bbb6 slowed down sub index roughly 20x, so it seemed

[20:58] <Geth> ¦ rakudo: appropriat to fix this.  So instead of just capturing all named

[20:58] <Geth> ¦ rakudo: parameters, and slipping them through, create candidates for the

[20:58] <Geth> ¦ rakudo: expected named parameters, and pass those through.  Also create a

[20:58] <Geth> ¦ rakudo: candidate without any named parameters.  After this, index("foo","o)

[20:58] <Geth> ¦ rakudo: is roughly 2x as slow as "foo".index("o").

[20:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ec13c3d014

[21:10] <dogbert17> lizmat: the culprit seems to be https://github.com/rakudo/rakudo/commit/ca78390eccf696ee1aa59139ca9823a357721cec

[21:10] <Geth> ¦ rakudo: ea44c194a8 | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[21:10] <Geth> ¦ rakudo: Make Cool.index also pass on :i and :m properly

[21:10] <Geth> ¦ rakudo: 

[21:10] <Geth> ¦ rakudo: Without affecting performance too much

[21:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ea44c194a8

[21:12] <lizmat> dogbert17: ah!  maybe a change in behaviour of the Raku grammar was not expected by Perl6::Parser ?

[21:13] <MasterDuke> i thought Perl6::Parser broke a while ago?

[21:13] <sena_kun> MasterDuke: it was clean on 2020.01

[21:13] <MasterDuke> ah

[21:14] <sena_kun> but reliably broken on last time I run blin, which was 5 days ago, Saturday

[21:14] <lizmat> yeah, it is broke allright

[21:19] <Geth> ¦ rakudo: 327c74a6e7 | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[21:19] <Geth> ¦ rakudo: Simplify sub index candidates

[21:19] <Geth> ¦ rakudo: 

[21:19] <Geth> ¦ rakudo: Named parameters can be optional and still expected.  This is

[21:19] <Geth> ¦ rakudo: different from methods, where unexpected nameds are just ignored.

[21:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/327c74a6e7

[21:32] *** sena_kun left
[21:45] <Geth> ¦ rakudo: 2176292965 | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[21:45] <Geth> ¦ rakudo: Restore exact behaviour of List.index/indices/contains

[21:45] <Geth> ¦ rakudo: 

[21:45] <Geth> ¦ rakudo: With c9b0218544 a warning is issued with regards to using a List

[21:45] <Geth> ¦ rakudo: as a string, when that is most likely not what one wants.  However,

[21:45] <Geth> ¦ rakudo: that commit also changed the string on which the method operates

[21:45] <Geth> ¦ rakudo: for a list like <a b c> from "a b c" to "abc".  This commit restores

[21:45] <Geth> ¦ rakudo: the "a b c" behaviour.

[21:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2176292965

[21:47] *** sena_kun joined
[21:56] <Geth> ¦ roast: 072904cb96 | (Elizabeth Mattijsen)++ | S32-str/index.t

[21:56] <Geth> ¦ roast: Add proper tests for Cool.index

[21:56] <Geth> ¦ roast: 

[21:56] <Geth> ¦ roast: By using a Match object, which should be quite common.

[21:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/072904cb96

[22:07] <Geth> ¦ rakudo: 73c5a25e89 | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[22:07] <Geth> ¦ rakudo: Make sure that Cool.contains passes on :i, :m

[22:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/73c5a25e89

[22:08] <Geth> ¦ roast: 882ca2795e | (Elizabeth Mattijsen)++ | S32-str/contains.t

[22:08] <Geth> ¦ roast: Add proper tests for Cool.contains

[22:08] <Geth> ¦ roast: 

[22:08] <Geth> ¦ roast: By using a Match object, which should be quite common.

[22:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/882ca2795e

[22:08] <lizmat> and that concludes my hacking for today&

[23:25] <japhb> lizmat++  # Streak of good hacking days

[23:34] *** sena_kun left
[23:48] *** sena_kun joined
