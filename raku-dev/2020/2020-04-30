[00:05] *** hungrydonkey joined
[01:53] *** pamplemousse joined
[02:14] *** tejr left
[02:15] *** pamplemousse left
[02:16] *** pamplemousse joined
[02:20] *** pamplemousse left
[02:26] *** pamplemousse joined
[02:26] *** AlexDani` joined
[02:28] *** AlexDaniel left
[04:02] *** ggoebel__ left
[04:13] *** AlexDani` is now known as AlexDaniel

[04:13] *** AlexDaniel left
[04:13] *** AlexDaniel joined
[04:18] *** pamplemousse left
[05:50] *** hungryd85 joined
[05:53] *** hungrydonkey left
[05:55] *** hungrydonkey joined
[05:57] *** hungryd85 left
[06:25] *** hungryd23 joined
[06:28] *** hungrydonkey left
[06:36] *** hungrydonkey joined
[06:39] *** hungryd23 left
[07:07] *** Kaiepi left
[07:08] *** Kaiepi joined
[07:27] *** hungryd47 joined
[07:27] *** hungrydonkey left
[08:27] *** sena_kun joined
[08:56] *** Altai-man_ joined
[08:58] *** sena_kun left
[08:59] *** Geth left
[08:59] *** Geth joined
[09:00] <SmokeMachine> m: “.”.IO.watch.tap: &say; “./bla”.IO.open(:w); sleep 1

[09:00] <camelia> rakudo-moar 5610416c8: OUTPUT: «Failed to open file /home/camelia/bla: Permission denied␤  in block <unit> at <tmp> line 1␤␤»

[09:00] <SmokeMachine> m: “/tmp”.IO.watch.tap: &say; “/tmp/bla”.IO.open(:w); sleep 1

[09:00] <camelia> rakudo-moar 5610416c8: OUTPUT: «/tmp/bla: FileRenamed␤<tmp>: FileChanged␤»

[09:00] <SmokeMachine> should it be working on MacOS?

[09:01] <SmokeMachine> sorry.. it is working...

[09:09] *** unclechu joined
[09:30] *** AlexDaniel` joined
[10:09] *** lizmat_ joined
[10:11] *** lizmat left
[10:19] <Geth> ¦ rakudo: 063bfa057d | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[10:19] <Geth> ¦ rakudo: R:I.ReifiedList returns a PredictiveIterator

[10:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/063bfa057d

[10:19] <Geth> ¦ rakudo: fcda03ba4d | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[10:19] <Geth> ¦ rakudo: Remove unneeded boxing from count-onlys

[10:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fcda03ba4d

[10:23] *** lizmat_ is now known as lizmat

[10:51] <Kaiepi> so a term i see a lot in Perl6::Actions and Perl6::Optimizer is "lowered". what exactly does this mean?

[10:52] <Kaiepi> a pr i want to make has to do with variables not being lowered when i assume they should be, which i'm assuming isn't a good thing, but that's a lot of assumptions to be making

[10:57] *** sena_kun joined
[10:57] <timotimo> lowered is either a) when instead of a general implementation being called with some options, we generate some code in place of the call or b) what used to be a lexical variable turns into a much cheaper local variable

[10:58] <timotimo> i guess you could say something is moved from a "more powerful" to a "less powerful" construct

[10:58] *** Altai-man_ left
[11:08] *** ggoebel__ joined
[11:11] <[Tux]> Rakudo version 2020.02.1-357-g5610416c8 - MoarVM version 2020.02.1-159-g5863b0235

[11:11] <[Tux]> csv-test-xs-20      0.385 -  0.387

[11:11] <[Tux]> csv-ip5xs           0.916 -  0.965

[11:11] <[Tux]> test-t --race       1.159 -  1.169

[11:11] <[Tux]> test-t              2.773 -  2.871

[11:11] <[Tux]> test                8.127 -  8.150

[11:11] <[Tux]> csv-ip5xs-20        9.616 - 10.123

[11:11] <[Tux]> test-t-20 --race   13.544 - 13.959

[11:11] <[Tux]> csv-parser         26.052 - 26.684

[11:11] <[Tux]> test-t-20          48.250 - 49.441

[11:18] <Kaiepi> the latter i assume would make the pr be worth making then, i think timotimo 

[11:21] <timotimo> depends on the circumstances under which they currently are prevented from being lowered

[11:22] <timotimo> we have to be careful, since any possibility of accessing a lexical from an inner block or closure means we can not lower it, otherwise it'd be a bug

[11:43] <Geth> ¦ rakudo: 3ca380224d | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[11:43] <Geth> ¦ rakudo: Add R:I.ReifiedListReverse

[11:43] <Geth> ¦ rakudo: 

[11:43] <Geth> ¦ rakudo: An iterator that produces the elements from a reified list from the

[11:43] <Geth> ¦ rakudo: end rather than from the beginning.

[11:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3ca380224d

[11:43] <Geth> ¦ rakudo: 270cc27559 | (Elizabeth Mattijsen)++ | src/core.c/List.pm6

[11:43] <Geth> ¦ rakudo: List.reverse now uses R:I.ReifiedListReverse

[11:43] <Geth> ¦ rakudo: 

[11:43] <Geth> ¦ rakudo: This saves one (potentially large) IterationBuffer allocation, plus

[11:43] <Geth> ¦ rakudo: a lot of needless work copying values over.

[11:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/270cc27559

[11:43] <Geth> ¦ rakudo: cea0fc78d1 | (Elizabeth Mattijsen)++ | src/core.c/Seq.pm6

[11:43] <Geth> ¦ rakudo: Give Seq its own .reverse using R:I.ReifiedListReverse

[11:43] <Geth> ¦ rakudo: 

[11:43] <Geth> ¦ rakudo: This bypasses the ordinary List creation with all of its overhead

[11:43] <Geth> ¦ rakudo: and just create an IterationBuffer directly and then iterate from

[11:43] <Geth> ¦ rakudo: the end.

[11:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cea0fc78d1

[11:46] <timotimo> cool

[12:06] <Geth> ¦ rakudo: 4025ca4377 | (Elizabeth Mattijsen)++ | src/core.c/Seq.pm6

[12:06] <Geth> ¦ rakudo: Make sure Seq.reverse fails on lazy iterators

[12:06] <Geth> ¦ rakudo: 

[12:06] <Geth> ¦ rakudo: That was one thing the previous Seq.list.reverse path did do, but

[12:06] <Geth> ¦ rakudo: now we check without trying to reify.

[12:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4025ca4377

[12:08] *** evalable6 left
[12:08] *** linkable6 left
[12:09] *** evalable6 joined
[12:10] *** linkable6 joined
[12:31] <nine> Looks like repl.t and 03-errors.t are consistently failing now  https://build.opensuse.org/package/live_build_log/home:niner9:rakudo-git/rakudo/openSUSE_Leap_15.2/x86_64

[12:32] <nine> lizmat: CircleCI seems to think so, too: https://circleci.com/gh/rakudo/rakudo/5897

[12:49] *** pamplemousse joined
[12:56] *** Altai-man_ joined
[12:56] *** ggoebel__ left
[12:56] <AlexDaniel> nine: have you tried installing Inline::Perl5 on 2020.02.1 ?

[12:56] <nine> Certainly, why?

[12:57] *** ggoebel joined
[12:57] <AlexDaniel> nine: https://gist.github.com/AlexDaniel/0f80236a4369e26430d1496ef917f8a2

[12:58] *** sena_kun left
[13:01] <nine> Odd...it should get that attribute from Perl6::Metamodel::C3MRO: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/C3MRO.nqp#L3

[13:04] <AlexDaniel> nine: I think it's fine on master, so I'll just switch back to that, but just wanted to let you know

[13:12] *** ggoebel left
[13:17] *** ggoebel joined
[13:54] <lizmat> argh. /me forgot to do make test

[14:12] *** [Tux] left
[14:42] *** [Tux] joined
[14:57] *** sena_kun joined
[14:58] *** Altai-man_ left
[16:20] <Geth> ¦ rakudo: 447b396f8a | (Elizabeth Mattijsen)++ | src/core.c/List.pm6

[16:20] <Geth> ¦ rakudo: Check reified before sending it off to R:I

[16:20] <Geth> ¦ rakudo: 

[16:20] <Geth> ¦ rakudo: Turns out, something in the bowels of the module loader is creating

[16:20] <Geth> ¦ rakudo: an empty String object without setting the $!reified attribute, and

[16:20] <Geth> ¦ rakudo: calls .reverse on it.  In the old code, this would be caught by

[16:20] <Geth> ¦ rakudo: the conditional: the new code didn't do that, assuming it would be

[16:20] <Geth> ¦ rakudo: handled inside R:I.  Restored the old situation, but still calling

[16:20] <Geth> ¦ rakudo: the new ReifiedListReverse iterator.

[16:20] <Geth> ¦ rakudo: 

[16:20] <Geth> ¦ rakudo: This fixes test failures as seen in CircleCI and friends.

[16:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/447b396f8a

[16:27] *** cognomin_ joined
[16:30] *** cognominal left
[16:33] <Geth> ¦ rakudo: Kaiepi++ created pull request #3649: Add a parents metamethod to Metamodel::ParametricRoleGroupHOW

[16:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3649

[16:56] *** Altai-man_ joined
[16:58] *** sena_kun left
[17:07] *** hungryd47 left
[17:22] *** Geth left
[17:24] *** travis-ci joined
[17:24] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Check reified before sending it off to R:I

[17:24] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/681573952 https://github.com/rakudo/rakudo/compare/4025ca4377a2...447b396f8a28

[17:24] *** travis-ci left
[17:24] *** Geth joined
[18:27] *** cognominal joined
[18:30] *** cognomin_ left
[18:35] *** squashable6 left
[18:38] *** squashable6 joined
[18:56] *** sena_kun joined
[18:58] *** Altai-man_ left
[19:37] <Geth> ¦ rakudo: 48d3a7f8f9 | (Elizabeth Mattijsen)++ | src/core.c/Lock/Async.pm6

[19:37] <Geth> ¦ rakudo: Fix grammo in comment

[19:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/48d3a7f8f9

[19:53] <Geth> ¦ rakudo: e0336d52ab | (Elizabeth Mattijsen)++ | src/core.c/Supply-coercers.pm6

[19:53] <Geth> ¦ rakudo: Make Supply.grab a few percent faster

[19:53] <Geth> ¦ rakudo: 

[19:53] <Geth> ¦ rakudo: Use an IterationBuffer as the cache, and nqp::push rather than HLL

[19:53] <Geth> ¦ rakudo: push.  Saves 1 Scalar and 1 BOOThash per value emitted.

[19:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e0336d52ab

[20:13] <Geth> ¦ rakudo: 4339073baf | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[20:13] <Geth> ¦ rakudo: Use .skip instead of [1..*]

[20:13] <Geth> ¦ rakudo: 

[20:13] <Geth> ¦ rakudo: The [1..*] first caches the Seq, then creates a List out of the

[20:13] <Geth> ¦ rakudo: given indices, and the creates a Seq out of that.  .skip just loses

[20:13] <Geth> ¦ rakudo: one value from the Seq while returning it, so that's much more efficient.

[20:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4339073baf

[20:16] *** finsternis left
[20:17] *** finsternis joined
[20:33] <Geth> ¦ rakudo: cfc6cc3c6f | (Elizabeth Mattijsen)++ | src/core.c/Supply-coercers.pm6

[20:33] <Geth> ¦ rakudo: Use ever so slightly more efficient WhateverCodes

[20:33] <Geth> ¦ rakudo: 

[20:33] <Geth> ¦ rakudo: And actually improve the readability

[20:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cfc6cc3c6f

[20:54] <Geth> ¦ rakudo: 33f41966cf | (Elizabeth Mattijsen)++ | src/core.c/Supply-coercers.pm6

[20:54] <Geth> ¦ rakudo: Use a smarter semaphore in Supply.squish

[20:54] <Geth> ¦ rakudo: 

[20:54] <Geth> ¦ rakudo: Since foo.WHICH can never produce an nqp::null, use nqp::null as a semaphore

[20:54] <Geth> ¦ rakudo: to indicate the first value has not yet been seen.  Removes the need for

[20:54] <Geth> ¦ rakudo: a native integer (check) for each received value.

[20:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/33f41966cf

[20:56] *** Altai-man_ joined
[20:58] *** Kaiepi left
[20:58] *** sena_kun left
[20:58] *** Kaiepi joined
[21:03] <Geth> ¦ problem-solving: Kaiepi assigned to jnthn Issue A better MOP API for wrapper kinds could exist https://github.com/Raku/problem-solving/issues/180

[21:14] *** pamplemousse left
[22:40] *** Kaiepi left
[22:49] *** Altai-man_ left
[23:15] *** Kaiepi joined
[23:54] *** guifa2 joined
