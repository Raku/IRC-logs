[00:17] *** evalable6 left
[00:17] *** linkable6 left
[00:18] *** linkable6 joined
[00:19] *** evalable6 joined
[00:21] *** melezhik joined
[00:23] <melezhik> I am thinking about creating automated tests system based on active rakudo issues ... 

[00:23] <melezhik> the idea us 

[00:24] <melezhik> the idea is to have code examples based on users input in issues

[00:25] <melezhik> and run them by cron for every new rakudo commit

[00:25] <melezhik> so that to make it sure that all active release issues are covered and addressed

[00:27] <melezhik> initial code samples could be created using RakuPlay web ui, user just need to name builds after issue numbers

[00:27] *** Kaiepi left
[00:28] <melezhik> I already created some examples for some existing issues

[00:29] <melezhik> in the end it's possible to have a summary page referencing all closed/active issues as well as RakuPlay builds

[00:30] <melezhik> just would like to have an informal feedback here before starting to implement anything

[00:31] <melezhik> I know thing like Roast already exists but this might be more tied to issues in a current release ...

[00:33] <melezhik> and users not necessarily have to write a unit test for an issue

[00:34] <melezhik> this alternative might be just easier for them and take a less efforts ... just drop some code and cron will run it for all new commits

[00:35] <melezhik> thoughts? positive criticism? ))))

[00:36] <timotimo> i remember we went through everything that was ever evaluated in camelia or evalable

[00:37] <melezhik> everything?

[00:41] *** melezhik left
[00:47] *** Kaiepi joined
[00:48] *** melezhik joined
[00:48] <melezhik> as an example - http://rakudist.raku.org/sparky/report/RakuPlay-3/1555 

[00:50] <melezhik> cron would rerun this build for every new commit till it is green and and the related issue is open 

[00:51] *** melezhik left
[01:59] *** lucasb left
[03:34] <Geth> ¦ rakudo: vrurg++ created pull request #4076: Make defined lists not ACCEPTing undefined

[03:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4076

[03:38] <Geth> ¦ roast: vrurg++ created pull request #706: Change the meaning of List ~~ List.new test

[03:38] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/706

[06:27] *** Altai-man joined
[07:34] *** domidumont joined
[07:57] <[Tux]> Rakudo v2020.11-57-g4e21adab9 (v6.d) on MoarVM 2020.11-47-g1c7358004

[07:57] <[Tux]> csv-test-xs-20      0.387 -  0.398

[07:57] <[Tux]> csv-ip5xs           0.804 -  0.826

[07:57] <[Tux]> test-t --race       0.832 -  0.841

[07:57] <[Tux]> test-t              1.831 -  1.874

[07:57] <[Tux]> test                7.631 -  7.706

[07:57] <[Tux]> csv-ip5xs-20        7.742 -  7.990

[07:57] <[Tux]> test-t-20 --race    8.950 -  9.000

[07:57] <[Tux]> csv-parser         24.638 - 24.913

[07:57] <[Tux]> test-t-20          31.534 - 32.013

[08:07] *** domidumont left
[08:08] *** domidumont joined
[08:12] *** sena_kun joined
[08:13] *** Xliff joined
[08:13] *** Altai-man left
[08:43] *** domidumont left
[08:52] *** patrickb joined
[08:56] *** domidumont joined
[10:04] *** lizmat_ joined
[10:08] *** lizmat left
[10:08] *** lizmat_ left
[10:14] *** lizmat joined
[10:18] <Geth> ¦ rakudo: 9fd79f9e8f | (Vadim Belman)++ | src/core.c/List.pm6

[10:18] <Geth> ¦ rakudo: Make defined lists not ACCEPTing undefined

[10:18] <Geth> ¦ rakudo: 

[10:18] <Geth> ¦ rakudo: So, `List ~~ ()` will be False.

[10:18] <Geth> ¦ rakudo: 

[10:18] <Geth> ¦ rakudo: Doesn't break the solution for #1833 because no warning is produced by

[10:18] <Geth> ¦ rakudo: the above smartmatch.

[10:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9fd79f9e8f

[10:18] <linkable6> RAKUDO#1833 [closed]: https://github.com/rakudo/rakudo/issues/1833 [tests needed] Spurious warning when smartmatching Slip ~~ Empty

[10:18] <Geth> ¦ rakudo: 3d8e942f07 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/List.pm6

[10:18] <Geth> ¦ rakudo: Merge pull request #4076 from vrurg/rakudo_3917

[10:18] <Geth> ¦ rakudo: 

[10:18] <Geth> ¦ rakudo: Make defined lists not ACCEPTing undefined

[10:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3d8e942f07

[10:25] <sena_kun> m: () ~~ List

[10:25] <camelia> rakudo-moar 4e21adab9: ( no output )

[10:25] <sena_kun> m: say () ~~ List

[10:25] <camelia> rakudo-moar 4e21adab9: OUTPUT: «True␤»

[10:25] <sena_kun> m: say List ~~ ()

[10:25] <camelia> rakudo-moar 4e21adab9: OUTPUT: «True␤»

[10:25] <sena_kun> releasable6, status

[10:25] <releasable6> sena_kun, Next release in ≈19 days and ≈8 hours. 1 blocker. 0 out of 57 commits logged

[10:25] <releasable6> sena_kun, Details: https://gist.github.com/2d32aeec537e069bcd8906bf44bff9ab

[12:11] *** Altai-man joined
[12:14] *** sena_kun left
[13:53] <lizmat> notable6: weekly

[13:53] <notable6> lizmat, 1 note: 2020-11-27T10:56:13Z <Xliff>: https://gist.github.com/Xliff/3290a3f31a3f7937f22421bb1d4e0480

[13:56] <timotimo> releasable6: status

[13:56] <releasable6> timotimo, Next release in ≈19 days and ≈5 hours. 1 blocker. 0 out of 59 commits logged

[13:56] <releasable6> timotimo, Details: https://gist.github.com/13f823a102ec2f298ad1b2740ad7e198

[13:57] <lizmat> notable6: weekly reset

[13:57] <notable6> lizmat, Moved existing notes to “weekly_2020-11-30T13:57:03Z”

[14:04] *** lucasb joined
[14:25] *** leont joined
[14:33] <Geth> ¦ roast: 44063d0650 | (Vadim Belman)++ | S32-basics/warn.t

[14:33] <Geth> ¦ roast: Change the meaning of List ~~ List.new test

[14:33] <Geth> ¦ roast: 

[14:33] <Geth> ¦ roast: The smartmatch should return `False`. But the problem it supposed to

[14:33] <Geth> ¦ roast: test for, as stated in rakudo/rakudo#1833, is to make sure no warning is

[14:33] <Geth> ¦ roast: produced by the match. This job is still done well by the test.

[14:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/44063d0650

[14:33] <Geth> ¦ roast: 49fb94bf6e | (Vadim Belman)++ | S32-basics/warn.t

[14:33] <linkable6> RAKUDO#1833 [closed]: https://github.com/rakudo/rakudo/issues/1833 [tests needed] Spurious warning when smartmatching Slip ~~ Empty

[14:33] <Geth> ¦ roast: Silince down and improve reliability of warning tests

[14:33] <Geth> ¦ roast: 

[14:33] <Geth> ¦ roast: First of all, intercept the warning and don't let them escape to keep

[14:33] <Geth> ¦ roast: TAP output clear.

[14:33] <Geth> ¦ roast: 

[14:33] <Geth> ¦ roast: Also, make sure that the warnings produced are the ones we expect for.

[14:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/49fb94bf6e

[14:33] <Geth> ¦ roast: 5256c6958c | (Vadim Belman)++ (committed using GitHub Web editor) | S32-basics/warn.t

[14:33] <Geth> ¦ roast: Merge pull request #706 from vrurg/rakudo_3917

[14:33] <Geth> ¦ roast: 

[14:33] <Geth> ¦ roast: Change the meaning of List ~~ List.new test

[14:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/5256c6958c

[15:15] <Geth> ¦ rakudo: lizmat self-assigned inescapable 'Redeclaration of symbol' warnings in the REPL https://github.com/rakudo/rakudo/issues/4077

[15:40] <Altai-man> lizmat, not sure if we make it into weekly, but a new Comma release will be announced very soon.

[15:40] <Altai-man> In minutes.

[15:40] <lizmat> then that most likely will be in time  :-)

[15:50] <patrickb> lizmat: Do you think a call for companies using Raku (to be placed on raku.org) fits into the weekly?

[15:51] <lizmat> yes, if we have a page describing why we would like to know, and where people could give their ok ?

[15:53] <patrickb> lizmat: Hm. Good points. I'll create an issue for raku.org. How much time do I have left?

[15:54] <lizmat> I'd like to be done in an hour or so...  

[15:54] <lizmat> and I'd rather have this done properly then in a hurry, so I wouldn't mind this being mentioned in next weeks RWN

[15:55] *** vrurg_ joined
[15:55] <patrickb> lizmat: OK. Fine with me.

[15:56] *** vrurg left
[15:57] <[Coke]> is it true that we still consider 'ecosystem' to be a stopgap until we get something more CPAN like?

[15:57] <[Coke]> (doing a slight cleanup on the README and that stands out as possibly archaic at this point)

[15:57] <lizmat> I guess...  there was talk of a zeco in a grant proposal once?

[15:58] *** vrurg_ left
[16:00] *** vrurg joined
[16:01] *** patrickb36 joined
[16:01] <patrickb36> Coke: I think it's kind of a hot topic. Everyone agrees eco has problems. The controversial question is how to proceed.

[16:02] <[Coke]> OK

[16:02] *** patrickb left
[16:03] <Altai-man> lizmat, https://twitter.com/koto_san_kana/status/1333441478933295107

[16:04] <patrickb36> I still hope tony-o to gives his proposal another try. I'd love to give him a heads up, but have no idea of how to reach him.

[16:12] *** sena_kun joined
[16:13] *** Altai-man left
[16:18] *** patrickb36 left
[16:23] *** patrickb joined
[16:24] *** melezhik joined
[16:26] <melezhik> Hi rakudo devs , I still hope to get a feedback on my issue/testing idea ... :] 

[16:33] *** cognominal joined
[16:34] <[Coke]> Is there a writeup?

[16:34] <[Coke]> or just here in chat?

[16:36] <melezhik> [Coke] are you talking to me? sorry sometimes I lose a context in irc ... )))

[16:38] <[Coke]> yes, your request just now for feedback.

[16:40] <melezhik> yeah, just wanted to clarify ... so it's just what I've put in chat here before ... I could do some writeup, if more details are needed ...

[16:41] <melezhik> just decided to start with some thoughts I dropped here ... without any formal docs ...

[16:45] *** melezhik left
[17:19] <[Coke]> for me, having an issue or something to comment on makes it easier. for some, irc is fine. your mileage will vary

[17:27] *** melezhik joined
[17:28] <melezhik> yeah, [Coke] I could create an issue in https://github.com/Raku/problem-solving with proposal details ...

[17:37] *** melezhik left
[17:46] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/11/30/2020-48-devroom-on-fosdem/

[18:07] <moritz> lizmat++

[18:07] <sjn> yay! lizmat++

[18:13] <Geth> ¦ rakudo: e8ab5272f2 | (Elizabeth Mattijsen)++ | src/core.c/REPL.pm6

[18:13] <Geth> ¦ rakudo: Make any STDERR output also reset REPL

[18:13] <Geth> ¦ rakudo: 

[18:13] <Geth> ¦ rakudo: Fixes #4077.  Any output on STDERR will now also cause a "reset" in

[18:13] <Geth> ¦ rakudo: the sense that it won't combine the previous lines into a single

[18:13] <Geth> ¦ rakudo: EVAL, as that most likely indicated a "worry" warning (such as

[18:13] <Geth> ¦ rakudo: described in the issue) or some explicit output on STDERR (such as

[18:14] <Geth> ¦ rakudo: a "note").

[18:14] <linkable6> RAKUDO#4077 [closed]: https://github.com/rakudo/rakudo/issues/4077 inescapable 'Redeclaration of symbol' warnings in the REPL

[18:14] <Geth> ¦ rakudo: 

[18:14] <Geth> ¦ rakudo: This means that the redeclaration warning will be shown once.  Which

[18:14] <Geth> ¦ rakudo: I think would actually be a nice additional feature.

[18:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e8ab5272f2

[18:25] *** domidumont left
[18:35] *** moray joined
[18:35] *** moray is now known as morayj

[19:31] <lizmat> afk&

[19:42] *** morayj left
[20:12] *** Altai-man joined
[20:13] *** sena_kun left
[20:34] <timotimo> i wonder why the stagestats output makes a difference between stage parse and all other stages

[20:35] <MasterDuke> what do you mean?

[20:35] <timotimo> https://github.com/Raku/nqp/blob/master/src/HLL/Compiler.nqp#L513 - and one more line further up

[20:40] <MasterDuke> huh

[20:40] <MasterDuke> https://github.com/Raku/nqp/commit/8a656309ce02c068803e23acc522737aa2e0d28e

[20:41] <timotimo> welp, i'll go slap myself in the face then

[20:42] <timotimo> oh, right, because nested compilation happens between the start and end of a stage

[20:43] <timotimo> https://gist.github.com/timo/401de473e1e770a58fe880cb53410c89

[20:44] <timotimo> i would like it to be a bit more parse-able

[20:44] <MasterDuke> it's verbose

[20:44] <timotimo> very

[20:45] <timotimo> as long as the start and end of stages are being printed out at the start and end of the stage, it'll have to look like this

[20:45] <timotimo> no not like this

[20:45] <MasterDuke> stick the 'finish in ...' line on the end of the 'started' line if nothing happened inbetween?

[20:48] <timotimo> hmm, the "started" line writes a newline unconditionally, though

[20:49] <timotimo> should the newline go before the started line instead?

[20:49] <MasterDuke> store the data in a hash and have a env variable (or command line option) for output format, like the json exceptions

[20:50] <timotimo> this is supposed to work with multiple processes without having the parent processes read from their children and write to their own output again

[20:50] <MasterDuke> ah

[20:51] <timotimo> in particular, the stagestats flag now lets you specify a file path, which can be a fifo for example

[20:51] <MasterDuke> then does it work if you put the newline first?

[20:55] <timotimo> let's see

[20:57] <timotimo> i'm looking for a good spot in the parser to report parse progress

[20:58] <timotimo> i want something that doesn't run too often, so the overhead is minimized

[20:58] <timotimo> https://gist.github.com/timo/8b041d5a95de7d9322a9041f379f5327

[21:12] <MasterDuke> that looks better. any way to indent the different sets or something like that?

[21:13] <timotimo> not so sure

[21:18] <timotimo> i need a different piece of code than the core setting that's big

[21:18] <timotimo> especially one that pulls in other long-to-compile files

[21:18] <timotimo> time for gtk i guess

[21:31] <timotimo> dang, this example code i had in my backlog just precomped a single file

[21:33] *** lucasb left
[21:41] <timotimo> i'll drop this for now

[21:48] *** Altai-man left
[22:13] *** patrickb left
