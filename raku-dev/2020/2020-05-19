[00:14] *** Ven`` joined
[01:03] *** lucasb left
[01:11] *** Ven`` left
[05:12] *** quotable6 left
[05:12] *** bloatable6 left
[05:12] *** notable6 left
[05:12] *** greppable6 left
[05:12] *** shareable6 left
[05:12] *** tellable6 left
[05:12] *** squashable6 left
[05:12] *** bisectable6 left
[05:12] *** releasable6 left
[05:12] *** benchable6 left
[05:12] *** committable6 left
[05:12] *** nativecallable6 left
[05:12] *** sourceable6 left
[05:12] *** coverable6 left
[05:12] *** statisfiable6 left
[05:12] *** evalable6 left
[05:12] *** reportable6 left
[05:12] *** linkable6 left
[05:12] *** unicodable6 left
[05:13] *** tellable6 joined
[05:13] *** bisectable6 joined
[05:13] *** nativecallable6 joined
[05:13] *** releasable6 joined
[05:13] *** reportable6 joined
[05:13] *** linkable6 joined
[05:13] *** statisfiable6 joined
[05:14] *** greppable6 joined
[05:14] *** squashable6 joined
[05:14] *** quotable6 joined
[05:14] *** sourceable6 joined
[05:14] *** bloatable6 joined
[05:14] *** benchable6 joined
[05:14] *** unicodable6 joined
[05:14] *** shareable6 joined
[05:15] *** coverable6 joined
[05:15] *** notable6 joined
[05:15] *** evalable6 joined
[05:15] *** committable6 joined
[05:50] *** patrickb joined
[05:56] *** TreyHarris left
[06:08] *** patrickb45 joined
[06:08] *** patrickb left
[06:38] *** jmerelo joined
[06:54] *** domidumont joined
[07:39] *** sivoais left
[07:40] *** sivoais joined
[08:14] *** Altai-man_ joined
[08:22] <lizmat> Files=1306, Tests=111292, 213 wallclock secs (28.95 usr  8.23 sys + 2994.54 cusr 276.05 csys = 3307.77 CPU)

[08:26] *** sena_kun joined
[08:28] *** Altai-man_ left
[08:41] *** finsternis left
[08:41] *** finsternis joined
[09:34] *** Ven`` joined
[09:37] <[Tux]> Rakudo version 2020.05.1-139-g95f7d34e8 - MoarVM version 2020.05-13-g03c9154e8

[09:37] <[Tux]> csv-test-xs-20      0.383 -  0.384

[09:37] <[Tux]> csv-ip5xs           0.834 -  0.844

[09:37] <[Tux]> test-t --race       0.836 -  0.849

[09:37] <[Tux]> test-t              1.925 -  1.945

[09:37] <[Tux]> test                7.547 -  7.553

[09:37] <[Tux]> csv-ip5xs-20        8.033 -  8.384

[09:37] <[Tux]> test-t-20 --race    8.638 -  8.714

[09:37] <[Tux]> csv-parser         25.083 - 25.108

[09:37] <[Tux]> test-t-20          30.747 - 31.019

[10:15] *** Ven`` left
[10:15] <lizmat> I guess it's time to look for another place for asking Raku questions

[10:16] <lizmat> I don't understand why this question got closed: https://stackoverflow.com/questions/61876517/where-is-the-documentation-of-the-msb-bit-set-alt-gr-characters-for-raku-i-e

[10:19] <jnthn> It's not clear to me which of the reasons for a question being closed that one doesn't meet

[10:19] <jnthn> uh, other way around

[10:20] <jnthn> I put a reopen vote on it.

[10:20] <patrickb45> I suspect some kind of automated close (spam filter-y)

[10:23] <lizmat> no, it was definitely someone who closed it

[10:23] <lizmat> they initially said that the answer I gave was insufficient in a comment

[10:24] <lizmat> then I pointed out that I gave the answer directly addressing the second question in the post

[10:24] <lizmat> then pointed out that the unclarity of the first question in the post would be probably be answered by seeing the list of unicode chars

[10:25] <lizmat> next morning: the comment of this person is gone, and the question is closed by that person

[10:25] <lizmat> I've now adapted the question to only show the second question: where is a list

[10:25] *** Altai-man_ joined
[10:26] <lizmat> this is the second time in about 2 weeks that SO just closed an, in my eyes, perfectly good question with a perfectly good answer

[10:28] *** sena_kun left
[11:46] <robertle> oh wow, I just ran my benchmarking script against 2020.02 and 2020.05 and these two seem to be significantly faster than the few releases before: https://github.com/robertlemmen/p6bench

[11:46] <robertle> is this just me, or does that match what you folks are seeing in your own tests?

[11:47] <Altai-man_> robertle, glad to know!

[11:49] <Altai-man_> robertle, well, Rakudo is becoming faster over time. It is different in different areas because there is no single thing which will affect performance of everything (well, technically there might be, but), but there is gradual and steady process. :)

[11:53] <robertle> sure, just wondering whether what I see is also visible in other benchmarks too. it would be disapointing if mine would pick up a single optimization in all 4 parts, and show it that massively. the whole point was to make it less of a micro-benchmark and get a handle on full-app performance instead...

[12:02] <jnthn> If something helped them all, it'd be some kind of cross-cutting improvement. Maybe the derived specializations work in MoarVM, which was aimed at helping larger programs rather than micro-benchmarks.

[12:09] <jmerelo> jnthn: reopened

[12:17] *** jmerelo left
[12:27] *** sena_kun joined
[12:28] *** Altai-man_ left
[12:37] <MasterDuke> robertle: just a quick looks shows there might be a bunch of DateTimes and FatRat created in the first two programs and iirc lizmat made creating both of them faster

[12:39] <MasterDuke> timotimo: https://github.com/robertlemmen/p6bench/blob/master/02-gauss-elimination and https://github.com/robertlemmen/p6bench/blob/master/03-mandelbrot seem like they might be candidates for your hyperopoptimization

[13:07] <Geth> Â¦ rakudo: 2a88990b5a | (Elizabeth Mattijsen)++ | 2 files

[13:07] <Geth> Â¦ rakudo: Make .IO / IO::Path.new about 2x as fast

[13:07] <Geth> Â¦ rakudo: 

[13:07] <Geth> Â¦ rakudo: - don't use .bless internally, but a private !SET-SELF method

[13:07] <Geth> Â¦ rakudo: - set up .new candidates such that IO::Path.new("str") / "str".IO is fast-pathed

[13:07] <Geth> Â¦ rakudo: - add an extra Str.IO candidate for fast-pathing

[13:07] <Geth> Â¦ rakudo: - remove the !is-absolute method, integrate into !SET-SELF

[13:07] <Geth> Â¦ rakudo: 

[13:07] <Geth> Â¦ rakudo: Having to call &DYNAMIC twice for each IO::Path.new(Str) is now taking

[13:07] <Geth> Â¦ rakudo: more than 50% of CPU needed for this.

[13:07] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2a88990b5a

[13:21] *** Kaiepi left
[13:44] *** patrickb45 left
[13:49] *** patrickb joined
[13:54] *** patrickb left
[13:57] *** patrickb joined
[13:58] <Geth> Â¦ roast: 65131bc741 | (Elizabeth Mattijsen)++ | S32-io/io-spec-unix.t

[13:58] <Geth> Â¦ roast: Fix .curupdir tests

[13:58] <Geth> Â¦ roast: 

[13:58] <Geth> Â¦ roast: They were too specific.  .curupdir should return something that you

[13:58] <Geth> Â¦ roast: can call .ACCEPTS on with the name of the directory entry to be checked.

[13:58] <Geth> Â¦ roast: That is currently a Junction, but could also be a Block

[13:58] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/65131bc741

[14:01] <Geth> Â¦ rakudo: 6a0eaabdb2 | (Elizabeth Mattijsen)++ | src/core.c/IO/Spec/Unix.pm6

[14:01] <Geth> Â¦ rakudo: Make IO::Spec.curupdir about 25% faster

[14:01] <Geth> Â¦ rakudo: 

[14:01] <Geth> Â¦ rakudo: By having it return a Block rather than a Junction.  This should make

[14:01] <Geth> Â¦ rakudo: IO::Path.dir a bit faster.

[14:01] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6a0eaabdb2

[14:26] *** Altai-man_ joined
[14:28] *** sena_kun left
[14:30] <nine> I just noticed: the various "missing static code ref for closure" messages I get are always about closures in NQP code. Now this could be a conicidence (as the compiler's simply written in much NQP) but it could also mean that NQP doesn't do everything right yet WRT closures and BEGIN time

[14:40] <nine> Well, yes. In Perl6::World, things like sub_id_to_cloned_code_objects are part of the shared compilation context while in NQP::World, they are still attributes (i.e. un-shared)

[14:42] <nine> OTOH I don't see why we would have nested NQP::Worlds...

[14:48] *** jmerelo joined
[14:54] <tbrowder> is there any way to get a raku compiler option to affect grammar actions by sharing a variable? i'm almost sure there is but haven't broken the code yet.

[15:01] <dogbert17> there seems to be a spectest failure in t/spec/S32-str/utf8-c8.t

[15:01] <dogbert17> is that old news?

[15:01] <lizmat> dogbert17 what is the error and are you on MacOS?

[15:02] <dogbert17> I'm on Linux and the error is 'Unexpected named argument 'bin' passed in block  at t/spec/S32-str/utf8-c8.t line 139'

[15:03] * lizmat checks

[15:03] <dogbert17> perhaps I'm doing something wrong

[15:04] <dogbert17> his is Rakudo version 2020.05.1-141-g6a0eaab built on MoarVM version 2020.05-10-g5fe4a81

[15:04] <MasterDuke> i thought that's what she fixed a day or two ago. do you have some local changes to your roast checkout preventing it updating?

[15:05] * dogbert17 checks

[15:06] <dogbert17> strange, git status said everything was ok but git pull retrieved S32-str/utf8-c8.t

[15:06] <dogbert17> I thought that was done automatically when spectest was run

[15:07] <lizmat> it is ?

[15:08] <dogbert17> I have never had to update roast specifically when running spectest unless my memory has failed totally

[15:08] <Geth> Â¦ roast: b69a1abac6 | (Elizabeth Mattijsen)++ | S32-str/utf8-c8.t

[15:08] <Geth> Â¦ roast: Skip utf8-c8 tests on MacOS

[15:08] <Geth> Â¦ roast: 

[15:08] <Geth> Â¦ roast: These have been failing for more than 6 months now, I'm tired of it.

[15:08] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/b69a1abac6

[15:08] <MasterDuke> the spectest run with the error should have some output right at the beginning about whether it pulled or not

[15:08] <dogbert17> MasterDuke++

[15:08] <dogbert17> fatal: unable to access 'https://github.com/perl6/roast.git/': Failed to connect to github.com port 443: Connection timed out

[15:08] <lizmat> dogbert17: maybe because Github has been flaky (well for me at least) in the past hours, maybe it timed out on the update and then just went on to spectest

[15:08] <dogbert17> Makefile:146: recipe for target 'spectest_update' failed

[15:09] <dogbert17> make: [spectest_update] Error 1 (ignored)

[15:09] <dogbert17> lizmat++ everything works now, sorry for the noise

[15:59] *** patrickb left
[16:14] <nine> Progress! On a hunch (and lacking any real insight) I unshared the code_object_fixup_list and suddenly I get through compilation without a "missing static code ref for closure"!

[16:15] <nine> That is, when I don't get the bogus "Semicolon form of 'perl5class' without 'unit' is illegal" error

[16:15] <nine> But it shows that those were 2 distinct errors and it's just one of them that gets triggered by some kind of hash order issue

[16:27] *** sena_kun joined
[16:27] <nine> I should not have recompiled rakudo. Back to Serialization Error: missing static code ref for closure '' (gen/moar/stage2/NQPHLL.nqp:2206)

[16:29] *** Altai-man_ left
[16:36] <nine> Huh...when compiling the setting with --optimize=0 install-core-dist.raku fails with "New type Stash for Method is not a mixin type"

[16:45] <nine> Needs at least --optimize=2

[16:51] <timotimo> it needs to be at least ... three times more optimized than this!

[17:05] <MasterDuke> the timotimo optimizer for programs that want to run good and do other stuff good too

[17:06] <timotimo> <3

[17:13] <timotimo> https://www.youtube.com/watch?v=4i9Kg8X4j1o (has another video where you can see it being made)

[17:26] *** MasterDuke left
[17:46] *** domidumont left
[18:10] *** MasterDuke joined
[18:26] *** jmerelo left
[18:26] *** Altai-man_ joined
[18:28] *** sena_kun left
[20:04] <Geth> Â¦ rakudo: b5bf1bf478 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[20:04] <Geth> Â¦ rakudo: Make IO::Part.parts use an nqp::hash internally

[20:05] <Geth> Â¦ rakudo: 

[20:05] <Geth> Â¦ rakudo: So we can more easily check whether it has been initialized yet, and

[20:05] <Geth> Â¦ rakudo: will make it easier to fast-clone an IO::Path object.

[20:05] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b5bf1bf478

[20:17] *** timotimo left
[20:17] *** timo joined
[20:18] *** timo is now known as Guest71053

[20:18] *** Guest71053 is now known as timotimo

[20:27] *** sena_kun joined
[20:29] *** Altai-man_ left
[20:40] *** squashable6 left
[20:42] *** squashable6 joined
[20:58] <Geth> Â¦ roast: 0990abcf14 | (Elizabeth Mattijsen)++ | S32-io/io-path.t

[20:58] <Geth> Â¦ roast: Remove superfluous .IO's

[20:58] <Geth> Â¦ roast: 

[20:58] <Geth> Â¦ roast: We already have an IO::Pathy object

[20:58] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/0990abcf14

[22:26] *** Altai-man_ joined
[22:28] *** sena_kun left
[22:43] *** donaldh_ left
[22:56] <Geth> Â¦ rakudo: 16d93e260a | (Elizabeth Mattijsen)++ | src/core.c/IO/Spec/Unix.pm6

[22:56] <Geth> Â¦ rakudo: Make sure IO::Spec.curupdir returns the same thing always

[22:56] <Geth> Â¦ rakudo: 

[22:56] <Geth> Â¦ rakudo: For some reason, IO::Spec.curupdir would return a different Block

[22:56] <Geth> Â¦ rakudo: each time it was called, probably related to some closure issue?

[22:56] <Geth> Â¦ rakudo: Create the Block in the mainline, and return that instead.

[22:56] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/16d93e260a

[22:57] <lizmat> sleep&

[23:07] *** Altai-man_ left
