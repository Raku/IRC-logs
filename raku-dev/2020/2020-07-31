[00:12] *** sena_kun joined
[00:14] *** Altai-man_ left
[02:12] *** Altai-man_ joined
[02:14] *** sena_kun left
[02:15] *** MasterDuke left
[04:13] *** sena_kun joined
[04:14] *** Altai-man_ left
[05:07] *** vrurg left
[05:08] *** vrurg joined
[05:15] *** Kaiepi left
[05:32] *** Kaiepi joined
[06:12] *** Altai-man_ joined
[06:14] *** sena_kun left
[06:44] *** patrickb joined
[06:54] *** domidumont joined
[07:27] <Geth> Â¦ problem-solving: antoniogamiz++ created pull request #216: Add first draft of URL specification, refs #93

[07:27] <Geth> Â¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/216

[07:27] *** leont joined
[08:02] *** ccamel joined
[08:03] *** camelCaser left
[08:13] *** sena_kun joined
[08:14] *** Altai-man_ left
[08:29] *** MasterDuke joined
[09:13] *** MasterDuke left
[10:12] *** Altai-man_ joined
[10:14] *** sena_kun left
[10:17] *** MasterDuke joined
[12:18] *** brrt joined
[12:37] <nine> With regards to the new ecosystem proposal: at its heart CPAN is just a mirror system - and one that works really well. What sucks about it is the prolonged registration process including manual review. That's just out of date, isn't it?

[12:38] <nine> Well is it? In Raku it's super easy to pick up where someone else left and publish a new version of a dist under a different auth. That also makes it super easy to hijack an ecosystem. Just publish a higher version of a common module under your auth and everyone will install it as we're too lazy to state what exact version we want.

[12:39] <nine> Right now the manual registration is really the only measure we have against this. The only reason this has not become a problem so far is our relative obscurity.

[12:42] <nine> If we want to stick with CPAN we could also completely side step PAUSE if we want. In the same move we could work around the :auth and :ver issue (as far as they even exist - CPAN stores files in author's directories and tar balls are versioned).

[12:42] <nine> We could simply provide our own upload service that puts all Raku module in a single CPAN user's directory. The file names we us don't have to be fit for human consumption (yes that's me suggesting SHAs again).

[12:44] <nine> I don't think anything prevents us from storing the eco system index on CPAN as well. CPAN does have a rule that files must not be changed once uploaded. But we can simply version this file (and delete older versions) so you'd just have to do 2 web request instead of 1 (first get the file list, then load the newest index file)

[12:47] <brrt> ... well, stupid question is, how do other folks do it?

[12:47] <brrt> I know go just has everybody publish under their 'own' url (most of which are probably github's, really)

[12:49] <lizmat> nine: I think the ecosystem hijackability is mostly caused by laziness of the ecosystem users

[12:49] <lizmat> old habits die hard

[12:49] <nine> Not even I do this correctly

[12:49] <lizmat> but really, you shouldn't say "use Discogs::API", but really "use Discogs::API:ver<0.0.1>:auth<cpan:ELIZABETH>"

[12:50] <lizmat> I know, and for development, that's fine

[12:50] <lizmat> but production code *should* really specify what they need

[12:50] <lizmat> this will also ensure that production code is not prone to module update induced failures

[12:51] <lizmat> which is what makes maintaining Perl installations such a pain

[12:52] <brrt> ok, so the first question that you're going to be asked is going to be, 'why isn't that in a version_lock YAML file?'

[12:52] <lizmat> perhaps we need a pragma that would enforce full specification of dependencies

[12:52] <lizmat> 'use fully-specified-dependencies-only'

[12:53] <lizmat> then test your application with -Mfully-specified-dependencies-only and see where it breaks

[12:53] <leont> Anyone enabling that pragma probably already declares full versions

[12:54] <lizmat> true, but it could be a test before putting into production: add -Mfully-specified-dependencies-only and see if it can run the tests

[12:54] <lizmat> if people don't have tests, well, then they're flying blind anyway

[12:55] <brrt> hmm, it's a good idea

[12:56] <brrt> user-centric thinking, I'd go so far as to say we should have a `raku --publish` option

[12:56] <brrt> and we'd start by doing just that check

[12:56] <leont> Yeah, a release test may be a good idea

[12:57] <leont> brrt: I'm always scared with more YAML dependencies, because that probably means my YAMLish module :-p

[12:57] <lizmat> what does this have to do with YAML ?

[12:58] <brrt> YAML 'version lock' files is how most other language tooling does it?

[12:58] <leont> lizmat: just a detail he mentioned

[12:58] <brrt> JSON is also possible

[12:58] <leont> JSON is terrible for human beings. YAML, much like Raku, puts all the pain at the implementor

[13:02] <nine> A simple text file with one dependency per line would be totally fine

[13:03] <nine> Anyway the format is beside the point. It's about declare exact dependencies in your code vs. some meta data (like... META6.json!)

[13:04] <nine> The reason why others use a meta data file is because they auto generate it

[13:05] <nine> The reason why I'm reluctant to put an :auth on my use statements is that this completely destroys the feature that my user can swap in a different implementation (e.g. because a maintainer went AWOL or someone needs an internal patch)

[13:07] <lizmat> nine: not true, if we implement supersede

[13:08] <lizmat> https://design.raku.org/S22.html#supersedes

[13:10] <lizmat> also: https://design.raku.org/S22.html#emulates

[13:13] *** sena_kun joined
[13:14] *** Altai-man_ left
[13:20] *** domidumont left
[14:15] <jdv79> in addition to what i said in my comment on the proposal - exactly what is motivating this?

[14:15] <jdv79> i don't see droves of people in #raku or elsewhere lamenting the existing stuff

[14:41] <ugexe> if we wait for droves of people to lament we wouldnt even be using cpan

[14:43] <[Coke]> I think it's reasonable to address these issues *before* we get a complaining userbase.

[14:47] <brrt> on the other hand, raku community has a ... history of pre-overengineering, mabye?

[14:47] <brrt> *maybe

[14:49] <ugexe> its just a difficult problem space given the raku spec. i think people think e.g."just make a simple file system mirror" yet how is that supposed to deal with all the filesystem stuff CUR does like case sensitivity or unicode?

[14:50] <ugexe> live by sha1 die by sha1

[14:50] *** brrt left
[14:51] *** brrt joined
[15:15] <[Tux]> Rakudo version 2020.07-48-g17f7f156a - MoarVM version 2020.07-12-g0a06f80c7

[15:15] <[Tux]> csv-test-xs-20      0.388 -  0.396

[15:15] <[Tux]> test-t --race       0.839 -  0.890

[15:15] <[Tux]> csv-ip5xs           0.859 -  0.890

[15:15] <[Tux]> test-t              1.882 -  2.025

[15:15] <[Tux]> test                7.836 -  8.495

[15:15] <[Tux]> test-t-20 --race    8.746 -  9.010

[15:15] <[Tux]> csv-ip5xs-20        7.930 -  8.931

[15:15] <[Tux]> csv-parser         23.874 - 27.901

[15:15] <[Tux]> test-t-20          32.621 - 34.027

[15:15] <[Coke]> ugexe: how goes?

[15:16] <[Coke]> I only ever talk to you when I have a bug, figured I'd just say hi. :)

[15:25] *** lichtkind joined
[15:25] <patrickb> how would I go about hunting a 'Cannot invoke this object (REPR: Null; VMNull)' during the rakudo build?

[15:25] <patrickb> the line before reads 'Compiling   gen/moar/stage1/QAST.moarvm'

[15:26] <patrickb> it's in nqp, not rakudo

[15:30] <MasterDuke> patrickb: run it in gdb and break on MVM_exception_throw_adhoc?

[15:30] <patrickb> will give it a try. That's a first for me...

[15:57] <patrickb> OK. It's interpreting src/vm/moar/stage0/nqp.moarvm and tries to do an `invoke_v`. Assumingly with null arguments.

[15:58] <patrickb> That seems like a dead end, because I didn't change stage0 at all.

[16:12] *** Altai-man_ joined
[16:14] *** sena_kun left
[16:45] <ugexe> [Coke]: trying to tie up $work loose ends before I have to use this expiring pto

[17:12] *** domidumont joined
[17:24] *** toddr left
[17:27] *** brrt left
[17:38] *** patrickb left
[17:43] *** domidumont left
[17:55] *** lucasb joined
[18:13] *** sena_kun joined
[18:14] *** Altai-man_ left
[18:23] <[Coke]> mmm, definitely take advantage of PTO.

[19:39] *** brrt joined
[19:45] *** toddr joined
[20:12] *** Altai-man_ joined
[20:14] *** sena_kun left
[20:39] *** brrt left
[21:22] *** lichtkind left
[22:12] *** sena_kun joined
[22:14] *** Altai-man_ left
[22:33] *** leont left
[22:38] *** Kaiepi left
[22:41] *** Kaiepi joined
[23:24] <Geth> Â¦ rakudo: 1b5f6b98f4 | (Vadim Belman)++ | src/core.c/Attribute.pm6

[23:24] <Geth> Â¦ rakudo: Don't use higher-level `declares_method` method

[23:24] <Geth> Â¦ rakudo: 

[23:24] <Geth> Â¦ rakudo: It makes Attribute incompatible with Metamodel and other NQP classes via

[23:24] <Geth> Â¦ rakudo: a mixin.

[23:24] <Geth> Â¦ rakudo: 

[23:24] <Geth> Â¦ rakudo: `can` is to be avoided too because KnowHOW doesn't have it.

[23:24] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1b5f6b98f4

[23:24] <Geth> Â¦ rakudo: 9e51d01b93 | (Vadim Belman)++ | src/core.c/Exception.pm6

[23:24] <Geth> Â¦ rakudo: Fix exception code for KnowHOW compatibility

[23:24] <Geth> Â¦ rakudo: 

[23:24] <Geth> Â¦ rakudo: In a rare case the exception can be thrown for a KnowHOW type object or

[23:24] <Geth> Â¦ rakudo: instance. The problem is that method `methods` of KnowHOW returns not a

[23:24] <Geth> Â¦ rakudo: list of code objects but the method table itself in a hash form.

[23:24] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9e51d01b93

[23:24] <Geth> Â¦ rakudo: d8f0507de6 | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[23:24] <Geth> Â¦ rakudo: Merge pull request #3834 from vrurg/roast_657_attr_fix

[23:24] <Geth> Â¦ rakudo: 

[23:24] <Geth> Â¦ rakudo: Partial fix of mixing in a role with attributes into a NQP class

[23:24] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d8f0507de6

