[00:41] *** sena_kun left
[00:57] <vrurg> greppable6: \$!dynamic_context

[00:57] <greppable6> vrurg, Found nothing!

[00:58] *** sena_kun joined
[01:45] <sjn> Hm. https://faq.raku.org has a cert error (invalid domain)

[02:42] *** sena_kun left
[02:55] *** sena_kun joined
[04:43] *** sena_kun left
[04:56] *** sena_kun joined
[06:25] <rba> sjn: After the server crash https://faq.perl6.org went down and it‘s not up again. So not migrated to raku domain. If one could point me which repo it‘s come from, or what we should do I will bring it back. Where is it linked?

[06:42] *** sena_kun left
[06:48] *** MasterDuke left
[06:49] *** domidumont joined
[06:54] *** domidumont left
[06:55] *** sena_kun joined
[07:34] *** domidumont joined
[08:08] *** MasterDuke joined
[08:32] <lizmat> Files=1301, Tests=109805, 210 wallclock secs (28.49 usr  8.15 sys + 2935.26 cusr 272.18 csys = 3244.08 CPU)

[08:41] <MasterDuke> lizmat: did you see my question from last night?

[08:42] * lizmat scrolled back and doesn't have an answer

[08:42] *** sena_kun left
[08:42] * lizmat appears to have developed a write-only comment mode

[08:44] <MasterDuke> heh, no worries

[08:46] <MasterDuke> then a more open-ended question. think an Int.chars that uses a new nqp::chars_I op that doesn't have to actually create the string just to count the digits would be useful?

[08:53] <lizmat> aaaah...now I remember

[08:54] <lizmat> yeah, that could be useful

[08:55] <lizmat> it'll come back to me why I thought that'd be useful  :-)

[08:56] <lizmat> probably after I put down by Rakudo Weekly hat which I've just put on

[08:58] *** Kaiepi left
[08:58] *** sena_kun joined
[09:51] <Geth> ¦ rakudo: 06ae7d614d | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[09:51] <Geth> ¦ rakudo: Make the Mu.perl fallback method a multi

[09:51] <Geth> ¦ rakudo: 

[09:51] <Geth> ¦ rakudo: As suggested by Vadim Belman.  This fixes

[09:51] <Geth> ¦ rakudo: 

[09:51] <Geth> ¦ rakudo:   https://github.com/rakudo/rakudo/issues/3433

[09:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/06ae7d614d

[09:51] <lizmat> sena_kun: ^^^

[09:51] <lizmat> afk for a few hours&

[09:53] *** Kaiepi joined
[09:55] <sena_kun> lizmat++

[10:19] *** |Tux| left
[10:23] *** |Tux| joined
[10:42] *** sena_kun left
[10:58] *** sena_kun joined
[11:14] <|Tux|> Rakudo version 2019.11-506-g06ae7d614 - MoarVM version 2020.01-17-gefb014f19

[11:14] <|Tux|> csv-test-xs-20      0.418 -  0.426

[11:14] <|Tux|> csv-ip5xs           0.724 -  0.742

[11:14] <|Tux|> test-t --race       0.789 -  0.795

[11:14] <|Tux|> test-t              1.781 -  1.798

[11:14] <|Tux|> csv-ip5xs-20        6.404 -  6.428

[11:14] <|Tux|> test                7.455 -  7.712

[11:14] <|Tux|> test-t-20 --race    8.677 -  8.799

[11:15] <|Tux|> csv-parser         22.743 - 23.032

[11:15] <|Tux|> test-t-20          29.829 - 29.946

[12:42] *** sena_kun left
[12:57] *** sena_kun joined
[13:30] *** lucasb joined
[14:41] *** sena_kun left
[14:56] *** sena_kun joined
[15:55] <Geth> ¦ nqp: cb3c3369df | (Elizabeth Mattijsen)++ | src/how/NQPAttribute.nqp

[15:55] <Geth> ¦ nqp: Add NQPAttribute.is_bound method

[15:55] <Geth> ¦ nqp: 

[15:55] <Geth> ¦ nqp: Just to be on the safe side, as HLL Attribute class has one as well.

[15:55] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cb3c3369df

[16:13] <lizmat> notable6: weekly

[16:13] <notable6> lizmat, No notes for “weekly”

[16:13] <lizmat> well, that's easy then

[16:19] *** Kaeipi joined
[16:23] *** Kaiepi left
[16:40] *** domidumont left
[16:41] *** sena_kun left
[16:45] *** Kaeipi left
[16:48] *** Kaiepi joined
[16:56] *** sena_kun joined
[17:05] <AlexDaniel> sena_kun: btw sometimes your commits are signed and sometimes they are not :)

[17:12] <sena_kun> AlexDaniel: is there anything wrong with that? :) I think it depends on the repo I commit from...

[17:12] <AlexDaniel> sena_kun: why not set it up system-wise?

[17:14] <AlexDaniel> I mean, just put it in your global git config or whatever is required to do so

[17:14] <sena_kun> AlexDaniel: by the way, as you're here, I have a question related to whateverable. I see both cro and HTTP::UserAgent are used. And Cro is used in a single place to do a simple query. Was it intentional? I think the footprint can be made much smaller removing one of these.

[17:14] <AlexDaniel> sena_kun: new code is using Cro, old code is not touched :D

[17:14] <sena_kun> AlexDaniel: so if we're migrating, we're migration to Cro?

[17:15] <AlexDaniel> yea

[17:15] <AlexDaniel> definitely

[17:15] <sena_kun> I see

[17:15] <sena_kun> ok, will see if I'll be able to get to it somehw

[17:18] <AlexDaniel> I'd appreciate that a lot, but it's probably not as easy as it sounds :)

[17:18] <AlexDaniel> there's also a dep on HTTP::Server::Async

[17:18] *** domidumont joined
[17:18] <AlexDaniel> pretty sure that code was written before Cro existed, or at least before it was awesome

[17:32] *** Kaiepi left
[17:33] *** Kaiepi joined
[18:41] * lizmat just noted that sena_kun is missing from CREDITS  :-)

[18:41] *** sena_kun left
[18:57] *** sena_kun joined
[19:04] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/01/20/2020-03-traittraced/

[19:39] *** domidumont left
[19:46] *** sena_kun left
[19:54] *** dumarchie joined
[20:01] <dumarchie> lizmat: you said you would like to see .List and .Array coercers implemented in the Iterator role

[20:01] <tellable6> 2020-01-19T20:50:18Z #raku-dev <MasterDuke> dumarchie: i don't have an informed opinion on whether it should be hidden (i'd lean towards no absent any other information), but if not, then yes it should be spectested and written up in the docs

[20:01] <tellable6> 2020-01-19T23:02:33Z #raku-dev <lizmat> dumarchie I'd rather see .List and .Array coercers implemented in the Iterator role

[20:03] <dumarchie> lizmat: to me it seems weird to coerce an Iterator to an Iterable

[20:04] <lizmat> yet, that is what List.from-iterator does ?

[20:05] <dumarchie> I don't see that as a coercer, more as a constructor.

[20:05] <dumarchie> (that's why I mistakenly called it List.new-from-iterator)

[20:06] <lizmat> in any case, you want to turn an iterator into a List, no ?

[20:07] <dumarchie> Not exactly. I want to create an Iterable (in this case a List) from an Iterator.

[20:10] <dumarchie> Coercion can make sense if there is some acceptable way to disable other code from using the Iterator afterwards. Seq does this by undefining the underlying iterator.

[20:13] <lizmat> ah, I see, you would not want a reified List, but one that would still need to be reified

[20:14] <lizmat> and having the iterator external, runs the risk of being used again

[20:14] <lizmat> well, that's the general issue with using iterators directly, I'd say

[20:15] <dumarchie> You're right. Maybe List.from-iterator should be hidden after all.

[20:15] <lizmat> yeah, in general, iterators are things that run under the hood, so to speak

[20:16] <dumarchie> Does ALLCAPS count as hiding?

[20:16] <lizmat> it effectively does, yes

[20:16] <lizmat> so maybe we should just ALLCAP it

[20:18] <lizmat> this would then also apply to List.from-slurpy / from-slurpy-onearg / from-slurpy-flat

[20:19] <lizmat> and Array.from-iterator / from-list and reification-target in Array and List

[20:20] <dumarchie> Probably... I just searched a fairly recent checkout of the roast and from-iterator does not appear.

[20:23] <dumarchie> I'm still wondering if there's no decent way to "claim" an object for another object...

[20:24] <lizmat> not sure what you mean?

[20:27] <dumarchie> Well, if you could somehow tell the Iterator that it should only accept calls from a certain Iterable everything would be fine, wouldn't it?

[20:27] <lizmat> ah, yes...  no, unless you want to set up a system like vowed promises

[20:28] <dumarchie> Too much overhead, I suppose :)

[20:29] <lizmat> yeah  :-(

[20:31] <dumarchie> On the other hand there's a story about rope and a gun. So we could make List.from-iterator public with a stern warning.

[20:33] <lizmat> as I just said... it's one of a set in List

[20:33] <lizmat> why do that one, and not other ones?

[20:33] <lizmat> and I still think it *is* an implementation detail

[20:33] <lizmat> it would be different if we would disguise them as coercers

[20:34] <lizmat> currently coercing an iterator to a List is meaningless: it creates a List with the iterators as its only element

[20:36] <dumarchie> The coercers could work, but the argument would have to be in Iterable in my opinion. Every Iterable should have an iterator.

[20:37] <lizmat> m: class A does Iterable { }

[20:37] <camelia> rakudo-moar 06ae7d614: ( no output )

[20:37] <lizmat> m: class A does Iterable { }; A.new

[20:37] <camelia> rakudo-moar 06ae7d614: ( no output )

[20:37] <lizmat> hmmm...  that should complain, I guess

[20:37] <lizmat> my role Iterable {

[20:37] <lizmat>     method iterator() { ... }

[20:38] <dumarchie> m: Any.iterator

[20:38] <camelia> rakudo-moar 06ae7d614: ( no output )

[20:38] <lizmat> Ah, I guess that's why...

[20:40] <dumarchie> multi method iterator(Any:)

[20:43] <lizmat> yeah

[20:43] <dumarchie> There's already Mix/Bag/Set(Hash) coercers in Iterable. These use private ALLCAP subs. It doesn't get more hidden than that.

[20:45] <dumarchie> I can try to add a List coercer to Iterable that replaces List.from-iterator.

[20:45] <lizmat> a coercer should live in the Iterator role

[20:46] <lizmat> and that means it will have its method copied to all iterators out there

[20:46] <lizmat> so I'm a bit reluctant to do that without approval of jnthn

[20:48] <dumarchie> To me Seq.List still makes more sense than Seq.iterator.List

[20:50] <dumarchie> because (1) it hides the iterator and (2) will be easier to document without delving into the details

[20:50] <lizmat> m: dd (1,2,3,4,5).Seq.List   # that already works ?

[20:50] <camelia> rakudo-moar 06ae7d614: OUTPUT: «(1, 2, 3, 4, 5)␤»

[20:50] <lizmat> m: dd (1,2,3,4,5).Seq.Array   # that already works ?

[20:50] <camelia> rakudo-moar 06ae7d614: OUTPUT: «Array element = [1, 2, 3, 4, 5]␤»

[20:52] <dumarchie> (Any) method List

[20:53] <dumarchie> Same for Array, without mentioning the list method.

[20:55] <dumarchie> The list method uses List.from-iterator(self.iterator)

[20:55] <dumarchie> in case of Seq invocant

[20:57] <dumarchie> or more precise, in case of PositionalBindFailover invocant

[20:57] *** patrickb joined
[21:27] <dumarchie> I checked the code base and in most cases from-iterator could be replaced by from-iterable, but List.STORE and sub SEQUENCE in operators are notable exceptions, 

[21:34] <dumarchie> So maybe converting from-iterator & co. to ALLCAPS is the best approach after all.

[21:59] <patrickb> The Google Summer of Code deadline is in two and a half weeks. May I ask everyone to think about whether you are willing to mentor *now*. When people start thinking about whether they'd like to mentor three days before the deadline, this will not work out.

[21:59] <tellable6> 2020-01-17T08:21:08Z #raku-dev <nine> patrickb: you have never answered my question: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-12-10#l39

[21:59] <tellable6> 2020-01-17T16:39:39Z #raku-dev <tony-o> patrickb i have most of the infrastructure for an ecosystem fleshed out, i need some help testing it - i'm writing on a blog post on the current state rn

[21:59] <patrickb> Also we not only need mentors, but also project ideas. Experience from last year shows that students do not come up with their own ideas, but only apply for ideas we proposed. So it's good to have a concrete project idea you are willing to mentor for.

[21:59] <patrickb> jnthn: Last year, you showed willingness to mentor. Would you be willing again this year? Can you come up with a project idea?

[21:59] <patrickb> brrt: Would you be willing to mentor again? Might a follow up project of last years GSoC be a good project idea?

[21:59] <tellable6> patrickb, I'll pass your message to brrt

[21:59] <patrickb> samcv, jmerelo: You mentored last year. Are you willing to do it again? Do you have a project idea?

[21:59] <patrickb> timotimo: You pondered mentoring last year. Maybe this year?

[21:59] <patrickb> vrurg, nine, AlexDaniel, sena_kun, lizmat: All of you are very active committers. Can you come up with a project idea that could be suitable for a student? Would you be willing to also mentor such a project?

[22:01] <patrickb> https://perl-foundation-outreach.github.io/gsoc-2020-ideas/

[22:02] <Geth> ¦ rakudo: 91a324a066 | (Elizabeth Mattijsen)++ | src/core.c/StrDistance.pm6

[22:02] <Geth> ¦ rakudo: Make StrDistance.new about 30% faster

[22:02] <Geth> ¦ rakudo: 

[22:02] <Geth> ¦ rakudo: And save 2 Scalar allocations per StrDistance object

[22:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/91a324a066

[22:02] <Geth> ¦ rakudo: fc8bfc2e82 | (Elizabeth Mattijsen)++ | src/core.c/Hyper.pm6

[22:02] <Geth> ¦ rakudo: Save one Scalar allocation for each Hyper object

[22:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fc8bfc2e82

[22:03] <lizmat> patrickb I will think about it

[22:07] *** dumarchie left
[22:10] <samcv> patrickb, well. i have no ideas. but if somebody else has an idea i could maybe do one

[22:12] <samcv> hmm...

[22:13] <samcv> do we have any cassandra bindings or kafka?

[22:14] <patrickb> pretty sure cassandra not, kafka I do not know.

[22:15] <samcv> what could be fun is improving the speed of marshalling from raku to perl 5. but idk how much that can be improved or not since i haven't looked into it

[22:15] <samcv> i'm just throwing out ideas based on technology frameworks i use at work with perl 5 that may/may not have raku verisons since i am running out of ideas

[22:20] <MasterDuke> i think the idea i proposed last year is still valid, but unfortunately i also still won't be able to mentor

[22:33] <samcv> MasterDuke, what was it again?

[22:34] <MasterDuke> add performance benchmarks/regression tests to our ci toolchain

[22:36] <MasterDuke> i wrote a 2-3 sentence description in some repo jmerelo created, but it wasn't adopted as one of the ideas the perl foundation proposed

[23:18] *** lucasb left
[23:40] <MasterDuke> samcv: https://github.com/perl-foundation-outreach/ideas/blob/master/perl6/build-toolchain-improvements.md

