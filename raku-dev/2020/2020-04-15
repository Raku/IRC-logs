[00:02] <AlexDaniel> oh!

[00:04] *** lichtkind left
[01:00] <rba> https://help.github.com/en/github/getting-started-with-github/faq-about-changes-to-githubs-plans

[01:34] <Geth_> ¬¶ rakudo: softmoth++ created pull request #3628: Add :$chomp to Str.lines()

[01:34] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3628

[01:36] *** softmoth joined
[01:38] <softmoth> ^- I'm not sure if this is wanted by anyone other than me. I think it makes the language more consistent, and avoids devs having to re-invent the wheel with .comb() every time this comes up

[01:39] <softmoth> ...and I assume I'd need to add something to roast, I'm just not sure where exactly.

[05:18] *** softmoth left
[05:19] *** softmoth joined
[05:22] *** toddr left
[05:50] *** softmoth left
[05:50] *** softmoth joined
[06:01] *** reportable6 left
[06:04] *** reportable6 joined
[07:07] *** softmoth left
[07:51] <nine> What do attributes without twigils (like `has $foo`) even mean? They don't seem to be documented and I can't find a single use of this in any of our tests.

[07:51] <nine> m: class Foo { has $foo; method set_foo($v) { $!foo = $v; }; method get_foo() { $!foo }; }; my $a = Foo.new; my $b = Foo.new; $a.set_foo(1); say $b.get_foo; say Foo.^attributes

[07:51] <camelia> rakudo-moar 43c7e96f9: OUTPUT: ¬´(Any)‚ê§(Mu $!foo)‚ê§¬ª

[08:42] *** sena_kun joined
[09:05] <lizmat> Files=1306, Tests=111232, 215 wallclock secs (28.80 usr  8.00 sys + 3022.80 cusr 277.40 csys = 3337.00 CPU)

[10:02] <nine> The speculations say that has $a; will create a $!a attribute and install $a as a lexical alias to that attribute. But it doesn't say what other effects this would have and I really can't think of any. I also have no idea why that would make anything faster.

[10:03] <nine> An attribute lookup is already one of the fastest things you can do (at least on MoarVM). In speshed and JITed code it's devirtualized and can access the memory location of the attribute directly.

[10:04] *** Altai-man_ joined
[10:04] <Altai-man_> nine, `has $foo` is really weird if you ask me, but I do know such an occurrence in examples repo.

[10:05] <nine> I wouldn't be surprised if support for that syntax was just an implementation accident, coming from sharing code between variable and attribute declarations

[10:05] <lizmat> I think it's a source of obfuscation: if installing it as a lexical is so beneficial, the codegen should do that, regardless of the twigil

[10:06] <lizmat> I would be in favour of deprecating it for 6.e

[10:06] *** sena_kun left
[10:10] <Altai-man_> https://github.com/Raku/examples/blob/master/categories/games/connect4.p6#L83-L89

[10:10] <Altai-man_> ^

[10:22] <lizmat> fixed

[10:22] <AlexDaniel> Altai-man_: oh, I was about to commit a `sleep 20;` change :)

[10:23] <Altai-man_> AlexDaniel, I started with `loop sleep die` pattern, but then was like, ugghhgh, but it's raku.... ;)

[10:24] <AlexDaniel> Altai-man_: interval(1) is too small though, but yeah

[10:24] <AlexDaniel> Altai-man_++

[10:24] <Altai-man_> AlexDaniel, what do you mean by "too small"?

[10:25] <Altai-man_> you mean, it should be bigger? I don't think so.

[10:25] <AlexDaniel> Altai-man_: in my measurements it takes 20s, so we're wasting 20 requests

[10:25] <Altai-man_> It's arguable, but I'd rather fire another request than wait for more. Woah, 20 seconds... For me it's usually about 5-6 seconds to remove a gist. :S

[10:26] <Altai-man_> well, if that works that works, I guess

[10:35] <AlexDaniel> Altai-man_: the limit is about 5000 requests per hour, which is fine I guess, but then if we start testing the module on a bunch of revisions then it could be a problem

[10:35] <AlexDaniel> still shouldn't be a problem, but 4 requests instead of 20 is probably a good idea, especially if it makes no difference anyway :)

[10:36] <Altai-man_> Yes, and if we get much more users doing testing a lot... But in this case this simple test file would need a Real Revision.

[10:36] <Altai-man_> AlexDaniel, you can commit s/1/3/ if you want. :)

[10:36] <AlexDaniel> already did :) https://github.com/raku-community-modules/perl6-Pastebin-Gist/commit/c5734fa81c90dffa1cf41f005aff6c9a6d6f05a1 https://github.com/raku-community-modules/perl6-Pastebin-Gist/commit/5f6d1fc667c5a293243c78a5e977d4540fb3ebc8

[10:36] <AlexDaniel> hmm why am I not using my own bot‚Ä¶ c5734fa81c90dffa1cf41f005aff6c9a6d6f05a1 5f6d1fc667c5a293243c78a5e977d4540fb3ebc8

[10:36] <linkable6> (2020-04-15) https://github.com/raku-community-modules/perl6-Pastebin-Gist/commit/c5734fa81c Bump the sleep interval a bit

[10:36] <AlexDaniel> aaand?

[10:36] <AlexDaniel> 5f6d1fc667c5a293243c78a5e977d4540fb3ebc8

[10:36] <linkable6> (2020-04-15) https://github.com/raku-community-modules/perl6-Pastebin-Gist/commit/5f6d1fc667 Make sure tests finish in about a minute

[10:37] <AlexDaniel> I should really figure out why it doesn't print the last one‚Ä¶

[10:41] *** MasterDuke left
[10:41] <AlexDaniel> nine: IIRC it is intentional, but yes I also don't see why we must support that

[10:41] <AlexDaniel> greppable6: has\s+\$[^.]

[10:41] <greppable6> AlexDaniel, 967 lines, 276 modules: https://gist.github.com/2627511a3e7ff6677a72daf00835fa4c

[10:41] <AlexDaniel> greppable6: has\s+\$[^.!]

[10:42] <greppable6> AlexDaniel, 38 lines, 24 modules: https://gist.github.com/0845a42a8ea3c6b9425f846aab6f48b7

[10:42] <AlexDaniel> nine: I think it's relatively popular simply because people forget ! or .

[10:46] <nine> What the? So after another round of big refactors to Inline::Perl5 everythin including our production application works just fine and the code is yet more powerful and simpler.

[10:47] <nine> Everything? No, a single test in a single test file fails when I run make test. It's a check if a destructor got called.

[10:47] <nine> It also fails when I run it with `raku -Ilib t/v6.t`, BUT it succeeds when run with `raku -I. t/v6.t`

[10:49] <nine> I hate destructor issues :/ They're cronically hard to test but also mandatory because memory leaks are real

[10:55] <jnthn> I read that as "comically hard to test" and was confused for a moment...

[10:56] <nine> Depends on hour humor I guess :)

[10:58] <nine> s/hour/your/

[10:59] <nine> Apparently I shouldn't try typing today...

[11:13] <nine> It's amazing. raku -I. t/v6.t reliably runs the destructors on the first try. raku -Ilib t/v6.t reliably fails to run destructors even when I put the whole test file into a loop doing 10K iterations

[12:04] *** sena_kun joined
[12:06] *** Altai-man_ left
[12:11] <Geth_> ¬¶ rakudo: 7bbf12d3e8 | (Elizabeth Mattijsen)++ | src/core.c/Parameter.pm6

[12:11] <Geth_> ¬¶ rakudo: nqp::eqat beats nqp::iseq_s(nqp::substr)

[12:11] <Geth_> ¬¶ rakudo: 

[12:11] <Geth_> ¬¶ rakudo: For two reasons:

[12:11] <Geth_> ¬¶ rakudo: - no need to take a substr

[12:11] <Geth_> ¬¶ rakudo: - no need to specify the number of characters in the needle

[12:11] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/7bbf12d3e8

[12:14] <lizmat> nine: wouldn't that be accessing different versions of libraries ?

[12:14] <[Coke]> lizmat++ nice find.

[12:14] <[Coke]> lizmat: did you have a tool that helped find that, or just reading source?

[12:15] <lizmat> there's two more cases in the core, but they're part of a PR that we're discussing atm, and I don't want to bork its mergebility

[12:15] <lizmat> that's where I saw it and did a search on the rest of the core

[12:16] <lizmat> well, if they happened to be on the same line

[12:18] <nine> lizmat: no, it's from the same directory. So the difference is really just CompUnit::Repository::FileSystem trusting META6.json in the -I. case vs. indexing modules on the file system in the -Ilib case. I guess what happens is that a different number of objects get allocated/GCed

[12:18] <lizmat> or somehow we create a circular "reference" ?

[12:18] <lizmat> in the -Ilib case ?

[12:19] <lizmat> [Coke] the search was basically 'ack nqp::iseq_s src/core.c | ack substr'

[12:20] <[Coke]> lizmat++

[12:20] <nine> Those aren't a problem for the GC :) What would be a problem is persistent references from a cache or something. But I don't have the slightest idea for a path through the module loader that would lead to the test's objects getting referenced

[12:21] <lizmat> we're taking a nqp::sha1 for each file in the -Ilib case, no?

[12:21] <lizmat> perhaps it's inside the nqp::sha1 ?

[12:21] <jnthn> nine: If you can do a heap snapshot and find the non-destroy'd object still in the heap, there's a path command to tell you the path to it

[12:21] <nine> jnthn: doing exactly that right now :)

[12:24] *** pmurias joined
[12:33] <nine> All look like Root 0  --[ Thread Roots ]--> Thread Roots (8) --[ Native callback cache target ]--> BOOTCode (Object) (159935) --[ Unknown ]--> initialize (Perl5.pm6 (Inline::Perl5):1139) (Frame) (159864) --[ self ]--> Inline::Perl5 (Object) (155820) --[ Unknown ]--> Scalar (Object) (155821) --[ Unknown ]--> Inline::Language::ObjectKeeper (Object) (155873) --[ Unknown ]--> Array (Object) (155876) --[ 

[12:33] <nine> Unknown ]--> IterationBuffer (Object) (51) --[ Index 25 ]--> Scalar (Object) (653166) --[ Unknown ]--> Foo::Bar::TestV6 (Object) (656478)

[12:41] <timotimo> the ObjectKeeper is keeping it around, eh? :)

[12:51] <timotimo> i wonder why exactly it calls the connection from the ObjectKeeper "unknown", i think it's supposed to give attribute names and such

[12:52] <jnthn> Yeah, I thought so too

[13:22] <nine> This thing gets stranger all the time. I actually have a fix. Now I don't know why it did work correctly in some cases.

[13:24] <nine> The thing is that when extending a Perl 5 package with Raku via use v6-inline; I create an accompanying Raku class to hold the extensions. I create wrappers for all the Perl 5 methods, so they can be called on that Raku class. One of these methods was DESTROY, which overwrote the destructor that would free up the wrapped Perl 5 object

[13:33] <jnthn> oops :)

[13:33] <jnthn> Obvious in hindsight

[13:34] <nine> Yep, it's obvious why that's wrong. What's not obvious is why it's only an issue with -Ilib, not -I.

[13:35] <nine> Btw. I only discovered this discrepancy because I was becoming desparate. I added a couple fprintfs to p5helper.c but their output wouldn't show up. That's why I tried -I.

[13:35] <nine> Turned out I added a #define fprintf(...) yesterday night to turn of the debug info...

[13:59] *** softmoth joined
[14:04] *** Altai-man_ joined
[14:06] *** sena_kun left
[14:17] <nine> OMG I finally found it. And....it's kinda embarassing, really. I forgot to add Inline::Perl5::Perl5Class to META6.json. This is the module I `require` as a workaround for the precomp issue I described last week. So raku -I. didn't find it locally, but some older installed version

[14:18] *** finsternis left
[14:19] <nine> Ok, to be precise, I'm pretty sure that I actually added it to META6.json, because I remember noticing that it's the only .rakumod file in the list, with the others still using .pm6 extensions. Must have accidentally removed it when resolving rebase merge issues

[14:36] <[Tux]> Rakudo version 2020.02.1-315-g7bbf12d3e - MoarVM version 2020.02.1-80-g32dfe7507

[14:36] <[Tux]> csv-test-xs-20      0.400 -  0.404

[14:36] <[Tux]> csv-ip5xs           0.731 -  0.755

[14:36] <[Tux]> test-t --race       1.026 -  1.042

[14:36] <[Tux]> test-t              1.985 -  2.028

[14:36] <[Tux]> csv-ip5xs-20        6.434 -  6.708

[14:36] <[Tux]> test                7.742 -  7.928

[14:36] <[Tux]> test-t-20 --race   10.886 - 11.341

[14:36] <[Tux]> csv-parser         24.557 - 27.006

[14:37] <[Tux]> test-t-20          31.558 - 34.054

[15:13] *** toddr joined
[15:13] *** toddr left
[15:15] *** toddr joined
[15:36] <[Coke]> nine++

[15:47] *** Kaiepi left
[15:47] *** Kaiepi joined
[15:51] <timotimo> whew.

[16:05] *** sena_kun joined
[16:06] *** Altai-man_ left
[16:22] *** MasterDuke joined
[16:34] *** vrurg left
[16:35] *** vrurg joined
[16:39] *** vrurg_ joined
[16:41] *** vrurg left
[16:52] <MasterDuke> huh, forgot that profiling things that use proc::async just leads to lots of ThreadPoolScheduler stuff sitting at the top

[16:54] <timotimo> yeah, it usually spends the entirety of the program's time waiting for tasks to arrive

[16:54] <timotimo> and there's the supervisor that sleeps and does calculations many times a second

[16:58] <MasterDuke> anyone have an objection to merging https://github.com/MoarVM/MoarVM/pull/1270 ? i've now profiled a bunch of random stuff and haven't run into any problems

[16:58] <MasterDuke> or do people want to take a closer look at the list?

[17:00] <MasterDuke> timotimo: can i assume that the time for all the other stuff is correct if what i actually care about is the code i wrote? i.e., i can just ignore all the ThreadPoolScheduler stuff?

[17:00] <timotimo> yeah, that's a fine suggestion

[17:01] *** vrurg joined
[17:01] *** vrurg_ left
[17:01] <timotimo> i wonder if i should put something in that measures how often an allocation was accepted vs ignored for every op before the prof_allocated

[17:10] <MasterDuke> profiling https://gist.github.com/MasterDuke17/7aafabb580b66e38aabadbf04494525e shows 38m BOOTCodes allocated

[17:34] *** patrickb joined
[17:34] *** vrurg left
[17:35] *** vrurg joined
[18:03] *** Altai-man_ joined
[18:06] *** sena_kun left
[18:08] *** squashable6 left
[18:08] *** squashable6 joined
[18:59] *** squashable6 left
[19:01] *** squashable6 joined
[19:35] <Geth_> ¬¶ rakudo/master: 4 commits pushed by (Ben Davies)++, (Elizabeth Mattijsen)++

[19:35] <Geth_> ¬¶ rakudo/master: dc7a796234 | Add an iterator multi candidate to Supply

[19:35] <Geth_> ¬¶ rakudo/master: e78483ed51 | Add a push-all method to Supply's iterator

[19:35] <Geth_> ¬¶ rakudo/master: b9b46c0aa7 | Use nqp::until over nqp::while(nqp::not_i(...))

[19:35] <Geth_> ¬¶ rakudo/master: c13faeefa8 | Merge pull request #3625 from Kaiepi/supply-iterators

[19:35] <Geth_> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/7bbf12d3e8e8...c13faeefa864

[19:45] *** softmoth left
[19:45] *** softmoth joined
[19:56] <Geth_> ¬¶ nqp: 0fbca34681 | Coke++ | 2 files

[19:56] <Geth_> ¬¶ nqp: Remove sayfh opcode

[19:56] <Geth_> ¬¶ nqp: 

[19:56] <Geth_> ¬¶ nqp: Resolves #614

[19:56] <Geth_> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/0fbca34681

[19:56] <Geth_> ¬¶ nqp: c1ffc0ecfc | (Will Coleda)++ (committed using GitHub Web editor) | 2 files

[19:56] <linkable6> NQP#614 [closed]: https://github.com/Raku/nqp/issues/614 [JVM] Remove sayfh opcode

[19:56] <Geth_> ¬¶ nqp: Merge pull request #615 from Raku/jvm-sayfh-rm

[19:56] <Geth_> ¬¶ nqp: 

[19:56] <Geth_> ¬¶ nqp: Remove sayfh opcode

[19:56] <Geth_> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/c1ffc0ecfc

[20:05] *** sena_kun joined
[20:06] *** Altai-man_ left
[20:07] *** softmoth left
[20:08] *** softmoth joined
[20:09] <[Coke]> \o/

[20:09] <[Coke]> nice to get a commit that involves actual code.

[20:10] <lizmat> [Coke]++

[20:11] *** pmurias left
[20:12] <Kaiepi> so i wrote a small script for benchmarking that takes iterations over 5 minutes and calculates how many iterations are done per second. this probably still isn't entirely accurate, but is better than doing a million iterations and hoping for the best i guess

[20:13] <Kaiepi> with that, the Capture.WHICH commits make things closer to around 10% faster, which makes more sense since i doubt the way it was building strings was *that* big a bottleneck

[20:13] <Kaiepi> so i was probably just overreacting

[20:23] <[Coke]> benchmarks++

[20:27] <Geth_> ¬¶ nqp: 1342e203e0 | (Daniel Green)++ | src/vm/moar/HLL/Backend.nqp

[20:27] <Geth_> ¬¶ nqp: Fix profile kind detection

[20:27] <Geth_> ¬¶ nqp: 

[20:27] <Geth_> ¬¶ nqp: Before it was only checking if the strings '.html' or '.json' existed at

[20:27] <Geth_> ¬¶ nqp: all in the given filename, not that they were at the end (like it correctly

[20:27] <Geth_> ¬¶ nqp: did for '.sql').

[20:27] <Geth_> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/1342e203e0

[20:30] <[Coke]> Is there an easy way to grep through the ecosystem of use of an nqp opcode?

[20:30] <[Coke]> (spurtasync is the one I'm looking at right now)

[20:32] <MasterDuke> [Coke]: greppable6

[20:32] <MasterDuke> greppable6: spurtasync

[20:33] *** Kaiepi left
[20:33] <greppable6> MasterDuke, Found nothing!

[20:35] <[Coke]> MasterDuke++

[20:36] <[Coke]> greppable6: printfh

[20:36] <greppable6> [Coke], Found nothing!

[20:36] <lizmat> nqp: nqp::spurtasync()

[20:36] <camelia> nqp-moarvm: OUTPUT: ¬´No registered operation handler for 'spurtasync'‚ê§   at gen/moar/stage2/QAST.nqp:1504  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_op)‚ê§ from gen/moar/stage2/QAST.nqp:6145  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_n‚Ä¶¬ª

[20:36] <lizmat> [Coke]: say what?  :-)

[20:36] *** Kaiepi joined
[20:36] <[Coke]> greppable6: readlinechompfh

[20:36] <greppable6> [Coke], Found nothing!

[20:37] <[Coke]> lizmat: it's jvm specific

[20:37] <jnthn> That op was implemented on the jvm during the early experimentations with concurrency

[20:37] <lizmat> aaahhh ok

[20:37] <[Coke]> nqp-j: nqp::spurtasync()

[20:37] <[Coke]> jnthn: I think there's probably a dozen ops I can cut out.

[20:37] <[Coke]> Easier than documenting them, anyway.

[20:37] <jnthn> Yeah, indeed

[20:38] <jnthn> readlinechompfh is a leftover also, from when we had the VM doing string-y IO

[20:38] <[Coke]> greppable6: setinputlinesep

[20:38] <greppable6> [Coke], Found nothing!

[20:38] <jnthn> Nowadays we just have the VM do byte I/O and provide a decoder API and plumb 'em in NQP/Rakudo

[20:38] <[Coke]> greppable6: setencoding

[20:38] <jnthn> That's another one from the now-gone string I/O collection

[20:39] <greppable6> [Coke], Found nothing!

[20:39] <jnthn> And that :)

[20:39] <[Coke]> if something appears in stage1's definition, but still isn't actually used, we can still remove it, just have to regen the stages, right?

[20:39] <jnthn> Yes

[20:40] <[Coke]> greppable6: linesasync

[20:40] <greppable6> [Coke], Found nothing!

[20:40] <[Coke]> (sorry about the noise)

[20:41] <[Coke]> greppable6: readlinefh

[20:41] <greppable6> [Coke], Found nothing!

[20:41] <[Coke]> greppable6: readlinechompfh

[20:41] <greppable6> [Coke], Found nothing!

[20:42] <[Coke]> greppable6: readallfh

[20:42] <greppable6> [Coke], Found nothing!

[20:43] <jnthn> Ditto for those :)

[20:43] <jnthn> I wonder what lineasync did and if I really thought that was a good idea... :)

[20:43] <[Coke]> greppable6: spurtasync

[20:43] <greppable6> [Coke], Found nothing!

[20:43] <[Coke]> crap, I think I looped back. :)

[20:44] <[Coke]> greppable6: syncpipe

[20:44] <greppable6> [Coke], Found nothing!

[20:44] <[Coke]> greppable6: nfatostatelist

[20:44] <greppable6> [Coke], Found nothing!

[20:45] <MasterDuke> [Coke] is doing his own work async 

[20:46] <[Coke]> there's a jvm spawn opcode, - there's a lot of matches to "spawn", but it doesn't look like that opcode is actually used...

[20:47] <[Coke]> greppable6: slurpasync

[20:47] <greppable6> [Coke], Found nothing!

[20:47] <[Coke]> greppable6: readcharsfh

[20:47] <greppable6> [Coke], Found nothing!

[20:47] <[Coke]> greppable6: setup_blv

[20:47] <greppable6> [Coke], Found nothing!

[20:48] <[Coke]> greppable6: closefh_i

[20:48] <greppable6> [Coke], Found nothing!

[20:48] <[Coke]> greppable6: closefhi

[20:48] <greppable6> [Coke], Found nothing!

[20:49] <[Coke]> greppable6: continuationclone

[20:49] <greppable6> [Coke], Found nothing!

[20:50] <[Coke]> greppable6: attrhintfor

[20:50] <greppable6> [Coke], Found nothing!

[20:51] *** rypervenche left
[20:51] <[Coke]> there's a shell which similarly has a lot of stuff named like it, but it doesn't look like we're using nqp::shell for jvm.

[20:54] <Geth_> ¬¶ nqp: coke self-assigned Remove unused jvm opcodes https://github.com/Raku/nqp/issues/616

[20:56] *** Ven`` joined
[20:57] *** Kaiepi left
[20:57] *** Kaiepi joined
[21:07] <AlexDaniel> greppable6: nqp::

[21:08] <greppable6> AlexDaniel, 744 lines, 90 modules: https://gist.github.com/fc82cf283b8b39269f142e05b8184929

[21:08] <AlexDaniel> 90 modules oh my

[21:08] <jnthn> greppable6: QAST::

[21:09] <greppable6> jnthn, 37 lines, 10 modules: https://gist.github.com/e2ae1bd446a68955ef32113b0ebfe9f1

[21:09] <jnthn> Phew, not so bad

[21:10] <jnthn> Though the nqp:: ones are not at risk of being all broken in one swoop, and those using QAST will be.

[21:10] <[Coke]> greppable6: openasync

[21:11] <greppable6> [Coke], Found nothing!

[21:11] <[Coke]> finding more that *have* documentation but are unused. (like openasync)

[21:11] <[Coke]> (clustered together in the source)

[21:13] *** Altai-man_ joined
[21:15] *** sena_kun left
[21:16] <[Coke]> nfafromstatelist - this is defined and used for all 3 backends. jvm had a nfa*to*statelist that was unused. 

[21:20] *** patrickb left
[21:25] <MasterDuke> timotimo: ah ha! nine++'s patch https://gist.github.com/niner/8ebb8c6a1052a319d50f9212759d85c4 gets a --profile-compile of compiling CORE.c to in fact try to write out the profile (after 28 min to compile), but it  is reaped by the oom killer

[21:25] <timotimo> oh jeez

[21:26] <MasterDuke> oO(guess i do need that 64gb after all)

[22:20] *** Altai-man_ left
[22:33] *** Kaeipi joined
[22:33] *** Kaiepi left
[22:48] <Geth_> ¬¶ nqp: 3cc09bdf83 | MasterDuke17++ (committed using GitHub Web editor) | docs/ops.markdown

[22:48] <Geth_> ¬¶ nqp: Perl 6 -> Raku

[22:48] <Geth_> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/3cc09bdf83

[22:54] <Geth_> ¬¶ nqp: a5332ac14e | MasterDuke17++ (committed using GitHub Web editor) | docs/ops.markdown

[22:54] <Geth_> ¬¶ nqp: smrt_(int|num|str)ify -> (int|num|str)ify

[22:54] <Geth_> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/a5332ac14e

[23:09] *** softmoth left
[23:10] *** softmoth joined
[23:13] *** softmoth left
[23:13] *** softmoth joined
[23:19] *** softmoth left
[23:20] *** softmoth joined
[23:38] *** Ven`` left
[23:46] *** MasterDuke left
