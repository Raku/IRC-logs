[00:15] <MasterDuke> huh. why would changing https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/MROBasedMethodDispatch.nqp#L11-L12 and https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/MROBasedMethodDispatch.nqp#L11-L12 to `if nqp::atkey(<foo>, <bar>) -> $baz { ... }` cause this error:

[00:16] <MasterDuke> `Bytecode validation error at offset 66, instruction 10:tried to take arg number 6 after checkarity with 5   at gen/moar/Metamodel.nqp:606  (blib/Perl6/Metamodel.moarvm:setup_finalization) from gen/moar/Metamodel.nqp:3907  (blib/Perl6/Metamodel.moarvm:compose)`

[00:43] *** lucasb left
[00:51] *** Altai-man_ joined
[00:52] *** vrurg left
[00:53] *** sena_kun left
[00:58] *** vrurg joined
[01:48] *** MasterDuke left
[02:22] *** Xliff joined
[02:23] <Xliff> m: $f = -> $a { $a == 1 ?? 1 !! $a * $*ROUTINE($a - 1) }; $f(6).say

[02:23] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$f' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5$f = -> $a { $a == 1 ?? 1 !! $a * $*ROUT␤»

[02:23] <Xliff> m: my $f = -> $a { $a == 1 ?? 1 !! $a * $*ROUTINE($a - 1) }; $f(6).say

[02:23] <camelia> rakudo-moar 8c995febd: OUTPUT: «Dynamic variable $*ROUTINE not found␤  in block <unit> at <tmp> line 1␤␤»

[02:23] <Xliff> m: my $f = -> $a { $a == 1 ?? 1 !! $a * $?ROUTINE($a - 1) }; $f(6).say

[02:23] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$?ROUTINE' is not declared. Did you mean 'Routine'?␤at <tmp>:1␤------> 3my $f = -> $a { $a == 1 ?? 1 !! $a * 7⏏5$?ROUTINE($a - 1) }; $f(6).say␤»

[02:23] <Xliff> m: my $f = -> $a { $a == 1 ?? 1 !! $a * &*ROUTINE($a - 1) }; $f(6).say

[02:23] <camelia> rakudo-moar 8c995febd: OUTPUT: «Dynamic variable &*ROUTINE not found␤  in block <unit> at <tmp> line 1␤␤»

[02:23] <Xliff> m: my $f = -> $a { $a == 1 ?? 1 !! $a * &?ROUTINE($a - 1) }; $f(6).say

[02:23] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    ?ROUTINE used at line 1. Did you mean 'Routine'?␤␤»

[02:24] <Xliff> m: my $f = -> $a { $a == 1 ?? 1 !! $a * &?BLOCK($a - 1) }; $f(6).say

[02:24] <camelia> rakudo-moar 8c995febd: OUTPUT: «720␤»

[02:44] *** Xliff left
[02:52] *** sena_kun joined
[02:54] *** Altai-man_ left
[03:04] *** leont left
[03:25] *** ZzZombo_ joined
[03:27] *** ZzZombo left
[03:27] *** ZzZombo_ is now known as ZzZombo

[04:05] *** squashable6 left
[04:09] *** squashable6 joined
[04:51] *** Altai-man_ joined
[04:53] *** sena_kun left
[06:52] *** sena_kun joined
[06:54] *** Altai-man_ left
[07:26] <lizmat> Files=1305, Tests=111213, 219 wallclock secs (28.53 usr  8.64 sys + 2963.46 cusr 288.76 csys = 3289.39 CPU)

[07:26] <lizmat> that's 10 seconds more than yesterday  :-(

[07:27] <lizmat> and 50 CPU seconds more than the last time

[08:41] <lizmat> just reran the test without the type caching patch on a warm machine:

[08:41] <lizmat> Files=1305, Tests=111213, 214 wallclock secs (28.44 usr  8.34 sys + 2969.00 cusr 281.17 csys = 3286.95 CPU)

[08:41] <lizmat> so that tells me it is that patch

[08:43] <Geth> ¦ rakudo: bbc4fff80d | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/MROBasedTypeChecking.nqp

[08:43] <Geth> ¦ rakudo: Revert "Force publish type cache if found in the MRO"

[08:43] <Geth> ¦ rakudo: 

[08:43] <Geth> ¦ rakudo: This reverts commit bde8d37980aac6207fe6ea9981212b01705c1e66.

[08:43] <Geth> ¦ rakudo: 

[08:43] <Geth> ¦ rakudo: This causes a 5% slowdown on running the spectest, which is a lot,

[08:43] <Geth> ¦ rakudo: so reverting for now.

[08:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bbc4fff80d

[08:44] <nine> Well it was worth a try

[08:46] <lizmat> well, since MasterDuke had doubts about the patch anyways... 

[08:51] *** Altai-man_ joined
[08:54] *** sena_kun left
[09:31] *** ufobat joined
[10:13] <Geth> ¦ rakudo: 79ca396ee6 | (Elizabeth Mattijsen)++ | src/core.c/Failure.pm6

[10:13] <Geth> ¦ rakudo: Reduce number of PseudoStash lookups in Failure.new

[10:13] <Geth> ¦ rakudo: 

[10:13] <Geth> ¦ rakudo: - use nqp ops

[10:13] <Geth> ¦ rakudo: - cannot use nqp::ifnull(nqp::atkey...)) trick as nqp::atkey on a

[10:13] <Geth> ¦ rakudo:   PseudoStash dies if the key does not exist.  Not sure why this is

[10:13] <Geth> ¦ rakudo:   this way, but it feels like this is an unnnecessary different

[10:13] <Geth> ¦ rakudo:   behaviour from general nqp::atkey behaviour.

[10:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/79ca396ee6

[10:36] <Geth> ¦ rakudo: 199888abed | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[10:36] <Geth> ¦ rakudo: Some CompUnit::PrecompilationRepository streamlining

[10:36] <Geth> ¦ rakudo: 

[10:36] <Geth> ¦ rakudo: - use binding where possible

[10:36] <Geth> ¦ rakudo: - some code esthetics

[10:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/199888abed

[10:40] <lizmat> I wonder if it would make sense to codegen something like *.defined as a call to &defined ?

[10:42] <jnthn> I don't think so, that confuses "their language" and "our language"

[10:42] <jnthn> And I think in most cases .defined would be inlined into the *.defined thunk anyway

[10:42] <jnthn> So I'm not seeing a great win

[10:42] <lizmat> m: my $a = 42; (*.defined)($a) for ^1_000_000

[10:42] <camelia> rakudo-moar 8c995febd: ( no output )

[10:43] <lizmat> m: my $a = 42; (*.defined)($a) for ^1_000_000; say now - INIT now

[10:43] <camelia> rakudo-moar 8c995febd: OUTPUT: «0.389419␤»

[10:43] <lizmat> m: my $a = 42; $a.defined.sink for ^1_000_000; say now - INIT now

[10:43] <camelia> rakudo-moar 8c995febd: OUTPUT: «0.04234609␤»

[10:43] <lizmat> that's almost 10x faster ?

[10:44] <jnthn> Then we should look at why 

[10:44] <lizmat> ok

[10:44] <lizmat> will do

[10:44] <jnthn> I'm curious what *.defined code-gens into...

[10:45] <lizmat> looks like the whatever code block takes 50% of time in a profile

[10:46] <lizmat> the actual .defined call is 0 seconds in a profile

[10:46] <lizmat> 0ms even

[10:48] <lizmat> https://gist.github.com/lizmat/65ea879b5117830d377bdd967a60f48f

[10:51] <lizmat> seems to be some binding to a lowered lex of the parameter, and then passing that to the call ?

[10:51] <lizmat> also the sink seems suspect ?

[10:52] *** sena_kun joined
[10:53] <lizmat> also: the $a.defined version has *no* garbage collections, whereas the *.defined one has 92

[10:53] <lizmat> mostly caused by BOOTCode and WhateverCode allocations

[10:53] *** Altai-man_ left
[11:01] <jnthn> Umm, it's maybe allocating the closure every single look...even though the thing doesn't actually close over anything

[11:01] <jnthn> That's an interesting general optimization :)

[11:01] * lizmat is unsure how to prevent such allocation

[11:02] * lizmat doesn't see any cloning going on in the codegen, right ?

[11:04] <jnthn> perl6 --target=optimize -e '*.defined for ^100'

[11:04] <jnthn> And this is a wtf

[11:04] <jnthn> It clones and capturelex's it *twice*!

[11:05] <jnthn> oh, not if we actually call it :)

[11:06] <jnthn> But yeah, I see the clone per iteration

[11:18] *** travis-ci joined
[11:18] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Reduce number of PseudoStash lookups in Failure.new

[11:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/660555592 https://github.com/rakudo/rakudo/compare/bbc4fff80d01...79ca396ee6a2

[11:18] *** travis-ci left
[11:18] * lizmat restarts the one failing job

[11:29] <lizmat> jnthn: should I make a ticket for the WhateverCode cloning ?

[11:29] <Geth> ¦ rakudo: 95e8906c74 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[11:29] <Geth> ¦ rakudo: Remove superfluous return statement

[11:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/95e8906c74

[11:46] <jnthn> lizmat: Could do, so we don't forget there's an opportunity here

[11:50] <lizmat> https://github.com/rakudo/rakudo/issues/3540

[12:30] *** leont joined
[12:33] <Geth> ¦ rakudo: 5271d122b8 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[12:33] <Geth> ¦ rakudo: De-hllize loaded hash in CompUnit::PrecompilationRepository

[12:33] <Geth> ¦ rakudo: 

[12:33] <Geth> ¦ rakudo: Reduce overhead of HLL access that will never be optimized away.

[12:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5271d122b8

[12:44] <lizmat> nine: for the lifetime of a CompUnit::PrecompilationRepository object, can $*W or $*REPO change ?

[12:44] *** lucasb joined
[12:51] *** Altai-man_ joined
[12:54] *** sena_kun left
[12:55] <lizmat> I guess $*REPO can change... but $*W ? 

[13:03] <Geth> ¦ rakudo: f48b80c32e | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[13:03] <Geth> ¦ rakudo: Make sure debugging message cannot blow up

[13:03] <Geth> ¦ rakudo: 

[13:03] <Geth> ¦ rakudo: By applying the same safeguard as a little down in the code

[13:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f48b80c32e

[13:15] <vrurg> lizmat: Optimizer defines own $*W.

[13:15] <lizmat> aah,.. ok

[13:16] <lizmat> but how would that affect CU::Precompilationrepository ?

[13:16] <lizmat> *could

[13:17] <vrurg> lizmat: It shouldn't, but I'm not well known in CU code.

[13:17] * lizmat is trying to grok it atm  :-)

[13:31] <Geth> ¦ rakudo: 954e545c0f | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[13:31] <Geth> ¦ rakudo: Only lookup %*ENV<RAKUDO_RERESOLVE_DEPENDENCIES> once

[13:31] <Geth> ¦ rakudo: 

[13:31] <Geth> ¦ rakudo: for the lifetime of a CompUnit::PrecompilationRepository object.

[13:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/954e545c0f

[13:41] <Tux__> Rakudo version 2020.02.1-126-gf48b80c32 - MoarVM version 2020.02.1-40-ga2782ad27

[13:41] <Tux__> csv-test-xs-20      0.363 -  0.367

[13:41] <Tux__> csv-ip5xs           0.711 -  0.738

[13:41] <Tux__> test-t --race       0.964 -  0.965

[13:41] <Tux__> test-t              2.011 -  2.028

[13:41] <Tux__> csv-ip5xs-20        6.231 -  6.245

[13:41] <Tux__> test                8.413 -  8.534

[13:41] <Tux__> test-t-20 --race    9.653 - 10.242

[13:41] <Tux__> csv-parser         25.269 - 26.371

[13:41] <Tux__> test-t-20          32.341 - 33.195

[13:41] <Tux__> Two days in a row over 2s

[13:42] <lizmat> :-(

[13:46] <jnthn> Sounds like a perf regression somewhere...

[13:47] <lizmat> somehow I suspect 3583254015e0faddbc006

[13:47] <linkable6> (2020-03-08) https://github.com/rakudo/rakudo/commit/3583254015 Optimize symbol lookup at compunit creation time

[13:48] <lizmat> I don't see a lot else between 6 and 8 March

[13:48] <lizmat> *9 March

[13:49] <lizmat> Tux__  could you retry with 75da4cfec5694ea841873 and 3583254015e0faddbc00 reverted ?

[13:49] <linkable6> (2020-03-09) https://github.com/rakudo/rakudo/commit/75da4cfec5 Remove $!unit_ready

[14:07] <Tux__> Rakudo version 2020.02.1-128-g0d8c78354 - MoarVM version 2020.02.1-40-ga2782ad27

[14:07] <Tux__> csv-test-xs-20      0.365 -  0.367

[14:07] <Tux__> csv-ip5xs           0.706 -  0.709

[14:07] <Tux__> test-t --race       0.900 -  0.987

[14:07] <Tux__> test-t              1.938 -  2.025

[14:07] <Tux__> csv-ip5xs-20        6.348 -  6.396

[14:08] <Tux__> test                8.102 -  8.190

[14:08] <Tux__> test-t-20 --race   10.256 - 10.460

[14:08] <Tux__> csv-parser         26.754 - 27.295

[14:08] <Tux__> test-t-20          32.853 - 33.315

[14:09] <lizmat> hmmm... that's not back on the values of 6 March

[14:11] <Tux__> and the machine is not where I am working on right now, so it is not eating resources for $work

[14:13] <lizmat> Tux__ : could you try with 40d41a30045da01e8ae4de reverted ?

[14:13] <linkable6> (2020-03-08) https://github.com/rakudo/rakudo/commit/40d41a3004 Fix JVM build

[14:16] <Geth> ¦ rakudo: ef2d7d84d3 | (Elizabeth Mattijsen)++ | t/02-rakudo/reproducible-builds.t

[14:16] <Geth> ¦ rakudo: Use a real fake compilation ID for testing

[14:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ef2d7d84d3

[14:26] <Tux__> still slow. /me tries a hard reset to 2020.02.1

[14:37] <Tux__> Rakudo version 2020.02.1 - MoarVM version 2020.02.1-40-ga2782ad27

[14:37] <Tux__> csv-test-xs-20      0.367 -  0.377

[14:37] <Tux__> csv-ip5xs           0.721 -  0.722

[14:37] <Tux__> test-t --race       0.829 -  0.883

[14:37] <Tux__> test-t              1.842 -  1.859

[14:37] <Tux__> csv-ip5xs-20        5.810 -  5.916

[14:37] <Tux__> test                7.764 -  7.924

[14:37] <Tux__> test-t-20 --race    9.756 -  9.910

[14:37] <Tux__> csv-parser         23.501 - 23.978

[14:37] <Tux__> test-t-20          30.528 - 30.943

[14:37] <Tux__> what wonders me is that they all show the same version number. Should I force-reset something?

[14:38] <lizmat> that just shows it was something in rakudo that spoilt performance, not Moar ?

[14:38] <Tux__> ah

[14:39] <Tux__> as 21-02-2020 was in the 1.7's I'll try that too, jsut to prove it works as I hope it does (not meking severe errors that put you on the wrong tracks)

[14:40] <Tux__> running for tag 2020.02

[14:51] <Tux__> test-t              1.862 -  1.869

[14:52] <Tux__> lizmat, my procedure was to git reset rakudo top-level to a point back in time. 

[14:52] <Tux__> $ perl Configure.pl --prefix=/pro/3gl/CPAN/rakudo/install --backends=moar ; make -j8 ; make install

[14:52] *** sena_kun joined
[14:52] <Tux__> $ cd ..../CSV6 ; perl time-twice.pl

[14:52] <lizmat> yeah, that should  work

[14:52] <Tux__> rinse and repeat

[14:54] *** Altai-man_ left
[14:58] *** domidumont joined
[15:04] *** leont left
[15:11] <Geth> ¦ rakudo: 778ce3794b | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationUnit.pm6

[15:11] <Geth> ¦ rakudo: Remove CompUnit::PrecompilationId caching

[15:11] <Geth> ¦ rakudo: 

[15:11] <Geth> ¦ rakudo: - simplify check for valid ID (must be 40 hex chars)

[15:11] <Geth> ¦ rakudo: - remove lock and cache

[15:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/778ce3794b

[15:21] <Tux__> lizmat, /me is now running https://tux.nl/Files/test-rakudo.pl

[15:22] <Tux__> I'll take a while before I will be able to post the result

[15:22] <lizmat> Tux__++

[15:22] <Tux__> maybe you can run the last part on a box that has all commits prebuilts available?

[15:23] <lizmat> AlexDaniel` sena_kun ^^  ?

[15:24] <AlexDaniel`> I mean, you can just pull any build you want

[15:24] <AlexDaniel`> shareable6: HEAD^^^^^

[15:24] <shareable6> AlexDaniel`, https://whateverable.6lang.org/HEAD^^^^^

[15:25] <Tux__> look at the start: https://tux.nl/Files/rakudo.txt - maybe I just caught a bad moment for those 2+'s

[15:25] <AlexDaniel`> I haven't tried yet, but I think latest builds are even relocatable

[15:25] <AlexDaniel`> otherwise follow these instructions: https://github.com/Raku/whateverable/wiki/Shareable

[15:31] <Geth> ¦ rakudo: 1a0cc94775 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationUnit.pm6

[15:31] <Geth> ¦ rakudo: Make CompUnit::PrecompilationId a proper Value Type

[15:31] <Geth> ¦ rakudo: 

[15:31] <Geth> ¦ rakudo: Now that CompUnit::PrecompilationIds are no longer cached, it must

[15:31] <Geth> ¦ rakudo: be a proper value type to make things like .unique and QuantHashes

[15:31] <Geth> ¦ rakudo: work correctly.

[15:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1a0cc94775

[15:33] <AlexDaniel`> ideally we should just run that benchmark on every single commit

[15:33] <AlexDaniel`> on some machine that is more or less stable

[15:33] <Tux__> So far:

[15:33] <Tux__> 187141af9100b0164704f3d2891511efd5b54c40        1.822 -  1.882

[15:33] <Tux__> caad8beeecd22e45b6855286716b76f873f0bb81        1.876 -  1.917

[15:33] <Tux__> bf9026884338576a7ddc5e510a80f41c0c751ad3        1.851 -  1.936

[15:33] <Tux__> 271d0b4bea3fd32e707ea0ecb84bbe0703d16732        1.850 -  1.870

[15:33] <Tux__> 858a0e3237e0f3055a5210776cbd670b7bb2bc93        1.824 -  1.837

[15:33] <linkable6> (2020-02-23) https://github.com/rakudo/rakudo/commit/187141af91 [release] Bump NQP revision to 2020.02

[15:33] <linkable6> (2020-02-23) https://github.com/rakudo/rakudo/commit/caad8beeec Update release date

[15:33] <Tux__> 4064023cc1d318f2efeb5f20b13542e711ca0d89        1.839 -  1.860

[15:33] <linkable6> (2020-02-21) https://github.com/rakudo/rakudo/commit/bf90268843 Update changelog + announcement

[15:33] <linkable6> (2020-02-22) https://github.com/rakudo/rakudo/commit/271d0b4bea Bump NQP to get native num fixes

[15:33] <linkable6> (2020-02-22) https://github.com/rakudo/rakudo/commit/858a0e3237 Merge pull request #3506 from dumarchie/master

[15:33] <linkable6> (2020-02-22) https://github.com/rakudo/rakudo/commit/4064023cc1 Revert workaround for issue with num

[15:33] <Tux__> 65ef7db198c412a20ebce5e0bea942ebe40fa742        1.866 -  1.871

[15:33] <linkable6> (2020-02-22) https://github.com/rakudo/rakudo/commit/65ef7db198 Temporary fix for R#3459

[15:34] <Tux__> Hmmm, looks like I started in February. Drat

[15:46] <lizmat> nqp::join("\n",nqp::split("\r\n", $blob.decode))   # trying to grok the reasoning for doing this

[15:47] <lizmat> shouldn't Blob.decode by itself not already do the right thing?

[15:47] <lizmat> jnthn ^^ ?

[16:15] <Geth> ¦ rakudo: 11b186c85e | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationUnit.pm6

[16:15] <Geth> ¦ rakudo: Streamline CompUnit::PrecompilationUnit.is-up-to-date a bit

[16:15] <Geth> ¦ rakudo: 

[16:15] <Geth> ¦ rakudo: - use binding where possible

[16:15] <Geth> ¦ rakudo: - remove unnecessary temporary variables

[16:15] <Geth> ¦ rakudo: - some code esthetics

[16:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/11b186c85e

[16:51] *** Altai-man_ joined
[16:54] *** sena_kun left
[16:57] *** entonian left
[16:57] *** entonian joined
[16:59] *** entonian left
[17:13] <Geth> ¦ rakudo: dec40dc46f | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationUnit.pm6

[17:13] <Geth> ¦ rakudo: Streamline CU::PrecompilationDependency::File.deserialize

[17:13] <Geth> ¦ rakudo: 

[17:13] <Geth> ¦ rakudo: - specify attributes more strictly

[17:13] <Geth> ¦ rakudo: - use .new for new object, including serialized-spec

[17:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dec40dc46f

[17:22] *** Kaiepi left
[17:36] <[Tux]> useful so far? https://gist.github.com/Tux/6f1aa9cfbb1d94d488c6822d0ac08aae

[17:42] *** domidumont left
[17:52] *** Ven`` joined
[17:57] <Geth> ¦ rakudo: d38d76d50a | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/DependencySpecification.pm6

[17:57] <Geth> ¦ rakudo: Give CompUnit::DependencySpecification a smarter .raku

[17:57] <Geth> ¦ rakudo: 

[17:57] <Geth> ¦ rakudo: - check if the attribute is default, then not generate it

[17:57] <Geth> ¦ rakudo: - gives the EVAL in CompUnit::PrecompilationDependency::File less

[17:57] <Geth> ¦ rakudo:   to parse in the most common case.

[17:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d38d76d50a

[18:04] <lizmat> [Tux]: bde8d37980aac6207fe6ea9981212b01705c1e66 is already reverted

[18:04] <lizmat> the other jump is 4e64c5946be763efff853d41b1e935b08b2d69a8   which is the next-dispatcher work by vrurg  :-(

[18:04] <linkable6> (2020-03-01) https://github.com/rakudo/rakudo/commit/4e64c5946b Make dispatchers use nextdispatcherfor/takenextdispatcher

[18:05] <lizmat> [Tux]: *very* useful  :-)

[18:09] <vrurg> lizmat: there is one PR for moar unmerged yet which might improve things: https://github.com/MoarVM/MoarVM/pull/1255

[18:09] <lizmat> vrurg: that's spectest and test clean ?

[18:09] <vrurg> But then again: it was monkey job of cloning what's been done for takedispatcher.

[18:10] <vrurg> I was running with it locally for a while. 

[18:10] <vrurg> Yes, it did spectest.

[18:10] <vrurg> Let me make sure nothing changed since.

[18:16] <vrurg> lizmat: Yet, there is one location where I didn't get into. It's MoarVM/src/jit/graph.c. Somebody with better JIT understanding should take a look at it and add 'nextdispatcher's into it.

[18:17] <Geth> ¦ nqp: d34a1bc117 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[18:17] <Geth> ¦ nqp: Bump MoarVM for the latest and greatest

[18:17] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d34a1bc117

[18:17] *** MasterDuke joined
[18:26] <Geth> ¦ rakudo: a4680db173 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[18:26] <Geth> ¦ rakudo: Bump NQP to get the latest MoarVM goodies

[18:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a4680db173

[18:33] <lizmat> vrurg: looks like the MoarVM merge borked MoarVM builds: https://travis-ci.org/MoarVM/MoarVM/jobs/660744864

[18:34] *** travis-ci joined
[18:34] <travis-ci> NQP build passed. Elizabeth Mattijsen 'Bump MoarVM for the latest and greatest'

[18:34] <travis-ci> https://travis-ci.org/perl6/nqp/builds/660747203 https://github.com/perl6/nqp/compare/9e1125435a07...d34a1bc1175f

[18:34] *** travis-ci left
[18:34] <vrurg> lizmat: I see. But it's confusing because the reason is not MoarVM not building but clang missing or something alike.

[18:35] <lizmat> yeah, I wonder if it wasn't borked before already

[18:35] <vrurg> lizmat: I would rather bet on this.

[18:36] <vrurg> BTW, adding takenextdispatcher to graph.c breaks jitting. I suspect the new ops aren't jitted for now at all.

[18:36] <lizmat> so the merge I just did will not make a performance difference

[18:37] <lizmat> :-(

[18:42] <vrurg> lizmat: Can promise nothing, but jitting and inlining are different things. 

[18:43] <vrurg> To my understanding, nextdispatchers were breaking inlining, the PR should fix it.

[18:45] <vrurg> But that's mostly my guess. Anyway, it's should take ~15mins to get things sorted out for somebody knowing this part from inside out.

[18:45] <MasterDuke> jnthn: is there a way to call `publish_type_cache` in `new_type` https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/ClassHOW.nqp#L46-L64 ? i've tried `self.publish_type_cache($obj)`, `self.publish_type_cache($new_type)`, `$metaclass.publish_type_cache($obj)`, and `$metaclass.publish_type_cache($new_type)`, but they all won't build

[18:46] <jnthn> Um....it should be called in compose?

[18:46] <Geth> ¦ rakudo: f31bd5ba41 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationUnit.pm6

[18:46] <Geth> ¦ rakudo: CU::PrecompilationDependency::File.serialize use private attrs

[18:46] <Geth> ¦ rakudo: 

[18:46] <Geth> ¦ rakudo: I don't think CompUnit::PrecompilationDependency::File will be

[18:46] <Geth> ¦ rakudo: subclassed any time soon, and if it were, it would probably need

[18:46] <Geth> ¦ rakudo: its own "serialize" method.

[18:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f31bd5ba41

[18:48] <MasterDuke> jnthn: something is going wrong. https://github.com/rakudo/rakudo/pull/3533 (which had to be reverted because it slowed down a spectest)

[18:48] <MasterDuke> afk for a bit

[18:50] <jnthn> Yeah, that PR is calling it in a completely arbitrary place

[18:50] <jnthn> I'd check if the type in question is getting composed or not

[18:51] <jnthn> I'm guessing it's maybe not, which could have other impacts too

[18:52] *** ufobat_ joined
[18:52] *** sena_kun joined
[18:53] *** Altai-man_ left
[18:56] *** ufobat left
[19:36] <Geth> ¦ rakudo: 014d493abb | (Elizabeth Mattijsen)++ | src/core.c/Process.pm6

[19:36] <Geth> ¦ rakudo: Only test for World once, not twice

[19:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/014d493abb

[19:41] <[Tux]> gist updated with more measurements

[19:45] *** [Coke] joined
[19:45] *** [Coke] left
[19:45] *** [Coke] joined
[19:46] <lizmat> [Tux]++

[20:07] *** domidumont joined
[20:09] *** domidumont left
[20:24] *** Ven`` left
[20:47] *** MasterDuke left
[20:51] *** Altai-man_ joined
[20:52] *** MasterDuke joined
[20:53] <MasterDuke> jnthn: https://gist.github.com/MasterDuke17/eec3ba98efa17b8259c5327040d19f36 has a patch i've applied and the output when running that example

[20:54] *** sena_kun left
[21:13] *** sena_kun joined
[21:15] *** Altai-man_ left
[21:15] *** Kaiepi joined
[21:17] *** Kaiepi left
[21:17] *** Kaiepi joined
[21:54] <MasterDuke> reverting https://github.com/rakudo/rakudo/commit/053013e970d1d6d8fe7ec703f568f29fa994c45b only has one spectest fail in t/spec/S06-advanced/dispatching.t, in a test added just a couple days ago https://github.com/perl6/roast/commit/17f7e150d9f2b6aeeae08f63fcd33deaec7dcdc5

[21:55] <MasterDuke> that `:local` here https://github.com/perl6/roast/blame/master/S06-advanced/dispatching.t#L65 doesn't do/mean anything

[21:58] <MasterDuke> jnthn, vrurg: ^^^ the `*%adverbs` in `find_method` doesn't seem to be needed anymore, any objection to changing the test and removing it?

[22:01] <jnthn> I'm not aware of anything paying attention to the :local in find_method. As for the adverbs: what if somebody overrides it in a custom meta-class and passes extra arguments, then does callsame? Guess we'd break anything doing that.

[22:01] <jnthn> And since spesh is good at throwing away these unused slurpy hashes anyway, it's not such a win to remove them

[22:02] <MasterDuke> k

[22:02] <MasterDuke> btw, did that gist from earlier provide any useful info?

[22:04] <jnthn> Ah, it's array[int] itself that it's looking for...hmm

[22:04] <jnthn> Not sure what that means without looking closer

[22:04] <jnthn> Which I've no energy left to do today

[22:04] <jnthn> But yeah, that looks odd

[22:05] <MasterDuke> ok, hopefully inspiration will strike in your sleep

[22:09] <MasterDuke> hm, could it be something about also doing `publish_(type|method)_cache` before mixing something in to something else?

[22:17] * [Coke] tells jnthn to go get some rest!

[22:32] <Geth> ¦ rakudo: e1af740752 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[22:32] <Geth> ¦ rakudo: Streamline CU::RepositoryRegistry.resolve-unknown-repos

[22:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e1af740752

[22:32] * lizmat does sleep&

[22:38] *** Kaeipi joined
[22:38] *** Kaeipi left
[22:38] *** Kaiepi left
[23:09] *** vrurg left
[23:09] *** vrurg joined
[23:13] *** Altai-man_ joined
[23:15] *** sena_kun left
