[00:00] *** finsternis joined
[00:09] *** patrickb left
[00:13] *** dogbert17 left
[00:43] *** dogbert17 joined
[01:14] *** Altai-man joined
[01:17] *** sena_kun left
[01:38] *** dogbert17 left
[01:38] *** dogbert17 joined
[01:56] *** dogbert11 joined
[01:57] *** dogbert17 left
[02:14] *** dogbert17 joined
[02:19] *** dogbert11 left
[02:46] *** Altai-man left
[02:47] *** sena_kun joined
[02:52] *** lucasb left
[03:07] *** chansen_ left
[03:34] *** chansen_ joined
[05:14] *** Altai-man joined
[05:17] *** sena_kun left
[07:05] *** dogbert11 joined
[07:08] *** dogbert17 left
[08:43] <Geth> ¦ rakudo: patrickbkr++ created pull request #3848: Simplify binary release instructions a little

[08:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3848

[08:53] *** MasterDuke joined
[09:15] *** sena_kun joined
[09:16] *** Altai-man left
[09:40] <lizmat> Files=1334, Tests=113514, 225 wallclock secs (28.87 usr  8.78 sys + 3133.89 cusr 300.27 csys = 3471.81 CPU)

[09:56] <lizmat> bisectable6: class Foo { has $!a = 42; method a { $!a }; method BUILD() { } }; dd Foo.new.a

[09:56] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[09:56] <bisectable6> lizmat, ¦6c (45 commits): «42␤»

[09:56] <bisectable6> lizmat, Nothing to bisect!

[12:41] <lizmat> bisectable6: bisectable6: sub foo(:$bar, :$baz) { say “bar is $bar, $baz” }; foo:42bar:43baz

[12:41] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[12:42] <bisectable6> lizmat, ¦6c (45 commits): «bar is 42, 43␤»

[12:42] <bisectable6> lizmat, Nothing to bisect!

[13:14] *** Altai-man joined
[13:16] *** sena_kun left
[13:46] *** lucasb joined
[17:15] *** sena_kun joined
[17:16] *** Altai-man left
[17:26] *** dogbert17 joined
[17:29] *** dogbert11 left
[17:34] *** gfldex left
[17:34] *** gfldex joined
[17:48] *** dogbert11 joined
[17:51] *** dogbert17 left
[21:15] *** Altai-man joined
[21:17] *** sena_kun left
[22:09] <Geth> ¦ rakudo: AlexDaniel self-assigned antipairs sub is not implemented https://github.com/rakudo/rakudo/issues/3782

[22:16] *** Voldenet left
[22:17] *** Voldenet joined
[22:17] *** Voldenet left
[22:17] *** Voldenet joined
[22:41] <Geth> ¦ rakudo/sorting-with-junctions: d9c982b9a2 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Sorting.pm6

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: Make error when sorting with junctions more awesome

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: 

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: You cannot sort a list that contains Junction values.  The reason for

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: this, is really that we do not have a sensible way of collapsing a

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: Junction into an Order value.

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: 

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: Instead of dying with an internals error about not being able to

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: coerce a Junction to an int, it now dies with a X::Cannot::Junction

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: exception.

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: 

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: Spotted by AlexDaniel++

[22:41] <Geth> ¦ rakudo/sorting-with-junctions: review: https://github.com/rakudo/rakudo/commit/d9c982b9a2

[22:42] <Geth> ¦ rakudo: lizmat++ created pull request #3849: Make error when sorting with junctions more awesome

[22:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3849

[22:42] *** dogbert17 joined
[22:46] *** dogbert11 left
[23:09] *** Voldenet left
[23:18] *** Voldenet joined
[23:18] *** Voldenet left
[23:18] *** Voldenet joined
[23:32] *** leont left
