[00:00] *** Xliff left
[00:13] *** oddp left
[00:14] *** sena_kun joined
[00:17] *** Altai-man left
[02:14] *** Altai-man joined
[02:16] *** sena_kun left
[02:29] *** chansen_ left
[02:35] *** chansen_ joined
[03:48] *** lucasb left
[04:14] *** sena_kun joined
[04:16] *** Altai-man left
[06:14] *** Altai-man joined
[06:16] *** sena_kun left
[07:08] *** JJMerelo joined
[07:08] <JJMerelo> m: subset RealT of ::T where ::T.WHAT == ::T

[07:08] <camelia> rakudo-moar 798614cb7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such symbol 'T'␤at <tmp>:1␤------> 3subset RealT of ::T where ::T7⏏5.WHAT == ::T␤»

[07:08] <tellable6> 2020-08-08T05:43:09Z #raku <ab5tract> JJMerelo yeah that's the one! the Hilbert matrix does cute things to floats when it encounters it's inverse.

[07:40] *** leont joined
[07:58] *** oddp joined
[08:14] *** sena_kun joined
[08:16] *** Altai-man left
[09:06] *** JJMerelo left
[09:36] *** JJMerelo joined
[09:36] <JJMerelo> m: say v.0.0.1 < v0.0.1

[09:36] <camelia> rakudo-moar 798614cb7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3say v.7⏏050.0.1 < v0.0.1␤»

[09:42] <JJMerelo> m: say Version.new("v.0.0.1") cmp Version.new("0.0.1")

[09:42] <camelia> rakudo-moar 798614cb7: OUTPUT: «Less␤»

[09:43] <JJMerelo> OK, I see the problem now https://github.com/softmoth/perl6-pod-to-markdown/issues/22

[10:14] *** Altai-man joined
[10:16] *** sena_kun left
[10:53] *** JJMerelo left
[11:19] *** Kaiepi left
[11:19] *** Kaiepi joined
[12:14] *** sena_kun joined
[12:16] *** Altai-man left
[12:57] *** domidumont joined
[13:14] *** oddp left
[13:43] <dogbert17> am I the only one getting a failure in t/spec/S14-traits/package.t

[13:46] <dogbert17> Type check failed in binding to parameter '<anon>'; expected Description but got Perl6::Metamodel::ClassHOW+{Description[Str]} (Perl6::Metamodel::Cl...)

[14:11] <AlexDaniel> > Junctions are, despite their internal complexity and rarity in programming languages are something that are so well thought out and integrated into common Raku coding styles that most use them without any thought.

[14:11] <AlexDaniel> oh no :)

[14:13] <timotimo> danger, danger!

[14:14] *** Altai-man joined
[14:17] *** sena_kun left
[14:21] <AlexDaniel> the blog posts about RFCs are really good, even if you take unintentional irony away :)

[14:26] <AlexDaniel> m: sub foo($x where { 2 < $_ } where { $_ < 4 }) { say $x }; foo(3)

[14:26] <camelia> rakudo-moar 798614cb7: OUTPUT: «3␤»

[14:26] <AlexDaniel> heh!

[14:27] <AlexDaniel> or without blocks:

[14:27] <AlexDaniel> m: sub foo($x where 2 < * where * < 4) { say $x }; foo(3)

[14:27] <camelia> rakudo-moar 798614cb7: OUTPUT: «3␤»

[14:41] <rypervenche> Or without the extra where :)

[14:41] <rypervenche> m: sub foo($x where 2 < * < 4) { say $x }; foo(3)

[14:41] <camelia> rakudo-moar 798614cb7: OUTPUT: «3␤»

[14:42] <AlexDaniel> rypervenche: the point is that you can use multiple where's

[14:42] <AlexDaniel> which I didn't know about

[14:43] <rypervenche> Ahh ok.

[14:43] <AlexDaniel> if I really wanted it short I would've written something like

[14:43] <AlexDaniel> sub foo($x where 2^..^4) { say $x }; foo(3)

[14:43] <evalable6> AlexDaniel, rakudo-moar 798614cb7: OUTPUT: «3␤»

[14:48] <AlexDaniel> in hindsight, supporting junctions as objects is a mistake

[14:48] <timotimo> you would have preferred only syntax?

[14:48] <AlexDaniel> most of the examples I see is people wanting syntactic sugar to compare against multiple values

[14:49] <AlexDaniel> that can be done during compilation by just expanding the expression for the user

[14:49] <AlexDaniel> then people also want to check all/any/one values of an iterable

[14:49] <AlexDaniel> ok, easy: all(@a X== 42)

[14:50] <timotimo> oh no, a slippery sloap :)

[14:50] <timotimo> sippery soap

[14:50] <AlexDaniel> or something like that, basically a sub to check that all values are truthy

[14:50] <AlexDaniel> no, a slippery sloap is introducing junctions as objects that you can pass around

[14:51] <AlexDaniel> people get away with it because they limit themselves to the two edge cases I mentioned above

[14:51] <AlexDaniel> but *any* code you write is probably buggy if you suddenly get junctions as input

[14:52] <AlexDaniel> for example:

[14:52] <AlexDaniel> m: my @a; @a.push(42|43); @a.push(4|8); say @a; say @a.sort

[14:52] <camelia> rakudo-moar 798614cb7: OUTPUT: «[any(42, 43) any(4, 8)]␤This type cannot unbox to a native integer: P6opaque, Junction␤  in block <unit> at <tmp> line 1␤␤»

[14:53] <AlexDaniel> none of this really has any meaning

[14:53] <AlexDaniel> although, `sum` “works”:

[14:53] <AlexDaniel> m: my @a; @a.push(42|43); @a.push(4|8); @a.push(2|3); say @a; say @a.sum

[14:53] <camelia> rakudo-moar 798614cb7: OUTPUT: «[any(42, 43) any(4, 8) any(2, 3)]␤any(any(any(48, 49), any(52, 53)), any(any(49, 50), any(53, 54)))␤»

[15:03] <AlexDaniel> and it's not like the most basic use of junctions is straightforward

[15:03] <AlexDaniel> people always get confused by the way it negates

[15:08] <AlexDaniel> but the situation highlights the additive nature of Raku – if something like that was proposed today I'm sure it wouldn't fly at all, but if it slipped in earlier then we praise the feature insead of thinking how to reimplement it with a proper solution :)

[15:14] <timotimo> i'm not that happy with the negation, honestly. that's a "make it how humans would intuitively understand it" thing

[16:13] *** oddp joined
[16:14] *** sena_kun joined
[16:16] *** Altai-man left
[16:28] <lizmat> .

[18:14] *** Altai-man joined
[18:16] *** sena_kun left
[18:20] *** Altai-man left
[18:27] *** Altai-man joined
[18:43] *** domidumont left
[18:43] *** domidumont joined
[18:53] *** domidumont left
[18:54] *** domidumont joined
[19:04] <AlexDaniel> timotimo: I'm planning to remove lrzip stuff from whateverable. I hope zstd can work just as good in its long-range mode

[19:04] <AlexDaniel> fingers crossed :)

[19:04] <AlexDaniel> hopefully will remove all the extra code paths too

[19:12] <timotimo> i hope it'll work out :)

[19:16] <AlexDaniel> benchmarking…

[19:25] <AlexDaniel> surprisingly, it's not really better when it comes to size

[19:25] <timotimo> hm

[19:25] <AlexDaniel> it's much faster I think, but that needs more benchmarking

[19:25] <AlexDaniel> 9.5M    all.tar.lrz # -c 19 --long

[19:25] <AlexDaniel> 8.3M    all.tar.lrz

[19:26] <AlexDaniel> I tried --long=31 which seems to be the max value, that resulted in 9.4M

[19:26] <AlexDaniel> not a real win I think

[19:28] <AlexDaniel> --ultra -22 --long=31 # 9.2M

[19:28] <AlexDaniel> that's as far as you can push it, hmm…

[19:30] <AlexDaniel> --ultra -22 --long=31 --format=lzma # 7.3M

[19:39] <AlexDaniel> sorry that paste above the first line is .tar.zstd

[19:59] <AlexDaniel> timotimo: actually, that slow command that results in 7.3M files…

[20:00] <AlexDaniel> timotimo: it takes more than a minute to compress vs 20s for lrzip

[20:00] <AlexDaniel> but, unsurprisingly

[20:00] <AlexDaniel> it's faster at decompression

[20:00] <AlexDaniel> 1s vs 1.5s

[20:01] <AlexDaniel> so, like usual, I win *both* space and decompression speed by just switching to zstd :)

[20:03] <AlexDaniel> this time, unfortunately, at the cost of compression speed :(

[20:10] <timotimo> whoops, huh

[20:10] <timotimo> hey, i wonder

[20:10] <timotimo> actually ... no, forget about it

[20:12] <AlexDaniel> what? :)

[20:15] *** sena_kun joined
[20:16] *** Altai-man left
[20:19] <[Tux]> Rakudo version 2020.07-56-g798614cb7 - MoarVM version 2020.07-14-g656142e21

[20:19] <[Tux]> csv-test-xs-20      0.380 -  0.381

[20:19] <[Tux]> csv-ip5xs           0.826 -  0.828

[20:19] <[Tux]> test-t --race       0.830 -  0.874

[20:19] <[Tux]> test-t              1.860 -  1.890

[20:19] <[Tux]> test                7.503 -  7.607

[20:19] <[Tux]> csv-ip5xs-20        7.913 -  7.980

[20:19] <[Tux]> test-t-20 --race    8.720 -  8.910

[20:19] <[Tux]> csv-parser         24.479 - 25.756

[20:19] <[Tux]> test-t-20          32.050 - 32.824

[20:40] <AlexDaniel> timotimo: https://github.com/Raku/whateverable/issues/23#issuecomment-670971601

[20:40] <AlexDaniel> not entirely sure what to do actually

[20:41] <AlexDaniel> basically, switching straight to zstd will make bisectable much much faster

[20:42] <AlexDaniel> bisect: old=2020.02.1 new=2020.05.1 say Date.today.last-date-in-month

[20:42] <bisectable6> AlexDaniel, Bisecting by exit code (old=2020.02.1 new=2020.05.1). Old exit code: 1

[20:42] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/d039ce57f35c60a776dcc9b00d50ed2d

[20:42] <bisectable6> AlexDaniel, (2020-04-17) https://github.com/rakudo/rakudo/commit/2fb7198f3da8ec0b76d1995ae0775378951717fe

[20:42] <AlexDaniel> hmm

[20:43] <AlexDaniel> the server is a bit busy right now :)

[20:43] <AlexDaniel> but it'd be a few seconds faster, big difference

[20:50] <MasterDuke> i think faster is better

[20:51] <AlexDaniel> faster is better yeah, unless it is running out of space… x)

[20:52] <AlexDaniel> I actually deleted all moarvm builds because I need space to clean things up…

[20:55] <AlexDaniel> it's not significantly faster on larger archives :(

[20:55] <AlexDaniel> ah wait…

[20:58] <AlexDaniel> yeah it is more than three times faster on decompression x)

[22:14] *** Altai-man joined
[22:16] *** sena_kun left
[23:14] *** oddp left
