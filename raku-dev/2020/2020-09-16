[00:41] *** lucasb left
[02:07] *** MasterDuke left
[05:58] *** leont left
[06:22] *** sena_kun joined
[07:02] *** sena_kun left
[07:06] *** sena_kun joined
[07:24] *** Altai-man joined
[07:26] *** sena_kun left
[07:30] *** camelCaser left
[07:31] *** camelCaser joined
[07:51] *** MasterDuke joined
[08:22] *** domidumont joined
[08:41] *** maggotbrain left
[08:55] *** maggotbrain joined
[09:45] *** MasterDuke left
[09:52] *** maggotbrain left
[10:25] *** MasterDuke joined
[10:28] *** maggotbrain joined
[11:00] <releasable6> Next release in ‚âà3 days and ‚âà7 hours. 3 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:01] *** MasterDuke left
[11:03] <Geth> ¬¶ rakudo/rakuast: 75b650c089 | (Elizabeth Mattijsen)++ | src/core.e/Formatter.pm6

[11:03] <Geth> ¬¶ rakudo/rakuast: NQPify the runtime components

[11:03] <Geth> ¬¶ rakudo/rakuast: 

[11:03] <Geth> ¬¶ rakudo/rakuast: - also rename sprintf to zprintf for now, for easier comparisons

[11:03] <Geth> ¬¶ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/75b650c089

[11:12] *** timotimo left
[11:13] *** timo joined
[11:14] *** timo is now known as Guest97478

[11:15] <Guest97478> √ærintf

[11:15] *** Guest97478 is now known as timotimo

[11:15] <timotimo> ≈øprintf

[11:24] <[Tux]> ‚éôf

[11:25] *** sena_kun joined
[11:27] <timotimo> m: say "\c[snake]printf"

[11:27] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´üêçprintf‚ê§¬ª

[11:27] *** Altai-man left
[11:52] <Xliff> m: sub a { say '1'; }; role B { }; &a does B;

[11:52] <camelia> rakudo-moar 85847d2f1: ( no output )

[11:52] <Xliff> m: sub a { say '1'; }; role B { }; &a does B; &a.WHAT.say

[11:52] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(Sub+{B})‚ê§¬ª

[11:55] <Xliff> m: sub a (1, 2, 3, 4) { say '1'; }; role B { }; &a does B; &a.WHAT.say; &a.arity.say

[11:55] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(Sub+{B})‚ê§4‚ê§¬ª

[11:59] *** MasterDuke joined
[12:15] *** leont joined
[12:47] <[Tux]> Rakudo version 2020.08.2-72-gf352b6d33 - MoarVM version 2020.08-91-g590bac47e

[12:47] <[Tux]> csv-test-xs-20      0.388 -  0.439

[12:47] <[Tux]> test-t --race       0.824 -  0.847

[12:47] <[Tux]> csv-ip5xs           1.005 -  1.014

[12:47] <[Tux]> test-t              1.845 -  1.944

[12:47] <[Tux]> test                7.906 -  8.280

[12:47] <[Tux]> csv-ip5xs-20       10.107 - 10.413

[12:47] <[Tux]> test-t-20 --race    9.438 - 11.350

[12:47] <[Tux]> csv-parser         26.257 - 30.128

[12:47] <[Tux]> test-t-20          32.651 - 33.070

[12:53] *** ccamel joined
[12:54] *** camelCaser left
[13:00] *** rypervenche left
[13:04] *** rypervenche joined
[14:37] *** MasterDuke left
[14:43] *** MasterDuke joined
[15:24] *** Altai-man joined
[15:27] *** sena_kun left
[15:36] *** nebuchadnezzar left
[15:37] *** Guest65602 joined
[16:09] *** Guest65602 is now known as nebuchadnezzar`

[16:11] *** nebuchadnezzar` is now known as nebuchadnezzar

[16:31] *** domidumont left
[17:11] *** MasterDuke left
[17:11] <Geth> ¬¶ rakudo/rakuast: d9f94bd4bd | (Jonathan Worthington)++ | 9 files

[17:11] <Geth> ¬¶ rakudo/rakuast: Foundations for traits in RakuAST

[17:11] <Geth> ¬¶ rakudo/rakuast: 

[17:11] <Geth> ¬¶ rakudo/rakuast: Proved to at least somewhat work by implementing a number of the simple

[17:11] <Geth> ¬¶ rakudo/rakuast: traits that apply to a typename, and then trait application on package

[17:11] <Geth> ¬¶ rakudo/rakuast: declarators.

[17:11] <Geth> ¬¶ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/d9f94bd4bd

[17:25] <Xliff> What's the best way to try and introspect the subs at the bottom of a compunit like this: https://github.com/Xliff/p6-GIO/blob/master/lib/GIO/FileInputStream.pm6

[17:25] <Xliff> If I have a package like this one, I'm fine: https://github.com/Xliff/p6-GIO/blob/master/lib/GIO/Raw/Action.pm6

[17:26] <Xliff> This works: my $r = "GIO::Raw::Action"; require ::($r); $r = ::("{ $r }::EXPORT::DEFAULT");

[17:28] *** Altai-man left
[17:31] *** Altai-man joined
[17:34] *** Altai-man left
[17:35] <Xliff> Ah, damn. In the prior case, they are loaded directly into MY::

[17:47] *** patrickb joined
[18:46] <Geth> ¬¶ rakudo: patrickbkr++ created pull request #3918: Build System: Fix RUN_RAKUDO to use the dummy Rakudo home

[18:46] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3918

[18:46] <patrickb> o/

[18:46] *** raku-bridge joined
[18:46] *** raku-bridge left
[18:46] *** raku-bridge joined
[18:47] <patrickb> vrurg: If you find the time, I'd value a look at the above PR. I'm not sure whether there is a more fool proof way of quoting things.

[18:54] *** donaldh joined
[19:05] *** raku-bridge left
[19:05] *** raku-bridge joined
[19:09] *** Geth left
[20:27] *** MasterDuke joined
[20:29] *** MasterDuke left
[20:32] *** patrickb left
[21:03] <lizmat> tyil: Geth is AWOL again

[21:04] <tyil> :(

[21:04] * lizmat just added 0c52628b019355ccf3a95de7d76b17aba01053f2

[21:05] *** Geth joined
[21:05] <lizmat> tyil++

[21:08] <timotimo> tyil: earlier today i cycled the discord bridge bot

[21:08] <tyil> ah

[21:08] <lizmat> Geth quit much later: [21:09:00] 	Geth (~zofbot-ge@minion6.tyil.net) left IRC (Ping timeout: 256 seconds)

[21:08] <tyil> that explains the short liveness of the discord bridge

[21:09] <tyil> I just saw it had a way shorter uptime than other services

[21:09] <timotimo> right

[21:09] <tyil> lizmat: I'm not quite sure why get sometimes times out, it does the same when I run it locally

[21:09] <tyil> s/get/geth/

[21:09] <timotimo> is there like a log you can query where it would indicate that my user sent that command?

[21:09] <tyil> so it's not something specific to my server or anything

[21:09] <lizmat> :-(

[21:10] <tyil> timotimo: I could set that up, but right now I'm working on simple trust :p

[21:10] <timotimo> ah, i'm thinking less of trust and more of ... i dunno, knowing what the hell is going on :D

[21:10] <tyil> I could capture logs to an ElasticSearch cluster, that seems to be The Best Thing for kubernetes

[21:10] <tyil> but that would require me to set up such a cluster

[21:11] <tyil> which is a big reason as to why I don't have it

[21:11] <tyil> guess I could run it on my local desktop when I get some additional storage

[21:13] *** MasterDuke joined
[21:15] <timotimo> it's not a priority for me, don't worry

[21:16] <tyil> :>

[21:16] <tyil> it's something I should learn to set up and configure anyway

[21:16] <tyil> and I've got plenty of memory to spare now

[21:17] <timotimo> memory to spare? couldn't be me! :)

[21:18] <tyil> I got a new desktop about a week ago, so now I'm sporting 64gb memory

[21:18] <timotimo> nice

[21:19] <tyil> I can have 3 chromium tabs open now!

[21:30] <vrurg> ambr@4Mudambra

[21:32] <timotimo> vrurg: nice password you have there ... better change it quickly, though :S

[21:32] <vrurg> oops, wrong window.

[21:32] <vrurg> timotimo: aha.... :(

[22:11] <donaldh> Building rakudo-star 2020.05 from tarball is a bit ugly

[22:11] <donaldh> lots of "fatal: not in a git directory"

[22:12] <donaldh> macOS and older centos both complain that C.UTF-8 is not a known locale.

[22:13] <donaldh> it requires bash 4.x or newer to get declare -A so that breaks on macOS which only has bash 3.x by default.

[22:14] <donaldh> In the homebrew formula I can depend on a newer bash to resolve that problem, but anyone building from source manually will come unstuck.

[22:15] <donaldh> I would switch to using default C locale, but I don't know the reasoning for choosing C.UTF-8 so worried I might break things elsewhere.

[22:20] <timotimo> donaldh: just to make sure, you didn't get the tarball from github, right?

[22:20] <timotimo> oh, star, we don't have the issue there i guess

[22:23] <donaldh> timotimo: the star dist tarball.

[22:32] *** donaldh left
[22:32] *** donaldh joined
[22:32] <Xliff> How can I look at the symbol table of a loaded module that does not have the "unit package" declarator in it?

[22:37] *** donaldh left
[22:39] <Xliff> I'm trying this -- https://github.com/Xliff/p6-GIO/blob/fileinputstream-dead-branch/lib/GIO/FileInputStream.pm6

[22:40] <Xliff> I cannot understand why that doesn't return a value when I invoke using: use GIO::FileInputStream; say %GIO::FileInputStream::RAW-DEFS.keys 

[22:42] <timotimo> you need ::.keys perhaps?

[22:43] <Xliff> Well, the %RAW-DEFS.gist.say will return a value. It's when I try and access that value outside of the compunit that's the problem. It's blank!

[22:43] <Xliff> So the .gist.say shows that it gets populated, so why can't I get data when I access GIO::FileInputStream::RAW-DEFS?

[22:45] <timotimo> is RAW-DEFS in the GIO::FileInputStream::.keys?

[22:51] <Xliff> Why would that matter?

[22:52] <Xliff> Nothing is in GIO::FileInputStream::.keys

[22:52] <timotimo> i'm just trying to debug

[22:52] <Xliff> Sorry. Answered.

[22:53] <Xliff> timotimo: To note though, GIO::FileInputStream isn't a package, but a class def.

[22:53] <timotimo> ah

[22:54] <timotimo> ok i don't think there's a reason to believe the our %RAW-DEFS would show up in there then?

[22:54] <Xliff> OK.

[22:54] <timotimo> i mean, classes do get packages, right?

[22:54] <timotimo> this is an area i haven't done much with at all tbh

[22:54] <Xliff> Well it's odd. I really don't need the %RAW-DEFS if I could get access to its symbol table when using require...

[22:54] <timotimo> ah, require

[22:55] <Xliff> I wasn't able to, hence the %RAW-DEFS hack.

[22:55] <timotimo> you didn't say that?

[22:55] <Xliff> Sorry. Mentioned this earlier. No one bit.

[22:55] <timotimo> ok

[22:56] <Xliff> For the record, this compunit works fine: https://github.com/Xliff/p6-GIO/blob/master/lib/GIO/Raw/InetAddress.pm6

[22:56] <Xliff> And I suspect that's because it's a package def.

[22:56] <timotimo> there's no "our" in there, so dunno

[22:57] <Xliff> It's when I have exported subs outside of a package def that I have problems accessing symbols.

[22:57] <timotimo> how do you require, with a constant name or a dynamic name?

[22:57] <Xliff> So if there's a better way to write what I have in GIO::FileInputStream, then I'd like to know it.

[22:57] <Xliff> timotimo: dynamic

[22:58] <Xliff> Here's the script, if you are curious: https://github.com/Xliff/p6-GtkPlus/blob/master/scripts/check-rw-params.pl6

[22:59] <timotimo> oh, require with module name or with filename?

[22:59] <Xliff> Module name

[22:59] <timotimo> OK, so ::($foo) right?

[22:59] <Xliff> Yep

[23:01] <Xliff> timotimo: Latest changes pushed. Please reload above link.

[23:01] <timotimo> i don't actually remember how dynamic module loading works :D

[23:01] <Xliff> Oh. LOL

[23:01] <Xliff> Well, if you can't help any further, then thanks for trying.

[23:02] <timotimo> where does stuff land when you 'require ::($blah)'

[23:02] <Xliff> But basically, what I am trying to do is get all exported subs included in module "{$n}::{$cu}"

[23:03] <Xliff> timotimo: Usually where you'd expect.

[23:03] <timotimo> i mean, i can get stuff from %REQUIRE_SYMBOLS

[23:03] <timotimo> but that doesn't look official :P

[23:03] <Xliff> %REQUIRE_SYMBOLS? 

[23:04] <Xliff> How does that work?

[23:04] <timotimo> well, i see it in MY::.keys, lol

[23:04] <timotimo> sorry, it's in ::.keys

[23:05] <timotimo> greppable6: "require ::"

[23:05] <greppable6> timotimo, Found nothing!

[23:05] <timotimo> greppable6: require ::

[23:05] <greppable6> timotimo, 211 lines, 72 modules: https://gist.github.com/94d44a9fa6340d394e8ad90d64df0ec6

[23:06] <timotimo> ah

[23:07] <timotimo> could you try dd ::("%RAW-DEFS") after requiring ::(my $o = ...)?

[23:07] <timotimo> after i require ::("Folder::$modname") i can access ::("Florble") which is a class i got in Folder/ModA.pm6

[23:08] *** donaldh joined
[23:09] <timotimo> and the "our %whoop" i have i get with ::("%whoop")

[23:11] <Xliff> ?!?

[23:11] <Xliff> OK. That looks to have worked. 

[23:12] <Xliff> However why is that? I didn't say "is export"

[23:13] <timotimo> shrug :P

[23:13] <Xliff> Heh. Fair 'nuff.

[23:13] <Xliff> timotimo++

[23:15] *** donaldh left
[23:20] <Xliff> https://github.com/Xliff/p6-GtkPlus/commit/fc39b805444e0e1133ecf64019e107f0d08306f5

