[00:07] *** sena_kun joined
[00:09] *** Altai-man_ left
[00:27] *** vrurg_ joined
[00:28] *** nebuchad` joined
[00:29] *** bartolin_ joined
[00:30] *** timo joined
[00:31] *** klapperl left
[00:31] *** timo is now known as Guest88981

[00:32] *** klapperl joined
[00:34] *** [Coke] left
[00:34] *** vrurg left
[00:34] *** bartolin left
[00:34] *** nebuchadnezzar left
[00:34] *** timotimo left
[00:34] *** jdv79 left
[00:34] *** [Coke] joined
[00:34] *** [Coke] left
[00:34] *** [Coke] joined
[00:37] *** jdv79 joined
[01:21] *** Xliff joined
[01:58] *** Xliff left
[02:06] *** dogbert11 left
[02:06] *** Altai-man_ joined
[02:08] *** sena_kun left
[03:23] *** klapperl_ joined
[03:23] *** jdv79_ joined
[03:28] *** jdv79 left
[03:28] *** klapperl left
[03:28] *** TreyHarris left
[03:28] *** kubrat left
[03:31] *** kubrat joined
[03:34] *** TreyHarris joined
[04:07] *** sena_kun joined
[04:08] *** Altai-man_ left
[06:06] *** Altai-man_ joined
[06:09] *** sena_kun left
[06:10] *** MasterDuke left
[06:16] *** MasterDuke joined
[07:56] *** domidumont joined
[08:07] *** sena_kun joined
[08:08] *** Altai-man_ left
[08:59] *** nebuchad` is now known as nebuchadnezzar

[10:06] *** Altai-man_ joined
[10:09] *** sena_kun left
[10:29] <MasterDuke> why do we only have `set(meth|type)cache` and not `update(meth|type)cache`?

[11:00] <lizmat> Files=1305, Tests=111189, 206 wallclock secs (28.40 usr  7.98 sys + 2889.52 cusr 268.01 csys = 3193.91 CPU)

[11:35] *** domidumont left
[12:07] *** sena_kun joined
[12:08] *** Altai-man_ left
[12:25] <MasterDuke> oh interesting, the method_cache is a BOOTHash, but the type_check_cache is just a list

[13:10] <[Tux]> Rakudo version 2020.02.1-179-g2a58eb398 - MoarVM version 2020.02.1-44-g04005cf43

[13:10] <[Tux]> csv-test-xs-20      0.371 -  0.373

[13:10] <[Tux]> csv-ip5xs           0.712 -  0.718

[13:10] <[Tux]> test-t --race       0.851 -  0.981

[13:10] <[Tux]> test-t              1.943 -  2.025

[13:10] <[Tux]> csv-ip5xs-20        6.486 -  6.705

[13:10] <[Tux]> test                8.585 -  9.266

[13:10] <[Tux]> test-t-20 --race    9.838 - 10.404

[13:10] <[Tux]> csv-parser         26.260 - 27.639

[13:10] <[Tux]> test-t-20          32.767 - 33.354

[13:10] <[Tux]> Still slow :(

[13:27] <Geth> ¬¶ rakudo: 3d6e8d6d7d | (Elizabeth Mattijsen)++ | 4 files

[13:27] <Geth> ¬¶ rakudo: Move IO::Path.CHECKSUM to Rakudo::Internals

[13:27] <Geth> ¬¶ rakudo: 

[13:27] <Geth> ¬¶ rakudo: By popular demand.

[13:27] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/3d6e8d6d7d

[14:00] *** Kaiepi left
[14:00] *** Kaiepi joined
[14:02] *** japhb left
[14:06] *** Altai-man_ joined
[14:09] *** sena_kun left
[14:17] *** Kaiepi left
[14:18] <MasterDuke> huh. 60k calls to `type_check` and 31k calls to `find_method` when building rakudo. most common method is is_generic in Parameter, most common type is Routine in Method

[14:18] *** Kaiepi joined
[14:18] <MasterDuke> but is that expected? because stuff won't have been composed until the end of the setting?

[14:19] *** Kaiepi left
[14:20] *** Kaiepi joined
[14:21] *** Kaiepi left
[14:24] *** Kaiepi joined
[14:25] <nine> MasterDuke: I wonder if we could compose those earlier?

[14:26] <MasterDuke> how? move them earlier in the build order?

[14:27] * lizmat has bad memories trying to move stuff around in the core setting, especially in the early parts

[14:28] <lizmat> things may break and the error messages are generally awful (or compilation just hangs)

[14:28] <lizmat> MasterDuke: but please, be my guest  :-)

[14:29] <MasterDuke> where is that list?

[14:30] <lizmat> tools/templates/6.*/core_sources

[14:30] <MasterDuke> thanks

[14:35] <lizmat> afk&

[14:39] <MasterDuke> nine: heh, moving Method before Routine caused 17 fewer 'looking for type Routine in Method'

[14:40] <MasterDuke> 6207 instead of 6224

[14:44] *** titsuki joined
[14:46] <MasterDuke> nine: but given the problem with shaped native arrays, it seems like there's a more general fix to be had

[14:47] <nine> MasterDuke: I can tell you that Int.pm6 definitely must come before Parameter.pm6

[14:51] <MasterDuke> nine: one thing i don't understand, what does it mean for there to be method calls to a non-composed class?

[14:56] <jnthn> MasterDuke: Please don't move Method before Routine. Method inherits from Routine. I'd be surprised if that didn't have very bad consequences at some point.

[14:56] <jnthn> Like any methods defined in Routine in the setting not being in the cache or some such

[14:57] <jnthn> A method call on a non-composed class just means it looks at the set of methods it knows about so far, without consulting the cache. The caches are *authoritative*, which is an important optimization (sometimes knowing a method does not exist is significant).

[14:58] <jnthn> So you can't publish those until you know the full set of methods.

[14:58] <jnthn> That said, there are protections against this to a degree (I think add_method invalidates the cache, just in case)

[14:59] <jnthn> (But that's a local invalidation, so won't impact subclasses, which is why order matters.)

[14:59] <MasterDuke> add_fallback does invalidate it

[14:59] <jnthn> Yup, makes sense, 'cus in that case the cache *can't* be authoritative, iirc

[14:59] <jnthn> Because we don't want to say "no" based on lack of cache entry when there's a fallback.

[15:00] <MasterDuke> moving things hasn't had any noticeable effect, so i'm not planning to do any more experimenting that way

[15:01] <MasterDuke> but i haven't yet been able to find a better place to (re)publish the caches

[15:02] <jnthn> Yeah, I was gonna look into that yesterday, but ended up getting distracted on another shiny thing I wanted to hack on :)

[15:04] <MasterDuke> heh. and i got distracted trying to figure out why --profile-stage silently dies/doesn't work when trying to profile the rakudo build (but does work on something smaller)

[15:08] <MasterDuke> but no success

[15:14] <MasterDuke> well, re-applying my reverted PR does also dramatically reduce the 'looking for type' logging messages i added when building rakudo. i.e., not just in that sample code with the native shaped arrays

[15:17] <MasterDuke> so it looks like a good fix will have some more general benefit as well

[16:07] *** sena_kun joined
[16:09] *** Altai-man_ left
[16:11] *** [Tux] left
[16:20] *** [Tux] joined
[16:34] *** titsuki left
[18:06] *** Altai-man_ joined
[18:08] *** sena_kun left
[18:52] *** ufobat_ joined
[18:55] *** ufobat__ left
[19:16] *** sena_kun joined
[19:17] *** Altai-man_ left
[19:48] <Geth> ¬¶ nqp: usev6++ created pull request #605: Introduce VMNull on JVM backend

[19:48] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/605

[19:52] *** Guest88981 is now known as timotimo

[20:07] <bartolin_> ^^ I've opened this PR and am looking for comments. It would be very nice to get a short evaluation whether the basic implementation (not all details) make sense. Don't know whom to ask about that -- except for jnthn and pmurias.

[20:09] <Geth> ¬¶ rakudo: af594925fe | (Ben Davies)++ | src/core.c/traits.pm6

[20:09] <Geth> ¬¶ rakudo: Make method lookup with the handles trait 13% faster in certain cases

[20:09] <Geth> ¬¶ rakudo: 

[20:09] <Geth> ¬¶ rakudo: By using nqp::can instead of Mu.can, method lookups deferred to an

[20:09] <Geth> ¬¶ rakudo: attribute with the handles trait can be optimized when used with

[20:09] <Geth> ¬¶ rakudo: Whatever or a type object.

[20:09] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/af594925fe

[20:10] <lizmat> Kaiepi++

[20:37] *** leont joined
[20:42] <Kaiepi> so i saw someone had fixed Routine.wrap for stuff like multi methods and checked to see if it works with Trait::Traced or not

[20:42] <Kaiepi> it mostly does, but there are a couple tests that are failing

[20:43] <Kaiepi> m: sub trait_mod:<is>(Method:D $m is raw, :$foo!) { $m.wrap: my method (|) { say "ok" } }; class Foo { method ^meta(Mu) is foo { } }; Foo.^foo

[20:43] <camelia> rakudo-moar af594925f: OUTPUT: ¬´No such method 'foo' for invocant of type 'Perl6::Metamodel::ClassHOW+{<anon>}'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:43] <Kaiepi> m: sub trait_mod:<is>(Method:D $m is raw, :$foo!) { $m.wrap: my method (|) { say "ok" } }; class Foo { method ^meta(Mu) is foo { } }; Foo.^meta

[20:43] <camelia> rakudo-moar af594925f: ( no output )

[20:43] <Kaiepi> this is one

[20:43] <Kaiepi> haven't golfed the other one yet

[21:05] *** pmurias joined
[21:10] <pmurias> bartolin_: re isnull branch, thanks for that it's something that was a major pain for a long time

[21:15] *** Altai-man_ joined
[21:17] *** sena_kun left
[21:25] <Geth> ¬¶ rakudo: 3017cfea50 | (Elizabeth Mattijsen)++ | 2 files

[21:25] <Geth> ¬¶ rakudo: Make Date/DateTime.yyyy-mm-dd about 250x as fast

[21:25] <Geth> ¬¶ rakudo: 

[21:25] <Geth> ¬¶ rakudo: Also allow a separator to be specified, so that you can now say:

[21:25] <Geth> ¬¶ rakudo: 

[21:25] <Geth> ¬¶ rakudo:     Date.yyyy-mm-dd("/") to get "2020/03/14" for today.

[21:25] <Geth> ¬¶ rakudo: 

[21:25] <Geth> ¬¶ rakudo: The default separator being "-", to remain compatible with earlier

[21:25] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 5 more lines‚Ä¶>

[21:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/3017cfea50

[21:29] <[Tux]> Rakudo version 2020.02.1-181-gaf594925f - MoarVM version 2020.02.1-45-g2252a95df

[21:29] <[Tux]> csv-test-xs-20      0.370 -  0.394

[21:29] <[Tux]> csv-ip5xs           0.718 -  0.778

[21:29] <[Tux]> test-t --race       0.992 -  1.013

[21:29] <[Tux]> test-t              1.928 -  2.110

[21:29] <[Tux]> csv-ip5xs-20        6.369 -  6.602

[21:29] <[Tux]> test                8.056 -  8.434

[21:29] <[Tux]> test-t-20 --race    9.799 - 11.389

[21:29] <[Tux]> csv-parser         26.504 - 26.662

[21:29] <[Tux]> test-t-20          34.249 - 34.254

[21:29] <[Tux]> after a reboot, machine not really in use

[21:32] <lizmat> I guess that's still the next-dispatcher stuff acting up

[21:32] *** jdv79_ is now known as jdv79

[22:03] *** ufobat_ left
[22:19] <MasterDuke> [Tux]: how many lines are in the csv file you test with?

[22:45] <Geth> ¬¶ rakudo: 70ac9b72ef | (Elizabeth Mattijsen)++ | src/core.c/Dateish.pm6

[22:45] <Geth> ¬¶ rakudo: Add Date/DateTime.dd-mm-yyyy / mm-dd-yyyy methods

[22:45] <Geth> ¬¶ rakudo: 

[22:45] <Geth> ¬¶ rakudo: Seeing the code from https://covid.observer made me realize that

[22:45] <Geth> ¬¶ rakudo: most uses of the formatter for Date/DateTime is to create the

[22:45] <Geth> ¬¶ rakudo: mm-dd-yyyy and dd-mm-yyyy alternatives for dates.  Since these

[22:45] <Geth> ¬¶ rakudo: methods would be 250x faster than using a sprintf and the formatter,

[22:45] <Geth> ¬¶ rakudo: it seems like a good thing to add, especially since these methods

[22:45] <Geth> ¬¶ rakudo: allow for a different separator so today would can show up for our

[22:45] <Geth> ¬¶ rakudo: American friends as:

[22:45] <Geth> ¬¶ rakudo: 

[22:45] <Geth> ¬¶ rakudo:     say Date.today.mm-dd-yyyy("/");  # 03/14/2020

[22:45] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/70ac9b72ef

[22:50] <MasterDuke> heh, we just realized now that we're here in the uk there won't be any pi(e) day

[22:50] <lizmat> those bloody colonials !  :-)

[23:08] <[Coke]> US pi day fun: https://www.youtube.com/watch?v=N41yZsxIsK8

[23:16] *** sena_kun joined
[23:18] *** Altai-man_ left
[23:22] * lizmat calls it a sad day&

[23:25] <[Coke]> agreed. ~~

[23:25] *** leont left
