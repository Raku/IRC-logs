[00:41] *** guifa2_ left
[00:58] *** lichtkind left
[01:42] *** Xliff joined
[01:43] <Xliff> .tell nine Was close, but recent changes in PrecompilationStore necessitated another solution.

[01:43] <tellable6> Xliff, I'll pass your message to nine

[04:48] *** guifa2 joined
[05:31] *** guifa2 left
[05:43] *** Xliff left
[06:26] <nine> Xliff: but none of those changes changed the architecture? So what is preventing the original plan from succeeding?

[06:26] <tellable6> nine, I'll pass your message to Xliff

[06:31] *** guifa2 joined
[06:35] *** guifa2 left
[08:01] *** hankache joined
[08:03] *** sena_kun joined
[08:23] *** domidumont joined
[08:25] *** Altai-man_ joined
[08:28] *** sena_kun left
[08:49] *** jjmerelo joined
[09:41] <lizmat> Files=1306, Tests=111292, 212 wallclock secs (28.60 usr  8.26 sys + 2992.37 cusr 272.84 csys = 3302.07 CPU)

[10:26] *** sena_kun joined
[10:27] *** Altai-man_ left
[10:48] <[Tux]> Rakudo version 2020.05.1-128-g7571f65a4 - MoarVM version 2020.05-12-g3605efdbf

[10:48] <[Tux]> csv-test-xs-20      0.394 -  0.399

[10:48] <[Tux]> csv-ip5xs           0.820 -  0.835

[10:48] <[Tux]> test-t --race       0.801 -  0.822

[10:48] <[Tux]> test-t              1.848 -  1.851

[10:48] <[Tux]> test                7.314 -  7.524

[10:48] <[Tux]> csv-ip5xs-20        8.151 -  8.277

[10:48] <[Tux]> test-t-20 --race    8.790 -  8.824

[10:48] <[Tux]> csv-parser         24.721 - 25.080

[10:48] <[Tux]> test-t-20          30.705 - 31.026

[11:02] *** hankache_ joined
[11:05] *** hankache left
[11:21] *** hankache_ left
[11:22] <Geth> Â¦ rakudo: da5825e698 | (Elizabeth Mattijsen)++ | src/core.c/io_operators.pm6

[11:22] <Geth> Â¦ rakudo: Make spurt() a few % faster

[11:22] <Geth> Â¦ rakudo: 

[11:22] <Geth> Â¦ rakudo: Mostly because of fewer object allocations by adding specific candidates.

[11:22] <Geth> Â¦ rakudo: This should also help introspection and catch typos in the named parameters

[11:22] <Geth> Â¦ rakudo: at compile time.

[11:22] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/da5825e698

[12:20] *** jjmerelo left
[12:26] *** Altai-man_ joined
[12:28] *** sena_kun left
[12:31] <Geth> Â¦ rakudo: andreoss++ created pull request #3699: [jvm] Rename s/perl6/raku/g

[12:31] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3699

[12:31] *** andreoss joined
[12:42] <MasterDuke> why can't i select pmurias as a reviewer for an nqp pr?

[12:43] <MasterDuke> but i can for rakudo. is he not part of the raku team/project/group/whatever?

[12:46] <lizmat> I guess ?

[12:49] <lizmat> FWIW, I would be fine with merging, bartolin_ will know then anyway  :-)

[12:50] <Geth> Â¦ rakudo: fc88b9c2d2 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[12:50] <Geth> Â¦ rakudo: Made IO::Path's "is-absolute" handling a bit faster

[12:50] <Geth> Â¦ rakudo: 

[12:50] <Geth> Â¦ rakudo: And add some internal documentation, and some extra return constraints.

[12:50] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fc88b9c2d2

[13:22] <Geth> Â¦ rakudo: d8c265001a | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[13:22] <Geth> Â¦ rakudo: Make so() and not() faster

[13:22] <Geth> Â¦ rakudo: 

[13:22] <Geth> Â¦ rakudo: - so(Bool:D) almost 5x as fast

[13:22] <Geth> Â¦ rakudo: - so(foo) almost 10% faster

[13:22] <Geth> Â¦ rakudo: - not(foo) about 3.5% faster

[13:22] <Geth> Â¦ rakudo: 

[13:22] <Geth> Â¦ rakudo: Thanks to the power of ternaries and an additional Bool:D candidate

[13:22] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d8c265001a

[13:22] <lizmat> afk for a few hours&

[13:30] *** domidumont left
[14:15] *** Kaiepi left
[14:17] *** Kaiepi joined
[14:27] *** sena_kun joined
[14:28] *** Altai-man_ left
[14:30] *** Kaiepi left
[14:31] *** Kaiepi joined
[14:55] *** finsternis joined
[15:01] *** kawaii joined
[15:44] *** patrickb joined
[15:47] <patrickb> .tell rba Still waiting for the 2020.05.1 upload. Also ping about automating this somehow. :-)

[15:47] <tellable6> patrickb, I'll pass your message to rba

[15:47] <patrickb> .tell rba Maybe We can even automate this with AzureCI. They have a load of scripts to help with deployment of artifacts.

[15:47] <tellable6> patrickb, I'll pass your message to rba

[16:00] <patrickb> .tell rba This might be of use: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/copy-files-over-ssh?view=azure-devops

[16:00] <tellable6> patrickb, I'll pass your message to rba

[16:01] <patrickb> .tell rba Ping me if I can help with this.

[16:01] <tellable6> patrickb, I'll pass your message to rba

[16:02] <rba> patrickb: We might discuss this.

[16:02] <tellable6> 2020-05-17T15:47:12Z #raku-dev <patrickb> rba Still waiting for the 2020.05.1 upload. Also ping about automating this somehow. :-)

[16:02] <tellable6> 2020-05-17T15:47:45Z #raku-dev <patrickb> rba Maybe We can even automate this with AzureCI. They have a load of scripts to help with deployment of artifacts.

[16:09] <rba> patrickb: When we like to go this route, we need to make sure the builds are automatically tested and gpg signed as well...

[16:10] <patrickb> Good point. Didn't think about that. They are tested already. But signing is a different beast.

[16:12] <patrickb> It seems to be possible to automatically sign stuff: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/helm-provenance?view=azure-devops

[16:12] <patrickb> The key will have to reside on azure servers though.

[16:13] <rba> I would rather prefer you upload the files yourself directly.

[16:15] <patrickb> I think a group of possible uploaders is a good thing to have. The last few releases it always took me 2-4 days to find the time to do the build. So having a bit of redundancy might be good.

[16:16] <patrickb> (Up until now building on Windows still needed to be done manually. That's now also automated, so the effort ofdoing a build has sunk considerably.)

[16:16] <rba> patrickb: Please pm me your prefered username and your ssh public keys.

[16:23] <Geth> Â¦ rakudo: 8e5b610aa2 | (Christian BartolomÃ¤us)++ | 2 files

[16:23] <Geth> Â¦ rakudo: Avoid StringIndexOutOfBoundsException on Windows

[16:23] <Geth> Â¦ rakudo: 

[16:23] <Geth> Â¦ rakudo: On the JVM backend, nqp::backendconfig doesn't tell us the OS name.

[16:23] <Geth> Â¦ rakudo: 

[16:23] <Geth> Â¦ rakudo: Unfortunately, 'nmake install' still doesn't work. Another error

[16:23] <Geth> Â¦ rakudo: surfaces:

[16:23] <Geth> Â¦ rakudo: 

[16:23] <Geth> Â¦ rakudo:   Invalid JSON: VMArray representation does not implement push_native

[16:23] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8e5b610aa2

[16:26] *** Altai-man_ joined
[16:29] *** sena_kun left
[16:30] <timotimo> oh, that looks like fallout from the "allow decode to push into already existing array" change?

[16:31] <timotimo> bartolin_: could that help?

[16:33] <bartolin_> timotimo: didn't see that one, yet. Thanks for the pointe. will take a look later &

[16:33] <tellable6> 2020-05-15T07:20:15Z #raku-dev <patrickb> bartolin I'm hunting a JVM / Windows build error. Here is the failure: https://github.com/Raku/nqp/issues/629 Any ideas?

[16:33] <tellable6> 2020-05-15T21:53:45Z #moarvm <patrickz> bartolin The previous failure is solved. Now I have a new JVM error: https://github.com/rakudo/rakudo/issues/3695 Help appreciated!

[16:34] <patrickb> bartolin_: Thanks for tackling this!

[16:38] <rba> patrickb: https://github.com/rakudo/rakudo/blob/master/azure-pipelines.yml Wow. Good work...

[16:39] <patrickb> It's kind of a monster I have created there. More than one facepalm happened during the process.

[16:41] <rba> patrickb: When I played around with azure build pipelines it took me plenty of time to get things to work properly.

[16:42] <patrickb> I hope it'll be a long time before we do the next switch of CI pipeline. :-)

[16:43] <rba> patrickb: We may adopt this for the star release as well...

[16:59] <bartolin_> patrickb: do you know if it is possible to tolerate the failures during 'make install' for the JVM backend on Windows for now? For the record: For travis we allow failures for the JVM backend. (Though it might make sense to change that.)

[17:01] <patrickb> bartolin_: I have discussed this a bit with sena_kun. It's not easy to tolerate only some failures. AzureCI is missing a feature there.

[17:01] <Altai-man_> bartolin_, it is kind of "all or nothing" situation.

[17:01] <patrickb> We could just not test that combination. That would be easy.

[17:03] <Altai-man_> bartolin_, is it an absolutely mad wish to have JVM backend build-able? It might be hard to un-bitrot it, but once it's done, it will be much easier to fix it again if something regresses because you have the exact commit and know a single fix is necessary.

[17:03] *** Altai-man_ is now known as sena_kun

[17:04] <bartolin_> no, no, nothing mad about that ;) It even builds, so I hope it's not too hard to make it installable, too.

[17:06] <bartolin_> it only makes me a bit uncomfortable to see the failing builds all the time ;)

[17:06] <sena_kun> bartolin_, you mean the builds will faill all the time until JVM backend will be un-bitrotted or there is something more?

[17:07] <bartolin_> timotimo: do you have a commit or issue for  "allow decode to push into already existing array"? It looks like the problem only happens on Windows ...

[17:08] <bartolin_> sena_kun: I was just referring to all those red marks at https://github.com/rakudo/rakudo/commits/

[17:09] <bartolin_> sena_kun: it makes it harder to see other (new) problems

[17:09] <sena_kun> bartolin_, I would not mind them as long as we are moving to the right direction. I mean, we had the same thing for a month or something until niner++ has fixed SEVG on Windows and not a lot of people complained about it.

[17:10] <patrickb> sena_kun: How would you approach retiring the other CI backends? My proposal is to give it a week or so time to see whether any other problem come up and then just remove the other CI integrations.

[17:10] <bartolin_> bartolin_: well, ok :) 

[17:10] <sena_kun> bartolin_, how much can it take to get it green? In rough terms, of course.

[17:10] <MasterDuke> bartolin_: https://github.com/MoarVM/MoarVM/commit/05c290522d9859004e9ec6f9ae1d1e6c82b527de

[17:11] <bartolin_> MasterDuke: thanks

[17:11] <timotimo> | * | | | | 05c290522 - Allow nqp::encode() to take a preallocated buffer (6 weeks ago) <Daniel Green>

[17:11] <linkable6> (2020-03-30) https://github.com/MoarVM/MoarVM/commit/05c290522d Allow nqp::encode() to take a preallocated buffer

[17:12] <timotimo> ah too slow

[17:12] <MasterDuke> if we only have limited resources on any one provider, maybe we can split up the higher level work. e.g., test the build/install on each commit with azure, do coverage reports on a not-quite-as-frequent bases with appveyor, ...

[17:12] <sena_kun> patrickb, I suspect enabling them back is just a click or ten, so sounds reasonable. But I would put it into Weekly or something so that more people wouldn't be too surprised. So "posting in a weekly" + a week of time.

[17:13] <MasterDuke> *basis

[17:13] <patrickb> MasterDuke: Azure is free without any limits.

[17:13] *** andreoss left
[17:13] <MasterDuke> ah

[17:13] <MasterDuke> interesting

[17:14] <patrickb> sena_kun: I'd remove the config files from the repo. But it would still just be a revert + some clicks.

[17:15] <sena_kun> patrickb, yeah, not a big deal. Anyway, announce in weekly + a week to wait and can remove them.

[17:16] <bartolin_> sena_kun: I really don't know. It might be a matter of a few hours. But I can't promise anything, since my time resources for hacking are limited

[17:16] <sena_kun> bartolin_, don't sweat even if it takes a week or something.

[17:17] <sena_kun> Or more. :)

[17:25] <patrickb> .weekly AzureCI was added as a new CI pipeline for Rakudo meant to replace the different CI pipelines we have now. AzureCI tests all build combinations the other CI pipelines tested (plus some more). This will get rid of a good bit of redundant, wasteful testing. We plan to remove support for Travis, AppVeyor and CircleCI soon.

[17:26] <patrickb> Is weekly-bot dead?

[17:26] <sena_kun> .note AzureCI was added as a new CI pipeline for Rakudo meant to replace the different CI pipelines we have now. AzureCI tests all build combinations the other CI pipelines tested (plus some more). This will get rid of a good bit of redundant, wasteful testing. We plan to remove support for Travis, AppVeyor and CircleCI soon.

[17:26] <sena_kun> hm

[17:27] <sena_kun> weekly: AzureCI was added as a new CI pipeline for Rakudo meant to replace the different CI pipelines we have now. AzureCI tests all build combinations the other CI pipelines tested (plus some more). This will get rid of a good bit of redundant, wasteful testing. We plan to remove support for Travis, AppVeyor and CircleCI soon.

[17:27] <notable6> sena_kun, Noted! (weekly)

[17:27] <sena_kun> patrickb++ ^

[17:27] <patrickb> Thanks :-)

[17:27] <rba> patrickb++

[17:50] *** patrickz joined
[17:53] *** patrickb left
[18:26] *** Altai-man_ joined
[18:27] *** lichtkind joined
[18:28] *** sena_kun left
[18:50] <Geth> Â¦ rakudo: 4bdc9d68db | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[18:50] <Geth> Â¦ rakudo: Further refine so() / not()

[18:50] <Geth> Â¦ rakudo: 

[18:50] <Geth> Â¦ rakudo: Add a candidate for type objects, always returning True / False

[18:50] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4bdc9d68db

[18:57] *** lichtkind left
[19:14] <Geth> Â¦ rakudo: eab75110c1 | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[19:14] <Geth> Â¦ rakudo: Revert "Further refine so() / not()"

[19:14] <Geth> Â¦ rakudo: 

[19:14] <Geth> Â¦ rakudo: This reverts commit 4bdc9d68db8e99fa0bd4e1250339aca2c9408a82.

[19:14] <Geth> Â¦ rakudo: 

[19:14] <Geth> Â¦ rakudo: Turns out one can mixin the enum True into a type object, making it

[19:14] <Geth> Â¦ rakudo: true.  There was no spectest for this for so(), bit there is one for

[19:14] <Geth> Â¦ rakudo: prefix:<so>.  So reverting.

[19:14] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eab75110c1

[19:42] <Geth> Â¦ rakudo: 8a3c36f88e | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[19:42] <Geth> Â¦ rakudo: Add Bool:U candidates for so() / not()

[19:42] <Geth> Â¦ rakudo: 

[19:42] <Geth> Â¦ rakudo: Normally, I wouldn't add this, but since you can wind up with a Bool

[19:42] <Geth> Â¦ rakudo: type object anytime you have a Bool constraint and you don't assign,

[19:42] <Geth> Â¦ rakudo: it felt like a worthwhile addition.

[19:42] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8a3c36f88e

[20:04] <Geth> Â¦ rakudo: 5c93ddacb9 | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[20:04] <Geth> Â¦ rakudo: Prevent a Scalar allocation for each so() not()

[20:04] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5c93ddacb9

[20:26] *** sena_kun joined
[20:28] <Geth> Â¦ rakudo: cb69cfceeb | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[20:28] <Geth> Â¦ rakudo: Use hllbool(istrue) for so() and not() in the end

[20:28] <Geth> Â¦ rakudo: 

[20:28] <Geth> Â¦ rakudo: Turns out that *is* the fastest way to get a Bool for an expression.

[20:28] <Geth> Â¦ rakudo: The ternary case appears to call "identity" according to the profile,

[20:28] <Geth> Â¦ rakudo: whereas the hllbool case does not.  Although this may be an artefact

[20:28] <Geth> Â¦ rakudo: of the profile, it does show that it is doing more for the ternary

[20:28] <Geth> Â¦ rakudo: case, then it is for the hllbool case.

[20:28] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cb69cfceeb

[20:28] *** Altai-man_ left
[20:34] <lizmat> m: class A { method Bool(--> True) { say "foo" } }; use nqp; dd nqp::istrue(A)   # /me is pleasantly surprised

[20:34] <camelia> rakudo-moar cb69cfcee: OUTPUT: Â«fooâ¤1â¤Â»

[20:36] * lizmat goes off to think about that some more

[20:57] <timotimo> lizmat: "identity" is what a return type check often turns into, and should in theory be completely tossed out by spesh, but i think a single "set" instruction remains an between prof_enter and prof_exit

[21:13] <sena_kun> "NMAKE : fatal error U1077:" is not cool, but I'm looking at azure builds right now and this looks VERY helpful.

[21:25] <bartolin_> sena_kun: I've got an idea what might go wrong with the JVM builds for windows. It might be the same problem that caused this workaround: https://github.com/rakudo/rakudo/commit/e22aeafb50

[21:25] <bartolin_> r: my $string = q["C:\\\\Users"]; say Rakudo::Internals::JSON.from-json($string)

[21:25] <camelia> rakudo-moar cb69cfcee: OUTPUT: Â«C:\Usersâ¤Â»

[21:25] <camelia> ..rakudo-jvm 08b449e1a: OUTPUT: Â«Invalid JSON: "C:\\Users"â¤  in block <unit> at <tmp> line 1â¤â¤Â»

[21:26] <bartolin_> well, the JVM build that is used by camelia is from 2018-07 ...

[21:27] <bartolin_> there are more native string arrays in Rakudo::Internals::JSON. Maybe those are causing the trouble.

[21:48] * bartolin_ added his findings to https://github.com/rakudo/rakudo/issues/3695

[21:52] *** ufobat_ joined
[21:56] *** ufobat__ left
[22:11] *** sena_kun left
[22:11] *** maggotbrain left
[22:18] *** patrickz left
[22:37] *** maggotbrain joined
[22:48] *** Kaiepi left
[22:49] *** Kaiepi joined
