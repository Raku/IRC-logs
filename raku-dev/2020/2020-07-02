[00:02] *** sena_kun joined
[00:04] *** Altai-man_ left
[01:07] *** stoned75 joined
[02:01] *** Altai-man_ joined
[02:04] *** sena_kun left
[03:04] *** softmoth joined
[04:02] *** sena_kun joined
[04:04] *** Altai-man_ left
[05:54] *** softmoth left
[06:01] *** Altai-man_ joined
[06:04] *** sena_kun left
[06:25] <nine> timotimo++ # title worked :D

[06:47] <lizmat> https://github.com/Michael-S/raku_trivial_io_benchmark

[06:48] <lizmat> looks like 25+% is spent in Mu.new, the prototype, with bootstrap's find_best_dispatchee taking about 8%

[06:48] <lizmat> also, Mu.new stays red in the profile

[06:48] <lizmat> I wonder what's going on here

[06:50] <lizmat> looks like buf8.new is causing this

[06:51] <lizmat> try profiling buf8.new for ^1000000

[06:56] <lizmat> m: use nqp; dd nqp::create(buf8)

[06:56] <camelia> rakudo-moar 9f546ef6f: OUTPUT: «You cannot create an instance of this type ()␤  in block <unit> at <tmp> line 1␤␤»

[06:56] <lizmat> que?

[06:57] <lizmat> m: use nqp; dd nqp::create(buf8.^pun)

[06:57] <camelia> rakudo-moar 9f546ef6f: OUTPUT: «Buf[uint8].new()␤»

[06:58] *** JJMerelo joined
[07:30] <Geth> ¦ rakudo: 2946ed6423 | (Elizabeth Mattijsen)++ | src/core.c/IO/Handle.pm6

[07:30] <Geth> ¦ rakudo: Make IO::Handle.read(1) about 3x as fast

[07:30] <Geth> ¦ rakudo: 

[07:30] <Geth> ¦ rakudo: Inspired by https://github.com/Michael-S/raku_trivial_io_benchmark .

[07:30] <Geth> ¦ rakudo: 

[07:30] <Geth> ¦ rakudo: Turned out that `buf8.new` for some reason is *not* getting optimized

[07:30] <Geth> ¦ rakudo: *at all*.  Replaced occurrences of `buf8.new` in IO::Handle with

[07:30] <Geth> ¦ rakudo: `nqp::create(buf8.^pun)`, and this makes everything optimize nicely.

[07:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2946ed6423

[08:00] <Geth> ¦ rakudo: 252b9349c0 | (Elizabeth Mattijsen)++ | src/core.c/IO/Handle.pm6

[08:00] <Geth> ¦ rakudo: Bypass .READ abstraction if we can

[08:00] <Geth> ¦ rakudo: 

[08:00] <Geth> ¦ rakudo: If the object is a real, unadulterated IO::Handl, we can bypass the

[08:00] <Geth> ¦ rakudo: .READ abstraction layers.  Makes IO::Handle.read(1) about 15% faster

[08:01] <Geth> ¦ rakudo: and much more memory friendly.

[08:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/252b9349c0

[08:03] *** sena_kun joined
[08:04] *** Altai-man_ left
[08:26] <Geth> ¦ rakudo: ed936c1435 | (Elizabeth Mattijsen)++ | 7 files

[08:26] <Geth> ¦ rakudo: Apply the same buf8.new change to the rest of the core

[08:26] <Geth> ¦ rakudo: 

[08:26] <Geth> ¦ rakudo: Not sure how much of this will be noticeable, but it will definitely

[08:26] <Geth> ¦ rakudo: help a little bit. And every little bit helps.

[08:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ed936c1435

[08:30] <Geth> ¦ rakudo/match-refactor: 28 commits pushed by (Elizabeth Mattijsen)++

[08:30] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/compare/f9701dc10f3d...e7b94b55ab84

[08:54] *** JJMerelo left
[08:55] <[Tux]> Rakudo version 2020.06-10-g9f546ef6f - MoarVM version 2020.06-14-g5832b2628

[08:55] <[Tux]> csv-test-xs-20      0.394 -  0.406

[08:55] <[Tux]> test-t --race       0.878 -  0.901

[08:55] <[Tux]> csv-ip5xs           0.880 -  0.909

[08:55] <[Tux]> test-t              1.990 -  2.096

[08:55] <[Tux]> test                8.321 -  9.125

[08:55] <[Tux]> csv-ip5xs-20        8.388 -  8.400

[08:55] <[Tux]> test-t-20 --race    9.594 - 10.803

[08:55] <[Tux]> csv-parser         25.098 - 29.500

[08:55] <[Tux]> test-t-20          35.505 - 37.587

[09:08] *** [Tux] joined
[09:08] <Geth> ¦ rakudo/match-refactor: 5a7cd41a07 | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[09:08] <Geth> ¦ rakudo/match-refactor: Repurpose $!match flag as capture hash storage location

[09:08] <Geth> ¦ rakudo/match-refactor: 

[09:08] <Geth> ¦ rakudo/match-refactor: - lose one attribute for each Cursor/Match object

[09:08] <Geth> ¦ rakudo/match-refactor: - if the cursor resets $!match, that's fine, will cause re-vivification

[09:08] <Geth> ¦ rakudo/match-refactor: - is nqp::ishash($!match) is true, it has captures in it

[09:08] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/5a7cd41a07

[09:21] <jnthn> lizmat: Looking at ed936c1435, I think new-disp will allow us to do better on dispatch to a pun generally :)

[09:22] <lizmat> I hope so too

[09:22] <jnthn> So we'll be able to make all userspace code doing the same thing faster also (and revert this uglification)

[09:22] <jnthn> I'd actually thought of it before now, and wondered if it'd be worth it. Guess now I know the answer... :)

[09:22] <lizmat> yeah  :-)

[09:23] <jnthn> Also, even without that, I think it's poorly optimized 'cus of flattening happening in the punning process

[09:23] <jnthn> And that suppressing specialization

[09:23] <jnthn> Which is also not a problem in new-disp

[09:23] <lizmat> looking forward to reverting these commits (except maybe 252b9349c0

[09:23] <linkable6> (2020-07-02) https://github.com/rakudo/rakudo/commit/252b9349c0 Bypass .READ abstraction if we can

[09:23] <jnthn> (Because now we pre-flatten)

[09:24] <lizmat> I wonder if making a single buf8.^pun and cloning off of it, would even be faster ?

[09:24] <jnthn> We *do* make a single one; it's cached in the meta-object

[09:25] <lizmat> yeah, but the ^pun call takes about 1% in the profile of that benchmark now  :-)

[09:25] <jnthn> Well, there's the initial cost of making the pun

[09:25] <lizmat> actually 2.3%

[09:25] <jnthn> And it'll be spread over the rest of the calls, which just check if we have one and return it if so

[09:26] <lizmat> yeah, but that'd be a hash lookup, no?

[09:26] <jnthn> I thought it was just an attribute?

[09:26] <jnthn> $!pun or some such

[09:26] <lizmat> ah, ok, cached in that way :-)

[09:26] <jnthn> Anyway, in new-disp we could cache the pun in the dispatch program and just have it rewrite the arg list.

[09:27] <lizmat> ok, won't touch this anymore then :-)

[09:27] <jnthn> Which is quite neat :)

[09:27] <jnthn> Anyways, today is for RakuAST... :)

[09:30] *** lichtkind joined
[10:02] *** Altai-man_ joined
[10:04] *** sena_kun left
[10:13] *** travis-ci joined
[10:13] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Apply the same buf8.new change to the rest of the core

[10:13] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/704237236 https://github.com/rakudo/rakudo/compare/252b9349c0af...ed936c1435d6

[10:13] *** travis-ci left
[10:26] <lizmat> t/01-sanity/55-use-trace.t   fails, cannot reproduce it myself

[10:38] <Altai-man_> >push_o requires a concrete object (got a ThreadPoolScheduler::Queue type object instead)

[10:38] <Altai-man_> Sounds like a bug. :S

[10:38] <lizmat> Altai-man_: how did you get that ?

[10:39] <Altai-man_> lizmat, copied from travis log?

[10:39] <lizmat> ah, ok, I thought you could repro

[10:40] <jnthn> Hm, from the messages, could it be a race in thread pool setup somehow?

[10:41] <lizmat> a rare one then, but yes

[10:41] <Altai-man_> Sounds like something of this level.

[10:41] <Altai-man_> If it's rare it doesn't mean there is no bug.

[11:02] *** squashable6 joined
[11:03] <jnthn> Uff, quotewords are tricky...

[11:03] <jnthn> Might put those off a bit :)

[11:10] <Geth> ¦ rakudo/rakuast: e1d5734fa2 | (Jonathan Worthington)++ | 4 files

[11:10] <Geth> ¦ rakudo/rakuast: Implement most of post-processing string options

[11:10] <Geth> ¦ rakudo/rakuast: 

[11:10] <Geth> ¦ rakudo/rakuast: The exception being quotewords, which we can compile into a RakuAST

[11:10] <Geth> ¦ rakudo/rakuast: tree, but it doesn't yet know how to compile it to QAST. Also, some of

[11:10] <Geth> ¦ rakudo/rakuast: the optimizations are still to come. This is plenty to get us through

[11:10] <Geth> ¦ rakudo/rakuast: the 08-var-array.t sanity test, however.

[11:10] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/e1d5734fa2

[11:10] <jnthn> Right, lunch, bbiab

[11:26] * lizmat is confused by:

[11:26] <lizmat> Unhandled exception: P6opaque: invalid native bind to attribute '$!pos' in type Match for kind int64

[11:27] <lizmat> apparently I should use a nqp::bindattr instead of an nqp::bindattr_i ?

[11:33] <Altai-man_> lizmat, https://gist.github.com/Altai-man/cecc36d546ce940927fd53bfc4e5806f <- blin

[11:33] <lizmat> Altai-man_++

[11:38] <Geth> ¦ nqp: 4a62559a68 | (Elizabeth Mattijsen)++ | src/QRegex/Cursor.nqp

[11:38] <Geth> ¦ nqp: Introduce / use !cursor_pass_quick

[11:38] <Geth> ¦ nqp: 

[11:38] <Geth> ¦ nqp: - strip out unnecessary functinality

[11:38] <Geth> ¦ nqp: - use where appropriate

[11:39] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/4a62559a68

[11:51] <Geth> ¦ rakudo: 6536f8018b | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[11:51] <Geth> ¦ rakudo: Bump NQP to get the cursor_pass_quick optimization

[11:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6536f8018b

[11:57] <Geth> ¦ nqp: db0c1088fc | (Elizabeth Mattijsen)++ | src/QRegex/Cursor.nqp

[11:57] <Geth> ¦ nqp: Make sure cursor_pass_quick also reset bstack

[11:57] <Geth> ¦ nqp: 

[11:57] <Geth> ¦ nqp: Forgot to add that.  Was not picked up by any test in NQP or in

[11:57] <Geth> ¦ nqp: Rakudo :-(  Not sure how to invoke that situation.

[11:57] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/db0c1088fc

[12:02] <jnthn> lizmat: I don't think it results in wrong behavior, it just increases memory usage.

[12:02] <jnthn> So I'd not expect a spectest regression out of forgetting to clear bstack

[12:03] *** sena_kun joined
[12:03] <lizmat> but how much extra memory are we talking about then?  just for the duration of the parse, I'd hope ?

[12:04] *** Altai-man_ left
[12:04] <jnthn> For the duration of the parse, yes, but if you're parsing a lot and hold on to an extra array that you don't need to for every cursor, it could add up

[12:05] <jnthn> Though the secondary effects are also important here

[12:05] <jnthn> Longer lifetime = promotion to gen2, where it will also hang around for rather longer

[12:05] <lizmat> right, that would match my mental image  :-)

[12:07] <Geth> ¦ rakudo: 682a79646b | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[12:07] <Geth> ¦ rakudo: Bump NQP again to get proper cursor_pass_quick

[12:07] <Geth> ¦ rakudo: 

[12:07] <Geth> ¦ rakudo: One that resets bstack when it can.

[12:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/682a79646b

[12:10] * jnthn decides to get back to package scoping, and to do the remaining quote language bits of RakuAST later

[12:10] <jnthn> Currently left with 11 failing sanity tests

[12:12] <jnthn> Though it turns out that Test.rakumod has evolved quite a bit from the days when "we pass sanity tests" was enough to compile it :)

[12:21] <Geth> ¦ rakudo/match-refactor: 30 commits pushed by (Elizabeth Mattijsen)++

[12:21] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/compare/5a7cd41a0754...8b66585d6eb5

[12:27] <lizmat> hmmm... looks like the check for $!bstack is wrong: looks like it is defined just about always, as in an empty BOOTIntArray ?   

[12:27] <lizmat> jnthn ^^

[12:30] <lizmat> perhaps it should check if it has any elements ?

[12:31] <lizmat> even a regex such as /a/ sets up a bstack of (1,0,0,0)

[12:33] <jnthn> There will always be one, I think

[12:33] <jnthn> Unless it's a cursor created by a built-in or something

[12:34] <jnthn> Which check do you mean, though?

[12:35] <jnthn> I mean, you're just nulling it in !cursor_pass_quick, which looks right to me

[12:40] <lizmat> the check in MATCH

[12:40] <lizmat> MATCH-CAPTURES actually

[12:41] <lizmat> https://github.com/rakudo/rakudo/blob/master/src/core.c/Match.pm6#L142

[12:42] <lizmat> so, even on a simple regex such as:

[12:43] <lizmat>  /a/, the bstack will never be not defined, and thus the cstack and regexsub are being kept around

[12:45] <jnthn> Hm, that's now how I read it

[12:45] <jnthn> unless we have a bstack, null cstack and regexsub

[12:45] <jnthn> nqp::defined could be read nqp::isconcrete

[12:45] <jnthn> Which is false for null

[12:46] <lizmat> I wonder if the cursor_pass logic should do a nqp::setelems($!bstack,0)

[12:46] <lizmat> instead of binding it to nqp::null

[12:46] <jnthn> No

[12:46] <jnthn> That is much worse

[12:47] <jnthn> It doesn't free any memory at all

[12:47] <jnthn> s/now/not/ above

[12:47] <jnthn> It looks correct to me

[12:47] <lizmat> if the bstack is *empty*, is it then safe to reset cstack and regexsub ?

[12:47] <jnthn> Perhaps not

[12:49] <jnthn> The logic is: if we threw away the bstack, we know we'll never backtrack into the cursor, so we can also throw away the cstack and regexsub

[12:49] <jnthn> If there's a bstack still in place, it was backtrackable, so we should leave the other things in place too, so that backtracking into it would work out

[12:50] <lizmat> but why then is there still a $!bstack in the Match object for /a/ ?   After it's done matching ?

[12:51] <lizmat> and a $!cstack and $!regexsub by consequence ?

[12:51] <jnthn> Because a /.../ form of regex is backtrackable

[12:51] <jnthn> Granted in this case it's not going to produce anything more if we try

[12:51] <lizmat> but a /a/ isn't ?

[12:52] <jnthn> No, but we don't analyze it down to that level

[12:52] *** travis-ci joined
[12:52] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Bump NQP to get the cursor_pass_quick optimization'

[12:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/704286987 https://github.com/rakudo/rakudo/compare/ed936c1435d6...6536f8018b2b

[12:52] *** travis-ci left
[12:52] <lizmat> ah, but again, that's because we've conflated Cursor and Match  :-(

[12:52] <jnthn> rx:r/a/ would know it can throw away the bstack

[12:53] <jnthn> It ain't, it's because the decision is based on whether the thing being compiled as :r set on it overall, iirc.

[12:53] <jnthn> Thus token and rule will always throw it away

[12:53] <jnthn> Presumably rx:r/.../ also would

[12:54] <lizmat> Pro Tip: make your matches less memory hungry by adding rx:r ?

[12:54] <jnthn> Uh, maybe, but how long do you expect to keep the match object around for a simple regex like /a/ ? :)

[12:55] <lizmat> well, your concern about filling up the nursery, basically

[12:55] <jnthn> No more than the lifetime of the enclosing routine

[12:55] <jnthn> That said, I expect that we'll at some point start compiling things as simple as /a/ a bit differently, so they don't pay the whole regex engine setup

[12:55] <jnthn> Along with various other "easy" cases that have no backtracing

[12:56] <lizmat> ack

[12:56] <lizmat> brb

[12:56] <jnthn> (It's not worth doing that now, though, given the compiler frontend is currently being reworked.)

[12:56] <jnthn> (And I think it will be easier and cheaper to do these in the RakuAST one.)

[12:59] *** AlexDani` left
[13:10] <nine> I get that "push_o requires a concrete object" quite frequently on the OBS and mentioned it on the channel a few times already...

[13:13] <timotimo> and now you've found what causes it? :)

[13:20] <nine> if only :)

[13:25] <Geth> ¦ rakudo/match-refactor: ce59121c0e | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[13:25] <Geth> ¦ rakudo/match-refactor: Add in cstack / regexsub clearing again

[13:25] <Geth> ¦ rakudo/match-refactor: 

[13:25] <Geth> ¦ rakudo/match-refactor: - seems only to occur with ratchet operations

[13:25] <Geth> ¦ rakudo/match-refactor: - according to jnthn, an optimization still worth having

[13:25] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/ce59121c0e

[13:27] <timotimo> nine: does the error message give you enough information or could something be added?

[13:28] <lizmat> afk for a few hours&

[13:39] *** travis-ci joined
[13:39] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Bump NQP again to get proper cursor_pass_quick

[13:39] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/704290727 https://github.com/rakudo/rakudo/compare/6536f8018b2b...682a79646baf

[13:39] *** travis-ci left
[13:51] <nine> timotimo: I think --ll-exception would help the most. And after thinking about this for 10 times or so, I've finally done it for all modules in https://build.opensuse.org/project/show/home:niner9:rakudo-git

[13:51] <timotimo> probably a good idea %)

[13:51] <nine> And discovered that I can actually do a single commit from the project directory that covers all individual packages, so I don't even have to commit them individually. Very nice

[14:01] *** Altai-man_ joined
[14:04] *** sena_kun left
[14:20] *** stoned75 left
[14:21] <moritz> reminds me of the good[cough] old days of SVN

[14:21] *** stoned75 joined
[14:27] <timotimo> or git superrepo (omnirepo?)

[14:45] *** AlexDani` joined
[14:45] *** AlexDani` is now known as AlexDaniel

[14:46] *** AlexDaniel left
[14:46] *** AlexDaniel joined
[15:09] *** dogbert17 left
[15:10] *** Kaeipi joined
[15:10] *** patrickb joined
[15:11] <Geth> ¦ rakudo/rakuast: 48e7886ade | (Jonathan Worthington)++ | src/Raku/ast/base.rakumod

[15:11] <Geth> ¦ rakudo/rakuast: Fix a thinko in check

[15:11] <Geth> ¦ rakudo/rakuast: 

[15:11] <Geth> ¦ rakudo/rakuast: It failed to pass along the resolve-only flag correctly.

[15:11] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/48e7886ade

[15:11] <Geth> ¦ rakudo/rakuast: 2c61bd3dde | (Jonathan Worthington)++ | 2 files

[15:11] <Geth> ¦ rakudo/rakuast: Fix implicit declarations handling

[15:11] <Geth> ¦ rakudo/rakuast: 

[15:11] <Geth> ¦ rakudo/rakuast: We need a non-strict `visit` as well as a strict one to cover the

[15:11] <Geth> ¦ rakudo/rakuast: various use cases we have. Also, unwrap a list.

[15:11] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/2c61bd3dde

[15:11] <Geth> ¦ rakudo/rakuast: c36baf5911 | (Jonathan Worthington)++ | 2 files

[15:11] <Geth> ¦ rakudo/rakuast: Be consistent about RakuAST::CompileTimeValue

[15:11] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/c36baf5911

[15:14] *** [Coke]_ joined
[15:14] *** [Coke]_ left
[15:14] *** [Coke]_ joined
[15:14] *** dogbert17 joined
[15:14] <Geth> ¦ rakudo/rakuast: 0045d95ca6 | (Jonathan Worthington)++ | 5 files

[15:14] <Geth> ¦ rakudo/rakuast: RakuAST setup of GLOBAL and unit $?PACKAGE

[15:14] <Geth> ¦ rakudo/rakuast: 

[15:14] <Geth> ¦ rakudo/rakuast: Which means we're now able to have working `our`-scoped variables in a

[15:14] <Geth> ¦ rakudo/rakuast: non-EVAL context, at least via the AST.

[15:14] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/0045d95ca6

[15:14] <Geth> ¦ rakudo/rakuast: 86776ae769 | (Jonathan Worthington)++ | 3 files

[15:14] <Geth> ¦ rakudo/rakuast: Do GLOBAL setup in RakuAST-based compiler

[15:14] <Geth> ¦ rakudo/rakuast: 

[15:14] <Geth> ¦ rakudo/rakuast: Plus prepare the way for some other implicitly declared things.

[15:14] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/86776ae769

[15:14] <jnthn> Phew.

[15:15] *** tyilanmenyn joined
[15:15] <jnthn> Almost passing 05-var.t, but seems there's a silly bug to find yet

[15:15] *** tyil left
[15:16] <jnthn> Ah yes, apparently with statement level block marking

[15:33] <patrickb> nine: Did you see my question here? https://github.com/Raku/problem-solving/issues/206#issuecomment-650794395

[15:45] <Geth> ¦ rakudo/rakuast: bd6c39d6d3 | (Jonathan Worthington)++ | 2 files

[15:45] <Geth> ¦ rakudo/rakuast: Fill out some more sink/statement marking

[15:45] <Geth> ¦ rakudo/rakuast: 

[15:45] <Geth> ¦ rakudo/rakuast: Which was why we failed to execute one of the tests in 08-var.t, which

[15:45] <Geth> ¦ rakudo/rakuast: now fully passes.

[15:45] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/bd6c39d6d3

[15:49] *** nebuchadnezzar joined
[15:56] <jnthn> So...what next... :)

[16:03] *** sena_kun joined
[16:04] *** Altai-man_ left
[16:12] *** tyilanmenyn is now known as tyil

[17:10] *** softmoth joined
[17:21] <Geth> ¦ problem-solving: landyacht assigned to jnthn Issue Exponentiation with Rat or FatRat exponent results in Num https://github.com/Raku/problem-solving/issues/209

[17:30] <Geth> ¦ problem-solving: lizmat unassigned from jnthn Issue Exponentiation with Rat or FatRat exponent results in Num https://github.com/Raku/problem-solving/issues/209

[17:37] *** patrickb left
[17:40] *** patrickb joined
[17:45] <Geth> ¦ rakudo/rakuast: 90ef16e28e | (Jonathan Worthington)++ | 6 files

[17:45] <Geth> ¦ rakudo/rakuast: Foundations for supporting methods (and more)

[17:45] <Geth> ¦ rakudo/rakuast: 

[17:45] <Geth> ¦ rakudo/rakuast: We want to be able to express RakuAST much like a document - that is to

[17:45] <Geth> ¦ rakudo/rakuast: say, a class has methods within it. However, these are not directly held

[17:45] <Geth> ¦ rakudo/rakuast: (and need not be directly held). Thus there's a need to have them

[17:45] <Geth> ¦ rakudo/rakuast: attached to the appropriate package node ahead of the point we go making

[17:45] <Geth> ¦ rakudo/rakuast: the meta-object. A related problem is placeholder parameters, which can

[17:45] <Geth> ¦ rakudo/rakuast: <…commit message has 13 more lines…>

[17:45] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/90ef16e28e

[17:50] <lizmat> "(The current compiler is broken in this regard, and can go wrong when a

[17:50] <lizmat> natively typed attribute comes from a role.)"

[17:50] <lizmat> Whee!

[18:01] *** Altai-man_ joined
[18:04] <Geth> ¦ rakudo/match-refactor: 8d10035517 | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[18:04] <Geth> ¦ rakudo/match-refactor: Make sure that .hash returns a Map, rather than a Hash

[18:04] <Geth> ¦ rakudo/match-refactor: 

[18:04] <Geth> ¦ rakudo/match-refactor: This unbreaks Data::Dump, which is expecting .hash to return a Map

[18:04] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/8d10035517

[18:05] *** sena_kun left
[18:56] *** Merfont joined
[18:57] *** Kaeipi left
[19:29] *** MasterDuke joined
[19:29] <MasterDuke> timotimo: i think monorepo is the usual term

[19:30] *** [Coke]_ is now known as [Coke]

[19:39] <lizmat> ok, I believe the final breakage of the match-refactor branch is somehow related of how s/foo/bar/ is codegenned

[19:41] <lizmat> what is the reason again that this isn't codegenned as a call to .subst?  or have it call a special method that does the matching as well ?

[19:51] <dogbert17> lizmat: perl6-grammar-prettyerrors fails on both master and your branch so its problems are doesn't seem connected to your branch

[19:51] <tellable6> 2020-06-29T13:28:21Z #raku-dev <tbrowder> dogbert17: thnx

[19:52] <dogbert17> s/are//

[19:59] <lizmat> dogbert17: thanks for the headsup

[20:00] <dogbert17> I just wanted to check that the commit blin is complaining about wasn't mistakenly commited to master instead of your branch :)

[20:02] *** sena_kun joined
[20:03] <lizmat> dogbert17: could you check that reverting https://github.com/rakudo/rakudo/commit/0144905fb0e1de372ffbf6c8a01d3efe14cd22b0 would solve it ?

[20:03] <dogbert17> sure

[20:05] *** Altai-man_ left
[20:16] <dogbert17> lizmat: I must have messed something up, it does work on master

[20:17] <lizmat> interesting

[20:18] <dogbert17> yes, I'm a bit confused now

[20:18] <dogbert17> I mean if it works why does blin point at a commit which is in master

[20:18] <lizmat> i haz no idea

[20:21] * dogbert17 tinkers ...

[20:26] <dogbert17> lizmat: I seems to me that https://github.com/rakudo/rakudo/commit/0144905fb0e1de372ffbf6c8a01d3efe14cd22b0 is indeed the culprit.

[20:27] <dogbert17> unless my install is totally busted

[20:27] <lizmat> then I shall revert it and double check

[20:32] <lizmat> confirm revert fixes it

[20:32] <dogbert17> cool

[20:42] <Geth> ¦ rakudo/rakuast: cd90d3b5e5 | (Jonathan Worthington)++ | 7 files

[20:42] <Geth> ¦ rakudo/rakuast: Foundations for supporting methods (and more)

[20:42] <Geth> ¦ rakudo/rakuast: 

[20:42] <Geth> ¦ rakudo/rakuast: We want to be able to express RakuAST much like a document - that is to

[20:42] <Geth> ¦ rakudo/rakuast: say, a class has methods within it. However, these are not directly held

[20:42] <Geth> ¦ rakudo/rakuast: (and need not be directly held). Thus there's a need to have them

[20:42] <Geth> ¦ rakudo/rakuast: attached to the appropriate package node ahead of the point we go making

[20:42] <Geth> ¦ rakudo/rakuast: the meta-object. A related problem is placeholder parameters, which can

[20:42] <Geth> ¦ rakudo/rakuast: <…commit message has 13 more lines…>

[20:42] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/cd90d3b5e5

[20:46] <jnthn> (an amend 'cus I forgot a file, probably 'cus I was rushing off to cook dinner... :))

[20:51] <Geth> ¦ rakudo: c7c18c2141 | (Elizabeth Mattijsen)++ | src/core.c/Grammar.pm6

[20:51] <Geth> ¦ rakudo: Revert "Give Grammar its own .new"

[20:51] <Geth> ¦ rakudo: 

[20:51] <Geth> ¦ rakudo: This reverts commit 0144905fb0e1de372ffbf6c8a01d3efe14cd22b0.

[20:51] <Geth> ¦ rakudo: 

[20:51] <Geth> ¦ rakudo: This seems to cause more issues than it is fixing.

[20:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c7c18c2141

[20:55] <lizmat> dogbert17: Grammar::PrettyError still borked on the match-refactor branch

[20:57] <lizmat> but differently

[21:00] *** MasterDuke left
[21:25] <dogbert17> lizmat: interesting

[21:26] <dogbert17> I believe that DOM::Tiny also has problems

[21:26] <lizmat> ok, looks like the revert is related to what I'm seeing now

[21:27] <lizmat> looks like a grammar with its own attributes *and* defaults, is not getting its attributes default values set

[21:27] <lizmat> I will mull over that tonight, and look again with a fresh mind tomorrow

[21:27] <lizmat> sleep&

[21:27] <dogbert17> sounds like a plan

[21:28] <lizmat> :-)

[21:56] *** lichtkind left
[21:57] *** [Coke] left
[22:01] *** Altai-man_ joined
[22:05] *** sena_kun left
[22:34] *** [Coke] joined
[22:34] *** [Coke] left
[22:34] *** [Coke] joined
[22:37] *** squashable6 left
[22:41] *** squashable6 joined
[23:12] *** patrickb left
[23:30] *** AlexDaniel left
[23:51] *** AlexDaniel joined
[23:51] *** AlexDaniel left
[23:51] *** AlexDaniel joined
