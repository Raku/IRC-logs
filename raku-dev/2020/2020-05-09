[00:16] *** Altai-man_ joined
[00:18] *** sena_kun left
[02:16] *** sena_kun joined
[02:18] *** Altai-man_ left
[02:38] *** pamplemousse joined
[02:38] *** pamplemousse left
[04:07] *** hungrydonkey joined
[04:15] *** hungrydonkey left
[04:16] *** Altai-man_ joined
[04:18] *** sena_kun left
[04:22] *** hungrydonkey joined
[04:32] *** hungrydonkey left
[04:38] *** hungrydonkey joined
[04:54] *** hungrydonkey left
[06:16] *** sena_kun joined
[06:18] *** Altai-man_ left
[08:06] *** travis-ci joined
[08:06] *** travis-ci left
[08:08] <[Tux]> Rakudo version 2020.05-53-g46648b9b3 - MoarVM version 2020.05-8-ga48790029

[08:08] <[Tux]> csv-test-xs-20      0.387 -  0.404

[08:08] <[Tux]> csv-ip5xs           0.829 -  0.886

[08:08] <[Tux]> test-t --race       0.944 -  1.063

[08:08] <[Tux]> test-t              1.941 -  2.009

[08:08] <[Tux]> test                7.292 -  7.329

[08:08] <[Tux]> csv-ip5xs-20        8.426 -  8.868

[08:08] <[Tux]> test-t-20 --race    9.194 -  9.773

[08:08] <[Tux]> csv-parser         24.998 - 26.538

[08:08] <[Tux]> test-t-20          31.263 - 33.516

[08:09] <MasterDuke> [Tux]: do you have inline:perl5 numbers without xs?

[08:15] *** Altai-man_ joined
[08:18] *** sena_kun left
[08:27] *** travis-ci joined
[08:27] <travis-ci> Rakudo build failed. tonyo 'overflow the log cap..'

[08:27] <travis-ci> https://travis-ci.com/sumanstats/raku/builds/164874635 https://github.com/sumanstats/raku/compare/dbe1fdaddada^...60f708738002

[08:27] *** travis-ci left
[08:47] <Geth> ¦ rakudo: MasterDuke17++ created pull request #3677: Symbol lookup optimization

[08:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3677

[08:47] <MasterDuke> would definitely appreciate any thoughts/comments about ^^^

[09:37] * lizmat had 2 comments

[09:42] <lizmat> Files=1306, Tests=111275, 212 wallclock secs (28.85 usr  8.02 sys + 2992.90 cusr 269.33 csys = 3299.10 CPU)

[10:16] *** sena_kun joined
[10:18] *** Altai-man_ left
[10:22] *** hungrydonkey joined
[10:23] <AlexDaniel> timotimo: btw that last graph is just libreoffice xD https://github.com/rakudo/rakudo/issues/3674

[11:30] *** hungrydonkey left
[11:30] <timotimo> AlexDaniel: deception! dishonour!

[11:31] <AlexDaniel> x)

[11:33] <[Tux]> MasterDuke, «curl -q https://tux.nl/Talks/CSV6/speed-all.log | grep ip5pp»

[11:39] *** MasterDuke left
[12:03] *** MasterDuke joined
[12:16] *** Altai-man_ joined
[12:17] *** hungrydonkey joined
[12:18] *** sena_kun left
[13:41] *** andreoss joined
[13:53] *** hungrydonkey left
[14:01] <Geth> ¦ rakudo: 649ef2385f | (Elizabeth Mattijsen)++ | 2 files

[14:01] <Geth> ¦ rakudo: Give Mu.say the same setup as Mu.print and friends

[14:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/649ef2385f

[14:16] *** sena_kun joined
[14:17] <lizmat> m: dd $*OUT.say( 1|2|3 )    # this feels inconsistent with

[14:17] <camelia> rakudo-moar 649ef2385: OUTPUT: «any(1, 2, 3)␤Bool::True␤»

[14:17] <lizmat> m: dd $*OUT.print( 1|2|3 )    # this feels inconsistent with

[14:17] <camelia> rakudo-moar 649ef2385: OUTPUT: «1any(Bool::True, Bool::True, Bool::True)␤23»

[14:18] <lizmat> m: dd $*OUT.put( 1|2|3 )

[14:18] *** Altai-man_ left
[14:18] <camelia> rakudo-moar 649ef2385: OUTPUT: «1␤any(Bool::True, Bool::True, Bool::True)␤2␤3␤»

[14:28] <timotimo> hm. say is meant to give the human-friendly version, right?

[14:28] <timotimo> feels at least somewhat justifiable

[14:44] <Geth> ¦ rakudo: 7a902b5e45 | (Elizabeth Mattijsen)++ | src/core.c/IO/Handle.pm6

[14:44] <Geth> ¦ rakudo: Normalizing IO::Handle.say/put/print/note, part #1

[14:44] <Geth> ¦ rakudo: 

[14:44] <Geth> ¦ rakudo: Give IO::Handle.say the proper set of candidates.

[14:44] <Geth> ¦ rakudo: - add a candidate for no parameters

[14:44] <Geth> ¦ rakudo: - streamline the multi argument case (fewer allocations, slightly faster)

[14:44] <Geth> ¦ rakudo: - do *not* add a candidate for Junctions (yet)

[14:44] <Geth> ¦ rakudo:   normalizing appears to be another issue altogether

[14:44] <linkable6> RAKUDO#1 [closed]: https://github.com/rakudo/rakudo/issues/1 cc1: error: unrecognized command line option "-Wjump-missed-init"

[14:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7a902b5e45

[14:45] <lizmat> what triggered linkable6 ?

[14:45] <lizmat> ah, #1

[14:48] <AlexDaniel> lizmat: linkable6 is right in this case, even github highlights it the same way

[14:48] <lizmat> yeah, figured  :-)

[15:43] *** jjmerelo joined
[16:06] *** jjmerelo left
[16:07] *** jjmerelo joined
[16:16] *** Altai-man_ joined
[16:19] *** sena_kun left
[18:00] *** jjmerelo left
[18:16] *** sena_kun joined
[18:18] *** Altai-man_ left
[18:22] *** El_Che joined
[18:23] <El_Che> .tell patricb thanks for the heads-up. Weirdly enough my relocatable tar.gz for linux does not seem to be broken.

[18:23] <tellable6> El_Che, I haven't seen patricb around, did you mean patrickb?

[18:23] <El_Che> .tell patrickb thanks for the heads-up. Weirdly enough my relocatable tar.gz for linux does not seem to be broken.

[18:23] <tellable6> El_Che, I'll pass your message to patrickb

[18:23] <El_Che> .tell patrickb: ~/Downloads/rakudo-2020.05/bin$ ./raku -v\nThis is Rakudo version 2020.05 built on MoarVM version 2020.05\nimplementing Raku 6.d.

[18:23] <tellable6> El_Che, I'll pass your message to patrickb

[18:27] <El_Che> .tell patrickb Oh, I found the github issue for the Windows problem. You're right, NativeCall seems broken on Linux too

[18:27] <tellable6> El_Che, I'll pass your message to patrickb

[18:27] <El_Che> (sorry for the noise)

[20:10] <timotimo> today: step through a moarvm coverage log with vim's quickfix window

[20:16] *** Altai-man_ joined
[20:18] *** sena_kun left
[20:43] *** andreoss left
[22:16] *** sena_kun joined
[22:18] *** Altai-man_ left
[22:30] *** sena_kun left
[23:28] *** pippo joined
[23:31] <pippo> Hello. I sarted the REPLand run the below code. First time I run it I got around 8 second time (without leaveing the REPL) around 16s. Someone knows why? Here is the code: $NOW=now; for ^1_000_000 { 'qq;qqqq;qqqqq;qqqqqqqqqqqq;qqq'.comb(/<-[\;]>*/); }; say now - $NOW

[23:31] <tellable6> 2015-03-26T00:39:51Z #perl6 <flussence> pippo_: «perl6 --target=ast -e '/<[ab]>+/; /[a|b]+/' | grep QAST::Regex» explains that difference well; the [a|b] case creates slightly more code to run.

[23:34] <pippo> Hello. I sarted the REPL and run the below code. First time I run it I got around 8 seconds and second time (without leaving the REPL) around 16s. Someone knows why? Here is the code: $NOW=now; for ^1_000_000 { 'qq;qqqq;qqqqq;qqqqqqqqqqqq;qqq'.comb(/<-[\;]>*/); }; say now - $NOW

[23:36] <pippo> p6: my $NOW=now; for ^1_000_000 { 'qq;qqqq;qqqqq;qqqqqqqqqqqq;qqq'.comb(/<-[\;]>*/); }; say now - $NOW; $NOW=now; for ^1_000_000 { 'qq;qqqq;qqqqq;qqqqqqqqqqqq;qqq'.comb(/<-[\;]>*/); }; say now - $NOW;

[23:36] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «(timeout)»

[23:37] <pippo> p6: my $NOW=now; for ^100_000 { 'qq;qqqq;qqqqq;qqqqqqqqqqqq;qqq'.comb(/<-[\;]>*/); }; say now - $NOW; $NOW=now; for ^100_000 { 'qq;qqqq;qqqqq;qqqqqqqqqqqq;qqq'.comb(/<-[\;]>*/); }; say now - $NOW;

[23:37] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «4.0147717␤6.6267569␤»

[23:38] <pippo> ^^That is a noticeable difference...

[23:40] <jnthn> Don't know about the REPL one; the second is due to how the OSR (On Stack Replacement) optimization works out

[23:41] <jnthn> It sees there's a hot loop and decides to optimize, however it is lacking any statistics for the second loop body, which didn't run yet, so makes a less got job of it than the first one, where it has a bunch of data.

[23:41] <jnthn> *less good

[23:43] <jnthn> (It optimizes at the level of a lexical scope, so goes for the entire unit of the program, since that's where the loop is.)

[23:46] <pippo> Thank you jnthn that's too complicated for me. But I understand that the way it is supposed to work. 

[23:48] <pippo> p6: my $NOW; for ^2 {$NOW=now; for ^100_000 { 'qq;qqqq;qqqqq;qqqqqqqqqqqq;qqq'.comb(/<-[\;]>*/); }; say now - $NOW; }

[23:48] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «3.8940816␤3.8369512␤»

[23:51] <pippo> o/

[23:51] *** pippo left
