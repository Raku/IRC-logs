[00:37] *** releasable6 left
[00:37] *** bisectable6 left
[00:37] *** nativecallable6 left
[00:37] *** quotable6 left
[00:37] *** evalable6 left
[00:37] *** sourceable6 left
[00:37] *** unicodable6 left
[00:37] *** coverable6 left
[00:37] *** linkable6 left
[00:37] *** tellable6 left
[00:37] *** reportable6 left
[00:37] *** committable6 left
[00:37] *** squashable6 left
[00:37] *** notable6 left
[00:37] *** benchable6 left
[00:37] *** greppable6 left
[00:37] *** bloatable6 left
[00:37] *** shareable6 left
[00:37] *** statisfiable6 left
[00:48] *** finsternis joined
[01:12] *** Xliff joined
[01:14] <Xliff> \o

[01:14] <Xliff> I know its late. Has there been any progress of getting Raku to pre-compile in parallel?

[01:15] <Xliff> I still haven't gotten back to my work on removing the .precomp lock. So busy with other things.

[01:15] <Xliff> I hope to get back to it before May ends.

[01:33] *** pamplemousse left
[01:35] *** Xliff left
[03:56] *** commavir left
[03:57] *** commavir joined
[06:00] *** AlexDaniel joined
[06:01] *** AlexDaniel left
[06:01] *** AlexDaniel joined
[06:19] *** jjmerelo joined
[06:19] <jjmerelo> Morning

[06:47] <AlexDaniel> o/

[06:52] <Geth> ¦ rakudo: 5644c709a7 | (Jeremy Studer)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | src/core.c/Kernel.pm6

[06:52] <Geth> ¦ rakudo: Simplify Kernel signals method using Signal values

[06:52] <Geth> ¦ rakudo: 

[06:52] <Geth> ¦ rakudo: The Kernel signals method previously had a lot of logic for determining

[06:52] <Geth> ¦ rakudo: signal values on the host system and backends. Now that that logic is

[06:52] <Geth> ¦ rakudo: encapsulated into the getsignals ops, this method can be greatly

[06:52] <Geth> ¦ rakudo: simplified.

[06:52] <Geth> ¦ rakudo: 

[06:53] <Geth> ¦ rakudo: Closes #1901.

[06:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5644c709a7

[06:54] <AlexDaniel> I'd love to know why github doesn't know how to merge something even if locally there's no problem at all

[06:54] <AlexDaniel> is it using some different merge strategy or something?

[06:58] <[Tux]> Rakudo version 2020.02.1-388-g3d2522eed - MoarVM version 2020.02.1-163-g8b109c68b

[06:58] <[Tux]> csv-test-xs-20      0.381 -  0.406

[06:58] <[Tux]> test-t --race       0.851 -  0.969

[06:58] <[Tux]> csv-ip5xs           0.831 -  0.882

[06:58] <[Tux]> test-t              1.980 -  2.021

[06:58] <[Tux]> test                7.746 -  7.786

[06:58] <[Tux]> csv-ip5xs-20        7.818 -  9.508

[06:58] <[Tux]> test-t-20 --race    9.780 -  9.930

[06:58] <[Tux]> csv-parser         23.511 - 26.452

[06:58] <[Tux]> test-t-20          31.823 - 33.146

[07:01] <MasterDuke> didn't git change its default merge strategy recently? maybe github just hasn't caught up yet

[07:10] <Geth> ¦ rakudo: 89e570c2b0 | cygx++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | lib/NativeCall.rakumod

[07:10] <Geth> ¦ rakudo: Let NC map int to longlong

[07:10] <Geth> ¦ rakudo: 

[07:10] <Geth> ¦ rakudo: While `int` in nativecall declarations might be somewhat confusing,

[07:10] <Geth> ¦ rakudo: mapping it to the same thing as p6-land native `int` would be

[07:10] <Geth> ¦ rakudo: consistent - in normal situation, `int` would just be an alias for

[07:10] <Geth> ¦ rakudo: `int64` and `num` for `num64`.

[07:10] <Geth> ¦ rakudo: 

[07:10] <Geth> ¦ rakudo: On 'mainstream' architectures, this patch should be enough to do it,

[07:10] <Geth> ¦ rakudo: possibly there will be a better solution in the future.

[07:10] <Geth> ¦ rakudo: 

[07:10] <Geth> ¦ rakudo: Closes #572.

[07:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/89e570c2b0

[07:12] <MasterDuke> how do you view conflicts on github?

[07:14] <AlexDaniel> MasterDuke: hahahahahahah

[07:15] <AlexDaniel> MasterDuke: most of the time you can't

[07:15] <MasterDuke> huh

[07:15] <AlexDaniel> but sometimes it even lets you fix conflicts on github via their web ui

[07:16] <jjmerelo> MasterDuke only when the file name has not changed

[07:17] <MasterDuke> oh, that's probably the only conflict with https://github.com/rakudo/rakudo/pull/1791 then

[07:17] <jjmerelo> MasterDuke right. core -> core.c

[07:18] <jjmerelo> Also, AppVeyor fails in many outstanding PRs. Should we pay any attention to it at all?

[07:18] <MasterDuke> anyone mind if i do the merge manually then? and change the one test description, or is that bad form?

[07:19] <jjmerelo> MasterDuke I don't mind... It's probably the best to save that PR.

[07:22] <AlexDaniel> MasterDuke: lately I tend to do `wget https://github.com/rakudo/rakudo/pull/1791.patch` then git am -3 < 1791.patch

[07:23] <MasterDuke> i just ran the command they showed

[07:24] <AlexDaniel> honestly I don't care as long as you close these PRs

[07:24] <AlexDaniel> :)

[07:24] <MasterDuke> the only difference is you're keeping the patch around?

[07:25] <AlexDaniel> MasterDuke: well, this way I can easily just change the patch if it doesn't apply cleanly, and I'm also not merging a branch from two years back (so git log should remain pretty)

[07:26] <AlexDaniel> but there are many ways to do it, as long as you feel comfortable it'll be ok

[07:31] <AlexDaniel> MasterDuke: also, whatever you do it'll likely not close the original PR, so include `Closes #…` in your commit message or close it manually

[07:31] <MasterDuke> k

[07:37] <jjmerelo> AlexDaniel++ with the issue closing.

[07:37] <jjmerelo> I mean, some are so simple that I don't really understand why they remained there for so long...

[07:41] <Geth> ¦ rakudo: b02a741398 | vendethiel++ (committed by Daniel Green) | 2 files

[07:41] <Geth> ¦ rakudo: GH#1758: Only suggest a submethod if it's local

[07:41] <Geth> ¦ rakudo: 

[07:41] <Geth> ¦ rakudo: This avoids us suggesting a submethod from a parent class, which would

[07:41] <Geth> ¦ rakudo: always result into an error.

[07:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b02a741398

[07:41] <Geth> ¦ rakudo: cc10570da5 | (Daniel Green)++ | 2 files

[07:41] <Geth> ¦ rakudo: Merge branch 'vendethiel-bugfix/gh-1758'

[07:41] <Geth> ¦ rakudo: 

[07:41] <Geth> ¦ rakudo: Fixes #1873 and closes #1791

[07:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cc10570da5

[07:58] *** Altai-man_ joined
[08:03] <Geth> ¦ rakudo/sumanstats-master: 9a0aa98871 | (JJ Merelo)++ | README.md

[08:03] <Geth> ¦ rakudo/sumanstats-master: Fixes conflict

[08:03] <Geth> ¦ rakudo/sumanstats-master: review: https://github.com/rakudo/rakudo/commit/9a0aa98871

[08:09] <Geth> ¦ rakudo: JJ++ created pull request #3662: Changes to README.md

[08:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3662

[08:10] <lizmat> Files=1305, Tests=111241, 213 wallclock secs (28.94 usr  8.29 sys + 3002.44 cusr 276.02 csys = 3315.69 CPU)

[08:10] <Geth> ¦ rakudo: 9a0aa98871 | (JJ Merelo)++ | README.md

[08:10] <Geth> ¦ rakudo: Fixes conflict

[08:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9a0aa98871

[08:10] <Geth> ¦ rakudo: 0a3f4f95f6 | (JJ Merelo)++ | README.md

[08:10] <Geth> ¦ rakudo: Small changes to README.md, fixes conflict

[08:10] <Geth> ¦ rakudo: 

[08:10] <Geth> ¦ rakudo: Closes #3125

[08:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0a3f4f95f6

[08:10] <Geth> ¦ rakudo: 2c9168b9ad | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | README.md

[08:10] <Geth> ¦ rakudo: Merge pull request #3662 from JJ/master

[08:10] <Geth> ¦ rakudo: 

[08:10] <Geth> ¦ rakudo: Changes to README.md

[08:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2c9168b9ad

[08:12] <AlexDaniel> lizmat: take a look at https://github.com/rakudo/rakudo/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc :)

[08:12] <AlexDaniel> lizmat: maybe there's something that is a LHF for you

[08:12] <lizmat> are we ok to commit wrt the release ?

[08:13] <AlexDaniel> lizmat: too late, we're already committing like crazy

[08:13] <lizmat> *sigh*

[08:13] <AlexDaniel> so releasing from a branch is the way

[08:14] <AlexDaniel> lizmat: come on, it's a rare occurance that people get motivated to work on old PRs

[08:15] <lizmat> &

[08:50] * lizmat starts working on the RWN first and hopes to be able to mention a new release in it

[08:58] *** sena_kun joined
[08:59] *** Altai-man_ left
[09:08] <lizmat> m: my @a = ^5; @a[2]:delete; my @b is default(42) = @a.reverse; dd @b[2]   # should this be Any or 42

[09:08] <camelia> rakudo-moar 2c9168b9a: OUTPUT: «Any @b = Any␤»

[09:09] <lizmat> m: my @a = ^5; @a[2]:delete; dd @a.reverse

[09:09] <camelia> rakudo-moar 2c9168b9a: OUTPUT: «(4, 3, Any, 1, 0).Seq␤»

[09:09] <lizmat> m: my @a = ^5; @a[2]:delete; $_ = 42 for @a.reverse; dd @a

[09:09] <camelia> rakudo-moar 2c9168b9a: OUTPUT: «Array @a = [42, 42, 42, 42, 42]␤»

[09:10] <lizmat> seeing this, I'm starting to lean towards .reverse always deconting and returning Nil for holes

[09:12] *** jjmerelo left
[09:21] <jnthn> Why would reverse decont?

[09:21] <jnthn> A deleted slot is ordinarily assignable

[09:25] <jnthn> Not sure about the wisdom of 89e570c2b0

[09:31] <AlexDaniel> m: use NativeCall; say nativesizeof(int)

[09:31] <camelia> rakudo-moar 2c9168b9a: OUTPUT: «8␤»

[09:31] <AlexDaniel> jnthn: see https://github.com/rakudo/rakudo/pull/572

[09:31] <AlexDaniel> IMO it's wrong either way

[09:32] <lizmat> 89e570c2b0

[09:32] <AlexDaniel> but now it's right for more people, I guess

[09:32] <AlexDaniel> lizmat: the bots are down, I'm working on it

[09:32] <lizmat> ok

[09:34] <jnthn> Well, the point of the original choice was that `int` was likely to get you what `int` means in C, for those just naively translitting signatures.

[09:34] <lizmat> jnthn: in the example, @a contains an nqp::null.  normally, AT-POS would return a container for it so you can assign into the array.  Because .reverse does that now as well, the nqp::null does not get bound to @b, so its observed value becomes Any, rather than 42

[09:34] <jnthn> e.g. a "pit of success" thing

[09:34] <lizmat> if you think the current behaviour is ok, then we're fine

[09:35] <jnthn> lizmat: ah, hm, it's kinda more complicated

[09:35] <AlexDaniel> jnthn: if you feel strongly about it we can revert it, but IIRC you should never use `int` in signatures anyway

[09:35] <AlexDaniel> which also kinda means that you can never get your signatures right if you're dev-ing for multiple platforms…

[09:35] <AlexDaniel> that's something I stumbled upon years ago, maybe there were improvements for that meanwhile, I don't know

[09:36] <jnthn> The "can never use `int` in signatures" was also never something I was that thrilled about, for the very reason you mention. The original idea was that int mapped to the current platform's notion of int.

[09:39] <AlexDaniel> jnthn: what about nativesizeof(int) returning 8?

[09:39] <jnthn> That's inconsistent, and probably what should be fixed.

[09:39] *** jjmerelo joined
[09:41] <AlexDaniel> jnthn: okay, so what about `my int @a`, should that give you an array of 32-bit ints?

[09:44] *** reportable6 joined
[09:44] *** releasable6 joined
[09:44] *** shareable6 joined
[09:44] *** sourceable6 joined
[09:44] *** committable6 joined
[09:44] *** coverable6 joined
[09:44] *** statisfiable6 joined
[09:45] *** bloatable6 joined
[09:45] *** squashable6 joined
[09:45] *** evalable6 joined
[09:45] *** quotable6 joined
[09:45] *** benchable6 joined
[09:45] *** bisectable6 joined
[09:45] *** nativecallable6 joined
[09:46] *** linkable6 joined
[09:46] *** unicodable6 joined
[09:46] *** tellable6 joined
[09:47] *** notable6 joined
[09:47] <AlexDaniel> 89e570c2b0

[09:47] <linkable6> (2015-11-04) https://github.com/rakudo/rakudo/commit/89e570c2b0 Let NC map int to longlong

[09:47] <AlexDaniel> lizmat: fixed, thanks!

[09:48] *** greppable6 joined
[09:48] <lizmat> yw  :-)

[09:52] <jnthn> AlexDaniel: No, because that's nothing to do with nativecall

[09:53] <jnthn> CArray[int], on the other hand, probably should.

[09:55] <AlexDaniel> jnthn: in the PR people were making a point that maybe we should have a “cint” which can deconfuse things a little bit

[09:55] <AlexDaniel> jnthn: anyway, can you revert it then?

[10:06] <jnthn> Um, well, my expectation is that people who merge PRs take responsibility for that action.

[10:06] <jnthn> Thus why I only merge those I've had time to carefully look through.

[10:06] <jnthn> And feel comfortable about.

[10:07] <AlexDaniel> no problem, I can revert too

[10:07] <jnthn> Thanks

[10:08] <jnthn> I finally have a week with a load of time to work on implementing the MoarVM dispatcher stuff, and waking up to a flood of emails about PRs that I maybe should pay attention to was like...urgh. :)

[10:08] <jnthn> I mean, I kinda appreciate the enthusiasm, but I worry it'll lead to hasty/bad decisions.

[10:09] <Geth> ¦ rakudo: c362bd8295 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/NativeCall.rakumod

[10:09] <Geth> ¦ rakudo: Revert "Let NC map int to longlong"

[10:09] <Geth> ¦ rakudo: 

[10:09] <Geth> ¦ rakudo: This reverts commit 89e570c2b0bdec925aa758cca35bbebe6b0811f1.

[10:09] <Geth> ¦ rakudo: 

[10:09] <Geth> ¦ rakudo: See the discussion on

[10:09] <Geth> ¦ rakudo: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-05-04#l146

[10:09] <Geth> ¦ rakudo: 

[10:09] <Geth> ¦ rakudo: Basically, we'll probably need a problem-solving ticket to figure out

[10:09] <Geth> ¦ rakudo: what `int` should mean in different contexts and whether we need

[10:09] <Geth> ¦ rakudo: something like `cint` to express what `int` means in C.

[10:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c362bd8295

[10:09] <AlexDaniel> jnthn: ↑ I hope this makes sense

[10:09] <jnthn> Yes, that summarizes it well. Thanks.

[10:10] <MasterDuke> jnthn: btw, did you mean to comment on https://github.com/rakudo/rakudo/pull/2737 ?

[10:10] <jjmerelo> ... and we're down to 90 PRs :-)  https://github.com/rakudo/rakudo/pulls Thanks everyone!

[10:11] <jnthn> MasterDuke: haha, what happened there? I was just looking for a commit to link to...

[10:11] <MasterDuke> heh

[10:12] <jjmerelo> jnthn MasterDuke ran the benchmarks, it was no longer needed, it was closed

[10:13] <jnthn> Yes, but since it was almost certainly changes I did a month or so back that led to the improvement, I thought I'd link them. :) Done now.

[10:14] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue What should be the size of `int`? (and other NativeCall type issues) https://github.com/Raku/problem-solving/issues/182

[10:15] <AlexDaniel> jnthn: ↑ also this

[10:15] <jnthn> Thanks.

[10:16] <AlexDaniel> jnthn: thanks for the help, btw

[10:24] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue What should unicode subscripts do? (and should they do anything at all?) https://github.com/Raku/problem-solving/issues/183

[10:35] <AlexDaniel> here's an interesting aspect regarding permissions: https://github.com/Raku/problem-solving/issues/5#issuecomment-623387149

[10:35] <AlexDaniel> jnthn: ↑ take a look perhaps

[10:36] <AlexDaniel> feel free to slap me if what I'm doing is wrong

[10:36] <AlexDaniel> it looks like this: https://github.com/rakudo/rakudo/settings/access

[10:40] <nine> Oh, speaking of, AlexDaniel could you please give me admin permissions to rakudo/rakudo? Can't remember any specifics right now but from time to time I stumble over not having them

[10:43] <AlexDaniel> nine: done

[10:43] <nine> thanks :)

[10:43] <AlexDaniel> github is now adding more levels so maybe eventually it'll be more fine-grained

[10:43] <Geth> ¦ rakudo/master: 5 commits pushed by ribbon-otter++, (Juan Julián Merelo Guervós)++

[10:43] <Geth> ¦ rakudo/master: 302bc8ed8b | Fix misleading paragraph in readme.

[10:43] <Geth> ¦ rakudo/master: 736ce715fa | Readme: Rokudo->Rakudo

[10:43] <Geth> ¦ rakudo/master: 621577b43a | reinsert note regarding backends

[10:43] <Geth> ¦ rakudo/master: 4e758ac39b | Merge branch 'master' into readme4

[10:43] <Geth> ¦ rakudo/master: 9f7700206a | Merge pull request #3127 from ribbon-otter/readme4

[10:43] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/c362bd8295c8...9f7700206ae7

[10:43] <AlexDaniel> but webhooks and stuff is not available for the `Maintain` level and there's nothing in between

[10:45] *** robertle joined
[10:49] *** robertle left
[10:56] *** Altai-man_ joined
[10:59] *** sena_kun left
[11:23] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Should ¿? and ¡! be an alternative to "" ? https://github.com/Raku/problem-solving/issues/184

[11:35] <AlexDaniel> m: CATCH { when X::Y {} }

[11:35] <camelia> rakudo-moar 9f7700206: OUTPUT: «5===SORRY!5===␤Function 'X::Y' needs parens to avoid gobbling block (or perhaps it's a class that's not declared or available in this scope?)␤at <tmp>:1␤------> 3CATCH { when X::Y {}7⏏5 }␤Missing block (apparently claimed by 'X::Y')…»

[11:39] <Geth> ¦ rakudo: dac68b27b3 | ribbon-otter++ | CONTRIBUTING.md

[11:39] <Geth> ¦ rakudo: Replace `RT #12345` with `#12345`. Explain `RT`

[11:39] <Geth> ¦ rakudo: 

[11:39] <Geth> ¦ rakudo: The previous version caused me to think that `RT` was just the prefix

[11:39] <Geth> ¦ rakudo: that goes before issue numbers. I only learned the true meaning from

[11:39] <Geth> ¦ rakudo: when zoffixznet kindly informed me of it. Hopefully, changing the

[11:39] <Geth> ¦ rakudo: examples and adding an explanation will prevent future misunderstandings

[11:39] <Geth> ¦ rakudo: of this sort.

[11:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dac68b27b3

[11:39] <Geth> ¦ rakudo: 10a8f6a20f | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | CONTRIBUTING.md

[11:39] <Geth> ¦ rakudo: Fix links

[11:39] <Geth> ¦ rakudo: 

[11:39] <Geth> ¦ rakudo: And update some text in the process.

[11:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/10a8f6a20f

[11:39] <Geth> ¦ rakudo: d6576888a1 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | CONTRIBUTING.md

[11:39] <Geth> ¦ rakudo: Merge pull request #2226 from ribbon-otter/contributing-fix

[11:39] <Geth> ¦ rakudo: 

[11:39] <Geth> ¦ rakudo: Update CONTRIBUTING.md with regards to prefix `RT`

[11:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d6576888a1

[12:00] <jjmerelo> Open PRs in rakudo/rakudo is down roughly 20% since yesterday. Can we clear the backlog? Yes we can! (y) <3 

[12:00] <jjmerelo> (at least a tiny bit)

[12:07] <lizmat> notable6: weekly

[12:07] <notable6> lizmat, 3 notes: https://gist.github.com/ce722ac87f7bee68547146a50c6824eb

[12:10] <lizmat> notable6: weekly reset

[12:10] <notable6> lizmat, Moved existing notes to “weekly_2020-05-04T12:10:10Z”

[12:40] <[Coke]> I have received JJ Merelo's CLA.

[12:47] <AlexDaniel> [Coke]: thank you

[12:47] <AlexDaniel> jnthn: can you add jmerelo then? ↑

[12:48] <AlexDaniel> jnthn: github handle is @JJ

[12:48] <jjmerelo> (y) <3 

[12:48] *** pamplemousse joined
[12:54] *** jjmerelo left
[12:56] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/05/04/2020-18-comma-community/

[12:57] *** sena_kun joined
[13:00] *** Altai-man_ left
[13:03] <[Tux]> nothing on the slowdown in this weekly?

[13:10] <lizmat> first item in core developments

[13:10] <AlexDaniel> nine: so regarding your comment wrt symlinks, did you delete it? It left me and lizmat a bit confused. Do I understand it right that there's no issue with symlinks because .f will actually be True anyway?

[13:11] <AlexDaniel> nine: I have to admit that for a moment it made me go “oh shit” too :)

[13:13] <[Tux]> Ah, I didn't make the link

[13:13] <nine> Oh, sorry about that. That comment was plain wrong

[13:13] <lizmat> *phew*

[13:14] <nine> I did test it, but of course the symlink I tested with was pointing at a directory :)

[13:15] <AlexDaniel> nine: ok! Good attention to detail anyway, thanks!

[13:23] <Geth> ¦ rakudo: 4278e4c28f | (Ray Perry)++ | 2 files

[13:23] <Geth> ¦ rakudo: Issue #2092 | Clarify detached method error messaging.

[13:23] <Geth> ¦ rakudo: 

[13:23] <Geth> ¦ rakudo: Originally, this error said "only alphabetic methods may be detached"

[13:23] <Geth> ¦ rakudo: but those aren't the only methods that can be detached. The new

[13:23] <Geth> ¦ rakudo: messaging is a bit clearer on valid detachment candidates.

[13:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4278e4c28f

[13:23] <Geth> ¦ rakudo: ee22c2ef48 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | 2 files

[13:23] <linkable6> RAKUDO#2092 [open]: https://github.com/rakudo/rakudo/issues/2092 [Hacktoberfest][LTA][easy to resolve][good first issue] "only alpha methods may be detached" message could be a bit clearer/accurater

[13:23] <Geth> ¦ rakudo: Merge pull request #3204 from RayMPerry/enhancement/2092-detached-method-error-messaging

[13:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ee22c2ef48

[13:28] <lizmat> afk for a few hours&

[13:38] <AlexDaniel> > I can't imagine contemplating such an invasive refactoring inside MoarVM as proposed here unless you had stellar certainty the finished product would be rock solid.

[13:38] <AlexDaniel> interesting comment

[13:41] <MasterDuke> it's true though. and it makes experimenting a lot more fun (especially since my new cpu runs a spectest so much faster), since i'm assured of getting good feedback on my changes

[13:42] <jnthn> Between all the tests + being able to run them with spesh stressing + blin, we're in a fairly decent place to detect regressions.

[13:42] <sena_kun> AlexDaniel, link?

[13:42] <AlexDaniel> sena_kun: https://www.reddit.com/r/rakulang/comments/g95m15/moarvm_general_dispatcher_api_jonathan_worthington/

[13:43] <jnthn> vrurg: Hmm, I'd not noticed until now but when I make a change in NQP, it only seems to recompile stage 2 from the point of the change I made onward. It used to recompile the whole of stage 2 unconditionally, so you could spot if you broke the code-gen...

[13:44] <nine> Well the comment is in the context of having a fantastic test suite

[13:44] <AlexDaniel> btw if anybody feels like helping me with getting bisectable to dive into nqp and moarvm bumps, please don't hesitate :) It'd make hacking on moarvm maybe even more fun

[13:51] <vrurg> jnthn: It was intentional implementation but seemingly wrong. Ok, noted.

[13:53] <vrurg> jnthn: Just to make sure: its ok to rebuild stage 1 partially but always full rebuild of stage 2.

[13:53] <nine> vrurg: yes

[13:53] <vrurg> Heh... nine – thanks!

[13:53] <nine> vrurg: the point of the stages is to end up with a compiler that is compiled by itself. Stage 0 is the old compiler, stage 1 is the new compiler compiled with the old compiler, stage 2 is the new compiler compiled by the new compiler.

[13:54] <jnthn> Indeed, it's a kind of "I didn't screw up compiling the compiler" validation :)

[13:54] <tbrowder> nine: i have a short test case that fails when using Inline::Perl5. it is using the perl Excel::Writer::XLSX module which a pretty big one.

[13:55] <[Tux]> so in fact it is not really a small test case :)

[13:55] <vrurg> It just never crossed my mind that stage 2 is a tests itself. 

[13:55] <nine> tbrowder: that reminds me.... I think there is a known issue related to AUTOLOAD on that module.

[13:56] <tbrowder> well, the script is small, but the perl is deep  ;-)

[13:59] <tbrowder> but i have been able so far to use much of the module. the current problem is in setting format for font name and size. either one causes a core dump. i have tried using the Scalar as first arg but no help.

[14:01] <nine> That does sound like the AUTOLOAD issue

[14:01] <vrurg> jnthn: BTW, does anybody test Comma on macOS? When I'm trying to debug with a breakpoint the thing I get reproducibly is it hits the bp for the first time, then I resume and get 'marking thread 6 unblocked, but its status is already NONE.'

[14:01] <tbrowder> i don't see an issue posted about that.

[14:02] <tbrowder> i need to check closed though..l

[14:06] <tbrowder> nada

[14:09] <nine> I think I've so far gotten two emails and now an IRC message about this ;)

[14:10] <jnthn> vrurg: Hm, that messages comes from the debug server in MoarVM (plus it'd surprised me if it were macOS-specific, though stranger things have happened...)

[14:11] <vrurg> jnthn: I just cannot try it anywhere else yet.

[14:13] <tbrowder> nine: yep, i see autoload being used in the format modue. is there any way to handle that with inline::perl5?

[14:14] <nine> tbrowder: how about a deal? You write a reduced test case that doesn't rely on any installed module and I write a fix?

[14:16] <vrurg> jnthn: And another thing. comma fails to access the marketplace. Don't know if its on purpose, but I think the cause is in the request url it is using: https://plugins.jetbrains.com/api/search?orderBy=rating&build=CT-2020.4.0&max=9 – the server replies with empty list and I think this is due to it not knowning about such build 'CT-2020.4'.

[14:19] <sena_kun> vrurg, that's a sad known bug. :S

[14:19] <tbrowder> hm, it sounds like a good deal if i knew how to start. so the perl code has to originate in the test script itself... i'll try to give it a shot. thanks!

[14:22] <vrurg> sena_kun: a tolerable one. Wish I have the debugging work as this is the only thing holding me back from buying comma.

[14:35] <Geth> ¦ nqp/new-disp: 29f2695491 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[14:35] <Geth> ¦ nqp/new-disp: Basic compilation of new dispatch operation

[14:35] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/29f2695491

[14:36] <vrurg> jnthn++ Yes! :D

[14:40] <jnthn> vrurg: Is the debugging issue reproducible with something publicly available (or that can be privately shared)?

[14:42] <vrurg> jnthn: yes, but I'd have to commit latest changes eventhough they're incomplete. Will submit later today.

[14:42] <jnthn> vrurg: Thanks.

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: d3c3e5346e | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/Perl6/Grammar.nqp

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: Awesomify “malformed loop spec” errors

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: 

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: This is a questionable fix for RT #127857.

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: 

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: Makes each parse of a loop construct 0.04 ms slower. So if you have

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: one hundred ｢loop｣-s in your code, that's already about four

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: milliseconds slower.

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: 

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: Also breaks one 6.c-errata test that checks for “loop spec” text.

[14:48] <Geth> ¦ rakudo/awesome-malformed-loops: review: https://github.com/rakudo/rakudo/commit/d3c3e5346e

[14:56] *** Altai-man_ joined
[14:57] <tbrowder> nine: i just noticed if i use the alternative format setting syntax i don't get a core dump.  does that still mean an autoload problem? 

[14:58] <tbrowder> i'll show the working syntax in the issue description.

[14:59] *** sena_kun left
[15:10] *** jjmerelo joined
[15:46] <tbrowder> nine: is it ok to put a very stripped down version of Excel::Writer::XLSX in your test dir where the other perl modules are?

[15:47] <Altai-man_> By the way, can anyone check https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft for sanity? I am not really sure if changes to e.g. Rakudo::Iterator should be internal or public or if VM.request-garbage-collection is public or not.

[15:47] <Altai-man_> Any suggestions are welcome.

[15:48] <nine> tbrowder: if it's stripped down to only the parts really needed to reproduce the issue, then it's certainly welcome to t/lib

[15:49] <tbrowder> okey dokey, thnx

[15:49] <jjmerelo> Altai-man_ it looks fine. 

[15:55] <Geth> ¦ rakudo: d3c3e5346e | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/Perl6/Grammar.nqp

[15:55] <Geth> ¦ rakudo: Awesomify “malformed loop spec” errors

[15:55] <Geth> ¦ rakudo: 

[15:55] <Geth> ¦ rakudo: This is a questionable fix for RT #127857.

[15:55] <Geth> ¦ rakudo: 

[15:55] <Geth> ¦ rakudo: Makes each parse of a loop construct 0.04 ms slower. So if you have

[15:55] <Geth> ¦ rakudo: one hundred ｢loop｣-s in your code, that's already about four

[15:55] <Geth> ¦ rakudo: milliseconds slower.

[15:55] <Geth> ¦ rakudo: 

[15:55] <Geth> ¦ rakudo: Also breaks one 6.c-errata test that checks for “loop spec” text.

[15:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d3c3e5346e

[15:55] <Geth> ¦ rakudo: 1a536ca9db | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/Perl6/Grammar.nqp

[15:55] <Geth> ¦ rakudo: Merge pull request #1188 from rakudo/awesome-malformed-loops

[15:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1a536ca9db

[15:57] <Geth> ¦ roast/6.d-errata: 1b0b309937 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-exceptions/misc.t

[15:57] <Geth> ¦ roast/6.d-errata: More tests for malformed `loop`s

[15:57] <Geth> ¦ roast/6.d-errata: 

[15:57] <Geth> ¦ roast/6.d-errata: See rakudo/rakudo#1188.

[15:57] <Geth> ¦ roast/6.d-errata: review: https://github.com/Raku/roast/commit/1b0b309937

[15:57] <linkable6> RAKUDO#1188 [closed]: https://github.com/rakudo/rakudo/pull/1188 [has conflicts] Awesomify “malformed loop spec” errors

[15:59] <Geth> ¦ roast/6.c-errata: 2a74a21955 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-exceptions/misc.t

[15:59] <Geth> ¦ roast/6.c-errata: Make malformed loop tests less specific

[15:59] <Geth> ¦ roast/6.c-errata: 

[15:59] <Geth> ¦ roast/6.c-errata: Recent rakudo versions print some extra info on what went wrong.

[15:59] <Geth> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/2a74a21955

[16:01] <AlexDaniel`> whoops, I did it, folks!

[16:01] <AlexDaniel`> I pushed into 6.d-errata what I meant to push into master

[16:02] <AlexDaniel`> nevermind will fix soon…

[16:02] <Geth> ¦ roast: 212042d578 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-exceptions/misc.t

[16:02] <Geth> ¦ roast: More tests for malformed `loop`s

[16:02] <Geth> ¦ roast: 

[16:02] <Geth> ¦ roast: See rakudo/rakudo#1188.

[16:02] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/212042d578

[16:02] <linkable6> RAKUDO#1188 [closed]: https://github.com/rakudo/rakudo/pull/1188 [has conflicts] Awesomify “malformed loop spec” errors

[16:03] <nine> Nothing a force push can't fix...

[16:03] <Geth> ¦ roast/6.d-errata: 71ed05cec3 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-exceptions/misc.t

[16:03] <Geth> ¦ roast/6.d-errata: Revert "More tests for malformed `loop`s"

[16:03] <Geth> ¦ roast/6.d-errata: 

[16:03] <Geth> ¦ roast/6.d-errata: This reverts commit 1b0b3099371bbc46ac5fe94e58d974b4129f86e7.

[16:03] <Geth> ¦ roast/6.d-errata: review: https://github.com/Raku/roast/commit/71ed05cec3

[16:03] <Geth> ¦ roast/6.d-errata: bc25d4b50f | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-exceptions/misc.t

[16:03] <Geth> ¦ roast/6.d-errata: Make malformed loop tests less specific

[16:03] <Geth> ¦ roast/6.d-errata: 

[16:03] <Geth> ¦ roast/6.d-errata: Recent rakudo versions print some extra info on what went wrong.

[16:03] <Geth> ¦ roast/6.d-errata: review: https://github.com/Raku/roast/commit/bc25d4b50f

[16:03] <AlexDaniel`> nine: xD

[16:10] *** Kaiepi left
[16:12] *** Kaiepi joined
[16:14] *** AlexDaniel left
[16:15] *** AlexDaniel joined
[16:15] *** AlexDaniel left
[16:15] *** AlexDaniel joined
[16:15] <AlexDaniel> Altai-man_: btw how do you keep track of the roast version that is supposed to be used for the release?

[16:16] <AlexDaniel> I used to like… rely on my bash history… :S /o\

[16:17] <Altai-man_> AlexDaniel, I am not sure I'm getting your question. Do you like if there is some cool mechanism for that I should invent and encourage people to use? Nope. I know the commit I tested many times against and that's all.

[16:17] <Altai-man_> s/like/ask/

[16:17] <Altai-man_> Engrish is da stronkest today.

[16:17] <AlexDaniel> Altai-man_: ah okay

[16:18] <Altai-man_> In the meanwhile, we still have no changelog for moar.

[16:20] <Altai-man_> Also, one who will do it, it will be really helpful to add changes in a branch deriving from https://github.com/MoarVM/MoarVM/commit/3d8ff61e20a8abde79b46fec5f324c54433d5fb2

[16:20] <Altai-man_> As we don't want to take the last commit in the release.

[16:22] <AlexDaniel> who will be doing it, by the way?

[16:22] <AlexDaniel> samcv?

[16:23] <Altai-man_> No idea yet, asked in #moarvm this morning and nobody was particularly enthusiastic. OTOH, I'm wrong for doing it on MONDAY, so no surprise people are busy.

[16:23] <Altai-man_> I also suspect I can do it myself with some reviewing.

[16:23] <AlexDaniel> jnthn: among all the notification spam, I think PS#184 is a relatively easy opportunity to say “no” :)

[16:23] <linkable6> PS#184 [open]: https://github.com/Raku/problem-solving/issues/184 [language] Should ¿? and ¡! be an alternative to "" ?

[16:39] <jnthn> Indeed :)

[16:51] <AlexDaniel> thanks :)

[16:57] *** sena_kun joined
[16:59] *** Altai-man_ left
[17:38] <Geth> ¦ nqp/new-disp: e19e513763 | (Jonathan Worthington)++ | t/moar/53-dispatch.t

[17:38] <Geth> ¦ nqp/new-disp: An initial test for the new dispatchers

[17:38] <Geth> ¦ nqp/new-disp: 

[17:38] <Geth> ¦ nqp/new-disp: Failing at time of commit.

[17:38] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/e19e513763

[17:40] <nine> tbrowder: looks like I've got a fix. If you've got a test, I can commit and push :)

[17:49] <tbrowder> sounds good, but i’m still trimming module. down to .5mb

[18:19] <tbrowder> it will be a while, dr appt soon

[18:56] *** Altai-man_ joined
[18:59] *** sena_kun left
[19:10] *** jjmerelo left
[19:29] *** pamplemousse left
[19:35] *** Altai-man_ left
[19:36] *** sena_kun joined
[19:36] *** sena_kun left
[19:37] *** sena_kun joined
[19:38] *** sena_kun left
[19:39] *** sena_kun joined
[19:39] *** sena_kun left
[19:52] *** cognomin_ joined
[19:55] *** sena_kun joined
[19:55] *** cognominal left
[20:04] <sena_kun> How horrible are perl: warning: Setting locale failed. Falling back to a fallback locale ("en_US.utf8").?

[20:15] *** pamplemousse joined
[20:32] *** Kaiepi left
[20:32] *** Kaeipi joined
[20:56] *** Altai-man_ joined
[20:59] *** sena_kun left
[21:01] *** Altai-man_ left
[21:06] *** sena_kun joined
[21:17] <Geth> ¦ rakudo/2020.05-release: 2a17339306 | Altai-man++ | 3 files

[21:17] <Geth> ¦ rakudo/2020.05-release: 2020.05 release

[21:17] <Geth> ¦ rakudo/2020.05-release: review: https://github.com/rakudo/rakudo/commit/2a17339306

[21:24] *** cognominal joined
[21:27] *** cognomin_ left
[21:39] <vrurg> .tell jnthn here is detailed description of the problem with debugging in Comma: https://gist.github.com/vrurg/47a7ea373eb7372f72cd245a96c215cd

[21:39] <tellable6> vrurg, I'll pass your message to jnthn

[21:41] <vrurg> sena_kun++!

[21:45] <tbrowder> nine: it's still about 428 mb but it uses no Perl modules outside the core Perl dist. i commented out the one critical one it uses Archive::Zip so it can't produce an Excel file BUT I have a perl script that works with it while the raku script core dumps.

[21:46] <tbrowder> i can work up a PR from that unless you want me to keep trimming...

[21:52] *** pamplemousse left
[21:54] <Geth> ¦ rakudo/2020.05-release: b7f2f46dbc | Altai-man++ | 3 files

[21:54] <Geth> ¦ rakudo/2020.05-release: Update changelog + announcement

[21:54] <Geth> ¦ rakudo/2020.05-release: 

[21:54] <Geth> ¦ rakudo/2020.05-release: Deliberately not logged:

[21:54] <Geth> ¦ rakudo/2020.05-release: 

[21:54] <Geth> ¦ rakudo/2020.05-release: 1d11885 bf2a542 26f4a36 3134ec7 358c5a8 80dde85 a10140f b9105f1

[21:54] <Geth> ¦ rakudo/2020.05-release: 9b66980 feb0367 fa0da6f 65f18a9 18d083e 48d3a7f 4f63764 979d384

[21:54] <Geth> ¦ rakudo/2020.05-release: a47372a 35ac7c4 8f015aa a4680db a501754 9ebbad3 e8e2d3c 82b3249

[21:54] <Geth> ¦ rakudo/2020.05-release: <…commit message has 6 more lines…>

[21:54] <Geth> ¦ rakudo/2020.05-release: review: https://github.com/rakudo/rakudo/commit/b7f2f46dbc

[21:54] <Geth> ¦ rakudo/2020.05-release: 2d13f4ff5d | Altai-man++ | tools/templates/NQP_REVISION

[21:54] <Geth> ¦ rakudo/2020.05-release: [release] Bump NQP revision to 2020.05

[21:54] <Geth> ¦ rakudo/2020.05-release: review: https://github.com/rakudo/rakudo/commit/2d13f4ff5d

[21:54] <Geth> ¦ rakudo/2020.05-release: 40a82d8723 | Altai-man++ | VERSION

[21:54] <Geth> ¦ rakudo/2020.05-release: [release] Bump VERSION to 2020.05

[21:54] <Geth> ¦ rakudo/2020.05-release: review: https://github.com/rakudo/rakudo/commit/40a82d8723

[22:05] *** Kaeipi left
[22:09] *** Kaiepi joined
[22:30] <Kaiepi> sena_kun++

[22:34] <Kaiepi> lizmat, is https://github.com/rakudo/rakudo/pull/3589 good to go now with the release made?

[23:07] *** Altai-man_ joined
[23:09] *** sena_kun left
[23:21] *** pamplemousse joined
[23:31] *** MasterDuke left
[23:31] <Geth> ¦ nqp: 2f5d5b7540 | Altai-man++ | tools/templates/MOAR_REVISION

[23:31] <Geth> ¦ nqp: [release] Bump MoarVM revision to 2020.05

[23:31] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/2f5d5b7540

[23:31] <Geth> ¦ nqp: a04f4985fb | Altai-man++ | VERSION

[23:31] <Geth> ¦ nqp: [release] Bump VERSION to 2020.05

[23:31] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/a04f4985fb

[23:33] <Geth> ¦ nqp: vrurg++ created pull request #625: Make stage 2 always fully rebuild upon changes in sources

[23:33] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/625

[23:36] <Geth> ¦ rakudo: Altai-man++ created pull request #3663: 2020.05 release

[23:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3663

[23:36] <Geth> ¦ rakudo/master: 4 commits pushed by Altai-man++

[23:36] <Geth> ¦ rakudo/master: b7f2f46dbc | Update changelog + announcement

[23:36] <Geth> ¦ rakudo/master: 2d13f4ff5d | [release] Bump NQP revision to 2020.05

[23:36] <Geth> ¦ rakudo/master: 40a82d8723 | [release] Bump VERSION to 2020.05

[23:36] <Geth> ¦ rakudo/master: 87ee57b25e | Merge pull request #3663 from rakudo/2020.05-release

[23:36] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/1a536ca9dbbc...87ee57b25e93

[23:56] *** Altai-man_ left
