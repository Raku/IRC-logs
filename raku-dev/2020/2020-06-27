[00:01] *** sena_kun joined
[00:03] *** Altai-man_ left
[00:47] *** Kaiepi left
[01:35] *** Kaiepi joined
[01:48] *** vrurg left
[01:48] *** vrurg joined
[02:00] *** Altai-man_ joined
[02:03] *** sena_kun left
[03:05] *** lucasb left
[04:02] *** sena_kun joined
[04:04] *** Altai-man_ left
[05:24] *** Kaiepi left
[05:25] *** Kaiepi joined
[06:01] *** Altai-man_ joined
[06:03] *** sena_kun left
[06:39] *** lichtkind_ joined
[06:51] *** lichtkind_ left
[07:54] <Altai-man_> lizmat, https://gist.github.com/Altai-man/026a5bb18c9cf91e73453aed38681ca1

[08:02] *** sena_kun joined
[08:04] *** Altai-man_ left
[08:31] <nine> How can our code gen expect @END_PHASERS to be both a VMArray and an Array at the same time?

[08:36] <nine> The answer is: it expects it to be an NQPArray type which is a VMArray with an unshift method.

[09:47] *** softmoth left
[10:01] *** Altai-man_ joined
[10:03] *** sena_kun left
[11:14] <[Tux]> Rakudo version 2020.06-7-gf1960baa9 - MoarVM version 2020.06-6-gbf6af07de

[11:14] <[Tux]> csv-test-xs-20      0.382 -  0.419

[11:14] <[Tux]> csv-ip5xs           0.818 -  0.830

[11:14] <[Tux]> test-t --race       0.819 -  0.843

[11:14] <[Tux]> test-t              1.844 -  1.873

[11:14] <[Tux]> csv-ip5xs-20        7.646 -  7.720

[11:14] <[Tux]> test                7.700 -  7.749

[11:14] <[Tux]> test-t-20 --race    8.961 -  9.752

[11:14] <[Tux]> csv-parser         25.637 - 25.739

[11:14] <[Tux]> test-t-20          31.169 - 31.886

[11:15] *** Kaiepi left
[11:43] *** Kaiepi joined
[12:02] *** sena_kun joined
[12:04] *** Altai-man_ left
[12:25] *** Kaiepi left
[12:25] *** Kaiepi joined
[13:10] <lizmat> sena_kun thanks for the blin run

[13:11] <lizmat> looks like Log::Async is a false positive, with fb6a12a as a commit

[13:11] <sena_kun> lizmat, welcome. Consider taking a rest, it's Satruday. :)

[13:11] <lizmat> hehe... 

[13:11] <sena_kun> Yeah, it is. I usually clean up false positives, but decided not to, it's a bit tiresome when blin runs are everyday.

[13:12] <lizmat> okidoki... just wanted to check...

[13:12] <lizmat> so Log::Async has a flapper, does its maintainer know 

[13:12] <lizmat> ?

[13:12] <sena_kun> I looked at how can it be better, actually, judged I am not really good enough right now.

[13:12] <sena_kun> lizmat, yeah

[13:13] <lizmat> ok, again, thanks for the run

[13:19] <lizmat> AlexDaniel sena_kun just an idea: if a commit produces identical .moarvm files to the previous commit, maybe it should be excluded from bisectng ?

[13:19] <AlexDaniel> why?

[13:20] <AlexDaniel> like, what would it solve?

[13:21] <lizmat> in the last Blin run, having Log::Async being flagged to a comment only change commit

[13:21] <AlexDaniel> which is very indicative that it's a flapper

[13:22] <lizmat> ah, ok, well, mark a flagged module as a flapper if the bisected commit is a comment only one ?

[13:22] <AlexDaniel> hmmmmmmmm

[13:23] <lizmat> just an idea to prevent more work by sena_kun and me in this case :-)

[13:23] <sena_kun> Better to increase the number of runs to detect flapping.... Which is actually useless because you need to process around 1500 modules on a heavy-loaded machine and `sleep 0.1` code will just fail.

[13:23] <sena_kun> The nice solution is to fix all flappers. ;)

[13:24] <AlexDaniel> sena_kun: it only attempts to deflap things that it will bisect

[13:24] <AlexDaniel> that is, only if there's good‚Üíbad transition between the endpoints

[13:25] <AlexDaniel> so you can actualy increase it significantly

[13:25] <AlexDaniel> bisection takes around 11 steps I think, so anything lower than can even speed things up (in some cases) because it will skip bisection and just say that it's a flapper

[13:25] <AlexDaniel> than that*

[13:26] <AlexDaniel> lizmat: it's a very interesting idea indeed. For example, there's already this check:

[13:26] <AlexDaniel> bisectable6: old=2015.12 say rand

[13:26] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=f1960ba) because on both starting points the exit code is 0

[13:27] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/b07b235bcf160191ee724d459e3d1877

[13:27] <bisectable6> AlexDaniel, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[13:27] <bisectable6> AlexDaniel, The result looks a bit unrealistic. Most probably the output is different on every commit (e.g. ÔΩ¢bisect: say randÔΩ£)

[13:27] <lizmat> nice

[13:27] <AlexDaniel> that said, Log::Async appears as flapper for almost every blin run, so maybe just fixing the damn module is a good idea regardless of what I do to whateverable

[13:29] <AlexDaniel> lizmat: I'm not sure if .moarvm file is actually identical between the commits‚Ä¶ maybe only since reproducible builds became a thing?

[13:29] <lizmat> lemme actually test that assumption

[13:31] <AlexDaniel> I expect it to be true, but only for recent-ish rakudo commits. Which is good for Blin! But maybe not perfect for bisectable6

[13:31] <lizmat> probably

[13:31] <Geth> ¬¶ rakudo/match-refactor: bda3a5dcfb | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[13:31] <Geth> ¬¶ rakudo/match-refactor: Always look in Capture stack first for :exists

[13:31] <Geth> ¬¶ rakudo/match-refactor: 

[13:31] <Geth> ¬¶ rakudo/match-refactor: Since we only want to know whether something exists, we can first go

[13:31] <Geth> ¬¶ rakudo/match-refactor: through the capture stack, as that will short-circuit when the name

[13:31] <Geth> ¬¶ rakudo/match-refactor: is found.  Only if that fails, check for the name in the capnames

[13:31] <Geth> ¬¶ rakudo/match-refactor: hash.

[13:31] <Geth> ¬¶ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/bda3a5dcfb

[13:33] <Geth> ¬¶ rakudo/match-refactor: 086a9772b4 | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[13:33] <Geth> ¬¶ rakudo/match-refactor: Use ifnull for the capnames test

[13:33] <Geth> ¬¶ rakudo/match-refactor: 

[13:33] <Geth> ¬¶ rakudo/match-refactor: Simplifies the check for :exists, as well as AT-POS/AT-KEY

[13:33] <Geth> ¬¶ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/086a9772b4

[13:35] <nine> No, .moarvm files won't be identical since the compiler's id contains the SHA of the full source code

[13:35] <lizmat> ah, ok, then scratch that idea :-)

[13:35] <lizmat> AlexDaniel sena_kun sorry for the noise

[13:35] <AlexDaniel> nine: bummer

[13:38] <AlexDaniel> https://github.com/Raku/whateverable/issues/378

[13:38] <AlexDaniel> anyway, it's an interesting idea, I like it

[13:39] <AlexDaniel> I'd be really happy to remove that hardcoded check

[13:40] <nine> Incidentally, the main reason for hashing the full source in the first place was making builds reproducible. Before that we used the build time stamp

[13:45] <AlexDaniel> sure, using the timestamp was wrong right away‚Ä¶

[13:45] <AlexDaniel> but hmm another option would be to use like a hash of all source files, or something like this

[13:46] <nine> that's what we do right now?

[13:46] <AlexDaniel> ah, I completely misread you, nevermind :)

[13:46] <AlexDaniel> need more coffee I guess

[13:47] <AlexDaniel> nine: I confused git SHA with source code SHA x) I go hide now

[13:48] <nine> Well, there's not much difference between those :)

[13:50] <AlexDaniel> well, not exactly, because info of the commit itself is part of the sha

[13:51] <AlexDaniel> that is you can make many commits and you'll end up with different shas, even if the source is the same

[13:52] <AlexDaniel> oh, TIL `git commit --allow-empty`

[13:52] <AlexDaniel> nice

[13:52] <dogbert17> lizmat: Algorithm-ZhangShasha seems to be another false positive (or flapper)

[13:54] <nine> Flappers really should be treated like any other test failure, i.e. bug. They clearly show that something's wrong.

[14:00] <AlexDaniel> nine: well, when Blin says that something is a Flapper it means that it flaps on both ‚Äúold‚Äù and ‚Äúnew‚Äù revisions

[14:00] <AlexDaniel> so it's a bug, but in the module itself

[14:00] <AlexDaniel> if it doesn't flap on ‚Äúold‚Äù, then it will actually try to bisect it I think (but without deflapping on each step), and will give a wrong result :(

[14:01] <AlexDaniel> so if you see tens of weird results in blin, it means that rakudo itself is flapping

[14:01] *** Altai-man_ joined
[14:01] <AlexDaniel> it can be improved, I think there's a ticket about it somewhere

[14:01] <lizmat> afk for a few hours&

[14:01] <nine> Can still be a bug in rakudo, just one that's been there for longer

[14:02] <Altai-man_> Log::Async is clearly a case of tests written with sleep and on heavy load other threads don't catch up.

[14:03] <AlexDaniel> nine: yeah, but what can I do. Release managers or those helping with releases tend to file tickets when they notice flappers, like https://github.com/bduggan/p6-log-async/issues/28

[14:03] <nine> Oh, yes, using sleep in tests is horrible

[14:03] <AlexDaniel> but there are so many modules that have flapping tests that it's hard to even propose that a Flapper status in blin can mean something else than just a module having shitty tests

[14:03] *** sena_kun left
[14:04] <AlexDaniel> I'm working on a PR for Log::Async, hang tight :)

[14:04] <nine> It's sad to se so much use of sleep in a language with such great async primitives. But we do that even in our own tests

[14:04] * Altai-man_ applauds

[14:15] <AlexDaniel> nine: let's see if you find and hints of frustration here

[14:16] <AlexDaniel> nine: ‚ÄúMoarVM panic: Internal error: Unwound entire stack and missed handler‚Äù

[14:16] <AlexDaniel> great async primitives but you can't `return` from a react block

[14:18] *** camelCaser joined
[14:18] *** ccamel left
[14:20] <AlexDaniel> bisectable6: sub foo() { react whenever Promise.in(1) { return 42 } }; say foo

[14:20] <bisectable6> AlexDaniel, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:20] <AlexDaniel> should've given something smaller than 1‚Ä¶

[14:21] <bisectable6> AlexDaniel, Output on all releases: https://gist.github.com/6d93cbb21a10eb22e0abe5177928edc0

[14:21] <bisectable6> AlexDaniel, Bisecting by output (old=2016.11 new=2016.12) because on both starting points the exit code is 1

[14:21] <AlexDaniel> don't bother, bisectable6

[14:21] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/ec564c15e03d06fc01bf18c16ff9fd62

[14:21] <bisectable6> AlexDaniel, (2016-12-13) https://github.com/rakudo/rakudo/commit/a980eb125d173bf6a9a543b4e7706fedae694199

[14:21] <bisectable6> AlexDaniel, Bisecting by output (old=2016.09 new=2016.10) because on both starting points the exit code is 1

[14:22] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/34cfbaf654b765e03191c9eb583bc109

[14:22] <bisectable6> AlexDaniel, (2016-09-27) https://github.com/rakudo/rakudo/commit/222d16b0b94911fdedb06ee6ad817d0f14b9c05c

[14:22] <bisectable6> AlexDaniel, Output on all releases and bisected commits: https://gist.github.com/d390037ed825ada196a4454fdae5f809

[14:23] <AlexDaniel> R#3772

[14:23] <linkable6> R#3772 [open]: https://github.com/rakudo/rakudo/issues/3772 [ASYNC] Can't return from a react block

[14:24] <nine> AlexDaniel: at least I said "great", not "perfect" :D

[14:26] <AlexDaniel> I'd describe that as funky

[14:32] *** Geth left
[14:32] *** Geth joined
[14:42] <jnthn> Making it work is pretty funky too: catch the control exception, somehow convey it back to the awaiting thread, and rethrow it there.

[14:42] <jnthn> Probably possible.

[15:10] <nine> Second in-process precomp issue fixed today. Continuing my average of 1 fix per day. 5 spec test files still failing

[15:50] <AlexDaniel> can somebody review this? https://github.com/bduggan/p6-log-async/pull/30

[15:50] <AlexDaniel> maybe there are better solutions

[15:52] <AlexDaniel> nine: ‚Üë

[16:02] <AlexDaniel> Altai-man_: any other common flappers?

[16:02] *** sena_kun joined
[16:02] <AlexDaniel> sena_kun: ‚Üë

[16:03] <sena_kun> AlexDaniel, Async::Cache, I think?

[16:04] *** Altai-man_ left
[16:12] <nine> AlexDaniel: why only 3 seconds time out?

[16:13] <AlexDaniel> nine: make it an hour to make these big endian machines happy? :)

[16:13] <nine> sure

[16:13] <AlexDaniel> but seriously, what should I change it to?

[16:14] <AlexDaniel> there are other tests that do `sleep 1` soo‚Ä¶ I'm just scratching the surface here

[16:14] <nine> I'd say even a couple of minutes would be fine. The time out only matters if there's an actual bug which would otherwise cause a hang, i.e. pretty much never

[16:15] <nine> If such a bug creeps in, you will usually not run those tests dozens of times while ignoring the bug. You'll investigate anyway and then the default timeout doesn't matter

[16:18] <AlexDaniel> fine

[16:18] <AlexDaniel> c36052f0f793d22

[16:18] <AlexDaniel> ahhh linkable6 doesn't work that fast

[16:18] <AlexDaniel> https://github.com/bduggan/p6-log-async/pull/30/commits/c36052f0f793d22b2ae659c33e9c507f02dcba9d

[16:19] <AlexDaniel> my reasoning ‚Äì if we break something in rakudo we'd have to bisect this module, so the bigger the timeout, the more you'd have to wait for bisection to finish

[16:20] <AlexDaniel> so having it too high can also be less than awesome, especially in the presence of other sleep tests that are more sensitive

[16:20] <nine> ok

[16:22] <nine> changes make sense to me

[16:23] <dogbert17> t/spec/S17-procasync/kill.t is a wellknown flapper

[16:25] <AlexDaniel> oooooooh spectests

[16:25] <AlexDaniel> right

[16:25] <AlexDaniel> let's see

[16:26] <dogbert17> only fails under load (test #5)

[16:26] <AlexDaniel> I've been running raku-cache-async without any issues, so yeah, next

[16:27] <dogbert17> # Failed test 'signal SIGINT got handled' - # at t/spec/S17-procasync/kill.t line 47 - # expected: '0' - #      got: '2'

[16:28] *** softmoth joined
[16:41] <AlexDaniel> yeah, it easily flaps

[16:44] <AlexDaniel> so how come SIGINT propagates to .signal sometimes?

[16:45] <AlexDaniel> ooooooooooh it's cuz it's too fast

[16:47] <AlexDaniel> that looks like a language trap to me, actually

[16:48] <AlexDaniel> if you want to set up a signal handler, it has to be reaaaally early in the program

[16:48] <AlexDaniel> and even then it's possible that your handler won't be set up in time because of the slow startup of rakudo

[16:48] <AlexDaniel> interesting

[16:49] <jnthn> I don't think it's about slow startup, I think it's because putting the handler in place is an async operation

[16:49] <jnthn> It's the case with various things, but for most it doesn't matter. I guess here it kinda does.

[16:50] <jnthn> (we dedicated a thread to libuv, and send async stuff to it, and it gives stuff back to us async)

[16:50] <AlexDaniel> well my hypothesis is that the klil signal comes before the handler is set

[16:50] <AlexDaniel> but I could be wrong

[16:51] <AlexDaniel> there's this other failure I see:

[16:51] <AlexDaniel> # You planned 7 tests, but ran 8

[16:51] <jnthn> Who sends the kill signal, though?

[16:52] <AlexDaniel> the test file

[16:53] <AlexDaniel> it starts a new program with `signal(\qq[$signal]).act: { .say; exit };` in it, then it kills it

[16:53] <AlexDaniel> so I'm actually a bit surprised that it can pass

[16:53] <jnthn> Ohh, I see.

[16:53] <AlexDaniel> ah wait, I'm misreading it. It waits for output first

[16:54] <AlexDaniel> right, but then you're actually correct, the handler setup is async so it's a bit too quick to respond there

[16:54] <AlexDaniel> so the process does `say 'Started';`, and the test file immediately kills it, with no time for the process to get ready

[16:54] <AlexDaniel> or, well, with very little time there

[16:55] <jnthn> Right, the message is still being dealt with by the event loop thread while the Started output is being sent

[16:55] <jnthn> I guess we'd sorta like some kinda "ack" to know it was set up

[16:57] <jnthn> Probably something we should fix in signal(...)

[16:57] <jnthn> If our tests run into it, somebody else will too

[16:59] <AlexDaniel> I can rewrite the test nicely with react/whenever though

[17:00] <AlexDaniel> or‚Ä¶ hm‚Ä¶ maybe not really

[17:00] <jnthn> I'm not sure that'd help, if I understand the issue correctly

[17:00] <AlexDaniel> yeah, I see that now :S

[17:01] <AlexDaniel> like, I can maybe hack something with SIGUSR1 to see that the handlers are kinda there‚Ä¶ but yeaaah‚Ä¶

[17:06] <ShimmerFairy> Doesn't the signal installer give you a Promise or something that can tell you when it's done installing, and you can wait to print "Started" until then?

[17:11] <AlexDaniel> well, it gives you a supply object right away. I expected it to only do that once the supply is fully functional and the handler is there, but apparently that's not the case?

[17:23] <jnthn> No, that's not the case

[17:23] <jnthn> For many things (like a timer), it doesn't much matter

[17:24] <jnthn> But for signals and maybe filesystem watchers it's trappy

[17:24] <jnthn> And given it's one of the easier traps to fix, I think we should do that. :)

[18:01] *** Altai-man_ joined
[18:03] *** sena_kun left
[20:02] *** sena_kun joined
[20:04] *** Altai-man_ left
[20:47] <nine> AlexDaniel++, jnthn++ # finally making sense of this flapper

[21:01] <AlexDaniel> sourceable6: signal(2)

[21:01] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/f1960ba/src/core.c/signals.pm6#L16

[21:12] *** softmoth left
[21:13] <AlexDaniel> jnthn: so I was thinking, maybe I can try passing CurrentThreadScheduler to signal() to make a difference? I don't know if it will work, but turns out it does .queue instead of .cue so I get ‚ÄúNo such method 'queue'‚Äù currently, is it wrong? https://github.com/rakudo/rakudo/blob/f1960baa9f5caa2e0cba9713eaa567df52cfaea8/src/core.c/signals.pm6#L46

[21:15] <AlexDaniel> tho, I can still give it a ThreadPoolScheduler with 1 max thread, and then do `say 'Started'`

[21:15] <AlexDaniel> don't know if it's a big brain idea or small brain one

[21:16] <AlexDaniel> I mean, .cue({ say 'Started'})

[21:17] <AlexDaniel> now I'm back to the other ‚ÄúYou planned 7 tests, but ran 8‚Äù issue which seems to be different, investigating‚Ä¶

[21:18] <AlexDaniel> ah no, it didn't fix anything, alright‚Ä¶

[21:19] *** softmoth joined
[21:24] <lizmat> Q: what is the signature for a sub to accept a native int array of *any* size?

[21:26] <lizmat> m: sub a(byte @a) { dd @a }; my byte @b = 1,2,3; a @b

[21:26] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´array[byte].new(1, 2, 3)‚ê§¬ª

[21:26] <lizmat> which would lead you to think you could say:

[21:27] <lizmat> m: sub a(array @a) { dd @a }; my byte @b = 1,2,3; a @b   # alas

[21:27] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling a(Positional[byte]) will never work with declared signature (array @a)‚ê§at <tmp>:1‚ê§------> 3rray @a) { dd @a }; my byte @b = 1,2,3; 7‚èè5a @b   # alas‚ê§¬ª

[21:27] <AlexDaniel> nine: halp. What did you mean here? d298eb2326aec66efd

[21:27] <linkable6> (2020-03-28) https://github.com/Raku/roast/commit/d298eb2326 Fix flappy timing based Proc::Async::kill tests

[21:28] <AlexDaniel> nine: I'll explain. This line doesn't even run: https://github.com/Raku/roast/blob/998d247a68c144e41192ecfd7479382df984e3e0/S17-procasync/kill.t#L41

[21:28] <AlexDaniel> nine: so when it does run, the test count is wrong

[21:28] <lizmat> feels to me that https://github.com/rakudo/rakudo/blob/master/src/core.c/native_array.pm6#L558 should be externalized?

[21:28] <AlexDaniel> nine: if I add a sleep in between these lines, then it always runs! https://github.com/Raku/roast/blob/998d247a68c144e41192ecfd7479382df984e3e0/S17-procasync/kill.t#L34-L35

[21:29] *** hoelzro left
[21:29] *** Xliff left
[21:29] *** hoelzro joined
[21:36] *** softmoth left
[21:50] <AlexDaniel> ahhhhhh it's related to stdout caching, I think‚Ä¶

[21:50] <AlexDaniel> not caching but buffering

[22:01] *** Altai-man_ joined
[22:04] *** sena_kun left
[22:10] *** lucasb joined
[22:46] <AlexDaniel> so I can only .kill a process once??????

[22:46] <AlexDaniel> whaaaaaaat

[22:47] <timotimo> that can't be right

[22:48] <timotimo> maybe it's for the benefit of windws systems that don't have any other signal besides "kill"

[22:49] <AlexDaniel> whaaaaat

[22:49] <AlexDaniel> wait it does work, but then it also doesn't work‚Ä¶ hold on

[22:50] <timotimo> you should perhaps strace or perf trace it

[22:52] <AlexDaniel> timotimo: can you try it? My mind goes insane a bit. Here's a script

[22:53] <AlexDaniel> timotimo: https://gist.github.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e

[22:53] <AlexDaniel> so it should send SIGTERM, SIGTERM, SIGKILL

[22:54] <AlexDaniel> whatever happens in the bash script doesn't really matter BECAUSE IT'S SIGKILL

[22:54] <AlexDaniel> but the process keeps going?

[22:54] <AlexDaniel> I was just playing with this flapping tests, trying out different things

[22:55] <AlexDaniel> and I thought, well, what if I try to test it with SIGUSR1 first and only then try the SIGINT stuff

[22:55] <timotimo> ah i wish the thread pool scheduler could be made to kick in a little less often

[22:55] <timotimo> it spams the t,race log quite heavily

[22:55] <AlexDaniel> and I wasted like an hour trying to figure out why the signal is not received, but it turns out that it is not being sent? whaaat

[22:56] <AlexDaniel> I mean‚Ä¶ SIGUSR1 is not a thing on windows, I guess? So that's a wasted effort anyway

[22:57] <AlexDaniel> let's maybe run it on all releases?

[22:58] <AlexDaniel> e: https://gist.github.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e

[22:58] <evalable6> AlexDaniel, rakudo-moar f1960baa9: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[22:58] <evalable6> AlexDaniel, Full output: https://gist.github.com/514b1bca9616d91de8a5587aff315402

[22:58] <timotimo>      0.000 ( 0.014 ms): :20677/20677 kill(pid: 20680 (bash), sig: TERM)                                    = 0

[22:58] <timotimo> TERM

[22:59] <AlexDaniel> e: https://gist.github.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e

[22:59] <AlexDaniel> huh?

[23:00] <timotimo> the process gets killed via spawn_cancel

[23:00] <timotimo> so i imagine after that point there is no longer a task in the event loop that corresponds to the process

[23:00] <AlexDaniel> c: HEAD https://gist.github.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e

[23:01] <AlexDaniel> committable6: help?

[23:01] <committable6> AlexDaniel, Like this: committable6: f583f22,HEAD say ‚Äòhello‚Äô; say ‚Äòworld‚Äô # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Committable

[23:01] <AlexDaniel> c: HEAD https://gist.githubusercontent.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e/raw/2c4ba68f5408ccd539a011a506704a844f3d0bdc/no-sigkill-what.p6

[23:01] <committable6> AlexDaniel, Successfully fetched the code from the provided URL

[23:01] <AlexDaniel> c: HEAD say 42

[23:02] <AlexDaniel> I have no idea‚Ä¶

[23:03] *** evalable6 left
[23:04] *** committable6 left
[23:06] *** committable6 joined
[23:07] <AlexDaniel> committable6: HEAD say 42

[23:07] <committable6> AlexDaniel, ¬¶HEAD(f1960ba): ¬´42‚ê§¬ª

[23:07] <AlexDaniel> committable6: HEAD https://gist.githubusercontent.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e/raw/fbbdb5d6103e4ad34eef58a85a1f2735dac6fa40/no-sigkill-what.p6

[23:07] <committable6> AlexDaniel, Successfully fetched the code from the provided URL

[23:08] <committable6> AlexDaniel, ¬¶HEAD(f1960ba): ¬´2613‚ê§TERM‚ê§SIGKILL not sent, absolute failure‚ê§ ¬´exit code = 42¬ª¬ª

[23:08] <AlexDaniel> 6c: https://gist.githubusercontent.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e/raw/fbbdb5d6103e4ad34eef58a85a1f2735dac6fa40/no-sigkill-what.p6

[23:08] <committable6> AlexDaniel, Successfully fetched the code from the provided URL

[23:09] <timotimo> did you har what i sad

[23:10] <committable6> AlexDaniel, https://gist.github.com/024379e1ccbe557a13887ccb39ee25d7

[23:10] <AlexDaniel> timotimo: yes, but I did not comprehend it

[23:10] <timotimo> "yeah we'll only ever kill a process once"

[23:10] <timotimo> perhaps i misread the code

[23:11] <timotimo> because i pretty much only read like five lines

[23:11] <AlexDaniel> 6c: https://gist.githubusercontent.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e/raw/198ca15ae228905ab8486df8f69f565f97c847bf/no-sigkill-what.p6

[23:11] <committable6> AlexDaniel, Successfully fetched the code from the provided URL

[23:12] <AlexDaniel> timotimo: so, that kinda sucks?

[23:12] <timotimo> yeah, we'd need a separate implementation for general-purpose signal sending

[23:12] <timotimo> there's also processes we haven't started that we may want to signal

[23:13] <timotimo> we may already have wanted something for that anyway

[23:13] <AlexDaniel> but how did I write this snippet then? https://docs.raku.org/type/Proc::Async

[23:13] <AlexDaniel> I'm pretty sure I did test the SIGKILL part

[23:14] <timotimo> couldn't tell ya :|

[23:14] <timotimo> didn't look when the code around that location changed

[23:14] <AlexDaniel> well, committable should come back to us soon‚Ä¶

[23:14] <committable6> AlexDaniel, https://gist.github.com/fbad4427402b414360b2c481ddf10fb7

[23:15] <AlexDaniel> it needs a `done`

[23:15] <AlexDaniel> 6c: https://gist.githubusercontent.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e/raw/957325ed1b75b7720a36a835e5fdcd1d460cf930/no-sigkill-what.p6

[23:15] <committable6> AlexDaniel, Successfully fetched the code from the provided URL

[23:18] <committable6> AlexDaniel, https://gist.github.com/41c94301806b1be3857c90dbc7219f0a

[23:18] <AlexDaniel> timotimo: that makes sense?

[23:18] <AlexDaniel> bisect: old=2017.10 https://gist.githubusercontent.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e/raw/957325ed1b75b7720a36a835e5fdcd1d460cf930/no-sigkill-what.p6

[23:19] <bisectable6> AlexDaniel, Successfully fetched the code from the provided URL

[23:19] <bisectable6> AlexDaniel, Bisecting by exit code (old=2017.10 new=f1960ba). Old exit code: 0

[23:19] <timotimo> where did uname come from

[23:20] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/964af5ee77bb8c354054c8610f5ead7d

[23:20] <bisectable6> AlexDaniel, (2017-11-14) https://github.com/rakudo/rakudo/commit/0378292e47166f4820bc3d2748c4f26709fc608c

[23:22] <AlexDaniel> timotimo: I think old rakudo versions did something dumb like trying to use the shell to run uname, or something

[23:22] <AlexDaniel> apparently it's not an issue anymore

[23:22] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/0378292e47166f4820bc3d2748c4f26709fc608c

[23:22] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2017.10-77-g2e12d47...2017.10-80-g7532371

[23:23] <AlexDaniel> Geth: ver https://github.com/Raku/nqp/commit/7ce25e23d183126a913a4f54fa0d105309573e59

[23:23] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/MoarVM/MoarVM/compare/2017.10-70-gb379050...2017.10-71-g8744857

[23:23] <AlexDaniel> that's not the one

[23:23] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/0378292e47166f4820bc3d2748c4f26709fc608c

[23:23] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2017.10-77-g2e12d47...2017.10-80-g7532371

[23:23] <AlexDaniel> Geth: ver https://github.com/Raku/nqp/commit/75323714e2bb69e12d5bac3140aab23f07de80d4

[23:23] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/MoarVM/MoarVM/compare/2017.10-70-gb379050...2017.10-75-ge694386

[23:24] <AlexDaniel> timotimo: is this anywhere near the code you were looking at?

[23:24] <timotimo> yes

[23:24] <AlexDaniel> which one?

[23:24] <timotimo> https://github.com/MoarVM/MoarVM/compare/2017.10-70-gb379050...2017.10-75-ge694386#diff-a7fd493b7525fee93a47ea5d3896ac76R60

[23:24] *** evalable6 joined
[23:24] <timotimo> i think this is more about "cancel before it was properly started" though

[23:25] <AlexDaniel> timotimo: alright‚Ä¶ can you file a bug report? My brain is toast

[23:25] <timotimo> i need a nap and then i'm hoping to be continuing with new-disp, but this irclog should be enough to get me or someone else up to speed to file the bug later

[23:25] <AlexDaniel> c: 0378292e4^,0378292e4 https://gist.githubusercontent.com/AlexDaniel/c624be8c78b062e56e2c8b5197795a8e/raw/957325ed1b75b7720a36a835e5fdcd1d460cf930/no-sigkill-what.p6

[23:25] <committable6> AlexDaniel, Successfully fetched the code from the provided URL

[23:25] <committable6> AlexDaniel, ¬¶0378292e4^: ¬´TERM‚ê§finished‚ê§0‚ê§9‚ê§¬ª ¬¶0378292: ¬´TERM‚ê§SIGKILL not sent, absolute failure‚ê§ ¬´exit code = 42¬ª¬ª

[23:25] <AlexDaniel> this is absolutely the one

[23:26] <AlexDaniel> okay, have a good nap!

[23:30] <AlexDaniel> .tell timotimo please file a ticket about .kill! Thanks! https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-06-27#l261

[23:31] <tellable6> AlexDaniel, I'll pass your message to timotimo

[23:32] <AlexDaniel> .tell jnthn can you file a ticket about signal()? You definitely can describe it better than me. Thanks! https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-06-27#l194

[23:32] <tellable6> AlexDaniel, I'll pass your message to jnthn

[23:37] *** AlexDaniel left
