[00:27] *** lucasb left
[01:34] *** Altai-man_ joined
[01:36] *** sena_kun left
[03:27] *** leont left
[03:35] *** sena_kun joined
[03:36] *** Altai-man_ left
[04:01] <vrurg> I can now .wrap a candidate of a multi method with a multi sub... And it works with inheritance... Finally...

[04:03] *** hungrydonkey joined
[05:34] *** Altai-man_ joined
[05:36] *** sena_kun left
[06:01] *** sena_kun joined
[06:02] *** Altai-man_ left
[06:24] *** Altai-man_ joined
[06:26] *** sena_kun left
[07:10] *** cognominal joined
[07:14] *** cognomin_ left
[07:27] *** hungrydonkey left
[07:30] *** hungrydonkey joined
[07:35] *** sena_kun joined
[07:36] *** Altai-man_ left
[08:05] <rba> lizmat, MasterDuke: If you both are in Lausanne Friday evenging 13 March, is there a chance for a dinner together? I can setup a meetup for this too and then let's see who is able to join from the Swissisch side?

[08:15] *** hungryd41 joined
[08:19] *** hungrydonkey left
[08:19] *** hungryd41 left
[08:26] *** jmerelo joined
[08:27] *** hungrydonkey joined
[08:27] *** Geth left
[08:28] *** Geth joined
[08:29] <rba> tyil: Try to do a windows rakudo star build now...

[08:31] <tyil> rba: nice

[08:31] <tyil> don't overwork yourself, though :)

[08:32] <tyil> I updated the raku.org website to refer to 2020.01 on the downloads page

[08:32] <rba> tyil: nice.

[08:44] *** hungrydonkey left
[08:45] *** hungrydonkey joined
[09:09] <rba> Using gcc from strawberry perl. Is this recommended or should I use Visual Studio?

[09:30] <tyil> rba: strawberry perl should work fine

[09:30] <tyil> that's what hankache has been using iirc

[09:32] <tyil> hankache did mention he had to change some things, but I don't have any details on what needed updating :/

[09:34] *** Altai-man_ joined
[09:36] <jmerelo> Just a reminder that the call for ideas for Outreachy is still open https://github.com/perl-foundation-outreach/outreachy-2020-ideas

[09:36] *** sena_kun left
[09:38] <rba> tyil: Aha. windows 'gmake install' : gmake: *** [Makefile:55: rakudo-install] Error 2 

[09:39] <rba> tyil: https://gist.github.com/rba/8b936b99981e917cda0b00d8dcc34208

[09:39] <rba> tyil: maybe this where hankache had do some changes?

[09:39] <tyil> that's the exact same error hankache encountered

[09:39] <tyil> I suspected that, on windows, there should be a .exe behind the perl6 (line 87 in your gist)

[09:40] <rba> tyil: would guess too.

[09:43] <rba> tyil: patrickb did some circle-ci builds. Will check the them...

[09:44] *** hungryd4 joined
[09:45] <rba> https://github.com/rakudo/rakudo/blob/master/.circleci/config.yml

[09:47] <rba> https://github.com/rakudo/rakudo/blob/master/tools/build/binary-release/build-windows.ps1

[09:48] *** hungrydonkey left
[09:49] *** jmerelo left
[09:51] <tyil> heh, never knew there was a --relocatable flag for rakudo

[09:52] <lizmat> Files=1303, Tests=111207, 211 wallclock secs (28.49 usr  7.90 sys + 2952.19 cusr 277.82 csys = 3266.40 CPU)

[09:55] <rba> tyil: --relocatable doesn't seem to work for 2020.01 yet.

[09:56] <tyil> :(

[09:57] <tyil> --relocatable is not in the main Makefile, but I can add it to the stage where it builds rakudo and see what happens

[09:58] <tyil> do NQP and MoarVM also support a --relocatable?

[09:58] <tyil> also, are there downsides to building rakudo with --relocatable?

[10:19] <lizmat> there shouldn't be, I'd say  :-)

[10:25] <lizmat> .ask chloekek could you give a reply on https://www.reddit.com/r/rakulang/comments/f95r2o/how_to_create_a_binary_executable_in_raku/ with regards to the status of your GSOC project of last year ?

[10:25] <tellable6> lizmat, I'll pass your message to chloekek

[10:28] <tyil> lizmat: I would think it should be a default if its possible, but I would also assume that the Rakudo devs have a reason not to make it a default yet

[10:35] <lizmat> m: use nqp; my $h := nqp::hash; my $a = "a"; my $p = start { loop { nqp::bindkey($h,++$a,1); nqp::print(" " ~ nqp::elems($h)) } }; loop { nqp::existskey($h,"a") }    # why does this stop execution in the "start" block ??

[10:35] <evalable6> lizmat, rakudo-moar 3ec58489e: OUTPUT: Â«(signal SIGHUP)  1Â«timed out after 10 secondsÂ»Â»

[10:36] <lizmat> jnthn ^^  ??

[10:36] <lizmat> is that final loop "too tight" ?

[10:37] <lizmat> FWIW, I was trying to determine whether it was ok for a thread to do an nqp::existkey on a hash that may be changed by other threads

[10:37] <lizmat> without locking

[10:42] *** hungrydonkey joined
[10:47] *** hungryd4 left
[11:05] * rba is unable to build successfully on windows :-(

[11:06] <tyil> rba: perhaps best to wait for a reply from hankache

[11:07] <rba> tyil: ok

[11:07] <tyil> (mostly because I don't do Windows so I can't help you out in any significant way)

[11:08] * Altai-man_ got a reply from dyncall folks

[11:08] <tellable6> 2020-02-25T07:02:46Z #raku <jmerelo> Altai-man would you be interested in including a GitHub action in MoarVM repo that test-compiled in Alpine and maybe other environments?

[11:08] * lizmat closed the PR

[11:09] <Altai-man_> lizmat++

[11:11] <Altai-man_> ok, so we're waiting for a robust fix, cherry-pick that && point

[11:15] <Altai-man_> Also, while we're on it... Anyone here objecting me doing moarvm releases routine (signing tags, updating website etc, except changelog, I think) which samcv usually does?

[11:17] <jnthn> lizmat: It's not OK for a thread to do that, but that program likely won't prove it because I believe spesh knows existskey is pure and will just throw it away. Then you have an empty loop and have the expression JIT fails to insert GC check bug that's already reported

[11:18] <jnthn> Altai-man_: No objections from me

[11:19] <lizmat> Altai-man_: nor from me :-)

[11:19] <lizmat> jnthn: ok, I think I understand  :-)

[11:28] <rba> tyil: back on macosx: run spectest with the rakudo-star-2020.01-01-macos-x86_64.dmg  -  hopefully this gives me a feeling if the build is fine on osx.

[11:31] <tyil> rba: I had one flappy test on GNU+Linux iirc

[11:31] <tyil> it failed once, and 4 consevutive runs after that showed no problems

[11:34] *** sena_kun joined
[11:36] *** Altai-man_ left
[11:56] <Geth> Â¦ rakudo: 83fed5543e | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[11:56] <Geth> Â¦ rakudo: Use a low level hash for resolved info

[11:56] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/83fed5543e

[12:24] <Geth> Â¦ rakudo: 2cc509c08f | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[12:24] <Geth> Â¦ rakudo: Make RMD an attribute

[12:24] <Geth> Â¦ rakudo: 

[12:24] <Geth> Â¦ rakudo: So that we only need to look up %ENV<RAKUDO_MODULE_DEBUG> once, when

[12:24] <Geth> Â¦ rakudo: the PrecompilationRepository object is created.  Also make the actual

[12:24] <Geth> Â¦ rakudo: RMD messages stand out more in the code for readability.

[12:24] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2cc509c08f

[12:30] <nine> lizmat: I wonder if our optimizer is smart enough to make $!RMD := $*RAKUDO_MODULE_DEBUG || sub ($) {}; faster than all the `if $!RMD`. In theory it could optimize away the whole call to the empty sub.

[12:31] <lizmat> you mean the static optimizer ?

[12:33] <nine> no, spesh

[12:33] <lizmat> I have no idea if spesh is smart enough for that

[12:34] <lizmat> in any case, I don't think it gets called enough to be marked hot enough for spesh to do anything with it

[12:35] <nine> true

[12:37] <Geth> Â¦ rakudo: f1cdfb1809 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[12:37] <Geth> Â¦ rakudo: Fix non-lethal typo

[12:37] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f1cdfb1809

[12:38] <nine> lizmat: but that makes me wonder if the optimizations are actually worth it. Could you measure an improvement?

[12:39] <lizmat> my benchmark atm is the install core modules step, and running that several times and see if the amount of time goes down

[12:40] <lizmat> basically run "make install" a few times

[12:40] <lizmat> I'm pretty sure most of these opts will not make much of a difference for me...

[12:41] <lizmat> but I've heard stories of people seeing precomp times of upto an hour in production

[12:41] <lizmat> so pretty sure it makes a difference there

[12:41] <nine> Well those could be solved by my commits from yesterday. If not then time is probably best spent improving our compilation times in general

[12:47] <nine> Considering that my example application that took almost 2 minutes to compile after a trivial change is really just 6KLOC in 140 modules, I'd not be surprised if really large production code bases with large dependency trees took forever.

[12:49] <lizmat> true, but I'm afraid my qualifications to improve compilation in general, or precompilation particularly, are insufficient

[12:51] <Geth> Â¦ rakudo: 9d1b3f635c | (Elizabeth Mattijsen)++ | 2 files

[12:51] <Geth> Â¦ rakudo: Make compiler-id a class variable

[12:51] <Geth> Â¦ rakudo: 

[12:51] <Geth> Â¦ rakudo: Also add Compiler.id as class method for esier access to the

[12:51] <Geth> Â¦ rakudo: compilation ID of the compiler.

[12:51] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9d1b3f635c

[12:54] <Geth> Â¦ rakudo: db6d2306d0 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[12:54] <Geth> Â¦ rakudo: Forgot to changes one occurrence of stagestats

[12:54] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/db6d2306d0

[12:57] *** leont joined
[13:19] <lizmat> around 3pm

[13:20] <lizmat> oops, ww

[13:20] *** patrickb joined
[13:21] <patrickb> tyil, lizmat: --relocatable is an option that can be passed to the `Configure.pl` of rakudo, nqp and moar. It's automatically forwarded.

[13:21] <patrickb> tyil, lizmat: From all I know relocatable builds are working fine also in the latest release. The only thing that broke a while ago and only recently got fixed is unicody paths on Windows.

[13:21] <tyil> patrickb: neat

[13:21] <patrickb> tyil, lizmat: Disadvantages of using --relocatable: You have to build rakudo, nqp and moarvm in the same prefix (so no separate install directories for the three). Also it's not supported on all platforms (e.g. OpenBSD is unsupported). It's also not used much yet and thus not as widely field-proven.

[13:22] <patrickb> rba: The gcc vs msvc decision is one with many subtile consequences. It influences which libraries you are able to link to. ugexe knows a fair bit about this. I came to the conclusion that it makes more sense to go for msvc (even though installation is a real pain). That's also what I do to create the precompiled packages that are featured on

[13:22] <patrickb> rakudo.org.

[13:23] <tyil> I can at least add optional support for it in the next Rakudo Star, then

[13:32] <patrickb> tyil: One of the "do it when there are spare tuits" things is changing the Rakudo Star installer (so not the source release, but the compiled one) to be relocatable and enabling selecting the install location.

[13:33] <patrickb> tyil: If we are not confident enough with the stability of the relocatable builds we could still create non relocatable builds of star, but I'm not sure that's worth the investment tbh.

[13:34] *** Altai-man_ joined
[13:34] <patrickb> off again

[13:34] *** patrickb left
[13:36] *** sena_kun left
[13:48] <lizmat> nine: is there a specific reason why RAKUDO_PRECOMP_LOADING is using JSON?   Wouldn't a string with "\0" joiners suffice ?

[13:53] <nine> lizmat: no, it just was convenient

[13:53] <lizmat> but using JSON is adding a quite bit of overhead

[13:53] <nine> A bit...to precompilation which takes forever anyway ;)

[13:54] <lizmat> well, looks like "\0" doesn't survive in %*ENV 's passed on with run anyway

[13:55] <nine> bummer

[13:55] <jnthn> Null termination is everywhere at that level, I guess...

[13:55] <lizmat> yeah, I gues

[14:04] <Geth> Â¦ rakudo: 7c9951cc52 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[14:04] <Geth> Â¦ rakudo: Streamline setting up of environment for precompilation

[14:04] <Geth> Â¦ rakudo: 

[14:04] <Geth> Â¦ rakudo: - use native hash to set up values, nqp::cloned from %*ENV

[14:04] <Geth> Â¦ rakudo: - don't use JSON to set up precompilation modules

[14:04] <Geth> Â¦ rakudo: - don't actually create a Set for circularity check, use (elem)

[14:04] <Geth> Â¦ rakudo: - access dynamic variables only once

[14:04] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7c9951cc52

[14:13] <lizmat> nine: shouldn't https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/PrecompilationRepository.pm6#L193 also need a $*OUT.flush ?

[14:17] <nine> lizmat: oh, yes indeed! Nice catch!

[14:18] <lizmat> I'm wondering whether using nqp::say wouldn't make a lot of sense there...

[14:24] <Geth> Â¦ rakudo: 83ddbabaf6 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[14:24] <Geth> Â¦ rakudo: Reduce number of $*W lookups

[14:24] <Geth> Â¦ rakudo: 

[14:24] <Geth> Â¦ rakudo: and also make sure we flush precompile-dependencies always

[14:24] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/83ddbabaf6

[14:28] *** masak joined
[14:32] <lizmat> afk for a few hours&

[14:39] <rba> patrickb: Got the message. Will try using msvc later this week.

[14:39] <tellable6> rba, I'll pass your message to patrickb

[14:41] <rba> I have run spectest on macosx using rakudo-star-2020.01-01-macos-x86_64.dmg. Got some errors back. May one with more spectest experience let me know if this is a good or a bad result, please: https://gist.github.com/rba/a06a6bea615d4f6cf71cd5fa5d915f26

[14:47] <lizmat> t/spec/S32-str/utf8-c8.t always fails for me on MacOS

[14:48] <lizmat> the others are TODO's that pass, so also ok

[14:48] <lizmat> as in non unexpected

[14:48] <lizmat> really afk&

[15:19] *** AlexDaniel left
[15:19] *** AlexDaniel joined
[15:19] *** AlexDaniel left
[15:19] *** AlexDaniel joined
[15:33] <japhb> lizmat, jnthn: Instead of null-byte separation, what about some other byte from the ASCII control block, like "\x01"?

[15:35] *** sena_kun joined
[15:37] *** Altai-man_ left
[16:15] <Geth> Â¦ rakudo: 196db682bc | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[16:15] <Geth> Â¦ rakudo: Fix booboos spotted by nine++

[16:15] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/196db682bc

[16:18] *** Ven_de_Thiel joined
[16:21] <rba> lizmat++

[16:40] <lizmat> nine: added some debug info around the react block

[16:40] <lizmat> for some reason, CompUnit::Repository::Staging is precompiled twice with the same id

[16:40] <lizmat> (and once as part of -Ilib I guess

[16:41] <lizmat> so why *is* CompUnit::Repository::Staging not part of the setting ?

[16:43] <lizmat> ah, looks like the last recomp is done explicitely

[16:53] <nine> lizmat: well it's not something an ordinary Raku user would need. I also used it as test case for out-of-setting repository implementations which prompted me to actually fix a couple of issues with those.

[16:54] <nine> lizmat: but it could also move into the setting or even fully into CURI

[16:54] * lizmat is testing that now  :-)

[16:55] <lizmat> I would love to save ~.5 second for each "make install"

[16:55] <lizmat> looks like it works out ok

[17:04] <nine> Still it's of no use to the majority of users

[17:10] <lizmat> true

[17:11] <lizmat> another question: why are the NativeCall submodules listed separately in the core module install script

[17:11] <lizmat> wouldn't they get automatically precomped when NativeCall is precomped ?

[17:11] <nine> No, installation needs all modules listed explicitly. Same as in a META6.json file

[17:12] <lizmat> why is that ?

[17:12] <lizmat> just curious ?

[17:13] <lizmat> because that *does* shave off about .5 of a make install for me

[17:14] <lizmat> and in my interpretation, modules being precomped because they're used in a module being precomped, shouldn't make a difference wrt findability ?

[17:15] <nine> Because having tools parse module files to find out which packages they contain, didn't work out well for Perl.

[17:16] <lizmat> but... this isn't about parsing source files?

[17:16] <lizmat> 1. NativeCall gets precompiled

[17:16] <lizmat> 2. precompilation encounters a "use NativeCall::Types"

[17:16] <nine> That's the reason why we want modules to be listed explicitly in meta data and why installation refuses to guess

[17:17] <lizmat> 3. search for precomped NativeCall::Types fails

[17:18] <lizmat> 4. start up another process to precomp NativeCall::Types

[17:18] <lizmat> 5. continue with precomping NativeCall

[17:18] <lizmat> I mean, that's how it works, no ?

[17:18] <lizmat> regardless of what is in the Distribution info

[17:19] <lizmat> or am I missing something ?

[17:20] <nine> That's how they would get precompiled, not how they would end up getting installed

[17:22] *** Ven_de_Thiel left
[17:23] <lizmat> aha... so I *was* missing something

[17:23] <lizmat> but the precomped file is created at the place it would be to be installed, right?

[17:24] <lizmat> it's just that the $*REPO wouldn't know about it, so a "use NativeCall::Types" would fail ?

[17:24] <nine> Unless....you're using the Staging repo, as then the precomp file wouldn't even be in the same place

[17:26] <nine> btw. I'd actually love to see install-core-dist.raku getting changed into a build-core-dist.raku and moved to the build stage with the actual installation happening with a simple cp

[17:28] <lizmat> you would have to elaborate on that for me, if you would like me to look into that

[17:30] <nine> Right now the script is running (and compiling) as part of the install target and installing directly into $(DESTDIR)$(RAKUDO_HOME)/core. Now the whole point of the Staging repo is to split compiling and installing, so you can compile with an unpriviledged user and need privileges only for the actual installation.

[17:30] <lizmat> nine: BTW, in the install script, it says 'core' on line 27, and 'CORE' on line 35....  is that correct ?

[17:30] <nine> Instead, we should compile into gen/ like we do for all other files and have the install target just copy those files to the final location

[17:31] <nine> lizmat: yes, 'core' is the repository's name while 'CORE' is the distribution's name

[17:34] *** Altai-man_ joined
[17:36] *** sena_kun left
[17:48] <lizmat> wow, getting a internal server error on a push to github

[17:50] <lizmat> https://www.githubstatus.com

[17:51] *** hungrydonkey left
[17:52] <leont> They've been less stable than usual for days now

[17:56] <jnthn> gah, got the internal server error too

[18:06] <lizmat> nine: is there some kind of precomp inspection module, and if not, would it be a good idea for me to write one, allowing me to better grok all of this ?

[18:10] <nine> lizmat: what exactly do you want to inspect?

[18:16] <lizmat> not sure, actually

[18:18] <lizmat> I guess, given a directory such as install/share/perl6/core/

[18:18] <lizmat> find out what it thinks is installed

[18:18] <lizmat> coming from the files in there

[18:19] <lizmat> (for CUR::Installation of course)

[18:20] <Geth> Â¦ rakudo: 551c157fa4 | (Elizabeth Mattijsen)++ | tools/build/install-core-dist.raku

[18:20] <Geth> Â¦ rakudo: Streamline core module install script

[18:20] <Geth> Â¦ rakudo: 

[18:20] <Geth> Â¦ rakudo: - use fewer dynamic variable lookups

[18:20] <Geth> Â¦ rakudo: - change mention of $*PERL to $*RAKU

[18:20] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/551c157fa4

[18:20] <lizmat> whee... github's back

[18:26] <nine> m: CompUnit::RepositoryRegistry.repository-for-name("core").installed>>.meta>><provides>>>.keys.say

[18:26] <evalable6> nine, rakudo-moar 551c157fa: OUTPUT: Â«((BUILDPLAN Test newline NativeCall::Compiler::GNU MoarVM::Profiler Pod::To::Text Telemetry NativeCall::Compiler::MSVC NativeCall CompUnit::Repository::Staging experimental snapper NativeCall::Types))â¤Â»

[18:27] <nine> lizmat: CURI is happy to answer that question

[18:28] <lizmat> nine: I get that: I guess I'm more speaking about a sanity test

[18:28] <lizmat> hmmm... not sure...  but thanks for the pointer for me to further research  :-)

[18:42] <lizmat> nine: if you don't mind, another question:

[18:42] <lizmat> https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/PrecompilationRepository.pm6#L224 shows a $checksum is copy

[18:42] <lizmat> and at https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/PrecompilationRepository.pm6#L234 that's set if no set already

[18:43] <lizmat> but then at https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/PrecompilationRepository.pm6#L237 we have a new lexical by the same name ?

[18:47] <lizmat> perhaps IO::Path could do with a "checksum" method  ?

[18:48] <lizmat> basically doing a nqp::sha1(self.slurp(:enc<iso-8859-1>))

[18:53] <moritz> sha1 is basically broken; we shouldn't encourage its use in new applications in userland

[18:56] <nine> lizmat: yeah that second variable is poorly named. Should probably be $unit-checksum or so

[18:57] <lizmat> but why the is-copy and //=   

[18:57] <nine> https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/PrecompilationRepository.pm6#L250

[18:57] <lizmat> without is copy and just // it would work?

[18:57] <lizmat> aha!

[18:58] <lizmat> ok, thanks for the enlightenment

[19:07] <Geth> Â¦ rakudo: 07643d373e | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[19:07] <Geth> Â¦ rakudo: Put all checksum making logic in one place

[19:07] <Geth> Â¦ rakudo: 

[19:07] <Geth> Â¦ rakudo: - making sure we use the same logic everywhere

[19:07] <Geth> Â¦ rakudo: - make sure we don't get LTA errors if the slurp failed

[19:07] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/07643d373e

[19:12] *** lucasb joined
[19:19] <lizmat> nine: any special reason why CompUnit::PrecompilationUnit::File only exists within CompUnit::PrecompilationStore::File ?

[19:35] *** sena_kun joined
[19:37] *** Altai-man_ left
[19:57] <nine> lizmat: yes, it's an implementation detail of CompUnit::PrecompilationStore::File

[19:58] <nine> As such it may know how PrecompilationStore::File works

[19:59] <lizmat> ok, then I wonder why it is not just called "File" in there

[20:00] <lizmat> the name with :: sorta implies outside visibility to me

[20:01] <Geth> Â¦ rakudo: e56eddd848 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationStore/File.pm6

[20:01] <Geth> Â¦ rakudo: Don't use lock if already initializedo

[20:01] <Geth> Â¦ rakudo: 

[20:01] <Geth> Â¦ rakudo: Also bind the state rather than assigning

[20:01] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e56eddd848

[20:02] <nine> lizmat: err...probably because I'm not 100 % sure how such nested names work :)

[20:16] <MasterDuke> rba: that would be cool, i don't have any other plans

[20:17] <rba> MasterDuke: Yet I realside today, that Iâm unable to join. :-( As I have company event.

[20:17] <MasterDuke> ha

[20:18] <rba> Uhh.

[20:18] <rba> I will ask around if someone of my organiser friends like to take the chance.

[20:21] <[Tux]> Rakudo version 2020.02-43-ge56eddd84 - MoarVM version 2020.02-4-gfee45b9b4

[20:21] <[Tux]> csv-test-xs-20      0.367 -  0.379

[20:21] <[Tux]> csv-ip5xs           0.741 -  0.791

[20:21] <[Tux]> test-t --race       0.869 -  0.873

[20:21] <[Tux]> test-t              1.848 -  1.870

[20:21] <[Tux]> csv-ip5xs-20        6.090 -  6.202

[20:21] <[Tux]> test                7.643 -  8.009

[20:21] <[Tux]> test-t-20 --race    8.493 -  8.730

[20:21] <[Tux]> csv-parser         23.632 - 23.762

[20:22] <[Tux]> test-t-20          30.613 - 31.193

[20:28] <lizmat> nine: if you create CompUnit::PrecompilationUnit::File with dependencies => ...

[20:28] <lizmat> and then call !read-depencies

[20:29] <lizmat> those dependencies will get added...  is that intentional?

[20:29] *** [Tux] left
[20:37] *** Xliff joined
[20:38] <nine> lizmat: no

[20:38] <lizmat> ok, so read-depencies should really reset the @!dependencies

[20:39] <nine> I'd like to say that's the nice thing about this class being private: we know how the only user behaves :)

[20:39] <nine> But yes, resetting @!dependencies would be cleaner

[20:39] <lizmat> well, it isn't that clear from the |c in one of the clients  :-)

[20:40] <lizmat> is new-unit called a lot ?

[20:42] <nine> Just once per file we precompile

[20:42] <lizmat> and the dependencies are only direct dependencies, right ?

[20:43] <nine> no, they're the transitive dependencies

[20:44] <nine> A precomp file knows the full list of all dependencies we need to load to make it happy.

[20:44] <lizmat> aha... so that list could become... big

[20:45] *** [Tux] joined
[20:45] <nine> Potentially all the modules of your application with all their dependencies. So several hundred to several thousands for really large apps

[20:46] <lizmat> right

[20:48] <nine> I wonder if we could even record the store we expect the dependency to be in. Then we wouldn't have to look up anything but open exactly the files we need.

[20:50] *** [Tux] left
[20:53] <nine> lizmat: I just realized: we call !read-dependencies on all dependencies of the precomp file we're after to get the dependency's checksum. We don't actually use the dependency's @!dependencies though (we do however need to advance the file's read position to the start of the bytecode)

[20:54] <lizmat> so what use is @!dependencies then ?

[20:55] <lizmat> if it is just about moving the pointer, then we could do that faster  :-)

[20:55] <lizmat> like setting the line seperator to "\n\n" and then doing a single .get ?

[20:56] <lizmat> ah, no, because we need the checksum

[20:57] <lizmat> hmmm... there *is* a dependencies method

[20:57] *** [Tux] joined
[20:58] *** [Tux] left
[21:00] <nine> It's necessary for the top level dependency. The one that's requested by the source file we're compiling

[21:00] <nine> We've got to get that list of transitive dependencies somewhere :)

[21:01] *** [Tux] joined
[21:01] <nine> Xliff: just curious. Do you see any change in compile times with this week's rakudo commits?

[21:02] <lizmat> nine: I think the next patch will make a difference

[21:11] <Xliff> nine: Your latest changes have blown up rakudo-precomp-nolock. I haven't had a chance to fix them.

[21:12] <Xliff> Every time I try and merge my changes into a new rakudo, it hangs on the final phase of "make install"

[21:12] <Xliff> Plus... $dayJob interference. :(

[21:12] <Geth> Â¦ rakudo: 20d3713c83 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationStore/File.pm6

[21:12] <Geth> Â¦ rakudo: Streamline CompUnit::PrecompilationUnit::File

[21:12] <Geth> Â¦ rakudo: 

[21:12] <Geth> Â¦ rakudo: - use binding attribute features

[21:12] <Geth> Â¦ rakudo: - replace BUILD by a reduced TWEAK method

[21:12] <Geth> Â¦ rakudo: - bind instead of assign where possible

[21:12] <Geth> Â¦ rakudo: - use nqp::push to collect dependencies (which can get to be many)

[21:12] <Geth> Â¦ rakudo: - remove !open method, it was only used in 1 location

[21:12] <Geth> Â¦ rakudo: - don't use deprecated slurp-rest, just slurp!

[21:12] <Geth> Â¦ rakudo: - rename $!file by much more indicatice $!handle

[21:12] <Geth> Â¦ rakudo: - don't read dependencies if we already have bytecode

[21:12] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/20d3713c83

[21:12] <Xliff> I'll let you know when they are fixed again. I am anxious to see what progress has been made.

[21:12] <Xliff> Latest working rakudo was 2020-1-227

[21:13] <Xliff> Gotta go.. $dayJob intrudes... again! 

[21:13] *** Xliff left
[21:13] <MasterDuke> would it be possible to change the circleci file to autopass instead of autofail until we get it fixed?

[21:34] *** Altai-man_ joined
[21:36] *** sena_kun left
[21:48] <Geth> Â¦ rakudo: 3134ec7761 | (Daniel Green)++ | src/Perl6/Compiler.nqp

[21:48] <Geth> Â¦ rakudo: Whitespace consistency fix for --help output

[21:48] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3134ec7761

[21:51] <MasterDuke> why would `- QAST::Op(callmethod ACCEPTS)       - QAST::WVal(Int)       - QAST::Var(local __lowered_param__2)` cause `This type cannot unbox to a native integer: P6opaque, Str` when the WVal is 1 and the Var is "abc"?

[21:52] <jnthn> m: 42.ACCEPTS("abc")

[21:53] <evalable6> jnthn, rakudo-moar 20d3713c8: OUTPUT: Â«Â»

[21:53] <jnthn> I have no idea...are you looking at --target=ast when you meant to look at --target=optimize, and the optimizer has turned it into something else?

[21:54] <MasterDuke> heh, i'm in the optimizer

[21:54] <MasterDuke> https://github.com/MasterDuke17/rakudo/commit/5343ac1579bc8e8ebcf7f6a731518141a9918dbb

[21:54] <jnthn> I suspect what you're looking at is not what is being run.

[21:56] <MasterDuke> this is the --target=optimize output https://gist.github.com/MasterDuke17/28c81a1371032f50acd9e42f4c985293

[21:57] <MasterDuke> https://gist.github.com/MasterDuke17/b0aa48e95db5e893935139d121345ff7 all of it

[22:00] <jnthn> Hm, what are you meant to return in a QAST::ParamTypeCheck?

[22:01] <jnthn> I thought it was an integer 1 or 0, but it looks like you're returning the parameter

[22:01] <MasterDuke> hm, i can change that

[22:01] <jnthn> (Actually a Bool is also fine)

[22:01] <jnthn> And you'll want to make sure the final non-matching one is falsey also

[22:02] <MasterDuke> but that error is occurring in that code, if i call `a(1)` it runs just fine

[22:02] <jnthn> yeah, that'll be why

[22:03] <MasterDuke> ?

[22:03] <jnthn> Because it can unbox 1 to use as the "is this passing the type check"

[22:04] <jnthn> Pass a(0)

[22:04] <jnthn> And I bet even if 0 is in the Junction it will fail anyway

[22:04] *** |Tux| left
[22:04] <MasterDuke> with 0 i get the normal `Constraint type check failed in binding to parameter '$a'; expected anonymous constraint to be met but got Int (0)`

[22:05] <jnthn> Yes, but did you put 0 into the junction?

[22:05] <MasterDuke> ooo, but yeah, if i put a 0 in the junction i get `Internal error: inconsistent bind result`

[22:05] <jnthn> m: sub foo($a where 0 | 1) { }; foo(0)

[22:05] <evalable6> jnthn, rakudo-moar 3134ec776: OUTPUT: Â«Â»

[22:05] <jnthn> Right :)

[22:05] <jnthn> So, it all fits.

[22:05] *** travis-ci joined
[22:05] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Don't use lock if already initializedo

[22:05] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/655045233 https://github.com/rakudo/rakudo/compare/07643d373e59...e56eddd8486e

[22:05] *** travis-ci left
[22:05] <MasterDuke> hm, guess i need to make sure the whole thing is wrapped in an istrue

[22:06] <jnthn> No, you need to return True or False when it matches or doesn't match, I think

[22:06] <lizmat> yeah, that sometimes works  :-)

[22:06] <lizmat> restarted the one failing job

[22:06] <jnthn> If you just wrap what you have in istrue it'll still do the wrong thing

[22:07] <jnthn> 'cus it's evaluating to the value being passed, not the outcome of the ACCEPTS

[22:07] <jnthn> bbiab, cooking time

[22:08] <Geth> Â¦ rakudo: b4d32c97ac | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationStore/File.pm6

[22:08] <Geth> Â¦ rakudo: Streamline CompUnit::PrecompilationStore::File

[22:08] <Geth> Â¦ rakudo: 

[22:08] <Geth> Â¦ rakudo: - added $!wont-lock attribute to avoid multiple $*W lookups

[22:08] <Geth> Â¦ rakudo: - use new attribute traits

[22:08] <Geth> Â¦ rakudo: - change BUILD to TWEAK method

[22:08] <Geth> Â¦ rakudo: - use binding where possible

[22:08] <Geth> Â¦ rakudo: - use foo.e instead of the roundabout foo ~~ :e

[22:08] <Geth> Â¦ rakudo: - call .mkdir without checking for existence, we don't check success

[22:08] <Geth> Â¦ rakudo: - replace a foo>>.unlink by .unlink for foo

[22:08] <Geth> Â¦ rakudo: - tighten up signatures

[22:08] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b4d32c97ac

[22:08] <lizmat> wow, that's late eating, jnthn 

[22:13] <MasterDuke> jnthn++ things are working again. alas, not a whole lot faster than before this optimization

[22:22] <Geth> Â¦ rakudo: 8ac2eecc23 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationStore/File.pm6

[22:22] <Geth> Â¦ rakudo: De-hllize the loaded cache

[22:22] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8ac2eecc23

[22:38] <lizmat> .ask nine https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/PrecompilationStore/File.pm6#L144 feels like the last .add is in the wrong set of params

[22:38] <tellable6> lizmat, I'll pass your message to nine

[22:39] <lizmat> .tell nine nvm, figured it

[22:39] <tellable6> lizmat, I'll pass your message to nine

[22:44] <MasterDuke> m: my $a; $a = 1.ACCEPTS("abc") for ^1_000; say $a   # heh, this creates a 6.1mb profile

[22:44] <evalable6> MasterDuke, rakudo-moar 8ac2eecc2: OUTPUT: Â«Falseâ¤Â»

[22:47] <MasterDuke> huh, and why are there 1k calls to Backtrace.new?

[22:47] <lizmat> MasterDuke: a Failure will create a Backtrace

[22:47] <lizmat> that's one of the things it makes it that heavy

[22:47] <MasterDuke> ah

[22:48] *** leont left
[22:50] <Geth> Â¦ rakudo: 4e3e937bc2 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationStore/File.pm6

[22:50] <Geth> Â¦ rakudo: De-hllize the dir-cache and the compiler-cache

[22:50] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4e3e937bc2

[23:16] *** leont joined
[23:22] *** lucasb left
[23:35] *** sena_kun joined
[23:36] *** Altai-man_ left
[23:44] *** AlexDaniel left
[23:47] *** hungrydonkey joined
