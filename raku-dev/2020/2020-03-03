[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:29] <Geth> ¦ rakudo: Kaiepi++ created pull request #3531: Make it harder for typechecking exceptions themselves to throw

[00:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3531

[00:31] *** pmurias left
[01:00] *** Xliff joined
[01:00] <Xliff> .

[01:00] <tellable6> 2020-02-26T14:19:05Z #raku-dev <lizmat> Xliff could you also do a timing on the 2020.02 release ?

[01:00] <tellable6> 2020-02-26T14:30:36Z #raku-dev <nine> Xliff: that's from 0 to working. Are compile times after modifying some source file better now?

[01:01] <Xliff> .tell lizmat If I did, it would not be parallel. I have not come up with a proper strategy for the latest precompile fixes that you and nine addressed.

[01:01] <tellable6> Xliff, I'll pass your message to lizmat

[01:02] <Xliff> .tell nine I will have to investigate those, but I am glad you addressed that issue. It may take me a free weekend, and I'll try and free one up this month.

[01:02] <tellable6> Xliff, I'll pass your message to nine

[01:04] <Xliff> .tell lizmat Was 2020.02-51-gb6851c3e7 the 2020.02 release?

[01:04] <tellable6> Xliff, I'll pass your message to lizmat

[01:13] *** Xliff left
[01:22] *** sena_kun joined
[01:24] *** Altai-man_ left
[01:37] *** leont left
[01:40] *** Xliff joined
[01:44] <Xliff> .tell lizmat Compile times for p6-GLib on 2020.02 release: https://github.com/Xliff/p6-GLib/blob/71b365ea75f186489fbf565d513081d8d762c061/stats/LastBuildResults-20200302 -- a 20 second reduction from 2020.02-51-gb6851c3e7

[01:44] <tellable6> Xliff, I'll pass your message to lizmat

[01:44] *** Kaiepi left
[01:44] *** Xliff left
[01:44] *** Kaiepi joined
[02:31] *** Kaiepi left
[02:35] *** Kaiepi joined
[03:22] *** Altai-man_ joined
[03:24] *** sena_kun left
[05:23] *** sena_kun joined
[05:24] *** Altai-man_ left
[06:06] *** jmerelo joined
[06:42] *** squashable6 left
[06:43] *** squashable6 joined
[06:43] *** squashable6 left
[06:46] *** squashable6 joined
[07:22] *** Altai-man_ joined
[07:24] *** sena_kun left
[07:26] *** lizmat left
[07:36] *** jmerelo left
[07:48] *** lizmat joined
[08:00] *** lizmat left
[08:54] *** lizmat joined
[09:04] <|Tux|> Rakudo version 2020.02.1-97-g830e0820b - MoarVM version 2020.02.1-35-ga7fa6daad

[09:04] <|Tux|> csv-test-xs-20      0.361 -  0.368

[09:04] <|Tux|> csv-ip5xs           0.699 -  0.717

[09:04] <|Tux|> test-t --race       0.833 -  0.883

[09:04] <|Tux|> test-t              1.801 -  1.871

[09:04] <|Tux|> csv-ip5xs-20        5.710 -  5.727

[09:04] <|Tux|> test                7.526 -  7.770

[09:04] <|Tux|> test-t-20 --race    9.182 -  9.648

[09:04] <|Tux|> csv-parser         23.194 - 23.621

[09:04] <|Tux|> test-t-20          30.624 - 30.633

[09:07] *** leont joined
[09:22] *** sena_kun joined
[09:24] *** Altai-man_ left
[09:56] *** |Tux| left
[09:59] <lizmat> m: say set 2,4,6

[09:59] <evalable6> lizmat, rakudo-moar 830e0820b: OUTPUT: «set(2 4 6)␤»

[09:59] <lizmat> m: say bag 2,4,6

[09:59] <evalable6> lizmat, rakudo-moar 830e0820b: OUTPUT: «Bag(2, 4, 6)␤»

[09:59] <lizmat> m: say mix 2,4,6

[09:59] <evalable6> lizmat, rakudo-moar 830e0820b: OUTPUT: «Mix(2, 4, 6)␤»

[09:59] <lizmat> why are Bag and Mix capitalized, but set isn't?

[10:00] <lizmat> also, what's with the comma's in Bag / Mix and lack thereof with set ?

[10:12] <Geth> ¦ rakudo: cf01f7a258 | (Elizabeth Mattijsen)++ | 2 files

[10:12] <Geth> ¦ rakudo: Make all QuantHash.gist use the same format

[10:12] <Geth> ¦ rakudo: 

[10:12] <Geth> ¦ rakudo: - type name up front

[10:12] <Geth> ¦ rakudo: - no comma's

[10:12] <Geth> ¦ rakudo: 

[10:12] <Geth> ¦ rakudo: Spotted while preparing presentation for the GPaRW 2020

[10:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cf01f7a258

[10:23] *** |Tux| joined
[10:49] *** MasterDuke left
[10:56] *** unclechu left
[10:56] *** AlexDaniel` left
[10:56] *** CIAvash left
[10:57] *** rba[m] left
[10:59] *** Geth left
[10:59] *** Geth joined
[11:19] *** CIAvash joined
[11:21] *** Altai-man_ joined
[11:24] *** sena_kun left
[11:38] *** lizmat_ joined
[11:40] *** unclechu joined
[11:40] *** AlexDaniel` joined
[11:40] *** rba[m] joined
[11:41] *** lizmat left
[11:57] *** squashable6 left
[12:00] *** squashable6 joined
[12:21] *** lizmat_ is now known as lizmat

[12:39] <Geth> ¦ roast/RAKULIB-problem: ab8c5db7e4 | (Tom Browder)++ | 2 files

[12:39] <Geth> ¦ roast/RAKULIB-problem: remove unneeded lines

[12:39] <Geth> ¦ roast/RAKULIB-problem: review: https://github.com/perl6/roast/commit/ab8c5db7e4

[12:45] <tbrowder> anyone here ever work with handling the "experimental" module? i'm getting a strange error in a PERL6LIB test where rakudo can't find the experimental module. see roast PR #628.

[12:49] <lizmat> the "experimental" module is installed, so should not require anything PERL6LIB / RAKULIB / -I lib related

[12:57] *** lucasb joined
[13:01] <tbrowder> exactly, so it looks like a lurking pest in the code somewhere.

[13:04] <tbrowder> it's strange that it's only triggered by PERL6LIB and it only appeared when, at ugexe's suggestion, we changed the old test for PERL6LIB to eliminate generating and unlinking a test module, instead we use an existing test module in roast.

[13:04] <Altai-man_> lizmat, ping?

[13:04] <lizmat> pong

[13:04] <Altai-man_> lizmat, hi! Do you by chance have rights to do https://github.com/MoarVM/moarvm.org/pull/11 ?

[13:05] <lizmat> nope  :-(

[13:05] <Altai-man_> :S

[13:09] * lizmat wonders why === is not listed as a set operator, and why ≡ isn't a unicody alternative to it

[13:10] <lizmat> m: say set(<a b c>) === set(<b c a>)

[13:10] <evalable6> lizmat, rakudo-moar cf01f7a25: OUTPUT: «True␤»

[13:10] <lizmat> m: say <a b c> === <b c a>

[13:10] <evalable6> lizmat, rakudo-moar cf01f7a25: OUTPUT: «False␤»

[13:10] <lizmat> m: say <a b c> === <a b c>

[13:10] <evalable6> lizmat, rakudo-moar cf01f7a25: OUTPUT: «False␤»

[13:10] <lizmat> m: say <a b c> (===) <a b c>   # should coerce either side to Set and then compare the .WHICH

[13:10] <evalable6> lizmat, rakudo-moar cf01f7a25: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[13:10] <evalable6> lizmat, Full output: https://gist.github.com/c2a6aeeb3e67344b38d7ddde69a11edc

[13:22] *** sena_kun joined
[13:24] *** Altai-man_ left
[13:33] *** |Tux| left
[13:37] *** |Tux| joined
[13:46] *** lizmat left
[13:47] *** |Tux| left
[13:50] *** |Tux| joined
[14:08] *** pmurias joined
[14:09] *** Xliff joined
[14:10] <Xliff> .

[14:10] *** Xliff left
[15:21] *** Altai-man_ joined
[15:24] *** sena_kun left
[16:02] *** pmurias left
[16:28] *** lizmat joined
[16:49] *** lizmat left
[17:22] *** sena_kun joined
[17:24] *** Altai-man_ left
[18:08] *** AlexDaniel left
[18:24] *** pmurias joined
[19:05] *** pmurias left
[19:06] *** pmurias joined
[19:21] *** Altai-man_ joined
[19:24] *** sena_kun left
[19:45] *** squashable6 left
[19:47] *** squashable6 joined
[20:02] *** pmurias left
[20:39] *** MasterDuke joined
[20:45] <MasterDuke> how come these native array methods check the given index https://github.com/rakudo/rakudo/blob/master/src/core.c/native_array.pm6#L600-L637, but the shaped ones https://github.com/rakudo/rakudo/blob/master/src/core.c/native_array.pm6#L1982-L2011 don't?

[21:22] *** sena_kun joined
[21:24] *** Altai-man_ left
[22:17] *** lizmat joined
[23:22] *** Altai-man_ joined
[23:24] *** sena_kun left
[23:51] <MasterDuke> m: my int @a; say @a.^roles

[23:51] <evalable6> MasterDuke, rakudo-moar cf01f7a25: OUTPUT: «((array::intarray[int]) (Positional[int]) (Iterable))␤»

[23:52] <MasterDuke> ^^^ why is it `array::intarray[int]`? it's already an intarray, why is is parameterized again? what would an `array::intarray[str]` look like?

[23:52] *** leont left
