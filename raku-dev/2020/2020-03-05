[00:18] *** Xliff joined
[01:03] *** MasterDuke left
[01:22] *** sena_kun joined
[01:24] *** Altai-man_ left
[01:53] *** tobs left
[02:05] *** tobs joined
[02:27] *** leont left
[03:21] *** Altai-man_ joined
[03:24] *** sena_kun left
[03:31] <Geth> ¦ rakudo: 8f015aa0e2 | (Vadim Belman)++ | tools/templates/NQP_REVISION

[03:31] <Geth> ¦ rakudo: [NQP Bump] Brings 8 commits

[03:31] <Geth> ¦ rakudo: 

[03:31] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2020.02.1-6-gb0ddeda68...2020.02.1-14-g0e341d45e

[03:31] <Geth> ¦ rakudo: 0e341d45e Merge pull request #601 from vrurg/rakudo_3499

[03:31] <Geth> ¦ rakudo: 87a811e58 Merge branch 'master' into rakudo_3499

[03:31] <Geth> ¦ rakudo: 83ffeec98 [MoarVM Bump] Brings 3 commits

[03:31] <Geth> ¦ rakudo: 3d69dc107 Merge pull request #602 from vrurg/fix-a-dep

[03:31] <Geth> ¦ rakudo: 2dad36fd4 Add nextdispatcherfor/takenextdispatcher to JVM backend

[03:31] <Geth> ¦ rakudo: a6d85cdce Merge branch 'master' into rakudo_3499

[03:31] <Geth> ¦ rakudo: e143e024d Add a missing dependency

[03:31] <Geth> ¦ rakudo: aadea8867 Add nextdispatcherfor/takenextdispatcher ops

[03:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8f015aa0e2

[04:27] *** Xliff left
[05:23] *** sena_kun joined
[05:24] *** Altai-man_ left
[06:03] *** lizmat left
[06:38] *** Xliff joined
[06:40] *** ZzZombo left
[06:42] *** ZzZombo joined
[06:48] *** ZzZombo left
[06:50] *** ZzZombo joined
[07:06] *** Xliff left
[07:09] *** lizmat joined
[07:21] *** Altai-man_ joined
[07:24] *** sena_kun left
[07:26] *** ZzZombo left
[07:29] *** ZzZombo joined
[07:35] * lizmat pulled, built, test and spectest ok

[07:36] *** lizmat left
[07:54] *** ZzZombo left
[07:54] *** ZzZombo joined
[08:06] *** lizmat joined
[08:49] <nine> This crops up quite frequently: push_o requires a concrete object (got a ThreadPoolScheduler::Queue type object instead)

[08:52] *** lizmat left
[09:01] *** lizmat joined
[09:07] *** rypervenche left
[09:07] *** CIAvash left
[09:07] *** rba[m] left
[09:07] *** Kaiepi left
[09:07] *** finsternis left
[09:07] *** unicodable6 left
[09:07] *** greppable6 left
[09:07] *** sourceable6 left
[09:07] *** nativecallable6 left
[09:07] *** shareable6 left
[09:07] *** bloatable6 left
[09:07] *** committable6 left
[09:07] *** coverable6 left
[09:22] *** sena_kun joined
[09:24] *** Altai-man_ left
[09:39] *** lizmat left
[09:43] *** rypervenche joined
[09:43] *** rba[m] joined
[09:43] *** CIAvash joined
[09:43] *** Kaiepi joined
[09:43] *** finsternis joined
[09:43] *** unicodable6 joined
[09:43] *** greppable6 joined
[09:43] *** nativecallable6 joined
[09:43] *** sourceable6 joined
[09:43] *** shareable6 joined
[09:43] *** bloatable6 joined
[09:43] *** committable6 joined
[09:43] *** coverable6 joined
[09:56] *** lizmat joined
[09:58] <nine> The push_o thing actually seems to be relatively recent. I didn't do as many builds before as I'm doing now, but I don't remember running into this ever.

[10:00] <lizmat> nine: do you have a gist reproducing that ?

[10:01] <nine> Unfortunately not. It does crop at all over the place in some of the builds. I've seen it when building nqp and in several modules.

[10:03] <nine> also in rakudo's install-core-dist.p6

[10:04] <nine> Could be related to the I/O thread

[10:07] <nine> Actually I'm not 100 % sure if I've seen it in nqp. That one seems to be failing most often in 111-spawnprocasync.t and 113-run-command.t with non-zero wait status: 6

[11:21] *** Altai-man_ joined
[11:24] *** sena_kun left
[11:39] *** lizmat left
[12:16] *** leont joined
[12:20] *** lizmat joined
[12:23] <|Tux|> Rakudo version 2020.02.1-99-g8f015aa0e - MoarVM version 2020.02.1-35-ga7fa6daad

[12:23] <|Tux|> csv-test-xs-20      0.360 -  0.364

[12:23] <|Tux|> csv-ip5xs           0.699 -  0.707

[12:23] <|Tux|> test-t --race       0.821 -  0.824

[12:23] <|Tux|> test-t              1.799 -  1.829

[12:23] <|Tux|> csv-ip5xs-20        5.824 -  6.249

[12:23] <|Tux|> test                7.796 -  7.841

[12:23] <|Tux|> test-t-20 --race    8.838 -  9.107

[12:23] <|Tux|> csv-parser         24.320 - 24.479

[12:23] <|Tux|> test-t-20          29.812 - 30.573

[12:50] *** ZzZombo_ joined
[12:53] *** ZzZombo left
[12:53] *** ZzZombo_ is now known as ZzZombo

[13:22] *** sena_kun joined
[13:24] *** Altai-man_ left
[13:30] <nine> .seen pmurias

[13:30] <tellable6> nine, https://gist.github.com/5333b482be26404a5f041c8fb25972ce

[14:16] *** lucasb joined
[14:22] <vrurg> lizmat: BTW, it turns out Backtrace is already lazy in a way.

[15:21] *** Altai-man_ joined
[15:24] *** sena_kun left
[15:27] <Geth> ¦ rakudo/master: 11 commits pushed by (Vadim Belman)++

[15:27] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/8f015aa0e2c1...1de9b29429b6

[15:28] <Geth> ¦ roast: 92ee3413e6 | (Vadim Belman)++ | S06-advanced/dispatching.t

[15:28] <Geth> ¦ roast: Add a regression test

[15:28] <Geth> ¦ roast: 

[15:28] <Geth> ¦ roast: This test is ok when dispatcher implementation utilizing

[15:28] <Geth> ¦ roast: `nextdispatcherfor/takenextdispatcher` ops is merged.

[15:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/92ee3413e6

[15:28] <Geth> ¦ roast: 5a14ec2385 | (Vadim Belman)++ (committed using GitHub Web editor) | S06-advanced/dispatching.t

[15:28] <Geth> ¦ roast: Merge pull request #627 from vrurg/rakudo_3499

[15:28] <Geth> ¦ roast: 

[15:28] <Geth> ¦ roast: Add a regression test

[15:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5a14ec2385

[16:23] *** lizmat left
[17:22] *** sena_kun joined
[17:24] *** Altai-man_ left
[17:33] *** leont left
[17:47] *** Xliff joined
[17:47] <Xliff> How can you get the value out of a parameter object?

[17:48] <Xliff> m: sub a ('one', 'two', 'three') { say &?ROUTINE.signature.params.map( *.values ).join(', ') }; a('one', 'two', 'three');

[17:48] <camelia> rakudo-moar 8c995febd: OUTPUT: «Parameter<60800104>, Parameter<60800240>, Parameter<60800376>␤»

[17:48] <Xliff> I want to get <one two three>

[17:48] <Xliff> m: sub a ('one', 'two', 'three') { say &?ROUTINE.signature.params.map( *.type.^name ).join(', ') }; a('one', 'two', 'three');

[17:48] <camelia> rakudo-moar 8c995febd: OUTPUT: «Str, Str, Str␤»

[17:48] <Xliff> m: sub a ('one', 'two', 'three') { say &?ROUTINE.signature.params.map( *.name.^name ).join(', ') }; a('one', 'two', 'three');

[17:48] <camelia> rakudo-moar 8c995febd: OUTPUT: «Nil, Nil, Nil␤»

[17:49] *** leont joined
[17:49] <sena_kun> Xliff, if you know it's type, you can .gist and coerce

[17:50] <sena_kun> s/it's/its/

[17:50] <Xliff> m: sub a ('one', 'two', 'three') { say &?ROUTINE.signature.params.map( *.gist.Str ).join(', ') }; a('one', 'two', 'three');

[17:50] <camelia> rakudo-moar 8c995febd: OUTPUT: «"one", "two", "three"␤»

[17:50] <Xliff> \o/

[17:51] <Xliff> sena_kun++!

[17:51] <Xliff> m: sub a ('one', 'two', 'three') { say &?ROUTINE.signature.params.map( *.gist ).join(', ') }; a('one', 'two', 'three');

[17:51] <camelia> rakudo-moar 8c995febd: OUTPUT: «"one", "two", "three"␤»

[17:51] <sena_kun> Xliff, I am not sure if this approach is LTA, maybe it is, but at least it's obvious. :)

[17:52] <Xliff> Actually, it's not.

[17:52] <Xliff> A Parameter.value would have been obvious.

[17:52] <Xliff> But this'll do.

[17:53] *** MasterDuke joined
[17:54] <sena_kun> well, maybe not "obvious", which is not the right word, but I mean "it seems like a bruteforce hack and it works".

[17:54] <sena_kun> as I imagine coercing is not the efficient/fastest thing in the world

[17:55] <Xliff> You are correct, sir!

[19:10] *** MasterDuke left
[19:21] *** Altai-man_ joined
[19:24] *** sena_kun left
[20:24] *** MasterDuke joined
[20:37] *** Xliff left
[21:14] *** TreyHarris left
[21:23] *** sena_kun joined
[21:24] *** Altai-man_ left
[21:51] <MasterDuke> m: constant N = 1_000_000; my int @a[N]; @a[$_] = $_ for ^N; say @a[N-1]; say now - INIT now

[21:51] <camelia> rakudo-moar 8c995febd: OUTPUT: «999999␤5.319064␤»

[21:52] <MasterDuke> ^^^ takes ~3.2s on my machine, but i have a terrible hack of a patch that drops it to ~0.16

[21:53] <MasterDuke> unfortunately the rakudo build dies at the 'Preparing installation' stage with `STable conflict detected during deserialization. (Probable attempt to load a mutated module or modules that cannot be loaded together).`

[22:12] <MasterDuke> the hack is to add `self.publish_method_cache($obj)` https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/MROBasedMethodDispatch.nqp#L12 and https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/MROBasedMethodDispatch.nqp#L19 and `self.publish_type_cache($obj)`

[22:12] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/MROBasedTypeChecking.nqp#L20 and https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/MROBasedTypeChecking.nqp#L25

[22:15] <MasterDuke> before there were 1m calls to find_method and 2m calls to type_check (taking almost 3s in total), after about 20 apiece (taking no time)

[22:18] <MasterDuke> setting RAKUDO_MODULE_DEBUG during the 'Preparing installation' stage gives: ` 1 RMD: Precompiling /home/dan/Source/perl6/install/share/perl6/core/sources/947BDAB9F96E0E5FCCB383124F923A6BF6F8D76B failed: 1`

[22:18] <MasterDuke> `8660F65A7B3492675BB3B2058DB30E411A4C4E54core#sources/8660F65A7B3492675BB3B2058DB30E411A4C4E5489970C41D2528746FA4420FEC534FFFB40D3DB64CompUnit::DependencySpecification.new(short-name => "NativeCall::Types", from => "Perl6", version-matcher => Bool::True, auth-matcher => Bool::True, api-matcher => Bool::True)`

[22:21] <MasterDuke> but that may not be all that relevant anyway, since there should be some better way of updating those caches

[22:30] *** lizmat joined
[22:31] <MasterDuke> ah, wrapping the `nqp::setmethcache, nqp::setmethcacheauth` and `nqp::settypecache` in `nqp::scwbdisable/nqp::scwbenable` let the rakudo install finish

[22:37] <MasterDuke> heh, but neither test or spectest are happy

[22:38] <MasterDuke> failure in t/04-nativecall/05-arrays.t and 16 spectest files

[22:56] *** lucasb left
[23:08] *** MasterDuke left
[23:22] *** Altai-man_ joined
[23:25] *** sena_kun left
[23:43] <Geth> ¦ rakudo: MasterDuke17++ created pull request #3533: Force publish type cache if found in the MRO

[23:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3533

