[00:04] *** dogbert17 joined
[00:07] *** dogbert11 left
[00:07] *** Xliff left
[00:21] *** dogbert11 joined
[00:23] *** dogbert17 left
[00:46] *** sena_kun left
[00:56] *** Xliff joined
[01:00] *** titsuki_ left
[01:01] *** sena_kun joined
[01:24] <Xliff> nine: Well, another strike out, here. I thought that file locking would block for as long as it needed, yet this comes up almost immediately -- "Could not obtain blocking, exclusive lock: Failed to lock filehandle: 9 in block <unit> at /home/cbwood/Projects/rakudo-precomp-nolock/tools/build/install-core-dist.p6 line 35"

[01:35] <Xliff> Ah! Maybe not. Now have it working through "make install"... and with the right version! This is a good sign.

[01:40] <TreyHarris> Xliff: Thinking a bit more about it, as a sysadmin originally, I think seeing Raku and NativeCall, many Perl/Python/Ruby-only coders who are intimidated by C would very well think--"gee, that looks a lot easier than C, I can handle that". So beefing up the "marshalling/unmarshalling" info (which is pretty well covered in the NativeCall tutorial, but does assume you know, e.g., the difference

[01:40] <TreyHarris> between a struct an union and how enums work)--how to get data from a Raku data structure, into a native call, and back out again--would actually probably be a very good thing for giving Raku more killer app areas

[01:43] <TreyHarris> I've wanted a Proc::ProcessTable port for awhile, maybe when my current engagement ends I should do the port babel-style as a tutorial on how to create a NativeCall interface based solely on proc(5) and procinfo(8) and header files without referring to C source.

[01:46] <TreyHarris> Dealing with jiffies and strftime might be a bit of an issue.

[01:48] <TreyHarris> Or maybe not: https://modules.raku.org/dist/Date::Calendar::Strftime:cpan:JFORGET (jforget++)

[01:58] <Xliff> TreyHarris: Actually, that sounds like fun.

[01:58] <Xliff> Pretty much 90% of p6-GtkPlus was written that way (from the .h files... no .c knowledge necessary aside from how to read the API)

[01:59] <Xliff> If you'd be interested in help, I'd be glad to pitch in.

[01:59] <TreyHarris> I did a simple p5 wrapper and that was so easy, a port seemed unnecessary. But it's simple enough (particularly if I just seed it with Linux and Darwin or something and accept PR's for any other OS's) that I think it would be a good exercise.

[02:00] <Xliff> True, enough.

[02:00] <TreyHarris> Xliff: sure, I'll loop you in when I have a skeleton. What editor do you use, out of curiosity?

[02:01] <Xliff> Atom these days, with a sprinkling of vim.

[02:04] <TreyHarris> Okay. I haven't had a look at what new LP tools are out there these days, but the last time I did around 2015, Org-mode was teh siht if you used Emacs. But I don't think it matters--I think for these sorts of things, weave/tangling isn't really necessary except once, when you're writing the English part. After that, you pull the code out and do any future coding in the native files and leave the

[02:04] <TreyHarris> literate source alone as an artifact

[02:06] <TreyHarris> I doubt I'd even publish the org or web or whatever files except rendered as html

[02:07] <Xliff> Sounds like a plan, then.

[02:07] <TreyHarris> oh, interesting. some people are using jupyter for that these days. makes sense.

[02:08] <Xliff> Hah! Sure does.

[02:09] <TreyHarris> The one thing about the p5 wrapper I did to Proc::ProcessTable is that its interface is very un-Rakuish, so if you wanted to glance at it on CPAN and give me any thought on a more Raku interface, that'd be awesome

[02:10] <Xliff> Hmmm.... OK

[02:11] <TreyHarris> It's mostly because of the lack of proper iterables or lazies in Perl, so, seems ripe for Rakuification

[02:11] <Xliff> https://metacpan.org/release/Proc-ProcessTable/source/lib/Proc/ProcessTable.pm <- This one?

[02:13] <TreyHarris> huh, I thought it was this one: https://github.com/jwbargsten/perl-proc-processtable but its VERSION is 0.02, where the one you're linking to is 0.59, so that's odd

[02:13] <Xliff> Oh. I am looking at that one, too.

[02:14] <TreyHarris> ah, looks like that's just an old snapshot... but... the version regressed? hmm

[02:15] <TreyHarris> oh, no, every .pm has its own independent VERSION and I wass looking at Proc.pm

[02:15] <TreyHarris> nm

[02:16] <Xliff> Hmm... we can replace the use of Storable with a JSON file.

[02:16] <TreyHarris> yeah, I used YAML

[02:17] <TreyHarris> JSON's smarter for anything being used for more than just me for a one-off :-)

[02:19] <Xliff> Heh.

[02:19] <Xliff> Where's your wrapper?

[02:22] <TreyHarris> On a VM on a share on a machine whose power supply I need to get around to replacing :-) It was stupid, stupid though. I think I copied the... oh, no, I just eliminated the cache_ttys option because that's not an expensive operation on Linux

[02:23] <TreyHarris> But I just cloned the source and removed the whole Storable thing

[02:23] <Xliff> HAH!

[02:26] <Xliff> I'd almost want to write this as pure raku...

[02:26] <Xliff> Burt that might be me suffering from Not Invented Here...

[02:30] <TreyHarris> Could you do pure Raku on a /proc-less OS, though?

[02:30] <Xliff> Ah. Nope.

[02:30] <Xliff> Depends on how difficult reading the process table is, though.

[02:31] <Xliff> Would need need a C-Helper lib for all the OSes that did not support /proc

[02:31] <Xliff> So we'd have to abstract the table representation.

[02:45] *** sena_kun left
[02:52] *** Xliff left
[02:56] *** Xliff joined
[02:59] *** sena_kun joined
[03:04] <Xliff> Files=1302, Tests=109848, 180 wallclock secs (27.17 usr  4.08 sys + 3180.22 cusr 170.38 csys = 3381.85 CPU)

[03:04] <Xliff> ^ TEST_JOBS=20 ... no lock on .precomp

[03:05] <Xliff> Will try my firehose on it, next.

[03:37] <Xliff> \o/

[03:37] <Xliff> Parallel compile: p6-GLib + p6-GIO + p6-Pango + p6-GDK + p6-GtkPlus < 1800s

[03:38] <Xliff> Original compile: p6-GtkPlus by itself takes 1918.1 seconds

[03:55] <Geth> Â¦ rakudo: Xliff++ created pull request #3454: Removes full directory lock on .precomp, allowing for faster parallel compilation

[03:55] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3454

[04:45] *** sena_kun left
[04:59] *** sena_kun joined
[06:46] *** sena_kun left
[07:00] *** sena_kun joined
[07:30] *** domidumont joined
[08:08] *** AlexDaniel joined
[08:08] *** AlexDaniel left
[08:08] *** AlexDaniel joined
[08:46] *** sena_kun left
[09:00] *** sena_kun joined
[09:09] <nine> Xliff: we absolutely do not want to rely on file modification time stamps. On FAT32 the precision is 2 full seconds. That's why I replaced all time stamp checks with checksums.

[09:11] <nine> Xliff: this code works for checking if a precomp file is up-to-date already: https://github.com/rakudo/rakudo/pull/3454/commits/793f9793aaed4c9522096601b26b68d2cd9ba96c#diff-e54733c8a6951a60cd0f0d931fb22e84L239

[09:41] *** domidumont left
[09:42] *** domidumont joined
[10:16] <lizmat> Files=1302, Tests=109837, 211 wallclock secs (28.50 usr  8.12 sys + 2936.30 cusr 276.18 csys = 3249.10 CPU)

[10:20] <nine> No candidate found for 'zef'.

[10:20] <nine> You'd think that I of all people would have an easy time fixing this error. But...

[10:45] *** sena_kun left
[11:00] *** domidumont left
[11:01] <Geth> Â¦ rakudo: 593db2d7e4 | (Stefan Seifert)++ | tools/install-dist.p6

[11:01] <Geth> Â¦ rakudo: Remove deprecated support for implicit Distribution::Builder prefix

[11:01] <Geth> Â¦ rakudo: 

[11:01] <Geth> Â¦ rakudo: Better be explicit. AFAIK Inline::Python was the only module depending

[11:01] <Geth> Â¦ rakudo: on this and has been fixed already.

[11:01] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/593db2d7e4

[11:01] <Geth> Â¦ rakudo: 4c6c02789c | (Stefan Seifert)++ | tools/install-dist.p6

[11:01] <Geth> Â¦ rakudo: Add a --build-only option for install-dist.p6

[11:01] <Geth> Â¦ rakudo: 

[11:01] <Geth> Â¦ rakudo: When packaging, build, test and install can be separate steps and tests

[11:01] <Geth> Â¦ rakudo: may need building before them.

[11:01] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4c6c02789c

[11:01] *** sena_kun joined
[11:01] <Geth> Â¦ rakudo: 411db10ec5 | (Stefan Seifert)++ | tools/install-dist.p6

[11:01] <Geth> Â¦ rakudo: Make building optional when installing in install-dist.p6

[11:01] <Geth> Â¦ rakudo: 

[11:01] <Geth> Â¦ rakudo: When --build-only is used in a previous step, we may skip it at

[11:01] <Geth> Â¦ rakudo: installation time.

[11:01] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/411db10ec5

[11:19] *** patrickb joined
[11:20] <patrickb> o/

[11:20] <tellable6> 2020-01-29T15:50:49Z #raku-dev <tony-o_> patrickb yes - i can write that up, i'll probably write something up friday or after i get some buy in from ugexe on how we're going to consume this huge meta file

[11:46] <Xliff> nine: Can that check be deferred until after the lock is obtained?

[11:47] <nine> it must be

[11:47] <nine> otherwise the precomp file could become outdated while you were waiting for the lock

[11:49] <Xliff> 'k. Will update later. 

[12:26] <Xliff> Updated, but not tested. I have to get ready for $dayJob.

[12:30] *** domidumont joined
[12:46] *** sena_kun left
[13:01] *** sena_kun joined
[13:07] *** titsuki_ joined
[13:29] *** lucasb joined
[13:52] *** titsuki_ left
[14:45] *** sena_kun left
[14:46] <nine> So, who's at FOSDEM this weekend? And how can I meet any of you today?

[14:46] * [Coke] hopes folks have fun at FOSDEM!

[14:49] * [Coke] wonders if he was at the last perl conference in canada.

[15:00] *** sena_kun joined
[15:46] <Geth> Â¦ rakudo/cci-precomp-build: 6504be7b37 | (Patrick BÃ¶ker)++ | 5 files

[15:46] <Geth> Â¦ rakudo/cci-precomp-build: Add a CI precomp release build pipeline

[15:46] <Geth> Â¦ rakudo/cci-precomp-build: 

[15:46] <Geth> Â¦ rakudo/cci-precomp-build: This uses CircleCI.

[15:46] <Geth> Â¦ rakudo/cci-precomp-build: review: https://github.com/rakudo/rakudo/commit/6504be7b37

[15:47] *** ufobat joined
[16:08] <Geth> Â¦ rakudo: patrickbkr++ created pull request #3455: Add a CI precomp release build pipeline

[16:08] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3455

[16:16] *** Kaiepi left
[16:17] *** Kaiepi joined
[16:45] *** sena_kun left
[16:50] *** domidumont left
[16:51] *** domidumont joined
[17:00] *** sena_kun joined
[17:15] <[Tux]> I cannot guarantee measurements, as I will be skiing next week, and "ssh" is a typical problem in the WiFi options in French accommodations.

[17:28] *** |Tux| left
[17:42] <[Tux]> Rakudo version 2020.01-54-g411db10ec - MoarVM version 2020.01.1-24-g073676116

[17:42] <[Tux]> csv-test-xs-20      0.382 -  0.395

[17:42] <[Tux]> csv-ip5xs           0.721 -  0.728

[17:42] <[Tux]> test-t --race       0.841 -  0.847

[17:42] <[Tux]> test-t              1.810 -  2.058

[17:42] <[Tux]> csv-ip5xs-20        5.802 -  6.370

[17:42] <[Tux]> test                7.312 -  7.938

[17:42] <[Tux]> test-t-20 --race    9.077 -  9.229

[17:42] <[Tux]> csv-parser         22.883 - 23.433

[17:42] <[Tux]> test-t-20          30.441 - 32.490

[18:10] <AlexDaniel> [Tux]: try mosh :)

[18:10] <AlexDaniel> oh, or you mean that it's blocked altogether?

[18:14] *** MasterDuke joined
[18:17] <MasterDuke> is it just me, or has test-t gotten a little slower recently?

[18:46] *** sena_kun left
[18:49] *** domidumont left
[18:50] *** domidumont joined
[18:54] *** domidumont left
[19:02] *** sena_kun joined
[19:21] <Geth> Â¦ roast: d72a1652c3 | (Christian BartolomÃ¤us)++ | 3 files

[19:21] <Geth> Â¦ roast: [JVM] Fudge some newly added tests for supply

[19:21] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/d72a1652c3

[19:28] *** vrurg left
[19:43] *** Kaiepi left
[19:44] *** Kaiepi joined
[19:45] <Geth> Â¦ rakudo: 6504be7b37 | (Patrick BÃ¶ker)++ | 5 files

[19:45] <Geth> Â¦ rakudo: Add a CI precomp release build pipeline

[19:45] <Geth> Â¦ rakudo: 

[19:45] <Geth> Â¦ rakudo: This uses CircleCI.

[19:45] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6504be7b37

[19:45] <Geth> Â¦ rakudo: 6c5615ecf1 | (Patrick BÃ¶ker)++ (committed using GitHub Web editor) | 5 files

[19:45] <Geth> Â¦ rakudo: Merge pull request #3455 from rakudo/cci-precomp-build

[19:45] <Geth> Â¦ rakudo: 

[19:45] <Geth> Â¦ rakudo: Add a CI precomp release build pipeline

[19:45] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6c5615ecf1

[19:49] *** patrickb left
[19:50] <TreyHarris> (Asked in #raku, but this may be more of a #raku-dev question): From https://docs.raku.org/language/numerics#Allomorphs : "Keep in mind that allomorphs are simply subclasses of the two (or three) types they represent." '(or three)'? What's a three-type allomorph?

[19:54] *** vrurg joined
[20:10] <rba> Enjoy your time at FOSDEM...

[20:11] <TreyHarris> (Answered in #raku--historical artifact. I've already pushed a fix.)

[20:18] *** lucasb left
[20:23] <[Tux]> AlexDaniel, it *is* my holiday :)

[20:24] <[Tux]> and I've been in accommodations where *all* VPN's were blocked

[20:29] <MasterDuke> [Tux]: where are you going? i'm going to austria in 5 weeks, first time boarding in the alps

[20:31] <TreyHarris> MasterDuke: boarding? Like at Lugano airport?

[20:31] <MasterDuke> snowboarding

[20:31] <TreyHarris> oh, snowboarding. d'oh

[20:31] <MasterDuke> ha

[20:31] <TreyHarris> heh, I thought you meant boarding a plane in the alps

[20:31] <MasterDuke> that would also be a first

[20:33] <[Tux]> Alpe d'Huez (Oz)

[20:34] <[Tux]> I'm going to StAnton (Austria) first week of March

[20:34] <[Tux]> s/March/April/

[20:36] <TreyHarris> m: nice

[20:36] <camelia> rakudo-moar 6c5615ecf: OUTPUT: Â«5===SORRY!5=== Error while compiling <tmp>â¤Undeclared routine:â¤    nice used at line 1â¤â¤Â»

[20:37] <TreyHarris> Lugano airport is the one used in flight sim demos because it's soo impressive

[20:39] <MasterDuke> that's when we're going to Sankt Veit im Pongau. i'm looking forward to it. i was in park city, ut the beginning of this month and had great snow there

[20:45] *** sena_kun left
[21:01] *** sena_kun joined
[21:26] <Xliff> m: sub a { LAST { say "Hi!" }; return True }; a;

[21:26] <camelia> rakudo-moar 6c5615ecf: ( no output )

[21:26] <Xliff> m: sub a { LEAVE { say "Hi!" }; return True }; a;

[21:26] <camelia> rakudo-moar 6c5615ecf: OUTPUT: Â«Hi!â¤Â»

[21:28] <japhb> MasterDuke: https://user-images.githubusercontent.com/63550/60484089-0746b500-9c4d-11e9-87fe-4ac4c032ba5e.png is a graph of test-t times I use as an example in my https://github.com/japhb/Terminal-QuickCharts README.  I've not updated that graph in a while because, well, it's depressing.  After it stops dropping, it just hops a couple times after that but never again has an obvious downward slope.

[21:33] <MasterDuke> the -20might be more interesting now

[21:35] <MasterDuke> http://tux.nl/Talks/CSV6/images/test-t-d90.png is pretty jumpy, but there does seem to be a *slight* upward trend

[21:58] *** Ven`` joined
[22:02] *** Ven`` is now known as Ven_de_Thiel

[22:13] <japhb> Do we have a prefered image posting spot, similar to gist for text?

[22:17] <sena_kun> nope

[22:23] <japhb> Gah, that's annoying.

[22:27] <japhb> Well fudge.  OK, anyone can do this:  Maximize a terminal window for best effect; then: `git clone https://github.com/japhb/Terminal-QuickCharts.git; cd Terminal-QuickCharts; zef --deps-only install .; wget https://tux.nl/Talks/CSV6/speed-all.log; raku -I lib examples/csv-timings`

[22:28] <japhb> MasterDuke: ^^ Easier to read history

[22:45] *** sena_kun left
[22:45] <Xliff> Heh

[22:45] * Xliff takes the plunge

[22:46] <Xliff> Ooh, spiff!

[22:46] <Xliff> japhb++

[22:50] <Xliff> m: sub a (Int $a) { say "WTF" }; my @a = <1 2 3>; a(@a)

[22:50] <camelia> rakudo-moar 6c5615ecf: OUTPUT: Â«5===SORRY!5=== Error while compiling <tmp>â¤Calling a(Positional) will never work with declared signature (Int $a)â¤at <tmp>:1â¤------> 3Int $a) { say "WTF" }; my @a = <1 2 3>; 7â5a(@a)â¤Â»

[22:52] <japhb> Xliff: Thank you.  But as you can see, MasterDuke has a point; you can see the slow rise starting near the end of Q2.

[22:57] <Xliff> Yeah....

[23:00] *** sena_kun joined
[23:03] <Xliff> m: multi sub a (Int $a) { say "WTF" }; multi sub a (@a) { say 'As expected!' } ; my @a = <1 2 3>; a(@a)

[23:03] <camelia> rakudo-moar 6c5615ecf: OUTPUT: Â«As expected!â¤Â»

[23:03] <Xliff> m: multi sub a (Int $a) { say "WTF" }; multi sub a (@a) { say 'As expected!' }; my @a = <1 2 3>; a(@a)

[23:03] <camelia> rakudo-moar 6c5615ecf: OUTPUT: Â«As expected!â¤Â»

[23:28] <rba> .tell patrikb Please have a look at https://rakubrew.org - need your feedback.

[23:28] <tellable6> rba, I haven't seen patrikb around, did you mean patrickb?

[23:28] <rba> .tell patrickb Please have a look at https://rakubrew.org - need your feedback.

[23:28] <tellable6> rba, I'll pass your message to patrickb

[23:44] <Geth> Â¦ rakudo: 15621b8e8d | (Elizabeth Mattijsen)++ | src/Perl6/Compiler.nqp

[23:44] <Geth> Â¦ rakudo: Make sure raku -v mentions Raku

[23:44] <Geth> Â¦ rakudo: 

[23:44] <Geth> Â¦ rakudo: Rather than Perl   *sigh*  this should have been in the 2020.01

[23:44] <Geth> Â¦ rakudo: release.  :-(

[23:44] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/15621b8e8d

