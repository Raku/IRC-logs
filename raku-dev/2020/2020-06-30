[00:02] *** sena_kun joined
[00:02] <[Coke]> o/

[00:03] *** Altai-man_ left
[00:18] *** vrurg joined
[00:18] *** vrurg left
[00:27] *** vrurg joined
[00:27] *** vrurg left
[00:36] <Xliff> Oi, [Coke].

[00:36] <Xliff> Is it possible to add .WHY.trailing to enums?

[00:36] <Xliff> At least the entries?

[02:01] *** Altai-man_ joined
[02:04] *** sena_kun left
[02:36] *** chansen_ left
[02:38] *** chansen_ joined
[04:02] *** sena_kun joined
[04:03] *** Altai-man_ left
[04:08] <ShimmerFairy> m: enum Foo «Bar #=(explanation) Baz #=(this one's obvious)»; say Bar.WHY.trailing

[04:08] <camelia> rakudo-moar f1960baa9: OUTPUT: «Nil␤»

[04:08] <ShimmerFairy> Darn, was hoping that would work.

[04:46] *** squashable6 left
[04:47] *** squashable6 joined
[06:01] *** Altai-man_ joined
[06:03] *** sena_kun left
[07:02] <lizmat> Altai-man_ : yes please :-)

[07:11] *** AlexDani` is now known as AlexDaniel

[07:11] *** AlexDaniel left
[07:11] *** AlexDaniel joined
[07:11] <lizmat> bisectable6: VM.request-garbage-collection

[07:11] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[07:11] <bisectable6> lizmat, Output on all releases: https://gist.github.com/3e31389cb9b57848252cb514eeeb6e3d

[07:12] <bisectable6> lizmat, Bisecting by exit code (old=2020.02.1 new=2020.05.1). Old exit code: 1

[07:12] <bisectable6> lizmat, bisect log: https://gist.github.com/5f4e627936a29f990aa065c2e9a7ca52

[07:12] <bisectable6> lizmat, (2020-04-24) https://github.com/rakudo/rakudo/commit/e223be5669391836957cadd01c351d5585468532

[07:12] <bisectable6> lizmat, Bisecting by output (old=2016.09 new=2016.10) because on both starting points the exit code is 1

[07:12] <bisectable6> lizmat, bisect log: https://gist.github.com/60b62c70ccfd29d5d74649107a8d3016

[07:12] <bisectable6> lizmat, (2016-09-27) https://github.com/rakudo/rakudo/commit/222d16b0b94911fdedb06ee6ad817d0f14b9c05c

[07:12] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/b708aa0a747655473744c3aac8646dee

[07:17] <lizmat> m: dd VM.request-garbage-collection

[07:17] <camelia> rakudo-moar f1960baa9: OUTPUT: «Nil␤»

[07:18] <lizmat> ah, the gist is a bit confusing...  the  «exit code = 1» belongs to the previous list

[07:19] <lizmat> so it was in in 2020.05

[07:31] *** MasterDuke left
[07:37] <AlexDaniel> yeah, accepting pull requests for a markdownified version :)

[08:02] *** sena_kun joined
[08:03] *** Altai-man_ left
[08:10] *** softmoth_ left
[08:12] <lizmat> m: use nqp; dd nqp::isconcrete(*)   # TIL

[08:12] <camelia> rakudo-moar f1960baa9: OUTPUT: «1␤»

[08:12] <lizmat> jnthn: why is that ??

[08:13] <lizmat> m: use nqp; dd nqp::objectid(*); dd nqp::objectid(*)    # appears to be a singleton though

[08:13] <camelia> rakudo-moar f1960baa9: OUTPUT: «70067232␤70067232␤»

[08:23] <ShimmerFairy> AlexDaniel: on what?

[08:23] <AlexDaniel> ShimmerFairy: bisectable

[08:23] <ShimmerFairy> ah, I see. Wasn't sure what you were referring to.

[08:25] <AlexDaniel> some bots already produce markdown output in some cases, it's just that bisectable/commitable don't

[08:26] <AlexDaniel> I thought it was fine, but lizmat pointed out that it's a bit confusing, I agree

[08:26] <ShimmerFairy> Yeah, I took a peek and it's a bit terse at the moment :)

[08:38] *** unclechu left
[08:38] *** AlexDaniel` left
[08:40] *** Summertime left
[08:41] *** Summertime joined
[08:49] *** unclechu joined
[08:52] *** Summertime left
[08:53] *** Summertime joined
[08:53] <sena_kun> lizmat, https://gist.github.com/Altai-man/e9021b2fb7f5063bb8c86de3216ddc83

[09:05] *** AlexDaniel` joined
[09:11] <jnthn> lizmat: * is a Whatever instance; were it just represented by the type object, and we want everything to smartmatch True against it, then for example Int ~~ Whatever would come out true

[09:12] <lizmat> m: dd Int ~~ Whatever

[09:12] <camelia> rakudo-moar f1960baa9: OUTPUT: «Bool::False␤»

[09:12] <lizmat> m: dd Int ~~ *

[09:12] <camelia> rakudo-moar f1960baa9: OUTPUT: «WhateverCode.new␤»

[09:12] <jnthn> Well yes, it promotes in that particular syntactic case, but there's implicit places too

[09:12] <lizmat> I'm not sure I'm following ?

[09:13] <lizmat> in any case, there was a reason for it

[09:13] <lizmat> *is

[09:13] <jnthn> m: dd Int ~~ Whatever.new

[09:13] <camelia> rakudo-moar f1960baa9: OUTPUT: «Bool::True␤»

[09:13] <jnthn> But consider a case like `when * { }` (though nobody really writes that because it's spelled `default`)

[09:14] <jnthn> Or .grep(*) (again, you'd likely not write it directly, but if you were selecting a matcher dynamically, you could end up with it)

[09:15] <lizmat> yeah, I see now

[09:15] <lizmat> m: dd Whatever.new =:= Whatever.new   # perhaps we should make that True ?

[09:15] <camelia> rakudo-moar f1960baa9: OUTPUT: «Bool::False␤»

[09:19] <jnthn> No

[09:19] <jnthn> I don't even know if it's a true singleton or a singleton per compilation unit

[09:19] <jnthn> m: dd Whatever.new === Whatever.new

[09:19] <camelia> rakudo-moar f1960baa9: OUTPUT: «Bool::False␤»

[09:19] <jnthn> That could arguably be True

[09:20] *** stoned75 left
[09:20] <lizmat> ok, that should be easy to fix :-)

[09:20] <jnthn> Though I'm not sure i see the value

[09:20] <lizmat> well, arguably internally testing could be using an nqp::eqaddr against *

[09:20] <jnthn> Just use istype, I think

[09:21] <lizmat> that's what's being used now, but isn't that a lot more involved ?

[09:21] <jnthn> It's not that expensive anyway, and it specializes away

[09:21] <lizmat> ok

[09:21] <lizmat> then I'll stop meddling with that  :-)

[09:21] <lizmat> it's just that I was very suprised to learn about the difference between * and WHatever

[09:21] <jnthn> We're pretty good at optimizing out istype whenever there's some amount of stability around it

[09:22] <jnthn> Because it's the op used in the compiled signatures

[09:22] *** stoned75 joined
[09:22] <jnthn> And we certainly want to optimize the type checking cost out there

[09:22] <lizmat> ack

[09:29] <jnthn> OK, time for some RakuAST work... :)

[10:01] *** Altai-man_ joined
[10:03] *** sena_kun left
[10:17] <AlexDaniel> has anybody tried looking into modules listed in CyclicDependency row?

[10:19] <AlexDaniel> Geo::Hash build-depends on Geo::Hash::CustomBuilder which is provided by Geo::Hash

[10:19] <AlexDaniel> so… it depends on itself?

[10:19] <AlexDaniel> is this allowed?

[10:19] <AlexDaniel> same for MeCab

[10:20] <jnthn> That sounds odd to me; I thought *-depends was all about stuff to be installed in order to install the current distribution

[10:20] <jnthn> So I suspect it's confused

[10:25] <nine> It shouldn't be allowed

[10:39] <ShimmerFairy> I could see that being helpful if you need to compile modules in a certain order, if there isn't already a way to specify that.

[10:42] <AlexDaniel> okay, so, it doesn't work any other way

[10:42] <AlexDaniel> [Algorithm::HierarchicalPAM] Could not find Algorithm::HierarchicalPAM::CustomBuilder in:

[10:42] <lizmat> hmmm.. I'm seeing that Regex.ACCEPTS uses a braid and a fail_cursor sentinel, yet Str.match does not

[10:42] <lizmat> jnthn: is there any reason why Str.match shouldn't use a sentinel braid and fail_cursor as well ?

[10:43] <AlexDaniel> so I should make Blin ignore modules that depend on themselves?

[10:43] <lizmat> .oO( --solipsism=off )

[10:44] <Altai-man_> It seems like people were wrongly assuming that custom module builder won't be called for you by zef automagically and you need to specify that.

[10:44] <AlexDaniel> Altai-man_: no, it seems like it doesn't work otherwise

[10:45] <Altai-man_> AlexDaniel, oh? Zef handles them fine?

[10:45] <Altai-man_> Or, the other way, zef doesn't handle them either way?

[10:45] <AlexDaniel> Altai-man_: hmm not sure I understand. Point is, removing that line from META6.json results in zef being unable to install the module

[10:46] <Altai-man_> AlexDaniel, is it installable with the line?

[10:46] <AlexDaniel> yes

[10:46] <Altai-man_> Does Blin have a custom check for cyclic dependencies detection?

[10:47] <AlexDaniel> yes

[10:48] <AlexDaniel> it handles dependency resolution by itself because it needs to decide on the order it'll be trying to install the modules

[10:48] <AlexDaniel> I didn't want it to hang on wrong META6.json's so I added the check

[10:49] <AlexDaniel> and it did hang, IIRC :)

[10:49] <Altai-man_> Zef itself handles `zef install Foo::Dependencies::A-on-B` correctly. I think Blin should be patched to not mark those modules as wrong.

[10:49] <AlexDaniel> what? it can install that???

[10:49] <AlexDaniel> how

[10:50] <Altai-man_> Just tried that.

[10:50] <Altai-man_> Honestly I expected it to say "Cycle, won't do" but it just installed. :)

[10:50] <AlexDaniel> … weird

[10:51] <Altai-man_> I am not sure if that's expected, likely yes, but I don't think that's weird. I mean, we allow mutually recursive e.g. class definitions, why not mutually recursive modules.

[10:52] <AlexDaniel> well, uh, zef is still testing them separately

[10:52] <Geth> ¦ rakudo/rakuast: 873c1e1639 | (Jonathan Worthington)++ | 6 files

[10:52] <Geth> ¦ rakudo/rakuast: Compile lexical named subroutines via RakuAST

[10:52] <Geth> ¦ rakudo/rakuast: 

[10:52] <Geth> ¦ rakudo/rakuast: This is a little cheaty so far, in that it doesn't really properly

[10:52] <Geth> ¦ rakudo/rakuast: handle scope declarators. However, it's enough to pass the subs sanity

[10:52] <Geth> ¦ rakudo/rakuast: test.

[10:52] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/873c1e1639

[10:52] <AlexDaniel> so they're installable simply because there are no proper tests that attempt to use the other module

[10:53] <AlexDaniel> in real world I don't know what's gonna happen

[10:53] <AlexDaniel> but OK, blin should be relaxed a bit, fine

[10:54] <Altai-man_> Yes, regardless of the case above. I mean, if something can be installed with `zef install ...` and Blin says its invalid, then I would bet on zef.

[10:56] <AlexDaniel> well, I'd say blin is a bit smarter and is able to detect questionable practices :P

[11:21] <Geth> ¦ nqp: e181c207c2 | (Elizabeth Mattijsen)++ | src/QRegex/Cursor.nqp

[11:21] <Geth> ¦ nqp: Micro optimize !cursor_fail

[11:21] <Geth> ¦ nqp: 

[11:21] <Geth> ¦ nqp: And let them be all bound as one.

[11:21] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/e181c207c2

[11:21] <Geth> ¦ nqp: d45df11b96 | (Elizabeth Mattijsen)++ | docs/ops.markdown

[11:21] <Geth> ¦ nqp: Merge branch 'master' of ssh://github.com/Raku/nqp

[11:21] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/d45df11b96

[11:21] <Geth> ¦ nqp: 1027da8eae | (Elizabeth Mattijsen)++ | src/QRegex/Cursor.nqp

[11:21] <Geth> ¦ nqp: Simplify braid initialization in cursor_init

[11:21] <Geth> ¦ nqp: 

[11:21] <Geth> ¦ nqp: It's not much, but it's done for *every* match

[11:21] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/1027da8eae

[11:22] <lizmat> hmmm.. not sure where that second commit came from

[11:24] <nine> AlexDaniel: we certainly didn't think of distributions that bring their own builder. We only though about using an external one like Distribution::Builder::MakeFromJSON

[11:25] <nine> AlexDaniel: I really don't see a reason for Algorithm::HierarchicalPAM to bring its own in the first place though. It seems to be subclassing Distribution::Builder::MakeFromJSON but for no apparent reason

[11:25] <AlexDaniel> nine: yeah but Foo::Dependencies::A-on-B ?

[11:26] <AlexDaniel> like, why is zef fine with that

[11:27] <AlexDaniel> although, yeah, not saying that it should do any extra checks

[11:29] <nine> Well it is weird that it can install that. It should do extra checks. And circular dependencies should not be allowed. They are not needed and will cause issues.

[11:30] <AlexDaniel> nine: so what should Blin do? That's the only question I have now

[11:30] <AlexDaniel> if a module depends on itself, then it's OK and ignore that?

[11:31] <AlexDaniel> if it depends on something else and it ends up being a case of circular dependencies, then it should complain?

[11:31] <AlexDaniel> like, then Blin should say something about it

[11:31] <nine> Well since Blin is a tool to regression test rakudo, it should ignore modules with clearly wrong dependency information.

[11:32] <AlexDaniel> that's arguable. But either way, what is wrong exactly?

[11:32] <AlexDaniel> like, define “wrong dependency information”

[11:33] <nine> Circles definitely are wrong. Dependencies need to form a tree.

[11:35] <AlexDaniel> nine: as for “it should ignore”, it's kinda the opposite. Since it is a tool to regression test rakudo, it should attempt to use as much code as possible to find as many regressions as possible. This includes trying to install modules with broken META6.json because their tests can still show issues in rakudo

[11:35] <AlexDaniel> but it's easier said than done :X

[11:36] <Geth> ¦ nqp: e6ef8a4e50 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[11:36] <Geth> ¦ nqp: Bump MoarVM to get native return JITting

[11:36] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/e6ef8a4e50

[11:36] <nine> An edge case would be e.g. if A-on-B depends on B-on-A and B-on-A depends on A-on-B, but only one of them build-depends on the other. Because in such a case we can at least determine a proper order of installation.

[11:48] <Geth> ¦ rakudo: 8d2156b007 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[11:48] <Geth> ¦ rakudo: Bump NQP to get some MoarVM/NQP micro-opts

[11:48] <Geth> ¦ rakudo: 

[11:48] <Geth> ¦ rakudo: - JIT native return ops

[11:48] <Geth> ¦ rakudo: - micro-optimize creating cursors

[11:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8d2156b007

[11:55] <lizmat> have I said recently that I hate git branches?

[11:55] <lizmat> so I just committed ^^^ to the  main branch

[11:56] <lizmat> I go back to my "match-refactor" branch and do a "git rebase master" right?

[11:56] <lizmat> how can I get conflicts then???

[11:57] <Altai-man_> Something was changed in the files on master and now your branch can't be rebased?

[11:57] <lizmat> master and match-refactor were both up-to-date

[11:58] <lizmat> the bump was the first commit in almost a week!

[11:58] <AlexDaniel> so why not just fix the conflicts?

[11:58] <lizmat> there are *many* with a refactor of Match, which basically rewrote 70% of the file

[12:00] <AlexDaniel> if there are many conflicts then there are many conflicts?

[12:01] <AlexDaniel> you can maybe try --strategy-option patience to have it attempt to resolve some of them by itself, but actually I don't understand the question :)

[12:02] *** sena_kun joined
[12:04] *** Altai-man_ left
[12:12] <sena_kun> lizmat, can you please show your file with conflicts? If nothing was changed on master in this area, you should have no issues with rebasing your branch.

[12:12] <lizmat> well, I fixed up all of the conflicts

[12:13] <lizmat> what I don't understand is how 1 change in master, can cause conflicts in my branch, when the changed file in master wasn't touched in the branch

[12:14] <sena_kun> That's exactly what I am wondering about, it sounds impossible. Conflicts give you comparison between the branch you rebase onto and currently applied commit results, so that's what is interesting.

[12:17] <Geth> ¦ rakudo/match-refactor: 24 commits pushed by (Elizabeth Mattijsen)++

[12:17] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/compare/020b8c3c093e...171f6c01835b

[12:18] <lizmat> maybe that will help

[12:45] <timotimo> lizmat: i think the rebase problme could come from the fact that it puts your commits from the branch that are not on master yet on top of the newest master commit one-by-one; whether the versions at the very newest point are the same isn't as important since it replays the whole change history

[12:46] <timotimo> you could rebase it by "squashing" all commits from match-refactor into one; that removes the history of how it came to be, but should lead to conflict-free results almost all the time?

[12:47] <lizmat> so that means I need to go through the same rigamarole I do a rebase from master ?

[12:47] <sena_kun> timotimo, this is hardly a good solution because all the history is lost.

[12:48] <lizmat> the hacky fix is to copy the files in question before the rebase, ignore all of the conflicts, and put the files back afterwards

[12:48] <lizmat> yuck

[12:49] <sena_kun> lizmat, no, usually there are no problems. I mean, there are conflicts if e.g. 1)someone changed Foo.pm6 on master; 2)You changed Foo.pm6 on branch-foo earlier; 3)You rebase branch-foo on master and get conflicts in Foo.pm6 because the file changed on master was not that one you edited originally in the branch.

[12:49] <lizmat> what I don't understand then is that apparently git is not able to squash all the work in the branch in a single commit, and the apply that ?

[12:49] <timotimo> it is, but only if you ask for it

[12:49] <timotimo> which will kill the history

[12:49] <timotimo> if you don't do that, it will try to give you a sensible history at every step of the way

[12:50] <sena_kun> But if nobody has touched those files on master, something is fishy. I mean, it is just impossible. Git will just re-apply your commits on untouched files, that's all.

[12:50] <timotimo> if you only merge, then you see both histories as they were, and then just a single spot where conflicts had to be resolved, at which point you can use --strategy=ours to say "if there's a conflict, just paste my file over everything"

[12:51] * lizmat will try --strategy=ours next time

[12:51] <lizmat> timotimo++

[12:58] <timotimo> rebase makes the history nicer by pretending you've started your work after whatever changes on the other branch have already happened, but the cost is that it has to make sense of your work "in the new context" at every commit

[12:58] <nine> lizmat: do you have rerere active?

[12:58] <lizmat> que?

[12:59] <lizmat> I guess that'd be a no ?

[12:59] <timotimo> hehe

[12:59] <nine> man git-rerere

[12:59] <timotimo> it's a funny name ofr a good feature

[12:59] <nine> rerere = reuse recorded resolution

[12:59] <nine> It means git remembers how you solved a conflict and will auto apply the same solution in the future

[13:00] <lizmat> now, that seems like a very valid option, why isn't that the default?

[13:01] <nine> Don't know. Maybe because there's the tiny chance that the resolution doesn't apply and it silently breaks your code this way. But that's never happened to me.

[13:01] <lizmat> hmmm... this seems to apply to "git merge master", not "git rebase master" ?

[13:01] <nine> no, it's for merges and rebase

[13:09] <Geth> ¦ rakudo/rakuast: 8dfaa39388 | (Jonathan Worthington)++ | 7 files

[13:09] <Geth> ¦ rakudo/rakuast: Prepare declaration model for multiple scopes

[13:09] <Geth> ¦ rakudo/rakuast: 

[13:09] <Geth> ¦ rakudo/rakuast: Many elements can accept a range of scopes, so a "this is a lexical

[13:09] <Geth> ¦ rakudo/rakuast: declaration" role doesn't really model things well. Instead, remove it

[13:09] <Geth> ¦ rakudo/rakuast: and just have RakuAST::Declaration carry a scope. Also, nodes can now

[13:09] <Geth> ¦ rakudo/rakuast: specify their default scope and their acceptable scopes; the latter will

[13:09] <Geth> ¦ rakudo/rakuast: be used for generalized error checking of mis-scoped things later on.

[13:09] <Geth> ¦ rakudo/rakuast: <…commit message has 5 more lines…>

[13:09] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/8dfaa39388

[13:20] *** vrurg joined
[13:24] <Geth> ¦ rakudo/rakuast: 16b0bda3ee | (Jonathan Worthington)++ | 2 files

[13:24] <Geth> ¦ rakudo/rakuast: Parse and attach various scope declarators

[13:24] <Geth> ¦ rakudo/rakuast: 

[13:24] <Geth> ¦ rakudo/rakuast: However, we don't yet respect what they mean in the RakuAST nodes.

[13:24] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/16b0bda3ee

[13:24] <Geth> ¦ rakudo/rakuast: fd4b88c8b3 | (Jonathan Worthington)++ | 4 files

[13:24] <Geth> ¦ rakudo/rakuast: Rename variable declaration node

[13:25] <Geth> ¦ rakudo/rakuast: 

[13:25] <Geth> ¦ rakudo/rakuast: To better following the naming approach taken elsewhere in RakuAST.

[13:25] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/fd4b88c8b3

[13:26] <nine> What the?! If I give the CompilerServices class a BUILD method, this suddenly doesn't list the BUILDALL method anymore which makes one of our tests fail:

[13:26] <nine> m: class { has $.bar }.^methods».name.sort.say

[13:26] <camelia> rakudo-moar 8d2156b00: OUTPUT: «(BUILDALL bar)␤»

[13:27] <jnthn> ...huh :)

[13:28] * jnthn is currently trying to remember how our-scoped vars work

[13:31] <nine> Oooh...of course. I simply forgot the pre-exsting attributes. They want initialization from BUILD arguments

[13:32] <nine> I'm kinda surprised that this didn't explode much more violently

[13:33] <jnthn> That makes much more sense

[13:33] <jnthn> Just discovered that `our $x` in the current compiler goes and makes a container descriptor and all that lot...only to not use it *at all* because it just binds a symbol from the stash over it at block entry

[13:34] <jnthn> Another one of those little bits of wasted work

[13:38] *** vrurg left
[13:39] *** vrurg joined
[13:39] <[Coke]> jnthn++ nine++ timotimo++ lizmat++ # various

[13:41] <timotimo> we have barely any "our" vars in the core setting, right? what a waste of throwing out wasted work :) :)

[13:42] <nine> .oO(Isn't lamenting the waste of throwing out waste...waste?)

[13:42] * lizmat counts 12

[13:43] <lizmat> bur aren't unqualified classes not "our" as well ?

[13:43] <jnthn> Yes, but this is only about our-scoped variables

[13:44] <jnthn> Test has a bunch of them, I think

[13:44] * lizmat counts 0 in the core setting

[13:44] <jnthn> Or at least, it better do, because they're in the sanity tests

[13:44] *** Xliff left
[13:45] <jnthn> To be clear, I'm not expecting a big saving from this, it's just another example where the current compiler code is being suboptimal

[13:48] <[Coke]> go faster by standing still!

[13:52] <timotimo> right :)

[14:01] *** Altai-man_ joined
[14:04] *** sena_kun left
[14:16] <Geth> ¦ rakudo/match-refactor: 54dfd63d48 | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[14:16] <Geth> ¦ rakudo/match-refactor: Simplify the capture vivification check logic

[14:16] <Geth> ¦ rakudo/match-refactor: 

[14:16] <Geth> ¦ rakudo/match-refactor: A nano-optimization at best

[14:16] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/54dfd63d48

[14:20] <lizmat> Altai-man_ : did you post a link for a recent blin run ?

[14:20] <Altai-man_> lizmat, yes?

[14:21] <Altai-man_> lizmat, https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-06-30#l65 <-

[14:21] <lizmat> I was looking for Altai-man_ not sena_kun  :-)

[14:21] <Altai-man_> Sorry. :(

[14:31] *** krunen left
[14:31] *** krunen joined
[14:38] <lizmat> Altai-man_: no pb  ++!

[14:38] <Altai-man_> releasable6, status

[14:38] <releasable6> Altai-man_, Next release in ≈18 days and ≈4 hours. There are no known blockers. Changelog for this release was not started yet

[14:38] <releasable6> Altai-man_, Details: https://gist.github.com/317f33fc0864ab33f5a3bad51a676beb

[14:40] <Geth> ¦ rakudo/rakuast: 3ca740d7a7 | (Jonathan Worthington)++ | 5 files

[14:40] <Geth> ¦ rakudo/rakuast: Add RakuAST support for our-scoped vars

[14:40] <Geth> ¦ rakudo/rakuast: 

[14:40] <Geth> ¦ rakudo/rakuast: These don't actually work in the RakuAST-based compiler yet, however,

[14:40] <Geth> ¦ rakudo/rakuast: because it doesn't declare an implicit $?PACKAGE.

[14:40] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/3ca740d7a7

[14:42] <jnthn> Ah, a yak tower... :)

[14:42] <jnthn> Well, not so bad, but it turns out I need to deal with implicit declarations before this can really work out in the RakuAST-based compiler

[14:42] <jnthn> And also to set up a GLOBALish and so on

[15:33] *** softmoth_ joined
[15:50] *** leont_ joined
[15:50] *** leont left
[15:52] *** jmerelo joined
[16:02] *** sena_kun joined
[16:04] *** Altai-man_ left
[16:31] <lizmat> ok, this took me a few hours to figure out, but it looks like he half-lazy approach to vivifying Match objects won't work

[16:32] <lizmat> as apparently they can currently get vivified *during* parsing of a grammar

[16:33] <lizmat> which then misses additional Matches, because the get added to the cstack *after* having been vivified

[16:33] <lizmat> so it looks like it needs to go back to calling .MATCH on each Match object anyway

[16:34] <lizmat> and do the vivification there

[16:38] <timotimo> ah, dang

[16:38] <timotimo> but we should be able to know whether we're mid-parse or post-parse actually?

[16:38] <lizmat> not inside the Match object you don't

[16:39] <lizmat> afaik ?

[16:39] <lizmat> afk for a bit&

[16:39] <timotimo> hmm. dynamic vars don't have the best performance

[16:39] <lizmat> there's a reason the say sub caches them so $*OUT doesn't need to be looked up twice

[16:39] <Geth> ¦ rakudo/rakuast: f40f9740e9 | (Jonathan Worthington)++ | 4 files

[16:39] <Geth> ¦ rakudo/rakuast: Support interpolating closures in RakuAST

[16:39] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/f40f9740e9

[16:39] <timotimo> and calling a method on the match object when the corresponding match has finished would be possible, but perhaps also too much of an impact; and setting an attribute directly wouldn't be too bad perhaps, but makes match objects bigger again

[16:40] <lizmat> well, that's exactly what .MATCH does

[16:40] <lizmat> everywhere, when a cursor is ready, the .MATCH method is called

[16:40] <lizmat> and it was *that* overhead I was trying to get rid of in the first place

[16:42] <Geth> ¦ rakudo/match-refactor: 98ee23e46f | (Elizabeth Mattijsen)++ | 4 files

[16:42] <Geth> ¦ rakudo/match-refactor: Revert "Remove the most obvious uses of Match.MATCH"

[16:42] <Geth> ¦ rakudo/match-refactor: 

[16:42] <Geth> ¦ rakudo/match-refactor: This reverts commit 3a759869462e0ff590b32be4e4448e61ab4e807c.

[16:42] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/98ee23e46f

[16:43] <lizmat> *sigh&

[16:44] <timotimo> ah dang

[16:46] *** jmerelo left
[17:05] <Geth> ¦ rakudo/rakuast: ff6567d90a | (Jonathan Worthington)++ | src/Raku/ast/scoping.rakumod

[17:05] <Geth> ¦ rakudo/rakuast: Add a mechanism for implicit declarations

[17:05] <Geth> ¦ rakudo/rakuast: 

[17:05] <Geth> ¦ rakudo/rakuast: We'll have the AST produce and take care of these. So, for example, if

[17:05] <Geth> ¦ rakudo/rakuast: you make a `RakuAST::Sub`, then it will automatically have `$/`, `$!`,

[17:05] <Geth> ¦ rakudo/rakuast: and `$_` set up (unless they get declared in the signature). This will

[17:05] <Geth> ¦ rakudo/rakuast: also deal with the `$?PACKAGE` and friends that are declared inside of

[17:05] <Geth> ¦ rakudo/rakuast: packages.

[17:05] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/ff6567d90a

[17:07] *** softmoth_ left
[17:39] *** squashable6 left
[17:40] <Geth> ¦ rakudo/rakuast: f9b1b4a144 | (Jonathan Worthington)++ | src/Raku/Actions.nqp

[17:40] <Geth> ¦ rakudo/rakuast: Locate the EXPORTHOWs, in preparation for packages

[17:40] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/f9b1b4a144

[17:41] *** squashable6 joined
[18:01] *** Altai-man_ joined
[18:04] *** sena_kun left
[19:04] *** MasterDuke joined
[19:38] *** lichtkind joined
[20:02] *** sena_kun joined
[20:04] *** Altai-man_ left
[20:51] <lizmat> moritz jnthn something I don't understand about Match.MATCH in its current incarnation

[20:51] <lizmat> at the end of it, it sets the flag that it has been vivified ($!match <- NQPdidMatch)

[20:51] <lizmat> which implies that vivification will never happen for that Match object anymroe

[20:52] <lizmat> however, the cstack and regexsub are only nulled if there is no bstack

[20:52] <lizmat> but how can it ever vivify again if the flag has been set?

[20:53] <lizmat> so why aren't cstack and regexsub not reset always ?

[20:54] <moritz> totally spitballing here, but it could it be due to backtracking maybe happening even after a match has been formed?

[20:54] <moritz> like / ( .*) { say $/ } <thing-that-can-cause-backtracking> / ?

[20:54] <lizmat> moritz: but that would not change anything on @!list and %!hash ?

[20:55] <lizmat> so even if the backtrack would remove stuff from the cstack, they would still be visible with AT-POS and AT-KEY ?

[20:56] <moritz> hmmm

[20:56] <moritz> no idea; just the thought that you could try to add nulling them, and see what kind of tests break (if any)

[20:57] * moritz barely even coherent anymore, and likely not helpful

[20:57] <moritz> sleepy time here, hugs all around &

[21:00] <lizmat> moritz++   # sleep well!

[21:03] <sena_kun> lizmat, o/

[21:03] <sena_kun> Want another run?

[21:03] <lizmat> no, not yet

[21:03] <sena_kun> Oki. Have a good night. o7

[21:03] <lizmat> didn't push the fix for the last fails yet

[21:04] <lizmat> good night!

[21:33] *** softmoth_ joined
[21:33] <jnthn> lizmat: Backtracking into a failed cursor actually makes a new cursor, and the old one (with any created match object) is discarded

[21:33] <jnthn> From memory, !cursor_next is the place to look

[21:34] <jnthn> (I'm as tired as the rest of you, so this is the answer to the question I think is being asked.. :))

[21:35] <lizmat> jnthn++

[21:53] *** softmoth_ left
[21:59] * timotimo is finally doing everything necessary to get his blog back up

[22:01] *** Altai-man_ joined
[22:04] *** sena_kun left
[22:14] <timotimo> i wonder what (if at all) 6guts should be renamed to ... ragout? rakuts? raguts? rakuguts?

[22:16] <lizmat> entrails?

[22:16] <lizmat> rakoontrails

[22:16] <lizmat> rakutales

[22:24] * Altai-man_ assumes 6guts content is smart enough for the readers to handle a name with some history

[22:31] *** lichtkind left
[22:34] <lizmat> m: .say for "abc" ~~ /(.)(.)/

[22:34] <camelia> rakudo-moar 8d2156b00: OUTPUT: «Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤»

[22:34] <lizmat> that's not very informative, now, is it ?

[22:35] *** stoned75 left
[22:37] <AlexDaniel> timotimo: raku-guts :P

[22:37] *** stoned75 joined
[22:38] <AlexDaniel> what's with this desire to obfuscate x)

[22:39] <Geth> ¦ whateverable: 55cfbe31b0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 13 files

[22:39] <Geth> ¦ whateverable: Make sure Reply is mixed in

[22:39] <Geth> ¦ whateverable: 

[22:39] <Geth> ¦ whateverable: Otherwise a gisted reply will lack some basic information (bot name,

[22:39] <Geth> ¦ whateverable: query, etc.).

[22:39] <Geth> ¦ whateverable: review: https://github.com/Raku/whateverable/commit/55cfbe31b0

[22:40] <Geth> ¦ rakudo: 0a86798fe2 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[22:40] <Geth> ¦ rakudo: Make method not found error reporting a little more resilient

[22:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0a86798fe2

[22:42] <timotimo> raku'guts

[22:43] <lizmat> m: .say for "abc" ~~ /(.)(.)/

[22:43] <camelia> rakudo-moar 8d2156b00: OUTPUT: «Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤»

[22:43] <lizmat> that should become: No such method 'package' for invocant of type 'NQPRoutine'

[22:45] <lizmat> to fix that, I'm going to sleep on that one...

[22:45] <lizmat> &

[22:45] <timotimo> have a good sleep!

[23:00] <timotimo> who wants to have a look and see if wakelift.de appears functional or has some kind of bug somewhere?

[23:03] <MasterDuke> articles seem to work

[23:13] *** reportable6 left
[23:13] *** tellable6 left
[23:13] *** bisectable6 left
[23:14] *** bisectable6 joined
[23:14] *** tellable6 joined
[23:15] *** reportable6 joined
[23:30] <timotimo> thanks

[23:39] <timotimo> i may not even bother setting up a not-the-default theme

