[01:04] *** leont left
[01:45] *** vrurg joined
[02:17] *** lucasb left
[02:38] *** lizmat left
[02:39] *** lizmat joined
[02:51] *** Kaiepi joined
[03:19] *** vrurg left
[03:27] *** vrurg joined
[04:21] *** vrurg_ joined
[04:22] *** vrurg left
[04:30] *** guifa joined
[04:34] <guifa> Talking with jdv79 on #raku has brought me to an interesting observation.  DateTime accepts seconds as an Real value, so it handles fractional seconds without any real (ha) problem.  The most common way of getting this, though, is by using an Instant, which stores its values as a Rat.  This is odd, since the fractional time is consistantly a float from MoarVM into NQP into Rakudo::Internal, only changed into a Rat to be stored in 

[04:34] <guifa> Instant’s private attribute.  

[04:46] <guifa> Any thoughts on simply changing Instant to use a Num?  It’d save us a Num—>Rat conversion, and preserve the precision of the value returned.  As it stands in documentation, Instant doesn’t promise a Rat representation and Roast doesn’t really seem to be concerned with the type when retrieved via the various methods that access it

[06:41] *** Xliff joined
[06:50] *** domidumont joined
[07:09] *** Altai-man joined
[08:22] *** Xliff left
[09:43] *** sena_kun joined
[09:44] *** Altai-man left
[12:40] *** MasterDuke left
[13:05] <jdv79> guifa: uh, that would make the math situ even worse.  Rat is better.

[13:11] <[Tux]> Rakudo version 2020.09-39-ge0e24a8db - MoarVM version 2020.09-10-g8d7a80d55

[13:11] <[Tux]> csv-test-xs-20      0.389 -  0.392

[13:11] <[Tux]> csv-ip5xs           0.805 -  0.824

[13:11] <[Tux]> test-t --race       0.855 -  0.879

[13:11] <[Tux]> test-t              1.895 -  2.043

[13:11] <[Tux]> test                7.569 -  7.709

[13:11] <[Tux]> csv-ip5xs-20        8.038 -  8.105

[13:11] <[Tux]> test-t-20 --race    9.296 -  9.885

[13:11] <[Tux]> csv-parser         25.723 - 26.289

[13:11] <[Tux]> test-t-20          32.544 - 32.725

[13:12] <lizmat> guifa: TimToady had specific ideas about that:

[13:12] <lizmat> C<Instant>s and C<Duration>s are measured in atomic seconds with fractions.

[13:12] <lizmat> Notionally they are real numbers which may be implemented in any C<Real>

[13:12] <lizmat> type of sufficient precision, preferably a C<Rat> or C<FatRat>.

[13:12] <lizmat> (Implementations that make fixed-point assumptions about the available

[13:12] <lizmat> subsecond precision are discouraged; the user interface must act like real

[13:12] <lizmat> numbers in any case.)

[13:14] <lizmat> from: https://design.raku.org/S02.html#Immutable_types

[13:17] <Geth_> ¦ rakudo: 338c7439d2 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 6 files

[13:17] <Geth_> ¦ rakudo: Fix for issue with Z / X with set operators (#3950)

[13:17] <Geth_> ¦ rakudo: 

[13:17] <Geth_> ¦ rakudo: * Let the multi-fallback handle Any case as well

[13:17] <Geth_> ¦ rakudo: 

[13:17] <linkable6> RAKUDO#3950 [closed]: https://github.com/rakudo/rakudo/pull/3950 Fix for issue with Z / X with set operators

[13:17] <Geth_> ¦ rakudo: A good night of sleep revealed the solution: using the +@p signature

[13:17] <Geth_> ¦ rakudo: instead of the **@p signature on the fallback, should fix the issue

[13:17] <Geth_> ¦ rakudo: found with Z and X using set operators that don't return a Bool.

[13:17] <Geth_> ¦ rakudo: <…commit message has 5 more lines…>

[13:17] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/338c7439d2

[13:18] <Geth_> ¦ roast: 7290218201 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 6 files

[13:18] <Geth_> ¦ roast: Add tests for R#3945 (#682)

[13:18] <Geth_> ¦ roast: 

[13:18] <Geth_> ¦ roast: Add tests for R#3945

[13:18] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/7290218201

[13:18] <linkable6> R#3945 [open]: https://github.com/rakudo/rakudo/issues/3945 Intersection meta-ops behave like union

[13:18] <linkable6> ROAST#682 [closed]: https://github.com/Raku/roast/pull/682 Add tests for R#3945

[13:21] *** leont joined
[13:42] *** Altai-man joined
[13:44] *** sena_kun left
[13:55] <Geth_> ¦ rakudo: 4af961ed33 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[13:55] <Geth_> ¦ rakudo: Add sanity check in infix handling, fixes R#3949 (#3951)

[13:55] <Geth_> ¦ rakudo: 

[13:55] <Geth_> ¦ rakudo: Before this, an "infix:(&)" (note the missing < > there) would cause a:

[13:55] <Geth_> ¦ rakudo: 

[13:55] <linkable6> R#3949 [open]: https://github.com/rakudo/rakudo/issues/3949 [LTA] [LTA] error message with incorrectly spelled infix operator

[13:55] <linkable6> RAKUDO#3951 [closed]: https://github.com/rakudo/rakudo/pull/3951 Add sanity check in infix handling, fixes R#3949

[13:55] <Geth_> ¦ rakudo:     $ raku -e 'infix:(&)'

[13:55] <Geth_> ¦ rakudo:     This type (QAST::WVal) does not support positional operations

[13:55] <Geth_> ¦ rakudo: 

[13:55] <Geth_> ¦ rakudo: <…commit message has 8 more lines…>

[13:55] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4af961ed33

[13:55] <Geth_> ¦ roast: 3f83432344 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S32-exceptions/misc.t

[13:55] <Geth_> ¦ roast: Add tests for R#3949 (#683)

[13:55] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/3f83432344

[13:55] <linkable6> ROAST#683 [closed]: https://github.com/Raku/roast/pull/683 Add tests for R#3949

[13:57] <Geth_> ¦ rakudo: d0854ffcc5 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[13:57] <Geth_> ¦ rakudo: Make "is rw" on parameters of MAIN worry (#3947)

[13:57] <Geth_> ¦ rakudo: 

[13:57] <Geth_> ¦ rakudo: As noted in R#3929 by Zoffix++

[13:57] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d0854ffcc5

[13:57] <linkable6> RAKUDO#3947 [closed]: https://github.com/rakudo/rakudo/pull/3947 Make "is rw" on parameters of MAIN worry

[13:57] <linkable6> R#3929 [open]: https://github.com/rakudo/rakudo/issues/3929 [LTA] Mistaken use of `is rw` on `sub MAIN` Produces Usage Instead of Error/Warning

[13:57] <Geth_> ¦ roast: bc7d44e050 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S06-other/main.t

[13:57] <Geth_> ¦ roast: Add tests for fix of R#3929 (#681)

[13:57] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/bc7d44e050

[13:57] <linkable6> ROAST#681 [closed]: https://github.com/Raku/roast/pull/681 Add tests for fix of R#3929

[14:13] *** Xliff joined
[14:13] <Xliff> \o

[14:28] <nwc10> o/

[14:29] <Xliff> What does this error imply: "Can only store CPointer attribute in CPointer slot in CStruct"

[14:32] <Xliff> It seems to stem from the bind, here: https://github.com/Xliff/p6-GIO/blob/september-refactor-review/lib/GIO/Raw/Structs.pm6#L37

[14:45] <Xliff> Problem is illustrated here: https://repl.it/@Xliff/MellowMutedCrash#main.raku

[14:51] <Xliff> m: my $a; sub aa { ^2.pick ?? 2 !! 4 }; $a := aa;

[14:51] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Potential difficulties:␤    Precedence of ^ is looser than method call; please parenthesize␤    at <tmp>:1␤    ------> 3my $a; sub aa { ^27⏏5.pick ?? 2 !! 4 }; $a := aa;␤»

[14:51] <Xliff> m: my $a; sub aa { (^2).pick ?? 2 !! 4 }; $a := aa;

[14:51] <camelia> rakudo-moar 85847d2f1: ( no output )

[14:52] <Xliff> m: my $a; sub aa { (^2).pick ?? 2 !! 4 }; $a := aa(); $a.say

[14:52] <camelia> rakudo-moar 85847d2f1: OUTPUT: «4␤»

[14:52] <Xliff> m: my $a; sub aa { (^2).pick ?? 2 !! 4 }; $a := aa(); $a.say

[14:52] <camelia> rakudo-moar 85847d2f1: OUTPUT: «4␤»

[14:52] <Xliff> m: my $a; sub aa { (^2).pick ?? 2 !! 4 }; $a := aa(); $a.say

[14:52] <camelia> rakudo-moar 85847d2f1: OUTPUT: «2␤»

[14:55] <Xliff> Yeah, this doesn't make any sense...

[14:55] <Xliff> https://repl.it/@Xliff/MellowMutedCrash#main.raku

[14:56] <Xliff> The difference between it working and it not working is that the LHS is an attribute

[15:30] *** domidumont left
[16:12] *** [TuxCM] joined
[16:25] *** [Tux] left
[16:26] *** [Tux] joined
[17:36] *** lichtkind joined
[17:42] *** sena_kun joined
[17:44] *** Altai-man left
[19:13] *** MasterDuke joined
[19:14] <Geth_> ¦ rakudo/nqpif2ternary: 15cd58c120 | (Elizabeth Mattijsen)++ | 58 files

[19:14] <Geth_> ¦ rakudo/nqpif2ternary: Replace all simple nqp::if(42,foo,bar) with ternaries

[19:14] <Geth_> ¦ rakudo/nqpif2ternary: 

[19:14] <Geth_> ¦ rakudo/nqpif2ternary: If memory serves me well, about 1.5 years ago, optimizations in

[19:14] <Geth_> ¦ rakudo/nqpif2ternary: Rakudo made the construct:

[19:14] <Geth_> ¦ rakudo/nqpif2ternary: 

[19:14] <Geth_> ¦ rakudo/nqpif2ternary:    42 ?? foo !! bar

[19:14] <Geth_> ¦ rakudo/nqpif2ternary: 

[19:14] <Geth_> ¦ rakudo/nqpif2ternary: <…commit message has 12 more lines…>

[19:14] <Geth_> ¦ rakudo/nqpif2ternary: review: https://github.com/rakudo/rakudo/commit/15cd58c120

[19:15] <Geth_> ¦ rakudo: lizmat++ created pull request #3957: Replace all simple nqp::if(42,foo,bar) with ternaries

[19:15] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3957

[19:19] <lizmat> that was an interesting excercise

[19:20] <lizmat> or rather exercise  :-)

[19:22] <nine> so...did you benchmark this?

[19:25] <lizmat> yes...  at least in a small piece of code

[19:26] <lizmat> tonight I'll run my spectest bench on it, and we'll see if that makes a difference

[19:27] <lizmat> m: use nqp; my $a = 42; for ^10000000 { my $b = nqp::if($a,42,666) }; say now - INIT now

[19:27] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.4398375␤»

[19:27] <lizmat> m: use nqp; my $a = 42; for ^10000000 { my $b = nqp::if($a,42,666) }; say now - INIT now

[19:27] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.4652576␤»

[19:27] <lizmat> m: use nqp; my $a = 42; for ^10000000 { my $b = nqp::if($a,42,666) }; say now - INIT now

[19:27] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.4549415␤»

[19:27] <lizmat> m: my $a = 42; for ^10000000 { my $b = $a ?? 42 !! 666 }; say now - INIT now

[19:27] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.4784214␤»

[19:28] <lizmat> m: my $a = 42; for ^10000000 { my $b = $a ?? 42 !! 666 }; say now - INIT now

[19:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.43757528␤»

[19:28] <lizmat> m: my $a = 42; for ^10000000 { my $b = $a ?? 42 !! 666 }; say now - INIT now

[19:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.4323779␤»

[19:28] <lizmat> m: my $a = 42; for ^10000000 { my $b = $a ?? 42 !! 666 }; say now - INIT now

[19:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.4495505␤»

[19:28] <lizmat> with 10M iterations, there's bound to be noise

[19:36] <MasterDuke> cachegrind might show something useful. also MVM_SPESH_BLOCKING and MVM_SPESH_NODELAY

[19:37] <MasterDuke> locally i don't really see any difference between those two

[19:39] <lizmat> this was about delivering in my promise made many years ago that when high level constructs would allow for the same performance, I would change code back to using those hll conctructs

[19:39] <MasterDuke> lizmat++

[19:39] <lizmat> *on my promise

[19:42] <MasterDuke> cachegrind with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 shows them pretty similar

[19:42] <lizmat> mind you, I didn't generally touch nqp::if's inside of other nqp:: structures

[19:42] <lizmat> but those would require more brainpower to actually do

[19:49] <lizmat> and thus would take a lot longer to do

[20:00] <[Coke]> seems like the sort of work that someone could chip in on in that branch, no? just needs to be spectest clean, right?

[20:00] <lizmat> well...  also in the same ballpark of performance

[20:01] <lizmat> so the nqp::while/nqp::until structures should definitely *not* be touched

[20:03] <[Coke]> fair enough. If you need help with braindead swaps, that is definitely in my wheelhouse. thinking probably not so much. :)

[20:03] *** MasterDuke left
[20:04] <lizmat> this PR is more a proof of concept, and we should see how tonight's spectest comes out (on my machine)

[20:05] <lizmat> when it runs, it runs around 6am in the morning, when it has been asleep for a few hours and so should have fewer throttling issues

[20:13] *** sena_kun left
[20:15] *** MasterDuke joined
[20:19] <timotimo> i would perhaps compare --output=optimize between ??!! and nqp::if

[20:22] <lizmat> as rakuast has a Ternary class, it should allow for higher level optimization logic as wel

[20:25] <lizmat> hmm... interesting test output from is-deeply:

[20:25] <lizmat> # expected: $(("a", "b", "c"), Bool::True)

[20:25] <lizmat> #      got: $(("a", "b", "c"), Bool::True)

[20:39] <[Coke]> O_o;

[20:39] <lizmat> m: my %h = a => 42; dd %h<a>:kv[1]   # sorta expected 42 here, wonder why the [1] is silently being ignored

[20:39] <camelia> rakudo-moar 85847d2f1: OUTPUT: «("a", 42)␤»

[20:40] <lizmat> m: my %h = a => 42; dd (%h<a>:kv)[1]   # extra parens gives the correct result

[20:40] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Int %h = 42␤»

[20:45] <lizmat> [Coke]: turned out one was an IterationBuffer, and the other one was a List

[20:57] <[Coke]> +1

[20:58] *** squashable6 left
[20:59] *** squashable6 joined
[21:17] <Geth_> ¦ rakudo: d08247db4a | (Elizabeth Mattijsen)++ | src/core.e/hash_slice.pm6

[21:17] <Geth_> ¦ rakudo: Fixes for tests that failed for %h{a;b;c}:adverbs

[21:17] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d08247db4a

[21:17] <Geth_> ¦ rakudo: 33bb6504d1 | (Elizabeth Mattijsen)++ | 2 files

[21:17] <Geth_> ¦ rakudo: Make IterationBuffer.raku different

[21:17] <Geth_> ¦ rakudo: 

[21:17] <Geth_> ¦ rakudo: It was just rakuing as a List, but that creates some very confusing

[21:17] <Geth_> ¦ rakudo: is-deeply output when comparing the same values from a List and an

[21:17] <Geth_> ¦ rakudo: IterationBuffer.

[21:17] <Geth_> ¦ rakudo: 

[21:17] <Geth_> ¦ rakudo: Telemetry needed to be adapted because it depended on the previous

[21:17] <Geth_> ¦ rakudo: behaviour.

[21:17] <Geth_> ¦ rakudo: 

[21:17] <Geth_> ¦ rakudo: Please note that IterationBuffer.raku is a debugging tool: it does

[21:17] <Geth_> ¦ rakudo: *not* roundtrip, nor is it the intent that it ever will.

[21:17] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/33bb6504d1

[22:04] <Geth_> ¦ roast: 1d95056189 | (Elizabeth Mattijsen)++ | S32-hash/multislice-6e.t

[22:04] <Geth_> ¦ roast: Add some %h{a;b;c}:delete tests

[22:04] <Geth_> ¦ roast: 

[22:04] <Geth_> ¦ roast: Not all of the passing yet

[22:04] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/1d95056189

[22:04] <lizmat> and that concludes my hacking for today&

[22:05] *** lichtkind left
[22:08] *** dogbert17 left
[22:08] *** dogbert17 joined
[23:25] *** squashable6 left
[23:27] *** squashable6 joined
[23:50] *** MasterDuke left
[23:51] *** leont left
