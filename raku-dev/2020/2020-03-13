[00:00] <sjn> saw it

[00:00] <sjn> https://github.com/orgs/raku-community-modules/teams should probably be explicitly pinged :-)

[00:01] <sjn> don't see jnthn on that list; maybe not drop this in his lap (I guess he has enough to do)

[00:01] <AlexDaniel> can't do it from another org

[00:02] <AlexDaniel> sjn: I can assign it to myself but it's not as useful this month

[00:02] <AlexDaniel> I can also assign it to rba but they tend to deal with other kind of problems

[00:03] <AlexDaniel> jnthn: just feel free to reassign it to anybody else

[00:13] *** sena_kun joined
[00:15] *** Altai-man_ left
[00:40] <cfa> AlexDaniel: cool, thanks

[01:21] *** toddr joined
[02:12] *** Altai-man_ joined
[02:15] *** sena_kun left
[04:13] *** sena_kun joined
[04:15] *** Altai-man_ left
[05:15] *** releasable6 left
[05:15] *** sourceable6 left
[05:15] *** statisfiable6 left
[05:15] *** benchable6 left
[05:15] *** coverable6 left
[05:15] *** greppable6 left
[05:15] *** bisectable6 left
[05:15] *** linkable6 left
[05:15] *** bloatable6 left
[05:15] *** committable6 left
[05:15] *** nativecallable6 left
[05:15] *** tellable6 left
[05:15] *** quotable6 left
[05:15] *** notable6 left
[05:15] *** reportable6 left
[05:15] *** squashable6 left
[05:15] *** shareable6 left
[05:15] *** unicodable6 left
[05:15] *** evalable6 left
[05:15] *** coverable6 joined
[05:16] *** linkable6 joined
[05:16] *** sourceable6 joined
[05:16] *** notable6 joined
[05:16] *** committable6 joined
[05:16] *** greppable6 joined
[05:16] *** benchable6 joined
[05:17] *** tellable6 joined
[05:17] *** shareable6 joined
[05:17] *** reportable6 joined
[05:17] *** bisectable6 joined
[05:17] *** evalable6 joined
[05:17] *** unicodable6 joined
[05:17] *** nativecallable6 joined
[05:18] *** quotable6 joined
[05:18] *** statisfiable6 joined
[05:18] *** bloatable6 joined
[05:18] *** squashable6 joined
[05:18] *** releasable6 joined
[05:27] *** Kaeipi left
[05:28] *** Kaeipi joined
[05:31] *** Kaeipi left
[05:31] *** Kaeipi joined
[06:05] *** Kaeipi left
[06:05] *** Kaiepi joined
[06:13] *** Altai-man_ joined
[06:15] *** sena_kun left
[08:14] *** sena_kun joined
[08:15] *** Altai-man_ left
[08:42] *** camelia left
[08:51] *** Kaiepi left
[08:52] *** Kaiepi joined
[09:54] <lizmat> Files=1305, Tests=111214, 207 wallclock secs (28.49 usr  8.02 sys + 2892.44 cusr 267.50 csys = 3196.45 CPU)

[09:55] <lizmat> 8 CPU seconds less than yesterday

[09:57] <sena_kun> nice

[10:13] *** Altai-man_ joined
[10:15] *** sena_kun left
[10:31] <[Tux]> Rakudo version 2020.02.1-169-g355b520bf - MoarVM version 2020.02.1-44-g04005cf43

[10:31] <[Tux]> csv-test-xs-20      0.362 -  0.364

[10:31] <[Tux]> csv-ip5xs           0.704 -  0.715

[10:31] <[Tux]> test-t --race       0.919 -  0.956

[10:31] <[Tux]> test-t              1.920 -  2.136

[10:31] <[Tux]> csv-ip5xs-20        6.116 -  6.244

[10:31] <[Tux]> test                8.182 -  8.883

[10:31] <[Tux]> test-t-20 --race    9.837 - 10.142

[10:31] <[Tux]> csv-parser         24.583 - 25.592

[10:31] <[Tux]> test-t-20          31.821 - 33.335

[10:31] <[Tux]> working from $home due to corona, so box is in use

[11:31] *** MasterDuke left
[11:45] *** camelia joined
[11:46] <lizmat> [Tux]: those timings feel off

[11:47] <[Tux]> they do

[11:48] <[Tux]> but I'm working from home, so I do use the resources

[11:55] <Geth> Â¦ rakudo: jnthn self-assigned User Defined Chain function not working in reduction metaoperator https://github.com/rakudo/rakudo/issues/3541

[12:08] <lizmat> [Tux]: understood

[12:13] *** sena_kun joined
[12:15] *** Altai-man_ left
[12:16] <Geth> Â¦ rakudo: jnthn self-assigned Declarator blocks not working for unit-declared roles. https://github.com/rakudo/rakudo/issues/3521

[12:20] <Geth> Â¦ rakudo: ac012f18be | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[12:20] <Geth> Â¦ rakudo: Ensure meta-ops respect user-defined chain ops

[12:20] <Geth> Â¦ rakudo: 

[12:20] <Geth> Â¦ rakudo: Fixes #3541.

[12:20] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ac012f18be

[12:20] <linkable6> RAKUDO#3541 [closed]: https://github.com/rakudo/rakudo/issues/3541 [metaop][operators] User Defined Chain function not working in reduction metaoperator

[12:20] <Geth> Â¦ roast: 031d18311e | (Jonathan Worthington)++ | 2 files

[12:20] <Geth> Â¦ roast: Test reduce with user-defined chain assoc ops

[12:20] <Geth> Â¦ roast: 

[12:20] <Geth> Â¦ roast: Covers https://github.com/rakudo/rakudo/issues/3541.

[12:20] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/031d18311e

[12:21] <sena_kun> jnthn, have some time for rakudo? :)

[12:22] <jnthn> Time, yes. Brain? Well, mostly for relatively easy (for me) bug hunting... :)

[12:23] <sena_kun> jnthn, m-maybe blocked grant PRs...

[12:23] <jnthn> Such as?

[12:24] <lizmat> Kaiepi 's PR's

[12:25] <sena_kun> https://github.com/rakudo/rakudo/pull/3451

[12:25] <sena_kun> also probably https://github.com/rakudo/rakudo/pull/3491

[12:25] <sena_kun> but there are a lot of them

[12:26] <sena_kun> https://github.com/rakudo/rakudo/pull/2478

[12:26] <sena_kun> ^ this one is probably more important

[12:27] <Geth> Â¦ rakudo: a093b7fa6a | (Elizabeth Mattijsen)++ | 2 files

[12:27] <Geth> Â¦ rakudo: Make IO::Path.mode about 14x as fast

[12:27] <Geth> Â¦ rakudo: 

[12:27] <Geth> Â¦ rakudo: - create a Rakudo::Internals.FILETEST-MODE plumbing method

[12:27] <Geth> Â¦ rakudo:   just like all of the other filetest methods

[12:27] <Geth> Â¦ rakudo: - don't use sprintf in creating the IntStr

[12:27] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a093b7fa6a

[12:30] <nine> lizmat: we know that the other process cannot be writing anymore. We don't know that it actually succeeded writing.

[12:31] <lizmat> nine: so what does the .s check then give us in security ?

[12:32] <lizmat> if we don't know if it succeeded in writing, we don't know whether it succeeded in writing all of what it needed

[12:33] <lizmat> and any case, the .s check is checking what the directory knows about the file, not necessarily up-to-date yet with the actual size of the file

[12:33] <nine> Well we know more than without it, even if it's not 100 %

[12:33] <lizmat> so, we're writing the file at its final destination?

[12:33] <lizmat> if so, maybe we should write it with a temporary file name, and then rename it in place ?

[12:33] <Kaiepi> https://github.com/rakudo/rakudo/pull/2478 is something i want to revise

[12:34] <Kaiepi> 3451 and 3491 are the main ones that need attention

[12:36] <nine> We already write to a temporary file (the .bc file) and rename in place

[12:37] <nine> I remember reading on lwn.net about file system issues where a system crash in the wrong moment could have led to the rename being successful but the file still lacking its contents. I guess the .s protects us against that

[12:41] <lizmat> feels to me there would be bigger problems by then ?

[12:42] <nine> Nah, it's really just you have a power outage and end up with a zero sized file or two. It's nice to not stumble over them if we can avoid it and the test is cheap.

[12:43] <nine> Mind that in the by far most common case, we will precompile at that point and compared to that the check is really just a tiny drop.

[12:44] <lizmat> true, but this is all code that will never get hot enough to be optimized, I'd say

[12:45] <lizmat> so I wanna make sure we do as little as possible to make larger projects be able to scale up faster

[12:46] <lizmat> after a source update anywhere

[12:46] <nine> Reviving my precomp-singleprocess-resurrection branch would have much higher impact :)

[12:49] <Geth> Â¦ rakudo/precomp-singleprocess-resurrection: 8 commits pushed by (Arne SkjÃ¦rholt)++, (Stefan Seifert)++

[12:49] <Geth> Â¦ rakudo/precomp-singleprocess-resurrection: 7369107722 | Initial sketch of precompilation in a single process.

[12:49] <Geth> Â¦ rakudo/precomp-singleprocess-resurrection: cc85f1f33d | HLL::Compiler.evalfiles is more appropriate than command_eval.

[12:49] <Geth> Â¦ rakudo/precomp-singleprocess-resurrection: 07e75bf8ae | Fix precomp writing to wrong file ($io instead of $bc)

[12:49] <Geth> Â¦ rakudo/precomp-singleprocess-resurrection: 9f6bf83725 | Fix RepositoryRegistry looking in %*ENV instead of @*PRECOMP-WITH

[12:49] <Geth> Â¦ rakudo/precomp-singleprocess-resurrection: 3d62486184 | Need to set precomp mode manually

[12:49] <Geth> Â¦ rakudo/precomp-singleprocess-resurrection: 08bd5bb5ab | Ask the nested compiler about dependencies to avoid leaking in the closure

[12:49] <Geth> Â¦ rakudo/precomp-singleprocess-resurrection: 04f6c2a046 | Workaround for weird issue with multis

[12:49] <Geth> Â¦ rakudo/precomp-singleprocess-resurrection: 8bf6cbb35b | Ensure no PrecompilationDependency objects escape to the caller

[12:49] <Geth> Â¦ rakudo/precomp-singleprocess-resurrection: review: https://github.com/rakudo/rakudo/compare/30ea39fffe2e...8bf6cbb35b02

[12:55] <lizmat> nine: do we have tools to investigate whether precomps gained stuff that they shouldn't?

[12:57] <nine> You mean those objects that leak into precomp files that my commit messages talk about? Can't remember really good tools.

[12:57] <lizmat> :-(  ok

[12:57] <nine> Actually the heap analyzer may come in handy there, since it can tell you about references to objects.

[12:58] <lizmat> I looked at the diff with the single-process effort...  I think it's past resurrection as such

[12:58] <lizmat> but I will look at the ideas behind it

[12:59] <nine> OMG sometimes, I can be unbelievably stupid. Like now as I'm wondering why I'm already hungry when breakfast wasn't that long ago. Only that I didn't actually eat breakfast. I just prepared it and packed it for eating at the office.

[12:59] <nine> lizmat: yeah, I figured as much. Lot's of change in that code since then

[13:00] <lizmat> once I grok enough of what's going on there, I'll mount another attack on making it single-process *and* threaded

[13:00] <Geth> Â¦ rakudo: d4231b1ffc | (Elizabeth Mattijsen)++ | 2 files

[13:00] <Geth> Â¦ rakudo: Make precomp existence test slightly faster

[13:00] <Geth> Â¦ rakudo: 

[13:00] <Geth> Â¦ rakudo: - introduce a fast R:I.FILETEST-ES method

[13:00] <Geth> Â¦ rakudo: - use that

[13:00] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d4231b1ffc

[13:07] *** lucasb joined
[13:12] *** travis-ci joined
[13:12] <travis-ci> Rakudo build failed. Jonathan Worthington 'Ensure meta-ops respect user-defined chain ops

[13:12] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661939450 https://github.com/rakudo/rakudo/compare/355b520bf7f2...ac012f18bef8

[13:12] *** travis-ci left
[13:13] <lizmat> restarted the one failing build that mattered

[13:14] <lizmat> hmm.. looks like one of my changes borked the JVM build  :-(

[13:20] <lizmat> nine: looks like adding a LEAVE phaser to precompile causes "Multiple exceptions were thrown by LEAVE/POST phasers"

[13:20] <lizmat> on the successful exit of precompile  :-)

[13:21] <lizmat> :-( rather

[13:21] <dogbert11> lizmat: I thought you were going to 'trick' jnthn into taking a look at R#3540

[13:21] <linkable6> R#3540 [open]: https://github.com/rakudo/rakudo/issues/3540 [QAST][codegen][needs research][performance] WhateverCode appears to clone when it shouldn't

[13:21] <dogbert11> :-)

[13:55] <Geth> Â¦ rakudo: c2a1ee9574 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[13:55] <Geth> Â¦ rakudo: Only lookup .store once during precompile

[13:55] <Geth> Â¦ rakudo: 

[13:55] <Geth> Â¦ rakudo: - and some additional typechecking

[13:55] <Geth> Â¦ rakudo: - and removal of unnecessary default values: Bool is also False

[13:55] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c2a1ee9574

[13:56] *** travis-ci joined
[13:56] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make IO::Path.mode about 14x as fast

[13:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661941516 https://github.com/rakudo/rakudo/compare/ac012f18bef8...a093b7fa6a39

[13:56] *** travis-ci left
[13:56] <lizmat> dogbert11: already tried that

[13:56] <lizmat> restarted the one failing job

[14:04] <Geth> Â¦ rakudo/WHY-on-role-group: a8f1e97a92 | (Jonathan Worthington)++ | src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp

[14:04] <Geth> Â¦ rakudo/WHY-on-role-group: Make .WHY on role group delegate to default role

[14:04] <Geth> Â¦ rakudo/WHY-on-role-group: 

[14:04] <Geth> Â¦ rakudo/WHY-on-role-group: Roles have a two-level structure: the role name is a parametric role

[14:04] <Geth> Â¦ rakudo/WHY-on-role-group: group, which in turns contains the parametric role. In the case of there

[14:04] <Geth> Â¦ rakudo/WHY-on-role-group: being many roles of the same short name, they are within the one group.

[14:04] <Geth> Â¦ rakudo/WHY-on-role-group: Declarator docs correctly attach to the parametric role. However, that

[14:04] <Geth> Â¦ rakudo/WHY-on-role-group: means .WHY on the group doesn't actually result in those docs. You have

[14:04] <Geth> Â¦ rakudo/WHY-on-role-group: <â¦commit message has 10 more linesâ¦>

[14:04] <Geth> Â¦ rakudo/WHY-on-role-group: review: https://github.com/rakudo/rakudo/commit/a8f1e97a92

[14:04] <Geth> Â¦ rakudo: jnthn++ created pull request #3549: Make .WHY on role group delegate to default role

[14:04] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3549

[14:04] <jnthn> Please leave opinions on the PR

[14:05] <jnthn> I thought it was an easy thing to fix, but it turns out we have spectests that break, so... 

[14:06] * sena_kun once attempted to look at it, thinking it may be an easy fix, but

[14:07] <jnthn> The fix was fine, I'm just a bit thrown by the spectests that expected it not to be fixed :)

[14:13] *** Altai-man_ joined
[14:15] *** sena_kun left
[14:23] <dogbert11> m: say say <0 0 0 0 0 0 0> X|| $++

[14:23] <camelia> rakudo-moar c2a1ee957: OUTPUT: Â«(0 0 0 0 0 0 0)â¤Trueâ¤Â»

[14:24] <jnthn> That doesn't thunk

[14:25] <Geth> Â¦ rakudo: 6d3f1c1270 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[14:25] <Geth> Â¦ rakudo: Look up $*REPO only once during precompile

[14:25] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6d3f1c1270

[14:26] <dogbert11> should it?

[14:26] <jnthn> No

[14:29] <dogbert11> m:  say Bool.pick Xxx ^5 # so this shouldn't thunk either I guess

[14:29] <camelia> rakudo-moar c2a1ee957: OUTPUT: Â«(() (True) (True True) (True True True) (True True True True))â¤Â»

[14:33] <jnthn> Well, that one more reasonbly could

[14:34] <jnthn> But evidently doesn't. That or you should go and buy a lottery ticket :P

[14:35] <dogbert11> I'm looking at some old bugs, in order to see if they might have been fixed. In this case it was https://github.com/Raku/old-issue-tracker/issues/6005 

[14:39] <Geth> Â¦ rakudo: bd9d7c1cc3 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[14:39] <Geth> Â¦ rakudo: Restore IO::Path.abspath semantics on the JVM backend

[14:39] <Geth> Â¦ rakudo: 

[14:39] <Geth> Â¦ rakudo: Well, hopefully so, Travis will tell.

[14:39] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bd9d7c1cc3

[14:48] *** cfa left
[15:01] <dogbert11> m: say [\Z+] (1, 2, 3), (10, 20, 30), (100, 200, 300)

[15:01] <camelia> rakudo-moar bd9d7c1cc: OUTPUT: Â«((6) (11 22 33) (111 222 333))â¤Â»

[15:05] <Geth> Â¦ rakudo: dceef85f3b | (Elizabeth Mattijsen)++ | 3 files

[15:05] <Geth> Â¦ rakudo: Make sure we use same checksum method everywhere

[15:05] <Geth> Â¦ rakudo: 

[15:05] <Geth> Â¦ rakudo: - add IO::Path.CHECKSUM internal method

[15:05] <Geth> Â¦ rakudo: - use this where appropriate

[15:05] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dceef85f3b

[15:34] *** travis-ci joined
[15:34] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Only lookup .store once during precompile

[15:34] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661972490 https://github.com/rakudo/rakudo/compare/d4231b1ffc38...c2a1ee957481

[15:34] *** travis-ci left
[15:39] <lizmat> restarted the one failing job

[15:41] <Geth> Â¦ rakudo: 859d8f048a | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[15:41] <Geth> Â¦ rakudo: Move variables closer to where they're needed

[15:41] <Geth> Â¦ rakudo: 

[15:41] <Geth> Â¦ rakudo: A cosmetic / readability / comprehensibility change

[15:41] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/859d8f048a

[15:47] *** squashable6 left
[15:50] *** squashable6 joined
[15:51] <lizmat> nine: looks like precomp file is slurped than written at proper location, rather than renamed ??

[15:51] <lizmat> :bytecode($bc.slurp(:bin))

[15:56] <nine> lizmat: https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/PrecompilationStore/File.pm6#L269

[15:57] <nine> lizmat: ah sorry, second time I gave you misleading information

[15:57] <nine> lizmat: this is the right one: https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/PrecompilationStore/File.pm6#L277

[15:57] <nine> So we're wrinting a .tmp file and rename that. Which makes more sense because the precomp file is the header + the .bc file's contents

[16:06] <lizmat> aha, ok... that makes it clearer

[16:08] *** ZzZombo left
[16:08] <lizmat> so the bc file is just that: the bytecode file

[16:09] <lizmat> would it make sense to try and have the system write to an open handle?  or to have the system write to an in-memory blob

[16:09] <lizmat> so that we could prevent needing to write / slurp / write the bytecode ?

[16:13] *** sena_kun joined
[16:15] *** Altai-man_ left
[16:18] <Geth> Â¦ rakudo: 5ea1c34674 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[16:18] <Geth> Â¦ rakudo: Some mixed micro opts

[16:18] <Geth> Â¦ rakudo: 

[16:18] <Geth> Â¦ rakudo: - binding instead of assigning

[16:18] <Geth> Â¦ rakudo: - check the cheapest (and most likely failing) condition first

[16:18] <Geth> Â¦ rakudo: - use faster existence check (and also check for size)

[16:18] <Geth> Â¦ rakudo: - another case of if foo -> \bar

[16:18] <Geth> Â¦ rakudo: - one case of missed .store

[16:19] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5ea1c34674

[16:21] <lizmat> nine: if something went wrong with creating the precomp, shouldn't we be $bc.unlink to be on the safe side ?

[16:23] <lizmat> nine: re writing bytecode to a blob: duh, that would require a single-process precomp setup  :-)

[16:37] <nine> Writing to an open handle would be nicer indeed. On that note using a pipe for the dependencies instead of STDOUT would be, too. The main reason for me not doing that in the first place was that I didn't know if that would work on Windows and it was almost December 2015...

[16:38] <lizmat> aha, ok, I'll keep that in mind...

[16:59] *** MasterDuke joined
[17:16] <Geth> Â¦ rakudo: 2a58eb3989 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[17:16] <Geth> Â¦ rakudo: Optimize setup / handling of dependencies a bit

[17:16] <Geth> Â¦ rakudo: 

[17:16] <Geth> Â¦ rakudo: - deHLLize setting up of the dependencies

[17:16] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2a58eb3989

[17:33] <Geth> Â¦ rakudo: lizmat self-assigned New class assigned to $*ARGFILES breaks "IO::CatHandle::Autolines" https://github.com/rakudo/rakudo/issues/3548

[17:43] *** kawaii left
[18:02] *** patrickb joined
[18:12] *** Altai-man_ joined
[18:15] *** sena_kun left
[18:52] *** ufobat__ joined
[18:55] *** ufobat_ left
[19:24] *** MasterDuke left
[20:13] *** sena_kun joined
[20:15] *** Altai-man_ left
[20:34] *** lucasb left
[20:34] *** MasterDuke joined
[20:40] <patrickb> rba: I just uploaded rakubrew v6 (https://patszim.volans.uberspace.de/patcloud/index.php/s/qmkreEJLQDZcjbf)

[20:40] <patrickb> rba: Also I have a new version of the rakubrew.org website. Can you bump that?

[20:41] <patrickb> rba: Thanks for your constant support with this!

[21:53] *** finsternis left
[22:04] <MasterDuke> i added `note("composed " ~ $obj.HOW.name($obj));` here https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/ClassHOW.nqp#L249 as well as notes in `type_check` and `find_method`

[22:06] <MasterDuke> when i run `constant N = 10; my int @a[N]; @a[$_] = $_ for ^N; say @a[N-1]; say now - INIT now`, i see lots of `looking for type <foo> in array[int]` and `looking for method <bar> in array[int]`, but neither when building rakudo or running that example do i see `composing array[int]`

[22:06] *** Altai-man_ joined
[22:07] <MasterDuke> there's `composed array[int]+{array::shaped1intarray}` when running the example and `composed array+{array::intarray[int]}` when building rakudo

[22:09] *** sena_kun left
[22:19] *** toddr left
[22:24] <Geth> Â¦ problem-solving: ugexe assigned to jnthn Issue New public interfaces are often added without any chance for general consensus https://github.com/Raku/problem-solving/issues/169

[23:17] * lizmat calls it a day

[23:19] *** finsternis joined
[23:20] *** MasterDuke left
[23:20] <Altai-man_> lizmat, rest well.

[23:37] *** patrickb left
[23:42] *** MasterDuke joined
[23:44] <MasterDuke> jnthn: don't want to bother you, but if you have any suggestions for a better way to address https://github.com/rakudo/rakudo/issues/3532 i'm all ears

