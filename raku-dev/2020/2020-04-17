[01:00] *** dogbert17 left
[01:27] *** lucasb left
[02:48] *** softmoth left
[04:40] *** statisfiable6 left
[04:40] *** sourceable6 left
[04:40] *** linkable6 left
[04:40] *** evalable6 left
[04:40] *** bisectable6 left
[04:40] *** tellable6 left
[04:40] *** unicodable6 left
[04:40] *** quotable6 left
[04:40] *** squashable6 left
[04:40] *** committable6 left
[04:40] *** notable6 left
[04:40] *** releasable6 left
[04:40] *** shareable6 left
[04:40] *** benchable6 left
[04:40] *** nativecallable6 left
[04:40] *** greppable6 left
[04:40] *** bloatable6 left
[04:40] *** coverable6 left
[04:40] *** reportable6 left
[04:40] *** nativecallable6 joined
[04:41] *** quotable6 joined
[04:41] *** squashable6 joined
[04:41] *** benchable6 joined
[04:41] *** linkable6 joined
[04:41] *** shareable6 joined
[04:41] *** evalable6 joined
[04:41] *** notable6 joined
[04:42] *** statisfiable6 joined
[04:42] *** bloatable6 joined
[04:42] *** sourceable6 joined
[04:42] *** committable6 joined
[04:42] *** reportable6 joined
[04:42] *** greppable6 joined
[04:42] *** releasable6 joined
[04:43] *** bisectable6 joined
[04:43] *** unicodable6 joined
[04:43] *** coverable6 joined
[04:43] *** tellable6 joined
[05:10] *** tyil left
[05:15] *** tyil joined
[05:41] <Geth_> ¦ rakudo: 717b3266d1 | (Christian Bartolomäus)++ | tools/build/create-jvm-runner.pl

[05:41] <Geth_> ¦ rakudo: [JVM] Fix generated runner files

[05:41] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/717b3266d1

[06:09] *** AlexDaniel left
[06:22] *** MasterDuke joined
[06:22] <MasterDuke> timotimo: did you get it? i think it's still available at https://send.firefox.com/download/e038cb2efe8f25a3/#HXEpTYJDddukU-ijUAWoyw

[07:37] *** patrickb joined
[08:11] <nine> AlexDaniel`: I actually prefer rebasing before a merge as it gives you a nice linear history that can be bisected more easily

[08:28] *** ufobat joined
[09:10] *** sena_kun joined
[09:13] *** Altai-man_ joined
[09:16] *** sena_kun left
[10:16] <Geth_> ¦ rakudo: 66a2250aa1 | (Christian Bartolomäus)++ | 3 files

[10:16] <Geth_> ¦ rakudo: Add missing label support for some loop constructs

[10:16] <Geth_> ¦ rakudo: 

[10:16] <Geth_> ¦ rakudo: A couple of loop constructs were missing support for labels. Probably

[10:16] <Geth_> ¦ rakudo: this went unnoticed, because 'for' loops were not affected and a lot

[10:16] <Geth_> ¦ rakudo: of iterating is handled by optimized code in

[10:16] <Geth_> ¦ rakudo: src/core.c/Any-iterable-methods.pm6 (IterateOneWithPhasers and friends).

[10:16] <Geth_> ¦ rakudo: 

[10:16] <Geth_> ¦ rakudo: This should fix the problem described in #3622.

[10:16] <linkable6> RAKUDO#3622 [open]: https://github.com/rakudo/rakudo/issues/3622 Some loop constructs crash when used with labels

[10:16] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/66a2250aa1

[10:16] <Geth_> ¦ rakudo: 77b7e0cde5 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 3 files

[10:16] <Geth_> ¦ rakudo: Merge pull request #3623 from usev6/issue3622_label_for_nqp-handle

[10:16] <Geth_> ¦ rakudo: 

[10:16] <Geth_> ¦ rakudo: Add missing label support for some loop constructs

[10:16] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/77b7e0cde5

[10:16] <Geth_> ¦ roast: 53d332addf | (Christian Bartolomäus)++ | S04-statements/label.t

[10:16] <Geth_> ¦ roast: Test usage of labels within nested loops

[10:16] <Geth_> ¦ roast: 

[10:16] <Geth_> ¦ roast: ... as reported in https://github.com/rakudo/rakudo/issues/3622.

[10:16] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/53d332addf

[10:16] <Geth_> ¦ roast: 0bbe015c4f | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S04-statements/label.t

[10:16] <Geth_> ¦ roast: Merge pull request #635 from usev6/rakudo_issue3622

[10:16] <Geth_> ¦ roast: 

[10:16] <Geth_> ¦ roast: Test usage of labels within nested loops

[10:16] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/0bbe015c4f

[10:17] <Geth_> ¦ rakudo: 2fb7198f3d | (Elizabeth Mattijsen)++ | src/core.c/Date.pm6

[10:17] <Geth_> ¦ rakudo: Add Date.last-date-in-month

[10:17] <Geth_> ¦ rakudo: 

[10:17] <Geth_> ¦ rakudo: This short-cut method gives you the last date in the month of the

[10:17] <Geth_> ¦ rakudo: Date object, or returns the invocant if the day value is already

[10:17] <Geth_> ¦ rakudo: the last day of the month.

[10:17] <Geth_> ¦ rakudo: 

[10:17] <Geth_> ¦ rakudo: This should allow for much easier ranges like

[10:17] <Geth_> ¦ rakudo: 

[10:17] <Geth_> ¦ rakudo:     $date .. $date.last-date-in-month

[10:17] <Geth_> ¦ rakudo: 

[10:17] <Geth_> ¦ rakudo: for all remaining dates in the month.

[10:17] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2fb7198f3d

[10:24] *** dogbert17 joined
[10:38] *** MasterDuke left
[10:47] *** AlexDaniel joined
[10:47] *** MasterDuke joined
[10:48] *** AlexDaniel left
[10:48] *** AlexDaniel joined
[10:56] *** patrickb left
[11:13] *** Xliff joined
[11:15] *** sena_kun joined
[11:17] *** Altai-man_ left
[11:17] <Xliff> use NativeCall; sub malloc(uint64) is native returns Buf { * }; my $a = malloc(100); say $a; <-- Kills rakudo dead with an infinite hang

[11:18] <Xliff> use NativeCall; sub malloc(uint64) is native returns Pointer { * }; my $a = malloc(100); say $a; <-- Works fine. LTA?

[11:19] *** camelia left
[11:20] <nine> Xliff: how would it know how large that Buf actually is?

[11:20] <lizmat> TIL about BagIt https://en.wikipedia.org/wiki/BagIt

[11:21] <lizmat> chloekek: wonder how that applies to CRAI ?

[11:21] <tellable6> lizmat, I'll pass your message to chloekek

[11:21] <lizmat> chloekek: that being https://en.wikipedia.org/wiki/BagIt

[11:21] <tellable6> lizmat, I'll pass your message to chloekek

[11:25] <Xliff> nine: Then rakudo should test for that and throw an error!

[11:26] <Xliff> Hence LTA

[11:26] *** camelia joined
[11:26] <Xliff> I'm bugging it.

[11:26] <lizmat> nine: you can presize a Buf / Blob

[11:27] <nine> #10 0x00007ffff787e615 in MVM_exception_throw_adhoc_free_va (tc=0x405f60, waste=0x0, messageFormat=0x7ffff7a637b0 "Internal error: unhandled dyncall return type", args=0x7fffffffbc68) at src/core/exceptions.c:899

[11:27] <nine> It tries to, but then runs into a deadlock

[11:27] <lizmat> m: dd Buf.allocate(10)

[11:27] <camelia> rakudo-moar 2fb7198f3: OUTPUT: «Buf.new(0,0,0,0,0,0,0,0,0,0)␤»

[11:27] <Xliff> Ouch.

[11:27] <Xliff> That took a long time.

[11:27] <lizmat> m: dd Buf.allocate(10)

[11:27] <camelia> rakudo-moar 2fb7198f3: OUTPUT: «Buf.new(0,0,0,0,0,0,0,0,0,0)␤»

[11:27] <nine> lizmat: maybe, but how would you give that preallocated Buf to the native sub to fill with the returned data

[11:28] <nine> lizmat: just doesn't make sense. We do have CArray for this

[11:28] <Xliff> nine: Isn't this all moot? If Buf/Blob aren't working as return types. Why allow them to be used? And yes! We have CArray for this. Just my point.

[11:28] <Xliff> Buf would be a better alternative, but I can wait until it's working properly.

[11:29] <lizmat> isn't it that that part of NativeCall actually precedes the invention of Buf/Blob ?

[11:30] <nine> Buf cannot ever be a valid return type for a native sub, because it would need to know how large that array is. CArray is appropriate as it puts the responsibility to keep track of that on its user.

[11:31] <lizmat> but Blob could be, as its size cannot change ?

[11:31] <nine> Not it cannot.

[11:31] <lizmat> ?

[11:32] <nine> Buf is just Blob with some extra methods. Both are using VMArray reprs and VMArray expects to manage it's memory itself and always know how large that array is.

[11:32] <nine> CArray has its own repr that supports unmanaged memory.

[11:36] <lizmat> aha   ok

[11:36] <nine> I just fixed that deadlock in MoarVM

[11:37] <Xliff> nine++

[11:37] <Xliff> So shouldn't steps be taken to insure that Buf/Blob cannot be used as return types??

[11:37] <Xliff> I take it they are fine as parameters?

[11:37] <nine> Fine as params, invalid as return types

[11:37] <Xliff> Wouldn't they just act as Pointer from that standpoint?

[11:38] <nine> Xliff: yep, please submit a PR

[11:38] <Xliff> OK. I'm going to finish bugging.

[11:38] <nine> Finish bugging. Start debugging :D

[11:39] <lizmat> Files=1306, Tests=111232, 216 wallclock secs (28.61 usr  8.46 sys + 3035.09 cusr 277.00 csys = 3349.16 CPU)   # from last night

[11:41] <nine> Memory usage looking quite good now :) http://niner.name/files/matikon-memory-usage-fixed.png

[11:41] <Xliff> nine: :P

[11:41] <Xliff> #3630

[11:42] <Xliff> nine: I have over 374,000 lines of my own code to deal with, ATM ;q

[11:47] <lizmat> wow

[11:47] * lizmat hopes a lot of that is generated 

[11:47] <jnthn> That's...a lot of code

[11:49] <Xliff> lizmat: Yes.

[11:50] <Xliff> All of it is hand maintained, tho.

[11:50] <Xliff> And yes, that's Raku code.

[11:50] <lizmat> wow

[11:50] <Xliff> http://github.com/Xliff - Check the featured projects.

[11:51] <Xliff> Almost 2 years woth of work.

[11:58] <nine> Xliff: is that webkit or webkit2?

[12:03] <Xliff> Webkit2

[12:03] <Xliff> Now 376k. ;q

[12:04] <Xliff> Just committed more to p6-GStreamer.

[12:04] <Xliff> And with that... it's now time to face $dayJob.

[12:25] <AlexDaniel> nine: for a lot of smaller projects having a linear history is nice, but when dealing with substantial PRs I'd much rather have a merge commit that can be easily reverted if needed

[12:26] <AlexDaniel> moreover, you can only rebase your own PRs, so it doesn't really matter in the end as you'll never really have linear history

[12:26] <Xliff> Yeah, but squashing commits kinda cheats the contributors. At least as far as Github is concerned.

[12:27] *** Xliff left
[12:28] <AlexDaniel> I'm not too worried about rewriting the commiter field, but throwing away the signature is kinda meh

[12:29] <AlexDaniel> I guess it's a weak argument cuz most people don't sign their stuff, but then of course they wouldn't if we start to routinely throw away the signatures :)

[12:30] <Geth_> ¦ rakudo: 92750571e4 | (Elizabeth Mattijsen)++ | 2 files

[12:30] <Geth_> ¦ rakudo: Don't use named variables between internal methods

[12:30] <Geth_> ¦ rakudo: 

[12:30] <Geth_> ¦ rakudo: There's no need, so why have the extra overhead of an optional named

[12:30] <Geth_> ¦ rakudo: parameter, when a obligatory positional will do.

[12:30] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/92750571e4

[12:30] <AlexDaniel> also I'm not sure how it makes bisecting harder, I never had an issue with it

[12:30] <AlexDaniel> and it's probably fair to say that I bisected a lot of stuff :)

[12:35] *** cognominal joined
[12:36] <nine> AlexDaniel: rebasing doesn't preclude having a merge commit

[12:38] *** cognomin_ left
[12:38] <AlexDaniel> sure

[12:40] <jnthn> lizmat: Names aren't so terribly expensive after specialization, fwiw; they end up being handled by index without any string comparisons.

[12:41] <jnthn> *nameds

[12:41] <lizmat> well, this involved just about any loop that we have

[12:41] <lizmat> so I figured it was worth the change even if they are not that expensive

[12:42] <jnthn> Only lazy ones :)

[12:42] <jnthn> But yeah, in that case it's not really much of a readability loss

[12:42] <lizmat> also nameds imply optionalness to me... which they weren't really

[12:43] <jnthn> The named actually was optional in the original code, though?

[12:43] <jnthn> I don't see a ! on it

[12:44] <jnthn> -     method CStyleLoop(&body,&cond,&afterwards,:$label) {

[12:44] <lizmat> indeed, but it wasn't used as such in the code

[12:44] <lizmat> if it had been a obligatory named, I wouldn't have changed it

[12:45] <lizmat> these are internal methods

[12:45] <lizmat> I didn't touch the outward facing parts

[12:46] <lizmat> like Seq.from-loop

[12:49] <bartolin_> jnthn: those :$label params were just added by me to fix https://github.com/rakudo/rakudo/issues/3622 I should have made them required.

[12:49] <tellable6> 2020-04-14T19:03:32Z #raku <[Coke]> bartolin_ so, printfh is slightly more used, it's made it into the stage-N snapshots. It's probably still removable, though.

[12:50] <bartolin_> I copied that from https://github.com/rakudo/rakudo/blob/92750571e4/src/core.c/Any-iterable-methods.pm6#L39, so maybe that :$label should get it's exclamation mark, too?

[12:50] <jnthn> lizmat: OK, sounds fine.

[12:50] <lizmat> bartolin_: no, that's an outward facing method (at least to Actions)

[12:50] <lizmat> that's why I didn't change that one

[12:52] <AlexDaniel> sena_kun: I'm testing a fix for November and other modules

[12:52] <bartolin_> lizmat: ok. thanks for taking care :)

[12:52] <AlexDaniel> sena_kun: it's a mistake on my side, I don't think I ever meant to install into directories that are not empty

[12:52] <sena_kun> AlexDaniel, yay! What was that?

[12:53] <AlexDaniel> sena_kun: I mean, in some way it's still a rakudo or zef issue. But either way Blin shouldn't be trying to install a module into the same directory twice

[12:54] <AlexDaniel> so what happens is that it tries on --new first, which fails, then it tries again using --old but attempts to install into the same directory

[12:54] <AlexDaniel> which is not empty even though the installation failed

[12:55] <AlexDaniel> the solution is extremely simple – create a temp dir to install stuff into

[12:55] <AlexDaniel> something that should've been done in the first place…

[12:56] <AlexDaniel> looking at the code I think I was relying on --dry a bit too much

[12:59] <AlexDaniel> sena_kun: anyway I'll let you know when you can rebuild the image :)

[13:12] <lizmat> bisectable6: dd "a" ...^ "e" ...^ "a"

[13:12] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=9275057) because on both starting points the exit code is 1

[13:12] <bisectable6> lizmat, bisect log: https://gist.github.com/03a94674b6e0df6f9fcefe5528d8506e

[13:12] <bisectable6> lizmat, (2018-04-21) https://github.com/rakudo/rakudo/commit/6a65ed02bf1fccb8a5d4b7df248d93036e7652c6

[13:13] <AlexDaniel> lizmat: I think it bisected something else

[13:13] <AlexDaniel> 6c: dd "a" ...^ "e" ...^ "a"

[13:13] <committable6> AlexDaniel, https://gist.github.com/c525a21a313bd2e5473f4c3d96349e42

[13:14] *** Altai-man_ joined
[13:14] <lizmat> yeah, I was wondering whether that was something that worked ever

[13:14] <lizmat> looks like no

[13:15] <lizmat> m: dd "a" ... "e" ... "a"  # this does

[13:15] <camelia> rakudo-moar 92750571e: OUTPUT: «("a", "b", "c", "d", "e", "d", "c", "b", "a").Seq␤»

[13:16] <lizmat> m: dd ("a" ... "e") ... "a"   # this does not

[13:16] <camelia> rakudo-moar 92750571e: OUTPUT: «("a",).Seq␤»

[13:16] <lizmat> m: dd "a" ... ("e" ... "a")   # yet this does

[13:16] <camelia> rakudo-moar 92750571e: OUTPUT: «("a", "b", "c", "d", "e", "d", "c", "b", "a").Seq␤»

[13:17] *** sena_kun left
[13:18] <lizmat> m: dd ("b" ... "e") ... "a"  # yet this does work again

[13:18] <camelia> rakudo-moar 92750571e: OUTPUT: «("b", "c", "d", "e", "d", "c", "b", "a").Seq␤»

[13:18] <AlexDaniel> lizmat: the last one works for a wrong reason I guess?

[13:18] <AlexDaniel> m: dd "a" ... ("e" ... "a")

[13:18] <camelia> rakudo-moar 92750571e: OUTPUT: «("a", "b", "c", "d", "e", "d", "c", "b", "a").Seq␤»

[13:18] <AlexDaniel> m: dd "a" ... <e x z>'

[13:18] <camelia> rakudo-moar 92750571e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3dd "a" ... <e x z>7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modi…»

[13:18] <AlexDaniel> m: dd "a" ... <e x z>

[13:18] <camelia> rakudo-moar 92750571e: OUTPUT: «("a", "b", "c", "d", "e", "x", "z").Seq␤»

[13:18] <AlexDaniel> I had no idea you could do that btw?

[13:19] <AlexDaniel> does it really match against the first element?

[13:19] <jnthn> m: say 'e' 

[13:19] <camelia> rakudo-moar 92750571e: OUTPUT: «e␤»

[13:19] <jnthn> m: say 'e' ~~ <e x z>

[13:19] <camelia> rakudo-moar 92750571e: OUTPUT: «False␤»

[13:21] <AlexDaniel> jnthn: yeah, it's something else. Notice how it also includes x z in the sequence

[13:21] <jnthn> *nod*

[13:21] <jnthn> Was just curious :)

[13:22] <lizmat> yeah, there's quite a jungle of conditions there

[13:22] <lizmat> and I wonder how much is actually used out there

[13:22] <AlexDaniel> m: .say for ‘a’ … <d a> … ‘e’

[13:22] <camelia> rakudo-moar 92750571e: OUTPUT: «a␤b␤c␤d␤a␤b␤c␤d␤e␤»

[13:23] <lizmat> as many people don't know they could do tha

[13:23] <lizmat> t

[13:24] <AlexDaniel> well, I can see a lot of uses for this… in code golf…

[13:24] <Geth_> ¦ nqp: ee70250772 | (Daniel Green)++ | tools/templates/MOAR_REVISION

[13:24] <Geth_> ¦ nqp: Bump Moar

[13:24] <Geth_> ¦ nqp: 

[13:24] <Geth_> ¦ nqp: Brings a couple fixes and the ability for nqp::encode() to append to a

[13:24] <Geth_> ¦ nqp: pre-existing buffer.

[13:24] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/ee70250772

[13:24] <lizmat> what I don't understand is, why it is correct that this produces a single value:

[13:25] <lizmat> dd "aaa" ... "z"

[13:25] <evalable6> lizmat, rakudo-moar 92750571e: OUTPUT: «("aaa",).Seq␤»

[13:25] <AlexDaniel> lizmat: well, what do you understand about the string generation so far?

[13:25] <AlexDaniel> like, what do you think should it produce and why

[13:26] <lizmat> I think that should produce an empty Seq

[13:27] <lizmat> because "aaa" is before "z", it uses .succ

[13:27] <lizmat> but then when the next value is generated, it sees that it can never reach the end because it has more characters than the end point

[13:27] <lizmat> and then decides to quit

[13:27] <lizmat> it could have known that for the first value as well

[13:27] <AlexDaniel> oh… it's using .succ in this case??

[13:27] *** lichtkind joined
[13:28] <lizmat> https://github.com/rakudo/rakudo/blob/master/src/core.c/Rakudo/SEQUENCE.pm6#L28

[13:28] <AlexDaniel> m: say ‘aab’ cmp ‘z’

[13:28] <camelia> rakudo-moar 92750571e: OUTPUT: «Less␤»

[13:28] <AlexDaniel> m: say ‘aab’.succ cmp ‘z’

[13:29] <camelia> rakudo-moar 92750571e: OUTPUT: «Less␤»

[13:29] <AlexDaniel> lizmat: so if it's using .succ, then why does it decide to quit if it's still less?

[13:29] <lizmat> https://github.com/rakudo/rakudo/blob/master/src/core.c/Rakudo/SEQUENCE.pm6#L29

[13:31] <lizmat> because it also checks the length, but only after it produced a value

[13:32] <AlexDaniel> lizmat: well, generally it is simply because the condition on line 24 is different from the one on 29, but it's not that this whole block makes much sense anyway

[13:33] <AlexDaniel> for example, let's say it's More

[13:33] <AlexDaniel> then what, why is it not calling .pred?

[13:33] <AlexDaniel> or at least why doesn't it do that with the same .chars logic

[13:33] <AlexDaniel> m: say ‘aaa’.pred

[13:33] <camelia> rakudo-moar 92750571e: OUTPUT: «Decrement out of range␤  in block <unit> at <tmp> line 1␤␤»

[13:34] <AlexDaniel> oh.

[13:34] <lizmat> m: dd ("zz" ... "a").head(20)   # it actually does, sort off

[13:34] <camelia> rakudo-moar 92750571e: OUTPUT: «("zz", "zy", "zx", "zw", "zv", "zu", "zt", "zs", "zr", "zq", "zp", "zo", "zn", "zm", "zl", "zk", "zj", "zi", "zh", "zg").Seq␤»

[13:34] <lizmat> however if you run it to completion:

[13:34] <lizmat> m: dd "zz" ... "a"

[13:34] <camelia> rakudo-moar 92750571e: OUTPUT: «Decrement out of range␤  in block <unit> at <tmp> line 1␤␤»

[13:35] <lizmat> still not sure why that happens

[13:35] <lizmat> as the endpoint is clearly reached

[13:36] <lizmat> m: dd ("zz" ... "a").skip(676).head

[13:36] <camelia> rakudo-moar 92750571e: OUTPUT: «Decrement out of range␤  in block <unit> at <tmp> line 1␤␤»

[13:36] <AlexDaniel> lizmat: well it's the .pred itself that blows up on ‘aa’

[13:37] <lizmat> ah, duh

[13:37] <AlexDaniel> m: say ‘zz-9’.succ

[13:37] <camelia> rakudo-moar 92750571e: OUTPUT: «zz-10␤»

[13:38] <AlexDaniel> m: say ‘zz-9’.succ.pred

[13:38] <camelia> rakudo-moar 92750571e: OUTPUT: «zz-09␤»

[13:38] <lizmat> m: say 09 + 1 - 1

[13:38] <camelia> rakudo-moar 92750571e: OUTPUT: «Potential difficulties:␤    Leading 0 has no meaning. If you meant to create an octal number, use '0o' prefix, but note that 9 is not a valid octal number. If you meant to create a string, please add quotation marks.␤    at <tmp>:1␤    ------> …»

[13:38] <lizmat> he

[13:39] <lizmat> m: say "09" + 1 - 1

[13:39] <camelia> rakudo-moar 92750571e: OUTPUT: «9␤»

[13:39] <lizmat> yeah... it's all pretty   ....  magic  :-)

[13:39] <AlexDaniel> lizmat: also the code you're showing somewhat assumes that cmp somehow relates to .succ and .pred

[13:40] <AlexDaniel> which, for strings at least, doesn't work this way

[13:40] <AlexDaniel> .succ on Str gives you what? Next filename or something?

[13:41] <AlexDaniel> m: say ‘zz-10.txt’.succ

[13:41] <camelia> rakudo-moar 92750571e: OUTPUT: «zz-11.txt␤»

[13:41] <lizmat> m: say ‘zz-10.txt’.IO.succ

[13:41] <camelia> rakudo-moar 92750571e: OUTPUT: «"zz-11.txt".IO␤»

[13:41] <AlexDaniel> m: say ‘zz-10.txt-20’.succ

[13:41] <camelia> rakudo-moar 92750571e: OUTPUT: «zz-11.txt-20␤»

[13:42] <lizmat> thing is, since we allow open() to just take a Str

[13:42] <lizmat> there's too much code out there depending on that behaviour to simply change

[13:43] <lizmat> we could decide to create a new behaviour for 6.e

[13:43] <AlexDaniel> lizmat: yes, which is why I think .succ on Str should in the end tell you “I don't know how to do that”

[13:43] <AlexDaniel> and before that we can maybe give a warning or something

[13:44] <AlexDaniel> want to work with filenames? Sure, .IO.succ

[13:44] <AlexDaniel> lizmat: but then … will have to continue doing the magic so that ‘a’…‘z’ keeps working…

[13:46] <lizmat> "a" ... "z" doesn't use .succ anyway

[13:46] <lizmat> if the strings are of the same length, it uses codepoint semantics anyway

[13:47] <lizmat> m: dd "▁▁" ...  "██"

[13:47] <camelia> rakudo-moar 92750571e: OUTPUT: «("▁▁", "▁▂", "▁▃", "▁▄", "▁▅", "▁▆", "▁▇", "▁█", "▂▁", "▂▂", "▂▃", "▂▄", "▂▅", "▂▆", "▂▇", "▂█", "▃▁", "▃▂", "▃▃", "▃▄", "▃▅", "▃▆", "▃▇", "▃█", "▄▁", …»

[13:48] <lizmat> m: dd "☀☀" ... "☂"☂""

[13:48] <camelia> rakudo-moar 92750571e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3dd "☀☀" ... "☂"7⏏5☂""␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement mo…»

[13:48] <lizmat> m: dd "☀☀" ... "☂☂"

[13:48] <camelia> rakudo-moar 92750571e: OUTPUT: «("☀☀", "☀☁", "☀☂", "☁☀", "☁☁", "☁☂", "☂☀", "☂☁", "☂☂").Seq␤»

[13:49] <AlexDaniel> which is cool, but then:

[13:49] <AlexDaniel> m: .say for ‘10’…‘20’

[13:49] <camelia> rakudo-moar 92750571e: OUTPUT: «10␤20␤»

[13:50] <lizmat> m: .say for ‘10’…‘21’  # even more confusing ?

[13:50] <camelia> rakudo-moar 92750571e: OUTPUT: «10␤11␤20␤21␤»

[13:50] <lizmat> it was actually mentioned as a feature in the speculation

[13:50] <lizmat> m: .say for ‘000’…‘777’

[13:50] <camelia> rakudo-moar 92750571e: OUTPUT: «000␤001␤002␤003␤004␤005␤006␤007␤010␤011␤012␤013␤014␤015␤016␤017␤020␤021␤022␤023␤024␤025␤026␤027␤030␤031␤032␤033␤034␤035␤036␤037␤040␤041␤042␤043␤044␤045␤046␤047␤050␤051…»

[13:51] <AlexDaniel> lizmat: with constants it is actually not as confusing, but if you have $a…$b and somehow end up with strings then it can be a problem

[13:51] <AlexDaniel> m: say ‘10’+‘20’

[13:51] <camelia> rakudo-moar 92750571e: OUTPUT: «30␤»

[13:52] <AlexDaniel> so a lot of the ops will work fine, and even … works fine with single digit numbers

[13:53] <AlexDaniel> lizmat: if we had a separate op for string generation then we'd be able to define reasonable and easy semantics for … based on .succ/.pred

[13:54] <AlexDaniel> and probably also easy to understand behavior for that separate string op

[13:57] <Geth_> ¦ nqp/master: 5 commits pushed by (Daniel Green)++, MasterDuke17++

[13:57] <Geth_> ¦ nqp/master: 771cf8fcf4 | Add more str coercion cases

[13:57] <Geth_> ¦ nqp/master: 76a0828efc | Write new strings directly into string heap buf

[13:57] <Geth_> ¦ nqp/master: b40f932808 | Write bytecode to output file on the fly

[13:57] <Geth_> ¦ nqp/master: 0b2b6f3555 | Write header last instead of first and fixing up

[13:57] <Geth_> ¦ nqp/master: ca51003550 | Merge pull request #612 from MasterDuke17/use_preexisting_buffer_when_building_string_heap

[13:57] <Geth_> ¦ nqp/master: review: https://github.com/Raku/nqp/compare/ee70250772d9...ca510035504e

[13:59] <AlexDaniel> greppable6: '\s*...

[14:02] *** greppable6 left
[14:02] <AlexDaniel> I see…

[14:09] <Geth_> ¦ rakudo: fdfa6ac85c | (Daniel Green)++ | tools/templates/NQP_REVISION

[14:09] <Geth_> ¦ rakudo: Bump NQP

[14:09] <Geth_> ¦ rakudo: 

[14:09] <Geth_> ¦ rakudo: Brings some MoarVM fixes as well as an NQP that writes bytecode on the

[14:09] <Geth_> ¦ rakudo: fly to reduce allocations.

[14:09] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fdfa6ac85c

[14:11] <lizmat> m: dd ("⚀⚀" ... "⚅⚅").roll(5)

[14:11] <camelia> rakudo-moar 92750571e: OUTPUT: «("⚄⚅", "⚀⚁", "⚄⚁", "⚁⚁", "⚂⚅").Seq␤»

[14:11] <lizmat> guess it could be useful for something like that

[14:14] <AlexDaniel> lizmat: nothing is ever totally useless, but it doesn't always mean that it should be there :)

[14:22] <lizmat> m: dd ("a" ... "e" ... 10).head(9)  # 10 magically interpreted as a string

[14:22] <camelia> rakudo-moar 92750571e: OUTPUT: «("a", "b", "c", "d", "e", "d", "c", "b", "a").Seq␤»

[14:23] <lizmat> m: dd ("a" ... "e" ... 10).head(10)

[14:23] <camelia> rakudo-moar 92750571e: OUTPUT: «("a", "b", "c", "d", "e", "d", "c", "b", "a", &CORE::infix:<orelse>(Failure.new(exception => X::AdHoc.new(payload => "Decrement out of range"), backtrace => Backtrace.new), *.self)).Seq␤»

[14:33] *** greppable6 joined
[15:10] <AlexDaniel> Altai-man_: OK, actually, I have no idea.

[15:10] <AlexDaniel> I changed it so that it writes to separate dirs, it didn't help

[15:10] <AlexDaniel> it has no access to the previous installation dir but somehow it still manages to install the module on second try

[15:11] <AlexDaniel> if I had to guess I'd say it's leaving some precomp files somewhere, but I have no idea where

[15:11] <Altai-man_> AlexDaniel, that's sad, but trying to debug it is admirable. On the bright note by now I know all the false positives by heart, so just have to filter them out. :)

[15:15] *** sena_kun joined
[15:16] *** Altai-man_ left
[15:19] <AlexDaniel> how does rakudo know that it should recompile stuff if rakudo itself was changed (e.g. updated to a newer version)?

[15:19] <AlexDaniel> by stuff I mean modules

[15:25] *** ufobat_ joined
[15:26] <AlexDaniel> sena_kun: btw this is wrong

[15:26] <AlexDaniel> weird, I thought I fixed that

[15:26] <AlexDaniel> sena_kun: https://github.com/Raku/Blin/commit/3f3a3e8c9954a85f0c0b36181a7440e9f73b9707

[15:29] *** ufobat left
[15:35] <Geth_> ¦ Blin: 08fded2e33 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/blin.p6

[15:35] <Geth_> ¦ Blin: Unbreak --custom-script

[15:35] <Geth_> ¦ Blin: 

[15:35] <Geth_> ¦ Blin: By fixing an oops in 3f3a3e8c9954a85f0c0b36181a7440e9f73b9707.

[15:35] <Geth_> ¦ Blin: review: https://github.com/Raku/Blin/commit/08fded2e33

[15:35] <nine> AlexDaniel: the precomp stores contain a directory named after the compiler's id which in turn contains the actual precomp files

[15:38] *** lichtkind left
[16:05] <AlexDaniel> nine: mind if I ask some possibly stupid questions? :)

[16:05] <AlexDaniel> nine: so when I ask zef to install a module, it first runs tests, and if tests are OK it install the module

[16:06] <AlexDaniel> nine: does it precompile modules twice or does it avoid that somehow?

[16:08] <nine> it does so twice

[16:16] <greppable6> AlexDaniel, and I oop! Backtrace: https://gist.github.com/0646a64339c1cb54ce4b82b225343d2b

[16:17] <lizmat> nine: I don't think you could do it once, right?

[16:22] <AlexDaniel> lizmat: why not??

[16:23] <lizmat> because during testing it is using -Ilib ?

[16:23] <lizmat> so using a different repo ?

[16:25] <nine> Well in theory it should be possible to install the module into a staging repository, use that for testing and when everything's fine, just copy the result files to the actual target repository.

[16:27] <nine> That way you'd actually test what will end up installed which could expose issues like %?RESOURCES used wrong (or not at all when it should)

[16:40] <AlexDaniel> sena_kun: D'OH! Dammit! I think I figured it out :D

[16:40] * sena_kun is very interested

[16:40] <AlexDaniel> sena_kun: I'm dumb. It's failing when trying to install the module, but on --old revisions it does --dry

[16:40] <AlexDaniel> so it's not even attempting to install them, it just tests

[16:41] <AlexDaniel> of course that succeeds

[16:41] <sena_kun> So the behavior differs for new and old?

[16:41] <sena_kun> Or, rather, check method.

[16:42] <AlexDaniel> sena_kun: no, it's just that Blin tends not to install anything it doesn't need

[16:42] <AlexDaniel> and if a module fails during the installation (not testing), then you won't see that

[16:43] * sena_kun looks forward towards testing out a patch to see how many false positives can be eradicated

[16:44] <AlexDaniel> nine: where does it store precomp files that were created during testing?

[16:46] *** cognomin_ joined
[16:50] *** cognominal left
[16:51] <nine> AlexDaniel: in .precomp

[16:57] <AlexDaniel> nine: which one? So do I understand it right that if I do `PERL6LIB=foo zef install smth` I'll end up with `foo/.precomp` containing different precomp files created from both steps?

[16:58] <AlexDaniel> nine: also, if I'm doing --install-to=bar, will bar have any precomp file or will any process that tries to use inst#bar have to precompile it again (into its own .precomp folder, wherever that is)?

[16:58] <AlexDaniel> files*

[17:04] <AlexDaniel> sena_kun: and now I understand why I didn't see anything like this before! https://github.com/Raku/Blin/commit/debe6760fdafb1be4963be8f8de596a871059269

[17:04] <AlexDaniel> sena_kun: basically, any module like this appeared as a Flapper

[17:04] <AlexDaniel> until I “fixed” it

[17:10] <[Coke]> Can someone give a brief overview of the "hll*" ops? just "things that might be customized based on the language that is targeting NQP (which is basically almost always Raku)"

[17:11] <[Coke]> nqp: nqp::say(nqp::bool(1))

[17:11] <camelia> nqp-moarvm: OUTPUT: «No registered operation handler for 'bool'␤   at gen/moar/stage2/QAST.nqp:1504  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_op)␤ from gen/moar/stage2/QAST.nqp:6145  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_node)…»

[17:11] <[Coke]> nqp: nqp::say(nqp::bool_I(1))

[17:11] <camelia> nqp-moarvm: OUTPUT: «This representation (P6int) cannot unbox to other types (for type BOOTInt)␤   at <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1916  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp…»

[17:11] <[Coke]> nqp: nqp::say(nqp::bool_i(1))

[17:11] <camelia> nqp-moarvm: OUTPUT: «No registered operation handler for 'bool_i'␤   at gen/moar/stage2/QAST.nqp:1504  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_op)␤ from gen/moar/stage2/QAST.nqp:6145  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_node)…»

[17:14] *** Altai-man_ joined
[17:17] *** sena_kun left
[17:26] <lizmat> m: dd ("aa" .. "z").list

[17:26] <camelia> rakudo-moar fdfa6ac85: OUTPUT: «("aa",)␤»

[17:26] <lizmat> m: dd (100 .. 10).list

[17:26] <camelia> rakudo-moar fdfa6ac85: OUTPUT: «()␤»

[17:26] <lizmat> these feel inconsistent

[17:27] <nine> AlexDaniel: yes on foo/.precomp, no on inst#bar

[17:28] <nine> AlexDaniel: if you -install-to bar, then bar/precomp contains the files

[18:05] *** lichtkind joined
[18:15] *** commavir joined
[18:29] <AlexDaniel> Altai-man_: can you please check what's the status of Inline::Perl5?

[18:29] <AlexDaniel> Altai-man_: there are modules that fail with `Please install Inline::Perl5 for Perl 5 support.` so something is off

[18:30] <AlexDaniel> nine: thank you!

[18:30] <Altai-man_> AlexDaniel, later today, in 2-3 hours, I think. Check as in if it installs on master?

[18:30] <AlexDaniel> Altai-man_: no, what's the output in blin

[18:30] <Altai-man_> ah

[18:32] <Altai-man_> AlexDaniel, started a run

[18:32] <AlexDaniel> Altai-man_: I didn't fix it yet!

[18:33] <AlexDaniel> Altai-man_: also, can't we take a look at the previous run?

[18:34] <Altai-man_> AlexDaniel, oops, just deleted /output. :S failures.md is still on github, I think.

[18:34] <AlexDaniel> Altai-man_: yeah but Inline::Perl5 is not there, understandibly

[18:34] <AlexDaniel> Altai-man_: ok lemme push my blin fixes first…

[18:34] *** finsternis joined
[18:38] <AlexDaniel> hmmm okay my fix is not helping November

[18:38] <AlexDaniel> back to the drawing board…

[18:38] <Altai-man_> AlexDaniel, what data for Inline::Perl5 you want, json?

[18:38] <AlexDaniel> Altai-man_: yeah, that'd be fine

[18:39] <Altai-man_> https://clbin.com/4jJnF

[18:40] <Altai-man_> Hmm, missing dependency is not what I'd expect.

[18:40] <AlexDaniel> interesting :)

[18:41] <AlexDaniel> okay I'll check, it's a blin thing

[18:41] <Altai-man_> AlexDaniel, should I do another run with latest blin?

[18:41] <AlexDaniel> Altai-man_: not really

[18:41] <AlexDaniel> maybe tomorrow I'll get stuff ready

[18:42] <Geth_> ¦ nqp: 25e3ccd006 | Coke++ | docs/ops.markdown

[18:42] <Geth_> ¦ nqp: document jvmgetproperties

[18:42] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/25e3ccd006

[18:44] <[Coke]> nqp: nqp::say(nqp::totalmem())

[18:44] <camelia> nqp-moarvm: OUTPUT: «3055808512␤»

[18:44] <[Coke]> ^^ bytes? 

[18:46] <AlexDaniel> [Coke]: yes

[18:49] *** softmoth joined
[18:51] <Geth_> ¦ nqp: b6c4b56f13 | Coke++ | docs/ops.markdown

[18:51] <Geth_> ¦ nqp: document totalmem op

[18:51] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/b6c4b56f13

[18:51] *** cognominal joined
[18:54] <AlexDaniel> Altai-man_: “Inline::Perl5 – MissingDependency – Dependency “perl” was not resolved”

[18:54] <AlexDaniel> Altai-man_: and then it refuses to test it xD

[18:55] *** cognomin_ left
[19:00] <Geth_> ¦ nqp: 1f86644328 | Coke++ | docs/ops.markdown

[19:00] <Geth_> ¦ nqp: Document isttyfh op

[19:00] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/1f86644328

[19:02] <AlexDaniel> Altai-man_: it's even more interesting because I have code that is supposed to specifically ignore that… :)

[19:04] *** softmoth left
[19:04] *** softmoth joined
[19:12] *** cognominal left
[19:15] *** sena_kun joined
[19:17] *** Altai-man_ left
[19:27] *** softmoth left
[19:28] *** softmoth joined
[19:36] *** dogbert17 left
[19:38] *** Xliff joined
[20:01] <Geth_> ¦ Blin/master: 5 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++

[20:01] <Geth_> ¦ Blin/master: 45818d4f03 | Fix installation of Inline::Perl5

[20:01] <Geth_> ¦ Blin/master: 918d169d01 | Use the same file version from Perl6-ecosystems

[20:01] <Geth_> ¦ Blin/master: 0a88000dfe | Create temp directories for modules we don't need

[20:01] <Geth_> ¦ Blin/master: 13ff51c7c0 | Always install modules (no more --dry runs)

[20:01] <Geth_> ¦ Blin/master: 8dda1b4cf2 | Make sure precomp files are dumped in temp-ish dirs

[20:01] <Geth_> ¦ Blin/master: review: https://github.com/Raku/Blin/compare/08fded2e336a...8dda1b4cf250

[20:01] <AlexDaniel> sena_kun: OK, you can rebuild and rerun now :)

[20:01] <AlexDaniel> sena_kun: a bunch of modules should not appear now, except for November and maybe some others

[20:02] <AlexDaniel> sena_kun: we'll see where we stand after this run and I'll try to fix the remaining ones

[20:02] <sena_kun> Trying it out...

[20:04] <AlexDaniel> sena_kun: also if you notice that it is much slower please let me know

[20:04] <sena_kun> Will do.

[20:26] *** pmurias joined
[21:14] *** Altai-man_ joined
[21:17] *** sena_kun left
[21:39] *** softmoth left
[21:49] *** pmurias left
[23:15] *** sena_kun joined
[23:17] *** Altai-man_ left
[23:19] *** softmoth joined
[23:54] *** lichtkind left
