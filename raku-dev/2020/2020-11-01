[00:00] <[Coke]> spec tests only test for the former (where there is only a single trailing one in the units param)

[00:25] <[Coke]> s/units/scale/

[00:31] *** Xliff left
[00:49] <Geth> ¦ roast: vrurg++ created pull request #695: Add testing of mixins under v6.e

[00:49] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/695

[00:53] *** kawaii left
[00:55] *** zostay left
[00:56] *** kawaii joined
[00:56] *** zostay joined
[01:12] <Geth> ¦ rakudo: 6b87d3e52c | (Vadim Belman)++ | src/core.c/operators.pm6

[01:12] <Geth> ¦ rakudo: Make auto-generated mixin role be of language revision 'c'

[01:12] <Geth> ¦ rakudo: 

[01:12] <Geth> ¦ rakudo: Fix `$a but $b` under `use v6.e` pragma.

[01:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6b87d3e52c

[01:12] <Geth> ¦ rakudo: 9be9a5cfe4 | (Vadim Belman)++ (committed using GitHub Web editor) | src/core.c/operators.pm6

[01:12] <Geth> ¦ rakudo: Merge pull request #3997 from vrurg/rakudo_3990

[01:12] <Geth> ¦ rakudo: 

[01:12] <Geth> ¦ rakudo: Make auto-generated mixin role be of language revision 'c'

[01:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9be9a5cfe4

[01:12] <Geth> ¦ roast: c0055b3383 | (Vadim Belman)++ | 4 files

[01:12] <Geth> ¦ roast: Add testing of mixins under v6.e

[01:12] <Geth> ¦ roast: 

[01:12] <Geth> ¦ roast: Primarly to make sure that cases like `0 but True` are not broken. So,

[01:12] <Geth> ¦ roast: `mixin-6e.t` is basically a copy of `mixin-6c.t` with few cases removed

[01:12] <Geth> ¦ roast: where 6.e-declared roles are mixed into core classes. These tests would

[01:12] <Geth> ¦ roast: require the roles to be declared externally, in a 6.c versioned module

[01:12] <Geth> ¦ roast: which would eventually wind down to the same testing we already do in

[01:12] <Geth> ¦ roast: mixin-6c.t.

[01:12] <Geth> ¦ roast: 

[01:12] <Geth> ¦ roast: - Added a test for in-role declared constructor to be invoked upon mixin

[01:12] <Geth> ¦ roast:   under 6.e

[01:12] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c0055b3383

[01:12] <Geth> ¦ roast: 2b6c8e6c92 | (Vadim Belman)++ (committed using GitHub Web editor) | 4 files

[01:12] <Geth> ¦ roast: Merge pull request #695 from vrurg/rakudo_3990

[01:12] <Geth> ¦ roast: 

[01:12] <Geth> ¦ roast: Add testing of mixins under v6.e

[01:12] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2b6c8e6c92

[05:26] *** frost-lab joined
[06:14] *** Kaiepi left
[06:20] *** Kaiepi joined
[08:21] *** jmerelo joined
[08:23] *** Xliff joined
[08:23] <Xliff> lizmat AlexDaniel: https://gist.github.com/Xliff/f4af67ed380d1024a19d68975e4ed759

[08:24] <Xliff> Also, let me know style changes, too!

[08:37] *** domidumont joined
[08:49] *** frost-lab left
[08:51] *** frost-lab joined
[08:54] <[Tux]> Rakudo v2020.10-25-g9be9a5cfe (v6.d) on MoarVM 2020.10-13-g1eda12a0a

[08:54] <[Tux]> csv-test-xs-20      0.385 -  0.388

[08:54] <[Tux]> test-t --race       0.846 -  0.928

[08:54] <[Tux]> csv-ip5xs           0.836 -  0.958

[08:54] <[Tux]> test-t              1.923 -  1.938

[08:54] <[Tux]> test                8.051 -  8.163

[08:54] <[Tux]> csv-ip5xs-20        8.139 -  8.499

[08:54] <[Tux]> test-t-20 --race   10.331 - 10.490

[08:54] <[Tux]> csv-parser         27.202 - 27.595

[08:54] <[Tux]> test-t-20          33.471 - 34.084

[09:33] * nine got unstuck :)

[09:35] <nine> So what happens is that during precompilation of Foo::Bar, that package gets added to Foo's Stash. Thus it remains available globally even when precomp is done. When loading the module, we run merge_globals which is supposed to hook up the stashes from the module to the globally available ones.

[09:36] <gfldex> m: use v6.e.PREVIEW; role R {}; my $a = Int but R;

[09:36] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Don't know setting RESTRICTED␤   at gen/moar/ModuleLoader.nqp:249  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)␤ from gen/moar/ModuleLoader.nqp:254  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/…»

[09:36] <nine> merge_globals differentiates the cases of the symbol not being known at all, the exact same object already being there, the source package being a stub and the target package being a stub and both being stubs.

[09:36] <gfldex> m: use v6.e; role R {}; my $a = Int but R;

[09:36] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Don't know setting RESTRICTED␤   at gen/moar/ModuleLoader.nqp:249  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)␤ from gen/moar/ModuleLoader.nqp:254  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/…»

[09:37] <gfldex> That is not the error message I wanted to show. :(

[09:37] <nine> In my case though the source and the target are actual full blown packages. In that case we usually see the dreaded "P6M Merging GLOBAL symbols failed: duplicate definition of symbol" message. However I already disabled that message earlier as a workaround for similar situations.

[09:37] <nine> A possible solution is to merge the stashes anyway

[09:39] *** sena_kun joined
[09:45] <gfldex> There error message I wanted to show can be found in #3998 .

[09:49] <nine> A cleaner solution will probably be to remove the packages generated during precompilation so the usual merge rules work when loading the same module right after compilation

[09:59] <nine> So, now down to 2 tests and 1 spec test failing.

[10:00] <nwc10> and how much coffee remaining?

[10:00] <nine> Enough for the lock down :D

[10:01] <nwc10> now, I know the details here - the relevant shops are still open, so arguably there never wasn't a problem with coffee.

[10:01] <nwc10> and also, the length of all these lock downs is "patches welcome"

[10:01] <nwc10> so it's a bit hard to quantify

[10:01] <nwc10> unless you have a private coffee plantation.

[10:02] <nwc10> or you are like my boss and don't drink coffee. Which means that he can be confident that he has enough. (His wife, who does, I guess less so)

[10:05] <nine> Oh I enjoy my morning coffee far too much to give up on it

[10:05] <nwc10> I think that he never did drink coffee.

[10:05] <nwc10> I also think that I enjoy all my current "sins" far too much to give up on them.

[10:24] <jmerelo> nwc10: in which country/state are you located?

[10:24] <tellable6> 2020-10-30T23:53:41Z #raku <melezhik> jmerelo: another day you talked about testing some (potentially  problematic) Raku  modules during Hackaton. I suggest Rakudist as one of the solutions. So I just wonder if you've thought about that ...

[10:24] <tellable6> 2020-10-31T19:35:21Z #raku <[Coke]> jjmerelo - to avoid github ticket volleyball, do you agree that we should reject tickets regarding 'p6doc' executable since it is no longer in the repo? If so, I'm happy to do the ticket cleanup.

[10:24] <tellable6> 2020-10-31T19:35:58Z #raku <[Coke]> jjmerelo - I will also save the list of tickets for the new repo so whoever owns it can extract the bug info if they need it.

[10:25] <jmerelo> .tell melezhik Hacktoberfest is over... We still need the testing, too.

[10:25] <tellable6> jmerelo, I'll pass your message to melezhik

[10:25] <nwc10> I live about 1km outside of the boundaries of Vienna.

[10:25] <nwc10> so I'm in Lower Austria, but only just

[10:26] <nwc10> nine is in Upper Austria.

[10:26] <nwc10> and all the new restrictions are country-wide, so he's go the same rules as I have.

[10:26] <jmerelo> .tell Coke please go ahead. The new repo is Raku/rakudoc, so shouldn't be a big problem to move.

[10:26] <tellable6> jmerelo, I'll pass your message to [Coke]

[10:26] * lizmat is in lower lands

[10:27] <jmerelo> nwc10: for the time being, it's city-wide lockdown and curfew here in Granada. But all bets are off, since there were 2000 new cases in the province just last Friday (~1million people)

[10:43] <jmerelo> We still have 51 META.info-described modules in the ecosystem. Maybe we should have some deprecation cycle for that...

[10:43] <jmerelo> I seem to remember samcv was doing PRs with this? Maybe zoffix?

[10:45] <samcv> jmerelo, hmm?

[10:46] <jmerelo> hi, samcv ! Didn't you start an issue to substitute old META.infos?

[10:46] <samcv> we're talking about the module META files?

[10:46] <jmerelo> samcv: ah, no, only the license field... Anyway. Yes, we're talking about that.

[10:46] <samcv> ah. yeah i did the license field thing

[10:47] <jmerelo> samcv: here https://github.com/Raku/ecosystem/issues/324 Well, that's on top of some using META.info And that one is not finished either.

[10:48] <jmerelo> I just re-released PSGI and didn't realize about the license field. That should have been tested...

[10:50] <Geth> ¦ rakudo: ee089234fc | (Elizabeth Mattijsen)++ | src/core.c/ShapedArray.pm6

[10:50] <Geth> ¦ rakudo: Expose the Array::ShapedArray role

[10:50] <Geth> ¦ rakudo: 

[10:50] <Geth> ¦ rakudo: So that we can actually dispatch on that, like we can on the native

[10:50] <Geth> ¦ rakudo: version, the array::shapedarray role.

[10:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ee089234fc

[10:53] *** squashable6 left
[10:54] *** squashable6 joined
[11:03] *** jmerelo left
[11:09] <nine> Finally...we're mere days away from that super important event that will have worldwide implications and make my life better!

[11:09] <nine> Speaking about the avaiability of Zen 3 CPUs of course ;)

[11:09] <nine> I wonder if I will see build times halved compared to what I get on the 1800X

[11:10] <gfldex> I'm trying to buy a board to hold these. Should arrive December 2nd.

[11:11] <nine> Oh....availability that bad or will it only be released by then?

[11:12] <gfldex> I got one aleady but it was dead on arrival. It refused to go past POST. The replacement takes forever. I guess they are all sold out.

[11:13] <gfldex> And Amazon tends to be good at selling things.

[11:13] <nine> Right now Geizhals only lists a single passively cooled X570 board...and it's 800 Euros

[11:14] <gfldex> They only spin the fan when pci 4.0 is used.

[11:41] *** finsternis joined
[11:42] *** sxmx left
[11:49] <lizmat> m: my @a; dd @a[;]

[11:49] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Unable to call postcircumfix @a[ Nil ] with a type object␤Indexing requires a defined object␤  in block <unit> at <tmp> line 1␤␤»

[11:50] <lizmat> that feels like an LTA error, feels to me to be a special case of the zen slice

[11:52] <gfldex> m: my @a; dd @a[];

[11:52] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Array @a = []␤»

[11:53] <gfldex> m: my @a; dd @a[Empty];

[11:53] <camelia> rakudo-moar 85847d2f1: OUTPUT: «()␤»

[11:55] <gfldex> lizmat: [;] looks to me like an empty SemiList. I can't see any use case where it would be useful to behave different from Empty.

[11:56] <gfldex> m: my @b; my @a; dd @a[||@b];

[11:56] <camelia> rakudo-moar 85847d2f1: OUTPUT: «()␤»

[11:56] <lizmat> yeah, making it behave like Empty would be trivial

[11:57] <gfldex> [;] feels equivalent of [@b] where @b ~~ Empty

[12:05] <lizmat> afk for a few hours&

[12:08] *** Altai-man joined
[12:11] *** sena_kun left
[12:12] <samcv> Is there any reason I can't bump nqp and raku when I merge in the unicode 13 changes?

[12:12] <samcv> Been a while since I did that ;)

[12:13] <samcv> Everything looks good. Reviewed the issues with the grapheme cluster break roast tests. Was a good opportunity to add new changes which fudge tests based on the exact text of the unicode test file, instead of line number. Since line numbers can change between versions, but the text of the test doesn't

[12:13] <samcv> so should make it easier in the future

[12:15] <bartolin> lizmat: maybe you have a quick idea how to fix this? https://github.com/rakudo/rakudo/issues/3999

[12:15] <tellable6> 2020-10-27T01:47:51Z #raku-dev <[Coke]> bartolin there are some jvm specific opcodes at https://gist.github.com/coke/f87ab505c6cb825db51afcb5cb6a8990 like "attrhintfor" that could use some dos.

[12:22] <bartolin> .tell [Coke] (undocumented opcodes specific for jvm) I can't promise anything (short of time, not familiar with the more unusual opcodes), but I've added that to my list

[12:22] <tellable6> bartolin, I'll pass your message to [Coke]

[13:54] *** camelCaser left
[13:55] *** camelCaser joined
[13:59] *** frost-lab left
[14:03] <lizmat> samcv: afaik, it's ok to bump

[14:03] <nwc10> but not to hug. even with masks :-/

[14:04] <lizmat> .oO( doing the bump, that's soooo 80s :-)

[14:12] *** domidumont left
[14:31] *** domidumont joined
[14:53] <Geth> ¦ rakudo: 86a208e2ef | (Elizabeth Mattijsen)++ | lib/Test.rakumod

[14:53] <Geth> ¦ rakudo: Use nqp::can to test for test-assertion

[14:53] <Geth> ¦ rakudo: 

[14:53] <Geth> ¦ rakudo: In some cases, specifically on the JVM, frames can be NQP code objects.

[14:53] <Geth> ¦ rakudo: So instead of using .? dispatch, we're just checking if it can do the

[14:53] <Geth> ¦ rakudo: 'is-test-assertion' method.  Which it only can if the code actually had

[14:53] <Geth> ¦ rakudo: the "is test-assertion` trait applied with a true value.

[14:53] <Geth> ¦ rakudo: 

[14:53] <Geth> ¦ rakudo: This should fix #3999, Christian Bartolomäus++ for spotting.

[14:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/86a208e2ef

[14:53] <linkable6> RAKUDO#3999 [closed]: https://github.com/rakudo/rakudo/issues/3999 [JVM] Many spectest failures after addition of is-test-assertion() to Test.rakumod

[15:12] <Geth> ¦ rakudo: 35213f66a3 | (Elizabeth Mattijsen)++ | 2 files

[15:12] <Geth> ¦ rakudo: Make sure %h{|| foo} and @a[|| bar] are handled correctly

[15:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/35213f66a3

[15:14] <nine> Looks like 2 of the remaining 3 issues actually come from a workaround I did in MoarVM. Reverting that gives me 3 other errors of the same kind instead

[15:14] <nine> I even added a "FIXME this is just a trial" comment back then...

[15:14] <Geth> ¦ roast: 12096fdd54 | (Elizabeth Mattijsen)++ | 2 files

[15:14] <Geth> ¦ roast: Add tests for %h{|| foo} and @a[|| bar] cases

[15:14] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/12096fdd54

[15:16] <Geth> ¦ roast: 9f069e6379 | (Elizabeth Mattijsen)++ | S24-testing/line-numbers.t

[15:16] <Geth> ¦ roast: Make any errors a little bit clearer

[15:16] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9f069e6379

[15:17] <nine> In a sense I'm glad that this popped up again, as I don't remember what I thought at that time or how that's supposed to be a proper fix (which apparently it isn't anyway). I would have had a real hard time writing a commit message

[15:18] <lizmat> yeah, sometimes things come back to haunt you 

[15:18] <nine> So all I have to do is now find a proper fix :)

[15:19] <lizmat> earlier today I was looking at something in Main from 4.5 years ago, and was thinking: what the hell was I thinking then?

[15:21] <nwc10> well, obviously, then you were young and inexperienced :-)

[15:22] <nine> aren't we all?

[15:40] <[Coke]> .

[15:40] <tellable6> 2020-11-01T10:26:35Z #raku-dev <jmerelo> Coke please go ahead. The new repo is Raku/rakudoc, so shouldn't be a big problem to move.

[15:40] <tellable6> 2020-11-01T12:22:52Z #raku-dev <bartolin> [Coke] (undocumented opcodes specific for jvm) I can't promise anything (short of time, not familiar with the more unusual opcodes), but I've added that to my list

[16:09] *** sena_kun joined
[16:10] *** Altai-man left
[16:22] <nine> All tests successful.

[16:23] <nine> I wasn't that far off at all! A small adjustment actually made my workaround...work :) So now all tests and all spectests pass (including stress test). make install succeeds but the modules it installs are not yet usable

[16:24] <nine> Well some are, but not NativeCall

[16:26] <nine> I'm not terribly surprised. E.g. install-core-dist.raku both uses CompUnit::Repository::Staging and also installs it (which causes it again to get precompiled).

[16:33] <nwc10> I'm supposed to say "Woohoo!" aren't I?

[16:36] <lizmat> Woohoo! :-)

[16:36] <nine> :)

[16:47] <timotimo> does that last comment mean it'd be precompiling NativeCall in the same process twice, and that's where trouble could arise?

[16:51] <nine> No, that was why reproducible.t failed. I solved that by just precompiling in an external process. NativeCall fails to load because NativeCall::Types gets a dependency on NativeCall. Which means that some object from CompUnit::Repository::Installation::install leaks into the precomp file. I had to fix similar issues for CURF, so I'm quite confident that this won't become a deal breaker

[16:52] <nine> I already know pretty well how to debug issues like these (there were a lot of them). But not today :) Just a couple more minutes till my strength training starts and then its time for a relaxing evening...

[16:53] <lizmat> nine++

[16:58] <Xliff> nine: So will the P6M merge errors be mitigated?

[16:59] <Xliff> I'm thinking R#3922 and R#3075

[16:59] <linkable6> R#3922 [open]: https://github.com/rakudo/rakudo/issues/3922 P6M Merging error when using non-packaged our-scoped variables with a prefix.

[16:59] <linkable6> R#3075 [open]: https://github.com/rakudo/rakudo/issues/3075 [precompilation] Conflicting use statement does not produce an error, but fails dynamic compilation.

[18:00] *** domidumont left
[18:01] *** domidumont joined
[18:07] <nine> Xliff: it's possible there will be progress on that front

[18:51] <Geth> ¦ rakudo: 424ce71a99 | (Elizabeth Mattijsen)++ | src/core.c/native_array.pm6

[18:51] <Geth> ¦ rakudo: Simplify native shaped array .shape method

[18:51] <Geth> ¦ rakudo: 

[18:51] <Geth> ¦ rakudo: nqp::dimensions already returns a clone, so we can just shift off of

[18:51] <Geth> ¦ rakudo: that without needing indices.  This makes calling .shape about 10%

[18:51] <Geth> ¦ rakudo: faster, but this is generally drowned out in accessing native shaped

[18:51] <Geth> ¦ rakudo: arrays.

[18:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/424ce71a99

[18:54] <Geth> ¦ rakudo: 532b5423f0 | (Elizabeth Mattijsen)++ | 3 files

[18:54] <Geth> ¦ rakudo: Expose Array::Shaped1|2|3Array roles

[18:54] <Geth> ¦ rakudo: 

[18:54] <Geth> ¦ rakudo: Just as their native counterparts, so that can be used for dispatching

[18:54] <Geth> ¦ rakudo: if necessary.

[18:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/532b5423f0

[19:15] *** domidumont left
[19:40] *** sxmx joined
[20:05] *** sxmx left
[20:08] *** sxmx joined
[20:11] *** sena_kun left
[20:34] *** squashable6 left
[20:37] *** squashable6 joined
[20:46] *** melezhik joined
[20:48] <melezhik> .tell jmerelo: basically Rakudist is all about testing Raku modules against different Rakudo distros / OS, so if you still need testing , maybe be you could outline a problems and put details to https://github.com/melezhik/RakuDist/issues  ?

[20:48] <tellable6> melezhik, I'll pass your message to jmerelo

[21:22] <Geth> ¦ rakudo: vrurg++ created pull request #4000: Don't inherit mixin class language revision

[21:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4000

[21:24] <vrurg> .ask Altai-man Could you please do a blin run on R#4000?

[21:24] <linkable6> R#4000 [open]: https://github.com/rakudo/rakudo/pull/4000 Don't inherit mixin class language revision

[21:24] <tellable6> vrurg, I'll pass your message to Altai-man

[21:25] *** Kaiepi left
[21:28] <Geth> ¦ rakudo: vrurg self-assigned use v6.e.PREVIEW does not allow mixin of custom roles https://github.com/rakudo/rakudo/issues/3998

[21:56] *** Kaiepi joined
[22:29] *** vrurg left
[22:30] *** vrurg joined
[22:34] *** Xliff left
[22:51] *** squashable6 left
[22:53] *** squashable6 joined
