[00:32] *** dogbert11 joined
[00:35] *** dogbert17 left
[01:11] *** dogbert17 joined
[01:14] *** dogbert11 left
[01:15] *** sena_kun joined
[01:16] *** Altai-man left
[01:53] *** dogbert11 joined
[01:57] *** dogbert17 left
[02:08] *** dogbert17 joined
[02:11] *** dogbert11 left
[02:11] *** dogbert11 joined
[02:14] *** dogbert17 left
[02:21] *** dogbert17 joined
[02:23] *** dogbert11 left
[02:41] *** dogbert17 left
[02:44] *** dogbert17 joined
[03:00] <releasable6> Next release in ≈6 days and ≈15 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:32] *** lucasb left
[05:14] *** Altai-man joined
[05:16] *** sena_kun left
[05:47] *** yuplushi left
[06:30] *** yuplushi joined
[06:31] <lizmat> Files=1334, Tests=113514, 225 wallclock secs (29.19 usr  8.39 sys + 3146.04 cusr 283.47 csys = 3467.09 CPU)

[08:00] *** [TuxCM] left
[08:43] *** leont joined
[08:52] *** sena_kun joined
[08:53] *** Altai-man left
[09:02] *** samcv left
[09:02] *** samcv joined
[09:25] <leont> Remind me, what do I need to do again when «error: Entry '3rdparty/nqp-configure/README.md' not uptodate. Cannot merge.»

[12:51] *** Altai-man joined
[12:53] *** sena_kun left
[13:34] *** lucasb joined
[14:56] <Geth> ¦ nqp/nqp-js-S23: daf8df6c99 | (Nicholas Clark)++ | 2 files

[14:56] <Geth> ¦ nqp/nqp-js-S23: Serialization format 23 for nqp-JS

[14:56] <Geth> ¦ nqp/nqp-js-S23: 

[14:56] <Geth> ¦ nqp/nqp-js-S23: nqp-JS is currently a cross-compiler, and so needs to be able to read the

[14:56] <Geth> ¦ nqp/nqp-js-S23: serialization output of MoarVM. As of Feb 2020, commit 9709537d90d61529:

[14:56] <Geth> ¦ nqp/nqp-js-S23:     Serialize the names of closures

[14:56] <Geth> ¦ nqp/nqp-js-S23: 

[14:56] <Geth> ¦ nqp/nqp-js-S23:     The name is held per code object, meaning different closures may carry a

[14:56] <Geth> ¦ nqp/nqp-js-S23: <…commit message has 14 more lines…>

[14:56] <Geth> ¦ nqp/nqp-js-S23: review: https://github.com/Raku/nqp/commit/daf8df6c99

[15:03] <Geth> ¦ nqp: nwc10++ created pull request #655: Serialization format 23 for nqp-JS

[15:03] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/655

[15:36] *** squashable6 left
[15:38] *** squashable6 joined
[16:51] *** sena_kun joined
[16:54] *** Altai-man left
[18:39] <Geth> ¦ rakudo: Altai-man assigned to Kaiepi Issue Blin 2020.08, round 1 https://github.com/rakudo/rakudo/issues/3850

[18:46] <sena_kun> .tell Kaiepi hi! Wanted to assign the ticket to both you and nwc10, but for some reason github does not allow that, so pinged instead, so it's not like you are completely responsible for both issues. Thanks!

[18:46] <tellable6> sena_kun, I'll pass your message to Kaiepi

[18:50] <sena_kun> releasable6, status

[18:50] <releasable6> sena_kun, Next release in ≈6 days and ≈0 hours. 2 blockers. Changelog for this release was not started yet

[18:50] <releasable6> sena_kun, Details: https://gist.github.com/9ffc1fb1ad410bcbad3542e593de7e1c

[18:54] <gfldex> raku: my $*dynvar = 'yes'; sub s($a where ($*dnynvar ~~ 'yes')) { say $a }; s(42);

[18:54] <evalable6> gfldex, rakudo-moar 9d6d8dd7a: OUTPUT: «(exit code 1) Dynamic variable $*dnynvar not found␤  in sub s at /tmp/vXPN3XcSO6 line 1␤  in block <unit> at /tmp/vXPN3XcSO6 line 1␤␤»

[18:55] <gfldex> raku: my $*dynvar = 'yes'; sub s($a where {$*dnynvar ~~ 'yes'}) { say $a }; s(42);

[18:55] <evalable6> gfldex, rakudo-moar 9d6d8dd7a: OUTPUT: «(exit code 1) Dynamic variable $*dnynvar not found␤  in sub s at /tmp/jEui1voZLw line 1␤  in block <unit> at /tmp/jEui1voZLw line 1␤␤»

[18:55] <gfldex> is this a Rakudobug?

[18:55] <gfldex> (I hope it is because I got a usecase for that.)

[19:00] <lizmat> m: my $*dynvar = 'yes'; sub s($a where {$*dynvar ~~ 'yes'}) { say $a }; s(42);

[19:00] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «42␤»

[19:00] <lizmat> it works if you spell it ok

[19:00] <lizmat> ah, but you mean if it doesn't ?

[19:01] <lizmat> if a dynvar doesn't exists, it returns a failure

[19:01] <gfldex> ohh

[19:01] <gfldex> in that case i may have a problem elsewhere

[19:01] <lizmat> m: my $*dynvar = 'yes'; sub s($a where {($*somethingelse // '') eq 'yes'}) { say $a }; s(42);

[19:02] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Constraint type check failed in binding to parameter '$a'; expected anonymous constraint to be met but got Int (42)␤  in sub s at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:03] <lizmat> alternately, probably better: is possible, defined a define a "default" $*dynvar at the lowest possible level

[19:04] <gfldex> i'm using `CALLERS::<$*colored-exceptions> ~~ 'yes' // 'no'` to deal with undeclared dynvars

[19:05] <lizmat> why so difficult?

[19:06] <gfldex> I don't want to force users of a module to define a dynvar that may not even be used.

[19:06] <lizmat> ($*FOO // '') eq 'yes'

[19:07] <lizmat> that will be True if it is defined and has "yes" in it, otherwise False ?

[19:08] <gfldex> raku: sub s(){ ($*FOO // '') eq 'yes' }; s();

[19:08] <evalable6> gfldex, rakudo-moar 9d6d8dd7a: OUTPUT: «»

[19:09] <gfldex> that will help. thanks a lot

[19:13] <lizmat> yw

[19:19] *** lichtkind joined
[19:32] *** sena_kun left
[19:32] *** sena_kun joined
[20:27] <lizmat> m: class Array is Array { method AT-POS($pos) { say "fetching #$pos"; nextsame } }; my @a is Array = 1,2,3; say @a[0]

[20:27] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «fetching #0␤1␤»

[20:27] <lizmat> m: class Array is Array { method AT-POS($pos) { say "fetching #$pos"; nextsame } }; my @a = 1,2,3; say @a[0]

[20:27] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «1␤»

[20:28] <lizmat> looks to me the codegen is not looking up Array in the right context

[20:51] *** Altai-man joined
[20:53] *** sena_kun left
[21:20] *** HarmtH joined
[21:41] <Kaiepi> .tell sena_kun, got tests to pass for Data::Dump again. it depended on Parameter.default returning Any, which that commit breaks in favour of returning Code. making the pr rn

[21:41] <tellable6> Kaiepi, I'll pass your message to sena_kun

[22:48] <ugexe> theres quite a bit of api changes in that commit. like should Parameter.name *really* return an empty string instead of Nil if its Nil? That doesnt seem right to me

[22:49] <ugexe>     method name() { nqp::isnull_s($!variable_name) ?? Nil !! $!variable_name }

[22:49] <ugexe>     method name(Parameter:D: --> Str:D) { nqp::isnull_s($!variable_name) ?? '' $!variable_name }

[22:49] <ugexe> going from the first to the second seems wrong from me just quickly glances at it

[22:49] <ugexe> maybe there is some good reason though, alas i dont have time to go through the original PR at the moment. 

[22:50] <Altai-man> Kaiepi, ^

[22:52] <ugexe> the above isnt related to the breakage btw, just in general

[22:52] * Altai-man agrees empty string to Nil change is, well, a change

[22:53] <Kaiepi> i figured '' would be appropriate to return since there are other methods (usage-name iirc) that return empty strings in similar cases. i'm not very attached to the idea though

[22:53] <tellable6> 2020-08-16T18:46:17Z #raku-dev <sena_kun> Kaiepi hi! Wanted to assign the ticket to both you and nwc10, but for some reason github does not allow that, so pinged instead, so it's not like you are completely responsible for both issues. Thanks!

[22:54] <ugexe> usage name looked to return Nil as well, but you changed it to return ''

[22:55] <ugexe> only thing i could think of is you wanted to add that --> Str:D and thought it couldnt return Nil

[22:55] <Kaiepi> oh, it was the sigil/twigil/etc. methods i was thinking of

[22:58] <ugexe> well that makes me slightly less concerned, although i'm not sure why *those* don't use Nil

[22:58] <ugexe> s/slightly//

[23:00] <releasable6> Next release in ≈5 days and ≈19 hours. 2 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:05] <Kaiepi> some of those look to have been originally written by lizmat. i went along with it because i like the idea of the methods always returning an object of some sort, but i can see why returning Str instead would be preferable

[23:06] <Kaiepi> s/object/instance/

[23:07] <Kaiepi> i'd see what she has to say on this

[23:08] <ugexe> ah alright, then i suspect everything is ok

[23:24] *** lucasb left
[23:25] *** lichtkind left
[23:29] <ugexe> why did you change to returning `Code` instead of `Any`?

[23:32] <ugexe>    method default() { nqp::isnull($!default_value) ?? Code

[23:32] <ugexe>    method default(Parameter:D: --> Code:_) { nqp::isnull($!default_value) ?? Code

[23:32] <ugexe> er mispaste

[23:38] <ugexe> but essentially it feels like i'd expect `Any` more than `Code` for a undefy Parameter.default 

[23:39] <ugexe> a better question might be Any vs Parameter, but Code seems out of place to me compared to those two

[23:40] *** leont left
