[00:20] <Geth_> ¦ problem-solving: vrurg assigned to jnthn Issue Loading of custom setting logic is undefined https://github.com/Raku/problem-solving/issues/213

[00:27] *** oddp_ left
[01:12] *** Altai-man_ joined
[01:15] *** sena_kun left
[03:12] *** sena_kun joined
[03:14] *** Altai-man_ left
[05:12] *** Altai-man_ joined
[05:14] *** sena_kun left
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:12] *** sena_kun joined
[07:14] *** Altai-man_ left
[08:33] *** oddp_ joined
[08:37] *** sena_kun left
[08:44] *** sena_kun joined
[09:12] *** Altai-man_ joined
[09:14] *** sena_kun left
[10:57] *** sena_kun joined
[10:58] *** sena_kun left
[11:12] *** sena_kun joined
[11:14] *** Altai-man_ left
[11:29] *** sena_kun1 joined
[11:29] *** sena_kun1 left
[11:38] <lizmat> Files=1307, Tests=113021, 220 wallclock secs (29.08 usr  8.25 sys + 3072.61 cusr 294.50 csys = 3404.44 CPU)

[11:43] *** sena_kun1 joined
[11:43] *** sena_kun1 left
[13:12] *** Altai-man_ joined
[13:14] *** sena_kun left
[14:55] *** Geth_ left
[14:55] *** maggotbrain777 left
[14:55] *** nebuchadnezzar left
[14:55] *** JJMerelo joined
[14:56] <JJMerelo> releasable6: status

[14:56] <releasable6> JJMerelo, Next release in ≈2 days and ≈4 hours. There are no known blockers. Changelog for this release was not started yet

[14:56] <releasable6> JJMerelo, Details: https://gist.github.com/4b61b4158bf0529f9aa942b88025bb53

[14:57] *** Geth_ joined
[14:57] *** maggotbrain777 joined
[14:57] *** nebuchadnezzar joined
[14:59] <JJMerelo> raiph has put a (StackOverflow) bounty on this question https://stackoverflow.com/questions/tagged/raku?tab=Bounties

[14:59] <JJMerelo> Also, these questions in StackOverflow still have no answer https://stackoverflow.com/questions/tagged/raku?tab=Unanswered

[15:13] *** sena_kun joined
[15:14] *** Altai-man_ left
[15:18] <JJMerelo> So, what do you think this means? "Defined .Numeric/.Real on type objects of core Numerics"

[15:18] <JJMerelo> It's one of the last 6.d specs to include in the documentation

[15:18] <JJMerelo> m: say Rat.Numeric

[15:18] <camelia> rakudo-moar 85320f466: OUTPUT: «Use of uninitialized value of type Rat in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[15:18] <JJMerelo> I guess it means exactly that: it's defined, only it throws a warning.

[15:19] <JJMerelo> m: say Str.Numeric

[15:19] <camelia> rakudo-moar 85320f466: OUTPUT: «Use of uninitialized value of type Str in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[15:19] <JJMerelo> Or maybe not.

[15:19] <[Coke]> m: say Str.not-a-method

[15:19] <camelia> rakudo-moar 85320f466: OUTPUT: «No such method 'not-a-method' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[15:20] <JJMerelo> m: say Mu.Real

[15:20] <camelia> rakudo-moar 85320f466: OUTPUT: «Use of uninitialized value of type Mu in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[15:20] <JJMerelo> m: say Junction.Real

[15:20] <camelia> rakudo-moar 85320f466: OUTPUT: «Use of uninitialized value of type Junction in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[15:21] <JJMerelo> m: say +Int

[15:21] <camelia> rakudo-moar 85320f466: OUTPUT: «Use of uninitialized value of type Int in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[15:21] <JJMerelo> m: say +Any

[15:21] <camelia> rakudo-moar 85320f466: OUTPUT: «Use of uninitialized value of type Any in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[15:22] <JJMerelo> So maybe it was defined everywhere but there and then it was defined for core Numerics?

[15:22] <JJMerelo> committable6: say +Int

[15:22] <committable6> JJMerelo, Seems like you forgot to specify a revision (will use “v6.c” instead of “say”)

[15:23] <committable6> JJMerelo, https://gist.github.com/4167e94a708f4f62d03f38019088a3da

[15:24] <JJMerelo> It's pretty much the same all over.

[15:25] <JJMerelo> Besides, the spec seems to indicate otherwise

[16:33] *** JJMerelo left
[16:49] *** patrickb joined
[16:50] <patrickb> o/

[16:50] <tellable6> 2020-07-15T21:03:15Z #raku-dev <rba> patrickb: Sorry my temporary fix was in the way. Now auto-update for rakudo.org should work again.

[16:50] <patrickb> rba: Looking very good now. Thanks for your work!

[16:52] <patrickb> I need some insight when the Compiler objects are initialized during bootup.

[16:52] <[Coke]> rba++

[16:52] <patrickb> It seems that on first use of the ModuleLoader `nqp::getcomp('Raku')` returns a valid object, while `nqp::getcomp('nqp')` does not...

[16:54] <patrickb> I want to do that because I stuffed a method `nqp-home()` into the NQP compiler object that I want to call in the Raku ModuleLoader.

[16:55] <patrickb> But that seems to be a null object at that point of boot up...

[17:01] <patrickb> Is it possible the NQP Compiler object simply isn't constructed and registered in Rakudo?

[17:02] <timotimo> actually, quite likely now that you mention it

[17:02] <patrickb> Then I need a better place to put my nqp-home and rakudo-home logic.

[17:02] <patrickb> Open for suggestions

[17:03] <timotimo> would HLL::Compiler be bad?

[17:03] <patrickb> That's language independent

[17:03] <patrickb> kind of wrong to put a `rakudo-home()` and `nqp-home()` method in there

[17:03] <patrickb> hm... rakudo-home() could actually go into Perl6::Compiler()

[17:04] <patrickb> still isn't nqp-home() misplaced in the generic HLL::Compiler()?

[17:04] <timotimo> i mean, at the moment we don't really have any other "serious" consumers of HLL::Compiler that would be upset

[17:05] <timotimo> OTOH

[17:05] <timotimo> it can go into the compiler backend objects?

[17:05] <timotimo> hm perhaps that's even worse

[17:05] <patrickb> well I'm not worried about some code breaking, more about not being clean

[17:07] <timotimo> yeah, it can't really break code, just be stuff that's not needed in other implementations/users

[17:08] <patrickb> True. But then again every user of HLL::Compiler somehow will be based on NQP. So it's not that far off to assume it'll be interested in nqp-home as well

[17:08] <patrickb> it just doesn't make much sense from a logical point of view.

[17:09] <timotimo> that may well just be a sacrifice we'd be willing to make

[17:09] * patrickb tries

[17:11] <patrickb> looking through the methods in HLL::Compiler my nqp-home() isn't in such a bad company after all!

[17:12] *** Altai-man_ joined
[17:15] *** sena_kun left
[17:18] <patrickb> Seems to be working. Thanks timotimo for thinking this through.

[17:26] *** sena_kun joined
[17:55] *** patrickb left
[18:15] <timotimo> hmmm

[18:15] <timotimo> nqp::conditionalcompile :D

[18:16] <timotimo> just don't iterate its children in optimizer and compiler if whatever predicate doesn't evaluate to true

[18:34] <timotimo> any reason not to bump moar and nqp to get "nqp::setthreadname"?

[18:35] <timotimo> (passes on a thread's $!name to the OS, at least on linux)

[18:37] <timotimo> actually, i'll steal the namelen constant from the pthread man page

[18:37] <timotimo> disgusting.

[18:39] <timotimo> now i get to chop the string's length to 15 unicode bytes

[18:48] <lizmat> bump feels ok to me, if Altai-man_ would run a Blin tonight?

[18:52] *** patrickb joined
[18:53] <patrickb> o/

[18:54] <patrickb> in NQP code there are no submethods, right? So when a subclass defines its own `method BUILD()` is there anything to look out for?

[18:54] <patrickb> Like needing to call the parent BUILD() or some such?

[18:58] *** sena_kun left
[18:59] <Geth_> ¦ roast: 61146945c2 | (Christian Bartolomäus)++ | 2 files

[18:59] <Geth_> ¦ roast: Add more tests for gather/take

[18:59] <Geth_> ¦ roast: 

[18:59] <Geth_> ¦ roast: All of these tests are dying with an UnwindException on the

[18:59] <Geth_> ¦ roast: JVM backend currently, but they are passing on MoarVM.

[18:59] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/61146945c2

[18:59] <Geth_> ¦ roast: 8412333799 | (Christian Bartolomäus)++ | 2 files

[18:59] *** AlexDaniel joined
[18:59] <Geth_> ¦ roast: Run tests on JVM, but use skip and canary test

[18:59] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/8412333799

[18:59] <Geth_> ¦ roast: e4e5319f6d | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[18:59] <Geth_> ¦ roast: Merge pull request #652 from usev6/gather_tests

[18:59] <Geth_> ¦ roast: 

[18:59] <Geth_> ¦ roast: Add more tests for gather/take

[18:59] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/e4e5319f6d

[18:59] *** AlexDaniel left
[18:59] *** AlexDaniel joined
[19:11] *** [TuxCM] joined
[19:12] *** sena_kun joined
[19:14] *** Altai-man_ left
[19:37] *** sivoais_ joined
[19:37] *** sivoais left
[19:37] *** japhb left
[19:37] *** japhb joined
[19:52] <sena_kun> timotimo, lizmat can bump, I'll run blin tonight.

[20:05] <timotimo> gimme a few more minutes :)

[20:22] <timotimo> OK, i think these changes are wrapped up nicely

[20:27] <Geth_> ¦ nqp: 275e55752f | (Patrick Böker)++ | 4 files

[20:27] <Geth_> ¦ nqp: Fix retrieving template.html location

[20:27] <Geth_> ¦ nqp: 

[20:27] <Geth_> ¦ nqp: Now that NQP and Rakudo are relocatable we must not rely on a build time

[20:27] <Geth_> ¦ nqp: path. NQP home is meant to always point to the actual runtime path.

[20:27] <Geth_> ¦ nqp: For this purpose introduce the home-dir() method on the Compiler object

[20:27] <Geth_> ¦ nqp: which will determine the current NQP home directory at runtime. This is

[20:27] <Geth_> ¦ nqp: analogous to a feature Rakudo also has (Rakudo home).

[20:27] <Geth_> ¦ nqp: 

[20:27] <Geth_> ¦ nqp: On JVM the necessary vm command line argument needed to enable the VM to

[20:27] <Geth_> ¦ nqp: know the scripts executable path was not set. Do so now.

[20:27] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/275e55752f

[20:27] <Geth_> ¦ nqp: 3c3ccd757b | (Patrick Böker)++ | tools/templates/jvm/nqp-j.in

[20:27] <Geth_> ¦ nqp: Quote command line arguments on *nix on JVM

[20:27] <Geth_> ¦ nqp: 

[20:27] <Geth_> ¦ nqp: This fixes #644.

[20:27] <linkable6> NQP#644 [closed]: https://github.com/Raku/nqp/issues/644 [JVM][regression] [JVM] nqp-j broken (at least on non-Windows systems)

[20:27] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/3c3ccd757b

[20:27] <Geth_> ¦ nqp: 3e5403f161 | (Patrick Böker)++ (committed using GitHub Web editor) | 4 files

[20:27] <Geth_> ¦ nqp: Merge pull request #645 from patrickbkr/fix-profile-with-reloc-build

[20:27] <Geth_> ¦ nqp: 

[20:27] <Geth_> ¦ nqp: Fix retrieving template.html location. Also add a mechanism to retrieve the nqp-home path.

[20:27] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/3e5403f161

[20:27] <ShimmerFairy> patrickb: to answer your question from earlier, you can look at QAST nodes as an example, which require setter methods for each attribute, and then has a 'set' method in QAST::Node that takes pairs of "method_name" => value which constructors of subclasses call at some point.

[20:30] <patrickb> ShimmerFairy: Interesting! Thanks for the hint! I ended up not needing it in this particular case though.

[20:31] <ShimmerFairy> (I should say "for each attribute that wants to be set through a new()", to be more precise)

[20:31] <bartolin> patrickb++ 

[20:48] <sena_kun> Hmm, no bumps?

[21:02] <Geth_> ¦ rakudo: 1b3780f725 | (Patrick Böker)++ | tools/templates/NQP_REVISION

[21:02] <Geth_> ¦ rakudo: Bump NQP for nqp-home functionality

[21:02] <Geth_> ¦ rakudo: 

[21:02] <Geth_> ¦ rakudo: This is required for an upcoming cleanup of the same functionality in

[21:02] <Geth_> ¦ rakudo: Rakudo.

[21:02] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1b3780f725

[21:02] <Geth_> ¦ rakudo: e4f020caba | (Patrick Böker)++ | 6 files

[21:02] <Geth_> ¦ rakudo: Refactor `Rakudo home` and `NQP home` handling

[21:02] <Geth_> ¦ rakudo: 

[21:02] <Geth_> ¦ rakudo: It is now not set as an HLL symbol anymore, but instead can be retrieved

[21:03] <Geth_> ¦ rakudo: via a method on the Compiler object. This deduplicates the logic previously

[21:03] <Geth_> ¦ rakudo: present in both, src/main.nqp and src/rakudo-debug.nqp.

[21:03] <Geth_> ¦ rakudo: 

[21:03] <Geth_> ¦ rakudo: Also NQP now determines and provides the `NQP home` itself in its Compiler

[21:03] <Geth_> ¦ rakudo: object so we don't need to redetermine it in rakudo.

[21:03] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e4f020caba

[21:03] <Geth_> ¦ rakudo: 37d58315d6 | (Patrick Böker)++ (committed using GitHub Web editor) | 7 files

[21:03] <Geth_> ¦ rakudo: Merge pull request #3793 from patrickbkr/fix-profile-with-reloc-build

[21:03] <Geth_> ¦ rakudo: 

[21:03] <Geth_> ¦ rakudo: Refactor rakudo-home and nqp-home handling

[21:03] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/37d58315d6

[21:04] <sena_kun> Thank you!

[21:05] <lizmat> hmmm... build is broken for me

[21:05] <lizmat> Missing or wrong version of dependency 'gen/moar/stage2/NQPHLL.nqp' (from 'gen/moar/BOOTSTRAP/v6c.nqp')

[21:06] <lizmat> patrickb: do I need to nuke something?

[21:06] * sena_kun tries to build

[21:07] <sena_kun> can confirm

[21:09] <lizmat> which means /me stops hacking today

[21:12] *** Altai-man_ joined
[21:12] <[TuxCM]> Rakudo version 2020.06-72-g85320f466 - MoarVM version 2020.06-29-g953bac6ca

[21:12] <[TuxCM]> csv-test-xs-20      0.386 -  0.386

[21:12] <[TuxCM]> test-t --race       0.813 -  0.820

[21:12] <[TuxCM]> csv-ip5xs           0.814 -  0.832

[21:12] <[TuxCM]> test-t              1.841 -  1.873

[21:12] <[TuxCM]> csv-ip5xs-20        8.038 -  8.087

[21:12] <[TuxCM]> test                7.975 -  8.303

[21:12] <[TuxCM]> test-t-20 --race    8.968 -  9.059

[21:12] <[TuxCM]> csv-parser         24.827 - 25.435

[21:12] <[TuxCM]> test-t-20          29.424 - 31.640

[21:14] *** sena_kun left
[21:17] <patrickb> Argh!

[21:24] <patrickb> sena_kun: I'm totally stumped on this one! This builds fine locally and all the tests are green. No idea why nuking should be necessary, but did you try that?

[21:24] <tellable6> patrickb, I'll pass your message to sena_kun

[21:33] <patrickb> lizmat: Sorry for the breakage! Rakudo builds fine in a `make realclean`ed rakudo on my machine. Did you try cleaning out nqp?

[21:35] <Altai-man_> Can confirm it builds after a purge.

[21:36] <patrickb> Phew.

[21:37] <patrickb> Does this mean everything is fine or is there still something that needs to be fixed?

[21:39] <Altai-man_> Well, such breakage is not desired for sure, I think.

[21:39] <Altai-man_> OTOH with amount of issues we have this is probably not the worst of them.

[21:41] <patrickb> But has this anything to do with my changes or is this an unrelated issue that just got triggered?

[21:41] <lizmat> so, what needs to be done where ?

[21:42] <Altai-man_> make realclean and then build again?

[21:42] <lizmat> Altai-man_: in which dir?

[21:42] <Altai-man_> lizmat, rakudo?

[21:43] <lizmat> still have the issue after a "make realclean" :-(

[21:43] <Altai-man_> :S

[21:43] <Altai-man_> Well, I just rm -rf for the whole directory and did `z init R; z z`, so.

[21:43] <patrickb> lizmat did you try in nqp?

[21:44] * lizmat decides to nuke install and re-install all modules she had installed later

[22:02] <lizmat> *sigh*

[22:02] <lizmat> $ zef install Inline::Perl5

[22:02] <lizmat> ===> Searching for: Inline::Perl5

[22:02] <lizmat> ===> Searching for missing dependencies: perl:from<native>, Distribution::Builder::MakeFromJSON:ver<0.6+>

[22:02] <lizmat> ===> Failed to find dependencies: perl:from<native>

[22:02] <lizmat> Failed to resolve some missing dependencies

[22:03] <lizmat> latest version of zef  :-(

[22:07] <timotimo> huh

[22:12] <lizmat> https://github.com/ugexe/zef/issues/364

[22:14] <Altai-man_> lizmat, do you have perl-devel package? I assume you have, but I just installed all that 20 minutes ago and it was ok.

[22:15] <Altai-man_> Or perl-dev, whatever is it called which gives a native library.

[22:15] <lizmat> which perl-devel package are you talking about?

[22:15] <lizmat> It *used* to work, now it doesn't?

[22:15] <Altai-man_> Oh, then you have it.

[22:15] <ugexe> it only used to work because of a rakudo regression that stopped that dependency check from working

[22:16] <lizmat> well, latest zef doesn't install Inline::Perl5 with latest Rakudo

[22:16] <ugexe> presumably is native(libperl.so) doesn't work on your system

[22:16] <lizmat> guess I'm the only one on MacOS then

[22:17] <ugexe> i am on osx

[22:17] <ugexe> inline::perl5 installs for me

[22:19] <lizmat> it installs for me with 0.8.4, it does *not* install for me with 0.8.5

[22:20] <lizmat> I've uninstalled zef, git checkout on the 0.8.4 version, then let zef install itself again, then install Inline::Perl5 fine

[22:20] <ugexe> yes, because it is doing a dependency check using code that rakudo had a regression in. thus the check just doesnt happen

[22:20] <ugexe> v0.8.5 does not use that regressed rakudo code, so the check occurs

[22:21] <lizmat> if I understand this correctly:

[22:22] <lizmat> so it does the check, which gives a negative, so it fails

[22:22] <ugexe> you can --exclude=perl to avoid checking for that dependency

[22:22] <lizmat> in the old code, the check was not done, but the install then works fine?

[22:22] <lizmat> feels to me the check code is broken then

[22:22] <ugexe> NativeCall is broken then

[22:24] <lizmat> well, if NativeCalll is borked, it doesn't show in any "make test" or "make spectest" as these are both clean

[22:24] <ugexe> then how do i check if a native dependency is available using nativecall that works?

[22:25] <ugexe> because i obviously have to write code that does e.g. `is native(...)`

[22:26] <lizmat> I have no idea, I'm just the messenger who goes to bed&

[22:29] *** patrickb left
[22:29] <ugexe> raku -e 'use NativeCall; sub foo is native($*VM.platform-library-name("perl".IO)) { }; foo()'

[22:29] <ugexe> this is essentially the check

[22:29] <lizmat> $ raku -e 'use NativeCall; sub foo is native($*VM.platform-library-name("perl".IO)) { }; foo()'

[22:29] <lizmat> Cannot locate native library '/Users/liz/Github/rakudo.moar/libperl.dylib': dlopen(/Users/liz/Github/rakudo.moar/libperl.dylib, 10): image not found

[22:30] <lizmat> looks to me it's looking in the wrong place

[22:30] <ugexe> right, which means NativeCall doesn't find your libperl.dylib that does probably exist onyour system

[22:30] <lizmat> it's basically looking at ./libperl.dylib

[22:30] <lizmat> that can't be right ?

[22:31] <timotimo> maybe we need to do stuff like on windows

[22:31] <timotimo> where you don't have to be in any particular folder

[22:31] <timotimo> you can always just "open('COM')" and get the COM port

[22:32] <lizmat> perl -v tells me it is 5.28

[22:33] <lizmat> but I don't appear to have a libperl.dylib for that version

[22:34] *** leont left
[22:34] *** leont joined
[22:35] <lizmat> yet, "use Inline::Perl5; { use v5-inline; print $] }" gives me 5.028000

[22:35] <lizmat> ok, that's it, I've had enough for today&

[22:35] <ugexe> perl6 -e 'use NativeCall; sub foo is native($*VM.platform-library-name("perl".IO).basename) { }; foo()'

[22:35] <ugexe> i was missing that .basename on there

[22:35] <ugexe> that gets rid of the cwd path parts

[22:45] <ugexe> you could probably `locate libperl.dylib` and then set it in LD_LIBRARY_PATH=. No clue what Inline::Perl5 code is doing to find the library without that

[22:45] <Geth_> ¦ rakudo/rakuast: 210db5868b | (Jonathan Worthington)++ | 5 files

[22:45] <Geth_> ¦ rakudo/rakuast: RakuAST for race/hyper/lazy/eager

[22:45] <Geth_> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/210db5868b

[23:12] *** sena_kun joined
[23:15] *** Altai-man_ left
[23:16] *** Geth_ left
[23:16] *** maggotbrain777 left
[23:16] *** nebuchadnezzar left
[23:23] *** Geth_ joined
[23:23] *** maggotbrain777 joined
[23:23] *** nebuchadnezzar joined
[23:40] *** sena_kun left
