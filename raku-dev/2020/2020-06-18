[00:44] *** squashable6 left
[00:46] *** squashable6 joined
[00:47] *** squashable6 left
[00:50] *** squashable6 joined
[00:54] *** Altai-man_ joined
[00:56] *** sena_kun left
[02:55] *** sena_kun joined
[02:56] *** Altai-man_ left
[04:53] *** committable6 left
[04:53] *** nativecallable6 left
[04:53] *** quotable6 left
[04:53] *** coverable6 left
[04:53] *** unicodable6 left
[04:53] *** squashable6 left
[04:53] *** bloatable6 left
[04:53] *** sourceable6 left
[04:53] *** linkable6 left
[04:53] *** tellable6 left
[04:53] *** notable6_ left
[04:53] *** greppable6 left
[04:53] *** statisfiable6 left
[04:53] *** reportable6 left
[04:53] *** evalable6 left
[04:53] *** shareable6 left
[04:53] *** releasable6 left
[04:53] *** bisectable6 left
[04:53] *** evalable6 joined
[04:53] *** bloatable6 joined
[04:53] *** linkable6 joined
[04:53] *** shareable6 joined
[04:54] *** reportable6 joined
[04:54] *** committable6 joined
[04:54] *** tellable6 joined
[04:54] *** Altai-man_ joined
[04:54] *** statisfiable6 joined
[04:55] *** nativecallable6 joined
[04:55] *** squashable6 joined
[04:55] *** bisectable6 joined
[04:55] *** greppable6 joined
[04:55] *** releasable6 joined
[04:56] *** unicodable6 joined
[04:56] *** quotable6 joined
[04:56] *** notable6 joined
[04:56] *** coverable6 joined
[04:56] *** sourceable6 joined
[04:56] *** sena_kun left
[06:36] <Kaeipi> greppable6, .sub_signature

[06:36] <greppable6> Kaeipi, 3 lines, 3 modules: https://gist.github.com/fe7d21ff9b6bc2557f8f3a21eab0b6d6

[06:55] *** sena_kun joined
[06:57] *** Altai-man_ left
[07:00] <releasable6> Next release in ‚âà2 days and ‚âà11 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[08:39] *** leont_ joined
[08:39] *** leont joined
[08:54] *** Altai-man_ joined
[08:56] *** sena_kun left
[09:30] <Geth> ¬¶ rakudo: Kaiepi++ created pull request #3760: Type Parameter's methods

[09:30] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3760

[09:30] <Geth> ¬¶ rakudo: Altai-man assigned to patrickbkr Issue rakudo/repl.t fails consistently on Windows https://github.com/rakudo/rakudo/issues/3761

[09:40] *** JJMerelo joined
[09:41] <JJMerelo> Anyway, I'm going to try and see why it didn't fail before and it does now. Which is the whole point, I guess.

[09:41] <JJMerelo> I mean, IO::Glob.

[09:45] <Altai-man_> JJMerelo, this is a nice idea, at least golfing the issue may be helpful for bisecting.

[09:51] <JJMerelo> My hunch is that it's what's returned by the call, which was underspecced

[09:51] <JJMerelo> But let's get down to it.

[09:54] <lizmat> well, I think I've found it

[09:55] <lizmat> or at least something that is icky

[09:55] <lizmat> https://github.com/zostay/raku-IO-Glob/blob/master/t/absolute.t#L20

[09:56] <lizmat> that line does a grep on: none("$root-dir.","$rootdir..")

[09:57] <lizmat> now, effectively that tests on "/." and "/.."

[09:57] <lizmat> hmmmm

[09:57] <lizmat> it's not the test of the dir, just a grep... ok, sorry for the noise

[09:59] <JJMerelo> lizmat but it's also the dir

[10:00] <lizmat> yeah, I have a hunch now

[10:00] <JJMerelo> m: now it returns the values with "/" in front, before it didn't

[10:00] <camelia> rakudo-moar cd6172480: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3now7‚èè5 it returns the values with "/" in front‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statemen‚Ä¶¬ª

[10:00] <JJMerelo> m: dir("/").sort

[10:00] <camelia> rakudo-moar cd6172480: ( no output )

[10:01] <Altai-man_> m: say dir("/").sort

[10:01] <camelia> rakudo-moar cd6172480: OUTPUT: ¬´("bin".IO "boot".IO "dev".IO "etc".IO "home".IO "lib".IO "lib64".IO "mnt".IO "opt".IO "proc".IO "root".IO "run".IO "sbin".IO "selinux".IO "srv".IO "sys".IO "tmp".IO "usr".IO "var".IO)‚ê§¬ª

[10:01] <Altai-man_> committable6, say dir("/").sort

[10:01] <committable6> Altai-man_, Seems like you forgot to specify a revision (will use ‚Äúv6.c‚Äù instead of ‚Äúsay‚Äù)

[10:02] <Altai-man_> committable6, v6.c dir("/").sort

[10:02] <committable6> Altai-man_, https://gist.github.com/e781c1cf46019cf2fd7abf29815b7e4d

[10:02] <committable6> Altai-man_, ¬¶v6.c (43 commits): ¬´¬ª

[10:02] <Altai-man_> Yay

[10:02] *** literal_ is now known as literal

[10:03] <Altai-man_> bisectable6, dir("/").sort.say

[10:03] <bisectable6> Altai-man_, Will bisect the whole range automagically because no endpoints were provided, hang tight

[10:03] <AlexDaniel> Altai-man_: I don't understand this output, actually

[10:03] <AlexDaniel> aa ok now I understand it

[10:03] <bisectable6> Altai-man_, Output on all releases: https://gist.github.com/51dcb495e3db2b263651b51ec7f9e542

[10:03] <bisectable6> Altai-man_, Bisecting by output (old=2020.05.1 new=cd61724) because on both starting points the exit code is 0

[10:03] <bisectable6> Altai-man_, bisect log: https://gist.github.com/cb5ddcf7737eb30db07a1118bf03f9ed

[10:03] <bisectable6> Altai-man_, (2020-05-21) https://github.com/rakudo/rakudo/commit/b63976a8f19e650fe3533562a5fa040d84535de8

[10:03] <bisectable6> Altai-man_, Output on all releases and bisected commits: https://gist.github.com/4678be437e324766b6734ac6e79e40fe

[10:05] <JJMerelo> So that's the thing.

[10:06] <JJMerelo> lizmat but that's actually never entered...

[10:11] <JJMerelo> Altai-man_ BTW, that commit is different from the one found by Blin

[10:11] <JJMerelo> Altai-man_ as I said, different problems with the module, at least two different ones.

[10:12] <Altai-man_> JJMerelo, it is the same commit. " Altai-man_, (2020-05-21) https://github.com/rakudo/rakudo/commit/b63976a8f19e650fe3533562a5fa040d84535de8" and "IO::Glob ‚Äì Fail, Bisected: b63976a".

[10:13] <JJMerelo> Ah, right, sorry.

[10:13] <lizmat> hmmm... IO::Glob doesn't appear to call dir ?

[10:13] <JJMerelo> lizmat only in the tests

[10:14] <Altai-man_> lizmat, we have a golf, so doesn't matter where is it.

[10:14] <lizmat> ok, what is the golf?

[10:14] <Altai-man_> dir("/").sort.say

[10:14] <evalable6> Altai-man_, rakudo-moar cd6172480: OUTPUT: ¬´("bin".IO "boot".IO "dev".IO "etc".IO "home".IO‚Ä¶¬ª

[10:14] <evalable6> Altai-man_, Full output: https://gist.github.com/e0871d5769e8e1274f75716878fe30e0

[10:15] <Altai-man_> lizmat, Output on all releases and bisected commits: https://gist.github.com/4678be437e324766b6734ac6e79e40fe <-

[10:15] <JJMerelo> I think that the problem is the added slash at the beginning of every path, basically

[10:16] <JJMerelo> IO::Glob parses that, and does not find . and .. to skip, but /. and /..

[10:16] <Altai-man_> Yes, we had it and now don't, so need to get it back.

[10:16] <lizmat> ok, *that* I can work with  :-)

[10:16] <JJMerelo> Not clear if there was a spec for that. Because it's weird it didn't pop up in any test...

[10:17] <JJMerelo> lizmat++

[10:18] <Altai-man_> No spec, but in unix envs "foo" and "/foo" are very different paths anyway. No harm to have a test somewhere for it, though.

[10:18] <JJMerelo> OTOH, since there was no spec, I'm not sure the former way was the good one. It makes much more sense the way it is now, not including the input path

[10:19] <JJMerelo> m: say dir("/tmp").sort

[10:19] <camelia> rakudo-moar cd6172480: OUTPUT: ¬´("/tmp/.ICE-unix".IO "/tmp/.Test-unix".IO "/tmp/.X11-unix".IO "/tmp/.XIM-unix".IO "/tmp/.font-unix".IO "/tmp/.precomp".IO "/tmp/bla".IO "<tmp>".IO "<tmp>".IO "<tmp>".IO "<tmp>".IO "<tmp>".IO "<tmp>".IO "<tmp>".IO "<tmp>".IO "<tmp>".IO "<tmp>".IO "<tmp‚Ä¶¬ª

[10:19] <Altai-man_> Well, it is consistent this way.

[10:19] <Altai-man_> I mean...

[10:19] <lizmat> yeah, it should add the /

[10:20] <JJMerelo> Altai-man_ it's time-wise consistent

[10:20] <Altai-man_> You type `dir("usr")` in / and get `usr/src`. But if you type `dir("/usr")` you get `/usr/src`. So you get the prefix you search for with or without /. And if user sets a prefix of `/`, it should be there to be consistent.

[10:21] <Altai-man_> Otherwise we treat the prefix the same and then boom, for `/` there is an exception. We have enough special cases, really.

[10:21] <lizmat> yeah, I agree that's what the optimization broke

[10:21] <JJMerelo> Anyway, there's a test that can be added: the output to dir should include the input at the beginning.

[10:22] <lizmat> JJMerelo: pretty sure there are, but not for "/"

[10:23] <JJMerelo> lizmat you mean specs?

[10:23] <lizmat> yeah

[10:23] <JJMerelo> bisectable6: dir("/tmp").sort.say

[10:23] <bisectable6> JJMerelo, Will bisect the whole range automagically because no endpoints were provided, hang tight

[10:24] <bisectable6> JJMerelo, More than 4 changes to bisect, please try a narrower range like old=2020.05.1 new=HEAD

[10:24] <bisectable6> JJMerelo, Output on all releases: https://gist.github.com/d02a0fc7cb688c02b880367479c7bbf6

[10:24] <lizmat> bisectable6: say "/usr".IO.cloned-with-path("local")

[10:24] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[10:24] <JJMerelo> OK, that was dumb.

[10:24] <bisectable6> lizmat, Output on all releases: https://gist.github.com/e2ef3d73f26413ab05acbb85778a17a7

[10:24] <bisectable6> lizmat, Bisecting by exit code (old=2020.05.1 new=cd61724). Old exit code: 1

[10:25] <bisectable6> lizmat, bisect log: https://gist.github.com/926101df8715d71f84de1f340145f23f

[10:25] <bisectable6> lizmat, (2020-05-21) https://github.com/rakudo/rakudo/commit/b63976a8f19e650fe3533562a5fa040d84535de8

[10:25] <bisectable6> lizmat, Bisecting by output (old=2016.09 new=2016.10) because on both starting points the exit code is 1

[10:25] <bisectable6> lizmat, bisect log: https://gist.github.com/44023e77d8f89adb6670611463cc9ba4

[10:25] <bisectable6> lizmat, (2016-09-27) https://github.com/rakudo/rakudo/commit/222d16b0b94911fdedb06ee6ad817d0f14b9c05c

[10:25] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/bc9d8870f3bffd737ecf412c74d0e283

[10:25] <lizmat> que?

[10:26] <JJMerelo> bisectable6: dir("/usr/lib/").sort.say

[10:26] <bisectable6> JJMerelo, Will bisect the whole range automagically because no endpoints were provided, hang tight

[10:26] <bisectable6> JJMerelo, Nothing to bisect!

[10:26] <bisectable6> JJMerelo, Output on all releases: https://gist.github.com/215f74539741fcaf3900b9fb2fb2b736

[10:27] <JJMerelo> bisectable6: dir("/usr/lib").sort.say

[10:27] <bisectable6> JJMerelo, Will bisect the whole range automagically because no endpoints were provided, hang tight

[10:27] <JJMerelo> It only happens on /?

[10:27] <lizmat> yeah, it only happens on / afaik

[10:27] <bisectable6> JJMerelo, Nothing to bisect!

[10:27] <bisectable6> JJMerelo, Output on all releases: https://gist.github.com/15a430f750067c3e5d9d99c36d90ada2

[10:27] <AlexDaniel> lizmat: behavior change more than once since 2015.12, it bisected it twice

[10:28] <JJMerelo> Which is why it only fails on IO::Glob, with works with / explicitly

[10:28] <AlexDaniel> lizmat: the last link shows exactly what happened: https://gist.github.com/bc9d8870f3bffd737ecf412c74d0e283

[10:29] <AlexDaniel> changed*

[10:29] <AlexDaniel> .oO( is my d key not working properly‚Ä¶ )

[10:32] <lizmat> ok, I think I've found my thinko

[10:40] <lizmat> spectesting now

[10:48] <Geth> ¬¶ rakudo: 6b22c1eb4d | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[10:48] <Geth> ¬¶ rakudo: Make sure / gets the right prefix

[10:48] <Geth> ¬¶ rakudo: 

[10:48] <Geth> ¬¶ rakudo: The logic finding out what to prefix each directory entry with, was

[10:48] <Geth> ¬¶ rakudo: flawed if the "/" was the path (well, actually the directory separator).

[10:48] <Geth> ¬¶ rakudo: This fixes IO::Glob (*phew*)

[10:48] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/6b22c1eb4d

[10:49] <JJMerelo> lizmat++

[10:49] <Altai-man_> lizmat++, thank you very much!

[10:49] <JJMerelo> downloading and testing IO::Glob

[10:55] *** sena_kun joined
[10:57] *** Altai-man_ left
[11:01] <JJMerelo> Tested and working perfectly fine now. lizmat++

[11:03] <Geth> ¬¶ rakudo: 7691742ae5 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[11:03] <Geth> ¬¶ rakudo: Simplify prefix logic

[11:03] <Geth> ¬¶ rakudo: 

[11:03] <Geth> ¬¶ rakudo: The "/" case is also handled by the .ends-with("/") case, so we don't

[11:03] <Geth> ¬¶ rakudo: need to check for it separately.

[11:03] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/7691742ae5

[11:11] <JJMerelo> lizmat: maybe add a test too?

[11:12] <lizmat> working on that

[11:12] *** JJMerelo left
[11:13] <lizmat> feels to me S16-filehandles/dir.t can be removed from roast

[11:17] <Geth> ¬¶ roast: 3eb1abdda6 | (Elizabeth Mattijsen)++ | S32-io/dir.t

[11:17] <Geth> ¬¶ roast: Add test to prevent repeat of IO::Glob breakage

[11:17] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/3eb1abdda6

[11:20] <AlexDaniel> bisect: .say for dir("./.").sort

[11:20] <bisectable6> AlexDaniel, Will bisect the whole range automagically because no endpoints were provided, hang tight

[11:20] <bisectable6> AlexDaniel, Output on all releases: https://gist.github.com/0d034395e2c561bf92c469dad9acba7b

[11:20] <bisectable6> AlexDaniel, Bisecting by output (old=2016.05 new=2016.06) because on both starting points the exit code is 0

[11:20] <AlexDaniel> no no not that one‚Ä¶

[11:20] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/a808f06fd96bb92df185ce8c98892d06

[11:20] <bisectable6> AlexDaniel, (2016-05-22) https://github.com/rakudo/rakudo/commit/376950acf2c157a04ce446ebcb1e99744c1872c2

[11:21] <bisectable6> AlexDaniel, ‚ö† New output detected, please review the results manually

[11:21] <bisectable6> AlexDaniel, Output on all releases and bisected commits: https://gist.github.com/2113f62910428ee703b7994e7dd13aa2

[11:21] <AlexDaniel> bisect: dir("/tmp/.").sort.say

[11:21] <bisectable6> AlexDaniel, Will bisect the whole range automagically because no endpoints were provided, hang tight

[11:22] <bisectable6> AlexDaniel, More than 4 changes to bisect, please try a narrower range like old=2020.05.1 new=HEAD

[11:22] <bisectable6> AlexDaniel, Output on all releases: https://gist.github.com/f45e409dd2630e473f400154eeca86e0

[11:22] <Geth> ¬¶ roast: b2ee3e06a6 | (Elizabeth Mattijsen)++ | S16-filehandles/dir.t

[11:22] <Geth> ¬¶ roast: Remove obsolete test file

[11:22] <Geth> ¬¶ roast: 

[11:22] <Geth> ¬¶ roast: This hasn't been meaningfully touched in *12* years.  It tests for

[11:22] <Geth> ¬¶ roast: basically a port of Perl's opendir and friends, which do not exist

[11:22] <Geth> ¬¶ roast: in Raku (although the P5opendir module *does* try to mimic that).

[11:22] <Geth> ¬¶ roast: In any case, this test-file is not being run anyway, and such is

[11:22] <Geth> ¬¶ roast: only a distraction.

[11:22] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/b2ee3e06a6

[11:22] <AlexDaniel> lizmat: anyway that's another change in behavior

[11:23] <AlexDaniel> c: 2020.05.1,HEAD dir("/tmp/.").sort.say

[11:23] <committable6> AlexDaniel, https://gist.github.com/014825d912ef1853f2e2088cc4a0116b

[11:23] * lizmat looks

[11:24] <AlexDaniel> lizmat: and more: ‚Üì

[11:24] <AlexDaniel> c: 2020.05.1,HEAD say dir("///").sort

[11:24] <committable6> AlexDaniel, https://gist.github.com/b51e134dcc93ef27ad8fb8ba3a15514c

[11:37] *** JJMerelo joined
[11:38] <lizmat> AlexDaniel: will you write some tests for that ?

[11:38] <AlexDaniel> lizmat: no, if possible

[11:38] <Geth> ¬¶ rakudo: 484f07443e | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[11:38] <Geth> ¬¶ rakudo: Make sure we dir with a clean slate

[11:38] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/484f07443e

[11:38] <lizmat> AlexDaniel: why not ?

[11:39] <AlexDaniel> cuz I wanna do other stuff right now? Sorry

[11:39] <lizmat> I also want to do other stuff right now

[11:39] <AlexDaniel> ü§∑

[11:40] <lizmat> *

[11:40] <sena_kun> There is always a log with nice cases pointed out, so no need to hurry with this.

[11:45] <Geth> ¬¶ roast: cfe16b93c6 | (Elizabeth Mattijsen)++ | S32-io/dir.t

[11:45] <Geth> ¬¶ roast: Add some tests for dirty dir specififications

[11:45] <Geth> ¬¶ roast: 

[11:45] <Geth> ¬¶ roast: Easily expandable should anyone feel the need

[11:45] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/cfe16b93c6

[12:17] *** JJMerelo left
[12:41] <Geth> ¬¶ rakudo/master: 5 commits pushed by (Elizabeth Mattijsen)++

[12:41] <Geth> ¬¶ rakudo/master: 417a591a95 | Split history src/core.c/Match.pm6 to src/core.c/INTERPOLATE.pm6

[12:41] <Geth> ¬¶ rakudo/master: 777e7b6534 | Split history src/core.c/Match.pm6 to src/core.c/INTERPOLATE.pm6

[12:41] <Geth> ¬¶ rakudo/master: 3f9f23a952 | Split history src/core.c/Match.pm6 to src/core.c/INTERPOLATE.pm6

[12:41] <Geth> ¬¶ rakudo/master: 638517da1c | Split history src/core.c/Match.pm6 to src/core.c/INTERPOLATE.pm6

[12:41] <Geth> ¬¶ rakudo/master: 059072277e | Move all of INTERPOLATE and friends into a separate file

[12:41] <Geth> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/484f07443ea1...059072277e3c

[12:47] <lizmat> 059072277e is the important one there

[12:47] <linkable6> (2020-06-18) https://github.com/rakudo/rakudo/commit/059072277e Move all of INTERPOLATE and friends into a separate file

[12:54] *** Altai-man_ joined
[12:57] *** sena_kun left
[12:58] <jnthn> lizmat: Hm, that introduces more files that have unmatched curlies in them?

[12:58] <lizmat> nope

[12:58] <lizmat> this one uses the same method as with Any-iterable

[12:58] <lizmat> augment class Match { }

[12:59] <jnthn> OK, good

[13:12] *** vrurg left
[13:12] *** vrurg joined
[13:31] *** lucasb joined
[13:44] <[Tux]> Rakudo version 2020.05.1-300-g059072277 - MoarVM version 2020.05-97-gb5bb4f8d1

[13:44] <[Tux]> csv-test-xs-20      0.392 -  0.402

[13:44] <[Tux]> csv-ip5xs           0.802 -  0.836

[13:44] <[Tux]> test-t --race       0.841 -  0.892

[13:44] <[Tux]> test-t              1.899 -  1.959

[13:44] <[Tux]> test                7.589 -  7.717

[13:44] <[Tux]> csv-ip5xs-20        8.382 -  8.748

[13:44] <[Tux]> test-t-20 --race    9.092 -  9.162

[13:44] <[Tux]> csv-parser         26.596 - 26.756

[13:44] <[Tux]> test-t-20          31.733 - 31.755

[14:33] *** klapperl_ left
[14:40] <Geth> ¬¶ roast: 1b6986193d | (Elizabeth Mattijsen)++ | 5 files

[14:40] <Geth> ¬¶ roast: Remove some superfluous grammar.new's

[14:40] <Geth> ¬¶ roast: 

[14:40] <Geth> ¬¶ roast: Unless your grammar actually contains non-system attributes that need

[14:40] <Geth> ¬¶ roast: instantiating, you do *not* need to instantiate a grammar in order to

[14:40] <Geth> ¬¶ roast: be able go parse strings with it.

[14:40] <Geth> ¬¶ roast: 

[14:40] <Geth> ¬¶ roast: Saves one unnecessary call to Match::BUILD.

[14:40] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/1b6986193d

[14:43] <lizmat> Sadly, it has proven difficult to have Grammar.new just return self on calls without parameters, as subclasses may indeed have attributes with defaults that may initializing

[14:46] <jnthn> Is calling that actually common?

[14:46] <jnthn> I always just do SomeGrammar.parse and that's what I've widely seen

[14:46] <lizmat> well, a number of cases in roast anyway  :-)

[14:46] <jnthn> Yeah, I'm surprised :)

[14:47] <lizmat> checking the ecosystem for such things with greppable6 is going to be   eh.... difficult

[14:47] <lizmat> greppable6: \.new

[14:47] <lizmat> greppable6 help

[14:50] *** greppable6 left
[14:52] *** greppable6 joined
[14:54] *** klapperl joined
[14:54] <greppable6> lizmat, 32335 lines, 1014 modules: https://gist.github.com/1822ec1464667f3a4cfbb3fa552e1ac6

[14:55] *** sena_kun joined
[14:56] *** Altai-man_ left
[14:57] <lizmat> looks like the very first hit in that long list is one of them

[15:01] <lizmat> but indeed, not many of them, apparently

[15:15] <nine> jnthn: you asked about performance measurements of in-process precompilation. There's actually one: installing the CORE dist takes 11.14506058 seconds on master vs. 8.6965494 seconds on my branch

[15:16] <lizmat> nine: fwiw, that's almost within the range that I see when compiling core setting

[15:18] <nine> lizmat: I'm not following?

[15:19] <lizmat> with in-process precompilation, I'm seeing values in that range for installing the core modules in the 20+ times a day I build the setting

[15:20] <lizmat> so you're positive result may be affected by noise, is what I'm saying

[15:21] <nine> I took 2 measurements each and it's about +-0.1s. I also can't remember seeing a time < 10s for core modules

[15:22] <lizmat> good, then I must have a faster machine  :-)

[15:24] <lizmat> 9.701862 10.188191 12.7423004 9.48681609 10.576796 11.2876687 9.990865 9.9734318 9.1254897 9.4703215

[15:24] <lizmat> my last 10 install time

[15:24] <lizmat> s

[15:25] <lizmat> afk for a few hours&

[15:26] <nine> Taking lots more measurements grew the error range to +-.3s which makes the speedup still highly significant.

[15:26] <nine> Darn that means it's all the more worth it to pursue this further...

[15:45] <AlexDaniel> greppable6: Grammar\.new

[15:45] <greppable6> AlexDaniel, 30 lines, 12 modules: https://gist.github.com/192b79b6ea169b80addf2ce210ed2512

[15:50] <dogbert17> nine: is it this line you an lizmat are referring to: "Installed 13 core modules in 9.076875 seconds!"

[15:50] <nine> dogbert17: yes

[15:50] <dogbert17> cool

[16:17] *** MasterDuke joined
[16:31] *** leont_ left
[16:54] *** Altai-man_ joined
[16:57] *** sena_kun left
[18:21] *** vrurg left
[18:22] *** vrurg joined
[18:26] *** vrurg left
[18:31] *** vrurg joined
[18:36] *** vrurg left
[18:55] *** sena_kun joined
[18:57] *** Altai-man_ left
[19:14] *** vrurg joined
[19:46] *** vrurg left
[20:29] <lizmat> sena_kun did you already start a Blin run ?

[20:36] <sena_kun> lizmat, I did not plan one today.

[20:36] <lizmat> ok, good  :)

[20:36] <sena_kun> Can do, but better to do it tomorrow.

[20:36] <lizmat> yeah... I might be breaking something soon  :-)

[20:37] <sena_kun> We still have a blocker, plus chances to have regressions in a day are relatively low given we have 2-3 of them for a couple of weeks.

[20:37] <sena_kun> lizmat, oops... Will you put it back until Friday night or?

[20:37] <lizmat> which blocker?

[20:37] <sena_kun> releasable6, status

[20:37] <releasable6> sena_kun, Next release in ‚âà1 day and ‚âà22 hours. 1 blocker. 143 out of 300 commits logged (‚ö† 4 warnings)

[20:37] <releasable6> sena_kun, Details: https://gist.github.com/b79838cf641aaf9169f5ea6a7875dcbb

[20:37] <sena_kun> Windows failures.

[20:37] <sena_kun> https://github.com/rakudo/rakudo/issues/3761

[20:38] <lizmat> ah, I'm no use there

[20:38] <sena_kun> Should have opened an issue two weeks ago, but. :(

[20:39] <Geth> ¬¶ roast: 925e48209d | (Elizabeth Mattijsen)++ | S32-str/split.t

[20:39] <Geth> ¬¶ roast: Remove unnecessary "list" and "hash" parameters

[20:39] <Geth> ¬¶ roast: 

[20:39] <Geth> ¬¶ roast: - these aren't necessary for testing

[20:39] <Geth> ¬¶ roast: - these could be considered implementation detail

[20:39] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/925e48209d

[20:46] *** vrurg joined
[20:47] *** patrickb joined
[20:48] *** patrickb left
[20:50] *** vrurg left
[20:51] <[Coke]> I just did a windows build 1-2 weeks ago and ... didn't run make test. hurm.

[20:52] * [Coke] tests that slightly older build...

[20:53] <timotimo> goddamnit i can't be arsed to figure out why my ghost admin panel isn't working for me to write a new post for my grunt >_<

[20:54] *** Altai-man_ joined
[20:57] *** sena_kun left
[20:57] <lizmat> so about 3 years ago, TimToady merged the Cursor and Match classes into a single class

[20:58] <lizmat> I just realized that that has one big disadvantage

[20:58] <lizmat> if you do a Match.raku , you get raku code

[20:59] <lizmat> but that Raku code misses quite a lot of information about the Cursor / Match internals

[21:00] <Altai-man_> Sorry to de-rail. About the blocker: I did some research just now and apparently it is not _so_ horrible, seems like it passes a wrong value in some cases to a sub and that's all. But I don't know a thing about how to fix it nicely, so ideas are welcome.

[21:00] <lizmat> the only reason Match.raku.EVAL works, is because *each* Match object carries around a list / hash in its internals 

[21:01] <lizmat> even if it is a "leaf" Match object (as in without any sub-matches)

[21:02] <lizmat> which is a lot of wastage, since all submatches already exist in a Match object on the $!cstack

[21:02] * [Coke] often misses tcl tests standard of give every test a number.

[21:03] *** vrurg joined
[21:58] <lizmat> sleep&

[21:59] <Altai-man_> lizmat, have a nice rest. o/

[21:59] <lizmat> will do, hopefully :-)

[22:21] <gfldex> i stepped on an odd bug involing hyper run and a role mixin

[22:21] <gfldex> https://gist.github.com/6ec6c03d65dd9e298bacc9a0deabeace

[22:21] <gfldex> that's as far as I could golf it

[22:22] <gfldex> it should not say Any

[22:23] <jnthn> roles are not closures

[22:23] <timotimo> yeah, would need a role parameter for that

[22:24] <gfldex> with :degree(1) the problem goes away

[22:25] <gfldex> It's a ENODOC then.

[22:25] <timotimo> hm, where'd that piece of info go?

[22:28] <gfldex> https://docs.raku.org/language/typesystem#Parameterized

[22:28] <jnthn> https://docs.raku.org/syntax/role doesn't really spell it out; it mentions they are immutable from the closing } but that's not really on the money. Probably belongs inthe mixin section.

[22:29] <gfldex> Well, somewhere around that.

[22:29] <gfldex> It's pretty hard to decide where to put docs for something that should not be there.

[22:29] <jnthn> gfldex: I suspect if you're reading the bit on parameterized roles, you already knwo the answer to the problem...

[22:30] <gfldex> Using a parameterized role makes the problem go away.

[22:31] <gfldex> I think I will use a blod post to help with the thinking.

[22:47] <gfldex> is there any chance to get a warning on such a closury role?

[22:55] *** sena_kun joined
[22:56] <gfldex> raku: my $R = role :: [$t] {}; dd $R; dd $R[42];

[22:56] <evalable6> gfldex, rakudo-moar 059072277: OUTPUT: ¬´(exit code 1) <anon|1> $R = <anon|1>‚ê§Could not ‚Ä¶¬ª

[22:56] <evalable6> gfldex, Full output: https://gist.github.com/e7dda1f248f888f4515030d382a4625d

[22:56] <gfldex> I can store a parameterised Role in a scalar but I can not use it.

[22:57] <gfldex> Is that intentional?

[22:57] *** Altai-man_ left
[23:00] *** leont left
[23:06] <jnthn> Yes; one can never have enough bracket chars.

[23:06] <jnthn> And [...] gets used for both type parameters and array indexing, so there have to be rules to decide which is which

[23:07] <jnthn> And $sigil'd-variable[$foo] will always be an array index

[23:07] <jnthn> You'll have to use the .^parameterize escape hatch if you want to store it in a $sigil'd-var

