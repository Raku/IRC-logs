[01:21] *** sena_kun left
[01:36] *** sena_kun joined
[03:20] *** sena_kun left
[03:35] *** sena_kun joined
[04:35] *** statisfiable6 left
[04:35] *** committable6 left
[04:35] *** notable6 left
[04:35] *** shareable6 left
[04:35] *** benchable6 left
[04:35] *** coverable6 left
[04:35] *** evalable6 left
[04:35] *** sourceable6 left
[04:35] *** squashable6 left
[04:35] *** linkable6 left
[04:35] *** bloatable6 left
[04:35] *** unicodable6 left
[04:35] *** releasable6 left
[04:35] *** nativecallable6 left
[04:35] *** notable6 joined
[04:35] *** quotable6 joined
[04:35] *** bisectable6 joined
[04:35] *** releasable6 joined
[04:35] *** evalable6 joined
[04:36] *** squashable6 joined
[04:36] *** tellable6 joined
[04:36] *** benchable6 joined
[04:36] *** greppable6 joined
[04:37] *** nativecallable6 joined
[04:37] *** coverable6 joined
[04:37] *** statisfiable6 joined
[04:37] *** reportable6 joined
[04:37] *** shareable6 joined
[04:37] *** committable6 joined
[04:37] *** linkable6 joined
[04:38] *** unicodable6 joined
[04:38] *** sourceable6 joined
[04:38] *** bloatable6 joined
[05:18] *** moritz joined
[05:21] *** sena_kun left
[05:36] *** sena_kun joined
[07:21] *** squashable6 left
[07:21] *** sena_kun left
[07:22] *** squashable6 joined
[07:37] *** sena_kun joined
[08:16] <lizmat> Files=1305, Tests=111216, 205 wallclock secs (28.39 usr  8.32 sys + 2889.94 cusr 268.10 csys = 3194.75 CPU)

[09:21] *** sena_kun left
[09:23] *** hankache joined
[09:23] <hankache> hola #raku-dev

[09:23] <tellable6> 2020-03-17T21:52:12Z #raku-dev <moritz> hankache: I believe you can use Github Actions for that. Haven't used them myself though

[09:23] <hankache> mortiz: thanks I'll give it a try

[09:35] *** hankache left
[09:35] *** sena_kun joined
[09:47] <Geth> ¦ rakudo: 12a336374e | (Elizabeth Mattijsen)++ | 41 files

[09:47] <Geth> ¦ rakudo: Introduce / effectuate "is implementation-detail" trait

[09:47] <Geth> ¦ rakudo: 

[09:47] <Geth> ¦ rakudo: - inspired by https://github.com/Raku/problem-solving/issues/169

[09:47] <Geth> ¦ rakudo: - add "is implementation-detail" trait for Routine (and thus Method)

[09:47] <Geth> ¦ rakudo:   This adds an "is-implementation-detail" method that returns True.

[09:47] <Geth> ¦ rakudo: - add Code.is-implementation-detail method that returns False

[09:47] <Geth> ¦ rakudo: - apply trait on all applicable internal uppercase subs and methods

[09:47] <Geth> ¦ rakudo: <…commit message has 14 more lines…>

[09:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/12a336374e

[09:49] <lizmat> one of my bigger commits of late  :-)

[10:59] <Geth> ¦ rakudo: 09c1b05ac2 | (Elizabeth Mattijsen)++ | src/core.d/await.pm6

[10:59] <Geth> ¦ rakudo: Mark 6.d versions also as implementation-detail

[10:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/09c1b05ac2

[11:21] *** sena_kun left
[11:27] <Geth> ¦ rakudo: 2ae9fdf057 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[11:27] <Geth> ¦ rakudo: Mark &COMP_EXCEPTION as an implementation detail

[11:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2ae9fdf057

[11:36] *** sena_kun joined
[12:22] *** Xliff joined
[12:51] *** lucasb joined
[13:21] *** sena_kun left
[13:21] <[Tux]> Rakudo version 2020.02.1-199-g2ae9fdf05 - MoarVM version 2020.02.1-47-g3c3ad0678

[13:21] <[Tux]> csv-test-xs-20      0.369 -  0.383

[13:21] <[Tux]> csv-ip5xs           0.690 -  0.698

[13:21] <[Tux]> test-t --race       0.944 -  1.011

[13:21] <[Tux]> test-t              1.938 -  1.998

[13:21] <[Tux]> csv-ip5xs-20        6.029 -  6.281

[13:21] <[Tux]> test                7.671 -  7.691

[13:21] <[Tux]> test-t-20 --race    9.615 -  9.827

[13:21] <[Tux]> csv-parser         24.240 - 24.748

[13:21] <[Tux]> test-t-20          32.225 - 33.966

[13:22] <[Tux]> https://www.perlmonks.org/?node_id=11114426 ← raku question on perlmonks

[13:22] <[Tux]> probably a NativeCall isuue/Question

[13:36] *** sena_kun joined
[13:36] <nine> [Tux]: I'd bet on that Color argument. I don't think we support passing structs as value types. They will be passed as pointers instead which in turn will be interpreted as a color by that function (which causes the apparent randomness).

[13:36] <nine> I'd suggest passing a manually packed uint32 instead.

[13:38] <nine> Oh I actually have a Perlmonks account myself

[13:48] <[Tux]> nine++

[13:53] <lizmat> weekly: 	https://www.perlmonks.org/?node_id=11114426   

[13:53] <notable6> lizmat, Noted! (weekly)

[13:53] <lizmat> so I don't forget next week

[13:54] <Geth> ¦ roast: 7ac6cfe7f2 | (Elizabeth Mattijsen)++ | S05-match/capturing-contexts.t

[13:54] <Geth> ¦ roast: Use MONKEY-TYPING to correct scope

[13:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7ac6cfe7f2

[13:55] <Geth> ¦ roast: d25b485ca9 | (Elizabeth Mattijsen)++ | S29-context/eval.t

[13:55] <Geth> ¦ roast: Move "use nqp" to correct scope

[13:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d25b485ca9

[13:57] <Geth> ¦ roast: 1511f3087f | (Elizabeth Mattijsen)++ | 13 files

[13:57] <Geth> ¦ roast: Load "Test" before doing a "use lib"

[13:57] <Geth> ¦ roast: 

[13:57] <Geth> ¦ roast: So that the Repo for "use lib" doesn't have to search for "Test.rakumod"

[13:57] <Geth> ¦ roast: that we know it won't have anyway.  Hopefully has a positive effect on

[13:57] <Geth> ¦ roast: running "make spectest".

[13:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1511f3087f

[14:08] <lizmat> https://docs.raku.org/routine/full-barrier   # feels to me this is a. underdocumented, and misassigned (it's an atomic op really)

[14:09] <jnthn> It looks to have a description to me?

[14:09] <jnthn> But yeah, not really sure where it lives. Some languages *do* put that as a static method on their Thread class, iirc

[14:10] <jnthn> But in terms of when you'd be using it, yes, it would be when you're using atomic ops

[14:16] *** squashable6 left
[14:16] *** squashable6 joined
[14:20] <lizmat> what is unclear to me, is the scope in which this is active?

[14:20] <lizmat> the current thread, I assume ?

[14:24] <jnthn> Well, it controls reordering around that point on the current thread

[14:24] <jnthn> The point is that they be visible in the right order for others

[14:40] <Geth> ¦ rakudo: 20c978e606 | (Elizabeth Mattijsen)++ | 5 files

[14:40] <Geth> ¦ rakudo: Some more implementation detail notations

[14:40] <Geth> ¦ rakudo: 

[14:40] <Geth> ¦ rakudo: Mostly things being deprecated in 6.d, and "dd" of course  :-)

[14:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/20c978e606

[15:20] *** sena_kun left
[15:36] *** sena_kun joined
[17:20] *** sena_kun left
[17:36] *** sena_kun joined
[18:06] *** MasterDuke left
[18:16] *** squashable6 left
[18:19] *** squashable6 joined
[18:20] <bartolin_> lizmat: (or others) I've never done a NQP bump before. Now would be the perfect time to try: there are only my JVM changes in NQP since the last bump. What is the procedure to bump NQP: Only refer to the latest NQP and count up the -number- in tools/templates/NQP_REVISION?

[18:29] <[Coke]> bartolin_: you can do a 'git describe' in the nqp checkout to get that string, I think.

[18:29] <[Coke]> so if I do that now I get:

[18:29] <[Coke]> 2020.02.1-27-g9f9e4bf38

[18:29] <bartolin_> [Coke]: ahh, yes, that looks good. Thanks!

[18:29] <[Coke]> there's a tag, a count, and a SHA

[18:32] <Geth> ¦ rakudo: e8e2d3c8d8 | (Christian Bartolomäus)++ | tools/templates/NQP_REVISION

[18:32] <Geth> ¦ rakudo: Bump NQP to get VMNull on JVM backend

[18:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e8e2d3c8d8

[18:37] <[Coke]> bartolin++

[19:00] *** MasterDuke joined
[19:15] <AlexDaniel> f6f43d58e35ef0ba3ea92a47c7164429873977b2

[19:15] <AlexDaniel> 51ff83c7ca90af8fbe40acaad728c6fa79f65b76

[19:15] <AlexDaniel> c6a61f563b478337a6fb6290d0d612d663d60471

[19:15] <AlexDaniel> c5d14062abb2231a18688f3de854b6dbd3a3df1f

[19:15] <linkable6> (2018-06-08) https://github.com/rakudo/rakudo/commit/f6f43d58e3 Use a spesh plugin for $foo.Qual::Ified::meth()

[19:15] <linkable6> (2018-06-08) https://github.com/rakudo/rakudo/commit/51ff83c7ca Use a MoarVM spesh plugin for private method calls

[19:15] <linkable6> (2018-06-08) https://github.com/rakudo/rakudo/commit/c5d14062ab Merge branch 'spesh-plugins'

[19:15] <AlexDaniel> aaaaaaaand?

[19:15] <AlexDaniel> c6a61f563b4

[19:15] <linkable6> (2018-06-08) https://github.com/rakudo/rakudo/commit/c6a61f563b Use a spesh plugin to optimize .?

[19:17] <Geth> ¦ rakudo: b4819e7c6f | (Christian Bartolomäus)++ | src/core.c/Rakudo/Iterator.pm6

[19:17] <Geth> ¦ rakudo: Revert "[JVM] Restore old implementation of 'lazy gather'"

[19:17] <Geth> ¦ rakudo: 

[19:17] <Geth> ¦ rakudo: This reverts commit 131d253a20e9cc50daca6ff084a67ace3d4d89d6.

[19:17] <Geth> ¦ rakudo: 

[19:17] <Geth> ¦ rakudo: No special case for the JVM backend needed anymore.

[19:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b4819e7c6f

[19:17] <Geth> ¦ rakudo: f6f8ac0d85 | (Christian Bartolomäus)++ | src/core.c/IO/Path.pm6

[19:17] <Geth> ¦ rakudo: Revert "Restore IO::Path.abspath semantics on the JVM backend"

[19:17] <Geth> ¦ rakudo: 

[19:17] <Geth> ¦ rakudo: This reverts commit bd9d7c1cc3785260a8809b160ff4f0b6b8cbe67c.

[19:17] <Geth> ¦ rakudo: 

[19:17] <Geth> ¦ rakudo: No special case for the JVM backend needed anymore.

[19:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f6f8ac0d85

[19:18] <Geth> ¦ rakudo: 25a1929c88 | (Christian Bartolomäus)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[19:18] <Geth> ¦ rakudo: [JVM] Remove old workaround (no longer needed)

[19:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/25a1929c88

[19:21] *** sena_kun left
[19:23] <[Coke]> bartolin__

[19:23] <[Coke]> bartolin++, I mean!

[19:24] <bartolin_> *g* (my brain parsed the first message that way, too)

[19:37] *** sena_kun joined
[20:19] <Geth> ¦ roast: 912275838f | (Christian Bartolomäus)++ | S17-promise/at.t

[20:19] <Geth> ¦ roast: [JVM] Unfudge now passing test

[20:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/912275838f

[20:31] <MasterDuke> bartolin_++

[20:33] <Xliff> Can JVM backend use JARs, then?

[20:35] * bartolin_ has never tried that

[20:36] <MasterDuke> bartolin_: looks like there are a couple other tests in roast that might be able to unfudge

[20:37] <bartolin_> MasterDuke: I'll look at those (but I have no idea if there will be many)

[20:38] *** Xliff left
[20:38] <MasterDuke> S06-advanced/callframe.t:68:, S06-currying/misc.t:37:, S17-channel/basic.t:75:, S17-promise/nonblocking-await.t:214, S17-promise/nonblocking-await.t:259: seem promising

[20:59] <bartolin_> the first two NPE still exist, but the other three are gone by now. MasterDuke++

[21:06] <lizmat> bartolin_++

[21:20] *** sena_kun left
[21:26] <Geth> ¦ roast: f1c76c52d1 | (Christian Bartolomäus)++ | 3 files

[21:26] <Geth> ¦ roast: [JVM] Unfudge some more passing tests

[21:26] <Geth> ¦ roast: 

[21:26] <Geth> ¦ roast: Please note: The tests from S17-promise/nonblocking-await.t do

[21:26] <Geth> ¦ roast: pass if run standalone. The test file as such is not run for the

[21:26] <Geth> ¦ roast: JVM backend (excluded in t/spectest.data) and seems to hang.

[21:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f1c76c52d1

[21:29] <Geth> ¦ rakudo: 78371bb0c1 | (Elizabeth Mattijsen)++ | 3 files

[21:29] <Geth> ¦ rakudo: Add "is implementation-detail" tests

[21:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/78371bb0c1

[21:29] <lizmat> afk again&

[21:35] *** sena_kun joined
[21:36] *** hankache joined
[21:41] <hankache> what's the frequency of update for docs.raku.org?

[21:43] <rba> hankache: jmerelo is building this himself. you may ask him.

[21:45] <hankache> thanks rba. Either something is wrong or it hasn't been updated for a long time.

[21:45] <hankache> .seen jmerelo

[21:45] <tellable6> hankache, I saw jmerelo 2020-02-26T20:04:44Z in #raku-dev: <jmerelo> tbrowder: that would be OK, I think.

[21:48] <hankache> .tell jmerelo hi JJ, some links on the language/community page have been changed a while back but docs.raku.org still shows the old ones. Does it need an update or is it a bug somewhere?

[21:48] <tellable6> hankache, I'll pass your message to jmerelo

[21:49] <hankache> rba: I remember a while ago before the rename things were automatic. Any idea why it's not the case anymore?

[21:50] <rba> hankache: honestly I don‘t know. Yet would like to know too. JJ made a lot of changes to implement imcrementialy build afaik.

[22:01] *** hankache_ joined
[22:04] *** hankache left
[22:10] *** lucasb left
[22:12] *** hankache_ left
[22:48] *** jjatria left
[22:48] *** jjatria joined
[23:18] *** dogbert17 left
[23:21] *** sena_kun left
[23:27] *** dogbert17 joined
[23:36] *** sena_kun joined
[23:40] *** Kaiepi joined
[23:41] *** Kaiepi left
[23:42] *** Kaiepi joined
[23:51] *** AlexDani` joined
[23:53] *** AlexDaniel left
