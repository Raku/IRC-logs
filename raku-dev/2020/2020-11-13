[00:10] *** frost-lab joined
[00:20] *** leont left
[00:21] *** raku-bridge left
[00:21] *** raku-bridge joined
[00:41] *** vrurg left
[00:42] *** vrurg joined
[02:36] *** lucasb left
[04:15] *** notable6 left
[04:15] *** nativecallable6 left
[04:15] *** unicodable6 left
[04:15] *** statisfiable6 left
[04:15] *** benchable6 left
[04:15] *** evalable6 left
[04:15] *** releasable6 left
[04:15] *** committable6 left
[04:15] *** quotable6 left
[04:15] *** bloatable6 left
[04:15] *** linkable6 left
[04:15] *** bisectable6 left
[04:15] *** greppable6 left
[04:15] *** shareable6 left
[04:15] *** coverable6 left
[04:15] *** tellable6 left
[04:15] *** squashable6 left
[04:15] *** sourceable6 left
[04:15] *** bloatable6 joined
[04:15] *** bisectable6 joined
[04:16] *** nativecallable6 joined
[04:16] *** tellable6 joined
[04:16] *** statisfiable6 joined
[04:16] *** quotable6 joined
[04:17] *** unicodable6 joined
[04:17] *** committable6 joined
[04:17] *** coverable6 joined
[04:17] *** evalable6 joined
[04:17] *** linkable6 joined
[04:18] *** notable6 joined
[04:18] *** shareable6 joined
[04:18] *** sourceable6 joined
[04:18] *** squashable6 joined
[04:18] *** benchable6 joined
[04:18] *** greppable6 joined
[04:18] *** releasable6 joined
[05:28] *** squashable6 left
[05:28] *** bisectable6 left
[05:28] *** linkable6 left
[05:28] *** statisfiable6 left
[05:28] *** unicodable6 left
[05:28] *** committable6 left
[05:28] *** coverable6 left
[05:28] *** evalable6 left
[05:28] *** greppable6 left
[05:28] *** bloatable6 left
[05:28] *** nativecallable6 left
[05:28] *** notable6 left
[05:28] *** tellable6 left
[05:28] *** benchable6 left
[05:28] *** shareable6 left
[05:28] *** releasable6 left
[05:28] *** sourceable6 left
[05:28] *** quotable6 left
[05:29] *** bloatable6 joined
[05:29] *** evalable6 joined
[05:29] *** nativecallable6 joined
[05:29] *** tellable6 joined
[05:29] *** linkable6 joined
[05:29] *** squashable6 joined
[05:29] *** sourceable6 joined
[05:29] *** coverable6 joined
[05:30] *** shareable6 joined
[05:30] *** unicodable6 joined
[05:30] *** releasable6 joined
[05:30] *** committable6 joined
[05:31] *** benchable6 joined
[05:31] *** quotable6 joined
[05:31] *** statisfiable6 joined
[05:31] *** greppable6 joined
[05:31] *** notable6 joined
[05:31] *** bisectable6 joined
[08:06] *** domidumont joined
[08:53] *** sena_kun joined
[09:18] *** leont joined
[10:25] *** raku-bridge left
[10:26] *** raku-bridge joined
[10:26] *** raku-bridge left
[10:26] *** raku-bridge joined
[11:04] <sena_kun> https://github.com/perl6/user-experience/issues/40 is very interesting

[11:42] <lizmat> bisectable6: use nqp; dd nqp::elems(nqp::decodelocaltime(nqp::time_i))

[11:42] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[11:42] <bisectable6> lizmat, Output on all releases: https://gist.github.com/d281278d2a37c386aeb2964c7161d2e7

[11:42] <bisectable6> lizmat, Bisecting by exit code (old=2018.08 new=2018.09). Old exit code: 1

[11:43] <bisectable6> lizmat, bisect log: https://gist.github.com/324305f3e8223c8b32dd1579a4ae1f52

[11:43] <bisectable6> lizmat, (2018-09-15) https://github.com/rakudo/rakudo/commit/8fcebb861585d915eff63cf3771f3eb8fff905ae

[11:43] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/7fa9fabd2262fb592c5711b6feb7a55a

[11:54] *** Geth joined
[12:09] *** Altai-man joined
[12:12] *** sena_kun left
[12:31] *** raku-bridge left
[12:31] *** raku-bridge joined
[12:31] *** raku-bridge left
[12:31] *** raku-bridge joined
[13:17] *** frost-lab left
[15:00] *** lucasb joined
[16:10] *** sena_kun joined
[16:12] *** Altai-man left
[16:33] <[Tux]> Rakudo v2020.10-63-g08f5d028e (v6.d) on MoarVM 2020.10-31-gb13f6a24c

[16:33] <[Tux]> csv-test-xs-20      0.385 -  0.415

[16:33] <[Tux]> csv-ip5xs           0.815 -  0.843

[16:33] <[Tux]> test-t --race       0.843 -  0.856

[16:33] <[Tux]> test-t              1.797 -  1.861

[16:33] <[Tux]> test                7.640 -  7.868

[16:33] <[Tux]> csv-ip5xs-20        8.074 -  8.158

[16:33] <[Tux]> test-t-20 --race    8.794 -  9.318

[16:33] <[Tux]> csv-parser         23.980 - 25.282

[16:33] <[Tux]> test-t-20          30.041 - 30.461

[17:29] *** b2gills joined
[18:14] <Geth> Â¦ rakudo: 2f3de2faab | (Elizabeth Mattijsen)++ | src/core.c/operators.pm6

[18:14] <Geth> Â¦ rakudo: Do not allow infix:<does> on Int or Str

[18:14] <Geth> Â¦ rakudo: 

[18:14] <Geth> Â¦ rakudo: Issue #4015 points out an undesired behaviour of applying does to an

[18:14] <Geth> Â¦ rakudo: Int or Str value.  This commit does *not* take away the underlying

[18:14] <Geth> Â¦ rakudo: issue with this, but it does inhibit applying the undesired behaviour

[18:14] <Geth> Â¦ rakudo: and supplies an error message that will hopefully be helpful.

[18:14] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2f3de2faab

[18:14] <linkable6> RAKUDO#4015 [open]: https://github.com/rakudo/rakudo/issues/4015 `does` on an Int|Str affects other variables holding that Int|Str

[18:15] *** domidumont left
[19:24] *** MasterDuke joined
[20:10] *** Altai-man joined
[20:12] *** sena_kun left
[20:32] <MasterDuke> .

[20:32] <tellable6> 2020-11-12T23:13:12Z #raku-dev <timotimo> MasterDuke https://github.com/timo/rakudo-appimage/releases/tag/2020.10

[20:34] <MasterDuke> nice, thanks

[20:44] <vrurg> MasterDuke: do you know how to handle exceptions in JVM backend?

[20:45] <MasterDuke> java exceptions? or raku exceptions?

[20:45] <vrurg> I mean, nqp code throws with nqp::die in .bindOneParam and instead of it being reported back to the user I get a weird Java exception.

[20:46] <vrurg> Other code in bindOneParam uses error variable to setup an exception, but I want this to be uniform with moarvm and thus let the metamodel code to be responsible for error reporting.

[20:47] * vrurg never wrote a single Java line until before yesterday... :)

[20:48] *** Kaeipi joined
[20:48] *** Kaiepi left
[20:50] <MasterDuke> hm, i don't think i've done anything with nqp::die in the jvm code. maybe look at the couple other nqp::die's and try to trigger them and see what it looks like?

[20:51] <vrurg> I think I can find out something one way or another. Just hoped to find out sooner than later. :)

[20:53] <MasterDuke> sorry, i've done a little tiny bit with the jvm backend, but not really enough to be helpful to anyone else

[20:59] <vrurg> No problem, of course. After all, it was about the same path I made while entering the NQP world.

[21:00] <vrurg> But the mantra I always repeat: Java must die! Never liked it, and never will. :)

[21:33] <vrurg> .seen usev6

[21:33] <tellable6> vrurg, I haven't seen usev6 around, did you mean user6?

[21:33] <vrurg> .seen bartolin

[21:33] <tellable6> vrurg, I saw bartolin 2020-11-01T12:15:12Z in #raku-dev: <bartolin> lizmat: maybe you have a quick idea how to fix this? https://github.com/rakudo/rakudo/issues/3999

[21:35] <Geth> Â¦ rakudo: MasterDuke17++ created pull request #4026: Gen faster code for some kinds of `when` cases

[21:35] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4026

[21:40] <timotimo> cool

[21:41] <timotimo> i wonder if anybody ever uses a native int or str variable to pass into a `given`

[21:44] <MasterDuke> greppable6: given \$

[21:44] <greppable6> MasterDuke, 1721 lines, 353 modules: https://gist.github.com/af9a31be1a6498bea33405f4347c2080

[21:45] <timotimo> oof

[21:45] <timotimo> you know, a given (whatever).WHAT { ... } could probably get an optimization too

[21:45] <MasterDuke> ugh, really want a -B option for that

[21:45] <timotimo> should be doable

[21:46] <MasterDuke> ? don't follow

[21:46] <timotimo> to give greppable a way to add -A, -B, -C options somehow

[21:47] <timotimo> oh you already generate an istype for type values

[21:50] <MasterDuke> yeah and yeah

[21:52] <MasterDuke> arg, i don't see that rebuild link that ugexe pointed out for the failed azure job

[21:52] <timotimo> i'm not sure how to sensibly get the Stringy/Numeric stuff much faster

[21:53] <timotimo> since we don't know what type we'll get; neither definitely, nor likely

[21:53] <ugexe> MasterDuke: its there now i think

[21:54] <ugexe> https://github.com/rakudo/rakudo/pull/4026/checks?check_run_id=1398007348

[21:54] <ugexe> (i dont think it was there when i first clicked on it)

[21:55] <MasterDuke> oh, i was clicking details from the overview tab, not the checks tabs

[21:56] <MasterDuke> thanks again

[21:57] <MasterDuke> timotimo: like i mention in the commit message, and was chatting about with lizmat a day or two ago, the cost is dominated by the backtrace creation for failed matches

[21:57] <MasterDuke> though of course it would also be good to make successful matches as quick as possible

[21:58] <timotimo> yes, i know

[21:59] <MasterDuke> it's ~44% of a profile's exclusive time, next biggest is ~5%

[21:59] <MasterDuke> any ideas for how to make it faster? or just not do it at all?

[22:00] <timotimo> if you knew the exact type coming in, you could implement a non-fatalizing version of the method in question and put them in the qast directly

[22:02] <MasterDuke> implement a non-fatalizing `.(Numeric|Stringy)`?

[22:05] <timotimo> yes, but also: must be able to handle classes that have overridden it, and such

[22:06] <timotimo> hmm. what if you made it a multi sub with extra checks if the type coming in is exactly what we expect, and otherwise fall back to the regular method again

[22:10] <MasterDuke> but it's the otherwise that's slow. `.Numeric` on an int/num/etc is fast, it's on a str that's slow

[22:10] *** Altai-man left
[22:10] *** sena_kun joined
[22:11] <MasterDuke> well, it's on a str that won't convert that's slow

[22:15] <timotimo> that case we should be able to make faster

[22:15] <timotimo> by reacting directly to "failure to numerify the string"

[22:16] <MasterDuke> in the code genned for the when? because the fail is coming from val()

[22:18] <timotimo> well, by moving it to a multi sub we don't have to output so much code from the optimizer

[22:18] <timotimo> but yeah, essentially, steal the val implementation i guess

[22:19] <MasterDuke> it's not small...https://github.com/rakudo/rakudo/blob/master/src/core.c/allomorphs.pm6#L196-L524

[22:20] <MasterDuke> but maybe something can be done here? https://github.com/rakudo/rakudo/blob/master/src/core.c/allomorphs.pm6#L216-L222

[22:22] <timotimo> hm, i think that's just a trick to return past subs called from there

[22:22] <timotimo> since it's a pointy block it's transparent to return

[22:22] <timotimo> hm. isn't "fail abc" the same as "return Failure.new(...)"?

[22:23] <timotimo> maybe that makes stuff just the tiniest bit faster

[22:23] <timotimo> doesn't remove the need to build backtraces of course

[22:24] <MasterDuke> that's where the profile says the fail comes from at some point. i mean maybe add an option to create a fail that doesn't have a backtrace

[22:26] <MasterDuke> line 276 is where it's called iirc

[22:35] *** raku-bridge left
[22:35] *** raku-bridge joined
[22:35] *** raku-bridge left
[22:35] *** raku-bridge joined
[23:26] *** sena_kun left
[23:29] <timotimo> so, like, var("12ohshit", :HARD-FAIL)

[23:39] *** vrurg_ joined
[23:40] <MasterDuke> yeah. and a change here https://github.com/rakudo/rakudo/blob/master/src/core.c/Str.pm6#L803 

[23:44] *** vrurg_ left
[23:46] <timotimo> oh what's :val-or-fail

[23:48] <timotimo> that could be the right thing for our optimizer

[23:48] <timotimo> check if the return value is the same as the value passed

[23:48] <timotimo> and interpret that as "did not work"

