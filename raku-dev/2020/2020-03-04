[00:01] <japhb> MasterDuke: intarray[int32]?

[00:02] <japhb> (Just guessing that the parameterization is on native int size)

[00:02] <MasterDuke> ah

[00:02] <MasterDuke> m: my int32 @a; say @a.^roles

[00:02] <evalable6> MasterDuke, rakudo-moar cf01f7a25: OUTPUT: «((array::intarray[int32]) (Positional[int32]) (Iterable))␤»

[00:03] <MasterDuke> japhb++

[00:06] *** lucasb left
[00:27] <MasterDuke> m: constant N = 1_000_000; my int @a[N]; @a[$_] = $_ for ^N; say @a[N-1]; say now - INIT now

[00:27] <evalable6> MasterDuke, rakudo-moar cf01f7a25: OUTPUT: «999999␤4.92626373␤»

[00:28] <MasterDuke> ^^^ hits https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/MROBasedMethodDispatch.nqp#L4 (find_method) 1_000_000 times where it's looking for ASSIGN-POS in array[int]

[00:30] <MasterDuke> and https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/MROBasedTypeChecking.nqp#L14 is hit 2_000_000 times

[00:38] <MasterDuke> m: constant N = 1_000_000; my int @a; @a[$_] = $_ for ^N; say @a[N-1]; say now - INIT now  # the unshaped version doesn't hit those (find_method and type_check)

[00:38] <evalable6> MasterDuke, rakudo-moar cf01f7a25: OUTPUT: «999999␤0.1614093␤»

[01:22] *** sena_kun joined
[01:24] *** Altai-man_ left
[02:10] *** epony left
[02:48] *** jjatria left
[02:48] *** jjatria joined
[03:22] *** Altai-man_ joined
[03:24] *** ZzZombo joined
[03:24] *** sena_kun left
[03:38] *** tobs left
[03:39] *** tobs joined
[04:18] *** epony joined
[05:22] *** sena_kun joined
[05:24] *** Altai-man_ left
[05:58] *** lizmat left
[06:19] *** lizmat joined
[06:30] *** lizmat left
[07:03] *** lizmat joined
[07:22] *** Altai-man_ joined
[07:24] *** sena_kun left
[09:09] *** leont joined
[09:23] *** sena_kun joined
[09:24] *** Altai-man_ left
[09:25] *** vrurg_ joined
[09:26] *** vrurg left
[09:54] <|Tux|> Rakudo version 2020.02.1-98-gcf01f7a25 - MoarVM version 2020.02.1-35-ga7fa6daad

[09:54] <|Tux|> csv-test-xs-20      0.361 -  0.361

[09:54] <|Tux|> csv-ip5xs           0.694 -  0.694

[09:54] <|Tux|> test-t --race       0.838 -  0.871

[09:54] <|Tux|> test-t              1.839 -  1.863

[09:54] <|Tux|> csv-ip5xs-20        5.649 -  5.720

[09:54] <|Tux|> test                7.515 -  7.642

[09:54] <|Tux|> test-t-20 --race    8.911 -  9.106

[09:54] <|Tux|> csv-parser         23.081 - 23.299

[09:54] <|Tux|> test-t-20          30.356 - 31.413

[10:20] *** lizmat left
[11:21] *** Altai-man_ joined
[11:24] *** sena_kun left
[12:25] *** |Tux| left
[12:26] *** |Tux| joined
[12:46] *** camelia joined
[12:48] *** camelia left
[12:48] *** camelia joined
[13:13] *** lucasb joined
[13:22] *** sena_kun joined
[13:24] *** kawaii left
[13:24] *** Altai-man_ left
[13:25] *** kawaii joined
[13:27] *** lizmat joined
[14:26] *** lizmat left
[15:18] *** rypervenche left
[15:22] *** Altai-man_ joined
[15:23] *** rypervenche joined
[15:24] *** sena_kun left
[15:29] *** leont left
[16:17] *** leont joined
[17:22] *** sena_kun joined
[17:24] *** Altai-man_ left
[18:22] *** squashable6 left
[18:23] *** squashable6 joined
[19:22] *** Altai-man_ joined
[19:24] *** sena_kun left
[20:10] *** Xliff joined
[20:10] <Xliff> .

[20:10] <Xliff> o/

[20:11] <Xliff> I had an idea last night and I believe I've brought up parts of it, but I'd like to bring it up here for consideration.

[20:12] <Xliff> I'd like to discuss the feasibility of having perl6 compile .moarvm code so that it can be stored in a database with BLOB support.

[20:13] <Xliff> How feasible is this with the current implementation? I know I can do the storage part, already using --target and --output.

[20:13] <Xliff> Retrieval is easy enough.

[20:13] <Xliff> What about execution?

[20:15] <Xliff> Would a `sub EVAL (Blob)` function work? In my mind, the return value would be a CompUnit that one could then massage into something executable.

[20:16] <jnthn> What's the use case?

[20:16] <Xliff> An application server.

[20:16] <jnthn> Remember that a compiler upgrade invalidates all the blobs. :)

[20:17] <jnthn> Or any dependent module update.

[20:17] <Xliff> True, but that would be at the app server leve.

[20:17] <Xliff> All modules would be in the database.

[20:17] <jnthn> But anyway, I'd take a look at CompUnitRepo stuff

[20:17] <jnthn> Also maybe precompilation store

[20:17] <jnthn> I think alternative impls of those could be used to achieve this.

[20:18] <Xliff> Yes. My thought were along those lines. I was falling asleep at the time, but was wondering if current rakudo would be up to this.

[20:19] <Xliff> The application server would need to reimplement much of the loader functionality for this to work. I am wary that the current code is not modular enough to accommodate this.

[20:20] <jnthn> In theory it's possible, and we won't know in practice until somebody tries.

[20:21] <Xliff> OK. Then I will have to look into it.

[20:21] <Xliff> Do you think a write-up of this might be worth a grant from the TPF?

[20:25] <vrurg_> Xliff: you should try, I think.

[20:25] *** vrurg_ is now known as vrurg

[20:28] <Xliff> vrurg: I think so, too. However my time has become very limited, these days.

[20:46] <Xliff> Thanks, everyone! I have a some things to think about. :)

[20:46] <Xliff> o7

[20:46] *** Xliff left
[20:53] <MasterDuke> jnthn: got a couple minutes for questions?

[21:04] *** MasterDuke52 joined
[21:04] *** MasterDuke left
[21:23] *** sena_kun joined
[21:24] *** Altai-man_ left
[21:25] *** squashable6 left
[21:27] *** squashable6 joined
[21:56] *** MasterDuke52 left
[21:56] *** MasterDuke joined
[22:03] <discord6> <how-1ie> What's the TPF?

[22:04] <leont> The Perl Foundation

[22:17] *** lucasb left
[22:50] *** leont left
[23:22] *** Altai-man_ joined
[23:24] *** sena_kun left
[23:29] *** leont joined
[23:33] *** lizmat joined
