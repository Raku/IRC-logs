[01:55] *** MasterDuke left
[03:06] *** upupbb-user3 left
[03:17] *** upupbb-user3 joined
[04:25] *** cognominal left
[04:35] *** upupbb-user3 left
[04:51] *** hungrydonkey joined
[05:00] *** hungrydonkey46 joined
[05:02] *** hungrydonkey left
[05:17] *** cognominal joined
[05:47] *** [TuxCM] left
[06:29] *** hungrydonkey46 left
[06:48] *** hungrydonkey joined
[06:50] <[Tux]> Rakudo version 2020.02.1-261-g478239e61 - MoarVM version 2020.02.1-69-g16ff1585e

[06:50] <[Tux]> csv-test-xs-20      0.382 -  0.394

[06:50] <[Tux]> csv-ip5xs           0.694 -  0.735

[06:50] <[Tux]> test-t --race       0.976 -  1.016

[06:50] <[Tux]> test-t              2.001 -  2.004

[06:50] <[Tux]> csv-ip5xs-20        6.236 -  6.323

[06:50] <[Tux]> test                7.598 -  8.158

[06:50] <[Tux]> test-t-20 --race    9.808 - 10.308

[06:50] <[Tux]> csv-parser         24.861 - 25.947

[06:50] <[Tux]> test-t-20          32.631 - 33.432

[07:18] *** MasterDuke joined
[07:28] <AlexDaniel> lizmat++ great weekly

[08:15] *** hungrydonkey left
[09:03] *** squashable6 left
[09:05] *** squashable6 joined
[09:18] *** upupbb-user3 joined
[09:34] *** cognomin_ joined
[09:37] *** cognominal left
[10:01] *** [TuxCM] joined
[10:12] *** cognominal joined
[10:15] *** cognomin_ left
[10:31] *** MasterDuke left
[11:06] *** finsternis left
[11:56] <lizmat> Files=1306, Tests=111225, 210 wallclock secs (28.89 usr  8.15 sys + 2963.90 cusr 267.52 csys = 3268.46 CPU)

[12:05] <Kaiepi> .tell jnthn, did you get a chance to review the pr yet?

[12:05] <tellable6> Kaiepi, I'll pass your message to jnthn

[12:29] *** squashable6 left
[12:31] *** squashable6 joined
[12:41] *** MasterDuke joined
[12:43] *** lichtkind joined
[12:48] <tbrowder> hi, lizmat.

[12:48] <lizmat> tbrowder o/

[12:49] <tbrowder> i'm looking at yr P5 version of scalar util and you don't emulate openhandle

[12:50] <tbrowder> PostScript::File uses it in a weird way and i've taken a shot at a raku version:...

[12:51] <tbrowder> sub oh($f) { return True if $f.^name ~~ /Handle/}

[12:52] <tbrowder> it should be undef unless the arg is an open file handle

[12:52] <tbrowder> opinion?

[12:53] <jnthn> Matching on .^name is awfully fragile; should probably just be so $f ~~ IO::Handle

[12:53] <tellable6> 2020-03-31T12:05:22Z #raku-dev <Kaiepi> jnthn, did you get a chance to review the pr yet?

[12:53] <lizmat> tbrowder: what jnthn says  :-)

[12:53] <jnthn> Kaiepi: Didn't get to any Raku stuff yesterday (well, aside from that needed on a $dayjob project...) Today looks better for that. :)

[12:54] <lizmat> tbrowder: I'm not aware of what opehandle is

[12:54] <lizmat> *openhandle

[12:54] <tbrowder> ah, i didn't realize that, thanks you two! made my day

[12:54] <tbrowder> yes, my usual ff (fumble finger,none finger typing :-D

[12:55] <lizmat> hmmm... it appears an update is needed  :-)

[12:56] <lizmat> tbrowder: could you make an issue for it?  so it won't fall through the cracks ?

[12:56] <tbrowder> you said in Scalar::Util you didn't port it due to internalisms

[12:56] <tbrowder> yes i will, thnx

[12:56] <lizmat> aah...  ok  hmmm

[12:58] <lizmat> sub oh($f) { $f.?opened }   

[12:59] <lizmat> sub oh($f) { ?$f.?opened }   # if you insist on a Bool being returned

[13:00] <jnthn> lizmat: I'd make sure it's a handled also; .opened isn't such a weird method name to have

[13:00] <jnthn> *handle

[13:00] *** lichtkind left
[13:01] <lizmat> sub oh($f) { $f ~~ IO::Handle && $f.opened }     # in that case

[13:02] <jnthn> *nod*

[13:03] *** Altai-man_ joined
[13:09] <lizmat> sub oh($f) { $f ~~ IO::Handle && $f.opened ?? $f !! Nil }     # to mimic the interface of openhandle  tbrowder 

[13:09] <tbrowder> 'IO::Handle'

[13:10] <tbrowder> i see quotes required due to '::'

[13:10] <lizmat> ?

[13:11] <tbrowder> when i tried bare ~~ /IO::Handle/ i got an error

[13:12] <tbrowder> test for openess is required, good point

[13:12] <lizmat> do you have a gist ?

[13:12] <lizmat> it should not require quotes

[13:12] <tbrowder> let me check, may be an ff

[13:14] <jnthn> tbrowder: Remove the /../; the smartmatch is against the type, not a regex :)

[13:15] <tbrowder> duh, i see that now, sorry

[13:16] *** lichtkind joined
[13:17] <lizmat> tbrowder: anyways, Scalar::Util 0.07 on its way to CPAN now

[13:17] <lizmat> with openhandle() support  :-)

[13:17] <tbrowder> thnx much!

[13:18] <lizmat> glad to see someone using those modules  :)

[13:20] <jnthn> Kaiepi: Taken a look at it and left feedback, also looked at the NQP and MoarVM deps of it

[13:20] <Kaiepi> aight, thanks

[13:34] <tbrowder> lizmat: they really are helpful, as well as many other modules by other #raku people. i'm so far giving 10 a workout, 5 of yours and 5 others. my README has the credits listed.

[13:34] <lizmat> tbrowder++

[14:07] *** sena_kun joined
[14:08] *** Altai-man_ left
[14:11] *** upupbb-user3 left
[14:32] *** lucasb joined
[16:05] *** Altai-man_ joined
[16:08] *** sena_kun left
[16:28] <tbrowder> from reading docs it's pretty clear how to use a separate file to import subs and vars into a unit module file. is there any way to do the same for a class? i.e., can i put some or all of a classes methods in another file and import them some magic way?

[16:31] <tbrowder> afk for a while...

[16:37] <nine> no

[16:38] <[Coke]> Could you stub the class and then augment it?

[16:38] <[Coke]> (I think you'd have to do the other imports yourself, not from inside the stub, though)

[16:39] <Altai-man_> I am feeling this is the question where "why" part is more important than "how" part.

[16:39] <[Coke]> :)

[16:39] <nine> Well actually, there is a way: put those methods into a role

[16:39] <nine> and consume the role

[16:39] <[Coke]> I get not wanting to have a huge monolithic source file.

[16:39] <[Coke]> nine++

[16:41] <Altai-man_> [Coke], if you have a huge class there are plenty of other ways to structure it in another way, I think. Moving lots and lots methods doesn't solve the issue, just moves it in another file and you're in square one, no?

[16:43] <[Coke]> It solves the issue of "having a file that's very large".

[16:43] <[Coke]> That's all. I'm not saying it's the best way to maintain your source. But if you can group things into Roles, that hopefully makes more sense with a thematic group of methods as well.

[16:44] <Altai-man_> Roles decomposition - sure. I mean, instead of "a very large file" you have "a small file with class definition and an a bit less large but still large file with its methods", no?

[16:45] <Altai-man_> Though, well, never mind me.

[16:46] <nine> Of course, an excellent question in such a case would be: why do you have so many methods in a class in the first place?

[16:47] <Altai-man_> Yes, and this takes us back to "why not just decompose". \o/

[17:01] <Kaiepi> i think i figured out how to get rid of that pesky branch in Metamodel::Mixins.mixin once and for all

[17:02] <Kaiepi> the only time it gets called on uncomposed types during the setting is when traits that use mixins are applied to routines before their types get composed

[17:03] <Kaiepi> so by applying Callable to Code and composing Sub/Method/Submethod in the prologue no mixins of uncomposed metaobjects get made during the setting

[17:03] <Kaiepi> just waiting for tests to finish before making the pr

[17:44] <Geth> Â¦ rakudo: Kaiepi++ created pull request #3583: Ensure Routine subtypes are composed before performing mixins with their instances

[17:44] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3583

[17:48] *** AlexDaniel left
[17:55] *** lichtkind left
[17:56] *** lichtkind joined
[17:59] *** upupbb-user3 joined
[18:03] <[Coke]> let's make sure our distros never don't ship core modules. (having trouble with perl5.26 on git bash on windows that's missing some ExtUtils module)

[18:06] *** sena_kun joined
[18:08] *** Altai-man_ left
[18:11] <[Coke]> (on the plus side, I'm now using a raku one liner instead)

[18:14] <tbrowder> thnx for ideas. yes, it's a LARGE file and i work remotely a lot and don't vi very well

[18:19] <tbrowder> i'm trying to port a large Perl module and haven't yet figured out a way to cut back the number of methods or put some of them in a separate class, but that can be done for sure.

[18:20] <sena_kun> tbrowder, can it be separated into roles? Maybe it does too much?

[18:21] <nine> tbrowder: can't you open it in your local editor via some remote protocol like sftp?

[18:34] *** lichtkind left
[18:37] <nine> jnthn: if we take the :noinline band aid for takenextdispatcher now, the speedups we are gonna gain as side effect of your one dispatcher interface to rule them all (tm) will look even more impressive ;)

[18:38] <sena_kun> nine, one dispatcher interface? Do we have a proposal?

[18:41] <nine> sena_kun: not yet: https://github.com/Raku/problem-solving/issues/170#issuecomment-606783081

[18:52] <sena_kun> nine, thanks.

[19:35] *** maggotbrain joined
[20:02] <Geth> Â¦ rakudo: 5baa645bb0 | (Ben Davies)++ | src/core.c/Capture.pm6

[20:02] <Geth> Â¦ rakudo: Make Capture.raku 45% faster

[20:02] <Geth> Â¦ rakudo: 

[20:02] <Geth> Â¦ rakudo: Most of the work the method does reduces to nqp ops quite nicely.

[20:02] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5baa645bb0

[20:06] *** Altai-man_ joined
[20:09] *** sena_kun left
[20:23] <Kaiepi> there are more optimizations to Capture i can make but those will require a pr

[20:23] <Kaiepi> not quite to that degree though

[20:53] <dogbert17> .seen lizmat

[20:53] <tellable6> dogbert17, I saw lizmat 2020-03-31T19:15:21Z in #raku: <lizmat> yup

[20:53] <lizmat> you rang?

[20:53] <dogbert17> I have a stupid question (as usual)

[20:53] <lizmat> I hope I will raise the standard of the response  :-)

[20:54] <dogbert17> I believe you'll have a laugh :)

[20:54] <dogbert17> m: my @a; push @a, $_ for ^500000; say now - INIT now # is this the same as 

[20:54] <camelia> rakudo-moar 8808401cf: OUTPUT: Â«4.800496â¤Â»

[20:54] <dogbert17> m: my @a; @a.push: $_ for ^500000; say now - INIT now  # this

[20:54] <camelia> rakudo-moar 8808401cf: OUTPUT: Â«0.2146712â¤Â»

[20:55] <lizmat> push @a calls @a.push

[20:55] <dogbert17> there's a tiny speed difference

[20:55] <lizmat> so you're cutting out the "middle man" as it were

[20:56] <dogbert17> and the middle man takes his time

[20:57] <lizmat> hmmm... looking at profiles, it looks like @a.push is not getting jitted from inside sub push

[20:57] *** Kaeipi joined
[20:57] <Kaiepi> you can use $*INIT-INSTANT instead of INIT now

[20:57] *** Kaiepi left
[20:58] <dogbert17> Kaiepi: thx, didn't know that

[20:58] <tellable6> dogbert17, I'll pass your message to Kaiepi

[20:59] <dogbert17> I wonder how many uses the 'older' syntax

[21:00] <lizmat> ah, the source code of sub push is definitely, eh, icky

[21:02] <dogbert17> oops

[21:02] <dogbert17> icky like in 'not very fast'?

[21:05] <dogbert17> I was looking at an old sieve benchmark which was discussed a few years ago

[21:06] * lizmat looks at a better solution

[21:06] <lizmat> for https://github.com/rakudo/rakudo/issues/2943

[21:06] <dogbert17> changing one line, i.e. '@composite[$t] || push @primes, $t;' to use the method syntax saved more than 10% of the total runtime

[21:08] <dogbert17> lizmat: than you're in the relevant piece of code :)

[21:09] <dogbert17> dunno if this warrants an issue, what do you think?

[21:09] <lizmat> yeah, please make one  :-)

[21:09] <dogbert17> coming up ...

[21:15] <dogbert17> R#3584

[21:15] <linkable6> R#3584 [open]: https://github.com/rakudo/rakudo/issues/3584 sub push much slower than method push

[21:16] <Kaeipi> oh, there's one optimization to Capture i can make without a pr

[21:16] <Kaeipi> this one's more important than the raku one

[21:19] <MasterDuke> greppable6: /^\s*push[ (]/

[21:19] <greppable6> MasterDuke, Found nothing!

[21:19] <MasterDuke> greppable6: help

[21:19] <greppable6> MasterDuke, Like this: greppable6: password # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Greppable

[21:20] <MasterDuke> greppable6: ^\s*push[ (]

[21:20] <greppable6> MasterDuke, 749 lines, 142 modules: https://gist.github.com/2f9eed0d8624e8b915f219bffd34bb90

[21:23] <Kaeipi> geth didn't log it, but i made Capture.WHICH 60% faster

[21:24] * lizmat pings tyil re Geth 

[21:31] <Kaeipi> hm, maybe the way i was thinking of optimizing Capture further that would require a pr isn't the best idea

[21:31] <Kaeipi> i was thinking of making it so @!list and %!hash always exist, but do they not at the moment because there's a significant impact on memory usage?

[21:31] <lizmat> yes

[21:32] <Kaeipi> ah

[21:32] <lizmat> but check with jnthn: things may have changed since then

[21:33] <Kaeipi> aigh

[21:33] <Kaeipi> t

[21:34] <Kaeipi> in the meantime, some methods don't check if they exist or not

[21:39] <lizmat> Kaeipi: well, try to create a case where they would fail ?

[21:45] <Kaeipi> it's just EXISTS-KEY that doesn't. the other Positional/Associative methods return Nil when that happens

[21:45] <Kaeipi> so i'm thinking it should return False when that happens

[21:46] <lizmat> I think EXISTS-KEY is fine, because it will also return 0 if there is no hash?

[21:46] <Kaeipi> m: say [].Capture.<foo>:exists

[21:47] <camelia> rakudo-moar 688f67104: OUTPUT: Â«existskey requires a concrete object (got a VMNull type object instead)â¤  in block <unit> at <tmp> line 1â¤â¤Â»

[21:47] <lizmat> ok, that would be a bug  :-)

[21:52] <Kaeipi> fixed

[21:53] <Kaeipi> couldn't the \key and Str:D \key candidates for EXISTS-KEY and a couple other methods be made into one Str() candidate?

[21:54] <lizmat> Kaeipi: that's a performance issue...  but maybe not anymore: the code precedes coercion capabilities in signatures

[21:54] <lizmat> so you would have to benchmark

[21:56] <Kaeipi> aight

[22:01] <MasterDuke> coercion looks to be slightly slower

[22:01] <lizmat> yeah, but how much ?

[22:01] <MasterDuke> m: class F { method bar(Str:D() \a) { "a " ~ a }; }; my $a; $a = F.bar((^2).pick ?? "b" !! 2) for ^100_000; say now - INIT now; say $a

[22:01] <camelia> rakudo-moar 688f67104: OUTPUT: Â«0.4300029â¤a bâ¤Â»

[22:02] <MasterDuke> m: 

[22:02] <MasterDuke> m: class F { multi method bar(Str:D \a) { "a " ~ a }; multi method bar(\a) { "a " ~ a.Str } }; my $a; $a = F.bar((^2).pick ?? "b" !! 2) for ^100_000; say now - INIT now; say $a

[22:02] <camelia> rakudo-moar 688f67104: OUTPUT: Â«0.3168794â¤a 2â¤Â»

[22:03] *** MasterDuke left
[22:05] *** dogbert17 left
[22:05] *** dogbert17 joined
[22:07] *** sena_kun joined
[22:08] *** patrickb joined
[22:09] *** Altai-man_ left
[22:14] <lizmat> m: multi a(\b) { "\\" }; multi a(@b) { q/@/ }; dd a $(1,2)   # sorta expected to see \ there

[22:14] <camelia> rakudo-moar 385ab4cfc: OUTPUT: Â«"\@"â¤Â»

[22:14] <Kaeipi> huh

[22:15] <Kaeipi> i would've expected Str() to be a bit faster since there are fewer candidates to analyze

[22:15] <lizmat> the additional nqp::istype() either blows it, or the Any makes it too wide ?

[22:18] <lizmat> .tell tyil looks like Geth is AWOL again

[22:18] <tellable6> lizmat, I'll pass your message to tyil

[22:23] *** patrickb left
[22:27] <tbrowder> .tell nine when i say remote i mean via a terminal on my ipad accessing my laptop in another room while i'm lying in my easy chair :-/

[22:27] <tellable6> tbrowder, I'll pass your message to nine

[22:29] <tbrowder> i could use emacs but i don't like it so much without a real gui...all lame excuses i know...

[22:37] *** MasterDuke joined
[22:51] *** lucasb left
[22:53] <Kaeipi> oh lizmat is https://github.com/rakudo/rakudo/pull/3575 worth reviewing before the next release?

[23:00] *** sena_kun left
[23:17] *** upupbb-user3 left
