[00:12] *** sena_kun joined
[00:14] *** Altai-man_ left
[00:35] <Geth> ¦ rakudo: vrurg++ created pull request #3834: Partial fix of mixing in a role with attributes into a NQP class

[00:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3834

[01:31] *** Xliff left
[01:54] <Geth> ¦ nqp/roast_657_attr_fix: 497c2e550e | (Vadim Belman)++ | src/how/NQPClassHOW.nqp

[01:54] <Geth> ¦ nqp/roast_657_attr_fix: Support for typechecking against Raku roles

[01:54] <Geth> ¦ nqp/roast_657_attr_fix: 

[01:54] <Geth> ¦ nqp/roast_657_attr_fix: If a `NQPClassHOW` class get a Raku role mixin then typechecking fails

[01:54] <Geth> ¦ nqp/roast_657_attr_fix: for complex cases like parameterized roles. By incorporating

[01:54] <Geth> ¦ nqp/roast_657_attr_fix: `role_typecheck_list` provided by role's HOW we fix the problem.

[01:54] <Geth> ¦ nqp/roast_657_attr_fix: 

[01:54] <Geth> ¦ nqp/roast_657_attr_fix: NQP, Rakudo, and roast tests are passing.

[01:54] <Geth> ¦ nqp/roast_657_attr_fix: review: https://github.com/Raku/nqp/commit/497c2e550e

[01:55] <Geth> ¦ nqp: vrurg++ created pull request #650: Support for typechecking against Raku roles

[01:55] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/650

[02:11] *** Altai-man_ joined
[02:13] *** sena_kun left
[02:45] <Geth> ¦ roast/roast_657: 82369b4a6c | (Vadim Belman)++ | S14-traits/package.t

[02:45] <Geth> ¦ roast/roast_657: Adapt the test to the syntax and semantics of Raku v6.c

[02:45] <Geth> ¦ roast/roast_657: 

[02:45] <Geth> ¦ roast/roast_657: Requires Raku/nqp#650 and rakudo/rakudo#3834 to pass.

[02:45] <Geth> ¦ roast/roast_657: 

[02:45] <Geth> ¦ roast/roast_657: I have removed trait `described` because the final implementation of

[02:45] <Geth> ¦ roast/roast_657: traits doesn't need covering two different trait routine signatures.

[02:45] <Geth> ¦ roast/roast_657: 

[02:45] <linkable6> NQP#650 [open]: https://github.com/Raku/nqp/pull/650 Support for typechecking against Raku roles

[02:45] <Geth> ¦ roast/roast_657: <…commit message has 6 more lines…>

[02:45] <Geth> ¦ roast/roast_657: review: https://github.com/Raku/roast/commit/82369b4a6c

[02:45] <linkable6> RAKUDO#3834 [open]: https://github.com/rakudo/rakudo/pull/3834 Partial fix of mixing in a role with attributes into a NQP class

[02:45] <Geth> ¦ roast/roast_657: abca43f97a | (Vadim Belman)++ | 2 files

[02:45] <Geth> ¦ roast/roast_657: Adapt test for Raku v6.c syntax and semantics

[02:45] <Geth> ¦ roast/roast_657: 

[02:45] <Geth> ¦ roast/roast_657: - change trait signatures to match v6.c requirements

[02:45] <Geth> ¦ roast/roast_657: - rename role `doc` into `Doc` for `is` to be able to distinguish

[02:45] <Geth> ¦ roast/roast_657:   between the two

[02:45] <Geth> ¦ roast/roast_657: - because the role is applied to the container, invoke the `doc` method

[02:46] <Geth> ¦ roast/roast_657:   on `.VAR`

[02:46] <Geth> ¦ roast/roast_657: review: https://github.com/Raku/roast/commit/abca43f97a

[02:46] <Geth> ¦ roast/roast_657: deb54cc64f | (Vadim Belman)++ | 2 files

[02:46] <Geth> ¦ roast/roast_657: Fix S11-modules/gh2979.t test

[02:46] <Geth> ¦ roast/roast_657: 

[02:46] <Geth> ¦ roast/roast_657: Export semantics requires a `Map` to be returned by `sub EXPORT` in

[02:46] <Geth> ¦ roast/roast_657: order to preserve containers of the exported symbols.

[02:46] <Geth> ¦ roast/roast_657: review: https://github.com/Raku/roast/commit/deb54cc64f

[03:49] *** evalable6 left
[03:49] *** linkable6 left
[03:51] *** evalable6 joined
[03:52] *** linkable6 joined
[04:12] *** sena_kun joined
[04:14] *** Altai-man_ left
[04:30] *** lucasb left
[06:11] *** Altai-man_ joined
[06:14] *** sena_kun left
[07:16] *** leont joined
[07:52] *** brrt joined
[08:12] *** sena_kun joined
[08:13] *** Altai-man_ left
[09:15] *** patrickb joined
[10:11] *** Altai-man_ joined
[10:13] *** sena_kun left
[12:12] *** sena_kun joined
[12:14] *** Altai-man_ left
[12:34] *** raku-bridge left
[12:35] *** raku-bridge joined
[12:35] *** raku-bridge left
[12:35] *** raku-bridge joined
[12:59] *** patrickb left
[13:20] *** domidumont joined
[13:43] <[Tux]> Rakudo version 2020.07-46-ga3af5833d - MoarVM version 2020.07-10-g7a2881a85

[13:43] <[Tux]> csv-test-xs-20      0.388 -  0.391

[13:43] <[Tux]> csv-ip5xs           0.814 -  0.816

[13:43] <[Tux]> test-t --race       0.828 -  0.872

[13:43] <[Tux]> test-t              1.891 -  1.897

[13:43] <[Tux]> test                7.493 -  7.712

[13:43] <[Tux]> csv-ip5xs-20        7.987 -  8.398

[13:43] <[Tux]> test-t-20 --race    8.883 - 10.047

[13:43] <[Tux]> csv-parser         26.566 - 27.485

[13:43] <[Tux]> test-t-20          31.984 - 34.315

[14:12] *** Altai-man_ joined
[14:14] *** sena_kun left
[14:23] *** dogbert11 joined
[14:26] *** dogbert17 left
[14:38] *** dogbert11 left
[15:09] <Geth> ¦ nqp: 497c2e550e | (Vadim Belman)++ | src/how/NQPClassHOW.nqp

[15:09] <Geth> ¦ nqp: Support for typechecking against Raku roles

[15:09] <Geth> ¦ nqp: 

[15:09] <Geth> ¦ nqp: If a `NQPClassHOW` class get a Raku role mixin then typechecking fails

[15:09] <Geth> ¦ nqp: for complex cases like parameterized roles. By incorporating

[15:09] <Geth> ¦ nqp: `role_typecheck_list` provided by role's HOW we fix the problem.

[15:09] <Geth> ¦ nqp: 

[15:09] <Geth> ¦ nqp: NQP, Rakudo, and roast tests are passing.

[15:09] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/497c2e550e

[15:09] <Geth> ¦ nqp: 717b0442db | (Vadim Belman)++ (committed using GitHub Web editor) | src/how/NQPClassHOW.nqp

[15:09] <Geth> ¦ nqp: Merge pull request #650 from Raku/roast_657_attr_fix

[15:09] <Geth> ¦ nqp: 

[15:09] <Geth> ¦ nqp: Support for typechecking against Raku roles

[15:09] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/717b0442db

[15:13] <Geth> ¦ rakudo: ea0c98cf16 | (Vadim Belman)++ | 3 files

[15:13] <Geth> ¦ rakudo: Rework tools/update-passing-test-data.pl to support backends

[15:13] <Geth> ¦ rakudo: 

[15:13] <Geth> ¦ rakudo: Also improve output formatting, use File::Spec for pathname

[15:13] <Geth> ¦ rakudo: manipulations, and few other improvements.

[15:14] <Geth> ¦ rakudo: 

[15:14] <Geth> ¦ rakudo: rakudo-limited.pl now receives the Rakudo binary to use as its firs

[15:14] <Geth> ¦ rakudo: command line argument.

[15:14] <Geth> ¦ rakudo: 

[15:14] <Geth> ¦ rakudo: Make autounfudge.pl work with updated rakudo-limited.pl

[15:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ea0c98cf16

[15:14] <Geth> ¦ rakudo: 17f7f156a8 | (Vadim Belman)++ (committed using GitHub Web editor) | 3 files

[15:14] <Geth> ¦ rakudo: Merge pull request #3829 from vrurg/roast_657

[15:14] <Geth> ¦ rakudo: 

[15:14] <Geth> ¦ rakudo: Rework tools/update-passing-test-data.pl to support backends

[15:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/17f7f156a8

[15:21] *** JJMerelo joined
[15:36] <JJMerelo> You've probably seen this, but TPF is looking for communication people https://news.perlfoundation.org/post/communication_outreach

[15:36] <JJMerelo> There's also this grant proposal by tony-o++ on a new ecosystem. https://news.perlfoundation.org/post/grant_proprosal_raku_ecosystem

[15:39] *** lichtkind joined
[15:43] <[Coke]> I just added a ton of questions to tony-o's proposal.

[15:45] <JJMerelo> [Coke]++

[15:46] <JJMerelo> [Coke] also, may I interest you in writing something for the 20th aniversary calendar? https://github.com/Raku/advent/tree/master/20th

[15:49] <[Coke]> Probably not, but thank you.

[15:49] *** brrt left
[15:50] *** brrt joined
[16:05] *** brrt left
[16:12] *** sena_kun joined
[16:13] <ugexe> > If this is intended to be the primary ecosystem, why does this need a plugin to zef? -- [Coke]: everything in zef is a plugin/handler basically, so essentially it would be a plugin in that respect. however, what should probably be clarified is the difference between the consumer plugin (what would probably ship with zef by default, although turning it on by default does mean additionally latency, so its

[16:13] <ugexe> not free), but also like a more authoring specific plugin to do things like push new releases to that ecosystem using appropriate auth.

[16:14] *** Altai-man_ left
[16:25] *** squashable6 left
[16:27] *** squashable6 joined
[16:41] *** Kaeipi joined
[16:41] *** dogbert17 joined
[16:44] *** Kaiepi left
[16:45] *** Kaeipi left
[16:47] *** Kaiepi joined
[16:48] *** Kaiepi left
[16:55] *** brrt joined
[17:04] *** JJMerelo left
[17:06] *** brrt left
[17:42] *** domidumont left
[17:43] *** domidumont joined
[17:43] *** domidumont left
[18:12] *** Altai-man_ joined
[18:14] *** sena_kun left
[18:19] *** AlexDaniel joined
[18:20] *** AlexDaniel left
[18:20] *** AlexDaniel joined
[18:34] *** MasterDuke joined
[18:36] *** AlexDaniel left
[18:51] <Geth> ¦ nqp: 755fa3f97c | (Christian Bartolomäus)++ | 3 files

[18:51] <Geth> ¦ nqp: [JVM] Implement op 'execname'

[18:51] <Geth> ¦ nqp: 

[18:51] <Geth> ¦ nqp: This is a bit hacky, but it should enable us to use nqp::execname

[18:51] <Geth> ¦ nqp: in Rakudo's code base uniformly on all backends.

[18:51] <Geth> ¦ nqp: 

[18:51] <Geth> ¦ nqp: Currently we use nqp::jvmgetproperties(){nqp.execname} for NQP

[18:51] <Geth> ¦ nqp: and nqp::jvmgetproperties(){perl6.execname} for Rakudo.

[18:51] <Geth> ¦ nqp: <…commit message has 5 more lines…>

[18:51] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/755fa3f97c

[19:22] *** squashable6 left
[19:23] *** squashable6 joined
[19:49] *** Ven`` joined
[20:13] *** sena_kun joined
[20:14] *** Altai-man_ left
[20:48] *** Kaiepi joined
[20:57] *** Ven`` left
[21:09] *** Ven`` joined
[22:12] *** Altai-man_ joined
[22:14] *** sena_kun left
[22:35] *** Ven`` left
[22:51] <gfldex> raku: my @a = 'a', Empty, 'b'; say @a.keys; for @a { .say }; say @a».item; say @a.map({$_});

[22:51] <evalable6> gfldex, rakudo-moar 17f7f156a: OUTPUT: «(0 1)␤a␤b␤[a b]␤(a b)␤»

[22:53] <gfldex> raku: my @a is default(Empty); @a[0]='a'; @a[2]='b'; say @a.keys; for @a { .say }; say @a».item; say @a.map({$_});

[22:53] <evalable6> gfldex, rakudo-moar 17f7f156a: OUTPUT: «(0 1 2)␤a␤()␤b␤[a b]␤(a b)␤»

[22:54] *** leont left
[22:54] <gfldex> So Empty as a default is handled differently then an Empty in a container in an Array.

[22:54] <gfldex> That is at least an ENODOC.

[22:55] <gfldex> In fact, the docs are not well filled with explanations of Empty.

[22:55] <gfldex> raku: my @a := 'a', Empty, 'b'; say @a.keys; for @a { .say }; say @a».item; say @a.map({$_});

[22:55] <evalable6> gfldex, rakudo-moar 17f7f156a: OUTPUT: «(0 1)␤a␤b␤(a b)␤(a b)␤»

[22:56] <gfldex> raku: my @a := ('a', Empty, 'b'); say @a.keys; for @a { .say }; say @a».item; say @a.map({$_});

[22:56] <evalable6> gfldex, rakudo-moar 17f7f156a: OUTPUT: «(0 1)␤a␤b␤(a b)␤(a b)␤»

[23:05] *** lichtkind left
