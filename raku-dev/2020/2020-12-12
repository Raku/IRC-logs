[02:11] *** sourceable6 left
[02:11] *** bisectable6 left
[02:11] *** benchable6 left
[02:11] *** coverable6 left
[02:11] *** tellable6 left
[02:11] *** evalable6 left
[02:11] *** nativecallable6 left
[02:11] *** quotable6 left
[02:11] *** committable6 left
[02:11] *** notable6 left
[02:11] *** linkable6 left
[02:11] *** bloatable6 left
[02:11] *** squashable6 left
[02:11] *** shareable6 left
[02:11] *** releasable6 left
[02:11] *** statisfiable6 left
[02:11] *** unicodable6 left
[02:11] *** greppable6 left
[02:12] *** bloatable6 joined
[02:12] *** notable6 joined
[02:12] *** quotable6 joined
[02:12] *** greppable6 joined
[02:12] *** unicodable6 joined
[02:12] *** nativecallable6 joined
[02:13] *** bisectable6 joined
[02:13] *** tellable6 joined
[02:13] *** evalable6 joined
[02:13] *** committable6 joined
[02:13] *** linkable6 joined
[02:13] *** coverable6 joined
[02:13] *** sourceable6 joined
[02:13] *** statisfiable6 joined
[02:14] *** releasable6 joined
[02:14] *** squashable6 joined
[02:14] *** benchable6 joined
[02:14] *** shareable6 joined
[04:41] *** leont left
[06:34] *** sena_kun joined
[09:07] *** Altai-man joined
[09:09] *** sena_kun left
[09:50] <lizmat> Files=1346, Tests=117151, 225 wallclock secs (29.93 usr  8.23 sys + 3130.81 cusr 279.92 csys = 3448.89 CPU)

[09:50] <tellable6> 2020-12-11T18:06:34Z #raku-dev <melezhik> lizmat here is the recent rakudo issues covered by RICH https://twitter.com/melezhik2/status/1337457472026587137 so if there is no unit tests for them they are still might be checked by RICH testsa

[10:23] *** patrickb joined
[10:47] *** domidumont joined
[11:39] *** MasterDuke joined
[12:41] *** stoned75 joined
[12:45] <stoned75> hi, I'm considering adding some missing bits to EVAL documentation, and I'm wondering if its :filename paramater default value should be documented. I admit I do not quite understand it.

[12:45] <stoned75> I do not quite understand the following commit :} https://github.com/rakudo/rakudo/commit/1ec4f171dd343441a47a2313f115d116864a39b1 

[12:47] <nine> stoned75: my guess is that this prevents a warning because of an Any being coerced to Str

[12:47] *** Kaiepi left
[12:48] <stoned75> nine: hum. I guess I'll have to experiment to grasp it

[12:49] <Altai-man> m: sub foo(:$a, :$b = Str) { say "$a and $b" }; foo

[12:49] <camelia> rakudo-moar 79b55ac3c: OUTPUT: «Use of uninitialized value element of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤ and ␤  in sub foo at <tmp> line 1␤Use of uninitialized value element of type Str in s…»

[12:49] <Altai-man> m: sub foo(:$a = Str, :$b = Str) { say "$a and $b" }; foo

[12:49] <camelia> rakudo-moar 79b55ac3c: OUTPUT: «Use of uninitialized value element of type Str in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤ and ␤  in sub foo at <tmp> line 1␤Use of uninitialized value element of type Str in s…»

[12:49] <Altai-man> hmm

[12:50] <Altai-man> This is a bad example, because it wants Str:D.

[12:51] <Geth> ¦ rakudo: Altai-man assigned to vrurg Issue Blin 2020.12, round 3 https://github.com/rakudo/rakudo/issues/4108

[12:51] <Altai-man> Consistency is hard.

[12:56] *** Kaiepi joined
[13:08] *** sena_kun joined
[13:10] *** Altai-man left
[13:27] <[TuxCM]> Rakudo v2020.11-126-g79b55ac3c (v6.d) on MoarVM 2020.11-85-g82a34e25a

[13:27] <[TuxCM]> csv-test-xs-20      0.385 -  0.390

[13:27] <[TuxCM]> csv-ip5xs           0.807 -  0.820

[13:27] <[TuxCM]> test-t --race       0.841 -  0.887

[13:27] <[TuxCM]> test-t              1.916 -  1.928

[13:27] <[TuxCM]> test                7.643 -  9.096

[13:27] <[TuxCM]> csv-ip5xs-20        7.934 -  8.198

[13:27] <[TuxCM]> test-t-20 --race    8.922 - 10.116

[13:27] <[TuxCM]> csv-parser         23.883 - 25.531

[13:27] <[TuxCM]> test-t-20          32.835 - 33.230

[13:38] <Geth> ¦ rakudo: 2d5d3bf4a3 | (Elizabeth Mattijsen)++ | src/core.c/array_slice.pm6

[13:38] <Geth> ¦ rakudo: Make @a[*-1] candidates about 60% faster

[13:38] <Geth> ¦ rakudo: 

[13:38] <Geth> ¦ rakudo: By saving 1 Scalar allocation per call.

[13:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2d5d3bf4a3

[13:40] <lizmat> afk for a few hours&

[13:50] <Geth> ¦ nqp: 994107012d | (Christian Bartolomäus)++ | 2 files

[13:50] <Geth> ¦ nqp: [JVM] Align behaviour for NQP hash to MoarVM

[13:50] <Geth> ¦ nqp: 

[13:50] <Geth> ¦ nqp: The JVM backend now throws for certain operations on hashes in

[13:50] <Geth> ¦ nqp: the same way as MoarVM:

[13:50] <Geth> ¦ nqp: 

[13:50] <Geth> ¦ nqp: * Iterating past the end of the iterator dies with "Iteration past

[13:50] <Geth> ¦ nqp:   end of iterator" instead of throwing a NoSuchElementException.

[13:50] <Geth> ¦ nqp: 

[13:50] <Geth> ¦ nqp: * Before starting to iterate and after reaching the end of the

[13:50] <Geth> ¦ nqp:   iterator, trying to access key or value gives a sane error message.

[13:50] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/994107012d

[13:50] <Geth> ¦ nqp: 021853592c | (Jonathan Worthington)++ (committed using GitHub Web editor) | 2 files

[13:50] <Geth> ¦ nqp: Merge pull request #683 from usev6/jvm_vmhash_exceptions

[13:50] <Geth> ¦ nqp: 

[13:50] <Geth> ¦ nqp: [JVM] Align behaviour for NQP hash to MoarVM

[13:50] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/021853592c

[13:50] *** b2gills left
[14:09] *** leont joined
[14:49] *** b2gills joined
[15:43] <nwc10> cool, thanks. That was somewhere on my list of "things to investigate and try to implement", but it didn't reach the top yet

[16:20] *** domidumont left
[16:23] *** stoned75 left
[16:27] *** domidumont joined
[16:28] *** stoned75 joined
[16:50] <Geth> ¦ nqp: eb4173a365 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[16:50] <Geth> ¦ nqp: Bump MoarVM to get the latest fixes

[16:50] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/eb4173a365

[16:53] <nwc10> nine: as someone who appears to be an even more dilligent tank watcher than I am...

[16:53] <nwc10> on https://www.youtube.com/watch?v=n5ozYnVQahE the crane is back. Apparently slowly, overnight.

[16:53] <nwc10> *I* am confused, and I can't find it referenced anywhere

[16:54] <nwc10> it went from the production site (where it is again now) to the lauch site some weeks ago, on the transporter, slowly, with the long pause.

[16:54] <nwc10> It stacked the nosecone of SN8

[16:54] <nwc10> about a week later it came back

[16:54] <nwc10> then somehow it warped itself back (back) to the launch site

[16:54] <nwc10> and I find no reference to that third move.

[16:54] <nwc10> and I'm confused.

[16:54] <nwc10> you can't sneak a crane like that around.

[16:54] <nwc10> (even if it has 2 (or more) names)

[17:00] <Geth> ¦ rakudo: c63f078a2f | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[17:00] <Geth> ¦ rakudo: Bump NQP to get latest NQP/MoarVM goodies

[17:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c63f078a2f

[17:07] *** Altai-man joined
[17:08] <Geth> ¦ nqp: d35e5061bc | Coke++ | docs/ops.markdown

[17:08] <Geth> ¦ nqp: Document setdebugtypename op

[17:08] <Geth> ¦ nqp: 

[17:08] <Geth> ¦ nqp: nine++

[17:08] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/d35e5061bc

[17:09] <[Coke]> nwc10: it just respawned, don't worry about it

[17:09] <nwc10> :-)

[17:09] * [Coke] finds a TODO from over a week ago with a note from nine about how an opcode works

[17:09] <[Coke]> s/finds/found/

[17:10] *** sena_kun left
[17:12] <Geth> ¦ nqp: a3e5e0baa5 | Coke++ | docs/ops.markdown

[17:12] <Geth> ¦ nqp: fix typo.

[17:12] <Geth> ¦ nqp: 

[17:12] <Geth> ¦ nqp: :(

[17:12] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/a3e5e0baa5

[17:15] <stoned75> I'm trying to understand the relationship between $?FILES and $?FILE, if there is any, can someone point to a relevant piece of code ? so far I've been lost

[17:16] <stoned75> *point me

[17:16] <nine> nwc10: SN9 toppled: https://www.youtube.com/watch?v=aIoEQwCVEtE&t=335s

[17:20] <nwc10> yes, that I know. (Sorry, wasn't clear)

[17:20] <nwc10> that's why the crane is back (trip 4)

[17:21] <nwc10> it's trip 3 I can't find reference to. And I watched a bit of trip 2 live, so I know that trip 2 happened.

[17:21] <nwc10> meanwhile, NFS is fun.

[17:28] <stoned75> ah! found it in Perl6::World.current_file

[17:54] <Geth> ¦ nqp/atime-with-atime: f7be5c5932 | (Nicholas Clark)++ | t/nqp/019-file-ops.t

[17:54] <Geth> ¦ nqp/atime-with-atime: floating point atime should be compared with integer atime, not mtime.

[17:54] <Geth> ¦ nqp/atime-with-atime: 

[17:54] <Geth> ¦ nqp/atime-with-atime: Similarly ctime with ctime, not mtime.

[17:54] <Geth> ¦ nqp/atime-with-atime: 

[17:54] <Geth> ¦ nqp/atime-with-atime: This appears to be a copy-paste thinko that dates back to when the test was

[17:54] <Geth> ¦ nqp/atime-with-atime: originally added in 2016 by commit 37862cd52d63eb61:

[17:54] <Geth> ¦ nqp/atime-with-atime:     Add subsecond file time ops stat_time and lstat_time

[17:54] <Geth> ¦ nqp/atime-with-atime: review: https://github.com/Raku/nqp/commit/f7be5c5932

[17:54] <Geth> ¦ nqp: nwc10++ created pull request #688: floating point atime should be compared with integer atime, not mtime.

[17:54] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/688

[17:56] *** morayj joined
[17:57] <nwc10> gah, the github interface won't let me assign the original culprit as a reviewer :-)

[18:09] <nwc10> nine: fun! excitement! crane jib inside highbay! (one out of three is correct)

[18:23] *** morayj left
[18:34] <nine> If it continues like this, I'll have to find another - calmer - channel :D

[18:35] <nwc10> the live stream is about as exciting as watching paint dry. That should be calm enough for you?

[18:35] *** domidumont left
[18:38] <nwc10> otherwise, try compiling the setting running under valgrind, and watch that?

[18:39] <nine> Or run spectests with GC_DEBUG = 3. Takes more than a week

[18:39] <nwc10> oh gee, yes.

[18:39] <nwc10> IIRC setting took over 24 hours with that

[18:40] <nine> I've never committed the patch that makes it _really_ slow though :D

[18:40] <nine> The one where instead of 2 you get 15 nurseries

[18:41] <nwc10> that might actually be useful as smoething to conditionally enable

[18:41] <nwc10> I know that I hacked in something like that 4 or 5 years ago

[18:41] <nwc10> but I can't remember exactly what I did

[18:42] <nine> It catches cases where with GC_DEBUG=3 something would get promoted to gen2 before someone even makes the unprotected copy of a pointer

[18:44] <nine> https://github.com/MoarVM/MoarVM/commit/9d468afcaf21b01a85126142c758674d9f5b579c

[18:45] <nine> It's....super pretty

[18:47] *** leont left
[18:52] *** Altai-man left
[18:54] *** sena_kun joined
[20:49] <Geth> ¦ roast: ad6b636c41 | (Christian Bartolomäus)++ | S09-typed-arrays/native-num.t

[20:49] <Geth> ¦ roast: [JVM] Fudge tests that expect specific error

[20:49] <Geth> ¦ roast: 

[20:49] <Geth> ¦ roast: The expected error message has been changed recently (1a84eefa47).

[20:49] <Geth> ¦ roast: The new (more specific) error message stems from dedicated multi

[20:49] <Geth> ¦ roast: candidates for 'sub postcircumfix:<[ ]>'.

[20:49] <Geth> ¦ roast: 

[20:49] <Geth> ¦ roast: On the JVM backend these multi candidates are not used, because

[20:49] <Geth> ¦ roast: some of them cause spectest failures, compare

[20:49] <Geth> ¦ roast: * https://github.com/rakudo/rakudo/commit/60fa48ec8f

[20:49] <Geth> ¦ roast: * https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-12-06#l67

[20:49] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ad6b636c41

[21:07] *** Altai-man joined
[21:10] *** sena_kun left
[21:14] *** stoned75 left
[21:25] *** stoned75 joined
[21:49] *** Geth left
[21:49] *** Geth joined
[22:03] *** Altai-man left
[22:07] *** patrickb left
[22:56] *** stoned75 left
[23:20] *** finsternis left
