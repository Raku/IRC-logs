[00:26] *** frost-lab joined
[01:28] *** lucasb left
[01:44] *** frost-lab left
[02:02] *** leont left
[03:15] *** frost-lab joined
[04:44] *** frost-lab left
[07:43] *** domidumont joined
[07:49] *** patrickb joined
[07:52] *** frost-lab joined
[08:09] *** sena_kun joined
[08:11] *** Altai-man joined
[08:14] *** sena_kun left
[08:48] *** leont joined
[09:52] <lizmat> Files=1345, Tests=117140, 232 wallclock secs (30.52 usr  8.89 sys + 3202.49 cusr 304.86 csys = 3546.76 CPU)

[12:12] *** sena_kun joined
[12:13] *** Altai-man left
[12:31] *** frost-lab left
[13:16] <lizmat> m: role a[|c] { dd c }; a[42].new   # why is the role body run twice ?

[13:16] <camelia> rakudo-moar 1801a5aa3: OUTPUT: «\(42)␤\(42)␤»

[13:16] <lizmat> m: role a[|c] { dd c }; a.new   # and not in this case ?

[13:16] <camelia> rakudo-moar 1801a5aa3: OUTPUT: «\()␤»

[13:17] <lizmat> m: role a[|c] { dd c }; a[:foo].new   # and not in this case either ?

[13:17] <camelia> rakudo-moar 1801a5aa3: OUTPUT: «\(:foo)␤»

[13:24] <lizmat> bisectable6: role Foo[|c] { dd c }; Foo[42].new

[13:24] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[13:25] <bisectable6> lizmat, Output on all releases: https://gist.github.com/0a62bbed57cca477bbde43ed50acf764

[13:25] <bisectable6> lizmat, Bisecting by output (old=2019.03.1 new=2019.07.1) because on both starting points the exit code is 0

[13:25] <bisectable6> lizmat, bisect log: https://gist.github.com/cb482563fcb22a3ff65312b5abebe666

[13:25] <bisectable6> lizmat, (2019-06-07) https://github.com/rakudo/rakudo/commit/41f6f9eaae8477a4955fb468d9a52ae6dff208b3

[13:25] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/289c031afe5da8ec71bdcbf27b06e634

[14:12] <Xliff> lizmat: Any thoughts on this https://gist.github.com/Xliff/f4af67ed380d1024a19d68975e4ed759

[14:12] <Xliff> It was done a while ago, just now circling back to it.

[14:13] <Xliff> That code will add the default value to USAGE output.

[14:13] <lizmat> yeah, please make a PR so more people can eye it  :-)

[14:13] <Xliff> Sure thing.

[14:13] <lizmat> and be properly credited when it's merged

[14:13] <lizmat> afk for a few hours&

[14:31] *** squashable6 left
[14:31] <[Tux]> Rakudo v2020.11-37-g1801a5aa3 (v6.d) on MoarVM 2020.11-25-gf3e9e356d

[14:31] <[Tux]> csv-test-xs-20      0.385 -  0.391

[14:31] <[Tux]> test-t --race       0.844 -  0.879

[14:31] <[Tux]> csv-ip5xs           0.814 -  0.879

[14:31] <[Tux]> test-t              1.855 -  1.886

[14:31] <[Tux]> csv-ip5xs-20        7.790 -  7.835

[14:31] <[Tux]> test                7.833 -  7.854

[14:31] <[Tux]> test-t-20 --race    9.894 - 10.109

[14:31] <[Tux]> csv-parser         26.694 - 27.047

[14:31] <[Tux]> test-t-20          32.346 - 32.758

[14:33] *** squashable6 joined
[14:38] *** lucasb joined
[14:44] *** Xliff left
[14:45] *** Xliff joined
[15:20] *** Xliff left
[16:11] *** Altai-man joined
[16:14] *** sena_kun left
[16:45] *** b2gills joined
[17:00] *** MasterDuke left
[17:25] <AlexDaniel`> 6c: multi sub foo($x where /{say ‘hello’}4/) { say $/ }; multi sub foo($x where /{say ‘world’}9/) { say $/ }; foo 9

[17:25] <committable6> AlexDaniel`, ¦6c (49 commits): «hello␤hello␤world␤world␤｢9｣␤»

[17:25] <AlexDaniel`> okay

[17:57] <Geth> ¦ rakudo: eabdee4868 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[17:57] <Geth> ¦ rakudo: Integrate iterator variable increment into conditional

[17:57] <Geth> ¦ rakudo: 

[17:57] <Geth> ¦ rakudo: So its value need only to be fetched once instead of twice.  Not

[17:57] <Geth> ¦ rakudo: sure wheter this will actually affect compilation or runtime, but

[17:57] <Geth> ¦ rakudo: there's hoping...

[17:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eabdee4868

[18:03] *** Kaeipi left
[18:10] *** domidumont left
[18:23] *** domidumont joined
[18:52] *** morayj joined
[19:27] *** domidumont left
[19:32] <Geth> ¦ rakudo: 6852f40d2a | (Elizabeth Mattijsen)++ | 5 files

[19:32] <Geth> ¦ rakudo: Make a lot of integers native in NQP code

[19:32] <Geth> ¦ rakudo: 

[19:32] <Geth> ¦ rakudo: They're about 4x as fast in NQP for loops and so on.  Probably also

[19:32] <Geth> ¦ rakudo: should do this for all the places where integer values are used as

[19:32] <Geth> ¦ rakudo: flags.

[19:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6852f40d2a

[19:35] <lizmat> looks like it is even more:

[19:35] <lizmat> $ time nqp -e 'my $i := 0; while ++$i < 100000000 { }'

[19:35] <lizmat> real	0m1.715s

[19:36] <lizmat> $ time nqp -e 'my int $i := 0; while ++$i < 100000000 { }'

[19:36] <lizmat> real	0m0.162s

[19:36] <lizmat> afk for a few hours&

[19:40] *** MasterDuke joined
[20:12] *** sena_kun joined
[20:13] *** Altai-man left
[20:49] *** morayj left
[20:50] *** morayj joined
[21:10] *** morayj left
[21:20] *** samebchase- left
[21:21] *** samebchase- joined
[21:21] *** leont_ joined
[21:24] *** leont left
[21:25] *** MasterDuke left
[22:09] *** sena_kun left
[22:22] *** patrickb left
