[00:02] *** sena_kun joined
[00:04] *** Altai-man_ left
[02:01] *** Altai-man_ joined
[02:04] *** sena_kun left
[04:02] *** sena_kun joined
[04:04] *** Altai-man_ left
[04:16] *** softmoth joined
[04:18] *** Xliff left
[06:01] *** Altai-man_ joined
[06:04] *** sena_kun left
[06:05] *** stoned75 left
[06:07] *** stoned75 joined
[06:38] *** softmoth left
[07:45] <Altai-man_> lizmat, https://gist.github.com/Altai-man/9f03261ba07b7f7fe645a1e19e14665e

[08:03] *** sena_kun joined
[08:04] *** Altai-man_ left
[08:30] <[Tux]> Rakudo version 2020.06-16-gc7c18c214 - MoarVM version 2020.06-20-g187b4564e

[08:30] <[Tux]> csv-test-xs-20      0.394 -  0.460

[08:30] <[Tux]> csv-ip5xs           0.817 -  0.915

[08:30] <[Tux]> test-t --race       0.923 -  0.942

[08:30] <[Tux]> test-t              1.910 -  2.349

[08:30] <[Tux]> test                7.844 -  9.455

[08:30] <[Tux]> csv-ip5xs-20        8.027 -  9.141

[08:30] <[Tux]> test-t-20 --race    9.843 -  9.968

[08:30] <[Tux]> csv-parser         28.648 - 29.266

[08:30] <[Tux]> test-t-20          31.761 - 35.645

[09:32] * lizmat decides to abandon the match-refactor branch for now

[09:33] <lizmat> the wins to be had, have become to small to warrant the potential ecosystem breakage

[09:34] <lizmat> if any optimizations are possible, they should be started from the ground up, aka in NQP

[09:34] <lizmat> either that, or rewrite the regex engine in Raku

[09:36] <lizmat> in any case, this has caused me enough aggrevation

[09:38] <lizmat> for now, anyway

[09:47] <sena_kun> lizmat, the research and efforts are admirable anyway.

[09:48] <lizmat> ah, yes, I learned a lot about that part of the internals  :-)

[09:48] <lizmat> sadly, also that it is still very much in the state of "making it work" :-(

[09:49] <sena_kun> lizmat, maybe picking up some bugs on the easier side can light the mood up? :)

[09:51] <lizmat> perhaps... 

[09:51] <lizmat> had something in mind?

[09:53] <sena_kun> Not really, just thinking we have a lot of plain "something doesn't work here" type of bugs and from my experience, taking something and resolving it gives some "Oh, cool, I did it" satisfaction, especially when you spent a lot of time into something which is hard.

[10:01] *** Altai-man_ joined
[10:04] *** sena_kun left
[10:24] <gfldex> how does Rakudo tell if a sinkee is actually a sinkee and how does it decide to sink?

[10:25] <gfldex> I link the the code in question would be really nice. I need that for my next blog post.

[10:26] <gfldex> s/I link the/A link to/

[10:26] * gfldex seeks coffee

[10:44] <lizmat> gfldex: I think you need to look for WANTED annotations in the grammar

[12:02] *** sena_kun joined
[12:04] *** Altai-man_ left
[12:35] <Geth> ¦ rakudo: 1a91af8cd2 | (Elizabeth Mattijsen)++ | 2 files

[12:35] <Geth> ¦ rakudo: Give Supply.tail its own candidate

[12:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1a91af8cd2

[12:53] <Geth> ¦ rakudo: 9ccfc90edb | (Elizabeth Mattijsen)++ | src/core.c/Supply-coercers.pm6

[12:53] <Geth> ¦ rakudo: Add support for Supply.tail(*) and .tail(Inf)

[12:53] <Geth> ¦ rakudo: 

[12:53] <Geth> ¦ rakudo: These appear to have been forgotten before.

[12:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9ccfc90edb

[12:58] <Geth> ¦ rakudo: eaa72afa15 | (Elizabeth Mattijsen)++ | src/core.c/Supply-coercers.pm6

[12:58] <Geth> ¦ rakudo: Add support for Supply.tail(*-3)

[12:58] <Geth> ¦ rakudo: 

[12:58] <Geth> ¦ rakudo: Apparently this was also forgotten before

[12:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eaa72afa15

[13:01] <Geth> ¦ roast: f18782f5ae | (Elizabeth Mattijsen)++ | S17-supply/tail.t

[13:01] <Geth> ¦ roast: Add Supply.tail tests for new features

[13:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f18782f5ae

[13:05] *** linkable6 joined
[13:07] *** evalable6 joined
[13:23] *** lucasb joined
[13:45] <gfldex> Is there any way to set an attribute without a public write accessor? I'm willing to decent into nqp-land.

[13:46] <sena_kun> gfldex, MOP

[13:47] <gfldex> I tried that and failed. Any pointers?

[13:47] <gfldex> Well, what I actually need is Proc::Async.w to be writeable, at least until .start is called.

[13:48] <sena_kun> m: class A { has $!a = 50; method a { say $!a } }; my $a = A.new; my $attr = $a.^attributes[0]; $attr.set_value($a, 42); $a.a;

[13:48] <camelia> rakudo-moar eaa72afa1: OUTPUT: «42␤»

[13:48] <gfldex> The proper way does not work because .start_internal is calling native-descriptor and a custom IO::Handle does not have one.

[13:48] <sena_kun> Remember I did not show you this

[13:48] <gfldex> sena_kun: thanks a lot

[13:49] <sena_kun> gfldex, maybe it's better to defer the Proc::Async creation until you know for sure the value of w you want?

[13:49] <sena_kun> I assume using this for Proc::Async can cause serious problems, because you are likely break assumptions of setup and such.

[13:50] <gfldex> I can't really do that because I want to let the user handle Proc::Async by hand.

[13:50] <sena_kun> Hmm, pseudo-code?

[13:51] <gfldex> it only checks for it in start_internal and then sets up a callback. 

[13:51] <gfldex> I tried to follow https://docs.raku.org/type/IO::Handle#Creating_Custom_Handles to feed an array into a Proc::Async.

[13:52] <sena_kun> Then this changes next release and it explodes like fireworks. :(

[13:52] <sena_kun> Hmmmm.

[13:52] <gfldex> As soon as I $proc.bind-stdin with that custom Handle, it tried to hand over a native file descriptor over to Moar-land.

[13:53] <gfldex> A custom IO::Handle doesn't got a native descriptor.

[13:53] <gfldex> So there is a Rakudobug somewhere. I'm fine with a workaround for now.

[13:53] <sena_kun> Not sure I can be of any help here. I'd still suggest to ask for problem A first unless you done that already.

[14:02] *** Altai-man_ joined
[14:05] *** sena_kun left
[14:15] <gfldex> Workaround works. :)

[14:58] *** softmoth joined
[15:20] *** softmoth left
[16:02] *** sena_kun joined
[16:04] *** Altai-man_ left
[16:26] <gfldex> raku: class E is Exception { method message { "E" } }; CATCH { when E { say .message; .resume } }; E.new.throw;

[16:26] <evalable6> gfldex, rakudo-moar eaa72afa1: OUTPUT: «(exit code 1) E␤Cannot find method 'sink' on 'BOOTException': no method cache and no .^find_method␤  in block <unit> at /tmp/W5hVcpkAn6 line 1␤␤»

[16:28] <gfldex> roast seams not to test .resume outside of CONTROL

[16:28] <gfldex> is that intentional?

[16:34] <lizmat> probably an oversight

[16:54] *** JJMerelo joined
[17:12] <gfldex> raku: say $*RAKU.compiler.version;

[17:12] <evalable6> gfldex, rakudo-moar eaa72afa1: OUTPUT: «v2020.06.19.geaa.72.afa.1␤»

[17:16] <gfldex> files as #3777

[17:43] <Geth> ¦ rakudo: 5c8c7324e6 | (Elizabeth Mattijsen)++ | src/core.c/Supply-coercers.pm6

[17:43] <Geth> ¦ rakudo: Fix Supply.head(*-3)

[17:43] <Geth> ¦ rakudo: 

[17:43] <Geth> ¦ rakudo: - makes it consistent with List.head(*-3)

[17:43] <Geth> ¦ rakudo: - fixes R#3746

[17:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5c8c7324e6

[17:43] <linkable6> R#3746 [open]: https://github.com/rakudo/rakudo/issues/3746 difference of behavior for List.head and Supply.head

[17:44] <Geth> ¦ roast: c4e8458bb6 | (Elizabeth Mattijsen)++ | S17-supply/head.t

[17:44] <Geth> ¦ roast: Adapt Supply.head(*-3) tests to correct semantics

[17:44] <Geth> ¦ roast: 

[17:44] <Geth> ¦ roast: Because of fixing R#3746

[17:44] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c4e8458bb6

[18:02] *** Altai-man_ joined
[18:05] *** sena_kun left
[18:15] *** maggotbrain joined
[19:03] *** softmoth joined
[19:04] <Geth> ¦ rakudo: 70e5cfb982 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[19:04] <Geth> ¦ rakudo: Make sure that Any:U.head/tail work

[19:04] <Geth> ¦ rakudo: 

[19:04] <Geth> ¦ rakudo: This seems to be implied by Any:U.skip working, and a recent change

[19:04] <Geth> ¦ rakudo: broke a spectest about that.  Now, this breaks tests for Supply:U.head

[19:04] <Geth> ¦ rakudo: and Supply:U.tail, but given the discussion about Any:U.skip in R#1384,

[19:04] <Geth> ¦ rakudo: it looks to me that those tests are in error.

[19:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/70e5cfb982

[19:04] <linkable6> R#1384 [closed]: https://github.com/rakudo/rakudo/issues/1384 Any.skip fails when trying to use a WhateverCode

[19:05] <Geth> ¦ roast: 307d40846b | (Elizabeth Mattijsen)++ | 2 files

[19:05] <Geth> ¦ roast: Remove tests given discussion in R#1384

[19:05] <Geth> ¦ roast: 

[19:05] <Geth> ¦ roast: After the change in https://github.com/rakudo/rakudo/commit/70e5cfb982

[19:05] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/307d40846b

[19:09] <Geth> ¦ rakudo: 056d6a4e9d | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[19:09] <Geth> ¦ rakudo: Add Str.naive-word-wrapper (implementation detail)

[19:09] <Geth> ¦ rakudo: 

[19:09] <Geth> ¦ rakudo: - to be used internally when texts need to be wrapped for a given length

[19:09] <Geth> ¦ rakudo: - specifically intended for Exception.message output

[19:09] <Geth> ¦ rakudo: - but may have other uses internally

[19:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/056d6a4e9d

[19:20] *** stoned75 left
[19:22] *** stoned75 joined
[19:37] <gfldex> raku: class Sinker { method FALLBACK($name, |c) { say "$name can not be sink" } }; Sinker.new

[19:37] <evalable6> gfldex, rakudo-moar 056d6a4e9: OUTPUT: «»

[19:38] <gfldex> This is either an ENODOC or a Rakudobug. I'm undecided which it is.

[19:39] <moritz> in terms of optimizability, I vote for ENODOC

[19:40] <gfldex> good point

[19:42] <lizmat> m: dd Mu.can("sink")

[19:42] <camelia> rakudo-moar 056d6a4e9: OUTPUT: «(method sink (Mu: *%_ --> Nil) { #`(Method|68300528) ... },)␤»

[19:42] <lizmat> so, not sure how that is ever going to call FALLBACK ?

[19:43] <gfldex> that Mu.^methods shadows FALLBACK is also an ENODOC

[19:44] <gfldex> well, it is implicit but implicit docs aint nice

[19:45] <lizmat> gfldex: perhaps https://modules.raku.org/dist/InterceptAllMethods:cpan:ELIZABETH is what you want / need ?

[19:46] <gfldex> I don't really need FALLBACK right now. Just asking so I can update my private versions of the docs.

[19:50] <dogbert17> m: <a b c d>.permutations for ^3000; say now - INIT now

[19:50] <camelia> rakudo-moar 056d6a4e9: OUTPUT: «4.774243␤»

[19:50] <dogbert17> m: <a b c d>.permutations for ^6000; say now - INIT now

[19:50] <camelia> rakudo-moar 056d6a4e9: OUTPUT: «13.091292␤»

[19:51] <dogbert17> lizmat: any theories as to why this is happening?

[19:51] <lizmat> that is indeed... odd

[19:51] <timotimo> is it holding on to all the results?

[19:51] <moritz> increased GC pressure? But that shouldn't make such a difference

[19:52] <dogbert17> if I run with ^9000 I'm sure it will timeout

[19:52] <timotimo> the memory usage goes up when you increase the amount

[19:52] <dogbert17> rss goes up at the very least

[19:53] <lizmat> ooo...the --profile on <a b c d>.permutations for ^1000 is *yuck*

[19:53] <dogbert17> which means ...

[19:54] <lizmat> it's weird

[19:56] <lizmat> permutations is like the 20th entry

[19:56] <dogbert17> heh

[19:56] <lizmat> with .5% exclusive CPU usage

[19:56] <lizmat> wtf ?

[19:56] <dogbert17> so something fishy is going on

[19:57] <lizmat> publish_method_cache for *each* call

[19:57] <lizmat> 43x add_method for each call

[19:57] <lizmat> 2x compute_mro for each call

[19:57] <dogbert17> sounds a bit overkill :)

[19:57] <moritz> sounds like a 'but' or 'does' inix op

[19:57] <moritz> *infix

[19:58] <timotimo> i'm looking at the thing in the heap analyzer

[19:59] <lizmat> delegate-iterator-opt-methods ??

[20:00] <dogbert17> combinations behaves more like I would expect when I increase the number of iterations 

[20:01] <timotimo> there's boatloads of frames of Metamodel's "specialize", NQPCORE's "protect", an <anon> at Metamodel.nqp:3268, and specialize_with (Metamodel.nqp:3308) and specialize (Metamodel.nqp:3507) have fewer instances of them

[20:01] <moritz> could this be related to role punning?

[20:02] <timotimo> https://gist.github.com/timo/0bf3d722979efd007c76e325eaa98746 - this look interesting to you at all?

[20:02] <lizmat> since <a b c d> produces a PredictiveIterator, it does this:         nqp::istype(a,PredictiveIterator)

[20:02] <lizmat>           ?? b.^mixin(DelegateCountOnly[a])

[20:02] <lizmat>           !! b

[20:02] *** sena_kun joined
[20:03] <lizmat> and then goes into metamodelland

[20:04] <lizmat> fortunately, permutations is the only place where it's used

[20:04] *** Altai-man_ left
[20:08] <timotimo> so this fixup list thing has about 1.7k entries that are all Block objects

[20:10] <dogbert17> according to valgrind the 'still reachable' category increases if the iteration count is increased

[20:21] <lizmat> ok, interesting conundrum: taking out that optimization, makes combinations much, much faster

[20:21] <lizmat> but alas, it fails the count-only test in t/08-performance

[20:23] <dogbert17> so removing an 'optimization' made things much faster

[20:24] <lizmat> *except* the count-only case

[20:25] <dogbert17> true

[20:27] <dogbert17> I suspect the speedup was quite noticable though

[20:29] <lizmat> for the count-only case, yes, the difference between providing a result, or waiting to the heat death of the universe

[20:30] <dogbert17> a conundrum indeed

[20:30] <lizmat> nah, just needs to be optimized differently

[20:31] <dogbert17> I still find it a bit odd that it didn't scale linearly

[20:34] <lizmat> that's because it leaked like hell

[20:35] <dogbert17> aha, so it's not only slow but buggy as well then

[20:35] <lizmat> well, the bug is in the ^mixin logic, I'd say

[20:36] <dogbert17> sounds like you have an idea as to where the problem is hiding :)

[20:38] <timotimo> .^mixin is supposed to go through the cache, right?

[20:38] <lizmat> timotimo: guess so, but it's not caching

[20:39] <lizmat> look at the profile of this: <a b c d>.permutations for ^500

[20:39] <timotimo> i see it hold on to boatloads of closures in this FixupList thing

[20:39] <lizmat> it's orange and red all over

[20:39] <timotimo> is there a decont missing somewhere perhaps?

[20:39] <timotimo> so it's using the identity of a scalar instead of the value inside it or whatever?

[20:40] * lizmat haz no clue

[20:46] <lizmat> permutations fix coming up

[20:48] <dogbert17> ++lizmat

[20:52] <lizmat> let's see if this fix spectests ok

[21:00] *** softmoth left
[21:06] <lizmat> looks like the fix borks combinations

[21:06] <lizmat> hmmm

[21:22] <sena_kun> releasable6, status

[21:22] <releasable6> sena_kun, Next release in ≈13 days and ≈21 hours. There are no known blockers. Changelog for this release was not started yet

[21:22] <releasable6> sena_kun, Details: https://gist.github.com/9e0b4c2b4cd1139a8048124145ff8418

[21:26] <Geth> ¦ rakudo: 682a4d4f59 | (Elizabeth Mattijsen)++ | 2 files

[21:26] <Geth> ¦ rakudo: Make <a b c d>.permutations between 23 and 85x faster

[21:26] <Geth> ¦ rakudo: 

[21:26] <Geth> ¦ rakudo: When running that code 2000x.

[21:26] <Geth> ¦ rakudo: 

[21:26] <Geth> ¦ rakudo: Turns out that an optimization that mixed in a role into the given

[21:26] <Geth> ¦ rakudo: iterator (in case of a PredictiveIterator) somehow had *very* adverse

[21:26] <Geth> ¦ rakudo: efficiency effects.  The goal of the optimization was to provide a

[21:26] <Geth> ¦ rakudo: <…commit message has 11 more lines…>

[21:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/682a4d4f59

[21:26] <lizmat> dogbert17 ^^

[21:32] <dogbert17> lizmat++ very cool

[21:33] <Geth> ¦ roast: 88c61eba77 | (Elizabeth Mattijsen)++ | MISC/bug-coverage.t

[21:33] <Geth> ¦ roast: Fix erroneous test

[21:33] <Geth> ¦ roast: 

[21:33] <Geth> ¦ roast: Not sure what was intended, but this feels what it should be.

[21:33] <Geth> ¦ roast: 

[21:33] <Geth> ¦ roast: Problem was uncovered after:

[21:33] <Geth> ¦ roast:   https://github.com/rakudo/rakudo/commit/682a4d4f59

[21:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/88c61eba77

[21:35] <dogbert17> impressive improvement

[21:46] *** Xliff joined
[21:46] <Xliff> I have an old rakudo repo I've recently revived. How can I reset the repo to get the right version number for rakudo?

[21:49] <lizmat> Xliff: not sure I understand ?

[21:50] <Geth> ¦ rakudo: eb589c031d | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[21:50] <Geth> ¦ rakudo: Word-wrap X::SecurityPolicy::Eval message

[21:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eb589c031d

[21:52] *** softmoth joined
[21:53] <Xliff> liz: raku's version number is wrong. How can I reset it?

[21:53] <Xliff> I just updated the repository, yet --version is returnning something from 2020.02

[21:53] <lizmat> m: dd $*RAKU.compiler.version

[21:53] <camelia> rakudo-moar 682a4d4f5: OUTPUT: «v2020.06.23.g.682.a.4.d.4.f.5␤»

[21:54] <lizmat> Xliff: good question

[21:54] <Xliff> Rakudo version 2020.02.1-723-g056d6a4e9 built on MoarVM version 2020.06-14-g5832b2628

[21:54] <lizmat> feels more like a git issue, that moritz timotimo jnthn would be able to help you with better ?

[21:54] <Xliff> I'm thinking my last "stash apply" may have kept some kruft.

[21:55] <Xliff> k

[21:55] <Xliff> jnthn sena_kun timotimo: How can I reset the version number of the raku executable?

[21:59] <dogbert17> m: say sum(1,2,3,4,5,6,7,8,9)

[21:59] <camelia> rakudo-moar 682a4d4f5: OUTPUT: «45␤»

[21:59] <dogbert17> m: say (1,2,3,4,5,6,7,8,9).sum

[21:59] <camelia> rakudo-moar 682a4d4f5: OUTPUT: «45␤»

[21:59] <dogbert17> are these two equivalent?

[22:00] <dogbert17> because there seems to be a bit a perf. difference here

[22:00] <dogbert17> *of

[22:01] <lizmat> how much?

[22:01] <dogbert17> m: (1,2,3,4,5,6,7,8,9).sum for ^1000000; say now - INIT now

[22:01] <camelia> rakudo-moar 682a4d4f5: OUTPUT: «1.0506641␤»

[22:01] <dogbert17> m: sum(1,2,3,4,5,6,7,8,9) for ^1000000; say now - INIT now

[22:01] <camelia> rakudo-moar 682a4d4f5: OUTPUT: «9.6384852␤»

[22:01] <dogbert17> like so :)

[22:01] *** Altai-man_ joined
[22:02] <dogbert17> perhaps that's ok but it's not obvious to me why the difference should be that large

[22:03] <lizmat> that's basically the slurpy overhead in sub sum() and then calling List.sum ?

[22:03] <lizmat> you *are* doing it 1M times

[22:04] *** sena_kun left
[22:04] <dogbert17> yes :)

[22:05] <dogbert17> I might have made a mistake here

[22:05] <dogbert17> m: sum((1,2,3,4,5,6,7,8,9)) for ^1000000; say now - INIT now # this is better

[22:05] <camelia> rakudo-moar 682a4d4f5: OUTPUT: «1.0405195␤»

[22:06] <dogbert17> now the times matches a lot better

[22:06] <Xliff> ./gen/moar/rakudo.nqp:6:    $config<version>          := '2020.02.1-723-g056d6a4e9';

[22:06] <Xliff> Where is $config populating $config<version> ?

[22:06] <lizmat> perl Configure.pl --gen-moar ?

[22:09] <Xliff> lizmat: LOL! That was the first thing I did!

[22:10] <lizmat> then I haz no idea

[22:10] <Xliff> ROFLMAO

[22:10] <Xliff> I use "haz" alot, too! :)

[22:15] <Geth> ¦ rakudo: 1b84e03626 | (Elizabeth Mattijsen)++ | 2 files

[22:15] <Geth> ¦ rakudo: Wordwrap X::Method::NotFound message

[22:15] <Geth> ¦ rakudo: 

[22:15] <Geth> ¦ rakudo: Also tweak related Pair.ACCEPTS wording.

[22:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1b84e03626

[22:26] <lizmat> m: for ^100 { my $a = 42; $a but False }   # mixin code bloat golfed jnthn timotimo 

[22:26] <camelia> rakudo-moar eb589c031: ( no output )

[22:28] <Geth> ¦ rakudo: 3cb29a03bd | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[22:28] <Geth> ¦ rakudo: Wordwrap X::Buf::AsStr message

[22:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3cb29a03bd

[22:28] <lizmat> and that concludes my hacking for today&

[22:33] <dogbert17> good night lizmat

[23:06] <MasterDuke> Xliff: did you `git pull --tags`?

[23:26] *** vrurg left
[23:27] *** vrurg joined
[23:41] <Xliff> MasterDuke: No. I didn't know I had to.

[23:42] <Xliff> "Already up to date"

[23:42] <Xliff> oooh... 

[23:42] <Xliff> I had to "git pull --tags upstream"

[23:42] <Xliff> "upstream" being the rakudo repo

[23:50] <Xliff> Getting some weird emits from the Grammar:

[23:50] <Xliff> " Use of Nil in string context in any statement_control at /home/cbwood/Projects/rakudo-precomp-nolock2/install/share/perl6/lib/Perl6/Grammar.moarvm line 1"

[23:50] <Xliff> "Type check failed in binding to parameter '$repo-id'; expected Str but got Nil (Nil)

[23:50] <Xliff> at /home/cbwood/Projects/p6-GLib/lib/GLib/Raw/Structs.pm6 (GLib::Raw::Structs):4"

