[00:51] *** Altai-man joined
[00:53] *** sena_kun left
[01:10] *** gugod left
[01:13] *** gugod joined
[01:17] *** gugod left
[01:17] *** gugod joined
[01:17] *** gugod left
[01:17] *** gugod joined
[01:18] *** gugod left
[01:18] *** gugod joined
[02:20] *** ilogger2 joined
[04:54] *** sena_kun joined
[05:22] *** stoned75 joined
[07:18] *** oddp joined
[07:44] *** stoned75 left
[07:54] *** stoned75 joined
[08:17] *** JJMerelo joined
[08:51] *** Altai-man joined
[08:54] *** sena_kun left
[09:05] *** JJMerelo left
[10:29] *** JJMerelo joined
[10:30] <JJMerelo> Within the esLibre (sort-of Spanish FOSDEM) we will be having a Raku+Perl devroom, and I just published the CFP https://jj.github.io/raku-perl-scripting-devroom-eslibre-2020/README-en.html

[10:30] <tellable6> 2020-08-19T09:56:27Z #raku <tbrowder> jjmerelo thnx, amigo

[10:30] <JJMerelo> Proposals welcome!

[10:30] <Geth> ¦ rakudo/rakuast: 02408f28dd | (Jonathan Worthington)++ | 5 files

[10:30] <Geth> ¦ rakudo/rakuast: Basic RakuAST handling of `start`

[10:30] <Geth> ¦ rakudo/rakuast: 

[10:30] <Geth> ¦ rakudo/rakuast: However, the AST side of this needs some work; the implicit $/ and $!

[10:30] <Geth> ¦ rakudo/rakuast: fresh declarations are not yet handled. Generally, thunking things that

[10:30] <Geth> ¦ rakudo/rakuast: come with declarations want a unified approach, as there are a good

[10:30] <Geth> ¦ rakudo/rakuast: number of them.

[10:30] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/02408f28dd

[10:30] <Geth> ¦ rakudo/rakuast: 7c0f575bda | (Jonathan Worthington)++ | src/Raku/Actions.nqp

[10:30] <Geth> ¦ rakudo/rakuast: Compile simple multi-part names to RakuAST

[10:30] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/7c0f575bda

[10:30] <Geth> ¦ rakudo/rakuast: 2b78b35a8e | (Jonathan Worthington)++ | 3 files

[10:30] <Geth> ¦ rakudo/rakuast: Implement type/call disambiguation

[10:30] <Geth> ¦ rakudo/rakuast: 

[10:30] <Geth> ¦ rakudo/rakuast: Meaning that we can now correctly compile `say Int` in the RakuAST-based

[10:31] <Geth> ¦ rakudo/rakuast: compiler.

[10:31] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/2b78b35a8e

[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. 2 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:38] *** JJMerelo left
[12:27] *** lichtkind joined
[12:39] *** stoned75 left
[12:52] *** sena_kun joined
[12:53] *** Altai-man left
[13:04] *** stoned75 joined
[13:16] <Geth> ¦ rakudo/rakuast: f335d556a0 | (Jonathan Worthington)++ | 3 files

[13:16] <Geth> ¦ rakudo/rakuast: Make package's name a RakuAST::Name

[13:16] <Geth> ¦ rakudo/rakuast: 

[13:16] <Geth> ¦ rakudo/rakuast: So we'll (with some more work) be able to support declaring things like

[13:16] <Geth> ¦ rakudo/rakuast: `class Foo::Bar` (plus any version adverbs).

[13:16] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/f335d556a0

[13:16] <Geth> ¦ rakudo/rakuast: 9e3afe4ac4 | (Jonathan Worthington)++ | src/Raku/ast/resolver.rakumod

[13:17] <Geth> ¦ rakudo/rakuast: Fix a typo and thinko in the resolver

[13:17] <Geth> ¦ rakudo/rakuast: 

[13:17] <Geth> ¦ rakudo/rakuast: We only need to deal with type/value differentiation in the compile

[13:17] <Geth> ¦ rakudo/rakuast: resolver; an AST cannot have such ambiguities.

[13:17] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/9e3afe4ac4

[13:30] <[Tux]> Rakudo version 2020.07-66-g2db92e04f - MoarVM version 2020.07-19-g9a5203395

[13:30] <[Tux]> csv-test-xs-20      0.392 -  0.399

[13:30] <[Tux]> test-t --race       0.817 -  0.841

[13:30] <[Tux]> csv-ip5xs           0.827 -  0.829

[13:30] <[Tux]> test-t              1.935 -  1.975

[13:30] <[Tux]> test                7.809 -  7.854

[13:30] <[Tux]> csv-ip5xs-20        8.112 -  8.234

[13:30] <[Tux]> test-t-20 --race    8.785 -  8.871

[13:30] <[Tux]> csv-parser         26.367 - 28.657

[13:30] <[Tux]> test-t-20          32.001 - 33.411

[13:35] *** lucasb joined
[13:43] <Geth> ¦ rakudo/rakuast: c47f1bfdb5 | (Jonathan Worthington)++ | 3 files

[13:43] <Geth> ¦ rakudo/rakuast: Stub in RakuAST compilation of packages

[13:43] <Geth> ¦ rakudo/rakuast: 

[13:43] <Geth> ¦ rakudo/rakuast: This gets us creating the RakuAST::Package element with the resolved

[13:43] <Geth> ¦ rakudo/rakuast: meta-object. It doesn't yet make anything aware of the declared package,

[13:43] <Geth> ¦ rakudo/rakuast: however, so we cannot yet resolve the declared type name.

[13:43] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/c47f1bfdb5

[13:45] *** oddp left
[14:25] <Geth> ¦ rakudo/sorting-with-junctions: 18cb45afdc | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Sorting.pm6

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: Another go at addressing AlexDaniel++ remarks

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: 

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: - Removed the explicit allomorphic candidates

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: - Int/Num candidates check for stringiness if same, then compare strings

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: - Str candidate checks for numberness, uses default cmp if so

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: - Added Date candidate because Date's $!daycount is a native int

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: 

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: This keeps the basic performance improvements in place with only a slight

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: overhead for the Str case (still 4x faster than before), and a slight

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: overhead for the allomorphic cases other than IntStr and NumStr.

[14:25] <Geth> ¦ rakudo/sorting-with-junctions: review: https://github.com/rakudo/rakudo/commit/18cb45afdc

[14:33] <lizmat> ah, and there I thought I'd run spectests, when I did, but on master  :-(

[14:33] <lizmat> back to the drawingboard

[14:38] <AlexDaniel`>  Which spectest fails? I can't see any issue yet

[14:40] <lizmat> ambiguous dispatch on IntStr

[14:40] <AlexDaniel`> Aaah

[14:40] <lizmat> brb

[16:13] <Geth> ¦ rakudo/sorting-with-junctions: 42f1bd58fc | (Elizabeth Mattijsen)++ | 8 files

[16:13] <Geth> ¦ rakudo/sorting-with-junctions: Introduce "allomorph" role

[16:13] <Geth> ¦ rakudo/sorting-with-junctions: 

[16:13] <Geth> ¦ rakudo/sorting-with-junctions: - this allows for a single type to accept *all* allomorph types

[16:13] <Geth> ¦ rakudo/sorting-with-junctions: - add 3 candidates to handle all allomorph types

[16:13] <Geth> ¦ rakudo/sorting-with-junctions: - remove special allomorph handling in Int/Num/Str candidates

[16:13] <Geth> ¦ rakudo/sorting-with-junctions: - back to 4.4x faster

[16:13] <Geth> ¦ rakudo/sorting-with-junctions: - should allow for more optimizations / maintainability for allomorphs as well

[16:13] <Geth> ¦ rakudo/sorting-with-junctions: - add tests for adding additional type to the core

[16:13] <Geth> ¦ rakudo/sorting-with-junctions: review: https://github.com/rakudo/rakudo/commit/42f1bd58fc

[16:20] *** dogbert11 joined
[16:38] <[Coke]> .tell jjmerelo changing the last paragraph in the article for tomorrow. I don't like what i wrote.

[16:38] <tellable6> [Coke], I'll pass your message to JJMerelo

[16:39] <[Coke]> .tell jjmerelo thanks for getting it *into* wp and setting up the publish

[16:39] <tellable6> [Coke], I'll pass your message to JJMerelo

[16:50] <[Coke]> done.

[16:51] *** Altai-man joined
[16:53] *** sena_kun left
[17:18] *** Kaiepi left
[17:19] *** Kaiepi joined
[17:46] *** stoned75 left
[20:11] <vrurg> m: my $a = "a" but 13; say "Int: ", $a.Int; say +$a

[20:11] <camelia> rakudo-moar 2db92e04f: OUTPUT: «Int: 13␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5a' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[20:12] <vrurg> Smells like a bug, isn't it?

[20:14] <lizmat> why do you expect prefix + to call Int?

[20:15] <lizmat> prefix + calls .Numeric

[20:17] <lizmat> not Int, so it won't use the role mixin and thus fail

[20:18] <lizmat> m: my $a = "a" but role { method Numeric() { 13 } }; say +$a'

[20:18] <camelia> rakudo-moar 2db92e04f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3ole { method Numeric() { 13 } }; say +$a7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»

[20:18] <lizmat> m: my $a = "a" but role { method Numeric() { 13 } }; say +$a

[20:18] <camelia> rakudo-moar 2db92e04f: OUTPUT: «13␤»

[20:20] *** MasterDuke joined
[20:20] <vrurg> lizmat: reasonable. Thanks!

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors: b7ff282fc5 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors: Suggest method names that differ only in capitalization

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors: 

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors: Currently, an expression like `say 42.which` will fail with:

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors: 

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors:   No such method 'which' for invocant of type 'Int'

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors: 

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors: *without* suggesting .WHICH.  This patch changes that to:

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors: 

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors:   No such method 'which' for invocant of type 'Int'.  Did you mean 'WHICH'?

[20:30] <Geth> ¦ rakudo/suggest-capitalization-errors: review: https://github.com/rakudo/rakudo/commit/b7ff282fc5

[20:31] <Geth> ¦ rakudo: lizmat++ created pull request #3853: Suggest method names that differ only in capitalization

[20:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3853

[20:33] *** Kaiepi left
[20:40] *** stoned75 joined
[20:52] <Geth> ¦ rakudo/introspect-WHAT: 04a1fc6202 | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[20:52] <Geth> ¦ rakudo/introspect-WHAT: Add Mu.WHAT for introspection

[20:52] <Geth> ¦ rakudo/introspect-WHAT: 

[20:52] <Geth> ¦ rakudo/introspect-WHAT: Yes, foo.WHAT will be codegenned without actually calling any method.

[20:52] <Geth> ¦ rakudo/introspect-WHAT: But to not have a method Mu.WHAT also means it won't show up in any

[20:52] <Geth> ¦ rakudo/introspect-WHAT: introspection or error messages.

[20:52] <Geth> ¦ rakudo/introspect-WHAT: 

[20:52] <Geth> ¦ rakudo/introspect-WHAT: Together with b7ff282fc5, this will suggest WHAT for "say 42.what".

[20:52] <Geth> ¦ rakudo/introspect-WHAT: review: https://github.com/rakudo/rakudo/commit/04a1fc6202

[20:52] *** sena_kun joined
[20:52] <Geth> ¦ rakudo: lizmat++ created pull request #3854: Add Mu.WHAT for introspection

[20:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3854

[20:54] *** Altai-man left
[21:46] <Geth> ¦ roast: 89a82220f6 | (Elizabeth Mattijsen)++ | S03-metaops/hyper.t

[21:46] <Geth> ¦ roast: Make test slightly less specific

[21:46] <Geth> ¦ roast: 

[21:46] <Geth> ¦ roast: It will break if there is suddenly a suggestion when one wasn't before.

[21:46] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/89a82220f6

[21:47] <Geth> ¦ rakudo/suggest-capitalization-errors: 30c4b6e599 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[21:47] <Geth> ¦ rakudo/suggest-capitalization-errors: Perform Levenshtein on .fc of strings

[21:47] <Geth> ¦ rakudo/suggest-capitalization-errors: 

[21:47] <Geth> ¦ rakudo/suggest-capitalization-errors: To more easily cover capitalization errors

[21:47] <Geth> ¦ rakudo/suggest-capitalization-errors: review: https://github.com/rakudo/rakudo/commit/30c4b6e599

[21:50] *** japhb left
[21:57] <Geth> ¦ rakudo: 08f81f2474 | (Stoned Elipot)++ | src/core.c/Baggy.pm6

[21:57] <Geth> ¦ rakudo: Fix Baggy.pickpairs with a Callable

[21:57] <Geth> ¦ rakudo: 

[21:57] <Geth> ¦ rakudo: Baggy.pickpairs' Callable should be invoked with the Baggy number of

[21:57] <Geth> ¦ rakudo: elements as the pairs are picked independently of the elements' weight

[21:57] <Geth> ¦ rakudo: in the Baggy object

[21:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/08f81f2474

[21:57] <Geth> ¦ rakudo: 88aa6db7f6 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Baggy.pm6

[21:57] <Geth> ¦ rakudo: Merge pull request #3852 from stoned/baggy-pickpairs-callable

[21:57] <Geth> ¦ rakudo: 

[21:57] <Geth> ¦ rakudo: Fix Baggy.pickpairs with a Callable

[21:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/88aa6db7f6

[22:13] <Geth> ¦ rakudo/suggest-capitalization-errors: bb7c617aac | (Elizabeth Mattijsen)++ | t/05-messages/01-errors.t

[22:13] <Geth> ¦ rakudo/suggest-capitalization-errors: Make test less specific

[22:13] <Geth> ¦ rakudo/suggest-capitalization-errors: 

[22:13] <Geth> ¦ rakudo/suggest-capitalization-errors: It was breaking because the number of suggestions changed.

[22:13] <Geth> ¦ rakudo/suggest-capitalization-errors: review: https://github.com/rakudo/rakudo/commit/bb7c617aac

[22:14] <lizmat> and that concludes my hacking for toda&

[22:28] *** japhb joined
[22:30] *** yuplushi joined
[22:31] *** stoned75 left
[22:36] *** squashable6 joined
[22:40] <sena_kun> lizmat, rest well!

[22:41] <AlexDaniel> hmm Could not find symbol '&Junction' in 'X::Cannot'

[22:42] <AlexDaniel> anyway mentioned that in the ticket

[22:50] *** sena_kun left
[22:51] *** sena_kun joined
[23:08] *** lichtkind left
[23:16] <timotimo> X::Cannot find symbol Cannot in X

