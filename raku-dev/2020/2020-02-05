[00:03] *** lizmat joined
[00:11] *** hungrydonkey joined
[00:24] *** hungrydonkey left
[00:24] *** hungrydonkey joined
[00:27] *** hungrydonkey left
[00:30] <MasterDuke> oh, looks like Geth is down

[00:30] <MasterDuke> just pushed https://github.com/perl6/roast/commit/01b7f5bb0a8f82fad69cd50bd94ba542d0454e6b

[00:31] <lizmat> .tell tyil Geth appears down

[00:31] <tellable6> lizmat, I'll pass your message to tyil

[00:31] <lizmat> MasterDuke: pretty sure tyil has already hit the sack

[00:31] <MasterDuke> i should have done the same a little while ago...

[00:31] <lizmat> which I will do now as well&

[00:46] *** sena_kun left
[00:51] *** Kaiepi left
[00:52] *** Kaiepi joined
[01:01] *** hungrydonkey joined
[01:01] *** sena_kun joined
[01:06] *** hungryd73 joined
[01:08] *** hungrydonkey left
[02:12] *** ufobat_ joined
[02:15] *** ufobat left
[02:38] *** Kaiepi left
[02:39] *** Kaiepi joined
[02:46] *** sena_kun left
[03:01] *** Geth joined
[03:01] <tyil> lizmat, MasterDuke: I was asleep indeed, but I try to read back and have found your wishes (geth was lost in the netsplit earlier, I believe)

[03:01] <tellable6> 2020-02-05T00:31:15Z #raku-dev <lizmat> tyil Geth appears down

[03:02] *** sena_kun joined
[03:35] <timotimo> y'know, we get notifications whenever a netsplit happens, right? and they contain which servers were part of the split, if i'm not mistaken

[03:35] <timotimo> in principle we could probably figure out a different server we could connect to so the bot is available on both sides of the split

[03:35] <timotimo> until the split is resolved, at which point both bots see each other and one can quit

[03:39] <timotimo> https://gist.github.com/timo/99686d0a3a8d5df62bcba731d62193f8 - *snrk*

[03:41] *** hungrydonkey joined
[03:45] *** hungryd73 left
[04:45] *** sena_kun left
[04:59] *** sena_kun joined
[06:44] *** sena_kun left
[06:49] *** brrt joined
[06:58] *** nebuchadnezzar joined
[07:02] *** sena_kun joined
[07:06] *** squashable6 left
[07:06] *** squashable6 joined
[07:47] *** domidumont joined
[08:18] *** brrt left
[08:46] *** sena_kun left
[08:57] *** brrt joined
[08:58] <lizmat> m: 42.expmod(-1,7)

[08:58] <evalable6> lizmat, rakudo-moar c1b8ff60f: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[08:59] <lizmat> .tell MasterDuke 42.expmod(-1,7) causing hanging of S32-num/expmod.t test

[08:59] <tellable6> lizmat, I'll pass your message to MasterDuke

[09:02] *** sena_kun joined
[09:43] *** brrt left
[10:47] *** sena_kun left
[11:02] *** sena_kun joined
[11:35] <Geth> ¦ nqp: beeaa5d38b | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[11:35] <Geth> ¦ nqp: Bump NQP to get latest libtommath fixes

[11:35] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/beeaa5d38b

[11:45] <Geth> ¦ rakudo: f8b9d02759 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[11:45] <Geth> ¦ rakudo: Bump NQP to get the latest libtommath fixes

[11:45] <Geth> ¦ rakudo: 

[11:45] <Geth> ¦ rakudo: Daniel Green++ for perseverance in upping this dependency!

[11:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f8b9d02759

[11:45] <lizmat> .tell MasterDuke bumping MoarVM / NQP fixed the hang

[11:45] <tellable6> lizmat, I'll pass your message to MasterDuke

[11:51] *** travis-ci joined
[11:51] <travis-ci> NQP build passed. Elizabeth Mattijsen 'Bump NQP to get latest libtommath fixes'

[11:51] <travis-ci> https://travis-ci.org/perl6/nqp/builds/646366747 https://github.com/perl6/nqp/compare/fad1aa45f305...beeaa5d38b98

[11:51] *** travis-ci left
[12:12] <Guest47772> m: say is-prime(-2)

[12:12] <evalable6> Guest47772, rakudo-moar f8b9d0275: OUTPUT: «True␤»

[12:12] <Guest47772> hmm

[12:33] *** squashable6 left
[12:35] *** squashable6 joined
[12:44] <Geth> ¦ rakudo: 4b64338afa | (Elizabeth Mattijsen)++ | 2 files

[12:44] <Geth> ¦ rakudo: Add type information to BUILDPLAN when binding attribute argument

[12:44] <Geth> ¦ rakudo: 

[12:44] <Geth> ¦ rakudo: - this is currently not being done, allowing for binding when it shouldn't

[12:44] <Geth> ¦ rakudo: - does not actually do the typecheck yet, just adding information to be used

[12:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4b64338afa

[12:45] *** travis-ci joined
[12:45] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Bump NQP to get the latest libtommath fixes

[12:45] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/646369648 https://github.com/rakudo/rakudo/compare/c1b8ff60f848...f8b9d027594b

[12:45] *** travis-ci left
[12:45] <lizmat> restarted the one failing job

[12:46] *** sena_kun left
[13:01] *** sena_kun joined
[13:04] *** brrt joined
[13:35] *** brrt left
[13:42] <Geth> ¦ rakudo: 5eb113b1c8 | (Elizabeth Mattijsen)++ | src/core.c/Version.pm6

[13:42] <Geth> ¦ rakudo: Make sure Version objects can coerce themselves

[13:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5eb113b1c8

[13:48] *** lucasb joined
[14:05] <lizmat> afk for rest of the day&

[14:46] *** sena_kun left
[15:00] *** sena_kun joined
[15:10] *** rypervenche joined
[15:10] <Geth> ¦ rakudo: ca78390ecc | (Jonathan Worthington)++ | 2 files

[15:10] <Geth> ¦ rakudo: Fix variable declared by shape match in signature

[15:10] <Geth> ¦ rakudo: 

[15:10] <Geth> ¦ rakudo: A signature like `-> @a[3] { }` would accidentally declare a lexical

[15:10] <Geth> ¦ rakudo: with the name `@a[3]` instead of just `@a`. This addresses the issue

[15:10] <Geth> ¦ rakudo: reported in #3314.

[15:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ca78390ecc

[15:10] <linkable6> RAKUDO#3314 [open]: https://github.com/rakudo/rakudo/issues/3314 [shaped] Using a shaped array in a signature stores incorrectly in lexical pad

[15:11] <Geth> ¦ roast: ecdf550c86 | (Jonathan Worthington)++ | S06-signature/shape.t

[15:11] <Geth> ¦ roast: Add a test for using shaped parameter variables

[15:11] <Geth> ¦ roast: 

[15:11] <Geth> ¦ roast: Covers https://github.com/rakudo/rakudo/issues/3314.

[15:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ecdf550c86

[15:12] *** SmokeMachine joined
[16:15] <Geth> ¦ nqp: 6295cad4ad | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp

[16:15] <Geth> ¦ nqp: Don't call non-existent panic method

[16:15] <Geth> ¦ nqp: 

[16:15] <Geth> ¦ nqp: It's a bug elsewhere when we reach this, but at least emit the error so

[16:15] <Geth> ¦ nqp: as to give a little more information.

[16:15] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6295cad4ad

[16:21] <Geth> ¦ nqp: 5708ad8934 | (Jonathan Worthington)++ | src/QRegex/P6Regex/Actions.nqp

[16:21] <Geth> ¦ nqp: Fix indentation

[16:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5708ad8934

[16:30] *** domidumont left
[16:30] *** domidumont joined
[16:31] *** Guest47772 left
[16:43] *** patrickb joined
[16:47] *** sena_kun left
[16:50] <Geth> ¦ nqp: 7bf032640d | (Jonathan Worthington)++ | src/QRegex/P6Regex/Actions.nqp

[16:50] <Geth> ¦ nqp: Consistently make the `.` in `<.[x]>` a no-op

[16:50] <Geth> ¦ nqp: 

[16:50] <Geth> ¦ nqp: In https://github.com/rakudo/rakudo/issues/3208 it was reported that we

[16:50] <Geth> ¦ nqp: got compilation errors from typing `<.[\d]>`, while the `.` was silently

[16:50] <Geth> ¦ nqp: ignored in `<.[a]>`. It turns out that the compiler would treat whatever

[16:50] <Geth> ¦ nqp: `.` was applied to as if it was going to be a subrule call, and when it

[16:50] <Geth> ¦ nqp: was something simple enough, we got away with that since the subtype was

[16:50] <Geth> ¦ nqp: <…commit message has 9 more lines…>

[16:50] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/7bf032640d

[17:01] *** sena_kun joined
[17:09] <Geth> ¦ rakudo: bceaeb1a9a | (Jonathan Worthington)++ | src/core.c/Junction.pm6

[17:09] <Geth> ¦ rakudo: Give Junction an iterator method

[17:09] <Geth> ¦ rakudo: 

[17:09] <Geth> ¦ rakudo: While methods in general autothread, some opt out of that - especially

[17:09] <Geth> ¦ rakudo: those called by internals and that are expected to follow protocols. It

[17:09] <Geth> ¦ rakudo: would seem `iterator` is a fair fit for that category, so implement it

[17:09] <Geth> ¦ rakudo: as an iterator that produces 1 value when iterated: the Junction itself.

[17:09] <Geth> ¦ rakudo: The current bad behavior in https://github.com/rakudo/rakudo/issues/3198

[17:09] <Geth> ¦ rakudo: is eliminated by this change; it now outputs `Junction` instead.

[17:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bceaeb1a9a

[17:14] <Geth> ¦ roast: 376d49f71e | (Jonathan Worthington)++ | S03-junctions/misc.t

[17:14] <Geth> ¦ roast: Test to cover value in single junction iteration

[17:14] <Geth> ¦ roast: 

[17:14] <Geth> ¦ roast: Covers the fix for https://github.com/rakudo/rakudo/issues/3198.

[17:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/376d49f71e

[17:42] *** domidumont left
[17:42] *** domidumont joined
[17:43] <[Coke]> lots of jnthn commits today

[17:58] <Geth> ¦ rakudo: e1faa704ec | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[17:58] <Geth> ¦ rakudo: Don't unwant the first argument of a call node

[17:58] <Geth> ¦ rakudo: 

[17:58] <Geth> ¦ rakudo: It's not clear exactly what this branch was intended to do. Removing it

[17:58] <Geth> ¦ rakudo: resolves the bug in https://github.com/rakudo/rakudo/issues/3034, and

[17:58] <Geth> ¦ rakudo: does not break any tests nor spectests. Its effect was to unwant - and

[17:58] <Geth> ¦ rakudo: so sink - either the first argument of a call that itself was unwanted,

[17:58] <Geth> ¦ rakudo: or in the case of a call node without a name, the callee. The latter was

[17:58] <Geth> ¦ rakudo: what caused #3034. However, I can't think of any case where this is a

[17:58] <linkable6> RAKUDO#3034 [open]: https://github.com/rakudo/rakudo/issues/3034 [regression] Inconsistant syntax required to call module sub

[17:58] <Geth> ¦ rakudo: desirable behavior. Perhaps just a thinko?

[17:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e1faa704ec

[18:01] <jnthn> m: use Test; my $called = False; my module M { our sub foo() { $called = True; } }; M::foo if True; ok $called;

[18:01] <evalable6> jnthn, rakudo-moar bceaeb1a9: OUTPUT: «(exit code 1) Cannot find method 'Nil' on object of type List␤  in block <unit> at /tmp/klClr4K7rS line 1␤␤»

[18:02] <Geth> ¦ roast: 7f4b636efe | (Jonathan Worthington)++ | S04-statement-modifiers/if.t

[18:02] <Geth> ¦ roast: Test `M::foo if True` calls M::foo

[18:02] <Geth> ¦ roast: 

[18:02] <Geth> ¦ roast: Covers the bug from https://github.com/rakudo/rakudo/issues/3034.

[18:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7f4b636efe

[18:03] <lucasb> with regard Junction.iterator, can't the same be done for Capture objects?

[18:03] <lucasb> m: .say for \(1,2,:a,:b)

[18:03] <evalable6> lucasb, rakudo-moar bceaeb1a9: OUTPUT: «1␤2␤»

[18:03] *** hungrydonkey left
[18:03] *** ufobat_ left
[18:03] <lucasb> currently, captures "iterates" only the ".list" part of it :)

[18:03] <jnthn> No, that'd surely cause much too much breakage

[18:04] <jnthn> Since Match ~~ Capture

[18:04] <jnthn> iirc, anyways

[18:04] <jnthn> m: say Match ~~ Capture

[18:04] <evalable6> jnthn, rakudo-moar bceaeb1a9: OUTPUT: «True␤»

[18:04] <jnthn> Yup

[18:04] <jnthn> Home time o/

[18:46] *** sena_kun left
[18:48] <nine> That's an interesting new one:

[18:49] <nine>   362s] push_o requires a concrete object (got a ThreadPoolScheduler::Queue type object instead)

[18:49] <nine> [  362s] at /home/abuild/rpmbuild/BUILD/rakudo-2020.01+git76.ge1faa704e/tools/build/install-core-dist.p6:2

[18:49] <nine> https://build.opensuse.org/package/live_build_log/home:niner9:rakudo-git/rakudo/openSUSE_Tumbleweed/x86_64

[18:52] <MasterDuke> .

[18:52] <tellable6> 2020-02-05T08:59:39Z #raku-dev <lizmat> MasterDuke 42.expmod(-1,7) causing hanging of S32-num/expmod.t test

[18:52] <tellable6> 2020-02-05T11:45:50Z #raku-dev <lizmat> MasterDuke bumping MoarVM / NQP fixed the hang

[18:52] <MasterDuke> lizmat++

[18:56] *** travis-ci joined
[18:56] <travis-ci> Rakudo build failed. Jonathan Worthington 'Don't unwant the first argument of a call node

[18:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/646528882 https://github.com/rakudo/rakudo/compare/bceaeb1a9a18...e1faa704ecb3

[18:56] *** travis-ci left
[19:01] *** sena_kun joined
[19:04] <TreyHarris> I just ran `raku` (no args for the REPL) from a brand-new (well, actually, Jan 29) rakudo build in my home directory. It took a rather long time to start, so I hooked lsof to it, and it appeared to be scanning nearly every file in my home directory. Like, at one point it had /home/trey/src/emacs/etc/refcards open

[19:04] <TreyHarris> It's not a one-time precomp thing, either, I just tried again. I have to cd into an more-empty directory for raku to quickly start

[19:05] <TreyHarris> ahh, it's because my PERL6LIB contains .

[19:06] <sena_kun> yes, beware of PERL6LIB value

[19:07] <TreyHarris> is recursive traversal through every directory in PERL6LIB new behavior, though? I had a tmux hotkey that started the repl from my home directory in a new shell and I don't recall having to wait on it

[19:07] <nine> TreyHarris: it's been that way for a couple of years

[19:08] <TreyHarris> huh. And (tangential to that) scanning rakudo src, there's no new Raku name for PERL6LIB?

[19:09] <TreyHarris> I can use direnv to add . only in my ~/src subdir, though, so that's fine now that I'm aware

[19:13] <nine> Why do you even want . in PERL6LIB?

[19:14] <nine> That recursive scan went in in August 2016. How time goes by...

[19:21] <TreyHarris> nine: for REPL use it's frequently nice to just cd to where a module you want to debug lives. and if you want to import an executable as a library in the REPL for testing, it won't be in a lib parent dir

[19:25] *** jjatria joined
[19:25] *** jjatria left
[19:30] <TreyHarris> It looks like as of 3 Feb, Geth no longer sends any updates to #raku -- was this intentional?

[19:30] <nine> m: say "test"

[19:30] <evalable6> nine, rakudo-moar e1faa704e: OUTPUT: «test␤»

[19:32] <TreyHarris> nine: no, I didn't mean all bots, just Geth for comitt and merge actions. and on #raku, not here

[19:35] <nine> TreyHarris: I know but camelia is still down. Will have to reboot the host

[19:35] *** nine left
[19:36] *** MasterDuke left
[19:37] *** nine joined
[19:37] *** SmokeMachine left
[19:39] *** camelia joined
[19:40] <nine> m: say "back"

[19:40] <camelia> rakudo-moar 62cb756d9: OUTPUT: «back␤»

[19:42] <TreyHarris> nine++ camelia++

[19:52] *** domidumont left
[19:55] *** CIAvash joined
[20:01] <TreyHarris> Hi CIAvash... so we're all on the same page, you've created a very nice-looking blog platform at http://raku-demo-temp.ciavash.name/ and are wondering if raku.org could find a place for it if it looks worth extending beyond a proof of concept, right?

[20:01] <CIAvash> Yes.

[20:02] <TreyHarris> I think the best next step would be to introduce yourself and the site in a new issue in https://github.com/Raku/problem-solving -- anyone here disagree?

[20:05] <TreyHarris> CIAvash: the Raku/problem-solving repo is where things like this are typically hashed out, so I think that's your best bet.... thanks for your hard work!

[20:05] <CIAvash> ok

[20:08] <TreyHarris> Feel free to ask here if you want to get quick back-and-forth feedback from anyone who happens to be awake at the time

[20:09] <TreyHarris> But a document on problem-solving for people to refer to and save comments is good first

[20:09] *** Voldenet left
[20:13] <rypervenche> CIAvash: And if you can provide the source code for the actual site that you've built, even better! It would be effective in showing how simple the site is to write/update using Markdown.

[20:15] *** Voldenet joined
[20:15] *** Voldenet left
[20:15] *** Voldenet joined
[20:39] <TreyHarris> yesterday when everyone was asleep, I asked what I needed to do to get my new rakudo build feature-equivalent to my rakudo-star 2019.03 install. Can I just do a walk through .../rakudo-star/rakudo-star-2019.03/modules and zef install each? zef can't use the name of the dirs under .../modules, so I'll need to go into each module dir and grab 'name' from META6.json. Is there a better/easier way?

[20:40] <TreyHarris> (Also, where did my own rakudo-star zef installs go so I can take inventory of them?)

[20:44] <nine> TreyHarris: I'd assume that star's build system has a list of modules that get packaged

[20:44] <TreyHarris> nine: that's fine, i can figure it out. the part I'm stuck on is figuring out where my zef install modules went

[20:45] <TreyHarris> like, if I remove the rakudo executables from my path and start the rakudo-star perl6 and do 'use Carp', it works, but I'll be damned if I can find a directory called Carp anywhere

[20:47] *** sena_kun left
[20:47] <nine> if it's installed into a CompUnit::Repository::Installation (which is likely) there won't be

[20:49] <TreyHarris> so, how can I get a list of what I have installed?

[20:52] <TreyHarris> ah, there's an entire doc page I never saw before on this: https://docs.raku.org/language/compilation

[20:56] <TreyHarris> how do I convert a name to a SHA-1?

[20:58] <TreyHarris> "Carp" has a SHA-1 (that I found using shell command, since I don't know how in Raku) of d00ed6d0c5ac45de00f179782815edeefadfc67b, but %?RESOURCES<d00ed6d0c5ac45de00f179782815edeefadfc67b> doesn't exist, so I think I'm not understanding that page

[21:00] <nine> TreyHarris: why do you care?

[21:01] *** sena_kun joined
[21:02] <TreyHarris> nine: I thought that was how to find my installed modules working backwards. If there's a different way, I'll do that... but that language/compilation page doesn't seem to suggest any others unless $*REPO were iterable, which it isn't?

[21:02] <nine> m: say $*REPO.next-repo.installed

[21:02] <camelia> rakudo-moar e1faa704e: OUTPUT: «()␤»

[21:02] <nine> m: say $*REPO.next-repo.next-repo.installed

[21:02] <camelia> rakudo-moar e1faa704e: OUTPUT: «()␤»

[21:02] <nine> m: say $*REPO.next-repo.next-repo.next-repo.installed

[21:02] <camelia> rakudo-moar e1faa704e: OUTPUT: «(CompUnit::Repository::Installation::InstalledDistribution.new(${:auth("perl"), :files(${}), :name("CORE"), :provides(${:BUILDPLAN(${("lib/BUILDPLAN.rakumod") => ${:cver("2020.01-76-ge1faa704e"), :file("10E86A71646D649AE0856ACE1737E1FFACC669D6"), :tim…»

[21:03] <nine> m: say $*REPO.next-repo.next-repo.next-repo.installed>>.short-name

[21:03] <camelia> rakudo-moar e1faa704e: OUTPUT: «No such method 'short-name' for invocant of type 'CompUnit::Repository::Installation::InstalledDistribution'␤  in block <unit> at <tmp> line 1␤␤»

[21:04] <nine> m: say $*REPO.next-repo.next-repo.next-repo.installed>>.meta<name>

[21:04] <camelia> rakudo-moar e1faa704e: OUTPUT: «Type List does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»

[21:04] <nine> m: say $*REPO.next-repo.next-repo.next-repo.installed>>.meta>><name>

[21:04] <camelia> rakudo-moar e1faa704e: OUTPUT: «(CORE)␤»

[21:04] <TreyHarris> ahh

[21:04] <nine> m: say $*REPO.next-repo.next-repo.next-repo.installed>>.meta>><provides>

[21:04] <camelia> rakudo-moar e1faa704e: OUTPUT: «({BUILDPLAN => {lib/BUILDPLAN.rakumod => {cver => 2020.01-76-ge1faa704e, file => 10E86A71646D649AE0856ACE1737E1FFACC669D6, time => 1580933321.7569573}}, CompUnit::Repository::Staging => {lib/CompUnit/Repository/Staging.rakumod => {cver => 2020.01-76-g…»

[21:04] <TreyHarris> okay, using .next-repo repeatedly wasn't what I was expecting :-)

[21:05] <nine> It's a single linked list

[21:06] <nine> m: say $*REPO.repo-chain>>.?name

[21:06] <camelia> rakudo-moar e1faa704e: OUTPUT: «(home site vendor core Nil Nil Nil)␤»

[21:09] <TreyHarris> m: .[0].say for $*REPO.next-repo.next-repo.next-repo.installed>>.meta>><provides>>>.keys

[21:09] <camelia> rakudo-moar e1faa704e: OUTPUT: «newline␤»

[21:09] <TreyHarris> ^ that seems to be what I want

[21:43] *** patrickb left
[21:46] *** Kaeipi joined
[21:47] *** Kaiepi left
[21:47] *** lucasb left
[22:46] *** sena_kun left
[22:58] *** SmokeMachine joined
[23:01] *** sena_kun joined
