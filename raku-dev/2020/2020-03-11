[00:39] *** lucasb left
[00:56] <MasterDuke> is this https://github.com/rakudo/rakudo/blame/master/src/Perl6/Metamodel/Mixins.nqp#L35-L43 still needed? after adding some logging and always seeing it composed i reverted https://github.com/rakudo/rakudo/commit/8ec84b608d0b3c21ec465352eef617581ed5af41 and a spectest passed

[01:13] *** sena_kun joined
[01:15] *** Altai-man_ left
[01:22] <Geth> ¦ rakudo: MasterDuke17++ created pull request #3542: Revert "Work around existing bug exposed by mixin caching."

[01:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3542

[02:02] *** MasterDuke left
[03:12] *** Altai-man_ joined
[03:15] *** sena_kun left
[05:13] *** sena_kun joined
[05:15] *** Altai-man_ left
[06:41] *** domidumont joined
[07:13] *** Altai-man_ joined
[07:13] <lizmat> Files=1305, Tests=111213, 208 wallclock secs (28.17 usr  8.16 sys + 2916.40 cusr 272.20 csys = 3224.93 CPU)

[07:14] <Geth> ¦ rakudo: 771b95438e | (Daniel Green)++ | src/Perl6/Metamodel/Mixins.nqp

[07:14] <Geth> ¦ rakudo: Revert "Work around existing bug exposed by mixin caching."

[07:14] <Geth> ¦ rakudo: 

[07:14] <Geth> ¦ rakudo: This reverts commit 8ec84b608d0b3c21ec465352eef617581ed5af41.

[07:14] <Geth> ¦ rakudo: 

[07:14] <Geth> ¦ rakudo: Adding some logging showed that `self.is_composed($obj)` is always true

[07:14] <Geth> ¦ rakudo: when building Rakudo.

[07:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/771b95438e

[07:14] <Geth> ¦ rakudo: 5d8123a27f | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/Mixins.nqp

[07:14] <Geth> ¦ rakudo: Merge pull request #3542 from MasterDuke17/non_composed_mixing_workaround_no_longer_needed

[07:14] <Geth> ¦ rakudo: 

[07:14] <Geth> ¦ rakudo: Revert "Work around existing bug exposed by mixin caching."

[07:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5d8123a27f

[07:15] *** sena_kun left
[07:21] <[Tux]> gist updated with final measurements. Note the leading note

[08:11] *** Kaiepi joined
[08:40] <[Coke]> which gist?

[08:46] *** vrurg left
[08:47] *** vrurg joined
[08:48] <Geth> ¦ rakudo: 33fc89507c | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[08:48] <Geth> ¦ rakudo: Streamline include-spec2cur in CU::RepositoryRegistry

[08:48] <Geth> ¦ rakudo: 

[08:48] <Geth> ¦ rakudo: - de-hllize lookups

[08:48] <Geth> ¦ rakudo: - us binding where possible

[08:48] <Geth> ¦ rakudo: - use subclass check only

[08:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/33fc89507c

[08:48] *** Geth left
[08:49] *** Geth joined
[08:49] *** dogbert11 joined
[08:49] *** Kaiepi left
[08:49] *** Kaiepi joined
[08:52] *** dogbert17 left
[08:59] <lizmat> [Coke]: https://gist.github.com/Tux/6f1aa9cfbb1d94d488c6822d0ac08aae

[09:03] <[Coke]> Danke && nifty

[09:13] *** sena_kun joined
[09:15] *** Altai-man_ left
[09:28] <Tux__> [Coke} those columns: 1: commit of rakudo, 2: version/tag of rakudo, 3: two timings for Text::CSV's test-t run (fastest left, slowest right)

[09:29] <Tux__> as the note said, on 23:00 Amsterdam/Europe the resource-heavy cron jobs start running, so I bet the times go up from there

[09:57] *** MasterDuke joined
[09:58] <MasterDuke> Tux__: how was your skiing? i was pretty impressed with Alpendorf, there was ~2in of powder overnight at the top (though the bottom was slushy ice balls)

[09:59] <MasterDuke> lizmat: unfortunately work cancelled my trip, so i won't be at Lausanne

[10:03] <Tux__> MasterDuke, not my best trip. The conditions were bad

[10:04] <MasterDuke> jnthn: i tried adding some `publish_(type|method)_cache`s here https://github.com/MasterDuke17/rakudo/blob/master/src/Perl6/Metamodel/Mixins.nqp#L27-L55, but everything caused the build to fail

[10:04] <lizmat> MasterDuke: I won't be at Lausanne either :-(

[10:05] <MasterDuke> Tux__: too bad. they weren't the best conditions i've ever seen in my life, but for a first time visiting the Alps put on a pretty good showing

[10:05] <MasterDuke> my daughter also tried skiing for the first time and like it, so that's also a plus

[10:05] <MasterDuke> lizmat: also too bad

[10:34] <nine> lizmat: this can't be right: https://github.com/rakudo/rakudo/blob/master/src/core.c/DateTime.pm6#L56

[10:35] <lizmat> why?

[10:35] <nine> lizmat: when $!second is 0, the call would be nqp::substr($int,0,-3) which would cause a "Substring length (-3) cannot be negative" error

[10:38] <lizmat> m: dd DateTime.new(2020,3,10,11,38,0.3).Str

[10:38] <camelia> rakudo-moar 8c995febd: OUTPUT: «"2020-03-10T11:38:00.300000Z"␤»

[10:38] <lizmat> so why doesn't that fail ?

[10:39] <nine> Oh, that's why: https://github.com/rakudo/rakudo/blob/master/src/core.c/DateTime.pm6#L47

[10:39] <nine> m: DateTime.new(2020,3,10,11,38,0.001).Str.say

[10:39] <camelia> rakudo-moar 8c995febd: OUTPUT: «2020-03-10T11:38:00.001000Z␤»

[10:40] <nine> m: DateTime.new(2020,3,10,11,38,0.000001).Str.say

[10:40] <camelia> rakudo-moar 8c995febd: OUTPUT: «2020-03-10T11:38:00.000001Z␤»

[10:41] <nine> Odd...both of these fail locally

[10:45] <lizmat> nine: perhaps add tests for the cases that fail locally for you ?

[10:48] <nine> m: say $*PERL.compiler.version

[10:48] <camelia> rakudo-moar 8c995febd: OUTPUT: «v2020.01.136.g.8.c.995.febd␤»

[10:48] <nine> That's why it doesn't fail in camelia ^^^

[10:48] <nine> It's a regression in 2020.02 (shown up on our production system)

[10:48] <lizmat> yikes... camelia not very up to date

[10:49] <lizmat> confirmed here

[10:49] <lizmat> will fix

[10:49] <nine> Yeah, because: error: Entry '3rdparty/nqp-configure/lib/NQP/Config.pm' would be overwritten by merge. Cannot merge.

[10:50] <nine> vrurg: can we please have a fixed submodule handling for NQP::Config? It's killing camelia every couple of weeks and costs me lot of time

[11:06] <lizmat> m: DateTime.new(2020,3,10,11,38,1.000001).Str

[11:06] <camelia> rakudo-moar 33fc89507: OUTPUT: «sudo: /home/camelia/rakudo-m-inst/bin/perl6-m: command not found␤»

[11:06] <lizmat> meh

[11:07] <lizmat> p6: DateTime.new(2020,3,10,11,38,1.000001).Str

[11:07] <camelia> rakudo-moar 33fc89507: OUTPUT: «sudo: /home/camelia/rakudo-m-inst/bin/perl6-m: command not found␤»

[11:07] <lizmat> evalable6: DateTime.new(2020,3,10,11,38,1.000001).Str

[11:07] <evalable6> lizmat, rakudo-moar 33fc89507: OUTPUT: «»

[11:07] <lizmat> looks like they're all stuck  :-(

[11:12] *** Altai-man_ joined
[11:15] <Geth> ¦ rakudo: 95de785951 | (Elizabeth Mattijsen)++ | src/core.c/DateTime.pm6

[11:15] <Geth> ¦ rakudo: Fix default DateTime stringification for second 0..^1

[11:15] <Geth> ¦ rakudo: 

[11:15] <Geth> ¦ rakudo: Spotted by Stefan Seifert++.

[11:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/95de785951

[11:15] <Geth> ¦ roast: 6975233b35 | (Elizabeth Mattijsen)++ | S32-temporal/DateTime.t

[11:15] <Geth> ¦ roast: Add test for DateTime with second 0..^1

[11:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6975233b35

[11:15] *** sena_kun left
[11:16] <lizmat> nine: ^^

[11:35] <nine> m: say $*PERL.compiler.version

[11:35] <camelia> rakudo-moar 95de78595: OUTPUT: «sudo: /home/camelia/rakudo-m-inst/bin/perl6-m: command not found␤»

[11:37] <nine> Don't we install perl6-m anymore?

[11:38] <lizmat> my install/bin indeed does not have a perl6-m anymore

[11:39] <lizmat> I guess camelia needs to get with the times  :-)

[11:39] <lizmat> I guess rakudo-m would be the most appropriate choice

[11:39] <nine> Why do we insist on breaking people's setups?

[11:40] <jnthn> I think it's too soon to not install perl6-m

[11:40] <jnthn> Please put it back

[11:40] <nine> Even MoarVM contains scripts with perl6-m in the shebang line

[11:41] <nine> Inline::Perl6 uses perl6-m in Makefile.PL - because it doesn't work on any other backend

[11:41] <lizmat> I guess making an issue is in order  :-)

[11:42] <nine> Breakage is caused by commit f5f6f76ff1fbb23e709e095c2423f19925152e8b

[11:42] <nine> Author: Vadim Belman [email@hidden.address]
[11:42] <nine> Date:   Thu Feb 13 23:11:47 2020 -0500

[11:42] <linkable6> (2020-02-13) https://github.com/rakudo/rakudo/commit/f5f6f76ff1 Renaming of perl6 to rakudo

[11:42] <nine> Renaming of perl6 to rakudo

[11:42] <nine> I guess I'll just revert that?

[11:43] <lizmat> not sure that would be the most productive solution

[11:43] <lizmat> pretty sure vrurg will be able to come up with a fix quickly once they are awake

[11:44] <lizmat> mind you, it's been in there for almost a month *and* in the 2020.02 release

[12:34] *** Kaeipi joined
[12:34] *** Kaiepi left
[12:50] <Geth> ¦ rakudo: 0e87235684 | (Elizabeth Mattijsen)++ | src/core.c/DateTime.pm6

[12:50] <Geth> ¦ rakudo: Make default DateTime stringification about 10% faster

[12:50] <Geth> ¦ rakudo: 

[12:50] <Geth> ¦ rakudo: - don't use nqp::concat, joining on empty string anyway

[12:50] <Geth> ¦ rakudo: - lose nqp::tostr_I where not needed

[12:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0e87235684

[12:51] <lizmat> afk for a few hours&

[13:02] *** Voldenet left
[13:13] *** sena_kun joined
[13:15] *** Altai-man_ left
[13:16] *** Voldenet joined
[13:16] *** Voldenet left
[13:16] *** Voldenet joined
[13:38] *** rypervenche left
[13:39] <vrurg> nine: perl6-m has been clearly overlooked. I have daytime job tasks but will fix it later today.

[13:41] *** rypervenche joined
[13:59] *** lucasb joined
[14:07] *** MasterDuke left
[14:49] *** MasterDuke joined
[14:54] <AlexDaniel`> who's stuck again?

[14:54] *** AlexDaniel joined
[14:54] *** AlexDaniel left
[14:54] *** AlexDaniel joined
[14:55] <AlexDaniel> e: say 42

[14:55] <evalable6> AlexDaniel, rakudo-moar 0e8723568: OUTPUT: «42␤»

[14:55] <AlexDaniel> doesn't look stuck to me

[14:55] <AlexDaniel> I guess I misread :-)

[14:56] <AlexDaniel> m: say 42

[14:56] <camelia> rakudo-moar 0e8723568: OUTPUT: «sudo: /home/camelia/rakudo-m-inst/bin/perl6-m: command not found␤»

[14:56] <AlexDaniel> I mean…

[14:57] <MasterDuke> camelia runs with sudo?

[14:57] <AlexDaniel> yeah that's kinda amusing

[14:58] <MasterDuke> might want to purge that from the logs

[14:59] *** ChanServ sets mode: +o AlexDaniel

[14:59] *** camelia was kicked by AlexDaniel (Kicked by AlexDaniel))
[14:59] <AlexDaniel> m: say 42

[14:59] <AlexDaniel> hmmmm

[15:00] *** ChanServ sets mode: -o AlexDaniel

[15:00] <AlexDaniel> I think evalable doesn't know about kicks!

[15:00] <AlexDaniel> I was planning to fix m: but I think I broke it further :-)

[15:00] <AlexDaniel> eventually evalable will refresh the list and start working, I guess…

[15:06] <AlexDaniel> m: say 42

[15:07] <AlexDaniel> https://github.com/Raku/whateverable/blob/75e84f7a52d2812818d22b3133164c391c2cddd9/lib/Whateverable/Userlist.pm6#L56

[15:08] <AlexDaniel> it'll fix itself randomly :-)

[15:12] *** Altai-man_ joined
[15:13] *** evalable6 left
[15:13] <AlexDaniel> or I can do this :)

[15:15] *** evalable6 joined
[15:15] *** sena_kun left
[15:18] *** evalable6 left
[15:21] *** evalable6 joined
[16:03] <AlexDaniel> woah what happened to #perl6

[16:03] <AlexDaniel> last time I checked there were a bunch of users who are just forever online :)

[16:04] <AlexDaniel> now it's completely empty

[16:04] <sjn> it's all #raku now, man

[16:30] <tyil> AlexDaniel: perhaps everyone parted due to a netsplit

[16:30] <tyil> and rejoining forwarded them to #raku

[16:33] <AlexDaniel> yeah

[16:58] <nine> ++vrurg

[17:00] <nine> MasterDuke: camelia runs with sudo -u evalbot perl6-m...

[17:00] <nine> So sudo is actually reducing privileges here :)

[17:02] *** Guest1277 left
[17:13] *** sena_kun joined
[17:15] *** Altai-man_ left
[17:30] <Geth> ¦ rakudo: d95141ed94 | (Elizabeth Mattijsen)++ | src/core.c/DateTime.pm6

[17:30] <Geth> ¦ rakudo: Make DateTime default stringification again a few % faster

[17:30] <Geth> ¦ rakudo: 

[17:30] <Geth> ¦ rakudo: - make sure result of the < 10 check is used as multiplication factor

[17:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d95141ed94

[17:42] *** [Coke] left
[17:45] *** [Coke] joined
[17:46] <Geth> ¦ rakudo: a62da3019b | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[17:46] <Geth> ¦ rakudo: Streamline CU::RepositoryRegistry's parse-include-specS

[17:46] <Geth> ¦ rakudo: 

[17:46] <Geth> ¦ rakudo: - this is called many times during each time $*REPO is set up

[17:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a62da3019b

[17:46] *** [Coke] left
[17:46] *** [Coke] joined
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:11] <MasterDuke> nine: ah, nice

[18:14] <MasterDuke> jnthn: any suggestions as to where to look to fix that type|method cache business? any dreams of code last night?

[18:52] *** ufobat__ joined
[18:56] *** ufobat_ left
[19:05] <Geth> ¦ rakudo: vrurg++ created pull request #3544: Fix installation of perl6 aliases

[19:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3544

[19:06] * lizmat waits for Travis and Appveyor results

[19:12] *** Altai-man_ joined
[19:15] *** sena_kun left
[19:37] *** domidumont left
[20:19] <Geth> ¦ rakudo: 0736bf7d29 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[20:19] <Geth> ¦ rakudo: Streamline CU::RepositoryRegistry.setup-repositories

[20:19] <Geth> ¦ rakudo: 

[20:19] <Geth> ¦ rakudo: - part 1

[20:19] <Geth> ¦ rakudo: - avoid multiple lookups for the same key

[20:19] <Geth> ¦ rakudo: - replace "ab{$foo}bar" by "ab" ~ $foo ~ "bar"

[20:19] <Geth> ¦ rakudo:   The "ab{$foo}bar" construct should be avoided, especially if the

[20:19] <Geth> ¦ rakudo:   variable is a native, as it causes an actual Callable to be created,

[20:19] <Geth> ¦ rakudo:   which then gets called, and then coerced to a Str.  Whereas the

[20:19] <Geth> ¦ rakudo:   "ab" ~ $foo ~ "bar" construct basically codegens to nqp::concat()s.

[20:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0736bf7d29

[20:50] <Geth> ¦ rakudo: 437f9f4644 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[20:50] <Geth> ¦ rakudo: Streamline CU::RepositoryRegistry.setup-repositories

[20:50] <Geth> ¦ rakudo: 

[20:50] <Geth> ¦ rakudo: - part 2

[20:50] <Geth> ¦ rakudo: - don't bind type if we don't need to

[20:50] <Geth> ¦ rakudo: - don't use nqp::iterator on temporary lists, just nqp::shift

[20:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/437f9f4644

[20:51] <lizmat> nine ugexe when we're precomping, must $custom-lib really be initialized ?

[21:05] <Geth> ¦ rakudo: 6e95e1b074 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[21:05] <Geth> ¦ rakudo: Streamline CU::RepositoryRegistry.setup-repositories

[21:05] <Geth> ¦ rakudo: 

[21:05] <Geth> ¦ rakudo: - part 3

[21:05] <Geth> ¦ rakudo: - move initial $next-repo initialization into non-precomp if

[21:05] <Geth> ¦ rakudo:   so we need to check that condition one time less

[21:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6e95e1b074

[21:14] *** sena_kun joined
[21:15] *** Altai-man_ left
[21:17] <nine> lizmat: yes

[21:17] <lizmat> okidoki

[21:18] <nine> lizmat: the module we're precompiling may have dependencies that we need to load. These dependencies may e.g. want to access their %?RESOURCES for which we want to access the repos by name

[21:19] <lizmat> unless nqp::existskey($custom-lib, 'vendor') {

[21:19] <lizmat> nqp::deletekey($custom-lib, 'vendor');

[21:19] <lizmat> }

[21:19] <lizmat> that dpesn't make any sense, right ?

[21:19] <lizmat> I mean if the key is not in there, the deletekey will be a noop 

[21:20] *** AlexDaniel left
[21:20] *** AlexDani` joined
[21:35] <MasterDuke> lizmat: have you benchmarked `if nqp::atkey() -> $foo { <do something with $foo> }` vs `if nqp::existskey() { $foo = nqp::atkey(); <do something with $foo> }`? ISTR some discussion that the first should be faster, but in my tests it isn't

[21:36] <lizmat> Masterduke: if it isn't faster, then we need to look at why it is not  :-)

[21:36] <lizmat> MasterDuke++   # sanity checking expectations

[21:36] <lizmat> it should be faster, because it is one less hash lookup

[21:37] <MasterDuke> m: use nqp; my %h; for ^2_000_000 { %h{$_} = $_ if 2.rand.Int }; my $a; my $b; my $s = now; for ^2_000_000 { $b = ~$_; if nqp::existskey(%h, $b) { $a += nqp::atkey(%h, $b) } } ; say $a; say now - $s

[21:37] <evalable6> MasterDuke, rakudo-moar 6e95e1b07: OUTPUT: «999528293698␤2.14564874␤»

[21:37] <MasterDuke> m: use nqp; my %h; for ^2_000_000 { %h{$_} = $_ if 2.rand.Int }; my $a; my $b; my $s = now; for ^2_000_000 { $b = ~$_; if nqp::atkey(%h, $b) -> $d { $a += $d } } ; say $a; say now - $s

[21:37] <evalable6> MasterDuke, rakudo-moar 6e95e1b07: OUTPUT: «1000604466125␤2.42742473␤»

[21:38] <MasterDuke> that's about what i see locally. 1.8s for atkey, 1.45s for existskey+atkey

[21:39] <MasterDuke> running the equivalent in nqp there's less of a difference, maybe none

[21:40] <MasterDuke> `my %h := nqp::hash; my int $a := 0; while $a++ < 2_000_000 { nqp::if(nqp::isgt_n(nqp::rand_n(2), 1), nqp::bindkey(%h, $a, $a)) }; my int $b := 0; my int $c := 0; my num $s := nqp::time_n(); while $b++ < 2_000_000 { if nqp::existskey(%h, $b) { $c := $c + nqp::atkey(%h, $b) } } ; say($c); say(nqp::sub_n(nqp::time_n(), $s))`

[21:40] <MasterDuke> vs

[21:40] <MasterDuke> `my %h := nqp::hash; my int $a := 0; while $a++ < 2_000_000 { nqp::if(nqp::isgt_n(nqp::rand_n(2), 1), nqp::bindkey(%h, $a, $a)) }; my int $b := 0; my int $c := 0; my num $s := nqp::time_n(); while $b++ < 2_000_000 { if nqp::atkey(%h, $b) -> $d { $c := $c + $d } } ; say($c); say(nqp::sub_n(nqp::time_n(), $s))`

[21:41] <MasterDuke> do those two pairs of tests look reasonable though?

[21:48] <lizmat> well...  in the CU case, the hashes are very much smaller

[21:48] <lizmat> maybe 10 elements max or so

[21:52] <MasterDuke> roughly the same result if i use an ~10 elem hash and just repeat the looping a bunch. i.e., `use nqp; my %h; for ^20 { %h{$_} = $_ if 2.rand.Int }; my $a; my $b; my $s = now; for ^100_000 { for ^20 { $b = ~$_; if nqp::atkey(%h, $b) -> $d { $a += $d } } }; say $a; say now - $s`

[21:55] <lizmat> m: use nqp; my $h := nqp::hash("a",1,"b",2,"c",3,"d",4,"e",5); for ^1000000 { if nqp::atkey($h,"a") -> \foo { } }; say now - INIT now

[21:55] <evalable6> lizmat, rakudo-moar 6e95e1b07: OUTPUT: «0.28330285␤»

[21:55] <lizmat> m: use nqp; my $h := nqp::hash("a",1,"b",2,"c",3,"d",4,"e",5); for ^1000000 { if nqp::existskey($h,"a") { my \foo = nqp::atkey($h,"a") } }; say now - INIT now

[21:55] <evalable6> lizmat, rakudo-moar 6e95e1b07: OUTPUT: «0.0593059␤»

[21:55] <lizmat> yes, clearly a big difference  :-(

[21:59] <lizmat> the existkey  case has no allocation

[21:59] <lizmat> the atkey case has *very* many

[22:00] <lizmat> looks like a BOOTCode object *and* an Int are allocated for each iteration  :-(

[22:04] *** squashable6 left
[22:06] <MasterDuke> yeah, perf is showing the top function at 18.5% is MVM_fixed_size_alloc for the atkey version

[22:06] *** squashable6 joined
[22:07] <MasterDuke> but for the existskey version, top at 35% is `<unit>(-e:1)`, 29% is exists_key, and 21.5% is at_key

[22:13] <lizmat> MasterDuke: it's a general issue with -> \foo { }

[22:13] <lizmat> m: my %h = "a",1,"b",2,"c",3,"d",4,"e",5; for ^1000000 { if %h.EXISTS-KEY("a") { my \foo = %h.AT-KEY("a") } }; say now - INIT now

[22:13] <evalable6> lizmat, rakudo-moar 6e95e1b07: OUTPUT: «0.0789675␤»

[22:13] <lizmat> m: my %h = "a",1,"b",2,"c",3,"d",4,"e",5; for ^1000000 { if %h.AT-KEY("a") -> \foo { } }; say now - INIT now

[22:13] <evalable6> lizmat, rakudo-moar 6e95e1b07: OUTPUT: «0.3266065␤»

[22:14] <lizmat> so it seems that the overhead of -> \foo drowns the extra hash lookup  :-(

[22:14] <lizmat> jnthn ^^

[22:27] <lizmat> m: my $a = 42; for ^1_000_000 { if $a { } }; say now - INIT now

[22:27] <evalable6> lizmat, rakudo-moar 6e95e1b07: OUTPUT: «0.0434298␤»

[22:27] <lizmat> m: my $a = 42; for ^1_000_000 { if $a -> \foo { } }; say now - INIT now

[22:27] <evalable6> lizmat, rakudo-moar 6e95e1b07: OUTPUT: «0.28756503␤»

[22:29] <lizmat> m: my $a = 42; for ^1_000_000 { if $a -> \foo { my $c = foo } }; say now - INIT now

[22:30] <evalable6> lizmat, rakudo-moar 6e95e1b07: OUTPUT: «0.30326269␤»

[22:30] <lizmat> m: my $a = 42; for ^1_000_000 { if my $b := $a { my $c = $b } }; say now - INIT now

[22:30] <evalable6> lizmat, rakudo-moar 6e95e1b07: OUTPUT: «0.086466␤»

[22:31] <lizmat> jnthn: not sure how often you use the if expr -> $foo { } construct, but it feels like low-hanging optimization fruit

[22:34] <Geth> ¦ rakudo: 6723d3ad0e | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[22:34] <Geth> ¦ rakudo: Streamline CU::RepositoryRegistry.setup-repositories

[22:34] <Geth> ¦ rakudo: 

[22:34] <Geth> ¦ rakudo: - part 4

[22:34] <Geth> ¦ rakudo: - remove code that will never be run

[22:34] <Geth> ¦ rakudo: - reorganize code a bit for a more logical order

[22:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6723d3ad0e

[22:36] *** tbrowder left
[22:40] *** tbrowder joined
[22:52] <MasterDuke> ~100 uses in the rakudo source

[22:56] *** kawaii left
[22:56] *** zostay left
[22:56] *** lucasb left
[22:57] <lizmat> yeah... let's see what jnthn thinks about it

[23:00] *** zostay joined
[23:03] <Geth> ¦ rakudo: aeb418a5fd | (Vadim Belman)++ | 3 files

[23:03] <Geth> ¦ rakudo: Fix installation of perl6 aliases

[23:03] <Geth> ¦ rakudo: 

[23:03] <Geth> ¦ rakudo: Full duplication of all `rakudo-*` executables

[23:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aeb418a5fd

[23:03] <Geth> ¦ rakudo: 1fad174ca1 | (Vadim Belman)++ (committed using GitHub Web editor) | 3 files

[23:03] <Geth> ¦ rakudo: Merge pull request #3544 from vrurg/fix-perl6-aliases-install

[23:03] <Geth> ¦ rakudo: 

[23:03] <Geth> ¦ rakudo: Fix installation of perl6 aliases

[23:03] *** lucasb joined
[23:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1fad174ca1

[23:03] *** kawaii joined
[23:06] <Geth> ¦ rakudo: 24fd100da2 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[23:06] <Geth> ¦ rakudo: Streamline CU::RepositoryRegistry.setup-repositories

[23:06] <Geth> ¦ rakudo: 

[23:06] <Geth> ¦ rakudo: - part 5

[23:06] <Geth> ¦ rakudo: - avoid if expr -> \foo {

[23:06] <Geth> ¦ rakudo:   Turns out this construct is in very bad need of optimization

[23:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/24fd100da2

[23:06] <lizmat> and that concludes my hacking for today

[23:12] *** Altai-man_ joined
[23:14] *** MasterDuke left
[23:15] *** sena_kun left
[23:20] *** AlexDani` is now known as AlexDaniel

[23:20] *** AlexDaniel left
[23:20] *** AlexDaniel joined
[23:20] <japhb> lizmat: do you have a doc somewhere that has a list of your collected streamlining / micro-optimization techniques?  I think that would be really valuable for people who need a fast inner loop *now*, and can't wait for long term optimization work.

[23:21] <AlexDaniel> ja

[23:21] <AlexDaniel> japhb: it's not that simple

[23:22] <japhb> For example, there is some code where I would happily make a separate file of "ugly but FAST inner loops" and call subs there from some of my never-fast-enough projects.

[23:22] <AlexDaniel> at least in my experience a lot of the changes are very delicate and depend on the optimizations provided by the compiler itself

[23:22] <japhb> AlexDaniel: Yes, I know -- but there seem to be a few that she uses all the time.

[23:23] <japhb> And the key thing for me is that are use cases where I want it fast *now*, despite the effort, and I'm happy to rewrite later if the relative performance changes happen

[23:23] *** ChanServ sets mode: +o AlexDaniel

[23:23] *** ChanServ sets mode: -o AlexDaniel

[23:25] *** camelia joined
[23:25] <AlexDaniel> m: say 42

[23:26] <camelia> rakudo-moar 24fd100da: OUTPUT: «42␤»

[23:46] *** MasterDuke joined
