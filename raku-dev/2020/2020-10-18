[00:58] *** greppable6 left
[00:58] *** quotable6 left
[00:58] *** benchable6 left
[00:58] *** nativecallable6 left
[00:58] *** sourceable6 left
[00:58] *** bisectable6 left
[00:58] *** bloatable6 left
[00:58] *** unicodable6 left
[00:58] *** linkable6 left
[00:58] *** committable6 left
[00:58] *** shareable6 left
[00:58] *** notable6 left
[00:58] *** evalable6 left
[00:58] *** tellable6 left
[00:58] *** squashable6 left
[00:58] *** releasable6 left
[00:58] *** coverable6 left
[00:58] *** statisfiable6 left
[00:59] *** nativecallable6 joined
[00:59] *** unicodable6 joined
[00:59] *** quotable6 joined
[00:59] *** committable6 joined
[01:00] *** evalable6 joined
[01:00] *** bisectable6 joined
[01:00] *** tellable6 joined
[01:00] *** shareable6 joined
[01:00] *** statisfiable6 joined
[01:00] *** benchable6 joined
[01:00] *** sourceable6 joined
[01:00] *** bloatable6 joined
[01:01] *** releasable6 joined
[01:01] *** linkable6 joined
[01:01] *** greppable6 joined
[01:01] *** coverable6 joined
[01:02] *** squashable6 joined
[01:02] *** notable6 joined
[01:28] *** leont left
[02:43] *** Kaiepi left
[02:43] *** Kaiepi joined
[03:00] <releasable6> Next release in ≈6 days and ≈15 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[04:33] *** lucasb left
[05:37] *** MasterDuke left
[07:07] *** sena_kun joined
[07:17] *** finsternis left
[07:18] *** finsternis joined
[08:17] <Geth_> ¦ problem-solving: JJ assigned to rba Issue Manage GitHub organization secrets https://github.com/Raku/problem-solving/issues/240

[09:05] <lizmat> Files=1336, Tests=113707, 220 wallclock secs (29.45 usr  8.52 sys + 3073.97 cusr 295.41 csys = 3407.35 CPU)

[09:08] <Geth_> ¦ rakudo: lizmat assigned to patrickbkr Issue ===SORRY!=== nqp-m outdated +build crash https://github.com/rakudo/rakudo/issues/3964

[09:20] *** Altai-man joined
[09:23] *** sena_kun left
[10:01] <lizmat> m: sub foo(\a) { a(42) }; foo { .say }   # that's LTA

[10:01] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '&a' is not declared␤at <tmp>:1␤------> 3sub foo(\a) { 7⏏5a(42) }; foo { .say }   # that's LTA␤»

[10:01] <lizmat> seems to happen in the optimizer

[10:18] <timotimo> m: sub foo(\a) { a.(42) }; foo { .say }

[10:18] <camelia> rakudo-moar 85847d2f1: OUTPUT: «42␤»

[10:19] <timotimo> consequence of a() being syntax for &a.() i guess?

[10:20] <timotimo> you're saying it should give a "did you mean a.()" as a suggestion?

[10:20] <lizmat> I'm not sure why it is considered to be an error ?

[10:22] * lizmat will use the .() workaround  :-)

[10:23] *** evalable6 left
[10:23] *** linkable6 left
[10:25] <timotimo> hm

[10:25] <timotimo> m: sub foo(\A) { a(42) }; foo { .say }

[10:25] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[10:25] *** evalable6 joined
[10:25] <timotimo> m: sub foo(\A) { A(42) }; foo { .say }

[10:25] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '&A' is not declared␤at <tmp>:1␤------> 3sub foo(\A) { 7⏏5A(42) }; foo { .say }␤»

[10:26] *** linkable6 joined
[10:26] <lizmat> you don't even need a signature for it:

[10:26] <lizmat> m: my \a = sub foo(|c) { dd |c }; a()

[10:26] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '&a' is not declared␤at <tmp>:1␤------> 3my \a = sub foo(|c) { dd |c }; 7⏏5a()␤»

[10:26] <timotimo> right

[10:26] <lizmat> timotimo: don't worry about it, I was just a bit  WAT

[10:26] <timotimo> this is purely a question of syntax

[10:26] <lizmat> I understand why it is doing this now

[10:27] <timotimo> yes but it's definitely give us a suggestion2

[10:27] <lizmat> and since the optimizer will get a rewrite in rakuast anyway

[10:27] <timotimo> should

[10:27] <lizmat> I wouldn't spend any further time on it

[10:27] <timotimo> okay

[10:28] <lizmat> working on getting things like @a[1;*;3] to work, also with adverbs

[10:31] <timotimo> yes that sounds like valuable work

[10:47] <Geth_> ¦ rakudo: 1971ba4642 | (Elizabeth Mattijsen)++ | src/core.e/hash_multislice.pm6

[10:47] <Geth_> ¦ rakudo: Simplify :exists handling on %h{;}

[10:47] <Geth_> ¦ rakudo: 

[10:47] <Geth_> ¦ rakudo: Just post-process the result in case of :!exists, as it will most

[10:47] <Geth_> ¦ rakudo: likely be the less common thing to see.

[10:47] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1971ba4642

[11:47] <lizmat> m: multi a(\a,@b) { dd }; multi a(\a,@b,:$foo) { dd }; a 42, []    # so why does that dispatch to the one with the optional named ?

[11:47] <camelia> rakudo-moar 85847d2f1: OUTPUT: «sub a(\a, @b, :$foo)␤»

[11:49] <lizmat> m: multi a() is default { dd }; multi a(:$foo) { dd }; a'   # golfed

[11:49] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3default { dd }; multi a(:$foo) { dd }; a7⏏5'   # golfed␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤       …»

[11:49] <lizmat> m: multi a() is default { dd }; multi a(:$foo) { dd }; a   # golfed

[11:49] <camelia> rakudo-moar 85847d2f1: OUTPUT: «sub a(:$foo)␤»

[11:49] <lizmat> m: multi a() { dd }; multi a(:$foo) { dd }; a   # golfed further

[11:49] <camelia> rakudo-moar 85847d2f1: OUTPUT: «sub a(:$foo)␤»

[11:50] <timotimo> because it can :D

[12:05] *** leont joined
[12:25] *** MasterDuke joined
[12:31] *** leont left
[12:37] *** MasterDuke left
[13:21] *** sena_kun joined
[13:23] *** Altai-man left
[13:37] *** MasterDuke joined
[13:45] *** ggoebel left
[14:17] <Geth_> ¦ roast: MasterDuke17++ created pull request #688: Cover some Bool stuff

[14:17] <Geth_> ¦ roast: review: https://github.com/Raku/roast/pull/688

[14:17] *** ggoebel joined
[14:31] *** [TuxCM] left
[15:10] <[Tux]> Rakudo version 2020.09-65-g1971ba464 - MoarVM version 2020.09-12-g8c41f6692

[15:10] <[Tux]> csv-test-xs-20      0.387 -  0.392

[15:10] <[Tux]> csv-ip5xs           0.825 -  0.847

[15:10] <[Tux]> test-t --race       0.895 -  0.933

[15:10] <[Tux]> test-t              1.890 -  2.172

[15:10] <[Tux]> test                7.904 -  8.107

[15:10] <[Tux]> csv-ip5xs-20        8.403 -  8.552

[15:10] <[Tux]> test-t-20 --race    9.412 - 10.038

[15:10] <[Tux]> csv-parser         25.238 - 27.566

[15:10] <[Tux]> test-t-20          32.039 - 32.463

[15:31] *** ggoebel left
[15:56] *** ggoebel joined
[15:58] *** ggoebel_ joined
[16:01] *** ggoebel left
[16:11] <Geth_> ¦ rakudo/remove-restricted-setting: 26ec428ade | (Aleks-Daniel Jakimenko-Aleksejev)++ | 5 files

[16:11] <Geth_> ¦ rakudo/remove-restricted-setting: Remove RESTRICTED setting

[16:11] <Geth_> ¦ rakudo/remove-restricted-setting: 

[16:11] <Geth_> ¦ rakudo/remove-restricted-setting: RESTRICTED settings looks as if it is a security feature, but this

[16:11] <Geth_> ¦ rakudo/remove-restricted-setting: issue cannot be approached with a blacklist. For example, the things

[16:11] <Geth_> ¦ rakudo/remove-restricted-setting: that it blacklists are still available through method calls and

[16:11] <Geth_> ¦ rakudo/remove-restricted-setting: nativecall, and there is just no way to plug all the possible

[16:11] <Geth_> ¦ rakudo/remove-restricted-setting: holes. Moreover, those who actually need to run code securely will

[16:11] <Geth_> ¦ rakudo/remove-restricted-setting: <…commit message has 10 more lines…>

[16:11] <Geth_> ¦ rakudo/remove-restricted-setting: review: https://github.com/rakudo/rakudo/commit/26ec428ade

[16:11] <Geth_> ¦ rakudo: AlexDaniel++ created pull request #3965: Remove RESTRICTED setting

[16:11] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3965

[16:12] <Geth_> ¦ roast: d4c131f6e2 | (Daniel Green)++ | S02-types/bool.t

[16:12] <Geth_> ¦ roast: Cover some Bool stuff

[16:12] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/d4c131f6e2

[16:12] <Geth_> ¦ roast: a64a289e09 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S02-types/bool.t

[16:12] <Geth_> ¦ roast: Merge pull request #688 from MasterDuke17/some_bool_coverage_tests

[16:12] <Geth_> ¦ roast: 

[16:12] <Geth_> ¦ roast: Cover some Bool stuff

[16:12] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/a64a289e09

[16:18] *** Kaiepi left
[16:20] *** ggoebel_ left
[16:20] *** Kaiepi joined
[16:25] <Geth_> ¦ rakudo/remove-restricted-setting: 6ad69ab7d4 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 5 files

[16:25] <Geth_> ¦ rakudo/remove-restricted-setting: Remove RESTRICTED setting

[16:25] <Geth_> ¦ rakudo/remove-restricted-setting: 

[16:25] <Geth_> ¦ rakudo/remove-restricted-setting: RESTRICTED settings looks as if it is a security feature, but this

[16:25] <Geth_> ¦ rakudo/remove-restricted-setting: issue cannot be approached with a blacklist. For example, the things

[16:25] <Geth_> ¦ rakudo/remove-restricted-setting: that it blacklists are still available through method calls and

[16:25] <Geth_> ¦ rakudo/remove-restricted-setting: nativecall, and there is just no way to plug all the possible

[16:25] <Geth_> ¦ rakudo/remove-restricted-setting: holes. Moreover, those who actually need to run code securely will

[16:25] <Geth_> ¦ rakudo/remove-restricted-setting: <…commit message has 10 more lines…>

[16:25] <Geth_> ¦ rakudo/remove-restricted-setting: review: https://github.com/rakudo/rakudo/commit/6ad69ab7d4

[16:31] *** domidumont joined
[16:43] <sena_kun> Ouch, I see some regressions. :(

[16:46] <Geth_> ¦ rakudo: Altai-man assigned to niner Issue Blin 2020.10, round 1 https://github.com/rakudo/rakudo/issues/3966

[16:46] <Geth_> ¦ rakudo: Altai-man assigned to lizmat Issue Blin 2020.10, round 1 https://github.com/rakudo/rakudo/issues/3966

[17:00] <nine> I wonder if my uncommitted fix will help there

[17:20] *** Altai-man joined
[17:23] *** sena_kun left
[17:37] *** domidumont left
[17:37] *** lucasb joined
[18:33] *** domidumont joined
[18:34] *** domidumont left
[19:01] *** Geth_ left
[19:57] *** ggoebel_ joined
[20:04] *** patrickb joined
[20:19] *** patrickb left
[20:29] * lizmat pings tyil because Geth has gone AWOL

[20:29] *** Geth joined
[20:29] <tyil> lizmat: he's back :>

[20:29] <lizmat> whee!

[20:30] <lizmat> tyil++

[20:30] * lizmat just merged https://github.com/Raku/roast/pull/689

[20:40] *** Altai-man left
[21:26] *** vrurg left
[21:48] *** vrurg joined
[21:49] *** vrurg left
[21:49] *** vrurg joined
[21:49] *** vrurg left
[23:00] <releasable6> Next release in ≈5 days and ≈19 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

