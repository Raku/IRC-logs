[00:11] *** sena_kun joined
[00:13] *** Altai-man left
[00:29] *** Summertime left
[00:34] *** Summertime joined
[00:46] *** maggotbrain left
[00:47] *** sena_kun left
[01:55] *** evalable6 left
[01:55] *** nativecallable6 left
[01:55] *** sourceable6 left
[01:55] *** squashable6 left
[01:55] *** coverable6 left
[01:55] *** benchable6 left
[01:55] *** notable6 left
[01:55] *** statisfiable6 left
[01:55] *** bisectable6 left
[01:55] *** linkable6 left
[01:55] *** greppable6 left
[01:55] *** unicodable6 left
[01:55] *** quotable6 left
[01:55] *** releasable6 left
[01:55] *** tellable6 left
[01:55] *** shareable6 left
[01:55] *** committable6 left
[01:55] *** bloatable6 left
[01:56] *** notable6 joined
[01:56] *** benchable6 joined
[01:56] *** unicodable6 joined
[01:56] *** greppable6 joined
[01:56] *** nativecallable6 joined
[01:56] *** quotable6 joined
[01:56] *** statisfiable6 joined
[01:57] *** sourceable6 joined
[01:57] *** bloatable6 joined
[01:57] *** coverable6 joined
[01:57] *** releasable6 joined
[01:57] *** linkable6 joined
[01:57] *** bisectable6 joined
[01:57] *** shareable6 joined
[01:58] *** evalable6 joined
[01:58] *** squashable6 joined
[01:58] *** committable6 joined
[01:59] *** tellable6 joined
[03:35] *** coverable6 left
[03:35] *** squashable6 left
[03:35] *** greppable6 left
[03:35] *** unicodable6 left
[03:35] *** evalable6 left
[03:35] *** linkable6 left
[03:35] *** bloatable6 left
[03:35] *** nativecallable6 left
[03:35] *** benchable6 left
[03:35] *** shareable6 left
[03:35] *** bisectable6 left
[03:35] *** committable6 left
[03:35] *** statisfiable6 left
[03:35] *** tellable6 left
[03:35] *** releasable6 left
[03:35] *** notable6 left
[03:35] *** sourceable6 left
[03:35] *** quotable6 left
[03:35] *** squashable6 joined
[03:35] *** bloatable6 joined
[03:35] *** releasable6 joined
[03:35] *** committable6 joined
[03:35] *** linkable6 joined
[03:36] *** benchable6 joined
[03:36] *** unicodable6 joined
[03:36] *** tellable6 joined
[03:36] *** quotable6 joined
[03:36] *** statisfiable6 joined
[03:36] *** greppable6 joined
[03:37] *** bisectable6 joined
[03:37] *** sourceable6 joined
[03:37] *** nativecallable6 joined
[03:37] *** coverable6 joined
[03:37] *** evalable6 joined
[03:38] *** shareable6 joined
[03:38] *** notable6 joined
[05:18] *** greppable6 left
[05:18] *** committable6 left
[05:18] *** nativecallable6 left
[05:18] *** shareable6 left
[05:18] *** statisfiable6 left
[05:18] *** tellable6 left
[05:18] *** benchable6 left
[05:18] *** squashable6 left
[05:18] *** sourceable6 left
[05:18] *** notable6 left
[05:18] *** evalable6 left
[05:18] *** releasable6 left
[05:18] *** bloatable6 left
[05:18] *** bisectable6 left
[05:18] *** quotable6 left
[05:18] *** unicodable6 left
[05:18] *** linkable6 left
[05:18] *** coverable6 left
[05:18] *** notable6 joined
[05:18] *** unicodable6 joined
[05:18] *** squashable6 joined
[05:19] *** committable6 joined
[05:19] *** releasable6 joined
[05:19] *** nativecallable6 joined
[05:19] *** greppable6 joined
[05:19] *** evalable6 joined
[05:20] *** sourceable6 joined
[05:20] *** shareable6 joined
[05:20] *** bisectable6 joined
[05:20] *** benchable6 joined
[05:20] *** bloatable6 joined
[05:20] *** statisfiable6 joined
[05:20] *** linkable6 joined
[05:21] *** quotable6 joined
[05:21] *** tellable6 joined
[05:21] *** coverable6 joined
[05:49] *** frost-lab joined
[06:33] *** sena_kun joined
[08:10] *** Altai-man joined
[08:13] *** sena_kun left
[08:15] *** raku-bridge left
[08:15] *** raku-bridge joined
[08:19] <Geth_> ¦ nqp: 3f1dcfe874 | Altai-man++ | tools/templates/MOAR_REVISION

[08:19] <Geth_> ¦ nqp: [MoarVM Bump] Brings 2 commits

[08:19] <Geth_> ¦ nqp: 

[08:19] <Geth_> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2020.10-31-gb13f6a24c...2020.10-33-g76ea45804

[08:19] <Geth_> ¦ nqp: 76ea45804 Merge pull request #1380 from MoarVM/serialize-cstr

[08:19] <Geth_> ¦ nqp: 3c5deb2f6 Implement serialize/deserialize of CStr REPR

[08:19] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/3f1dcfe874

[08:19] <Geth_> ¦ rakudo: 06b01c9191 | Altai-man++ | tools/templates/NQP_REVISION

[08:19] <Geth_> ¦ rakudo: [NQP Bump] 3f1dcfe87 [MoarVM Bump] Brings 2 co […]

[08:19] <Geth_> ¦ rakudo: 

[08:19] <Geth_> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2020.10-71-g545a98850...2020.10-72-g3f1dcfe87

[08:19] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/06b01c9191

[09:36] *** TreyHarris left
[09:58] <Altai-man> releasable6, status

[09:58] <releasable6> Altai-man, Next release in ≈9 hours. 1 blocker. 0 out of 144 commits logged

[09:58] <releasable6> Altai-man, Details: https://gist.github.com/aa576130c048cfc326a7fd2a75d40742

[10:09] <nwc10> good *, #raku-dev

[10:12] <Altai-man> o/

[10:13] <nwc10> \o

[10:26] <Altai-man> This month's release is very juicy...

[10:26] <Altai-man> releasable6, status

[10:27] <releasable6> Altai-man, Next release in ≈8 hours. 1 blocker. 28 out of 144 commits logged

[10:27] <releasable6> Altai-man, Details: https://gist.github.com/0a1eb68d3b960cce611be1907cbfd986

[10:29] <Altai-man> releasable6, say Array::ShapedArray

[10:29] <releasable6> Altai-man, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Releasable

[10:29] <Altai-man> c: say Array::ShapedArray

[10:29] <committable6> Altai-man, Seems like you forgot to specify a revision (will use “v6.c” instead of “say”)

[10:29] <Altai-man> c: Array::ShapedArray.say

[10:29] <committable6> Altai-man, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Committable

[10:29] <Altai-man> c: v6.c Array::ShapedArray.say

[10:29] <committable6> Altai-man, https://gist.github.com/45d072dc088173ac06ca14efb233d450

[10:29] <committable6> Altai-man, https://gist.github.com/bb12f5c2b56693c03e2156becef6beaf

[10:31] <MasterDuke> Altai-man: iirc, it was renamed to Array::Shaped

[10:31] <MasterDuke> m: say Array::ShapedArray; say Array::Shaped

[10:31] <camelia> rakudo-moar 06b01c919: OUTPUT: «Could not find symbol '&ShapedArray' in 'Array'␤  in block <unit> at <tmp> line 1␤␤»

[10:31] <MasterDuke> m: say Array::Shaped

[10:31] <camelia> rakudo-moar 06b01c919: OUTPUT: «(Shaped)␤»

[10:31] <Altai-man> MasterDuke, I am just documenting `Expose Array::Shaped1|2|3Array roles [532b5423]` and trying to get how exactly "exposed" that is...

[10:31] <Altai-man> Is it "Internal" or "Additions" for the release. :)

[10:32] <MasterDuke> those are my scoped i believe, so internal

[10:32] <Altai-man> MasterDuke, those commits remove `my` scoping, that's the thing. :)

[10:32] <Altai-man> Anyway, marked as Internal.

[10:33] <Altai-man> 1086 out of 1553 modules processed

[10:33] <MasterDuke> oh, maybe i'm a little behind HEAD

[10:33] <Altai-man> Blin is much faster than me writing a changelog with so many things, so kudos to all who contributed.

[10:38] *** raku-bridge left
[10:38] <AlexDaniel`> is that with Pakku?

[10:38] *** raku-bridge joined
[10:38] *** raku-bridge left
[10:38] *** raku-bridge joined
[10:38] <Altai-man> AlexDaniel`, with zef.

[10:39] <Altai-man> I did some extensive testing with Pakku last weeks, but for releasing prefer the usual route.

[11:07] <Altai-man> releasable6, status

[11:07] <releasable6> Altai-man, Next release in ≈7 hours. 1 blocker. 107 out of 144 commits logged

[11:07] <releasable6> Altai-man, Details: https://gist.github.com/41e94faaeeb87f69856597647db1f905

[11:09] *** domidumont joined
[11:19] <Altai-man> releasable6, status

[11:19] <releasable6> Altai-man, Next release in ≈7 hours. 1 blocker. 144 out of 144 commits logged

[11:19] <releasable6> Altai-man, Details: https://gist.github.com/53d2aa0d39aa4085ef79dff9e407c3ab

[11:58] *** frost-lab left
[12:12] *** sena_kun joined
[12:13] *** Altai-man left
[12:46] <Geth_> ¦ roast/6.c-errata: 66b56f702c | Altai-man++ | S32-exceptions/misc.t

[12:46] <Geth_> ¦ roast/6.c-errata: Binding to hash/array slices is now possible

[12:46] <Geth_> ¦ roast/6.c-errata: review: https://github.com/Raku/roast/commit/66b56f702c

[12:57] <Geth_> ¦ rakudo/release-2020.11: 3805f7bf22 | Altai-man++ | 3 files

[12:57] <Geth_> ¦ rakudo/release-2020.11: Update changelog + announcement

[12:57] <Geth_> ¦ rakudo/release-2020.11: 

[12:57] <Geth_> ¦ rakudo/release-2020.11: Deliberately not logged:

[12:57] <Geth_> ¦ rakudo/release-2020.11: 

[12:57] <Geth_> ¦ rakudo/release-2020.11: 78b03b6 f4b38a1 7176cbc b129f31 23f67fe 5552434 5ee3d53 06b01c9

[12:57] <Geth_> ¦ rakudo/release-2020.11: 746c599 41d8956 084b92a 9be9a5c 42c4c1e 2fe6420 46477cd 2a5dd9e

[12:57] <Geth_> ¦ rakudo/release-2020.11: 1f090e0 9070d5c 6ed8891 fb32d0c 9976cab 8310690 e074f3c 6f31494

[12:57] <Geth_> ¦ rakudo/release-2020.11: 5f0da2b ebc9517 fb60e48 32230aa 6542f10 d3acd86 c54193e f6a33b8

[12:57] <Geth_> ¦ rakudo/release-2020.11: 44d037d

[12:57] <Geth_> ¦ rakudo/release-2020.11: review: https://github.com/rakudo/rakudo/commit/3805f7bf22

[12:58] <Geth_> ¦ rakudo: Altai-man++ created pull request #4053: Release 2020.11

[12:58] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4053

[12:58] <sena_kun> No.

[12:58] <sena_kun> NO NO NO.

[12:59] <sena_kun> NMAKE : fatal error U1073: don't know how to make 'gen/nqp-version'

[13:00] <sena_kun> Sigh.

[13:43] <Geth_> ¦ nqp: 689982a3d6 | Altai-man++ | tools/templates/MOAR_REVISION

[13:43] <Geth_> ¦ nqp: [release] Bump MoarVM revision to 2020.11

[13:43] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/689982a3d6

[13:43] <Geth_> ¦ nqp: 46dc8f503c | Altai-man++ | VERSION

[13:43] <Geth_> ¦ nqp: [release] Bump VERSION to 2020.11

[13:43] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/46dc8f503c

[13:44] <Geth_> ¦ rakudo/release-2020.11: 957935a29e | Altai-man++ | tools/templates/NQP_REVISION

[13:44] <Geth_> ¦ rakudo/release-2020.11: [release] Bump NQP revision to 2020.11

[13:44] <Geth_> ¦ rakudo/release-2020.11: review: https://github.com/rakudo/rakudo/commit/957935a29e

[13:44] <Geth_> ¦ rakudo/release-2020.11: 34faae566b | Altai-man++ | VERSION

[13:44] <Geth_> ¦ rakudo/release-2020.11: [release] Bump VERSION to 2020.11

[13:44] <Geth_> ¦ rakudo/release-2020.11: review: https://github.com/rakudo/rakudo/commit/34faae566b

[13:46] <Geth_> ¦ rakudo/master: 4 commits pushed by Altai-man++

[13:46] <Geth_> ¦ rakudo/master: 3805f7bf22 | Update changelog + announcement

[13:46] <Geth_> ¦ rakudo/master: 957935a29e | [release] Bump NQP revision to 2020.11

[13:46] <Geth_> ¦ rakudo/master: 34faae566b | [release] Bump VERSION to 2020.11

[13:46] <Geth_> ¦ rakudo/master: 214df49c3c | Merge pull request #4053 from rakudo/release-2020.11

[13:46] <Geth_> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/06b01c919118...214df49c3c17

[13:57] <Geth_> ¦ rakudo: a3755971af | (Elizabeth Mattijsen)++ | docs/announce/2020.11.md

[13:57] <Geth_> ¦ rakudo: Fix spello in announcement

[13:57] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a3755971af

[13:58] <lizmat> sena_kun++   # yet another Rakudo Compiler release!

[13:58] <sena_kun> Dammit.

[13:58] <lizmat> sena_kun: no worries :-)

[13:59] <sena_kun> That's really unfortunate, it's like the largest thing introduced, it's the first line people will read...

[14:00] <lizmat> shit happens...  I will link to the updated announcement in the RWN, so it won't be that bad there  :-)

[14:01] <Geth_> ¦ rakudo: 4ac0f73736 | (Peter du Marchie van Voorthuysen)++ | src/core.c/array_operators.pm6

[14:01] <Geth_> ¦ rakudo: Optimize some array operators

[14:01] <Geth_> ¦ rakudo: 

[14:01] <Geth_> ¦ rakudo: Raw slurpies are more efficient.

[14:01] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4ac0f73736

[14:01] <Geth_> ¦ rakudo: 1cd8765e69 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/array_operators.pm6

[14:01] <Geth_> ¦ rakudo: Merge pull request #4050 from dumarchie/array_operators

[14:01] <Geth_> ¦ rakudo: 

[14:01] <Geth_> ¦ rakudo: Optimize some array operators

[14:01] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1cd8765e69

[14:06] <sena_kun> lizmat, the URL in tweet points to master, so the typo fix is already there. It's Changelog packed in the sources for this release affected, but hopefully people don't read it that much, I suspect.

[14:06] * sena_kun afk

[14:10] <Geth_> ¦ Blin: hythm7++ created pull request #28: Change Pakku verbosity level from trace to info

[14:10] <Geth_> ¦ Blin: review: https://github.com/Raku/Blin/pull/28

[14:28] <Geth_> ¦ rakudo: 484f870c87 | (Peter du Marchie van Voorthuysen)++ | src/core.c/atomicops.pm6

[14:28] <Geth_> ¦ rakudo: Make cas($target, &code) ~10% faster

[14:28] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/484f870c87

[14:28] <Geth_> ¦ rakudo: 96ab6eba55 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/atomicops.pm6

[14:28] <Geth_> ¦ rakudo: Merge pull request #4042 from dumarchie/cas

[14:28] <Geth_> ¦ rakudo: 

[14:28] <Geth_> ¦ rakudo: Make cas($target, &code) ~17% faster

[14:28] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/96ab6eba55

[14:32] <bartolin> sena_kun++

[14:45] *** lucasb joined
[15:17] <Geth_> ¦ rakudo: 534cc543b8 | (Ben Davies)++ | src/core.c/IO/Socket/INET.pm6

[15:17] <Geth_> ¦ rakudo: Type IO::Socket::INET family/type/protocol values

[15:17] <Geth_> ¦ rakudo: 

[15:17] <Geth_> ¦ rakudo: This changes the type of IO::Socket::INET.new's :$family parameter from

[15:17] <Geth_> ¦ rakudo: Int to ProtocolFamily:D(Int:D) (removing their invalid Int:U typing) and

[15:17] <Geth_> ¦ rakudo: gives the class' $!family/$!type/$!proto attributes explicit

[15:17] <Geth_> ¦ rakudo: ProtocolFamily:D/SocketType:D/ProtocolType:D typings (meaning they no

[15:17] <Geth_> ¦ rakudo: longer accept raw Int:D values corresponding to those types' enum

[15:17] <Geth_> ¦ rakudo: values).

[15:17] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/534cc543b8

[15:17] <Geth_> ¦ rakudo: f7ab4f508a | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/IO/Socket/INET.pm6

[15:17] <Geth_> ¦ rakudo: Merge pull request #4047 from Kaiepi/io-socket-inet-enums

[15:17] <Geth_> ¦ rakudo: 

[15:18] <Geth_> ¦ rakudo: Type IO::Socket::INET family/type/protocol values

[15:18] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f7ab4f508a

[15:18] <Geth_> ¦ roast: be962b7d35 | (Ben Davies)++ | S32-io/IO-Socket-INET.t

[15:18] <Geth_> ¦ roast: Add a test for invalid Int:D families given to IO::Socket::INET.new

[15:18] <Geth_> ¦ roast: 

[15:18] <Geth_> ¦ roast: My first attempt at https://github.com/rakudo/rakudo/pull/4047 typed

[15:18] <Geth_> ¦ roast: families as ProtocolFamily(Int:D). This passed Roast despite making the

[15:18] <Geth_> ¦ roast: method accept invalid Int:D values.

[15:18] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/be962b7d35

[15:18] <Geth_> ¦ roast: ee0cc1da22 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S32-io/IO-Socket-INET.t

[15:18] <Geth_> ¦ roast: Merge pull request #702 from Kaiepi/io-socket-inet-enums

[15:18] <Geth_> ¦ roast: 

[15:18] <Geth_> ¦ roast: Add a test for invalid Int:D families for IO::Socket::INET.new

[15:18] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/ee0cc1da22

[15:19] <Geth_> ¦ rakudo: f2ea0a65b3 | (Elizabeth Mattijsen)++ | 2 files

[15:19] <Geth_> ¦ rakudo: Allow for a contentless spurt

[15:19] <Geth_> ¦ rakudo: 

[15:19] <Geth_> ¦ rakudo: To give "touch" like capability.  This can already be achieved by

[15:19] <Geth_> ¦ rakudo: explicitely specifying "", so maybe we should emphasize that in the

[15:19] <Geth_> ¦ rakudo: documentation instead.

[15:19] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f2ea0a65b3

[15:20] <Geth_> ¦ rakudo: 737560e88e | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[15:20] <Geth_> ¦ rakudo: Merge pull request #4032 from rakudo/empty-spurt

[15:20] <Geth_> ¦ rakudo: 

[15:20] <Geth_> ¦ rakudo: Allow for a contentless spurt

[15:20] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/737560e88e

[15:23] <Geth_> ¦ Blin: 2df623e862 | (Haytham Elganiny)++ | lib/Blin/Tester/Pakku.rakumod

[15:23] <Geth_> ¦ Blin: Change Pakku verbosity level from trace to info

[15:23] <Geth_> ¦ Blin: review: https://github.com/Raku/Blin/commit/2df623e862

[15:23] <Geth_> ¦ Blin: 99e3335fa9 | Altai-man++ (committed using GitHub Web editor) | lib/Blin/Tester/Pakku.rakumod

[15:23] <Geth_> ¦ Blin: Merge pull request #28 from hythm7/master

[15:23] <Geth_> ¦ Blin: 

[15:23] <Geth_> ¦ Blin: Change Pakku verbosity level from trace to info

[15:23] <Geth_> ¦ Blin: review: https://github.com/Raku/Blin/commit/99e3335fa9

[15:27] * dogbert17 is trying to pinpoint a perf regression

[15:29] <sena_kun> Ouch.

[15:29] <sena_kun> Ouch-ouch.

[15:30] <sena_kun> dogbert17, is it bad?

[15:30] <sena_kun> I did not spot any _serious_ issues with stage PARSE or with spec/stresstest.

[15:32] <dogbert17> sena_kun: i have one script which is between 25-30 percent slower that 2020.10

[15:33] <dogbert17> I belive that the regression is relatively recent though

[15:34] <lizmat> dogbert17: please golf  :-)

[15:36] <dogbert17> trying to find the offending commit atm

[15:37] <dogbert17> here's the script, perhaps something jump out: https://gist.github.com/dogbert17/1864d40202b83e198401679defbc1fc0

[15:38] <sena_kun> Something related to native ints, but I thought we optimized those...

[15:38] <dogbert17> I belive one optimization was removed before release

[15:38] <dogbert17> *believe

[15:41] <lizmat> I don't think I did anything to native arrays, just to native *1dim shaped* arrays ?

[15:45] <Geth_> ¦ rakudo: bd5eba4b60 | (Elizabeth Mattijsen)++ | src/core.c/Main.pm6

[15:45] <Geth_> ¦ rakudo: Introduce %*SUB-MAIN-OPTS<coerce-allomorphs-to>

[15:45] <Geth_> ¦ rakudo: 

[15:45] <Geth_> ¦ rakudo: This new SUB-MAIN-OPTS setting allows one to specify how allomorphs

[15:45] <Geth_> ¦ rakudo: should be coerced **prior** to being dispatched.  So suppose you have

[15:45] <Geth_> ¦ rakudo: a sub MAIN:

[15:45] <Geth_> ¦ rakudo: 

[15:45] <Geth_> ¦ rakudo:     sub MAIN(Int:D $value) {

[15:45] <Geth_> ¦ rakudo: <…commit message has 15 more lines…>

[15:45] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bd5eba4b60

[15:45] <Geth_> ¦ rakudo: 49eecd68c5 | (Elizabeth Mattijsen)++ | src/core.c/Main.pm6

[15:46] <Geth_> ¦ rakudo: Simplify coercer setting

[15:46] <Geth_> ¦ rakudo: 

[15:46] <Geth_> ¦ rakudo: MasterDuke++ for keeping nudging

[15:46] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/49eecd68c5

[15:46] <Geth_> ¦ rakudo: 2e33736541 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Main.pm6

[15:46] <Geth_> ¦ rakudo: Merge pull request #4005 from rakudo/coerce-allomorphs-to

[15:46] <Geth_> ¦ rakudo: 

[15:46] <Geth_> ¦ rakudo: Introduce %*SUB-MAIN-OPTS<coerce-allomorphs-to>

[15:46] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2e33736541

[15:47] <Geth_> ¦ rakudo: 87fc041f3c | (Elizabeth Mattijsen)++ | src/core.c/Iterator.pm6

[15:47] <Geth_> ¦ rakudo: Add Iterator.deterministic method

[15:47] <Geth_> ¦ rakudo: 

[15:47] <Geth_> ¦ rakudo: By default, this will return True, but it should return False for

[15:47] <Geth_> ¦ rakudo: iterators that produce values in a non-determnistic way, such as

[15:47] <Geth_> ¦ rakudo: iterators that operate on hashes.

[15:47] <Geth_> ¦ rakudo: 

[15:47] <Geth_> ¦ rakudo: Why do we need this?  While working on the full implementation of

[15:48] <Geth_> ¦ rakudo: <…commit message has 22 more lines…>

[15:48] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/87fc041f3c

[15:48] <Geth_> ¦ rakudo: b83b1b3469 | (Elizabeth Mattijsen)++ | src/core.c/Iterator.pm6

[15:48] <Geth_> ¦ rakudo: Add missing word, MasterDuke++

[15:48] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b83b1b3469

[15:48] <Geth_> ¦ rakudo: 1aff2ad229 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Iterator.pm6

[15:48] <Geth_> ¦ rakudo: Merge pull request #3963 from rakudo/iterator-deterministic

[15:48] <Geth_> ¦ rakudo: 

[15:48] <Geth_> ¦ rakudo: Add Iterator.deterministic method

[15:48] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1aff2ad229

[15:51] <Geth_> ¦ rakudo: a0a8a51533 | (Daniel Mita)++ | lib/Pod/To/Text.rakumod

[15:51] <Geth_> ¦ rakudo: Improve output of Attribute with Pod::To::Text

[15:51] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a0a8a51533

[15:51] <Geth_> ¦ rakudo: b93d9b3f5a | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | lib/Pod/To/Text.rakumod

[15:51] <Geth_> ¦ rakudo: Merge pull request #4029 from mienaikage/pod-text-attribute

[15:51] <Geth_> ¦ rakudo: 

[15:51] <Geth_> ¦ rakudo: Improve output of Attribute with Pod::To::Text

[15:51] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b93d9b3f5a

[16:03] <sena_kun> lizmat, please delete the branch in https://github.com/rakudo/rakudo/pull/3963 if it's not needed anymore.

[16:03] <sena_kun> Same for https://github.com/rakudo/rakudo/pull/4005

[16:10] <lizmat> done

[16:10] *** Altai-man joined
[16:13] *** sena_kun left
[16:43] <dogbert17> heh, it seems to be 1f090e04dcd4ed

[16:43] <linkable6> (2020-11-15) https://github.com/rakudo/rakudo/commit/1f090e04dc Merge pull request #3891 from vrurg/raku_1285

[16:45] <[Tux]> Rakudo v2020.11-18-gb93d9b3f5 (v6.d) on MoarVM 2020.11-1-gca5d19d21

[16:45] <[Tux]> csv-test-xs-20      0.395 -  0.395

[16:45] <[Tux]> csv-ip5xs           0.828 -  0.862

[16:45] <[Tux]> test-t --race       0.827 -  0.866

[16:45] <[Tux]> test-t              1.983 -  2.011

[16:45] <[Tux]> test                8.062 -  8.649

[16:45] <[Tux]> csv-ip5xs-20        8.682 -  9.081

[16:45] <[Tux]> test-t-20 --race    9.713 - 10.272

[16:45] <[Tux]> csv-parser         25.676 - 26.864

[16:45] <[Tux]> test-t-20          33.621 - 33.982

[16:58] <lizmat> dogbert17 yeah, so the test-t slowdown was no fluke, and probably the spectest slowdown neither

[17:00] *** melezhik joined
[17:02] <melezhik> I run slowdown test on RP for head and 2020.10 - http://rakudist.raku.org/sparky/report/RakuPlay-1/1424 http://rakudist.raku.org/sparky/report/RakuPlay-1/1423

[17:02] <melezhik> 11 sec VS 7 sec

[17:02] <melezhik> in average

[17:12] <Geth_> ¦ nqp: usev6++ created pull request #683: [JVM] Align behaviour for NQP hash to MoarVM

[17:12] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/pull/683

[17:14] <lizmat> @melezhik: would it be hard to produce a --profile of a rakuplay run?

[17:14] <lizmat> that would be *really* interesting in this case

[17:17] *** tailgate left
[17:28] <Geth_> ¦ rakudo: b63c0e02cf | (Elizabeth Mattijsen)++ | 11 files

[17:28] <Geth_> ¦ rakudo: Add "deterministic" info to many iterators

[17:28] <Geth_> ¦ rakudo: 

[17:28] <Geth_> ¦ rakudo: A recap: when an iterator.deterministic call returns False, it means

[17:28] <Geth_> ¦ rakudo: that the iterator may not produce the same values, or not in the same

[17:28] <Geth_> ¦ rakudo: order, given the same initial condition.  This specifically applies

[17:28] <Geth_> ¦ rakudo: to iterators running on hashes at some level, and iterators that create

[17:28] <Geth_> ¦ rakudo: a random selection on a set of values.

[17:28] <Geth_> ¦ rakudo: 

[17:28] <Geth_> ¦ rakudo: This commit also covers iterators that run off of other iterators.

[17:29] <Geth_> ¦ rakudo: Although the more complicated ones are not covered in this commit.

[17:29] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b63c0e02cf

[17:45] <dogbert17> looking at a profile and comparing differences between old (fast) and new (slow) one thing  which stands out is slip-all (SETTING::src/core.c/Rakudo/SlippyIterator.pm6:49)

[17:46] <dogbert17> both versions have 1851068 entries but in the old version that code is jitted and that is not the case with the new version

[17:47] <Geth_> ¦ roast: 5071b526d5 | (Elizabeth Mattijsen)++ | spectest.data

[17:47] <Geth_> ¦ roast: Add multislice.6e tests to spectest

[17:47] <Geth_> ¦ roast: 

[17:47] <Geth_> ¦ roast: Sadly, these were forgotten, causing a small regression about to be fixed

[17:47] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/5071b526d5

[17:48] <dogbert17> the new version also allocates 1851073 BOOTContexts (SETTING::src/core.c/Rakudo/SlippyIterator.pm6:49) while the old version allocates none

[17:49] <dogbert17> the difference in GC is old = 42, new = 158

[17:49] <Geth_> ¦ rakudo: c37a88e857 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[17:49] <Geth_> ¦ rakudo: BOOTiters don't have a deterministic method

[17:49] <Geth_> ¦ rakudo: 

[17:49] <Geth_> ¦ rakudo: And when they're running off a hash, there are *always*

[17:49] <Geth_> ¦ rakudo: non-deterministic.  Not caught before because the multislice.6e

[17:49] <Geth_> ¦ rakudo: tests were not being run yet :-(

[17:49] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c37a88e857

[17:49] <Geth_> ¦ rakudo: 96285afb6c | (Elizabeth Mattijsen)++ | src/core.e/hash_multislice.pm6

[17:49] <Geth_> ¦ rakudo: Use deterministic method in multi array slicing

[17:49] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/96285afb6c

[17:55] <lizmat> dogbert17: turning slipall into an only, does not fix it

[17:55] <lizmat> so I can only assume that typechecking the Slip is the cause

[17:56] * lizmat tries something else

[17:57] <dogbert17> lizmat++

[17:58] <lizmat> yeah, that makes things worse

[18:00] * lizmat tries something else again

[18:01] *** domidumont left
[18:02] <lizmat> making it an only without Slip:D check, does not make it better

[18:02] <lizmat> dogbert17: what is current way to find out why something was not JITted?

[18:12] <dogbert17> I guess it's the spesh log, i.e. setting both MVM_SPESH_LOG and MVM_JIT_DEBUG. MasterDuke would know for certain.

[18:21] <dogbert17> I see the following, which looks interesting

[18:21] <dogbert17> After:

[18:21] <dogbert17> Spesh of 'slip-all' (cuid: 960, file: SETTING::src/core.c/Rakudo/SlippyIterator.pm6:49)

[18:21] <dogbert17> a few lines later

[18:22] <dogbert17>     Instructions:

[18:22] <dogbert17>       sp_getarg_o       r5(3), liti16(0)  # [015] start of exprjit tree

[18:22] <dogbert17>       ctx               r9(3)

[18:22] <dogbert17>       # [017] JIT: bailed completely because of <ctxcode>

[18:22] <dogbert17>       # [016] expr bail: Cannot get template for: ctxcode

[18:22] *** TreyHarris joined
[18:29] <MasterDuke> does the after for both HEAD and 2020.10 look the same? ctxcode hasn't had a jit template all along, so that would (likely) only be interesting if 2020.10 didn't have it at all

[18:30] <lizmat> perhaps related: the slowdown looks to be cause by excessive BOOTContext allocations

[18:34] <dogbert17> MasterDuke: it does not look the same in the older version, no bail at that point

[18:35] <MasterDuke> how similar do the afters look? i.e., mostly the same ops?

[18:38] <lizmat> afk for a few hours&

[18:39] <dogbert17> MasterDuke: https://gist.github.com/dogbert17/605f5477ac7980d82fe4914acf36385e

[18:48] *** melezhik left
[20:12] *** sena_kun joined
[20:12] *** melezhik joined
[20:13] *** Altai-man left
[20:17] <melezhik> .tell lizmat I've implemented Raku profiles in RP - https://rakudist.raku.org/sparky/report/RakuPlay-3/1457 please be aware that in case of slowdown script, generated profile data is big enough so it takes a few minutes to publish it to GH gists. Please be considerate and not overload poor RP worker host ))) 

[20:17] <tellable6> melezhik, I'll pass your message to lizmat

[20:19] <melezhik> to use Raku profiles in RakuPlay scenarios,  check "Use Profile" checkbox - https://raw.githubusercontent.com/melezhik/images/master/rp-with-profile.png

[20:21] <melezhik> profile data gets uploaded to GH  gist under , account, I think there is a limitation, no more 60 requests per hour, I might be wrong though, a link to gist is visible through RP report 

[20:21] <melezhik> the profile format is json

[20:21] <melezhik> if you need others - html / sql  - let me know 

[20:29] *** melezhik left
[20:37] <MasterDuke> .tell melezhik very cool. however, i'd say json is probably the least useful of the three. i'd suggest defaulting to html with the option of sql instead

[20:37] <tellable6> MasterDuke, I'll pass your message to melezhik

[20:40] <MasterDuke> dogbert17: yeah, those don't very similar. only two BBs in the new, but a lot more going on in them. timotimo would be another good person to take a look

[20:46] *** sena_kun left
[20:54] <timotimo> well, melezhik could actually host moarperf along with the sql file, perhaps a version that doesn't allow the user to enter a path to load

[20:54] <timotimo> and some kind of timeout mechanism of course

[22:45] <vrurg> dogbert17: I think the most likely cause are changes in Actions.nqp, sub lower_signature, if/elsif pair at line 9225. Worst penalty would be paid on handling generics, it's a complicated matter. 

[22:49] <vrurg> The elsif branch hasn't been changed much and shouldn't have such influence, unless previously moar was inlining calls to coercion methods.

[22:56] <MasterDuke> i don't see how generics or coercions would come into play with https://gist.github.com/dogbert17/1864d40202b83e198401679defbc1fc0

[23:05] <vrurg> MasterDuke: but the regression has been bisected back to my work. Besides, some core code might still be using them. Another option – generics. Since there is no way to know beforehand if a generic is a coercion the QAST code to handle this case is still gets installed.

[23:07] <vrurg> Positional is a parametric, BTW.

[23:07] <MasterDuke> ah, that if is probably where the ctxcode and getcodeobj in the new speshlog come from

[23:14] <vrurg> Exactly. I already see where some optimization could be done. But these two are unavoidable because the binding needs to iterate over code object signature paramters.

[23:16] <vrurg> I have took measures not to re-fetch the code object for each parameter, but eventually I overlooked the fact that all I need it for is to get the signature. So, I can pre-fetch the signature. But if there is a way to give it to me in a more efficient way – this might get the problem solved.

[23:17] <vrurg> Otherwise I can pre-fetch the signature, but it'd spare one getattr per parameter, not the ctxcode/getcodeobj pair.

[23:17] <MasterDuke> i'm about 90% sure the ctxcode/getcodeobj are much more expensive

[23:18] <vrurg> Another optimization to be done is to avoid invocation of `coercive` method on a parameter object by providing a specialized attribute and replacing the method call with a getattr.

[23:20] *** melezhik joined
[23:20] <vrurg> Without having them once per each invocation there is no way to handle generics in the right way. For nominals it's all done by the binding-generation code because their parameters are known at compile time. But generics can only be taken care at runtime.

[23:23] <MasterDuke> dogbert17: fwiw, changing the grep to `* > 1` seems to be a little bit faster, at least on HEAD

[23:24] <vrurg> BTW, can somebody suggest the best way to unbox a Bool into a native int in NQP? would nqp::unbox_i do the job?

[23:24] <lizmat> NQP doesn't know about Bool?

[23:24] <tellable6> hey lizmat, you have a message: https://gist.github.com/c406f2524b45db97c4bbf8d86e24807d

[23:24] <lizmat> or do you meen in nqp ops ?

[23:25] <lizmat> m: use nqp; dd nqp::unbox_i(False)

[23:25] <camelia> rakudo-moar 96285afb6: OUTPUT: «0␤»

[23:26] <lizmat> m: use nqp; dd nqp::unbox_i(True)

[23:26] <camelia> rakudo-moar 96285afb6: OUTPUT: «1␤»

[23:26] <vrurg> lizmat: not sure. I'm having a weird error with something like `if $!refinee.is_generic` where is_generic returns a Bool. So far suspect a problem with the False it returns.

[23:26] * lizmat has done enough hacking for today&

[23:27] <vrurg> lizmat: thanks! I'm probably a bit tired not to try it this way. :)

[23:27] <vrurg> lizmat: o/

[23:46] <melezhik> lizmat MasterDuke I changed raku profile format in RP to html

[23:46] <tellable6> 2020-11-21T20:37:08Z #raku-dev <MasterDuke> melezhik very cool. however, i'd say json is probably the least useful of the three. i'd suggest defaulting to html with the option of sql instead

[23:46] <melezhik> see f.e. https://rakudist.raku.org/sparky/report/RakuPlay-2/1458

