[00:07] *** leont_ left
[00:19] <Geth> ¦ rakudo: vrurg++ created pull request #4072: Make Num coercer demand definite invokator

[00:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4072

[02:05] *** lucasb left
[03:26] <vrurg> greppable6: refinement

[03:26] <greppable6> vrurg, 14 lines, 9 modules: https://gist.github.com/42729c952fd40473635a9b23cc0d7954

[03:38] <Geth> ¦ rakudo: vrurg++ created pull request #4073: Fix subsets of coercions

[03:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4073

[03:56] <Geth> ¦ roast: vrurg++ created pull request #705: Add tests for coercive subsets

[03:56] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/705

[04:30] *** linkable6 left
[04:30] *** evalable6 left
[04:30] *** evalable6 joined
[04:32] *** linkable6 joined
[05:35] *** Xliff left
[05:37] *** Kaiepi left
[05:37] *** Kaiepi joined
[08:41] *** sena_kun joined
[08:59] *** domidumont joined
[09:11] *** Xliff joined
[10:50] <gfldex> Is there any way to access the current package from within sub EXPORT?

[10:57] <gfldex> Found it. CALLER::<&your-sub> does work.

[12:03] <Xliff> gfldex++

[12:03] <Xliff> FWIW, I'm definitely noticing parsing slowdown since the beginning of the month.

[12:11] *** Altai-man joined
[12:11] <Xliff> See: https://docs.google.com/spreadsheets/d/1M3S9hqD9PkT_kkbBI3D9hrcYUhE9jj9TfPRMpQcUpmE/edit#gid=2134439148&range=B2

[12:11] <Xliff> Row 30

[12:13] *** sena_kun left
[12:14] <Xliff> Altai-man: \o

[12:15] <Xliff> Altai-man: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-11-29#l24

[12:18] <lizmat> Files=1346, Tests=117142, 228 wallclock secs (29.86 usr  8.76 sys + 3148.66 cusr 300.89 csys = 3488.17 CPU)

[12:19] <lizmat> that's 4 seconds better than last time, almost 2% better

[12:20] *** patrickb joined
[12:20] <Geth> ¦ rakudo: a75b3fa86a | (Vadim Belman)++ | src/core.c/Rational.pm6

[12:20] <Geth> ¦ rakudo: Make Num coercer demand definite invocant

[12:20] <Geth> ¦ rakudo: 

[12:20] <Geth> ¦ rakudo: This changes the error message reported back to user from a cryptic

[12:20] <Geth> ¦ rakudo: 'Cannot look up attributes in a <...> type object' to more correct

[12:20] <Geth> ¦ rakudo: 'Invocant of method 'Num' must be an object instance of type 'Rational',

[12:20] <Geth> ¦ rakudo: not a type object of type 'Rat'.  Did you forget a '.new'?'

[12:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a75b3fa86a

[12:20] <Geth> ¦ rakudo: 3202466a79 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Rational.pm6

[12:21] <Geth> ¦ rakudo: Merge pull request #4072 from vrurg/rakudo_1517

[12:21] <Geth> ¦ rakudo: 

[12:21] <Geth> ¦ rakudo: Make Num coercer demand definite invocant

[12:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3202466a79

[12:22] <Geth> ¦ rakudo: af43ef625b | (Vadim Belman)++ | 3 files

[12:22] <Geth> ¦ rakudo: Fix subsets of coercions

[12:22] <Geth> ¦ rakudo: 

[12:22] <Geth> ¦ rakudo: A subset would now coerce a value if built upon a coercion type.

[12:22] <Geth> ¦ rakudo: 

[12:22] <Geth> ¦ rakudo:     subset S of Num(Str) where {!.defined || $_ > 0};

[12:22] <Geth> ¦ rakudo:     my S $foo;

[12:22] <Geth> ¦ rakudo:     $foo = "42"; # 42e0

[12:22] <Geth> ¦ rakudo: 

[12:22] <Geth> ¦ rakudo: Fix for #1405

[12:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/af43ef625b

[12:22] <linkable6> RAKUDO#1405 [open]: https://github.com/rakudo/rakudo/issues/1405 Coercers as `of` in subsets appear to silently fail

[12:22] <Geth> ¦ rakudo: 4e21adab9e | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 3 files

[12:22] <Geth> ¦ rakudo: Merge pull request #4073 from vrurg/rakudo_1405

[12:22] <Geth> ¦ rakudo: 

[12:22] <Geth> ¦ rakudo: Fix subsets of coercions

[12:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4e21adab9e

[12:24] <Xliff> Question: Why are coercions executed in the dispatch before subsets?

[12:26] <Xliff> m: subset IntegerStr where Int | Str; multi sub a (IntStr $arg) { say 'IntStr' }; multi sub a (Num() $arg) { say 'Num' }; a('Hi'); a(42); a(PI)

[12:26] <camelia> rakudo-moar 1b2698319: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    PI used at line 1␤␤»

[12:26] <Xliff> m: subset IntegerStr where Int | Str; multi sub a (IntStr $arg) { say 'IntStr' }; multi sub a (Num() $arg) { say 'Num' }; a('Hi'); a(42); a(pi)

[12:26] <camelia> rakudo-moar 1b2698319: OUTPUT: «Num␤Num␤Num␤»

[12:26] <Xliff> IntStr is more restrictive than Num(), right?

[12:27] <Xliff> m: subset IntegerStr where Int | Str; multi sub a is default (IntStr $arg) { say 'IntStr' }; multi sub a (Num() $arg) { say 'Num' }; a('Hi'); a(42); a(pi)

[12:27] <camelia> rakudo-moar 1b2698319: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3 where Int | Str; multi sub a is default7⏏5 (IntStr $arg) { say 'IntStr' }; multi s␤    expecting any of:␤        new name to be defined␤»

[12:27] <Xliff> m: subset IntegerStr where Int | Str; multi sub a (IntStr $arg) is default { say 'IntStr' }; multi sub a (Num() $arg) { say 'Num' }; a('Hi'); a(42); a(pi)

[12:27] <camelia> rakudo-moar 1b2698319: OUTPUT: «Num␤Num␤Num␤»

[12:27] <Xliff> ???

[12:55] <Geth> ¦ roast: 4661ac5c7e | (Vadim Belman)++ | S02-types/nominalizables.t

[12:55] <Geth> ¦ roast: Add tests for coercive subsets

[12:55] <Geth> ¦ roast: 

[12:55] <Geth> ¦ roast: In support of rakudo/rakudo#4073

[12:55] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/4661ac5c7e

[12:55] <Geth> ¦ roast: a96475a845 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S02-types/nominalizables.t

[12:55] <Geth> ¦ roast: Merge pull request #705 from vrurg/rakudo_1405

[12:55] <Geth> ¦ roast: 

[12:55] <linkable6> RAKUDO#4073 [closed]: https://github.com/rakudo/rakudo/pull/4073 Fix subsets of coercions

[12:55] <Geth> ¦ roast: Add tests for coercive subsets

[12:55] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a96475a845

[13:00] *** leont joined
[13:06] <lizmat> afk for a few hours&

[13:21] *** lucasb joined
[14:00] *** domidumont left
[16:12] *** sena_kun joined
[16:13] *** Altai-man left
[16:18] *** morayj joined
[16:29] *** morayj left
[16:30] *** Xliff left
[16:48] *** b2gills left
[17:14] *** domidumont joined
[17:16] *** b2gills joined
[17:28] *** domidumont left
[17:34] *** domidumont joined
[17:50] *** sena_kun left
[18:57] *** sena_kun joined
[19:31] *** domidumont left
[20:11] *** Altai-man joined
[20:14] *** sena_kun left
[20:27] <lizmat> interested in a preview of my advent blog post?  Check it out at https://github.com/lizmat/articles/blob/master/advent-2020.md

[20:31] *** tobs left
[20:32] *** tobs joined
[20:35] <MasterDuke> lizmat: "script get run" -> gets

[20:36] <lizmat> fixed, MasterDuke++

[20:36] <MasterDuke> nice article, i've never actually used or seen github actions, so very useful

[20:39] <lizmat> thanks!

[20:39] * lizmat goes afk for a few hours&

[22:22] *** leont left
[22:33] *** patrickb left
[22:42] *** Altai-man left
[23:43] <timotimo> i find myself wanting to typecheck an object for "is it a Promise::Vow", but that's not reachable

