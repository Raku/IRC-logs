[00:09] <Geth> ¦ rakudo/is-unit-tester: 930b037aac | (Elizabeth Mattijsen)++ | 2 files

[00:09] <Geth> ¦ rakudo/is-unit-tester: Rename to is test-assertion

[00:09] <Geth> ¦ rakudo/is-unit-tester: 

[00:09] <Geth> ¦ rakudo/is-unit-tester: After a suggestion by jnthn.  Also move this trait as an exported

[00:09] <Geth> ¦ rakudo/is-unit-tester: sub from Test, so the core doesn't have to actually have this.

[00:09] <Geth> ¦ rakudo/is-unit-tester: review: https://github.com/rakudo/rakudo/commit/930b037aac

[01:37] *** frost-lab joined
[01:50] *** zostay left
[01:50] *** lucasb left
[01:51] *** zostay joined
[01:51] *** lucasb joined
[02:13] *** Xliff left
[02:52] *** lucasb left
[03:01] <Geth> ¦ nqp: 59c15fa021 | Coke++ | t/docs/opcodes.t

[03:01] <Geth> ¦ nqp: Skip more non-exposed opcodes

[03:01] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/59c15fa021

[03:01] <[Coke]> Down to 187

[03:04] <[Coke]> apparently when I did the last check for non-exposed opcodes, I missed several. 

[06:47] *** maggotbrain joined
[07:12] *** sena_kun joined
[07:34] *** patrickb joined
[08:08] *** Altai-man joined
[08:11] *** sena_kun left
[08:23] *** Xliff joined
[08:58] *** frost-lab left
[08:58] <Geth> ¦ rakudo: patrickbkr++ created pull request #3993: Fix formatting errors in docs/running.pod

[08:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3993

[08:58] <Geth> ¦ rakudo: f4b38a173f | (Patrick Böker)++ | docs/running.pod

[08:58] <Geth> ¦ rakudo: Fix formatting errors in docs/running.pod

[08:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f4b38a173f

[08:58] <Geth> ¦ rakudo: 084b92a328 | (Patrick Böker)++ (committed using GitHub Web editor) | docs/running.pod

[08:58] <Geth> ¦ rakudo: Merge pull request #3993 from patrickbkr/fix-doc_running-format-errors

[08:58] <Geth> ¦ rakudo: 

[08:58] <Geth> ¦ rakudo: Fix formatting errors in docs/running.pod

[08:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/084b92a328

[09:24] *** domidumont joined
[09:32] <Geth> ¦ rakudo/is-unit-tester: fa561564cc | (Elizabeth Mattijsen)++ | src/core.c/traits.pm6

[09:32] <Geth> ¦ rakudo/is-unit-tester: Remove mention of old "is-assertion" name

[09:32] <Geth> ¦ rakudo/is-unit-tester: 

[09:32] <Geth> ¦ rakudo/is-unit-tester: Also note: since the trait now lives in the Test module itself,

[09:32] <Geth> ¦ rakudo/is-unit-tester: it does not need to be mentioned here at all.

[09:32] <Geth> ¦ rakudo/is-unit-tester: review: https://github.com/rakudo/rakudo/commit/fa561564cc

[09:33] <Geth> ¦ rakudo/is-unit-tester: c4e5db6a7a | (Elizabeth Mattijsen)++ | src/core.c/traits.pm6

[09:33] <Geth> ¦ rakudo/is-unit-tester: Oops, a little overzealous in deleting the old term

[09:33] <Geth> ¦ rakudo/is-unit-tester: review: https://github.com/rakudo/rakudo/commit/c4e5db6a7a

[09:35] *** AlexDaniel joined
[09:35] *** AlexDaniel left
[09:35] *** AlexDaniel joined
[09:36] <AlexDaniel> samcv: can you please double check?  Files changed → Review changes

[09:36] <AlexDaniel> I changed something but from what I see you should've had permissions anyway

[09:36] <Geth> ¦ rakudo: 585db59c9a | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | lib/Test.rakumod

[09:36] <Geth> ¦ rakudo: Introducing Routine is test-assertion trait (#3991)

[09:36] <Geth> ¦ rakudo: 

[09:36] <Geth> ¦ rakudo: Introducing Routine is test-assertion trait

[09:36] <Geth> ¦ rakudo: 

[09:36] <Geth> ¦ rakudo: Marking a subroutine with the "is test-assertion" trait, indicates that

[09:36] <Geth> ¦ rakudo: the subroutine produces Test (aka TAP) output.  All of the exported

[09:36] <Geth> ¦ rakudo: subroutines in Test implicitely have this trait.

[09:36] <linkable6> RAKUDO#3991 [closed]: https://github.com/rakudo/rakudo/pull/3991 Introducing Routine is test-assertion trait

[09:36] <Geth> ¦ rakudo: <…commit message has 24 more lines…>

[09:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/585db59c9a

[09:37] <lizmat> seems to have gotten an immediate like so I merged it ^^

[09:39] <AlexDaniel> lizmat: yeah that's a nice addition, I think whateverable has weird line numbers in tests too

[09:39] <AlexDaniel> kinda forces you to write good test descriptions, so that it's easily findable :)

[09:41] <Xliff> .oO( Hmmm.... adding default values to usage output could go into Main.pm6 at line 258... )

[09:42] <lizmat> Xliff: PR ?

[09:42] <Xliff> lizmat: Thinking of creating one. See: https://gist.github.com/Xliff/554c0017ecba46388ce0bc3ff173a183

[09:43] <lizmat> Ah, you mean automatic insertion of the Parameter.default value...   makes sense

[09:44] <Xliff> :)

[09:44] <AlexDaniel> it does makes sense, I did want something like this recently

[09:44] <AlexDaniel> Xliff: just make sure to add some checks so that it doesn't always just dump whatever the default value is

[09:45] <AlexDaniel> I'm not sure what the criteria could be though

[09:45] <Xliff> $p.default must be defined, it must not be empty, if Str then surround with ''

[09:45] <AlexDaniel> and if it's one thousand characters long?

[09:45] <Xliff> Ah! Good point. 

[09:45] <Xliff> That's.... tricky.

[09:45] <AlexDaniel> or if it's an object that stringifies into something large?

[09:46] <Xliff> Max 25 characters?

[09:46] <AlexDaniel> or if it has newlines? :)

[09:46] <Xliff> Yeah. Also... must be Cool

[09:46] <Xliff> LOL! This is good stuff.... drop at first newline and insert '...'

[09:47] <AlexDaniel> I think in most cases people don't have stuff that is too weird as default values, but the help message shouldn't just explode if they do :)

[09:47] <Xliff> *nod*

[09:47] <Xliff> Does raku track current terminal width?

[09:47] <AlexDaniel> unlikely

[09:48] <Xliff> Yeah, so all of this needs to be in test cases.

[09:48] <AlexDaniel> Xliff: rakudo test cases I think, not roast. That's a relief :)

[09:49] <Xliff> So... capture $*USAGE in sub USAGE and check that.

[09:49] <Xliff> Will be a lot of test cases, given the mechanism.

[09:49] <Xliff> May tackle this on the weekend.

[09:50] <AlexDaniel> step by step! Maybe it's a good idea to present just a PR without tests first

[09:50] <Xliff> At any rate, thanks for the feedback, lizmat++ AlexDaniel++

[09:50] <Xliff> AlexDaniel: Sure!

[09:51] <Xliff> Can always add the tests in later commits.

[09:51] <AlexDaniel> yes :)

[09:51] <AlexDaniel> samcv: anyway, please ping me if you still can't leave a review

[09:52] <AlexDaniel> oh, I have an idea…

[09:52] *** Xliff left
[10:06] <Geth> ¦ problem-solving: 5c5955978d | (Aleks-Daniel Jakimenko-Aleksejev)++ | .github/CODEOWNERS

[10:06] <Geth> ¦ problem-solving: Add CODEOWNERS file

[10:06] <Geth> ¦ problem-solving: 

[10:06] <Geth> ¦ problem-solving: Just testing the github feature. More about it here:

[10:06] <Geth> ¦ problem-solving: 

[10:06] <Geth> ¦ problem-solving: * https://docs.github.com/en/free-pro-team@latest/github/creating-cloning-and-archiving-repositories/about-code-owners

[10:06] <Geth> ¦ problem-solving: 

[10:06] <Geth> ¦ problem-solving: See this comment to understand why it may be useful:

[10:06] <Geth> ¦ problem-solving: <…commit message has 10 more lines…>

[10:06] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/commit/5c5955978d

[10:13] *** domidumont left
[10:13] <Geth> ¦ problem-solving: a517aab345 | (Aleks-Daniel Jakimenko-Aleksejev)++ | .github/CODEOWNERS

[10:13] <Geth> ¦ problem-solving: Comment out invalid CODEOWNERS entries

[10:13] <Geth> ¦ problem-solving: 

[10:13] <Geth> ¦ problem-solving: Otherwise github rejects the whole file.

[10:13] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/commit/a517aab345

[10:20] <Geth> ¦ rakudo: patrickbkr++ created pull request #3994: Update `docs/running.pod`

[10:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3994

[11:00] <Geth> ¦ roast: 58c711e16e | (Elizabeth Mattijsen)++ | 73 files

[11:00] <Geth> ¦ roast: Use "is test-assertion" trait where applicable

[11:00] <Geth> ¦ roast: 

[11:00] <Geth> ¦ roast: No functional changes, just better error reporting if a test fails

[11:00] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/58c711e16e

[11:34] <Geth> ¦ roast: a489cdc91a | (Elizabeth Mattijsen)++ | 3 files

[11:34] <Geth> ¦ roast: Add tests for "is test-assertion trait

[11:34] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a489cdc91a

[12:09] *** sena_kun joined
[12:11] *** Altai-man left
[13:39] *** vrurg left
[13:41] *** vrurg joined
[13:50] *** vrurg left
[13:52] *** vrurg joined
[14:00] *** vrurg left
[14:01] *** vrurg joined
[14:27] <nine> Aaand another one diagnosed: Version caches the objects for v6 and v6.c (but e.g. not v6.d) in global variables, so a module precompiled during a raku -e 'use v6.c; use Foo' gets a reference to the -e compunit as that's where that v6.c object will be stored

[14:50] <lizmat> nine: that should be easily fixed ?   what do you prefer >

[14:50] <lizmat> ?

[14:54] <nine> I wonder why we don't create those objects during setting compilation? That would safe a bit of time and depending on the setting is never an issue

[14:55] *** domidumont joined
[15:09] <lizmat> nine: I think there was a reason for that....

[15:15] <nine> commit history doesn't really explain why. Vague references to regexes not working during setting BEGIN time, but later the code got changed to be regex free anyway

[15:18] <lizmat> yeah... trying with constants now

[15:18] <lizmat> An exception occurred while evaluating a BEGIN

[15:18] <lizmat> meh

[15:19] <nine> ah, my old nemesis

[15:30] <lizmat> must compose Version before allocating

[15:34] <patrickb> nine: Is this related to the ""Cannot look up attributes in a NQPMu type object" with `require`" issue ?

[15:41] <nine> no

[15:43] <patrickb> OK. Just curious.

[15:46] <Geth> ¦ rakudo: 18882bf6fb | (Elizabeth Mattijsen)++ | src/core.c/Version.pm6

[15:46] <Geth> ¦ rakudo: Create common Version objects at setting compile time

[15:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/18882bf6fb

[15:46] <lizmat> nine:  ^^

[15:46] <lizmat> afk for a few hours&

[16:08] *** Altai-man joined
[16:11] *** sena_kun left
[16:19] <nine> lizmat: that does indeed fix my issue :) Many thanks!

[16:43] *** domidumont left
[17:10] *** jmerelo joined
[17:55] *** Geth left
[18:52] *** jmerelo left
[19:54] <lizmat> tyil: I think Geth needs a wakeup call  :-)

[20:04] <tyil> lizmat: done

[20:04] <tyil> give it a minute or so :>

[20:04] *** Geth joined
[20:09] *** sena_kun joined
[20:10] *** Altai-man left
[20:34] <Geth> ¦ rakudo: 03e1ba7294 | (Elizabeth Mattijsen)++ | src/core.e/array_multislice.pm6

[20:34] <Geth> ¦ rakudo: Hopefully final @a[;] tweaks for 6.e.PREVIEW

[20:34] <Geth> ¦ rakudo: 

[20:34] <Geth> ¦ rakudo: Fixing issue found while writing extensive tests

[20:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/03e1ba7294

[20:35] <Geth> ¦ roast: c0eac55496 | (Elizabeth Mattijsen)++ | S32-array/multislice-6e.t

[20:35] <Geth> ¦ roast: Add extensive tests for 6.e @a[;] functionality

[20:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c0eac55496

[20:41] *** Kaiepi left
[20:42] *** Kaiepi joined
[20:49] <tbrowder> m: class foo { has $.bar; has @.list }; my $a = foo.^attributes; say $a.^name

[20:49] <camelia> rakudo-moar 85847d2f1: OUTPUT: «List␤»

[20:51] <tbrowder> m: class f {has $.bar}; my $a=f.^attributes; say $.^name.bar

[20:51] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $.^name used where no 'self' is available␤at <tmp>:1␤------> 3$.bar}; my $a=f.^attributes; say $.^name7⏏5.bar␤    expecting any of:␤        argument list␤        term␤»

[20:53] <tbrowder> m: class f {has $.bar}; my $a = f.^attributes; say $a.bar

[20:53] <camelia> rakudo-moar 85847d2f1: OUTPUT: «No such method 'bar' for invocant of type 'List'.  Did you mean 'Bag'?␤  in block <unit> at <tmp> line 1␤␤»

[20:56] <tbrowder> m: class f {has $.bar}; my %a = set f.^attributes; say %a;

[20:56] <camelia> rakudo-moar 85847d2f1: OUTPUT: «{$!bar => True}␤»

[20:59] <tbrowder> m: class f {has $.bar;has $.baz = 6}; my %a = set f.^attributes; say %a

[20:59] <camelia> rakudo-moar 85847d2f1: OUTPUT: «{$!bar => True, $!baz => True}␤»

[21:01] <tbrowder> m: class c {has $.baz}; say c ~~ baz

[21:01] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    baz used at line 1. Did you mean 'bag'?␤␤»

[21:04] <tbrowder> m: class f {has $.bar}; my %a = set f.^attributes; say %a<$!baz>:exists

[21:04] <camelia> rakudo-moar 85847d2f1: OUTPUT: «False␤»

[21:05] <tbrowder> duh

[21:07] <tbrowder> m: class f {has $.bar}; my %a = set f.^attributes; say %a<$!bar>.exists

[21:07] <camelia> rakudo-moar 85847d2f1: OUTPUT: «No such method 'exists' for invocant of type 'Bool'␤  in block <unit> at <tmp> line 1␤␤»

[21:07] <tbrowder> ff

[21:07] <dogbert17> .seen lizmat

[21:07] <tellable6> dogbert17, I saw lizmat 2020-10-30T19:54:01Z in #raku-dev: <lizmat> tyil: I think Geth needs a wakeup call  :-)

[21:08] <lizmat> you rang?

[21:08] <dogbert17> lizmat: hello :)

[21:08] <dogbert17> I have a small program which suddenly fails under 6.e.PREVIEW

[21:08] <dogbert17> Cannot resolve caller AT-POS(Any:U: Mu:U); none of these signatures match:

[21:09] <dogbert17>     (Any:U \SELF: int \pos, *%_)

[21:09] <dogbert17> ...

[21:09] <lizmat> gist ?

[21:09] <dogbert17> coming up ...

[21:11] <dogbert17> https://gist.github.com/dogbert17/08f7204adf2511ccf46232e183671504

[21:11] <dogbert17> hopefully I've done something stupid

[21:12] <lizmat> probably /me did something stupid, as I've worked on that area the past days

[21:13] <dogbert17> I actually changed to 6.e.PREVIEW to see if there were some new speed gains to be had :)

[21:13] <dogbert17> the program is quite slow

[21:15] * lizmat confirms something's amiss and is looking into it

[21:16] <dogbert17> ++lizmat

[21:21] <lizmat> looks like all shaped array access is borked in 6.e.PREVIEW atm

[21:22] <lizmat> like: use v6.e.PREVIEW; my @a[2;2]; dd @a[0;0]

[21:23] <dogbert17> yup, fails for me as well. The code did run with 'HEAD is now at 87ef76ae3 Implement binding of hash-slices (#3969)' albeit slowly

[21:23] <linkable6> (2020-10-27) https://github.com/rakudo/rakudo/commit/87ef76ae30 Implement binding of hash-slices (#3969)

[21:24] <lizmat> hash-slices broke that ?

[21:24] <dogbert17> no it worked with that version

[21:26] <lizmat> ah, *phew*

[21:27] <dogbert17> I worded myself ambigously, sorry about that. 03e1ba7294 => code fails, 87ef76ae3 => code works

[21:27] <linkable6> (2020-10-30) https://github.com/rakudo/rakudo/commit/03e1ba7294 Hopefully final @a[;] tweaks for 6.e.PREVIEW

[21:27] <linkable6> (2020-10-27) https://github.com/rakudo/rakudo/commit/87ef76ae30 Implement binding of hash-slices (#3969)

[21:27] <lizmat> I'm starting to wonder whether this is a version skew issue

[21:31] <dogbert17> c: 87ef76ae30b use v6.e.PREVIEW; my @a[2;2]; dd @a[0;0]

[21:31] <committable6> dogbert17, ¦87ef76a: «Any element at [0,0] = Any␤»

[21:31] <lizmat> aaaah.... found it,  think

[21:32] <dogbert17> cooool

[21:33] <lizmat> I doubt it will have gotten any faster though  :-(

[21:34] <dogbert17> it seems to have slowed down quite a bit

[21:36] <dogbert17> the gist I sent gave 'real 2m44,351s' when running without 6.e.PREVIEW but 'real 4m28,654s' with 6.e.PREVIEW

[21:36] <lizmat> can it be made to run a bit less, for profiling

[21:37] <lizmat> reducing the size ?

[21:38] <lizmat> ah... but it looks like you're initializing rows / columns?

[21:38] <lizmat> in 6.e.PREVIEW; you can initialize a whole row /column with *

[21:39] <dogbert17> yes, if I remember correctly it's because ' is default' is NYI

[21:39] <lizmat> my @a[10;10]; @a[0;*] = ^10

[21:39] <dogbert17> hmm, I'll have to try that

[21:40] <lizmat> argh, not working on shaped arrays ??

[21:40] <dogbert17> if your'e still intersted in profiling the line setting size to 1001 could be set to a lower value, say 401

[21:41] <dogbert17> m: my @mat[$size; $size] is default(0)

[21:41] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$size' is not declared␤at <tmp>:1␤------> 3my @mat[7⏏5$size; $size] is default(0)␤»

[21:41] <dogbert17> m: my @mat[10; 10] is default(0)

[21:41] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤is default on shaped Array not yet implemented. Sorry.␤at <tmp>:1␤------> 3my @mat[10; 10] is default(0)7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[21:41] <lizmat> I see

[21:42] <dogbert17> I wrote this several years ago, using Project Euler problems in order to learn Raku :)

[21:43] <Geth> ¦ rakudo: 316902ddda | (Elizabeth Mattijsen)++ | src/core.e/array_multislice.pm6

[21:43] <Geth> ¦ rakudo: Fix off by-one error spotted by Jan-Olof Hendig

[21:43] <Geth> ¦ rakudo: 

[21:43] <Geth> ¦ rakudo: I guess we need more tests.

[21:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/316902ddda

[21:44] <lizmat> I guess the tests don't actually cover the fast path  :-(*

[21:44] <dogbert17> lizmat++

[21:45] <dogbert17> off by one, a timeless classic :-)

[21:45] <lizmat> yeah, moved a decrement down to make the fast path faster, but forgot to update the tests in the fast path

[21:48] <dogbert17> your example: my @a[2;2]; dd @a[0;0] made the bug appear

[21:53] <dogbert17> m: my @a[10;10]; @a[0;*] = ^10 

[21:53] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Partially dimensioned views of shaped arrays not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»

[21:53] <dogbert17> :-(

[21:54] <lizmat> yeah, the problem is that it is checking for that in the shaped array logic, but that check should not be needed for 6.e

[21:55] <dogbert17> aha, interesting

[22:01] <dogbert17> your fix works perfectly

[22:01] <dogbert17> many thanks

[22:03] <lizmat> yeah, still, we should be able to do * slices on shaped arrays

[22:04] <lizmat> instead of @a[$size;$size] is default(0), it should be possble to do: @a[$size;$size]; @a[*;*] = 0 xx *

[22:04] <lizmat> to initialize all elements to 0

[22:11] <lizmat> dogbert17: but I guess I will need some sleep on that

[22:12] <dogbert17> sleep well then :-)

[22:15] <lizmat> thanks  :-)

[22:15] *** sena_kun left
[22:20] <lizmat> aaaahh.... I figured the issue *before* waking up again

[22:20] <dogbert17> a solution?

[22:21] <lizmat> now I need to sleep on the solution  :-)

[22:21] <dogbert17> :-)

[22:21] <lizmat> m: my @a[2;2]; dd @a.AT-POS(0)

[22:21] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Partially dimensioned views of shaped arrays not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»

[22:21] <lizmat> that's the problem

[22:22] <lizmat> a 2-dim shaped array *must* be accessed with an AT-POS that takes 2 parameters

[22:22] <lizmat> you cannot walk shaped arrays

[22:23] <lizmat> m: my @a = [[42],]; dd @a.AT-POS(0).AT-POS(0)

[22:23] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Int element = 42␤»

[22:25] <lizmat> sleep&

[22:25] <timotimo> gnite liz

[22:25] <dogbert17> zzz

[22:45] *** Kaiepi left
[22:45] *** Kaiepi joined
