[00:02] *** Altai-man_ joined
[00:05] *** sena_kun left
[02:03] *** sena_kun joined
[02:05] *** Altai-man_ left
[03:09] *** Xliff left
[03:54] *** HarmtH joined
[04:02] *** Altai-man_ joined
[04:05] *** sena_kun left
[06:04] *** sena_kun joined
[06:05] *** Altai-man_ left
[07:53] *** cognominal joined
[07:55] *** cognominal left
[08:02] *** Altai-man_ joined
[08:05] *** sena_kun left
[08:35] *** patrickb joined
[08:45] *** patrickb left
[09:09] <lizmat> Files=1307, Tests=113021, 217 wallclock secs (28.89 usr  8.37 sys + 3029.08 cusr 289.21 csys = 3355.55 CPU)

[09:29] *** leont_ joined
[10:03] *** sena_kun joined
[10:06] *** Altai-man_ left
[12:00] *** vrurg left
[12:00] *** vrurg joined
[12:03] *** Altai-man_ joined
[12:05] *** sena_kun left
[12:05] *** vrurg left
[12:33] *** softmoth joined
[12:34] *** vrurg joined
[12:35] *** vrurg left
[12:36] *** vrurg joined
[13:15] *** lucasb joined
[13:19] *** softmoth left
[14:03] *** sena_kun joined
[14:05] *** Altai-man_ left
[14:24] <nine> Is there a reliable way during compilation to get a package's full name, i.e. Cool::Cat::Goes instead of just Goes?

[14:37] <nine> duh....it's the one argument I didn't look closer at, the to be installed object itself which in the case of install_package_symbol_unchecked seems to be a package anyway and gets its name via $longname.fully_qualified_with($target_package)

[14:44] *** dogbert17 left
[16:02] *** Altai-man_ joined
[16:05] *** sena_kun left
[16:25] <ShimmerFairy> m: say $*VM.version

[16:25] <camelia> rakudo-moar 90f86d4c9: OUTPUT: «v2020.06.14.g.5832.b.2628␤»

[16:26] <ShimmerFairy> I was just thinking, it'd be nice if, in a future language version, Version could possess a trailing "uncomparable" component for things like git hashes, where Raku can't be expect to know how to compare that component in two version numbers, but some other software does know.

[16:28] <ShimmerFairy> (for cmp I'd say it pretends the uncomparable component doesn't exist, with the justification that if that component is the only thing differing, the two things being described are most likely very similar)

[16:42] <nine> Oh boy...this complicates things: require Cool::Cat; require Cool::Cat::Goes::Splat; During compilation of the test script we create the full package chain for Cool::Cat::Goes::Splat. Then we precompile Cool::Cat during which it picks up Goes from the pre-existing stub. Thus we end up with a reference to the scripts SC in Cool::Cat

[16:49] <ShimmerFairy> I suppose moving package precomp up to the point of a "require" or similar statement is out of the question?

[16:51] <nine> Yes, as especially for a require we don't even know which file to precompile at the point we compile the require statement. The repository chain could be changed between compilation and running that statement.

[17:03] <nine> Taking about 17 steps back I wonder why during precompilation it even sees the existing Cool::Cat package when it has its own empty GLOBAL package

[17:06] <nine> I mean the whole reason for having nested packages and eschewing the flat global view of Perl 5's our scope is to be able to have independent roots for the package tree after all.

[17:06] <nine> If we have to deal with all the compliations this brings, shouldn't we actually get the benefits as well?

[17:07] <ShimmerFairy> Yeah, I can't think of any good reason why Cool::Cat would even want to know about a separated Cool::Cat::Goes::Splat (or else it would've brought that package in itself)

[17:08] <ShimmerFairy> And considering all you'd be able to know is that there is a thing with that name in the world, it's not like you'd even get _that much_ info out of the reference.

[18:03] *** sena_kun joined
[18:05] *** Altai-man_ left
[19:14] *** rypervenche left
[19:17] *** rypervenche joined
[19:17] *** softmoth joined
[19:42] <nine> Ah, of course. This example is so insidious because the Cool in Cool::Cat::Goes::Splat comes from the setting. And the setting is a very global thing as well.

[19:46] *** patrickb joined
[20:03] *** Altai-man_ joined
[20:05] *** sena_kun left
[20:16] *** patrickb left
[20:44] *** patrickb joined
[20:46] <Altai-man_> releasable6, status

[20:46] <releasable6> Altai-man_, Next release in ≈6 days and ≈22 hours. There are no known blockers. Changelog for this release was not started yet

[20:46] <releasable6> Altai-man_, Details: https://gist.github.com/00687d20eba35387da8e7202588fd6a7

[22:04] *** sena_kun joined
[22:05] *** Altai-man_ left
[22:47] *** patrickb left
[23:52] *** dogbert17 joined
