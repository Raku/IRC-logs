[00:27] *** titsuki left
[00:45] *** sena_kun left
[00:59] *** sena_kun joined
[02:45] *** sena_kun left
[02:59] *** sena_kun joined
[04:46] *** sena_kun left
[05:01] *** sena_kun joined
[05:06] * sjn is getting some build warnings when compiling 2020.01

[05:07] <sjn> src/core/interp.c: In function ‘MVM_interp_run’

[05:08] <sjn> hm. moarvm warnings...

[06:12] <AlexDaniel> sjn: yep I've seen these too

[06:13] <AlexDaniel> I typically don't complain because I'm on the latest gcc which tends to have more warnings for everything, but others won't see them

[06:25] <stoned75> hi. in rakudo?src/core.c/Bool.pm6 I read "These operators are normally handled as macros in the compiler"

[06:26] <stoned75> where can I find these macros' definition ?

[06:40] <stoned75> hum I guess I found them

[06:45] *** sena_kun left
[07:01] *** sena_kun joined
[07:06] *** AlexDaniel left
[07:11] *** AlexDaniel joined
[07:12] *** AlexDaniel left
[07:12] *** AlexDaniel joined
[07:50] *** stoned75 left
[08:23] *** domidumont joined
[08:45] *** sena_kun left
[09:01] *** sena_kun joined
[09:12] <sena_kun> is it just me or 2020.01 has visibly longer build time? Parse stage is usually 50-52 seconds for me, but last night it was 67, which is not really cool. I wonder if it's my system issue or.

[09:42] <lizmat> Files=1301, Tests=109816, 212 wallclock secs (28.20 usr  8.12 sys + 2948.93 cusr 271.94 csys = 3257.19 CPU)

[09:44] <lizmat> .ask [Coke] there is hardly anything in Perl.pod6 anymore?

[09:44] <tellable6> lizmat, I'll pass your message to [Coke]

[09:45] <lizmat> .

[10:08] *** AlexDaniel left
[10:09] *** squashable6 left
[10:10] *** squashable6 joined
[10:11] <Geth> ¦ nqp: 7e0ac3da16 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[10:11] <Geth> ¦ nqp: Bump NQP to get IPNS changes

[10:11] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/7e0ac3da16

[10:11] <Geth> ¦ rakudo/master: 4 commits pushed by (Ben Davies)++, (Elizabeth Mattijsen)++

[10:11] <Geth> ¦ rakudo/master: 7c7d3b96a7 | Support basic usage of UNIX sockets over TCP with IO::Socket::INET

[10:11] <Geth> ¦ rakudo/master: 1a5b2185a9 | Add constant for PF_UNSPEC

[10:11] <Geth> ¦ rakudo/master: ed4226d761 | Add a family named parameter to IO::Socket::INET.connect and .listen

[10:11] <Geth> ¦ rakudo/master: 547c7b94e5 | Merge pull request #3357 from Kaiepi/unix

[10:11] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/0d530092fade...547c7b94e518

[10:13] <lizmat> .ask tyil please let me know how I can help to get a Rakudo Star 2020.01 out before FOSDEM  :-)

[10:13] <tellable6> lizmat, I'll pass your message to tyil

[10:14] <tyil> lizmat: I'm currently contemplating to make just a rakudo-star 2020.1 source-only release (so no .msi, no .dmg) if I get no response from the official maintainers before FOSDEM

[10:15] <tyil> I can start preparations on it, but I can't make a guarantee it'll be done before FOSDEM hits :(

[10:15] <lizmat> there are no guarantees in life  :-)

[10:15] <lizmat> ++tyil for starting preps

[10:36] <Geth> ¦ rakudo: bae5fc7d49 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[10:36] <Geth> ¦ rakudo: Bump NQP to get Moar support for IP6NS changes

[10:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bae5fc7d49

[10:37] <lizmat> sena_kun Kaiepi ^^

[10:45] *** sena_kun left
[11:00] *** sena_kun joined
[11:20] *** Guest78373 joined
[11:26] *** Guest78373 left
[11:27] *** Guest48371 joined
[11:34] *** Guest48371 left
[11:37] <sena_kun> we have a looot of PRs

[11:38] *** dogbert1 joined
[11:42] <Geth> ¦ rakudo: bd68955b76 | (Ben Davies)++ | src/core.c/Parameter.pm6

[11:42] <Geth> ¦ rakudo: Add Parameter.prefix and Parameter.suffix

[11:42] <Geth> ¦ rakudo: 

[11:42] <Geth> ¦ rakudo: The prefix method returns the *, **, or + markers a parameter was

[11:42] <Geth> ¦ rakudo: declared with, if any, and the suffix method returns the ? or !

[11:42] <Geth> ¦ rakudo: marker a parameter was declared with, if any.

[11:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bd68955b76

[11:42] <Geth> ¦ rakudo: 3f6a2a2225 | (Ben Davies)++ | src/core.c/Parameter.pm6

[11:42] <Geth> ¦ rakudo: Refactor Parameter.raku and improve how it handles parameter names

[11:42] <Geth> ¦ rakudo: 

[11:43] <Geth> ¦ rakudo: Parameter.raku was pretty complex and prone to bugs, particularly with

[11:43] <Geth> ¦ rakudo: how it determined what name the parameter was declared with. Now that

[11:43] <Geth> ¦ rakudo: other methods can handle most of that work for this method, use them

[11:43] <Geth> ¦ rakudo: instead of reimplementing their behaviour.

[11:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3f6a2a2225

[11:43] <Geth> ¦ rakudo: c9a6b02de2 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Parameter.pm6

[11:43] <Geth> ¦ rakudo: Merge pull request #3430 from Kaiepi/parameter-raku

[11:43] <Geth> ¦ rakudo: 

[11:43] <Geth> ¦ rakudo: Simplify Parameter.raku, add Parameter.prefix and Parameter.suffix

[11:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c9a6b02de2

[11:44] <Geth> ¦ rakudo: b2c809e4f3 | vendethiel++ | 2 files

[11:44] <Geth> ¦ rakudo: Make Parameter's BUILD use named args

[11:44] <Geth> ¦ rakudo: 

[11:44] <Geth> ¦ rakudo: Between 3d3578 and d31fb2, the by-name marker has been lost.

[11:44] <Geth> ¦ rakudo: This commit restores it, allowing a Parameter to be constructed

[11:44] <Geth> ¦ rakudo: manually.

[11:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b2c809e4f3

[11:44] <Geth> ¦ rakudo: 749ab904f2 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | t/02-rakudo/99-misc.t

[11:44] <Geth> ¦ rakudo: Merge pull request #3330 from vendethiel/manual-parameter-new

[11:44] <Geth> ¦ rakudo: 

[11:44] <Geth> ¦ rakudo: Make Parameter's BUILD use named args

[11:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/749ab904f2

[12:02] *** titsuki joined
[12:05] <dogbert1> clickbaits lizmat with https://github.com/perl6/nqp/pull/596

[12:05] <tellable6> 2020-01-26T18:09:58Z #raku-dev <lizmat> dogbert11 yes, a PR for 6d23891a3a7e  https://github.com/perl6/nqp/issues/559 would be great!

[12:05] <linkable6> (2020-01-03) https://github.com/perl6/roast/commit/6d23891a3a Some s/perl/raku changes

[12:12] <Geth> ¦ nqp: 9f3f0a530d | (Jan-Olof Hendig)++ | src/QRegex/Cursor.nqp

[12:12] <Geth> ¦ nqp: Fix for https://github.com/perl6/nqp/issues/559

[12:12] <Geth> ¦ nqp: 

[12:12] <Geth> ¦ nqp: During timtoady's cleanup of the Braid API a copy paste error made

[12:12] <Geth> ¦ nqp: it through. This was discovered by cognomial++ some time ago.

[12:12] <Geth> ¦ nqp: This commit fixes the error where the Braid grammar class attribute

[12:12] <Geth> ¦ nqp: should have been initialized with a grammar instance.

[12:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9f3f0a530d

[12:12] <Geth> ¦ nqp: 75c01d8c70 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/QRegex/Cursor.nqp

[12:12] <Geth> ¦ nqp: Merge pull request #596 from dogbert17/fix-braid-init-copy-pasto

[12:12] <Geth> ¦ nqp: 

[12:12] <Geth> ¦ nqp: Fix for https://github.com/perl6/nqp/issues/559

[12:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/75c01d8c70

[12:16] <dogbert1> lizmat++

[12:20] <Geth> ¦ rakudo/master: 10 commits pushed by (Elizabeth Mattijsen)++

[12:20] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/749ab904f2b8...14abd58861ac

[12:33] <Geth> ¦ roast: e92bc17a24 | (Elizabeth Mattijsen)++ | S06-signature/introspection.t

[12:33] <Geth> ¦ roast: Fix test for unnamed named parameter in signature

[12:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e92bc17a24

[12:46] *** sena_kun left
[12:49] *** AlexDaniel joined
[12:49] *** AlexDaniel left
[12:49] *** AlexDaniel joined
[12:51] *** patrickb joined
[12:52] <patrickb> o/

[12:52] <tellable6> 2020-01-28T10:09:55Z #raku <El_Che> patrickb I am not territorials about packages. The more the merrier and even better if we can work together!

[12:53] <patrickb> El_Che: Great! Then I'll give that a shot.

[12:54] <tellable6> patrickb, I'll pass your message to El_Che

[12:54] <patrickb> lizmat, tyil: I'll probably get 2020.01.1 precomp packages for mac/win/linux ready before fosdem starts (maybe I'll even manage to automate the process).

[12:54] <lizmat> patrickb: for Star ?   cool!

[12:55] <patrickb> lizmat: No, not star.

[12:55] <lizmat> ah, bummer  :-)

[12:55] <patrickb> Only rakudo + zef.

[12:59] <tyil> patrickb: nice work :D

[13:00] *** sena_kun joined
[13:02] <AlexDaniel> weekly: please mention old-issue-tracker squashathon

[13:02] <notable6> AlexDaniel, Noted! (weekly)

[13:02] <AlexDaniel> weekly: #perl6 irc channel now forwards to #raku

[13:02] <notable6> AlexDaniel, Noted! (weekly)

[13:02] <AlexDaniel> by the way

[13:03] <AlexDaniel> I can't do it for #perl6-dev

[13:03] <AlexDaniel> so, whatever

[13:05] <lizmat> AlexDaniel : *you* can't, or it can't be done ?

[13:05] <AlexDaniel> I can't

[13:05] <AlexDaniel> I asked for permissions but didn't get them

[13:06] <AlexDaniel> anyway, whoever has the founder flag can do it relatively easily

[13:06] <AlexDaniel> you just set the flags with mlock and possibly also turn the guard on

[13:06] <AlexDaniel> that's what I did for #perl6 and it should work fine

[13:07] <lizmat> do you know who the founder flag has ?

[13:11] <AlexDaniel> jnthn, TimToady, masak, mst

[13:11] <AlexDaniel> I think jnthn tried to give it to me too but turns out the limit is 4 founders in total

[13:14] <AlexDaniel> I suggested we remove TimToady so that I can set the redirects, but that didn't happen :)

[13:14] <AlexDaniel> btw he is currently idling on #perl6-dev but not here

[13:16] <lizmat> that's a very striking image  :-(

[13:17] <AlexDaniel> jnthn: want me to guide you through the commands you need to run?

[13:19] <AlexDaniel> jnthn: /msg ChanServ set #perl6-dev guard on

[13:19] <AlexDaniel> jnthn: /msg ChanServ set #perl6-dev mlock +Cinptzf #raku-dev

[13:19] <AlexDaniel> I think

[13:20] <AlexDaniel> the important ones are +f and +i

[13:21] <AlexDaniel> the rest are just ones that are already there

[13:22] <AlexDaniel> and guard should make a bot join the channel so that it won't get fully empty

[13:22] <AlexDaniel> +i is what is going to make the redirect work (and you'll be able to invite yourself to that channel if you ever want to join it to see what's going on there)

[13:23] <AlexDaniel> as I've said, I have no idea what I'm doing so there's possibly a better way, but this is going to work too

[13:26] * AlexDaniel sleep &

[13:44] *** lucasb joined
[13:45] <|Tux|> Rakudo version 2020.01-34-g14abd5886 - MoarVM version 2020.01.1-2-gcbb04d462

[13:45] <|Tux|> csv-test-xs-20      0.362 -  0.367

[13:45] <|Tux|> csv-ip5xs           0.690 -  0.733

[13:45] <|Tux|> test-t --race       0.780 -  0.795

[13:45] <|Tux|> test-t              1.803 -  1.823

[13:45] <|Tux|> csv-ip5xs-20        5.673 -  5.814

[13:45] <|Tux|> test                7.087 -  7.317

[13:45] <|Tux|> test-t-20 --race    8.869 -  8.877

[13:45] <|Tux|> csv-parser         23.149 - 23.623

[13:45] <|Tux|> test-t-20          28.891 - 29.618

[13:53] <[Coke]> (Perl6.pod) it's a class definition. With the latest changes made to xt/examples-compilation, I don't have an easy way to get the error on the compile, so I don't know what it's complaining about.

[13:53] <tellable6> 2020-01-28T09:44:55Z #raku-dev <lizmat> [Coke] there is hardly anything in Perl.pod6 anymore?

[13:54] <[Coke]> ^^ lizmat

[13:54] <lizmat> will look in a mo

[14:05] * [Coke] adds https://github.com/Raku/doc/issues/3188

[14:08] <[Coke]> lizmat: oh. OK, figured out the problem. :)

[14:08] <lizmat> *phew*

[14:09] <[Coke]> 1) I have a script that only runs xt/ against files changed since I last updated the git checkout. so it saw the class Perl is Raku ... on my slightly older perl6, this complained (presumably because it didn't know what Raku was) - then I rebuilt perl6 with git latest. re-ran the test. it failed. couldn't see why, if I tried to test it separately, the code worked. Turns out that the nqp::getcomp that you 

[14:09] <[Coke]> were asking about is in the examples compilation test file itself - so after rakudo update it was failing to find the compiler and failing because of that.

[14:10] <[Coke]> updating the testing file...

[14:10] <lizmat> aaaahh   good catch!

[14:11] <[Coke]> what's the new preferred way to getcomp?

[14:12] <sena_kun> the old one but with `Raku` instead of `perl6`

[14:12] <sena_kun> ?

[14:12] <[Coke]> Yes, but there was a conditional to allow it to work on older versions.

[14:12] <[Coke]> my $parser = nqp::getcomp('perl6') // nqp::getcomp('Raku'); ?

[14:12] <lizmat> no, please use ||

[14:13] <lizmat> Brian Duggan found that // fails on older rakudo's  :-(

[14:13] <[Coke]> that did it (nqp obj. is too low level for ||)

[14:13] <lizmat> for // or || ?

[14:13] * sena_kun sent a bunch of PRs with `//`

[14:13] <lizmat> yeah  :-(

[14:13] <sena_kun> woah

[14:14] <lizmat> bisectable6: use nqp; nqp::getcomp("Raku") // nqp::getcomp("perl6")

[14:14] <bisectable6> lizmat, Bisecting by exit code (old=2015.12 new=14abd58). Old exit code: 1

[14:14] <bisectable6> lizmat, bisect log: https://gist.github.com/c8c94d2fe9d37831ff8de79cd7f7b854

[14:14] <bisectable6> lizmat, (2020-01-24) https://github.com/rakudo/rakudo/commit/b787095358bcbac4c6326b99e9673e54ef5afd58

[14:14] <lizmat> bisectable6: use nqp; nqp::getcomp("Raku") || nqp::getcomp("perl6")

[14:14] <bisectable6> lizmat, On both starting points (old=2015.12 new=14abd58) the exit code is 0 and the output is identical as well

[14:14] <bisectable6> lizmat, Output on both points: «»

[14:14] <lizmat> *sigh*

[14:15] <lizmat> sorry sena_kun, messed up that one

[14:15] <[Coke]> "//" failed for me in a very recent build

[14:15] <sena_kun> well, ones which were accepted can be accepted again

[14:15] <sena_kun> those which are not yet can be fixed

[14:17] <[Coke]> ... which you may not have noticed if you were looking for Raku first. I happened to have perl6 first in my initial guess.

[14:17] <sena_kun> well, yeah...

[14:19] <sena_kun> so `nqp::getcomp('Raku') || nqp::getcomp('perl6');` is safe?

[14:19] <[Coke]> I think so. if you do perl6 || Raku on a later version, it works.

[14:20] <lizmat> yeah, that's what Brian Duggan found: https://github.com/bduggan/p6-jupyter-kernel/pull/54#issuecomment-579242473

[14:20] <dogbert1> m: my $s = Str(123456789) for ^100_000; say now - INIT now

[14:20] <camelia> rakudo-moar 14abd5886: OUTPUT: «0.136214␤»

[14:20] <dogbert1> m: my $s = ~123456789 for ^100_000; say now - INIT now

[14:20] <camelia> rakudo-moar 14abd5886: OUTPUT: «0.0120425␤»

[14:21] <lizmat> wow

[14:21] * sena_kun updated patches

[14:21] <dogbert1> it's from rindolfs example yesterday

[14:22] <lizmat> sena_kun++

[14:27] <[Coke]> m: my $s = 123456789.Str for ^100_000; say now - INIT now

[14:27] <camelia> rakudo-moar 14abd5886: OUTPUT: «0.03648555␤»

[14:29] <lizmat> that last one is even more suspect

[14:29] <lizmat> .Str should be the fastest?

[14:29] <lizmat> as prefix:<~> calls that ?

[14:35] <TreyHarris> A I misremembering, or did Pugs-era proto-Raku not have a "backwards" Range, e.g. a 3-element 5..3?

[14:36] <TreyHarris> double negative, sorry... "didn't Pugs have such a Range"?

[14:38] <[Coke]> you might be able to figure that out based on the last roast skips for pugs which were eventually removed.

[14:38] <TreyHarris> [Coke]:good call

[14:42] <Geth> ¦ rakudo: d8e859d000 | (Elizabeth Mattijsen)++ | 3 files

[14:42] <Geth> ¦ rakudo: Make has Str $.a = 42 a compile time failure

[14:42] <Geth> ¦ rakudo: 

[14:42] <Geth> ¦ rakudo: - adapts default BUILDPLAN logic to perform some type tests

[14:42] <Geth> ¦ rakudo: - adds X::TypeCheck::Attribute::Default class

[14:42] <Geth> ¦ rakudo: - adds X::TypeCheck::Attribute::Default stub for setting compilation

[14:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d8e859d000

[14:42] <tyil> lizmat: https://gitlab.com/tyil/rakudo-star/pipelines/112963099 perhaps it'll just work :>

[14:42] <lizmat> m: .say for 10 ... 1   # TreyHarris 

[14:42] <camelia> rakudo-moar 14abd5886: OUTPUT: «10␤9␤8␤7␤6␤5␤4␤3␤2␤1␤»

[14:43] <lizmat> this is actually statically optimized

[14:43] <lizmat> m: .say for ^10 .reverse   # as is this, if I recall correctly

[14:43] <camelia> rakudo-moar 14abd5886: OUTPUT: «9␤8␤7␤6␤5␤4␤3␤2␤1␤0␤»

[14:45] *** sena_kun left
[14:46] <Geth> ¦ roast: 218eae0a44 | (Elizabeth Mattijsen)++ | APPENDICES/A02-some-day-maybe/misc.t

[14:46] <Geth> ¦ roast: Typecheck on default value for attribute changed

[14:46] <Geth> ¦ roast: 

[14:46] <Geth> ¦ roast: with https://github.com/rakudo/rakudo/commit/d8e859d000

[14:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/218eae0a44

[14:47] *** |Tux| left
[14:51] <dogbert1> lizmat: ~ seems to be the fastest

[14:51] * lizmat wonders why

[14:51] <dogbert1> and why is Str() so slow, does it do a lot of extra stuff

[14:52] <lizmat> --profile ?

[14:53] <dogbert1> I did profile yesterday and noticed that when using Str() 10% of the code was interpreted while 0% was interpreted when using ~

[14:53] <TreyHarris> lizmat: yes, but ... is a Seq constructor, not a Range constructor

[14:54] <dogbert1> here's the code from yesterday: https://gist.github.com/dogbert17/9e039d6af26a09e144f144b4e0aba220

[14:54] <lizmat> indeed... but that case is actually optimized

[14:54] *** |Tux| joined
[14:54] <lizmat> TreyHarris: there is no other syntax for reverse ranges, afaik

[14:55] <TreyHarris> lizmat: understood. If you killfiled todd&margo you may not understand why I'm zooming in on this particular case of Range rather than the pragmatics

[14:56] <lizmat> indeed I have and indeed I haven't

[14:56] <lizmat> :-)

[14:57] <TreyHarris> Yeah--well, I was trying to explain why "my Int $x; $x.Range" produces something and "my Int $x = 3; $x.Range" fails

[14:57] <lizmat> yeah... people who want to know answers but are unwilling to teach themselves basics, will never understand that

[14:58] <TreyHarris> I did notice something that may be a doc error? class Range says for .elems: "Returns Inf if either end point was specified as Inf or *." But it doesn't, it fails for being called on a lazy range.

[15:00] <TreyHarris> And that wording seems wrong, it seems like if it does work on calculable lazy's it should return Inf if the right-hand is Inf, or zero if the left-hand is Inf (but the right-hand is not Inf)

[15:00] <lizmat> that's probably a bug

[15:00] <lizmat> I feel the doc is correct

[15:00] <lizmat> bisectable6: dd ^Inf .elems

[15:00] *** sena_kun joined
[15:00] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=d8e859d) because on both starting points the exit code is 0

[15:01] <jnthn> I don't think .elems ever returns Inf these days

[15:01] <bisectable6> lizmat, bisect log: https://gist.github.com/731edfbffd86ada516b815d9d9faf40f

[15:01] <bisectable6> lizmat, (2017-06-07) https://github.com/rakudo/rakudo/commit/20310d7dcdd5cd877fc7bd46ad7a84f715bf1503

[15:01] <TreyHarris> lizmat:even to my suggestion that (Inf..3).elems should be 0, not Inf?

[15:01] <lizmat> ah, I see that it was changed on purpose, so I guess it's a doc issue

[15:02] <TreyHarris> Okay

[15:02] <jnthn> Yeah, my recollection is that .elems should always return an Int or a Failure 

[15:02] <jnthn> Inf..3 should almost certianly say 0 elems though

[15:02] <jnthn> m: say (Inf..3).elems

[15:02] <camelia> rakudo-moar d8e859d00: OUTPUT: «0␤»

[15:02] <TreyHarris> Arguably the lhs > rhs => 0 check should come first

[15:02] <TreyHarris> yeah

[15:02] <jnthn> And it does :)

[15:02] <TreyHarris> huh

[15:02] <lizmat> m: dd Inf ~~ Int   

[15:02] <camelia> rakudo-moar d8e859d00: OUTPUT: «Bool::False␤»

[15:03] <TreyHarris> jnthn: ah-hah, i typoe'd. Good.

[15:04] <jnthn> Phew, a bug we don't have. :)

[15:04] <TreyHarris> In that case it's purely a doc issue

[15:06] <tyil> on R*: https://gitlab.com/tyil/rakudo-star/-/jobs/417548433 seems like it builds fine

[15:06] <tyil> (2020.01-rc1)

[15:07] <tyil> the spectest takes almost 1 hour, if it doesn't fail too much, I'll be able to publish 2020.01-rc1 on dist.tyil.nl before I sleep

[15:07] <TreyHarris> m: say (*..3).elems

[15:07] <camelia> rakudo-moar d8e859d00: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[15:07] <Geth> ¦ roast: 8db6dba6af | (Elizabeth Mattijsen)++ | S12-attributes/smiley.t

[15:07] <Geth> ¦ roast: Typecheck on default value for attribute changed

[15:07] <Geth> ¦ roast: 

[15:07] <Geth> ¦ roast: with https://github.com/rakudo/rakudo/commit/d8e859d000

[15:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8db6dba6af

[15:08] <lizmat> tyil++

[15:09] <TreyHarris> m: say(∞..3).elems

[15:09] <camelia> rakudo-moar d8e859d00: OUTPUT: «Inf..3␤»

[15:09] <TreyHarris> I'm fixing the docs for elems now

[15:09] <TreyHarris> m: say(Inf..3).elems

[15:09] <camelia> rakudo-moar d8e859d00: OUTPUT: «Inf..3␤»

[15:09] <TreyHarris> m: say((Inf..3).elems)

[15:09] <camelia> rakudo-moar d8e859d00: OUTPUT: «0␤»

[15:09] <TreyHarris> m: say((∞..3).elems)

[15:09] <camelia> rakudo-moar d8e859d00: OUTPUT: «0␤»

[15:13] <lizmat> afk for a few hours&

[15:22] <TreyHarris> Huh, to make my editor happy, I had to blow away and recreate my doc repo from scratch under the Raku org rather than via the perl6 redirect. Now I'm getting permission denied on push via SSH key. my remote push url is origin  `ssh://git@github.com/Raku/doc.git (push)` and I also tried it without the `.git`.

[15:22] <TreyHarris> Anyone know what might be going on?

[15:22] <lizmat> new public keys ?

[15:22] <TreyHarris> No, before I got that error, it made me go through the "re-approve your public key" rigamarole, and I did that

[15:23] <lizmat> then I have no idea  :-(

[15:23] <lizmat> really afk&

[15:23] <[Coke]> is there extra debug output you can see from the command line?

[15:27] <TreyHarris> Yes: `Pushing to ssh://git@github.com/Raku/doc.git␤ERROR: Permission to Raku/doc.git denied to treyharris.␤fatal: Could not read from remote repository.␤␤Please make sure you have the correct access rights␤and the repository exists.␤`

[15:27] <TreyHarris> hmm, 'read'. let me do a fetch

[15:27] <TreyHarris> Nope, fetch worked, push still fails

[15:29] <tyil> tfw local installation seems to work for rakudo-star-2020.01-rc1

[15:30] <tyil> spectest at gitlab so far only failed for t/spec/S02-magicals/KERNEL.rakudo.moar, which it did last time as well

[15:30] <TreyHarris> An ssh -T [email@hidden.address] works fine, so it's not my keys

[15:33] <[Coke]> TreyHarris: what's your github id?

[15:33] <TreyHarris> [Coke]: treyharris

[15:34] <TreyHarris> I thought I'd pushed since the switch to the Raku org, but it's possible I haven't yet

[15:34] <TreyHarris> If access wasn't copied over wholesale, maybe mine wasn't?

[15:34] <[Coke]> I don't see you in the explicit list. perhaps you're under the "Raku" team, but I don't have rights to see that.

[15:35] <TreyHarris> [Coke]: do you have rights to add me?

[15:35] <TreyHarris> I have rights to close issues in any Raku-org repo, so I figured I was set

[15:35] <[Coke]> ah, I can see it. you're not on the team.

[15:35] <TreyHarris> weird

[15:36] <[Coke]> er. I think?

[15:36] <TreyHarris> Could you add me? Since I was going to move the emacs mode over soon, I'll need full org access like I had on perl6

[15:36] <TreyHarris> s/had/have/

[15:38] <[Coke]> I'm not on IRC much these days: can someone say "yes that's cool"?

[15:40] <tyil> yes that's cool

[15:40] <tyil> (I'm not sure what it's about tho)

[15:43] <TreyHarris> [Coke]: if you look, you'll see I've been a member of the org admins of perl6 forever, so I'm safe ;-)

[15:43] <TreyHarris> https://github.com/orgs/perl6/teams?query=%40treyharris

[15:43] <[Coke]> ok, you seem trustworthy. :)

[15:44] <TreyHarris> :-)

[15:44] <TreyHarris> lmk when I can try pushing again

[15:44] <[Coke]> ok, you should have an invite.

[15:44] <TreyHarris> Okay

[15:44] <[Coke]> probably have to click a button before you can push

[15:47] <TreyHarris> [Coke]: oh, d'oh... Alex~~Daniel (not mentioning him to trigger spurious notifications) added me 27 days ago--but the button didn't appear until I hit reload just now (following your re-invitation, I assume). Must've been one of those "if you miss it the first time, you have to go a specific place to see it again"

[15:47] <[Coke]> weird. I would have expected to find your name with a "invite sent" next to it. thought I saw that on others.

[15:47] <[Coke]> welcome aboard.

[15:51] <TreyHarris> .tell AlexDaniel I'll need full access to the Raku org on GitHub to move the emacs mode repo over and get the package's canonicity validated so Emacs package managers will accept it as a valid redirect. I was a member of Org Admins for perl6 forever so I'm relatively trustworthy ;-) Send me a privmsg if you need to discuss further

[15:51] <tellable6> TreyHarris, I'll pass your message to AlexDaniel

[15:51] <TreyHarris> oops, mentioned him there, didn't I? Hope I don't wake him

[15:53] <TreyHarris> You can't privmsg tellable6, looks like. Maybe I'll drop an issue in whateverable for rout-tuit time

[15:58] <TreyHarris> Appreciate a quick double-check of https://github.com/Raku/doc/commit/2c083530bc for correctness from those of you paying attention to this Range thing

[16:03] <tyil> .tell lizmat https://gitlab.com/tyil/rakudo-star/-/jobs/417548439#L1370 not sure how bad this is

[16:03] <tellable6> tyil, I'll pass your message to lizmat

[16:11] <TreyHarris> tyil: I keep trying to parse 'tyil' as a 'itym'~'til'~'ty' mashup :-)

[16:12] <tyil> just type t, press tab and hope for the best

[16:12] <tyil> :D

[16:12] <TreyHarris> tellable6: okay i will

[16:12] <tellable6> TreyHarris, I haven't seen okay around, did you mean oka_?

[16:12] <TreyHarris> ;-)

[16:12] <tyil> haha

[16:15] <TreyHarris> turns out tellable already strips out some things, so it should be possible to:

[16:15] <TreyHarris> .tell ty_il I think you can do this

[16:15] <tellable6> TreyHarris, I'll pass your message to tyil

[16:15] <tyil> wah

[16:15] <tyil> why does that work 

[16:15] <tyil> albeit not completelyu

[16:17] <TreyHarris> Oh, the code I thought would serve this purpose is only called in the output end, not the noticing-a-nick-is-active end. So no. Underscores are allowed in nicks, though, so I'm not sure why that part of the regex is there: https://github.com/Raku/whateverable/blob/63df823cfdb058a319b7214dd48aaad51319508a/xbin/Tellable.p6#L41

[16:18] <TreyHarris> hrm, actually I don't see why it wouldn't have told you, tyil, unless it doesn't tell until you've gone inactive first?

[16:19] <tyil> what does it count as inactive?

[16:19] <tyil> because I get the tell updates usually without having to disconnect or anything

[16:20] <TreyHarris> 10 minutes, it looks like: https://github.com/Raku/whateverable/blob/63df823cfdb058a319b7214dd48aaad51319508a/xbin/Tellable.p6#L31

[16:20] <tyil> then I guess I'll get them at some point tonight

[16:20] <tyil> cycling home takes about 10 minutes, at least

[16:22] <tyil> hmm

[16:22] <tyil> ===> Install [FAIL] for DateTime::Format: ===SORRY!===

[16:22] <tyil> finish_code_object

[16:22] <tyil> on rakudo-star-2020.01-rc1, after installing on desktop

[16:26] <AlexDaniel> .

[16:26] <tellable6> hey AlexDaniel, you have a message: https://gist.github.com/d7f68dad4fdd8f11d10ca74246bde046

[16:27] <TreyHarris> dalman: Gah, I've now reached the point of cube-solving practice where there are a couple YouTube videos I watch with unsolved cubes in the background of the set, and on one I get twitchy that I can't solve it :-)  The other is a prob with an impossible cube state, so that one bothers me in a totally different way...

[16:27] <TreyHarris> oops, fat-fingered paste there

[16:27] <TreyHarris> wrong channel

[16:29] <TreyHarris> Odd, why did tellable6 turn my message to AlexDaniel into a gist? (And AlexDaniel, if you want to bed < 3 hours ago, I hope I wasn't the one who woke you!)

[16:29] <AlexDaniel> TreyHarris: see the graph on https://github.com/AlexDaniel/orgsleep

[16:30] <AlexDaniel> I had to receive groceries :) but it dooesn't really matter anyway

[16:31] <TreyHarris> Ah-hah... do you do the "6 days a week" thing?

[16:31] <TreyHarris> polyphasic sleeping, I meant--which is not 6 days a week, apparently. Been awhile since I looked at it

[16:32] <AlexDaniel> TreyHarris: it's unintentional :(

[16:33] <AlexDaniel> TreyHarris: https://en.wikipedia.org/wiki/Non-24-hour_sleep%E2%80%93wake_disorder

[16:33] <TreyHarris> understood. that sucks--i had insomnia for months after 9/11 (I lived nearby and worked in the WTC until the week before) and it's the worst

[16:33] <AlexDaniel> TreyHarris: tellable6 is a relatively new bot so it's not perfect yet. The message was a bit too long so it gisted it :)

[16:34] <AlexDaniel> it adds extra text for the timestamp and stuff, so it's unavoidable. But the fixable thing is figuring out when exactly the message is too long

[16:35] <AlexDaniel> and honestly I don't know how to calculate that

[16:35] <AlexDaniel> last time I looked I didn't really understand

[16:35] <AlexDaniel> it depends on the… server you're on? Or something like that. It's weird

[16:36] <TreyHarris> You could look at https://github.com/weechat/weechat/blob/d2dda92dafcf346d1a158f308e7f8fbfcc313281/src/plugins/irc/irc-message.c#L954 which is how WeeChat decides whether and how to split messages

[16:37] <TreyHarris> oops, I meant https://github.com/weechat/weechat/blob/d2dda92dafcf346d1a158f308e7f8fbfcc313281/src/plugins/irc/irc-message.c#L983 -- I tried to scroll up to enclude that comment and insted scrolled up to the prior func

[16:38] <TreyHarris> and I can't reed or spel very wele aparently...

[16:40] <[Coke]> ooh, cuber. I got a teraminx for christmas.

[16:41] <AlexDaniel> TreyHarris: https://github.com/Raku/whateverable/issues/354#event-2986379714

[16:46] *** sena_kun left
[16:46] <AlexDaniel> TreyHarris: you should have all permissions in the world now :)

[16:48] <AlexDaniel> TreyHarris: I'm still trying to figure out the exact list of limitations on github for those who are not Owners

[16:48] <AlexDaniel> and yeah, github in that regard is very limited :(

[16:48] <AlexDaniel> they recently added triage and maintain levels so that's nice, but it's completely different

[16:49] <TreyHarris> yeah--GitHub absolutely loves to make world-breaking changesets that, if you opt into any, you opt into all

[16:51] <AlexDaniel> TreyHarris: don't create a new issue, I'll explain :)

[16:53] <TreyHarris> AlexDaniel:oops, too quick

[16:53] <TreyHarris> Sorry

[16:57] <TreyHarris> I contributed to the first general-purpose IRC bot back in the early 90's when I was 15 or so (eggdrop), so my mind is crammed with entirely too much IRC minutiae :-)

[17:00] *** sena_kun joined
[17:10] *** domidumont left
[17:30] *** titsuki left
[17:32] <AlexDaniel> .seen [trey-haris]`

[17:32] <tellable6> AlexDaniel, I saw [trey-haris]` 2020-01-28T16:57:02Z in #raku-dev: <TreyHarris> I contributed to the first general-purpose IRC bot back in the early 90's when I was 15 or so (eggdrop), so my mind is crammed with entirely too much IRC minutiae :-)

[17:32] <AlexDaniel> :)

[17:39] <TreyHarris> AlexDaniel: yep, I get the permmisiveness, but what will the bot do with people who have underscores in their nicks?

[17:39] <AlexDaniel> TreyHarris: it will just work

[17:40] <TreyHarris> it can't distinguish between nickname and nick_name though

[17:40] <AlexDaniel> TreyHarris: that's correct

[17:40] <TreyHarris> got it. that's probably an okay balance

[17:40] <TreyHarris> especially given that several IRC clients do nick-avoidance by pre/appending underscores

[17:41] <AlexDaniel> it uses that sub for lookups, so both nicknamme` and nick_name will turn into “nickname”

[17:41] <TreyHarris> So sticking an extra underscore in already satisfies my other ticket

[17:41] <AlexDaniel> the only issue is if you have two people with similar nicknames on the same channel

[17:42] <AlexDaniel> e.g. [Coke] is using [] because there's another user Coke

[17:42] <AlexDaniel> now if they both join this channel… :D

[17:43] <TreyHarris> and if someone has a diacritic or other non-ASCII letter character--they'll be addressed as Andr rather than as André. And someone whose entire nick is non-ASCII Unicode letters characters will be just rejected entirely

[17:44] <AlexDaniel> TreyHarris: no, because of this line :) https://github.com/Raku/whateverable/blob/110ed6a35662030490a1c7a0fa2642983e26efdb/xbin/Tellable.p6#L55

[17:44] <AlexDaniel> the sub *looks* really stupid, but the behavior is actually pretty neat :)

[17:46] <AlexDaniel> TreyHarris: also, people are addressed by the nick of their last message

[17:47] <TreyHarris> ah, yeah. if your nick is Ник12 you'll just become 12, though

[17:47] <TreyHarris> (That first letter is not an H)

[17:47] <AlexDaniel> “Ник12 is an erroneous nickname”

[17:48] <TreyHarris> ник12

[17:48] <TreyHarris> Is it on freenode? Then it doesn't matter.

[17:48] <TreyHarris> that unicode nick extensions page says it should be valid if the server allows it

[17:49] <AlexDaniel> if it was allowed I'd run that through confusables first :D

[17:49] <TreyHarris> I'd test it but on freenode I will very quickly get my IP banned if I try more than a few

[17:51] <AlexDaniel> maybe it's a good idea to pass it through confusables first for things like O0 and l1i

[17:51] <AlexDaniel> but I have never seen anybody do that mistake

[17:52] <AlexDaniel> .seen TreyHarr1s

[17:52] <tellable6> AlexDaniel, I haven't seen TreyHarr1s around, did you mean TreyHarris?

[17:52] <AlexDaniel> and even then you get a helpful response :)

[17:52] <TreyHarris> WeeChat actually chooses TreyHarr1s as my first nick avoidance

[17:52] <TreyHarris> For reasons I can't fathom without examining the source

[17:52] <AlexDaniel> TreyHarris: Because TreyHarris_ is too long, I think

[17:53] <AlexDaniel> that's why erc turns my nickname into AlexDani`

[17:53] <TreyHarris> Ahh

[17:53] <TreyHarris> WeeChat would probably do AlexDan1el then

[17:54] <AlexDaniel> wonderful… yeah maybe I should add confusables mapping too

[17:54] <AlexDaniel> TreyHarris: btw here's that code working in real life: https://colabti.org/irclogger/irclogger_log/raku?date=2020-01-28#l278

[17:58] <TreyHarris> Ugh, looked at my logs and I've become TreyHarr1s but also TreyHarr1--off-by-one error that was corrected at some point I'd imagine

[17:59] <TreyHarris> Yeah, I stopped becoming TreyHarr1s in 2016 and have only become TreyHarr1 since then.

[18:02] <TreyHarris> m: say Str.Range

[18:02] <camelia> rakudo-moar d8e859d00: OUTPUT: «No such method 'Range' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[18:02] <TreyHarris> Should that work analogously to Int.Range and Rat.Range?

[18:03] <[Coke]> Nope.

[18:03] <AlexDaniel> m: say Str.min

[18:03] <camelia> rakudo-moar d8e859d00: OUTPUT: «Inf␤»

[18:03] <AlexDaniel> m: say Str.max

[18:03] <camelia> rakudo-moar d8e859d00: OUTPUT: «-Inf␤»

[18:03] <AlexDaniel> … maybe?

[18:03] <AlexDaniel> I mean, what are these? :)

[18:03] <AlexDaniel> sourceable6: Str.min

[18:03] <[Coke]> That is inconsistent, aye. I'd rather see max and min removed than range added.

[18:03] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/d8e859d/src/core.c/Any-iterable-methods.pm6#L1276

[18:04] <AlexDaniel> sourceable6: Str.min()

[18:04] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/d8e859d/src/core.c/Any-iterable-methods.pm6#L1277

[18:04] <AlexDaniel> m: say Any.min

[18:04] <camelia> rakudo-moar d8e859d00: OUTPUT: «Inf␤»

[18:05] <AlexDaniel> that's weird, why would that be in Any

[18:05] <TreyHarris> What's Raku for "is $x a single grapheme?" `.chars == 1`?

[18:05] <TreyHarris> That's the only use for it I can imagine. Subset existence check

[18:06] <AlexDaniel> TreyHarris: yep, .chars == 1

[18:07] <TreyHarris> The only use I can see for Int.Range would seem to be analogous to the use for ["\0"..{$highest_known_codepoint}], and that doesn't seem very useful

[18:07] <TreyHarris> er, strike those square brackets

[18:08] <TreyHarris> it's pseudocode anyway

[18:08] <TreyHarris> m: say ("\0"..'z').elems

[18:08] <camelia> rakudo-moar d8e859d00: OUTPUT: «123␤»

[18:09] *** patrickb left
[18:09] <AlexDaniel> I've had a proposal drafted for changing how string ranges work but I got stuck

[18:10] <TreyHarris> hmm, what's "sparse unicode padding"? i'm running into this term in a few places but I can't find a definition

[18:11] <AlexDaniel> the final issue was having a convenient way for simple things like ‘a’..‘z’

[18:14] <TreyHarris> m: say so (3 ∈ (0..10)); say so (3 ∈ (0..Inf));

[18:14] <camelia> rakudo-moar d8e859d00: OUTPUT: «True␤False␤»

[18:14] <TreyHarris> hm?

[18:15] <TreyHarris> m: say so (3 ∈ Int.Range);

[18:15] <camelia> rakudo-moar d8e859d00: OUTPUT: «False␤»

[18:15] <TreyHarris> guess these ranges aren't even useful for the purpose I thought they were useful for

[18:16] <TreyHarris> m: say so (3 ∈ (0..10)); say so (3 ∈ (0..*));

[18:16] <camelia> rakudo-moar d8e859d00: OUTPUT: «True␤False␤»

[18:16] <TreyHarris> m: say so (3 ∈ (0..10)); say so (3 ∈ (*..*));

[18:16] <camelia> rakudo-moar d8e859d00: OUTPUT: «True␤False␤»

[18:17] <TreyHarris> The -Inf..Inf (which is what Num.Range returns) would have to be special-cased, but 0..Inf seems like it should just work like any lazy range

[18:18] <TreyHarris> m: say (0..Inf)[12]

[18:18] <camelia> rakudo-moar d8e859d00: OUTPUT: «12␤»

[18:19] <Geth> ¦ rakudo: a08f043953 | (Christian Bartolomäus)++ | src/core.c/VM.pm6

[18:19] <Geth> ¦ rakudo: [JVM] Unbreak the build

[18:19] <Geth> ¦ rakudo: 

[18:19] <Geth> ¦ rakudo: The superfluous closing paren was accidentially added

[18:19] <Geth> ¦ rakudo: with aafa8ca228.

[18:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a08f043953

[18:20] <TreyHarris> Range (elem)/∈ isn't documented

[18:25] <TreyHarris> opened an issue about it https://github.com/Raku/doc/issues/3189

[18:26] *** Kaiepi joined
[18:41] <TreyHarris> Can anyone think of a core routine name that's used for two entirely different things depending on type? (semantically entirely different, not just multis) like, the old example Dog.bark() and Tree.bark()

[18:42] <TreyHarris> there are operators I bet

[18:44] *** sena_kun left
[18:44] <TreyHarris> ah, `e`

[18:59] *** sena_kun joined
[19:01] <lizmat> TreyHarris: if they exist in core, we probably need to fix that

[19:01] <tellable6> 2020-01-28T16:03:39Z #raku-dev <tyil> lizmat https://gitlab.com/tyil/rakudo-star/-/jobs/417548439#L1370 not sure how bad this is

[19:02] <lizmat> .tell tyil feels like a wrong version of roast ?

[19:02] <tellable6> lizmat, I'll pass your message to tyil

[19:02] <TreyHarris> lizmat: I don't think so... `e` and `from` being two cases that seem obviously acceptable

[19:03] <lizmat> methods ? subs?

[19:05] <lizmat> bartolin++   # catching JVM issue with a08f04395345ff9f51b93f

[19:05] <linkable6> (2020-01-28) https://github.com/rakudo/rakudo/commit/a08f043953 [JVM] Unbreak the build

[19:07] <TreyHarris> lizmat: https://docs.raku.org/routine/from or https://docs.raku.org/routine/e

[19:08] <lizmat> I'm not sure the term "e" is a confusable with the .e method

[19:09] <lizmat> and I always have thought List.from is a terrible, terrible hack

[19:09] <TreyHarris> That's why I said we don't need to fix it

[19:10] <lizmat> from 2014: 1eb7fada84

[19:10] <lizmat> hmmm... why doesn't linkable6 pick this up?

[19:10] <lizmat> linkable6: 1eb7fada84

[19:11] <lizmat> 1eb7fada843b75468e15d7e29b90008d68327ea4

[19:11] <lizmat> commit 1eb7fada843b75468e15d7e29b90008d68327ea4

[19:11] <lizmat> guess I don't understand linkable6 

[19:12] <lizmat>  https://github.com/rakudo/rakudo/commit/1eb7fada84

[19:16] <Kaiepi> hm, when i add tests for unix socket support to S32-io/IO-Socket-INET.t, moarvm throws EMFILE when trying to create the sockets

[19:16] <Kaiepi> which doesn't make a whole lot of sense

[19:16] <Kaiepi> maybe the threading in it's buggy

[19:21] <AlexDaniel> 1eb7fada843b7

[19:21] <AlexDaniel> hmmmmm

[19:21] <AlexDaniel> lizmat: that's a good question!

[19:21] <AlexDaniel> I don't know!

[19:22] <AlexDaniel> foo d8e859d00

[19:22] <linkable6> (2020-01-28) https://github.com/rakudo/rakudo/commit/d8e859d000 Make has Str $.a = 42 a compile time failure

[19:23] <MasterDuke> lizmat: did you happen to see my questions/comments last night ?

[19:23] <AlexDaniel> lizmat: can you file a bug report please?

[19:23] <lizmat> AlexDaniel: will do

[19:23] <lizmat> MasterDuke: please remind me  :-)

[19:24] <AlexDaniel> it's a new feature that we didn't have before, but honestly I have absolutely no idea why it doesn't find that

[19:24] <AlexDaniel> it should work

[19:25] <MasterDuke> lizmat: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-01-27#l386 and then some discussion with AlexDaniel following

[19:26] <AlexDaniel> oooh I think I know why…

[19:28] <AlexDaniel> lizmat: it, uh… found this result too: https://github.com/tony-o/deb-rakudodaily/commit/1eb7fada843b75468e15d7e29b90008d68327ea4

[19:28] <Kaiepi> ah, i just need to do the UNIX socket tests before the IP ones

[19:28] <AlexDaniel> and refused to print anything because it doesn't know which one you wanted

[19:29] <AlexDaniel> tony-o_: what is that repo, btw?

[19:30] <AlexDaniel> lizmat: that's easily fixable, I just need to figure out the best way to pick the right result

[19:30] <AlexDaniel> amount of github stars maybe?

[19:31] * AlexDaniel sleep &

[19:31] <lizmat> rakudo/rakudo first ?

[19:34] <Geth> ¦ roast: 7ae5e2be11 | (Ben Davies)++ | S32-io/IO-Socket-INET.t

[19:34] <Geth> ¦ roast: Add tests for IO::Socket::INET UNIX socket support

[19:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7ae5e2be11

[19:35] *** MasterDuke left
[19:35] <tyil> lizmat: idk what that implies, except that something needs fixing

[19:35] <tellable6> 2020-01-28T19:02:24Z #raku-dev <lizmat> tyil feels like a wrong version of roast ?

[19:40] <Geth> ¦ problem-solving: treyharris assigned to JJ Issue Routine doc pages need front matter https://github.com/Raku/problem-solving/issues/155

[19:43] <TreyHarris> ↑  I wrote the above issue to consider the issues I've brought up before about needing a place for overall routine documentation aside from type-specific docs

[19:57] <Geth> ¦ rakudo: 05b5f81b67 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/BUILDPLAN.nqp

[19:57] <Geth> ¦ rakudo: Move typecheck thrower to separate method

[19:57] <Geth> ¦ rakudo: 

[19:57] <Geth> ¦ rakudo: so we can use it from multiple places

[19:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/05b5f81b67

[19:59] *** squashable6 left
[20:00] *** squashable6 joined
[20:02] <TreyHarris> heh, when I got a reply to my answer to T&M, "That was one of the most illuminating things I have ever read. Thank you for taking the time to write that.", I actually thought it came from T&M initially and was gobsmacked. But, no, the earth is still in its orbit :-)

[20:03] <lizmat> yeah  :-)

[20:21] <lizmat> TreyHarris++   # perseverance

[20:30] *** MasterDuke joined
[20:40] <MasterDuke> sena_kun: yeah, i'm also seeing a little slower parse times for rakudo recently

[20:44] *** sena_kun left
[20:53] <TreyHarris> The most-recent commit is no longer shown at the bottom of docs.raku.org or docs.p6c.org... is it hiding somewhere? I'm just trying to figure out what version I'm seeing in the index

[20:56] <[Coke]> I believe that was disabled because of churn.

[20:56] <[Coke]> You could probably follow the build log.

[20:56] <[Coke]> jj would probably know for sure

[21:00] <lizmat> bisectable6: subset A of Int; class B { has A:D $.a is default('') = 42 }

[21:00] <bisectable6> lizmat, Bisecting by exit code (old=2015.12 new=05b5f81). Old exit code: 0

[21:00] <bisectable6> lizmat, bisect log: https://gist.github.com/8eaabcbc417346f7efffe15a9bdc6104

[21:00] <bisectable6> lizmat, (2017-07-31) https://github.com/rakudo/rakudo/commit/148ba7f2e4de8f33e8436267a4b0c9042a171d82

[21:00] *** sena_kun joined
[21:03] <TreyHarris> [Coke]: "churn" meaning pages that didn't change changed since the commit was always changing? Could that be rectified by using the commit of the last change that changed a page's content, so if commit a1b2cd3 changed Foo::bar, only /type/Foo and /routine/bar would change? 

[21:03] <TreyHarris> (Notionally "could"; I'm aware it's not easy coding.)

[21:04] <lizmat> bisectable6: subset A of Str where /^ foo/; class B { has A $.a = "foobar" }

[21:04] <bisectable6> lizmat, Bisecting by exit code (old=2015.12 new=05b5f81). Old exit code: 0

[21:05] <bisectable6> lizmat, bisect log: https://gist.github.com/dc0176feeac57de322458c33b852e40b

[21:05] <bisectable6> lizmat, (2020-01-28) https://github.com/rakudo/rakudo/commit/d8e859d000fa658766266a45f99e58661dec7b0e

[21:05] <lizmat> vrurg: that is what's killing URI atm

[21:06] <[Coke]> TreyHarris: yes, I imagine that scheme would be acceptable.

[21:06] <lizmat> ++TreyHarris

[21:07] <TreyHarris> doesn't tellable6 have a trick to get it to reference the current moment in archives so you don't have to repeat info in-channel?

[21:07] <TreyHarris> I thought I remembered such a thing

[21:11] <TreyHarris> .tell jmerelo please see https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-01-28#l580 in re commit sha's and doc churn

[21:11] <tellable6> TreyHarris, I'll pass your message to jmerelo

[21:17] <TreyHarris> [Coke]: do you happen to know where is the doc build log? I've been grepping around the repo hoping I'd stumble across a link to it, but no dice

[22:24] <Geth> ¦ rakudo: d18c69b2bc | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[22:24] <Geth> ¦ rakudo: Simplify exception throwing in the bootstrap

[22:24] <Geth> ¦ rakudo: 

[22:24] <Geth> ¦ rakudo: - use binding result of if to simplify code

[22:24] <Geth> ¦ rakudo: - don't use existskey, but atkey directly with binding

[22:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d18c69b2bc

[22:45] *** squashable6 left
[22:45] *** sena_kun left
[22:47] *** squashable6 joined
[22:59] *** MasterDuke left
[23:00] *** sena_kun joined
[23:40] <TreyHarris> Oops, I just remembered you don't give contrafactual analogies to T&M. Expect a request for a way to know the colors of the bits in a native value to be incoming... :-/

