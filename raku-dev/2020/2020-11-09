[01:40] *** leont left
[03:22] *** sourceable6 left
[03:22] *** nativecallable6 left
[03:22] *** releasable6 left
[03:22] *** committable6 left
[03:22] *** benchable6 left
[03:22] *** statisfiable6 left
[03:22] *** squashable6 left
[03:22] *** bloatable6 left
[03:22] *** greppable6 left
[03:22] *** quotable6 left
[03:22] *** linkable6 left
[03:22] *** coverable6 left
[03:22] *** shareable6 left
[03:22] *** tellable6 left
[03:22] *** evalable6 left
[03:22] *** bisectable6 left
[03:22] *** notable6 left
[03:22] *** unicodable6 left
[03:22] *** unicodable6 joined
[03:22] *** greppable6 joined
[03:23] *** evalable6 joined
[03:23] *** bloatable6 joined
[03:23] *** shareable6 joined
[03:23] *** bisectable6 joined
[03:23] *** committable6 joined
[03:23] *** squashable6 joined
[03:24] *** statisfiable6 joined
[03:24] *** nativecallable6 joined
[03:24] *** coverable6 joined
[03:24] *** tellable6 joined
[03:24] *** linkable6 joined
[03:24] *** sourceable6 joined
[03:25] *** releasable6 joined
[03:25] *** notable6 joined
[03:25] *** benchable6 joined
[03:25] *** quotable6 joined
[05:06] *** frost-lab joined
[08:34] *** domidumont joined
[08:42] *** MasterDuke joined
[09:23] *** leont joined
[09:30] <MasterDuke> hm. trying to pull an nqp::index out in front of grammar parsing might be quite difficult. doing it in the QAST::Block of a regex didn't really help because of the overhead of the parse() and ACCEPTS(), but maybe it would help for grammars?

[10:03] *** [Tux] left
[10:09] *** [Tux] joined
[10:10] <MasterDuke> heh. i got it working with a simple grammar. but...it slows it down by a little

[10:21] *** MasterDuke left
[10:26] *** MasterDuke joined
[10:27] <MasterDuke> when a grammar is parsing some text, is any particular token applied against the entire thing? or some substring of the text? i.e., `self.target` in the QAST::Block of a token seems to be the entire text, but i'd rather work against something smaller

[10:29] <MasterDuke> oh, i guess i can use `.(from|to|pos)()`

[10:30] <moritz> token TOP applies to the whole file

[11:02] <lizmat> Files=1337, Tests=114215, 224 wallclock secs (29.23 usr  8.61 sys + 3097.67 cusr 288.87 csys = 3424.38 CPU)

[11:05] *** MasterDuke left
[11:10] <Geth_> ¬¶ rakudo/expose-objecthash-role: 56113de2c1 | (Elizabeth Mattijsen)++ | 4 files

[11:10] <Geth_> ¬¶ rakudo/expose-objecthash-role: Move Typed/ObjectHash files to new location

[11:10] <Geth_> ¬¶ rakudo/expose-objecthash-role: 

[11:10] <Geth_> ¬¶ rakudo/expose-objecthash-role: No source changes yet

[11:10] <Geth_> ¬¶ rakudo/expose-objecthash-role: review: https://github.com/rakudo/rakudo/commit/56113de2c1

[11:10] <Geth_> ¬¶ rakudo/expose-objecthash-role: fce3f7764e | (Elizabeth Mattijsen)++ | 19 files

[11:10] <Geth_> ¬¶ rakudo/expose-objecthash-role: Track Typed/ObjectHash -> Hash::Typed/Object changes

[11:10] <Geth_> ¬¶ rakudo/expose-objecthash-role: review: https://github.com/rakudo/rakudo/commit/fce3f7764e

[11:38] *** MasterDuke joined
[12:45] <nwc10> m: my int $a = 1; my int $b = 1; $a does role { method Str() { "foo" } }; $b.Str.say

[12:45] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´foo‚ê§¬ª

[12:45] <nwc10> m: my $a = 1; my $b = 1; $a does role { method Str() { "foo" } }; $b.Str.say

[12:45] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´foo‚ê§¬ª

[12:45] <nwc10> j: my int $a = 1; my int $b = 1; $a does role { method Str() { "foo" } }; $b.Str.say

[12:45] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´1‚ê§¬ª

[12:45] <nwc10> j: my $a = 1; my $b = 1; $a does role { method Str() { "foo" } }; $b.Str.say

[12:45] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´foo‚ê§¬ª

[12:46] <nwc10> https://github.com/MoarVM/MoarVM/pull/1379 fixes the first for `m`

[12:46] <nwc10> clearly the second is in NQP or Rakudo

[12:46] <nwc10> that's not something I can easily find

[12:49] *** frost-lab left
[12:50] *** sena_kun joined
[12:51] *** MasterDuke left
[13:07] *** MasterDuke joined
[13:17] *** MasterDuke left
[13:27] <lizmat> nwc10: could you make a Rakudo issue for that?  so it doesn't fall through the cracks ?

[13:27] <nwc10> OK

[13:28] <nwc10> I was going to say: you mean the second one that isn't just MoarVM? But I guess the first one also needs "tests needed"

[13:30] *** MasterDuke joined
[13:35] <lizmat> notable6: weekly

[13:35] <notable6> lizmat, No notes for ‚Äúweekly‚Äù

[13:40] <nwc10> https://github.com/rakudo/rakudo/issues/4015

[13:43] <sena_kun> bisectable6, my $a = 1; my $b = 1; $a does role { method Str() { "foo" } }; $b.Str.say

[13:43] <bisectable6> sena_kun, Will bisect the whole range automagically because no endpoints were provided, hang tight

[13:43] <bisectable6> sena_kun, ¬¶6c (48 commits): ¬´foo‚ê§¬ª

[13:43] <bisectable6> sena_kun, Nothing to bisect!

[14:03] <ugexe> m: my $a = "1".Int; my $b = "1".Int; $a does role { method Str() { "foo" } }; $b.Str.say

[14:03] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´foo‚ê§¬ª

[14:04] <ugexe> that says 1 on my system...

[14:04] <ugexe> This is Rakudo version 2020.01 built on MoarVM version 2020.01.1

[14:05] <ugexe> bisectable6, my $a = "1".Int; my $b = "1".Int; $a does role { method Str() { "foo" } }; $b.Str.say

[14:05] <bisectable6> ugexe, Will bisect the whole range automagically because no endpoints were provided, hang tight

[14:05] <nwc10> somewhere (this channel) I think, someone noted that the exact syntax used to define the variables causes different code paths to be taken

[14:05] <bisectable6> ugexe, Output on all releases: https://gist.github.com/b81ae42c0a6a50e656360d582bb2a97d

[14:05] <bisectable6> ugexe, Bisecting by output (old=2020.05.1 new=2020.06) because on both starting points the exit code is 0

[14:05] <nwc10> it's way beyond me.

[14:06] <nwc10> (my head is too full of other things, which I do understand better)

[14:06] <bisectable6> ugexe, bisect log: https://gist.github.com/57f81bbf8162f5633ea5577243301dbc

[14:06] <bisectable6> ugexe, Output on all releases and bisected commits: https://gist.github.com/f3abfc8538a0730e60b00441766c572b

[14:07] <MasterDuke> 3ee1777a6b78f30cb6997701a667c0a6de04269f

[14:07] <linkable6> (2020-05-13) https://github.com/rakudo/rakudo/commit/3ee1777a6b Make "42".Int about 4.3x faster

[14:08] <MasterDuke> m: my $a = "1".Int; my $b = Int.new("1".Int); $a does role { method Str() { "foo" } }; $b.Str.say

[14:08] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´1‚ê§¬ª

[14:09] <Geth_> ¬¶ nqp: 6859824bba | (Daniel Green)++ | src/HLL/Grammar.nqp

[14:09] <Geth_> ¬¶ nqp: Add missing closing '"' to error message

[14:09] <Geth_> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/6859824bba

[14:53] <AlexDaniel`> hm, bisectable printed garbage in that last message

[14:53] <AlexDaniel`> weird

[14:59] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/11/09/2020-45-cro-serviced/

[15:01] <MasterDuke> lizmat: the link to the new cro points to https://commaide.com/download

[15:01] <lizmat> argh.... wordpress hits again  :-(

[15:02] <MasterDuke> oh, that also looks like a new release

[15:03] <lizmat> yeah, but that was last week  :-)

[15:03] <lizmat> Anyways, fixed now, MasterDuke++

[15:07] <MasterDuke> lizmat++

[15:09] *** MasterDuke left
[15:15] <jjatria> jmerelo: Belated thanks for the Gitlab invite!

[15:15] <tellable6> jjatria, I'll pass your message to jmerelo

[15:15] *** MasterDuke joined
[15:17] <MasterDuke> lizmat: btw, if you want another place to check, lwn.net also sometimes has raku-related comments. i know i've seen several by nine++

[15:17] <lizmat> ah, good point

[15:18] <MasterDuke> e.g., https://lwn.net/Articles/835004/

[15:18] <lizmat> yeah, it's just that LWN (like the mailing list) has such a rotten UI

[15:19] <lizmat> anyways, thanks for the nudge

[15:19] <lizmat> afk for a bit&

[15:23] <[Tux]> Rakudo v2020.10-59-g1321a8533 (v6.d) on MoarVM 2020.10-31-gb13f6a24c

[15:23] <[Tux]> csv-test-xs-20      0.382 -  0.385

[15:23] <[Tux]> test-t --race       0.829 -  0.850

[15:23] <[Tux]> csv-ip5xs           0.867 -  0.882

[15:23] <[Tux]> test-t              1.810 -  1.916

[15:23] <[Tux]> csv-ip5xs-20        8.053 -  8.476

[15:23] <[Tux]> test                7.770 -  8.463

[15:23] <[Tux]> test-t-20 --race    8.698 -  9.477

[15:23] <[Tux]> csv-parser         27.320 - 28.084

[15:23] <[Tux]> test-t-20          30.681 - 32.166

[15:35] <MasterDuke> timotimo: i almost have pulling a literal out into an nqp::index working for grammars (works in some toy examples, but the nqp build dies with it turned on). but i'm doing it in the QAST::Block because otherwise i run into the WVal problem referring back to the grammar

[15:37] <MasterDuke> but it appears to do a lot of extra work, i'm not sure why, backtracking maybe?

[15:37] <MasterDuke> think there's a better way to do it this way? or do i need to figure out the WVal problem?

[15:40] *** domidumont left
[16:09] *** Altai-man joined
[16:12] *** sena_kun left
[16:51] <ugexe> fwiw as of a few weeks ago e.g. `"depends" : [ { "any": ["Lib::Curl","Lib::Wget"] } ]` is available in the latest version of zef (nine++)

[16:51] <ugexe> ===> Dependencies: any(Lib::Curl, Lib::Wget), Test

[16:51] <ugexe> ===> Searching for missing dependencies: any(Lib::Curl,Lib::Wget)

[16:51] <ugexe> ===> Failed to find dependencies: any(Lib::Curl,Lib::Wget)

[16:51] <ugexe> Failed to resolve some missing dependencies

[16:56] <ugexe> or for a success

[16:56] <ugexe> ===> Dependencies: any(Lib::Curl, Net::HTTP), Test

[16:56] <ugexe> ===> Searching for missing dependencies: any(Lib::Curl,Net::HTTP)

[16:56] <ugexe> ===> Found dependencies: Net::HTTP:ver<0.0.9>:auth<github:ugexe> [via Zef::Repository::LocalCache]

[17:03] <MasterDuke>  cool

[17:16] <nine> Time to dust off my patches for OpenSSL (which depends on {"any": [{"name":"ssl", "from": "native", "ver": "1.1"}, {"name":"ssl", "from": "native", "ver": "1.0"}]})

[17:17] <nine> With these patches it will no longer need a -devel or -dev package of OpenSSL installed

[17:21] <ugexe> It'll need something for windows though, no? OpenSSL packages its own ssleay32.dll and libeay32.dll

[17:23] <ugexe> i guess just return an empty dependency set on windows

[17:34] *** eater left
[17:46] <nine> I just trimmed that away for IRC

[17:47] <ugexe> yeah i figured, but i had forgot an empty dependency set was ok. i was initially thinking 'but we dont have a way to declare a dependency such as foo.dll that the package itself will provide if its missing"

[17:49] *** domidumont joined
[18:43] *** domidumont left
[18:53] *** MasterDuke left
[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: e8cab59995 | (Elizabeth Mattijsen)++ | 11 files

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: Start making Array roles exposed properly as well

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: 

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: Move source files to their new location: no changes to code just yet

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: review: https://github.com/rakudo/rakudo/commit/e8cab59995

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: 46786b5e46 | (Elizabeth Mattijsen)++ | 8 files

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: Expose shaped/typed array roles

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: 

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: This doesn't change any functionality, it just makes the code better

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: maintainable and changes some names:

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: 

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping:   TypedArray    -> Array::Typed

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping:   ShapedArray   -> Array::Shaped

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: <‚Ä¶commit message has 15 more lines‚Ä¶>

[19:23] <Geth_> ¬¶ rakudo/reorganize-array-shaping: review: https://github.com/rakudo/rakudo/commit/46786b5e46

[19:24] <Geth_> ¬¶ rakudo: lizmat++ created pull request #4016: Reorganize array shaping

[19:24] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/4016

[19:26] *** MasterDuke joined
[20:10] *** sena_kun joined
[20:12] *** Altai-man left
[20:20] <gfldex> m: my @a; @a[0] = (1,2).Slip; .say for @a;

[20:20] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(1 2)‚ê§¬ª

[20:20] <gfldex> Should that slip?

[20:23] <lizmat> m: my @a; @a[0] = (1,2).Slip; dd @a

[20:23] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Array @a = [slip(1, 2),]‚ê§¬ª

[20:24] <lizmat> well, you stored the slip at @a[0[, and the moment you access it, it gets slipped

[20:24] <lizmat> m: my @a; @a[0] = (1,2).Slip; dd @a[0[

[20:24] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in subscript; couldn't find final ']' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3my @a; @a[0] = (1,2).Slip; dd @a[0[7‚èè5<EOL>‚ê§    expecting any of:‚Ä¶¬ª

[20:24] <lizmat> m: my @a; @a[0] = (1,2).Slip; dd @a[0]

[20:24] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Slip @a = $(slip(1, 2))‚ê§¬ª

[20:24] <lizmat> hmmm... 

[20:24] <lizmat> m: my @a; @a[0] = (1,2).Slip; say @a[0]

[20:24] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(1 2)‚ê§¬ª

[20:25] <lizmat> the "say" is actually applying the single argument rule, I guess

[20:25] <lizmat> m: my @a; @a[0] = (1,2).Slip; say @a[0], "foo"

[20:25] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(1 2)foo‚ê§¬ª

[20:25] <lizmat> hmmm

[20:25] <gfldex> This is either a rakudobug or an ENODOC.

[20:25] <lizmat> well, a Slip is just a List with benefits

[20:26] <timotimo> badum tss

[20:26] <lizmat> :-)

[20:28] <gfldex> m: my @a; @a[0] = (1,2).Slip; @a.iterator.pull-one.say;

[20:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(1 2)‚ê§¬ª

[20:28] <Geth_> ¬¶ rakudo/reorganize-array-shaping: 86f17387c9 | (Elizabeth Mattijsen)++ | 2 files

[20:28] <Geth_> ¬¶ rakudo/reorganize-array-shaping: Make sure exception is stubbed at the right time

[20:28] <Geth_> ¬¶ rakudo/reorganize-array-shaping: review: https://github.com/rakudo/rakudo/commit/86f17387c9

[20:29] <lizmat> m: my @a; @a[0] = (1,2).Slip; dd @a.iterator.pull-one   # say is hiding information

[20:29] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Slip @a = $(slip(1, 2))‚ê§¬ª

[20:29] <gfldex> I did expect the iterator to decent into the Slip.

[20:30] <lizmat> why ?

[20:30] <lizmat> it is itemized, so it shouldn't anyway

[20:30] <lizmat> but even then

[20:30] <gfldex> because the docs say: A Slip is a List that automatically flattens into an outer List (or other list-like container or iterable).

[20:30] <lizmat> m: my @a; @a[0] := (1,2).Slip; dd @a.iterator.pull-one

[20:30] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´slip(1, 2)‚ê§¬ª

[20:31] <lizmat> m: my @a; @a[0] := (1,2).Slip; dd $_ for @a.iterator.pull-one

[20:31] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´1‚ê§2‚ê§¬ª

[20:31] <lizmat> m: my @a; @a[0] = (1,2).Slip; dd $_ for @a.iterator.pull-one

[20:31] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´1‚ê§2‚ê§¬ª

[20:32] <lizmat> when you use an iterator, you're really on your own

[20:32] <gfldex> m: my @a; @a[0] = (1,2).Slip; dd $_ for @a;

[20:32] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Slip @a = $(slip(1, 2))‚ê§¬ª

[20:32] <lizmat> it's the handling of whatever an iterator produces, is where the flattening happenbs

[20:32] <gfldex> I don't want to use the iterator at all.

[20:32] <lizmat> m: my @a; @a[0] := (1,2).Slip; dd $_ for @a;

[20:33] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´slip(1, 2)‚ê§¬ª

[20:33] <lizmat> m: my @a; @a[0] := (1,2).Slip; dd $_ for @a.flat;

[20:33] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´slip(1, 2)‚ê§¬ª

[20:33] <lizmat> hmmm

[20:34] <lizmat> m: my @a; @a[0] := (1,2); dd $_ for @a.flat;

[20:34] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(1, 2)‚ê§¬ª

[20:35] <lizmat> m: my @a; @a[0] := (1,2); dd @a.flat;

[20:35] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´((1, 2),).Seq‚ê§¬ª

[20:36] <gfldex> All cases without a Slip are correct. But they behave the same then with a Slip. So why have the Slip?

[20:36] <gfldex> Is there any use case where one would want to maintain the Slip?

[20:36] <lizmat> m: my @a; @a[0] = (1,2).Slip; dd @a.map({$_})

[20:36] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(1, 2).Seq‚ê§¬ª

[20:37] <gfldex> At the other hand, if Slip works on array container assignment/binding one does not need splice anymore.

[20:38] <gfldex> m: my @a = [ (1,2), (3,4), (5,6) ]; @a[1] = (<a b>, <c d>).Slip; .say for @a;

[20:38] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(1 2)‚ê§((a b) (c d))‚ê§(5 6)‚ê§¬ª

[20:39] <lizmat> m: my %h; %h<a> = (1,2,3).Slip; dd $_ for %h<a>

[20:39] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[20:39] <lizmat> m: my @a; @a[0] = (1,2,3).Slip; dd $_ for @a[0]

[20:39] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[20:39] <lizmat> handy uses of Slip inside a Hash or an Array

[20:40] <lizmat> It feels like we could use more documentation, so perhaps make a doc issues ?

[20:40] <lizmat> *issue 

[20:42] <gfldex> I'm not conviced this is an ENODOC. Because I could not explain why it works for Hash-elements and List but not for Array.

[20:45] <lizmat> gfldex: so what is the difference in behaviour between List and Array ?

[20:50] <lizmat> afk for at least a few hours&

[22:06] *** MasterDuke left
[22:23] *** JJAtria[m] joined
[22:24] *** sena_kun left
[22:25] *** sena_kun joined
[22:53] *** sena_kun left
[23:39] *** Kaeipi joined
[23:39] *** Kaiepi left
