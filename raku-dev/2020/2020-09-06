[01:21] *** leont left
[03:05] *** releasable6 left
[03:05] *** quotable6 left
[03:05] *** benchable6 left
[03:05] *** coverable6 left
[03:05] *** tellable6 left
[03:05] *** shareable6 left
[03:05] *** bisectable6 left
[03:05] *** bloatable6 left
[03:05] *** greppable6 left
[03:05] *** sourceable6 left
[03:05] *** committable6 left
[03:05] *** squashable6 left
[03:05] *** evalable6 left
[03:05] *** nativecallable6 left
[03:05] *** reportable6 left
[03:05] *** statisfiable6 left
[03:05] *** unicodable6 left
[03:05] *** notable6 left
[03:05] *** linkable6 left
[03:06] *** committable6 joined
[03:06] *** unicodable6 joined
[03:06] *** reportable6 joined
[03:06] *** evalable6 joined
[03:06] *** sourceable6 joined
[03:06] *** quotable6 joined
[03:06] *** squashable6 joined
[03:07] *** coverable6 joined
[03:07] *** shareable6 joined
[03:07] *** greppable6 joined
[03:08] *** benchable6 joined
[03:08] *** tellable6 joined
[03:08] *** linkable6 joined
[03:08] *** notable6 joined
[03:08] *** statisfiable6 joined
[03:08] *** bisectable6 joined
[03:08] *** bloatable6 joined
[03:08] *** releasable6 joined
[03:09] *** nativecallable6 joined
[03:10] *** zostay left
[03:12] *** zostay joined
[03:16] <Xliff> timotimo: Yep that.

[04:41] *** MasterDuke left
[06:24] *** domidumont joined
[07:20] *** domidumont left
[08:00] *** sena_kun joined
[08:30] *** MasterDuke joined
[09:20] <lizmat> Files=1336, Tests=113586, 221 wallclock secs (29.40 usr  8.43 sys + 3102.36 cusr 290.46 csys = 3430.65 CPU)

[09:43] <sena_kun>  

[09:44] <Geth> ¬¶ problem-solving: JJ assigned to jnthn Issue Ecosystem name resolution (or squatting) problem https://github.com/Raku/problem-solving/issues/229

[10:07] <Geth> ¬¶ rakudo/precomp_store_parallelism: 4 commits pushed by (Stefan Seifert)++

[10:07] <Geth> ¬¶ rakudo/precomp_store_parallelism: 3780c1d447 | Fix long standing race condition in precompilation causing spurious test failures

[10:07] <Geth> ¬¶ rakudo/precomp_store_parallelism: 961a653516 | Check for circular module loading earlier to avoid deadlock

[10:07] <Geth> ¬¶ rakudo/precomp_store_parallelism: 864253395b | Fix occasional test failures caused by overly clever reproducible-builds.t

[10:07] <Geth> ¬¶ rakudo/precomp_store_parallelism: 0500ed3ac0 | Allow for more parallelism when precompiling modules

[10:07] <Geth> ¬¶ rakudo/precomp_store_parallelism: review: https://github.com/rakudo/rakudo/compare/f2106afcd17d...0500ed3ac093

[10:18] *** leont joined
[10:28] *** camelia left
[10:28] *** Geth left
[10:28] *** Geth joined
[10:29] *** camelia joined
[10:44] <timotimo> Xliff: yeah, that's an accurate assessment

[10:47] <Xliff> timotimo: ah. Thanks.

[10:47] <Xliff> OK. Maybe bug?

[10:47] <Xliff> https://github.com/rakudo/rakudo/blob/master/src/core.c/traits.pm6#L512

[10:48] <Xliff> Why $thunk() -- This results in No such method 'CALL-ME' for invocant of type 'Str'

[10:48] <Xliff> m: my $a = 'a'; $a()

[10:48] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´No such method 'CALL-ME' for invocant of type 'Str'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:55] <Geth> ¬¶ problem-solving: holli-holzer assigned to jnthn Issue rx:s/ / is considered a null regex https://github.com/Raku/problem-solving/issues/230

[10:58] <Xliff> Method 'content' must be implemented by CompUnit::Repository::Distribution because it is required by roles: Distribution.

[10:58] <Xliff> ^^ From fresh build attempt

[11:01] <Xliff> So it looks like the parens around $thunk ARE needed.

[11:08] <Xliff> Ah, so it's trait_mod:<handles>($attr, sub { <expr })

[11:08] <Xliff> However that still isn't working at run-time.

[11:09] <Xliff> ENOTABUG

[11:18] *** Altai-man joined
[11:20] *** sena_kun left
[11:23] <Geth> ¬¶ rakudo/master: 5 commits pushed by (Stefan Seifert)++, niner++

[11:23] <Geth> ¬¶ rakudo/master: 3780c1d447 | Fix long standing race condition in precompilation causing spurious test failures

[11:23] <Geth> ¬¶ rakudo/master: 961a653516 | Check for circular module loading earlier to avoid deadlock

[11:23] <Geth> ¬¶ rakudo/master: 864253395b | Fix occasional test failures caused by overly clever reproducible-builds.t

[11:23] <Geth> ¬¶ rakudo/master: 0500ed3ac0 | Allow for more parallelism when precompiling modules

[11:23] <Geth> ¬¶ rakudo/master: e65466fcdb | Merge pull request #3861 from rakudo/precomp_store_parallelism

[11:23] <Geth> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/e59262f65fca...e65466fcdba2

[11:26] <Altai-man> nine++

[11:36] <Xliff> Altai-man++

[11:37] <timotimo> Xliff++

[11:38] <nine> timotimo++

[11:47] <lizmat> nine: does that imply that tools/build/install-core-dist.raku could be made to install all modules in parallel ?

[11:47] <nine> lizmat: actually, yes

[11:48] <lizmat> looks like that needs a change in CU::Staging, right ?

[11:49] <nine> lizmat: from a quick look, this actually means that you'd have to make dist installation parallelized in general, which would be quite awesome

[11:50] <nine> https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/Repository/Installation.pm6#L270

[11:51] *** [Tux] left
[11:51] <lizmat> do the $precomp.compile in a start block and wait for all the promised ?

[11:51] <lizmat> *promises

[11:52] <nine> something like that, yes

[11:59] <[TuxCM]> Rakudo version 2020.08.2-59-ge65466fcd - MoarVM version 2020.08-91-g590bac47e

[11:59] <[TuxCM]> csv-test-xs-20      0.397 -  0.399

[11:59] <[TuxCM]> test-t --race       0.830 -  0.851

[11:59] <[TuxCM]> csv-ip5xs           0.954 -  0.989

[11:59] <[TuxCM]> test-t              1.868 -  1.906

[11:59] <[TuxCM]> test                7.561 -  7.856

[11:59] <[TuxCM]> test-t-20 --race    9.263 -  9.447

[11:59] <[TuxCM]> csv-ip5xs-20        9.803 - 10.041

[11:59] <[TuxCM]> csv-parser         25.481 - 30.616

[11:59] <[TuxCM]> test-t-20          31.670 - 32.964

[12:04] <Altai-man> oooh, this sounds juicy

[12:09] <Altai-man> releasable6, status

[12:09] <releasable6> Altai-man, Next release in ‚âà13 days and ‚âà6 hours. 1 blocker. Changelog for this release was not started yet

[12:09] <releasable6> Altai-man, Details: https://gist.github.com/132920cfc4d7244fb0a5c75b1dd15311

[12:13] <lizmat> nine: could you comment on this comment?

[12:13] <lizmat>         # the following 3 `for` loops should be a single loop, but has been

[12:13] <lizmat>         # left this way due to impeding precomp changes

[12:14] <nine> no

[12:14] <lizmat> ok

[12:14] <nine> I'd ignore it

[12:15] <lizmat> any reason why it does "%provides.sort"   why the sort ?

[12:16] <timotimo> impeding or impending?

[12:17] <nine> Looks like a reproducible builds fix

[12:20] *** lizmat_ joined
[12:20] <timotimo> that sounds like a good assumption for every appearance of "sort"

[12:21] <nine> It's also what my commit message indicates. Though I honestly cannot say how the order would change the result and I didn't mention that :/

[12:22] <timotimo> insort it and see what happens ;) ;)

[12:22] <timotimo> unsort*

[12:23] *** lizmat left
[12:30] *** lizmat_ is now known as lizmat

[12:42] <lizmat> afk for a few hours&

[12:50] *** raku-bridge2 joined
[12:50] *** raku-bridge left
[12:50] *** raku-bridge2 left
[12:50] *** raku-bridge2 joined
[12:51] *** raku-bridge2 is now known as raku-bridge

[14:17] *** jdv79 joined
[15:19] *** sena_kun joined
[15:21] *** Altai-man left
[16:07] *** HarmtH left
[16:09] *** HarmtH joined
[16:17] *** camelCaser left
[16:17] *** ccamel joined
[17:55] *** sena_kun left
[18:20] *** Kaiepi left
[18:20] *** Kaiepi joined
[18:45] *** sena_kun joined
[18:59] *** maggotbrain left
[19:00] *** maggotbrain joined
[19:18] *** Altai-man joined
[19:21] *** sena_kun left
[19:36] *** Altai-man left
[20:28] <Geth> ¬¶ rakudo/parallel-module-install: 41e7f5e3a2 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/Repository/Installation.pm6

[20:28] <Geth> ¬¶ rakudo/parallel-module-install: Step #1: streamline CURI.install

[20:28] <Geth> ¬¶ rakudo/parallel-module-install: 

[20:28] <Geth> ¬¶ rakudo/parallel-module-install: - use binding where possible, ensures no changes and save allocations

[20:28] <Geth> ¬¶ rakudo/parallel-module-install: - fix indentation on protect block / localization dynvar blocks

[20:28] <Geth> ¬¶ rakudo/parallel-module-install: - remove unnecessary intermediate variables

[20:28] <Geth> ¬¶ rakudo/parallel-module-install: - rename $lock to $repo-lock, to prevent confusion with $!lock

[20:28] <Geth> ¬¶ rakudo/parallel-module-install: - remove unnecessary "is copy" in signatures

[20:28] <Geth> ¬¶ rakudo/parallel-module-install: - remove unneccssary .IO on already IO::Path objects

[20:28] <Geth> ¬¶ rakudo/parallel-module-install: - only sort %provides once, work using keys from there on

[20:28] <Geth> ¬¶ rakudo/parallel-module-install: - replace .values[0] with .values.head to prevent unnecessary caching

[20:29] <Geth> ¬¶ rakudo/parallel-module-install: - some code re-ordering to prevent unnecessary work if next fires

[20:29] <Geth> ¬¶ rakudo/parallel-module-install: review: https://github.com/rakudo/rakudo/commit/41e7f5e3a2

[22:45] <Geth> ¬¶ rakudo/parallel-module-install: 4eb221dda5 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/Repository/Installation.pm6

[22:45] <Geth> ¬¶ rakudo/parallel-module-install: Step #2: naive parallelization of module installation

[22:45] <Geth> ¬¶ rakudo/parallel-module-install: 

[22:45] <Geth> ¬¶ rakudo/parallel-module-install: Basically run the precomp in a start block, collect the promises

[22:45] <Geth> ¬¶ rakudo/parallel-module-install: and await them.  Results for installation of core modules is meagre.

[22:45] <Geth> ¬¶ rakudo/parallel-module-install: Installing something like App::Mi6 goes from 18 -> 15 seconds

[22:45] <Geth> ¬¶ rakudo/parallel-module-install: wallclock.  Which is...  disappointing.  I wonder why this doesn't

[22:45] <Geth> ¬¶ rakudo/parallel-module-install: improve more.

[22:45] <Geth> ¬¶ rakudo/parallel-module-install: review: https://github.com/rakudo/rakudo/commit/4eb221dda5

[22:55] <timotimo> lizmat: can you post like a module debug log or something of mi6 or core modules?

[22:56] <timotimo> there must be something somewhere that forces serialization?

[23:11] <MasterDuke> Xliff: does the ^^^ branch do anything for your modules?

