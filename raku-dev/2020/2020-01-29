[00:06] *** Xliff joined
[00:11] <Xliff> o/

[00:11] <tellable6> 2020-01-22T10:42:54Z #raku <Doc_Holliwood> Xliff: Thanks, but that's not what I meant.

[00:32] <TreyHarris> the light dawns... he's asking for Raku to intentionally provoke, and then recover from, a segmentation fault

[00:33] <TreyHarris> for... some reason that's very important to him

[00:45] *** sena_kun left
[00:54] *** lucasb left
[00:59] *** sena_kun joined
[01:03] *** Xliff left
[02:44] *** sena_kun left
[02:59] *** sena_kun joined
[03:08] <TreyHarris> why is .^name preferred to .WHAT in the docs? At least, there's a test to warn against using WHAT and not .^name

[03:32] <AlexDaniel> TreyHarris: that'd be a nice tellable feature, yes

[04:46] *** linkable6 left
[04:46] *** evalable6 left
[04:46] *** linkable6 joined
[04:46] *** sena_kun left
[04:48] *** evalable6 joined
[04:50] *** AlexDaniel left
[05:00] *** sena_kun joined
[06:01] *** squashable6 left
[06:03] *** squashable6 joined
[06:45] *** sena_kun left
[07:00] *** sena_kun joined
[07:34] *** domidumont joined
[07:38] *** epony left
[08:45] *** sena_kun left
[09:01] *** sena_kun joined
[09:43] <jnthn> TreyHarris: I think 'cus if folks stringify the type object it's a warning, so `say $foo.WHAT` or `note $foo.WHAT` works out well, but things like `put $foo.WHAT` or `say "the type is {$foo.WHAT}"` do not

[10:32] <|Tux|> Rakudo version 2020.01-38-gd18c69b2b - MoarVM version 2020.01.1-2-gcbb04d462

[10:32] <|Tux|> csv-test-xs-20      0.367 -  0.370

[10:32] <|Tux|> csv-ip5xs           0.692 -  0.699

[10:32] <|Tux|> test-t --race       0.787 -  0.803

[10:32] <|Tux|> test-t              1.787 -  1.794

[10:32] <|Tux|> csv-ip5xs-20        5.820 -  6.038

[10:32] <|Tux|> test                7.050 -  7.208

[10:32] <|Tux|> test-t-20 --race    8.445 -  8.515

[10:32] <|Tux|> csv-parser         22.351 - 22.514

[10:32] <|Tux|> test-t-20          30.409 - 30.590

[10:45] *** sena_kun left
[10:59] *** sena_kun joined
[11:14] *** epony joined
[11:19] <Geth> ¦ rakudo: b777d6ff61 | (Elizabeth Mattijsen)++ | src/core.c/Regex.pm6

[11:19] <Geth> ¦ rakudo: Regex.ACCEPTS should not assume $/ is a container

[11:19] <Geth> ¦ rakudo: 

[11:19] <Geth> ¦ rakudo: Since https://github.com/rakudo/rakudo/commit/d8e859d000 an

[11:19] <Geth> ¦ rakudo: nqp::istype is done during creation of a BUILDPLAN for a class.

[11:19] <Geth> ¦ rakudo: In some cases, specifically when the constraint on an attribute

[11:19] <Geth> ¦ rakudo: is a subtype, this meant calling Regex.ACCEPTS at compile time.

[11:19] <Geth> ¦ rakudo: However, at that point in time, the nearest $/ is an immutable

[11:19] <Geth> ¦ rakudo: <…commit message has 8 more lines…>

[11:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b777d6ff61

[11:20] <lizmat> *phew* that took some debugging...

[11:20] <lizmat> but was very clear once I spotted the hidden "=" in the code  :-)

[11:28] *** domidumont left
[12:45] *** sena_kun left
[12:47] *** lucasb joined
[12:48] *** Kaiepi left
[12:49] *** Kaiepi joined
[13:01] *** sena_kun joined
[13:10] <Geth> ¦ nqp: 57f8d2b123 | (Elizabeth Mattijsen)++ | src/QRegex/Cursor.nqp

[13:10] <Geth> ¦ nqp: Only do assignment if nfa is not in the cache

[13:10] <Geth> ¦ nqp: 

[13:10] <Geth> ¦ nqp: This method is at 25% of --profile-compile -e ''

[13:10] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/57f8d2b123

[13:16] *** titsuki joined
[13:21] <Geth> ¦ nqp: 9a12c17c16 | (Elizabeth Mattijsen)++ | src/QRegex/Cursor.nqp

[13:21] <Geth> ¦ nqp: cache_add returns the value, so no assignment needed

[13:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9a12c17c16

[13:24] *** Kaiepi left
[13:30] *** domidumont joined
[13:30] *** domidumont left
[13:31] *** domidumont joined
[13:40] *** titsuki left
[13:44] *** domidumont left
[14:00] *** titsuki joined
[14:01] *** Kaiepi joined
[14:02] *** domidumont joined
[14:04] <Geth> ¦ nqp: fad1aa45f3 | (Elizabeth Mattijsen)++ | src/QRegex/NFA.nqp

[14:04] <Geth> ¦ nqp: Completely disable NFA debugging (for now)

[14:04] <Geth> ¦ nqp: 

[14:04] <Geth> ¦ nqp: To gauge its effects on parsing Raku source.

[14:04] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fad1aa45f3

[14:12] <dogbert11> lizmat: curious wants to know :) does NFA debugging have a noticable impact?

[14:13] <Geth> ¦ roast: 355b01d9bd | (Ben Davies)++ | 3 files

[14:13] <Geth> ¦ roast: Move IO::Socket::INET UNIX socket tests to S32-io/IO-Socket-INET-UNIX.t

[14:13] <Geth> ¦ roast: 

[14:13] <Geth> ¦ roast: UNIX socket support doesn't exist on the JVM or JS backends at the

[14:13] <Geth> ¦ roast: moment, so don't try to test them with them.

[14:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/355b01d9bd

[14:13] <lizmat> dogbert1: not sure yet

[14:13] <lizmat> but it was doing 2 extra calls to a sub in just about every method in that class

[14:13] <lizmat> even with debugging off

[14:13] <dogbert11> oops

[14:15] <lizmat> I'll be afk for a few hours... in the meantime it will run a spectest that should give some more info, I'd say

[14:15] <lizmat> afk&

[14:17] <dogbert11> interesting

[14:19] <[Coke]> TreyHarris: (build log) ping jj. I'm out of the loop

[14:19] *** travis-ci joined
[14:19] <travis-ci> NQP build failed. Elizabeth Mattijsen 'Completely disable NFA debugging (for now)

[14:19] <travis-ci> https://travis-ci.org/perl6/nqp/builds/643391927 https://github.com/perl6/nqp/compare/9a12c17c1614...fad1aa45f305

[14:19] *** travis-ci left
[14:27] <vrurg> lizmat: Not only you fixed URI, but I also closed an old issue of mine. Thank you!

[14:45] *** sena_kun left
[14:59] *** sena_kun joined
[15:19] *** titsuki left
[15:49] <tony-o_> AlexDaniel`: that repo is building raku on an environment similar to travis-ci so you can clone it and use it on travis without waiting for raku to compile or using docker

[15:50] <tellable6> 2020-01-23T22:34:10Z #raku-dev <patrickb> tony-o Is there any write up or source for how zeco works with git repos? I'd be interested how it deals with versions of modules.

[15:50] <tony-o_> .tell patrickb yes - i can write that up, i'll probably write something up friday or after i get some buy in from ugexe on how we're going to consume this huge meta file

[15:50] <tellable6> tony-o_, I'll pass your message to patrickb

[16:25] <TreyHarris> jnthn: That makes sense... WHAT is the type object, so before assignment, $x === $x.WHAT, meaning you must refuse under strict to implicitly val-ify a type object, otherwise strict becomes meaningless

[16:26] <TreyHarris> m: no strict; say "{<1/2>.WHAT}"

[16:26] <camelia> rakudo-moar b777d6ff6: OUTPUT: «Use of uninitialized value of type Rat in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤␤  in block <unit> at <tmp> line 1␤»

[16:26] <TreyHarris> Hmm, not just strict

[16:27] <TreyHarris> I guess printing "Rat" when someone expects to be printing an actual number is just too surprising, so it fails even not strict

[16:29] <TreyHarris> Oh right, I forgot that was one of the first ground-shaking Apocalyptic changes, that use of unitialized variables would become fatal rather than warning. Is there a pragma to revert to warning? I imagine not

[16:35] <tobs> TreyHarris: I think it *is* a warning

[16:35] <tobs> m: say "{<1/2>.WHAT}"; say "still alive"

[16:35] <camelia> rakudo-moar b777d6ff6: OUTPUT: «Use of uninitialized value of type Rat in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤␤still alive␤  in block <unit> at <tmp> line 1␤»

[16:35] <TreyHarris> tobs: oh... what's going on with my REPL?

[16:35] <tobs> you just didn't see anything but the warning at first because that's what the warning was about :)

[16:36] <TreyHarris> No, I meant my local REPL

[16:36] <TreyHarris> It's definitely throwing and catching exceptions

[16:36] <TreyHarris> Oh, dear... I've ruined it by handing it that DWord uint32 abomination

[16:37] <tobs> huh, I still have Rakudo 2019.07 and it just warns

[16:37] <tobs> ah, I see.

[16:37] <TreyHarris> It's throwing errors for any variables that touch Int now

[16:37] <TreyHarris> restart.

[16:37] <tobs> Native types do that to the REPL IIRC

[16:37] <TreyHarris> Why is Rat affected, I wonder?

[16:38] <TreyHarris> I got `Cannot find method 'qast' on object of type NQPMu` using a Rat

[16:38] <TreyHarris> doesn't matter. GIGO

[16:44] *** domidumont left
[16:45] *** sena_kun left
[17:01] *** sena_kun joined
[17:05] <Geth> ¦ problem-solving/front-matter-for-routines: 4982b8254f | (JJ Merelo)++ | 2 files

[17:05] <Geth> ¦ problem-solving/front-matter-for-routines: Adds proposal for solving #155

[17:05] <Geth> ¦ problem-solving/front-matter-for-routines: review: https://github.com/Raku/problem-solving/commit/4982b8254f

[17:07] <Geth> ¦ problem-solving: JJ++ created pull request #156: Adds proposal for solving #155

[17:07] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/156

[17:11] *** pyrimidine joined
[17:14] *** pyrimidi_ left
[17:14] *** patrickb joined
[17:30] <Geth> ¦ problem-solving/front-matter-for-routines: a0ed4da650 | (JJ Merelo)++ | solutions/documentation/front-matter-for-routines.md

[17:30] <Geth> ¦ problem-solving/front-matter-for-routines:  might → will

[17:30] <Geth> ¦ problem-solving/front-matter-for-routines: review: https://github.com/Raku/problem-solving/commit/a0ed4da650

[17:45] *** Kaiepi left
[17:45] *** Kaiepi joined
[18:15] <TreyHarris> m: say so Int.does(UInt); say so UInt.does(Int); # what's going on here?

[18:15] <camelia> rakudo-moar b777d6ff6: OUTPUT: «True␤True␤»

[18:16] <TreyHarris> oh, it's dynamic

[18:18] <TreyHarris> m: my Int $y = -3; say so $y.does(UInt); $y = 3; say so $y.does(UInt); 

[18:18] <camelia> rakudo-moar b777d6ff6: OUTPUT: «False␤True␤»

[18:41] <TreyHarris> duh, block-where clauses make a static analysis equivalent to the halting problem, doesn't it? :-)

[18:43] <lizmat> bisectable6: dd -> $ where /./, $/ {}("x", "y")

[18:43] <bisectable6> lizmat, Bisecting by exit code (old=2015.12 new=b777d6f). Old exit code: 1

[18:43] <bisectable6> lizmat, bisect log: https://gist.github.com/8615dc56a3b36ae9cb9c65a2878078b8

[18:43] <bisectable6> lizmat, (2020-01-29) https://github.com/rakudo/rakudo/commit/b777d6ff61e52232a784724ec5b6f855b5e50813

[18:46] *** sena_kun left
[18:47] <lizmat> bisectable6: $/ := 42; dd /./.ACCEPTS("a")

[18:47] <bisectable6> lizmat, Bisecting by exit code (old=2015.12 new=b777d6f). Old exit code: 1

[18:48] <bisectable6> lizmat, bisect log: https://gist.github.com/a590b13bf7bc56587119400bf67855ad

[18:48] <bisectable6> lizmat, (2020-01-29) https://github.com/rakudo/rakudo/commit/b777d6ff61e52232a784724ec5b6f855b5e50813

[18:48] <Geth> ¦ problem-solving: Kaiepi assigned to jnthn Issue IO::Socket::INET's methods for socket creation may need reconsideration https://github.com/Raku/problem-solving/issues/157

[18:53] <Geth> ¦ roast: 38dbffdb91 | (Elizabeth Mattijsen)++ | S05-mass/rx.t

[18:53] <Geth> ¦ roast: Add test for GH#2059

[18:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/38dbffdb91

[18:53] <linkable6> GH#2059 [closed]: https://github.com/rakudo/rakudo/issues/2059 [LTA] LTA error with regex in `where` clause while `$/` is used for a later param in the same signature

[18:55] *** vrurg left
[18:56] *** vrurg joined
[19:00] *** sena_kun joined
[19:18] <Geth> ¦ rakudo: fb13c31c44 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[19:18] <Geth> ¦ rakudo: Bump NQP to get some grammar micro-opts

[19:18] <Geth> ¦ rakudo: 

[19:18] <Geth> ¦ rakudo: They're little ones for now, but every little bit helps

[19:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fb13c31c44

[19:23] <Geth> ¦ rakudo: 59cf387d44 | (Christian Bartolomäus)++ | src/vm/jvm/runtime/org/perl6/rakudo/RakOps.java

[19:23] <Geth> ¦ rakudo: [JVM] Update overlooked ref to HLL language perl6

[19:23] <Geth> ¦ rakudo: 

[19:23] <Geth> ¦ rakudo: This was done in all other places with b787095358.

[19:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/59cf387d44

[19:24] <lizmat> bartolin++   # thanks for the spot!

[19:25] <bartolin> yw. I'm trying to catch up with recent changes :)

[19:47] <bartolin> ah, well. I guess this wants to be changed, too: https://github.com/rakudo/rakudo/blob/59cf387d44/src/vm/jvm/runtime/org/perl6/rakudo/RakudoJavaInterop.java#L1003

[19:49] * bartolin could do that later

[19:56] <lizmat> bartolin: yeah, feels like

[20:01] *** MasterDuke joined
[20:04] <Geth> ¦ rakudo: dumarchie++ created pull request #3447: Merge Iterable and Seq infix:<eqv> multis

[20:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3447

[20:08] <MasterDuke> anyone have an objection to merging https://github.com/MoarVM/MoarVM/pull/1221 ?

[20:12] <lizmat> MasterDuke: I see some unresolved conversations ?

[20:13] <MasterDuke> not anymore!

[20:13] <lizmat> can you merge ?

[20:13] *** dumarchie joined
[20:14] <lizmat> m: class A { method !a() { } }; dd A.^find_private_method("a").head.signature

[20:14] <camelia> rakudo-moar 59cf387d4: OUTPUT: «:(A: *%_)␤»

[20:14] <MasterDuke> yeah

[20:14] <lizmat> MasterDuke: then by all means,,, go ahead I would say

[20:15] <lizmat> m: class A { method !a() { } }; dd A.^find_private_method("a").head.signature

[20:15] <camelia> rakudo-moar 59cf387d4: OUTPUT: «:(A: *%_)␤»

[20:15] <lizmat> so why do private methods also get *%_ in their signature ??

[20:15] <lizmat> their supposed to be more like subs 

[20:16] <MasterDuke> ok, will do. there's a bunch of further optimization and such, but i'll do those are separate prs

[20:16] <lizmat> m: sub aO() { }; ddd &a.signature

[20:16] <camelia> rakudo-moar 59cf387d4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    a used at line 1␤    ddd used at line 1. Did you mean 'dd'?␤␤»

[20:16] <lizmat> m: sub a() { }; ddd &a.signature

[20:16] <camelia> rakudo-moar 59cf387d4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    ddd used at line 1. Did you mean 'dd'?␤␤»

[20:16] <lizmat> m: sub a() { }; dd &a.signature

[20:16] <camelia> rakudo-moar 59cf387d4: OUTPUT: «:()␤»

[20:29] <[Coke]> Is there any interest in getting rakudo targetting .NET core?

[20:30] <[Coke]> I have, since the time I switched from a place where running on the jvm would have been very helpful if we wanted to use Raku for work, to a place where running it on .NET would now be helpful. :)

[20:33] <TreyHarris> I just tried to build rakudo manually for the first time in awhile. I ran the literal example in README: `make t/spec/S12-traits/parameterized.t` and it failed with "Dubious, test returned 1 (wstat 256, 0x100)" and no other output. So did basic.t in the same dir. But `make t/01-sanity/*` and `make t/02-rakudo/*` all passed

[20:36] <MasterDuke> [Coke]: how long ago did Niecza build?

[20:37] <MasterDuke> oh, but that wasn't a rakudo backend? it was it's own thing?

[20:41] <dumarchie> TreyHarris: `cd t\spec` and `perl fudgeandrun S12-traits\parameterized.t`

[20:43] <TreyHarris> dumarchie: that gave me https://gist.github.com/treyharris/09ce0b0a9912684852232ea3c2ed441a

[20:44] <TreyHarris> oops, that doesn't have the stderr, let me try again

[20:44] <TreyHarris> dumarchie: here https://gist.github.com/db7dd6440564ef3c8f90efe257fce2e7

[20:45] <[Coke]> MasterDuke: it was its own thing, and that was targeting mono.

[20:45] *** sena_kun left
[20:46] <dumarchie> TreyHarris: wait...

[20:46] <[Coke]> it also has a bootstrap bytecode block, not sure the bootstrappy stuff still works.

[20:46] *** Kaeipi joined
[20:46] *** Kaiepi left
[20:49] <MasterDuke> hm, so probably none of the code can be reused?

[20:49] <lizmat> no, one would need to boot NQP on .NET to make that work

[20:51] <dumarchie> TreyHarris: did you get the warning "did not find local perl6 binary; switching to using system `perl6`"?

[20:53] <TreyHarris> dumarchie: that latter gist is the entire output (I ran `./fudgeandrun S12-traits/parameterized.t |& gist-paste -`)

[20:53] <TreyHarris> and searching scrollback, no, I never got that error

[20:54] <dumarchie> Hmm, I got this to work not so long ago

[21:00] *** sena_kun joined
[21:02] <TreyHarris> dumarchie: I'm only concerned whether this is a safe rakudo to use or whether these trait test failures indicate I have a bad build

[21:03] <dumarchie> TreyHarris: I get similar errors on my attempts to run that test, but `gmake spectest` gives me only the usual Windows failures

[21:04] <Geth> ¦ rakudo/cci-precomp-build: 5 commits pushed by (Patrick Böker)++

[21:04] <Geth> ¦ rakudo/cci-precomp-build: e0a9127251 | Add a CI precomp release build pipeline

[21:04] <Geth> ¦ rakudo/cci-precomp-build: c22df80889 | Temporary: build on every commit

[21:04] <Geth> ¦ rakudo/cci-precomp-build: 255ca0e2ff | Fix

[21:04] <Geth> ¦ rakudo/cci-precomp-build: b02d489b40 | More fixups

[21:04] <Geth> ¦ rakudo/cci-precomp-build: e533d89ae3 | Fix

[21:04] <Geth> ¦ rakudo/cci-precomp-build: review: https://github.com/rakudo/rakudo/compare/e0a9127251bc^...e533d89ae3ce

[21:05] <vrurg> lizmat: I have to leave now, didn't get enough time to check, but I have bad feeling about handling 'will build' by the compile time typecheck. It looks to me that the code typechecks agains the closure/routine, not the value it returns. Though I never used 'will' before and not sure what it has to be.

[21:06] <vrurg> lizmat: I plan to check thoroughly later today.

[21:06] <lizmat> I haven't implemented anything wrt "will build" ?   I've implemented "is built"

[21:06] <lizmat> and if you currently use "is built(:bind)" it doesn't typecheck at all atm

[21:07] <lizmat> except for default values  :-)

[21:11] <vrurg> lizmat: the block at line 125 of BUILDPLAN.nqp is where the potential problem is. 'my $default := $_.build;' confuses me because set_build accepts code. That's all I have for now.

[21:11] * vrurg is afk&

[21:11] <lizmat> .tell vrurg but that piece of code has been there for years  :-)

[21:11] <tellable6> lizmat, I'll pass your message to vrurg

[21:11] <bartolin> TreyHarris: if I'm not mistaken, S12-traits/parameterized.t isn't part of spectest (spectest.data from roast: https://github.com/perl6/roast/blob/master/spectest.data).

[21:12] <TreyHarris> bartolin: ah... It seems like a strange one to include as an example in the Rakudo build instructions, then

[21:12] <bartolin> oops :/

[21:20] <TreyHarris> I dropped a rakudo issue on this

[21:21] <bartolin> TreyHarris++

[21:21] *** Kaeipi left
[21:26] *** Kaiepi joined
[21:30] <Geth> ¦ rakudo: ab6710e605 | (Christian Bartolomäus)++ | README.md

[21:30] <Geth> ¦ rakudo: Use file from roast's spectest.data as example

[21:30] <Geth> ¦ rakudo: 

[21:30] <Geth> ¦ rakudo: As reported by TreyHarris++ the tests from S12-traits/parameterized.t

[21:30] <Geth> ¦ rakudo: don't pass. That file is a bad choice for an example anyway, since

[21:30] <Geth> ¦ rakudo: it is not part of spectest.data from roast. S03-operators/comparison.t

[21:30] <Geth> ¦ rakudo: is and all tests from that file pass.

[21:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ab6710e605

[21:44] <Geth> ¦ rakudo: 5984ce9813 | (Christian Bartolomäus)++ | src/vm/jvm/runtime/org/perl6/rakudo/RakudoJavaInterop.java

[21:44] <Geth> ¦ rakudo: [JVM] Update another ref to HLL language perl6

[21:44] <Geth> ¦ rakudo: 

[21:44] <Geth> ¦ rakudo: This was done in all other places with b787095358.

[21:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5984ce9813

[22:07] *** dumarchie left
[22:46] *** sena_kun left
[22:58] *** Kaeipi joined
[22:59] *** Kaiepi left
[23:02] *** sena_kun joined
[23:08] *** titsuki joined
[23:09] *** MasterDuke left
[23:18] <Geth> ¦ rakudo: vrurg++ created pull request #3449: Typecheck Attribute's build attribute against Code

[23:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3449

[23:24] <vrurg> .tell lizmat *That* piece of code was there, but the following lines of the block are mostly yours. ;) Please, merge #3449 unless you have another idea as to how to fix it.

[23:24] <tellable6> vrurg, I'll pass your message to lizmat

[23:42] <Geth> ¦ rakudo: a8bb85a007 | (Vadim Belman)++ | src/Perl6/Metamodel/BUILDPLAN.nqp

[23:42] <Geth> ¦ rakudo: Typecheck Attribute's build attribute against Code

[23:42] <Geth> ¦ rakudo: 

[23:42] <Geth> ¦ rakudo: Attrbiute `build` of `Attrbiute` class can not only be set to a method

[23:42] <Geth> ¦ rakudo: but to any kind of generic code. This fixes a breakage in `Red` ORM.

[23:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a8bb85a007

[23:42] <Geth> ¦ rakudo: e27811a62b | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/BUILDPLAN.nqp

[23:42] <Geth> ¦ rakudo: Merge pull request #3449 from vrurg/will-build-typecheck

[23:42] <Geth> ¦ rakudo: 

[23:42] <Geth> ¦ rakudo: Typecheck Attribute's build attribute against Code

[23:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e27811a62b

[23:43] <vrurg> lizmat: It was a bit preliminary as I just realized that some spectests are actually broken. :(

[23:43] <lizmat> looked ok to me...

[23:43] <tellable6> 2020-01-29T23:24:33Z #raku-dev <vrurg> lizmat *That* piece of code was there, but the following lines of the block are mostly yours. ;) Please, merge #3449 unless you have another idea as to how to fix it.

[23:44] <vrurg> I'll re-check on clean master. Could be that my repo is polluted with garbage code I overlooked.

[23:46] <lizmat> ah, indeed, breakage :-(

[23:47] <lizmat> Cannot find method 'package' on object of type NQPMu

[23:49] <vrurg> Like it can't find Code which is weird.

[23:51] *** patrickb left
[23:54] <Geth> ¦ rakudo: b6fa5f5dd1 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/BUILDPLAN.nqp

[23:54] <Geth> ¦ rakudo: Revert "Typecheck Attribute's build attribute against Code"

[23:54] <Geth> ¦ rakudo: 

[23:54] <Geth> ¦ rakudo: This reverts commit a8bb85a0074b4cda9c038bb68243cc664acb7b8d.

[23:54] <Geth> ¦ rakudo: 

[23:54] <Geth> ¦ rakudo: Appears this is not the right way.

[23:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b6fa5f5dd1

[23:54] <lizmat> vrurg: is there a ticket for the Red breakage?  If so, I will look at it tomorrow

[23:54] <lizmat> first some sleep&

[23:54] <vrurg> lizmat: The PR has a link

