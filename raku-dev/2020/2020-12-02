[01:24] *** MasterDuke left
[01:33] *** lucasb left
[03:37] *** leont left
[03:58] <Geth> Â¦ rakudo: vrurg++ created pull request #4082: Fix handling of definite parameters

[03:58] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4082

[04:37] *** squashable6 left
[04:38] *** squashable6 joined
[06:06] *** sena_kun joined
[06:56] *** domidumont joined
[08:12] *** frost-lab joined
[08:44] *** MasterDuke joined
[09:06] *** Altai-man joined
[09:07] *** Geth left
[09:09] *** sena_kun left
[10:55] *** morayj joined
[11:08] *** squashable6 left
[11:11] *** squashable6 joined
[11:20] * lizmat just pushed 0d1c8a8eefaccf252f7

[11:29] *** Geth joined
[12:45] *** morayj left
[13:01] *** domidumont1 joined
[13:03] *** domidumont left
[13:07] *** sena_kun joined
[13:09] *** Altai-man left
[13:12] <Geth> Â¦ rakudo: 161325e085 | (Elizabeth Mattijsen)++ | 4 files

[13:12] <Geth> Â¦ rakudo: Don't use nqp::iterator iterating over mutable QuantHashes

[13:12] <Geth> Â¦ rakudo: 

[13:12] <Geth> Â¦ rakudo: This used to depends on R:I.ITERATIONSET2LISTITER that would create

[13:12] <Geth> Â¦ rakudo: a native string array of the keys of a QuantHash and then return an

[13:12] <Geth> Â¦ rakudo: iterator for it.  Changed it to return the native string array instead

[13:12] <Geth> Â¦ rakudo: and adapted the users of it.  Also changed the name of the internal

[13:12] <Geth> Â¦ rakudo: method to a more descriptive: IterationSet2keys

[13:12] <Geth> Â¦ rakudo: 

[13:12] <Geth> Â¦ rakudo: Also other assorted cleanup in this area to make better readable code.

[13:12] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/161325e085

[13:12] <lizmat> I think this has now eliminated the use of nqp::iterator on lists in the core

[14:18] *** frost-lab left
[14:19] <timotimo> there's no central thing i could override to make something a replacement for ; and i think that's sad

[14:30] *** leont joined
[16:22] <Geth> Â¦ rakudo: 173205428c | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[16:22] <Geth> Â¦ rakudo: Fix #4083

[16:22] <Geth> Â¦ rakudo: 

[16:22] <Geth> Â¦ rakudo: Appears that one client of MAYBE-GIST got missed in 973b83de62642a664f17

[16:22] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/173205428c

[16:22] <linkable6> RAKUDO#4083 [closed]: https://github.com/rakudo/rakudo/issues/4083 [exceptions] Problem producing message for X::Parameter::RW

[16:24] *** patrickb joined
[16:34] <lizmat> timotimo: re "there's no central thing i could override to make something a replacement for ; and i think that's sad", context ?

[16:40] <Geth> Â¦ rakudo: 0d6278f329 | (Elizabeth Mattijsen)++ | src/core.c/REPL.pm6

[16:40] <Geth> Â¦ rakudo: Assume Proc as return value as producing output

[16:40] <Geth> Â¦ rakudo: 

[16:40] <Geth> Â¦ rakudo: Fixes #4079.  Yes, it is yet another heuristic, but a pretty simple

[16:40] <Geth> Â¦ rakudo: one.

[16:40] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0d6278f329

[16:40] <linkable6> RAKUDO#4079 [closed]: https://github.com/rakudo/rakudo/issues/4079 shell output pollutes subsequent command output in REPL

[17:03] <Geth> Â¦ rakudo/overridable_semicolon_rule: cc1bac75d8 | (Timo Paulssen)++ | src/Perl6/Grammar.nqp

[17:03] <Geth> Â¦ rakudo/overridable_semicolon_rule: separate ; out into its own token for easier overriding

[17:03] <Geth> Â¦ rakudo/overridable_semicolon_rule: review: https://github.com/rakudo/rakudo/commit/cc1bac75d8

[17:03] <timotimo> lizmat: this is the context :)

[17:05] <lizmat> ok, I see what you're doing there... but why?

[17:05] <lizmat> also: how does this affect compilation times  :-)

[17:05] <lizmat> finally: will it survive rakuast ?

[17:06] <timotimo> well, rakuast is free to ignore this change

[17:06] *** Altai-man joined
[17:06] <timotimo> oh, and i should change all those to <.semicolon> actually

[17:06] <timotimo> gimme a sec

[17:07] <Geth> Â¦ rakudo/overridable_semicolon_rule: 983a09cb13 | (Timo Paulssen)++ | src/Perl6/Grammar.nqp

[17:07] <Geth> Â¦ rakudo/overridable_semicolon_rule: separate ; out into its own token for easier overriding

[17:07] <Geth> Â¦ rakudo/overridable_semicolon_rule: review: https://github.com/rakudo/rakudo/commit/983a09cb13

[17:07] <timotimo> there, this won't create the match objects

[17:09] <lizmat> fewer Match objects is good!

[17:09] *** sena_kun left
[17:10] <timotimo> well, it'll be the same amount now as before

[17:11] <timotimo> sub EXPORT(|) { constant \MAIN = %*LANG<MAIN>; role Amen { token semicolon() { ";" | Amen\. } }; $*LANG.define_slang("MAIN", %*LANG<MAIN> but Amen, %*LANG<MAIN-actions>); {} }

[17:12] <timotimo> clearly a very important language extensibility feature

[17:18] <nine> Amazing how long we got by without this

[17:19] <lizmat> pretty sure drforr asked for it at least once, I think

[17:20] <nine> There goes all the beautiful sarcasm

[17:20] <lizmat> sorry...  my sarcasm sensor is a little busted

[17:21] <nine> Well it is actually amazing that even an obscure feature like this has actual uses :)

[17:22] <lizmat> of course, does it also catch } at the end of a line ending a statement ?

[17:23] <lizmat> and does it handle shaped definitions/indexing correctly ?

[17:48] *** camelCaser joined
[17:54] *** domidumont1 left
[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: f27e212bca | (Jonathan Worthington)++ | src/core.c/Rakudo/Internals.pm6

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: Fix a shaped array performance problem

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: 

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: When we want to turn a native array into a shaped native array, we

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: steal the meta-object and re-use it on a new type with the multi-dim

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: array representation. While that preserves the type behavior (aside from

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: representation), there's a new STable, which lacks the various caches.

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: Having those attached means there's now no non-cached type check or

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: method lookup MOP queries when we work with shaped native arrays, which

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: was the cause of the slow performance compared to non-shaped native

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: arrays.

[17:56] <Geth> Â¦ rakudo/speedup-native-multidim-array-ops: review: https://github.com/rakudo/rakudo/commit/f27e212bca

[17:56] <Geth> Â¦ rakudo: jnthn++ created pull request #4084: Fix a shaped array performance problem

[17:56] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4084

[18:04] <lizmat> whee!

[18:14] *** patrickb left
[18:15] <timotimo> lizmat: i left out ; from some spots on purpose

[18:15] <timotimo> inside argument lists, for example

[19:12] *** domidumont joined
[19:16] *** domidumont left
[19:18] *** Xliff_ joined
[19:19] *** Xliff left
[20:01] <Geth> Â¦ nqp: db6e30309c | (Elizabeth Mattijsen)++ | 2 files

[20:01] <Geth> Â¦ nqp: Sort all entries alphabetically for easier lookup

[20:01] <Geth> Â¦ nqp: 

[20:01] <Geth> Â¦ nqp: Also add a "sort-ops" script that will make sure that all sections

[20:01] <Geth> Â¦ nqp: and all ops in "ops.markdown" are in alphabetical order, except

[20:01] <Geth> Â¦ nqp: for the "Miscellaneous sections" that will always be listed last.

[20:01] <Geth> Â¦ nqp: 

[20:01] <Geth> Â¦ nqp: Add a new section is easy: add the section at the end, move any

[20:01] <Geth> Â¦ nqp: ops that you want in there in that section, and run the "sort-ops"

[20:01] <Geth> Â¦ nqp: script again.  It will automatically add the new section to the

[20:01] <Geth> Â¦ nqp: table of contents at the beginning.

[20:01] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/db6e30309c

[20:05] <cognominal> Hi. Building nqp on Apple Silicon fails except when JIT_DISABLE is set to 1. Indeed once the build is done and I unset JIT_DISABLE. lldb says me moar crashes on jit_enter

[20:07] <cognominal> Probably the fix is trivial, but I don't know where the config decide to generate code for jitting knowing there is none implemented for ARN64

[20:07] <lizmat> cognominal: probably better asked on #moarvm  :-)

[20:07] <lizmat> or as an issue on MoarVM  :-)

[20:09] <cognominal> Yes I will write an issue and dig to find a fix

[20:09] <lizmat> ++cognominal 

[20:10] <lizmat> afk for a few hours&

[21:08] *** sena_kun joined
[21:08] *** Altai-man left
[21:25] <dogbert17> cognomial: are you happy with your M1?

[21:44] <[Tux]> Rakudo v2020.11-76-g173205428 (v6.d) on MoarVM 2020.11-54-ga595d9ddc

[21:44] <[Tux]> csv-test-xs-20      0.383 -  0.384

[21:44] <[Tux]> csv-ip5xs           0.810 -  0.815

[21:44] <[Tux]> test-t --race       0.863 -  0.867

[21:44] <[Tux]> test-t              1.903 -  1.926

[21:44] <[Tux]> test                7.720 -  8.070

[21:44] <[Tux]> csv-ip5xs-20        7.833 -  7.954

[21:44] <[Tux]> test-t-20 --race    9.113 - 10.017

[21:44] <[Tux]> csv-parser         25.319 - 26.070

[21:44] <[Tux]> test-t-20          31.192 - 32.116

[21:50] *** sena_kun left
[22:06] *** sena_kun joined
[22:22] *** sena_kun left
[22:30] *** bd3i left
[22:51] <Geth> Â¦ roast: vrurg++ created pull request #708: Add tests for subsets of definites

[22:51] <Geth> Â¦ roast: review: https://github.com/Raku/roast/pull/708

[23:00] <Geth> Â¦ rakudo: f27e212bca | (Jonathan Worthington)++ | src/core.c/Rakudo/Internals.pm6

[23:00] <Geth> Â¦ rakudo: Fix a shaped array performance problem

[23:00] <Geth> Â¦ rakudo: 

[23:00] <Geth> Â¦ rakudo: When we want to turn a native array into a shaped native array, we

[23:00] <Geth> Â¦ rakudo: steal the meta-object and re-use it on a new type with the multi-dim

[23:00] <Geth> Â¦ rakudo: array representation. While that preserves the type behavior (aside from

[23:00] <Geth> Â¦ rakudo: representation), there's a new STable, which lacks the various caches.

[23:00] <Geth> Â¦ rakudo: Having those attached means there's now no non-cached type check or

[23:00] <Geth> Â¦ rakudo: method lookup MOP queries when we work with shaped native arrays, which

[23:00] <Geth> Â¦ rakudo: was the cause of the slow performance compared to non-shaped native

[23:00] <Geth> Â¦ rakudo: arrays.

[23:00] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f27e212bca

[23:00] <Geth> Â¦ rakudo: a89d020757 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Rakudo/Internals.pm6

[23:00] <Geth> Â¦ rakudo: Merge pull request #4084 from rakudo/speedup-native-multidim-array-ops

[23:00] <Geth> Â¦ rakudo: 

[23:00] <Geth> Â¦ rakudo: Fix a shaped array performance problem

[23:00] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a89d020757

[23:09] <Geth> Â¦ rakudo: ed16d6c109 | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[23:09] <Geth> Â¦ rakudo: Fix handling of definite parameters (#4082)

[23:09] <Geth> Â¦ rakudo: 

[23:09] <Geth> Â¦ rakudo: Restore pre-trsnparentization of nominalizables behavior. Partially

[23:09] <Geth> Â¦ rakudo: fixes #4078.

[23:09] <Geth> Â¦ rakudo: 

[23:09] <Geth> Â¦ rakudo: And a couple of minor improvements.

[23:09] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ed16d6c109

[23:09] <linkable6> RAKUDO#4082 [closed]: https://github.com/rakudo/rakudo/pull/4082 Fix handling of definite parameters

[23:09] <linkable6> RAKUDO#4078 [closed]: https://github.com/rakudo/rakudo/issues/4078 [BLOCKER][blin][regression] Blin 2020.12, round 1

[23:09] <Geth> Â¦ roast: 55ee300f69 | (Vadim Belman)++ | S02-types/nominalizables.t

[23:09] <Geth> Â¦ roast: Add tests for subsets of definites

[23:09] <Geth> Â¦ roast: 

[23:09] <Geth> Â¦ roast: In support of rakudo/rakudo#4082.

[23:09] <Geth> Â¦ roast: 

[23:09] <Geth> Â¦ roast: Not currently adding a test for declaring an uninitialized variable

[23:09] <Geth> Â¦ roast: of type  `OfDef` because prior to 6.e a subset was matching itself,

[23:09] <Geth> Â¦ roast: event if refinee is a definite.

[23:09] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/55ee300f69

[23:09] <Geth> Â¦ roast: 806ab82cd7 | (Vadim Belman)++ (committed using GitHub Web editor) | S02-types/nominalizables.t

[23:09] <Geth> Â¦ roast: Merge pull request #708 from vrurg/rakudo_4078

[23:09] <Geth> Â¦ roast: 

[23:09] <Geth> Â¦ roast: Add tests for subsets of definites

[23:09] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/806ab82cd7

[23:11] <MasterDuke> m: my int32 @a[1000000]; my $s = now; @a[$_] = $_ for ^1000000; say now - $s

[23:11] <camelia> rakudo-moar 0d6278f32: OUTPUT: Â«1.06919223â¤Â»

[23:11] <MasterDuke> m: my int @a[1000000]; my $s = now; @a[$_] = $_ for ^1000000; say now - $s

[23:11] <camelia> rakudo-moar 0d6278f32: OUTPUT: Â«1.058076â¤Â»

[23:12] <MasterDuke> committable6: 2020.05 my int32 @a[1000000]; my $s = now; @a[$_] = $_ for ^1000000; say now - $s

[23:12] <committable6> MasterDuke, Â¦2020.05: Â«5.478343â¤Â»

[23:12] <MasterDuke> committable6: 2020.05 my int @a[1000000]; my $s = now; @a[$_] = $_ for ^1000000; say now - $s

[23:12] <committable6> MasterDuke, Â¦2020.05: Â«5.5232091â¤Â»

[23:17] <MasterDuke> committable6: 2020.11,HEAD my int @a[1000000]; my $s = now; @a[$_] = $_ for ^1000000; say now - $s

[23:17] <committable6> MasterDuke, Â¦2020.11: Â«1.0729476â¤Â» Â¦HEAD(ed16d6c): Â«0.09409812â¤Â»

[23:17] <MasterDuke> committable6: 2020.11,HEAD my int @a; my $s = now; @a[$_] = $_ for ^1000000; say now - $s

[23:17] <committable6> MasterDuke, Â¦2020.11: Â«0.14525311â¤Â» Â¦HEAD(ed16d6c): Â«0.1245497â¤Â»

[23:18] <MasterDuke> jnthn++

[23:28] *** vrurg left
[23:29] *** vrurg joined
[23:32] *** squashable6 left
[23:33] *** squashable6 joined
[23:35] <Geth> Â¦ rakudo/rakuast: da88fd5684 | (Jonathan Worthington)++ | 2 files

[23:35] <Geth> Â¦ rakudo/rakuast: Correct state var initialization

[23:35] <Geth> Â¦ rakudo/rakuast: 

[23:35] <Geth> Â¦ rakudo/rakuast: We need to apply the state initialization check at the point we are

[23:35] <Geth> Â¦ rakudo/rakuast: doing the assignment of the initializer, not at variable declaration

[23:35] <Geth> Â¦ rakudo/rakuast: time.

[23:35] <Geth> Â¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/da88fd5684

