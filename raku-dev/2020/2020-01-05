[01:48] *** evalable6 left
[01:50] *** evalable6 joined
[01:51] *** Altai-man_ joined
[01:54] *** sena_kun left
[02:54] *** evalable6 left
[02:55] *** evalable6 joined
[03:52] *** sena_kun joined
[03:54] *** Altai-man_ left
[04:44] *** epony left
[05:12] *** epony joined
[05:22] <japhb> Repeating here since a release seems afoot:

[05:22] <japhb> rakudo from today (2019.11-387-g734047a01) causes cro-websocket to fail http-router-websocket.t and websocket-client.t, it looks like with segfaults.

[05:22] <japhb> It works fine on my previous working rakudo build, but that's about 100 commits old (2019.11-268-g0e4f8351e)

[05:29] <japhb> Trying a little manual bisection

[05:51] *** Altai-man_ joined
[05:54] *** sena_kun left
[07:13] *** releasable6 left
[07:13] *** bloatable6 left
[07:13] *** benchable6 left
[07:13] *** unicodable6 left
[07:13] *** notable6 left
[07:13] *** committable6 left
[07:13] *** shareable6 left
[07:13] *** quotable6 left
[07:13] *** nativecallable6 left
[07:13] *** sourceable6 left
[07:13] *** bisectable6 left
[07:13] *** statisfiable6 left
[07:13] *** reportable6 left
[07:13] *** squashable6 left
[07:13] *** greppable6 left
[07:13] *** coverable6 left
[07:14] *** committable6 joined
[07:14] *** unicodable6 joined
[07:14] *** bloatable6 joined
[07:14] *** reportable6 joined
[07:15] *** coverable6 joined
[07:15] *** notable6 joined
[07:15] *** statisfiable6 joined
[07:15] *** quotable6 joined
[07:15] *** shareable6 joined
[07:15] *** benchable6 joined
[07:15] *** greppable6 joined
[07:16] *** squashable6 joined
[07:16] *** sourceable6 joined
[07:16] *** nativecallable6 joined
[07:16] *** releasable6 joined
[07:16] *** bisectable6 joined
[07:53] *** sena_kun joined
[07:54] *** Altai-man_ left
[08:09] <japhb> OK, I think I'm getting too tired at this point, but I believe I've narrowed it to between 2019.11-291-g9a571b685 (good) and 2019.11-303-g5c65a126c (makes cro-websocket tests blow up)

[09:08] <nine> japhb: do you have a backtrace?

[09:23] <Geth> ¦ nqp: f00c47590e | (Christian Bartolomäus)++ | src/vm/jvm/runtime/org/perl6/nqp/io/StandardReadHandle.java

[09:23] <Geth> ¦ nqp: [JVM] Fix readfh for (buffered) input from TTY

[09:23] <Geth> ¦ nqp: 

[09:23] <Geth> ¦ nqp: This should unbreak the REPL for rakudo-j and fix commands like

[09:23] <Geth> ¦ nqp: 

[09:23] <Geth> ¦ nqp:   $ ./perl6-j -e '.say for lines()'  ## read line by line from stdin

[09:23] <Geth> ¦ nqp: 

[09:23] <Geth> ¦ nqp: Java's 'read' is blocking, so the old implementation only worked

[09:23] <Geth> ¦ nqp: for unbuffered input. I'm pretty sure, the patch can be improved,

[09:23] <Geth> ¦ nqp: but it looks like an improvement to me. Not tested on Windows.

[09:23] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f00c47590e

[09:24] <nine> Cannot reproduce any cro-websocket segfaults here

[09:37] <nine> But it would have been surprising if I could: I've spent the last two weeks hunting down (long existing) segfaults occuring in our Cro websocket application. So I've run both client and server sides extensively

[09:46] <Geth> ¦ roast: 88dc986e98 | (Christian Bartolomäus)++ | S12-methods/accessors.t

[09:46] <Geth> ¦ roast: Add test for GH #3399

[09:46] <Geth> ¦ roast: 

[09:46] <Geth> ¦ roast: Actually, the regression was caught be below compound test

[09:46] <Geth> ¦ roast: for RT #78678. But it seems reasonable to add a basic test

[09:46] <Geth> ¦ roast: for using a qualified method name to assign a new value to

[09:46] <Geth> ¦ roast: a rw attribute.

[09:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/88dc986e98

[09:52] *** Altai-man_ joined
[09:54] *** sena_kun left
[11:53] *** sena_kun joined
[11:54] *** Altai-man_ left
[13:04] <AlexDaniel> japhb: steps to reproduce?

[13:04] <AlexDaniel> are you running it in a loop or something?

[13:07] <sena_kun> AlexDaniel, according to #cro discussion, just `zef test .` should be enough to reliably do that. I wasn't able to do this, though. maybe it's a time to ask about setup and stacktraces.

[13:07] <AlexDaniel> uh

[13:08] <AlexDaniel> I ran Blin on Cro::WebSocket and it was fine

[13:08] <sena_kun> AlexDaniel, yesh. :S

[13:08] <AlexDaniel> it's not unusual for bugs like this to consistently appear on some systems but not others

[13:08] <AlexDaniel> but hmm…

[13:08] <sena_kun> that's very confusing and we certainly don't want to release it knowing it breaks someone's setup.

[13:10] <sena_kun> in any case, I'll check results of Blin run from release branch...

[13:53] *** Altai-man_ joined
[13:54] *** sena_kun left
[14:02] <Geth> ¦ rakudo: 09e66e504f | (Elizabeth Mattijsen)++ | 2 files

[14:02] <Geth> ¦ rakudo: Make Str.raku between 1.5x to 100x as fast

[14:02] <Geth> ¦ rakudo: 

[14:02] <Geth> ¦ rakudo: - formerly known as Str.perl

[14:02] <Geth> ¦ rakudo: - 1.5x to 2.5x depending on size of string and what needs to be escaped

[14:02] <Geth> ¦ rakudo: - 100x for the empty string

[14:02] <Geth> ¦ rakudo: - using about 1/3 of the number of allocations

[14:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/09e66e504f

[14:06] <lizmat> hope I didn't break the JVM backend with that ^^^  bartolin ?

[14:10] *** AlexDaniel left
[14:46] <Altai-man_> bisectable6, class A::B {}; my B $hehe;

[14:46] <bisectable6> Altai-man_, On both starting points (old=2015.12 new=09e66e5) the exit code is 1 and the output is identical as well

[14:46] <bisectable6> Altai-man_, Output on both points: «04===SORRY!04===␤Type 'B' is not declared␤at /tmp/CLiaZDOFxD:1␤------> 03class A::B {}; my B08⏏04 $hehe;␤Malformed my␤at /tmp/CLiaZDOFxD:1␤------> 03class A::B {}; my08⏏04 B $hehe;␤␤»

[15:16] <Altai-man_> ouch

[15:16] <Altai-man_> we have a regression in... Blin

[15:16] <Altai-man_> blin... I am creating a ticket and casting vrurg, I guess...

[15:24] *** epony left
[15:27] *** epony joined
[15:53] *** sena_kun joined
[15:55] *** Altai-man_ left
[16:06] *** pmurias left
[16:17] *** pmurias joined
[17:28] *** toddr joined
[17:30] <toddr> AlexDaniel and bartolin I have done a new import at the same location ( https://github.com/Raku/p6rt/issues )

[17:30] <toddr> I'm not clear at all what your remaining concerns are. 

[17:30] <toddr> Tags are sorted. 

[17:32] <toddr> I have refreshed changes since June so all the tickets should be updated and closed corresponding to current RT

[17:37] <toddr> Looking back at your questions, I don't see the issue with https://github.com/search?q=RT130414&type=Issues

[17:39] <toddr> I think https://rt.perl.org/Public/Bug/Display.html?id=75586 is a side effect of the case  being merged in RT

[17:41] <toddr> Concerning the references (example https://rt.perl.org/Public/Bug/Display.html?id=126243) that of course can't be done until the migration is complete. We could make a second pass, find the references and put in something like "This case used to refer to #112" Of course that reference will break if you move the ticket somewhere else.

[17:43] <toddr> One last thing to note is that While these migrated tickets refer to github users, there is no way to automatically set those users to watch the cases. The user needs to do something like this and check off watch on their own: https://github.com/Raku/p6rt/issues?utf8=%E2%9C%93&q=mentions%3AAlexDaniel

[17:44] <toddr> ok back to de-decking the halls.

[17:48] *** robertle left
[17:52] *** Altai-man_ joined
[17:55] *** sena_kun left
[17:58] *** patrickb joined
[18:18] <jdv79> i just got this when trying to install cro:  *** Error in `t/http-router.t': realloc(): invalid pointer: 0x0000000002f57488 ***

[18:19] <jdv79> This is Rakudo version 2019.11-382-g309d4e2 built on MoarVM version 2019.11-113-g703f023

[18:21] <Altai-man_> ping nine 

[18:21] * Altai-man_ doesn't know instructions to obtain useful info for such issues

[18:23] <bartolin> toddr: looks very good to me. I'm in favor of doing the real import. Let's see what AlexDaniel says.

[18:24] <Altai-man_> jdv79, you have a gnu/linux box, right?

[18:38] *** pmurias left
[19:09] <AlexDaniel`> toddr: I won't be able to take a look, but if nothing seems wrong then feel free to do it

[19:11] <AlexDaniel`> as for no automatic watching, that's alright

[19:11] <AlexDaniel`> the repo won't have a lot of traffic anyway, those who are interested can watch the whole repo

[19:11] <AlexDaniel`> or if someone needs to be pinged, that can be done via a comment

[19:14] <AlexDaniel`> btw this is just in time for the next February squashathon :)

[19:14] <Geth> ¦ rakudo: 585227eecb | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[19:14] <Geth> ¦ rakudo: Make Mu.raku about 40% faster

[19:14] <Geth> ¦ rakudo: 

[19:14] <Geth> ¦ rakudo: - formerly known as Mu.perl

[19:14] <Geth> ¦ rakudo: - lose the .flat.grep and the loop, conflate it into a single .map

[19:14] <AlexDaniel`> that's going to be fun :)

[19:14] <Geth> ¦ rakudo: - with 20% fewer allocations

[19:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/585227eecb

[19:34] *** pmurias_ joined
[19:36] <Altai-man_> how does release manager decide what to do with modules which become broken (not by a regression, but due to internal changes) between releases? ignore them?

[19:38] <Altai-man_> currently we have a blocker №1, then broken cro::http breaks lots of modules, changes in sparrowdo broke two dozens of its plugins...

[19:41] <dogbert11> I just tried to install cro on my machine and among other things I got this:

[19:41] <dogbert11> [Cro::TLS] # Failed test 'Listening for connections once the Supply is tapped'

[19:41] <dogbert11> [Cro::TLS] # at t/tls.t line 39

[19:41] <dogbert11> [Cro::TLS] # Server certificate verification failed: certificate has expired

[19:42] <Altai-man_> dogbert11, jnthn has to upload new cpan releases. :S

[19:43] <dogbert11> Altai-man_: aha, that wasn't the only problem though, I also encountered this:

[19:44] <dogbert11> ===> Testing: OO::Monitors:ver<1.1>

[19:44] <dogbert11> [OO::Monitors] ===SORRY!=== Error while compiling /home/dogbert/.zef/store/oo-monitors.git/b9de07c277f0a9fa805bb18113788228f6acfd3b/t/precomp.t

[19:44] <dogbert11> [OO::Monitors] Could not find Test::Counter in:

[19:44] <dogbert11> perhaps my zef is too old or something

[19:44] <Altai-man_> hmmmm.

[19:44] <Altai-man_> this is weird, though

[19:44] <Altai-man_> I'm checking...

[19:45] <Altai-man_> that's odd, it has use lib $*PROGRAM.parent.child('lib').Str; and should take care of that

[19:45] <Altai-man_> dogbert11, are you on rakudo master or?

[19:46] <Altai-man_> dogbert11, just installed it, 0.8.2 zef, 2019.11-387-g734047a01 rakudo

[19:47] <dogbert11> This is Rakudo version 2019.11-389-g585227e built on MoarVM version 2019.11-113-g703f023

[19:47] <dogbert11> pretty recent methinks :)

[19:47] <Altai-man_> yeah

[19:47] <dogbert11> built by rakudobrew btw

[19:48] <Altai-man_> same for me

[19:52] *** patrickb left
[19:53] *** sena_kun joined
[19:54] *** Altai-man_ left
[20:38] <vrurg> AlexDaniel`: I left a comment on Blin's issue. Looking for consensus.

[21:20] <nine> jdv79: can you run that test in perl6-gdb-m on a MoarVM with --debug and get me a backtrace?

[21:52] *** Altai-man_ joined
[21:54] <Geth> ¦ rakudo: 0d96bedc4d | (Elizabeth Mattijsen)++ | 2 files

[21:54] <Geth> ¦ rakudo: Make Pair.raku about 15% faster

[21:54] <Geth> ¦ rakudo: 

[21:54] <Geth> ¦ rakudo: - formerly known as Pair.perl

[21:54] <Geth> ¦ rakudo: - adds a Str.is-identifier method that returns True matches identifier syntax

[21:54] <Geth> ¦ rakudo:   - since this appears to be generally useful, it seems like a good addition

[21:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0d96bedc4d

[21:54] *** sena_kun left
[22:08] <TreyHarris> The `is accessible` or `is settable` attribute trait discussed in problem-solving/issues/145 leaves me with a question: do we have a concise syntax right now for "immutable value" objects--i.e., such that a getter is autogenerated but the only way to set the attribute is during construction?

[22:11] <TreyHarris> a true concise immutable-value syntax would also take care of generating a WHICH such that two constructions using the same passed arguments will compare as identical, of course...

[22:12] <TreyHarris> ...and possibly even draw from a memoized singleton pool of already-construced values, a la Ruby symbols...

[22:13] <TreyHarris> (or Lisp symbols)

[22:18] <TreyHarris> lizmat: I see you recently worked on the Memoize module, so perhaps you've been thinking along the same lines

[22:24] <jdv79> nine: does this help?:  https://nopaste.xyz/?e9dcf2f691581b7b#O8qLIYgzSWfdADF/zuZt//pEAtxSVlNIDQyGEyIdnBs=

[22:24] <jdv79> looks like maybe a different issue

[22:26] <[Coke]> .tell pmurius - I haven't heard anything since I spoke to makoto. IRC's not a great way to reach me, please use email or TPF slack for more urgent things.

[22:26] <tellable6> [Coke], I haven't seen pmurius around, did you mean pmurias?

[22:26] <[Coke]> .tell pmurias - I haven't heard anything since I spoke to makoto. IRC's not a great way to reach me, please use email or TPF slack for more urgent things.

[22:26] <tellable6> [Coke], I'll pass your message to pmurias

[22:28] *** AlexDaniel joined
[22:28] *** AlexDaniel left
[22:28] *** AlexDaniel joined
[22:37] <TreyHarris> Is `is cached` different from memoization in conception? I'm wondering why the text in https://docs.raku.org/language/experimental#cached doesn't even mention the word (it probably should unless it is a totally different thing for some reason I don't discern)

[22:41] <TreyHarris> (I understand that Memoize gives control over eviction and other details where the experimental cached trait is just binary. But `is cached` is still memoization, is it not?)

[22:45] <[Coke]> yes, same basic concept.

[22:48] <[Coke]> don't know if "memoization" is a thing outside of p5 - anyone else call it that?

[22:48] <lizmat> TreyHarris: "is cached" is experimental, and for a reason  :-)

[22:49] <lizmat> I also suggested an "is immutable" trait in https://github.com/perl6/problem-solving/issues/145

[22:51] <lizmat> TreyHarris: also, my Memoize is a port of Perl: https://modules.raku.org/dist/Memoize:cpan:ELIZABETH

[22:51] <lizmat> so its documentation matches the Perl one

[23:00] <TreyHarris> lizmat: thanks, that mention of "is immutable" in the pull is exactly why I asked--I couldn't remember if there was already a way to do getter-only while allowing the attribute's modification from within the class

[23:01] <lizmat> but that's the default: settable by .new, getter-only and modify within the class ?

[23:03] <TreyHarris> lizmat: oh, right... that's why 'is rw' is there. thanks for reminding me

[23:03] <lizmat> is immutable would be about making the attributes without containers

[23:03] <lizmat> which would still allow you to change it when going through hoops tho

[23:05] <TreyHarris> gotcha. So except for WHICH, `is unsettable` plus `is cached` on BUILD would take care of "value types"

[23:06] <TreyHarris> wait, not on BUILD...

[23:08] <lizmat> no, with BUILD you're really on your owmn

[23:08] <lizmat> *own

[23:10] <TreyHarris> you'd have to override new to get memoized singleton-pool behavior

[23:11] <TreyHarris> ("singleton" in the value sense, not in the OOP sense)

[23:12] <TreyHarris> 3 is a singleton of 3, but not a singleton of any particular sort of number (except "numbers which are 3")

[23:33] <Geth> ¦ rakudo: 08aec410ef | (Elizabeth Mattijsen)++ | src/core.c/Pair.pm6

[23:33] <Geth> ¦ rakudo: Make Pair.raku between 0 and 10% faster

[23:33] <Geth> ¦ rakudo: 

[23:33] <Geth> ¦ rakudo: Still feels worthwhile to do as it becomes hot code quickly when

[23:33] <Geth> ¦ rakudo: doing .raku on a Hash.

[23:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/08aec410ef

[23:33] <lizmat> sleep&

[23:53] *** sena_kun joined
[23:55] *** Altai-man_ left
