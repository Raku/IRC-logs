[00:59] <ShimmerFairy> My probably bad suggestion would be to allow  method foo(@args):D { }  so you don't have to worry about  method foo:D(@args) { }  (or even  method:D foo(@args) { }  as another option)

[01:00] <timotimo> and methods without argument signatures would be "method foo:D { ... }" then?

[01:01] <ShimmerFairy> Yeah, I was thinking more "another location to put adverbs", so attaching it to the name would still be OK.

[01:02] <timotimo> OK

[01:02] <timotimo> to me, if it's after the signature, and outside, it kind of reads a little like "related to return type", kinda like "is rw"

[01:02] <ShimmerFairy> Actually, attaching it to the keyword would make sense for things that could be see as affecting what kind of sub/method/etc. you're making, e.g. "This isn't just any method, but a 6.c only method"

[01:03] *** lucasb left
[01:03] <ShimmerFairy> method:LANG<6.c> foo() { ... }; method:LANG<6.d> foo() { ... };

[01:04] <timotimo> metho:D and meth:U:d

[01:07] <ShimmerFairy> Also, I'm fine with the idea of reserving uppercase adverb names, but there had better be a clear line between adverbs and ordinary colonpairs. sub bar:CUSTOM-NOT-OK<...>(:$CUSTOM-OK) { }

[01:10] <ShimmerFairy> Ooh! Attaching adverbs to the keyword means anonymous subs can be modified too!   pass-a-func($arg, sub:LANG<6.c> { ... })

[02:48] *** linkable6 left
[02:48] *** evalable6 left
[02:50] *** linkable6 joined
[02:51] *** evalable6 joined
[05:14] *** Xliff left
[06:50] *** domidumont joined
[07:02] <moritz> eeks!

[07:09] <nine> But, but, why not just `multi method foo ($b) is LANG<6.e+> { ... }`? With a simple `sub trait_mod:<is>(Method $m, Version(Str) :$LANG!) { }` that already parses today and just needs the trait to set some field on the multi candidate that the dispatcher checks

[07:09] <nine> We don't need such a mechanism for subs as we can just override lexically in the new language version's setting.

[07:31] *** MasterDuke joined
[07:33] <ShimmerFairy> I was just working in the confines of "how can we do this adverbly?"

[07:36] <ShimmerFairy> And besides, putting aside LANG specifically, the question of how to deal with  sub foo:adv($function, $args) { }  may well come up someday.

[07:54] *** JJMerelo joined
[07:55] <JJMerelo> m: rule r { (\w+ '.')* \w+ }; say "a.b" ~~ r

[07:55] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «5===SORRY!5===␤Undeclared routine:␤    r used at line 1␤␤Other potential difficulties:␤    Useless declaration of a has-scoped method in mainline (did you mean 'my rule r'?)␤    at <tmp>:1␤    ------> 3rule 7⏏5r { (\w+ '.')* \w+…»

[07:56] <JJMerelo> m: my rule r { (\w+ '.')* \w+ }; say "a.b" ~~ r

[07:56] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in regex r at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[07:56] <JJMerelo> m: my rule r { (\w+ '.')* \w+ }; say "a.b" ~~ &r

[07:56] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «｢a.b｣␤ 0 => ｢a.｣␤»

[07:56] <JJMerelo> m: my rule r { (\w+  '.')*  \w+ }; say "a.b" ~~ &r

[07:56] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «｢a.b｣␤ 0 => ｢a.｣␤»

[07:56] <JJMerelo> m: my token r { (\w+  '.')*  \w+ }; say "a.b" ~~ &r

[07:56] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «｢a.b｣␤ 0 => ｢a.｣␤»

[07:58] <JJMerelo> commit: releases  my token r { (\w+  '.')*  \w+ }; say "a.b" ~~ &r

[07:58] <committable6> JJMerelo, ¦releases (43 commits): «｢a.b｣␤ 0 => ｢a.｣␤»

[07:58] <JJMerelo> commit: releases  my rule r { (\w+  '.')*  \w+ }; say "a.b" ~~ &r

[07:59] <committable6> JJMerelo, ¦releases (43 commits): «｢a.b｣␤ 0 => ｢a.｣␤»

[07:59] <JJMerelo> So rules behave exactly the same as tokens. There's no :sigspace difference

[08:00] <JJMerelo> m: my token r { [\w+  '.']*  \w+ '.' \w+ }; say "a.b.c" ~~ &r

[08:00] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «Nil␤»

[08:00] <JJMerelo> m: my rule r { [\w+  '.']*  \w+ '.' \w+ }; say "a.b.c" ~~ &r

[08:00] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «｢a.b.c｣␤»

[08:00] <JJMerelo> commit: releases my rule r { [\w+  '.']*  \w+ '.' \w+ }; say "a.b.c" ~~ &r

[08:01] <committable6> JJMerelo, ¦releases (43 commits): «｢a.b.c｣␤»

[08:01] <JJMerelo> I am checking this https://stackoverflow.com/questions/62051742/whats-the-real-difference-between-a-token-and-a-rule and it seems as if all it's in the documentation is wrong

[08:02] <JJMerelo> tokens ratchet, rules don't. They both have non-significant whitespace. There does not seem to be a difference between a regex and a rule, then. 

[08:04] <ShimmerFairy> default <.ws> does not require whitespace except between two word characters

[08:12] <JJMerelo> ShimmerFairy far as I can tell, that's not what the documentation says. But what about ratcheting?

[08:12] <ShimmerFairy> rule should absolutely be ratcheting, and if it isn't that's a bug.

[08:12] <ShimmerFairy> But the default <ws> has always been / <!ww> \s* /

[08:14] <JJMerelo> commit: releases my rule r { [\w+  '.']*  \w+ '.' \w+ }; say "a.b.c" ~~ &r

[08:14] <committable6> JJMerelo, ¦releases (43 commits): «｢a.b.c｣␤»

[08:14] <JJMerelo> commit: releases my token r { [\w+  '.']*  \w+ '.' \w+ }; say "a.b.c" ~~ &r

[08:15] <committable6> JJMerelo, ¦releases (43 commits): «Nil␤»

[08:15] <JJMerelo> ShimmerFairy if it does, then it's a long standing bug...

[08:15] <JJMerelo> The commit that changed that part of the documentation is 5 years old https://github.com/Raku/doc/commit/3c20a9f4fba5ef0456df512cc959187d5e2583bb

[08:15] <JJMerelo> Sorry, afk now... 

[08:17] <ShimmerFairy> m: my token r { a+ a }; say "aaaaa" ~~ &r

[08:17] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «Nil␤»

[08:17] <ShimmerFairy> m: my rule r {a+a}; say "aaaaa" ~~ &r

[08:17] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «Nil␤»

[08:17] <ShimmerFairy> m: my rule r { a+ a }; say "aaaaa" ~~ &r

[08:17] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «Nil␤»

[08:17] <ShimmerFairy> m: my regex r { a+ a }; say "aaaaa" ~~ &r

[08:17] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «｢aaaaa｣␤»

[08:20] *** JJMerelo left
[09:20] <jnthn> I'm guessing this is a mis-compile in some situation, but I didn't yet figure out exactly what are the ingredients.

[09:20] <jnthn> It's losing a ratchet somewhere

[09:20] <jnthn> (None in any of those cut-down cases, though..)

[09:20] <jnthn> *Not

[09:44] *** Altai-man_ joined
[09:54] *** JJMerelo joined
[09:55] <JJMerelo> jnthn is that bug posted somewhere?

[09:55] <JJMerelo> jnthn and does that happen always, or only in some situations?

[10:00] <jnthn> JJMerelo: It's the first time I can recall seeing it. And I think the above evaluations show "only sometimes"

[10:00] <jnthn> Maybe only if there's a quantified group

[10:00] <JJMerelo> jnthn++

[10:06] <jnthn> JJMerelo: If you've a moment, please do make an issue. If nobody beats me to it, I'll have a big in the regex compiler, but my brain is full of dispatcher stuff at the moment. 

[10:07] <JJMerelo> jnthn by all means.

[10:07] <jnthn> s/big/dig :)

[10:07] <jnthn> .oO( I'm big in the regex compiler )

[10:10] <Altai-man_> .oO ( maybe not da biggezt, but da strongezt for sure )

[10:10] <nine> jnthn: isn't grammar matching just a special case of dispatch? :P

[10:11] <ShimmerFairy> .oO(Non-deterministic Finite Dispatcher)

[10:14] <jnthn> Actually, the design dispatch programs at polymoorphic sites basically does look just like a finite automata, just over arguments instead of chars :P

[10:14] <jnthn> *design of

[10:28] *** sena_kun joined
[10:30] *** Altai-man_ left
[10:36] <Geth> ¦ problem-solving: JJ++ created pull request #202: Solution for issue #72: spin off module publishing tutorial in the documentation.

[10:36] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/202

[10:42] *** squashable6 left
[10:44] <ShimmerFairy> nqp: say(nqp::sprintf("%08.e", [1])); say(nqp::sprintf("%-8.e", [1])); say(nqp::sprintf("%-08.e", [1]));

[10:44] <camelia> nqp-moarvm: OUTPUT: «0001e+00␤1e+00   ␤001e+000␤»

[10:44] *** squashable6 joined
[10:45] <ShimmerFairy> The handling of the '-' and '0' flags in %e seems broken to me, or is adding one of the zeros in the exponent intentional?

[10:51] *** JJMerelo left
[11:07] *** MasterDuke left
[11:08] <lizmat> ShimmerFairy: it is not

[11:08] <ShimmerFairy> That's what I figured. I would expect - to override 0 and put spaces on the right, like in other directives.

[11:12] *** finsternis joined
[12:27] *** Altai-man_ joined
[12:30] *** sena_kun left
[13:04] *** MasterDuke joined
[13:06] <Kaiepi> i was taking a bit of a break from things for a couple weeks, i'll get all those open prs rebased later today

[13:39] *** MasterDuke left
[13:57] *** MasterDuke joined
[14:28] *** sena_kun joined
[14:29] *** Altai-man_ left
[14:38] *** MasterDuke left
[14:48] <[Tux]> Rakudo version 2020.05.1-206-g986f8ab6b - MoarVM version 2020.05-15-g644533ad1

[14:48] <[Tux]> csv-test-xs-20      0.394 -  0.419

[14:48] <[Tux]> csv-ip5xs           0.823 -  0.839

[14:48] <[Tux]> test-t --race       0.932 -  0.933

[14:48] <[Tux]> test-t              1.870 -  1.939

[14:48] <[Tux]> test                7.748 -  7.990

[14:48] <[Tux]> csv-ip5xs-20        7.899 -  8.396

[14:48] <[Tux]> test-t-20 --race    8.695 -  8.867

[14:48] <[Tux]> csv-parser         26.650 - 27.086

[14:48] <[Tux]> test-t-20          31.992 - 33.099

[15:35] <nine> So, my <unit-outer> seems to be missing it's outer, which is why symbols from the setting are just not available at runtime. It's missing already in the mbc file. That's odd however as I clearly give it an outer using nqp::forceouterctx (which I just documented as well) as evidenced by the debug output: forceouterctx(0x6e39d30, 0x5d22830), replacing sf 0x4b03538 <unit-outer>(nested) 91 outer (nil) with 

[15:35] <nine> 0x4107d28

[15:38] *** Xliff joined
[15:47] <nine> Oooh! Of course nqp::forceouterctx only affects the MVMCode and MVMStaticFrame, i.e. runtime representation, but not the compiled code they came from.

[15:47] <nine> So what does setting outer_ctx in the compiler adverbs actually do?

[15:49] <jnthn> nine: I think it's used by the compiler to find symbols at compile time also

[15:58] *** domidumont left
[16:00] <nine> Though a typical <unit-outer> also doesn't seem to have an outer in the bytecode. So how does it acquire one at runtime? I guess...it's that forceouterctx generated by Perl6::World::load_setting

[16:00] <jnthn> Yes

[16:00] <jnthn> Or at least,that's my recollection of how it works

[16:01] <jnthn> I suspect this stuff will change a bit in RakuAST...I've noticed that a startup cost is iterating the whole core.setting symbols and building a QAST::Block with lexicals for them all

[16:01] <jnthn> When it'd be better to just do lookups into the context when we need to

[16:10] <nine> Darn...I can't just set the MAST::Frame's outer during compilation as that frame hasn't even been compiled at that point.

[16:16] *** Geth left
[16:19] <timotimo> oof

[16:19] <timotimo> gotta fake the outers up or something? uuuggghhhh

[16:23] <nine> I figure it'd be best to generate the same load_setting call as with non-nested compilations. After all a raku block in a Perl 5 module doesn't have an outer scope other than the setting. Except for nested blocks of course. But I'll figure out something for them once I have the simpler case up and running

[16:26] <nine> Kinda funny. A year ago it wasn't even possible to precompile modules when they used Perl 5 modules. Now that capability looks like the bare minimum and I'd be quite unhappy if we couldn't precompile those raku blocks into the user :)

[16:27] <nine> Btw. jnthn next up on my list is definitely going to be non-Raku-module dependencies for precomp files. It gets tedious having to modify the user module on every change to the Raku code in the Perl 5 module ;)

[16:27] *** Altai-man_ joined
[16:28] *** Geth joined
[16:29] <[Coke]> nine++ nine++ ... (let's assume I did that nine times.)

[16:29] *** sena_kun left
[16:32] <nine> Ok, for that load_setting call to work, it won't do to have 2 dependencies+deserialize frames in the comp unit...

[16:48] *** MasterDuke joined
[16:56] <jnthn> nine: ooh, that'd be good for multiple things, not least badger... :)

[16:57] <jnthn> (The "write SQL, get Raku subs" thingy)

[17:03] <nine> But first, I've got to get out of this rabbit hole... 

[17:18] *** domidumont joined
[18:12] <Xliff> jnthn: I thought badger emitted Go

[18:25] <jnthn> Xliff: Wrong badger. :)

[18:25] *** hankache joined
[18:28] *** sena_kun joined
[18:30] *** Altai-man_ left
[18:34] <Geth> ¦ rakudo/set_equality: 701f4cfb40 | (Elizabeth Mattijsen)++ | 11 files

[18:34] <Geth> ¦ rakudo/set_equality: Implement set equality operators

[18:34] <Geth> ¦ rakudo/set_equality: 

[18:34] <Geth> ¦ rakudo/set_equality: - (==)  returns whether operands are the same using QuantHash semantics

[18:34] <Geth> ¦ rakudo/set_equality: - ≡     unicode version of (==)

[18:34] <Geth> ¦ rakudo/set_equality: - ≢     returns whether operrands are *NOT* the same using QuantHash semantics

[18:34] <Geth> ¦ rakudo/set_equality: 

[18:34] <Geth> ¦ rakudo/set_equality: Although "a (==) b" can be considered short for "a.Set (==) b.Set", it will

[18:34] <Geth> ¦ rakudo/set_equality: <…commit message has 16 more lines…>

[18:34] <Geth> ¦ rakudo/set_equality: review: https://github.com/rakudo/rakudo/commit/701f4cfb40

[18:34] <Geth> ¦ rakudo: lizmat++ created pull request #3727: Implement set equality operators

[18:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3727

[18:35] <Geth> ¦ roast/set_equality: 715fb79b93 | (Elizabeth Mattijsen)++ | 2 files

[18:35] <Geth> ¦ roast/set_equality: Tests for Rakudo PR #3727

[18:35] <Geth> ¦ roast/set_equality: review: https://github.com/Raku/roast/commit/715fb79b93

[18:36] <Geth> ¦ roast: lizmat++ created pull request #646: Tests for Rakudo PR #3727

[18:36] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/646

[18:51] *** hankache left
[18:51] *** lucasb joined
[19:25] *** domidumont left
[19:28] <timotimo> ^- so <a a a b b c> (==) <a b c> will give True or False? QuantHash/Bag or Set?

[19:36] <timotimo> i guess arrays/lists become Set, and if one is a Bag or Mix, that's what the others become

[19:53] <nine> Now to get my load_setting call running I need to share dependencies+deserialize between outer and nested compiler. To get that running I need to remove my workaround in compile_in_context where I explicitly did not share the CompUnit's data.

[19:54] <nine> The intruiging thing about those failures are that they are of the kind "Cannot invoke this object (REPR: Null; VMNull)" which occurs when I share the frames list between compilations.

[19:54] <nine> But...why? If anything sharing should fix missing frames, not cause them.

[19:55] <nine> After all how can having access to all frames of all concurrent compilations cause us to lose some?

[20:03] <timotimo> is it a missing frame, or is it something just not having the frame assigned to it, or the invocation protocol is not set up, or whatever else?

[20:03] <timotimo> do you have a VM by now that you can use rr in?

[20:04] <nine> I can use rr

[20:21] <nine> New observations: lots and lots of nested compilations happen successfully before the failing one. And the failing one also just adds frames to @!frames, though curiously one of them is rethrow

[20:21] *** sena_kun left
[20:21] *** sena_kun joined
[20:27] *** Altai-man_ joined
[20:29] *** sena_kun left
[22:28] *** sena_kun joined
[22:29] *** Altai-man_ left
[22:53] *** sena_kun left
[23:25] <lizmat> timotimo: <a a a b b c> (==) <a b c> is the same as <a a a b b c>.Set (==) <a b c>.Set   so True

[23:27] <timotimo> OK

[23:40] *** lucasb left
