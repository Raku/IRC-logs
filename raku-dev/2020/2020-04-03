[00:36] *** travis-ci joined
[00:36] <travis-ci> Rakudo build passed. Vadim Belman 'Merge pull request #3590 from vrurg/problem-solving-170

[00:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/670360172 https://github.com/rakudo/rakudo/compare/aa5154e02783...2cbf58372fa7

[00:36] *** travis-ci left
[01:01] *** Kaiepi left
[01:01] *** Kaiepi joined
[01:08] *** Kaiepi left
[01:13] *** Kaiepi joined
[01:21] *** Altai-man_ joined
[01:23] *** sena_kun left
[01:48] *** upupbb-user2 left
[02:08] <Geth> ¦ nqp: 1517cf77db | (Vadim Belman)++ | tools/templates/jvm/nqp-j.in

[02:08] <Geth> ¦ nqp: Don't quote `%*` in the command line

[02:08] <Geth> ¦ nqp: 

[02:08] <Geth> ¦ nqp: It causes java to treat everything `nqp-j.bat` gets on the command line

[02:08] <Geth> ¦ nqp: as a single parameter.

[02:08] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/1517cf77db

[02:11] *** sivoais left
[02:23] *** sivoais joined
[02:35] <Geth> ¦ rakudo: vrurg assigned to patrickbkr Issue Rakudo JVM backend build broken on Windows https://github.com/rakudo/rakudo/issues/3591

[02:37] <vrurg> .seen patrickb

[02:37] <tellable6> vrurg, I saw patrickb 2020-03-31T22:22:32Z in #raku: <patrickb> rba: Thanks for the previous upload!

[02:38] <vrurg> .ask patrickb Would you pls have a look at R#3591? Not all nqp runners are exe files yet, as it turns out. :)

[02:38] <linkable6> R#3591 [open]: https://github.com/rakudo/rakudo/issues/3591 [JVM][Windows][build][severe] Rakudo JVM backend build broken on Windows

[02:38] <tellable6> vrurg, I'll pass your message to patrickb

[02:52] <Geth> ¦ nqp/master: 4 commits pushed by Coke++

[02:52] <Geth> ¦ nqp/master: c52ee907fe | note VM restrictions

[02:52] <Geth> ¦ nqp/master: 0ff397b7f3 | These ops were removed in MoarVM 2017.05.

[02:52] <Geth> ¦ nqp/master: ae87a5ac86 | Split some entries so we can mark them per vm

[02:52] <Geth> ¦ nqp/master: 1b2b486472 | Fix typo

[02:52] <Geth> ¦ nqp/master: review: https://github.com/Raku/nqp/compare/1517cf77db10...1b2b486472ce

[03:22] *** sena_kun joined
[03:23] *** Altai-man_ left
[04:22] *** upupbb-user3 joined
[05:02] *** Xliff joined
[05:21] *** Altai-man_ joined
[05:23] *** sena_kun left
[05:41] <Xliff> \o

[05:41] <Xliff> Off again! :)

[05:41] <Xliff> o7

[05:41] *** Xliff left
[06:15] *** upupbb-user3 left
[07:22] *** sena_kun joined
[07:23] *** Altai-man_ left
[07:39] <AlexDaniel> sourceable6: 42.return

[07:39] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/2cbf583/src/core.c/Mu.pm6#L75

[07:41] <AlexDaniel> greppable6: \.return

[07:41] <greppable6> AlexDaniel, 197 lines, 37 modules: https://gist.github.com/a27f670061904a8fe426ec6030db285c

[07:42] <AlexDaniel> TIL .take .return

[08:14] <jjatria> tyil: I've built a couple of more images based on different distros, and put them here for now in case you want to check them out: https://quay.io/repository/jjatria/rakudo?tab=tags

[08:15] <jjatria> I've ironed out a bunch of small issues with the Dockerfiles, which is nice

[08:15] <tyil> oh, security scans on those images

[08:15] <tyil> very nice

[08:16] <jjatria> I think I should be able to send you the patch tonight, maybe, or during the weekend at some point

[08:17] <jjatria> What do we want to do about labels? You want to keep the ones in that other Dockerfile you sent me?

[08:18] <jjatria> This is how the patch currently looks, by the way: https://gitlab.com/jjatria/rstar/-/merge_requests/1

[08:24] <tyil> I'm honestly not too invested in how Docker will be arranged, I used the tags I'm using because they were clear to me

[08:24] <tyil> if you think you have a more clear way to distinguish them, that's fine too

[09:21] *** Altai-man_ joined
[09:24] *** sena_kun left
[10:19] *** Kaiepi left
[10:20] *** Kaiepi joined
[10:40] *** samcv left
[10:49] *** MasterDuke left
[10:51] <lizmat> Files=1306, Tests=111228, 213 wallclock secs (29.09 usr  8.04 sys + 2998.59 cusr 264.43 csys = 3300.15 CPU)

[11:07] *** hungryd56 joined
[11:21] *** sena_kun joined
[11:23] *** Altai-man_ left
[11:48] *** Xliff joined
[11:48] <Xliff> \o

[11:49] <Xliff> What does this mean: "Cannot invoke this object (REPR: P6int; uint32)"

[11:50] <sena_kun> Xliff, "something is wrong" and "a gist is helpful".

[11:50] <Xliff> Would help if I knew what to gist! :P

[11:50] <sena_kun> I know... :/

[11:50] <Xliff> No backtrace information in this.

[11:50] <sena_kun> Xliff, is it reliable?

[11:54] <Xliff> Yes.

[11:54] <Xliff> https://gist.github.com/Xliff/83a071845e6b2f0bf1d1a49bf84e9399

[11:55] <sena_kun> Xliff, --ll-exception shows more output?

[11:56] <Xliff> No.

[11:56] <sena_kun> Xliff, sigh... well, all this as a ticket to rakudo repo, I think.

[11:57] <Xliff> sena_kun: --ll-exception will not work for Nativecall

[11:58] <Xliff> Especially if it's from Moar code thrown inside C

[12:05] <Xliff> Hah! Found it.

[12:06] <Xliff> m: constant G := guint32; G(1)

[12:06] <camelia> rakudo-moar 2cbf58372: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    guint32 used at line 1␤␤»

[12:06] <Xliff> m: use NativeCall; constant G := uint32; G(1)

[12:06] <camelia> rakudo-moar 2cbf58372: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Failed to create directory '/home/camelia/.raku/precomp' with mode '0o777': Failed to mkdir: Permission denied␤at <tmp>:1␤Actually thrown at:␤  in any statement_control at /home/camelia/rakudo-m-i…»

[12:06] <Xliff> *sigh*

[12:06] <Xliff> p6: use NativeCall; constant G := uint32; G(1)

[12:06] <camelia> rakudo-moar 2cbf58372: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Failed to create directory '/home/camelia/.raku/precomp' with mode '0o777': Failed to mkdir: Permission denied␤at <tmp>:1␤Actually thrown at:␤  in any statement_control at /home/camelia/rakudo-m-i…»

[12:07] <Xliff> Is camelia out of disk space?

[12:08] <lizmat> nine ^^

[12:09] <nine> No, there's space left and when I try manually with camelia's user it works

[12:10] <nine> m: use NativeCall; constant G := uint32; G(1)

[12:10] <camelia> rakudo-moar 2cbf58372: OUTPUT: «Cannot invoke this object (REPR: P6int; uint32)␤  in block <unit> at <tmp> line 1␤␤»

[12:21] <Xliff> sena_kun: Hey! A golf!

[12:21] <Xliff> nine++

[12:27] <sena_kun> Xliff, nice, now the ticket can be updated. :)

[12:32] <Xliff> sena_kun: That error message is more LTA, I think.

[12:58] *** hungryd56 left
[12:59] *** hungrydonkey joined
[13:17] *** MasterDuke joined
[13:21] *** Altai-man_ joined
[13:23] *** sena_kun left
[13:32] *** hungryd87 joined
[13:35] *** hungrydonkey left
[13:42] <lizmat> yuck: TIL you can end a ... sequence with "last"

[13:58] <AlexDaniel> lizmat: you can but I'm not sure if you should… it's weird

[13:58] <[Coke]> m: say 1...last

[13:58] <camelia> rakudo-moar 2cbf58372: OUTPUT: «===SORRY!===␤last without loop construct␤»

[13:58] <AlexDaniel> lizmat: as I complained a few days ago, it's the is-lazy that's making it different

[13:58] * [Coke] assumes not literally. :)

[13:59] <AlexDaniel> [Coke]: I think it's about 1, { last if $_ > 5; $_ + 1 } … ∞

[13:59] <AlexDaniel> m: my $a = 1, { last if $_ > 5; $_ + 1 } … ∞; say $a

[13:59] <camelia> rakudo-moar 2cbf58372: OUTPUT: «Potential difficulties:␤    Useless use of … in sink context␤    at <tmp>:1␤    ------> 3my $a = 1, { last if $_ > 5; $_ + 1 } …7⏏5 ∞; say $a␤1␤»

[13:59] <AlexDaniel> m: my $a = (1, { last if $_ > 5; $_ + 1 } … ∞); say $a

[13:59] <camelia> rakudo-moar 2cbf58372: OUTPUT: «(...)␤»

[13:59] <AlexDaniel> m: my $a = (1, { last if $_ > 5; $_ + 1 } … ∞); say $a[5]

[13:59] <camelia> rakudo-moar 2cbf58372: OUTPUT: «6␤»

[13:59] <AlexDaniel> m: my $a = (1, { last if $_ > 5; $_ + 1 } … ∞); say $a[*]

[13:59] <camelia> rakudo-moar 2cbf58372: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[13:59] <AlexDaniel> m: my $a = (1, { last if $_ > 5; $_ + 1 } … ∞); .say far $a

[13:59] <camelia> rakudo-moar 2cbf58372: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 031, { last if $_ > 5; $_ + 1 } … ∞); .say7⏏5 far $a␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤       …»

[13:59] <AlexDaniel> m: my $a = (1, { last if $_ > 5; $_ + 1 } … ∞); .say for $a

[13:59] <camelia> rakudo-moar 2cbf58372: OUTPUT: «(...)␤»

[13:59] <AlexDaniel> m: my $a = (1, { last if $_ > 5; $_ + 1 } … ∞); .say for @$a

[14:00] <camelia> rakudo-moar 2cbf58372: OUTPUT: «1␤2␤3␤4␤5␤6␤»

[14:00] <AlexDaniel> I'm clearly not good at this

[14:00] <AlexDaniel> anyway, you're much better of having this condition on the right side of …

[14:00] <AlexDaniel> because then .is-lazy is False

[14:01] <AlexDaniel> off*

[14:01] <AlexDaniel> but can you skip elements with next? :)

[14:01] <AlexDaniel> m: my $a = (1, { next if $_ == 5; $_ + 1 } … 10); .say for @$a

[14:01] <camelia> rakudo-moar 2cbf58372: OUTPUT: «(signal XCPU)1␤»

[14:02] <AlexDaniel> huh!

[14:02] <AlexDaniel> 6c: my $a = (1, { next if $_ == 5; $_ + 1 } … 10); .say for @$a

[14:09] <committable6> AlexDaniel, https://gist.github.com/abebaf898806e43f2ebee0befdc9132c

[14:25] <Geth> ¦ nqp: 789c41e540 | Coke++ | 2 files

[14:25] <Geth> ¦ nqp: standardize QAST Op formatting

[14:25] <Geth> ¦ nqp: 

[14:25] <Geth> ¦ nqp: ... and update the test to be able to find these ops in the docs.

[14:25] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/789c41e540

[14:26] <[Coke]> down to 351 failures in the nqp docs. We are down to errors around "this op isn't documented"

[14:28] <[Coke]> ... which is actually more because there are a lot of 'stub' entries that quite the test but don't actually have docs.

[14:33] <[Coke]> https://gist.github.com/coke/325a98074f3178957969b07266df7da4 is the list the test complains about

[14:38] *** hungryd87 left
[14:38] *** hungrydonkey joined
[14:48] *** hungryd85 joined
[14:49] *** hungrydonkey left
[15:22] *** sena_kun joined
[15:23] *** Altai-man_ left
[15:24] *** ufobat__ joined
[15:26] *** patrickb joined
[15:28] *** ufobat_ left
[16:03] <Geth> ¦ nqp: patrickbkr++ created pull request #610: Always handle proc exec arguments verbatim on JS

[16:03] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/610

[16:19] *** Xliff left
[16:39] <lizmat> m: dd ({ |(1,9) } ... 9).head(10)   # I'd argue this is wrong, should be (1,9).Seq

[16:39] <camelia> rakudo-moar 2cbf58372: OUTPUT: «(1, 9, 1, 9, 1, 9, 1, 9, 1, 9).Seq␤»

[16:41] <lizmat> m: dd ({ 9 } ... 9).head(10)

[16:41] <camelia> rakudo-moar 2cbf58372: OUTPUT: «(9,).Seq␤»

[17:21] *** Altai-man_ joined
[17:21] *** hungryd85 left
[17:22] *** hungrydonkey joined
[17:23] *** sena_kun left
[17:29] * lizmat notices that the :nohandler named argument to nqp::until / nqp::while is not documented   #jnthn

[17:35] <lizmat> m: dd ("A" ... "zz").tail   # surprised to see that end at "ZZ"  (aka uppercase)

[17:35] <camelia> rakudo-moar 2cbf58372: OUTPUT: «"ZZ"␤»

[17:36] <lizmat> m: dd ("A" ... "aa").tail   # aah, it's halting as soon as there are more chars in the produced value than are in the endpoint

[17:36] <camelia> rakudo-moar 2cbf58372: OUTPUT: «"ZZ"␤»

[17:40] *** finsternis joined
[18:02] *** hungrydonkey left
[18:25] <[Coke]> bartolin_: hio

[18:28] *** samcv joined
[18:28] <[Coke]> there are 22 js-only opcodes not documented; 30 jvm only. (none for moar)

[18:30] <[Coke]> Is there a way to get nqp to programmatically tell me its opcodes rather than looking at source and guessing?

[18:31] <[Coke]> There are a few cases where the ops are added programmatically, so the doc test reports JS has "isle" when it really has "isle_I", "isle_.."

[18:37] <AlexDaniel> e: https://gist.github.com/AlexDaniel/e25346a2cd0c19c94ad44e81bcb27626

[18:37] <evalable6> AlexDaniel, rakudo-moar 2cbf58372: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[18:37] <evalable6> AlexDaniel, Full output: https://gist.github.com/e3f13bab58a5e5a989de8bd99f79cdc5

[18:38] <AlexDaniel> e: https://gist.github.com/AlexDaniel/e25346a2cd0c19c94ad44e81bcb27626

[18:38] <evalable6> AlexDaniel, rakudo-moar 2cbf58372: OUTPUT: «»

[18:38] <AlexDaniel> c: all https://gist.github.com/AlexDaniel/e25346a2cd0c19c94ad44e81bcb27626

[18:38] <committable6> AlexDaniel, https://gist.github.com/86dd35c4e4524042bb60dcf2b2062e4d

[18:39] <AlexDaniel> c: all https://gist.github.com/AlexDaniel/e25346a2cd0c19c94ad44e81bcb27626

[18:40] <committable6> AlexDaniel, https://gist.github.com/be404f776790049c75e439940ed7b3e2

[18:40] <AlexDaniel> bisect: https://gist.github.com/AlexDaniel/e25346a2cd0c19c94ad44e81bcb27626

[18:40] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=2cbf583) because on both starting points the exit code is 0

[18:41] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/93040317b21224f6938047e10f2ea71e

[18:41] <bisectable6> AlexDaniel, (2016-02-13) https://github.com/rakudo/rakudo/commit/9576596690b1ad8feabb0adf949d63be0ac6ee60

[18:41] <AlexDaniel> c: 9576596690^,9576596690 https://gist.github.com/AlexDaniel/e25346a2cd0c19c94ad44e81bcb27626

[18:41] <committable6> AlexDaniel, ¦9576596690^: «42␤» ¦9576596: «»

[18:50] <AlexDaniel> R#3593

[18:50] <linkable6> R#3593 [open]: https://github.com/rakudo/rakudo/issues/3593 File ending with backslash silently exits with 0 status

[18:50] <AlexDaniel> btw I hate the issue template :)

[18:51] <AlexDaniel> “Steps to Reproduce” is fine, Environment is something I never look at, Expected Behavior is obvious in almost all cases

[18:52] <AlexDaniel> it's extremely easy to ask for more info if it's needed

[19:05] <vrurg> AlexDaniel++ 

[19:06] <vrurg> On top of it, 'steps to reproduce' are usually explained as a part of the problem description.

[19:17] <jnthn> Given how to reproduce the problem is probably the most important thing for having a chance of solving it, I'd rather keep that and leave the problem description

[19:17] <jnthn> In many cases a decent issue name captures that

[19:17] <jnthn> Uh, *leave out* the problem description

[19:19] <jnthn> Expected behavior is desirable IMO; how to repro + what it should do = ingredients for a test case.

[19:20] <jnthn> As for "easy to ask for more info" - yeah, maybe, but at least for me my time to fix things is limited, and if a ticket doesn't give me enough to go on, I tend to just pass over it for one that did.

[19:21] <nine> The expected behavior also shows if the reporter has the right expectations in the first place. Also it's just not always clear what the expected outcome should actually be

[19:21] <jnthn> Well, yes, sometimes there's no bug, just wrong expectations.

[19:22] *** sena_kun joined
[19:22] <jnthn> If anything is to be dropped from the template, I'd vote for problem description.

[19:23] <jnthn> Environment is a tricky one, often it doesn't matter, occasionally it really matters.

[19:23] *** Altai-man_ left
[19:24] <AlexDaniel> maybe “Compiler version” is enough

[19:30] <AlexDaniel> I wish we motivated users to provide executable code blocks or gists

[19:30] <AlexDaniel> then I'd be able to automatically run committable and bisectable

[19:31] <AlexDaniel> but I don't know how to do that, everybody is using their own format

[19:32] <MasterDuke> social distancing con: you don't get to throw a birthday party for your three-year-old daughter. social distancing pro: you don't have to throw a birthday party for your three-year-old daughter

[19:36] *** lucasb joined
[19:40] <AlexDaniel> MasterDuke: yeah, ignoring for a moment people dying and losing their jobs and stuff, it's an interesting way of life

[19:41] <AlexDaniel> perhaps a bit less fun but definitely more efficient :)

[19:49] <patrickb> vrurg: Is there a way to access NQP configure variables containing '-' in rakudo Makefiles? I have the impression the '-' makes it impossible to access them.

[19:50] <MasterDuke> definitely different. less daily spending, but there's a bit of a tendency to "i've already been in lockdown three whole days! time to treat myself to something crazy i order online!"

[19:54] <vrurg> patrickb: I think it's been translated into _, doesn't it? If not we must do it then.

[19:55] <patrickb> Does that happen implicitly or do we have to do that explicitly for every parameter?

[19:56] <patrickb> Could we just replace all - with _ when reading a backend configuration?

[19:57] <vrurg> patrickb: 1min

[19:58] <vrurg> patrickb: actually, macros may support - too. If they not already. Let me check it...

[20:00] <vrurg> patrickb: No, - isn't supported, but it's easy to add. I would have to go in 10mins, won't have time to test. You could do it by modifying regexp in Macros.pm lines 267 and 273.

[20:01] <vrurg> patrickb: just replace [:\w] with [:\w\-]

[20:01] <patrickb> I'll have a look

[20:03] * vrurg is afk&

[21:21] *** Altai-man_ joined
[21:23] *** sena_kun left
[21:41] <jjatria> tyil: I've been playing around with these rakudo star images I've built, and I'm wondering what we want them to be able to do. If rakudo star is supposed to be "a user-oriented distribution", then do we want them to be able to eg. install modules?

[21:41] <jjatria> Because currently, although zef is there, it's not very usable without eg. git, make, etc

[22:24] <Geth> ¦ nqp-configure: patrickbkr++ created pull request #18: Allow '-' in config variables

[22:24] <Geth> ¦ nqp-configure: review: https://github.com/Raku/nqp-configure/pull/18

[22:29] <Geth> ¦ nqp-configure: d9e0ab97d0 | (Patrick Böker)++ | lib/NQP/Macros.pm

[22:29] <Geth> ¦ nqp-configure: Allow '-' in config variables

[22:29] <Geth> ¦ nqp-configure: review: https://github.com/Raku/nqp-configure/commit/d9e0ab97d0

[22:29] <Geth> ¦ nqp-configure: f1a2d81971 | (Patrick Böker)++ (committed using GitHub Web editor) | lib/NQP/Macros.pm

[22:29] <Geth> ¦ nqp-configure: Merge pull request #18 from patrickbkr/minus-in-confvars

[22:29] <Geth> ¦ nqp-configure: 

[22:29] <Geth> ¦ nqp-configure: Allow '-' in config variables

[22:29] <Geth> ¦ nqp-configure: review: https://github.com/Raku/nqp-configure/commit/f1a2d81971

[22:40] *** Altai-man_ left
[23:15] *** patrickb left
[23:45] *** lucasb left
[23:58] *** hungrydonkey joined
