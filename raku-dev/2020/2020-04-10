[00:02] *** Kaiepi left
[00:03] *** Kaiepi joined
[00:37] *** Kaiepi left
[00:37] *** Kaeipi joined
[00:40] *** sena_kun joined
[00:41] *** Altai-man_ left
[00:57] *** hungrydonkey joined
[00:59] *** Kaeipi left
[01:00] *** Kaeipi joined
[01:08] *** Kaeipi left
[01:09] *** Kaiepi joined
[01:21] *** hungrydonkey left
[01:23] *** Kaiepi left
[01:23] *** Kaiepi joined
[01:25] *** hungrydonkey joined
[01:33] *** hungrydonkey left
[01:47] *** hungrydonkey joined
[02:35] *** hungrydonkey left
[02:37] *** hungrydonkey joined
[02:39] *** Altai-man_ joined
[02:42] *** sena_kun left
[03:51] *** MasterDuke left
[04:01] *** Kaiepi left
[04:02] *** Kaiepi joined
[04:40] *** sena_kun joined
[04:42] *** Altai-man_ left
[04:57] *** lichtkind joined
[05:43] *** Kaiepi left
[05:43] *** Kaiepi joined
[06:39] *** Altai-man_ joined
[06:41] *** sena_kun left
[06:44] *** vrurg_ joined
[06:48] *** vrurg left
[07:16] *** hungrydonkey left
[07:24] *** hungrydonkey joined
[07:48] *** MasterDuke joined
[07:48] *** hungrydonkey left
[07:51] <MasterDuke> jnthn: dispatcher stuff sounds cool. any idea how long/difficult it will be to implement?

[07:56] *** hungrydonkey joined
[08:02] *** lichtkind left
[08:40] *** sena_kun joined
[08:41] *** Altai-man_ left
[09:16] <lizmat> Files=1306, Tests=111228, 212 wallclock secs (28.59 usr  8.19 sys + 2987.25 cusr 269.94 csys = 3293.97 CPU)

[09:21] <Kaiepi> m: say Mu.new ~~ Mu:D

[09:21] <camelia> rakudo-moar 604085fb2: OUTPUT: ¬´Cannot resolve caller ACCEPTS(Mu:D:U: Mu:D); none of these signatures match:‚ê§    (Mu:U: \topic, *%_)‚ê§    (Mu:U: Mu:U \topic, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:21] <Kaiepi> it's correct for this to throw, but what's with Mu:D:U in the output?

[09:26] <Kaiepi> ah, looks like it's nothing serious, just an error with how X::Multi::NoMatch generates the message

[09:29] <lizmat> feels to me that should just return True

[09:31] <sena_kun> yes

[09:32] <sena_kun> and isn't smartmatching policy is "never die"?

[09:32] <sena_kun> e.g. https://github.com/rakudo/rakudo/issues/1594

[09:36] <Kaiepi> yeah, it'd be nice for that to return true

[09:37] <Kaiepi> would something like `multi method ACCEPTS(Mu:U: Mu:D --> True)` and `multi method ACCEPTS(Any:U: Mu:D --> False)` work?

[09:39] <Kaiepi> hm, that's not quite right i don't think

[09:40] <Kaiepi> maybe the `:(Mu:U: Mu:U)` candidate could accept Mu:_ values instead?

[09:42] <Kaiepi> if it works, that would allow the :(Mu:U: Any) candidate to be removed, which might speed up smartmatching a little

[09:44] * lizmat is testing:           nqp::eqaddr(self,nqp::decont(topic)) && nqp::eqaddr(self.WHAT,Mu) && nqp::eqaddr(topic.WHAT,Mu)

[09:45] <lizmat> aaahhh, /me is not awake yet

[09:46] <lizmat> sourceable6 42 ~~ Mu:D

[09:47] <lizmat> sourceable6: 42 ~~ Mu:D

[09:47] <sourceable6> lizmat, https://github.com/rakudo/rakudo/blob/604085f/src/core.c/Mu.pm6#L1109

[09:47] <tyil> hmm, 2 modules for Rakudo Star still failing: https://gitlab.com/tyil/rakudo-star/-/jobs/506277387 (OpenSSL and DBIish)

[09:47] <lizmat> hmmm.. that's not very useful

[09:47] <tyil> anyone got a clue on what to fix for these?

[09:48] <AlexDaniel> lizmat: what were you looking for?

[09:48] <lizmat> tyil: afaik, sena_kun has been looking into the OpenSSL stuff

[09:48] <lizmat> AlexDaniel: trying to find the candidate that handles 42 ~~ Mu:D

[09:48] <tyil> alright, I'll assume that highlight of them is enough for now, I'm not in a rush :>

[09:49] <sena_kun> I was simply removing a test which relies on particular ssl implementation too much.

[09:50] <lizmat> Kaiepi: leaving that up to you to figure out  :-)

[09:50] <tyil> sena_kun: ah, I guess you have no idea on what to "fix" here either, then :(

[09:50] <AlexDaniel> sourceable6: Mu.ACCEPTS(42)

[09:50] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/604085f/src/core.c/Mu.pm6#L21

[09:51] <AlexDaniel> lizmat: like this?

[09:51] <lizmat> yup

[09:52] <sena_kun> tyil, what's the ssl implementation on this machine? ` Cannot locate symbol '(null)' in native library '(null)'` is odd. Can you check what https://github.com/sergot/openssl/blob/master/lib/OpenSSL/NativeLib.pm6#L4 evaluates to on this machine?

[09:52] <AlexDaniel> I just copied the code from the link above :)

[09:52] <AlexDaniel> the answer was about right

[09:52] <tyil> sena_kun: it's an alpine docker image, which runs on a coreos host with linux 4.19

[09:53] <tyil> https://gitlab.com/tyil/rakudo-star/-/jobs/506277387#L66 this is all the information I have about this particular runner

[09:54] <sena_kun> `make openssl-dev` hmm

[09:54] <sena_kun> m: $*VM.platform-library-name('ssl'.IO).Str;

[09:54] <camelia> rakudo-moar 604085fb2: ( no output )

[09:54] <sena_kun> m: $*VM.platform-library-name('ssl'.IO).Str.say;

[09:54] <camelia> rakudo-moar 604085fb2: OUTPUT: ¬´libssl.so‚ê§¬ª

[09:55] <sena_kun> >Connect failed with error DBIish: DBDish::mysql needs '(null)', not found

[09:55] <sena_kun> hmm, it seems something is wrong with natives detection

[09:55] <sena_kun> Can't help with this. :(

[09:55] <tyil> too bad

[09:55] <tyil> at least I know a little bit more :)

[09:55] <tyil> I'm not too concerned with a weird test environment not working completely, so long as people using it in practice don't have any problems

[09:56] <tyil> but the more things I can fix, the better

[09:56] <tyil> thanks for giving me a pointer, sena_kun 

[09:57] <sena_kun> tyil, I'd run a simple script with the line I linked to above to see if it produces some null. If yes, that's a bug, otherwise - a more complex bug which has to be golfed...

[09:58] <sena_kun> *run in the same env, of course

[09:58] <tyil> yeah, that's what I was afraid of

[09:58] <sena_kun> tyil, by the way, was it working before or is it a new thing?

[09:58] <tyil> it's a pain to run just a single line on one of these testrunners

[09:58] <tyil> sena_kun: I don't think I've tested this before

[09:59] <sena_kun> tyil, oh... might it be that e.g. `make openssl-dev` doesn't pull .so itself?

[10:00] <sena_kun> no, it seems openssl is a sub-package of openssl-dev...

[10:01] <tyil> it doesn't seem to be an Alpine specific issue, it seems to return "libssl.so" correctly on a Rakudo Star docker image using Alpine locally

[10:05] <tyil> gonna grab some breakfast, and then I'll play around some more

[10:06] <tyil> I'd like to avoid "commit a script and trigger a gitlab-ci run", since it's incredibly cumbersome to test with :p

[10:20] <[Tux]> Rakudo version 2020.02.1-299-g604085fb2 - MoarVM version 2020.02.1-78-ge7fee00d1

[10:20] <[Tux]> csv-test-xs-20      0.386 -  0.392

[10:20] <[Tux]> csv-ip5xs           0.707 -  0.734

[10:20] <[Tux]> test-t --race       0.975 -  0.994

[10:20] <[Tux]> test-t              1.956 -  2.019

[10:20] <[Tux]> csv-ip5xs-20        6.114 -  6.192

[10:20] <[Tux]> test                7.538 -  7.626

[10:20] <[Tux]> test-t-20 --race    9.320 - 10.042

[10:20] <[Tux]> csv-parser         25.291 - 25.643

[10:20] <[Tux]> test-t-20          31.985 - 33.492

[10:21] <nine> tyil: what rakudo version is that?

[10:22] <tyil> nine: 2020.01

[10:23] <nine> tyil: what moarvm?

[10:25] <tyil> 2020.01.1

[10:29] *** hungrydonkey left
[10:33] <tyil> looks like that coreos version reached OEL anyway

[10:33] <tyil> EOL*

[10:34] <tyil> a vm with the successor version doesn't start with some systemd errors :'D

[10:39] *** Altai-man_ joined
[10:40] <Geth_> ¬¶ rakudo: f70d95e299 | (Elizabeth Mattijsen)++ | src/core.c/Duration.pm6

[10:40] <Geth_> ¬¶ rakudo: Make sure Duration.new(Rat) deconts

[10:40] <Geth_> ¬¶ rakudo: 

[10:40] <Geth_> ¬¶ rakudo: Without deconting it would create a self-referencing structure that

[10:40] <Geth_> ¬¶ rakudo: would make this hang:

[10:40] <Geth_> ¬¶ rakudo: 

[10:40] <Geth_> ¬¶ rakudo:     my $x = 20.0;

[10:40] <Geth_> ¬¶ rakudo:     $x = Duration.new($x);

[10:40] <Geth_> ¬¶ rakudo:     say $x;  # .gist creation makes this hang

[10:40] <Geth_> ¬¶ rakudo: 

[10:40] <Geth_> ¬¶ rakudo: As described in:

[10:40] <Geth_> ¬¶ rakudo:   https://stackoverflow.com/questions/61138016/why-does-raku-duration-new-work-with-int-but-not-rat

[10:40] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/f70d95e299

[10:42] *** sena_kun left
[10:51] <lizmat> sourceable6: Duration.new(20).gist

[10:51] <sourceable6> lizmat, https://github.com/rakudo/rakudo/blob/f70d95e/src/core.c/Mu.pm6#L710

[10:52] <AlexDaniel> sourceable6: Duration.new(20).gist()

[10:52] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/f70d95e/src/core.c/Numeric.pm6#L33

[10:52] <AlexDaniel> lizmat: without () it points to the proto, which is also useful

[10:57] <lizmat> indeed, thanks

[11:15] <Kaiepi> m: say all(Mu,Any) ~~ Any

[11:15] <camelia> rakudo-moar f70d95e29: OUTPUT: ¬´False‚ê§¬ª

[11:15] <Kaiepi> fixing smartmatching of Mu:D isn't as simple as just changing Mu's ACCEPTS candidates because of junctions, but making those work again should fix this as well

[11:19] <lizmat> Kaiepi: the difference between Mu and Any is what makes junctions work

[11:19] <lizmat> m: sub a(\a) { dd a };  a 1|2|3

[11:19] <camelia> rakudo-moar f70d95e29: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[11:19] <lizmat> m: sub a(Mu \a) { dd a };  a 1|2|3

[11:19] <camelia> rakudo-moar f70d95e29: OUTPUT: ¬´any(1, 2, 3)‚ê§¬ª

[11:19] <lizmat> so I'm not sure how that could ever work

[11:19] <Kaiepi> oh right, that should return False

[11:21] <Kaiepi> with the change to Any's ACCEPTS candidates needed to make junctions work again i'm doing atm it's possible that might return all(True,True)

[11:22] <Kaiepi> so i might need to rethink

[12:07] <Kaiepi> ok, it doesn't do that, good

[12:28] *** Xliff left
[12:40] *** sena_kun joined
[12:42] *** Altai-man_ left
[12:54] <Geth_> ¬¶ rakudo: Skarsnik++ created pull request #3613: Add a fix for issue #3535

[12:54] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3613

[12:54] <linkable6> RAKUDO#3535 [open]: https://github.com/rakudo/rakudo/issues/3535 Comparing Buf with the is routine from Test does not behave well

[13:07] <jjatria> japhb: Hmm... I didn't specify a grid index, nor did I create additional grids. I think this was something I bumped into before I knew there could be more than one grid

[13:07] <jjatria> japhb: I'll try to create a minimal example and put it on an issue. That might be easier than doing this through here

[13:10] <Kaiepi> that handful of ACCEPTS candidates in Mu/Any/Junction sure carry a lot of weight

[13:12] <lizmat> .oO( the buck stops here )

[13:18] <Kaiepi> it may be possible to remove some, though icr say for sure since i'm still fighting with them

[13:29] *** travis-ci joined
[13:29] <travis-ci> Rakudo build failed. Sylvain Colinet 'A fix for issue #3535'

[13:29] <travis-ci> https://travis-ci.com/Skarsnik/rakudo/builds/159783628 https://github.com/Skarsnik/rakudo/compare/604085fb2420...903a01bd494b

[13:29] *** travis-ci left
[14:02] *** lucasb joined
[14:31] *** travis-ci joined
[14:31] <travis-ci> Rakudo build failed. Sylvain Colinet 'A fix for issue #3535, The Test routine 'is' was failing to display diff when receiving not equal Buf because you can't Stringify a Buf directly.'

[14:31] <travis-ci> https://travis-ci.com/Skarsnik/rakudo/builds/159790281 https://github.com/Skarsnik/rakudo/compare/903a01bd494b...96f6448c2fca

[14:31] *** travis-ci left
[14:39] *** Altai-man_ joined
[14:41] *** sena_kun left
[15:25] <Geth_> ¬¶ rakudo: Kaiepi++ created pull request #3614: Improve smartmatching against Mu/Any/Junction

[15:25] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3614

[15:57] *** lichtkind joined
[16:22] <nine> Huh....the MoarVM Performance Tool only tells me "There is nothing at this URL. Return"

[16:25] <timotimo> you need an earlier commit, sorry!

[16:26] <nine> Do you have a commit id for me?

[16:27] <timotimo> um, HEAD~1 probably

[16:29] <nine> Doesn't make a difference. Also the latest master commit is from November. Has it really been broken for so long? Is timo/moarperf still the right repository?

[16:34] <timotimo> it's the right repository, yes

[16:34] <timotimo> i'm very sorry, i've been fully drained of moarperf-shaped tuits :|

[16:35] <nine> Ah, don't be sorry for creating an awesome and much needed tool

[16:36] <nine> I just wonder what's wrong, because I'm pretty sure that I have used it in the last half year and it hasn't changed in that time

[16:37] <timotimo> yeah, i'll probably just have to spend like 5 minutes getting over myself and looking at why exactly react-router.

[16:37] <timotimo> also, the code may be in the middle of going from "one file open at a time" to "multiple files open at a time"

[16:40] *** sena_kun joined
[16:42] *** Altai-man_ left
[17:23] *** cognominal joined
[17:27] *** cognomin_ left
[17:34] *** MasterDuke left
[17:37] *** MasterDuke joined
[17:59] *** tobs left
[18:03] *** tobs joined
[18:39] *** Altai-man_ joined
[18:42] *** sena_kun left
[18:45] <bartolin_> r: @ = (LABEL: while 1 { while 1 { last LABEL } })

[18:45] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´===SORRY!===‚ê§labeled last without loop construct‚ê§¬ª

[18:45] <camelia> ..rakudo-moar f70d95e29: OUTPUT: ¬´labeled last without loop construct‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:45] <bartolin_> ^^ does this ring a bell for someone? it seems to be a variation of https://github.com/Raku/old-issue-tracker/issues/6336

[18:46] <bartolin_> r: @ = (LABEL: for 1 { for 1 { last LABEL } }); say "alive" ## this works

[18:46] <camelia> rakudo-jvm 08b449e1a, rakudo-moar f70d95e29: OUTPUT: ¬´alive‚ê§¬ª

[18:46] *** AlexDani` joined
[18:48] *** AlexDaniel left
[18:48] <bartolin_> r: 'LABEL: while 1 { while 1 { last LABEL } }; say "alive"' ## work, too

[18:48] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant string "LABEL: while 1 { while 1 { last LABEL } }; say \"alive\"" in sink context (line 1)‚ê§¬ª

[18:48] <camelia> ..rakudo-moar f70d95e29: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant string "LABEL: while 1 { while 1 { last LABEL } }; say \"alive\"" in sink context (line 1)‚ê§¬ª

[18:49] <bartolin_> r: LABEL: while 1 { while 1 { last LABEL } }; say "alive"

[18:49] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´Error while reading '/home/camelia/p6eval-token': Permission denied at /home/camelia/rakudo-j-inst/bin/eval-client.pl line 10.‚ê§¬ª

[18:49] <camelia> ..rakudo-moar f70d95e29: OUTPUT: ¬´alive‚ê§¬ª

[19:00] <lizmat> bisectable6: FOO: for <a b> { NEXT say "bar"; .say; next FOO }

[19:00] <bisectable6> lizmat, Bisecting by exit code (old=2015.12 new=f70d95e). Old exit code: 0

[19:00] <bisectable6> lizmat, bisect log: https://gist.github.com/e1c1cb1ed26c15d7376cde7b9a7cfdd9

[19:00] <bisectable6> lizmat, (2017-01-29) https://github.com/rakudo/rakudo/commit/031efe0d9fa1cf38d6d631d0e98e28481f13ac5f

[19:01] <lizmat> m: FOO: for <a b> { NEXT say "bar"; .say; next FOO }

[19:01] <camelia> rakudo-moar f70d95e29: OUTPUT: ¬´a‚ê§labeled next without loop construct‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:01] <lizmat> hmmm

[19:01] <lizmat> m: FOO: for <a b> { .say; next FOO }

[19:01] <camelia> rakudo-moar f70d95e29: OUTPUT: ¬´a‚ê§b‚ê§¬ª

[19:02] <lizmat> m: FOO: for <a b> {  .say; next FOO; NEXT say "bar"; }

[19:02] <camelia> rakudo-moar f70d95e29: OUTPUT: ¬´a‚ê§labeled next without loop construct‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:31] <Geth_> ¬¶ rakudo: db6048e398 | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[19:31] <Geth_> ¬¶ rakudo: self is always deconted 1/3

[19:31] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/db6048e398

[19:31] <Geth_> ¬¶ rakudo: a66f5c29a3 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[19:31] <Geth_> ¬¶ rakudo: self is always deconted 2/3

[19:31] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/a66f5c29a3

[19:31] <Geth_> ¬¶ rakudo: 80be7d193a | (Elizabeth Mattijsen)++ | src/core.c/Label.pm6

[19:31] <Geth_> ¬¶ rakudo: self is always deconted 3/3

[19:31] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/80be7d193a

[19:31] <lizmat> done in separate commits for bisectability

[19:37] <MasterDuke> why only 3? i see some more nqp::decont(self)

[19:39] <lizmat> MasterDuke: you mean the one in Mu.raku?

[19:39] <lizmat> working on that one: I think that can be removed completely

[19:39] <MasterDuke> and lib/NativeCall/Types.rakumod and pseudostash

[19:39] <lizmat> aaah... I only looked in src/core.c

[19:40] <lizmat> MasterDuke: pseudostash ?

[19:40] <MasterDuke> src/core.e/PseudoStash.pm6:546

[19:40] <lizmat> ah, ok

[19:40] <lizmat> hmmm...

[19:41] <lizmat> looks like self *can* be container

[19:41] <lizmat> m: my $a := Proxy.new(FETCH => { 42 }, STORE => -> $,$ { 666 }); dd $a.VAR.raku   # case where self in Mu.raku is a container

[19:41] <camelia> rakudo-moar f70d95e29: OUTPUT: ¬´"42"‚ê§¬ª

[19:43] * lizmat goes on to look at NativeCall and e. pseudostash

[19:47] <bartolin_> lizmat: poking around I noticed adding a nqp::decont for 'label' makes the problem from https://github.com/rakudo/rakudo/issues/2699 goes away: https://gist.github.com/usev6/d36fc514eaef380f38d3ae35fd41e6fd

[19:47] * bartolin_ didn't run tests yet

[19:47] <lizmat> bartolin_++

[19:53] <Geth_> ¬¶ rakudo: a5535b2afb | (Elizabeth Mattijsen)++ | lib/NativeCall/Types.rakumod

[19:53] <Geth_> ¬¶ rakudo: self is always deconted 4/5

[19:53] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/a5535b2afb

[19:53] <Geth_> ¬¶ rakudo: 0d5f87cc18 | (Elizabeth Mattijsen)++ | src/core.e/PseudoStash.pm6

[19:53] <Geth_> ¬¶ rakudo: self is always deconted 5/5

[19:53] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/0d5f87cc18

[19:59] *** lucasb left
[20:07] <Geth_> ¬¶ rakudo: 3c83ce75a1 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[20:07] <Geth_> ¬¶ rakudo: Make sure label handling is consistent wrt containerization

[20:07] <Geth_> ¬¶ rakudo: 

[20:07] <Geth_> ¬¶ rakudo: Also fixes R#2699.  bartolin++ for spotting the actual fix

[20:07] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/3c83ce75a1

[20:07] <linkable6> R#2699 [open]: https://github.com/rakudo/rakudo/issues/2699 [phasers] Labeled last/next doesn't work with FIRST/LAST/NEXT phasers

[20:10] <bartolin_> lizmat++

[20:13] <Geth_> ¬¶ roast: d449e88273 | (Elizabeth Mattijsen)++ | S04-statements/label.t

[20:13] <Geth_> ¬¶ roast: Add tests for R#2699

[20:13] <Geth_> ¬¶ roast: review: https://github.com/Raku/roast/commit/d449e88273

[20:13] <linkable6> R#2699 [open]: https://github.com/rakudo/rakudo/issues/2699 [phasers][tests needed] Labeled last/next doesn't work with FIRST/LAST/NEXT phasers

[20:16] <nine> timotimo: I played around some more and stumbled across the URI http://localhost:20000/#/prof/home which gives me a somewhat working profiler :)

[20:23] <vrurg_> I was just passing by and saw a few words... Is timotimo trying to fix the profiler? If so then I'm excited!

[20:23] *** vrurg_ is now known as vrurg

[20:30] <nine> I just sent a pull request for fixing that redirect in the profiler

[20:30] <MasterDuke> nine++

[20:30] <Geth_> ¬¶ nqp: 7407f3e75f | (Christian Bartolom√§us)++ | 3 files

[20:30] <Geth_> ¬¶ nqp: [JVM] Return VMNull from at_(pos|key)_boxed

[20:30] <Geth_> ¬¶ nqp: 

[20:30] <Geth_> ¬¶ nqp: ... instead of plain null.

[20:30] <Geth_> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/7407f3e75f

[20:34] <bartolin_> bisectable6: @ = (LABEL: while 1 { while 1 { last LABEL } })

[20:34] <bisectable6> bartolin_, Using old=@ new=HEAD in an attempt to do what you mean

[20:34] <bisectable6> bartolin_, On both starting points (old=@ new=3c83ce7) the exit code is 1 and the output is identical as well

[20:34] <bisectable6> bartolin_, https://gist.github.com/3f7fe5fb741f47a967245e68545162b1

[20:35] <bartolin_> that wasn't what I wanted to know :)

[20:36] <bartolin_> bisectable6: my @res = (LABEL: while 1 { while 1 { last LABEL } }); say "alive"

[20:36] <bisectable6> bartolin_, Bisecting by output (old=2015.12 new=3c83ce7) because on both starting points the exit code is 1

[20:36] <lizmat> m: my @res = (LABEL: while 1 { while 1 { last LABEL } }); say "alive"

[20:36] <camelia> rakudo-moar 3c83ce75a: OUTPUT: ¬´labeled last without loop construct‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:36] <bisectable6> bartolin_, bisect log: https://gist.github.com/c4646b4b1145e01d0b311684f3d35bba

[20:36] <bisectable6> bartolin_, There are 3 candidates for the first ‚Äúnew‚Äù revision. See the log for more details

[20:37] <AlexDani`> dec807e1f3f05aebed4264820c525936b15e79a5 f5f80d7698bc05cf8638bf7b5e69f6bb6ef15471 3c5f7bcbf63b6d6386e92af036b2e49f9016a561

[20:37] <linkable6> (2016-05-01) https://github.com/rakudo/rakudo/commit/dec807e1f3 Make List.minmax about 15% faster

[20:37] <linkable6> (2016-05-01) https://github.com/rakudo/rakudo/commit/3c5f7bcbf6 Refer to the actually existing variable.

[20:37] <AlexDani`> f5f80d7698bc05

[20:37] <linkable6> (2016-04-30) https://github.com/rakudo/rakudo/commit/f5f80d7698 Correctly identify labeled next/last/redo Exception.

[20:37] <lizmat> m: FOO: while 1 { last FOO }

[20:37] <camelia> rakudo-moar 3c83ce75a: ( no output )

[20:37] <AlexDani`> hmm I wonder why it doesn't print all three

[20:38] <lizmat> m: FOO: while 1 { while 1 { last FOO } }

[20:38] <camelia> rakudo-moar 3c83ce75a: ( no output )

[20:38] <lizmat> m: (FOO: while 1 { while 1 { last FOO } })

[20:38] <camelia> rakudo-moar 3c83ce75a: ( no output )

[20:38] <lizmat> hmmm

[20:39] <bartolin_> lizmat: just in case you didn't see my earlier note: this seems to be a variation of https://github.com/Raku/old-issue-tracker/issues/6336

[20:40] *** sena_kun joined
[20:40] <lizmat> could you try removing the push-all method to see whether that fixes it ?

[20:42] *** Altai-man_ left
[20:42] <bartolin_> I'm too tired right now, but I'll look again tomorrow. Thanks for the idea ;)

[20:45] <bartolin_> but one last note: we have similar tests (for the closed RT issue) in S04-statements/for.t (https://github.com/Raku/roast/commit/9f418777bc). The tests do pass on MoarVM.

[21:09] *** MasterDuke left
[21:17] *** cognomin_ joined
[21:20] *** cognominal left
[22:20] *** MasterDuke joined
[22:38] *** sena_kun left
[23:07] *** lichtkind left
