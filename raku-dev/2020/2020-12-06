[01:55] <Geth> ¦ rakudo: vrurg self-assigned Argument of a coercion type don't have a workable default value. https://github.com/rakudo/rakudo/issues/4092

[02:13] <leont> vrurg++

[02:28] <Geth> ¦ rakudo: 44cc88b54c | (Vadim Belman)++ | src/Perl6/Actions.nqp

[02:28] <Geth> ¦ rakudo: Make optional coercive parameter work again

[02:28] <Geth> ¦ rakudo: 

[02:28] <Geth> ¦ rakudo: It must default to coercion target type.

[02:28] <Geth> ¦ rakudo: 

[02:28] <Geth> ¦ rakudo: Fixes #4092

[02:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/44cc88b54c

[02:28] <linkable6> RAKUDO#4092 [closed]: https://github.com/rakudo/rakudo/issues/4092 Argument of a coercion type don't have a workable default value.

[02:29] <Geth> ¦ roast: c2ecee1bac | (Vadim Belman)++ | S12-coercion/coercion-types.t

[02:29] <Geth> ¦ roast: Test optional coercive parameter

[02:29] <Geth> ¦ roast: 

[02:29] <Geth> ¦ roast: Make sure rakudo/rakudo#4092 doesn't happen again.

[02:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c2ecee1bac

[02:32] *** evalable6 left
[02:32] *** linkable6 left
[02:33] *** evalable6 joined
[02:34] *** linkable6 joined
[03:17] *** Kaiepi left
[03:29] *** leont left
[05:16] *** sourceable6 left
[05:16] *** coverable6 left
[05:16] *** shareable6 left
[05:16] *** benchable6 left
[05:16] *** releasable6 left
[05:16] *** nativecallable6 left
[05:16] *** bisectable6 left
[05:16] *** notable6 left
[05:16] *** evalable6 left
[05:16] *** quotable6 left
[05:16] *** squashable6 left
[05:16] *** greppable6 left
[05:16] *** tellable6 left
[05:16] *** committable6 left
[05:16] *** linkable6 left
[05:16] *** bloatable6 left
[05:16] *** statisfiable6 left
[05:16] *** unicodable6 left
[05:16] *** squashable6 joined
[05:16] *** committable6 joined
[05:17] *** tellable6 joined
[05:17] *** notable6 joined
[05:17] *** quotable6 joined
[05:17] *** greppable6 joined
[05:17] *** benchable6 joined
[05:17] *** releasable6 joined
[05:17] *** statisfiable6 joined
[05:17] *** coverable6 joined
[05:18] *** unicodable6 joined
[05:18] *** nativecallable6 joined
[05:18] *** shareable6 joined
[05:18] *** bisectable6 joined
[05:19] *** sourceable6 joined
[05:19] *** linkable6 joined
[05:19] *** bloatable6 joined
[05:19] *** evalable6 joined
[05:29] *** frost-lab joined
[08:42] *** sena_kun joined
[08:46] <sena_kun> bisectable6, say <1 2 3> \ <1 3>

[08:46] <bisectable6> sena_kun, Will bisect the whole range automagically because no endpoints were provided, hang tight

[08:46] <bisectable6> sena_kun, Nothing to bisect!

[08:46] <bisectable6> sena_kun, Output on all releases: https://gist.github.com/fa153398ac71db2748faee5bfd5c5883

[09:07] *** Altai-man joined
[09:10] *** sena_kun left
[09:33] *** Kaiepi joined
[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: 461318767c | (Stefan Seifert)++ | src/how/NQPClassHOW.nqp

[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: Make mixins concurrency safe

[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: 

[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: Multiple threads creating mixins on the same type of object could step on each

[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: other's toes as the mixin cache was not protected against concurrent access.

[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: Instead of adding locks, we now use the VM's parameterization mechanism, which

[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: is already concurrency safe and used for mixins in Rakudo.

[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: 

[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: Fixes "Iteration past end of iterator" when running:

[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: raku -e '(^10000).race.map({EVAL "q[];\n"}).sink'

[10:15] <Geth> ¦ nqp/fix-multithreaded-mixins: review: https://github.com/Raku/nqp/commit/461318767c

[10:16] <lizmat> Files=1346, Tests=117143, 223 wallclock secs (30.00 usr  8.48 sys + 3113.00 cusr 298.24 csys = 3449.72 CPU)

[10:16] <nine> a rebase

[10:16] <nine> So....does anyone want to review that? Otherwise I'd just merge it

[10:16] <lizmat> merge it, I'd say  :-)

[10:17] <Geth> ¦ nqp: 461318767c | (Stefan Seifert)++ | src/how/NQPClassHOW.nqp

[10:17] <Geth> ¦ nqp: Make mixins concurrency safe

[10:17] <Geth> ¦ nqp: 

[10:17] <Geth> ¦ nqp: Multiple threads creating mixins on the same type of object could step on each

[10:17] <Geth> ¦ nqp: other's toes as the mixin cache was not protected against concurrent access.

[10:17] <Geth> ¦ nqp: Instead of adding locks, we now use the VM's parameterization mechanism, which

[10:17] <Geth> ¦ nqp: is already concurrency safe and used for mixins in Rakudo.

[10:17] <Geth> ¦ nqp: 

[10:17] <Geth> ¦ nqp: Fixes "Iteration past end of iterator" when running:

[10:17] <Geth> ¦ nqp: raku -e '(^10000).race.map({EVAL "q[];\n"}).sink'

[10:17] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/461318767c

[10:17] <Geth> ¦ nqp: 941b46fef7 | niner++ (committed using GitHub Web editor) | src/how/NQPClassHOW.nqp

[10:17] <Geth> ¦ nqp: Merge pull request #684 from Raku/fix-multithreaded-mixins

[10:17] <Geth> ¦ nqp: 

[10:17] <Geth> ¦ nqp: Make mixins concurrency safe

[10:17] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/941b46fef7

[10:18] <Altai-man> We should make this snippet a test, though?

[10:19] <nine> Maybe a stress test for now? It consumes almost 4G of memory here

[10:20] <Altai-man> This works for me.

[10:23] <nine> A bit of a consolation for me: even if in-process precompilation will never work, the fixes that fell out of it really help. Apparently e.g. this is now fixed: https://gist.github.com/ugexe/50f056eedbc7caba5df58b2ced2a8cda

[10:23] <nine> This may unlock the use of multi threading in zef

[10:24] <nine> That was caused by returning ()

[10:26] <Altai-man> nine++

[11:11] *** JJAtria[m] left
[11:12] *** MitarashiDango[m left
[11:12] *** AlexDaniel` left
[11:13] *** unclechu left
[11:31] *** JJAtria[m] joined
[11:40] *** unclechu joined
[11:40] *** MitarashiDango[m joined
[11:45] *** AlexDaniel` joined
[12:13] <Altai-man> Blin is so far clean enough. We still have blockers.

[12:13] <Altai-man> One is moarvm-level.

[12:20] <lizmat> m: class A { method CALL-ME(|c) { dd c } }; A(42)    # so far, so good

[12:20] <camelia> rakudo-moar 44cc88b54: OUTPUT: «\(42)␤»

[12:21] <lizmat> m: role A { method CALL-ME(|c) { dd c } }; A(42)   # alas

[12:21] <camelia> rakudo-moar 44cc88b54: OUTPUT: «Cannot invoke this object (REPR: Uninstantiable; A)␤  in block <unit> at <tmp> line 1␤␤»

[12:21] <lizmat> m: role A { method CALL-ME(|c) { dd c } }; (A.^pun)(42)   # what should happen automagically

[12:21] <camelia> rakudo-moar 44cc88b54: OUTPUT: «\(42)␤»

[12:28] *** frost-lab left
[13:01] *** leont joined
[13:07] *** sena_kun joined
[13:09] *** Altai-man left
[13:15] <[Coke]> m: m: role A { method CALL-ME(|c) { dd c } }; A.^compose; A(42);

[13:15] <camelia> rakudo-moar 44cc88b54: OUTPUT: «No such method 'compose' for invocant of type␤'Perl6::Metamodel::ParametricRoleGroupHOW'␤  in block <unit> at <tmp> line 1␤␤»

[13:15] <[Coke]> m: m: role A { method CALL-ME(|c) { dd c } }; B = A.new ; B(42);

[13:15] <camelia> rakudo-moar 44cc88b54: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:1␤------> 3e A { method CALL-ME(|c) { dd c } }; B =7⏏5 A.new ; B(42);␤»

[13:15] <[Coke]> m: m: role A { method CALL-ME(|c) { dd c } }; my B = A.new ; B(42);

[13:15] <camelia> rakudo-moar 44cc88b54: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed my (did you mean to declare a sigilless \B or $B?)␤at <tmp>:1␤------> 3 A { method CALL-ME(|c) { dd c } }; my B7⏏5 = A.new ; B(42);␤»

[13:16] <[Coke]> m: m: role A { method CALL-ME(|c) { dd c } }; my \B = A.new ; B(42);

[13:16] <camelia> rakudo-moar 44cc88b54: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '&B' is not declared␤at <tmp>:1␤------> 3CALL-ME(|c) { dd c } }; my \B = A.new ; 7⏏5B(42);␤»

[13:16] <[Coke]> ah well. :)

[14:58] <lizmat> [Coke]: I was looking at that for Rake

[14:58] <lizmat> so you could do Raku[Int,Int](42,66)

[14:58] <lizmat> *Rake

[15:25] <Geth> ¦ rakudo: d1d2546e63 | (Elizabeth Mattijsen)++ | src/core.c/native_array.pm6

[15:25] <Geth> ¦ rakudo: Mark the base native array class as Positional

[15:25] <Geth> ¦ rakudo: 

[15:25] <Geth> ¦ rakudo: Just for consistency with Array.  Should not affect anything else

[15:25] <Geth> ¦ rakudo: but array ~~ Positional returning True, just like Array ~~ Positional.

[15:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d1d2546e63

[15:35] <Geth> ¦ nqp: b3cc2dbc65 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[15:35] <Geth> ¦ nqp: Bump MoarVM to get the latest goodies.

[15:35] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/b3cc2dbc65

[15:38] *** cog left
[15:43] *** cog_ joined
[15:43] *** oddp joined
[15:46] <Geth> ¦ rakudo: 8eb9db3a37 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[15:46] <Geth> ¦ rakudo: Bump NQP to get latest MoarVM/NQP goodies

[15:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8eb9db3a37

[16:04] <lizmat> bisectable6: old=2020.01 use MoarVM::Profiler; dd MoarVM::Profiler.^name

[16:04] <bisectable6> lizmat, On both starting points (old=2020.01 new=8eb9db3) the exit code is 0 and the output is identical as well

[16:04] <bisectable6> lizmat, Output on both points: «"MoarVM::Profiler::MoarVM::Profiler"␤»

[16:04] <lizmat> bisectable6: old=2019.01 use MoarVM::Profiler; dd MoarVM::Profiler.^name

[16:04] <bisectable6> lizmat, Cannot find revision “2019.01” (did you mean “2020.01”?)

[16:04] <lizmat> bisectable6: old=2019.01.1 use MoarVM::Profiler; dd MoarVM::Profiler.^name

[16:04] <bisectable6> lizmat, Cannot find revision “2019.01.1” (did you mean “2020.08.1”?)

[16:04] <lizmat> bisectable6: old=2019.02 use MoarVM::Profiler; dd MoarVM::Profiler.^name

[16:04] <bisectable6> lizmat, Cannot find revision “2019.02” (did you mean “2020.02”?)

[16:04] <lizmat> bisectable6: old=2019.03 use MoarVM::Profiler; dd MoarVM::Profiler.^name

[16:04] <bisectable6> lizmat, Bisecting by exit code (old=2019.03 new=8eb9db3). Old exit code: 1

[16:05] <bisectable6> lizmat, bisect log: https://gist.github.com/3556bbc457b6f384c450daec89386319

[16:05] <bisectable6> lizmat, (2019-05-23) https://github.com/rakudo/rakudo/commit/fefe6ded98f05f6566940ebdea300ba2f8fb1f35

[16:06] <lizmat> aaaahhhh....

[16:43] *** sena_kun left
[16:45] <nine> Lesson of the day: if you have the slightest suspicion that something might not be thread safe, even if you have no idea how it could cause issues, it is not thread safe.

[16:47] <nine> A `raku -e '(^10000).race.map({EVAL "q:to/END/;\nEND\n"}).sink'` will occasionally throw a "No lexical found with name '$_'" error. The reason appears to be https://github.com/Raku/nqp/blob/master/src/QAST/Block.nqp#L42

[16:48] <lizmat> yikes

[16:48] <lizmat> at least on MoarVM that could be turned into an atomic int

[16:48] <nine> Thread unsafe incrementation of that number can lead to 2 blocks sharing the same CUUID. This leads to us losing a frame and we may end up with <unit> getting taken as deserialize_frame. This frame does not get the benefit of nqp::forceouterctx thus the lookup of the outer's $_ fails

[16:49] <nine> Could in theory at least. But NQP doesn't have those yet. atomicinc only works on a native container, not directly on a native value. I don't know yet how to create one. For now I've added a lock.

[16:50] <lizmat> nine++

[16:50] <lizmat> that would be backend agnostic

[16:50] <nine> Seems to be stable, but will give it another hour during my training

[16:51] <lizmat> method symbol(str $name, *%attrs) {

[16:51] <lizmat>         %!symbol := nqp::hash() if nqp::isnull(%!symbol);

[16:51] <lizmat> that also looks racey to me ?

[16:51] <lizmat> Ah, I guess not, as each thread would have its own QAST::Block object

[16:52] <nine> exactly

[16:58] <lizmat> grammar NQP::Grammar is HLL::Grammar {

[16:58] <lizmat>     my $sc_id := 0;

[16:58] <lizmat> nine:  ^^ another case?

[17:00] <lizmat> QAST::Node.unique also looks racey to me

[17:01] <lizmat> as does QAST::Node.dump_indent_string  although that may not be such an issue

[17:01] <lizmat> afk for a few hours&

[18:55] <lizmat> nine: feels like another race condition to me: https://github.com/Raku/nqp/blob/master/src/QRegex/P6Regex/Grammar.nqp#L118

[18:57] <lizmat> and https://github.com/Raku/nqp/blob/master/src/core/NQPRoutine.nqp#L558 also feels iffy ?

[19:45] <Geth> ¦ rakudo: a76e2b6e74 | (Elizabeth Mattijsen)++ | 2 files

[19:45] <Geth> ¦ rakudo: Add support for native slice assignment from native

[19:45] <Geth> ¦ rakudo: 

[19:45] <Geth> ¦ rakudo: Now that slices on native arrays return arrays of the same native

[19:45] <Geth> ¦ rakudo: type, it makes sense to optimize assigning those values to a native

[19:45] <Geth> ¦ rakudo: array.  This commit makes @a[1,2,3] = @b where @a and @b are of the

[19:45] <Geth> ¦ rakudo: same native type, 26x as fast.  And makes it 18x as fast if the

[19:45] <Geth> ¦ rakudo: receiving array is a native shaped array.

[19:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a76e2b6e74

[19:46] <lizmat> afk for a few hours&

[19:49] *** oddp left
[19:56] *** cog joined
[19:56] *** cognominal left
[20:00] <Geth> ¦ nqp: 440f20ae45 | Coke++ | t/docs/tests.t

[20:00] <Geth> ¦ nqp: make test runnable directly

[20:00] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/440f20ae45

[20:00] <Geth> ¦ nqp: 2d6c047a71 | Coke++ | docs/ops.markdown

[20:00] <Geth> ¦ nqp: avoid use of ( for scripts parsing docs

[20:00] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/2d6c047a71

[20:00] <Geth> ¦ nqp: 4fbce486e6 | Coke++ | t/docs/tests.t

[20:00] <Geth> ¦ nqp: Change test from nqp to raku

[20:00] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/4fbce486e6

[20:01] <[Coke]> ^^ that test needed some love; shows opcodes that are "tested" (or at least used in a source file) and make sure documented opcodes are tested, and vice versa.

[20:01] <[Coke]> 279 failures on that test, 181 on the 'are ops docced' test.

[20:10] <[Coke]> https://github.com/Raku/nqp/issues/274 - this test was fudged 4 years ago

[20:55] *** ggoebel_ left
[21:37] *** lucasb joined
[22:24] *** ggoebel_ joined
[22:29] *** ggoebel_ left
[22:51] <Geth> ¦ rakudo: 60fa48ec8f | (Elizabeth Mattijsen)++ | 3 files

[22:51] <Geth> ¦ rakudo: Don't do recent native array opts on JVM backend

[22:51] <Geth> ¦ rakudo: 

[22:51] <Geth> ¦ rakudo: It appears they cause problems in roast, and as they are purely for

[22:51] <Geth> ¦ rakudo: performance, they can be easily not compiled on the JVM backend.

[22:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/60fa48ec8f

[23:53] *** ggoebel_ joined
