[00:08] *** evalable6 left
[00:08] *** linkable6 left
[00:09] *** evalable6 joined
[00:09] *** linkable6 joined
[00:22] <gfldex> m: my $j := Mu.new & Int; say $j.?Int;

[00:22] <camelia> rakudo-moar ac84c1886: OUTPUT: «No such method 'Int' for invocant of type 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[00:23] <gfldex> Should that DWIM?

[00:23] <gfldex> m: my $j := Mu.new & Int; say $j.gist;

[00:23] <camelia> rakudo-moar ac84c1886: OUTPUT: «all(Mu.new, (Int))␤»

[01:02] *** lucasb left
[01:48] <Geth> ¦ rakudo/rakudo_4094: 7 commits pushed by (Vadim Belman)++

[01:48] <Geth> ¦ rakudo/rakudo_4094: 79d2aeab83 | Implement invocation protocol for roles

[01:48] <Geth> ¦ rakudo/rakudo_4094: 5a22a7c502 | Don't try coercion on Type() invocations

[01:48] <Geth> ¦ rakudo/rakudo_4094: 77a7bd2710 | Don't pass native strings to exception constructor

[01:48] <Geth> ¦ rakudo/rakudo_4094: 17223fc4bf | Use pun source for coercion when a role is invoked

[01:48] <Geth> ¦ rakudo/rakudo_4094: 4009f40160 | Use throw_or_die instead of P6EX symbol

[01:48] <Geth> ¦ rakudo/rakudo_4094: 538ad1b786 | Pun coercion target if it's a role

[01:48] <Geth> ¦ rakudo/rakudo_4094: c40fec788b | Merge branch 'rakudo_4094' of github.com:vrurg/rakudo into rakudo_4094

[01:48] <Geth> ¦ rakudo/rakudo_4094: review: https://github.com/rakudo/rakudo/compare/ac84c1886896...c40fec788baf

[02:03] *** ggoebel left
[02:04] *** ggoebel joined
[02:11] *** ggoebel left
[02:12] *** ggoebel joined
[02:22] *** finsternis joined
[02:22] *** leont left
[02:40] *** ggoebel left
[04:59] *** camelCaser left
[05:02] *** camelCaser joined
[05:55] *** frost-lab joined
[06:11] *** chansen_ left
[06:11] *** chansen_ joined
[06:37] *** squashable6 left
[06:40] *** squashable6 joined
[06:49] *** lizmat left
[06:50] *** lizmat joined
[07:41] *** domidumont joined
[08:13] *** sena_kun joined
[09:07] *** Altai-man joined
[09:10] *** sena_kun left
[09:22] <Altai-man> releasable6, status

[09:22] <releasable6> Altai-man, Next release in ≈9 days and ≈9 hours. 1 blocker. 0 out of 116 commits logged

[09:22] <releasable6> Altai-man, Details: https://gist.github.com/cef97f091d8efb99275b17a2cde046b9

[10:13] *** MasterDuke joined
[10:26] <nwc10> lizmat: offical report was more than fuel pressure dropped (ie the green was "engine rich combusion"). But I like this diagnosis better: https://old.reddit.com/r/SpaceXMasterrace/comments/ka4fzk/oh_no/

[10:26] <nwc10> (obviosuly you need to be aware of the "pointy end up; flamey end down" meme to make sense of it)

[10:34] <lizmat> yeah, RUD sucks

[11:13] *** evalable6 left
[11:13] *** linkable6 left
[11:14] *** linkable6 joined
[11:14] *** evalable6 joined
[11:37] *** ggoebel joined
[12:05] *** ggoebel left
[12:12] *** frost-lab left
[12:18] *** ggoebel joined
[12:18] *** ggoebel left
[12:39] *** MasterDuke left
[13:08] *** sena_kun joined
[13:10] *** Altai-man left
[13:28] <lizmat> m: my @a = ^5; @a[1,2] = Date.iterator; dd @a    # expected: [0,Date,Any,3,4]

[13:28] <camelia> rakudo-moar ac84c1886: OUTPUT: «Array @a = [0, Any, Any, 3, 4]␤»

[13:28] <lizmat> m: my @a = ^10; @a[1,2,3] = (1,2,3).iterator; dd @a   # similarly

[13:28] <camelia> rakudo-moar ac84c1886: OUTPUT: «Array @a = [0, Any, Any, Any, 4, 5, 6, 7, 8, 9]␤»

[13:29] <lizmat> it either should store the iterator, or run the iterator, not just store Nils

[13:29] <nwc10> lizmat: I thought that it was pretty impressive. Showed it to Andrea's mum, and she asked "and was there a large crater?" to which the answer is "no" because it was nearly perfect

[13:30] <nwc10> hit the target, and *slowoy*

[13:30] <nwc10> slowly.

[13:30] <lizmat> yeah, and there was hardly any fuel to burn, so it went out pretty quickly

[13:37] <lizmat> afk for a few hours&

[13:45] *** b2gills left
[13:45] *** b2gills joined
[13:52] *** leont joined
[14:12] *** MasterDuke joined
[14:43] *** morayj joined
[15:34] <Geth> ¦ rakudo: 392d8be20e | (Elizabeth Mattijsen)++ | src/core.c/array_slice.pm6

[15:34] <Geth> ¦ rakudo: Simplify and correctify binding an array slice

[15:34] <Geth> ¦ rakudo: 

[15:34] <Geth> ¦ rakudo: - additional values should also be bound, not assigned.

[15:34] <Geth> ¦ rakudo: - correctly handle positions in a container

[15:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/392d8be20e

[15:45] *** morayj left
[15:56] *** morayj joined
[16:28] <Geth> ¦ rakudo: 9dbb52f9ef | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[16:28] <Geth> ¦ rakudo: Make sure that Rakudo::Iterator.TailWith decontainerizes

[16:28] <Geth> ¦ rakudo: 

[16:28] <Geth> ¦ rakudo: To make it consistent between the values produced by the iterator,

[16:28] <Geth> ¦ rakudo: and the values that will be produced after that.

[16:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9dbb52f9ef

[16:34] <lizmat> m: my @a = ^10; @a[8..9,7] = 2..*; dd @a    # another oddity

[16:34] <camelia> rakudo-moar 392d8be20: OUTPUT: «Array @a = [0, 1, 2, 3, 4, 5, 6, 3, 2, Any]␤»

[17:07] *** Altai-man joined
[17:10] *** sena_kun left
[17:25] <lizmat> m: my @a; @a[*-1] = 42; dd @a   # another oddity ?

[17:25] <camelia> rakudo-moar 9dbb52f9e: OUTPUT: «Array @a = []␤»

[17:27] <lizmat> m: my @a; dd @a[*-1] = 42    # aaah, a Failure, but why doesn't that throw ?

[17:27] <camelia> rakudo-moar 9dbb52f9e: OUTPUT: «Failure.new(exception => X::OutOfRange.new(what => "Effective index", got => -1, range => "0..^Inf", comment => Any), backtrace => Backtrace.new)␤»

[17:53] *** patrickb joined
[18:14] *** morayj left
[18:57] *** domidumont left
[19:06] <Geth> ¦ rakudo/faster-slice-assignment: 0206c77395 | (Elizabeth Mattijsen)++ | 2 files

[19:06] <Geth> ¦ rakudo/faster-slice-assignment: Re-imagine basic slice assignment

[19:06] <Geth> ¦ rakudo/faster-slice-assignment: 

[19:06] <Geth> ¦ rakudo/faster-slice-assignment: - makes @a[1,2,3] = 4,5,6 about 7.5x as fast

[19:06] <Geth> ¦ rakudo/faster-slice-assignment: - breaks 2 spectests that assume handling lazy positions also means

[19:06] <Geth> ¦ rakudo/faster-slice-assignment:   that the result should be lazy.  The tests in t/spec/S32-list/seq

[19:06] <Geth> ¦ rakudo/faster-slice-assignment:   (23,25) are in fact marked as testing "experimental behaviour",

[19:06] <Geth> ¦ rakudo/faster-slice-assignment:   so one could argue that they can be changed.

[19:06] <Geth> ¦ rakudo/faster-slice-assignment: review: https://github.com/rakudo/rakudo/commit/0206c77395

[19:08] <Geth> ¦ rakudo: lizmat++ created pull request #4103: Re-imagine basic slice assignment

[19:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4103

[19:10] <lizmat> afk for a few hours&

[19:17] *** samcv left
[19:18] *** sivoais left
[19:19] *** samcv joined
[19:20] *** sivoais joined
[19:28] *** samcv_ joined
[19:30] *** samcv left
[19:59] *** [TuxCM] left
[20:05] *** [TuxCM] joined
[20:17] *** [Tux] left
[20:41] *** morayj joined
[21:08] *** sena_kun joined
[21:10] *** Altai-man left
[21:19] <Geth> ¦ rakudo/rakudo_4094: 9f98595c5b | (Vadim Belman)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[21:19] <Geth> ¦ rakudo/rakudo_4094: Don't try un-pun anything but classes

[21:19] <Geth> ¦ rakudo/rakudo_4094: 

[21:19] <Geth> ¦ rakudo/rakudo_4094: Fixes enum coercions like `Bool(True)`.

[21:19] <Geth> ¦ rakudo/rakudo_4094: review: https://github.com/rakudo/rakudo/commit/9f98595c5b

[21:19] <Geth> ¦ rakudo/rakudo_4094: dc8a51f121 | (Vadim Belman)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[21:19] <Geth> ¦ rakudo/rakudo_4094: Merge branch 'rakudo_4094' of github.com:vrurg/rakudo into rakudo_4094

[21:19] <Geth> ¦ rakudo/rakudo_4094: review: https://github.com/rakudo/rakudo/commit/dc8a51f121

[21:49] *** patrickb left
[22:13] *** morayj left
[22:31] *** lucasb joined
[22:43] *** sena_kun left
[23:08] *** gfldex left
[23:08] *** gfldex joined
[23:14] *** squashable6 left
[23:16] *** squashable6 joined
