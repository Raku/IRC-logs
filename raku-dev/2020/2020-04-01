[00:59] *** upupbb-user3 joined
[02:33] *** upupbb-user3 left
[02:46] *** Geth_ joined
[02:46] *** Geth left
[04:19] *** discord6 joined
[04:19] *** discord6 left
[04:19] *** discord6 joined
[04:21] *** discord6 left
[04:22] *** discord6 joined
[04:22] *** discord6 left
[04:22] *** discord6 joined
[04:56] *** upupbb-user3 joined
[05:27] *** upupbb-user3 left
[06:53] *** [Tux] left
[06:54] *** b2gills left
[07:02] *** b2gills joined
[07:02] *** upupbb-user3 joined
[07:05] *** [Tux] joined
[07:48] <lizmat> Files=1306, Tests=111227, 211 wallclock secs (28.93 usr  8.23 sys + 2973.79 cusr 268.25 csys = 3279.20 CPU)

[07:53] *** SOOP3RN3TZ joined
[07:53] <SOOP3RN3TZ> THIS CHANNEL HAS SMALL DICK ENERGY | ALL CHATTERS MUST QUARANTINE ON ɪʀᴄ.ꜱᴜᴩᴇʀɴᴇᴛꜱ.ᴏʀɢ #ꜱᴜᴩᴇʀʙᴏᴡʟ

[07:53] <SOOP3RN3TZ> █░█▀█░█▀▀░░░█▀░█░█░█▀█░█▀▀░█▀█░█▄░█░█▀▀░▀█▀░█▀░░░█▀█░█▀█░█▀▀

[07:53] <SOOP3RN3TZ> █░█▀▄░█░░░░░▀█░█░█░█▀▀░█▀▀░█▀▄░█▀▄█░█▀▀░░█░░▀█░░░█░█░█▀▄░█░▄▄

[07:53] <SOOP3RN3TZ> █░█░█░█▄▄░▄░▄█░█▄█░█░░░█▄▄░█░█░█░▀█░█▄▄░░█░░▄█░▄░█▄█░█░█░█▄█

[07:53] <SOOP3RN3TZ> RIDE OUT THIS TARANTINO FILM IN A BIG DICK NETWORK

[07:53] <SOOP3RN3TZ> OOP3RN3TZ [Tux] upupbb-user3 b2gills discord6 Geth_ MasterDuke dogbert17 Kaeipi maggotbrain squashable6 cognominal [TuxCM] unclechu AlexDaniel` quotable6 shareable6 nativecallable6 reportable6 tellable6 releasable6 committable6 notable6 statisfiable6 bloatable6 unicodable6 benchable6 bisectable6 greppable6 sourceable6 rypervenche linkable6 tbrowder Guest54471 literal tobs synthmeat lizmat pochi_ 

[07:53] *** SOOP3RN3TZ left
[07:58] *** sena_kun joined
[07:59] *** AlexDaniel joined
[08:00] *** AlexDaniel left
[08:00] *** AlexDaniel joined
[08:00] <AlexDaniel> hmmm

[08:01] <MasterDuke> huh. https://github.com/MasterDuke17/nqp/commit/68b1435aa134aab1e78904323291ab08feafef37 cause the nqp build to die with `Bytecode validation error at offset 262, instruction 41:operand type 32 does not match register type 160 for op coerce_iu in frame write_header`

[08:02] <nine> MasterDuke: that's the joy of working on the mbc stage: you get these incredibly useful error messages...

[08:02] <tellable6> 2020-03-31T22:27:21Z #raku-dev <tbrowder> nine when i say remote i mean via a terminal on my ipad accessing my laptop in another room while i'm lying in my easy chair :-/

[08:02] <AlexDaniel> if this happens again we'll have to invite Sigyn

[08:04] <MasterDuke> nine: i'm just not sure how that happens. i actually tested that on the command line, but maybe it's happening to early in nqp and the conversion isn't happening the same?

[08:06] *** Altai-man_ joined
[08:06] <MasterDuke> nqp: sub a($b) { nqp::mul_n($b, 1.3) }; say(a(2.3)); sub b($b) { my uint32 $c := nqp::mul_n($b, 1.3); $c }; say(b(2.3)); sub c($b) { my uint32 $c := nqp::mul_n($b, 1.3) }; say(c(2.3))

[08:06] <camelia> nqp-moarvm: OUTPUT: «2.9899999999999998␤2␤2␤»

[08:08] *** sena_kun left
[08:27] *** Geth joined
[08:28] *** Geth_ left
[08:28] <Geth> ¦ rakudo: 6541775c2e | (Elizabeth Mattijsen)++ | src/core.c/array_operators.pm6

[08:28] <Geth> ¦ rakudo: Make unshift(@a,foo) about 20x as fast

[08:28] <Geth> ¦ rakudo: 

[08:28] <Geth> ¦ rakudo: Part 3 of fixing R#3584

[08:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6541775c2e

[08:28] <linkable6> R#3584 [open]: https://github.com/rakudo/rakudo/issues/3584 sub push much slower than method push

[08:35] *** AlexDaniel left
[08:36] <lizmat> m: my @a = 1,2,3; use nqp; dd nqp::iscont(@a.shift); dd nqp::iscont(shift @a)   # these appear to be inconsistent

[08:36] <camelia> rakudo-moar 61b5e488e: OUTPUT: «1␤0␤»

[08:36] <lizmat> jnthn ^^

[08:37] <lizmat> m: my @a = 1,2,3; use nqp; dd my $b = @a.shift = 666   # does this even make sense ?

[08:37] <camelia> rakudo-moar 61b5e488e: OUTPUT: «Int $b = 666␤»

[08:38] <Geth> ¦ rakudo: 9b735b7699 | (Elizabeth Mattijsen)++ | src/core.c/array_operators.pm6

[08:38] <Geth> ¦ rakudo: Make prepend(@a,foo) about 20x as fast

[08:38] <Geth> ¦ rakudo: 

[08:38] <Geth> ¦ rakudo: Part 4 of fixing R#3584

[08:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9b735b7699

[08:38] <linkable6> R#3584 [open]: https://github.com/rakudo/rakudo/issues/3584 sub push much slower than method push

[08:39] <tyil> .

[08:39] <tellable6> 2020-03-31T22:18:37Z #raku-dev <lizmat> tyil looks like Geth is AWOL again

[08:40] <tyil> looks fixed to me

[08:40] <tyil> :>

[08:40] <lizmat> tyil++

[09:18] <lizmat> .ask jnthn is there some performance reason why Array.pop and Array.shift do not de-containerize ?

[09:18] <tellable6> lizmat, I'll pass your message to jnthn

[09:24] <timotimo> perhaps it's for when you've bound a scalar to the array

[09:24] <timotimo> so the container you're getting back from pop or shift is the same as whatever else you bound

[09:25] <MasterDuke> huh. for some reason heaptrack doesn't work when using the nqp binary

[09:28] *** ufobat joined
[09:29] <lizmat> timotimo: thing is, if I decont .pop / .shift, I get one TODO passing in roast

[09:29] <lizmat> also pop / shift as a sub decont

[09:33] <timotimo> ah interesting

[09:49] <jnthn> Interesting. I dunno if that's an accident or not, but I can kinda imagine `@queue-of-things-to-update.shift = 42` actually being written by somebody... :)

[09:49] <tellable6> 2020-04-01T09:18:52Z #raku-dev <lizmat> jnthn is there some performance reason why Array.pop and Array.shift do not de-containerize ?

[09:49] <jnthn> Or stack of things with pop

[09:49] <jnthn> I don't know there's so much a perf reason there, but it's arguably useful.

[09:49] <lizmat> jnthn: there is no test in roast for it

[09:49] <jnthn> Yes, but if that told us about all the usages then we'd not need blin ;)

[09:50] <lizmat> ok, so then the sub form of shift / pop should also not decont I guess

[09:50] <lizmat> and the TODO'd test in roast should be removed then, I guess

[09:51] <jnthn> I guess it's a bit inconsistent...

[10:01] <Geth> ¦ rakudo: 6793713b27 | (Elizabeth Mattijsen)++ | src/core.c/Array.pm6

[10:01] <Geth> ¦ rakudo: Failure handling of Array.pop/shift in private method

[10:01] <Geth> ¦ rakudo: 

[10:01] <Geth> ¦ rakudo: To reduce the footprint of Array.pop/shift themselves, to make them

[10:01] <Geth> ¦ rakudo: more likely targets for inlining.

[10:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6793713b27

[10:07] *** sena_kun joined
[10:09] *** Altai-man_ left
[10:11] <lizmat> jnthn: making sub pop / shift "is raw" breaks spectest: they expect to be deconted

[10:11] <lizmat> so in that light, I think it would be best to make them all decont and see what blin thinks about that ?

[10:17] <jnthn> Can try, I guess. There's not really much precedent for method/sub forms being distinctive in this way.

[10:18] *** AlexDaniel joined
[10:18] *** AlexDaniel left
[10:18] *** AlexDaniel joined
[10:18] <AlexDaniel> sourceable6: (1, 2, 3).append(42, 50)

[10:18] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/6793713/src/core.c/List.pm6#L1504

[10:19] <AlexDaniel> sourceable6: [1, 2, 3].append(42, 50)

[10:19] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/6793713/src/core.c/Array.pm6#L746

[10:19] <AlexDaniel> lizmat: I'm a bit surprised how well that works :D

[10:19] <AlexDaniel> sourceable6++ # underrated bot

[10:21] <lizmat> jnthn: if a routine is "is raw", it basically would not emit a decont() on the return value, right?

[10:21] *** MasterDuke left
[10:21] <lizmat> so if I make the method decont, then the sub could be "is raw" as it would always just obtain a deconted value anyway?

[10:26] <AlexDaniel> tellable6: Xliff

[10:26] <tellable6> AlexDaniel, I saw Xliff 2020-03-30T08:36:34Z in #raku-dev: <Xliff> [Tux]: How are those results, read? Is this current commit vs last commit?

[10:27] *** hungrydonkey joined
[10:28] <jnthn> lizmat: Yes

[10:28] <jnthn> lizmat: raw just passes on what it gets

[10:28] <lizmat> ok

[10:28] *** [TuxCM] left
[10:41] <Geth> ¦ rakudo: 2edce41bd2 | (Elizabeth Mattijsen)++ | 2 files

[10:41] <Geth> ¦ rakudo: Make pop/shift behaviour re deconting consistent

[10:41] <Geth> ¦ rakudo: 

[10:41] <Geth> ¦ rakudo: - Array.pop/shift now decont

[10:41] <Geth> ¦ rakudo: - sub pop/shift are now raw, as they don't need a decont check

[10:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2edce41bd2

[10:41] <Geth> ¦ roast: 66649d3dd6 | (Elizabeth Mattijsen)++ | S32-array/pop.t

[10:41] <Geth> ¦ roast: unTODO test now that Array.pop deconts

[10:41] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/66649d3dd6

[10:50] <Geth> ¦ roast: Kaiepi++ created pull request #631: Update tests WRT IO::Socket::INET bind before connect

[10:50] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/631

[11:00] *** upupbb-user3 left
[11:10] <Geth> ¦ rakudo: 4325972835 | (Elizabeth Mattijsen)++ | src/core.c/native_array.pm6

[11:10] <Geth> ¦ rakudo: Revert "Fix performance issue on native shaped arrays"

[11:10] <Geth> ¦ rakudo: 

[11:10] <Geth> ¦ rakudo: This reverts commit 80f2aebff482da6e67589d043b6888a8e3eb2128.

[11:10] <Geth> ¦ rakudo: 

[11:10] <Geth> ¦ rakudo: It appears that each *each* class of a certain type would get its own

[11:10] <Geth> ¦ rakudo: type (without caching), which is also a severe memory issue.  Fixes

[11:10] <Geth> ¦ rakudo: R#3586.  Re-opened R#3532.

[11:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4325972835

[11:10] <linkable6> R#3586 [open]: https://github.com/rakudo/rakudo/issues/3586 Native shaped array performance regression

[11:10] <linkable6> R#3532 [open]: https://github.com/rakudo/rakudo/issues/3532 [native types][performance][shaped] Looping sized native typed array is slow

[11:12] *** ufobat left
[11:12] *** ufobat joined
[11:23] *** MasterDuke joined
[11:24] <lizmat> m: my int32 @a[42]; dd @a.^name

[11:24] <camelia> rakudo-moar 2edce41bd: OUTPUT: «"array[int32]"␤»

[11:25] <lizmat> m: my int32 @a; dd @a.^name

[11:25] <camelia> rakudo-moar 2edce41bd: OUTPUT: «"array[int32]"␤»

[11:25] <lizmat> jnthn: you cannot see the difference between a native shaped array, and a normal native array

[11:26] <jnthn> Why'd you expect to? :)

[11:26] <jnthn> m: my @a; say @a.^name

[11:26] <camelia> rakudo-moar 2edce41bd: OUTPUT: «Array␤»

[11:26] <jnthn> m: my @a[42]; say @a.^name

[11:26] <camelia> rakudo-moar 2edce41bd: OUTPUT: «Array␤»

[11:27] <jnthn> Same there too

[11:27] <lizmat> I'd expect the shape to be part of it ?

[11:27] <jnthn> No

[11:27] <jnthn> m: my @a[42]; say @a.shape

[11:27] <camelia> rakudo-moar 2edce41bd: OUTPUT: «(42)␤»

[11:27] <jnthn> m: my int @a[42]; say @a.shape

[11:27] <camelia> rakudo-moar 2edce41bd: OUTPUT: «(42)␤»

[11:27] <jnthn> You find it like that.

[11:28] <lizmat> hmmm....

[11:28] <lizmat> m: my int @a[10]; my int @b[11]; dd @a.WHAT =:= @b.WHAT   # somehow I'd expect this to be false

[11:28] <camelia> rakudo-moar 2edce41bd: OUTPUT: «Bool::True␤»

[11:29] <lizmat> trying to find ways to fix R#3532

[11:29] <linkable6> R#3532 [open]: https://github.com/rakudo/rakudo/issues/3532 [native types][performance][shaped] Looping sized native typed array is slow

[11:30] <lizmat> 80f2aebff482da6e67589d turned out to not be the solution, as it apparently created a separate type for each native array instance

[11:30] <linkable6> (2020-03-20) https://github.com/rakudo/rakudo/commit/80f2aebff4 Fix performance issue on native shaped arrays

[11:47] *** [TuxCM] joined
[12:06] *** Altai-man_ joined
[12:08] *** sena_kun left
[12:37] *** hungrydonkey left
[12:57] *** Kaeipi is now known as Kaiepi

[13:05] <dogbert17> lizmat+++, you made short work of R#3584

[13:05] <linkable6> R#3584 [closed]: https://github.com/rakudo/rakudo/issues/3584 sub push much slower than method push

[13:06] <lizmat> yeah, since I caused the issue in the first place in July 2019  :-(

[13:06] <lizmat> what was I thinking?  :-)

[13:07] <dogbert17> we all make the occasional mistake :)

[13:14] <MasterDuke> bisect: good=478239e61 my @b; append @b, [0 xx 3], [1 xx 3]; say @b  # lizmat

[13:14] <bisectable6> MasterDuke, Bisecting by output (old=478239e new=4325972) because on both starting points the exit code is 0

[13:14] <bisectable6> MasterDuke, bisect log: https://gist.github.com/bd6a48a75b46e1265cc637c3b699aef7

[13:14] <bisectable6> MasterDuke, (2020-04-01) https://github.com/rakudo/rakudo/commit/b98d2e00e119b53261904031fecdb848c9041141

[13:17] <MasterDuke> seen by SqrtNegInf over in #whateverable

[13:18] <lizmat> MasterDuke: I guess we need more spectests  :-)

[13:19] <MasterDuke> can't argue with that

[13:23] <[Coke]> wow, quick catch.

[13:34] <Geth> ¦ rakudo: 1e4c736143 | (Elizabeth Mattijsen)++ | src/core.c/array_operators.pm6

[13:34] <Geth> ¦ rakudo: Fix regression in sub append/prepend

[13:34] <Geth> ¦ rakudo: 

[13:34] <Geth> ¦ rakudo: SqrtNegInf++ for spotting

[13:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1e4c736143

[13:46] <AlexDaniel> heh, I've been staring at that line thinking it can't be right

[13:46] <AlexDaniel> and then I got distracted by something else

[13:49] <Geth> ¦ rakudo: 2b49d685b3 | (Elizabeth Mattijsen)++ | src/core.c/IterationBuffer.pm6

[13:49] <Geth> ¦ rakudo: Give IterationBuffer its own iterator method

[13:49] <Geth> ¦ rakudo: 

[13:49] <Geth> ¦ rakudo: Since IterationBuffer is not an Iterable (on purpose), it was using

[13:49] <Geth> ¦ rakudo: the default iterator, which is basically useless for an IterationBuffer.

[13:49] <Geth> ¦ rakudo: This iterator will treat the IterationBuffer as a fully reified List.

[13:49] <Geth> ¦ rakudo: For work that is underway refactoring the ... sequence generator

[13:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2b49d685b3

[13:49] <lizmat> AlexDaniel: no spectest caught it  :-(

[13:49] <lizmat> *hint*  :-)

[13:49] * nine is looking forward to a sane sequence generator

[13:49] <AlexDaniel> nine: meaning?

[13:50] <AlexDaniel> lizmat: well, I wrote all this tooling so that even with no spectests we can quickly figure out what's wrong :P :P

[13:50] <nine> During the GLR that was the one thing that I gave up on right from the start because....oh that code!

[13:50] <lizmat> yeah... it's pretty ... old

[13:51] <lizmat> it predated the existence of iterators

[13:51] <nine> So I just patched it up a little but never did what lizmat is now doing - bringing it fully into the iterator world

[13:51] <AlexDaniel> ah, I just read the commit message :)

[13:51] <nine> so ++lizmat!

[13:54] *** vrurg_ joined
[13:55] <lizmat> I'll also be implementing ^... and ^...^

[13:57] *** vrurg left
[13:58] *** vrurg joined
[14:00] <AlexDaniel> lizmat: oh no :)

[14:00] <jnthn> .oO( 3 eyed cat )

[14:01] <AlexDaniel> I mean, as a feature it probably makes sense, but I remember all the bugs in ^..

[14:01] <lizmat> well, ^... will just call ... but skip the first value produced

[14:01] <lizmat> and ^...^ will skip the first and last value

[14:01] *** vrurg_ left
[14:02] <AlexDaniel> lizmat: any chance of .reverse breaking some sort of hacks? :)

[14:02] <AlexDaniel> btw this is funny, I didn't know you can leave whitespace out:

[14:02] <Geth> ¦ rakudo: 77defa770e | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[14:02] <Geth> ¦ rakudo: Add R:It.AllButLast iterator

[14:02] <Geth> ¦ rakudo: 

[14:02] <Geth> ¦ rakudo: Produce all values of a given iterator, except the last value.

[14:02] <Geth> ¦ rakudo: For work that is underway refactoring the ... sequence generator

[14:02] <AlexDaniel> m: say 5....1

[14:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/77defa770e

[14:02] <camelia> rakudo-moar 1e4c73614: OUTPUT: «(5 4 3 2 1)␤»

[14:03] <lizmat> m: say 5...^1

[14:03] <camelia> rakudo-moar 1e4c73614: OUTPUT: «(5 4 3 2)␤»

[14:03] <lizmat> m: say 5^...1

[14:03] <camelia> rakudo-moar 1e4c73614: OUTPUT: «5^..0.1␤»

[14:03] <lizmat> m: dd 5^...1

[14:03] <camelia> rakudo-moar 1e4c73614: OUTPUT: «5^..0.1␤»

[14:03] <lizmat> m: dd 5 ^... 1

[14:03] <camelia> rakudo-moar 1e4c73614: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of . to concatenate strings; in Raku please use ~␤at <tmp>:1␤------> 3dd 5 ^...7⏏5 1␤»

[14:03] <AlexDaniel> m: dd 5 ^.. .1

[14:03] <camelia> rakudo-moar 1e4c73614: OUTPUT: «5^..0.1␤»

[14:03] <AlexDaniel> ;)

[14:07] *** sena_kun joined
[14:08] *** Altai-man_ left
[14:25] *** [Tux] left
[14:27] *** lucasb joined
[14:38] *** [Tux] joined
[14:49] *** SqrtNegInf joined
[14:52] <SqrtNegInf> Thanks MasterDuke++ for bringing the issue over here, meant to, but got distracted...

[14:53] <SqrtNegInf> It's all in the automation:  1,111 Rosettacode tasks being smoke-tested daily, and yesterday exactly 1 flagged the issue with 'append'.  Cast a wide net, and you catch stuff.

[14:53] <MasterDuke> SqrtNegInf++

[14:54] <AlexDaniel> SqrtNegInf: you do that??

[14:54] <AlexDaniel> I remember there was a discussion but I didn't know somebody is actively testing rosettacode solutions

[14:54] <AlexDaniel> SqrtNegInf++

[14:54] <SqrtNegInf> https://github.com/SqrtNegInf/Rosettacode-Perl6-Smoke

[14:56] <[Coke]> If there's a repo for that, can probably remov thec examples from the spectest repo.

[14:56] <[Coke]> *remove the 2 or 3...

[14:57] *** SqrtNegInf left
[14:58] *** SqrtNegInf joined
[15:05] *** ufobat left
[15:05] *** ufobat joined
[15:20] *** ufobat left
[15:21] *** ufobat joined
[15:23] *** ufobat_ joined
[15:27] *** SqrtNegInf left
[15:27] *** ufobat left
[15:32] *** Kaiepi left
[15:34] *** Kaiepi joined
[15:38] *** hungrydonkey joined
[16:02] <Geth> ¦ problem-solving: chloekek assigned to samcv Issue printf padding and wide East Asian characters https://github.com/Raku/problem-solving/issues/171

[16:06] *** Altai-man_ joined
[16:09] *** sena_kun left
[16:22] *** Kaiepi left
[16:27] <Geth> ¦ rakudo: bd4e119df1 | (Elizabeth Mattijsen)++ | src/core.c/operators.pm6

[16:27] <Geth> ¦ rakudo: Turn infix:<…> / infix:<…^> into aliases

[16:27] <Geth> ¦ rakudo: 

[16:27] <Geth> ¦ rakudo: There's no need for them to be full-blown subs that just pass on.

[16:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bd4e119df1

[16:27] <Geth> ¦ rakudo: d0e427dcda | (Elizabeth Mattijsen)++ | src/core.c/precedence.pm6

[16:27] <Geth> ¦ rakudo: Set precedence of ...^ … …^

[16:27] <Geth> ¦ rakudo: 

[16:27] <Geth> ¦ rakudo: These appeared to not have been set before.

[16:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d0e427dcda

[16:30] *** Kaiepi joined
[16:32] <Kaiepi> i can't push atm because dns is screwed, but you're right lizmat, not boxing the return values of Capture.raku and .Str make them around 10% faster

[16:32] <tellable6> 2020-03-31T20:58:17Z #raku-dev <dogbert17> Kaiepi: thx, didn't know that

[16:33] <Kaiepi> oh there we go

[16:33] <Geth> ¦ nqp: 57a4d5eacb | (Jonathan Worthington)++ | tools/templates/MOAR_REVISION

[16:33] <Geth> ¦ nqp: Bump to a MoarVM with new container spec type

[16:33] <Geth> ¦ nqp: 

[16:33] <Geth> ¦ nqp: It now offers a built-in alternative to the Rakudo Scalar one that

[16:33] <Geth> ¦ nqp: Rakudo currently uses.

[16:33] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/57a4d5eacb

[16:34] <Geth> ¦ rakudo: d6298edc59 | (Ben Davies)++ | src/core.c/Capture.pm6

[16:34] <Geth> ¦ rakudo: Don't box strings returned by Capture.Str and .raku

[16:34] <Geth> ¦ rakudo: 

[16:34] <Geth> ¦ rakudo: This makes these methods around 10% faster.

[16:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d6298edc59

[16:41] <Geth> ¦ rakudo: 4221f8225f | (Jonathan Worthington)++ | 9 files

[16:41] <Geth> ¦ rakudo: Adopt MoarVM-provided value_desc_cont

[16:41] <Geth> ¦ rakudo: 

[16:41] <Geth> ¦ rakudo: This gets rid of the Rakudo Scalar container descriptor, which was a big

[16:41] <Geth> ¦ rakudo: chunk of the extops library (which we're gradually aiming to get rid

[16:41] <Geth> ¦ rakudo: of). It also removes an assumption on P6opaque and Scalar layout, which

[16:41] <Geth> ¦ rakudo: makes things a bit more robust. Curiously, on a benchmark I did to check

[16:41] <Geth> ¦ rakudo: the consequence of this, it seems that we may also gain a little speed

[16:41] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[16:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4221f8225f

[16:41] <jnthn> 11 insertions(+), 238 deletions(-) 

[16:42] <jnthn> Most of which was C code in the extops lib. Now we've only 420 lines left of it.

[16:43] <MasterDuke> heh, and looks like maybe that'll get rid of that last leak with --full-cleanup

[16:44] <jnthn> Oh, bonus :)

[16:44] <MasterDuke> jnthn: speaking of, have you seen https://github.com/MoarVM/MoarVM/pull/1263 ?

[16:44] <MasterDuke> actually, that's required to get rid of them all

[16:44] <jnthn> Ah, forgot to review that 

[16:44] <jnthn> Let me check something...

[16:46] <jnthn> Yeah, it all fits. Merged.

[16:50] <nine> \o/

[16:50] <jnthn> Getting rid of the dispatcher stuff in the extops will get rid of a good chunk more

[16:51] <jnthn> (of the extops code, not of the leaks...)

[16:52] <[Coke]> jnthn++

[16:55] <jnthn> Unifying the various dispatchy trees will be...interesting.

[16:56] <jnthn> (This was a yak shave when to doing that...)

[17:10] *** travis-ci joined
[17:10] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Give IterationBuffer its own iterator method

[17:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/669711890 https://github.com/rakudo/rakudo/compare/1e4c7361431a...2b49d685b337

[17:10] *** travis-ci left
[17:15] <MasterDuke> oops, the container spec leak wasn't actually touched by that

[17:54] *** travis-ci joined
[17:54] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Add R:It.AllButLast iterator

[17:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/669716841 https://github.com/rakudo/rakudo/compare/2b49d685b337...77defa770e13

[17:54] *** travis-ci left
[18:00] <Geth> ¦ rakudo: 0b414c0a0f | (Elizabeth Mattijsen)++ | src/core.c/precedence.pm6

[18:00] <Geth> ¦ rakudo: Remove superfluous precedence settings for aliases

[18:00] <Geth> ¦ rakudo: 

[18:00] <Geth> ¦ rakudo: The operators (usually Unicode versions) that are aliases of the

[18:00] <Geth> ¦ rakudo: real thing, don't need there precedence set (again) as the source

[18:00] <Geth> ¦ rakudo: of the alias already has them applied.

[18:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0b414c0a0f

[18:02] *** hungrydonkey left
[18:07] *** sena_kun joined
[18:09] *** Altai-man_ left
[19:11] <Geth> ¦ rakudo: 88a9a36efa | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[19:11] <Geth> ¦ rakudo: Make R:It.AllButLast actually work correctly

[19:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/88a9a36efa

[19:17] <dogbert17> m: 1, 11 Z... 4, 14

[19:17] <camelia> rakudo-moar 0b414c0a0: ( no output )

[19:17] <dogbert17> m: dd 1, 11 Z... 4, 14

[19:17] <camelia> rakudo-moar 0b414c0a0: OUTPUT: «((1, 4).Seq, (11, 14).Seq).Seq␤»

[19:29] *** upupbb-user1 joined
[19:52] <Geth> ¦ rakudo: 4fe18a48ea | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[19:52] <Geth> ¦ rakudo: Added R:It.AllButFirst

[19:52] <Geth> ¦ rakudo: 

[19:52] <Geth> ¦ rakudo: Returns an iterator that produces all but the first value

[19:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4fe18a48ea

[19:52] <Geth> ¦ rakudo: 371590fa16 | (Elizabeth Mattijsen)++ | 10 files

[19:52] <Geth> ¦ rakudo: Introduce ^... and ^...^ sequence generator operators

[19:52] <Geth> ¦ rakudo: 

[19:52] <Geth> ¦ rakudo: The ... and ...^ already existed, but ^... and ^...^ were curiously

[19:52] <Geth> ¦ rakudo: missing.  Please note that you can also use these operators with an

[19:52] <Geth> ¦ rakudo: array on the left hand side:

[19:52] <Geth> ¦ rakudo: 

[19:52] <Geth> ¦ rakudo:     my @a = 1,2,4;

[19:52] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[19:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/371590fa16

[20:00] *** upupbb-user1 left
[20:00] *** MasterDuke left
[20:06] *** Altai-man_ joined
[20:07] *** MasterDuke joined
[20:08] <MasterDuke> huh. just now realized you can't open a file :rw in nqp, only :r or :w

[20:09] *** sena_kun left
[20:13] <MasterDuke> oh wait, '+' is :rw

[20:15] <Geth> ¦ rakudo: aa5154e027 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[20:15] <Geth> ¦ rakudo: Make R:It.AllButLast handle PredictiveIterators correctly

[20:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aa5154e027

[20:15] *** travis-ci joined
[20:15] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Set precedence of ...^ … …^

[20:15] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/669778983 https://github.com/rakudo/rakudo/compare/77defa770e13...d0e427dcda3d

[20:15] *** travis-ci left
[20:16] <lizmat> hmmmm... "Stage optimize   : Segmentation fault (core dumped)"

[20:16] <lizmat> I'm *not* seeing that locally

[20:16] <lizmat> also: Variable "$self" will not stay shared at (re_eval 13) line 1.

[20:16] <lizmat> 1094Variable "$last_text" will not stay shared at (re_eval 13) line 1.

[20:17] <lizmat> that feels like Perl error messages...  could it be some recently introduced build issue ?

[20:19] <Altai-man_> ugh, is it the same segfault or a new one...

[20:20] <lizmat> not sure...

[20:20] * lizmat is tired and gets an early night&

[20:20] <lizmat> all in place for writing a lot of tests tomorrow

[20:21] <Altai-man_> lizmat, good night!

[21:03] *** travis-ci joined
[21:03] <travis-ci> Rakudo build failed. Ben Davies 'Don't box strings returned by Capture.Str and .raku

[21:03] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/669782042 https://github.com/rakudo/rakudo/compare/d0e427dcda3d...d6298edc59fd

[21:03] *** travis-ci left
[21:19] *** MasterDuke left
[21:31] *** MasterDuke joined
[22:07] *** sena_kun joined
[22:08] *** Altai-man_ left
[22:15] *** squashable6 left
[22:16] *** squashable6 joined
[22:20] <jjatria> tyil: How does this look for an initial stab at a docker building action for rstar? https://gitlab.com/jjatria/rstar/-/commit/71b80f4e

[22:33] *** travis-ci joined
[22:33] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Remove superfluous precedence settings for aliases

[22:33] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/669817539 https://github.com/rakudo/rakudo/compare/4221f8225fea...0b414c0a0fd5

[22:33] *** travis-ci left
[22:54] *** travis-ci joined
[22:54] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make R:It.AllButLast actually work correctly'

[22:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/669845520 https://github.com/rakudo/rakudo/compare/0b414c0a0fd5...88a9a36efa6b

[22:54] *** travis-ci left
[23:16] *** sena_kun left
[23:24] *** travis-ci joined
[23:24] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Introduce ^... and ^...^ sequence generator operators

[23:24] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/669859861 https://github.com/rakudo/rakudo/compare/88a9a36efa6b...371590fa1693

[23:24] *** travis-ci left
[23:53] *** travis-ci joined
[23:53] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make R:It.AllButLast handle PredictiveIterators correctly'

[23:53] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/669867234 https://github.com/rakudo/rakudo/compare/371590fa1693...aa5154e02783

[23:53] *** travis-ci left
