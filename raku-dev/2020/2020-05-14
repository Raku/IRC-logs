[00:14] *** travis-ci joined
[00:14] <travis-ci> Rakudo build failed. Tom Browder 'Tweak error message'

[00:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/686791219 https://github.com/rakudo/rakudo/compare/17bf5d5f80d7...d9defb6c0814

[00:14] *** travis-ci left
[01:22] *** dogbert17 left
[02:10] *** squashable6 left
[02:11] *** squashable6 joined
[02:11] *** squashable6 left
[02:13] *** squashable6 joined
[02:43] *** travis-ci joined
[02:43] <travis-ci> Rakudo build failed. Tom Browder 'Tweak error message'

[02:43] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/686791219 https://github.com/rakudo/rakudo/compare/17bf5d5f80d7...d9defb6c0814

[02:43] *** travis-ci left
[04:12] *** donaldh_ joined
[04:12] *** donaldh left
[06:17] *** squashable6 left
[06:19] *** squashable6 joined
[06:39] *** patrickb joined
[06:41] <patrickb> .tell rba https://dev.azure.com/Raku Is now officialy ours. :-) The Microsoft support team was really helpful here.

[06:41] <tellable6> patrickb, I'll pass your message to rba

[06:44] <rba> patrickb: Very cool may you invite me? I will send you the mail as pm.

[06:44] <tellable6> 2020-05-13T12:08:08Z #raku-dev <patrickb> rba Prebuilt releases of rakudo for 2020.05.1 are available for download from https://rooster.uber.space/patcloud/index.php/s/qmkreEJLQDZcjbf (as always). Can you upload to rakudo.org? Thank you!

[06:55] *** patrickb left
[07:45] *** Geth left
[07:47] *** tyil left
[07:49] *** Geth joined
[07:50] *** tyilanmenyn joined
[08:12] *** tyilanmenyn is now known as tyil

[08:14] *** jjmerelo joined
[08:14] <jjmerelo> Morning

[08:27] <MasterDuke> m: class A {}; say A.^^mro; # heh, guess i'm a little too used to git, i typed this expecting it to do `A.HOW.^mro`

[08:27] <camelia> rakudo-moar d9defb6c0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed postfix call‚ê§at <tmp>:1‚ê§------> 3class A {}; say A.^7‚èè5^mro; # heh, guess i'm a little too used‚ê§¬ª

[08:43] *** Altai-man_ joined
[08:45] <lizmat> Files=1306, Tests=111291, 213 wallclock secs (28.78 usr  8.32 sys + 3003.05 cusr 273.50 csys = 3313.65 CPU)

[09:13] *** jjmerelo left
[09:41] *** jjmerelo joined
[09:56] <lizmat> m: my @a; @a.push for ^100000; say now - INIT now    # doing nothing  about 8x as slow

[09:56] <camelia> rakudo-moar d9defb6c0: OUTPUT: ¬´0.1970097‚ê§¬ª

[09:56] <lizmat> m: my @a; @a.push($a) for ^100000; say now - INIT now    # as doing something

[09:56] <camelia> rakudo-moar d9defb6c0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared. Did you mean '@a'?‚ê§at <tmp>:1‚ê§------> 3my @a; @a.push(7‚èè5$a) for ^100000; say now - INIT now    #‚ê§¬ª

[09:57] <lizmat> m: my @a; @a.push(42) for ^100000; say now - INIT now    # as doing something

[09:57] <camelia> rakudo-moar d9defb6c0: OUTPUT: ¬´0.0403243‚ê§¬ª

[09:57] <jnthn> Probably 'cus it hits the slurpy candidate, no? :)

[09:57] <lizmat> ok, maybe about 5x as slow then  :-)

[09:57] <lizmat> yeah, I guess...

[09:58] <lizmat> but shouldn't the slurpy candidate not be faster seeing as it has nothing to do

[09:58] <jnthn> It has to allocate and populate (ultimately from nothing) the slurpy aggregate

[09:58] <lizmat> m: my @a; my @b; @a.append(@b) for ^100000; say now - INIT now 

[09:58] <camelia> rakudo-moar d9defb6c0: OUTPUT: ¬´0.0979625‚ê§¬ª

[09:58] <lizmat> m: my @a; my @b = 42; @a.append(@b) for ^100000; say now - INIT now 

[09:58] <camelia> rakudo-moar d9defb6c0: OUTPUT: ¬´0.1305966‚ê§¬ª

[09:59] <lizmat> yeah, I guess...  :-)

[09:59] <jnthn> Look at a profile, I guess...maybe there's some obvious speedup there

[09:59] <lizmat> yeah, will do

[09:59] <jnthn> But I suspect it's making an iterator over that empty thing too

[09:59] <jnthn> I know there's an empty iterator, dunno if it's used in all such cases 

[10:00] *** jjmerelo left
[10:09] <Geth> ¬¶ rakudo: 2aac854fc4 | (Elizabeth Mattijsen)++ | t/05-messages/02-errors.t

[10:09] <Geth> ¬¶ rakudo: Adapt test for adapted sprintf error message

[10:09] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/2aac854fc4

[10:13] *** MasterDuke left
[10:14] <Geth> ¬¶ rakudo: tbrowder++ created pull request #3692: Correct test for error msg change

[10:14] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3692

[10:17] <tbrowder>  you beat me to it--i will not do a web edit again--sorry :-(

[10:26] *** sena_kun joined
[10:27] *** Altai-man_ left
[10:29] *** MasterDuke joined
[10:29] <lizmat> tbrowder: no, I should have waited a bit longer  :-)

[10:37] *** jjmerelo joined
[10:41] *** MasterDuke left
[11:00] *** jjmerelo left
[11:08] *** japhb left
[11:40] *** jjmerelo joined
[11:41] <Geth> ¬¶ rakudo: b50fd8b5ca | (Elizabeth Mattijsen)++ | src/core.c/Array.pm6

[11:41] <Geth> ¬¶ rakudo: Streamline ArrayReificationTarget a bit

[11:41] <Geth> ¬¶ rakudo: 

[11:41] <Geth> ¬¶ rakudo: - don't iterate over appending buffer, but shift out of it

[11:41] <Geth> ¬¶ rakudo: - lose some nqp::stmts for readability

[11:41] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/b50fd8b5ca

[11:55] *** AlexDaniel joined
[11:56] *** AlexDaniel left
[11:56] *** AlexDaniel joined
[11:59] *** AlexDaniel left
[12:05] *** MasterDuke joined
[12:09] <Geth> ¬¶ problem-solving: 375ac6c116 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[12:09] <Geth> ¬¶ problem-solving: Change default assignees

[12:09] <Geth> ¬¶ problem-solving: review: https://github.com/Raku/problem-solving/commit/375ac6c116

[12:25] *** Altai-man_ joined
[12:27] *** sena_kun left
[12:49] *** jjmerelo left
[13:44] <[Coke]> I have a MS account if someone wants to invite me to https://dev.azure.com/Raku

[13:57] <[Coke]> trying to track down the cro abort trap. build a debug-enabled MoarVM. if I try to attach after I fire off the cro command, I get a gdb error, type "continue", then when cro aborts, gdb shows "exited normally". if I try to run cro through perl6-gdb-m, It seems to just hang.

[13:57] <[Coke]> Any other suggestions on how to debug? (on OS X)

[14:00] <[Coke]> lizmat: are you able to use cro on OS X?

[14:00] <timotimo> on linux i'd say "run execsnoop against it to see which one is the one that borks" but that's ... linux

[14:01] <lizmat> [Coke]: yes, well, it's been a while, but a $project I worked on used Cro, and it worked fine on my MBP

[14:03] <[Coke]> can you try an updated rakudo/cro and do a 'cro stub app app' at some point? I assume it's just me, but...

[14:03] <[Coke]> I used it many moons ago, also

[14:05] <lizmat> [Coke]: will try

[14:06] <Geth> ¬¶ rakudo: 65e17c40ef | (Elizabeth Mattijsen)++ | src/core.c/Array.pm6

[14:06] <Geth> ¬¶ rakudo: Mark two helper methods as private

[14:06] <Geth> ¬¶ rakudo: 

[14:06] <Geth> ¬¶ rakudo: No idea why there were not private before.  Might help a bit in

[14:06] <Geth> ¬¶ rakudo: performance.

[14:06] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/65e17c40ef

[14:07] <[Coke]> lizmat++ thank you.

[14:26] *** sena_kun joined
[14:26] <[Coke]> figured I'd do a spectest in this rakudo to see if I get the same issue on something smaller than cro. it tells me inline:p5 isn't installed, tests won't be run. run the command it gives me. rerun spec test. still tells me I:P5 isn't installed.

[14:28] *** Altai-man_ left
[14:29] *** Kaiepi joined
[14:34] <nine> [Coke]: try ./perl6-m -Ilib -e 'use Inline::Perl5'

[14:34] <nine> should tell you what's wrong

[14:37] <lizmat> [Coke]: are you on HEAD?   there was an issue a few days ago with dependencies not being recorded correctly

[14:37] <[Coke]> lizmat: it's recent...

[14:37] <lizmat> if it's more than 2 days old, you might have that issue

[14:38] <lizmat> b71cb3ae7c79ea5e9

[14:38] <linkable6> (2020-05-12) https://github.com/rakudo/rakudo/commit/b71cb3ae7c Fix main-version.nqp dependencies

[14:42] <lizmat> m: dd $*OUT.eof, $*OUT.EOF   # why do we have both?

[14:42] <camelia> rakudo-moar 65e17c40e: OUTPUT: ¬´Bool::False‚ê§0‚ê§¬ª

[14:43] <lizmat> perhaps EOF should be a private method ?

[14:45] <[Coke]> lizmat: 5561669b3

[14:47] <nine> [Coke]: so get yourself a less ancient rakudo ;)

[14:48] <[Coke]> btw, did get some spectest failures: https://gist.github.com/coke/ea11adcb1fdcba503c6052b90d36aca8

[14:48] <[Coke]> rebuilding...

[15:11] <lizmat> afk for a few hours&

[15:12] *** jjmerelo joined
[15:23] <nine> No joy trying to reproduce my BEGIN time EVAL issue in a reduced test case so far but....it's not that difficult to provoke other errors

[15:26] <nine> Ooooh....it's not even a different issue after all. The "chars requires a concrete string, but got null" just happens when trying to report the "missing static code ref for closure"

[15:30] <MasterDuke> ha

[15:30] <nine> So, it really looks like a nested compilation at BEGIN time makes us lose static code refs for closures of the outer compilation unit

[15:33] <nine> Shortest golf now: use NativeCall; sub abort() is native(Str) { !!! }; BEGIN EVAL '';

[15:33] <nine> Precompile that and: Serialization Error: missing static code ref for closure 'abort' (:1)

[15:34] <[Coke]> the rebuild has no impact on my cro error.

[15:35] <[Coke]> also no impact on my zef/inline p5 issue. make spectest says it's not installed. zef says it is.

[15:42] <nine> And ./perl6-m -Ilib -e 'use Inline::Perl5'?

[15:43] *** patrickb joined
[15:44] <patrickb> .tell rba Prebuilt releases of rakudo for 2020.05.1 are available for download from https://rooster.uber.space/patcloud/index.php/s/qmkreEJLQDZcjbf (as always). Can you upload to rakudo.org? Thank you!

[15:44] <tellable6> patrickb, I'll pass your message to rba

[15:46] <MasterDuke> nine: fwiw i have the same problem as [Coke] with I::P5 and that give me `===SORRY!=== Error while compiling -eCould not find Inline::Perl5 in: <...>`

[15:50] <[Coke]> nine: ./perl6-m dies with:

[15:51] <[Coke]> Unhandled exception: While looking for '.../sandbox/rakudo/perl6.moarvm': no such file or directory

[15:51] <[Coke]> (that path edited to remove HOMEDIR)

[15:51] <[Coke]> I'm doing a build in that dir and installing to ~/p6

[15:52] <nine> And ./rakudo-m?

[15:52] <[Coke]> can't find I::p5

[15:54] <[Coke]> the suggested install command is to .../sandbox/rakudo/t/../gen/build_rakudo_home/site

[15:58] * [Coke] opened https://github.com/croservices/cro/issues/120, even though I'm pretty sure it's not a cro issue. (this way if someone else trips over it, they'll see it in the repo)

[16:25] *** Altai-man_ joined
[16:27] *** sena_kun left
[16:48] *** jjmerelo left
[16:52] *** Altai-man_ left
[16:56] *** MasterDuke left
[17:08] *** MasterDuke joined
[17:16] *** sena_kun joined
[17:27] *** japhb joined
[17:27] <tbrowder> i'm rummaging around Rakudo::Internals and see a list of leap second and the last date listed is in 2016. does that sound right?

[17:29] <[Coke]> tbrowder: yes.

[17:29] <[Coke]> https://en.wikipedia.org/wiki/Leap_second - table shows the last one added in 2016

[17:29] <tbrowder> thnx, just see that

[17:58] *** jjmerelo joined
[18:17] <lizmat> [Coke]: what about 5561669b3 ?

[18:17] <linkable6> (2020-05-12) https://github.com/rakudo/rakudo/commit/5561669b3f Streamline variable "is" / "of" handling

[18:21] <[Coke]> lizmat: that was the sha I was on. I've already updated to a commit from earlier today, no impact.

[18:21] <lizmat> :-(   am in the middle of debuggnig something, will try in half an hour or so

[18:21] <[Coke]> no rush or worries

[18:25] *** Altai-man_ joined
[18:27] *** jjmerelo left
[18:27] *** sena_kun left
[18:36] <nine> Huh...maybe it's not so much that the outer compilation unit is losing a static code ref for a closure and more like somehow the BEGIN time EVAL is causing it to need one where it wouldn't otherwise.

[18:36] <[Coke]> nine: is that on my bug?

[18:37] <nine> Dumping the QAST in compile_in_context gives the surprising result of the BEGIN time EVAL somehow causing the complete outer unit to be called in compile_in_context

[18:37] <nine> [Coke]: no, that's an issue I've been working on for a couple of days

[18:38] <[Coke]> cool.

[18:40] *** Kaiepi left
[18:40] *** Kaiepi joined
[18:41] *** Kaiepi left
[18:47] <Geth> ¬¶ rakudo: 61046d7695 | (Elizabeth Mattijsen)++ | src/core.c/IO/Handle.pm6

[18:47] <Geth> ¬¶ rakudo: Add IO::Handle.do-not-close-automatically and some reorganization

[18:47] <Geth> ¬¶ rakudo: 

[18:47] <Geth> ¬¶ rakudo: - Add .do-not-close-automatically method

[18:47] <Geth> ¬¶ rakudo:   This marks the IO::Handle not being closed by Raku automatically

[18:47] <Geth> ¬¶ rakudo:   either by having DESTROY called on it, or on process exit.

[18:47] <Geth> ¬¶ rakudo:   Returns a Bool indicating success of marking.

[18:47] <Geth> ¬¶ rakudo: - Add !close method

[18:47] <Geth> ¬¶ rakudo:   This now handles all logic around closing of an IO::Handle, which

[18:47] <Geth> ¬¶ rakudo:   centralizes some logic that was spread around before.

[18:47] <Geth> ¬¶ rakudo: - Rewrite some internal methods to be more readable

[18:47] <Geth> ¬¶ rakudo: - Add non-MoarVM versions of do-not-close-automatically and !close

[18:47] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/61046d7695

[18:47] <lizmat> Argh, forgot to mention https://github.com/rakudo/rakudo/pull/3690

[18:59] *** Kaiepi joined
[19:13] *** finsternis left
[19:14] *** donaldh joined
[19:15] *** donaldh_ left
[19:28] <[Tux]> Rakudo version 2020.05.1-104-g65e17c40e - MoarVM version 2020.05-12-g3605efdbf

[19:28] <[Tux]> csv-test-xs-20      0.379 -  0.389

[19:28] <[Tux]> test-t --race       0.828 -  0.918

[19:28] <[Tux]> csv-ip5xs           0.820 -  0.832

[19:28] <[Tux]> test-t              1.868 -  1.872

[19:28] <[Tux]> test                7.354 -  7.615

[19:28] <[Tux]> csv-ip5xs-20        8.229 -  8.229

[19:28] <[Tux]> test-t-20 --race    9.032 -  9.389

[19:28] <[Tux]> csv-parser         25.425 - 28.137

[19:28] <[Tux]> test-t-20          31.561 - 32.496

[19:29] <[Tux]> Note: I plan to replace my HDD with an SSD this weekend. If I succeed, the timings might change (a lot)

[20:05] *** donaldh left
[20:05] *** donaldh_ joined
[20:10] <moritz> and if it doesn't succeed, we won't hear from you for several days? :D

[20:25] *** sena_kun joined
[20:27] *** Altai-man_ left
[20:49] <nine> I think, I'm hot on the trail...

[20:51] <nine> I managed to get a full backtrace of the superfluous call to the outer unit and it seems to originate at https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L1298

[20:53] <lizmat> intrigiung

[20:53] <nine> Looks like $*UNIT is the outer unit there, not the EVAL's

[20:54] <lizmat> doesn't EVAL set its own $*UNIT ?

[20:54] <nine> It's set in the grammar in token comp_unit

[20:55] <lizmat> m: slurp "ten","twenty"

[20:55] <camelia> rakudo-moar 61046d769: OUTPUT: ¬´Too many positionals passed; expected 1 argument but got 2‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:55] <lizmat> so I want to change this to make it a compile time error

[20:55] <lizmat> https://gist.github.com/lizmat/943e0da61d84cff6a61ab8d159729594

[20:56] <lizmat> but this causes a test failure because there is some issue with the candidates

[20:56] <lizmat> but I'm not seeing it

[20:58] <nine> Oooooh!

[20:58] <nine> Of course!

[21:00] <nine> Thing is, $*UNIT is declared in the grammar. It starts to parse. It encounters the BEGIN block. The BEGIN block does an EVAL which fires up another compiler which writes to $*UNIT, so when the outer compiler's comp_unit action gets called, there's already a value there

[21:00] <nine> But wait...the inner compiler declares its own $*UNIT, so it shouldn't touch the outer

[21:01] <lizmat> it's really a "my $*UNIT" ?

[21:01] <nine> And it's the inner compiler's comp_unit action that sees the outer's $*UNIT and calls it. Why doesn't it see its own instead?

[21:01] <nine> :my $*UNIT;

[21:01] <lizmat> caching ?

[21:02] <lizmat> or maybe :my $*UNIT is lexical in the wrong scope ?

[21:11] <nine> Even declaring it in EVAL itself doesn't make a difference. I'd guess that someone re-sets it somewhere, but I can't find anything like that.

[21:11] <nine> Anyway, I think that's very decent progress already for today. More tomorrow :)

[21:13] <Geth> ¬¶ rakudo: 22f4344443 | (Elizabeth Mattijsen)++ | 2 files

[21:13] <Geth> ¬¶ rakudo: Tighten up sub slurp / spurt signature

[21:13] <Geth> ¬¶ rakudo: 

[21:13] <Geth> ¬¶ rakudo: Basically make 'slurp "foo", "bar"' a compile time error, rather

[21:13] <Geth> ¬¶ rakudo: than a runtime error.

[21:13] <Geth> ¬¶ rakudo: 

[21:13] <Geth> ¬¶ rakudo: Sadly, this creates a problem in the proto-arity-count check, of which

[21:13] <Geth> ¬¶ rakudo: I have no idea how to fix it.  So exclude "slurp" and "spurt" for now

[21:13] <Geth> ¬¶ rakudo: from those tests.   Fixes welcome!

[21:13] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/22f4344443

[21:25] *** lichtkind joined
[21:31] *** hoelzro left
[21:42] *** hoelzro joined
[21:44] *** Kaiepi left
[21:47] *** Kaiepi joined
[21:48] *** Kaiepi left
[21:48] *** Kaiepi joined
[21:52] *** ufobat_ joined
[21:52] <Geth> ¬¶ rakudo: b4b2a5ecda | (Elizabeth Mattijsen)++ | src/core.c/Distro.pm6

[21:52] <Geth> ¬¶ rakudo: Set MacOS codename as Distro.desc

[21:52] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/b4b2a5ecda

[21:53] <lizmat> [Coke]  ^^  :-)

[21:56] *** ufobat__ left
[22:01] *** dogbert17 joined
[22:03] <Geth> ¬¶ rakudo: f33ce01c11 | (Elizabeth Mattijsen)++ | src/core.c/IO/Handle.pm6

[22:03] <Geth> ¬¶ rakudo: IO::Handle.PIO is not always nqp::null if not open

[22:03] <Geth> ¬¶ rakudo: 

[22:03] <Geth> ¬¶ rakudo: This caused a flapper in S32-io/io-cathandle.t .  This now appears

[22:03] <Geth> ¬¶ rakudo: to be fixed by checking with nqp::defined, rather than nqp::isnull.

[22:03] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/f33ce01c11

[22:06] <lizmat> sleep&

[22:12] *** lichtkind left
[22:25] *** Altai-man_ joined
[22:27] *** sena_kun left
[22:44] *** Altai-man_ left
[23:12] *** squashable6 left
[23:14] *** squashable6 joined
[23:48] *** patrickz joined
[23:52] *** patrickb left
