[00:25] *** sena_kun joined
[00:27] *** Altai-man_ left
[00:30] *** leont left
[01:09] *** Altai-man_ joined
[01:11] *** sena_kun left
[01:39] <jdv79> timotimo: is the heap profiler fixed yet?

[01:41] <timotimo> what failure mode was it again? just that having to get the special branch from the special fork being a bad user experience?

[01:41] <jdv79> don't remember at hte moment

[01:41] <jdv79> sound about right

[01:42] <jdv79> is there a doc about how do whatever that is?

[01:42] <timotimo> the situation is not yet better, but i've made local changes towards making it fine to merge

[01:42] <timotimo> my local fork has nqp ops do much of the heavy lifting for performance reasons

[01:43] <timotimo> but that's not so good for stuff in the ecosystem

[01:43] <timotimo> one benchmark where i just read the entirety of one snapshot takes about 7 seconds with nqp ops and 11 without

[01:43] <timotimo> i guess it's a small price to pay, though

[01:46] <jdv79> ok.  i think i have a proc that's using too much mem.

[01:46] <jdv79> and the heap snapshot is the best way to invesigate, right?

[01:47] <timotimo> i think so, yes

[01:47] <jdv79> ok, thanks.  maybe in the next few days i'll attempt it again then.

[01:48] <timotimo> i think i'll take the performance hit so that stuff can go upstream

[03:10] *** sena_kun joined
[03:11] *** Altai-man_ left
[05:09] *** Altai-man_ joined
[05:11] *** sena_kun left
[07:01] <MasterDuke> uh. why would https://github.com/rakudo/rakudo/blob/master/src/core.c/Rakudo/Iterator.pm6#L1745 show up as not jitted in a profile? the profile says it's called 169188 times, for a total of 3s, but a spesh log only has a single entry for it with `Total hits: 5`

[07:01] <nine> Maybe inlining?

[07:06] <MasterDuke> but i don't see any `inline of 'pull-one' (<its cuid>)`?

[07:07] <MasterDuke> but something is weird, why would that take 3s anyway? not sure what to believe

[07:10] *** sena_kun joined
[07:10] <MasterDuke> nine: btw, don't know if you see these, but i'm getting `src/core/interp.c:3315:36: warning: variable ‘coderef’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]` when building moarvm

[07:11] <nine> yes

[07:12] *** Altai-man_ left
[07:15] <MasterDuke> oh right. this code has a `.race` in it, not sure anything can be trusted

[07:18] *** leont joined
[08:38] *** AlexDaniel joined
[08:38] *** AlexDaniel left
[08:38] *** AlexDaniel joined
[08:44] *** JJMerelo joined
[09:06] *** lizmat_ joined
[09:08] *** lizmat left
[09:09] <AlexDaniel> 6c: shell ｢perl6 -e 'say "oooh"; say "yeaaah"; say "there is a bug";' | head -n1｣

[09:09] *** Altai-man_ joined
[09:09] *** gugod left
[09:09] <committable6> AlexDaniel, https://gist.github.com/8f9ad922850a486fac13c0c63a907a89

[09:09] *** gugod joined
[09:10] <AlexDaniel> head not found? O_o

[09:10] <AlexDaniel> 6c: shell ｢perl6 -e 'say "oooh"; say "yeaaah"; say "there is a bug";' | /usr/bin/head -n1｣

[09:11] <committable6> AlexDaniel, https://gist.github.com/77c4f3a3564cb83e386bcb43ea7de96e

[09:11] <AlexDaniel> ah it's probably true

[09:11] <AlexDaniel> bisect: shell ｢perl6 -e 'say "oooh"; say "yeaaah"; say "there is a bug";' | /usr/bin/head -n1｣

[09:11] <bisectable6> AlexDaniel, Will bisect the whole range automagically because no endpoints were provided, hang tight

[09:11] <bisectable6> AlexDaniel, Output on all releases: https://gist.github.com/12ad9704e87a6fb81f2e2a9196183b25

[09:11] <bisectable6> AlexDaniel, On both starting points (old=2018.11 new=2017.09) the exit code is 0 and the output is identical as well

[09:11] <bisectable6> AlexDaniel, Output on all releases and bisected commits: https://gist.github.com/70759f99abc35f21b42d642c2016afc8

[09:12] <lizmat_> Files=1307, Tests=113012, 217 wallclock secs (29.29 usr  8.36 sys + 3045.75 cusr 287.29 csys = 3370.69 CPU)

[09:12] *** sena_kun left
[09:12] * AlexDaniel facepalms

[09:13] <AlexDaniel> 6c: shell ｢perl6 -e 'say "oooh"; say "yeaaah"; say "there is a bug";' | /usr/bin/head -n1｣

[09:13] <committable6> AlexDaniel, https://gist.github.com/1bd4253559f0be01aee4d5723fb80677

[09:14] <AlexDaniel> ah, it's… a bit random?

[09:14] *** JJMerelo left
[09:20] *** MasterDuke left
[09:51] *** lizmat_ is now known as lizmat

[09:57] *** JJMerelo joined
[10:03] *** MasterDuke joined
[10:43] <[Tux]> Rakudo version 2020.06-6-gf470b544d - MoarVM version 2020.06-4-g06d8cdd16

[10:43] <[Tux]> csv-test-xs-20      0.384 -  0.388

[10:43] <[Tux]> test-t --race       0.817 -  0.825

[10:43] <[Tux]> csv-ip5xs           0.846 -  0.865

[10:43] <[Tux]> test-t              1.871 -  1.925

[10:43] <[Tux]> test                7.776 -  7.818

[10:43] <[Tux]> csv-ip5xs-20        8.011 -  8.799

[10:43] <[Tux]> test-t-20 --race    9.113 -  9.297

[10:43] <[Tux]> csv-parser         26.041 - 26.930

[10:43] <[Tux]> test-t-20          31.241 - 31.834

[11:10] *** sena_kun joined
[11:11] *** Altai-man_ left
[11:14] *** JJMerelo left
[11:18] *** JJMerelo joined
[11:50] *** Xliff left
[11:57] * lizmat hopes someone might be able to explain why <( and )> are implemented by creating sub-cursors with special names and then taking the $!from from them

[11:58] <lizmat> instead of just updating the $!from / $!to in the upper cursor

[11:58] <lizmat> jnthn moritz pmichaud ?

[12:11] *** JJMerelo left
[12:15] <jnthn> lizmat: I think that's how it was initially done, however it led to totally bogus results in various situations involving backtracking

[12:15] <lizmat> ah, I see

[12:15] <lizmat> hmmm...

[12:15] <lizmat> I feared it would be something like that

[12:16] <jnthn> And since the cstack has stuff dropped from it upon backtracking, it's the "natural" solution.

[12:16] <lizmat> yeah, except that you *always* need post-processing of cursors to turn them into Match objects

[12:16] <jnthn> I don't believe there's anything special about the choice of names matching attributes.

[12:16] <lizmat> which is something I'm trying to prevent

[12:17] <jnthn> But whether you have <( and )> in a regex is a static property, so you could have that as a boolean on the capture data?

[12:17] <lizmat> it's just that having a $!cstack is *not* an indication that you actually have sub captures

[12:17] <jnthn> And then if it's not there, you can cheaply skip looking for them.

[12:18] <lizmat> well, I'm not sure where <( )> would be in the regex property

[12:22] <jnthn> I think that the $!from and $!to might be in the %capnames that are passed when buliding RegexCaptures

[12:22] <lizmat> they are

[12:22] <AlexDaniel> jnthn: So, actually, I don't understand it. Does it mean that `s;p;d;` construct will parse one way or another depending on whether you have sub `s` or not?

[12:23] <jnthn> lizmat: So just spot them and set a flag in that RegexCaptures object?

[12:24] <lizmat> I'm trying to get rid of the RegexCaptures object :-)

[12:24] <jnthn> AlexDaniel: omg, it apparently tires to behave differently if hte sub is pre-declared...

[12:25] <AlexDaniel> ah yeah, that was my “you can't name a sub “s”” comment during perlcon last year

[12:25] <jnthn> *tries

[12:25] <AlexDaniel> not that you can't, but… just don't…

[12:26] <jnthn> I'm not really in favor of this attempt to be helpful, tbh :/

[12:26] <jnthn> Just saying "well, if your sub names conflict with quote construct names, use the form s()" woulda probably been better.

[12:27] <jnthn> lizmat: OK, then you'll have to work out the correct peg to hang it off, 'cus I introduced RegexCaptures precisely to give the static capture properties in an efficient to work with form. :)

[12:27] <lizmat> yeah, I realized that

[12:28] <lizmat> and perhaps my exercise will not prove to be more efficient

[12:28] <lizmat> just using less memory at the expense of more CPU

[12:28] <jnthn> I figured it'd still be needed (though no doubt refactored) at least in so far as to quickly answer "is there even a capture with this name" or "is this a list"?

[12:29] <AlexDaniel> jnthn: another thing is how “useful” the ; delimiter is. If it was not allowed, we would've had a better error message right there in the ticket, I think.

[12:29] <ShimmerFairy> I was just going to say, I personally feel like no good can come from using ; as a delimiter in the first place :P

[12:29] <lizmat> well, in my patch, I'm adding the raw capnames to the Regex object

[12:30] <lizmat> which allows you to quickly answer that question

[12:30] <jnthn> If we disallow ; somebody will only find another one that looks tempting to disallow too, and then we end up with a list of exceptions.

[12:30] <jnthn> I'd prefer we make the language more regular, not less.

[12:30] <jnthn> lizmat: So...add the "do we have a <( or )>" to it also? :)

[12:31] <lizmat> that's already in the capnames

[12:31] <lizmat> so in that sense, it is known already

[12:31] <jnthn> OK, so...what's the problem?

[12:31] <ShimmerFairy> That's fair, though I feel like banning ; is one of the few, if not only, characters you could ban without running into a slippery slope.

[12:31] <lizmat> it's just it feels like a hack using the sub-capture mechanism for that

[12:31] <AlexDaniel> jnthn: I mean… you can't use “:”, you can't use “_”

[12:32] <lizmat> jnthn: as you're only interested in its $!from value

[12:32] <AlexDaniel> , is allowed though, although it makes me feel pain just looking at it x)

[12:33] <AlexDaniel> so _-' don't work because of identifiers

[12:33] <lizmat> jnthn: ah, I just figured: that $!from value can also have been adapted by sub-subcaptures

[12:34] <jnthn> _ and : aren't technically disallowed, they're just unreachable because of other things that we want to parse at those points.

[12:34] <jnthn> So far as I remember, the only things explicitly ruled out as quote delims are whitespace and (

[12:35] <AlexDaniel> yea?

[12:35] <jnthn> And I'm not even sure about the last of those, or if that just falls out of LTM too

[12:35] <AlexDaniel> m: $_ = ‘abc’; say s:g:a:b:; .say

[12:35] <camelia> rakudo-moar f470b544d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Colons may not be used to delimit quoting constructs␤at <tmp>:1␤------> 3$_ = ‘abc’; say s:g:a:b:7⏏5; .say␤    expecting any of:␤        colon pair (restricted)␤»

[12:36] <jnthn> I thought that error was from a failover after failing to eat a colonpair, but I may misremember.

[12:36] <ShimmerFairy> m: $_ = "abc"; s\ _a_b_; say $_   # :D

[12:36] <camelia> rakudo-moar f470b544d: OUTPUT: «bbc␤»

[12:36] <jnthn> :)

[12:37] <AlexDaniel> whitespace isn't really disallowed, it's just eaten?

[12:37] <AlexDaniel> m: $_ = ‘abc’; say s / a /b/ ; .say

[12:37] <camelia> rakudo-moar f470b544d: OUTPUT: «｢a｣␤bbc␤»

[12:38] <jnthn> m: Q a 

[12:38] <camelia> rakudo-moar f470b544d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Alphanumeric character is not allowed as a delimiter␤at <tmp>:1␤------> 3Q7⏏5 a␤»

[12:38] <jnthn> Hm, interesting

[12:38] <AlexDaniel> m: say Q a foo a

[12:38] <camelia> rakudo-moar f470b544d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Alphanumeric character is not allowed as a delimiter␤at <tmp>:1␤------> 3say Q7⏏5 a foo a␤»

[12:38] <AlexDaniel> m: say Q # foo #

[12:38] <camelia> rakudo-moar f470b544d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤# not allowed as delimiter␤at <tmp>:1␤------> 3say Q #7⏏5 foo #␤»

[12:38] <AlexDaniel> m: say Q | foo |

[12:38] <camelia> rakudo-moar f470b544d: OUTPUT: « foo ␤»

[12:38] <AlexDaniel> so # is not allowed too…

[12:39] <AlexDaniel> I don't think “you can use any character” is a kind of consistency to strive for :S

[12:40] <jnthn>                 self.panic('Whitespace character ‘' ~

[12:40] <jnthn>                     nqp::getuniname(nqp::ord($start)) ~

[12:40] <jnthn>                     '’ (0x' ~ $code ~') ' ~ $description ~  ' is not allowed as a delimiter');

[12:40] <jnthn> This does exist, but I'm not actually sure how you reach it.

[12:41] <AlexDaniel> :) https://github.com/rakudo/rakudo/blob/f470b544d49c7ee9f6dd6fda80b94045b2887939/src/Perl6/Grammar.nqp#L3446

[12:44] <jnthn> I'm guessing maybe various of these have been added after folks managed to confuse themselves, so maybe there is precedent for disallowing `;` too. I just worry where this ends.

[12:44] <jnthn> Everybody things exceptions to rules are worth it when it's *there* exception. :)

[12:44] <jnthn> *thinks

[12:44] <jnthn> *their

[12:45] <jnthn> Gah, my brain stayed on vacation.

[12:45] <AlexDaniel> it doesn't end, yes

[12:45] <AlexDaniel> would've been clearer to have a whitelist of characters instead

[12:48] <jnthn> I think we'd just get the opposite problem.

[12:51] <AlexDaniel> m: $_ = ‘abc’; dd s👩‍🦰a👩‍🦰b👩‍🦰

[12:51] <camelia> rakudo-moar f470b544d: OUTPUT: «Match $/ = Match.new(:orig("abc"), :from(0), :pos(1))␤»

[12:51] <AlexDaniel> m: $_ = ‘abc’; put s👩‍🦰a👩‍🦰b👩‍🦰

[12:51] <camelia> rakudo-moar f470b544d: OUTPUT: «a␤»

[12:52] <AlexDaniel> jnthn: yeah, except that everything else would've worked

[12:52] <AlexDaniel> right now I had to rename my s sub to ss :(

[13:01] *** [Tux] left
[13:09] *** Altai-man_ joined
[13:11] *** sena_kun left
[13:28] *** [Tux] joined
[13:34] <[Coke]> m: "☭".uninames.say

[13:34] <camelia> rakudo-moar f470b544d: OUTPUT: «(HAMMER AND SICKLE)␤»

[13:34] <[Coke]> (seen on twitter earlier today)

[13:40] <lizmat> .oO( the unicode consortium is a communist attempt at eradicating ASCII :-)

[13:45] <vrurg> I wonder if they have swastica alongside... :(

[13:46] <vrurg> yep, they do. 

[13:53] <lizmat> the swastika is a *very* old symbol: https://www.britannica.com/story/how-the-symbolism-of-the-swastika-was-ruined

[13:58] <vrurg> lizmat: I know. THE swastica must actually be rotated by 45⁰. 

[13:59] <lizmat> vivid memories of my first visit to Dublin in early 80's: https://en.wikipedia.org/wiki/Swastika_Laundry

[13:59] *** [Coke] left
[14:01] *** [Coke] joined
[14:01] *** [Coke] left
[14:01] *** [Coke] joined
[14:30] *** Kaeipi left
[14:31] *** Kaeipi joined
[14:47] <lizmat> m: use nqp; class A { has str $!a; method a() { nqp::isnull($!a) } }; dd A.new.a   # jnthn, any way of making this bomb?  rather than silently doing the wrong thing?

[14:47] <camelia> rakudo-moar f470b544d: OUTPUT: «0␤»

[14:48] <lizmat> m: use nqp; class A { has str $!a; method a() { nqp::isnull_s($!a) } }; dd A.new.a   # correct way of doing this

[14:48] <camelia> rakudo-moar f470b544d: OUTPUT: «1␤»

[14:49] <jnthn> Special-case its handling in QAST -> MAST translation

[14:50] <jnthn> Just compile the target without coercion, and if it doesn't evaluate to an object register, whine

[14:51] <lizmat> that would be compile time, right?

[14:52] <lizmat> what if it is actually an nqp::getattr_s with variables ?

[14:52] <lizmat> does it become a DIHWIDT ?

[15:05] * lizmat wonders how this could affect Comma: https://www.i-programmer.info/news/90-tools/13794-jetbrains-plugin-adds-deepcode-integration.html

[15:10] *** sena_kun joined
[15:11] <sena_kun> >DeepCode's analysis understands the intention of your code through the use of ML

[15:12] *** Altai-man_ left
[15:43] *** MasterDuke left
[15:58] *** JJMerelo joined
[16:00] <ShimmerFairy> Why should isnull() bomb there? After all, an nqp::null_s isn't an nqp::null

[16:01] <[Coke]> n: say nqp::isnull(nqp::null_s))

[16:01] <[Coke]> nqp: nqp::say( nqp::isnull(nqp::null_s)))

[16:01] <camelia> nqp-moarvm: OUTPUT: «Confused at line 2, near "nqp::say( ␤   at gen/moar/stage2/NQPHLL.nqp:1053  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQP.nqp:945  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/nqp.moarvm:comp_unit)␤ from gen/mo…»

[16:06] <lizmat> ShimmerFairy: well, that is true, but it is a bit of a trap

[16:06] <ShimmerFairy> Yeah, though my beef is more generally with there being two nulls. :)

[16:07] <lizmat> it just cost me 30 mins again to figure out I had fallen into that trap again

[16:09] <ShimmerFairy> My only objection is that I would never expect an isThing($x) function to die if $x wasn't a Thing.

[16:12] <jnthn> It wouldn't die, it wouldn't even compile

[16:13] <[Coke]> nqp: nqp::say( nqp::isnull(nqp::null_s)) #oops

[16:13] <camelia> nqp-moarvm: OUTPUT: «0␤»

[16:14] <ShimmerFairy> nqp: my $a := nqp::null_s(); say(nqp::isnull($a))

[16:14] <camelia> nqp-moarvm: OUTPUT: «0␤»

[16:14] <ShimmerFairy> Assuming $a was set in a more complicated mass of code, would NQP be able to detect that at compile time?

[16:14] <lizmat> m: use nqp; my $a := nqp::null_s; dd $a

[16:14] <camelia> rakudo-moar f470b544d: OUTPUT: «chars requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

[16:15] <lizmat> m: use nqp; my $a := nqp::null_s; dd nqp::isnull_s($a)

[16:15] <camelia> rakudo-moar f470b544d: OUTPUT: «1␤»

[16:15] <lizmat> hmmm

[16:19] <jnthn> ShimmerFairy: No; this would only be for cases where isnull was invoked on something that compiles into a non-object register

[16:20] <jnthn> If you already managed to box the thing, you're still in bother

[16:20] <ShimmerFairy> yeah, that makes sense, I thought you were saying it could be done in general.

[16:21] <jnthn> I think it could handle the case lizmat mentioned having tripped over

[16:22] <nine> And make test succeeds with in-process precompilation :)

[16:23] <lizmat> nine++

[16:24] <[Coke]> nine++

[16:25] <jnthn> Wow

[16:25] <jnthn> nine++

[16:26] <ShimmerFairy> nine++

[16:30] <sena_kun> nine++

[16:31] <nine> There's still quite a bit of work ahead, but this makes me hopeful that I can actually get it done this time

[16:47] *** MasterDuke joined
[17:09] <Geth> ¦ roast: 2e0bbde384 | (Elizabeth Mattijsen)++ | S05-modifier/Perl_10.t

[17:09] <Geth> ¦ roast: Should be testing for Match, not Capture

[17:09] <Geth> ¦ roast: 

[17:09] <Geth> ¦ roast: The fact that currently Match is a Capture, is an implementation

[17:09] <Geth> ¦ roast: detail that may not be true in the future.

[17:09] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2e0bbde384

[17:09] <Geth> ¦ roast: 998d247a68 | (Elizabeth Mattijsen)++ | S06-traits/is-copy.t

[17:09] <Geth> ¦ roast: Make sure we test for expected value as well

[17:09] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/998d247a68

[17:09] *** Altai-man_ joined
[17:11] *** sena_kun left
[17:25] *** squashable6 left
[17:26] *** squashable6 joined
[18:05] *** MasterDuke left
[18:15] *** MasterDuke joined
[19:10] *** sena_kun joined
[19:12] *** Altai-man_ left
[19:17] <AlexDaniel> what just happened to github?

[19:17] <AlexDaniel> is anybody else seeing this? Did they change the interface again?

[19:18] <MasterDuke> yep

[19:18] <[Coke]> looks different, aye

[19:20] *** AlexDaniel left
[19:22] <AlexDaniel`> aaand emacs just crashed… didn't like me trying to change the font size. All because I was forced to update to otb versions of the font I was using which is rendered absolutely incorrectly pretty much everywhere

[19:22] <AlexDaniel`> not really my day I guess

[19:23] <AlexDaniel`> for those unaware, pango dropped previously existing support for bitmap fonts

[19:24] <AlexDaniel`> most distros first reverted to using an older version of pango, but now it seems most are just trying to power through the pain, so the packages are getting updated again

[19:24] <AlexDaniel`> so if you're using a bitmap font eventually you'll see boxes instead of proper rendered characters

[19:25] <AlexDaniel`> the solution to that? Use OTB fonts instead! So you can still use bitmap fonts, you just have to convert them

[19:25] <AlexDaniel`> or rely on your distro to provide packages with converted fonts

[19:25] <AlexDaniel`> there's one problem though

[19:25] <AlexDaniel`> otb rendering is just completely broken

[19:26] <AlexDaniel`> you'd think it'd be simple to just dump pixels defined in the bitmap font to the screen, but nooo

[19:28] <AlexDaniel`> but it looks like very beautiful, like Hebrew

[19:29] <AlexDaniel`> https://imgur.com/a/OkJhqWi

[19:43] *** JJMerelo left
[19:46] *** sivoais left
[19:59] *** sivoais joined
[20:03] <raku-bridge> <DataKinds> i want that as a bitmap font

[21:06] <AlexDaniel`> it's just terminus, with leftmost column removed I think

[21:07] <AlexDaniel`> or you can just install terminus-otb and try to use it in urxvt

[21:07] <AlexDaniel`> but that's a bug specific to urxvt, other apps have different bugs!

[21:08] <AlexDaniel`> in emacs it is rendered too wide

[21:09] *** Altai-man_ joined
[21:11] *** sena_kun left
[22:17] *** squashable6 left
[22:19] *** squashable6 joined
[22:21] *** squashable6 left
[22:23] *** squashable6 joined
[22:41] *** Altai-man_ left
[22:42] *** sena_kun joined
[23:03] <Geth> ¦ rakudo/match-refactor: c7ae702ab2 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[23:03] <Geth> ¦ rakudo/match-refactor: Add Regex.capnames attribute

[23:03] <Geth> ¦ rakudo/match-refactor: 

[23:03] <Geth> ¦ rakudo/match-refactor: This contains the "raw" capnames information coming from Regex

[23:03] <Geth> ¦ rakudo/match-refactor: parsing.  This allows Match to be refactored.

[23:03] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/c7ae702ab2

[23:03] <Geth> ¦ rakudo/match-refactor: bde012e0ed | (Elizabeth Mattijsen)++ | src/core.c/Match.pm6

[23:03] <Geth> ¦ rakudo/match-refactor: Completely refactor the Match class

[23:03] <Geth> ¦ rakudo/match-refactor: 

[23:03] <Geth> ¦ rakudo/match-refactor: The old implementation made Match a subclass of Capture.  This had

[23:03] <Geth> ¦ rakudo/match-refactor: the advantage that it could use the Positional and Associative

[23:03] <Geth> ¦ rakudo/match-refactor: interface of Capture.  This has the *dis*advantage of needing to

[23:03] <Geth> ¦ rakudo/match-refactor: set up a lot of data-structures *after* a Match object is returned

[23:03] <Geth> ¦ rakudo/match-refactor: from NQP.  Even if these data structures are not needed.

[23:03] <Geth> ¦ rakudo/match-refactor: <…commit message has 14 more lines…>

[23:03] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/bde012e0ed

[23:09] *** Altai-man_ joined
[23:12] *** sena_kun left
[23:20] <Geth> ¦ rakudo/match-refactor: b69a4c4f3e | (Elizabeth Mattijsen)++ | 4 files

[23:20] <Geth> ¦ rakudo/match-refactor: Remove the most obvious uses of Match.MATCH

[23:20] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/b69a4c4f3e

[23:20] <Geth> ¦ rakudo/match-refactor: a2481f0d2d | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[23:20] <Geth> ¦ rakudo/match-refactor: Oops, need to return a Callable

[23:20] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/a2481f0d2d

[23:45] *** squashable6 left
[23:47] *** squashable6 joined
