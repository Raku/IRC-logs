[00:02] *** sena_kun joined
[00:04] *** Altai-man_ left
[00:04] *** softmoth left
[00:36] <Xliff> \o/

[00:36] <Xliff> No .precomp lives again!

[00:36] <Xliff> Rather, no-precomp-lock.

[00:36] <Xliff> Eeet leeevs!

[00:37] <Xliff> Now to get drunk and go pyrotechnical!

[00:43] <Xliff> tests

[00:45] <Xliff> Files=1307, Tests=113021, 239 wallclock secs (15.58 usr  2.57 sys + 1603.61 cusr 106.45 csys = 1728.21 CPU)

[00:46] <Xliff> Weird. How is lizmat getting it faster than mine?

[00:46] <Xliff> Must have better specs.

[01:52] *** lucasb left
[02:01] *** Altai-man_ joined
[02:04] *** sena_kun left
[04:02] *** sena_kun joined
[04:04] *** Altai-man_ left
[06:02] *** Altai-man_ joined
[06:04] *** sena_kun left
[06:43] *** Merfont left
[06:44] *** Kaiepi joined
[06:48] <Kaiepi> i can now get dns resolution to perform twice as well in v6.e compared to v6.c in the best case scenario, where the response to the AAAA query is received first and the address received can immediately be connected to

[06:49] <Kaiepi> which i think is about as fast as i can get it

[06:49] <Kaiepi> that depends on the connection to the dns server being the bottleneck though, on my vps that's not the case

[06:59] <Xliff> \o Kaiepi

[07:00] <Kaiepi> o/

[07:01] <Xliff> What are you working on?

[07:16] *** Kaiepi left
[07:18] *** Kaiepi joined
[07:28] <Xliff> Ho hum.... I'm bored.

[07:29] <MasterDuke> Xliff: you'll also have to `git push --tags`

[07:32] <Xliff> MasterDuke++

[07:32] <Xliff> Current status of perl6 GLib projects

[07:32] <Xliff> https://drive.google.com/file/d/12j1Dy6zIcmZP8EOWFYJzKElohGkj9IyL/view?usp=sharing

[07:33] <Xliff> Hmm....

[07:34] *** Kaiepi left
[07:35] <Xliff> MasterDuke: Doesn't look like I need to. I've pushed several times, already and just --tags doesn't seem to do anything

[07:35] *** JJMerelo left
[07:36] <MasterDuke> hm. maybe your git does it automatically. for me, i have to do a separate push with --tags

[07:37] <Xliff> Aha! I had to refetch tags from upstream.

[07:38] <Xliff> And now I have pushed and there they go.

[07:38] <Xliff> What's up with the city tags?

[07:39] <Xliff> Moscow, NewYork, Prague, SaltLake, etc?

[07:39] <MasterDuke> those were old releases before the naming was changed to yyyy.mm

[07:39] <Xliff> Ah.

[07:39] <Xliff> Should I be upset that there was no WashingtonDC?

[07:43] <MasterDuke> heh. i have no idea how the names were chosen, before my time

[07:43] <Xliff> Ah.

[07:44] <Xliff> OK. I think I've revived the parallel compiling thingy.

[07:44] <Xliff> Still some bugs I need to work on. I should refresh the PR.

[07:44] <Xliff> Still wondering why my spectest times are worse than lizmat's though.

[07:46] <MasterDuke> mine are about half hers. i get around 132s usually. but i have a newer cpu with more cores

[07:46] <Xliff> What are your specs?!?

[07:46] <MasterDuke> ryzen 3700x

[07:47] <Xliff> Actually. Try https://github.com/Xliff/rakudo.git - rakudo-precomp-nolock2 branch

[07:48] <Xliff> Intel(R) Core(TM) i9-7900X CPU @ 3.30GHz here

[07:48] <Xliff> It seems odd that I am getting 232 seconds here.

[07:48] <Xliff> What is your memory speed?

[07:49] <MasterDuke> what's your TEST_JOBS set to?

[07:49] <Xliff> It's not.

[07:49] <MasterDuke> mine is 12

[07:49] <MasterDuke> you actually have 2 more physical cores than i do, it should be faster

[07:50] <Xliff> Using 18 and retesting

[07:51] <MasterDuke> my ram is 3200, but i doubt it makes a very big difference

[07:52] <lizmat> Files=1307, Tests=113021, 217 wallclock secs (29.59 usr  8.52 sys + 3030.83 cusr 286.92 csys = 3355.86 CPU)

[07:52] <Xliff> Files=1307, Tests=112793, 152 wallclock secs (25.43 usr  3.32 sys + 2731.36 cusr 144.13 csys = 2904.24 CPU)

[07:52] <Xliff> Though now I'm failing tests.

[07:53] *** Kaiepi joined
[07:54] <lizmat> 2.4 GHz i9 here, with SSD and 32G 2400 MhZ DDR4 RAM

[07:54] <Xliff> Wow. Mine came in 22 seconds slower than yours with one proc.

[07:54] <lizmat> TEST_JOBS=16

[07:57] <Xliff> Hmmmm..... TEST_JOBS=20 made mine slightly slower.

[07:57] <Xliff> Files=1307, Tests=112812, 158 wallclock secs (26.24 usr  3.79 sys + 2840.94 cusr 149.92 csys = 3020.89 CPU)

[07:59] <MasterDuke> Files=1307, Tests=113021, 136 wallclock secs (15.68 usr  2.34 sys + 1709.51 cusr 109.48 csys = 1837.01 CPU)

[07:59] <Xliff> Hrm. Memory is 2666, here

[07:59] <Xliff> So faster base clock and faster ram.

[07:59] <MasterDuke> (but i'm not running the Inline::Perl5 tests, so that might explain the difference)

[08:00] <Xliff> Why are my #Tests lower?

[08:01] <MasterDuke> don't know. `make m-spectest` always does a `git pull`, so it should be up-to-date

[08:01] <Xliff> I'm just doing "make spectest"

[08:02] <MasterDuke> should be the same. i just have m-spectest in my history because i sometimes build the jvm backend

[08:02] *** sena_kun joined
[08:03] <MasterDuke> Files=1307, Tests=113021, 137 wallclock secs (15.72 usr  2.27 sys + 1688.57 cusr 107.34 csys = 1813.90 CPU)  # first run on your branch

[08:04] *** Altai-man_ left
[08:04] <Xliff> Files=1307, Tests=112586, 156 wallclock secs (25.88 usr  3.59 sys + 2788.07 cusr 148.51 csys = 2966.05 CPU)

[08:04] <MasterDuke> all tests passed

[08:05] <MasterDuke> might just be high ipc for my cpu and/or all the intel cpu vuln mitigations working against you

[08:06] <Xliff> Parse errors: No plan found in TAP output

[08:06] <MasterDuke> but honestly i would expect faster times for you with those two extra physical cores

[08:06] <Xliff> What does that mean?

[08:06] <Xliff> Yeah, but my base clock is 3.3GHz

[08:07] <MasterDuke> some error and the test file actually failed (i.e., not just a failed test, but a compiler error or something like that)

[08:08] <Xliff> OK. That may be due to some of the problems I'm still trying to work out.

[08:08] <MasterDuke> but there is a known problem that causes random fails like that in random test files. i get it even on master

[08:08] <Xliff> :/

[08:08] <Xliff> How is it determined if you run the Inline::Perl5 tests?

[08:09] <Xliff> If it's installed?

[08:09] <MasterDuke> i'll say at the beginning. `Inline::Perl5 not installed: not running Perl 5 integration tests`

[08:09] <MasterDuke> *it'll

[08:12] <MasterDuke> Files=1307, Tests=113021, 128 wallclock secs (16.02 usr  2.33 sys + 1618.42 cusr 103.00 csys = 1739.77 CPU)  # another run on your branch

[08:13] <Xliff> \o/

[08:13] <MasterDuke> do you have any local modifications to your roast checkout? that might prevent it updating

[08:13] <Xliff> I don't think so. This should be a fresh tree.

[08:14] <Xliff> And it was running the right number of tests 8 hours ago (and passing... :/ )

[08:15] <MasterDuke> any recent solar flare activity on the east coast? some random bits flipped somewhere?

[08:15] <Xliff> I know right?

[08:15] <Xliff> Maybe it's all of the firework smoke...

[08:16] <MasterDuke> maybe covid-19 has jumped to silicon

[08:16] <Xliff> Now all computers will need face masks.

[08:16] <Xliff> I so wish I had Photoshop skillz right now.

[08:35] *** stoned75 left
[08:37] *** stoned75 joined
[08:38] *** HarmtH joined
[08:53] <Geth> Â¦ rakudo: 9ea66e13d0 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[08:53] <Geth> Â¦ rakudo: Improve wrapped text readability a bit

[08:53] <Geth> Â¦ rakudo: 

[08:53] <Geth> Â¦ rakudo: By adding an extra space after a . or a ?

[08:53] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9ea66e13d0

[09:00] <Geth> Â¦ rakudo: 6db1fb1dab | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[09:00] <Geth> Â¦ rakudo: Remove superfluous period

[09:00] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6db1fb1dab

[09:10] <MasterDuke> Xliff: does your branch help compilation times with your large projects?

[09:10] <Xliff> Oh yes.

[09:10] <MasterDuke> nice

[09:10] <Xliff> Let me do some addition

[09:11] <Geth> Â¦ rakudo: 80aaede383 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[09:11] <Geth> Â¦ rakudo: Wordwrap X::Placeholder::NonPlaceholder message

[09:11] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/80aaede383

[09:12] <Xliff> MasterDuke: Long story short, any project with multiple .pm6 files will benefit.

[09:13] <Xliff> Long dependency chains can benetif.

[09:13] <MasterDuke> cool

[09:15] <nine> I'm looking forward to seeing what in-process precompilation will do for those :)

[09:15] <MasterDuke> are the two efforts complementary?

[09:17] <nine> Yes. Xliff is working on different precompiling processes not having to wait for each other all the time. In-process precompilation gets rid of rakudo's startup overhead for one process precompiling multiple modules.

[09:17] <nine> Both can be combined into an n:m model.

[09:17] <nine> Also what helps multiple processes may become ground work for doing parallel in-process compilation

[09:18] <MasterDuke> very nice

[09:21] <Geth> Â¦ rakudo: 4203186061 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[09:21] <Geth> Â¦ rakudo: Wordwrap X::Undeclared message

[09:21] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4203186061

[09:25] <[Tux]> Rakudo version 2020.06-29-g80aaede38 - MoarVM version 2020.06-20-g187b4564e

[09:25] <[Tux]> csv-test-xs-20      0.393 -  0.400

[09:25] <[Tux]> csv-ip5xs           0.826 -  0.833

[09:25] <[Tux]> test-t --race       0.863 -  0.878

[09:25] <[Tux]> test-t              1.932 -  1.974

[09:25] <[Tux]> csv-ip5xs-20        7.917 -  8.244

[09:25] <[Tux]> test                7.636 -  8.580

[09:25] <[Tux]> test-t-20 --race    8.760 -  9.100

[09:25] <[Tux]> csv-parser         25.220 - 25.879

[09:25] <[Tux]> test-t-20          31.730 - 32.729

[09:27] <Xliff> https://docs.google.com/spreadsheets/d/12j1Dy6zIcmZP8EOWFYJzKElohGkj9IyL/edit#gid=928938123 (Time info in columns N and O)

[09:27] <Xliff> Oops. Not that one.

[09:27] <Xliff> https://drive.google.com/file/d/12j1Dy6zIcmZP8EOWFYJzKElohGkj9IyL/view?usp=sharing

[09:29] <Geth> Â¦ rakudo: f70a3ccdea | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[09:29] <Geth> Â¦ rakudo: Wordwrap X::Attribute::Regex message

[09:29] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f70a3ccdea

[09:30] <MasterDuke> parallel is on your branch?

[09:31] <Xliff> Yes

[09:31] <MasterDuke> wow, nice

[09:31] <Xliff> And in my projects the non-parallel is obtained using scripts/build.sh

[09:31] <Xliff> That's for single-thread build. Multi-thread build is scripts/dependency-build.sh.

[09:32] <Xliff> dependency-build.sh, actually could be used for any multi-module Raku projects.

[09:52] *** leont joined
[09:57] <Geth> Â¦ rakudo: 3ffed2fbc9 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[09:57] <Geth> Â¦ rakudo: Wordwrap X::Redeclaration message

[09:57] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3ffed2fbc9

[10:02] *** Altai-man_ joined
[10:05] *** sena_kun left
[10:09] <lizmat> Xliff: I just realized why my spectest numbers may be better

[10:10] <lizmat> they're always the result of a *second* run of "make spectest", so that no pre-compilation of modules in t/spec is needed anymore

[10:10] <Geth> Â¦ rakudo: a7a1fe246a | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[10:10] <Geth> Â¦ rakudo: Wordwrap X::Redeclaration::Outer message

[10:10] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a7a1fe246a

[10:30] <Geth> Â¦ rakudo: cd8846ad14 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[10:30] <Geth> Â¦ rakudo: Wordwrap X::Dynamic::Postdeclaration message

[10:30] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cd8846ad14

[10:43] <Geth> Â¦ rakudo: 83a126b3ce | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[10:43] <Geth> Â¦ rakudo: Wordwrap X::Dynamic::Package message

[10:43] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/83a126b3ce

[10:52] <Geth> Â¦ rakudo: 3add8615a7 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[10:52] <Geth> Â¦ rakudo: Wordwrap X::Import::Redeclaration message

[10:52] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3add8615a7

[11:03] <Geth> Â¦ rakudo: 3d9a9fc4a5 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[11:03] <Geth> Â¦ rakudo: Wordwrap X::Import::OnlystarProto message

[11:03] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3d9a9fc4a5

[11:19] <lizmat> m: my enum S1 <a b c>; my enum S2 <b c d>; say b    #  hmmm

[11:19] <camelia> rakudo-moar 3d9a9fc4a: OUTPUT: Â«Potential difficulties:â¤    Redeclaration of symbol 'b and c'. â¤    at <tmp>:1â¤    ------> 3my enum S1 <a b c>; my enum S2 <b c d>7â5; say b    #  hmmmâ¤===SORRY!===â¤Something went wrong in (PoisonedAlias)â¤Â»

[11:34] <Geth> Â¦ rakudo: 697596fda6 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[11:34] <Geth> Â¦ rakudo: Wordwrap X::PoisonedAlias message

[11:34] <Geth> Â¦ rakudo: 

[11:34] <Geth> Â¦ rakudo: Also make it actually work: this appears to be called from deep in the

[11:34] <Geth> Â¦ rakudo: bowels of the parser and needed native str attributes to actually work.

[11:34] <Geth> Â¦ rakudo: The test in t/spec/S12-enums/basic.t actually passed for some reason,

[11:34] <Geth> Â¦ rakudo: but it only ever produced the message:

[11:34] <Geth> Â¦ rakudo: 

[11:34] <Geth> Â¦ rakudo:   Something went wrong in (PoisonedAlias)

[11:34] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/697596fda6

[11:54] <Geth> Â¦ roast: 6b91d0e88c | (Elizabeth Mattijsen)++ | 2 files

[11:54] <Geth> Â¦ roast: Make X::Obsolete tests a bit less picky

[11:54] <Geth> Â¦ roast: review: https://github.com/Raku/roast/commit/6b91d0e88c

[11:54] <Geth> Â¦ rakudo: 56e5f7dc43 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[11:54] <Geth> Â¦ rakudo: Wordwrap X::Obsolete message

[11:54] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/56e5f7dc43

[12:02] *** sena_kun joined
[12:04] *** Altai-man_ left
[12:10] <Geth> Â¦ rakudo: 88b0e7a37d | (Elizabeth Mattijsen)++ | 2 files

[12:10] <Geth> Â¦ rakudo: Wordwrap X::Parameter::Default::TypeCheck message

[12:10] <Geth> Â¦ rakudo: 

[12:10] <Geth> Â¦ rakudo: Also allow for a .what parameter, to improve the message for the

[12:10] <Geth> Â¦ rakudo: definition of variables with default values.

[12:10] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/88b0e7a37d

[12:10] <lizmat> afk for a few hours&

[12:44] <nine> I get a lot of make test failures on the OBS

[12:45] <nine> https://build.opensuse.org/package/live_build_log/home:niner9:rakudo-git/rakudo/openSUSE_Leap_15.1/x86_64

[12:45] <nine> on all architectures

[13:49] <nine> lizmat: I'm pretty sure t/02-rakudo/13-exceptions.t is because of your change to some exception message

[14:02] *** Altai-man_ joined
[14:05] *** sena_kun left
[16:02] *** sena_kun joined
[16:04] *** Altai-man_ left
[16:48] *** softmoth joined
[17:10] * lizmat checks

[17:12] *** softmoth left
[17:13] *** lichtkind joined
[17:20] <timotimo> that feeling when you've implemented what you consider a space saving measure, but aside from getting the lowest memory usage down, it also gets the highest memory usage up somehow?!

[17:24] <Geth> Â¦ rakudo: 7a93c90785 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[17:24] <Geth> Â¦ rakudo: Wordwrap X::Parameter::AfterDefault message

[17:24] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7a93c90785

[17:24] <Geth> Â¦ rakudo: 4589349553 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[17:24] <Geth> Â¦ rakudo: Drop the space after the last . or ?

[17:24] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4589349553

[17:24] <Geth> Â¦ rakudo: 821f582fa8 | (Elizabeth Mattijsen)++ | t/02-rakudo/13-exceptions.t

[17:24] <Geth> Â¦ rakudo: Adapt error message check to more accurate error message

[17:24] <Geth> Â¦ rakudo: 

[17:24] <Geth> Â¦ rakudo: This should unbreak all CI.

[17:24] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/821f582fa8

[17:26] <lizmat> timotimo: loop { my $a = 42; $a but False }  # eats about 15MB / second on my machine

[17:27] <lizmat> aka leaks quite a bit

[17:27] <lizmat> timotimo: loop { my $a; $a but False }  # even faster at ~ 20 MB/sec

[17:30] <dogbert17> lizmat: is that the fallout from your permutations investigation yesterday?

[17:31] <lizmat> it's the ultimate golf, I think, yes

[17:32] <lizmat> m: sub a($:a) { }    # I think this error message is... strange

[17:32] <camelia> rakudo-moar 821f582fa: OUTPUT: Â«5===SORRY!5=== Error while compiling <tmp>â¤In signature parameter, placeholder variables like $:a are illegalâ¤you probably meant a named parameter: ':$a'â¤at <tmp>:1â¤------> 3sub a($:a7â5) { }    # I think this error message isâ¤    â¦Â»

[17:33] <lizmat> $:a a placeholder variable?   Wouldn't that be $^a ?

[17:34] <lizmat> https://docs.raku.org/language/variables#index-entry-$:    # TIL

[17:35] <dogbert17> didn't know that

[17:36] <lizmat> m: { say $:foo }(foo => 42)

[17:36] <camelia> rakudo-moar 821f582fa: OUTPUT: Â«42â¤Â»

[17:36] <timotimo> i did :))

[17:37] <dogbert17> :)

[17:37] <dogbert17> m: ("hello", 1, 22/7, 42, "world").grep(Int) for ^200000; say now - INIT now

[17:37] <camelia> rakudo-moar 821f582fa: OUTPUT: Â«1.01585777â¤Â»

[17:37] <dogbert17> m: grep(Int, ("hello", 1, 22/7, 42, "world")) for ^200000; say now - INIT now

[17:37] <camelia> rakudo-moar 821f582fa: OUTPUT: Â«4.31807473â¤Â»

[17:38] <dogbert17> what's happening here I wonder

[17:38] <lizmat> the sub version doing a lot of work, before it calls the method?

[17:39] <dogbert17> I guess it could be

[17:39] <lizmat> multi sub grep(Mu $test, +values, *%a) {

[17:41] <dogbert17>     my $laze = values.is-lazy;

[17:41] <dogbert17>     values.grep($test,|%a).lazy-if($laze)

[17:41] <dogbert17> is it that one

[17:46] <lizmat> yup

[17:47] <lizmat> although I'm not sure why that's stored in a variable first, really

[17:47] <timotimo> hrmpf. the memory usage varies as much as 0.5 megabytes; it's between 18 and 18.5 megs

[17:47] <timotimo> (this is nqp-m -e '')

[17:47] <lizmat> and it could probably benefit from looking whether there are any keys in %a before splatting them in

[17:48] <dogbert17> checking if something is lazy should be quite fast though

[17:48] <timotimo> it's quite possibly a megamorphic callsite, though, unless grep itself is inlined

[17:48] <timotimo> though + is flattening, potentially; not sure if we compile it non-flattening-ly when it doesn't need to

[17:49] <timotimo> new-disp, of course, makes this a non-issue

[17:49] <lizmat> dogbert17: map as a sub, is basically the same

[17:49] <dogbert17> new-disp, the solution to all out problems :-)

[17:49] <dogbert17> lizmat: yeah, I noticed that

[17:51] <timotimo> not all, we also need RakuAST :P

[17:52] <dogbert17> it seems to be a bit dangerous to assume, like I tend to do, that the sub and method form of something whould take roughly the same time to execute

[17:54] <timotimo> how about we systematically go through basically everything and record all the ratios

[17:58] <dogbert17> I have looked through some of them

[18:02] *** leont left
[18:02] *** Altai-man_ joined
[18:05] *** sena_kun left
[18:06] <Geth> Â¦ rakudo: f550c9f97b | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[18:06] <Geth> Â¦ rakudo: Wordwrap X::Parameter::Placeholder message

[18:06] <Geth> Â¦ rakudo: 

[18:06] <Geth> Â¦ rakudo: And improve the message.

[18:06] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f550c9f97b

[18:09] <timotimo> i just had to futz around a bit with the measurements, but now compile_mastop appears at 1.12% when nqp compiles MAST/Ops.nqp

[18:10] <timotimo> i was wondering if we should have a few simpler versions of that method for some of our ops

[18:52] <timotimo> i think i want to see what op the compile_mastop method is called with most often and perhaps special-case implement that

[18:56] <gfldex> raku my @a = 1,2,3; say @a>>.WHAT;

[18:56] <gfldex> raku: my @a = 1,2,3; say @a>>.WHAT;

[18:56] <evalable6> gfldex, rakudo-moar f550c9f97: OUTPUT: Â«(Array)â¤Â»

[18:57] <gfldex> Should I have expected this?

[18:57] <timotimo> WHAT is too special for this to work

[18:59] <gfldex> So Raku does not guarantee introspection in all cases. Makes sense but throws ENODOC.

[19:04] <gfldex> raku: say (.WHAT for @a);

[19:04] <evalable6> gfldex, rakudo-moar f550c9f97: OUTPUT: Â«(exit code 1) 04===SORRY!04=== Error while compiling /tmp/cYXe4JXFSNâ¤Variable '@a' is not declaredâ¤at /tmp/cYXe4JXFSN:1â¤------> 03say (.WHAT for 08â04@a);â¤Â»

[19:04] <gfldex> raku: my @a = 1,2,3; say (.WHAT for @a);

[19:04] <evalable6> gfldex, rakudo-moar f550c9f97: OUTPUT: Â«((Int) (Int) (Int))â¤Â»

[19:08] <gfldex> I wonder if implementing .WHAT as a AST macro could make this work as expected.

[19:31] *** stoned75 left
[19:49] <gfldex> raku: my &c = {;}; say &c.name.so, &c.name.defined;

[19:49] <evalable6> gfldex, rakudo-moar f550c9f97: OUTPUT: Â«FalseTrueâ¤Â»

[19:50] <gfldex> that just bit me when i used '.foo // .name'

[19:50] <gfldex> I think that should be undefined. Also that's another ENODOC.

[19:51] <gfldex> Or better should Block have a .name method?

[19:52] <gfldex> If it should then 'Block({.file.IO.basename}:{.line})' is much better then the empty string.

[20:01] <ShimmerFairy> as I recall, methods like .WHAT are supposed to be macros in the first place.

[20:03] *** sena_kun joined
[20:04] *** Altai-man_ left
[20:14] *** camelia left
[20:18] <timotimo> it compiles macro-like; it turns into a nqp::getwhat or nqp::what or so rather than a method call

[20:25] *** lucs joined
[20:25] *** camelia joined
[20:27] *** sena_kun left
[20:27] *** maggotbrain left
[20:27] *** AlexDaniel left
[20:27] *** japhb left
[20:27] *** gugod left
[20:29] *** sena_kun joined
[20:29] *** maggotbrain joined
[20:29] *** AlexDaniel joined
[20:29] *** japhb joined
[20:29] *** gugod joined
[20:30] *** linkable6 left
[20:30] *** tyil left
[20:30] *** unicodable6 left
[20:30] *** kawaii left
[20:30] *** zostay left
[20:30] *** tbrowder left
[20:31] *** linkable6 joined
[20:31] *** tyil joined
[20:31] *** ShimmerFairy joined
[20:31] *** nativecallable6 joined
[20:31] *** releasable6 joined
[20:31] *** unicodable6 joined
[20:31] *** kawaii joined
[20:31] *** zostay joined
[20:31] *** tbrowder joined
[20:31] *** tyil left
[20:31] *** reportable6 joined
[20:31] *** tellable6 joined
[20:31] *** bisectable6 joined
[20:31] *** committable6 joined
[20:31] *** statisfiable6 joined
[20:31] *** moon-child left
[20:31] *** jnthn left
[20:31] *** kawaii left
[20:32] *** Geth joined
[20:32] *** hoelzro joined
[20:32] *** moon-child joined
[20:32] *** jnthn joined
[20:33] *** sourceable6 left
[20:33] *** notable6 left
[20:33] *** quotable6 left
[20:33] *** coverable6 left
[20:33] *** lizmat left
[20:33] *** raku-bridge left
[20:33] *** TimToady left
[20:33] *** Voldenet left
[20:33] *** robertle left
[20:33] *** greppable6 joined
[20:33] *** bloatable6 joined
[20:33] *** shareable6 joined
[20:33] *** benchable6 joined
[20:33] *** sourceable6 joined
[20:33] *** notable6 joined
[20:33] *** quotable6 joined
[20:33] *** coverable6 joined
[20:33] *** lizmat joined
[20:33] *** raku-bridge joined
[20:33] *** TimToady joined
[20:33] *** Voldenet joined
[20:33] *** robertle joined
[20:33] *** tyilanmenyn joined
[20:34] *** dogbert17 left
[20:34] *** jjatria left
[20:34] *** gfldex left
[20:34] *** SmokeMachine left
[20:34] *** masak left
[20:34] *** moritz left
[20:34] *** dogbert17 joined
[20:34] *** jjatria joined
[20:34] *** gfldex joined
[20:34] *** SmokeMachine joined
[20:34] *** masak joined
[20:34] *** moritz joined
[20:34] *** HarmtH left
[20:34] *** nebuchadnezzar left
[20:35] *** [Tux] left
[20:35] *** AlexDaniel` left
[20:35] *** commavir left
[20:35] *** HarmtH joined
[20:35] *** nebuchadnezzar joined
[20:35] *** samcv joined
[20:35] *** [Tux] joined
[20:35] *** AlexDaniel` joined
[20:35] *** unclechu joined
[20:35] *** commavir joined
[20:36] *** tyilanmenyn left
[20:36] *** Xliff left
[20:36] *** go|dfish left
[20:36] *** timotimo left
[20:37] *** tyilanmenyn joined
[20:37] *** Xliff joined
[20:37] *** go|dfish joined
[20:37] *** mst joined
[20:37] *** sivoais joined
[20:37] *** timotimo joined
[20:37] *** Kaiepi left
[20:37] *** TreyHarris left
[20:37] *** literal left
[20:37] *** samebchase- left
[20:38] *** eater left
[20:38] *** Kaiepi joined
[20:38] *** TreyHarris joined
[20:38] *** krunen joined
[20:38] *** literal joined
[20:38] *** samebchase- joined
[20:38] *** Summertime joined
[20:38] *** eater joined
[20:38] *** tyilanmenyn is now known as tyil

[20:38] *** nine left
[20:38] *** jdv79 left
[20:38] *** squashable6 left
[20:38] *** Summertime left
[20:38] *** eater left
[20:38] *** Kaiepi left
[20:38] *** TreyHarris left
[20:38] *** krunen left
[20:38] *** literal left
[20:38] *** samebchase- left
[20:38] *** tyil left
[20:38] *** Xliff left
[20:38] *** go|dfish left
[20:38] *** mst left
[20:38] *** sivoais left
[20:38] *** timotimo left
[20:38] *** [Tux] left
[20:38] *** AlexDaniel` left
[20:38] *** unclechu left
[20:39] *** commavir left
[20:39] *** HarmtH left
[20:39] *** nebuchadnezzar left
[20:39] *** samcv left
[20:39] *** dogbert17 left
[20:39] *** jjatria left
[20:39] *** gfldex left
[20:39] *** SmokeMachine left
[20:39] *** masak left
[20:39] *** moritz left
[20:39] *** greppable6 left
[20:39] *** bloatable6 left
[20:39] *** shareable6 left
[20:39] *** benchable6 left
[20:39] *** sourceable6 left
[20:39] *** notable6 left
[20:39] *** quotable6 left
[20:39] *** coverable6 left
[20:39] *** lizmat left
[20:39] *** raku-bridge left
[20:39] *** TimToady left
[20:39] *** Voldenet left
[20:39] *** robertle left
[20:39] *** Geth left
[20:39] *** hoelzro left
[20:39] *** moon-child left
[20:39] *** jnthn left
[20:39] *** reportable6 left
[20:39] *** tellable6 left
[20:39] *** bisectable6 left
[20:39] *** committable6 left
[20:39] *** statisfiable6 left
[20:39] *** linkable6 left
[20:39] *** ShimmerFairy left
[20:39] *** nativecallable6 left
[20:39] *** releasable6 left
[20:39] *** unicodable6 left
[20:39] *** zostay left
[20:39] *** tbrowder left
[20:39] *** sena_kun left
[20:39] *** maggotbrain left
[20:39] *** AlexDaniel left
[20:39] *** japhb left
[20:39] *** gugod left
[20:39] *** lucs left
[20:39] *** camelia left
[20:39] *** lichtkind left
[20:39] *** vrurg left
[20:39] *** evalable6 left
[20:39] *** [Coke] left
[20:39] *** MasterDuke left
[20:39] *** tailgate left
[20:39] *** rba left
[20:39] *** eater joined
[20:39] *** Summertime joined
[20:39] *** samebchase- joined
[20:39] *** literal joined
[20:39] *** krunen joined
[20:39] *** TreyHarris joined
[20:39] *** Kaiepi joined
[20:39] *** timotimo joined
[20:39] *** sivoais joined
[20:39] *** mst joined
[20:39] *** go|dfish joined
[20:39] *** Xliff joined
[20:39] *** tyil joined
[20:39] *** commavir joined
[20:39] *** unclechu joined
[20:39] *** AlexDaniel` joined
[20:39] *** [Tux] joined
[20:39] *** samcv joined
[20:39] *** nebuchadnezzar joined
[20:39] *** HarmtH joined
[20:39] *** moritz joined
[20:39] *** masak joined
[20:39] *** SmokeMachine joined
[20:39] *** gfldex joined
[20:39] *** jjatria joined
[20:39] *** dogbert17 joined
[20:39] *** robertle joined
[20:39] *** Voldenet joined
[20:39] *** TimToady joined
[20:39] *** raku-bridge joined
[20:39] *** lizmat joined
[20:39] *** coverable6 joined
[20:39] *** quotable6 joined
[20:39] *** notable6 joined
[20:39] *** sourceable6 joined
[20:39] *** benchable6 joined
[20:39] *** shareable6 joined
[20:39] *** bloatable6 joined
[20:39] *** greppable6 joined
[20:39] *** jnthn joined
[20:39] *** moon-child joined
[20:39] *** hoelzro joined
[20:39] *** Geth joined
[20:39] *** statisfiable6 joined
[20:39] *** committable6 joined
[20:39] *** bisectable6 joined
[20:39] *** tellable6 joined
[20:39] *** reportable6 joined
[20:39] *** tbrowder joined
[20:39] *** zostay joined
[20:39] *** unicodable6 joined
[20:39] *** releasable6 joined
[20:39] *** nativecallable6 joined
[20:39] *** ShimmerFairy joined
[20:39] *** linkable6 joined
[20:39] *** gugod joined
[20:39] *** japhb joined
[20:39] *** AlexDaniel joined
[20:39] *** maggotbrain joined
[20:39] *** sena_kun joined
[20:39] *** camelia joined
[20:39] *** lucs joined
[20:39] *** lichtkind joined
[20:39] *** vrurg joined
[20:39] *** evalable6 joined
[20:39] *** MasterDuke joined
[20:39] *** squashable6 joined
[20:39] *** [Coke] joined
[20:39] *** tailgate joined
[20:39] *** rba joined
[20:39] *** nine joined
[20:39] *** jdv79 joined
[20:39] *** rypervenche joined
[20:39] *** chansen_ joined
[20:39] *** chansen_ left
[20:39] *** rypervenche left
[20:39] *** rba left
[20:40] *** AlexDaniel` left
[20:40] *** unclechu left
[20:40] *** chansen_ joined
[20:40] *** rypervenche joined
[20:40] *** rba joined
[20:41] *** kawaii joined
[20:41] *** tailgate left
[20:41] *** tailgate joined
[20:42] *** nine left
[20:42] *** jdv79 left
[20:42] *** nine joined
[20:42] *** jdv79 joined
[20:44] *** AlexDaniel` joined
[20:49] *** HarmtH left
[20:49] *** nebuchadnezzar left
[20:49] *** samcv left
[20:50] *** HarmtH joined
[20:50] *** nebuchadnezzar joined
[20:50] *** samcv joined
[20:57] *** softmoth joined
[20:58] *** unclechu joined
[21:17] *** travis-ci joined
[21:17] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Wordwrap X::Parameter::Default::TypeCheck message

[21:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/705099537 https://github.com/rakudo/rakudo/compare/56e5f7dc4335...88b0e7a37d4f

[21:17] *** travis-ci left
[21:23] <timotimo> i'm annoyed that rakudo doesn't compile with my changes to nqp's mast compiler :\

[21:46] <timotimo> one potential win could perhaps be replacing the "constants" the mastcompiler uses, like $MVM_operand_type_var, with a literal in some kind of preprocessing step, or manually and putting the source in a comment or so

[21:46] <timotimo> but probably tiny in terms of performance

[22:02] *** Altai-man_ joined
[22:04] *** sena_kun left
[22:14] *** leont joined
[22:46] *** leont left
[23:16] <Xliff> Does anyone here know of a terminal that supports a graphical prompt?

[23:17] <Xliff> Kinda looking for this: https://i.imgur.com/Ffpe8l7.png

[23:17] <lucs> I hope not.

[23:17] <lucs> ;)

[23:17] <Xliff> LOL

[23:18] <Xliff> Actually, I'm in it for the Git emblems. 

[23:33] <rypervenche> Xliff: That's just airline or powerline.

[23:42] *** JRaspass joined
[23:47] *** Xliff left
