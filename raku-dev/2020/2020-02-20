[00:00] *** MasterDuke joined
[00:25] *** hungrydonkey joined
[00:30] <Geth> ¦ rakudo: 4de852e4e5 | (Vadim Belman)++ | 2 files

[00:30] <Geth> ¦ rakudo: Set attribute's rw status when added to a container

[00:30] <Geth> ¦ rakudo: 

[00:30] <Geth> ¦ rakudo: It was previously set in `compose_attributes` which is called by

[00:30] <Geth> ¦ rakudo: `ClassHOW` only. This was causing roles always ignoring the default `rw`

[00:30] <Geth> ¦ rakudo: status and thus `is rw` trait not having effect on them. This fix

[00:30] <Geth> ¦ rakudo: presumes that the trait is always applied before attributes are thrown

[00:30] <Geth> ¦ rakudo: in.

[00:30] <Geth> ¦ rakudo: 

[00:30] <Geth> ¦ rakudo: Fixes #3495

[00:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4de852e4e5

[00:30] <linkable6> RAKUDO#3495 [closed]: https://github.com/rakudo/rakudo/issues/3495 [attributes][objects][roles] `is rw` trait applied to roles does not work

[00:30] <Geth> ¦ rakudo: 85660c8fa2 | (Vadim Belman)++ | 2 files

[00:30] <Geth> ¦ rakudo: Apply late `also is rw` trait to the existing attributes

[00:30] <Geth> ¦ rakudo: 

[00:31] <Geth> ¦ rakudo: This handles the following case:

[00:31] <Geth> ¦ rakudo: 

[00:31] <Geth> ¦ rakudo: ```

[00:31] <Geth> ¦ rakudo: class C {

[00:31] <Geth> ¦ rakudo:     has $.a;

[00:31] <Geth> ¦ rakudo: <…commit message has 8 more lines…>

[00:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/85660c8fa2

[00:31] <Geth> ¦ rakudo: 40352398db | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[00:31] <Geth> ¦ rakudo: Merge pull request #3496 from vrurg/rakudo_3495

[00:31] <Geth> ¦ rakudo: 

[00:31] <Geth> ¦ rakudo: Support of `is rw` trait applied to roles.

[00:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/40352398db

[00:31] <Geth> ¦ roast: b12064dff5 | (Vadim Belman)++ | 2 files

[00:31] <Geth> ¦ roast: Add tests for `is rw` trait on roles

[00:31] <Geth> ¦ roast: 

[00:31] <Geth> ¦ roast: In support of rakudo/rakudo#3496 and following rakudo/rakudo#3495

[00:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b12064dff5

[00:31] <Geth> ¦ roast: f63ef08b6a | (Vadim Belman)++ | 2 files

[00:31] <Geth> ¦ roast: Added tests for late applied `also is rw`

[00:31] <Geth> ¦ roast: 

[00:31] <linkable6> RAKUDO#3496 [closed]: https://github.com/rakudo/rakudo/pull/3496 Set attribute's rw status when added to an AttributeContainer

[00:31] <Geth> ¦ roast: No matter when `is rw` is applied, attributes without explicit `is

[00:31] <Geth> ¦ roast: readonly` trait have to repsect it:

[00:31] <Geth> ¦ roast: 

[00:31] <Geth> ¦ roast: ```

[00:31] <Geth> ¦ roast: class C {

[00:31] <Geth> ¦ roast: <…commit message has 7 more lines…>

[00:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f63ef08b6a

[00:31] <Geth> ¦ roast: c7ecb2d748 | (Vadim Belman)++ (committed using GitHub Web editor) | 3 files

[00:31] <Geth> ¦ roast: Merge pull request #620 from perl6/rakudo_3495

[00:31] <Geth> ¦ roast: 

[00:31] <Geth> ¦ roast: Add tests for `is rw` trait on roles

[00:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c7ecb2d748

[01:25] *** hungrydonkey left
[01:34] *** sena_kun joined
[01:36] *** Altai-man_ left
[02:13] *** ufobat__ joined
[02:17] *** ufobat_ left
[02:51] *** cognomin_ joined
[02:54] *** cognominal left
[03:33] *** Altai-man_ joined
[03:35] *** sena_kun left
[04:30] *** hungrydonkey joined
[04:31] *** hungrydonkey left
[04:37] *** hungrydonkey joined
[05:32] *** hungryd66 joined
[05:34] *** sena_kun joined
[05:36] *** Altai-man_ left
[05:36] *** hungrydonkey left
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:33] *** Altai-man_ joined
[07:35] *** sena_kun left
[07:40] *** cognominal joined
[07:44] *** cognomin_ left
[07:52] <lizmat> Files=1303, Tests=111145, 211 wallclock secs (28.80 usr  7.99 sys + 2943.57 cusr 277.35 csys = 3257.71 CPU)

[07:53] *** domidumont joined
[08:46] <Geth> ¦ rakudo: 9217b1c763 | (Elizabeth Mattijsen)++ | src/core.c/Hash.pm6

[08:46] <Geth> ¦ rakudo: Reduce number of lookups for Hash.DELETE-KEY

[08:46] <Geth> ¦ rakudo: 

[08:46] <Geth> ¦ rakudo: If an existing key is removed, it will only do 2 hash lookups

[08:46] <Geth> ¦ rakudo: (atkey and deletekey), whereas before it would do 3 (existskey,

[08:46] <Geth> ¦ rakudo: atkey and deletekey).  Should make a noticeable difference on

[08:46] <Geth> ¦ rakudo: larger hashes.

[08:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9217b1c763

[08:46] <lizmat> this in reference to https://github.com/Raku/problem-solving/issues/163#issuecomment-588535467

[09:21] <lizmat> afk for a few hours&

[09:34] *** sena_kun joined
[09:35] *** Altai-man_ left
[10:06] *** hungryd66 left
[10:10] *** hungrydonkey joined
[10:12] *** hungryd10 joined
[10:12] *** hungrydonkey left
[10:17] *** hungrydonkey joined
[10:17] *** hungryd10 left
[10:18] *** |Tux| left
[10:20] *** hungryd72 joined
[10:20] *** hungrydonkey left
[10:31] *** |Tux| joined
[10:35] <sena_kun> releasable6, status

[10:35] <releasable6> sena_kun, Next release in ≈2 days and ≈8 hours. 4 blockers. 60 out of 242 commits logged (⚠ 2 warnings)

[10:35] <releasable6> sena_kun, Details: https://gist.github.com/ae7acdd2d2efb3e55ea3ab265faf059a

[10:37] *** hungrydonkey joined
[10:37] <sena_kun> I am doing a kind notification the release date is close and we still have some serious blockers.

[10:40] *** hungryd72 left
[10:51] *** hungrydonkey left
[10:52] *** hungrydonkey joined
[11:33] *** Altai-man_ joined
[11:36] *** sena_kun left
[11:45] * lizmat has annotated her commits of the past month in https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:46] <lizmat> Altai-man_ ^^

[11:46] <Altai-man_> saw it, lizmat++

[11:53] *** MasterDuke left
[12:08] *** hungrydonkey left
[12:08] *** hungryd52 joined
[12:12] *** hungryd52 left
[12:13] *** hungrydonkey joined
[12:18] <|Tux|> Rakudo version 2020.01-242-g9217b1c76 - MoarVM version 2020.01.1-41-gb0604e575

[12:18] <|Tux|> csv-test-xs-20      0.377 -  0.394

[12:18] <|Tux|> csv-ip5xs           0.694 -  0.705

[12:18] <|Tux|> test-t --race       0.797 -  0.844

[12:18] <|Tux|> test-t              1.772 -  1.805

[12:18] <|Tux|> csv-ip5xs-20        5.814 -  5.841

[12:18] <|Tux|> test                7.476 -  7.510

[12:18] <|Tux|> test-t-20 --race    8.607 -  8.764

[12:18] <|Tux|> csv-parser         22.415 - 23.041

[12:19] <|Tux|> test-t-20          28.704 - 30.182

[12:41] <Altai-man_> is that just me or these numbers are increasing every time I see them?

[12:41] <lizmat> they're fluctuating, but generally haven't been going down for a long time now  :-(

[12:46] *** patrickb joined
[12:48] <patrickb> Altai-man_, lizmat: https://tux.nl/Talks/CSV6/speed4.html

[12:52] *** patrickb left
[13:13] <jnthn> bisectable6: 2020.01 HEAD say :($ is raw where True, $ is copy, Int $ is rw, $ is raw where True = 2).perl

[13:13] <bisectable6> jnthn, Using old=2020.01 new=HEAD in an attempt to do what you mean

[13:13] <bisectable6> jnthn, Bisecting by output (old=2020.01 new=9217b1c) because on both starting points the exit code is 0

[13:13] <bisectable6> jnthn, bisect log: https://gist.github.com/b7992194f19d10fc260ee8225cc2dd15

[13:13] <bisectable6> jnthn, (2020-01-17) https://github.com/rakudo/rakudo/commit/3f6a2a2225f410e1aa62c3e3812c2810da3cd756

[13:14] <Altai-man_> jnthn, errata was clean on release. maybe something later influenced the change to start making weird things

[13:15] <jnthn> Altai-man_: It's a straightforward regression that somehow isn't caught by our current tests

[13:15] <jnthn> Caused by the commit bisectable6 found

[13:16] <jnthn> m: say :($).raku

[13:16] <camelia> rakudo-moar 8c995febd: OUTPUT: «:($)␤»

[13:16] <jnthn> m: say :($ where 42).raku

[13:16] <camelia> rakudo-moar 8c995febd: OUTPUT: «:($ where { ... })␤»

[13:16] <jnthn> m: say :($ is raw where 42).raku

[13:16] <camelia> rakudo-moar 8c995febd: OUTPUT: «:(\ where { ... })␤»

[13:16] <lizmat> bingo

[13:16] <lizmat> ok, shall I fix that one ?

[13:16] <jnthn> committable6: 2020.1 say :($ is raw where 42).raku

[13:16] <committable6> jnthn, ¦2020.1: «Cannot find this revision (did you mean “2020.01”?)»

[13:16] <jnthn> committable6: 2020.01 say :($ is raw where 42).raku

[13:16] <committable6> jnthn, ¦2020.01: «:($ is raw where { ... })␤»

[13:16] <jnthn> Yes

[13:16] <jnthn> Please :)

[13:18] <jnthn> I'll see if I can figure out the other Rakudo blocker, though it's not well golfed...

[13:24] <lizmat> looks like 21b809745d is the one

[13:24] <linkable6> (2020-01-30) https://github.com/rakudo/rakudo/commit/21b809745d Actually fix Parameter's handling of default values

[13:27] <lizmat> jnthn: should $SIG_ELEM_IS_RAW be set on such a parameter ?

[13:29] <jnthn> No idea

[13:29] <jnthn> At a guess, yes

[13:30] <jnthn> Since it has the `is raw` trait

[13:30] <lizmat> aaah...  

[13:30] <lizmat> duh

[13:30] <jnthn> I think the problem largely is that normalzing to \foo is fine in general, but *not* if it's anonymous

[13:30] <lizmat> yup, gotcha

[13:34] *** sena_kun joined
[13:35] <lizmat> running spectest now

[13:36] *** Altai-man_ left
[13:39] <Geth> ¦ roast: d0ee46628c | (Elizabeth Mattijsen)++ | S06-signature/introspection.t

[13:39] <Geth> ¦ roast: Add test for $#3492

[13:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d0ee46628c

[13:40] <Geth> ¦ rakudo: 2aa4d09596 | (Elizabeth Mattijsen)++ | src/core.c/Parameter.pm6

[13:40] <Geth> ¦ rakudo: Make sure unnamed raw parameters have the '$' sigil

[13:40] <Geth> ¦ rakudo: 

[13:40] <Geth> ¦ rakudo: Fixes R#3492

[13:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2aa4d09596

[13:40] <linkable6> R#3492 [open]: https://github.com/rakudo/rakudo/issues/3492 [BLOCKER][regression] 6.c/d-errata and S06-signature/introspection.t

[13:41] <sena_kun> releasable6, status

[13:41] <releasable6> sena_kun, Next release in ≈2 days and ≈5 hours. 3 blockers. 139 out of 242 commits logged (⚠ 2 warnings)

[13:41] <releasable6> sena_kun, Details: https://gist.github.com/9f45d08ebaf21aba58930ae013e61df0

[13:41] <sena_kun> lizmat, errata tests run clean?

[13:42] * lizmat runs spectest again  :-)

[13:48] <lizmat> sena_kun: a lot of TOD passed, but otherwise clean

[13:48] <sena_kun> lizmat++

[13:48] <lizmat> *TODO  :-)

[13:50] *** pmurias joined
[14:05] <jnthn> *sigh* OO::Plugin is a *lot* of code, and somewhere - maybe in Rakudo, maybe in the module - hash randomization causes a behavior change.

[14:21] <lizmat> one obvious hash is the export hash

[14:27] <jnthn> Not sure how it's ordering would come into it though

[14:31] <jnthn> I am bumping the back trace every time we do a hash iteration and throwing in `.sort`s in various places to see if it makes a difference...

[14:39] *** lucasb joined
[14:41] <lizmat> jnthn: sanity question: is prefix ⚛ supposed to work on anything else than a atomicint ?

[14:42] <jnthn> Well, or anything of the same size

[14:42] <lizmat> also, what does it mean combined with binding ?

[14:42] <jnthn> That's also a native int

[14:42] <lizmat> but Holder is *not* a native int ?

[14:42] <jnthn> Though what it actually works on is an intlexref or intattrref I guess

[14:42] <lizmat> my $holder := ⚛$!holder;

[14:43] <jnthn> Oh, I misread :)

[14:43] <jnthn> No, it can work on a reference too

[14:43] <jnthn> It's just an atomic read

[14:43] <jnthn> Somehow my brain inserted a ++ :P

[14:43] <lizmat> so it would also work on an Opaque ?

[14:43] <jnthn> Opaque?

[14:43] <lizmat> a non-native object

[14:43] <jnthn> Typically it's on a Scalar, which has P6opaque representation, if that's what you mean

[14:44] <jnthn> And it's an atomic read of the $!value of the Scalar

[14:44] <lizmat> ok, that's not clear from the doc: https://docs.raku.org/type/atomicint#prefix_⚛

[14:45] <jnthn> Woudln't that page be about the candidate for atomicint only?

[14:45] <jnthn> https://docs.raku.org/type/Scalar#prefix_%E2%9A%9B

[14:45] <jnthn> The other candidate is documented there

[14:46] <lizmat> ok, I guess that could be cross-referenced

[14:50] <jnthn> Going through all these hash iterator sites will take forever...

[14:55] <vrurg> jnthn: I left a comment on the issue, but there is not much to add. I'll try to do more when over with my daytime work.

[14:56] <jnthn> vrurg: OK. If you build a MoarVM where you tweak `#define MVM_HASH_RANDOMIZE 0` then you'll get the failure very time

[14:56] <jnthn> *every time

[14:56] <jnthn> Or at least, I do :)

[14:57] <jnthn> I note that the thing it bisects to can make a big difference in the nubmer of hashes that get allocated when doing matching

[14:58] <jnthn> So it may be a legit bisect in terms of "yes, the behavior changes here", but not actually to blame.

[14:59] <jnthn> I did look through that code to see if there was anything obviously sensitive to hash ordering, but also nothing in Match.pm6 ever shows up in the stack traces of the places we do a hash iteration

[15:02] <jnthn> vrurg: I'll leave it for you to look a bit further, with this new info. 

[15:03] <[Coke]> jnthn: Could I interest you in https://github.com/rakudo/rakudo/issues/3057 ? (need to free up file descriptors when using Proc::Async to pipe processes)

[15:03] <[Coke]> I am happy to offer a pint and a curry in exchange. :)

[15:03] <vrurg> jnthn: Sure. Don't waste your time. Thanks!

[15:10] *** hungrydonkey left
[15:18] <jnthn> [Coke]: Well, https://gist.github.com/jnthn/f660e30516a1f803e8a598a3d082c336 seems to fix it, though need to see what spectest etc. thinks

[15:20] *** moritz_ is now known as moritz

[15:21] <[Coke]> jnthn: I can do the testing bit.

[15:21] <[Coke]> let me know where to send the curry. :)

[15:22] <jnthn> I cant htink of 

[15:22] <jnthn> oops

[15:22] <jnthn> I can't think of a reason this patch would cause problems

[15:22] <jnthn> Though...hmm

[15:25] <Geth> ¦ rakudo: d18d6e9a35 | (Elizabeth Mattijsen)++ | src/core.c/Lock/Async.pm6

[15:25] <Geth> ¦ rakudo: Change cas to nqp::cas in Lock::Async.lock

[15:25] <Geth> ¦ rakudo: 

[15:25] <Geth> ¦ rakudo: This appears to at least work around the problems as reported in:

[15:25] <Geth> ¦ rakudo:   https://github.com/MoarVM/MoarVM/issues/1237

[15:25] <Geth> ¦ rakudo: 

[15:25] <Geth> ¦ rakudo: With this fix the t/spec/S17-promise/lock-async-stress2.t test

[15:25] <Geth> ¦ rakudo: runs more than 1000x without breaking.

[15:25] <Geth> ¦ rakudo: <…commit message has 7 more lines…>

[15:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d18d6e9a35

[15:26] <[Coke]> jnthn: should I wait or can I start making branches to try this out? :)

[15:26] <jnthn> [Coke]: I'll push it to make things easier to test with

[15:26] <jnthn> spectest...passed, but I had still got 6.c-errata checked out :P

[15:26] <jnthn> (from earlier bug hunt)

[15:27] <jnthn> So now waiting on the proper one :)

[15:27] <sena_kun> releasable6, status

[15:27] <releasable6> sena_kun, Next release in ≈2 days and ≈3 hours. 2 blockers. 141 out of 243 commits logged

[15:27] <releasable6> sena_kun, Details: https://gist.github.com/b1cecdbcf80d25d566a1eff24f7ab3bb

[15:29] <[Coke]> jnthn++

[15:29] <jnthn> dran, it seems to cause a test failure...

[15:29] <jnthn> *darn

[15:29] <[Coke]> I was trying to find a place in Proc::Async::Pipe to fix this, and was coming up empty, thanks.

[15:30] <jnthn> Yeah, double closes happen. So it can't be quite that simple.

[15:31] <jnthn> language class, bbl

[15:31] <[Coke]> you getting those failures in moarvm itself?

[15:31] <[Coke]> ~~

[15:32] <jnthn> No, it seems we get them 'cus MoarVM now does a close but then we also .close

[15:32] <jnthn> So yeah, needs more thought

[15:33] *** Altai-man_ joined
[15:34] <[Coke]> still, thanks for checking.

[15:36] *** sena_kun left
[15:39] *** hungrydonkey joined
[15:58] <Geth> ¦ rakudo: 2854144462 | (Elizabeth Mattijsen)++ | src/core.c/Lock/Async.pm6

[15:58] <Geth> ¦ rakudo: Change other cas to nqp::cas in Lock::Async

[15:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2854144462

[15:58] *** hungrydonkey left
[15:59] *** hungrydonkey joined
[16:04] *** toddr joined
[16:09] *** pmurias left
[16:19] <Geth> ¦ rakudo: e81e5162d0 | (Elizabeth Mattijsen)++ | src/core.c/Lock/Async.pm6

[16:19] <Geth> ¦ rakudo: We already have a simple method to create a kept Promise

[16:19] <Geth> ¦ rakudo: 

[16:19] <Geth> ¦ rakudo: So use that  :-)

[16:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e81e5162d0

[16:31] <[Coke]> lizmat: is it worth pre-caching that kept promise?

[16:31] <[Coke]> s/caching/creating/

[16:31] <[Coke]> Looks like in either #ifdef it's only used the one time.

[16:32] <lizmat> you mean, inside Promise?  or in Lock::Async

[16:32] <lizmat> the ifdef is for the JS backend, that doesn't support locking adaik

[16:32] <lizmat> *afaik

[16:32] <[Coke]> https://github.com/rakudo/rakudo/commit/e81e5162d0 - looks like you remove KEPT-PROMISE entirely.

[16:32] <[Coke]> you *could* remov...

[16:33] <[Coke]> and use Promise.kept in those two spots directly

[16:33] <lizmat> yeah, but Promise.kept creates a new one every time

[16:34] <lizmat> now, one could argue that should also be a singleton, but I didn't want to cross that bridge so close before the release

[16:35] <[Coke]> ahhhh. thanks.

[16:38] *** domidumont left
[16:52] <jnthn> Yes, that's an important optimization :)

[16:52] <jnthn> (caching the kept Promise for Lock::Async)

[16:52] <jnthn> Not convinced about making Promise.kept a singleton, might cause a few too many surprises...

[17:12] <lizmat> yeah, that's why I didn't do that  :-)

[17:12] <lizmat> jnthn: fwiw, I feel that the Promise object has become a little overweight, with a lot of unneeded baggage in some, maybe a lot, situations

[17:14] <lizmat> jnthn: I've added some debugging info, and it looks like 1 in 3 attempts to get a lock fails

[17:14] <lizmat> is that something you'd expect for that benchmark ?

[17:14] <lizmat> *stress test

[17:20] <jnthn> [Coke]: Think I've got a properer fix

[17:22] <jnthn> lizmat: For sure, it's basically a contention handling test

[17:22] <lizmat> indeed...  anyways, for a test, I put in the cas() instead of the nqp::cas() and sure enough, 135 attempts later there was a crash

[17:24] <jnthn> I'm not seeing any attributes one could easily remove from `Promise`; perhaps you could save 8 bytes by using a single field for vow taken and report-broken-if-sunk, if careful

[17:26] <[Coke]> jnthn: oooh

[17:31] <Geth> ¦ nqp: 3f99c1ba6e | (Jonathan Worthington)++ | tools/templates/MOAR_REVISION

[17:31] <Geth> ¦ nqp: Get MoarVM with async proc stdin close support

[17:31] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3f99c1ba6e

[17:34] *** sena_kun joined
[17:36] *** Altai-man_ left
[17:41] <Geth> ¦ rakudo: cdbd60c1c4 | (Jonathan Worthington)++ | 2 files

[17:41] <Geth> ¦ rakudo: Fix handle leak when chaining Proc::Async

[17:41] <Geth> ¦ rakudo: 

[17:41] <Geth> ¦ rakudo: We request that the VM close the handle upon process termination.

[17:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cdbd60c1c4

[17:41] <jnthn> [Coke]: Hopefully this helps without breaking stuff :)

[17:42] <jnthn> Passes spectest, at least :)

[17:42] <sena_kun> jnthn, I'll check all release specs after $dayjob and launch blin tonight

[17:43] <lizmat> jnthn: wondering if it would make sense to have a separate lock/unlock combo for Lock::Async.protect

[17:43] <jnthn> .oO( pancakes in orbit )

[17:43] <lizmat> since in that case, the promises would never get out, so we wouldn't need vows on them

[17:45] <jnthn> Don't think it'd help, given Promise.keep is just a method that does self.vow.keep anyway

[17:45] <jnthn> In the uncontended case, you just get back the singleton Promise anyway. In the contended case, this is a drop in the ocean.

[17:48] <jnthn> releasable6: status

[17:48] <releasable6> jnthn, Next release in ≈2 days and ≈1 hour. 1 blocker. 141 out of 247 commits logged

[17:48] <releasable6> jnthn, Details: https://gist.github.com/d252e5542a58a0e1f753d5297fb3302e

[17:48] <jnthn> 1 blocker :D

[17:48] <jnthn> Much better than the 4 earlier

[17:49] <lizmat> yeah, and I think we could undo the BLOCKER there, since it may actually be in the module itself ?

[17:49] <jnthn> Let's see what vrurg finds 

[17:49] <jnthn> We just need it removed (or fixed) before the weekend.

[17:50] <vrurg> jnthn: Got a few minutes and got results. Writing a comment. 

[17:51] <lizmat> why does https://gist.github.com/Whateverable/d252e5542a58a0e1f753d5297fb3302e mention commits from 2019 ?

[17:51] <lizmat> hmmmm...

[17:53] <sena_kun> lizmat, well

[17:53] <sena_kun> I can explain that

[17:53] <sena_kun> one second

[17:53] <vrurg> jnthn: Done. The bisection looks correct and it's not about hashes, it's about the structure in Perl6::Grammar object passed to the action method.

[17:53] * vrurg is afk for a couple of hours.

[17:54] <sena_kun> lizmat, they were dome in 2019 in a branch (e.g. https://github.com/rakudo/rakudo/pull/3286) and was merged around 22 days ago, so after 2020.01. thus these commits are from 2019, but they were not logged in a release, because they were not released.

[17:54] <sena_kun> s/dome/done/

[17:54] <lizmat> hmmm...

[17:54] <sena_kun> lizmat, no? this seems like the case to me.

[17:54] * lizmat will double-check

[18:01] <vrurg> lizmat: I hoped it'd be a bug in the module, but still looks like a regression. :(

[18:04] *** hungrydonkey left
[18:14] <jnthn> vrurg: Did you replicate it being sensitive to whether hash randomization is disabled or not?

[18:15] <vrurg> jnthn: no need for. Failure or success depended on which order of keys was returned from a hash. 

[18:16] <vrurg> The core of problem is that the rule must return a list of dependencies. But on HEAD it always return an empty list. 

[18:17] <lizmat> bisectable6: say so Match.^can("replace-with")

[18:17] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=cdbd60c) because on both starting points the exit code is 0

[18:17] <bisectable6> lizmat, bisect log: https://gist.github.com/76d986c22a23c9df4e10bc734aafc707

[18:17] <bisectable6> lizmat, There are 2 candidates for the first “new” revision. See the log for more details

[18:17] <vrurg> I added dumps of the grammar obects as they're passed into the action method. HEAD returns incomplete list of submatches.

[18:18] <vrurg> No I'm really away, a lot of urgent calls to place. :(

[18:18] <jnthn> OK, thanks for the update

[18:20] <jnthn> Umm...hmm

[18:21] <jnthn> I wonder if it's going to be related to Rakudo/NQP match discrepancies...

[18:26] *** domidumont joined
[18:26] *** domidumont left
[18:27] <jnthn> OK, I think what's wrong is this

[18:28] *** domidumont joined
[18:28] <jnthn> The creation of the Match structure is now done by an object attached to the regex code object

[18:28] <jnthn> In the rakudo case it makes a Raku-level list/array thingy

[18:29] <jnthn> In the NQP case it's an nqp::list

[18:29] <jnthn> The cursor type when parsing Rakudo code is an NQP cursor

[18:30] <jnthn> https://github.com/perl6/nqp/blob/master/src/QRegex/Cursor.nqp#L1149 fails (nqp::islist returns false)

[18:31] <jnthn> This can only happen if you are trying to extend the Rakudo grammar from Raku code, which is certainly not something that is formally supported.

[18:31] <jnthn> I've no idea how to fix it.

[18:32] <jnthn> I don't see an easy way, at least.

[18:34] <jnthn> Well, maybe we can have a way to ask for NQP lists instead

[18:36] <jnthn> Quite a hack, but possible.

[18:36] <nine> Isn't this quite similar to the issues in the MOP code?

[18:37] <jnthn> Which issues? :)

[18:38] <nine> Well, the mostly solved ones, but not completely, making code like this necessary: https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5/ClassHOW.pm6#L158

[18:39] <jnthn> Kinda, though that one could be solved also through hllize mappings, I guess

[18:39] <lizmat> nine: actually, that's also why there is a Rakudo::Internals::IterationSet

[18:40] <lizmat> which is the nqp::hash equivalent of the IterationBuffer

[18:40] <lizmat> if we would make IterationSet (or whatever the name is) a full HLL citizen, you could use that

[18:40] <jnthn> Or at least, hllize doing raku -> nqp mapping too was originally intended, since for various cases it's just unwrapping the underlying storage

[18:41] <jnthn> Anyway, enough for me today...maybe I can put in something for this tomorrow

[18:42] <lizmat> fwiw, I think we need to reconsider the whole way NQP cursors / match object interact / interweave with HLL versions

[18:42] <lizmat> we lose a *lot* of performance there

[18:45] <jnthn> Well, ultimately I think we shouldn't build the list/hash at all in general

[18:46] <jnthn> And just have AT-POS/AT-KEY pull the right thing(s) out of the Cursor

[18:46] <jnthn> Since most of the time you only access things once anyway

[18:46] <lizmat> yup, I was thinking that as well, possibly reblessing the object on the fly for caching

[18:46] <jnthn> noooo

[18:46] <lizmat> ok   :-)

[18:46] <jnthn> rebless = global deopt = very bad for performance

[18:47] <lizmat> ok

[18:47] <jnthn> It's bad enough QAST does it :)

[18:47] <jnthn> Which we did to save memory, which it does I guess... :)

[18:47] <jnthn> And it was done before we even had a specializer, to be fair

[18:47] <jnthn> But these days it's probably a net loss

[18:48] <lizmat> how about exposing the NQP cursor object?  or are you saying that the NQP Cursor is the new HLL Match object ?

[18:48] <jnthn> Cursor and Match were unified a while ago anyway

[18:48] <lizmat> yes, but in many occasions you don't need the Match logic

[18:48] <jnthn> But yeah, I think we can defer a lot of the work at least for Raku

[18:49] <jnthn> For NQP it's all a bit harder because $<foo> is not a method call

[18:49] <lizmat> https://github.com/rakudo/rakudo/blob/master/src/core.c/Str.pm6#L362   for instance

[18:50] <jnthn> Yeah, that doesn't care for any captures etc.

[18:50] <jnthn> Anyways, home time for me o/

[18:50] <lizmat> safe travels!

[18:50] <vrurg> Got a minute... jnthn, you say that extending Raku grammar from Raku is not formally supported. Does it mean than a couple of modules do something kind of illegal?

[18:54] * sena_kun is impudent enough to say that it is probably a borderline issue: if the user plays with how the code processing itself works, as a developer of the latter you cannot guarantee any possible thing will end up working nicely

[18:55] <[Coke]> verified jnthn++'s fix fixes my original Raku/doc issue. Thanks!

[19:23] <vrurg> sena_kun: that's clear. The question is wether it is allowed in general or prohibited as such?

[19:25] <vrurg> In the latter case we better ask Damian to pull out his article on creating a slang. :)

[19:33] *** Altai-man_ joined
[19:36] *** sena_kun left
[19:38] <lizmat> releasable6: status

[19:38] <releasable6> lizmat, Next release in ≈1 day and ≈23 hours. 1 blocker. 163 out of 247 commits logged

[19:38] <releasable6> lizmat, Details: https://gist.github.com/0f8387f42c3e3cb9b007f59f145bbc5c

[19:39] <lizmat> Altai-man_ do we have some automatic process moving the Merge commits to an ignorable lemma ?

[19:39] <lizmat> or do we have to do that manually ?

[19:42] <Altai-man_> lizmat, I am doing it by hands and I'm ok with that (for now), is there something bad?

[19:43] <lizmat> no, then I could do that now as well  :-)

[19:44] <Altai-man_> lizmat, I'll prepare the release next Saturday giving no new issues, including complete changelog, announcement, etc. .oO ( was my 2020.01 changelog _so_ bad lizmat wants to do it instead now )

[19:44] <lizmat> nooo...  I just want the life of a release manager easier

[19:44] <lizmat> *make

[19:44] <lizmat> if you'd rather have I didn't do, just say so  :-)

[19:45] <Altai-man_> lizmat, you are doing some awesome work with compiler, so just leave it to me. And most of your commits are pleasure to document. :)

[19:45] <lizmat> okidoki!

[19:50] *** domidumont left
[19:53] <vrurg> BTW, they accepted my tutorial for TPC 2020.

[19:53] <lizmat> aahhh, that's good news!

[19:54] <lizmat> in Houston ? right ?

[20:08] <vrurg> lizmat: right.

[20:08] <lizmat> cool  vrurg+

[20:08] <lizmat> +

[20:08] * vrurg is now looking for good tutorial for creating tutorials.

[20:09] <vrurg> The last one I had was ~25yrs ago, it was a class of 10-13yo children... :)

[20:59] <Geth> ¦ roast/6.d-errata: f846c15087 | (Elizabeth Mattijsen)++ (committed by Altai-man) | S06-signature/introspection.t

[20:59] <Geth> ¦ roast/6.d-errata: Fix test for unnamed named parameter in signature

[20:59] <Geth> ¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/f846c15087

[21:00] *** pmurias joined
[21:27] <jnthn> vrurg: I think prohibited/illegal is too strong, it's more a case of: know you're using something that hasn't been declared a supported API, so have fun and make nice things, but if an internals change breaks it, the burden is primarily on you to fix it, not primarily on the Rakudo team as is the case for regressions when using spec'd stuff.

[21:28] <vrurg> jnthn: reasonable. :) Though still would be nice if can pull the list of names somehow without re-parsing it.

[21:29] <jnthn> vrurg: Yeah, I'll try and do a workaround tomorrow. Ultimately, we will need a proper/working way to do this.

[21:30] <vrurg> jnthn: thanks! And I'll remove the blocker status as seemingly no other modules are affected anyway.

[21:30] <jnthn> Yes, mercifully few people are so adventurous :)

[21:30] <vrurg> In either case, I can workaround the problem by manually splitting the list since I can pull out the parsed part as a string.

[21:30] <jnthn> Let's see if I can make an easy fix tomorrow

[21:32] * vrurg is away for lunch. It's damn crazy day today...

[21:34] *** sena_kun joined
[21:35] *** patrickb joined
[21:36] *** Altai-man_ left
[21:47] *** camelia left
[22:19] *** MasterDuke joined
[23:03] *** patrickb left
[23:33] *** Altai-man_ joined
[23:36] *** sena_kun left
[23:38] *** lucasb left
