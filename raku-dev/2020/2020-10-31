[00:03] *** patrickz joined
[00:07] *** patrickb left
[00:10] *** Xliff joined
[00:10] *** AlexDaniel left
[00:49] *** Kaeipi joined
[00:49] *** Kaiepi left
[00:59] <Xliff> .

[00:59] <Xliff> \o

[01:12] *** Kaeipi left
[01:13] *** Kaeipi joined
[01:14] *** Kaeipi left
[01:15] *** Kaeipi joined
[01:15] *** Kaeipi left
[01:16] *** Kaeipi joined
[01:17] *** Kaeipi left
[01:19] *** Kaiepi joined
[01:20] *** Kaiepi left
[01:21] *** Kaiepi joined
[01:22] *** Kaiepi left
[01:23] *** Kaiepi joined
[01:23] *** Kaiepi left
[01:27] *** Kaiepi joined
[01:48] *** Xliff left
[01:48] *** maggotbrain left
[02:50] *** kawaii left
[02:52] *** kawaii joined
[03:20] *** Kaiepi left
[03:21] *** Kaiepi joined
[03:41] *** Kaiepi left
[03:41] *** Kaiepi joined
[05:26] *** frost-lab joined
[06:12] *** Summertime left
[06:14] *** Summertime joined
[06:31] *** sena_kun joined
[07:15] *** Kaeipi joined
[07:15] *** Kaiepi left
[07:29] *** Kaeipi left
[07:30] *** Kaeipi joined
[07:37] *** Kaeipi left
[07:38] *** Kaiepi joined
[07:54] *** Kaiepi left
[07:54] *** Kaiepi joined
[08:01] *** squashable6 left
[08:03] *** Kaiepi left
[08:03] *** squashable6 joined
[08:04] *** Kaiepi joined
[08:08] *** Altai-man joined
[08:10] *** sena_kun left
[08:25] *** frost-lab left
[08:49] *** frost-lab joined
[09:56] <Geth> ¦ roast: df8c13bbb5 | (Elizabeth Mattijsen)++ | S32-array/multislice-6e.t

[09:56] <Geth> ¦ roast: Add 6.e array multislice fast-path tests

[09:56] <Geth> ¦ roast: 

[09:56] <Geth> ¦ roast: All of the tests so far had an explicit (but potentially false)

[09:56] <Geth> ¦ roast: adverb, which caused always the slow paths to be taken.  Which

[09:56] <Geth> ¦ roast: obscured a blatant bug yesterday.  This adds tests for the fast

[09:56] <Geth> ¦ roast: code paths of array multislicing.

[09:56] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/df8c13bbb5

[10:03] <Geth> ¦ nqp: a02126987f | (Elizabeth Mattijsen)++ | docs/ops.markdown

[10:03] <Geth> ¦ nqp: Fix copypasto

[10:03] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/a02126987f

[10:03] <lizmat> Files=1336, Tests=113904, 222 wallclock secs (28.99 usr  8.59 sys + 3081.45 cusr 299.90 csys = 3418.93 CPU)

[10:06] *** frost-lab left
[10:16] <Geth> ¦ nqp: e305b1e1fa | (Elizabeth Mattijsen)++ | docs/ops.markdown

[10:16] <Geth> ¦ nqp: Document nqp::without

[10:16] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/e305b1e1fa

[10:20] *** domidumont joined
[10:25] *** domidumont left
[10:28] *** domidumont joined
[10:29] *** patrickz left
[12:09] *** sena_kun joined
[12:10] *** Altai-man left
[12:14] <Geth> ¦ rakudo: 97d473b9a5 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[12:14] <Geth> ¦ rakudo: Make Str.raku about 35% faster

[12:14] <Geth> ¦ rakudo: 

[12:14] <Geth> ¦ rakudo: - don't use multiple nqp::substr and nqp::ordats

[12:14] <Geth> ¦ rakudo: - use an ord-based lookup for common escapes, rather than a char-based one

[12:14] <Geth> ¦ rakudo: - make lookup initialization a setting compile time thing

[12:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/97d473b9a5

[12:21] <[Tux]> Rakudo v2020.10-20-g316902ddd (v6.d) on MoarVM 2020.10-11-g608b90eb1

[12:21] <[Tux]> csv-test-xs-20      0.409 -  0.412

[12:21] <[Tux]> csv-ip5xs           0.853 -  1.041

[12:21] <[Tux]> test-t --race       0.929 -  1.084

[12:21] <[Tux]> test-t              2.041 -  2.197

[12:21] <[Tux]> csv-ip5xs-20        8.491 -  8.749

[12:21] <[Tux]> test                8.489 -  8.807

[12:22] <[Tux]> test-t-20 --race    9.779 - 10.127

[12:22] <[Tux]> csv-parser         28.898 - 28.902

[12:22] <[Tux]> test-t-20          35.365 - 35.717

[12:23] <lizmat> [Tux]: could you try reverting b1912d9fcf4d56ddbd459 and see if that gives a better result ?

[12:23] <linkable6> (2020-10-26) https://github.com/rakudo/rakudo/commit/b1912d9fcf Replace all simple nqp::if(42,foo,bar) with ternaries (#3957)

[12:27] <[Tux]> running

[12:27] <lizmat> [Tux]++

[12:33] <Geth> ¦ nqp: 7868823383 | (Elizabeth Mattijsen)++ | docs/ops.markdown

[12:33] <Geth> ¦ nqp: Elaborate a bit about nqp::where

[12:33] <Geth> ¦ nqp: 

[12:33] <Geth> ¦ nqp: And how it is different from nqp::objectid.

[12:33] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/7868823383

[12:44] <[Tux]> Rakudo v2020.10-21-gdf1a84afb (v6.d) on MoarVM 2020.10-11-g608b90eb1

[12:44] <[Tux]> csv-test-xs-20      0.403 -  0.420

[12:44] <[Tux]> test-t --race       0.930 -  0.930

[12:44] <[Tux]> csv-ip5xs           0.902 -  0.960

[12:44] <[Tux]> test-t              2.129 -  2.129

[12:44] <[Tux]> test                8.416 -  8.478

[12:45] <[Tux]> csv-ip5xs-20        8.908 -  8.912

[12:45] <[Tux]> test-t-20 --race   10.200 - 10.395

[12:45] <[Tux]> csv-parser         29.120 - 30.153

[12:45] <[Tux]> test-t-20          35.817 - 35.851

[12:45] <[Tux]> so not the cause

[12:45] <lizmat> ok, so that doesn't make a difference  

[12:45] <lizmat> yup

[12:45] <lizmat> ok, good to know  :-)

[12:57] <Geth> ¦ rakudo: a541aed81b | (Elizabeth Mattijsen)++ | src/core.c/Parameter.pm6

[12:57] <Geth> ¦ rakudo: Make sigils2bit mapper a setting compiler time thing

[12:57] <Geth> ¦ rakudo: 

[12:57] <Geth> ¦ rakudo: No further changes

[12:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a541aed81b

[12:57] <lizmat> afk for a few hours&

[14:54] <[Coke]> lizmat++

[15:10] <Geth> ¦ nqp: 27ad522ff8 | Coke++ | docs/ops.markdown

[15:10] <Geth> ¦ nqp: Documentation cleanup

[15:10] <Geth> ¦ nqp: 

[15:10] <Geth> ¦ nqp: Remove note about undoc'd opcodes. This is a note for our doc creators,

[15:10] <Geth> ¦ nqp: not our doc readers.

[15:10] <Geth> ¦ nqp: 

[15:10] <Geth> ¦ nqp: Cleanup some headings (VM-specific opcodes noted with the opcode, not

[15:10] <Geth> ¦ nqp: at the header.

[15:10] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/27ad522ff8

[15:35] *** Kaiepi left
[15:57] *** Kaiepi joined
[16:01] *** Kaiepi left
[16:08] *** Altai-man joined
[16:08] *** Kaiepi joined
[16:10] *** sena_kun left
[17:58] <Geth> ¦ nqp: 9f14b2b6cc | Coke++ | docs/ops.markdown

[17:58] <Geth> ¦ nqp: Add note about HLL to opsdocs

[17:58] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/9f14b2b6cc

[17:58] <Geth> ¦ nqp: 49bd5b2c1b | Coke++ | docs/ops.markdown

[17:58] <Geth> ¦ nqp: fix some MD formatting

[17:58] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/49bd5b2c1b

[18:09] <nine> Funny....after some large detours due to problems actually unrelated to in-process-precompilation, I get stuck on an issue that seems quite basic.

[18:09] <lizmat> which is ?

[18:11] <nine> The situation is: a script using a module "Foo", and a module in a nested name space "Foo::Bar". Foo::Bar contains an our scoped sub with a default value for an argument (just ''). The script calls this sub using the fully qualified name Foo::Bar::baz(). This explodes with a Object of type Str in QAST::WVal, but not in SC

[18:13] <nine> The object in question is the default value (''). And the error happens when trying to run the compiler stub for the foo sub, i.e. as if it was called during compilation. But actually precompilation of that module was finished and the module loaded which should install the sub in a fully compiled and functional state.

[18:13] <nine> Oh and Foo::Bar uses Foo as well

[18:18] <nine> I lack a good idea on how to find out why the script is still referencing the compilation stub of the sub instead of the code object loaded from the precomp file

[18:42] <lizmat> I see..

[18:55] *** domidumont left
[19:38] <Geth> ¦ rakudo: 0a4eaf3110 | (Elizabeth Mattijsen)++ | src/core.c/Parameter.pm6

[19:38] <Geth> ¦ rakudo: Simplify constant hash initialization

[19:38] <Geth> ¦ rakudo: 

[19:38] <Geth> ¦ rakudo: And probably also unbreak the JVM build.

[19:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0a4eaf3110

[20:02] <Geth> ¦ rakudo: Altai-man assigned to patrickbkr Issue Make the offered Rakudo (Windows) versions consistent https://github.com/rakudo/rakudo/issues/3996

[20:09] *** sena_kun joined
[20:10] *** Altai-man left
[22:11] *** sena_kun left
[23:06] *** lizmat left
[23:06] *** lizmat_ joined
[23:06] *** lizmat_ is now known as lizmat

[23:07] *** Xliff joined
[23:14] *** lizmat_ joined
[23:15] *** lizmat__ joined
[23:17] *** lizmat left
[23:17] *** lizmat__ is now known as lizmat

[23:18] *** lizmat_ left
[23:31] <Geth> ¦ rakudo: vrurg++ created pull request #3997: Make auto-generated mixin role be of language revision 'c'

[23:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3997

[23:59] <[Coke]> question about round - the units parameter was, i thought, just supposed to deal with the least significant place, but instead it seems to do a closest modulo.

[23:59] <[Coke]> m: say round(1000, .01); say round(1000, 23.01)

[23:59] <camelia> rakudo-moar 85847d2f1: OUTPUT: «1000␤989.43␤»

