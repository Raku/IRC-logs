[00:22] <[Coke]> my article is about 75% done. check it into the repo when finished?

[00:39] *** Kaeipi joined
[00:39] *** Kaiepi left
[01:14] *** Altai-man joined
[01:17] *** sena_kun left
[01:44] *** MasterDuke left
[02:26] *** AlexDaniel joined
[02:26] *** AlexDaniel left
[02:26] *** AlexDaniel joined
[04:15] *** unicodable6 left
[04:15] *** benchable6 left
[04:15] *** quotable6 left
[04:15] *** coverable6 left
[04:15] *** notable6 left
[04:15] *** linkable6 left
[04:15] *** bloatable6 left
[04:15] *** releasable6 left
[04:15] *** nativecallable6 left
[04:15] *** reportable6 left
[04:15] *** statisfiable6 left
[04:15] *** evalable6 left
[04:15] *** shareable6 left
[04:15] *** sourceable6 left
[04:15] *** committable6 left
[04:15] *** greppable6 left
[04:15] *** bisectable6 left
[04:15] *** tellable6 left
[04:15] *** squashable6 left
[04:15] *** coverable6 joined
[04:15] *** benchable6 joined
[04:16] *** sourceable6 joined
[04:16] *** linkable6 joined
[04:16] *** releasable6 joined
[04:16] *** unicodable6 joined
[04:16] *** shareable6 joined
[04:16] *** evalable6 joined
[04:16] *** nativecallable6 joined
[04:16] *** bisectable6 joined
[04:16] *** greppable6 joined
[04:16] *** tellable6 joined
[04:16] *** bloatable6 joined
[04:16] *** quotable6 joined
[04:17] *** statisfiable6 joined
[04:17] *** squashable6 joined
[04:17] *** reportable6 joined
[04:18] *** notable6 joined
[04:18] *** committable6 joined
[05:15] *** sena_kun joined
[05:16] *** Altai-man left
[06:44] *** JJMerelo joined
[06:44] <JJMerelo> Today's article, which is actually by leont https://raku-advent.blog/2020/08/13/rfc22-control-flow-builtin-switch-statement-by-damian-conway/ on the swiitch statement

[06:44] <tellable6> 2020-08-12T22:55:58Z #raku-dev <leont> JJMerelo sounds fine to me, if you didn't add those links already feel free to do so

[06:45] <JJMerelo> .tell leont I still need you to accept the invitation so that the article carries your byline (and you can edit it if necessary)

[06:45] <tellable6> JJMerelo, I'll pass your message to leont

[07:36] *** leont joined
[08:00] *** JJMerelo left
[08:39] *** squashable6 left
[08:39] *** squashable6 joined
[09:14] *** Altai-man joined
[09:16] *** sena_kun left
[09:20] <Geth> ¦ rakudo: 9d6d8dd7a7 | (Nicholas Clark)++ | src/vm/moar/ops/perl6_ops.c

[09:20] <Geth> ¦ rakudo: MoarVM's struct MVMCollectable's `flags` is now `flags1` and `flags2`

[09:20] <Geth> ¦ rakudo: 

[09:20] <Geth> ¦ rakudo: As part of the fix for the data race described in MoarVM/moarvm#1336

[09:20] <Geth> ¦ rakudo: the flags member of struct MVMCollectable needs to be changed from a

[09:20] <Geth> ¦ rakudo: single MVMuint16 to two MVMuint8 values. As `p6setfirstflag` and

[09:20] <Geth> ¦ rakudo: `p6takefirstflag` directly manipulate this struct, they need to be

[09:20] <Geth> ¦ rakudo: updated to reflect the changes.

[09:20] <Geth> ¦ rakudo: 

[09:20] <linkable6> MOARVM#1336 [open]: https://github.com/MoarVM/MoarVM/pull/1336 Split `flags` in struct MVMCollectable to avoid data races when setting `MVM_CF_HAS_OBJECT_ID` and `MVM_CF_REF_FROM_GEN2`

[09:20] <Geth> ¦ rakudo: Implemented with conditional compilation so that it will work with MoarVM

[09:20] <Geth> ¦ rakudo: before and after these changes. Once MoarVM is updated, the conditional

[09:20] <Geth> ¦ rakudo: compilation can be removed.

[09:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9d6d8dd7a7

[10:43] <tobs> .tell JJMerelo post is scheduled for tomorrow.

[10:43] <tellable6> tobs, I'll pass your message to JJMerelo

[10:50] <lizmat> tobs++   # giving me some more time to do #200

[11:23] *** stoned75 joined
[12:31] *** stoned75 left
[13:10] *** stoned75 joined
[13:15] *** sena_kun joined
[13:17] *** Altai-man left
[13:36] *** squashable6 left
[13:37] *** squashable6 joined
[14:33] *** dogbert17 joined
[15:14] *** stoned75 left
[15:18] *** squashable6 left
[15:20] *** squashable6 joined
[16:01] *** [TuxCM] joined
[16:01] *** stoned75 joined
[16:22] <[TuxCM]> Rakudo version 2020.07-64-g9d6d8dd7a - MoarVM version 2020.07-19-g9a5203395

[16:22] <[TuxCM]> csv-test-xs-20      0.405 -  0.408

[16:22] <[TuxCM]> csv-ip5xs           0.844 -  0.850

[16:22] <[TuxCM]> test-t --race       0.874 -  0.972

[16:22] <[TuxCM]> test-t              1.869 -  1.874

[16:22] <[TuxCM]> test                7.982 -  8.108

[16:22] <[TuxCM]> csv-ip5xs-20        8.378 -  8.975

[16:22] <[TuxCM]> test-t-20 --race    8.669 -  8.708

[16:23] <[TuxCM]> csv-parser         25.313 - 26.545

[16:23] <[TuxCM]> test-t-20          31.677 - 32.435

[16:29] <lizmat> m: class Foo { }; Foo.Numeric

[16:29] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Use of uninitialized value of type Foo in numeric context␤  in block <unit> at <tmp> line 1␤»

[16:29] <lizmat> m: class Foo { }; Foo.Real

[16:29] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Use of uninitialized value of type Foo in numeric context␤  in block <unit> at <tmp> line 1␤»

[16:29] <lizmat> m: class Foo { }; Foo.Int

[16:29] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «No such method 'Int' for invocant of type 'Foo'␤  in block <unit> at <tmp> line 1␤␤»

[16:29] <lizmat> m: class Foo { }; say Foo.Numeric

[16:29] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Use of uninitialized value of type Foo in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[16:30] <lizmat> m: class Foo { }; say Foo.Real

[16:30] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Use of uninitialized value of type Foo in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[16:30] <lizmat> m: class Foo { }; say Foo.Int

[16:30] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «No such method 'Int' for invocant of type 'Foo'␤  in block <unit> at <tmp> line 1␤␤»

[16:30] <lizmat> m: class Foo { }; say Foo.Rat

[16:30] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «No such method 'Rat' for invocant of type 'Foo'␤  in block <unit> at <tmp> line 1␤␤»

[16:30] <lizmat> m: class Foo { }; say Foo.Num

[16:30] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «No such method 'Num' for invocant of type 'Foo'.  Did you mean 'sum'?␤  in block <unit> at <tmp> line 1␤␤»

[16:30] <lizmat> so why are Int / Rat / Num handled differently here ?

[16:31] <lizmat> m: class Foo { }; say Foo.new.Num

[16:31] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «No such method 'Num' for invocant of type 'Foo'.  Did you mean 'sum'?␤  in block <unit> at <tmp> line 1␤␤»

[16:31] <lizmat> m: class Foo { }; say Foo.new.Numeric

[16:31] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Cannot resolve caller Numeric(Foo:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[16:31] <lizmat> m: class Foo { }; say Foo.new.Real

[16:31] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Cannot resolve caller Real(Foo:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[16:31] <lizmat> m: class Foo { }; say Foo.new.Int

[16:31] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «No such method 'Int' for invocant of type 'Foo'␤  in block <unit> at <tmp> line 1␤␤»

[16:43] *** Xliff joined
[17:14] *** Altai-man joined
[17:17] *** sena_kun left
[17:41] <Xliff> nine : Any reason for the WIP tag on #3785? It's been merged.

[18:03] *** stoned75 left
[18:35] *** Xliff left
[18:39] *** vrurg left
[18:43] *** squashable6 left
[18:46] *** squashable6 joined
[18:50] *** Kaiepi joined
[18:52] *** Kaeipi left
[19:04] *** vrurg joined
[20:48] *** vrurg left
[21:04] *** MasterDuke joined
[21:15] *** sena_kun joined
[21:17] *** Altai-man left
[21:48] *** MasterDuke left
[22:03] <gfldex> raku: class C { method Str { fail('nope!') } }; say C.new;

[22:03] <evalable6> gfldex, rakudo-moar 9d6d8dd7a: OUTPUT: «C.new␤»

[22:03] <gfldex> raku: class C { method Str { fail('nope!') } }; put C.new;

[22:03] <evalable6> gfldex, rakudo-moar 9d6d8dd7a: OUTPUT: «(exit code 1) This type cannot unbox to a native string: P6opaque, Failure␤  in block <unit> at /tmp/_cndE604M7 line 1␤␤»

[22:49] <gfldex> raku: class C is Mu {}; sub s(::T) { T.^name }; s(C.new);

[22:49] <evalable6> gfldex, rakudo-moar 9d6d8dd7a: OUTPUT: «(exit code 1) Type check failed in binding to parameter '<anon>'; expected Any but got C (C.new)␤  in sub s at /tmp/HwbUG9ZnLQ line 1␤  in block <unit> at /tmp/HwbUG9ZnLQ line 1␤␤»

[22:49] <gfldex> is this one a Rakudobug?

[22:52] <[Coke]> raku: class C is Any {}; sub s(::T) { T.^name }; s(C.new);

[22:52] <evalable6> [Coke], rakudo-moar 9d6d8dd7a: OUTPUT: «»

[22:52] <[Coke]> ^^ nope

[22:52] <[Coke]> some things expect Any's and Mu's don't count.

[22:52] <gfldex> so type captures should not be able to capture Mu?

[22:53] <[Coke]> raku: class C is Mu {}; sub s(Mu ::T) { T.^name }; s(C.new);

[22:53] <evalable6> [Coke], rakudo-moar 9d6d8dd7a: OUTPUT: «»

[22:53] <[Coke]> ^^ 

[22:53] <[Coke]> default type for a parameter is rooted at Any

[22:54] <[Coke]> raku: class C is Mu {}; sub s(Mu ::T) { T.^name }; s(C.new).say

[22:54] <evalable6> [Coke], rakudo-moar 9d6d8dd7a: OUTPUT: «C␤»

[22:54] <[Coke]> so it's not the type capture, it's that you didn't override the default top level type allowed.

[22:55] <gfldex> i see

[22:59] <gfldex> raku: sub s($v :(::T)){ say $v.WHAT, T.^name }; s(42);

[22:59] <evalable6> gfldex, rakudo-moar 9d6d8dd7a: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[22:59] <evalable6> gfldex, Full output: https://gist.github.com/aeaa842db32bef10a1436ad4ceeef0e0

[23:01] <gfldex> raku: sub s($v (::T)){ say $v.WHAT, T.^name }; s(42);

[23:01] <evalable6> gfldex, rakudo-moar 9d6d8dd7a: OUTPUT: «(exit code 1) Cannot unpack or Capture `42`.␤To…»

[23:01] <evalable6> gfldex, Full output: https://gist.github.com/5de607b1a23cf4f9163d6c875d403fc2

