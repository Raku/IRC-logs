[00:28] *** epony left
[00:32] *** epony joined
[00:40] *** sena_kun left
[00:43] *** kawaii left
[00:46] *** zostay left
[00:47] *** Hotbees left
[00:49] *** tbrowder left
[00:55] *** sena_kun joined
[01:03] *** travis-ci joined
[01:03] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Remove now needless specification of "is_built"'

[01:03] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/637698362 https://github.com/rakudo/rakudo/compare/f1f690e045ed...ada7c36548a8

[01:03] *** travis-ci left
[01:24] *** awwaiid is now known as awwaiid2

[01:24] <vrurg> m: my $*FOO = 42; react { say $*FOO }

[01:24] <camelia> rakudo-moar ada7c3654: OUTPUT: «42␤»

[01:25] <vrurg> m: my $*FOO = 42; react { say $*FOO; whenever Supply.from-list(^2) { say $_ } }

[01:25] <camelia> rakudo-moar ada7c3654: OUTPUT: «42␤0␤1␤»

[01:25] <vrurg> m: my $*FOO = 42; react { say $*FOO; whenever Supply.from-list(^2) { say $_ }; CLOSE say "done"; }

[01:25] <camelia> rakudo-moar ada7c3654: OUTPUT: «42␤0␤1␤done␤»

[01:48] *** tbrowder joined
[02:01] *** tbrowder left
[02:41] *** sena_kun left
[02:44] *** awwaiid2 left
[02:56] *** sena_kun joined
[03:19] *** Kaiepi left
[03:29] *** Kaiepi joined
[04:20] <Xliff> m: my @a; @a[1000] = 1; @a.elems.say;

[04:20] <camelia> rakudo-moar ada7c3654: OUTPUT: «1001␤»

[04:21] <Xliff> m: my @a; @a[1000] = 1; @a[10][10] = 2; @a.elems.say

[04:21] <camelia> rakudo-moar ada7c3654: OUTPUT: «1001␤»

[04:21] <Xliff> m: my @a; @a[1000] = 1; @a[10][10].say

[04:21] <camelia> rakudo-moar ada7c3654: OUTPUT: «(Any)␤»

[04:22] <Xliff> m: my @a; @a[1000] = 1; @a[10] = []; @a[10][10].say

[04:22] <camelia> rakudo-moar ada7c3654: OUTPUT: «(Any)␤»

[04:41] *** sena_kun left
[04:56] *** sena_kun joined
[06:03] *** moon-child left
[06:04] *** moon-child joined
[06:41] *** sena_kun left
[06:48] *** zostay joined
[06:57] *** sena_kun joined
[07:05] *** tbrowder joined
[07:12] <Xliff> m: my @a = <a b c d e>; @a[1..*].say

[07:12] <camelia> rakudo-moar ada7c3654: OUTPUT: «(b c d e)␤»

[07:16] *** domidumont joined
[07:22] *** kawaii joined
[07:37] *** MasterDuke joined
[08:10] *** SmokeMachine joined
[08:42] *** sena_kun left
[08:57] *** sena_kun joined
[09:49] <lizmat> Files=1296, Tests=109735, 211 wallclock secs (28.26 usr  8.21 sys + 2961.93 cusr 274.96 csys = 3273.36 CPU)

[09:54] * lizmat hopes sena_kun had a good Blin run last night

[09:58] <MasterDuke> lizmat: ever see failures in t/spec/S10-packages/precompilation.t ?

[09:58] <lizmat> not recently

[09:58] <lizmat> but are you testing before or after nine's precomp dependency fix ?

[09:59] <lizmat> https://github.com/rakudo/rakudo/commit/9fa82b80aafd16553e9a

[10:00] <MasterDuke> i'm at ada7c36548a85bef002b1532b3974d236cc3de55

[10:01] <lizmat> then you have it  :-)

[10:01] <MasterDuke> do i need to clear out any precomp files?

[10:03] <MasterDuke> hm. removing rakudo/.precomp didn't fix anything

[10:04] <MasterDuke> the failing test is `not ok 47 - precompiled module constants get updated on change`, and looking at it i don't see how my libtommath change in moarvm would make a difference

[10:11] *** domidumont left
[10:18] <MasterDuke> hm, some how a file got deleted in my roast checkout inside rakudo, restored it any everything's ok

[10:28] <Geth> ¦ roast: 410f9c4d2f | (Elizabeth Mattijsen)++ | 9 files

[10:28] <Geth> ¦ roast: Batch #18 of roast RT -> GH ticket migration

[10:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/410f9c4d2f

[10:41] *** sena_kun left
[10:56] *** sena_kun joined
[11:04] <|Tux|> Rakudo version 2019.11-472-gada7c3654 - MoarVM version 2020.01-15-g1fa9764bf

[11:04] <|Tux|> csv-test-xs-20      0.418 -  0.425

[11:04] <|Tux|> csv-ip5xs           0.737 -  0.750

[11:04] <|Tux|> test-t --race       0.788 -  0.788

[11:04] <|Tux|> test-t              1.770 -  1.780

[11:04] <|Tux|> csv-ip5xs-20        6.394 -  6.678

[11:04] <|Tux|> test                7.420 -  7.612

[11:04] <|Tux|> test-t-20 --race    8.099 -  8.486

[11:04] <|Tux|> csv-parser         22.891 - 23.313

[11:04] <|Tux|> test-t-20          30.005 - 30.077

[11:11] <nine> Apparently since https://github.com/rakudo/rakudo/commit/efadff2a39641e34a02b32c475b152448d360821 we're leaking file handles of precomp files.

[11:11] <nine> Luckily the fix is pretty simple

[11:48] <Geth> ¦ rakudo: 0e9792c757 | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[11:48] <Geth> ¦ rakudo: Remove some unneeded lexical variables

[11:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0e9792c757

[12:01] <Geth> ¦ rakudo: 1331128f3b | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[12:01] <Geth> ¦ rakudo: Implement Supply.comb(Str)

[12:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1331128f3b

[12:01] <Geth> ¦ roast: cd7d5b6b08 | (Elizabeth Mattijsen)++ | S17-supply/comb.t

[12:01] <Geth> ¦ roast: Implement tests for Supply.comb(Str)

[12:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cd7d5b6b08

[12:14] *** Kaiepi left
[12:14] *** Kaiepi joined
[12:23] <Geth> ¦ rakudo: 07dce515fe | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[12:23] <Geth> ¦ rakudo: Implement Supply.comb(Str,limit)

[12:23] <Geth> ¦ rakudo: 

[12:23] <Geth> ¦ rakudo: Also simplify Supply.comb(batch,limit)

[12:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/07dce515fe

[12:23] <Geth> ¦ roast: 3b516c75e2 | (Elizabeth Mattijsen)++ | S17-supply/comb.t

[12:23] <Geth> ¦ roast: Add tests for Supply.comb(Str,limit)

[12:23] <Geth> ¦ roast: 

[12:23] <Geth> ¦ roast: And get some diversity in messages.

[12:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3b516c75e2

[12:39] <Geth> ¦ rakudo: 147ce39eaf | (Elizabeth Mattijsen)++ | src/core.c/Supply-coercers.pm6

[12:39] <Geth> ¦ rakudo: Teach Supply.head(x) to also handle * and Inf

[12:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/147ce39eaf

[12:39] <Geth> ¦ roast: cf20644362 | (Elizabeth Mattijsen)++ | S17-supply/head.t

[12:39] <Geth> ¦ roast: Add tests for Supply.head(*) and Supply.head(Inf)

[12:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cf20644362

[12:41] *** sena_kun left
[12:45] <Geth> ¦ rakudo: 550bf09750 | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[12:45] <Geth> ¦ rakudo: Simplify Supply.comb(x,limit) and Supply.split(x,limit)

[12:45] <Geth> ¦ rakudo: 

[12:45] <Geth> ¦ rakudo: Now that Supply.head has become more useful

[12:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/550bf09750

[12:55] *** sena_kun joined
[13:06] <Geth> ¦ rakudo: 2188f13bd4 | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[13:06] <Geth> ¦ rakudo: Supply.split should only produce Str

[13:06] <Geth> ¦ rakudo: 

[13:06] <Geth> ¦ rakudo: The underlying Match objects only have meaning for the chunk that they

[13:06] <Geth> ¦ rakudo: were created in.  There's no meaningful information that can be gathered

[13:06] <Geth> ¦ rakudo: from them outside of that context.

[13:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2188f13bd4

[13:22] <lizmat> sometimes I wish this were a compilation error:

[13:22] <lizmat> m: multi a() { }; multi a() { }; a

[13:22] <camelia> rakudo-moar 2188f13bd: OUTPUT: «Ambiguous call to 'a(...)'; these signatures all match:␤:()␤:()␤  in block <unit> at <tmp> line 1␤␤»

[13:29] *** travis-ci joined
[13:29] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Implement Supply.comb(Str)'

[13:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/637916156 https://github.com/rakudo/rakudo/compare/0e9792c7576c...1331128f3b57

[13:29] *** travis-ci left
[13:31] <lizmat> another repl.t flapper

[13:36] <Geth> ¦ rakudo: a666e73639 | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[13:36] <Geth> ¦ rakudo: Implement Supply.comb(Regex)

[13:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a666e73639

[13:48] <Geth> ¦ rakudo: 92d465dba1 | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[13:48] <Geth> ¦ rakudo: Handle the case when a chunk has no matches

[13:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/92d465dba1

[13:49] <Geth> ¦ roast: 089e2ef4ef | (Elizabeth Mattijsen)++ | S17-supply/comb.t

[13:49] <Geth> ¦ roast: Add tests for Supply.comb(Regex)

[13:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/089e2ef4ef

[13:57] <Geth> ¦ rakudo: 622b20fba0 | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[13:57] <Geth> ¦ rakudo: Implement Supply.comb(Regex,limit)

[13:57] <Geth> ¦ rakudo: 

[13:57] <Geth> ¦ rakudo: By actually creating a single candidate (foo,limit) doing the

[13:57] <Geth> ¦ rakudo: wrapping with .head.

[13:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/622b20fba0

[14:07] *** dogbert17 joined
[14:12] * [Coke] wonders why Raku Carp has "cuckle" which seems to have replaced "cluck"

[14:13] <Geth> ¦ rakudo: f74e506fdd | (Elizabeth Mattijsen)++ | src/core.c/Supply-factories.pm6

[14:13] <Geth> ¦ rakudo: Don't allow :match on Supply.comb

[14:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f74e506fdd

[14:13] <Geth> ¦ roast: b425a4b31f | (Elizabeth Mattijsen)++ | S17-supply/comb.t

[14:13] <Geth> ¦ roast: Add tests for Supply.comb(Regex,limit)

[14:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b425a4b31f

[14:13] <Geth> ¦ roast: a5af083cd5 | (Elizabeth Mattijsen)++ | S17-supply/comb.t

[14:13] <Geth> ¦ roast: Add tests for Supply.comb(:match)

[14:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a5af083cd5

[14:15] <[Coke]> ... and only in the docs, apparently, not the code? /me is confused.

[14:16] * moritz finds the whole Carp naming very confusing, even in the Perl 5 module

[14:17] <[Coke]> Yah, so I would expect it to either follow Perl 5 so there's only one kind of confusion, or have a reason for any changes. :)

[14:19] *** Xliff left
[14:23] <lizmat> m: sub a(\b) { b(0) }   # que ?

[14:23] <camelia> rakudo-moar 622b20fba: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '&b' is not declared␤at <tmp>:1␤------> 3sub a(\b) { 7⏏5b(0) }   # que ?␤»

[14:23] <nine> The Carp confusion is one of the worst things in Perl 5 for me. I think I've never used carp or cluck without first looking at the man page

[14:23] <lizmat> looks like this is happening in the optimizer

[14:23] <lizmat> otoh, "confess" has always been clear to me  :)

[14:24] <lizmat> as in: first you confess, then you die  :-)

[14:25] <[Coke]> win 3

[14:25] <[Coke]> oops

[14:28] *** lucasb joined
[14:29] <MasterDuke> my libtommath v1.2.0 upgrade seems to be working fine, but there are linking errors in appveyor and in travis (with clang only). anybody have a suggestion? https://ci.appveyor.com/project/samcv/moarvm-35u74/builds/30157626/job/su4gm0epcgtcgeg6 and https://travis-ci.org/MoarVM/MoarVM/jobs/637928126?utm_medium=notification&utm_source=github_status

[14:29] <MasterDuke> for reference

[14:36] <Geth> ¦ rakudo: 6d6318d47a | (Elizabeth Mattijsen)++ | src/core.c/Supply-coercers.pm6

[14:36] <Geth> ¦ rakudo: Allow Supply.head(*-3) to be synonym of Supply.tail(3)

[14:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6d6318d47a

[14:36] <Geth> ¦ roast: db3fec5c30 | (Elizabeth Mattijsen)++ | S17-supply/head.t

[14:36] <Geth> ¦ roast: Add tests for Supply.head(*-3)

[14:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/db3fec5c30

[14:39] <MasterDuke> is the RT # mapped directly to the issue number in https://github.com/Raku/old-issue-tracker/?

[14:42] *** sena_kun left
[14:54] *** lizmat left
[14:55] *** sena_kun joined
[14:56] *** domidumont joined
[15:36] <lucasb> m: say (1..10).head(*-3)

[15:36] <camelia> rakudo-moar 6d6318d47: OUTPUT: «(1 2 3 4 5 6 7)␤»

[15:37] <lucasb> m: say Supply.from-list(1..10).head(*-3)

[15:37] <camelia> rakudo-moar 6d6318d47: OUTPUT: «Supply.new␤»

[15:37] <lucasb> m: say Supply.from-list(1..10).head(*-3).list

[15:37] <camelia> rakudo-moar 6d6318d47: OUTPUT: «(8 9 10)␤»

[15:49] <MasterDuke> so in roast we have tests for expmod that would that throw an exception if we were catching errors in libtommath

[15:50] <MasterDuke> https://github.com/perl6/roast/blob/master/S32-num/expmod.t#L25-L37

[15:51] <MasterDuke> the intent is to test that it doesn't hang, but the value we're testing for (0) is just because we don't catch the error and return a default value which ends up being 0

[15:54] <MasterDuke> is it valid to just change the tests to dies-ok?

[15:55] <MasterDuke> or should we try to keep behavior the same for Raku 6.c-d and change it only for Raku 6.e?

[15:58] <dogbert17> MasterDuke: what happens if you run is-prime(-1) with the new libtommath installed ?

[15:59] <MasterDuke> dogbert17: `False`

[16:00] <dogbert17> excellent

[16:00] <dogbert17> m: say is-prime(-1)

[16:00] <camelia> rakudo-moar 6d6318d47: OUTPUT: «Invalid number of rounds (100), valid range is 0..256␤␤  in block <unit> at <tmp> line 1␤␤»

[16:39] *** domidumont left
[16:41] *** sena_kun left
[16:52] *** patrickb joined
[16:57] *** sena_kun joined
[16:59] *** lizmat joined
[17:18] *** travis-ci joined
[17:18] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Supply.split should only produce Str

[17:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/637941512 https://github.com/rakudo/rakudo/compare/550bf097509d...2188f13bd4b2

[17:18] *** travis-ci left
[17:24] *** |Tux| left
[17:32] *** |Tux| joined
[17:35] *** |Tux| left
[17:54] *** |Tux| joined
[18:01] *** lizmat left
[18:24] *** patrickb left
[18:30] *** domidumont joined
[18:35] *** patrickb joined
[18:36] <patrickb> tony-o: I'm planing on creating a new ecosystem. There was some talking about that here: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-12-10#l37

[18:39] *** rypervenche left
[18:41] *** sena_kun left
[18:55] *** sena_kun joined
[19:01] *** rypervenche joined
[19:18] *** domidumont left
[19:27] *** lizmat joined
[19:45] *** lizmat left
[19:50] *** patrickb left
[19:52] *** patrickb joined
[20:02] <patrickb> I'd like to have an opinion on https://github.com/rakudo/rakudo/pull/3422 Especially the fact, that it slightly changes the semantics of --git-reference.

[20:03] <patrickb> vrurg, nine: ^

[20:03] *** lizmat joined
[20:13] <Geth> ¦ problem-solving: Kaiepi assigned to jnthn Issue Routines could use more support for reflection https://github.com/Raku/problem-solving/issues/149

[20:13] <patrickb> .tell AlexDaniel I'd like to move github.com/patrickbkr/rakudobrew -> github.com/Raku/App-Rakubrew Are you the right person so ask?

[20:13] <tellable6> patrickb, I'll pass your message to AlexDaniel

[20:15] <patrickb> .tell AlexDaniel I might be able to do it myself! Any precautions I should take?

[20:15] <tellable6> patrickb, I'll pass your message to AlexDaniel

[20:27] *** lizmat left
[20:42] *** sena_kun left
[20:55] *** sena_kun joined
[21:18] <AlexDaniel> .

[21:18] <tellable6> 2020-01-16T20:13:27Z #raku-dev <patrickb> AlexDaniel I'd like to move github.com/patrickbkr/rakudobrew -> github.com/Raku/App-Rakubrew Are you the right person so ask?

[21:18] <tellable6> 2020-01-16T20:15:15Z #raku-dev <patrickb> AlexDaniel I might be able to do it myself! Any precautions I should take?

[21:18] <AlexDaniel> patrickb: rename it first, then move it

[21:18] <AlexDaniel> patrickb: that said, keep in mind that then you should never create rakudobrew repo in your own account

[21:19] <AlexDaniel> patrickb: although… hold on… what exactly are we trying to do? :)

[21:19] <AlexDaniel> it'll appear as “forked from tadzik/rakudobrew” forever

[21:20] <AlexDaniel> there's a way to fix that but it's difficult

[21:20] <AlexDaniel> I think nothing links to patrickbkr/rakudobrew yet

[21:20] <AlexDaniel> so why not create a new repo then?

[21:20] <AlexDaniel> or better, why not ask tadzik to move it?

[21:20] <vrurg> .ask lizmat We loose lexically declared dynamic variables within react blocks. Similar happens to start, where Promise preserves the outer context. Does Supply code do the same somewhere?

[21:20] <tellable6> vrurg, I'll pass your message to lizmat

[21:23] <AlexDaniel> patrickb: do we want to break away from the original rakudobrew or not?

[21:48] *** lucasb left
[21:48] <patrickb> AlexDaniel: Dunno? What are the pros/cons?

[21:48] <AlexDaniel> patrickb: well, the con is that everyone using rakudobrew will probably have to nuke the whole thing and reinstall it

[21:49] <AlexDaniel> if we start a new repo that is

[21:49] <patrickb> AlexDaniel: That's the case in every case.

[21:49] <AlexDaniel> and pros… no need to maintain backcompat?

[21:49] <patrickb> ok then new repo is the way to go

[21:49] <patrickb> just "new" on the Raku project page + push?

[21:49] <AlexDaniel> yep

[21:50] <patrickb> kthnks!

[21:50] <AlexDaniel> and then just perhaps file an issue for the original rakudobrew pointing out that there's a newer version

[21:53] <patrickb> Once I have everything set up.

[21:53] <patrickb> The new rakubrew won't be installed via git clone anymore, still some way to go.

[21:56] *** Kaiepi left
[22:02] <AlexDaniel> patrickb: consider adding Raku team and giving it write access https://github.com/Raku/App-Rakubrew/settings/access

[22:05] <patrickb> Done!

[22:19] *** Xliff joined
[22:28] *** Kaiepi joined
[22:33] <AlexDaniel> patrickb: there's no code yet!

[22:34] <patrickb> Now there is. :-)

[22:35] <patrickb> Currently working on getting the release process automated using Circle CI..

[22:41] *** sena_kun left
[22:46] *** Kaiepi left
[22:48] *** Kaiepi joined
[22:57] *** sena_kun joined
[23:13] *** lizmat joined
[23:44] <Geth> ¦ rakudo: 339930231a | (Ben Davies)++ | src/core.c/Parameter.pm6

[23:44] <Geth> ¦ rakudo: Fix raw slurpy onearg parameter handling in Parameter.raku

[23:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/339930231a

