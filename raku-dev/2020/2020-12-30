[03:25] *** leont left
[05:10] *** squashable6 left
[05:13] *** squashable6 joined
[05:24] *** squashable6 left
[05:25] *** squashable6 joined
[06:21] *** Altai-man joined
[06:47] *** sivoais_ joined
[06:47] *** sivoais left
[06:51] *** frost-lab joined
[07:22] *** sivoais_ left
[07:22] *** sivoais joined
[07:52] *** sivoais left
[07:57] *** sena_kun joined
[07:57] *** patrickb joined
[07:59] *** Altai-man left
[08:03] *** sivoais joined
[08:52] <Geth> ¦ rakudo/rt-6588: 336a21701b | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | src/core.c/IO/Path.pm6

[08:52] <Geth> ¦ rakudo/rt-6588: Changes message string

[08:52] <Geth> ¦ rakudo/rt-6588: 

[08:52] <Geth> ¦ rakudo/rt-6588: Also DRY by putting it into a constant. Closes Raku/old-issue-tracker#6588 when accepted.

[08:52] <Geth> ¦ rakudo/rt-6588: review: https://github.com/rakudo/rakudo/commit/336a21701b

[08:53] <Geth> ¦ rakudo: JJ++ created pull request #4146: Changes message string

[08:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4146

[10:16] *** leont joined
[10:30] <Geth> ¦ rakudo: 4384fc5c65 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 5 files

[10:30] <Geth> ¦ rakudo: Implement "is implementation-detail" for classes (#4135)

[10:30] <Geth> ¦ rakudo: 

[10:30] <Geth> ¦ rakudo: Implement "is implementation-detail" for classes

[10:30] <Geth> ¦ rakudo: 

[10:30] <Geth> ¦ rakudo: This implements the "is implementation-detail" trait on classes and roles.

[10:30] <Geth> ¦ rakudo: It also implements an "is-implementation-detail" method on classes (and

[10:30] <Geth> ¦ rakudo: roles), that will either return 0 if the class **is not** an implementation

[10:30] <linkable6> RAKUDO#4135 [closed]: https://github.com/rakudo/rakudo/pull/4135 Implement "is implementation-detail" for classes

[10:30] <Geth> ¦ rakudo: detail, and 1 if the class *is* an implementation detail.

[10:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4384fc5c65

[10:32] <Geth> ¦ rakudo: ed6e2c8b0e | (Elizabeth Mattijsen)++ | src/core.c/Compiler.pm6

[10:32] <Geth> ¦ rakudo: Fix problem in Compiler.verbose-config

[10:32] <Geth> ¦ rakudo: 

[10:32] <Geth> ¦ rakudo: Spotted by Will Coleda++

[10:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ed6e2c8b0e

[10:51] <[Tux]> Rakudo v2020.12-25-ged6e2c8b0 (v6.d) on MoarVM 2020.12-14-g78f4f1d9e

[10:51] <[Tux]> csv-test-xs-20      0.377 -  0.392

[10:51] <[Tux]> csv-ip5xs           0.816 -  0.851

[10:51] <[Tux]> test-t --race       0.858 -  0.884

[10:51] <[Tux]> test-t              1.969 -  1.988

[10:51] <[Tux]> test                7.725 -  7.909

[10:51] <[Tux]> csv-ip5xs-20        8.032 -  8.059

[10:51] <[Tux]> test-t-20 --race    9.504 -  9.745

[10:51] <[Tux]> csv-parser         26.504 - 26.613

[10:51] <[Tux]> test-t-20          32.876 - 33.146

[10:52] <Geth> ¦ roast/solaris: 1919f16632 | (Nicholas Clark)++ | S16-io/eof.t

[10:52] <Geth> ¦ roast/solaris: /proc/$*PID/status is a binary file on Solaris, so skip this test there.

[10:52] <Geth> ¦ roast/solaris: 

[10:52] <Geth> ¦ roast/solaris: The test is for reading line-by-line, so trying to change it to handle

[10:52] <Geth> ¦ roast/solaris: binary files defeats the intent.

[10:52] <Geth> ¦ roast/solaris: review: https://github.com/Raku/roast/commit/1919f16632

[10:52] <Geth> ¦ roast/solaris: 1aa335ddd9 | (Nicholas Clark)++ | S29-os/system.t

[10:52] <Geth> ¦ roast/solaris: Tweak the subtest "run and shell's :cwd" so that it also passes on Solaris.

[10:52] <Geth> ¦ roast/solaris: 

[10:52] <Geth> ¦ roast/solaris: It turns out that `echo $PWD` isn't *quite* portable. The test assumes that

[10:52] <Geth> ¦ roast/solaris: the shell will set the environment variable PWD to the current directory as

[10:52] <Geth> ¦ roast/solaris: part of its startup. This is needed, because the implementation detail being

[10:52] <Geth> ¦ roast/solaris: tested here is that the command is run with a *different* current directory

[10:52] <Geth> ¦ roast/solaris: from the Raku code - ie there is a `chdir` happening as part of the command

[10:52] <Geth> ¦ roast/solaris: <…commit message has 24 more lines…>

[10:52] <Geth> ¦ roast/solaris: review: https://github.com/Raku/roast/commit/1aa335ddd9

[10:53] <Geth> ¦ roast: nwc10++ created pull request #713: Two more spectests that need tweaking to work on Solaris

[10:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/713

[11:01] <nwc10> lizmat: I'm not in a positiong to confirm that spectests (still) pass on Win32. I don't think that I goofed my edit

[11:01] <nwc10> but "I don't think I goofed my edit" is true even when it turns out that I did

[11:08] <lizmat> he

[11:09] <nwc10> m: -0.0 ** -3.0

[11:09] <camelia> rakudo-moar ed6e2c8b0: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "-" in expression "-0.0 **" in sink context (line 1)␤»

[11:09] <nwc10> m: say -0.0 ** -3.0

[11:09] <camelia> rakudo-moar ed6e2c8b0: OUTPUT: «-Inf␤»

[11:09] <nwc10> m: say -0.0 ** -2.5

[11:09] <camelia> rakudo-moar ed6e2c8b0: OUTPUT: «-Inf␤»

[11:09] <nwc10> m: say -0.0 ** -2.0

[11:09] <camelia> rakudo-moar ed6e2c8b0: OUTPUT: «-Inf␤»

[11:09] <nwc10> m: say 0.0 ** -2.0

[11:09] <camelia> rakudo-moar ed6e2c8b0: OUTPUT: «Inf␤»

[11:09] <nwc10> m: say 0.0 ** -3.0

[11:09] <camelia> rakudo-moar ed6e2c8b0: OUTPUT: «Inf␤»

[11:09] <nwc10> "today I learned" but I think I need to check one of those

[11:11] <nwc10> yes, I think that -0.0 ** -2.5 should be +inf

[11:14] <Geth> ¦ rakudo/Seq.slice: c53d080c3d | (Elizabeth Mattijsen)++ | 2 files

[11:14] <Geth> ¦ rakudo/Seq.slice: Introducing Seq.slice(indices)

[11:14] <Geth> ¦ rakudo/Seq.slice: 

[11:14] <Geth> ¦ rakudo/Seq.slice: It appears that a "slice" method on Seq has been discussed extensively

[11:14] <Geth> ¦ rakudo/Seq.slice: in the longer ago past.  So I thought I'd have a go at it today.

[11:14] <Geth> ¦ rakudo/Seq.slice: 

[11:14] <Geth> ¦ rakudo/Seq.slice: The .slice method takes any number of indices that are monotonocally

[11:14] <Geth> ¦ rakudo/Seq.slice: increasing (that is, any later index value *must* be greater than any

[11:14] <Geth> ¦ rakudo/Seq.slice: <…commit message has 17 more lines…>

[11:14] <Geth> ¦ rakudo/Seq.slice: review: https://github.com/rakudo/rakudo/commit/c53d080c3d

[11:14] <Geth> ¦ rakudo/Seq.slice: 9e61a71be7 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[11:14] <Geth> ¦ rakudo/Seq.slice: Add return type to Any.slice

[11:14] <Geth> ¦ rakudo/Seq.slice: review: https://github.com/rakudo/rakudo/commit/9e61a71be7

[11:18] <nwc10> oh, and -0.0 ** 2.0 should also be +Inf

[11:33] <Geth> ¦ rakudo: 63be83d321 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[11:33] <Geth> ¦ rakudo: Introducing Seq.slice(indices) (#3983)

[11:33] <Geth> ¦ rakudo: 

[11:33] <Geth> ¦ rakudo: Introducing Seq.slice(indices)

[11:33] <Geth> ¦ rakudo: 

[11:33] <Geth> ¦ rakudo: It appears that a "slice" method on Seq has been discussed extensively

[11:33] <Geth> ¦ rakudo: in the longer ago past.  So I thought I'd have a go at it today.

[11:33] <Geth> ¦ rakudo: 

[11:33] <linkable6> RAKUDO#3983 [closed]: https://github.com/rakudo/rakudo/pull/3983 Introducing Seq.slice(indices)

[11:33] <Geth> ¦ rakudo: <…commit message has 19 more lines…>

[11:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/63be83d321

[11:56] *** Altai-man joined
[11:59] *** sena_kun left
[12:03] *** patrickb left
[12:11] <Geth> ¦ rakudo/faster-slice-access: e20c14d21c | (Elizabeth Mattijsen)++ | 2 files

[12:11] <Geth> ¦ rakudo/faster-slice-access: Streamline handling of iterable.elems

[12:11] <Geth> ¦ rakudo/faster-slice-access: 

[12:11] <Geth> ¦ rakudo/faster-slice-access: By making a private method for it.  We only need this when a

[12:11] <Geth> ¦ rakudo/faster-slice-access: Callable or a Whatever is encountered.  And it should inline

[12:11] <Geth> ¦ rakudo/faster-slice-access: quickly enough when needed.

[12:11] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/e20c14d21c

[12:19] *** frost-lab left
[12:27] <lizmat> m: my @a = <a b c>; dd @a[1]:delete = 42; dd @a   # feels to me this should either fail or assign to @a[1]

[12:27] <camelia> rakudo-moar 63be83d32: OUTPUT: «Int @a = 42␤Array @a = ["a", Any, "c"]␤»

[12:29] *** squashable6 left
[12:31] *** squashable6 joined
[12:41] *** patrickb joined
[12:43] <lizmat> m: my @a = <a b c>;my $b := @a[1].delete; dd $b = 42; dd @a

[12:43] <camelia> rakudo-moar 63be83d32: OUTPUT: «No such method 'delete' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[12:43] <lizmat> m: my @a = <a b c>;my $b := @a[1]:delete; dd $b = 42; dd @a

[12:43] <camelia> rakudo-moar 63be83d32: OUTPUT: «Int @a = 42␤Array @a = ["a", Any, "c"]␤»

[12:48] <dogbert17> lizmat: what should your slice branch return here?

[12:48] <dogbert17> m: my @a = ("a", "b", "c", "d", "e", "f"); @a[3, 30, 5]:delete; say @a

[12:48] <camelia> rakudo-moar 63be83d32: OUTPUT: «[a b c (Any) e]␤»

[12:50] <lizmat> the same ?

[12:51] <lizmat> there's some debate about DELETE-POS on a non-existent element returning Nil rather than Any, but yeah

[12:51] <lizmat> that's another discussion

[12:53] <dogbert17> it does return the same. I naively thought it would return [a b c e]

[12:53] <lizmat> :delete, does not delete elements, just nulls them

[12:53] <lizmat> there's a PR for introducing an :eject adverb

[12:54] <lizmat> that *would* eject the element from the arrauy

[12:54] <lizmat> *array

[12:54] <lizmat> didn't get much traction, probably severely bitrotted now

[12:55] <dogbert17> ok, cool, so why does the (Any) show up at index 3 when the delete was at index 30? I'm obviously missing something obvious here.

[12:58] * dogbert17 is trying to improve the slice test PR

[12:58] <lizmat> yeah, you're looking at the array *after* the deletion: what you see is the result of the deletion of element at 3

[12:59] <lizmat> the deletion of element at 5 caused the array to shorten as it was the last element

[12:59] <lizmat> m: my @a = ("a", "b", "c", "d", "e", "f"); dd @a[3, 30, 5]:delete; dd @a

[12:59] <camelia> rakudo-moar 63be83d32: OUTPUT: «("d", Any, "f")␤Array @a = ["a", "b", "c", Any, "e"]␤»

[13:00] <lizmat> note that in the *result* of the deletion, the Any appears at index 1

[13:00] <lizmat> and the question is: should that be an Any or a Nil (in another discussion :-)

[13:01] <dogbert17> thx for the explanation. there will be more questions I sure :-)

[13:22] <nwc10> m: say -0e0 ** -2.5

[13:22] <camelia> rakudo-moar 63be83d32: OUTPUT: «-Inf␤»

[13:22] <nwc10> m: say -0,0 ** -2.5

[13:22] <camelia> rakudo-moar 63be83d32: OUTPUT: «0Inf␤»

[13:22] <nwc10> m: say -0.0 ** -2.5

[13:22] <camelia> rakudo-moar 63be83d32: OUTPUT: «-Inf␤»

[13:23] <nwc10> m: say -0.0 ** -2.0

[13:23] <camelia> rakudo-moar 63be83d32: OUTPUT: «-Inf␤»

[13:23] <nwc10> m: say -0e0 ** -2.0

[13:23] <camelia> rakudo-moar 63be83d32: OUTPUT: «-Inf␤»

[13:25] <nwc10> m: use nqp; say nqp::pow_n(-0e0, -2e0

[13:25] <camelia> rakudo-moar 63be83d32: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3use nqp; say nqp::pow_n(-0e0, -2e07⏏5<EOL>␤»

[13:26] <nwc10> m: use nqp; say nqp::pow_n(-0e0, -2e0)

[13:26] <camelia> rakudo-moar 63be83d32: OUTPUT: «Inf␤»

[13:26] <nwc10> there. +Inf

[13:26] <nwc10> so NQP isn't "wrong". That's good.

[13:26] *** domidumont joined
[13:44] <nine> lizmat: there's nqp::hllboolfor($value, 'Raku') which makes it easy to return proper Bools from NQP code

[13:44] <lizmat> ah?   TIL

[13:44] <lizmat> ok, if that's the case, then I will make them Bools  :-)

[13:47] *** domidumont left
[13:50] <Geth> ¦ rakudo/class-implementation-detail: 4 commits pushed by (Elizabeth Mattijsen)++

[13:50] <Geth> ¦ rakudo/class-implementation-detail: 51a51c832f | Implement "is implementation-detail" for classes

[13:50] <Geth> ¦ rakudo/class-implementation-detail: 63a2170d89 | Also apply "is implementation-detail" correctly on roles

[13:50] <Geth> ¦ rakudo/class-implementation-detail: aa469bd08e | Add "is-implementatio-detail" delegation

[13:50] <Geth> ¦ rakudo/class-implementation-detail: 50add9fdbb | Make .^is-implementation-detail return Bools

[13:50] <Geth> ¦ rakudo/class-implementation-detail: review: https://github.com/rakudo/rakudo/compare/51a51c832f7e^...50add9fdbb22

[14:39] <patrickb> I'd value some feedback on https://github.com/rakudo/rakudo/pull/4138

[15:44] <dogbert17> lizmat: does the updated https://github.com/Raku/roast/pull/712 look better?

[15:45] <lizmat> looks pretty good to me :-)

[15:45] <lizmat> ah, in the :delete cases, maybe also test the state of the array ?

[15:46] <lizmat> and also test the :!delete case?

[15:49] <dogbert17> ok, will fix

[15:49] <lizmat> dogbert17++

[15:57] *** sena_kun joined
[15:59] *** Altai-man left
[17:01] *** domidumont joined
[17:16] <Geth> ¦ rakudo: nwc10++ created pull request #4148: Implement `sec`, `asec` and `sech` in terms of other NQP trigonometric functions.

[17:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4148

[18:35] *** domidumont left
[19:56] *** Altai-man joined
[19:59] *** sena_kun left
[20:05] *** b2gills left
[20:06] *** MasterDuke left
[20:16] *** lucasb joined
[20:23] *** MasterDuke joined
[20:27] *** b2gills joined
[21:25] *** Xliff joined
[21:55] <Geth> ¦ nqp: a53e8a9d94 | (Patrick Böker)++ | 2 files

[21:55] <Geth> ¦ nqp: JVM, JS: Change `procspawnasync` to explicitly take the program name

[21:55] <Geth> ¦ nqp: 

[21:55] <Geth> ¦ nqp: As the value passed as program name and arg0 need to be different in some

[21:55] <Geth> ¦ nqp: cases (e.g. a space in the program name on Windows) we need to retrieve

[21:55] <Geth> ¦ nqp: both separately. Rakudo can then dictate what each value should be.

[21:55] <Geth> ¦ nqp: Part of a fix for rakudo/rakudo#4117

[21:55] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/a53e8a9d94

[21:55] <Geth> ¦ nqp: 118062e71c | (Patrick Böker)++ | tools/templates/MOAR_REVISION

[21:55] <linkable6> RAKUDO#4117 [open]: https://github.com/rakudo/rakudo/issues/4117 routine run bad works in windows 10

[21:55] <Geth> ¦ nqp: Bump MoarVM

[21:55] <Geth> ¦ nqp: 

[21:55] <Geth> ¦ nqp: Pulls in the changed `nqp::procspawnasync` semantics

[21:55] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/118062e71c

[21:55] <Geth> ¦ nqp: d65a8c1092 | (Patrick Böker)++ (committed using GitHub Web editor) | 3 files

[21:55] <Geth> ¦ nqp: Merge pull request #689 from patrickbkr/fix-win-proc-with-space

[21:55] <Geth> ¦ nqp: 

[21:55] <Geth> ¦ nqp: JVM, JS: Change `procspawnasync` to explicitly take the program name

[21:55] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/d65a8c1092

[22:02] <Geth> ¦ rakudo: 570372f1f2 | (Patrick Böker)++ | src/core.c/Proc/Async.pm6

[22:02] <Geth> ¦ rakudo: Fix calling programs with spaces in their path on Windows

[22:02] <Geth> ¦ rakudo: 

[22:02] <Geth> ¦ rakudo: `procspawnasync` will now explicitly take the program name as a

[22:02] <Geth> ¦ rakudo: separate argument. This allows us to pass a different value for

[22:02] <Geth> ¦ rakudo: program name and arg0. That's necessary in some cases (e.g. a space

[22:02] <Geth> ¦ rakudo: in the program name on Windows).

[22:02] <Geth> ¦ rakudo: 

[22:02] <Geth> ¦ rakudo: Fixes rakudo/rakudo#4117

[22:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/570372f1f2

[22:02] <linkable6> RAKUDO#4117 [closed]: https://github.com/rakudo/rakudo/issues/4117 routine run bad works in windows 10

[22:02] <Geth> ¦ rakudo: b3367e95ea | (Patrick Böker)++ | tools/templates/NQP_REVISION

[22:02] <Geth> ¦ rakudo: Bump NQP

[22:02] <Geth> ¦ rakudo: 

[22:02] <Geth> ¦ rakudo: Pulls in the changed semantics of `nqp::procspawnasync`.

[22:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b3367e95ea

[22:02] <Geth> ¦ rakudo: 86fd7f67ba | (Patrick Böker)++ (committed using GitHub Web editor) | 2 files

[22:02] <Geth> ¦ rakudo: Merge pull request #4138 from patrickbkr/fix-win-proc-with-space

[22:02] <Geth> ¦ rakudo: 

[22:02] <Geth> ¦ rakudo: Fix calling programs with spaces in their path on Windows

[22:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/86fd7f67ba

[22:06] *** patrickb left
[22:14] *** Altai-man left
[22:19] *** travis-ci joined
[22:19] <travis-ci> NQP build errored. Patrick Böker 'Merge pull request #689 from patrickbkr/fix-win-proc-with-space

[22:19] <travis-ci> https://travis-ci.com/Raku/nqp/builds/211361262 https://github.com/Raku/nqp/compare/de93c668c641...d65a8c109273

[22:19] *** travis-ci left
[22:23] *** patrickb joined
[22:29] *** travis-ci joined
[22:29] <travis-ci> NQP build errored. Patrick Böker 'Merge pull request #689 from patrickbkr/fix-win-proc-with-space

[22:29] <travis-ci> https://travis-ci.org/Raku/nqp/builds/752192447 https://github.com/Raku/nqp/compare/de93c668c641...d65a8c109273

[22:29] *** travis-ci left
[22:55] <Geth> ¦ nqp: patrickbkr++ created pull request #690: Adapt tests to new `nqp::spawnprocasync` semantics

[22:55] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/690

[22:57] *** patrickb left
[23:01] *** patrickb joined
