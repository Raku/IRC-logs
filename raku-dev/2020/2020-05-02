[00:04] *** pamplemousse joined
[00:22] *** hungrydonkey joined
[00:42] *** finsternis left
[01:00] <vrurg> timotimo: around?

[01:01] <timotimo> asquare

[01:02] <vrurg> I was one complaining about not having access to plugin marketplace in CT. I think I found what's wrong.

[01:03] <vrurg> Here is the request URL from CT: https://plugins.jetbrains.com/api/search?orderBy=rating&build=CT-2020.4.0&max=9 – the server returns empty array on this

[01:04] <vrurg> timotimo: most likely it's the build parameter which is the cause.

[01:05] <timotimo> sorry, what is CT?

[01:06] <vrurg> timotimo: Comma CT :)

[01:06] <timotimo> is that CommuniTy?

[01:06] <timotimo> or CompleTe?

[01:07] <vrurg> Community for now. 

[01:07] <timotimo> ah i see it mentioned

[01:08] <timotimo> sorry, i know next to nothing about jetbrains' plugin repository thing

[01:08] <vrurg> You participate in Comma development or am I mistaken?

[01:12] <timotimo> you are correct

[01:12] <timotimo> i do not, however, do releases

[01:12] <timotimo> so unfortunately i have no idea how to help you :(

[01:12] <timotimo> but the others read here, too

[01:13] <vrurg> At least I have where to point at if I lost the logs where I got the URL. :)

[01:14] <vrurg> anyway, thanks!

[02:01] *** hungryd14 joined
[02:02] *** hungrydonkey left
[02:06] *** hungryd14 left
[02:10] *** hungrydonkey joined
[02:26] *** hungryd28 joined
[02:30] *** hungrydonkey left
[02:41] *** hungryd28 left
[02:42] *** hungrydonkey joined
[03:12] *** pamplemousse left
[03:37] *** moon-child joined
[03:37] *** hungrydonkey left
[03:37] *** hungrydonkey joined
[04:48] *** hungrydonkey left
[04:58] *** hungrydonkey joined
[05:12] *** hungrydonkey left
[05:19] *** hungrydonkey joined
[05:26] *** hungrydonkey left
[05:31] *** hungrydonkey joined
[05:32] *** hungrydonkey left
[06:05] *** hungrydonkey joined
[06:07] *** hungrydonkey left
[08:34] *** sena_kun joined
[08:50] <lizmat> Files=1306, Tests=111242, 214 wallclock secs (28.43 usr  8.39 sys + 3002.33 cusr 280.96 csys = 3320.11 CPU)

[08:56] *** Altai-man_ joined
[08:59] *** sena_kun left
[10:35] <Geth> ¦ rakudo: 31ffc2bd2d | (Stefan Seifert)++ | 2 files

[10:35] <Geth> ¦ rakudo: Make timing based performance tests opt in via RAKUDO_RUN_TIMING_TESTS

[10:35] <Geth> ¦ rakudo: 

[10:35] <Geth> ¦ rakudo: It's easier to tell a hand full of core developers to set an environment

[10:35] <Geth> ¦ rakudo: variable to opt into performance regression tests than to tell an unknown

[10:35] <Geth> ¦ rakudo: number of unknown people to opt out of them for automated builds.

[10:35] <Geth> ¦ rakudo: 

[10:35] <Geth> ¦ rakudo: Fixes #3065

[10:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/31ffc2bd2d

[10:35] <linkable6> RAKUDO#3065 [closed]: https://github.com/rakudo/rakudo/issues/3065 [intermittent][severe] Flopping test: 99-misc.t (2019.07)

[10:36] <nine> Now what do we do about roast?

[10:57] *** sena_kun joined
[10:59] *** Altai-man_ left
[10:59] <lizmat> marking them todo I guess?

[11:04] <sena_kun> nine++

[11:21] <Geth> ¦ rakudo: 8dcfa849f6 | (Ben Davies)++ | src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp

[11:21] <Geth> ¦ rakudo: Add a parents metamethod to Metamodel::ParametricRoleGroupHOW

[11:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8dcfa849f6

[11:21] <Geth> ¦ rakudo: 033b23bd82 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp

[11:21] <Geth> ¦ rakudo: Merge pull request #3649 from Kaiepi/role-group-parents

[11:21] <Geth> ¦ rakudo: 

[11:21] <Geth> ¦ rakudo: Add a parents metamethod to Metamodel::ParametricRoleGroupHOW

[11:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/033b23bd82

[11:21] <nine> lizmat: I meant what do we do about timing based tests in roast? There's ROAST_TIMING_SCALE in use for some of them, but that makes them equally opt-out instead of opt-in.

[11:21] <lizmat> ah, I guess we make them all opt-in

[11:22] <nine> That would get us one step further on running them on CI

[11:26] <lizmat> nine: so all test files with ROAST_TIMING_SCALE should only run their test if what env is set ?

[11:27] *** ggoebel left
[11:32] <nine> Originally I thought, we'd use a general RAKU_RUN_TIMING_TESTS variable. But then I realized that this might tempt module authors to use that variable as well and people opting in might opt into more than they anticipated

[11:51] *** Voldenet left
[11:54] *** Voldenet joined
[11:54] *** Voldenet left
[11:54] *** Voldenet joined
[11:55] <lizmat> m: my @a; @a>>.map: * + 2

[11:55] <camelia> rakudo-moar 033b23bd8: OUTPUT: «elems requires a concrete object (got a Mu type object instead)␤  in block <unit> at <tmp> line 1␤␤»

[12:48] <lizmat> m: say () =:= ()   # why isn't this True ?

[12:48] <camelia> rakudo-moar 033b23bd8: OUTPUT: «False␤»

[12:50] <Geth> ¦ rakudo: 9b503292e5 | (Elizabeth Mattijsen)++ | src/core.c/metaops.pm6

[12:50] <Geth> ¦ rakudo: Minimal change to make my @a>>.foo not die

[12:50] <Geth> ¦ rakudo: 

[12:50] <Geth> ¦ rakudo: This will probably see some refactoring by yours truly in the near

[12:50] <Geth> ¦ rakudo: future anyway.

[12:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9b503292e5

[12:56] *** Altai-man_ joined
[12:59] *** sena_kun left
[13:02] <Altai-man_> Good news are: no serious changes for Blin (https://gist.github.com/Altai-man/8f77b711e1c6c77415a2ee72696eab80) for revert branch.

[13:03] <Altai-man_> I'm now checking two modules if these are stable regressions or not.

[13:03] <Altai-man_> Can anyone please confirm the branch has performance back?

[13:08] <lizmat> Altai-man_: testing now

[13:11] <lizmat> timings for my machine: 1.786 -> 1.211 , --race: .833 -> .662

[13:11] <lizmat> so yes, I'd say that gets our performance back

[13:12] <Altai-man_> lizmat++ # thank you!

[13:12] * Altai-man_ tests LibXML and Lumberjack modules

[13:12] * Altai-man_ .oO ( so maybe we can even release today )

[13:16] <Altai-man_> seeing a stresstest failure in t/spec/S02-types/version.t

[13:16] <lizmat> Altai-man_: I see S06-advanced/dispatching.t failing consistently

[13:17] <lizmat> "No such method 'is_wrapped' for invocant of type 'Method'"

[13:17] <Altai-man_> lizmat, you need a roast with PR where this test is skipped.

[13:17] <Altai-man_> lizmat, it is still WIP https://github.com/Raku/roast/pull/638

[13:17] <lizmat> ah, ok, then all is otherwise well!

[13:17] <Altai-man_> >t/spec/S02-types/version.t                                      (Wstat: 256 Tests: 44 Failed: 0)

[13:17] <Altai-man_> >Parse errors: Bad plan.  You planned 45 tests but ran 44.

[13:18] <lizmat> works ok for me

[13:19] <Altai-man_> I don't like it. The test checks something which should be stable. I am having an impression 1)dispatcher revert made something fragile/racey; 2)it was there always I just didn't notice them.

[13:22] <lizmat> can't get it to fail even running 30times or so

[13:22] <Altai-man_> I'm running stresstest with TEST_JOBS=24.

[13:23] <Altai-man_> And in around 10 times I did yesterday and started to run them today, it failed once.

[13:23] <Altai-man_> I'll probably check files manually as was planned.

[13:23] * lizmat also runs a stresstest

[13:25] <Geth> ¦ roast/dispatcher-revert: 11791284bb | Altai-man++ | S06-advanced/dispatching.t

[13:25] <Geth> ¦ roast/dispatcher-revert: Mark dispatcher tests as todo

[13:25] <Geth> ¦ roast/dispatcher-revert: review: https://github.com/Raku/roast/commit/11791284bb

[13:29] <lizmat> Altai-man_: t/spec/S17-procasync/kill.t  flapped for me

[13:29] <Altai-man_> lizmat, this one is known

[13:29] <lizmat> then again, all clear from this side  :-)

[13:32] <Altai-man_> submitted a ticket to Lumberjack...

[14:04] <Geth> ¦ rakudo: f115a8a556 | (Elizabeth Mattijsen)++ | src/core.c/Code.pm6

[14:04] <Geth> ¦ rakudo: Revert 360232a54fadc83efdafc29dfe808677bcde2865

[14:04] <Geth> ¦ rakudo: 

[14:04] <Geth> ¦ rakudo: By popular demand.

[14:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f115a8a556

[14:07] *** ggoebel joined
[14:31] <Altai-man_> Ok, revert is correct.

[14:32] <Altai-man_> releasable6, status

[14:32] <releasable6> Altai-man_, Next release will happen when it's ready. 1 blocker. 166 out of 377 commits logged (⚠ 3 warnings)

[14:32] <releasable6> Altai-man_, Details: https://gist.github.com/2d18882b56662aa4b23ab1e06d8f7b43

[14:45] <Altai-man_> So what we have for Rakudo 2020.05 release: 1)1 blocker is remaining to be decided/fixed; 2)We're also waiting for an explicit vrurg's approval; 2)Blin is nice, spects are nice, revert looks ok to me; 4)The commits to log are very "interesting" due to how many re-reverts we have, so I'll take it on me, so please do any logging only if you do really fancy it. Thanks. :)

[14:57] *** sena_kun joined
[14:57] *** travis-ci joined
[14:57] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Revert 360232a54fadc83efdafc29dfe808677bcde2865

[14:57] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/682304528 https://github.com/rakudo/rakudo/compare/9b503292e53f...f115a8a556cf

[14:57] *** travis-ci left
[14:58] *** Altai-man_ left
[15:46] <AlexDaniel> sena_kun: can you file a blin ticket?

[15:46] <AlexDaniel> sena_kun: so that I can later go through the weird ones that fail for no good reason

[15:46] <sena_kun> AlexDaniel, sure, a bit later~

[15:47] <AlexDaniel> CSS::Grammar needs a PR for sure

[15:49] <sena_kun> AlexDaniel, you mean the fact the issue was fixed on master long time ago and Blin somehow tests older version?

[15:49] <AlexDaniel> oooh

[15:51] <AlexDaniel> yeah why the hell does that happen x)

[15:51] <AlexDaniel> I know for sure that if you bump the version then it'll end up fetching it

[15:52] <AlexDaniel> so what's going on there? Zef sees that the locally available version is identical to the one in the module list and doesn't attempt to fetch it?

[15:54] *** ggoebel left
[15:54] *** ggoebel joined
[15:55] <timotimo> lizmat: it's probably not a very useful optimization opportunity, but you know how the dwimmy operator can repeat the last generated value if it gets a Whatever?

[15:56] <timotimo> in some cases, really mostly just reified iterator, we can check 1) does the array in question have a typecheck that prevents Whatever from showing up? and 2) can we just restart iterating from the beginning without trouble and don't have to buffer iterator results?

[16:10] *** AlexDani` joined
[16:12] *** AlexDaniel left
[16:30] <dogbert11> m: my $a = abs(-4711) for ^10000000; say now -INIT now 

[16:30] <camelia> rakudo-moar f115a8a55: OUTPUT: «0.212389␤»

[16:30] <dogbert11> m: my $a = (-4711).abs for ^10000000; say now -INIT now

[16:30] <camelia> rakudo-moar f115a8a55: OUTPUT: «1.66452763␤»

[16:30] <dogbert11> what's up with this?

[16:31] <dogbert11> quite a big speed difference no?

[16:32] <dogbert11> what say lizmat?

[16:49] <sena_kun> AlexDani`, https://github.com/Raku/Blin/issues/24 <-

[16:49] *** AlexDani` is now known as AlexDaniel

[16:49] *** AlexDaniel left
[16:49] *** AlexDaniel joined
[16:56] *** Altai-man_ joined
[16:57] <lizmat> dogbert11: abs(constant) is optimized to a constant fetch by the static optimizer

[16:57] <lizmat> (constant).abs is not

[16:58] *** sena_kun left
[17:15] *** ws7ws joined
[17:17] <AlexDaniel> CyclicDependency section here is interesting: https://github.com/Raku/Blin/issues/24

[17:17] <AlexDaniel> some LHFs

[17:18] <AlexDaniel> half of them seem to be modules that list themselves in build-depends

[17:21] <Altai-man_> AlexDaniel, not even themselves, but particular files inside a distibution. Zef can install a module by something from a distribution as well as actual distribution name.

[17:22] <AlexDaniel> but hmm… is it meant to be this way?

[17:23] <Altai-man_> AlexDaniel, what exactly?

[17:24] <Altai-man_> The cycle detection or installation of a distribution by name of its module?

[17:24] <AlexDaniel> I mean, how does zef handle it?

[17:27] <Altai-man_> AlexDaniel, no idea, but IIRC ugexe has said it to me, e.g. Cro::HTTP can be installed by zef install Cro::HTTP::Client, and I never saw him being wrong / having unclear reasoning in anything in this field.

[17:28] <timotimo> i wonder if we can make constructing our nodes a little bit faster

[17:28] <AlexDaniel> yeah, that's relatively easy, but if Cro::HTTP had a build-depends on Cro::HTTP::Client, then what?

[17:29] <timotimo> because the constructor relies on calling methods by name

[17:30] <timotimo> but it could be that there is almost no actual cost to this

[17:32] <AlexDaniel> m: my @a = 4,8,15,16; @a[1]:delete; .say for @a

[17:32] <camelia> rakudo-moar f115a8a55: OUTPUT: «4␤(Any)␤15␤16␤»

[17:32] <AlexDaniel> m: my @a = 4,8,15,16; @a[1]:delete; .say for @a.reverse

[17:32] <camelia> rakudo-moar f115a8a55: OUTPUT: «16␤15␤(Mu)␤4␤»

[17:32] <AlexDaniel> 6c: my @a = 4,8,15,16; @a[1]:delete; .say for @a.reverse

[17:32] <committable6> AlexDaniel, https://gist.github.com/5dc9a5bd35e570858fd611922a51e024

[17:33] <AlexDaniel> bisect: my @a = 4,8,15,16; @a[1]:delete; .say for @a; .say for @a.reverse

[17:33] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=f115a8a) because on both starting points the exit code is 0

[17:33] <AlexDaniel> 6c: my @a = 4,8,15,16; @a[1]:delete; .say for @a; .say for @a.reverse

[17:33] <committable6> AlexDaniel, https://gist.github.com/c6d842ae060d99f2fcda55cf6054ab9e

[17:33] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/37c9fa24d518a5e7ddcd9106336596ad

[17:33] <bisectable6> AlexDaniel, (2017-03-01) https://github.com/rakudo/rakudo/commit/beda5767ba6934e84122a0c0458a53d919c695d0

[17:34] <AlexDaniel> 6c: my @a = 4,8,15,16; @a[1]:delete; .say for @a; say ‘----’; .say for @a.reverse

[17:35] <committable6> AlexDaniel, https://gist.github.com/ae0c6598a5bd214e77f51a3b25aed44f

[17:36] <dogbert11> lizmat: thx for the explanation, I get a bit confused when the speed of methods vs subs differ too much

[17:37] <AlexDaniel> dogbert11: yes but subs are not always faster

[17:37] <AlexDaniel> sometimes it's other way around

[17:41] <dogbert11> AlexDaniel: I have noticed that :)

[17:47] <timotimo> i see that ival, sval, and nval already pull the value argument out directly to construct themselves faster

[17:47] <timotimo> and op and var and such

[17:54] *** ws7ws left
[17:57] <timotimo> isn't it superfluous to bind $!flags to 0 every time we create a QAST node? they should be nulled out on creation already, i would assume?

[18:04] <timotimo> commented them all out, i guess i'll just put up a pull request for discussion purposes

[18:05] <timotimo> the bindattr should be turned into a super cheap mov assembly instruction anyway, but *shrug*

[18:05] <timotimo> i guess leaving the instruction out lets the moarvm file for QASTNodes be a little bit smaller

[18:05] <timotimo> not like a kilobyte smaller

[18:09] <AlexDaniel> lizmat: hah:

[18:09] <AlexDaniel> m: my @a = 4,8,15,16; @a[*-Inf]:delete; say @a

[18:09] <camelia> rakudo-moar f115a8a55: OUTPUT: «[4 8 15 16]␤»

[18:09] <AlexDaniel> m: my @a = 4,8,15,16; say @a[*-Inf]:delete; say @a

[18:09] <camelia> rakudo-moar f115a8a55: OUTPUT: «Can not remove elements from a Array␤  in block <unit> at <tmp> line 1␤␤»

[18:12] *** ggoebel left
[18:13] <timotimo> 556 bytes vs 514 bytes "before" in just one example (QAST::Var.new)

[18:13] *** ggoebel joined
[18:15] <timotimo> 216 vs 196 frame size after spesh, 1 fewer spesh slot, and jitted machine code went from 1259 to 1179 bytes

[18:31] <timotimo> m: say "qastnodes.moarvm changes size by $(98952 - 99496) bytes"

[18:31] <camelia> rakudo-moar f115a8a55: OUTPUT: «qastnodes.moarvm changes size by -544 bytes␤»

[18:40] <Geth> ¦ nqp/qast_constructor_no_zero_init: 5cf4a289f6 | (Timo Paulssen)++ | 18 files

[18:40] <Geth> ¦ nqp/qast_constructor_no_zero_init: Don't bind an int attribute to 0 directly after construction

[18:40] <Geth> ¦ nqp/qast_constructor_no_zero_init: 

[18:40] <Geth> ¦ nqp/qast_constructor_no_zero_init: since we construct objects null-initialized anyway.

[18:40] <Geth> ¦ nqp/qast_constructor_no_zero_init: review: https://github.com/Raku/nqp/commit/5cf4a289f6

[18:41] <timotimo> m: say "qastnodes.moarvm changes size by $(98952 * 100 / 99496) percent"

[18:41] <camelia> rakudo-moar f115a8a55: OUTPUT: «qastnodes.moarvm changes size by 99.453244 percent␤»

[18:41] <timotimo> m: say "qastnodes.moarvm changes size by $(1 - (98952 * 100 / 99496)) percent"

[18:41] <camelia> rakudo-moar f115a8a55: OUTPUT: «qastnodes.moarvm changes size by -98.453244 percent␤»

[18:41] <timotimo> m: say "qastnodes.moarvm changes size by $(100 - (98952 * 100 / 99496)) percent"

[18:41] <camelia> rakudo-moar f115a8a55: OUTPUT: «qastnodes.moarvm changes size by 0.546756 percent␤»

[18:42] <Geth> ¦ nqp: timo++ created pull request #624: Don't bind an int attribute to 0 directly after construction

[18:42] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/624

[18:47] <timotimo> i didn't run a stresstest with this just yet

[18:57] *** sena_kun joined
[18:59] *** Altai-man_ left
[19:27] *** pamplemousse joined
[20:15] <lizmat> bisectable6: my @a = ^5; @a[2]:delete; dd @a.reverse

[20:15] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=f115a8a) because on both starting points the exit code is 0

[20:15] <bisectable6> lizmat, bisect log: https://gist.github.com/9e86fcd8176d6e1ead486e1b3a65e8b2

[20:15] <bisectable6> lizmat, (2017-03-01) https://github.com/rakudo/rakudo/commit/beda5767ba6934e84122a0c0458a53d919c695d0

[20:16] <lizmat> bisectable6: old=2020.02.1 my @a = ^5; @a[2]:delete; dd @a.reverse

[20:16] <bisectable6> lizmat, On both starting points (old=2020.02.1 new=f115a8a) the exit code is 0 and the output is identical as well

[20:16] <bisectable6> lizmat, Output on both points: «(4, 3, Mu, 1, 0).Seq␤»

[20:16] <lizmat> bisectable6: old=2018.01 my @a = ^5; @a[2]:delete; dd @a.reverse

[20:16] <bisectable6> lizmat, On both starting points (old=2018.01 new=f115a8a) the exit code is 0 and the output is identical as well

[20:16] <bisectable6> lizmat, Output on both points: «(4, 3, Mu, 1, 0).Seq␤»

[20:30] <sena_kun> releasable6, status

[20:30] <releasable6> sena_kun, Next release will happen when it's ready. 1 blocker. 181 out of 377 commits logged (⚠ 2 warnings)

[20:30] <releasable6> sena_kun, Details: https://gist.github.com/f8e5f161870f28cb5865191ee4016a3d

[20:35] *** robertle joined
[20:42] *** ggoebel left
[20:44] *** sena_kun left
[20:45] <lizmat> m: my @a = ^5; @a[2]:delete; my @b is default(42) = @a.reverse; dd @b

[20:45] <camelia> rakudo-moar f115a8a55: OUTPUT: «Array @b = [4, 3, Mu, 1, 0]␤»

[20:46] <Geth> ¦ rakudo: e9468d6a02 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[20:46] <Geth> ¦ rakudo: Make List.reverse return Nil for holes

[20:46] <Geth> ¦ rakudo: 

[20:46] <Geth> ¦ rakudo: This should be slightly better than Mu, because then it will actually

[20:46] <Geth> ¦ rakudo: honour whatever you're putting the reverse into.  This change will make

[20:46] <Geth> ¦ rakudo: this actually work:

[20:46] <Geth> ¦ rakudo: 

[20:46] <Geth> ¦ rakudo:     my @a = ^5;

[20:46] <Geth> ¦ rakudo:     @a[2]:delete;

[20:46] <Geth> ¦ rakudo:     my @b is default(42) = @a.reverse;

[20:46] <Geth> ¦ rakudo:     dd @b[2];  # 42, not Mu

[20:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e9468d6a02

[20:53] *** robertle left
[21:02] *** hankache joined
[21:03] *** hankache left
[21:04] *** hankache joined
[21:05] *** hankache left
[21:05] *** hankache joined
[21:15] *** hankache left
[21:21] *** ggoebel joined
[21:33] *** cognomin_ joined
[21:37] *** cognominal left
[21:55] <Geth> ¦ rakudo: ca49c153db | (Elizabeth Mattijsen)++ | 4 files

[21:55] <Geth> ¦ rakudo: Make sure @a.reverse creates proper containers for holes

[21:55] <Geth> ¦ rakudo: 

[21:55] <Geth> ¦ rakudo: - rename R:I.ReifiedListReverse to R:I.ReifiedReverse

[21:55] <Geth> ¦ rakudo:   as it's now also for Arrays specifically

[21:55] <Geth> ¦ rakudo: - add support for descriptors

[21:55] <Geth> ¦ rakudo: - expand nqp::null handling to creating container when needed

[21:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ca49c153db

[21:58] *** pamplemousse left
[22:11] <Geth> ¦ roast: d0452c4f14 | (Elizabeth Mattijsen)++ | S32-list/reverse.t

[22:11] <Geth> ¦ roast: Add tests for R#3654

[22:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d0452c4f14

[22:11] <linkable6> R#3654 [open]: https://github.com/rakudo/rakudo/issues/3654 [tests needed] .reverse on arrays with holes (Mu)

[22:28] <Geth> ¦ rakudo/rakudo_3257: 16 commits pushed by (Vadim Belman)++

[22:28] <Geth> ¦ rakudo/rakudo_3257: review: https://github.com/rakudo/rakudo/compare/6c17a3950822^...f67217acb76f

[22:28] <Geth> ¦ rakudo/rakudo_2993: f2c1a449aa | (Vadim Belman)++ | 4 files

[22:28] <Geth> ¦ rakudo/rakudo_2993: Remove release and codename properties from Compiler

[22:28] <Geth> ¦ rakudo/rakudo_2993: 

[22:28] <Geth> ¦ rakudo/rakudo_2993: They're not relevant and are not used.

[22:28] <Geth> ¦ rakudo/rakudo_2993: 

[22:29] <Geth> ¦ rakudo/rakudo_2993: rakudo/rakudo#2993

[22:29] <Geth> ¦ rakudo/rakudo_2993: review: https://github.com/rakudo/rakudo/commit/f2c1a449aa

[22:29] <linkable6> RAKUDO#2993 [open]: https://github.com/rakudo/rakudo/issues/2993 [consensus needed] Are compiler.release-number and compiler.codename set?

[22:29] <Geth> ¦ rakudo/rakudo_1202: f05bf6acb9 | (Vadim Belman)++ | 3 files

[22:29] <Geth> ¦ rakudo/rakudo_1202: Prevent rebuild of nqp without --gen-nqp.

[22:29] <Geth> ¦ rakudo/rakudo_1202: review: https://github.com/rakudo/rakudo/commit/f05bf6acb9

[22:29] <Geth> ¦ rakudo/attribute-package-fix: ee2f7a7022 | (Vadim Belman)++ | src/Perl6/Metamodel/ParametricRoleHOW.nqp

[22:29] <Geth> ¦ rakudo/attribute-package-fix: Alway clone attribute when specializing

[22:29] <Geth> ¦ rakudo/attribute-package-fix: 

[22:29] <Geth> ¦ rakudo/attribute-package-fix: Generic ones are being cloned upon instantiation. To maintain

[22:29] <Geth> ¦ rakudo/attribute-package-fix: consistency and guarantee that concretization always using a copy of the

[22:29] <Geth> ¦ rakudo/attribute-package-fix: original attribute, do cloning of non-generic attributes.

[22:29] <Geth> ¦ rakudo/attribute-package-fix: 

[22:29] <Geth> ¦ rakudo/attribute-package-fix: Provides support for fixing `.package` not being set for attributes on

[22:29] <Geth> ¦ rakudo/attribute-package-fix: roles.

[22:29] <Geth> ¦ rakudo/attribute-package-fix: review: https://github.com/rakudo/rakudo/commit/ee2f7a7022

[22:29] <Geth> ¦ rakudo/attribute-package-fix: e719c7e6ee | (Vadim Belman)++ | 2 files

[22:29] <Geth> ¦ rakudo/attribute-package-fix: Fix a problem when attribute object doesn't have $!package set for roles

[22:29] <Geth> ¦ rakudo/attribute-package-fix: 

[22:29] <Geth> ¦ rakudo/attribute-package-fix: The fix is rather simple: insted of setting `$!package` to generic

[22:29] <Geth> ¦ rakudo/attribute-package-fix: `$?CLASS` set it directly to $*PACKAGE as it contains the role/class

[22:29] <Geth> ¦ rakudo/attribute-package-fix: being currently compiled and which actually owns the attribute. This

[22:29] <Geth> ¦ rakudo/attribute-package-fix: approach requries additional fixup later, when the attribute is getting

[22:29] <Geth> ¦ rakudo/attribute-package-fix: actually composed into a class. At this point `$!package` must be set to

[22:29] <Geth> ¦ rakudo/attribute-package-fix: the class typeobject. The previous commit guarantees that the action is

[22:29] <Geth> ¦ rakudo/attribute-package-fix: performed upon a new copy of the attribute object and therefor won't

[22:29] <Geth> ¦ rakudo/attribute-package-fix: mess up with other type object consuming the same role.

[22:29] <Geth> ¦ rakudo/attribute-package-fix: review: https://github.com/rakudo/rakudo/commit/e719c7e6ee

[22:29] <Geth> ¦ rakudo/nmake-detect-fail: e52754ca1d | (Vadim Belman)++ | 3rdparty/nqp-configure

[22:29] <Geth> ¦ rakudo/nmake-detect-fail: nqp-configure submodule: switch to nmake-detect-fail branch

[22:29] <Geth> ¦ rakudo/nmake-detect-fail: review: https://github.com/rakudo/rakudo/commit/e52754ca1d

[22:30] <Geth> ¦ rakudo/nmake-detect-fail: 620ae0ecc3 | (Vadim Belman)++ | tools/lib/NQP/Config/Rakudo.pm

[22:30] <Geth> ¦ rakudo/nmake-detect-fail: Remove overlooked debug print.

[22:30] <Geth> ¦ rakudo/nmake-detect-fail: review: https://github.com/rakudo/rakudo/commit/620ae0ecc3

[22:30] <Geth> ¦ rakudo/nmake-detect-fail: dddb88c4bd | (Vadim Belman)++ | 3rdparty/nqp-configure

[22:30] <Geth> ¦ rakudo/nmake-detect-fail: nqp-configure submodule update

[22:30] <Geth> ¦ rakudo/nmake-detect-fail: review: https://github.com/rakudo/rakudo/commit/dddb88c4bd

[22:30] <Geth> ¦ rakudo/rakudo_1203_bad: 10 commits pushed by (Vadim Belman)++, (Paweł Murias)++, (Aleks-Daniel Jakimenko-Aleksejev)++

[22:30] <Geth> ¦ rakudo/rakudo_1203_bad: review: https://github.com/rakudo/rakudo/compare/59fc5e2ecfa1^...b1a40eb9d46b

[22:30] <Geth> ¦ rakudo/issue_2250: 13 commits pushed by (Vadim Belman)++

[22:30] <Geth> ¦ rakudo/issue_2250: review: https://github.com/rakudo/rakudo/compare/b0deca5b0151^...a2cdb32c4d2e

[22:30] <Geth> ¦ rakudo/macos-toolchain: 9cba5d7474 | (Vadim Belman)++ | Configure.pl

[22:30] <Geth> ¦ rakudo/macos-toolchain: Follow up to PR MoarVM/MoarVM#1067

[22:30] <Geth> ¦ rakudo/macos-toolchain: 

[22:30] <linkable6> MOARVM#1067 [closed]: https://github.com/MoarVM/MoarVM/pull/1067  Improve check for used toolchain on macOS 

[22:30] <Geth> ¦ rakudo/macos-toolchain: Make rakudo Configure.pl use make from XCode toolchain if the default

[22:30] <Geth> ¦ rakudo/macos-toolchain: compliler belong to it too.

[22:30] <Geth> ¦ rakudo/macos-toolchain: review: https://github.com/rakudo/rakudo/commit/9cba5d7474

[22:30] <Geth> ¦ rakudo/rakudo_3075: 035bd3e629 | (Vadim Belman)++ | 3 files

[22:30] <Geth> ¦ rakudo/rakudo_3075: Fix Stash'es clashing after deserialization

[22:30] <Geth> ¦ rakudo/rakudo_3075: 

[22:30] <Geth> ¦ rakudo/rakudo_3075: When two modules are precompiled independently but then loaded by the

[22:30] <Geth> ¦ rakudo/rakudo_3075: same process it is possible that if they share common name prefix like

[22:30] <Geth> ¦ rakudo/rakudo_3075: in, say, `A::B::C::D1` and `A::B::C::D2` then the module loaded second

[22:30] <Geth> ¦ rakudo/rakudo_3075: would get its Stash on `A` overriden by the module loaded first. This

[22:30] <Geth> ¦ rakudo/rakudo_3075: would effectively result in some symbols in `A::B::...` hierarchy to be

[22:30] <Geth> ¦ rakudo/rakudo_3075: <…commit message has 21 more lines…>

[22:30] <Geth> ¦ rakudo/rakudo_3075: review: https://github.com/rakudo/rakudo/commit/035bd3e629

[22:30] <Geth> ¦ rakudo/rakudo_3075: ea67ef4fca | (Vadim Belman)++ | src/Perl6/Actions.nqp

[22:30] <Geth> ¦ rakudo/rakudo_3075: Don't waste CPU cycles unless we're precompiling

[22:30] <Geth> ¦ rakudo/rakudo_3075: 

[22:30] <Geth> ¦ rakudo/rakudo_3075: There is no need for snapshotting a Stash unless current compunit is

[22:31] <Geth> ¦ rakudo/rakudo_3075: being precompiled.

[22:31] <Geth> ¦ rakudo/rakudo_3075: review: https://github.com/rakudo/rakudo/commit/ea67ef4fca

[22:31] <Geth> ¦ rakudo/rakudo_3075: 8c0bad7ade | (Vadim Belman)++ | 3 files

[22:31] <Geth> ¦ rakudo/rakudo_3075: [WIP] Intermediate experimental commit

[22:31] <Geth> ¦ rakudo/rakudo_3075: 

[22:31] <Geth> ¦ rakudo/rakudo_3075: Preserving the current state of the things. Need to locate a problem

[22:31] <Geth> ¦ rakudo/rakudo_3075: with macOS version failing due to SIGABRT and not allowing me to debug.

[22:31] <Geth> ¦ rakudo/rakudo_3075: 

[22:31] <Geth> ¦ rakudo/rakudo_3075: - Don't record CORE stashes.

[22:31] <Geth> ¦ rakudo/rakudo_3075: - Added SC handle parameter to TAKE-SNAPHOT. Perhaps it makes sense of

[22:31] <Geth> ¦ rakudo/rakudo_3075:   recording only symbols from current SC.

[22:31] <Geth> ¦ rakudo/rakudo_3075: review: https://github.com/rakudo/rakudo/commit/8c0bad7ade

[22:31] <Geth> ¦ rakudo/issue_2169: 01c5caac58 | (Vadim Belman)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[22:31] <Geth> ¦ rakudo/issue_2169: Fix for rakudo/rakudo#2169

[22:31] <Geth> ¦ rakudo/issue_2169: 

[22:31] <linkable6> RAKUDO#2169 [closed]: https://github.com/rakudo/rakudo/issues/2169 [tests needed][type captures] Assigning Nil to a scalar declared with captured type changes it's container metaclass to GenericHOW

[22:31] <Geth> ¦ rakudo/issue_2169: ContainerDescriptor $!default gets instantiated alongside with $!of if

[22:31] <Geth> ¦ rakudo/issue_2169: necessary.

[22:31] <Geth> ¦ rakudo/issue_2169: 

[22:31] <Geth> ¦ rakudo/issue_2169: Possible problem: if instantiation will be issued based on

[22:31] <Geth> ¦ rakudo/issue_2169: ContainerDescriptor.is_generic() return then in cases when $!of is a

[22:31] <Geth> ¦ rakudo/issue_2169: non-generic value but the default is set to a generic then default won't

[22:31] <Geth> ¦ rakudo/issue_2169: be instantiated. At this moment such situation is not possible because

[22:31] <Geth> ¦ rakudo/issue_2169: rakudo dies when `is default` parameter is a generic.

[22:31] <Geth> ¦ rakudo/issue_2169: review: https://github.com/rakudo/rakudo/commit/01c5caac58

[22:31] <Geth> ¦ rakudo/issue_2169: 6b57b73918 | (Vadim Belman)++ | 0 files

[22:31] <Geth> ¦ rakudo/issue_2169: Merge branch 'issue_2169' of github.com:vrurg/rakudo into issue_2169

[22:31] <Geth> ¦ rakudo/issue_2169: review: https://github.com/rakudo/rakudo/commit/6b57b73918

[22:31] <Geth> ¦ rakudo/Map-keeping-containers: 6a6532cc33 | (Vadim Belman)++ | 10 files

[22:31] <Geth> ¦ rakudo/Map-keeping-containers: Merge branch 'master' of https://github.com/rakudo/rakudo into Map-keeping-containers

[22:31] <Geth> ¦ rakudo/Map-keeping-containers: review: https://github.com/rakudo/rakudo/commit/6a6532cc33

[22:32] <Geth> ¦ rakudo/will-build-typecheck: d83060b029 | (Vadim Belman)++ | src/core.c/core_epilogue.pm6

[22:32] <Geth> ¦ rakudo/will-build-typecheck: Add a couple of symbols to HLL state

[22:32] <Geth> ¦ rakudo/will-build-typecheck: 

[22:32] <Geth> ¦ rakudo/will-build-typecheck: ... as required by create_BUILDPLAN typechecks

[22:32] <Geth> ¦ rakudo/will-build-typecheck: review: https://github.com/rakudo/rakudo/commit/d83060b029

[22:32] <Geth> ¦ rakudo/will-build-typecheck: 35b425b13e | (Vadim Belman)++ | src/Perl6/Metamodel/BUILDPLAN.nqp

[22:32] <Geth> ¦ rakudo/will-build-typecheck: Get required symbols from HLL when no $*W available

[22:32] <Geth> ¦ rakudo/will-build-typecheck: 

[22:32] <Geth> ¦ rakudo/will-build-typecheck: Or `$*W` is available but can't provide the service to us. This would

[22:32] <Geth> ¦ rakudo/will-build-typecheck: allow `create_BUILDPLAN` to typecheck defaults when a type is being

[22:32] <Geth> ¦ rakudo/will-build-typecheck: created at run-time.

[22:32] <Geth> ¦ rakudo/will-build-typecheck: review: https://github.com/rakudo/rakudo/commit/35b425b13e

[22:32] <Geth> ¦ rakudo/will-build-typecheck: 69d8b41e64 | (Vadim Belman)++ | 20 files

[22:32] <Geth> ¦ rakudo/will-build-typecheck: Merge branch 'master' into will-build-typecheck

[22:32] <Geth> ¦ rakudo/will-build-typecheck: review: https://github.com/rakudo/rakudo/commit/69d8b41e64

[22:32] <Geth> ¦ rakudo/problem-solving-112: 44 commits pushed by (Vadim Belman)++

[22:32] <Geth> ¦ rakudo/problem-solving-112: review: https://github.com/rakudo/rakudo/compare/1be82faafa87^...6585fcde13b4

[22:32] <Geth> ¦ rakudo/rakudo_3132: 6276ba7e39 | (Vadim Belman)++ | tools/templates/moar/Makefile.in

[22:32] <Geth> ¦ rakudo/rakudo_3132: Merge branch 'master' of https://github.com/rakudo/rakudo into rakudo_3132

[22:32] <Geth> ¦ rakudo/rakudo_3132: review: https://github.com/rakudo/rakudo/commit/6276ba7e39

[22:32] <Geth> ¦ rakudo/eval-with-unit: 9d79cbac49 | (Vadim Belman)++ | src/core/ForeignCode.pm6

[22:32] <Geth> ¦ rakudo/eval-with-unit: Make EVAL thread-safe

[22:32] <Geth> ¦ rakudo/eval-with-unit: 

[22:32] <Geth> ¦ rakudo/eval-with-unit: Currently – by wrapping code compilation into a lock. This is due to

[22:32] <Geth> ¦ rakudo/eval-with-unit: 'Decoder may not be used concurrently' error thrown by MoarVM more than

[22:32] <Geth> ¦ rakudo/eval-with-unit: one compilation is being run in parallel.

[22:32] <Geth> ¦ rakudo/eval-with-unit: review: https://github.com/rakudo/rakudo/commit/9d79cbac49

[22:32] <Geth> ¦ rakudo/eval-with-unit: e827ae49bf | (Vadim Belman)++ | tools/lib/NQP/Config/Rakudo.pm

[22:32] <Geth> ¦ rakudo/eval-with-unit: Merge branch 'master' of https://github.com/rakudo/rakudo into eval-with-unit

[22:32] <Geth> ¦ rakudo/eval-with-unit: review: https://github.com/rakudo/rakudo/commit/e827ae49bf

[22:33] <Geth> ¦ rakudo/eval-with-unit: 6000a0f5de | (Vadim Belman)++ | 2 files

[22:33] <Geth> ¦ rakudo/eval-with-unit: Trying to get EVAL :unit to work.

[22:33] <Geth> ¦ rakudo/eval-with-unit: review: https://github.com/rakudo/rakudo/commit/6000a0f5de

[22:33] <Geth> ¦ rakudo/problem-solving-99-bad: 14 commits pushed by (Vadim Belman)++

[22:33] <Geth> ¦ rakudo/problem-solving-99-bad: review: https://github.com/rakudo/rakudo/compare/55772cc85077^...5630524b807d

[22:33] <Geth> ¦ rakudo/rakudo_issue_3107_old: d46ecf15ed | (Vadim Belman)++ | 3 files

[22:33] <Geth> ¦ rakudo/rakudo_issue_3107_old: Merge branch 'master' of https://github.com/rakudo/rakudo into rakudo_issue_3107

[22:33] <Geth> ¦ rakudo/rakudo_issue_3107_old: review: https://github.com/rakudo/rakudo/commit/d46ecf15ed

[22:33] <Geth> ¦ rakudo/rakudo_issue_3107_old: 4feb77e806 | (Vadim Belman)++ | 3 files

[22:33] <Geth> ¦ rakudo/rakudo_issue_3107_old: Make every CORE compile with its respective language revision

[22:33] <Geth> ¦ rakudo/rakudo_issue_3107_old: 

[22:33] <Geth> ¦ rakudo/rakudo_issue_3107_old: This is a preparation work to assign language version to core classes.

[22:33] <Geth> ¦ rakudo/rakudo_issue_3107_old: I.e. PseudoStash.^ver would report back either `6.c` or `6.e` depending

[22:33] <Geth> ¦ rakudo/rakudo_issue_3107_old: from which CORE the class was imported.

[22:33] <Geth> ¦ rakudo/rakudo_issue_3107_old: review: https://github.com/rakudo/rakudo/commit/4feb77e806

[22:33] <Geth> ¦ rakudo/rakudo_2979: 4e27af6036 | (Vadim Belman)++ | 2 files

[22:33] <Geth> ¦ rakudo/rakudo_2979: Do correct assignment to SetHash

[22:33] <Geth> ¦ rakudo/rakudo_2979: 

[22:33] <Geth> ¦ rakudo/rakudo_2979: Fix for rakudo/rakudo#1203

[22:33] <Geth> ¦ rakudo/rakudo_2979: review: https://github.com/rakudo/rakudo/commit/4e27af6036

[22:33] <linkable6> RAKUDO#1203 [closed]: https://github.com/rakudo/rakudo/issues/1203 [data types] Would be nice to have an easy way to work with SetHashes and its kin

[22:33] <Geth> ¦ rakudo/rakudo_3075_experimental: 6 commits pushed by (Vadim Belman)++

[22:33] <Geth> ¦ rakudo/rakudo_3075_experimental: 5b4fb0419e | A lot of debug prints

[22:33] <Geth> ¦ rakudo/rakudo_3075_experimental: 99b7a03030 | Delete extra files.

[22:33] <Geth> ¦ rakudo/rakudo_3075_experimental: f8d1d2e05b | A lot of debug prints

[22:33] <Geth> ¦ rakudo/rakudo_3075_experimental: ac7bd47218 | Delete extra files.

[22:33] <Geth> ¦ rakudo/rakudo_3075_experimental: 48da7f8047 | Experimental fix for broken stash after deserialization

[22:33] <Geth> ¦ rakudo/rakudo_3075_experimental: 473b3c25f2 | Merge branch 'rakudo_issue_3075' of github.com:vrurg/rakudo into rakudo_issue_3075

[22:33] <Geth> ¦ rakudo/rakudo_3075_experimental: review: https://github.com/rakudo/rakudo/compare/5b4fb0419ef0^...473b3c25f24f

[22:33] <Geth> ¦ rakudo/build-revamp: a65279e9e4 | (Vadim Belman)++ | 3rdparty/nqp-configure

[22:33] <Geth> ¦ rakudo/build-revamp: nqp-configure submodule update

[22:34] <Geth> ¦ rakudo/build-revamp: review: https://github.com/rakudo/rakudo/commit/a65279e9e4

[22:34] <Geth> ¦ rakudo/build-revamp: 1e908f56d4 | (Vadim Belman)++ | 2 files

[22:34] <Geth> ¦ rakudo/build-revamp: Merge branch 'master' of https://github.com/rakudo/rakudo into build-revamp

[22:34] <Geth> ¦ rakudo/build-revamp: review: https://github.com/rakudo/rakudo/commit/1e908f56d4

[22:34] <Geth> ¦ rakudo/fix-DESTROY-order: 1a2dd0d9d2 | (Vadim Belman)++ | 5 files

[22:34] <Geth> ¦ rakudo/fix-DESTROY-order: Merge branch 'master' into fix-DESTROY-order

[22:34] <Geth> ¦ rakudo/fix-DESTROY-order: review: https://github.com/rakudo/rakudo/commit/1a2dd0d9d2

[22:34] <Geth> ¦ rakudo/ZhongnianTao-master: 196903c7ba | (Vadim Belman)++ | 2 files

[22:34] <Geth> ¦ rakudo/ZhongnianTao-master: Merge branch 'master' of https://github.com/ZhongnianTao/rakudo into ZhongnianTao-master

[22:34] <Geth> ¦ rakudo/ZhongnianTao-master: review: https://github.com/rakudo/rakudo/commit/196903c7ba

[22:34] <Geth> ¦ rakudo/problem-solving-74: 72e10e7970 | (Vadim Belman)++ | 4 files

[22:34] <Geth> ¦ rakudo/problem-solving-74: Better support for EXPORT with Stash

[22:34] <Geth> ¦ rakudo/problem-solving-74: 

[22:34] <Geth> ¦ rakudo/problem-solving-74: Turn off containerization for Stash

[22:34] <Geth> ¦ rakudo/problem-solving-74: 

[22:34] <Geth> ¦ rakudo/problem-solving-74: Also added operator (<EXPR>):: which is a shortcut for

[22:34] <Geth> ¦ rakudo/problem-solving-74: Stash.new(<EXPR>)

[22:34] <Geth> ¦ rakudo/problem-solving-74: 

[22:34] <Geth> ¦ rakudo/problem-solving-74: Now during import values from Stash are used as-is without deconting.

[22:34] <Geth> ¦ rakudo/problem-solving-74: 

[22:34] <Geth> ¦ rakudo/problem-solving-74: perl6/problem-solving#74

[22:34] <Geth> ¦ rakudo/problem-solving-74: review: https://github.com/rakudo/rakudo/commit/72e10e7970

[22:34] <Geth> ¦ rakudo/problem-solving-74: 97e022e754 | (Vadim Belman)++ | src/core/Rakudo/Internals.pm6

[22:34] <Geth> ¦ rakudo/problem-solving-74: Merge branch 'master' of https://github.com/rakudo/rakudo into problem-solving-74

[22:34] <Geth> ¦ rakudo/problem-solving-74: review: https://github.com/rakudo/rakudo/commit/97e022e754

[22:34] <Geth> ¦ rakudo/problem-solving-74: 11f486777b | (Vadim Belman)++ | 3 files

[22:34] <Geth> ¦ rakudo/problem-solving-74: Merge branch 'master' of https://github.com/rakudo/rakudo into problem-solving-74

[22:34] <Geth> ¦ rakudo/problem-solving-74: review: https://github.com/rakudo/rakudo/commit/11f486777b

[22:35] <vrurg> One damn wrong completion... :(

[22:49] *** cognominal joined
[22:50] <vrurg> Sorry for the flood. All accidentally pushed branches are wiped out.

[22:52] *** cognomin_ left
[22:59] <Geth> ¦ roast: 11791284bb | Altai-man++ | S06-advanced/dispatching.t

[22:59] <Geth> ¦ roast: Mark dispatcher tests as todo

[22:59] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/11791284bb

[22:59] <Geth> ¦ roast: a6d0f04570 | (Vadim Belman)++ (committed using GitHub Web editor) | S06-advanced/dispatching.t

[22:59] <Geth> ¦ roast: Merge pull request #638 from Raku/dispatcher-revert

[22:59] <Geth> ¦ roast: 

[22:59] <Geth> ¦ roast: Mark dispatcher tests with TODO

[22:59] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a6d0f04570

