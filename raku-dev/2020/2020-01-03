[00:07] *** patrickz joined
[00:11] *** patrickb left
[00:42] *** sena_kun left
[00:43] *** lucasb left
[00:44] *** patrickz left
[00:49] <Geth> ¦ rakudo: 9eef0e63af | (Rod Taylor)++ | src/core.c/DateTime.pm6

[00:49] <Geth> ¦ rakudo: Allow DateTime to accept picoseconds

[00:49] <Geth> ¦ rakudo: 

[00:49] <Geth> ¦ rakudo: This was restricted via regex and can be enlarged with minimal change. Output remains at 6 digit precision, with the remainder rounded away by the default formatter. This additional information may be obtained with the second function or by providing a custom formatter.

[00:49] <Geth> ¦ rakudo: 

[00:49] <Geth> ¦ rakudo: my $dt = DateTime.new(:2010year, :10month, :10day, :5hour, :5minute, second => '59.987654321');

[00:49] <Geth> ¦ rakudo: say $dt; # output  2010-10-10T05:05:59.987654Z

[00:49] <Geth> ¦ rakudo: say $dt.second; # output  59.987654321

[00:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9eef0e63af

[00:49] <Geth> ¦ rakudo: abe287cf8e | (Vadim Belman)++ (committed using GitHub Web editor) | src/core.c/DateTime.pm6

[00:49] <Geth> ¦ rakudo: Merge pull request #3396 from rbt/master

[00:49] <Geth> ¦ rakudo: 

[00:50] <Geth> ¦ rakudo: Allow DateTime to nanoseconds.

[00:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/abe287cf8e

[00:51] <vrurg> notable6: http://blogs.perl.org/users/vadim_belman/2020/01/class-role-and-attribute-accessor.html

[00:51] <notable6> vrurg, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Notable

[00:52] <vrurg> notable6: weekly http://blogs.perl.org/users/vadim_belman/2020/01/class-role-and-attribute-accessor.html

[00:52] <notable6> vrurg, Noted! (weekly)

[00:57] *** sena_kun joined
[02:01] *** unicodable6 left
[02:01] *** sourceable6 left
[02:01] *** statisfiable6 left
[02:01] *** reportable6 left
[02:01] *** coverable6 left
[02:01] *** notable6 left
[02:01] *** quotable6 left
[02:01] *** bloatable6 left
[02:01] *** benchable6 left
[02:01] *** releasable6 left
[02:01] *** greppable6 left
[02:01] *** squashable6 left
[02:01] *** nativecallable6 left
[02:01] *** bisectable6 left
[02:01] *** shareable6 left
[02:01] *** committable6 left
[02:02] *** reportable6 joined
[02:02] *** bisectable6 joined
[02:02] *** sourceable6 joined
[02:02] *** coverable6 joined
[02:02] *** shareable6 joined
[02:02] *** nativecallable6 joined
[02:03] *** squashable6 joined
[02:03] *** committable6 joined
[02:03] *** notable6 joined
[02:04] *** benchable6 joined
[02:04] *** greppable6 joined
[02:04] *** statisfiable6 joined
[02:04] *** bloatable6 joined
[02:04] *** unicodable6 joined
[02:04] *** quotable6 joined
[02:04] *** releasable6 joined
[02:25] <Geth> ¦ roast: 5b211db7be | (Rod Taylor)++ | S32-temporal/DateTime.t

[02:25] <Geth> ¦ roast: Tests for second truncation to milliseconds

[02:25] <Geth> ¦ roast: 

[02:25] <Geth> ¦ roast: This was already being done by the formatter. Add tests to ensure the behaviour remains consistent.

[02:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5b211db7be

[02:25] <Geth> ¦ roast: 17407a3f47 | (Vadim Belman)++ (committed using GitHub Web editor) | S32-temporal/DateTime.t

[02:25] <Geth> ¦ roast: Merge pull request #609 from rbt/master

[02:25] <Geth> ¦ roast: 

[02:25] <Geth> ¦ roast: Enable nanosecond times

[02:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/17407a3f47

[02:42] *** sena_kun left
[02:57] *** sena_kun joined
[03:30] <toddr> AlexDaniel the test migration is done. I don't know who says go but if you guys are happy with that, I can send it to wherever and robert will setup the redirects. 

[03:57] *** evalable6 left
[03:57] *** evalable6 joined
[04:42] *** sena_kun left
[04:55] *** sena_kun joined
[05:55] *** sourceable6 left
[05:55] *** coverable6 left
[05:55] *** nativecallable6 left
[05:55] *** quotable6 left
[05:55] *** squashable6 left
[05:55] *** notable6 left
[05:55] *** bloatable6 left
[05:55] *** committable6 left
[05:55] *** releasable6 left
[05:55] *** reportable6 left
[05:55] *** benchable6 left
[05:55] *** shareable6 left
[05:55] *** greppable6 left
[05:55] *** statisfiable6 left
[05:55] *** unicodable6 left
[05:56] *** bisectable6 left
[05:56] *** nativecallable6 joined
[05:56] *** squashable6 joined
[05:56] *** sourceable6 joined
[05:57] *** greppable6 joined
[05:57] *** bisectable6 joined
[05:57] *** notable6 joined
[05:57] *** benchable6 joined
[05:57] *** reportable6 joined
[05:57] *** shareable6 joined
[05:57] *** bloatable6 joined
[05:57] *** statisfiable6 joined
[05:58] *** coverable6 joined
[05:58] *** releasable6 joined
[05:58] *** committable6 joined
[05:59] *** quotable6 joined
[05:59] *** unicodable6 joined
[06:41] *** sena_kun left
[06:57] *** sena_kun joined
[07:02] *** epony left
[07:05] *** epony joined
[08:28] <lizmat> Files=1295, Tests=109460, 209 wallclock secs (28.38 usr  8.04 sys + 2932.90 cusr 268.14 csys = 3237.46 CPU)

[08:42] *** sena_kun left
[08:51] <Xliff> Files=1295, Tests=109450, 179 wallclock secs (27.37 usr  3.54 sys + 3206.00 cusr 163.27 csys = 3400.18 CPU) # 2019.11-338-g8a0742eeb, 4 fails S11, S14, S24 and S32

[08:52] <Xliff> lizmat: Am I on an earlier version?

[08:53] <lizmat> my test run had one failure: the new DateTime test, which wasn't in my rakudo yet

[08:54] <lizmat> and S32-str/utf8-c8.t failed, but that one always fails for me on MacOS

[08:55] <Xliff> OK, cool.

[08:56] <lizmat> https://twitter.com/_ahungry/status/1212945873333899264

[08:56] <lizmat> maybe we should have a way to invite people to a specific repo only ?

[08:56] *** sena_kun joined
[08:57] <Xliff> Maybe github needs a way to bulk unwatch? ;)

[09:13] <lizmat> perhaps, but that would require an action of the invitee...  who didn't ask to be watching 200 repos

[09:14] <Xliff> I meant: A mechanism for the invitee to bulk unwatch or bulk watch an orgs repositories.

[09:14] <lizmat> well, the bulk watch was automatic by accepting the invitation

[09:15] <Xliff> Yes. And there should be such a mechanism so that the invitee, who wants to be a member of the org, can not be swamped by content from said auto-watches.

[09:16] <Xliff> Seriously, there needs to be stages from "I'll accept!" to "All in!"

[09:17] <nine> Maybe there's a setting in the organization?

[09:21] <Geth> ¦ rakudo: 56f30073e3 | (Elizabeth Mattijsen)++ | 4 files

[09:21] <Geth> ¦ rakudo: Modernize extension of NativeCall.pm6

[09:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/56f30073e3

[09:26] <Geth> ¦ rakudo: 5c97532e34 | (Elizabeth Mattijsen)++ | 3 files

[09:26] <Geth> ¦ rakudo: Modernize extension of NativeCall/Types.pm6

[09:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5c97532e34

[09:29] <Geth> ¦ rakudo: 5a03783305 | (Elizabeth Mattijsen)++ | 3 files

[09:29] <Geth> ¦ rakudo: Modernize extension of NativeCall/Compiler/GNU.pm6

[09:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5a03783305

[09:30] <Geth> ¦ rakudo: 8b223653e2 | (Elizabeth Mattijsen)++ | 3 files

[09:30] <Geth> ¦ rakudo: Modernize extension of NativeCall/Compiler/MSVC.pm6

[09:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8b223653e2

[09:30] <lizmat> and that concludes modernizing all of lib

[09:39] <Geth> ¦ rakudo: 7ce79f4d39 | (Elizabeth Mattijsen)++ | 3 files

[09:39] <Geth> ¦ rakudo: Use .raku instead of .perl in lib/*.rakumod

[09:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7ce79f4d39

[09:42] <Geth> ¦ rakudo: 5f335aa497 | (Elizabeth Mattijsen)++ | 13 files

[09:42] <Geth> ¦ rakudo: Use .raku instead of .perl in all "make test" files

[09:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5f335aa497

[10:41] *** sena_kun left
[10:50] <AlexDaniel> lizmat: oh well…

[10:51] <AlexDaniel> btw I also invited everyone to raku-community-modules

[10:51] <AlexDaniel> because I already had the script at hand and… well… yeah

[10:52] <AlexDaniel> I don't know if the best idea now :)

[10:52] <AlexDaniel> also, we have a small issue with permissions and stuff

[10:52] <AlexDaniel> I don't know if we should be strict about things like this, but in case of raku-community-modules the “base permissions” setting is set to “admin”

[10:53] <AlexDaniel> which is probably right if you want to manage webhooks and stuff for abandoned modules

[10:53] <AlexDaniel> but it's kinda weird that 300 people will have that

[10:53] <AlexDaniel> and it's similar for perl6/ org right now because each repo has different settings (and it's mostly random)

[10:54] <|Tux|> Rakudo version 2019.11-373-g5f335aa49 - MoarVM version 2019.11-109-ge94893f89

[10:54] <|Tux|> csv-test-xs-20      0.418 -  0.426

[10:54] <|Tux|> csv-ip5xs           0.748 -  0.767

[10:54] <|Tux|> test-t --race       0.801 -  0.806

[10:54] <|Tux|> test-t              1.766 -  1.857

[10:54] <|Tux|> csv-ip5xs-20        6.428 -  6.611

[10:54] <|Tux|> test                6.772 -  7.450

[10:54] <|Tux|> test-t-20 --race    9.120 -  9.320

[10:54] <|Tux|> test-t-20          29.939 - 30.060

[10:54] <|Tux|> csv-parser         37.962 - 38.935

[10:54] <nine> So I'm gonna have to unsubscribe from all the repos I'm actually not interested in again? Somehow in hindsight it seems like just renaming the org would have been the better choice

[10:55] <AlexDaniel> it used to be that creating repos in perl6/ automatically subscribed everyone to new repos but that's no longer the case I think

[10:55] <AlexDaniel> nine: what are you even talking about?

[10:55] <AlexDaniel> does it even apply to repo transfers?

[10:55] <AlexDaniel> does it actually work that way?

[10:56] <nine> just infering

[10:56] <nine> Could also be that everything is fine :)

[10:56] <AlexDaniel> I think you have to be “owner” of the org to autosubscribe

[10:57] <AlexDaniel> but I'm not sure

[10:57] *** sena_kun joined
[10:57] <AlexDaniel> when problem-solving repo was created there were no watchers at all

[10:57] <AlexDaniel> besides maybe 7 people who are “owners”

[10:58] <AlexDaniel> now that I think about it, what is that tweet about?

[10:58] <AlexDaniel> where did they even find 200 repos?

[11:01] * AlexDaniel tests

[11:03] <AlexDaniel> I have just tested it by inviting a user to perl6/ org

[11:03] <AlexDaniel> I tried with both adding them to “perl6” team and without

[11:03] <AlexDaniel> there's no autowatch

[11:03] <nine> cool!

[11:05] <AlexDaniel> nine: but check https://github.com/settings/notifications

[11:07] <AlexDaniel> ok hold on, I think adding to a team actually does subscribe you

[11:08] <AlexDaniel> it doesn't subscribe to all 70 but it does subscribe to 50+

[11:08] <AlexDaniel> because of that checkbox there, hmmmm

[11:09] <AlexDaniel> ooooooook

[11:09] <AlexDaniel> so it changed for perl6 because at some point I think I changed the default permissions to “read”

[11:09] <AlexDaniel> so now creating a new repo doesn't autosubscribe everyone to it, just the owners

[11:10] <AlexDaniel> but then adding perl6/ team *does* autosubscribe everyone

[11:11] <AlexDaniel> 246 out of 333 people have that setting enabled and therefore are autosubscribed

[11:12] <AlexDaniel> lizmat: if they uncheck that setting in https://github.com/settings/notifications I think I can then kick that user out of any orgs they're in and reinvite, I think that'll save them some time trying to unwatch the repos

[11:12] <AlexDaniel> nine++ now I understand the situation better

[11:14] <AlexDaniel> lizmat: they can also “unwatch all” from here but that'd include any other repos too https://github.com/watching

[11:14] <nine> AlexDaniel++ for dealing with all these boring organizational issues

[11:16] <AlexDaniel> So TL;DR if you have that setting set in your own settings, you will always autowatch any repos we give you permissions to, and currently I don't see any way to fix that on our side besides no longer giving people permissions

[11:17] <AlexDaniel> the “200” repos in question is 50+ repos that people have access to in perl6 org, 5 repos in raku org and 70 repos in raku-community-modules

[11:24] <Xliff> Ao I turn off "Automatically watch repositories" ?

[11:24] <Xliff> s/Ao/So/

[11:24] <AlexDaniel> yeah if you don't want to watch all the repos you have access to

[11:27] <AlexDaniel> nine: also I think you're right, the moment we set permissions in the new org it'll autowatch unless you set the status to “ignore” or something like that

[11:28] <AlexDaniel> it seems like the autowatch feature triggers when you gain new permissions, which I think will be the case when we start transferring stuff

[11:29] <AlexDaniel> I can create a repo telling people to uncheck the setting

[12:15] *** camelia left
[12:39] <Xliff> Can someone restart camelia?

[12:42] <nine> Method NQP::Config::configure_misc must be implemented by the language class at /home/camelia/rakudo-m-2/nqp/3rdparty/nqp-configure/lib/NQP/Config.pm line 563.

[12:42] *** sena_kun left
[12:48] *** camelia joined
[12:57] *** sena_kun joined
[12:59] <lizmat> can someone explain me (vrurg?) why this puns a Role:

[12:59] <lizmat> m: role R { method m() { ... } }; dd R.foo

[12:59] <camelia> rakudo-moar 5f335aa49: OUTPUT: «Method 'm' must be implemented by R because it is required by roles: R.␤  in block <unit> at <tmp> line 1␤␤»

[12:59] <lizmat> and this doesn't:

[12:59] <lizmat> m: role R { method m() { ... } }; dd R.gist

[12:59] <camelia> rakudo-moar 5f335aa49: OUTPUT: «"(R)"␤»

[13:00] <lizmat> is there a list somewhere of no-need-to-pun methods ?

[13:03] <nine> lizmat: indeed, there is: https://github.com/rakudo/rakudo/blob/master/src/Perl6/bootstrap.c/BOOTSTRAP.nqp#L3910

[13:03] <lizmat> nine++

[13:17] <Geth> ¦ nqp: 7b1b0cebff | (Elizabeth Mattijsen)++ | 2 files

[13:17] <Geth> ¦ nqp: Give HLL/Actions|Grammar a "raku" method

[13:17] <Geth> ¦ nqp: 

[13:17] <Geth> ¦ nqp: And make the "perl" method a front for calling the "raku" method.

[13:17] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/7b1b0cebff

[13:25] <Geth> ¦ nqp: 530c7a6131 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[13:25] <Geth> ¦ nqp: Bump MOAR to get the latest and greatest nine++ fixes

[13:25] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/530c7a6131

[13:29] *** lucasb joined
[13:40] <Geth> ¦ rakudo: 9a5579ff19 | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:40] <Geth> ¦ rakudo: Add "raku" as a method that will not cause punning

[13:40] <Geth> ¦ rakudo: 

[13:40] <Geth> ¦ rakudo: Also some comment changes

[13:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9a5579ff19

[13:40] <Geth> ¦ rakudo: 784daae2ca | (Elizabeth Mattijsen)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp

[13:40] <Geth> ¦ rakudo: Add a "raku" method to BOOTSTRAPATTR

[13:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/784daae2ca

[13:40] <Geth> ¦ rakudo: 9ccfedb18a | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[13:40] <Geth> ¦ rakudo: Bump NQP to get all the latest goodies

[13:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9ccfedb18a

[14:16] <sena_kun> >Fetching [FAIL]: Text::Diff::Sift4:ver<1.4.0> from git://github.com/masterduke17/text-diff-sift4.git

[14:16] <sena_kun> is that just me or before zef accepted git:// urls just ok?

[14:20] <Geth> ¦ roast: 6d23891a3a | (Elizabeth Mattijsen)++ | 9 files

[14:20] <Geth> ¦ roast: Some s/perl/raku changes

[14:20] <Geth> ¦ roast: 

[14:20] <Geth> ¦ roast: These were necessary to make them pass on the s/perl/raku method switch

[14:20] <Geth> ¦ roast: soon to be done in Raku.  Fortunately, these changes also pass on Raku

[14:20] <Geth> ¦ roast: *before* these changes.

[14:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6d23891a3a

[14:22] <Geth> ¦ rakudo: add2ec0d49 | (Elizabeth Mattijsen)++ | 50 files

[14:22] <Geth> ¦ rakudo: Change all 'method perl' to 'method raku'

[14:22] <Geth> ¦ rakudo: 

[14:22] <Geth> ¦ rakudo: So the "raku" method is now leading, rather than a wrapper for the

[14:22] <Geth> ¦ rakudo: "perl" method.  The "perl" method has now become a wrapper for the

[14:22] <Geth> ¦ rakudo: "raku" method.

[14:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/add2ec0d49

[14:29] <sena_kun> .seen MasterDuke17

[14:29] <tellable6> sena_kun, I saw MasterDuke17 2019-12-19T16:54:12Z in #raku-dev: <MasterDuke> oh, and handling return values from the libtommath functions, which warn if you don't, and we mostly weren't

[14:33] <Geth> ¦ roast: aa4994a7f6 | (Elizabeth Mattijsen)++ | 222 files

[14:33] <Geth> ¦ roast: Call method .raku instead of .perl in tests

[14:33] <Geth> ¦ roast: 

[14:33] <Geth> ¦ roast: Yes, this is a big commit.  Some may still be missed  :-(

[14:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/aa4994a7f6

[14:34] <lizmat> *phew*   Now on to the ecosystem  :-)

[14:34] <AlexDaniel> sena_kun: iirc it depended on your setup

[14:35] <AlexDaniel> sena_kun: also I think there was a way to write it in your meta6.json so that it always worked, maybe by using the https link?

[14:42] *** sena_kun left
[14:49] <dogbert11> .

[14:49] <tellable6> 2020-01-02T23:14:50Z #raku-dev <lizmat> dogbert11 S32-num/stress.t is a flapper for me

[14:49] <tellable6> 2020-01-02T23:16:56Z #raku-dev <lizmat> dogbert11 failure is typically 1.2873811240847445e-25 vs 1.2873811240847447e-25, aka the last shown digit

[14:49] <tellable6> 2020-01-02T23:18:23Z #raku-dev <lizmat> dogbert11 so it appears there *is* drift when roundtripping, and it is *not* load related

[14:50] <dogbert11> lizmat: do you think it's related to the recent 'val' changes?

[14:50] <lizmat> I don't think so, but maybe we can bisect that

[14:52] <dogbert11> that is definitely worth a try

[14:54] <lizmat> m: use Test; cmp-ok 3.782267030601322e-76.raku.Num.raku.Num.raku.Num.raku.Num, "===", 3.782267030601322e-76

[14:54] <camelia> rakudo-moar add2ec0d4: OUTPUT: «ok 1 - ␤»

[14:54] <lizmat> hmmm

[14:56] *** sena_kun joined
[14:57] <lizmat> could be related to val() changes

[14:58] <lizmat> and if that's true, it looks like I'm going to need a val() redesign  :-(

[14:59] <lizmat> grrr...

[14:59] <lizmat> dogbert11: please make an issue for it  :(

[15:00] <dogbert11> please don't shoot the messenger :)

[15:00] <vrurg> run, dogbert11, run...

[15:01] * dogbert11 runs ...

[15:04] <lizmat> nooooo  :-)

[15:05] <dogbert11> R#3400

[15:05] <dogbert11> G#3400

[15:05] <dogbert11> lizmat: https://github.com/rakudo/rakudo/issues/3400

[15:06] <lizmat> dogbert11: https://github.com/rakudo/rakudo/blob/master/src/core.c/Str.pm6#L3084

[15:06] <lizmat> dogbert11++

[15:06] <lizmat> am about to go away until later tonight, will look at it then

[15:32] <Geth> ¦ problem-solving: c146268616 | (Aleks-Daniel Jakimenko-Aleksejev)++ | .github/ISSUE_TEMPLATE/issue-template-infrastructure.md

[15:32] <Geth> ¦ problem-solving: Remove second assignee from the template

[15:32] <Geth> ¦ problem-solving: 

[15:32] <Geth> ¦ problem-solving: Otherwise the template doesn't work at all. I think the syntax was

[15:32] <Geth> ¦ problem-solving: wrong, but this fix will do for now.

[15:32] <Geth> ¦ problem-solving: review: https://github.com/perl6/problem-solving/commit/c146268616

[15:32] <Geth> ¦ problem-solving: 834840e43a | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[15:32] <Geth> ¦ problem-solving: Rakufy the templates

[15:32] <Geth> ¦ problem-solving: review: https://github.com/perl6/problem-solving/commit/834840e43a

[15:37] <Geth> ¦ problem-solving: 48d036cb42 | (Aleks-Daniel Jakimenko-Aleksejev)++ | README.md

[15:37] <Geth> ¦ problem-solving: Rakufy the README

[15:37] <Geth> ¦ problem-solving: review: https://github.com/perl6/problem-solving/commit/48d036cb42

[15:43] <AlexDaniel> but why is it flapping?? O_o

[15:47] <Geth> ¦ problem-solving: melezhik assigned to rba Issue Test Raku modules against different OS, Rakudo versions https://github.com/perl6/problem-solving/issues/144

[15:49] <bartolin> vrurg: I think I have a fix for G#3399. I'm not really sure why, but removing the 'return' here helps: https://github.com/rakudo/rakudo/blob/add2ec0d49/src/core.c/Mu.pm6#L826 Running a spectest now.

[15:52] <bartolin> maybe it happens because return does a nqp::p6recont_ro (https://github.com/rakudo/rakudo/blob/add2ec0d49/src/core.c/control.pm6#L37). And MoarVM uses the code from https://github.com/rakudo/rakudo/blob/add2ec0d49/src/vm/moar/spesh-plugins.nqp#L44 that doesn't have a return.

[16:02] <vrurg> bartolin: looks reasonable. 

[16:02] * vrurg doesn't remember if the return there is mine...

[16:03] <bartolin> yeah, it's new there. I'll commit the fix in a moment.

[16:05] <vrurg> git confirms. Wonder why I put it there because usually I avoid it.

[16:05] <vrurg> bartolin: great job, thanks!

[16:05] * vrurg is afk

[16:08] <Geth> ¦ rakudo: 262b6fc7ae | (Christian Bartolomäus)++ | src/core.c/Mu.pm6

[16:08] <Geth> ¦ rakudo: Don't use explicit return in dispatch:<::>

[16:08] <Geth> ¦ rakudo: 

[16:08] <Geth> ¦ rakudo: Fixes #3399 (for the JVM backend). Please note that MoarVM uses

[16:08] <Geth> ¦ rakudo: different code for this purpose:

[16:08] <Geth> ¦ rakudo: https://github.com/rakudo/rakudo/blob/add2ec0d49/src/vm/moar/spesh-plugins.nqp#L43-L44

[16:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/262b6fc7ae

[16:30] <sena_kun> AlexDaniel: 1)how fast bisectable builds for new commits are done? 2)where can I check list of all builds?

[16:32] <AlexDaniel> sena_kun: there's a build for every rakudo commit on master branch since 2014.01

[16:32] <AlexDaniel> sena_kun: new builds appear within a few minutes after they're committed to master

[16:32] <AlexDaniel> e: say 42

[16:32] <evalable6> AlexDaniel, rakudo-moar 262b6fc7a: OUTPUT: «42␤»

[16:32] <AlexDaniel> e.g. that last commit is already there

[16:33] <AlexDaniel> sena_kun: last time I checked there were over 9000 builds

[16:33] <AlexDaniel> c: 2014.02 say 42

[16:33] <committable6> AlexDaniel, ¦2014.02: «42␤»

[16:33] <AlexDaniel> c: 2014.02^ say 42

[16:33] <committable6> AlexDaniel, ¦2014.02^: «42␤»

[16:33] <AlexDaniel> yeah

[16:33] <sena_kun> AlexDaniel: great! That's fast. Great. I am playing with Blin right now and got "no end point build available" for a couple of runs, hence the question.

[16:34] <AlexDaniel> sena_kun: iiinteresting. What did you give it for --new ?

[16:34] <sena_kun> AlexDaniel: nothing. I mean, it took latest from master, but the build wasn't ready for latest commit yet. Now it is available and it works now, hence no issue.

[16:35] <AlexDaniel> ahhh

[16:36] <AlexDaniel> sena_kun: right… well, two things can improve it: support for webhooks and on-demand builds

[16:37] <AlexDaniel> these things were on my to-do list since forever

[16:37] <AlexDaniel> goddamn software is never ready :)

[16:37] <AlexDaniel> well, I mean, complete

[16:38] <sena_kun> AlexDaniel: it is very cool already, I think. :)

[16:38] <sena_kun> though I can't reproduce "already installed" bug locally and it kind of sucks, since I wanted to look into that, that's annoying...

[16:38] <AlexDaniel> evalable6 doesn't advance to the next build until it's ready, but of course if you're running blin locally then it kinda doesn't know

[16:38] <AlexDaniel> sena_kun: isn't purging the installed/ dir enough to fix that?

[16:40] <Geth> ¦ roast: 93ada5fa3b | (Christian Bartolomäus)++ | 2 files

[16:40] <Geth> ¦ roast: [JVM] Fudge some newly added test

[16:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/93ada5fa3b

[16:43] *** sena_kun left
[16:53] <Geth> ¦ Blin/enchance: 4 commits pushed by Altai-man++

[16:53] <Geth> ¦ Blin/enchance: 85bb9f767a | Add missing dependencies and sort

[16:53] <Geth> ¦ Blin/enchance: 44e356a117 | Increase timeout to 30 minutes

[16:53] <Geth> ¦ Blin/enchance: f3f8d4500d | Ignore abandoned modules

[16:53] <Geth> ¦ Blin/enchance: d057a746d0 | Prevent warnings when $custom-script is not defined

[16:53] <Geth> ¦ Blin/enchance: review: https://github.com/perl6/Blin/compare/85bb9f767a17^...d057a746d08d

[16:54] <Geth> ¦ Blin: Altai-man++ created pull request #16: Introduce some goodies for making the release checking process easier

[16:54] <Geth> ¦ Blin: review: https://github.com/perl6/Blin/pull/16

[16:57] *** sena_kun joined
[17:00] <AlexDaniel> sena_kun: review complete :)

[17:12] <sena_kun> bisectable6: say "ASCII text" ~~ any("ASCII C program text", "C source, ASCII text")

[17:12] <bisectable6> sena_kun, On both starting points (old=2015.12 new=262b6fc) the exit code is 0 and the output is identical as well

[17:12] <bisectable6> sena_kun, Output on both points: «False␤»

[17:12] <sena_kun> hmmmm

[17:18] <Geth> ¦ Blin/enchance: 7c49129173 | Altai-man++ | bin/blin.p6

[17:18] <Geth> ¦ Blin/enchance: Remove accidental ws character

[17:18] <Geth> ¦ Blin/enchance: review: https://github.com/perl6/Blin/commit/7c49129173

[17:18] <Geth> ¦ Blin/enchance: 9f3a324de9 | Altai-man++ | bin/blin.p6

[17:18] <Geth> ¦ Blin/enchance: Fix condition

[17:18] <Geth> ¦ Blin/enchance: review: https://github.com/perl6/Blin/commit/9f3a324de9

[17:20] <AlexDaniel> sena_kun: but now $_.any doesn't do the thing!

[17:20] <AlexDaniel> sena_kun: I'm actually not sure what this piece of code is about, hmmm… and also why is it being changed

[17:20] <AlexDaniel> it used to work, I think? Now it's giving warnings about Nils or something?

[17:20] <sena_kun> AlexDaniel: changed because it gives warnings.

[17:20] <sena_kun> yeah

[17:21] <AlexDaniel> ah it's if you give it a list of modules

[17:21] <sena_kun> I don't know if it used to work, I think it did, but it gives warnings for me every time and this patch makes this awooo go away.

[17:23] <AlexDaniel> sena_kun: also I don't think it's possible to split the condition into two lines

[17:24] <AlexDaniel> the logic here is to continue to mark the module as needed if it was specified on the command line, right?

[17:24] <sena_kun> AlexDaniel: de Morgan laws are no more?

[17:25] <AlexDaniel> sena_kun: hehe :) not here

[17:25] <AlexDaniel> sena_kun: because if it fails the condition then it'll do “next”

[17:25] <AlexDaniel> if you can rewrite it in a better way I'll appreciate it

[17:26] <sena_kun> AlexDaniel: I'll look at it some more, maybe I am not fresh enough after a short vacation. :S

[17:26] <AlexDaniel> that whole piece of code is to mark modules that were given on the command line

[17:26] <AlexDaniel> sena_kun: I had to stare at that unreadable shit for about five minutes actually :D

[17:26] <AlexDaniel> without understanding anything during that whole time

[17:27] <AlexDaniel> why is there an .any on a single string I also have no idea

[17:28] <AlexDaniel> sena_kun: it's inverted inverted logic, and the fact that junctions by themselves are also inverted doesn't really help

[17:28] <AlexDaniel> but it's simple. If it's in @specified-modules, then mark it. If it's a $custom-script, then mark it too

[17:29] <AlexDaniel> I guess that's exactly how it should be written :D

[17:29] <sena_kun> let's see...

[17:29] <AlexDaniel> if .key eq @specified-modules.any or .key eq $custom-script { .value.tail.needify }

[17:29] <sena_kun> I am trying to make perl6-File-LibMagic pass its tests too, but there is some oddness happening.

[17:31] <AlexDaniel> $custom-script was added later as an afterthought which is why the code turned into this crazy mess

[17:31] <AlexDaniel> in that section

[17:41] <Geth> ¦ Blin/enchance: bc0ee97898 | Altai-man++ | bin/blin.p6

[17:41] <Geth> ¦ Blin/enchance: Simplify condition

[17:41] <Geth> ¦ Blin/enchance: review: https://github.com/perl6/Blin/commit/bc0ee97898

[17:46] <AlexDaniel> sena_kun: so I wonder

[17:46] <AlexDaniel> sena_kun: Movieinfo is listed in that PR

[17:46] <AlexDaniel> sena_kun: but it's not here: https://github.com/perl6/ecosystem-unbitrot/issues?q=Movieinfo+is%3Aissue+sort%3Aupdated-desc+is%3Aopen

[17:47] <AlexDaniel> sena_kun: ===> Install [OK] for Movieinfo:ver<0.1.2>

[17:47] <AlexDaniel> why are we ignoring a module that used to install OK?

[17:47] <sena_kun> AlexDaniel: are you installing it locally or using `zef install Movieinfo?

[17:47] <AlexDaniel> sena_kun: that's from the last blin run

[17:47] <AlexDaniel> ===> Install [OK] for Bencode:ver<0.1.1>

[17:47] <AlexDaniel> same

[17:47] <sena_kun> >"===> Searching for: Movieinfo\nEnabled fetching backends [git path curl] don't understand git://github.com/palapitta/Movieinfo

[17:48] <AlexDaniel> Enabled fetching backends [pswebrequest path curl wget] don't understand git://github.com/palapitta/Movieinfo

[17:48] <AlexDaniel> You may need to configure one of the following backends, or install its underlying software - [git]

[17:49] <AlexDaniel> that's just zef acting wrong, no?

[17:49] <AlexDaniel> I don't know which version of zef I have but it used to work in the past

[17:49] <AlexDaniel> and then, even if it's not supposed to work, there's no PR

[17:52] *** Altai-man_ joined
[17:52] *** sena_kun left
[17:52] <Altai-man_> AlexDaniel, there is a PR dated back to 2016 adding the mandatory field ignored, seems abandoned to me.

[17:52] <tellable6> 2019-12-28T01:43:36Z #raku-dev <vrurg> Altai-man I made #3311 a blocker. Even though it's macos specific but it's a cornerstone feature which is broken.

[17:54] <AlexDaniel> Altai-man_: maybe, maybe not, that field makes no difference whatsoever anyway

[17:54] <AlexDaniel> I would've shrugged on that PR as well and moved on with my life

[17:54] <Altai-man_> AlexDaniel, there is also exactly 0 commits from the author last year.

[17:54] <AlexDaniel> well that yeah

[17:54] <Altai-man_> and in 2019

[17:55] <Altai-man_> and in 2018

[17:55] <Altai-man_> ...and in 2017

[17:55] <AlexDaniel> but let's no go this route of “we submitted a PR and it wasn't merged so we ignore the broken module”

[17:55] <AlexDaniel> because the module is not broken

[17:55] <AlexDaniel> it doesn't need that useless field, and the link used to work fine

[17:55] <Altai-man_> AlexDaniel, it is not installable by Blin --> it is a false negative.

[17:56] <AlexDaniel> Altai-man_: it was installable, that's my point

[17:56] <Altai-man_> AlexDaniel, well, I already was wondering why zef doesn't know about git:// links.

[17:56] <Altai-man_> and then, hmm...

[17:56] <Altai-man_> maybe we used panda in 2016?

[17:56] <Altai-man_> and panda worked with git:// links?

[17:57] <AlexDaniel> I repeat, it used to install OK in Blin

[17:57] <AlexDaniel> just a few months ago

[17:57] <Altai-man_> AlexDaniel, a zef ticket?

[17:57] <AlexDaniel> I disagree with the whole idea of starting to ignore modules because we changed our tooling and then claimed the modules broken yet never even submitted a ticket or a PR

[17:58] <AlexDaniel> old modules are great for tracking changes in rakudo and spotting regressions, they have a lot of crazy code which works wonderful as tests :)

[17:59] <Altai-man_> AlexDaniel, do you assume that if a module is broken for last three years, one day it'll somehow pass the test? that itself would be a regression... which kind of does proves your point, admittedly.

[18:00] <AlexDaniel> Altai-man_: what do you mean last three years

[18:00] <AlexDaniel> I repeat for the nth time, it installed OK like three months ago in Blin

[18:00] <AlexDaniel> both Bencode and Movieinfo did

[18:00] <AlexDaniel> there are the first two I looked at, I guess there are more modules like this in the list

[18:00] <AlexDaniel> the mandatory field makes no difference I hope

[18:01] <AlexDaniel> and I don't even know why it's mandatory

[18:01] <AlexDaniel> the PRs adding `6.*` are just useless, in my opinion

[18:01] <AlexDaniel> like, “you *have* to write this because reasons”

[18:02] <Altai-man_> hmmm

[18:02] <AlexDaniel> but I'm pretty sure it doesn't affect it anyway, it just can't read the git link

[18:02] <Altai-man_> let's approach it from the other side

[18:02] <AlexDaniel> which is probably something that has to be fixed in META6.json, but *we* broke it in our tooling, the module was fine for all these yeasr

[18:02] <AlexDaniel> years*

[18:04] <Altai-man_> my side is that last month I had to manually check 400+ failing modules, I guess that's the amount we did in last squashathon, maybe more. I'd like not to repeat that. There are a couple of things I know. First one is "module is already installed". Can't reproduce it locally. Second one is modules which are simply abandoned, like the one you mentioned.

[18:05] <Altai-man_> the second option is to investigate why are you running Blin and having 170 modules, I am running it on the machine I have access to and getting 400.

[18:12] <AlexDaniel> I'm not getting 170 modules, that was like three months ago

[18:12] <AlexDaniel> if some change in zef did something then I guess I'd also get 400 today

[18:12] <Altai-man_> there were no changes in zef related to this

[18:13] <AlexDaniel> ok but somehow it stopped working, right?

[18:13] <Altai-man_> ugexe claims p6c.org module list used to mangle urls to append `.git` at the end (which is missing and that's why it is broken). but we don't have p6c.org for longer than two months.

[18:14] <AlexDaniel> Altai-man_: here's the file I'm looking at https://github.com/perl6/problem-solving/files/4020302/data.json.txt

[18:14] <AlexDaniel> there's no date in it, which is my failure of course, but it's from 2019

[18:15] <Altai-man_> AlexDaniel, interesting...

[18:15] <Altai-man_> I also see 24 "already installed" entries...

[18:16] <AlexDaniel> Altai-man_: but does it matter?

[18:16] *** patrickb joined
[18:16] <Altai-man_> AlexDaniel, it's not, just a side note...

[18:19] <Altai-man_> AlexDaniel, I see what's wrong... probably

[18:19] <Altai-man_> let me check one more thing...

[18:19] <Altai-man_> hmmmm

[18:19] <Geth> ¦ rakudo: e5627b83a3 | (Christian Bartolomäus)++ | .travis.yml

[18:19] <Geth> ¦ rakudo: Skip 'make test' on JVM backend

[18:19] <Geth> ¦ rakudo: 

[18:19] <Geth> ¦ rakudo: It doesn't finish in a reasonable time and there are various failures

[18:19] <Geth> ¦ rakudo: for those tests that were run. It's just a big waste of resources.

[18:19] <Geth> ¦ rakudo: 

[18:19] <Geth> ¦ rakudo: *If* running 'make test' on the JVM backend gets in a better shape in

[18:19] <Geth> ¦ rakudo: the future, it could be re-enabled easily.

[18:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e5627b83a3

[18:20] * bartolin hopes the above commit works as expected and doesn't change the travis runs for moarvm

[18:21] <Altai-man_> AlexDaniel, I see that in blin.p6 @sources has `https://ecosystem-api.p6c.org/projects.json`, which is AFAIK dead. And if you look at `Movieinfo` module, the URL is indeed with `.git` added. the alternative zef uses is https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json. And data there is not mangled.

[18:21] <AlexDaniel> hmmm

[18:22] <[Coke]> (jvm make test) should we fudge it so that we are at least running the passing tests?

[18:22] <Altai-man_> after spring (was it spring?) ecosystem server dying, was ecosystem data update code ever brought back to life?

[18:22] <AlexDaniel> Altai-man_: no idea

[18:22] <AlexDaniel> rba: ↑?

[18:25] <bartolin> [Coke]: I don't think, it's worth the trouble. One problem is the broken EvalServer (RT #132104). It takes really, really long to run the tests and I doubt we'll be fast enough for the travis timeout. One idea would be to run only a subset of the tests.

[18:25] <AlexDaniel> bartolin: nice that you're here!

[18:25] <AlexDaniel> bartolin: can you review https://github.com/Raku/p6rt ?

[18:26] <AlexDaniel> just take a look at the tickets and tell if it looks alright

[18:26] <bartolin> [Coke]: But then I'm nearly sure that nobody has looked at the travis tests for the JVM backend for a very long time.

[18:27] <bartolin> AlexDaniel: yeah, I can do that (probably a bit later today)

[18:29] <bartolin> fine, at least I didn't mess up the tests for moar: https://travis-ci.org/rakudo/rakudo/jobs/632392114

[18:30] <[Coke]> bartolin: I just happened to build a copy of jvm today because I had a thought about targetting a 4th backend.

[18:32] <bartolin> [Coke]: Oh, interesting! I'm still trying to fix regressions if I see them, but I'm only looking at the nqp tests and the spectests. No longer running spectests daily, but from time to time.

[18:51] <[Coke]> I was able to do a build and 'make install' locally, but trying to run it interactively and run 'say 3+4' in the REPL basically hung.

[18:51] <[Coke]> (the REPL did launch, though)

[18:53] <bartolin> oh, I remember seeing that, too. I suspected it to be a bug with buffering of stdin. If you type ^D after executing your command you should get an answer (the REPL exits, though)

[18:54] <bartolin> I'm mostly using it with -e. That works fine.

[18:56] <bartolin> hah, I've even made a note locally "REPL: doesn't see NL: > say 42; hangs" ]:

[18:56] <[Coke]> (y)

[19:13] <Xliff> What does this error mean? "Cannot find method 'package_at_key' on 'BOOTHash': no method cache and no .^find_method"

[19:16] <rba> Altai-man_: There is a server under my controls servering ecosystems-api.p6c.org. Yet not sure if this update mechanism is still working fine.

[19:16] <tellable6> 2020-01-02T18:07:45Z #raku-dev <patrickb> rba I have created binary builds  for Linux, MacOS and Windows for the rakudo 2019.11 release. They can be downloaded here: https://patszim.volans.uberspace.de/patcloud/index.php/s/qmkreEJLQDZcjbf

[19:16] <tellable6> 2020-01-02T18:08:43Z #raku-dev <patrickb> rba You can put them on https://stage-rakudo.rakulang.site/

[19:16] <tellable6> 2020-01-02T18:09:14Z #raku-dev <patrickb> rba That's the last missing bit that was standing in the way of the new rakudo.org website as far as I know.

[19:16] <tellable6> 2020-01-02T18:10:17Z #raku-dev <patrickb> rba Some testing of those builds would be welcome of course.

[19:16] <tellable6> 2020-01-02T22:26:20Z #raku-dev <patrickb> rba The stage-rakudo.rakulang.site/dl -> github redirect seems to be active again. Can you disable that (for the staging website only) again?

[19:17] <rba> Altai-man_: Think I need some help with this.

[19:17] <bartolin> toddr AlexDaniel: if I'm not mistaken, the migration script doesn't re-open a GH issue when the status on RT was changed from 'resolved' to 'open'. For example https://rt.perl.org/Ticket/Display.html?id=72820 is still open, while https://github.com/Raku/p6rt/issues/1498 is closed

[19:18] <bartolin> though the status change is there: https://github.com/Raku/p6rt/issues/1498#issuecomment-570363850

[19:19] <toddr> looks like it's getting confused because it was closed then opened later

[19:20] * bartolin looks further -- just wanted to note this one early

[19:21] <toddr> LOL so the export lists a date in the resolved field even though status=open

[19:23] <bartolin> well, the ticket *was* resolved on 2016-07-06 (but only for 15 minutes)

[19:24] <rba> Altai-man_: Current zef is not using the ecosystems-api url any more.

[19:38] *** timotimo joined
[19:41] <toddr> bartolin thanks for the catch. you can see the fix in https://github.com/Raku/p6rt/issues/6695 and https://github.com/Raku/p6rt/issues/6694

[19:41] <bartolin> toddr: another question: it looks like recent changes to tickets aren't taken into account. I guess the export was run on a database export from rt. Do you know the timestamp of that export? Example: https://rt.perl.org/Ticket/Display.html?id=76930 was closed on 2019-08-29, https://github.com/Raku/p6rt/issues/2003 is still open

[19:42] <toddr> AFAIK that queue was locked in June

[19:42] <bartolin> toddr++ (fast fix)

[19:42] <toddr> I can ask for a new export.

[19:43] <bartolin> oh, June already?! That's strange, because the update to https://rt.perl.org/Ticket/Display.html?id=76930 shouldn't have been possible, should it?

[19:44] <bartolin> toddr: I think that would be good. I closed a couple of issues (in the order of 200) in the end of August.

[19:45] <bartolin> (I was assuming that those changes would make it into the new 'old-issue-tracker')

[19:45] <toddr> :\

[19:46] <toddr> I would REALLY prefer to not get a new export. I had to fix quite a bit of mixed encoding problems in the export files.

[19:46] <toddr> can you just re-close them after the switch to github?

[19:46] <bartolin> oh, I see. Yeah, that is totally possible.

[19:48] <toddr> No idea who's in charge so I'm still waiting for a good to go. Possibly others will find problems with the test migration?

[19:49] <bartolin> if you could get an exact date of your export, I'll take care of the changes that where made after said date.

[19:51] <bartolin> AlexDaniel asked me to take a look at https://github.com/Raku/p6rt earlier today. things look very promising so far. I hope I won't find anything problematic in the next few hours :)

[19:52] *** sena_kun joined
[19:53] *** Altai-man_ left
[19:54] <Xliff> When you re-export a package by using "use Package; sub EXPORT { %(PACKAGE::EXPORT::DEFAULT::) }", it works, but doesn't have a package itself so it can be re-exported. How can I fix that?

[19:54] <Xliff> See this example: https://github.com/Xliff/p6-GLib/blob/master/lib/GLib/Raw/Types.pm6

[19:54] <Xliff> I can "use GLib::Raw::Types" and it will DWIM, but I cannot re-export the symbols from GLib::Raw::Types using the same mechanism, because GLib::Raw::Types isn't a package.

[19:55] <Xliff> So what am I missing?

[19:55] <moritz> cross-posted from #raku, FWIW

[20:03] <AlexDaniel> toddr: I left a comment here wrt the final destination and stuff https://github.com/perl6/problem-solving/issues/49#issuecomment-570652148

[20:05] <AlexDaniel> toddr: let's give it maybe a day for people to take a look and then you're free to press the big button :)

[20:05] <toddr> thanks

[20:06] <toddr> The labels will be a little bit of a mess.

[20:06] <toddr> I'd need to probably make an additional mapping to make it work.

[20:07] <toddr> I'll look at it a little later.

[20:07] <AlexDaniel> we can tweak them later, but it's annoying that github will keep showing the old colors and stuff in history

[20:07] <toddr> oh? I thought it updated if you altered the label

[20:07] <AlexDaniel> like the action of labeling the ticket in comments will have the old color

[20:07] <toddr> you sure that's not just a cache issue?

[20:07] <AlexDaniel> let's see if I can find an example… :)

[20:08] <bartolin> toddr: would it be easy to look at the 'testneeded' tag in RT and make that a label? (I think there are a couple of RT tickets tagged with 'testneeded'. I'm looking for an example.)

[20:08] <AlexDaniel> oh yeah that's an important one

[20:10] <bartolin> example for testneeded: https://rt.perl.org/Ticket/Display.html?id=133762 and https://github.com/Raku/p6rt/issues/6689, respectively

[20:10] <toddr> It sounds like you want me to merge in these labels https://gist.github.com/toddr/160b0c4ee1440f649b52665819e61474

[20:11] <toddr> or do I strip out Bug?

[20:11] <AlexDaniel> toddr: you're right, it's no longer an issue! It used to be that messages like “AlexDaniel added the `tests needed` label” always had the old color and old name, but it seems to be correct now

[20:12] <AlexDaniel> I'm pretty sure it wasn't just cache

[20:12] <AlexDaniel> toddr: `bug` wasn't really used consistently, so I think it's safe to throw it away

[20:13] <bartolin> (lables) skimming through that list I'd say only testneeded is useful

[20:13] <AlexDaniel> if we care about old tickets then maybe some others too

[20:13] <AlexDaniel> but personally I don't

[20:14] <AlexDaniel> like, there were many tickets for patches in the past

[20:14] <AlexDaniel> well, maybe not many, but some :)

[20:15] <bartolin> well, if it's easy to import the tags, it would make things more consistent to import all of them.

[20:19] <toddr> Including or excluding "Bug"

[20:20] <bartolin> I *think* most tickets tagged with 'Bug' will also have [Bug] in the subject. If that duplication doesn't cause problems, I'd vote for including.

[20:20] <bartolin> bbl &

[20:21] <AlexDaniel> heh I think ‘Bug’ is just noise but I don't want to make your life harder :D

[20:22] <AlexDaniel> including `bug` means pretty much every ticket will have it…

[20:22] <AlexDaniel> bug bug bug bug bug bug bug

[20:23] <AlexDaniel> 125138.json:      "Tag" : "Bug\nBug",

[20:23] <AlexDaniel> ha

[20:25] <AlexDaniel> toddr: wait, but how do you create tickets/comments with timestamps in the past?

[20:26] <AlexDaniel> I didn't know this was possible

[20:45] *** patrickz joined
[20:46] *** patrickb left
[20:55] <bartolin> toddr AlexDaniel: I've looked at the test migration (comparing on a sample basis) and have some (minor) remarks. All in all the result looks very good to me and I'd be okay with pressing the big button. But maybe other folks will take a look as well. (more)

[20:57] <toddr> I have time stamps in the past by using a super secret API I'm not allowed to tell you about.

[20:57] <bartolin> (1) Sometimes URLs are not clickable on GH -- sometimes they are. I could look up an example, but I don't think this is worth any trouble

[20:58] <toddr> where are they not clickable?

[20:58] <bartolin> (2) Sometimes non-ASCII characters are garbled -- mostly they are ok. One example: https://rt.perl.org/Ticket/Display.html?id=132452 vs. https://github.com/Raku/p6rt/issues/6639

[20:58] <bartolin> mom ...

[21:01] <toddr> You guys are extra special. I enjoyed the irony of fixing encodings in tickets where you would complain about a unicode character not functioning right but the character transmitted by the email client was in ISO-9801-6

[21:01] <toddr> :P

[21:03] <AlexDaniel> hehe :)

[21:04] <toddr> Let's see if this pastes

[21:04] <toddr> say 'a' ~~ /./\nâ<U+0088>©â<U+0095><U+009C>Ã³aâ<U+0088>©â<U+0095><U+009C>Ãº\n\n

[21:05] <toddr> That U+0088 is what is confusing github

[21:05] <toddr> but it's in the original email

[21:06] <bartolin> *g*

[21:07] <toddr> also if you're an owner, try editing that section where you see the corrupt text and you'll see the correct content. 

[21:07] <toddr> I think it's a wierd white space and github just isn't displaying it properly?

[21:08] <bartolin> (non clickable URL) I just realized that those where http:// and it's probably a feature. See https://github.com/Raku/p6rt/issues/6694#issuecomment-570676746 (or the comment above)

[21:08] <AlexDaniel> “There was a bit of discussion today on this&#8203;: http&#8203;://irclog\.perlgeek\.de/perl6/2016\-07\-06\#i\_12795274”

[21:08] <AlexDaniel> doesn't look like a feature to me :)

[21:09] <AlexDaniel> but who knows

[21:10] <bartolin> . o O ( thou should not click on non-https links )

[21:10] <toddr> &#8203; is a way I used to inject a zero width space 

[21:10] <toddr> I have to do that or if the text says #1, it'll try to refer to ticket #1 in that repo

[21:11] <toddr> so Instead of #1 I do: \#&#8203;1

[21:11] <toddr> I have a regex going over the text that does this to prevent emojis 

[21:11] <toddr> $line =~ s/(\S):/${1}&#8203;:/msg;           # Add a empty space between words and colons so github doesn't try to turn them into an emoji.

[21:11] <bartolin> oh, that's actually one of my small remarks: This issue is referenced wrongly by three other issues: https://github.com/Raku/p6rt/issues/1 But again, I don't think this is a big problem

[21:12] <toddr> LOL so you can see in https://github.com/Raku/p6rt/issues/396#issuecomment-570340705

[21:12] <toddr> that I fixed the #2 but didn't have a g on the end of my regex.

[21:12] <AlexDaniel> it's only replacing the first one on…

[21:13] <AlexDaniel> yeah :)

[21:13] <toddr> fixed.

[21:13] <toddr> the url one is trickier

[21:13] <toddr> $line =~ s/(\S):/${1}&#8203;:/msg;           # Add a empty space between words and colons so github doesn't try to turn them into an emoji.

[21:14] <toddr> I would have to somehow detect the \S: isn't a part of a URL

[21:14] <AlexDaniel> negative lookbehind for http?

[21:14] <toddr> booo!

[21:15] <toddr> I'll take alternative regexes 

[21:16] <bartolin> one question: what does the 'Searchable as RT132452$' in the initial comment on the issues mean?

[21:16] <toddr> how about this

[21:16] <toddr>     $line =~ s/(\S):/${1}&#8203;:/msg;           # Add a empty space between words and colons so github doesn't try to turn them into an emoji.

[21:16] <toddr>     $line =~ s/(http(s))&#8203;:/$1:/g;          # Remove 8203 for urls.

[21:17] <toddr> The searchable thing is super cool

[21:17] <toddr> you can put RT132452 in github and find old issues

[21:17] *** MasterDuke joined
[21:18] <AlexDaniel> toddr: what about all other backslashes?

[21:18] <toddr> what about them?

[21:18] <AlexDaniel> “There was a bit of discussion today on this&#8203;: http&#8203;://irclog\.perlgeek\.de/perl6/2016\-07\-06\#i\_12795274”

[21:18] <MasterDuke> any particular reason we don't have appveyor for nqp?

[21:18] <AlexDaniel> if you remove just the #8203 it still won't be a valid link

[21:18] <AlexDaniel> because of \.

[21:19] <toddr> AlexDaniel can you give me the case # and I'll try a re-import? I think I have a fix.

[21:19] <AlexDaniel> toddr: https://github.com/Raku/p6rt/issues/6694#issuecomment-570676746

[21:21] <bartolin> (searchable) ahh, cool. I tried to search for both 'RT132452' and 'RT132452$' and got the same result. does the dollar sign mean something like 'end of string'?

[21:22] <toddr> https://github.com/Raku/p6rt/issues/6696

[21:22] <toddr> bartolin it tricks github into not finding RT132452 when you search for RT13245

[21:22] <toddr> the $ is not necessary

[21:23] <bartolin> I see, thanks

[21:23] <toddr> I may have broken something with the fixes for 6696 but I'm not sure

[21:24] <AlexDaniel> I don't see anything being fixed in 6696?

[21:24] <toddr> the URL works now.

[21:24] <toddr> it's not escaped

[21:24] <AlexDaniel> here? https://github.com/Raku/p6rt/issues/6696#issuecomment-570701906

[21:25] <AlexDaniel> ah

[21:25] <AlexDaniel> right, it's still not clickable though

[21:25] <toddr> I can't fix your servers

[21:25] <toddr> what do you mean not clickable?

[21:25] <toddr> I can click on this https://irclog.perlgeek.de/perl6-dev/2017-03-05#i_14208424 

[21:26] <AlexDaniel> but what about the link two comments above

[21:26] <toddr> OIC

[21:27] <toddr> that' is wierd

[21:27] <MasterDuke> anyone mind looking at the logs in https://ci.appveyor.com/project/rakudo/rakudo/builds/29884719 and my recent commits to nqp's runner and https://github.com/rakudo/rakudo/pull/3393 and figure out what i'm doing wrong?

[21:28] <MasterDuke> patrickz: ^^^?

[21:28] <AlexDaniel> toddr: that's what bartolin was talking about, it feels like http links are not processed right (unlike https ones)

[21:28] <bartolin> AlexDaniel: I won't rule out that github doesn't create links for non-https URLs

[21:28] <AlexDaniel> bartolin: no, it's in the source

[21:28] <toddr> yep it's a source problem. 1 minute

[21:29] <bartolin> ahh, I see. (I don't have admin rights, so I can't see the source)

[21:29] <toddr> \S* not \S+ (idiot!)

[21:30] <AlexDaniel> as for the redirection not working, yeah, we know about it, the service will hopefully go back up in the future

[21:31] <bartolin> (garbled characters) I've got another example where the github issue has strange characters: https://github.com/Raku/p6rt/issues/5917#issuecomment-570421876 vs. https://rt.perl.org/Ticket/Display.html?id=130414#txn-1441171 (the subject looks fine)

[21:31] <bartolin> however, that might again be in the original email.

[21:32] <bartolin> (could as well be my browser)

[21:32] <AlexDaniel> toddr: btw what about rt-archive? It seems like there are some unicode issues too: https://rt-archive.perl.org/perl6/Ticket/Display.html?id=132004

[21:32] * bartolin nodes

[21:32] * bartolin nods

[21:32] <AlexDaniel> in this case › character is mangled

[21:34] <AlexDaniel> also this last comment is simply not there: https://rt-archive.perl.org/perl6/Ticket/Display.html?id=75586#txn-1495338

[21:34] <AlexDaniel> but on github it's fine: https://github.com/Raku/p6rt/issues/1807#issuecomment-570369374

[21:35] <AlexDaniel> so links to other rt tickets go to rt-archive instead of github itself

[21:36] <AlexDaniel> which sounds alright, as long as rt-archive can display stuff correctly

[21:37] <AlexDaniel> I mean… I'm nitpicking of course, it's already more than usable

[21:38] <AlexDaniel> IIRC the API returns the ticket number back when you submit an issue, so in theory you should have RT # → Github issue mapping

[21:39] <AlexDaniel> you can't exactly do it in a single pass, I guess, unless you create tickets separately from submitting the comments

[21:41] <AlexDaniel> and I can also fix it later if it starts bothering me… :)

[21:44] <bartolin> one last thing I noticed: references between RT tickets are not visible in GH issues. https://rt.perl.org/Ticket/Display.html?id=125122 refers to https://rt.perl.org/Ticket/Display.html?id=126243, but https://github.com/Raku/p6rt/issues/4222 and https://github.com/Raku/p6rt/issues/4615 are unrelated. The reference is there if you look at rt-archive -- so it's also not a big problem.

[21:45] <bartolin> toddr++ (really great stuff)

[21:47] <toddr> still working on that url. sorry for no response

[21:51] *** Altai-man_ joined
[21:52] <bartolin> AlexDaniel: do you know if it's possible to avoid sending out all those e-mails if I'm going to manually carry over the latest changes to RT tickets to GH issues? Is it possible to temporarily disable notifications for a repo completely?

[21:53] <bartolin> (cmp. https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-01-03#l518)

[21:53] *** sena_kun left
[21:54] <AlexDaniel> the only idea I have is to not give access to people for that repo

[21:55] <AlexDaniel> once you get write access to any repo github will autosubscribe you to it (unless you have that setting turned off)

[21:55] <AlexDaniel> and then yeah, you'll start getting email notifications, I don't know of any way to turn that off

[21:58] <bartolin> so maybe you could create the repo with very limited access (you, toddr for the import, me for the manual tweaking). After the issues have been created, I'd carry over the changes. And only afterwards you grant access to more people?

[21:58] <AlexDaniel> there's `Triage` access level which is possibly perfect for that repo, I don't know if it triggers autowatch

[21:58] <AlexDaniel> bartolin: yeah, that's exactly what I meant

[21:59] <bartolin> if that's easy-ish for you, I'd prefer it over mass notifying people

[21:59] <AlexDaniel> bartolin: actually, that's the default right now :)

[21:59] <bartolin> ahh :)

[21:59] <AlexDaniel> in perl6/ org we had “perl6” team which granted you access, in raku we don't have it yet

[22:00] <AlexDaniel> bartolin: for example, in p6rt repo right now, you can't close any ticket, right?

[22:00] <bartolin> AlexDaniel: right, I can only comment

[22:02] <AlexDaniel> bartolin: btw do you have a list of your contributions?

[22:02] <bartolin> AlexDaniel: sorry, what kind of contributions do you mean?

[22:03] <AlexDaniel> bartolin: the ones you're planning to redo

[22:06] <bartolin> AlexDaniel: I have a saved search on rt.perl.org with recently updated issues. I'd identify the oldest change that's not in GH yet and redo everything what comes after. I guess it's mostly me closing all those placeholder issues (plus a few different changes)

[22:06] <AlexDaniel> ahh

[22:06] <AlexDaniel> ok

[22:06] <toddr> https://github.com/Raku/p6rt/issues/6709

[22:08] <AlexDaniel> toddr++

[22:08] <bartolin> yeah, looks good, toddr++

[22:23] *** MasterDuke left
[22:28] <Geth> ¦ rakudo: usev6++ created pull request #3403: Actually return found method

[22:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3403

[22:33] <toddr> bartolin what emails?

[22:36] <bartolin> toddr: notification emails for updated/closed tickets (to carry over the latest changes from RT after your export -- as discussed earlier). but as AlexDaniel++ explained, all seems to be good

[22:36] <japhb> Red's tests seem to be exploding quite spectacularly with rakudo and Red both from latest on github.  Not sure if that's Red's fault or rakudo's.  Going to try a rebuild-all with Red from ecosystem instead of github

[22:37] <AlexDaniel> japhb: bin/blin.p6 --old=2019.07.1 --new=HEAD Red

[22:37] <AlexDaniel> running :)

[22:37] <lizmat> Red's plays a lot of MOP tricks, and vrurg has just re-done much of role application internals, so I wouldn't be surprised there's a correlation

[22:38] <japhb> AlexDaniel: Thanks!  :-)

[22:38] <japhb> lizmat: That makes sense.  We'll see what Blin says.  :-)

[22:38] <nine> releasable6: status

[22:38] <releasable6> nine, Next release will happen when it's ready. 1 blocker. 0 out of 379 commits logged

[22:38] <releasable6> nine, Details: https://gist.github.com/7d9dadd571c7987d03036b5a78d7b01f

[22:40] <Geth> ¦ rakudo: f602c02ceb | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[22:40] <Geth> ¦ rakudo: Don't handle 1-element lists differently with roundrobin

[22:40] <Geth> ¦ rakudo: 

[22:40] <Geth> ¦ rakudo: Fixes #3402  xingminglai++ for spotting, jnthn++ for the fix

[22:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f602c02ceb

[22:48] <AlexDaniel> lizmat: and that doesn't break any spectests?

[22:48] <toddr> AlexDaniel when we did perl5, I chose to skip the ticket cross linking

[22:48] <toddr> I just left them pointing at the RT URL

[22:50] <lizmat> AlexDaniel: nope

[22:50] <lizmat> R #3402

[22:50] <AlexDaniel> lizmat: maybe I'm not getting something, but I'm pretty sure it was meant to be that way

[22:50] <AlexDaniel> https://github.com/rakudo/rakudo/issues/3402

[22:51] <AlexDaniel> lizmat: it's a design flaw that we have in other places https://docs.raku.org/language/traps#Using_[%E2%80%A6]_metaoperator_with_a_list_of_lists

[22:52] <lizmat> AlexDaniel: I didn't look too much at it, just implemented jnthn's patch that was discussed around 18:25 on #raku

[22:52] <lizmat> and verified it didn't break any spectests

[22:53] <toddr> bartolin I'm getting an updated copy of the perl6 queue

[22:53] <AlexDaniel> lizmat: and what about zip? https://github.com/rakudo/rakudo/blob/f602c02cebd871d04f6c183b6fb3f70bc4ed50ed/src/core.c/Rakudo/Iterator.pm6#L4020

[22:54] <lizmat> that possibly has the same issue...

[22:56] <bartolin> toddr: well, that would avoid the manual work. but as you mentioned above, you had to fix various encoding problems. I guess it would be three or four hours of work for me to update/close the issues. Unless you need much less time for migrating the latest version, it's not worth it.

[22:57] <toddr> I found an easy way

[22:57] *** lucasb left
[22:58] <AlexDaniel> japhb: argh it timed out

[22:58] <bartolin> toddr: sounds good, of course :)

[22:59] <toddr> I'm going to have to do another migration before I'll be comfortable that all the changes we made didn't break something new

[22:59] <AlexDaniel> japhb: and Red's tests are slooooooooooow anyway, it's not a quick bisect

[23:01] * bartolin calls it a day

[23:03] <AlexDaniel> yeah that's about as much as I'll last today :)

[23:03] <AlexDaniel> good night everyone!

[23:06] <Geth> ¦ rakudo: abcf37f2e3 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ConcreteRoleHOW.nqp

[23:06] <Geth> ¦ rakudo: Make sure method is returned

[23:06] <Geth> ¦ rakudo: 

[23:06] <Geth> ¦ rakudo: Alternate implementation of PR #3403, without using return.

[23:06] <Geth> ¦ rakudo: Bartolin++ for spotting and making the PR

[23:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/abcf37f2e3

[23:07] <japhb> AlexDaniel: Locally it looks like Red from ecosystem is exploding in the same way, so I'm guessing it's rakudo changes this time.

[23:08] <patrickz> MasterDuke: I had a look and can't explain that compiler error. The code looks very innocent to me. My wild guess would be the preprocessor is doing something very unexpected.

[23:08] <tellable6> patrickz, I'll pass your message to MasterDuke

[23:08] <AlexDaniel> japhb: if you have a test case we can bisect it, otherwise you can just take a look at the commit history for vrurg's changes :)

[23:08] <patrickz> MasterDuke: I'd maybe try to call the msvc preprocessor on that file and have a look at the result

[23:08] <tellable6> patrickz, I'll pass your message to MasterDuke

[23:52] *** sena_kun joined
[23:54] *** Altai-man_ left
