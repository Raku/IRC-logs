[00:02] *** sena_kun joined
[00:04] *** Altai-man_ left
[00:27] *** softmoth joined
[00:41] *** vrurg left
[00:48] *** vrurg joined
[00:52] *** vrurg left
[01:11] *** vrurg joined
[01:29] *** MasterDuke left
[01:55] *** lucasb left
[02:01] *** Altai-man_ joined
[02:02] *** vrurg left
[02:03] *** sena_kun left
[02:18] *** vrurg joined
[02:38] *** AlexDaniel left
[02:40] *** AlexDaniel joined
[02:40] *** AlexDaniel left
[02:40] *** AlexDaniel joined
[04:02] *** sena_kun joined
[04:03] *** Altai-man_ left
[05:33] *** softmoth_ joined
[05:34] *** softmoth left
[06:01] *** Altai-man_ joined
[06:03] *** sena_kun left
[06:58] *** jmerelo joined
[07:16] *** jmerelo left
[08:02] *** softmoth_ left
[08:02] *** sena_kun joined
[08:04] *** Altai-man_ left
[08:13] *** MasterDuke joined
[08:25] *** MasterDuke left
[08:57] *** stoned75 joined
[09:02] *** MasterDuke joined
[09:11] <lizmat> m: "abcde" ~~ / $<foo=bar>=(..) $<bar>=(...) /; say $<bar>    # TIL this actually works

[09:11] <camelia> rakudo-moar f1960baa9: OUTPUT: «[｢ab｣ ｢cde｣]␤»

[09:26] <ShimmerFairy> Never would have thought, but I guess there's no reason it couldn't.

[09:33] <jnthn> I think it falls fairly naturally out of the aliasing rules

[09:37] <lizmat> jnthn: do you remember why NQP is using a capture stack, rather than a capture hash ?

[09:43] <jnthn> I'm confused by the question, I thought the capture stack is used by all, if you mean $!cstack?

[09:44] <lizmat> $!cstack is indeed what I meant, isn't that the capture stack ?

[09:46] <jnthn> Yes, but I don't know how a hash could be used instead

[09:47] <jnthn> Or how only NQP could be using it

[09:47] <jnthn> I thought what changed was that we no longer, in Raku, build a hash after the matches are done?

[09:47] <jnthn> Or is the question "why if $!cstack a stack"?

[09:47] <jnthn> *why is

[09:47] <jnthn> And it doens't matter if this is NQP or Raku regexes?

[09:48] <lizmat> well, as you may have seen, I've dropped the idea of Match being completely lazy

[09:48] <jnthn> Haven't followed quite so closely

[09:48] <jnthn> (Weekend :))

[09:48] <lizmat> the way <( and )> are implemented prevent an optimal lazy solution

[09:48] <jnthn> Anyway, it's a stack because we need to drop matches on backtracking

[09:49] <lizmat> in HEAD, each Match object gets a list for positional, and a hash for named parameters

[09:49] <jnthn> The bstack maintains an index at a backtracking point; we slice off everything below that if we backtrack to that point

[09:49] <lizmat> ah, ok, that makes a lot of sense now

[09:50] <jnthn> Ah, good. Took me a while to figure out what you were asking. (Could be me, still on the first coffee... :))

[09:50] <lizmat> well, all of this lacks a lot of documentation

[09:50] <lizmat> so I've created a mental image, and that needed correction  :-)

[09:50] <lizmat> anyways, my new approach is that internally only a hash will be created lazily when needed

[10:01] *** Altai-man_ joined
[10:04] *** sena_kun left
[10:09] <lizmat> appears to be behind in delivering events

[10:09] * lizmat just committed 020b8c3c093e903f46bc6

[10:16] <nine> jnthn: I wonder if you have any input/idea on how I could effect Stashes to be repossessed into a parent precompilation (i.e. the compiling comp unit that triggered the current precompilation) only and not into siblings (i.e. other precompilations triggered by the same parent)?

[10:23] *** ShimmerFairy left
[10:23] *** ShimmerFairy joined
[10:27] <jnthn> nine: Hmm....well, compiling_scs in the VM is an array, which I think is related to what you're looking to do

[10:28] <jnthn> In that it indicates which precompilations you are currently in

[10:29] <nine> Oh, yes, that sounds useful!

[11:27] <Geth> ¦ rakudo/match-refactor: 020b8c3c09 | (Elizabeth Mattijsen)++ | 2 files

[11:27] <Geth> ¦ rakudo/match-refactor: Refactor Match once more

[11:27] <Geth> ¦ rakudo/match-refactor: 

[11:27] <Geth> ¦ rakudo/match-refactor: Instead of being completely lazy, which turned out to get tricky

[11:27] <Geth> ¦ rakudo/match-refactor: because of the way <( and )> are implemented, it will now lqzily

[11:27] <Geth> ¦ rakudo/match-refactor: run the $!cstack once whenever an access to sub-captures is needed,

[11:27] <Geth> ¦ rakudo/match-refactor: and create a single hash that contains both the positional as well

[11:27] <Geth> ¦ rakudo/match-refactor: as named arguments.  And made sure that stringification of a Match

[11:27] <Geth> ¦ rakudo/match-refactor: <…commit message has 6 more lines…>

[11:27] <Geth> ¦ rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/020b8c3c09

[11:27] <lizmat> only 1.5 hour late  :-)

[11:27] <tbrowder> .seen jonathonstowe

[11:27] <tellable6> tbrowder, I haven't seen jonathonstowe around

[11:28] <tbrowder> has he another alias?

[11:29] <dogbert17> .seen RabidGravy

[11:29] <tellable6> dogbert17, I saw RabidGravy 2017-12-17T01:40:19Z in #perl6: <RabidGravy> that's https://perl6advent.wordpress.com/2017/12/17/something-about-messaging-but-i-couldnt-think-of-a-snappier-title/ if you want to get in early

[11:30] <dogbert17> that's his alias if I remember correctly. Also his first name has the same spelling as jnthn's first name :)

[11:47] *** pheix joined
[12:02] *** sena_kun joined
[12:03] *** Altai-man_ left
[13:01] *** dogbert17 left
[13:28] <tbrowder> dogbert17: thnx

[13:28] <tellable6> tbrowder, I'll pass your message to dogbert17

[13:32] <tbrowder> and i always have trouble spelling jonathan...sorry

[13:34] <tbrowder> so i had a question for him about using fast cgi and his raku module. anyone here use it on a public webserver?

[13:46] *** AlexDaniel` left
[13:46] *** unclechu left
[13:46] *** dogbert17 joined
[13:50] *** Geth left
[13:50] *** Geth joined
[13:53] *** Kaiepi left
[14:01] *** Altai-man_ joined
[14:04] *** sena_kun left
[14:06] *** AlexDaniel` joined
[14:22] *** unclechu joined
[14:26] *** MasterDuke left
[14:59] *** lichtkind joined
[15:16] *** pheix left
[15:43] *** rypervenche left
[15:46] *** rypervenche joined
[16:02] *** sena_kun joined
[16:03] *** Altai-man_ left
[16:06] *** softmoth_ joined
[16:28] <Geth> ¦ rakudo/new-disp: 8107df90e3 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[16:28] <Geth> ¦ rakudo/new-disp: First steps to multi dispatch with new dispatcher

[16:28] <Geth> ¦ rakudo/new-disp: 

[16:28] <Geth> ¦ rakudo/new-disp: This isn't just a case of wiring up what we had before to the dispatcher

[16:28] <Geth> ¦ rakudo/new-disp: mechanism, but reconsidering it in light of new opporunities. Also, this

[16:28] <Geth> ¦ rakudo/new-disp: is not actually used for most multiple dispatches yet - it's only for

[16:28] <Geth> ¦ rakudo/new-disp: those that are via qualified method calls, return value coercions that

[16:28] <Geth> ¦ rakudo/new-disp: end up needing to do a multiple dispatch, and so forth. Even in its

[16:28] <Geth> ¦ rakudo/new-disp: <…commit message has 17 more lines…>

[16:28] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/8107df90e3

[16:45] <Geth> ¦ rakudo/new-disp: 64961dc56d | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[16:45] <Geth> ¦ rakudo/new-disp: New dispatcher multi handling of Scalar'd args

[16:45] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/64961dc56d

[16:59] *** Kaiepi joined
[17:05] <Kaiepi> i think i figured out how to make v6.e dns resolution perform better than v6.c's for platforms other than my own

[17:07] <Kaiepi> c-ares has multiple apis for handling dns queries asynchronously, but only one will work in combination with libuv, and that can't be used in a thread-safe way without blocking or having to write a concurrent map of some sort

[17:08] <Kaiepi> with udns i don't have to do that, and on freebsd, dns queries in v6.e tend to be around 30% faster than in v6.c, instead of being around twice as slow

[17:09] <Kaiepi> s/dns queries/connections/

[17:13] <Geth> ¦ rakudo/new-disp: dfbdf8ca8e | (Jonathan Worthington)++ | 2 files

[17:13] <Geth> ¦ rakudo/new-disp: Complete moving return type check to dispatcher

[17:13] <Geth> ¦ rakudo/new-disp: 

[17:13] <Geth> ¦ rakudo/new-disp: By adding the last missing path that was covered by the spesh plugin:

[17:13] <Geth> ¦ rakudo/new-disp: late-bound (often failed) coercive type checks.

[17:13] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/dfbdf8ca8e

[17:13] <jnthn> Kaiepi: Hm, but why does threading come into it? We run a single libuv thread.

[17:22] <Kaiepi> oh lol

[17:23] <Kaiepi> in that case, udns would just make it so i don't have to keep any state related to dns queries in the Resolver REPR, just the context they're made from

[17:23] *** japhb left
[17:23] *** japhb joined
[17:25] <Kaiepi> there are fewer syscalls that need to be made to perform dns queries, and error handling is much less awkward as well

[17:37] <Geth> ¦ nqp/new-disp: 18 commits pushed by (Jonathan Worthington)++

[17:37] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/compare/c0d4f2f2892d...5cf605d6b79b

[17:37] <Geth> ¦ rakudo/new-disp: 10 commits pushed by (Jonathan Worthington)++

[17:37] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/compare/dfbdf8ca8ec6...0f42fc2ac801

[18:01] *** Altai-man_ joined
[18:03] *** sena_kun left
[18:07] *** MasterDuke joined
[18:42] <[Tux]> Rakudo version 2020.06-7-gf1960baa9 - MoarVM version 2020.06-12-ge5d597d18

[18:42] <[Tux]> csv-test-xs-20      0.387 -  0.410

[18:42] <[Tux]> csv-ip5xs           0.839 -  0.843

[18:42] <[Tux]> test-t --race       0.841 -  0.843

[18:42] <[Tux]> test-t              1.917 -  1.934

[18:42] <[Tux]> test                7.730 -  7.952

[18:42] <[Tux]> csv-ip5xs-20        8.497 -  8.693

[18:42] <[Tux]> test-t-20 --race    9.071 -  9.562

[18:42] <[Tux]> csv-parser         24.010 - 25.090

[18:42] <[Tux]> test-t-20          32.893 - 33.158

[18:50] *** dogbert17 left
[18:53] *** dogbert17 joined
[19:07] <nine> I think the logic's gonna be: "repossess stashes only if they come from modules we loaded during the current compilation".

[19:25] <vrurg> nine: I'm out of context, but is what you're saying anyhow related to R#3075?

[19:25] <linkable6> R#3075 [open]: https://github.com/rakudo/rakudo/issues/3075 [precompilation] Conflicting use statement does not produce an error, but fails dynamic compilation.

[19:29] <nine> vrurg: no, it's about in-process precompilation

[19:30] <vrurg> Ok. :)

[20:02] *** sena_kun joined
[20:03] *** Altai-man_ left
[20:04] *** stoned75 left
[20:06] *** stoned75 joined
[21:21] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/06/29/2020-26-cloud-gone/

[21:27] <jnthn> goodness, that's a lot of weekly

[21:28] <jnthn> lizmat++

[21:28] <lizmat> yeah, took me basically all day

[22:01] *** Altai-man_ joined
[22:04] *** sena_kun left
[22:11] <lizmat> Altai-man_ still around ?

[22:43] *** Kaiepi left
[22:44] *** Kaiepi joined
[22:49] <Altai-man_> lizmat, kind of.

[22:49] <tellable6> 2020-06-29T18:48:11Z #raku <melezhik> Altai-man_ here is the draft of my very first post on the series - https://github.com/melezhik/RakuOps/tree/master/docker-sparrow

[22:49] <Altai-man_> lizmat, wanot another round?

[22:51] <Altai-man_> .tell melezhik I honestly think a blog post should tell a story or something, "why" is sometimes even more important than "How".

[22:51] <tellable6> Altai-man_, I'll pass your message to melezhik

[23:06] *** AlexDaniel left
[23:06] *** AlexDani` joined
[23:20] *** vrurg left
[23:39] *** lichtkind left
[23:55] *** Xliff joined
[23:55] <Xliff> \o

