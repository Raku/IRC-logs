[00:33] *** maggotbrain left
[00:36] *** maggotbrain joined
[00:45] *** vrurg_ joined
[00:46] <gfldex> I'm actually qualified to use escape hatches. When I was with the army we had to get a fat bloke out the bottom of a tank. It was a bit of a strech but we manages without him losing any important body parts.

[00:48] *** vrurg_ left
[00:48] *** vrurg left
[00:49] *** vrurg joined
[00:50] *** vrurg_ joined
[00:50] *** lucasb left
[00:53] *** vrurg__ joined
[00:54] *** vrurg left
[00:54] *** Altai-man_ joined
[00:56] *** vrurg_ left
[00:56] *** sena_kun left
[01:01] *** vrurg joined
[01:04] *** vrurg__ left
[01:07] *** MasterDuke left
[01:43] *** maggotbrain left
[02:55] *** sena_kun joined
[02:56] *** Altai-man_ left
[03:00] <releasable6> Next release in ‚âà1 day and ‚âà15 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[04:54] *** Altai-man_ joined
[04:57] *** sena_kun left
[06:46] *** leont joined
[06:55] *** sena_kun joined
[06:57] *** Altai-man_ left
[07:39] *** JJMerelo joined
[08:31] <JJMerelo> I'm trying to install dependencies for the doc repo with the latest (or yesterday's) commit and it simply hangs up

[08:31] <JJMerelo> Download Raku/doc, and do zef install --deps-only .

[08:32] <JJMerelo> Gonna check others

[08:32] <lizmat> Files=1306, Tests=111384, 215 wallclock secs (29.06 usr  8.42 sys + 3017.94 cusr 286.20 csys = 3341.62 CPU)

[08:35] <JJMerelo> Well, it looks like it's simply slow.

[08:35] <JJMerelo> Seems to be working now.

[08:38] <sena_kun> releasable6, status

[08:38] <releasable6> sena_kun, Next release in ‚âà1 day and ‚âà10 hours. 1 blocker. 143 out of 300 commits logged (‚ö† 4 warnings)

[08:39] <releasable6> sena_kun, Details: https://gist.github.com/9a0a4a8811887b9c49e1429b1ad425ef

[08:39] <JJMerelo> m: my @array= [1]; @array[3]=3; say @array.List; say @array.List(:view)

[08:39] <camelia> rakudo-moar 059072277: OUTPUT: ¬´(1 Nil Nil 3)‚ê§(1 (Mu) (Mu) 3)‚ê§¬ª

[08:42] <JJMerelo> m: my Int @array= [1]; @array[3]=3; say @array.List(:view)

[08:42] <camelia> rakudo-moar 059072277: OUTPUT: ¬´(1 (Mu) (Mu) 3)‚ê§¬ª

[08:43] <JJMerelo> m: my Str @array= ['a']; @array[3]='d'; say @array.List(:view)

[08:43] <camelia> rakudo-moar 059072277: OUTPUT: ¬´(a (Mu) (Mu) d)‚ê§¬ª

[08:44] <JJMerelo> lizmat is that ^^^ correct?

[08:44] <lizmat> the :view named is an implementation detail

[08:45] <lizmat> it exists to allow an optimization when coercing e.g. an Array to a List

[08:45] <JJMerelo> Meaning, not documentable

[08:45] <lizmat> right

[08:45] <lizmat> also: BagHash "proxy" is a private sub, not visible from the outside

[08:45] <JJMerelo> still, wouldn't it make mor sense if instead of always Mu, it would depend on the array element type?

[08:46] <JJMerelo> lizmat it's an example; I wasn't thinking so much about that one than about Bag, for instance.

[08:46] <lizmat> the whole point of :view is that it would not have to do any work.

[08:47] <JJMerelo> OK

[08:47] <lizmat> suppose you have an 1M elem Array, and you want a List for it

[08:47] <lizmat> the :view would be instantaneous , without it you would need to copy 1M elements

[08:48] <lizmat> the :view is only used internally when the contract is: I will not attempt to change anything you do *and* nobody will change the source

[08:49] <JJMerelo> OK

[08:49] <JJMerelo> Still

[08:49] <JJMerelo> We should have some way of documenting implementation details

[08:49] <JJMerelo> Even if it's for documentors (or doccers, whatever)

[08:50] <JJMerelo> Somebody might view the definition for Array.List, go to source, say, hey, there's a named here, I'm going to document it, and then it disappears in the next version

[08:51] <JJMerelo> I can simply add a comment in the source in the documentation, but it would need something on the other side

[08:52] <lizmat> well, I *think* I've marked all public methods that are internal as "is implementation-detail"

[08:52] <JJMerelo> By default, if it's not in roast, it's an implementation details, but a) somethings are not in roast and are spec, and b) we still document implementation details in some cases

[08:52] <lizmat> if you find any that aren't, please let me know

[08:52] <lizmat> also public subs

[08:52] <JJMerelo> It's not so much the methods, but the arguments such as this one, :view

[08:54] <lizmat> yeah, that's trickier

[08:54] <JJMerelo> and I didn't know about that trait... Thanks! That really helps

[08:54] *** Altai-man_ joined
[08:54] <JJMerelo> Now we can get into the meta-discussion "is implementation-detail" is an implementation detail?

[08:54] <lizmat> it will also hide subs / methods from introspection

[08:54] <JJMerelo> But let's not.

[08:55] <lizmat> I'd argue that "is implementation-detail" is *not* an implementation detail

[08:55] <lizmat> as *any* module developer can use it

[08:55] <lizmat> m: class A { method b() { } }; dd A.^methods>>.name

[08:55] <camelia> rakudo-moar 059072277: OUTPUT: ¬´("b", "BUILDALL")‚ê§¬ª

[08:56] <lizmat> m: class A { method b() is implementation-detail { } }; dd A.^methods>>.name

[08:56] <camelia> rakudo-moar 059072277: OUTPUT: ¬´("BUILDALL",)‚ê§¬ª

[08:56] <JJMerelo> Well, another issue for the doccers, then

[08:56] <lizmat> guess we need to mark "BUILDALL" also as implementation-detailt somehow  :-)

[08:56] <JJMerelo> Also, Github is bombing right now with 500 errors

[08:56] *** sena_kun left
[08:57] <lizmat> yeah, otherwise I would have said what I just said as comments on Github  :-)

[08:57] <JJMerelo> lizmat what about this? https://github.com/rakudo/rakudo/blob/8134470538457c68164eb64f90e8d3e946d235a0/src/core.c/JSON/Pretty.pm6

[08:57] <lizmat> what about it ?

[08:58] <JJMerelo> Well, deprecated and implementation detail. Let's forget about that.

[08:58] <JJMerelo> I just discovered there was such a thing in Rakudo, I had never seen it before.

[08:58] <lizmat> yes, indeed, and it has been deprecated

[08:58] <lizmat> and now it is also an implementation-detail :-)

[09:01] <JJMerelo> m: my Int @array= [1]; @array[3]=3; say @array.Slip

[09:01] <camelia> rakudo-moar 059072277: OUTPUT: ¬´(1 (Int) (Int) 3)‚ê§¬ª

[09:03] <JJMerelo> m: my Int @array= [0]; @array[3]=3; say @array.Slip

[09:03] <camelia> rakudo-moar 059072277: OUTPUT: ¬´(0 (Int) (Int) 3)‚ê§¬ª

[09:06] *** JJMerelo left
[09:10] *** AlexDaniel left
[09:25] <Geth> ¬¶ rakudo: 2bfaab6ccb | (Elizabeth Mattijsen)++ | 6 files

[09:25] <Geth> ¬¶ rakudo: Mark :view as an implementation-detail

[09:25] <Geth> ¬¶ rakudo: 

[09:25] <Geth> ¬¶ rakudo: - in comments for now, no way to mark Parameters like that yet

[09:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/2bfaab6ccb

[09:37] <jnthn> I don't think BUILDALL is really an implementation detail, though it'd be uncommon to call it directly

[09:39] <jnthn> Or to implement it

[09:42] <lizmat> jnthn: it definitely is *not* documented, so in that sense it is practically an implementation-detail

[09:43] <lizmat> m: class A { }; dd A.^methods

[09:43] <camelia> rakudo-moar 2bfaab6cc: OUTPUT: ¬´(submethod BUILDALL (Any:D: ;; @auto, %init, *%_) { #`(Submethod|70180816) ... },)‚ê§¬ª

[09:43] <lizmat> isn't that *not* helpful for IDE's ?

[09:55] *** JJMerelo joined
[10:09] *** ShimmerFairy left
[10:09] <gfldex> raku: my $R = role Mime[$t] { has $.mime = $t }; my $i = '/home/'.IO but $R.^specialize('dir');

[10:09] <evalable6> gfldex, rakudo-moar 2bfaab6cc: OUTPUT: ¬´(exit code 1) Could not instantiate role 'Mime':‚ê§Too few positionals passed; expected 2 arguments but got 1‚ê§  in any protect at gen/moar/stage2/NQPCORE.setting line 1216‚ê§  in block <unit> at /tmp/nNyTouPJDd line 1‚ê§‚ê§¬ª

[10:09] <gfldex> how does one actually specialize by hand?

[10:10] <jnthn> You are meant to call .^parameterize

[10:10] *** ShimmerFairy joined
[10:11] <gfldex> raku: my $R = role Mime[$t] { has $.mime = $t }; my $i = '/home/'.IO but $R.^parameterize('dir');

[10:11] <evalable6> gfldex, rakudo-moar 2bfaab6cc: OUTPUT: ¬´(exit code 1) Type check failed in binding to p‚Ä¶¬ª

[10:11] <evalable6> gfldex, Full output: https://gist.github.com/b0308d9c42527ed548be10fc4fe6e0ca

[10:16] <gfldex> Mobule authors might want to fiddle with parameterized roles. So I think we should proide better docs on Metamodel::* .

[10:18] <jnthn> Well, .^parameterize at least

[10:19] <jnthn> Of course, everything we document in the MOP makes it harder to change in the future, though given how little we've changed it...

[10:29] <[Tux]> Rakudo version 2020.05.1-301-g2bfaab6cc - MoarVM version 2020.05-97-gb5bb4f8d1

[10:29] <[Tux]> csv-test-xs-20      0.391 -  0.406

[10:29] <[Tux]> csv-ip5xs           0.869 -  0.910

[10:29] <[Tux]> test-t --race       0.853 -  0.987

[10:29] <[Tux]> test-t              2.068 -  2.240

[10:29] <[Tux]> csv-ip5xs-20        8.271 - 10.148

[10:29] <[Tux]> test                8.254 -  8.677

[10:29] <[Tux]> test-t-20 --race    9.534 - 10.395

[10:29] <[Tux]> csv-parser         24.512 - 27.662

[10:29] <[Tux]> test-t-20          35.177 - 35.493

[10:43] <gfldex> There are plenty of modules in the ecosystem that use nqp. Very few can be found under Rakudo::* .

[10:55] *** sena_kun joined
[10:57] *** Altai-man_ left
[11:00] <jnthn> Sure, and that's what happens without us encouraging its use. :)

[11:00] <lizmat> well, at least some are intended to be included in the core some day  :-)

[11:01] <lizmat> Set::Equality being one of them  :-)

[11:01] <jnthn> I'm not that worried about those with responsive authors. :-)

[11:02] <jnthn> greppable6: nqp::findmethod

[11:02] <greppable6> jnthn, 15 lines, 12 modules: https://gist.github.com/58a778f21be6aa30d73568d625d95366

[11:03] <jnthn> Those should probably start using .^find_method

[11:03] <jnthn> If anybody wants to try and get ahead of the breakage.

[11:04] <jnthn> Though we could in principle shim that one to just call .^find_method

[11:12] <lizmat> looks like the core also has its fair share of nqp::findmethod

[11:12] <lizmat> should those also be changed ?

[11:14] <jnthn> Mayyyybe...I want to see why it's doing them

[11:14] <jnthn> I supsect the answer in some cases is "to avoid hllization"

[11:14] <jnthn> In which case switching them to nqp::dispatch(...) is a better bet

[11:16] <lizmat> ok, won't touch them then...  :-)   INTERPOLATE is the biggest offender

[11:16] <lizmat> afk for a few hours&

[12:23] <jnthn> m: my @a = 1, Nil, 3; @a Z||= 2, 2, 2; say @a

[12:23] <camelia> rakudo-moar 2bfaab6cc: OUTPUT: ¬´===SORRY!===‚ê§Cannot find method 'ann' on object of type NQPMu‚ê§¬ª

[12:23] <jnthn> "oops" :)

[12:30] *** JJMerelo left
[12:42] <jnthn> (Discovered during RakuAST work, where I'm trying to figure out how to model/compile various meta-ops.)

[12:42] <jnthn> I only really need the assign one for now, though

[12:54] *** Altai-man_ joined
[12:57] *** sena_kun left
[13:09] <moritz> the rabbit hole goes really deep :D

[13:23] <Geth> ¬¶ rakudo/rakuast: e324ce4d44 | (Jonathan Worthington)++ | 4 files

[13:23] <Geth> ¬¶ rakudo/rakuast: RakuAST supprot for the assignment meta-operator

[13:23] <Geth> ¬¶ rakudo/rakuast: 

[13:23] <Geth> ¬¶ rakudo/rakuast: Meaning that we can now compile various of the tests that depend on

[13:23] <Geth> ¬¶ rakudo/rakuast: using += and similar. The assignment itself needs some attention yet (we

[13:23] <Geth> ¬¶ rakudo/rakuast: don't compile assignments too smartly in general).

[13:23] <Geth> ¬¶ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/e324ce4d44

[13:42] <Geth> ¬¶ rakudo/rakuast: f0a7682c66 | (Jonathan Worthington)++ | src/Raku/Grammar.nqp

[13:42] <Geth> ¬¶ rakudo/rakuast: Unbreak compilation of chaining ops

[13:42] <Geth> ¬¶ rakudo/rakuast: 

[13:42] <Geth> ¬¶ rakudo/rakuast: We can't depend on the pasttype any more.

[13:42] <Geth> ¬¶ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/f0a7682c66

[13:42] <jnthn> 12 out of 26 t/01-sanity/ passing with RakuAST

[13:55] <moritz> nice progress!

[13:55] <jnthn> A few are passing for the slightly deplorable reason that if you the output is 'ok $foo' because you don't compile interpolation yet, then it still passes :P

[13:56] <jnthn> prove is a bit lax, it seems

[14:01] <jnthn> haha

[14:01] <jnthn> # expected: 99

[14:01] <jnthn> #      got: -> gnatur { #`(Block|64806336) ... }

[14:02] <jnthn> I...can guess what is cheating and how it's getting caught :D

[14:14] *** kubrat left
[14:22] <Geth> ¬¶ rakudo/rakuast: ccf2bb274b | (Jonathan Worthington)++ | 5 files

[14:22] <Geth> ¬¶ rakudo/rakuast: RakuAST handling of bare blocks

[14:22] <Geth> ¬¶ rakudo/rakuast: 

[14:22] <Geth> ¬¶ rakudo/rakuast: * Invoke blocks that are directly at statement level

[14:22] <Geth> ¬¶ rakudo/rakuast: * Add a cheating circumfix:sym<{ }> to the grammar; for now, it does not

[14:22] <Geth> ¬¶ rakudo/rakuast:   do the bunch of rules to decide if we're really looking at a hash or

[14:22] <Geth> ¬¶ rakudo/rakuast:   not

[14:22] <Geth> ¬¶ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/ccf2bb274b

[14:55] *** sena_kun joined
[14:57] *** Altai-man_ left
[15:03] <timotimo> would there be any value in tossing out, for example, trigonometry ops and turning them into "syscalls"?

[15:03] <timotimo> could probably keep nqp::sin($x) to compile to nqp::syscall("sin", $x)

[15:06] <lizmat> what would that make better ?

[15:06] <ShimmerFairy> If they directly map to moar ops, then for one thing you've just deprecated a bunch of opcodes in MoarVM.

[15:06] <timotimo> in theory it'd free up op space, which ... could be good?

[15:07] <ShimmerFairy> Also, if nqp::syscall calls C functions, you'd now have to worry about which sin function you want. sin? sinf? sinl?

[15:07] <timotimo> will we have checking of syscall arguments on the nqp level? if not, we'd save memory from closures that we've installed for all the different ops

[15:08] <timotimo> you would normally already have to select a different nqp::sin for integers vs doubles

[15:09] <ShimmerFairy> Is there a nqp::sin_i ? I thought there were only _n variants for trig ops.

[15:09] <timotimo> unless it's got its own little compilation function which can inspect what it's getting and select the right type based on that

[15:09] <timotimo> but in general we do it the other way around

[15:09] <timotimo> where the op forces the type

[15:09] <timotimo> we probably don't, no

[15:09] <jnthn> Primarily, we'll want to swtich things that work on objects

[15:10] <jnthn> Since then we'll have a uniform way to eliminate repr checks and so forth

[15:10] <timotimo> oh, ok

[15:10] <timotimo> do we have an idea for bounds check elimination btw?

[15:10] <timotimo> assuming we have an MVM_spesh_is_bounds_check_necessary(tc, g, ins) -> bool

[15:11] <timotimo> for atpos and bindpos

[15:11] <jnthn> I think switching things like sin is only really of value if we get to the point where we can have <= 256 ops and we can consider having *byte*code ;)

[15:11] <jnthn> But that entails far more

[15:12] <timotimo> what keeps us from variable-sized integers for everything in our bytecode anyway? ;)

[15:12] <jnthn> Time to decode them :P

[15:12] <timotimo> CPUs do that just fine somehow, too

[15:12] <jnthn> You could go the Java way though, and have a constant table for any above a certain size

[15:13] <timotimo> if our op codes need only 15 bits to span the whole range, we can have a var int style that won't go up to three bytes ever

[15:15] <timotimo> throwing out extops may be nice, we could potentially have a set of "common integers" and "common nums" that we could have const_i and const_n ops with that use only 16 bits

[15:17] <timotimo> we already went part-way with const_i64_16 of course

[15:17] <timotimo> OTOH this could all be premature optimization *shrug*

[15:18] <ShimmerFairy> Extops seem useful for compilers to add features that you probably shouldn't bug MoarVM developers to add to the VM proper.

[15:19] <timotimo> we're also currently in the process of getting rid of as many extops as we can from rakudo's stuff, hopefully all of them

[15:20] <timotimo> among other things, when the extops are gone, rakudo won't have to compile any C at all

[15:21] <timotimo> ah, though we build "runners" now

[15:21] <timotimo> so that argument falls flat

[15:21] <jnthn> Yes, but it still would unblock building a fat-pack executable

[15:22] <ShimmerFairy> tbh the language I want to eventually write an NQP compiler has essentially a "savestate" feature, and I'm hoping I could do it with extops instead of asking MoarVM to please add a feature Raku will likely never want.

[15:22] <timotimo> "serializable continuations" or a lot more?

[15:23] <ShimmerFairy> I mean like savestates in your favorite video game emulator. Allowing you to pick up exactly where execution was at (the language is MDL, to be specific)

[15:24] <timotimo> my question is perhaps mostly "can you model the entire functionality with just being able to serialize and deserialize a continuation"

[15:25] <timotimo> the runtime / compiler / whatever would of course want to have some code outside of that to manage stuff

[15:27] <ShimmerFairy> Perhaps. Solving that problem is far off, but something I'm keeping in mind.

[15:28] <timotimo> in any case, extops are the only way i'd know of to get to the actual VM state, so it's kind of the most natural fit for what you want - at least in our current implementation of moar

[15:29] <ShimmerFairy> All I can say for sure atm is that calling <RESTORE> in MDL causes you to jump back to just after calling <SAVE> and pretending it gave a return value that tells the code you just restored.

[15:29] <ShimmerFairy> (Also, I've never had to mess with continuations before, which is why I can't answer the "is a serializable continuation good enough?" question very well)

[15:30] <Geth> ¬¶ rakudo/rakuast: 1479fa30ee | (Jonathan Worthington)++ | 4 files

[15:30] <Geth> ¬¶ rakudo/rakuast: RakuAST support for string variable interpolation

[15:30] <Geth> ¬¶ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/1479fa30ee

[15:30] <timotimo> is there like a stack that restore and save act upon, or is there only ever a single save/restore "active"?

[15:32] *** unclechu left
[15:32] <ShimmerFairy> It saves to a file, so it's up to the compiler how many saves you have.

[15:33] <ShimmerFairy> er, well, up to the person writing the code I mean.

[15:35] *** AlexDaniel` left
[15:39] <ShimmerFairy> I just checked the manual, and the save/restore business also makes sure all the files you had open at the time are open when you restore, which sounds like an extra layer of fun.

[16:54] *** Altai-man_ joined
[16:56] *** sena_kun left
[17:06] <Geth> ¬¶ rakudo/rakuast: 045f347c95 | (Jonathan Worthington)++ | 4 files

[17:06] <Geth> ¬¶ rakudo/rakuast: Basic RakuAST anonymous subroutine support

[17:06] <Geth> ¬¶ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/045f347c95

[17:08] *** AlexDaniel` joined
[17:12] <jnthn> Maybe I'll get to hack on named ones later...home time now

[17:24] *** unclechu joined
[17:24] *** pochi left
[18:42] <Altai-man_> releasable6, status

[18:42] <releasable6> Altai-man_, Next release in ‚âà1 day and ‚âà0 hours. 1 blocker. 143 out of 301 commits logged (‚ö† 4 warnings)

[18:42] <releasable6> Altai-man_, Details: https://gist.github.com/f414865369a4e8987a2620337e1b2e80

[18:42] <Altai-man_> lizmat, ping?

[18:43] <Altai-man_> .tell lizmat can I run blin again?

[18:43] <tellable6> Altai-man_, I'll pass your message to lizmat

[18:55] *** sena_kun joined
[18:56] *** Xliff joined
[18:56] *** Altai-man_ left
[18:57] <Kaeipi> i'm refactoring Parameter.BUILD since it's fairly easy to generate parameters that don't make sense for the arguments you give it

[18:57] <Kaeipi> i'm not sure how to handle when the arguments you give it don't make sense though

[18:57] <Xliff> \o

[18:57] <Kaeipi> with what i have atm, the only time the submethod throws is if it's impossible to parse a name or type

[18:58] <Xliff> Has RakuAST hit moar-blead?

[18:58] <sena_kun> Xliff, as in, was something merged? No.

[18:58] <Kaeipi> so Parameter.new(:name<*@foo?>) becomes *@foo, Parameter.new(:name<*@foo), :type<Int:D>) also becomes *@foo

[18:59] <Kaeipi> but it might also make sense to throw if a name alone doesn't make sense, like the former

[18:59] <sena_kun> Anyone who can look at patching our release blocker?

[19:30] <timotimo> do we need to do anything other than skipping that method call if there are no args?

[19:31] <sena_kun> I don't think so.

[19:31] <sena_kun> Anyway, there is a test suite that will tell you if you're right.

[19:33] *** MasterDuke joined
[20:04] <lizmat> sena_kun: go for blin!

[20:04] <tellable6> 2020-06-19T18:43:29Z #raku-dev <Altai-man_> lizmat can I run blin again?

[20:05] <Geth> ¬¶ rakudo/ugexe-patch-2: 9a75738f13 | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/Proc/Async.pm6

[20:05] <Geth> ¬¶ rakudo/ugexe-patch-2: Fix windows quoting bug (#3761)

[20:05] <Geth> ¬¶ rakudo/ugexe-patch-2: review: https://github.com/rakudo/rakudo/commit/9a75738f13

[20:06] <Geth> ¬¶ rakudo: ugexe++ created pull request #3762: Fix windows quoting bug (#3761)

[20:06] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3762

[20:06] <linkable6> RAKUDO#3761 [open]: https://github.com/rakudo/rakudo/issues/3761 [BLOCKER][regression] rakudo/repl.t fails consistently on Windows

[20:54] *** Altai-man_ joined
[20:57] *** sena_kun left
[21:38] <Geth> ¬¶ rakudo: 9a75738f13 | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/Proc/Async.pm6

[21:38] <Geth> ¬¶ rakudo: Fix windows quoting bug (#3761)

[21:38] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/9a75738f13

[21:38] <Geth> ¬¶ rakudo: 1b52f017e5 | Altai-man++ (committed using GitHub Web editor) | src/core.c/Proc/Async.pm6

[21:38] <Geth> ¬¶ rakudo: Merge pull request #3762 from rakudo/ugexe-patch-2

[21:38] <Geth> ¬¶ rakudo: 

[21:38] <Geth> ¬¶ rakudo: Fix windows process quoting bug (#3761)

[21:38] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/1b52f017e5

[21:38] <linkable6> RAKUDO#3761 [closed]: https://github.com/rakudo/rakudo/issues/3761 [BLOCKER][regression] rakudo/repl.t fails consistently on Windows

[21:40] <Altai-man_> releasable6, status

[21:40] <releasable6> Altai-man_, Next release in ‚âà21 hours. There are no known blockers. 143 out of 301 commits logged (‚ö† 4 warnings)

[21:40] <releasable6> Altai-man_, Details: https://gist.github.com/341b9d3ba55f8f5a4f7d37a4ce6d892c

[22:39] <[Coke]> nice, seems like a small fix for the windows issue

[22:42] <Altai-man_> [Coke], did you check it manually, by the way?

[22:43] <[Coke]> nope, just looked at the PR

[22:44] <Altai-man_> I see.

[22:55] *** sena_kun joined
[22:57] *** Altai-man_ left
[23:00] <releasable6> Next release in ‚âà19 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

