[00:13] <japhb> m: say .is-identifier for < foo _foo foo3 _foo3 >;  # lizmat

[00:13] <camelia> rakudo-moar 08aec410e: OUTPUT: «True␤False␤False␤False␤»

[00:17] <AlexDaniel> what

[00:18] <AlexDaniel> 6c: say .is-identifier for < foo _foo foo3 _foo3 >;

[00:18] <japhb> AlexDaniel: Earlier today she sped up Pair.raku by factoring out that routine.  Unfortunately I don't think it's quite right.

[00:18] <japhb> AlexDaniel: It's new today.

[00:18] <committable6> AlexDaniel, https://gist.github.com/7cd536bdd1321f8ad072a9b0eb26bb77

[00:59] <japhb> OK, found the *start* of the rakudo range that will cause the cro-websocket/t/http-router-websocket.t segfault on my system -- 2019.11-291-g9a571b685 works just fine, and 2019.11-292-g6bc64c713 is the first rakudo that will trigger the segfaults.

[01:00] <japhb> Note that I am testing with the *github HEAD* version of cro-websocket, not the CPAN version, because I need to test using the updated certificate files (otherwise it all just fails with OpenSSL cert expiry failures)

[01:00] <japhb> That may have been why other people saw a different situation.

[01:01] <japhb> In any case, that's the reliable beginning of trouble for me locally.  I have to $life again for a while, but I'll backlog later.

[01:52] *** Altai-man_ joined
[01:55] *** sena_kun left
[02:03] <toddr> AlexDaniel: Sorry to pound the issue but now I've explained the risks of where the put the repo, what path would you like it put in? I'm good with whatever. Note what wherever you put it, that is where rt.perl.org will redirect to so it needs to be the semi-permanent destination.

[03:03] *** sourceable6 left
[03:03] *** releasable6 left
[03:03] *** coverable6 left
[03:03] *** notable6 left
[03:03] *** shareable6 left
[03:03] *** statisfiable6 left
[03:03] *** reportable6 left
[03:03] *** greppable6 left
[03:03] *** bisectable6 left
[03:03] *** quotable6 left
[03:03] *** unicodable6 left
[03:03] *** nativecallable6 left
[03:03] *** squashable6 left
[03:03] *** benchable6 left
[03:03] *** committable6 left
[03:03] *** bloatable6 left
[03:04] *** bloatable6 joined
[03:04] *** reportable6 joined
[03:05] *** notable6 joined
[03:05] *** shareable6 joined
[03:05] *** statisfiable6 joined
[03:05] *** squashable6 joined
[03:05] *** releasable6 joined
[03:05] *** unicodable6 joined
[03:05] *** greppable6 joined
[03:06] *** bisectable6 joined
[03:06] *** committable6 joined
[03:06] *** nativecallable6 joined
[03:06] *** quotable6 joined
[03:06] *** benchable6 joined
[03:06] *** sourceable6 joined
[03:06] *** coverable6 joined
[03:22] <Geth> ¦ rakudo/revert-3388-problem-solving-142: 9b1cb33135 | (Vadim Belman)++ (committed using GitHub Web editor) | 4 files

[03:22] <Geth> ¦ rakudo/revert-3388-problem-solving-142: Revert "Export packages by user given names"

[03:22] <Geth> ¦ rakudo/revert-3388-problem-solving-142: review: https://github.com/rakudo/rakudo/commit/9b1cb33135

[03:22] <Geth> ¦ rakudo: vrurg++ created pull request #3406: Revert "Export packages by user given names"

[03:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3406

[03:23] <Geth> ¦ rakudo: 9b1cb33135 | (Vadim Belman)++ (committed using GitHub Web editor) | 4 files

[03:23] <Geth> ¦ rakudo: Revert "Export packages by user given names"

[03:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9b1cb33135

[03:23] <Geth> ¦ rakudo: b12ba42c8f | (Vadim Belman)++ (committed using GitHub Web editor) | 4 files

[03:23] <Geth> ¦ rakudo: Merge pull request #3406 from rakudo/revert-3388-problem-solving-142

[03:23] <Geth> ¦ rakudo: 

[03:23] <Geth> ¦ rakudo: Revert "Export packages by user given names"

[03:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b12ba42c8f

[03:53] *** sena_kun joined
[03:55] *** Altai-man_ left
[05:52] *** Altai-man_ joined
[05:54] *** sena_kun left
[06:07] <AlexDaniel> toddr: https://github.com/Raku/old-issue-tracker

[06:07] <AlexDaniel> toddr: feel free to recreate the repo if you need to

[06:24] <bartolin> lizmat: afaics https://github.com/rakudo/rakudo/commit/09e66e504f didn't cause any problems for the JVM backend

[07:53] *** sena_kun joined
[07:55] *** Altai-man_ left
[08:06] <lizmat> Files=1295, Tests=109667, 211 wallclock secs (28.61 usr  8.34 sys + 2958.63 cusr 272.70 csys = 3268.28 CPU)

[09:37] *** Ulti left
[09:52] *** Altai-man_ joined
[09:54] *** sena_kun left
[11:09] <nine> japhb: sorry, still cannot reproduce in any way

[11:24] <nine> jdv79: same for you. None of my usual tricks helps in recreating the segfault.

[11:25] <nine> There's nothing I can do right now :/

[11:53] *** sena_kun joined
[11:55] *** Altai-man_ left
[12:03] <|Tux|> Rakudo version 2019.11-393-gb12ba42c8 - MoarVM version 2020.01

[12:03] <|Tux|> csv-test-xs-20      0.427 -  0.430

[12:03] <|Tux|> csv-ip5xs           0.712 -  0.740

[12:03] <|Tux|> test-t --race       0.805 -  0.811

[12:03] <|Tux|> test-t              1.726 -  1.743

[12:03] <|Tux|> csv-ip5xs-20        6.454 -  6.457

[12:03] <|Tux|> test                7.220 -  7.451

[12:03] <|Tux|> test-t-20 --race    9.281 -  9.337

[12:03] <|Tux|> csv-parser         22.491 - 23.172

[12:03] <|Tux|> test-t-20          29.371 - 29.711

[12:39] <nine> Well, well....I can't reproduce it on my development machine, but of course, things explode immediately in our production system...

[12:40] <lizmat> ;-(

[12:41] <nine> Why the hell do these things only pop up immediately after a release?!

[12:42] <dogbert11> nine: I can repro jdv's error as well

[12:43] <dogbert11> I'm 'bisecting' atm and the problem is introduced *very* shortly after fc41473c03659

[12:45] <dogbert11> seems to be 357adb45bf831

[12:46] <dogbert11> https://github.com/MoarVM/MoarVM/commit/357adb45bf831fe4e9fbe32d40b2d76542636fa5

[12:55] <nine> But...how?

[13:01] <nine> In our development V

[13:02] <nine> In our development VM, I got the segfault exactly once. Then it only complained about not being able to read certificate files and log files and after fixing those it always dies with "Could not find symbol '&SSL_CTX_use_certificate_chain_file'"

[13:05] <dogbert11> I cloned https://github.com/croservices/cro-http.git and ran the test from the clone directory

[13:06] <dogbert11> 'zef install cro' doesn't work for me atm. Problems with certificates and OO::Monitors

[13:09] <nine> Ah, yes, that gives me a reproducible segfault in the dev MV

[13:09] <dogbert11> yay

[13:09] <nine> The bad thing is, that I don't have rr there

[13:10] <dogbert11> does the 'bisect' above help at all?

[13:12] <nine> Any information can help

[13:14] <dogbert11> for me things work on fc41473c03659 but SEGV's on 357adb45bf83

[13:16] <dogbert11> lizmat: did you see https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-01-06#l1 ?

[13:17] <lizmat> yeah, I was working on fixing that when I had to start working on the Weekly

[13:17] <lizmat> thanks for the hint

[13:17] <lizmat> bisectable6: say (_foo => 42).perl

[13:17] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=b12ba42) because on both starting points the exit code is 0

[13:17] <bisectable6> lizmat, bisect log: https://gist.github.com/690318c36dd7483dd3329d70b0d22308

[13:17] <bisectable6> lizmat, (2020-01-05) https://github.com/rakudo/rakudo/commit/0d96bedc4d9df8d7cd63bdef1b9e465a99c578fa

[13:18] <lizmat> yup, that's the one  :-)

[13:28] <nine> dogbert11: it may depend on openssl version

[13:29] <nine> I have 1.0.2j on the dev system where it fails and 1.1.1d on my machine where it works

[13:31] * sena_kun is happy to see there is a progress with identifying a segfault (and unhappy it is there after a release)

[13:33] <dogbert11> I have 1.0.2g it seems

[13:33] <sena_kun> I hope it is possible to make a hotfix one later, though we need to fix some things beforehand (e.g. cro, jnthn is already notified about a need of cpan releases) and do another ecosystem run

[13:35] <nine> And works on our newer dev VM with OpenSSL 1.1.0i

[13:35] <dogbert11> I have 1.1.1d on my RPi 4 :)

[13:36] <lizmat> sena_kun: only a MoarVM release, right ?

[13:39] <sena_kun> lizmat, we don't have a rakudo one yet

[13:39] <sena_kun> lizmat, so yes

[13:40] <lizmat> ok, *phew*, so a MoarVM point release is still an option :-)

[13:40] *** pmurias_ left
[13:41] <sena_kun> lizmat, I suspect this is THE option currently, right.

[13:41] <lizmat> now only the minor issue of finding and fixing the problem  :-)

[13:42] <sena_kun> lizmat, and me torturing ecosystem modules. ;)

[13:42] <nine> And yes! Upgrading OpenSSL on the old dev VM make the segfaults go away

[13:43] <lizmat> :-)

[13:48] <nine> I guess the "Could not find symbol '&SSL_CTX_use_certificate_chain_file'" comes from OpenSSL determining the libopenssl version at compile time. Obviously not the right thing to do

[13:52] *** Altai-man_ joined
[13:52] *** pmurias_ joined
[13:55] *** sena_kun left
[14:00] <nine> And downgrading libopenssl made the error appear on my laptop where I can use rr :)

[14:02] <dogbert11> excellent

[14:20] <nine> Well there's definitely a bug in IO::Socket::Async::SSL. It never checks the return value of the SSL_CTX_new call which can be NULL when an error happened.

[14:24] <nine> Ah yes, the "human-readable error message" for that call is: error:140A90A1:lib(20):func(169):reason(161)

[14:24] <nine> No everything is clear!

[14:26] *** pmurias_ left
[14:26] *** pmurias joined
[14:26] <nine> Ah, with some more initialization, we get the slightly more useful error: "error:140A90A1:SSL routines:SSL_CTX_new:library has no ciphers"

[14:34] <nine> The missing initialization for error messages and the segfault actually have the same reason: IO::Socket::Async::SSL does call both OpenSSL::SSL::SSL_library_init() and OpenSSL::SSL::SSL_load_error_strings() in its mainline.

[14:34] <nine> But then this happens, iluminated by a dgb warning: warning: Temporarily disabling breakpoints for unloaded shared library "/usr/lib64/libssl.so"

[14:34] <nine> s/dgb/gdb/

[14:35] <nine> So we load the native lib, then unload it again and then load it without initialization.

[14:35] <nine> I didn't even know that one could unload a shared library

[14:42] <nine> So my fixes are actually quite innocent! It's just another one of these "how could this have worked for so long??" cases

[14:42] <nine> The actual source of the issue is: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/NativeCall.c#L147

[14:43] <nine> When we GC a NativeCall site (i.e. any native function), we free the library handle. But the handle will be shared among all functions that come from the same library!

[14:44] <[Coke]> nine++

[14:44] <lizmat> ew... so that implies you're ok if you're just using one function from each library you load ?

[14:45] <nine> lizmat: or if you keep those functions around, which is what happens in most cases

[14:45] <lizmat> aha... so the assumption was not that crazy

[14:48] <nine> But if you assume that functions are never collected, there's no reason to implement the unloading in gc_free...

[14:49] <nine> Well the proper fix would probably involve some reference counting for lib handles. A quick fix can be to just remove the call to MVM_nativecall_free_lib. That seems to fix it here

[14:50] <lizmat> I'll take some leakage for complicated reference counting shenanigans any time

[14:50] <lizmat> especially since those are no guarantee against leakage when buggy

[14:51] <lizmat> (note the use of the word "when" rather than "if" :-)

[14:51] <nine> Well in this place it's really just one place that allocates and one place that may free, so I ought to get it right in no more than 13 tries

[14:51] <nine> in this case

[14:52] <nine> Damn it, the perfect joke would have been "get it right in no more than -1 tries" :)

[14:52] <nine> Even jokes about reference counting seem to be hard to get right...

[14:53] * lizmat once had a countdown on a program where *many* people were eagerly awaiting what was to come

[14:53] <lizmat> and then the countdown when to -1, -2, -3   ARRGH...  :-)

[14:54] <lizmat> and people thought that was the joke  :-(

[14:58] <moritz> :-)

[14:59] <nine> Actually I could even use the GC instead of a reference count. That would involve adding a new 6model repr.

[15:00] <nine> In any case I'll probably need a hash to record the loaded library handles in

[15:06] <pmurias> [Coke]: I emailed Makoto, and I have to wait for a vote. I'll contact you one email for anything important/urgent

[15:06] <tellable6> 2020-01-05T22:26:21Z #raku-dev <[Coke]> pmurias - I haven't heard anything since I spoke to makoto. IRC's not a great way to reach me, please use email or TPF slack for more urgent things.

[15:12] *** lucasb joined
[15:14] <[Coke]> pmurias: Sorry about the delays, but hopefully this is the final stretch. Thanks again for your work on the JS backend.

[15:16] *** pmurias left
[15:16] *** pmurias joined
[15:27] <toddr> AlexDaniel then I can just rename p6rt. DONE! https://github.com/Raku/old-issue-tracker/issues

[15:27] <nine> Oh, gc_free is also called by repossession.

[15:27] <AlexDaniel> toddr: so… this is it?

[15:28] <toddr> yep. I've got the RT mapping. I think lizmat wanted it.

[15:28] <AlexDaniel> toddr: you mean rt id → github issue?

[15:28] <lizmat> whee!

[15:28] <AlexDaniel> I want to have that too

[15:28] <lizmat> yeah, I want to have that to fix all references in core code to use the new numbers  :)

[15:29] <toddr> ok... gist?

[15:29] <AlexDaniel> sure

[15:30] <toddr> https://gist.github.com/toddr/5c182f56f4b6960812ac88c8b922955f

[15:32] <toddr> I've passed this on to P6 NOC. He'll setup the mapping and do the final shutdown of rt.perl.org

[15:33] <toddr> p5 NOC?

[15:33] <toddr> whatevs

[15:33] <toddr> Words are hard

[15:39] <nine> Actually, we never free the handle that is later used for the failing call. There seem to be 2 different handle pointers in use for libssl.so. Unloading the one will also uninitialize the other (as the lib is probably still only loaded once)

[15:47] <[Coke]> toddr++

[15:53] <nine> Ok, the sequence seems to be: load IO::Socket::Async::SSL, run its mainline which will cause loading of libssl.so and the calls to SSL_library_init and SSL_load_error_strings, then we repossess the objects which triggers gc_free and unloading of the lib. Then we load the lib again when we reinitialize all those repossessed objects

[15:53] *** sena_kun joined
[15:54] *** Altai-man_ left
[15:58] <nine> So the real trick will be to have the library survive repossession. Even a reference count won't do as we gc_free all NativeCall objects, even when they will still be used

[16:01] <nine> I guess the reason why Inline::Perl5 is not affected is that I run initialization in an INIT phaser exported by Inline::Perl5, i.e. only after repossession.

[16:05] * japhb catches up with segfault analysis backlog -- nine++

[16:05] <japhb> OOC, why does the OpenSSL version matter for this?

[16:06] <nine> I think it's that OpenSSL 1.1 doesn't depend as much on that icall to SSL_library_init

[16:10] <japhb> Ah

[16:20] <nine> japhb: just pushed the fix to MoarVM. Please test!

[17:31] *** pmurias left
[17:37] *** pmurias joined
[17:39] <jdv79> wonder how it happened but cool that it might be fixed!

[17:40] <jdv79> not near my box at the moment but should be in 7h or so

[17:52] *** Altai-man_ joined
[17:54] *** sena_kun left
[18:11] *** |Tux| left
[18:16] *** |Tux| joined
[18:28] <lizmat> notable6: weekly

[18:28] <notable6> lizmat, 9 notes: https://gist.github.com/065abbc760d5b81dc70747c04911bb92

[18:41] <lizmat> notable6: weekly reset

[18:41] <notable6> lizmat, Moved existing notes to “weekly_2020-01-06T18:41:13Z”

[18:47] <AlexDaniel> lizmat: definitely https://github.com/perl6/old-issue-tracker and toddr++

[18:48] <lizmat> AlexDaniel: that URL 404's ?

[18:48] <AlexDaniel> I mean

[18:48] <AlexDaniel> https://github.com/Raku/old-issue-tracker

[18:48] <lizmat> hehe

[19:53] *** sena_kun joined
[19:54] *** pochi_ left
[19:54] *** pochi joined
[19:54] *** Altai-man_ left
[20:00] <nine> Oh wow... I just realized that the Open Build Service even checks for actual changes in the built files on a rebuild.

[20:01] <nine> And it even writes those to the log. As e.g. for NQPHLL.moarvm which clearly has some differences in the order of some elements: https://build.opensuse.org/package/live_build_log/devel:languages:perl6/nqp/openSUSE_Factory/x86_64

[20:03] <nine> Considering how the OBS already is so advanced with a huge build farm, web and command line interface, rebuilds of all dependent packages on any upload including running tests and as pointed out diffing files on rebuilds and all of that for a multitude of distributions and architectures...

[20:03] <nine> ... I wonder why we're even talking about building some test infrastructure ourselves.

[20:05] <nine> Oh, and not to forget, in contrast to Travis and AppVeyor, the OBS is 100 % reliable. If a build fails, it's because there's something broken in our stuff

[20:12] *** pochi left
[20:12] *** pochi joined
[20:18] <japhb> nine: The machine that I was seeing the segfaults on is at a different (network isolated) location sadly, and this machine runs a different distro than that one.  Still, I might be able to recreate if I get (un?)lucky.  I see you didn't bump -- what's the build invocation to ensure I get exactly the build of current rakudo/nqp but the MoarVM commit with the proposed fix?

[20:19] <nine> japhb: I just use 3 separate git clones of rakudo, nqp and MoarVM. With that it's just a git pull && make install

[20:25] <japhb> nine: Ah, OK.  I *start* with separate bare clones, but then in my build script I clone my bare rakudo into a new working tree, and then clone the bare nqp and MoarVM into that same tree in the subdirectories that the default build expects, and then start the overall build with `perl Configure.pl --backends=moar --gen-nqp --gen-moar && make && make test && make install` -- so I'm relying on the _REVISION 

[20:25] <japhb> files to do their thing.

[20:35] <sena_kun> do we have anything against bumping the fix?

[20:38] <nine> nope

[20:39] <nine> I already deployed packages with the fix on our production system and it fixed the issue there as well

[20:40] <sena_kun> oki

[20:40] <sena_kun> I'll bump then and with some tweaks will run another round of blin. luckily, Cro::TLS and friends installation is fixed.

[20:49] *** AlexDaniel left
[20:54] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/01/06/2020-01-20-20-foresight/

[21:18] *** pmurias left
[21:42] *** pyrimidine joined
[21:42] *** pyrimidine left
[21:42] *** pyrimidine joined
[21:43] <sena_kun> t/spec/S11-modules/import-long.rakudo.moar ........................ Dubious, test returned 1 (wstat 256, 0x100)

[21:43] <sena_kun> hmmmmmmmmm

[21:46] <sena_kun> I am running spectest again, but...

[21:46] *** |Tux| left
[21:48] <sena_kun> t/08-performance/99-misc.t ...................................... Dubious, test returned 1 (wstat 256, 0x100)

[21:48] <sena_kun> getting such things is not normal, right?

[21:52] *** Altai-man_ joined
[21:55] *** sena_kun left
[21:55] <japhb> sena_kun: There are some known flappers.  I don't spectest much, so I'm out of date, but lizmat may know them.  zoffix used to keep an up to date list, but I'm assuming that left when zoffix did.

[21:55] <tellable6> japhb, I'll pass your message to sena_kun

[21:56] <Altai-man_> japhb, thanks.

[21:56] *** |Tux| joined
[22:03] <Altai-man_> this one is not a flapper, sadly...

[22:20] <Geth> ¦ Blin/enchance: f65d27431e | Altai-man++ | bin/blin.p6

[22:20] <Geth> ¦ Blin/enchance: Revert "Ignore abandoned modules"

[22:20] <Geth> ¦ Blin/enchance: 

[22:20] <Geth> ¦ Blin/enchance: This reverts commit f3f8d4500d257f34a2d943f3d08c30fe9f11d4bf.

[22:20] <Geth> ¦ Blin/enchance: 

[22:20] <Geth> ¦ Blin/enchance: Too controversial to die on this hill.

[22:20] <Geth> ¦ Blin/enchance: review: https://github.com/perl6/Blin/commit/f65d27431e

[23:02] <Geth> ¦ Blin/master: 9 commits pushed by Altai-man++, (Aleks-Daniel Jakimenko-Aleksejev)++

[23:02] <Geth> ¦ Blin/master: 85bb9f767a | Add missing dependencies and sort

[23:02] <Geth> ¦ Blin/master: 44e356a117 | Increase timeout to 30 minutes

[23:02] <Geth> ¦ Blin/master: f3f8d4500d | Ignore abandoned modules

[23:02] <Geth> ¦ Blin/master: d057a746d0 | Prevent warnings when $custom-script is not defined

[23:02] <Geth> ¦ Blin/master: 7c49129173 | Remove accidental ws character

[23:02] <Geth> ¦ Blin/master: 9f3a324de9 | Fix condition

[23:03] <Geth> ¦ Blin/master: bc0ee97898 | Simplify condition

[23:03] <Geth> ¦ Blin/master: f65d27431e | Revert "Ignore abandoned modules"

[23:03] <Geth> ¦ Blin/master: 3590d7b668 | Merge pull request #16 from perl6/enchance

[23:03] <Geth> ¦ Blin/master: review: https://github.com/perl6/Blin/compare/0b12bc0b33f2...3590d7b668fa

[23:06] *** |Tux| left
[23:08] *** |Tux| joined
[23:12] *** AlexDaniel joined
[23:12] *** AlexDaniel left
[23:12] *** AlexDaniel joined
[23:42] <Geth> ¦ rakudo/master: 10 commits pushed by (Daniel Green)++, MasterDuke17++

[23:42] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/b12ba42c8fec...5d5701171f23

[23:51] *** lucasb left
[23:53] *** sena_kun joined
[23:55] *** Altai-man_ left
