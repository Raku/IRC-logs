[00:06] *** patrickz left
[00:41] *** MasterDuke left
[05:50] *** Xliff left
[07:43] *** MasterDuke joined
[08:06] *** lichtkind joined
[08:30] *** patrickb joined
[08:36] <patrickb> sena_kun: As part of #3700 I got a new AzureCI setup running on my rakudo clone. It shows a bunch of test failures all looking valid. (https://dev.azure.com/patrickboeker/Precomp-Builds/_build/results?buildId=43&view=results) Should I deploy this to the official rakudo repo or start bugging people to look at fixing stuff?

[08:36] <tellable6> patrickb, I'll pass your message to sena_kun

[08:36] *** Altai-man_ joined
[08:37] <patrickb> Altai-man_: Did you see my question seconds ago? ^

[08:38] <Altai-man_> patrickb, hi! Will look at it now.

[08:43] <Altai-man_> pod-panic seems valid to me, reproducible-builds as well, file-ops...

[08:45] <Altai-man_> patrickb, I would 1)run the same state for a couple of times to consider flappers; 2)collect test names + conditions which fail and then bug people, yes. I think we have green checks in rakudo repo right now, so while the new schema is very cool, we can wait a bit.

[08:45] <Altai-man_> As in, no hurry with deploying it ASAP, but bugs might be interesting to look into. E.g. failures in relocatable nqp seems worth investigating.

[08:47] <Altai-man_> patrickb, am I approving codefactor.io app you suggested?

[08:51] <patrickb> I did, yes. I don't have big intentions. Just want to run it on rakubrew.org to check two shell scripts.

[08:53] <Altai-man_> patrickb, oh, I thought it might be something like that. Maybe we can actually extend it later to check other scripts we are using, e.g. in nqp repo.

[09:09] <[Tux]> Rakudo version 2020.05.1-149-g81c0e1454 - MoarVM version 2020.05-15-g644533ad1

[09:09] <[Tux]> csv-test-xs-20      0.386 -  0.390

[09:09] <[Tux]> test-t --race       0.808 -  0.815

[09:09] <[Tux]> csv-ip5xs           0.823 -  0.842

[09:09] <[Tux]> test-t              1.870 -  1.900

[09:09] <[Tux]> test                7.353 -  7.705

[09:09] <[Tux]> csv-ip5xs-20        7.884 -  8.144

[09:09] <[Tux]> test-t-20 --race    8.773 -  9.182

[09:09] <[Tux]> csv-parser         24.077 - 24.325

[09:09] <[Tux]> test-t-20          31.215 - 32.149

[09:13] *** lichtkind_ joined
[09:16] *** lichtkind left
[09:19] <patrickb> Is it worth it to run tests on JVM automatically? They take a very long time to run. (>1:35 still running)

[09:20] <Altai-man_> patrickb, can skip those, that's the policy I'm aware of.

[09:20] <patrickb> Will do.

[09:20] <Altai-man_> From what people told me, successful build and being able to e.g. run `-e 'say 42'` is what guaranteed on JVM backend.

[09:21] <MasterDuke> patrickb: rakudo or nqp tests?

[09:21] <patrickb> Both. It does get built though.

[09:22] <MasterDuke> i wouldn't expect the nqp tests to take too terribly long

[09:22] <Altai-man_> Oh, yes, I meant rakudo ones.

[09:24] <bartolin_> patrickb: No, 'make test' on the JVM backend doesn't work. The EvalServer (that is used for 'make test') has a severy memory/threads/whatever leak.

[09:25] <bartolin_> https://github.com/Raku/old-issue-tracker/issues/6527 (maybe there was another ticket for 'make test')

[09:26] <bartolin_> the tests for nqp should run fine and pass

[09:31] <bartolin_> speaking about the JVM backend: does anyone have objections against merging https://github.com/Raku/nqp/pull/630 and https://github.com/rakudo/rakudo/pull/3699. That's mostly a rename of org.perl6 to org.raku for the Java classes (plus some cleanup)

[09:31] <patrickb> Altai-man_: Did you grant the CodeFactor request? I suspect the site tripped itself up and the grant didn't go through.

[09:31] <Altai-man_> patrickb, I did, let me check again...

[09:32] <Altai-man_> eeh

[09:32] <Altai-man_> I see `codefactor.io` request Approved and another codefactor.io request not approved.

[09:32] <patrickb> meh

[09:33] <Altai-man_> Currently: Approved

[09:34] <patrickb> Seems to work now. Thanks!

[09:34] <Altai-man_> Now we have two requests approved and I don't see anything to remove another one. o.O

[09:34] <Altai-man_> Glad it works now anyway.

[10:00] <patrickb> Is there any reason to run NQP tests on new rakudo commits?

[10:01] <MasterDuke> nope

[10:01] <Altai-man_> Shouldn't be.

[10:01] <patrickb> I think there isn't. As rakudo changes should have no influence at all on NQP.

[10:01] <patrickb> Right

[10:05] <lizmat> Files=1306, Tests=111304, 213 wallclock secs (28.57 usr  8.40 sys + 2995.43 cusr 274.77 csys = 3307.17 CPU)

[10:27] *** sena_kun joined
[10:28] *** Altai-man_ left
[10:49] *** MasterDuke left
[11:25] <Geth> ¦ nqp: d3870f16ed | (Christian Bartolomäus)++ | 3 files

[11:25] <Geth> ¦ nqp: [JVM] Fix references to unsupported Java versions

[11:25] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/d3870f16ed

[11:28] <Geth> ¦ rakudo: 12f8f1eb48 | (Christian Bartolomäus)++ | 2 files

[11:28] <Geth> ¦ rakudo: [JVM] Fix references to unsupported Java versions

[11:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/12f8f1eb48

[11:49] <patrickb> sena-kun: Issues created. Let's see how it goes. For Rakudo it's a single issue (nmake detection failure), for NQP there are three separate test failures.

[11:50] <patrickb> TravisCI manages to successfully test NQP though.

[11:50] <sena_kun> patrickb, the fix proposed some time ago (trimming the detection string constant) did not work out for this flapper?

[11:50] <tellable6> hey sena_kun, you have a message: https://gist.github.com/463ba72505ebd4b804f0d3fc4ed286bb

[11:51] <sena_kun> patrickb++

[11:51] <patrickb> sena_kun: I think it's a different failure this time. It seems that nmake didn't give any output at all. So I guess something else must be off.

[11:51] <sena_kun> hmmm

[11:52] <sena_kun> the thing is I saw discussing a flapper where nmake wasn't detected

[11:52] <sena_kun> I remember vrurg looking at it.

[11:52] <patrickb> sena_kun: Then might actually be related.

[11:53] <patrickb> I have to leave (probably for the day). We'll see how it goes with the issues.

[11:53] <patrickb> o/

[11:53] *** patrickb left
[11:54] <sena_kun> o/

[11:54] *** MasterDuke joined
[12:06] <Geth> ¦ rakudo: 285717a0d3 | (Elizabeth Mattijsen)++ | src/core.c/REPL.pm6

[12:06] <Geth> ¦ rakudo: Add RAKU_REPL_OUTPUT_METHOD environment variable

[12:06] <Geth> ¦ rakudo: 

[12:06] <Geth> ¦ rakudo: When set, it should contain the name of the method with which the

[12:06] <Geth> ¦ rakudo: value of an expression should be output.  The default is "gist",

[12:06] <Geth> ¦ rakudo: which is the current state.  Expected alternate values are "raku"

[12:06] <Geth> ¦ rakudo: and "Str".  But of course you can go crazy in this, and some of

[12:07] <Geth> ¦ rakudo: you probably will.

[12:07] <Geth> ¦ rakudo: <…commit message has 8 more lines…>

[12:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/285717a0d3

[12:26] *** Altai-man_ joined
[12:26] <Geth> ¦ roast: e455ff7deb | (Christian Bartolomäus)++ | 4 files

[12:26] <Geth> ¦ roast: [JVM] Fudge some recently added/changed tests

[12:26] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e455ff7deb

[12:29] *** sena_kun left
[12:47] *** squashable6 left
[12:49] *** squashable6 joined
[12:52] <lizmat> What is wrong with this picture:

[12:52] <lizmat> ▶IO::Path::Win32<1>(

[12:52] <lizmat>     :SPEC(IO::Spec::Win32),

[12:52] <lizmat>     :CWD("bar"),

[12:52] <lizmat>     :path("/foo"),

[12:52] <lizmat>     :$!is-absolute(Bool::True),

[12:52] <lizmat>     :$!abspath("\\foo"),

[12:53] <lizmat> A: although the "is-absolute" flag is set to True, $!path and $!abspath are *not* the same

[12:54] *** domidumont joined
[12:55] <lizmat> m: my $io := IO::Path::Win32.new("/foo"); dd $io.path, $io.absolute   # in short

[12:55] <camelia> rakudo-moar 81c0e1454: OUTPUT: «"/foo"␤"\\foo"␤»

[12:56] <lizmat> should we consider this to be a bug?  Or is the "abspath" / "absolute" name for the method wrong?

[12:57] *** Kaiepi left
[13:01] <lizmat> I guess the abspath attribute is a misnomer: it should probably be called $!ospath

[13:02] <MasterDuke> isn't it called absolute because it won't have relative parts (e.g., '..') in it?

[13:02] <lizmat> m: my $io := IO::Path::Win32.new("foo"); dd $io.path, $io.absolute   # in short

[13:02] <camelia> rakudo-moar 81c0e1454: OUTPUT: «"foo"␤"\\home\\camelia\\foo"␤»

[13:02] *** Kaiepi joined
[13:02] *** Kaiepi left
[13:02] <lizmat> MasterDuke: it will also provide the parent dirs if needed

[13:03] *** Kaiepi joined
[13:03] <lizmat> brb

[13:09] *** domidumont left
[13:39] <Geth> ¦ roast: 4b52c944f3 | (Christian Bartolomäus)++ | 5 files

[13:39] <Geth> ¦ roast: [JVM] Fudge some currently failing tests

[13:39] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/4b52c944f3

[13:45] <Geth> ¦ rakudo: ea8c04db25 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[13:45] <Geth> ¦ rakudo: Internally rename IO::Path's $!abspath to $!os-path

[13:45] <Geth> ¦ rakudo: 

[13:45] <Geth> ¦ rakudo: It took me quite some time to realize the subtle bug in my head that

[13:45] <Geth> ¦ rakudo: assumed that $!abspath would always be the same as $!path if the $!path

[13:45] <Geth> ¦ rakudo: was specified as an absolute path.  $!abspath is the result of .absolute,

[13:45] <Geth> ¦ rakudo: which calls $!SPEC.rel2abs($!path), which may result in something

[13:45] <Geth> ¦ rakudo: entirely different, such as:

[13:45] <Geth> ¦ rakudo: <…commit message has 7 more lines…>

[13:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ea8c04db25

[13:56] <Geth> ¦ rakudo: bd7fcb28f4 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[13:56] <Geth> ¦ rakudo: Remove incorrect absolute path optimization

[13:56] <Geth> ¦ rakudo: 

[13:56] <Geth> ¦ rakudo: Creating an IO::Path with an absolute path, does *not* guarantee that

[13:56] <Geth> ¦ rakudo: the absolute OS path is the same, as the former is more of a conceptual

[13:56] <Geth> ¦ rakudo: path, rather than a real thing that can be used to open a file with the

[13:56] <Geth> ¦ rakudo: given IO::SPEC semantics.

[13:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bd7fcb28f4

[14:09] <Geth> ¦ nqp/master: 9 commits pushed by andreoss++, (Christian Bartolomäus)++

[14:09] <Geth> ¦ nqp/master: 70cf11dd72 | Bulk rename

[14:09] <Geth> ¦ nqp/master: 323ec50ff6 | Rename s/perl6/raku/

[14:09] <Geth> ¦ nqp/master: 89f0542600 | Rename package & file

[14:09] <Geth> ¦ nqp/master: 8f1193dc8b | Rename s/perl6/raku/g

[14:09] <Geth> ¦ nqp/master: 58c1edddfd | Rename s/perl6/raku/g in *.nqp

[14:09] <Geth> ¦ nqp/master: f6b3794dc8 | Fix build

[14:09] <Geth> ¦ nqp/master: 28ca9e1fa5 | Rebootstrap

[14:09] <Geth> ¦ nqp/master: 10e6f99423 | Update doc

[14:09] <Geth> ¦ nqp/master: 5d46adf253 | Merge pull request #630 from andreoss/jvm-rakufy

[14:09] <Geth> ¦ nqp/master: review: https://github.com/Raku/nqp/compare/d3870f16ede4...5d46adf2538d

[14:10] <Geth> ¦ rakudo: c68d4fc492 | (Christian Bartolomäus)++ | tools/templates/NQP_REVISION

[14:10] <Geth> ¦ rakudo: Bump NQP for rename of java packages to org.raku.*

[14:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c68d4fc492

[14:11] <Geth> ¦ rakudo: 26d88b9e52 | andreoss++ | 15 files

[14:11] <Geth> ¦ rakudo: Bulk rename s/perl6/raku/g

[14:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/26d88b9e52

[14:11] <Geth> ¦ rakudo: 8e4e23ab64 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | 15 files

[14:11] <Geth> ¦ rakudo: Merge pull request #3699 from andreoss/jvm-naming

[14:11] <Geth> ¦ rakudo: 

[14:11] <Geth> ¦ rakudo: [jvm] Rename s/perl6/raku/g

[14:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8e4e23ab64

[14:19] <[Coke]> bartolin_: nice.

[14:21] <[Coke]> bartolin_: is https://github.com/Raku/nqp/pull/562 mergable?

[14:23] <bartolin_> andreoss++ did all the work for the rename

[14:23] <[Coke]> andreoss++

[14:26] <bartolin_> [Coke]: yes, I think the note is useful. personally, I'd move it a bit further down in the readme (there already is a section 'Troubleshooting') -- maybe I'll do that later

[14:27] * bartolin_ just noticed he already mentioned that in the PR ;)

[14:27] *** sena_kun joined
[14:29] *** Altai-man_ left
[14:34] <lizmat> I'd like to do the same for the MoarVM backend, but would first like to handle as many PR's as possible, as it will basically invalidate all outstanding PR's

[14:41] <bartolin_> . o O ( sounds like a big task )

[15:05] *** Kaeipi joined
[15:09] *** Kaiepi left
[15:12] <jnthn> lizmat: I'm not sure there's much MoarVM-specific code that mentions Perl6, fwiw.

[15:13] <lizmat> src/Perl6/* ?

[15:13] <lizmat> I guess that's backend agnostic, ok, you're right :)

[15:13] <jnthn> That's backend agnos...right :)

[15:13] <jnthn> Well, maybe lets do it around the time we do the rakuast mergeback

[15:14] <lizmat> the point stands  :-)

[15:14] <jnthn> Which will also invalidate any PR touching actions and world and probably grammar too, all of which live in there.

[15:14] <lizmat> right

[15:14] <jnthn> I'd rather do it at the end of that branch close to merge time, though, otherwise it'll make my life harder to keep up with master :)

[15:18] <[Coke]> +1

[15:27] *** Kaeipi is now known as Kaiepi

[15:34] *** JJMerelo joined
[15:34] <JJMerelo> Hi

[15:34] <JJMerelo> Is there any chance a CATCH block resumes by itself?

[15:35] <JJMerelo> Hum... sink maybe

[15:37] <JJMerelo> This shouldn't resume after CATCH → https://github.com/JJ/perl6-recipes-apress/blob/master/Chapter-8/generate-recipe.p6

[15:39] <JJMerelo> But it does. If you call it with a single argument such as Tuna the exception block will generate a default side dish... And then it runs the next sentence.

[15:39] <JJMerelo> I am trying to golf it down, no way.

[15:39] <JJMerelo> Any idea?

[15:47] <jnthn> JJMerelo: It can rethrow, if you don't smartmatch the exception, but you have a default there.

[15:48] <jnthn> What makes you think it resumes?

[15:49] <JJMerelo> It simply runs the next sentence

[15:50] <JJMerelo> Adding .resume makes no difference, it still runs the sentence right after the exception was produced.

[15:50] <timotimo> yeh that's what you're asking for

[15:50] <JJMerelo> timotimo can you ellaborate?

[15:50] <JJMerelo> I have tried to golf it here https://github.com/JJ/my-raku-examples/blob/master/catch-block-returning.p6

[15:51] <timotimo> your catch block handles every exception, so when the exception is handled, execution continues

[15:51] <JJMerelo> And there's no way the next sentence is run

[15:51] <JJMerelo> timotimo theoretically it should exit the block and not run the sentence. According to docs and also the example above

[15:51] <timotimo> got the docs link handy?

[15:52] <JJMerelo> A sec

[15:53] <JJMerelo> timotimo https://docs.raku.org/language/exceptions#Exception_handlers_and_enclosing_blocks

[15:54] <JJMerelo> That's what happens with the (theoretically golfed) example, that what _does not_ happen with the fleshed-out one. It definitely runs the next sentence.

[15:54] <timotimo> oh so it exits the lbock if the catch lives outside

[15:55] <JJMerelo> timotimo it exits the block in the same scope as the CATCH block

[15:55] <timotimo> m: for ^20 { .say; die "oh no" if Bool.pick; }; CATCH { default { .say; .resume } }

[15:55] <camelia> rakudo-moar 81c0e1454: OUTPUT: «0␤oh no␤  in block <unit> at <tmp> line 1␤␤1␤2␤3␤oh no␤  in block <unit> at <tmp> line 1␤␤4␤oh no␤  in block <unit> at <tmp> line 1␤␤5␤oh no␤  in block <unit> at <tmp> line 1␤␤6␤oh no␤  in block <unit> at <tmp> …»

[15:55] <timotimo> m: for ^20 { .say; die "oh no" if Bool.pick; CATCH { default { .say; .resume } } }

[15:55] <camelia> rakudo-moar 81c0e1454: OUTPUT: «0␤1␤2␤oh no␤  in block <unit> at <tmp> line 1␤␤3␤oh no␤  in block <unit> at <tmp> line 1␤␤4␤5␤oh no␤  in block <unit> at <tmp> line 1␤␤6␤7␤oh no␤  in block <unit> at <tmp> line 1␤␤8␤9␤10␤oh no␤  in block…»

[15:55] <timotimo> m: for ^20 { .say; die "oh no" if Bool.pick; CATCH { default { .say; } } }

[15:55] <camelia> rakudo-moar 81c0e1454: OUTPUT: «0␤1␤oh no␤  in block <unit> at <tmp> line 1␤␤2␤oh no␤  in block <unit> at <tmp> line 1␤␤3␤oh no␤  in block <unit> at <tmp> line 1␤␤4␤5␤6␤7␤8␤oh no␤  in block <unit> at <tmp> line 1␤␤9␤10␤11␤12␤oh no␤…»

[15:56] <timotimo> i suppose i never really used resumption of exceptions in my own programs

[15:56] <JJMerelo> Those two examples behave according to the docs. 

[15:57] <timotimo> yeah

[15:57] <timotimo> trying examples from github is still too many clicks and buton presses

[15:57] <JJMerelo> That's why i tried to golf... but couldn't

[15:57] <timotimo> "this won't be said, but 33"

[15:58] <JJMerelo> timotimo but try without the .resume

[15:59] <timotimo> aha, it says Foo but not the rest of the program outside of sub foo?

[16:00] <JJMerelo> timotimo because it's running foo the second time inside of the CATCH block. But it does not return anyway, and does not print $valur

[16:00] <JJMerelo> timotimo I thought that maybe if assigning to a global variable might be the thing; it's not.

[16:00] <timotimo> oh i didn't see the foo there

[16:01] <timotimo> can you restate your confusiong / expectation without the .resume?

[16:02] <timotimo> i'm a bit unconcentrated

[16:06] <timotimo> when you're not calling .resume, then the block that has "this won't be said" will be exited after the catch is finished

[16:22] <JJMerelo> timotimo right.

[16:23] <JJMerelo> That does not happen in the first example; it does resume. Thus my original question: when will a CATCH block auto-resume.

[16:26] *** Altai-man_ joined
[16:28] *** sena_kun left
[16:34] <timotimo> ok, i need to read the first example again

[16:34] <timotimo> there the catch isn't in a block that contains the die

[16:35] <timotimo> sorry, i'm in a videoconference at the same time and can't concentrate on this right now

[16:36] <JJMerelo> timotimo don't worry. Thanks anyway

[16:44] <Geth> ¦ rakudo: b63976a8f1 | (Elizabeth Mattijsen)++ | 2 files

[16:44] <Geth> ¦ rakudo: Make IO::Path.dir between 1.5x and 2.2x as fast

[16:44] <Geth> ¦ rakudo: 

[16:44] <Geth> ¦ rakudo: - 2.2x without explicit condition, 1.5x with explicit condition

[16:44] <Geth> ¦ rakudo: - replaced the gather / take logic by true iterators in Rakudo::Iterator

[16:44] <Geth> ¦ rakudo: - introduced "cloned-from-path" method for faster similar IO::Path creation

[16:44] <Geth> ¦ rakudo:   which is marked as an implementation detail

[16:44] <Geth> ¦ rakudo: - abstracted prefix logic in "prefix-for-dir" method

[16:44] <Geth> ¦ rakudo:   which is marked as an implementation detail

[16:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b63976a8f1

[16:45] *** squashable6 left
[16:46] <timotimo> there foo is inside the block that has the CATCH in it

[16:46] <timotimo> oh, i was scrolled up

[16:46] <timotimo> sorry

[16:48] *** squashable6 joined
[17:55] *** squashable6 left
[17:56] *** squashable6 joined
[18:27] *** sena_kun joined
[18:28] *** lucasb joined
[18:29] *** Altai-man_ left
[19:05] *** JJMerelo left
[20:06] <bartolin_> .tell sena_kun I've just stumbled upon your question regarding the JVM build from https://github.com/rakudo/rakudo/issues/3577#issuecomment-607099602. We had this topic earlier today, so I guess this is settled. But for the sake of completeness: I'd look for 1) a sucessful build, 2) clean tests for NQP, 3) a successfull 'make install' and 4) that a simple evaluation (./rakudo-j -e 'say 42') works

[20:06] <tellable6> bartolin_, I'll pass your message to sena_kun

[20:06] <sena_kun>  

[20:07] <bartolin_> . o O ( empty promises )

[20:08] <sena_kun> bartolin_, thanks! I think having CI to check JVM (I think it covers everything you noted now) makes releasing a lot easier already and, in fact, fulfills my initial request for this.

[20:08] <sena_kun> bartolin_++ # JVM fixes

[20:09] <bartolin_> yes, the CI setup should cover that nicely. patrickp++ and sena_kun++ (and problably others)

[20:09] <Geth> ¦ rakudo: 853e62277a | (Elizabeth Mattijsen)++ | src/core.c/WhateverCode.pm6

[20:09] <Geth> ¦ rakudo: Make WhateverCode.ACCEPTS about 2x as fast

[20:09] <Geth> ¦ rakudo: 

[20:09] <Geth> ¦ rakudo: Since a WhateverCode must always have at least on parameter, and

[20:09] <Geth> ¦ rakudo: ACCEPTS only accepts one parameter as well, there is no need to

[20:09] <Geth> ¦ rakudo: check any signature for WhateverCode, so give it its own candidate

[20:09] <Geth> ¦ rakudo: and directly use an nqp:: call to execute.  This halves the Exclusive

[20:10] <Geth> ¦ rakudo: Time for ACCEPTS in a profile.

[20:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/853e62277a

[20:26] *** Altai-man_ joined
[20:29] *** sena_kun left
[20:33] <Geth> ¦ rakudo: a5eb1d4a9b | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[20:33] <Geth> ¦ rakudo: Make IO::Path.sibling about 2x as fast

[20:33] <Geth> ¦ rakudo: 

[20:33] <Geth> ¦ rakudo: By using the new `cloned-with-path' method

[20:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a5eb1d4a9b

[20:59] <Geth> ¦ rakudo: 26b9f388a6 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[20:59] <Geth> ¦ rakudo: Make IO::Path.succ/pred about 2x as fast

[20:59] <Geth> ¦ rakudo: 

[20:59] <Geth> ¦ rakudo: By using the new `cloned-with-path' method

[20:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/26b9f388a6

[21:15] <Geth> ¦ rakudo: 7238b0943b | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[21:15] <Geth> ¦ rakudo: Make IO::Path.succ/pred about 1.6x as fast

[21:15] <Geth> ¦ rakudo: 

[21:15] <Geth> ¦ rakudo: By using the new `cloned-with-path' method.

[21:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7238b0943b

[21:22] <timotimo> looks like a copypasto

[21:25] <lizmat> oops, indeed

[21:26] <lizmat> it's about IO::Path.cleanup

[21:26] <lizmat> I'm doing all of these in separate commits for bisectability

[21:26] <lizmat> but it is in fact a bit of a rince / repeat

[21:29] *** maggotbrain left
[21:34] <Geth> ¦ rakudo: 71cb0c56f9 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[21:34] <Geth> ¦ rakudo: Make IO::Path.parent about 2.7x as fast

[21:34] <Geth> ¦ rakudo: 

[21:34] <Geth> ¦ rakudo: By using the new `cloned-with-path' method and refactor the rest of

[21:34] <Geth> ¦ rakudo: the code to ternaries *and* use

[21:34] <Geth> ¦ rakudo: 

[21:34] <Geth> ¦ rakudo:   !foo.first(* ne bar)

[21:34] <Geth> ¦ rakudo: 

[21:35] <Geth> ¦ rakudo: instead of

[21:35] <Geth> ¦ rakudo: 

[21:35] <Geth> ¦ rakudo:   !grep {$_ ne bar}, foo

[21:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/71cb0c56f9

[21:40] <tbrowder> oops, just checking in and getting ready for a rakudo PR, should i hold off and rename dirs from Perl6 to Raku?

[21:41] <tbrowder> or something??

[21:43] <jnthn> tbrowder: That won't be happening for months.

[21:44] <tbrowder> ok, whew, not sure what i was seeing...

[21:44] <jnthn> (Hopefully a small number of months, but that's the magnitude...)

[21:45] <jnthn> tbrowder: Well, there was a discussion earlier that didn't said "when RakuAST merges", but that wasn't really a very clear indicator. :)

[21:45] <jnthn> oops, s/didn't///

[21:46] <tbrowder> ok, pr coming then...

[21:47] <Geth> ¦ rakudo: f5b2c24055 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[21:47] <Geth> ¦ rakudo: Make IO::Path.child about 1.4x as fast

[21:47] <Geth> ¦ rakudo: 

[21:47] <Geth> ¦ rakudo: By using the new `cloned-with-path' method.

[21:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f5b2c24055

[21:49] <Geth> ¦ rakudo: tbrowder++ created pull request #3708: Add 'auth-fmt' compiler arg for option '--doc'

[21:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3708

[21:59] <Geth> ¦ rakudo: 21c3ef82c9 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[21:59] <Geth> ¦ rakudo: Make sure .cloned-with-path performs null check

[21:59] <Geth> ¦ rakudo: 

[21:59] <Geth> ¦ rakudo: This was not picked up by spectesting so far, but it did show in the

[21:59] <Geth> ¦ rakudo: IO::Path.child tests.  This makes all of these .cloned-with-path

[21:59] <Geth> ¦ rakudo: optimizations a little bit slower, e.g. the .child one from 1.4x as

[21:59] <Geth> ¦ rakudo: fast to 1.25x as fast.

[21:59] <Geth> ¦ rakudo: 

[21:59] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[21:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/21c3ef82c9

[22:09] <Geth> ¦ rakudo: 718d305b82 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[22:09] <Geth> ¦ rakudo: Make IO::Path.add about 1.25x as fast

[22:09] <Geth> ¦ rakudo: 

[22:09] <Geth> ¦ rakudo: By using the new `cloned-with-path' method.

[22:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/718d305b82

[22:09] <lizmat> and that concludes my hacking for today, tomorrow more IO::Path and IO::Spec stuff

[22:13] <lizmat> m: dd $*RAKU.version

[22:13] <camelia> rakudo-moar 81c0e1454: OUTPUT: «v6.d␤»

[22:13] <lizmat> m: dd $*VM.version

[22:13] <camelia> rakudo-moar 81c0e1454: OUTPUT: «v2020.05␤»

[22:20] <lizmat> .tell moritz looks like camelia is stuck at 81c0e1454 , now 1.5 days old

[22:20] <linkable6> (2020-05-20) https://github.com/rakudo/rakudo/commit/81c0e1454f Merge pull request #3696 from vrurg/rakudo_3693

[22:20] <tellable6> lizmat, I'll pass your message to moritz

[22:22] <lizmat> sleep&

[22:27] *** sena_kun joined
[22:29] *** Altai-man_ left
[22:54] *** lichtkind_ left
[23:33] *** lucasb left
