[01:11] *** Kaeipi left
[01:44] *** MasterDuke left
[04:07] *** squashable6 left
[04:07] *** notable6 left
[04:07] *** shareable6 left
[04:07] *** reportable6_ left
[04:07] *** releasable6 left
[04:07] *** evalable6 left
[04:07] *** committable6 left
[04:07] *** coverable6 left
[04:07] *** linkable6_ left
[04:07] *** tellable6_ left
[04:07] *** greppable6 left
[04:07] *** bloatable6 left
[04:08] *** quotable6 joined
[04:08] *** bisectable6 joined
[04:08] *** tellable6 joined
[04:08] *** linkable6 joined
[04:09] *** shareable6 joined
[04:09] *** greppable6 joined
[04:09] *** evalable6 joined
[04:09] *** unicodable6 joined
[04:09] *** nativecallable6 joined
[04:09] *** statisfiable6 joined
[04:09] *** reportable6 joined
[04:09] *** bloatable6 joined
[04:10] *** coverable6 joined
[04:10] *** benchable6 joined
[04:10] *** releasable6 joined
[04:10] *** committable6 joined
[04:10] *** squashable6 joined
[04:10] *** sourceable6 joined
[04:10] *** notable6 joined
[06:42] *** Kaiepi joined
[06:58] *** maggotbrain left
[06:59] *** maggotbrain joined
[07:03] *** maggotbrain777 joined
[07:04] *** maggotbrain left
[07:40] *** sena_kun joined
[07:43] *** JJMerelo joined
[07:44] <JJMerelo> Reminder: Raku user survey, please fill it :-)  https://docs.google.com/forms/d/e/1FAIpQLSdRPBdn1iRN_sT8BMNMOBhVbEY1u8ngZWVwLyM37sqsa4OLwQ/viewform

[07:44] <tellable6> 2020-08-24T16:59:00Z #raku <tbrowder> jjmerelo: i used the safari browser which i rarely use and still don't see the change on the nativecall page.

[07:45] <JJMerelo> .tell tbrowder it's under a CDN, sometimes changes take a bit of time... I can deploy today again just in case.

[07:45] <tellable6> JJMerelo, I'll pass your message to tbrowder

[07:45] *** MasterDuke joined
[09:45] <MasterDuke> m: my @a = ("a" .. "zzz")[]; say @a[(^@a).pick]; say @a.elems;

[09:45] <camelia> rakudo-moar c1784bda1: OUTPUT: «hrr␤18278␤»

[09:45] <MasterDuke> m: my @a = ("a" .. "yzz")[]; say @a[(^@a).pick]; say @a.elems;

[09:45] <camelia> rakudo-moar c1784bda1: OUTPUT: «d␤25␤»

[09:46] <MasterDuke> is ^^^ expected? only if the first letter on the rhs is a 'z' will it create all the multi-char entries in the range 

[09:49] <lizmat> hmmm...

[09:50] <MasterDuke> looks like it should be going through this block https://github.com/rakudo/rakudo/blob/master/src/core.c/Range.pm6#L164-L169

[09:50] <lizmat> looking at the code, it appears it turns it into  ... sequence if the lengths of the strings do not match

[09:51] <timotimo> coverable6: my @a = ("a" .. "yzz")[]; say @a[(^@a).pick]; say @a.elems;

[09:51] <coverable6> timotimo, and I oop! Backtrace: https://gist.github.com/1a352b13d1d60da3ae9d3985317ea420

[09:51] <lizmat> and *that* uses .succ until the string cmps greater than the right hand side

[09:51] <lizmat> m: dd "z" cmp "yzz"

[09:51] <camelia> rakudo-moar c1784bda1: OUTPUT: «Order::More␤»

[09:51] <timotimo> interesting

[09:51] <lizmat> so that makes it stop then

[09:52] <AlexDaniel> timotimo: which bot did you want?

[09:52] <lizmat> I'm *not* saying it should be that way, just describing why it does it now

[09:52] <timotimo> i did want coverable

[09:52] <timotimo> since it shows you what lines are being hit by a code example

[09:54] <AlexDaniel> timotimo: ahh… yeah, I'll take a look later

[09:55] <MasterDuke> lizmat: makes sense (the explanation of what is happening). also interesting is the difference between a range and a sequence

[09:55] <MasterDuke> where in this case the sequence is 100x faster

[09:55] <lizmat> because it does less?

[09:55] <MasterDuke> m: my @a = ("a" .. "za")[]; say @a[(^@a).pick]; say @a.elems; say now - INIT now

[09:55] <camelia> rakudo-moar c1784bda1: OUTPUT: «qj␤677␤0.0325126␤»

[09:55] <MasterDuke> m: my @a = ("a" ... "za")[]; say @a[(^@a).pick]; say @a.elems; say now - INIT now

[09:55] <camelia> rakudo-moar c1784bda1: OUTPUT: «tz␤677␤0.036371␤»

[09:56] <MasterDuke> m: my @a = ("a" .. "za")[*]; say @a[(^@a).pick]; say @a.elems; say now - INIT now

[09:56] <camelia> rakudo-moar c1784bda1: OUTPUT: «og␤677␤5.46495354␤»

[09:56] <MasterDuke> m: my @a = ("a" ... "za")[*]; say @a[(^@a).pick]; say @a.elems; say now - INIT now

[09:56] <camelia> rakudo-moar c1784bda1: OUTPUT: «jn␤677␤0.048007␤»

[09:56] <MasterDuke> .. with [*] is the outlier here

[09:56] <timotimo> oh, is there a way to get coverable to not sort the hit lines so you get more like a trace?

[09:57] <MasterDuke> does coverable sort? don't remember now

[09:57] <lizmat> hmmm.....

[09:57] <timotimo> line 90 runs sort

[09:57] <MasterDuke> ah

[09:57] <lizmat> MasterDuke: could you make an issue for the Range[*] case ?

[09:57] <MasterDuke> R#3865

[09:57] <linkable6> R#3865 [open]: https://github.com/rakudo/rakudo/issues/3865 [performance] Slow code when using whatever star in index to return full-length object (who'da thunk?)

[09:59] <timotimo> coverable6: HEAD my @a = ("a" .. "yzz")[]; say @a[(^@a).pick]; say @a.elems;

[10:00] <coverable6> timotimo, https://gist.github.com/38f367e054fd4c7dcc8729d2e7859e2b

[10:01] <AlexDaniel> did you fix it? :)

[10:01] <timotimo> looks like the problem was just not giving it a valid commit

[10:01] <AlexDaniel> ahhh

[10:01] <timotimo> and the problem wasn't reported at the earliest point for some reason

[10:05] <timotimo> i'd put "my" into the regex with "sub" and "say" that finds out you're actually passing code instead of commit

[10:06] <AlexDaniel> timotimo: but https://github.com/Raku/whateverable/blob/55cfbe31b030431d498910da478db9e4d6e599ae/xbin/Coverable.p6#L74-L78 ?

[10:07] <timotimo> yeah, could you imagine to-full-commit getting "my" "wrong"?

[10:07] <timotimo> committable6: my say "hi"

[10:07] <committable6> timotimo, ¦my: «Cannot find this revision (did you mean “nom”?)»

[10:07] <timotimo> hmm

[10:10] <Geth> ¦ rakudo: patrickbkr self-assigned Alpine build "raku -V" says "No exception handler located for catch" https://github.com/rakudo/rakudo/issues/3875

[10:25] *** Xliff joined
[10:27] <Xliff> nine: Let me know if you need a tester for OBS

[10:38] *** Altai-man joined
[10:41] *** sena_kun left
[10:50] *** zostay left
[10:51] *** kawaii left
[11:00] *** kawaii joined
[11:01] *** zostay joined
[11:06] *** JJMerelo left
[11:06] <lizmat> Xliff: nine is on holiday for at least another week

[11:34] <Geth> ¦ nqp: patrickbkr++ created pull request #661: Fix `raku -V`

[11:34] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/661

[11:37] <Geth> ¦ rakudo: patrickbkr++ created pull request #3876: Fix `raku -V`

[11:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3876

[12:31] <Geth> ¦ nqp: 04d53f0237 | (Patrick Böker)++ | src/HLL/Compiler.nqp

[12:31] <Geth> ¦ nqp: Fix `raku -V`

[12:31] <Geth> ¦ nqp: 

[12:31] <Geth> ¦ nqp: The rename of `Compiler.config()` to `Compiler.sysconfig()` failed to

[12:31] <Geth> ¦ nqp: rename all uses. Also the naming is a bit unfortunate, as that method does

[12:31] <Geth> ¦ nqp: not return the `SysConfig` object, but the build configuration. So just

[12:31] <Geth> ¦ nqp: give it back its old name.

[12:31] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/04d53f0237

[12:31] <Geth> ¦ nqp: 461eb8b46f | (Patrick Böker)++ (committed using GitHub Web editor) | src/HLL/Compiler.nqp

[12:31] <Geth> ¦ nqp: Merge pull request #661 from patrickbkr/fix-raku-v

[12:31] <Geth> ¦ nqp: 

[12:31] <Geth> ¦ nqp: Fix `raku -V` (requires matching rakudo PR)

[12:31] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/461eb8b46f

[14:39] *** sena_kun joined
[14:40] *** Altai-man left
[15:14] <Geth> ¦ roast/master: 30 commits pushed by rir++, (Vadim Belman)++

[15:14] <Geth> ¦ roast/master: review: https://github.com/Raku/roast/compare/f59c3e7e84b8...2314cd497107

[15:14] *** Xliff left
[15:58] <gfldex> raku: class C { has $!var handles <gist FETCH>; method STORE(\v) { $!var := v } } constant term:<$c> = C.new; $c = 42; say $c.WHAT;

[15:58] <evalable6> gfldex, rakudo-moar c1784bda1: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[15:58] <evalable6> gfldex, Full output: https://gist.github.com/c03daebf766911de4803018acc3e5970

[15:58] <gfldex> this class is unWHATable :->

[15:59] <timotimo> m: raku: class C { has $!var handles <gist FETCH>; method STORE(\v) { $!var := v } } constant term:<$c> = C.new; $c = 42; say $c.VAR.WHAT

[16:00] <camelia> rakudo-moar c1784bda1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3ETCH>; method STORE(\v) { $!var := v } }7⏏5 constant term:<$c> = C.new; $c = 42; sa␤    expecting any of:␤       …»

[16:00] <Geth> ¦ rakudo/introducing-allomorph-class: 4872c3f068 | (Elizabeth Mattijsen)++ | 7 files

[16:00] <Geth> ¦ rakudo/introducing-allomorph-class: Properly capitalize the Allomorph class

[16:00] <Geth> ¦ rakudo/introducing-allomorph-class: review: https://github.com/rakudo/rakudo/commit/4872c3f068

[16:00] <gfldex> .WHAT depends on gist and handles seams not to work here

[16:00] <timotimo> m: raku: class C { has $!var handles <gist FETCH>; method STORE(\v) { $!var := v } }; constant term:<$c> = C.new; $c = 42; say $c.VAR.WHAT

[16:00] <camelia> rakudo-moar c1784bda1: OUTPUT: «Cannot look up attributes in a C type object␤  in block <unit> at <tmp> line 1␤␤»

[16:00] <gfldex> raku: class C { has $!var handles <FETCH>; method STORE(\v) { $!var := v } } constant term:<$c> = C.new; $c = 42; say $c.WHAT;

[16:00] <evalable6> gfldex, rakudo-moar c1784bda1: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[16:00] <evalable6> gfldex, Full output: https://gist.github.com/07206a3b12a7dced4892cc080d7607a3

[16:01] <timotimo> you still need that semicolon

[16:02] <Geth> ¦ rakudo/master: 7 commits pushed by (Elizabeth Mattijsen)++

[16:02] <Geth> ¦ rakudo/master: b7ff282fc5 | Suggest method names that differ only in capitalization

[16:02] <Geth> ¦ rakudo/master: 30c4b6e599 | Perform Levenshtein on .fc of strings

[16:02] <Geth> ¦ rakudo/master: bb7c617aac | Make test less specific

[16:02] <Geth> ¦ rakudo/master: b054f9f0fd | Add checks for HOW WHAT WHO manually

[16:02] <Geth> ¦ rakudo/master: df5b3d5308 | Externalize suggestions and tips

[16:02] <Geth> ¦ rakudo/master: 3703469d80 | Add test for specific suggestions

[16:02] <Geth> ¦ rakudo/master: 64dfb2e44f | Merge pull request #3853 from rakudo/suggest-capitalization-errors

[16:02] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/c1784bda1324...64dfb2e44f20

[16:04] <gfldex> raku: class C { has $!var handles <FETCH>; method STORE(\v) { $!var := v } }; constant term:<$c> = C.new; $c = 42; say $c.WHAT;

[16:04] <evalable6> gfldex, rakudo-moar c1784bda1: OUTPUT: «(C)␤»

[16:05] <gfldex> raku: class C { has $!var handles <gist FETCH>; method STORE(\v) { $!var := v } }; constant term:<$c> = C.new; $c = 42; say $c.^name;

[16:05] <evalable6> gfldex, rakudo-moar c1784bda1: OUTPUT: «C␤»

[16:05] <gfldex> Does .WHAT really depend on .gist on type objects?

[16:11] <gfldex> raku: class C { has $!var handles <Str>; method STORE(\v) { say 'storing'; $!var := v }; method FETCH { $!var } }; constant term:<$c> = C.new; $c = 42; say $c;

[16:11] <evalable6> gfldex, rakudo-moar 64dfb2e44: OUTPUT: «storing␤C.new␤»

[16:12] <gfldex> FETCH is not called in this case.

[16:16] *** squashable6 left
[16:17] *** squashable6 joined
[16:41] *** MasterDuke left
[16:45] <vrurg> c: introducing-allomorph-class class Foo is IntStr {}; say IntStr.new(42, ‘forty two’) eqv Foo.new(42, ‘forty two’)

[16:45] <committable6> vrurg, ¦introducing-allomorph-class: «False␤»

[16:45] <vrurg> c: introducing-allomorph-class class Foo is IntStr {}; say IntStr.new(42, ‘forty two’) ~~ Foo.new(42, ‘forty two’)

[16:45] <committable6> vrurg, ¦introducing-allomorph-class: «True␤»

[17:10] <lizmat> vrurg: he, good point

[17:10] <lizmat> they should match, I guess

[17:11] <lizmat> hmmm... or maybe not

[17:11] <lizmat> c: introducing-allomorph-class class Foo is IntStr {}; say Foo.new(42, ‘forty two’) ~~ IntStr.new(42, ‘forty two’)

[17:11] <committable6> lizmat, ¦introducing-allomorph-class: «True␤»

[17:12] <lizmat> hmmm... not sure whether *that* should be true

[17:13] <vrurg> lizmat: Smartmatch must be true. Foo is IntStr and has the same value.

[17:14] <AlexDaniel> c: introducing-allomorph-class,HEAD class Foo is IntStr {}; say Foo.new(42, ‘forty two’) ~~ IntStr.new(42, ‘forty two’)

[17:14] <committable6> AlexDaniel, ¦introducing-allomorph-class,HEAD(64dfb2e): «True␤»

[17:14] <AlexDaniel> c: introducing-allomorph-class,HEAD class Foo is IntStr {}; say IntStr.new(42, ‘forty two’) eqv Foo.new(42, ‘forty two’)

[17:14] <committable6> AlexDaniel, ¦introducing-allomorph-class: «False␤» ¦HEAD(64dfb2e): «True␤»

[17:34] <Geth> ¦ rakudo: f98861ad1f | (Ben Davies)++ | src/core.c/Buf.pm6

[17:34] <Geth> ¦ rakudo: Make Blob.gist work for all sizes of Blob

[17:34] <Geth> ¦ rakudo: 

[17:34] <Geth> ¦ rakudo: Blob.gist would throw with non-8-bit Blobs. This should make it so

[17:34] <Geth> ¦ rakudo: Blob.gist will work for any size of Blob, including future 1/2/4-bit

[17:34] <Geth> ¦ rakudo: ones.

[17:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f98861ad1f

[17:34] <Geth> ¦ rakudo: ca5e8df02d | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Buf.pm6

[17:34] <Geth> ¦ rakudo: Merge pull request #3812 from Kaiepi/blob-gist

[17:34] <Geth> ¦ rakudo: 

[17:34] <Geth> ¦ rakudo: Make Blob.gist work for all sizes of Blob

[17:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ca5e8df02d

[18:05] <AlexDaniel> c: introducing-allomorph-class,HEAD NumStr.new(Inf, ‘9999’).Int

[18:05] <committable6> AlexDaniel, ¦introducing-allomorph-class: «Cannot convert Inf to Int: ␤  in block <unit> at /tmp/VEKIS1e2jH line 1␤␤ «exit code = 1»» ¦HEAD(ca5e8df): «Cannot convert 9999 to Int: ␤  in block <unit> at /tmp/VEKIS1e2jH line 1␤␤ «exit code = 1»»

[18:05] <AlexDaniel> lizmat: any thoughts on where this difference is coming from?

[18:06] <AlexDaniel> the new error message is probably better, but still

[18:08] <lizmat> I guess it's because of it calling Str.Int

[18:08] <lizmat> hmmm

[18:08] <lizmat> no... I guess .Str takes the string in the error message

[18:11] <lizmat> and I don't think the new error message is better, as "9999" *can* be coerced to Int

[18:12] <AlexDaniel> lizmat: but that's the old one :)

[18:12] <lizmat> aaaah... :-)

[18:13] <AlexDaniel> it's still a bit worrying because the .Str or whatever was called on a different part of the object

[18:14] <AlexDaniel> yes, the error message became better, but it could also be that the behavior changed in some of the methods of NumStr allomorphs

[18:24] <Geth> ¦ rakudo/negation-of-junctions-not-special: a51458e6b8 | (Elizabeth Mattijsen)++ | 2 files

[18:24] <Geth> ¦ rakudo/negation-of-junctions-not-special: Return a Junction that collapses to its opposite Bool

[18:24] <Geth> ¦ rakudo/negation-of-junctions-not-special: 

[18:24] <Geth> ¦ rakudo/negation-of-junctions-not-special: This passes the examples given by jnthn.

[18:24] <Geth> ¦ rakudo/negation-of-junctions-not-special: 

[18:24] <Geth> ¦ rakudo/negation-of-junctions-not-special: Reduces test failures to:

[18:24] <Geth> ¦ rakudo/negation-of-junctions-not-special: 

[18:24] <Geth> ¦ rakudo/negation-of-junctions-not-special: t/spec/S03-junctions/autothreading.t                            (Wstat: 512 Tests: 106 Failed: 2)

[18:24] <Geth> ¦ rakudo/negation-of-junctions-not-special:   Failed tests:  78-79

[18:24] <Geth> ¦ rakudo/negation-of-junctions-not-special: review: https://github.com/rakudo/rakudo/commit/a51458e6b8

[18:38] *** Altai-man joined
[18:41] *** sena_kun left
[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: bfd313854b | (Elizabeth Mattijsen)++ | 2 files

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: Remove special handling of ne and != wrt Junctions

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: 

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: This is a proof of concept.  It breaks the following tests:

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: 

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: t/spec/S03-junctions/boolean-context.t                          (Wstat: 256 Tests: 74 Failed: 1)

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special:   Failed test:  72

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: t/spec/S03-junctions/autothreading.t                            (Wstat: 768 Tests: 106 Failed: 3)

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: <…commit message has 9 more lines…>

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: review: https://github.com/rakudo/rakudo/commit/bfd313854b

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: dc8c1f0f5f | (Elizabeth Mattijsen)++ | 2 files

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: Return a Junction that collapses to its opposite Bool

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: 

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: This passes the examples given by jnthn.

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: 

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: Reduces test failures to:

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: 

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: t/spec/S03-junctions/autothreading.t                            (Wstat: 512 Tests: 106 Failed: 2)

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special:   Failed tests:  78-79

[18:52] <Geth> ¦ rakudo/negation-of-junctions-not-special: review: https://github.com/rakudo/rakudo/commit/dc8c1f0f5f

[18:52] <lizmat> hmmm... rather more verbosity for a rebase than I expected

[18:53] *** kawaii left
[18:55] *** kawaii joined
[18:56] <timotimo> i wonder why, sometimes it doesn't do that

[20:19] <AlexDaniel> I'm pretty sure it always does that

[20:19] <AlexDaniel> the only time it doesn't is if you rebase a loooot of commits

[20:19] <AlexDaniel> in which case it doesn't list them

[20:35] *** MasterDuke joined
[20:53] <[Tux]> Rakudo version 2020.08.1-3-g461eb8b46 - MoarVM version 2020.08-4-g0e7417add

[20:53] <[Tux]> csv-test-xs-20      0.403 -  0.416

[20:53] <[Tux]> test-t --race       0.860 -  0.865

[20:53] <[Tux]> csv-ip5xs           0.992 -  1.044

[20:53] <[Tux]> test-t              1.947 -  1.977

[20:53] <[Tux]> test                7.934 -  9.528

[20:53] <[Tux]> test-t-20 --race    9.984 - 10.053

[20:53] <[Tux]> csv-ip5xs-20       10.586 - 10.854

[20:53] <[Tux]> csv-parser         24.789 - 26.511

[20:53] <[Tux]> test-t-20          33.283 - 36.455

[21:21] *** maggotbrain777 left
[21:23] *** maggotbrain joined
[21:23] <Geth> ¦ rakudo: codesections++ created pull request #3878: Add definiteness constraint to convenience methods

[21:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3878

[21:29] *** vrurg left
[21:29] *** vrurg joined
[21:42] <Geth> ¦ rakudo: lizmat self-assigned Supply.head($n) is not done when it should be https://github.com/rakudo/rakudo/issues/3877

[21:50] <Geth> ¦ roast: 86272fb848 | (Elizabeth Mattijsen)++ | S17-supply/head.t

[21:50] <Geth> ¦ roast: Add test for #3877

[21:50] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/86272fb848

[21:51] <Geth> ¦ rakudo/fix-3877: 46a7299822 | (Elizabeth Mattijsen)++ | src/core.c/Supply-coercers.pm6

[21:51] <Geth> ¦ rakudo/fix-3877: Fix for #3877

[21:51] <Geth> ¦ rakudo/fix-3877: review: https://github.com/rakudo/rakudo/commit/46a7299822

[21:52] <Geth> ¦ rakudo: lizmat++ created pull request #3879: Fix for #3877

[21:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3879

[21:52] <linkable6> RAKUDO#3877 [open]: https://github.com/rakudo/rakudo/issues/3877 [ASYNC] Supply.head($n) is not done when it should be

[21:54] *** camelia left
[21:57] <Geth> ¦ roast: dddcec5561 | (Elizabeth Mattijsen)++ | S17-supply/head.t

[21:57] <Geth> ¦ roast: Fix test for just 1 emit

[21:57] <Geth> ¦ roast: 

[21:57] <Geth> ¦ roast: - also skip it for now, because this will hang on master

[21:57] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/dddcec5561

[21:58] <lizmat> which concludes my hacking for today&

[22:39] *** sena_kun joined
[22:41] *** Altai-man left
[23:16] *** sena_kun left
