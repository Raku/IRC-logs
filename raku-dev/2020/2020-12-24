[01:34] *** frost-lab joined
[01:49] *** lucasb left
[02:41] *** leont left
[05:14] <Geth> ¦ rakudo/faster-slice-access: 08a6192046 | (Elizabeth Mattijsen)++ | 2 files

[05:14] <Geth> ¦ rakudo/faster-slice-access: Simpler dupe module checking

[05:14] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/08a6192046

[05:20] *** SmokeMachine left
[05:20] *** SmokeMachine joined
[05:54] <Geth> ¦ rakudo/faster-slice-access: 1d95a5108c | (Elizabeth Mattijsen)++ | src/core.c/array_slice.pm6

[05:54] <Geth> ¦ rakudo/faster-slice-access: Micro-opt of array slice access

[05:54] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/1d95a5108c

[06:17] *** Altai-man joined
[06:22] <Geth> ¦ rakudo/faster-slice-access: 2c09f31bdd | (Elizabeth Mattijsen)++ | 2 files

[06:22] <Geth> ¦ rakudo/faster-slice-access: Fix issue with :!exists:delete:!kv

[06:22] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/2c09f31bdd

[06:24] <Geth> ¦ rakudo/faster-slice-access: 74c267efb4 | (Elizabeth Mattijsen)++ | src/core.c/array_slice.pm6

[06:24] <Geth> ¦ rakudo/faster-slice-access: Re-imagine @a[*] to use new infrastructure (60% faster)

[06:24] <Geth> ¦ rakudo/faster-slice-access: 

[06:24] <Geth> ¦ rakudo/faster-slice-access: This is on top of the 5x that was already achieved by optimizing

[06:24] <Geth> ¦ rakudo/faster-slice-access: the @a[@i] candidates (which the @a[*] was calling internally).

[06:24] <Geth> ¦ rakudo/faster-slice-access: So the whatever slice is now 8x as fast as before.

[06:24] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/74c267efb4

[06:39] * lizmat goes back to bed&

[08:36] <Geth> ¦ problem-solving: JJ self-assigned Documentation and the ecosystem https://github.com/Raku/problem-solving/issues/252

[09:10] *** sena_kun joined
[09:12] *** Altai-man left
[09:12] *** frost-lab left
[09:41] <gfldex> m: class C { method ^foo {} }

[09:41] <camelia> rakudo-moar 4b6b2e070: ( no output )

[09:41] <gfldex> where is this form of method declaration handled in Rakudo?

[09:42] <gfldex> I cry for your aid, there is a blogpost at peril! :)

[10:14] <nine> What do you mean by "handled"?

[10:19] *** frost-lab joined
[10:21] <gfldex> the compiler is creating a mixin of Metaclass::ClassHOW and I cant find where in the rakudo source.

[10:22] *** frost-lab left
[10:23] <nine> look for 'method mixin'

[10:28] <gfldex> thanks

[10:34] *** frost-lab joined
[11:41] <nine> Aaah NQP my dear, dear friend. How on earth is it possible to get a "Cannot find method 'qast' on object of type NQPMu" here when $block is checked to be a BlockInfo directly above? https://github.com/Raku/nqp/blob/master/src/vm/moar/QAST/QASTOperationsMAST.nqp#L2917

[11:42] <nine> Or is it?

[11:42] *** leont joined
[11:42] <timotimo> NQPMu showing up somewhere is almost always an undefined identifier

[11:42] <nine> No, it actually isn't. Because BlockInfo is not yet declared at that point, so it's implicitly NQPMu. So it's really an istype($block, NQPMu) which is always true

[11:42] <timotimo> right

[11:42] <timotimo> that's a not great feature of nqp

[12:08] <Geth> ¦ rakudo/faster-slice-access: 511264b001 | (Elizabeth Mattijsen)++ | 2 files

[12:08] <Geth> ¦ rakudo/faster-slice-access: Re-imagine @a[] (zen-slice) to new infrastructure

[12:08] <Geth> ¦ rakudo/faster-slice-access: 

[12:08] <Geth> ¦ rakudo/faster-slice-access: This moves the handling of zen-slices and its adverbs to the new

[12:08] <Geth> ¦ rakudo/faster-slice-access: infrastructure, making the bare zen-slice 12x as fast, and a zen-slice

[12:08] <Geth> ¦ rakudo/faster-slice-access: with adverbs about 6x as fast.

[12:08] <Geth> ¦ rakudo/faster-slice-access: 

[12:08] <Geth> ¦ rakudo/faster-slice-access: This breaks a small number of tests in roast because the error message

[12:08] <Geth> ¦ rakudo/faster-slice-access: <…commit message has 5 more lines…>

[12:08] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/511264b001

[12:38] *** frost-lab left
[12:55] <Geth> ¦ nqp/getlex_fallback: 3d7cf71cf0 | (Stefan Seifert)++ | 13 files

[12:55] <Geth> ¦ nqp/getlex_fallback: Get rid of wrapper frames

[12:55] <Geth> ¦ nqp/getlex_fallback: review: https://github.com/Raku/nqp/commit/3d7cf71cf0

[12:55] <Geth> ¦ rakudo/getlex_fallback: 8505161962 | (Stefan Seifert)++ | src/Perl6/World.nqp

[12:55] <Geth> ¦ rakudo/getlex_fallback: Replace artificial lexical outer frame with runtime lookup

[12:55] <Geth> ¦ rakudo/getlex_fallback: review: https://github.com/rakudo/rakudo/commit/8505161962

[12:55] <Geth> ¦ rakudo/getlex_fallback: f643e650e0 | (Stefan Seifert)++ | 4 files

[12:55] <Geth> ¦ rakudo/getlex_fallback: First working version

[12:55] <Geth> ¦ rakudo/getlex_fallback: review: https://github.com/rakudo/rakudo/commit/f643e650e0

[13:09] *** Altai-man joined
[13:12] *** sena_kun left
[14:11] <[Tux]> Rakudo v2020.12-9-g4b6b2e070 (v6.d) on MoarVM 2020.12-7-g6bf54d784

[14:11] <[Tux]> csv-test-xs-20      0.381 -  0.405

[14:11] <[Tux]> csv-ip5xs           0.803 -  1.145

[14:11] <[Tux]> test-t --race       0.874 -  0.969

[14:11] <[Tux]> test-t              1.979 -  2.030

[14:11] <[Tux]> csv-ip5xs-20        7.752 -  8.890

[14:11] <[Tux]> test                7.921 -  8.200

[14:11] <[Tux]> test-t-20 --race    9.582 - 10.077

[14:11] <[Tux]> csv-parser         27.285 - 29.101

[14:11] <[Tux]> test-t-20          31.991 - 32.683

[14:36] *** linkable6 left
[14:36] *** evalable6 left
[14:37] *** evalable6 joined
[14:38] *** linkable6 joined
[15:02] <nine> win 1

[16:19] <Geth> ¦ rakudo/faster-slice-access: e454c45440 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals/PostcircumfixAdverbs.pm6

[16:19] <Geth> ¦ rakudo/faster-slice-access: Use nqp ops in dispatch table lookup

[16:19] <Geth> ¦ rakudo/faster-slice-access: 

[16:19] <Geth> ¦ rakudo/faster-slice-access: This saves 2 IntLexRef allocations per call, making something like

[16:19] <Geth> ¦ rakudo/faster-slice-access: @a[@i]:p about 7% faster.

[16:19] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/e454c45440

[17:10] *** sena_kun joined
[17:11] *** Altai-man left
[17:17] *** epony joined
[17:41] <Geth> ¦ rakudo/faster-slice-access: acd5a6527d | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals/PostcircumfixAdverbs.pm6

[17:41] <Geth> ¦ rakudo/faster-slice-access: Some more NQPfication of dispatch table lookup

[17:41] <Geth> ¦ rakudo/faster-slice-access: 

[17:41] <Geth> ¦ rakudo/faster-slice-access: Saves about 4 BOOTCode objects per call

[17:41] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/acd5a6527d

[17:45] *** lucasb joined
[18:07] <Geth> ¦ rakudo/faster-slice-access: c626ca500e | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals/PostcircumfixAdverbs.pm6

[18:07] <Geth> ¦ rakudo/faster-slice-access: Add R:O.ADVERBS_AND_NAMED_TO_DISPATCH_INDEX helper method

[18:07] <Geth> ¦ rakudo/faster-slice-access: 

[18:07] <Geth> ¦ rakudo/faster-slice-access: Handles the case where the adverbs hash is missing one named parameter

[18:07] <Geth> ¦ rakudo/faster-slice-access: already, so it needs to check them seperately.  Needed for candidates

[18:07] <Geth> ¦ rakudo/faster-slice-access: such as (:$delete!, *%_)

[18:07] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/c626ca500e

[18:11] *** b2gills left
[18:25] *** b2gills joined
[18:44] <lizmat> and that concludes my hacking for this side of Christmas Eve

[18:44] <lizmat> best wishes to everybody, stay safe and stay well and have a good time!

[18:44] <lizmat> &

[18:46] <[Coke]> ~~

[18:54] *** lizmat_ joined
[18:58] *** lizmat left
[19:05] *** lizmat_ left
[19:06] *** lizmat joined
[19:19] *** lizmat_ joined
[19:21] *** lizmat left
[19:32] *** lizmat_ is now known as lizmat

[20:27] <sena_kun> (not the best time, but) Apparently, I don't have enough time and knowledge to maintain whateverable bots, so please do not count on me if anyone does. Volunteers are welcome.

[20:31] <MasterDuke>  i can provide ad hoc assistance with setup and maintenance, but can't pony up to be solely responsible for them

[20:32] <sena_kun> MasterDuke, writing a docker-based setup is what is needed, plus a bit of rewriting for hardcoded directories/urls.

[20:33] <sena_kun> Responsible is maybe not the right word. I mean, the maintainer to keep up with a lot of issues would be awesome to have, but the main goal is to keep it alive. Plus our releases depend on bots, so no bots == no releases.

[20:33] <MasterDuke> ah, i don't know docker

[20:34] <MasterDuke> i am relatively familiar with the bots, so looks like we need someone who knows docker

[21:09] *** Altai-man joined
[21:11] *** sena_kun left
[21:57] *** Altai-man left
[22:14] <ugexe> patrickb: there are cpan examples in the Appveyor file 

[22:14] <tellable6> ugexe, I'll pass your message to patrickb

[23:10] *** lizmat_ joined
[23:13] *** lizmat left
[23:15] *** lizmat_ is now known as lizmat

[23:47] *** Kaiepi left
