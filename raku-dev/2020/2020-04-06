[00:03] *** hungrydonkey joined
[00:41] *** lucs left
[00:41] *** lucs joined
[01:42] *** evalable6 left
[01:42] *** linkable6 left
[01:42] *** linkable6 joined
[01:44] *** evalable6 joined
[01:48] *** Altai-man_ joined
[01:50] *** sena_kun left
[03:49] *** sena_kun joined
[03:51] *** Altai-man_ left
[05:31] *** Guest16689 is now known as masak

[05:48] *** |Tux| left
[05:48] *** Altai-man_ joined
[05:51] *** sena_kun left
[06:18] *** Xliff left
[06:53] *** hungryd79 joined
[06:56] *** hungrydonkey left
[07:04] *** hungrydonkey joined
[07:05] *** hungryd79 left
[07:10] *** hungrydonkey left
[07:10] *** hungrydonkey joined
[07:49] *** sena_kun joined
[07:50] *** Altai-man_ left
[08:08] <lizmat> Files=1306, Tests=111228, 212 wallclock secs (29.00 usr  8.38 sys + 2996.04 cusr 271.44 csys = 3304.86 CPU)

[08:50] <MasterDuke> when compiling rakudo, there are 2278304 call to `symbol` https://github.com/Raku/nqp/blob/master/src/QAST/Block.nqp#L62, but only 31826 call to `new` https://github.com/Raku/nqp/blob/master/src/QAST/Block.nqp#L14

[08:51] <MasterDuke> any reason not to just `%!symbol := nqp::hash()` in `new` and remove the check in `symbol`?

[08:57] <lizmat> if those numbers are correct, then it feels like something to try

[09:10] <nine> MasterDuke: do we actually call symbol on all or at least most blocks?

[09:10] <MasterDuke> oh hm, you think it might just be lots of repeated calls to a few?

[09:11] <nine> Could be. Also looking at that code, we wouldn't have to allocate %!symbol for the else branch

[09:17] <MasterDuke> here? https://github.com/Raku/nqp/blob/master/src/QAST/Block.nqp#L75 won't the atkey complain if %!symbol isn't allocated?

[09:20] <nine> I was thinking: else { if nqp::isnull(%!symbol) { %NOSYMS } else { nqp::ifnull(nqp::atkey(%!symbol, $name), %NOSYMS)) } }

[09:20] <MasterDuke> right

[09:21] <nine> It all depends on whether the majority of blocks gain symbols at some point

[09:29] <MasterDuke> hm, i think the name is not guaranteed to be unique, and the cuid isn't assigned in new(). can i use nqp::where() or will that change if the gc moves things?

[09:31] <lizmat> it's my understanding that nqp::where is *not* constant over the lifetime of an object

[09:31] <lizmat> but I could be wrong

[09:32] <nine> nqp::where is not constant, nqp::objectid is

[09:32] <MasterDuke> ah, i'll try that

[09:32] <nine> nqp::objectid works by forcing the object into gen2, so it's address will stay stable.

[09:35] *** hungryd41 joined
[09:38] *** hungrydonkey left
[09:40] <MasterDuke> lots of repeated symbol calls. most is 553193

[09:43] <MasterDuke> huh. but there are repeated values for nqp::objectid in new?

[09:44] <MasterDuke> i added `note("Q::B.new: " ~ nqp::objectid($node));` after this line https://github.com/Raku/nqp/blob/master/src/QAST/Block.nqp#L20

[09:44] <nine> They are stable and unique at the time they're generated - not unique over the life time of the program.

[09:45] <nine> After all even in gen2 objects can get collected and their memory location be reused.

[09:48] *** Altai-man_ joined
[09:50] *** sena_kun left
[09:55] <Geth_> ¦ rakudo: afff3b0b2e | (Elizabeth Mattijsen)++ | lib/Test.rakumod

[09:55] <Geth_> ¦ rakudo: Make sure die_on_fail shows correct env variable name

[09:55] <Geth_> ¦ rakudo: 

[09:55] <Geth_> ¦ rakudo: Also make it a 2 line statement for better readability

[09:55] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/afff3b0b2e

[10:02] *** camelCaser left
[10:02] *** ccamel joined
[11:00] <tbrowder> lizmat: can you explain what you mean when you say "hllize" something

[11:00] <tbrowder> i see "hllize_nfa"...

[11:07] <lizmat> m: use nqp; my $l := nqp::list; dd $l.^name, nqp::hllize($l).^name

[11:07] <camelia> rakudo-moar afff3b0b2: OUTPUT: «"BOOTArray"␤"List"␤»

[11:07] <lizmat> tbrowder: does that make it clearer ?

[11:10] <tbrowder> yes, thnx 

[11:22] <AlexDaniel> lizmat: but why does it have to do the sorting ahead of time?

[11:23] <[Tux]> Rakudo version 2020.02.1-295-gafff3b0b2 - MoarVM version 2020.02.1-75-g838e6836e

[11:23] <[Tux]> csv-test-xs-20      0.380 -  0.396

[11:23] <[Tux]> csv-ip5xs           0.718 -  0.730

[11:23] <[Tux]> test-t --race       0.910 -  0.985

[11:23] <[Tux]> test-t              2.025 -  2.131

[11:23] <[Tux]> csv-ip5xs-20        6.363 -  6.459

[11:23] <[Tux]> test                7.505 -  8.359

[11:23] <[Tux]> test-t-20 --race    9.722 - 10.029

[11:23] <[Tux]> csv-parser         25.364 - 25.482

[11:23] <[Tux]> test-t-20          31.445 - 33.146

[11:23] <AlexDaniel> lizmat: if nobody is asking for the elements then surely we can delay that?

[11:23] <AlexDaniel> also, TIL:

[11:23] <AlexDaniel> m: my @a = <a b c d e f g h i>; my $h := @a.head(3); @a[0]=42; say $h

[11:23] <camelia> rakudo-moar afff3b0b2: OUTPUT: «(42 b c)␤»

[11:24] <AlexDaniel> oh and you don't have to bind

[11:24] <AlexDaniel> m: my @a = <a b c d e f g h i>; my $h = @a.head(3); @a[0]=42; say $h

[11:24] <camelia> rakudo-moar afff3b0b2: OUTPUT: «(42 b c)␤»

[11:24] <lizmat> containers for the win ?

[11:25] <lizmat> AlexDaniel: what would be the reason for delaying the sort?  As soon as *any* element is needed, the sort would have to be done

[11:26] <lizmat> for both .sort as well as .min .max you would need to see each element of the source at least once

[11:26] <AlexDaniel> lizmat: you don't have to sort if not all elements are needed, which is demonstrated by the ticket

[11:26] <AlexDaniel> iterate yes, sort no

[11:27] <lizmat> ok, but then I think this functionality belongs in .min / .max

[11:27] <lizmat> as *that*'s what you're asking for then

[11:32] *** finsternis left
[11:32] <AlexDaniel> maybe

[11:49] *** sena_kun joined
[11:50] *** Altai-man_ left
[12:19] <Geth_> ¦ problem-solving: JJ assigned to jnthn Issue Redesign Exceptions for subclassing https://github.com/Raku/problem-solving/issues/173

[12:20] *** MasterDuke left
[12:26] *** MasterDuke joined
[12:40] *** hungryd41 left
[12:40] *** hungrydonkey joined
[12:47] *** hungryd36 joined
[12:51] *** hungrydonkey left
[13:41] *** MasterDuke left
[13:42] *** MasterDuke joined
[13:48] *** Altai-man_ joined
[13:51] *** sena_kun left
[13:56] *** hungrydonkey joined
[14:00] *** hungryd36 left
[14:06] *** hungrydonkey left
[14:06] *** hungryd58 joined
[14:12] <MasterDuke> nine: not sure if it's just a coincidence or not, but 31.8k QAST::Blocks were created, and there were symbol method calls to 34.4k different objectids...

[14:52] <nine> m: my \Foo := Metamodel::ClassHOW.new_type(name => "Foo"); Foo.^add_method("foo", EVAL q[method foo() { say "foo!" }]); Foo.^compose; Foo.foo

[14:52] <camelia> rakudo-moar afff3b0b2: OUTPUT: «Potential difficulties:␤    Useless declaration of a has-scoped method in mainline (did you mean 'my method foo'?)␤    at /home/camelia/EVAL_0:1␤    ------> 3method7⏏5 foo() { say "foo!" }␤foo!␤»

[14:52] <nine> That declaration is not as useless as the warning makes you believe. I think it's rather bogus

[14:57] <jnthn> Easially suppressed by writing `anon method foo`, at least

[14:57] <jnthn> *easily

[14:58] <jnthn> But yeah, it could be based on sink context too

[14:59] <nine> It also goes away with a 'my method foo', but I'd rather not have users do this here: https://github.com/niner/Inline-Perl5/blob/master/t/lib/TestV6.pm#L150

[15:13] <nine> I wonder if it'd actually be possible to really compile that method in the context of Foo, as if it was just class Foo { method foo() { ... } }

[15:18] <nine> Oh that would be necessary for attributes anyway.

[15:20] <nine> I may end up wrapping that in an anonymous role for the EVAL and grab stuff out of there

[15:24] *** ufobat_ joined
[15:28] *** ufobat__ left
[15:43] *** hungryd58 left
[15:43] *** hungrydonkey joined
[15:49] *** sena_kun joined
[15:51] *** Altai-man_ left
[16:27] *** hungrydonkey left
[17:48] *** Altai-man_ joined
[17:51] *** sena_kun left
[18:07] *** SmokeMachine_ joined
[18:08] *** SmokeMachine_ is now known as SmokeMachine

[18:13] *** MasterDuke left
[18:29] <lizmat> notable6: weekly

[18:29] <notable6> lizmat, 2 notes: 2020-04-03T12:47:47Z <lizmat>: Building Raku modules with Nix  ;  2020-04-03T12:47:59Z <lizmat>: https://foldr.nl/raku-nix.html

[18:29] <lizmat> notable6: weekly reset

[18:29] <notable6> lizmat, Moved existing notes to “weekly_2020-04-06T18:29:27Z”

[18:30] *** MasterDuke joined
[19:12] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/04/06/2020-14-more-perspectives/

[19:49] *** sena_kun joined
[19:50] *** Altai-man_ left
[19:57] <timotimo> lizmat++ # appreciated

[21:48] *** Altai-man_ joined
[21:50] *** sena_kun left
[22:09] *** jjatria joined
[22:18] *** jjatria left
[22:20] *** jjatria joined
[23:44] *** Xliff joined
[23:49] *** sena_kun joined
[23:50] *** Altai-man_ left
