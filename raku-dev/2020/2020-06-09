[00:24] *** AlexDani` joined
[00:28] *** AlexDaniel left
[01:26] *** lucasb left
[01:36] *** Altai-man_ joined
[01:39] *** sena_kun left
[01:49] *** ShimmerFairy left
[01:50] *** ShimmerFairy joined
[01:50] *** MasterDuke left
[03:02] *** nativecallable6 left
[03:02] *** statisfiable6 left
[03:02] *** bloatable6 left
[03:02] *** evalable6 left
[03:02] *** benchable6 left
[03:02] *** coverable6 left
[03:02] *** shareable6 left
[03:02] *** tellable6 left
[03:02] *** greppable6 left
[03:02] *** quotable6 left
[03:02] *** sourceable6 left
[03:02] *** committable6 left
[03:02] *** releasable6 left
[03:02] *** unicodable6 left
[03:02] *** reportable6 left
[03:02] *** bisectable6 left
[03:02] *** squashable6 left
[03:02] *** linkable6 left
[03:02] *** notable6 left
[03:02] *** committable6 joined
[03:02] *** unicodable6 joined
[03:03] *** coverable6 joined
[03:03] *** greppable6 joined
[03:03] *** quotable6 joined
[03:03] *** shareable6 joined
[03:04] *** linkable6 joined
[03:04] *** squashable6 joined
[03:04] *** notable6 joined
[03:04] *** nativecallable6 joined
[03:04] *** sourceable6 joined
[03:04] *** releasable6 joined
[03:04] *** reportable6 joined
[03:04] *** bloatable6 joined
[03:05] *** statisfiable6 joined
[03:05] *** tellable6 joined
[03:05] *** benchable6 joined
[03:05] *** evalable6 joined
[03:05] *** bisectable6 joined
[03:37] *** sena_kun joined
[03:38] *** Altai-man_ left
[05:36] *** Altai-man_ joined
[05:38] *** sena_kun left
[07:09] *** MasterDuke joined
[07:37] *** sena_kun joined
[07:38] *** Altai-man_ left
[07:43] <lizmat> Files=1306, Tests=111378, 215 wallclock secs (29.03 usr  8.17 sys + 3012.49 cusr 277.51 csys = 3327.20 CPU)

[07:43] <lizmat> timotimo: which one do you mean specifically?

[08:05] *** squashable6 left
[08:07] *** squashable6 joined
[08:20] *** leont joined
[08:33] *** patrickb joined
[08:36] <patrickb> Altai-man: This is the raku.org revamp by CIAvash: https://github.com/Raku/problem-solving/issues/158

[08:36] <tellable6> patrickb, I'll pass your message to Altai-man_

[08:39] <sena_kun> patrickb, thanks, will look at it.

[08:42] <patrickb> sena_kun: The question of "Who has the say" is a very important question with visual designy issues. As such issues are usually very bike-sheddable. So finding / defining a general answer to the "Who" question will prove valuable in the future also.

[08:45] <sena_kun> patrickb, 1)while the ticket is kind of similar (though has a different approach), I'm thinking towards docs.*, examples.* sites design, while I am fine with raku.org. Most likely they don't need to be very similar. As for bike-shedding - I'd say we can choose a couple of design-wise people who can point out things missed, and do 1-3 iterations with them, not allowing everyone pull the blanket as was seen on e.g. rename, not to make this process 

[08:45] <sena_kun> infinite and infinitely expensive.

[08:47] <sena_kun> I mean, reasonable requests like "It misses a favicon, colors should consider color blindness" are awesome, requests like "I don't like these colors, make them lighter, I don't like them, make them darker" are no way.

[08:48] <sena_kun> That's why it is not a ticket for problem-solving, there is no "official" issue behind..

[08:50] <sena_kun> Also, the ticket you mentioned is so, it doesn't describe an "issue", only "We have a new template, what's next?".

[08:53] <patrickb> sena_kun: True, that ticket doesn't belong into problem-solving.

[08:54] <patrickb> sena_kun: Also I share your opinion that docs and examples are in need of a design fresh up while raku.org is ok-ish.

[08:56] <[Tux]> Rakudo version 2020.05.1-263-g15961f91b - MoarVM version 2020.05-55-g6c7ee4e8f

[08:56] <[Tux]> csv-test-xs-20      0.383 -  0.388

[08:56] <[Tux]> test-t --race       0.828 -  0.948

[08:56] <[Tux]> csv-ip5xs           0.860 -  0.870

[08:56] <[Tux]> test-t              1.878 -  1.948

[08:56] <[Tux]> test                7.489 -  7.782

[08:56] <[Tux]> csv-ip5xs-20        7.803 -  8.129

[08:56] <[Tux]> test-t-20 --race    9.040 -  9.457

[08:56] <[Tux]> csv-parser         26.222 - 27.228

[08:56] <[Tux]> test-t-20          30.620 - 31.000

[08:57] *** AlexDani` is now known as AlexDaniel

[08:57] *** AlexDaniel left
[08:57] *** AlexDaniel joined
[09:29] <ShimmerFairy> nqp-m: my @a; my int8 $b := 42; nqp::writeint(@a, 0, $b, nqp::const::BINARY_SIZE_16_BIT); say(nqp::atpos(@a, 0)); say(nqp::atpos(@a, 1));

[09:29] <camelia> nqp-moarvm: OUTPUT: «(signal SEGV)»

[09:30] <ShimmerFairy> I know writeint expects a typed array, but I feel like there's a better solution than a segfault (I was wondering if it was just my local copy faulting).

[09:32] <lizmat> m: use nqp; my @a; my int8 $b = 42; nqp::writeint(@a, 0, $b, nqp::const::BINARY_SIZE_16_BIT); say(nqp::atpos(@a, 0)); say(nqp::atpos(@a, 1));

[09:32] <camelia> rakudo-moar 15961f91b: OUTPUT: «This representation (P6opaque) does not support positional access (for type Array)␤  in block <unit> at <tmp> line 1␤␤»

[09:32] <ShimmerFairy> the same segfault happens if you do my $a := nqp::list() instead, btw.

[09:33] <lizmat> I suggest making a MoarVM ticket for it

[09:33] <lizmat> (as this is MoarVM specific, as I don't think the JVM backend has writeint yet)

[09:34] <ShimmerFairy> Moar and Javascript (which I think leans on Moar, so, yeah)

[09:34] <jnthn> Yeah, that is most certainly a MoarVM bug

[09:36] *** Altai-man_ joined
[09:36] *** JJMerelo joined
[09:36] <JJMerelo> There's apparently an XX operator I've found no reference about, except in the 6.d ChangeLog

[09:36] <tellable6> hey JJMerelo, you have a message: https://gist.github.com/71dd3f4f4ef22cf5a2858a251097545e

[09:36] <JJMerelo> m: say "Nested" XX 5

[09:36] <camelia> rakudo-moar 15961f91b: OUTPUT: «(((Nested 5)))␤»

[09:37] <JJMerelo> m: say "Nested" XZ 5

[09:37] <camelia> rakudo-moar 15961f91b: OUTPUT: «(((Nested 5)))␤»

[09:37] <JJMerelo> m: say "Nested" ZY 5

[09:37] <camelia> rakudo-moar 15961f91b: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 "Nested" ZY 5␤Two terms in a row␤at <tmp>:1␤------> 3say 7⏏5"Nested" ZY 5␤    expecting any of:␤        infix␤        infix stopper␤ …»

[09:37] <JJMerelo> m: say "Nested" XY 3

[09:37] <camelia> rakudo-moar 15961f91b: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 "Nested" XY 3␤Two terms in a row␤at <tmp>:1␤------> 3say 7⏏5"Nested" XY 3␤    expecting any of:␤        infix␤        infix stopper␤ …»

[09:38] <JJMerelo> m: say <a b c> X <x y z>

[09:38] <camelia> rakudo-moar 15961f91b: OUTPUT: «((a x) (a y) (a z) (b x) (b y) (b z) (c x) (c y) (c z))␤»

[09:38] <JJMerelo> m: say <a b c> XX <x y z>

[09:38] <camelia> rakudo-moar 15961f91b: OUTPUT: «(((a x)) ((a y)) ((a z)) ((b x)) ((b y)) ((b z)) ((c x)) ((c y)) ((c z)))␤»

[09:38] <JJMerelo> m: say <a b c> XZ <x y z>

[09:38] <camelia> rakudo-moar 15961f91b: OUTPUT: «(((a x)) ((a y)) ((a z)) ((b x)) ((b y)) ((b z)) ((c x)) ((c y)) ((c z)))␤»

[09:38] *** sena_kun left
[09:38] <JJMerelo> OK, so it's simple concatenation of operators...

[09:39] <jnthn> JJMerelo: It's the X meta-op

[09:39] <JJMerelo> jnthn right... Thanks.

[09:40] <JJMerelo> jnthn don't really get it, though...

[09:41] <JJMerelo> .tell softmoth not really. I really love what you're doing. There's another fork, which is mine, but it does not go any further than the original.

[09:41] <tellable6> JJMerelo, I'll pass your message to softmoth

[09:41] <JJMerelo> OK, I think I get it

[09:41] <JJMerelo> m: say X 3

[09:41] <camelia> rakudo-moar 15961f91b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say X7⏏5 3␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤     …»

[09:41] <lizmat> m: dd <a b c> X~ <d e f>

[09:41] <camelia> rakudo-moar 15961f91b: OUTPUT: «("ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf").Seq␤»

[09:41] <lizmat> m: dd <a b c> XX <d e f>

[09:41] <camelia> rakudo-moar 15961f91b: OUTPUT: «((("a", "d"),).Seq, (("a", "e"),).Seq, (("a", "f"),).Seq, (("b", "d"),).Seq, (("b", "e"),).Seq, (("b", "f"),).Seq, (("c", "d"),).Seq, (("c", "e"),).Seq, (("c", "f"),).Seq).Seq␤»

[09:42] <lizmat> not sure what use XX would be, maybe that should produce a warning as it could be confused with xx ?

[09:42] <JJMerelo> Ah, OK

[09:43] <JJMerelo> The thing is it's apparently inventing an empty element.

[09:43] <JJMerelo> m: dd <a b c> X <d e f>

[09:43] <camelia> rakudo-moar 15961f91b: OUTPUT: «(("a", "d"), ("a", "e"), ("a", "f"), ("b", "d"), ("b", "e"), ("b", "f"), ("c", "d"), ("c", "e"), ("c", "f")).Seq␤»

[09:43] <lizmat> m: dd +(<a b c> X~ <d e f>)

[09:43] <camelia> rakudo-moar 15961f91b: OUTPUT: «9␤»

[09:43] <lizmat> m: dd +(<a b c> XX <d e f>)

[09:43] <camelia> rakudo-moar 15961f91b: OUTPUT: «9␤»

[09:45] <JJMerelo> m: dd <a b>.Seq X <c d>

[09:45] <camelia> rakudo-moar 15961f91b: OUTPUT: «(("a", "c"), ("a", "d"), ("b", "c"), ("b", "d")).Seq␤»

[09:45] <JJMerelo> m: dd <a b> X <c d>

[09:45] <camelia> rakudo-moar 15961f91b: OUTPUT: «(("a", "c"), ("a", "d"), ("b", "c"), ("b", "d")).Seq␤»

[09:46] <JJMerelo> No idea. Never mind. The existence of XX has been clarified. Thanks!

[09:46] <JJMerelo> m: dd <a b> Xxx (3,4)

[09:46] <camelia> rakudo-moar 15961f91b: OUTPUT: «(("a", "a", "a").Seq, ("a", "a", "a", "a").Seq, ("b", "b", "b").Seq, ("b", "b", "b", "b").Seq).Seq␤»

[09:46] <jnthn> I think you'd need a list of lists on each side for it to make sense.

[09:47] <jnthn> m: dd [<a b>, <c d>] XX [<e f>, <g h>]

[09:47] <camelia> rakudo-moar 15961f91b: OUTPUT: «((($("a", "b"), $("e", "f")),).Seq, (($("a", "b"), $("g", "h")),).Seq, (($("c", "d"), $("e", "f")),).Seq, (($("c", "d"), $("g", "h")),).Seq).Seq␤»

[09:47] <JJMerelo> x: dd ((1,2),3) XX (5,(6,7))

[09:47] <JJMerelo> m: dd ((1,2),3) XX (5,(6,7))

[09:47] <camelia> rakudo-moar 15961f91b: OUTPUT: «(((1, 5), (2, 5)).Seq, ((1, 6), (1, 7), (2, 6), (2, 7)).Seq, ((3, 5),).Seq, ((3, 6), (3, 7)).Seq).Seq␤»

[09:47] <JJMerelo> Cool. Cool, cool, cool.

[09:47] <jnthn> m: dd (<a b>, <c d>) XX (<e f>, <g h>)

[09:47] <camelia> rakudo-moar 15961f91b: OUTPUT: «((("a", "e"), ("a", "f"), ("b", "e"), ("b", "f")).Seq, (("a", "g"), ("a", "h"), ("b", "g"), ("b", "h")).Seq, (("c", "e"), ("c", "f"), ("d", "e"), ("d", "f")).Seq, (("c", "g"), ("c", "h"), ("d", "g"), ("d", "h")).Seq).Seq␤»

[09:48] <jnthn> Makes rather more sense without the itemization an array brings :)

[09:48] <jnthn> You can see there's you've got <a b> X <e f>, <a b> X <g h>, and so forth.

[09:49] <jnthn> s/there's/there/

[09:51] <JJMerelo> jnthn great, thanks. used it as an example :-)

[10:13] <Geth_> ¦ problem-solving: lizmat assigned to jnthn Issue Managing the Raku project as it is Coming of Age https://github.com/Raku/problem-solving/issues/203

[10:18] *** Geth_ left
[10:18] *** Geth joined
[10:24] <Geth> ¦ rakudo/rakuast: fe783f1b00 | (Jonathan Worthington)++ | 3 files

[10:24] <Geth> ¦ rakudo/rakuast: Compile very basic string literals in RakuAST

[10:24] <Geth> ¦ rakudo/rakuast: 

[10:24] <Geth> ¦ rakudo/rakuast: This gets a lot of the grammar bits back in place, as well as adding a

[10:24] <Geth> ¦ rakudo/rakuast: RakuAST node to model a quoted string with its various segments.

[10:24] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/fe783f1b00

[11:03] *** JJMerelo left
[11:14] *** brrt joined
[11:36] <patrickb> lizmat: You dropped a bomb. This PS issue could fundamentally change the atmosphere of the raku project.

[11:37] *** sena_kun joined
[11:37] <lizmat> patrickb: I'm sorry to hear you think I dropped a bomb

[11:37] <patrickb> wait!

[11:37] <patrickb> That's not meant negative!

[11:37] <lizmat> ah, ok  *phew*

[11:38] <lizmat> .oO( the way to hell is paved with good intentions )

[11:39] *** Altai-man_ left
[11:45] <ShimmerFairy> I think it's great to make the change now, rather than when there's a bunch more people working and making it harder to organize efforts.

[11:46] <ShimmerFairy> (And I'm suddenly remembering what it was like leading up to Christmas 2015(?), and how it'd be nice to avoid some of those headaches in the future.)

[12:25] <Geth> ¦ nqp-configure: f0e80952c5 | (Sizhe Zhao)++ | lib/NQP/Config.pm

[12:25] <Geth> ¦ nqp-configure: Use the 'Microsoft' keyword to detect nmake.

[12:25] <Geth> ¦ nqp-configure: 

[12:25] <Geth> ¦ nqp-configure: Since the text after 'Microsoft' might vary in different languages, this

[12:25] <Geth> ¦ nqp-configure: fix enables users to build projects that use nqp-configure with a

[12:25] <Geth> ¦ nqp-configure: localized nmake.

[12:25] <Geth> ¦ nqp-configure: review: https://github.com/Raku/nqp-configure/commit/f0e80952c5

[12:25] <Geth> ¦ nqp-configure: c7aa9d3e75 | (Sizhe Zhao)++ (committed using GitHub Web editor) | 4 files

[12:25] <Geth> ¦ nqp-configure: Merge branch 'master' into nmake-detection-fix

[12:25] <Geth> ¦ nqp-configure: review: https://github.com/Raku/nqp-configure/commit/c7aa9d3e75

[12:26] <Geth> ¦ nqp-configure: c61c22c6ea | (Patrick Böker)++ (committed using GitHub Web editor) | lib/NQP/Config.pm

[12:26] <Geth> ¦ nqp-configure: Merge pull request #21 from Prince213/nmake-detection-fix

[12:26] <Geth> ¦ nqp-configure: 

[12:26] <Geth> ¦ nqp-configure: Use the 'Microsoft' keyword to detect nmake.

[12:26] <Geth> ¦ nqp-configure: review: https://github.com/Raku/nqp-configure/commit/c61c22c6ea

[12:29] <Geth> ¦ rakudo/rakuast: b43fd03c5f | (Jonathan Worthington)++ | 2 files

[12:29] <Geth> ¦ rakudo/rakuast: Further quote constructs and backslash sequences

[12:29] <Geth> ¦ rakudo/rakuast: 

[12:29] <Geth> ¦ rakudo/rakuast: May need to revisit exactly how we do these for the sake of the heredoc

[12:29] <Geth> ¦ rakudo/rakuast: handling, but for now it unblocks a lot of basic string usage.

[12:29] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/b43fd03c5f

[12:29] <Geth> ¦ rakudo/rakuast: 32c272a1c9 | (Jonathan Worthington)++ | src/Raku/ast/base.rakumod

[12:29] <Geth> ¦ rakudo/rakuast: Add a very basic dump implementation

[12:29] <Geth> ¦ rakudo/rakuast: 

[12:29] <Geth> ¦ rakudo/rakuast: So --target=ast shows at least something for RakuAST.

[12:29] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/32c272a1c9

[12:44] <Geth> ¦ nqp: 015a76d381 | (Daniel Green)++ | tools/templates/MOAR_REVISION

[12:44] <Geth> ¦ nqp: Bump MoarVM for spesh/GC fix

[12:44] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/015a76d381

[12:47] <Geth> ¦ rakudo: ff1558424b | (Daniel Green)++ | tools/templates/NQP_REVISION

[12:47] <Geth> ¦ rakudo: Bump NQP for MoarVM spesh/GC fix

[12:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ff1558424b

[12:52] <Geth> ¦ rakudo/rakuast: 0eaa2e81ee | (Jonathan Worthington)++ | 3 files

[12:52] <Geth> ¦ rakudo/rakuast: Compile unless statement to RakuAST node

[12:52] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/0eaa2e81ee

[13:25] <Geth> ¦ rakudo: 902401b791 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[13:25] <Geth> ¦ rakudo: Introduce R:It.MatchMatch/MatchStr

[13:25] <Geth> ¦ rakudo: 

[13:25] <Geth> ¦ rakudo: - MatchMatch for producing full blown Match objects from regex / string

[13:25] <Geth> ¦ rakudo: - MatchStr for producing strings from regex / string

[13:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/902401b791

[13:25] <Geth> ¦ rakudo: 4d1ef59e8b | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[13:25] <Geth> ¦ rakudo: Make Str.comb use the new R:It.MatchMatch/MatchStr iterators

[13:25] <Geth> ¦ rakudo: 

[13:25] <Geth> ¦ rakudo: - doesn't do much in terms of performance

[13:25] <Geth> ¦ rakudo: - moved it to the same basic Match iterator scaffolding

[13:25] <Geth> ¦ rakudo: - removed some now unneeded private methods

[13:25] <lizmat> afk for a few hours&

[13:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4d1ef59e8b

[13:36] *** Altai-man_ joined
[13:38] *** sena_kun left
[13:45] *** brrt left
[13:45] *** brrt joined
[13:49] *** travis-ci joined
[13:49] <travis-ci> Rakudo build passed. Daniel Green 'Bump NQP for MoarVM spesh/GC fix'

[13:49] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/696443024 https://github.com/rakudo/rakudo/compare/15961f91bae0...ff1558424bda

[13:49] *** travis-ci left
[13:55] *** lichtkind joined
[13:56] *** squashable6 left
[13:59] *** squashable6 joined
[14:09] *** brrt left
[14:19] <Geth> ¦ rakudo/rakuast: 6e50ab0ad4 | (Jonathan Worthington)++ | 8 files

[14:19] <Geth> ¦ rakudo/rakuast: Add infrastructure for sinking

[14:19] <Geth> ¦ rakudo/rakuast: 

[14:19] <Geth> ¦ rakudo/rakuast: In line with how RakuAST generally works, nodes carry knowledge of how

[14:19] <Geth> ¦ rakudo/rakuast: they want to interact with the sinking process. There are 3 concepts:

[14:19] <Geth> ¦ rakudo/rakuast: 

[14:19] <Geth> ¦ rakudo/rakuast: * Sink boundary (a unit within which we'll perform sink marking)

[14:19] <Geth> ¦ rakudo/rakuast: * Sinkable (something that wants to know if it's sunk, either because

[14:19] <Geth> ¦ rakudo/rakuast: <…commit message has 6 more lines…>

[14:19] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/6e50ab0ad4

[14:25] <jnthn> Hopefully this model will suffice.

[14:33] *** travis-ci joined
[14:33] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make Str.comb use the new R:It.MatchMatch/MatchStr iterators

[14:33] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/696454411 https://github.com/rakudo/rakudo/compare/ff1558424bda...4d1ef59e8b70

[14:33] *** travis-ci left
[14:55] <Kaiepi> who do i talk to when it comes to issues about a grant?

[14:57] *** patrickb left
[15:24] *** patrickb joined
[15:37] *** sena_kun joined
[15:38] <[Coke]> Your grant manager?

[15:38] <[Coke]> Assuming you mean your own grant.

[15:38] <[Coke]> GC secretary is also an option.

[15:39] *** Altai-man_ left
[15:56] *** patrickb left
[16:10] *** lichtkind left
[16:23] *** lichtkind joined
[16:26] <rba> patrickb: Just stumbled over Dave Rolskys azure pipeline helpers for perl: https://github.com/houseabsolute/ci-perl-helpers Might be helpful by some means or others...

[16:26] <tellable6> rba, I'll pass your message to patrickb

[16:37] *** JJMerelo joined
[17:13] *** lichtkind left
[17:15] *** MasterDuke left
[17:36] *** Altai-man_ joined
[17:38] *** sena_kun left
[17:56] <vrurg> nine: I finally got time to look into NQP build problem. Can't reproduce it right away. Plain change of HLL/Compiler.nqp doesn't trigger the problem.

[18:03] *** softmoth joined
[18:09] *** Xliff left
[18:36] *** lichtkind joined
[19:21] *** MasterDuke joined
[19:27] *** softmoth left
[19:37] *** sena_kun joined
[19:38] *** Altai-man_ left
[19:41] <Geth> ¦ rakudo/rakuast: b6a8011041 | (Jonathan Worthington)++ | 3 files

[19:41] <Geth> ¦ rakudo/rakuast: Add a mechanism for marking block level statements

[19:41] <Geth> ¦ rakudo/rakuast: 

[19:41] <Geth> ¦ rakudo/rakuast: Since loop constructs compile differently based upon it.

[19:41] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/b6a8011041

[19:41] <Geth> ¦ rakudo/rakuast: 6cd1915f14 | (Jonathan Worthington)++ | 4 files

[19:41] <Geth> ¦ rakudo/rakuast: Introduce `check` on CompUnit

[19:41] <Geth> ¦ rakudo/rakuast: 

[19:41] <Geth> ¦ rakudo/rakuast: Which models all that we need to do at CHECK time. This includes a pass

[19:41] <Geth> ¦ rakudo/rakuast: at reference resolution and doing any uncompleted sink marking (most

[19:41] <Geth> ¦ rakudo/rakuast: likely only for synthetic ASTs), and will later include production of

[19:41] <Geth> ¦ rakudo/rakuast: CHECK-time errors too.

[19:41] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/6cd1915f14

[19:41] <Geth> ¦ rakudo/rakuast: 41f3db72da | (Jonathan Worthington)++ | 4 files

[19:41] <Geth> ¦ rakudo/rakuast: RakuAST for while/until/repeat/loop

[19:41] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/41f3db72da

[19:48] <Geth> ¦ rakudo/rakuast: ba97e31cf2 | (Jonathan Worthington)++ | src/Raku/ast/base.rakumod

[19:48] <Geth> ¦ rakudo/rakuast: Fix a typo; MasterDuke++

[19:48] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/ba97e31cf2

[19:48] <jnthn> Well, now it's probably turing complete... :)

[19:49] <MasterDuke> looks like you missed the other typo

[19:49] <MasterDuke> and nice. how different has the grammar/actions ended up from current?

[19:50] <jnthn> Grammar: not terribly much

[19:50] <jnthn> Actions: vastly simpler

[19:50] <MasterDuke> very cool

[19:51] <jnthn> (Expected, 'cus one of the design goals was moving knowledge into the RakuAST nodes)

[19:51] <jnthn> Though I think we'll end up with a net complexity reduction too

[19:51] <jnthn> For example, assuming this sink model holds up, it's IMHO a lot neater than what we currently do

[19:52] <lizmat> weekly: https://perlmonks.org/?node_id=11117443

[19:52] <notable6> lizmat, Noted! (weekly)

[19:52] <jnthn> The grammar may end up an iota simpler in that there will probably be various bits of checking it does that can't stay there

[19:52] <MasterDuke> btw, are return types not supported at that point? i.e., there are a bunch of `method foo() { True }` instead of `method foo(--> True) {}`, and my understanding is that the return constant is faster

[19:53] <jnthn> Or other bits of tracking we did for the sake of the actions that now go away

[19:53] <jnthn> Didn't do those yet, but what you're looking at is actually the input to a compiler that desugars stuff into NQP code

[19:54] <MasterDuke> ah

[19:54] <jnthn> So it's not going to have quite the same performance profile as Raku code

[19:54] <jnthn> But yes, I plan to put those in, for introspection of what you get back if nothing else

[19:54] <jnthn> And the --> Nil convenience

[19:54] <jnthn> Of course, feel free to beat me to it :)

[19:55] <jnthn> There's actually a bunch of "ways to help" in the README.md in src/Raku/ast for anybody wanting to join the fun

[19:56] <MasterDuke> i did notice those the other day. now that the optimize_gethllsym stuff seems sorted out i may read more seriously

[19:57] <Geth> ¦ rakudo/rakuast: 1d08532885 | (Jonathan Worthington)++ | src/Raku/ast/README.md

[19:57] <Geth> ¦ rakudo/rakuast: Update RakuAST README (status, remove done task)

[19:57] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/1d08532885

[19:58] <MasterDuke> OTOH, i also have a still incomplete PR to libtommath for a barrett reduction-based mp_to_radix that would significantly speed up our stringification of large integers...

[20:01] <Geth> ¦ rakudo/rakuast: 34519fb94a | (Jonathan Worthington)++ | src/Raku/Grammar.nqp

[20:01] <Geth> ¦ rakudo/rakuast: Remove unused dynamic variable

[20:01] <Geth> ¦ rakudo/rakuast: 

[20:01] <Geth> ¦ rakudo/rakuast: No longer needed, since the block statement level logic now lives in

[20:01] <Geth> ¦ rakudo/rakuast: RakuAST (and must be there, since it applies to synthetic ASTs too).

[20:01] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/34519fb94a

[20:01] <jnthn> There's one example of the grammar getting simpler

[20:02] <Geth> ¦ rakudo/rakuast: 0438fcef2e | (Jonathan Worthington)++ | src/Raku/ast/base.rakumod

[20:02] <Geth> ¦ rakudo/rakuast: Fix yet another typo

[20:02] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/0438fcef2e

[20:02] *** JJMerelo left
[20:03] <jnthn> At least typos are good for my commit count... :)

[20:07] <jnthn> .oO( But can I catch up with lizmat++ again? )

[20:27] <Geth> ¦ rakudo/rakuast: ad0c775904 | (Jonathan Worthington)++ | src/Raku/Grammar.nqp

[20:27] <Geth> ¦ rakudo/rakuast: Correct regression in grammar

[20:27] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/ad0c775904

[20:27] <Geth> ¦ rakudo/rakuast: 483c64d167 | (Jonathan Worthington)++ | 2 files

[20:27] <Geth> ¦ rakudo/rakuast: Support list-op calls in RakuAST

[20:27] <Geth> ¦ rakudo/rakuast: 

[20:27] <Geth> ¦ rakudo/rakuast: Which are used extensively in the tests. With this, we now pass the

[20:27] <Geth> ¦ rakudo/rakuast: first sanity test in RakuAST mode.

[20:27] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/483c64d167

[20:28] <jnthn> And that'll probably do for today...

[21:12] *** lichtkind left
[21:36] *** Altai-man_ joined
[21:38] *** sena_kun left
[22:04] *** lichtkind joined
[23:16] *** MasterDuke left
[23:37] *** sena_kun joined
[23:38] *** Altai-man_ left
[23:41] *** softmoth joined
[23:44] *** lichtkind left
