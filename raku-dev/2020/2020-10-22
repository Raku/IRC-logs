[00:18] *** Merfont joined
[00:19] *** Kaeipi left
[01:18] *** Merfont left
[01:18] *** Merfont joined
[01:27] *** Merfont left
[01:27] *** Merfont joined
[04:14] *** Merfont left
[04:15] *** Merfont joined
[05:23] *** frost-lab joined
[05:33] *** frost-lab left
[05:38] *** frost-lab joined
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:14] *** mst left
[07:25] *** MasterDuke joined
[08:05] *** sena_kun joined
[08:39] *** sena_kun left
[08:46] *** domidumont joined
[09:31] *** sena_kun joined
[11:12] *** sena_kun left
[13:47] <Geth> ¦ rakudo/Str.no-strands: 4a4c6bb360 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[13:47] <Geth> ¦ rakudo/Str.no-strands: Expose nqp::indexingoptimized as Str.no-strands

[13:47] <Geth> ¦ rakudo/Str.no-strands: 

[13:47] <Geth> ¦ rakudo/Str.no-strands: Calling .no-strands on a Str will make sure that the string in

[13:47] <Geth> ¦ rakudo/Str.no-strands: memory consists of a single array of codepoints, rather than possibly

[13:47] <Geth> ¦ rakudo/Str.no-strands: as a collection of strands (which typically happens with a lot of

[13:47] <Geth> ¦ rakudo/Str.no-strands: ~= work on a string).

[13:47] <Geth> ¦ rakudo/Str.no-strands: 

[13:47] <Geth> ¦ rakudo/Str.no-strands: <…commit message has 5 more lines…>

[13:47] <Geth> ¦ rakudo/Str.no-strands: review: https://github.com/rakudo/rakudo/commit/4a4c6bb360

[13:48] <Geth> ¦ rakudo: lizmat++ created pull request #3975: Expose nqp::indexingoptimized as Str.no-strands

[13:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3975

[13:49] <[Tux]> Rakudo v2020.09-82-gb30fa3a71 (v6.d) on MoarVM 2020.09-16-g4f5787d3c

[13:49] <[Tux]> csv-test-xs-20      0.396 -  0.397

[13:49] <[Tux]> csv-ip5xs           0.840 -  0.844

[13:49] <[Tux]> test-t --race       0.850 -  0.855

[13:49] <[Tux]> test-t              2.060 -  2.109

[13:49] <[Tux]> test                7.817 -  7.969

[13:49] <[Tux]> csv-ip5xs-20        8.196 -  8.404

[13:49] <[Tux]> test-t-20 --race    8.977 -  9.356

[13:49] <[Tux]> csv-parser         26.271 - 27.453

[13:49] <[Tux]> test-t-20          32.109 - 32.788

[13:49] <[Tux]> (no teams running)

[14:10] <[Coke]> should no-strands be marked as rakudo-specific?

[14:10] <[Coke]> or do we want to make it part of the API?

[14:14] <[Coke]> ah, it's a PR. (saw the commit link first. :) will comment there

[14:18] *** sena_kun joined
[14:21] * [Coke] wonders if that happened because he asked about the opcode recently. :)

[14:29] *** frost-lab left
[14:39] <lizmat> [Coke]: yeah, documenting that made me aware of its existence

[15:00] <[Coke]> :)

[15:14] *** domidumont left
[15:34] *** patrickb joined
[15:56] *** Xliff joined
[17:38] *** linkable6 left
[17:38] *** evalable6 left
[17:40] *** linkable6 joined
[17:40] *** evalable6 joined
[18:39] *** rypervenche left
[18:42] *** rypervenche joined
[18:43] *** sena_kun left
[19:06] *** go|dfish left
[19:09] *** go|dfish joined
[19:37] <MasterDuke> m: my %s{List}; %s{$_}++ for (1, "a", 2), (2, "b", 3), (1, "a", 2); say %s    # i must be more tired than i realized. what am i doing wrong?

[19:37] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Type check failed in binding to parameter 'key'; expected List but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[19:39] <[Coke]> m: my %s{List}; %s{$_}++ for [(1, "a", 2), (2, "b", 3), (1, "a", 2)]; say %s

[19:39] <camelia> rakudo-moar 85847d2f1: OUTPUT: «{(1 a 2) => 1, (1 a 2) => 1, (2 b 3) => 1}␤»

[19:40] <[Coke]> m: for (1, "a", 2), (2, "b", 3), (1, "a", 2) { .say }

[19:40] <camelia> rakudo-moar 85847d2f1: OUTPUT: «(1 a 2)␤(2 b 3)␤(1 a 2)␤»

[19:40] <[Coke]> yah, weird.

[19:43] <MasterDuke> m: my %s{List}; %s{List.new(|$_)}++ for (1, "a", 2), (2, "b", 3), (1, "a", 2); say %s    # doesn't work either

[19:43] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Type check failed in binding to parameter 'key'; expected List but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[19:44] *** patrickb left
[19:44] <[Coke]> m: .say for [(1, "a", 2), (2, "b", 3), (1, "a", 2); # even this has the sublists.

[19:44] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in array composer; couldn't find final ']' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3, "a", 2); # even this has the sublists.7⏏5<EOL>␤»

[19:45] <[Coke]> m: .say for (1, "a", 2), (2, "b", 3), (1, "a", 2); # even this has the sublists.

[19:45] <camelia> rakudo-moar 85847d2f1: OUTPUT: «(1 a 2)␤(2 b 3)␤(1 a 2)␤»

[19:46] <MasterDuke> committable6: releases my %s{List}; %s{$_}++ for (1, "a", 2), (2, "b", 3), (1, "a", 2); say %s    # i must be more tired than i realized. what am i doing wrong?

[19:47] <committable6> MasterDuke, https://gist.github.com/2043f8a66046954ed05a12955cc5b24e

[19:47] <MasterDuke> ok, so it's me

[19:49] <AlexDaniel`> e: my %s{List}; %s{($_,)} = 1 for (1, "a", 2), (2, "b", 3), (1, "a", 2); say %s

[19:49] <evalable6> AlexDaniel`, rakudo-moar b30fa3a71: OUTPUT: «{(1 a 2) => 1, (1 a 2) => 1, (2 b 3) => 1}␤»

[19:49] <AlexDaniel`> don't know why ++ doesn't work tho

[19:50] <MasterDuke> or the List.new version?

[19:50] <AlexDaniel`> e: my %s{List}; %s{$_,} = 1 for (1, "a", 2), (2, "b", 3), (1, "a", 2); say %s

[19:50] <evalable6> AlexDaniel`, rakudo-moar b30fa3a71: OUTPUT: «{(1 a 2) => 1, (1 a 2) => 1, (2 b 3) => 1}␤»

[19:51] <AlexDaniel`> it's like the single argument rule, except that it isn't x)

[19:52] <MasterDuke> and for the xy problem part of it, i actually want those two (1, "a", 2) to be seen as the same thing

[19:52] <MasterDuke> is there some sort of decont happening that shouldn't? or a binding instead of an assignment?

[19:53] <AlexDaniel`> I think it's just parsed horribly

[19:54] <AlexDaniel`> e: my %s{List}; %s{$_,} += 1 for (1, "a", 2), (2, "b", 3), (1, "a", 2); say %s

[19:54] <evalable6> AlexDaniel`, rakudo-moar b30fa3a71: OUTPUT: «{(1 a 2) => 2, (1 a 2) => 2, (2 b 3) => 2}␤»

[19:55] <AlexDaniel`> that's pretty close but I really don't know why it's ⇒ 2 for all

[19:55] <AlexDaniel`> as for treating (1, "a", 2) the same, these are two different lists so I feel like it's not going to work

[19:57] <AlexDaniel`> so basically, you want this:

[19:57] <AlexDaniel`> m: my %s; %s{.Str}++ for (1, "a", 2), (2, "b", 3), (1, "a", 2); say %s

[19:57] <camelia> rakudo-moar 85847d2f1: OUTPUT: «{1 a 2 => 2, 2 b 3 => 1}␤»

[19:57] <AlexDaniel`> but with proper typing. Well…

[19:58] <MasterDuke> i've been using .unique(:with(&[eqv])), but it's slow

[20:03] <AlexDaniel`> what's the XY of the XY? Why do you need to count these lists?

[20:05] <MasterDuke> i'm trying to enhance  MoarVM/tools/parse_coverage_report.p6 to report the lines that were run that caused a particular line to be covered

[20:07] <MasterDuke> e.g., SETTING::src/core.c/Enumeration.pm6 line 5 was covered by t/spec/S12-enums/basic.rakudo.moar line 3, t/spec/S12-enums/basic.rakudo.moar line 20, t/spec/foo/bar.t line 123

[20:07] <Geth> ¦ rakudo: 2999be32ef | (Elizabeth Mattijsen)++ | 2 files

[20:07] <Geth> ¦ rakudo: Make making a Uni between 1.5x and 22x as fast

[20:07] <Geth> ¦ rakudo: 

[20:07] <Geth> ¦ rakudo: - rewrite the slurpy case using nqp: 1.5x as fast

[20:07] <Geth> ¦ rakudo: - add a array[uint32] candidate (native Uni format): 22x as fast

[20:07] <Geth> ¦ rakudo: - add an empty candidate to satisfy tests

[20:07] <Geth> ¦ rakudo: 

[20:07] <Geth> ¦ rakudo: The array[uint32] (aka "my uint32 @codepoints") case became a lot

[20:07] <Geth> ¦ rakudo: <…commit message has 16 more lines…>

[20:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2999be32ef

[22:03] *** Kaeipi joined
[22:08] *** Merfont left
[22:11] *** Kaiepi joined
[22:15] *** Kaeipi left
[22:47] <Geth> ¦ rakudo: vrurg self-assigned A multi submethod is not installed into submethod table https://github.com/rakudo/rakudo/issues/3976

[22:55] *** Xliff left
