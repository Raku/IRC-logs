[00:20] *** rypervenche left
[00:27] *** rypervenche joined
[00:27] *** dogbert17 left
[00:40] *** leont left
[00:45] <[Coke]> .tell patrickb I'm not enough of a windows expert to know if that makes sense.

[00:45] <tellable6> [Coke], I'll pass your message to patrickb

[00:46] <[Coke]> .tell patrickb ... and I see it's already hit main.

[00:46] <tellable6> [Coke], I'll pass your message to patrickb

[00:53] *** maggotbrain left
[01:07] *** maggotbrain joined
[01:18] *** guifa left
[01:35] *** Kaiepi left
[01:36] *** Kaiepi joined
[02:06] *** lucasb left
[03:19] *** Kaiepi left
[03:20] *** Kaiepi joined
[03:32] *** Kaiepi left
[03:33] *** Kaiepi joined
[04:09] *** Kaiepi left
[04:10] *** Kaiepi joined
[04:18] *** Kaiepi left
[04:18] *** Kaiepi joined
[04:43] *** Kaiepi left
[04:43] *** Kaiepi joined
[05:08] *** MasterDuke left
[06:28] *** sena_kun joined
[06:43] <sena_kun> releasable6, status

[06:43] <releasable6> sena_kun, Next release in ≈8 days and ≈12 hours. There are no known blockers. 0 out of 48 commits logged

[06:43] <releasable6> sena_kun, Details: https://gist.github.com/4cb54db3549671d9a3920387114d236e

[07:20] *** patrickb joined
[07:55] *** domidumont joined
[08:14] *** leont joined
[09:05] *** leont left
[09:05] *** leont joined
[09:09] <lizmat> Files=1336, Tests=113630, 219 wallclock secs (29.34 usr  8.24 sys + 3056.47 cusr 296.12 csys = 3390.17 CPU)

[09:09] <lizmat> also from the nqpif2ternary branch

[09:14] *** Ven`` joined
[09:15] *** Ven`` left
[09:16] <Geth_> ¦ rakudo/rakuast: da66583ab7 | (Brad Gilbert)++ (committed using GitHub Web editor) | src/Raku/ast/pair.rakumod

[09:16] <Geth_> ¦ rakudo/rakuast: (:!foo).IMPL-INTERPRET should have a False value

[09:16] <Geth_> ¦ rakudo/rakuast: 

[09:16] <Geth_> ¦ rakudo/rakuast: It seems like the code for `RakuAST::ColonPair::True.IMPL-INTERPRET()` was copied to `RakuAST::ColonPair::False` but without the proper alteration.

[09:16] <Geth_> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/da66583ab7

[09:16] <Geth_> ¦ rakudo/rakuast: 46e2ab613d | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Raku/ast/pair.rakumod

[09:16] <Geth_> ¦ rakudo/rakuast: Merge pull request #3960 from b2gills/patch-6

[09:16] <Geth_> ¦ rakudo/rakuast: 

[09:16] <Geth_> ¦ rakudo/rakuast: [RakuAST] (:!foo).IMPL-INTERPRET should have a False value

[09:16] <Geth_> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/46e2ab613d

[09:20] *** Altai-man joined
[09:23] *** sena_kun left
[09:46] *** domidumont left
[09:48] *** domidumont joined
[09:52] <Geth_> ¦ rakudo: mid1221213++ created pull request #3962: Fix NativeCall/C++ to allow double instantiation

[09:52] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3962

[09:54] *** Kaeipi joined
[09:55] *** Kaiepi left
[09:58] <Geth_> ¦ rakudo: ecaf334c85 | (Alexandre Jousset)++ | 2 files

[09:58] <Geth_> ¦ rakudo: Fix NativeCall/C++ to allow double instantiation

[09:58] <Geth_> ¦ rakudo: 

[09:58] <Geth_> ¦ rakudo: The test of the arguments concreteness using the Op

[09:58] <Geth_> ¦ rakudo: <isconcrete> instead of <isconcrete_nd> was preventing

[09:58] <Geth_> ¦ rakudo: the instantiation more than once of the same class

[09:58] <Geth_> ¦ rakudo: using the following code:

[09:58] <Geth_> ¦ rakudo: 

[09:58] <Geth_> ¦ rakudo: <…commit message has 9 more lines…>

[09:58] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ecaf334c85

[09:58] <Geth_> ¦ rakudo: 0f1952792d | niner++ (committed using GitHub Web editor) | 2 files

[09:58] <Geth_> ¦ rakudo: Merge pull request #3962 from mid1221213/fix-nativecall-1

[09:58] <Geth_> ¦ rakudo: 

[09:58] <Geth_> ¦ rakudo: Fix NativeCall/C++ to allow double instantiation

[09:58] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0f1952792d

[10:03] <nine> (my $a, my $b) = 42, 666, 314 should most definitely not warn

[10:04] <nine> That's a pretty common and useful construct, just usually with a function on the right hand side and some return values just not being interesting

[10:04] <lizmat> yeah, I see that

[10:04] <lizmat> the () = 42 case feels... different ?

[10:05] <lizmat> I ran into this when writing tests for %h{a;b;c}

[10:06] <lizmat> m: my %h = a => { b => { c => 42 } }; dd %h{"a";*;"x"}

[10:06] <camelia> rakudo-moar 85847d2f1: OUTPUT: «(Any,)␤»

[10:08] <lizmat> there are some cases where an empty list is returned with certain adverbs

[10:08] <lizmat> any adverbed slice is a right value

[10:08] <lizmat> however, the empty list silently absorbs any assignment

[10:10] <Geth_> ¦ rakudo/fix-pod-to-text-warn: dbc7c1e5d7 | Altai-man++ (committed using GitHub Web editor) | lib/Pod/To/Text.rakumod

[10:10] <Geth_> ¦ rakudo/fix-pod-to-text-warn: Use a more efficient code, lizmat++ for a tip

[10:10] <Geth_> ¦ rakudo/fix-pod-to-text-warn: review: https://github.com/rakudo/rakudo/commit/dbc7c1e5d7

[10:11] <lizmat> m: my %h = a => { b => { c => 42 } }; dd %h{*;"b";"x"}:kv:

[10:11] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Unexpected named argument 'kv' passed␤  in block <unit> at <tmp> line 1␤␤»

[10:11] <lizmat> m: use v6.e.PREVIEW; my %h = a => { b => { c => 42 } }; dd %h{*;"b";"x"}:kv:

[10:11] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Don't know setting RESTRICTED␤   at gen/moar/ModuleLoader.nqp:249  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)␤ from gen/moar/ModuleLoader.nqp:254  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/…»

[10:12] <lizmat> ??

[10:12] <lizmat> m: use v6.e.PREVIEW

[10:12] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Don't know setting RESTRICTED␤   at gen/moar/ModuleLoader.nqp:249  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)␤ from gen/moar/ModuleLoader.nqp:254  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/…»

[10:12] <lizmat> that is... weird ?

[10:13] <timotimo> most probably a camelia artifact from how exactly it invokes rakudo to get the restricted setting?

[10:14] <lizmat> no idea

[10:14] <moritz> possible

[10:14] <lizmat> m: use v6.d

[10:14] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Don't know setting RESTRICTED␤   at gen/moar/ModuleLoader.nqp:249  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)␤ from gen/moar/ModuleLoader.nqp:254  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/…»

[10:14] <lizmat> m: use v6.c

[10:14] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Don't know setting RESTRICTED␤   at gen/moar/ModuleLoader.nqp:249  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)␤ from gen/moar/ModuleLoader.nqp:254  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/…»

[10:14] <lizmat> I guess we haz a bug

[10:19] <nine> I don't think it's camelia's fault. Sounds more like a wrong assumption in previous_setting_name

[10:19] <nine> the assumption being that settings are always about language versions and there are not other settings than the one corresponding to language versions

[10:20] <lizmat> yeah, that would be my assessment as well

[10:21] <lizmat> in any case:   %h{"a";"b";"x"}:kv gives ()

[10:21] <lizmat> because there is no key "x" in the deepest hash

[10:22] <lizmat> and then %h{"a";"b";"x"}:kv = 42 then silently does not die

[10:22] <lizmat> it's a corner case, yes, but still  :-)

[10:23] <lizmat> actually, the simpler case already works in the same way:

[10:23] <lizmat> m: my %h; %h<a b>:kv = 42

[10:23] <camelia> rakudo-moar 85847d2f1: ( no output )

[10:25] <lizmat> m: my %h; %h<a>:kv = 42   # simpler still

[10:25] <camelia> rakudo-moar 85847d2f1: ( no output )

[10:26] <AlexDaniel`> restricted setting has been broken for a long time

[10:26] <AlexDaniel`> moreover it doesn't really work anyway, so just remove the restricted setting

[10:28] <AlexDaniel`> and by “doesn't work” I mean that blacklists don't work for that purpose

[10:51] <nine> m: open "testfile", :w

[10:51] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Failed to open file /home/camelia/testfile: Permission denied␤  in block <unit> at <tmp> line 1␤␤»

[10:51] <nine> yeah...no restrictions at all

[11:02] *** squashable6 left
[11:03] *** squashable6 joined
[11:05] <Geth_> ¦ rakudo: 18f3808e19 | (Elizabeth Mattijsen)++ | 6 files

[11:05] <Geth_> ¦ rakudo: Rename multislice related files

[11:05] <Geth_> ¦ rakudo: 

[11:05] <Geth_> ¦ rakudo: - for consistency and thus easier maintenance

[11:05] <Geth_> ¦ rakudo: - does *not* change *any* functionality whatsoever

[11:05] <Geth_> ¦ rakudo: - yet preserves git blame history

[11:05] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/18f3808e19

[11:18] <Geth_> ¦ rakudo/master: 5 commits pushed by (Elizabeth Mattijsen)++

[11:18] <Geth_> ¦ rakudo/master: 4b278bcb88 | Split history src/core.c/hash_slice.pm6 to src/core.c/hash_multislice.pm6

[11:18] <Geth_> ¦ rakudo/master: f9b3f9257b | Split history src/core.c/hash_slice.pm6 to src/core.c/hash_multislice.pm6

[11:18] <Geth_> ¦ rakudo/master: b1ec2489e7 | Split history src/core.c/hash_slice.pm6 to src/core.c/hash_multislice.pm6

[11:18] <Geth_> ¦ rakudo/master: d6e94aed87 | Split history src/core.c/hash_slice.pm6 to src/core.c/hash_multislice.pm6

[11:18] <Geth_> ¦ rakudo/master: 564faa647b | Split off hash_multislice.pm6

[11:18] <Geth_> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/18f3808e19f3...564faa647bc2

[11:51] <AlexDaniel`> nine: not sure what you mean exactly, so just in case: that error message isn't related to the restricted setting, and I think it stopped working since v6.d was released

[11:51] <AlexDaniel`> but, it being a blacklist, it never really worked anyway

[12:03] <nine> AlexDaniel`: there was no sarcasm there. I really meant that the restricted setting doesn't restrict anything anymore at all. And even if it worked as designed, it still wouldn't cover simple cases like "somefile".IO.open IIUC

[12:04] <AlexDaniel`> ok :)

[13:02] <Geth_> ¦ rakudo: 93503c24b4 | (Elizabeth Mattijsen)++ | src/core.e/hash_multislice.pm6

[13:02] <Geth_> ¦ rakudo: Make %h{;} slices with * non-assignable

[13:02] <Geth_> ¦ rakudo: 

[13:02] <Geth_> ¦ rakudo: Because a slice with * at any level, is non-deterministic.  Making it

[13:02] <Geth_> ¦ rakudo: die with an appropriate error message like:

[13:02] <Geth_> ¦ rakudo: 

[13:02] <Geth_> ¦ rakudo:     $ raku -e 'my %h; %h{*} = 42'

[13:02] <Geth_> ¦ rakudo:     Cannot assign to *, as the order of keys is non-deterministic

[13:02] <Geth_> ¦ rakudo: <…commit message has 5 more lines…>

[13:02] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/93503c24b4

[13:03] <Geth_> ¦ roast: 675e0ab065 | (Elizabeth Mattijsen)++ | S32-hash/multislice-6e.t

[13:03] <Geth_> ¦ roast: Adapt test to non-assignability of * slices

[13:03] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/675e0ab065

[13:04] <lizmat> afk for a few hours&

[13:21] *** sena_kun joined
[13:23] *** Altai-man left
[14:20] <Geth_> ¦ nqp: 6049b3806b | Coke++ | docs/ops.markdown

[14:20] <Geth_> ¦ nqp: Document isconcrete_nd

[14:20] <Geth_> ¦ nqp: 

[14:20] <Geth_> ¦ nqp: Pulled from IRC conversation of lizmat++ nine++

[14:20] <Geth_> ¦ nqp: review: https://github.com/Raku/nqp/commit/6049b3806b

[14:37] *** domidumont left
[14:45] *** squashable6 left
[14:46] *** squashable6 joined
[14:51] *** [TuxCM] left
[14:54] <[Tux]> Rakudo version 2020.09-57-g93503c24b - MoarVM version 2020.09-10-g8d7a80d55

[14:54] <[Tux]> csv-test-xs-20      0.387 -  0.391

[14:54] <[Tux]> csv-ip5xs           0.815 -  0.864

[14:54] <[Tux]> test-t --race       0.860 -  0.902

[14:54] <[Tux]> test-t              1.866 -  1.896

[14:54] <[Tux]> test                7.502 -  7.814

[14:54] <[Tux]> csv-ip5xs-20        7.979 -  8.272

[14:54] <[Tux]> test-t-20 --race    8.763 -  9.295

[14:54] <[Tux]> csv-parser         27.862 - 30.659

[14:54] <[Tux]> test-t-20          31.589 - 32.380

[14:56] *** [TuxCM] joined
[14:56] *** domidumont joined
[15:15] <lizmat> [Coke]++

[15:31] *** jmerelo joined
[15:58] *** patrickb left
[16:17] *** MasterDuke joined
[16:18] *** domidumont left
[16:28] *** domidumont joined
[16:37] *** domidumont left
[16:50] *** finsternis joined
[16:51] *** domidumont joined
[17:09] *** domidumont left
[17:16] <Geth_> ¦ rakudo: b60772fa70 | (Elizabeth Mattijsen)++ | src/core.e/hash_multislice.pm6

[17:16] <Geth_> ¦ rakudo: Don't pass current dim around anymore with %h{;}

[17:16] <Geth_> ¦ rakudo: 

[17:16] <Geth_> ¦ rakudo: There's no need to pass it around, we just need a outside lexical

[17:16] <Geth_> ¦ rakudo: to remember where we are: saves 1 arg and 1 native int allocation

[17:16] <Geth_> ¦ rakudo: per recursion, makes it about 10% faster.

[17:16] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b60772fa70

[17:20] *** Altai-man joined
[17:23] *** sena_kun left
[17:24] <[Coke]> I agree with zoffix on https://github.com/Raku/nqp/issues/389 - I recommend we close this as a wontfix.

[17:28] <[Coke]> lizmat: https://github.com/Raku/nqp/issues/101 - ISTR you (et al.?) have done work to speed up JSON since 2013.

[17:29] <lizmat> [Coke]: I've worked on JSON::Fast a lot

[17:31] <MasterDuke> looks like method Numeric isn't docced for Match. the page has a method from Capture, but it does something different

[17:32] <MasterDuke> m: say \(1,2,3, apples => 2).Numeric; my $a = "abc123def456" ~~ /\d+/; dd $a.Numeric

[17:32] <camelia> rakudo-moar 85847d2f1: OUTPUT: «3␤123␤»

[17:33] <jmerelo> MasterDuke: can you please raise the issue?

[17:33] <tellable6> 2020-10-12T20:16:24Z #raku <melezhik> jmerelo: - see https://github.com/melezhik/RakuDist/blob/master/utils/queue-selected-modules.sh 

[17:33] <tellable6> 2020-10-12T20:18:18Z #raku <melezhik> JJMerelo: here is full CICD example with pulling RakuDist build status and waiting it finishes - https://github.com/melezhik/RakuDist/blob/master/docs/api.md#bash-automation-example

[17:33] <tellable6> 2020-10-12T20:19:21Z #raku <melezhik> JJMerelo: you basically give it a list of modules and run them all, RakuDist will place request in queue and start executing them one by one ... 

[17:33] <jmerelo> .tell melezhik thanks!

[17:33] <tellable6> jmerelo, I'll pass your message to melezhik

[17:35] <MasterDuke> sure

[17:38] *** Ven`` joined
[17:51] <jmerelo> MasterDuke: thanks!

[17:51] *** jmerelo left
[17:58] <Geth_> ¦ rakudo: 198f603043 | (Elizabeth Mattijsen)++ | src/core.e/hash_multislice.pm6

[17:58] <Geth_> ¦ rakudo: Optimize key creation in %h{;}:adverbs slices

[17:58] <Geth_> ¦ rakudo: 

[17:58] <Geth_> ¦ rakudo: - make the key list a visible lexical IterationBuffer

[17:58] <Geth_> ¦ rakudo: - don't need to pass current keys as a parameter anymore

[17:58] <Geth_> ¦ rakudo: - makes these slices about 25% faster

[17:58] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/198f603043

[20:02] *** dogbert17 joined
[20:19] *** Altai-man left
[20:27] *** ggoebel left
[20:29] *** ggoebel joined
[22:09] <[Coke]> m: use nqp: dd nqp::indexingoptimized

[22:09] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3use nqp7⏏5: dd nqp::indexingoptimized␤»

[22:09] <[Coke]> m: use nqp: dd nqp::indexingoptimized();

[22:09] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3use nqp7⏏5: dd nqp::indexingoptimized();␤»

[22:10] <[Coke]> nqp: nqp::say(nqp::indexingoptimized)

[22:10] <camelia> nqp-moarvm: OUTPUT: «Arg count 0 doesn't equal required operand count 2 for op 'indexingoptimized'␤   at gen/moar/stage2/QAST.nqp:1568  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/QAST.moarvm:compile_mastop)␤ from gen/moar/stage2/QAST.nqp:1781  (/home/camelia/rakudo-m-inst-2/sh…»

[22:10] <[Coke]> nqp: nqp::say(nqp::indexingoptimized("what"))

[22:10] <camelia> nqp-moarvm: OUTPUT: «what␤»

[22:10] <[Coke]> nqp: nqp::say(nqp::indexingoptimized("what","now"))

[22:10] <camelia> nqp-moarvm: OUTPUT: «now␤»

[22:10] <[Coke]> nqp: nqp::say(nqp::indexingoptimized("what","now","brown","cow"))

[22:10] <camelia> nqp-moarvm: OUTPUT: «Arg count 4 doesn't equal required operand count 2 for op 'indexingoptimized'␤   at gen/moar/stage2/QAST.nqp:1568  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/QAST.moarvm:compile_mastop)␤ from gen/moar/stage2/QAST.nqp:1781  (/home/camelia/rakudo-m-inst-2/sh…»

[22:11] <[Coke]> ... Could use some help documenting this op. Looks like at some point it's collapsing the strands in a Moar string object, but <shrugs vaguely>

[22:12] <[Coke]> ah. I can probably just lift the comment from the MoarVM source.

[22:12] <[Coke]> nqp: nqp::say(nqp::indexingoptimized("what","now","brown"))

[22:12] <camelia> nqp-moarvm: OUTPUT: «Arg count 3 doesn't equal required operand count 2 for op 'indexingoptimized'␤   at gen/moar/stage2/QAST.nqp:1568  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/QAST.moarvm:compile_mastop)␤ from gen/moar/stage2/QAST.nqp:1781  (/home/camelia/rakudo-m-inst-2/sh…»

[22:12] <[Coke]> unsure why it's allowing two args.

[22:13] <timotimo> [Coke]: indexingoptimized only takes one arg, but it also returns something, i believe?

[22:13] <timotimo> i wonder if it just takes the string register that holds the first string and overwrites it with the result

[22:23] *** patrickb joined
[22:33] <timotimo> [Coke]: collapsing the strands is supposed to make running regexes over strings faster, since access to the string will then be fewer data lookups

[22:41] *** Ven`` left
[23:06] *** patrickz joined
[23:10] *** patrickb left
[23:36] *** patrickz left
