[00:46] <vrurg> AlexDaniel: ^^ did it rebuild after my fix?

[00:46] <AlexDaniel> vrurg: I think so

[00:46] <vrurg> Good, thanks!

[01:13] *** lucasb left
[01:13] *** sena_kun joined
[01:15] *** Altai-man_ left
[02:13] *** Altai-man_ joined
[02:15] *** sena_kun left
[02:44] *** travis-ci joined
[02:44] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Streamline CU::RepositoryRegistry.setup-repositories

[02:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661295967 https://github.com/rakudo/rakudo/compare/6e95e1b0745a...6723d3ad0e01

[02:44] *** travis-ci left
[03:43] *** travis-ci joined
[03:43] <travis-ci> Rakudo build failed. Vadim Belman 'Merge pull request #3544 from vrurg/fix-perl6-aliases-install

[03:43] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661305164 https://github.com/rakudo/rakudo/compare/6723d3ad0e01...1fad174ca14d

[03:43] *** travis-ci left
[04:13] *** sena_kun joined
[04:15] *** Altai-man_ left
[04:43] *** travis-ci joined
[04:43] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Streamline CU::RepositoryRegistry.setup-repositories

[04:43] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661305881 https://github.com/rakudo/rakudo/compare/1fad174ca14d...24fd100da243

[04:43] *** travis-ci left
[06:13] *** Altai-man_ joined
[06:15] *** sena_kun left
[08:13] <Geth> ¦ rakudo: b3f7ad2fcd | (Stefan Seifert)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[08:13] <Geth> ¦ rakudo: Revert "Streamline CU::RepositoryRegistry.setup-repositories"

[08:13] <Geth> ¦ rakudo: 

[08:13] <Geth> ¦ rakudo: This reverts commit 24fd100da243067dbbbc8418fb2eee61cb2088f1.

[08:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b3f7ad2fcd

[08:13] <Geth> ¦ rakudo: c29a2bf013 | (Stefan Seifert)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[08:13] <Geth> ¦ rakudo: Revert "Streamline CU::RepositoryRegistry.setup-repositories"

[08:13] <Geth> ¦ rakudo: 

[08:13] <Geth> ¦ rakudo: This reverts commit 6723d3ad0e01a55921fece8d1e1adb06f448737a.

[08:13] <Geth> ¦ rakudo: 

[08:13] <Geth> ¦ rakudo: The change broke Inline::Perl5 with:

[08:13] <Geth> ¦ rakudo: No such method 'prefix' for invocant of type 'Capture'

[08:13] <Geth> ¦ rakudo:    at SETTING::src/core.c/Exception.pm6:62  (throw)

[08:13] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[08:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c29a2bf013

[08:14] <nine> Oh, Travis actually reported the same errors.

[08:14] *** sena_kun joined
[08:15] *** Altai-man_ left
[09:18] *** travis-ci joined
[09:18] <travis-ci> Rakudo build passed. Stefan Seifert 'Revert "Streamline CU::RepositoryRegistry.setup-repositories"

[09:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661424415 https://github.com/rakudo/rakudo/compare/24fd100da243...c29a2bf013d2

[09:18] *** travis-ci left
[09:33] <lizmat> Files=1305, Tests=111214, 207 wallclock secs (29.82 usr  8.29 sys + 2901.94 cusr 268.81 csys = 3208.86 CPU)

[09:33] <lizmat> nine: weird, it passed all tests here, including the Inline::Perl5 tests

[09:34] <nine> lizmat: it passed rakudo's make test on the OBS (which flaged Inline::Perl5 failing) as well. Very odd indeed

[09:36] <lizmat> even odder, in that code, there is no method call to a method call "prefix" at all ???

[09:36] <lizmat> ah, but there is later

[09:40] *** domidumont joined
[10:04] <Tux__> Rakudo version 2020.02.1-153-gc29a2bf01 - MoarVM version 2020.02.1-42-g6b31c93c8

[10:04] <Tux__> csv-test-xs-20      0.363 -  0.373

[10:04] <Tux__> csv-ip5xs           0.693 -  0.701

[10:04] <Tux__> test-t --race       0.838 -  0.847

[10:04] <Tux__> test-t              1.851 -  1.896

[10:04] <Tux__> csv-ip5xs-20        6.245 -  6.282

[10:04] <Tux__> test                7.941 -  8.501

[10:04] <Tux__> test-t-20 --race    8.664 -  9.105

[10:04] <Tux__> csv-parser         24.564 - 25.428

[10:04] <Tux__> test-t-20          31.327 - 31.531

[10:12] *** Altai-man_ joined
[10:15] *** sena_kun left
[10:19] <lizmat> in any case, it looks like my changes reduced spectest by 1 wallclock and 16 CPU seconds

[10:19] <lizmat> which makes sense, as it runs on a 16 core machine  :)

[10:39] <lizmat> nine: do you have a test-case for the Inline::Perl5 failures ?

[10:39] <lizmat> I can't reproduce anything locally  :-(

[10:40] *** domidumont left
[10:44] *** MasterDuke left
[10:54] <lizmat> nine: found it

[10:54] <lizmat> well, a way to reproduce the error

[11:27] <lizmat> nine: some progress: turns out that custom-lib somehow contains \(foo) instead of foo for 2 of the 4 entries (home and site)

[11:39] <lizmat> looks like it was a stupid typo  :-(

[11:45] <nine> Well at least those are usually easily fixable :)

[11:46] <lizmat> well, it changed the error :-(

[11:46] <lizmat> An exception occurred while evaluating a constant

[11:46] <lizmat> at /Users/liz/Github/Inline-Perl5/lib/Inline/Perl5/Interpreter.pm6 (Inline::Perl5::Interpreter):12

[11:53] <nine> I'd guess that it couldn't access the bundled library

[11:53] <nine> i.e. repository-for-name still not working correctly

[11:57] <lizmat> hmmm... Inline::Perl5 tests fail for me on master as well ??

[11:57] <lizmat> maybe I should follow instructions  :-)

[11:58] <lizmat> ok, tests are clean on master when I follow instructions  :-)

[12:01] <lizmat> tests also clean with fix

[12:10] <Geth> ¦ rakudo: b07224f684 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[12:10] <Geth> ¦ rakudo: Revert "Revert "Streamline CU::RepositoryRegistry.setup-repositories""

[12:10] <Geth> ¦ rakudo: 

[12:10] <Geth> ¦ rakudo: This reverts commit c29a2bf013d20d000779cfefcebb2f72f8402935.

[12:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b07224f684

[12:10] <Geth> ¦ rakudo: 7de42d4b93 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[12:10] <Geth> ¦ rakudo: Revert "Revert "Streamline CU::RepositoryRegistry.setup-repositories""

[12:10] <Geth> ¦ rakudo: 

[12:10] <Geth> ¦ rakudo: This reverts commit b3f7ad2fcda5334b1b5807fa02994ba1ef6fc82e.

[12:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7de42d4b93

[12:10] <Geth> ¦ rakudo: 7b5e14345f | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[12:10] <Geth> ¦ rakudo: Fix stupid typo that broke NativeCall

[12:10] <Geth> ¦ rakudo: 

[12:10] <Geth> ¦ rakudo: And indirectly Inline::Perl5

[12:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7b5e14345f

[12:13] *** sena_kun joined
[12:15] *** Altai-man_ left
[12:25] <lizmat> https://github.com/rakudo/rakudo/issues/3546 

[12:37] *** Xliff joined
[12:38] <Xliff> \o

[12:38] <Xliff> --stagestats is broken? I take it folks are aware?

[12:38] <lizmat> gist ?

[12:39] <Xliff> https://gist.github.com/Xliff/217a6e7433312e117752334678ae1bf7

[12:40] <Geth> ¦ rakudo: 68cadd7901 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[12:40] <Geth> ¦ rakudo: Improve readability of setting up custom-lib

[12:40] <Geth> ¦ rakudo: 

[12:40] <Geth> ¦ rakudo: No functional changes intended

[12:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/68cadd7901

[12:50] <Xliff> lizmat: Rakudo::Internals.STAGESTATS eq '--stagestats' in PrecompilationRepository.pm6#L45

[12:51] * lizmat looks

[12:52] <Xliff> Updating gist.

[12:52] <Xliff> Gist updated

[12:53] <sena_kun> seems like debug leftover

[12:54] <Xliff> "whenever $proc.stderr.lines { note ("    $_"); $*ERR.flush }" # Maybe?

[12:56] <lizmat> I'm not sure I understand the problem

[12:56] <sena_kun> lizmat, I think repeated "--stagestats" lines to blame in the gist?

[12:58] * lizmat is unclear on how to reproduce the issue

[12:59] <Xliff> lizmat: Attempt to precompile a scripts with nested dependencies.

[12:59] <Xliff> And those dependencies also need to require a recompile.

[13:46] <lizmat> Representation for CompUnit::Repository must be composed before it can be serialized

[13:46] <lizmat> how can we get such an error *after* the settings have been built ?

[13:47] <lizmat> ah... it's a role

[13:58] <Geth> ¦ rakudo: f980898f71 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[13:58] <Geth> ¦ rakudo: Streamline CU::RepositoryRegistry.use-repository a bit

[13:58] <Geth> ¦ rakudo: 

[13:58] <Geth> ¦ rakudo: - don't use return when we don't need to

[13:58] <Geth> ¦ rakudo: - don't use named parameters or default when we don't need to

[13:58] <Geth> ¦ rakudo: - add some extra type checking

[13:58] <Geth> ¦ rakudo: - use binding where possible

[13:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f980898f71

[14:12] *** Altai-man_ joined
[14:15] *** sena_kun left
[14:28] *** pmurias joined
[15:05] *** domidumont joined
[15:06] <Kaeipi> can someone review https://github.com/rakudo/rakudo/pull/3451 and https://github.com/rakudo/rakudo/pull/3491 ?

[15:09] *** Xliff left
[15:09] *** travis-ci joined
[15:09] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Streamline CU::RepositoryRegistry.use-repository a bit

[15:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661542168 https://github.com/rakudo/rakudo/compare/68cadd79012c...f980898f71af

[15:09] *** travis-ci left
[15:10] <lizmat> restarted the one failing job

[15:11] <lizmat> Kaeipi: sorry, am recusing myself on account of insufficient insight

[15:11] <lizmat> feels to me jnthn should have a look at that

[15:12] <Kaeipi> aight

[15:26] *** pmurias left
[15:28] *** pmurias joined
[15:43] *** pmurias left
[16:05] <Geth> ¦ rakudo: bec2ac4ce5 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[16:05] <Geth> ¦ rakudo: Change a number of if $foo -> \bar cases

[16:05] <Geth> ¦ rakudo: 

[16:05] <Geth> ¦ rakudo: Since the if $foo -> \bar case atm is 10x slower than the equivalent

[16:05] <Geth> ¦ rakudo: my \bar := $foo; if $foo

[16:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bec2ac4ce5

[16:13] *** sena_kun joined
[16:15] *** Altai-man_ left
[16:16] *** domidumont left
[16:22] <Geth> ¦ nqp: 96162898bf | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[16:22] <Geth> ¦ nqp: Bump Moar to get libuv upgrade

[16:22] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/96162898bf

[16:37] <Geth> ¦ rakudo: a5017544fd | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[16:37] <Geth> ¦ rakudo: Bump NQP to get latest libuv support

[16:37] <Geth> ¦ rakudo: 

[16:37] <Geth> ¦ rakudo: make test, make spectest and Inline::Perl5's make test are clean

[16:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a5017544fd

[16:52] <AlexDaniel> jnthn: how is this possible :D https://github.com/rakudo/rakudo/issues/3547

[16:53] <AlexDaniel> this is precisely what I expected react block to prevent, uh!

[16:53] <jnthn> AlexDaniel: Because there's a special case for a single-whenever react and apparently it's not doing the right thing

[16:53] <AlexDaniel> oooh

[16:54] <AlexDaniel> yep

[16:54] <AlexDaniel> once another whenever is added it's back to normal

[16:54] <lizmat> jnthn: so, if I let signal do a .serialize on the Supply it returns, rypervenche's example works as expected

[16:54] <AlexDaniel> thanks, I can pick up my jaw from the floor now :)

[16:54] <rypervenche> I probably should have added the word "single" to that...

[16:54] <jnthn> lizmat: I don't think that's the place to fix it.

[16:54] <lizmat> ok

[16:55] <lizmat> git reset --hard   :-)

[16:55] <lizmat> afk for dinner&

[16:56] <AlexDaniel> rypervenche: yeah, if you knew that :) I was like :-O

[16:56] <jnthn> and I used to know where to look, but somebody decided Supply.pm6 was too long, I guess

[16:57] <jnthn> ah, or maybe it's the 6.d changes

[16:57] <jnthn> Anyway, start around https://github.com/rakudo/rakudo/blob/e9351cbaa961c4d1e4ef8b4cb52418d55766a8d6/src/core.d/await.pm6#L101

[16:57] <AlexDaniel> we can bisect it if you want

[16:58] <jnthn> Doesn't matter; I don't really mind things moving :)

[16:58] <jnthn> Just my mental map of where things are in Rakudo used to be pretty accurate, and these days it isn't. Maybe I just don't hack on it enough. :)

[17:00] <AlexDaniel> yeah, that's software :(

[17:00] <AlexDaniel> kinda great to look away, come back and see a lot of progress

[17:00] <AlexDaniel> but it always takes time to catch up

[17:07] <AlexDaniel> 6c: start for ^3 { sleep 0.3; run ‘kill’, -SIGINT, $*PID }; my $a = -1; react whenever signal(SIGINT) { $a++; sleep 1.5; exit $a; }

[17:07] <AlexDaniel> that's pretty cool actually

[17:07] <AlexDaniel> I like puzzles like this :)

[17:10] <jnthn> :)

[17:10] <jnthn> I'll have a look at fixing it in a bit

[17:12] <sena_kun> jnthn, don't want to be pushy, but I humbly suggest network PRs want attention whenever available.

[17:12] <committable6> AlexDaniel, https://gist.github.com/5cdc2e41353a458aca6996219a74a908

[17:12] <AlexDaniel> sena_kun: did you say `whenever` needs attention? :)

[17:12] <AlexDaniel> :P

[17:13] <AlexDaniel> wow what

[17:13] <sena_kun> AlexDaniel, I think concurrency has mixed up words order. :P

[17:13] <AlexDaniel> c: HEAD start for ^3 { sleep 0.3; run ‘kill’, -SIGINT, $*PID }; my $a = -1; react whenever signal(SIGINT) { $a++; sleep 1.5; exit $a; }

[17:13] <committable6> AlexDaniel, ¦HEAD(a501754): « «exit code = 2»»

[17:14] <AlexDaniel> c: 2018.06 start for ^3 { sleep 0.3; run ‘kill’, -SIGINT, $*PID }; my $a = -1; react whenever signal(SIGINT) { $a++; sleep 1.5; exit $a; }

[17:14] <committable6> AlexDaniel, ¦2018.06: «»

[17:14] <AlexDaniel> why didn't 6c: command work? Weird

[17:14] <AlexDaniel> c: 2019.01 start for ^3 { sleep 0.3; run ‘kill’, -SIGINT, $*PID }; my $a = -1; react whenever signal(SIGINT) { $a++; sleep 1.5; exit $a; }

[17:14] <committable6> AlexDaniel, ¦2019.01: «Cannot find this revision (did you mean “2020.01”?)»

[17:14] <AlexDaniel> c: 2019.03 start for ^3 { sleep 0.3; run ‘kill’, -SIGINT, $*PID }; my $a = -1; react whenever signal(SIGINT) { $a++; sleep 1.5; exit $a; }

[17:14] <committable6> AlexDaniel, ¦2019.03: « «exit code = 2»»

[17:15] <AlexDaniel> bisect: old=2018.06 new=2019.03 start for ^3 { sleep 0.3; run ‘kill’, -SIGINT, $*PID }; my $a = -1; react whenever signal(SIGINT) { $a++; sleep 1.5; exit $a; }

[17:15] <bisectable6> AlexDaniel, Bisecting by exit code (old=2018.06 new=2019.03). Old exit code: 0

[17:16] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/8d260cc32746b37013d48972b0bc59f4

[17:16] <bisectable6> AlexDaniel, (2018-10-27) https://github.com/rakudo/rakudo/commit/46ef0ea08cae96db25c7b5a9543ba696034408c8

[17:19] <AlexDaniel> OK it was a bit trickier:

[17:19] <AlexDaniel> bisect: old=2018.01 new=2019.03 use v6.d.PREVIEW; start for ^3 { sleep 0.3; run ‘kill’, -SIGINT, $*PID }; my $a = -1; react whenever signal(SIGINT) { $a++; sleep 1.5; exit $a; }

[17:20] <bisectable6> AlexDaniel, Bisecting by exit code (old=2018.01 new=2019.03). Old exit code: 0

[17:20] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/2c75a2232185fb225bf12b8493ceeb1e

[17:20] <bisectable6> AlexDaniel, (2018-03-06) https://github.com/rakudo/rakudo/commit/db010b847a2496ffd61e7ec0eb1e82482081c9ed

[17:29] <Geth> ¦ rakudo: jnthn self-assigned react/whenever is not serialized by default https://github.com/rakudo/rakudo/issues/3547

[17:30] *** travis-ci joined
[17:30] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Change a number of if $foo -> \bar cases

[17:30] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661592699 https://github.com/rakudo/rakudo/compare/f980898f71af...bec2ac4ce554

[17:30] *** travis-ci left
[17:56] <Geth> ¦ rakudo: 8aa25bfbba | (Jonathan Worthington)++ | src/core.c/signals.pm6

[17:56] <Geth> ¦ rakudo: The signal Supply should not claim sanity

[17:56] <Geth> ¦ rakudo: 

[17:56] <Geth> ¦ rakudo: That implies that it is serial (since sanity is a stronger promise than

[17:56] <Geth> ¦ rakudo: serialized). However, it's not serial. This meant that we could end up

[17:56] <Geth> ¦ rakudo: with concurrent execution in a situation like:

[17:56] <Geth> ¦ rakudo: 

[17:56] <Geth> ¦ rakudo:     react whenever signal(SIGINT) { #`(long running stuff) }

[17:56] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[17:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8aa25bfbba

[18:00] <AlexDaniel> jnthn: you can take the test from the bisectable command above, as long as you can run a separate process

[18:00] <AlexDaniel> just check the exit code, it'll be 0 if everything is alright and something else otherwise

[18:01] <AlexDaniel> that's also if you can afford to wait 1.5s :)

[18:02] <Geth> ¦ rakudo: jnthn self-unassigned react/whenever is not serialized by default https://github.com/rakudo/rakudo/issues/3547

[18:03] <jnthn> Plus it needs a "will it run on this platform" check, given the `run` it does...

[18:11] <Geth> ¦ rakudo: fc0f78d5cb | (Ben Davies)++ | 2 files

[18:11] <Geth> ¦ rakudo: Make Test's &cmp-ok work with objects without support for methods

[18:11] <Geth> ¦ rakudo: 

[18:11] <Geth> ¦ rakudo: It's possible to make objects that don't have support methods when

[18:11] <Geth> ¦ rakudo: working with custom HOWs. Though you wouldn't ordinarily have types that

[18:11] <Geth> ¦ rakudo: don't support methods, it's nice to be able to test HOWs before they do

[18:11] <Geth> ¦ rakudo: have it.

[18:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fc0f78d5cb

[18:13] *** Altai-man_ joined
[18:15] *** sena_kun left
[18:25] *** cfa joined
[18:25] <cfa> morning all

[18:25] <cfa> it looks like i can no longer push to Raku/doc (nee perl6/doc); i'm still in the old perl6 team but do i need to be added to a new one?

[18:27] <Altai-man_> cfa, certainly. what's your github nickname?

[18:27] <cfa> cfa :)

[18:31] <Altai-man_> it seems I don't have rights, but I've sent an invite to send an invite and someone will look at it. :)

[18:31] <cfa> thanks

[18:32] <cfa> i'll do a pr for now

[18:32] <Altai-man_> yes, that'd be nice

[18:36] <cfa> aha, i see AlexDaniel sent me a couple of invites in early jan; those links unfortunately no longer work

[18:36] <cfa> and one from jj for doc specifically that's expired

[18:37] <cfa> i'm not sure how easy it is for those to be resent

[18:52] *** ufobat_ joined
[18:56] *** ufobat__ left
[19:20] <Kaeipi> bisectable6, proto sub foo(|) {*}; multi sub foo(Int:D $bar) { $bar }; multi sub foo(**@bar) { @bar }; say foo 1

[19:20] <bisectable6> Kaeipi, On both starting points (old=2015.12 new=fc0f78d) the exit code is 0 and the output is identical as well

[19:20] <bisectable6> Kaeipi, Output on both points: «1␤»

[19:21] <Kaeipi> oh, never tested with one argument lmao

[19:26] <Geth> ¦ rakudo: d66068c189 | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[19:26] <Geth> ¦ rakudo: Fix stagestats mixup spotted by Xliff++

[19:26] <Geth> ¦ rakudo: 

[19:26] <Geth> ¦ rakudo: See https://gist.github.com/Xliff/217a6e7433312e117752334678ae1bf7

[19:26] <Geth> ¦ rakudo: for more info.

[19:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d66068c189

[19:27] <Geth> ¦ rakudo: be9c139fd4 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[19:27] <Geth> ¦ rakudo: Code-gen `-ne` as a loop, not a map call

[19:27] <Geth> ¦ rakudo: 

[19:27] <Geth> ¦ rakudo: This was an initial attempt to help with #3545. It turns out this isn't

[19:27] <Geth> ¦ rakudo: the biggest cost, however this is retained as it helps a tiny bit.

[19:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/be9c139fd4

[19:28] <Geth> ¦ rakudo: 5cad8feee4 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[19:28] <Geth> ¦ rakudo: Produce better copy for `$foo is copy`

[19:28] <linkable6> RAKUDO#3545 [open]: https://github.com/rakudo/rakudo/issues/3545 "raku -n" is almost two times slower than manual iteration

[19:28] <Geth> ¦ rakudo: 

[19:28] <Geth> ¦ rakudo: We were doing it in a way that did not use the spesh assignment plugin

[19:28] <Geth> ¦ rakudo: on MoarVM. That further cost other optimization opportunities, for

[19:28] <Geth> ¦ rakudo: example scalar replacement of the Scalar container.

[19:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5cad8feee4

[19:35] <Geth> ¦ rakudo: 31197cd3bb | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[19:35] <Geth> ¦ rakudo: Publish dependencies in a single print

[19:35] <Geth> ¦ rakudo: 

[19:35] <Geth> ¦ rakudo: - avoids the overhead of having to repeatedly look up $*OUT

[19:35] <Geth> ¦ rakudo: - avoids any issues with partial publishing

[19:35] <Geth> ¦ rakudo: - should be quite noticeable on files that have 100's of dependencies

[19:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/31197cd3bb

[19:50] *** travis-ci joined
[19:50] <travis-ci> Rakudo build passed. Jonathan Worthington 'The signal Supply should not claim sanity

[19:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661636465 https://github.com/rakudo/rakudo/compare/a5017544fd78...8aa25bfbbaad

[19:50] *** travis-ci left
[20:01] <lizmat> nine: in CU::PrecompilationRepository.precompile we check for "$io.e and $io.s"

[20:02] <lizmat> but isn't that a race condition?  Could it not be that the other process is *not* ready writing, while this process thinks it is all hunky dory ?

[20:05] <nine> lizmat: at that point the precomp store is already locked (by the self.store.destination call)

[20:06] <lizmat> ah, ok, that's unclear from that piece of code, will add a comment  :-)

[20:07] <nine> Yeah, that's been bothering me pretty much since I wrote that code. The .destination call is the obviously correct place to take the lock, but it's not at all visible.

[20:13] *** sena_kun joined
[20:15] *** Altai-man_ left
[20:33] <lizmat> nine: have you considered caching CHECKSUM ?

[20:33] <lizmat> or is the chance that a single process would need to checksum the same file more than once minimal ?

[20:41] <lizmat> nine: is there a reason we don't put a LEAVE block in precompile that will do a "LEAVE self.store.unlock if $io" ?

[20:44] *** MasterDuke joined
[20:46] <MasterDuke> lizmat: oops, i saw that typo yesterday and thought i commented on the original commit, but i must have closed the tab before actually clicking the button. oh well, you found it quick enough regardless

[20:47] <lizmat> MasterDuke++  # I saw your comment *after* I fixed it  :-)

[20:48] <MasterDuke> oh, i did actually comment? i looked and didn't see it on the commit

[20:50] <lizmat> I found it in a mailbox, not sure which one anymore

[20:51] <lizmat> it was a comment on https://github.com/rakudo/rakudo/commit/24fd100da243067dbbbc8418fb2eee61cb2088f1#commitcomment-37779408

[20:52] <MasterDuke> huh

[20:55] <MasterDuke> pmurias: congrats! going to be able to work on the truffle backend with your 20%?

[20:55] <tellable6> MasterDuke, I'll pass your message to pmurias

[21:07] *** travis-ci joined
[21:07] <travis-ci> Rakudo build passed. Ben Davies 'Make Test's &cmp-ok work with objects without support for methods

[21:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661642107 https://github.com/rakudo/rakudo/compare/8aa25bfbbaad...fc0f78d5cba1

[21:07] *** travis-ci left
[21:16] <AlexDaniel> cfa: do you have autosubscribe turned on or off?

[21:17] <AlexDaniel> cfa: see https://github.com/Raku/please-turn-off-the-autowatch-feature

[21:25] <cfa> AlexDaniel: looking

[21:26] <cfa> done

[21:27] <cfa> and joined

[21:27] <cfa> is this the only invite i need?

[21:28] <cfa> (i had three before)

[21:40] <nine> lizmat: I don't see a way how CHECKSUM would be run multiple times in normal circumstances

[21:40] <lizmat> nine:ok

[21:40] <nine> lizmat: the reason was simply that I wasn't aware of LEAVE blocks back then. Xliff actually put them in in his parallelization branch

[21:41] <lizmat> ok, then I will put in a LEAVE now

[21:57] <Geth> ¦ rakudo: 2899d737ec | (Elizabeth Mattijsen)++ | src/core.c/CompUnit/PrecompilationRepository.pm6

[21:57] <Geth> ¦ rakudo: Abstract already compiled logic into private method

[21:57] <Geth> ¦ rakudo: 

[21:57] <Geth> ¦ rakudo: - to allow for better readability

[21:57] <Geth> ¦ rakudo: - and other future optimizations

[21:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2899d737ec

[21:57] <Geth> ¦ rakudo: 76c20d28a0 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.pm6

[21:57] <Geth> ¦ rakudo: Remove Failures from R:I:FILETEST methods

[21:57] <Geth> ¦ rakudo: 

[21:57] <Geth> ¦ rakudo: Should the associated nqp:: op give a strange error value, the resulting

[21:57] <Geth> ¦ rakudo: Failure would be eaten by the IO::Path.letter methods.  So instead of

[21:57] <Geth> ¦ rakudo: wrapping these strange events in a Failure, we just throw the exception

[21:58] <Geth> ¦ rakudo: to make sure it will not go unnoticed.

[21:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/76c20d28a0

[22:13] *** Altai-man_ joined
[22:15] *** sena_kun left
[22:28] <lizmat> nine: re io.e && io.s test  if we're sure the other process finished writing the file, isn't the io.s test superfluous ?

[23:15] <Geth> ¦ rakudo: 355b520bf7 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[23:15] <Geth> ¦ rakudo: Make all IO::Path.letter methods a few percent faster

[23:15] <Geth> ¦ rakudo: 

[23:15] <Geth> ¦ rakudo: - prevent HLLizing if not needed

[23:15] <Geth> ¦ rakudo: - move failure creating into private sub to reduce code size

[23:15] <Geth> ¦ rakudo: - use nqp::ifnull in abspath creation, instead of //=

[23:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/355b520bf7

[23:15] <lizmat> and that concludes my hacking for today&

[23:35] <AlexDaniel> cfa: should be correct now

[23:38] <AlexDaniel> I have also synced the userlist for raku-community-modules

[23:45] <sjn> AlexDaniel: what's "Raku Community Modules"?

[23:45] <AlexDaniel> I don't know

[23:45] <sjn> ok, so you don't know what you are inviting people to? o_O

[23:45] <AlexDaniel> sjn: it's a separate org for… stuff

[23:46] <AlexDaniel> I'm not sure if people are encouraged to put their modules there or not

[23:46] <sjn> hm

[23:46] <AlexDaniel> at some point it was decided that it's probably better if a module has a proper maintainer

[23:46] <AlexDaniel> so now it says “Module Adoption Center”

[23:47] <sjn> If I'd speculate freely, I'd guess "an organization where member devs are free to fix and improve all member repositories"

[23:48] <sjn> something like that would at least make some sense...

[23:48] <AlexDaniel> yeah

[23:48] <AlexDaniel> sjn: but I think we need a maintainer for that org…

[23:49] <AlexDaniel> it's funny, yeah

[23:49] <sjn> maybe those of you who are listed as owners can find such a person? :)

[23:49] * sjn sees 12 people who are listed as owners

[23:49] <sjn> https://github.com/orgs/raku-community-modules/people?query=role%3Aowner

[23:50] <AlexDaniel> all but two are set to Private :)

[23:50] <japhb> IIRC the original purpose was to make sure that when someone left the community or was otherwise no longer able to maintain their modules, that the community could adopt them and prevent abandonware

[23:50] <AlexDaniel> interesting, github now lists Raku and Perl 6 as separate languages?

[23:51] <sjn> yay to AlexDaniel++ & ugexe++ :-D

[23:51] <AlexDaniel> japhb: yeah, that's cool, but then what?

[23:51] <AlexDaniel> I mean, that part of the problem is solved

[23:51] <AlexDaniel> but what should happen with these modules afterwards

[23:51] <japhb> No argument, just adding a little historical info

[23:51] <japhb> (I wasn't part of that project, just remembering it.)

[23:53] <sjn> AlexDaniel: I think it would be a good starting point to take inspiration from "The Lancaster Consensus" document (which is the current policy for CPAN and PAUSE): https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md#flagging-abandoned-modules-and-modules-requesting-help

[23:55] <sjn> (this would be an extremely useful discussion to have at the PTS (or raku equivalent, if that's needed)

[23:56] <sjn> I can imagine a bunch of community banners on modules.raku.org and/or metacpan.org with texts like "Want to join an Open Source project? Adopt a module!"

[23:58] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Abandoned modules, deceased authors, etc. (Raku Community Modules) https://github.com/Raku/problem-solving/issues/168

[23:59] *** travis-ci joined
[23:59] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Publish dependencies in a single print

[23:59] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/661674249 https://github.com/rakudo/rakudo/compare/5cad8feee4e3...31197cd3bbc9

[23:59] *** travis-ci left
[23:59] <AlexDaniel> sjn: https://github.com/Raku/problem-solving/issues/168

