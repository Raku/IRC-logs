[01:05] <[Coke]> if I were to guess that coerce_iu coerced an int to an unsigned int, would I be close? (in moarvm it actually seems to be spesh related)

[01:14] <[Coke]> dd: Int.How

[01:14] <tellable6> [Coke], I'll pass your message to dd

[01:14] <[Coke]> m: dd Int.How

[01:14] <camelia> rakudo-moar 85847d2f1: OUTPUT: «No such method 'How' for invocant of type 'Int'.  Did you mean 'HOW'?␤  in block <unit> at <tmp> line 1␤␤»

[01:14] <[Coke]> m: dd Int.^HOW

[01:14] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use .^ on a non-identifier method call␤at <tmp>:1␤------> 3dd Int.^HOW7⏏5<EOL>␤    expecting any of:␤        method arguments␤»

[01:14] <[Coke]> m: dd Int.HOW

[01:14] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Perl6::Metamodel::ClassHOW.new␤»

[01:15] <[Coke]> (sorry that took 3 tries) does renaming that to Raku have a ticket?

[01:26] <[Coke]> would be great if someone could document knowhow and knowhowattr opcodes.

[01:44] <Geth> ¦ nqp/master: 5 commits pushed by Coke++

[01:44] <Geth> ¦ nqp/master: 31f29d06e6 | improve names, remove useless blocks

[01:44] <Geth> ¦ nqp/master: dbef4f8950 | pull opcode filename into top level var

[01:44] <Geth> ¦ nqp/master: 0c3517181f | Document _nd variants

[01:44] <Geth> ¦ nqp/master: 56b8ddad87 | Document bindkey_o

[01:44] <Geth> ¦ nqp/master: 32e8fe73ca | Document tryfindmethod

[01:44] <Geth> ¦ nqp/master: review: https://github.com/Raku/nqp/compare/0ffba885f362...32e8fe73cacd

[01:45] <[Coke]> down to 217 failures.

[01:45] <[Coke]> if you do getattrref we get 4 for the price of 1!

[01:46] <[Coke]> also captureposarg is 4 for 1.

[01:47] <[Coke]> .tell bartolin there are some jvm specific opcodes at https://gist.github.com/coke/f87ab505c6cb825db51afcb5cb6a8990 like "attrhintfor" that could use some dos.

[01:47] <tellable6> [Coke], I'll pass your message to bartolin

[01:48] <[Coke]> .tell pmurias there are some js specific opcodes at https://gist.github.com/coke/f87ab505c6cb825db51afcb5cb6a8990 like "attrhintfor" that could use some docs.

[01:48] <tellable6> [Coke], I'll pass your message to pmurias

[01:51] <[Coke]> .tell pmurius I mean like asyncreadbyte

[01:51] <tellable6> [Coke], I haven't seen pmurius around, did you mean pmurias?

[01:52] <[Coke]> .tell pmurias I mean like asyncreadbyte

[01:52] <tellable6> [Coke], I'll pass your message to pmurias

[01:58] <Geth> ¦ nqp: ae3935dd86 | Coke++ | docs/ops.markdown

[01:58] <Geth> ¦ nqp: fix lstat_time's doc entry

[01:58] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/ae3935dd86

[02:00] <Geth> ¦ nqp: e00848c102 | Coke++ | t/docs/opcodes.t

[02:00] <Geth> ¦ nqp: skip unless_i, not exposed to users

[02:00] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/e00848c102

[02:09] *** MasterDuke left
[02:15] <[Coke]> 215

[02:19] <Geth> ¦ nqp: 973c975d12 | Coke++ | docs/bootstrapping.pod

[02:19] <Geth> ¦ nqp: Fix broken IRC log reference

[02:19] <Geth> ¦ nqp: 

[02:19] <Geth> ¦ nqp: Closes #635

[02:19] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/973c975d12

[02:19] <linkable6> NQP#635 [closed]: https://github.com/Raku/nqp/issues/635 IRC log ref in file "docs/bootstrapping.pod" is invalid

[02:40] *** lucasb left
[03:18] *** travis-ci joined
[03:18] <travis-ci> NQP build passed. Coke 'Fix broken IRC log reference

[03:18] <travis-ci> https://travis-ci.org/Raku/nqp/builds/739160800 https://github.com/Raku/nqp/compare/e00848c102a3...973c975d1266

[03:18] *** travis-ci left
[06:53] *** Altai-man joined
[07:37] *** MasterDuke joined
[08:08] *** sena_kun joined
[08:10] *** Altai-man left
[08:38] *** domidumont joined
[08:40] <Geth> ¦ roast: nwc10++ created pull request #693: :enc(utf16) assumes host byte order if there is no BOM, so test accordingly.

[08:40] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/693

[09:11] *** frost-lab joined
[10:41] <MasterDuke> m: my @a = ^1_000; my @b; my $s = now; @b = @a.head(*-1) for ^10_000; say now - $s; say @b.head, @b.tail

[10:42] <camelia> rakudo-moar 85847d2f1: OUTPUT: «9.72548888␤0998␤»

[10:42] <MasterDuke> m: use nqp; my @a = ^1_000; my $a := nqp::getattr(@a, List, q|$!reified|); my $b; my $s = now; $b = nqp::slice($a, 0, -2) for ^10_000; say now - $s; say $b.head, $b.tail

[10:42] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.0732284␤0998␤»

[10:42] <MasterDuke> ^^^ bigger difference than i was expecting

[10:51] <MasterDuke> in the example above, why does https://github.com/rakudo/rakudo/blob/master/src/core.c/Array.pm6#L27-L29 allocate 9991000 BOOTHash'es?

[10:53] <MasterDuke> huh, and 9999 deallocs in https://github.com/rakudo/rakudo/blob/master/src/core.c/Rakudo/Iterator.pm6#L433-L438

[11:14] <donaldh> lizmat: The homebrew formula for rakudo-star is updated to 2020.10. I applied your ENV patch in the homebrew formula for this release.

[11:16] <MasterDuke> *deopts

[11:55] <Geth> ¦ rakudo: 089bd59069 | (Daniel Mita)++ (committed using GitHub Web editor) | 2 files

[11:55] <Geth> ¦ rakudo: Add flag for creating symlinks without absolute path (#3980)

[11:55] <Geth> ¦ rakudo: 

[11:55] <Geth> ¦ rakudo: * Add flag for creating symlinks without absolute path

[11:55] <Geth> ¦ rakudo: 

[11:55] <Geth> ¦ rakudo: This change is intended to allow the creation of relative symlinks

[11:55] <Geth> ¦ rakudo: via the `:!absolute` flag. This ensures that the .absolute method is

[11:55] <Geth> ¦ rakudo: not called on the given IO::Path, instead creating the symlink with

[11:55] <linkable6> RAKUDO#3980 [closed]: https://github.com/rakudo/rakudo/pull/3980 Add flag for creating symlinks without absolute path

[11:55] <Geth> ¦ rakudo: the given path as-is.

[11:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/089bd59069

[11:58] <Geth> ¦ rakudo: 051e036113 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/array_slice.pm6

[11:58] <Geth> ¦ rakudo: Implement binding of array-slices (#3970)

[11:58] <Geth> ¦ rakudo: 

[11:58] <Geth> ¦ rakudo: AKA @a[1,2,3] := <a b c> .  For some reason, this was not implemented

[11:58] <Geth> ¦ rakudo: before, perhaps because of pre-GLR peculiarities making this difficult.

[11:58] <Geth> ¦ rakudo: Implementing turned out not to be such a big thing, so here goes.

[11:58] <Geth> ¦ rakudo: 

[11:58] <Geth> ¦ rakudo: This makes one spectest fail: S32-exceptions/misc2.t, 46 which tests

[11:58] <linkable6> RAKUDO#3970 [closed]: https://github.com/rakudo/rakudo/pull/3970 Implement binding of array-slices

[11:58] <Geth> ¦ rakudo: for specific X::Bind::Slice throwage.

[11:58] <Geth> ¦ rakudo: 

[11:58] <Geth> ¦ rakudo: This does not make any spectest pass, suggesting we need more tests.

[11:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/051e036113

[11:59] <Geth> ¦ rakudo: 87ef76ae30 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/hash_slice.pm6

[11:59] <Geth> ¦ rakudo: Implement binding of hash-slices (#3969)

[11:59] <Geth> ¦ rakudo: 

[11:59] <Geth> ¦ rakudo: AKA %h<a b c> := 1,2,3 .  For some reason, this was not implemented

[11:59] <Geth> ¦ rakudo: before, perhaps because of pre-GLR peculiarities making this difficult.

[11:59] <Geth> ¦ rakudo: Implementing turned out not to be such a big thing, so here goes.

[11:59] <Geth> ¦ rakudo: 

[11:59] <Geth> ¦ rakudo: This breaks 2 spectests that specifically test for throwing an

[11:59] <linkable6> RAKUDO#3969 [closed]: https://github.com/rakudo/rakudo/pull/3969 Implement binding of hash-slices

[11:59] <Geth> ¦ rakudo: <…commit message has 8 more lines…>

[11:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/87ef76ae30

[12:07] *** Altai-man joined
[12:10] *** sena_kun left
[12:33] <Geth> ¦ roast: fc1c1e797c | (Elizabeth Mattijsen)++ | 3 files

[12:33] <Geth> ¦ roast: Binding to hash/array slices is now possible

[12:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/fc1c1e797c

[12:50] *** frost-lab left
[13:04] <Geth> ¦ roast: 2094cac6f1 | (Elizabeth Mattijsen)++ | 13 files

[13:04] <Geth> ¦ roast: Replace "hashref" concept relic by "hashitem"

[13:04] <Geth> ¦ roast: 

[13:04] <Geth> ¦ roast: This just changes the wording of variables and comments, no tests

[13:04] <Geth> ¦ roast: semantics were changed.

[13:04] <Geth> ¦ roast: 

[13:04] <Geth> ¦ roast: Raku does not know references of the type that were originally meant

[13:04] <Geth> ¦ roast: here, coming from Perl (which *does* know references).

[13:05] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2094cac6f1

[13:13] <[Coke]> lizmat: down to 196 undocumented moar opcode variants, 19 more jvm/js only.

[13:13] <lizmat> n:n

[13:13] <lizmat> oops

[13:17] *** Altai-man left
[13:17] *** Altai-man joined
[13:21] <[Coke]> moritz: Since you're the new grammar guru, can you take a stab at documenting the nfa* opcodes in nqp? :)

[13:25] <Geth> ¦ roast: 34c41416f3 | (Elizabeth Mattijsen)++ | 24 files

[13:25] <Geth> ¦ roast: Replace "arrayref" concept relic by "arrayitem"

[13:25] <Geth> ¦ roast: 

[13:25] <Geth> ¦ roast: This just changes the wording of variables and comments, no tests

[13:25] <Geth> ¦ roast: semantics were changed.

[13:25] <Geth> ¦ roast: 

[13:25] <Geth> ¦ roast: Raku does not know references of the type that were originally meant

[13:25] <Geth> ¦ roast: here, coming from Perl (which *does* know references).

[13:25] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/34c41416f3

[13:25] <Geth> ¦ nqp: f206fa953f | Coke++ | docs/ops.markdown

[13:25] <Geth> ¦ nqp: Document readlink

[13:25] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/f206fa953f

[13:30] <[Coke]> nqp: nqp::say(nqp::fromI_I(3))

[13:30] <camelia> nqp-moarvm: OUTPUT: «Arg count 1 doesn't equal required operand count 3 for op 'coerce_II'␤   at gen/moar/stage2/QAST.nqp:1568  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/QAST.moarvm:compile_mastop)␤ from gen/moar/stage2/QAST.nqp:1781  (/home/camelia/rakudo-m-inst-2/share/nqp/…»

[13:30] <[Coke]> Curious as to why we have fromI_I which seems to be for coercing a bigint to a bigint

[13:34] <moritz> [Coke]: sorry, but I have no idea about the nqp opcodes used in grammars

[13:38] <[Coke]> moritz: but don't you WANT to? :)

[13:39] <moritz> I do, in fact. But my want for a working washing maschine is one of the things ranking higher right now

[13:39] <moritz> (it seems my wife pulled too strongly on the door, and now the door won't open anymore :/)

[13:39] * [Coke] wonders why we have findmeth and findmethod opcodes.

[13:39] <moritz> the second in case the first one is high?

[13:39] <[Coke]> don't know her own strength!

[13:41] <[Coke]> nqp: nqp::say(nqp::const::CCLASS_ANY)

[13:41] <camelia> nqp-moarvm: OUTPUT: «65535␤»

[13:41] <[Coke]> nqp: nqp::say(nqp::const_64::CCLASS_ANY)

[13:41] <camelia> nqp-moarvm: OUTPUT: «␤»

[13:41] * [Coke] wonders what the difference is between const & const_64

[13:41] <[Coke]> nqp: nqp::say(nqp::const_n64::CCLASS_ANY)

[13:41] <camelia> nqp-moarvm: OUTPUT: «␤»

[13:41] <[Coke]> er, it's n64. (surprised the middle one didnt' return Mu)

[14:03] <moritz> m: nqp::say(Mu)

[14:03] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::say, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3nqp::say(Mu)7⏏5<EOL>␤»

[14:04] <moritz> nqp: nqp::say(Mu)

[14:04] <camelia> nqp-moarvm: OUTPUT: «␤»

[14:16] <MasterDuke> [Coke]: IIRC fromI_I is used to strip out mix-ins

[14:17] <MasterDuke> yep https://github.com/rakudo/rakudo/blob/master/src/core.c/Int.pm6#L34-L41

[14:21] <MasterDuke> heh, thought it was familiar https://github.com/MoarVM/MoarVM/pull/737

[14:39] <Geth> ¦ roast: mienaikage++ created pull request #694: Add tests for relative symlinks

[14:39] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/694

[15:26] <[Coke]> MasterDuke: what's a mixin

[15:26] <[Coke]> ?

[15:26] <[Coke]> in this context.. an extra role?

[15:26] <[Coke]> ok. I can lift that comment for the docs, anyway. Thanks!

[15:27] <MasterDuke> yeah. `1 but "one"` type thing

[15:28] <MasterDuke> m: say so 1; say so 1 but False

[15:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: «True␤False␤»

[15:28] <MasterDuke> m: my $a = 1 but False; say so $a; my $b = Int.new($a); say so $b

[15:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: «False␤True␤»

[15:28] <Geth> ¦ nqp: 4c9d0d2277 | Coke++ | docs/ops.markdown

[15:29] <Geth> ¦ nqp: Document js op add_i64

[15:29] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/4c9d0d2277

[15:29] <Geth> ¦ nqp: 9063dd7a04 | Coke++ | docs/ops.markdown

[15:29] <Geth> ¦ nqp: Document fromI_I

[15:29] <Geth> ¦ nqp: 

[15:29] <Geth> ¦ nqp: MasterDuke++

[15:29] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/9063dd7a04

[15:29] <Geth> ¦ nqp: c6080dc21a | Coke++ | docs/ops.markdown

[15:29] <Geth> ¦ nqp: add doc header

[15:29] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/c6080dc21a

[15:30] <[Coke]> MasterDuke++ thanks

[15:30] <MasterDuke> np

[15:30] <[Coke]> my followup question is, "why do we need that?" :)

[15:34] <[Coke]> but that's just curiousity, just trying to get things doc'd

[15:35] <[Coke]> (213 opcodes left, 195 moar specific)

[15:36] <Geth> ¦ nqp: af323a47a2 | Coke++ | docs/ops.markdown

[15:36] <Geth> ¦ nqp: fix doc formatting

[15:36] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/af323a47a2

[15:38] <[Coke]> (212 opcodes left, 194 moar specific)

[15:45] <[Coke]> nqp: nqp::say(nqp::freemem)

[15:45] <camelia> nqp-moarvm: OUTPUT: «369102848␤»

[15:50] <[Coke]> I am amazed at how much slower the Raku version of this opcode test is

[15:52] <nwc10> than what? NQP?

[15:52] <[Coke]> yes. in nqp repo, rewrote t/doc/opcode.t from NQP to Raku (so I could get some relief writing the test of the code)

[15:53] <[Coke]> it's gone from 1s of seconds to dozens.

[15:53] <Geth> ¦ nqp: 3075a1ab22 | Coke++ | docs/ops.markdown

[15:53] <Geth> ¦ nqp: Document freemem

[15:53] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/3075a1ab22

[15:54] <[Coke]> 211

[15:54] <MasterDuke> one help would be to add a `contains('string') and ` before some of those big regexes that have string literals

[15:57] <MasterDuke> `@moar-ops.push: .words.head` *might* be faster than `my $op = .split(/\s+/, 2)[0]; @moar-ops.push: $op;`

[16:08] *** sena_kun joined
[16:10] *** Altai-man left
[16:10] <[Coke]> MasterDuke: I feel like doing the contains check is cheating that the optimizer should be doing for me! :)

[16:10] <[Coke]> but yah, I just did similar cheating in App::Uni which sped things up considerably.

[16:10] <MasterDuke> oh i agree, but as a practicality it doesn't yet...

[16:19] <[Tux]> Rakudo v2020.10-11-g87ef76ae3 (v6.d) on MoarVM 2020.10-10-g2a98b8f3a

[16:19] <[Tux]> csv-test-xs-20      0.383 -  0.391

[16:19] <[Tux]> csv-ip5xs           0.799 -  0.846

[16:19] <[Tux]> test-t --race       0.903 -  0.912

[16:19] <[Tux]> test-t              1.923 -  2.014

[16:19] <[Tux]> test                7.761 -  7.819

[16:19] <[Tux]> csv-ip5xs-20        7.861 -  7.884

[16:19] <[Tux]> test-t-20 --race    9.568 -  9.841

[16:19] <[Tux]> csv-parser         25.274 - 25.568

[16:19] <[Tux]> test-t-20          31.304 - 34.101

[16:41] <sena_kun> releasable6, status

[16:41] <releasable6> sena_kun, Next release in ≈25 days and ≈2 hours. There are no known blockers. Changelog for this release was not started yet

[16:41] <releasable6> sena_kun, Details: https://gist.github.com/3a492eeb923500883bef84b802c5f06f

[16:45] <[Coke]> MasterDuke: took 10s more with "contains" lines. :|

[16:46] <MasterDuke> that doesn't make sense

[16:47] <lizmat> perhaps a --profile would be useful ?

[16:50] <[Coke]> sure, will run one and throw the html in a gist

[16:54] <[Coke]> where can I put it so it's rendered?

[16:54] <[Coke]> (or should I just put the source out and folks can DL it?

[16:56] <MasterDuke> DL it is simplest i think

[16:56] <[Coke]> https://gist.githubusercontent.com/coke/8d67c139752929ea27a1b0daf3c7a13a/raw/d7e84a03ed2d2e7bb07bc63dc1e2f9551988f4e7/profile.html

[16:56] <[Coke]> 20% GC is more than I was thinking.

[16:57] <MasterDuke> lots of deopts

[16:58] <[Coke]> can we tell which code has the deopts?

[16:58] <[Coke]> (line 109?)

[16:59] <[Coke]> that's $file.IO.lines -> $line {

[17:02] <[Coke]> getting rid of an "is copy"

[17:15] <lizmat> hmmm... I wonder if ord-or-str can be made smarter, not having to roundtrip in the common case?

[17:20] *** domidumont left
[17:23] <lizmat> something like nqp::codes(nqp::substr($str,$idx,1) == 1 ?? nqp::ord($str,$idx) !! nqp::substr($str,$idx,$i)

[17:23] <lizmat> aka, no variables

[17:23] <lizmat> *temp variables

[17:24] * lizmat is in a different mindset right now to try that

[17:27] *** travis-ci joined
[17:27] <travis-ci> NQP build passed. Coke 'Document freemem'

[17:27] <travis-ci> https://travis-ci.org/Raku/nqp/builds/739338850 https://github.com/Raku/nqp/compare/af323a47a2c9...3075a1ab22fa

[17:27] *** travis-ci left
[17:35] <Geth> ¦ nqp: cb995c6e47 | Coke++ | t/docs/opcodes.t

[17:35] <Geth> ¦ nqp: Avoid an "is copy"

[17:35] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/cb995c6e47

[18:35] <Geth> ¦ roast: 004a756f2b | (Daniel Mita)++ (committed using GitHub Web editor) | S32-io/io-path-symlink.t

[18:35] <Geth> ¦ roast: Add tests for relative symlinks (#694)

[18:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/004a756f2b

[18:35] <linkable6> ROAST#694 [closed]: https://github.com/Raku/roast/pull/694 Add tests for relative symlinks

[18:38] <MasterDuke> [Coke]: lines 210, 220, and 231 could have a `starts-with() and `. should be even better than `contains()`

[18:40] *** donaldh left
[18:40] <MasterDuke> i don't know if reusing `$match` is faster or not than just using a/the regex directly

[18:45] <MasterDuke> in line 114 you're interpolating `@keywords` for every line of input. that seems a case where you should be pre-creating the regex and then just matching against that

[18:51] <[Coke]> all good points.

[18:56] <MasterDuke> oddly enough, i just made all of those changes (except for not reusing $match) plus making `@*vms` and `@*variants` non-dynamics and there was no speedup at all

[18:56] <[Coke]> ... then I will hold off. :)

[18:57] <[Coke]> one thing switched coming from nqp to raku was getting rid of "split \n" and using .lines instead.

[18:59] <[Coke]> well, if you do find anything with substantial time savings that doesn't change the output, please push it. :)

[19:02] <[Coke]> it's running about 135-145s here consistently

[19:02] <MasterDuke> 50s for me

[19:02] <MasterDuke> m: my @n = 1, 3, 5, 7; my $r = / @n /; my $a; $a++ if $_ ~~ $r for ^10_000; say now - INIT now; say $a

[19:02] <camelia> rakudo-moar 85847d2f1: OUTPUT: «1.9447962␤8704␤»

[19:02] <MasterDuke> m: my @n = 1, 3, 5, 7; my $a; $a++ if $_ ~~ / @n / for ^10_000; say now - INIT now; say $a

[19:03] <camelia> rakudo-moar 85847d2f1: OUTPUT: «1.9198736␤8704␤»

[19:03] <MasterDuke> that's the problem

[19:06] <[Coke]> testing...

[19:06] <MasterDuke> m: my @n = 1, 3, 5, 7; my $a; $a++ if $_ ~~ / 1 | 3 | 5 | 7 / for ^10_000; say now - INIT now; say $a

[19:06] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.159362␤8704␤»

[19:07] <MasterDuke> it's the interpolation of @keywords that's the real slowdown. but i would have thought pulling it out ahead of time would have fixed that

[19:07] <MasterDuke> but as my examples show, i'm not doing it right

[19:07] <[Coke]> that made it worse.

[19:08] <[Coke]> by pulling out the re, i'm at 2+ minutes now.

[19:08] <[Coke]> weird.

[19:10] <MasterDuke> timotimo, moritz, lizmat: ^^^

[19:10] <[Coke]> OH

[19:10] <[Coke]> by changing the / @keywords / to .contains(any(@keywords)), it's down to 5s.

[19:10] <[Coke]> holy crap.

[19:11] <[Coke]> let me make sure that's actually working.

[19:12] <MasterDuke> nice

[19:12] <[Coke]> (want to make sure output is identical - but I wasn't doing anything other than making sure that the text of one of those appeared in the string)

[19:13] <MasterDuke> using a Junction is slow also. i wonder if the regex would be faster if done correctly

[19:14] <[Coke]> not that slow!

[19:14] <[Coke]> yah. output is identical.

[19:15] <Geth> ¦ nqp: d1b2c12d83 | Coke++ | t/docs/opcodes.t

[19:15] <Geth> ¦ nqp: switch from regex to keywords.

[19:15] <Geth> ¦ nqp: 

[19:15] <Geth> ¦ nqp: We were creating the regex too often, but caching it didn't help

[19:15] <Geth> ¦ nqp: 

[19:15] <Geth> ¦ nqp: Switching to contains(junction) brings runtime here from about 145s to about 5s.

[19:15] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/d1b2c12d83

[19:15] <[Coke]> ... dammit, screwed up the first line of the commit. ah well

[19:16] <[Coke]> I would expect in an optimized Rakudo that those would be close in performance.

[19:17] <[Coke]> ... and in nqp, the / @keywords / regex was that fast.

[19:17] <[Coke]> MasterDuke++ would have taken me longer to find the bottleneck.

[19:18] <MasterDuke> my other changes, if applied after that one, take the time from 2.1s down to 2.0s. prob not worth the added complexity

[19:19] <MasterDuke> i believe there's some hope that the rakuast branch might enable some optimizations to regex interpolation. but it likely won't be simple to implement...

[19:19] <[Coke]> now just need to get people to document the remaining 211 opcodes! :)

[19:24] <[Coke]> lizmat, et al: let me know if you need me to try to benchmark that behavior to highlight the speed difference.

[19:25] <[Coke]> MasterDuke: interesting that it was *running* the regex that was the problem, not creating it (apparently)

[19:26] <MasterDuke> seems like it is doing some sort of lazy creation, not compiling it

[19:27] <[Coke]> ah, maybe.

[19:27] <MasterDuke> because the literal version is fast

[19:28] <MasterDuke> m: my $a; $a++ if $_ ~~ / 1 | 3 | 5 | 7 / for ^10_000; say now - INIT now; say $a

[19:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.1726417␤8704␤»

[19:28] <timotimo> i don't remember how exactly the cache works for interpolated stuff in regex

[19:28] <MasterDuke> m: my @n = 1, 3, 5, 7; my $a; $a++ if $_.contains(any(@n)) for ^10_000; say now - INIT now; say $a

[19:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: «1.628312␤8704␤»

[19:28] <timotimo> maybe it only works with <$foo> style interpolation

[19:28] <MasterDuke> i couldn't get it to work even with EVAL

[19:29] <timotimo> get it to work, or get it to work fast?

[19:29] <MasterDuke> fast

[19:33] <MasterDuke> m: my @n = 1, 3, 5, 7; my $r = EVAL q|/ @n /|; my $a; $a++ if $_ ~~ $r for ^10_000; say now - INIT now; say $a

[19:33] <camelia> rakudo-moar 85847d2f1: OUTPUT: «1.9987268␤8704␤»

[19:41] <timotimo> m: my @n = 1, 3, 5, 7; my $r = EVAL q|/ @n /|; say $r

[19:41] <camelia> rakudo-moar 85847d2f1: OUTPUT: «/ @n /␤»

[19:41] <timotimo> m: my @n = 1, 3, 5, 7; my $r = EVAL q|/ | ~ @n.join("|") ~ q| /|; say $r

[19:41] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma␤to override this error but only if you're VERY sure your data contains␤no injection attacks).␤at <tmp>:1␤------> 3y $r = …»

[19:41] <timotimo> m: use MONKEY-SEE-NO-EVAL; my @n = 1, 3, 5, 7; my $r = EVAL q|/ | ~ @n.join("|") ~ q| /|; say $r

[19:41] <camelia> rakudo-moar 85847d2f1: OUTPUT: «/ 1|3|5|7 /␤»

[19:41] <timotimo> m: use MONKEY-SEE-NO-EVAL; my @n = 1, 3, 5, 7; my $r = EVAL q|/ | ~ @n.join("|") ~ q| /|; my $a; $a++ if $_ ~~ $r for ^10_000; say now - INIT now; say $a

[19:41] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.1807646␤8704␤»

[19:42] <timotimo> you're compiling a regex that will still do an interpolation when it's run

[19:42] <MasterDuke> ha

[19:45] <MasterDuke> timotimo++

[19:45] <MasterDuke> well then. doing it correctly drops the runtime from 2.1s to 1.2s. interested in doing that [Coke] or leave at .contains?

[19:50] <timotimo> doing the .join thing will not do proper escaping for you, though

[19:51] <timotimo> so be careful about your input :)

[20:07] *** Altai-man joined
[20:10] *** sena_kun left
[20:18] <[Coke]> contains is fine.

[20:22] <MasterDuke> cool

[20:30] *** Altai-man left
[20:40] *** Altai-man joined
[20:43] *** lucasb joined
[20:44] *** Geth left
[20:48] *** Altai-man left
[20:58] *** chansen_ left
[20:58] *** hoelzro left
[20:58] *** hoelzro joined
[20:58] *** chansen_ joined
[21:35] *** Xliff left
[23:17] *** nebuchadnezzar left
