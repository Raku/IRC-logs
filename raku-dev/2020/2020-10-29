[00:29] *** lichtkind left
[01:59] *** SmokeMachine left
[02:01] *** SmokeMachine joined
[04:22] *** Kaiepi joined
[05:38] *** MasterDuke left
[06:30] *** Kaiepi left
[06:31] *** Kaiepi joined
[06:33] *** Kaiepi left
[06:50] *** Kaiepi joined
[07:52] *** frost-lab joined
[09:59] *** sourceable6 left
[09:59] *** coverable6 left
[09:59] *** benchable6 left
[09:59] *** nativecallable6 left
[09:59] *** committable6 left
[09:59] *** evalable6 left
[09:59] *** tellable6 left
[09:59] *** unicodable6 left
[09:59] *** statisfiable6 left
[09:59] *** shareable6 left
[09:59] *** quotable6 left
[09:59] *** releasable6 left
[09:59] *** squashable6 left
[09:59] *** bisectable6 left
[09:59] *** linkable6 left
[09:59] *** bloatable6 left
[09:59] *** greppable6 left
[09:59] *** notable6 left
[09:59] *** linkable6 joined
[10:00] *** bisectable6 joined
[10:00] *** releasable6 joined
[10:00] *** tellable6 joined
[10:00] *** bloatable6 joined
[10:00] *** squashable6 joined
[10:01] *** quotable6 joined
[10:01] *** coverable6 joined
[10:01] *** notable6 joined
[10:02] *** greppable6 joined
[10:02] *** unicodable6 joined
[10:02] *** evalable6 joined
[10:02] *** benchable6 joined
[10:02] *** committable6 joined
[10:02] *** sourceable6 joined
[10:02] *** nativecallable6 joined
[10:02] *** shareable6 joined
[10:02] *** statisfiable6 joined
[11:10] <lizmat> m: my @a; (@a,) = 666,999; dd @a    # this feels... counter-intuitive ?

[11:10] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Array @a = [666, 999]␤»

[11:11] <lizmat> m: my @a; (@a,42) = 666,999; dd @a    # expected something like this

[11:11] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Cannot modify an immutable Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[11:11] <lizmat> m: my @a; dd (@a,)   # it *is* an array as an element of a list

[11:11] <camelia> rakudo-moar 85847d2f1: OUTPUT: «([],)␤»

[12:28] *** frost-lab left
[13:21] *** vrurg left
[13:26] *** vrurg joined
[13:50] *** domidumont joined
[14:24] <[Coke]> lizmat: you doc'd 'with' opcode - is 'without' close enough that you can add that one too?

[14:28] <lizmat> sure... will do

[14:46] <[Coke]> lizmat++

[14:47] <[Coke]> I was surprised at how much logic is there for xor, which is basically a huge opcode written in nqp.

[15:02] *** lucasb joined
[15:04] *** vrurg left
[15:27] *** vrurg joined
[16:05] <nine> xor was the last thing I fixed when writing the NQP bytecode writer and yes it was really surprisingly complicated

[16:06] <nine> short circuiting makes it so

[16:07] <[Tux]> Rakudo v2020.10-13-g39c515957 (v6.d) on MoarVM 2020.10-11-g608b90eb1

[16:07] <[Tux]> csv-test-xs-20      0.383 -  0.385

[16:07] <[Tux]> csv-ip5xs           0.813 -  0.837

[16:07] <[Tux]> test-t --race       0.836 -  0.849

[16:07] <[Tux]> test-t              1.946 -  2.011

[16:07] <[Tux]> test                7.718 -  7.850

[16:07] <[Tux]> csv-ip5xs-20        8.014 -  8.164

[16:07] <[Tux]> test-t-20 --race    8.983 -  9.758

[16:07] <[Tux]> csv-parser         25.874 - 27.358

[16:07] <[Tux]> test-t-20          32.564 - 32.660

[16:09] <[Coke]> nine - any chance you could write up a sentence or two for xor in the nqp docs? if you dump it here, I can add it to the markdown file.

[16:21] <Geth> ¦ rakudo/is-unit-tester: 20ff6d49cc | (Elizabeth Mattijsen)++ | 2 files

[16:21] <Geth> ¦ rakudo/is-unit-tester: Introducing Routine is unit-tester trait

[16:21] <Geth> ¦ rakudo/is-unit-tester: 

[16:21] <Geth> ¦ rakudo/is-unit-tester: Marking a subroutine with the "is unit-tester" trait, indicates that

[16:21] <Geth> ¦ rakudo/is-unit-tester: the subroutine produces Test (aka TAP) output.  All of the exported

[16:21] <Geth> ¦ rakudo/is-unit-tester: subroutines in Test implicitely have this trait.

[16:21] <Geth> ¦ rakudo/is-unit-tester: 

[16:21] <Geth> ¦ rakudo/is-unit-tester: When a test fails and a failure needs to be reported, the file and

[16:21] <Geth> ¦ rakudo/is-unit-tester: <…commit message has 22 more lines…>

[16:21] <Geth> ¦ rakudo/is-unit-tester: review: https://github.com/rakudo/rakudo/commit/20ff6d49cc

[16:21] <Geth> ¦ rakudo: lizmat++ created pull request #3991: Introducing Routine is unit-tester trait

[16:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3991

[16:22] <lizmat> [Coke]: was busy with this   :-)   ^^

[16:23] <nine> Oooh....so that's the equivalent of local $Test::Builder::Level = $Test::Builder::Level + 1;

[16:25] <lizmat> yeah, but without all of the shenanigans of needing to keep track 

[16:25] <[Coke]> lizmat: nifty!

[16:25] <lizmat> just mark you sub, and you're done

[16:31] <Geth> ¦ nqp: 0051d64525 | Coke++ | docs/ops.markdown

[16:31] <Geth> ¦ nqp: fix typo

[16:31] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/0051d64525

[16:31] <Geth> ¦ nqp: 4b2ae6d605 | Coke++ | t/docs/opcodes.t

[16:31] <Geth> ¦ nqp: osrpoint not exposed as nqp opcode, internal use only

[16:31] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/4b2ae6d605

[18:05] *** domidumont left
[18:18] *** TreyHarris left
[18:36] *** TreyHarris joined
[19:35] *** ccamel left
[20:16] *** finsternis left
[20:29] <Geth> ¦ problem-solving: codesections assigned to AlexDaniel Issue Add codesections to «meta» reviewers https://github.com/Raku/problem-solving/issues/241

[20:58] *** lichtkind joined
[21:13] *** camelCaser joined
[22:02] *** lichtkind left
[22:20] <Geth> ¦ nqp: e71d0aaa28 | Coke++ | docs/ops.markdown

[22:20] <Geth> ¦ nqp: Document most *native* opcodes

[22:20] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/e71d0aaa28

[22:21] <[Coke]> ^^ timotimo++ nine++ for those docs

[22:22] <[Coke]> that brings us down to 202 opcodes not doc'd (or that need to be skipped)

[22:26] <timotimo> :)

[22:49] <Geth> ¦ problem-solving: codesections++ created pull request #242: Add codesections to «meta» & «fallback» reviewers

[22:49] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/242

[22:53] *** Xliff joined
