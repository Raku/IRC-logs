[00:37] *** lucasb left
[01:04] *** nwc10 left
[02:53] *** vrurg joined
[03:03] *** MasterDuke left
[05:36] *** Altai-man joined
[06:27] <nine> In fact my uncomitted fix makes it much worse. I guess that shows how far away from working interning of parametrics we were and that there's quite some more way to go

[06:28] <nine> As much as I'd like to return to in-process-precompilation, I guess that smart thing is to use my new found familiarity with parametrics to see this through to the end

[06:44] <moritz> why do I keep reading "paramedics"? :D

[07:24] <nine> That's just your personal bias showing. You obviously value rescuing people's lives over fixing software. Weirdo...

[07:25] * nine rolls his eyes exaggeratedly

[07:41] *** domidumont joined
[08:03] *** jmerelo joined
[08:04] *** Kaiepi left
[08:06] *** Kaiepi joined
[08:07] *** Kaiepi left
[08:08] *** Kaiepi joined
[08:11] <lizmat> Files=1336, Tests=113712, 221 wallclock secs (28.83 usr  8.49 sys + 3079.73 cusr 293.86 csys = 3410.91 CPU)

[08:11] *** MasterDuke joined
[08:14] *** Kaiepi left
[08:16] *** Kaiepi joined
[08:32] <Geth> ¦ rakudo: 964f6e48a5 | (Elizabeth Mattijsen)++ | src/core.e/hash_multislice.pm6

[08:32] <Geth> ¦ rakudo: We must also reduce recursion level  :-)

[08:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/964f6e48a5

[08:48] <Geth> ¦ rakudo: 3ca1fede64 | (Elizabeth Mattijsen)++ | 3 files

[08:48] <Geth> ¦ rakudo: Implement @[;] with all the bells and whistles

[08:48] <Geth> ¦ rakudo: 

[08:48] <Geth> ¦ rakudo: Since there are subtle differences with the current (incomplete)

[08:48] <Geth> ¦ rakudo: implementation, this is only available in v6.e.PREVIEW.  Allows for

[08:48] <Geth> ¦ rakudo: use of * , and WhateverCode such as *-1, as well as iterables at any

[08:48] <Geth> ¦ rakudo: level.  Optimised for the simple 2 and 3-dimensional cases, but due

[08:48] <Geth> ¦ rakudo: to checks for named parameters, is about 1% slower than the current

[08:48] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[08:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3ca1fede64

[09:17] <MasterDuke> timotimo: i'm looking a coverage report that says `--` and `++` are uncovered for native nums. but i can see tests in roast that do use them on natives. could moarvm and/or rakudo optimization be the problem? would it make sense to try and run the spectest with optimization and spesh disabled?

[09:21] *** sena_kun joined
[09:23] *** Altai-man left
[09:30] <timotimo> MasterDuke: yes rakudo optimizes these to nqp::add_i and nqp::sub_i (or maybe inc and dec?) if it sees that it can

[09:31] <timotimo> er, not int of course, num i guess

[09:31] <moritz> and for natives, it always can, no?

[09:31] <timotimo> should, yeah

[09:31] <MasterDuke> i'm running a spectest now with MVM_SPESH_DISABLE=1  and `--optimize=off`, but there are tons of fails

[09:32] <timotimo> try optimize=0

[09:32] <MasterDuke> ha, and one TODO passed

[09:32] <timotimo> the optimizer is responsible for a few checks that the language specifies must be done

[09:32] <timotimo> like the "this call to that sub can never work"

[09:33] <MasterDuke> yeah, i know jnthn has mentioned breaking the optimizer up into more specific pieces, which i'm all in favor of

[09:33] <timotimo> rakuast has this lookup / resolve / something phase which would be able to do this particular thing

[09:34] *** travis-ci joined
[09:34] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'We must also reduce recursion level  :-)'

[09:34] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/736997940 https://github.com/rakudo/rakudo/compare/1971ba464205...964f6e48a5ca

[09:34] *** travis-ci left
[09:35] <MasterDuke> still a bunch of fails with --optimize=0, not sure if fewer yet

[09:36] <MasterDuke> but i guess i can just merge all the coverage logs to get a superset report

[09:37] <MasterDuke> it is fewer with '0' instead of 'off'

[09:38] <timotimo> good

[09:47] <lizmat> Travis mumbling appears to be caused by t/02-rakudo/15-gh_1202.t failing: which is a flapper type test

[09:50] <MasterDuke> about same with 1, far fewer with 2

[10:00] <MasterDuke> ah ha. there are more lines covered in my superset report. including those num multis!

[10:15] <MasterDuke> from t/02-rakudo/15-gh_1202.t, `No such method 'cue' for invocant of type 'Awaiter::Blocking'`

[10:54] *** frost-lab joined
[12:09] *** jmerelo left
[12:32] <lizmat> notable6: weekly

[12:32] <notable6> lizmat, 4 notes: https://gist.github.com/a42bdf6a5a28c8dfd492d815215ccb88

[12:32] <lizmat> notable6: weekly reset

[12:32] <notable6> lizmat, Moved existing notes to “weekly_2020-10-19T12:32:43Z”

[13:08] *** jmerelo joined
[13:20] *** Altai-man joined
[13:23] *** sena_kun left
[13:26] <Geth> ¦ rakudo: d8db03b5da | (Patrick Böker)++ | tools/lib/NQP/Config/Rakudo.pm

[13:26] <Geth> ¦ rakudo: Build: If NQP is stale and `--gen-nqp` is passed: rebuild

[13:26] <Geth> ¦ rakudo: 

[13:26] <Geth> ¦ rakudo: If `--gen-nqp` is passed don't fail with "nqp version XXX is outdated"

[13:26] <Geth> ¦ rakudo: errors, rebuild in that case.

[13:26] <Geth> ¦ rakudo: 

[13:26] <Geth> ¦ rakudo: Fixes #3964

[13:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d8db03b5da

[13:26] <Geth> ¦ rakudo: f0d91a50a6 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | tools/lib/NQP/Config/Rakudo.pm

[13:26] <linkable6> RAKUDO#3964 [closed]: https://github.com/rakudo/rakudo/issues/3964 ===SORRY!=== nqp-m outdated +build crash

[13:26] <Geth> ¦ rakudo: Merge pull request #3967 from patrickbkr/fix-3964

[13:26] <Geth> ¦ rakudo: 

[13:26] <Geth> ¦ rakudo: Build: If NQP is stale and `--gen-nqp` is passed: rebuild

[13:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f0d91a50a6

[13:29] <Geth> ¦ nqp: 6f3d917fc7 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[13:29] <Geth> ¦ nqp: Bump MoarVM to get memory leak fix, nine++

[13:29] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/6f3d917fc7

[13:41] <Geth> ¦ rakudo: 2d461268f6 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[13:41] <Geth> ¦ rakudo: Bump NQP to get memory leak fixes, nine++

[13:41] <Geth> ¦ rakudo: 

[13:41] <Geth> ¦ rakudo: Also a double check if https://github.com/rakudo/rakudo/pull/3967

[13:41] <Geth> ¦ rakudo: had the desired effect :-).  It did.

[13:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2d461268f6

[13:49] <Geth> ¦ rakudo: patrickbkr++ created pull request #3968: Don't die when using stdout with `rakuw.exe`

[13:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3968

[14:01] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/10/19/2020-42-recipes/

[14:06] *** patrickb joined
[14:09] *** frost-lab left
[14:11] <patrickb> .tell rba Can do. Though tyil should be on boat as well, as he currently creates star. Maybe it's automated already?

[14:11] <tellable6> patrickb, I'll pass your message to rba

[14:12] <tyil> o/

[14:12] <tyil> patrickb: what'd I miss that I should be aware of?

[14:12] <MasterDuke> lizmat: you mention jnthn's report on the newdisp branch, but link to the rakuast report

[14:12] <lizmat> artgh

[14:13] <patrickb> tyil: A few days ago: #raku-dev <rba> patrickb: Can we discuss automation of star builds based on Azure Pipelines? As I understand all the building blocks are around for binary builds for Win/Mac. What do you think?

[14:13] <tyil> ah

[14:13] <lizmat> MasterDuke++   # fixed

[14:14] <MasterDuke> lizmat++

[14:14] <tyil> I'm not using Azure myself due to a strong dislike for Microsoft, but I'm not against it being used, and if any help is needed that doesn't require me to use a microsoft account I'm open to it

[14:14] <patrickb> .tell rba Also my next bigger raku project (moving our CI over to a custom tool that controls OBS and Azure) is still in the works, so I'd like to not get sidetracked too much...

[14:14] <tellable6> patrickb, I'll pass your message to rba

[14:15] <tyil> I have binary rakudo star builds on Sourcehut right now, though those are all for personal testing purposes right now

[14:15] <tyil> (also only for GNU+Linux systems)

[14:19] *** patrickb left
[14:31] <timotimo> hell yeah to "window" applications %)

[14:53] <Geth> ¦ rakudo: 54eb431482 | (Elizabeth Mattijsen)++ | src/core.e/hash_multislice.pm6

[14:53] <Geth> ¦ rakudo: Add one more recursion fix, missed in 964f6e48a5

[14:53] <Geth> ¦ rakudo: 

[14:53] <Geth> ¦ rakudo: And update some comments to bring them more in line with array

[14:53] <Geth> ¦ rakudo: multislice handling.

[14:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/54eb431482

[14:53] <Geth> ¦ roast: b2a0fe6ffc | (Elizabeth Mattijsen)++ | S32-hash/multislice-6e.t

[14:53] <Geth> ¦ roast: Add some hash multislice recursion tests

[14:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b2a0fe6ffc

[15:02] *** Altai-man left
[16:05] <MasterDuke> re https://stackoverflow.com/questions/64419670/how-to-interpolate-string-containing-capture-group-parentheses-as-regex-in-raku is the naive solution just NYI, or not actually correct?

[16:05] <[Tux]> Rakudo version 2020.09-71-g54eb43148 - MoarVM version 2020.09-12-g8c41f6692

[16:05] <[Tux]> csv-test-xs-20      0.384 -  0.397

[16:05] <[Tux]> csv-ip5xs           0.836 -  0.865

[16:05] <[Tux]> test-t --race       0.867 -  0.884

[16:05] <[Tux]> test-t              2.106 -  2.148

[16:05] <[Tux]> test                7.701 -  8.100

[16:05] <[Tux]> csv-ip5xs-20        8.010 -  8.245

[16:05] <[Tux]> test-t-20 --race    9.784 -  9.967

[16:05] <[Tux]> csv-parser         25.856 - 28.440

[16:05] <[Tux]> test-t-20          33.100 - 33.434

[16:05] <[Tux]> Hmm. I'll kill teams and run again

[16:06] <lizmat> yeah, that seems appropriate  :-)

[16:06] <MasterDuke> ?

[16:06] <lizmat> referring to [Tux] 's remark

[16:07] <MasterDuke> ah

[16:07] <lizmat> i've been looking at INTERPOLATE with regards to the rakuast branch

[16:07] <lizmat> it's... interesting

[16:08] <MasterDuke> yes, i can imagine

[16:10] <timotimo> oh yes

[16:10] *** jmerelo left
[16:11] <lizmat> hmmm.... interesting: on the one hand we have spectest todo'd for binding to hash slices

[16:11] <lizmat> on the other hand we have at least one active spectest checking whether binding a hash slice dies

[16:12] <lizmat> yeah, actually 2

[16:13] <Geth> ¦ rakudo: d713e451af | (Elizabeth Mattijsen)++ | src/core.e/array_multislice.pm6

[16:13] <Geth> ¦ rakudo: BIND value itself should also be raw!

[16:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d713e451af

[16:15] <[Coke]> Teams is a *pig* on my work machine, I have to close it when I'm not actively using it.

[16:15] <[Coke]> (last I checked was eating nearly a gig on startup)

[16:18] <Geth> ¦ rakudo/hash-slice-binding: b1e198dc30 | (Elizabeth Mattijsen)++ | src/core.c/hash_slice.pm6

[16:18] <Geth> ¦ rakudo/hash-slice-binding: Implement binding of hash-slices

[16:18] <Geth> ¦ rakudo/hash-slice-binding: 

[16:18] <Geth> ¦ rakudo/hash-slice-binding: AKA %h<a b c> := 1,2,3 .  For some reason, this was not implemented

[16:18] <Geth> ¦ rakudo/hash-slice-binding: before, perhaps because of pre-GLR peculiarities making this difficult.

[16:18] <Geth> ¦ rakudo/hash-slice-binding: Implementing turned out not to be such a big thing, so here goes.

[16:18] <Geth> ¦ rakudo/hash-slice-binding: 

[16:18] <Geth> ¦ rakudo/hash-slice-binding: This breaks 2 spectests that specifically test for throwing an

[16:18] <Geth> ¦ rakudo/hash-slice-binding: <…commit message has 8 more lines…>

[16:18] <Geth> ¦ rakudo/hash-slice-binding: review: https://github.com/rakudo/rakudo/commit/b1e198dc30

[16:19] <Geth> ¦ rakudo: lizmat++ created pull request #3969: Implement binding of hash-slices

[16:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3969

[16:29] <[Tux]> Rakudo version 2020.09-71-g54eb43148 - MoarVM version 2020.09-12-g8c41f6692

[16:29] <[Tux]> csv-test-xs-20      0.381 -  0.392

[16:29] <[Tux]> csv-ip5xs           0.828 -  0.844

[16:29] <[Tux]> test-t --race       0.851 -  0.853

[16:29] <[Tux]> test-t              2.007 -  2.198

[16:29] <[Tux]> test                7.952 -  7.965

[16:29] <[Tux]> csv-ip5xs-20        7.987 -  8.220

[16:29] <[Tux]> test-t-20 --race    9.478 -  9.582

[16:29] <[Tux]> csv-parser         25.139 - 25.791

[16:29] <[Tux]> test-t-20          32.762 - 33.450

[16:35] *** maggotbrain joined
[17:10] *** jmerelo joined
[17:16] *** domidumont left
[17:17] *** domidumont joined
[17:18] *** domidumont left
[17:39] <Geth> ¦ rakudo/array-slice-binding: a7069182d5 | (Elizabeth Mattijsen)++ | src/core.c/array_slice.pm6

[17:39] <Geth> ¦ rakudo/array-slice-binding: Implement binding of array-slices

[17:39] <Geth> ¦ rakudo/array-slice-binding: 

[17:39] <Geth> ¦ rakudo/array-slice-binding: AKA @a[1,2,3] := <a b c> .  For some reason, this was not implemented

[17:39] <Geth> ¦ rakudo/array-slice-binding: before, perhaps because of pre-GLR peculiarities making this difficult.

[17:39] <Geth> ¦ rakudo/array-slice-binding: Implementing turned out not to be such a big thing, so here goes.

[17:39] <Geth> ¦ rakudo/array-slice-binding: 

[17:39] <Geth> ¦ rakudo/array-slice-binding: This makes one spectest fail: S32-exceptions/misc2.t, 46 which tests

[17:39] <Geth> ¦ rakudo/array-slice-binding: for specific X::Bind::Slice throwage.

[17:39] <Geth> ¦ rakudo/array-slice-binding: 

[17:39] <Geth> ¦ rakudo/array-slice-binding: This does not make any spectest pass, suggesting we need more tests.

[17:39] <Geth> ¦ rakudo/array-slice-binding: review: https://github.com/rakudo/rakudo/commit/a7069182d5

[17:39] <Geth> ¦ rakudo: lizmat++ created pull request #3970: Implement binding of array-slices

[17:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3970

[17:40] <lizmat> afk for a few hours&

[18:00] *** Kaeipi joined
[18:00] *** Kaiepi left
[18:07] <tbrowder> hi,

[18:08] <tbrowder> i've been testing file copy and found an issue i can't find as open in rakudo:

[18:09] <tbrowder> trying to copy a dir to a file throws as expected, but it destroys the file somewhere during the process!

[18:11] <tbrowder> i'm looking for an existing test for that now. i'm also looking at rakudo/t ...

[18:18] *** Kaeipi left
[18:22] <tbrowder> i cannot find a test for this case, i'm filing a rakudo issue

[18:33] *** jmerelo left
[19:00] <releasable6> Next release in ≈4 days and ≈23 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:53] <Geth> ¦ rakudo: MasterDuke17++ created pull request #3972: Add .gitattributes file & specify file extensions

[19:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3972

[20:18] *** rypervenche left
[20:19] *** Kaiepi joined
[20:23] *** rypervenche joined
[20:39] <lizmat> .ask sena_kun could you run a Blin on the "Hash.DELETE-KEY-Nil" branch ?

[20:39] <tellable6> lizmat, I'll pass your message to sena_kun

[21:40] *** vrurg_ joined
[21:42] *** vrurg left
[22:04] <tbrowder> i have a fix almost ready to submit. imho it should go in the next release

[22:05] <tbrowder> test added also

[22:11] <Geth> ¦ rakudo: 42e0434d1a | (Daniel Green)++ | .gitattributes

[22:11] <Geth> ¦ rakudo: Add .gitattributes file & specify file extensions

[22:11] <Geth> ¦ rakudo: 

[22:11] <Geth> ¦ rakudo: This means if you add something like:

[22:11] <Geth> ¦ rakudo: ```

[22:11] <Geth> ¦ rakudo: [diff "raku"]

[22:11] <Geth> ¦ rakudo:     xfuncname = "^\\s*(((my|our) )?((multi|proto) )?(sub|method|submethod) [^{]+)"

[22:11] <Geth> ¦ rakudo: ```

[22:11] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[22:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/42e0434d1a

[22:11] <Geth> ¦ rakudo: 4097370624 | MasterDuke17++ (committed using GitHub Web editor) | .gitattributes

[22:12] <Geth> ¦ rakudo: Merge pull request #3972 from MasterDuke17/add_a_gitattributes_file

[22:12] <Geth> ¦ rakudo: 

[22:12] <Geth> ¦ rakudo: Add .gitattributes file & specify file extensions

[22:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4097370624

[22:14] <Geth> ¦ rakudo: tbrowder++ created pull request #3973: Add fix for issue #3971

[22:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3973

[22:14] <linkable6> RAKUDO#3971 [open]: https://github.com/rakudo/rakudo/issues/3971 Attempting to copy a directory to an existing file throws but destroys the file

[22:15] <Geth> ¦ roast: tbrowder++ created pull request #690: Add test for issue #3971

[22:15] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/690

[22:31] <tbrowder> fyi, i added BLOCKER label on the issue and pr

[23:39] *** HarmtH left
[23:40] *** HarmtH joined
