[00:37] *** AlexDani` joined
[00:39] *** AlexDaniel left
[02:10] *** hungrydonkey left
[02:55] *** hungrydonkey joined
[03:32] *** hungrydonkey left
[03:43] *** hungrydonkey joined
[03:52] *** hungrydonkey left
[03:52] *** hungrydonkey joined
[04:28] *** hungrydonkey left
[04:28] *** hungrydonkey joined
[05:30] *** hungrydonkey left
[05:33] <tyil> jjatria: my docker-perl6 repo has 2 kind of images for that purpose, a *-dev image with all those utilities, and a regular image without

[05:34] <tyil> you would install your application with a *-dev image, and let users run it with the regular image

[05:34] <tyil> using a multi-stage dockerfile to make the Docker image for users

[05:35] <tyil> https://www.tyil.nl/post/2019/04/11/perl6-nightly-docker-images/ for more information

[05:37] *** hungrydonkey joined
[05:50] *** hungryd36 joined
[05:51] *** hungrydonkey left
[06:53] *** tyil is now known as mieko

[06:54] *** mieko is now known as tyil

[07:03] *** hungryd36 left
[07:16] *** hungrydonkey joined
[07:20] *** hungrydonkey left
[07:36] *** hungrydonkey joined
[07:37] <lizmat> Files=1306, Tests=111210, 32445 wallclock secs (29.32 usr  8.16 sys + 3338.82 cusr 428.21 csys = 3804.51 CPU)

[07:38] <lizmat> sadly, S17-promise/nonblocking-await.t hung

[07:48] *** hungrydonkey left
[07:55] <tyil> jjatria: looking at your bash script, you're using `sed -ri`, both of those options are not POSIX defined, and can't be expected to be available on a system

[07:57] <tyil> you can undo the -i quite easily by also dropping the `cat` earlier 

[07:57] <tyil> I dont think -r is needed at all

[08:00] <tyil> sed "s/{{TAG}}/$tag/g" < "$template" > "$dockerfile"

[08:03] <tyil> or, to combine both sed calls as well: `sed -e "s/{{TAG}}/$base_tag/g" -e "s/{{INSTALL_OPTIONS}}/$install_options/g" < "$template" > "$dockerfile"`

[08:05] <tyil> its probably a bit faster as well, as you only spawn 1 sed, and only write the output to a file once

[08:05] <tyil> but it's mostly more portable :>

[09:05] <[Tux]> Rakudo version 2020.02.1-289-g2cbf58372 - MoarVM version 2020.02.1-73-gc7e75be60

[09:05] <[Tux]> csv-test-xs-20      0.372 -  0.417

[09:05] <[Tux]> csv-ip5xs           0.705 -  0.813

[09:05] <[Tux]> test-t --race       0.999 -  1.030

[09:05] <[Tux]> test-t              2.107 -  2.199

[09:05] <[Tux]> csv-ip5xs-20        6.175 -  6.344

[09:05] <[Tux]> test                7.578 -  8.350

[09:05] <[Tux]> test-t-20 --race    9.911 - 11.410

[09:05] <[Tux]> csv-parser         26.519 - 27.211

[09:05] <[Tux]> test-t-20          32.400 - 33.650

[09:11] <lizmat> yikes

[09:11] <lizmat> jnthn ^^

[09:11] <lizmat> this conforms what I've seen in spectest benchmarking

[09:12] * lizmat feels 4221f8225feae17 is the cause

[09:12] <linkable6> (2020-04-01) https://github.com/rakudo/rakudo/commit/4221f8225f Adopt MoarVM-provided value_desc_cont

[09:12] *** Altai-man_ joined
[09:12] * lizmat guesses jnthn's intuition was right

[09:22] *** sena_kun joined
[09:23] *** Altai-man_ left
[09:25] <Geth> ¬¶ rakudo: bbed2255f3 | (Elizabeth Mattijsen)++ | src/core.c/operators.pm6

[09:25] <Geth> ¬¶ rakudo: More correctly implement ^... and ^...^

[09:25] <Geth> ¬¶ rakudo: 

[09:25] <Geth> ¬¶ rakudo: At least for now: problems found while writing tests for ^... and

[09:25] <Geth> ¬¶ rakudo: ^...^ .  Main problems is that the simplification of just removing

[09:25] <Geth> ¬¶ rakudo: the last value generated, does not work with ... if the RHS is a

[09:25] <Geth> ¬¶ rakudo: list: then the value that should be skipped (or not) is the first

[09:25] <Geth> ¬¶ rakudo: value of that list, *not* the last value of that list.

[09:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/bbed2255f3

[10:29] <lizmat> m: dd 1 ... -Inf   # LTA hang

[10:30] <camelia> rakudo-moar bbed2255f: OUTPUT: ¬´(timeout)¬ª

[10:59] <lizmat> m: dd 1 ... *, "foo","bar"   # feels to me this should warn on never being able to produce "foo" and "bar"

[10:59] <camelia> rakudo-moar bbed2255f: OUTPUT: ¬´(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,‚Ä¶¬ª

[11:21] *** Altai-man_ joined
[11:23] *** sena_kun left
[11:35] *** Xliff joined
[11:35] <Xliff> o/

[11:35] <AlexDani`> Xliff: any news? :)

[11:35] *** AlexDani` is now known as AlexDaniel

[11:35] *** AlexDaniel left
[11:35] *** AlexDaniel joined
[11:36] <Xliff> No. Been real busy with $dayJob.

[11:36] <Xliff> Then there's family stuff.

[11:37] <AlexDaniel> lizmat: that LTA hang is because of is-lazy

[11:38] <AlexDaniel> lizmat: see https://github.com/rakudo/rakudo/wiki/is-lazy

[11:38] <lizmat> AlexDaniel: yeah, I know: it's lazy but not telling us it is

[11:38] <lizmat> a thing to fix  :-)

[11:38] *** MasterDuke left
[11:38] <AlexDaniel> yeah, everything else in that table should be fixed too :)

[11:38] <Geth> ¬¶ rakudo: 30e7a67c55 | (Elizabeth Mattijsen)++ | lib/Test.rakumod

[11:38] <Geth> ¬¶ rakudo: Add s/PERL6/RAKU test environment variables

[11:38] <Geth> ¬¶ rakudo: 

[11:38] <Geth> ¬¶ rakudo: - RAKU_TEST_DIE_ON_FAIL as the new versio of PERL6_TEST_DIE_ON_FAIL

[11:38] <Geth> ¬¶ rakudo: - RAKU_TEST_TIMES as the new version of PERL6_TEST_TIMES

[11:38] <Geth> ¬¶ rakudo: 

[11:38] <Geth> ¬¶ rakudo: None of these are actually documented, it seems.

[11:39] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/30e7a67c55

[11:39] <AlexDaniel> well ok not everything

[11:39] <AlexDaniel> probably (-‚àû...42) 

[11:39] <AlexDaniel> and that's it, actually, just two bugs :)

[11:41] *** patrickb joined
[11:47] <Xliff> I've got a C question I can't find an answer to anywhere else. Can anyone help?

[11:47] <Xliff> It has to deal with LOCAL vs GLOBAL

[11:48] *** MasterDuke joined
[12:11] <nine> Xliff: if you ask your question, someone may be able to help

[12:13] <Xliff> I have static routines in a .so that I'd like to use externally. What's the best way to accomplish that?

[12:13] *** hungrydonkey joined
[12:18] <Geth> ¬¶ roast: 5ddc9b9f47 | (Elizabeth Mattijsen)++ | S03-sequence/exhaustive.t

[12:18] <Geth> ¬¶ roast: First batch of exhaustive ... ...^ ^... ^...^ tests

[12:18] <Geth> ¬¶ roast: 

[12:18] <Geth> ¬¶ roast: Still work in progress, mainly intended to easily allow for testing

[12:18] <Geth> ¬¶ roast: the ... refactoring work.

[12:18] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/5ddc9b9f47

[12:18] <lizmat> afk for a few hours&

[12:30] <Geth> ¬¶ nqp: 80cc573700 | MasterDuke17++ (committed using GitHub Web editor) | docs/ops.markdown

[12:30] <Geth> ¬¶ nqp: Add $whence values to seekfh entry

[12:30] <Geth> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/80cc573700

[12:40] *** samcv left
[13:12] <jnthn> Xliff: Make them non-static.

[13:13] <jnthn> Xliff: afaik, the compiler is free to inline away `static` routines and not leave a trace of them in the .so

[13:14] <Xliff> jnthn: How can you accomplish that?

[13:15] <nine> Looks like heaptrack's custom allocator API is ridiculously simple to use - just include the header and add some calls. Alas I don't get anything to actually show up in results :/

[13:15] <Xliff> jnthn: Do you mean at the source level?

[13:15] <jnthn> Xliff: Delete the word "static" in the source and recompile?

[13:15] <Xliff> Yeah. That's what I was afraid of.

[13:16] *** hungrydonkey left
[13:17] <jnthn> Oh, you were trying to do this without modifying the source...now I understand the question more. :) But yeah, such things surely ain't API.

[13:18] <Xliff> Yes, but they should be.

[13:18] <Xliff> This is GObject based stuff, and I'm dealing with GStreamer.

[13:18] <Xliff> https://gstreamer.freedesktop.org/

[13:18] <jnthn> Are they static things in a .h (e.g. the static inline trick to replace macros)?

[13:19] <Xliff> Unfortunately it's plugin-based. No. It's using the static keyword in the function implementation in the .c

[13:21] <jnthn> Oh...so then it's not usable from other C code outside that file either...

[13:21] <jnthn> So it's not part of the C API either.

[13:22] <nine> That's the whole point of static...

[13:22] *** sena_kun joined
[13:22] <Xliff> Weirdly enough, I CAN access it if I use it in a .c and link it with the .o it's compiled in.

[13:23] <Xliff> So I tried wrapping it in a self-created .so, but that didn't work.

[13:23] *** hungryd12 joined
[13:24] <Xliff> It's been a while since I've done a lot of C and I've always avoided the use of the static keyword.

[13:24] *** Altai-man_ left
[13:24] <Xliff> It means a whole other thing in C++ where I HAVE used it.

[13:25] <Xliff> And the weird thing is that it should be a part of the API. At least as far as I understand the GObject system.

[13:25] <Xliff> Thanks for helping. Don't mean to go OT.

[13:43] *** samcv joined
[13:47] <AlexDaniel> sourceable6: 2 ... 5

[13:47] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/30e7a67/src/core.c/operators.pm6#L129

[13:49] <AlexDaniel> heh, thank you magical bot

[13:51] <AlexDaniel> huh

[13:51] *** samcv left
[13:51] <AlexDaniel> m: say (1 .. -Inf).reverse[^10]

[13:51] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf)‚ê§¬ª

[13:51] <AlexDaniel> that looks very wrong to me :)

[13:52] <AlexDaniel> c: all say (1 .. -Inf).reverse[^10]

[13:52] <committable6> AlexDaniel, https://gist.github.com/aa6da581c5d910b8ee2016c9397e3dea

[13:53] <AlexDaniel> hm

[13:53] <AlexDaniel> bisect: say (1 .. -Inf).reverse[^10]

[13:53] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=30e7a67) because on both starting points the exit code is 0

[13:53] *** samcv joined
[13:53] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/e8fb64602ae0231c45afc6b680086897

[13:53] <bisectable6> AlexDaniel, (2016-03-16) https://github.com/rakudo/rakudo/commit/ec7d8d4cc2358a4108bdab2c11ba1b57924bfc39

[13:55] <AlexDaniel> R#3595

[13:55] <linkable6> R#3595 [open]: https://github.com/rakudo/rakudo/issues/3595 (1 .. -Inf).reverse is wrong

[14:03] * AlexDaniel squints

[14:03] <AlexDaniel> m: say (Inf .. Inf)[^10]

[14:03] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(-Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf)‚ê§¬ª

[14:05] <AlexDaniel> it almost feels like I already reported it‚Ä¶ but I can't find a ticket

[14:05] <AlexDaniel> not even in old-issue-tracker

[14:06] <AlexDaniel> c: all say (Inf .. Inf)[^10]

[14:07] <committable6> AlexDaniel, https://gist.github.com/6583c1c0b3d7e9cd2edcfa8651b5797d

[14:07] <AlexDaniel> bisect: say (Inf .. Inf)[^10]

[14:07] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=30e7a67) because on both starting points the exit code is 0

[14:08] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/025cbeb14408af732678924e2eedf877

[14:08] <bisectable6> AlexDaniel, (2018-08-24) https://github.com/rakudo/rakudo/commit/a949a161446d7698e279b5e2943b28330c2eaf60

[14:09] <AlexDaniel> 6c: say (Inf ^.. Inf).reverse[^10]

[14:09] <committable6> AlexDaniel, https://gist.github.com/b2fd1a8d7ec07f790f93115dae186991

[14:10] <AlexDaniel> 6c: say (Inf ..^ Inf).reverse[^10]

[14:10] <AlexDaniel> 6c: say (Inf ..^ Inf)[^10]

[14:10] <committable6> AlexDaniel, https://gist.github.com/87e7ce4988523d5fcca3093c6a43d1de

[14:11] <committable6> AlexDaniel, https://gist.github.com/3ae27c0327ffe77818b5b28aedabe431

[14:14] <AlexDaniel> c: all say (Inf ^.. Inf).reverse[^10]

[14:15] <committable6> AlexDaniel, https://gist.github.com/64f5f7a42ddbb85cbd593df728ff1983

[14:24] <AlexDaniel> lizmat: so‚Ä¶ this is weird, turns out you *can* count down with .. if you use .reverse?

[14:25] <AlexDaniel> m: say (2.5 .. 5).reverse[^10]

[14:25] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(5 4 3 Nil Nil Nil Nil Nil Nil Nil)‚ê§¬ª

[14:25] <AlexDaniel> notice how it truly goes starting from 5

[14:25] <AlexDaniel> insead of reversing the actual values 2.5 .. 5 range would give you

[14:30] <tyil> you're reversing the Range after all

[14:31] <tyil> if you do the reverse after the [^10] it would reverse the list returned by [^10], and give you a couple Nils followed by 4.5, 3.5, 2.5

[14:47] <MasterDuke> nine: the bytecode files should end up being identical when built from master and my new branch, correct?

[14:54] <Geth> ¬¶ nqp: patrickbkr++ created pull request #611: Static nqp home hll var

[14:54] <Geth> ¬¶ nqp: review: https://github.com/Raku/nqp/pull/611

[14:55] <nine> MasterDuke: yes

[14:56] *** samcv left
[14:56] *** samcv joined
[15:21] *** Altai-man_ joined
[15:23] *** sena_kun left
[15:24] *** ufobat_ joined
[15:28] *** ufobat__ left
[15:33] <AlexDaniel> tyil: is it supposed to do that?

[15:34] <AlexDaniel> yesterday I was defending the behavior of ‚Ä¶ because it mimicked what .. does

[15:34] <AlexDaniel> but

[15:34] <AlexDaniel> m: say (2.5 ... 5).reverse

[15:34] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(4.5 3.5 2.5)‚ê§¬ª

[15:34] <AlexDaniel> m: say (2.5 ‚Ä¶ 5).reverse

[15:34] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(4.5 3.5 2.5)‚ê§¬ª

[15:34] <AlexDaniel> m: say (2.5 .. 5).reverse

[15:34] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(5 4 3)‚ê§¬ª

[15:34] <AlexDaniel> these are different, understandably, but uh‚Ä¶ huh?

[15:46] <tyil> the ... operator produces a Seq, the .. operator produces a Range

[15:46] <tyil> which, when you know that, explains the behaviour

[15:46] <tyil> but I do agree that the ... behaviour seems out of place to me at first glance

[15:47] <tyil> m: (2.5 .. 5).WHAT

[15:47] <camelia> rakudo-moar 30e7a67c5: ( no output )

[15:47] <tyil> m: (2.5 .. 5).WHAT.say

[15:47] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(Range)‚ê§¬ª

[15:47] <tyil> m: (2.5 ... 5).WHAT.say

[15:47] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(Seq)‚ê§¬ª

[16:44] <AlexDaniel> just because it produces a Range doesn't mean that its .reverse should be what it is

[16:44] <AlexDaniel> m: say (2.5 .. 5).reverse

[16:44] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(5 4 3)‚ê§¬ª

[16:44] <AlexDaniel> m: say (2.5 .. 5).list.reverse

[16:44] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(4.5 3.5 2.5)‚ê§¬ª

[16:44] <AlexDaniel> sure, it is understandable, but should it be this way?

[16:56] <AlexDaniel> c: all say (0 .. NaN)[^10]; say (NaN .. 0).reverse[^10];

[17:01] <committable6> AlexDaniel, https://gist.github.com/b1dfa4e78b589a811214916bfffe1b6f

[17:05] <AlexDaniel> m: say (Inf ... Inf)[^10]

[17:05] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf)‚ê§¬ª

[17:05] <AlexDaniel> why?

[17:05] <AlexDaniel> m: say Inf ~~ Inf

[17:05] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´True‚ê§¬ª

[17:05] <AlexDaniel> it should've stopped after the first Inf, no?

[17:06] <timotimo> m: say (5 ... 5)[^10]

[17:06] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´(5 Nil Nil Nil Nil Nil Nil Nil Nil Nil)‚ê§¬ª

[17:06] <timotimo> m: say Inf cmp Inf; say Inf <=> Inf

[17:06] <camelia> rakudo-moar 30e7a67c5: OUTPUT: ¬´Same‚ê§Same‚ê§¬ª

[17:06] <timotimo> it probably should

[17:07] <AlexDaniel> c: all say (Inf ... Inf)[^10]

[17:07] <committable6> AlexDaniel, https://gist.github.com/900516e19bd427cd935478faae994244

[17:18] *** maggotbrain joined
[17:22] *** sena_kun joined
[17:23] *** Altai-man_ left
[18:04] *** hungryd12 left
[18:30] *** camelCaser joined
[18:30] *** camelCaser left
[18:31] *** camelCaser joined
[18:49] <nine> This seems to be growing happily without bounds:

[18:49] <nine> raku -e 'class Foo { }; loop { my $foo = Foo.new; y $role := Metamodel::ParametricRoleHOW.new_type; $role.^set_body_block(-> |args {}); $role.^compose; $foo does $role; use nqp; nqp::force_gc; $i::j; }'

[18:49] <nine> raku -e 'class Foo { }; loop { my $foo = Foo.new; my $role := Metamodel::ParametricRoleHOW.new_type; $role.^set_body_block(-> |args {}); $role.^compose; $foo does $role; use nqp; nqp::force_gc; $i::j; }'

[18:51] <nine> Seems to be the source of the remaining couple of gigs of memory usage of our Cro app. This ^^^ is part of Inline::Perl5

[18:57] <timotimo> correct me if i'm wrong, but i can't getattr_o on an object with one REPR using a type object that has another REPR, right?

[18:58] <timotimo> i.e. i can't do something like getattr_o($foo, AClassThatUsesAsyncTask, AClassThatIsP6Opaque, '$!blergh')

[18:58] <timotimo> er, that's wrong

[18:58] <timotimo> i.e. i can't do something like getattr_o($foo-of-AClassThatUsesAsyncTask, AClassThatIsP6Opaque, '$!blergh')

[18:59] <timotimo> because spesh currently looks only at the 2nd argument for whether there is a spesh function in the repr or not

[18:59] <timotimo> but it's more likely that it knows the argument after that

[18:59] <timotimo> and i think those can not differ in REPR

[19:21] *** Altai-man_ joined
[19:23] *** sena_kun left
[19:47] <jnthn> nine: Mixins types are cached, so if you produce ever more roles and keeping mixing them in, then yes, the mixin cache is going to grow without bounds. Are you really repeatedly forming new parametric roles? 'cus that's costly...

[19:48] <jnthn> (I'd somewhat expect the roles to be cached somehow...)

[19:54] <MasterDuke> it looks sort of related to the native array stuff recently, where lizmat++'s attempted fix for the types not being composed ended up composing a new type every time a new native array was created

[20:24] *** Xliff left
[20:29] <nine> jnthn: that was the csv-ip5xs speedup before I started using a custom HOW. Inline::Perl5::Object's FALLBACK generates these roles to containing optimized versions of the called method. Works great for when it's always the same CSV object, less well when you get fresh objects all the time

[20:30] <nine> I really should cache those roles. It'll always be the same class and method names and Inline::Perl5 object.

[20:31] <nine> That'll make it a lot faster. Or at least a lot less slower.

[20:33] <nine> When I cache them, I can also extend them to have one role per Perl 5 class that gets extended instead of mixing in a new role for every method

[20:33] <nine> Or...ditch the whole thing and try to use Inline::Perl5::ClassHOW instead.

[20:34] <nine> Threads make the latter a little difficult. But maybe I find a good way to do it anyway.

[21:22] *** sena_kun joined
[21:22] *** Xliff joined
[21:23] <Xliff> AlexDaniel: Have a recent blin invocation that I can test?

[21:23] *** Altai-man_ left
[21:44] <Geth> ¬¶ rakudo: lizmat self-assigned (1 .. -Inf).reverse is wrong https://github.com/rakudo/rakudo/issues/3595

[21:45] <Geth> ¬¶ rakudo: lizmat self-assigned (Inf ^.. Inf).reverse is wrong https://github.com/rakudo/rakudo/issues/3597

[21:45] <Geth> ¬¶ rakudo: lizmat self-assigned Run time SORRY when dividing an Inf range by 0 https://github.com/rakudo/rakudo/issues/3598

[21:45] <Geth> ¬¶ rakudo: lizmat self-assigned (Inf .. Inf) is wrong https://github.com/rakudo/rakudo/issues/3596

[21:46] <Geth> ¬¶ rakudo: lizmat self-assigned Reversed ranges with NaN are wrong (maybe?) https://github.com/rakudo/rakudo/issues/3599

[21:46] <Geth> ¬¶ rakudo: lizmat self-assigned (Inf ... Inf) is wrong https://github.com/rakudo/rakudo/issues/3600

[21:57] *** patrickb left
[22:05] <jjatria> tyil: Nice. I'll make some changes to my commit then. Thanks!

[22:05] <jnthn> nine: If you have a very rarely updated cache that's a hash, then a good trick is to keep it in a Scalar, and only ever update it by building a new hash and cas'ing the reference; that way you don't ever need a lock to read the cache.

[22:05] <jnthn> nine: But yes, caching them should fix the leak too

[22:06] <jnthn> Also, it explains why the amount of memory eating is so high I guess; it's a non-small amount of data involved.

[23:21] <Geth> ¬¶ Blin: Xliff++ created pull request #23: - Adds creation of overview.md to Blin

[23:21] <Geth> ¬¶ Blin: review: https://github.com/Raku/Blin/pull/23

[23:21] *** Altai-man_ joined
[23:23] *** sena_kun left
[23:24] *** hungrydonkey joined
