[01:30] *** Kaiepi left
[01:31] *** Kaiepi joined
[01:34] *** sena_kun left
[01:39] *** hungrydonkey joined
[01:47] *** sena_kun joined
[02:23] *** lucasb left
[02:32] *** hungryd59 joined
[02:35] *** hungrydonkey left
[02:44] *** hungryd59 left
[02:44] *** hungrydonkey joined
[02:52] *** hungryd89 joined
[02:52] *** hungrydonkey left
[03:06] *** hungryd89 left
[03:30] *** hungrydonkey joined
[03:34] *** sena_kun left
[03:48] *** sena_kun joined
[04:20] <Geth> ¦ rakudo: vrurg++ created pull request #3481: Renaming of perl6 to rakudo

[04:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3481

[05:29] *** hungrydonkey left
[05:33] *** hungrydonkey joined
[05:34] *** sena_kun left
[05:50] *** sena_kun joined
[07:33] *** sena_kun left
[07:49] *** sena_kun joined
[07:55] *** domidumont joined
[09:04] <|Tux|> Rakudo version 2020.01-196-g73c5a25e8 - MoarVM version 2020.01.1-39-g657b536cf

[09:04] <|Tux|> csv-test-xs-20      0.369 -  0.370

[09:04] <|Tux|> csv-ip5xs           0.707 -  0.719

[09:04] <|Tux|> test-t --race       0.799 -  0.825

[09:04] <|Tux|> test-t              1.786 -  1.797

[09:04] <|Tux|> csv-ip5xs-20        5.979 -  6.068

[09:04] <|Tux|> test                7.164 -  7.439

[09:04] <|Tux|> test-t-20 --race    8.988 -  9.294

[09:04] <|Tux|> csv-parser         22.985 - 23.456

[09:04] <|Tux|> test-t-20          29.349 - 29.492

[09:30] *** unclechu joined
[09:34] *** sena_kun left
[09:48] *** sena_kun joined
[09:52] *** rba[m] joined
[09:52] *** AlexDaniel` joined
[09:52] *** CIAvash joined
[09:53] *** pmurias joined
[10:17] <lizmat> Files=1302, Tests=110832, 211 wallclock secs (28.46 usr  8.12 sys + 2946.55 cusr 276.24 csys = 3259.37 CPU)

[10:30] *** pmurias left
[10:47] <Geth> ¦ rakudo: d49a418e2d | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[10:47] <Geth> ¦ rakudo: Make sure that Cool.starts-with passes on :i, :m

[10:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d49a418e2d

[10:47] <Geth> ¦ roast: 5987cb99d0 | (Elizabeth Mattijsen)++ | S32-str/starts-with.t

[10:47] <Geth> ¦ roast: Add proper tests for Cool.starts-with

[10:47] <Geth> ¦ roast: 

[10:47] <Geth> ¦ roast: By using a Match object, which should be quite common.

[10:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5987cb99d0

[10:51] *** pmurias joined
[10:54] *** hungryd7 joined
[10:54] *** hungrydonkey left
[11:02] <Geth> ¦ rakudo: 5a716a39f6 | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[11:02] <Geth> ¦ rakudo: Make sure that Cool.ends-with passes on :i, :m

[11:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5a716a39f6

[11:03] <Geth> ¦ roast: ad1ac0d342 | (Elizabeth Mattijsen)++ | S32-str/ends-with.t

[11:03] <Geth> ¦ roast: Add proper tests for Cool.ends-with

[11:03] <Geth> ¦ roast: 

[11:03] <Geth> ¦ roast: By using a Match object, which should be quite common.

[11:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ad1ac0d342

[11:06] *** Kaiepi left
[11:06] *** domidumont left
[11:07] *** Kaiepi joined
[11:16] <Geth> ¦ rakudo: 7cb04813e5 | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[11:16] <Geth> ¦ rakudo: Make sure that Cool.substr-eq passes on :i, :m

[11:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7cb04813e5

[11:17] <Geth> ¦ roast: 7bd47162ab | (Elizabeth Mattijsen)++ | S32-str/substr-eq.t

[11:17] <Geth> ¦ roast: Add proper tests for Cool.substr-eq

[11:17] <Geth> ¦ roast: 

[11:17] <Geth> ¦ roast: By using a Match object, which should be quite common.

[11:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7bd47162ab

[11:19] <Geth> ¦ roast: 5ee3e41e38 | (Elizabeth Mattijsen)++ | 2 files

[11:19] <Geth> ¦ roast: Move some support code to the loop it belongs

[11:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5ee3e41e38

[11:34] *** sena_kun left
[11:44] <Geth> ¦ rakudo: 0761a882ab | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[11:44] <Geth> ¦ rakudo: Remove unreachable candidates

[11:44] <Geth> ¦ rakudo: 

[11:44] <Geth> ¦ rakudo: Since the nameds are optional, the candidates without nameds will

[11:44] <Geth> ¦ rakudo: never be reached.  So they can be removed.  The alternative would

[11:44] <Geth> ¦ rakudo: be to create candidates with required nameds, but that would lead

[11:44] <Geth> ¦ rakudo: to a great many candidates, and since most of the work isn't done

[11:44] <Geth> ¦ rakudo: here anyway, and one should use the method way in general anyway

[11:44] <Geth> ¦ rakudo: if one is interested in performance, leaving it like this seems

[11:44] <Geth> ¦ rakudo: to be the best compromise.

[11:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0761a882ab

[11:48] *** sena_kun joined
[12:05] *** patrickb joined
[12:11] <Geth> ¦ rakudo: b140d7a96f | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[12:11] <Geth> ¦ rakudo: Fix another Cool thinko with sub index

[12:11] <Geth> ¦ rakudo: 

[12:11] <Geth> ¦ rakudo: If the sub is called with a Str, it will already dispatch directly

[12:11] <Geth> ¦ rakudo: to Str.index, so no need to coerce to Str.  If called with another

[12:11] <Geth> ¦ rakudo: Cool object, then it will take the long route through Cool.index.

[12:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b140d7a96f

[12:15] <Geth> ¦ rakudo: c2e608b276 | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[12:15] <Geth> ¦ rakudo: Add support for :i :m to sub indices

[12:15] <Geth> ¦ rakudo: 

[12:15] <Geth> ¦ rakudo: Also, by not just taking the capture, make it about 3x as fast.

[12:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c2e608b276

[12:39] *** hungrydonkey joined
[12:42] <Geth> ¦ rakudo: a6acfd0a4b | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[12:42] <Geth> ¦ rakudo: Make sure that Cool.substr-eq passes on :i, :m

[12:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a6acfd0a4b

[12:42] *** hungryd7 left
[12:43] <Geth> ¦ roast: b548876f78 | (Elizabeth Mattijsen)++ | S32-str/indices.t

[12:43] <Geth> ¦ roast: Add proper tests for Cool.indices

[12:43] <Geth> ¦ roast: 

[12:43] <Geth> ¦ roast: By using a Match object, which should be quite common.

[12:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b548876f78

[12:44] <Geth> ¦ roast: 627b2fd211 | (Elizabeth Mattijsen)++ | S32-str/index.t

[12:44] <Geth> ¦ roast: Make output of matches better palatable

[12:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/627b2fd211

[12:59] *** domidumont joined
[13:02] <nine> [  498s] t/02-rakudo/12-proto-arity-count.t                            (Wstat: 256 Tests: 352 Failed: 1)

[13:02] <nine> [  498s]   Failed test:  82

[13:02] <nine> https://build.opensuse.org/package/live_build_log/home:niner9:rakudo-git/rakudo/openSUSE_Tumbleweed/i586

[13:13] *** domidumont left
[13:19] <Geth> ¦ rakudo: aefc851bab | (Elizabeth Mattijsen)++ | src/core.c/Cool.pm6

[13:19] <Geth> ¦ rakudo: Fix sub indices proto

[13:19] <Geth> ¦ rakudo: 

[13:19] <Geth> ¦ rakudo: Spotted by Stefan Seifert++.  Note to self: always run "make test"!

[13:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/aefc851bab

[13:19] <lizmat> afk for a few hours&

[13:33] *** Kaiepi left
[13:33] *** Kaiepi joined
[13:34] *** sena_kun left
[13:36] <pmurias> vrurg: re renaming classes in the jvm backend to we get any significant benefit in doing that?

[13:47] *** lucasb joined
[13:49] *** sena_kun joined
[14:11] <vrurg> pmurias: we must be getting away from perl6 completely. No other benefits.

[14:20] <pmurias> I think moving the files and renaming packages should work, I'm a bit hesitant to move stuff on the jvm backend when it's work on much

[14:22] <patrickb> rba: DRBD sounds like it might be a solution for how to synchronize files between the different servers.

[14:23] <vrurg> pmurias: I don't think it makes sense renaming org/perl6 subdir while it's still org.perl6 inside. I leave it on you or anybody else to rename this part then.

[14:23] <patrickb> rba: Basic principle: A single server has RW access to the filesystem, all others are read only. Files are automatically synced.

[14:25] <vrurg> patrickb: while you're here. Where was RAKULIB discussed? I can't find anything on this.

[14:25] <rba> patrickb: Ok. Did you use DRBD before? And do you know if this can be run in a docker container?

[14:26] <patrickb> rba: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-02-11#l79

[14:27] <patrickb> rba: It's part of the linux kernel and rather low level. DRBD creates a virtual block device. So it would have to happen on the host.

[14:28] <patrickb> I haven't used it before

[14:34] <vrurg> patrickb: thanks!

[15:26] *** domidumont joined
[15:33] *** sena_kun left
[15:38] *** hungrydonkey left
[15:42] *** hungrydonkey joined
[15:49] *** sena_kun joined
[16:04] *** travis-ci joined
[16:04] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Add support for :i :m to sub indices

[16:04] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/650411840 https://github.com/rakudo/rakudo/compare/b140d7a96f06...c2e608b2764b

[16:04] *** travis-ci left
[16:08] <[Coke]> Looks like that's an actual test failure.

[16:12] *** pmurias left
[17:00] *** domidumont left
[17:02] *** travis-ci joined
[17:02] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make sure that Cool.substr-eq passes on :i, :m'

[17:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/650421012 https://github.com/rakudo/rakudo/compare/c2e608b2764b...a6acfd0a4b39

[17:02] *** travis-ci left
[17:14] *** dogbert17 left
[17:33] *** sena_kun left
[17:45] *** domidumont joined
[17:48] *** sena_kun joined
[17:52] *** domidumont left
[17:55] *** domidumont joined
[18:03] *** hungrydonkey left
[18:22] *** domidumont left
[18:45] <nine> patrickb: DRBD is awesome, but it's no file distribution system. It's mirroring a block device. You cannot mount that ddvice on the secondary at all, not even read only

[18:46] <nine> File systems need to write to e.g. replay a log on mount.

[18:46] <lizmat> [Coke] I fixed the problem, Travis is just lagging...

[18:46] <patrickb> nine: Sad! It sounded so good... :-(

[18:47] <nine> It's also resrricred to 1 standby unless you use the proxy.

[18:48] <nine> DRBD shines in failover cluaters, i.e. active server dies, the other takes over

[18:49] <nine> Itvdoes support active/active configurations but you need a cluster file system to make use of that. And those of course bring their own complexities

[18:51] <nine> Good old rsync or git are plenty for distributing static assets to readbonly mirrors. If you really want to go fancy (because you have millions of files) you can use btrfs send/receive

[18:53] <patrickb> And all at once lsyncd looks a lot more attractive...

[18:54] <patrickb> nine: My hope was to make it do the syncing automatically. Calling rcync every five minutes via cron might do the job good enough...

[18:55] <nine> There's nothing wrong with old fashioned proven solutions in system administration :) Don't try to solve issues you do not yet have

[19:00] <moritz> there's also unison for bidirectional syncing (though doesn't work well for Really Big directories)

[19:04] <Geth> ¦ rakudo: 16962c8417 | (Elizabeth Mattijsen)++ | 3 files

[19:04] <Geth> ¦ rakudo: Use native ints for the Date attributes

[19:04] <Geth> ¦ rakudo: 

[19:04] <Geth> ¦ rakudo: Marginally makes Date handling faster.  At the expense of handling

[19:04] <Geth> ¦ rakudo: 1858-11-17 slower, as that is day 0 for daycount, and since daycount

[19:04] <Geth> ¦ rakudo: is now a native, 0 now indicates not being set (rather then undefined).

[19:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/16962c8417

[19:18] *** patrickb left
[19:24] <lizmat> sena_kun: how badly will Comma break if we remove the (Foo) from $?FILE ?

[19:27] <sena_kun> lizmat: I am not sure if horribly much, but even if putting Comma aside, I see such a removal as a breakage... not sure how bad one, but I imagine people can have regexes parsing it and then boom they'll break

[19:28] <lizmat> but that was what lucs was trying to do, really  :-)

[19:29] <sena_kun> I am thinking about a possible warning, but OTOH that'll probably be rather annoying... and some people never update their stuff as well.

[19:29] <lizmat> also: in the test suite, there is a lot of "use lib $?FILE.IO.parent(2).add: 'packages/Test-Helpers';"

[19:29] <lizmat> that assumes $?FILE is (Foo) free

[19:29] <sena_kun> yeah

[19:29] <lizmat> as soon as the script would be precompiled, it would break  :-()

[19:34] *** sena_kun left
[19:36] *** domidumont joined
[19:37] *** domidumont left
[19:38] *** hankache joined
[19:47] *** sena_kun joined
[19:47] <sena_kun> phew, finally I'm here, stupid connection...

[19:48] <sena_kun> lizmat: from my undelivered messaged: Comma won't be affected by this. do you suggest to put the fix into next release?

[19:48] <sena_kun> releasable6: status

[19:48] <releasable6> sena_kun, Next release in ≈7 days and ≈23 hours. 4 blockers. 0 out of 205 commits logged

[19:48] <releasable6> sena_kun, Details: https://gist.github.com/b9a405faf4ad73be1cf6f2277889650f

[19:48] <lizmat> sena_kun: yeah, I think that would be appropriate...

[19:49] <Geth> ¦ rakudo: 67022d4c67 | (Elizabeth Mattijsen)++ | src/core.c/Date.pm6

[19:49] <Geth> ¦ rakudo: Make Date.Str (default formatter) about 250x as fast

[19:49] <Geth> ¦ rakudo: 

[19:49] <Geth> ¦ rakudo: It dawned on me that using sprintf (and its known overhead) was

[19:49] <Geth> ¦ rakudo: really overkill for stringifying a Date, as we know that the values

[19:49] <Geth> ¦ rakudo: in the object strictly have a limited value range.  So use a combo

[19:49] <Geth> ¦ rakudo: of nqp::list_s, nqp::push_s, nqp::tostr_I and nqp::join for this

[19:49] <Geth> ¦ rakudo: amazing performance improvement.

[19:49] <Geth> ¦ rakudo: 

[19:49] <Geth> ¦ rakudo: I guess I should really get back to looking at sprintf's

[19:49] <Geth> ¦ rakudo: implementation again.

[19:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/67022d4c67

[19:49] * sena_kun stares at blockers

[19:49] <sena_kun> lizmat: can you whip up a patch this weekend?

[19:49] <sena_kun> then I can run blin as usual and see how it goes

[19:49] <lizmat> sena_kun: will start looking at that now

[19:50] <sena_kun> lizmat: there is still a whole Saturday, so no need to hurry

[19:55] <lizmat> hmmm....  $?FILE already has the (Foo) *during* precompilation

[20:00] <lucs> lizmat: FWIW, having 'no precompilation' in my file makes $?FILE report the wrong file :/

[20:01] <lizmat> what does it report?  "-e" ?

[20:03] <lucs> No, it reports that the file is Bar.pm6 (Bar.pm6 uses Baz.p6, which uses Foo.pm6)

[20:03] <lizmat> could you add that to the ticket ?

[20:03] <lucs> I'll try to build a mwe.

[20:03] <lizmat> ok

[20:04] <lizmat> please also add how the files are organized and where the "no precompilation" lives

[20:05] <lucs> Yep.

[20:09] <lucs> Ok, got one, will write it up...

[20:12] <[Coke]> mwe?

[20:13] <lucs> Minimal Working Example.

[20:13] <lucs> (I think LaTeX people use that term -- I like it.)

[20:18] <lucs> lizmat: https://github.com/rakudo/rakudo/issues/2539#issuecomment-586456595

[20:20] <lucs> Maybe it should be MFE (failing) :)

[20:29] <lizmat> https://stackoverflow.com/questions/60222584/concurrent-loops-finishing-on-their-own refers to an MRE

[20:30] <lizmat> sena_kun: after looking at this for the better part of an hour, I still do *not* have a clue where the (Foo) comes from

[20:32] *** hankache left
[20:33] <lizmat> nine: any ideas?

[20:33] <lizmat> maybe it is a property of CompUnit/Repository/FileSystem ?

[20:35] <lizmat> nope, it happens with zef-installed modules as well

[20:35] <lucs> Oh, I'll use MRE from now on.

[20:37] <nine> It gets added durjng precompilation by CURI and CURF

[20:39] <[Coke]> ah. mwe is like mvp.

[20:39] <lucs> v?

[20:39] <lucs> (and p?)

[20:39] <[Coke]> minimum viable product

[20:39] <lucs> Ah

[20:41] <nine> https://github.com/rakudo/rakudo/blob/67022d4c673f2a3e8bbc0157b95fccf73aa007ca/src/core.c/CompUnit/Repository/Installation.pm6#L283

[20:41] *** hankache joined
[20:41] <nine> lizmat: ^^^

[20:42] <lizmat> nine++

[20:56] *** patrickb joined
[20:57] *** patrickb left
[21:05] *** hankache left
[21:06] *** patrickb joined
[21:10] <Geth> ¦ rakudo: 2e69d7a888 | (Elizabeth Mattijsen)++ | 2 files

[21:10] <Geth> ¦ rakudo: Remove extraneous information from $?FILE

[21:10] <Geth> ¦ rakudo: 

[21:10] <Geth> ¦ rakudo: - specifically for precompiled files

[21:10] <Geth> ¦ rakudo: - fixes R#2539

[21:10] <Geth> ¦ rakudo: - tried making it an IO::Path

[21:10] <Geth> ¦ rakudo: 

[21:10] <linkable6> R#2539 [open]: https://github.com/rakudo/rakudo/issues/2539 [detrap] $?FILE shouldn't add garbage to end of filename.

[21:10] <Geth> ¦ rakudo: But that didn't stick for some reason, will need some further

[21:10] <Geth> ¦ rakudo: investigation.  But since users of $?FILE are not expecting it

[21:10] <Geth> ¦ rakudo: to be an IO, and already coerce it to an IO (like in many places

[21:10] <Geth> ¦ rakudo: in roast), this appears to be a good intermediate solution.

[21:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2e69d7a888

[21:13] *** pmurias joined
[21:14] <nine> lizmat: please revert that. This will get you backtraces without module names, i.e. the whole point for why it's "source-name" not "source-file" is lost

[21:15] <lizmat> ok, so the problem is really that it winds up in $?FILE ?

[21:15] <lizmat> it *is* spectest and test clean

[21:16] <sena_kun> lizmat: yes, backtraces should have module names

[21:16] <Geth> ¦ rakudo: 4829711aa9 | (Elizabeth Mattijsen)++ | 2 files

[21:16] <Geth> ¦ rakudo: Revert "Remove extraneous information from $?FILE"

[21:16] <Geth> ¦ rakudo: 

[21:16] <Geth> ¦ rakudo: This reverts commit 2e69d7a88879ccb75cc9f20b5f52d0bf15c86417.

[21:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4829711aa9

[21:16] <lizmat> well, it not really module names, it's the name of the file of the compunit

[21:17] <lizmat> they usually are the same, but not necessarily

[21:17] <sena_kun> yes, compunit names. :)

[21:17] *** domidumont joined
[21:21] <nine> lizmat: the proper way to fix this is by splitting the source-name into a path and a long name on the receiving side, I think in Perl6::World::current_file

[21:23] <nine> The file name and comp unit names are wildely different for installed modules, i.e. the "my backtrace is full of SHAs and I have no idea what modules those are" problem

[21:24] <lizmat> so we really want a $?FILE and a $?ORIGINAL-FILE ?

[21:26] *** domidumont left
[21:33] *** sena_kun left
[21:41] <nine> I can't think of a use for $?ORIGINAL-FILE outside of error messages

[21:41] <lizmat> if World.current-file returns the part before the ' (', should the stack trace still be ok ?

[21:42] <lizmat> because that appears to depend  on $?FILES ?

[21:43] <nine> Can't say for sure anymore. It's been too many years

[21:45] <lizmat> yeah, looks like

[21:49] *** sena_kun joined
[22:16] *** MasterDuke left
[22:17] <Geth> ¦ rakudo: 4e12365b19 | (Elizabeth Mattijsen)++ | 3 files

[22:17] <Geth> ¦ rakudo: Remove extraneous information from $?FILE

[22:17] <Geth> ¦ rakudo: 

[22:17] <Geth> ¦ rakudo: - specifically for precompiled files

[22:17] <Geth> ¦ rakudo: - fixes R#2539

[22:17] <Geth> ¦ rakudo: - only changes the $?FILE in the file

[22:17] <Geth> ¦ rakudo: - does *not* touch the internal name of the compunit

[22:17] <linkable6> R#2539 [open]: https://github.com/rakudo/rakudo/issues/2539 [detrap] $?FILE shouldn't add garbage to end of filename.

[22:17] <Geth> ¦ rakudo: - so that stack traces will still show the complete information

[22:17] <Geth> ¦ rakudo: 

[22:17] <Geth> ¦ rakudo: This is a *HACK*.  It needs a better solution.

[22:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4e12365b19

[22:17] <lizmat> nine:  better like that ?

[22:20] <lizmat> I wonder if this actually fixes pmurias' attempt at running the spectest from precompiled test-scripts

[22:21] <lizmat> cause $?FILE.IO.parent.add...  should now also work in precomped files

[22:27] * lizmat calls it a day...

[23:33] *** sena_kun left
[23:43] *** lucasb left
[23:49] *** sena_kun joined
