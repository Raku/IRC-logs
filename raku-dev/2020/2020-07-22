[00:25] *** oddp left
[00:32] *** Altai-man_ joined
[00:34] *** sena_kun left
[00:35] *** vrurg_ joined
[00:35] *** vrurg_ left
[00:38] *** vrurg_ joined
[00:47] *** vrurg left
[00:56] *** vrurg_ left
[00:57] *** vrurg joined
[01:10] *** leont left
[01:28] *** yuplushi left
[01:52] *** yuplushi joined
[02:13] *** lucasb left
[02:33] *** sena_kun joined
[02:34] *** Altai-man_ left
[03:33] *** ShimmerFairy left
[04:23] *** camelCaser left
[04:26] *** camelCaser joined
[04:32] *** Altai-man_ joined
[04:34] *** sena_kun left
[05:38] *** krunen left
[05:38] *** krunen joined
[06:28] *** patrickb joined
[06:33] *** sena_kun joined
[06:34] *** Altai-man_ left
[06:35] *** patrickb left
[06:44] *** Xliff joined
[06:47] <Xliff> o/

[06:47] <tellable6> 2020-07-20T18:22:30Z #raku <vrurg> Xliff try PM me when available.

[06:47] <Xliff> .tell vrurg For you? Available always. Email me at [email@hidden.address] if I'm not active on IRC

[06:47] <tellable6> Xliff, I'll pass your message to vrurg

[06:53] <Xliff> What's the best way to assign a CArray[uint8] from a String?

[06:54] <Xliff> s/String/Str/

[06:55] <moritz> I'm not certain, but it likely involves calling .encode on the Str

[07:05] <Xliff> my $c = $string.encode; @!a[$_] = $c[$_] for ^$c.elems

[07:05] <Xliff> ??

[07:05] <Xliff> Was hoping I could avoid the iteration.

[07:09] *** patrickb joined
[07:10] <patrickb> o/

[07:14] <patrickb> lizmat, ugexe, timotimo: I'm backlogging at the moment and saw yesterdays discussion wrt merges breaking master. Can the experience be destilled into a proposal for a sane policy of how we want to do merges? Something as safe as necessary and as easy as possible.

[07:15] <patrickb> I want to reignite the discussion in that ticket in the hopes it will be fruitful.

[07:22] *** squashable6 left
[07:23] *** squashable6 joined
[07:55] *** patrickb left
[07:57] <[Tux]> Rakudo version 2020.07-26-g1eb712d5f - MoarVM version 2020.07-3-gb56e62f18

[07:57] <[Tux]> csv-test-xs-20      0.438 -  0.447

[07:57] <[Tux]> csv-ip5xs           0.926 -  0.991

[07:57] <[Tux]> test-t --race       0.954 -  0.997

[07:57] <[Tux]> test-t              2.095 -  2.234

[07:57] <[Tux]> csv-ip5xs-20        8.717 -  9.108

[07:57] <[Tux]> test                9.058 -  9.297

[07:57] <[Tux]> test-t-20 --race   11.031 - 11.783

[07:57] <[Tux]> csv-parser         27.177 - 29.127

[07:57] <[Tux]> test-t-20          36.550 - 36.725

[08:05] <[Tux]> Was also in a teams-meeting. Now killed teams and running again

[08:32] *** Altai-man_ joined
[08:34] *** sena_kun left
[08:47] *** oddp joined
[08:48] <[Tux]> Rakudo version 2020.07-26-g1eb712d5f - MoarVM version 2020.07-3-gb56e62f18

[08:48] <[Tux]> csv-test-xs-20      0.392 -  0.402

[08:48] <[Tux]> csv-ip5xs           0.821 -  0.824

[08:48] <[Tux]> test-t --race       0.897 -  0.935

[08:48] <[Tux]> test-t              1.855 -  1.878

[08:48] <[Tux]> test                7.526 -  7.661

[08:48] <[Tux]> csv-ip5xs-20        7.827 -  7.886

[08:48] <[Tux]> test-t-20 --race    9.198 -  9.519

[08:48] <[Tux]> csv-parser         24.497 - 26.737

[08:48] <[Tux]> test-t-20          31.174 - 33.705

[09:45] *** leont joined
[10:31] <lizmat> Files=1308, Tests=113043, 216 wallclock secs (29.36 usr  8.71 sys + 3012.16 cusr 289.13 csys = 3339.36 CPU)

[10:33] *** sena_kun joined
[10:34] *** Altai-man_ left
[11:08] <Geth_> ¦ rakudo: 4ad4bd303f | (Patrick Böker)++ (committed using GitHub Web editor) | azure-pipelines.yml

[11:08] <Geth_> ¦ rakudo: Fix release pipeline to not delete the linux build (#3814)

[11:08] <Geth_> ¦ rakudo: 

[11:08] <Geth_> ¦ rakudo: Fix release pipeline to not delete the linux build

[11:08] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4ad4bd303f

[11:08] <linkable6> RAKUDO#3814 [closed]: https://github.com/rakudo/rakudo/pull/3814 Fix release pipeline to not delete the linux build

[11:10] *** oddp left
[11:11] *** MasterDuke left
[11:37] *** JJMerelo joined
[11:37] <JJMerelo> Here's us proposing a "20th anniversary calendar", with 20 articles that pick up Perl 6 RFCs, comment them, pay homage to authors and write up how they ended up in Raku with a small example https://github.com/Raku/advent/tree/master/20th

[11:38] <JJMerelo> Please propose yourself with a PR or directly if you've got the privs.

[11:57] <Geth_> ¦ roast: patrickbkr++ created pull request #655: Test for empty string match with ignore-case and ignore-mark

[11:57] <Geth_> ¦ roast: review: https://github.com/Raku/roast/pull/655

[12:01] *** patrickb joined
[12:01] <patrickb> o/

[12:01] <patrickb> lizmat: I'd like your feedback on a PR: https://github.com/rakudo/rakudo/pull/3810/files#diff-4f7fa503a091c26cdd0dc446b6a12c6fR57

[12:01] <patrickb> lizmat: I'm not sure this is the right way to do a deprecation.

[12:06] <lizmat> patrickb this would be the first deprecation in configuration land for me as well, so I actually have no idea

[12:11] <patrickb> lizmat: I'm not worried about our config system. I'm worried about users of that option in the wild.

[12:11] <patrickb> To be honest I think there won't be any, because I think that option was primarily added as a tool to help in our build process, but still...

[12:32] *** patrickb left
[12:32] *** Altai-man_ joined
[12:34] *** sena_kun left
[12:35] <lizmat> it's terra incognita I guess

[12:40] *** unclechu left
[12:40] <jnthn> JJMerelo: ooh, that's an interesting idea

[12:40] *** AlexDaniel` left
[12:41] <jnthn> I'm really curious a) if there's one about macros, b) if I can really have a macros impl that's worth something by the time I have to write the article :)

[12:46] *** unclechu joined
[13:01] *** AlexDaniel` joined
[13:08] *** Xliff left
[13:08] *** MasterDuke joined
[13:16] *** oddp joined
[13:39] *** JJMerelo left
[13:46] *** MasterDuke left
[14:33] *** sena_kun joined
[14:34] *** Altai-man_ left
[15:44] *** JJMerelo joined
[16:22] *** MasterDuke joined
[16:22] <Geth_> ¦ rakudo: b60e16367f | (Timo Paulssen)++ | src/core.c/Rakudo/Internals/JSON.pm6

[16:22] <Geth_> ¦ rakudo: import lizmat's rewrite of JSON::Fast's from-json, 4.4x as fast

[16:22] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b60e16367f

[16:23] <sena_kun> There are no backward problems?

[16:24] <timotimo> the example from the "fix nested arrays" pull request doesn't change behaviour

[16:24] <timotimo> see #raku

[16:24] <timotimo> also, we'll have an entire month to see if it causes problems in the ecosystem :) :)

[16:24] <timotimo> rakudo tests and spec tests are clean

[16:24] <timotimo> though spec tests of course don't test Rakudo::Internals::JSON

[16:24] <timotimo> not directly, anyway

[16:24] <sena_kun> I see.

[16:25] <timotimo> m: my \a = from-json('[]'); say a.elems; say a[0].elems;

[16:25] <camelia> rakudo-moar 4ad4bd303: OUTPUT: «0␤Saw 1 occurrence of deprecated code.␤================================================================================␤Sub from-json (from GLOBAL) seen at:␤  <tmp>, line 1␤Please use JSON::Fast, JSON::Tiny or JSON::Pretty from https://modul…»

[16:25] <timotimo> m: my \a = from-json('[]'); say a.elems ~ " and " ~ say a[0].elems;

[16:25] <camelia> rakudo-moar 4ad4bd303: OUTPUT: «1␤Saw 1 occurrence of deprecated code.␤================================================================================␤Sub from-json (from GLOBAL) seen at:␤  <tmp>, line 1␤Please use JSON::Fast, JSON::Tiny or JSON::Pretty from https://modul…»

[16:25] <timotimo> oops

[16:25] <sena_kun> I mean, that'd be very cool to have JSON::Fast 4x as fast, but having a non-compatible implementation which does that is not so cool.

[16:25] <timotimo> m: my \a = from-json('[]'); say a.elems ~ " and " ~ a[0].elems;

[16:25] <camelia> rakudo-moar 4ad4bd303: OUTPUT: «0 and 1␤Saw 1 occurrence of deprecated code.␤================================================================================␤Sub from-json (from GLOBAL) seen at:␤  <tmp>, line 1␤Please use JSON::Fast, JSON::Tiny or JSON::Pretty from https:/…»

[16:26] <timotimo> just need to make sure this stays the same afterwards

[16:26] <timotimo> the from-json already was from JSON::Fast, and the new impl passes all tests there

[16:28] <sena_kun> releasable6, status

[16:28] <releasable6> sena_kun, Next release in ≈31 days and ≈2 hours. There are no known blockers. Changelog for this release was not started yet

[16:28] <releasable6> sena_kun, Details: https://gist.github.com/3e7d299e688c047b35f0a8c1fbc77f20

[16:28] <lizmat> sena_kun: the from-json rewrite passed all JSON::Fast tests

[16:29] <lizmat> which the previous version in Rakudo::Internals did also

[16:29] <lizmat> timotimo++  # for importing that  :-)

[16:29] <sena_kun> lizmat, the improvements are very cool and impressive. :)

[16:30] <timotimo> may also be able to steal newer to-json impls, if the necessary adaptations (like support for Version) are applied as well

[16:30] <lizmat> sena_kun: most of the improvement comes from not relying on regexes anymore

[16:31] <timotimo> can't wait for JSON::Tiny to perform as well as JSON::Fast

[16:31] <lizmat> the new algorithm is basically: when a " is encountered, look for the next " that has an even number of \ in front of it

[16:31] <lizmat> then convert that to NFD including the opening "

[16:31] <lizmat> drop the first codepoint (this gets rid of the opening " but *not* of its possible decorations)

[16:32] <lizmat> there used to be quite a lot of code to handle that, it became very easy to do once it was NFD  :-)

[16:32] *** Altai-man_ joined
[16:32] <lizmat> then handle all escapes using integer arithmetic, and convert the resulting NFD back to a string at the end

[16:34] *** sena_kun left
[16:37] <timotimo> feel very free to prove me wrong about the @ = from-json('[]') thing

[16:37] <timotimo> m: say "hi"

[16:37] <camelia> rakudo-moar b60e16367: OUTPUT: «hi␤»

[16:37] <timotimo> m: my \a = from-json('[]'); say a.elems ~ " and " ~ a[0].elems;

[16:37] <camelia> rakudo-moar b60e16367: OUTPUT: «0 and 1␤Saw 1 occurrence of deprecated code.␤================================================================================␤Sub from-json (from GLOBAL) seen at:␤  <tmp>, line 1␤Please use JSON::Fast, JSON::Tiny or JSON::Pretty from https:/…»

[16:38] <timotimo> getting the same output between these two version

[16:43] <Altai-man_> weekly: https://twitter.com/koto_san_kana/status/1285977891466088449

[16:43] <notable6> Altai-man_, Noted! (weekly)

[16:51] <nine> This is a really odd build failure that crops up from time to time: https://build.opensuse.org/package/live_build_log/home:niner9:rakudo-git/perl6-Cro-Core/openSUSE_Factory_ARM/aarch64

[16:54] <lizmat> Altai-man_: retwat

[16:54] *** MasterDuke left
[17:37] *** JJMerelo left
[17:44] *** tyil left
[17:44] *** tyilanmenyn joined
[17:45] *** tyilanmenyn is now known as tyil

[18:10] *** lucasb joined
[18:27] *** Kaiepi left
[18:27] *** Kaiepi joined
[18:33] *** sena_kun joined
[18:34] *** Altai-man_ left
[18:38] *** Kaiepi left
[18:38] *** Kaiepi joined
[19:04] *** lichtkind joined
[19:22] *** MasterDuke joined
[19:41] *** MasterDuke left
[20:29] *** squashable6 left
[20:31] *** squashable6 joined
[20:31] *** Xliff joined
[20:33] *** Altai-man_ joined
[20:34] *** sena_kun left
[20:36] <Xliff> \o

[21:06] *** Xliff left
[21:36] <timotimo> Kaiepi: you want to elaborate a little on what exactly https://github.com/rakudo/rakudo/pull/2968 needed, i.e. to check if my last push to RI's from-json broke this again? maybe a test or two that we put in rakudo's t/ folder?

[22:16] *** lichtkind left
[22:22] <Kaiepi> timotimo, iirc the bug there was that assignments were being made where binding would've been more appropriate

[22:23] <Kaiepi> my @ = from-json '[]' would return [[]] before, but [] with this

[22:25] <timotimo> is this test code the right way to check it?

[22:25] <timotimo> m: my \a = from-json('[]'); say a.elems ~ " and " ~ a[0].elems;

[22:25] <camelia> rakudo-moar b60e16367: OUTPUT: «0 and 1␤Saw 1 occurrence of deprecated code.␤================================================================================␤Sub from-json (from GLOBAL) seen at:␤  <tmp>, line 1␤Please use JSON::Fast, JSON::Tiny or JSON::Pretty from https:/…»

[22:25] <timotimo> c: 2018.12 my \a = from-json('[]'); say a.elems ~ " and " ~ a[0].elems;

[22:25] <committable6> timotimo, https://gist.github.com/e0de404a2e5a087e164eec39f859b273

[22:26] <timotimo> hum

[22:26] <timotimo> c: releases my \a = from-json('[]'); say a.elems ~ " and " ~ a[0].elems;

[22:26] <committable6> timotimo, https://gist.github.com/368f8876cdb6f4950bdff1f632e803ec

[22:27] <timotimo> Kaiepi: this code is not sufficient to get the problem

[22:27] <timotimo> help

[22:27] <timotimo> c: releases my @a = from-json('[]'); say @a.elems ~ " and " ~ @a[0].elems;

[22:27] <committable6> timotimo, https://gist.github.com/876adfc2c64f1cab301b84b1f1cce243

[22:30] <Kaiepi> that last one should work

[22:30] <timotimo> m: my @a = from-json('[]'); say @a.elems ~ " and " ~ @a[0].elems; dd @a;

[22:30] <camelia> rakudo-moar b60e16367: OUTPUT: «0 and 1␤Array @a = []␤Saw 1 occurrence of deprecated code.␤================================================================================␤Sub from-json (from GLOBAL) seen at:␤  <tmp>, line 1␤Please use JSON::Fast, JSON::Tiny or JSON::Pre…»

[22:30] <timotimo> Array @a = [], does that mean we have [] or [[],]?

[22:35] *** Altai-man_ left
[22:35] <lizmat> hmmm.. did I optimize away an itemization ?

[22:35] <timotimo> the test suite should have shown that though?

[22:36] <lizmat> apparently not ?

[22:36] <timotimo> if not, that's a problem in the test suite, but also gives us carte blanche to break user code and say "we never guaranteed it to work this way!"

[22:36] <lizmat> perhaps the test-suite needs more is-deeply

[22:36] <lizmat> maybe we need to do a Blin run for modules depending on JSON::Fast ?

[22:36] <timotimo> almost all of them :D

[22:37] <lizmat> well, then that should be easy :-)

