[00:07] <AlexDaniel> Xliff: okay, I see it

[00:07] *** hungrydonkey joined
[00:08] <AlexDaniel> hmm

[00:09] <AlexDaniel> it gets stuck on `Testing Foo::Regressed for flappiness`

[00:09] <AlexDaniel> but why

[00:11] <AlexDaniel> Xliff: meanwhile maybe try some module that works, like JSON::Fast

[00:11] <AlexDaniel> maybe that succeeds‚Ä¶

[00:11] <AlexDaniel> Xliff: it's a bit weird because it used to work, and I'm pretty sure it still works fro Altai-man

[00:11] <AlexDaniel> for*

[00:22] <tyil> .

[00:26] <AlexDaniel> Xliff: actually, it seems to be working just fine

[00:27] <AlexDaniel> Xliff: it feels quite a bit slower than it ever was

[00:28] <AlexDaniel> it could possibly be something that regressed in rakudo or zef

[00:28] <AlexDaniel> but otherwise it is functional, just slow

[00:28] <AlexDaniel> try --deflap=1 instead of the default 4

[00:28] <AlexDaniel> and you'll probably see some progress faster

[00:28] <AlexDaniel> Xliff: also, if you terminated it in the past, it's possible you'll need this bit: rm -rf /tmp/whateverable/rakudo-moar/*

[00:36] <Xliff> Yeah. Just came back from dinner and it's still trying Foo::Regressed

[00:37] <Xliff> OK. JSON::Fast worked.

[00:38] <Xliff> Still need a case that will show me an error response so that I can see what I'd need to capture.

[00:43] <AlexDaniel> Xliff: run it for just Foo::Regressed but with --deflap=1

[00:43] <AlexDaniel> then it'll finish much faster

[00:44] <AlexDaniel> we can come up with a case that's much faster but doesn't involve a module‚Ä¶ but involving a module is kinda the point

[00:44] <AlexDaniel> also, why is it so slow???

[00:48] *** MasterDuke left
[00:50] <AlexDaniel> Xliff: OK, the original command takes 15 minutes to finish here

[00:51] <AlexDaniel> that's actually not as slow as it felt :)

[00:53] <Xliff> Started it's looping behavior.

[00:53] <Xliff> It's at 15 minutes and still going.

[01:01] <AlexDaniel> Xliff: one of the last lines should've been ‚Äúü•ûü•ûü•û Testing Foo::Regressed for flappiness‚Äù

[01:01] <AlexDaniel> Xliff: is that correct?

[01:02] <Xliff> Yes.

[01:03] <Xliff> https://gist.github.com/Xliff/6bcb7966c76d800657830d730a2dce6d

[01:04] <AlexDaniel> btw it's not looping, it is just printing some info periodically

[01:06] <AlexDaniel> ah, it's already bisecting

[01:06] <AlexDaniel> so just wait

[01:06] <AlexDaniel> or‚Ä¶ not

[01:06] <AlexDaniel> hold on

[01:06] <Xliff> Last time I waited all night and it still hadn't finished.

[01:07] <AlexDaniel> Xliff: right, I see, it's not trying to fetch other builds, so it is indeed stuck somehow

[01:07] <AlexDaniel> it's very close though

[01:07] <AlexDaniel> so you have both zstd and lrzip installed, right?

[01:11] <Xliff> No. Was missing lrzip

[01:12] <AlexDaniel> that might be the problem, but I'm surprised that it doesn't propagate anywhere

[01:12] <AlexDaniel> whateverable itself does check if lrzip is installed and complains otherwise

[01:12] <AlexDaniel> so hmm

[01:16] *** Kaiepei left
[01:21] *** Kaiepi joined
[01:26] <Xliff> Weird. Updated gist https://gist.github.com/Xliff/6bcb7966c76d800657830d730a2dce6d

[01:27] <AlexDaniel> Xliff: nice! It finished!

[01:28] <AlexDaniel> Xliff: now check the output/ folder to see stuff!

[01:40] <Xliff> OK, so overview acts as a summary of the entire run, then there is an output file for each module processed.

[01:40] <AlexDaniel> yeah

[01:41] <AlexDaniel> and that's how it looks when you run it on the whole ecosystem: https://gist.github.com/AlexDaniel/bfe7920a9ea1fd7b86e8e6106283a79c#file-overview

[01:41] <Xliff> I can get much of what I need from data.json, however there would be one thing that would be helpful

[01:41] <AlexDaniel> output files are generated only for modules that required bisection

[01:41] <Xliff> data.json should include a bisected hash if one is found. Then I can process everything in one file.

[01:42] <Xliff> And with that, there is no reason why I can start creating issues for each repo.

[01:43] <AlexDaniel> Xliff: shouldn't we just modify blin.p6 to generate whatever we need? It probably has more data internally

[01:43] <Xliff> Is that where I can add the bisect hash to data.json output? If so, then yes.

[01:43] <AlexDaniel> and we need just 1 rakudo ticket, because it's rakudo bugs that we discover

[01:44] <Xliff> You should be able to do that rather quickly, yes?

[01:44] <Xliff> OK. Makes it even easier. 

[01:45] <AlexDaniel> well, either we should move everything out of blin.p6 so that all files are generated separately, or we should generate everything in blin.p6

[02:11] *** ufobat__ joined
[02:14] <Xliff> You telling me blin does not generate data.json?

[02:14] <Xliff> Does blin not generate overview, either?

[02:15] *** ufobat_ left
[02:15] <Xliff> AlexDaniel: I will have to look into this. Weekend at earliest.

[02:20] <AlexDaniel> Xliff: the point is that blin.p6 script generates all files. If you want to generate more files, it probably makes sense to add code to blin.p6. If you think that this kind of stuff should be separate, then you're free to implement it as a separate script that works on data.json, but then please move other stuff from blin.p6 so that it's also separate

[02:21] <Xliff> AlexDaniel: My hope is that, with one minor modification to blin, that my changes can be isolated into a separate script that blin could then execute.

[02:21] <Xliff> I think we are splitting hairs, though. All I need in data.json is a bisect hash, if it exists. Then I'm off to the races.

[02:21] <Xliff> Everything else will be web-based.

[02:22] <AlexDaniel> yeah but some files are generated in blin.p6 and you want to write a separate script. That's fine but I don't like the idea of having half done one way and another half done differently

[02:22] <Xliff> WTAF?

[02:23] <Xliff> NO files will be generated by a separate script.

[02:23] <Xliff> I just want the bisect hash in data.json. Is there a technical reason why that is a problem?

[02:23] <AlexDaniel> but you say you want to work on data.json

[02:23] <Xliff> Yes. As an INPUT

[02:24] <AlexDaniel> in blin.p6 you have *all* the data in memory, you don't need to write to a file so that you immediately read from it to get the data you need‚Ä¶

[02:24] <Xliff> OK, then. But this is logic separate from the entirety of blin.

[02:25] <AlexDaniel> right, I'm fine with having a separate script that generates stuff

[02:25] <AlexDaniel> it can be called from blin.p6 automatically but that's not a big deal I guess

[02:25] <AlexDaniel> but then we probably want to move other stuff out of blin.p6‚Ä¶

[02:26] <Xliff> AlexDaniel: I'm agnostic. Let me make these changes and then you can comment on how you want it all to fall into place, however arguing about this stuff now is pointless.

[02:26] <AlexDaniel> namely .dot file and svg generation

[02:26] <AlexDaniel> ok!

[02:28] <AlexDaniel> Xliff: %json-data{$name}<bisected>  = ~.bisected;

[02:29] <AlexDaniel> Xliff: that should work, alternatively we can figure out how to dump the whole object with all attributes

[02:29] <Xliff> Thanks!

[02:40] *** hungrydonkey left
[02:42] *** hungrydonkey joined
[02:48] *** hungryd5 joined
[02:49] *** hungrydonkey left
[03:37] *** upupbb-user3 left
[03:45] *** Xliff left
[05:09] *** sourceable6 left
[05:09] *** bloatable6 left
[05:09] *** releasable6 left
[05:09] *** shareable6 left
[05:09] *** quotable6 left
[05:09] *** statisfiable6 left
[05:09] *** nativecallable6 left
[05:09] *** committable6 left
[05:09] *** linkable6 left
[05:09] *** unicodable6 left
[05:09] *** greppable6 left
[05:09] *** bisectable6 left
[05:09] *** tellable6 left
[05:09] *** reportable6 left
[05:09] *** evalable6 left
[05:09] *** coverable6 left
[05:09] *** benchable6 left
[05:09] *** squashable6 left
[05:09] *** notable6 left
[05:10] *** committable6 joined
[05:10] *** notable6 joined
[05:10] *** squashable6 joined
[05:10] *** greppable6 joined
[05:10] *** benchable6 joined
[05:10] *** releasable6 joined
[05:11] *** nativecallable6 joined
[05:11] *** bisectable6 joined
[05:11] *** unicodable6 joined
[05:11] *** linkable6 joined
[05:11] *** tellable6 joined
[05:11] *** coverable6 joined
[05:11] *** statisfiable6 joined
[05:11] *** reportable6 joined
[05:11] *** bloatable6 joined
[05:12] *** sourceable6 joined
[05:12] *** quotable6 joined
[05:12] *** shareable6 joined
[05:12] *** evalable6 joined
[05:41] *** upupbb-user3 joined
[06:08] *** hungryd5 left
[06:11] *** hungrydonkey joined
[07:13] *** dogbert17 left
[07:14] *** dogbert17 joined
[07:18] *** MasterDuke joined
[07:37] *** hungrydonkey left
[07:53] *** sena_kun joined
[08:09] *** sena_kun left
[08:24] *** sena_kun joined
[09:13] <[Tux]> Rakudo version 2020.02.1-239-g170add262 - MoarVM version 2020.02.1-47-g3c3ad0678

[09:13] <[Tux]> csv-test-xs-20      0.364 -  0.369

[09:13] <[Tux]> csv-ip5xs           0.688 -  0.711

[09:13] <[Tux]> test-t --race       0.964 -  0.974

[09:13] <[Tux]> test-t              1.929 -  2.026

[09:13] <[Tux]> csv-ip5xs-20        6.028 -  6.278

[09:13] <[Tux]> test                7.516 -  7.524

[09:13] <[Tux]> test-t-20 --race    9.536 -  9.650

[09:13] <[Tux]> csv-parser         24.112 - 24.547

[09:13] <[Tux]> test-t-20          31.211 - 31.301

[09:27] *** sena_kun left
[10:16] *** MasterDuke left
[10:18] *** MasterDuke joined
[10:29] *** AlexDani` joined
[10:29] *** AlexDaniel left
[10:30] *** AlexDani` is now known as AlexDaniel

[10:30] *** AlexDaniel left
[10:30] *** AlexDaniel joined
[10:36] *** lizmat joined
[10:40] <lizmat> Files=1305, Tests=111219, 205 wallclock secs (28.17 usr  7.94 sys + 2890.99 cusr 269.40 csys = 3196.50 CPU)

[11:00] <releasable6> Next release in ‚âà3 days and ‚âà7 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:24] <lizmat> .ask sena_kun should we just start changing https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft ?  It seems to be for 2020.02 ?

[11:24] <tellable6> lizmat, I'll pass your message to sena_kun

[11:56] <lizmat> bisectable6: sub s () { my @A = 1, { @A[1] } ... * }; s()[1]

[11:57] <bisectable6> lizmat, Bisecting by exit signal (old=2015.12 new=170add2). Old exit signal: 1 (SIGHUP)

[11:58] <bisectable6> lizmat, bisect log: https://gist.github.com/27af4c65f3114050b0ead23a3c44dca9

[11:58] <bisectable6> lizmat, (2017-01-10) https://github.com/rakudo/rakudo/commit/e182deb5299076ef8c8cd40514b8817eaafbc92b

[11:59] <jnthn> bisectable6: 2020.1 HEAD sub s () { my @A = 1, { @A[1] } ... * }; s()[1]

[11:59] <bisectable6> jnthn, On both starting points (old=2015.12 new=170add2) the exit code is 1 and the output is identical as well

[11:59] <bisectable6> jnthn, https://gist.github.com/3a6f9259defee6bc15088fdee91ea321

[11:59] <jnthn> bisectable6: 2020.01 HEAD sub s () { my @A = 1, { @A[1] } ... * }; s()[1]

[11:59] <bisectable6> jnthn, Using old=2020.01 new=HEAD in an attempt to do what you mean

[11:59] <bisectable6> jnthn, On both starting points (old=2020.01 new=170add2) the exit code is 1 and the output is identical as well

[11:59] <bisectable6> jnthn, Output on both points: ¬´This continuation has already been invoked‚ê§  in block <unit> at /tmp/OyLvv5qWxL line 1‚ê§‚ê§¬ª

[12:01] <lizmat> R#3570 mentions 87226876a2d06c8 as the last good commit, but that also fails for me ?

[12:01] <linkable6> R#3570 [open]: https://github.com/rakudo/rakudo/issues/3570 Lazy lists result in variety of errors, usually fatal

[12:01] <linkable6> (2020-03-21) https://github.com/rakudo/rakudo/commit/87226876a2 Convert `nqp::istrue` into `nqp::elems`

[12:05] <lizmat> going back to 80f2aebff482da6e6758 , which was the last commit before my work on SEQUENCE, also shows the problem

[12:05] <linkable6> (2020-03-20) https://github.com/rakudo/rakudo/commit/80f2aebff4 Fix performance issue on native shaped arrays

[12:05] *** SqrtNegInf joined
[12:07] <SqrtNegInf> You are right surely about commit 87226876a2d06c8

[12:07] <linkable6> (2020-03-21) https://github.com/rakudo/rakudo/commit/87226876a2 Convert `nqp::istrue` into `nqp::elems`

[12:08] <SqrtNegInf> Looking at the timeline again, I think that commit happened after my last pull/build/test cycle

[12:15] *** MasterDuke left
[12:41] *** MasterDuke joined
[13:03] <Geth> ¬¶ nqp: f6eeaf74bf | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[13:03] <Geth> ¬¶ nqp: Bump MoarVM to get recent OSR fixes

[13:03] <Geth> ¬¶ nqp: review: https://github.com/Raku/nqp/commit/f6eeaf74bf

[13:08] *** MasterDuke left
[13:15] <Geth> ¬¶ rakudo: 35488134c0 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[13:15] <Geth> ¬¶ rakudo: Bump NQP to get latest MoarVM OSR fixes

[13:15] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/35488134c0

[13:26] <Geth> ¬¶ rakudo: b7b9358fc5 | (Elizabeth Mattijsen)++ | src/core.c/Seq.pm6

[13:26] <Geth> ¬¶ rakudo: Simplify Seq.Numeric/Int

[13:26] <Geth> ¬¶ rakudo: 

[13:26] <Geth> ¬¶ rakudo: The code in question would call Seq.elems in the end anyway, so why

[13:26] <Geth> ¬¶ rakudo: not do that directly.

[13:26] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/b7b9358fc5

[13:37] *** MasterDuke joined
[13:46] *** upupbb-user3 left
[13:50] *** squashable6 left
[13:53] *** squashable6 joined
[13:59] <Kaiepi> for Trait::Traced, would it be sane to handle tracing of assignments to scalar values by wrapping their container descriptor with a custom one?

[13:59] <Kaiepi> it seems to behave ok with `is copy`, `is raw`, other variables bound to traced variables, but this is a bit out of my realm

[14:00] <lizmat> Kaiepi: feels to me that's a valid approach and one of the reasons a container descriptor is just code nowadays, rather then being some hidden C code  :-)

[14:02] <Kaiepi> perfect!

[14:02] <Kaiepi> variable and attribute tracing coming soon then (tm)

[14:14] <jnthn> Umm....container descriptor is certainly still an impl detail so far as I'm concerned.

[14:14] <jnthn> As in, you can do it, but if a future opt breaks it, then it's for you to fix your module.

[14:16] <jnthn> The reason to write it in high level code, not C, was to make things faster.

[14:19] * [Coke] loves that that works. :)

[14:19] <jnthn> When your optimizer gets smart enough, it really wants to know everything :)

[14:19] *** lucasb joined
[14:24] *** MasterDuke left
[14:31] <[Coke]> I know I said this ages ago about the JVM, but: do we think we'd get any more adoption if we had a .net core backend for Rakudo?

[14:31] <Geth> ¬¶ rakudo: vrurg self-assigned &nextcallee can misbehave with wrapped routines in threaded code https://github.com/rakudo/rakudo/issues/3569

[14:31] <[Coke]> when I wanted the JVM backend, we eventually ended up avoiding the issue by running in docker when we needed it.

[14:31] <[Coke]> but I wonder if .net core *interop* would be a selling point

[14:32] *** hoelzro joined
[14:34] <lizmat> I guess the one to answer the question on technical feasability, would be jnthn, having built 2 VM's and having experience with .Net

[14:37] *** MasterDuke joined
[14:37] <[Coke]> ofc.

[14:37] <[Coke]> I think for most of my stuff, being able to run moarvm in a docker container if needed is fine.

[14:55] <jdv79> is a .net backend worth it?  does anyone use the jvm backend for real?

[14:56] <timotimo> java interop hasn't really been advertised anywhere near enough

[15:14] <lizmat> TIL where TimToady stole :foo syntax from: https://www.tutorialspoint.com/lisp/lisp_file_io.htm

[15:23] <jnthn> https://github.com/rakudo/rakudo/issues/3554 is an odd one (trying to debug it, mostly just getting confused...)

[15:35] <nine> Today I've spent several hours trying to debug memory leaks in Inline::Perl5. So far I've failed to identify them. What I have found however was a memory leak in good ol' Data::Dumper: https://github.com/Perl/perl5/pull/17673

[15:35] <nine> Has been there since at least 1998 :)

[15:36] <[Coke]> nine: Nice!

[15:38] <nine> The other lesson of today is that it is notoriously hard to determine whether something leaks or not. Simple examples reach a plateau within a couple of minutes.

[15:38] <nine> But do they stay there? Apparently not

[15:38] <nine> I've seen RSS staying constant for such processes for half an hour before they suddenly grew again

[15:39] <nine> That's half an hour of just: raku -e 'use lib:from<Perl5> "t/lib"; use TestMemory:from<Perl5>; loop { test_return_string; }'

[15:39] <jdv79> how much mem are you seeing leaked and over what time period - i'm assuming in prod?

[15:40] <jnthn> Ahhh. It turns out that a /foo/ style regex does *not* get its own $/ - intentionally, but I've no idea *why*.

[15:41] <nine> A simple REST API implemented using Cro and Inline::Perl5 grows to > 6 GiB after just 20K requests

[15:41] <jnthn> Giving it its own one does fix the issue.

[15:41] *** Kaiepi left
[15:41] *** Kaiepi joined
[15:41] <jnthn> But now I need to see what the spectests think of that, 'cus surely that was being elided for a reason...

[15:42] <jdv79> nine: that's crazy

[15:43] <jnthn> nine: Does the leak go away with Inline::Perl5 isn't used?

[15:45] <jnthn> `make test` passes with the "give /foo/ its own $/" match, now for spectest...

[15:46] *** sena_kun joined
[15:46] *** sena_kun left
[15:47] *** sena_kun joined
[15:47] <nine> If it were easy to remove Inline::Perl5 we wouldn't use it at all :) But the frontend application uses it much less and also leaks much less.

[15:48] <[Coke]>  match, now for spectest...

[15:48] <[Coke]> 11:47 < nine> If it were easy to remove Inline::Perl5 we wouldn't use it at all :) But the frontend application uses it

[15:48] <[Coke]> Oops. managed to cut and paste instead of scroll down. :)

[15:54] <jnthn> nine: ooc, did you look at how often it's doing full collections and maybe at the decision making around https://github.com/MoarVM/MoarVM/blob/master/src/gc/orchestrate.c#L396 if that looks a bit off?

[15:55] <nine> not yet

[16:10] <nine> 400M RSS and only one full collection so far

[16:11] <nine> That was on GC run 2698 (currently > 7K runs)

[16:14] <nine> Second full collection at GC run 11553

[16:14] <nine> 700M RSS

[16:15] <jnthn> Hm, seems I can fix #3554 without any broken spectests by simply deleting some code... :)

[16:18] * MasterDuke wonders if jnthn++ can turn that into a streak, and if so, how many bugs he can solve by just deleting code...

[16:18] <nine> all of them!

[16:24] <Geth> ¬¶ rakudo: 1e0474d4fc | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[16:24] <Geth> ¬¶ rakudo: Give all regexes their own $/

[16:24] <Geth> ¬¶ rakudo: 

[16:24] <Geth> ¬¶ rakudo: We would elide this for forms made from quote constructs. It's unclear

[16:24] <Geth> ¬¶ rakudo: why we did this; there are no spectests whatsoever that depend on such

[16:24] <Geth> ¬¶ rakudo: behavior and we'd clobber what was in the $/ in most cases anyway. The

[16:24] <Geth> ¬¶ rakudo: real issue this caused, however, was in `m:g/... {}/`, where the `{}`

[16:24] <Geth> ¬¶ rakudo: causes a match object sync into `$/`. When it used the outer one, it

[16:24] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 5 more lines‚Ä¶>

[16:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/1e0474d4fc

[16:25] <Geth> ¬¶ roast: 200f41af68 | (Jonathan Worthington)++ | S05-modifier/global.t

[16:25] <Geth> ¬¶ roast: Test m:g/... { code block }/ gets the $/ correct

[16:25] <Geth> ¬¶ roast: 

[16:25] <Geth> ¬¶ roast: Covers https://github.com/rakudo/rakudo/issues/3554.

[16:25] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/200f41af68

[16:26] *** Altai-man_ joined
[16:27] <jnthn> That took longer to find than I'd have hoped...

[16:28] *** sena_kun left
[16:29] <[Coke]> jnthn++

[16:30] <nine> jnthn: forcing a full collection every 100 GC runs does help quite a bit with ~530M RSS at GC run 12K compared to 700M before

[16:31] <nine> I find it odd that we keep promoting objects when the program is just: use lib:from<Perl5> "t/lib"; use TestMemory:from<Perl5>; loop { TestMemory.new; }

[16:37] <nine> Do we have a working memory profiler again?

[16:39] <[Coke]> does the promotion only happen with that module? (I assume it's hanging on to a ref somewhere?)

[16:40] <nine> TestMemory.new is just: sub new { return bless {}; }

[16:43] <[Coke]> O_o;

[16:49] <MasterDuke> nine: i've used heaptrack successfully before, but it only gives information at the moarvm level

[16:53] <nine> MasterDuke: https://github.com/KDE/heaptrack?

[16:53] <MasterDuke> yep

[16:54] *** unclechu joined
[16:54] *** rba[m] joined
[16:55] <jnthn> nine: Is --profile=heap and looking at the output broken, or just too much data to be useful?

[16:55] <jnthn> uh, using the analysis tool to look at the output

[16:56] *** CIAvash joined
[16:56] <MasterDuke> i usually use --full_cleanup so the leaked numbers are better, but programs don't always exit cleanly with it. at one point i spent a little while trying to figure out what was causing the problem, but i don't understand those parts of moarvm well enough

[16:57] <MasterDuke> btw, it's --profile-kind=heap now

[16:59] <nine> Oh, got it to work with --profile=testmemory.mvmheap

[17:00] <MasterDuke> oh right, i think timotimo suggested (and i guess i implemented?) setting the kind based on the filename

[17:05] *** MasterDuke left
[17:18] <Geth> ¬¶ rakudo: vrurg self-unassigned &nextcallee can misbehave with wrapped routines in threaded code https://github.com/rakudo/rakudo/issues/3569

[17:23] <Altai-man_> releasable6, status

[17:23] <releasable6> Altai-man_, Next release in ‚âà3 days and ‚âà1 hour. 5 blockers. Changelog for this release was not started yet

[17:23] <releasable6> Altai-man_, Details: https://gist.github.com/a4f0a0822d7bcf2de2c2138b8364dbb3

[17:24] <nine> This is interesting: according to moar-ha the heap size stays pretty much the same between 48,009,681 and 48,087,105 bytes yet according the the GC debug output, we promote bytes to gen2 all the time

[17:26] <jnthn> nine: Interesting. So is the heap profile missing a reachable thing, or not accounting for something unmanaged that is growing, or are we actually mismanaging memory somewhere that causes us to eat more even when the volume of reachable object isn't growing?

[17:27] <jnthn> (Not asking 'cus you'll know, just wondering out loud...)

[17:27] <Geth> ¬¶ rakudo: 49d1dcd30c | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[17:27] <Geth> ¬¶ rakudo: Optimize out return decont check on returning self

[17:27] <Geth> ¬¶ rakudo: 

[17:27] <Geth> ¬¶ rakudo: We know that is always decontainerized already.

[17:27] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/49d1dcd30c

[17:29] <nine> 40M of heap already sounds suspicious in a program with 240M RSS

[17:34] *** FROGGS joined
[17:48] *** MasterDuke joined
[17:50] <MasterDuke> vrurg: spesh is not really my area of expertise, jnthn is probably the best bet (re R3569)

[17:50] <MasterDuke> R#3569

[17:50] <linkable6> R#3569 [open]: https://github.com/rakudo/rakudo/issues/3569 [BLOCKER][MoarVM][regression] &nextcallee can misbehave with wrapped routines in threaded code

[17:51] <vrurg> MasterDuke: remind me, pls, does MVM_SPESH_DISABLE does something to moar itself? Or it's only turns off spesh plugin invokation?

[17:52] <MasterDuke> i think it turns off more than just the plugins, but i'm not 100% sure of that

[17:53] <nine> It turns off all of spesh (including the JIT)

[17:53] <nine> We do not collect any statistics and do not start the spesh thread

[18:03] <vrurg> JIT isn't guilty, this I tested. Ok, it does look like I need somebody with spesh expertise to look at 3569.

[18:13] <SqrtNegInf> t

[18:17] *** leont joined
[18:27] *** sena_kun joined
[18:29] *** Altai-man_ left
[18:48] *** squashable6 left
[18:50] *** Altai-man_ joined
[18:51] *** squashable6 joined
[18:53] *** sena_kun left
[19:06] <MasterDuke> vrurg: i don't really understand your recent dispatcher changes, but in src/spesh/facts.c there is a case for nextdispatcherfor and in src/spesh/inline.c there is a case for takenextdispatcher. why don't both those files have both cases?

[19:11] <lizmat> jnthn: re 49d1dcd30c  reminds me on how difficult it would be to add (--> self) as allowable in a signature

[19:11] <linkable6> (2020-03-25) https://github.com/rakudo/rakudo/commit/49d1dcd30c Optimize out return decont check on returning self

[19:12] <AlexDaniel> lizmat: is linkable useful or annoying in cases like this?

[19:12] <lizmat> just fine as far as I'm concerned...

[19:12] <MasterDuke> i like it

[19:12] <AlexDaniel> btw it supports all repos

[19:13] <lizmat> AlexDaniel++   # didn't know that

[19:13] <MasterDuke> i did notice that yesterday when i posted a count from a spesh log and it linked to some repo i'd never heard of

[19:13] <AlexDaniel> hahaha

[19:14] <AlexDaniel> https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-03-24#l70

[19:14] <AlexDaniel> haha

[19:15] <AlexDaniel> yeah I should probably make it ignore all-numeric shas that are weirdly too long

[19:15] <AlexDaniel> it already does that, if I'm not mistaken, just not enough I guess

[19:19] <vrurg> MasterDuke: because I was half-blindly cloning what was done for setdispatcherfor/takedispatcher

[19:20] <MasterDuke> hm, probably need jnthn, timotimo, or nine to take a look

[19:20] <vrurg> MasterDuke: What I did not understand I didn't do.

[19:22] <vrurg> MasterDuke: most likely.

[19:42] *** MasterDuke left
[19:53] <Geth> ¬¶ rakudo: 136087e774 | (Ben Davies)++ | src/core.c/control.pm6

[19:53] <Geth> ¬¶ rakudo: Correct error string passed to nqp::p6finddispatcher in &nextcallee

[19:53] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/136087e774

[19:55] *** MasterDuke joined
[19:55] *** MasterDuke left
[19:55] *** MasterDuke joined
[20:03] <Geth> ¬¶ rakudo: 0f97a7f5fe | (Elizabeth Mattijsen)++ | src/core.c/Seq.pm6

[20:03] <Geth> ¬¶ rakudo: Remove undocumented Seq.new-consumed

[20:03] <Geth> ¬¶ rakudo: 

[20:03] <Geth> ¬¶ rakudo: And replace it with a Seq.new() candidate.  Its existence was only

[20:03] <Geth> ¬¶ rakudo: needed to create an EVALlable representation of a Seq of which the

[20:03] <Geth> ¬¶ rakudo: iterator had already been taken.  This created a documentation

[20:03] <Geth> ¬¶ rakudo: issue, as the method was *not* an implementation detail.  Yet

[20:03] <Geth> ¬¶ rakudo: documenting it would only cause more questions, as it strayed very

[20:03] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 9 more lines‚Ä¶>

[20:03] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/0f97a7f5fe

[20:04] <Geth> ¬¶ roast: 80326a9742 | (Elizabeth Mattijsen)++ | S24-testing/9-is_deeply.t

[20:04] <Geth> ¬¶ roast: Adapt Seq.new-consumed tests

[20:04] <Geth> ¬¶ roast: 

[20:04] <Geth> ¬¶ roast: To follow https://github.com/rakudo/rakudo/commit/0f97a7f5fe

[20:04] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/80326a9742

[20:16] *** squashable6 left
[20:17] *** squashable6 joined
[20:25] *** camelCaser left
[20:26] *** camelCaser joined
[20:29] *** SqrtNegInf left
[20:37] *** MasterDuke left
[20:41] *** FROGGS left
[20:51] *** sena_kun joined
[20:53] *** Altai-man_ left
[21:04] *** MasterDuke joined
[21:07] *** patrickb joined
[21:29] *** lucasb left
[21:33] *** leont left
[21:38] <patrickb> .tell rba I have a new rakubrew release: version 7. As always https://patszim.volans.uberspace.de/patcloud/index.php/s/qmkreEJLQDZcjbf Can you upload?

[21:38] <tellable6> patrickb, I'll pass your message to rba

[21:40] *** patrickb left
[21:48] *** upupbb-user3 joined
[21:59] *** upupbb-user3 left
[22:44] *** patrickb joined
[22:45] <patrickb> .tell rba I just uploaded a last minute bugfix release of rakubew: version 8. Can you upload both releases (7 and 8)? Same URL. Thank you!

[22:45] <tellable6> patrickb, I'll pass your message to rba

[22:48] <patrickb> tadzik: Rakubrew is (slowly) getting to the point of working reliably. What's your stance wrt rakudobrew? Should it officially be deprecated?

[22:48] <tellable6> patrickb, I'll pass your message to tadzik

[22:49] *** patrickb left
[22:50] *** Altai-man_ joined
[22:53] *** sena_kun left
[23:29] *** Kaiepi left
[23:32] *** Kaiepi joined
