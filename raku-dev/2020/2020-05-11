[00:00] *** raku-bridge left
[00:01] *** raku-bridge1 is now known as raku-bridge

[00:58] *** pamplemousse joined
[06:09] *** pamplemousse left
[06:20] *** jjmerelo joined
[06:20] <jjmerelo> Hey

[06:21] <jjmerelo> I'm trying to install a plugin in Comma that allows me to input unicode characters easily, don't know if that's achieved via plugin or not, actually

[06:22] <jjmerelo> I seem to remember that was kinda easy, but in the current version, 2020.05, the marketplace is empty

[06:52] <[Tux]> Rakudo version 2020.05.1-62-g2b38666f9 - MoarVM version 2020.05-10-g5fe4a8114

[06:52] <[Tux]> csv-test-xs-20      0.387 -  0.395

[06:52] <[Tux]> csv-ip5xs           0.838 -  0.874

[06:52] <[Tux]> test-t --race       0.940 -  0.977

[06:52] <[Tux]> test-t              1.960 -  1.992

[06:52] <[Tux]> test                7.412 -  7.548

[06:52] <[Tux]> csv-ip5xs-20        8.168 -  8.317

[06:52] <[Tux]> test-t-20 --race    9.768 -  9.797

[06:52] <[Tux]> csv-parser         26.332 - 26.750

[06:52] <[Tux]> test-t-20          30.756 - 31.886

[06:56] <jjmerelo> .seen vrurg

[06:56] <tellable6> jjmerelo, I saw vrurg 2020-05-10T01:57:51Z in #raku: <vrurg> thanks! 

[07:10] *** jjmerelo left
[07:39] *** jjmerelo joined
[07:58] *** Altai-man_ joined
[08:15] *** tony-o left
[08:17] *** camelia joined
[08:17] *** sena_kun joined
[08:18] *** Altai-man_ left
[08:53] <lizmat> Files=1306, Tests=111275, 214 wallclock secs (28.69 usr  8.38 sys + 3008.86 cusr 272.37 csys = 3318.30 CPU)

[08:57] <jjmerelo> OK, asking again: an easy way to enter unicode characters in comma? Plugin or otherwise?

[08:58] <jjmerelo> if it's plugin, I can't seem to be able to list available plugins in the marketplace in this new version 2020.05

[09:01] <sena_kun> jjmerelo, no. :(

[09:01] <jjmerelo> sena_kun but I seem to remember there was a plugin for that.

[09:01] <jjmerelo> sena_kun only in this version the plugin marketplace is empty

[09:02] <sena_kun> jjmerelo, well, there is a bug in 2020.05 at the very least. OTOH, you can download some plugin by hand and install it from the disk.

[09:06] <jjmerelo> sena_kun OK, got unicode_browser, which is the one I remember to have used

[09:07] <jjmerelo> Now I'll have to find out how to use it. It's kind of old, too

[09:17] <jjmerelo> sena_kun it opens a panel in the left. It's not perfect, but it's serviceable.

[09:23] *** jjmerelo left
[09:29] <lizmat> If I'm not mistaken, this line: https://github.com/rakudo/rakudo/blob/master/src/core.c/Mu.pm6#L1275

[09:29] <lizmat> will run every time at startup

[09:29] <lizmat> feels to me that that should be run at compile time

[09:29] <lizmat> but doing so breaks the core module installation

[09:30] <lizmat> jnthn nine any ideas as to why that should not be run at compile time?

[09:49] *** jjmerelo joined
[09:49] <jjmerelo> Quite a few days without questions in StackOveflow...

[09:52] <lizmat> some questions on reddit, though  :-)

[09:54] <lizmat> hmmm... could it be that modules.raku.org is not getting updated?

[09:55] <lizmat> https://modules.raku.org/dist/Cache::Async:cpan:ROBERTLE shows version 0.1.6

[09:55] <lizmat> but there is a mention of a version 0.2 on Twitter: https://twitter.com/raku_cpan_new/status/1257350019793006592

[09:57] *** bazzaar joined
[10:07] <Geth> ¦ rakudo: 9a583dcbe9 | (Elizabeth Mattijsen)++ | 2 files

[10:07] <Geth> ¦ rakudo: Move de-parentificiation of Mu to compile time

[10:07] <Geth> ¦ rakudo: 

[10:07] <Geth> ¦ rakudo: Not sure why this was needed to be run at runtime.  Now it runs at

[10:07] <Geth> ¦ rakudo: the very end of settings compilation, which appears to not cause any

[10:07] <Geth> ¦ rakudo: problems.

[10:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9a583dcbe9

[10:08] <jnthn> lizmat: It probably should be at compile time, though I wonder if it helped avoid a bootstrapping issue...

[10:08] <jjmerelo> lizmat no idea, really. Shouldn't that part be updated automatically?

[10:09] <lizmat> jnthn: well, just adding a BEGIN did not work, moving it to core_epilogue did

[10:09] <lizmat> so I guess it was a bootstrap issues originally

[10:09] <jnthn> lizmat: Ah, BEGIN in core_epilogue, I assume?

[10:09] <lizmat> yes

[10:11] <lizmat> tyil: like the concept of "rakoons"  :-)

[10:12] <tyil> :D

[10:12] <tyil> not sure if there's an "official" way to refer to raku users yet

[10:12] <lizmat> reddit uses Rakuers, but I don't particularly like that

[10:13] <tyil> I've seen that as well, it doesn't roll off the tongue as easily as rakoons does for me

[10:13] <tyil> and ease of pronunciation is useful when talking

[10:14] <lizmat> jnthn ^^  :-)

[10:16] *** Altai-man_ joined
[10:18] <lizmat> there appears to be a band called "Rakoon"

[10:18] <jjmerelo> Of course

[10:18] <jjmerelo> With umlauts liberally put over letters, I assume.

[10:18] <jjmerelo> Rakuists?

[10:19] *** sena_kun left
[10:19] <jjmerelo> Rakuifers?

[10:19] <lizmat> rakuists feels elitist to me

[10:19] <jnthn> Raccoons are kinda cute :)

[10:19] <jjmerelo> Rakulottes?

[10:19] <lizmat> right, and smart: "sly coon"  

[10:20] <jjmerelo> Rakutes?

[10:20] <jjmerelo> Rakuties?

[10:20] <tyil> Raketjes, pronounced the dutch way, like the ice cream? :>

[10:21] <jjmerelo> Racuckoos?

[10:21] <lizmat> the more I think about it, I like Rakoon, for its similarity to raccoons

[10:21] <lizmat> especially if you'd compare it to say, velociraptors

[10:22] <jjmerelo> (y) 

[10:25] <lizmat> and of course, there's https://en.wikipedia.org/wiki/Rocket_Raccoon

[10:26] * Altai-man_ finds Raccoon City to be more widely known

[10:57] <timotimo> uh oh :) :)

[11:20] <Altai-man_> Absolutely not in a bad way. :]

[12:12] <jjmerelo> Flunked again Season of Docs

[12:13] <jjmerelo> We need to keep trying, I guess...

[12:13] <jjmerelo> Maybe third's the charm...

[12:13] <jjmerelo> They only accept 50 applications, so it's highly competitive...

[12:14] <jjmerelo> Maybe we should have put a little bit of more effort with the project.

[12:14] <jjmerelo> Anyway.

[12:14] <jjmerelo> You always learn.

[12:17] *** sena_kun joined
[12:18] *** Altai-man_ left
[12:36] <[Coke]> the S.T.A.R.S of Rakuun City.

[12:57] *** pamplemousse joined
[13:02] <rypervenche> I like Rakuuns, or some other spelling of it.

[13:02] *** jjmerelo left
[14:02] <lizmat> notable6: weekly

[14:02] <notable6> lizmat, 9 notes: https://gist.github.com/c99a37e1e50dfd9e3c8152cc0eaf2cdd

[14:02] <lizmat> notable6: weekly reset

[14:02] <notable6> lizmat, Moved existing notes to “weekly_2020-05-11T14:02:57Z”

[14:16] *** Altai-man_ joined
[14:16] * tobs is a raku-doer

[14:19] *** sena_kun left
[15:36] <lizmat> yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/05/11/2020-19-release-release/

[15:49] *** sour32 joined
[15:57] <sjn> lizmat++ # for doing rakudo weekly

[16:16] *** patrickb joined
[16:17] *** sena_kun joined
[16:18] *** Altai-man_ left
[16:25] <Geth> ¦ rakudo: 4297cb051d | (Elizabeth Mattijsen)++ | 2 files

[16:25] <Geth> ¦ rakudo: Prevent $*OUT lookup for each eigenstate with put / print

[16:25] <Geth> ¦ rakudo: 

[16:25] <Geth> ¦ rakudo: Although one probably shouldn't print or put a Junction, having a

[16:25] <Geth> ¦ rakudo: dynamic variable lookup for each eigenstate can be pretty expensive.

[16:25] <Geth> ¦ rakudo: Also, convert to calling .print immediately, for better interface

[16:25] <Geth> ¦ rakudo: with custom classes acting like $*OUT.

[16:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4297cb051d

[16:27] *** jjmerelo joined
[16:38] <Geth> ¦ rakudo: e71d3cb076 | (Elizabeth Mattijsen)++ | 2 files

[16:38] <Geth> ¦ rakudo: Move &printf to io_operators

[16:38] <Geth> ¦ rakudo: 

[16:38] <Geth> ¦ rakudo: Not sure why it was living in Cool.  No functional change here.

[16:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e71d3cb076

[16:42] <jjmerelo> lizmat at some point in time, there was a multi sub printf(Cool:D $format, *@args)

[16:42] <lizmat> that's the one  I moved

[16:43] <jjmerelo> How independent routines end up in a particular file (and in a particular documentation page) is a mystery.

[16:43] <jjmerelo> But heuristically, it's very likely that routines that have as a first argument the class the file is devoted to end up there.

[16:44] <lizmat> ah, that way... but io_operators is about subs that output, and printf is one of them

[16:44] <lizmat> and needs similar logic to print / put / say / note

[16:44] <jjmerelo> right, it makes all the sense in the world... 

[16:45] <lizmat> so the Coolness of the format, is really just an extra "attribute" if you will

[17:04] *** patrickz joined
[17:05] *** patrickb left
[17:10] <Geth> ¦ rakudo: e46d459021 | (Elizabeth Mattijsen)++ | src/core.c/io_operators.pm6

[17:10] <Geth> ¦ rakudo: Make printf up to 5% faster

[17:10] <Geth> ¦ rakudo: 

[17:10] <Geth> ¦ rakudo: - make printf an only sub

[17:10] <Geth> ¦ rakudo: - directly call $*OUT.print

[17:10] <Geth> ¦ rakudo: - unfortunately, could not go to | for signature, as some tests depend

[17:10] <Geth> ¦ rakudo:   on the $, | signature.

[17:10] <Geth> ¦ rakudo: 

[17:10] <Geth> ¦ rakudo: This efficiency improvement is almost completely drowned out by the fact

[17:10] <Geth> ¦ rakudo: that the major part of doing a printf is still parsing the format string

[17:10] <Geth> ¦ rakudo: over and over again.

[17:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e46d459021

[17:32] <lizmat> m: "%d\n".printf: 42   # TIL

[17:32] <camelia> rakudo-moar e46d45902: OUTPUT: «42␤»

[17:32] <lizmat> I find this weird

[17:33] <lizmat> sorta expected that:

[17:33] <lizmat> m: 42.printf("%d")

[17:33] <camelia> rakudo-moar e46d45902: OUTPUT: «Your printf-style directives specify 0 arguments, but 1 argument was supplied␤  in block <unit> at <tmp> line 1␤␤»

[17:33] <lizmat> would work

[17:33] <nine> Well the format string is the odd man out in the argument list

[17:34] <lizmat> as that would be consistent with:

[17:34] <lizmat> m: 42.print

[17:34] <camelia> rakudo-moar e46d45902: OUTPUT: «42»

[17:34] <lizmat> m: $*OUT.printf("%d",42)

[17:34] <camelia> rakudo-moar e46d45902: OUTPUT: «42»

[17:34] <nine> 42.print reads "print that 42", "%d\n".printf: 42 reads "print this string and fill in some placeholders with the provided values"

[17:40] *** sour32 left
[17:56] <lizmat> bisectable6: old=2020.05 dd sprintf "%d\n", 1 | 2 | 3

[17:56] <bisectable6> lizmat, On both starting points (old=2020.05 new=e46d459) the exit code is 1 and the output is identical as well

[17:56] <bisectable6> lizmat, Output on both points: «Directive d not applicable for value of type Junction (any(1, 2, 3))␤  in block <unit> at /tmp/wCV5cjpSfT line 1␤␤»

[18:05] <timotimo> m: say 42.fmt("%d")

[18:05] <camelia> rakudo-moar e46d45902: OUTPUT: «42␤»

[18:12] *** jjmerelo left
[18:13] <Geth> ¦ rakudo: 110324d36e | (Elizabeth Mattijsen)++ | src/core.c/io_operators.pm6

[18:13] <Geth> ¦ rakudo: Add support for printf($format, Junction)

[18:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/110324d36e

[18:16] *** Altai-man_ joined
[18:18] *** sena_kun left
[18:22] <Geth> ¦ roast: 8b060617e6 | (Vadim Belman)++ | S26-documentation/block-leading-user-format.t

[18:22] <Geth> ¦ roast: Make the test use is_run from roast Test::Util

[18:22] <Geth> ¦ roast: 

[18:22] <Geth> ¦ roast: We better don't create extra copies of existing routines.

[18:22] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8b060617e6

[18:31] *** cognomin_ joined
[18:33] *** cognominal left
[18:34] *** cognomin_ left
[18:35] *** cognominal joined
[18:37] *** robertle left
[18:38] *** robertle joined
[18:52] *** patrickz left
[19:23] <nine> Why didn't I realize that I would be doing BEGIN time EVAL all over again, just much harder, because it's in a NativeCall callback, thus in a nested runloop?

[19:42] *** lichtkind joined
[20:17] *** sena_kun joined
[20:18] *** Altai-man_ left
[22:05] <lizmat> sourceable6: my %h is SetHash

[22:05] <sourceable6> lizmat, No idea, boss. Can you give me a Code object?

[22:09] *** bazzaar left
[22:16] *** Altai-man_ joined
[22:18] <lizmat> in NQP: $type.HOW.parameterize($type,@params);

[22:18] <lizmat> how can I flatten the @params array into separate parameters to parameterize ?

[22:18] <timotimo> don't we support | in nqp?

[22:18] <timotimo> perhaps need to call .FLATTENABLE_MUMBLEE on it

[22:19] *** sena_kun left
[22:19] * lizmat tries

[22:32] <lizmat> indeed...  but I first have to de-HLLize an Array into its reified

[22:33] <lizmat> I guess nqp::getattr is the only way, right timotimo 

[22:33] *** Kaiepi left
[22:34] *** Kaiepi joined
[22:35] *** Kaiepi left
[22:35] *** Kaiepi joined
[22:48] *** Altai-man_ left
[23:11] *** MasterDuke left
[23:32] *** lichtkind left
