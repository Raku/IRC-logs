[00:06] *** guifa2 joined
[00:10] *** guifa2 left
[00:13] *** guifa2 joined
[00:21] *** guifa2 left
[00:55] *** guifa2 joined
[00:59] *** guifa2 left
[02:02] <Geth> ¦ roast/rakudo_3713: eec472c1ee | (Vadim Belman)++ | S16-io/watch.t

[02:02] <Geth> ¦ roast/rakudo_3713: One more try to make sure things are trully in sync

[02:02] <Geth> ¦ roast/rakudo_3713: 

[02:02] <Geth> ¦ roast/rakudo_3713: On an overloaded system it might be required to make sure the writer

[02:02] <Geth> ¦ roast/rakudo_3713: thread is started too.

[02:02] <Geth> ¦ roast/rakudo_3713: 

[02:02] <Geth> ¦ roast/rakudo_3713: Also increased the timeout up to 30sec.

[02:02] <Geth> ¦ roast/rakudo_3713: review: https://github.com/Raku/roast/commit/eec472c1ee

[02:04] *** klapperl_ joined
[02:05] *** klapperl left
[03:21] *** guifa2 joined
[03:25] *** guifa2 left
[03:47] <[Coke]> nine++ # documenting nqp ops! :)

[04:20] <ShimmerFairy> ooh, nqp op documentation? where?

[05:41] <ShimmerFairy> Quick POD question, now that my mind's in that space: is =data necessary or useful? (Worth noting that, like with many P5 things, I have no clue what __DATA__ is used for there.)

[06:14] <nine> ShimmerFairy: I wasn't aware of =data, but I've used =finish like this: https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5.pm6#L1386

[06:14] <nine> And https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5.pm6#L920

[06:19] <ShimmerFairy> Oh yeah, I don't have an issue with =finish, I just spotted =data in S26 and suddenly wondered why we bother. (It's not like =finish at all, it's just a block like any other that never gets rendered in docs and only exists to be put in $=data)

[06:21] <ShimmerFairy> So it just strikes me that    =for data :key<foo>    is a needless extra way of doing    %data<foo> = "..."

[06:24] <nine> Especially considering our awesome indentable heredocs

[06:25] *** klapperl_ left
[06:29] <ShimmerFairy> Yeah, I feel like heredocs can cover every situation __DATA__ would be used for, just based on a quick glance of how that's used in P5.

[06:52] *** JJMerelo joined
[06:57] *** domidumont joined
[07:16] <tyil> nqp's Configure.pl seems to do a number of `git` calls, which generates errors about it not being a git repo when used in rakudo-star

[07:16] <tellable6> 2020-05-23T20:55:54Z #raku <melezhik> tyil[m] and for Log::Simple - pretty much the same. HTH - https://gist.github.com/melezhik/4e421cfed0727bc2d4fff445191137f9

[07:17] <tyil> is there a flag for the Configure.pl to not do those git calls?

[07:22] *** JJMerelo left
[07:53] *** Kaiepi left
[07:57] *** Kaiepi joined
[08:13] *** JJMerelo joined
[08:13] <JJMerelo> Hi

[08:13] <JJMerelo> I'm trying to wrap my head around the concept of compile-time testing.

[08:17] <JJMerelo> I just released Test::Script, for testing scripts

[08:17] <JJMerelo> (obviously)

[08:17] *** Altai-man_ joined
[08:18] <JJMerelo> Besides output, I'd like to check if some variable has been set and its value.

[08:20] <JJMerelo> On the script side, I guess I'll have to export variables and also declare them as our, which is why I wanted to do something like this https://stackoverflow.com/questions/61988532/how-can-you-create-a-combination-scope-trait-declarator-in-raku

[08:21] <JJMerelo> But on the test side, I need to know the name of the variables I want exported in compile time, which means I can't give the name of the variables to a sub for testing.

[08:21] <JJMerelo> I think that maybe this can be done using macros, or poor-person macros, that is, EVAL.

[08:22] <JJMerelo> I don't like EVAL because you wouldn't be actually running the script (as you would with require).

[08:22] <JJMerelo> And I don't know macros too well; they're still experimental, right?

[08:27] *** sena_kun joined
[08:29] *** Altai-man_ left
[08:37] <gfldex> JJMerelo: they are experimantal and subject to change. That change might be imminent.

[08:37] <JJMerelo> gfldex but could they be used for doing that kind of thing? compile-time tests?

[08:39] <gfldex> you will get full access to the AST. If you change to AST you also change the script you are testing. You may suffer from heisenbugs that way.

[08:40] <gfldex> But any testing helps I guess.

[08:42] * gfldex .oO( $imminent eqv $before-christmas )

[08:42] *** klapperl joined
[08:43] <JJMerelo> But in the state it is now, I guess it can still be used somehow, right?

[08:48] <gfldex> JJMerelo: I would need to see code to understand what you actually want to do.

[08:49] <nine> JJMerelo: I haven't understood yet what you're trying to achieve. Why do you need to check variables in the first place?

[08:49] <JJMerelo> gfldex This is what I want to do https://github.com/rakudo/rakudo/issues/3718

[08:49] <JJMerelo> nine I'd like to do white box testing of scripts. 

[08:50] <JJMerelo> I've already released this https://github.com/JJ/raku-test-script but as a matter of fact the same could be achieved using any other number of things, like qx or EVAL

[08:51] <JJMerelo> I'd have liked to create a test that checks if some variables have been set, or its value.

[08:52] <JJMerelo> So I say something like variable-ok( "script.p6", ['$foo'], "Variable is OK")

[08:54] <JJMerelo> script.p6 is "require"d, but we need to know the name of the variables in compile time, so that can't be actually done

[08:54] <JJMerelo> nine how would you do that?

[08:55] <gfldex> You could try to sneak in Proxies to catch values in containers. That wont work everywhere because you don't need a container to hold a value.

[08:56] <gfldex> Even if you got access to the AST that could be tricky. You would have to change how my, our and friends work.

[08:57] <JJMerelo> Well, variables can be declared using our and is export. That's not big deal.

[08:58] <JJMerelo> gfldex still, we need to specifically import those variables into the testing script when we "require", and we need to know those names in compile time.

[09:01] <gfldex> So you don't even have to import the names. You just need access to the name and the value of the exported symbol. That's what require is providing anyway.

[09:02] <gfldex> `is export` is just stuffing names into a hash after all.

[09:09] <JJMerelo> gfldex theoretically you don't, but in practice I couldn't find the FQN for exported symbols via require. It must somehow involve the file name or something, but as I said, no way...

[09:13] <Geth> ¦ rakudo: 027935205b | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[09:13] <Geth> ¦ rakudo: Revert "Add a IO::Path.child(List) candidate"

[09:13] <Geth> ¦ rakudo: 

[09:13] <Geth> ¦ rakudo: This reverts commit 800878a1b6adf4926e05a07dd03587a03ee16e51.

[09:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/027935205b

[09:13] *** JJMerelo left
[09:15] <Geth> ¦ rakudo: 8b94d8d279 | (Elizabeth Mattijsen)++ | 3 files

[09:15] <Geth> ¦ rakudo: Revert my work on IO::Path.child and revision control

[09:15] <Geth> ¦ rakudo: 

[09:15] <Geth> ¦ rakudo: By popular demand.

[09:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8b94d8d279

[09:25] <Geth> ¦ problem-solving: lizmat assigned to jnthn Issue The Problem Solving Process is not working https://github.com/Raku/problem-solving/issues/200

[09:29] *** JJMerelo joined
[09:33] <[Tux]> Rakudo version 2020.05.1-204-g8b94d8d27 - MoarVM version 2020.05-15-g644533ad1

[09:33] <[Tux]> csv-test-xs-20      0.393 -  0.396

[09:33] <[Tux]> csv-ip5xs           0.831 -  0.835

[09:33] <[Tux]> test-t --race       0.981 -  1.041

[09:33] <[Tux]> test-t              2.017 -  2.182

[09:33] <[Tux]> test                7.452 -  7.865

[09:33] <[Tux]> csv-ip5xs-20        8.577 -  8.937

[09:33] <[Tux]> test-t-20 --race    9.446 - 10.185

[09:33] <[Tux]> csv-parser         27.200 - 28.028

[09:33] <[Tux]> test-t-20          32.218 - 35.280

[09:33] <[Tux]> Hmm, will rerun later today

[09:37] <nine> JJMerelo: if the variables are our scoped, you can just access them through the package

[09:37] <nine> m: our $foo = 2; say GLOBAL::<$foo>

[09:37] <camelia> rakudo-moar 8b94d8d27: OUTPUT: «2␤»

[09:37] <JJMerelo> nine but what about an our variable declared in a "require"d file?

[09:39] <nine> require TestScript:file<foo.raku>; say TestScript::<$foo>

[09:40] <nine> You just need to give it a package to put the symbols into

[09:40] *** [TuxCM] joined
[09:41] *** [TuxCM] left
[09:45] <ShimmerFairy> nqp-m: my $bitype := nqp::knowhow().new_type(:name<Big>, :repr<P6bigint>); say(nqp::base_I(nqp::box_i(117, $bitype),64))

[09:45] <camelia> nqp-moarvm: OUTPUT: «1r␤»

[09:45] <ShimmerFairy> Fun thing I noticed about base_I. Camelia's other backends aren't working right now, but IIUC nqp-jvm should return "117", and nqp-js should die because 64 > 36

[09:47] <ShimmerFairy> (JVM would give back 117 because the conversion function used apparently defaults to base 10 if your radix is out of range)

[09:51] <nine> lizmat: so....at the current rate we'll solve your problem-solving ticket about the problem-solving process in just a few years ;)

[09:51] <lizmat> yes

[09:51] <lizmat> and I'm not :-) about that

[09:54] <JJMerelo> nine cool, thanks!

[09:59] *** [Tux] left
[09:59] <lizmat> bisectable6: old=2020.01 dd "2020-05-24T10:10:00.034Z".Str

[09:59] <bisectable6> lizmat, On both starting points (old=2020.01 new=8b94d8d) the exit code is 0 and the output is identical as well

[09:59] <bisectable6> lizmat, Output on both points: «"2020-05-24T10:10:00.034Z"␤»

[09:59] <lizmat> bisectable6: old=2019.07 dd "2020-05-24T10:10:00.034Z".Str

[09:59] <bisectable6> lizmat, On both starting points (old=2019.07 new=8b94d8d) the exit code is 0 and the output is identical as well

[09:59] <bisectable6> lizmat, Output on both points: «"2020-05-24T10:10:00.034Z"␤»

[10:00] <lizmat> bisectable6: old=2020.01 dd "2020-05-24T10:10:00.034Z".DateTime.Str

[10:00] <bisectable6> lizmat, Bisecting by exit code (old=2020.01 new=8b94d8d). Old exit code: 1

[10:00] <bisectable6> lizmat, bisect log: https://gist.github.com/64de6dd776f21b7d997f2c418dacb090

[10:00] <bisectable6> lizmat, (2020-02-29) https://github.com/rakudo/rakudo/commit/d95d218f3192b06f0bb52bceb90e43d198747f09

[10:00] <lizmat> bisectable6: old=2020.01 dd DateTime.new("2020-05-24T10:10:00.034Z").Str

[10:00] <bisectable6> lizmat, On both starting points (old=2020.01 new=8b94d8d) the exit code is 0 and the output is identical as well

[10:00] <bisectable6> lizmat, Output on both points: «"2020-05-24T10:10:00.034000Z"␤»

[10:03] <lizmat> bisectable6 old=2020.02 dd DateTime.new("2020-05-24T10:10:00.034Z").second

[10:07] <JJMerelo> lizman I don't think the problem is the process. It's the lack of resources.

[10:07] <lizmat> bisectable6 old=2020.02 dd DateTime.new("2020-05-24T10:10:00.034Z").second

[10:07] <JJMerelo> Same reason why there are 1k tickets in Rakudo now.

[10:08] <JJMerelo> Maybe a finer distribution in categories would help things move faster.

[10:16] *** Kaeipi joined
[10:16] *** Kaiepi left
[10:20] *** [Tux] joined
[10:23] *** [Tux] left
[10:24] *** [Tux] joined
[10:26] *** Altai-man_ joined
[10:29] *** sena_kun left
[10:30] <JJMerelo> niner could we try and generate random namespaces as another workaround for this? https://github.com/rakudo/rakudo/issues/3719

[10:38] <JJMerelo> nine not too sure how could I do that, either...

[10:41] <nine> JJMerelo: if you really need to load an arbitrary number of computation units at runtime and introspect them, just go to a lower level and use $*REPO.need to load and access the CompUnit you get.

[10:42] <JJMerelo> nine let me check that

[10:44] <JJMerelo> nine needs a bit of more scaffolding... The only thing I need is to require the same unit (a script) several times. As a workaround, I can do it giving it different names.

[10:44] <JJMerelo> As in "foo.p6", "./foo.p6" and so on.

[10:44] <nine> I can't imagine you really needing that

[10:45] <JJMerelo> nine I'm trying to do white-box testing of scripts

[10:46] <JJMerelo> so I want to launch a script with different values.

[10:46] <JJMerelo> Since it's white box, I need to somehow load, not simply run it.

[10:46] <nine> You don't need to load it multiple times but to run it

[10:47] <JJMerelo> nine but if I run it it's black-box testing.

[10:48] <JJMerelo> require runs it _and_ imports symbols that can be accessed

[10:48] <nine> Once it's loaded, it's loaded. Why would you need to load it again?

[10:48] <JJMerelo> nine OK, let's look at this in a different way

[10:49] <JJMerelo> nine I want to run a script _and_ access its variables and things like that. The name of the script is known only at runtime. I might want to run it several times, and again access variable values after running it.

[10:50] <JJMerelo> by using the mechanism you have mentioned of giving the required script a name, I can access the variables, that's no big deal.

[10:51] <JJMerelo> However, for testing purposes I need to run it several times, thus require it several times, with different ENV and args combinations.

[10:51] <JJMerelo> My workaround: simply access the file using different paths. There's a finite number of them, but no big deal.

[10:52] <nine> So, you agree that you actually don't need to _load_ it multiple times, but _run_ the code multiple times.

[10:52] <JJMerelo> correct

[10:53] <nine> Great. Then we can go a step further and agree that a mechanism that inseparably combines loading and running may not be the right tool for the job.

[10:54] <JJMerelo> nine well, there are always many ways to do it, but OK, agree.

[10:57] <JJMerelo> nine so there's a mechanism that allows to run without re-loading?

[10:57] <nine> So what you need is a tool that lets you have more control as the high level primitives are really designed and optimized for a different use case. You actually don't need and not even want all that machinery that's meant for finding modules, loading them and ensuring that we don't do the work multiple times.

[10:58] <nine> All you need is something to load code from a file, run it and access the exported data.

[10:58] <JJMerelo> nine right

[10:59] <nine> CompUnit::Loader.load-source-file($path) will do just that. It gives you a CompUnit::Handle through which you can access the symbols

[11:01] <JJMerelo> nine checking

[11:01] <nine> Going that route will also keep your Test module from getting influenced by the tested code.

[11:04] <JJMerelo> nine that's cool

[11:04] <JJMerelo> However, I'm looking at this https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/Handle.pm6 and can't really find a way to access symbols

[11:05] <JJMerelo> nine maybe this? https://github.com/rakudo/rakudo/blob/master/src/core.c/CompUnit/Handle.pm6#L68

[11:06] <nine> Try it

[11:06] <nine> don't even need an "is export" that way

[11:08] <JJMerelo> Yep, I skipped them even when using a symbol.

[11:09] <JJMerelo> right!

[11:09] <JJMerelo> my $handle=CompUnit::Loader.load-source-file("foo.p6".IO);say $handle.globalish-package<$foo>;

[11:09] <JJMerelo> love you, nine!

[11:09] <JJMerelo> nine++

[11:09] <JJMerelo> (Still need to see if it's taking the args and env, but still, great.

[11:16] *** [Tux] left
[11:16] *** [Tux] joined
[11:52] *** Geth left
[11:52] *** Geth joined
[12:11] <JJMerelo> nine released new Test::Script, now with variable testing capabilities!

[12:11] <JJMerelo> Thanks nine!

[12:16] *** Xliff joined
[12:16] <Xliff> \o

[12:20] <MasterDuke> m: use nqp; my %h; %h{nqp::null} = 4   # don't know how likely this is to happen without trying, but the error is kind of LTA

[12:20] <camelia> rakudo-moar 8b94d8d27: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[12:27] *** sena_kun joined
[12:29] *** Altai-man_ left
[12:29] <nine> MasterDuke: I'd say very inlikely. Unless you tread in those lower levels of the dungeon. In which case you must be aware that there are dangers hidden

[12:31] <MasterDuke> yeah, i wouldn't consider the highest priority of LTA errors

[12:32] <MasterDuke> nine: while you're here. any idea why moving https://github.com/MoarVM/MoarVM/blob/master/src/6model/containers.c#L755 to right after the malloc of entry could cause a problem? spectests pass, but there's a consistent fail in t/02-rakudo/repl.t

[12:39] <nine> not off-the-cuff

[12:44] <MasterDuke> yeah, it's odd

[12:49] *** JJMerelo left
[12:51] <lizmat> PSA: There will not be a Rakudo Weekly News this week.  Yours truly needs a break.  Please check in again next week!

[12:54] <Xliff> Thanks for all you do, lizmat.

[12:55] <[Tux]> Thanks for all you do, lizmat.

[12:59] <sena_kun> lizmat++ # incredible amounts of work done, relax at ease!

[13:18] <vrurg> lizmat++ 

[13:23] <tyil> lizmat: too bad, thanks for all the posts you make :)

[13:24] <tyil> fwiw, me and hankache are working on getting the rakudo-star release out today

[13:31] *** cognomin_ joined
[13:34] *** cognominal left
[13:43] *** Merfont joined
[13:46] *** Kaeipi left
[13:48] <moritz> tyil++ hankache++

[13:59] *** guifa2 joined
[14:26] *** Altai-man_ joined
[14:29] *** sena_kun left
[14:48] *** guifa2 left
[14:54] *** Merfont left
[14:57] *** Kaiepi joined
[15:10] <Geth> ¦ nqp/new-disp: 96504eba34 | (Jonathan Worthington)++ | t/moar/53-dispatch.t

[15:10] <Geth> ¦ nqp/new-disp: Cover dispatcher-[track|insert]-arg

[15:10] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/96504eba34

[15:19] <Geth> ¦ nqp/new-disp: d39df6de9b | (Jonathan Worthington)++ | t/moar/53-dispatch.t

[15:19] <Geth> ¦ nqp/new-disp: Tweak name of literal obj arg, test literal str

[15:19] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/d39df6de9b

[15:36] *** domidumont left
[15:38] <nine> So, it turns out that BEGIN time EVAL in precompilation still has severe problems, like adding the wrong bytecode to callables, trivially reproducible with a module like: unit module A; our constant Foo = EVAL 'class Foo { has $.name }';

[15:39] <nine> raku -I. -e 'use A; A::Foo.new(:name<foo>)' will give you "Too many positionals passed; expected 0 arguments but got 3" for the call to new, because the bytecode is that of <unit> instead

[15:41] <nine> Luckily I feel this odd familiarity with the MAST compiler :)

[15:43] <nine> Waaay back, when I made BEGIN time EVAL possible at all, I added the possibility to collecte mast frames during a compilation and add them to the outer compiler's. But mast_frames is only a lookup hash to get references right. The actual list of frames that get written to the byte code is in the MAST::CompUnit's @!frames array

[15:47] <nine> Now I wonder what else is missing and if it may be necessary to share the whole MAST::CompUnit between compilers. Or at least add the nested one's data to the outer's (like the intention behind mast_frames was).

[15:53] <nine> Yes, that's absolutely necessary. We need to pre-seed at least @!frames, @!sc_handles, %!sc_lookup, $!serialized and $!string_heap

[15:56] <nine> Of course, rathern than pass these implementation details around,

[15:57] <nine> we ought to collect the MAST::CompUnit objects and give them to the outer CompUnit for initialization

[15:57] *** domidumont joined
[16:19] *** domidumont left
[16:27] *** sena_kun joined
[16:28] <nine> Though if we want multiple BEGIN time EVALs to cooperate, this can't even be a list.

[16:29] <nine> Maybe it's better to give the backend a chance to initialize some common data structure at the start of a precompilation and store that in %*COMPILING

[16:29] *** Altai-man_ left
[17:30] <nine> %*COMPILING is an odd hash. The only key ever accessed is '%?OPTIONS'

[18:08] *** Xliff left
[18:27] *** Altai-man_ joined
[18:29] *** sena_kun left
[19:18] <nine> Ah, lucky me. We don't have to share $!serialized as we already share the serialization context on the higher level. That would have been a major headache

[19:22] *** lucs left
[19:38] *** lucs joined
[20:18] <dogbert17> m: my $a = round(3.14159) for ^5000000; say now - INIT now

[20:18] <camelia> rakudo-moar 8b94d8d27: OUTPUT: «0.1088431␤»

[20:18] <dogbert17> m: my $a = (3.14159).round for ^5000000; say now - INIT now

[20:18] <camelia> rakudo-moar 8b94d8d27: OUTPUT: «1.407243␤»

[20:24] <MasterDuke> heh. didn't you have some example recently where it was the other way around?

[20:28] *** sena_kun joined
[20:29] *** Altai-man_ left
[20:31] <MasterDuke> it's the optimizer. the sub case is being completely optimized away. if you run with --optimize=off then the method is about twice as fast (on my machine)

[21:04] <Geth> ¦ nqp: c82c9fd2a0 | (David Warring)++ | 2 files

[21:04] <Geth> ¦ nqp: [rubyish] Perl -> Raku + spelling

[21:04] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/c82c9fd2a0

[21:56] <Geth> ¦ nqp-configure: 7c343d4917 | (Patrick Böker)++ | lib/NQP/Config.pm

[21:56] <Geth> ¦ nqp-configure: Workaround for nmake detection failure

[21:56] <Geth> ¦ nqp-configure: 

[21:56] <Geth> ¦ nqp-configure: The nmake detection fails randomly on Windows. It does so much more often

[21:56] <Geth> ¦ nqp-configure: on CI systems. The detection fails, because the STDOUT of the make call is

[21:56] <Geth> ¦ nqp-configure: partly or completely lost. This points to a bug in IPC::Cmd, IPC::Open3 or

[21:56] <Geth> ¦ nqp-configure: the Perl core. Instead of trying to hunt down a tricky and long standing

[21:56] <Geth> ¦ nqp-configure: bug in Perl (bug reports of possibly related issues date back to 2014:

[21:56] <Geth> ¦ nqp-configure: https://rt.cpan.org/Public/Bug/Display.html?id=91784) we work around the

[21:56] <Geth> ¦ nqp-configure: issue by trying the detection several times before giving up.

[21:56] <Geth> ¦ nqp-configure: 

[21:56] <Geth> ¦ nqp-configure: This fixes #19.

[21:56] <Geth> ¦ nqp-configure: review: https://github.com/Raku/nqp-configure/commit/7c343d4917

[21:58] <Geth> ¦ rakudo: 8440e219f4 | (Patrick Böker)++ | 3rdparty/nqp-configure

[21:58] <Geth> ¦ rakudo: Bump nqp-configure to fix nmake detection failures on Windows

[21:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8440e219f4

[22:00] <Geth> ¦ nqp: 1f308c7118 | (Patrick Böker)++ | 3rdparty/nqp-configure

[22:00] <Geth> ¦ nqp: Bump nqp-configure to fix nmake detection failures on Windows

[22:00] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/1f308c7118

[22:05] <Geth> ¦ rakudo: 986f8ab6b9 | (Patrick Böker)++ | tools/templates/NQP_REVISION

[22:05] <Geth> ¦ rakudo: Bump NQP

[22:05] <Geth> ¦ rakudo: 

[22:05] <Geth> ¦ rakudo: This pulls in the nmake detection change that should help stabilize CI

[22:05] <Geth> ¦ rakudo: builds on Windows.

[22:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/986f8ab6b9

[22:05] *** patrickb joined
[22:27] *** Altai-man_ joined
[22:29] *** sena_kun left
[22:47] *** patrickb left
[23:18] *** guifa2 joined
[23:23] *** MasterDuke left
[23:44] *** guifa2 left
