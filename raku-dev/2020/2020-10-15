[05:14] *** sena_kun joined
[05:22] *** Kaiepi left
[05:29] *** Kaiepi joined
[05:30] *** Kaiepi left
[05:31] *** Kaiepi joined
[05:37] *** jmerelo joined
[05:42] *** Altai-man joined
[05:44] *** sena_kun left
[06:13] *** squashable6 left
[06:15] *** squashable6 joined
[06:48] *** patrickb joined
[07:02] *** leont joined
[07:03] *** domidumont joined
[07:38] *** MasterDuke joined
[08:46] *** MasterDuke left
[09:08] *** MasterDuke joined
[09:19] <lizmat> Files=1336, Tests=113630, 219 wallclock secs (29.46 usr  8.60 sys + 3053.82 cusr 291.63 csys = 3383.51 CPU)

[09:20] <lizmat> which feels in the same ballpark as before: https://colabti.org/irclogger//irclogger_log_search/raku-dev?search=Files%3D&action=search&timespan=&text=checked

[09:41] <lizmat> ^^^ was on the nqpif2ternary branch

[09:43] *** sena_kun joined
[09:45] *** Altai-man left
[09:46] *** lizmat_ joined
[09:48] *** lizmat left
[09:48] *** lizmat_ is now known as lizmat

[10:18] *** domidumont left
[10:50] <Geth_> ¦ rakudo: 94d8968669 | (Elizabeth Mattijsen)++ | src/core.e/hash_slice.pm6

[10:50] <Geth_> ¦ rakudo: Allow for current Hash.DELETE-KEY behaviour

[10:50] <Geth_> ¦ rakudo: 

[10:50] <Geth_> ¦ rakudo: In v6.e I'm assuming for now that %h{a;b;c} will return Nil when

[10:50] <Geth_> ¦ rakudo: trying to delete a non-existing key.  Currently that returns the

[10:50] <Geth_> ¦ rakudo: default for the hash.  See also https://github.com/rakudo/rakudo/pull/3954

[10:50] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/94d8968669

[10:52] <Geth_> ¦ roast: d93c105a6e | (Elizabeth Mattijsen)++ | S32-hash/multislice-6e.t

[10:52] <Geth_> ¦ roast: Referring to a non-existing key returns a container

[10:52] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/d93c105a6e

[11:49] *** Kaiepi left
[11:49] *** Kaiepi joined
[12:12] *** AlexDaniel left
[12:40] *** jmerelo left
[12:42] *** jmerelo joined
[12:49] *** domidumont joined
[13:06] *** jmerelo left
[13:42] *** Altai-man joined
[13:44] *** sena_kun left
[14:27] *** lucasb joined
[14:55] *** patrickb left
[14:57] *** Kaiepi left
[14:58] *** Kaiepi joined
[15:05] *** finsternis left
[15:30] *** Kaeipi joined
[15:31] *** Kaiepi left
[15:31] *** domidumont left
[16:47] *** Kaeipi left
[16:47] *** Kaiepi joined
[16:50] *** Kaiepi left
[16:50] *** Kaiepi joined
[17:22] *** Altai-man left
[17:22] *** sena_kun joined
[18:13] *** Ven`` joined
[18:37] <Geth_> ¦ roast: 6852df0781 | (Elizabeth Mattijsen)++ | S32-hash/multislice-6e.t

[18:37] <Geth_> ¦ roast: Add %h{a;b;c} tests with any of them being * or a list

[18:37] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/6852df0781

[18:49] <Geth_> ¦ roast: bca1a03162 | (Elizabeth Mattijsen)++ | S32-hash/multislice-6e.t

[18:49] <Geth_> ¦ roast: Use <a b c> notation instead of ("a","b","c")

[18:49] <Geth_> ¦ roast: 

[18:49] <Geth_> ¦ roast: For readability, really.

[18:49] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/bca1a03162

[18:54] <lizmat> m: () = 42   # I wonder if this should be a runtime error

[18:54] <camelia> rakudo-moar 85847d2f1: ( no output )

[18:55] <lizmat> technical explanation: because the left-had side of the assignment is an empty list, it will not try to assign anything from the right

[18:56] <lizmat> m: dd (my $a, my $b) = 42,666,314; dd $a, $b   # just as the 314 is silently dropped on the floor here

[18:56] <camelia> rakudo-moar 85847d2f1: OUTPUT: «(42, 666)␤Int $a = 42␤Int $b = 666␤»

[18:57] <lizmat> or maybe it should warn

[19:00] *** patrickb joined
[19:05] *** Ven`` left
[19:06] *** Ven`` joined
[19:08] *** Ven`` left
[19:13] <Geth_> ¦ rakudo: b2gills++ created pull request #3960: [RAK(:!foo).IMPL-INTERPRET should have a False value

[19:13] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3960

[19:15] *** Ven`` joined
[19:15] *** vrurg joined
[19:17] *** vrurg_ left
[19:18] *** vrurg left
[19:20] *** vrurg joined
[19:23] *** patrickb left
[19:30] *** patrickb joined
[19:49] <[Coke]> "Useless assignment of discarded value"

[20:01] <lizmat> thing is, a check for that will slow down things such as ($a,$b) = 42,666 significantly  :-(

[20:02] <lizmat> it would involve an extra pull-one on the iterator, and a check for IterationEnd

[20:02] <lizmat> I bet that's the reason it's not being tested

[20:04] <Geth_> ¦ roast: a715c44706 | (Elizabeth Mattijsen)++ | S32-hash/multislice-6e.t

[20:04] <Geth_> ¦ roast: Add tests for success of %h{a;b;c}:delete

[20:04] <Geth_> ¦ roast: 

[20:04] <Geth_> ¦ roast: Also drop the idea that the number of tests is easily algorithmically

[20:04] <Geth_> ¦ roast: determinable.  Just set the number of tests expected.

[20:05] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/a715c44706

[20:29] *** Ven`` left
[20:30] *** sena_kun left
[20:46] <patrickb> How would I go about re-attaching STDOUT/STDERR/STDIN of ones own process to a file or a sink?

[20:49] <patrickb> I'm asking because I have implemented a console less raku.exe on Windows. Those don't have their STD* attached. Writing to them causes a program abort. (It's the same with python.) It would be nice to have a way to prevent the abort and instead just silently do nothing or alternatively write to a file or so.

[20:50] <[Coke]> patrickb: if you want to replace STDOUT with a bucket that just throws out the output, that's doable.

[20:50] <[Coke]> (is that what you're asking?)

[20:51] <patrickb> [Coke]: Yes.

[20:52] <[Coke]> https://github.com/Raku/roast/blob/master/rosettacode/greatest_element_of_a_list.t#L23

[20:52] <[Coke]> that saves all the output. You could have it just be an empty block.

[20:52] <[Coke]> but this only touches the Raku-level items. If something hits the underlying stdin/stdout at the OS level, that's not capturable, I don't think

[20:53] <[Coke]> (there's some stuff in Moar/NQP that I think uses the underlying OS level handles)

[20:53] <[Coke]> er, empty *class*, even.

[20:54] <[Coke]> m: temp $*OUT=class {...} ; say 3

[20:54] <camelia> rakudo-moar 85847d2f1: OUTPUT: «The following packages were stubbed but not defined:␤    <anon|1>␤»

[20:54] <[Coke]> m: temp $*OUT=class {print(*@args){}} ; say 3

[20:54] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3temp $*OUT=class {print(*7⏏5@args){}} ; say 3␤    expecting any…»

[20:54] <[Coke]> m: temp $*OUT=class {method print(*@args){}} ; say 3

[20:54] <camelia> rakudo-moar 85847d2f1: ( no output )

[20:55] <[Coke]> ^^ there.

[20:55] <[Coke]> m: temp $*ERR = temp $*OUT=class {method print(*@args){}} ; say 3; note 'wtf'

[20:55] <camelia> rakudo-moar 85847d2f1: ( no output )

[20:56] <patrickb> m: $*OUT=class {method print(*@args){}} ; say 3

[20:56] <camelia> rakudo-moar 85847d2f1: ( no output )

[20:57] <patrickb> [Coke]: That works. Thanks! :-)

[21:02] <[Coke]> (ah, right, don't need the temp if you never want it back. :)

[21:10] <Geth_> ¦ roast: 761c1c39ec | (Elizabeth Mattijsen)++ | S32-hash/multislice-6e.t

[21:10] <Geth_> ¦ roast: Add assignability tests for %h{a;b;c}

[21:10] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/761c1c39ec

[21:11] *** Kaeipi joined
[21:12] *** Kaiepi left
[21:14] <patrickb> [Coke]: Could you have a quick look whether this makes sense? : https://github.com/rakudo/rakudo/pull/3955/files#diff-94f5ca1d3a897b9df2c204070f5d1f7dd8107eaa33e783521b2e7e77b28b610bR85-R88

[21:16] *** scovit joined
[21:18] <scovit> patrickb : this is the m$ docs to obtain what I think you want to achieve https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/dup-dup2?view=vs-2019#requirements

[21:20] <scovit> stdin is 0, stdout is 1 and stderr is 2. In the past there was a number also for the printer

[21:21] <patrickb> scovit: Thanks for the info!

[21:22] <patrickb> I think using `dup` is currently not possible from within Rakudo. (Is it with nativecall?)

[21:23] <Geth_> ¦ roast: 311b65736c | (Elizabeth Mattijsen)++ | S32-hash/multislice-6e.t

[21:23] <Geth_> ¦ roast: Add tests for non-assignability of %h{a;b;c}:adverbs

[21:23] <Geth_> ¦ roast: review: https://github.com/Raku/roast/commit/311b65736c

[21:24] <patrickb> scovit: What do you think about the bit of documentation I added? Do you have other ideas to recommend?

[21:25] <scovit> patrickb if the user wants he can use dup with nativecall. Or the trick you document, that would not work with certain outputs. The alternative is to standardize the behavior in moarvm

[21:28] <scovit> I’m a bit concerned about what would happen if the vm aborted with an error

[21:29] <patrickb> scovit: What would be a good default? Silent swallowing? (The python folks have been discussing this issue a few years ago and I think decided to not do anything: https://bugs.python.org/issue706263)

[21:29] <lizmat> and that concludes my hacking for today&

[21:32] <patrickb> lizmat: Sleep well!

[21:34] <scovit> patrickb open NUL and assign it to 0 1 and 2 in moarvm, maybe ? Die with MessageBoxes :p

[21:35] *** scovit left
[21:39] <patrickb> scovit: Thanks for your input! I think I'll keep the current solution for now. Then we can discuss how to best do it in the future. I don't think there is much of a backwards compatibility issue here.

[21:39] <tellable6> patrickb, I'll pass your message to scovit

[21:43] *** Merfont joined
[21:43] *** Kaeipi left
[21:49] <patrickb> rebooting...

[21:49] *** patrickb left
[21:59] *** patrickb joined
[22:35] *** Merfont left
[22:36] *** Merfont joined
[22:50] <Geth_> ¦ rakudo: e878e23a73 | (Patrick Böker)++ | docs/running.pod

[22:50] <Geth_> ¦ rakudo: Correct a wrong env var RAKU_HOME -> RAKUDO_HOME in docs

[22:50] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e878e23a73

[22:50] <Geth_> ¦ rakudo: 0ea6902dda | (Patrick Böker)++ | 6 files

[22:50] <Geth_> ¦ rakudo: Generate a `rakuw.exe` on Windows

[22:50] <Geth_> ¦ rakudo: 

[22:50] <Geth_> ¦ rakudo: On Windows executables are either marked as "console" applications or

[22:50] <Geth_> ¦ rakudo: "windows" applications. The first always spawn a console window to which

[22:50] <Geth_> ¦ rakudo: STDIN, STDOUT and STDERR are connected, the second spawns no such window

[22:50] <Geth_> ¦ rakudo: and STDIN, STDOUT and STDERR are not connected to anything. This can't be

[22:50] <Geth_> ¦ rakudo: decided at runtime, but is a flag set on the executable file itself. So the

[22:50] <Geth_> ¦ rakudo: <…commit message has 8 more lines…>

[22:50] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0ea6902dda

[22:50] <Geth_> ¦ rakudo: 71a749b2e7 | (Patrick Böker)++ (committed using GitHub Web editor) | 6 files

[22:50] <Geth_> ¦ rakudo: Merge pull request #3955 from patrickbkr/rakuw-executable

[22:50] <Geth_> ¦ rakudo: 

[22:50] <Geth_> ¦ rakudo: Generate a `rakuw.exe` on Windows

[22:50] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/71a749b2e7

[22:54] *** patrickb left
[22:58] *** ggoebel joined
[23:32] *** Merfont left
[23:33] *** Kaiepi joined
[23:55] <rba> patrickb: I have not been able to update rakubrew tonight. Have not been able to access my keys I need to access the docker remotly. I will be back at the weekend and I made a note to myself to not forget the update. I'm very sorry! 😐 Update follows...

[23:55] <tellable6> rba, I'll pass your message to patrickb

