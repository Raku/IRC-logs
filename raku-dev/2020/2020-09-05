[01:47] *** Kaiepi left
[02:30] *** pamplemousse left
[02:31] <japhb> lizmat++  # Good idea

[04:24] *** pamplemousse joined
[04:31] *** pamplemousse left
[05:24] *** tobs left
[05:28] *** tobs joined
[06:36] *** MasterDuke left
[06:57] *** Xliff left
[08:25] *** sena_kun joined
[08:49] *** domidumont joined
[09:00] *** domidumont left
[09:43] *** leont joined
[10:05] <lizmat> Files=1336, Tests=113586, 225 wallclock secs (29.15 usr  8.18 sys + 3119.60 cusr 287.68 csys = 3444.61 CPU)

[10:37] *** Kaiepi joined
[10:40] <nine> So I've just reviewed a PR about a change to how POD sticks to roles, two areas that I don't know all that much about. I've found that not only was it rather easy to understand the suggested change but also to form a strong opinion on what should be done.

[10:41] <Geth> ¦ rakudo: b2d625b957 | nine++ | src/core.c/Exception.pm6

[10:41] <Geth> ¦ rakudo: Give a hint about missing provides in a META6.json when module isn't found in CURFS

[10:41] <Geth> ¦ rakudo: 

[10:41] <Geth> ¦ rakudo: Fixes #3787

[10:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b2d625b957

[10:41] <Geth> ¦ rakudo: 85847d2f1e | niner++ (committed using GitHub Web editor) | src/core.c/Exception.pm6

[10:41] <Geth> ¦ rakudo: Merge pull request #3792 from niner/master

[10:41] <Geth> ¦ rakudo: 

[10:41] <linkable6> RAKUDO#3787 [closed]: https://github.com/rakudo/rakudo/issues/3787 [docs] Cannot load modules from a directory which contains a META6.json without a provides key indicating the location of files.

[10:41] <Geth> ¦ rakudo: Give a hint about missing provides in a META6.json when module isn't …

[10:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/85847d2f1e

[11:07] <Geth> ¦ rakudo: 4a34b26679 | L'Alabameñu++ (committed using GitHub Web editor) | src/core.c/Order.pm6

[11:07] <Geth> ¦ rakudo: Add cmp candidates for Code

[11:07] <Geth> ¦ rakudo: 

[11:07] <Geth> ¦ rakudo: Fixes #3885 wherein gisting Hashes with non-Str keys could produce warnings.

[11:07] <Geth> ¦ rakudo: 

[11:07] <Geth> ¦ rakudo: The root of the problem is that `cmp` resorted to stringification, which generates warnings with `Code` objects (the only non-`Nil` types to do so).  Now `Code` objects will stringify using their `name`, which matches previous behavior but without the warnings.  Warnings elsewhere —where they are more useful— are thus preserved.

[11:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4a34b26679

[11:07] <Geth> ¦ rakudo: ff32461b19 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Order.pm6

[11:07] <linkable6> RAKUDO#3885 [closed]: https://github.com/rakudo/rakudo/issues/3885 Warning on Hash[non-str, non-str].new( ... more than one pair ...)

[11:07] <Geth> ¦ rakudo: Merge pull request #3902 from alabamenhu/patch-1

[11:07] <Geth> ¦ rakudo: 

[11:07] <Geth> ¦ rakudo: Add cmp candidates for Code

[11:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ff32461b19

[11:15] *** jmerelo joined
[11:25] <lizmat> m: my $a = 0; if $a { } else -> $x { dd $x }    # TIL else -> $foo is a thing

[11:25] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0␤»

[11:38] <dogbert17> am I the only one seeing a test failure in t/spec/integration/weird-errors.t

[11:45] *** Altai-man joined
[11:48] *** sena_kun left
[11:50] * lizmat sees segfaults

[11:50] <lizmat> Segmentation fault: 11

[11:51] <lizmat> not ok 15 - sorting method list does not segfault

[11:54] <lizmat> yup, it's my latest merge :-(

[12:00] <Geth> ¦ rakudo/rakuast: 135b9e74f3 | (Elizabeth Mattijsen)++ | 5 files

[12:00] <Geth> ¦ rakudo/rakuast: Batch #2 of test annotations with associated Raku code

[12:00] <Geth> ¦ rakudo/rakuast: 

[12:00] <Geth> ¦ rakudo/rakuast: This is mind-numbing but very informative work.

[12:00] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/135b9e74f3

[12:14] <lizmat> looks like the segfault happens in the is_run handling, not in the code itself

[12:46] *** jmerelo left
[12:48] <timotimo> are we still wondering about the "will not overwrite just-created thingie thingie with thingie"?

[12:49] <timotimo> i believe it comes from having different files with the same name in the cp commandline

[12:50] <timotimo> i.e. it'll copy blib/Perl6/Grammar.moarvm into the perl6/lib/Perl6 folder, then it'll try to copy blib/Raku/Grammar.moarvm into the same folder and notice it conflicts

[12:58] <timotimo> i think the problem lies with M_RAKUDO_PRECOMPS having both RAKUDO_G_R_MOAR and RAKUDO_G_MOAR

[13:00] <nine> lizmat: does it really segfault?

[13:01] <nine> lizmat: for me the test file continues and just that one test fails. But the test is just broken: for no good reason it expects those warnings that are no longer there

[13:01] <nine> I suggest: -       '0.^methods(:all).sort',

[13:01] <nine> +       '0.^methods(:all).sort.note',

[13:02] *** domidumont joined
[13:08] <timotimo> urgh, i can't find M_RAKUDO_PRECOMPS anywhere except Makefile, how do i track down where it comes from?

[13:09] <timotimo> but i do have an idea how this must be solved

[13:20] <timotimo> okay i do not know how our build system macros work

[13:20] <timotimo> is there like a readme or something ...

[13:21] <timotimo> aha!

[13:27] <nine> is there?

[13:27] <timotimo> https://github.com/Raku/nqp-configure/blob/master/doc/Macros.md

[13:27] <timotimo> i'm not quite sure how much of this is custom-made for nqp and rakudo

[13:29] <lizmat> nine: shouldn't we just test for an empty STDERR ?

[13:29] <timotimo> i'm just about to have rakuast build and install properly again

[13:29] <lizmat> timotimo++

[13:30] <timotimo> happy to provide this service in this particular instance

[13:30] <nine> lizmat: would be ok, too, I guess. Though without any output, how do we know that we actually processed any methods at all?

[13:30] <timotimo> but otherwise, oh boy, build system is some scary stuff

[13:31] <timotimo> +++ Rakudo installed succesfully!

[13:33] <Geth> ¦ roast: 1859e71937 | (Elizabeth Mattijsen)++ | integration/weird-errors.t

[13:33] <Geth> ¦ roast: Check for proper non-segfault output

[13:33] <Geth> ¦ roast: 

[13:33] <Geth> ¦ roast: Now that this is without any warnings.

[13:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/1859e71937

[13:33] <lizmat> that should make spectest clean again

[13:33] <Geth> ¦ rakudo/rakuast: 08bbd46257 | (Timo Paulssen)++ | tools/templates/Makefile-backend-common.in

[13:33] <Geth> ¦ rakudo/rakuast: build: split precomps into _P and _R to go into Perl6/ or Raku/

[13:33] <Geth> ¦ rakudo/rakuast: 

[13:33] <Geth> ¦ rakudo/rakuast: the RakuAST grammar and actions go in this separate folder

[13:33] <Geth> ¦ rakudo/rakuast: during installation, so there has to be a separate cp for

[13:33] <Geth> ¦ rakudo/rakuast: them, but we still want to precomp all of them. Thus, the old

[13:33] <Geth> ¦ rakudo/rakuast: RAKUDO_PRECOMPS is the concatenation of all the files.

[13:33] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/08bbd46257

[13:46] <lizmat> timotimo: in rakuast I get:

[13:46] <lizmat> Stage start      :   0.000

[13:46] <lizmat> Cannot find method 'add_comp_line_directive' on object of type NQPMu

[13:46] <lizmat>    at gen/moar/stage2/NQPHLL.nqp:1744  (/Users/liz/Github/rakuast/install/share/nqp/lib/NQPHLL.moarvm:comment:sym<line_directive>)

[13:47] <lizmat> aaaha...  apparently, having export RAKUDO_RAKUAST=1 is a bad idea when compiling

[13:47] <lizmat> the setting

[13:53] <timotimo> ha! :D

[13:53] <timotimo> yeah, that will not get you far

[13:53] <timotimo> of course it's going to work near the end of rakuast's journey

[13:53] <lizmat> yeah... understand now  :-)

[14:20] *** MasterDuke joined
[14:33] <Geth> ¦ roast: fdcc5a283c | (Elizabeth Mattijsen)++ | integration/weird-errors.t

[14:33] <Geth> ¦ roast: Oops, remove debug leftover, spotted by nine++

[14:33] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/fdcc5a283c

[15:46] *** sena_kun joined
[15:47] <MasterDuke> timotimo: whatever slice kind of has to go by AT-POS since it reifies

[15:48] *** Altai-man left
[15:49] <timotimo> and zen slice only returns self?

[15:49] <MasterDuke> yep

[15:53] <timotimo> hmmm.

[15:56] <timotimo> should still be possible to do it more efficiently

[15:56] <MasterDuke> yes, definitely

[16:00] <MasterDuke> hm. but a profile of `my @a = (^2_000).pick(*); my @b; @b = @a[*] for ^1_000; say @b[0];` looks quite a bit different from `my @a = ("a" .. "za")[]; say @a[(^@a).pick];`

[16:01] <MasterDuke> i.e., it doesn't have that reify-at-least cycle

[16:01] <timotimo> possibly because finding the value of the element is easier for numbers vs letters

[16:02] <timotimo> if it had and/or used the skip function from iterators (not hallucinating that, am i?) perhaps it'd be much better

[16:03] <MasterDuke> but what could it skip?

[16:03] <timotimo> like, from "aa" to "ba" or something?

[16:05] <MasterDuke> not sure what you mean?

[16:05] <MasterDuke> oh, whoops, i copied the version without the whatever for the char range example

[16:09] <MasterDuke> huh. a profile of the shuffled int array version shows push in Array and IterationBuffer are both not jitted, but spesh log doesn't show any 'bailed completely'

[16:20] <timotimo> i wonder if it deopted inside a frame that had the other one inlined

[16:20] <timotimo> then it'd have to do a regular non-speshed entry

[16:27] <MasterDuke> maybe? there are 999 deopts in Any-iterable-methods's push-all

[16:37] <timotimo> is that a frame that had the not-jitted ones inlined into it?

[16:37] <timotimo> hm, but then a regular call to that ought to be an entry which should give it a chance to be spesh-invoked and jit-invoked

[16:40] <MasterDuke> it has some stuff inlined, but it doesn't appear that those push's are

[16:41] <timotimo> so my idea was quite possibly wrong

[16:43] <MasterDuke> assuming i read the spesh log correctly

[18:34] <timotimo> https://paste.centos.org/view/0cbd38e9 - added just a few "extra dumps" to some rakuast nodes, makes the tree at least a little cross-referencable to the source without like counting or something

[18:58] *** sena_kun left
[19:16] *** domidumont left
[19:16] <Geth> ¦ rakudo/rakuast: 498fa12a1c | (Elizabeth Mattijsen)++ | 3 files

[19:16] <Geth> ¦ rakudo/rakuast: Last batch of test annotations with associated Raku code

[19:16] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/498fa12a1c

[19:43] *** Xliff joined
[19:46] <Xliff> \o

[20:00] <Geth> ¦ rakudo/rakuast_dump_extras: 7fd4f82857 | (Timo Paulssen)++ | 5 files

[20:00] <Geth> ¦ rakudo/rakuast_dump_extras: speculate a (crappy) way for rakuast nodes to custom output

[20:00] <Geth> ¦ rakudo/rakuast_dump_extras: 

[20:00] <Geth> ¦ rakudo/rakuast_dump_extras: implemented for a few literals, some operators, some

[20:00] <Geth> ¦ rakudo/rakuast_dump_extras: variable lookups, and such.

[20:00] <Geth> ¦ rakudo/rakuast_dump_extras: review: https://github.com/rakudo/rakudo/commit/7fd4f82857

[20:01] <timotimo> what we actually want is probably more like iterating over a class' roles and calling a method on all of them in turn and just put the result in the output

[20:02] <timotimo> but if you're --target=ast at the moment, it's better than nothing

[20:35] <Geth> ¦ rakudo: e59262f65f | (Elizabeth Mattijsen)++ | t/01-sanity/20-defined.t

[20:35] <Geth> ¦ rakudo: Remove use of deprecated undefine()

[20:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e59262f65f

[20:38] <Xliff> timotimo: What would that be used for?

[20:38] <Xliff> Debugging?

[21:05] <Geth> ¦ rakudo/rakuast: 8cdf88e37d | (Elizabeth Mattijsen)++ | src/Raku/ast/README.md

[21:05] <Geth> ¦ rakudo/rakuast: Mark adding new core defines as done for now

[21:05] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/8cdf88e37d

[21:05] <lizmat> and with that, yours truly had enough hacking for today

[21:11] <timotimo> Xliff: the rakuast_dump_extras branch?

