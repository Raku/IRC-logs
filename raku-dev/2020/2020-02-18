[00:02] *** lucasb left
[00:34] <MasterDuke> m: sub a($a where 1|2|3|4|5|6|7|8|9|0) { $a }; my $b; my $c = 10.rand.Int * 0; my $s = now; $b = a($c) for ^100_000; say now - $s; say $b

[00:34] <camelia> rakudo-moar 8c995febd: OUTPUT: «1.3455308␤0␤»

[00:36] <MasterDuke> locally that takes ~0.8s on stock rakudo. i now have a branch where it takes 0.06s

[00:37] <MasterDuke> still needs a little cleanup, but when i'm done i think it should support mixing Types and literal ints, nums, and strs

[00:38] <MasterDuke> but it'll have to wait until tomorrow to finish...

[00:39] <Xliff> Ooh, nice!

[00:39] <Xliff> Takes around ~0.9, here

[00:53] <Xliff> MasterDuke: What did you do to speed it up?>

[00:54] <Xliff> IIUC (if I understand correctly) you could then do something like "where 0|1|MySubsetOfInt" and it would still be faster than the current implementation?

[01:05] *** Kaiepi left
[01:06] *** Kaiepi joined
[01:14] *** hungrydonkey joined
[01:33] *** sena_kun joined
[01:35] *** Altai-man_ left
[01:44] *** hungrydonkey left
[02:20] *** Kaiepi left
[02:20] *** Kaiepi joined
[02:21] *** squashable6 left
[02:23] *** squashable6 joined
[03:22] * [Coke] bumps the Proc::Async issue at https://github.com/rakudo/rakudo/issues/3057

[03:32] *** Altai-man_ joined
[03:34] *** sena_kun left
[04:54] *** hungrydonkey joined
[05:33] *** sena_kun joined
[05:35] *** Altai-man_ left
[07:32] *** Altai-man_ joined
[07:34] *** sena_kun left
[09:04] <lizmat> Files=1302, Tests=111138, 226 wallclock secs (27.72 usr  8.10 sys + 2979.20 cusr 284.99 csys = 3300.01 CPU)

[09:04] <lizmat> ok, I wonder what lost us so much in the spectest  :-(

[09:08] *** robertle left
[09:14] <tyil> anyone around who may know better what https://gitlab.com/tyil/docker-perl6/-/jobs/440665702#L402 is about?

[09:15] <tyil> seems to only break on alpine

[09:27] *** ufobat joined
[09:33] *** sena_kun joined
[09:35] *** Altai-man_ left
[09:38] <nine> tyil: maybe related to this? https://github.com/MoarVM/MoarVM/pull/1240

[09:39] <tyil> perhaps

[10:02] <lizmat> looks like the spectest slowdown is caused by 4e12365b197e5f765343 , the $?FILE fix

[10:02] <linkable6> (2020-02-14) https://github.com/rakudo/rakudo/commit/4e12365b19 Remove extraneous information from $?FILE

[10:03] <lizmat> without 5629cdff581cf7b3b2a and 4e12365b197e5f765343 I get a better spectest result on a warm machine than during the night on a cold one

[10:03] <linkable6> (2020-02-15) https://github.com/rakudo/rakudo/commit/5629cdff58 Remove extra info from $?FILE from the end

[10:15] * sena_kun sees some blin fallout, investigating and preparing a ticket

[10:30] <Geth> ¦ rakudo: Altai-man assigned to lizmat Issue [WIP] Blin 2020.02 https://github.com/rakudo/rakudo/issues/3494

[10:31] * sena_kun hopes blockers will be resolved by tne end of this week to release on Saturday

[10:31] * sena_kun dayjob &

[11:10] *** pmurias joined
[11:11] <pmurias> jnthn: what java package should we migrate to after the rename?

[11:13] <pmurias> jnthn: does org.raku.nqp make sense (I'm refactoring the truffle backend to make it work under the newest graalvm and I'm thinking about building it up in the moved package)

[11:13] <jnthn> pmurias: That's probably a decent choice, yes

[11:32] *** Altai-man_ joined
[11:34] *** sena_kun left
[11:37] *** pmurias left
[11:38] *** pmurias joined
[11:38] <Geth> ¦ rakudo: 2b7d5ffeb8 | (Elizabeth Mattijsen)++ | 2 files

[11:38] <Geth> ¦ rakudo: Restore *exact* year stringification in Date/DateTime

[11:38] <Geth> ¦ rakudo: 

[11:38] <Geth> ¦ rakudo: This should fix some Blin fallout

[11:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2b7d5ffeb8

[11:41] <lizmat> .tell sena_kun will look at the other Blin failures much later today or tomorrow

[11:41] <lizmat> afk for most of the rest of the day&

[11:46] *** pmurias left
[11:50] <Altai-man_> lizmat, rest well!

[12:35] *** travis-ci joined
[12:35] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Restore *exact* year stringification in Date/DateTime

[12:35] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/651937420 https://github.com/rakudo/rakudo/compare/1cc43c892ab3...2b7d5ffeb8c6

[12:35] *** travis-ci left
[12:52] *** patrickb joined
[12:53] <patrickb> tyil: I'd highly suspect the dyncall bump (https://github.com/MoarVM/MoarVM/commit/657b536cf6e861ac0bb4bf550e8aea5042a950be).

[12:56] *** patrickb left
[13:02] *** pmurias joined
[13:16] *** squashable6 left
[13:17] *** squashable6 joined
[13:17] *** squashable6 left
[13:20] *** squashable6 joined
[13:33] *** sena_kun joined
[13:35] *** Altai-man_ left
[13:36] *** MasterDuke left
[13:55] *** Xliff left
[13:56] *** lucasb joined
[13:56] *** squashable6 left
[13:58] *** squashable6 joined
[14:24] *** dogbert17 joined
[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 5 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:32] *** Altai-man_ joined
[15:34] *** sena_kun left
[15:37] *** hungrydonkey left
[15:37] *** hungrydonkey joined
[16:07] *** pmurias left
[16:30] *** hungrydonkey left
[16:30] *** hungrydonkey joined
[16:42] *** hungrydonkey left
[16:42] *** hungrydonkey joined
[16:43] *** hungrydonkey left
[16:43] *** hungrydonkey joined
[17:33] *** sena_kun joined
[17:35] *** Altai-man_ left
[17:37] *** domidumont joined
[17:38] *** domidumont left
[17:40] *** jmerelo joined
[17:40] <jmerelo> Made another pull request so that, now that we have a .gitignore in the Github pull down, they call it after Raku https://github.com/github/gitignore/pull/3312

[17:58] <japhb> Kaiepi: Why is Unix socket support going into IO::Socket::INET, and not for instance IO::Socket::UNIX?

[18:03] *** hungrydonkey left
[18:23] *** MasterDuke joined
[18:43] *** squashable6 left
[18:44] *** squashable6 joined
[19:20] *** jmerelo left
[19:21] *** Kaiepi left
[19:27] *** Kaiepi joined
[19:32] *** Altai-man_ joined
[19:35] *** sena_kun left
[20:14] <Geth> ¦ roast: c336b6eaa8 | (Christian Bartolomäus)++ | 3 files

[20:14] <Geth> ¦ roast: Minor tweaks after renaming of perl6 to rakudo

[20:14] <Geth> ¦ roast: 

[20:14] <Geth> ¦ roast: Follow up on https://github.com/rakudo/rakudo/commit/0bebe4e23a.

[20:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c336b6eaa8

[20:17] * [Coke] sees $parrot_version in that commit and does a double take

[20:42] *** AlexDaniel joined
[20:43] *** AlexDaniel left
[20:43] *** AlexDaniel joined
[20:50] <vrurg> Hm, is there any reason for Attrbiute to have both $!rw and $!ro?

[20:52] <lizmat> vrurg: I have no idea...

[20:53] * vrurg would have to grep through sources... 

[20:53] <lizmat> perhaps the naming of those attributes is subtly confusing

[20:54] <MasterDuke> anybody interested in helping me debug my new attempt to also inline concrete things in any junctions for params? https://github.com/MasterDuke17/rakudo/tree/also_inline_concrete_things_in_any_junctions_for_params

[20:55] <MasterDuke> for this example, `sub a($a where 1|2|3|4|5|6|7|8|9|0|"abc") { $a }; say a("abc")`, i get `This type cannot unbox to a native integer: P6opaque, Str`, but `sub a($a where "abc"|1|2|3|4|5|6|7|8|9|0) { $a }; say a("abc")` succeeds

[20:57] <vrurg> lizmat: They're just mutually exclusive. There're set_rw and set_readonly. Each setting corresponding attribute, but must also reset the other one, as I see it.

[20:58] <vrurg> I would try getting rid of $!ro as this is the default and see we can get away with $!rw only.

[20:58] *** pmurias joined
[21:00] <lizmat> vrurg: please doublecheck with jnthn,I wouldn't be surprised if this is not a thing we can do

[21:15] <Geth> ¦ rakudo: 0286904b45 | (Elizabeth Mattijsen)++ | src/core.c/Date.pm6

[21:15] <Geth> ¦ rakudo: Fixed missed condition in move to native attribute

[21:15] <Geth> ¦ rakudo: 

[21:15] <Geth> ¦ rakudo: In the move to native attributes in Date, a check on daycount was

[21:15] <Geth> ¦ rakudo: missed: since nqp::isconcrete() is always true on a native variable,

[21:15] <Geth> ¦ rakudo: this was giving incorrect results when moving between dates.  This

[21:15] <Geth> ¦ rakudo: is now fixed and unbreaks Date::WorkdayCalendar

[21:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0286904b45

[21:30] <tyil> .tell patrickb is it something I can fix or does it need core dev attention? it seems to build fine on the other distros I build for

[21:33] *** sena_kun joined
[21:35] *** Altai-man_ left
[21:47] <[Coke]> looking at Proc::Async::Pipe - the pipes are hanging on to open FDs. Looking at the native-descriptor attribute on the Pipes, they are all Promises. Anyone see where the actual native fd is?

[21:50] * [Coke] pokes at all the attributes.

[22:04] <sena_kun> lizmat++ # blockers

[22:04] * sena_kun checks specs and sets up blin

[22:26] <Geth> ¦ roast: 02680b6c93 | (Christian Bartolomäus)++ | test_summary

[22:26] <Geth> ¦ roast: Revive --timing option

[22:26] <Geth> ¦ roast: 

[22:26] <Geth> ¦ roast: It looks like this has been broken for a long time.

[22:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/02680b6c93

[22:28] <Geth> ¦ rakudo: b74e5d7b39 | (Christian Bartolomäus)++ | .gitignore

[22:28] <Geth> ¦ rakudo: Remove duplicate entry from .gitignore

[22:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b74e5d7b39

[23:06] *** pmurias left
[23:12] <vrurg> .ask jnthn what is the point of having both $!ro and $!rw on Attribute? So far, I see that $!ro is simply prioritized over $!rw but does it really makes any sense?

[23:32] *** Altai-man_ joined
[23:34] *** pmurias joined
[23:35] *** sena_kun left
[23:40] <Geth> ¦ rakudo: vrurg++ created pull request #3496: Set attribute's rw status when added to a container

[23:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3496

[23:41] <Geth> ¦ roast/rakudo_3495: b12064dff5 | (Vadim Belman)++ | 2 files

[23:41] <Geth> ¦ roast/rakudo_3495: Add tests for `is rw` trait on roles

[23:41] <Geth> ¦ roast/rakudo_3495: 

[23:41] <Geth> ¦ roast/rakudo_3495: In support of rakudo/rakudo#3496 and following rakudo/rakudo#3495

[23:41] <Geth> ¦ roast/rakudo_3495: review: https://github.com/perl6/roast/commit/b12064dff5

[23:41] <linkable6> RAKUDO#3496 [open]: https://github.com/rakudo/rakudo/pull/3496 Set attribute's rw status when added to a container

[23:41] <linkable6> RAKUDO#3495 [open]: https://github.com/rakudo/rakudo/issues/3495 [attributes][objects][roles] `is rw` trait applied to roles does not work

[23:42] <Geth> ¦ roast: vrurg++ created pull request #620: Add tests for `is rw` trait on roles

[23:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/620

[23:42] <Kaiepi> japhb, because outside of how their address is created, they're used in the same way as ipv4/ipv6 sockets

[23:43] <jnthn> vrurg: I'd forgotten ro even existed there, tbh...

[23:43] <Kaiepi> with a solution to https://github.com/Raku/problem-solving/issues/111, the extra state related to specific types of addresses would be kept in their address, not in IO::Socket::IENT

[23:43] <Kaiepi> s/IENT/INET/

[23:45] <Kaiepi> IO::Socket::INET becomes somewhat of a misnomer though

[23:45] <jnthn> vrurg: I think it was maybe meant to be about the scalar being ro, but I'm not really sure.

[23:45] <jnthn> vrurg: Or maybe it was so if you put `is rw` on the class, you could opt out of it...

[23:46] *** lucasb left
[23:51] <MasterDuke> jnthn: do you happen to see anything obviously wrong in https://github.com/MasterDuke17/rakudo/commit/81512d70477e93f60e7b20db07079154535548ac ?

[23:55] <jnthn> MasterDuke: eq_i won't handle big integers

[23:56] <MasterDuke> hm, yeah

[23:56] <jnthn> And it'll bypass any lexical operator overloads too

[23:56] <MasterDuke> don't think that's causing the problem i'm seeing though

[23:58] <MasterDuke> i could change it to iseq_I, and isn't there some trick about checking whether an operator has been overloaded i could do?

[23:59] <MasterDuke> this is what i'm getting right now `This type cannot unbox to a native integer: P6opaque, Str` for this example `sub a($a where 1|2|3|4|5|6|7|8|9|0|"abc") { $a }; say a("abc")`

[23:59] <MasterDuke> putting the "abc" first works fine

