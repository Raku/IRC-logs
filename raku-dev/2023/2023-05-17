[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:15] *** rypervenche left
[00:19] *** rypervenche joined
[02:51] *** MasterDuke left
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[07:59] *** sena_kun joined
[09:22] <lizmat> nine: it looks like the meta-object of a Subset with a "where" is the "where" block, rather than the subset itself

[09:22] <lizmat> without a "where" block, it *is* correct

[09:22] <lizmat> this affects declarator blocks being attached to the wrong thing at least

[09:22] <lizmat> ideas / suggestions / comment ?

[09:24] <nine> Looking at RakuAST::Type::Subset I can't see how that would be the case

[09:26] *** sena_kun left
[09:27] <lizmat> well, me neither, yet it is the case

[09:29] <lizmat> hmmm... it only happens when there is an actual block, not for a Whatever code

[09:29] <lizmat> I think I know where to look now , thanks for rubberducking

[09:29] <nine> :)

[10:03] <lizmat> the problem is that generic blocks can also have declarator doc

[10:03] <lizmat> and the block of a subset is seen *before* the subset as a doc declarator target

[10:05] <lizmat> so I guess if the subset has a where, then it would need to steal the declarand from the block

[10:41] <Geth> ¦ rakudo/main: 6b6f28ed9c | (Elizabeth Mattijsen)++ | 2 files

[10:41] <Geth> ¦ rakudo/main: RakuAST: make sure Subset.WHY is correct with a where block

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: Because bare blocks can also have declarator docs attached, and

[10:41] <Geth> ¦ rakudo/main: a "where" block of a subset is seen *before* the subset, the

[10:41] <Geth> ¦ rakudo/main: declarator doc was attached to the block of the subset, rather

[10:41] <Geth> ¦ rakudo/main: than to the subset itself.

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: This introduces a "cut-WHY" method on declarator targets, and

[10:41] <Geth> ¦ rakudo/main: a steal-declarand method in Actions, and the use of these when

[10:41] <Geth> ¦ rakudo/main: appropriate in the subset handling.

[10:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6b6f28ed9c

[10:56] <Geth> ¦ rakudo/main: ee5e4c3b69 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/LegacyPodify.pm6

[10:56] <Geth> ¦ rakudo/main: RakuAST: no trailing whitespace in leading/trailing declarator doc

[10:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ee5e4c3b69

[10:57] <lizmat> nine: this would have given us another test file if "macro" had been supported in RakuAST

[10:57] <lizmat> do you have any thoughts on that ?

[11:01] <[Tux]> Rakudo v2023.04-84-g6b6f28ed9 (v6.d) on MoarVM 2023.04-1-g965be0af5

[11:01] <[Tux]> csv-test-xs-20      0.379 -  0.382

[11:01] <[Tux]> csv-ip5xs           0.839 -  0.886

[11:01] <[Tux]> test-t --race       0.954 -  1.055

[11:01] <[Tux]> test-t              1.425 -  1.489

[11:01] <[Tux]> csv-parser          4.045 -  4.135

[11:01] <[Tux]> csv-ip5xs-20        5.305 -  6.384

[11:01] <[Tux]> test                6.378 -  6.435

[11:01] <[Tux]> test-t-20 --race    6.441 -  6.571

[11:01] <[Tux]> test-t-20          21.837 - 22.217

[11:18] *** Xliff joined
[11:20] <Xliff> nine: When I try to EXEC a bunch of need statements, symbols in those modules are not excecuted. When I replace the AST with the actual Raku... it works. If you need further explanations, I'll write a gist.

[11:21] <nine> A gist may be helpful

[11:32] <lizmat> nine: looks like

[11:32] <lizmat> my ($,) = 1;

[11:32] <lizmat> is a problem in RakuAST

[11:37] <Xliff> nine: Sure thing.

[11:37] <Xliff> m: class X::E is Exception { method new ($m) { self.bless( message => $m ); }; }; sub a { CATCH { when X::E { .message.say }; }; X::E.new("Bloop!").throw }; a

[11:37] <camelia> rakudo-moar ee5e4c3b6: OUTPUT: «Stub code executed␤  in block  at <tmp> line 1␤  in any  at <tmp> line 1␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:38] <Xliff> Is this right or a bug?

[11:45] <lizmat> feels like a bug at first sight

[11:45] <lizmat> ah...  maybe having a CATCH block in a sub itself, doesn't remove the "stubness" of a sub when it is declared

[11:46] <lizmat> m: class X::E is Exception { method new ($m) { self.bless( message => $m ); }; }; sub a { CATCH { when X::E { .message.say }; 42 }; X::E.new("Bloop!").throw }; a

[11:46] <camelia> rakudo-moar ee5e4c3b6: OUTPUT: «Stub code executed␤  in block  at <tmp> line 1␤  in any  at <tmp> line 1␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:46] <lizmat> hmmm

[11:46] <lizmat> so much for that theory

[11:48] <nine> Xliff: your exception class needs to declare a "message" method. Exception itself only has a stub

[11:49] <nine> message is _not_ an attribute

[11:49] <lizmat> aaah... duh

[11:49] <lizmat> nine++

[11:50] <lizmat> m: class X::E is Exception { has $.message; method new ($m) { self.bless( message => $m ); }; }; sub a { CATCH { when X::E { .message.say } }; X::E.new("Bloop!").throw }; a

[11:50] <camelia> rakudo-moar ee5e4c3b6: OUTPUT: «Bloop!␤»

[11:50] <lizmat> or just make it an attribute in your class

[11:51] <Xliff> -Oh... duh! Thanks!!

[11:51] <Xliff> nine++

[11:51] <Xliff> It must be Monday...

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:54] <gfldex> Is the absent requirement of use MONKEY; for .EVAL intentional?

[12:55] <lizmat> jein

[12:55] <lizmat> thing is, that methods are late bound: the only way to make that fail at compile time, is to inhibit *any* method called EVAL, by name

[12:55] <gfldex> If use MONKEY; would set $*MONKEYING = true, .EVAL (and other things) could check and complain.

[12:56] <lizmat> but "use MONKEY" is compile time

[12:56] <lizmat> .EVAL is runtime

[12:57] <lizmat> EVAL("foo") can be checked at compile time whether the &EVAL in question is the system's sub EVAL, and then complain

[12:57] <lizmat> if it is

[12:57] <lizmat> nine: it looks like

[12:58] <lizmat> my ($a) = 42

[12:58] <lizmat> is NYI in RakuAST, thoughts?

[12:59] <gfldex> So .EVAL would need to become a macro.

[12:59] <lizmat> but even then, methods are late bound

[13:00] <lizmat> so the macro (at compile time) can only be sure if the invocant can be determined at compile time

[13:00] <lizmat> and that can only be true if the invocant is a constant string

[13:00] <lizmat> in which case there's no injection danger

[13:01] <discord-raku-bot> <Nemokosch> maybe the EVAL method itself should have only been injected

[13:01] <lizmat> ?

[13:02] <discord-raku-bot> <Nemokosch> it shouldn't exist by default

[13:03] <gfldex> m: say "$@*ARGS[1]".EVAL;

[13:03] <camelia> rakudo-moar ee5e4c3b6: OUTPUT: «Use of uninitialized value @ARGS[1] of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤Nil␤  in block <unit> at <tmp> line 1␤»

[13:04] <lizmat> Nemokosch how would you activate it then ?

[13:09] <lizmat> nine: fwiw, the AST for 'my ($a) = 42' seems correct, so looks like QAST generation issue ?

[13:11] <discord-raku-bot> <Nemokosch> the pragma would mix the method in

[13:11] <nine> lizmat: signature declarations like that seem to have a lot of issues still. E.g. my ($a, $b) is default(1); doesn't work either. That's my current WIP

[13:11] <discord-raku-bot> <Nemokosch> similarly to traits I guess

[13:11] <lizmat> Nemokosch the pragma is *compile* time

[13:12] <discord-raku-bot> <Nemokosch> yes, just like traits?

[13:12] <lizmat> Nemokosch note that "use MONKEY" is *lexical*

[13:12] <lizmat> we cannot mix in a method lexically

[13:14] <discord-raku-bot> <Nemokosch> well to ask the most practical question

[13:15] <discord-raku-bot> <Nemokosch> is it really a problem that something that is currently always available, may become accidentally available, if somebody walks down on the explicitly risky path?

[13:15] <discord-raku-bot> <Nemokosch> sounds like a net win tbh

[13:15] <lizmat> I'm not saying it wouldn't be a good thing

[13:15] <lizmat> I'm saying that at the current state, we cannot implement it

[13:16] <lizmat> and even if we had lexical refinement (aka adding methods in a lexical scope)

[13:16] <discord-raku-bot> <Nemokosch> no I mean, if it cannot be done lexically, then do it globally

[13:16] <discord-raku-bot> <Nemokosch> that's still a win compared to no limit whatsoever, that's like the whole purpose, no?

[13:18] <nine> So you're saying if there's a "use MONKEY" anywhere in any comp unit in the process, all objects gain an .EVAL method? Did I understand that correctly?

[13:18] <discord-raku-bot> <Nemokosch> yes

[13:19] <lizmat> that's equivalent to a run-time check in Cool.EVAL

[13:19] <discord-raku-bot> <Nemokosch> except it can be done compile-time, I guess?

[13:19] <nine> Actually it can't, because it'd have to influence modules that are already precompiled

[13:22] *** jgaz joined
[13:23] <discord-raku-bot> <Nemokosch> that's not the biggest problem with precompilation, to be frank. use lib doesn't even work with it...

[13:23] <discord-raku-bot> <Nemokosch> anyway, understood, it cannot be done

[13:40] <gfldex> After carefully reading the definition of proto EVAL, I have come to the conclusion that one can always cheat with nqp and get hold of a compiler directly, use MONEKY or not.

[13:41] <lizmat> indeed

[13:41] <lizmat> there's no real magic there

[13:42] <gfldex> We better doc that.

[13:55] <Geth> ¦ rakudo/main: 50fc47cf6e | (Elizabeth Mattijsen)++ | 2 files

[13:55] <Geth> ¦ rakudo/main: RakuAST: add deparsing / .raku support for RakuAST::VarDeclaration::Signature

[13:55] <Geth> ¦ rakudo/main: 

[13:55] <Geth> ¦ rakudo/main: Sadly RakuAST::VarDeclaration::Signature isn't QASTed yet correctly,

[13:55] <Geth> ¦ rakudo/main: so there is no point in writing tests yet.

[13:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/50fc47cf6e

[13:59] <discord-raku-bot> <Nemokosch> the difference is rather that nqp is a "you shouldn't" thing, even much more so than the MONKEY pragma

[14:01] <Geth> ¦ roast: 48b5fc4039 | (Elizabeth Mattijsen)++ | S26-documentation/multiline-leading.t

[14:01] <Geth> ¦ roast: Change the way parameters are obtained

[14:01] <Geth> ¦ roast: 

[14:01] <Geth> ¦ roast: This currently doesn't work in RakuAST, and is not really a thing

[14:01] <Geth> ¦ roast: being tested here.  So change this, to get a passing test on RakuAST

[14:01] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/48b5fc4039

[14:01] <lizmat> 822!

[14:02] <lizmat> ok, that's all of the S26 tests that can be fixed now

[14:02] <lizmat> the remaining failing test files fail because:

[14:03] <lizmat> 1. no support for "macro" in RakuAST (at all)

[14:03] <lizmat> 2. different semantics on how trailing declarator doc is attached

[14:03] <lizmat> on the latter I will create a problem solving issue

[14:46] <Xliff> nine: Sorry. Got waylaid by $dayJob. Here's the gist: https://gist.github.com/Xliff/e0101d427fb6f2cd2eed361b402cb2b2

[14:46] <Xliff> lizmat++!

[15:04] *** kurahaupo left
[15:06] *** kurahaupo joined
[15:30] <Geth> ¦ rakudo/main: eaf4aea208 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[15:30] <Geth> ¦ rakudo/main: RakuAST: move implicit code block detection in its own method

[15:30] <Geth> ¦ rakudo/main: 

[15:30] <Geth> ¦ rakudo/main: For better maintainability

[15:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eaf4aea208

[15:30] <Geth> ¦ rakudo/main: ff29c918e1 | (Elizabeth Mattijsen)++ | 2 files

[15:30] <Geth> ¦ rakudo/main: RakuAST: adapt deparsing of ::Doc blocks

[15:30] <Geth> ¦ rakudo/main: 

[15:30] <Geth> ¦ rakudo/main: Start with a new line, don't add one at the end.  This feels more

[15:30] <Geth> ¦ rakudo/main: natural for reading.  Adapt tests accordingly.

[15:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ff29c918e1

[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:06] <nine> Xliff: RakuAST::Name.from-identifier(RakuAST::Name.from-identifier("GLib::Raw::Definitions")) makes no sense?

[18:07] <nine> Xliff: also that EVAL would have to be run at BEGIN time because import is a BEGIN time construct. With the command you ran, the import would be done before we even tried to load a module.

[18:19] <lizmat> argh

[18:20] * lizmat just finds out that implicit code blocks and explicit code blocks are rendered differently in $=pod, although they're both Pod::Block::Code objects

[18:21] <lizmat> .oO( WTFF )

[18:27] *** sena_kun joined
[19:17] <Geth> ¦ rakudo/main: 10742c9910 | (Elizabeth Mattijsen)++ | 2 files

[19:17] <Geth> ¦ rakudo/main: RakuAST: hopefully last fix on code block generation

[19:17] <Geth> ¦ rakudo/main: 

[19:17] <Geth> ¦ rakudo/main: Running raku --doc on the 70K of rakudoc of App::Rak now creates

[19:17] <Geth> ¦ rakudo/main: the same output byte for byte, but 6.5x as fast.

[19:17] <Geth> ¦ rakudo/main: 

[19:17] <Geth> ¦ rakudo/main: Strange findings: implicit code blocks and explicit code blocks

[19:17] <Geth> ¦ rakudo/main: are generated differently Pod::Block::Code objects.  Fixed by

[19:17] <Geth> ¦ rakudo/main: generating RakuAST blocks of type "implicit-code", and providing

[19:17] <Geth> ¦ rakudo/main: specific podification for that type.

[19:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/10742c9910

[19:17] <lizmat> 139/150 in make test!

[19:22] <lizmat> and that concludes my hacking for today

[19:22] <lizmat> &

[19:53] *** sena_kun left
[21:46] *** sena_kun joined
[22:26] *** sena_kun left
