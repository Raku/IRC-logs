[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:26] *** japhb left
[00:27] *** japhb joined
[01:25] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5241: Copy stuff to RakuAST grammar that uses `.obs`

[01:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5241

[01:50] *** japhb left
[01:53] *** japhb joined
[02:23] <tbrowder__> tonyo: looking good, fez-guy! gonna add all functionality of App::Mii6

[02:57] *** squashable6 left
[02:59] *** squashable6 joined
[04:56] *** bisectable6 left
[04:56] *** reportable6 left
[04:56] *** evalable6 left
[04:56] *** bloatable6 left
[04:56] *** linkable6 left
[04:56] *** shareable6 left
[04:56] *** releasable6 left
[04:56] *** sourceable6 left
[04:56] *** unicodable6 left
[04:56] *** quotable6 left
[04:56] *** nativecallable6 left
[04:56] *** tellable6 left
[04:56] *** benchable6 left
[04:56] *** squashable6 left
[04:56] *** coverable6 left
[04:56] *** committable6 left
[04:56] *** greppable6 left
[04:56] *** notable6 left
[04:56] *** statisfiable6 left
[04:56] *** benchable6 joined
[04:56] *** unicodable6 joined
[04:57] *** tellable6 joined
[04:57] *** quotable6 joined
[04:57] *** greppable6 joined
[04:58] *** reportable6 joined
[04:58] *** bloatable6 joined
[04:58] *** sourceable6 joined
[04:58] *** bisectable6 joined
[04:58] *** linkable6 joined
[04:58] *** shareable6 joined
[04:58] *** committable6 joined
[04:58] *** statisfiable6 joined
[04:58] *** evalable6 joined
[04:58] *** notable6 joined
[04:59] *** releasable6 joined
[04:59] *** coverable6 joined
[04:59] *** nativecallable6 joined
[04:59] *** squashable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:28] <Geth> ¦ rakudo/main: b340c2b185 | MasterDuke17++ (committed using GitHub Web editor) | src/Raku/Grammar.nqp

[07:28] <Geth> ¦ rakudo/main: Copy stuff to RakuAST grammar that uses `.obs`

[07:28] <Geth> ¦ rakudo/main: 

[07:28] <Geth> ¦ rakudo/main: These are directly copied from src/Perl6/Grammar.nqp and are primarily

[07:28] <Geth> ¦ rakudo/main: simple cases that just exist to give helpful error messages.

[07:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b340c2b185

[08:01] *** sena_kun joined
[09:02] <lizmat> I see that the V<> formatting code doesn't actually wind up in a FormattingCode object, which feels... wrong?

[09:03] <lizmat> I mean, if you want stuff to be used verbatim, maybe you'd want it to be given a special style, rather than just be treated as ordinary content ?

[09:04] <lizmat> well, I guess the documentation gives the answer: https://docs.raku.org/language/pod.html#Verbatim_text

[09:04] <lizmat> hmmm

[09:11] <discord-raku-bot> <Nemokosch> > only changes the way its contents are parsed, not the way they are rendered this doesn't even make sense

[09:15] <discord-raku-bot> <Nemokosch> Is this trying to say that V<> doesn't erase the context it appears in?

[09:15] <lizmat> it doesn't parse its contents for formatting codes, is what it does

[09:17] <discord-raku-bot> <Nemokosch> Yes, so far so good. But obviously by changing the parsing, you DO change the rendering. The rendering is based on the parsing

[09:17] <discord-raku-bot> <Nemokosch> It's the sentence that makes no sense, not the concept

[09:18] <lizmat> ah, then make a documentation PR  :-)

[09:19] <discord-raku-bot> <Nemokosch> First I'd like to know what you deduced from this text

[09:20] <lizmat> nine: maybe a strange idea, but regarding the parsing of pod for formatting codes, perhaps we should do that in Raku ?

[09:21] <lizmat> I don't think we have pod in the setting, so we could do that in a module in core, which could be handy to have as a separate thing altogether ?

[09:22] <lizmat> so that the Raku Grammar would just pass whatever is between the (conceptual) =begin / =end to a routine that would do the parsing ?

[09:22] <lizmat> and that routine would live in core.c

[09:35] <lizmat> do we have a reason why E<> formatting codes aren't directly rendered to graphemes ?

[10:26] <nine> lizmat: oh I'm usually all for doing things in Raku. The caveat being that as I mentioned my POD knowledge is barely above 0, so I really can't say whether there would be any drawbacks or whether any of this would need to be more integrated into the Raku parser (e.g. for slangs, pragmas or the like)

[10:27] <lizmat> well, it would be the part between =begin foo / =end foo

[10:27] <lizmat> with any config already parsed

[10:27] <lizmat> which you could consider to be a slang already

[10:28] <lizmat> it would use the same trick as deparsing: a hllsym containing the class to do the parsing

[11:51] <lizmat> m: $=pod.push("foo"); dd $=pod   # this feels meh

[11:51] <camelia> rakudo-moar b340c2b18: OUTPUT: «["foo"]␤»

[12:00] *** reportable6 left
[12:00] <discord-raku-bot> <Nemokosch> lol

[12:01] *** reportable6 joined
[14:27] *** vrurg left
[14:38] *** nine left
[14:40] *** vrurg joined
[14:43] *** camelia left
[14:49] *** camelia joined
[15:08] *** camelia left
[15:15] *** camelia joined
[15:18] *** nine joined
[15:48] <lizmat> nine: do we have a way to indicate that a RakuAST::Node does *not* produce any QAST ?

[15:51] <nine> Not that I'm aware of

[15:56] <lizmat> so returning an nqp::null is the closest to it I guess ?

[15:56] <tonyo> tbrowder__: thanks dude

[16:14] <nine> I guess you mean QAST::Op.new(:op<null>)

[16:14] <lizmat> yup

[16:28] <[Coke]> ...ok, but then it *is* producing QAST, no? :)

[17:10] <nine> Well the whole machinery assumes that QAST is produced, so that is at least QAST with negigible effect. It's not pretty, but it's also low hanging fruit for when everything is finally working and we're looking for opportunities to optimize things.

[17:16] <lizmat> so the way I see it atm, is that pod generates a RakuAST tree of objects, which then gets inserted in the current statement list as a Statement::Pod object

[17:18] <lizmat> when the entire RakuAST of a compunit is QASTed, the QAST of the pod is generated into the $!pod-blocks array of the Compilation Unit, pushed one by one as they get to be QASTed

[17:18] <lizmat> but the RakuAST pod tree itself would not produce anything (except maybe an nqp::null)

[17:19] <lizmat> this would allow macros to add pod if they wanted to, specifically Declarator opd

[17:19] <lizmat> *pod

[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[21:38] *** squashable6 left
[21:39] *** sena_kun left
[21:41] *** squashable6 joined
[23:26] *** evalable6 left
[23:26] *** linkable6 left
[23:27] *** linkable6 joined
[23:29] *** evalable6 joined
