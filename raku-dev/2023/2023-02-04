[00:00] <Geth> ¦ rakudo: 2colours++ created pull request #5182: Fix recent regression on storing Maps

[00:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5182

[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:03] *** epony joined
[00:04] *** ab5tract left
[02:18] <Geth> ¦ rakudo/complex-sign: 3504a40313 | (Will Coleda)++ | src/core.e/Complex.pm6

[02:18] <Geth> ¦ rakudo/complex-sign: Handle sign(0), add signature

[02:18] <Geth> ¦ rakudo/complex-sign: review: https://github.com/rakudo/rakudo/commit/3504a40313

[02:20] *** linkable6 left
[02:20] *** evalable6 left
[02:20] *** NemokoschKiwi joined
[02:21] *** NemokoschKiwi left
[02:21] *** evalable6 joined
[02:23] *** linkable6 joined
[03:35] *** kjp left
[03:42] <Geth> ¦ rakudo: coke self-unassigned Any.print-nl is broken https://github.com/rakudo/rakudo/issues/2713

[04:34] *** kjp joined
[05:36] *** nativecallable6 left
[05:36] *** reportable6 left
[05:36] *** evalable6 left
[05:36] *** benchable6 left
[05:36] *** statisfiable6 left
[05:36] *** unicodable6 left
[05:36] *** bisectable6 left
[05:36] *** bloatable6 left
[05:36] *** committable6 left
[05:36] *** notable6 left
[05:36] *** coverable6 left
[05:36] *** tellable6 left
[05:36] *** quotable6 left
[05:36] *** greppable6 left
[05:36] *** sourceable6 left
[05:36] *** releasable6 left
[05:36] *** shareable6 left
[05:36] *** squashable6 left
[05:36] *** linkable6 left
[05:36] *** nativecallable6 joined
[05:37] *** tellable6 joined
[05:37] *** benchable6 joined
[05:37] *** evalable6 joined
[05:37] *** releasable6 joined
[05:37] *** quotable6 joined
[05:38] *** statisfiable6 joined
[05:38] *** greppable6 joined
[05:38] *** notable6 joined
[05:38] *** squashable6 joined
[05:39] *** bisectable6 joined
[05:39] *** reportable6 joined
[05:39] *** coverable6 joined
[05:39] *** shareable6 joined
[05:39] *** linkable6 joined
[05:39] *** bloatable6 joined
[05:39] *** unicodable6 joined
[05:39] *** sourceable6 joined
[05:39] *** committable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:02] *** notable6 left
[07:02] *** statisfiable6 left
[07:02] *** shareable6 left
[07:02] *** linkable6 left
[07:02] *** sourceable6 left
[07:02] *** unicodable6 left
[07:02] *** coverable6 left
[07:02] *** nativecallable6 left
[07:02] *** greppable6 left
[07:02] *** tellable6 left
[07:02] *** reportable6 left
[07:02] *** quotable6 left
[07:02] *** bisectable6 left
[07:02] *** benchable6 left
[07:02] *** releasable6 left
[07:02] *** evalable6 left
[07:02] *** quotable6 joined
[07:02] *** notable6 joined
[07:02] *** evalable6 joined
[07:02] *** benchable6 joined
[07:02] *** reportable6 joined
[07:03] *** greppable6 joined
[07:03] *** linkable6 joined
[07:03] *** statisfiable6 joined
[07:03] *** nativecallable6 joined
[07:04] *** tellable6 joined
[07:04] *** coverable6 joined
[07:04] *** unicodable6 joined
[07:04] *** bisectable6 joined
[07:04] *** releasable6 joined
[07:05] *** shareable6 joined
[07:05] *** sourceable6 joined
[07:30] <nine> ab5tract: instead if nqp::can(..., 'resolution'), you want nqp::istype($!type, RakuAST::Lookup)

[07:30] <tellable6> nine, I'll pass your message to ab5tract

[07:35] <nine> ab5tract: but then, $!type should already be a RakuAST::Type and $!type.meta should give you the type object you're after

[07:35] <tellable6> nine, I'll pass your message to ab5tract

[08:16] <Geth> ¦ rakudo: usev6++ created pull request #5183: Streamline comments about CORE-SETTING-REV

[08:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5183

[10:09] *** ab5tract joined
[10:11] <ab5tract> nine: good point! The code looks better now

[10:11] <tellable6> 2023-02-04T07:30:52Z #raku-dev <nine> ab5tract: instead if nqp::can(..., 'resolution'), you want nqp::istype($!type, RakuAST::Lookup)

[10:11] <tellable6> 2023-02-04T07:35:08Z #raku-dev <nine> ab5tract: but then, $!type should already be a RakuAST::Type and $!type.meta should give you the type object you're after

[10:17] *** sena_kun joined
[10:22] <ab5tract> Now for the mysterious issue with whatevercodes :)

[10:22] <ab5tract> I have to say it though.... "all that, for one stinking subtest??" ;)

[10:31] <ab5tract> There must be a clue here... '-> Int $i where * == 5 { say $i }(5)' --> "This type cannot unbox to a native integer: P6opaque, WhateverCode"

[10:32] <lizmat> the --ll-exception trace doesn't give a clue ?

[10:40] <nine> I'd probably look at the QAST

[10:40] <ab5tract> not really, no. This should be happening in main with the new frontend too

[10:47] <ab5tract> looks like one of the major changes is that the relevant ParamTypeCheck node (?) has a WVal of Block in the new frontend and a WVal of WhateverCode in the old frontend

[10:48] <nine> Huh....I'd think that the Block is more correct :D

[10:50] <discord-raku-bot> <Nemokosch> could you please take a look at https://github.com/rakudo/rakudo/pull/5182 ? It should fix a release blocker thinko. We are not in a hurry but yeah, it would be good to get a clean sheet with a known problem

[10:50] <ab5tract> yeah, might be. it's our little wrapper that we apply around the expression, anyway. so all it would do is add a single extra layer. conceptually this should work

[10:51] <Geth> ¦ rakudo/main: 5ed14bc468 | (Márton Polgár)++ (committed using GitHub Web editor) | 2 files

[10:51] <Geth> ¦ rakudo/main: Fix recent regression on storing Maps (#5182)

[10:51] <Geth> ¦ rakudo/main: 

[10:51] <Geth> ¦ rakudo/main: The commit that was meant to fix storage of "hash objects" into Hashes

[10:51] <Geth> ¦ rakudo/main: had a serious thinko: after checking for Maps, it invoked a method

[10:51] <Geth> ¦ rakudo/main: defined on Hashes only. This meant that after the changes

[10:51] <Geth> ¦ rakudo/main: 

[10:51] <Geth> ¦ rakudo/main: my %problem is Map = :foo;

[10:51] <Geth> ¦ rakudo/main: <…commit message has 9 more lines…>

[10:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5ed14bc468

[10:52] <ab5tract> I also see some differences in attributes, not sure how relevant they are.. ' - QAST::WVal(Block :cuid(2))  :uninstall_if_immediately_used<?> :past_block<?> :code_object<?>' in old, just 'QAST::WVal(Block)` in the new

[10:57] <nine> You should be able to ignore those

[10:57] <ab5tract> nine: I think ApplyInfix does need some special casing. observe: ''say { * == 5 }(5)' --> "WhateverCode.new"; ''say { * == 5 }(5)(5)'' --> True

[10:58] <ab5tract> we are applying an extra level of wrapping

[10:58] <ab5tract> also: nine++; confirming my suspicions

[11:03] <nine> But, but that looks correct! In fact the old frontend tells you that it would create such a thing but that it would be seriously odd to want that:

[11:03] <nine> Malformed double closure; WhateverCode is already a closure without curlies, so either remove the curlies or use valid parameter syntax instead of *

[11:23] <ab5tract> oh yes, that behavior is correct! It's also what we are doing programmatically by re-wrapping the ApplyInfix expression

[11:23] <ab5tract> is it not?

[11:25] <ab5tract> ie, instead of the equivalent to '(* == 5).ACCEPTS(5)', we have '{ * == 5 }.ACCEPTS(5)', which returns a WhateverCode, which either explodes or passes the next call to .Bool gracefully

[11:28] <ab5tract> Ah, nevermind... we are making something closer to this, I think: '{ (* == 5).ACCEPTS($_).Bool }(5)'

[11:29] <ab5tract> dang

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:03] <nine> lizmat: hah! Now I know which additional test passes. Of course it's the new nqp.rakutest

[12:09] <lizmat> ah, so it was already at 127 ?

[12:09] <Geth> ¦ rakudo/main: d824e6d24c | (Stefan Seifert)++ | 2 files

[12:09] <Geth> ¦ rakudo/main: RakuAST: support stacking of type derivations

[12:09] <Geth> ¦ rakudo/main: 

[12:09] <Geth> ¦ rakudo/main: We already supported derived types like Int:D or Int(Cool), but could

[12:09] <Geth> ¦ rakudo/main: not combine derivations like Int:D(Cool). Now we can.

[12:09] <nine> yes

[12:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d824e6d24c

[12:16] <ab5tract> what does '- v' mean in QAST output? I see it in QAST generated by the old frontend

[12:16] <lizmat> ok, this cost me 3 hours to figure out

[12:16] <lizmat> don't use :$!name in code in src/Raku/ast

[12:17] <lizmat> it produces the weirdest compilation errors at the wrong place

[12:17] <lizmat> use :name($!name) instead, TIL

[12:19] <ab5tract> lizmat++

[12:27] <ab5tract> grrr... this case also fails (eg fails to fail) in the new frontend: 'module M { my subset F of Int where * ~~ 5 }; say my M::F $f = 6'

[12:28] <ab5tract> it should bail, not knowing what 'M::F' is

[12:28] <ab5tract> should there be a test file for all these seemingly untested subset thingies?

[12:33] <lizmat> m: module M { my subset F of Int where * ~~ 5 }; say my M::F $f = 6

[12:33] <camelia> rakudo-moar d824e6d24: OUTPUT: «===SORRY!===␤Type 'M::F' is not declared␤at <tmp>:1␤------> set F of Int where * ~~ 5 }; say my M::F⏏ $f = 6␤Malformed my␤at <tmp>:1␤------> bset F of Int where * ~~ 5 }; say my M::⏏F $f = 6␤␤»

[12:33] <lizmat> m: module M { subset F of Int where * ~~ 5 }; say my M::F $f = 6

[12:33] <camelia> rakudo-moar d824e6d24: OUTPUT: «Type check failed in assignment to $f; expected M::F but got Int (6)␤  in block <unit> at <tmp> line 1␤␤»

[12:34] <lizmat> perhaps the scope is missing on M::F in the new backend ?

[12:35] <lizmat> so, here's an idea wrt pragmas:

[12:37] <lizmat> why don't we populate Braid.$!slangs with all possible pragmas, but set to 0 ?

[12:38] <ab5tract> the scope is as defined as it needed to be for the default 'our' to work. not sure what else needs to be glued together / explicitly defined

[12:39] * lizmat neither

[12:39] <ab5tract> I have some custom code in "IMPL-INSTALL-SUBSET" and I expect that is where things are going wrong

[12:47] <ab5tract> making it 100% match (with some small tweaks) the IMPL-INSTALL-PACKAGE from package.rakumod did not fix anything..

[12:48] *** codesections left
[13:11] <bartolin> bisectable6: my class A {}; my class B {}; my class C is B is A {}; multi f(A) { "A" }; multi f(B) { "B" }; sub g(A $x) { say f($x) }; g(C.new)  ## https://github.com/Raku/old-issue-tracker/issues/2874

[13:11] <bisectable6> bartolin, Will bisect the whole range automagically because no endpoints were provided, hang tight

[13:11] <bisectable6> bartolin, Output on all releases: https://gist.github.com/664478b2f00fb7873dca7025ab407abb

[13:11] <bisectable6> bartolin, Bisecting by output (old=2020.08.2 new=2020.09) because on both starting points the exit code is 1

[13:12] <bisectable6> bartolin, bisect log: https://gist.github.com/da9e43abbbc2e937d8525551d666ee14

[13:12] <bisectable6> bartolin, (2020-08-20) https://github.com/rakudo/rakudo/commit/999680e657d3fe70abba2e33fcc7b770d88e5b81

[13:12] <bisectable6> bartolin, Bisecting by output (old=2017.12 new=2018.01) because on both starting points the exit code is 1

[13:12] <bisectable6> bartolin, bisect log: https://gist.github.com/94ccce845886e5259a7b3a58be43539b

[13:12] <bisectable6> bartolin, (2017-12-23) https://github.com/rakudo/rakudo/commit/6d65cf4ff9e941e2c644945dd1be32cd47249a05

[13:12] <bisectable6> bartolin, Bisecting by exit code (old=2017.01 new=2017.02). Old exit code: 0

[13:12] <bisectable6> bartolin, bisect log: https://gist.github.com/2d3079fd9d7e90b0848368a4436d52a1

[13:12] <bisectable6> bartolin, (2017-01-31) https://github.com/rakudo/rakudo/commit/f8b3469439108fead043bab2bd27bde4bac50dca

[13:13] <bisectable6> bartolin, Output on all releases and bisected commits: https://gist.github.com/2f3355d1bed8c97b71917681967c499e

[13:13] *** guifa left
[13:53] <discord-raku-bot> <Nemokosch> bartolin++ for organizing issues

[13:57] <bartolin> thanks. (It feels a bit like a drop in the ocean, but that's only a pesky temporary fealing ;))

[13:57] <bartolin> *feeling

[14:02] <discord-raku-bot> <Nemokosch> It helps with not getting completely lost and buried with incomprehensible issues 🙂

[14:40] <discord-raku-bot> <el gatito (** advocate)> how does the raku parser deal with operators afaik raku uses a recursive descent parser and it can’t deal with operators (left recursion specifically)

[15:03] <nine> Your IMPL-INSTALL-SUBSET needs to check self.scope to figure out what exactly it has to do

[15:25] <ab5tract> right, it's the what it has to do part that eludes me. I feel like I've gleaned as much as I can from the package.rakumod example

[15:42] <nine> Maybe you actually shouldn't take too much inspiration from package.rakumod as for one your job is a lot easier and two, I'm quite sure that code is anything but correct. It's mostly guess work in the horrible area of (potentially multi part) package name and stashes.

[15:42] <nine> If it's my scoped, generate the lexical, if it's our scoped, add it to the current package's stash.

[15:57] <ab5tract> That's essentially what I'm already doing, though I've just pushed a cleanup.

[15:58] <ab5tract> Only difference is I need to always install the lexical, otherwise RakuAST::Type::Simple doesn't resolve

[16:00] <ab5tract> and what about 'subset M::F where 5; my M::F $f = 5;' -- doesn't an implicit module (or package) 'M' get created when this is done? currently in the ast frontend it throws "malformed my"

[16:02] <nine> Oh indeed. Makes me wonder whether subset may actually need 100 % of package's complexity

[16:03] <nine> E.g. class Foo::Bar { }; subset Foo where * == 5; # in this case the subset Foo should replace the packgae stub Foo including stealing it's WHO

[16:05] <ab5tract> I tried with a full copy-paste treatment (aside from the lexical installation, where I do a VarDeclaration instead of a LexicalPackage) from the package code but it didn't fix my issue with 

[16:05] <ab5tract> *issue with 'my' subsets being available oustide their module

[16:06] <ab5tract> but yeah, it definitely needs that extra complexity to do what you are describing

[16:07] <nine> Funnily I'm currently investigating a similar issue in the other direction: { class Foo { } }; Foo.new does not find the our-scoped Foo, because it looks like the resolver doesn't actually look in any packages

[16:09] <ab5tract> well well

[16:10] <ab5tract> what happens when a WHO is stolen, by the way? does that mean that `Foo::Bar` would still exist?

[16:11] <nine> Yes, that's the point of stealing. Basically the stub package is replaced in the stash hierarchy with the more interesting one you just declared

[16:11] <ab5tract> gotcha

[16:44] <ab5tract> nine: I've built up a corpus of subset syntax / behavior tests. would it make sense for them to become part of the corpus?

[16:45] <ab5tract> wow, I guess because I rarely use 'corpus', I got excited and used it twice. Should the small corpus I've just created be added to the Grand Corpus of Raku?

[16:46] <nine> Sure, add them to roast

[16:51] <ab5tract> they might already be in there somewhere, lol. what a massive suite we have

[16:52] <ab5tract> alright, I'm out for today. Thanks all for your help on getting subsets to work

[16:52] <ab5tract> o/

[16:52] *** ab5tract left
[16:54] *** NemokoschKiwi joined
[16:56] <nine> Thanks for working on it :)

[17:21] *** NemokoschKiwi left
[17:38] *** rypervenche left
[17:40] *** rypervenche joined
[17:48] <nine> Raku is such a lexical package that to this date, the RakuAST resolver does not actually know how to even look up symbols in packages

[17:53] *** notna joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[20:00] <patrickb> o/

[20:01] <Geth> ¦ rakudo/main: 40a8d03283 | (Elizabeth Mattijsen)++ | 5 files

[20:01] <Geth> ¦ rakudo/main: RakuAST: refactor handling of pragma and isms

[20:01] <Geth> ¦ rakudo/main: 

[20:01] <Geth> ¦ rakudo/main: - create new RakUAST::Pragma and RakuAST::Isms class

[20:01] <Geth> ¦ rakudo/main: - create those from inside RakuAST::Statement::Use if applicable

[20:01] <Geth> ¦ rakudo/main: - move handling out of ::Use into the classes

[20:01] <Geth> ¦ rakudo/main: - add deparsing for these classes

[20:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/40a8d03283

[20:01] <discord-raku-bot> <Nemokosch> what's up, Patrick?

[20:01] <patrickb> I have a potential fix for the Supply/whenever issue I'm working on. All tests and spectest pass, except one. IMHO the outcome is technically correct, and the tests wrong. Can someone verify? The failing test is: https://gist.github.com/patrickbkr/b5295a5a0dac73db6f7b51f60ae57cbc

[20:03] <patrickb> The docs say that `zip` is done as soon as any of the given supplies is done. As the order in which the supplies are processed is undefined, the outcome can be a shorter list or even an empty one. With my changes it's the empty one (as it processes all the messages of the first supply first).

[20:07] <discord-raku-bot> <Nemokosch> it's weird that there is such a deterministic test for something conceptually non-deterministic, at least...

[20:07] <discord-raku-bot> <Nemokosch> no matter the result imo

[20:08] <discord-raku-bot> <Nemokosch> and exactly because it makes changes harder at low-level, relying on accidental results

[20:16] <Geth> ¦ Raku-Data-MessagePack/master: 10 commits pushed by (Polgár Márton)++

[20:16] <Geth> ¦ Raku-Data-MessagePack/master: review: https://github.com/raku-community-modules/Raku-Data-MessagePack/compare/99766f38ca4c...12384e78ba34

[20:31] <lizmat> Nemokosch perhaps also change the default branch to "main"  :-)

[20:39] <discord-raku-bot> <Nemokosch> heh, feel free to. That's definitely not on my list 🏳️

[20:46] <Geth> ¦ roast: f630edabeb | (Christian Bartolomäus)++ | S06-signature/optional.t

[20:46] <Geth> ¦ roast: [JVM] Unfudge tests for typed option @/% params

[20:46] <Geth> ¦ roast: 

[20:46] <Geth> ¦ roast: This has been fixed with

[20:46] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/49facdc03c.

[20:46] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f630edabeb

[20:46] <Geth> ¦ roast: 0d696f42a5 | (Christian Bartolomäus)++ | 2 files

[20:46] <Geth> ¦ roast: [JVM] Fudge some newly failing tests

[20:46] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0d696f42a5

[20:47] <lizmat> Nemokosch: are you done with Data::MessagePack for now?  don't want to interfere 

[20:47] <tellable6> lizmat, I'll pass your message to Nemokosch

[20:48] <discord-raku-bot> <Nemokosch> yes, I'd hope the main goal has been achieved for now

[20:48] <lizmat> oki, then I'll change the default branch

[20:49] <discord-raku-bot> <Nemokosch> do as you wish

[20:49] <discord-raku-bot> <Nemokosch> from now on, it's all up to users, which I am not, for better or worse

[20:49] <lizmat> oki

[20:50] <Geth> ¦ Data-MessagePack/main: 62 commits pushed by 8 authors

[20:50] <Geth> ¦ Data-MessagePack/main: review: https://github.com/raku-community-modules/Data-MessagePack/compare/ca3dab71ac59^...12384e78ba34

[20:50] *** guifa joined
[20:50] <lizmat> also, removed the redundant "Raku-" prefix from the repo name

[20:54] <discord-raku-bot> <Nemokosch> okay, just make sure it stays consistent with metadata (or well, vice versa)

[20:55] <discord-raku-bot> <Nemokosch> by the way, any opinion on patrickb's test issue? so that it doesn't get buried

[20:56] <discord-raku-bot> <Nemokosch> okay, it's also noted at https://github.com/Raku/problem-solving/issues/364

[21:14] <Geth> ¦ rakudo/main: e45436ef06 | (Elizabeth Mattijsen)++ | 2 files

[21:14] <Geth> ¦ rakudo/main: Abstract the producing of Nil

[21:14] <Geth> ¦ rakudo/main: 

[21:14] <Geth> ¦ rakudo/main: Several classes will always produce Nil as their result.  Abstract

[21:14] <Geth> ¦ rakudo/main: that logic into a single role to increase the amount of DRY.

[21:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e45436ef06

[21:15] <lizmat> and that concludes my hacking for today&

[21:37] *** notna left
[22:31] *** guifa left
[23:20] *** sena_kun left
[23:30] *** ab5tract joined
[23:45] *** ab5tract left
[23:57] <Geth> ¦ rakudo: shmup++ created pull request #5185: Fix minor non-comment typos

[23:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5185

