[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:05] *** kjp left
[00:37] *** kjp joined
[04:00] *** notable6 left
[04:00] *** unicodable6 left
[04:00] *** squashable6 left
[04:00] *** tellable6 left
[04:00] *** coverable6 left
[04:00] *** linkable6 left
[04:00] *** sourceable6 left
[04:00] *** evalable6 left
[04:00] *** bisectable6 left
[04:00] *** reportable6 left
[04:00] *** nativecallable6 left
[04:00] *** shareable6 left
[04:00] *** releasable6 left
[04:00] *** benchable6 left
[04:00] *** quotable6 left
[04:00] *** greppable6 left
[04:00] *** statisfiable6 left
[04:00] *** bloatable6 left
[04:00] *** committable6 left
[04:00] *** statisfiable6 joined
[04:01] *** bisectable6 joined
[04:01] *** tellable6 joined
[04:01] *** shareable6 joined
[04:01] *** sourceable6 joined
[04:01] *** evalable6 joined
[04:01] *** committable6 joined
[04:01] *** notable6 joined
[04:02] *** coverable6 joined
[04:02] *** reportable6 joined
[04:02] *** greppable6 joined
[04:02] *** nativecallable6 joined
[04:02] *** bloatable6 joined
[04:02] *** quotable6 joined
[04:02] *** squashable6 joined
[04:02] *** unicodable6 joined
[04:03] *** releasable6 joined
[04:03] *** linkable6 joined
[04:03] *** benchable6 joined
[05:41] *** Xliff left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:21] <bartolin> btw, it looks like this would unbreak the JVM build: https://gist.github.com/usev6/020176b7f8177f8c08256c01e7f4b917

[06:22] <bartolin> It seems to have worked fine in the past and I didn't see yet when/why the old code started to fail.

[06:22] <bartolin> anyway, off to $dayjob now &

[07:25] *** squashable6 left
[07:26] *** squashable6 joined
[07:28] *** ab5tract joined
[08:29] *** sena_kun joined
[09:49] *** squashable6 left
[09:49] *** bisectable6 left
[09:49] *** bloatable6 left
[09:49] *** evalable6 left
[09:49] *** statisfiable6 left
[09:49] *** releasable6 left
[09:49] *** benchable6 left
[09:49] *** greppable6 left
[09:49] *** reportable6 left
[09:49] *** nativecallable6 left
[09:49] *** linkable6 left
[09:49] *** quotable6 left
[09:49] *** sourceable6 left
[09:49] *** coverable6 left
[09:49] *** shareable6 left
[09:49] *** unicodable6 left
[09:49] *** tellable6 left
[09:49] *** committable6 left
[09:49] *** notable6 left
[09:50] *** unicodable6 joined
[09:50] *** squashable6 joined
[09:50] *** sourceable6 joined
[09:50] *** statisfiable6 joined
[09:50] *** linkable6 joined
[09:50] *** quotable6 joined
[09:50] *** shareable6 joined
[09:50] *** notable6 joined
[09:51] *** tellable6 joined
[09:51] *** coverable6 joined
[09:51] *** evalable6 joined
[09:51] *** releasable6 joined
[09:51] *** bisectable6 joined
[09:51] *** bloatable6 joined
[09:52] *** greppable6 joined
[09:52] *** nativecallable6 joined
[09:52] *** committable6 joined
[09:52] *** reportable6 joined
[09:52] *** benchable6 joined
[09:57] *** Altai-man joined
[09:59] *** sena_kun left
[09:59] <lizmat> m: dd "ＡＡ".parse-base(16)

[09:59] <camelia> rakudo-moar fc8bf7c00: OUTPUT: «170␤»

[09:59] <lizmat> m: say "Ａ".uniname   # TIL you can also use full-width letters for hex numbers ?

[09:59] <camelia> rakudo-moar fc8bf7c00: OUTPUT: «FULLWIDTH LATIN CAPITAL LETTER A␤»

[10:28] <ab5tract> I'm starting to understand why qualified method calls are NYI 

[10:30] <ab5tract> talk about torturing the implementor...

[10:33] <lizmat> hehe   :-)   ++ab5tract 

[10:42] <ab5tract> I've got a situation where I need a type object in order to fill in a QAST::WVal, but if I use implicit-lookups and .resolution.compile-time-value, it will fail if the type doesn't exist.

[10:43] <ab5tract> I also don't have a resolver object in scope for this method

[11:05] <Geth> ¦ rakudo/main: d3b53807ea | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[11:05] <Geth> ¦ rakudo/main: RakuAST: moved some elements of HLL::Grammar to Raku::Grammar

[11:05] <Geth> ¦ rakudo/main: 

[11:05] <Geth> ¦ rakudo/main: As a start to completely lose NQP's HLL::Grammar as a base class,

[11:05] <Geth> ¦ rakudo/main: which is needed to be able to use OperatorProperties properly during

[11:05] <Geth> ¦ rakudo/main: parsing and be able to get rid of the operator info hashes.

[11:05] <Geth> ¦ rakudo/main: 

[11:05] <Geth> ¦ rakudo/main: Also added some documentation markers for better readability

[11:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d3b53807ea

[11:06] <lizmat> ab5tract: I think in some cases his is fixed by adding an attribute, and putting the type object in it at resolve timer

[11:06] <lizmat> *time

[11:06] <lizmat> *this

[11:08] <ab5tract> ack, thanks

[11:37] <ab5tract> lizmat: is there any way to "create" a type object (just the object, no installation or anything) without resolution?

[11:37] <lizmat> does it exist in the setting?

[11:38] <lizmat> ah, no, you'd need a resolver object for that as well

[11:51] <ab5tract> it's a user-defined (or not) type

[11:53] <lizmat> I don't know of a way without a resolver

[11:53] <ab5tract> m: role A { method m() { self.x } }; class B does A { has $.x = 42; method m() { self.D::m() } }

[11:53] <camelia> rakudo-moar d3b53807e: ( no output )

[11:54] <ab5tract> m: role A { method m() { self.x } }; class B does A { has $.x = 42; method m() { self.D::m() } }; B.new.m

[11:54] <camelia> rakudo-moar d3b53807e: OUTPUT: «Cannot dispatch to method m on Failure because it is not inherited or done by B␤  in method m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:54] <ab5tract> ^^ the above doesn't check whether the type is defined or not

[11:55] <ab5tract> but that actually seems to make sense according to the base compiler (it doesn't complain about not finding D until run-time)

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:00] <lizmat> yeah, method call lookup is runtime, whether fully qualified or not

[12:01] <lizmat> m: class A { }; A.B::foo()

[12:01] <camelia> rakudo-moar d3b53807e: OUTPUT: «Cannot dispatch to method foo on Failure because it is not inherited or done by A␤  in block <unit> at <tmp> line 1␤␤»

[12:01] <lizmat> that's actually an LTA error

[12:02] <lizmat> looking at the QAST in the legacy grammar

[12:04] <lizmat> it appears to be doing a nqp::who($?PACKAGE).AT-KEY("B").foo

[12:07] <Geth> ¦ rakudo/ugexe/bartolin-fix-jvm-maybe: 3c3c40cca4 | (Nick Logan)++ | src/Perl6/Actions.nqp

[12:07] <Geth> ¦ rakudo/ugexe/bartolin-fix-jvm-maybe: Fix JVM build

[12:07] <Geth> ¦ rakudo/ugexe/bartolin-fix-jvm-maybe: review: https://github.com/rakudo/rakudo/commit/3c3c40cca4

[12:08] <Geth> ¦ rakudo: ugexe++ created pull request #5365: Fix JVM build

[12:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5365

[12:10] <Geth> ¦ rakudo/ugexe/bartolin-fix-jvm-maybe: 1227b40723 | (Nick Logan)++ | src/Perl6/Actions.nqp

[12:10] <Geth> ¦ rakudo/ugexe/bartolin-fix-jvm-maybe: Fix JVM build

[12:10] <Geth> ¦ rakudo/ugexe/bartolin-fix-jvm-maybe: review: https://github.com/rakudo/rakudo/commit/1227b40723

[12:11] <ab5tract> well, my half-baked fix does bring +3 spectests into the fold

[12:16] <lizmat> so why is it half-baked then?

[12:22] <ab5tract> it behaves differently from base in that it dies when the qualified package is not found

[12:23] <ab5tract> I have a chicken-egg situation with constructing the call to dispatch:<::> -- it wants a type object, but if the qualified package is not resolvable...

[12:23] <ab5tract> let me push, maybe that will make things clearer

[12:26] <Geth> ¦ rakudo: ab5tract++ created pull request #5366: RakuAST: Fix t/spec/S14-roles/basic.t 

[12:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5366

[12:28] <ab5tract> lizmat ^^

[12:30] <lizmat> ab5tract some nits and questions

[12:30] <lizmat> otherwise looks good  :-)

[13:10] <ab5tract> nits and questions should now be addressed

[13:17] <ab5tract> && shortcircuits in NQP and it's RakuAST variant, right?

[13:22] <lizmat> yes, && shortcircuits everywhere

[13:22] <lizmat> afaik  :-)

[14:11] <Geth> ¦ rakudo/main: fc9debac98 | (Elizabeth Mattijsen)++ | 2 files

[14:11] <Geth> ¦ rakudo/main: RakuAST: Streamline integer handling a bit

[14:11] <Geth> ¦ rakudo/main: 

[14:11] <Geth> ¦ rakudo/main: - make these tokens better readable

[14:11] <Geth> ¦ rakudo/main: - don't capture what doesn't need capturing

[14:11] <Geth> ¦ rakudo/main: - copy "integer" action from HLL::Actions to reduce dependency

[14:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fc9debac98

[14:11] <Geth> ¦ rakudo/main: a369b57fbe | (Elizabeth Mattijsen)++ | 2 files

[14:11] <Geth> ¦ rakudo/main: Make X::Worry::P5::LeadingZero exception more readable

[14:11] <Geth> ¦ rakudo/main: 

[14:11] <Geth> ¦ rakudo/main: And adapt test that was a little too keen on specific format

[14:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a369b57fbe

[14:16] <Geth> ¦ rakudo/main: 1227b40723 | (Nick Logan)++ | src/Perl6/Actions.nqp

[14:16] <Geth> ¦ rakudo/main: Fix JVM build

[14:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1227b40723

[14:16] <Geth> ¦ rakudo/main: c12f478a1c | (Nick Logan)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[14:16] <Geth> ¦ rakudo/main: Merge pull request #5365 from rakudo/ugexe/bartolin-fix-jvm-maybe

[14:16] <Geth> ¦ rakudo/main: 

[14:16] <Geth> ¦ rakudo/main: Fix JVM build

[14:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c12f478a1c

[14:16] <ugexe> indeed, that fixed the JVM ci tests

[14:16] <ugexe> bartolin++

[14:18] <ugexe> hmm actually there was a linux and mac test failure that look like they are unrelated, but maybe they werent

[14:19] <ugexe> Lin_MVM_reloc passed but Lin_MVM failed a test, and Mac_MVM_reloc failed a test but Mac_MVM passed

[14:22] *** evalable6 left
[14:22] *** linkable6 left
[14:22] *** evalable6 joined
[14:22] *** linkable6 joined
[15:22] *** committable6 left
[15:22] *** linkable6 left
[15:22] *** reportable6 left
[15:22] *** statisfiable6 left
[15:22] *** unicodable6 left
[15:22] *** nativecallable6 left
[15:22] *** bisectable6 left
[15:22] *** tellable6 left
[15:22] *** benchable6 left
[15:22] *** releasable6 left
[15:22] *** coverable6 left
[15:22] *** evalable6 left
[15:22] *** shareable6 left
[15:22] *** sourceable6 left
[15:22] *** greppable6 left
[15:22] *** quotable6 left
[15:22] *** squashable6 left
[15:22] *** notable6 left
[15:22] *** bloatable6 left
[15:23] *** greppable6 joined
[15:23] *** releasable6 joined
[15:23] *** notable6 joined
[15:23] *** sourceable6 joined
[15:23] *** bisectable6 joined
[15:24] *** linkable6 joined
[15:24] *** unicodable6 joined
[15:24] *** benchable6 joined
[15:24] *** reportable6 joined
[15:24] *** shareable6 joined
[15:24] *** nativecallable6 joined
[15:24] *** statisfiable6 joined
[15:24] *** committable6 joined
[15:24] *** bloatable6 joined
[15:24] *** coverable6 joined
[15:25] *** squashable6 joined
[15:25] *** quotable6 joined
[15:25] *** tellable6 joined
[15:25] *** evalable6 joined
[15:45] <ab5tract> hmm, so the regressions in my branch are both related to assigning Inf/Nan to Int

[15:48] <Geth> ¦ rakudo/main: c4674f7000 | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[15:48] <Geth> ¦ rakudo/main: Add OperatorProprties support for allowable openers/closers

[15:48] <Geth> ¦ rakudo/main: 

[15:48] <Geth> ¦ rakudo/main: For custom (post)circumfix operators.  Adds the following class methods:

[15:48] <Geth> ¦ rakudo/main: - bracket-openers            returns all ok openers as a single string

[15:48] <Geth> ¦ rakudo/main: - bracket-closers            returns all ok closers as a single string

[15:48] <Geth> ¦ rakudo/main: - bracket-closer-for-opener  return closer for given opener, if any

[15:48] <Geth> ¦ rakudo/main: - bracket-opener-for-closer  return opener for given closer, if any

[15:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c4674f7000

[15:48] <lizmat> ab5tract: that feels.... odd?

[15:48] <ab5tract> It goes from a sorry t(with slightly misleading instructions that suggest coercing Inf.Int or Int(Inf)) to a runtime assignment failure (Type check failed in assignment to $f; expected Int but got Num (Inf))

[15:51] <ab5tract> yeah, I mean I fiddled with the logic that controls dispatching to that sorry, but I can't see where the current code would let NaN and Inf slip through

[15:51] <ab5tract> "not ok 22 - trying to assign NaN to Int gives a helpful error"

[15:52] <ab5tract> technically the new behavior still fulfills the spirit of the test

[15:52] <lizmat> except maybe now it's a runtime rather than a compile time error ?

[15:53] <ab5tract> well, that's why it's failing the reality of the test :)

[15:53] <lizmat> m: my Int $a = Inf

[15:53] <camelia> rakudo-moar c12f478a1: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot assign a literal of type Num (Inf) to a variable of type Int. ␤You can declare the variable to be of type Real, or try to coerce the␤value with Inf.Int or Int(Inf).␤at <tmp>:1␤------> m…»

[15:54] <lizmat> m: my Int $a = val("Inf").Num

[15:54] <camelia> rakudo-moar c12f478a1: OUTPUT: «Type check failed in assignment to $a; expected Int but got Num (Inf)␤  in block <unit> at <tmp> line 1␤␤»

[15:54] <lizmat> so the sorry is not creating a panic?

[15:54] <ab5tract> yup, that's the distinction there

[15:55] <ab5tract> nope, the sorry is just never thrown and it is caught later on 

[15:55] <lizmat> ah... hmm

[15:58] <ab5tract> and the tests are checking the specific syntax error class, so those fail

[16:00] <ab5tract> something about https://github.com/ab5tract/rakudo/blob/2d712bd7c89afde865bb411e2ad2ab4880ed9359/src/Raku/ast/variable-declaration.rakumod#L736

[16:00] <ab5tract> but..

[16:00] <ab5tract> m: dd NaN ~~ Numeric

[16:00] <camelia> rakudo-moar c12f478a1: OUTPUT: «Bool::True␤»

[16:15] <ab5tract> actually, $vartype there should be set to Int, IIUC

[17:18] <ugexe> main indeed has a green CI again

[17:52] <lizmat> ah, looks like Github is not delivering webhooks atm

[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:05] <ab5tract> lizmat: my PR is fixed. now +4 to spectest :)

[18:05] <lizmat> whee!

[18:05] <lizmat> ab5tract++

[18:05] <lizmat> so ready to merge ?

[18:06] *** Geth left
[18:06] *** Geth joined
[18:20] <Geth> ¦ rakudo/main: c21f4b6b40 | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[18:20] <Geth> ¦ rakudo/main: Add reserved operator knowledge to OperatotProperties

[18:20] <Geth> ¦ rakudo/main: 

[18:20] <Geth> ¦ rakudo/main: - is-reserved-operator    return whether given op name is reserved

[18:20] <Geth> ¦ rakudo/main: - reserved-operator-hint  return hint for reserved operator name

[18:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c21f4b6b40

[18:20] <Geth> ¦ rakudo/main: ceb3d4078c | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[18:20] <Geth> ¦ rakudo/main: RakuAST: add ::Action.OperatorProperties

[18:20] <Geth> ¦ rakudo/main: 

[18:20] <Geth> ¦ rakudo/main: to be able to access the OperatorProperties class in the grammar.

[18:20] <Geth> ¦ rakudo/main: At least for now, until we have a better solution

[18:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ceb3d4078c

[18:20] <lizmat> wow, about 30 minutes delay

[18:28] <ab5tract> yeah, it should be ready to merge

[18:30] <ab5tract> I assume nine is okay with the use of the resolver to grab Numeric

[18:31] <lizmat> yeah, that should be ok: if you have a resolver handy, why not use it?

[18:31] <lizmat> I've merged, but it seems Github has a 30 minute delay in delivering webhooks atm

[18:31] <lizmat> so it will be a while before you see it here

[18:33] <lizmat> on Twitter: "We’ve mitigated the issue causing Webhooks latency and are monitoring processing of the backlog of queued requests."

[18:40] <lizmat> 942 +4  :-)

[18:46] <Geth> ¦ rakudo/main: 978e2d7898 | ab5tract++ (committed using GitHub Web editor) | 4 files

[18:46] <Geth> ¦ rakudo/main: RakuAST: Fix various Role issues

[18:46] <Geth> ¦ rakudo/main: 

[18:46] <Geth> ¦ rakudo/main: This allows statements like `role R {}; my R $r = 42` to fail at

[18:46] <Geth> ¦ rakudo/main: run-time, as expected.

[18:46] <Geth> ¦ rakudo/main: 

[18:46] <Geth> ¦ rakudo/main: Fixes the following code:

[18:46] <Geth> ¦ rakudo/main: 

[18:46] <Geth> ¦ rakudo/main:         role R { has $.n }

[18:46] <Geth> ¦ rakudo/main:         class C does R { has R $.r .= new(:$!n) }

[18:46] <Geth> ¦ rakudo/main:         my C $c .= new(:n(1));

[18:46] <Geth> ¦ rakudo/main:         dd $c.r.n

[18:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/978e2d7898

[18:46] <lizmat> only 15 minutes delay  :-)

[18:55] <ab5tract> it seems you squash merged it. I was being very careful with the commits, as there were things like adding :ver<>:auth<>:api<> along the way

[18:56] <ab5tract> stuff that was mostly orthogonal to roles in the specific case

[18:56] <lizmat> sorry want me to revert and merge again?

[18:57] <ab5tract> no big deal

[18:58] <lizmat> sorry again  :-(

[18:58] <ab5tract> I don't know if it's worth rewriting history over :)

[18:58] <ab5tract> it's all good. next time!

[18:59] <lizmat> ok, will keep in mind (hopefully)

[18:59] <ab5tract> I'll try to remember to mention it, as well

[19:00] <ab5tract> well, on second thought.. how big a deal would it be to revert and merge again?

[19:00] <lizmat> not very

[19:00] <ab5tract> if it's not a mega hassle, I think future code writers might appreciate it

[19:00] <Geth> ¦ rakudo/revert-5366-fix-roles-basic: 96b84ac43b | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 4 files

[19:00] <Geth> ¦ rakudo/revert-5366-fix-roles-basic: Revert "RakuAST: Fix various Role issues"

[19:00] <Geth> ¦ rakudo/revert-5366-fix-roles-basic: 

[19:00] <Geth> ¦ rakudo/revert-5366-fix-roles-basic: This reverts commit 978e2d789870885b8b37ec4da4f6808fe900be7a.

[19:00] <Geth> ¦ rakudo/revert-5366-fix-roles-basic: review: https://github.com/rakudo/rakudo/commit/96b84ac43b

[19:01] <Geth> ¦ rakudo: lizmat++ created pull request #5367: Revert "RakuAST: Fix t/spec/S14-roles/basic.t "

[19:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5367

[19:01] <lizmat> hmmm.. that was not what I was going for  :-(

[19:02] <lizmat> ok, much more complicated than I thought  :-(

[19:03] <ab5tract> then: next time :)

[19:06] *** linkable6 left
[19:06] *** evalable6 left
[19:08] *** linkable6 joined
[19:09] *** evalable6 joined
[19:22] *** melezhik joined
[19:25] <gfldex> m: &fail andthen :continue;

[19:25] <camelia> rakudo-moar 978e2d789: OUTPUT: «WARNINGS for <tmp>:␤Useless use of ":continue" in sink context (line 1)␤»

[19:25] <gfldex> m: quietly &fail andthen :continue;

[19:25] <camelia> rakudo-moar 978e2d789: OUTPUT: «WARNINGS for <tmp>:␤Useless use of ":continue" in sink context (line 1)␤»

[19:28] *** melezhik left
[19:32] <ab5tract> gfldex: it doesn't give that warning with RAKUDO_RAKUAST=1 .. bug or feature?

[19:33] <gfldex> I would say that is a bug.

[19:33] <gfldex> We got those sink context warnings for a reason.

[19:33] <ab5tract> indeed

[19:34] <ab5tract> but atm it doesn't have a single complaint about your poetry

[19:38] <gfldex> As I understand it, those sink context warnings where put into place to indicate precedence mistakes with chaind infix operators.

[19:39] <gfldex> So they also may be LTA.

[20:00] <vrurg> ugexe: do we have a semi-legal way of pulling out particular dependencies from a precompilation?

[20:08] <ugexe> i dont believe so. i'm not sure it could even know its dependencies since they could potentially not even come about until runtime 

[20:10] <ugexe> i guess if it was possible to get at its $?DISTRIBUTION object you could sort of do it that way, but i don't think thats quite what you're looking for

[20:15] <vrurg> Nah... I would be happy to get just those which are known at the compile time.

[20:15] <vrurg> After all, the bytecode loaders knows them anyway.

[20:16] <ugexe> if they know it would be because the sha1 is known, but sha1 is only one direction

[20:16] <ugexe> so im not sure it can be determined

[20:17] <vrurg> Makes sense. OK then.

[20:18] <vrurg> It was my last hope to try optimizing app compilation time. Full precomp with all the dependencies takes ~16mins.

[20:19] <ugexe> oh maybe they can be, although i dunno if its legal

[20:19] <ugexe> D2351607845CB3DBE195C57B659CE263038AECDEsite#sources/D2351607845CB3DBE195C57B659CE263038AECDE15C262EC5123519E9ADFF092316637FAFBDD9744CompUnit::DependencySpecification.new(:short-name<Zef::Identity>,:version-matcher<0.19.0>,:auth-matcher<github:ugexe>,:api-matcher<0>)

[20:19] <ugexe> stuff like that is in the repo files

[20:20] <ugexe> so maybe just naively parse out the CompUnit::DependencySpecification

[20:20] <ugexe> i think the parts are \0 separated

[20:22] <vrurg> They are. Hm, at first I hoped to avoid that, but why not, after all?

[20:23] <vrurg> Thanks!

[20:24] <ugexe> i wonder if it makes sense to have some sort of api to do it

[20:26] <vrurg> I think it does. Xliff would most certainly be happy about it. It seems like me too now. ;)

[20:26] <ugexe> for instance with RakuAST i wonder if the same functionality could be done on source code

[20:27] <ugexe> so then all Repository objects could have some dependencies-for-spec(...) or some such

[20:27] <ugexe> the precomp repository objects would have the same method, except it would determine them by e.g. reading and parsing that file

[20:28] <ugexe> that should hide most implementation details

[20:33] <vrurg> Sounds like a plan to me. RakuAST may not know all the compile-time dependecies because some might occur in BEGIN phasers via, say, `require`. But then they are available before precomp is produced.

[20:41] <ugexe> m: say CompUnit::PrecompilationDependency::File.deserialize("BF820EA236973A1CB5A7F26B2F7AA2FAA9F9BA0A\0site#sources/BF820EA236973A1CB5A7F26B2F7AA2FAA9F9BA0A\0837991E401FD609CA0F33912991916EF0B2FF465\0CompUnit::DependencySpecification.new(:short-name<XXX>,:version-matcher<0.1.0>,:auth-matcher<github:ugexe>,:api-matcher<0>)").spec

[20:41] <camelia> rakudo-moar 978e2d789: OUTPUT: «CompUnit::DependencySpecification.new(:short-name<XXX>,:version-matcher<0.1.0>,:auth-matcher<github:ugexe>,:api-matcher<0>)␤»

[20:42] <ugexe> so that method can parse the precomp dependency lines

[20:42] <ugexe> its still doing an EVAL though :/

[20:45] <vrurg> And this is what I call 'semi-legal'. :) It would be preferable to have just keys alone in the precomp. I was even considering using JSON at some point. But that's too much for the task.

[22:23] *** statisfiable6 left
[22:23] *** evalable6 left
[22:23] *** tellable6 left
[22:23] *** nativecallable6 left
[22:23] *** greppable6 left
[22:23] *** reportable6 left
[22:23] *** sourceable6 left
[22:23] *** committable6 left
[22:23] *** shareable6 left
[22:23] *** releasable6 left
[22:23] *** coverable6 left
[22:23] *** bisectable6 left
[22:23] *** squashable6 left
[22:23] *** unicodable6 left
[22:23] *** benchable6 left
[22:23] *** linkable6 left
[22:23] *** notable6 left
[22:23] *** bloatable6 left
[22:23] *** quotable6 left
[22:24] *** linkable6 joined
[22:24] *** bisectable6 joined
[22:24] *** squashable6 joined
[22:24] *** shareable6 joined
[22:24] *** evalable6 joined
[22:24] *** unicodable6 joined
[22:25] *** coverable6 joined
[22:25] *** reportable6 joined
[22:25] *** quotable6 joined
[22:25] *** notable6 joined
[22:25] *** committable6 joined
[22:25] *** greppable6 joined
[22:25] *** sourceable6 joined
[22:26] *** nativecallable6 joined
[22:26] *** bloatable6 joined
[22:26] *** benchable6 joined
[22:26] *** statisfiable6 joined
[22:26] *** releasable6 joined
[22:27] *** tellable6 joined
[22:53] *** Altai-man left
[23:55] *** japhb left
