[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:02] *** guifa joined
[02:40] *** linkable6 left
[02:40] *** evalable6 left
[02:42] *** evalable6 joined
[02:42] *** linkable6 joined
[04:38] *** heartburn left
[04:41] *** heartburn joined
[05:17] *** jaguart left
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[07:31] <nine> Chances are that the bug will just disappear with the switch to RakuAST as we will have to completely rewrite the static optimizer, too

[09:05] *** ab5tract joined
[09:49] <discord-raku-bot> <Nemokosch> When you are developing/fixing something, what workflow are you using? Like, what are you checking locally, where do you push, things like that

[09:50] <discord-raku-bot> <Nemokosch> can I use a rakubrew build or should I set up something independent?

[10:03] <nine> I have never used rakubrew. I just have the repository checked out

[10:06] <discord-raku-bot> <Nemokosch> and what do you need to rebuild in the case of a change in the core?

[10:09] *** ab5tract left
[10:10] <Voldenet> just `make && make install` is sufficient

[10:10] <Voldenet> on rakudo repo

[10:14] <discord-raku-bot> <Nemokosch> and how would you test the very development?

[10:15] <Voldenet> I remember playing around the code and a lot of things you can directly copy into single file

[10:16] <Voldenet> rename classes, ignore the standard library and focus on the problem

[10:17] <discord-raku-bot> <Nemokosch> under gen?

[10:17] <Voldenet> Nope, just a regular raku script

[10:17] <Voldenet> I remember adding some opcodes to moarvm and the approach worked, insanely enough

[10:17] <Voldenet> though it required recompiling mvm/nqp obviously

[10:19] <discord-raku-bot> <Nemokosch> well, that sounds funny

[10:19] <discord-raku-bot> <Nemokosch> anyway, it would be good to have some tests that can be kept/reused

[10:31] <nine> I don't understand this question: "how would you test the very development?"

[10:32] <discord-raku-bot> <Nemokosch> what you exactly did

[10:34] <lizmat> RAKUDO_RAKUAST=1 make spectest | grep '\. ok' | wc -l

[10:34] <nine> I change code, run make, then ./rakudo-m -Ilib t/path/to/test/file.t

[10:46] <discord-raku-bot> <Nemokosch> thanks

[11:00] <Geth> ¦ rakudo/main: 6ef8993fbd | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals.pm6

[11:00] <Geth> ¦ rakudo/main: Don't pollute PROCESS:: with failed $*FOO lookups

[11:00] <Geth> ¦ rakudo/main: 

[11:00] <Geth> ¦ rakudo/main: Instead, put the failed lookups in a separate internal hash. This

[11:00] <Geth> ¦ rakudo/main: means one additional PROCESS::.ESISTS-KEY for each failed dynamic

[11:00] <Geth> ¦ rakudo/main: var lookup, while retaining the advantage of not needing to make a

[11:00] <Geth> ¦ rakudo/main: new Exception/Failure every time.

[11:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6ef8993fbd

[11:17] <Geth> ¦ rakudo/main: 04329e4504 | (Elizabeth Mattijsen)++ | src/Raku/ast/code.rakumod

[11:17] <Geth> ¦ rakudo/main: Make sure NEXT/LAST/QUIT/CLOSE phasers capture

[11:17] <Geth> ¦ rakudo/main: 

[11:17] <Geth> ¦ rakudo/main: This was missing, causing no captures to be done by these phasers,

[11:17] <Geth> ¦ rakudo/main: which in turn kept tests from passing.

[11:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/04329e4504

[11:18] <lizmat> 109 / 635   !!!

[11:18] <lizmat> (using nine's way of testing)

[11:25] <discord-raku-bot> <Nemokosch> what are the numbers?

[11:28] <lizmat> 109 / 139   fully passing test files in "make test"

[11:29] <lizmat> 635 / 1355  fully passing test files in "make spectest"

[11:32] *** linkable6 left
[11:34] *** linkable6 joined
[11:39] <discord-raku-bot> <Nemokosch> woah that's cool

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[13:00] *** reportable6 left
[13:00] *** unicodable6 left
[13:00] *** linkable6 left
[13:00] *** committable6 left
[13:00] *** shareable6 left
[13:00] *** benchable6 left
[13:00] *** notable6 left
[13:00] *** coverable6 left
[13:00] *** greppable6 left
[13:00] *** quotable6 left
[13:00] *** sourceable6 left
[13:00] *** squashable6 left
[13:00] *** bloatable6 left
[13:00] *** releasable6 left
[13:00] *** tellable6 left
[13:00] *** statisfiable6 left
[13:00] *** evalable6 left
[13:00] *** bisectable6 left
[13:01] *** coverable6 joined
[13:01] *** releasable6 joined
[13:01] *** bloatable6 joined
[13:02] *** tellable6 joined
[13:02] *** shareable6 joined
[13:02] *** statisfiable6 joined
[13:02] *** evalable6 joined
[13:02] *** greppable6 joined
[13:02] *** unicodable6 joined
[13:03] *** bisectable6 joined
[13:03] *** committable6 joined
[13:03] *** squashable6 joined
[13:03] *** reportable6 joined
[13:03] *** quotable6 joined
[13:03] *** benchable6 joined
[13:03] *** linkable6 joined
[13:03] *** sourceable6 joined
[13:03] *** notable6 joined
[14:58] <[Coke]> nine++, lizmat++ !

[15:01] *** linkable6 left
[15:01] *** evalable6 left
[15:01] *** evalable6 joined
[15:03] *** linkable6 joined
[15:16] *** epony left
[16:05] <[Coke]> So, Attribute has a bunch of attributes - it's defined early, so there's not a lot of raku code for some of these, and the even the NQP code to bootstrap it is light. For example, someone just mentioned dimensions - looks like this Attribute attribute exists but doesn't have any logic associated with it.

[16:06] <[Coke]> looks like it might be something added to *every* Attribute, even if it might only be used for shaped arrays?

[16:30] <discord-raku-bot> <Nemokosch> could be

[16:49] <nine> Yes, only native and shaped array attributes use this bit of information

[17:01] <Geth> ¦ rakudo/main: b2f61d8612 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[17:01] <Geth> ¦ rakudo/main: Compress setting up phasers with a helper method

[17:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b2f61d8612

[17:01] <Geth> ¦ rakudo/main: d2c1de3c36 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[17:01] <Geth> ¦ rakudo/main: Compress setting up statement prefixes with a helper method

[17:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d2c1de3c36

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:21] <[Coke]> Wonder if it would be worth reducing the scope of when it's available (get some minor memory savings?)

[19:14] *** linkable6 left
[19:14] *** evalable6 left
[19:16] *** linkable6 joined
[19:16] *** evalable6 joined
[19:32] <lizmat> [Coke]: this is about the Attribute object, of which there is only one per attribute / class

[19:33] <nine> You will safe hundreds of bytes! (in a large application)

[19:36] <nine> On that note: lizmat, https://github.com/rakudo/rakudo/commit/d2c1de3c36 seems to safe 2 characters per affected deparse method (32 characters in total), at the expense for > 90 characters of new code. Is that really worth it?

[19:46] <lizmat> that one is more about the binary code size, really, inlining only the ones that need it ?

[19:53] <nine> I'd just not worry about that kind of optimization. Especially in deparsing, which just is not hot code

[19:59] <lizmat> but it *does* live in the core...

[19:59] <lizmat> always

[20:10] <nine> But does it actually make a difference if the code is not run?

[20:17] <Geth> ¦ rakudo/main: d10c27506b | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[20:17] <Geth> ¦ rakudo/main: Revert "Compress setting up statement prefixes with a helper method"

[20:17] <Geth> ¦ rakudo/main: 

[20:17] <Geth> ¦ rakudo/main: This reverts commit d2c1de3c36d2ae447efd767279ad5fbac8b89bed.

[20:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d10c27506b

[23:38] <discord-raku-bot> <Nemokosch> how long does make spectest usually run?

[23:39] <lizmat> depends on how many core you have

[23:40] <lizmat> with TEST_JOBS=16 on my M1 mini, it's about 3.5 minutes

