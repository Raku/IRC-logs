[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[01:25] *** kurahaupo left
[01:30] *** kurahaupo joined
[01:42] *** kurahaupo left
[01:47] *** kurahaupo joined
[03:20] *** kurahaupo left
[03:25] *** kurahaupo joined
[04:24] *** kurahaupo left
[04:29] *** kurahaupo joined
[05:04] *** kurahaupo left
[05:08] *** kurahaupo joined
[05:10] *** kurahaupo left
[05:15] *** kurahaupo joined
[05:19] *** kurahaupo left
[05:21] *** japhb joined
[05:24] *** kurahaupo joined
[05:26] *** kurahaupo left
[05:31] *** kurahaupo joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:33] *** kurahaupo left
[06:38] *** kurahaupo joined
[07:38] *** linkable6 left
[07:38] *** evalable6 left
[07:40] *** linkable6 joined
[07:41] *** evalable6 joined
[08:33] *** sena_kun joined
[09:17] *** samcv left
[09:18] *** samcv joined
[09:49] *** kurahaupo left
[09:54] *** kurahaupo joined
[10:18] <Geth> ¦ rakudo/main: 563addbb92 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[10:18] <Geth> ¦ rakudo/main: Make unknown method calls on strings mention the string

[10:18] <Geth> ¦ rakudo/main: 

[10:18] <Geth> ¦ rakudo/main: This makes it easier to trace errors, specifically with RakuAST's

[10:18] <Geth> ¦ rakudo/main: "visit-children" being called on a Str, when it should have been

[10:18] <Geth> ¦ rakudo/main: a RakuAST::StrLiteral

[10:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/563addbb92

[10:34] *** ab5tract joined
[11:13] <Geth> ¦ rakudo/main: c3df563b1f | (Elizabeth Mattijsen)++ | src/core.e/Formatter.pm6

[11:13] <Geth> ¦ rakudo/main: Another round of Formatter tweaks

[11:13] <Geth> ¦ rakudo/main: 

[11:13] <Geth> ¦ rakudo/main: - makes S32-str/sprintf.t run all its tests without throwing

[11:13] <Geth> ¦ rakudo/main: - fixes issues with using type objects as values

[11:13] <Geth> ¦ rakudo/main: - fixes issues with Inf / -Inf as values

[11:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c3df563b1f

[11:43] <ugexe> I managed to get naive support for long paths on windows sort of working. Rakudo builds and installs modules, and I can create and stat directories with long names. However, my work is all a mess of hacks void of any cohesiveness so I’m not sure it’s useful for anything other than confirming it can work but will be kind of a slog to implement cleanly 

[11:44] <ugexe> Now I think it might be easier to implement the path normalizing logic in nqp or moarvm since that doesn’t invoke e.g. CUR path specs and whatnot 

[11:45] <ugexe> s/invoke/involve/

[11:46] <ugexe> basically just: is it a windows system,  is it an absolute path? If yes to both then prefix the path with \\?\ and change all / to \

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:49] <Geth> ¦ rakudo/main: d3372c8d11 | (Stefan Seifert)++ | 4 files

[12:49] <Geth> ¦ rakudo/main: RakuAST: support traits on signature declarations

[12:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d3372c8d11

[12:50] <nine> Much harder to get right than expected but oh boy was it worth it! 872 passing spectest files :)

[12:50] <lizmat> whee!

[12:51] <lizmat> ugexe: that sounds eminently doable at the MoarVM level

[12:51] <lizmat> ugexe: any idea of JVM would be coping with this?  an nqp solution would help there as well, no?

[13:01] <nine> m: my constant name = 'TestName'; class ::(name) { } # You gotta be kidding me

[13:01] <camelia> rakudo-moar c3df563b1: ( no output )

[13:01] <lizmat> m: my constant name = 'TestName'; dd class ::(name)

[13:01] <camelia> rakudo-moar c3df563b1: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse class definition␤at <tmp>:1␤------> ant name = 'TestName'; dd class ::(name)⏏<EOL>␤    expecting any of:␤        generic role␤»

[13:03] <nine> m: BEGIN my $foo = "Foo"; class ::($foo) { } # At least it's not you know...really smart

[13:03] <camelia> rakudo-moar c3df563b1: OUTPUT: «===SORRY!===␤Name ::($foo) is not compile-time known, and can not serve as a package name␤»

[13:03] <lizmat> seems like something RakuAST will fix  :-)

[13:04] <Geth> ¦ rakudo/main: 40aa1605b7 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[13:04] <Geth> ¦ rakudo/main: Streamline X::Str::Sprintf::Directives::BadType

[13:04] <Geth> ¦ rakudo/main: 

[13:04] <Geth> ¦ rakudo/main: - make it handle Mu as a value correctly

[13:04] <Geth> ¦ rakudo/main: - simplify value reporting in case of a type object

[13:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/40aa1605b7

[13:04] <Geth> ¦ rakudo/main: 10cc908d9c | (Elizabeth Mattijsen)++ | src/core.e/Formatter.pm6

[13:04] <Geth> ¦ rakudo/main: Make sure format is reported with Formatter errors

[13:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/10cc908d9c

[13:14] <nine> lizmat: IIRC you have introduced something that lets me check whether we have a compile time value?

[13:14] <lizmat> .literalize

[13:14] <lizmat> returns Nil if there is no compile-time value

[13:16] *** kurahaupo left
[13:21] *** kurahaupo joined
[13:25] <nine> Why does it swallow all exceptions? That makes it harder to find the This element has not been resolved. Type: RakuAST::Term::Name

[13:25] <lizmat> I wanted to make it an easy to use method

[13:26] <nine> But this makes it less easy instead :)

[13:26] <lizmat> well, for core developers perhaps?

[13:26] <nine> I only get Nil instead of an esay to understand exception message

[13:27] <lizmat> if it's about a RakuAST node that is not supported yet, you *will* get the class name

[13:27] <lizmat> on STDERR

[13:28] <nine> That does not require catching exceptions much less all of them.

[13:29] <lizmat> if you have an expression with something variable in it, would you want the exception to be thrown?

[13:29] <lizmat> that means that anytime you call .literalize, you will have to mind that it could throw

[13:30] <lizmat> that felt LTA to me

[13:31] <nine> Absolutely yes! I expected it to give me a literal. It didn't. With the exception swallowed I have to actually find and patch scary CORE setting code just to find out what went wrong. This is a problem especially for non-core developers.

[13:31] <lizmat> why?

[13:32] <lizmat> you ask an AST whether it could become a constant, Nil means it couldn't, and you go on with your business ?

[13:32] <nine> And the error I got is a basic RakuAST mistake: I just tried to literalize a node without giving it a chance to resolve names first. 

[13:32] <nine> But it can become a constant. In fact it is my constant name. It doesn't get more constanty than that.

[13:33] <lizmat> the other reason for catching the exceptions, is to be able to abort a multi-level deep expression without needing to backtrack

[13:33] <lizmat> as we don't have gather/take there

[13:35] <nine> backtrack?

[13:37] <lizmat> { a => 42, b => { c => 137, d => $a } }

[13:37] <lizmat> it would fail at the $a

[13:37] <lizmat> or any level deeper

[13:39] <lizmat> BTW, couldn't it be that just in Term::Name, it decided to throw Nil ?

[13:39] <lizmat> because it couldn't resolve?

[13:41] *** kurahaupo left
[13:43] <nine> It can resolve. It just hasn't yet. Which is exactly what the exception would tell me.

[13:43] <lizmat> wouldn't jnthn's work not prevent that issue?

[13:43] <lizmat> brb

[13:43] <nine> no

[13:46] *** kurahaupo joined
[13:55] <ugexe> Lizmat: jvm and js backends should already just work. I haven’t tested that but that is my understanding after looking at a jvm source and the nodejs source 

[14:07] <lizmat> nine: well, if you want to work on the .literalize logic, be my guest

[14:07] <lizmat> afk&

[14:15] <nine> The whole thing turns into quite a mess quickly anyway. The correct canonicalization of names containing expressions requires us to evaluate to constant's values. This requires us to resolve the names contained in expressions contained in names. Since names are quite common in programming we need to do this pretty much right away.

[14:26] <Geth> ¦ rakudo/main: b593dc9a89 | (Stefan Seifert)++ | 3 files

[14:26] <Geth> ¦ rakudo/main: RakuAST: Support constant expressions as part of names

[14:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b593dc9a89

[14:57] <Geth> ¦ rakudo/main: 0df71cfc31 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[14:57] <Geth> ¦ rakudo/main: RakuAST: actually apply traits to all variables in signature declarations

[14:57] <Geth> ¦ rakudo/main: 

[14:57] <Geth> ¦ rakudo/main: Trait nodes keep track of whether they have been applied to a target or

[14:57] <Geth> ¦ rakudo/main: not, so we must not share the same nodes across multiple targets.

[14:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0df71cfc31

[16:39] *** notable6 left
[16:39] *** unicodable6 left
[16:39] *** reportable6 left
[16:39] *** quotable6 left
[16:39] *** benchable6 left
[16:39] *** statisfiable6 left
[16:39] *** greppable6 left
[16:39] *** coverable6 left
[16:39] *** committable6 left
[16:39] *** bisectable6 left
[16:39] *** evalable6 left
[16:40] *** bisectable6 joined
[16:40] *** benchable6 joined
[16:41] *** quotable6 joined
[16:41] *** coverable6 joined
[16:41] *** unicodable6 joined
[16:41] *** statisfiable6 joined
[16:41] *** evalable6 joined
[16:41] *** greppable6 joined
[16:42] *** reportable6 joined
[16:42] *** committable6 joined
[16:42] *** notable6 joined
[16:58] *** kurahaupo left
[17:03] *** kurahaupo joined
[17:05] *** kurahaupo left
[17:15] *** kurahaupo joined
[17:17] *** kurahaupo left
[17:22] *** kurahaupo joined
[17:30] *** ab5tract left
[17:35] *** kurahaupo left
[17:42] *** kurahaupo joined
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:42] *** dogbert11 left
[18:45] *** dogbert11 joined
[19:26] *** dogbert17 joined
[19:28] *** dogbert11 left
[20:36] *** dogbert11 joined
[20:36] *** dogbert17 left
[20:42] *** dogbert17 joined
[20:44] *** dogbert11 left
[20:59] *** dogbert17 left
[21:08] *** dogbert17 joined
[21:18] *** dogbert11 joined
[21:20] *** dogbert17 left
[21:26] *** dogbert17 joined
[21:28] *** dogbert11 left
[21:28] *** dogbert11 joined
[21:31] *** dogbert17 left
[21:35] *** dogbert11 left
[22:06] *** dogbert11 joined
[22:16] *** dogbert11 left
[22:26] *** dogbert11 joined
[22:32] *** dogbert11 left
[22:35] *** dogbert11 joined
[23:35] *** evalable6 left
[23:35] *** linkable6 left
[23:36] *** evalable6 joined
[23:38] *** linkable6 joined
