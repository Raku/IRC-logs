[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:18] *** ab5tract left
[01:56] *** MasterDuke joined
[03:38] *** reportable6 left
[03:38] *** quotable6 left
[03:38] *** bisectable6 left
[03:38] *** benchable6 left
[03:38] *** tellable6 left
[03:38] *** coverable6 left
[03:38] *** bloatable6 left
[03:38] *** unicodable6 left
[03:38] *** nativecallable6 left
[03:38] *** linkable6 left
[03:38] *** shareable6 left
[03:38] *** statisfiable6 left
[03:38] *** evalable6 left
[03:38] *** notable6 left
[03:38] *** squashable6 left
[03:38] *** sourceable6 left
[03:38] *** committable6 left
[03:38] *** greppable6 left
[03:38] *** releasable6 left
[03:38] *** reportable6 joined
[03:38] *** statisfiable6 joined
[03:39] *** nativecallable6 joined
[03:39] *** coverable6 joined
[03:39] *** linkable6 joined
[03:39] *** benchable6 joined
[03:39] *** sourceable6 joined
[03:40] *** committable6 joined
[03:40] *** greppable6 joined
[03:40] *** bisectable6 joined
[03:40] *** unicodable6 joined
[03:40] *** evalable6 joined
[03:40] *** quotable6 joined
[03:41] *** notable6 joined
[03:41] *** tellable6 joined
[03:41] *** squashable6 joined
[03:41] *** releasable6 joined
[03:41] *** shareable6 joined
[03:41] *** bloatable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:07] *** samcv_ joined
[06:12] *** heartburn left
[06:12] *** samcv left
[06:12] *** timo left
[06:12] *** [Tux] left
[06:19] *** [Tux] joined
[06:19] *** timo joined
[06:21] *** heartburn joined
[09:52] *** |Tux| left
[09:52] *** tbrowder__ left
[09:52] *** rba left
[09:52] *** leont left
[10:04] *** |Tux| joined
[10:04] *** tbrowder__ joined
[10:04] *** rba joined
[10:04] *** leont joined
[11:17] <guifa_> right, but I mean, are the values of the  hash also values of the array?  Or are they distinct sets of values?

[11:17] <guifa_> sounds like more the latter

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:08] *** squashable6 left
[12:11] *** squashable6 joined
[12:24] *** ab5tract joined
[12:31] *** samebchase left
[12:32] *** samebchase joined
[12:43] *** ab5tract left
[13:23] <Geth> ¦ rakudo/main: 99a0107562 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[13:23] <Geth> ¦ rakudo/main: Make Any.iterator-and-first an implementation detail

[13:23] <Geth> ¦ rakudo/main: 

[13:23] <Geth> ¦ rakudo/main: rather than a private method.  Also use $foo is rw for a writable

[13:23] <Geth> ¦ rakudo/main: positional, and remove the superfluous "is raw" on the method.

[13:23] <Geth> ¦ rakudo/main: 

[13:23] <Geth> ¦ rakudo/main: Looks like this makes .min about 1% faster.  Also done in preparation

[13:23] <Geth> ¦ rakudo/main: for more optimizations.

[13:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/99a0107562

[13:23] <Geth> ¦ rakudo/main: 1579da00aa | (Elizabeth Mattijsen)++ | 2 files

[13:23] <Geth> ¦ rakudo/main: Optimize .min/.max/.minmax/.minpairs/.maxpairs

[13:23] <Geth> ¦ rakudo/main: 

[13:23] <Geth> ¦ rakudo/main: - .min / .max about 30% faster

[13:23] <Geth> ¦ rakudo/main: - .minmax about 20% faster

[13:23] <Geth> ¦ rakudo/main: - .minpairs / .maxpairs about 10% faster

[13:23] <Geth> ¦ rakudo/main: 

[13:23] <Geth> ¦ rakudo/main: These speed improvements were possible because the code for these

[13:23] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[13:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1579da00aa

[13:28] *** Ven_de_Thiel joined
[13:34] *** NemokoschKiwi joined
[13:36] *** NemokoschKiwi left
[14:17] *** vrurg_ is now known as vrurg

[14:20] <Geth> ¦ rakudo/main: ec0007729d | (Elizabeth Mattijsen)++ | src/core.c/Order.pm6

[14:20] <Geth> ¦ rakudo/main: Implement .min|max :k :v :kv :p

[14:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ec0007729d

[14:24] *** Ven_de_Thiel left
[14:29] *** Ven_de_Thiel joined
[14:33] *** Xliff joined
[14:36] <vrurg> lizmat: so, let's have it here.

[14:36] *** Ven_de_Thiel38 joined
[14:37] <lizmat> fwiw I also did some cleanup / removed deprecations / update docs and test, so it was not work thrown away  :-)

[14:37] *** Ven_de_Thiel left
[14:39] <vrurg> I hope so. :) Anyway, it would actually be even better if referring a lowered lexical dynamically would de-optimize it. Not sure how feasible is this.

[14:41] <lizmat> but that's the thing about lowered lexicals, you can't unlower them, because that info is lost is it not ?

[14:46] <[Tux]> Rakudo v2023.06-198-gec0007729 (v6.d) on MoarVM 2023.06-4-g75fe055c2

[14:46] <[Tux]> csv-test-xs-20      0.422 -  0.452

[14:46] <[Tux]> test-t --race       0.844 -  1.052

[14:46] <[Tux]> csv-ip5xs           0.916 -  1.054

[14:46] <[Tux]> test-t              1.356 -  1.744

[14:46] <[Tux]> csv-parser          4.093 -  4.175

[14:46] <[Tux]> csv-ip5xs-20        5.219 -  6.041

[14:46] <[Tux]> test                6.453 -  6.882

[14:46] <[Tux]> test-t-20 --race    6.958 -  7.309

[14:46] <[Tux]> test-t-20          20.291 - 21.743

[14:49] <vrurg> lizmat: I never was into the details. But have a hope that even if this is true the information could be stashed away for later and re-used if necessary. The question is what'd be the memory cost of this.

[14:53] <Geth> ¦ rakudo/main: dbb95d1fea | (Elizabeth Mattijsen)++ | 3 files

[14:53] <Geth> ¦ rakudo/main: Introduce Range.Inf-Inf implementation detail method

[14:53] <Geth> ¦ rakudo/main: 

[14:53] <Geth> ¦ rakudo/main: Returns the Inf .. -Inf range, aka the range that never matches

[14:53] <Geth> ¦ rakudo/main: anything.  This is returned in many case: by making it a method

[14:53] <Geth> ¦ rakudo/main: without arguments makes for smaller bytecode and earlier inlining.

[14:53] <Geth> ¦ rakudo/main: 

[14:53] <Geth> ¦ rakudo/main: Making it return a compile-time value, should be beneficial at runtime.

[14:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dbb95d1fea

[15:10] <Geth> ¦ rakudo/main: 8157c0335c | (Elizabeth Mattijsen)++ | src/core.c/Order.pm6

[15:10] <Geth> ¦ rakudo/main: Abstract comparator logic

[15:10] <Geth> ¦ rakudo/main: 

[15:10] <Geth> ¦ rakudo/main: For better maintainability, and smaller bytecode in the hot parts

[15:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8157c0335c

[15:12] *** Ven_de_Thiel38 left
[15:40] *** Ven_de_Thiel joined
[15:48] <Geth> ¦ rakudo/main: 4645317d7b | (Elizabeth Mattijsen)++ | src/core.c/Order.pm6

[15:48] <Geth> ¦ rakudo/main: Implement .(min|max)pairs(&by) + (min|max)(&by, :foo)

[15:48] <Geth> ¦ rakudo/main: 

[15:48] <Geth> ¦ rakudo/main: So all permutations of .min / .max / .minpairs / .maxpairs can now

[15:48] <Geth> ¦ rakudo/main: specify a custom comparator.  Including the .min / .max cased with

[15:48] <Geth> ¦ rakudo/main: adverbs such as :k, :kv, :v, :p

[15:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4645317d7b

[15:59] <Ven_de_Thiel> .oO( sort(:k) would basically make it an APL sort )

[16:04] <lizmat> yeah, look at that atm

[16:04] <Ven_de_Thiel> mh, that's ;vsp

[16:04] <Ven_de_Thiel> oops

[16:04] <lizmat> *looking

[16:14] <Ven_de_Thiel> I guess the easiest impl would use a Schwartzian transform

[16:15] <Ven_de_Thiel> m: sort-idx(@a) { @a.map({ $++ => $_ }).sort(*.value).map(*.key) }; my @ary = 1, 3, 2; my @idx = sort-idx(@ary); say @idx; say @ary[@idx];

[16:15] <camelia> rakudo-moar 4645317d7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '@a' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> sort-idx(⏏@a) { @a.map({ $++ => $_ }).sort(*.value␤»

[16:15] <Ven_de_Thiel> m: sub sort-idx(@a) { @a.map({ $++ => $_ }).sort(*.value).map(*.key) }; my @ary = 1, 3, 2; my @idx = sort-idx(@ary); say @idx; say @ary[@idx];

[16:15] <camelia> rakudo-moar 4645317d7: OUTPUT: «[0 2 1]␤(1 2 3)␤»

[16:15] <Ven_de_Thiel> not the most performant, of course :-)

[16:16] <Ven_de_Thiel> well, it should be called grade if taking after APL

[16:17] <lizmat> Ven_de_Thiel: if you use a mapper with sort, it already does a Schwartzian transform under the hood

[16:17] <lizmat> :k would just need to force that and expose the indices

[16:18] <lizmat> with just being the appropriate amount of SMOP

[16:18] <Ven_de_Thiel> lizmat: I know, but I want the... "opposite" of a Schwartzian transform here

[16:19] <lizmat> yeah, got that

[16:19] <Ven_de_Thiel> (unsure what SMOP means)

[16:20] <lizmat> Simple Matter Of Programming

[16:20] <Ven_de_Thiel> ah, the partner to a round tuit

[17:09] *** Ven_de_Thiel left
[17:09] *** Ven_de_Thiel joined
[17:23] *** Xliff left
[17:27] <lizmat> vrurg do we have a way to change an nqp::list_i into a native int array ?

[17:27] <lizmat> apart from iterating and copying

[18:00] *** reportable6 left
[18:02] *** Ven_de_Thiel left
[18:02] *** reportable6 joined
[18:18] *** Ven_de_Thiel joined
[18:39] *** Ven_de_Thiel left
[18:47] <vrurg> lizmat: I think there is no other way. They are different reprs.

[19:02] *** ab5tract joined
[19:15] *** Ven_de_Thiel joined
[19:18] *** ab5tract left
[19:29] <Geth> ¦ rakudo/main: 8b4aca57a6 | (Elizabeth Mattijsen)++ | src/core.c/List.pm6

[19:29] <Geth> ¦ rakudo/main: Streamline List.sort a bit

[19:29] <Geth> ¦ rakudo/main: 

[19:29] <Geth> ¦ rakudo/main: - use ternaries instead where possible

[19:29] <Geth> ¦ rakudo/main: - abstract reification logic in a private method

[19:29] <Geth> ¦ rakudo/main: 

[19:29] <Geth> ¦ rakudo/main: In preparation for new features.

[19:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8b4aca57a6

[19:32] *** Ven_de_Thiel left
[19:34] <lizmat> notable6: weekly

[19:34] <notable6> lizmat, 2 notes: 2023-08-08T15:34:57Z <lizmat>: https://news.ycombinator.com/item?id=37040681  ;  2023-08-08T15:34:59Z <lizmat>: https://lobste.rs/s/x5impj/raku_language_for_gremlins

[20:48] *** Ven_de_Thiel joined
[21:10] <japhb> lizmat: If you do end up figuring out changes that make native arrays more amenable to memcopy, please let me know -- CBOR-Simple spends an inordinate amount of energy trying to make copying of native arrays as fast as possible, and it's basically a giant mash of custom nqp::while loops.

[21:12] <japhb> (Mind you, even without a memcopy version, slinging packed native arrays in CBOR-Simple is one of the fastest operations on a per-element basis.  But it's also one that's likely to be an actual performance hotspot in real-world use cases, so worth every bit of performance I can throw at it.)

[21:25] *** ab5tract joined
[22:02] *** Ven_de_Thiel left
[22:11] *** ab5tract left
[22:56] *** ab5tract joined
[23:08] *** ab5tract left
