[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:01] <[Coke]> https://github.com/sergot/openssl/issues/100 - I think this might be a NativeCall bug, not an openssl bug.

[01:01] *** evalable6 left
[01:02] *** evalable6 joined
[01:17] <[Coke]> wonder if bumping dyncall to 1.4 would help.

[01:45] <[Coke]> (might have a fix)

[01:45] <[Coke]> looks like we're building for x86_64, not arm64, so that explains what I'm seeing

[01:52] <[Coke]> hopefully just me complaining here means I've *finally* found the blog post that answers my question. :)'

[02:10] <[Coke]> update on the ticket; now I get "loading libcrypto in an unsafe way", and then raku aborts.

[02:26] <[Coke]> added the lldb backtrace.

[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:55] *** squashable6 left
[06:55] *** committable6 left
[06:55] *** quotable6 left
[06:55] *** coverable6 left
[06:55] *** shareable6 left
[06:55] *** bisectable6 left
[06:55] *** sjn left
[06:56] *** squashable6 joined
[06:56] *** committable6 joined
[06:56] *** quotable6 joined
[06:56] *** coverable6 joined
[06:56] *** shareable6 joined
[06:56] *** bisectable6 joined
[06:56] *** sjn joined
[08:45] *** sena_kun joined
[08:45] *** ab5tract left
[08:46] *** ab5tract joined
[08:53] <lizmat> [Coke]: https://github.com/rakudo/rakudo/blob/main/CAVEATS.md#dynamic-libraries

[10:58] *** Geth joined
[11:03] *** ab5tract left
[11:03] *** ab5tract joined
[11:12] *** ab5tract left
[11:13] *** ab5tract joined
[11:27] *** ab5tract left
[11:27] *** ab5tract joined
[11:38] *** ab5tract left
[11:39] *** ab5tract joined
[11:45] *** ab5tract left
[11:50] *** thundergnat joined
[11:53] *** thundergnat left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[13:26] <ugexe> [Coke]: sounds like you figured out the original problem, but brew can/will install x86 stuff via rosetta

[15:08] *** tonyo left
[15:09] *** tonyo joined
[16:25] *** nine left
[16:25] *** nine joined
[17:22] <[Coke]> I tried adding a symlink from /usr/local/lib/libcrypto.dylib to the homebrew install in /usr/local/homebrew, same error.

[17:23] <[Coke]> ... which I've seen elsewehre, but not here, trying $HOME/lib

[17:24] <[Coke]> yup, same with $HOME/lib

[17:25] <[Coke]> the wiki page suggests /../lib  - the .. is confusing.

[17:39] <ugexe> I wonder if you need to install it via `arch -arm64 brew install ...` to force the arm64 version and not use the 86 version with rosetta

[17:41] <[Coke]> ... why would I force the arm64 verison when raku is still x86?

[17:41] <[Coke]> the whole first error was that I had arm64 crypto but x86 moar.

[17:42] <[Coke]> it is quite possible I am still confused, though. :)

[17:43] <tonyo> raku isn't x86, though?

[17:43] <tonyo> oh - how did you end up with x86 moar?

[17:43] <[Coke]> /Users/coke/.rakubrew/versions/moar-2023.02/install/bin/moar: Mach-O 64-bit executable x86_64

[17:44] <[Coke]> the default build (either directly or via rakubrew) gets me that?

[17:44] <ugexe> ah i assumed you would be using arm64 moar

[17:44] <[Coke]> sorry, i was leaving off the _64, just saying in constrast to arm

[17:44] <[Coke]> ugexe: Sure, would love to!

[17:44] <ugexe> now i need to check wth i have installed lol

[17:44] <tonyo> same here

[17:47] <tonyo> /Users/tonyo/.local/bin/moar: Mach-O 64-bit executable arm64

[17:49] <Geth> ¦ rakudo/main: 3bd73896f9 | (Elizabeth Mattijsen)++ | src/core.c/Rational.pm6

[17:49] <Geth> ¦ rakudo/main: Use HLL comparison for floating point noise check

[17:49] <Geth> ¦ rakudo/main: 

[17:49] <Geth> ¦ rakudo/main: Spotted by SqrtNegInf++

[17:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3bd73896f9

[17:49] <ugexe> file /Users/nlogan/.rakubrew/versions/moar-2022.07/install/bin/moar

[17:49] <ugexe> /Users/nlogan/.rakubrew/versions/moar-2022.07/install/bin/moar: Mach-O 64-bit executable x86_64

[17:50] <ugexe> [Coke]: you're using rakubrew too, yeah?

[17:51] <[Coke]> I use rakubrew and build from git also

[17:56] <ugexe> hmm, i assumed rakubrew was building arm binaries on this computer

[17:57] <tonyo> is your git version not building moar then [Coke] ?

[17:57] <[Coke]> tonyo: ?

[17:58] <[Coke]> when I build from git, I am pretty sure it's also x86. checking head.

[17:59] <[Coke]> don't see a Configure.pl option claiming to build arm64...

[17:59] <tonyo> i mean if it finds a moar it doesn't rebuild so i'm thinking it's using the one rakubrew made

[17:59] <tonyo> i'm building from git and it's an ARM build

[17:59] <[Coke]> (nor one in moar)

[18:00] *** reportable6 left
[18:00] <tonyo> Configure.pl checks if there's a good moar version available in PATH and if so, doesn't bother rebuilding it

[18:00] <tonyo> you have one from the rakubrew installer

[18:01] <[Coke]> I've had to build moar a few times since switching to m2

[18:01] <[Coke]> it doesn't pick one from a random path, it uses the prefix path

[18:01] <[Coke]> doing a build now, building moar, nqp, installing to <rakudo clone>/install

[18:01] <[Coke]> (and there was nothing there to start with)

[18:01] <tonyo> from git or rakubrew?

[18:02] <[Coke]> git

[18:03] *** reportable6 joined
[18:06] <[Coke]> ok. *this* version is arm64. tonyo++

[18:07] <[Coke]> rakubrew shouldn't have been able to hang on to x86 versions on this machine, it's not like I upgraded a rakubrew install that WAS intel. every install of rakubrew here is on an arm machine

[18:08] <[Coke]> so, I will uninstall the x86 crypto lib, install the arm64, and try again

[18:08] <tonyo> i think your libssl should work now but you'll have to force test _and_ you'll get that warning message still, and you'll likely find edge cases where it doesn't work right (segfaults) but for 90% of cases it should work

[18:08] <tonyo> i haven't tried with what ugexe posted, didn't even know i could do that with brew

[18:08] <[Coke]> s/is on/has been on/

[18:09] <[Coke]> tonyo: openssl ticket #100 links to instructions on setting up separate x86 and arm64 brew installs.

[18:09] <tonyo> ah

[18:09] <[Coke]> I now have 'brew' and 'axbrew' that have two different install directories, one arm, one x86

[18:09] <tonyo> i spent a few hours trying to track it down while i was flying but i got basically nowhere

[18:09] <tonyo> ah

[18:12] <[Coke]> nuked all my rakus, building a fresh one in rakubrew.

[18:16] *** ab5tract joined
[18:17] <tonyo> i wonder if rakubrew is grabbing build libs from somewhere

[18:18] *** ab5tract left
[18:20] <tonyo> s/d libs/t executables

[18:20] <ugexe> https://github.com/Raku/App-Rakubrew/blob/990cde0ea996f7e3e2ddd98130402613045a4c35/lib/App/Rakubrew/Build.pm#L176-L182

[18:20] <ugexe> it doesn't look like it really does anything tricky

[18:23] *** ab5tract joined
[18:30] <tonyo> hm.. i wonder why not configure moar/nqp all in one go `perl Configure.pl --gen-moar --gen-nqp --backends=moar`

[18:31] <tonyo> `--prefix=...`

[18:31] <[Coke]> rakubrew build me an x86 again

[18:40] <tonyo> does rakubrew spit out the configure stuff? my build line for moar on git is: `perl Configure.pl --optimize --prefix=/Users/tonyo/.local --make-install`

[19:55] <Geth> ¦ rakudo/main: 7dac0a7c40 | (Elizabeth Mattijsen)++ | src/core.c/Rational.pm6

[19:55] <Geth> ¦ rakudo/main: Undo another set of optimizations

[19:55] <Geth> ¦ rakudo/main: 

[19:55] <Geth> ¦ rakudo/main: Turns out that frac is not always a (Fat)Rat, but could also be a

[19:55] <Geth> ¦ rakudo/main: Num, so we need to use HLL for all checks  :-(

[19:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7dac0a7c40

[20:00] *** linkable6 left
[20:00] *** evalable6 left
[20:00] *** evalable6 joined
[20:02] *** linkable6 joined
[21:22] <[Coke]> maybe the optimize is triggering jit, which isn't arm-friendly?

[21:34] <[Coke]> I've ++'d this before: so nice to be able to register my "personal" raku build with rakubrew, then I get free 'build-zef'...

[21:36] <[Coke]> just tried to install something with HEAD and got: [JSON::Fast] P6opaque: no such attribute '$!numerator' on type Rational[Int,Int] in a Rat when trying to get a value

[21:36] <[Coke]> dialing back to 2023.02...

[21:51] <[Coke]> \o/

[21:51] <[Coke]> ok, I now have an installed version which required no $HOME/lib linkery

[21:51] <[Coke]> (installed version of openssl)

[21:53] <[Coke]> https://github.com/sergot/openssl/issues/100#issuecomment-1454173561

[21:53] <[Coke]> ugexe++ tonyo++

[22:08] *** sena_kun left
[22:20] <[Coke]> will we ever change the install path to be raku/ instead of perl6/ ?

