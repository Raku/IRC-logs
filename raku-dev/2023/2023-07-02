[00:00] *** sjn joined
[00:00] *** tbrowder__ joined
[00:00] *** timo joined
[00:00] *** |Tux| joined
[00:00] *** reportable6 left
[00:00] *** ugexe joined
[00:01] *** reportable6 joined
[00:03] *** jgaz joined
[00:05] *** guifa joined
[00:27] *** jgaz left
[00:29] *** jgaz joined
[00:55] *** MasterDuke joined
[01:07] <MasterDuke> `Type check failed in assignment to $s; expected Stat but got BOOTStat (BOOTStat)`. i'm now trying to create an actual class in raku and use it, but even wrapping the result of the nqp::dispatch("boot-syscall", "file-stat", "<path>") in nqp::hllizefor still give this error

[01:09] <MasterDuke> where my experimentation looks like: `class Stat is repr("Stat") { method is-dir(::?CLASS:D:) { use nqp; nqp::dispatch("boot-syscall", "stat-is-dir", self) }; }; IO::Path.^add_method("stat", method (IO::Path:D:) { use nqp; my Stat $s = nqp::dispatch("boot-syscall", "file-stat", nqp::decont_s(self.absolute), 0); return $s } ); IO::Path.^compose; my

[01:09] <MasterDuke> $s = "TODO".IO.stat; say $s.is-dir`

[01:23] <timo> the file-stat syscall could take a type as argument and create an instance of that, then you don't need to add an hll type and entries to hll structs and all that

[01:24] <timo> i think maybe Stat is "special" enough that it doesn't need to get support from the hll mechanism

[01:24] <MasterDuke> not sure what you mean

[01:24] <MasterDuke> i don't know what other types we would want to create from file-stat

[01:25] <timo> Stat instead of BOOTStat

[01:25] <timo> in fact, if the Stat-repred type is passed to the file-stat syscall, there doesn't need to be a BOOTStat at all

[01:30] <timo> the BOOT types are useful for when the code is run too early to have the "proper" types that are defined somewhere in nqp and/or rakudo, since we can't create an instance of something without having the class for it, and creating "proper" classes kind of needs nqp or raku code

[01:34] <MasterDuke> well, would this be simpler if i actually did it in rakudo instead of at runtime (which was just to make testing faster)?

[01:39] <timo> i'm not sure what you mean by "in rakudo" and "at runtime"

[01:44] <MasterDuke> i was just running the above code via `raku -e '...'`, which is why i needed the `^compose`. but if i stick it in IO/Path.pm6, would anything change?

[01:47] <timo> no, there is currently nothing that makes file-stat able to return a Stat instead of a BOOTStat

[01:48] <timo> hllizefor relies on a little "registry" that stores a type for a "role", and for the BOOTStat type to also have the same role

[01:48] <timo> without all that, hllizefor will just be a no-op and cause the type mismatch you see

[01:49] <timo> passing in the type you want as an argument to the file-stat syscall lets you bypass all that

[01:50] <timo> added bonus: if you check if it's a type object or an instance, an existing instance could be overwritten with no need to allocate if you keep the Stat around between file-stat calls

[01:51] <MasterDuke> hm, interesting. thanks, i'm afk now, but will play with that later

[04:13] *** nativecallable6 left
[04:13] *** evalable6 left
[04:13] *** sourceable6 left
[04:13] *** statisfiable6 left
[04:13] *** benchable6 left
[04:13] *** coverable6 left
[04:13] *** notable6 left
[04:13] *** squashable6 left
[04:13] *** bloatable6 left
[04:13] *** quotable6 left
[04:13] *** greppable6 left
[04:13] *** committable6 left
[04:13] *** releasable6 left
[04:13] *** unicodable6 left
[04:13] *** linkable6 left
[04:13] *** bisectable6 left
[04:13] *** reportable6 left
[04:13] *** tellable6 left
[04:13] *** shareable6 left
[04:14] *** evalable6 joined
[04:14] *** shareable6 joined
[04:14] *** notable6 joined
[04:14] *** tellable6 joined
[04:14] *** sourceable6 joined
[04:14] *** coverable6 joined
[04:14] *** unicodable6 joined
[04:15] *** statisfiable6 joined
[04:15] *** committable6 joined
[04:15] *** bisectable6 joined
[04:15] *** quotable6 joined
[04:15] *** linkable6 joined
[04:15] *** reportable6 joined
[04:15] *** greppable6 joined
[04:15] *** nativecallable6 joined
[04:15] *** bloatable6 joined
[04:15] *** benchable6 joined
[04:16] *** releasable6 joined
[04:16] *** squashable6 joined
[04:33] *** nebuchadnezzar left
[04:33] *** nebuchadnezzar joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:28] *** dogbert11 joined
[06:29] *** dogbert17 left
[07:17] *** dogbert11 left
[07:25] *** dogbert11 joined
[08:49] *** sena_kun joined
[09:49] *** linkable6 left
[09:49] *** evalable6 left
[09:49] *** linkable6 joined
[09:51] *** evalable6 joined
[11:33] *** lucs left
[11:34] *** lucs joined
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:05] *** ab5tract joined
[12:58] <Geth> ¦ rakudo/main: 90aa9c66da | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[12:58] <Geth> ¦ rakudo/main: RakuAST: fix issue with recursive markup

[12:58] <Geth> ¦ rakudo/main: 

[12:58] <Geth> ¦ rakudo/main: Specifically, if outer markup was using < or <<, and inner markup

[12:58] <Geth> ¦ rakudo/main: was using «, then the end » would not be detected, causing misparsing

[12:58] <Geth> ¦ rakudo/main: and a worry.  Also improve the wording of said worry.

[12:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/90aa9c66da

[13:05] *** linkable6 left
[13:05] *** evalable6 left
[13:05] *** evalable6 joined
[13:07] *** linkable6 joined
[13:21] <Geth> ¦ rakudo/main: 2c2c4d4e8a | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/LegacyPodify.pm6

[13:21] <Geth> ¦ rakudo/main: RakuAST: fix podification of embedded markup after newline

[13:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2c2c4d4e8a

[13:24] <timo> MasterDuke: reminder to make sure the dir recurse and whatnot handle files with terrible filenames by using utf8-c8, for example when you `touch $(printf "\xFE\xFF")` and other invalid utf8 nonsense

[13:47] <timo> the result when printed would look like "􏿽xFE􏿽xFF".IO that is how rakudo prints stuff that was decoded with utf8-c8 and then encoded as utf8

[13:48] <timo> since ideally you wouldn't print bytes that aren't valid utf8 to stdout, that's just politeness

[13:58] *** sena_kun left
[14:00] *** sena_kun joined
[14:06] <Geth> ¦ rakudo/main: 55537e9b29 | (Nick Logan)++ | 3 files

[14:06] <Geth> ¦ rakudo/main: Remove deprecated --nqp-lib option

[14:06] <Geth> ¦ rakudo/main: 

[14:06] <Geth> ¦ rakudo/main: The --nqp-lib option has had no effect for years, and it was

[14:06] <Geth> ¦ rakudo/main: supposed to be removed long ago. This removes any remaining

[14:06] <Geth> ¦ rakudo/main: --nqp-lib option related code.

[14:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/55537e9b29

[14:06] <Geth> ¦ rakudo/main: 1b460be191 | (Nick Logan)++ (committed using GitHub Web editor) | 3 files

[14:06] <Geth> ¦ rakudo/main: Merge pull request #5306 from rakudo/ugexe/remove-nqp-lib-leftovers

[14:07] <Geth> ¦ rakudo/main: 

[14:07] <Geth> ¦ rakudo/main: Remove deprecated --nqp-lib option

[14:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1b460be191

[14:07] <Geth> ¦ rakudo/main: c7e6e5af8d | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[14:07] <Geth> ¦ rakudo/main: RakuAST: make check for meta depend on *last* | seen

[14:07] <Geth> ¦ rakudo/main: 

[14:07] <Geth> ¦ rakudo/main: This allows | to be used in the lemma of L< and X< without needing

[14:07] <Geth> ¦ rakudo/main: to escape them.

[14:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c7e6e5af8d

[14:46] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: 339d905851 | (Nick Logan)++ | 35 files

[14:46] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: Copy modules from lib/ to individual distributions at core-lib/

[14:46] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: 

[14:46] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: As the first step of splitting the core modules into multiple

[14:46] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: distributions we will copy the modules into subdirectories of

[14:46] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: core-lib/, grouping them in a way that seems logical. In a

[14:46] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: future step we will incorporate these new paths to various parts

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: of the tooling (since we will need to do -Icore-libs/BUILDPLAN,

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: -Icore-libs/NativeCall, and so on) and delete the still existing

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: lib/ directory.

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: review: https://github.com/rakudo/rakudo/commit/339d905851

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: 7a8b7d2276 | (Nick Logan)++ | 131 files

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: Update tests to use core-libs/

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: 

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: Now that the modules in lib/ have been broken into multiple

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: distributions inside of core-libs/ we need to actually use them.

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: Previously this would have been handled via e.g. t/harness5 using

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: PERL6LIB=lib. However, a single directory cannot always represent

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: all the core distributions, so there are many cases where not

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: <…commit message has 14 more lines…>

[14:47] <Geth> ¦ rakudo/ugexe/distributionfy-core-dists: review: https://github.com/rakudo/rakudo/commit/7a8b7d2276

[15:03] *** dogbert11 left
[15:50] *** Xliff joined
[15:50] <Xliff> Raku-GLib suite timing statistics for Raku 2023.06.32.g.101.d.3.ca.5.d.0

[15:50] <Xliff> Using the following processor: 13th Gen Intel(R) Core(TM) i9-13900K

[15:50] <Xliff> Total number of projects: 33 (506183 loc)

[15:50] <Xliff> Total non-parallel compile times: 5434.090 (164.669 avg)

[15:50] <Xliff> Total parallel compile times: 1002.853 (30.389 avg) 5.419x speedup

[16:10] <Geth> ¦ rakudo/main: d72c562dfe | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[16:10] <Geth> ¦ rakudo/main: RakuAST: a better way to extract meta-info from markup

[16:10] <Geth> ¦ rakudo/main: 

[16:10] <Geth> ¦ rakudo/main: Take the last atom: it *must* be a Str because we don't allow markup

[16:10] <Geth> ¦ rakudo/main: in the meta of L<> and X<>.  Split that on the first | seen (which

[16:10] <Geth> ¦ rakudo/main: could well be the first character).  Use that as meta.  Adjust atom

[16:10] <Geth> ¦ rakudo/main: accordingly, or remove it if it has now become empty.

[16:10] <Geth> ¦ rakudo/main: 

[16:10] <Geth> ¦ rakudo/main: This fixes some corner cases in the Raku documentation, but breaks

[16:10] <Geth> ¦ rakudo/main: other cases, such as L<foo::(bar|baz)|url>, which will now have to

[16:10] <Geth> ¦ rakudo/main: be written as L<V<foo::(bar|baz)>|url>, which sadly isn't rendered

[16:10] <Geth> ¦ rakudo/main: correctly by Pod::To::Text.

[16:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d72c562dfe

[16:12] <Geth> ¦ rakudo/main: 15f9685b0c | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[16:12] <Geth> ¦ rakudo/main: RakuAST: fixed borked (private) method call

[16:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/15f9685b0c

[16:12] <lizmat> meh, tests didn't spot that

[16:16] *** SmokeMachine left
[16:16] *** SmokeMachine joined
[17:25] *** ab5tract left
[17:29] <nine> MasterDuke: I don't see a need for hllizefor. Your Raku class can just wrap the otherwise opaque BOOTStat object. Same as IO::Handle just stores the !PIO and passes it to nqp ops

[17:51] *** bisectable6 left
[17:53] *** bisectable6 joined
[18:00] *** reportable6 left
[18:00] *** bisectable6 left
[18:01] *** reportable6 joined
[18:02] *** bisectable6 joined
[18:17] <Geth> ¦ problem-solving: finanalyst assigned to coke Issue POD6 to RakuDoc revision process https://github.com/Raku/problem-solving/issues/375

[18:59] <Geth> ¦ rakudo/main: 1beeb166ad | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[18:59] <Geth> ¦ rakudo/main: RakuAST: fix handling of L<C<foo>>

[18:59] <Geth> ¦ rakudo/main: 

[18:59] <Geth> ¦ rakudo/main: Aka, a L<> or X<> with a markup code and *no* | or meta info.  This

[18:59] <Geth> ¦ rakudo/main: could be considered a user error, but it should handle this without

[18:59] <Geth> ¦ rakudo/main: dying.

[18:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1beeb166ad

[19:13] *** bisectable6 left
[19:15] *** bisectable6 joined
[19:34] <Geth> ¦ rakudo/main: 1b68eb7d95 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[19:34] <Geth> ¦ rakudo/main: RakuAST: handle E<   > more friendly

[19:34] <Geth> ¦ rakudo/main: 

[19:34] <Geth> ¦ rakudo/main: aka, just whitespace between < >.  Parse this more friendly by just

[19:34] <Geth> ¦ rakudo/main: leaving the atom in place without any meta information.

[19:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1b68eb7d95

[21:23] *** vrurg left
[21:39] *** sena_kun left
[21:56] *** vrurg joined
[22:17] *** bisectable6 left
[22:20] *** bisectable6 joined
[23:52] *** linkable6 left
[23:52] *** evalable6 left
[23:52] *** evalable6 joined
[23:55] *** linkable6 joined
