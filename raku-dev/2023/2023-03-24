[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:04] *** kjp left
[00:07] *** kjp joined
[01:09] *** japhb left
[01:33] *** japhb joined
[05:10] *** japhb left
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[07:53] *** bloatable6 left
[07:53] *** nativecallable6 left
[07:53] *** sourceable6 left
[07:53] *** committable6 left
[07:53] *** shareable6 left
[07:53] *** statisfiable6 left
[07:53] *** benchable6 left
[07:53] *** bisectable6 left
[07:53] *** notable6 left
[07:53] *** greppable6 left
[07:53] *** reportable6 left
[07:53] *** evalable6 left
[07:53] *** quotable6 left
[07:53] *** coverable6 left
[07:53] *** squashable6 left
[07:53] *** unicodable6 left
[07:53] *** tellable6 left
[07:53] *** releasable6 left
[07:53] *** linkable6 left
[07:53] *** benchable6 joined
[07:53] *** committable6 joined
[07:53] *** shareable6 joined
[07:53] *** sena_kun joined
[07:53] *** reportable6 joined
[07:54] *** sourceable6 joined
[07:54] *** notable6 joined
[07:54] *** bloatable6 joined
[07:54] *** tellable6 joined
[07:54] *** linkable6 joined
[07:54] *** greppable6 joined
[07:54] *** releasable6 joined
[07:55] *** nativecallable6 joined
[07:55] *** coverable6 joined
[07:55] *** evalable6 joined
[07:55] *** statisfiable6 joined
[07:55] *** unicodable6 joined
[07:55] *** quotable6 joined
[07:55] *** squashable6 joined
[07:56] *** bisectable6 joined
[09:01] *** squashable6 left
[09:01] *** squashable6 joined
[10:16] <Geth> ¦ rakudo/main: 6e8abbf9be | (Elizabeth Mattijsen)++ | src/Raku/ast/variable-declaration.rakumod
[10:16] <Geth> ¦ rakudo/main: RakuAST: removed dead code
[10:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6e8abbf9be
[10:29] *** sena_kun left
[11:06] *** ab5tract joined
[11:08] <lizmat> Sanity check: we don't have anything such as "is raw" or \ for sub parameters in NQP, do we ?
[11:20] <lizmat> I'm trying to find a way to fix the "no strict; $a = 42" case, and was thinking of creating a subclass of Var::Lexical (Var::Lexical::Auto)
[11:21] <lizmat> and make that the object hanging off the match in the grammar\
[11:21] <lizmat> and then handle the resolving and QASTing inside that subclass
[11:21] <lizmat> which would mean limited overhead for the normal case
[11:49] <Geth> ¦ rakudo/main: e5e5acb418 | (Elizabeth Mattijsen)++ | 3 files
[11:49] <Geth> ¦ rakudo/main: RakuAST: one step closer to supporting "no strict"
[11:49] <Geth> ¦ rakudo/main: 
[11:49] <Geth> ¦ rakudo/main: - create a subclass of Var::Lexical called Var::Lexical::Auto
[11:49] <Geth> ¦ rakudo/main: - have the Action.compile_variable_access check for "no strict" and
[11:49] <Geth> ¦ rakudo/main:   create a Var::Lexical::Auto instead of Var::Lexical
[11:49] <Geth> ¦ rakudo/main: - have the Grammar.check_variable method only check exact Var::Lexical
[11:50] <Geth> ¦ rakudo/main:   objects, and panic if not defined
[11:50] <Geth> ¦ rakudo/main: <…commit message has 10 more lines…>
[11:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e5e5acb418
[11:55] <lizmat> nine:  ^^  see rest of commit message :-)
[11:56] <lizmat> afk for a while&
[11:56] *** lizmat left
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:16] *** hankache joined
[12:47] *** hankache left
[13:08] *** sena_kun joined
[13:17] *** sena_kun left
[13:18] *** sena_kun joined
[13:34] *** japhb joined
[14:03] *** RakuIRCLogger left
[15:15] <nine> lizmat: in NQP all parameters are raw
[15:15] <tellable6> nine, I'll pass your message to lizmat
[15:49] *** lizmat joined
[15:52] <lizmat> .
[15:52] <tellable6> 2023-03-24T15:15:12Z #raku-dev <nine> lizmat: in NQP all parameters are raw
[16:06] *** lizmat left
[16:22] *** japhb left
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:04] <[Coke]> in src/Perl6/Compiler.nqp, there are many cases of, e.g. nqp::gethllsym('Raku', 'Version');
[18:05] <[Coke]> my $ex := nqp::gethllsym('Raku', 'X::Language::Unsupported'); runs but doesn't find the exception.
[18:14] <[Coke]> This with RAKUDO_RAKUST=1 and calling in to Perl6/Compiler from the AST path.
[18:14] <[Coke]> AST Actions.
[18:43] <vrurg> [Coke]: Because this is not how hllsym works. You have to bind the symbol first.
[19:11] *** japhb joined
[20:03] *** japhb left
[20:07] *** japhb joined
[20:39] <nine> This mechanism is used for just a few symbols. From RakuAST you need to use the resolver to find arbitrary symbols in the setting.
[20:40] *** sena_kun left
[20:43] *** sena_kun joined
[20:45] *** sena_kun left
[22:24] *** lizmat joined
[22:24] <lizmat> .
[22:41] *** ab5tract left
[23:28] <[Coke]> I'm trying to move this into Perl6/Compiler, which could be called from RakuAST or not
[23:29] <[Coke]> if it's rakuast specific, I'll have to throw the adhoc exception, catch it, and throw the "real" exception from the AST actions. (which is, I think, what the non-AST is doing; it's throwing an adhoc internally and then world is fixing it up)
[23:30] <[Coke]> ... unless the resolver isn't AST specific?
[23:34] <[Coke]> I'll try doing the catch/rethrow on the AST side.
