[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:07] *** jgaz joined
[00:44] *** kjp left
[00:57] *** kjp joined
[04:00] *** quotable6 left
[04:00] *** bisectable6 left
[04:00] *** bloatable6 left
[04:00] *** unicodable6 left
[04:00] *** statisfiable6 left
[04:00] *** nativecallable6 left
[04:00] *** linkable6 left
[04:00] *** sourceable6 left
[04:00] *** squashable6 left
[04:00] *** tellable6 left
[04:00] *** evalable6 left
[04:00] *** releasable6 left
[04:00] *** committable6 left
[04:00] *** notable6 left
[04:00] *** coverable6 left
[04:00] *** greppable6 left
[04:00] *** benchable6 left
[04:00] *** shareable6 left
[04:01] *** evalable6 joined
[04:01] *** releasable6 joined
[04:01] *** greppable6 joined
[04:01] *** committable6 joined
[04:01] *** statisfiable6 joined
[04:01] *** quotable6 joined
[04:01] *** linkable6 joined
[04:02] *** bisectable6 joined
[04:02] *** bloatable6 joined
[04:02] *** nativecallable6 joined
[04:02] *** shareable6 joined
[04:02] *** sourceable6 joined
[04:02] *** squashable6 joined
[04:02] *** unicodable6 joined
[04:03] *** benchable6 joined
[04:03] *** notable6 joined
[04:03] *** tellable6 joined
[04:03] *** coverable6 joined
[05:45] *** Util left
[05:45] *** Util joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:03] *** statisfiable6 left
[07:03] *** notable6 left
[07:03] *** bloatable6 left
[07:03] *** committable6 left
[07:03] *** squashable6 left
[07:03] *** quotable6 left
[07:03] *** evalable6 left
[07:03] *** benchable6 left
[07:03] *** unicodable6 left
[07:03] *** bisectable6 left
[07:03] *** greppable6 left
[07:03] *** sourceable6 left
[07:03] *** reportable6 left
[07:03] *** releasable6 left
[07:03] *** tellable6 left
[07:03] *** coverable6 left
[07:03] *** nativecallable6 left
[07:03] *** shareable6 left
[07:03] *** linkable6 left
[07:03] *** quotable6 joined
[07:03] *** tellable6 joined
[07:04] *** statisfiable6 joined
[07:04] *** committable6 joined
[07:04] *** nativecallable6 joined
[07:04] *** sourceable6 joined
[07:04] *** reportable6 joined
[07:05] *** evalable6 joined
[07:05] *** benchable6 joined
[07:05] *** releasable6 joined
[07:05] *** squashable6 joined
[07:05] *** greppable6 joined
[07:05] *** coverable6 joined
[07:05] *** shareable6 joined
[07:06] *** bisectable6 joined
[07:06] *** notable6 joined
[07:06] *** unicodable6 joined
[07:06] *** linkable6 joined
[07:06] *** bloatable6 joined
[07:31] <patrickb> lizmat: Could the RAST based highlighting thing possibly work without executing code in BEGIN blocks or similar?

[07:33] <patrickb> jdv: There was talk about a point release to have a release that works on Windows. What's your opinion?

[07:49] <lizmat> patrickb: no, BEGIN blocks would get executed, INIT blocks wouldn't, CHECK I would need to check

[07:55] <patrickb> I feared so. Thanks for confirming!

[08:52] <lizmat> nine: any idea why:

[08:52] <lizmat> m: say Q|.Str|.AST

[08:52] <camelia> rakudo-moar 4dd493391: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::Term::TopicCall.new(␤      RakuAST::Call::Method.new(␤        name => RakuAST::Name.from-identifier("Str")␤      )␤    )␤  )␤)␤»

[08:52] <lizmat> is ok and:

[08:52] <lizmat> m: say Q|$_.Str|.AST

[08:52] <camelia> rakudo-moar 4dd493391: OUTPUT: «===SORRY!=== Error while compiling ␤Confused␤------> $_.Str⏏<EOL>␤»

[08:52] <lizmat> is not?

[08:52] <lizmat> the above is a golf

[09:35] <lizmat> nine: it feels like the .AST method in core_epilogue is missing something, perhaps an outer resolver?

[09:37] <lizmat> also: only seems to happen with method calls on variables

[09:37] <lizmat> where the variable somehow cannot be resolved

[09:38] <lizmat> setting up a $*R before the call to .compile, makes it bomb inside that resolver it seems

[09:40] <lizmat> my $*R := RakuAST::Resolver.new(:global(GLOBAL), :context($eval_ctx));

[09:41] <lizmat> still I think that just indicates that the resolver inside the EVAL isn't seeing its own known variables for some reason

[09:50] <lizmat> shorter golf:

[09:50] <lizmat> m: say Q|++$_|.AST

[09:50] <camelia> rakudo-moar 4dd493391: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::ApplyPrefix.new(␤      prefix  => RakuAST::Prefix.new("++"),␤      operand => RakuAST::Var::Lexical.new("\$_")␤    )␤  )␤)␤»

[09:50] <lizmat> m: say Q|$_++|.AST

[09:50] <camelia> rakudo-moar 4dd493391: OUTPUT: «===SORRY!=== Error while compiling ␤Confused␤------> $_++⏏<EOL>␤»

[09:50] <lizmat> so it feels something's amiss with ApplyPostfix that isn't amiss with ApplyPrefix

[09:50] <lizmat> brb

[10:46] *** linkable6 left
[10:46] *** evalable6 left
[10:49] *** evalable6 joined
[10:50] *** linkable6 joined
[11:05] <lizmat> hmmm.,  traced it down to line 900 in Actions: if nqp::istype($postfix, RakuAST::Postfixish) {

[11:05] <lizmat> fails even though the $postfix is a RakuAST::Postfix

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:22] *** jgaz left
[12:56] <Geth> ¦ rakudo/main: f581d020c6 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[12:56] <Geth> ¦ rakudo/main: RakuAST: fix .AST not handing method calls on variables

[12:56] <Geth> ¦ rakudo/main: 

[12:56] <Geth> ¦ rakudo/main: This turned out to be caused by RakuAST::Methodish not having been

[12:56] <Geth> ¦ rakudo/main: properly resolved  at .AST time.  So resolve it properly by wrapping

[12:56] <Geth> ¦ rakudo/main: it in a self.r() call in the Actions.

[12:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f581d020c6

[12:56] <lizmat> nine: ^^  found it  :-)

[13:22] *** evalable6 left
[13:22] *** linkable6 left
[13:23] *** evalable6 joined
[13:23] *** linkable6 joined
[13:45] <Geth> ¦ rakudo/main: c5b917db1d | (Elizabeth Mattijsen)++ | 4 files

[13:45] <Geth> ¦ rakudo/main: RakuAST: var declaration can now handle traits

[13:45] <Geth> ¦ rakudo/main: 

[13:45] <Geth> ¦ rakudo/main: When called as RakuAST::VarDeclaration::Simple.  The grammar never

[13:45] <Geth> ¦ rakudo/main: directly sets any traits, but manual building ASTs probably will.

[13:45] <Geth> ¦ rakudo/main: 

[13:45] <Geth> ¦ rakudo/main: Also fix .raku and deparsing, and add a test.

[13:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c5b917db1d

[14:02] <Geth> ¦ rakudo/main: 0557d83472 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[14:02] <Geth> ¦ rakudo/main: RakuAST: fix deparsing of ::Parameter

[14:02] <Geth> ¦ rakudo/main: 

[14:02] <Geth> ¦ rakudo/main: - traits were not included

[14:02] <Geth> ¦ rakudo/main: - 'Any' means default, so don't mention that

[14:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0557d83472

[14:25] <jdv> patrickb: probably.  its been fridays most of my tenure.

[14:25] <jdv> but it varies

[15:24] <Geth> ¦ rakudo/main: 0fecf561ff | (Elizabeth Mattijsen)++ | 4 files

[15:24] <Geth> ¦ rakudo/main: RakuAST: allow traits to be set with ::Type::Enum

[15:24] <Geth> ¦ rakudo/main: 

[15:24] <Geth> ¦ rakudo/main: - fix .raku and deparsing by creating a "clean-clone" method to

[15:24] <Geth> ¦ rakudo/main:   make sure the hidden mixed-in roles are not leaking out.

[15:24] <Geth> ¦ rakudo/main: 

[15:24] <Geth> ¦ rakudo/main: Note: it feels wrong that the xxxEnumeration roles are first added

[15:24] <Geth> ¦ rakudo/main: as traits to the RakuAST:: object, instead of directly to the meta

[15:24] <Geth> ¦ rakudo/main: object.  But that's for another day.

[15:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0fecf561ff

[16:09] *** jgaz joined
[16:27] *** kurahaupo left
[16:28] *** kurahaupo joined
[17:06] *** [Coke] left
[17:07] *** [Coke] joined
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:21] <Geth> ¦ nqp/main: 43e8c520b3 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[18:21] <Geth> ¦ nqp/main: Bump MoarVM to get support for unix domain sockets

[18:21] <Geth> ¦ nqp/main: 

[18:21] <Geth> ¦ nqp/main: leont++

[18:21] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/43e8c520b3

[18:32] <Geth> ¦ rakudo/main: 2eadafa58e | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[18:32] <Geth> ¦ rakudo/main: Bump NQP to get support for unix domain sockets

[18:32] <Geth> ¦ rakudo/main: 

[18:32] <Geth> ¦ rakudo/main: leont++

[18:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2eadafa58e

[18:33] <Geth> ¦ rakudo/main: 6f9bc5b14c | (Leon Timmermans)++ (committed using GitHub Web editor) | src/core.c/IO/Socket/Async.pm6

[18:33] <Geth> ¦ rakudo/main: Add connect-path and listen-path to IO::Socket::Async

[18:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6f9bc5b14c

[18:51] <Geth> ¦ rakudo/main: c452fdbf0a | (Elizabeth Mattijsen)++ | src/core.c/IO/Socket/Async.pm6

[18:51] <Geth> ¦ rakudo/main: Enable IO::Socket::Async.connect/listen-path on MoarVM only

[18:51] <Geth> ¦ rakudo/main: 

[18:51] <Geth> ¦ rakudo/main: As that's the only backend it will work on, at least for now.

[18:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c452fdbf0a

[19:01] <lizmat> so, regarding running roast with 6.e.PREVIEW as default:

[19:02] <lizmat> what if we would install another executable / alias (e.g. raku-latest) and have the loading logic check the name and then go for latest in core setting loading?

[19:02] <lizmat> then we could pass that as the name to the harness and be done with it?   No fudging of roast files needed?

[19:05] <lizmat> afk&

[19:11] <[Coke]> raku-6e raku-6d raku-latest

[19:15] *** evalable6 left
[19:15] *** linkable6 left
[19:17] *** evalable6 joined
[19:17] *** linkable6 joined
[21:00] *** MasterDuke joined
[21:06] *** jgaz left
[21:08] *** jgaz joined
[22:19] <gfldex> lizmat: how about `RAKUDO_OVERRIDE_VERSION=6.e.PREVIEW raku your-script-here.raku`. That would make it a general purpose feature.

[22:21] <gfldex> And we don't need a dozen executables in 20 years time.

