[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:04] *** Kaipei left
[01:04] *** linkable6 left
[01:04] *** evalable6 left
[01:06] *** linkable6 joined
[01:07] *** evalable6 joined
[02:41] *** squashable6 left
[02:41] *** unicodable6 left
[02:41] *** evalable6 left
[02:41] *** statisfiable6 left
[02:41] *** greppable6 left
[02:41] *** bisectable6 left
[02:41] *** sourceable6 left
[02:41] *** benchable6 left
[02:41] *** bloatable6 left
[02:41] *** releasable6 left
[02:41] *** nativecallable6 left
[02:41] *** quotable6 left
[02:41] *** committable6 left
[02:41] *** tellable6 left
[02:41] *** reportable6 left
[02:41] *** notable6 left
[02:41] *** coverable6 left
[02:41] *** linkable6 left
[02:41] *** shareable6 left
[02:41] *** nativecallable6 joined
[02:42] *** committable6 joined
[02:42] *** evalable6 joined
[02:42] *** statisfiable6 joined
[02:42] *** sourceable6 joined
[02:42] *** coverable6 joined
[02:42] *** releasable6 joined
[02:43] *** bisectable6 joined
[02:43] *** benchable6 joined
[02:43] *** tellable6 joined
[02:43] *** reportable6 joined
[02:43] *** greppable6 joined
[02:43] *** shareable6 joined
[02:43] *** unicodable6 joined
[02:43] *** bloatable6 joined
[02:43] *** quotable6 joined
[02:44] *** linkable6 joined
[02:44] *** notable6 joined
[02:44] *** squashable6 joined
[03:46] *** kjp joined
[05:17] *** discord-raku-bot left
[05:18] *** discord-raku-bot joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:48] *** samebchase joined
[07:12] *** Kaipei joined
[07:52] *** sena_kun joined
[10:27] *** sena_kun left
[11:06] *** sena_kun joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:53] <Geth> ¦ rakudo/main: 72856df91b | (Elizabeth Mattijsen)++ | 4 files
[12:53] <Geth> ¦ rakudo/main: Implement numeric coercers for Date/DateTime
[12:53] <Geth> ¦ rakudo/main: 
[12:53] <Geth> ¦ rakudo/main: Basically implement PRs #5151 and #5152 as a single revertable commit.
[12:53] <Geth> ¦ rakudo/main: As suggested by Márton Polgár.
[12:53] <Geth> ¦ rakudo/main: 
[12:53] <Geth> ¦ rakudo/main: This also implements Mu.Int on type objects.  This could be considered
[12:53] <Geth> ¦ rakudo/main: wrong, as then maybe other specific numeric coercers should also be
[12:53] <Geth> ¦ rakudo/main: handled in Mu (think: .Rat / .Num / .Complex).  This approach was
[12:53] <Geth> ¦ rakudo/main: taken over starting a new proto in Date.
[12:53] *** Kaipei left
[12:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/72856df91b
[12:55] <Geth> ¦ rakudo/main: 4b264b80b4 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Any.pm6
[12:55] <Geth> ¦ rakudo/main: Allow * to be used as identity on classify|categorize (#5140)
[12:55] <Geth> ¦ rakudo/main: 
[12:55] <Geth> ¦ rakudo/main: In response to https://github.com/rakudo/rakudo/issues/5134
[12:55] <Geth> ¦ rakudo/main: 
[12:55] <Geth> ¦ rakudo/main: Note that this also allows the :as parameter to be used, such as
[12:55] <Geth> ¦ rakudo/main: creating lists of indices of a particular value in a list:
[12:55] <Geth> ¦ rakudo/main: 
[12:56] <Geth> ¦ rakudo/main:     $ raku -e 'say (1,1,1,2,1,2).classify(*, :as({$++}))'
[12:56] <Geth> ¦ rakudo/main:     {1 => [0 1 2 4], 2 => [3 5]}
[12:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4b264b80b4
[13:06] <|Tux|> Rakudo v2022.12-1-gd52342eb0 (v6.d) on MoarVM 2022.12-13-g74e215479
[13:06] <|Tux|> csv-test-xs-20      0.408 -  0.410
[13:06] <|Tux|> csv-ip5xs           0.854 -  0.854
[13:06] <|Tux|> test-t --race       0.877 -  0.922
[13:06] <|Tux|> test-t              1.413 -  1.469
[13:06] <|Tux|> csv-parser          3.490 -  3.585
[13:06] <|Tux|> csv-ip5xs-20        5.200 -  5.320
[13:06] <|Tux|> test-t-20 --race    6.899 -  6.944
[13:06] <|Tux|> test                6.589 -  7.040
[13:06] <|Tux|> test-t-20          20.275 - 20.476
[13:08] *** Kaipei joined
[14:12] <lizmat> notable6: weekly
[14:12] <notable6> lizmat, No notes for “weekly”
[14:44] *** discord-raku-bot left
[14:44] *** discord-raku-bot joined
[14:59] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/01/09/2023-02-microfeatures/
[15:20] <vrurg_> lizmat++ 
[15:20] *** vrurg_ is now known as vrurg
[15:22] <vrurg> lizmat: BTW, a few days ago it crossed my mind that separating internal representation of Raku language version from its public one would make it much easier to transition to a new versioning scheme. It would require lesser amount of logic changes.
[15:23] <lizmat> explain  :-)
[15:25] <vrurg> Internal Version class which is v1.0. Version.as-perl6: v6.c; Version.as-raku: v2015.
[15:26] <vrurg> v2 -> v6.d, v3.PREVIEW -> v6.e.PREVIEW
[15:28] <vrurg> So, internally we only have numbers.
[15:29] <lizmat> ah, ok, maybe a bit like Darwin versions vs MacOS versions :-)
[15:30] <vrurg> The only problem with v20xx scheme to me is that it implies specific release year. But we currently have no idea as to when the next version is to be released.
[15:30] <lizmat> we could use a generic "Blead" version, akin to v6.* now ?
[15:32] <vrurg> vBlead? Nah...
[15:33] <lizmat> well, whatever the name
[15:33] <lizmat> we could just keep v6.* for historic reasons
[15:33] <vrurg> But this is what I like in this separation: the representation can be decided upon later, I wouldn't affect how things work internally.
[15:34] <lizmat> perhaps the public version value should not be a sec Version value, but a subclass with its own comparison rules ?
[15:35] <vrurg> m: say Version.new("v*").Str
[15:35] <camelia> rakudo-moar 4b264b80b: OUTPUT: «v.*␤»
[15:36] <vrurg> Actually, the internal Version is planned to be a private NQP class of Perl6::Compiler.
[15:37] <vrurg> The public API would be LanguageVersionServices and all "communications" would go through it.
[15:38] <vrurg> The public API would be LanguageVersionServices and all "communications" would go through it.
[15:38] <lizmat> isn't that overkill ?
[15:40] <vrurg> nqp::getcomp("Raku").lvs.from-perl6("v6.e.PREVIEW"). Not really. But does a good separation of concerns case.
[15:41] <vrurg> The Version class could be re-used for other purposes if considered useful. But anything related to the actual language versioning is better be kept away from it.
[15:45] *** guifa joined
[15:45] <lizmat> with that I can agree, I think
[15:47] *** guifa_ left
[16:09] *** NemokoschKiwi joined
[16:10] *** NemokoschKiwi left
[16:45] *** |Tux| left
[16:51] <lizmat> bisectable6: old=2022.12 use Test; plan 1; like 42, /43/
[16:51] <bisectable6> lizmat, On both starting points (old=2022.12 new=d52342e) the exit code is 1 and the output is identical as well
[16:51] <bisectable6> lizmat, Output on both points: «1..1␤not ok 1 - text matches /43/␤# Failed test 'text matches /43/'␤# at /tmp/NOnvclLTQc line 1␤# expected a match with: /43/␤#                   got: "42"␤# You failed 1 test of 1␤»
[17:01] <Geth> ¦ rakudo/main: 85b91b6eac | (Elizabeth Mattijsen)++ | src/Raku/ast/expressions.rakumod
[17:01] <Geth> ¦ rakudo/main: Add a RakuAST::ApplyPostfix.on-topic method
[17:01] <Geth> ¦ rakudo/main: 
[17:01] <Geth> ¦ rakudo/main: Returns True if the Postfix is being apply on a lexical $_, to
[17:01] <Geth> ¦ rakudo/main: facilitate nicer deparsing more easily
[17:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/85b91b6eac
[17:01] <Geth> ¦ rakudo/main: 4e2e99067f | (Elizabeth Mattijsen)++ | 2 files
[17:01] <Geth> ¦ rakudo/main: Add extensive deparsing tests on statement modifiers
[17:01] <Geth> ¦ rakudo/main: 
[17:01] <Geth> ¦ rakudo/main: Also make some on return values more specific.  And use the new
[17:01] <Geth> ¦ rakudo/main: ApplyPostfix.on-topic method for nicer deparsing.
[17:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4e2e99067f
[17:36] *** |Tux| joined
[17:36] *** Tux__ joined
[17:39] *** Tux__ left
[18:00] *** reportable6 left
[18:01] <Geth> ¦ rakudo/main: 656450e26b | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod
[18:01] <Geth> ¦ rakudo/main: RakuAST: Fix using regexes as where blocks
[18:01] <Geth> ¦ rakudo/main: 
[18:01] <Geth> ¦ rakudo/main: While Regex objects are code, we cannot call them directly, but instead
[18:01] <Geth> ¦ rakudo/main: need to call their .ACCEPTS method, just like non-code objects. This
[18:01] <Geth> ¦ rakudo/main: will create the required Cursor, deal with $/ and all the other magic,
[18:01] <Geth> ¦ rakudo/main: regexes need.
[18:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/656450e26b
[18:01] <Geth> ¦ rakudo/main: 5890894fd4 | (Stefan Seifert)++ | 2 files
[18:01] <Geth> ¦ rakudo/main: RakuAST: Fix quoted words as trait values
[18:02] <Geth> ¦ rakudo/main: 
[18:02] <Geth> ¦ rakudo/main: We blindly assumed that a trait value was given in parentheses or
[18:02] <Geth> ¦ rakudo/main: square brackets, i.e. Circumfixes, but they can also just be
[18:02] <Geth> ¦ rakudo/main: QuotedStrings (i.e. <foo>). Actually that specialization was only
[18:02] <Geth> ¦ rakudo/main: required because we couldn't interpret Circumfixes, so just implement
[18:02] <Geth> ¦ rakudo/main: that support instead.
[18:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5890894fd4
[18:02] <Geth> ¦ rakudo/main: dd90679137 | (Stefan Seifert)++ | 4 files
[18:02] <Geth> ¦ rakudo/main: RakuAST: support values as parameter constraints
[18:02] <Geth> ¦ rakudo/main: 
[18:02] <Geth> ¦ rakudo/main: E.g. sub foo(0) { }
[18:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dd90679137
[18:02] *** reportable6 joined
[18:04] *** Geth left
[18:06] *** sena_kun left
[18:24] <lizmat> nine jnthn is there a way that you can have a Blockoid without a Block, or vice-versa?
[18:25] <lizmat> in other words, what creates the blockiness:  the Block or the Blockoid ?
[18:26] <lizmat> in other words: should Block or Blockoid deparse with { } ?
[18:37] <nine> Both. Block is a first class language construct while Blockoid is more a unit of organization in the AST.
[18:38] <nine> s/Both/Blockoid/
[18:44] *** timo left
[18:52] *** sena_kun joined
[19:31] *** Kaipei left
[19:42] *** Kaiepi joined
[20:23] <lizmat> nine: ack!
[20:24] <lizmat> m: say Q/BEGIN 42/.AST.dump   # nine known issue ?
[20:24] <camelia> rakudo-moar dd9067913: OUTPUT: «===SORRY!===␤Unknown compilation input 'qast'␤»
[20:27] <nine> Works when run with RAKUDO_RAKUAST=1
[20:29] <lizmat> that's... weird, as .AST uses the Raku grammar / actions
[20:30] <nine> But nqp::getcomp('Raku') returns a non-RakuAST compiler
[20:32] <lizmat> but that's ok as long as it use the right grammar / actions ?
[20:33] <lizmat> I mean, src/main.nqp uses the same compiler, whether RAKDO_RAKUAST is set or not
[20:34] <nine> I don't know. I also don't care :) After all, it's a problem that will go away by itself and there are tons of problems still there that won't.
[20:34] <lizmat> yeah, sure
[20:35] <lizmat> it just makes testing RakuAST::StatementPrefix::Phaser::Begin a bit difficult  :-)
[20:37] <vrurg> lizmat: The compiler is technically the same class, but the grammar/actions are different.
[20:38] <lizmat> right, that's what I thought  :-)
[20:38] <lizmat> vrurg: how did the class / course go ?
[20:39] <vrurg> lizmat: It's not up  to me to decide. I felt a little sick, so not as good as I wished it to be.
[20:39] <vrurg> Speaking of the compiler, look a t/12-rakuast/origins.rakutest. 
[20:39] <lizmat> is there a video already ?
[20:40] <vrurg> I've got a link to a could recording, but it asks for some passcode which I don't have.
[20:40] <lizmat> meh
[20:40] <lizmat> I guess we need to ask someone at TPRF to release it to Youtube or so?
[20:41] <vrurg> Oh, got a reply ~20mins ago about it. Anyway, I'd need to edit the video first.
[20:41] <vrurg> I'll release it after editing.
[20:41] <lizmat> oki   looking forward to it!
[20:43] *** Geth joined
[20:45] <Geth> ¦ rakudo/main: 64a3bd227c | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6
[20:45] <Geth> ¦ rakudo/main: Hopefully fix indenting issues in deparsing
[20:45] <Geth> ¦ rakudo/main: 
[20:45] <Geth> ¦ rakudo/main: The problem was really caused by a thinko: having the deparse proto
[20:45] <Geth> ¦ rakudo/main: unconditionally create a $*INDENT dynamic variable, doesn't help
[20:45] <Geth> ¦ rakudo/main: when you're calling .deparse inside a .deparse.  Fix by only creating
[20:45] <Geth> ¦ rakudo/main: a single $*INDENT the first time .deparse is called.
[20:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/64a3bd227c
[20:45] <Geth> ¦ rakudo/main: 5a7e07d6cc | (Elizabeth Mattijsen)++ | t/12-rakuast/statementprefixes.rakutest
[20:45] <Geth> ¦ rakudo/main: Add extensive deparsing tests for statement prefixes
[20:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5a7e07d6cc
[20:45] <Geth> ¦ rakudo/main: 5189750d87 | (Elizabeth Mattijsen)++ | t/12-rakuast/package.rakutest
[20:45] <Geth> ¦ rakudo/main: Remove mention of rakuast branch in comment
[20:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5189750d87
[20:50] <vrurg> I have the video downloaded. Now, I need some time to review and edit.
[20:55] <lizmat> cool!
[21:03] *** epony left
[21:29] *** NemokoschKiwi joined
[21:41] <Geth> ¦ GlotIO: c0ea74a1ba | lpmi-13++ | README.md
[21:41] <Geth> ¦ GlotIO: fix simple typo
[21:41] <Geth> ¦ GlotIO: review: https://github.com/raku-community-modules/GlotIO/commit/c0ea74a1ba
[21:41] <Geth> ¦ GlotIO: 8020349fc4 | (Márton Polgár)++ (committed using GitHub Web editor) | README.md
[21:41] <Geth> ¦ GlotIO: Merge pull request #3 from lpmi-13/typofix
[21:41] <Geth> ¦ GlotIO: 
[21:41] <Geth> ¦ GlotIO: fix simple typo
[21:41] <Geth> ¦ GlotIO: review: https://github.com/raku-community-modules/GlotIO/commit/8020349fc4
[21:43] *** NemokoschKiwi left
[23:17] *** codesections joined
[23:23] *** Kaiepi left
[23:31] *** sena_kun left
[23:50] *** epony joined
