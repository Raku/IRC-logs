[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:02] *** coverable6 left
[01:02] *** linkable6 left
[01:02] *** bloatable6 left
[01:02] *** greppable6 left
[01:02] *** sourceable6 left
[01:02] *** statisfiable6 left
[01:02] *** evalable6 left
[01:02] *** squashable6 left
[01:02] *** releasable6 left
[01:02] *** tellable6 left
[01:02] *** quotable6 left
[01:02] *** committable6 left
[01:02] *** reportable6 left
[01:02] *** shareable6 left
[01:02] *** unicodable6 left
[01:02] *** benchable6 left
[01:02] *** bisectable6 left
[01:02] *** notable6 left
[01:02] *** nativecallable6 left
[01:02] *** unicodable6 joined
[01:03] *** notable6 joined
[01:03] *** shareable6 joined
[01:03] *** releasable6 joined
[01:03] *** greppable6 joined
[01:03] *** linkable6 joined
[01:03] *** reportable6 joined
[01:03] *** tellable6 joined
[01:04] *** sourceable6 joined
[01:04] *** statisfiable6 joined
[01:04] *** committable6 joined
[01:04] *** bloatable6 joined
[01:05] *** coverable6 joined
[01:05] *** squashable6 joined
[01:05] *** bisectable6 joined
[01:05] *** nativecallable6 joined
[01:05] *** benchable6 joined
[01:05] *** quotable6 joined
[01:05] *** evalable6 joined
[01:19] *** codesections left
[01:59] *** raiph joined
[02:03] <raiph> Per my simplified comment in https://github.com/rakudo/rakudo/issues/3726#issuecomment-636248480:

[02:03] <raiph> I've golfed the issue to this, which has matched since 2014.01 at least:

[02:04] <raiph> r: say 'a' ~~ rule { .* a }

[02:04] <camelia> rakudo-jvm: OUTPUT: «Can't open perl script "/home/camelia/rakudo-j-inst/bin/eval-client.pl": No such file or directory␤»

[02:04] <camelia> ..rakudo-moar ee8363426: OUTPUT: «｢a｣␤»

[02:05] <raiph> As far as I can tell, in Rakudo, a significant space causes two alterations to a pattern:

[02:05] <raiph> 1. Inserts a <ws>.

[02:05] <raiph> 2. Switches (greedy) backtracking on for the preceding atom.

[02:06] <raiph> I think we need to decide if I'm right (or at least if it's something like what I describe) and if so, what to do about it.

[02:08] <raiph> I think a first step that would be helpful would be anyone doing either or both of the following:

[02:09] <raiph> 1. Find a counter example. (I've tried and failed to do so.)

[02:10] <raiph> 2. Make sense of the Rakudo code handling `:sigspace`. (I've tried and failed to do so.)

[02:10] <japhb> rules ratchet, they don't backtrack

[02:10] <raiph> That's what I thought for a decade.

[02:11] <raiph> Actually, of Raku as against Rakudo, more like nearly two decades.

[02:12] <raiph> japhb: Which is why this is a bit of a stunner.

[02:13] <raiph> `rule`s do turn on `:r`.

[02:13] <raiph> But in Rakudo significant spaces insert what I'll simplify as `!<ws>`, not merely `<ws>`.

[02:14] <raiph> Thus these are equivalent:

[02:14] <raiph> m: say 'a' ~~ regex { .* . }

[02:14] <camelia> rakudo-moar ee8363426: OUTPUT: «｢a｣␤»

[02:15] <raiph> m: say 'a' ~~ rule { .*!. }

[02:15] <camelia> rakudo-moar ee8363426: OUTPUT: «｢a｣␤»

[02:16] <raiph> say 'a' ~~ rule { .* . }

[02:16] <evalable6> raiph, rakudo-moar 4b69dd51e: OUTPUT: «｢a｣␤»

[02:17] <japhb> say 'a' ~~ rule { a* a }

[02:17] <evalable6> japhb, rakudo-moar 4b69dd51e: OUTPUT: «｢a｣␤»

[02:19] <japhb> Wish I could just invoke moritz at this point ...

[02:19] <raiph> I realize I misspoke when I wrote the above are equivalent.

[02:19] <raiph> m: say 'a' ~~ regex { .* . }

[02:19] <camelia> rakudo-moar ee8363426: OUTPUT: «｢a｣␤»

[02:19] <raiph> is of course the same as:

[02:20] <raiph> m: say 'a' ~~ rule { .*!<ws>.<ws>}

[02:20] <camelia> rakudo-moar ee8363426: OUTPUT: «｢a｣␤ ws => ｢｣␤ ws => ｢｣␤»

[02:20] <raiph> Er, shoot:

[02:20] <raiph> m: say 'a' ~~ rule { .*!<.ws>.<.ws>}

[02:20] <camelia> rakudo-moar ee8363426: OUTPUT: «｢a｣␤»

[02:21] <raiph> (No ! on the second atom because it's not quantified so no need / wouldn't be valid syntax)

[02:21] <raiph> But yeah, it really is amazing, but we need to face it down.

[02:22] <raiph> Damn. I've gotten the equivalence wrong *again*.

[02:22] <raiph> I'm tired.

[02:22] <raiph> But I have checked this out when not tired.

[02:22] <raiph> It'

[02:22] <raiph> It'

[02:22] <raiph> Gah!

[02:23] <raiph> It's been 3 years since I was first shocked by this.

[02:24] <raiph> It's 3am. I need to go to sleep. But please don't dismiss this.

[02:25] <raiph> jnthn agreed something was wrong. but we never pursued it.

[02:26] * japhb wonders if this is why our compiles are slow ...

[02:28] <raiph> Yes, I spent 3 years thinking about Larry's 2017 comments about the need to port STD's fates to Rakudo.

[02:28] <raiph> And then the next 3 years thinking about this bit too.

[02:30] <raiph> (Well, mulling them from time to time, then trying to research code etc, then not getting back to raising these issues.)

[02:32] <raiph> They're independent issues. But in combination they presumably amount to something like at least a 10X cost.

[02:34] <raiph> (10x in the sense that the code processing each character gets run on average 10X as much as it needs to be run.)

[02:35] <raiph> (Larry estimated that the fates system he prototyped in STD and began to port to Rakudo would save something like 5 to 6 times.)

[02:37] <raiph> (I wonder if the reason he got depressed was no matter how hard he tried, his port of his fates system insisted on backtracking...)

[02:39] <raiph> Maybe I misunderstand all that kind of stuff.

[02:40] <raiph> The bit I know is wrong is that rules are switching backtracking on for quantified atoms followed by a significant space.

[02:40] <raiph> As far as I can tell it's ALL such atoms.

[02:40] <raiph> Goodnight.

[02:41] *** raiph left
[02:43] *** raiph joined
[02:43] <raiph> Darn, forgot to say the most important thing.

[02:44] <raiph> This ultimately isn't about speed, even though that would be nice.

[02:47] <raiph> It's about the (non) matching impact if for 6.e we make significant spaces only insert `<ws>` and *not* make preceding atoms backtrack.

[02:48] *** raiph left
[04:53] *** nativecallable6 left
[04:53] *** coverable6 left
[04:53] *** tellable6 left
[04:53] *** linkable6 left
[04:53] *** quotable6 left
[04:53] *** greppable6 left
[04:53] *** bloatable6 left
[04:53] *** notable6 left
[04:53] *** squashable6 left
[04:53] *** reportable6 left
[04:53] *** benchable6 left
[04:53] *** bisectable6 left
[04:53] *** shareable6 left
[04:53] *** committable6 left
[04:53] *** unicodable6 left
[04:53] *** statisfiable6 left
[04:53] *** sourceable6 left
[04:53] *** releasable6 left
[04:53] *** evalable6 left
[04:54] *** tellable6 joined
[04:54] *** bloatable6 joined
[04:54] *** committable6 joined
[04:54] *** nativecallable6 joined
[04:54] *** statisfiable6 joined
[04:54] *** sourceable6 joined
[04:54] *** unicodable6 joined
[04:55] *** coverable6 joined
[04:55] *** greppable6 joined
[04:55] *** notable6 joined
[04:55] *** benchable6 joined
[04:55] *** evalable6 joined
[04:55] *** shareable6 joined
[04:55] *** bisectable6 joined
[04:56] *** reportable6 joined
[04:56] *** quotable6 joined
[04:56] *** squashable6 joined
[04:56] *** linkable6 joined
[04:56] *** releasable6 joined
[05:56] *** committable6 left
[05:56] *** tellable6 left
[05:56] *** notable6 left
[05:56] *** coverable6 left
[05:56] *** greppable6 left
[05:56] *** reportable6 left
[05:56] *** bloatable6 left
[05:56] *** benchable6 left
[05:56] *** releasable6 left
[05:56] *** unicodable6 left
[05:56] *** statisfiable6 left
[05:56] *** sourceable6 left
[05:56] *** shareable6 left
[05:56] *** nativecallable6 left
[05:56] *** quotable6 left
[05:56] *** evalable6 left
[05:56] *** bisectable6 left
[05:56] *** squashable6 left
[05:56] *** linkable6 left
[05:57] *** quotable6 joined
[05:57] *** evalable6 joined
[05:57] *** squashable6 joined
[05:57] *** unicodable6 joined
[05:57] *** bisectable6 joined
[05:57] *** greppable6 joined
[05:57] *** committable6 joined
[05:57] *** coverable6 joined
[05:57] *** bloatable6 joined
[05:58] *** benchable6 joined
[05:58] *** notable6 joined
[05:58] *** sourceable6 joined
[05:58] *** shareable6 joined
[05:58] *** tellable6 joined
[05:58] *** nativecallable6 joined
[05:59] *** linkable6 joined
[05:59] *** statisfiable6 joined
[05:59] *** releasable6 joined
[05:59] *** reportable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:20] *** committable6 left
[07:20] *** sourceable6 left
[07:20] *** reportable6 left
[07:20] *** unicodable6 left
[07:20] *** coverable6 left
[07:20] *** quotable6 left
[07:20] *** squashable6 left
[07:20] *** bloatable6 left
[07:20] *** benchable6 left
[07:20] *** notable6 left
[07:20] *** shareable6 left
[07:20] *** linkable6 left
[07:20] *** statisfiable6 left
[07:20] *** evalable6 left
[07:20] *** bisectable6 left
[07:20] *** nativecallable6 left
[07:20] *** releasable6 left
[07:20] *** greppable6 left
[07:20] *** tellable6 left
[07:20] *** sourceable6 joined
[07:20] *** greppable6 joined
[07:20] *** coverable6 joined
[07:20] *** shareable6 joined
[07:20] *** nativecallable6 joined
[07:21] *** quotable6 joined
[07:21] *** tellable6 joined
[07:21] *** linkable6 joined
[07:21] *** statisfiable6 joined
[07:21] *** evalable6 joined
[07:21] *** unicodable6 joined
[07:21] *** notable6 joined
[07:21] *** committable6 joined
[07:21] *** benchable6 joined
[07:22] *** releasable6 joined
[07:22] *** bisectable6 joined
[07:23] *** squashable6 joined
[07:23] *** bloatable6 joined
[07:23] *** reportable6 joined
[07:54] <patrickb> jdv: The precompiled release archives are now also uploaded.

[09:17] <Geth> ¦ Slang-Roman/main: 7ce3abb7a2 | (Elizabeth Mattijsen)++ | 3 files

[09:17] <Geth> ¦ Slang-Roman/main: 0.5

[09:17] <Geth> ¦ Slang-Roman/main: review: https://github.com/raku-community-modules/Slang-Roman/commit/7ce3abb7a2

[09:22] <lizmat> nine ab5tract do we have the equivalent of a bare WVal in RakuAST?

[09:26] <ab5tract> not that I've encountered

[10:26] *** linkable6 left
[10:26] *** evalable6 left
[10:27] *** linkable6 joined
[10:28] *** evalable6 joined
[10:34] <ab5tract> lizmat: one more spectest down :D

[10:35] <ab5tract> m: Q| sub infix:<quack>($x,$y) { "$x|$y" }; dd ((* quack *) quack (* quack (* quack *))).(2, 3, 5, 6, 7) | .AST.EVAL

[10:35] <camelia> rakudo-moar ee8363426: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> Q| sub infix:<quack>($x,$y) { "$x|⏏$y" }; dd ((* quack *) quack (* quack (*␤    expecting any of:␤        infix␤        infix stopper␤        s…»

[10:35] <lizmat> whee!

[10:36] <ab5tract> weird, I never saw that error before...

[10:37] <ab5tract> anyway, nested whatever-curried infixes are fixed. that was a bit of a mind bender, but it also helped me cleanup the ApplyPostfix code a lot

[10:37] <lizmat> hehe... so that PR is ready now?

[10:37] <ab5tract> yup :)

[10:37] <lizmat> kewl

[10:37] <lizmat> 5385 right ?

[10:37] <ab5tract> precis

[10:38] <lizmat> squash or not ?

[10:38] <ab5tract> prefer not, since they are pretty different fixes

[10:38] <lizmat> okidoki

[10:38] <ab5tract> s/different/distinct/

[10:40] <lizmat> hmmm.. never saw this option before: rebase and merge...  that looks like the one you want, right ?

[10:40] <ab5tract> I believe so, yeah

[10:41] <Geth> ¦ rakudo/main: 0307ea9aae | ab5tract++ (committed by Elizabeth Mattijsen) | src/Raku/ast/expressions.rakumod

[10:41] <Geth> ¦ rakudo/main: RakuAST: Fix topic over-simplification in curried ApplyPostfix

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: Fixes code like the following:

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: ```

[10:41] <Geth> ¦ rakudo/main: $_ = 42; (Int).map: *.new: $_

[10:41] <Geth> ¦ rakudo/main: ```

[10:41] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[10:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0307ea9aae

[10:41] <Geth> ¦ rakudo/main: dfaa8c2895 | ab5tract++ (committed by Elizabeth Mattijsen) | src/Raku/ast/expressions.rakumod

[10:41] <Geth> ¦ rakudo/main: RakuAST: Fix nested infix WhateverCodes

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: This enables the following:

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: ```

[10:41] <Geth> ¦ rakudo/main: sub infix:<quack>($x,$y) { "$x|$y" };

[10:41] <Geth> ¦ rakudo/main: say ((* quack *) quack (* quack (* quack *))).(2, 3, 4, 5, 6)

[10:41] <Geth> ¦ rakudo/main: ```

[10:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dfaa8c2895

[10:49] <ab5tract> part of me wants to keep hammering away at * until I can get S02-types/whatever.t passing

[10:50] <ab5tract> but another part of me fears that in this way lays madness

[10:51] <ab5tract> what's neat about these * patches is that the QAST they generate is quite distinct from what the old compiler does

[10:51] <ab5tract> but it still works fine :)

[10:52] <ab5tract> maybe "quite distinct" is an overstatement, but distinct nonetheless

[10:57] *** codesections joined
[10:58] <ab5tract> btw lizmat I didn't see your comment on https://github.com/rakudo/rakudo/pull/5373

[10:59] <ab5tract> it is ready :)

[10:59] <Geth> ¦ rakudo/main: a6ec8dfe49 | ab5tract++ (committed by Elizabeth Mattijsen) | src/Raku/ast/type.rakumod

[10:59] <Geth> ¦ rakudo/main: RakuAST: Treat QuotedString with literal elements as compile-time

[10:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a6ec8dfe49

[10:59] <Geth> ¦ rakudo/main: 05ba0ef082 | ab5tract++ (committed by Elizabeth Mattijsen) | src/Raku/Grammar.nqp

[10:59] <Geth> ¦ rakudo/main: RakuAST: Make parameterized roles with lexicals compile

[10:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/05ba0ef082

[11:06] <lizmat> 954   +1   :-)

[11:10] <ab5tract> don't forget to close https://github.com/rakudo/rakudo/issues/5343

[11:14] <lizmat> done, thanks for the nudge

[11:47] <Geth> ¦ rakudo/main: 89755eb02f | (Elizabeth Mattijsen)++ | 2 files

[11:47] <Geth> ¦ rakudo/main: RakuAST: Introduce RakuAST::Constant base class

[11:47] <Geth> ¦ rakudo/main: 

[11:47] <Geth> ¦ rakudo/main: This class intended to be used by slangs / macros that want to

[11:47] <Geth> ¦ rakudo/main: codegen a constant value *and* be in control of how the value

[11:47] <Geth> ¦ rakudo/main: deparses.  For instance for Slang::Roman:

[11:47] <Geth> ¦ rakudo/main: 

[11:47] <Geth> ¦ rakudo/main:     class RakuAST::RomanLiteral is RakuAST::Constant {

[11:47] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[11:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/89755eb02f

[11:48] <lizmat> afk for a few hours&

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[13:16] <Geth> ¦ File-Find/main: ec6ebba449 | (Tom Browder)++ | 5 files

[13:16] <Geth> ¦ File-Find/main: Convert to three separate os workflows and badges

[13:16] <Geth> ¦ File-Find/main: review: https://github.com/raku-community-modules/File-Find/commit/ec6ebba449

[13:16] <Geth> ¦ File-Find/main: ef35046417 | (Márton Polgár)++ (committed using GitHub Web editor) | .github/workflows/windows-spec.yml

[13:16] <Geth> ¦ File-Find/main: don't hardcode the files to test on windows either

[13:16] <Geth> ¦ File-Find/main: 

[13:16] <Geth> ¦ File-Find/main: Following ugexe's suggestions from earlier and doing some research of zef.

[13:16] <Geth> ¦ File-Find/main: review: https://github.com/raku-community-modules/File-Find/commit/ef35046417

[13:16] <Geth> ¦ File-Find/main: fb1adf6609 | (Márton Polgár)++ (committed using GitHub Web editor) | 5 files

[13:16] <Geth> ¦ File-Find/main: Merge pull request #44 from tbrowder/3os

[13:16] <Geth> ¦ File-Find/main: 

[13:16] <Geth> ¦ File-Find/main: Convert to three separate os workflows and badges

[13:16] <Geth> ¦ File-Find/main: review: https://github.com/raku-community-modules/File-Find/commit/fb1adf6609

[13:41] <[Coke]> good day, folks.

[14:05] <jdv> patrickb: cool

[14:25] *** linkable6 left
[14:25] *** evalable6 left
[14:26] *** linkable6 joined
[14:26] *** evalable6 joined
[14:46] <Geth> ¦ Slang-Roman/main: 55287c7efe | (Elizabeth Mattijsen)++ | lib/Slang/Roman.rakumod

[14:46] <Geth> ¦ Slang-Roman/main: Use new RakuAST::Constant class

[14:46] <Geth> ¦ Slang-Roman/main: 

[14:46] <Geth> ¦ Slang-Roman/main: This should probably wait for release until 2023.10

[14:46] <Geth> ¦ Slang-Roman/main: review: https://github.com/raku-community-modules/Slang-Roman/commit/55287c7efe

[14:50] <Geth> ¦ Slang-Roman/main: ec65d26445 | (Elizabeth Mattijsen)++ | lib/Slang/Roman.rakumod

[14:50] <Geth> ¦ Slang-Roman/main: Revert "Use new RakuAST::Constant class"

[14:50] <Geth> ¦ Slang-Roman/main: 

[14:50] <Geth> ¦ Slang-Roman/main: This reverts commit 55287c7efe4d2c40fb6e2c967ff50a86edfe64f5.

[14:50] <Geth> ¦ Slang-Roman/main: 

[14:50] <Geth> ¦ Slang-Roman/main: Waaaaayyy too soon!   Fixes CI

[14:50] <Geth> ¦ Slang-Roman/main: review: https://github.com/raku-community-modules/Slang-Roman/commit/ec65d26445

[15:53] <Geth> ¦ rakudo: ab5tract++ created pull request #5389: CircleCI Commit

[15:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5389

[15:56] <ab5tract> that was a mistake

[16:06] *** evalable6 left
[16:06] *** linkable6 left
[16:06] *** linkable6 joined
[16:06] *** evalable6 joined
[17:13] <ab5tract> m: Q| * * * + * | .AST.say

[17:13] <camelia> rakudo-moar 89755eb02: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::ApplyInfix.new(␤      left  => RakuAST::ApplyInfix.new(␤        left  => RakuAST::Var::Lexical.new("*"),␤        infix => RakuAST::Infix.new("*"),…»

[17:34] *** evalable6 left
[17:34] *** linkable6 left
[17:36] *** evalable6 joined
[17:36] *** linkable6 joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:22] <Geth> ¦ rakudo/lizmat-otherwise: 5650b70105 | (Elizabeth Mattijsen)++ | 3 files

[18:22] <Geth> ¦ rakudo/lizmat-otherwise: RakuAST: implement for { } otherwise { }

[18:22] <Geth> ¦ rakudo/lizmat-otherwise: 

[18:22] <Geth> ¦ rakudo/lizmat-otherwise: I was looking at what would need to be done to port the Slang::Otherwise

[18:22] <Geth> ¦ rakudo/lizmat-otherwise: module to work with RakuAST, and realized it was probably less work to

[18:22] <Geth> ¦ rakudo/lizmat-otherwise: just implement the functionality in the Raku grammar.

[18:22] <Geth> ¦ rakudo/lizmat-otherwise: 

[18:22] <Geth> ¦ rakudo/lizmat-otherwise: This does:

[18:22] <Geth> ¦ rakudo/lizmat-otherwise: <…commit message has 12 more lines…>

[18:22] <Geth> ¦ rakudo/lizmat-otherwise: review: https://github.com/rakudo/rakudo/commit/5650b70105

[18:23] <Geth> ¦ rakudo: lizmat++ created pull request #5390: RakuAST: implement `for { } otherwise { }`

[18:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5390

[19:33] *** squashable6 left
[19:35] *** squashable6 joined
[20:59] *** codesections1 joined
[21:01] <discord-raku-bot> <nemokosch> to introduce language syntax in a mere PR?

[21:02] *** codesections left
[21:02] *** codesections1 is now known as codesections

[21:02] <discord-raku-bot> <nemokosch> possibly even retrospectively?

[21:10] *** codesections left
[21:11] *** codesections joined
[21:21] *** vrurg_ joined
[21:24] *** vrurg left
[21:44] <lizmat> that's why I put it in a PR

[21:52] <discord-raku-bot> <nemokosch> It seems like a rather defective workflow, but more on that in the comment

[22:07] *** raiph joined
[22:50] *** codesections left
[22:51] *** codesections1 joined
[22:57] *** codesections1 left
[22:58] *** codesections joined
[23:54] *** hythm joined
