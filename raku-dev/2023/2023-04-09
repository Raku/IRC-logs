[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[02:22] *** epony joined
[02:39] *** MasterDuke left
[02:59] *** MasterDuke joined
[03:10] *** MasterDuke left
[03:56] *** MasterDuke joined
[04:01] <MasterDuke> lizmat: might be deparsing related, but check out `RAKUDO_RAKUAST=1 raku --target=ast -e 'first()'` vs `RAKUDO_RAKUAST=1 r --target=ast -e 'first'`. the version with '()' doesn't show anything for the 'Name' field of the 'Call::Name'

[05:07] *** squashable6 left
[05:07] *** unicodable6 left
[05:07] *** linkable6 left
[05:07] *** releasable6 left
[05:07] *** statisfiable6 left
[05:07] *** quotable6 left
[05:07] *** nativecallable6 left
[05:07] *** evalable6 left
[05:07] *** coverable6 left
[05:07] *** statisfiable6 joined
[05:08] *** evalable6 joined
[05:09] *** squashable6 joined
[05:09] *** quotable6 joined
[05:09] *** coverable6 joined
[05:09] *** nativecallable6 joined
[05:09] *** unicodable6 joined
[05:09] *** releasable6 joined
[05:10] *** linkable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:54] <nine> MasterDuke: --target=ast does not do any deparse. It's .dump on the AST nodes. The missing display of the node's source code probably means that it's origin isn't set properly. That should contain the information of the Match object.

[08:50] *** sena_kun joined
[10:03] *** epony left
[11:39] *** reportable6 left
[11:39] *** nativecallable6 left
[11:39] *** committable6 left
[11:39] *** linkable6 left
[11:39] *** greppable6 left
[11:39] *** sourceable6 left
[11:39] *** bisectable6 left
[11:39] *** quotable6 left
[11:39] *** bloatable6 left
[11:39] *** shareable6 left
[11:39] *** tellable6 left
[11:39] *** benchable6 left
[11:39] *** notable6 left
[11:39] *** squashable6 left
[11:39] *** unicodable6 left
[11:39] *** releasable6 left
[11:40] *** notable6 joined
[11:40] *** unicodable6 joined
[11:40] *** benchable6 joined
[11:40] *** linkable6 joined
[11:40] *** tellable6 joined
[11:40] *** nativecallable6 joined
[11:41] *** bloatable6 joined
[11:41] *** bisectable6 joined
[11:41] *** squashable6 joined
[11:41] *** shareable6 joined
[11:41] *** sourceable6 joined
[11:42] *** quotable6 joined
[11:42] *** committable6 joined
[11:42] *** releasable6 joined
[11:42] *** greppable6 joined
[11:42] *** reportable6 joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:30] *** codesections left
[12:30] *** codesections1 joined
[12:32] *** codesections1 is now known as codesections

[13:40] *** committable6 left
[13:40] *** benchable6 left
[13:40] *** greppable6 left
[13:40] *** releasable6 left
[13:40] *** coverable6 left
[13:40] *** reportable6 left
[13:41] *** committable6 joined
[13:42] *** benchable6 joined
[13:42] *** releasable6 joined
[13:42] *** reportable6 joined
[13:43] *** greppable6 joined
[13:43] *** coverable6 joined
[13:54] *** epony joined
[14:38] <Geth> ¦ rakudo/main: ad5e83059b | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[14:38] <Geth> ¦ rakudo/main: RakuAST: fix BEGIN time assignment to our scoped variables

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: Need to resolve to a container to assign into.

[14:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ad5e83059b

[14:38] <Geth> ¦ rakudo/main: dc8b66ae94 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[14:38] <Geth> ¦ rakudo/main: RakuAST: fix exporting of our scoped variables

[14:38] <Geth> ¦ rakudo/main: 

[14:38] <Geth> ¦ rakudo/main: Even for our scoped variables we need to create a container up front and

[14:38] <Geth> ¦ rakudo/main: bind it to the Stash, so we can apply traits and it actually knows its

[14:38] <Geth> ¦ rakudo/main: own name.

[14:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dc8b66ae94

[15:12] *** epony left
[15:19] *** epony joined
[15:41] *** epony left
[15:54] <Geth> ¦ rakudo/main: 536b5eb706 | (Stefan Seifert)++ | 2 files

[15:54] <Geth> ¦ rakudo/main: RakuAST: support &?BLOCK variable

[15:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/536b5eb706

[15:55] <nine> This ^^^ is probably one of the most straight forward implementations... *hint*hint* there's also &?ROUTINE that needs this treatment

[16:05] <nine> Another piece of unintentionally funny (to me) code: if $!else { if $!last-was-with { $!else.... } else { $!else.... } }

[16:50] *** evalable6 left
[16:50] *** linkable6 left
[16:51] *** evalable6 joined
[16:53] *** linkable6 joined
[17:13] <Geth> ¦ rakudo/main: e68322dbcb | (Stefan Seifert)++ | 2 files

[17:13] <Geth> ¦ rakudo/main: RakuAST: have conditional/loop blocks alias $_

[17:13] <Geth> ¦ rakudo/main: 

[17:13] <Geth> ¦ rakudo/main: $_ set within a block should not affect $_ outside that block. This

[17:13] <Geth> ¦ rakudo/main: already worked for pure code blocks, but not for those that are part of

[17:13] <Geth> ¦ rakudo/main: a conditional or loop statement.

[17:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e68322dbcb

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:33] <nine> Indeed t/spec/S02-magicals/subname.t and t/spec/S02-magicals/sub.rakudo.moar probably just need &?ROUTINE

[18:34] <nine> t/spec/S02-names-vars/contextual.t needs a few CHECK time additions to throw appropriate errors

[18:56] *** coleman joined
[20:48] *** squashable6 left
[20:50] *** squashable6 joined
[21:15] *** sena_kun left
[23:57] *** epony joined
