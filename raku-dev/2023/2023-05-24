[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:13] *** kurahaupo joined
[01:13] *** nativecallable6 left
[01:13] *** bloatable6 left
[01:13] *** statisfiable6 left
[01:13] *** committable6 left
[01:13] *** sourceable6 left
[01:13] *** notable6 left
[01:13] *** squashable6 left
[01:13] *** reportable6 left
[01:13] *** benchable6 left
[01:13] *** shareable6 left
[01:13] *** releasable6 left
[01:13] *** tellable6 left
[01:13] *** linkable6 left
[01:13] *** evalable6 left
[01:13] *** tellable6 joined
[01:13] *** benchable6 joined
[01:13] *** kurahaupo left
[01:13] *** nativecallable6 joined
[01:14] *** linkable6 joined
[01:14] *** statisfiable6 joined
[01:14] *** notable6 joined
[01:14] *** kurahaupo joined
[01:14] *** reportable6 joined
[01:14] *** committable6 joined
[01:15] *** bloatable6 joined
[01:15] *** releasable6 joined
[01:16] *** shareable6 joined
[01:16] *** sourceable6 joined
[01:16] *** evalable6 joined
[01:16] *** squashable6 joined
[02:31] *** japhb left
[02:46] *** japhb joined
[03:11] *** kurahaupo left
[04:17] *** nativecallable6 left
[04:17] *** quotable6 left
[04:17] *** unicodable6 left
[04:17] *** benchable6 left
[04:17] *** linkable6 left
[04:17] *** committable6 left
[04:17] *** releasable6 left
[04:17] *** sourceable6 left
[04:17] *** reportable6 left
[04:17] *** evalable6 left
[04:17] *** tellable6 left
[04:17] *** squashable6 left
[04:17] *** bloatable6 left
[04:17] *** shareable6 left
[04:17] *** greppable6 left
[04:17] *** bisectable6 left
[04:17] *** coverable6 left
[04:17] *** statisfiable6 left
[04:17] *** notable6 left
[04:17] *** bloatable6 joined
[04:17] *** notable6 joined
[04:17] *** coverable6 joined
[04:18] *** statisfiable6 joined
[04:18] *** squashable6 joined
[04:18] *** tellable6 joined
[04:18] *** sourceable6 joined
[04:18] *** shareable6 joined
[04:18] *** nativecallable6 joined
[04:19] *** greppable6 joined
[04:19] *** unicodable6 joined
[04:19] *** quotable6 joined
[04:19] *** bisectable6 joined
[04:19] *** linkable6 joined
[04:19] *** evalable6 joined
[04:20] *** releasable6 joined
[04:20] *** committable6 joined
[04:20] *** benchable6 joined
[04:20] *** reportable6 joined
[05:58] *** nebuchadnezzar joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[07:21] *** sena_kun joined
[09:56] <Geth> ¦ rakudo/main: a46987933f | (Elizabeth Mattijsen)++ | 3 files

[09:56] <Geth> ¦ rakudo/main: RakuAST: make =for foo and =foo grab trailing whitespace

[09:56] <Geth> ¦ rakudo/main: 

[09:56] <Geth> ¦ rakudo/main: Sometimes extra trailing whitespace can be significant for rendering

[09:56] <Geth> ¦ rakudo/main: rakudoc.  But =for foo  and  =foo  were only taking the first newline.

[09:56] <Geth> ¦ rakudo/main: This is now fixed, with necessary changes to legacy podification and

[09:56] <Geth> ¦ rakudo/main: the POC text rendering.

[09:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a46987933f

[10:16] *** evalable6 left
[10:16] *** linkable6 left
[10:18] *** linkable6 joined
[10:18] *** evalable6 joined
[10:25] <Geth> ¦ rakudo/main: af54c0b2ea | (Elizabeth Mattijsen)++ | 2 files

[10:25] <Geth> ¦ rakudo/main: RakuAST: make =doc block deparsing closer to the bone

[10:25] <Geth> ¦ rakudo/main: 

[10:25] <Geth> ¦ rakudo/main: Now assumes the contents will always end with a newline, rather than

[10:25] <Geth> ¦ rakudo/main: inserting newlines itself.  Also removes the extra leading newline

[10:25] <Geth> ¦ rakudo/main: which implies that any leading newlines in the source code before

[10:25] <Geth> ¦ rakudo/main: a rakudoc block will disappear in deparsing as it is not significant.

[10:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/af54c0b2ea

[10:38] *** thundergnat joined
[10:38] *** thundergnat left
[10:42] *** thundergnat joined
[10:45] *** thundergnat left
[10:50] <Geth> ¦ rakudo/main: 3139b6c05f | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core.c/Any.pm6

[10:50] <Geth> ¦ rakudo/main: Handle uncontainerized type objects as invocant to AT-POS better

[10:50] <Geth> ¦ rakudo/main: 

[10:50] <Geth> ¦ rakudo/main: If the invocant is a container, nothing changes.

[10:50] <Geth> ¦ rakudo/main: If the invocant is a type object, then look at the index.

[10:50] <Geth> ¦ rakudo/main: If the index is greater than 0, then Failure.

[10:50] <Geth> ¦ rakudo/main: Else consider the type object as a single element list, so return

[10:50] <Geth> ¦ rakudo/main: the invocant.

[10:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3139b6c05f

[11:37] *** squashable6 left
[11:39] *** squashable6 joined
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:57] <Geth> ¦ rakudo/main: 149dd88014 | (Elizabeth Mattijsen)++ | 4 files

[12:57] <Geth> ¦ rakudo/main: Attempt #2 at introducing Iterator.is-monotonically-increasing

[12:57] <Geth> ¦ rakudo/main: 

[12:57] <Geth> ¦ rakudo/main: - fixed stupid "already in use/consumed" error in Any.sort which

[12:57] <Geth> ¦ rakudo/main:   would happen if the source iterator was *not* monotonically

[12:57] <Geth> ¦ rakudo/main:   increasing (which is in like 99% of the cases)

[12:57] <Geth> ¦ rakudo/main: - made sure iterators that wrap other iterators, pass on the

[12:57] <Geth> ¦ rakudo/main:   is-monotonically-increasing information

[12:57] <Geth> ¦ rakudo/main: - made sure that .sort with &cmp produces an iterator that

[12:57] <Geth> ¦ rakudo/main:   has the "is-monotonically-increasing" flag set

[12:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/149dd88014

[12:58] <lizmat> Nemokosch ^^

[13:00] *** evalable6 left
[13:03] *** evalable6 joined
[13:28] *** jgaz left
[13:28] *** jgaz joined
[14:21] *** kurahaupo joined
[14:29] <discord-raku-bot> <Nemokosch> sorry what was the goal of this again?

[14:31] <lizmat> m: say (1..*).sort[^10)

[14:31] <camelia> rakudo-moar 01e822248: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in subscript; couldn't find final ']' (corresponding starter was at line 1)␤at <tmp>:1␤------> say (1..*).sort[^10⏏)␤    expecting any of:␤        statement e…»

[14:31] <lizmat> m: say (1..*).sort[^10]

[14:31] <camelia> rakudo-moar 01e822248: OUTPUT: «Cannot sort a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[14:31] <lizmat> hmm

[14:32] <lizmat> camelia stuck?

[14:32] <discord-raku-bot> <Nemokosch> oh right

[14:32] <lizmat> anyways, to make that work, because we know that 1..* is already sorted, so the .sort can be a. not bomb, and b. be a no-op

[14:32] <discord-raku-bot> <Nemokosch> the "we know more about sorting a range than a random infinite sequence" topic

[16:09] * lizmat published a blog post again: https://dev.to/lizmat/rakuast-for-early-adopters-576n

[17:06] *** ab5tract joined
[17:42] *** ab5tract left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[21:29] *** sena_kun left
