[01:57] *** dogbert17 left
[01:57] *** dogbert17 joined
[02:42] *** hythm joined
[04:26] *** hythm left
[04:47] *** japhb left
[04:51] *** japhb joined
[06:26] *** dogbert11 joined
[06:29] *** dogbert17 left
[08:23] *** finanalyst joined
[08:45] <discord-raku-bot> <nemokosch> bisectable: say(Duration(10) / 2)

[08:45] <bisectable6> nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight

[08:45] <bisectable6> nemokosch, Output on all releases: https://gist.github.com/dca647db4a3e95b146a9ba02fd9ca169

[08:45] <bisectable6> nemokosch, Bisecting by exit code (old=2020.11 new=2020.12). Old exit code: 1

[08:46] <bisectable6> nemokosch, bisect log: https://gist.github.com/d190c09d1aa1e954be95195e744cebb5

[08:46] <bisectable6> nemokosch, (2020-12-08) https://github.com/rakudo/rakudo/commit/79d2aeab83f15de485a5e41a9c576a0f7bdc46f6

[08:46] <bisectable6> nemokosch, Bisecting by output (old=2016.04 new=2016.05) because on both starting points the exit code is 1

[08:46] <bisectable6> nemokosch, bisect log: https://gist.github.com/2aa7821138d5861d0d76907ede01f83a

[08:46] <bisectable6> nemokosch, (2016-05-12) https://github.com/rakudo/rakudo/commit/33ef5a95459b95bf7256391a053550d4efe221de

[08:47] <bisectable6> nemokosch, Output on all releases and bisected commits: https://gist.github.com/97f8cd7862fbbace0071f1f44161c154

[08:47] <discord-raku-bot> <nemokosch> Okay but this was more or less sensible behavior...

[08:47] <discord-raku-bot> <nemokosch> bisectable: 10.Duration / 2 andthen .WHAT.say

[08:47] <bisectable6> nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight

[08:48] <bisectable6> nemokosch, Output on all releases: https://gist.github.com/3496cd012a6bfc905ab24da1089d37c1

[08:48] <bisectable6> nemokosch, Bisecting by output (old=2016.09 new=2016.10) because on both starting points the exit code is 1

[08:48] <bisectable6> nemokosch, bisect log: https://gist.github.com/e3661309982351737b113e704ccb72f5

[08:48] <bisectable6> nemokosch, Output on all releases and bisected commits: https://gist.github.com/c8d089382f0958c430ac29076e3de5cb

[09:03] <Geth> ¦ WebService-GitHub/main: 12ef2f2afa | (Patrick Böker)++ | dev-scripts/static/lib/WebService/GitHub/OAuth.rakumod

[09:03] <Geth> ¦ WebService-GitHub/main: Fix OAuth token retrieval

[09:03] <Geth> ¦ WebService-GitHub/main: review: https://github.com/raku-community-modules/WebService-GitHub/commit/12ef2f2afa

[09:20] *** finanalyst left
[09:24] <Geth> ¦ WebService-GitHub/main: 0b692be23b | (Patrick Böker)++ | dev-scripts/static/Changes

[09:24] <Geth> ¦ WebService-GitHub/main: Add a Changes file

[09:24] <Geth> ¦ WebService-GitHub/main: review: https://github.com/raku-community-modules/WebService-GitHub/commit/0b692be23b

[09:24] <Geth> ¦ WebService-GitHub/main: 223dbd9d7f | (Patrick Böker)++ | dev-scripts/generate-module

[09:24] <Geth> ¦ WebService-GitHub/main: Version 1.0.0

[09:24] <Geth> ¦ WebService-GitHub/main: review: https://github.com/raku-community-modules/WebService-GitHub/commit/223dbd9d7f

[09:56] *** sena_kun joined
[10:06] <Geth> ¦ WebService-GitHub/main: bd0362f707 | (Patrick Böker)++ | 21 files

[10:06] <Geth> ¦ WebService-GitHub/main: Fix up tests and move tests depending on internet access to xt/

[10:06] <Geth> ¦ WebService-GitHub/main: review: https://github.com/raku-community-modules/WebService-GitHub/commit/bd0362f707

[10:06] <Geth> ¦ WebService-GitHub/main: 091b32995e | (Patrick Böker)++ | 2 files

[10:06] <Geth> ¦ WebService-GitHub/main: Version 1.0.1

[10:06] <Geth> ¦ WebService-GitHub/main: review: https://github.com/raku-community-modules/WebService-GitHub/commit/091b32995e

[10:24] *** sena_kun left
[11:12] <lizmat> vrurg nine is there a way to easily check in the core setting whether we're running under RAKUDO_RAKUAST=1 without needing to do a %*ENV lookup ?

[12:07] <Geth> ¦ rakudo/main: a9da976e88 | (Elizabeth Mattijsen)++ | src/core.c/Raku.rakumod

[12:07] <Geth> ¦ rakudo/main: Add Raku.legacy implementation-detail class method

[12:07] <Geth> ¦ rakudo/main: 

[12:07] <Geth> ¦ rakudo/main: To allow easy checks in the core whether it is running under the

[12:07] <Geth> ¦ rakudo/main: new Raku grammar or not.

[12:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a9da976e88

[12:33] <ugexe> Are we confident there will never be anything close sidered “legacy” in the future?

[12:34] <ugexe> I guess it’s an implementation detail so it doesn’t really matter 

[12:34] <lizmat> wrt to core, it can probably be removed when RakuAST is default

[12:35] <lizmat> however, some current module developers might want to use it

[12:35] <lizmat> to basically say: sorry, this module needs RakuAST, so it won't work

[12:36] <lizmat> so I'm in two minds whether it should be an implementation detail or not

[12:36] <ugexe> If module authors want to use it then it needs a new name

[12:37] <lizmat> Raku.legacy not clear enough ?

[12:37] <ugexe> It is general. What you are applying to is not. It’s super specific 

[12:38] <lizmat> Raku.running-with-legacy-grammar ?

[12:38] <ugexe> It hard couples legacy to mean a specific thing that shouldn’t change 

[12:38] <ugexe> even that isn’t great

[12:39] <lizmat> Raku.running-with-perl6-grammar ?

[12:40] <ugexe> The method should probably reference the feature in some way 

[12:40] <ugexe> and even then it seems like what is really wanted is a thought out feature detection mechanism or api 

[12:45] <lizmat> ok, then I'll leave it as an implementation-detail method for now

[13:22] <Geth> ¦ rakudo/lizmat-rat-raku: c7fa23409d | (Elizabeth Mattijsen)++ | src/core.c/Rat.rakumod

[13:22] <Geth> ¦ rakudo/lizmat-rat-raku: RakuAST: change rakufication of Rats

[13:22] <Geth> ¦ rakudo/lizmat-rat-raku: 

[13:22] <Geth> ¦ rakudo/lizmat-rat-raku: If the Rat cannot be displayed using a decimal notation (such as

[13:22] <Geth> ¦ rakudo/lizmat-rat-raku: <22/3>), then rakufy as a vulgar: 7¹/₃ instead of <22/3> if the

[13:22] <Geth> ¦ rakudo/lizmat-rat-raku: RakuAST grammar is being used.  The RakuAST grammar allows vulgars

[13:22] <Geth> ¦ rakudo/lizmat-rat-raku: such as  7¹/₃ to represent <22/3>, so roundtripping is ensured.

[13:22] <Geth> ¦ rakudo/lizmat-rat-raku: review: https://github.com/rakudo/rakudo/commit/c7fa23409d

[13:22] <Geth> ¦ rakudo: lizmat++ created pull request #5466: RakuAST: change rakufication of Rats

[13:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5466

[13:28] <ugexe> https://github.com/ugexe/zef/blob/2da47937ac8759685c9b8f217da870a14f15b38a/lib/Zef/Repository/Ecosystems.rakumod#L231-L253

[13:28] <ugexe> Use of uninitialized value @short-names-to-index of type Any in string context.

[13:28] <ugexe> Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.

[13:28] <ugexe>   in block  at /home/patrickb/.rakubrew/versions/moar-2023.10/share/perl6/site/sources/7B8C4765AC0B50F3E076BE3378DD767C55081947 (Zef::Repository::Ecosystems) line 250

[13:28] <ugexe> how could the code linked above generate that warning?

[13:28] <lizmat> *.contains ?

[13:28] <ugexe> It is in a bug report I can't reproduce, and looking at that code I'm not sure where @short-names-to-index is used in string context

[13:29] <ugexe>  append @short-names-to-index, $dist.meta<provides>.keys.first(*.contains('<'))

[13:29] <ugexe> it isn't called on short-names-to-index

[13:29] <lizmat> .unique is probably stringifying ?

[13:30] <lizmat> or maybe the .WHICH on the values is stringifying ?

[13:30] <ugexe> m: my @a; say @a.unique

[13:30] <camelia> rakudo-moar a9da976e8: OUTPUT: «()␤»

[13:30] <ugexe> even if that was the case, it seems fine there

[13:31] <lizmat> %!short-name-lookup{$_} ?

[13:31] <lizmat> I assume its not an object hash ?

[13:32] <ugexe> no, it contains strings (and that is all I'm putting into it afaict)

[13:32] <ugexe> i.e. %!short-name-lookup<Text::Foo>

[13:33] <lizmat> I would double check @short-names-to-index for any Anys

[13:33] <ugexe> well I cant reproduce it for one

[13:33] <lizmat> m: my %h; %h{$_} = 1 for (Any,)

[13:33] <camelia> rakudo-moar a9da976e8: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in block  at <tmp> line 1␤»

[13:34] <ugexe> that does seem to be the only possible way though

[13:34] <lizmat> line 236: push @short-names-to-index, $dist.name // 'unknown';  ??

[13:35] <ugexe> yeah ultimately i'll grep out invalid values now. still strange i cant reproduce it though... it almost suggest some module in the ecosystem temporarily had some type of invalid value

[13:36] *** tbrowder__ left
[13:36] *** tbrowder__ joined
[13:38] <lizmat> push @short-names-to-index, $_ with dist.name;

[13:38] <lizmat> I guess

[13:38] <ugexe> m: my @a = (Any,); my %h; %h{$_} = 1 for @a

[13:38] <camelia> rakudo-moar a9da976e8: OUTPUT: «Use of uninitialized value @a of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in block  at <tmp> line 1␤»

[13:39] <ugexe> i'm not sure if im a fan of that error message or not though

[13:39] <ugexe> m: my @a = (Any,1); my %h; %h{$_} = 1 for @a

[13:39] <camelia> rakudo-moar a9da976e8: OUTPUT: «Use of uninitialized value @a of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in block  at <tmp> line 1␤»

[13:39] <lizmat> well, it tells you it's a container of the @a array that has Any in it

[13:39] <ugexe> the "Use of uninitialized value @a"

[13:39] <ugexe> instead of like "Use of uninitialized value in @a"

[13:39] <lizmat> s/in/from/ ?

[13:39] <ugexe> in the second example @a contains Any and 1, so it isn't uninitialized

[13:40] <ugexe> yeah

[14:01] *** kjp left
[14:34] *** AlexDaniel joined
[14:35] *** kjp joined
[15:11] <codesections> I'm having trouble detecting a Mu value in NQP.  nqp::isnull and nqp::isnull_s both return 0, but dump throws an error saying it's a VMNull.  What am I missing here?

[15:12] <codesections> I'm trying to fix https://github.com/Raku/nqp/blob/main/src/QRegex/Cursor.nqp#L603-L610

[15:12] <codesections> which is currently calls tryfindmethod on Mu (i.e., unset) action objects

[15:43] *** kjp left
[15:45] <ugexe> m: my byte $a; say $a.^name

[15:45] <camelia> rakudo-moar a9da976e8: OUTPUT: «Int␤»

[15:45] <ugexe> Is byte an actual type we provide or is it leaking?

[15:46] <ugexe> i guess we have bit and byte native types

[15:47] <ugexe> ah none of the native types are shown on docs.raku.org

[15:47] <Geth> ¦ rakudo/fix-CoC-link: 2846ea599f | (Daniel Sockwell)++ (committed using GitHub Web editor) | README.md

[15:47] <Geth> ¦ rakudo/fix-CoC-link: Replace incorrect CoC report link

[15:47] <Geth> ¦ rakudo/fix-CoC-link: 

[15:47] <Geth> ¦ rakudo/fix-CoC-link: The README currently claims to link to a CoC "Report Guide", but we don't have a Report Guide; the link actually points to our _Response_ Guide, which isn't very relevant to someone who just wants to report.

[15:47] <Geth> ¦ rakudo/fix-CoC-link: 

[15:47] <Geth> ¦ rakudo/fix-CoC-link: This commit replaces that link with instructions to email CAT@raku.org

[15:47] <Geth> ¦ rakudo/fix-CoC-link: review: https://github.com/rakudo/rakudo/commit/2846ea599f

[15:47] <Geth> ¦ rakudo: codesections++ created pull request #5467: Replace incorrect CoC report link

[15:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5467

[15:53] <ugexe> I wonder if anything actually uses the byte or bit types

[15:54] <ugexe> like even Buf.rakumod doesn't use it

[16:07] *** kjp joined
[16:16] <ab5tract_> Maybe that’s an oversight?

[16:19] <ugexe> it seems like it has to be getting used *somewhere*

[16:19] <ugexe> or else why would it even be added

[16:19] <ugexe> i guess it could have just been in the design docs

[16:20] <ugexe> i'm mostly something if its something i should be using

[16:20] <ugexe> i'm mostly wondering^

[16:21] <ab5tract_> I’ve used it in NativeCall bindings before. Seems to do what it says on the tin :)

[16:23] <ab5tract_> I think it’s just there as an optional alias for `uint8` that might be more evocative under certain cirumstances

[16:26] <ab5tract_> (That’s for `byte`. I didn’t know we had a `bit`!)

[16:37] *** dogbert17 joined
[16:39] *** dogbert11 left
[17:50] <Geth> ¦ rakudo/main: 349ee9c225 | (Elizabeth Mattijsen)++ | 2 files

[17:50] <Geth> ¦ rakudo/main: RakuAST: make handling of ⁶⁶⁷/₃ sane

[17:50] <Geth> ¦ rakudo/main: 

[17:50] <Geth> ¦ rakudo/main: In the legacy grammar, this was interpreted as 6 ** 67 / 3, which

[17:50] <Geth> ¦ rakudo/main: is clearly a bit of a WAT, if not outright a bug.

[17:50] <Geth> ¦ rakudo/main: 

[17:50] <Geth> ¦ rakudo/main: This is now properly treated as 667 / 3, and codegenned as a proper

[17:50] <Geth> ¦ rakudo/main: RatLiteral.

[17:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/349ee9c225

[18:29] <Geth> ¦ nqp: codesections++ created pull request #813: Prevent method calls on nonexistent actions object

[18:29] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/813

[18:40] <discord-raku-bot> <nemokosch> could you be at least a tiny little bit receptive of problems that have factual examples of biting the user, and their controversial nature is so acknowledged at times (like with this "token names are method names" stuff) that they are identified as "traps" even in the documentation?

[18:41] <discord-raku-bot> <nemokosch> I know it's not convenient but at this point I feel it's actually taking a toll on my sanity, like we live in parallel worlds

[18:41] <discord-raku-bot> <nemokosch> why does it always have to be neglected or denied?

[18:42] * lizmat wonders what this is even about ?

[18:43] *** sena_kun joined
[18:48] <discord-raku-bot> <nemokosch> https://github.com/rakudo/rakudo/issues/5443

[18:49] <discord-raku-bot> <nemokosch> turned out that built-in methods not only name conflict with token/rule/regex stuff (do they have one common name?) but even the resolution order was wrong

[18:49] <discord-raku-bot> <nemokosch> now, the resolution order is right at least...

[18:57] <Geth> ¦ rakudo/lizmat-rat-raku: 1720fbeb43 | (Elizabeth Mattijsen)++ | src/core.c/Rat.rakumod

[18:57] <Geth> ¦ rakudo/lizmat-rat-raku: RakuAST: compose vulgars that have a composed version

[18:57] <Geth> ¦ rakudo/lizmat-rat-raku: 

[18:57] <Geth> ¦ rakudo/lizmat-rat-raku: So produce <1/3> as ⅓ instead of as ¹/₃ .  Note that many of the

[18:57] <Geth> ¦ rakudo/lizmat-rat-raku: composed vulgars will never show as a vulgar because they can be

[18:57] <Geth> ¦ rakudo/lizmat-rat-raku: truthfully produced as a decimal, e.g. <1/2> is produced as 0.5

[18:57] <Geth> ¦ rakudo/lizmat-rat-raku: review: https://github.com/rakudo/rakudo/commit/1720fbeb43

[19:06] <codesections> the resolution order wasn't wrong.  In fact, rakudo/rakudo#5443 turned out not to be exactly the same issue we were discussing with .from, etc

[19:06] <linkable6> RAKUDO#5443 [open]: https://github.com/rakudo/rakudo/issues/5443 Rakudo incorrectly calls methods on Match subclasses (eg Grammars) instead of on Match itself

[19:07] <codesections> instead, it was caused by Grammar not correctly checking to see if it had an action object before trying to call the corresponding action method

[19:08] <lizmat> I have a better fix

[19:08] <lizmat> codesections spectesting now

[19:13] <discord-raku-bot> <nemokosch> then I don't get the whole thing about how it is solved now

[19:14] <discord-raku-bot> <nemokosch> how will methods of the same name not name conflict all of a sudden?

[19:16] <Geth> ¦ rakudo/main: bd2c719ed4 | (Elizabeth Mattijsen)++ | src/core.c/Grammar.rakumod

[19:16] <Geth> ¦ rakudo/main: Make sure that "no actions" really means it

[19:16] <Geth> ¦ rakudo/main: 

[19:16] <Geth> ¦ rakudo/main: Putting a Raku Mu object in the actions of a grammar by default,

[19:16] <Geth> ¦ rakudo/main: is telling NQP that it should look in the Raku Mu class, of which

[19:16] <Geth> ¦ rakudo/main: we have many, and one of them is called "print".  Which causes

[19:16] <Geth> ¦ rakudo/main: issue #5443.

[19:16] <Geth> ¦ rakudo/main: 

[19:16] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[19:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bd2c719ed4

[19:17] <lizmat> I think https://docs.raku.org/language/traps#Using_certain_names_for_rules/token/regexes can now have a mention that it is fixed in 2023.11

[19:19] <discord-raku-bot> <nemokosch> well, I still don't get how the name conflicts are avoided now, if it's apparently not the resolution order that changed, and they still share the same name

[19:20] <lizmat> the problem was that users thought they indicated not to call any action methods, while in fact they indicated to use action methods of the Mu classs

[19:20] <lizmat> now, if you indicate you don't want any action methods, they will not even try to execute action methods

[19:21] <discord-raku-bot> <nemokosch> I don't know how this relates.

[19:22] <lizmat> you can parse a grammar either *with* an action method class, or without

[19:22] <lizmat> m: say grammar { token TOP { <print>+ } }.parse: "foo"

[19:22] <camelia> rakudo-moar 349ee9c22: OUTPUT: «Cannot resolve caller print(Mu:U: <anon|1>:D); none of these signatures matches:␤    (Mu: *%_)␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:23] <lizmat> what happens here, is that you *think* you've indicated you don't want any action methods executed

[19:23] <lizmat> but in fact, you indicated that you want it to search for methods in the Mu class when a token matches

[19:24] <discord-raku-bot> <nemokosch> okay okay, hold on

[19:24] <lizmat> and since the signature doesn't match, you get an error

[19:24] <discord-raku-bot> <nemokosch> so the grammar itself doesn't inherit any methods?

[19:24] <lizmat> it actually does, that's why the <print> matched

[19:25] <discord-raku-bot> <nemokosch> okay... does it inherit methods that have nothing to do with grammar-ish stuff?

[19:27] <lizmat> it does NQP's NQPMatchRole 

[19:28] <lizmat> actually, Match does: my class Match is Capture is Cool does NQPMatchRole

[19:28] <lizmat> and Grammar isa Match

[19:28] <discord-raku-bot> <nemokosch> well that's what I'm asking, pretty much

[19:29] <lizmat> yeah, so inheriting tokens is fine, and what you want

[19:29] <discord-raku-bot> <nemokosch> why is it okay that even though Match is a bloated class with loads of inherited methods for traditional method purposes, they all just flow through implicitly to the grammar

[19:30] <lizmat> when the <print> token matched, it tried to execute:

[19:30] <lizmat> m: Mu.print("foo")

[19:30] <camelia> rakudo-moar 349ee9c22: OUTPUT: «Cannot resolve caller print(Mu:U: Str:D); none of these signatures matches:␤    (Mu: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[19:30] <discord-raku-bot> <nemokosch> that's okay, I'm asking about the principle

[19:31] <discord-raku-bot> <nemokosch> why is it okay that <raku> for the .raku method and <print> for something that is supposedly really a token, look the same and are available under the very same terms?

[19:31] <discord-raku-bot> <nemokosch> why are these two unrelated things implicitly intermixed?

[19:32] <lizmat> the grammar machinery is really oblivious to the meaning of the tokens / methods

[19:32] <discord-raku-bot> <nemokosch> what justifies that?

[19:32] <lizmat> it sees that a token named "foo" matched, checks if there is an actions class, if there is, then checks if there is a method "foo" on it, if there is, tries to execute it

[19:34] *** MasterDuke joined
[19:34] <Geth> ¦ roast: 20b07d6704 | (Elizabeth Mattijsen)++ | S05-grammar/inheritance.t

[19:34] <Geth> ¦ roast: Untodo a now passing test

[19:34] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/20b07d6704

[19:36] <discord-raku-bot> <nemokosch> really, this is what I don't get about the whole thing. In reality, to the user, tokens and methods are not the same thing. They don't have the same purpose to begin with. The raku, elems, rotor, Int, etc. methods have nothing to do with tokens like ws or print or alpha, regardless of the implementation

[19:36] <lizmat> agree.. and they shall not intefere with each other from now on

[19:37] <discord-raku-bot> <nemokosch> then I probably still don't understand how it all works

[19:37] <lizmat> had I known what I know now about how grammars work in NQP, I would have been able to fix this a long time ago  :-(

[19:37] <discord-raku-bot> <nemokosch> because in my mind, if you have <raku> or <hash> in your grammar, it can still fall back to these methods

[19:38] <discord-raku-bot> <nemokosch> which may not be a prevalent issue than outright shadowing your own tokens named "raku" or "hash" but it still seems completely unjustified

[19:38] <lizmat> well, you can create a method in a grammar, as long as you abide by the interface for tokens

[19:38] <MasterDuke> m: grammar A { token froom { "froom" }; token TOP { <froom>+ }; }; dd A.parse("froom")

[19:38] <camelia> rakudo-moar bd2c719ed: OUTPUT: «Match.new(:orig("froom"), :from(0), :pos(5), :hash(Map.new((:froom([Match.new(:orig("froom"), :from(0), :pos(5))])))))␤»

[19:38] <MasterDuke> m: grammar A { token from { "froom" }; token TOP { <from>+ }; }; dd A.parse("froom")

[19:39] <camelia> rakudo-moar bd2c719ed: OUTPUT: «(timeout)»

[19:39] <discord-raku-bot> <nemokosch> my point is that this shouldn't be a big deal from the technical side of things

[19:39] <discord-raku-bot> <nemokosch> the intermixing could be stopped by appending a prefix to the grammar stuff

[19:39] <discord-raku-bot> <nemokosch> much like how trait_mod or sym or infix exists

[19:40] <discord-raku-bot> <nemokosch> if somebody wanted to write a regexish thing as a method, they could still do just that

[19:40] <discord-raku-bot> <nemokosch> but without the confusing part

[19:40] <discord-raku-bot> <nemokosch> and the resolution wouldn't fall back to something that has no business with grammars at all

[19:40] <MasterDuke> yeah, a prefix has been suggested as a possible solution before. it's one of the things i was going to experiment with a while ago, but never got around to

[19:41] <lizmat> ok, this is a different issue

[19:44] <codesections> Yeah, I think I'm responsible for the confusion between the two issues – I got confused and thought that #5443 was caused by the regex-vs-method name issue -- but it's not; it's the action bug (now fixed, lizmat++)

[19:45] <codesections> I've now opened rakudo/rakudo#5468 to track the regex-vs-method name issue

[19:45] <linkable6> RAKUDO#5468 [open]: https://github.com/rakudo/rakudo/issues/5468 Rakudo incorrectly calls methods on Match subclasses (eg Grammars) instead of on Match itself

[19:45] <discord-raku-bot> <nemokosch> well that might have been my fault to begin with, to be fair

[19:45] <discord-raku-bot> <nemokosch> after all, I implied that it was probably a related thing

[19:45] <codesections> Yeah, we were all on the wrong track together for a bit :D

[19:49] <Geth> ¦ rakudo/main: 2846ea599f | (Daniel Sockwell)++ (committed using GitHub Web editor) | README.md

[19:49] <Geth> ¦ rakudo/main: Replace incorrect CoC report link

[19:49] <Geth> ¦ rakudo/main: 

[19:49] <Geth> ¦ rakudo/main: The README currently claims to link to a CoC "Report Guide", but we don't have a Report Guide; the link actually points to our _Response_ Guide, which isn't very relevant to someone who just wants to report.

[19:49] <Geth> ¦ rakudo/main: 

[19:49] <Geth> ¦ rakudo/main: This commit replaces that link with instructions to email CAT@raku.org

[19:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2846ea599f

[19:49] <Geth> ¦ rakudo/main: 6d90c9230a | (Daniel Sockwell)++ (committed using GitHub Web editor) | README.md

[19:49] <Geth> ¦ rakudo/main: Merge pull request #5467 from rakudo/fix-CoC-link

[19:49] <Geth> ¦ rakudo/main: 

[19:49] <Geth> ¦ rakudo/main: Replace incorrect CoC report link

[19:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6d90c9230a

[20:08] <Geth> ¦ nqp/main: 548b0263bb | (Daniel Green)++ | tools/templates/MOAR_REVISION

[20:08] <Geth> ¦ nqp/main: Bump MoarVM for libuv update

[20:08] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/548b0263bb

[20:10] <Geth> ¦ rakudo/main: c5622ff927 | (Daniel Green)++ | tools/templates/NQP_REVISION

[20:10] <Geth> ¦ rakudo/main: Bump NQP for libuv update

[20:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c5622ff927

[20:10] <lizmat> I wonder how much would break if we would let Grammar just inherit from NQPMatchRole

[20:38] <lizmat> fwiw, libuv bump is ok on MacOS

[20:38] <lizmat> afk&

[23:39] *** sena_kun left
