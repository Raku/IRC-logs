[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[01:17] *** squashable6 left
[01:19] *** squashable6 joined
[01:33] <MasterDuke> jdv++

[04:05] *** kjp left
[04:08] *** kjp joined
[04:08] *** kjp left
[04:08] *** kjp joined
[05:28] *** Xliff left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:20] *** squashable6 left
[07:21] *** squashable6 joined
[07:30] *** kurahaupo left
[07:30] *** kurahaupo joined
[08:32] *** sena_kun joined
[09:08] *** nine left
[09:08] *** nine joined
[11:52] *** guifa left
[11:53] *** guifa joined
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[13:33] *** ab5tract joined
[16:54] *** ab5tract left
[17:13] <lizmat> m: say Q|foo(42)|.AST

[17:13] <camelia> rakudo-moar ec622b936: OUTPUT: «===SORRY!=== Error while compiling ␤Undeclared routine:␤    foo used at line -1. Did you mean ''?␤␤»

[17:14] <lizmat> nine: ^^  I'd say that is wrong, it should complain at EVAL time if there is truly no sub found

[17:54] *** linkable6 left
[17:54] *** evalable6 left
[17:55] *** linkable6 joined
[17:57] *** evalable6 joined
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:18] <patrickb> I have just uploaded the binary release archives for 2023.06 to rakudo.org. Yay!

[18:20] <lizmat> patrickb++

[19:16] <nine> m: foo(42)

[19:16] <camelia> rakudo-moar ec622b936: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    foo used at line 1␤␤»

[19:16] <nine> lizmat: that's just the same. Subroutine calls are resolved at compile time and we complain if we can't do that.

[19:17] <lizmat> I guess we then need some post CHECK time or something like that

[19:18] <lizmat> because I could be building an AST with the .AST function, which references foo

[19:18] <lizmat> and then later combine that AST with another AST that *does* contain the "foo" sub

[19:20] <lizmat> that currently doesn't work  :-(   and makes Formatter more convoluted atm

[19:20] <lizmat> so it feels to me we need a AST CHECK time functionality, and an EVAL CHECK time functionality

[19:22] <lizmat> I mean, we should see RakuAST as building blocks, no?

[19:25] <nine> Sure, RakuAST nodes are building blocks. .AST is a debugging aid

[19:29] <lizmat> well, I'm at a bit of a conundrum re q:o/%s/ being compile time then

[19:29] <lizmat> in the current code, this references some helper subs that are in scope

[19:30] <lizmat> however, they do not get properly QASTed, or maybe bytecoded, probably because these subs are not in the sc

[19:32] <lizmat> so I'm not adding the ASTs of these subs to the generated AST, and those ASTs are generated from the code of the original subs using .AST

[19:32] <lizmat> this for maintenance / development convenience

[19:42] <nine> So....there is some bug and you are trying to work around that but that is tedious so you use a debugging aid that was never meant for such a thing and it doesn't work out well?

[19:45] <lizmat> from a conversation with jnthn I gathered that it would be hard to fix, these missing subs

[19:46] <nine> When has that ever kept us from fixing things? :D

[19:46] <nine> Well, except for the still existing race condition in MoarVM's expression JIT compiler...

[19:46] <lizmat> ok, let's see if I can golf it

[19:58] <lizmat> nine; golfed https://gist.github.com/lizmat/91930d595ca585097a4b069953a8f26a

[20:05] <lizmat> afk for a bit&

[20:15] *** [Coke] left
[20:23] *** [Coke] joined
[20:28] *** [Coke] left
[20:48] *** [Coke] joined
[21:58] *** sourceable6 left
[21:58] *** nativecallable6 left
[21:58] *** benchable6 left
[21:58] *** linkable6 left
[21:58] *** committable6 left
[21:58] *** notable6 left
[21:58] *** squashable6 left
[21:58] *** releasable6 left
[21:58] *** bloatable6 left
[21:58] *** statisfiable6 left
[21:58] *** reportable6 left
[21:58] *** quotable6 left
[21:58] *** coverable6 left
[21:58] *** bisectable6 left
[21:58] *** tellable6 left
[21:58] *** greppable6 left
[21:58] *** unicodable6 left
[21:58] *** evalable6 left
[21:58] *** shareable6 left
[21:59] *** notable6 joined
[21:59] *** benchable6 joined
[21:59] *** squashable6 joined
[21:59] *** bloatable6 joined
[21:59] *** bisectable6 joined
[21:59] *** coverable6 joined
[21:59] *** reportable6 joined
[22:00] *** unicodable6 joined
[22:00] *** linkable6 joined
[22:00] *** committable6 joined
[22:01] *** shareable6 joined
[22:01] *** greppable6 joined
[22:01] *** releasable6 joined
[22:01] *** statisfiable6 joined
[22:01] *** sourceable6 joined
[22:01] *** evalable6 joined
[22:01] *** quotable6 joined
[22:01] *** nativecallable6 joined
[22:01] *** tellable6 joined
[22:09] *** sena_kun left
[22:20] *** tonyo left
[22:20] *** tonyo joined
[22:40] <timo> nine: why is there a race condition in the exprjit compiler, we never run more than one thread that does speshing and jitting

[22:49] *** [Tux] left
[23:01] *** [Tux] joined
[23:45] <ugexe> https://github.com/rakudo/rakudo/blob/ec622b9366f25c6a32dd47b9cdda7fbd1a177be9/src/core.c/CompUnit/PrecompilationRepository.pm6#L178 Shouldn't this read be protected?

[23:48] <ugexe> yep, it was broken in https://github.com/rakudo/rakudo/commit/95fb9260045fdef18d7179c089fbba03b53597ba

[23:48] <ugexe> the Lock::Soft code was eventually reverted but the original protected block wasn't returned

