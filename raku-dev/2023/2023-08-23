[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:46] *** kjp left
[00:49] *** kjp joined
[01:08] *** Voldenet left
[01:51] *** MasterDuke joined
[01:52] *** Voldenet joined
[03:31] *** evalable6 left
[03:31] *** linkable6 left
[03:31] *** evalable6 joined
[03:33] *** linkable6 joined
[03:38] <Geth> ¦ nqp/main: 1cdfa799ba | (Daniel Green)++ | tools/templates/MOAR_REVISION

[03:38] <Geth> ¦ nqp/main: Bump MoarVM for new stat repr and syscalls

[03:38] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/1cdfa799ba

[04:58] <Geth> ¦ rakudo/main: 9 commits pushed by (Daniel Green)++, MasterDuke17++

[04:58] <Geth> ¦ rakudo/main: ba15dc3119 | Bump NQP for new stat repr and syscalls

[04:58] <Geth> ¦ rakudo/main: 7978442080 | Use new stat syscalls in DirRecurse

[04:58] <Geth> ¦ rakudo/main: 64eb3e173f | Use new stat syscalls in IO::Path

[04:58] <Geth> ¦ rakudo/main: e258c2cf1a | Don't stat when spurting utf16 unless we have to

[04:58] <Geth> ¦ rakudo/main: 56294538b7 | Can't skip '.' and '..', but don't need to `try`

[04:58] <Geth> ¦ rakudo/main: 57e658c426 | Use `self.absolute` where possible in IO::Path...

[04:58] <Geth> ¦ rakudo/main: 4597e20da6 | Make R::I stat changes JVM/JS compatible

[04:58] <Geth> ¦ rakudo/main: a7f368c8bd | Make I::P stat changes JVM/JS compatible

[04:58] <Geth> ¦ rakudo/main: e0851ab624 | Merge pull request #5352 from MasterDuke17/use_new_stat_syscall_in_DirRecurse_v2

[04:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/4a4be8de565a...e0851ab6240f

[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:37] *** jdv_ joined
[06:39] *** jdv left
[08:10] *** discord-raku-bot left
[08:10] *** discord-raku-bot joined
[08:36] *** sena_kun joined
[09:56] *** Voldenet left
[10:03] *** Voldenet joined
[10:32] *** Voldenet left
[10:49] *** Voldenet joined
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[13:03] *** bisectable6 left
[13:03] *** shareable6 left
[13:03] *** greppable6 left
[13:03] *** reportable6 left
[13:03] *** releasable6 left
[13:03] *** squashable6 left
[13:03] *** coverable6 left
[13:03] *** benchable6 left
[13:03] *** notable6 left
[13:03] *** linkable6 left
[13:03] *** tellable6 left
[13:03] *** quotable6 left
[13:03] *** evalable6 left
[13:03] *** unicodable6 left
[13:03] *** bloatable6 left
[13:03] *** sourceable6 left
[13:03] *** committable6 left
[13:03] *** nativecallable6 left
[13:03] *** greppable6 joined
[13:03] *** tellable6 joined
[13:03] *** shareable6 joined
[13:03] *** quotable6 joined
[13:04] *** reportable6 joined
[13:04] *** benchable6 joined
[13:04] *** unicodable6 joined
[13:04] *** coverable6 joined
[13:04] *** bloatable6 joined
[13:04] *** squashable6 joined
[13:04] *** evalable6 joined
[13:04] *** nativecallable6 joined
[13:05] *** releasable6 joined
[13:05] *** notable6 joined
[13:05] *** bisectable6 joined
[13:05] *** committable6 joined
[13:05] *** sourceable6 joined
[13:05] *** linkable6 joined
[13:34] <Geth> ¦ rakudo/main: 402bcb8e6c | (Vadim Belman)++ | src/vm/moar/runner/main.c

[13:34] <Geth> ¦ rakudo/main: Provide a workaround for macOS Security Integrity Protection

[13:34] <Geth> ¦ rakudo/main: 

[13:34] <Geth> ¦ rakudo/main: A common complain about 'raku is loading libsomething in an unsafe way'

[13:34] <Geth> ¦ rakudo/main: doesn't have a single universal solution. Here I try to provide a

[13:34] <Geth> ¦ rakudo/main: workaround to it by enforcing DYLD_LIBRARY_PATH variable from a

[13:34] <Geth> ¦ rakudo/main: Rakudo-specific RAKUDO_DYLD_LIBRARY_PATH. This, for example, provides a

[13:34] <Geth> ¦ rakudo/main: fix for installing OpenSSL module.

[13:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/402bcb8e6c

[13:34] <Geth> ¦ rakudo/main: 64a175ad11 | (Vadim Belman)++ (committed using GitHub Web editor) | src/vm/moar/runner/main.c

[13:34] <Geth> ¦ rakudo/main: Merge pull request #5350 from vrurg/workaround-macos-dyld-security

[13:35] <Geth> ¦ rakudo/main: 

[13:35] <Geth> ¦ rakudo/main: Provide a workaround for macOS Security Integrity Protection

[13:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/64a175ad11

[13:44] <vrurg> lizmat: speaking of PseudoStashes and what my PR would bring, I recovered about one important chage: DYNAMIC would now pick up everything or almost everything visible via $* resolution. I.e. it includes GLOBAL, PROCESS, and $*PROMISE chain.

[13:45] <lizmat> it didn't before ?

[13:45] <vrurg> m: PROCESS::<$AA> = "foo"; say $*AA; say DYNAMIC::<$*AA>

[13:45] <camelia> rakudo-moar e0851ab62: OUTPUT: «foo␤Nil␤»

[13:47] <vrurg> Also, if memory serves me right, bindings should start working where they don't currently work.

[13:47] <lizmat> such as ?

[13:48] <vrurg> That I need to recover too. :)

[13:48] <vrurg> 2 years is a long term. 

[13:48] <lizmat> yeah... I know  :-)

[14:04] <vrurg> Nah, the binding was planned but I never got there because was waiting for PRs approval. 

[14:07] <Geth> ¦ rakudo/main: 76308eb5b2 | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[14:07] <Geth> ¦ rakudo/main: RakuAST: add OperatorProperties.dottyopish|nulltermish

[14:07] <Geth> ¦ rakudo/main: 

[14:07] <Geth> ¦ rakudo/main: These used to be values of "next-term" but no more.

[14:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/76308eb5b2

[14:09] <Geth> ¦ rakudo/main: 8 commits pushed by (Vadim Belman)++

[14:09] <Geth> ¦ rakudo/main: 9e29884020 | PseudoStash reconsidered and clarified

[14:09] <Geth> ¦ rakudo/main: f3d9760239 | Extend pseudos coverage into more namespaces

[14:09] <Geth> ¦ rakudo/main: 1b9a434a58 | Fix a compile-time warning

[14:09] <Geth> ¦ rakudo/main: 7d1e8b8b4d | Use more backend independent atomic incremental

[14:09] <Geth> ¦ rakudo/main: 4b9679a993 | Make 6.c PseudoStash code a bit more concise

[14:09] <Geth> ¦ rakudo/main: 5d1198e7f3 | Rebase on master and fix for compatibility

[14:09] <Geth> ¦ rakudo/main: 6f6951c052 | Fix for not updating stash hash of GLOBAL and PROCESS

[14:09] <Geth> ¦ rakudo/main: 9ed1995de6 | Merge pull request #4495 from vrurg/problem-solving-294

[14:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/76308eb5b294...9ed1995de632

[14:10] <vrurg> Oh, a funny one. Currently DYNAMIC::<$*FOO> wouldn't work for `my $*FOO := 42` because a scalar is required.

[14:10] <lizmat> ??

[14:12] <vrurg> Legacy DYNAMIC implementation was looking into .dynamic attribute of a Scalar.

[14:12] <lizmat> aaah.. ok, gotcha

[14:12] <lizmat> missed the : in :=  :-)

[14:13] <lizmat> I'm starting to wonder whether we still need .dynamic on Scalars in the (near) future

[14:13] <vrurg> No, it's not needed anymore.

[14:15] <vrurg> Though it's still respected by PseudoStash

[14:37] <Geth> ¦ rakudo/main: 66414c0498 | (Elizabeth Mattijsen)++ | 2 files

[14:37] <Geth> ¦ rakudo/main: RakuAST: OperatorProperties.comma is never fiddly

[14:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/66414c0498

[14:48] *** ab5tract joined
[15:02] *** Voldenet left
[15:03] <Geth> ¦ rakudo/main: ad4c580d5a | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[15:03] <Geth> ¦ rakudo/main: RakuAST: OperatoriProperties.thight-and is always iffy

[15:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ad4c580d5a

[15:03] <Geth> ¦ rakudo/main: cefa085c94 | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[15:03] <Geth> ¦ rakudo/main: RakuAST: OperatorProperties.tight cleanup

[15:03] <Geth> ¦ rakudo/main: 

[15:03] <Geth> ¦ rakudo/main: - tight-or is always left associative

[15:03] <Geth> ¦ rakudo/main: - renamed tight-or-defor -> tight-defor

[15:03] <Geth> ¦ rakudo/main: - renamed tight-or-xor -> tight-xor

[15:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cefa085c94

[15:03] <Geth> ¦ rakudo/main: 168a67ffc0 | (Elizabeth Mattijsen)++ | 2 files

[15:03] <Geth> ¦ rakudo/main: RakuAST: OperatorProperties.loose-andthen is always list associative

[15:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/168a67ffc0

[15:14] <Geth> ¦ rakudo/main: e6fdb8536c | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[15:14] <Geth> ¦ rakudo/main: RakuAST: OperatorProperties.loose_or is always iffy

[15:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e6fdb8536c

[15:32] <Geth> ¦ rakudo/main: ba9f4050e0 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[15:32] <Geth> ¦ rakudo/main: RakuAST: OperatorProperties.loose_or's assoc defaults to left

[15:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ba9f4050e0

[15:32] <Geth> ¦ rakudo/main: 1380fa3b27 | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[15:32] <Geth> ¦ rakudo/main: RakuAST: rename OperatorProperties.loose-or-xor to loose-xor

[15:32] <Geth> ¦ rakudo/main: 

[15:32] <Geth> ¦ rakudo/main: For naming consistency

[15:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1380fa3b27

[15:43] <Geth> ¦ rakudo/main: e0b7e83173 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[15:43] <Geth> ¦ rakudo/main: RakuAST: OperatorProperties.loose_orelse is already :assoc<list>

[15:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e0b7e83173

[15:53] <Geth> ¦ rakudo/main: 5aeeb39ddf | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[15:53] <Geth> ¦ rakudo/main: RakuAST: pasttype is a thing of the distant past

[15:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5aeeb39ddf

[16:13] <Geth> ¦ rakudo/main: eec42c773d | (Elizabeth Mattijsen)++ | 2 files

[16:13] <Geth> ¦ rakudo/main: RakuAST: OperatorProperties.loose-and is always iffy

[16:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eec42c773d

[16:17] <discord-raku-bot> <nemokosch> what does "iffy" mean?

[16:22] <Geth> ¦ rakudo/main: be6428ba7a | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[16:22] <Geth> ¦ rakudo/main: RakuAST: all infix tokens now use a hash only for O<>

[16:22] <Geth> ¦ rakudo/main: 

[16:22] <Geth> ¦ rakudo/main: And not change settings "ad-hoc"

[16:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/be6428ba7a

[16:42] <jdv_> patrickb: aye aye capt.  thanks.

[16:43] *** jdv_ is now known as jdv

[16:59] <lizmat> nemokosch: I don't fully grok what "iffy" means, but it is used in the parser as a condition to handle expressions with infix operators

[17:05] <Geth> ¦ rakudo/main: 042e1e4d7d | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[17:05] <Geth> ¦ rakudo/main: RakuAST: oops, missed loose_xor

[17:05] <Geth> ¦ rakudo/main: 

[17:05] <Geth> ¦ rakudo/main: Now all infix tokens use a hash only for O<>

[17:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/042e1e4d7d

[17:05] <Geth> ¦ rakudo/main: ce29ccdae8 | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[17:05] <Geth> ¦ rakudo/main: RakuAST: OperatorProperties; reorganizing attributes

[17:05] <Geth> ¦ rakudo/main: 

[17:05] <Geth> ¦ rakudo/main: For better overview

[17:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ce29ccdae8

[17:05] <Geth> ¦ rakudo/main: c509e758b5 | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[17:05] <Geth> ¦ rakudo/main: RakuAST: Fix OperatorProperties.prec handling of "nextterm"

[17:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c509e758b5

[17:55] <ugexe> there seem to be precompilation issues on windows outside of path length limitations now, particularly on GitHub actions

[17:57] <ugexe> sometimes it occurs when calling CURI.install(...) (which means it tries to precompile modules one-by-one) and sometimes it occurs when doing e.g. `raku -I. -e 'use Some::Zef::Module` (which means its using CURFS and potentially precompiling in parallel)

[17:57] <ugexe> i kind of wonder if it isn't an issue with renaming things

[17:58] <ugexe> either other file operations in PrecompilationRepository need to retry, or the existing retry logic has become broken/flakey sometime in the last 1.5 years

[17:59] <ugexe> unfortunately in GitHub actions these errors happen regularly and never include any additional information than an occasional stack trace showing its precompilation

[18:00] <ugexe> setting RAKUDO_MODULE_DEBUG=1 seems to avoid the issue the few times i've tried, which hints that the additional overhead/slowdown of using it could be helping to avoid the aforementioned issue

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:03] <ugexe> all this same code works fine running on appveyor

[19:26] *** nine left
[19:26] *** nine joined
[19:48] *** sena_kun left
[19:48] *** sena_kun joined
[20:51] *** hythm76 joined
[20:51] *** hythm left
[21:37] *** Voldenet joined
[22:36] <ugexe> hmm, at least one of the precompilation errors is a stack overflow

[22:36] *** sena_kun left
[22:36] <ugexe> https://github.com/ugexe/zef/actions/runs/5956815285/job/16158360694#step:11:3084

[22:50] <Geth> ¦ LWP-Simple: 7138dbe75b | (David Warring)++ (committed using GitHub Web editor) | META6.json

[22:50] <Geth> ¦ LWP-Simple: Update META6.json

[22:50] <Geth> ¦ LWP-Simple: 

[22:50] <Geth> ¦ LWP-Simple: Reset `auth` to `zef:raku-community-modules`

[22:50] <Geth> ¦ LWP-Simple: 

[22:50] <Geth> ¦ LWP-Simple: Changed this temporarily, to get the module released.

[22:50] <Geth> ¦ LWP-Simple: review: https://github.com/raku-community-modules/LWP-Simple/commit/7138dbe75b

[23:49] *** linkable6 left
[23:49] *** evalable6 left
[23:51] *** evalable6 joined
[23:52] *** linkable6 joined
