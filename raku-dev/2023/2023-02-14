[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:25] *** ab5tract left
[01:08] *** melezhik joined
[01:10] *** melezhik left
[01:12] *** melezhik joined
[01:16] *** melezhik left
[02:50] *** melezhik joined
[03:01] *** melezhik left
[04:52] *** linkable6 left
[04:52] *** evalable6 left
[04:53] *** linkable6 joined
[04:55] *** evalable6 joined
[05:54] *** kjp left
[05:56] *** kjp joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[08:58] *** sena_kun joined
[09:03] *** frost joined
[09:08] *** kawaii left
[09:10] *** kawaii joined
[09:11] *** ab5tract joined
[09:14] *** frost left
[09:18] *** frost joined
[09:19] *** frost left
[09:28] <ab5tract> what does this QAST mean: "QAST::Stmts  <b a>"? where is this '<b a>' annotation coming from and (how) do I reproduce it? It's part of a block

[09:58] <nine> That's just an annotation that the RakuAST frontend doesn't yet add. It doesn't make any functional difference and is purely a debugging aid.

[09:59] <lizmat> jjatria ping https://github.com/rakudo/rakudo/issues/5201   I've yet to find a golf to find the issue with Pop and Game::Entities

[10:00] <lizmat> would appreciate an extra eye there  :-)

[10:02] <discord-raku-bot> <Nemokosch> same üëÅÔ∏è

[10:03] <jjatria> Oh, interesting. I had not clocked this

[10:03] <tellable6> 2023-02-07T21:26:41Z #raku <melezhik> jjatria I created a simple CI pipeline that also runs a code snippet from http tiny readme, let me know if you are interested and I can create a pr

[10:04] <lizmat> jjatria: also, I'm not 100% sure the bisect to https://github.com/rakudo/rakudo/commit/72856df91b2e1cafb439bcd8bcc7ae46c378d01e is correct

[10:04] <jjatria> The issue seems related, since the Pop failure is failing on the Pop version of Game::Entities, before it spun into its own distro

[10:04] <lizmat> otoh, it does do a lot Int() coercions, so it may indeed be related

[10:05] <jjatria> I haven't taken a look at this in a while, but I should be able to dive back in today

[10:06] <lizmat> cool... I'll concentrate on other stuff again then, since I wasn't getting any further with it for an hour or so already

[10:07] <lizmat> bisectable6: old=2022.12 (1|2|3).Int

[10:07] <bisectable6> lizmat, Bisecting by exit code (old=2022.12 new=615b9bf). Old exit code: 0

[10:08] <bisectable6> lizmat, (2023-01-09) https://github.com/rakudo/rakudo/commit/72856df91b2e1cafb439bcd8bcc7ae46c378d01e

[10:08] <bisectable6> lizmat, bisect log: https://gist.github.com/f3d1cf4d266cb5e5ca53e508da2711a5

[10:09] <lizmat> bisectable6: old=2022.12 dd (1|2|3).Int

[10:09] <bisectable6> lizmat, Bisecting by exit code (old=2022.12 new=615b9bf). Old exit code: 0

[10:09] <discord-raku-bot> <Nemokosch> how is bisectable kept up to date, by the way?

[10:10] <bisectable6> lizmat, bisect log: https://gist.github.com/572e7aec341b7a20a13ed59b1e455cab

[10:10] <bisectable6> lizmat, (2023-01-09) https://github.com/rakudo/rakudo/commit/72856df91b2e1cafb439bcd8bcc7ae46c378d01e

[10:12] <lizmat> well, that's one behaviour that changed

[10:13] <discord-raku-bot> <Nemokosch> > Cannot resolve caller Int(Int:D: );

[10:13] <discord-raku-bot> <Nemokosch> the error message is wrong, too

[10:13] <discord-raku-bot> <Nemokosch> m: say 12.Int

[10:14] <discord-raku-bot> <Raku eval>  12  

[10:14] <lizmat> m: dd (1|2|3).Str   # yet this works

[10:14] <camelia> rakudo-moar 615b9bf92: OUTPUT: ¬´any("1", "2", "3")‚ê§¬ª

[10:14] <discord-raku-bot> <Nemokosch> can resolve caller Int(Int:D: ) clearly...

[10:14] <discord-raku-bot> <Nemokosch> is Str also proto'd on Mu?

[10:14] <discord-raku-bot> <Nemokosch> oh yes, it is

[10:16] <lizmat> that's because Junction has a .Str candidate

[10:17] * lizmat adds an Junction:D.Int candidate to see if that fixes the issue

[10:20] <lizmat> nope, it doesn't

[10:20] <discord-raku-bot> <Nemokosch> That's weird...

[10:21] <discord-raku-bot> <Nemokosch> A junction doesn't have an 'Int' candidate "normally"

[10:21] <lizmat> it used to work because there was nu Mu.Int candidate before

[10:21] <discord-raku-bot> <Nemokosch> I wonder how that lookup even works

[10:21] <discord-raku-bot> <Nemokosch> I mean, how a Junction turns into Any's

[10:22] *** linkable6 left
[10:22] *** evalable6 left
[10:24] *** linkable6 joined
[10:24] *** evalable6 joined
[10:25] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/blob/615b9bf929f0f1eee716cfefd3eb439b40640874/src/core.c/Junction.pm6#L664 is that the main thing?

[10:27] <lizmat> basically yes

[10:31] *** ab5tract left
[10:36] <discord-raku-bot> <Nemokosch> hm, find_method can actually find the method to call, unlike can

[10:48] *** ab5tract joined
[10:50] <Geth> ¬¶ rakudo/main: 1841d6d9c2 | (Elizabeth Mattijsen)++ | src/core.c/Junction.pm6

[10:50] <Geth> ¬¶ rakudo/main: Make Junction:D.(Int|Numeric|Real) work

[10:50] <Geth> ¬¶ rakudo/main: 

[10:50] <Geth> ¬¶ rakudo/main: - 72856df broke Junction:D.Int

[10:50] <Geth> ¬¶ rakudo/main: - Junction:D.(Numeric|Real) were already broken, now fixed

[10:50] <Geth> ¬¶ rakudo/main: - let Junction:D.(Str|put) use the same logic

[10:50] <Geth> ¬¶ rakudo/main: - reformat some internal comments

[10:50] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1841d6d9c2

[10:54] <discord-raku-bot> <Nemokosch> nice üéâ

[10:56] <discord-raku-bot> <Nemokosch> when a Junction is unwrapped, do the elements always become Any?

[10:57] <lizmat> Junctions can't be unwrapped in core, you can only collapse them

[10:58] <discord-raku-bot> <Nemokosch> Basically I want to know what actually went wrong

[10:58] <lizmat> well, in the case of .Int, I added a Mu candidate without taking care of the Junction:D case

[10:58] <discord-raku-bot> <Nemokosch> why did Int work previously and not afterwards? what could it find?

[10:59] <discord-raku-bot> <Nemokosch> it's easier to understand why it didn't work afterwards

[10:59] <lizmat> because there was *no* Mu candidate before, the normal auto-threading would kick in

[10:59] <discord-raku-bot> <Nemokosch> why did the normal auto-threading work for Int but not for Real or Numeric?

[11:00] <discord-raku-bot> <Nemokosch> or did they all have candidates?

[11:00] <lizmat> because Real and Numeric already had a Mu candidate

[11:00] <discord-raku-bot> <Nemokosch> oh okay ü§¶

[11:00] <lizmat> m: class A { }; dd A.Numeric

[11:00] <camelia> rakudo-moar 615b9bf92: OUTPUT: ¬´Use of uninitialized value of type A in numeric context‚ê§  in block <unit> at <tmp> line 1‚ê§0‚ê§¬ª

[11:01] <lizmat> to allow that to work

[11:01] <lizmat> m: dd Mu.Numeric  # and this

[11:01] <camelia> rakudo-moar 615b9bf92: OUTPUT: ¬´Use of uninitialized value of type Mu in numeric context‚ê§  in block <unit> at <tmp> line 1‚ê§0‚ê§¬ª

[11:01] <lizmat> especially the Mu case  :-)

[11:02] <discord-raku-bot> <Nemokosch> and how does the auto-threading work? When a value is pulled from the underlying data structure of the junction, how does it get its type for the dispatch?

[11:03] <lizmat> something like a|b|c creates a junction

[11:03] <discord-raku-bot> <Nemokosch> how did the individual values of ('1'|'2'|'3') find the .Int they needed to call?

[11:04] <lizmat> then, when you call an unknown method on it, instead of throwing a dispatch error, it will call the method on all of the Junction's eigenstates *If* the object in question is a Junction

[11:05] <lizmat> before my patch that introduced a Mu.Int, the ('1'|'2'|'3').Int dispatch would initially fail, and then the auto-threading would kick in

[11:05] <lizmat> with the Mu.Int candidate there, the dispatch would succeed, and auto-threading would not happen

[11:06] <discord-raku-bot> <Nemokosch> yes, this part I understand

[11:06] <discord-raku-bot> <Nemokosch> what I'm curious about how the auto-threading itself could find the right candidates

[11:07] <lizmat> that's just normal dispatch on each of the candidates

[11:07] <lizmat> m: dd (1|2|3).Foobar

[11:07] <camelia> rakudo-moar 615b9bf92: OUTPUT: ¬´No such method 'Foobar' for invocant of type 'Int'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:07] <lizmat> it would fail on any dispatch of the eigenstates of the Junction

[11:07] <discord-raku-bot> <Nemokosch> does a Junction contain proper Raku objects under the hood?

[11:08] <lizmat> yep, it really is just an nqp::list with the eigenstates

[11:08] <discord-raku-bot> <Nemokosch> gotcha, thank you

[11:08] <lizmat> and there's an eigenstates module if you want to cheat :-)

[11:09] *** ab5tract left
[11:09] <discord-raku-bot> <Nemokosch> I basically forgot that individual object instances can have a lot of metadata without any containers involved

[11:10] <discord-raku-bot> <Nemokosch> more than enough to nail a dispatch

[11:11] <discord-raku-bot> <Nemokosch> It would be really cool to have lazy junctions but I have a feeling that it would really kick the complexity off

[11:13] <lizmat> yeah, I've looked into that in the past

[11:13] <lizmat> be assured that collapsing Junctions *do* shortcut

[11:14] <lizmat> so in the case of an .Bool, the first eigenstate to return a trueish value, will shortcut

[11:14] <discord-raku-bot> <Nemokosch> yes, that's nice

[11:14] <lizmat> in the case of an all junction, the first to return falsish will shortcut, etc

[11:15] <lizmat> maybe in the future large junctions could race their eigenstates

[11:15] <discord-raku-bot> <Nemokosch> the real problem with eagerness is, well, the same as always - you have to pay a big penalty before it even turns out how and why you need the values

[11:15] <lizmat> for now, that overhead is simply too much

[11:16] <lizmat> well the problem is that Junctions are objects on their own

[11:16] <lizmat> so something like if $a|$b|$c {

[11:16] <lizmat> turns into

[11:16] <lizmat> if ($a|$b|$c).Bool {

[11:17] <lizmat> aka, first create a Junction, then call .Bool on it

[11:17] <discord-raku-bot> <Nemokosch> yep

[11:17] <lizmat> with RakuAST it should become easier to change that into $a.Bool || $b.Bool || $c.Bool

[11:20] <lizmat> because the RakuAST::If class could have separate handling for a RakuAST::Junction object :-)

[11:21] <lizmat> and build a different RakuAST:: AST tree

[11:22] <discord-raku-bot> <Nemokosch> high-level optimizations should surely become easier

[11:24] <discord-raku-bot> <Nemokosch> I'm also hoping that it can make certain things less "surprisingly consistent"

[11:25] <discord-raku-bot> <Nemokosch> like the infamous smartmatch to m, s, tr quotes

[11:25] <discord-raku-bot> <Nemokosch> to be able to declare that this is not a regular, "localize the topic, call ACCEPTS" smartmatch

[11:26] <discord-raku-bot> <Nemokosch> not penalize ACCEPTS with having to support this, rather do it on an AST level

[11:29] <discord-raku-bot> <Nemokosch> that was a case where consistency manifested as the specific trumping the generic

[11:31] <discord-raku-bot> <Nemokosch> if one is able to declare that these smartmatches to quoting constructs are "magic", the generic meaning can stay saner (Matches are now hardcoded in everything smartmatch-related, in order to support that "magic")

[11:31] <discord-raku-bot> <Nemokosch> * to support that "magic", as normal, first-class behavior, that has further consequences

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:20] *** ab5tract joined
[12:25] *** frost joined
[12:26] *** frost left
[12:26] *** frost joined
[12:33] *** ab5tract left
[12:35] *** frost left
[12:43] *** frost joined
[12:46] *** frost left
[12:53] *** frost joined
[13:03] *** ab5tract joined
[13:19] *** ab5tract left
[13:29] *** ab5tract joined
[13:35] *** ab5tract left
[13:36] *** ab5tract joined
[14:04] *** frost left
[14:07] *** ab5tract left
[15:22] <Geth> ¬¶ rakudo/lizmat-WARNINGS: 445c57aabf | (Elizabeth Mattijsen)++ | 3 files

[15:22] <Geth> ¬¶ rakudo/lizmat-WARNINGS: Introduce $*WARNINGS and ENV<RAKU_WARNINGS>

[15:22] <Geth> ¬¶ rakudo/lizmat-WARNINGS: 

[15:22] <Geth> ¬¶ rakudo/lizmat-WARNINGS: - Introduces 4 new classes that provide different behaviours for warnings

[15:22] <Geth> ¬¶ rakudo/lizmat-WARNINGS: -  CX::Warn::Quietly - do *not* show warnings, similar to quietly

[15:22] <Geth> ¬¶ rakudo/lizmat-WARNINGS: -  CX::Warn::Fatal   - immediately throw a warning as an exception

[15:22] <Geth> ¬¶ rakudo/lizmat-WARNINGS: -  CX::Warn::Verbose - immediately show warnings with complete backtrace

[15:22] <Geth> ¬¶ rakudo/lizmat-WARNINGS: -  CX::Warn::Collect - collect warnings until END, then show with frequencies

[15:22] <Geth> ¬¶ rakudo/lizmat-WARNINGS: <‚Ä¶commit message has 21 more lines‚Ä¶>

[15:22] <Geth> ¬¶ rakudo/lizmat-WARNINGS: review: https://github.com/rakudo/rakudo/commit/445c57aabf

[15:23] <Geth> ¬¶ rakudo: lizmat++ created pull request #5206: Introduce $*WARNINGS and ENV<RAKU_WARNINGS>

[15:23] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/5206

[15:24] <lizmat> finally got around to doing that, has been bugging me for years

[15:46] <sjn> lizmat: nice! would it be sensible with a ::Collect-like class that you can trigger yourself? (e.g. if a fatal exception happens, you don't get a stack trace, but the previous N non-fatal messages in addition to the fatal one)

[15:47] <lizmat> sure, that's why I made it pluggable

[15:48] <discord-raku-bot> <Nemokosch> really good üòÑ

[16:03] <Geth> ¬¶ rakudo/main: 8db4181942 | (Elizabeth Mattijsen)++ | src/Raku/ast/type.rakumod

[16:03] <Geth> ¬¶ rakudo/main: RakuAST: Make "of" type determination more resilient

[16:03] <Geth> ¬¶ rakudo/main: 

[16:03] <Geth> ¬¶ rakudo/main: For some reason the old code ran fine when used inside the grammar,

[16:03] <Geth> ¬¶ rakudo/main: but died with programmatically built RakuAST::Trait::Of objects.

[16:03] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8db4181942

[16:29] <lizmat> m: dd (subset Foo).^refinement

[16:29] <camelia> rakudo-moar 8db418194: OUTPUT: ¬´Mu‚ê§¬ª

[16:29] <lizmat> m: Q|dd (subset Foo).^refinement|.AST(:run)

[16:29] <camelia> rakudo-moar 8db418194: OUTPUT: ¬´Any‚ê§¬ª

[16:29] <lizmat> nine: ^^ could that become an issue ?

[16:52] <Geth> ¬¶ rakudo/lizmat-WARNINGS: 467ce81b39 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[16:52] <Geth> ¬¶ rakudo/lizmat-WARNINGS: Get rid of debug code, vrurg++

[16:52] <Geth> ¬¶ rakudo/lizmat-WARNINGS: review: https://github.com/rakudo/rakudo/commit/467ce81b39

[17:18] <Geth> ¬¶ rakudo/main: d2c3e9314d | (Elizabeth Mattijsen)++ | src/Raku/ast/type.rakumod

[17:18] <Geth> ¬¶ rakudo/main: RakuAST: default subset.^refinement should be Mu

[17:18] <Geth> ¬¶ rakudo/main: 

[17:18] <Geth> ¬¶ rakudo/main: To make it match what happens using the base grammar

[17:18] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d2c3e9314d

[17:33] <Geth> ¬¶ rakudo/main: b77f6c44d9 | (Elizabeth Mattijsen)++ | t/12-rakuast/subset.rakutest

[17:33] <Geth> ¬¶ rakudo/main: RakuAST: add some more RakuAST::Type::Subset tests

[17:33] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b77f6c44d9

[17:34] <lizmat> ab5tract: did I miss any cases >

[17:34] <lizmat> ?

[17:34] <tellable6> lizmat, I'll pass your message to ab5tract

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:10] <nine> lizmat: 8db4181942 is definitely wrong. PRODUCE-META-OBJECT is meant to be called once. Use .meta-object to access the results

[18:11] <lizmat> nine: ack

[18:20] <Geth> ¬¶ rakudo/main: fb205b31a0 | (Elizabeth Mattijsen)++ | src/Raku/ast/type.rakumod

[18:20] <Geth> ¬¶ rakudo/main: RakuAST: use right method to get type object, nine++

[18:20] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fb205b31a0

[20:12] *** benchable6 left
[20:12] *** tellable6 left
[20:12] *** quotable6 left
[20:12] *** squashable6 left
[20:12] *** releasable6 left
[20:12] *** statisfiable6 left
[20:12] *** notable6 left
[20:12] *** committable6 left
[20:12] *** coverable6 left
[20:12] *** sourceable6 left
[20:12] *** nativecallable6 left
[20:12] *** greppable6 left
[20:12] *** evalable6 left
[20:12] *** unicodable6 left
[20:12] *** bisectable6 left
[20:12] *** reportable6 left
[20:12] *** shareable6 left
[20:12] *** linkable6 left
[20:12] *** bloatable6 left
[20:12] *** squashable6 joined
[20:13] *** quotable6 joined
[20:13] *** nativecallable6 joined
[20:13] *** evalable6 joined
[20:13] *** bisectable6 joined
[20:13] *** notable6 joined
[20:13] *** benchable6 joined
[20:13] *** greppable6 joined
[20:13] *** bloatable6 joined
[20:14] *** releasable6 joined
[20:14] *** linkable6 joined
[20:14] *** unicodable6 joined
[20:14] *** tellable6 joined
[20:14] *** statisfiable6 joined
[20:14] *** shareable6 joined
[20:14] *** sourceable6 joined
[20:15] *** reportable6 joined
[20:15] *** committable6 joined
[20:15] *** coverable6 joined
[20:46] *** ab5tract joined
[20:55] <ab5tract> o/

[20:55] <tellable6> 2023-02-14T17:34:26Z #raku-dev <lizmat> ab5tract: did I miss any cases >

[20:55] <ab5tract> lizmat: tests look good to me

[20:55] <lizmat> cool

[20:55] <ab5tract> unless you want to add one specifically for when it's an expression like 5 or /5/

[20:56] <ab5tract> to stretch the  wrapper code that is used in those cases

[20:57] <lizmat> ah, yes, that's what is needed, will do

[20:58] <lizmat> afk again&

[21:16] *** codesections left
[21:44] <lizmat> m: Q|subset Foo where 5; dd 5 ~~ Foo|.AST(:run)

[21:44] <camelia> rakudo-moar fb205b31a: OUTPUT: ¬´===SORRY!===‚ê§Unknown compilation input 'qast'‚ê§¬ª

[21:45] <lizmat> ab5tract ^^

[21:45] <ab5tract> That was working before

[21:45] <lizmat> ok, lemme see if I messed that up  :-(

[21:48] <lizmat> hmmm... I guess spectest doesn't test for it ?

[21:48] <ab5tract> it probably does, in that still-failing subset test file

[21:48] <ab5tract> which is overloaded imo

[21:50] <ab5tract> https://gist.github.com/ab5tract/7f095e93f6a95d2cf2c5cd4884d2a65e

[21:50] <ab5tract> ^^ lizmat 

[21:50] <ab5tract> those are all the test cases I collected

[21:51] <lizmat> thanks!

[21:51] <lizmat> and these all work on the base grammar, right ?

[21:51] <ab5tract> yup

[21:54] <ab5tract> feel free to add to roast, i haven't managed to get around to ceating a PR for it

[21:54] <lizmat> I'd say: just add it   :-)

[21:54] <ab5tract> I don't think I have push access on roast

[21:58] <lizmat> almost anybody has ?

[21:58] <lizmat> historically speaking

[22:00] <ab5tract> I'm open to having access. But in this case it might be quicker/easier for you to add

[22:00] <lizmat> ab5tract on github

[22:00] <lizmat> right ?

[22:00] <ab5tract> yup

[22:00] <lizmat> invite sent

[22:02] <ab5tract> thanks!

[22:03] <lizmat> jjatria: ok, so you're going to be able to cope with the change ?

[22:03] <jjatria> lizmat: I made a comment on https://github.com/rakudo/rakudo/issues/5201. Yeah: I think I can cope with that change

[22:04] <lizmat> yeah, saw it... :-)

[22:04] <jjatria> Ah, cool :)

[22:04] <lizmat> so I'm gonna mark those modules as "will be fixed" in the blin issue, ok ?

[22:05] <jjatria> Sure. I'll merge and let you know when I have a release minted

[22:05] <lizmat> okido  thanks!

[22:05] <jjatria> Woo~

[22:18] <lizmat> ab5tract: confirmed it worked with c17d5b2f2a1

[22:20] <discord-raku-bot> <Nemokosch> what dists does Blin check?

[22:21] <lizmat> ab5tract confirmed it worked with 0db0ea5128b03

[22:21] <lizmat> (your last commit on subsets)  so I borked it

[22:21] *** linkable6 left
[22:21] <ab5tract> :(

[22:22] *** linkable6 joined
[22:30] <lizmat> b915dd3a806c11353266 is indeed the breaker

[22:43] <ab5tract> am I crazy or am I unable to use Pair.new in RakuAST code?

[22:43] <ab5tract> can't do $_ => $value either, dies because it thinks I want to do assignment

[22:44] <lizmat> yeah, the grammar is pretty limited, it only knows :foo(42) and :bar<666>

[22:44] <lizmat> I think

[22:44] <ab5tract> hmm, so there is no way to create a pair that has a variable for a key

[22:45] <lizmat> there are RakuAST classes for that, no ?

[22:45] <lizmat> found the problem!

[22:45] <ab5tract> I need to pass it to EnumHOW

[22:45] <ab5tract> nice!

[22:46] <lizmat> running tests...

[22:48] <ab5tract> nine: Any idea how to create a pair with a variable for a key in RakuAST?

[22:51] <lizmat> meh, no spectest fails, but one subset test fail

[22:51] <lizmat> will continue looking at this tomorrow

[22:52] <lizmat> fg

[22:52] <ab5tract> sounds good!

[22:53] <ab5tract> good night lizmat

[23:00] <ab5tract> looks like I get what I need via nqp::shift(nqp::iterator(%hash))

[23:13] *** sena_kun left
[23:13] <jjatria> lizmat: done~

[23:56] *** ab5tract left
