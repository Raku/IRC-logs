[00:00] *** reportable6 left
[01:50] <Geth> ¦ JSON-Unmarshal/main: e3bcdb6e39 | (Vadim Belman)++ | lib/JSON/Unmarshal.rakumod

[01:50] <Geth> ¦ JSON-Unmarshal/main: Remove extra 'l' from $*JSON-UNMARSHALL-PARAMS and UnmarshallParams

[01:50] <Geth> ¦ JSON-Unmarshal/main: 

[01:50] <Geth> ¦ JSON-Unmarshal/main: It was there by mistake.

[01:50] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/commit/e3bcdb6e39

[03:30] *** reportable6 joined
[04:59] *** quotable6 left
[04:59] *** tellable6 left
[04:59] *** shareable6 left
[04:59] *** benchable6 left
[04:59] *** releasable6 left
[04:59] *** linkable6 left
[04:59] *** evalable6 left
[04:59] *** committable6 left
[04:59] *** squashable6 left
[04:59] *** greppable6 left
[04:59] *** nativecallable6 left
[04:59] *** bisectable6 left
[04:59] *** statisfiable6 left
[04:59] *** notable6 left
[04:59] *** coverable6 left
[04:59] *** sourceable6 left
[04:59] *** unicodable6 left
[04:59] *** reportable6 left
[04:59] *** shareable6 joined
[05:00] *** bisectable6 joined
[05:00] *** nativecallable6 joined
[05:00] *** greppable6 joined
[05:00] *** linkable6 joined
[05:01] *** statisfiable6 joined
[05:01] *** notable6 joined
[05:01] *** squashable6 joined
[05:02] *** unicodable6 joined
[05:02] *** releasable6 joined
[05:02] *** evalable6 joined
[05:02] *** reportable6 joined
[05:02] *** tellable6 joined
[05:25] *** squashable6 left
[05:27] *** squashable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:03] *** committable6 joined
[06:10] *** coverable6 joined
[07:10] *** reportable6 left
[07:10] *** coverable6 left
[07:10] *** greppable6 left
[07:10] *** bisectable6 left
[07:10] *** linkable6 left
[07:10] *** committable6 left
[07:10] *** nativecallable6 left
[07:10] *** notable6 left
[07:10] *** statisfiable6 left
[07:10] *** releasable6 left
[07:10] *** shareable6 left
[07:10] *** bisectable6 joined
[07:10] *** releasable6 joined
[07:10] *** notable6 joined
[07:10] *** statisfiable6 joined
[07:11] *** reportable6 joined
[07:11] *** nativecallable6 joined
[07:12] *** shareable6 joined
[07:43] *** sourceable6 joined
[08:12] *** greppable6 joined
[08:12] *** linkable6 joined
[08:15] *** coverable6 joined
[08:53] *** benchable6 joined
[08:59] *** rypervenche left
[08:59] *** rypervenche joined
[09:08] <Geth> ¦ rakudo/main: 5fe1bd8266 | ab5tract++ (committed using GitHub Web editor) | 3 files

[09:08] <Geth> ¦ rakudo/main: RakuAST: Add currently supported feed operators (#5374)

[09:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5fe1bd8266

[09:18] <lizmat> 951!  +3   ab5tract++

[09:35] <ab5tract> lizmat: so, what's next? ;)

[09:36] <lizmat> my proto token foo {*}

[09:36] <lizmat> that doesn't parse atm, it loses the name

[09:36] <ab5tract> oh, weird

[09:37] <ab5tract> I'll take a look

[09:37] <lizmat> also: @5341 #5342 #5343

[09:37] <lizmat> #5341 rather :-)

[09:47] <ab5tract> duh, I forgot about the issues.. thanks!

[09:55] <ab5tract> hmm, for the issue on once blocks, I see different behavior. the first time through it does give 42.

[09:56] <ab5tract> m: my $content = 'sub a() { once my $i = 42; ++$i }; dd a() xx 5'; shell Q:scalar<RAKUDO_RAKUAST=1 $*EXECUTABLE -e '$content'>

[09:56] <camelia> rakudo-moar 5fe1bd826: OUTPUT: «(1, 1, 1, 1, 1).Seq␤»

[09:56] <ab5tract> m: my $content = 'sub a() { once my $i = 42; dd $i++ }; a() xx 5'; shell Q:scalar<RAKUDO_RAKUAST=1 $*EXECUTABLE -e '$content'>

[09:56] <camelia> rakudo-moar 5fe1bd826: OUTPUT: «0␤0␤0␤0␤0␤»

[09:57] <lizmat> fwiw: Q|foo|.AST.EVAL does the same

[09:58] <lizmat> m: Q|sub a() { once my $i = 42; dd $i++ }; a() xx 5|.AST.EVAL

[09:58] <camelia> rakudo-moar 5fe1bd826: OUTPUT: «0␤0␤0␤0␤0␤»

[09:58] <ab5tract> I thought there was an easier way!

[09:59] <ab5tract> m: sub a() { once my $i  = 42; dd $i++ }; a() xx 5

[09:59] <camelia> rakudo-moar 5fe1bd826: OUTPUT: «42␤0␤0␤0␤0␤»

[09:59] <ab5tract> so that's different from what the ticket says we should expect

[10:02] <lizmat> m: sub a() { once my $i  = 42; dd $i++ }; a() for ^5

[10:02] <camelia> rakudo-moar 5fe1bd826: OUTPUT: «42␤0␤0␤0␤0␤»

[10:02] <lizmat> hmmm

[10:02] <ab5tract> your point still holds

[10:02] <ab5tract> m: my $i = 0; sub a() { once $i = 42; dd $i++ }; a() xx 2

[10:02] <camelia> rakudo-moar 5fe1bd826: OUTPUT: «42␤43␤»

[10:03] <ab5tract> m: Q| my $i = 0; sub a() { once $i = 42; dd $i++ }; a() xx 2 |.AST.EVAL

[10:03] <camelia> rakudo-moar 5fe1bd826: OUTPUT: «0␤1␤»

[10:03] <lizmat> right

[10:07] <ab5tract> now this is a real mystery.. all the QAST seems to be in place :)

[10:08] <ab5tract> how important is the :cuid flag ?

[10:11] <lizmat> I haz no idea

[10:20] <ab5tract> well, the QAST does differentiate in that the old frontend produces a call to p6assign, whereas RakuAST refers to calling infix:<=>

[10:21] *** notna joined
[10:21] <lizmat> well, that's probably the case for any assignment atm ?

[10:21] <ab5tract> yeah, it shouldn't be an issue

[10:22] <ab5tract> seems to be working well

[10:45] <ab5tract> hmmm.... could it be that 'p6stateinit' is never true in RakuAST? naively removing the QAST if check for 'p6stateinit' at leasts runs the once block (even if it fails spectacularly immediately thereafter

[10:45] <lizmat> could be, but that should also affect state variables

[10:46] <lizmat> I mean, a once block is basically a block that gets called when a hidden state variable isn't set yet

[10:46] <lizmat> right?

[10:49] <ab5tract> yeah, that seems to be the case

[10:50] <lizmat> at least, that's what I remembered from implementing "once" about 10 years ago

[10:50] <ab5tract> m: Q| sub a() { state $a = 42; $a++ }; dd a() xx 3 | . AST.EVAL

[10:50] <camelia> rakudo-moar 5fe1bd826: OUTPUT: «(42, 43, 44).Seq␤»

[10:51] <ab5tract> it calls the block at state init and then stores that in a lowered param (your hidden state var)

[11:20] <Geth> ¦ rakudo/main: 70944f73ca | (Elizabeth Mattijsen)++ | 2 files

[11:20] <Geth> ¦ rakudo/main: Fix setting properties of operators with ":" in their name

[11:20] <Geth> ¦ rakudo/main: 

[11:20] <Geth> ¦ rakudo/main: E.g. =:=

[11:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/70944f73ca

[11:25] <ab5tract> ah, it seems that there should be a container for the state var declared ..

[11:25] <lizmat> ++ab5tract 

[11:27] *** committable6 joined
[11:32] <ab5tract> if I'm a subclass of Foo, do I need to include children of Foo in a visit-children method?

[11:33] <ab5tract> seems likely

[11:34] <lizmat> yeah, that's why almost each class has a visit-children metho

[11:34] <lizmat> d

[11:34] <Geth> ¦ rakudo/main: ee170b9f4a | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[11:34] <Geth> ¦ rakudo/main: RakuAST: add "not-reducable" convenience method

[11:34] <Geth> ¦ rakudo/main: 

[11:34] <Geth> ¦ rakudo/main: Returns whether these properties indicate that the associated

[11:34] <Geth> ¦ rakudo/main: operator is *not* reducable.

[11:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ee170b9f4a

[11:34] <Geth> ¦ rakudo/main: 5841afb2a3 | (Elizabeth Mattijsen)++ | 2 files

[11:34] <Geth> ¦ rakudo/main: RakuAST: add operator applicability tests to classes

[11:34] <Geth> ¦ rakudo/main: 

[11:34] <Geth> ¦ rakudo/main: Whether an operator can be reduced, or used in a specific meta

[11:34] <Geth> ¦ rakudo/main: operator, is logic that needs to live in the RakuAST classes, since

[11:34] <Geth> ¦ rakudo/main: we want the same checks there that the Raku grammar is currently

[11:34] <Geth> ¦ rakudo/main: doing.

[11:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5841afb2a3

[11:34] <Geth> ¦ rakudo/main: 1626cbfb59 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[11:35] <Geth> ¦ rakudo/main: RakuAST: remove grammar tests for reducability / meta

[11:35] <Geth> ¦ rakudo/main: 

[11:35] <Geth> ¦ rakudo/main: These tests are now handled in the RakuAST:: classes.  Also remove

[11:35] <Geth> ¦ rakudo/main: now no longer needed helper methods.

[11:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1626cbfb59

[11:48] <ab5tract> ++++

[11:49] *** quotable6 joined
[11:49] <Geth> ¦ rakudo/main: 76ad99d45c | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[11:49] <Geth> ¦ rakudo/main: RakuAST: remove the %additive hash

[11:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/76ad99d45c

[11:55] <Geth> ¦ rakudo/main: 6da14defad | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[11:55] <Geth> ¦ rakudo/main: RakuAST: remove the %additive_iffy hash

[11:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6da14defad

[11:58] *** sjn left
[11:58] *** sjn joined
[12:00] *** reportable6 left
[12:00] <Geth> ¦ rakudo/main: e337c82350 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:00] <Geth> ¦ rakudo/main: RakuAST: remove the %exponentiation hash

[12:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e337c82350

[12:03] *** reportable6 joined
[12:05] <Geth> ¦ rakudo/main: e026c1b05e | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:05] <Geth> ¦ rakudo/main: RakuAST: remove the %symbolic_unary hash

[12:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e026c1b05e

[12:10] <Geth> ¦ rakudo/main: 65789659d1 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:10] <Geth> ¦ rakudo/main: RakuAST: remove the %dotty_infix hash

[12:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/65789659d1

[12:17] <Geth> ¦ rakudo/main: 6fa642c676 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:17] <Geth> ¦ rakudo/main: RakuAST: remove the %multiplicative hash

[12:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6fa642c676

[12:22] <Geth> ¦ rakudo/main: c19e7a1c9a | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:22] <Geth> ¦ rakudo/main: RakuAST: remove the %multiplicative_iffy hash

[12:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c19e7a1c9a

[12:28] <Geth> ¦ rakudo/main: 4b09c649e2 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:28] <Geth> ¦ rakudo/main: RakuAST: remove the %replication(_xx) hashes

[12:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4b09c649e2

[12:32] <ab5tract> so it seemed to me like the reasonable approach to getting that state container declared was to do a PERFORM-BEGIN that adds a VarDeclaration::Simple via $resolver.current-scope.add-generated-lexical-declaration

[12:32] <ab5tract> but it barfs unintelligibly (to me)

[12:33] <Geth> ¦ rakudo/main: c821ffebdc | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:33] <Geth> ¦ rakudo/main: RakuAST: remove the %concatenation hash

[12:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c821ffebdc

[12:39] <Geth> ¦ rakudo/main: 5e10f29564 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:39] <Geth> ¦ rakudo/main: RakuAST: remove the %junctive_and(_iffy) hashes

[12:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5e10f29564

[12:44] <Geth> ¦ rakudo/main: b60812ea0f | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:44] <Geth> ¦ rakudo/main: RakuAST: remove the %junctive_or(_iffy) hashes

[12:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b60812ea0f

[12:44] <Geth> ¦ rakudo/main: 6807083550 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:44] <Geth> ¦ rakudo/main: RakuAST: remove the %named_unary hash

[12:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6807083550

[12:49] <Geth> ¦ rakudo/main: 84419efb92 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:49] <Geth> ¦ rakudo/main: RakuAST: remove the %structural hash

[12:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/84419efb92

[12:54] <Geth> ¦ rakudo/main: c978bf2130 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:54] <Geth> ¦ rakudo/main: RakuAST: remove %chaining hash

[12:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c978bf2130

[12:58] <ab5tract> "bindpos_o requires a concrete object (got a VMNull type object instead)" <-- this implies that an argument to a subroutine is undefined, right?

[12:59] <lizmat> it implies the bindpos_o was tried on a VMNull object

[13:00] <lizmat> which could be a class not resolved

[13:00] <lizmat> generally, but probably not in this case

[13:03] <Geth> ¦ rakudo/main: 8ec9ae8bfb | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[13:03] <Geth> ¦ rakudo/main: RakuAST: remove the %tight_xxx hash family

[13:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8ec9ae8bfb

[13:06] <Geth> ¦ rakudo/main: e0864b19bb | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[13:06] <Geth> ¦ rakudo/main: RakuAST: remove the %ternary hash

[13:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e0864b19bb

[13:06] <lizmat> afk for a few hours&

[13:11] <ab5tract> lizmat: enjoy your afternoon!

[13:11] <ab5tract> I'm about to step into the sunshine myself

[13:11] <ab5tract> Just cracked the once issue :D

[13:17] *** notna left
[13:37] <jdv> [Coke]: do you believe the jvm build will work before 9/21?

[13:38] <jdv> ab5tract: wut tz r u?

[13:49] <ab5tract> I'm still in Amsterdam

[13:57] <Geth> ¦ rakudo: ab5tract++ created pull request #5375: RakuAST: Get 'once' statement prefix fully working

[13:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5375

[14:00] <ab5tract> jdv: what about you?

[14:14] *** codesections joined
[14:17] <jdv> et

[14:59] *** codesections left
[15:08] <Geth> ¦ roast: usev6++ created pull request #838: Teach test_summary about #rakuast fudging

[15:08] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/838

[15:49] *** guifa joined
[16:36] <Geth> ¦ roast: c17f954da4 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | test_summary

[16:36] <Geth> ¦ roast: Teach test_summary about #rakuast fudging (#838)

[16:36] <Geth> ¦ roast: 

[16:36] <Geth> ¦ roast: This is similar to what was done in

[16:36] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/fa9cd8ef55.

[16:36] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c17f954da4

[16:37] *** linkable6 left
[16:38] <Geth> ¦ rakudo/main: 5667eaa784 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[16:38] <Geth> ¦ rakudo/main: RakuAST: remove %conditional_ff hash

[16:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5667eaa784

[16:40] *** linkable6 joined
[16:45] <Geth> ¦ rakudo/main: 700e52485e | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[16:45] <Geth> ¦ rakudo/main: RakuAST: remove %item_assignment hash

[16:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/700e52485e

[16:51] <Geth> ¦ rakudo/main: 8ed9f68110 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[16:51] <Geth> ¦ rakudo/main: RakuAST: remove %adverb hash

[16:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8ed9f68110

[16:56] <Geth> ¦ rakudo/main: ec4d75ca6d | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[16:56] <Geth> ¦ rakudo/main: RakuAST: remove %list_assignmenrt hash

[16:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ec4d75ca6d

[17:01] <Geth> ¦ rakudo/main: 628c71bdac | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[17:01] <Geth> ¦ rakudo/main: RakuAST: remove the %loose_xxx hashes

[17:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/628c71bdac

[17:09] <Geth> ¦ rakudo/main: 44ba063696 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[17:09] <Geth> ¦ rakudo/main: RakuAST: remove %comma hash

[17:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/44ba063696

[17:15] <Geth> ¦ rakudo/main: 5881f0b960 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[17:15] <Geth> ¦ rakudo/main: RakuAST: remove %list_infix hash

[17:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5881f0b960

[17:27] <Geth> ¦ rakudo/main: 577498bcb5 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[17:27] <Geth> ¦ rakudo/main: RakuAST: remove %sequencer hash

[17:27] <Geth> ¦ rakudo/main: 

[17:27] <Geth> ¦ rakudo/main: and the %list_assignment hash which apparently wasn't being used

[17:27] <Geth> ¦ rakudo/main: anymore.  This was the final %prec hash!  Whee!

[17:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/577498bcb5

[17:52] <Geth> ¦ rakudo/main: 8631e3ab0b | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[17:52] <Geth> ¦ rakudo/main: RakuAST: don't use hashes in prefix/postfix checking

[17:52] <Geth> ¦ rakudo/main: 

[17:52] <Geth> ¦ rakudo/main: Another step towards not using hashes for EXPR parsing

[17:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8631e3ab0b

[18:00] *** reportable6 left
[18:33] <Geth> ¦ rakudo/main: 3a70184aa1 | (Elizabeth Mattijsen)++ | 2 files

[18:33] <Geth> ¦ rakudo/main: RakuAST: conform to the use of "chain"

[18:33] <Geth> ¦ rakudo/main: 

[18:33] <Geth> ¦ rakudo/main: Instead of "chaining".  Originally I thought to de-huffmanize

[18:33] <Geth> ¦ rakudo/main: "chain", but then I realized it was not being used as a verb,

[18:33] <Geth> ¦ rakudo/main: but more as an adjective.  Anyways, this is closer to the legacy

[18:33] <Geth> ¦ rakudo/main: wording, so less chance of weird problems occurring in the future.

[18:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a70184aa1

[18:44] <ab5tract> lizmat: should I re-work the PR to fix @compstuff bindpos_o failure to ensure that the local @compstuff gets saved back into the Code object?

[18:47] <lizmat> yes, I think the problem is there: Code.@!compstuff perhaps *should* have been initialized already ?

[18:47] <lizmat> it feels like covering up a bug, rather than fixing one 

[19:02] *** lizmat_ joined
[19:06] *** lizmat left
[19:06] *** kjp left
[19:06] *** reportable6 joined
[19:09] *** lizmat_ left
[19:10] *** lizmat joined
[19:14] *** MasterDuke left
[19:31] <ab5tract> I see: so IMPL-STUB-CODE is not already called in this codepath, which is where @!compstuff gets set. 

[20:05] <lizmat> aha!

[20:05] <lizmat> :-)

[20:06] * lizmat is starting to wonder whether it would make sense to do the unicode property database in Raku

[20:36] <discord-raku-bot> <nemokosch> how can I inspect a whateverstar in vanilla Raku without whatever-currying constantly getting in the way?

[20:37] <discord-raku-bot> <nemokosch> okay, this is really funny

[20:37] <discord-raku-bot> <nemokosch> if I store it into a scalar variable, that's gonna protect from this behavior

[20:37] <discord-raku-bot> <nemokosch> but apparently, at least in the REPL because I'm getting paranoid now, a sigilless "variable" won't protect you

[20:38] <discord-raku-bot> <nemokosch> m: my \wut = *; dd wut ~~ Whatever

[20:38] <discord-raku-bot> <Raku eval>  Bool::True 

[20:38] <discord-raku-bot> <nemokosch> okay, then it's another REPL weirdness

[20:38] <discord-raku-bot> <nemokosch> quite unexpected

[20:51] <japhb> lizmat: My only concern with Unicode property DB being lifted into Raku is performance, because my terminal code needs to do a LOT of unicode property examination (multiple per codepoint) in order to lay out strings properly.  So I tend to be hitting that code pretty hard.

[21:03] *** NemokoschKiwi joined
[21:03] <NemokoschKiwi> bisectable: say -Inf .. 'Z'

[21:03] <bisectable6> NemokoschKiwi, Will bisect the whole range automagically because no endpoints were provided, hang tight

[21:04] <bisectable6> NemokoschKiwi, Output on all releases: https://gist.github.com/60f50328714ae4de1e9b2370ea4beabe

[21:04] <bisectable6> NemokoschKiwi, Bisecting by output (old=2017.05 new=2017.06) because on both starting points the exit code is 1

[21:04] <bisectable6> NemokoschKiwi, bisect log: https://gist.github.com/144e805ea5dad36e9548248ec2f6c472

[21:04] <bisectable6> NemokoschKiwi, (2017-06-07) https://github.com/rakudo/rakudo/commit/e538cbc5464447c4a0cf217119a9ff30bd74d765

[21:04] <bisectable6> NemokoschKiwi, Output on all releases and bisected commits: https://gist.github.com/0b114c05ad22f313485f1e297cbc811b

[21:05] <NemokoschKiwi> Hm, interesting, I expected a change somewhere on the way

[21:06] *** NemokoschKiwi left
[21:45] <lizmat> japhb: "multiple per codepoint"   that feels like currently multiple hash lookups, that maybe could be done smarter

[21:55] <japhb> lizmat: I'd love something smarter!

[21:56] <japhb> See https://github.com/japhb/Text-MiscUtils/blob/master/lib/Text/MiscUtils/Layout.rakumod#L22-L40 for one example routine that itself is used as a primitive by a lot of other routines.

[21:56] <japhb> I guess these days %ignore should be a constant

[21:58] <lizmat> yes, and actually I would make it a Map

[21:58] <lizmat> Sets, by design, are keyed on the .WHICH, so that's relatively a lot of work

[21:59] <japhb> Ooh, that could be a quick win right off.  I wrote this code quite a while ago, so hadn't even been thinking about that bit.

[21:59] <japhb> Still, my original point was that even nerfing the handling of %ignore, that code is really painfully expensive.

[21:59] <lizmat> my %ignore is Map = < Mn Mc Me Cc Cf Cs Co Cn > Z=> 1 xx *

[22:00] <japhb> Where I can get away with the cache not ballooning out of control, I wrap duospace-width in a cache that I can ensure isn't being used concurrently in the calling code.

[22:00] <japhb> Because otherwise this one routine becomes pretty much a bottleneck for the entire layout stack.

[22:00] <lizmat> also: you can combine the grep and the map into a single map

[22:01] <lizmat> .map({ .uniprop('East_Asian_Width') unless %ignore{.uniprop}

[22:01] <lizmat> })

[22:02] <japhb> I always forget about that ability to fold away in map.  Any relative expected performance difference between grep+map and map...unless?

[22:03] <lizmat> really depends on how expensive .uniprop is

[22:03] <lizmat> since it is not very (I think), it could be quite significant

[22:04] <lizmat> and now I'm going to be to think about it some more  :-)

[22:04] <japhb> :-D

[22:04] <japhb> \o/ Successful nerd snipe!

[22:21] *** kjp joined
[22:24] <japhb> Annoyingly, can't declare a constant and use `is Map` at the same time.  :-P

[22:25] <discord-raku-bot> <nemokosch> constants default to Maps

[22:25] <discord-raku-bot> <nemokosch> just read that a couple of minutes ago haha

[22:29] <discord-raku-bot> <nemokosch> huh, really? Does Inf..'Z' produce a decent error only because the body of the Range constructor tries to retrieve the coerced value? ...

[22:30] <japhb> m: my constant %foo = < a b c > Z=> 1 xx *; dd %foo;

[22:30] <camelia> rakudo-moar 3a70184aa: OUTPUT: «Map.new((:a(1),:b(1),:c(1)))␤»

[22:30] <japhb> HUH

[22:30] <japhb> I'll be darned.

[22:52] <discord-raku-bot> <nemokosch> https://github.com/rakudo/rakudo/blob/3a70184aa1bade31a17f09b662bb55179b148071/src/core.c/Range.rakumod#L13

[22:52] <discord-raku-bot> <nemokosch> here, would it be okay to replace the sigilless and nqp::decont to a $variable?

[22:58] <gfldex> `constant` declares a `term:<%foo>` and binds to it.

[23:01] <ab5tract> m: my constant %foo = <a b c> X=> 1; dd %foo

[23:01] <camelia> rakudo-moar 3a70184aa: OUTPUT: «Map.new((:a(1),:b(1),:c(1)))␤»

[23:01] <ab5tract> X=> is one of my absolute favorites

[23:03] <gfldex> m: my constant %foo = <a b c> »=>» 1; dd %foo

[23:03] <camelia> rakudo-moar 3a70184aa: OUTPUT: «Map.new((:a(1),:b(1),:c(1)))␤»

[23:04] <gfldex> I always have to think when I see X. A hyper fits better into my brain.

[23:16] <Geth> ¦ rakudo: ab5tract++ created pull request #5376: RakuAST: Fix once blorst not running

[23:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5376

[23:17] <ab5tract> gfldex: I've got to figure out how to easily type those quote marks, then I might use them a bit more often :)

[23:18] <gfldex> I had the same issue until I made them easy to type. :)

[23:22] <discord-raku-bot> <nemokosch> >>=>>> actually works here xD

[23:24] *** nine left
[23:24] *** nine joined
[23:25] <discord-raku-bot> <nemokosch> Ouch. The way -Inf..'Z' fails is indeed dependent on the internal logic of the range constructor

[23:26] <discord-raku-bot> <nemokosch> when I added the type check for *..'Z', it constructed a grotesque range that ends with a Failure instance

[23:26] <discord-raku-bot> <nemokosch> however, when passed the maximum value as $max > 0 ?? $max !! $max instead of just $max, suddenly I got the same behavior

[23:31] <gfldex> I'm using xcompose and the following script to keep Linux and Windows in sync. The both can't agree on how keys should be called (hence the script). https://codeberg.org/gfldex/raku-xcompose/src/branch/master/xcompose.raku

[23:54] <Geth> ¦ File-Find/main: afb86c0405 | (Joseph Brenner)++ | 2 files

[23:54] <Geth> ¦ File-Find/main: Allow junctions with name and exclude (Fixes #36)

[23:54] <Geth> ¦ File-Find/main: review: https://github.com/raku-community-modules/File-Find/commit/afb86c0405

[23:54] <Geth> ¦ File-Find/main: 9948fd63c1 | (Márton Polgár)++ (committed using GitHub Web editor) | 2 files

[23:54] <Geth> ¦ File-Find/main: Merge pull request #37 from doomvox/junction_arguments

[23:54] <Geth> ¦ File-Find/main: 

[23:54] <Geth> ¦ File-Find/main: Allow junctions with name and exclude

[23:54] <Geth> ¦ File-Find/main: review: https://github.com/raku-community-modules/File-Find/commit/9948fd63c1

