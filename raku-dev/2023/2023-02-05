[00:01] *** reportable6 left
[00:04] *** reportable6 joined
[01:16] *** guifa joined
[04:23] *** linkable6 left
[04:23] *** evalable6 left
[04:24] *** evalable6 joined
[04:25] *** linkable6 joined
[04:26] *** epony left
[05:30] *** quotable6 left
[05:30] *** reportable6 left
[05:30] *** bloatable6 left
[05:30] *** coverable6 left
[05:30] *** evalable6 left
[05:30] *** releasable6 left
[05:30] *** shareable6 left
[05:30] *** squashable6 left
[05:30] *** tellable6 left
[05:30] *** unicodable6 left
[05:30] *** sourceable6 left
[05:30] *** linkable6 left
[05:30] *** committable6 left
[05:31] *** sourceable6 joined
[05:31] *** committable6 joined
[05:31] *** releasable6 joined
[05:31] *** unicodable6 joined
[05:31] *** quotable6 joined
[05:31] *** squashable6 joined
[05:32] *** bloatable6 joined
[05:32] *** coverable6 joined
[05:32] *** linkable6 joined
[05:32] *** evalable6 joined
[05:32] *** tellable6 joined
[05:33] *** reportable6 joined
[05:33] *** shareable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:02] *** linkable6 left
[07:02] *** evalable6 left
[07:03] *** linkable6 joined
[07:06] *** evalable6 joined
[08:25] <Geth> ¦ rakudo: usev6++ created pull request #5187: [JVM] Set Xmx4G for building Rakudo
[08:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5187
[09:05] *** sivoais left
[09:55] *** sivoais joined
[09:57] *** sena_kun joined
[10:04] <nine> m: module A { module B { module C { module D { say B::.keys } } } }
[10:04] <camelia> rakudo-moar e45436ef0: OUTPUT: «(C)␤»
[10:05] <nine> m: module A::B::C::D { say B::.keys }'
[10:05] <camelia> rakudo-moar e45436ef0: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> module A::B::C::D { say B::.keys }⏏'␤    expecting any of:␤        infix␤        infix stopper␤        stat…»
[10:05] <nine> m: module A::B::C::D { say B::.keys }
[10:05] <camelia> rakudo-moar e45436ef0: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    B used at line 1␤␤»
[10:05] <nine> I'd claim that these should give the same result
[10:06] <nine> (yes, I should have used package instead of module, but that doesn't change the result)
[10:41] *** sena_kun left
[10:44] *** sena_kun joined
[11:33] <Geth> ¦ nqp: usev6++ created pull request #797: [JVM] Add op jvmgetunicodeversion
[11:33] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/797
[11:33] <Geth> ¦ rakudo: usev6++ created pull request #5188: [JVM] Add support for $?UNICODE-VERSION
[11:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5188
[11:41] *** ab5tract joined
[11:42] <ab5tract> nine: yeah, I think that is a reasonable claim :)
[11:44] <Geth> ¦ rakudo/main: e1899640a9 | (Elizabeth Mattijsen)++ | 3 files
[11:44] <Geth> ¦ rakudo/main: RakuAST: merge ::Isms into RakuAST::Pragma
[11:44] <Geth> ¦ rakudo/main: 
[11:44] <Geth> ¦ rakudo/main: - also prepare RakuAST::Pragma to handle more arguments
[11:44] <Geth> ¦ rakudo/main: - change interface to use nameds only as we now have more of them
[11:44] <Geth> ¦ rakudo/main: - adapt calls to ::Pragma accordingly
[11:44] <Geth> ¦ rakudo/main: - adapt deparsing accordingly
[11:44] <Geth> ¦ rakudo/main: - no tests needed adaptation, as none were made yet
[11:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e1899640a9
[11:47] <Geth> ¦ rakudo/main: df1fbfedf6 | (Elizabeth Mattijsen)++ | src/Raku/ast/pragma.rakumod
[11:47] <Geth> ¦ rakudo/main: Disable MONKEY- pragmas without meaning for now
[11:47] <Geth> ¦ rakudo/main: 
[11:47] <Geth> ¦ rakudo/main: These were added a long time ago, but never had any meaning associated
[11:47] <Geth> ¦ rakudo/main: with them apart from them having a funny name.  Nothing could be found
[11:47] <Geth> ¦ rakudo/main: in the design documents either.
[11:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/df1fbfedf6
[11:51] <ab5tract> nine: I see you've been working on adding an `$!is-stub` to the packages
[11:52] <ab5tract> is that all wired in now or is it a WIP?
[11:53] <ab5tract> I think the compiler needs to (re-)learn about stubbing
[11:55] <ab5tract> nvm, according to the comment in PERFORM-BEGIN, it's not actually ready yet
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:07] <[Tux]> Rakudo v2022.12-1-gd52342eb0 (v6.d) on MoarVM 2022.12-15-g6b456a6c0
[12:07] <[Tux]> csv-test-xs-20      0.412 -  0.424
[12:07] <[Tux]> test-t --race       0.851 -  1.054
[12:07] <[Tux]> csv-ip5xs           0.822 -  0.873
[12:07] <[Tux]> test-t              1.423 -  1.441
[12:07] <[Tux]> csv-parser          3.801 -  3.848
[12:07] <[Tux]> csv-ip5xs-20        5.343 -  5.412
[12:07] <[Tux]> test                6.494 -  6.780
[12:07] <[Tux]> test-t-20 --race    6.806 -  7.016
[12:07] <[Tux]> test-t-20          20.521 - 22.274
[12:29] <ab5tract> Can't wait to see more dramatic shifts in the right direction on these tests [Tux]
[12:29] <discord-raku-bot> <Nemokosch> I don't know what good comes from posting these results all the time...
[12:29] <discord-raku-bot> <Nemokosch> especially now when optimizations are not the primary concern clearly
[12:30] <discord-raku-bot> <Nemokosch> Another note about benchmarks: perhaps I said this but they can easily become unfair, without running the new spectests on the older versions
[12:31] <discord-raku-bot> <Nemokosch> because the language itself shifts when contradictions to implied behavior are noticed
[12:37] <ab5tract> I don't know, I think it's fair to have a relatively arbitrary benchmark.
[12:38] <ab5tract> I wouldn't say it should be a *primary indicator* for the project or anything
[12:38] <ab5tract> It's been incredible to watch those numbers halve or better when various general language optimizations have been merged
[12:39] <ab5tract> But I guess I also haven't paid much attention to how frequently they might be posted
[12:43] <ab5tract> And IIRC, one of the ultimate pushing points for RakuAST's development was when we had the most recent performance regression
[12:44] <discord-raku-bot> <Nemokosch> I think it's fairly uncontroversial that correctness should come before performance
[12:44] <ab5tract> obviously
[12:44] <discord-raku-bot> <Nemokosch> and unfortunately optimizations are a usual source of behavior regressions. I'm not saying that this is a hard law of nature but I'd always take these out-of-context benchmarks with a grain of salt
[12:45] <discord-raku-bot> <Nemokosch> because it's very possible that a performance regression is simply related to a bugfix
[12:45] <discord-raku-bot> <Nemokosch> meaning that the previous state was simply invalid, an unfair comparison
[12:46] <ab5tract> Nemokosch: Ah yes, I see your concern
[12:46] <tellable6> ab5tract, I'll pass your message to Nemokosch
[12:47] <discord-raku-bot> <Nemokosch> it would be interesting to run current spectests against older versions, too
[12:47] <discord-raku-bot> <Nemokosch> we'd get a more complete picture, I would hope
[12:47] <ab5tract> Yeah, that is an interesting thought.
[12:50] <lizmat> I'd always welcome more metrics, but spectests are intrinsically a bad benchmark, because most code doesn't run long enough to get optimized
[12:51] <Geth> ¦ rakudo/main: dbbd515a67 | (Elizabeth Mattijsen)++ | src/Raku/ast/pragma.rakumod
[12:51] <Geth> ¦ rakudo/main: Add support for more pragmas
[12:51] <Geth> ¦ rakudo/main: 
[12:51] <Geth> ¦ rakudo/main: Namely: soft attributes invocant parameters variables
[12:51] <Geth> ¦ rakudo/main: 
[12:51] <Geth> ¦ rakudo/main: Some of these don't actually work yet, but didn't work before: the
[12:51] <Geth> ¦ rakudo/main: original code has been ported
[12:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dbbd515a67
[12:51] <lizmat> 659/1355  supporting "use soft" gave us another file
[12:58] <ab5tract> lizmat: I merged with main and now my branch is giving a sorry: 'Error while compiling, type X::Parameter::InvalidType \n typename: RakuAST::Nqp'
[12:59] <lizmat> m: use experimental :rakuast; dd RakuAST::Nqp
[12:59] <camelia> rakudo-moar df1fbfedf: OUTPUT: «You cannot deparse a RakuAST::Nqp type object␤  in any DEPARSE at src/Raku/ast/base.rakumod line 291␤  in block <unit> at <tmp> line 1␤␤»
[12:59] <lizmat> m: use experimental :rakuast; dd RakuAST::Nqp.new("say","foo")
[12:59] <camelia> rakudo-moar df1fbfedf: OUTPUT: «nqp::say("foo")␤»
[12:59] <lizmat> looks like it works for me
[13:00] <lizmat> ?
[13:00] <Geth> ¦ rakudo/main: 0e99334e5f | (Jared Miller)++ (committed by Christian Bartolomäus) | 10 files
[13:00] <Geth> ¦ rakudo/main: Fix minor non-comment typos
[13:00] <Geth> ¦ rakudo/main: 
[13:00] <Geth> ¦ rakudo/main: There are plenty of comment related typos
[13:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0e99334e5f
[13:00] <ab5tract> let me merge again
[13:02] <discord-raku-bot> <Nemokosch> Oh sure, I don't mean for benchmarking, just for retrospective validation
[13:02] <ab5tract> hmm, looks like it went through fine the next time around after a rebase
[13:02] <lizmat> *phew*
[13:03] <discord-raku-bot> <Nemokosch> Something that was "valid Raku" in 2016 might be failing everywhere in 2023
[13:03] <ab5tract> lizmat: actually wait, nope :(
[13:04] <lizmat> ab5tract: could you give me a golf?
[13:05] <ab5tract> of the branch? probably not :) ... should have mentioned the sorry happens during compilation
[13:05] <ab5tract> also seems to happen when I'm on `main` with current upstream
[13:05] *** linkable6 left
[13:05] *** evalable6 left
[13:05] <ab5tract> This is after a `make clean`
[13:07] <ab5tract> it happens while compiling the core setting
[13:07] *** linkable6 joined
[13:08] *** evalable6 joined
[13:09] <lizmat> I'm sorry, I'm not seeing that  :-(
[13:25] <ab5tract> Anyone else on Linux that can check?
[13:29] <Geth> ¦ rakudo/main: 5dc5bb7147 | (Elizabeth Mattijsen)++ | src/Raku/ast/pragma.rakumod
[13:29] <Geth> ¦ rakudo/main: RakuAST: make "use soft foo" a NYI
[13:29] <Geth> ¦ rakudo/main: 
[13:29] <Geth> ¦ rakudo/main: Instead of silently ignoring any arguments
[13:29] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5dc5bb7147
[13:29] <lizmat> ab5tract: fwiw, it still feels like an incomplete merge somehow ?
[13:30] <ab5tract> make realclean fixed it
[13:30] <ab5tract> *phew*
[13:30] <lizmat> you may have needed to reconfigure
[13:30] <lizmat> I always do that standard nowadays, with a "make clean"
[13:30] <lizmat> a lot less issues with broken precomps that way
[13:31] <lizmat> also, you might want to install "Repository::Precomp::Cleanup"
[13:31] <lizmat> and run cleanup-precomp every now and then
[13:31] <lizmat> I just did:
[13:32] <lizmat> % cleanup-precomp
[13:32] <lizmat> Freed 220,960,812 bytes from 7 repositories.
[13:32] <lizmat> it basically removes *all* precomps that were not make with the current Compiler.id
[13:32] <lizmat> *made
[13:33] <ab5tract> ahh, nice!
[13:51] <ab5tract> \o/
[13:52] <ab5tract> I solved the issue with 'class F::B {}; subset F where 5; my F $f = 5; die unless F::.keys.grep("B")'
[13:53] <ab5tract> now only two tests failing in my corpus.. the proper hiding of my scoped subsets and the issues with WhateverCode
[13:53] <Geth> ¦ rakudo/main: 47408ed8a7 | (Elizabeth Mattijsen)++ | src/Raku/ast/statements.rakumod
[13:53] <Geth> ¦ rakudo/main: RakuAST: properly handle "use lib" errors
[13:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/47408ed8a7
[13:53] <lizmat> which brings us to 660/1355 (t/spec/S10-packages/require-and-use.t now passes)
[14:18] <nine> bash config.status is required after a file got added to the core
[14:29] <ab5tract> nine++
[14:29] <ab5tract> lizmat++
[14:29] <ab5tract> increments for everybody!
[14:30] <lizmat> ab5tract++
[14:30] <lizmat> indeed
[14:30] <Geth> ¦ rakudo/main: 91965978a8 | (Elizabeth Mattijsen)++ | 3 files
[14:30] <Geth> ¦ rakudo/main: RakuAST: move "use lib" handling to RakuAST::Pragma
[14:30] <Geth> ¦ rakudo/main: 
[14:30] <Geth> ¦ rakudo/main: This means that RakuAST::Statement::No has now basically become an
[14:30] <Geth> ¦ rakudo/main: empty husk.  And that RakuAST::Statement::Use now only handles
[14:30] <Geth> ¦ rakudo/main: actual loading of modules and not handle any pragmas anymore.  Which
[14:30] <Geth> ¦ rakudo/main: allowed for a significant simplification.
[14:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/91965978a8
[14:33] <ab5tract> Hey nine, you know how you said I needed to resolve the current package at attach time? How come the package code doesn't do that?
[14:35] <Geth> ¦ rakudo/main: 6405f37937 | (Stefan Seifert)++ | src/Raku/ast/resolver.rakumod
[14:35] <Geth> ¦ rakudo/main: RakuAST: look up names not only lexically but also in packages
[14:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6405f37937
[14:35] <Geth> ¦ rakudo/main: 46982a940b | (Stefan Seifert)++ | 2 files
[14:35] <Geth> ¦ rakudo/main: RakuAST: fix resolver in dynamically compiled code missing symbols
[14:35] <Geth> ¦ rakudo/main: 
[14:35] <Geth> ¦ rakudo/main: The resolver used for resolving symbols in dynamically compiled code
[14:35] <Geth> ¦ rakudo/main: needs to be the resolver as it was at the time when we created the stub
[14:35] <Geth> ¦ rakudo/main: for that piece of code, because the resolver's state then reflects the
[14:35] <Geth> ¦ rakudo/main: lexical environment that the code is defined in.
[14:35] <Geth> ¦ rakudo/main: 
[14:35] <Geth> ¦ rakudo/main: So use a deep clone of the resolver in the "lexical not found" callback.
[14:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/46982a940b
[14:52] <ab5tract> hmm, I was hoping this new patch from nine would fix this issue: 'my subset P::F where 5; "my P::F \$f = 5".EVAL' <--- works
[14:52] <ab5tract> 'my subset P::F where 5; my P::F $f = 5' <--- malformed my
[14:57] <nine> Ah I think for that the new code in the resolver would need to learn about multi-part names.
[15:03] <ab5tract> would that involve adding new variants to `resolve-name` and friends that handle parts? I guess I'm having trouble conceptualizing that change
[15:04] <ab5tract> I don't suppose you have the tuits? :)
[15:21] <nine> IMPL-RESOLVE-NAME-IN-PACKAGES needs to be expanded. Honestly I don't know if I have the smarts today to do this. FOSDEM is somewhat exhausting
[15:27] <ab5tract> oh, no worries! I forgot FOSDEM is today
[15:27] <ab5tract> I think I understand what you mean.. let me give it a try
[15:29] <nine> ++ab5tract
[15:44] *** linkable6 left
[15:44] *** evalable6 left
[15:45] *** evalable6 joined
[15:45] *** linkable6 joined
[16:23] <Geth> ¦ rakudo/main: 32a733c553 | (Elizabeth Mattijsen)++ | 5 files
[16:23] <Geth> ¦ rakudo/main: RakuAST: Eradicate Statement::No class
[16:23] <Geth> ¦ rakudo/main: 
[16:23] <Geth> ¦ rakudo/main: Since all use of "no foo" will be pragmas for the foreseeable future,
[16:23] <Geth> ¦ rakudo/main: it doesn't make sense to keep the class around, but instead directly
[16:23] <Geth> ¦ rakudo/main: refer to the RakuAST::Pragma class directly in the actions.
[16:23] <Geth> ¦ rakudo/main: 
[16:23] <Geth> ¦ rakudo/main: This allows further simplifications, and changing tests for
[16:23] <Geth> ¦ rakudo/main: RakuAST::Statement::No to RakuAST::Pragma
[16:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/32a733c553
[16:35] <ab5tract> dang, I'm getting nowhere
[16:50] <Geth> ¦ rakudo/main: 403b680acd | (Elizabeth Mattijsen)++ | src/Raku/ast/pragma.rakumod
[16:50] <Geth> ¦ rakudo/main: RakuAST: don't allow "use lib" inside a package statement
[16:50] <Geth> ¦ rakudo/main: 
[16:50] <Geth> ¦ rakudo/main: This check was omitted so far.
[16:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/403b680acd
[16:51] <lizmat> brings us to 661 / 1355  (t/spec/S04-phasers/end.t now passes)
[16:52] <lizmat> not sure how that's related, but I'll take it  :-)
[17:03] <nine> I think end.t was on me :)
[17:04] <lizmat> aha... ok, that makes sense  :-)
[17:05] <lizmat> hmmm... still   ah well, more important things to do
[17:06] *** gfldex left
[17:06] *** gfldex joined
[17:11] <Geth> ¦ roast: usev6++ created pull request #829: Use Test::Util's &make-temp-path for socket tests
[17:11] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/829
[17:12] <lizmat> nine: I just realized that .new on classes in RakuAST work because of Mu.BUILDALL
[17:13] <lizmat> nine: I just realized that .new on classes in RakuAST work because of Mu.BUILDALL
[17:13] <lizmat> which is the default if a class has no method BUILDALL of its own
[17:13] <lizmat> so the problem with defaults of attributes and so, are cause by BUILDPLAN not being set up correctly
[17:13] *** Geth left
[17:14] *** Geth joined
[17:14] <lizmat> so I'll focus on that first before working on creating custom BUILDALL methods
[17:19] *** ab5tract left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:13] *** [Tux] left
[18:14] <nine> ok
[18:24] *** [Tux] joined
[18:51] <Geth> ¦ rakudo/main: 0d9f70a088 | (Elizabeth Mattijsen)++ | src/Raku/ast/variable-declaration.rakumod
[18:51] <Geth> ¦ rakudo/main: Normalise RakuAST class specifications (9/N)
[18:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0d9f70a088
[18:53] *** Geth left
[18:53] *** Geth joined
[18:58] *** Geth left
[18:58] *** Geth joined
[19:10] *** epony joined
[19:19] <lizmat> nine: re attributes defaults, it looks to me that
[19:19] <lizmat> https://github.com/rakudo/rakudo/blob/main/src/Raku/ast/variable-declaration.rakumod#L354
[19:19] <lizmat> and https://github.com/rakudo/rakudo/blob/main/src/Raku/ast/variable-declaration.rakumod#L403
[19:19] <lizmat> are in contradiction: the else clause is never entered for "has" scoped things, yet the else clause checks on a "." twigil ?
[19:21] <lizmat> going to mull on that a bit
[20:13] *** ab5tract joined
[20:19] <ab5tract> I
[20:19] <ab5tract> I've pushed the approach I started taking in resolver.rakumod
[20:38] <Geth> ¦ rakudo/main: 33c2b283ca | (Elizabeth Mattijsen)++ | src/Raku/ast/literals.rakumod
[20:38] <Geth> ¦ rakudo/main: Introduce RakuAST::Literal class
[20:38] <Geth> ¦ rakudo/main: 
[20:38] <Geth> ¦ rakudo/main: To keep all of the common stuff in the xxxLiteral classes in one place
[20:38] <Geth> ¦ rakudo/main: and to allow for easier checking for *any* RakuAST literal
[20:38] <Geth> ¦ rakudo/main: 
[20:38] <Geth> ¦ rakudo/main: Also: normalise RakuAST class specifications
[20:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/33c2b283ca
[20:41] *** Geth left
[20:41] *** Geth joined
[20:55] *** ab5tract left
[21:00] *** ab5tract joined
[21:30] <ab5tract> what would be the most idiomatic (or best for core) way to check whether a type object represents a package or not?
[21:30] <ab5tract> My first impulse is to use nqp::type against its HOW
[21:30] <lizmat> m: package A { }; dd A.HOW.^name
[21:30] <camelia> rakudo-moar 33c2b283c: OUTPUT: «"Perl6::Metamodel::PackageHOW"␤»
[21:31] <lizmat> or check against its name
[21:33] <ab5tract> thanks!
[21:33] <lizmat> I wonder if we would need to introduce some ^method to give the type of package
[21:34] <lizmat> to avoid checking against names that may change 
[21:34] <ab5tract> it's a pretty specific little corner I'm plugging at...
[21:34] <ab5tract> not sure how useful it would be outside of this sort of installing and stubbing packages scenario
[21:35] <lizmat> ack
[21:36] <ab5tract> just something about tightly coupling it to the type rubs me the wrong way
[21:44] <Geth> ¦ rakudo/main: 1d97dceb25 | (Elizabeth Mattijsen)++ | 23 files
[21:44] <Geth> ¦ rakudo/main: Normalise RakuAST all other class specifications (10/10)
[21:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1d97dceb25
[21:49] <lizmat> oops, I'm afraid something snuck in here that shouldn't have snuck in there  :-(
[21:49] *** sena_kun left
[21:50] *** sena_kun joined
[22:08] <ab5tract> hate it when that happens
[22:10] <Geth> ¦ rakudo/main: 5cc476e7e5 | (Elizabeth Mattijsen)++ | 5 files
[22:10] <Geth> ¦ rakudo/main: Add support for Complex literals
[22:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5cc476e7e5
[22:10] <lizmat> should be all well now, at 665 / 1355 now passing
[22:10] <lizmat> so +4
[22:10] <ab5tract> excellent :)
[22:24] *** sena_kun left
[22:37] <ab5tract> m: class A { }; dd A.HOW.^name
[22:37] <camelia> rakudo-moar 5cc476e7e: OUTPUT: «"Perl6::Metamodel::ClassHOW"␤»
[22:40] <lizmat> m: class A { }; dd A.HOW.^name.split("::").tail.chop("HOW").lc
[22:40] <camelia> rakudo-moar 5cc476e7e: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏HOW' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»
[22:40] <lizmat> m: class A { }; dd A.HOW.^name.split("::").tail.chomp("HOW").lc
[22:40] <camelia> rakudo-moar 5cc476e7e: OUTPUT: «"class"␤»
[22:40] <lizmat> m: module A { }; dd A.HOW.^name.split("::").tail.chomp("HOW").lc
[22:40] <camelia> rakudo-moar 5cc476e7e: OUTPUT: «"module"␤»
[22:40] <lizmat> m: gramma A { }; dd A.HOW.^name.split("::").tail.chomp("HOW").lc
[22:40] <camelia> rakudo-moar 5cc476e7e: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    A used at lines 1, 1␤Undeclared routine:␤    gramma used at line 1␤␤»
[22:40] <lizmat> m: grammar A { }; dd A.HOW.^name.split("::").tail.chomp("HOW").lc
[22:40] <camelia> rakudo-moar 5cc476e7e: OUTPUT: «"grammar"␤»
[22:41] <ab5tract> I couldn't compile a call to $thing.HOW.^name
[22:44] <ab5tract> and 'nqp::istype($resolved.HOW, Perl6::Metamodel::ModuleHOW)'  is not working as expected
[22:45] <ab5tract> right before, I print '$resolved.HOW.raku' and that outputs "Perl6::Metamodel::ModuleHOW.new"
[22:45] <lizmat> that'd be weird ?
[22:45] *** melezhik joined
[22:46] <ab5tract> yeah, I'm definitely flummoxed
[22:47] <ab5tract> oh man... is this a huge brain fart?
[22:47] <ab5tract> yes, yes it is
[22:49] *** melezhik left
[22:52] *** melezhik joined
[22:55] <Geth> ¦ rakudo/main: 4a6ea806c6 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[22:55] <Geth> ¦ rakudo/main: RakuAST: Make sure we default to "use strict"
[22:55] <Geth> ¦ rakudo/main: 
[22:55] <Geth> ¦ rakudo/main: In preparation to support "no strict" in RakuAST
[22:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4a6ea806c6
[22:56] *** melezhik left
[22:56] <lizmat> and that concludes my hacking for today&
[23:24] <ab5tract> check time is earlier than begin time, right?
[23:28] <Geth> ¦ tap-harness6: a4b499debf | (Leon Timmermans)++ | lib/TAP.rakumod
[23:28] <Geth> ¦ tap-harness6: Fix shebang detection in TAP::SourceHandler::Raku
[23:28] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/commit/a4b499debf
[23:28] <Geth> ¦ tap-harness6: ac8f3edd36 | (Leon Timmermans)++ | 2 files
[23:28] <Geth> ¦ tap-harness6: Colorize "ok" on success"
[23:28] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/commit/ac8f3edd36
[23:28] <Geth> ¦ tap-harness6: 75ec11374b | (Leon Timmermans)++ | 3 files
[23:28] <Geth> ¦ tap-harness6: 0.3.14
[23:28] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/commit/75ec11374b
[23:48] *** melezhik joined
[23:52] *** melezhik left
