[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:39] <Geth> ¦ rakudo/main: 71240f0024 | (Daniel Green)++ | src/core.c/CompUnit/Repository/FileSystem.pm6
[00:39] <Geth> ¦ rakudo/main: Get rid of more $*(SPEC|CWD) lookups in dir()
[00:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/71240f0024
[00:49] *** kurahaupo left
[01:02] <Geth> ¦ problem-solving: vrurg assigned to codesections Issue Rakudoc in third-party modules and some related topics https://github.com/Raku/problem-solving/issues/373
[01:41] *** MasterDuke joined
[01:47] *** MasterDuke left
[02:01] *** MasterDuke joined
[02:44] <MasterDuke> ugexe, lizmat: in CompUnit::PrecompilationRepository.precompile, there are a couple places where `$path.Str` is used (e.g., https://github.com/rakudo/rakudo/blob/main/src/core.c/CompUnit/PrecompilationRepository.pm6#L346). however, the parameter `:$source-name` has a default of `$path.Str`. can it be used instead of those `$path.Str`s? or would its
[02:44] <MasterDuke> value if passed in and not the default be the wrong thing to use in those places?
[05:33] *** squashable6 left
[05:33] *** evalable6 left
[05:33] *** benchable6 left
[05:33] *** linkable6 left
[05:33] *** unicodable6 left
[05:33] *** bisectable6 left
[05:33] *** shareable6 left
[05:33] *** greppable6 left
[05:33] *** notable6 left
[05:33] *** sourceable6 left
[05:33] *** quotable6 left
[05:33] *** tellable6 left
[05:33] *** releasable6 left
[05:33] *** committable6 left
[05:33] *** reportable6 left
[05:33] *** statisfiable6 left
[05:33] *** coverable6 left
[05:33] *** nativecallable6 left
[05:33] *** bloatable6 left
[05:34] *** committable6 joined
[05:34] *** reportable6 joined
[05:35] *** releasable6 joined
[05:35] *** unicodable6 joined
[05:35] *** bloatable6 joined
[05:35] *** statisfiable6 joined
[05:35] *** nativecallable6 joined
[05:35] *** evalable6 joined
[05:35] *** sourceable6 joined
[05:35] *** notable6 joined
[05:35] *** squashable6 joined
[05:36] *** tellable6 joined
[05:36] *** quotable6 joined
[05:36] *** greppable6 joined
[05:36] *** bisectable6 joined
[05:36] *** coverable6 joined
[05:36] *** benchable6 joined
[05:36] *** shareable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:34] *** linkable6 joined
[07:20] *** sena_kun joined
[09:21] *** sena_kun left
[09:38] <Geth> ¦ rakudo/main: 1617881dc2 | (Elizabeth Mattijsen)++ | src/core.c/List.pm6
[09:38] <Geth> ¦ rakudo/main: Streamline List.fmt a bit, a few % faster
[09:38] <Geth> ¦ rakudo/main: 
[09:38] <Geth> ¦ rakudo/main: - clone source list
[09:38] <Geth> ¦ rakudo/main: - don't use positional logic, but shift / push
[09:38] <Geth> ¦ rakudo/main: - reduce bytecode size for easier / sooner inlining
[09:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1617881dc2
[10:17] <Geth> ¦ rakudo/main: 7d3b9d6b4c | (Elizabeth Mattijsen)++ | 3 files
[10:17] <Geth> ¦ rakudo/main: Combine 6.e augments and additions into single files
[10:17] <Geth> ¦ rakudo/main: 
[10:17] <Geth> ¦ rakudo/main: And document them a bit better as to the reason of their existence.
[10:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7d3b9d6b4c
[10:18] <Geth> ¦ rakudo/main: 3d0b322287 | (Elizabeth Mattijsen)++ | 7 files
[10:18] <Geth> ¦ rakudo/main: Remove .e files that were combined into Fixups/additions
[10:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3d0b322287
[11:18] *** linkable6 left
[11:18] *** evalable6 left
[11:19] *** evalable6 joined
[11:19] *** linkable6 joined
[11:55] *** tonyo left
[11:56] *** tonyo joined
[11:58] <ugexe> MasterDuke: I think source-name might be for showing the stack traces but i'm not sure
[11:58] <ugexe> tools/build/install-core-dist.raku:        :source-name("core#$source-file (CompUnit::Repository::Staging)"),
[11:59] <ugexe> src/core.c/CompUnit/Repository/Installation.pm6:                    :source-name("$source-file ($_.key())"),
[12:00] <ugexe> in both cases they have a path followed by a space followed by ( followed by a module name followed by )
[12:00] <ugexe> similar to $?FILE
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:16] <lizmat> why is it again that we cannot augment roles ?
[12:20] <timo1> probably because we don't want to keep every class that has applied a role around so we can augment them at the same time as the role has been augmented
[12:41] <lizmat> but what if augmenting a role would *not* affect any classes that already consumed the role ?
[12:42] <lizmat> case in point: adding a .fmt candidate to QuantHashes
[12:43] *** lucs left
[12:43] *** lucs joined
[12:43] <lizmat> now I need to add a .fmt method to Bag/BagHash/Set/SetHash/Mix/MixHash
[14:00] *** kurahaupo joined
[14:17] <[Tux]> Rakudo v2023.05-151-g3d0b32228 (v6.d) on MoarVM 2023.05-7-g3df20182b
[14:17] <[Tux]> csv-test-xs-20      0.378 -  0.433
[14:17] <[Tux]> csv-ip5xs           0.792 -  0.796
[14:17] <[Tux]> test-t --race       0.874 -  0.879
[14:17] <[Tux]> test-t              1.351 -  1.354
[14:17] <[Tux]> csv-parser          3.874 -  3.920
[14:17] <[Tux]> test-t-20 --race    6.314 -  6.402
[14:17] <[Tux]> csv-ip5xs-20        5.218 -  6.490
[14:17] <[Tux]> test                6.159 -  6.507
[14:17] <[Tux]> test-t-20          21.381 - 21.523
[14:18] <[Tux]> note: I killed Opera, Iron and Teams before I ran the timings
[14:22] <Geth> ¦ rakudo/main: 69d570d21a | (Elizabeth Mattijsen)++ | 7 files
[14:22] <Geth> ¦ rakudo/main: Make .fmt a multi everywhere
[14:22] <Geth> ¦ rakudo/main: 
[14:22] <Geth> ¦ rakudo/main: To allow it being augmented in 6.e to allow for candidates taking
[14:22] <Geth> ¦ rakudo/main: the new Format object
[14:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/69d570d21a
[14:22] <Geth> ¦ rakudo/main: a2d616a0fa | (Elizabeth Mattijsen)++ | 5 files
[14:22] <Geth> ¦ rakudo/main: Give .fmt a single proto in the setting
[14:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a2d616a0fa
[15:09] *** kurahaupo left
[15:12] *** kurahaupo joined
[15:14] *** kurahaupo left
[15:18] *** kurahaupo joined
[15:20] *** kurahaupo left
[15:25] *** kurahaupo joined
[15:31] *** kurahaupo left
[15:34] *** kurahaupo joined
[16:17] *** kurahaupo left
[16:22] *** kurahaupo joined
[16:46] *** kurahaupo left
[16:57] *** kurahaupo joined
[17:40] *** sena_kun joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:20] *** kurahaupo left
[18:21] *** RakuIRCLogger left
[18:21] *** RakuIRCLogger joined
[18:25] *** kurahaupo joined
[18:40] *** kurahaupo left
[18:45] *** kurahaupo joined
[19:06] *** kurahaupo left
[19:11] *** kurahaupo joined
[20:03] <gfldex> `Backtrace` is fetching code object names via nqp. Is this a bootstrappy thing or does it evade my mixin intentinally? https://github.com/rakudo/rakudo/blob/main/src/core.c/Backtrace.pm6#L198
[20:08] <vrurg_> gfldex: what do you mean 'bootstrappy'?
[20:08] *** vrurg_ is now known as vrurg
[20:13] <gfldex> My first guess was that backtraces have to work early in the compilation of Rakudo itself.
[20:16] <gfldex> ohh, there is also nqp::setcodename!
[20:16] * gfldex goes to abuse that
[20:22] <gfldex> :-/ That doesn't work either.
[20:22] <vrurg> What did you use it with?
[20:24] <vrurg> Whatever, &foo.set_name("bar") does use setcodename anyway. So, it's something different. 
[20:24] <vrurg> BTW, for a multi-dispatch you'd have to apply it to every candidate.
[20:28] <gfldex> That's exactly what I'm trying to do.
[20:31] <gfldex> here is the code: https://gist.github.com/gfldex/c6b3dc2f6c648907788d9c2f67508e35
[20:32] <gfldex> The mixin works for the candidates but Backtrace::Frame ignoes it because it is using nqp::getcodename .
[20:32] *** kurahaupo left
[20:33] <vrurg> Try just r.set_name(...)
[20:34] <vrurg> m: sub foo { say Backtrace.new.Str; }; &foo.set_name("bar"); foo; 
[20:34] <camelia> rakudo-moar a2d616a0f: OUTPUT: «  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[20:36] <vrurg> Argh, yes, there is a problem about that: when the trait is applied the routine compilation is not done yet.
[20:38] *** kurahaupo joined
[20:38] <vrurg> At some point later finish_code_object on the World gets invoked which rewrites any name change.
[20:38] <gfldex> r.set_name does change the name in nqp-land. If I use nqp::getcodename right after setting it, I get the correct name. But it wont show up in the stacktrace. I'm even more confused then usual.
[20:38] * vrurg was already dancing on these rakes. :)
[20:38] <gfldex> ohh
[20:39] <vrurg> Compile time is compile time. It hides surprises.
[20:40] <gfldex> Should be a solvable problem in my case tho.
[20:41] <vrurg> The only compiler-independent solution would be to have some kind of fixup at run-time. Nothing better comes into mind at this moment.
[20:45] <gfldex> First time I used an INIT phaser and I'm a raku beginner since 2008!
[20:52] *** sena_kun left
[20:57] *** kurahaupo left
[21:02] *** kurahaupo joined
[21:09] *** kurahaupo left
[21:14] *** kurahaupo joined
[21:16] *** kurahaupo left
[21:23] *** kurahaupo joined
[21:31] *** kurahaupo left
[21:36] *** kurahaupo joined
[22:41] *** kurahaupo left
[22:46] *** kurahaupo joined
[23:04] <Geth> ¦ rakudo/main: f3bb7a2c21 | (Elizabeth Mattijsen)++ | src/core.e/Formatter.pm6
[23:04] <Geth> ¦ rakudo/main: Add Format.count method
[23:04] <Geth> ¦ rakudo/main: 
[23:04] <Geth> ¦ rakudo/main: To allow introspection to find out how many arguments a given
[23:04] <Geth> ¦ rakudo/main: Format expects.
[23:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f3bb7a2c21
[23:04] <Geth> ¦ rakudo/main: eceaeeaef7 | (Elizabeth Mattijsen)++ | 2 files
[23:04] <Geth> ¦ rakudo/main: Add .fmt(Format:D) candidates where appropriate
[23:04] <Geth> ¦ rakudo/main: 
[23:04] <Geth> ¦ rakudo/main: By creating clients of the Format.handle-iterator implementation
[23:04] <Geth> ¦ rakudo/main: detail method.  Sadly, this meant creating augments for all QuantHash
[23:05] <Geth> ¦ rakudo/main: classes separately, as one cannot augment roles.
[23:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eceaeeaef7
[23:08] <Geth> ¦ rakudo/main: 143aac0765 | (Elizabeth Mattijsen)++ | src/core.e/Fixups.pm6
[23:08] <Geth> ¦ rakudo/main: Correct comment, japhb++ for the catch
[23:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/143aac0765
[23:09] <ugexe> I don't think a name like .count method on something like Format is very clear what its for
[23:10] <ugexe> argument-count would intuitively be the number of arguments
[23:10] <ugexe> or an argument to return the arguments expected, and then call .elems on that?
[23:11] <lizmat> it's analogous to Signature.count
[23:11] <ugexe> ah i see, nevermind then
[23:11] <lizmat> it's conceptually the .count of the Callable that is in the Format
