[00:55] *** buildable6 left
[00:58] *** buildable6 joined
[00:59] *** samcv left
[01:00] *** samcv joined
[01:02] *** buildable6 left
[01:02] *** buildable6 joined
[01:28] <Xliff> lizmat: So is that moar's job?
[01:58] *** buildable6 left
[02:01] *** buildable6 joined
[02:29] <jdv> random datapoint, ive seen docker just lock up on no space...
[02:30] <jdv> just saying not all "real" sw handles faults well.  happy path engineering ftw!
[03:01] *** buildable6 left
[03:03] *** buildable6 joined
[04:03] *** buildable6 left
[04:06] *** buildable6 joined
[05:06] *** buildable6 left
[05:06] *** buildable6 joined
[06:06] *** buildable6 left
[06:10] *** buildable6 joined
[07:10] *** buildable6 left
[07:13] *** buildable6 joined
[08:13] *** buildable6 left
[08:15] *** buildable6 joined
[08:26] *** sena_kun joined
[08:57] *** RakuIRCLogger__ joined
[08:57] *** Geth left
[08:58] *** RakuIRCLogger left
[08:59] *** lizmat left
[09:01] *** RakuIRCLogger__ left
[09:01] *** RakuIRCLogger joined
[09:15] *** buildable6 left
[09:17] *** buildable6 joined
[09:19] *** lizmat joined
[10:17] *** buildable6 left
[10:20] *** buildable6 joined
[11:20] *** buildable6 left
[11:22] *** buildable6 joined
[11:26] *** buildable6 left
[11:26] *** buildable6 joined
[11:51] <lizmat> bisectable6: my %h{Cool}; dd %h.of
[11:51] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight
[11:52] <bisectable6> lizmat, ¦6c (72 commits): «Any␤»
[11:52] <bisectable6> lizmat, Nothing to bisect!
[11:52] <lizmat> bisectable6: my %h{Cool}; old=2015.12 dd %h.of
[11:52] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight
[11:53] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight
[11:53] <lizmat> bisectable6: old=2015.12 my %h{Cool}; dd %h.of
[11:53] <bisectable6> lizmat, Output on all releases: https://gist.github.com/8a638f929ce688bda8b60c656004a80d
[11:53] <bisectable6> lizmat, Nothing to bisect!
[11:53] <bisectable6> lizmat, On both starting points (old=2015.12 new=f45297d) the exit code is 0 and the output is identical as well
[11:53] <bisectable6> lizmat, Output on both points: «Any␤»
[12:02] *** Geth joined
[12:04] <Geth> ¦ rakudo/main: fef0c62961 | (Elizabeth Mattijsen)++ | src/Raku/ast/scoping.rakumod
[12:04] <Geth> ¦ rakudo/main: RakuAST: allow nulls in resolving logic
[12:04] <Geth> ¦ rakudo/main: 
[12:04] <Geth> ¦ rakudo/main: To allow building resolve lists with fixed index references
[12:04] <Geth> ¦ rakudo/main: 
[12:04] <Geth> ¦ rakudo/main: Based on ab5tract's work in PR #5417
[12:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fef0c62961
[12:04] <Geth> ¦ rakudo/main: 48068a03c8 | (Elizabeth Mattijsen)++ | src/Raku/ast/variable-declaration.rakumod
[12:04] <Geth> ¦ rakudo/main: RakuAST: fix codegenning of object hashes with explicit constraint
[12:04] <Geth> ¦ rakudo/main: 
[12:04] <Geth> ¦ rakudo/main: And some additional streamlining.
[12:04] <Geth> ¦ rakudo/main: 
[12:04] <Geth> ¦ rakudo/main: Based on ab5tract's work on PR #5417
[12:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/48068a03c8
[12:22] *** buildable6 left
[12:23] *** buildable6 joined
[12:52] <Geth> ¦ Benchmark/main: c48c2e1a7d | 2colours++ | 5 files
[12:52] <Geth> ¦ Benchmark/main: 2.0
[12:52] <Geth> ¦ Benchmark/main: review: https://github.com/raku-community-modules/Benchmark/commit/c48c2e1a7d
[13:02] <Geth> ¦ rakudo: ab5tract++ created pull request #5420: DRAFT: RakuAST: Add :{} object hash initialization
[13:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5420
[13:12] <Geth> ¦ rakudo/main: bb9496e512 | ab5tract++ (committed by Elizabeth Mattijsen) | 3 files
[13:12] <Geth> ¦ rakudo/main: RakuAST: Improve WhateverCode's .raku
[13:12] <Geth> ¦ rakudo/main: 
[13:12] <Geth> ¦ rakudo/main: This change allows `(* * *).raku` to return `* * *`, providing
[13:12] <Geth> ¦ rakudo/main: round-tripping through `raku` for WhateverCodes.
[13:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bb9496e512
[13:16] *** Xliff left
[13:23] *** buildable6 left
[13:23] *** buildable6 joined
[14:23] *** buildable6 left
[14:27] *** buildable6 joined
[14:31] *** buildable6 left
[14:31] *** buildable6 joined
[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft
[15:19] <Geth> ¦ rakudo: usev6++ created pull request #5421: (Re-)align backtraces on JVM with MoarVM
[15:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5421
[15:27] *** buildable6 left
[15:29] *** nebuchadnezzar joined
[15:30] *** buildable6 joined
[16:30] *** buildable6 left
[16:32] *** buildable6 joined
[17:02] <Geth> ¦ rakudo/main: 7e66cd2fc4 | (Elizabeth Mattijsen)++ | 6 files
[17:02] <Geth> ¦ rakudo/main: RakuAST: add sections to translation context
[17:02] <Geth> ¦ rakudo/main: 
[17:02] <Geth> ¦ rakudo/main: - named-A .. G
[17:02] <Geth> ¦ rakudo/main: - removed named datagram, exitcode: they turned out to be of named
[17:02] <Geth> ¦ rakudo/main:   arguments of internals
[17:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7e66cd2fc4
[17:14] <Geth> ¦ roast: 2c72b5b7e2 | (Christian Bartolomäus)++ | S02-types/array-shapes.t
[17:14] <Geth> ¦ roast: Fix tests for arrays that aren't shaped
[17:14] <Geth> ¦ roast: 
[17:14] <Geth> ¦ roast: It looks like these tests have been added on the wrong assumption that
[17:14] <Geth> ¦ roast: adding a dot between the array name and the shape declaration should
[17:14] <Geth> ¦ roast: fail. At the time when the tests were added the synopsis (S09-data.pod)
[17:14] <Geth> ¦ roast: stated that those forms are errors. Later on it was clarified that
[17:14] <Geth> ¦ roast: they aren't supposed to die, but just can't be used to declare shaped
[17:14] <Geth> ¦ roast: arrays: https://github.com/Raku/old-design-docs/commit/e8527c2291.
[17:14] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2c72b5b7e2
[17:14] *** lizmat left
[17:17] <discord-raku-bot> <nemokosch> on one hand it's great that somebody fills the most obvious gaps
[17:18] <discord-raku-bot> <nemokosch> on the other hand it doesn't seem like a good idea to just upstream commit to what is still considered to be the language specification
[17:18] <discord-raku-bot> <nemokosch> practically redefining the language on the fly
[17:21] <bartolin> nemokosch: yeah, you have a point there.
[17:26] <discord-raku-bot> <nemokosch> everything I wanted to say in this topic, I have already said. In fact, I even asked the RSC to at least refrain from committing to Roast without any formal procedure
[17:26] <bartolin> oh, that's something I've missed.
[17:26] <discord-raku-bot> <nemokosch> you aren't the only one, I'm afraid 😅
[17:27] <discord-raku-bot> <nemokosch> but of course this would mostly be solved if there was a "real specification" and there was no such pressure on Roast
[17:28] <bartolin> btw, I would be totally fine with reverting the above commit and fix the issue in a different way.
[17:30] <discord-raku-bot> <nemokosch> for what it's worth, I don't think there is a point in reverting; it's not something unprecedented to happen
[17:30] <discord-raku-bot> <nemokosch> I just wanted to raise awareness of the contradictory nature of this "long-standing tradition"
[17:31] <bartolin> I was under the impression that we have an "immutable" branch "6.c" for the state of roast when 6.c was released -- and a branch "6.c-errata" for obvious errors (where this commit could be merged to). And then the same for 6.d. But it looks like we don't have a branch "6.d".
[17:32] *** buildable6 left
[17:33] <discord-raku-bot> <nemokosch> I think in general it would be good to still "see the forest for the trees"
[17:34] <discord-raku-bot> <nemokosch> it's a recurring theme that there is a broader problem and some particular examples get remedied, not the problem itself
[17:35] *** buildable6 joined
[17:36] <discord-raku-bot> <nemokosch> reverting a commit when there is a long-running tradition to upstream redefine the language would be such a remedy
[17:36] <bartolin> just to make sure I understand correctly: With "see the forest for the trees" you refer to (additionally) having a written description how things are supposed to work, instead of just roast?
[17:36] <discord-raku-bot> <nemokosch> I mean it much more generally
[17:37] <discord-raku-bot> <nemokosch> general issue comes up -> "for example?" -> 3 examples given -> addressing the given examples one by one -> n-3 examples remain
[17:37] <discord-raku-bot> <nemokosch> ironically, the very idea of Roast relies very much on this way of thinking
[17:39] <discord-raku-bot> <nemokosch> in the presentation you linked, Patrick Michaud basically just said "there are still gaps in the spec but they will get filled over time". I really wish it was that simple. It didn't get filled over time, moreover I think it cannot get "filled"
[17:40] *** buildable6 left
[17:40] *** buildable6 joined
[17:44] <bartolin> because the combination of features lets the number of required tests explode (so that it becomes impossible to manage/handle/understand)? (Please excuse my ignorance, if you already explained this in detail. I didn't follow that closely in the last months.)
[17:45] <discord-raku-bot> <nemokosch> At the very least, all code paths that can run for user code, should be tested, any of them that aren't are immediately subject to undefined behavior
[17:46] <discord-raku-bot> <nemokosch> and "all code paths" should arguably cover the bytecode VM(s) as well
[17:46] <discord-raku-bot> <nemokosch> and then still, in theory, somebody could fulfill the spec in a different way, with different code paths, unfolding different undefined behavior
[17:47] <discord-raku-bot> <nemokosch> you cannot even phrase statements like "adding two Int (exact class) values with the &infix:<+> operator yields an Int (exact class)"
[17:48] <discord-raku-bot> <nemokosch> I also don't think there is any strategy for what operators must be available as subs, what absolutely mustn't, and what are compiler-specific
[17:49] <discord-raku-bot> <nemokosch> fortunately, this approach is so limiting that finding examples that break out of it is simple, I won't run out of them easily
[17:51] <discord-raku-bot> <nemokosch> we all just naturally imply that certain features "work", without any specification of what "working" means
[17:58] <bartolin> I see your points. I'm afraid that I'm not qualified to propose a "good" solution to the problem :(
[18:02] <discord-raku-bot> <nemokosch> I think, even if there isn't a great lot of motivated people to take up on it, or a tight deadline kind of thing, at least the aim/final goal should be a written specification, a la Ada, C, C++, iirc Pascal also had one, and so on
[18:02] <discord-raku-bot> <nemokosch> here, the examples are just to illustrate that this is definitely a real possibility
[18:04] <discord-raku-bot> <nemokosch> (again, even though I think "the interpreter is the spec" or "the reference guide is the spec" are also better approaches than "a very finite number of Raku tests are the spec")
[18:06] <discord-raku-bot> <nemokosch> PHP is a more recent example of a written specification, it was even mentioned in that talk
[18:08] <discord-raku-bot> <nemokosch> Mind you, I'm not saying that XYZ should suddenly start working on a written specification for Raku, much rather that it would be good to announce, or circulate the idea at the very least, that this is a long-term goal
[18:10] <discord-raku-bot> <nemokosch> which is really just a very symbolic acknowledging that Roast is uncapable of sufficiently defining the language
[18:22] <bartolin> In my mind a combination of a written description and a (substantially expanded) test suite could form a specification. I've never looked into a C standard (or some such), but I could imagine that trying to write down everything verbally would be a really, really tedious work -- and it would leave room for corner cases or undefined behavior as well. So having an evolving test suite that codifies 
[18:22] <bartolin> exactly how things are supposed to work still seems reasonable to me.
[18:27] <discord-raku-bot> <nemokosch> the C standard deliberately leaves space for "imagination"
[18:28] <discord-raku-bot> <nemokosch> but I'd say that's nothing compared to being unable to define any operations, let alone in a language with this abundance of built-in types and operations
[18:30] <bartolin> But to come back to committing something to roast: Would it work to have immutable branches per released version of the language ("6.c", "6.d"). If new tests are added to the current default branch of roast ("master"), that wouldn't affect the released version. (It would affect the future versions, though.)
[18:31] <bartolin> (That was my mental model how we handle roast. But only today I noticed that we don't have a branch "6.d".)
[18:32] <discord-raku-bot> <nemokosch> What you suggest makes sense to me, and it definitely sounds more precautious than the current way
[18:34] <bartolin> we *do* have "6.c-errata" and "6.d-errata", btw. Those would come into play for obvious errors in the released versions.
[18:35] * bartolin tries to find references to the setup with "6.c", "6.c-errata", etc.
[18:35] *** buildable6 left
[18:37] <discord-raku-bot> <nemokosch> is 6.d one big errata? 😂
[18:38] *** buildable6 joined
[18:47] *** notna joined
[18:55] <bartolin> If I'm not mistaken, we (or better jdv++) not only run spectests against master, but also against 6.c-errata and 6.d-errata for each release (see https://github.com/rakudo/rakudo/blob/main/docs/release_guide.pod?plain=1#L301 and https://github.com/rakudo/rakudo/blob/main/tools/releasable/Akefile#L510-L519)
[19:10] *** notna left
[19:28] <bartolin> ah, I finally noticed that we have a tag "6.d" (and "6.c") for roast. That sounds just fine -- no need for a branch there. Sorry for the noise.
[19:30] <discord-raku-bot> <nemokosch> it's also strange that the versions are presented in an incremental fashion
[19:30] <discord-raku-bot> <nemokosch> as if 6.d was just 6.c plus stuff
[19:38] *** buildable6 left
[19:39] *** buildable6 joined
[19:59] <Geth> ¦ roast: usev6++ created pull request #845: Tweak README: Use tags for new releases, not branches
[19:59] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/845
[20:39] *** buildable6 left
[20:40] *** buildable6 joined
[20:58] *** lizmat joined
[21:40] *** buildable6 left
[21:41] *** buildable6 joined
[21:45] *** buildable6 left
[21:45] *** buildable6 joined
[22:01] *** sena_kun left
[22:10] <Geth> ¦ rakudo/main: 495bec9f4e | ab5tract++ (committed by Elizabeth Mattijsen) | 4 files
[22:10] <Geth> ¦ rakudo/main: RakuAST: Add :{} object hash initialization
[22:10] <Geth> ¦ rakudo/main: 
[22:10] <Geth> ¦ rakudo/main: This turns out to be a simple case of enabling multiple identities
[22:10] <Geth> ¦ rakudo/main: for `RakuAST::Circumfix::HashComposer` as both `&circumfix:<{ }>`
[22:10] <Geth> ¦ rakudo/main: and `&circumfix:<:{ }>`.
[22:10] <Geth> ¦ rakudo/main: 
[22:10] <Geth> ¦ rakudo/main: Send the :object-hash reality down from the grammar through the
[22:10] <Geth> ¦ rakudo/main: block-or-hash calculation into the composer itself, set the
[22:10] <Geth> ¦ rakudo/main: resolver to use the right lookup in the object-hash initialization
[22:10] <Geth> ¦ rakudo/main: case, and we're done.
[22:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/495bec9f4e
[22:41] *** buildable6 left
[22:44] *** buildable6 joined
[23:44] *** buildable6 left
[23:45] *** buildable6 joined
