[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[01:58] *** linkable6 left
[01:58] *** evalable6 left
[01:59] *** linkable6 joined
[02:01] *** evalable6 joined
[02:48] *** dogbert17 left
[03:08] *** dogbert17 joined
[05:59] *** nativecallable6 left
[05:59] *** releasable6 left
[05:59] *** quotable6 left
[05:59] *** greppable6 left
[05:59] *** linkable6 left
[05:59] *** notable6 left
[05:59] *** unicodable6 left
[05:59] *** squashable6 left
[05:59] *** bloatable6 left
[05:59] *** reportable6 left
[05:59] *** coverable6 left
[05:59] *** shareable6 left
[05:59] *** committable6 left
[05:59] *** tellable6 left
[05:59] *** benchable6 left
[05:59] *** bisectable6 left
[05:59] *** evalable6 left
[05:59] *** sourceable6 left
[05:59] *** statisfiable6 left
[06:00] *** jaguart left
[06:00] *** benchable6 joined
[06:00] *** committable6 joined
[06:00] *** sourceable6 joined
[06:00] *** bisectable6 joined
[06:00] *** coverable6 joined
[06:00] *** linkable6 joined
[06:00] *** evalable6 joined
[06:00] *** releasable6 joined
[06:00] *** jaguart joined
[06:01] *** greppable6 joined
[06:01] *** squashable6 joined
[06:01] *** reportable6 joined
[06:01] *** statisfiable6 joined
[06:01] *** quotable6 joined
[06:01] *** shareable6 joined
[06:02] *** unicodable6 joined
[06:02] *** bloatable6 joined
[06:02] *** notable6 joined
[06:02] *** nativecallable6 joined
[06:02] *** tellable6 joined
[06:38] <Geth> ¦ rakudo: usev6++ created pull request #5166: [JVM] Avoid failures caused by missing RakuAST

[06:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5166

[07:41] *** bisectable6 left
[07:41] *** squashable6 left
[07:41] *** greppable6 left
[07:41] *** reportable6 left
[07:41] *** bloatable6 left
[07:41] *** sourceable6 left
[07:41] *** tellable6 left
[07:41] *** committable6 left
[07:41] *** releasable6 left
[07:41] *** evalable6 left
[07:41] *** shareable6 left
[07:41] *** nativecallable6 left
[07:41] *** quotable6 left
[07:41] *** notable6 left
[07:41] *** unicodable6 left
[07:41] *** coverable6 left
[07:41] *** linkable6 left
[07:41] *** statisfiable6 left
[07:41] *** greppable6 joined
[07:42] *** evalable6 joined
[07:42] *** tellable6 joined
[07:42] *** shareable6 joined
[07:42] *** linkable6 joined
[07:42] *** squashable6 joined
[07:43] *** statisfiable6 joined
[07:43] *** releasable6 joined
[07:43] *** quotable6 joined
[07:43] *** reportable6 joined
[07:43] *** nativecallable6 joined
[07:44] *** notable6 joined
[07:44] *** committable6 joined
[07:44] *** bisectable6 joined
[07:44] *** bloatable6 joined
[07:44] *** sourceable6 joined
[07:44] *** unicodable6 joined
[07:44] *** coverable6 joined
[07:47] *** jjatria left
[08:00] *** jjatria joined
[09:11] <Geth> ¦ rakudo/main: 0049c30153 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | 4 files

[09:11] <Geth> ¦ rakudo/main: [JVM] Avoid failures caused by missing RakuAST (#5166)

[09:11] <Geth> ¦ rakudo/main: 

[09:11] <Geth> ¦ rakudo/main: Three problems sneaked in that prevented the build for the JVM backend:

[09:11] <Geth> ¦ rakudo/main: * The operators for atomicints aren't supported yet.

[09:11] <Geth> ¦ rakudo/main: * The call to nqp::dispatch in src/Raku/ast/code.rakumod didn't

[09:11] <Geth> ¦ rakudo/main:   compile either. I have no idea what it should be replaced with,

[09:11] <Geth> ¦ rakudo/main:   but that could be figured out later on.

[09:11] <Geth> ¦ rakudo/main: * Run tests from t/12-rakuast on MoarVM only

[09:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0049c30153

[09:13] *** Geth left
[09:13] *** Geth joined
[11:00] *** linkable6 left
[11:00] *** evalable6 left
[11:01] *** linkable6 joined
[11:03] *** evalable6 joined
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:08] <Geth> ¦ rakudo/main: 14f56a2ca7 | (Elizabeth Mattijsen)++ | 6 files

[12:08] <Geth> ¦ rakudo/main: Implement support for CLOSE and QUIT phasers

[12:08] <Geth> ¦ rakudo/main: 

[12:08] <Geth> ¦ rakudo/main: - Grammar / Actions added

[12:08] <Geth> ¦ rakudo/main: - RakuAST::StatementPrefix::Phaser::... classes added

[12:08] <Geth> ¦ rakudo/main: - Deparsing added

[12:08] <Geth> ¦ rakudo/main: - Test added

[12:08] <Geth> ¦ rakudo/main: 

[12:08] <Geth> ¦ rakudo/main: Note that testing has been done without actually running any supplies,

[12:08] <Geth> ¦ rakudo/main: but just by interrogating a block with these phasers and running them

[12:08] <Geth> ¦ rakudo/main: manually.  As this is what the supplies do as well (no actual code is

[12:08] <Geth> ¦ rakudo/main: QASTed for this in the supply handling).

[12:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/14f56a2ca7

[12:13] <lizmat> no files won or lost

[12:56] <Geth> ¦ rakudo/main: 4ab4907ab9 | (Elizabeth Mattijsen)++ | src/Raku/ast/statementprefixes.rakumod

[12:56] <Geth> ¦ rakudo/main: Remove dead code

[12:56] <Geth> ¦ rakudo/main: 

[12:56] <Geth> ¦ rakudo/main: self.allowed-on-for-statement is always True as it inherits it from

[12:56] <Geth> ¦ rakudo/main: RakuAST::StatementPrefix

[12:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4ab4907ab9

[13:12] *** dogbert11 joined
[13:14] *** kawaii__ joined
[13:20] *** benchable6 left
[13:20] *** dogbert17 left
[13:20] *** discord-raku-bot left
[13:20] *** kawaii_ left
[13:20] *** kawaii__ is now known as kawaii_

[13:51] *** epony left
[13:53] <Geth> ¦ rakudo/main: 4f207505aa | (Elizabeth Mattijsen)++ | 6 files

[13:53] <Geth> ¦ rakudo/main: Add (almost) complete support for ENTER phaser

[13:53] <Geth> ¦ rakudo/main: 

[13:53] <Geth> ¦ rakudo/main: - Grammar / Actions added

[13:53] <Geth> ¦ rakudo/main: - RakuAST::StatementPrefix::Phaser::Enter class added

[13:53] <Geth> ¦ rakudo/main: - Deparsing added

[13:53] <Geth> ¦ rakudo/main: - Tests added

[13:53] <Geth> ¦ rakudo/main: 

[13:53] <Geth> ¦ rakudo/main: The phaser is installed in the block, and returns its last expression.

[13:53] <Geth> ¦ rakudo/main: But the ENTER phaser is not actually called automatically yet,

[13:53] <Geth> ¦ rakudo/main: probably because I got the QAST generation wrong somehow.  Hopefully

[13:53] <Geth> ¦ rakudo/main: nine will be able to do some magic in that respect.

[13:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4f207505aa

[13:55] <lizmat> oddly enough, this takes me to 104/139 for make test

[13:56] * lizmat will hold off implementing PRE / POST / KEEP / UNDO phasers for now, until this is fixed

[13:59] *** benchable6 joined
[14:12] <Geth> ¦ rakudo/main: 6 commits pushed by (Vadim Belman)++

[14:12] <Geth> ¦ rakudo/main: 424de2f01c | Make Version class available from the bootstrap

[14:12] <Geth> ¦ rakudo/main: e1a7ca6227 | Convert to using integer language revisions internally

[14:12] <Geth> ¦ rakudo/main: b6df003476 | Turn LanguageRevision into a class

[14:12] <Geth> ¦ rakudo/main: 54328e9be5 | Implement `use v6.x` in RakuAST

[14:12] <Geth> ¦ rakudo/main: 34a9d51c01 | Use $*HLL-COMPILER where makes sense

[14:12] <Geth> ¦ rakudo/main: a815b5ca12 | Merge pull request #5157 from vrurg/rakuast-lang-version

[14:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/4f207505aae6...a815b5ca1275

[14:22] <lizmat> brings it up to 108 / 139 and 632 / 1355 for me

[14:25] <nine> lizmat: if you run make test without RAKUDO_RAKUAST=1 first, this will hide any regressions that only affect compilation of modules used in the tests (but not tests directly). I'd therefore consider that bad practice.

[14:26] <lizmat> noted: I used "make test" as a sanity check because of the very strange errors I get every now and then

[14:28] <Geth> ¦ rakudo/main: 25d583bfaa | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[14:28] <Geth> ¦ rakudo/main: RakuAST: fix bogus worry about is rw on MAIN's parameters

[14:28] <Geth> ¦ rakudo/main: 

[14:28] <Geth> ¦ rakudo/main: The check forgot to check if the parameter was actually declared is rw.

[14:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/25d583bfaa

[14:28] <Geth> ¦ rakudo/main: bbdaf83259 | (Stefan Seifert)++ | src/Raku/ast/scoping.rakumod

[14:28] <Geth> ¦ rakudo/main: RakuAST: fix scopes adding themselves to themselves as declarations

[14:28] <Geth> ¦ rakudo/main: 

[14:28] <Geth> ¦ rakudo/main: Nodes that are both scopes and declarations (like subs) added themselves

[14:28] <Geth> ¦ rakudo/main: as declarations to their own scope. This was due to

[14:28] <Geth> ¦ rakudo/main: self.ast-lexical-declarations including the root node (if itself is a

[14:28] <Geth> ¦ rakudo/main: declaration).

[14:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bbdaf83259

[14:28] <Geth> ¦ rakudo/main: 68f4a96dc4 | (Stefan Seifert)++ | src/Raku/ast/compunit.rakumod

[14:28] <Geth> ¦ rakudo/main: RakuAST: support MAIN subs

[14:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/68f4a96dc4

[14:28] <nine> FWIW if we want to fix those, we'd need the rakudo compiled before and after. At least the CORE.setting.moarvm (as this is where the differences most likely are)

[14:29] <lizmat> understood

[14:29] <nine> My count is now 102 and 631

[14:30] <lizmat> meanwhile, fixing https://github.com/rakudo/rakudo/commit/4f207505aa  seems to be another way of gaining a few passes

[14:31] <nine> Btw. that's actually a good process to trigger the error: compile rakudo, run something that precompiles a module, then save the generated files, make clean, build again, run the same test again and if it breaks, see where the differences in generated bytecode between now and the backup are

[14:35] *** epony joined
[14:36] <lizmat> nine: using your methodology, I come to 103 / 139 and 630 / 1355

[15:33] <Geth> ¦ rakudo/main: c0cee2e5b7 | (Stefan Seifert)++ | 2 files

[15:33] <Geth> ¦ rakudo/main: RakuAST: support phasers on the comp unit itself

[15:33] <Geth> ¦ rakudo/main: 

[15:33] <Geth> ¦ rakudo/main: During compilation the mainline block does not exist, so instead we need

[15:33] <Geth> ¦ rakudo/main: to install mainline phasers on the comp unit and add them to the

[15:33] <Geth> ¦ rakudo/main: generated QAST block later.

[15:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c0cee2e5b7

[15:33] <Geth> ¦ rakudo/main: bbe447dbb2 | (Stefan Seifert)++ | 2 files

[15:33] <Geth> ¦ rakudo/main: RakuAST: actually install ENTER phasers

[15:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bbe447dbb2

[15:36] <Geth> ¦ rakudo/lizmat-1.log: 0d31a24349 | (Elizabeth Mattijsen)++ | src/core.c/Num.pm6

[15:36] <Geth> ¦ rakudo/lizmat-1.log: Make (-1).log mathematically correct

[15:36] <Geth> ¦ rakudo/lizmat-1.log: 

[15:36] <Geth> ¦ rakudo/lizmat-1.log: Before, this would return NaN, rather than Complex.new(1.log,pi)

[15:36] <Geth> ¦ rakudo/lizmat-1.log: (which would be more mathematically correct).

[15:36] <Geth> ¦ rakudo/lizmat-1.log: 

[15:36] <Geth> ¦ rakudo/lizmat-1.log: This breaks 2 spectests, checking for (-Inf).log basically, and

[15:36] <Geth> ¦ rakudo/lizmat-1.log: makes one todo test pass.

[15:36] <Geth> ¦ rakudo/lizmat-1.log: 

[15:36] <Geth> ¦ rakudo/lizmat-1.log: Inspired by https://wandering.shop/@colomon/109744612694765045

[15:36] <Geth> ¦ rakudo/lizmat-1.log: review: https://github.com/rakudo/rakudo/commit/0d31a24349

[15:36] <Geth> ¦ rakudo: lizmat++ created pull request #5167: Make (-1).log mathematically correct

[15:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5167

[15:37] <lizmat> nine++   (fixing ENTER phaser)

[15:37] <lizmat> my attempt so close, and yet so far away  :-)

[15:38] <lizmat> guess I'm ready to do PRE POST KEEP UNDO now  :-)

[16:00] <Geth> ¦ rakudo/main: 49cb197a90 | (Elizabeth Mattijsen)++ | t/12-rakuast/statement-phaser.rakutest

[16:00] <Geth> ¦ rakudo/main: Untodo now passing ENTER phaser tests

[16:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/49cb197a90

[16:02] *** Geth left
[16:02] *** Geth joined
[16:13] *** discord-raku-bot joined
[16:28] *** discord-raku-bot left
[16:28] *** discord-raku-bot joined
[16:36] <Geth> ¦ rakudo/main: d8184117b3 | (Elizabeth Mattijsen)++ | 2 files

[16:36] <Geth> ¦ rakudo/main: Add deparsing and tests for RakuAST::StatementPrefix::Phaser::Init

[16:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d8184117b3

[17:22] *** [Coke] joined
[17:22] <[Coke]> .

[17:31] <Geth> ¦ rakudo/main: 9fc9b06180 | (Stefan Seifert)++ | 2 files

[17:31] <Geth> ¦ rakudo/main: RakuAST: fix default type of signature declarations to Any

[17:31] <Geth> ¦ rakudo/main: 

[17:31] <Geth> ¦ rakudo/main: The default value for variables is Any, not Mu. However, we must not set

[17:31] <Geth> ¦ rakudo/main: a non-Mu type on array or hash variables as we'd e.g. create an object

[17:31] <Geth> ¦ rakudo/main: hash instead of a normal one. So instead of trying to figure out a

[17:31] <Geth> ¦ rakudo/main: default type, just don't set any type if we don't have one, but instead

[17:31] <Geth> ¦ rakudo/main: create containers for all variables unconditionally.

[17:31] <Geth> ¦ rakudo/main: 

[17:31] <Geth> ¦ rakudo/main: I don't think this is entirely correct, but with my existing confusion

[17:31] <Geth> ¦ rakudo/main: about type, of and default, it's the best I can do and it unlocks a few

[17:31] <Geth> ¦ rakudo/main: more tests.

[17:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9fc9b06180

[17:31] <nine> 107 and 633!

[17:40] <lizmat> whee!

[17:40] <lizmat> almost finished with KEEP and UNDO phasers  :-)

[17:41] <nine> t/08-performance/05-processkeys.t is complaining about a $W, but it doesn't indicate what one should do about it

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:11] <lizmat> could that be something that vrurg introduced ?

[18:12] <Geth> ¦ rakudo/main: 91ebaa013f | (Elizabeth Mattijsen)++ | 6 files

[18:12] <Geth> ¦ rakudo/main: Add complete support for KEEP / UNDO phasers

[18:12] <Geth> ¦ rakudo/main: 

[18:12] <Geth> ¦ rakudo/main: - Grammar / Actions added

[18:12] <Geth> ¦ rakudo/main: - RakuAST::StatementPrefix::Phaser::(Keep|Undo) classes added

[18:12] <Geth> ¦ rakudo/main: - Deparsing added

[18:12] <Geth> ¦ rakudo/main: - Tests added

[18:12] <Geth> ¦ rakudo/main: 

[18:12] <Geth> ¦ rakudo/main: This one turns out to be simple: it just needed the exit-handler

[18:12] <Geth> ¦ rakudo/main: flag to be set.

[18:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/91ebaa013f

[18:47] <Geth> ¦ rakudo/main: 03b2cf356e | (Elizabeth Mattijsen)++ | 2 files

[18:47] <Geth> ¦ rakudo/main: Fix issue with multiple FIRST phasers

[18:47] <Geth> ¦ rakudo/main: 

[18:47] <Geth> ¦ rakudo/main: Any additional FIRST phasers would not be called because the "first"

[18:47] <Geth> ¦ rakudo/main: flag was already reset.  Combine all FIRST phasers into a single

[18:47] <Geth> ¦ rakudo/main: statement list if there are more of them

[18:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/03b2cf356e

[18:56] *** NemokoschKiwi joined
[18:58] <nine> m: my $foo = $*FOO; say PROCESS::.keys

[18:58] <camelia> rakudo-moar 03b2cf356: OUTPUT: «($SPEC $ERR $FOO $SCHEDULER $IN $OUT $AWAITER $PID &chdir $RAT-OVERFLOW %ENV $CWD)␤»

[18:58] <nine> Huh? Will any dynamic variable show up in PROCESS::?

[18:59] <[Coke]> *.

[18:59] <[Coke]> *.

[18:59] <[Coke]> oops

[19:00] *** NemokoschKiwi left
[19:25] <lizmat> bisectable6 

[19:26] <lizmat> bisectable6: old=2020.02 my $foo = $*FOO; say PROCESS::<$FOO>:exists

[19:26] <bisectable6> lizmat, Bisecting by output (old=2020.02 new=d52342e) because on both starting points the exit code is 0

[19:27] <bisectable6> lizmat, bisect log: https://gist.github.com/f19bdf1b74aab096042ee281e0d35d3e

[19:27] <bisectable6> lizmat, (2022-03-30) https://github.com/rakudo/rakudo/commit/e7143e00cd62b189a800f49a1f7f85f51a6b8746

[19:56] *** ab5tract joined
[20:30] <nine> lizmat: apparently you wrote that test for PROCESS keys :)

[20:31] *** ab5tract left
[20:33] *** [Coke] left
[21:03] <nine> Ha! Now I know why they are called "post constraints". Because they have to be processed _after_ binding an argument

[21:03] <vrurg> Wow, Nobel prize for the genius! :D :D :D

[21:05] * vrurg feels like he is gonna be beaten hard today... ;)

[21:07] <nine> Would you have known that the post is about binding? ;)

[21:11] *** [Coke] joined
[21:14] *** [Coke]_ joined
[21:16] *** [Coke] left
[21:19] <vrurg> nine: I've spent enough time around that location in the legacy Actions to knew about it back then. Not sure if I'd recall if asked recently... :)

[21:23] <Geth> ¦ rakudo/main: 69fa6bbaf8 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[21:23] <Geth> ¦ rakudo/main: RakuAST: fix parameter where constraints acessing the parameter target

[21:23] <Geth> ¦ rakudo/main: 

[21:23] <Geth> ¦ rakudo/main: Where constraints on parameters are "post constraints" because they must

[21:23] <Geth> ¦ rakudo/main: be evaluated after binding the argument to the paramter target.

[21:23] <Geth> ¦ rakudo/main: Fixes sub foo($x where { say $x }) {}

[21:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/69fa6bbaf8

[21:23] <nine> 108 and 634 respectively :)

[21:25] <discord-raku-bot> <Nemokosch> this reminds me of a recent issue

[21:26] <discord-raku-bot> <Nemokosch> if you have a coercion of the format Target(SourceSubset), the conditions of the subset will be evaluated after the coercion happens...

[21:27] <discord-raku-bot> <Nemokosch> do you know anything about that behavior?

[21:30] *** [Coke]_ is now known as [Coke]

[21:48] <vrurg> The source is checked before, the target – after. Are there any other way?

[21:51] <discord-raku-bot> <Nemokosch> That's what I expected, too, but not what I witnessed

[21:51] <discord-raku-bot> <Nemokosch> what I witnessed was that the condition of the subset jumped outside and was performed after the coercion

[22:01] <vrurg> Actually, it's not impossible. The "post" might play the role. Unfortunately, I don't remember all the details right away.

[22:03] <discord-raku-bot> <Nemokosch> Now, I tried to reproduce and failed. Unfortunately I don't have the exact code that led me to this conclusion, it was while working on this https://github.com/raku-community-modules/XML/pull/67/files

[22:04] <discord-raku-bot> <Nemokosch> It could also be that I misunderstood something... I tried to do open-xml more literally, taking the constrained Str and just wrapping it into IO::Path, I don't remember the details

[22:10] <vrurg> As long as I checked the actions, constraint type is checked prior to coercion. So, should be some kind of mistake.

[22:18] <discord-raku-bot> <Nemokosch> okay... not quite what I said but this still seems strange: https://glot.io/snippets/ghlfzwgoss

[22:18] *** guifa_ left
[22:21] <discord-raku-bot> <Nemokosch> this doesn't happen if I say of Str:D actually. The Str type object goes in for some reason, and then explodes

[22:25] <discord-raku-bot> <Nemokosch> it also doesn't happen for a variable constraint and assignment. Probably there's some interference with multiple dispatch

[22:26] <discord-raku-bot> <Nemokosch> the multiple dispatch, the lack of 😄 and the coercion are all needed apparently...

[22:27] <vrurg> Do you know that .IO is a coercion method creating an IO::Path for you?

[22:27] <discord-raku-bot> <Nemokosch> yes

[22:28] <discord-raku-bot> <Nemokosch> it's not a very practical example, although it is inspired by a state that showed up while refactoring the sub

[22:30] <discord-raku-bot> <Nemokosch> something tells me, though, that it should have worked. The fact that the absence of the type smiley, the parameter and the coercion together are responsible for this behavior, makes this suspicious

[22:32] <vrurg> Ha, it's the optimizer! Oh, my... It tries to optimize a constant parameter call.

[22:33] <discord-raku-bot> <Nemokosch> https://glot.io/snippets/ghlgf84bly this is more or less a golf I think. One multi candidate, coercion in the parameter, no Str:D.

[22:33] <vrurg> And does it all wrong by typechecking on the subset from argument's type, not value. Actually, it must not optimize over subsets with dynamic constraints at all.

[22:36] <vrurg> The current situation is such that it is unlikely that the optimizer would get a fix soon.

[22:37] <discord-raku-bot> <Nemokosch> There was that benchmark with the "speed regressions", and I started thinking that many of those speed regressions might actually be fixes of broken optimizations

[22:41] <discord-raku-bot> <Nemokosch> anyways, it would be good to note this somewhere. Should I open an issue?

