[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[08:48] <Geth> ¦ rakudo/main: 5d7e385777 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[08:48] <Geth> ¦ rakudo/main: Remove support for PERL6_EXCEPTIONS_HANDLER

[08:48] <Geth> ¦ rakudo/main: 

[08:48] <Geth> ¦ rakudo/main: This was supposed to have been removed from 2020.11 already

[08:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5d7e385777

[09:19] <Geth> ¦ rakudo/main: f49b108041 | (Stefan Seifert)++ | 3 files

[09:19] <Geth> ¦ rakudo/main: RakuAST: throw correct exception type on redeclaration of packages

[09:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f49b108041

[09:19] <Geth> ¦ rakudo/main: 3f7deafbcd | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[09:19] <Geth> ¦ rakudo/main: RakuAST: restore correct exception on unknown type in declaration

[09:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3f7deafbcd

[10:07] <Geth> ¦ rakudo/main: 46a99d1863 | (Stefan Seifert)++ | src/Raku/ast/variable-access.rakumod

[10:07] <Geth> ¦ rakudo/main: RakuAST: properly report undeclared &-sigiled variables

[10:07] <Geth> ¦ rakudo/main: 

[10:07] <Geth> ¦ rakudo/main: These must be reported as unknown routines.

[10:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/46a99d1863

[11:24] <Geth> ¦ rakudo/main: 610bcfaf0f | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[11:24] <Geth> ¦ rakudo/main: RakuAST: fix IMPL-HAS-PARAMETER stumbling over targetless parameters

[11:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/610bcfaf0f

[11:24] <Geth> ¦ rakudo/main: 9406dfe9fb | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[11:24] <Geth> ¦ rakudo/main: RakuAST: fix duplicate lexical $_ in pointy blocks with explicit $_ arg

[11:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9406dfe9fb

[11:47] <lizmat> 716/1355 !

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:06] <Geth> ¦ rakudo/main: c9987b7c4d | (Elizabeth Mattijsen)++ | 2 files

[12:06] <Geth> ¦ rakudo/main: Actually add type info to constant declaration

[12:06] <Geth> ¦ rakudo/main: 

[12:06] <Geth> ¦ rakudo/main: And make sure any errors are correctly reported

[12:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c9987b7c4d

[12:06] <lizmat> ^^ nine is there a reason why the type check can't live in the BEGIN-CHECK ?

[12:07] <lizmat> or shouldn't live there ?

[12:10] <nine> Why should it?

[12:10] <lizmat> to be able to proved feedback earlier ?

[12:10] <lizmat> *prove

[12:11] <lizmat> *provide

[12:11] <nine> That's actually not considered a good thing

[12:13] <nine> In general, any correctness checks should be done as late as possible. This gives e.g. macros the chance to do something about issues first.

[12:13] <lizmat> ah, good point.  understood

[12:14] <nine> Also with late checks we can collect multiple issues we find and give a more complete list of errors. That can be a bit of a double edged sword, if one error is actually the cause of the other, but in general it's nice to have.

[12:30] <Geth> ¦ rakudo/main: c487eb152e | (Elizabeth Mattijsen)++ | 2 files

[12:30] <Geth> ¦ rakudo/main: RakuAST: add test for RakuAST::Var::Lexical::Constant

[12:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c487eb152e

[12:48] <Geth> ¦ rakudo/main: bc24e6f222 | (Stefan Seifert)++ | src/Raku/ast/literals.rakumod

[12:48] <Geth> ¦ rakudo/main: RakuAST: Fix pairs in quotewords getting stringified when they shouldn't

[12:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bc24e6f222

[12:48] <Geth> ¦ rakudo/main: 79ec334ea9 | (Stefan Seifert)++ | 2 files

[12:48] <Geth> ¦ rakudo/main: RakuAST: fix \n, \r\n, \t in heredocs disturbing detentation

[12:48] <Geth> ¦ rakudo/main: 

[12:48] <Geth> ¦ rakudo/main: When detenting heredocs, we need to treat explicit \n, \r\n and \t as

[12:48] <Geth> ¦ rakudo/main: opaque strings, i.e. we need to ignore the newline in foo\nbar

[12:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/79ec334ea9

[13:01] *** linkable6 left
[13:01] *** evalable6 left
[13:02] *** evalable6 joined
[13:03] *** linkable6 joined
[13:08] <Geth> ¦ rakudo/main: ac217e866f | (Stefan Seifert)++ | src/Raku/ast/name.rakumod

[13:08] <Geth> ¦ rakudo/main: RakuAST: fix without-colonpairs stumbling over QuotedString

[13:08] <Geth> ¦ rakudo/main: 

[13:08] <Geth> ¦ rakudo/main: Fixes regression caused by e8f419aefb716e2e89b098662cbed01fc3ec3bbd

[13:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ac217e866f

[13:09] <nine> Wowser....this ^^^ regression affected a lot more than expected.

[13:11] <lizmat> nice!   meanwhile, I just notice that {*} as part of a statement list, is parsed as { * }

[13:11] <lizmat> which is *not* the same, and thus blocks re-dispatching from non-simple protos

[13:12] <lizmat> perhaps some LHF for you?

[13:12] <lizmat> nine ^^

[13:12] <nine> Which test file does this affect?

[13:13] <lizmat> I don't know, I was just looking at .raku and .DEPARSE of {*}

[13:13] <lizmat> and found that {*} in a statement list didn't trigger

[13:17] <lizmat> 725/1355 !

[13:19] <nine> Like I said...quite unexpected how effective that regression fix is :) Since the spectest run I do after every commit didn't flag it, that means that the fixes since e8f419aefb716 were better than expected

[13:19] *** linkable6 left
[13:22] *** linkable6 joined
[13:37] <nine> lizmat: that {*} thing sounds easy: just look for that string in the old grammar and check if the new one handles it in the same places. Probably just missing one

[13:38] <lizmat> ok, will do

[13:47] <lizmat> so far, only macro_def appears missing....

[13:48] <lizmat> BTW, do we plan to support old macro behaviour in RakuAST ?

[13:53] <nine> So we already parse it. What exactly do we parse it to?

[13:54] <lizmat> a block with a statement list with a whatever in it

[13:55] <lizmat> as if it was "{ * }" instead of {*}

[13:55] <lizmat> "{*}"

[13:58] <nine> Huh....I wonder how the old frontend dealt with the onlystar in a statement list if not in the parser

[13:59] <lizmat> in the case of Moar, it looks like the Grammar actually writes out the QAST immediately

[14:00] <lizmat> line 4199 in Perl6/Grammar

[14:01] <lizmat> afk&

[14:04] <nine> You mean in Perl6/Actions?

[14:08] <nine> No, there is a difference in the grammars: Raku::Grammar is missing the token term:sym<onlystar>

[14:08] <nine> That's "onlystar in term position"

[14:23] <Geth> ¦ rakudo/main: 525dd64384 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[14:23] <Geth> ¦ rakudo/main: RakuAST: fix our scoped names not found lexically

[14:23] <Geth> ¦ rakudo/main: 

[14:23] <Geth> ¦ rakudo/main: Our-scoped does not mean "only our-scoped". Even for our-scoped symbols,

[14:23] <Geth> ¦ rakudo/main: we always create a lexical alias.

[14:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/525dd64384

[14:23] <Geth> ¦ rakudo/main: 5a869366e9 | (Stefan Seifert)++ | 2 files

[14:23] <Geth> ¦ rakudo/main: RakuAST: support {*} in term position

[14:24] <Geth> ¦ rakudo/main: 

[14:24] <Geth> ¦ rakudo/main: This is enough to support re-dispatch from protos to the multi, e.g.

[14:24] <Geth> ¦ rakudo/main: proto foo(|) { say "before"; {*}; say "after"}

[14:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5a869366e9

[14:24] <nine> lizmat: ^^^

[14:24] <nine> that's 2 more :)

[15:13] <lizmat> cool!

[15:28] <Geth> ¦ rakudo/main: 6 commits pushed by (Elizabeth Mattijsen)++

[15:28] <Geth> ¦ rakudo/main: 11cf9aa864 | * (create sub.rakutest)

[15:28] <Geth> ¦ rakudo/main: 322f287dd0 | * (keep code.rakutest)

[15:28] <Geth> ¦ rakudo/main: d93536e283 | * (merge)

[15:28] <Geth> ¦ rakudo/main: 6079cf0bf3 | Copied (with git history):

[15:28] <Geth> ¦ rakudo/main: 1ae83e43d9 | RakuAST: split tests in code -> code / sub

[15:28] <Geth> ¦ rakudo/main: 675c771730 | RakuAST: rename code -> block.rakutest

[15:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/5a869366e9b3...675c771730b5

[15:35] <lizmat> nine: I wonder whether it wouldn't make sense to create a separate RakuAST::Signature object for (|)

[15:42] <nine> why?

[15:44] <lizmat> it now is a whole Signator -> parameters -> Parameter(type, names, captures, slurpy) thing

[15:44] <lizmat> that needs to be deciphered when making the AST for not doing anything basically ?

[15:46] <nine> But (|) _is_ a signature. And it does have one Parameter which is a capture

[15:46] <lizmat> *Signature

[15:46] <lizmat> yeah, but at QAST level it has different handling, no ?

[15:51] <nine> Different how?

[15:54] <lizmat> just look at the qast that "sub a (|c) { }" and "sub a (|) { }" generate on the Perl6 grammar

[15:56] <nine> And "sub a ($c) { }" will yet again produce different qast. I fail to see what makes (|) so special that we'd put it in its own class?

[16:00] <lizmat> so we wouldn't need to introspects the Signature -> Parameter -> type/name/etc to figure out it's a noop

[16:00] <lizmat> when producing the qast ?

[16:01] <nine> You'll need to check for that condition somewhere. Either when producing the QAST or when producing the AST. Only that in the latter case, every user who wants to assemble RakuAST manually will have to know about this mandatory check as well.

[16:04] <nine> The goal of RakuAST is not to be the most efficient representation of the program or the the fastest compiler frontend. It's to be a correct and semantically rich representation which lends itself to manipulation (including the important subset of optimization). Making the compiler faster will (hopefully) be a side-effect.

[16:19] <lizmat> sure, but (|) is effectively about *not* creating a Capture object, and now we need to specify it as creating a nameless Capture object ?

[16:20] <lizmat> fwiw, I've always seen (|) more as a "trait" than actually as a signature

[16:20] <lizmat> but I guess otoh, you could think of not creating a nameless Capture to be an optimization

[16:20] <lizmat> still it feels LTAish to me

[16:39] <nine> It _is_ an optimization. Nothing is broken by doing exactly what the signature says, i.e.creating a Capture.

[17:46] *** linkable6 left
[17:46] *** evalable6 left
[17:48] *** evalable6 joined
[17:49] *** linkable6 joined
[17:50] <Geth> ¦ rakudo/main: 5787c4f631 | (Elizabeth Mattijsen)++ | src/Raku/ast/signature.rakumod

[17:50] <Geth> ¦ rakudo/main: RakuAST: only wrap when *not* given a parameters List

[17:50] <Geth> ¦ rakudo/main: 

[17:50] <Geth> ¦ rakudo/main: Because if it *is* specified, it is already a List

[17:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5787c4f631

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:04] <Geth> ¦ rakudo/main: 13c2bade8f | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[18:04] <Geth> ¦ rakudo/main: RakuAST: fix "No such method 'IMPL-CURRIED' for invocant of type 'RakuAST::OnlyStar'"

[18:04] <Geth> ¦ rakudo/main: 

[18:04] <Geth> ¦ rakudo/main: Since OnlyStar can now appear in term position, it must be a Term

[18:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/13c2bade8f

[18:04] <Geth> ¦ rakudo/main: 9c03075459 | (Stefan Seifert)++ | 3 files

[18:04] <Geth> ¦ rakudo/main: RakuAST: report redeclarations of lexicals as compilation errors

[18:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9c03075459

[18:05] *** vrurg_ joined
[18:05] *** vrurg left
[18:24] *** linkable6 left
[18:27] *** linkable6 joined
[18:54] <Geth> ¦ rakudo/main: 2a5220a5f9 | (Elizabeth Mattijsen)++ | src/Raku/ast/code.rakumod

[18:54] <Geth> ¦ rakudo/main: RakuAST: Onlystar doesn't actually need statements

[18:54] <Geth> ¦ rakudo/main: 

[18:54] <Geth> ¦ rakudo/main: In fact, I wonder whether this class should be instantiated at all

[18:54] <Geth> ¦ rakudo/main: and whether it should be a Blockoid.  Feels to me it could be a

[18:54] <Geth> ¦ rakudo/main: standalone class, just like RakuAST::Statement::Elsif

[18:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2a5220a5f9

[19:38] *** vrurg_ left
[19:39] *** vrurg joined
[19:46] <nine> lizmat: it can only be a routine's body if it's a Blockoid

[19:47] <lizmat> yeah, tested that already  :-)

[19:48] <lizmat> nine: now that I have you on the horn

[19:49] <lizmat> if I create a multi sub using RakuAST:: calls, the proto should be made automatically

[19:49] <lizmat> it *is* when coming from the grammar

[19:49] <lizmat> but in a test file, it fails because $resolver.resolve-lexical($name) resolves (when it shouldn't)

[19:50] <lizmat> to a RakuAST::Declaration::External object

[19:50] <lizmat> which cannot do: $proto.compile-time-value.derive_dispatcher

[19:51] <lizmat> easy solution would be to wrap it in a try()

[19:51] <lizmat> but that feels meh

[19:51] <lizmat> line 1283 and following in ast/code

[19:54] * lizmat gives up for now

[19:54] <lizmat> afk&

[20:16] <nine> Does that happen in a golfed case?

[21:51] <Geth> ¦ roast: patrickbkr++ created pull request #833: Test supply setup with a blocking recursion

[21:51] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/833

