[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:08] *** kjp left
[00:08] *** kjp joined
[00:09] *** kjp left
[00:09] *** kjp joined
[00:52] *** sena_kun left
[02:06] *** sourceable6 left
[02:06] *** greppable6 left
[02:06] *** benchable6 left
[02:06] *** reportable6 left
[02:06] *** tellable6 left
[02:06] *** bisectable6 left
[02:06] *** squashable6 left
[02:06] *** unicodable6 left
[02:06] *** nativecallable6 left
[02:06] *** notable6 left
[02:06] *** releasable6 left
[02:06] *** linkable6 left
[02:06] *** evalable6 left
[02:06] *** evalable6 joined
[02:06] *** unicodable6 joined
[02:06] *** notable6 joined
[02:07] *** sourceable6 joined
[02:07] *** reportable6 joined
[02:07] *** benchable6 joined
[02:07] *** nativecallable6 joined
[02:08] *** linkable6 joined
[02:08] *** releasable6 joined
[02:08] *** squashable6 joined
[02:08] *** greppable6 joined
[02:08] *** tellable6 joined
[02:09] *** bisectable6 joined
[03:39] *** kjp left
[03:40] *** kjp joined
[04:47] *** benchable6 left
[04:47] *** committable6 left
[04:47] *** statisfiable6 left
[04:47] *** notable6 left
[04:47] *** bloatable6 left
[04:47] *** coverable6 left
[04:47] *** quotable6 left
[04:47] *** shareable6 left
[04:47] *** tellable6 left
[04:47] *** squashable6 left
[04:47] *** greppable6 left
[04:47] *** sourceable6 left
[04:47] *** bisectable6 left
[04:47] *** quotable6 joined
[04:47] *** sourceable6 joined
[04:47] *** squashable6 joined
[04:47] *** statisfiable6 joined
[04:48] *** benchable6 joined
[04:48] *** greppable6 joined
[04:48] *** bisectable6 joined
[04:48] *** committable6 joined
[04:49] *** tellable6 joined
[04:49] *** bloatable6 joined
[04:49] *** notable6 joined
[04:49] *** shareable6 joined
[04:50] *** coverable6 joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:48] *** sena_kun joined
[06:55] *** sena_kun left
[08:11] *** sena_kun joined
[08:59] *** NemokoschKiwi joined
[09:16] <NemokoschKiwi> bisectable6: sub demo(Int :@values) { dd @values;};demo();

[09:16] <bisectable6> NemokoschKiwi, Will bisect the whole range automagically because no endpoints were provided, hang tight

[09:16] <NemokoschKiwi> This seems to have been fixed - but was it intentional or not?

[09:16] <bisectable6> NemokoschKiwi, Output on all releases: https://gist.github.com/72e895222948fab1e18fc7adf8c3b0ed

[09:16] <bisectable6> NemokoschKiwi, More than 4 changes to bisect, please try a narrower range like old=2022.03 new=HEAD

[09:18] <NemokoschKiwi> hmmm... "it's complicated" :D

[09:35] *** discord-raku-bot left
[09:36] *** discord-raku-bot joined
[10:04] *** NemokoschKiwi left
[10:07] *** japhb left
[10:33] *** japhb joined
[10:51] <Geth> ¦ rakudo/main: 6ae35eb958 | (Elizabeth Mattijsen)++ | 6 files

[10:51] <Geth> ¦ rakudo/main: RakuAST: rework how regular expressions are codegenned

[10:51] <Geth> ¦ rakudo/main: 

[10:51] <Geth> ¦ rakudo/main: Before this commit, the behaviour of :s (aka sigspace) was codegenned

[10:51] <Geth> ¦ rakudo/main: into the ASTs.  After this commit, the sigspace functionality is a

[10:51] <Geth> ¦ rakudo/main: a parameter taken into account when creating the QAST for a regex.

[10:52] <Geth> ¦ rakudo/main: 

[10:52] <Geth> ¦ rakudo/main: This means that as a developer building custom regex ASTs, one does

[10:52] <Geth> ¦ rakudo/main: <…commit message has 25 more lines…>

[10:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6ae35eb958

[10:52] <lizmat> *phew* that took a few days to figure out

[10:53] <lizmat> m: say "oo  oo" ~~ ms/ oo /   # TIL ms// is a thing    the same as m:s//

[10:53] <camelia> rakudo-moar 58157b8d3: OUTPUT: «｢oo  ｣␤»

[10:53] <discord-raku-bot> <Nemokosch> pfff

[10:54] <discord-raku-bot> <Nemokosch> I still feel this aversion for ~~ m//, even though that's not the problem in my approach either

[10:55] <lizmat> fwiw, I think ms// should be deprecated

[10:55] <discord-raku-bot> <Nemokosch> it's hard to keep track of these one-character shortcuts for sure

[10:55] <lizmat> it doesn't seem to be documented

[10:56] <lizmat> it *is* tested, which is how I found out

[10:56] <discord-raku-bot> <Nemokosch> 🤯

[10:58] <discord-raku-bot> <Nemokosch> I wonder how long my RakuAST solution to that weekly challenge like 2 weeks ago will survive 😅

[10:58] <discord-raku-bot> <Nemokosch> perhaps I should have pinpointed the exact commit to which one should build to make that work, lol

[10:58] <lizmat> pretty sure it will

[10:59] <lizmat> the one with the character class from a string ?

[10:59] <discord-raku-bot> <Nemokosch> yep

[11:04] *** japhb left
[11:04] *** japhb joined
[11:57] *** japhb left
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:40] <Geth> ¦ rakudo/main: b3ac1d747e | (Elizabeth Mattijsen)++ | 2 files

[12:40] <Geth> ¦ rakudo/main: RakuAST: fix faulty test + prevent wrapping recursion

[12:40] <Geth> ¦ rakudo/main: 

[12:40] <Geth> ¦ rakudo/main: So this basically prevented from *any* whitespace wrapping to occur,

[12:40] <Geth> ¦ rakudo/main: but without breaking any test files  :-(   I guess more work is needed.

[12:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b3ac1d747e

[13:21] <Geth> ¦ rakudo/main: 28822c8462 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[13:21] <Geth> ¦ rakudo/main: RakuAST: add comments to keep %*RX<s> for now

[13:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/28822c8462

[14:00] * lizmat is getting really confused as to where :ratchet behaviour is encoded in regexes

[14:00] <lizmat> that ASTs of token / regex  appear to be identical

[14:01] <lizmat> s/AST/QAST

[14:03] *** japhb joined
[14:04] <Geth> ¦ rakudo/main: ad97d8d5dc | (Elizabeth Mattijsen)++ | 2 files

[14:04] <Geth> ¦ rakudo/main: RakuAST: remove %*RX<r> setting from grammar

[14:04] <Geth> ¦ rakudo/main: 

[14:04] <Geth> ¦ rakudo/main: And add it to the QAST mods hash when creating QAST for

[14:04] <Geth> ¦ rakudo/main: RakuAST::RegexDeclaration objects

[14:04] <Geth> ¦ rakudo/main: 

[14:04] <Geth> ¦ rakudo/main: The odd thing is that just removing the %*RX<r> settings from the

[14:04] <Geth> ¦ rakudo/main: grammar doesn't seem to affect any spectests.

[14:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ad97d8d5dc

[14:57] *** squashable6 left
[15:00] *** squashable6 joined
[15:26] <Geth> ¦ rakudo/main: c6b2f8ac03 | (Elizabeth Mattijsen)++ | 3 files

[15:26] <Geth> ¦ rakudo/main: RakuAST: add basic tests for RakuAST::RegexDeclaration

[15:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c6b2f8ac03

[15:42] <Geth> ¦ rakudo/main: a774873881 | (Elizabeth Mattijsen)++ | t/12-rakuast/regex-declaration.rakutest

[15:42] <Geth> ¦ rakudo/main: RakuAST: demonstrate re-usability in regex declarations

[15:42] <Geth> ¦ rakudo/main: 

[15:42] <Geth> ¦ rakudo/main: Mostly to ensure that WithWhitespace wrapping is neutral by itself,

[15:42] <Geth> ¦ rakudo/main: only when used inside a rule, will it gain sigspace semantics.

[15:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a774873881

[15:50] *** codesections joined
[17:11] <Geth> ¦ rakudo/main: fb53d50a8a | (Elizabeth Mattijsen)++ | 2 files

[17:11] <Geth> ¦ rakudo/main: RakuAST: eradicate use of %*RX<s> in the grammar

[17:11] <Geth> ¦ rakudo/main: 

[17:11] <Geth> ¦ rakudo/main: Instead introduce a more descriptive $*WHITESPACE_OK dynamic variable,

[17:11] <Geth> ¦ rakudo/main: and have a local version of nqp's <atom> rule use the newly added

[17:11] <Geth> ¦ rakudo/main: X::Syntax::Regex::InsignificantWhitespace class if whitespace is

[17:11] <Geth> ¦ rakudo/main: detected and $*WHITESPACE_OK is not set.

[17:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fb53d50a8a

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:28] *** japhb left
[18:30] *** japhb joined
[18:42] <nine> Parameter tangling is a tangled mess....but I fear the only way to do it is to actually copy the existing mess

[18:43] <lizmat> copying is a start, I guess :-)

[18:43] <lizmat> BTW, do we have better syntax for looking up multi-part types in the setting than this?

[18:44] <lizmat> m: dd SETTING::<IO>.WHO<Path>.WHO<Unix>

[18:44] <camelia> rakudo-moar fb53d50a8: OUTPUT: «IO::Path::Unix␤»

[18:45] <Geth> ¦ rakudo/main: 331fd237a2 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[18:45] <Geth> ¦ rakudo/main: Some exception message tweaking

[18:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/331fd237a2

[18:46] <nine> I don't know any

[18:47] <[Coke]> I started looking at making 'use v5' throw the right error in AST, and I will have questions.

[18:49] <nine> cool!

[18:51] <[Coke]> ... oh, it makes more sense this time. lang_setup in Actions, yes?

[18:56] <Geth> ¦ rakudo/main: 16924b4128 | (Elizabeth Mattijsen)++ | src/core.c/IO/Path/Parts.pm6

[18:56] <Geth> ¦ rakudo/main: Fix IO::Path::Parts.raku

[18:56] <Geth> ¦ rakudo/main: 

[18:56] <Geth> ¦ rakudo/main: It needs to be a multi to handle the type object correctly

[18:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/16924b4128

[19:03] <nine> Definitely the place to start

[19:57] <[Coke]> ok, lang_setup appears to have logic to check version, but the error on use v5 when runningn with RAKUDO_RAKUAST is really coming from src/Perl6/Compiler.nqp

[19:59] <[Coke]> that was my confusion from before, I think. digging

[20:05] <[Coke]> ... the exception type is actually being set in World, I think.

[20:16] <lizmat> there is no World in RakuAST

[20:28] <nine> The world is no more

[20:37] <Geth> ¦ rakudo/main: 9ef618ff5c | (Elizabeth Mattijsen)++ | 2 files

[20:37] <Geth> ¦ rakudo/main: RakuAST: fix deparsing of RakuAST::Type::Setting

[20:37] <Geth> ¦ rakudo/main: 

[20:37] <Geth> ¦ rakudo/main: It's butt ugly, but we don't have an other syntax for it.  Adapt

[20:37] <Geth> ¦ rakudo/main: test and add a test for multi-part lookups.

[20:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9ef618ff5c

[20:54] <lizmat> vrurg: wouldn't it make a lot of sense to stick both "UNIT::" and "SETTING::" in a bindhllsym for easy fetching and no stack walking ?

[20:54] <tellable6> lizmat, I'll pass your message to vrurg

[20:56] <lizmat> afk&

[20:57] <vrurg__> lizmat: bindhllsym is a global thing, UNIT is different for each compunit.

[20:57] <tellable6> 2023-03-21T20:54:45Z #raku-dev <lizmat> vrurg: wouldn't it make a lot of sense to stick both "UNIT::" and "SETTING::" in a bindhllsym for easy fetching and no stack walking ?

[20:57] *** vrurg__ is now known as vrurg

[20:58] <vrurg> lizmat: SETTING is problematic too because it depends on compunit's language version.

[21:58] <[Coke]> Is it OK to change the nqp::die in src/Perl6/Compiler about unsupported version to throw an exception of the right type there?

[22:00] *** sena_kun left
[22:00] <[Coke]> (I am currently trying to find a way to code it that doesn't explode)

[23:23] <vrurg> [Coke]: I'm afraid, exception classes might not be available at that location and, very likely, that time.

[23:25] <[Coke]> ok.

[23:47] *** linkable6 left
[23:47] *** evalable6 left
[23:49] *** evalable6 joined
[23:50] *** linkable6 joined
