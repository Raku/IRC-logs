[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:42] *** Geth left
[00:42] *** Geth joined
[02:06] *** linkable6 left
[02:06] *** evalable6 left
[02:06] *** linkable6 joined
[02:07] *** evalable6 joined
[04:04] *** kjp left
[04:07] *** kjp joined
[05:50] *** shareable6 left
[05:50] *** bisectable6 left
[05:50] *** bloatable6 left
[05:50] *** reportable6 left
[05:50] *** committable6 left
[05:50] *** notable6 left
[05:50] *** unicodable6 left
[05:50] *** releasable6 left
[05:50] *** coverable6 left
[05:50] *** statisfiable6 left
[05:50] *** squashable6 left
[05:50] *** tellable6 left
[05:50] *** nativecallable6 left
[05:50] *** sourceable6 left
[05:50] *** greppable6 left
[05:50] *** evalable6 left
[05:50] *** linkable6 left
[05:50] *** quotable6 left
[05:50] *** benchable6 left
[05:51] *** statisfiable6 joined
[05:51] *** reportable6 joined
[05:51] *** linkable6 joined
[05:51] *** shareable6 joined
[05:51] *** evalable6 joined
[05:52] *** tellable6 joined
[05:52] *** bisectable6 joined
[05:52] *** sourceable6 joined
[05:52] *** coverable6 joined
[05:52] *** committable6 joined
[05:52] *** greppable6 joined
[05:53] *** releasable6 joined
[05:53] *** bloatable6 joined
[05:53] *** quotable6 joined
[05:53] *** nativecallable6 joined
[05:53] *** squashable6 joined
[05:53] *** notable6 joined
[05:53] *** unicodable6 joined
[05:53] *** benchable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:00] *** samcv left
[08:05] *** tellable6 left
[08:05] *** evalable6 left
[08:05] *** unicodable6 left
[08:05] *** sourceable6 left
[08:05] *** coverable6 left
[08:05] *** committable6 left
[08:05] *** releasable6 left
[08:05] *** notable6 left
[08:05] *** squashable6 left
[08:05] *** benchable6 left
[08:05] *** shareable6 left
[08:05] *** nativecallable6 left
[08:05] *** statisfiable6 left
[08:05] *** bloatable6 left
[08:05] *** reportable6 left
[08:05] *** quotable6 left
[08:05] *** bisectable6 left
[08:05] *** linkable6 left
[08:05] *** greppable6 left
[08:06] *** quotable6 joined
[08:06] *** statisfiable6 joined
[08:06] *** committable6 joined
[08:06] *** releasable6 joined
[08:06] *** coverable6 joined
[08:06] *** evalable6 joined
[08:06] *** benchable6 joined
[08:06] *** squashable6 joined
[08:06] *** unicodable6 joined
[08:07] *** notable6 joined
[08:07] *** tellable6 joined
[08:07] *** greppable6 joined
[08:08] *** bisectable6 joined
[08:08] *** bloatable6 joined
[08:08] *** shareable6 joined
[08:08] *** sourceable6 joined
[08:08] *** nativecallable6 joined
[08:08] *** linkable6 joined
[08:08] *** reportable6 joined
[10:01] *** sena_kun joined
[10:28] <bartolin_> bisectable6: role R { method m (*@a) { ... } }; class C does R { multi method m (*@a) {} } ## https://github.com/Raku/old-issue-tracker/issues/2901

[10:28] <bisectable6> bartolin_, Will bisect the whole range automagically because no endpoints were provided, hang tight

[10:29] <bisectable6> bartolin_, Output on all releases: https://gist.github.com/aea0e47332378a5402ab05eb075bc7a0

[10:29] <bisectable6> bartolin_, Bisecting by exit code (old=2018.09 new=2018.10). Old exit code: 1

[10:29] <bisectable6> bartolin_, bisect log: https://gist.github.com/78134ec9e95cb8f6d9471c35cb36f3c7

[10:29] <bisectable6> bartolin_, (2018-10-18) https://github.com/rakudo/rakudo/commit/fd5d5bdfb97930cfae1f9b2572d2ab6eea7ca92f

[10:29] <bisectable6> bartolin_, Bisecting by output (old=2016.11 new=2016.12) because on both starting points the exit code is 1

[10:29] <bisectable6> bartolin_, bisect log: https://gist.github.com/9def0d3c176af04771f0d16302ffa02e

[10:29] <bisectable6> bartolin_, (2016-12-12) https://github.com/rakudo/rakudo/commit/7e1ede4e689c2632fd6b1f04a333860edc7d1e1a

[10:29] <bisectable6> bartolin_, ⚠ New output detected, please review the results manually

[10:29] <bisectable6> bartolin_, Output on all releases and bisected commits: https://gist.github.com/6f70c2e34046dcac73cf13bcb45b39dd

[11:14] *** frost joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:15] <lizmat> ab5tract: so is https://github.com/rakudo/rakudo/pull/5207 ready for merge?  and should it be a squash merge ?

[12:16] <nine> I haven't submitted my review yet

[12:16] <lizmat> cool, I'll hold off then :-)

[12:17] <nine> I don't really like the way the meta object handling is set up, but I haven't yet the time to think through an alternative

[12:17] <lizmat> ok, I'd better mark it as draft then?

[12:28] <Geth> ¦ nqp/main: 30593cdc28 | (Elizabeth Mattijsen)++ | src/HLL/Grammar.nqp

[12:28] <Geth> ¦ nqp/main: Remove superfluous opener/closers

[12:28] <Geth> ¦ nqp/main: 

[12:28] <Geth> ¦ nqp/main: Spotted by tbrowder++

[12:28] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/30593cdc28

[12:32] *** samcv joined
[12:52] <ab5tract> nine: Yeah, I wish the meta object handling could be done differently too. Looking forward to hearing any alternatives

[12:56] <nine> Well, creating the meta object can still happen in PRODUCE-META-OBJECT. You just need to collect the required info before (via that BEGIN handler)

[13:02] <ab5tract> but then how do I run apply-traits with all of the relevant roles already added?

[13:02] <ab5tract> is that safe to do at CHECK time?

[13:03] <ab5tract> Also, I need the meta object to have those roles applied before I can rebless

[13:05] <ab5tract> so unless I can move all of the declaration and installation to check time, I'm not sure how to adopt your approach

[13:15] <lizmat> ab5tract: what is the meaning of $!of in the enum context ?

[13:16] <ab5tract> it's the RakuAST::Type node provided to specify the base type

[13:16] <ab5tract> we get it from $<OFTYPE> in Actions

[13:17] <lizmat> right

[13:18] <lizmat> ok, then I got the deparse lined up for just after the merge :-)

[13:18] <ab5tract> I know there is a mismatch between how RakuAST::Type::Subset (now) takes a RakuAST::Trait::Of for '$!of', but I figured we could hash that out in review 

[13:19] <nine> ab5tract: the meta object would still be produced dring PERFORM-BEGIN's runtime via a call to self.meta-object

[13:20] <ab5tract> I was under the impression that your suggestion was to gather the required information (essentially the base-type) during PERFORM-BEGIN

[13:21] <ab5tract> ah, wait, I think I see what you are saying now

[13:21] <Geth> ¦ nqp/main: 3b410d7274 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[13:21] <Geth> ¦ nqp/main: Bump MoarVM to get getlexstatic_o with fallback resolver fix

[13:21] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/3b410d7274

[13:36] <Geth> ¦ rakudo/main: e4d31e8194 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[13:36] <Geth> ¦ rakudo/main: Bump NQP for MoarVM and NQP fixes

[13:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e4d31e8194

[13:59] *** evalable6 left
[13:59] *** linkable6 left
[14:00] *** linkable6 joined
[14:01] *** evalable6 joined
[14:48] <ab5tract> nine: that led to a drastically cleaner PRODUCE-META-OBJECT. Thanks for the suggestion

[14:50] <ab5tract> out for now

[14:51] *** ab5tract left
[15:20] *** frost left
[17:27] <Geth> ¦ rakudo/main: 760e21c186 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 6 files

[17:27] <Geth> ¦ rakudo/main: Make log and sqrt handle negative values mathematically correct (#5192)

[17:27] <Geth> ¦ rakudo/main: 

[17:27] <Geth> ¦ rakudo/main: - in 6.e only

[17:27] <Geth> ¦ rakudo/main: - make sqrt a multi

[17:27] <Geth> ¦ rakudo/main: - add a new sqrt candidate handling negative values

[17:27] <Geth> ¦ rakudo/main: - add a new log candidate handling negative values

[17:27] <Geth> ¦ rakudo/main: 

[17:27] <Geth> ¦ rakudo/main: Note that the use of "is default" in these new candidates is needed

[17:28] <Geth> ¦ rakudo/main: to resolve dispatch ambiguities.  This is really a stopgap measure

[17:28] <Geth> ¦ rakudo/main: for now, hopefully we can dispatch on language version soon!

[17:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/760e21c186

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[19:31] <patrickb> o/

[19:32] <patrickb> I'm curious: Will RakuAST strategically unblock in-process precompilation?

[19:49] <bartolin_> c: 2018.09 role R { method m (*@a) { ... } }; class C does R { multi method m (*@a) {} }

[19:49] <committable6> bartolin_, ¦2018.09: «4===SORRY!4=== Error while compiling /tmp/lsAql08E81␤Method 'm' must be implemented by C because it is required by roles: R.␤at /tmp/lsAql08E81:1␤ «exit code = 1»»

[19:49] <bartolin_> c: 2018.09 role R { multi method m (*@a) { ... } }; class C does R { multi method m (*@a) {} }

[19:49] <committable6> bartolin_, ¦2018.09: «»

[20:00] <bartolin_> c: 2018.09 { my role R { multi method m (*@a) { ... } }; my class C does R { multi method m (*@a) { "OHAI" } }; my C $c .= new(); say $c.m(3) }

[20:00] <committable6> bartolin_, ¦2018.09: «OHAI␤»

[20:00] <bartolin_> c: 2018.09 { my role R { method m (*@a) { ... } }; my class C does R { multi method m (*@a) { "OHAI" } }; my C $c .= new(); say $c.m(3) }

[20:00] <committable6> bartolin_, ¦2018.09: «4===SORRY!4=== Error while compiling /tmp/kWRbcAxsUP␤Method 'm' must be implemented by C because it is required by roles: R.␤at /tmp/kWRbcAxsUP:1␤ «exit code = 1»»

[20:01] <bartolin_> c: 2018.10 { my role R { method m (*@a) { ... } }; my class C does R { multi method m (*@a) { "OHAI" } }; my C $c .= new(); say $c.m(3) }

[20:01] <committable6> bartolin_, ¦2018.10: «OHAI␤»

[20:05] <Geth> ¦ roast: usev6++ created pull request #830: Test implementing non-multi method stubbed in role

[20:05] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/830

[20:08] <bartolin_> c: 2018.09 role R { method f {...} }; class A { method f { } }; class B does R { has A $.a handles <f> } ## https://github.com/Raku/old-issue-tracker/issues/5687

[20:08] <committable6> bartolin_, ¦2018.09: «4===SORRY!4=== Error while compiling /tmp/r7RcbT9aiB␤Method 'f' must be implemented by B because it is required by roles: R.␤at /tmp/r7RcbT9aiB:1␤ «exit code = 1»»

[20:09] <bartolin_> c: 2018.10 role R { method f {...} }; class A { method f { } }; class B does R { has A $.a handles <f> } ## https://github.com/Raku/old-issue-tracker/issues/5687

[20:09] <committable6> bartolin_, ¦2018.10: «»

[20:24] <nine> patrickb: newdisp helped and RakuAST may, too. What I don't know is if I'll ever bring up the courage to give that another try. I spent more than half a year on it and gave up in the end. First time I did that

[20:39] <patrickb> nine: maybe someone else will give it a try. We'll See.

[20:43] *** linkable6 left
[20:44] *** evalable6 left
[20:45] *** evalable6 joined
[20:46] *** linkable6 joined
[23:05] *** sena_kun left
