[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:25] *** epony left
[02:03] *** raschip joined
[03:27] *** raschip left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[08:52] *** sena_kun joined
[09:01] <Geth> ¦ nqp/main: 081af2885f | cfa++ (committed using GitHub Web editor) | README.pod

[09:01] <Geth> ¦ nqp/main: Update branch references in README.pod (#796)

[09:01] <Geth> ¦ nqp/main: 

[09:01] <Geth> ¦ nqp/main: Replace references to `master` with `main`.

[09:01] <Geth> ¦ nqp/main: 

[09:01] <Geth> ¦ nqp/main: https://dev.azure.com links left unchanged for now, as apparently

[09:01] <Geth> ¦ nqp/main: `main` isn't currently being built there.

[09:01] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/081af2885f

[10:31] *** sena_kun left
[10:53] <lizmat> Sanity check: Missing serialize REPR function for REPR MVMContext (BOOTContext)

[10:54] <lizmat> indicates a context being serialized when it shouldn't, right ?  as you cannot serialize contexts?

[10:54] <nine> yes

[11:03] <lizmat> check

[11:11] *** sena_kun joined
[11:52] <Geth> ¦ rakudo/main: 03b3b13dbd | (Elizabeth Mattijsen)++ | 7 files

[11:52] <Geth> ¦ rakudo/main: Fix type constraints on QuantHashes

[11:52] <Geth> ¦ rakudo/main: 

[11:52] <Geth> ¦ rakudo/main: It looks that by abstracting the constraint adding, some context is

[11:52] <Geth> ¦ rakudo/main: introduced that cannot be serialized.  Fixed for now by copy-pasting

[11:52] <Geth> ¦ rakudo/main: the code and removing the abstraction.

[11:52] <Geth> ¦ rakudo/main: 

[11:52] <Geth> ¦ rakudo/main: Partial fix for #2544

[11:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/03b3b13dbd

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:36] *** Xliff joined
[12:45] *** lizmat_ joined
[12:45] *** Geth left
[12:47] *** RakuIRCLogger left
[12:48] *** lizmat left
[12:49] *** MasterDuke left
[12:53] *** ab5tract joined
[13:21] *** Xliff left
[14:24] *** Geth joined
[14:24] *** lizmat_ left
[14:24] *** lizmat joined
[14:28] *** Geth left
[14:28] *** Geth joined
[14:37] *** vrurg left
[14:38] *** vrurg joined
[14:41] <Geth> ¦ Net-SMTP/main: 9cfea91ba9 | (Polgár Márton)++ | 4 files

[14:41] <Geth> ¦ Net-SMTP/main: 1.2.2

[14:41] <Geth> ¦ Net-SMTP/main: review: https://github.com/raku-community-modules/Net-SMTP/commit/9cfea91ba9

[14:43] <Geth> ¦ rakudo: ab5tract++ created pull request #5178: [DRAFT] Add RakuAST::Type::Subset

[14:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5178

[14:56] <nine> ab5tract: does nqp::say($<EXPR>.ast); actually work? For dumping ASTs I use .ast.dump and for names $name.canonicalize

[14:59] <nine> ab5tract: on a first glance, it looks like you're on the right track! I'd use a  RakuAST::Expression $!expr instead of $!code and store the expression directly

[15:07] <Geth> ¦ rakudo/main: 015aacf2f9 | (Elizabeth Mattijsen)++ | 15 files

[15:07] <Geth> ¦ rakudo/main: Change deparsing of Blockoid with <2 statements

[15:07] <Geth> ¦ rakudo/main: 

[15:07] <Geth> ¦ rakudo/main: Instead of going the full

[15:07] <Geth> ¦ rakudo/main: 

[15:07] <Geth> ¦ rakudo/main: -> {

[15:07] <Geth> ¦ rakudo/main:     42

[15:07] <Geth> ¦ rakudo/main: }

[15:07] <Geth> ¦ rakudo/main: 

[15:07] <Geth> ¦ rakudo/main: it will now just do "-> { 42 }"

[15:07] <Geth> ¦ rakudo/main: 

[15:07] <Geth> ¦ rakudo/main: Adjust deparsing tests accordingly.

[15:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/015aacf2f9

[15:10] <lizmat> nine: I'm considering a separate RakuAST::NQP class to facilitate writing nqp::ops to be codegenned directly, without needing RakuAST::Name

[15:10] <lizmat> opions?

[15:10] <lizmat> use case: generating the BUILDALL method for classes

[15:14] <nine> lizmat: that would require the parser to know how that distinction

[15:15] <lizmat> no, not to be used in the Grammar, just to build code with nqp ops

[15:16] <lizmat> RakuAST::NQP.new("create", Type::Simple.new...)

[15:17] <nine> That sounds even more confusiing :) Note that I'm not actually against teaching the parser that. Might even simplify code and speed up processing.

[15:17] <lizmat> ok, so what do you have in mind ?

[15:18] <nine> With confusing I was referring to having a RakuAST::NQP node but not generating it from the parser. Going all the way sounds fine

[15:19] <lizmat> ah, ok, will look at that after getting some fresh air  :-)

[15:19] <lizmat> &

[15:27] <ab5tract> nine: yeah, nqp::say($<EXPR>.ast) prints the object .WHICH info

[15:30] <ab5tract> thanks for mentioning .ast.dump!

[15:39] <ab5tract> I'm a bit confused why I can't resolve the name through the resolver, as all the other classes in `type.rakumod` seem to be able to do

[15:41] <ab5tract> Adding `$*R.declare-lexical()` to the action code doesn't work: there is an error about an element of type Type::Simple not being resolved

[15:42] <ab5tract> And `subset F where 5; F.WHAT.say` produces a "Can't look up attributes in a Any type object" unhandled exception

[15:42] <nine> What name can it not resolve?

[15:43] <ab5tract> It's a sorry stating "This element has not been resolved. Type: RakuAST::Type::Simple"

[15:45] <ab5tract> nine: oh, sorry. I try to resolve what's been assigned into the $!name variable

[15:45] <ab5tract> Which in my example is 'F'

[15:45] <nine> Oh, there's no point in resolving that as it's the name that your node is currently declaring. So what would be the result of the lookup?

[15:46] <nine> The obvious question is then of course: why do all the existing Type nodes look up names? Type::Simple is not a declaration. It's e.g. what's used in my Int $foo; or Int.new. There we need to find what "Int" means.

[15:47] <ab5tract> Ah, fair point. So then I don't need to derive from `RakuAST::Lookup`

[15:47] <nine> Then there are the derived types, e.g. ::Definedness, ::Concrete, etc, i.e. Int:D. "Int:D" has a base type "Int" and again, we need to know what that is.

[15:47] <ab5tract> right

[15:47] <ab5tract> makes sense

[15:47] <nine> You will need a lookup for subset Foo of Int, but I guess that will come later

[15:48] <nine> Oh and that will probably be handled elsewhere anyway, since "of" is followed by a type, so you already get a (presumably) RakuAST::Type::Simple node for that

[15:49] <ab5tract> nine: That seems to be handled by the `of`` trait? Or will be, I guess? The `of`` type doesn't show up in the match object

[15:49] <ab5tract> or I guess it does.. somewhere in $<trait>[0]

[15:49] <nine> True, that's a trait.

[15:51] <ab5tract> so that makes sense: I don't need to declare a resolves-with because I can leave out the `is RakuAST::Lookup`. I was already experiencing along those lines

[15:51] *** ab5tract left
[15:52] *** ab5tract joined
[15:53] <nine> The most difficult part in this may actually be the stuff surrounding where, like thunking

[15:53] <nine> But then there's prior art in other places where we already handle "where"

[15:54] <ab5tract> Yeah, that's a very curious part indeed. I was going to run some method that would do what `make_where_clause` or whatever in the old edition does

[15:54] <ab5tract> Ohh, there's other places that do this?

[15:55] <ab5tract> I guess I'm still at a loss as to what I need to do to have `F.WHAT.say` print the type object `(F)` instead of exploding

[15:55] <ab5tract> I suspect it's something about the QAST objects

[15:56] <nine> F.WHAT.say?

[16:01] <ab5tract> right, there's no record of the type in scope once declared. `subset F where 5;` runs fine. `subset F where 5; F.WHAT.say` explodes

[16:02] <nine> Compare the generated QAST between old and new frontend.

[16:03] <nine> This is about the "Can't look up attributes in a Any type object", isn't it? Where exactly does that get thrown? --ll-exception is your friend

[16:10] <ab5tract> nine++

[16:10] <ab5tract> Thanks for the suggestions

[16:28] <ab5tract> Do I need to be manually sinking? One difference I see is that `QAST::Op(p6sink)` exists in rakuast whereas things seem to already be sunk in head

[16:29] <ab5tract> s/head/main/ or whatever we call it

[16:30] <nine> No. Don't worry about that. If you want to check if sinking was done correctly, check the --target=ast output. There's an anchor symbol next to every node that's sunk

[16:33] <nine> afk&

[17:34] *** Xliff joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:06] *** sena_kun left
[18:53] *** sena_kun joined
[18:55] *** NemokoschKiwi joined
[18:55] *** NemokoschKiwi left
[19:27] <ab5tract> nine: Alright, gotten a few steps closer. Now I'm at the step of trying to figure out how to actually have the assignment call the where code

[19:57] *** raschip joined
[20:40] <nine> ab5tract: look at the QAST generated by the old compiler frontend. It may even be that you don't actually have to generate code for that yourself

[20:42] <vrurg> If memory serves me right, this is done by SubsetHOW.

[20:43] <vrurg> ab5tract: Optimizations aside, do a normal ACCEPTS. Will work for now.

[20:48] *** raschip left
[20:50] <nine> QAST looks like nothing special is required

[21:19] <ab5tract> Am I trying to match the QAST 1:1? 

[21:21] <ab5tract> A major difference I see is that I cannot for the life of me get `  - QAST::Var(lexical F :decl(static))` to appear in the QAST:Stmnts  list

[21:21] <ab5tract> in the RakuAST version

[21:40] <ab5tract> It's also (probably not surprisingly) not showing up if I run `'subset F where /5/; ::.keys>>.say'`

[22:44] *** ab5tract left
[22:51] *** NemokoschKiwi joined
[22:51] *** NemokoschKiwi left
[22:51] *** NemokoschKiwi joined
[23:24] *** sena_kun left
[23:25] *** NemokoschKiwi left
[23:49] <lizmat> so why *are* List and Map Cool ?

