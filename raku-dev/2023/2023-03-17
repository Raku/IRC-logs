[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[02:11] *** evalable6 left
[02:11] *** tellable6 left
[02:11] *** bloatable6 left
[02:11] *** statisfiable6 left
[02:11] *** benchable6 left
[02:11] *** squashable6 left
[02:11] *** sourceable6 left
[02:11] *** shareable6 left
[02:11] *** bisectable6 left
[02:11] *** releasable6 left
[02:11] *** unicodable6 left
[02:11] *** committable6 left
[02:11] *** quotable6 left
[02:11] *** nativecallable6 left
[02:11] *** reportable6 left
[02:11] *** linkable6 left
[02:11] *** notable6 left
[02:11] *** greppable6 left
[02:11] *** coverable6 left
[02:11] *** quotable6 joined
[02:11] *** nativecallable6 joined
[02:11] *** sourceable6 joined
[02:11] *** linkable6 joined
[02:11] *** notable6 joined
[02:12] *** tellable6 joined
[02:12] *** shareable6 joined
[02:12] *** committable6 joined
[02:12] *** reportable6 joined
[02:13] *** greppable6 joined
[02:13] *** squashable6 joined
[02:13] *** bisectable6 joined
[02:13] *** statisfiable6 joined
[02:13] *** coverable6 joined
[02:13] *** bloatable6 joined
[02:14] *** benchable6 joined
[02:14] *** evalable6 joined
[02:14] *** releasable6 joined
[02:14] *** unicodable6 joined
[02:25] *** MasterDuke left
[02:38] *** codesections left
[03:31] *** Xliff left
[05:05] *** coverable6 left
[05:05] *** releasable6 left
[05:05] *** benchable6 left
[05:05] *** evalable6 left
[05:05] *** quotable6 left
[05:05] *** bisectable6 left
[05:05] *** shareable6 left
[05:05] *** sourceable6 left
[05:05] *** greppable6 left
[05:05] *** unicodable6 left
[05:05] *** linkable6 left
[05:05] *** reportable6 left
[05:05] *** notable6 left
[05:05] *** committable6 left
[05:05] *** tellable6 left
[05:05] *** bloatable6 left
[05:05] *** squashable6 left
[05:05] *** statisfiable6 left
[05:05] *** nativecallable6 left
[05:05] *** sourceable6 joined
[05:05] *** nativecallable6 joined
[05:06] *** benchable6 joined
[05:06] *** quotable6 joined
[05:06] *** coverable6 joined
[05:06] *** notable6 joined
[05:07] *** releasable6 joined
[05:07] *** bisectable6 joined
[05:07] *** greppable6 joined
[05:07] *** committable6 joined
[05:07] *** unicodable6 joined
[05:07] *** squashable6 joined
[05:07] *** evalable6 joined
[05:07] *** statisfiable6 joined
[05:07] *** shareable6 joined
[05:08] *** linkable6 joined
[05:08] *** reportable6 joined
[05:08] *** bloatable6 joined
[05:08] *** tellable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[09:04] *** discord-raku-bot left
[09:05] *** discord-raku-bot joined
[09:41] *** ab5tract joined
[10:02] *** [Tux] left
[10:12] * lizmat just realizes there is no syntax in Raku to create a nameless sub with traits and placeholder variables

[10:12] <lizmat> yet it *is* possible to create one with RakuAST

[10:13] *** [Tux] joined
[10:22] <Geth> ¦ rakudo/main: f41c769d17 | (Elizabeth Mattijsen)++ | 7 files

[10:22] <Geth> ¦ rakudo/main: RakuAST: use Signature.parameters-initialized as rendering check

[10:22] <Geth> ¦ rakudo/main: 

[10:22] <Geth> ¦ rakudo/main: And remove RakuAST::PlaceholderParameterOwner.code-has-placeholders

[10:22] <Geth> ¦ rakudo/main: logic.  The latter suffered from the following situation:

[10:22] <Geth> ¦ rakudo/main: 

[10:22] <Geth> ¦ rakudo/main:     sub foo (@_) { @_ }

[10:22] <Geth> ¦ rakudo/main: 

[10:22] <Geth> ¦ rakudo/main: <…commit message has 12 more lines…>

[10:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f41c769d17

[10:31] <Geth> ¦ rakudo/main: f72d58bcda | (Elizabeth Mattijsen)++ | t/12-rakuast/placeholder.rakutest

[10:31] <Geth> ¦ rakudo/main: RakuAST: add fake slurpy array/hash tests

[10:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f72d58bcda

[10:53] <lizmat> nine: could it be that regex / token / rule are all codegenned as RegexDeclaration without any difference ?

[10:54] <lizmat> I don't see $*IN_DECL being passed into anything anywhere ?

[10:57] <nine> lizmat: there must be some difference as otherwise they would all behave the same way

[10:57] <lizmat> well... maybe that is a bug ?

[10:57] <lizmat> ok, will investigate further

[11:00] <lizmat> from what I can see, "my regex foo { a }", "my token foo { a }" and "my rule foo { a }" currently all create the same AST

[11:00] <lizmat> I sorta expected something to happen inside the bodies, but no

[11:01] <nine> Do they generate the same QAST?

[11:02] <lizmat> checking now

[11:03] <lizmat> looks like they're identica;l

[11:05] <lizmat> yup, only the source references are different

[11:06] <[Tux]> Rakudo v2022.12-1-gd52342eb0 (v6.d) on MoarVM 2023.02-3-g6adfc376c

[11:06] <[Tux]> csv-test-xs-20      0.411 -  0.516

[11:06] <[Tux]> csv-ip5xs           0.798 -  0.823

[11:06] <[Tux]> test-t --race       0.803 -  0.860

[11:06] <[Tux]> test-t              1.358 -  1.439

[11:06] <[Tux]> csv-parser          3.552 -  3.709

[11:06] <[Tux]> csv-ip5xs-20        5.046 -  5.539

[11:06] <[Tux]> test                6.468 -  6.887

[11:06] <[Tux]> test-t-20 --race    6.220 -  7.181

[11:06] <[Tux]> test-t-20          20.818 - 21.056

[11:09] <lizmat> oddly, the old QAST also looks identical

[11:11] <lizmat> hmmm... the regex / token QAST looks the same, the token / rule QAST differs in old and new

[11:11] <lizmat> looks like the rule has added a .ws to the QAST

[11:13] *** linkable6 left
[11:13] *** evalable6 left
[11:14] *** linkable6 joined
[11:14] *** evalable6 joined
[11:16] <lizmat> ok, it looks like the grammar / actions are altering the body to get rule/token semantics

[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:20] <Geth> ¦ rakudo/main: 9245f985e5 | (Elizabeth Mattijsen)++ | 4 files

[12:20] <Geth> ¦ rakudo/main: RakuAST: first stab at deparsing/.raku of regex/token/rule

[12:20] <Geth> ¦ rakudo/main: 

[12:20] <Geth> ¦ rakudo/main: The main problem was that "regex" / "token" / "rule" all codegenned

[12:20] <Geth> ¦ rakudo/main: to RakuAST::RegexDeclaration, with (probably) tweaks applied to the

[12:20] <Geth> ¦ rakudo/main: body.

[12:20] <Geth> ¦ rakudo/main: 

[12:20] <Geth> ¦ rakudo/main: This commit introduces two subclasses of RakuAST::RegexDeclaration:

[12:20] <Geth> ¦ rakudo/main: <…commit message has 9 more lines…>

[12:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9245f985e5

[13:03] *** linkable6 left
[13:03] *** evalable6 left
[13:06] *** evalable6 joined
[13:06] *** linkable6 joined
[13:42] <Geth> ¦ rakudo/main: 6a2fee72e6 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[13:42] <Geth> ¦ rakudo/main: RakuAST: some .raku tweaks / fixes

[13:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6a2fee72e6

[14:09] <nine> lizmat: isn't that missing some change in Actions?

[14:09] <lizmat> no?

[14:10] <lizmat> what gets passed is the name of the class to create

[14:10] <lizmat> I changed that, and added some classes

[14:10] <nine> But that means it doesn't matter whether I create a TokenDeclaration or RuleDeclaration, they will behave the same

[14:11] <lizmat> yes, indeed, so there was no test breakage

[14:11] <lizmat> but it allowed deparsing and .raku to do the right thing

[14:11] <lizmat> apart from the actual body still showing alterations done

[14:12] <lizmat> when it should hide them

[14:12] <lizmat> I'm working on that now

[14:13] <nine> In my view, that's now worse than before. Before it was clear, that a RegexDeclaration is a RegexDeclaration and any difference in behavior must come from its contents. Now I'd create a TokenDeclaration, expecting this to behave like a token, but it won't.

[14:14] <lizmat> agree... so I'm working on that, so that you would *not* have to add WithSigspace to each node in the case of a rule

[14:15] <lizmat> but that they would get added automagically at some point

[14:15] <nine> Ah, so it is indeed incomplete and will be completed :) Then I won't keep you from doing that anymore

[14:16] <lizmat> yeah, I got the whitespace location where that gets added

[14:17] <lizmat> now I still cannot find the ratchet behaviour difference between regex and rule/token

[14:51] <lizmat> nine: do we have something that can mangle ASTs already ?

[14:51] <lizmat> or is it bespoke with a visit-children(&handler) ?

[15:19] <nine> Don't think we have anything yet. So far we didn't have to manipulate much

[15:20] <lizmat> ack

[17:02] *** linkable6 left
[17:02] *** evalable6 left
[17:03] *** linkable6 joined
[17:04] *** evalable6 joined
[17:18] *** codesections joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[22:51] *** japhb left
[22:51] *** japhb joined
[22:52] *** ugexe left
[23:01] *** ugexe joined
