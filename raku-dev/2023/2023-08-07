[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[03:03] *** linkable6 left
[03:03] *** bloatable6 left
[03:03] *** squashable6 left
[03:03] *** tellable6 left
[03:03] *** nativecallable6 left
[03:03] *** notable6 left
[03:03] *** unicodable6 left
[03:03] *** quotable6 left
[03:03] *** evalable6 left
[03:03] *** coverable6 left
[03:03] *** greppable6 left
[03:03] *** benchable6 left
[03:03] *** sourceable6 left
[03:03] *** releasable6 left
[03:03] *** statisfiable6 left
[03:03] *** committable6 left
[03:03] *** bisectable6 left
[03:03] *** shareable6 left
[03:03] *** reportable6 left
[03:03] *** greppable6 joined
[03:03] *** statisfiable6 joined
[03:03] *** nativecallable6 joined
[03:04] *** unicodable6 joined
[03:04] *** benchable6 joined
[03:04] *** coverable6 joined
[03:04] *** releasable6 joined
[03:04] *** bisectable6 joined
[03:04] *** frost25 joined
[03:05] *** squashable6 joined
[03:05] *** sourceable6 joined
[03:05] *** bloatable6 joined
[03:05] *** shareable6 joined
[03:05] *** reportable6 joined
[03:05] *** quotable6 joined
[03:06] *** linkable6 joined
[03:06] *** frost25 left
[03:06] *** frost25 joined
[03:06] *** frost25 is now known as frost

[03:06] *** notable6 joined
[03:06] *** committable6 joined
[03:06] *** tellable6 joined
[03:06] *** evalable6 joined
[03:40] *** frost left
[04:40] *** committable6 left
[04:40] *** statisfiable6 left
[04:40] *** quotable6 left
[04:40] *** sourceable6 left
[04:40] *** bisectable6 left
[04:40] *** evalable6 left
[04:40] *** benchable6 left
[04:40] *** squashable6 left
[04:40] *** releasable6 left
[04:40] *** tellable6 left
[04:40] *** nativecallable6 left
[04:40] *** bloatable6 left
[04:40] *** greppable6 left
[04:40] *** reportable6 left
[04:40] *** notable6 left
[04:40] *** linkable6 left
[04:40] *** coverable6 left
[04:40] *** unicodable6 left
[04:40] *** shareable6 left
[04:41] *** reportable6 joined
[04:41] *** benchable6 joined
[04:41] *** committable6 joined
[04:41] *** evalable6 joined
[04:41] *** bisectable6 joined
[04:42] *** tellable6 joined
[04:42] *** sourceable6 joined
[04:42] *** bloatable6 joined
[04:42] *** squashable6 joined
[04:42] *** coverable6 joined
[04:42] *** statisfiable6 joined
[04:43] *** linkable6 joined
[04:43] *** releasable6 joined
[04:43] *** notable6 joined
[04:43] *** nativecallable6 joined
[04:43] *** unicodable6 joined
[04:43] *** shareable6 joined
[04:43] *** greppable6 joined
[04:44] *** quotable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:16] *** sena_kun joined
[06:47] <[Tux]> Rakudo v2023.06-191-ge4b4bdeb5 (v6.d) on MoarVM 2023.06-4-g75fe055c2

[06:47] <[Tux]> csv-test-xs-20      0.341 -  0.350

[06:47] <[Tux]> csv-ip5xs           0.816 -  0.852

[06:47] <[Tux]> test-t --race       0.850 -  0.950

[06:47] <[Tux]> test-t              1.289 -  1.399

[06:47] <[Tux]> csv-parser          4.138 -  4.738

[06:47] <[Tux]> csv-ip5xs-20        5.117 -  5.532

[06:47] <[Tux]> test-t-20 --race    5.909 -  6.291

[06:47] <[Tux]> test                5.971 -  6.933

[06:47] <[Tux]> test-t-20          20.885 - 21.498

[06:48] <[Tux]> 08-05 17:24:58 ← I forgot to post, but Wendy noted the nice score

[06:48] <[Tux]>  5 2022-08-15 19:32:17 test-t 1.335

[06:48] <[Tux]>  4 2022-07-23 11:27:47 test-t 1.335

[06:48] <[Tux]>  3 2022-10-31 18:23:22 test-t 1.332

[06:48] <[Tux]>  2 2022-06-21 18:33:38 test-t 1.332

[06:48] <[Tux]>  1 2023-08-05 17:35:40 test-t 1.289

[06:52] *** sena_kun left
[10:54] *** reportable6 left
[10:54] *** bisectable6 left
[10:54] *** unicodable6 left
[10:54] *** tellable6 left
[10:54] *** linkable6 left
[10:54] *** committable6 left
[10:54] *** squashable6 left
[10:54] *** greppable6 left
[10:54] *** quotable6 left
[10:54] *** releasable6 left
[10:54] *** notable6 left
[10:54] *** benchable6 left
[10:54] *** sourceable6 left
[10:54] *** nativecallable6 left
[10:54] *** statisfiable6 left
[10:54] *** bloatable6 left
[10:54] *** shareable6 left
[10:54] *** evalable6 left
[10:54] *** coverable6 left
[10:54] *** evalable6 joined
[10:54] *** sourceable6 joined
[10:54] *** committable6 joined
[10:54] *** tellable6 joined
[10:55] *** shareable6 joined
[10:55] *** benchable6 joined
[10:55] *** bloatable6 joined
[10:55] *** coverable6 joined
[10:55] *** statisfiable6 joined
[10:56] *** reportable6 joined
[10:56] *** unicodable6 joined
[10:56] *** squashable6 joined
[10:56] *** notable6 joined
[10:56] *** quotable6 joined
[10:56] *** releasable6 joined
[10:56] *** nativecallable6 joined
[10:56] *** linkable6 joined
[10:56] *** greppable6 joined
[10:57] *** bisectable6 joined
[11:20] *** ab5tract left
[11:42] <lizmat> notable6: weekly

[11:42] <notable6> lizmat, 1 note: 2023-08-01T07:44:29Z <lizmat>: https://dev.to/finanalyst/rakudoc-revision-open-to-comment-4hjb

[11:42] <lizmat> notable6: weekly reset

[11:42] <notable6> lizmat, Moved existing notes to “weekly_2023-08-07T11:42:29Z”

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:02] *** ab5tract joined
[12:16] *** ab5tract left
[12:17] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/08/07/2023-32-rakudoc-gamma/

[12:25] <lizmat> bisectable6: sub a() { dd CALLER::LEXICAL::<$a> }; my $a = 42; a

[12:25] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[12:26] <bisectable6> lizmat, ¦6c (68 commits): «Int $a = 42␤»

[12:26] <bisectable6> lizmat, Nothing to bisect!

[12:26] <lizmat> meh

[14:50] *** Xliff joined
[14:50] <Xliff> Raku-GLib suite timing statistics for Raku 2023.06.194.ga.4.a.2.bbd.24.e

[14:50] <Xliff> Using the following processor: AMD Ryzen 9 5950X 16-Core Processor

[14:50] <Xliff> Total number of projects: 34 (506509 loc)

[14:50] <Xliff> Total non-parallel compile times: 11094.810 (326.318 avg)

[14:50] <Xliff> Total parallel compile times: 2341.308 (68.862 avg) 4.739x speedup

[17:52] * lizmat starts to wonder whether custom infixes really do need a slang, or that there could be a smarter way in RakuAST

[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:03] <discord-raku-bot> <nemokosch> do "custom infixes" need a slang currently?

[18:08] <lizmat> internally they do, yes

[18:08] <lizmat> which is e.g. why they don't work in the REPL

[18:11] <nine> We mix into the grammar. Not sure that already constitutes a slang.

[18:17] <lizmat> ok, well, it's lexical, so for all practical purposes it could be considered a slang, no ?

[18:21] <nine> Even if, what's the consequence?

[18:21] <nine> I.e. I see nothing wrong with that :)

[18:21] <lizmat> mixing something into the grammar is a very CPU intensive  and memory bloating operation

[18:22] <lizmat> whereas when we encounter something in an infix position, we just need to make sure there's something valid there

[18:22] <lizmat> and that lookup could be just a hash hanging off off $?LANG

[18:23] <lizmat> I mean, from a QAST point of view, custom infixes are generated the same was as built-in infixes, are they not ?

[18:23] <Xliff> I thought custom operators was just syntax sugar for infix:<$op>($lhs, $rhs)

[18:23] <lizmat> the grammar also needs to be able to understand the op

[18:24] <lizmat> to be able to parse code that uses that custom infix

[18:30] <discord-raku-bot> <nemokosch> makes sense

[18:38] <lizmat> m: dd $*KERNEL.bits

[18:38] <camelia> rakudo-moar a4a2bbd24: OUTPUT: «64␤»

[18:38] <lizmat> looks like that's 32 on the M1

[18:40] <lizmat> while more than 32 bits are definitely supported

[18:43] <[Coke]> m: dd $*KERNEL

[18:43] <camelia> rakudo-moar a4a2bbd24: OUTPUT: «Kernel linux = Kernel.new(release => Str, hardware => Str, arch => Str, bits => Int, name => "linux", auth => "unknown", version => Version, signature => Blob, desc => Str)␤»

[18:43] <[Coke]> ^^ that's LTA.

[18:43] <[Coke]> (we get types instead of the values)

[18:43] <lizmat> yeah, and then if you ask for bits, it does

[18:43] <lizmat> $.hardware ~~ m/ _64 | w | amd64  / ?? 64 !! 32)

[18:44] <lizmat> arm64 missing in this picture

[18:44] <lizmat> this breaks P5pack  :-)

[18:52] <Geth> ¦ rakudo/main: 5d4bb333d1 | (Elizabeth Mattijsen)++ | src/core.c/Kernel.pm6

[18:52] <Geth> ¦ rakudo/main: Make $*KERNEL.bits correct on ARM64 processors

[18:52] <Geth> ¦ rakudo/main: 

[18:52] <Geth> ¦ rakudo/main: Aka Apple's M1/M2

[18:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5d4bb333d1

[18:56] <[Coke]> nice.

[18:56] <[Coke]> what's w. Wide?

[19:00] <lizmat> I haz no idea

[19:05] <nine> "naive approach" indeed

[19:06] <[Tux]> Rakudo v2023.06-194-ga4a2bbd24 (v6.d) on MoarVM 2023.06-4-g75fe055c2

[19:06] <[Tux]> csv-test-xs-20      0.344 -  0.386

[19:06] <[Tux]> csv-ip5xs           0.810 -  0.842

[19:06] <[Tux]> test-t --race       0.810 -  0.922

[19:06] <[Tux]> test-t              1.437 -  1.547

[19:06] <[Tux]> csv-parser          3.563 -  3.628

[19:06] <[Tux]> csv-ip5xs-20        5.142 -  5.783

[19:06] <[Tux]> test                6.750 -  7.499

[19:06] <[Tux]> test-t-20 --race    6.687 -  6.785

[19:06] <[Tux]> test-t-20          19.727 - 20.636

[19:11] * lizmat just updated all of the P5 modules that where relying on $_ being dynamic

[19:11] <lizmat> so that $_ no longer needs to be dynamic, so we can make $_ a local with all of its efficiency improvement

[19:13] <coleman> Wow awesome

[19:14] <lizmat> m: sub a() { dd CALLER::LEXICAL::<$a> }; my $a = 42; a   # the secret

[19:14] <camelia> rakudo-moar 5d4bb333d: OUTPUT: «Int $a = 42␤»

[19:15] <coleman> what is "dd" in this context? I don't know much about the internals.

[19:16] <lizmat> dd is the tiny data dumper, so tiny it lost the "t"

[19:16] <lizmat> it's basically: note $foo.raku  on steroids

[20:27] *** ab5tract joined
[20:52] <Xliff> Is there something in the ecosystem that does Positional and Associative at the same time?

[21:14] <discord-raku-bot> <nemokosch> isn't Match something like that itself?

[21:18] <guifa_> I think Match and Captures both do.  

[21:19] <guifa_> Xliff: are you wanting something that tracks the order of entries (I think there's an OrderedHash for that) or one that acts like JS object that tracks the positional and named independently?

[21:57] <Xliff> Actually, I want a object that behaves like both a Hash and an Array.

[21:58] <Xliff> So I wrote my own that wraps both. :)

[22:25] *** Xliff left
[23:19] *** kjp left
[23:22] *** kjp joined
