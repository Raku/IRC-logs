[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:09] *** codesections left
[06:11] *** codesections joined
[09:24] *** ab5tract joined
[09:45] <Geth> ¦ rakudo/main: 9db0bc973c | (Brian Duggan)++ (committed using GitHub Web editor) | 7 files
[09:45] <Geth> ¦ rakudo/main: RakuAST: implement recursive regexes
[09:45] <Geth> ¦ rakudo/main: 
[09:45] <Geth> ¦ rakudo/main: This adds RakuAST support for the recursive regex token, <~~>.
[09:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9db0bc973c
[09:59] *** gfldex left
[10:00] *** gfldex joined
[10:39] <lizmat> nine: I'm looking at making: sub () { $^a } fail properly at compile time
[10:39] <lizmat> it looks like I need a way to ask $*BLOCK whether it has seen a real signature
[10:40] <lizmat> when the signature is parsed, it is already "attach"ed to the $*BLOCK
[10:40] <lizmat> I just don't see a way to introspect that
[10:40] <lizmat> thoughts?
[10:53] <nine> Wait, $*BLOCK is only known by the grammar and actions. But surely such a check should be done by the node at CHECK time?
[10:57] <lizmat> hmmm...   I guess I should learn that CHECK time is not too late to do a compile time error, right ?
[10:58] <nine> Well the name should kinda give it away, shouldn't it? :)
[11:01] <lizmat> well, no, not to me...  CHECK time to me is at a time you *can* report errors , but have lost the position in the code where they occurred
[11:01] <lizmat> ok, so RakuAST::VarDeclaration::Placeholder is not a CheckTime, so that would have to change
[11:10] <nine> But nodes still have an origin?
[11:13] <lizmat> I guess that's something I need to burn into my brain :-)
[11:21] <lizmat> ok, so I added a CheckTime check, yet the error does *not* show the location in the source
[11:22] <lizmat> ah, and it always fails :-(
[11:24] <lizmat> I guess I could check for any parameters, but then: sub () { $^a }   would still succeed
[11:27] <nine> AFAIK error reporting is not fully integrated yet
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:23] <lizmat> ok, so I basically got the PERFORM-CHECK logic in there, but have no reliable way to distinguish from:
[12:23] <lizmat> a. no signature specified at all (an empty Signature object is always created)
[12:24] <lizmat> b. a signature without parameters (an empty parameters list is always created)
[12:24] <lizmat> c. parameters that have been added by placeholders
[12:25] <lizmat> not setting up an empty parameters list, seems the most logic thing to do
[12:26] <lizmat> but then there's a *lot* of places that are iterating over it and assume that there's something to iterate
[12:26] <lizmat> which feels meh
[13:36] <vrurg> lizmat: I'm out of context, but let me a wild guess for a: a subclass? NoSignature is Signature.
[14:39] <MasterDuke> a lot of the remaining spectest fails are error related, e.g., the one fail in t/spec/S32-array/push.t is:
[14:39] <MasterDuke>     # Expected: X::TypeCheck::Argument
[14:39] <MasterDuke>     # Got:      X::AdHoc
[14:55] <[Coke]> Ooh, that seems low-hanging.
[15:04] <nine> I've been saying for months that there is a _lot_ of low hanging fruit like that :)
[15:05] <nine> lizmat: what if you phrase the condition differently? "if there are placeholder parameters, there must not be any other parameters"
[15:05] <nine> Ah, that still doesn't cover sub () { $^a }
[15:13] <[Coke]> to test, build as normal, then set the env var to run tests/roast?
[15:14] <nine> yes
[15:33] <[Coke]> for roast, is there a special target, or just 'spectest' ok?
[15:46] <[Coke]> any pointers on the unicode symbols in the --target=ast output?
[15:46] <[Coke]>     Statement::Expression ⚓▪𝄞 -e:1 ⎡3.say⎤
[15:53] <discord-raku-bot> <Nemokosch> > <vrurg> 'sunk', 'block', and 'key'
[15:53] <discord-raku-bot> <Nemokosch> I guess it's applicable again
[16:12] *** discord-raku-bot left
[16:12] *** discord-raku-bot joined
[16:15] <[Coke]> would something like https://gist.github.com/coke/2786e14b70166d055d9e87bda6e80367 be helpful?
[16:19] <[Coke]> anyone have a pointer to a vim wrapper that lets you drop it in a pipeline? I've lost my old link to such a thing.
[16:30] <nine> [Coke]: I'm not sure what you mean with that gist?
[16:41] <[Coke]> starting a list of places in tests for rakuast where the only error is the expected exception type, showing the file, the snippet, and the types
[16:41] <[Coke]> I was putting a list together for me to work on, but if it's helpful for anyone else... great, I guess?
[16:52] *** squashable6 left
[16:52] <[Coke]> (vim wrapper) now called "vipe" and part of moreutils in brew.
[16:54] *** squashable6 joined
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:20] *** Xliff joined
[18:22] *** ab5tract left
[19:34] *** RakuIRCLogger left
[19:34] *** RakuIRCLogger joined
[19:48] <Geth> ¦ rakudo/main: 6d9c4c7694 | (Elizabeth Mattijsen)++ | 2 files
[19:48] <Geth> ¦ rakudo/main: RakuAST: add sorry for using placeholder when not allowed
[19:48] <Geth> ¦ rakudo/main: 
[19:48] <Geth> ¦ rakudo/main: When a placeholder is encountered, check whether the signature of
[19:48] <Geth> ¦ rakudo/main: the placeholder owner already has an instantiated parameters list.
[19:48] <Geth> ¦ rakudo/main: If it has, then add a X::Signature::Placeholder sorry.  Except if
[19:48] <Geth> ¦ rakudo/main: the placeholder name is '@_' or '%_': if *these* occur in the
[19:48] <Geth> ¦ rakudo/main: parameters list, then they're ok:
[19:48] <Geth> ¦ rakudo/main: <…commit message has 19 more lines…>
[19:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6d9c4c7694
[19:53] *** nine left
[19:53] *** nine joined
[19:59] <Geth> ¦ rakudo/main: 5 commits pushed by (Elizabeth Mattijsen)++
[19:59] <Geth> ¦ rakudo/main: 6ac6cd0906 | * (create placeholder.rakutest)
[19:59] <Geth> ¦ rakudo/main: eb72312ea9 | * (keep signature.rakutest)
[19:59] <Geth> ¦ rakudo/main: c3b55cdcbd | * (merge)
[19:59] <Geth> ¦ rakudo/main: 7c6624b325 | Copied (with git history):
[19:59] <Geth> ¦ rakudo/main: 789a809673 | RakuAST: final step in splitting signature/placeholer tests
[19:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/6d9c4c7694db...789a80967398
[20:18] <Geth> ¦ rakudo/main: 1dcf6452a5 | (Elizabeth Mattijsen)++ | src/Raku/ast/variable-declaration.rakumod
[20:18] <Geth> ¦ rakudo/main: RakuAST: use variable instead of calling the method (again)
[20:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1dcf6452a5
[20:18] <Geth> ¦ rakudo/main: b583c33317 | (Elizabeth Mattijsen)++ | t/12-rakuast/placeholder.rakutest
[20:18] <Geth> ¦ rakudo/main: RakuAST: test RakuAST::VarDeclaration::Placeholder::Slurpy(Array|Hash)
[20:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b583c33317
