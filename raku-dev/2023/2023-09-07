[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:53] *** MasterDuke joined
[02:48] *** hythm left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:28] *** ab5tract joined
[08:35] <Geth> ¦ rakudo/main: 1eb3db7701 | (Elizabeth Mattijsen)++ | src/core.c/Exception.rakumod

[08:35] <Geth> ¦ rakudo/main: Add missing ) to message, melezhik++

[08:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1eb3db7701

[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:14] *** jgaz joined
[13:14] *** linkable6 left
[13:14] *** evalable6 left
[13:15] *** evalable6 joined
[13:16] *** linkable6 joined
[14:52] *** gfldex left
[14:52] *** gfldex joined
[17:22] *** ab5tract left
[17:26] *** ab5tract joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:18] <[Coke]> new jvm failure mode: https://github.com/rakudo/rakudo/issues/5337

[18:18] <[Coke]> we're actually breaking the java runtime. :)

[19:22] <ugexe> our CI tests aren't failing with that

[20:18] <[Coke]> this is on my mac m2 running 13.4; 24GB memory

[20:18] <[Coke]> java 20.0.2

[20:38] <ugexe> i wonder if that java version is too new

[20:39] <ugexe> the CI tests have OpenJDK 11.0.20.1

[20:53] *** ab5tract left
[21:03] <MasterDuke> there's an openjdk issue about this, a regression in 17

[21:03] <MasterDuke> https://bugs.openjdk.org/browse/JDK-8294677

[21:07] <MasterDuke> https://github.com/rakudo/rakudo/issues/4952 i believe is the first mention of it

[21:09] <MasterDuke> we are doing something non-(optimal|usual), so regardless that's an area for optimization. i believe Kaiepi did some related work and had some thoughts about future plans

[21:10] <MasterDuke> i believe we're creating too (big|many) classes

[21:52] *** tonyo left
[21:52] *** tonyo joined
[22:03] *** squashable6 left
[22:05] *** squashable6 joined
[22:13] <[Coke]> MasterDuke: can you do me a favor and link to that in the ticket?

[22:50] <gfldex> m: my %h; my $c = ""; dd %h«$c»; dd %h{""};

[22:50] <camelia> rakudo-moar 1eb3db770: OUTPUT: «()␤Any %h{''} = Any␤»

[22:51] <gfldex> Is the difference intentional?

[22:52] <discord-raku-bot> <nemokosch> m: my %h; dd %h<>

[22:52] <discord-raku-bot> <Raku eval>  Hash %h = {} 

[22:52] <discord-raku-bot> <nemokosch> pft

[22:52] <discord-raku-bot> <nemokosch> m: my %h; dd %h{Empty}

[22:52] <discord-raku-bot> <Raku eval>  () 

[22:53] <discord-raku-bot> <nemokosch> this should be it...

[23:04] <japhb> gfldex: The first one is a hash slice, not a single-entry hash lookup.

[23:06] <gfldex> Thanks!

[23:08] <japhb> m: my %h; my $c = ""; dd %h<>; dd %h< >; dd %h«$c»; dd %h<<"">>; dd %h{""};

[23:08] <camelia> rakudo-moar 1eb3db770: OUTPUT: «Hash %h = {}␤Hash %h = {}␤()␤Any %h{''} = Any␤Any %h{''} = Any␤»

[23:08] <japhb> It's kindof interesting from a "that's a bit confusing" standpoint that there are (at least) three different variations there: ^^

[23:10] <japhb> And I do think it's a valid question whether we've chosen the best answers for those edge cases, but IANALD. (LD = Language Designer)

[23:26] <gfldex> `%h«$c»` returning () may predate Empty. For some reason I expected the latter.

