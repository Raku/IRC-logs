[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:42] *** raschip joined
[02:15] <jdv> i ran blin yday.  took 4h and had 20 or so possible issues...

[02:16] <jdv> might need to defer release but i havent gotten to digging yet so who knows.

[02:42] *** evalable6 left
[02:42] *** linkable6 left
[02:44] *** evalable6 joined
[02:45] *** linkable6 joined
[02:51] *** raschip left
[03:52] *** MasterDuke joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:49] *** dogbert17 joined
[06:52] *** dogbert11 left
[08:37] <Geth> ¦ rakudo/main: 6f1b0fe7d1 | (Stefan Seifert)++ | 3 files

[08:37] <Geth> ¦ rakudo/main: RakuAST: Fix SETTING:: in v6.e still finding CORE.d

[08:37] <Geth> ¦ rakudo/main: 

[08:37] <Geth> ¦ rakudo/main: 6.e has a replacement PseudoStash class that also needed adjusting for

[08:37] <Geth> ¦ rakudo/main: finding the setting frame from a RakuAST compiled comp unit. Because the

[08:37] <Geth> ¦ rakudo/main: implementation differs, replace the previous solution with a more

[08:37] <Geth> ¦ rakudo/main: reliable one, i.e. add another marker to the unit frame's lexpad.

[08:37] <Geth> ¦ rakudo/main: 

[08:37] <Geth> ¦ rakudo/main: This marker can be removed once we switch to RakuAST completely (with

[08:37] <Geth> ¦ rakudo/main: support for the old frontend then removed from PseudoStash)

[08:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6f1b0fe7d1

[08:37] <nine> And this brings us to 127 make test files passing :)

[08:43] <nine> Only 12 failing files remaining. 2 because we don't support subsets yet, 2 because of react being NYI. 2 because POD variables (i.e. $=pod) aren't implemented yet.

[09:40] *** NemokoschKiwi joined
[09:46] *** NemokoschKiwi left
[10:08] *** sena_kun joined
[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:06] *** raschip joined
[11:41] <Geth> ¦ rakudo/main: 7a6c3095ed | MasterDuke17++ (committed using GitHub Web editor) | src/core.c/Rakudo/QuantHash.pm6

[11:41] <Geth> ¦ rakudo/main: Micro-optimize ADD-PAIRS-TO-BAG|MIX

[11:41] <Geth> ¦ rakudo/main: 

[11:41] <Geth> ¦ rakudo/main: Benchmark (say "big.txt".IO.slurp.lc.words.Bag.elems, where "big.txt" has 75,161 words and is 6.2mb) drops from ~0.97s to ~0.92s and from ~7.5b instructions to ~7.2b instructions.

[11:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7a6c3095ed

[11:46] <lizmat> nine: is it correct I see breakage in the use of SETTING:: in non-RAKUDO_RAKUAST context?

[11:46] <lizmat> "ctxlexpad needs an MVMContext"

[11:52] <nine> Oh, apparently I forgot to run a non-RakuAST spectest :/ and test didn't catch this...

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:02] <Geth> ¦ rakudo/main: b21cd61c04 | (Stefan Seifert)++ | src/core.c/PseudoStash.pm6

[12:02] <Geth> ¦ rakudo/main: Fix "ctxlexpad needs an MVMContext" regression in SETTING::

[12:02] <Geth> ¦ rakudo/main: 

[12:02] <Geth> ¦ rakudo/main: Apparently the context can be null

[12:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b21cd61c04

[12:27] <Geth> ¦ rakudo/main: 500508664f | (Elizabeth Mattijsen)++ | 3 files

[12:27] <Geth> ¦ rakudo/main: Introduce $*EXIT / $*EXCEPTION dynamic vars

[12:27] <Geth> ¦ rakudo/main: 

[12:27] <Geth> ¦ rakudo/main: Basically the implementation of https://github.com/rakudo/rakudo/pull/5014

[12:27] <Geth> ¦ rakudo/main: without a commit with a lot of noise.

[12:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/500508664f

[12:55] <discord-raku-bot> <Nemokosch> hah, I build a triple every second day to keep up with the changes 😄

[13:09] <Geth> ¦ rakudo/main: b81103d99a | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[13:09] <Geth> ¦ rakudo/main: Bump NQP to get JVM fixes

[13:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b81103d99a

[14:14] <lizmat> notable6: weekly

[14:14] <notable6> lizmat, 1 note: 2023-01-30T20:25:08Z <raschip>: new fez release

[14:14] <lizmat> notable6: weekly reset

[14:14] <notable6> lizmat, Moved existing notes to “weekly_2023-01-31T14:14:36Z”

[14:49] *** linkable6 left
[14:49] *** evalable6 left
[14:51] *** evalable6 joined
[14:51] *** linkable6 joined
[14:59] *** ab5tract joined
[15:12] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/01/31/2023-05-rb-awarded/

[15:40] *** dogbert11 joined
[15:42] *** dogbert12 joined
[15:42] *** dogbert17 left
[15:45] *** dogbert11 left
[15:51] *** dogbert17 joined
[15:52] *** dogbert11 joined
[15:52] *** dogbert12 left
[15:56] *** dogbert17 left
[16:12] *** dogbert17 joined
[16:13] *** dogbert11 left
[16:16] *** dogbert17 left
[18:00] *** reportable6 left
[18:01] *** sena_kun left
[18:03] *** reportable6 joined
[18:04] *** sena_kun joined
[18:30] *** raschip left
[19:09] *** NemokoschKiwi joined
[19:16] <gfldex> m: sub foo(str $s) { say $s.WHAT }; multi sub bar(str $s) { say $s.WHAT }; foo("abc"); bar("abc");

[19:16] <camelia> rakudo-moar b81103d99: OUTPUT: «(Str)␤Cannot resolve caller bar(Str:D); none of these signatures matches:␤    (str $s)␤  in block <unit> at <tmp> line 1␤␤»

[19:16] <gfldex> only one of them can be right, right?

[19:18] <nine> Multis are pickier. Or rather with only subs we try harder to shove the args into the signature.

[19:18] <lizmat> nope, they're both right :-)

[19:18] <lizmat> because you can dispatch on str and Str differently

[19:19] <lizmat> whereas the only sub with the str signature *will* accept Str as well

[19:19] <lizmat> because it can

[19:19] <gfldex> Because it's a compile time decision.

[19:23] <lizmat> no, runtime ?

[19:24] <lizmat> m: multi a(str $a) { dd }; multi a(Str $a) { dd }; a "foo"

[19:24] <camelia> rakudo-moar b81103d99: OUTPUT: «sub a(Str $a)␤»

[19:24] <gfldex> Well, then I'm confused.

[19:24] <lizmat> m: multi a(str $a) { dd }; multi a(Str $a) { dd }; a my str $ = "foo"

[19:24] <camelia> rakudo-moar b81103d99: OUTPUT: «sub a(str $a)␤»

[19:25] <lizmat> note that it dispatched differently on "foo" (Str:D) and a native str "foo"

[19:26] <gfldex> I'm not surprised that happens. I didn't expect the inconsitency between single and multi dispatch.

[19:30] <discord-raku-bot> <Nemokosch> same

[19:31] <discord-raku-bot> <Nemokosch> why "can" it accept Str as well?

[19:31] <discord-raku-bot> <Nemokosch> oops, wrong question

[19:31] <discord-raku-bot> <Nemokosch> nevermind

[19:32] <lizmat> if the "inconsistency" wouldn't exist, you wouldn't be able to dispatch on str *and* Str in the same multi

[19:33] <lizmat> *or* you wouldn't be able to call a block with a literal string if the parameter was a native string 

[19:33] <discord-raku-bot> <Nemokosch> m: multi f(str $s) { "ok" }; say f "yes";

[19:33] <lizmat> and vice-versa

[19:33] <discord-raku-bot> <Raku eval>  ok  

[19:33] <discord-raku-bot> <Nemokosch> ^this I find interesting, though

[19:34] <discord-raku-bot> <Nemokosch> here, it looks like it could dispatch straight to str

[19:35] <discord-raku-bot> <Nemokosch> for only vs multi sub, let's say, that seems pragmatic

[19:35] <discord-raku-bot> <Nemokosch> but why does the multi match when there's only one argument?

[19:37] <discord-raku-bot> <Nemokosch> oh, this is the same thing that we already discovered today...

[19:37] <discord-raku-bot> <Nemokosch> $s itself is the failure, I guess

[19:38] <discord-raku-bot> <Nemokosch> hm, this seems trickier though

[19:39] <discord-raku-bot> <Nemokosch> m: 'multi sub bar(str $s) { $s.^name.say }; bar("abc")

[19:39] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1) at /home/glot/main.raku:1 ------> bar(str $s) { $s.^name.say }; bar("abc")⏏<EOL>     expecting any of:         single quotes         statement list         term  

[19:39] <discord-raku-bot> <Nemokosch> yuck

[19:39] <discord-raku-bot> <Nemokosch> m: multi sub bar(str $s) { $s.^name.say }; bar("abc")

[19:39] <discord-raku-bot> <Raku eval>  Str  

[19:39] <discord-raku-bot> <Nemokosch> m: multi sub bar(str $s) { $s.Str.say }; bar("abc")

[19:39] <discord-raku-bot> <Raku eval>  abc  

[19:40] <discord-raku-bot> <Nemokosch> okay, this is kinda crazy

[19:41] <discord-raku-bot> <Nemokosch> so it referred to itself as an Str

[19:41] <discord-raku-bot> <Nemokosch> m: multi sub bar(str $s) { $s.say }; bar("abc")

[19:41] <discord-raku-bot> <Raku eval>  abc  

[19:41] <discord-raku-bot> <Nemokosch> this is where one would stop, it's a normal string, period

[19:41] <discord-raku-bot> <Nemokosch> m: multi sub bar(str $s) { say $s}; bar("abc")

[19:41] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot resolve caller bar(Str:D); none of these signatures matches:     (str $s)   in block <unit> at main.raku line 1   

[19:41] <discord-raku-bot> <Nemokosch> WAT

[19:42] <gfldex> m: say 'abc' ~~ str;

[19:42] <camelia> rakudo-moar b81103d99: OUTPUT: «False␤»

[19:42] <discord-raku-bot> <Nemokosch> how does it explode with say $s, claiming failed dispatch, but succeeds with $s.say just perfectly?

[19:46] <lizmat> native strings are just bytes in memory.  .WHAT on it will upgrade

[19:46] <lizmat> they're not objects, they pretend to be objects by automatically upgrading when necessary

[19:46] <lizmat> like having .WHAT called on them

[19:46] <discord-raku-bot> <Nemokosch> ... or .say called on them

[19:47] <discord-raku-bot> <Nemokosch> okay, gotcha. It's way less than awesome though, that it retrospectively lies that it was the dispatch that failed?

[19:47] <Xliff> m: multi sub bar (Str $s) { say $s}; bar("abc")

[19:47] <camelia> rakudo-moar b81103d99: OUTPUT: «abc␤»

[19:47] <discord-raku-bot> <Nemokosch> kindof a heisen-error

[19:48] <Xliff> str !=:= Str

[19:48] <lizmat> but there's a str inside of a Str  :-)

[19:48] <Xliff> Exactly! :)

[19:48] <discord-raku-bot> <Nemokosch> the dispatch did not fail; the code did start executing

[19:49] <discord-raku-bot> <Nemokosch> maybe it should have failed but one thing it certainly shouldn't have done is start to execute the code, and then lie that there was no candidate to choose

[19:52] <discord-raku-bot> <Nemokosch> to be honest, dispatch checks seem kind of fragile, like Int() $foo will be perfectly fine until the second you actually perform some operation on it, at which point you get the Failure it holds for you

[19:53] <discord-raku-bot> <Nemokosch> but this is an extreme; here, even the error message is wrong

[19:55] <lizmat> m: sub a(Int() $a) { say "entered"; dd $a }; a "foo"  # this feels like a bug to me

[19:55] <camelia> rakudo-moar b81103d99: OUTPUT: «entered␤Failure.new(exception => X::Str::Numeric.new(source => "foo", pos => 0, reason => "base-10 number must begin with valid digits or '.'"), backtrace => Backtrace.new)␤»

[19:56] <lizmat> otoh, the accepting signature *is* Any

[19:57] <discord-raku-bot> <Nemokosch> the same way, I suppose Int(Str) could be argued for

[19:57] <lizmat> m: sub a(Int(Str) $a) { say "entered"; dd $a }; a "foo"  # this feels like a bug to me

[19:57] <camelia> rakudo-moar b81103d99: OUTPUT: «entered␤Failure.new(exception => X::Str::Numeric.new(source => "foo", pos => 0, reason => "base-10 number must begin with valid digits or '.'"), backtrace => Backtrace.new)␤»

[19:57] <discord-raku-bot> <Nemokosch> then there seems to be nothing left with the current concept of coercions than to do a where clause check?

[20:23] *** dogbert17 joined
[20:27] *** dogbert17 left
[20:34] <Geth> ¦ nqp/cfa-doc-main: 2093cb6144 | cfa++ (committed using GitHub Web editor) | README.pod

[20:34] <Geth> ¦ nqp/cfa-doc-main: Update branch references in README.pod

[20:34] <Geth> ¦ nqp/cfa-doc-main: 

[20:34] <Geth> ¦ nqp/cfa-doc-main: Replace references to `master` with `main`.

[20:34] <Geth> ¦ nqp/cfa-doc-main: 

[20:34] <Geth> ¦ nqp/cfa-doc-main: https://dev.azure.com links left unchanged for now, as apparently

[20:34] <Geth> ¦ nqp/cfa-doc-main: `main` isn't currently being built there.

[20:34] <Geth> ¦ nqp/cfa-doc-main: review: https://github.com/Raku/nqp/commit/2093cb6144

[20:34] <Geth> ¦ nqp: cfa++ created pull request #796: Update branch references in README.pod

[20:34] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/796

[20:47] <Xliff> m: sub a(Int(Str) $a) { say "entered"; dd $a }; a "10"  # this feels like a bug to me

[20:47] <camelia> rakudo-moar b81103d99: OUTPUT: «entered␤10␤»

[20:47] <Xliff> m: sub a(Int(Str) $a) { say "entered"; dd $a }; a "1f"  # this feels like a bug to me

[20:47] <camelia> rakudo-moar b81103d99: OUTPUT: «entered␤Failure.new(exception => X::Str::Numeric.new(source => "1f", pos => 1, reason => "trailing characters after number"), backtrace => Backtrace.new)␤»

[20:47] <Xliff> lizmat: ?

[20:48] <lizmat> it's not, as the constraint is Str, and the result of the coercion to Int is bound to $a

[20:50] <discord-raku-bot> <Nemokosch> m: multi sub bar (str $s) { say $s}; bar("abc")

[20:50] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot resolve caller bar(Str:D); none of these signatures matches:     (str $s)   in block <unit> at main.raku line 1   

[20:50] <discord-raku-bot> <Nemokosch> this is still a different level of wrong though

[20:51] <lizmat> why is it wrong?  If you want to accept both Str and str as argument, you would have specified Str $s

[20:51] <lizmat> m: multi sub bar (str $s) { say $s}; bar(my str $ = "abc")

[20:51] <camelia> rakudo-moar b81103d99: OUTPUT: «abc␤»

[20:51] <lizmat> m: multi sub bar (Str $s) { say $s}; bar(my str $ = "abc")

[20:51] <camelia> rakudo-moar b81103d99: OUTPUT: «abc␤»

[20:55] <discord-raku-bot> <Nemokosch> because the dispatch didn't actually fail

[20:56] <discord-raku-bot> <Nemokosch> m: multi sub bar (str $s) { $s.say }; bar("abc")

[20:56] <discord-raku-bot> <Raku eval>  abc  

[20:56] <discord-raku-bot> <Nemokosch> at least not when you do ^this

[20:56] <discord-raku-bot> <Nemokosch> it's possible that the former is right and this one is wrong but they really cannot be right at the same time

[20:58] <discord-raku-bot> <Nemokosch> tried to disable spesh, didn't help, still wrong

[21:00] <lizmat> nothing to do with spesh, this was a design decision

[21:00] <lizmat> also:

[21:00] <lizmat> m: dd str.^mro

[21:00] <camelia> rakudo-moar b81103d99: OUTPUT: «(str, Str, Cool, Any, Mu)␤»

[21:00] <discord-raku-bot> <Nemokosch> that the dispatch will succeed if it looks into the code block and sees certain things?

[21:01] <lizmat> so Str accepts str, but str does not accept Str

[21:01] <discord-raku-bot> <Nemokosch> it really feels like you just don't get what I'm desperately trying to point at

[21:01] <discord-raku-bot> <Nemokosch> like we are not talking about the same thing

[21:02] <lizmat> apparently I'm not, but then again, I'm trying to do 4 things at the same time

[21:02] <discord-raku-bot> <Nemokosch> I'll try to recompile it in the opposite order

[21:03] <discord-raku-bot> <Nemokosch> m: multi sub bar (str $s) { ... }; bar("abc")

[21:03] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot resolve caller bar(Str:D); none of these signatures matches:     (str $s)   in block <unit> at main.raku line 1   

[21:03] <discord-raku-bot> <Nemokosch> Okay, so far so good - am I right?

[21:03] *** Xliff left
[21:05] <lizmat> yes, because the dispatch fails because str is not a Str and "abc" is a Str

[21:06] <discord-raku-bot> <Nemokosch> perfect

[21:07] <discord-raku-bot> <Nemokosch> now let me change one thing in the function body

[21:07] <discord-raku-bot> <Nemokosch> and nothing else

[21:07] <discord-raku-bot> <Nemokosch> m: multi sub bar (str $s) { $s.say }; bar("abc")

[21:07] <discord-raku-bot> <Raku eval>  abc  

[21:08] <discord-raku-bot> <Nemokosch> I suppose the function body shouldn't have an influence on the dispatch?

[21:08] <lizmat> aah... I think I understand what's happening

[21:09] <lizmat> { ... } is a special case of  stub:  I don't think stubs actually take part in multi-dispatch

[21:09] <discord-raku-bot> <Nemokosch> do function bodies in general take part in multi-dispatch?

[21:10] <discord-raku-bot> <Nemokosch> because I can produce differing cases without the use of ...

[21:11] <lizmat> hmmmm...  ok, I will need to mull about that

[21:11] <discord-raku-bot> <Nemokosch> actually, I can produce two differing cases without using the argument at all

[21:11] <lizmat> and I also need to afk for an hour or so

[21:11] <lizmat> please make an issue for it  :-)

[21:11] <lizmat> afk&

[21:11] <discord-raku-bot> <Nemokosch> okay, sure 👍

[21:28] *** NemokoschKiwi left
[22:04] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/issues/5176 feel free to rename this one

[22:12] *** NemokoschKiwi joined
[22:16] *** NemokoschKiwi left
[22:26] <Geth> ¦ XML/main: 9d7a91d3d0 | (Polgár Márton)++ | 3 files

[22:26] <Geth> ¦ XML/main: Introducing rakudoc-generated README

[22:26] <Geth> ¦ XML/main: review: https://github.com/raku-community-modules/XML/commit/9d7a91d3d0

[22:27] *** ab5tract left
[22:36] *** NemokoschKiwi joined
[22:36] *** NemokoschKiwi left
[22:56] *** sena_kun left
