[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:51] *** squashable6 left
[00:52] *** squashable6 joined
[03:23] *** linkable6 left
[03:23] *** evalable6 left
[03:23] *** linkable6 joined
[03:25] *** evalable6 joined
[04:25] *** sourceable6 left
[04:25] *** linkable6 left
[04:25] *** reportable6 left
[04:25] *** committable6 left
[04:25] *** nativecallable6 left
[04:25] *** greppable6 left
[04:25] *** tellable6 left
[04:25] *** statisfiable6 left
[04:25] *** benchable6 left
[04:25] *** bisectable6 left
[04:25] *** evalable6 left
[04:25] *** squashable6 left
[04:25] *** releasable6 left
[04:25] *** shareable6 left
[04:25] *** statisfiable6 joined
[04:25] *** benchable6 joined
[04:25] *** greppable6 joined
[04:26] *** sourceable6 joined
[04:26] *** reportable6 joined
[04:26] *** shareable6 joined
[04:26] *** tellable6 joined
[04:26] *** linkable6 joined
[04:27] *** bisectable6 joined
[04:27] *** releasable6 joined
[04:27] *** nativecallable6 joined
[04:27] *** committable6 joined
[04:28] *** squashable6 joined
[04:28] *** evalable6 joined
[05:55] *** ilogger2 left
[05:55] *** ilogger2 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:53] *** ab5tract joined
[09:58] *** linkable6 left
[09:58] *** evalable6 left
[09:59] *** evalable6 joined
[10:00] *** linkable6 joined
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:14] *** ab5tract left
[13:16] <Geth> ¦ rakudo/main: 2a331f1f89 | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[13:16] <Geth> ¦ rakudo/main: RakuAST: several fixes / additions / removals

[13:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2a331f1f89

[13:34] *** jgaz joined
[14:06] *** ab5tract joined
[14:10] *** ab5tract left
[14:11] *** ab5tract joined
[14:35] *** ab5tract left
[15:52] *** hythm joined
[17:05] *** codesections joined
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:57] *** ab5tract joined
[19:09] <Geth> ¦ roast: 3368e594d6 | (Elizabeth Mattijsen)++ | S32-list/grep-k.t

[19:09] <Geth> ¦ roast: Mark test as skip for now

[19:09] <Geth> ¦ roast: 

[19:09] <Geth> ¦ roast: It breaks compilation with RakuAST, and since this returns bogus

[19:09] <Geth> ¦ roast: results with the legacy grammar anyway, it seems safe to mark this

[19:09] <Geth> ¦ roast: as "skip", at least for now.

[19:09] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/3368e594d6

[19:27] *** ab5tract left
[20:26] <vrurg> We have a huge hole in handling concurrent module loading. There is a race, likely related to modifying stashes, which with nearly 100% probablity results in SIGSEGV. :(

[20:28] <ugexe> https://github.com/rakudo/rakudo/issues/1920

[20:36] <vrurg> Perhaps, that's it. My case is table. It dies at line 5230 in Perl6/World.nqp, in nqp::existskey. The exact location in MoarVM is always P6opaque.c, 1541 because del is NULL.

[20:36] <tonyo> why not just implemenet ugexe's code?

[20:36] <tonyo> on that issue

[20:39] <ugexe> i'm not sure that really solves it generally. like you could do a load module workflow outside of e.g. $*REPO.need for instance

[20:40] <ugexe> it might be possible to have such a lock somewhere else to work more generally though

[20:42] <vrurg> I just hope that the lock wouldn't block loading other modules why one is precompiling. Because the entire point for me is to be able to precompile and analyze at the same time.

[20:42] <vrurg> Yet, the only 100% valid solution would be a thread-safe Stash.

[20:43] <ugexe> yeah hopefully the lock could go around the stash or serialization or wahtever is causing it

[20:44] <vrurg> I believe that the cause is in merging globals. As far as I remember it's the only location where a stash gets written into.

[20:46] <vrurg> BTW, interesting fact is that for me it dies while looking up X::Attribute::Required – i.e. it looks like its the CORE stash which gets broken.

[21:20] <vrurg> Enclosing the entire `if` starting at line 622 of CURI into `$!lock.protect` doesn't help. Likely because there is a call to `.resolve` made in the other thread. Out of curiousity, I'd try to lock protect the .resolve and see if it works. But that's as much I can do for now.

[21:22] <ugexe> that isn't generalized enough either

[21:22] <ugexe> i can just do CompUnit::Repository::Installation.new(...).need(...) without interacting with $*REPO at all

[21:46] <vrurg> Yes, protecting .resolve doesn't make difference. I'm done with it for today.

[21:46] <japhb> .oO( Well I guess that answers my question from this weekend about whether it's safe yet to parallelize "plugin" (runtime loaded module) loading in MUGS ... )

[21:48] <vrurg> Unfortunately, this makes a lot of code unsafe when 3rd party modules are used. Because sometimes they use dynamic loading.

[21:48] <ugexe> yep

[22:09] *** codesections left
[22:12] *** dogbert17 joined
[22:15] *** dogbert11 left
[22:55] *** jjatria left
[22:55] *** jjatria joined
