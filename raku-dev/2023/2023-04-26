[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[02:10] *** heartburn left
[03:42] *** shmup left
[04:35] *** heartburn joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:43] *** Geth left
[07:31] *** sena_kun joined
[08:33] <lizmat> .
[08:34] *** Geth__ left
[08:34] *** Geth joined
[08:37] *** RakuIRCLogger left
[08:37] *** RakuIRCLogger joined
[08:39] <lizmat> hmmm..  looks like Geth is not getting (some) messages from Github
[08:40] *** Geth left
[08:42] *** Geth joined
[08:46] *** Geth left
[08:46] *** Geth joined
[09:22] *** sena_kun left
[09:30] *** Geth left
[09:31] *** Geth joined
[09:32] *** Geth left
[09:32] *** Geth joined
[09:33] <lizmat> Geth: uptime
[09:33] <Geth> lizmat, 55 seconds
[09:34] <lizmat> grrrr.. I really don't want to get into Geth's code atm to figure out why it's not publishing commits
[09:35] *** Geth left
[09:35] *** Geth joined
[09:37] *** Geth left
[09:37] *** Geth joined
[09:43] *** Geth left
[09:48] *** Geth joined
[09:52] *** Geth left
[09:52] *** Geth joined
[09:54] *** Geth left
[09:57] *** Geth joined
[09:57] <Geth> ¦ rakudo/main: 812ed5f698 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6
[09:57] <Geth> ¦ rakudo/main: RakuAST: make-legacy-pod for =table NYI for now
[09:57] <Geth> ¦ rakudo/main: 
[09:57] <Geth> ¦ rakudo/main: The legacy grammar would do its best to interpret =table specifications
[09:57] <Geth> ¦ rakudo/main: as best as possible in NQP.  The new grammar just collects the
[09:57] <Geth> ¦ rakudo/main: paragraph(s) of the =table specification, leaving it to the legacy
[09:57] <Geth> ¦ rakudo/main: pod generation to make sense of.  But that code hasn't been written
[09:57] <Geth> ¦ rakudo/main: yet, so make it a NYI for now.
[09:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/812ed5f698
[09:58] <Geth> ¦ rakudo/main: 812ed5f698 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6
[09:58] <Geth> ¦ rakudo/main: RakuAST: make-legacy-pod for =table NYI for now
[09:58] <Geth> ¦ rakudo/main: 
[09:58] <Geth> ¦ rakudo/main: The legacy grammar would do its best to interpret =table specifications
[09:58] <Geth> ¦ rakudo/main: as best as possible in NQP.  The new grammar just collects the
[09:58] <Geth> ¦ rakudo/main: paragraph(s) of the =table specification, leaving it to the legacy
[09:58] <Geth> ¦ rakudo/main: pod generation to make sense of.  But that code hasn't been written
[09:58] <Geth> ¦ rakudo/main: yet, so make it a NYI for now.
[09:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/812ed5f698
[09:58] <lizmat> meh
[09:59] <Geth> ¦ rakudo/main: 2edcaa3512 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 4 files
[09:59] <Geth> ¦ rakudo/main: Add `is-monotonically-increasing` method to Iterators
[09:59] <Geth> ¦ rakudo/main: 
[09:59] <Geth> ¦ rakudo/main: Returns False by default.  If returning True, then .sort() can pass
[09:59] <Geth> ¦ rakudo/main: on the underlying iterator unchanged in a new Seq.
[09:59] <Geth> ¦ rakudo/main: 
[09:59] <Geth> ¦ rakudo/main: This now allows:
[09:59] <Geth> ¦ rakudo/main: 
[09:59] <Geth> ¦ rakudo/main:     say (1..*).sort;  # (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14...
[09:59] <Geth> ¦ rakudo/main: 
[09:59] <Geth> ¦ rakudo/main: to work, rather than throwing because the underlying iterator is lazy.
[09:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2edcaa3512
[10:00] <lizmat> turns out Geth has a bug that makes it *not* complain if it cannot bind to the designated port
[10:00] <lizmat> somehow a version of Geth was still running and accepting data from Github but not reporting them here
[10:00] <lizmat> killing that and restarting Geth after that, fixed it
[10:19] <Geth> ¦ roast: 1af7b9e874 | (Elizabeth Mattijsen)++ | S07-iterators/range-iterator.t
[10:19] <Geth> ¦ roast: Add test for Iterator.is-monotonically-increasing
[10:19] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/1af7b9e874
[10:26] <lizmat> nine moritz am I correct in understanding that self.define_slang('Quote',   Raku::QGrammar,       Raku::QActions); in src/Raku/Grammar is a runtime operation ?
[10:57] *** linkable6 left
[10:57] *** evalable6 left
[10:58] *** evalable6 joined
[10:58] *** linkable6 joined
[11:01] <nine> yes
[11:03] <lizmat> cool
[11:38] <lizmat> m: (1..10).lazy.sort   # meh
[11:38] <camelia> rakudo-moar 812ed5f69: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq (you␤might solve this by adding .cache on usages of the Seq, or by assigning␤the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»
[11:39] <lizmat> it appears that https://github.com/rakudo/rakudo/commit/2edcaa3512 introduced this, so reverting that for now
[11:39] <lizmat> bisectable: old=2023.04 (1..10).lazy.sort   # meh
[11:39] <bisectable6> lizmat, Bisecting by output (old=2023.04 new=812ed5f) because on both starting points the exit code is 1
[11:39] <bisectable6> lizmat, bisect log: https://gist.github.com/7db3ace67d886a653dbbd89f91ca4935
[11:39] <bisectable6> lizmat, (2023-04-26) https://github.com/rakudo/rakudo/commit/2edcaa351251ff33ebd48de7cdc18ac69b6edf0d
[11:39] <lizmat> yup
[11:40] <nine> Honestly, I think (1..*).sort failing is just fine
[11:41] <lizmat> the argument was that when passed as an arg to a sub, you wouldn't have to special case ranges, e.g. when sorting x-positions in a graph
[11:42] <Geth> ¦ rakudo/main: e702f0e6a8 | (Elizabeth Mattijsen)++ | 4 files
[11:42] <Geth> ¦ rakudo/main: Revert "Add `is-monotonically-increasing` method to Iterators"
[11:42] <Geth> ¦ rakudo/main: 
[11:42] <Geth> ¦ rakudo/main: This reverts commit 2edcaa351251ff33ebd48de7cdc18ac69b6edf0d.
[11:42] <Geth> ¦ rakudo/main: 
[11:42] <Geth> ¦ rakudo/main: It breaks (1..10).lazy.sort in a weird way, further investigation
[11:42] <Geth> ¦ rakudo/main: is needed
[11:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e702f0e6a8
[11:43] <lizmat> it also broke zef :-(
[11:49] <Geth> ¦ roast: c642d66a12 | (Elizabeth Mattijsen)++ | S07-iterators/range-iterator.t
[11:49] <Geth> ¦ roast: Revert "Add test for Iterator.is-monotonically-increasing"
[11:49] <Geth> ¦ roast: 
[11:49] <Geth> ¦ roast: This reverts commit 1af7b9e8748dd221723a176e972477d9c6359ef9.
[11:49] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c642d66a12
[11:58] *** linkable6 left
[11:58] *** evalable6 left
[12:00] *** reportable6 left
[12:00] *** linkable6 joined
[12:01] *** evalable6 joined
[12:01] *** reportable6 joined
[12:57] *** jgaz joined
[14:07] *** squashable6 left
[14:07] *** evalable6 left
[14:07] *** nativecallable6 left
[14:07] *** reportable6 left
[14:07] *** benchable6 left
[14:07] *** coverable6 left
[14:07] *** notable6 left
[14:07] *** statisfiable6 left
[14:07] *** bisectable6 left
[14:07] *** tellable6 left
[14:07] *** shareable6 left
[14:07] *** releasable6 left
[14:07] *** linkable6 left
[14:07] *** quotable6 left
[14:07] *** unicodable6 left
[14:07] *** bloatable6 left
[14:07] *** sourceable6 left
[14:07] *** committable6 left
[14:07] *** greppable6 left
[14:07] *** bloatable6 joined
[14:07] *** evalable6 joined
[14:08] *** statisfiable6 joined
[14:08] *** quotable6 joined
[14:08] *** sourceable6 joined
[14:08] *** shareable6 joined
[14:08] *** unicodable6 joined
[14:08] *** coverable6 joined
[14:08] *** greppable6 joined
[14:08] *** nativecallable6 joined
[14:09] *** notable6 joined
[14:09] *** tellable6 joined
[14:09] *** linkable6 joined
[14:09] *** reportable6 joined
[14:10] *** releasable6 joined
[14:10] *** squashable6 joined
[14:10] *** bisectable6 joined
[14:10] *** benchable6 joined
[14:10] *** committable6 joined
[14:11] <Geth> ¦ rakudo/main: 1f010bd8ae | (Elizabeth Mattijsen)++ | 3 files
[14:11] <Geth> ¦ rakudo/main: RakuAST: simplify adding pod to compunit
[14:11] <Geth> ¦ rakudo/main: 
[14:11] <Geth> ¦ rakudo/main: It appears you *can* just initialize an attribute with Array.new.
[14:11] <Geth> ¦ rakudo/main: This simplifies adding pod from the grammar significantly: a simple
[14:11] <Geth> ¦ rakudo/main: $*CU.pod-content.push will do the trick
[14:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1f010bd8ae
[14:13] *** Geth left
[14:13] *** Geth joined
[14:20] <[Coke]> Any interest in adding JSONC support to one of the JSON parsers? Or would it be better as a separate module instead of an optional flag?
[14:22] <lizmat> what's JSONC ?
[14:23] <[Coke]> https://changelog.com/news/jsonc-is-a-superset-of-json-which-supports-comments-6LwR
[14:23] <[Coke]> I have a large corpus of files here that appears to be using this variant. (right now I'm just reporting an error processing the JSON if I hit a comment, but it's everywhere)
[14:31] <lizmat> so they're basically C-style comments
[14:32] <lizmat> which can start whenever JSON is looking for the next " for the name of a field
[14:34] <[Coke]> Yup, //single or /* multi-line */
[14:34] <[Coke]> ... Or value of a field, probably?
[14:34] <[Coke]> "stuff": /* nifty */ "value"
[14:37] <lizmat> looks like an extra check for / in parse-thing, + a dedicated sub for nomming the comment, should be enough
[15:01] <[Coke]> trying to find something in powershell I can use in the short term, looks like a regexp in raku might be my quickest answer for today.
[15:04] <lizmat> fwiw, I'll have a PR ready in a few mins
[15:20] <lizmat> meh, a few more mins  :-)
[15:22] <[Coke]> ... oh, nifty.
[15:35] <lizmat> pesky off-by-ones  :-)
[16:12] <lizmat> https://github.com/timo/json_fast/pull/85
[16:12] <lizmat> [Coke] ^^
[16:38] <[Coke]> lizmat: this looks great, thank you - should we hide it behind an option?
[16:38] <[Coke]> lizmat: this looks great, thank you - should we hide it behind an adverb?
[16:38] <[Coke]> (oops)
[16:38] <[Coke]> maybe from-json($text, :jsonc), something like that?
[17:09] *** ab5tract joined
[17:16] <lizmat> [Coke]: I thought about that, but that would either require checking another flag while nomming whitespace
[17:16] <lizmat> or some way to set the whitespace nommer, but either of these options feel like they would be more expensice
[17:16] <lizmat> *ve
[17:18] <nine> Could we not have a JSONC grammar that's derived from the JSON grammar and overrides the ws token?
[17:19] <lizmat> jSON::Fast is *not* grammar based
[17:19] <lizmat> it's a state machine, basically
[17:30] *** ab5tract left
[17:52] *** sena_kun joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:15] *** codesections joined
[18:17] <lizmat> I seem to be missing some clues as to how to run a slang once it has been defined
[18:17] <lizmat>     token doc-content-toplevel {
[18:17] <lizmat>         <.before ^^ \s* '='> <attachment=.quibble(self.slang_grammar('Doc'))>
[18:17] <lizmat>     }
[18:17] <lizmat> doesn't cut it
[18:18] *** [Coke]_ joined
[18:21] *** [Coke] left
[18:26] *** [Coke] joined
[18:27] <[Coke]> .seen timotimo
[18:27] <tellable6> [Coke], I saw timotimo 2021-05-18T11:13:00Z in #raku: <timotimo> you'll need to sink the object you're currently calling .out on, rather than discarding it
[18:28] <[Coke]> anyone seen timo outside of irc?
[18:28] <lizmat> yeah, I've pinged him already
[18:29] <lizmat> timo is his current nick
[18:29] *** [Coke]_ left
[18:32] <lizmat> can you actually have slangs that don't end on a specific closer ?
[18:42] <[Coke]> I'm not sure if you mean something specific by closer, but I don't think I used one in Slang::Date
[18:43] <lizmat> yeah:all of the slangs in the ecosystem, just mix in changed / additional tokens / methods into the MAIN language
[18:56] <[Coke]> .seen timo
[18:56] <tellable6> [Coke], I saw timo 2023-04-24T15:30:59Z in #moarvm: <timo> maybe here "no pr is bad pr" applies
[18:56] <[Coke]> ^_^
[19:00] * vrurg is about to quit using Comma because Intellij is wasting more time than it spares.
[19:13] <gfldex> vrurg: I agree. IDEs save you a lot of time you can spend to micromanage the IDE.
[19:14] <ugexe> IDEs save me so much time writing/refactoring Go its painful to work on the Perl parts
[19:14] <vrurg> Nah, I'm fine with most of it – except for unpredictable, uncurable freezes on re-indexing. 10-15mins trying to get it back to life? Thanks, no.
[19:17] * vrurg wonder if these guys ever heard about threads and background tasks...
[19:24] <vrurg> ugexe: BTW, are there a way to limit the number of pre-compiling rakudos? Because it's another side of the coin: when Comma decides to recompile the entire project with deps my 2019 macbook just stops responding.
[19:25] <ugexe> not that i know of, you'd probably have to ask Xliff since i think they changed it to be parallel
[19:27] <vrurg> OK. Somehow it uses exactly as many processes as I have cores, but quick pick into the sources didn't reveal how it does this.
[19:29] <vrurg> .ask Xliff you seem to be the one behind parallel pre-compiling. Can you tell if there is a way to limit the maximum number of rakudo processes involved?
[19:29] <tellable6> vrurg, I'll pass your message to Xliff
[20:16] <nine> AFAIK Xliff uses custom scripts to precompile in parallel
[20:43] *** vrurg left
[20:48] *** vrurg joined
[21:02] *** sena_kun left
[21:31] *** jgaz left
[22:44] *** coverable6 left
[22:44] *** releasable6 left
[22:44] *** committable6 left
[22:44] *** notable6 left
[22:44] *** greppable6 left
[22:44] *** sourceable6 left
[22:44] *** tellable6 left
[22:44] *** linkable6 left
[22:44] *** benchable6 left
[22:44] *** reportable6 left
[22:44] *** squashable6 left
[22:44] *** nativecallable6 left
[22:44] *** quotable6 left
[22:44] *** shareable6 left
[22:44] *** statisfiable6 left
[22:44] *** evalable6 left
[22:44] *** bloatable6 left
[22:44] *** unicodable6 left
[22:45] *** greppable6 joined
[22:45] *** bloatable6 joined
[22:45] *** sourceable6 joined
[22:45] *** coverable6 joined
[22:45] *** notable6 joined
[22:45] *** releasable6 joined
[22:45] *** statisfiable6 joined
[22:45] *** reportable6 joined
[22:45] *** shareable6 joined
[22:46] *** quotable6 joined
[22:46] *** squashable6 joined
[22:46] *** linkable6 joined
[22:46] *** tellable6 joined
[22:46] *** evalable6 joined
[22:46] *** nativecallable6 joined
[22:47] *** unicodable6 joined
[22:47] *** benchable6 joined
[22:47] *** committable6 joined
[23:46] *** heartburn left
[23:54] *** heartburn joined
