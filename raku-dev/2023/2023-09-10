[00:00] *** reportable6 left
[00:14] *** NemokoschKiwi joined
[00:14] <NemokoschKiwi> bisectable: say 10 .. ^20
[00:14] <bisectable6> NemokoschKiwi, Will bisect the whole range automagically because no endpoints were provided, hang tight
[00:15] <bisectable6> NemokoschKiwi, ¦6c (68 commits): «Range objects are not valid endpoints for Ranges␤  in block <unit> at /tmp/EIGTJqf6_8 line 1␤␤ «exit code = 1»»
[00:15] <bisectable6> NemokoschKiwi, Nothing to bisect!
[00:15] <NemokoschKiwi> that's really nice but I did not change anything that affects that...
[00:15] <NemokoschKiwi> m: say 10 .. ^20
[00:15] <camelia> rakudo-moar 3a70184aa: OUTPUT: «Range objects are not valid endpoints for Ranges␤  in block <unit> at <tmp> line 1␤␤»
[00:18] <discord-raku-bot> <nemokosch>  - multi method new(Whatever \min, \max, :$excludes-min, :$excludes-max) { - nqp::create(self)!SET-SELF(-Inf,max,$excludes-min,$excludes-max,1); + multi method new(Whatever \min, Real(Cool) $max, :$excludes-min, :$excludes-max) { + $max.throw if $max ~~ Failure; + nqp::create(self)!SET-SELF(-Inf,$max,$excludes-min,$excludes-max,1);      } - multi method new(\min, Whatever \max, :$excludes-min, :$excludes-max) {
[00:18] <discord-raku-bot> - nqp::create(self)!SET-SELF(min,Inf,$excludes-min,$excludes-max,1); + multi method new(Real(Cool) $min, Whatever \max, :$excludes-min, :$excludes-max) { + $min.throw if $min ~~ Failure; + nqp::create(self)!SET-SELF($min,Inf,$excludes-min,$excludes-max,1);      } 
[00:18] <NemokoschKiwi> okay, that looks horrible on IRC
[00:18] <NemokoschKiwi> anyway, all I changed was two multi candidates, both of which had one of their arguments as Whatever
[00:19] <NemokoschKiwi> how could that result in 10 .. ^20 suddenly becoming valid?
[00:20] <NemokoschKiwi> and actually, I can very well spot to the modification in the source that caused this, roughly a month ago
[00:22] <NemokoschKiwi> https://github.com/rakudo/rakudo/commit/b4b779525f690bdfb46740a1bb8376633f3e9098
[00:23] <NemokoschKiwi> this is the candidate that fires for me. Why does it fire for me and not for the release?
[00:27] <discord-raku-bot> <nemokosch> if I revert the change, it does work
[00:27] <discord-raku-bot> <nemokosch> how do you know the order in which multi candidates resolve?
[00:27] *** NemokoschKiwi left
[00:28] *** MasterDuke joined
[00:41] <[Coke]> jdv: it's aready working: we just don't support really recent jvms.
[01:10] <Geth> ¦ rakudo: 2colours++ created pull request #5377: Fix of * .. non-number Range scenarios
[01:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5377
[01:11] <Geth> ¦ rakudo: 2colours++ created pull request #5377: Fix of * .. non-number Range scenarios
[01:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5377
[01:24] <Geth> ¦ File-Find/main: 4a70323974 | (Polgár Márton)++ | 2 files
[01:24] <Geth> ¦ File-Find/main: 0.2.0
[01:24] <Geth> ¦ File-Find/main: review: https://github.com/raku-community-modules/File-Find/commit/4a70323974
[02:19] *** reportable6 joined
[02:24] *** squashable6 left
[02:27] *** squashable6 joined
[03:27] *** coverable6 left
[03:27] *** unicodable6 left
[03:27] *** committable6 left
[03:27] *** greppable6 left
[03:27] *** linkable6 left
[03:27] *** squashable6 left
[03:27] *** sourceable6 left
[03:27] *** reportable6 left
[03:27] *** notable6 left
[03:27] *** quotable6 left
[03:27] *** shareable6 left
[03:27] *** tellable6 left
[03:27] *** benchable6 left
[03:27] *** evalable6 left
[03:27] *** statisfiable6 left
[03:27] *** nativecallable6 left
[03:27] *** releasable6 left
[03:27] *** bisectable6 left
[03:28] *** nativecallable6 joined
[03:28] *** greppable6 joined
[03:28] *** linkable6 joined
[03:28] *** reportable6 joined
[03:28] *** releasable6 joined
[03:28] *** benchable6 joined
[03:29] *** tellable6 joined
[03:29] *** unicodable6 joined
[04:31] *** committable6 joined
[04:32] *** bisectable6 joined
[04:32] *** quotable6 joined
[04:34] *** shareable6 joined
[04:38] *** coverable6 joined
[04:40] *** sourceable6 joined
[04:43] *** evalable6 joined
[05:31] *** sivoais left
[05:31] *** sivoais joined
[05:53] *** statisfiable6 joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[07:49] <bartolin> nqp: "aa" ~~ /$<start>=<alpha> $<start>/
[07:49] <camelia> nqp-moarvm: ( no output )
[07:50] <bartolin> ^^ this fails on the jvm backend with "Can not invoke object '&has_aliased_name'. I'm pretty sure that happens since https://github.com/Raku/nqp/commit/a124861a37
[07:51] <bartolin> does someone maybe has a pointer, what could be the problem there (or even how it could be fixed)?
[07:52] <bartolin> (maybe something with nqp::setinvokespec(), but I have no clue)
[07:53] <ab5tract> no ideas here either :(
[07:54] <ab5tract> lizmat: the issue with bindpos_o issue only occurs when the once block has a declaration. so it's definitely a different, unrelated bug
[07:54] <ab5tract> looking into it now but the main once patch should be good to merge
[08:13] *** notable6 joined
[08:15] <ab5tract> hmm, the issue seems to be based on statementprefixes converting their blorsts to thunks on demand, away from the resolver
[08:16] <ab5tract> (meaning where their blorsts get thunked, there is no resolver available to call IMPL-STUB-CODE and they are never walked because they are not stored as children to be visited
[08:30] <ab5tract> lol, nevermind, fixed
[08:31] <ab5tract> following the chain of inheritence to find out that I'm already writing a RakuAST::Code object FTW
[08:43] <ab5tract> lizmat: *now* it's ready :)
[08:44] <ab5tract> bartolin: thanks for working to keep the lights on in JVM land. I keep thinking I should dive into that codebase and see if I can help, but there's just so much to do in RakuAST land
[08:54] <bartolin> ab5tract: thanks :) btw, I'm happy to see the progress on RakuAST, and I think it makes sense to focus on that. (I even thought a couple of times, that I should dip my toes into RakuAST as well. I just never came around to do it.)
[08:54] <bartolin> and for the record: I filed https://github.com/Raku/nqp/issues/808 for the problem with "Can not invoke object '&has_aliased_name'" on nqp-j.
[09:05] <ab5tract> RakuAST is a bit easier than it seems from the outside, but each task can become its very own puzzle box. And missing a small detail (like the inheritence thing above) can send you down a blind alley pretty quickly.
[09:12] <lizmat> ab5tract: I'm gonna squash this PR, right ?
[09:16] <ab5tract> it should only be a single commit
[09:16] <Geth> ¦ rakudo/main: be944af2ab | ab5tract++ (committed using GitHub Web editor) | src/Raku/ast/statementprefixes.rakumod
[09:16] <Geth> ¦ rakudo/main: RakuAST: Fix once blorst not running
[09:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/be944af2ab
[09:16] <lizmat> ab5tract++
[09:17] <ab5tract> my pleasure
[09:18] <bartolin> ab5tract++
[09:19] *** squashable6 joined
[09:34] <ab5tract> Yesterday I was thinking about the challenge of having a good user experience for RakuAST and it made me wonder: what sort of project would serve as good dogfood?
[09:54] <Geth> ¦ nqp: usev6++ created pull request #809: [JVM] Work around error for back-references
[09:54] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/809
[10:21] <Geth> ¦ rakudo/main: 94eb0c340a | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[10:21] <Geth> ¦ rakudo/main: RakuAST: remove last O() handling remains
[10:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/94eb0c340a
[10:21] <Geth> ¦ rakudo/main: 3a0b05d652 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[10:21] <Geth> ¦ rakudo/main: RakuAST: install canary for use of O(…) <O=…>
[10:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a0b05d652
[10:34] <lizmat> m: Q|my int $i; $i += once { 21 } for 1,2; say $i|.AST.EVAL
[10:34] <camelia> rakudo-moar 3a0b05d65: OUTPUT: «Use of uninitialized value of type Any in numeric context␤0␤  in block <unit> at /home/camelia/EVAL_0 line 1␤Use of uninitialized value of type Any in numeric context␤  in block <unit> at /home/camelia/EVAL_0 line 1␤»
[10:34] <lizmat> ab5tract: ^^
[10:35] <lizmat> looks like some QAST issue in some situations
[10:36] <lizmat> t/spec/S04-statements/once.t  lines 118 and following
[10:36] <lizmat> that's the only thing failing atm wrt once
[11:06] *** evalable6 left
[11:06] *** linkable6 left
[11:07] *** linkable6 joined
[11:08] *** evalable6 joined
[11:23] <Geth> ¦ rakudo/main: 9fe819e715 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[11:23] <Geth> ¦ rakudo/main: RakuAST: introduce some helper methods
[11:23] <Geth> ¦ rakudo/main: 
[11:23] <Geth> ¦ rakudo/main: 1. for better readability
[11:23] <Geth> ¦ rakudo/main: 2. for smaller footprint in potential unused branches in hot code
[11:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9fe819e715
[11:27] <Geth> ¦ roast: usev6++ created pull request #839: Update list of dirs for test statistics
[11:27] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/839
[12:00] *** reportable6 left
[12:19] <Geth> ¦ rakudo/main: fc5d02ade4 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[12:19] <Geth> ¦ rakudo/main: RakuAST: make <variable> token a bit more readable
[12:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fc5d02ade4
[12:39] <Geth> ¦ rakudo/main: d192c18c7d | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[12:39] <Geth> ¦ rakudo/main: RakuAST: use the same word boundary markers everywhere
[12:39] <Geth> ¦ rakudo/main: 
[12:39] <Geth> ¦ rakudo/main: So « instead of <<, and » instead of >>, because they stand out better
[12:39] <Geth> ¦ rakudo/main: between all the other < and >'s
[12:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d192c18c7d
[13:00] *** hythm joined
[13:08] <Geth> ¦ rakudo/main: 6817b10b24 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[13:08] <Geth> ¦ rakudo/main: RakuAST: group all alphanumeric infixes together
[13:08] <Geth> ¦ rakudo/main: 
[13:08] <Geth> ¦ rakudo/main: As their parsing requires a word boundary, and will need additional
[13:08] <Geth> ¦ rakudo/main: handling for non-English language versions.
[13:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6817b10b24
[13:38] *** Xliff joined
[13:38] <Xliff> Raku-GLib suite timing statistics for Raku 2023.08.174.g.3.a.70184.aa.1
[13:38] <Xliff> Using the following processor: AMD Ryzen 9 5950X 16-Core Processor
[13:38] <Xliff> Total number of projects: 34 (506509 loc)
[13:38] <Xliff> Total non-parallel compile times: 11970.760 (352.081 avg)
[13:38] <Xliff> Total parallel compile times: 2537.233 (74.624 avg) 4.718x speedup
[13:50] <Geth> ¦ rakudo/main: 7779b56563 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[13:50] <Geth> ¦ rakudo/main: RakuAST: less cursor internals, generic method name
[13:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7779b56563
[14:18] *** vrurg left
[14:25] <Geth> ¦ rakudo/main: c5d36f2f5d | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[14:25] <Geth> ¦ rakudo/main: RakuAST: use OperatorProperties method directly in EXPR
[14:25] <Geth> ¦ rakudo/main: 
[14:25] <Geth> ¦ rakudo/main: Instead of getting a hash, and looking up stuff in there
[14:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c5d36f2f5d
[14:41] <Geth> ¦ rakudo/main: 6b331d9c8d | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[14:41] <Geth> ¦ rakudo/main: RakuAST: scope variables better in EXPR
[14:41] <Geth> ¦ rakudo/main: 
[14:41] <Geth> ¦ rakudo/main: Feels like the old scoping was more optimal in the Parrot days,
[14:41] <Geth> ¦ rakudo/main: but is no longer.  Was also able to eliminate one variable, as
[14:41] <Geth> ¦ rakudo/main: it was only used as a very localized immediate value.
[14:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6b331d9c8d
[14:59] *** vrurg joined
[15:05] <Geth> ¦ rakudo/main: ca05e9fbed | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[15:05] <Geth> ¦ rakudo/main: RakuAST: simplify infix handling in EXPR
[15:05] <Geth> ¦ rakudo/main: 
[15:05] <Geth> ¦ rakudo/main: There is no need to make a difference between $infix and its cursor
[15:05] <Geth> ¦ rakudo/main: $infixcur anymore.  So use $infix only and eliminate an expensive
[15:05] <Geth> ¦ rakudo/main: .MATCH call in the process.
[15:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ca05e9fbed
[15:31] *** reportable6 joined
[17:37] <Geth> ¦ rakudo: ab5tract++ created pull request #5378: RakuAST: Move lexical generation to BEGIN time
[17:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5378
[17:39] <ab5tract> lizmat: will look into that remaining issue with once
[17:39] <lizmat> *phew* for a moment I thought you said "at once"  :-)
[17:42] <ab5tract> :)
[18:00] *** reportable6 left
[18:01] <Geth> ¦ rakudo/main: fe9ff1c667 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[18:01] <Geth> ¦ rakudo/main: RakuAST: use OperatorProperties method directly in EXPR-reduce
[18:01] <Geth> ¦ rakudo/main: 
[18:01] <Geth> ¦ rakudo/main: Instead of getting a hash, and looking up stuff in there.  And
[18:01] <Geth> ¦ rakudo/main: also shortcut / scope some variables better
[18:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fe9ff1c667
[18:02] *** reportable6 joined
[18:03] <Geth> ¦ rakudo/main: 73737c5bb8 | ab5tract++ (committed using GitHub Web editor) | src/Raku/ast/statementprefixes.rakumod
[18:03] <Geth> ¦ rakudo/main: RakuAST: Move lexical generation to BEGIN time
[18:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/73737c5bb8
[18:35] <Geth> ¦ rakudo/main: f4c9f60610 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp
[18:35] <Geth> ¦ rakudo/main: RakuAST: streamline some actions
[18:35] <Geth> ¦ rakudo/main: 
[18:35] <Geth> ¦ rakudo/main: and remove some dead code
[18:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f4c9f60610
[18:38] *** squashable6 left
[18:39] *** squashable6 joined
[19:36] <Geth> ¦ rakudo/main: 5ad51ca562 | (Elizabeth Mattijsen)++ | 2 files
[19:36] <Geth> ¦ rakudo/main: RakuAST: change $*is-type to $*IS-TYPE
[19:36] <Geth> ¦ rakudo/main: 
[19:36] <Geth> ¦ rakudo/main: Dynamic variables that have an action at a distance, should be
[19:36] <Geth> ¦ rakudo/main: all uppercase for readability
[19:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5ad51ca562
[19:36] <Geth> ¦ rakudo/main: 3e652d5f75 | (Elizabeth Mattijsen)++ | 2 files
[19:36] <Geth> ¦ rakudo/main: RakuAST: change $*key to $*KEY
[19:36] <Geth> ¦ rakudo/main: 
[19:36] <Geth> ¦ rakudo/main: Dynamic variables that have an action at a distance, should be
[19:36] <Geth> ¦ rakudo/main: all uppercase for readability.  Also streamline the colonpair /
[19:36] <Geth> ¦ rakudo/main: quotepair tokens / action methods improving readability and
[19:36] <Geth> ¦ rakudo/main: reducing local bytecode size.
[19:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3e652d5f75
[19:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3e652d5f75
[19:44] <Geth> ¦ rakudo/main: 8938e55109 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp
[19:44] <Geth> ¦ rakudo/main: RakuAST: remove dead code from actions
[19:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8938e55109
[19:47] *** codesections joined
[20:04] <Geth> ¦ rakudo/main: b5fcda9fe8 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[20:04] <Geth> ¦ rakudo/main: RakuAST: remove some dead code from grammar
[20:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b5fcda9fe8
[20:04] <Geth> ¦ rakudo/main: daec7797b5 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[20:04] <Geth> ¦ rakudo/main: RakuAST: streamline old-rx-modifiers token
[20:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/daec7797b5
[20:18] *** codesections left
[20:28] <Geth> ¦ rakudo/main: 9311a72030 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[20:28] <Geth> ¦ rakudo/main: RakuAST: streamline no-synthetics check
[20:28] <Geth> ¦ rakudo/main: 
[20:28] <Geth> ¦ rakudo/main: Accept a node and special handling of single grapheme case
[20:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9311a72030
[20:28] <lizmat> and that concludes my hacking for today&
[20:52] <MasterDuke> lizmat: idle curiosity, but have you benchmarked rakuast at all? i.e., find (or create) some large bunch of code that correctly compiles with rakuast and see how stage parse timing compares
[21:36] *** hythm left
[22:14] <lizmat> no, not really, but the spectest feels faster for me now (3min16 with RakuAST, and 3min26 with legacy)
[22:14] <lizmat> this on a M1 MacMini
[22:15] <lizmat> of course we still have many fails with RakuAST, so some of those will actually cost less time
[23:24] <discord-raku-bot> <nemokosch> https://github.com/rakudo/rakudo/issues/5239
[23:24] <discord-raku-bot> <nemokosch> seems to me this is fixed with RakuAST
[23:25] <discord-raku-bot> <nemokosch> sorry nevermind
[23:26] <discord-raku-bot> <nemokosch> the issue only happens in the REPL if there is a value set for $_
