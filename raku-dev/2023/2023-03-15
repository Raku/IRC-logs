[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:50] <MasterDuke> hm. i got t/spec/S32-num/pi.t and t/spec/S32-trig/e.t passing under RAKUDO_RAKUAST=1, but 9 other tests are now failing when they used to pass...i knew this 4 line fix was too good to be true...

[01:55] <MasterDuke> timo1: cool. i've never driven an opel before (unless gran tourismo counts), but i got a polestar 2 when we moved back to the states. the acceleration is fun

[02:19] *** sivoais left
[03:16] *** jacob_c joined
[03:19] *** sivoais joined
[04:38] *** jacob_c left
[04:44] *** discord-raku-bot left
[04:46] *** discord-raku-bot joined
[04:47] *** shmup left
[04:47] *** shmup joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[08:22] <nine> MasterDuke: that happens to me all the time :)

[10:28] <timo1> this opel corsa was extremely cheap thanks to government-given subsidies and also some extra bonus from the manufacturer on top of that

[10:30] <timo1> we felt some time pressure since the government-given subsidies were supposed to run out soon (counting the time it takes for the car to arrive, which was "months" already just by default, and turned out to be even more months in our particular case due to $reasons), so i didn't get to wish for the fanciest features, but it's got a good set

[10:31] <timo1> it's got the "even if your battery burst into flames and the electronics shut off you can still escape" technology called "hand-cranked windows on the back seats" for instance

[10:33] <timo1> i don't think it has the "vehicle to load" functionality that i just saw Technology Connections Man demonstrate

[10:38] *** linkable6 left
[10:38] *** evalable6 left
[10:40] *** evalable6 joined
[10:41] *** linkable6 joined
[10:48] <Geth> ¬¶ rakudo/main: fa384e232e | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[10:48] <Geth> ¬¶ rakudo/main: RakuAST: make {*} an OnlyStar

[10:48] <Geth> ¬¶ rakudo/main: 

[10:48] <Geth> ¬¶ rakudo/main: And not just a statementlist with a Whatever in it

[10:48] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fa384e232e

[10:51] <discord-raku-bot> <Nemokosch> ü§Ø

[11:04] <lizmat> nine: I think all of the VarDeclaration::Placeholder classes need an additional argument to their .new: the block to which they apply

[11:05] <lizmat> otherwise there's no way to deparse / .raku an AST properly without EVALling them

[11:06] <lizmat> as the attachment to the block is now done at CHECK time

[11:07] <lizmat> also, we need to add checks in the Actions to make

[11:07] <lizmat> sub ($a) { $^pos }

[11:07] <lizmat> m: sub ($a) { $^pos }

[11:07] <camelia> rakudo-moar 23433abe0: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Placeholder variable '$^pos' cannot override existing signature‚ê§at <tmp>:1‚ê§------> sub‚èè ($a) { $^pos }‚ê§¬ª

[11:07] <lizmat> a compile time error (it currently isn't

[11:08] <lizmat> m: say Q|sub foo ($a) { $^pos }; foo 42|.AST(:run)    # very confusing

[11:08] <camelia> rakudo-moar 23433abe0: OUTPUT: ¬´42‚ê§¬ª

[11:11] <lizmat> which could be done with an extra :block attribute to RakuAST::VarDeclaration::Placeholder ?

[11:12] <lizmat> thoughts?

[11:12] <lizmat> in the Actions, $*BLOCK already contains the needed Block

[11:17] *** ab5tract joined
[11:18] <lizmat> hmmm...   maybe there are 2 things here: 1. making sure we get the right compilation error

[11:19] <lizmat> and 2. making sure manual building of ASTs is checked properly

[11:35] <ab5tract> from the backlog: "nine: should a RakuAST::Declaration::External::Constant be considered a type ??"

[11:36] <ab5tract> I used RakuAST::Declaration::External::Constant for both RakuAST::Type::Enum and RakuAST::Type::Subset

[11:36] <ab5tract> Because it had the correct QAST

[11:37] <ab5tract> but maybe the point is that some types can be designed using RakuAST::Declaration::External::Constant but you cannot assume a RakuAST::Declaration::External::Constant is a type

[11:38] <lizmat> I think I got to that conclusion also  :-)

[11:38] <ab5tract> okay, phew

[11:39] <lizmat> so what is the class common to Block / Sub / Method / etc?

[11:39] <lizmat> basically, anything that can have a signature

[11:41] <lizmat> for a momen I thought it would be RakuAST::ExpressionThunk

[11:41] <lizmat> but I'm looking for the ones that have an *explicit* signature

[11:42] <lizmat> hmmm.. maybe RakuAST::PlaceholderParameterOwner ?

[11:48] <ab5tract> sounds like it would be a common role

[11:48] <ab5tract> amongst those classes that you are looking for

[11:49] <lizmat> well, I'm looking for a way to add a method to this common role, that would visit the children and return whether any of the children has RakuAST::VarDeclaration::Placeholder object

[11:50] <lizmat> *

[11:50] <lizmat> *a

[11:50] <lizmat> and this at object creation time

[11:50] <ab5tract> Hmmm....

[11:51] <lizmat> so that *if* the statement list has a placeholder in it, *and* there is an explicit signature, it can fail

[11:52] <lizmat> m: say Q|sub ($a) { $^b }|.AST

[11:52] <camelia> rakudo-moar fa384e232: OUTPUT: ¬´RakuAST::StatementList.new(‚ê§  RakuAST::Statement::Expression.new(‚ê§    expression => RakuAST::Sub.new(‚ê§      signature => RakuAST::Signature.new(‚ê§        parameters => (‚ê§          RakuAST::Parameter.new(‚ê§            target => RakuAST::Param‚Ä¶¬ª

[11:52] <lizmat> m: say Q|sub ($a) { $^b }|.AST.statements.head.expression

[11:52] <camelia> rakudo-moar fa384e232: OUTPUT: ¬´RakuAST::Sub.new(‚ê§  signature => RakuAST::Signature.new(‚ê§    parameters => (‚ê§      RakuAST::Parameter.new(‚ê§        target => RakuAST::ParameterTarget::Var.new("\$a")‚ê§      ),‚ê§    )‚ê§  ),‚ê§  body      => RakuAST::Blockoid.new(‚ê§    RakuA‚Ä¶¬ª

[11:53] <lizmat> so that such a manual AST building would fail

[11:53] <ab5tract> if its something that could be useful for other situations, maybe it makes sense to add a way to provide a custom callback to be passed to visit-chldren?

[11:54] <lizmat> visit-children already takes a callback?   that's the point, no ?

[11:55] <lizmat> I'm just unclear about the exact semantics of visit-children: should it recurse itself, or is the recursion handled externally ?

[11:55] <lizmat> nine jnthn ^^ ?

[11:56] <ab5tract> I was under the impression that visit-children is called in a handful of places that all provide their own callbacks

[11:56] <ab5tract> I was suggesting to add a way to hook into one of these locations with a custom callback provided by the common role

[11:58] <ab5tract> method has-custom-visit-children { true }; method CUSTOM-VISIT-CHILDREN { &callback }

[11:58] <ab5tract> *True

[11:59] <ab5tract> but I see what you are saying

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:03] *** NemokoschKiwi joined
[12:13] *** NemokoschKiwi left
[13:24] *** jacob_c joined
[13:42] *** jacob_c left
[13:45] <Geth> ¬¶ rakudo/main: 588d0f6ab7 | (Elizabeth Mattijsen)++ | 3 files

[13:45] <Geth> ¬¶ rakudo/main: RakuAST: add RakuAST::PlaceholderParameterOwner.code-has-placeholders

[13:45] <Geth> ¬¶ rakudo/main: 

[13:45] <Geth> ¬¶ rakudo/main: This method intended for introspection of ASTs, such as happens with

[13:45] <Geth> ¬¶ rakudo/main: deparsing and .raku.  It returns True if any placeholder variable is

[13:45] <Geth> ¬¶ rakudo/main: found in the code of the object that is a placeholder parameter owner

[13:45] <Geth> ¬¶ rakudo/main: (such as PointyBlock, or any Routine)

[13:45] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/588d0f6ab7

[13:45] <Geth> ¬¶ rakudo/main: cd21886998 | (Elizabeth Mattijsen)++ | t/12-rakuast/signature.rakutest

[13:45] <Geth> ¬¶ rakudo/main: RakuAST: remove :EVAL from RakuAST tests

[13:45] <Geth> ¬¶ rakudo/main: 

[13:45] <Geth> ¬¶ rakudo/main: As EVAL is no longer necessary to be able to correctly deparse or

[13:45] <Geth> ¬¶ rakudo/main: provide a .raku representation.

[13:45] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cd21886998

[15:49] <nine> visit-children does (and should do) exactly what it says: call that visitor for the node's children. Not more, not less.

[17:04] *** ab5tract left
[17:05] <lizmat> so, this should be a simple loop then, with a return ?

[17:05] *** ab5tract joined
[17:06] <lizmat> ah, no, you mean it's only for that node's children...  so doing the recursion in code-has-placeholders is correct

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:02] <nine> yes

[19:06] *** NemokoschKiwi joined
[19:19] *** NemokoschKiwi left
[20:44] *** ab5tract left
