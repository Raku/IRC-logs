[00:00] *** [Coke] left
[00:00] *** [Coke] joined
[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:10] *** evalable6 left
[01:10] *** notable6 left
[01:10] *** sourceable6 left
[01:10] *** tellable6 left
[01:10] *** greppable6 left
[01:10] *** shareable6 left
[01:10] *** benchable6 left
[01:10] *** bloatable6 left
[01:10] *** releasable6 left
[01:10] *** unicodable6 left
[01:10] *** quotable6 left
[01:10] *** squashable6 left
[01:10] *** nativecallable6 left
[01:10] *** statisfiable6 left
[01:10] *** linkable6 left
[01:10] *** bisectable6 left
[01:10] *** committable6 left
[01:10] *** reportable6 left
[01:10] *** tellable6 joined
[01:10] *** bloatable6 joined
[01:11] *** sourceable6 joined
[01:11] *** shareable6 joined
[01:11] *** benchable6 joined
[01:11] *** linkable6 joined
[01:11] *** unicodable6 joined
[01:11] *** nativecallable6 joined
[01:11] *** releasable6 joined
[01:11] *** greppable6 joined
[01:11] *** reportable6 joined
[01:11] *** quotable6 joined
[01:12] *** squashable6 joined
[01:12] *** notable6 joined
[01:12] *** committable6 joined
[01:13] *** statisfiable6 joined
[01:13] *** bisectable6 joined
[01:13] *** evalable6 joined
[04:48] *** shareable6 left
[04:48] *** tellable6 left
[04:48] *** quotable6 left
[04:48] *** reportable6 left
[04:48] *** linkable6 left
[04:48] *** releasable6 left
[04:48] *** greppable6 left
[04:48] *** bisectable6 left
[04:48] *** squashable6 left
[04:48] *** committable6 left
[04:48] *** evalable6 left
[04:48] *** bloatable6 left
[04:48] *** nativecallable6 left
[04:48] *** sourceable6 left
[04:48] *** unicodable6 left
[04:48] *** benchable6 left
[04:48] *** statisfiable6 left
[04:48] *** notable6 left
[04:48] *** coverable6 left
[04:48] *** coverable6 joined
[04:49] *** tellable6 joined
[04:49] *** benchable6 joined
[04:49] *** notable6 joined
[04:49] *** squashable6 joined
[04:49] *** greppable6 joined
[04:50] *** unicodable6 joined
[04:50] *** shareable6 joined
[04:50] *** committable6 joined
[04:50] *** releasable6 joined
[04:50] *** quotable6 joined
[04:50] *** linkable6 joined
[04:50] *** reportable6 joined
[04:51] *** sourceable6 joined
[04:51] *** statisfiable6 joined
[04:51] *** nativecallable6 joined
[04:51] *** bloatable6 joined
[04:51] *** bisectable6 joined
[04:51] *** evalable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:01] *** samebchase left
[08:12] <Geth> ¦ rakudo/main: 8797bf9527 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[08:12] <Geth> ¦ rakudo/main: RakuAST: streamline EXPR action, part 2/2

[08:12] <Geth> ¦ rakudo/main: 

[08:12] <Geth> ¦ rakudo/main: - remove some dead code / unnecessary checks

[08:12] <Geth> ¦ rakudo/main: - provided some shortcuts to avoid repeated lookups

[08:12] <Geth> ¦ rakudo/main: - don't else / if if you can elsif

[08:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8797bf9527

[08:34] <Geth> ¦ rakudo/main: fac51f9afa | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[08:34] <Geth> ¦ rakudo/main: RakuAST: represent ternaries properly in properties

[08:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fac51f9afa

[08:44] *** sena_kun joined
[08:55] <ab5tract> vrurg: I meant I can make it get defined, but it happens in GLOBAL, not on this code block. the code block does not exist at the moment the signature is being parsed. maybe I can fix that

[08:58] <Geth> ¦ rakudo/main: cb0f4ec2ad | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[08:58] <Geth> ¦ rakudo/main: RakuAST: streamline Grammar.EXPR-reduce

[08:58] <Geth> ¦ rakudo/main: 

[08:58] <Geth> ¦ rakudo/main: - call action method directly without NQP's private method

[08:58] <Geth> ¦ rakudo/main: - apply shortcuts in the correct scope

[08:58] <Geth> ¦ rakudo/main: - don't bother setting a "key", handle in action call directly

[08:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cb0f4ec2ad

[09:44] *** linkable6 left
[09:44] *** evalable6 left
[09:44] *** linkable6 joined
[09:46] *** evalable6 joined
[10:10] <Geth> ¦ rakudo/main: ab613324e8 | (Elizabeth Mattijsen)++ | 2 files

[10:10] <Geth> ¦ rakudo/main: RakuAST: split up Actions.EXPR into several parts

[10:10] <Geth> ¦ rakudo/main: 

[10:10] <Geth> ¦ rakudo/main: Each part handling a certain situation, rather than passing an

[10:10] <Geth> ¦ rakudo/main: argument to indicate the situation, so we don't need to check twice

[10:10] <Geth> ¦ rakudo/main: for a given situation.

[10:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ab613324e8

[10:58] <Geth> ¦ rakudo/main: 008b73de7e | (Elizabeth Mattijsen)++ | 2 files

[10:58] <Geth> ¦ rakudo/main: RakuAST: simplify end of EXPR handling

[10:58] <Geth> ¦ rakudo/main: 

[10:58] <Geth> ¦ rakudo/main: - don't use NQP private method with its additional checks

[10:58] <Geth> ¦ rakudo/main: - turned out the .MATCH was not needed

[10:58] <Geth> ¦ rakudo/main: - make action method return its $/ to simplify return value of EXPR

[10:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/008b73de7e

[11:23] *** Altai-man joined
[11:24] *** Altai-man left
[11:39] <Geth> ¦ rakudo/main: f3215d059d | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[11:39] <Geth> ¦ rakudo/main: RakuAST: remove the "dotty" category

[11:39] <Geth> ¦ rakudo/main: 

[11:39] <Geth> ¦ rakudo/main: - move all of the times to "postfix", which is more general

[11:39] <Geth> ¦ rakudo/main: - add some more postfix entries

[11:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f3215d059d

[11:39] <Geth> ¦ rakudo/main: d33af75895 | (Elizabeth Mattijsen)++ | 2 files

[11:39] <Geth> ¦ rakudo/main: RakuAST: provide classes with needed OperatorProperties access

[11:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d33af75895

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:08] <Geth> ¦ rakudo/main: e958040c43 | (Elizabeth Mattijsen)++ | 3 files

[12:08] <Geth> ¦ rakudo/main: Remove Test.is_approx

[12:08] <Geth> ¦ rakudo/main: 

[12:08] <Geth> ¦ rakudo/main: Was marked DEPRECATED in 2018 already.  Technically we should've

[12:08] <Geth> ¦ rakudo/main: waited until 5.e is released, but removing it now feels as good

[12:08] <Geth> ¦ rakudo/main: a moment as any.

[12:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e958040c43

[12:32] *** Xliff joined
[12:32] <Xliff> Raku-GLib suite timing statistics for Raku 2023.08.109.g.5.d.43.ff.5.b.47

[12:32] <Xliff> Using the following processor: AMD Ryzen 9 5950X 16-Core Processor

[12:32] <Xliff> Total number of projects: 34 (506509 loc)

[12:32] <Xliff> Total non-parallel compile times: 11767.290 (346.097 avg)

[12:32] <Xliff> Total parallel compile times: 2567.759 (75.522 avg) 4.583x speedup

[12:59] *** lizmat_ joined
[13:02] *** lizmat left
[13:10] *** Xliff left
[13:18] <vrurg> ab5tract: Unfortunately, I don't see the context. But neither I like the idea of "attaching to GLOBAL" nor I see why the "redeclaration" error is a problem.

[13:31] <ab5tract> vrurg: definitely not intending to submit the attaching to GLOBAL hack as a PR .. it's just the closest to a solution I've managed so far

[13:33] <vrurg> ab5tract: But what problem are you trying to solve? Looks like it's what I'm missing in first place. :)

[13:34] <ab5tract> the redeclaration error is a problem because Raku/Grammar.nqp absorbs the signature before it has entered the package scope. see https://github.com/rakudo/rakudo/blob/e958040c431ac9682a9db705a68d57cecd5f1728/src/Raku/Grammar.nqp#L2951

[13:35] <discord-raku-bot> <nemokosch> so the error is the goal itself?

[13:35] <ab5tract> this is while trying to unlock parsing of R[Int $x where { $x % 2 }]

[13:36] <ab5tract> * role R[Int $x where { $x % 2 }] {}

[13:39] <ab5tract> $*VAR is not lexically resolved to a scope when check-variable($*VAR) is called, because $*DECLARE-TARGETS is set to 0, because the package scope hasn't been entered

[13:39] <discord-raku-bot> <nemokosch> but that error message indicated that the package scope should have been entered probably

[13:40] <discord-raku-bot> <nemokosch> not saying that it's super-duper intuitive but that's how functions work as well

[13:40] <ab5tract> entering it causes make spectests to stall out

[13:40] <discord-raku-bot> <nemokosch> eg the signature of a function pretends to live in the scope of the function

[13:40] <ab5tract> it should probably enter some kind of block scope, instead of the stubbed package scope that I've been trying

[13:53] <ab5tract> one doesn't just enter a package that hasn't happened yet :)

[14:16] <ab5tract> m: sub f(Int $x where { $x % 2}} { my Int $x = 5; "2 be 2" }

[14:16] <camelia> rakudo-moar e958040c4: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> sub f(Int $x where { $x % 2}⏏} { my Int $x = 5; "2 be 2" }␤    expecting any of:␤        constraint␤»

[14:16] <ab5tract> m: sub f(Int $x where { $x % 2}) { my Int $x = 5; "2 be 2" }

[14:16] <camelia> rakudo-moar e958040c4: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$x'.␤    at <tmp>:1␤    ------> ub f(Int $x where { $x % 2}) { my Int $x⏏ = 5; "2 be 2" }␤»

[14:56] *** lizmat_ left
[14:56] <vrurg> ab5tract: considering that a role is a routine – I see it's having the same behavior as a normal routine. Still see no problem here.

[14:56] *** lizmat joined
[14:58] <vrurg> I would be reacting sporadically because I'm trying to work.

[15:32] *** squashable6 left
[15:32] *** squashable6 joined
[15:48] *** hythm joined
[16:08] <ab5tract> vrurg: no worries! thanks for checking in. I'm not sure how else to explain it beyond referencing the code in Grammar.nqp... with :DECLARE-TARGETS(0), there is no call to .declare-lexical, which is correct in that we don't want to install into the current scope of the resolver. However, before the .enter-package-scope($<signature>) call can happen (which would do the lexical declaration), we already hit the sorry from the compiler that checks 

[16:08] <ab5tract> for lexical resolution

[16:21] <lizmat> grr...  infix = has different operator properties depending on context  :-(

[16:21] <ab5tract> oouch :(

[16:32] <discord-raku-bot> <nemokosch> if you are horrified, imagine how horrified a mere user is

[16:33] <lizmat> nemokosch *sigh*

[16:35] <lizmat> this is about torturing the core developers, not users, so I don't see how your remark can be taken as something positive

[16:35] <discord-raku-bot> <nemokosch> but this decision is something that makes everyone suffer

[16:36] <discord-raku-bot> <nemokosch> you made it sound like an implementation detail but it's the fundamental design of the syntax: hiding two operators behind the same visuals

[16:37] <lizmat> ok, and which two operators are hiding then?

[16:38] <discord-raku-bot> <nemokosch> "list assignment operator" and "item assignment operator"

[16:38] <lizmat> and that's different in other languages ?

[16:40] <discord-raku-bot> <nemokosch> yes, there is only one assignment operator

[16:42] <lizmat> I'm not following, explain

[16:43] <discord-raku-bot> <nemokosch> that there is only one assignment operator in other languages?

[16:44] <lizmat> as there is in Raku ?

[16:45] <Geth> ¦ rakudo/main: c0667de0ea | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[16:45] <Geth> ¦ rakudo/main: RakuAST: more OperatorProperties fixes

[16:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c0667de0ea

[16:46] <discord-raku-bot> <nemokosch> no, in Raku, these are two different operators that just look the same

[16:46] <discord-raku-bot> <nemokosch> they have different precedence levels

[16:47] <lizmat> right, and that is different from other programming languages?

[16:48] <discord-raku-bot> <nemokosch> from all languages I know

[16:48] <lizmat> interesting...  also Perl ?

[16:48] <discord-raku-bot> <nemokosch> it's not "poor me who needs to wrangle the operator properties depending on context" but "poor user who ever wonders why there are two = entries in the docs at two different precedence levels" or "poor users who can't wrap their heads why @a = 1, 2, 3 and $a = 1, 2, 3 do two syntactically different things"

[16:48] <discord-raku-bot> <nemokosch> Perl was a language meant to be fixed for a reason...

[16:49] <discord-raku-bot> <nemokosch> all the bad things naturally come from Perl

[16:49] <lizmat> well, I guess we can agree the heritage of this behaviour

[16:54] <discord-raku-bot> <nemokosch> I don't think it can really be fixed at this point but the reaction was still painful at a gut level for me

[16:55] <discord-raku-bot> <nemokosch> not for the first time, it seems that not even the implementors like the design quite often

[16:56] <lizmat> well... there's many things of the implementation I don't like, and I'm fixing them

[16:57] <lizmat> this one had fallen below my radar...

[17:01] <lizmat> oddly enough, only 3 RakuAST test-files would fail if a switch would be made to list-assignment precedence

[17:01] <lizmat> so the dependency does not seem to be that great

[17:04] <discord-raku-bot> <nemokosch> that's interesting indeed but at the end of the day, the @a = 1, 2, 3 versus $a = 1, 2, 3 is highly user-space behavior, and I can't think of even a compatibility mode if something about this were to change

[17:04] <lizmat> use v6.e could be that

[17:04] <discord-raku-bot> <nemokosch> unless the distinction is built up at core level but just yesterday I was reading up on the NQP expression parser and that deals with precedence level already

[17:04] <discord-raku-bot> <nemokosch> so probably that's not the case

[17:05] <lizmat> nemokosch I'm replacing the NQP expression parser by a Raku one

[17:06] <discord-raku-bot> <nemokosch> 👀

[17:06] <discord-raku-bot> <nemokosch> that's big news

[17:06] <lizmat> see method EXPR in src/Raku/Grammar

[17:15] <lizmat> fwiw, the plan is to completely remove NQP's HLL::Grammar as a superclass

[17:15] <discord-raku-bot> <nemokosch> how does it affect the performance?

[17:16] <lizmat> compilation speed should improve because a *lot* of hash lookups would be replaced by method calls on the OperatorProperties object

[17:17] <lizmat> and a lot of splatting hashes should also be gone, so both lookup and hash creation should go *way* down

[17:27] <ab5tract> vrurg: I've gotten what looks like a fix. btw, my "goal" is to get 't/spec/S14-roles/parameterized-basic.t' to compile and then pass

[17:28] <ab5tract> I find that having a single-minded focus like that helps to find direction in the set of possible things to work on in RakuAST

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:05] <ab5tract> so much for that fix... even though it fixes the issue to do so, it breaks other things to enclose the match to <signature> with a .enter-block-scope('Block') and a .leave-block-scope 

[18:14] <ab5tract> (along with setting :DECLARES-TARGETS(1))

[19:02] *** linkable6 left
[19:02] *** evalable6 left
[19:04] *** linkable6 joined
[19:04] *** evalable6 joined
[19:11] <Geth> ¦ nqp/main: 6669ea2ec4 | (Tom Browder)++ (committed using GitHub Web editor) | CREDITS

[19:11] <Geth> ¦ nqp/main: Update CREDITS

[19:11] <Geth> ¦ nqp/main: 

[19:11] <Geth> ¦ nqp/main: Add myself

[19:11] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/6669ea2ec4

[19:16] <lizmat> tbrowder__++

[19:43] <tbrowder__> thnx liz

[19:48] <tbrowder__> i'm trying to read the src code for how raku gets distro info but no breakthru yet. what i would really like to see is a list somewhere in raku github maybe a list of contributed $*DISTRO outputs for real user systems.

[19:51] <Geth> ¦ rakudo/main: ea12dec96c | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[19:51] <Geth> ¦ rakudo/main: RakuAST: simplify infix operator test

[19:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ea12dec96c

[20:46] <Geth> ¦ rakudo/main: 98312dcb52 | (Elizabeth Mattijsen)++ | 4 files

[20:46] <Geth> ¦ rakudo/main: RakuAST: codegen item assignment differently

[20:46] <Geth> ¦ rakudo/main: 

[20:46] <Geth> ¦ rakudo/main: - add RakuAST::Assign::Item class, subclass of RakuAST::Infix

[20:46] <Geth> ¦ rakudo/main:   which only difference is that it has operator properties matching

[20:46] <Geth> ¦ rakudo/main:   item assignment rather than list assignment.

[20:46] <Geth> ¦ rakudo/main: - set $*ITEM dynvar in infix:sym<=> token if item assignment wanted

[20:46] <Geth> ¦ rakudo/main: - add infix:sym<=> action method to create Assign::Item class if so

[20:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/98312dcb52

[22:08] *** RakuIRCLogger left
[22:15] *** sena_kun left
