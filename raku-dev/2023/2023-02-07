[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:23] *** epony left
[00:49] *** epony joined
[01:22] *** rypervenche joined
[01:53] *** MasterDuke joined
[02:38] <tonyo> patrickb: registered

[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:55] <Geth> ¦ nqp/main: 510e0508c5 | (Christian Bartolomäus)++ | t/nqp/063-slurp.t

[06:55] <Geth> ¦ nqp/main: Mark t/nqp/063-slurp.t as self-referential

[06:55] <Geth> ¦ nqp/main: 

[06:55] <Geth> ¦ nqp/main: Also, there is no need to accept two numbers as the number of chars

[06:55] <Geth> ¦ nqp/main: anymore. With 0412c22303 the JVM backend learned to count a CRLF

[06:55] <Geth> ¦ nqp/main: as one char as well. So even if the test file would be written with

[06:55] <Geth> ¦ nqp/main: CRLF as line endings, nqp::chars should give back the same number

[06:55] <Geth> ¦ nqp/main: as for LF as line endings.

[06:55] <Geth> ¦ nqp/main: 

[06:55] <Geth> ¦ nqp/main: This should fix https://github.com/Raku/nqp/issues/512.

[06:55] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/510e0508c5

[06:55] <Geth> ¦ nqp/main: 4250c96550 | niner++ (committed using GitHub Web editor) | t/nqp/063-slurp.t

[06:55] <Geth> ¦ nqp/main: Merge pull request #799 from usev6/gh_512

[06:55] <Geth> ¦ nqp/main: 

[06:55] <Geth> ¦ nqp/main: Mark t/nqp/063-slurp.t as self-referential

[06:55] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/4250c96550

[09:08] *** ab5tract joined
[09:30] *** sena_kun joined
[10:14] <ab5tract> I think I've found an (the?) issue with the WhateverCodes not evaluating for subsets

[10:14] <ab5tract> Could it be related to 'TODO implement other thunk types' in IMPL-THUNK-ARGUMENT?

[10:16] <ab5tract> Specifically what I'm investigating is why a bind to lexical '$whatevercode_arg1' is missing from the QAST in the rakuast branch

[10:17] <ab5tract> AFAICT it should both have a 'QAST::Var(lexical $whatevercode_arg1)' as well as a bind to the local decont var .. both are missing

[10:39] <lizmat> that feels to me you're on to something

[11:11] <nine> Running code at BEGIN time is just an endless source of joy. So any code run at BEGIN time wants access to the lexical environment it was defined in, e.g. `my $foo; BEGIN $foo = "foo";` But at the time that BEGIN statement runs, the frame that the $foo lexical is defined in does not yet exist.

[11:11] <nine> The old frontend solved this by creating a wrapper frame containing all lexicals that should be visible from the code. This includes all symbols of the setting, so these frames were huge!

[11:12] <nine> In the RakuAST frontend we replaced that wrapper frame with a new mechanism that allowed for a call back from the runtime to the compiler, so it could resolve such symbols on demand. This is already working.

[11:12] <ab5tract> hmmm

[11:12] <nine> Now one problem still persists, and I think it's something that wasn't even solved conciously in the old frontend but was just a side effect of having that wrapper frame:

[11:13] <nine> When we compile a code block dynamically, this block may contains nested blocks. E.g. a role body (which is also a code block, run at compile time when the role gets composed into a class) will contain methods.

[11:14] <nine> We replace the $!do attributes of such nested code objects which at that time still point to stubs with the actual compilation result, e.g. the bytecode frames. But these frames have a lexical environment which in the old frontend was the wrapper frame. But in the new frontend that wrapper doesn't exist.

[11:15] <nine> Instead their outer frame will still be the comp unit we generated and this comp unit contains the callback to run on missing lexicals.

[11:23] <ab5tract> Just to clarify, do you think this relates to my current issue?

[11:28] <nine> no

[11:30] <ab5tract> ok, I didn't see the connection there but just wanted to double check

[11:30] <ab5tract> That's an interesting quandary

[11:40] * lizmat added a problem solving issue: https://github.com/Raku/problem-solving/issues/365

[11:46] <discord-raku-bot> <Nemokosch> and a pretty well-aimed one, too

[11:47] <Geth> ¦ rakudo/main: 34cf82aa16 | (Will Coleda)++ (committed using GitHub Web editor) | 2 files

[11:47] <Geth> ¦ rakudo/main: Add Complex.sign to v6.e

[11:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/34cf82aa16

[11:48] <discord-raku-bot> <Nemokosch> > When we currently run a spectest, it is done with the CURRENT state of v6.d, which is not what the next version will be. We should have an easy way to run the spectests for a specific version of Raku perhaps I failed to express myself well but that's almost the same thing I tried to ask like a week ago

[11:48] <discord-raku-bot> <Nemokosch> how the spectests relate to language versions

[11:48] <lizmat> well, I guess that somehow stuck in my subconscious  :-)

[11:49] <lizmat> and just having worked a lot on RakuAST and stuff...

[11:49] <discord-raku-bot> <Nemokosch> wait, is it actually an N:M situation? Version of specification X version used by the compiler

[11:50] <discord-raku-bot> <Nemokosch> where preferably the Z pairs should work 🙂

[11:51] <lizmat> the problem is that there shouldn't be *any* version specification in the test files in general, I think

[11:52] <lizmat> except for the ones that are testing features that have been deprecated / removed in later versions

[11:53] <discord-raku-bot> <Nemokosch> okay, I think this is an important exception still - because this implies a certain design of the specification

[11:53] <lizmat> so a file that specifies 6.c implies that it should only work on 6.c

[11:54] <discord-raku-bot> <Nemokosch> is there a convenient way to say in a test - "pass the whole file if version doesn't match"?

[11:54] <discord-raku-bot> <Nemokosch> "match" could be understood broader, even

[11:54] <lizmat> nope, which is another issue, I guess

[11:54] <discord-raku-bot> <Nemokosch> "only run this in c AND d", for example

[11:54] <discord-raku-bot> <Nemokosch> or "from e onwards"

[11:55] <lizmat> well, the spectest.data file is frozen on language version release

[11:55] <discord-raku-bot> <Nemokosch> oh, so that's the file JJ mentioned, I suppose

[11:56] <discord-raku-bot> <Nemokosch> the file that decides what tests are "active"

[11:59] <lizmat> yup

[11:59] <lizmat> and some meta-info for the test runner

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:52] <Geth> ¦ rakudo/lizmat-more-complex: 67de08d7b5 | (Elizabeth Mattijsen)++ | 6 files

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: Make log and sqrt handle negative values mathematically correct

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: 

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: - in 6.e only

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: - make sqrt a multi

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: - add a new sqrt candidate handling negative values

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: - add a new log candidate handling negative values

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: 

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: Note that the use of "is default" in these new candidates is needed

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: to resolve dispatch ambiguities.  This is really a stopgap measure

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: for now, hopefully we can dispatch on language version soon!

[12:52] <Geth> ¦ rakudo/lizmat-more-complex: review: https://github.com/rakudo/rakudo/commit/67de08d7b5

[12:52] <Geth> ¦ rakudo: lizmat++ created pull request #5192: Make log and sqrt handle negative values mathematically correct

[12:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5192

[13:07] <lizmat> Funny thing on the way to the forum:

[13:07] <lizmat> the TEMP phaser is *not* documented, but has TODOd tests

[13:08] <lizmat> it's basically just a stub in the grammar with no action associated with it

[13:08] <lizmat> the COMPOSE phaser *is* documented as NYI, but doesn't have tests

[13:08] <lizmat> yet the code that supposedly needs to tell you that it is NYI, doesn't fire

[13:09] <lizmat> m: COMPOSE say "foo"

[13:09] <camelia> rakudo-moar 34cf82aa1: ( no output )

[13:09] <lizmat> m: role A { COMPOSE say "foo" }; A.new

[13:09] <camelia> rakudo-moar 34cf82aa1: ( no output )

[13:29] <Geth> ¦ rakudo/lizmat-lose-compose: daaa304dc5 | (Elizabeth Mattijsen)++ | 3 files

[13:29] <Geth> ¦ rakudo/lizmat-lose-compose: Eradicate knowledge of COMPOSE phaser

[13:29] <Geth> ¦ rakudo/lizmat-lose-compose: 

[13:29] <Geth> ¦ rakudo/lizmat-lose-compose: There were some speculations, and an attempt at creating a stub

[13:29] <Geth> ¦ rakudo/lizmat-lose-compose: that was supposedly create a NYI error, but didn't.  Meanwhile,

[13:29] <Geth> ¦ rakudo/lizmat-lose-compose: the mainline of a role is run every time it gets composed into

[13:29] <Geth> ¦ rakudo/lizmat-lose-compose: a (new) class, so effectively we already *have* an implicit COMPOSE

[13:29] <Geth> ¦ rakudo/lizmat-lose-compose: phaser.  So there's no need for a COMPOSE phaser, it appears.

[13:29] <Geth> ¦ rakudo/lizmat-lose-compose: review: https://github.com/rakudo/rakudo/commit/daaa304dc5

[13:31] <Geth> ¦ rakudo: lizmat++ created pull request #5193: Eradicate knowledge of COMPOSE phaser

[13:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5193

[13:31] <lizmat> meh, it picked up something it shouldn't have  :-(

[13:32] <Geth> ¦ rakudo/lizmat-lose-compose: fe90d50b2e | (Elizabeth Mattijsen)++ | 6 files

[13:32] <Geth> ¦ rakudo/lizmat-lose-compose: Revert "Make log and sqrt handle negative values mathematically correct"

[13:32] <Geth> ¦ rakudo/lizmat-lose-compose: 

[13:32] <Geth> ¦ rakudo/lizmat-lose-compose: This reverts commit 67de08d7b533424dc2b0850895db30a7e28209d8.

[13:32] <Geth> ¦ rakudo/lizmat-lose-compose: review: https://github.com/rakudo/rakudo/commit/fe90d50b2e

[13:40] <lizmat> afk for a few hours&

[13:58] <ab5tract> lizmat++ # removing a phaser ... my mind was boggling yesterday looking at all the extant phaser options

[13:59] <ab5tract> so many phasers, and even one that is different based on whether it is in a supply or a loop

[14:58] <discord-raku-bot> <Nemokosch> Is it right for the RakuAST variable node to report type "Int" for my Int &foo?

[14:58] <discord-raku-bot> <Nemokosch> I'd think it is, just making sure. Perhaps the actual type needs to be handled at container level

[14:58] <ab5tract> what are you working on, out of curiousity?

[15:01] <discord-raku-bot> <Nemokosch> I'd like to see the named call to generate the right defaults, and probably metadata in general

[15:01] <discord-raku-bot> <Nemokosch> it's inspired by a persisting tiny issue with the current system that itches me a lot

[15:02] <discord-raku-bot> <Nemokosch> namely that my Int &foo has the type Callable[Int] but the default value of Callable, hence failing its own type check if you want to reset the value

[15:02] <discord-raku-bot> <Nemokosch> now, this is NYI with the new frontend

[15:02] <discord-raku-bot> <Nemokosch> my Int &foo is simply a Scalar, with an Int type

[15:03] <ab5tract> ah, ok. all above my pay grade I'm afraid

[15:04] <ab5tract> in fact, I feel like I'm losing my mind since I started working in RakuAST ;)

[15:04] <discord-raku-bot> <Nemokosch> it might be a lot easier than what you're working with, it's "world-scoped" development mostly

[15:04] <discord-raku-bot> <Nemokosch> the generated AST itself looks fine, so does the QAST

[15:05] <discord-raku-bot> <Nemokosch> that's why I want to make sure this assumption is correct, so that I don't go in the wrong direction

[15:05] <discord-raku-bot> <Nemokosch> but I'd hope that I'm really close with metamodel stuff

[15:06] <ab5tract> Why on earth is it the case that '* ~~ 5' successfully installs a lexical in QAST and binds that lexical to the lowered decont var, whereas 'subset F where * ~~ 5' has no lexical "$whatevercode_arg1" in QAST and is not bound

[15:07] <ab5tract> what kind of variable node is it? a declaration or a lookup?

[15:07] <ab5tract> ^ Nemokosch

[15:08] <discord-raku-bot> <Nemokosch> declaration

[15:08] <discord-raku-bot> <Nemokosch> I'd think that's where the container is decided

[15:20] <ab5tract> hmm, I don't see any special consideration for '&' as a sigil in the var declaration code

[15:21] <discord-raku-bot> <Nemokosch> and that's probably the reason it acts exactly like '$' 😄

[15:45] <ab5tract> :)

[15:51] <ab5tract> nine: sorry to bother you so much, but it really is driving me a bit crazy. Any thoughts on why a bare WhateverCode is getting attached lexically and bound to lowered arg but when neither happens in the case of being wrapped by the logic shared by subset and signature?

[15:52] <nine> Would need to have a closer look for which I don't have the time right now

[15:52] <ab5tract> okay, no worries

[16:34] *** camelia left
[16:34] *** nine left
[16:35] *** nine joined
[16:38] *** nine left
[16:40] *** camelia joined
[16:40] *** nine joined
[17:08] <ab5tract> What's driving me particularly batty is that the lexical definition for '$whatevercode_arg_1' is "QAST::Var(lexical $whatevercode_arg_1 :decl(contvar)) " .. but I can find nowhere in the source where a QAST::Var is created that is both lexical and contvar!

[17:08] <ab5tract> Outside of VarDeclaration::Implicit::Special, that is

[17:23] <ab5tract> Ah...

[17:24] <ab5tract> Another place where it is possible is ParameterTarget::Var

[17:25] <ab5tract> which does not get its IMPL-QAST-DECL called when our whatevercode is in a subset or a signature where clause

[17:28] <ab5tract> . o O ( I really wish 'caller' would be available in NQP land )

[17:30] *** Xliff joined
[17:46] <Xliff> Is the QAST generation for RakuAST::Parameter complete?

[17:54] <patrickb> The GSoC application is up. Now we have to wait for feedback from Google whether we are accepted.

[17:59] <discord-raku-bot> <Nemokosch> very much appreciated ^^

[17:59] <tonyo> i don't work in perl or raku (or with people too interested in either), do we have any mentees seeking mentors?

[17:59] <Xliff> https://gist.github.com/Xliff/b228b05633ac2c5406d8bad6502c7a06

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:06] <patrickb> tonyo: It's too early. We'll have to wait for the call for students. Here's a timeline: https://developers.google.com/open-source/gsoc/timeline

[18:09] *** nine left
[18:10] *** nine joined
[18:52] <ab5tract> Xliff: I don't think it can be considered complete if its IMPL-QAST-DECL is not called. But its only this last stage of defining the lexical and binding it to the lowered var that is different between base QAST and RakuAST

[19:10] <Xliff> ab5tract: So do you think this patch will work: https://gist.github.com/Xliff/b228b05633ac2c5406d8bad6502c7a06

[19:10] <Xliff> Which isn't IMPL-QAST-DECL but DEPARSE

[19:10] <Xliff> Which I need for something else.

[19:10] *** epony left
[19:11] *** epony joined
[19:13] <lizmat> Xliff: not sure what you need?

[19:20] <Xliff> I need RakuAST::Parameter to properly .DEPARSE parameter literals.

[19:21] <Xliff> Ala « multi sub a("Bee") { say "Cee" } »

[19:22] <lizmat> the code lives in src/core.c/RakuAST/Deparse.pm6  :-)

[19:23] <lizmat> Xliff: I could try to fix by example, do you have some examples that don't deparse correctly ?

[19:30] <nine> ab5tract: when I want to know how we got at a certain place in the code I just add an nqp::die('here') with maybe a condition.

[19:30] <tonyo> nine++

[19:31] <nine> This weekend, in addition to nqp::bindhllsym('nqp', 'note', &note); I also added this to nqp/src/core/IO.nqp: nqp::bindhllsym('nqp', 'cluck', -> $message { nqp::die('here'); CATCH { nqp::gethllsym('nqp', 'note')($message ~ nqp::join("\n", nqp::backtracestrings($_))) } });

[19:32] <nine> With this nqp::gethllsym('nqp', 'cluck')('This is how we got here') prints that message with a backtrace

[19:33] <nine> Xliff: I wouldn't consider anything complete. I only ever write code for fixing a specific test I'm after. Otherwise I rarely know what the desired behaviour actually is.

[19:35] <lizmat> Xliff: re "sub a("Bee") { }" looks like the deparse is not the issue, it doesn't even parse yet!

[19:36] <lizmat> m: Q|sub a("Bee") { }|.AST

[19:36] <camelia> rakudo-moar 34cf82aa1: OUTPUT: «===SORRY!===␤No such method 'compile-time-value' for invocant of type␤'RakuAST::QuotedString'␤»

[19:36] <nine> sub a(1) { } does

[19:36] <lizmat> m: Q|sub a(42i) { }|.AST

[19:36] <camelia> rakudo-moar 34cf82aa1: OUTPUT: «===SORRY!=== Error while compiling ␤Missing block␤------> sub a⏏(42i) { }␤»

[19:37] <lizmat> m: Q|sub a(<42i>) { }|.AST

[19:37] <camelia> rakudo-moar 34cf82aa1: OUTPUT: «===SORRY!=== Error while compiling ␤Missing block␤------> sub a⏏(<42i>) { }␤»

[19:37] <lizmat> m: Q|sub a(42e0) { }|.AST

[19:37] <camelia> rakudo-moar 34cf82aa1: ( no output )

[19:37] <lizmat> hmmm

[19:37] <lizmat> so maybe this is low-hanging fruit :-)

[19:41] <nine> I think it is

[19:41] <nine> ab5tract: that QAST::Var must be from the ParameterTarget::Var

[19:43] <ab5tract> nine: Yup, I agree. Just can't seem to figure out why its IMPL-QAST-DECL only gets called for the non-wrapped WhateverCode

[19:52] <Xliff> m: Q|sub a ("bee") { 1 }|.AST

[19:52] <camelia> rakudo-moar 34cf82aa1: OUTPUT: «===SORRY!===␤No such method 'compile-time-value' for invocant of type␤'RakuAST::QuotedString'␤»

[19:53] <Xliff> That's odd. This was working 2 or so weeks ago when I originally asked this question.

[19:54] <lizmat> Xliff: I'm on it, fixing deparsing now  :-)

[19:55] <Xliff> lizmat++ -- Thank you SO MUCH! 

[19:57] <Xliff> Once this gets in, I can now make Cro handlers from method definitions.

[19:57] <Xliff> No more hand coded route blocks!

[19:57] <lizmat> whee!

[20:01] *** NemokoschKiwi joined
[20:23] <lizmat> fixed deparsing now, working on making a test

[20:25] <nine> ab5tract: I fear I don't understand your problem. Would need more info on what you see exactly in what situation and what you would expect instead

[20:27] <ab5tract> nine: I've boiled it down a bit further. For some reason the ApplyInfix object doesn't have any thunks associated when it has been wrapped

[20:27] <ab5tract> when it is bare, it has a thunk and we call IMPL-THUNK-CODE-QAST on that thunk

[20:28] <nine> What do you mean by wrapped?

[20:28] <ab5tract> this eventually leads to IMPL-QAST-DECL being called on the ParameterTarget::Var

[20:28] <ab5tract> both subset and signatures wrap the expression in a block

[20:31] <ab5tract> effectivaly making it '{(* ~~ 5).ACCEPTS($_).Bool}'

[20:38] <lizmat> Xliff: still working on making a test  :-)

[20:44] <ab5tract> nine: here's a gist of the QAST -- https://gist.github.com/ab5tract/3abeadf955cd5be42f2c2128c249db02

[20:45] <nine> ab5tract: I wouldn't be surprised if ApplyPostfix' PERFORM_BEGIN's handling of currying were utterly broken.

[20:45] <nine> It looks like the implementation in PerformInfix before I actually got that right...or at least less broken

[20:48] <ab5tract> PerformInfix?

[20:49] <nine> er... ApplyInfix

[20:50] <nine> m: Q|(*.abs.say)(-5)|.AST

[20:50] <camelia> rakudo-moar 34cf82aa1: ( no output )

[20:50] <nine> m: use MONKEY-SEE-NO-EVAL; EVAL Q|(*.abs.say)(-5)|.AST

[20:50] <camelia> rakudo-moar 34cf82aa1: OUTPUT: «5␤»

[20:50] <nine> m: use MONKEY-SEE-NO-EVAL; EVAL Q|((* + 1).abs.say)(-5)|.AST

[20:50] <camelia> rakudo-moar 34cf82aa1: OUTPUT: «No such method 'abs' for invocant of type 'WhateverCode'␤  in block <unit> at <tmp> line 1␤␤»

[20:51] <nine> Yeah, it only handles the most basic case of applying a postfix (e.g. a method call) to a curried expression.

[20:53] <Geth> ¦ rakudo/main: 156fc2cfa1 | (Elizabeth Mattijsen)++ | 4 files

[20:53] <Geth> ¦ rakudo/main: Add support for literal string as a parameter

[20:53] <Geth> ¦ rakudo/main: 

[20:53] <Geth> ¦ rakudo/main: - QuotedString needed special handling

[20:53] <Geth> ¦ rakudo/main: - adapted deparsing for literal values

[20:53] <Geth> ¦ rakudo/main: - made the RakuAST::Parameter.$!value attribute public

[20:53] <Geth> ¦ rakudo/main: - added test

[20:53] <Geth> ¦ rakudo/main: 

[20:53] <Geth> ¦ rakudo/main: Feels to me that the RakuAST::Parameter object is overkill for

[20:53] <Geth> ¦ rakudo/main: literal Parameters: I think a Parameter::Literal object that would

[20:54] <Geth> ¦ rakudo/main: just have a $!value would also work.  Will investigate...

[20:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/156fc2cfa1

[20:54] <lizmat> which brings us to: 666 / 1355 !

[20:54] <nine> That's how your variable disappears. You wrap the expression in an ApplyPostfix which will then UNCURRY the expression and try to re-curry, but does a really bad job at it

[20:54] <nine> lizmat: we should freeze everything there :D

[20:57] <lizmat> m: my $a = 42; sub a("$a: foo") { }   # heh, wondered how that would work now  :-)

[20:57] <camelia> rakudo-moar 34cf82aa1: OUTPUT: «===SORRY!===␤Cannot find method 'compile_time_value' on object of type QAST::Op␤»

[20:58] <lizmat> m: Q|my $a = 42; sub a("$a: foo") { }|.AST

[20:58] <camelia> rakudo-moar 34cf82aa1: OUTPUT: «===SORRY!===␤No such method 'compile-time-value' for invocant of type␤'RakuAST::QuotedString'␤»

[21:01] <lizmat> m: Q|my $a = 42; sub a("$a: foo") { }|.AST

[21:01] <camelia> rakudo-moar 34cf82aa1: OUTPUT: «===SORRY!===␤No such method 'compile-time-value' for invocant of type␤'RakuAST::QuotedString'␤»

[21:01] <lizmat> I guess camelia needs some time to catch up

[21:02] <lizmat> will say: Could not get a literal value of a quoted string as a parameter

[21:02] <lizmat> when camelia is up-to-date

[21:05] *** NemokoschKiwi left
[21:05] <ab5tract> nine: why does it want to uncurry the expression?

[21:07] <lizmat> afk&

[21:08] <ab5tract> also -- worse news.. I  special-cased RakuAST::ApplyInfix in subset's PERFORM-BEGIN wrapping code, delivering it without the ApplyPostfix stuff.

[21:11] <ab5tract> now the QAST matches the "bare" WhateverCode and yet... it still doesn't work (ie, assigning a subset that doesn't meet the criteria will erroneously succeed)

[21:25] *** melezhik joined
[21:32] <nine> ab5tract: it wants to uncurry because e.g. you want (* + 1).abs.say to compile to {($_ + 1).abs.say}, but we process from inner-most to outer-most, i.e. (* + 1).abs.say becomes ({$_ + 1}).abs.say becomes {($_ + 1).abs}.say becomes {($_ + 1).abs.say}

[21:33] <nine> Uncurrying the operand and then currying again was my attempt to get this done, but as I discovered later, at least my ApplyInfix implementation was far too simplistic. And now we know that ApplyPostifx' is also.

[21:34] *** melezhik left
[21:34] <nine> So, either you attach ApplyPostifx first, or you only test subsets with code blocks instead of curried expressions

[21:39] <ab5tract> yeah, understood. the special casing for ApplyInfix was to see what would happen. and, depressingly, it fixed QAST to look exactly like that generated by the old frontend AFAICT. And yet, it still doesn't work

[22:07] *** sena_kun left
[22:18] <Xliff> lizmat++ # Looks to be working. Many, many, many thx

[22:18] *** Xliff left
[23:20] <ab5tract> I think I found a corner case where my code does better than the old frontend in handling subsets

[23:21] <ab5tract> m: subset F where * && 5; say my F $f = True

[23:21] <camelia> rakudo-moar 156fc2cfa: OUTPUT: «Type check failed in assignment to $f; expected F but got Bool (Bool::True)␤  in block <unit> at <tmp> line 1␤␤»

[23:21] <ab5tract> m: subset F where { $_ && 5 }; say my F $f = True

[23:21] <camelia> rakudo-moar 156fc2cfa: OUTPUT: «True␤»

[23:22] <ab5tract> Ah, nevermind. It's not fixed on my branch, but it's interesting that this example is broken in the old compiler.

[23:23] <ab5tract> erm, frontend

[23:35] *** ab5tract left
