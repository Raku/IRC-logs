[02:19] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5483: Attempt at adding debugging to delete-by-compiler to test https://git…

[02:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5483

[02:19] *** MasterDuke joined
[09:35] *** sena_kun joined
[14:00] *** MasterDuke left
[14:45] <Geth> ¦ rakudo: vrurg++ created pull request #5484: Move close to complete generic instantiation, iteration 2

[14:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5484

[17:18] *** gfldex joined
[21:33] <ugexe> m: say "aliwjefqjweoifjqwojf".IO.rmdir

[21:33] <camelia> rakudo-moar 73470580c: OUTPUT: «Failed to remove the directory '/home/camelia/aliwjefqjweoifjqwojf': Failed to rmdir: no such file or directory␤  in block <unit> at <tmp> line 1␤␤»

[21:33] <ugexe> m: say rmdir("aliwjefqjweoifjqwojf");

[21:33] <camelia> rakudo-moar 73470580c: OUTPUT: «[]␤»

[22:09] <ugexe> that doesn't seem great

[22:10] <ugexe> probably the same issue with unlink and other IO subs that take multiple paths

[22:58] <vrurg> ugexe: BTW, after giving some more thinking to the problem with stashes, I think parallel compiling could be suffering from it too. Moreover, it would be a flapper then because it depends on the order of loading too. For example, another workaround for the Path::Finder test would be to move 'use File::Temp' down a couple of line, so that the test helper module gets loaded first.

[23:13] *** sena_kun left
[23:13] *** sena_kun joined
[23:14] *** sena_kun left
[23:29] <ugexe> I think the issue with parallel module loading is two things trying to read/write the stash at the same time. So there isn't exactly any confusion involved in parallel module loading issue, but rather something similar to trying to read/write to a Hash from multiple threads

[23:52] <vrurg> And this brings me back to the dream of having a debug mode where unsafe concurrent hash access would throw with backtraces available for every thread involved. That'd make it possible to pinpoint so many races!

