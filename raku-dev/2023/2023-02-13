[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:17] *** NemokoschKiwi left
[01:43] *** frost47 joined
[01:44] *** frost47 left
[01:46] *** frost69 joined
[01:48] *** frost69 left
[01:50] *** frost31 joined
[01:51] *** frost31 left
[01:53] *** frost20 joined
[01:53] *** frost20 is now known as frost
[02:34] *** frost left
[02:54] *** melezhik joined
[02:57] *** melezhik left
[02:59] *** frost joined
[04:03] *** squashable6 left
[04:03] *** squashable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:35] *** squashable6 left
[07:36] *** squashable6 joined
[07:55] <[Tux]> Rakudo v2022.12-1-gd52342eb0 (v6.d) on MoarVM 2022.12-19-g92aac35c6
[07:55] <[Tux]> csv-test-xs-20      0.402 -  0.410
[07:55] <[Tux]> csv-ip5xs           0.854 -  0.966
[07:55] <[Tux]> test-t --race       1.004 -  1.263
[07:55] <[Tux]> test-t              1.492 -  1.567
[07:55] <[Tux]> csv-parser          3.724 -  3.851
[07:55] <[Tux]> csv-ip5xs-20        5.454 -  5.669
[07:55] <[Tux]> test-t-20 --race    6.486 -  6.532
[07:55] <[Tux]> test                6.561 -  6.568
[07:55] <[Tux]> test-t-20          20.497 - 21.945
[08:52] *** sena_kun joined
[09:01] *** sena_kun left
[09:01] *** shareable6 left
[09:01] *** tellable6 left
[09:01] *** unicodable6 left
[09:01] *** [Coke] left
[09:01] *** tbrowder left
[09:01] *** [Coke] joined
[09:01] *** tellable6 joined
[09:01] *** tbrowder joined
[09:01] *** shareable6 joined
[09:01] *** sena_kun joined
[09:05] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++
[09:05] <Geth> ¦ rakudo/main: cbe8d97b47 | RakuAST: fix parsing of indirect lookups
[09:05] <Geth> ¦ rakudo/main: 63d48fad8c | RakuAST: Fix reporting of unknown routines
[09:05] <Geth> ¦ rakudo/main: b74d6ac290 | Revert "Make sure a RakuAST regression doesn't bother us"
[09:05] <Geth> ¦ rakudo/main: 83a870cb4f | RakuAST: unbreak error reporting by the RakuAST-precompiler
[09:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/2b6b4019dada...83a870cb4f83
[09:08] <nine> lizmat: that typo in the type didn't cause anything to blow up because we don't actually check those types
[09:10] <nine> lizmat: why did you remove Attaching from subset? It was good as it was and in fact that was something I explicitly pointed out reviewing. Now it's wrong again.
[09:21] <lizmat> I thought Attaching was not needed because there was nothing to attach anymore ?
[09:22] <lizmat> it was only used to attach the current package, but that was only needed in the BEGIN handling, and could be looked up there ?
[09:24] <lizmat> perhaps I'm misunderstanding the use / need for Attaching ?
[09:24] <nine> You never know when BEGIN is actually run and what the state of the resolver is at that point. It could be in a completely different package.
[09:25] <nine> attach is the only time where you can really be sure where the resolver is at that point
[09:26] <lizmat> but the "attach" wasn't attaching anything...  so it seems to me it was being used because of the timing, not because of its intended use
[09:49] <discord-raku-bot> <Nemokosch> Is there anything about architecture besides those two markdown files in the rakudo repo?
[09:50] <Geth> ¦ rakudo/main: 5c66515d46 | (Elizabeth Mattijsen)++ | src/core.c/List.pm6
[09:50] <Geth> ¦ rakudo/main: Make List.sum adhere to container semantics
[09:50] <Geth> ¦ rakudo/main: 
[09:50] <Geth> ¦ rakudo/main: Fixes https://github.com/rakudo/rakudo/issues/5205
[09:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5c66515d46
[09:56] *** unicodable6 joined
[10:02] <ab5tract> lizmat: I'm worried about the changes you made to $!of in RakuAST::Type::Subset
[10:02] <lizmat> ab5tract: explain  :-)
[10:02] <ab5tract> why did you stop the type checking?
[10:03] <lizmat> I stopped the type checking ?
[10:03] <ab5tract> '+        $visitor($!of) if $!of; # && !nqp::istype($!of, RakuAST::Declaration::External::Constant);'
[10:04] <lizmat> hmmm....  I did do that, didn't I 
[10:04] <ab5tract> partly I'm worried because the roast tests for subsets cover too much at once.
[10:04] <ab5tract> I will have to get my tests into roast sooner rather than later
[10:05] <lizmat> can you tell me why you put that test there?  for that particular class / case ?
[10:05] <ab5tract> it's explained in the coment above
[10:05] <ab5tract> I've got to run, will be back with more later
[10:06] <lizmat> ok... will re-instate the check
[10:06] <ab5tract> but basically, without this, `my subset Foo of Int; my subset Bar of Int` will fail
[10:06] <ab5tract> in fact, as it is, my subset Foo of Int should fail already with an IMPL-QAST-DECL missing
[10:07] <ab5tract> bbl
[10:07] <lizmat> m: Q|my subset Foo of Int; my Foo $a = "bar"|.AST(:run)
[10:07] <camelia> rakudo-moar 83a870cb4: OUTPUT: «Type check failed in assignment to $a; expected Cool::Foo but got Str ("bar")␤  in method AST at SETTING::src/core.c/core_epilogue.pm6 line 1␤  in block <unit> at <tmp> line 1␤␤»
[10:07] <lizmat> m: Q|my subset Foo of Int; my Foo $a = 42|.AST(:run)
[10:07] <camelia> rakudo-moar 83a870cb4: ( no output )
[10:07] <lizmat> looks to me it works ?
[10:09] <lizmat> hmmm..  but it did get attached to the wrong package it seems  :-(
[10:31] <Geth> ¦ rakudo/main: 4663edbfe4 | (Elizabeth Mattijsen)++ | src/Raku/ast/type.rakumod
[10:31] <Geth> ¦ rakudo/main: RakuAST: re-instate proper order for resolving
[10:31] <Geth> ¦ rakudo/main: 
[10:31] <Geth> ¦ rakudo/main: And other repairs to fix the damage done by yours truly in b915dd3a.
[10:31] <Geth> ¦ rakudo/main: The subset now gets attached to the proper package again.
[10:31] <Geth> ¦ rakudo/main: 
[10:31] <Geth> ¦ rakudo/main: nine++  ab5tract++
[10:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4663edbfe4
[10:32] *** sena_kun left
[10:38] <lizmat> anyways, now at 682 / 1355
[10:39] <lizmat> t/spec/S12-class/instantiate.t now passing
[11:00] <nine> lizmat: "attach" is just a callback for when a node gets attached to the AST. Lots of nodes already just use it to take not of where they are attached to.
[11:08] *** sena_kun joined
[11:26] *** lizmat_ joined
[11:30] *** samebchase5 joined
[11:31] *** bartolin_ joined
[11:31] *** sjn_ joined
[11:34] *** lizmat_ left
[11:34] *** lizmat_ joined
[11:36] *** Geth left
[11:36] *** lizmat left
[11:36] *** bartolin left
[11:36] *** samebchase left
[11:36] *** sjn left
[11:36] *** Geth joined
[11:36] *** samebchase5 is now known as samebchase
[11:36] *** lizmat_ left
[11:37] *** lizmat joined
[11:37] *** RakuIRCLogger left
[11:39] *** RakuIRCLogger joined
[11:40] *** kawaii_ is now known as kawaii
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:19] <lizmat> notable6: weekly
[12:19] <notable6> lizmat, 1 note: 2023-02-12T21:03:08Z <vrurg>: weekly https://youtu.be/sJs6jNroRXU
[12:21] *** sena_kun left
[12:21] *** sena_kun joined
[12:24] <lizmat> notable6: weekly reset
[12:24] <notable6> lizmat, Moved existing notes to “weekly_2023-02-13T12:24:43Z”
[12:49] <nine> Attribute initializers are on the one hand relatively simple to support. It's really just a paragraph of code and a few incidental minor fixes. On the other hand they may become a well that shakes the very foundation of the republic^W^WBEGIN time evaluation. Yes, my old friend again.
[12:54] * lizmat is glad she didn't get into that well
[12:57] <nine> In case anyone's curious. My problem is that if IMPL-BEGIN-TIME-EVALUATE is given a Code object, it will run it. But now there's a case where we need a Code object to just evaluate to its meta-object instead.
[12:58] <ab5tract> oof
[13:00] <discord-raku-bot> <Nemokosch> why does the same thing try to solve two problems?
[13:07] <ab5tract> okay, I feel like I'm going crazy.. This token definition *should* match the string 'enum', correct? https://gist.github.com/ab5tract/a894cb156033b9f9167ebfb9b5d197ba
[13:08] <ab5tract> as in 'enum', nothing but 'enum'
[13:11] <ab5tract> I don't remember the specifics of the journey to get subset parsing, but I don't remember it being so difficult
[13:12] <nine> It usually isn't. Yes, that token looks fine. What's happening?
[13:12] <ab5tract> Thanks to your recent fix, I get: 'Undeclared routine'
[13:13] <ab5tract>     emum used at line -1. Did you mean ''?
[13:13] <ab5tract> omg
[13:13] <ab5tract> I need to increase the font size in my terminal, clearly
[13:14] <ab5tract> still happens with ./rakudo-m -Ilib -e 'enum'
[13:14] <ab5tract>     enum used at line -1. Did you mean ''?
[13:22] <nine> LOL emum :)
[13:22] <ab5tract> :)
[13:23] <ab5tract> I wish fixing the typo had solved the issue 
[13:23] <nine> Try it again with more of that token put back in. It might be that your token simply loses to name parsing because it doesn't contain anything more than that
[13:23] <ab5tract> fair enough!
[13:23] <nine> Remember: we do longest token matching. Your token should match more than others :)
[13:25] <ab5tract> excellent point
[13:26] <ab5tract> damn you, "emum"!
[13:26] <ab5tract> I lost a surprising amount of time to that typo 
[13:27] <nine> That's why it's always good to not just post the problem, but also what exactly you did to reproduce it here.
[13:30] <ab5tract> sometimes I feel like I'm chatting in the channel enough already but your point makes a lot of sense and I will take it to heart
[13:30] <Geth> ¦ rakudo/main: b010e70b50 | (Elizabeth Mattijsen)++ | 2 files
[13:30] <Geth> ¦ rakudo/main: Add first subset tests
[13:30] <Geth> ¦ rakudo/main: 
[13:30] <Geth> ¦ rakudo/main: More to come later!
[13:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b010e70b50
[13:31] <nine> We're all very experienced rubber ducks :)
[13:32] <lizmat> :-)
[13:48] <lizmat> nine: re 035544f28dfb570cb97   wouldn't it make more sense to create a ApplyPostfix.as-method-call(ArgList), which would take the first element of the given ArgList as the invocant
[13:48] <lizmat> and not change ArgList at all ?
[13:48] *** linkable6 left
[13:49] *** linkable6 joined
[13:49] <lizmat> ah, but then it wouldn't know how to codegen sym<name>
[13:50] <lizmat> hmmm.. perhaps a subclass of ArgList: InvocantArgList ?
[14:16] <nine> You don't like the current implementation?
[14:18] <[Coke]> the nice thing about rubber ducking is that for something like that, the person doesn't even have to know how to fix the thing you were working on!
[14:18] <nine> Sometimes the person doesn't even have to actually be there :)
[14:19] <nine> lizmat: but yes, InvocantArgList would have a tiny performance advantage.
[14:19] <[Coke]> I am very happy and very frustrated when that works. :)
[14:20] <lizmat> nine: not talking about performance, but developer interface really
[14:28] *** codesections joined
[14:42] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/02/13/2023-07-core-class/
[14:43] <vrurg> lizmat: correction for the Weekly: it's only the second part of the class. The first one is lost due to poor video quality.
[14:44] <vrurg> Ah, "second"... I'm still sleeping... :)
[15:09] <Geth> ¦ rakudo/main: 615b9bf929 | (Elizabeth Mattijsen)++ | src/core.c/List.pm6
[15:09] <Geth> ¦ rakudo/main: List.head should not decontainerize
[15:09] <Geth> ¦ rakudo/main: 
[15:09] <Geth> ¦ rakudo/main: Fixed ValueMap from the latest Blin run
[15:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/615b9bf929
[15:27] *** sjn_ is now known as sjn
[15:29] *** Xliff joined
[15:50] <Xliff> P6-GLib suite timing statistics for Raku 2022.12.1192.g.2.b.6.b.4019.d
[15:50] <Xliff> Total number of projects: 33 (502818 loc)
[15:50] <Xliff> Total non-parallel compile times: 8869.070 (268.760 avg)
[15:50] <Xliff> Total parallel compile times: 1435.714 (43.506 avg) 6.177x speedup
[15:50] <Xliff> Note: Great compile times! Much better than the last 2 weeks! ;)
[15:51] <lizmat> FWIW, I don't think anybody's done anything in that direction, so *I* have no explanation for what you're seeing / have seen
[15:51] <Xliff> lizmat: I can understand your not understanding.
[15:52] <lizmat> but I would *like* to understand !
[15:52] <Xliff> I'm almost certain it's environment.
[15:52] <Xliff> I'm having open file issues and I can't seem to nail them down.
[15:53] <Xliff> I will let you know if I ever lock it down.
[15:53] <lizmat> please!
[16:50] <lizmat> bisectable6 old=2022.12 say Date.today.Int
[16:50] <lizmat> bisectable6: old=2022.12 say Date.today.Int
[16:50] <bisectable6> lizmat, Bisecting by exit code (old=2022.12 new=615b9bf). Old exit code: 1
[16:51] <bisectable6> lizmat, (2023-01-09) https://github.com/rakudo/rakudo/commit/72856df91b2e1cafb439bcd8bcc7ae46c378d01e
[16:51] <bisectable6> lizmat, bisect log: https://gist.github.com/6f04016638c8c9134edce3c1016e2bc3
[16:52] <Xliff> lismat: Are you still working on the weekly?
[16:53] <Xliff> s/lismat/lizmat/
[16:53] <lizmat> nope, published already
[16:53] <lizmat> 2.5 hours ago or so
[16:58] <Geth> ¦ Proxee/main: 06a6d325cf | (Elizabeth Mattijsen)++ | 6 files
[16:58] <Geth> ¦ Proxee/main: 1.2
[16:58] <Geth> ¦ Proxee/main: review: https://github.com/raku-community-modules/Proxee/commit/06a6d325cf
[16:59] <Xliff> lizmat=+
[16:59] <Xliff> s/=+/++/
[17:00] <Xliff> What's wrong with my keyboard skills today?!? o_0
[17:00] <lizmat> mp ofrs
[17:11] <discord-raku-bot> <Nemokosch> the problem is that = and + are close to each other in the first place
[17:16] <Geth> ¦ Proxee/main: fc7226bc5a | (Elizabeth Mattijsen)++ | 4 files
[17:16] <Geth> ¦ Proxee/main: Fix tests
[17:16] <Geth> ¦ Proxee/main: review: https://github.com/raku-community-modules/Proxee/commit/fc7226bc5a
[17:20] <Geth> ¦ Proxee/main: 4f1c5f23c1 | (Elizabeth Mattijsen)++ | Changes
[17:20] <Geth> ¦ Proxee/main: 1.3
[17:20] <Geth> ¦ Proxee/main: review: https://github.com/raku-community-modules/Proxee/commit/4f1c5f23c1
[17:56] *** ab5tract left
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:09] *** sena_kun left
[18:43] *** sena_kun joined
[19:13] *** melezhik joined
[19:23] *** melezhik left
[19:57] <Geth> ¦ Proxee: coke++ created pull request #2: typo
[19:57] <Geth> ¦ Proxee: review: https://github.com/raku-community-modules/Proxee/pull/2
[20:06] <[Coke]> I had to fork that, couldn't do it in place.
[20:17] <Geth> ¦ Proxee/main: a823858b61 | (Will Coleda)++ | README.md
[20:17] <Geth> ¦ Proxee/main: typo
[20:17] <Geth> ¦ Proxee/main: review: https://github.com/raku-community-modules/Proxee/commit/a823858b61
[20:17] <Geth> ¦ Proxee/main: e744dd2295 | (Márton Polgár)++ (committed using GitHub Web editor) | README.md
[20:17] <Geth> ¦ Proxee/main: Merge pull request #2 from coke/main
[20:17] <Geth> ¦ Proxee/main: 
[20:17] <Geth> ¦ Proxee/main: typo
[20:17] <Geth> ¦ Proxee/main: review: https://github.com/raku-community-modules/Proxee/commit/e744dd2295
[20:17] <discord-raku-bot> <Nemokosch> good catch
[22:00] *** frost left
[22:08] *** ab5tract joined
[22:59] *** sena_kun left
[23:38] *** Xliff left
