[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:20] <[Coke]> anyone know what the failure mode of running blin on mac is? I'm seeing Attempting to fetch 53230a19449764fabb922957616eede151da0de0…

[00:20] <[Coke]> No build for start point

[00:21] <[Coke]> no indication if the error was that it couldn't get this build (did it even try?)

[00:22] <[Coke]> do I need to pre-load builds?

[01:00] *** linkable6 left
[01:00] *** evalable6 left
[01:01] *** evalable6 joined
[01:02] *** linkable6 joined
[02:36] <vrurg> [Coke]: that reminded me. Blin relies on pre-built rakudo binaries. There are no pre-builds for macos, linux only.

[02:38] <vrurg> At least, that was the case a couple of years ago, but it is unlikely somebody has gotten it fixed. Guessing, there are no binaries for arm64 platform either.

[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:01] *** bloatable6 left
[07:01] *** quotable6 left
[07:01] *** notable6 left
[07:01] *** linkable6 left
[07:01] *** shareable6 left
[07:01] *** squashable6 left
[07:01] *** coverable6 left
[07:01] *** unicodable6 left
[07:01] *** nativecallable6 left
[07:01] *** evalable6 left
[07:01] *** statisfiable6 left
[07:01] *** bisectable6 left
[07:01] *** releasable6 left
[07:01] *** reportable6 left
[07:01] *** tellable6 left
[07:01] *** benchable6 left
[07:01] *** committable6 left
[07:01] *** sourceable6 left
[07:01] *** coverable6 joined
[07:01] *** notable6 joined
[07:01] *** bisectable6 joined
[07:02] *** evalable6 joined
[07:02] *** benchable6 joined
[07:02] *** sourceable6 joined
[07:02] *** tellable6 joined
[07:03] *** linkable6 joined
[07:03] *** statisfiable6 joined
[07:03] *** reportable6 joined
[07:03] *** bloatable6 joined
[07:03] *** quotable6 joined
[07:03] *** unicodable6 joined
[07:03] *** squashable6 joined
[07:03] *** committable6 joined
[07:03] *** shareable6 joined
[07:03] *** nativecallable6 joined
[07:03] *** releasable6 joined
[07:37] *** Xliff joined
[07:39] *** Xliff left
[09:11] *** sena_kun joined
[10:05] *** ab5tract joined
[10:31] <nine_> Oh, looks like I've fallen behind even on just reading IRC...

[10:33] <lizmat> nine_  o/

[10:33] <lizmat> hope you've had a good vacation :-)

[10:34] <nine_> Well...it was just a one-day-trip yesterday

[10:35] <lizmat> ah, that's very short  :-(

[10:36] <lizmat> my best bit in the past week, was removing 1 line of faulty debugging code and getting +3 test files  :-)

[10:36] <lizmat> looking at implementing "will" trait atm

[10:36] <nine_> Wow, that's a nice trade :)

[10:37] <lizmat> https://github.com/rakudo/rakudo/commit/66d53dcde2

[11:49] <lizmat> nine_: do you know why we're abusing the trait model for handling attribute initializer code, instead of just calling "set_build" on the Attribute meta-object ?

[12:00] *** reportable6 left
[12:02] <lizmat> guifa glancing over https://github.com/alabamenhu/PolyglotRegexen am I correct in not seeing an  adverb so you could do "foo" ~~ q:ecma262/ regex / ?

[12:02] *** reportable6 joined
[12:14] *** timo left
[12:20] *** Xliff joined
[12:20] <Xliff> Raku-GLib suite timing statistics for Raku 2023.06.155.g.657.dada.537

[12:20] <Xliff> Using the following processor: AMD Ryzen 9 5950X 16-Core Processor

[12:20] <Xliff> Total number of projects: 34 (506509 loc)

[12:20] <Xliff> Total non-parallel compile times: 11113.560 (326.869 avg)

[12:20] <Xliff> Total parallel compile times: 2373.608 (69.812 avg) 4.682x speedup

[12:25] *** timo joined
[12:32] *** timo left
[12:34] *** Xliff left
[12:38] *** timo joined
[12:48] <nine_> lizmat: what do you mean by abusing the trait model?

[12:49] <lizmat> https://github.com/rakudo/rakudo/blob/657dada5379d02e6b7adff66e89f57ed63fcd806/src/core.c/traits.pm6#L605C1-L607

[12:52] <lizmat> and: https://github.com/rakudo/rakudo/blob/main/src/Raku/ast/variable-declaration.rakumod#L658C1-L658C1

[12:52] <lizmat> the problem is that that trait_mod is using a non-standard "will foo" interface

[12:53] <lizmat> and in the RakuAST world, I don't see the need for the trait_mod step

[12:53] <lizmat> I mean, we have the meta-object already

[12:54] <nine_> Can't tell. Only know that the old Actions do the same

[12:54] <lizmat> that I gathered already...  :-)

[12:55] <nine_> Well, in principle trait_mod:<will> can be overridden lexically.

[12:55] <lizmat> but that is now interfering with generic "will foo" trait support

[12:55] <lizmat> yeah, but this one is internal and not documented and not tested directly

[12:55] <nine_> Interfering how?

[12:56] <lizmat> because the generic interface is "identifier value"

[12:56] <lizmat> will foo $bar

[12:58] <lizmat> the current implementation of the RakuAST:Trait::Will class only supports the "will build" case

[12:58] <lizmat> https://github.com/rakudo/rakudo/blob/657dada5379d02e6b7adff66e89f57ed63fcd806/src/Raku/ast/traits.rakumod#L231

[12:58] <lizmat> taking the target as the first arg, and putting the value in :build()

[12:59] <lizmat> which matches the Attribute case

[12:59] <lizmat> but *not* the other trait_mod:<will> cases

[13:00] <lizmat> such as https://github.com/rakudo/rakudo/blob/657dada5379d02e6b7adff66e89f57ed63fcd806/src/core.c/Variable.pm6#L151

[13:01] <lizmat> so either I need to special case "build" in RakuAST::Trait::Will

[13:01] <lizmat> or change the API of the existing trait_mod:<will>s

[13:01] <lizmat> and their calls

[13:02] <lizmat> or: get rid of the (I think) in RakuAST no longer needed Attribute wlll build trait

[13:04] <nine_> We might get away with calling set_build directly

[13:05] <lizmat> that was my thought as well  :-)

[13:07] *** Xliff joined
[13:07] <Xliff> Raku-GLib suite timing statistics for Raku 2023.06.155.g.657.dada.537

[13:07] <Xliff> Using the following processor: 13th Gen Intel(R) Core(TM) i9-13900K

[13:07] <Xliff> Total number of projects: 34 (505641 loc)

[13:07] <Xliff> Total non-parallel compile times: 5728.160 (168.475 avg)

[13:07] <Xliff> Total parallel compile times: 1025.399 (30.159 avg) 5.586x speedup

[13:26] *** Xliff left
[13:35] <lizmat> nine: I guess the only challenge I have is to convert the RakuAST::Method object to what set_build expects

[13:36] <lizmat> self.IMPL-BEGIN-TIME-EVALUATE($method, $resolver, $context)  does not seem to cut it

[13:44] <lizmat> $meta-object.set_build($method.IMPL-COMPILE-BODY($context))  neither

[13:44] <lizmat> nine_ it appears I'm missing something that you may be able to tell me from experience

[14:16] <Geth> ¦ roast: 2e9da6b388 | (Elizabeth Mattijsen)++ | 2 files

[14:16] <Geth> ¦ roast: Remove unnecessary reliance on :P5 adverb

[14:16] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/2e9da6b388

[14:18] <nine_> lizmat: I think you just have to do what RakuAST::Trait.apply does

[14:19] <nine_> And keep in mind that the point is _not_ to execute that method!

[14:19] <lizmat> yeah  :-)

[14:20] <[Coke]> vrurg: (macos) I assume that's the underlying issue, but there's no diagnostic that that's the actual failure.

[14:23] <Geth> ¦ roast/lizmat-remove-P5-tests: 3902f1d713 | (Elizabeth Mattijsen)++ | 14 files

[14:23] <Geth> ¦ roast/lizmat-remove-P5-tests: Remove all :P5 related regex tests that were testoing :P5

[14:23] <Geth> ¦ roast/lizmat-remove-P5-tests: 

[14:23] <Geth> ¦ roast/lizmat-remove-P5-tests: As suggested in:

[14:23] <Geth> ¦ roast/lizmat-remove-P5-tests:   https://github.com/Raku/problem-solving/issues/378

[14:23] <Geth> ¦ roast/lizmat-remove-P5-tests: review: https://github.com/Raku/roast/commit/3902f1d713

[14:26] <Geth> ¦ roast: lizmat++ created pull request #837: Remove all :P5 related regex tests that were testing :P5

[14:26] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/837

[14:30] *** timo left
[14:32] *** timo joined
[14:46] <Geth> ¦ roast/lizmat-remove-P5-tests: d7770cbbc4 | (Elizabeth Mattijsen)++ | S02-names-vars/perl.t

[14:46] <Geth> ¦ roast/lizmat-remove-P5-tests: Correct number of tests run

[14:46] <Geth> ¦ roast/lizmat-remove-P5-tests: review: https://github.com/Raku/roast/commit/d7770cbbc4

[14:54] <lizmat> 892 (for me at least)

[14:56] *** timo left
[15:02] *** timo joined
[15:17] *** timo left
[15:21] *** timo joined
[15:38] *** timo left
[15:44] *** timo joined
[15:48] <guifa> lizmat: I think I made it as ecma-m/.../  but only as a proof of concept for getting it to work in that context, leaving the exact naming¡/syntax tbd

[15:49] <lizmat> yeah, but you added a rule to match ecma-m/ /

[15:50] <lizmat> but what about qq:ecma-m/ / ?

[15:50] <guifa> tbh didn't even occur to me O:-)

[15:54] <lizmat> yeah, so ideally I'm thinking like:

[15:55] <lizmat> $*LANG.register-quote-lang('ecma-m', :allowed-adverbs<q qq>, Ecma262Role)

[15:55] <lizmat> $*LANG.register-quote-lang('ecma', :allowed-adverbs<q qq>, Ecma262Role)

[15:56] <lizmat> and that would allow q:ecma/foo/   or qq:ecma/ foo $bar /

[15:59] <guifa> or maybe

[16:00] <guifa> my $~ECMA262 = ...; $*LANG.register-quote-lang('ecma', :allowed-adverbs<q qq>, $~ECMA262);

[16:00] <guifa> just since, y'know, that twigil exists hahahahaha

[16:01] <lizmat> but why the $~ECMA262 ?

[16:01] <lizmat> ah, JFF ?

[16:02] <guifa> well, you'll want both the grammar and actions, and if we find a way to put the entire language in a var like that, OMG namespacing will be a thing of the past :-)

[16:03] *** timo left
[16:05] <guifa> but this hits, perhaps, to there not being a general pluggable way for slangs.  right now I'm mixing into $~MAIN, but I don't think long term that's a good practice, at least when doing big changes 

[16:05] *** timo joined
[16:06] <lizmat> indeed it is not, also from a performance point of view

[16:54] *** timo left
[16:56] *** timo joined
[17:48] <Geth> ¦ Shell-Command/main: 119 commits pushed by 22 authors

[17:48] <Geth> ¦ Shell-Command/main: review: https://github.com/raku-community-modules/Shell-Command/compare/f365c15eca82^...1145ea0ff715

[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:09] <Geth> ¦ Shell-Command/main: 5cd797853a | (Elizabeth Mattijsen)++ | 9 files

[18:09] <Geth> ¦ Shell-Command/main: Preparing for zef release

[18:09] <Geth> ¦ Shell-Command/main: review: https://github.com/raku-community-modules/Shell-Command/commit/5cd797853a

[18:15] <Geth> ¦ Shell-Command/main: 1850d227ef | (Elizabeth Mattijsen)++ | META6.json

[18:15] <Geth> ¦ Shell-Command/main: Fix META

[18:15] <Geth> ¦ Shell-Command/main: review: https://github.com/raku-community-modules/Shell-Command/commit/1850d227ef

[18:39] *** timo left
[18:58] <Geth> ¦ Shell-Command/main: 489d45b5f2 | (Elizabeth Mattijsen)++ | 3 files

[18:58] <Geth> ¦ Shell-Command/main: 1.0

[18:58] <Geth> ¦ Shell-Command/main: review: https://github.com/raku-community-modules/Shell-Command/commit/489d45b5f2

[19:01] <Geth> ¦ if/main: 18 commits pushed by (Tobias Leich)++, (Zoffix Znet)++, (Juan Julián Merelo Guervós)++, (JJ Merelo)++

[19:01] <Geth> ¦ if/main: review: https://github.com/raku-community-modules/if/compare/bdebe0a7a999^...ba76eb8b0322

[19:06] *** timo joined
[19:13] *** timo left
[19:21] <Geth> ¦ if/main: 7feb76902c | (Elizabeth Mattijsen)++ | 12 files

[19:21] <Geth> ¦ if/main: Preparing for zef release

[19:21] <Geth> ¦ if/main: review: https://github.com/raku-community-modules/if/commit/7feb76902c

[19:23] *** timo joined
[19:23] <Geth> ¦ if/main: 6e2022cc8e | (Elizabeth Mattijsen)++ | Changes

[19:23] <Geth> ¦ if/main: 0.1.2

[19:23] <Geth> ¦ if/main: review: https://github.com/raku-community-modules/if/commit/6e2022cc8e

[19:35] <Geth> ¦ Shell-Command/main: 4c1fc6b4f9 | (Elizabeth Mattijsen)++ | 6 files

[19:35] <Geth> ¦ Shell-Command/main: 1.1

[19:35] <Geth> ¦ Shell-Command/main: review: https://github.com/raku-community-modules/Shell-Command/commit/4c1fc6b4f9

[20:34] <Geth> ¦ rakudo/main: 5e353bcdf7 | (Elizabeth Mattijsen)++ | 2 files

[20:34] <Geth> ¦ rakudo/main: RakuAST: add support for .literalize of simple type objects

[20:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5e353bcdf7

[20:39] <Geth> ¦ JSON-Unmarshal/main: 593ffbc7dc | (Vadim Belman)++ | 2 files

[20:39] <Geth> ¦ JSON-Unmarshal/main: Clarify the definition of deserializable type objects

[20:39] <Geth> ¦ JSON-Unmarshal/main: 

[20:39] <Geth> ¦ JSON-Unmarshal/main: - nominalize nominalizables

[20:39] <Geth> ¦ JSON-Unmarshal/main: - ensure that the nominalization is a nominal type

[20:39] <Geth> ¦ JSON-Unmarshal/main: - consider compliant if there is any public or `is build` attribute

[20:39] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/commit/593ffbc7dc

[20:39] <Geth> ¦ JSON-Unmarshal/main: 246f7a3591 | (Vadim Belman)++ | 2 files

[20:39] <Geth> ¦ JSON-Unmarshal/main: 0.15

[20:39] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/commit/246f7a3591

[20:43] *** ab5tract left
[20:58] *** ab5tract joined
[21:30] *** ab5tract left
[21:43] <[Coke]> lizmat++ for fixing some bugs I reported.

[22:20] *** sena_kun left
