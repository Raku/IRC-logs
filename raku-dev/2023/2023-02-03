[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:16] *** Xliff left
[01:37] *** NemokoschKiwi joined
[01:39] *** NemokoschKiwi left
[01:44] *** AlexDaniel joined
[03:27] *** AlexDaniel left
[03:50] *** epony left
[04:51] *** epony joined
[05:51] *** evalable6 left
[05:51] *** linkable6 left
[05:52] *** linkable6 joined
[05:54] *** evalable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:01] *** benchable6 left
[07:01] *** sourceable6 left
[07:01] *** nativecallable6 left
[07:01] *** quotable6 left
[07:01] *** unicodable6 left
[07:01] *** bloatable6 left
[07:01] *** reportable6 left
[07:01] *** greppable6 left
[07:01] *** coverable6 left
[07:01] *** tellable6 left
[07:01] *** shareable6 left
[07:01] *** notable6 left
[07:01] *** bisectable6 left
[07:01] *** releasable6 left
[07:01] *** evalable6 left
[07:01] *** committable6 left
[07:01] *** notable6 joined
[07:02] *** shareable6 joined
[07:02] *** evalable6 joined
[07:02] *** committable6 joined
[07:02] *** coverable6 joined
[07:02] *** unicodable6 joined
[07:02] *** nativecallable6 joined
[07:02] *** bisectable6 joined
[07:03] *** reportable6 joined
[07:03] *** tellable6 joined
[07:03] *** benchable6 joined
[07:03] *** bloatable6 joined
[07:03] *** greppable6 joined
[07:04] *** quotable6 joined
[07:04] *** releasable6 joined
[07:04] *** sourceable6 joined
[07:39] <Geth> ¦ rakudo/main: 48e61f8a18 | (Stefan Seifert)++ | 3 files

[07:39] <Geth> ¦ rakudo/main: RakuAST Fix stub packages preventing declaration of the real package

[07:39] <Geth> ¦ rakudo/main: 

[07:39] <Geth> ¦ rakudo/main: This is not yet 100 % there as we still run the BEGIN handler on the

[07:39] <Geth> ¦ rakudo/main: stub package. It's hard not to, because that's run before we even parse

[07:39] <Geth> ¦ rakudo/main: the package body, so we cannot know yet that it's just a stub.

[07:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/48e61f8a18

[08:20] <Geth> ¦ rakudo/main: b4fe21c260 | (Stefan Seifert)++ | src/Raku/ast/pair.rakumod

[08:20] <Geth> ¦ rakudo/main: RakuAST: fix canonicalization for non-literal colonpair values

[08:20] <Geth> ¦ rakudo/main: 

[08:20] <Geth> ¦ rakudo/main: If a name part doesn't have a simple compile time value, all we can do

[08:20] <Geth> ¦ rakudo/main: is deparse for canonicalization. Needed for e.g. Int:D(Cool)

[08:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b4fe21c260

[08:23] *** Geth left
[08:23] *** Geth joined
[08:24] <nine> m: use MONKEY-SEE-NO-EVAL; EVAL Q[my Int:D(Cool) $i = "1"].AST

[08:24] <camelia> rakudo-moar 48e61f8a1: OUTPUT: «Use of Nil in string context␤  in block <unit> at <tmp> line 1␤Use of Nil in string context␤  in any IMPL-QUOTE-VALUE at src/Raku/ast/pair.rakumod line 55␤Type check failed in assignment to $i; expected Int:D but got Str ("1")␤  in block <un…»

[08:24] <nine> Finally found a test that breaks because derived types don't stack yet

[09:31] <lizmat> but: isn't my Int:D(Cool) wrong?  Shouldn't it be Int(Cool) ?

[09:31] <lizmat> I mean, we can only coerce instantiated values, no?

[09:34] *** ab5tract joined
[09:39] <ab5tract> nine: Is it possible to convert a `RakuAST::Declaration::External::Constant` into an actualy type object? I ask because the refinee of a SubsetHOW is a type object. I don't see any mention of the refinee in either base or ast QAST.

[09:47] <nine> lizmat: that's from a spectest

[09:48] <nine> ab5tract: .compile-time-value

[09:48] <nine> Yeah, you will only find such details in the meta object itself, not in the QAST

[09:49] *** sena_kun joined
[09:50] <ab5tract> nine: thanks!

[09:53] <nine> In general: from within the node (e.g. I need the code object this RakuAST::Routine represents) it's .meta-object and from outside it's .compile-time-value

[10:05] <ab5tract> Very helpful, thanks!

[10:05] <ab5tract> Well, I've got it doing just about everything! ... except actually working

[10:06] <nine> err...wat?

[10:26] <nine> err...wat?

[10:29] <nine> ~.

[11:04] <ab5tract> :)

[11:05] <ab5tract> I mean, it compiles, the QAST looks mostly good. It works when the subset is declared in packages. It just always fails the type check 

[11:07] <nine> Does it run the where expression?

[11:09] <ab5tract> From what I can see, no.

[11:11] <ab5tract> no, it does not (according to my uber-sophisticated debug logging of inserting a 'say' into the where block)

[11:20] <ab5tract> lol

[11:23] <ab5tract> it was a  matter of passing the `$!where` to the SubsetHOW.new_type generator before `$!where` was defined. Moved the assignment from PRODUCE-STUBBED-META-OBJECT to PRODUCE-META-OBJECT via a new method `set_where` on SubsetHOW and voila!

[11:24] <ab5tract> There's some copy-pasta in there that might appreciate some guru-level inspection, but otherwise this is looking good

[11:24] <lizmat> ab5tract: please don't forget to add deparsing and tests :-)

[11:24] <lizmat> or tell me to do it  :-)

[11:31] <ab5tract> yeah, that might be a bit tricky... so I take it tests are separate from the current test suite?

[11:32] <nine> It's just tests in t/12-rakuast i.e. tests that create RakuAST nodes manually and check if they do the same as the parsed AST.

[11:34] <ab5tract> Okay, interesting.

[11:34] <ab5tract> and deparsing?

[11:37] <ab5tract> damn, there's something broken about using WhateverCode with where

[11:38] <ab5tract> and setting a parameter to a subset type  doesn't seem to do the check either

[11:39] <nine> That's basically included in those tests.

[11:40] <nine> I'd try it first with an explicit block. Then when that works move on to thunking

[11:47] <ab5tract> yeah, using an explicit block doesn't do anything WRT parameter type checking

[11:47] <ab5tract> I do see in the source "# Do type checks.\n        # TODO really more involved than this"

[11:48] <ab5tract> for `RakuAST::Parameter`

[11:51] *** raschip joined
[11:53] <nine> It already is much more involved than when that was written :) But anyway, what about my subset Foo where { $_ > 5 }; my Foo $i = 10;

[11:57] <ab5tract> yeah, that works fine

[11:58] <ab5tract> as does `my subset Foo where 5; my Foo = 4`

[11:58] <nine> Including running the where block?

[11:59] <ab5tract> yes, the where block runs, according to any `say` implanted there

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:04] <ab5tract> branch is now fully up to date

[12:05] <lizmat> ab5tract: if you feel up to writing tests, please do

[12:06] <lizmat> if you'd rather attack another piece of RakuAST, lemme take care of the tests and deparsing then, for efficiency's sake  :-)

[12:07] <nine> Well first that thing has to work anyway :)

[12:07] <ab5tract> okay, sound good.

[12:07] <ab5tract> yeah, there's that lol

[12:08] <ab5tract> it also fails with confused when running: `'my subset Foo where { $_ > 5 }; my Foo $i where { $_ < 15 } = 10; say $i'

[12:08] <ab5tract> TIL you could double constrain like this

[12:09] *** kjp left
[12:10] *** kjp joined
[12:20] <nine> The add-trait loop should be in actions. It's like that for all other trait holders

[12:21] <Geth> ¦ rakudo/main: f98f316c19 | (Elizabeth Mattijsen)++ | src/Raku/ast/statements.rakumod

[12:21] <Geth> ¦ rakudo/main: RakuAST: Add support for "use MONKEY"

[12:21] <Geth> ¦ rakudo/main: 

[12:21] <Geth> ¦ rakudo/main: The other MONKEY-...  were already supported

[12:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f98f316c19

[12:23] <nine> Determining the current-package must be done in attach, not PERFORM-BEGIN. You don't know where we actually are when BEGIN is triggered. In attach you're guaranteed to get the right answer.

[12:24] <ab5tract> ok, will make that change

[12:24] <Geth> ¦ rakudo/main: 886a00d1cc | (Elizabeth Mattijsen)++ | 6 files

[12:24] <Geth> ¦ rakudo/main: RakuAST: Add Nqp and Nqp::const classes

[12:24] <Geth> ¦ rakudo/main: 

[12:24] <Geth> ¦ rakudo/main: - create new source and test file

[12:24] <Geth> ¦ rakudo/main: - move nqp logic from Call::Name to Nqp

[12:24] <Geth> ¦ rakudo/main: - add direct support for nqp::const in grammar

[12:24] <Geth> ¦ rakudo/main: - add deparsing

[12:24] <Geth> ¦ rakudo/main: - add tests

[12:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/886a00d1cc

[12:25] <ab5tract> it looks like the ast fails for `my $i where { $_ < 10 } = 5`, so it's not specific to subsets

[12:25] <ab5tract> s/the ast/RakuAST/

[12:26] <nine> What does RakuAST::VarDeclaration::Implicit::Constant have to do with the traits in Subset?

[12:27] <ab5tract> Nothing, that was just a thinko

[12:27] <ab5tract> You're referring to the comment about it maybe not being necessary?

[12:28] <nine> yes

[12:31] <ab5tract> Yeah, that's just a brain fart. Please ignore

[12:45] <ab5tract> Moving all current-package related stuff to `attach` results in "Lexical 'Foo' already declared" for 'my subset Foo of Int where { $_ > 5 }; my Foo $i = "6"; say $i.raku'

[12:48] <nine> Err..."all current-package related stuff" what does that mean exactly? I said "determining the current-package". That's precisely what I meant ;)

[12:51] <ab5tract> (^_^)

[12:53] <nine> Does your PRODUCE_META actually get called when you try it on a parameter?

[13:05] <ab5tract> checking

[13:08] <ab5tract> yes, it does

[13:10] *** evalable6 left
[13:13] *** evalable6 joined
[13:14] <ab5tract> okay, this is interesting...  'module M { module N { subset F where { say "in where!"; $_ == 5 } } }; -> M::N::F $w { say $w }("w")' --> prints 'w'

[13:15] <ab5tract> adding 'of Int' a la 'module M { module N { subset F of Int where { say "in where!"; $_ == 5 } } }; -> M::N::F $w { say $w }("w")' --> dies with exception in binding parameter

[13:17] <ab5tract> but the exception mentions `Int`, not `M::N::F` as in base

[13:18] <nine> Yes, that exception is due to failure to match the nominal type

[13:19] <nine> The old frontend does generate QAST for doing that subset match:

[13:19] <nine>     │   │     │     - QAST::ParamTypeCheck 

[13:19] <nine>     │   │     │       - QAST::Op(istrue) 

[13:19] <nine>     │   │     │         - QAST::Op(callmethod ACCEPTS) 

[13:19] <nine>     │   │     │           - QAST::WVal(Foo) 

[13:19] <nine>     │   │     │           - QAST::Var(local __lowered_param__2)

[13:20] <ab5tract> so, it's interacting with the subset to some degree, to get that nominal type? just not enough to actually run the where block..

[13:22] <ab5tract> also: how does one generate a QAST::Var of "local __lowered_param_2" from code?

[13:24] <nine> I think src/Perl/Actions.nqp:5956 is responsible for that. It adds the type as post constraint if its nominalizable

[13:26] <nine> Oh, don't worry about that. That's the result of $get-decont-var() which you can just use as is. See related code in RakuAST::Parameter::IMPL-TO-QAST

[13:27] <ab5tract> ok, nice!

[13:28] <discord-raku-bot> <Nemokosch> ab5tract++

[13:38] <ab5tract> does `nqp::istype()` include all of the `is` classes in its lookup? I noticed this returned false for a `RakuAST::Trait::Of` when checking against `RakuAST::Trait`

[13:39] <ab5tract> erm, sorry. that might be a bit confusing: `nqp::istype($object, RakuAST::Trait)` returned false when $object was a `RakuAST::Trait::Of` 

[13:41] <ab5tract> I'm wondering if something similar is happening when a `CurryThunk` is used as a where clause when it checks whether the type is `RakuAST::Code`

[13:41] <nine> Hm....may be a good time to point a serious gotcha when working in NQP: it doesn't care if a multi part name actually exists. So it will happily accept I::Dont::Exist and just evaluate it to NQPMu

[13:42] <ab5tract> that's very good to know

[13:45] <ab5tract> not sure if it applies here though? I tried using `set-traits($traits)`. That code checks whether every element in the list is of type `RakuAST::Trait` but failed when a `RakuAST::Trait::Of` element was found.

[13:45] <ab5tract> Rather than hacking that, I just unwrap the list and add the trait manually

[13:47] <ab5tract> but yeah, if `nqp::istype($thing, RakuAST::Code)` fails for a `RakuAST::CurryThunk`, it might explain what's going on with wheres and whatever codes at the moment.

[13:48] <ab5tract> Sorry, I'm jumping around between problems and questions that have come up while hacking on this

[13:48] <nine> So it could be that OAOB

[13:48] <ab5tract> hmm, my font is missing some crucial characters for rendering that line

[13:48] <nine> Oops...sorry, very spotty connection on this train

[13:49] <nine> It could be that you need some forward declarations for these types.

[13:50] <nine> type.rakumod comes before code.rakumod in tools/templates/raku_ast_sources

[13:52] <ab5tract> will plain old stubbing do? or do I need to do some fancy nqp magic

[13:56] <ab5tract> strangely enough, it does DWIM when I pass it an honest `RakuAST::Code`

[13:57] <ab5tract> a la `subset F where { $_ == 5 }`

[13:59] <ab5tract> FWIW, '-> Str $w where *.comb == 1 { say $w }("w")'' fails with the new frontend: 'This type cannot unbox to a native integer: P6opaque, WhateverCode'

[14:00] <ab5tract> okay, well I'm pretty stoked to have gotten subsets semi-working :D

[14:00] <ab5tract> current issues:

[14:00] <ab5tract> 1) WhateverCode doesn't work

[14:00] <ab5tract> 2) It doesn't work with parameters

[14:12] <nine> Ok, disrecard the subbing thing. The RakuAST compiler does that already

[14:12] <nine> And other classes like BeginTime refer to RakuAST::Code without doing anything special

[14:16] <nine> 

[14:16] <nine> ~,~.

[14:17] <ab5tract> ah! `* ~~ 5` is not a RakuAST::Code, its a RakuAST::ApplyInfix

[14:19] <discord-raku-bot> <Nemokosch> very fortunate; it would make typegenning for s/// and m// smartmatches to something other than ACCEPTS

[14:20] <ab5tract> Nemokosch: I don't totally understand what you mean

[14:20] <tellable6> ab5tract, I'll pass your message to Nemokosch

[14:23] <discord-raku-bot> <Nemokosch> sorry, this was somewhat off-topic

[14:24] <discord-raku-bot> <Nemokosch> simply put, I'm very unhappy with the way 'foo' ~~ m/o/ and the likes work. Not the outcome per se but the technical implications of it

[14:25] <discord-raku-bot> <Nemokosch> and the way RakuAST is designed could help saving the end-user behavior without the bizarre implications

[14:27] <nine> Pro tip: when connected to the Wifi on a German train, set wireguard MTU to something smaller!

[14:28] <nine> ab5tract: * ~~ 5 needs to be thunked

[14:29] <nine> "thunking" basically means wrapping it in a block, so it becomes a code object

[14:29] <nine> But then I see you already have code that should do that

[14:36] <nine> Btw. your visit-children is incomplete. It's missing 2 children. All RakuAST nodes stored in your node must be visited

[14:44] <ab5tract> good to know!

[14:45] <ab5tract> nine: something is broken with the current thunking WRT to WhateverCodes. The place I lifted my "thunking" from (signature's handling of where) is also broken for whatevercodes

[14:46] <ab5tract> shouldn't I be able to simply call $!expr.IMPL-CURRY ?

[14:47] <nine> I am less than surprised :D

[14:47] <nine> Currying should be done automatically by BEGIN handlers.

[14:50] <nine> It's quite possible that we don't curry everything yet. Only infixes and postcircumfixes AFAIK

[15:11] <ab5tract> infixes should cover Applyinfix, or is it just regular infixes at the moment?

[15:12] <ab5tract> nvm, I can look into the source :)

[15:30] <ab5tract> I can't see why this little thunk-wrapper isn't working as expected :/

[15:31] <nine> Of course it's always possible that the expectation is wrong

[15:33] <ab5tract> how do you mean?

[15:38] <nine> Maybe nothing. What t^Hdoes the QAST look like?

[15:41] <nine> I see a big difference between the result of * == 5 and * ~~ 5

[15:47] <ab5tract> indeed. There's a WVal(Regex) in the smartmatch

[15:48] <ab5tract> And both base and * == 5 include a 'QAST::Op(chain &infix:<~~>)'

[15:49] <ab5tract> (* == 5 includes 'QAST::Op(chain &infix:<==>) ', of course

[15:50] *** AlexDaniel joined
[16:10] <nine> Subset must not handle ApplyInfix any differently. If it needs to we have problems elsewhere

[16:23] *** melezhik joined
[16:30] *** melezhik left
[16:31] <ab5tract> nine++

[16:33] *** melezhik joined
[16:36] *** melezhik left
[17:15] <AlexDaniel> m: say 42

[17:15] <camelia> rakudo-moar 886a00d1c: OUTPUT: «42␤»

[17:15] <AlexDaniel> e: say 42

[17:16] <AlexDaniel> c: HEAD say 42

[17:16] <committable6> AlexDaniel, ¦HEAD(d52342e): «42␤»

[17:16] <evalable6> AlexDaniel, rakudo-moar d52342eb0: OUTPUT: «42␤»

[17:16] <AlexDaniel> uhhhhhh what's going on

[17:17] <AlexDaniel> that's 2 months old??

[17:17] <AlexDaniel> shareable6: HEAD

[17:17] <shareable6> AlexDaniel, https://whateverable.6lang.org/HEAD

[17:19] <AlexDaniel> c: 886a00d1cca211051421b466cb11fb2b14604663 say 42

[17:19] <committable6> AlexDaniel, ¦886a00d: «42␤»

[17:20] <AlexDaniel> hm I don't get it

[17:20] <AlexDaniel> oh. You changed the main branch

[17:21] <lizmat> yeah, shortly after 2022.12

[17:21] <lizmat> it's got RakuAST in it now

[17:21] <AlexDaniel> and it works and it's the default?

[17:22] <AlexDaniel> please fix anything here if it needs fixing: https://github.com/Raku/whateverable/search?q=master

[17:22] <AlexDaniel> I'll try to unstuck the repository

[17:25] <lizmat> you need to activate it with "use experimental :rakuast"

[17:25] <AlexDaniel> a ok then

[17:25] <lizmat> and the new Raku grammar only passes about 50% of spectests

[17:25] <AlexDaniel> c: HEAD say 42

[17:25] <committable6> AlexDaniel, ¦HEAD(886a00d): «42␤»

[17:25] <AlexDaniel> m: say 42

[17:25] <camelia> rakudo-moar 886a00d1c: OUTPUT: «42␤»

[17:25] <lizmat> that looks ok now  :-)

[17:25] <AlexDaniel> ok that was easier than I thought. Just removed the repos and let whateverable to clone them again

[17:26] <AlexDaniel> and it didn't need to build all the commits since 2022.12 because it keeps building commits on all branches anyway, even if it's not the main branch

[17:28] <[Coke]> AlexDaniel++

[17:41] <ab5tract> nine: Could the issue be that typename in Actions isn't attaching a RakuAST::Type::Subset?

[17:43] <ab5tract> unlike all the other type options, there is nothing from syntactically that we can use to distinguish whether the parameter type is a subset

[17:44] <ab5tract> eg, it checks for colonpairs and then creates types that care about definedness, coercive when there is $<accept>, etc

[17:46] <nine> But you already verified that Subset's PERFORM-BEGIN gets called even for a parameter, didn't you?

[17:47] <nine> Ah, wait, that made no sense. Declaration vs. use

[17:47] <ab5tract> right, was just realizing that

[17:47] <nine> When the name is resolved, you know that you got a Subset type

[17:47] <ab5tract> the where block definitely doesn't get called for parameter

[17:48] <ab5tract> Do you mean nominal types won't resolve? Or am I misunderstanding you

[17:49] <ab5tract> ie, are you proposing a way to know whether to create a Subset vs creating a Simple?

[17:54] <nine> subset Foo where * == 5; sub foo(Foo $i) { }

[17:56] <nine> When we parse the definition of foo, we encounter parameter $i and its type. We then resolve the name "Foo" and get a RakuAST::Term::Name that is resolved to the RakuAST::Type::Subset

[17:57] <nine> I.e. in RakuAST::Parameter $!type.resolution gives you that Subset node. And $!type.meta-object gives you a SubsetHOW object

[18:00] <nine> In RakuAST::Parameter::IMPL-TO-QAST we already check whether a type is archetype definite or archetype generic. Maybe we need to be even smarter there

[18:00] *** reportable6 left
[18:00] *** evalable6 left
[18:01] *** evalable6 joined
[18:03] *** reportable6 joined
[18:16] *** AlexDaniel left
[18:16] <nine> ab5tract: in the old frontend I see something about nominalizable types getting pushed as post constraint on parameters

[18:17] <nine> src/Perl6/Actions.nqp:5956

[18:18] <nine> And in :10073 we generate an ACCEPTS call for each post constraint that isn't just a literal

[18:19] <nine> While in the current RakuAST implementation only $!where gets that treatment

[18:40] <Geth> ¦ rakudo/main: 97ecc4d713 | (Elizabeth Mattijsen)++ | 5 files

[18:40] <Geth> ¦ rakudo/main: RakuAST: further refine handling of nqp::ops

[18:40] <Geth> ¦ rakudo/main: 

[18:40] <Geth> ¦ rakudo/main: - Classes should inherit from RakuAST::Expression

[18:40] <Geth> ¦ rakudo/main: - Allow passing of List or RakuAST::ArgList as only argument

[18:40] <Geth> ¦ rakudo/main: - Convert Str|Int args on the fly to Str|IntLiteral

[18:40] <Geth> ¦ rakudo/main: - Remove unneeded methods now that we inherit from RakuAST::Expression

[18:40] <Geth> ¦ rakudo/main: - Add more tests

[18:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/97ecc4d713

[18:40] <lizmat> brings us to 128/140 for make test

[18:46] <nine> Oooh...which one did it fix?

[18:46] <nine> By now there are so few failing ones that I know them by name :)

[18:46] <lizmat> not sure, actually...   do you want me to figure out?

[18:46] <nine> Only if you're curious, too

[18:46] <lizmat> not really  :-)

[18:47] <lizmat> not enough

[18:49] <discord-raku-bot> <Nemokosch> I am 🙊

[18:49] <lizmat> then go back one commit, run the tests and remember the files that passed and see what the difference is

[18:50] <discord-raku-bot> <Nemokosch> Okay, also not enough, to be honest xd

[18:52] <ab5tract> nine: trying that now

[19:10] <lizmat> nine: considering creating classes for pragmas, isms and repository (aka "use lib")

[19:10] <lizmat> and plugging those in at the right place, eventually in the grammar

[19:10] <lizmat> opinions?

[19:11] <Geth> ¦ rakudo: usev6++ created pull request #5179: Fix test description for unknown modifier

[19:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5179

[19:14] <Geth> ¦ rakudo/main: 69f1aa1f4f | (Christian Bartolomäus)++ (committed using GitHub Web editor) | t/02-rakudo/14-revisions.t

[19:14] <Geth> ¦ rakudo/main: Fix test description for unknown modifier (#5179)

[19:14] <Geth> ¦ rakudo/main: 

[19:14] <Geth> ¦ rakudo/main: It looks like the test description has been copied from the previous

[19:14] <Geth> ¦ rakudo/main: sub-test in commit 3f25ba9212 (which added these tests).

[19:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/69f1aa1f4f

[19:15] <Geth> ¦ rakudo/main: c88f50d5e8 | (Christian Bartolomäus)++ | 2 files

[19:15] <Geth> ¦ rakudo/main: [JVM] Fix breakage with "use v6.e.PREVIEW"

[19:15] <Geth> ¦ rakudo/main: 

[19:15] <Geth> ¦ rakudo/main: After a recent rework of language versioning (merge commit a815b5ca12)

[19:15] <Geth> ¦ rakudo/main: the JVM backend started to throw an error when it encountered

[19:15] <Geth> ¦ rakudo/main: 

[19:15] <Geth> ¦ rakudo/main:   use v6.e.PREVIEW;

[19:15] <Geth> ¦ rakudo/main: 

[19:15] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>

[19:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c88f50d5e8

[19:41] <Geth> ¦ rakudo/complex-sign: 8bd5eef1db | (Will Coleda)++ | 2 files

[19:41] <Geth> ¦ rakudo/complex-sign: Add Complex.sign to v6.e

[19:41] <Geth> ¦ rakudo/complex-sign: review: https://github.com/rakudo/rakudo/commit/8bd5eef1db

[19:41] <Geth> ¦ rakudo: coke++ created pull request #5181: Add Complex.sign to v6.e

[19:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5181

[19:51] <Geth> ¦ rakudo/main: 37f5259958 | (Elizabeth Mattijsen)++ | 2 files

[19:51] <Geth> ¦ rakudo/main: RakuAST: add deparsing for Statement::No

[19:51] <Geth> ¦ rakudo/main: 

[19:51] <Geth> ¦ rakudo/main: And some tests

[19:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/37f5259958

[19:52] <discord-raku-bot> <Nemokosch> it's great to see [Coke] around with code as well 🙂

[21:00] *** raschip left
[21:27] *** NemokoschKiwi joined
[21:27] <ab5tract> nine: I've got parameters working with subset types. But it throws a different exception than what we would expect: 'Internal error: inconsistent bind result'

[21:52] <ab5tract> WhateverCodes still not loving it

[21:59] *** ab5tract left
[22:11] *** sena_kun left
[22:32] *** NemokoschKiwi left
[23:00] *** ab5tract joined
[23:09] *** shmup joined
[23:11] <nine> lizmat: not sure it's worth it. But then I said the same about Stubs and you proved me wrong :)

[23:12] <nine> ab5tract: inconsistent bind result appears when meta data (i.e. the Signature object) suggests a bind will be successful, but when we do the call, the parameter check fails

[23:15] <discord-raku-bot> <Nemokosch> fyi I'm working on a fix for the map store breakage; for now it will probably be a quick-and-dirty solution, like moving the method declaration to Map might be enough

[23:16] <discord-raku-bot> <Nemokosch> it would be good have systematic test cases for all possible storage scenarios which, if I can count, matches the nick of our beloved RakuAST expert

[23:17] <nine> .oO(how many cases are a jnthn full?)

[23:18] <discord-raku-bot> <Nemokosch> 🤣

[23:20] <discord-raku-bot> <Nemokosch> tbh it could be organized into not more than three individual tests probably

[23:20] <nine> ab5tract: so if I understood you correctly, it accepts an acceptable argument and refuses an unacceptable one but when refusing does so with an inconsistent bind result. Then the Parameter meta-object needs adjusting so it's clear the bind will not be successful.

[23:20] <discord-raku-bot> <Nemokosch> storing a list with a Map, a Hash and a Hash::Object into a) a Map b) a Hash c) a Hash::Object

[23:26] <ab5tract> nine: You've got it right. I was just coming to the realization and (hopefully a fix) right now

[23:29] <ab5tract> \o/

[23:39] <discord-raku-bot> <Nemokosch> [0] > my %map is Map = :foo Map.new((foo => True)) [1] > my %hash = :bar {bar => True} [2] > my %hash-object{Any} = :baz {baz => True} [3] > (%map, %hash, %hash-object).hash {bar => True, baz => True, foo => True}

[23:39] <discord-raku-bot> <Nemokosch> hm, seems about right

[23:45] <ab5tract> one more subtest is successful

[23:56] *** epony left
