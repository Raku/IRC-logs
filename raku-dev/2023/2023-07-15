[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:59] <Geth> ¬¶ rakudo: vrurg++ created pull request #5314: Implement methods `andthen` and `orelse` on Promise

[01:59] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/5314

[02:00] <Geth> ¬¶ roast: vrurg++ created pull request #836: Add tests for Promise new `andthen` and `orelse` methods

[02:00] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/pull/836

[02:21] *** squashable6 left
[02:24] *** squashable6 joined
[03:24] *** evalable6 left
[03:24] *** linkable6 left
[03:26] *** linkable6 joined
[03:26] *** evalable6 joined
[05:42] *** evalable6 left
[05:42] *** quotable6 left
[05:42] *** reportable6 left
[05:42] *** linkable6 left
[05:42] *** shareable6 left
[05:42] *** coverable6 left
[05:42] *** greppable6 left
[05:42] *** bisectable6 left
[05:42] *** squashable6 left
[05:42] *** benchable6 left
[05:42] *** tellable6 left
[05:42] *** bloatable6 left
[05:42] *** nativecallable6 left
[05:42] *** sourceable6 left
[05:42] *** statisfiable6 left
[05:42] *** releasable6 left
[05:42] *** unicodable6 left
[05:42] *** notable6 left
[05:42] *** committable6 left
[05:42] *** benchable6 joined
[05:42] *** releasable6 joined
[05:42] *** committable6 joined
[05:42] *** greppable6 joined
[05:42] *** statisfiable6 joined
[05:43] *** tellable6 joined
[05:43] *** bloatable6 joined
[05:43] *** coverable6 joined
[05:43] *** notable6 joined
[05:43] *** unicodable6 joined
[05:44] *** squashable6 joined
[05:44] *** sourceable6 joined
[05:44] *** linkable6 joined
[05:44] *** shareable6 joined
[05:44] *** reportable6 joined
[05:44] *** bisectable6 joined
[05:44] *** quotable6 joined
[05:45] *** nativecallable6 joined
[05:45] *** evalable6 joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[07:12] *** committable6 left
[07:12] *** tellable6 left
[07:12] *** greppable6 left
[07:12] *** notable6 left
[07:12] *** unicodable6 left
[07:12] *** statisfiable6 left
[07:12] *** evalable6 left
[07:12] *** releasable6 left
[07:12] *** reportable6 left
[07:12] *** nativecallable6 left
[07:12] *** quotable6 left
[07:12] *** bloatable6 left
[07:12] *** linkable6 left
[07:12] *** benchable6 left
[07:12] *** bisectable6 left
[07:12] *** shareable6 left
[07:12] *** coverable6 left
[07:12] *** sourceable6 left
[07:12] *** squashable6 left
[07:12] *** greppable6 joined
[07:13] *** shareable6 joined
[07:13] *** squashable6 joined
[07:13] *** unicodable6 joined
[07:13] *** nativecallable6 joined
[07:13] *** statisfiable6 joined
[07:13] *** evalable6 joined
[07:13] *** sourceable6 joined
[07:13] *** bloatable6 joined
[07:13] *** coverable6 joined
[07:13] *** linkable6 joined
[07:14] *** notable6 joined
[07:14] *** quotable6 joined
[07:14] *** reportable6 joined
[07:14] *** bisectable6 joined
[07:14] *** tellable6 joined
[07:15] *** benchable6 joined
[07:15] *** releasable6 joined
[07:15] *** committable6 joined
[08:29] *** sena_kun joined
[08:36] <[Tux]> Rakudo v2023.06-98-g34a1a5da5 (v6.d) on MoarVM 2023.06-1-g63af27399

[08:36] <[Tux]> csv-test-xs-20      0.395 -  0.512

[08:36] <[Tux]> test-t --race       0.858 -  0.867

[08:36] <[Tux]> csv-ip5xs           0.836 -  0.915

[08:36] <[Tux]> test-t              1.400 -  1.401

[08:36] <[Tux]> csv-parser          3.714 -  3.793

[08:36] <[Tux]> csv-ip5xs-20        5.190 -  5.403

[08:36] <[Tux]> test-t-20 --race    6.246 -  6.784

[08:36] <[Tux]> test                6.739 -  7.559

[08:36] <[Tux]> test-t-20          20.799 - 20.937

[08:47] *** ab5tract joined
[08:58] <ab5tract> I've found a nightmare of a bug in the REPL: https://gist.github.com/ab5tract/bb094655f1829de2906759d83e54264f

[09:00] <ab5tract> tested on linux/x64 and macos/arm64, present in 2023.06 and at least as far back as 2022.12

[09:01] <ab5tract> this is the kind of heartbreaker bug that makes me hesitate about loving and using this language as much as I do :/

[09:14] <ab5tract> tl;dr -- @foo.map: ( ... } only iterates 102 times in the REPL if it is the last statement on an input line

[09:21] <lizmat> ab5tract: and what is the error ?

[09:22] <lizmat> if it doesn't get reported, it doesn't get fixed

[09:22] <ab5tract> @foo is 103 elemets

[09:22] <ab5tract> it only iterates 102 of them

[09:24] <lizmat> Ah. I think I see wht

[09:24] <lizmat> *why

[09:24] <lizmat> it's because .gist will limit the number of iterations

[09:25] <lizmat> @foo.map({...}).sink

[09:26] <lizmat> if you're doing just @foo.map()

[09:26] <ab5tract> the behavior isn't replicated by `do for @foo`

[09:26] <ab5tract> lizmat: that's unacceptable

[09:26] <lizmat> what is unacceptable?

[09:26] <ab5tract> having to call .sink

[09:27] <ab5tract> (imo, of course)

[09:27] <lizmat> in your example, it's the output generation of the result (a .Seq) that causes the map to run

[09:28] <lizmat> tryt doing:

[09:28] <ab5tract> a user should never have to know about some limit of gist, or of sinking their map calls.

[09:28] <lizmat> say "foo"; @foo.map({ .print }

[09:28] <lizmat> and you'll see that nothing happens apart for the "foo"

[09:28] <ab5tract> @foo.map: { say $++ } 

[09:28] <lizmat> that's because the REPL in that case sees that STDOUT has changed and assumes that that's what you wanted

[09:29] <discord-raku-bot> <nemokosch> is this even REPL specific?

[09:29] <lizmat> this is VERY REPL specific

[09:29] <lizmat> @foo.map: { say $++ }

[09:29] <lizmat> does *not* create any output *until* it starts running the map

[09:30] <discord-raku-bot> <nemokosch> I mean a Seq can always be lazy

[09:30] <lizmat> and it is

[09:30] <lizmat> that's why

[09:30] <discord-raku-bot> <nemokosch> then I don't see the problem, honestly

[09:30] <lizmat> say "foo"; @foo.map({ .print }

[09:30] <lizmat> will only say "foo" and nothing else

[09:30] <lizmat> because that caused output *BEFORE* the Seq is returned

[09:31] <lizmat> ab5tract: do you understand what I'm trying to say?

[09:32] <ab5tract> not exactly, no. because if I remove that `say`, then I get 102 iterations of @foo.map: { .print }

[09:32] <discord-raku-bot> <nemokosch> mutating shared state with lazy "loops" is next to eval... I mean evil üòÑ

[09:33] <lizmat> ab5tract: what do you think a "@foo.map(...)" returns?

[09:33] <ab5tract> it returns a Seq, if I'm not mistaken

[09:33] <lizmat> indeed...   

[09:34] <lizmat> m: my $a := (^10).map({ .say })

[09:34] <camelia> rakudo-moar 34a1a5da5: ( no output )

[09:34] <lizmat> see how that doesn't generate any output ?

[09:34] <ab5tract> m: (do for ^10).WHAT.say

[09:34] <camelia> rakudo-moar 34a1a5da5: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> (do for ^10‚èè).WHAT.say‚ê§    expecting any of:‚ê§        block or pointy block‚ê§¬ª

[09:34] <ab5tract> m: (do for ^10 { $_ }).WHAT.say

[09:34] <camelia> rakudo-moar 34a1a5da5: OUTPUT: ¬´(List)‚ê§¬ª

[09:35] <ab5tract> so that explains the distinction

[09:35] <lizmat> indeed

[09:35] <ab5tract> I still think this is a really awkward corner of things

[09:35] <lizmat> m: my $a := (^10).map({ .say }); say $a.gist

[09:35] <camelia> rakudo-moar 34a1a5da5: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§(True True True True True True True True True True)‚ê§¬ª

[09:35] <lizmat> note that the generation of the .gist now causes the .map to run

[09:35] <discord-raku-bot> <nemokosch> the True's are the return value of say, for the record

[09:35] <lizmat> yup

[09:36] <discord-raku-bot> <nemokosch> and iirc gist itself would hit an upper limit of how many values it is willing to fetch

[09:36] <lizmat> and .gist is limited to showing 100 entries... to figure out there are more, apparently it runs to 102

[09:36] <discord-raku-bot> <nemokosch> after all, it's just a "readable representation"

[09:36] <lizmat> right

[09:38] <lizmat> ab5tract: try running the repl with RAKU_REPL_OUTPUT_METHOD=Str set

[09:38] <discord-raku-bot> <nemokosch> this is no easy topic because it can make a difference if the underlying iterator itself is marked "lazy", in which case a gist won't fetch a single value

[09:39] <discord-raku-bot> <nemokosch> but at the end of the day, mutating a shared variable in a map call is probably something you should stay away from

[09:40] <ab5tract> lizmat: I don't see a change

[09:40] <ab5tract> nemokosch: that's not written in stone anywhere. It's a rule I happen to live by in codebases

[09:40] <ab5tract> repls are different beasts

[09:41] <ab5tract> and even then, it should be a cosmetic choice to stick to "no side effects in maps"

[09:41] <discord-raku-bot> <nemokosch> but fundamentally, as you can see, the REPL does no magic here, so the bad idea doesn't magically turn into a good idea

[09:42] <ab5tract> The REPL is doing magic here. This bug doesn't affect regular code

[09:43] <discord-raku-bot> <nemokosch> all it does is to call "say" or something akin

[09:43] <lizmat> say $value."$method"()

[09:43] <lizmat> to be precise, with $method being set to "gist" by default

[09:45] <lizmat> see also: https://github.com/Raku/problem-solving/issues/194

[09:46] <lizmat> and: https://github.com/rakudo/rakudo/commit/285717a0d36d69f2aaae84d7677820f0cb8a3d67

[09:47] <ab5tract> switching to Str didn't change the behavior

[09:47] <ab5tract> nor to raku

[09:48] <ab5tract> anyway, I guess this is considered not a bug but I find it both surprising and LTA

[09:50] <discord-raku-bot> <nemokosch> well, whether you like it or not - do you recognize that it is consistent?

[09:51] <discord-raku-bot> <nemokosch> btw the one with .raku should have "worked" probably, as that fetches all the elements

[09:52] <ab5tract> damnit

[09:52] <ab5tract> off by one :)

[09:52] <ab5tract> yeah, it works

[09:53] <ab5tract> Str as well

[09:53] <ab5tract> now, neither of those are really options for the use case this surfaced in ... which was analyzing 700_000 events

[09:55] <discord-raku-bot> <nemokosch> it's borderline questionable why you use the "read eval print loop" if what you get back is not worth printing üòõ

[09:55] <ab5tract> I'll just have to remember to sink any map calls like that in the future, or just stick to for

[09:56] <discord-raku-bot> <nemokosch> but then there was the sink way

[09:56] <discord-raku-bot> <nemokosch> or I suppose the eager way as well

[09:56] <discord-raku-bot> <nemokosch> eager @a.map: { $x++ };

[09:58] <ab5tract> regarding why use a REPL for analyzing such a large number of events, it costs a lot of time to load those events in Raku

[09:58] <ab5tract> good point on the eager.. lots of ways out of the issue

[10:00] <ab5tract> lizmat: tangential but related (because same outage), was it a conscious choice to avoid bagging alike hashes in a BagHash?

[10:00] <ab5tract> It's similar situation as above, where DWIM is in the eye of the beholder but...

[10:00] <lizmat> ab5tract: why would you use the REPL to check 700K events ?

[10:01] <lizmat> oops...  ok

[10:01] <lizmat> ab5tract: hashes are not value types, you can only bag value types in a sensible way

[10:02] <ab5tract> fair enough

[10:02] <lizmat> and neither are maps, sadly:

[10:02] <lizmat> m: dd ().Map.WHICH

[10:02] <camelia> rakudo-moar 34a1a5da5: OUTPUT: ¬´ObjAt.new("Map|3555763753664")‚ê§¬ª

[10:02] <ab5tract> how do object hashes work again?

[10:03] <lizmat> the same as QuantHashes: they use the .WHICH as the key

[10:03] <ab5tract> it makes sense, but its a shame

[10:04] <lizmat> are the values in the hash numeric ?

[10:04] <ab5tract> because I can't think of an easy way to check for duplicate events in that haystack of events

[10:05] <lizmat> ab5tract: also, I don't understand the "it costs a lot of time to load those events in Raku" comment

[10:05] <ab5tract> nope, just plain old un-schema'd hashes that happen to generally follow each other

[10:06] <discord-raku-bot> <nemokosch> for Maps not being a value type: the values can be containers, just like with List

[10:06] <ab5tract> lizmat: you don't see the difference between loading 700k events into memory once to then run analysis on, versus loading them each run

[10:06] <ab5tract> ?

[10:06] <discord-raku-bot> <nemokosch> and just like with Pair, actually, which is kind of important but I guess y'all already know that

[10:07] <ab5tract> we are talking 5+ minutes on a from-json call

[10:07] <lizmat> ab5tract: ah, I see

[10:07] <lizmat> perhaps you could do:

[10:07] <ab5tract> not even sure how much faster it would be if the output was .raku and I eval'd it

[10:07] <lizmat> @foo.map(*.raku).Bag ?

[10:08] <lizmat> .raku on hashes *does* sort the keys, so should be reproducible

[10:08] <ab5tract> lizmat: yeah, I thought about that, but I don't think .raku has any guarantees for key order in the output (as it shouldn't)

[10:09] <ab5tract> whereas %a ~~ %b does seem to do the full-depth comparison

[10:09] <lizmat> .raku *does* sort keys

[10:09] <ab5tract> oh! TIL

[10:10] <lizmat> reason: it's often used as a debug tool, and then it makes a lot of sense  :-)

[10:10] <lizmat> ab5tract: also, do you have control of the JSON generation?

[10:11] <lizmat> if so, then maybe https://raku.land/zef:lizmat/JSON::Fast::Hyper might be something for you

[10:13] <ab5tract> that's interesting indeed

[10:13] <ab5tract> unfortunately not in this case

[10:13] <lizmat> well, you could run it through a from-json -> to-json sequence once

[10:14] <lizmat> and have faster loadable JSON afterwards

[10:14] <lizmat> assuming the top level is a positional, which from your questions, I assumed

[10:14] <ab5tract> yeah, that's the case.

[10:15] <ab5tract> now I'm curious about what a bare EVAL against a .raku of that top level positional would be like

[10:15] <ab5tract> in terms of time

[10:16] <lizmat> I doubt it's going to be a big difference

[10:16] <lizmat> and probably slower I'd thnk

[10:21] <ab5tract> well that's kind of a bummer. especially since we have deprecated to-json and from-json in core (I'd prefer to see heavily optimized core versions of those)

[10:21] <lizmat> ab5tract: also, https://docs.raku.org/routine/repl might be of interest for you

[10:22] <ab5tract> thanks for that! I *thought* there was something like that available, but I thought it was in the ecosystem

[10:24] <discord-raku-bot> <nemokosch> I don't know why it was pushed out of core but JSON::Fast has an implementation that really looks like that

[10:26] <lizmat> yeah, technically, they're mostly identical

[10:29] <ab5tract> any recollections why we decided to deprecate? because having excellent json wrangling skills today might be akin to having excellent text wrangling skills back in the day

[10:29] <ab5tract> s/skills/capabilities/g

[10:32] <lizmat> I think the main reason was to be able to get a better JSON parser without needing to update / upgrade Rakudo

[10:32] <lizmat> FWIW, I wouldn't be against making JSON::Fast part of the core

[10:32] <lizmat> and I don't think I ever was... 

[10:33] <ab5tract> :)

[10:34] <ab5tract> it seems to me that the way things work right now demonstrate that you can both have core implementations as well as swappable parsers to replace those implementations

[10:35] <ab5tract> so maybe that concern could be considered alleviated at this point

[10:37] <ab5tract> but maybe I'm missing something.. wouldn't be the first time ;)

[11:59] *** squashable6 left
[12:00] *** reportable6 left
[12:02] *** squashable6 joined
[12:02] *** reportable6 joined
[12:31] *** squashable6 left
[12:33] *** squashable6 joined
[13:29] *** ab5tract left
[15:20] *** jgaz left
[16:13] *** ab5tract joined
[16:33] *** ab5tract left
[16:46] *** jgaz joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[19:09] <gfldex> Was alias infix:<‚âÖ> for infix:<=~=> omitted intentionally?

[19:36] <lizmat> m: say 4 ‚âÖ 4

[19:36] <camelia> rakudo-moar 34a1a5da5: OUTPUT: ¬´True‚ê§¬ª

[19:36] <lizmat> it wasn't ?

[19:36] <lizmat> gfldex: ^^

[19:36] <lizmat> afk&

[19:38] <lizmat> m: say 4 ‚âÖ 4.000000000000001

[19:38] <camelia> rakudo-moar 34a1a5da5: OUTPUT: ¬´True‚ê§¬ª

[19:38] <lizmat> really afk&

[19:41] <gfldex> ENODOC then

[19:41] <gfldex> m: my $a ‚âî 42;

[19:41] <camelia> rakudo-moar 34a1a5da5: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> my $a‚èè ‚âî 42;‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement modifier‚ê§        statement modifier ‚Ä¶¬ª

[19:41] <gfldex> How about that one?

[20:34] *** sena_kun left
[21:48] *** nativecallable6 left
[21:48] *** bisectable6 left
[21:48] *** quotable6 left
[21:48] *** tellable6 left
[21:48] *** notable6 left
[21:48] *** statisfiable6 left
[21:48] *** bloatable6 left
[21:48] *** evalable6 left
[21:48] *** benchable6 left
[21:48] *** committable6 left
[21:48] *** shareable6 left
[21:48] *** releasable6 left
[21:48] *** unicodable6 left
[21:48] *** sourceable6 left
[21:48] *** squashable6 left
[21:48] *** coverable6 left
[21:48] *** reportable6 left
[21:48] *** greppable6 left
[21:48] *** linkable6 left
[21:48] *** benchable6 joined
[21:49] *** tellable6 joined
[21:49] *** linkable6 joined
[21:49] *** squashable6 joined
[21:49] *** nativecallable6 joined
[21:49] *** reportable6 joined
[21:49] *** statisfiable6 joined
[21:49] *** unicodable6 joined
[21:49] *** coverable6 joined
[21:49] *** quotable6 joined
[21:49] *** releasable6 joined
[21:49] *** notable6 joined
[21:50] *** committable6 joined
[21:50] *** bisectable6 joined
[21:51] *** sourceable6 joined
[21:51] *** greppable6 joined
[21:51] *** evalable6 joined
[21:51] *** bloatable6 joined
[21:51] *** shareable6 joined
[22:51] *** reportable6 left
[22:51] *** nativecallable6 left
[22:51] *** committable6 left
[22:51] *** benchable6 left
[22:51] *** greppable6 left
[22:51] *** squashable6 left
[22:51] *** notable6 left
[22:51] *** coverable6 left
[22:51] *** shareable6 left
[22:51] *** bisectable6 left
[22:51] *** quotable6 left
[22:51] *** statisfiable6 left
[22:51] *** linkable6 left
[22:51] *** bloatable6 left
[22:51] *** evalable6 left
[22:51] *** unicodable6 left
[22:51] *** sourceable6 left
[22:51] *** tellable6 left
[22:51] *** releasable6 left
[22:51] *** benchable6 joined
[22:51] *** reportable6 joined
[22:52] *** squashable6 joined
[22:52] *** evalable6 joined
[22:52] *** quotable6 joined
[22:52] *** notable6 joined
[22:53] *** bisectable6 joined
[22:53] *** coverable6 joined
[22:53] *** releasable6 joined
[22:53] *** greppable6 joined
[22:53] *** nativecallable6 joined
[22:54] *** unicodable6 joined
[22:54] *** committable6 joined
[22:54] *** tellable6 joined
[22:54] *** statisfiable6 joined
[22:54] *** linkable6 joined
[22:54] *** sourceable6 joined
[22:54] *** bloatable6 joined
[22:54] *** shareable6 joined
