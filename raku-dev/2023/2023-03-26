[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:04] <vrurg> Read above what Coke tries to achieve.

[01:00] *** linkable6 left
[01:00] *** evalable6 left
[01:01] *** linkable6 joined
[01:01] *** evalable6 joined
[03:50] *** reportable6 left
[03:50] *** releasable6 left
[03:50] *** squashable6 left
[03:50] *** greppable6 left
[03:50] *** unicodable6 left
[03:50] *** committable6 left
[03:50] *** statisfiable6 left
[03:50] *** linkable6 left
[03:50] *** benchable6 left
[03:50] *** sourceable6 left
[03:50] *** tellable6 left
[03:50] *** nativecallable6 left
[03:50] *** coverable6 left
[03:50] *** bisectable6 left
[03:50] *** bloatable6 left
[03:50] *** quotable6 left
[03:50] *** evalable6 left
[03:50] *** notable6 left
[03:50] *** shareable6 left
[03:51] *** notable6 joined
[03:51] *** evalable6 joined
[03:51] *** coverable6 joined
[03:51] *** benchable6 joined
[03:51] *** shareable6 joined
[03:52] *** tellable6 joined
[03:52] *** statisfiable6 joined
[03:52] *** quotable6 joined
[03:52] *** linkable6 joined
[03:52] *** bloatable6 joined
[03:52] *** reportable6 joined
[03:52] *** greppable6 joined
[03:52] *** releasable6 joined
[03:52] *** sourceable6 joined
[03:53] *** nativecallable6 joined
[03:53] *** bisectable6 joined
[03:53] *** unicodable6 joined
[03:53] *** squashable6 joined
[03:53] *** committable6 joined
[04:53] *** quotable6 left
[04:53] *** squashable6 left
[04:53] *** statisfiable6 left
[04:53] *** sourceable6 left
[04:53] *** greppable6 left
[04:53] *** coverable6 left
[04:53] *** bloatable6 left
[04:53] *** nativecallable6 left
[04:53] *** benchable6 left
[04:53] *** tellable6 left
[04:53] *** committable6 left
[04:53] *** linkable6 left
[04:53] *** evalable6 left
[04:53] *** shareable6 left
[04:53] *** notable6 left
[04:53] *** releasable6 left
[04:54] *** statisfiable6 joined
[04:54] *** committable6 joined
[04:54] *** shareable6 joined
[04:54] *** squashable6 joined
[04:54] *** sourceable6 joined
[04:55] *** coverable6 joined
[04:55] *** greppable6 joined
[04:55] *** tellable6 joined
[04:55] *** notable6 joined
[04:55] *** quotable6 joined
[04:56] *** releasable6 joined
[04:56] *** bloatable6 joined
[04:56] *** linkable6 joined
[04:56] *** benchable6 joined
[04:56] *** nativecallable6 joined
[04:56] *** evalable6 joined
[05:56] *** squashable6 left
[05:56] *** benchable6 left
[05:56] *** bloatable6 left
[05:56] *** greppable6 left
[05:56] *** linkable6 left
[05:56] *** committable6 left
[05:56] *** coverable6 left
[05:56] *** evalable6 left
[05:56] *** reportable6 left
[05:56] *** unicodable6 left
[05:56] *** notable6 left
[05:56] *** nativecallable6 left
[05:56] *** shareable6 left
[05:56] *** statisfiable6 left
[05:56] *** quotable6 left
[05:56] *** releasable6 left
[05:56] *** sourceable6 left
[05:56] *** tellable6 left
[05:57] *** linkable6 joined
[05:57] *** statisfiable6 joined
[05:58] *** nativecallable6 joined
[05:58] *** releasable6 joined
[05:58] *** evalable6 joined
[05:58] *** shareable6 joined
[05:58] *** notable6 joined
[05:58] *** bloatable6 joined
[05:58] *** greppable6 joined
[05:58] *** benchable6 joined
[05:58] *** quotable6 joined
[05:58] *** sourceable6 joined
[05:59] *** reportable6 joined
[05:59] *** tellable6 joined
[05:59] *** committable6 joined
[05:59] *** unicodable6 joined
[05:59] *** coverable6 joined
[06:00] *** squashable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:53] *** nativecallable6 left
[07:53] *** coverable6 left
[07:53] *** evalable6 left
[07:53] *** committable6 left
[07:53] *** shareable6 left
[07:53] *** notable6 left
[07:53] *** greppable6 left
[07:53] *** quotable6 left
[07:53] *** releasable6 left
[07:53] *** squashable6 left
[07:53] *** bisectable6 left
[07:53] *** tellable6 left
[07:53] *** unicodable6 left
[07:53] *** bloatable6 left
[07:53] *** sourceable6 left
[07:53] *** linkable6 left
[07:53] *** statisfiable6 left
[07:53] *** benchable6 left
[07:53] *** reportable6 left
[07:53] *** reportable6 joined
[07:53] *** benchable6 joined
[07:53] *** coverable6 joined
[07:53] *** statisfiable6 joined
[07:54] *** notable6 joined
[07:54] *** linkable6 joined
[07:55] *** squashable6 joined
[07:55] *** nativecallable6 joined
[07:55] *** shareable6 joined
[07:55] *** bisectable6 joined
[07:55] *** committable6 joined
[07:55] *** tellable6 joined
[07:55] *** releasable6 joined
[07:55] *** quotable6 joined
[07:56] *** sourceable6 joined
[07:56] *** greppable6 joined
[07:56] *** unicodable6 joined
[07:56] *** evalable6 joined
[07:56] *** bloatable6 joined
[09:05] <nine> I'd say just load CORE.c setting. After all what's the cost? We are slightly inefficient when throwing an error and exiting.

[09:06] *** sena_kun joined
[11:43] <Geth> ¦ rakudo/main: 0a79b6a95b | (Elizabeth Mattijsen)++ | src/Raku/ast/variable-access.rakumod

[11:43] <Geth> ¦ rakudo/main: RakuAST: another step closer to making "no strict" work

[11:43] <Geth> ¦ rakudo/main: 

[11:43] <Geth> ¦ rakudo/main: This generates the correct QAST for auto-declared variables.  But to

[11:43] <Geth> ¦ rakudo/main: prevent the QAST to generate this for every occurrence of an auto-

[11:43] <Geth> ¦ rakudo/main: declared variable, it needs to mark it as declared.

[11:43] <Geth> ¦ rakudo/main: 

[11:43] <Geth> ¦ rakudo/main: The resolver has a "declare-lexical" method to do just that.  But only

[11:43] <Geth> ¦ rakudo/main: if the resolver is not in "batch" mode.  And so far it always seems to

[11:43] <Geth> ¦ rakudo/main: be.  Even if the declaration is happening on a CHECK-BEGIN method.  So

[11:43] <Geth> ¦ rakudo/main: I'm unclear on how to proceed, and am hoping nine will be able to produce

[11:43] <Geth> ¦ rakudo/main: some clarity.

[11:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0a79b6a95b

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:37] <Geth> ¦ roast: aa7f34bc59 | (Elizabeth Mattijsen)++ | S05-metasyntax/interpolating-closure.t

[12:37] <Geth> ¦ roast: Remove worries

[12:37] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/aa7f34bc59

[13:15] <nine> lizmat: to be properly handled RakuAST::Var::Lexical::Auto should be a RakuAST::Declaration. But that still wouldn't be right for every access but the first. So why not generate a RakuAST::VarDeclaration::Simple for the first access and a plain RakuAST::Var::Lexical for subsequent accesses?

[13:16] <lizmat> but how to determine what the first access is ?

[13:16] <lizmat> in a given scope ?

[13:18] <Geth> ¦ rakudo/main: b50422489e | (Elizabeth Mattijsen)++ | 3 files

[13:18] <Geth> ¦ rakudo/main: RakuAST: add test for RakuAST::Regex::Assertion::Callable

[13:18] <Geth> ¦ rakudo/main: 

[13:18] <Geth> ¦ rakudo/main: And fix/refine its deparsing

[13:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b50422489e

[13:22] <nine> lizmat: that's declare-lexical and find-lexical again

[13:22] <lizmat> but they need a resolver?

[13:22] <lizmat> Ah, you mean in the action do a resolver action?

[13:24] <lizmat> nine: BTW,is there a difference between $*R.foo and self.r.foo ?

[13:25] <lizmat> ah, yes, duh, sorry for the noise

[13:25] <nine> Yes, this needs to be done in Actions.

[13:27] *** linkable6 left
[13:27] *** evalable6 left
[13:29] *** evalable6 joined
[13:29] *** linkable6 joined
[14:15] <Geth> ¦ rakudo/main: 238931ac82 | (Elizabeth Mattijsen)++ | 5 files

[14:15] <Geth> ¦ rakudo/main: RakuAST: make "no strict" work in the  Raku grammar

[14:15] <Geth> ¦ rakudo/main: 

[14:15] <Geth> ¦ rakudo/main: - Remove class RakuAST::Var::Lexical::Auto

[14:15] <Geth> ¦ rakudo/main: - Add class RakuAST::VarDeclaration::Auto

[14:16] <Geth> ¦ rakudo/main:   This is for all intents and purposes, the same as the

[14:16] <Geth> ¦ rakudo/main:   RakuAST::VarDeclaration::Simple class, but it deparses and rakufies

[14:16] <Geth> ¦ rakudo/main:   as a RakuAST::Var::Lexical.

[14:16] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[14:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/238931ac82

[14:39] *** linkable6 left
[14:39] *** evalable6 left
[14:40] *** evalable6 joined
[14:41] *** linkable6 joined
[14:43] <Geth> ¦ roast: 8d0a9c1371 | (Elizabeth Mattijsen)++ | S05-metasyntax/interpolating-closure.t

[14:43] <Geth> ¦ roast: Revert "Remove worries"

[14:43] <Geth> ¦ roast: 

[14:43] <Geth> ¦ roast: This reverts commit aa7f34bc591b67f801ea67193158ab2a53aeea08.

[14:43] <Geth> ¦ roast: 

[14:43] <Geth> ¦ roast: For some unclear reason, this now fails **ONLY** when doing "make spectest"

[14:43] <Geth> ¦ roast: with RAKUDO_RAKUAST=1.  Not bothering to spend any further time on this

[14:43] <Geth> ¦ roast: so reverting.

[14:43] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/8d0a9c1371

[14:44] <lizmat> nine: the "no strict" test file now fails only because of missing suggestions for X::Undeclared error

[14:44] <lizmat> I assume these suggestions would need to be generated by the resolver, right ?

[14:53] <nine> I thought that logic was contained in the exception classes?

[14:56] <lizmat> nope, in the case of X::Undeclared, it's a simple attribute to be given

[14:56] <Geth> ¦ rakudo/main: d4792fdea6 | (Elizabeth Mattijsen)++ | 2 files

[14:56] <Geth> ¦ rakudo/main: RakuAST: add test for RakuAST::Var::Package

[14:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d4792fdea6

[15:47] *** japhb left
[15:55] *** japhb joined
[16:39] <[Coke]> vrurg: Sure, but there is a test to catch it for some reason.

[16:40] <[Coke]> (as to the why bother with a typed exception)

[17:43] <Geth> ¦ rakudo/rakuast-v5: 2e4d3177fc | (Will Coleda)++ | src/Raku/Grammar.nqp

[17:43] <Geth> ¦ rakudo/rakuast-v5: copy lang-version from non-AST Grammar

[17:43] <Geth> ¦ rakudo/rakuast-v5: review: https://github.com/rakudo/rakudo/commit/2e4d3177fc

[17:46] <Geth> ¦ rakudo/rakuast-v5: 18f06edc0a | (Will Coleda)++ | 2 files

[17:46] <Geth> ¦ rakudo/rakuast-v5: DRAFT: copy lang-version from non-AST Grammar

[17:46] <Geth> ¦ rakudo/rakuast-v5: 

[17:46] <Geth> ¦ rakudo/rakuast-v5: Add sample showing that throwing the exception is the problem

[17:46] <Geth> ¦ rakudo/rakuast-v5: 'use 4' is processed correctly, but use 5 dies on the exception

[17:46] <Geth> ¦ rakudo/rakuast-v5: review: https://github.com/rakudo/rakudo/commit/18f06edc0a

[17:56] <Geth> ¦ rakudo/rakuast-v5: 943255fcc6 | (Will Coleda)++ | src/Raku/Grammar.nqp

[17:56] <Geth> ¦ rakudo/rakuast-v5: failed attempt to get a resolver setup

[17:56] <Geth> ¦ rakudo/rakuast-v5: 

[17:56] <Geth> ¦ rakudo/rakuast-v5: so we can safely throw the exception

[17:56] <Geth> ¦ rakudo/rakuast-v5: review: https://github.com/rakudo/rakudo/commit/943255fcc6

[17:59] * [Coke] updated https://github.com/rakudo/rakudo/pull/5237 - getting closer, but not sure how to setup the resolver properly at this point so I can throw the typed exception.

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[19:13] *** guifa joined
[19:16] *** guifa_ left
[20:38] <Geth> ¦ rakudo/main: ba37259678 | (Elizabeth Mattijsen)++ | 3 files

[20:38] <Geth> ¦ rakudo/main: RakuAST: add deparsing/test for RakuAST::Var::Lexical::Setting

[20:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ba37259678

[20:47] <japhb> Was there some point at which current versions of zef or prove6 stopped working on older Rakudo releases?  I went to update one of my modules yesterday and found that it was failing CI tests but only on older Rakudo (such as 2022.02); latest works just fine.

[20:47] <japhb> Example of failing run: https://github.com/japhb/Text-MiscUtils/actions/runs/4521573424/jobs/7963447581

[20:48] <japhb> I went to build a local 2022.02 (and install my usual modules) to see if I could recreate the problem locally, and started to get weird errors in modules that never had problems installing.

[20:49] <lizmat> ugexe or nine might know

[20:50] <japhb> lizmat: Fair enough.

[20:53] <Geth> ¦ rakudo/rakuast-v5: 212bfd61cb | (Will Coleda)++ | src/Raku/Grammar.nqp

[20:53] <Geth> ¦ rakudo/rakuast-v5: Don't just load resolver, try to load v6.c

[20:53] <Geth> ¦ rakudo/rakuast-v5: review: https://github.com/rakudo/rakudo/commit/212bfd61cb

[20:56] <Geth> ¦ rakudo/rakuast-v5: 5932db2385 | (Will Coleda)++ | src/Raku/Grammar.nqp

[20:56] <Geth> ¦ rakudo/rakuast-v5: remove debug

[20:56] <Geth> ¦ rakudo/rakuast-v5: review: https://github.com/rakudo/rakudo/commit/5932db2385

[20:57] <[Coke]> vrurg: I've tried to load v6.c in that latest version, still failing with trying to invoke something on an NQPMu, still investigating.

[20:59] <vrurg> [Coke]: could be something resolver-specific. Unfortunately, I can only dream of doing something for RakuAST currently. Therefore lacking knowledge in the area. :(

[20:59] <lizmat> [Coke]: "lang_setup2"   is that correct ?

[21:01] <vrurg> lizmat: for now – it is. Hope it changes later.

[21:01] <lizmat> ack

[21:01] <vrurg> For the moment the primary goal is to draft something that works. Then make it do it the right way. :)

[21:06] <[Coke]> lizmat: yes, I needed to call it explicitly because the copy from Grammar was triggering it so it could grab the value of <version> to do some logic on it

[21:07] <lizmat> oki, it just looked strange looking at the diff

[21:07] <[Coke]> so I moved it out of the way, call it explicitly. Ah, vrurg, at some point 'use v6' started failing too.

[21:07] <[Coke]> Would help if I had any idea what I was doing.

[21:07] <[Coke]> Figured this would be an easy change, not so far. :)

[21:09] <[Coke]> so, lizmat, my "move it out of the way" probably broke it.

[21:09] <vrurg> I haven't noticed it at first, but how do you expect Raku::Actions::lang_setup2($/) to work? It's a method.

[21:10] <[Coke]> vrurg: good catch

[21:10] <vrurg> [Coke]: I'd say you need a method to which you'd be delegating from RakuAST::Actions.lang_setup.

[21:11] <[Coke]> AHAHAHAHA

[21:11] <[Coke]> that was the remaining bug, thank you. :_)

[21:11] <[Coke]> er, :)

[21:11] <vrurg> This is for now, to debug. But later the logic of throwign the exception should get its own method where it'd load the CORE, pull in the exception class, etc.

[21:11] <[Coke]> ok, now -e 'use v6' and -e 'use v5' both do something reasonable.

[21:12] <[Coke]> running 01-errors.t complains "Unable to parse source"

[21:12] <vrurg> Reminds me: "All humanity will be demolished, only cats would survive!" – "AHAHAHAHA! Oops, meow!"

[21:12] <Geth> ¦ rakudo/rakuast-v5: ff355bf07a | (Will Coleda)++ | src/Raku/Grammar.nqp

[21:12] <Geth> ¦ rakudo/rakuast-v5: this is a method call!

[21:12] <Geth> ¦ rakudo/rakuast-v5: 

[21:12] <Geth> ¦ rakudo/rakuast-v5: vrurg++

[21:12] <Geth> ¦ rakudo/rakuast-v5: review: https://github.com/rakudo/rakudo/commit/ff355bf07a

[21:13] <[Coke]> Glad I pushed what I had to get eyes, thank you

[21:18] <Geth> ¦ rakudo/main: 4b1eaecc03 | (Elizabeth Mattijsen)++ | 2 files

[21:18] <Geth> ¦ rakudo/main: RakuAST: add test for RakuAST::Trait::Hides

[21:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4b1eaecc03

[21:38] <[Coke]> vrurg: the v5 exception in the standard grammar isn't pulled out (but it's doing less work)

[21:39] <vrurg> [Coke]: sorry, don't get what you mean.

[21:39] <vrurg> Ah, got it !

[21:40] <vrurg> I'm used to call it 'legacy grammar' now. :) 

[21:40] <vrurg> Looking at the test, I think it works because `throws-like` is using its outer context to resolve symbols. 

[21:42] <vrurg> RakuAST might do EVAL differently. But I wouldn't rely on the legacy behavior here because if we ever get to the point of multi-threaded compiler the exception might start being more useful even if thrown for a bare, non-eval, compunit.

[21:44] <vrurg> [Coke]: BTW, speaking of less work, it relies upon World.typed_exception method. This is where all the resolution magic happens for the legacy parser.

[21:46] <Geth> ¦ rakudo/main: b65253481e | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[21:46] <Geth> ¦ rakudo/main: RakuAST: fix .raku of package.parameterization

[21:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b65253481e

[21:48] *** sena_kun left
[21:55] <Geth> ¦ rakudo/main: a30f08cbee | (Elizabeth Mattijsen)++ | t/12-rakuast/TODO

[21:55] <Geth> ¦ rakudo/main: RakuAST: remove some untestable RakuAST:: classes from TODO list

[21:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a30f08cbee

