[00:49] *** AlexDaniel left
[00:55] *** MasterDuke joined
[02:05] *** bisectable6 left
[02:05] *** committable6 left
[02:07] *** bisectable6 joined
[02:07] *** committable6 joined
[02:16] *** hythm joined
[03:17] *** committable6 left
[03:17] *** bisectable6 left
[03:19] *** bisectable6 joined
[03:20] *** committable6 joined
[04:20] *** committable6 left
[04:21] *** committable6 joined
[04:41] *** vrurg_ joined
[04:44] *** vrurg left
[05:26] *** melezhik joined
[05:27] *** melezhik left
[06:29] *** hythm left
[06:56] *** ab5tract joined
[07:09] *** ab5tract left
[07:11] *** ab5tract joined
[07:17] *** kjp left
[07:19] *** kjp joined
[07:57] *** sena_kun joined
[08:23] *** lizmat left
[08:23] *** MasterDuke left
[08:24] *** lizmat joined
[09:01] <ab5tract> lovely... sinking doesnt seem to be guaranteed until check time. but I need to know about sunkenness at begintime :(

[09:02] <lizmat> ?   if it is not the last statement in a statement list, it is sunk, isn't it?  And you can't know this at BEGIN time, as you may or may not have reached the end of the statement list yet ?

[09:03] <lizmat> so, isn't it impossible to know at BEGIN time ?

[09:08] <ab5tract> hmm, I guess you are right. Thought that sinking worked a bit differently than that (I thought it was dependent on the nature of the statements themselves)

[09:09] <ab5tract> m: Q| |((* > 1) xx 3) | .AST.EVAL

[09:09] <camelia> rakudo-moar 4701845c8: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "|" in expression "((* > 1) xx 3) | .AST.EVAL" in sink context (line 1)␤No such method 'CALL-ME' for string ' '␤  in block <unit> at <tmp> line 1␤␤»

[09:09] <ab5tract> m: Q| dd |((* > 1) xx 3) | .AST.EVAL

[09:09] <camelia> rakudo-moar 4701845c8: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "|" in expression "((* > 1) xx 3) | .AST.EVAL" in sink context (line 1)␤No such method 'CALL-ME' for string ' dd '␤  in block <unit> at <tmp> line 1␤␤»

[09:10] <ab5tract> anyway, I'm having trouble with that specific whatever form.. it keeps trying to curry the `~~` instead of the `>` and I don't have a good way of detecting when this situation has occurred (without special casing it to unknown fragility levels)

[09:14] <ab5tract> I'm literally 1 test case away from being able to replace the entire whatever stack with a single role. what we have now fits all the tests but it is really fragile :(

[09:15] <lizmat> could it be some magic in EXPR ?

[09:18] <ab5tract> you mean as a cause or as a solution?

[09:18] <lizmat> solution actually

[09:19] <ab5tract> oh, interesting!

[09:19] <lizmat> I'm still trying to grok why the l10n things I'm doing don't work, and it seems that EXPR has something to do wiuth it

[09:19] <ab5tract> :(

[09:20] <ab5tract> the l10n stuff is really interesting, btw

[09:22] <lizmat> yeah, I got stuff like: say "zonder" zonder Int; already working

[09:23] <lizmat> but as soon as there's something declarative, it reverts to assuming it's a sub being called

[09:23] <lizmat> so: 'mijn $a'   complains about the sub "mijn" not being found

[09:25] <lizmat> the real problem is the 1 minute+ test cycle  :-(

[09:32] *** sena_kun left
[09:51] *** tellable6 left
[09:52] *** tellable6 joined
[10:13] <lizmat> ab5tract: ok, I've come to the conclusion that https://github.com/rakudo/rakudo/issues/5387 is the reason l10n doesn't work

[10:14] <lizmat> and the reason it works so far, is that EXPR is "manually" calling the associated Action methods

[10:15] <lizmat> so I guess I will need to focus on #5387 first :-(

[10:17] <lizmat> which probably means I will have to start debugging NQP  :-(

[10:25] <ab5tract> ouch!

[10:31] <lizmat> well, at least it's not that the braid loses the actions... 

[10:31] <lizmat> so it's the !reduce that probably decides somehow there's nothing to call

[10:32] <lizmat> so that would mean nqp::tryfindmethod($actions, $name) is failing ?

[10:33] <ab5tract> that would be.. odd

[10:35] <ab5tract> but I guess that would make sense

[10:35] *** ab5tract left
[10:49] <lizmat> well, I won't be able to do much the coming days as I'll be mostly afk

[10:57] <lizmat> another datapoint: adding a FALLBACK method to the actions class, it gets called if the requested method is absent, in the legacy grammar

[10:57] <lizmat> in the Raku grammar, the FALLBACK method doesn't get called either

[11:24] *** ab5tract joined
[11:26] <lizmat> afk&

[11:26] *** lizmat left
[11:41] <[Coke]> all the Old Ones visible in the mist this week.

[12:19] *** NemokoschKiwi joined
[12:51] *** NemokoschKiwi left
[13:04] *** ab5tract left
[14:13] *** ab5tract joined
[14:47] *** AlexDaniel joined
[16:03] *** zostay left
[16:03] *** zostay joined
[16:07] *** elcaro left
[16:07] *** elcaro joined
[16:49] *** ab5tract left
[16:49] *** ab5tract joined
[18:01] *** sena_kun joined
[18:21] <ab5tract> I've got four spectests passing with the the new whatevercode implementation. but I've got some tough gotchas in s/S02-types/whatever.t

[19:21] *** committable6 left
[19:24] *** committable6 joined
[20:58] *** lizmat joined
[21:10] <lizmat> .

[22:10] *** committable6 left
[22:10] *** bisectable6 left
[22:10] *** bisectable6 joined
[22:11] *** committable6 joined
[22:42] *** AlexDaniel left
[22:49] *** MasterDuke joined
[22:56] *** sena_kun left
