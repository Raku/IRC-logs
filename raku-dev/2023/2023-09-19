[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:05] *** NemokoschKiwi joined
[00:05] <NemokoschKiwi> bisectable: class Test { method gist { 'gist' }; method Str { 'Str' } }; say "ez egy {Test.new}";

[00:05] <bisectable6> NemokoschKiwi, Will bisect the whole range automagically because no endpoints were provided, hang tight

[00:06] <bisectable6> NemokoschKiwi, ¦6c (68 commits): «ez egy Str␤»

[00:06] <bisectable6> NemokoschKiwi, Nothing to bisect!

[00:06] <NemokoschKiwi> oh right

[00:06] <NemokoschKiwi> m: class Test { method gist { 'gist' }; method Str { 'Str' } }; say "Ez egy ", Test.new;

[00:06] <camelia> rakudo-moar c4511e4cf: OUTPUT: «Ez egy gist␤»

[00:06] <NemokoschKiwi> fair

[00:07] *** NemokoschKiwi left
[04:57] *** tbrowder__ left
[04:57] *** tbrowder__ joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[08:12] <Geth> ¦ rakudo/main: ebe8322a3d | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[08:12] <Geth> ¦ rakudo/main: RakuAST: probably last round of de-capturing <sym>

[08:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ebe8322a3d

[08:24] <lizmat> hmmm..    TIL that you cannot pass a hash as an argument in a "use" statement and expect it to be received by an EXPORT sub  :-(

[08:25] <lizmat> the hash will be interpreted as named arguments, and thus as "tags"

[08:25] <lizmat> meh

[09:25] *** greppable6 left
[09:25] *** nativecallable6 left
[09:25] *** statisfiable6 left
[09:25] *** bloatable6 left
[09:25] *** sourceable6 left
[09:25] *** coverable6 left
[09:25] *** bisectable6 left
[09:25] *** linkable6 left
[09:25] *** benchable6 left
[09:25] *** committable6 left
[09:25] *** unicodable6 left
[09:25] *** tellable6 left
[09:25] *** reportable6 left
[09:25] *** quotable6 left
[09:25] *** notable6 left
[09:25] *** releasable6 left
[09:25] *** shareable6 left
[09:25] *** squashable6 left
[09:25] *** evalable6 left
[09:25] *** unicodable6 joined
[09:26] *** greppable6 joined
[09:26] *** squashable6 joined
[09:26] *** bisectable6 joined
[09:26] *** nativecallable6 joined
[09:26] *** linkable6 joined
[09:26] *** releasable6 joined
[09:26] *** benchable6 joined
[09:26] *** statisfiable6 joined
[09:27] *** bloatable6 joined
[09:27] *** evalable6 joined
[09:27] *** notable6 joined
[09:27] *** tellable6 joined
[09:27] *** coverable6 joined
[09:27] *** reportable6 joined
[09:28] *** quotable6 joined
[09:28] *** committable6 joined
[09:28] *** sourceable6 joined
[09:28] *** shareable6 joined
[10:04] <discord-raku-bot> <nemokosch> this is exactly the kind of thing that fuels my anxiety when using Raku, this "do what I mean" except I just wanted to use a user-space data type

[10:07] <discord-raku-bot> <nemokosch> it's not easy to notice as long as you are in but now that I started doing some Javascript again, the difference can be felt

[10:07] <discord-raku-bot> <nemokosch> the confidence that the same thing will always happen regardless the underlying data

[11:59] <Geth> ¦ rakudo/main: 6771c4ae20 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[11:59] <Geth> ¦ rakudo/main: RakuAST: remove valid identifier check for now

[11:59] <Geth> ¦ rakudo/main: 

[11:59] <Geth> ¦ rakudo/main: - it's use is limited anyway

[11:59] <Geth> ¦ rakudo/main: - may interfere with other natural language versions

[11:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6771c4ae20

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:45] <Geth> ¦ rakudo/main: e46425c591 | (Elizabeth Mattijsen)++ | lib/RakuAST/Deparse/L10N/NL.rakumod

[12:45] <Geth> ¦ rakudo/main: RakuAST: export the translation hash

[12:45] <Geth> ¦ rakudo/main: 

[12:45] <Geth> ¦ rakudo/main: So that it can be used for other purposes, such as generating the

[12:45] <Geth> ¦ rakudo/main: appropriate slang tokens

[12:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e46425c591

[12:53] <Geth> ¦ rakudo/main: 8e375870d3 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:53] <Geth> ¦ rakudo/main: RakuAST: add xlation hooks for (cont) and (elem) infixes

[12:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8e375870d3

[13:33] <Geth> ¦ rakudo/main: 6175970e04 | (Justin DeVuyst)++ | tools/templates/NQP_REVISION

[13:33] <Geth> ¦ rakudo/main: Bump NQP in prep for release

[13:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6175970e04

[13:57] <[Coke]> That time already, wow.

[13:58] <[Coke]> Question: shouldn't we bump NQP *sooner* so folks using HEAD hit any issues?

[13:59] <[Coke]> BUmping it just before the release means we're not getting CI tests on it, etc.

[14:02] <[Coke]> (not getting them as soon as possible, anyway)

[14:02] <[Coke]> Or do we have a CI pipeline that is testing head/head/head ?

[14:03] <vrurg> No, as far as I remember. In my view it makes not so much sense. But NQP bump could have been done as a PR first and PRs are getting their CI.

[14:25] <[Coke]> Ah, good point.

[15:04] <jdv> it was just for a doc update

[15:06] <jdv> i was about to do a blin run but its cranky again.  we'll see if we can keep sched.

[15:12] <[Coke]> never did get blin running locally

[15:26] <jdv> yeah, i was workingbon that:(

[16:15] *** leont left
[16:15] *** leont joined
[16:38] <vrurg> I was once told that blin wouldn't be running on macOS because it is using pre-build linux images. Though I still wonder what's the problem to implement local caching and build revisions when necessary? It would be slower, but better than nothing.

[16:38] <vrurg> Besides, having spare 1TB I wouldn't care about having a lot of local copies. :)

[16:41] <lizmat> ( hope to switch to an M2 MacMini in a few months, I will use my current dev MacMini for blin on MacOS

[16:43] <vrurg> I'm totally happy with my m2 mac studio. Not sure when would be able to get 100% CPU load on a real life task. Perhaps, when do some video editing.

[17:08] <jdv> theres a lot of builds.  itd be a project to do a whole other arch.

[17:09] <jdv> iirc its 30gb well compressed, maybe 120gb less compressed.

[17:14] * lizmat is not worried about the disk space

[17:15] <Geth> ¦ rakudo/main: f1c6261c46 | (Elizabeth Mattijsen)++ | 2 files

[17:15] <Geth> ¦ rakudo/main: RakuAST: remove special translator actions

[17:15] <Geth> ¦ rakudo/main: 

[17:15] <Geth> ¦ rakudo/main: These appear to cause problems when mixing in slangs.  Since the

[17:15] <Geth> ¦ rakudo/main: actions are pretty simple, just run that code in the grammar.  This

[17:15] <Geth> ¦ rakudo/main: appears to fix the initial teething issues for other natural language

[17:15] <Geth> ¦ rakudo/main: versions of Raku.

[17:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f1c6261c46

[17:19] <jdv> builds arent fast either:)

[17:20] <jdv> if someone has the resources thatd be cool

[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:15] <[Coke]> we have a few m2s in the wild we could split up the work

[19:15] <jdv> might take a few months:)

[19:16] <jdv> [Coke]: good luck my man!

[19:17] <jdv> i think for the linux buildcwe have from '12 or '14 but just the last year would probably be enough at first

[19:18] <[Coke]> Yah, it's the sort of thing we could autofill. releases first, then nqp bumps, then...

[19:19] <[Coke]> be nice if we could have a client/server to say "I can build one now..." like the ole distributed.net jobs

[19:19] <jdv> maybe kinda.  that coukd take a blin run from hours to weeks:)

[19:20] <jdv> blin just runs current and then bisects off last release, then bisects off whole.  iirc.

[19:21] <jdv> a build still takes many minutes

[19:21] <[Coke]> ok, so if we're picking ones to build, everything from the last release, then back releases, then bumps, then ... most recent to oldest?

[19:21] <[Coke]> I'm just saying to make the builds, not to run all of blin on each one of those.

[19:22] <[Coke]> but then we'd have them for whateverable

[19:22] <jdv> its somewhere in the code but id build reverse chrono and wed probably be good quickly

[19:23] <jdv> "for most cases":(

[19:23] <jdv> :)

[19:27] <jdv> https://github.com/Raku/whateverable/blob/master/xbin/build.p6#L90:L105 is the core of it iirc

[19:41] <discord-raku-bot> <nemokosch> it's good that somebody at least has clues about how it works

[19:58] <Geth> ¦ File-Find: tbrowder++ created pull request #44: Convert to three separate os workflows and badges

[19:58] <Geth> ¦ File-Find: review: https://github.com/raku-community-modules/File-Find/pull/44

[20:00] *** linkable6 left
[20:00] *** evalable6 left
[20:02] *** linkable6 joined
[20:03] *** evalable6 joined
[20:10] <jdv> i have just enuf clue to operate it

[20:28] <ugexe> tbrowder__: i think that is duplicating a lot of things and will make it harder to maintain changes

[20:28] <ugexe> it looks like the reason you are doing this is to conditionally do something different on windows, but that can be done without separate workflow files

[20:30] <ugexe> for example: https://github.com/ugexe/zef/blob/4bda1a1cc98a47d2920c67c9d120cc9c6caf7f26/.github/workflows/tests.yml#L104-L106

[20:31] <tbrowder__> that’s true, but someone looking at the readme can easily see its status. most packages combining all into one show failures now due to bad prove 6

[20:32] <ugexe> i would probably argue that once a distribution is green on all OS, that having separate badges for each one isn't neccesary because changes that break it in the future on other OS shouldn't be getting merged in at all

[20:34] <ugexe> but it does appear that if one wants separate badges for different OS on gh actions that you do have to have separate workflow files

[20:36] <tbrowder__> my main concern is the author who does not have access to other os can fiddle more easily with separate workflow files

[20:36] <tbrowder__> speaking for myself

[20:36] <ugexe> maybe, but i think it would be a bigger concern that they now have to manage 3x as many files 

[20:37] <ugexe> you wouldn't write the same function 3 different times and put it in 3 different modules of the same distribution would you?

[20:38] <ugexe> i agree having separate badges does make it a bit easier without any real drawback, but having separate nearly identical workflow files (which is what it takes to accomplish the former) does have drawbacks

[20:39] <tbrowder__> no, but workflow files are not the same kind of animal

[20:40] <tbrowder__> i don’t speak yaml much

[20:40] <discord-raku-bot> <nemokosch> let's be frank. There have been like 2 or 3 people in the whole Raku community who could write CI workflows

[20:40] <tbrowder__> check

[20:41] <ugexe> the language doesn't really matter. the lesson there is about keeping all the logic in sync between those three files

[20:41] <discord-raku-bot> <nemokosch> These files will be probably changed only once: when they break and somebody finally adds a new, working version

[20:42] <tbrowder__> well, it’s a PR and he can enjoy it ot ignore it

[20:42] <tbrowder__> *or

[20:43] <tbrowder__> i don’t like clicking on actions to see which os failed

[20:43] <tbrowder__> and why

[20:44] <ugexe> i'd put myself in the group of believing they know how to write these CI workflows, and i'd have to reiterate the benefits of reuse. the 'not having to update the files' often part is only really relevant when someone who knows how to write CI workflows does it... for instance in the windows one above it only tests a single file so in the future anyone who adds a new file to t/ has to update that

[20:44] <discord-raku-bot> <nemokosch> I'm not really concerned, for one

[20:44] <ugexe> workflow (if they even know they need to)

[20:45] <discord-raku-bot> <nemokosch> that has nothing to do with the file duplication, though

[20:46] <ugexe> it does

[20:46] <ugexe> even if someone does think to check the CI, they also need to know to check all three

[20:47] <ugexe> as well as figure out what the difference is between them

[20:47] <discord-raku-bot> <nemokosch> no, regarding the "only tests a single file", that's because of how the testing is implemented in exactly one file, regardless whether that's the only file or there are others

[20:48] <ugexe> that was to demonstrate the benefits of code reuse, even for something like yaml

[20:49] <discord-raku-bot> <nemokosch> then I don't get how it demonstrated that

[20:49] <discord-raku-bot> <nemokosch> anyway, do as you please, frankly

[20:49] <ugexe> i don't think anyone was asking for permission, but thanks

[20:49] *** finanalyst joined
[20:50] <discord-raku-bot> <nemokosch> then I don't know what is the point of arguing for something that seems to have no relevance to the people seemingly involved

[20:52] <ugexe> oh, you were arguing with me. sorry, i was mostly just babbling on about what i would and would not do in CI since i have some familiarity in this area and people might be interested

[20:52] <discord-raku-bot> <nemokosch> the point is, nobody opposes vehemently, if you feel strongly about it, you can surely do it yourself

[20:54] <ugexe> oh i understand that. i'm surprised you think that I was not aware of those options though

[20:55] <discord-raku-bot> <nemokosch> I was requested a review because nobody seemed to care originally either, except me. And in my opinion, what you say makes perfect sense, except for the fact that there is an estimate of zero individuals who will maintain the workflow, which kind of blows the whole deal away

[20:56] *** finanalyst left
[20:57] <discord-raku-bot> <nemokosch> It's not that surprising really, after all, you kept pushing, as if there was some sort of backlash. I wanted to assure you there is none. It's just worth nothing in my personal opinion.

[21:04] <ugexe> ah, again i was just babbling on to tbrowder to give them some advice in an area they seem to be doing some learning on. i usually like when people describe why they might do things a certain way, but if you feel like you're personally being pressured by it i can refrain from technical discussions when you're active

[21:18] <discord-raku-bot> <nemokosch> I don't feel pressured by it, I just assumed that you say it with an immediate outcome in mind

[21:46] <discord-raku-bot> <nemokosch> tbrowder: I changed the Windows workflow to a zef test based version so that the files don't have to be enumerated. Seems working. You can merge if you agree. (I think you have a commit bit?)

[22:06] *** linkable6 left
[22:06] *** evalable6 left
[22:06] *** evalable6 joined
[22:07] *** linkable6 joined
[23:27] *** ilogger2 left
[23:27] *** ilogger2 joined
