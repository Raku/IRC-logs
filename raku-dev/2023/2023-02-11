[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[02:26] *** squashable6 left
[02:28] *** squashable6 joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[07:04] *** squashable6 left
[07:06] *** squashable6 joined
[07:32] *** samcv left
[07:32] *** samcv joined
[07:45] <nine> ab5tract: Congratulations! See? A walk in the park.... is whatever feature you are gonna tackle next compared to this :D

[07:48] <nine> 696? That's 24 newly passing spectests 8)

[08:38] *** japhb left
[08:48] <nine> Can't wait to see that merged :)

[09:10] *** japhb joined
[09:55] <[Tux]> Rakudo v2022.12-1-gd52342eb0 (v6.d) on MoarVM 2022.12-19-g92aac35c6

[09:55] <[Tux]> csv-test-xs-20      0.416 -  0.450

[09:55] <[Tux]> csv-ip5xs           0.875 -  0.926

[09:55] <[Tux]> test-t --race       1.010 -  1.094

[09:55] <[Tux]> test-t              1.517 -  1.540

[09:55] <[Tux]> csv-parser          3.564 -  3.570

[09:55] <[Tux]> csv-ip5xs-20        5.376 -  5.539

[09:55] <[Tux]> test                6.415 -  6.927

[09:55] <[Tux]> test-t-20 --race    7.104 -  7.110

[09:55] <[Tux]> test-t-20          20.646 - 20.692

[10:46] *** sena_kun joined
[10:58] <ab5tract> lizmat: Can I take you up on that offer to write the tests/DEPARSE stuff? :D

[10:58] <lizmat> sure   :-)

[10:59] <lizmat> just drop whatever testing code you had in a gist and I'll take It from there

[11:06] <lizmat> ab5tract: does that mean your PR can be merged 

[11:06] <lizmat> ?

[11:07] <nine> Definitely not the 43 commit monster it's now. The PR also misses the last fix

[11:08] <lizmat> want me to squash it ?

[11:09] <lizmat> also wouldn't that new Github merge function be helpful to get the PR up-to-date ?

[11:09] <ab5tract> It's not 100% ready yet

[11:09] <ab5tract> but yeah, definitely a squash :)

[11:10] <lizmat> ok, lemme know when it is: I'll take that as the cue to start the Deparse and tests

[11:10] <ab5tract> still cleaning things up. You can squash on merge in Github right? For sure you can do that with gitlab

[11:10] <ab5tract> lizmat++

[11:10] <nine> ab5tract: please also make sure that all your changes are actually necessary. E.g. I don't know why you removed the IMPL-RESOLVE-NAME-IN-PACKAGES call from the resolver

[11:10] <lizmat> yeah, can squash on merge  :-)

[11:12] <ab5tract> nine: yeah, I was going to start a dicusssion about that. I removed it because it seems redundant with the fact that 'resolve-name-constant' calls IMPL-RESOLVE-NAME-IN-PACKAGES

[11:12] <nine> For a proper review I'd prefer the branch to be ready for merging as-is, e.g. the commits that will actually land on main with proper commit messages.

[11:12] <ab5tract> and it was running twice in my code

[11:13] <lizmat> nine: so no squashing: check

[11:14] <ab5tract> nine: I'll try to be more concise next time around. But for this one, I don't see any option besides a squash. I really went all around the world with my commits. What are you proposing?

[11:15] <nine> ab5tract: squash them locally and push the result for review

[11:15] <ab5tract> ok

[11:16] <nine> While resolve-name-constant also calls IMPL-RESOLVE-NAME-IN-PACKAGES, resolve-lexical doesn't

[11:16] <Geth> ¦ rakudo/main: ad940dec89 | (Elizabeth Mattijsen)++ | 2 files

[11:16] <Geth> ¦ rakudo/main: RakuAST: properly handle @/%/& sigilled our variables

[11:16] <Geth> ¦ rakudo/main: 

[11:16] <Geth> ¦ rakudo/main: - Remove unnecessary lookup of $?PACKAGE

[11:16] <Geth> ¦ rakudo/main: - Move "no initialization" code to always be used during binding

[11:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ad940dec89

[11:17] <nine> Speaking about commit messages. This one ^^^ doesn't really tell me why the new state is more correct

[11:18] <lizmat> hmmm... ok: this fixes "our @x; @x = 1,2" and "our @x = 1,2"

[11:19] <lizmat> left that as a comment

[11:26] <ab5tract> nine: okay. putting that back in. thanks for the heads up

[11:27] <nine> It's certainly not optimal, that we are searching packages twice. But that can be fixed in a separate effort

[11:28] <nine> Meanwhile I'm pondering how to fix the problem with nested blocks of dynamically compiled code. I.e. role Foo { method foo() { } }; class Bar does Foo { }; # here foo will at runtime still use the fallback resolver as its outer scope is the comp unit created during BEGIN time compilation

[11:32] <nine> I wonder if there is a downside to just perform the usual fixups for these nested blocks as well.

[11:33] <nine> When we compile a code object, we first "stub" it, i.e. create the meta object (Sub, Method, Block, etc.) and assign a placeholder code to its $!do property. This placeholder when executed will then "dynamically" compile the actual body and replace itself on its code object.

[11:33] <nine> This body could contain nested code objects like in the role example above (the role body itself is a Block that's executed when the role is composed into a class).

[11:35] <nine> Since we're already compiling these nested code objects as part of their parent body, we take the opportunity of "fixing up" their code objects while we're at it, i.e. when Foo body is compiled, we also replace foo's $!do.

[11:35] <nine> Normally when we load a comp unit, we fixup all routines, i.e. assign the compiled blocks to their owning objects $!do, thereby replacing all stubs. But if a stub was already replaced, that's not necessary, so we don't bother.

[11:37] <nine> Except that there is this subtle difference between the dynamically compiled bodies and the normal ones: the dynamically compiled code belongs to a different comp unit (the one created for compiling that thing while the outer comp unit is still unfinished). And this outer comp unit doesn't contain all lexical symbols.

[11:37] <ab5tract> ouch

[11:38] <nine> The same situation exists on the old frontend as well, except for that very last bit: on the old frontend we create a wrapper frame containing all lexical symbols visible at the point of the routine's definition. This includes all symbols from the setting as well, so these frames are very large.

[11:39] <nine> In the RakuAST frontend we instead use a newly introduced mechanism of the VM: fallback resolvers. I.e. when the VM can't find a lexical, it runs a callback which will then access the RakuAST::Resolver.

[11:40] <nine> Since this fallback resolver is a property of the comp unit, the same thing actually happens at runtime. I.e. these dynamically compiled routines actually keep the resolver object alive and that in turn references a lot of AST nodes. So definitely not memory friendly.

[11:40] <nine> Also not necessary, since at runtime we'll have a complete lexical environment there already.

[11:41] <nine> I guess all that really sounds like "so just do the normal fixup at load time, even for dynamically compiled blocks!" Which is exactly what I tried, even before understanding the whole situation. And indeed that fixes 4 spec tests right away. But it also breaks one.

[11:42] <nine> BEGIN { my $a = 42; END { say $a } } # this one prints (Any) instead of 42, but would succeed thanks to the fallback resolver.

[11:42] <evalable6> nine, rakudo-moar ad940dec8: OUTPUT: «42␤»

[11:42] <ab5tract> nine: do you want me to remove *everything* tangential to the feature? things like using an already constructed variable instead of doing another method dispatch?

[11:42] <nine> ab5tract: please put any incidental improvements into separate commits.

[11:42] <ab5tract> ok

[11:43] <nine> I'm quite suprised that "int $n" without the "my" actually compiles...

[11:51] <ab5tract> right?

[11:51] <ab5tract> okay, I think it is ready for review

[11:59] <nine> Is there any difference between IMPL-INSTALL-SUBSET and IMPl-INSTALL-PACKAGE?

[12:00] *** reportable6 left
[12:01] <ab5tract> yes, there's a few subtle differences

[12:01] <ab5tract> based on what we actually lexically declare

[12:02] <ab5tract> and not adding the generated lexical in case it shares the name of a stubbed package

[12:03] *** reportable6 joined
[12:05] <nine> There are also large parts that you took verbatim. And I'm not sure the differences are actually because subset is so different. Couldn't they apply to Package as well? Are you sure the if !$lexically-registered  branch is still necessary?

[12:07] <ab5tract> If I remove that, the QAST for the lexical definition won't exist inside of the packages

[12:08] <ab5tract> but it might not change behavior, let me check

[12:09] <ab5tract> this was added when I was striving for QAST equivalence

[12:13] <ab5tract> does the use of RakuAST::VarDeclaration::Implicit::Constant make sense, btw?

[12:21] <ab5tract> okay, all tests still pass with `$!lexically-registered` gone... are you suggesting I just use IMPL-INSTALL-PACKAGE directly? or do I create 

[12:22] <ab5tract> a "parent" routine somewhere

[12:25] <ab5tract> another option is to merge as-is and then proceed to de-dupe it in a further commit

[12:25] <ab5tract> I'm imagining IMPL-INSTALL-PACKAGE becomeing IMPL-INSTALL-INTO-PACKAGE

[12:26] <nine> IMPL-INSTALL-PACKAGE could go into a role that Subset and Package do

[12:26] <nine> I was asking about if !$lexically-registered because there's also a $resolver.current-scope.merge-generated-lexical-declaration in the else branch

[12:27] <ab5tract> that's for any new lexical package

[12:27] <ab5tract> not a new subset

[12:29] <nine> But if I read it correctly for subset Foo::Bar where True; you'd create a lexical called Bar in addition to adding Bar to the Foo package. The old frontend doesn't do that.

[12:29] <nine> The old frontend also only creates a lexical Foo holding that package into which Bar is installed

[12:36] *** ab5tract left
[12:51] <Geth> ¦ rakudo/main: af90aed750 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[12:51] <Geth> ¦ rakudo/main: RakuAST: stop "our \x" from being codegenned

[12:51] <Geth> ¦ rakudo/main: 

[12:51] <Geth> ¦ rakudo/main: It's a NYI in base, make it a NYI here as well, although it looks

[12:51] <Geth> ¦ rakudo/main: like it should be pretty easy to implement in RakuAST.

[12:51] <Geth> ¦ rakudo/main: 

[12:51] <Geth> ¦ rakudo/main: Will leave that for another day.

[12:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/af90aed750

[12:52] <lizmat> nine: better commit message ? ^^

[12:52] <lizmat> also: there appears to be a subtle difference between base and RakuAST now:

[12:52] <lizmat> base: ------> our \x⏏ = 42

[12:53] <lizmat> RakuAST: ------> our \x = 42⏏<EOL>

[12:57] <nine> Definitely better :)

[12:58] <nine> I think to get that pointed at the old place, you'd have to throw the error from the grammar

[12:59] <lizmat> hmmm.. in the base case, it was also thrown from Actions...  but I'll check

[13:04] *** ab5tract joined
[13:08] *** ab5tract left
[13:23] <Geth> ¦ rakudo/main: 419d371da9 | (Elizabeth Mattijsen)++ | 2 files

[13:23] <Geth> ¦ rakudo/main: RakuAST: make error message for our \x identical with base

[13:23] <Geth> ¦ rakudo/main: 

[13:23] <Geth> ¦ rakudo/main: By throwing it from the grammar, rather than from Actions.  nine++

[13:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/419d371da9

[13:34] <Geth> ¦ rakudo/try_to_fix_wrappers: ec452f3e8e | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[13:34] <Geth> ¦ rakudo/try_to_fix_wrappers: RakuAST: Fix dynamically compiled blocks keeping compiler alive

[13:34] <Geth> ¦ rakudo/try_to_fix_wrappers: 

[13:34] <Geth> ¦ rakudo/try_to_fix_wrappers: When we compile a code object, we first "stub" it, i.e. create the meta object

[13:34] <Geth> ¦ rakudo/try_to_fix_wrappers: (Sub, Method, Block, etc.) and assign a placeholder code to its $!do property.

[13:34] <Geth> ¦ rakudo/try_to_fix_wrappers: This placeholder when executed will then "dynamically" compile the actual body

[13:34] <Geth> ¦ rakudo/try_to_fix_wrappers: and replace itself on its code object.

[13:34] <Geth> ¦ rakudo/try_to_fix_wrappers: 

[13:34] <Geth> ¦ rakudo/try_to_fix_wrappers: <…commit message has 29 more lines…>

[13:34] <Geth> ¦ rakudo/try_to_fix_wrappers: review: https://github.com/rakudo/rakudo/commit/ec452f3e8e

[13:47] <nine> So BEGIN { my $a = 42; END { say $a } } doesn't work as expected because the END phaser finds a different container in that lexical

[13:48] <lizmat> maybe because the scope of the BEGIN is lost by the time of the END ?

[13:48] <lizmat> so the lookup fails?

[13:48] <lizmat> I bet you can't assign to $a in END

[13:49] <nine> If the lookup failed, it would throw an error. But the lookup succeeds. It only finds a different object there

[13:49] <lizmat> hmmmm...

[13:49] <nine> You'd lose that bet

[13:49] <lizmat> ok  :-)

[13:49] <lizmat> then it *is* a container  :-)

[13:50] <lizmat> nine: Q related to "our constant $x = 42"

[13:50] <lizmat> I've added the necessary code to VarDeclaration::Implicit::Constant I think

[13:50] *** ab5tract joined
[13:50] <nine> And yes, the lexical scope is lost. But the new one should contain the same container. Unless....oh....creating that container is probably done during QAST generation. And that runs twice, so 2 containers.

[13:51] <lizmat> however, the IMPL::QAST::DECL is *not* being called at all in the scope eq 'our' case

[13:51] <lizmat> it *is* being called for the "my" case

[13:53] <nine> But...that constant is not implicit. It's about as explicit as it can be

[13:55] <lizmat> ah, ok, so it's codegenning incorrectly... checking

[13:58] <lizmat> hmmm.. there is no RakuAST::VarDeclaration::Constant class :-)

[13:59] <lizmat> also, what would make it implicit?   the use of the ? twigil ?

[14:01] <nine> According to my interpretation of the comments, that it's declared as a side effect. E.g. creating a package will cause $?PACKAGE to be declared

[14:06] <lizmat> so I guess we need a RakuAST::VarDeclaration::Constant

[14:09] <nine> Yes. At least for deparse

[14:09] <lizmat> why for deparse ?

[14:10] <nine> How else would you know to actually generate any output? The implicit constants are not part of the source code

[14:10] <lizmat> but deparse works on the AST, and it would still be in the AST ?

[14:11] <lizmat> feels to me the almost the only thing wrong with RakuAST::VarDeclaration::Implicit::Constant

[14:11] <lizmat> is the name

[14:11] <lizmat> and that it could just be called RakuAST::VarDeclaration::Constant

[14:21] <ab5tract> lizmat++

[14:22] <ab5tract> nine: tried breaking the relevant class out into a "role" class. got this: "Class RakuAST::Type::Subset cannot inherit from RakuAST::PackageInstaller because the parent is not composed yet"

[14:23] <lizmat> that means you need to shuffle the order in which the packages are defned around

[14:23] <ab5tract> hmm

[14:23] <ab5tract> I see what you mean. thanks

[14:24] <lizmat> a typical bootstrapping issue   been there done that :-)

[14:30] <lizmat> m: my constant $x = my $a; say $a

[14:30] <camelia> rakudo-moar 419d371da: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$a' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> my constant $x = my $a; say ⏏$a␤»

[14:30] <lizmat> that feels ... counter-intuitive  :-)

[14:32] <ab5tract> nine, lizmat: Any preferences for where PackageInstaller should live? base.rakumod seems like maybe the least offensive landing place

[14:32] <lizmat> no preference from me

[14:34] <nine> scoping.rakumod

[14:39] *** epony left
[14:59] <ab5tract> damn, it's depressing to be back in broken code land :(

[15:01] <nine> But now you have a working version to compare with

[16:02] <ab5tract> okay, I think it's ready again

[16:02] <ab5tract> unfortunately I borked the grep when counting the passing spectests

[16:03] <ab5tract> "grep '\. ok' spectest.out | wc -l" -> 670

[16:03] <ab5tract> so a lot less than I had said before

[16:05] <ab5tract> I had forgotten the  backslash before :(

[16:22] <Geth> ¦ rakudo/watermarky-supply-zip: 470a46c6ed | (Jonathan Worthington)++ | src/core.c/Supply-coercers.pm6

[16:22] <Geth> ¦ rakudo/watermarky-supply-zip: Switch Supply.zip to a watermark approach

[16:22] <Geth> ¦ rakudo/watermarky-supply-zip: 

[16:22] <Geth> ¦ rakudo/watermarky-supply-zip: In https://github.com/Raku/problem-solving/issues/364 a proposed

[16:22] <Geth> ¦ rakudo/watermarky-supply-zip: solution to a deadlock in supply setup is hindered by the failure of

[16:22] <Geth> ¦ rakudo/watermarky-supply-zip: a spectest for Supply.zip.

[16:22] <Geth> ¦ rakudo/watermarky-supply-zip: 

[16:22] <Geth> ¦ rakudo/watermarky-supply-zip: Thus far we defined Supply.zip as having its reuslt Supply be `done` as

[16:22] <Geth> ¦ rakudo/watermarky-supply-zip: <…commit message has 13 more lines…>

[16:22] <Geth> ¦ rakudo/watermarky-supply-zip: review: https://github.com/rakudo/rakudo/commit/470a46c6ed

[16:22] <Geth> ¦ rakudo: jnthn++ created pull request #5200: Switch Supply.zip to a watermark approach

[16:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5200

[16:28] <ab5tract> okay, this is frustrating. 2 spectests are failing in my branch that don't fail in the current main

[16:32] <nine> That happens to me every time :)

[16:32] <ab5tract> so what are my options? even finding the two different tests feels like a unique form of frustration

[16:33] <ab5tract> but: glad I'm not alone ;)

[16:40] <ab5tract> I just tried diff and that is not the answer

[16:49] <nine> My standard command for spectesting is: make && TEST_JOBS=20 RAKUDO_RAKUAST=1 make spectest | grep '\. ok' | sort | tee $(git describe).pure.tests | wc -l

[16:49] <nine> Then I just vimdiff the resulting file with the one of the run on the previous commit

[16:51] <lizmat> nine: so I created a RakuAST::VarDeclaration::Constant class according to the rules, afaics

[16:52] <lizmat> https://gist.github.com/lizmat/8d78561ff23befbc1e2d7626701e39c3

[16:52] <lizmat> but it keeps complaining about RakuAST::Type not having a lexical-name method

[16:52] <lizmat> and the stack trace doesn't make sense to me

[16:55] <nine> Maybe the stack trace makes sense to me?

[16:55] <lizmat> I hope, or otherwise the code

[16:59] <nine> lizmat: your constructor is missing a return value :)

[17:00] <lizmat> ggrrrr...  thanks!

[17:04] <lizmat> need to go afk now, will work on it tomorrow again&

[17:22] <Geth> ¦ nqp/specialcase_genarate_dispatch_single_arg: 87a7099923 | (Timo Paulssen)++ | 3 files

[17:22] <Geth> ¦ nqp/specialcase_genarate_dispatch_single_arg: use single-arg op generator for dispatch ops

[17:22] <Geth> ¦ nqp/specialcase_genarate_dispatch_single_arg: review: https://github.com/Raku/nqp/commit/87a7099923

[17:22] <Geth> ¦ rakudo/specialcase_genarate_dispatch_single_arg: b0b9ba3cb1 | (Timo Paulssen)++ | src/vm/moar/Perl6/Ops.nqp

[17:22] <Geth> ¦ rakudo/specialcase_genarate_dispatch_single_arg: use single-arg op generator for dispatch ops

[17:22] <Geth> ¦ rakudo/specialcase_genarate_dispatch_single_arg: review: https://github.com/rakudo/rakudo/commit/b0b9ba3cb1

[17:46] <ab5tract> okay, this is totally weird. The two tests that are failing seem to be so unrelated.

[17:47] <nine> Your branch does make a few unrelated changes though. Maybe they do have an effect after all?

[17:48] <ab5tract> https://gist.github.com/ab5tract/7ea3f45f58c25a4adf83b5834a009677

[17:49] <ab5tract> could be, let me try reverting those

[17:50] <nine> and suddenly it's quite useful that these are separate commits already

[17:50] <ab5tract> :)

[17:58] *** Xliff joined
[17:58] <nine> Oh darn....now I know why I get a different container in that END block when I run fixups for dynamically compiled blocks. Lexical variables are contvars and for such contvars, the VM actually clones the object the compiler gave it as value when vivifying the lexical on first access in a frame.

[17:59] <ab5tract> uff

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:06] <ab5tract> nine: nothing is really changing the results

[18:07] <nine> But the main commit is?

[18:11] <ab5tract> the tests pass on the main commit

[18:12] <nine> now you lost me

[18:12] <ab5tract> it's something in the new PackageInstaller code

[18:12] <ab5tract> something broke on the way to abstraction

[18:12] <nine> Ah, yes, that fits the symptoms

[18:32] *** Xliff left
[19:07] <nine> m: my $a = 42; BEGIN { END { say $a } }

[19:07] <camelia> rakudo-moar 419d371da: OUTPUT: «(Any)␤»

[19:08] <nine> Gotcha! Not even the wrapper frame of the old frontend is fool proof

[19:25] <ab5tract> nice find!

[19:26] <ab5tract> running the final verification steps for the branch, but so far it's looking good

[19:43] <ab5tract> okay, 672  passing spectests

[19:44] <ab5tract> which indicates that my subset test file is actually a good candidate for roast inclusion, as nothing else there seems to have covered my corner cases

[19:47] <nine> Cool! So it's ready for review again?

[19:52] *** sena_kun left
[19:52] *** sena_kun joined
[19:56] <jdv> just added curated blin results from a few days ago.  the failures all seem to be the same on HEAD.

[19:56] <jdv> lizmat: ^ blin points mostly to your commits:(

[19:57] <jdv> vrurg: ^ blin pointed to one of your commits

[20:06] *** epony joined
[20:08] <nine> ab5tract: https://github.com/rakudo/rakudo/pull/5178/commits/9f69e05432274aba6075093435ea6e1d239c2cc8 seems to contain unrelated changes

[20:09] <ab5tract> Are you referring to the modification of expressions?

[20:10] <ab5tract> Their presence got confused, they were added in the original commit. I remove them in this commit and then re-add them in the final commit

[20:11] <ab5tract> so that at least they ended up with their own explanation in git blame

[20:12] <nine> They shouldn't be in the original commit

[20:12] <ab5tract> alright, I'll clean it up

[20:13] <ab5tract> didn't think it would be a blocker issue, tbh

[20:13] <nine> Well if we are doing it, we may as well do it right :)

[20:15] <ab5tract> easy enough to fix, indeed

[20:18] <ab5tract> okay, I hope it is all impeccable now

[20:42] <ab5tract> wait, one more thing could be better

[20:50] <ab5tract> nine: whenever you have the tuits, it should be shiny

[21:13] <ab5tract> wait, what?

[21:13] <ab5tract> crap.. I'm starting to feel like the boy who cried wolf

[21:40] <ab5tract> ok,  *phew* false alarm  . the current state of the branch is pristine

[22:34] <vrurg> jdv: I didn't see any reports of blin in my emails. 

[22:37] <vrurg> jdv: nevermind, found it. 

[22:38] *** guifa_ joined
[22:41] *** guifa left
[22:52] *** japhb left
[22:58] *** japhb joined
[23:09] *** Voldenet left
[23:10] *** Voldenet joined
[23:12] *** ab5tract left
