[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:45] *** kurahaupo left
[00:45] *** kurahaupo joined
[00:54] *** vrurg_ joined
[00:54] *** vrurg left
[01:50] *** kurahaupo left
[04:37] *** linkable6 left
[04:37] *** reportable6 left
[04:37] *** evalable6 left
[04:37] *** quotable6 left
[04:37] *** nativecallable6 left
[04:37] *** bisectable6 left
[04:37] *** sourceable6 left
[04:37] *** greppable6 left
[04:37] *** coverable6 left
[04:37] *** statisfiable6 left
[04:37] *** notable6 left
[04:37] *** releasable6 left
[04:37] *** shareable6 left
[04:37] *** benchable6 left
[04:37] *** evalable6 joined
[04:37] *** sourceable6 joined
[04:37] *** benchable6 joined
[04:37] *** quotable6 joined
[04:37] *** shareable6 joined
[04:38] *** coverable6 joined
[04:38] *** nativecallable6 joined
[04:38] *** greppable6 joined
[04:38] *** statisfiable6 joined
[04:38] *** reportable6 joined
[04:38] *** linkable6 joined
[04:39] *** releasable6 joined
[04:39] *** bisectable6 joined
[04:39] *** notable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:50] *** kurahaupo joined
[06:53] *** sena_kun joined
[09:20] <Geth> ¦ rakudo/main: 45b3a05093 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[09:20] <Geth> ¦ rakudo/main: Allow Nil as payload to X::AdHoc

[09:20] <Geth> ¦ rakudo/main: 

[09:20] <Geth> ¦ rakudo/main: This allows "die Nil" to be distinguished from "die Any", or in a

[09:20] <Geth> ¦ rakudo/main: CATCH block:

[09:20] <Geth> ¦ rakudo/main: 

[09:20] <Geth> ¦ rakudo/main: CATCH {

[09:20] <Geth> ¦ rakudo/main:     when X::AdHoc {

[09:20] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[09:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/45b3a05093

[10:11] *** kurahaupo_ joined
[10:14] *** kurahaupo left
[11:56] *** kurahaupo_ left
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:08] *** kurahaupo joined
[13:09] *** squashable6 left
[13:11] *** squashable6 joined
[13:24] *** kurahaupo left
[13:27] *** squashable6 left
[13:29] *** squashable6 joined
[13:35] *** jgaz left
[13:37] *** kurahaupo joined
[13:47] <Geth> ¦ roast: ceb959646c | (Elizabeth Mattijsen)++ | S26-documentation/09-configuration.t

[13:47] <Geth> ¦ roast: Fix tests related to pod configuration

[13:47] <Geth> ¦ roast: 

[13:47] <Geth> ¦ roast: - Apparently in the legacy grammar, something like 2.3 is rendered

[13:47] <Geth> ¦ roast:   as a Num, rather than as a Rat.  This is fixed in RakuAST, so

[13:47] <Geth> ¦ roast:   change the test and mark them as TODO for now.

[13:47] <Geth> ¦ roast: - In the legacy grammar, a mutable hash was returned for something

[13:47] <Geth> ¦ roast:   like :foo{:a, :b}.  In RakuAST it's an immutable Map.  Change the

[13:47] <Geth> ¦ roast:   test for Map, which will also accept hashes, so no TODO necessary

[13:47] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ceb959646c

[13:53] <Geth> ¦ rakudo/main: dd5125aecd | (Elizabeth Mattijsen)++ | 4 files

[13:53] <Geth> ¦ rakudo/main: RakuAST: add .literalize method to selected ::Node classes

[13:53] <Geth> ¦ rakudo/main: 

[13:53] <Geth> ¦ rakudo/main: RakuDoc configuration can become very complex, basically everything

[13:53] <Geth> ¦ rakudo/main: is allowed, as long as the result is a constant "literal" value if

[13:53] <Geth> ¦ rakudo/main: you will.

[13:53] <Geth> ¦ rakudo/main: 

[13:53] <Geth> ¦ rakudo/main: This adds a src/core.c/Literalize.pm6 file that augments the

[13:53] <Geth> ¦ rakudo/main: <…commit message has 10 more lines…>

[13:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dd5125aecd

[13:54] <lizmat> 815!    nine ^^

[15:01] <[Coke]> lizmat++

[15:13] <Geth> ¦ rakudo/main: fc879d6f2e | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[15:13] <Geth> ¦ rakudo/main: RakuAST: fix storage of the # numbered alias

[15:13] <Geth> ¦ rakudo/main: 

[15:13] <Geth> ¦ rakudo/main: It needs to be something trueish, so 1 will do.  "True" is not the

[15:13] <Geth> ¦ rakudo/main: Bool::True that we know from HLL Raku

[15:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fc879d6f2e

[15:13] <lizmat> 816!

[15:51] <Geth> ¦ rakudo/main: c427590256 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/LegacyPodify.pm6

[15:51] <Geth> ¦ rakudo/main: RakuAST: use first space when collapsing \s+

[15:51] <Geth> ¦ rakudo/main: 

[15:51] <Geth> ¦ rakudo/main: This effectively keeps a non-breaking whitespace when it is the

[15:51] <Geth> ¦ rakudo/main: first (or only) whitespace between 2 non-whitespace characters

[15:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c427590256

[17:36] <Geth> ¦ rakudo/main: 6604178bef | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/LegacyPodify.pm6

[17:36] <Geth> ¦ rakudo/main: RakuAST: properly handle non-breaking space logic

[17:36] <Geth> ¦ rakudo/main: 

[17:36] <Geth> ¦ rakudo/main: when creating legacy pod

[17:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6604178bef

[17:36] <lizmat> 817!

[17:38] <[Coke]> NUMBERS ARE INCREASING, BRAIN HAPPY

[17:39] <[Coke]> I get the benefit and I'm just sitting here looking on. :)

[17:39] <lizmat>   :-)   yw

[17:41] *** linkable6 left
[17:41] *** evalable6 left
[17:41] *** linkable6 joined
[17:43] *** evalable6 joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:15] *** MasterDuke joined
[18:17] <MasterDuke> hm. i think i've successfully transferred the logic of https://github.com/rakudo/rakudo/pull/5242 to PERFORM-CHECK, but i'm having no luck getting the error reporting right

[18:22] <Geth> ¦ rakudo/main: 703378eac7 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/LegacyPodify.pm6

[18:22] <Geth> ¦ rakudo/main: RakuAST: handle empty leading / trailing correctly in declarator doc

[18:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/703378eac7

[18:23] <Geth> ¦ rakudo/main: 5ea3f79af6 | (Elizabeth Mattijsen)++ | 2 files

[18:23] <Geth> ¦ rakudo/main: RakuAST: implement "only" subs

[18:23] <Geth> ¦ rakudo/main: 

[18:23] <Geth> ¦ rakudo/main: This seems to have slipped through the cracks and was easy to do

[18:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5ea3f79af6

[18:23] <lizmat> 819!

[18:41] <Geth> ¦ roast: fe773f511f | (Elizabeth Mattijsen)++ | S26-documentation/module-comment.t

[18:41] <Geth> ¦ roast: Tweak check for trailing declarator block

[18:41] <Geth> ¦ roast: 

[18:41] <Geth> ¦ roast: In RakuAST, trailing declarator docs *must* start at the line they

[18:41] <Geth> ¦ roast: apply to.  Since this also works in the legacy grammar, and the

[18:41] <Geth> ¦ roast: intent was to test a blockless module statement, it seems fair to

[18:41] <Geth> ¦ roast: change this without too much worry.

[18:41] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/fe773f511f

[18:41] <lizmat> 820!

[18:47] <nine> Wow, nice progress!

[18:48] <lizmat> yeah that last one was a bit of a cheat

[18:48] <lizmat> the whole trailing declarator thing is going to require some discussion

[18:49] <lizmat> also: the order in which declarator docs appear in $=pod is different in RakuAST

[18:49] <lizmat> because PERFORM-CHECK is depth-first

[18:49] <lizmat> so if you have leading doc on:

[18:50] <lizmat> class Outer { class Inner { } }

[18:50] <lizmat> then in legacy the Outer doc will be first, and the Inner then follows

[18:50] <lizmat> in RakuAST the order is reversed

[18:50] <lizmat> I don't see a simple solution to that yet

[18:51] <MasterDuke> huh. i tried adding `if $*RESOLVER -> $res {` (modeled after cf3d937fc0511bfcaedc676dcb6e1951be8d85bc), but that causes `Too few positionals passed; expected 6 arguments but got 3` instead. well, might be able to play around some more this evening

[18:51] <lizmat> OTOH, I don't really see why declarator docs need to be in $=pod anyways

[19:11] <Geth> ¦ rakudo/main: 08da4bfee4 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/LegacyPodify.pm6

[19:11] <Geth> ¦ rakudo/main: RakuAST: don't lose one level of [] when setting leading/trailing

[19:11] <Geth> ¦ rakudo/main: 

[19:11] <Geth> ¦ rakudo/main: Because binding will not itemize, causing the array to disappear

[19:11] <Geth> ¦ rakudo/main: when setting.  And don't ask my why this is needed, this is how

[19:11] <Geth> ¦ rakudo/main: pod has been generated since 2014 at least.

[19:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/08da4bfee4

[19:21] <nine> Does the order even matter?

[19:22] <lizmat> it does for the tests :-(

[19:22] <lizmat> but I think I have an idea

[19:24] <Geth> ¦ rakudo/main: a1d39af53e | (Elizabeth Mattijsen)++ | 2 files

[19:24] <Geth> ¦ rakudo/main: RakuAST: only ::Doc::(Block|Declarator) need to CHECK

[19:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a1d39af53e

[19:24] <nine> And that's not just because the tests are badly written?

[19:31] <lizmat> good question

[19:51] <vrurg_> Heh, we were too fast in eradicating COMPOSE phaser...

[19:51] *** vrurg_ is now known as vrurg

[19:51] <lizmat> why ?

[19:52] <gfldex> I could have made good use of it in my last blog post. :->

[19:52] <nine> Xliff: what do you mean by the Need RakuAST node "not working"?

[19:52] <tellable6> nine, I'll pass your message to Xliff

[19:53] <vrurg> Role body is executed prior to the role getting specialized. And there is no way to do any fixups after it is actually applied to a class.

[19:55] <vrurg> Say, I wanted to set attribute's 'is required' conditionally, depending on T being a definite in `role R[::T] { has T $.attr; }`. But it only makes sense to do on the target class. And when the body is being ran the class doesn't have it yet.

[19:56] <lizmat> fwiw I think that could be done rather easily now

[19:56] <vrurg> gfldex: If I remember correctly, role body works well for your case.

[19:57] <lizmat> by letting the role body also return a list of COMPOSE phasers that should be applied to the class ?

[19:57] <vrurg> lizmat: In RakuAST? Hope so. Can be done when no higher priority tasks are on the list.

[19:57] <gfldex> I was hoping that I can do more with combining COERCE and parametric roles.

[19:58] <vrurg> gfldex: did you see my reply on reddit?

[19:58] <gfldex> Neither are used of then in code in the wild.

[19:58] <gfldex> I did. Followup blogpost will include your fix.

[20:13] <nine> vrurg: I wonder whether what you want is more something that macros are a good solution for

[20:15] <vrurg> nine: nope. An attribute is being held with the generic type on the role. It's only after the instantiation when its copy gets the final type. All this is done by the metamodel.

[20:17] <vrurg> For the purpose of type checking and dispatching it would be great for two classes to share the same role, but require/not require the attribute to be set depending on class' demands.

[20:17] <nine> That was a rather quick "no" considering that we don't even know what macros will look like exactly. It's not even clear whether a role is required for what you need. There could as well be a macro that added the attribute in question to a class and make it required if...well required.

[20:20] <vrurg> nine: Type checking is the key. If code needs to know wether the attribute is there a role is the best. It could, of course, be like `role R { method attr {...} }` – and leave it up to the classes themselves to declare it. Then a macro would, perhaps, work for that.

[20:22] <vrurg> Then, speaking of readability, `class Foo does R[Str:D] { ... }` is way better than to keep in mind that "ok, this is a macro and it implies the role gets consumed".

[20:28] <lizmat> nine: meh, looks like the idea wrt order of doc blocks, won't fly

[20:29] <lizmat> it looks like there are ::Doc blocks getting created on which the PERFORM-CHECK method is not called

[20:30] <lizmat> thus causing holes in $=pod, and thus either needing a fixup step, or some other idea

[20:37] <lizmat> $!pod-content.grep({$_.defined}).Array to the rescue

[20:46] *** sena_kun left
[21:58] *** squashable6 left
[21:58] *** evalable6 left
[21:58] *** linkable6 left
[21:58] *** notable6 left
[21:58] *** benchable6 left
[21:58] *** releasable6 left
[21:58] *** greppable6 left
[21:58] *** quotable6 left
[21:58] *** sourceable6 left
[21:58] *** coverable6 left
[21:58] *** bisectable6 left
[21:58] *** nativecallable6 left
[21:58] *** reportable6 left
[21:58] *** statisfiable6 left
[21:58] *** shareable6 left
[21:58] *** bloatable6 left
[21:58] *** unicodable6 left
[21:58] *** committable6 left
[21:58] *** tellable6 left
[21:58] *** nativecallable6 joined
[21:58] *** greppable6 joined
[21:59] *** bloatable6 joined
[21:59] *** tellable6 joined
[21:59] *** committable6 joined
[21:59] *** statisfiable6 joined
[21:59] *** coverable6 joined
[22:00] *** quotable6 joined
[22:00] *** bisectable6 joined
[22:00] *** notable6 joined
[22:00] *** unicodable6 joined
[22:00] *** benchable6 joined
[22:01] *** releasable6 joined
[22:01] *** squashable6 joined
[22:01] *** linkable6 joined
[22:01] *** shareable6 joined
[22:01] *** evalable6 joined
[22:01] *** reportable6 joined
[22:01] *** sourceable6 joined
[22:28] *** gfldex left
[23:13] <Geth> ¦ rakudo/main: a2102a963a | (Elizabeth Mattijsen)++ | 4 files

[23:13] <Geth> ¦ rakudo/main: RakuAST: ensure that pod blocks are generated in right order

[23:13] <Geth> ¦ rakudo/main: 

[23:13] <Geth> ¦ rakudo/main: By giving each RakuAST::Doc block that will be generated into Pod::

[23:13] <Geth> ¦ rakudo/main: objects an ordinal number at the moment they're created, and use that

[23:13] <Geth> ¦ rakudo/main: number as in index into $=pod.

[23:13] <Geth> ¦ rakudo/main: 

[23:13] <Geth> ¦ rakudo/main: Sadly, not all created RakuAST::Doc blocks get the CHECK handling

[23:13] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[23:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a2102a963a

[23:13] <lizmat> 821!

[23:35] *** gfldex joined
