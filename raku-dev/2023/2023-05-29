[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:17] *** timo left
[00:18] *** timo joined
[00:27] *** timo left
[00:28] *** timo joined
[01:20] *** MasterDuke joined
[02:16] *** Xliff left
[04:18] *** evalable6 left
[04:18] *** linkable6 left
[04:19] *** linkable6 joined
[04:19] *** evalable6 joined
[06:00] *** lizmat left
[06:00] *** vrurg left
[06:00] *** rypervenche left
[06:00] *** gfldex left
[06:00] *** lucs left
[06:00] *** JRaspass left
[06:00] *** lucs joined
[06:00] *** reportable6 left
[06:00] *** gfldex joined
[06:00] *** rypervenche joined
[06:00] *** JRaspass joined
[06:01] *** vrurg joined
[06:01] *** rypervenche left
[06:01] *** rypervenche joined
[06:01] *** reportable6 joined
[06:01] *** lizmat joined
[07:24] *** squashable6 left
[07:26] *** squashable6 joined
[08:51] <Geth> ¦ rakudo/main: ba7f659c58 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[08:51] <Geth> ¦ rakudo/main: RakuAST: don't use named subs for .map/.grep/.first

[08:51] <Geth> ¦ rakudo/main: 

[08:51] <Geth> ¦ rakudo/main: Nudged by gfldex++

[08:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ba7f659c58

[09:57] *** quotable6 left
[09:57] *** reportable6 left
[09:57] *** squashable6 left
[09:57] *** bloatable6 left
[09:57] *** bisectable6 left
[09:57] *** linkable6 left
[09:57] *** greppable6 left
[09:57] *** statisfiable6 left
[09:57] *** unicodable6 left
[09:57] *** tellable6 left
[09:57] *** evalable6 left
[09:57] *** sourceable6 left
[09:57] *** releasable6 left
[09:57] *** shareable6 left
[09:57] *** benchable6 left
[09:57] *** notable6 left
[09:57] *** nativecallable6 left
[09:57] *** coverable6 left
[09:57] *** committable6 left
[09:57] *** committable6 joined
[09:57] *** squashable6 joined
[09:57] *** notable6 joined
[09:57] *** statisfiable6 joined
[09:58] *** linkable6 joined
[09:58] *** bloatable6 joined
[09:58] *** unicodable6 joined
[09:58] *** releasable6 joined
[09:58] *** nativecallable6 joined
[09:58] *** coverable6 joined
[09:59] *** evalable6 joined
[09:59] *** benchable6 joined
[09:59] *** greppable6 joined
[09:59] *** shareable6 joined
[09:59] *** tellable6 joined
[09:59] *** bisectable6 joined
[09:59] *** reportable6 joined
[09:59] *** sourceable6 joined
[10:00] *** quotable6 joined
[10:03] <gfldex> lizmat: While we are at the subject of nudging. I do like .visit-children, but I don't like its name and interface. How about `method gather-children(&taker, :$deep)` ?

[10:03] <lizmat> how about .grep ?

[10:03] <lizmat> that's already in HEAD

[10:04] <lizmat> as is .map and .first on RakuAST Nodes

[10:04] <lizmat> and a dynamic variable @*LINEAGE that shows all of the ancestry

[10:04] <gfldex> I would not expect `.grep` to require a `take`.

[10:05] <lizmat> it doesn't

[10:05] <lizmat> the .map / .grep / first embed the gather and let the map / grep / first logic do the take

[10:06] <lizmat> your code just needs to return True/False (in the case of .grep / .first) or the value that you want produced (in the case of .map_

[10:07] <gfldex> Is there a way to introspect if a Code sports CX::Take?

[10:07] <lizmat> $*CU.map: { .paragraphs.Str if $_ ~~ RakuAST::Doc::Block }   would produce all the text from doc blocks

[10:08] <lizmat> gfldex: you mean, whether there's a 'take' inside?

[10:09] <gfldex> yes

[10:10] <lizmat> something like:

[10:12] <lizmat> $*CU.grep: { $_ ~~ RakuAST::Blockoid && .first({ $_ ~~ RakuAST::Call::Name && .name eq 'take' }) }

[10:13] <gfldex> Also, a :$deep flag could indicate that I want .grep/.map/.first to decent into children.

[10:15] <lizmat> yeah, I've been considering something like that, just contemplating the name

[10:24] <lizmat> perhaps :depth-first ?

[10:43] <gfldex> `multi method grep(&matcher, :$breadth = True, :$gather = False) {}; multi method grep(&matcher, :$depth = True, :$gather = False) {}; method gather(&taker, *%_) { self.grep(&taker, :gather, |%_) }`

[10:43] <gfldex> lizmat: maybe like this ^^^

[10:46] <lizmat> what would that bring over the functionality that is already in .map/.grep/.first in HEAD (apart from a :depth-first argument that I'm currently testing

[10:46] <lizmat> )

[10:46] <lizmat> ?

[10:53] <Geth> ¦ rakudo/main: 8099dd3c00 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[10:53] <Geth> ¦ rakudo/main: RakuAST: add :depth-first argument to .map/.grep/.first

[10:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8099dd3c00

[10:53] <lizmat> meh  just found out that my test result checker didn't catch a regression

[11:36] <lizmat> 213bacbb14fa6b6ca5f7d109e7713dcc802a82fc broke it, so only since 16:00 yesterday *phew*

[11:37] *** linkable6 left
[11:39] *** linkable6 joined
[11:59] <Geth> ¦ rakudo/main: 1fd990fb01 | (Elizabeth Mattijsen)++ | src/Raku/ast/doc-block.rakumod

[11:59] <Geth> ¦ rakudo/main: RakuAST: don't let ::Doc::Block descend into ::Doc::Blocks

[11:59] <Geth> ¦ rakudo/main: 

[11:59] <Geth> ¦ rakudo/main: To fix an issue with production of $=pod that was introduced with

[11:59] <Geth> ¦ rakudo/main: 213bacbb14fa6b6ca5f7d109e7713dcc802a82fc .  Still not sure whether

[11:59] <Geth> ¦ rakudo/main: this is the correct solution, as this feels icky.  But it will

[11:59] <Geth> ¦ rakudo/main: unbreak the spectests that were broken for now.

[11:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1fd990fb01

[12:00] *** reportable6 left
[12:02] *** codesections1 joined
[12:02] *** reportable6 joined
[12:03] *** codesections left
[12:03] *** codesections1 is now known as codesections

[12:08] *** codesections1 joined
[12:10] *** codesections left
[12:10] *** codesections1 is now known as codesections

[12:12] *** codesections1 joined
[12:14] *** codesections left
[12:15] *** codesections joined
[12:17] *** codesections1 left
[12:18] *** kurahaupo left
[12:20] *** kurahaupo joined
[12:22] <leont> lizmat: If I understand your code correctly, it doesn't make a breadth-first/depth-first distinction, but a pre-order/post-order one

[12:33] *** codesections1 joined
[12:34] *** codesections left
[12:34] *** codesections1 is now known as codesections

[12:39] <lizmat> with depth-first, it first visits all of the children before handling the invocant

[12:39] <lizmat> that's going deep first, is it not ?

[12:57] *** codesections1 joined
[12:59] *** codesections left
[12:59] *** codesections1 is now known as codesections

[13:23] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/05/29/2023-22-rakuast-rolling/

[13:59] *** linkable6 left
[13:59] *** evalable6 left
[13:59] *** linkable6 joined
[14:01] *** evalable6 joined
[14:20] *** Xliff joined
[14:28] <Geth> ¦ rakudo/main: 6325d10f41 | (Elizabeth Mattijsen)++ | src/Raku/ast/variable-declaration.rakumod

[14:28] <Geth> ¦ rakudo/main: RakUAST: remove some dead code

[14:28] <Geth> ¦ rakudo/main: 

[14:28] <Geth> ¦ rakudo/main: The check whether it was initialized, is not necessary anymore.  And

[14:28] <Geth> ¦ rakudo/main: also if it was not initialized, it would have bombed as the indicated

[14:28] <Geth> ¦ rakudo/main: method does not exist.

[14:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6325d10f41

[14:36] *** codesections1 joined
[14:38] *** codesections left
[14:38] *** codesections1 is now known as codesections

[16:14] <leont> lizmat: I used to think so too, but apparently not. See https://en.wikipedia.org/wiki/Depth-first_search#Output_of_a_depth-first_search

[16:32] <Geth> ¦ rakudo/main: a78234e1c0 | (Elizabeth Mattijsen)++ | 5 files

[16:32] <Geth> ¦ rakudo/main: RakuAST: add support for $=data as described in S26

[16:32] <Geth> ¦ rakudo/main: 

[16:32] <Geth> ¦ rakudo/main: With RakuAST this became almost trivial to implement, so I did.

[16:32] <Geth> ¦ rakudo/main: 

[16:32] <Geth> ¦ rakudo/main: This also adds a Pod::Data class, that works both as an Array as well

[16:32] <Geth> ¦ rakudo/main: as a Hash.  Perhaps this functionality should be made more general,

[16:32] <Geth> ¦ rakudo/main: e.g. as a HashArray or Hashray class?

[16:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a78234e1c0

[16:34] <lizmat> leont: well, I don't see a way to provide a different functionality than now offered with :depth-first, other than controlling the calling of .visit-children yourself

[16:38] *** linkable6 left
[16:38] *** evalable6 left
[16:38] *** linkable6 joined
[16:38] <leont> I don't mean to suggest it's doing the wrong thing, it's just using an incorrect name for the right thing.

[16:39] <lizmat> ok, so depth-first should be called pre-ordered ?

[16:41] *** evalable6 joined
[16:41] <Geth> ¦ nqp/main: 4f0c01f7ce | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[16:41] <Geth> ¦ nqp/main: Bump MoarVM to get timo++'s optimization

[16:41] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/4f0c01f7ce

[16:42] <leont> No, post-order

[16:58] <Geth> ¦ rakudo/main: 13b9a6bcd8 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[16:58] <Geth> ¦ rakudo/main: Bump NQP to get timo++'s latest MoarVM updates

[16:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/13b9a6bcd8

[17:07] <Geth> ¦ rakudo/main: 65dc1204f2 | (Elizabeth Mattijsen)++ | src/Raku/ast/doc-block.rakumod

[17:07] <Geth> ¦ rakudo/main: RakuAST: must keep =data entries in $=pod

[17:07] <Geth> ¦ rakudo/main: 

[17:07] <Geth> ¦ rakudo/main: To remain compatible with any code that expects to lift =data sections

[17:07] <Geth> ¦ rakudo/main: out of $=pod

[17:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/65dc1204f2

[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:32] *** codesections1 joined
[18:35] *** codesections left
[18:35] *** codesections1 is now known as codesections

[20:40] *** kurahaupo left
[20:45] *** kurahaupo joined
