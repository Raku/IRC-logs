[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:44] *** Voldenet left
[00:44] *** Voldenet joined
[02:33] *** committable6 left
[02:33] *** linkable6 left
[02:33] *** sourceable6 left
[02:33] *** statisfiable6 left
[02:33] *** benchable6 left
[02:33] *** bisectable6 left
[02:33] *** quotable6 left
[02:33] *** squashable6 left
[02:33] *** unicodable6 left
[02:33] *** coverable6 left
[02:33] *** releasable6 left
[02:33] *** bloatable6 left
[02:33] *** tellable6 left
[02:33] *** shareable6 left
[02:33] *** greppable6 left
[02:33] *** notable6 left
[02:33] *** evalable6 left
[02:33] *** nativecallable6 left
[02:33] *** reportable6 left
[02:34] *** quotable6 joined
[02:34] *** reportable6 joined
[02:34] *** evalable6 joined
[02:34] *** coverable6 joined
[02:34] *** shareable6 joined
[02:34] *** linkable6 joined
[02:34] *** benchable6 joined
[02:34] *** unicodable6 joined
[02:35] *** committable6 joined
[02:35] *** notable6 joined
[02:35] *** tellable6 joined
[02:35] *** greppable6 joined
[02:35] *** nativecallable6 joined
[02:35] *** bloatable6 joined
[02:35] *** sourceable6 joined
[02:35] *** bisectable6 joined
[02:36] *** statisfiable6 joined
[02:36] *** squashable6 joined
[02:36] *** releasable6 joined
[04:40] *** quotable6 left
[04:40] *** statisfiable6 left
[04:40] *** reportable6 left
[04:40] *** bisectable6 left
[04:40] *** evalable6 left
[04:40] *** committable6 left
[04:40] *** nativecallable6 left
[04:40] *** greppable6 left
[04:40] *** benchable6 left
[04:40] *** tellable6 left
[04:40] *** notable6 left
[04:40] *** sourceable6 left
[04:40] *** shareable6 left
[04:40] *** linkable6 left
[04:40] *** unicodable6 left
[04:40] *** coverable6 left
[04:40] *** squashable6 left
[04:40] *** releasable6 left
[04:40] *** bloatable6 left
[04:40] *** evalable6 joined
[04:40] *** unicodable6 joined
[04:41] *** quotable6 joined
[04:41] *** committable6 joined
[04:41] *** benchable6 joined
[04:41] *** notable6 joined
[04:41] *** tellable6 joined
[04:41] *** coverable6 joined
[04:42] *** squashable6 joined
[04:42] *** bisectable6 joined
[04:42] *** bloatable6 joined
[04:42] *** reportable6 joined
[04:42] *** releasable6 joined
[04:42] *** statisfiable6 joined
[04:43] *** linkable6 joined
[04:43] *** nativecallable6 joined
[04:43] *** shareable6 joined
[04:43] *** greppable6 joined
[04:43] *** sourceable6 joined
[05:43] *** reportable6 left
[05:43] *** evalable6 left
[05:43] *** tellable6 left
[05:43] *** committable6 left
[05:43] *** bloatable6 left
[05:43] *** unicodable6 left
[05:43] *** greppable6 left
[05:43] *** notable6 left
[05:43] *** sourceable6 left
[05:43] *** shareable6 left
[05:43] *** statisfiable6 left
[05:43] *** nativecallable6 left
[05:43] *** benchable6 left
[05:43] *** quotable6 left
[05:43] *** coverable6 left
[05:43] *** linkable6 left
[05:43] *** bisectable6 left
[05:43] *** releasable6 left
[05:44] *** committable6 joined
[05:44] *** evalable6 joined
[05:44] *** unicodable6 joined
[05:44] *** benchable6 joined
[05:44] *** shareable6 joined
[05:44] *** sourceable6 joined
[05:45] *** tellable6 joined
[05:45] *** releasable6 joined
[05:45] *** reportable6 joined
[05:45] *** greppable6 joined
[05:45] *** linkable6 joined
[05:45] *** statisfiable6 joined
[05:45] *** quotable6 joined
[05:45] *** coverable6 joined
[05:46] *** nativecallable6 joined
[05:46] *** bloatable6 joined
[05:46] *** bisectable6 joined
[05:46] *** notable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:53] <nine> Why wouldn't they be? You already have a resolver. That can give you those exception classes

[10:41] *** evalable6 left
[10:41] *** linkable6 left
[10:42] *** linkable6 joined
[10:43] *** evalable6 joined
[11:01] *** ab5tract joined
[11:02] <ab5tract> nine: Any other low-hanging fruit that for RakuAST that you aren't working on?

[11:04] <lizmat> fwiw, I'm working on RakuAST::Type::Setting to actually do a setting lookup only

[11:04] <lizmat> which has some interesting bootstrap issues

[11:15] <ab5tract> lizmat++

[11:15] <ab5tract> Bootstrap Issues == Implementor Torment Inevitable

[11:37] *** ab5tract left
[11:42] <Geth> ¦ rakudo/main: bc481335ba | (Elizabeth Mattijsen)++ | 2 files

[11:42] <Geth> ¦ rakudo/main: RakuAST: make single part setting lookups work

[11:42] <Geth> ¦ rakudo/main: 

[11:42] <Geth> ¦ rakudo/main: The multi-part one still fails, but that's code in the resolver that

[11:42] <Geth> ¦ rakudo/main: will need closer scrutiny

[11:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bc481335ba

[11:42] <lizmat> afk&

[11:45] *** sena_kun joined
[11:56] *** ab5tract joined
[12:00] *** reportable6 left
[12:01] *** timo1 left
[12:02] *** reportable6 joined
[12:07] *** ab5tract left
[12:08] *** timo1 joined
[12:15] *** ab5tract joined
[12:38] *** ab5tract left
[12:38] *** ab5tract joined
[13:09] *** ab5tract left
[13:13] *** ab5tract joined
[13:19] <[Coke]> any pointers on how to do the lookup?

[13:22] <[Coke]> I tried copycatting some others (was on a different laptop so I don't have the exact code), but my attempts compiled but failed to find the class.

[13:24] *** timo1 left
[13:24] *** timo1 joined
[13:29] <nine> ab5tract: I don't know about low hanging. But I'd love for someone to take charge on POD.

[13:50] <discord-raku-bot> <Nemokosch> Are the nodes also missing?

[14:12] *** ab5tract left
[14:35] *** ab5tract joined
[14:48] *** patrickb left
[14:51] *** patrickb joined
[15:03] *** ab5tract left
[15:17] *** ab5tract joined
[15:50] *** patrickb left
[15:56] *** patrickb joined
[16:28] <lizmat> m: my class IO::Path { }; dd MY::<IO>.HOW<Path>.^methods.elems   # I sorta expected to see 1 here (for BUILDALL)

[16:28] <camelia> rakudo-moar bc481335b: OUTPUT: «87␤»

[16:28] <lizmat> nine vrurg ^^  is that to be expected?

[16:29] <lizmat> in other words: we cannot lexically shadow multi part names?

[16:33] <lizmat> m: my class IO::Path { }; dd MY::<IO>.HOW<Path>   # looks like ^methods falls back to the setting ?

[16:33] <camelia> rakudo-moar bc481335b: OUTPUT: «Failure.new(exception => X::AdHoc.new(payload => "Type Perl6::Metamodel::ClassHOW does not support associative indexing."), backtrace => Backtrace.new)␤»

[16:33] <lizmat> argh

[16:34] <lizmat> argh  HOW/WHO mixup again

[16:43] <[Tux]> Rakudo v2022.12-1-gd52342eb0 (v6.d) on MoarVM 2023.02-3-g6adfc376c

[16:43] <[Tux]> csv-test-xs-20      0.417 -  0.440

[16:43] <[Tux]> csv-ip5xs           0.807 -  0.835

[16:43] <[Tux]> test-t --race       0.821 -  0.921

[16:43] <[Tux]> test-t              1.463 -  1.472

[16:43] <[Tux]> csv-parser          4.113 -  4.164

[16:43] <[Tux]> csv-ip5xs-20        5.506 -  5.720

[16:43] <[Tux]> test                6.299 -  6.621

[16:43] <[Tux]> test-t-20 --race    7.021 -  7.357

[16:43] <[Tux]> test-t-20          20.528 - 21.369

[16:43] *** ab5tract left
[16:45] *** ab5tract joined
[17:12] *** japhb left
[17:22] *** codesections left
[17:23] *** japhb joined
[17:46] <lizmat> m: my class IO::Path { }; dd IO::Path.WHERE; dd IO.WHO<Path>.WHERE; dd SETTING::<IO>.WHO<Path>.WHERE   # nine vrurg  shouldn't that last one be different ?

[17:46] <camelia> rakudo-moar bc481335b: OUTPUT: «2924936958752␤2924936958752␤2924936958752␤»

[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:31] <lizmat> m: BEGIN dd IO::Path.WHERE; my class IO::Path { }; dd IO::Path.WHERE; dd IO.WHO<Path>.WHERE; dd SETTING::<IO>.WHO<Path>.WHERE

[18:31] <camelia> rakudo-moar bc481335b: OUTPUT: «3881366585920␤3881419809824␤3881419809824␤3881419809824␤»

[18:31] <lizmat> more extensive: the first one is the one from the setting, the last one is the local one, which it shouldn't be ?

[18:34] <lizmat> since this is broken with the current grammar as well, I'm  not going to be spending more time on that now

[18:46] <vrurg> lizmat: it's not broken. You override IO namespace.

[18:46] <Geth> ¦ rakudo/main: 3a9c1540de | (Elizabeth Mattijsen)++ | src/Raku/ast/resolver.rakumod

[18:46] <Geth> ¦ rakudo/main: RakuAST: streamline constant lookup in resolver

[18:46] <Geth> ¦ rakudo/main: 

[18:46] <Geth> ¦ rakudo/main: Specifically the IMPL-RESOLVE-NAME-CONSTANT method, with reduction

[18:46] <Geth> ¦ rakudo/main: of duplicated code, and support for partial lookups added.

[18:46] <Geth> ¦ rakudo/main: 

[18:46] <Geth> ¦ rakudo/main: The IMPL-PARTIALLY-RESOLVE-NAME-CONSTANT method is removed.

[18:46] <Geth> ¦ rakudo/main: 

[18:46] <Geth> ¦ rakudo/main: <…commit message has 18 more lines…>

[18:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a9c1540de

[18:47] <vrurg> I mean, it's not a bug with SETTING::, it's a bug with my-scoping of multi-part declarations.

[18:47] <lizmat> well, it's not a bug in RakuAST, so I won't be spending any time on it further for now

[18:48] <lizmat> afk&

[18:48] <vrurg> Likely so.

[20:09] <tbrowder__>  I'm working on a calendar module, and Isee a need for a couple of missing methods on the Dateish role. if I'm not mistaken, there is no routine for giving the total number of full and partial weeks in a month. in the Gregorian calendar. That would be the number of rows shown in a conventional monthly calendar layout.

[20:10] <tbrowder__> I would be happy to file a Rakudo issue and take on the PR if there is any support for the idea.

[20:12] <tbrowder__> in the meantime i will add them to my Date::Utils module

[20:34] <[Coke]> I don't think that needs to be in core, my 2¢

[20:45] *** timo1 left
[20:46] *** timo1 joined
[21:08] <nine> Multi part names and lexicals don't mix well. As the stash that final symbol will installed into may be a global.

[21:12] <nine> lizmat: I have thought on and off about this since I first discovered this behavior, but haven't come up with any alternative that would work better. I often arrive at "maybe Perl actually did this right", i.e. that nested stashes are maybe not worth it. But then, apparently in real-life code it doesn't really cause problems either.

[21:14] *** djinni` left
[21:22] *** sena_kun left
[21:32] <vrurg> I thought that perhaps it would be better to install symbols in lexical scope. This would then require duplicating the whole IO namespace into the lexical scope. Never got to the point of considering all possible side effects and problem though.

[21:36] *** djinni` joined
