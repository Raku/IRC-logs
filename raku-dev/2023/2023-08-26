[00:00] *** jgaz left
[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:01] *** jgaz joined
[00:03] <discord-raku-bot> <nemokosch> if you wouldn't have expected it then all hope is lost, pretty much

[00:03] <discord-raku-bot> <nemokosch> there are like 5 people who dare to touch code like that, you included

[00:06] <MasterDuke> eh. i've never claimed to have a truly deep understanding of things. i sort of operate on the principle that wild experimentation can get you far when test coverage is decent

[00:07] <MasterDuke> with a new change i've just managed to make it not any faster, but wrong

[00:08] <MasterDuke> i once was scared to even try touching compilers, etc. but then i realized they're just code. and i can modify code

[00:09] <discord-raku-bot> <nemokosch> either way, you are among the very few people who are managing with a pretty thankless job so... thank you, I guess

[00:09] <discord-raku-bot> <nemokosch> everybody who commits to MoarVM should be compensated at this point tbh

[00:10] <MasterDuke> i mean i wouldn't say no. but i do find it fun regardless

[00:13] <discord-raku-bot> <nemokosch> John Benediktsson is also one of a kind, for sure... I don't know how he even knows NQP, like is it possible that somebody starts writing compiler code in a highly unfamiliar language only going by common sense...

[00:35] <MasterDuke> but that's kind of what i mean. there's nothing terribly "compiler" specific about that code. it's just an implementation of an algorithm for generating combinations

[00:37] <discord-raku-bot> <nemokosch> yeah but even nqp ops are kind of underdocumented

[00:37] <MasterDuke> sure, it's not quite as simple as the pseudo-code in a wikipedia article, but it's not as specific as assembly for one particular architecture

[00:37] <discord-raku-bot> <nemokosch> besides the language not being very pleasant to work with, and having no API reference

[00:39] <MasterDuke> sure, i'm not saying my 6 year old is going to be submitting PRs on her first day programming. but it's not beyond the ability of anybody who's interested and is willing to spend *some* non-zero amount of time figuring out what's going on

[00:41] <MasterDuke> i mean the business rules that the "average" programmer implements in some corporate codebase are *very* likely more byzantine, less regular, and worse documented than raku

[00:42] <discord-raku-bot> <nemokosch> Raku sure, and in general the core library is readable at the very least

[00:42] <MasterDuke> but they have the time (usually ~8h/day) and incentive (a paycheck) to figure things out

[00:42] <discord-raku-bot> <nemokosch> but the same couldn't be said about NQP, and that shows by the number of people involved

[00:43] <discord-raku-bot> <nemokosch> NQP is actually kind of a read-only language at this point

[00:43] <MasterDuke> but it's not because the code they're figuring out is any less complicated

[00:43] <MasterDuke> so it's not a matter of ability

[00:44] <discord-raku-bot> <nemokosch> I don't know. At my previous workplace, I had to read disproportionally more code than to write it. And at my current workplace, frankly the design is better and I receive much more help

[00:45] <MasterDuke> now that's not to completely trivialize the endeavor. you do have to spend some time. but i'm just saying it's not a task that *requires* some next-level programmer just to make *any* progress

[00:45] <discord-raku-bot> <nemokosch> even Ada code can be written when it has a clear design and you can ask for help when you are completely lost how the pieces are put together

[00:47] <discord-raku-bot> <nemokosch> I think it does require a nontrivial level of cope, besides the incentives that you mentioned

[00:47] <MasterDuke> we're more hampered by geographical (and therefore timezone) distance among the participants than most workplaces

[00:48] <MasterDuke> which is just exacerbated by the fact that most people don't have 8h/day. so the hours they do have are less likely to overlap with everybody else

[00:48] <discord-raku-bot> <nemokosch> the incentive is at least as surprising for a complete outsider; however, being used to working compilers might help coping with the mere discomfort of something unfamiliar and barely accessible

[00:49] <discord-raku-bot> <nemokosch> I mean, you are like the living example. You have more experience with it than the vast majority of us, and you are getting clueless results

[00:50] <discord-raku-bot> <nemokosch> If I were to be honest, I definitely wouldn't have the patience or motivation for that

[00:51] <MasterDuke> sure. i'm not saying this work is trivial. it's just -- from personl experience -- less *exotic* than i thought before i did in fact dip my toes in

[00:52] <MasterDuke> and someone ironically, the very first reason i got involved was because the combination() implementation back in ~2016 was even slower. generating the source code for the necessary number of nested loops and EVAL()ing it was faster

[00:53] <MasterDuke> my first module did in fact do just that

[00:57] <MasterDuke> thankfully that was quickly made obsolete

[01:00] <discord-raku-bot> <nemokosch> "but at what cost"

[01:01] <discord-raku-bot> <nemokosch> what desperately dropped, I think, is the accessability and maintenance of lower layers of Raku execution

[01:01] <discord-raku-bot> <nemokosch> especially the bytecode VMs

[01:01] <elcaro> FWIW, I don't get paid to code, not even part of my job, I picked it up as a hobby... Yet I wrote a few combinatoric sequence generators in NQP looking at the  nqp.ops doc

[01:01] <elcaro> which back then was probably less documented.

[01:02] <discord-raku-bot> <nemokosch> you are the exception, though, not the rule

[01:02] <elcaro> NQP isn't really that hard to pick up, it's like a lisp (and about as readable... but I don't find lisps very readable either)

[01:02] <elcaro> (Rich coming from the guy who like J)

[01:04] <discord-raku-bot> <nemokosch> I wished I could just pick it up but all I see is files in a random structure with no explanation whatsoever

[01:04] <discord-raku-bot> <nemokosch> I remember that there was a "documentation" file with the disclaimer that it's outdated, also not too encouraging

[01:04] <discord-raku-bot> <nemokosch> I guess it could work but is it so wrong that I would rather explore it the way Rakudo core can be explored?

[01:05] <discord-raku-bot> <nemokosch> for which I would need to at least know the architecture

[01:05] <discord-raku-bot> <nemokosch> best case somebody will dig out a presentation from 10 years ago

[01:05] <discord-raku-bot> <nemokosch> it's really just not actively taken care of

[01:07] *** [Coke] left
[01:08] <discord-raku-bot> <nemokosch> and frankly, I'm kind of making excuses, right? I wish it was well-maintained enough that I didn't have to even worry about it, but it isn't.

[01:13] * vrurg is thinking about all that old days explorers and scientists and all the docs they had back then... ;)

[01:14] <discord-raku-bot> <nemokosch> must be the nostalgia to the old days that the very few people maintaining Raku-related tools document so little

[01:14] <discord-raku-bot> <nemokosch> and invest so little into getting others involved

[01:16] <discord-raku-bot> <nemokosch> it was probably way easier to find explorers and scientists when the motto was "let's redesign our favorite scripting language, one of the biggest on the market"

[01:17] <vrurg> My note was about Columbus, Marko Polo, Copernicus, and so on. Speaking of "not getting others involved" – well, as everybody has a job which barely pays for working on the compiler itself, we have to chose priorities.

[01:18] <discord-raku-bot> <nemokosch> wouldn't the same thing apply even more for people who have no "sunk cost" in Raku development?

[01:20] <vrurg> what do you mean by that?

[01:21] <discord-raku-bot> <nemokosch> that there are no people in the outer world lurking around with no jobs or infinite money, only waiting to learn and rebuild Raku

[01:22] <discord-raku-bot> <nemokosch> the risks and effort of investment is only higher

[01:23] <vrurg> Anyway, speaking of the docs for the core, etc. I didn't follow the discussion here, but my own path to the compiler started with me wanting to get lazy attribute initialization. Step by step, I started with Metamodel::ClassHOW sources. Sure thing, it takes a lot of time at the beginning to add debug prints, compile, test run. Often times – grep for something. But I'm not sure that any docs could substitute this experience.

[01:23] <vrurg> The only reasoning I had: I like the language.

[01:24] <discord-raku-bot> <nemokosch> it's really great what some people are capable of surely

[01:25] <discord-raku-bot> <nemokosch> but all in all, people like you are rare, and it almost seems like they are only getting more rare

[01:26] <discord-raku-bot> <nemokosch> maybe it's because they have their own particular interests and build stuff like Factor, in this example with Mr Benediktsson

[01:26] <vrurg> Oh, that's the point. At the beginning I was as much afraid of getting into the guts of a compiler as MasterDuke was or as you, probably, are now. But, as I said: baby steps.

[01:28] <discord-raku-bot> <nemokosch> I also never wanted to get involved in the development and honestly, I can probably tackle a couple of things in the core if need be but it's more a "power user" knowledge, and even that with huge holes with regards to stuff I don't use, like OO

[01:29] <discord-raku-bot> <nemokosch> I guess there are several people like that, and this is why I think the Rakudo core isn't that much "endangered". However, the VMs are

[01:32] <discord-raku-bot> <nemokosch> very few regular contributors, a huge pile of PRs that will probably never get merged

[01:33] <discord-raku-bot> <nemokosch> and this is MoarVM, JS is rather a myth and JVM is in coma since the unfortunate fate of Kaiepi

[01:36] *** hythm76 left
[02:02] <MasterDuke> yeah, that was sad. and pmurias kind of dropped out after getting an industry job. i was pretty excited for the truffle possibilities

[02:36] *** linkable6 left
[02:36] *** evalable6 left
[02:36] *** linkable6 joined
[02:39] *** evalable6 joined
[02:44] <vrurg> .tell ab5tract I mislead you a bit by forgetting that S ~~ R case is about RakuAST. This is clearly about src/Raku/ast/expressions.rakumod, IMPL-SMARTMATCH-QAST.

[02:44] <tellable6> vrurg, I'll pass your message to ab5tract

[04:14] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5361: Un-nqpify *.combinations() without slowing it down

[04:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5361

[04:46] *** evalable6 left
[04:46] *** linkable6 left
[04:47] *** linkable6 joined
[04:47] *** evalable6 joined
[05:14] *** ugexe left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[08:23] *** sena_kun joined
[09:23] *** committable6 left
[09:23] *** tellable6 left
[09:23] *** reportable6 left
[09:23] *** nativecallable6 left
[09:23] *** releasable6 left
[09:23] *** sourceable6 left
[09:23] *** benchable6 left
[09:23] *** bloatable6 left
[09:23] *** squashable6 left
[09:23] *** unicodable6 left
[09:23] *** quotable6 left
[09:23] *** notable6 left
[09:23] *** coverable6 left
[09:23] *** shareable6 left
[09:23] *** evalable6 left
[09:23] *** statisfiable6 left
[09:23] *** linkable6 left
[09:23] *** greppable6 left
[09:23] *** bisectable6 left
[09:24] *** linkable6 joined
[09:24] *** unicodable6 joined
[09:24] *** quotable6 joined
[09:24] *** committable6 joined
[09:25] *** squashable6 joined
[09:25] *** sourceable6 joined
[09:25] *** bisectable6 joined
[09:25] *** coverable6 joined
[09:25] *** evalable6 joined
[09:25] *** bloatable6 joined
[09:25] *** reportable6 joined
[09:25] *** shareable6 joined
[09:25] *** nativecallable6 joined
[09:26] *** statisfiable6 joined
[09:26] *** notable6 joined
[09:26] *** tellable6 joined
[09:26] *** greppable6 joined
[09:26] *** releasable6 joined
[09:26] *** benchable6 joined
[09:58] *** sena_kun left
[10:04] <ab5tract> thanks vrurg!

[10:04] <tellable6> 2023-08-26T02:44:30Z #raku-dev <vrurg> ab5tract I mislead you a bit by forgetting that S ~~ R case is about RakuAST. This is clearly about src/Raku/ast/expressions.rakumod, IMPL-SMARTMATCH-QAST.

[10:24] <ab5tract> vrurg, not sure that it is actually related to the expressions code though... T.ACCEPTS(S) fails, implying that the call is made correctly, it's that some other little switch did not get flipped somewhere

[10:25] <ab5tract> my first instinct is that something is not toggled properly during role setup in package.rakumod

[10:25] <ab5tract> small nit: some of the Raku/ast files are plural, most are singular

[10:26] <ab5tract> pinging the elusive Mr. nine to see if he has any thoughts

[10:26] <ab5tract> (on S ~~ R)

[10:48] <ab5tract> I may have fixed it.. looking for regressions now

[11:04] <ab5tract> meh, the fix currently causes 7 tests to fail :/

[11:05] <ab5tract> lizmat: we were up to 937, right? :)

[11:05] <ab5tract> just double checking that what I have locally for base matches

[11:12] <ab5tract> hmm, according to the rakudoweekly post, I should have 938 :(

[11:14] <lizmat> 938 actually

[11:17] <ab5tract> Always great to have a discrepancy between my base and yours, lizmat ;)

[11:17] <lizmat> well, for a while nine was always 3 ahead of me  :-)

[11:17] <ab5tract> hehe

[11:18] <lizmat> so maybe we're actually at 941  :-)

[11:18] <discord-raku-bot> <nemokosch> it would be practical to take the output and upload it as a gist, for example

[11:19] <ab5tract> lizmat: I also love to figure out a fix only for it to break things lol

[11:19] <lizmat> https://gist.github.com/lizmat/e31c97b1be1a4085f8ee847489f575b9

[11:20] <discord-raku-bot> <nemokosch> thanks

[11:21] <discord-raku-bot> <nemokosch> let's see how many I get 🧐

[11:23] *** evalable6 left
[11:23] *** linkable6 left
[11:24] *** evalable6 joined
[11:24] *** linkable6 joined
[11:39] <ab5tract> lizmat: t/spec/S32-io/IO-Socket-Async.t  <-- passes on your box, not on mine

[11:42] <ab5tract> here's a quick script I wrote to help in the analysis: https://gist.github.com/ab5tract/c68a615da817efc855cc4fe6ce9e41c5

[11:42] <lizmat> I just use diff -u  :-)

[11:43] <ab5tract> :)

[11:44] <ab5tract> that certainly works. I just love how easy it is to write up a raku script that can perform the same task

[11:45] <lizmat> ab5tract++

[11:46] <ab5tract> looks like my (improved) fix for the role inheritence doesn't add any new passing tests :(

[11:46] <ab5tract> I always have that secret hope that I might fix something that affects a large number of test cases

[11:47] <discord-raku-bot> <nemokosch> that's not necessarily the fault of your fix; maybe it's an indicator of a missing test

[11:47] <ab5tract> nemokosch: indeed, that test seems to fail for me in base too :/

[11:47] <ab5tract> oh, nvm. I get what you are saying

[11:48] <discord-raku-bot> <nemokosch> if you indeed fixed something, then in an ideal world there should be a test that confirms that it was wrong previously

[11:54] <ab5tract> m: role R {}; role S does R {}; say S ~~ R

[11:54] <camelia> rakudo-moar 695b9dc46: OUTPUT: «True␤»

[11:55] <discord-raku-bot> <nemokosch> hm, is this related to that issue recently?

[11:58] <discord-raku-bot> <nemokosch> it's 937 for me as well

[11:59] <ab5tract> nemokosch: I was hoping fixing https://github.com/rakudo/rakudo/issues/5353 would fix https://github.com/rakudo/rakudo/issues/5317 in RakuAST

[12:00] <ab5tract> no such luck, however. issue seems to be somewhere on the other side of the compiler

[12:00] *** reportable6 left
[12:00] <ab5tract> is it the same file which fails? IO-Socket-Async.t ?

[12:00] <discord-raku-bot> <nemokosch> oh yeah, I was thinking of that "does chaining" issue

[12:00] *** reportable6 joined
[12:01] <ab5tract> ah, I haven't seen that one

[12:01] <discord-raku-bot> <nemokosch> no, it's something else, first I just checked if it's that one

[12:01] <discord-raku-bot> <nemokosch> I meant 5317 too 🙂

[12:05] <discord-raku-bot> <nemokosch> > t/spec/S28-named-variables/init-instant.t ......................... ok

[12:05] <discord-raku-bot> <nemokosch> > t/spec/S28-named-variables/init-instant.t                       (Wstat: 256 Tests: 3 Failed: 1) >   Failed test:  3 >   Non-zero exit status: 1

[12:06] <lizmat> I'm on MacOS, maybe that has something to do with it?

[12:06] <discord-raku-bot> <nemokosch> this sounds like a test that can be environment sensitive

[12:07] <discord-raku-bot> <nemokosch> I'm on Ubuntu 20.04 in WSL2

[12:08] <lizmat> and that test file passes without RakuAST in that environment ?

[12:09] <discord-raku-bot> <nemokosch> I can just run it with a vanilla raku call, right?

[12:09] <lizmat> yup

[12:11] <discord-raku-bot> <nemokosch> it passes... but actually, it passes with the local rakudo-m as well

[12:11] <discord-raku-bot> <nemokosch> so either the test harness or the scheduling of the tests, I guess

[12:14] <discord-raku-bot> <nemokosch> ah no sorry, big stupid happened

[12:15] <discord-raku-bot> <nemokosch> rakudo-m still pointed at the installed instance

[12:15] <discord-raku-bot> <nemokosch> but regardless... ./rakudo-m -Ilib t/spec/S28-named-variables/init-instant.t also passes

[12:38] <ab5tract> that's curious indeed

[12:38] <ab5tract> is there an easy way to maintain fudging but still run against a single spec test file?

[12:41] <lizmat> run the file with the .rakudo.moar extension ?

[12:44] <ab5tract> hmm.. ok

[12:45] <ab5tract> I was hoping for a make target or something :)

[12:45] <lizmat> make t/spec/foo/bar.t   should also work

[12:45] <lizmat> that will re-apply the fudging, which is something you may or may not want?

[12:47] <ab5tract> that's exactly what I want, thanks!

[12:53] <Geth> ¦ rakudo/main: c9eb59535b | (Elizabeth Mattijsen)++ | 3 files

[12:53] <Geth> ¦ rakudo/main: Make sure OperatorProperties are set on new 6.e operators

[12:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c9eb59535b

[13:00] *** linkable6 left
[13:00] *** evalable6 left
[13:01] *** evalable6 joined
[13:01] <Geth> ¦ rakudo/main: e7df63a4a8 | (Elizabeth Mattijsen)++ | 4 files

[13:01] <Geth> ¦ rakudo/main: RakuAST: refactor OperatorProperties internals

[13:01] <Geth> ¦ rakudo/main: 

[13:01] <Geth> ¦ rakudo/main: - reduce to only a single class with methods

[13:01] <Geth> ¦ rakudo/main: - reduce number of methods

[13:01] <Geth> ¦ rakudo/main: - be smarter about hash re-usage

[13:01] <Geth> ¦ rakudo/main: - add support for 6.e operators and circumfix ops

[13:01] <Geth> ¦ rakudo/main: - handle search in a single helper method

[13:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e7df63a4a8

[13:01] <lizmat> afk&

[13:02] *** linkable6 joined
[13:08] *** ugexe joined
[13:32] *** sena_kun joined
[13:46] <ab5tract> ok, so it turns out that most of the role tests aren't being run due to errors related to the dotty infix operator

[13:57] *** ugexe left
[14:05] *** ugexe joined
[14:09] <Geth> ¦ rakudo: ab5tract++ created pull request #5363: RakuAST: Fix role inheritence not working

[14:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5363

[14:39] <ab5tract> now I'm trying to fix the .= syntax issues: "No such method 'expression' for invocant of type 'RakuAST::Initializer::CallAssign'"

[14:48] <ab5tract> is there a way to toggle RAKUDO_RAKUAST=1 for camelia?

[14:49] <ab5tract> anyway, here's the failure case: role R { has $.n }; class C does R { has R $.r .= new(:$!n) }; my C $c .= new(:n(1)); dd $c

[14:53] <MasterDuke> m: run $*RAKU, "-e", "q{say q|hi|}"

[14:53] <camelia> rakudo-moar e7df63a4a: OUTPUT: «hi␤The spawned command 'Raku' exited unsuccessfully (exit code: 1, signal: 0)␤  in block <unit> at <tmp> line 1␤␤»

[14:54] <MasterDuke> might be able to use ^^^ to inject RAKUDO_RAKUAST=1 into the env

[14:54] <MasterDuke> m: %*ENV<RAKUDO_RAKUAST> = 1; run $*RAKU, "-e", "q{say q|hi|}"

[14:55] <camelia> rakudo-moar e7df63a4a: OUTPUT: «hi␤The spawned command 'Raku' exited unsuccessfully (exit code: 1, signal: 0)␤  in block <unit> at <tmp> line 1␤␤»

[14:58] <discord-raku-bot> <nemokosch> m: shell Q<RAKUDO_RAKUAST=1 raku --target=ast -e 'say "HELLO"'>

[14:58] <discord-raku-bot> <nemokosch> oops

[14:58] <discord-raku-bot> <nemokosch> let's give it a shot still

[14:59] *** NemokoschKiwi joined
[14:59] <NemokoschKiwi> m: shell Q<RAKUDO_RAKUAST=1 raku --target=ast -e 'say "HELLO"'>

[14:59] <camelia> rakudo-moar e7df63a4a: OUTPUT: «- QAST::CompUnit  :W<?> :UNIT<?> :CAN_LOWER_TOPIC<?>␤  [pre_deserialize]␤    - QAST::Stmt ␤      - QAST::Stmt ␤        - QAST::Op(loadbytecode) ␤          - QAST::VM ␤            [moar]␤              - QAST::SVal(ModuleLoader.moarvm) ␤…»

[15:00] <NemokoschKiwi> apparently the native `raku` is too old

[15:01] <NemokoschKiwi> m: shell Q:scalar<RAKUDO_RAKUAST=1 $*EXECUTABLE --target=ast -e 'say "HELLO"'>

[15:01] <camelia> rakudo-moar e7df63a4a: OUTPUT: «CompUnit 𝄞 -e:1 ⎡say \"HELLO\"⎤␤  StatementList 𝄞 -e:1 ⎡say \"HELLO\"⎤␤    Statement::Expression ⚓▪𝄞 -e:1 ⎡say \"HELLO\"⎤␤      Call::Name  ⎡say \"HELLO\"⎤␤        Name  ⎡say⎤␤        ArgList  ⎡\"HELLO\"⎤…»

[15:01] <NemokoschKiwi> okay nice

[15:02] <NemokoschKiwi> $*EXECUTABLE is the one

[15:02] *** NemokoschKiwi left
[15:02] <MasterDuke> ha, right

[15:12] <ab5tract> m: shell Q:scalar<RAKUDO_RAKUAST=1 $*EXECUTABLE -e 'role R { has $.n }; class C does R { has R $.r .= new(:$!n) }; my C $c .= new(:n(1)); dd $c'>

[15:12] <camelia> rakudo-moar e7df63a4a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable $.n used where no 'self' is available␤at <tmp>:1␤------> UAST=1 $*EXECUTABLE -e 'role R { has $.n⏏ }; class C does R { has R $.r .= new(:$␤    expecting any of:␤        postfix…»

[15:13] <ab5tract> different error here

[15:21] <discord-raku-bot> <nemokosch> yeah here the scalar adverb didn't scale well

[15:21] <MasterDuke> m: %*ENV<RAKUDO_RAKUAST> = 1; run $*EXECUTABLE, "--target=ast", "-e", ""

[15:21] <camelia> rakudo-moar e7df63a4a: OUTPUT: «CompUnit 𝄞 -e:1 ⎡⎤␤  StatementList 𝄞 -e:1 ⎡⎤␤  VarDeclaration::Implicit::Doc::Pod␤  VarDeclaration::Implicit::Doc::Data␤  VarDeclaration::Implicit::Doc::Finish␤  VarDeclaration::Implicit::Doc::Rakudoc␤»

[15:22] *** NemokoschKiwi joined
[15:22] <MasterDuke> lizmat: any idea why those ^^^ `VarDeclaration::Implicit::Doc::*` are showing up?

[15:23] <NemokoschKiwi> m: my $content = 'role R { has $.n }; class C does R { has R $.r .= new(:$!n) }; my C $c .= new(:n(1)); dd $c'; shell Q:scalar<RAKUDO_RAKUAST=1 $*EXECUTABLE -e '$content'>

[15:23] <camelia> rakudo-moar e7df63a4a: OUTPUT: «===SORRY!===␤No such method 'expression' for invocant of type␤'RakuAST::Initializer::CallAssign'␤The spawned command 'RAKUDO_RAKUAST=1 /home/camelia/rakudo-m-inst-2/bin/perl6-m -e 'role R { has $.n }; class C does R { has R $.r .= new(:$!n) }; m…»

[15:23] <NemokoschKiwi> ab5tract: better yet?

[15:25] *** NemokoschKiwi left
[15:26] <ab5tract> perfect :)

[15:27] <ab5tract> MasterDuke: I believe they exist because they have to in order to mirror previous behavior WRT to pod6

[15:34] <discord-raku-bot> <nemokosch> oh yeah, if the environment variable can be set and run respects it, that's probably a more readable way...

[16:07] *** codesections joined
[16:12] <lizmat> ab5tract MasterDuke indeed... they're basically $=pod, $=data and $=finish

[16:39] <Geth> ¦ rakudo: mrjbq7++ created pull request #5364: make .permutations about 10% faster

[16:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5364

[17:07] *** evalable6 left
[17:10] *** evalable6 joined
[17:20] <Geth> ¦ rakudo/main: e41e823cdd | (John Benediktsson)++ (committed using GitHub Web editor) | src/core.c/Rakudo/Iterator.pm6

[17:20] <Geth> ¦ rakudo/main: Make .permutations about 20% faster

[17:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e41e823cdd

[17:36] <Geth> ¦ rakudo/main: ec2076759b | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[17:36] <Geth> ¦ rakudo/main: Remove unused attribute

[17:36] <Geth> ¦ rakudo/main: 

[17:36] <Geth> ¦ rakudo/main: And some cosmetics

[17:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ec2076759b

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:33] *** MasterDuke left
[21:22] *** linkable6 left
[21:22] *** evalable6 left
[21:25] *** linkable6 joined
[21:25] *** evalable6 joined
[22:07] *** sena_kun left
[22:08] *** jgaz left
[23:08] *** evalable6 left
[23:08] *** linkable6 left
[23:08] *** linkable6 joined
[23:09] *** evalable6 joined
