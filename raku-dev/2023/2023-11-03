[00:20] *** Geth left
[00:21] *** Geth joined
[00:48] *** buildable6 left
[00:51] *** buildable6 joined
[01:14] *** finanalyst left
[01:51] *** buildable6 left
[01:51] *** buildable6 joined
[02:51] *** buildable6 left
[02:54] *** buildable6 joined
[03:54] *** buildable6 left
[03:58] *** buildable6 joined
[04:58] *** buildable6 left
[05:00] *** buildable6 joined
[06:00] *** buildable6 left
[06:01] *** buildable6 joined
[06:21] *** buildable6 left
[06:21] *** buildable6 joined
[07:01] *** buildable6 left
[07:02] *** buildable6 joined
[08:02] *** buildable6 left
[08:04] *** buildable6 joined
[08:08] *** buildable6 left
[08:08] *** buildable6 joined
[08:44] <patrickb> ugexe: In general support for \\?\ paths in our tooling is desirable irrespective of us using those paths under the hood right? So fixing our tooling to understand those is a good thing in its own right. Right?

[09:04] *** buildable6 left
[09:07] *** buildable6 joined
[09:59] *** sena_kun joined
[10:07] *** buildable6 left
[10:09] *** buildable6 joined
[10:27] *** sena_kun left
[10:43] * sjn gets 3 failing subtests (test 7-9) in t/09-moar/01-profilers.t when building 2023.10

[10:58] <lizmat> what OS is this ?

[11:09] <sjn> Ubuntu 22.04.3 LTS

[11:09] *** buildable6 left
[11:11] *** buildable6 joined
[11:12] <lizmat> well, I can't repro on MacOS, so perhaps make an issue for it  :-)

[11:12] <lizmat> so it won't fall through the cracks

[11:12] * sjn tries again first

[11:22] <sjn> hmf. second try worked fine. 

[11:34] <lizmat> ok, I guess it's a flapper then

[11:35] <sjn> mm

[12:11] *** buildable6 left
[12:12] *** buildable6 joined
[12:14] <ugexe> i've had that test flap on me before

[12:16] <Geth> ¦ rakudo/main: aff290dab3 | (Elizabeth Mattijsen)++ | src/Raku/ast/checktime.rakumod

[12:16] <Geth> ¦ rakudo/main: RakuAST: simplify sorry/worry innitialization

[12:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/aff290dab3

[12:17] *** buildable6 left
[12:17] *** buildable6 joined
[12:17] <ugexe> patrickb: yeah, although I'm not sure if I'd try to tackle the build system stuff... for the most part is it pretty easy to not install rakudo into a path that violates max path, but it is much harder to not have precompilation occur in such a path. I also noticed that some command line tools (like bsdtar) already handle long paths on windows automatically (see the output of

[12:17] <ugexe> https://github.com/ugexe/zef/issues/533#issuecomment-1783048692 )

[12:18] <ugexe> so i wonder if the build system would msotly just work anyway

[12:25] <ugexe> but yes the idea is no special handling by the build system should be required, and that any C:\too\long\path it generates would just get turned into \\?\C:\too\long\path whenever rakudo passes that string to moarvm

[12:25] <ugexe> (or moarvm itself turns it into that)

[12:27] <ugexe> java and javascript both handling long paths automatically. I kind of assumed perl would as well, but maybe not

[12:28] <ugexe> (perl being important because our build system uses it)

[12:50] <Geth> ¦ rakudo/main: cf3feb5841 | (Elizabeth Mattijsen)++ | 2 files

[12:50] <Geth> ¦ rakudo/main: RakuAST: simplify RakuDoc w|sorries

[12:50] <Geth> ¦ rakudo/main: 

[12:50] <Geth> ¦ rakudo/main: If a class does ::CheckTime, it can call .sorry/.worry without any

[12:50] <Geth> ¦ rakudo/main: additional tweaks

[12:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cf3feb5841

[13:12] *** buildable6 left
[13:13] *** buildable6 joined
[13:17] *** buildable6 left
[13:17] *** buildable6 joined
[13:20] <[Coke]> ugexe: so if I uninstall zef-latest, install zef v0.13.8, I can then install JSON::Fast:ver<0.19> without error

[13:20] <[Coke]> the latest zef triggers the issue.

[13:20] <[Coke]> (well, some zef after 13.8)

[13:20] <[Coke]> (this on windows)

[13:32] <ugexe> what issue

[13:33] <[Tux]> Rakudo v2023.10-88-gcf3feb584 (v6.d) on MoarVM 2023.10-2-g18604f691

[13:33] <[Tux]> csv-test-xs-20      0.398 -  0.414

[13:33] <[Tux]> csv-ip5xs           0.816 -  0.899

[13:33] <[Tux]> test-t --race       0.880 -  1.133

[13:33] <[Tux]> test-t              1.513 -  1.770

[13:33] <[Tux]> csv-parser          3.733 -  4.535

[13:33] <[Tux]> csv-ip5xs-20        5.437 -  5.481

[13:33] <[Tux]> test-t-20 --race    6.674 -  6.905

[13:33] <[Tux]> test                6.970 -  7.692

[13:33] <[Tux]> test-t-20          21.525 - 22.298

[13:33] <[Tux]> No extrem load, so I cannot explain the relative high numbers

[13:39] <ugexe> [Coke]: i think it will install if JSON::Fast tests are updated to not have `use lib "lib"`

[13:40] <ugexe> the reason an older version of zef is able to install it is probably because the REA ecosystem was eventually prioritized over p6c and cpan. but the REA files usually have a longer file name than the p6c/cpan counterparts, and so are more likely to get path length limitation

[13:40] <ugexe> JSON::Fast is using `use lib "lib"` in its tests, which means even though zef has already precompiled the code for the staging repository, it will be precompiled again

[13:41] <ugexe> except this time it is precompiled to the much longer non-staging path

[13:51] <lizmat> JSON::Fast is using lib?   hmmmm

[13:53] <lizmat> ok, will at least make a PR for fixing that

[13:56] <Geth> ¦ rakudo/main: 3d91a34c70 | (Elizabeth Mattijsen)++ | 2 files

[13:56] <Geth> ¦ rakudo/main: RakuAST: it's .add-(w|s)orry   duh

[13:56] <Geth> ¦ rakudo/main: 

[13:56] <Geth> ¦ rakudo/main: Sadly no tests caught this  :-(

[13:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3d91a34c70

[13:58] *** Geth left
[13:58] *** Geth joined
[14:13] *** buildable6 left
[14:14] *** buildable6 joined
[14:18] *** buildable6 left
[14:18] *** buildable6 joined
[15:08] <[Coke]> ugexe: thanks for the explanation!

[15:14] *** buildable6 left
[15:15] *** buildable6 joined
[15:44] <Geth> ¦ rakudo/main: b468d243ec | (Elizabeth Mattijsen)++ | src/Raku/ast/expressions.rakumod

[15:44] <Geth> ¦ rakudo/main: RakuAST: a class doing CheckTime can invoke .add-worry

[15:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b468d243ec

[16:01] <lizmat> nine: am a bit confused re worries/sorries

[16:02] <lizmat> so a class doing CheckTime has its own worries / sorries

[16:02] <lizmat> and Resolver.all-worries/sorries collects these from all objects doing CheckTime

[16:03] <lizmat> however, all places that do an add-worry / add-sorry have a $resolver object available

[16:03] <lizmat> so why not push the worry/sorry to the resolver directly ?

[16:15] *** buildable6 left
[16:17] *** buildable6 joined
[16:22] *** buildable6 left
[16:22] *** buildable6 joined
[17:17] *** buildable6 left
[17:18] *** buildable6 joined
[18:18] *** buildable6 left
[18:19] *** buildable6 joined
[18:20] *** sena_kun joined
[19:07] <ab5tract_> m: my class { has @.z is default(44) where * == 42 }.new.z[6] ==> dd()

[19:07] <camelia> rakudo-moar b468d243e: OUTPUT: «Int @!z[6] = 44␤»

[19:19] *** buildable6 left
[19:22] *** buildable6 joined
[20:22] *** buildable6 left
[20:24] *** buildable6 joined
[20:28] *** buildable6 left
[20:28] *** buildable6 joined
[21:15] *** finanalyst joined
[21:24] *** buildable6 left
[21:24] *** buildable6 joined
[22:24] *** buildable6 left
[22:26] *** buildable6 joined
[22:40] *** finanalyst left
[23:26] *** buildable6 left
[23:28] *** buildable6 joined
[23:57] *** sena_kun left
