[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:22] <discord-raku-bot> <Nemokosch> I wish it ran that fast, haha
[00:23] <discord-raku-bot> <Nemokosch> didn't know this TEST_JOBS env though
[00:23] <discord-raku-bot> <Nemokosch> can I get a commit bit to rakudo?
[00:31] *** dogbert17 joined
[00:33] *** dogbert11 left
[00:56] <Geth> ¦ rakudo: 2colours++ created pull request #5169: Fix for storing parameterised hashes as items
[00:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5169
[01:33] *** evalable6 left
[01:35] *** evalable6 joined
[02:56] *** MasterDuke joined
[03:29] *** dogbert11 joined
[03:30] *** dogbert17 left
[03:34] *** dogbert17 joined
[03:36] *** dogbert11 left
[03:42] *** dogbert17 left
[03:46] *** dogbert17 joined
[04:00] *** dogbert11 joined
[04:02] *** dogbert17 left
[04:06] *** dogbert11 left
[04:07] *** dogbert11 joined
[04:10] *** dogbert17 joined
[04:13] *** dogbert11 left
[04:14] *** dogbert11 joined
[04:16] *** dogbert17 left
[04:21] *** dogbert17 joined
[04:23] *** dogbert11 left
[04:28] *** dogbert11 joined
[04:30] *** dogbert17 left
[05:06] *** dogbert17 joined
[05:08] *** dogbert11 left
[05:10] *** dogbert17 left
[05:11] *** dogbert11 joined
[05:20] *** dogbert17 joined
[05:23] *** dogbert11 left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[08:22] *** Nemokosch joined
[08:22] <Nemokosch> bisectable6: say Dateish ~~ Cool
[08:22] <bisectable6> Nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight
[08:23] <bisectable6> Nemokosch, ¦6c (66 commits): «True␤»
[08:23] <bisectable6> Nemokosch, Nothing to bisect!
[08:24] <discord-raku-bot> <Nemokosch> why are (apparently) all roles Cool? xD
[08:28] <Nemokosch> let's do one more
[08:28] *** dogbert17 left
[08:28] <Nemokosch> bisectable6: say PositionalBindFailover ~~ Cool
[08:28] <bisectable6> Nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight
[08:28] <bisectable6> Nemokosch, ¦6c (66 commits): «True␤»
[08:28] <bisectable6> Nemokosch, Nothing to bisect!
[08:30] <nine> Bootstrap says: Perl6::Metamodel::ParametricRoleHOW.pretend_to_be([Cool, Any, Mu]);
[08:34] <discord-raku-bot> <Nemokosch> hm, you are right. Do you know what purpose that serves? Why do all roles need to pretend to be Cool for type checking?
[08:37] <nine> The commit message that introduced this says "Roles should be narrower than Cool/Any/Mu." and it fixed "multis don't distinguish Positional"
[08:42] <discord-raku-bot> <Nemokosch> gotcha https://github.com/rakudo/rakudo/commit/0035ddb46de48be17492c4a11be3d4070b30077f
[08:42] <discord-raku-bot> <Nemokosch> but this doesn't give a lot of insights about Cool in particular
[08:46] *** dogbert17 joined
[08:52] *** Nemokosch left
[09:02] *** dogbert11 joined
[09:03] *** dogbert17 left
[09:04] *** dogbert17 left
[09:08] *** dogbert11 left
[09:11] *** dogbert11 joined
[09:17] *** dogbert17 joined
[09:20] *** dogbert11 left
[09:31] *** dogbert17 left
[10:42] <lizmat> nine: looking at the implementation of PRE / POST phasers, and they get a lot of QAST inserted into their bodies
[10:43] <lizmat> so rather than inserting the qast with all its complications, I'm considering adapting the RakuAST blorst instead
[10:43] <lizmat> which would make it much more high level, and potentially more flexible
[10:43] <lizmat> opinions ?
[10:47] <lizmat> specifically translating World line 4460 and following
[10:53] *** dogbert17 joined
[11:12] *** MasterDuke left
[11:15] *** dogbert17 left
[11:19] *** dogbert17 joined
[11:23] *** dogbert17 left
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:29] <lizmat> nine: Cannot find method 'apply-sink' on object of type NQPMu   does that ring a bell ?
[12:31] <nine> not in general
[12:33] <lizmat> too bad  :-)
[12:35] *** ab5tract joined
[12:36] <lizmat> nine: do you see something inherently wrong in https://gist.github.com/lizmat/136cee1a104ff73e34b26cf528ac95c6 ?
[12:37] <lizmat> it basically turns the blorst into  X::Phaser::PrePost.new(:phaser<PRE>, :condition($blorst.DEPARSE)).throw
[12:38] <lizmat> X::Phaser::PrePost.new(:phaser<PRE>, :condition($blorst.DEPARSE)).throw unless $blorst
[12:44] <Geth> ¦ nqp/main: d7e8161577 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | src/vm/jvm/QAST/Compiler.nqp
[12:44] <Geth> ¦ nqp/main: [JVM] Add some constants DISP_* (#794)
[12:44] <Geth> ¦ nqp/main: 
[12:44] <Geth> ¦ nqp/main: At least DISP_ONLYSTAR is referenced by Rakudo, so it makes sense
[12:44] <Geth> ¦ nqp/main: to define them similarly to src/vm/moar/QAST/QASTOperationsMAST.nqp.
[12:44] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/d7e8161577
[12:49] <nine> lizmat: well I don't understand what PRE and POST phasers are even supposed to do.
[12:49] <lizmat> m: { PRE say "foo" }()'
[12:49] <camelia> rakudo-moar d10c27506: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> { PRE say "foo" }()⏏'␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        st…»
[12:49] <lizmat> m: { PRE say "foo" }()
[12:49] <camelia> rakudo-moar d10c27506: OUTPUT: «foo␤»
[12:49] <lizmat> m: { PRE !say "foo" }()
[12:49] <camelia> rakudo-moar d10c27506: OUTPUT: «foo␤Precondition '!say "foo"' failed␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[12:50] <lizmat> PRE phaser is supposed to throw if it returns something falsy
[12:50] <lizmat> it is called before any other block phaser in a block
[12:51] <lizmat> rather than messing with QAST, I thought RakuAST would provide a more HLLy approach
[12:52] <nine> Looks ok then
[12:52] <lizmat> could it be that the NQPMu is caused by something not being serialized ?
[12:54] <lizmat> aahhh...  ok, looks like a missing "postfix"
[12:56] <nine> nine's debug lemma #1: the bug is _always_ in your own code.
[12:56] <lizmat> Oh, I had no doubt about that  :-)
[13:04] <discord-raku-bot> <Nemokosch> Especially when your own code is a runtime
[13:04] <lizmat> :-)
[13:21] *** ab5tract left
[13:32] *** ab5tract joined
[13:39] *** Xliff joined
[13:47] *** ab5tract left
[14:21] <lizmat> some progress, another weird error  now:
[14:21] <lizmat> No such method 'IMPL-WRAP-QAST' for invocant of type
[14:21] <lizmat> 'RakuAST::Statement::Expression'
[14:21] <lizmat> nine: ring a bell ?
[14:22] <nine> You have an expression somewhere where there should be a statement modifier
[14:26] <lizmat> aaahhh  ok
[14:38] *** dogbert17 joined
[14:47] <lizmat> meh... looks like NQPMu is truthy in Raku land  :-(
[14:57] <nine> Always better to be explicit
[15:01] <discord-raku-bot> <Nemokosch> As a type object?
[15:14] *** dogbert17 left
[15:22] *** ab5tract joined
[15:32] <lizmat> ok, got the PRE phaser passing now, if the condition is true
[15:32] <lizmat> if it is false, then it show a specific error, not: No exception handler located for catch
[15:33] <lizmat> so I guess there's still something going wrong when throwing the exception
[15:38] <vrurg> Is "no exception handler" specced???
[15:40] *** ab5tract left
[15:41] <lizmat> ir's one of those "this shouldn't happen" things
[15:41] <vrurg> That's what I mean. Hopefully, it not a part of the specs. :)
[15:44] <lizmat> it's not
[15:56] *** dogbert17 joined
[16:06] *** squashable6 left
[16:08] *** squashable6 joined
[16:43] *** dogbert17 left
[17:02] <nine> waaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah
[17:04] <lizmat> my feelings entirely
[17:05] <lizmat> is something a lot simpler all of a sudden?   or a lot more difficult ?
[17:06] <lizmat> please don't keep us in suspense!   :-)
[17:07] <nine> It seems to never end... Trying to get whatever currying fully implemented.
[17:07] <lizmat> aah... yeah, that:  another piece of magic  :-(
[17:07] <nine> I got it down to generating perfectly working code. Except...that the meta object is wrong. It gets created too early, so it thinks the WhateverCode would have only one parameter.
[17:10] *** gfldex left
[17:11] <lizmat> so I guess the parameter info needs to be cached first  :-(
[17:11] <nine> Problem is that there is no way to know when exactly it would be ok to run IMPL-CHECK on the thunk (thereby creating the meta object), because a node only knows its descendants. But a parent may also be an ApplyInfix and steal our curry.
[17:12] <lizmat> and you don't know the parent anyway, right ?
[17:12] <nine> I don't
[17:13] <lizmat> in better news: I got the PRE phaser working  :-)
[17:16] <nine> lizmat++
[17:36] <Geth> ¦ rakudo/main: bc7189cc82 | (Elizabeth Mattijsen)++ | 6 files
[17:36] <Geth> ¦ rakudo/main: Add complete support for PRE phasers
[17:36] <Geth> ¦ rakudo/main: 
[17:36] <Geth> ¦ rakudo/main: - Grammar / Actions added
[17:36] <Geth> ¦ rakudo/main: - RakuAST::StatementPrefix::Phaser::Pre classes added
[17:36] <Geth> ¦ rakudo/main: - Deparsing added
[17:36] <Geth> ¦ rakudo/main: - Tests added
[17:36] <Geth> ¦ rakudo/main: 
[17:36] <Geth> ¦ rakudo/main: This one turned out to be a bit more difficult, but in the end simpler
[17:36] <Geth> ¦ rakudo/main: because the QAST-twiddling in World from before, has been replaced by
[17:36] <lizmat> onto POST!
[17:36] <Geth> ¦ rakudo/main: generating code using RakuAST classes.  Only tricky bit was to hide
[17:36] <Geth> ¦ rakudo/main: this extra code from deparsing, to allow roundtripping.
[17:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bc7189cc82
[17:44] *** dogbert17 joined
[18:00] *** reportable6 left
[18:00] <Geth> ¦ rakudo/main: 73839db27f | (Stefan Seifert)++ | 2 files
[18:00] <Geth> ¦ rakudo/main: RakuAST: fix "lexical already declared" when placeholder is used multiple times
[18:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/73839db27f
[18:00] <Geth> ¦ rakudo/main: 28cb8cc2d0 | (Stefan Seifert)++ | 3 files
[18:00] <Geth> ¦ rakudo/main: RakuAST: fully implement whatever currying of infixes
[18:00] <Geth> ¦ rakudo/main: 
[18:00] <Geth> ¦ rakudo/main: With this * * * + * * * results in a callable taking 4 args and
[18:00] <Geth> ¦ rakudo/main: returning the sum of two products.
[18:00] <Geth> ¦ rakudo/main: 
[18:00] <Geth> ¦ rakudo/main: The difficulty here is that each tree node only knows its children but
[18:00] <Geth> ¦ rakudo/main: not its parent. Thus a node cannot know whether there is a parent infix
[18:00] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>
[18:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/28cb8cc2d0
[18:00] <nine> 109 and 641!
[18:01] *** reportable6 joined
[18:39] *** melezhik joined
[18:40] *** melezhik left
[18:51] *** ab5tract joined
[18:57] *** melezhik joined
[19:02] *** melezhik left
[19:04] *** melezhik joined
[19:04] *** melezhik left
[19:22] *** gfldex joined
[19:54] *** epony joined
[20:54] *** nine left
[20:54] *** nine joined
[21:28] *** NemokoschKiwi joined
[23:04] *** ab5tract left
[23:43] *** epony left
[23:50] <NemokoschKiwi> do `is` calls all count as tests with regards to the argument of `plan`?
[23:51] <NemokoschKiwi> i.e if I write a block in roast with two is'es, does that increment that number by two?
[23:57] *** NemokoschKiwi left
