[01:20] *** bisectable6 left
[01:20] *** committable6 left
[01:21] *** committable6 joined
[01:23] *** bisectable6 joined
[02:23] *** committable6 left
[02:23] *** bisectable6 left
[02:24] *** bisectable6 joined
[02:24] *** committable6 joined
[03:24] *** committable6 left
[03:24] *** bisectable6 left
[03:26] *** bisectable6 joined
[03:27] *** committable6 joined
[05:28] *** bisectable6 left
[05:28] *** committable6 left
[05:29] *** bisectable6 joined
[05:31] *** committable6 joined
[08:11] <Geth> ¦ rakudo/main: 708858838c | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.rakumod

[08:11] <Geth> ¦ rakudo/main: RakuAST: fix issue with deparsing elsif|orwith / else

[08:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/708858838c

[08:14] <Geth> ¦ rakudo/main: 21720d907a | (Elizabeth Mattijsen)++ | src/Raku/ast/name.rakumod

[08:14] <Geth> ¦ rakudo/main: RakuAST: add ::Name.simple-identifier method

[08:14] <Geth> ¦ rakudo/main: 

[08:14] <Geth> ¦ rakudo/main: Returns the identifier if there is a single element identifier,

[08:14] <Geth> ¦ rakudo/main: or returns the empty string.  Can be used to either just check

[08:14] <Geth> ¦ rakudo/main: if the object is a simple identifier, or also when the actual

[08:14] <Geth> ¦ rakudo/main: identifier is needed.

[08:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/21720d907a

[08:21] *** sena_kun joined
[09:07] *** timo joined
[09:07] <Geth> ¦ rakudo/main: f261b1eab9 | (Elizabeth Mattijsen)++ | 2 files

[09:07] <Geth> ¦ rakudo/main: RakuAST: put in L10N hooks for subs/methods

[09:07] <Geth> ¦ rakudo/main: 

[09:07] <Geth> ¦ rakudo/main: This in itself doesn't change anything, but with the right role

[09:07] <Geth> ¦ rakudo/main: mixed in as a slang, would allow:

[09:07] <Geth> ¦ rakudo/main: 

[09:07] <Geth> ¦ rakudo/main:     zeg "foo";

[09:07] <Geth> ¦ rakudo/main: 

[09:07] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[09:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f261b1eab9

[09:12] <lizmat> for the curious: this is currently possible in the NL slang: https://gist.github.com/lizmat/9852a6fb05f5171e5583bbea7c200823

[09:14] <lizmat> sadly, anything declaratative doesn't work yet: some weird issue with actions not getting called in a slangified grammar

[09:15] <lizmat> possibly related to https://github.com/rakudo/rakudo/issues/5387

[09:30] *** sena_kun left
[14:35] <japhb> That's a pretty cool demo, lizmat :-)

[14:36] <lizmat> isn't it?    some people might even make a Texan slang if they want to  :-)

[14:43] <japhb> About 25 years ago I worked with someone who was Swiss German Texan.  Now *that* was a cool accent.

[14:44] <lizmat> yeah, we once drove through "Little Switzerland" on the way from Houston to Austin, if I remember correctly

[14:51] <lizmat> or maybe on the way from Austin to San Antonio

[14:52] <japhb> Huh, didn't know there was a whole community there -- I assumed it was just him.  :-)

[15:33] *** jgaz joined
[15:33] <Geth> ¦ rakudo/main: 4 commits pushed by (Elizabeth Mattijsen)++

[15:33] <Geth> ¦ rakudo/main: 6a2e895a66 | RakuAST: add localization templatei files

[15:33] <Geth> ¦ rakudo/main: 96b3525355 | RakuAST: add ::L10N module

[15:33] <Geth> ¦ rakudo/main: c7ffcbe93c | RakuAST: generate localization files

[15:33] <Geth> ¦ rakudo/main: 765358247e | RakuAST: make sure RakuAST::L10N and L10N::NL are installed

[15:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/f261b1eab9e7...765358247e17

[15:43] <lizmat> m: Q|use L10N::NL; zeg "foo".als-getallen|.AST.EVAL

[15:43] <camelia> rakudo-moar f261b1eab: OUTPUT: «===SORRY!===␤Could not find L10N::NL in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6/core␤    CompUnit::Repos…»

[15:43] <lizmat> guess I' too impatient :-)

[15:54] <lizmat> m: Q|use L10N::NL; zeg "foo".als-getallen|.AST.EVAL

[15:54] <camelia> rakudo-moar 765358247: OUTPUT: «(102 111 111)␤»

[15:54] <lizmat> whee!

[15:55] <lizmat> m: say Q|use L10N::NL; zeg "foo".als-getallen|.AST

[15:55] <camelia> rakudo-moar 765358247: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Use.new(␤    module-name => RakuAST::Name.from-identifier-parts("L10N","NL")␤  ),␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::Call::Name.new(␤      name => RakuAST::Nam…»

[15:55] <lizmat> m: say Q|use L10N::NL; zeg "foo".als-getallen|.AST.statements.skip.head

[15:55] <camelia> rakudo-moar 765358247: OUTPUT: «RakuAST::Statement::Expression.new(␤  expression => RakuAST::Call::Name.new(␤    name => RakuAST::Name.from-identifier("say"),␤    args => RakuAST::ArgList.new(␤      RakuAST::ApplyPostfix.new(␤        operand => RakuAST::QuotedString.new(…»

[15:55] <lizmat> m: say Q|use L10N::NL; zeg "foo".als-getallen|.AST.statements.skip.head.expression

[15:55] <camelia> rakudo-moar 765358247: OUTPUT: «RakuAST::Call::Name.new(␤  name => RakuAST::Name.from-identifier("say"),␤  args => RakuAST::ArgList.new(␤    RakuAST::ApplyPostfix.new(␤      operand => RakuAST::QuotedString.new(␤        segments   => (␤          RakuAST::StrLiteral.new("…»

[17:26] *** [Tux] left
[17:30] *** [Tux] joined
[17:42] *** sena_kun joined
[18:12] *** melezhik joined
[18:19] *** melezhik left
[18:26] *** melezhik joined
[18:28] *** melezhik left
[18:55] <Geth> ¦ rakudo: ab5tract++ created pull request #5399: RakuAST: Finalize `WhateverCode` offering 

[18:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5399

[19:01] *** melezhik joined
[19:01] <ab5tract> lizmat: ^^ curious to hear what you think of 🔆 :)

[19:19] *** melezhik left
[19:22] <ab5tract> nemokosch: regarding `* && say "foo"`. it works here locally just by changing the curry rating of `&&` to 1

[19:23] <discord-raku-bot> <nemokosch> what do values of "curry rating" signify?

[19:23] <ab5tract> running spectest now to see if anything complains.

[19:24] <ab5tract> 0 = none, 1 = whatever only, 2 = whatevercode only, 3 = whatever + whatevercode (default)

[19:24] <ab5tract> (sorry, should've been more descriptive than '1', in retrospect)

[19:25] <discord-raku-bot> <nemokosch> oh nice. So it is currently deliberately on "none"?

[19:25] <ab5tract> yes that's correct.

[19:27] <ab5tract> not sure what the original reasoning for that is.

[19:28] <discord-raku-bot> <nemokosch> yes well, that's where I'm coming from

[19:28] <discord-raku-bot> <nemokosch> I thought it had some obvious technical reason

[19:28] <ab5tract> well, maybe it did. I didn't turn it on in the old compiler :)

[19:29] <discord-raku-bot> <nemokosch> fair enough haha

[19:30] <ab5tract> now you've got me curious about that too

[19:31] <ab5tract> weird enough, no tests fail as a result of this change :)

[19:33] <ab5tract> ah, I don't see such a simple switch for the bas frontend compiler

[19:33] <ab5tract> *base

[19:34] <ab5tract> so yeah, maybe there was something complicated going on.

[19:36] <ab5tract> nine, lizmat: any thoughts on why `&&` doesn't curry?

[20:25] *** jgaz left
[20:26] *** jgaz joined
[20:26] <ab5tract> I wonder if it has something to do with short-circuiting..

[20:27] <ab5tract> not sure why that would apply though

[20:35] <ab5tract> https://design.raku.org/S02.html#The_Whatever_Object doesn't mention anything about `&&` currying

[20:37] <discord-raku-bot> <nemokosch> I think it does have something to do with "short-circuiting", or more broadly thunking

[20:38] <discord-raku-bot> <nemokosch> but that seems to be contradicted by the fact that smartmatch does curry, even though that also thunks its right handside

[20:39] <discord-raku-bot> <nemokosch> but it's almost like smartmatching is the odd-one-out that it works

[20:39] <discord-raku-bot> <nemokosch> ff for example also doesn't work

[20:40] <discord-raku-bot> <nemokosch> I think smartmatching actually works wrong, lol

[20:41] <ugexe> i would think its currying

[20:41] <discord-raku-bot> <nemokosch> it works without the thunking

[20:41] <ugexe> my $partial = False &&;

[20:41] <discord-raku-bot> <nemokosch> m: 1 ~~ $_ * 1 andthen .say

[20:41] <discord-raku-bot> <Raku eval>  True 

[20:42] <discord-raku-bot> <nemokosch> it has to be True, because $_ on the RHS is the value from LHS

[20:43] <discord-raku-bot> <nemokosch> okay, let's push it harder

[20:43] <discord-raku-bot> <nemokosch> m: $_ = 'godzilla'; 1 ~~ $_ * 1 andthen .say

[20:43] <discord-raku-bot> <Raku eval>  True 

[20:43] <discord-raku-bot> <nemokosch> so yeah, $_ is 1 at that point

[20:43] <ugexe> if $partial resolves immediately to False, then we've kind of defeated the purpose of currying because it's not waiting for the next operand

[20:43] <discord-raku-bot> <nemokosch> m: $_ = 'godzilla'; (* ~~ $_ * 1)(1) andthen .say

[20:43] <ugexe> if $partial waits for another operand, then we're introducing inefficiency by not short-circuiting, because it's waiting for an operand that won't affect the outcome

[20:43] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏godzilla' (indicated by ⏏)   in block <unit> at main.raku line 1  

[20:44] <discord-raku-bot> <nemokosch> if the whatever-currying were done right, this last snippet should have also said True

[20:45] <discord-raku-bot> <nemokosch> but it ignored the fact that ~~ is thunky

[20:45] <discord-raku-bot> <nemokosch> it just evaluated the RHS right away

[20:48] <discord-raku-bot> <nemokosch> ugexe: I don't get what this has to do with the Whatever-currying

[20:50] <discord-raku-bot> <nemokosch> by the way, this is just a big wish for Santa but actually I'd like to see thunky operators in the language as first-class citizens, much rather than a grammar hack

[20:51] <discord-raku-bot> <nemokosch> m: infix:<&&>(1, say('and what the hell are you doing here exactly')) andthen .&dd

[20:51] <discord-raku-bot> <Raku eval>  and what the hell are you doing here exactly  Bool::True 

[20:51] <discord-raku-bot> <nemokosch> it doesn't short-circuit, it cannot short-circuit

[20:53] <discord-raku-bot> <nemokosch> to be frank, arguably, a sub call interface to thunky stuff would be really painful to achieve, possibly even painful to use

[20:53] <discord-raku-bot> <nemokosch> but there could be some interface, at least

[20:59] <ugexe> m: sub test($cond) { return $cond && * }; say test(True); say test(False)

[20:59] <camelia> rakudo-moar 765358247: OUTPUT: «*␤False␤»

[20:59] <discord-raku-bot> <nemokosch> CI journey: I took over File::Temp, set the same workflow basically, and okay, Windows failed. Since it mentioned TAP stuff, I changed the run and test step to zef install . --debug --/tap-harness as suggested. Perhaps this was stupid in the first place because it still mentions TAP stuff regardless.

[21:00] <discord-raku-bot> <nemokosch> The interesting thing is that with --/tap-harness set, the Mac workflow suddenly gets cancelled

[21:00] <discord-raku-bot> <nemokosch> it passed without the flag

[21:00] <ugexe> weird, link me to it

[21:02] <discord-raku-bot> <nemokosch> https://github.com/2colours/raku-File-Temp/actions/runs/6411072439 so this was the initial run

[21:02] <discord-raku-bot> <nemokosch> https://github.com/2colours/raku-File-Temp/actions/runs/6411143128 this was when I accidentally set --tap-harness rather than the negation, works also

[21:03] <ab5tract> ugexe:  but that could arguably just return a WhateverCode, imo

[21:03] <discord-raku-bot> <nemokosch> https://github.com/2colours/raku-File-Temp/actions/runs/6411184240 this was when i set it off

[21:03] <discord-raku-bot> <nemokosch> +1 for that

[21:04] <ugexe> it looks like your macos ones failed because they were canceled for whatever reason

[21:04] <ugexe> i'd probably just rerun those ones

[21:05] <discord-raku-bot> <nemokosch> yes, I reran them once, same thing happened

[21:05] <ugexe> I don't see anything mentioning the raku TAP harness, and everything seems to be using prove (so perl TAP harness)

[21:05] <ab5tract> it would still "short-circuit" in the sense that the RHS wouldn't be evaluated if $cond were false

[21:05] <ugexe> they died the exact same way same output?

[21:05] <ugexe> or is it still possible the jobs were canceled automatically i.e. because the windows build failed

[21:06] <discord-raku-bot> <nemokosch> I set "debug log" or whatever it is called, the second time

[21:06] <discord-raku-bot> <nemokosch> "enable debug logging"

[21:06] <discord-raku-bot> <nemokosch> it seemed to do okay stuff when it got cancelled

[21:07] <discord-raku-bot> <nemokosch> this was the interesting line: > ##[debug]Re-evaluate condition on job cancellation for step: 'Run tests and Install'.

[21:07] <ugexe> again, is it possible it is getting canceled once the windows build fails?

[21:07] <discord-raku-bot> <nemokosch> during the "updating fez mirror" phase

[21:07] <discord-raku-bot> <nemokosch> then it could run for a while and it even made it to testing when it was suddenly announced that it got cancelled

[21:07] <ugexe> i hoenstly dont remember if gh actions will stop the other jobs when one fails, but it seems familiar

[21:08] <discord-raku-bot> <nemokosch> mmm, that could make sense, assuming that the timing of individual jobs is somewhat random

[21:09] <ugexe> there is probably some flag to disable that fail fast behavior if its the case

[21:11] <ugexe> strategy: fail-fast: false

[21:11] <discord-raku-bot> <nemokosch> ohh

[21:11] <discord-raku-bot> <nemokosch> I was about to read this https://github.com/orgs/community/discussions/27192

[21:12] <discord-raku-bot> <nemokosch> thanks, let's see

[21:24] <ugexe> m: my $false-whatever = { False } & *; if $false-whatever { say 42 }

[21:24] <camelia> rakudo-moar 765358247: OUTPUT: «42␤»

[21:24] <ugexe> ab5tract: wouldn't false whenever make that type of check confusing?

[21:25] <ugexe> i dunno if thats even a False whatever to be fair though lol

[21:25] <ugexe> i guess its not

[21:25] <ugexe> but i'm wondering if a false-whatever would be considered True or not

[21:28] <discord-raku-bot> <nemokosch> yep, much better with fail-fast: false

[21:29] <discord-raku-bot> <nemokosch> this is with a junction though, isn't it

[21:29] <discord-raku-bot> <nemokosch> for "false whatever"

[22:00] *** sena_kun left
[22:35] <ab5tract> I'm a bit lost. How would you get a False whatever here, though? You'd end up with a WhateverCode that happens to have a False LHS

[22:37] <ab5tract> but whether that can guarantee short-circuiting depends on how expressions are bound into parameters when the operator application actually happens

[22:37] <ab5tract> so, if it can't (yet) guarantee short-circuiting, I think it makes sense to turn the currying off.

[22:40] <ab5tract> (when I say "you would get", I mean if && curried *)

[22:48] <ab5tract> m: Q| $_ = 'godzilla'; (* ~~ $_ * 1)(1) andthen .say | .AST.EVAL

[22:48] <camelia> rakudo-moar 765358247: OUTPUT: «True␤»

[22:48] <ab5tract> nemokosch: ^^

[22:50] <discord-raku-bot> <nemokosch> nice 💯

[22:50] <ab5tract> feels good. there are some other test cases in whatever.t that were marked todo that seem to be passing as well

[22:51] <discord-raku-bot> <nemokosch> I think RakuAST already worked with something like 12 ~~ $_ that could be shadowed previously (unlike $_ * 1)

[22:55] <ab5tract> ah, so maybe my patch isn't involved after all. still cool to see RakuAST getting it right

[22:59] <Geth> ¦ DateTime-Format/main: 7ef6b13031 | (Márton Polgár)++ (committed using GitHub Web editor) | .github/workflows/main.yml

[22:59] <Geth> ¦ DateTime-Format/main: Delete broken github action workflpw

[22:59] <Geth> ¦ DateTime-Format/main: review: https://github.com/raku-community-modules/DateTime-Format/commit/7ef6b13031

[23:00] <Geth> ¦ DateTime-Format/main: a7e504e922 | (Márton Polgár)++ (committed using GitHub Web editor) | .github/workflows/test.yml

[23:00] <Geth> ¦ DateTime-Format/main: Update workflow to something more practical

[23:00] <Geth> ¦ DateTime-Format/main: review: https://github.com/raku-community-modules/DateTime-Format/commit/a7e504e922

[23:05] <discord-raku-bot> <nemokosch> yes, this seems to work on HEAD already, at least

[23:06] <discord-raku-bot> <nemokosch> thunkiness of the smartmatch in whatevercode, that is

[23:06] <discord-raku-bot> <nemokosch> oh right, doesn't even have to be HEAD, it worked for 2023.04 as well

