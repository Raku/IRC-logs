[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:48] *** kjp_ left
[01:53] *** kjp joined
[03:02] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5316: wip use new stat syscall in DirRecurse

[03:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5316

[03:59] *** linkable6 left
[03:59] *** evalable6 left
[04:00] *** evalable6 joined
[04:02] *** linkable6 joined
[04:26] *** squashable6 left
[04:27] *** squashable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:02] *** squashable6 left
[07:02] *** bloatable6 left
[07:02] *** committable6 left
[07:02] *** greppable6 left
[07:02] *** shareable6 left
[07:02] *** tellable6 left
[07:02] *** sourceable6 left
[07:02] *** coverable6 left
[07:02] *** reportable6 left
[07:02] *** benchable6 left
[07:02] *** quotable6 left
[07:02] *** nativecallable6 left
[07:02] *** statisfiable6 left
[07:02] *** notable6 left
[07:02] *** linkable6 left
[07:02] *** evalable6 left
[07:02] *** bisectable6 left
[07:02] *** releasable6 left
[07:02] *** unicodable6 left
[07:03] *** greppable6 joined
[07:03] *** nativecallable6 joined
[07:03] *** quotable6 joined
[07:03] *** linkable6 joined
[07:03] *** statisfiable6 joined
[07:03] *** benchable6 joined
[07:03] *** bisectable6 joined
[07:03] *** unicodable6 joined
[07:04] *** sourceable6 joined
[07:04] *** squashable6 joined
[07:04] *** shareable6 joined
[07:04] *** releasable6 joined
[07:04] *** bloatable6 joined
[07:04] *** notable6 joined
[07:04] *** committable6 joined
[07:04] *** reportable6 joined
[07:05] *** coverable6 joined
[07:05] *** evalable6 joined
[07:05] *** tellable6 joined
[07:55] *** sena_kun joined
[09:14] *** sena_kun left
[10:29] *** quotable6 left
[10:29] *** nativecallable6 left
[10:29] *** bloatable6 left
[10:29] *** unicodable6 left
[10:29] *** greppable6 left
[10:29] *** releasable6 left
[10:29] *** shareable6 left
[10:29] *** squashable6 left
[10:29] *** benchable6 left
[10:29] *** linkable6 left
[10:29] *** notable6 left
[10:29] *** bisectable6 left
[10:29] *** reportable6 left
[10:29] *** tellable6 left
[10:29] *** statisfiable6 left
[10:29] *** coverable6 left
[10:29] *** evalable6 left
[10:29] *** sourceable6 left
[10:29] *** committable6 left
[10:30] *** quotable6 joined
[10:30] *** greppable6 joined
[10:30] *** sourceable6 joined
[10:30] *** linkable6 joined
[10:30] *** bloatable6 joined
[10:30] *** tellable6 joined
[10:30] *** notable6 joined
[10:31] *** unicodable6 joined
[10:31] *** committable6 joined
[10:31] *** releasable6 joined
[10:31] *** evalable6 joined
[10:31] *** nativecallable6 joined
[10:31] *** coverable6 joined
[10:32] *** shareable6 joined
[10:32] *** bisectable6 joined
[10:32] *** squashable6 joined
[10:32] *** benchable6 joined
[10:32] *** statisfiable6 joined
[10:32] *** reportable6 joined
[10:53] *** nine left
[10:53] *** nine joined
[11:25] *** sivoais left
[11:56] *** sivoais joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:35] *** sivoais left
[12:47] *** sivoais joined
[15:33] <lizmat> nine: looks like support for :P5 would yield up to 28 test files

[15:34] <lizmat> nine: a worthy new goal for me?

[15:39] <japhb> I'm surprised it's that many ... but "yes please".  :-)

[15:39] <[Coke]> obligatory lizmat++ nine++

[15:44] <lizmat> ok, so when I'm gonna do it, would it be a problem if the resulting AST would deparse as a Raku regex ?

[15:51] <japhb> That's both an interesting question and a valuable feature.  :-)

[15:52] <japhb> There's still the ability to grab the original *text* of the code that was parsed, yes?  So it's not like the original :P5 variant is just *gone*, rather that it wouldn't be represented as special nodes

[16:01] <lizmat> well, that depends on the approach I'm going to take

[16:01] <lizmat> generally, the original source can currently not be fetched, but that *is* in the works (the Origins framework)

[16:10] *** nine left
[16:10] *** nine joined
[16:21] <Geth> ¦ rakudo/main: 5fc5c32ebd | (Elizabeth Mattijsen)++ | 7 files

[16:21] <Geth> ¦ rakudo/main: RakuAST: refactor handling of rakudoc blocks

[16:21] <Geth> ¦ rakudo/main: 

[16:21] <Geth> ¦ rakudo/main: - save margin with all remaining rakudoc objects

[16:21] <Geth> ¦ rakudo/main: - add "rakudoc-table" as highlighting category

[16:21] <Geth> ¦ rakudo/main: - use new :directive / :for flags

[16:21] <Geth> ¦ rakudo/main: - remove margins from paragraphs in RakuAST::Doc objects

[16:21] <Geth> ¦ rakudo/main: - make deparsing *much* closer to the original (by reproducing

[16:21] <Geth> ¦ rakudo/main: <…commit message has 11 more lines…>

[16:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5fc5c32ebd

[16:38] <SmokeMachine> What’s origin framework?

[16:39] <SmokeMachine> lizmat: ^^

[16:39] <lizmat> https://github.com/rakudo/rakudo/blob/main/src/Raku/ast/origins.rakumod

[16:42] <SmokeMachine> lizmat: thanks! Taking a look!

[17:16] *** vrurg left
[17:16] *** vrurg joined
[17:22] *** vrurg left
[17:46] *** sena_kun joined
[17:51] *** vrurg joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:27] *** vrurg left
[18:37] *** vrurg joined
[20:38] <Geth> ¦ JSON-Unmarshal/main: 5 commits pushed by (Vadim Belman)++

[20:38] <Geth> ¦ JSON-Unmarshal/main: 96b2d1d200 | Be more explicit about Associative arguments

[20:38] <Geth> ¦ JSON-Unmarshal/main: 2974ad39fc | Allow deserializing into non-Any types

[20:38] <Geth> ¦ JSON-Unmarshal/main: 7045f3bfe5 | Add optional safety in form of :warn and :die (or :throw) arguments

[20:38] <Geth> ¦ JSON-Unmarshal/main: 4a749c9716 | Add plan to all tests

[20:38] <Geth> ¦ JSON-Unmarshal/main: 49a7c35656 | Merge pull request #6 from raku-community-modules/add-some-safety

[20:38] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/compare/3136450c48ad...49a7c356562a

[20:48] *** sena_kun left
[21:26] <Geth> ¦ JSON-Unmarshal/main: 1d053cbf6d | (Vadim Belman)++ | lib/JSON/Unmarshal.rakumod

[21:26] <Geth> ¦ JSON-Unmarshal/main: Make it possible to non-Any objects with unmarshal()

[21:26] <Geth> ¦ JSON-Unmarshal/main: 

[21:26] <Geth> ¦ JSON-Unmarshal/main: It's been previsouly done for `_unmarshal`, but this signature was

[21:26] <Geth> ¦ JSON-Unmarshal/main: overlooked accidentally.

[21:26] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/commit/1d053cbf6d

[21:26] <Geth> ¦ JSON-Unmarshal/main: 209ec9e7ad | (Vadim Belman)++ | 2 files

[21:26] <Geth> ¦ JSON-Unmarshal/main: Update documentation according to the latest changes

[21:26] <Geth> ¦ JSON-Unmarshal/main: 

[21:26] <Geth> ¦ JSON-Unmarshal/main: - add signatures of the `unmarshal` sub

[21:26] <Geth> ¦ JSON-Unmarshal/main: - document its named parameters

[21:26] <Geth> ¦ JSON-Unmarshal/main: - move the part about `is unmarshalled-by` trait into its own section

[21:26] <Geth> ¦ JSON-Unmarshal/main:   under DESCRIPTION

[21:26] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/commit/209ec9e7ad

[21:26] <Geth> ¦ JSON-Unmarshal/main: fa28230ae9 | (Vadim Belman)++ | Changes

[21:26] <Geth> ¦ JSON-Unmarshal/main: Updated Changes

[21:26] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/commit/fa28230ae9

[21:28] <Geth> ¦ JSON-Unmarshal/main: 344ec60f8d | (Vadim Belman)++ | 2 files

[21:28] <Geth> ¦ JSON-Unmarshal/main: 0.12

[21:28] <Geth> ¦ JSON-Unmarshal/main: review: https://github.com/raku-community-modules/JSON-Unmarshal/commit/344ec60f8d

[21:30] <MasterDuke> anyone see anything obviously wrong/missing in https://github.com/MoarVM/MoarVM/pull/1762 and https://github.com/rakudo/rakudo/pull/5316 ? i keep thinking it's just going to be some silly copy/paste-o, but i've looked them over a couple times without seeing it

[22:22] <vrurg> MasterDuke: I haven't tried to analyze it, lacking time for that. But what's the advantage of using newdisp?

[22:30] <MasterDuke> vrurg: jnthn and nine have suggested that particularly io-related ops should be done as syscalls. i guess because they can be better speshed?

[22:32] <vrurg> I thought you know. :) Anyway, the advantage I see immediately is it should be easier to extend with new APIs. Though there must be something else too.

[22:35] <MasterDuke> i believe the syscall allow for better description and analysis of their arguments, so lend themself to better optimization. but that's just my thought

[22:52] <ugexe> i wonder if its related to the upgrade-repository function specifically, or if thats just the first instance it hits

[22:55] <ugexe> i guess its from `for $short-dir.dir -> $file {`

[22:57] <MasterDuke> yep

[22:58] <ugexe> (next if $entry eq '.' or $entry eq '..')

[22:59] <MasterDuke> that's from the first commit though, things were fine with just it

[23:01] <ugexe> so its the IO::Path commit that gives the posted error?

[23:02] <MasterDuke> yeah

[23:03] <ugexe> thats odd, because if its the call to `.dir` that is causing the issue then it should be exercising only the code from the first commit

[23:04] <ugexe> i.e. `method dir` uses DIR-RECURSE, and doesn't really use anything in IO::Path besides call $.absolute

[23:06] <ugexe> ah, i guess it could also be related to https://github.com/rakudo/rakudo/blob/5fc5c32ebdbc946aae9da1f5d6aec2a411c59417/src/core.c/CompUnit/Repository/Installation.pm6#L176-L181

[23:06] <ugexe> upgrade-repository calls !repository-version (linked above)

[23:07] <ugexe> so seems like maybe the call to .f isn't working correctly?

[23:08] <MasterDuke> yeah, it seems to be something where it thinks a dir is a file (i.e., `.f` is true when it should be false)

[23:09] <MasterDuke> which is why i was hoping it was a silly typo in my .f edit (or its implementing syscall), but no luck so far

[23:09] <MasterDuke> (and i confirmed that the first commit builds and installs ok, now running a spectest)

[23:11] <ugexe> i think .f is returning false when it should be returning true fwiw

[23:13] <ugexe> could probably try something like nqp -e 'nqp-stat-calls-to-check-dot-f' to test

[23:13] <MasterDuke> it looks to me like it's trying to "open()" a directory

[23:15] <ugexe> yeah. but

[23:15] <ugexe>         if ($version < 1) {

[23:15] <ugexe>             for $short-dir.dir -> $file {

[23:15] <ugexe> for it to hit that second line, $version has to be 0. $version gets set to 0 if .f returns false

[23:16] <ugexe> $version 0 is super old, so it probably doesn't even get exercised anymore

[23:16] <MasterDuke> trivial examples are correct

[23:16] <ugexe> in normal circumstances

[23:16] <ugexe> maybe its the .unlink then?

[23:16] <MasterDuke> [dan@alexandria rakudo]$ ./rakudo-m -e 'use nqp; my $s := nqp::dispatch("boot-syscall", "file-stat", "VERSION", 0); say nqp::dispatch("boot-syscall", "stat-is-reg", $s)'

[23:16] <MasterDuke> 1

[23:16] <MasterDuke> [dan@alexandria rakudo]$ ./rakudo-m -e 'use nqp; my $s := nqp::dispatch("boot-syscall", "file-stat", "t", 0); say nqp::dispatch("boot-syscall", "stat-is-reg", $s)'

[23:16] <MasterDuke> 0

[23:16] <MasterDuke> [dan@alexandria rakudo]$ ./rakudo-m -e 'use nqp; my $s := nqp::dispatch("boot-syscall", "file-stat", "t", 0); say nqp::dispatch("boot-syscall", "stat-is-dir", $s)'

[23:16] <MasterDuke> 1

[23:16] <MasterDuke> [dan@alexandria rakudo]$ ./rakudo-m -e 'use nqp; my $s := nqp::dispatch("boot-syscall", "file-stat", "VERSION", 0); say nqp::dispatch("boot-syscall", "stat-is-dir", $s)'

[23:16] <MasterDuke> 0

[23:17] <MasterDuke> i didn't touch .unlink though

[23:18] <ugexe> i mention it because its the only file-like operation that gets done in that loop

[23:18] <ugexe> oh, rather

[23:18] <ugexe> the next line of the loop

[23:19] <ugexe> my @ids is List = $file.lines.unique;

[23:19] <ugexe> .lines on a path would try to open it i think

[23:19] <MasterDuke> yep, that's the line where it's failing

[23:19] <ugexe> i missed that part

[23:20] <MasterDuke> the backtrace goes 195, 194, 193

[23:21] <MasterDuke> but i think your right that it doesn't get into that `$version < 1` part of the code on main

[23:21] <ugexe> still, for it to get inside that loop means the !repository-version is either incorrectly returning false for that call to .f, or the slurp it does is somehow returning 0

[23:22] <MasterDuke> afk for a while, should be back later

[23:27] <ugexe> raku -e '"lib".IO.lines'

[23:28] <ugexe> 'lib' is a directory, cannot do '.open' on a directory

[23:28] <ugexe> on main, trying to call .lines on a directory gives a slightly different error

[23:37] <MasterDuke> that's surprising, what's the error on main? (turns out i'm not afk just yet)

[23:40] <MasterDuke> that comes from IO::Handle.open

[23:40] <MasterDuke> huh. why an IO::Handle?

[23:43] <MasterDuke> because IO::Path.lines calls self.open? but why is self an IO::Handle?

