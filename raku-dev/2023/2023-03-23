[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[01:03] *** linkable6 left
[01:03] *** evalable6 left
[01:03] *** evalable6 joined
[01:04] *** linkable6 joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[07:13] <nine> If you duplicate it, then modifications won't show up

[07:49] <discord-raku-bot> <Nemokosch> Is there a language other than Perl that does this "multipart names" at all?

[07:49] <discord-raku-bot> <Nemokosch> It rather seems like something that was never a good idea but could never hurt enough to be changed

[08:02] <nine> Sure there are. Ruby, Python, C++ are just the ones I immediately find.

[08:46] <discord-raku-bot> <Nemokosch> Where you can declare something in a namespace by naming it as if it were in a namespace? Surely not.

[09:31] *** sena_kun joined
[09:41] <nine> That's just a syntactic difference. The problem would still be the same.

[10:01] <lizmat> m: class A { method a(Str:D) { } }; A.a(Str)

[10:01] <camelia> rakudo-moar 3a9c1540d: OUTPUT: «Parameter '<anon>' of routine 'a' must be an object instance of type␤'Str', not a type object of type 'Str'.  Did you forget a '.new'?␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:01] <lizmat> m: say Q|class A { method a(Str:D) { } }; A.a(Str)|.AST(:run)

[10:01] <camelia> rakudo-moar 3a9c1540d: OUTPUT: «===SORRY!=== Error while compiling ␤Confused␤------> lass A { method a(Str:D) { } }; A.a(Str)⏏<EOL>␤»

[10:01] <lizmat> meh

[10:01] <discord-raku-bot> <Nemokosch> Whether you allow implicit population, auto-vivification and even auto declaration of namespaces? That's more than this one problem. And I'd say yes, it would solve it. The ambiguity of "do I create a new namespace or add to an old one" would go away.

[10:01] <lizmat> nine: looks like the :D is not being applied in signature check in RakuAST

[10:02] <lizmat> it *is* being codegenned correctly

[10:02] <lizmat> so looks like a QAST issue ?

[10:05] <lizmat> hmmm.. does not appear to affect dispatch, just binding signature appears

[10:12] <Geth> ¦ rakudo/main: 36b6244ae0 | (Elizabeth Mattijsen)++ | 4 files

[10:12] <Geth> ¦ rakudo/main: RakuAST: add deparse/raku/tests for RakuAST::Type::Capture

[10:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/36b6244ae0

[10:21] <lizmat> nine: any suggestions on where to look for that?

[11:01] <Geth> ¦ rakudo/main: 81f2ea2139 | (Elizabeth Mattijsen)++ | 3 files

[11:01] <Geth> ¦ rakudo/main: RakuAST: add deparse/raku/test for RakuAST::MetaInfix::Reverse

[11:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/81f2ea2139

[11:27] <nine> lizmat: that is actually closely related to what I'm working on. C.f. my "copy the existing mess" message

[11:28] <lizmat> nine: ack, so I won't work on that for now  :)

[11:39] <Geth> ¦ rakudo/main: fb30afaee3 | (Elizabeth Mattijsen)++ | 4 files

[11:39] <Geth> ¦ rakudo/main: RakuAST: add deparse/raku/test for RakuAST::MetaInfix::Zip

[11:39] <Geth> ¦ rakudo/main: 

[11:39] <Geth> ¦ rakudo/main: Also add a RakuAST::MetaInfix marker base class to allow typechecking

[11:39] <Geth> ¦ rakudo/main: on any RakuAST::MetaInfix::xxx meta op (as ApplyListInfix deparsing

[11:39] <Geth> ¦ rakudo/main: needs to be able to differentiate on that)

[11:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fb30afaee3

[11:45] *** ab5tract left
[11:48] <Geth> ¦ rakudo/main: 5ff428dc0c | (Elizabeth Mattijsen)++ | 3 files

[11:48] <Geth> ¦ rakudo/main: RakuAST: add deparse/raku/test for RakuAST::MetaInfix::Cross

[11:48] <Geth> ¦ rakudo/main: 

[11:48] <Geth> ¦ rakudo/main: Also simplify the .raku for all RakuAST::MetaInfix classes as these

[11:48] <Geth> ¦ rakudo/main: all .raku to the same structure apart from the invocant class

[11:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5ff428dc0c

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:18] <Geth> ¦ rakudo/main: e514d5d966 | (Elizabeth Mattijsen)++ | 3 files

[12:18] <Geth> ¦ rakudo/main: RakuAST: add deparse/raku/test for RakuAST::MetaInfix::Hyper

[12:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e514d5d966

[12:43] <Geth> ¦ rakudo/main: fb98833138 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[12:43] <Geth> ¦ rakudo/main: RakuAST: simplify many .raku methods onto generic base class handlers

[12:43] <Geth> ¦ rakudo/main: 

[12:43] <Geth> ¦ rakudo/main: Now that we have a better idea where that can be done

[12:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fb98833138

[12:51] <Geth> ¦ rakudo/main: 07d4677398 | (Elizabeth Mattijsen)++ | t/12-rakuast/TODO

[12:51] <Geth> ¦ rakudo/main: RakuAST: remove some TODOs that are actually untestable base classes

[12:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/07d4677398

[16:04] *** japhb left
[16:09] *** japhb joined
[17:02] *** japhb left
[17:06] *** japhb joined
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:15] <Geth> ¦ rakudo/main: b258927b05 | (Elizabeth Mattijsen)++ | 3 files

[18:15] <Geth> ¦ rakudo/main: RakuAST: add test for RakuAST::Regex::Backtrack::Greedy

[18:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b258927b05

[18:39] *** japhb left
[18:41] *** japhb joined
[19:06] *** MasterDuke joined
[19:08] <MasterDuke> t/spec/S02-literals/radix.t has a passing todo with RAKUDO_RAKUAST=1. do we have any way of specifying that in roast? or will we just wait until RAKUDO_RAKUAST is the default and un-todo it then?

[19:16] <[Coke]> I think waiting is the easiest option

[19:17] <[Coke]> else we conditionally todo it now and then have to remove the condition later.

[19:18] <MasterDuke> yeah, that was my assumption. just wasn't 100% sure if this had come up before

[19:24] <MasterDuke> what's the rakuast equiv of `$*W.cur_lexpad()`?

[20:05] <nine> mostly $resolver.current-scope

[21:35] *** sena_kun left
[21:39] *** sena_kun joined
[21:40] *** japhb left
[21:52] *** japhb joined
[22:09] *** sena_kun left
