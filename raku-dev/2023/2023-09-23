[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:39] *** hythm left
[01:00] *** hythm joined
[01:06] *** codesections left
[01:14] <elcaro> I added some comments. Trying not to blog post too hard in a PR comment ü§ê

[01:58] <discord-raku-bot> <nemokosch> well, I don't hold back, it multiplies

[02:01] <discord-raku-bot> <nemokosch> on a positive note, it's MUCH faster to read it than to write it

[02:01] <discord-raku-bot> <nemokosch> :d

[02:11] <discord-raku-bot> <_elcaro_> I think I hit most the points I wanted to... So I won't add more (yet?) I just wanted to offer a semi-opposing viewpoint. You are clearly passionate about Raku, and quite vocal, so more opinions are needed to gauge community sentiment.

[03:03] *** linkable6 left
[03:03] *** evalable6 left
[03:04] *** evalable6 joined
[03:04] *** linkable6 joined
[04:04] *** benchable6 left
[04:04] *** squashable6 left
[04:04] *** unicodable6 left
[04:04] *** tellable6 left
[04:04] *** notable6 left
[04:04] *** reportable6 left
[04:04] *** evalable6 left
[04:04] *** committable6 left
[04:04] *** linkable6 left
[04:04] *** statisfiable6 left
[04:04] *** bloatable6 left
[04:04] *** releasable6 left
[04:04] *** reportable6 joined
[04:04] *** unicodable6 joined
[04:05] *** committable6 joined
[04:05] *** statisfiable6 joined
[04:05] *** releasable6 joined
[04:05] *** tellable6 joined
[04:05] *** squashable6 joined
[04:05] *** linkable6 joined
[04:06] *** benchable6 joined
[04:06] *** evalable6 joined
[04:07] *** notable6 joined
[04:07] *** bloatable6 joined
[04:23] *** hythm left
[04:46] *** raiph left
[05:24] *** jgaz left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:23] *** kjp left
[07:27] *** kjp joined
[07:44] *** squashable6 left
[07:46] *** squashable6 joined
[09:15] <discord-raku-bot> <nemokosch> I'm rolling out this many arguments and elaborate them in the hope that this is a universal language that won't just get wiped away. Counter-arguments and showing evidence that disproves an argument is more than welcome but I really hope it won't be cast as "just an opinion"...

[09:51] <nine> lizmat: what do you need the bare WVal for? If I have a value that should be referenced by the AST I use RakuAST::Declaration::External::Constant

[09:52] <lizmat> Slang::Roman   Slang::Date

[09:54] <lizmat> in the legacy grammar, they return a QAST::WVal

[09:55] <lizmat> well, Slang::Date does,  Slang::Roman a QAST::IVal

[09:56] <lizmat> anyways, RakuAST::Constant allows an easy interface now that also makes it easy to provide custom deparsing logic

[09:56] <nine> Yes, sounds like constants or literals

[09:56] <lizmat> so that 0rXXXXII  will deparse as 0rXXXXII instead of 42

[12:00] *** reportable6 left
[12:01] <ab5tract> m: Q| dd my class { has $.z is default(42) where * == 42 }.new.z | .AST.EVAL

[12:01] <camelia> rakudo-moar 89755eb02: OUTPUT: ¬´===SORRY!=== Error while compiling ‚ê§Confused‚ê§------>  dd my class { has $.z is default(42)‚èè where * == 42 }.new.z ‚ê§¬ª

[12:02] <lizmat> is default not working on attributes yet ?

[12:02] <ab5tract> or is it choking on the presence of the where clause?

[12:03] *** reportable6 joined
[12:03] <ab5tract> m: Q| dd BEGIN (* == 42)(42) | .AST.EVAL

[12:03] <camelia> rakudo-moar 89755eb02: OUTPUT: ¬´===SORRY!===‚ê§Unknown compilation input 'qast'‚ê§¬ª

[12:03] <lizmat> m: Q| class { has $.z is default(42); }|.AST

[12:03] <camelia> rakudo-moar 89755eb02: ( no output )

[12:03] <lizmat> m: Q| class { has $.z is default(42) where * == 42; }|.AST

[12:03] <camelia> rakudo-moar 89755eb02: OUTPUT: ¬´===SORRY!=== Error while compiling ‚ê§Confused‚ê§------>  class { has $.z is default(42)‚èè where * == 42; }‚ê§¬ª

[12:04] <lizmat> looks like the where clause not being anticipated yet ?

[12:04] <ab5tract> looks like it..

[12:08] <ab5tract> nine: I don't know if this is a good use case for figuring out the begin time stuff, but currently we can't WhateverCode at BEGIN time

[12:12] *** codesections joined
[12:26] <Geth> ¬¶ nqp/main: 6d03c11077 | (Patrick B√∂ker)++ | azure-pipelines.yml

[12:26] <Geth> ¬¶ nqp/main: Bump MacOS and Linux Images

[12:26] <Geth> ¬¶ nqp/main: 

[12:26] <Geth> ¬¶ nqp/main: Replicates

[12:26] <Geth> ¬¶ nqp/main: 

[12:26] <Geth> ¬¶ nqp/main: https://github.com/rakudo/rakudo/commit/ff90a24d648d7a36423e76361b63f94e33acb6e2

[12:26] <Geth> ¬¶ nqp/main: 

[12:26] <Geth> ¬¶ nqp/main: and

[12:26] <Geth> ¬¶ nqp/main: 

[12:26] <Geth> ¬¶ nqp/main: https://github.com/rakudo/rakudo/commit/0953b4ac04c0884472ec0990301d54d207be9afa

[12:26] <Geth> ¬¶ nqp/main: review: https://github.com/Raku/nqp/commit/6d03c11077

[12:41] <Geth> ¬¶ rakudo/main: 75c615c4c6 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[12:41] <Geth> ¬¶ rakudo/main: RakuAST: add vetPerlForSyntax rule

[12:41] <Geth> ¬¶ rakudo/main: 

[12:41] <Geth> ¬¶ rakudo/main: To make it easier on slang builders (specifically Slang::Otherwise)

[12:41] <Geth> ¬¶ rakudo/main: and to improve readability of the statement:sym<for> rule.

[12:41] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/75c615c4c6

[12:55] *** codesections left
[14:15] *** raiph joined
[14:39] <ugexe> https://github.com/rakudo/rakudo/blob/75c615c4c67eb1c029caf386770ed6c2927e8c93/src/core.c/CompUnit/DependencySpecification.rakumod#L28-L34

[14:40] <ugexe> is it a good idea to have a public method that when called changes the underlying type of an attribute that is used elsewhere?

[14:42] <ugexe> it seems kind of racey

[14:42] <lizmat> it does

[14:44] <ugexe> what im particularly interested in at the moment is if its racey in a way that could result in having an undefined value at some point (even if only briefly) when it should have a value

[14:45] <ugexe> i'm thinking probably not, since the problem i'm looking at also shows up for auth-matcher but that method isn't racey in this way

[14:47] <ugexe> use Zef:ver($?DISTRIBUTION.meta<version>):api($?DISTRIBUTION.meta<api>):auth($?DISTRIBUTION.meta<auth>);

[14:47] <ugexe> use Zef::Client:ver(Zef.^ver):api(Zef.^api):auth(Zef.^auth);

[14:47] <ugexe> it could also be something related to how i do imports

[14:47] <ugexe> but --ll-exception doesn't give any additional information about where its happening :(

[14:52] <ugexe> oh i think i understand now

[14:52] <ugexe> the problem is indeed related to that !stringify method

[14:55] <ugexe> gah nevermind. i thought with using -Ilib (which uses Distribution::Hash) that maybe we were setting the ver and auth fields to '', but we only do that for auth. in that sense !stringify is busted for auth. however, i also see this error happening with version

[14:57] <ugexe> oh, maybe because i'm doing `use Zef:ver($?DISTRIBUTION.meta<version>`, and Distribution::Hash / -Ilib doesn't have a version key (just ver in this case)

[14:57] <ugexe> so auth is broken because of !stringify, and version is broken  because one of the Distribution objects doesn't normalize all the same fields as some of the other distribution objects

[15:01] <ugexe> its a bit unfortunate that in a META6.json the name 'version' is better than 'ver', but we use 'ver' in code i.e. `use Foo:ver<1>`, `MyFoo.^ver`, etc

[15:04] *** jgaz joined
[15:12] <ugexe> doh, `raku -e 'my $cr = CompUnit::Repository::FileSystem.new(prefix => $*CWD.add("lib")); say $cr.distribution.meta<ver>'` shows "*" (for the zef repo) which means that we do normalize version/ver, so back to the drawing board

[15:32] <ugexe> looks like there is still leftover lock::soft or whatever code in the CURs https://github.com/rakudo/rakudo/blob/75c615c4c67eb1c029caf386770ed6c2927e8c93/src/core.c/CompUnit/Repository/FileSystem.rakumod#L94-L108

[15:50] *** squashable6 left
[15:52] *** squashable6 joined
[17:34] *** codesections joined
[19:00] *** codesections left
[19:09] *** hythm joined
[19:18] *** raiph left
[20:53] *** hythm left
[21:01] <Geth> ¬¶ rakudo: ab5tract++ created pull request #5392: RakuAST: Fix more WhateverCode combinations

[21:01] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/5392

[21:16] *** ab5tract left
[21:17] *** ab5tract joined
[21:44] <ab5tract> that should be +1 spectest from that PR

[21:56] *** codesections joined
[22:22] *** codesections left
[22:30] *** codesections joined
[23:30] *** AlexDaniel joined
