[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:51] *** MasterDuke joined
[04:50] *** reportable6 left
[04:50] *** squashable6 left
[04:50] *** unicodable6 left
[04:50] *** bloatable6 left
[04:50] *** greppable6 left
[04:50] *** evalable6 left
[04:50] *** committable6 left
[04:50] *** coverable6 left
[04:50] *** sourceable6 left
[04:50] *** notable6 left
[04:50] *** quotable6 left
[04:50] *** benchable6 left
[04:50] *** tellable6 left
[04:50] *** releasable6 left
[04:50] *** bisectable6 left
[04:50] *** shareable6 left
[04:50] *** linkable6 left
[04:50] *** statisfiable6 left
[04:50] *** nativecallable6 left
[04:51] *** squashable6 joined
[04:51] *** notable6 joined
[04:51] *** statisfiable6 joined
[04:52] *** evalable6 joined
[04:52] *** bloatable6 joined
[04:52] *** sourceable6 joined
[04:52] *** reportable6 joined
[04:52] *** linkable6 joined
[04:52] *** coverable6 joined
[04:52] *** tellable6 joined
[04:52] *** bisectable6 joined
[04:53] *** greppable6 joined
[04:53] *** shareable6 joined
[04:53] *** nativecallable6 joined
[04:53] *** releasable6 joined
[04:53] *** benchable6 joined
[04:53] *** committable6 joined
[04:53] *** unicodable6 joined
[04:53] *** quotable6 joined
[05:53] *** notable6 left
[05:53] *** linkable6 left
[05:53] *** coverable6 left
[05:53] *** unicodable6 left
[05:53] *** bisectable6 left
[05:53] *** benchable6 left
[05:53] *** committable6 left
[05:53] *** statisfiable6 left
[05:53] *** quotable6 left
[05:53] *** evalable6 left
[05:53] *** tellable6 left
[05:53] *** nativecallable6 left
[05:53] *** bloatable6 left
[05:53] *** releasable6 left
[05:53] *** sourceable6 left
[05:53] *** greppable6 left
[05:53] *** reportable6 left
[05:53] *** shareable6 left
[05:53] *** squashable6 left
[05:54] *** evalable6 joined
[05:54] *** sourceable6 joined
[05:54] *** statisfiable6 joined
[05:54] *** benchable6 joined
[05:54] *** releasable6 joined
[05:55] *** linkable6 joined
[05:55] *** quotable6 joined
[05:55] *** squashable6 joined
[05:55] *** notable6 joined
[05:55] *** nativecallable6 joined
[05:55] *** committable6 joined
[05:55] *** tellable6 joined
[05:56] *** unicodable6 joined
[05:56] *** bisectable6 joined
[05:56] *** greppable6 joined
[05:56] *** coverable6 joined
[05:56] *** reportable6 joined
[05:56] *** bloatable6 joined
[05:56] *** shareable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[08:07] *** sena_kun joined
[08:57] <Geth> ¦ rakudo/main: 3b705faf77 | (Elizabeth Mattijsen)++ | 4 files

[08:57] <Geth> ¦ rakudo/main: RakuAST: various rakudoc fixes

[08:57] <Geth> ¦ rakudo/main: 

[08:57] <Geth> ¦ rakudo/main: - disallow =pod parsing inside =code|input|output (spotted by finanalyst)

[08:57] <Geth> ¦ rakudo/main: - properly handle :allow inside code|input|output blocks

[08:57] <Geth> ¦ rakudo/main: - fix issues with implicit code block detection

[08:57] <Geth> ¦ rakudo/main: - fix issues with legacy Pod objects for code blocks

[08:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3b705faf77

[09:01] *** kurahaupo left
[09:17] *** kurahaupo joined
[09:18] *** kurahaupo left
[09:19] *** kurahaupo joined
[09:43] <Geth> ¦ rakudo/main: d58e68bdbe | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[09:43] <Geth> ¦ rakudo/main: RakuAST: make DOC phasers not die if --doc is not specified

[09:43] <Geth> ¦ rakudo/main: 

[09:43] <Geth> ¦ rakudo/main: Also add a .Nil utility method to generate a Nil in the tree

[09:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d58e68bdbe

[11:02] <Geth> ¦ rakudo/main: d1d64b38da | (Elizabeth Mattijsen)++ | 2 files

[11:02] <Geth> ¦ rakudo/main: RakuAST: make accessing (command line) options easier

[11:02] <Geth> ¦ rakudo/main: 

[11:02] <Geth> ¦ rakudo/main: By introducing the %*OPTIONS dynamic variable, which is a shortcut

[11:02] <Geth> ¦ rakudo/main: to %*COMPILING<%?OPTIONS>

[11:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d1d64b38da

[11:16] *** evalable6 left
[11:16] *** linkable6 left
[11:18] *** linkable6 joined
[11:18] *** evalable6 joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:26] *** jgaz left
[12:26] *** jgaz joined
[12:36] *** nine left
[12:37] *** nine joined
[13:35] <Geth> ¦ rakudo/main: b5a30e70b6 | (Elizabeth Mattijsen)++ | 2 files

[13:35] <Geth> ¦ rakudo/main: RakuAST: add full --doc support

[13:35] <Geth> ¦ rakudo/main: 

[13:35] <Geth> ¦ rakudo/main: Basically by adding another INIT phaser that loads the indicated

[13:35] <Geth> ¦ rakudo/main: renderer, calls it and puts that on STDOUT, and then exits.

[13:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b5a30e70b6

[13:35] <lizmat> 809!

[13:39] <vrurg> lizmat++!

[13:46] <Geth> ¦ rakudo/main: 3f62a6f46a | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[13:46] <Geth> ¦ rakudo/main: RakuAST: =for doc blocks may *not* have multiple newlines

[13:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3f62a6f46a

[13:46] <lizmat> 810!

[13:46] <lizmat> removing one + means + one test  :-)

[14:07] *** sena_kun left
[14:08] <lizmat> m: dd $=pod ␤=defn foo ␤no B<markup> ??

[14:08] <camelia> rakudo-moar 3f62a6f46: OUTPUT: «[Pod::Defn.new(term => "foo", config => {}, contents => [Pod::Block::Para.new(config => {}, contents => ["no B<markup> ??"])])]␤»

[14:10] *** sena_kun joined
[14:10] *** sena_kun left
[14:11] *** sena_kun joined
[15:20] <Geth> ¦ rakudo/main: b6fb937da6 | (Elizabeth Mattijsen)++ | 2 files

[15:20] <Geth> ¦ rakudo/main: RakuAST: add proper $=pod support for =defn blocks

[15:20] <Geth> ¦ rakudo/main: 

[15:20] <Geth> ¦ rakudo/main: Also fix issue with empty =code|input|output blocks

[15:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b6fb937da6

[15:20] <lizmat> 811!

[15:22] <lizmat> all of the remaining S26 tests now hinge on table support

[17:56] *** sena_kun left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:05] *** sena_kun joined
[19:23] *** [Coke] left
[19:25] *** Xliff left
[19:25] *** [Coke] joined
[19:39] *** codesections joined
[19:44] <gfldex> m: role R[::T] { my class C is T { } }

[19:44] <camelia> rakudo-moar b6fb937da: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤T does not support inheritance, so R::C cannot inherit from it␤at <tmp>:1␤»

[19:45] <gfldex> How does Rakudo know that T doesn't support inheritance? I'm pretty sure T could be very supportive indeed.

[19:48] <ugexe> https://github.com/rakudo/rakudo/blob/b6fb937da6653d9129cdb09f24a237bce230b234/src/core.c/traits.pm6#L16-L44 -- the relevant code

[20:00] <gfldex> m: role R[::T] { say T.HOW; }

[20:00] <camelia> rakudo-moar b6fb937da: ( no output )

[20:00] <gfldex> m: role R[::T] { say T.HOW; }; my R[Str] $foo;

[20:00] <camelia> rakudo-moar b6fb937da: ( no output )

[20:22] *** codesections left
[21:17] *** sena_kun left
[21:43] *** codesections joined
[23:52] *** codesections left
