[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:51] *** linkable6 left
[01:51] *** coverable6 left
[01:51] *** unicodable6 left
[01:51] *** releasable6 left
[01:51] *** shareable6 left
[01:51] *** evalable6 left
[01:51] *** sourceable6 left
[01:51] *** notable6 left
[01:52] *** unicodable6 joined
[01:53] *** notable6 joined
[01:53] *** shareable6 joined
[01:53] *** releasable6 joined
[01:53] *** coverable6 joined
[01:53] *** sourceable6 joined
[01:54] *** linkable6 joined
[01:54] *** evalable6 joined
[02:40] *** MasterDuke joined
[02:56] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5352: Use new stat syscalls

[02:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5352

[03:21] *** squashable6 left
[03:21] *** squashable6 joined
[04:48] *** squashable6 left
[04:48] *** coverable6 left
[04:48] *** benchable6 left
[04:48] *** shareable6 left
[04:48] *** nativecallable6 left
[04:48] *** reportable6 left
[04:48] *** releasable6 left
[04:48] *** notable6 left
[04:48] *** committable6 left
[04:48] *** evalable6 left
[04:48] *** sourceable6 left
[04:48] *** quotable6 left
[04:48] *** greppable6 left
[04:48] *** unicodable6 left
[04:48] *** linkable6 left
[04:48] *** statisfiable6 left
[04:48] *** tellable6 left
[04:48] *** bloatable6 left
[04:48] *** bisectable6 left
[04:48] *** tellable6 joined
[04:49] *** statisfiable6 joined
[04:50] *** unicodable6 joined
[04:50] *** committable6 joined
[04:50] *** nativecallable6 joined
[04:50] *** bisectable6 joined
[04:50] *** benchable6 joined
[04:50] *** greppable6 joined
[04:50] *** shareable6 joined
[04:50] *** linkable6 joined
[04:51] *** notable6 joined
[04:51] *** releasable6 joined
[04:51] *** quotable6 joined
[04:51] *** bloatable6 joined
[04:51] *** squashable6 joined
[04:51] *** evalable6 joined
[04:51] *** reportable6 joined
[04:51] *** sourceable6 joined
[04:51] *** coverable6 joined
[05:51] *** unicodable6 left
[05:51] *** bloatable6 left
[05:51] *** greppable6 left
[05:51] *** notable6 left
[05:51] *** releasable6 left
[05:51] *** nativecallable6 left
[05:51] *** statisfiable6 left
[05:51] *** squashable6 left
[05:51] *** reportable6 left
[05:51] *** bisectable6 left
[05:51] *** shareable6 left
[05:51] *** evalable6 left
[05:51] *** sourceable6 left
[05:51] *** tellable6 left
[05:51] *** committable6 left
[05:51] *** benchable6 left
[05:51] *** linkable6 left
[05:51] *** quotable6 left
[05:51] *** coverable6 left
[05:51] *** squashable6 joined
[05:52] *** shareable6 joined
[05:52] *** releasable6 joined
[05:52] *** notable6 joined
[05:53] *** linkable6 joined
[05:53] *** greppable6 joined
[05:53] *** quotable6 joined
[05:53] *** bloatable6 joined
[05:53] *** sourceable6 joined
[05:53] *** benchable6 joined
[05:53] *** committable6 joined
[05:54] *** statisfiable6 joined
[05:54] *** reportable6 joined
[05:54] *** evalable6 joined
[05:54] *** tellable6 joined
[05:54] *** nativecallable6 joined
[05:54] *** unicodable6 joined
[05:54] *** bisectable6 joined
[05:54] *** coverable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:01] *** shareable6 left
[07:01] *** bisectable6 left
[07:01] *** squashable6 left
[07:01] *** evalable6 left
[07:01] *** statisfiable6 left
[07:01] *** coverable6 left
[07:01] *** benchable6 left
[07:01] *** unicodable6 left
[07:01] *** quotable6 left
[07:01] *** nativecallable6 left
[07:01] *** linkable6 left
[07:01] *** notable6 left
[07:01] *** sourceable6 left
[07:01] *** committable6 left
[07:01] *** bloatable6 left
[07:01] *** greppable6 left
[07:01] *** releasable6 left
[07:01] *** tellable6 left
[07:01] *** reportable6 left
[07:01] *** reportable6 joined
[07:01] *** tellable6 joined
[07:01] *** evalable6 joined
[07:01] *** sourceable6 joined
[07:01] *** shareable6 joined
[07:01] *** unicodable6 joined
[07:02] *** committable6 joined
[07:02] *** statisfiable6 joined
[07:02] *** releasable6 joined
[07:02] *** notable6 joined
[07:03] *** bloatable6 joined
[07:03] *** nativecallable6 joined
[07:03] *** coverable6 joined
[07:03] *** linkable6 joined
[07:03] *** bisectable6 joined
[07:03] *** squashable6 joined
[07:03] *** benchable6 joined
[07:03] *** greppable6 joined
[07:03] *** quotable6 joined
[08:22] *** sena_kun joined
[08:50] <Geth> ¦ rakudo/main: 244ea5e9d6 | (Elizabeth Mattijsen)++ | 2 files

[08:50] <Geth> ¦ rakudo/main: RakuAST: add &*DD as an alias of dd()

[08:50] <Geth> ¦ rakudo/main: 

[08:50] <Geth> ¦ rakudo/main: For *much* easier debugging of grammar and actions

[08:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/244ea5e9d6

[09:03] <Geth> ¦ rakudo/main: 632f952b0a | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[09:03] <Geth> ¦ rakudo/main: RakuAST: Streamline lang-setup a bit

[09:03] <Geth> ¦ rakudo/main: 

[09:03] <Geth> ¦ rakudo/main: And also introduce the RAKU_LANGUAGE_VERSION environment variable

[09:03] <Geth> ¦ rakudo/main: to set the language version to be used if no "use v6xxx" has been

[09:03] <Geth> ¦ rakudo/main: seen.

[09:03] <Geth> ¦ rakudo/main: 

[09:03] <Geth> ¦ rakudo/main: Sadly this exposed a bug in language version setting: $*RAKU is

[09:03] <Geth> ¦ rakudo/main: set correctly with e.g. a "use v6.*", but the actual grammar being

[09:03] <Geth> ¦ rakudo/main: used, is still the default, aka the 6.d grammar.

[09:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/632f952b0a

[09:29] *** evalable6 left
[09:29] *** linkable6 left
[09:30] *** evalable6 joined
[09:31] *** linkable6 joined
[09:46] *** NemokoschKiwi joined
[10:21] <Geth> ¦ rakudo/main: 88ca1e382c | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[10:21] <Geth> ¦ rakudo/main: RakuAST: Streamline check-variable

[10:21] <Geth> ¦ rakudo/main: 

[10:21] <Geth> ¦ rakudo/main: Still not fully grokking what is going on with metaops though

[10:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/88ca1e382c

[10:21] <Geth> ¦ rakudo/main: e5d5d48eb1 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[10:21] <Geth> ¦ rakudo/main: RakuAST: Streamline obs handling

[10:21] <Geth> ¦ rakudo/main: 

[10:21] <Geth> ¦ rakudo/main: And get rid of worryobs, as it is not being called anywhere

[10:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e5d5d48eb1

[10:37] <Geth> ¦ rakudo/main: a17588f81b | (Elizabeth Mattijsen)++ | 2 files

[10:37] <Geth> ¦ rakudo/main: RakuAST: kebab-case typed_panic

[10:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a17588f81b

[10:46] <Geth> ¦ rakudo/main: b20c79932f | (Elizabeth Mattijsen)++ | 2 files

[10:46] <Geth> ¦ rakudo/main: RakuAST: kekab-case typed_sorry

[10:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b20c79932f

[10:57] <Geth> ¦ rakudo/main: 8a7f4b722d | (Elizabeth Mattijsen)++ | 2 files

[10:57] <Geth> ¦ rakudo/main: RakuAST: kebab-case typed_sorry

[10:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8a7f4b722d

[11:11] <lizmat> meh, that was typed_worry

[11:35] <lizmat> TIL that: subst($orig, /foo/, "bar")  is a thing in NQP

[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:51] *** MasterDuke left
[13:05] <Geth> ¦ rakudo/main: 1d5a9508e7 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[13:05] <Geth> ¦ rakudo/main: RakuAST: Streamline build-exception and associated

[13:05] <Geth> ¦ rakudo/main: 

[13:05] <Geth> ¦ rakudo/main: Still not grokking them completely :-(

[13:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1d5a9508e7

[13:13] *** finanalyst joined
[13:15] <lizmat> hmmm... feels like $*RESTRICTED is a leftover from the obsolete restricted setting?

[13:16] <lizmat> ah, I guess not: it's being set in src/core.c/INTERPOLATE

[13:17] <lizmat> intriguing though there don't appear any tests for it ?

[13:28] <Geth> ¦ rakudo/main: 779f0f7992 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[13:28] <Geth> ¦ rakudo/main: RakuAST: remove "security" method

[13:28] <Geth> ¦ rakudo/main: 

[13:28] <Geth> ¦ rakudo/main: It was only being called once, so move the logic there

[13:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/779f0f7992

[13:29] *** sena_kun left
[13:31] *** sena_kun joined
[13:46] <vrurg> lizmat: have you resolved the problem with `nano`?

[13:46] <lizmat> nope

[13:47] <vrurg> Sorry, I was afk all day yesterday.

[13:47] <lizmat> no worries

[13:47] <lizmat> so, use v6.e.PREVIEW and v6.* set $*RAKU and such

[13:47] <lizmat> but the grammar that's being used, is still 6.d

[13:47] <vrurg> The legacy grammar supports it by introducing explicit token term:sym<nano>, actually. That is how it works, I think.

[13:51] <vrurg> `use v6e.*; say CORE-SETTING-REV;` shows no difference between the legacy and RakuAST.

[13:52] <lizmat> nano was just the canary...

[13:52] <lizmat> it isn't limited to nano

[13:53] <lizmat> I don't think?

[13:53] <vrurg> There are more 'term' definitions in the legacy grammar, if memory doesn't betray me.

[13:54] <vrurg> CORE-SETTING-REV is declared in the settings. If it is 'e' then there is no way CORE.e is not loaded.

[13:55] <vrurg> Therefore the problem is not in a term not available – it's not seen.

[14:00] <lizmat> m: use v6.e.PREVIEW; say $*RAKU; say //42;

[14:00] <camelia> rakudo-moar 779f0f799: OUTPUT: «Raku (6.e)␤True␤»

[14:00] <lizmat> m: Q|use v6.e.PREVIEW; say $*RAKU; say //42|.AST

[14:00] <camelia> rakudo-moar 779f0f799: OUTPUT: «===SORRY!=== Error while compiling ␤Null regex not allowed.  Please use .comb if you wanted to produce a␤sequence of characters from a string.␤------> use v6.e.PREVIEW; say $*RAKU; say //⏏542␤»

[14:00] <lizmat> not just nano

[14:01] <lizmat> m: use v6.*; snitch (1,2,3)

[14:01] <camelia> rakudo-moar 779f0f799: OUTPUT: «(1 2 3)␤»

[14:02] <lizmat> m: Q|use v6.*; snitch (1,2,3)|.AST

[14:02] <camelia> rakudo-moar 779f0f799: ( no output )

[14:02] <vrurg> I'd rather suspect the lookup mechanism. 

[14:02] <vrurg> The CORE is definitely there, but lookups do not see symbols from it. 

[14:03] <lizmat> ok, I'll look in that direction then...  still feels weird

[14:04] <vrurg> m: q<use v6.*; say &prefix:<//>.raku>.AST

[14:04] <camelia> rakudo-moar 779f0f799: ( no output )

[14:04] <vrurg> m: q<use v6.*; say &prefix:<//>.raku>.AST.EVAL

[14:04] <camelia> rakudo-moar 779f0f799: OUTPUT: «No such method 'raku' for invocant of type 'VMNull'.  Found 'raku' on␤type 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[14:04] <vrurg> m: EVAL q<use v6.*; say &prefix:<//>.raku>.AST

[14:04] <camelia> rakudo-moar 779f0f799: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma␤to override this error but only if you're VERY sure your data contains␤no injection attacks).␤at <tmp>:1␤------> L q<use…»

[14:05] <vrurg> Anyway, plain lookup for the prefix OP works. The symbol _is_ visible. Then it's something about the resolver and/or how the grammar is using it.

[14:06] <lizmat> ack

[14:07] <vrurg> Which I could look into it personally. :(

[14:07] * vrurg sadly crawls away to start integrating work app with google cloud...

[14:08] <lizmat> I wonder if $*R needs updating in lang-setup

[14:08] <lizmat> I'll try to see if that makes a difference

[14:19] <Geth> ¦ rakudo/main: 386cac8a12 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[14:19] <Geth> ¦ rakudo/main: RakuAST: streamline .NYI and .malformed

[14:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/386cac8a12

[14:33] <lizmat> nope, that isn't it :-(

[15:19] *** NemokoschKiwi left
[15:30] <vrurg> jdv: guess, you plan a release soon?

[15:31] <lizmat> last thing jdv said was Monday

[15:37] <vrurg> Ok. Just don't want to merge the PseudoStash thing before that.

[15:44] *** finanalyst left
[15:46] <Geth> ¦ rakudo/main: 083f28579f | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[15:46] <Geth> ¦ rakudo/main: RakuAST: Streamline .missing handling

[15:46] <Geth> ¦ rakudo/main: 

[15:46] <Geth> ¦ rakudo/main: And some more tweaks and fixes

[15:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/083f28579f

[17:05] <Geth> ¦ rakudo/main: 32e078ca75 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[17:05] <Geth> ¦ rakudo/main: RakuAST: Started on streamlining expressions

[17:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/32e078ca75

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:08] *** finanalyst joined
[18:12] *** finanalyst left
[20:26] *** MasterDuke joined
[21:01] <japhb> Is it just me, or is Rakudo starting up much slower than usual these days?

[21:01] <japhb> $ time raku -e ''

[21:01] <japhb> real	0m0.476s

[21:01] <japhb> user	0m0.117s

[21:01] <japhb> sys	0m0.024s

[21:01] <japhb> (That's from a fresh Rakudo build.)

[21:02] *** sena_kun left
[21:05] <japhb> In contrast, from back in February:

[21:05] <japhb> $ time rakudo-moar-2023.02-0-g6c2f9194f/rakudo-m -e ''

[21:05] <japhb> real	0m0.093s

[21:05] <japhb> user	0m0.091s

[21:05] <japhb> sys	0m0.017s

[21:07] <japhb> OK, confirmed faster start at rakudo-moar-2023.02-232-gef05ef1e2 and slower start at rakudo-moar-2023.05-7-g5be4c809f.  I don't locally have any builds between those, looks like I'll have to build some more to bisect this.

[21:08] <ugexe> the startup times for me on 2023.02 and blead are identical for me

[21:09] <ugexe> same with 2023.06

[21:09] <ugexe> macos m2

[21:10] <japhb> That's interesting.  Do you happen to have an x64 machine about?  I'm wondering if the jit got disabled, or some such arch-specific issue

[21:11] <japhb> Meanwhile I'm building a 2023.04 to start the bisection fun

[21:14] <ugexe> i have a resource limited vm that is x64, it'll take a bit to build those two rakudos  though

[21:18] <japhb> Yeah, understood.  Thank you for taking a look!

[21:20] <vrurg> japhb: I compared 2023.02 and 2023.05 on Xeon E5-2690 v4 @ 2.60GHz. Makes no difference, 160-180ms for `raku -e ''`

[21:31] <japhb> vrurg: What about 2023.06?

[21:31] <japhb> The earliest in the 2023.05 series I had was -7- so something could have landed between the release and that point

[21:31] <vrurg> Didn't have it readily available, but was building. Gimme a sec to try.

[21:32] <japhb> Yeah of course.  Thanks for helping to investigate!

[21:32] <vrurg> The same, no difference.

[21:32] <japhb> WTH is going on?

[21:32] <ugexe> yeah, i see no difference on x64 too

[21:33] * japhb wonders if it was a compiler, linker, or C library change between the earlier builds I have on my system and the later ones.

[21:33] <vrurg> japhb: try freshly rebuild .02 and .06 using the same tools, perhaps?

[21:34] <japhb> Yeah, going to try that next, once .04 finishes.

[21:43] <japhb> rakudo-moar-2023.04-0-g15df5d8a8 (built fresh) started at full speed.

[22:18] <japhb> rakudo-moar-2023.05-0-g297a1ec35 (built fresh) started SLOW.

[22:22] * vrurg in unpacking fresh popcorn...

[22:25] <japhb> Heh

[22:27] <japhb> Tried moving .raku and .zef out of the way just in case that was related.  Seems no.

[22:32] <japhb> Welp, continue bisecting I guess; trying 2023.04-103-gfac61c28e (first NQP bump after 2023.04)

[22:33] <japhb> Not that I'm actually assuming it's NQP, but it seemed like a reasonable way to rule that out at least.

[23:02] <japhb> rakudo-moar-2023.04-103-gfac61c28e (built fresh) started at full speed.

[23:04] <japhb> 2023.04-117-g401b77a8a (next NQP bump commit) next

[23:37] <japhb> rakudo-moar-2023.04-117-g401b77a8a (built fresh) started SLOW.

[23:38] <japhb> Guess I'll try -116- next, because if that is fast, then the NQP bump actually *is* the problem for me.

