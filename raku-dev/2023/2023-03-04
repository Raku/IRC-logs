[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[01:03] *** epony left
[01:10] *** MasterDuke left
[01:37] *** MasterDuke joined
[02:41] *** melezhik joined
[02:42] *** melezhik left
[02:49] *** melezhik joined
[02:51] *** melezhik left
[02:58] <[Coke]> .seen codesections

[02:58] <tellable6> [Coke], I saw codesections 2022-03-29T20:41:00Z in #raku: <codesections> I don't have a release date for epee yet, sorry ☹

[05:12] *** linkable6 left
[05:12] *** evalable6 left
[05:13] *** linkable6 joined
[05:15] *** evalable6 joined
[05:36] *** kjp left
[05:39] *** kjp joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:41] <patrickb> the rakubrew on apple silicon story is annoying. From memory: Rakubrew itself is running on an x86 Perl thus under Rosetta. Given that environment its really difficult to do an arm build. I do seem to remember that I fixed rakubrew downloading x86 builds instead of arm ones. (rakudo.org *does* have builds for apple silicon)

[06:45] <patrickb> https://github.com/Raku/App-Rakubrew/commit/275413978af936db0d034e84c8806a0d934b308f

[06:49] <patrickb> [Coke]: Which version of rakubrew are you running? I thought to have fixed it in v24. Can you check in a Rosetta environment what the output of `sysctl -n machdep.cpu.brand_string` and `uname -m` is?

[07:03] *** epony joined
[07:34] *** sena_kun joined
[07:34] *** sena_kun left
[09:19] *** squashable6 left
[09:20] *** squashable6 joined
[10:41] <Geth> ¦ rakudo/main: 61b8bee314 | (Elizabeth Mattijsen)++ | src/core.e/Any-iterable-methods.pm6

[10:41] <Geth> ¦ rakudo/main: Make sure snitch caches Seqs

[10:41] <Geth> ¦ rakudo/main: 

[10:41] <Geth> ¦ rakudo/main: Just as a precaution, as snitch will be used on Seqs usually and it

[10:41] <Geth> ¦ rakudo/main: is easy to get a "Seq exhausted" error otherwise

[10:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/61b8bee314

[10:42] <lizmat> found by writing examples for the documentation of snitch

[10:47] <gfldex> lizmat: would it be possible to let .snitch return a new Seq to avoid caching of ginormous lists?

[10:47] <lizmat> that would mean resetting the iterator, and there is no way to do that

[10:47] <lizmat> by design

[10:52] *** NemokoschKiwi joined
[10:55] <discord-raku-bot> <Nemokosch> if you clone a sequence, do the elements get consumed?

[10:56] <lizmat> it all depends on the underlying iterator: Seq is really just a wrapper around an interator to automatically allow caching with the PositionalBindFailover logic

[10:57] <lizmat> how does the iterator like being cloned

[10:57] <lizmat> you can't say anything about that generally

[11:02] <discord-raku-bot> <Nemokosch> where is it even described? I swear there was a method that could create another Seq/Iterator/something, and the example was that you could reply a randomization two times with the same content

[11:04] *** NemokoschKiwi left
[11:04] <lizmat> https://docs.raku.org/type/Iterator.html#IterationEnd

[11:07] <discord-raku-bot> <Nemokosch> I can't see the example

[11:08] <lizmat> well, that'd be a doc-website issue then ?

[11:09] <lizmat> viewable in dark and light theme for me

[11:15] <Geth> ¦ rakudo/main: efb59f789e | (Elizabeth Mattijsen)++ | 2 files

[11:15] <Geth> ¦ rakudo/main: Make prefix // working again

[11:15] <Geth> ¦ rakudo/main: 

[11:15] <Geth> ¦ rakudo/main: Somehow this was missed by an internal reorganization on language

[11:15] <Geth> ¦ rakudo/main: versions.  Lack of tests is probably the reason :-(

[11:15] <Geth> ¦ rakudo/main: 

[11:15] <Geth> ¦ rakudo/main: Also make sure prefix // has the same precedence as prefix +

[11:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/efb59f789e

[11:19] <discord-raku-bot> <Nemokosch> mind you, you linked IterationEnd, that's not really related

[11:20] <discord-raku-bot> <Nemokosch> >  there was a method that could create another Seq/Iterator/something, and the example was that you could reply a randomization two times with the same content

[11:20] <lizmat> "Iterators only allow one iteration over the entire sequence."

[11:20] <discord-raku-bot> <Nemokosch> *replay, sorry

[11:20] <lizmat> that line is at the IterationEnd entry

[11:20] <lizmat> and was pertinent to the question

[11:21] <discord-raku-bot> <Nemokosch> but there really is something that can save an iterator somehow

[11:21] <lizmat> and that be calling .cache on the Seq

[11:21] <discord-raku-bot> <Nemokosch> I remember that much

[11:22] <lizmat> m: my $s := (1..10).pick xx 10; dd $s; dd $s

[11:22] <camelia> rakudo-moar 61b8bee31: OUTPUT: «(2, 4, 6, 6, 5, 7, 2, 4, 8, 9).Seq␤(2, 4, 6, 6, 5, 7, 2, 4, 8, 9).Seq␤»

[11:24] <lizmat> that's because the Seq got cached by dd because of positional access I believe

[11:24] <lizmat> m: my $s := (1..10).pick xx 3; .say for $s; .say for $s

[11:24] <camelia> rakudo-moar 61b8bee31: OUTPUT: «9␤The iterator of this Seq is already in use/consumed by another Seq (you␤might solve this by adding .cache on usages of the Seq, or by assigning␤the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤2␤5␤»

[11:24] <lizmat> example of uncached use

[11:25] <discord-raku-bot> <Nemokosch> could be that it was some blog post

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:37] <Geth> ¦ rakudo/main: 28a32766ea | (Elizabeth Mattijsen)++ | 2 files

[12:37] <Geth> ¦ rakudo/main: Add rotor capabilities to sub comb in 6.e

[12:37] <Geth> ¦ rakudo/main: 

[12:37] <Geth> ¦ rakudo/main: It appears this was forgotten in the original addition.

[12:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/28a32766ea

[13:01] *** linkable6 left
[13:01] *** evalable6 left
[13:01] *** linkable6 joined
[13:03] *** evalable6 joined
[13:05] <Geth> ¦ rakudo/main: faff909125 | (Elizabeth Mattijsen)++ | src/core.c/Mu.pm6

[13:05] <Geth> ¦ rakudo/main: Make Mu.WHY a bit smarter

[13:05] <Geth> ¦ rakudo/main: 

[13:05] <Geth> ¦ rakudo/main: If the given object has a "name" method, assume it is a Routine and

[13:05] <Geth> ¦ rakudo/main: link to that section on the documentation website.  Also make sure

[13:05] <Geth> ¦ rakudo/main: we URL escape a bit.

[13:05] <Geth> ¦ rakudo/main: 

[13:05] <Geth> ¦ rakudo/main:     $ raku -e 'say &infix:<+>.WHY'

[13:05] <Geth> ¦ rakudo/main:     No documentation available for infix:<+>.  Perhaps it can be found at

[13:05] <Geth> ¦ rakudo/main:     https://docs.raku.org/routine/infix:&lt;+&gt;.html

[13:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/faff909125

[14:18] <Geth> ¦ rakudo/main: dde366eecf | (Elizabeth Mattijsen)++ | src/core.c/IO/Path.pm6

[14:18] <Geth> ¦ rakudo/main: Give IO::Path.chown more "unlink" like semantics

[14:18] <Geth> ¦ rakudo/main: 

[14:18] <Geth> ¦ rakudo/main: By having it return a Failure rather than throwing if something

[14:18] <Geth> ¦ rakudo/main: went wrong

[14:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dde366eecf

[15:56] <Geth> ¦ rakudo/main: ec8cdd5404 | (Elizabeth Mattijsen)++ | src/core.e/Rakudo/Iterator.pm6

[15:56] <Geth> ¦ rakudo/main: Make snip produce the last List without reification

[15:56] <Geth> ¦ rakudo/main: 

[15:56] <Geth> ¦ rakudo/main: which will stop it from hanging on lazy Iterables:

[15:56] <Geth> ¦ rakudo/main: 

[15:56] <Geth> ¦ rakudo/main:     .say for (1..*).snip(* < 10)'

[15:56] <Geth> ¦ rakudo/main:     # (1 2 3 4 5 6 7 8 9)

[15:57] <Geth> ¦ rakudo/main:     # (...)

[15:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ec8cdd5404

[15:57] <lizmat> gfldex ^^  finally got around to it

[16:05] *** guifa_ left
[16:24] <gfldex> cool

[16:42] *** gfldex left
[16:51] *** gfldex joined
[16:57] *** gfldex left
[17:00] *** gfldex joined
[17:26] *** guifa joined
[17:58] <lizmat> bisectable6: "2023-03-04".Date

[17:58] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[17:58] <bisectable6> lizmat, Output on all releases: https://gist.github.com/0ff6a3ea18fcba27904e7b52f4c7510d

[17:58] <bisectable6> lizmat, Bisecting by exit code (old=2020.02.1 new=2020.05.1). Old exit code: 1

[17:59] <bisectable6> lizmat, bisect log: https://gist.github.com/ce5be6a1fba344a811b99a2dba2a9618

[17:59] <bisectable6> lizmat, (2020-02-29) https://github.com/rakudo/rakudo/commit/d95d218f3192b06f0bb52bceb90e43d198747f09

[17:59] <bisectable6> lizmat, Bisecting by output (old=2017.05 new=2017.06) because on both starting points the exit code is 1

[17:59] <bisectable6> lizmat, bisect log: https://gist.github.com/0b03142e0a5a46e8376c91698025c288

[17:59] <bisectable6> lizmat, (2017-06-01) https://github.com/rakudo/rakudo/commit/7cf01296d95ef7abd4369db25e996f656b955cd7

[17:59] <bisectable6> lizmat, Bisecting by output (old=2016.09 new=2016.10) because on both starting points the exit code is 1

[17:59] <bisectable6> lizmat, bisect log: https://gist.github.com/32536cd3a48f1cb1a4fb37059572c971

[18:00] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/9946b55cb60da2198f8c014494171d7e

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:03] <[Coke]> patrickb: rakubrew v33 Build type: macos OS: darwin ; Apple M2 ; arm64

[18:04] <[Coke]> (running on x86 perl ... oooh)

[18:13] <ugexe> my assumption was the executable at https://rakubrew.org/macos/rakubrew is x86

[18:13] <[Coke]> It's not quite as convenient, but building your own and the registering with rakubrew seems to keep all the arm64-ness.

[18:18] <[Coke]> m: dd <01 11 111 2 20 02>.sort

[18:18] <camelia> rakudo-moar ec8cdd540: OUTPUT: «(IntStr.new(1, "01"), IntStr.new(2, "02"), IntStr.new(2, "2"), IntStr.new(11, "11"), IntStr.new(20, "20"), IntStr.new(111, "111")).Seq␤»

[18:26] *** epony left
[18:27] *** epony joined
[19:04] <ugexe> i modified the macos build script to download a arm64 perl, built the rakubrew executable, and using that it built arm64 raku/moarvm

[19:04] <ugexe> macos build script of rakubrew^

[19:34] <ugexe> [Coke]: patrickb: https://github.com/Raku/App-Rakubrew/pull/72

[19:42] <ugexe> i suppose i could manually create those builds if someone pings me, until we get some sort of build VM that runs darwin-arm64 perl

[19:42] <ugexe> s/builds/executables/

[20:23] *** ab5tract left
[20:23] *** ab5tract joined
[20:34] *** ab5tract left
[20:35] *** ab5tract joined
[20:45] *** ab5tract left
[21:18] *** squashable6 left
[21:21] *** squashable6 joined
[22:28] *** epony left
