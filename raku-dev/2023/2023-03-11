[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[05:06] *** unicodable6 left
[05:06] *** reportable6 left
[05:06] *** releasable6 left
[05:06] *** statisfiable6 left
[05:06] *** bisectable6 left
[05:06] *** shareable6 left
[05:06] *** quotable6 left
[05:06] *** sourceable6 left
[05:06] *** nativecallable6 left
[05:06] *** notable6 left
[05:06] *** committable6 left
[05:06] *** squashable6 left
[05:06] *** benchable6 left
[05:06] *** tellable6 left
[05:06] *** coverable6 left
[05:06] *** bloatable6 left
[05:06] *** evalable6 left
[05:06] *** linkable6 left
[05:06] *** greppable6 left
[05:06] *** shareable6 joined
[05:06] *** committable6 joined
[05:06] *** bloatable6 joined
[05:06] *** benchable6 joined
[05:06] *** bisectable6 joined
[05:06] *** greppable6 joined
[05:06] *** tellable6 joined
[05:07] *** nativecallable6 joined
[05:07] *** sourceable6 joined
[05:07] *** squashable6 joined
[05:07] *** reportable6 joined
[05:07] *** evalable6 joined
[05:07] *** unicodable6 joined
[05:08] *** quotable6 joined
[05:08] *** statisfiable6 joined
[05:08] *** linkable6 joined
[05:08] *** notable6 joined
[05:09] *** coverable6 joined
[05:09] *** releasable6 joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[09:52] <lizmat> nine: a golfed case: https://gist.github.com/lizmat/8da12bbe97b6d757339eda6456503a77

[09:53] <lizmat> not quite the same situation as yesterday (I thought) but still something I think should work

[10:01] <lizmat> aha...  derive_dispatcher only lives in World, so that code is just Wrong(tm)

[10:03] <nine> No, it's a method of Routine: https://github.com/rakudo/rakudo/blob/main/src/Perl6/bootstrap.c/BOOTSTRAP.nqp#L2459

[10:04] <lizmat> aah... that's why a search for "method derive_dispatcher" didn't show that  :-)

[10:05] <lizmat> anyways, RakuAST::Declaration::External is not a BEGIN time thingy, so .compile-time-value won't work on it, right ?

[10:09] <nine> Right. You could try replacing resolve-lexical with resolve-lexical with resolve-lexical-constant

[10:11] <lizmat> trying

[10:13] <lizmat> it doesn't bomb anymore, but the candidate does not appear to have been added

[10:16] <nine> Probably because it has auto generated a new proto?

[10:17] <lizmat> no, it doesn't get into the else branch

[10:17] <lizmat> and the dispatcher it got *is* a Sub object

[10:19] <lizmat> looks it got the right thing...

[10:25] <lizmat> and add_dispatchee is getting called

[10:29] <lizmat> and after that, the number of dispatchees is 1

[10:29] <lizmat> but meanwhile in Raku land, it is still 0  :-(

[10:33] <nine> Wait...that's correct! It's deriving a dispatcher after all, isn't it?

[10:34] <lizmat> I guess.. ?

[10:34] <lizmat> so that's not the real thing you're saying ?

[10:34] <lizmat> if it already a dispatcher, maybe it shouldn't derive, is what you're saying ?

[10:35] <lizmat> *is

[10:35] <nine> Multis are like any other subs lexical. So adding a multi to the dispatcher should only be a lexical effect as well. That's the point of derive_dispatcher

[10:35] <nine> The behaviour you see is absolutely correct. The more interesting test would be if candidates added outside your EVAL are visible inside that EVAL

[10:35] <nine> (in addition to the candidate added in the EVAL)

[10:36] <lizmat> hmmm

[10:38] <lizmat> ok, but I guess that would be a severe limitation in the creation of macros

[10:38] <lizmat> or, I guess you should be doing your own .add_dispatchee then

[10:40] <nine> Why would that be a problem for macros?

[10:41] <lizmat> not technically, but a bit of a WAT

[10:41] <nine> not even that

[10:43] <lizmat> https://gist.github.com/lizmat/7543275e6f56f480fbd8c32b1b9bee6f

[10:43] <lizmat> the add_dispatchee would need to live *outside* of the EVEL

[10:43] <lizmat> *EVAL

[10:44] <nine> Why would a macro even use EVAL in any way?

[10:44] <lizmat> to build code to be inserted somewhere ?

[10:45] <lizmat> ah, you're saying it would just insert the AST

[10:45] <nine> That would be completely missing the point of macros. They are part of compilation itself

[10:46] <lizmat> gotcha

[10:51] <Geth> ¦ rakudo/main: b5d1ddee0b | (Elizabeth Mattijsen)++ | src/Raku/ast/code.rakumod

[10:51] <Geth> ¦ rakudo/main: RakuAST: fix lookup of proto, nine++ for pointers

[10:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b5d1ddee0b

[10:52] <Geth> ¦ rakudo/main: 62122e575f | (Elizabeth Mattijsen)++ | 2 files

[10:52] <Geth> ¦ rakudo/main: RakuAST: add raku/deparse support for RakuAST::OnlyStar

[10:52] <Geth> ¦ rakudo/main: 

[10:52] <Geth> ¦ rakudo/main: And also tweak some related raku / deparse thingies

[10:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/62122e575f

[11:02] <Geth> ¦ rakudo/main: 08930e8aff | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[11:02] <Geth> ¦ rakudo/main: RakuAST: fix block thunks not getting an argument in $_

[11:02] <Geth> ¦ rakudo/main: 

[11:02] <Geth> ¦ rakudo/main: Eg. 42 andthen $_

[11:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/08930e8aff

[11:05] <lizmat> nine: I borked 2 t/12rakuast test, please ignore those for now, fix on its way

[11:08] <Geth> ¦ rakudo/main: fa79f83495 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[11:08] <Geth> ¦ rakudo/main: RakuAST: Unbreak RakuAST::Method deparsing

[11:08] <Geth> ¦ rakudo/main: 

[11:08] <Geth> ¦ rakudo/main: And reorganize RakuAST::Sub deparsing a bit

[11:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fa79f83495

[11:08] <Geth> ¦ rakudo/main: 965520bf2e | (Elizabeth Mattijsen)++ | 2 files

[11:08] <Geth> ¦ rakudo/main: RakuAST: add tests for RakuAST::OnlyStar

[11:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/965520bf2e

[11:27] <lizmat> 728/1355 !

[11:58] <lizmat> m: sub a(Int() $a) { dd $a }; a "42"   # nine: this doesn't coerce in RakuAST grammar

[11:58] <camelia> rakudo-moar 965520bf2: OUTPUT: «42␤»

[11:58] <lizmat> resulting in "42"␤   output

[12:00] *** reportable6 left
[12:00] <lizmat> nine: ah, that looks easily fixable

[12:01] *** reportable6 joined
[12:04] *** squashable6 left
[12:06] <Geth> ¦ rakudo/main: 2d54be72ad | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[12:06] <Geth> ¦ rakudo/main: RakuAST: need to look up RakuAST::Name type

[12:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2d54be72ad

[12:07] *** squashable6 joined
[12:09] <nine> lizmat: line 1321 looks fishy, too, doesn't it?

[12:09] <nine> And 468 in Grammar

[12:09] <lizmat> yep, same thing, will look for more cases like that

[12:12] <lizmat> those were the ones, looks like it

[12:19] <Geth> ¦ rakudo/main: d78754cb23 | (Elizabeth Mattijsen)++ | 2 files

[12:19] <Geth> ¦ rakudo/main: RakuAST: fix some more RakuAST:: class lookups

[12:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d78754cb23

[12:19] <lizmat> sadly, doesn't produce any additional passes  :-(

[13:20] *** nativecallable6 left
[13:20] *** quotable6 left
[13:20] *** unicodable6 left
[13:20] *** shareable6 left
[13:20] *** coverable6 left
[13:20] *** committable6 left
[13:20] *** tellable6 left
[13:20] *** bloatable6 left
[13:20] *** reportable6 left
[13:20] *** greppable6 left
[13:20] *** benchable6 left
[13:20] *** bisectable6 left
[13:20] *** statisfiable6 left
[13:20] *** evalable6 left
[13:20] *** notable6 left
[13:20] *** linkable6 left
[13:20] *** sourceable6 left
[13:20] *** squashable6 left
[13:20] *** releasable6 left
[13:21] *** tellable6 joined
[13:21] *** linkable6 joined
[13:21] *** evalable6 joined
[13:21] *** coverable6 joined
[13:21] *** benchable6 joined
[13:21] *** greppable6 joined
[13:21] *** shareable6 joined
[13:22] *** statisfiable6 joined
[13:22] *** reportable6 joined
[13:22] *** unicodable6 joined
[13:22] *** notable6 joined
[13:22] *** bloatable6 joined
[13:22] *** releasable6 joined
[13:22] *** bisectable6 joined
[13:23] *** committable6 joined
[13:23] *** nativecallable6 joined
[13:23] *** sourceable6 joined
[13:23] *** squashable6 joined
[13:23] *** quotable6 joined
[13:30] <nine> It's never the fixes you think

[13:33] <Geth> ¦ rakudo/main: 2680101652 | (Elizabeth Mattijsen)++ | 2 files

[13:33] <Geth> ¦ rakudo/main: RakuAST: make constraint on RakuAST::Type::Coercion optional

[13:33] <Geth> ¦ rakudo/main: 

[13:33] <Geth> ¦ rakudo/main: This simplifies both the Action, as well as any future use in macros

[13:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2680101652

[13:43] <Geth> ¦ rakudo/main: f06c9c3586 | (Elizabeth Mattijsen)++ | 2 files

[13:43] <Geth> ¦ rakudo/main: RakuAST: tweak RakuAST::Type::Coercion|Definedness raku/deparse

[13:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f06c9c3586

[13:43] <Geth> ¦ rakudo/main: 0d9a775669 | (Elizabeth Mattijsen)++ | 2 files

[13:43] <Geth> ¦ rakudo/main: RakuAST: add tests for RakuAST::Type::Coercion|Definedness

[13:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0d9a775669

[14:21] *** timo1 joined
[14:26] <Geth> ¦ rakudo/main: 8a3289cef7 | (Elizabeth Mattijsen)++ | src/Raku/ast/type.rakumod

[14:26] <Geth> ¦ rakudo/main: RakuAST: Tweak no args behaviour of RakuAST::Type::Parameterized

[14:26] <Geth> ¦ rakudo/main: 

[14:26] <Geth> ¦ rakudo/main: - make the "args" argument optional, create empty ArgList as default

[14:26] <Geth> ¦ rakudo/main: - return the base-type of no arguments were specified

[14:26] <Geth> ¦ rakudo/main: 

[14:26] <Geth> ¦ rakudo/main: This makes Rational ~~ Rational[] return True, as it did with the

[14:26] <Geth> ¦ rakudo/main: old grammar

[14:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8a3289cef7

[14:27] <Geth> ¦ rakudo/main: f07fae0d32 | (Elizabeth Mattijsen)++ | 3 files

[14:27] <Geth> ¦ rakudo/main: RakuAST: add tests for RakuAST::Type::Parameterized

[14:27] <Geth> ¦ rakudo/main: 

[14:27] <Geth> ¦ rakudo/main: Also tweak deparsing accordingly

[14:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f07fae0d32

[15:13] *** codesections left
[16:30] *** codesections joined
[17:32] <Geth> ¦ rakudo/main: ce6e903148 | (Elizabeth Mattijsen)++ | t/12-rakuast/terms.rakutest

[17:32] <Geth> ¦ rakudo/main: RakuAST: add one missing .raku roundtrip test

[17:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ce6e903148

[17:54] *** [Coke] joined
[17:55] <timo1> MasterDuke: i have a starting patch for you that you can fiddle into a presentable state, with regards to the for-range-optimization and uints, in the rakudo optimizer

[17:55] <[Coke]> last rakudoc release was by cpan:SOFTMOTH - any issues with me releasing it as fez:coke?

[17:56] <lizmat> zef:coke you mean?

[17:56] <lizmat> assuming SOFTMOTH is unresponsive, ok?

[17:56] <timo1> fəz

[17:56] <timo1> ſez

[17:58] <[Coke]> lizmat: just commented here: https://github.com/Raku/rakudoc/issues/24#issuecomment-1464965610

[17:58] <[Coke]> but the version out there doesn't install at all. will give it a day or so

[17:59] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: 5031953499 | (Timo Paulssen)++ | src/Perl6/Optimizer.nqp

[17:59] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: first attempt to make for-range-loops use uint if the block takes it

[17:59] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: 

[17:59] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: MasterDuke++ found that performance with a single uint arg for the

[17:59] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: for loop body was much worse than with int, so here's a case for

[17:59] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: the optimizer to figure that out and use a uint for counting as well.

[17:59] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: review: https://github.com/rakudo/rakudo/commit/5031953499

[17:59] <timo1> all i have done is check the output of --target=optimize, i have not timed this yet

[18:00] *** reportable6 left
[18:00] <timo1> oops, and of course it already asplodes, we don't have an add_u seems like. just as well, add_u and add_i wouldn't do anything different anyway i don't think

[18:01] *** reportable6 joined
[18:02] <lizmat> yeah, add_i would be the same

[18:02] <lizmat> *do

[18:02] <lizmat> which I think was nine's point not implementing them

[18:03] <lizmat> now I wonder how many WATs we can prevent in the future if they would be defined as aliases somehow

[18:07] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: bf7c1d0db1 | (Timo Paulssen)++ | src/Perl6/Optimizer.nqp

[18:07] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: first attempt to make for-range-loops use uint if the block takes it

[18:07] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: 

[18:07] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: MasterDuke++ found that performance with a single uint arg for the

[18:07] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: for loop body was much worse than with int, so here's a case for

[18:07] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: the optimizer to figure that out and use a uint for counting as well.

[18:07] <Geth> ¦ rakudo/optimize-for-range-with-uint-callable: review: https://github.com/rakudo/rakudo/commit/bf7c1d0db1

[18:07] <timo1> force-pushed :) :)

[18:08] <timo1> i think we could very well cause WAT by making them available but not having any difference in behavioru

[18:08] <timo1> "why is add_i and add_u the same???" is a WAT i find more bothersome than "why is there no add_u???"

[18:09] <timo1> anyway with that commit ~/raku/install/bin/raku -e 'my int $a = 0; for ^10_000_000 -> int $x { $a += $x }; say $a' takes the same amount of time as ~/raku/install/bin/raku -e 'my uint $a = 0; for ^10_000_000 -> uint $x { $a += $x }; say $a'

[18:09] <lizmat> timo1++

[18:09] <timo1> *about* the same :D

[18:12] <lizmat> within noise I hope

[18:15] <lizmat> [Coke]: re rakudoc, perhaps move it to raku-community-modules and release from there as zef:raku-community-modules ?

[18:16] <timo1> i have also not tried spec tests either

[18:16] <timo1> i have also also not tried a reverse for range loop, nor one with a step

[18:20] <timo1> adding MD's "more uint" patch for moarvm can at least improve the "reprop decont_u unsupported in P6Opaque Int" but i think that happens outside the loop, and therefore 1) will not be executed from the specialized code, as we will already have entered the loop and most probably performed OSR and 2) would only have happened once anyway, which should give negligible costs in this case for that

[18:20] <timo1> reason

[18:21] <[Coke]> lizmat: it's already in raku/

[18:21] <[Coke]> That seems "more official" to me, no?

[18:21] <lizmat> ah, duh... then by all means, I'd say release!

[18:26] <Geth> ¦ rakudo/main: cf2f709a84 | (Elizabeth Mattijsen)++ | 4 files

[18:26] <Geth> ¦ rakudo/main: RakuAST: add deparsing/raku/test for RakuAST::Type::Setting

[18:26] <Geth> ¦ rakudo/main: 

[18:26] <Geth> ¦ rakudo/main: The tests are actually TODOd as the RakuAST::Type::Setting class

[18:26] <Geth> ¦ rakudo/main: only does lexical lookups at the moment, rather than just looking

[18:26] <Geth> ¦ rakudo/main: in the setting.

[18:26] <Geth> ¦ rakudo/main: 

[18:26] <Geth> ¦ rakudo/main: Also of note: there is currently **NO** syntax for lookups in the

[18:26] <Geth> ¦ rakudo/main: <…commit message has 15 more lines…>

[18:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cf2f709a84

[18:48] <Geth> ¦ rakudo/main: b710020b27 | (Elizabeth Mattijsen)++ | 3 files

[18:48] <Geth> ¦ rakudo/main: RakuAST: add RakuAST::Name.without-colonpairs

[18:48] <Geth> ¦ rakudo/main: 

[18:48] <Geth> ¦ rakudo/main: And use it.  For readability as well as performance.

[18:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b710020b27

[19:00] <Geth> ¦ rakudo/main: 13005cdd34 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[19:00] <Geth> ¦ rakudo/main: RakuAST: implement 't' type expression thunking

[19:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/13005cdd34

[19:00] <Geth> ¦ rakudo/main: 8cb0dcb37c | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[19:00] <Geth> ¦ rakudo/main: RakuAST: Only thunk infixes that actually need thunking

[19:00] <Geth> ¦ rakudo/main: 

[19:00] <Geth> ¦ rakudo/main: with/without probably need special handling as will meta ops

[19:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8cb0dcb37c

[19:00] <Geth> ¦ rakudo/main: 301ca0dcd4 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[19:00] <Geth> ¦ rakudo/main: RakuAST: fix thunking of chained infix operands

[19:00] <Geth> ¦ rakudo/main: 

[19:00] <Geth> ¦ rakudo/main: Need to repeat the last thunk mode for all remaining operands when

[19:00] <Geth> ¦ rakudo/main: chaining.

[19:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/301ca0dcd4

[19:00] <nine> lizmat: the impact of these ^^^ for example is a welcome surprise :) And I haven't even fixed the test file I'm after yet

[19:04] *** ab5tract joined
[19:47] <[Coke]> auth on raku/rakudoc says github:raku on the class and meta6 - but the dist was uploaded to cpan

[19:48] <[Coke]> what's the right config setup here?

[19:53] <lizmat> well, it should be a "zef:xxx" auth matching the class and the META

[19:54] <lizmat> and it should be a zef:xxx that allows uploading zef:xxx

[19:54] <lizmat> so most likely zef:coke?

[19:56] <[Coke]> ok. and I think mi6 was the tool it looks like was used before.

[19:58] <lizmat> hmmm...I just realized that where the repo lives, doesn't really matter for the auth

[19:58] <lizmat> so maybe zef:raku-community-modules *would* be the best?

[19:58] <lizmat> [Coke]: assuming you can upload to zef and are member of raku-community-modules ?

[20:06] <lizmat> 735 / 1355!

[20:06] <[Coke]> i just uploaded it as me for now.

[20:07] <[Coke]> it was on cpan before, so this is an upgrade.

[20:07] <[Coke]> mi6 is nifty

[20:07] <lizmat> yup, agree

[20:08] <lizmat> nine: unfortunately, it seems to have borked one of the type tests, Int(Str) specifically

[20:08] <[Coke]> Will porbably adopt it for my personal stuff!

[20:12] <lizmat> nine: but only with RAKUDO_RAKUAST=1

[20:12] <lizmat> "Cannot create an Int from a 'Str' type object"

[20:15] <lizmat> nine: what changed is that Int(Str) is no longer a type per se

[20:15] <lizmat> m: use Test; is-deeply Int, Int(Str)

[20:15] <camelia> rakudo-moar 301ca0dcd: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: Int(Str)␤#      got: Int␤»

[20:16] <lizmat> ^^ nine: with RAKUDO_RAKUAST=1 this will bomb on the Int(Str)

[20:18] <lizmat> m: Int(Str)

[20:18] <camelia> rakudo-moar 301ca0dcd: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer Int(Str) in sink context (line 1)␤»

[20:18] <lizmat> ^^ golfed

[20:18] <lizmat> looks like the wrong QAST is generated

[20:19] <lizmat> it gets QASTed to nqp::call(Int,Str)

[20:20] <lizmat> m: use nqp; nqp::call(Int,Str)

[20:20] <camelia> rakudo-moar 301ca0dcd: OUTPUT: «Cannot create an Int from a 'Str' type object␤  in block <unit> at <tmp> line 1␤␤»

[20:21] <lizmat> whereas it should just be a WVAL(Int(Str))

[20:32] * lizmat goes afk&

[20:41] *** djinni` left
[20:41] *** jdv left
[20:41] *** eof left
[20:41] *** patrickb left
[20:42] *** djinni` joined
[20:44] *** summerisle joined
[20:45] *** patrickb joined
[20:46] *** jdv joined
[21:12] <MasterDuke> timo1: nice! does it actually end up generating the same ast as the int version then? or is still the "non range-optimized" ast, but just faster? i'll test later (hopefully this evening) and see how it interacts with my moarvm branch and my rakudo patch

[21:59] <timo1> it does make the same ast

[21:59] <timo1> plus/minus the lt/gt_u instead of _i

