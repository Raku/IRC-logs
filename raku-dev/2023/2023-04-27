[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:09] *** MasterDuke left
[00:34] *** MasterDuke joined
[00:36] *** MasterDuke79 joined
[00:38] *** MasterDuke left
[01:57] *** Xliff joined
[03:27] *** greppable6 left
[03:27] *** notable6 left
[03:27] *** committable6 left
[03:27] *** benchable6 left
[03:27] *** shareable6 left
[03:27] *** evalable6 left
[03:27] *** releasable6 left
[03:27] *** coverable6 left
[03:27] *** reportable6 left
[03:27] *** nativecallable6 left
[03:27] *** squashable6 left
[03:27] *** statisfiable6 left
[03:27] *** bloatable6 left
[03:27] *** unicodable6 left
[03:27] *** quotable6 left
[03:27] *** linkable6 left
[03:27] *** sourceable6 left
[03:27] *** tellable6 left
[03:27] *** bisectable6 left
[03:27] *** bloatable6 joined
[03:28] *** quotable6 joined
[03:28] *** notable6 joined
[03:28] *** benchable6 joined
[03:28] *** linkable6 joined
[03:28] *** greppable6 joined
[03:28] *** releasable6 joined
[03:28] *** statisfiable6 joined
[03:28] *** squashable6 joined
[03:28] *** committable6 joined
[03:28] *** evalable6 joined
[03:28] *** tellable6 joined
[03:29] *** nativecallable6 joined
[03:29] *** shareable6 joined
[03:29] *** coverable6 joined
[03:30] *** bisectable6 joined
[03:30] *** reportable6 joined
[03:30] *** unicodable6 joined
[03:30] *** sourceable6 joined
[04:49] *** Xliff left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:06] *** [TuxCM] joined
[07:24] *** squashable6 left
[07:27] *** squashable6 joined
[08:07] <gfldex> lizmat: Did you spend braintime on how RakuAST macros could interact with POD?

[08:26] *** sena_kun joined
[08:35] <lizmat> yes, I've set up things in such a way that RakuDoc nodes can be part of a statementlist

[08:35] <lizmat> and as such are RakuAST nodes like any other RakuAST node

[10:53] *** reportable6 left
[10:53] *** unicodable6 left
[10:53] *** sourceable6 left
[10:53] *** statisfiable6 left
[10:53] *** squashable6 left
[10:53] *** greppable6 left
[10:53] *** bloatable6 left
[10:53] *** committable6 left
[10:53] *** evalable6 left
[10:53] *** coverable6 left
[10:53] *** notable6 left
[10:53] *** releasable6 left
[10:53] *** quotable6 left
[10:53] *** tellable6 left
[10:53] *** bisectable6 left
[10:53] *** benchable6 left
[10:53] *** linkable6 left
[10:53] *** bloatable6 joined
[10:53] *** bisectable6 joined
[10:53] *** quotable6 joined
[10:53] *** coverable6 joined
[10:53] *** committable6 joined
[10:54] *** linkable6 joined
[10:54] *** statisfiable6 joined
[10:55] *** evalable6 joined
[10:55] *** unicodable6 joined
[10:55] *** releasable6 joined
[10:55] *** notable6 joined
[10:55] *** reportable6 joined
[10:55] *** sourceable6 joined
[10:56] *** benchable6 joined
[10:56] *** greppable6 joined
[10:56] *** squashable6 joined
[10:56] *** tellable6 joined
[11:00] <lizmat> nine vrurg it looks like I hit a snag with doc parsing that could be solved by *always* loading the core.c setting

[11:01] <lizmat> wasn't there another reason to want to do that ?

[11:04] <nine> It would be a simplification and we are always going to load that anyway

[11:06] <lizmat> ok, then I will continue on that premise

[11:07] <lizmat> it will only block parsing pod only files for now

[11:07] <lizmat> as it won't see some methods in the augmented RakuAST::Doc::Block class

[11:07] <lizmat> yet

[11:08] <lizmat> BTW, I have given up on making the RakuDoc parsing a slang

[11:09] <lizmat> should someone grok slangs in the future, it would be relatively easy to make it one again

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:40] <lizmat> progress!    +2 -4  :-)

[12:45] *** jgaz joined
[13:22] <[TuxCM]> Rakudo v2023.04-15-g1f010bd8a (v6.d) on MoarVM 2023.04-1-g965be0af5

[13:22] <[TuxCM]> csv-test-xs-20      0.378 -  0.381

[13:22] <[TuxCM]> csv-ip5xs           0.818 -  0.827

[13:22] <[TuxCM]> test-t --race       0.845 -  0.873

[13:22] <[TuxCM]> test-t              1.356 -  1.387

[13:22] <[TuxCM]> csv-parser          3.479 -  3.603

[13:22] <[TuxCM]> csv-ip5xs-20        5.062 -  5.538

[13:22] <[TuxCM]> test-t-20 --race    6.272 -  6.433

[13:22] <[TuxCM]> test                6.250 -  7.498

[13:22] <[TuxCM]> test-t-20          20.573 - 21.362

[13:24] <[TuxCM]> If I have a named argument to a method «method foo (@kh)», how can I check in the code if it was passed (I expect it to be empty if given)

[13:25] <vrurg> lizmat: don't forget that when it comes to compiling the core itself there will be no setting to load. I mean, the pre-loading code should not be hard to get around.

[13:25] <tellable6> 2023-04-27T01:58:59Z #raku <Xliff> vrurg I was the one behind the initial implementation, but the one that made it into main is nine's.

[13:25] <tellable6> 2023-04-27T01:59:48Z #raku <Xliff> vrurg To my knowledge, the only way to limit the number of jobs is logic left at the application level.

[13:25] <tellable6> 2023-04-27T02:01:37Z #raku <Xliff> vrurg See my parallel compilation runner, here - https://github.com/Xliff/p6-GtkPlus/blob/master/scripts/dependency-build.pl6#L124

[13:26] <vrurg> [TuxCM]: I use something like `sub foo(*%p) { %p<named>:exists }`

[13:27] <vrurg> [TuxCM]: methods has default slurpy %_, but I avoid using it in big code for readability.

[13:34] <[TuxCM]> looks like exactly this: https://github.com/rakudo/rakudo/issues/2483

[13:37] <vrurg> I use a similar approach sometimes: 'my class NOT-SET {};` or, sometimes, `my class NOT-SET is Nil {}`.

[13:38] <vrurg> This is when the value is not supposed to escape its lexical scope.

[13:40] <[TuxCM]> in my current case the method where I want this is a few levels deep, and using what you (and Liz) suggest will cause noise

[13:44] <vrurg> What kind of noise?

[13:44] <vrurg> m: sub foo(Int $a = 0 but my role NOT-SET {}) { say ($a ~~ NOT-SET ?? "NOT " !! ""), "PASSED ", $a; } foo; foo(0); 

[13:44] <camelia> rakudo-moar 1f010bd8a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> T-SET ?? "NOT " !! ""), "PASSED ", $a; }⏏ foo; foo(0);␤    expecting any of:␤        infix␤        infix stop…»

[13:44] <vrurg> m: sub foo(Int $a = 0 but my role NOT-SET {}) { say ($a ~~ NOT-SET ?? "NOT " !! ""), "PASSED ", $a; }; foo; foo(0); 

[13:44] <camelia> rakudo-moar 1f010bd8a: OUTPUT: «NOT PASSED 0␤PASSED 0␤»

[14:03] <[TuxCM]> https://github.com/Tux/CSV/commit/0a7f83f32d58c51a77c7d5d853277545a7cb2aa4 - See line 1576

[14:03] <[TuxCM]> Noise meaning I have to do the NOT-SET role stuff on all levels

[14:06] *** m6502 joined
[14:06] *** jgaz left
[14:08] <vrurg> I don't get what you want to achieve in there. Find out if @kv was passed in? BTW, what if the role has a method is-default? Then you could do $param.?is-default. A little bit costly, but if not used in a hot path then it'd be OK.

[14:54] <nine> Of course the other way to do this is just turn it into two multi candidates, one with that (mandatory) argument, the other without. If you're in the one with argument, you know that it's been provided

[14:54] <nine> That should give you the highest performing solution

[15:36] <[TuxCM]> nine, I thought about that, but with 5 optional parameters, that would be 32 variations

[15:37] <[TuxCM]> in this case, I want the default for $out depend on the fact that @kh was actually given as arg

[15:38] *** nine left
[15:38] *** nine joined
[16:04] <[TuxCM]> And the NOT-SET role breaks all other signatures down the line, as the type suddenly is Array+{Text::CSV::NOT-SET} instead of Array

[16:30] *** [TuxCM] left
[16:31] *** [TuxCM] joined
[16:42] <Voldenet> > If I have a named argument to a method «method foo (@kh)», how can I check in the code if it was passed (I expect it to be empty if given)

[16:42] <Voldenet> m: sub foo (:@kh = Empty) { @kh.defined.say }; foo(:kh(^10)); foo()

[16:42] <camelia> rakudo-moar 1f010bd8a: OUTPUT: «True␤False␤»

[16:44] <Voldenet> maybe I'm oversimplifying the question

[16:47] <lizmat> m: my class NOT-SET { }; sub a(:$a = NOT-SET) { say "not set" if $a ~~ NOT-SET }; a(:a(Empty))

[16:47] <camelia> rakudo-moar 1f010bd8a: ( no output )

[16:47] <lizmat> basically, use a sentinel value and check for that

[16:51] <lizmat> m: sub NOT-SET { state $ = Any.new }; sub a(:$a = NOT-SET) { say "not set" if $a<> =:= NOT-SET }; a(:a)

[16:52] <camelia> rakudo-moar 1f010bd8a: ( no output )

[16:52] <lizmat> m: sub NOT-SET { state $ = Any.new }; sub a(:$a = NOT-SET) { say "not set" if $a<> =:= NOT-SET }; a

[16:52] <camelia> rakudo-moar 1f010bd8a: OUTPUT: «not set␤»

[17:18] <Geth> ¦ rakudo/main: 70dc3c8a6b | (Elizabeth Mattijsen)++ | src/core.c/Nil.pm6

[17:18] <Geth> ¦ rakudo/main: Nil.Int should coerce to 0, not to ""

[17:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/70dc3c8a6b

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:17] *** m6502 left
[19:18] *** tellable6 left
[19:18] *** notable6 left
[19:18] *** reportable6 left
[19:18] *** quotable6 left
[19:18] *** linkable6 left
[19:18] *** committable6 left
[19:18] *** bisectable6 left
[19:18] *** releasable6 left
[19:18] *** sourceable6 left
[19:18] *** unicodable6 left
[19:18] *** greppable6 left
[19:18] *** bloatable6 left
[19:18] *** squashable6 left
[19:18] *** coverable6 left
[19:18] *** shareable6 left
[19:18] *** benchable6 left
[19:18] *** evalable6 left
[19:18] *** statisfiable6 left
[19:18] *** nativecallable6 left
[19:19] *** statisfiable6 joined
[19:19] *** unicodable6 joined
[19:19] *** notable6 joined
[19:19] *** quotable6 joined
[19:19] *** evalable6 joined
[19:19] *** linkable6 joined
[19:19] <gfldex> m: sub foo(|c(:$named)) { dd c.hash<named>:exists; }; foo(:named);foo();

[19:19] *** coverable6 joined
[19:20] *** bloatable6 joined
[19:20] <camelia> rakudo-moar 70dc3c8a6: OUTPUT: «Bool::True␤Bool::False␤»

[19:20] *** benchable6 joined
[19:20] *** bisectable6 joined
[19:20] <gfldex> [TuxCM]: if you are willing to add a Capture (and thus a subsig), you can reason at runtime about the argument list.

[19:20] *** releasable6 joined
[19:21] *** tellable6 joined
[19:21] *** nativecallable6 joined
[19:21] *** shareable6 joined
[19:21] *** sourceable6 joined
[19:21] *** reportable6 joined
[19:21] *** squashable6 joined
[19:21] *** committable6 joined
[19:22] *** greppable6 joined
[19:22] <Geth> ¦ rakudo/main: 14fed334ed | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[19:22] <Geth> ¦ rakudo/main: RakuAST: fix bound parameters being writable all the time

[19:22] <Geth> ¦ rakudo/main: 

[19:22] <Geth> ¦ rakudo/main: Makes my :($a) := \(3); $a++; die as it should.

[19:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/14fed334ed

[20:05] <vrurg> [Tux]: It's a good advise from gfldex too, though might be somewhat slowish for an often times called routine. Yet, I don't see how an Array+{Role} type can break with other signatures? It's still is an Array, a Positional.

[20:22] *** linkable6 left
[20:22] *** evalable6 left
[20:24] *** evalable6 joined
[20:25] *** linkable6 joined
[20:49] *** squashable6 left
[20:49] *** squashable6 joined
[21:15] *** sena_kun left
[22:15] *** evalable6 left
[22:15] *** linkable6 left
[22:15] *** shareable6 left
[22:15] *** reportable6 left
[22:15] *** releasable6 left
[22:15] *** squashable6 left
[22:15] *** statisfiable6 left
[22:15] *** coverable6 left
[22:15] *** nativecallable6 left
[22:15] *** benchable6 left
[22:15] *** quotable6 left
[22:15] *** tellable6 left
[22:15] *** sourceable6 left
[22:15] *** bisectable6 left
[22:15] *** unicodable6 left
[22:15] *** committable6 left
[22:15] *** notable6 left
[22:15] *** bloatable6 left
[22:15] *** greppable6 left
[22:16] *** tellable6 joined
[22:16] *** notable6 joined
[22:16] *** bloatable6 joined
[22:16] *** shareable6 joined
[22:16] *** coverable6 joined
[22:16] *** reportable6 joined
[22:16] *** linkable6 joined
[22:16] *** evalable6 joined
[22:16] *** statisfiable6 joined
[22:17] *** unicodable6 joined
[22:17] *** bisectable6 joined
[22:17] *** squashable6 joined
[22:17] *** sourceable6 joined
[22:17] *** greppable6 joined
[22:17] *** releasable6 joined
[22:17] *** quotable6 joined
[22:18] *** nativecallable6 joined
[22:18] *** benchable6 joined
[22:18] *** committable6 joined
[23:30] *** codesections left
[23:43] *** codesections joined
[23:49] *** codesections left
