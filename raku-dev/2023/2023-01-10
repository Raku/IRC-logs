[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:30] *** samcv left
[00:30] *** samcv joined
[01:07] *** Kaiepi joined
[01:54] <vrurg> greppable6: set_language_version

[01:54] <greppable6> vrurg, Found nothing!

[01:54] <vrurg> greppable6: set_language_revision

[01:54] <greppable6> vrurg, Found nothing!

[02:33] *** linkable6 left
[02:33] *** evalable6 left
[02:34] *** linkable6 joined
[02:36] *** evalable6 joined
[04:15] *** vrurg_ joined
[04:15] *** vrurg left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:31] *** Kaiepi left
[08:41] *** sena_kun joined
[10:36] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++

[10:36] <Geth> ¦ rakudo/main: 4f1bbdbfeb | Stub IterationBuffer in the bootstrap

[10:36] <Geth> ¦ rakudo/main: edf67891f4 | RakuAST: actually implement let and temp

[10:36] <Geth> ¦ rakudo/main: 464a8c687e | RakuAST: fix interpretation of Semilist

[10:36] <Geth> ¦ rakudo/main: 539557bfa7 | RakuAST: fix loop modified statements returning Mu instead of Nil

[10:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/5189750d8795...539557bfa7f1

[10:36] <nine> 92 make test files passing (+2) and 618 spectest files (+10)

[10:56] *** Kaiepi joined
[11:12] <lizmat> I count 620 ?

[11:26] <nine> lizmat: that's my list:https://gist.github.com/niner/40bd639593c2243f233d2c1d0eddd4cc

[11:34] <lizmat> hmmm... looks like something is flapping

[11:34] <lizmat> I was using:

[11:34] <lizmat> RAKUDO_RAKUAST=1 make spectest | grep '\. ok' | wc -l

[11:34] <lizmat> and it produced 620 and 617 just now

[11:34] <lizmat> running again

[11:36] <lizmat> the 618 I got from: RAKUDO_RAKUAST=1 make spectest | grep '\. ok' | sort

[11:36] <lizmat> matches your list

[11:37] <nine> t/spec/S12-construction/destruction.t is definitely a flapper and has been for a long time

[11:44] <lizmat> yeah  :-(

[11:49] <nine> lizmat: good news! I think it's actually an error in the test itself and trivial to fix really. A dd @destructor_order; at the end of the test tells the story:

[11:49] <nine> In perfect conditions, this prints: Array @destructor_order = ["Child", "Parent"] and that's what the test is looking for.

[11:50] <nine> Most of the time however it takes 2 runs of the loop for the destructors to fire and we end up with: Array @destructor_order = ["Child", "Parent", "Child", "Parent"]

[11:50] <nine> The test is still fine with that. But sometimes it's Array @destructor_order = ["Child", "Child", "Parent", "Parent"] instead. Which is still ok! Children destroy before their parents. But the test doesn't account for this order.

[11:51] <lizmat> yeah, but with those texts, we don't know which child is before which parent ?

[11:51] <lizmat> if there are multiple ones

[11:51] <lizmat> how do we know that Child Parent Child Parent is ok?

[11:52] <lizmat> ok, I get something *really* weird now

[11:52] <nine> We could simply ad some id to the parent class

[11:52] <lizmat> I've added a ";\n" to a string in RakuAST::Deparse

[11:53] <lizmat> and now t/02-rakudo/03-cmp-ok.t reliably fails with:

[11:53] <lizmat> setcodeobj needs a code ref

[11:54] <lizmat> this is the diff:

[11:54] <lizmat> https://gist.github.com/lizmat/e58cbfcd9a37e5d20efbf8e0451203ff

[12:00] <lizmat> ok, so I do a reconfigure and build, and the problem goes away...  

[12:00] <lizmat> weird

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:07] <Geth> ¦ rakudo/main: 36638d2fd7 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[12:07] <Geth> ¦ rakudo/main: Tweak deparsing of repeat { } xxx expr

[12:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/36638d2fd7

[12:07] <Geth> ¦ rakudo/main: e6cfc4c8f5 | (Elizabeth Mattijsen)++ | t/12-rakuast/statements.rakutest

[12:07] <Geth> ¦ rakudo/main: Add extensive deparsing tests to statements

[12:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e6cfc4c8f5

[12:16] <lizmat> m: ... "this is the yada yada yada operator taking a string"

[12:16] <camelia> rakudo-moar e6cfc4c8f: OUTPUT: «this is the yada yada yada operator taking a string␤  in block <unit> at <tmp> line 1␤␤»

[12:16] <lizmat> TIL

[12:18] <discord-raku-bot> <Nemokosch> lol

[12:18] <lizmat> m: !!! "this is the yada yada yada dieing operator taking a string"

[12:18] <camelia> rakudo-moar e6cfc4c8f: OUTPUT: «this is the yada yada yada dieing operator taking a string␤  in block <unit> at <tmp> line 1␤␤»

[12:19] <lizmat> the things you learn writing deparsing tests

[12:19] <lizmat> m: !!!("foo")

[12:19] <camelia> rakudo-moar e6cfc4c8f: OUTPUT: «foo␤  in block <unit> at <tmp> line 1␤␤»

[12:19] <lizmat> m: !!!

[12:19] <camelia> rakudo-moar e6cfc4c8f: OUTPUT: «Stub code executed␤  in block <unit> at <tmp> line 1␤␤»

[12:19] <lizmat> m: die

[12:19] <camelia> rakudo-moar e6cfc4c8f: OUTPUT: «Died␤  in block <unit> at <tmp> line 1␤␤»

[12:20] <lizmat> that's the difference, really

[12:22] <discord-raku-bot> <Nemokosch> is it like a die with a default?

[12:23] <lizmat> yeah, except its a grammar construct

[12:23] <lizmat> m: dd ::("!!!")

[12:23] <camelia> rakudo-moar e6cfc4c8f: OUTPUT: «Failure.new(exception => X::NoSuchSymbol.new(symbol => "!!!"), backtrace => Backtrace.new)␤»

[12:24] <lizmat> m: dd ::("&!!!")   # more correct spec

[12:24] <camelia> rakudo-moar e6cfc4c8f: OUTPUT: «Failure.new(exception => X::NoSuchSymbol.new(symbol => "\&!!!"), backtrace => Backtrace.new)␤»

[12:27] <discord-raku-bot> <Nemokosch> is it not &prefix:<!!!> or something?

[12:28] <lizmat> nope... it's macro-ish in that sense

[12:37] <Geth> ¦ roast: a87e5f1184 | (Stefan Seifert)++ | S12-construction/destruction.t

[12:37] <Geth> ¦ roast: Fix flapping desturctor tests

[12:37] <Geth> ¦ roast: 

[12:37] <Geth> ¦ roast: In perfect conditions, @destructor_order is ["Child", "Parent"] and that was

[12:37] <Geth> ¦ roast: what the test was looking for. Most of the time however it takes 2 runs of the

[12:37] <Geth> ¦ roast: loop for the destructors to fire and we end up with: ["Child", "Parent",

[12:37] <Geth> ¦ roast: "Child", "Parent"]. The test is still fine with that. But sometimes it's

[12:37] <Geth> ¦ roast: ["Child", "Child", "Parent", "Parent"] instead. Which is still ok! Children

[12:37] <Geth> ¦ roast: <…commit message has 5 more lines…>

[12:37] <nine> Finally :)

[12:37] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/a87e5f1184

[12:38] *** discord-raku-bot left
[12:38] *** discord-raku-bot joined
[12:39] <lizmat> nine++

[12:45] <discord-raku-bot> <Nemokosch> oh okay

[12:56] *** discord-raku-bot left
[12:56] *** discord-raku-bot joined
[13:11] <lizmat> m: use experimental :rakuast; use MONKEY; dd EVAL(RakuAST::Stub::Warn.new)

[13:11] <camelia> rakudo-moar e6cfc4c8f: OUTPUT: «No such method 'resolve-with' for invocant of type␤'RakuAST::Stub::Warn'␤  in any IMPL-CHECK at src/Raku/ast/base.rakumod line 88␤  in any  at src/Raku/ast/base.rakumod line 120␤  in any visit-children at src/Raku/ast/statements.rakumod line 5…»

[13:12] <lizmat> nine: I guess that's a known issue, thoughts on me being able to fix that ?

[13:16] <lizmat> added an empty "resolve-with" method, now fails with missing IMPL-EXPR-QAST, guess I'll be adding that now  :-)

[13:17] <nine> Looks to me like RakuAST::Stub shouldn't do RakuAST::Lookup, since it doesn't actually look up anything

[13:17] <lizmat> even if the ArgList could be looking up ?

[13:18] <nine> Ther arglist is its own node and has to take care of itself. But Stub needs a visit-children for that to happen

[13:19] <lizmat> wouldn't it use the RakuAST::Call's visit-children ?

[13:20] <lizmat> anyway, it would need a IMPL-EXPR-QAST, right ?

[13:21] <nine> Yeah, may as well be on RakuAST::Call itself

[13:22] <lizmat> the IMPL-EXPR-QAST or the visit-children?

[13:22] <nine> However, I wonder if you're actually using it correctly. After all, this works just fine: RAKUDO_RAKUAST=1 ./rakudo-m -e '...'

[13:22] <nine> Stub code executed

[13:24] <nine> Hm...that doesn't even use any of these Stub nodes

[13:24] <lizmat> ah, so maybe we just remove the stub nodes  :-)

[13:25] <lizmat> and their testing  :-)

[13:27] <nine> Yeah, stubs compile directly to calls to fail/warn/die

[13:27] <lizmat> yeah, looks like

[13:27] <lizmat> ok, so, change the actions to use the stubs, or remove the stub classes ?

[13:28] <nine> However, one could argue that these deserve their own node types, at least for the purpose of deparsing.

[13:28] <lizmat> yeah, since they're macroish anyway

[13:29] <lizmat> so the actions'd become something like:

[13:30] <lizmat> self.attach: $/, self.r('Stub', 'Fail').new();

[13:30] <nine> yep

[13:31] <lizmat> ok, lemme see if I grok this enough to get this together  :-)

[13:32] <lizmat> its IMPL-EXPR-QAST I need to implement, right ?

[13:33] <nine> Yes, like in RakuAST::Call::Name, only much less complicated

[13:33] <lizmat> ack

[14:22] *** Kaiepi left
[14:22] *** Kaiepi joined
[14:31] <lizmat> ok, almost there

[14:31] <lizmat> but I now get "lang-call cannot invoke object of type 'VMNull' belonging to no language" when EVALling the AST

[14:31] <lizmat> nine: suggestions?

[14:32] <lizmat> https://gist.github.com/lizmat/18b0cc12644a2c7e228430d4faf55863  is what I got so far

[14:38] <nine> no idea

[14:39] <lizmat> but that implementation in the gist looks ok, right ?

[14:40] <lizmat> is ... actually a Term, if it can take args ?

[14:41] * nine doesn't even know what a Term actually is

[14:42] <lizmat> time now nano

[15:50] *** linkable6 left
[15:50] *** evalable6 left
[15:50] *** linkable6 joined
[15:52] *** evalable6 joined
[16:55] <nine> lizmat: I think you introduced a bug here https://github.com/Raku/roast/blob/master/S02-lexical-conventions/comments.t#L160 in commit https://github.com/Raku/roast/commit/8120b6b48721a6babd5331f6009dea3f04d8dfcc

[16:57] <nine> Or rather you enshrined a bug. Test description says "comments can't contain unspace" but the test is actually broken. It will complain about the undeclared variable $a and your commit made us test for that explicitly. Should probably be X::Syntax::Comment::Embedded

[16:57] <nine> (and a my added to the test)

[17:02] <discord-raku-bot> <Nemokosch> woah, that was a long time ago

[17:03] <Geth> ¦ rakudo/main: c4080f9537 | (Stefan Seifert)++ | 2 files

[17:03] <Geth> ¦ rakudo/main: RakuAST: fix crash with embedded comment at the start of the comp unit

[17:03] <Geth> ¦ rakudo/main: 

[17:03] <Geth> ¦ rakudo/main: lang_setup is run only after we parsed a possible language version

[17:03] <Geth> ¦ rakudo/main: declaration which in turn may be preceeded by a comment. This comment

[17:03] <Geth> ¦ rakudo/main: may need the literals builder, hence the crash.

[17:03] <Geth> ¦ rakudo/main: 

[17:03] <Geth> ¦ rakudo/main: Fix by setting up the literals builder in comp_unit_stage0 instead.

[17:03] <Geth> ¦ rakudo/main: Since it needs the resolver, but the resolver needs the language

[17:03] <Geth> ¦ rakudo/main: version, set the resolver on the literals builder once we have it.

[17:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c4080f9537

[17:33] <nine> So, apparently many, many of the remaining fails are just because we don't throw the right kind of exception yet.

[17:34] <nine> But then, there's also surprising finds like: class Foo { has $.i = 1; }; Foo.new.i returning Any

[17:34] <nine> Because....we have no support whatsoever for build plans/BUILDALL

[18:00] <lizmat> aha... ok... hmmmm

[18:00] *** reportable6 left
[18:00] <lizmat> but that  can now be set up properly built using RakuAST:: classes

[18:00] *** reportable6 joined
[18:03] <lizmat> nine: so where would be set up the BUILDALL method

[18:04] <lizmat> for a given class?   also, when?

[18:13] <nine> I think "when" is actually the most interesting question. And it will tell us where.

[18:16] <lizmat> m: use MONKEY; EVAL Q/class A { has $.a }; dd A.^BUILDPLAN/.AST

[18:16] <camelia> rakudo-moar c4080f953: OUTPUT: «((0, A, "\$!a", "a"), (1000, A, "\$!a"))␤»

[18:17] <lizmat> looks like the buildplan is made as expected in RakuAST already

[18:17] <lizmat> at least that part of it  :-)

[18:17] <nine> Obviously we're gonna need all the attributes already declared, so BEGIN time is too early as for packages that's run right before we start parsing the block. Would doing it as part IMPL-EXPR-QAST be too late?

[18:17] <lizmat> well, I'd say it would be needed as soon as the closing curly of the class has been processed ?

[18:18] <lizmat> aka, the mythical COMPOSE phaser  :-)

[18:18] <nine> The BUILDPLAN is created by the MOP

[18:23] <nine> IMPL-CHECK would be the right peg then

[18:24] <lizmat> ok, so let me see if I can hang that on RakUAST::Package's peg then

[18:24] <lizmat> hmmm.. there also appears to be a IMPL-INSTALL-PACKAGE method

[18:24] <lizmat> feels it should be there maybe?

[18:24] <nine> No, that's run at BEGIN time to put it into the right stash.

[18:25] <nine> Actually we could add an IMPL-COMPOSE method that's called by Raku::Actions::package_def. The latter currently already calls meta-object to compose that.

[18:26] <nine> IMPL-COMPOSE could take care of composing the meta object and adding that BUILDALL method

[18:29] <lizmat> ok, will look at that

[18:29] <lizmat> meanwhile, I'm going to give up at the stubs issue

[18:29] <lizmat> I *think* I did the right thing

[18:30] <lizmat> but if they're not codegenned as RakuAST::Call directly, but rather through RakuAST::Stub, the running of them fails

[18:31] <lizmat> I've todoed the associated tests

[18:43] <lizmat> it doesn't lose us any full files passing

[18:43] <lizmat> so I will push what I have now

[18:51] <Geth> ¦ rakudo/main: 57dd190186 | (Elizabeth Mattijsen)++ | 3 files

[18:51] <Geth> ¦ rakudo/main: Rework how ... !!! ??? are codegenned

[18:51] <Geth> ¦ rakudo/main: 

[18:51] <Geth> ¦ rakudo/main: They were codegenned as calls to fail, die and warn respectively,

[18:51] <Geth> ¦ rakudo/main: rather than using the already existing RakuAST::Stub classes.

[18:51] <Geth> ¦ rakudo/main: 

[18:51] <Geth> ¦ rakudo/main: These will now be codegenned as RakuAST::Stub classes, which generate

[18:51] <Geth> ¦ rakudo/main: the QAST to call fail, die and warn respectively.  However that appears

[18:51] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>

[18:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/57dd190186

[18:58] <Geth> ¦ rakudo/main: b436566ee9 | (Elizabeth Mattijsen)++ | t/12-rakuast/stubs.rakutest

[18:58] <Geth> ¦ rakudo/main: Add deparsing tests to stubs

[18:58] <Geth> ¦ rakudo/main: 

[18:58] <Geth> ¦ rakudo/main: And try to handle the current brokenness of stubs in a todo-like

[18:58] <Geth> ¦ rakudo/main: way

[18:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b436566ee9

[19:02] *** ab5tract joined
[19:21] <Geth> ¦ rakudo/main: 34efa23686 | (Elizabeth Mattijsen)++ | src/Raku/ast/base.rakumod

[19:21] <Geth> ¦ rakudo/main: Allow calling .DEPARSE with a class

[19:21] <Geth> ¦ rakudo/main: 

[19:21] <Geth> ¦ rakudo/main: This allows for subclassing RakuAST::Deparse for customization.

[19:21] <Geth> ¦ rakudo/main: 

[19:21] <Geth> ¦ rakudo/main:     use experimental :rakuast;

[19:21] <Geth> ¦ rakudo/main:     class A is RakuAST::Deparse { }

[19:21] <Geth> ¦ rakudo/main:     say Q/say "foo"/.AST.DEPARSE(A);  # say("foo")

[19:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/34efa23686

[19:21] *** ab5tract left
[19:25] *** ab5tract joined
[19:29] *** Kaiepi left
[19:37] <Geth> ¦ rakudo/main: 50fd019f3f | (Elizabeth Mattijsen)++ | 2 files

[19:37] <Geth> ¦ rakudo/main: Put in IMPL-COMPOSE stub

[19:37] <Geth> ¦ rakudo/main: 

[19:37] <Geth> ¦ rakudo/main: For creating a class' BUILDALL from its BUILDPLAN

[19:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/50fd019f3f

[19:43] <nine> lizmat: hint, hint, unfinished work is what branches are for ;)

[19:45] <lizmat> noted: however at the current rate of changes, any branch would very quickly become unmergeable

[19:48] <lizmat> and fixing conflicts would at least for me, with my current RakuAST internals knowledge, be pretty impossible, I'm afraid

[19:49] *** ab5tract left
[20:09] *** Kaiepi joined
[20:16] <Geth> ¦ rakudo/main: b832f70db7 | (Elizabeth Mattijsen)++ | t/12-rakuast/package.rakutest

[20:16] <Geth> ¦ rakudo/main: Added deparsing tests for RakuAST::Package

[20:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b832f70db7

[20:17] <Geth> ¦ rakudo/main: 677db9cc55 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[20:17] <Geth> ¦ rakudo/main: RakuAST: Finish implementation of RakuAST::Stubs

[20:17] <Geth> ¦ rakudo/main: 

[20:17] <Geth> ¦ rakudo/main: Just base it on RakuAST::Call::Name and let that do all the heavy

[20:17] <Geth> ¦ rakudo/main: lifting.

[20:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/677db9cc55

[20:17] <nine> lizmat: ^^^

[20:17] <lizmat> nice!

[20:18] <lizmat> eh, but will disallow deparsing :-(

[20:19] <lizmat> ah, no, method name() is still there  *phew*

[20:30] <Geth> ¦ rakudo/main: f9b01f80a3 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[20:30] <Geth> ¦ rakudo/main: Make deparsing of empty set same as in old grammar

[20:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f9b01f80a3

[20:31] <lizmat> nine: it did break deparsing, as there is now no difference between

[20:31] <lizmat> ...

[20:31] <lizmat> and

[20:31] <lizmat> ... "Stub code executed"

[20:32] <lizmat> from an AST standpoint

[20:33] *** ab5tract joined
[20:34] <Geth> ¦ rakudo/main: e8c23f84b3 | (Elizabeth Mattijsen)++ | t/12-rakuast/terms.rakutest

[20:34] <Geth> ¦ rakudo/main: Add deparsing tests for terms

[20:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e8c23f84b3

[20:43] *** ab5tract left
[20:53] <lizmat> m: use experimental :rakuast; dd RakuAST::NumLiteral.new(1e5)

[20:53] <camelia> rakudo-moar e8c23f84b: OUTPUT: «100000e0␤»

[20:53] <lizmat> I wonder whether deparsing num literals should keep the original specification or not

[20:54] <lizmat> m: use experimental :rakuast; dd RakuAST::RatLiteral.new(.60)

[20:54] <camelia> rakudo-moar e8c23f84b: OUTPUT: «0.6␤»

[20:54] <lizmat> I guess the same for all numeric literals...  hmmm

[20:55] <nine> No, hence the A in AST

[20:57] <lizmat> I guess  :-)

[20:57] <Geth> ¦ rakudo/main: dfd2703803 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[20:57] <Geth> ¦ rakudo/main: RakuAST: keep a difference in the AST for stubs with and without args

[20:57] <Geth> ¦ rakudo/main: 

[20:57] <Geth> ¦ rakudo/main: While technically correct, we don't want a plain ... to deparse to

[20:57] <Geth> ¦ rakudo/main: ... 'Stub code executed'

[20:57] <Geth> ¦ rakudo/main: So instead of adding default arguments to the AST, keep the default args

[20:57] <Geth> ¦ rakudo/main: ephemeral.

[20:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dfd2703803

[21:00] <discord-raku-bot> <Nemokosch> RakuAST meeting when? 👀

[21:08] <lizmat> well, you're the first one to react to my proposal

[21:10] *** ab5tract joined
[21:11] <lizmat> nine: alas, it's the .args method that is used by deparsing to see if there are any args   :-(

[21:19] *** ab5tract left
[21:34] <nine> Cheat... nqp::getattr ;)

[21:35] <nine> Or add a helper method that does that for you

[21:36] <nine> I'll be afk for a week. Will be back in action on the 18th

[21:37] <lizmat> ok, have fun!

[21:51] <Geth> ¦ rakudo/main: 6d837b38db | (Elizabeth Mattijsen)++ | 2 files

[21:51] <Geth> ¦ rakudo/main: Fix deparsing of stubs and the anonymous state var

[21:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6d837b38db

[21:51] <Geth> ¦ rakudo/main: 212e5e6eb7 | (Elizabeth Mattijsen)++ | t/12-rakuast/var.rakutest

[21:51] <Geth> ¦ rakudo/main: Add deparse test for variables of all sorts

[21:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/212e5e6eb7

[21:51] <lizmat> and that concludes my hacking for today&

[22:21] *** Xliff joined
[22:58] *** sena_kun left
