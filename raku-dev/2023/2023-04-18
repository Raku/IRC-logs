[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:16] *** maettu left
[00:18] *** maettu joined
[00:48] *** maettu left
[01:04] *** maettu joined
[01:08] *** maettu left
[01:15] *** maettu joined
[01:26] *** maettu left
[01:38] *** maettu joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:40] *** RakuIRCLogger left
[07:58] *** sena_kun joined
[08:22] *** Xliff left
[08:42] *** Xliff joined
[08:45] *** Xliff left
[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:06] <lizmat> TIL that pod parsing creates a Match object for *every* grapheme for the pod
[12:07] <lizmat> I guess that explains why pod parsing is relatively slow
[12:16] <nine> Wait, what?!
[12:27] <lizmat> yes
[12:29] <lizmat> token pod_string_character
[12:38] <nine> That at least looks somewhat easy to fix
[12:42] <lizmat> fwiw, I'm looking beyond some easy fixes
[13:08] <lizmat> m: say "foo" ~~ / o /
[13:08] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «｢o｣␤»
[13:08] <lizmat> m: say "foo" ~~ / o**1 /
[13:08] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «｢o｣␤»
[13:08] <lizmat> why would anybody do **1 ??
[13:12] <[Coke]> I can only think of something like wanting to match an existing **x elsewhere, but yes, only contrived reasons.
[13:13] <lizmat> luckily it appears the **1 is getting optimized away
[13:14] <lizmat> m: "foo" ~~ / o**1 / for ^100000; say now - ENTER now
[13:14] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «0.212199812␤»
[13:14] <lizmat> m: "foo" ~~ / o / for ^100000; say now - ENTER now
[13:14] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «0.217277934␤»
[13:14] <lizmat> m: "foo" ~~ / o / for ^100000; say now - ENTER now
[13:14] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «0.214076211␤»
[13:14] <lizmat> m: "foo" ~~ / oo / for ^100000; say now - ENTER now
[13:14] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «0.216316567␤»
[13:14] <lizmat> m: "foo" ~~ / o**2 / for ^100000; say now - ENTER now
[13:14] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «0.221127665␤»
[13:15] <discord-raku-bot> <Nemokosch> is there a simple and straightforward reason why use v(oldest) isn't the default for compunits?
[13:15] <[Coke]> be happy if you can speed up POD procesing; we do some caching in raku/doc and it has always seemed a little slow.
[13:15] <discord-raku-bot> <Nemokosch> with all the stability concerns
[13:15] <[Coke]> *I would be happy if...
[13:15] <lizmat> [Coke]: understood
[13:16] * lizmat is working on a prototype Rakudoc slang grammar
[13:28] *** nebuchadnezzar joined
[13:52] <guifa> lizmat: isn't it already implemented as a slang? or do you mean just updating the grammar for RakuAST?
[13:52] <lizmat> it isn't.  There *is* a slang officially, but it is empty
[13:53] <lizmat> grammar Perl6::PodGrammar is Perl6::Grammar does STD does MatchPackageNibbler { }
[13:53] <guifa> oh, wow.  
[13:53] <lizmat> with this as a comment: # place holder for a new slang for Pod
[14:00] <[Coke]> is the html entity exposed? (could I search through it for App::Uni) ?
[14:00] <[Coke]> entity *list*
[14:18] <lizmat> [Coke] it was my proposal to expose it, but that appears to have run against a lot of pushback  :-(
[14:19] <lizmat> https://github.com/rakudo/rakudo/commit/d9658202690fa9e1258663638
[14:57] <[Coke]> If it's part of pod, it's part of pod - maybe something behind a core lib would be appropriate.
[15:09] <lizmat> "behind a core lib" could you elaborate?
[15:11] <lizmat> I thought it would make sense that since we have:
[15:11] <lizmat> m: say "FULL STOP".uniparse
[15:11] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «.␤»
[15:11] <lizmat> and:
[15:12] <lizmat> m: dd '2023-04-18'.Date
[15:12] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «Date.new(2023,4,18)␤»
[15:12] <lizmat> we could also have a:
[15:12] <lizmat> m: say 'comma'.html-entity-parse
[15:12] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «No such method 'html-entity-parse' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»
[15:13] <lizmat> instead we now have:
[15:13] <lizmat> m: use v6.*; say RakuAST::HTML::Entities.parse("comma")
[15:13] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «,␤»
[15:13] <lizmat> meh
[15:28] <[Coke]> for me, I'd want the list to be exposed, not to (only) be able to look up specific phrases.
[15:28] <[Coke]> e.g. how can I know 'comma' is one of the options
[15:29] <[Coke]> I feel like since it's already already part of pod, adding it to the str isn't bad. I might call it pod-entity-parse, though
[15:30] <[Coke]> Is there a PR to comment on?
[15:46] <lizmat> there are several commits to comment on
[15:47] <lizmat> fwiw I wouldn't call it pod-entity-parse as Pod is just one of the places it would be used
[15:47] <lizmat> they are HTML entities, hence the name "html-entity-parse"
[16:05] <[Coke]> my question there is are we guaranteeing as part of the spec that it's html entities, or did we happen to use that as our entity list and now it's separate.
[16:09] <lizmat> the code mentions the then standard location of HTML5 entities as the source
[16:09] <lizmat> my version uses the current standard location of HTML entities as source
[16:09] <lizmat> so yes, it's HTML entities only
[16:10] <lizmat> now: E<> also accepts any numeric representation
[16:10] <lizmat> E<65> would be A
[16:15] * [Coke] notes that E<0x6b> also works, nifty
[16:19] <japhb> Related: Cannot even tell you how nice it is that we use val() on arguments to MAIN too, BTW.  Constantly using hex arguments to my option flags.
[16:21] <[Coke]> lizmat: code ain't spec.
[16:21] <[Coke]> but that definitely seems to declare the intent, anyway
[16:32] * [Coke] didn't realize that trick worked on MAIN, nifty
[16:41] <lizmat> well, val will give you an allomorph
[16:41] <lizmat> m: dd val "42"
[16:41] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «IntStr.new(42, "42")␤»
[16:41] <lizmat> but yeah... it's pretty useful
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:21] <nine> The things you find when re-implementing something:
[18:22] <nine> m: { my package A::B::C { }; say MY::.keys }
[18:22] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «(A $_)␤»
[18:22] <nine> But:
[18:22] <nine> m: { my $A::B::C; say MY::.keys }
[18:22] <camelia> rakudo-moar 1fd667cf7: OUTPUT: «($A::B::C $_)␤»
[18:23] <nine> So for lexical multi-part-named variables, we install lexicals that you cannot even access, as $A::B::C will be compiled to code that traverses the stashes starting at GLOBAL.
[18:23] <nine> For that package we start traversing at that lexical A
[18:37] <[Coke]> can you simplify it in the rewrite, or do you have to do the same?
[18:42] *** Guest10 joined
[18:45] <nine> Not sure I'm smart enough to actually simplify it.
[18:58] <[Coke]> :)
[19:14] *** Guest10 left
[21:05] <vrurg> When I first read somewhere that `require` installs lexically – I was happy about. Then I was disappointed to find out that it is not actually true...
[21:06] <Geth> ¦ rakudo/main: 31fb2b9e96 | (Stefan Seifert)++ | src/Raku/ast/name.rakumod
[21:06] <Geth> ¦ rakudo/main: RakuAST: fix double sigil on some indirect name lookups
[21:06] <Geth> ¦ rakudo/main: 
[21:06] <Geth> ¦ rakudo/main: INDIRECT_NAME_LOOKUP will add the sigil to the last name part, so we
[21:06] <Geth> ¦ rakudo/main: don't have to do that and in fact must not if we want to avoid a double
[21:06] <Geth> ¦ rakudo/main: sigil.
[21:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/31fb2b9e96
[21:06] <Geth> ¦ rakudo/main: 027e37ccc9 | (Stefan Seifert)++ | 5 files
[21:06] <Geth> ¦ rakudo/main: RakuAST: fix declaration of variables with multi part names $A::B
[21:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/027e37ccc9
[21:14] <nine> A few RakuAST tests need followup. Will do that tomorrow
[21:38] *** Xliff joined
[21:55] *** Xliff left
[22:31] <Geth> ¦ nqp/fix-alias-backref: 04d3a3ab1e | (Jonathan Worthington)++ | src/QRegex/Cursor.nqp
[22:31] <Geth> ¦ nqp/fix-alias-backref: Fix back-references when there are aliases
[22:31] <Geth> ¦ nqp/fix-alias-backref: 
[22:31] <Geth> ¦ nqp/fix-alias-backref: Aliases are named-mangled on the capture name into a string of the form
[22:31] <Geth> ¦ nqp/fix-alias-backref: `foo=bar`. This is handled in the match object construction, but was not
[22:31] <Geth> ¦ nqp/fix-alias-backref: handled in the back-reference code.
[22:31] <Geth> ¦ nqp/fix-alias-backref: review: https://github.com/Raku/nqp/commit/04d3a3ab1e
[22:31] <Geth> ¦ nqp: jnthn++ created pull request #802: Fix back-references when there are aliases
[22:31] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/802
[22:48] *** nebuchadnezzar left
[23:56] *** squashable6 left
[23:56] *** bloatable6 left
[23:56] *** sourceable6 left
[23:56] *** unicodable6 left
[23:56] *** committable6 left
[23:56] *** statisfiable6 left
[23:56] *** benchable6 left
[23:56] *** tellable6 left
[23:56] *** bisectable6 left
[23:56] *** nativecallable6 left
[23:56] *** linkable6 left
[23:56] *** shareable6 left
[23:56] *** notable6 left
[23:56] *** quotable6 left
[23:56] *** coverable6 left
[23:56] *** releasable6 left
[23:56] *** greppable6 left
[23:56] *** evalable6 left
[23:56] *** reportable6 left
[23:56] *** reportable6 joined
[23:56] *** evalable6 joined
[23:56] *** bloatable6 joined
[23:57] *** quotable6 joined
[23:57] *** bisectable6 joined
[23:57] *** coverable6 joined
[23:57] *** unicodable6 joined
[23:57] *** sourceable6 joined
[23:58] *** greppable6 joined
[23:58] *** squashable6 joined
[23:58] *** linkable6 joined
[23:58] *** releasable6 joined
[23:58] *** tellable6 joined
[23:58] *** notable6 joined
[23:58] *** statisfiable6 joined
[23:58] *** committable6 joined
[23:59] *** nativecallable6 joined
[23:59] *** benchable6 joined
[23:59] *** shareable6 joined
