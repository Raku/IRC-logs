[00:37] *** vrurg_ joined
[00:40] *** camelia left
[00:40] *** vrurg left
[00:40] *** rypervenche left
[00:40] *** bartolin left
[00:40] *** bartolin_ joined
[00:42] *** rypervenche joined
[00:54] *** camelia joined
[03:01] *** hythm joined
[04:50] *** japhb left
[04:52] *** japhb joined
[05:49] *** hythm left
[07:07] *** samebchase2 joined
[07:07] *** samebchase left
[07:07] *** samebchase2 is now known as samebchase

[07:43] *** sena_kun joined
[09:53] *** japhb left
[10:02] *** japhb joined
[10:09] *** japhb left
[10:39] *** japhb joined
[10:46] *** japhb left
[10:46] <ab5tract> I've updated those Zig findings with actual result tables and additional findings: https://gist.github.com/ab5tract/61e08cfaf0bb3e67b3a3dc009fa3cc7a

[12:29] <discord-raku-bot> <nemokosch> what's this bad-packages thing?

[12:31] <ab5tract> I should explain it better in the doc..

[12:32] <ab5tract> essentially simulates "bad" packages by creating Package objects with addresses that don't match the CRC32 values

[12:32] <ab5tract> at 10% volume. 

[12:33] <ab5tract> I don't know which side of things is doing the optimization, but the Raku+Zig (no bad-packages) clearly loves having a list of a single static value

[12:35] <ab5tract> the peak performance drops by half when it receives a heterogeneous list

[12:36] <ab5tract> I'd really also like to understand where the "slow first batch" that affects the Raku+Zig editions comes from...

[13:10] <discord-raku-bot> <nemokosch> oh gotcha

[13:11] <discord-raku-bot> <nemokosch> Zig is kinda cool, to be honest. One of the rare occasions when I like the idea of a "boring" language

[13:11] <ab5tract> Yeah, it's got a great balance of expressivity for such a low level language

[13:12] <discord-raku-bot> <nemokosch> Railway (the PaaS) markets itself as for all languages, "from Ada to Zig". It's probably because of the alphabet but I was thinking "congrats, you managed to pick two essentially similar languages"

[13:13] <discord-raku-bot> <nemokosch> To be honest, after a couple of months, I started to be okay with Ada

[13:13] <ab5tract> Everything being an expression in Zig is nice

[13:14] <ab5tract> I haven't played with Ada at all but it always seemed like a reasonable-ish systems language to me

[13:15] <discord-raku-bot> <nemokosch> it is like Go, over-engineered version

[13:15] <ab5tract> It would be interesting to explore using Zig as a cross-compiler for Rakudo releases

[13:15] <ab5tract> it might simplify the release process significantly

[13:16] <discord-raku-bot> <nemokosch> the polar opposite of theoretically elegant but for example the heavy promotion of namespacing is a really good thing architecture-wise

[13:16] <discord-raku-bot> <nemokosch> it actually has runtime subtype checks like Raku

[13:16] <ab5tract> nice!

[13:17] <discord-raku-bot> <nemokosch> hm, yes, the Zig toolchain could in theory work with Rakudo+MoarVM releases without a lot of sweat

[13:18] <discord-raku-bot> <nemokosch> Is Rakudo compiled with gcc on POSIX systems?

[13:18] <discord-raku-bot> <nemokosch> I think it should compile with clang as well, sometimes there are issues and pull requests by people regarding clang compilation

[13:19] <ab5tract> right..

[13:19] <ab5tract> you can still target the gnu toolchain from `zig cc`

[13:20] <ab5tract> but it's clang that does the compiling

[13:20] <discord-raku-bot> <nemokosch> anyway, sounds like it could work, I just don't really know all the environmental things that need to be set

[13:20] <discord-raku-bot> <nemokosch> the configure script and the resulting hugeass makefile

[13:21] <ab5tract> the easy way: just change CC in the generated Makefiles

[13:22] <ab5tract> the right way: understand the entire `perl ./Configure.pl` mechanism

[13:22] <discord-raku-bot> <nemokosch> I wonder if there are compiler-specific environment variables set

[13:22] <discord-raku-bot> <nemokosch> but then again it somehow compiles with msvc so shouldn't be that bad

[13:23] <discord-raku-bot> <nemokosch> > A --bad-packages option is provided, which makes 10% of the objects have a mismatched address/CRC32 pair. gotcha, it was right there

[13:24] <ab5tract> you can build x86_64 Windows exes from ARM64 Linux, at least theoretically, with `zig cc`

[13:24] <ab5tract> so msvc could go bye bye

[13:25] <discord-raku-bot> <nemokosch> that would be great in many ways tbh

[13:26] <discord-raku-bot> <nemokosch> hm, although I'm not exactly sure what the problem was with GMP

[13:26] <discord-raku-bot> <nemokosch> if it was the compiler itself then probably it could be seriously considered after all these years

[13:28] <discord-raku-bot> <nemokosch> re Raku+Zig demo: does bad-packages only affect the Raku side?

[13:30] <ab5tract> I'm actually not sure. There seems to be dynamic optimization of some kind happening, which does sound like more of a Rakudo thing

[13:30] <ab5tract> than a Zig thing

[13:31] <discord-raku-bot> <nemokosch> It's very noticeable that it roughly doubles the time for Raku+Zig, proportionally a bigger performance hit

[13:31] <discord-raku-bot> <nemokosch> that's why I'm thinking it probably has implications on the Raku end

[13:31] <ab5tract> in pure Raku version, things take marginally longer with bad-packages, but not double like the Raku+Zig edition

[13:32] <ab5tract> yeah I was noticing that too

[13:32] <ab5tract> I think it sort of demonstrates that we *do* have that win in place

[13:33] <ab5tract> but when we heterogenize the list we lose that optimization

[13:33] <ab5tract> except... this isn't really visible in the pure Raku edition... hmm....

[13:36] <ab5tract> nevermind, it's visible there in the time difference between Raku and Raku-bad-packages at high volumes.

[13:38] <discord-raku-bot> <nemokosch> yes, and this is why I'm thinking that the difference mostly comes from the Raku part, adding to the time, rather than multiplying it

[13:38] <ab5tract> gotcha

[13:40] <Geth> ¦ rakudo/main: 8542ad2116 | (Elizabeth Mattijsen)++ | src/core.e/Grammar.rakumod

[13:40] <Geth> ¦ rakudo/main: Don't set callers $/ with Grammar.parse in 6.e

[13:40] <Geth> ¦ rakudo/main: 

[13:40] <Geth> ¦ rakudo/main: The fact that Grammar.parse/subparse/parsefile all set $/ in the

[13:40] <Geth> ¦ rakudo/main: caller's scope, is a race-condition waiting to happen.

[13:40] <Geth> ¦ rakudo/main: 

[13:40] <Geth> ¦ rakudo/main: See discussion started by DarthGandalf at

[13:40] <Geth> ¦ rakudo/main:   https://irclogs.raku.org/raku-beginner/2023-11-27.html#09:09

[13:40] <Geth> ¦ rakudo/main: <…commit message has 34 more lines…>

[13:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8542ad2116

[14:12] *** japhb joined
[14:24] *** japhb left
[15:10] *** japhb joined
[15:11] <Geth> ¦ rakudo: vrurg++ created pull request #5477: Initial draft of near complete generics instantiation

[15:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5477

[15:13] <ab5tract> feature request: create an optional argument to react that takes a promise and keeps it when the react block is actually available

[15:14] <ab5tract> maybe "request for comment" is a better fit

[15:14] *** japhb left
[15:45] *** japhb joined
[15:50] <lizmat> notable6: weekly

[15:50] <notable6> lizmat, 2 notes: 2023-11-21T17:40:37Z <lizmat>: test-t timings  ;  2023-11-25T22:24:33Z <antononcube>: https://rakuforprediction.wordpress.com/2023/11/25/ai-vision-via-raku/

[15:50] <lizmat> notable6: weekly reset

[15:50] <notable6> lizmat, Moved existing notes to “weekly_2023-11-27T15:50:45Z”

[16:18] *** japhb left
[16:37] *** japhb joined
[16:48] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/11/27/2023-48-more-ab5tract/

[17:43] <ab5tract> nemokosch: the gist has been updated with revised timings. the scripts were not identical enough for my tastes. also available here: https://5ab5traction5.bearblog.dev/an-initial-investigation-into-using-zig-to-speed-up-raku-code/

[18:56] *** japhb left
[21:18] <[Coke]> I don't normally run roast these days, but getting a failing on OS X on t/spec/S32-io/IO-Socket-Async.t

[21:18] <[Coke]> (test #2)

[22:40] *** japhb joined
[22:46] *** japhb left
[22:46] <vrurg_> [Coke]: it's because of IPv6. 

[22:47] *** japhb joined
[22:53] *** sena_kun left
[23:24] *** japhb left
[23:35] *** vrurg_ is now known as vrurg

[23:58] *** japhb joined
[23:59] *** lizmat_ joined
