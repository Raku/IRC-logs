[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:27] <leont> I spent a bunch of time on version ranges in Perl land recently, and took the liberty to port that to Raku as an alternative to  #5310

[01:30] *** nine_ left
[01:32] *** nine joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:43] *** kjp left
[06:45] *** kjp joined
[06:56] *** Geth__ joined
[06:56] *** lizmat_ joined
[06:57] *** RakuIRCLogger left
[06:57] *** Geth left
[06:58] *** lizmat left
[07:00] *** Geth__ left
[07:00] *** Geth joined
[07:04] *** Geth left
[07:05] *** Geth joined
[07:32] *** sena_kun joined
[09:41] <discord-raku-bot> <nemokosch> do you think it would be reasonably doable to eliminate the special behavior of "thunky" operators, going down the RakuAST route?

[10:46] *** bloatable6 left
[10:46] *** bisectable6 left
[10:46] *** reportable6 left
[10:46] *** greppable6 left
[10:46] *** shareable6 left
[10:46] *** benchable6 left
[10:46] *** evalable6 left
[10:46] *** tellable6 left
[10:46] *** sourceable6 left
[10:46] *** unicodable6 left
[10:46] *** releasable6 left
[10:46] *** coverable6 left
[10:46] *** statisfiable6 left
[10:47] *** bisectable6 joined
[10:47] *** statisfiable6 joined
[10:47] *** shareable6 joined
[10:47] *** unicodable6 joined
[10:47] *** reportable6 joined
[10:48] *** coverable6 joined
[10:48] *** bloatable6 joined
[10:48] *** releasable6 joined
[10:48] *** tellable6 joined
[10:48] *** evalable6 joined
[10:49] *** sourceable6 joined
[10:49] *** benchable6 joined
[10:49] *** greppable6 joined
[11:26] <leont> Except it turns out Version objects are already sometimes not versions but version patterns? (but they still sort to not break it completely?) I don't understand where hacks like this keep coming from; it would be like saying "Nums can now also be complex values" and expect that to be fine.

[11:45] *** sivoais_ left
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:09] *** sivoais joined
[13:28] <vrurg> leont: I've probably missed the reset of the discussion. What worries you?

[13:32] <leont> A version object is not necessary a version. E.g. v1.* is not a version by any reasonable definition; you can't have a package whose version is v1.*

[13:33] <vrurg> This is clear, but it feels like there is context I don't know about.

[13:34] <leont> It's all a violation of the Single Responsibility Principle

[13:37] <vrurg> If there is nothing else, then at least I for myself know where ti comes from: the syntax. It would still depend on expectations of an individual, but v1.1 and v1.* producing objects of different types may break other expectations.

[13:39] <leont> If Version does Version::Matcher, then it would all work sensibly enough

[13:40] <vrurg> For example, to me things like ^v1.3 make little sense because I don't understand where v1.2.1 would fit into this sequence? It's like iterating over a Rat or Num.

[13:40] <leont> Yeah, iterating over version ranges makes no sense

[13:41] <leont> But comparing should be easy enough

[13:41] <vrurg> What would Version::Matcher change from API point of view? For an end-user it would remain the same Version.

[13:42] <leont> Invariants. The different classes can all guarantee their own invariants.

[13:45] <vrurg> I'm afraid, this is where examples would help me more.

[13:46] <leont> "Does this Version object have a value that I can use as a version of something"

[13:47] <leont> Right now we kind of need an is-version method :-/

[13:49] <vrurg> Ah, you mean not `class Version does Version::Matcher` but Version::Matcher as a mixin? 

[13:50] <vrurg> If so, I barely see it ever changing because of too few gains over too many backward compatibility problems.

[13:52] <leont> I think I meant the former, but I'm not entirely sure I understand what you meant with the latter.

[13:52] <leont> Any v expression would generate a Version::Matcher, which may be a Version

[13:53] <vrurg> Then forget the latter as irrelevant. I'm rather interested in getting your point.

[13:55] <vrurg> From this point of view the approach would be akin to Stringy: Versionish role consumed by Version and Version::Matcher (though better name is needed then) classes. 

[13:55] <leont> Yeah something like that

[13:57] <vrurg> I'd like it in general. But, again, it'd bee too much even for a language release bump. These kind of things are like the fundamental genes which do not change for many millions years.

[13:59] <leont> Yeah probably

[14:34] * vrurg wonders if Promise lacks of methods 'andthen' and 'orelse'...

[14:38] <discord-raku-bot> <nemokosch> lol

[14:39] <discord-raku-bot> <nemokosch> I'm more wondering if "andthen" and "orelse" should whatever-curry or not

[14:39] <discord-raku-bot> <nemokosch> for &&, || and ~~ it seems pretty obvious that they better should

[14:46] <leont> What I really want is a then that automatically awaits the promise. It would save me a line on almost any then handler. That may or may not be what you mean with andthen

[14:47] <leont> (my question is basically what does it do with a failed promise)

[14:51] <vrurg> I'd rather expect a broken one to be bypassed down the stream. 

[14:51] <vrurg> The point is in preserving the original cause.

[14:51] <leont> Yeah, makes sense

[14:51] *** evalable6 left
[14:51] *** linkable6 left
[14:51] *** evalable6 joined
[14:53] *** linkable6 joined
[16:14] *** evalable6 left
[16:14] *** linkable6 left
[16:15] *** linkable6 joined
[16:17] *** evalable6 joined
[16:52] *** lizmat_ left
[16:53] *** lizmat joined
[17:53] *** unicodable6 left
[17:53] *** quotable6 left
[17:53] *** shareable6 left
[17:53] *** squashable6 left
[17:53] *** evalable6 left
[17:53] *** nativecallable6 left
[17:53] *** statisfiable6 left
[17:53] *** bisectable6 left
[17:53] *** releasable6 left
[17:53] *** bloatable6 left
[17:53] *** sourceable6 left
[17:53] *** benchable6 left
[17:53] *** greppable6 left
[17:53] *** tellable6 left
[17:53] *** committable6 left
[17:53] *** notable6 left
[17:53] *** reportable6 left
[17:53] *** coverable6 left
[17:53] *** linkable6 left
[17:53] *** sourceable6 joined
[17:53] *** tellable6 joined
[17:54] *** releasable6 joined
[17:54] *** reportable6 joined
[17:54] *** bloatable6 joined
[17:54] *** nativecallable6 joined
[17:54] *** benchable6 joined
[17:55] *** linkable6 joined
[17:55] *** shareable6 joined
[17:55] *** statisfiable6 joined
[17:55] *** bisectable6 joined
[17:55] *** quotable6 joined
[17:55] *** notable6 joined
[17:55] *** evalable6 joined
[17:55] *** squashable6 joined
[17:55] *** committable6 joined
[17:55] *** greppable6 joined
[17:55] *** unicodable6 joined
[17:56] *** coverable6 joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[19:02] *** quotable6 left
[19:02] *** greppable6 left
[19:02] *** evalable6 left
[19:02] *** statisfiable6 left
[19:02] *** benchable6 left
[19:02] *** tellable6 left
[19:02] *** unicodable6 left
[19:02] *** coverable6 left
[19:02] *** releasable6 left
[19:02] *** bisectable6 left
[19:02] *** reportable6 left
[19:02] *** notable6 left
[19:02] *** squashable6 left
[19:02] *** committable6 left
[19:02] *** sourceable6 left
[19:02] *** linkable6 left
[19:02] *** bloatable6 left
[19:02] *** nativecallable6 left
[19:02] *** shareable6 left
[19:03] *** committable6 joined
[19:03] *** releasable6 joined
[19:03] *** bisectable6 joined
[19:03] *** statisfiable6 joined
[19:03] *** notable6 joined
[19:04] *** shareable6 joined
[19:04] *** quotable6 joined
[19:04] *** bloatable6 joined
[19:04] *** unicodable6 joined
[19:04] *** benchable6 joined
[19:04] *** greppable6 joined
[19:04] *** squashable6 joined
[19:05] *** coverable6 joined
[19:05] *** sourceable6 joined
[19:05] *** evalable6 joined
[19:05] *** tellable6 joined
[19:05] *** nativecallable6 joined
[19:05] *** linkable6 joined
[19:05] *** reportable6 joined
[20:52] *** linkable6 left
[20:52] *** evalable6 left
[20:53] *** evalable6 joined
[20:54] *** guifa joined
[20:55] *** linkable6 joined
[21:55] *** linkable6 left
[21:55] *** evalable6 left
[21:56] *** linkable6 joined
[21:58] *** evalable6 joined
[22:40] *** sena_kun left
[22:59] *** ab5tract joined
[23:59] *** ab5tract left
