[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:34] *** jjatria left
[01:35] *** JRaspass left
[01:54] *** JRaspass joined
[01:56] *** jjatria joined
[02:32] *** epony joined
[03:23] *** dogbert17 joined
[03:24] *** dogbert12 joined
[03:25] *** dogbert11 left
[03:28] *** dogbert17 left
[04:39] *** Xliff joined
[04:40] *** discord-raku-bot left
[04:40] *** discord-raku-bot joined
[05:23] *** raku-discord joined
[05:24] *** raku-discord left
[05:25] *** raku-discord joined
[05:25] *** raku-discord left
[05:26] *** raku-discord joined
[05:26] *** raku-discord left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:40] *** discord-raku-bot left
[07:40] *** discord-raku-bot joined
[08:40] *** discord-raku-bot left
[08:41] *** discord-raku-bot joined
[10:05] *** sena_kun joined
[10:28] *** epony left
[11:09] *** ab5tract joined
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:22] <lizmat> nine: is parsing of regex / rule / token already 100% implemented in RakuAST that you know?

[12:23] <lizmat> working on deparsing RakuAST::RegexDeclaration, and I don't seem to be able to find a way to find the difference between those three

[12:23] <lizmat> as they all codegen to RegexDeclaration

[12:23] <lizmat> also: something like:

[12:24] <lizmat> token { foo }

[12:24] <lizmat> is codegenned as three Regex::Literal nodes, instead of one

[12:24] <lizmat> which feels... wrong ?

[12:27] <lizmat> oddly, It looks like the QAST generation is combining consecutive Regex::Literals again

[12:42] <Geth> ¦ DBIish/main: a8b4676c3e | (Rod Taylor)++ | .github/workflows/test.yml

[12:42] <Geth> ¦ DBIish/main: Swap testing 2020.12 for 2022.12

[12:42] <Geth> ¦ DBIish/main: 

[12:42] <Geth> ¦ DBIish/main: Keep up to date and 2020.12 has started regularly failing for unknown reasons.

[12:42] <Geth> ¦ DBIish/main: review: https://github.com/raku-community-modules/DBIish/commit/a8b4676c3e

[12:48] *** ab5tract left
[12:50] *** ab5tract joined
[13:06] <lizmat> also: on the subject of codegenning $s ~~ s/foo/bar/

[13:07] <lizmat> why don't we create a dedicated HLL method for that, Rakudo::Internals.APPLY-SUBSTITUTIONS

[13:07] <lizmat> and codegen it as:

[13:08] <lizmat> $/ = Rakudo::Internals.APPLY-SUBSTITUTIONS($s, /foo/, "bar", flags) ?

[13:30] *** epony joined
[14:10] *** ab5tract left
[14:33] <Geth> ¦ rakudo/main: da963241a8 | (Elizabeth Mattijsen)++ | src/Raku/ast/regex.rakumod

[14:33] <Geth> ¦ rakudo/main: Make RakuAST::Regex::Sequence join Regex::Literals

[14:33] <Geth> ¦ rakudo/main: 

[14:33] <Geth> ¦ rakudo/main: When feeding ...Sequence.new() a bunch of consecutive Regex::Literals,

[14:33] <Geth> ¦ rakudo/main: they will be combined into a single RegexLiteral.  This corrects

[14:33] <Geth> ¦ rakudo/main: deparsing in many cases, but not all yet.

[14:33] <Geth> ¦ rakudo/main: 

[14:34] <Geth> ¦ rakudo/main: Brings number of passing tests to 621

[14:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/da963241a8

[14:34] <Geth> ¦ rakudo/main: 8ee619270f | (Elizabeth Mattijsen)++ | 2 files

[14:34] <Geth> ¦ rakudo/main: Fix issue in deparsing RakuAST::Regex::Literal

[14:34] <Geth> ¦ rakudo/main: 

[14:34] <Geth> ¦ rakudo/main: We should just use .raku semantics if there are non-word chars

[14:34] <Geth> ¦ rakudo/main: in the string.  Adjusts tests accordingly.  Introduce a new internal

[14:34] <Geth> ¦ rakudo/main: method for this functionality, as we're probably going to be needing

[14:34] <Geth> ¦ rakudo/main: that again.

[14:34] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8ee619270f

[14:38] *** codesections joined
[14:49] <patrickb> What's an easy OP to put in raku code and break on in Moar?

[14:50] <patrickb> (say / MVM_string_say doesn't work. I didn't investigate.)

[14:51] <lizmat> so you want it to generate proper bytecode yet bomb on Moar?

[14:53] <patrickb> I want gdb to break once it started executing by code (so skip over compilation)

[14:53] <patrickb> break as in "be able to put a breakpoint in gdb"

[14:54] <lizmat> nqp::die() ?

[14:54] <patrickb> But then my program aborts. :-P

[15:02] <patrickb> breaking on "write_bytes" works with "say"

[15:10] <patrickb> Ah. say obviously codegens to write_fhb

[15:11] <patrickb> I guess the "say" op is unused then...

[15:53] <patrickb> Is there any writeup on how the regex machinery works? How do Cursors, NFAs, backtracking, ... play together?

[15:56] <lizmat> nothing in nqp/docs jumps out :-(

[15:59] <patrickb> I'm off for today. Have a nice weekend everyone! o/

[16:08] <Geth> ¦ rakudo/main: 9998d1338c | (Elizabeth Mattijsen)++ | src/Raku/ast/regex.rakumod

[16:08] <Geth> ¦ rakudo/main: Join Regex::Literal with RakuAST::Regex::WithSigspace

[16:08] <Geth> ¦ rakudo/main: 

[16:08] <Geth> ¦ rakudo/main: Fixes another deparse issue.

[16:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9998d1338c

[16:11] *** japhb left
[16:13] *** japhb joined
[17:18] *** japhb left
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:16] *** discord-raku-bot left
[18:16] *** discord-raku-bot joined
[18:25] *** notna joined
[18:37] <nine> patrickb: I usually break on nqp::sin_n(1e0)

[18:37] <nine> patrickb: Works well....unless of course you're debugging very mathy code :)

[18:38] <nine> lizmat: no idea about any of the regexy stuff

[19:51] *** dogbert17 joined
[19:54] *** dogbert12 left
[20:04] *** dogbert11 joined
[20:04] *** discord-raku-bot left
[20:04] *** discord-raku-bot joined
[20:07] *** dogbert17 left
[20:09] *** discord-raku-bot left
[20:09] *** discord-raku-bot joined
[20:15] *** notna left
[20:46] *** codesections left
[21:02] <Geth> ¦ nqp: usev6++ created pull request #794: [JVM] Add some constants DISP_*

[21:02] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/794

[21:46] *** sena_kun left
[23:16] *** discord-raku-bot left
[23:16] *** discord-raku-bot joined
[23:38] *** epony left
