[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:03] *** ab5tract left
[00:31] *** epony left
[01:05] *** opoku joined
[01:57] *** Kaipei left
[02:29] *** ab5tract joined
[02:37] <Geth> ¦ rakudo: thundergnat++ created pull request #5150: Update to Unicode 15.0

[02:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5150

[02:39] *** ab5tract left
[02:39] *** epony joined
[02:40] *** ab5tract joined
[03:00] <Geth> ¦ roast: thundergnat++ created pull request #825: Update to Unicode 15.0

[03:00] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/825

[03:24] *** opoku left
[03:36] *** ab5tract left
[03:37] *** ab5tract joined
[03:48] *** ab5tract left
[03:48] *** ab5tract joined
[03:54] *** ab5tract left
[03:55] *** ab5tract joined
[04:00] *** ab5tract left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:14] *** kjp left
[06:17] *** kjp joined
[06:34] *** epony left
[07:03] *** epony joined
[07:53] <Geth> ¦ nqp/main: da9c50361d | (Patrick Böker)++ | Configure.pl

[07:53] <Geth> ¦ nqp/main: Don't errors without git but all needed files are present

[07:53] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/da9c50361d

[07:53] <Geth> ¦ nqp/main: 82d55d68bb | (Patrick Böker)++ (committed using GitHub Web editor) | Configure.pl

[07:53] <Geth> ¦ nqp/main: Merge pull request #791 from patrickbkr/no-git-configure

[07:53] <Geth> ¦ nqp/main: 

[07:53] <Geth> ¦ nqp/main: Don't error without git but all needed files are present

[07:53] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/82d55d68bb

[07:54] <Geth> ¦ rakudo/main: e3e962c2f9 | (Patrick Böker)++ | Configure.pl

[07:54] <Geth> ¦ rakudo/main: Don't errors without git but all needed files are present

[07:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e3e962c2f9

[07:54] <Geth> ¦ rakudo/main: 178a774fe5 | (Patrick Böker)++ (committed using GitHub Web editor) | Configure.pl

[07:54] <Geth> ¦ rakudo/main: Merge pull request #5149 from patrickbkr/no-git-configure

[07:54] <Geth> ¦ rakudo/main: 

[07:54] <Geth> ¦ rakudo/main: Don't error without git but all needed files are present

[07:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/178a774fe5

[08:03] *** linkable6 left
[08:03] *** evalable6 left
[08:06] *** linkable6 joined
[08:06] *** evalable6 joined
[09:30] *** samebchase left
[09:31] *** samebchase joined
[09:39] *** Kaipei joined
[09:47] *** sena_kun joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:56] <lizmat> I wonder whether we should move RakluAST::Deparse to lib

[12:57] <lizmat> and have RakuAST::Node.DEPARSE require that file

[12:58] <lizmat> with 200 classes currently having deparsing logic and more than 200 to go still

[12:59] <ugexe> how do we decide what goes in lib/ and what goes in the core anyway

[12:59] <lizmat> well, that's a more general issue

[12:59] <ugexe> i thought we had some vague reasoning already, but maybe not

[13:00] <ugexe> main thing i can think of is the potential uninstall-ability / upgradability of things in lib/

[13:00] <lizmat> in this case, moving it transparently to lib would be easy as all access is handled through the RakuAST::Node.DEPARSE method

[13:01] <lizmat> practical issue is I'm not sure how to require a module in lib from the "Raku/ast sorta Raku but not quite and really nqp" land

[13:02] <lizmat> practically, it would mean not having to re-compile the whole core for RakuAST::Deparse development

[13:02] <lizmat> which would save like 30+ seconds for each fix / test

[13:04] <Geth> ¦ rakudo/main: 19b3757ec3 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[13:04] <Geth> ¦ rakudo/main: Part 2 of HLLizing RakuAST::Deparse

[13:04] <Geth> ¦ rakudo/main: 

[13:04] <Geth> ¦ rakudo/main: - also made sure the methods are in alphabetical order for better

[13:04] <Geth> ¦ rakudo/main:   search in a soon to be 50K+ / 1700+ cloc file, which will at least

[13:04] <Geth> ¦ rakudo/main:   double in size yet

[13:04] <Geth> ¦ rakudo/main: - added visual markers to guide entry of newer .deparse candidates

[13:04] <Geth> ¦ rakudo/main:   at the right location

[13:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/19b3757ec3

[13:23] <lizmat> nine: in the Perl6 grammar, 42.WHAT codegens to a nqp::what(42)

[13:24] <lizmat> in the Raku Grammar it codegens to a method call .WHAT

[13:24] <lizmat> same for .HOW

[13:25] <lizmat> is this intentional, or is this a codegen issue in Raku grammar / actions ?

[13:26] <lizmat> and same for .WHO

[13:27] <lizmat> and DEFINITE

[13:27] <nine> I guess just NYI special cases.

[13:28] <lizmat> ok, so it's just a matter of fixing the IMPL-TO-QAST method ?

[13:29] <nine> Yes.

[13:29] <lizmat> and .REPR

[13:29] <lizmat> ok

[13:29] <lizmat> I'll put that on my list  :-)

[13:30] <nine> About moving Deparse to lib, you can get the same development benefits by implementing it in lib and then moving the working code to the setting. Don't have to use lib as permanent location for that

[13:30] <nine> Oh, and DEPARSE is also used by RakuAST, so it will have to be in core

[13:31] <lizmat> ah?  

[13:31] <lizmat> Ah, I see

[13:31] <lizmat> src/Raku/ast/code.rakumod

[13:31] <lizmat> 1443:nqp::bindattr_s($regex, Regex, '$!source', self.DEPARSE);

[13:32] <lizmat> ok, that settles that question then  :-)

[13:39] <Geth> ¦ rakudo/main: 5abd89601f | (Elizabeth Mattijsen)++ | 2 files

[13:39] <Geth> ¦ rakudo/main: Add deparsing tests to calls

[13:39] <Geth> ¦ rakudo/main: 

[13:39] <Geth> ¦ rakudo/main: Before, we checked only whether the deparsed code would roundtrip.

[13:39] <Geth> ¦ rakudo/main: This adds checks to see if the deparsed code actually looks like

[13:39] <Geth> ¦ rakudo/main: something we're expecting.  Found some issues with .WHAT macroish

[13:39] <Geth> ¦ rakudo/main: method calls, so these are marked TODO.

[13:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5abd89601f

[13:50] <lizmat> nine: also looks like "42.REPR(666)" is legal in Raku grammar..  :-)

[13:50] <lizmat> will also look at fixing that

[13:52] <nine> I wonder if these macros really should become a different RakuAST node. They are very different beasts from regular method calls. That problem with arguments is an example of that. The difference in deparsing another one.

[13:52] <lizmat> yeah, that may be a better solution

[13:52] <lizmat> so fix the grammar to catch these, and create different RakuAST nodes for them

[13:52] <lizmat> check

[13:53] <nine> yes, that's what I'm thinking

[13:53] <nine> Then passing an arg there would become a syntax error

[13:54] <lizmat> hmmm.. actually, Call::Method already has a IMPL-SPECIAL-OP method that returns the op name for a given method name

[13:54] <lizmat> looks like there is code for it already in Call::Method

[13:54] <nine> Yes, the alternative to what I just suggested would be to catch those args in the check phase

[13:56] <nine> The SPECIAL-OPS hash was introduced by jnthn, so we can assume that at least at that point he was sure those should be RakuAST::Call::Method nodes

[13:57] <lizmat> ok, so now we need to figure out why they don't fire

[13:57] <lizmat> ah, but maybe they do:  a deparse with --target=ast wouldn't reveal that, or would it ?

[13:58] <nine> no, it wouldn't

[13:59] <lizmat> right... ok, it looks what is just missing, is the check for args in the grammar, and the deparsing

[14:00] <nine> Not in the grammar, in PERFORM-CHECK in RakuAST::Call::Method

[14:01] <lizmat> aha, ok  :-)

[14:13] <lizmat> afk for a few hours&

[14:20] *** ab5tract joined
[14:22] *** ab5tract left
[14:23] *** ab5tract joined
[14:34] <Geth> ¦ rakudo: 2colours++ created pull request #5151: "numeric comparisons" with coercion rather than overload

[14:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5151

[14:43] <Geth> ¦ rakudo: 2colours++ created pull request #5152: Dateish "numeric comparisons" pt 2

[14:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5152

[17:22] *** melezhik joined
[17:24] *** melezhik left
[17:28] *** melezhik joined
[17:34] *** melezhik left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:02] <Geth> ¦ rakudo/main: 4a6c5541b8 | (Stefan Seifert)++ | src/Raku/ast/scoping.rakumod

[18:02] <Geth> ¦ rakudo/main: RakuAST: also merge NQP package stubs

[18:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4a6c5541b8

[18:04] *** Geth left
[18:04] *** Geth joined
[18:17] *** discord-raku-bot left
[18:18] *** discord-raku-bot joined
[18:36] *** discord-raku-bot left
[18:36] *** discord-raku-bot joined
[18:38] <[Coke]> https://github.com/Raku/nqp/issues/59 - someone want to comment "you can't do that in NQP" so I can close this old ticket? :)

[18:38] <[Coke]> (that I opened in 2012)

[18:39] <[Coke]> nqp: class EEK {method Numeric() {return 3}}; my $a:= EEK.new(); say(+$a);

[18:39] <camelia> nqp-moarvm: OUTPUT: «Cannot intify object of type EEK␤   at src/vm/moar/ModuleLoader.nqp:130  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/ModuleLoader.moarvm:)␤ from <tmp>:1  (<ephemeral file>:<mainline>)␤ from NQP::src/HLL/Compiler.nqp:196  (/home/camelia/rakudo-m-inst-2/sha…»

[18:39] <[Coke]> nqp: class EEK {method Numeric() {return 3}}; my $a:= EEK.new(); say($a.Numeric);

[18:39] <camelia> nqp-moarvm: OUTPUT: «3␤»

[18:40] *** discord-raku-bot left
[18:40] *** discord-raku-bot joined
[18:40] <[Coke]> This was a partcl blocker back in ancient history

[19:25] *** ab5tract left
[19:25] *** ab5tract joined
[19:39] <lizmat> nine: so I added a PERFORM-CHECK method to RakuAST::Call::Method, but it is not getting called

[19:39] <lizmat> should it be registered somewhere ?

[19:41] <lizmat> thoughts?

[19:43] <nine> is RakuAST::CheckTime

[19:45] <lizmat> ack

[20:11] *** hythm left
[20:34] *** ab5tract left
[20:35] *** ab5tract joined
[20:53] <Geth> ¦ rakudo/main: 123ad032ed | (Elizabeth Mattijsen)++ | 3 files

[20:53] <Geth> ¦ rakudo/main: Fix deparsing of macroish method calls

[20:53] <Geth> ¦ rakudo/main: 

[20:53] <Geth> ¦ rakudo/main: - introduce a RakuAST::Call::Method.macroish method

[20:53] <Geth> ¦ rakudo/main: - adapt deparsing of RakuAST::Call::Method accordingly

[20:53] <Geth> ¦ rakudo/main: - introduce a RakuAST::ArgList.has-args method

[20:53] <Geth> ¦ rakudo/main: - introduce CHECK testing and sorry if macroish && has-args

[20:53] <Geth> ¦ rakudo/main: - unTODO now passing tests

[20:53] <Geth> ¦ rakudo/main: 

[20:53] <Geth> ¦ rakudo/main: Note: the error message appears to lack file and line number, but

[20:53] <Geth> ¦ rakudo/main: I think that's still just NYI at this moment

[20:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/123ad032ed

[20:54] <lizmat> nine: ^^ suggestions for improvements ?

[21:07] <nine> Instead of the shortname method you could just use self.name.canonicalize

[21:08] <Geth> ¦ rakudo/main: 8b9fb402b9 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[21:08] <Geth> ¦ rakudo/main: RakuAST: Fix attribute accessor putting a non-statement into statement list

[21:08] <Geth> ¦ rakudo/main: 

[21:08] <Geth> ¦ rakudo/main: Need to wrap the RakuAST::Var::Lexical in a

[21:08] <Geth> ¦ rakudo/main: RakuAST::Statement::Expression

[21:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8b9fb402b9

[21:08] <Geth> ¦ rakudo/main: 2279a0aed7 | (Stefan Seifert)++ | 3 files

[21:08] <Geth> ¦ rakudo/main: RakuAST: implement tracing execution (use trace)

[21:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2279a0aed7

[21:09] <nine> 88 passing test and 601 passing spectest files

[21:23] <japhb> lizmat++ nine++

[21:33] *** ab5tract left
[21:34] *** ab5tract joined
[21:47] *** sena_kun left
[21:48] *** sena_kun joined
[21:52] *** Kaipei left
[21:52] *** Kaipei joined
[22:21] *** ab5tract left
[22:26] *** sena_kun left
