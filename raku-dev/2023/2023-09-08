[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:05] <discord-raku-bot> <nemokosch> It seems legit that the result is a List

[01:03] *** dogbert17 left
[01:06] *** dogbert17 joined
[03:25] *** linkable6 left
[03:25] *** evalable6 left
[03:27] *** evalable6 joined
[03:27] *** linkable6 joined
[05:14] *** reportable6 left
[05:14] *** linkable6 left
[05:14] *** coverable6 left
[05:14] *** nativecallable6 left
[05:14] *** tellable6 left
[05:14] *** quotable6 left
[05:14] *** benchable6 left
[05:14] *** evalable6 left
[05:14] *** bisectable6 left
[05:14] *** unicodable6 left
[05:14] *** sourceable6 left
[05:14] *** greppable6 left
[05:14] *** statisfiable6 left
[05:14] *** shareable6 left
[05:14] *** notable6 left
[05:14] *** squashable6 left
[05:14] *** committable6 left
[05:14] *** sourceable6 joined
[05:14] *** quotable6 joined
[05:15] *** tellable6 joined
[05:15] *** squashable6 joined
[05:15] *** linkable6 joined
[05:15] *** committable6 joined
[05:15] *** nativecallable6 joined
[05:15] *** shareable6 joined
[05:15] *** evalable6 joined
[05:15] *** bisectable6 joined
[05:16] *** reportable6 joined
[05:16] *** coverable6 joined
[05:16] *** benchable6 joined
[05:16] *** statisfiable6 joined
[05:16] *** unicodable6 joined
[05:17] *** notable6 joined
[05:17] *** greppable6 joined
[06:00] *** reportable6 left
[06:44] *** ab5tract joined
[06:50] <ab5tract> so I've managed to fix the issue with the where blocks in role signatures, but I've run into another issue that I've been grinding on silently for a while and thought I would share here now in case of insights

[06:53] <ab5tract> m: my $content = 'role R[::T] { method m {"m"}}; class C does R[Int] {}'; shell Q:scalar<RAKUDO_RAKUAST=1 $*EXECUTABLE -e '$content'>

[06:53] <camelia> rakudo-moar 1eb3db770: ( no output )

[07:00] <ab5tract> huh, that's broken on my branch, one second

[07:01] <ab5tract> wait, no that works fine, sorry.

[07:03] <ab5tract> it's still only in the case of having the where clause on the role signature: 'role R[Int $x where { $x % 2}] { method m { "m" } }; class C does R[2] {}'

[07:03] <ab5tract> (not sure why pasting always removes one of the '%' symbols, but anyway)

[07:04] <ab5tract> it fails with: 'No appropriate parametric role variant available for 'R': Lexical with name '$?CLASS' does not exist in this frame' 

[07:06] <ab5tract> it's failing at the specialize step in  ParametricRoleGroupHOW

[07:07] <ab5tract> I've tried every approach I can think of to get that $?CLASS into frame here and so far, no luck.

[07:24] <ab5tract> in the old frontend there is a whole step for fixing up the QAST for role bodies. I wonder if this might somehow be related

[07:47] <lizmat> well, afaik in the Raku grammar the QAST twiddling is handled by generating a RakuAST tree and have the "normal" QAST handling of that, handle the role stuff

[08:18] <ab5tract> but the QAST twiddling I'm talking about takes place in $*W

[08:21] <ab5tract> oh, in Perl6/Actions, sorry

[08:22] <ab5tract> "sub begin_time_lexical_fixup"

[08:22] <lizmat> nine might know

[08:36] <ab5tract> the elusive Mr. nine :)

[08:37] <ab5tract> come back man!

[08:55] <Geth> ¦ rakudo/main: e08eadf672 | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[08:55] <Geth> ¦ rakudo/main: Add operator properties for some missing (dummy) infixes

[08:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e08eadf672

[08:55] <Geth> ¦ rakudo/main: 73d02cc0f5 | (Elizabeth Mattijsen)++ | src/core.c/OperatorProperties.rakumod

[08:55] <Geth> ¦ rakudo/main: Add setting of operator properties for infixes

[08:55] <Geth> ¦ rakudo/main: 

[08:55] <Geth> ¦ rakudo/main: that seemed to have been forgotten before.

[08:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/73d02cc0f5

[09:35] <Geth> ¦ rakudo/main: 8dc2e53eef | (Elizabeth Mattijsen)++ | 5 files

[09:35] <Geth> ¦ rakudo/main: RakuAST: have the expression parser use OperatorProperties

[09:35] <Geth> ¦ rakudo/main: 

[09:35] <Geth> ¦ rakudo/main: - remove the ::Assign::Item class

[09:35] <Geth> ¦ rakudo/main: - introduce ::Assignment class, a subclass of ::Infix, taking an

[09:35] <Geth> ¦ rakudo/main:   :item named argument indicating whether item assignment precedence

[09:35] <Geth> ¦ rakudo/main:   is needed.  Defaults to list assignment precedence.

[09:35] <Geth> ¦ rakudo/main: - better handle ternaries in grammar / actions

[09:35] <Geth> ¦ rakudo/main: <…commit message has 9 more lines…>

[09:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8dc2e53eef

[09:36] <lizmat> *phew* that was a lot more work and puzzle fixing that I anticipated

[09:40] <lizmat> (than

[10:00] <lizmat> ab5tract: I just realized that all of the pipe ops aren't implemented yet in the Raku grammar

[10:00] <lizmat> ==> <== ==>> <<==

[10:00] <lizmat> perhaps something to look at to stop the headbanging on roles?

[10:12] <discord-raku-bot> <nemokosch> ==>> was never implemented, or?

[10:13] <lizmat> ah, could be, but the op is in the legacy grammar

[10:13] <lizmat> m: 42 ==>> 666

[10:13] <camelia> rakudo-moar 8dc2e53ee: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤==>> feed operator not yet implemented. Sorry.␤at <tmp>:1␤------> 342 ==>> 666⏏<EOL>␤»

[10:13] <lizmat> so that would be a *very* easy win :-)

[10:14] <discord-raku-bot> <nemokosch> :DDD

[10:32] <Geth> ¦ rakudo/main: 2b36f85fda | (Elizabeth Mattijsen)++ | src/Raku/ast/operator-properties.rakumod

[10:32] <Geth> ¦ rakudo/main: Add OperatorProperties for ==> and friends

[10:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2b36f85fda

[11:44] <Geth> ¦ rakudo/main: c7338f9675 | (Elizabeth Mattijsen)++ | src/Raku/ast/pair.rakumod

[11:44] <Geth> ¦ rakudo/main: RakuAST: make sure ::ColonPair has operator properties

[11:44] <Geth> ¦ rakudo/main: 

[11:44] <Geth> ¦ rakudo/main: This seems to be needed for some types of adverb handling

[11:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c7338f9675

[11:44] <Geth> ¦ rakudo/main: e8076ae415 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[11:44] <Geth> ¦ rakudo/main: RakuAST: fix final use of prec hashes

[11:44] <Geth> ¦ rakudo/main: 

[11:44] <Geth> ¦ rakudo/main: - add helper method "properties-for-node" which also does error

[11:44] <Geth> ¦ rakudo/main:   checking and has one ad-hoc check for adverb handling

[11:44] <Geth> ¦ rakudo/main: - use that helper method where it's needed

[11:44] <Geth> ¦ rakudo/main: - remove debug code: it appears to have done its work

[11:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e8076ae415

[11:47] *** reportable6 joined
[11:51] <Geth> ¦ rakudo/main: c035db23d4 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[11:51] <Geth> ¦ rakudo/main: RakuAST: remove the %methodcall hash

[11:51] <Geth> ¦ rakudo/main: 

[11:51] <Geth> ¦ rakudo/main: First of many similar commits for bisectability

[11:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c035db23d4

[11:59] <Geth> ¦ rakudo/main: 95dbd6cd82 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[11:59] <Geth> ¦ rakudo/main: RakuAST: remove the %autoincrement hash

[11:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/95dbd6cd82

[12:00] *** reportable6 left
[13:35] *** reportable6 joined
[15:04] <ab5tract> thanks for the recommendation :)

[15:04] <ab5tract> I could probably use a break from all of this headbanging, it's true

[15:09] <ab5tract> lizmat: seems like you are pretty far along the path to removing HLL::Grammar

[15:32] <lizmat> yes, I am  :-)

[15:33] <ab5tract> it's been impressive to watch the progress

[15:35] <vrurg> It would also be very helpful in some distant future to implement self-bootstrapping of Rakudo.

[15:35] <lizmat> yes, that's also at the back of my mind

[15:36] <ab5tract> now that would be something

[15:37] <lizmat> indeed it would: let's first try to build the setting with the Raku grammar  :-)

[15:40] <ab5tract> yeah, that's a big enough tower to tackle for now :)

[15:45] <ab5tract> the feed operators... I'm not quite sure where to place the class(es) in the RakuAST hierarchy. Woul dthey fall under expressions? Unless I can use RakuAST::Infix directly...

[15:46] <lizmat> I'm not sure...  feels like at least initially they could be just infixes....

[15:48] <Geth> ¦ rakudo: ab5tract++ created pull request #5373: RakuAST: Role signature fixups

[15:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5373

[16:29] <ab5tract> huh, intriguing.. it can't seem to resolve the lexical `infix:sym«==>»` .. shouldn't that come from the setting?

[16:31] <lizmat> nope: there is no actual operator for it, it's purely a grammar structure

[16:31] <lizmat> surprised me as well  :-)

[16:40] <Geth> ¦ rakudo/main: 310e40dabc | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[16:40] <Geth> ¦ rakudo/main: RakuAST: remove O-logic from meta ops

[16:40] <Geth> ¦ rakudo/main: 

[16:40] <Geth> ¦ rakudo/main: It feels that this *could* mean it is getting the wrong precedence

[16:40] <Geth> ¦ rakudo/main: somewhere, but removing these lines doesn't break any tests, so

[16:40] <Geth> ¦ rakudo/main: glad to do it this way for now, and as a separate commit for easier

[16:40] <Geth> ¦ rakudo/main: bisectability

[16:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/310e40dabc

[16:44] <ab5tract> oh, ok, that's definitely intriguing... and it sounds like it will need its own expression class

[16:50] <lizmat> if I look at the QAST of the feed op in the legacy grammar

[16:50] <lizmat> e.g. for:

[16:50] <lizmat> 1,2,3 ==> my @a

[16:50] <lizmat> the it looks like it is generating the same QAST as for:

[16:50] <lizmat> my @a <== 1,2,3

[16:51] <lizmat> which is basically:

[16:51] <lizmat> (my @a).append(1,2,3)

[16:51] <lizmat> if I'm reading correctly  :-)

[16:52] <lizmat> so maybe an ordinary infix, with an ApplyFeed class ?

[17:07] *** linkable6 left
[17:07] *** evalable6 left
[17:08] *** evalable6 joined
[17:10] *** linkable6 joined
[17:11] <ab5tract> the ApplyFeed makes perfect sense.. I'm not sure what you mean about "ordinary infix" though. IIUC: If I try to make an infix object without a resolvable infix subroutine, it will die when it gets visited

[17:13] <lizmat> hmmm.... then maybe a RakuAST::Feed class, that *could* be a subclass of Infix

[17:13] <lizmat> with its own QAST logic ?

[17:14] <lizmat> I'm just spitballing here

[17:15] <discord-raku-bot> <nemokosch> this is actually a good example of when some deliberate design would be appropriate

[17:16] <discord-raku-bot> <nemokosch> - does it matter if there is a subroutine to back the operator up, in order for the operator to have a RakuAST operator node?

[17:16] <discord-raku-bot> <nemokosch> As long as it is an operator from the perspective of the user, I don't think it should

[17:17] <discord-raku-bot> <nemokosch> and actually, syntax sugar operators like the postcircumfix < > are added to RakuAST as operators

[17:19] *** jgaz left
[17:19] <lizmat> hmmm.   maybe it *is* time to look at https://gist.github.com/lizmat/787a6ddb31d51cc67d0c00f3403de78c again  :-)

[17:28] <ab5tract> nemokosch: Luckily it's not technically necessary if I replace the QAST calls, I just don't get any plug and play. So it appears that the answer is to have a Feed which subclasses Infix, but replaces the necessary parts.

[17:29] <discord-raku-bot> <nemokosch> yes, that may be better

[17:31] <discord-raku-bot> <nemokosch> either way, this is just another example of what I'm worried about with RakuAST: without actually sitting down and thinking about what should be the nodes, it can very easily end up as a mixture of high-level Raku and internal behavior exposed

[17:33] <ab5tract> A user presumably would not encounter this issue because they would have declared their infix somewhere in the lexical scope

[17:34] <ab5tract> but yes, I agree in principle with what you are saying

[17:36] <discord-raku-bot> <nemokosch> Here I mean "user" as in somebody who might construct RakuAST for code generation

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:11] <lizmat> in that light: I think the checks for appropriateness of infixes in meta-operators, needs to move to the RakuAST classes, and *not* be handled by the grammar

[18:39] *** guifa__ left
[18:55] <Geth> ¦ rakudo/main: 51b0afc4b8 | (Elizabeth Mattijsen)++ | src/Raku/ast/expressions.rakumod

[18:55] <Geth> ¦ rakudo/main: RakuAST: group code a bit more logically

[18:55] <Geth> ¦ rakudo/main: 

[18:55] <Geth> ¦ rakudo/main: Also add some visual dividers

[18:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/51b0afc4b8

[20:25] <ab5tract> got Feed operators working :

[20:25] <ab5tract> though it was mostly copy-paste

[20:28] *** jgaz joined
[20:38] <ab5tract> I wouldn't have worked out all that QAST on my own

[20:46] <leont> lizmat: yeah, I really hope that will make it easier to set the iffiness/diffiness/fiddliness of a custom operator

[20:50] <Geth> ¦ rakudo: ab5tract++ created pull request #5374: RakuAST: Add ==> and <== feed operators

[20:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5374

[22:47] *** Voldenet left
[22:53] *** Voldenet joined
