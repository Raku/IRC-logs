[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[01:09] *** reportable6 left
[01:09] *** tellable6 left
[01:09] *** coverable6 left
[01:09] *** sourceable6 left
[01:09] *** committable6 left
[01:09] *** shareable6 left
[01:09] *** nativecallable6 left
[01:09] *** releasable6 left
[01:09] *** statisfiable6 left
[01:09] *** evalable6 left
[01:09] *** greppable6 left
[01:09] *** benchable6 left
[01:09] *** unicodable6 left
[01:09] *** bloatable6 left
[01:09] *** linkable6 left
[01:09] *** quotable6 left
[01:09] *** notable6 left
[01:09] *** squashable6 left
[01:09] *** bisectable6 left
[01:09] *** squashable6 joined
[01:09] *** reportable6 joined
[01:09] *** linkable6 joined
[01:09] *** bisectable6 joined
[01:10] *** statisfiable6 joined
[01:10] *** quotable6 joined
[01:10] *** benchable6 joined
[01:10] *** shareable6 joined
[01:11] *** committable6 joined
[01:11] *** greppable6 joined
[01:11] *** unicodable6 joined
[01:11] *** evalable6 joined
[01:12] *** notable6 joined
[01:12] *** coverable6 joined
[01:12] *** bloatable6 joined
[01:12] *** nativecallable6 joined
[01:12] *** tellable6 joined
[01:12] *** sourceable6 joined
[01:12] *** releasable6 joined
[02:22] *** linkable6 left
[02:22] *** evalable6 left
[02:23] *** evalable6 joined
[02:39] <MasterDuke> hm. 'exists' isn't quite like the other stat calls. the other ones all throw an exception if the file doesn't exist, and require a concrete object that's the result of a successful stat

[02:40] <MasterDuke> i could just have 'exists' redo the stat and not throw an exception, which is how it's currently done

[02:42] <MasterDuke> but then it's the only one that wouldn't need to take a stat struct as an argument and could(should?) instead just take a path

[02:44] <MasterDuke> i'm not quite sure how much i should have the syscalls mimic moarvm's api or rakudo's api

[02:46] <MasterDuke> i was going to pr my moarvm and rakudo changes, but now i think it needs a little more thought. it wouldn't be major changes either way (i don't think), but it's a little too late for me to be sure i've got all the possibilities covered

[04:00] *** linkable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:02] *** evalable6 left
[07:03] *** evalable6 joined
[07:43] *** sena_kun joined
[08:12] *** ab5tract joined
[08:24] <Geth> ¦ rakudo/main: 5fa96e3755 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[08:24] <Geth> ¦ rakudo/main: RakuAST: handle synthetics in Markup parser properly

[08:24] <Geth> ¦ rakudo/main: 

[08:24] <Geth> ¦ rakudo/main: The initial implementation assumed that one could use the same index

[08:24] <Geth> ¦ rakudo/main: in both the Uni representation, as well as an index in nqp::eqat.

[08:24] <Geth> ¦ rakudo/main: Synthetic codepoints break this assumption, as they are always decoded

[08:24] <Geth> ¦ rakudo/main: as decomposed.

[08:24] <Geth> ¦ rakudo/main: 

[08:24] <Geth> ¦ rakudo/main: <…commit message has 6 more lines…>

[08:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5fa96e3755

[08:45] <Geth> ¦ rakudo/main: 7d037bbb42 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[08:45] <Geth> ¦ rakudo/main: RakuAST: fix off-by-one error on << >> parsing

[08:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7d037bbb42

[09:26] *** sena_kun left
[10:06] <lizmat> notable6: weekly

[10:06] <notable6> lizmat, 1 note: 2023-06-26T19:54:27Z <lizmat>: https://dev.to/lizmat/moving-printf-formats-forward-1m3p

[10:06] <lizmat> notable6: weekly reset

[10:06] <notable6> lizmat, Moved existing notes to “weekly_2023-07-03T10:06:35Z”

[10:16] *** ab5tract left
[11:16] *** reportable6 left
[11:16] *** linkable6 left
[11:16] *** benchable6 left
[11:16] *** evalable6 left
[11:16] *** committable6 left
[11:16] *** unicodable6 left
[11:16] *** nativecallable6 left
[11:16] *** squashable6 left
[11:16] *** bloatable6 left
[11:16] *** bisectable6 left
[11:16] *** notable6 left
[11:16] *** releasable6 left
[11:17] *** reportable6 joined
[11:17] *** committable6 joined
[11:18] *** releasable6 joined
[11:18] *** linkable6 joined
[11:19] *** notable6 joined
[11:19] *** bisectable6 joined
[12:00] *** reportable6 left
[12:19] *** nativecallable6 joined
[12:20] *** squashable6 joined
[12:23] *** evalable6 joined
[12:32] <Geth> ¦ nqp: patrickbkr self-assigned CI pipeline is broken https://github.com/Raku/nqp/issues/805

[12:58] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/07/03/2023-27-revising-rakudoc/

[13:10] *** reportable6 joined
[13:25] <Xliff> I am still having issues with "Malformed UTF8 characters" in my react block.

[13:26] <Xliff> "react { whenever $proc.stdout {} and whenever $proc.stderr {} ... }" seem to be the culprits.

[13:26] <Xliff> How can I isolate these so that they do NOT kill my script. It's critical I get this fixed and working so I can show $dayJob raku is Production ready!

[13:29] <lizmat> are you 100% sure the process doesn't produce invalid UTF8 ?

[13:30] <Xliff> No.

[13:31] <Xliff> But I don't care if the Proc produces invalid UTF8. 

[13:31] <Xliff> Maybe put stdout and stdin into :bin somehow?

[13:33] <lizmat> https://docs.raku.org/type/Proc#routine_new  shows a :bin arg

[13:33] <lizmat> and run does as well: https://docs.raku.org/type/independent-routines#sub_run

[13:43] <discord-raku-bot> <nemokosch> I regularly just piped the process into iconv and ignored the non-compliant characters xD

[13:45] <Xliff> lizmat: Doesn't look like Proc::Async.new does, but I think the .stderr and .stdout methods do, so that's what I'm going to try. Thanks!

[15:00] *** sjn left
[15:00] *** sjn joined
[15:12] *** ab5tract joined
[15:23] *** ab5tract left
[16:13] *** benchable6 joined
[16:20] <Geth> ¦ roast: d504d52613 | (Elizabeth Mattijsen)++ | S32-list/repeated.t

[16:20] <Geth> ¦ roast: Remove unneeded =finish

[16:20] <Geth> ¦ roast: 

[16:20] <Geth> ¦ roast: Probably leftover from some debugging

[16:20] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d504d52613

[16:35] <Geth> ¦ rakudo/main: b17f9c1c78 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[16:35] <Geth> ¦ rakudo/main: RakuAST: make =finish a directive

[16:35] <Geth> ¦ rakudo/main: 

[16:35] <Geth> ¦ rakudo/main: As discussed in

[16:35] <Geth> ¦ rakudo/main:   https://github.com/finanalyst/Rakudoc-BETA/issues/17

[16:35] <Geth> ¦ rakudo/main: following Damian's comments

[16:35] <Geth> ¦ rakudo/main:   https://github.com/finanalyst/Rakudoc-BETA/issues/17#issuecomment-1616831157

[16:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b17f9c1c78

[16:41] <timo> m: say Format ~~ Callable

[16:41] <camelia> rakudo-moar 7d037bbb4: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Expected a term, but found either infix ~~ or redundant prefix ~␤  (to suppress this message, please use a space like ~ ~)␤at <tmp>:1␤------> say Format ~~⏏ Callable␤»

[16:42] <timo> ... man i haven't rakued properly in too long

[16:43] <timo> oh, i made a different mistake than i thought

[16:44] <timo> m: use v6.e.PREVIEW; say Formatter ~~ Callable # lizmat, should Callable be does-ed by Formatter?

[16:44] <camelia> rakudo-moar 7d037bbb4: OUTPUT: «False␤»

[16:44] <lizmat> no, don't think so?

[16:45] <lizmat> it is not a Callable, it produces one ?

[16:45] <lizmat> hmmm...

[16:46] <timo> oh then

[16:46] <timo> m: use v6.e.PREVIEW; say Format ~~ Callable # lizmat, should Callable be does-ed by Format?

[16:46] <camelia> rakudo-moar 7d037bbb4: OUTPUT: «False␤»

[16:46] <timo> i probably confused the two

[16:46] <lizmat> m:  use v6.e.PREVIEW; say Formatter.new('%s') ~~ Callable

[16:46] <camelia> rakudo-moar 7d037bbb4: OUTPUT: «True␤»

[16:46] <timo> ah, oh

[16:47] <lizmat> maybe Formatter shouldn't be a class

[16:48] <lizmat> but just a package holding Formatter::Grammar and Formatter::Actions

[16:49] <lizmat> actually: Formatter::Syntax

[16:50] <lizmat> fwiw, in the back of my mind I thought of Formatter.new also accepting a :grammar and an :actions argument in the future

[16:51] <timo> yeah, something to allow custom syntaxes for format strings to be put in the ecosystem would be nice

[16:51] <lizmat> with defaults on dynamic variables

[16:51] <timo> have something that does for format strings what rakudo grammars did to regexes

[16:52] <lizmat> anyways, I'm glad it's working as much as it is, although I have still some issues to fix in it

[16:59] <leont> Remind me, what's the minimum Rakudo version when you want to use RakuAST in a module?

[17:12] <timo> the docs.raku.org page on it says "available from language version `6.e+`" which kind of makes it sounds like we have a version 6.e and a different version 6.e+

[17:30] *** squashable6 left
[17:35] <timo> version 6.e+ and related RakuAST features are only available to subscribers to RakuPRO:tm:

[17:44] *** sena_kun joined
[17:55] *** unicodable6 joined
[18:00] <MasterDuke> Xliff: does whatever Proc-related function you're using have an `:enc` option? if so (or you can use one that does), maybe `:enc('utf8-c8')` would help

[18:00] *** reportable6 left
[18:02] <MasterDuke> unrelated to that, anyone have thoughts/suggestions about how to handle `nqp::const::STAT_EXISTS` functionality with my new syscall mechanism?

[18:02] *** reportable6 joined
[18:10] <ugexe> hmmm. it looks like nodejs uses access instead of stat to test for existence

[18:11] <ugexe> https://github.com/nodejs/node/blob/22da09155ffe3fe5508c8dd66887683555f7d375/lib/fs.js#L300C25-L300C29

[18:20] <ugexe> regardless, it returns a bool based on if there was an error or not and doesn't return a stat structure

[18:27] <lizmat> leont: https://rakudo.org/post/announce-rakudo-release-2023.02 was the first to have "use experimental :rakuast

[18:34] <MasterDuke> ugexe: yep, for the other stat functions i'm acting on a stat struct/repr object that was saved from an initial call, which will throw an exception if the file doesn't exist (not functionality i added, i'm just using the existing moarvm functions)

[18:36] <MasterDuke> so i do something like: my $s = nqp::syscall('stat'); say nqp::syscall('stat-filesize', $s);`, which doesn't perform another actual stat call in the stat-filesize implementation

[18:37] <MasterDuke> but for `nqp::syscall('stat-exists')`, i would have to call it again and not throw an exception (which is how it's implemented currently in moarvm). but then it sort of breaks the assumption that one stat is performed and all the other stuff is based on the results from that

[18:39] <MasterDuke> but i haven't yet looked very closely at what exactly raku/rakudo does, so maybe it'll be easier to implement that how i'm thinking than the current nqp:: op's functionality

[18:42] *** squashable6 joined
[19:42] <Geth> ¦ rakudo/main: a31bdc7813 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[19:42] <Geth> ¦ rakudo/main: RakuAST: fix typo in exception handling call

[19:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a31bdc7813

[20:29] *** Altai-man joined
[20:31] *** sena_kun left
[21:20] *** bloatable6 joined
[21:24] <Geth> ¦ rakudo/rakuast-phase-cleanup: 12 commits pushed by (Jonathan Worthington)++

[21:24] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/compare/f50307f7a002...173783b52a51

[21:42] <japhb> Huh, that isn't a terribly useful comparison link, Geth.

[21:47] <Xliff> MasterDuke: That's another thought. Thanks! Right now I am using .stderr/.stdout with (:bin)

[21:48] <Xliff> Is UTF8 the only encoding that will throw a fatal exception?

[22:22] *** Altai-man left
[22:51] <lizmat> japhb: looks like it was mostly a rebase

[23:22] *** evalable6 left
[23:22] *** linkable6 left
[23:35] *** ilogger2 left
[23:36] *** ilogger2 joined
