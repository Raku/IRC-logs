[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:16] *** discord-raku-bot left
[00:17] *** discord-raku-bot joined
[01:16] *** discord-raku-bot left
[01:17] *** discord-raku-bot joined
[02:17] *** discord-raku-bot left
[02:17] *** discord-raku-bot joined
[02:23] *** epony joined
[03:17] *** discord-raku-bot left
[03:17] *** discord-raku-bot joined
[04:18] *** Xliff left
[05:18] *** linkable6 left
[05:18] *** evalable6 left
[05:19] *** evalable6 joined
[05:20] *** linkable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:21] *** heartburn left
[06:22] *** heartburn joined
[07:07] *** samcv_ joined
[07:07] *** Voldenet_ joined
[07:14] *** JRaspass left
[07:14] *** samcv left
[07:14] *** |Tux| left
[07:14] *** Voldenet left
[07:14] *** elcaro left
[07:14] *** Voldenet_ is now known as Voldenet

[07:17] *** elcaro joined
[07:21] *** |Tux| joined
[07:22] *** JRaspass joined
[07:39] *** epony left
[08:17] *** discord-raku-bot left
[08:17] *** discord-raku-bot joined
[08:44] *** sena_kun joined
[09:43] <Geth> ¦ rakudo/main: a8edae2c21 | (Stefan Seifert)++ | src/Raku/ast/package.rakumod

[09:43] <Geth> ¦ rakudo/main: RakuAST: make $?CLASS and ::?CLASS available to role bodies at compile time

[09:43] <Geth> ¦ rakudo/main: 

[09:43] <Geth> ¦ rakudo/main: While runtime lookup of these type captures already worked, the compiler

[09:43] <Geth> ¦ rakudo/main: itself wasn't aware of their existence.

[09:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a8edae2c21

[09:43] <Geth> ¦ rakudo/main: 79075ad208 | (Stefan Seifert)++ | 2 files

[09:43] <Geth> ¦ rakudo/main: RakuAST: fix applying roles defined in the same comp unit

[09:43] <Geth> ¦ rakudo/main: 

[09:43] <Geth> ¦ rakudo/main: Role bodies are run when a role is applied, i.e. at the target's BEGIN

[09:43] <Geth> ¦ rakudo/main: time. Thus the mainpulations of the body's block QAST done in

[09:43] <Geth> ¦ rakudo/main: IMPL-EXPR-QAST were simply too late. They had not happened yet and the

[09:43] <Geth> ¦ rakudo/main: role body had the wrong return value.

[09:43] <Geth> ¦ rakudo/main: 

[09:43] <Geth> ¦ rakudo/main: Instead, mainpulate the role body's AST so when we compile it

[09:44] <Geth> ¦ rakudo/main: dynamically (as a BEGIN effect) we will generate the QAST we need.

[09:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/79075ad208

[09:44] <Geth> ¦ rakudo/main: c1c6ef26e4 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[09:44] <Geth> ¦ rakudo/main: RakuAST: fix inconsistent bind results with generics in signatures

[09:44] <Geth> ¦ rakudo/main: 

[09:44] <Geth> ¦ rakudo/main: While the routine's meta data was already set up correctly, the

[09:44] <Geth> ¦ rakudo/main: generated parameter type checks did not support generics and instead

[09:44] <Geth> ¦ rakudo/main: tried to match types directly. This would fail which caused an

[09:44] <Geth> ¦ rakudo/main: inconsistent bind result (binder thought the signature will match, but

[09:44] <Geth> ¦ rakudo/main: runtime checks failed).

[09:44] <Geth> ¦ rakudo/main: 

[09:44] <Geth> ¦ rakudo/main: Instead of checking against the generic's type object itself, we need to

[09:44] <Geth> ¦ rakudo/main: generate a runtime lookup of the generic's name, to get the type it was

[09:44] <Geth> ¦ rakudo/main: specialized to.

[09:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c1c6ef26e4

[09:55] *** evalable6 left
[09:57] *** evalable6 joined
[10:15] *** Xliff joined
[10:16] <Xliff> P6-GLib suite timing statistics for Raku 2022.12.1024.g.9998.d.1338

[10:16] <Xliff> Total number of projects: 33 (502749 loc)

[10:16] <Xliff> Total non-parallel compile times: 8758.230 (265.401 avg)

[10:16] <Xliff> Total parallel compile times: 2098.439 (63.589 avg) 4.174x speedup

[10:16] <Xliff> Notes: MAJOR regression on parallel timings by almost 500 seconds!

[10:17] *** Xliff left
[10:35] *** epony joined
[11:49] *** discord-raku-bot left
[11:49] *** discord-raku-bot joined
[11:52] *** Xliff joined
[11:53] <Xliff> Hi! Is there a writeup of the available RakuAST nodes, yet?

[11:57] *** discord-raku-bot left
[11:58] *** discord-raku-bot joined
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:39] <lizmat> Xliff: no, sadly, high on my list

[12:40] <lizmat> closest thing: t/12-rakuast test files

[12:47] <Xliff> lizmat: One sec.

[12:49] <lizmat> Xliff: re regression, any idea since what commit / release ?

[12:50] <Xliff> https://gist.github.com/Xliff/b4741a42ab831a85be6f00f3e9b79528

[12:50] <lizmat> going to be afk for a few hours&

[12:50] <Xliff> lizmat: Let me check.

[12:50] <lizmat> afk&

[12:51] <Xliff> lizmat: Since Raku 2022.12.985.g.05.cfed.1.b.0 on MoarVM 2022.12.14.gebefe.2618

[13:10] <Geth> ¦ rakudo/main: a99da6c162 | (Stefan Seifert)++ | src/Raku/ast/resolver.rakumod

[13:10] <Geth> ¦ rakudo/main: RakuAST: fix multi-part-name package installation with existing prefix

[13:10] <Geth> ¦ rakudo/main: 

[13:10] <Geth> ¦ rakudo/main: In role A::B { }; role A::B::C { } we overwrote the A::B role with a

[13:10] <Geth> ¦ rakudo/main: package stub, because when looking for the longest existing prefix of

[13:10] <Geth> ¦ rakudo/main: A::B::C we were looking for another A in A.

[13:10] <Geth> ¦ rakudo/main: 

[13:11] <Geth> ¦ rakudo/main: Additionally even with that fixed, with role A::B {}; role A::B::C::D {}

[13:11] <Geth> ¦ rakudo/main: we actually only created A::B::D since we didn't put the C we failed to

[13:11] <Geth> ¦ rakudo/main: find back into the list of unresolved package name parts.

[13:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a99da6c162

[13:11] <Geth> ¦ rakudo/main: 75b4f5b2cd | (Stefan Seifert)++ | 4 files

[13:11] <Geth> ¦ rakudo/main: RakuAST: implement support for INIT phasers

[13:11] <Geth> ¦ rakudo/main: 

[13:11] <Geth> ¦ rakudo/main: Instead of an !INIT_VALUES hash in the comp unit like the old compiler

[13:11] <Geth> ¦ rakudo/main: frontend, the RakuAST frontend simply creates a Scalar container for

[13:11] <Geth> ¦ rakudo/main: each init value and uses this for storing and accessing the value.

[13:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/75b4f5b2cd

[13:11] <Geth> ¦ rakudo/main: a564ff379b | (Stefan Seifert)++ | 2 files

[13:11] <Geth> ¦ rakudo/main: RakuAST: fix replacing package stub with multi-part name

[13:11] <Geth> ¦ rakudo/main: 

[13:11] <Geth> ¦ rakudo/main: In class A::B { ... }; class A::B { }; we need to replace the last

[13:11] <Geth> ¦ rakudo/main: symbol in the package chain. This means that

[13:11] <Geth> ¦ rakudo/main: partially-resolve-name-constant will actually resolve the full name and

[13:11] <Geth> ¦ rakudo/main: the list of remaining unresolved parts is empty.

[13:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a564ff379b

[13:53] *** dogbert11 left
[13:57] *** dogbert11 joined
[14:17] *** discord-raku-bot left
[14:18] *** discord-raku-bot joined
[14:30] *** dogbert11 left
[14:50] *** dogbert11 joined
[15:06] *** discord-raku-bot left
[15:06] *** discord-raku-bot joined
[15:16] *** NemokoschKiwi joined
[15:44] *** guifa_ joined
[15:46] *** guifa left
[16:00] <Geth> ¦ rakudo/main: ee983161d1 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[16:00] <Geth> ¦ rakudo/main: RakuAST: Support hypering of array indexing

[16:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ee983161d1

[16:00] <Geth> ¦ rakudo/main: 84fe050327 | (Stefan Seifert)++ | 3 files

[16:00] <Geth> ¦ rakudo/main: RakuAST: fix placeholder param decls clashing with explicit *%_ and *@_

[16:00] <Geth> ¦ rakudo/main: 

[16:00] <Geth> ¦ rakudo/main: A %_ in a code block without signature automatically declares a

[16:00] <Geth> ¦ rakudo/main: placeholder parameter. However if the block has a signature and %_ is

[16:00] <Geth> ¦ rakudo/main: already declared, we should just reference that. Otherwise we end up

[16:00] <Geth> ¦ rakudo/main: declaring the same symbol twice. Same for @_.

[16:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/84fe050327

[16:02] *** dogbert17 joined
[16:04] *** dogbert11 left
[16:08] <nine> > RAKUDO_RAKUAST=1 ./rakudo-m -Ilib -e 'INIT if True { }'

[16:08] <nine> When invoking 1 '', provided outer frame 0x3846be0 (2 '<unit>') does not match expected static frame 0x3846ce0 (3 '')

[16:08] <nine> Oh boy....

[16:32] <lizmat> is the -Ilib needed ?

[16:40] *** discord-raku-bot left
[16:40] *** discord-raku-bot joined
[16:44] <nine> no

[16:51] <[Tux]> Rakudo v2022.12-1-gd52342eb0 (v6.d) on MoarVM 2022.12-15-g6b456a6c0

[16:51] <[Tux]> csv-test-xs-20      0.406 -  0.421

[16:51] <[Tux]> csv-ip5xs           0.890 -  0.891

[16:51] <[Tux]> test-t --race       0.935 -  0.938

[16:51] <[Tux]> test-t              1.567 -  1.568

[16:51] <[Tux]> csv-parser          3.806 -  3.838

[16:51] <[Tux]> csv-ip5xs-20        5.523 -  5.696

[16:51] <[Tux]> test-t-20 --race    6.373 -  6.553

[16:51] <[Tux]> test                6.520 -  6.554

[16:51] <[Tux]> test-t-20          20.585 - 21.347

[16:55] <Xliff> What's the proper parameter target when the parameter is a literal value?

[16:55] <Xliff> Rather, the proper RakuAST Node

[16:56] <Xliff> So, I'm trying to create the RakuAST for: method a("me") { ... }

[16:56] <nine> Ah, I see the problem. We add the QAST for that if statement twice. Once as declaration and once as immediate block. I should actually call the declared block instead.

[17:10] <discord-raku-bot> <joelle> I screwed up - I was trying to clone the rakudo repo and I think I accidentally cloned it into the raku-community-modules org.  😦  I'm not a github expert, so I don't want to risk deleting the wrong thing, but I could probably use help to clean up my mess!

[17:11] <lizmat> did you push?

[17:12] <discord-raku-bot> <joelle> I cloned it in the github interface

[17:13] <discord-raku-bot> <joelle> I.E. https://github.com/raku-community-modules/rakudo

[17:15] <discord-raku-bot> <joelle> And by clone, I meant fork.  :/

[17:17] *** discord-raku-bot left
[17:17] *** discord-raku-bot joined
[17:20] <lizmat> then we just remove the fork ?

[17:21] <lizmat> fork removed

[17:21] <discord-raku-bot> <joelle> Thanks!

[17:26] <Geth> ¦ rakudo/main: a67c859846 | (Stefan Seifert)++ | src/Raku/ast/statementprefixes.rakumod

[17:26] <Geth> ¦ rakudo/main: RakuAST: fix INIT phasers as statement prefix

[17:26] <Geth> ¦ rakudo/main: 

[17:26] <Geth> ¦ rakudo/main: INIT phasers must not be thunky. Otherwise we end up creating a

[17:26] <Geth> ¦ rakudo/main: declaration block, but copying the statement QAST to the bind op instead

[17:26] <Geth> ¦ rakudo/main: of generating a call.

[17:26] <Geth> ¦ rakudo/main: 

[17:26] <Geth> ¦ rakudo/main: Fixes "When invoking 1 '', provided outer frame 0x3846be0 (2 '<unit>') does

[17:27] <Geth> ¦ rakudo/main: not match expected static frame 0x3846ce0 (3 '')" when trying:

[17:27] <nine> And with this the Telemetry module compiles!

[17:27] <Geth> ¦ rakudo/main: INIT if True { }

[17:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a67c859846

[17:29] <lizmat> Xliff: that commit only added RakuAST tests ?

[17:30] <Xliff> lizmat: The version hash I listed earlier is the earliest hash for the regression. Not the commit itself.

[17:32] <lizmat> so the regression is *before* that is what you're saying

[17:33] <Geth> ¦ rakudo: jmaslak++ created pull request #5163: Trivial filename correction in comment

[17:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5163

[17:33] <lizmat> perhaps 0baf2c0e4e453ca2c5e75cb5c7b22d4b6a72b298

[17:33] <Geth> ¦ rakudo/main: 169eb58c61 | (Joelle Maslak)++ (committed using GitHub Web editor) | src/Perl6/Optimizer.nqp

[17:33] <Geth> ¦ rakudo/main: Trivial filename correction in comment (#5163)

[17:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/169eb58c61

[17:35] <lizmat> Xliff: or ffc9fc74094778a6e0b115d84c8d8078276cf57d

[17:35] *** linkable6 left
[17:35] <lizmat> Xliff: could you try reverting that locally and see if it makes a difference?

[17:35] <lizmat> assuming you're using race/hyper in your parallel compilation ?

[17:38] *** linkable6 joined
[17:38] <lizmat> nine++   627 / 1355 passing !

[17:39] <Xliff> lizmat: No. Regression is *after* the listed version

[17:41] <Xliff> RakuAST Node Directory = https://gist.github.com/Xliff/b4741a42ab831a85be6f00f3e9b79528

[17:45] <lizmat> Xliff: weird, I only see RakuAST work *after* that commit :-(

[17:53] <Xliff> lizmat: OK. I'll chalk it up to environment. I'll try and run it again, tonight and see if I can replicate.

[17:53] <Xliff> Thanks.

[17:54] <lizmat> Xliff: those suggestions where *before* the commit you mentioned, so don't bother (I think)

[18:00] *** reportable6 left
[18:02] *** raku-discord joined
[18:02] *** reportable6 joined
[18:02] *** raku-discord left
[18:10] <lizmat> m: say Q| sub foo (42) { } |.AST.DEPARSE    # looks like there is some additional constraint somewhere

[18:10] <camelia> rakudo-moar 169eb58c6: OUTPUT: «sub foo (Int) {␤}␤␤»

[18:11] *** squashable6 left
[18:12] *** squashable6 joined
[18:16] *** codesections joined
[18:26] <Xliff> lizmat: Maybe a type object with a default value?

[18:33] *** NemokoschKiwi left
[18:39] <Xliff> m: use experimental :rakuast; RakuAST::Parameter.new(  value => 42  ).DEPARSE.say

[18:39] <camelia> rakudo-moar 169eb58c6: OUTPUT: «␤»

[18:39] <Xliff> Hmmm... Shouldn't that just return 42?

[18:40] <discord-raku-bot> <Nemokosch> not sure but still doesn't look right

[18:42] <Xliff> That's the only way I can see to do a Parameter literal in RakuAST

[18:42] <Xliff> Maybe missing a node?

[18:43] <Xliff> m: use experimental :rakuast; my $m = RakuAST::Parameter.lolokup('^DEPARSE'); $m.file.say; $m.line.say

[18:43] <camelia> rakudo-moar 169eb58c6: OUTPUT: «No such method 'lolokup' for invocant of type 'RakuAST::Parameter'␤  in block <unit> at <tmp> line 1␤␤»

[18:43] <Xliff> m: use experimental :rakuast; my $m = RakuAST::Parameter.lookup('^DEPARSE'); $m.file.say; $m.line.say

[18:43] <camelia> rakudo-moar 169eb58c6: OUTPUT: «No such method 'lookup' for invocant of type 'RakuAST::Parameter'␤  in block <unit> at <tmp> line 1␤␤»

[18:43] <Xliff> m: use experimental :rakuast; my $m = RakuAST::Parameter.^lookup('^DEPARSE'); $m.file.say; $m.line.say

[18:43] <camelia> rakudo-moar 169eb58c6: OUTPUT: «No such method 'file' for invocant of type 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[18:43] <Xliff> m: use experimental :rakuast; my $m = RakuAST::Parameter.^lookup('DEPARSE'); $m.file.say; $m.line.say

[18:43] <camelia> rakudo-moar 169eb58c6: OUTPUT: «src/Raku/ast/base.rakumod␤293␤»

[18:44] <Xliff> m: use experimental :rakuast; my $m = RakuAST::Parameter.^lookup('deparse'); $m.file.say; $m.line.say

[18:44] <camelia> rakudo-moar 169eb58c6: OUTPUT: «No such method 'file' for invocant of type 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[18:44] <discord-raku-bot> <Nemokosch> woah, I never knew the position in the source is exposed this simply

[18:44] <Xliff> Yup

[19:39] <lizmat> Xliff: won't have time to look at RakuAST::Parameter, but it looks like there's a *lot* missing in the deparsing

[19:39] <lizmat> hope I will have time before tomorrow, otherwise it'll be after tomorrow's weekly

[19:47] *** discord-raku-bot left
[19:52] <Xliff> lizmat: Fair enough

[19:52] <Xliff> I would try and make RakuAST::Parameter work with just the $!value, but I can't find our how it deparses.

[19:53] <Geth> ¦ rakudo: usev6++ created pull request #5164: [JVM] Add support for $?UNICODE-VERSION

[19:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5164

[19:53] *** raku-discord joined
[19:55] <Xliff> How DO RakuAST Nodes know how to deparse?

[20:08] <raku-discord> <5Nemokosch> by liz telling them to well moment

[20:09] <raku-discord> <5Nemokosch> https://github.com/rakudo/rakudo/blob/main/src/core.c/RakuAST/Deparse.pm6

[20:09] <raku-discord> <5Nemokosch> there is this file, for one

[20:13] *** raku-discord left
[20:13] *** discord-raku-bot joined
[20:21] *** squashable6 left
[20:22] *** squashable6 joined
[20:28] <Xliff> Nemokosch: OK, so it looks like what I need is here...

[20:28] <tellable6> Xliff, I'll pass your message to Nemokosch

[20:28] <Xliff> https://github.com/rakudo/rakudo/blob/main/src/core.c/RakuAST/Deparse.pm6#L574

[20:29] <discord-raku-bot> <Nemokosch> nice 👀

[20:29] <Xliff> And unfortunately, I see no emission of a where clause, or a default spec, or RakuAST::Parameter!value

[20:31] <discord-raku-bot> <Nemokosch> could be NYI

[20:33] <Geth> ¦ rakudo/main: 2e20149ab6 | (Stefan Seifert)++ | 2 files

[20:33] <Geth> ¦ rakudo/main: RakuAST: fix ::{$foo} indirect lookups

[20:33] <Geth> ¦ rakudo/main: 

[20:33] <Geth> ¦ rakudo/main: ::<whatever> is also just a PseudoStash accessor, so we treat it as that

[20:33] <Geth> ¦ rakudo/main: and not try to resolve an empty name.

[20:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2e20149ab6

[20:36] <Geth> ¦ rakudo/main: 49facdc03c | (Christian Bartolomäus)++ | src/vm/jvm/runtime/org/raku/rakudo/Binder.java

[20:36] <Geth> ¦ rakudo/main: [JVM] Fix defaults for typed optional @/% params

[20:36] <Geth> ¦ rakudo/main: 

[20:36] <Geth> ¦ rakudo/main: This intends to port 7148da1c61 to the JVM backend.

[20:36] <Geth> ¦ rakudo/main: 

[20:36] <Geth> ¦ rakudo/main: Please note the workaround for handling @deprecation during compilation

[20:36] <Geth> ¦ rakudo/main: of settings. I'm not really sure why this is needed, but I think that

[20:36] <Geth> ¦ rakudo/main: the problem arises from "sub DYNAMIC" having @deprecation as an

[20:36] <Geth> ¦ rakudo/main: optional parameter in src/core.c/stubs.pm6. For some reasons the check

[20:36] <Geth> ¦ rakudo/main: for gcx.Positional fails in that situation. My wild and vague guess

[20:36] <Geth> ¦ rakudo/main: would be that the check happens too early and some important pieces

[20:36] <Geth> ¦ rakudo/main: are still missing.

[20:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/49facdc03c

[20:58] *** sena_kun left
[21:07] *** Geth left
[21:07] *** Geth joined
[21:07] *** Geth left
[21:08] *** Geth joined
[21:41] <Geth> ¦ rakudo/main: 882d6a48b9 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[21:41] <Geth> ¦ rakudo/main: RakuAST: Actually run FIRST phasers

[21:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/882d6a48b9

[21:41] <nine> lizmat: ^^^

[21:42] <nine> Was rather easy after implementing INIT phasers today :)

[22:07] *** Geth left
[22:08] *** Geth joined
[22:12] *** Geth left
[22:12] *** Geth joined
[22:19] <Geth> ¦ infra/list-cloudflare-admins: 47cb6483a1 | (Coleman McFarland)++ | tools/list-cloudflare-users

[22:19] <Geth> ¦ infra/list-cloudflare-admins: Add script to list users and roles in Cloudflare

[22:19] <Geth> ¦ infra/list-cloudflare-admins: review: https://github.com/Raku/infra/commit/47cb6483a1

[22:20] <Geth> ¦ infra: dontlaugh++ created pull request #18: Add script to list users and roles in Cloudflare

[22:20] <Geth> ¦ infra: review: https://github.com/Raku/infra/pull/18

[22:20] *** Xliff left
[22:20] <discord-raku-bot> <Nemokosch> this is still traced apparently

[22:37] <Geth> ¦ Color: 2colours self-assigned clamping on colors should be done when the values are asked https://github.com/raku-community-modules/Color/issues/9

[23:30] *** epony left
[23:51] <Geth> ¦ rakudo/main: ac282b4fb1 | (Elizabeth Mattijsen)++ | t/12-rakuast/statement-phaser.rakutest

[23:51] <Geth> ¦ rakudo/main: Untodo now passing tests, nine++

[23:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ac282b4fb1

