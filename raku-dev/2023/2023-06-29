[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:09] *** codesections left
[00:14] *** MasterDuke joined
[01:14] *** linkable6 left
[01:14] *** evalable6 left
[01:15] *** linkable6 joined
[01:16] *** evalable6 joined
[02:40] *** patrickb left
[02:46] *** patrickb joined
[04:46] *** linkable6 left
[04:46] *** evalable6 left
[04:47] *** evalable6 joined
[04:48] *** linkable6 joined
[05:09] *** MasterDuke left
[05:10] *** MasterDuke left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:10] *** kurahaupo joined
[07:46] *** sena_kun joined
[08:26] *** sena_kun left
[08:34] *** kurahaupo left
[08:53] *** notable6 left
[08:53] *** statisfiable6 left
[08:53] *** bisectable6 left
[08:53] *** heartburn left
[08:54] *** bisectable6 left
[08:54] *** heartburn left
[08:55] *** rypervenche left
[08:56] *** heartburn joined
[08:57] *** rypervenche joined
[09:05] *** kurahaupo joined
[09:47] *** notable6 joined
[09:49] <Geth> ¦ rakudo/main: 9ccd3c374f | (Elizabeth Mattijsen)++ | src/core.e/Format.pm6
[09:49] <Geth> ¦ rakudo/main: Add Format.AST
[09:49] <Geth> ¦ rakudo/main: 
[09:49] <Geth> ¦ rakudo/main: Since Format isa Str, it already had an .AST method, but that would
[09:49] <Geth> ¦ rakudo/main: try to interpret the format string as Raku code, rather than as a
[09:49] <Geth> ¦ rakudo/main: sprintf format.  By adding this method, at least any confusion in
[09:49] <Geth> ¦ rakudo/main: that area is averted.
[09:49] <Geth> ¦ rakudo/main: 
[09:49] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>
[09:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9ccd3c374f
[09:49] *** statisfiable6 joined
[09:49] *** bisectable6 joined
[11:18] <Geth> ¦ rakudo/main: 5deb9eedec | (Elizabeth Mattijsen)++ | src/core.e/Formatter.pm6
[11:18] <Geth> ¦ rakudo/main: Streamline Formatter.str-(left|right)-justified
[11:18] <Geth> ¦ rakudo/main: 
[11:18] <Geth> ¦ rakudo/main: For up to 4% performance improvement and easier inlineability
[11:18] <Geth> ¦ rakudo/main: because of smaller bytecode footprint
[11:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5deb9eedec
[11:19] <lizmat> %-10s   1M times now 45x as fast as legacy sprintf
[11:27] <lizmat> was 43x
[11:50] <Geth> ¦ rakudo/main: 2e53c87237 | (Elizabeth Mattijsen)++ | src/core.e/Format.pm6
[11:50] <Geth> ¦ rakudo/main: Make zprintf actually produce correct values
[11:50] <Geth> ¦ rakudo/main: 
[11:50] <Geth> ¦ rakudo/main: Looks like I forgot to change the calling semantics of zprintf to
[11:50] <Geth> ¦ rakudo/main: Formatter.  Note: "zprintf" is a temporary invention to be able
[11:50] <Geth> ¦ rakudo/main: to use legacy sprintf and new Formatter based logic side-by-side
[11:50] <Geth> ¦ rakudo/main: in the same language version.
[11:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2e53c87237
[11:50] <lizmat> 	%-10s   1M times now 68x as fast as legacy sprintf!
[11:53] <lizmat> and now onto debugging the nitty gritty corner cases of sprintf
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:27] *** jgaz left
[12:32] *** jgaz joined
[12:38] *** jgaz left
[12:38] *** jgaz joined
[13:39] *** kurahaupo left
[13:42] *** kurahaupo joined
[13:47] *** finanalyst joined
[14:21] *** finanalyst left
[14:25] <kurahaupo> lizmat: That's a great improvement!
[15:24] <[Coke]> nice
[16:44] <[Tux]> Rakudo v2023.06-22-g2e53c8723 (v6.d) on MoarVM 2023.06-1-g63af27399
[16:44] <[Tux]> csv-test-xs-20      0.384 -  0.455
[16:44] <[Tux]> csv-ip5xs           0.836 -  0.839
[16:44] <[Tux]> test-t --race       0.958 -  1.007
[16:44] <[Tux]> test-t              1.340 -  1.394
[16:45] <[Tux]> csv-parser          4.201 -  4.268
[16:45] <[Tux]> csv-ip5xs-20        5.777 -  6.001
[16:45] <[Tux]> test                6.394 -  6.539
[16:45] <[Tux]> test-t-20 --race    6.411 -  6.671
[16:45] <[Tux]> test-t-20          20.691 - 22.105
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:17] <Geth> ¦ rakudo/lizmat-range-minmax: 0ea9740cdb | (Elizabeth Mattijsen)++ | src/core.c/Range.pm6
[18:17] <Geth> ¦ rakudo/lizmat-range-minmax: Make sub version of min/max/minmax on Ranges consistent
[18:17] <Geth> ¦ rakudo/lizmat-range-minmax: 
[18:17] <Geth> ¦ rakudo/lizmat-range-minmax: with the method equivalent.  Since "min" and "max" are attributes
[18:17] <Geth> ¦ rakudo/lizmat-range-minmax: on the Range object, they will *always* reflect the "left" and "right"
[18:17] <Geth> ¦ rakudo/lizmat-range-minmax: values in the Range (even for Ranges such as (10..-10).
[18:17] <Geth> ¦ rakudo/lizmat-range-minmax: 
[18:17] <Geth> ¦ rakudo/lizmat-range-minmax: There were no sub versions of min/max/minmax for Ranges, so they
[18:17] <Geth> ¦ rakudo/lizmat-range-minmax: <…commit message has 5 more lines…>
[18:17] <Geth> ¦ rakudo/lizmat-range-minmax: review: https://github.com/rakudo/rakudo/commit/0ea9740cdb
[18:17] <Geth> ¦ rakudo: lizmat++ created pull request #5300: Make sub version of min/max/minmax on Ranges consistent
[18:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5300
[18:26] *** sena_kun joined
[18:59] <Geth> ¦ rakudo/lizmat-rakuast-pointy: eac7313a80 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[18:59] <Geth> ¦ rakudo/lizmat-rakuast-pointy: RakuAST: allow → ↔ as unicode version of -> <->
[18:59] <Geth> ¦ rakudo/lizmat-rakuast-pointy: 
[18:59] <Geth> ¦ rakudo/lizmat-rakuast-pointy: As discussed on https://github.com/rakudo/rakudo/wiki/save-me-from-ASCII
[18:59] <Geth> ¦ rakudo/lizmat-rakuast-pointy: review: https://github.com/rakudo/rakudo/commit/eac7313a80
[18:59] <Geth> ¦ rakudo: lizmat++ created pull request #5301: RakuAST: allow → ↔ as unicode version of -> <->
[18:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5301
[19:25] <Geth> ¦ rakudo/lizmat-rakuast-fatarrow: 12eba1fd86 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[19:25] <Geth> ¦ rakudo/lizmat-rakuast-fatarrow: RakuAST: allow ⇒ as the unicode version of =>
[19:25] <Geth> ¦ rakudo/lizmat-rakuast-fatarrow: 
[19:25] <Geth> ¦ rakudo/lizmat-rakuast-fatarrow: As discussed on https://github.com/rakudo/rakudo/wiki/save-me-from-ASCII
[19:25] <Geth> ¦ rakudo/lizmat-rakuast-fatarrow: review: https://github.com/rakudo/rakudo/commit/12eba1fd86
[19:25] <Geth> ¦ rakudo: lizmat++ created pull request #5302: RakuAST: allow ⇒ as the unicode version of =>
[19:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5302
[19:59] <japhb> lizmat: Just read through save-me-from-ASCII.  Some (many, actually) don't make a lot of sense to me ... but oddly one of the ones that was already implemented and retracted I think I have a better use for.
[20:03] <japhb> In one of my research projects, I'm using ¿ as a prefix operator for strings to indicate that they are translatable in the context of UI elements and such, like: `my $hint = ¿'Select your preferred visual theme.';` where $hint now contains a TranslatableString object that Does The Right Thing when output into the UI.
[20:04] <japhb> I'm thinking of making (a slightly more advanced form of) it part of Terminal::Widgets, so that basic translateable string marking is always available out of the box.
[20:05] <japhb> s/marking/handling/
[22:08] *** sena_kun left
[23:17] *** kurahaupo left
