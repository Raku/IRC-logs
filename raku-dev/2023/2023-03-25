[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:05] <Geth> ¦ rakudo/rakuast-v5: bb0020077e | (Will Coleda)++ | src/Raku/Actions.nqp
[00:05] <Geth> ¦ rakudo/rakuast-v5: convert from adhoc exception
[00:05] <Geth> ¦ rakudo/rakuast-v5: 
[00:05] <Geth> ¦ rakudo/rakuast-v5: DRAFT: Doesn't work
[00:05] <Geth> ¦ rakudo/rakuast-v5: review: https://github.com/rakudo/rakudo/commit/bb0020077e
[00:07] <Geth> ¦ rakudo: coke++ created pull request #5237: convert from adhoc exception
[00:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5237
[00:08] <[Coke]> it KIND of works, which suprises me. :)
[00:17] <[Coke]> what is $*R in RAKUAST?
[02:05] *** linkable6 left
[02:05] *** evalable6 left
[02:07] *** linkable6 joined
[02:08] *** evalable6 joined
[03:20] *** lizmat_ joined
[03:23] *** lizmat left
[03:56] *** timo1 left
[04:01] *** timo1 joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:46] *** lizmat_ left
[07:46] *** lizmat joined
[08:08] *** lizmat left
[08:11] *** lizmat joined
[08:11] *** lizmat left
[08:26] *** sena_kun joined
[08:34] <nine> It's the $resolver that gets passed around
[08:42] <nine> [Coke]: why doesn't the old frontend need this trick? How does that manage to create the correct exception type?
[08:57] *** lizmat joined
[09:06] *** sena_kun left
[09:08] *** sena_kun joined
[09:19] *** lizmat left
[09:48] *** frost joined
[09:54] *** frost left
[10:36] *** frost joined
[10:37] *** frost left
[10:39] *** frost joined
[10:44] *** frost left
[10:48] *** ab5tract joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[15:12] *** timo1 left
[15:13] *** timo1 joined
[17:01] *** ab5tract left
[17:54] *** RakuIRCLogger joined
[17:58] *** RakuIRCLogger left
[17:59] *** RakuIRCLogger joined
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:03] *** lizmat joined
[19:19] <lizmat> m: our $a; $a := 42; dd OUR::<$a>; dd OUR::<$a>:exists
[19:19] <camelia> rakudo-moar e5e5acb41: OUTPUT: «Any $a = Any␤Bool::True␤»
[19:19] <lizmat> m: our $a; $a = 42; dd OUR::<$a>; dd OUR::<$a>:exists
[19:19] <camelia> rakudo-moar e5e5acb41: OUTPUT: «Int $a = 42␤Bool::True␤»
[19:20] <lizmat> either binding should work on "our" variables, or it should complain, it feels to me/
[19:20] <lizmat> m: say Q|our $a; $a := 42|.AST
[19:20] <camelia> rakudo-moar e5e5acb41: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::VarDeclaration::Simple.new(␤      scope => "our",␤      name  => "\$a"␤    )␤  ),␤  RakuAST::Statement::Expression.new(␤    expression => Raku…»
[19:21] <lizmat> m: say Q|our $a; $a := 42|.AST(:run)
[19:21] <camelia> rakudo-moar e5e5acb41: OUTPUT: «Cannot compile bind to RakuAST::Var::Lexical␤  in any IMPL-INFIX-COMPILE at src/Raku/ast/expressions.rakumod line 248␤  in any IMPL-EXPR-QAST at src/Raku/ast/expressions.rakumod line 731␤  in any IMPL-TO-QAST at src/Raku/ast/expressions.rakumod …»
[19:25] <lizmat> seems this is sorta fixed in RakuAST
[21:29] *** sena_kun left
[21:42] <[Coke]> nine: the old front end cheats it in World.
[21:43] <[Coke]> er:
[21:44] <[Coke]> Sorry, in the grammar.
[21:44] <[Coke]> ... I swear it was in $*W, when I did this the first time. Ok, will try again in the AST grammar, where I can avoid trigger the original adhoc error entirely.
[21:45] <[Coke]> nine: THank you, that was a good question.
[21:52] *** sena_kun joined
[22:16] <vrurg> [Coke]: I hit chicken-or-egg problem here. You need the CORE to use the right exception type. But the parser (either World or RakuAST) needs to know the current language before it can load the CORE.
[22:17] <vrurg> [Coke]: Therefore, by the time when `v5` the only solution is to pre-load CORE.c where the symbol is defined. But does it worth the effort?
[22:19] *** sena_kun left
[22:19] <vrurg> [Coke]: Eventually, turn out the only case where you can throw proper exception would be an EVAL _when_ it implements separate language version support for the EVAL'ed compunit.
[22:21] <vrurg> [Coke]: And the last thing, the wrong version error happens so early that there is basically no user code to catch the exception. Its only purpose is to be reported to the console. Then why not just die?
[22:31] <discord-raku-bot> <Nemokosch> there is that setting resolver thing
[22:32] <discord-raku-bot> <Nemokosch> almost like an injector
[22:39] <vrurg> The setting resolver would need the setting in first place. How does it know which one to load?
[22:39] <vrurg> Once again: yes, we can pre-load CORE.c,but does it worth the efforts after all?
[22:42] <discord-raku-bot> <Nemokosch> I mean, some symbols ẠRE loaded, right? Failure itself is often loaded.
[22:43] <discord-raku-bot> <Nemokosch> just like World.nqp could resolve symbols in the old system
[23:14] <vrurg> You miss the _key_ point: when `use vX` is parsed – it's the FIRST statement in a compunit. Nothing is loaded by then. Just plain nothing.
[23:15] <vrurg> Core setting is loaded only when we know compunit's version – i.e. no earlier than `use vX`, no later than the first non-version statement is encountered.
[23:17] <discord-raku-bot> <Nemokosch> I'd say what I miss is why all this matters now
[23:17] <discord-raku-bot> <Nemokosch> why is this suddenly the key? what is the goal?
[23:41] *** linkable6 left
[23:41] *** evalable6 left
[23:42] *** linkable6 joined
[23:42] *** evalable6 joined
