[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[03:23] *** squashable6 left
[03:23] *** sourceable6 left
[03:23] *** nativecallable6 left
[03:23] *** statisfiable6 left
[03:23] *** notable6 left
[03:23] *** greppable6 left
[03:23] *** shareable6 left
[03:23] *** committable6 left
[03:23] *** reportable6 left
[03:23] *** evalable6 left
[03:23] *** quotable6 left
[03:23] *** unicodable6 left
[03:23] *** bloatable6 left
[03:23] *** coverable6 left
[03:23] *** benchable6 left
[03:23] *** tellable6 left
[03:23] *** linkable6 left
[03:23] *** releasable6 left
[03:23] *** bisectable6 left
[03:23] *** tellable6 joined
[03:23] *** benchable6 joined
[03:23] *** greppable6 joined
[03:23] *** shareable6 joined
[03:23] *** sourceable6 joined
[03:23] *** nativecallable6 joined
[03:24] *** coverable6 joined
[03:24] *** releasable6 joined
[03:24] *** notable6 joined
[03:24] *** evalable6 joined
[03:24] *** reportable6 joined
[03:24] *** linkable6 joined
[03:25] *** statisfiable6 joined
[03:25] *** committable6 joined
[03:25] *** quotable6 joined
[03:25] *** bloatable6 joined
[03:25] *** unicodable6 joined
[03:25] *** bisectable6 joined
[03:25] *** squashable6 joined
[04:25] *** coverable6 left
[04:25] *** bloatable6 left
[04:25] *** shareable6 left
[04:25] *** notable6 left
[04:25] *** unicodable6 left
[04:25] *** quotable6 left
[04:25] *** sourceable6 left
[04:25] *** benchable6 left
[04:25] *** bisectable6 left
[04:25] *** releasable6 left
[04:25] *** tellable6 left
[04:25] *** squashable6 left
[04:25] *** evalable6 left
[04:25] *** greppable6 left
[04:25] *** nativecallable6 left
[04:25] *** statisfiable6 left
[04:25] *** committable6 left
[04:25] *** reportable6 left
[04:25] *** linkable6 left
[04:25] *** coverable6 joined
[04:26] *** statisfiable6 joined
[04:26] *** evalable6 joined
[04:26] *** shareable6 joined
[04:26] *** greppable6 joined
[04:27] *** quotable6 joined
[04:27] *** bloatable6 joined
[04:27] *** benchable6 joined
[04:27] *** notable6 joined
[04:27] *** reportable6 joined
[04:27] *** releasable6 joined
[04:27] *** sourceable6 joined
[04:27] *** committable6 joined
[04:27] *** bisectable6 joined
[04:28] *** linkable6 joined
[04:28] *** unicodable6 joined
[04:28] *** tellable6 joined
[04:28] *** nativecallable6 joined
[04:28] *** squashable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:02] *** nativecallable6 left
[07:02] *** releasable6 left
[07:02] *** committable6 left
[07:02] *** greppable6 left
[07:02] *** sourceable6 left
[07:02] *** bisectable6 left
[07:02] *** tellable6 left
[07:02] *** coverable6 left
[07:02] *** benchable6 left
[07:02] *** statisfiable6 left
[07:02] *** quotable6 left
[07:02] *** linkable6 left
[07:02] *** bloatable6 left
[07:02] *** evalable6 left
[07:02] *** squashable6 left
[07:02] *** unicodable6 left
[07:02] *** notable6 left
[07:02] *** reportable6 left
[07:02] *** shareable6 left
[07:02] *** committable6 joined
[07:02] *** sourceable6 joined
[07:03] *** releasable6 joined
[07:03] *** nativecallable6 joined
[07:03] *** tellable6 joined
[07:03] *** coverable6 joined
[07:03] *** benchable6 joined
[07:03] *** bloatable6 joined
[07:03] *** shareable6 joined
[07:04] *** reportable6 joined
[07:04] *** squashable6 joined
[07:04] *** quotable6 joined
[07:04] *** greppable6 joined
[07:04] *** unicodable6 joined
[07:04] *** notable6 joined
[07:04] *** bisectable6 joined
[07:04] *** evalable6 joined
[07:04] *** linkable6 joined
[07:04] *** statisfiable6 joined
[08:55] *** finanalyst joined
[09:11] *** finanalyst left
[09:39] *** |Tux| left
[09:45] *** |Tux| joined
[09:45] *** Tux__ joined
[09:50] *** Tux__ left
[10:33] <lizmat> notable6: weekly

[10:33] <notable6> lizmat, 1 note: 2023-09-15T21:41:39Z <melezhik>: https://dev.to/melezhik/sparrowci-has-moved-to-a-free-hosting-and-here-are-consequences-110o

[10:33] <lizmat> notable6: weekly reset

[10:33] <notable6> lizmat, Moved existing notes to “weekly_2023-09-18T10:33:51Z”

[10:40] *** finanalyst joined
[10:42] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/09/18/2023-38-new-search/

[11:17] <Geth> ¦ rakudo/main: a1a658abe6 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[11:17] <Geth> ¦ rakudo/main: RakuAST: some more <sym>s that don't need to be captured

[11:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a1a658abe6

[11:21] *** finanalyst left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[13:01] <Geth> ¦ rakudo/main: c4511e4cfb | (Elizabeth Mattijsen)++ | 2 files

[13:01] <Geth> ¦ rakudo/main: RakuAST: some backslash sequence streamlining

[13:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c4511e4cfb

[14:20] *** thundergnat joined
[14:27] *** thundergnat left
[15:48] <ugexe> i know i asked before, but does anyone see any optimizations that could be made to https://gist.github.com/ugexe/06469f5d3e06c6a6499ed9ceed814883 ?

[16:08] <japhb> Why do lines 7 and 8 have different placement of BEGIN?

[16:10] <japhb> It seems weird that lines 19-21 would be the fastest way to pad, since you can simply *calculate* how many bytes to add and then do that.

[16:11] <japhb> Lines 24-35 don't need all that -- you can write a 64-bit int using the endianess you desire as a single call.

[16:12] <japhb> Lines 44-48 could similarly be done with an endian-controlled read

[16:15] <japhb> Lines 62-72 should probably be broken into 4 separate loops to avoid the need for the ternary ladder

[16:16] <japhb> Are lines 83-91 actually faster than .base(16)?

[16:18] <japhb> (Or if you need to, a byteswap followed by a .base(16))

[16:20] <ugexe> the placements of BEGIN are different because one is mutable and one is not

[16:21] <ugexe> in the case of the mutable array, the begin comes after the = to ensure the default values are compile time values

[16:29] <ugexe> the `= BEGIN ...` does appear to be slower than just not using the BEGIN at all though :P

[18:00] *** reportable6 left
[18:01] <ab5tract> does anyone know why we use so many different formattings for implicitly created vars?  I see `__` prefixed ones (produced by Signature), `$` prefixed ones (produced in the process of assembling whatever codes), and bare names (produced by once).

[18:01] <tellable6> 2023-09-16T18:12:20Z #raku-dev <nine> ab5tract: sorry, I don't know anything about all about how state variables are implemented

[18:02] <ab5tract> since these implicits are available in the scope, maybe it would make sense to standardize?

[18:03] *** reportable6 joined
[18:26] <Geth> ¦ roast: 35456a1a68 | ab5tract++ | S02-types/whatever.t

[18:26] <Geth> ¦ roast: Add test for issue 5343

[18:26] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/35456a1a68

[18:33] <ab5tract> this is in preparation for the fix :)

[19:23] <ab5tract> what happens if a fix makes some tests fail that were invalidly passing in the first place?

[19:31] <ugexe> how old is the test? is the behavior it affects something someone has any likelyhood of depending on?

[20:12] <ab5tract> ugexe: good questions. in this case, it turns out to be a PEBKAC assumption of mine. it turns out I can't fix postfix whatevercode scoping without addressing prefix whatevercode scoping as well

[20:17] *** lizmat_ joined
[20:20] *** lizmat left
[21:27] *** rba left
[21:27] *** rba joined
[21:47] <Geth> ¦ rakudo: ab5tract++ created pull request #5385: RakuAST: Fix topic over-simplification in curried ApplyPostfix

[21:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5385

[22:59] *** lizmat_ left
[22:59] *** lizmat joined
