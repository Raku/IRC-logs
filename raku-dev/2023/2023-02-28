[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[04:20] *** Xliff joined
[04:21] <Xliff> Raku-GLib suite timing statistics for Raku 2023.02.17.g.95.e.0.a.1783

[04:21] <Xliff> Total number of projects: 33 (502933 loc)

[04:21] <Xliff> Total non-parallel compile times: 8706.870 (263.845 avg)

[04:21] <Xliff> Total parallel compile times: 1393.242 (42.219 avg) 6.249x speedup

[04:23] <Xliff> 4th best parallel time recorded since March 2022!

[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:47] *** Xliff left
[07:48] *** ab5tract left
[08:42] *** sena_kun joined
[09:41] <Geth> ¦ rakudo/main: 188beb5562 | (Elizabeth Mattijsen)++ | src/core.c/Range.pm6

[09:41] <Geth> ¦ rakudo/main: Return correct Bool for infinite ranges

[09:41] <Geth> ¦ rakudo/main: 

[09:41] <Geth> ¦ rakudo/main: Better fix for https://github.com/rakudo/rakudo/issues/5222

[09:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/188beb5562

[09:42] *** evalable6 left
[09:42] *** linkable6 left
[09:43] *** evalable6 joined
[09:44] *** linkable6 joined
[09:47] <discord-raku-bot> <Nemokosch> now that this is kind of a hot topic, let me throw this in https://github.com/rakudo/rakudo/issues/5143

[09:47] <discord-raku-bot> <Nemokosch> another elems issue

[09:53] <Geth> ¦ rakudo/main: 53135c8d37 | (Elizabeth Mattijsen)++ | src/core.c/Range.pm6

[09:53] <Geth> ¦ rakudo/main: Properly fix (1..*).Bool

[09:53] <Geth> ¦ rakudo/main: 

[09:53] <Geth> ¦ rakudo/main: Initially thinking about using self.Seq.head !=:= Nil, than decided

[09:53] <Geth> ¦ rakudo/main: to use the more direct .iterator.pull-one instead.  Means the value

[09:53] <Geth> ¦ rakudo/main: to check is IterationEnd, not Nil.

[09:53] <Geth> ¦ rakudo/main: 

[09:53] <Geth> ¦ rakudo/main: Should have written the tests first  :-(

[09:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/53135c8d37

[09:53] <Geth> ¦ roast: 040622c267 | (Elizabeth Mattijsen)++ | S02-types/range.t

[09:53] <Geth> ¦ roast: Add Range.Bool tests

[09:53] <Geth> ¦ roast: 

[09:53] <Geth> ¦ roast: Related to https://github.com/rakudo/rakudo/issues/5222

[09:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/040622c267

[10:32] <Geth> ¦ rakudo/main: e9f438f5aa | (Elizabeth Mattijsen)++ | 6 files

[10:32] <Geth> ¦ rakudo/main: RakuAST: add support for "our constant foo = 42"

[10:32] <Geth> ¦ rakudo/main: 

[10:32] <Geth> ¦ rakudo/main: - introduce RakuAST::VarDeclaration::Constant class

[10:32] <Geth> ¦ rakudo/main: - remove specific stopper from grammar

[10:32] <Geth> ¦ rakudo/main: - adapt type_declarator:sym<constant> accordingly

[10:32] <Geth> ¦ rakudo/main: - add deparsing / raku logic

[10:32] <Geth> ¦ rakudo/main: - add basic tests

[10:32] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e9f438f5aa

[10:33] <lizmat> sadly, didn't gain any additional tests

[10:35] *** nine_ left
[10:35] *** nine joined
[10:50] *** epony left
[10:51] *** epony joined
[10:56] *** epony left
[10:56] *** epony joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:10] *** ab5tract joined
[13:46] *** evalable6 left
[13:46] *** linkable6 left
[13:47] *** linkable6 joined
[13:49] *** evalable6 joined
[16:06] *** ab5tract left
[16:27] *** lizmat_ joined
[16:32] *** lizmat_ left
[16:33] *** lizmat_ joined
[16:36] *** committable6 left
[16:36] *** quotable6 left
[16:36] *** coverable6 left
[16:36] *** shareable6 left
[16:36] *** bisectable6 left
[16:36] *** lizmat left
[16:36] *** sjn left
[16:36] *** rypervenche left
[16:37] *** Xliff joined
[16:37] *** committable6 joined
[16:37] *** quotable6 joined
[16:37] *** coverable6 joined
[16:37] *** shareable6 joined
[16:37] *** bisectable6 joined
[16:37] *** sjn joined
[16:37] *** rypervenche joined
[16:46] *** lizmat_ left
[16:47] *** lizmat joined
[17:09] *** vrurg_ left
[17:10] *** vrurg joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:25] *** AlexDaniel joined
[18:25] *** epony left
[18:42] *** AlexDaniel left
[18:56] *** AlexDaniel joined
[18:57] <AlexDaniel> please feel free to file this performance ticket on my behalf: https://gist.github.com/AlexDaniel/d651dd9eb21df5ad94ccfa25af11d30e

[18:57] <AlexDaniel> (cuz I can't file tickets in rakudo)

[18:59] *** epony joined
[19:21] *** MasterDuke joined
[19:46] *** squashable6 left
[19:46] <discord-raku-bot> <Nemokosch> how would you like it to be converted into an actionable issue?

[19:48] *** squashable6 joined
[20:09] <Voldenet> if you're looking for optimization chance, bigger perf issue is that `for ^1000 { .WHERE.say };` will display different address every time

[20:10] <Voldenet> and this can be optimized without dealing with `Int` vs `int` problem

[20:10] <tonyo> i think he's looking to make the coerced types faster

[20:11] <tonyo> alex mentions there's obvious optimizations

[20:13] <Voldenet> probably there are some

[20:14] <Voldenet> but still I wish raku was able to reuse memory a bit more

[20:22] <MasterDuke> isn't the int vs uint different (in addition to int vs Int) something to look into? that might be lower hanging fruit

[20:23] <tonyo> that was the point of the gist, i think

[20:25] <[Coke]> doesn't surprise that a subset is less effective than a native in general.

[20:25] <MasterDuke> ah, but uint is a native. UInt is the subset

[20:26] <discord-raku-bot> <Nemokosch> > bigger perf issue is that for ^1000 { .WHERE.say }; will display different address every time however, in that case, you might actually have a fully-blown, writeable container

[20:27] <discord-raku-bot> <Nemokosch> while this is not an option with -> $i

[20:27] <[Coke]> (subset) oops

[20:28] <discord-raku-bot> <Nemokosch> yes, uint and int is strange the least to say...

[20:28] <[Coke]> yes, .WHERE can change

[20:29] <[Coke]> (even if it was the same variable each time with $i, it could still change then, depending on GC)

[20:29] <discord-raku-bot> <Nemokosch> when we talked about it a bit earlier, it really came as a surprise that we didn't get similar benchmarking results; then it turned out the big win only came with int

[20:31] <discord-raku-bot> <Nemokosch> the big question is - can we even inspect if a variable is int or uint?

[20:33] <MasterDuke> m: use nqp; say nqp::objprimspec(int); say nqp::objprimspec(uint)

[20:33] <camelia> rakudo-moar e9f438f5a: OUTPUT: «1␤10␤»

[20:35] <MasterDuke> fwiw, i believe the int v uint is something to do with iterating ranges

[20:35] <discord-raku-bot> <Nemokosch> m: my uint $asd; use nqp; say say nqp::objprimspec($asd)

[20:35] <discord-raku-bot> <Raku eval>  0 True 

[20:35] <discord-raku-bot> <Nemokosch> oops

[20:36] <discord-raku-bot> <Nemokosch> anyway, it's not really informative

[20:36] <MasterDuke> `my class IntRange does PredictiveIterator {` from src/core.c/Rakudo/Iterator.pm6:2115 might need looking into for a uint version

[20:39] <MasterDuke> and then figuring out how/when to use the new uint one instead

[21:05] *** Xliff_ joined
[21:07] *** Xliff left
[21:11] <Voldenet> >you might actually have a fully-blown, writeable container

[21:11] <Voldenet> I don't disagree, but this should be supported as a special case

[21:11] *** Xliff_ left
[21:12] <Voldenet> most loops just iterate over the collection

[21:13] <Voldenet> or other iterable, which could control how (and if) loops will allocate

[21:16] *** shmup left
[21:22] <discord-raku-bot> <Nemokosch> anyway, the situation is more fortunate when you predictably have a read-only variable

[21:38] <AlexDaniel> actually, my point is that in all cases the performance should be the same. Feel free to split it into different tickets but yeah.

[21:39] <AlexDaniel> just because you have a bigint somewhere doesn't mean that the performance can be more than 10x slower

[21:39] <AlexDaniel> bigints are not 10x slower themselves… or are they?

[21:42] <discord-raku-bot> <Nemokosch> well, I can very well imagine that with division they are...

[21:42] <AlexDaniel> press x to doubt :)

[21:43] <AlexDaniel> and, more importantly, it seems that if you fix the loop variable performance, then you might as well beat python in most simple tasks

[21:43] <AlexDaniel> adding more native ints in that example does improve anything, it's just the loops

[21:44] <AlexDaniel> does not*

[21:56] <discord-raku-bot> <Nemokosch> I mean it's sort of obvious that if you evaluate something many times, your mileage will vary more

[21:56] <AlexDaniel> ?

[21:57] <discord-raku-bot> <Nemokosch> "the loops" probably only serve as an amplifier

[22:12] *** shmup joined
[23:03] *** sena_kun left
[23:30] *** NemokoschKiwi joined
