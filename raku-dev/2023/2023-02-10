[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:36] <discord-raku-bot> <Nemokosch> t/spec/S09-multidim/XX-POS-on-dimensioned.t

[00:37] <discord-raku-bot> <Nemokosch> the special relevance of this test file is that apparently this is the one test that passed after my butchering of containers

[00:37] <discord-raku-bot> <Nemokosch> this is the one win

[00:37] <discord-raku-bot> <Nemokosch> it would be a bit longer to list the tests that broke, though

[00:42] <discord-raku-bot> <Nemokosch> but even this seems like a test that failed on the TAP somehow, and otherwise it would already work

[01:24] *** epony joined
[03:36] *** linkable6 left
[03:36] *** evalable6 left
[03:36] *** evalable6 joined
[03:38] *** linkable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:20] <Geth> ¦ rakudo/main: 67ba2dfcc8 | (Christian Bartolomäus)++ | tools/templates/jvm/Makefile.in

[06:20] <Geth> ¦ rakudo/main: [JVM] Set Xmx4G for building Rakudo

[06:20] <Geth> ¦ rakudo/main: 

[06:20] <Geth> ¦ rakudo/main: As explained in https://github.com/rakudo/rakudo/issues/5186 the

[06:20] <Geth> ¦ rakudo/main: compilation of blib/Perl6/BOOTSTRAP/v6c.jar failed with

[06:20] <Geth> ¦ rakudo/main: 

[06:20] <Geth> ¦ rakudo/main:   java.lang.OutOfMemoryError: Java heap space

[06:20] <Geth> ¦ rakudo/main: 

[06:20] <Geth> ¦ rakudo/main: otherwise. Hopefully we'll find a way to reduce the memory usage

[06:20] <Geth> ¦ rakudo/main: for that step, because 4 GB is quite an amount of memory. (And

[06:20] <Geth> ¦ rakudo/main: for instance, I could imagine, that we won't have that much memory

[06:20] <Geth> ¦ rakudo/main: for the CI builds.)

[06:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/67ba2dfcc8

[09:07] *** epony left
[09:37] <discord-raku-bot> <Nemokosch> eventually, I got back to getting errors... but this time it's an error actually related to the modification at least 🥺

[09:38] <discord-raku-bot> <Nemokosch> cannot do resolution on NQPMu

[09:39] *** codesections left
[09:44] <lizmat> that indicates something is not getting initialized  :-)

[09:46] <discord-raku-bot> <Nemokosch> so does that imply that the element exists at least? or could be that it's just downright missing?

[09:47] <discord-raku-bot> <Nemokosch> what I changed here is that I prepended an element for lookup, and consequently changed the indices by one

[09:48] <lizmat> ah, so the array of things to resolve may have had a "hole"

[09:48] <lizmat> ?

[09:48] <lizmat> if so, then that's what it's choking on, it currently doesn't support holes

[09:50] <discord-raku-bot> <Nemokosch> hmm, I don't know how if would have a hole. Everything is either pushed or not pushed

[09:50] <discord-raku-bot> <Nemokosch> so that's the one form of index mess-ups that shouldn't happen 🙂

[09:51] <discord-raku-bot> <Nemokosch> actually I'm gonna push this and make a draft PR so that it's easier to talk about it

[09:53] <lizmat> €oki

[09:53] <lizmat> *oki

[09:55] *** ab5tract joined
[10:04] <Geth> ¦ rakudo: 2colours++ created pull request #5196: Make & sigil defaults and types correct

[10:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5196

[10:04] <discord-raku-bot> <Nemokosch> so yes, the state of, khm khm, "art"

[10:18] *** ab5tract left
[10:31] <discord-raku-bot> <Nemokosch> > is (42)[*/2], 42, 'Indexing half way into one element list';

[10:31] <discord-raku-bot> <Nemokosch> by the way, I don't like this test case

[10:31] <discord-raku-bot> <Nemokosch> it doesn't (only) test what it says

[10:31] <discord-raku-bot> <Nemokosch> (42) is not a "one element list", is it

[10:32] *** sena_kun joined
[10:32] <discord-raku-bot> <Nemokosch> so it implicitly tests whether it successfully turns into one

[10:36] <lizmat> agree

[10:36] <lizmat> test probably preceded the GLR

[10:36] <lizmat> there was a time in Raku where (42) *was* a list

[10:36] <lizmat> I guess about 15+ years ago  :-)

[10:37] *** sena_kun left
[10:39] <discord-raku-bot> <Nemokosch> what is really crippling about the problem is that I can just keep running tests without modifying anything about Rakudo itself - and the output changes

[10:41] <lizmat> ?

[10:42] <discord-raku-bot> <Nemokosch> I'm running tests with the modifications I made

[10:42] <discord-raku-bot> <Nemokosch> and I can't even purposefully get the same output with the same executable on the same script that I got 30 minutes ago

[10:43] <discord-raku-bot> <Nemokosch> deleted .precomp folders, doesn't even seem to change anything

[10:43] <discord-raku-bot> <Nemokosch> the same thing works now, previously it didn't for the exact same amount of time

[10:43] <lizmat> hmmm..  yeah, there's still some gremlins with precomp and dependency checking atm

[10:44] <lizmat> I routinely do a "make clean" before rebuilding

[10:44] <lizmat> and when I go back to a previous compilation-id, I make sure I run 'cleanup-precomp' first

[10:46] <nine> Nemokosch, RakuAST::VarDeclaration::Simple is not the only ContainerCreator

[10:47] <nine> Oh, but Signature doesn't do any lookups.

[10:49] <discord-raku-bot> <Nemokosch> That's a good point regardless

[10:49] <discord-raku-bot> <Nemokosch> At this point I'm happy for any idea that doesn't involve chasing a heisenbug

[11:11] *** ab5tract joined
[11:19] <ab5tract> nine: nope, it doesn't seem to be related to the $whatevercode_arg being a contvar

[11:20] <ab5tract> this is so ... annoying in a way that catches my attention lol

[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:03] <Geth> ¦ rakudo/main: e67941e9f1 | (Elizabeth Mattijsen)++ | src/Raku/ast/variable-declaration.rakumod

[12:03] <Geth> ¦ rakudo/main: Lose an unneeded level of indentation

[12:03] <Geth> ¦ rakudo/main: 

[12:03] <Geth> ¦ rakudo/main: No functional changes, just something found while checking out stuff

[12:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e67941e9f1

[12:12] <Geth> ¦ rakudo/main: d8d34a12dc | (Elizabeth Mattijsen)++ | src/Raku/ast/variable-declaration.rakumod

[12:12] <Geth> ¦ rakudo/main: Remove some dead code

[12:12] <Geth> ¦ rakudo/main: 

[12:12] <Geth> ¦ rakudo/main: And rearrange some other to make it more DRY

[12:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d8d34a12dc

[12:46] *** ab5tract left
[14:27] *** ab5tract joined
[14:33] <ab5tract> nine: when you have some tuits, I'd really appreciate your eyes on this QAST again: https://gist.github.com/ab5tract/144c33cb39615bf481abed638f66a6a5

[14:35] <ab5tract> Other than 'contvar' versus 'var', I can't  tell any difference. Though we've established that I'm not the most qualified one to make that claim ;)

[14:44] <nine> If the generated code is ok, then the difference is likely in the meta object

[14:45] <discord-raku-bot> <Nemokosch> the hard lesson

[14:46] <discord-raku-bot> <Nemokosch> QAST is still indeed "abstract", the semantics seems to come from the metamodel quite often

[14:46] <discord-raku-bot> <Nemokosch> used to think QAST was "everything"

[14:51] *** ab5tract left
[15:03] <Geth> ¦ rakudo/main: d20bea564b | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[15:03] <Geth> ¦ rakudo/main: RakuAST: fix using curried expressions as where clauses on parameters

[15:03] <Geth> ¦ rakudo/main: 

[15:03] <Geth> ¦ rakudo/main: Curried expressions are not Code objects but they actually code-gen to

[15:03] <Geth> ¦ rakudo/main: blocks, so there's no need to wrap them in blocks again.

[15:03] <Geth> ¦ rakudo/main: 

[15:03] <Geth> ¦ rakudo/main: ab5tract++ for discovering

[15:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d20bea564b

[15:04] <nine> ab5tract: ^^^ will be useful in your tests

[15:04] <tellable6> nine, I'll pass your message to ab5tract

[15:05] *** ab5tract joined
[15:08] <lizmat> QAST *could* be everything, but that's simply not very practical

[15:08] <Geth> ¦ rakudo/main: 46fc663eed | (Elizabeth Mattijsen)++ | 2 files

[15:08] <Geth> ¦ rakudo/main: Properly initialize our variables without initialization

[15:08] <Geth> ¦ rakudo/main: 

[15:08] <Geth> ¦ rakudo/main: Transfer all of the complicated logic for this to a new

[15:08] <Geth> ¦ rakudo/main: Stash.VIVIFY-KEY implementation-detail method.

[15:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/46fc663eed

[15:09] <lizmat> sadly, no new tests passing

[15:10] <nine> My commit fixed 2 tests. Did you notice that more than half of the spectests now pass? :)

[15:14] <[Coke]> woot

[15:15] <japhb> \o/

[15:15] *** ab5tract left
[15:36] <nine> Oh wait...half is at 677, we're at 672. But I guess it's just one more weekend.

[15:49] <discord-raku-bot> <Nemokosch> I can't wait for the weekend to begin 🎶

[15:56] <shmup> i just learned about https://en.wikipedia.org/wiki/POETS_day

[16:01] *** ab5tract joined
[16:13] <ab5tract> I guess I don't understand how the problem could be "in the metaobject" .. to which I assume is meant "in SubsetHOW"

[16:13] <tellable6> 2023-02-10T15:04:13Z #raku-dev <nine> ab5tract: ^^^ will be useful in your tests

[16:16] <lizmat> nine: the order in which declarations are codegenned seems wrong

[16:16] <lizmat> causing $?PACKAGE not to be set until *after* it is needed to initialize any "our" variables

[16:16] <lizmat> so it's taking the wrong one in the case of:

[16:16] <lizmat> our $a; package M { our $a }  # <-- still referring to the outer one

[16:26] <ab5tract> lizmat: Interesting. I wonder if this is also the cause of my issue with 'my' scoped subsets still being visible outside of the module they are declared in

[16:30] <ab5tract> though it's kind of the reverse of your problem

[16:31] <lizmat> well,  I can't seem to find where the declarations of a block are being codegenned

[16:51] <ab5tract> maybe via signature.rakumod?

[16:52] <ab5tract> well, that's where some of the block's declarations come from at least

[17:04] <[Coke]> Any thoughts on github's new "merge queue" functionality? https://github.blog/changelog/2023-02-08-pull-request-merge-queue-public-beta/

[17:19] <lizmat> sounds pretty interesting

[17:33] *** melezhik joined
[17:42] *** melezhik left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:11] *** sena_kun joined
[19:10] * lizmat just realized that all $?PACKAGE lookups should be run-time, rather than compile time

[19:10] <lizmat> *especially* if the RakuAST is built by hand

[19:24] <[Coke]> is it true that $*W is going away once AST is complete?

[19:24] <lizmat> yes

[19:24] <[Coke]> ok. Updating https://github.com/Raku/doc/issues/3050

[19:25] <lizmat> $*W is the Perl6::World object, and there is no Raku::World

[19:35] *** epony joined
[20:42] <nine> [Coke]: I don't think our repo is busy enough to warrant that feature

[20:43] <nine> [Coke]: $*W was never meant to be a public API. Documenting it would have been a disservice

[20:50] <nine> ab5tract: don't you mean $!where.IMPL-CURRIED.meta-object?

[20:50] <nine> in line 542

[20:52] <discord-raku-bot> <Nemokosch> the world is going away...

[20:52] <discord-raku-bot> <Nemokosch> 🙀

[21:05] <nine> I am SO gonna play The Day The World Went Away when we remove the old compiler frontend

[21:07] <discord-raku-bot> <Nemokosch> I'd rather stay away from this Supply semantics issue on GH, but the question seems appropriate...

[21:07] <discord-raku-bot> <Nemokosch> so, what happens if it turns out that roast was basically wrong?

[21:08] <discord-raku-bot> <Nemokosch> it sounded kinda like there was a test for an implementation detail and therefore something that should be just okay is a "breaking change" all of a sudden

[21:11] <ab5tract> nine: That does seem to make the guard work!

[21:12] <ab5tract> Unfortunately, now there's breakage for all of the clauses that _do_ get wrapped

[21:12] <ab5tract> I gues because ApplyPostfix *also* curries

[21:14] <nine> Nemokosch, roast has been wrong often before. We fix the bug in the test and that's that. Probably add a ChangeLog entry. After all the official branch for current 6.d is 6.d-errata

[21:15] <nine> ab5tract: but that shouldn't matter? If it's curried, we need that block and will get it from IMPL-CURRIED.

[21:16] <nine> It should probably be $!where.IMPL-CURRIED ?? $!where.IMPL-CURRIED.meta-object !! $!where.compile-time-value

[21:16] <nine> Otherwise you'll get a "unknown method meta-object on object of type Bool"

[21:24] <ab5tract> yeah, was getting that but understood it for the wrong reason

[21:25] <ab5tract> nine: well, that last change is it!

[21:25] <ab5tract> everything is passing except for 'module M { my subset F where 5 }; my M::F $f = 5'

[21:26] <ab5tract> ^ that one still succeeds, where it should fail

[21:29] <ab5tract> tried all I could thin of over the week to fix it but couldn't find a fix so far

[21:29] <nine> Before you think of fixes, why does it even fail?

[21:29] <nine> or unexpectedly succeed in this case

[21:31] <ab5tract> IIUC, it fails because the grammar calls resolve-name to determine if a type is defined. that somehow finds F, even though that F is my scoped

[21:31] <[Coke]> nine: the only documentation I was considering was marking it as an implementation detail somewhere. Probably on the rakudo wiki, not the raku/docs

[21:31] <nine> But why does it find it?

[21:31] <ab5tract> *my scoped inside of a module

[21:32] <[Coke]> but maybe add to raku/docs something more explicit about implementation details and why you should check to see if something's official if you're not sure.

[21:33] <ab5tract> because it is installed lexically inside the module?

[21:33] <nine> Btw. keep in mind that for subset the timing of the BEGIN handler will be different than for packages which you share that declaration code with

[21:34] <nine> If it's installed lexically inside the module, the resolver won't find it outside the module. There are few things you can rely on, but that the resolver keeps the boundaries of lexical scopes is one of them.

[21:34] <nine> If it's visible outside that scope, it's because it's declared outside that scope.

[21:36] <ab5tract> hmmm... in the QAST output I see that for the default 'our' scoped subset in a module, the lexical declaration is only inside that module. 

[21:39] <ab5tract> but the output looks the same to me vs a 'my' subset

[21:40] <ab5tract> (this is in the QAST from the old frontend)

[21:46] <ab5tract> Honestly, I have no idea why it finds it. As you say, it shouldn't be found given that the resolver shouldn't find it from outside the module

[21:47] *** sena_kun left
[21:50] <nine> Probably useful to know: there are 2 different declarations made for lexicals. One is via the resolver's declare-lexical method, this is just to let the compiler know about this lexical. The other is the RakuAST::Declaration node, this is responsible for generating the QAST.

[21:53] <nine> nqp::gethllsym('nqp', 'note')($resolver.current-scope.HOW.name($resolver.current-scope.dump); in IMPL-INSTALL-SUBSET might shine a light on what's going on

[21:54] <nine> Err... nqp::gethllsym('nqp', 'note')($resolver.current-scope.dump);

[21:54] <ab5tract> ah... so should I also be saving the current scope at attach time?

[21:55] <ab5tract> let me actually run what you've suggested

[21:58] <ab5tract> 'lang-call cannot invoke object of type 'VMNull' belonging to no language'

[21:59] <nine> Have you not added nqp::bindhllsym('nqp', 'note', &note); to nqp/src/core/IO.nqp?

[22:06] <ab5tract> I just did, but somethings is still wrong. I did a 'make clean' in between but that change still wasn't picked up. What's the difference between this nqp note and nqp say?

[22:07] <ab5tract> the Raku ones only differ in whether the output goes to STDOUT vs STDERR

[22:08] <nine> The differerence is that in bootstrap NQP's setting is not available and this thing is the most reliable way I've found to just print a darn thing regardless of where I'm adding it

[22:08] <ab5tract> with nqp::say($resolver.current-scope.dump) I get 'Block\n\tBlockoid\n\t\tStatmentList'

[22:09] <ab5tract> I wish I couild say that this cleared it up for me but ...

[22:11] <ab5tract> that could be any Block

[22:11] <ab5tract> including the one in the module M where the QAST of my lexical declaration lives

[22:13] <nine> There aren't that many blocks in that program when you look at the --target=ast output. Actually I think it's the module's body block. Why is it empty though you might ask. The answer would be $package.replace-body: $body; in method package_def, i.e. we first assemble the whole body and then replace the default empty body on a package.

[22:16] <nine> An equally good answer would be that that block doesn't actually contain anything yet because your example program would only add that subset and the BEGIN handler is called before we attach that Subset node to the StatementList

[22:18] <nine> In any case, sprinkling everything with tons of debug output is my usual approach for this :D

[22:18] <ab5tract> lol

[22:18] <ab5tract> been there earlier in the week

[22:18] <nine> entering package scope for M

[22:18] <nine> RakuAST::Block Block

[22:18] <nine> So yes, we should be inside the package

[22:20] <ab5tract> I mean, everything looks gravy to me. The QAST output resembles the old frontend output

[22:20] <ab5tract> The old frontend QAST looks exactly the same whether you do a 'my' or an 'our' subset

[22:20] <nine> I think the QAST is fine. It's the resolver that's got wrong information

[22:20] <ab5tract> which was what made me suspect s bug in the resolver

[22:20] <nine> Not a but in the resolver. Nine's debugging lemma #1: the bug is always in your own code

[22:22] <nine> Oh, wait a minute. my M::F $f = 5, that's not a lexical lookup, it's looking in the package

[22:23] <ab5tract> m: module M { my subset F where 5 }; my M::F $f = 5

[22:23] <camelia> rakudo-moar 46fc663ee: OUTPUT: «===SORRY!===␤Type 'M::F' is not declared␤at <tmp>:1␤------> odule M { my subset F where 5 }; my M::F⏏ $f = 5␤Malformed my␤at <tmp>:1␤------> module M { my subset F where 5 }; my M::⏏F $f = 5␤␤»

[22:24] <ab5tract> nine: Right, I should have answered your original question differently.. It looks through the package and finds the subset in the package stash

[22:26] <ab5tract> where I don't see how it does any distinction of whether what the resolver finds something that should actually be "visible" to the scope or not

[22:26] <nine> The subset shouldn't _be_ in the package stash in the first place. After all it's lexically scoped

[22:26] <ab5tract> erm, that sentence is a bit broken, please let me know if you'd like clarification

[22:28] <ab5tract> but it is package-like

[22:28] <ab5tract> it has to steal the .WHO of a stubbed package

[22:28] <nine> We enter the if $scope eq 'our' at the end of IMPL-INSTALL-SUBSET!

[22:30] <nine> Err....I don't think the actions ever tell the subset how it's scoped, so it'll fall back to the default which is our

[22:32] <ab5tract> now that is an excellent point

[22:34] <ab5tract> is that always available in $*SCOPE?

[22:37] <nine> Actually I think it is told, but that's too late for your BEGIN handler

[22:37] <nine> Yes, $*SCOPE should be it

[22:38] <nine> Ah, no it's not told. Blocks have special handling for that and packages. You're gonna need that, too

[22:50] <ab5tract> ... I can't believe that that was it, the whole time

[22:51] <ab5tract> All my test cases are currently passing.

[22:51] <ab5tract> Time to run against spectest and see if I solved anything there. what count are we at,currently?

[22:52] <ab5tract> from the regular tests, I made exactly one subtest pass.. hooray!

[22:58] <ab5tract> The exception doesn't 100% match. My output now doesn't mention "Type M::F is not declared", it just jumps straight to 'malformed my

[22:59] <ab5tract> 'but other than that one discrepancy, we seem to eqiual the base behavior \o/

[23:05] <ab5tract> anyway, my run says 696 passing spectest files

[23:08] <ab5tract> sleep&

[23:10] <ab5tract> nine++ for helping me through the last two hurdles.

[23:10] <ab5tract> much less complicated than I was making them in my investigations

