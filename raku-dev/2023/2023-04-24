[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:46] *** japhb joined
[03:28] *** linkable6 left
[03:28] *** statisfiable6 left
[03:28] *** notable6 left
[03:28] *** bisectable6 left
[03:28] *** committable6 left
[03:28] *** evalable6 left
[03:28] *** tellable6 left
[03:28] *** nativecallable6 left
[03:28] *** greppable6 left
[03:28] *** shareable6 left
[03:28] *** sourceable6 left
[03:28] *** unicodable6 left
[03:28] *** releasable6 left
[03:28] *** benchable6 left
[03:28] *** coverable6 left
[03:28] *** reportable6 left
[03:28] *** quotable6 left
[03:28] *** squashable6 left
[03:28] *** bloatable6 left
[03:28] *** sourceable6 joined
[03:29] *** statisfiable6 joined
[03:29] *** squashable6 joined
[03:29] *** releasable6 joined
[03:29] *** shareable6 joined
[03:29] *** benchable6 joined
[03:29] *** linkable6 joined
[03:29] *** greppable6 joined
[03:29] *** unicodable6 joined
[03:30] *** evalable6 joined
[03:30] *** bisectable6 joined
[03:30] *** tellable6 joined
[03:30] *** coverable6 joined
[03:31] *** nativecallable6 joined
[03:31] *** quotable6 joined
[03:31] *** reportable6 joined
[03:31] *** notable6 joined
[03:31] *** bloatable6 joined
[03:31] *** committable6 joined
[04:58] *** Xliff left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:06] *** reportable6 left
[07:06] *** greppable6 left
[07:06] *** nativecallable6 left
[07:06] *** unicodable6 left
[07:06] *** statisfiable6 left
[07:06] *** coverable6 left
[07:06] *** shareable6 left
[07:06] *** bloatable6 left
[07:06] *** committable6 left
[07:06] *** evalable6 left
[07:06] *** bisectable6 left
[07:06] *** sourceable6 left
[07:06] *** squashable6 left
[07:06] *** tellable6 left
[07:06] *** quotable6 left
[07:06] *** linkable6 left
[07:06] *** releasable6 left
[07:06] *** quotable6 joined
[07:06] *** shareable6 joined
[07:07] *** linkable6 joined
[07:07] *** coverable6 joined
[07:07] *** unicodable6 joined
[07:07] *** bloatable6 joined
[07:07] *** greppable6 joined
[07:08] *** committable6 joined
[07:08] *** evalable6 joined
[07:08] *** reportable6 joined
[07:08] *** squashable6 joined
[07:08] *** bisectable6 joined
[07:09] *** sourceable6 joined
[07:09] *** releasable6 joined
[07:09] *** nativecallable6 joined
[07:09] *** statisfiable6 joined
[07:09] *** tellable6 joined
[07:52] *** sena_kun joined
[08:41] *** ab5tract left
[08:55] *** epony left
[08:55] <Geth> ¦ rakudo/main: 6235256a56 | (Elizabeth Mattijsen)++ | 3 files

[08:55] <Geth> ¦ rakudo/main: RakuAST: add a lot of scaffolding for handling pod

[08:55] <Geth> ¦ rakudo/main: 

[08:55] <Geth> ¦ rakudo/main: - add RakuAST::Doc::Paragraph.from-string method

[08:55] <Geth> ¦ rakudo/main:   This will parse the given string for X<> markup sequences and

[08:55] <Geth> ¦ rakudo/main:   process them into the proper RakuAST::Doc::Markup hierarchy.

[08:55] <Geth> ¦ rakudo/main:   This will replace the cumbersome process in the legacy grammar

[08:55] <Geth> ¦ rakudo/main:   which created a Match object for *every* *single* character in

[08:55] <Geth> ¦ rakudo/main: <…commit message has 8 more lines…>

[08:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6235256a56

[09:12] <lizmat> tonyo: looks like fez upload is not indexing any modules anymore, for possibly 4 days already

[09:13] * lizmat just uploaded 0.17 of String::Utils, and it hasn't appeared

[09:14] <lizmat> a new install will install 0.16 of the module

[09:48] *** sena_kun left
[11:25] *** epony joined
[11:44] <nine> Btw. I'm surprised that in all the discussion around defined vs. undefined List and .elems, no one has brought up that being able to call .elems on any object as if it was a list is quite odd.

[11:45] <nine> Without this design decision List could easily have a method elems(List:U:) returning 0

[11:47] *** ab5tract joined
[11:49] <discord-raku-bot> <Nemokosch> I think at some point, it was a spelt-out design paradigm to "deliberately mistake single items for one-element lists" (it was expressed something like this)

[11:55] <discord-raku-bot> <Nemokosch> Any delegates basically the complete interface of a List https://docs.raku.org/type/Any

[11:59] <discord-raku-bot> <Nemokosch> and as things stand, this backs up most listy calls of Buf and Blob

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:26] <ab5tract> nine: did you encounter this while working on $?PACKAGE?

[12:26] <ab5tract> m: module M {}; dd GLOBAL::.kv; dd ::("GLOBAL")::.kv; dd $?PACKAGE::.kv

[12:26] <camelia> rakudo-moar 6235256a5: OUTPUT: «("M", M).Seq␤()␤()␤»

[12:27] <ab5tract> is it fair for me to expect that these would be equivalent?

[12:44] <MasterDuke> hm, the fails in https://github.com/MoarVM/MoarVM/pull/1745/checks seem like they might not be related to the PR. but i don't like the sheer number of them...

[12:51] <nine> ab5tract: looks fishy

[12:59] <ab5tract> m: module M { module N {}}; GLOBAL::.values.map: { dd $_::.kv };

[12:59] <camelia> rakudo-moar 6235256a5: OUTPUT: «()␤»

[13:01] <nine> I'm not sure about $_:: doing what you think it's doing

[13:01] <nine> same for $?PACKAGE:: btw

[13:02] <nine> The latter may be interpreted as a lookup in a package called "PACKAGE" with sigil and twigil getting added

[13:02] <nine> or maybe even dropped

[13:04] <ab5tract> My only conscious assumption here is that a trailing '::' is the way to get to the stash

[13:04] <ab5tract> m: module M { module N {}}; GLOBAL::.values.map: { dd ::($_.^name)::.kv };

[13:04] <camelia> rakudo-moar 6235256a5: OUTPUT: «()␤»

[13:04] <ab5tract> m: module M { module N {}}; GLOBAL::.keys.map: { dd ::($_)::.kv };

[13:04] <camelia> rakudo-moar 6235256a5: OUTPUT: «()␤»

[13:10] <ab5tract> if I'm just holding it wrong, than I apologize for wasting time. but it seems to me that there should be some way to access a stash when given either a type object or a package name

[13:10] <nine> .WHO

[13:11] <nine> m: module M {}; dd GLOBAL::.kv; dd ::("GLOBAL").WHO.kv; dd $?PACKAGE.WHO.kv

[13:11] <camelia> rakudo-moar 6235256a5: OUTPUT: «("M", M).Seq␤("M", M).Seq␤("M", M).Seq␤»

[13:12] <nine> Sorry, took me a while to remember this even though I've used it a hundred times during development and debugging...

[13:14] <ab5tract> No worries

[13:14] <ab5tract> I think somewhere in the docs it suggests that a trailing '::' is equivalent to a call to .WHO

[13:15] <ab5tract> I guess it's just unclear to me whether the discrepancy is by design or not

[13:15] <ab5tract> thanks for giving me the fix though :)

[13:16] <nine> The trailing :: is part of the name. .WHO is a macroish call on an object

[13:19] <ab5tract> right, but even when I go into "name-mode" with ::($module-name)::, it doesn't DWIM

[13:21] <ab5tract> If '::' were unimplemented at the moment, I would probably make it an infix that dispatches the RHS on the .WHO of the LHS

[13:22] <ab5tract> but that's probably difficult for the parser because '.kv' already means dispatch-on-the-topic variable

[13:23] *** jgaz joined
[14:14] <lucs> nine: When you mentioned "with sigil and twigil getting added", I thought to myself "Hmm... Isn't a sigil a one character prefix and a twigil, a two-character one?"

[14:14] <lucs> So I went to the docs, and no, your usage was correct.

[14:15] <lucs> Otherwise, we would have needed to for example talk about the '$*', '@*', '%*', and '&*' twigils to refer to dynamic variables instead of just the '*' twigil.

[14:15] <lucs> So my mind stands corrected.

[14:20] <nine> I can say that the whole RakuAST implementation effort has been highly educational so far :)

[14:39] <lizmat> also, I wouldn't be surprised if the new pod grammar would be orders of magnitude faster than the current one

[14:41] <nine> We're gonna need a bit of a speedup since right now compilation is about twice as slow :D

[14:45] <lizmat> I hope to be able to rip out the old pod parts from the new grammar

[14:45] <lizmat> this week

[14:46] <lizmat> and then we'll know

[14:46] <lizmat> although I don't think it will matter for any code without pod much

[14:46] <lizmat> such as the setting

[14:46] <nine> Well I'm not surprised that we are much slower as compilation performance has not been a priority and there is some low hanging giant fruit

[15:08] *** [Coke] left
[16:03] *** epony left
[16:55] <lizmat> PSA: module developer: any dist upload to fez after Wed, 19 Apr 2023 17:34:36 GMT have silently gone into a black hole

[16:56] <lizmat> uploads are now working again: any tar files will need to be uploaded again to get published

[17:40] <japhb> lizmat: What actually broke?

[17:40] <lizmat> tonyo can tell

[17:40] <japhb> Ah, fair enough

[17:43] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/04/24/2023-17-releaseperiod/

[17:44] <lizmat> is there some kind of holiday in the States today?

[17:44] <lizmat> or is everybody celebrating Tucker Carlson's breakup with Fox News ?

[17:51] *** sena_kun joined
[17:52] <nine> lizmat: typo: "will by hybrid"

[17:52] <lizmat> thanks fixed!

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:02] <japhb> lizmat: No US holiday that I'm aware of.

[18:03] <nine> yet

[18:04] <lizmat> :-)

[19:04] <tonyo> japhb: i put in a corruption check and i think something is wrong with the library i used for the lambda

[19:04] <tonyo> apologies for the delay fixing, have been travelling for a while

[19:29] *** linkable6 left
[19:29] *** evalable6 left
[19:29] *** linkable6 joined
[19:31] *** evalable6 joined
[19:55] *** [Coke] joined
[21:09] *** sena_kun left
[21:16] *** jgaz left
[22:59] *** linkable6 left
[22:59] *** evalable6 left
[22:59] *** evalable6 joined
[23:00] *** linkable6 joined
[23:30] *** jgaz joined
