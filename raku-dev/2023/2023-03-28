[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[01:13] *** shareable6 left
[01:13] *** greppable6 left
[01:13] *** benchable6 left
[01:13] *** bisectable6 left
[01:13] *** bloatable6 left
[01:13] *** squashable6 left
[01:13] *** nativecallable6 left
[01:13] *** unicodable6 left
[01:13] *** statisfiable6 left
[01:13] *** linkable6 left
[01:13] *** evalable6 left
[01:13] *** notable6 left
[01:13] *** coverable6 left
[01:13] *** releasable6 left
[01:13] *** reportable6 left
[01:13] *** committable6 left
[01:13] *** tellable6 left
[01:13] *** quotable6 left
[01:13] *** sourceable6 left
[01:13] *** committable6 joined
[01:14] *** benchable6 joined
[01:14] *** shareable6 joined
[01:14] *** unicodable6 joined
[01:14] *** coverable6 joined
[01:14] *** notable6 joined
[01:14] *** squashable6 joined
[01:15] *** releasable6 joined
[01:15] *** statisfiable6 joined
[01:15] *** evalable6 joined
[01:15] *** greppable6 joined
[01:15] *** reportable6 joined
[01:15] *** bisectable6 joined
[01:15] *** quotable6 joined
[01:15] *** nativecallable6 joined
[01:15] *** tellable6 joined
[01:15] *** sourceable6 joined
[01:16] *** bloatable6 joined
[01:16] *** linkable6 joined
[02:39] *** squashable6 left
[02:42] *** squashable6 joined
[03:31] <japhb> leont: https://github.com/Leont/app-prove6/issues/19

[03:31] <japhb> lizmat: Finally figured out what broke in my backwards-compatibility CI ^^

[03:32] <leont> It's not obvious to me why that would break

[03:38] <japhb> There were some Rakudo reliability and thread-safety commits from the time period, starting from one I found that affected $*CWD

[03:39] <japhb> But that was the first Rakudo commit (and first App::Prove6 commit) that could flip things from broken to working or vice-versa.

[03:39] <japhb> leont: ^^

[05:06] *** squashable6 left
[05:09] *** squashable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:22] *** squashable6 left
[07:23] *** squashable6 joined
[07:38] *** Voldenet_ joined
[07:46] *** Voldenet left
[07:46] *** discord-raku-bot left
[07:46] *** Voldenet_ is now known as Voldenet

[08:34] *** Xliff joined
[08:53] *** discord-raku-bot joined
[08:54] *** sena_kun left
[08:56] *** normietotechie[m left
[08:58] *** sena_kun joined
[09:13] <Xliff> Raku-GLib suite timing statistics for Raku 2023.02.219.ge.5.e.5.acb.41

[09:13] <Xliff> Total number of projects: 33 (503300 loc)

[09:13] <Xliff> Total non-parallel compile times: 8737.780 (264.781 avg)

[09:13] <Xliff> Total parallel compile times: 2188.552 (66.320 avg) 3.992x speedup

[09:13] <Xliff> (eep!)

[09:14] <lizmat> slightly better than the last time?

[09:15] <lizmat> https://irclogs.raku.org/search.html?query=Total&type=starts-with&nicks=Xliff&channel=raku-dev&message-type=conversation

[09:22] *** normietotechie[m joined
[09:35] *** normietotechie[m left
[09:40] *** normietotechie[m joined
[10:15] *** normietotechie[m left
[10:33] <lizmat> Does anybody remember why the separator between leading/trailing declarator pod lines was changed from \n to space? https://github.com/rakudo/rakudo/commit/e5244bb3faa2e384bd050a

[10:33] <lizmat> the commit message isn't really helpful., and that change goes against what S26 has speculated about

[10:34] <lizmat> but spectests have enshrined that behaviour  :-(

[10:34] <lizmat> it feels wrong to me, as you use formatting information that way?

[10:35] <lizmat> although I think there's one reason I can think of: after that change, a newline would indicate the boundary between leading and trailing pod

[10:35] <lizmat> when calling .content

[10:36] <lizmat> OTOH, you wouldn't be able to see difference between leading and trailing if there was only leading or trailing pod

[10:43] <Geth> ¦ rakudo/main: ef05ef1e2b | (Elizabeth Mattijsen)++ | src/core.c/Pod.pm6

[10:43] <Geth> ¦ rakudo/main: Introduce Pod::Declarator class

[10:43] <Geth> ¦ rakudo/main: 

[10:43] <Geth> ¦ rakudo/main: This is basically the Pod::Block::Declarator class, but no longer a

[10:43] <Geth> ¦ rakudo/main: subclass of Pod::Block, as Pod declarators are not Pod::Blocks as

[10:43] <Geth> ¦ rakudo/main: per S26.  This loses two unused attributes per pod declarator.

[10:43] <Geth> ¦ rakudo/main: 

[10:43] <Geth> ¦ rakudo/main: Created a Pod::Block::Declarator class as a subclass of Pod::Declarator

[10:43] <Geth> ¦ rakudo/main: to remain source compatible.

[10:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ef05ef1e2b

[10:51] *** normietotechie[m joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:10] <Xliff> limat: Actually... 20% worse.

[12:11] <Xliff> Regular timings were down.

[12:12] <Xliff> I'm going to have to build a dedicated timing machine at some point, so I don't have system level tasks colliding with it. I'm running this with all cores, so I'm starting to wonder if that's just too much load on the system and its shaking out as chaotic lockling times.

[12:12] <Xliff> A dedicated single-user system would answer that question.

[13:20] <[Coke]> m: (8737.780).polymod(60, 60, 24).reverse.say

[13:20] <camelia> rakudo-moar ef05ef1e2: OUTPUT: «(0 2 25 37.78)␤»

[14:45] *** ab5tract left
[15:18] *** vrurg_ joined
[15:18] *** vrurg left
[15:21] <tonyo> [Coke]++ i'm desperate for a tool like that that just works..one of the only things i miss in go is godoc

[15:27] <[Coke]> I think the current user experience is not great: you have to clone the docs, index them with a separate command, and then you can use the installed command line tool. Should be a one stop install with the indexing done and build time.

[17:27] <lizmat> Xliff: re timings, I wonder if the parallel timing could benefit from using 1 CPU less than that you actually have

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:30] <Geth> ¦ rakudo/main: 9cc7cfe08b | (Elizabeth Mattijsen)++ | t/12-rakuast/sub.rakutest

[18:30] <Geth> ¦ rakudo/main: RakuAST: add a bare sub, just to be sure

[18:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9cc7cfe08b

[18:41] *** vrurg_ left
[19:03] <tonyo> just uploaded fez v45, now has a bunch of dist management functions

[19:03] <tonyo> better usage (and command guessing)

[19:04] *** vrurg joined
[19:06] <Xliff> lizmat: That is a thought.

[19:07] <Xliff> I might want to drop down to physical cores.

[19:12] <tonyo> .tellable fez v45, full dist management

[19:12] <tonyo> hmm, can never remember the right one

[19:12] <tonyo> .weekly fez v45, full dist management

[19:26] <tonyo> is there an easy way to view the rendered rakudo docs locally before i submit a PR?

[20:54] <lucs> tonyo: Do you mean rendered from for example a generated README.md?

[20:55] <tonyo> i can't get the docs-website to render twice.  i'm trying to add some info to the docs.raku.org about dist management

[20:55] <tonyo> https://pastebin.com/VbtvUKPS

[20:57] <lucs> Maybe the raku-doc channel people can help.

[21:15] <discord-raku-bot> <Nemokosch> what does "render twice" mean?

[21:17] <tonyo> renders the first time (when it does the initial clone) but upon rerunning, it produces the error in the pastebin

[21:21] <discord-raku-bot> <Nemokosch> sounds new but I haven't built in a while

[22:03] <discord-raku-bot> <Nemokosch> hm, it did work for me but anyway, let's try the "second render"

[22:10] <discord-raku-bot> <Nemokosch> hm, seems to work

[22:11] <discord-raku-bot> <Nemokosch> HOWEVER

[22:11] <discord-raku-bot> <Nemokosch> only now I realize that it could easily be an upgrade of a dependent module or something, that I already have

[22:16] *** sena_kun left
[22:35] <discord-raku-bot> <Nemokosch> lol, Doc::TypeGraph:ver<2.2.1.1> doesn't even install without test failures

[22:38] *** squashable6 left
[22:40] *** squashable6 joined
[22:42] <discord-raku-bot> <Nemokosch> okay, so here it goes, with up-to-date dependencies...

[23:11] <discord-raku-bot> <Nemokosch> anyway... it still works

[23:24] *** squashable6 left
[23:27] *** squashable6 joined
