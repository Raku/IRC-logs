[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:03] *** MasterDuke joined
[01:55] <MasterDuke> ugexe, lizmat: currently the highest function by exclusive time during a `raku -I . -e 'use Test'` in a large directory is `sub DYNAMIC`. there are 104k lookups each for `$*CWD` and `$*SPEC`

[02:04] *** linkable6 left
[02:04] *** evalable6 left
[02:06] *** evalable6 joined
[02:06] *** linkable6 joined
[02:47] <MasterDuke> ah, looks like i have a patch that gets rid of most of them, drops the time from ~3.7s to ~3.5s

[02:50] *** zostay left
[02:50] *** zostay joined
[03:19] <MasterDuke> and passes a spectest

[03:43] <MasterDuke> oh, it's against https://github.com/rakudo/rakudo/pull/5287, so i can't PR it right now

[03:45] <MasterDuke> tldr, it adds a new Str.IO multi with`:$SPEC!` and `:CWD!` parameters and passes them on to the IO::Path.new call. then use that in CompUnit::Repository::FileSystem!dist-from-ls

[03:59] <MasterDuke> doh, it's not against that PR, i just don't like the git diff output

[04:01] <MasterDuke> but i'll be inspired by that pr for my branch name

[04:13] <MasterDuke> doh again, don't need to create a new Str.IO multi

[04:21] <Geth> ¦ rakudo: MasterDuke17++ created pull request #5288: Don't lookup $*(SPEC|CWD) for every file in dir...

[04:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5288

[05:12] *** linkable6 left
[05:12] *** evalable6 left
[05:13] *** kurahaupo joined
[05:13] *** linkable6 joined
[05:15] *** evalable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:27] *** kurahaupo left
[06:28] *** kurahaupo joined
[06:29] *** kurahaupo left
[06:35] *** kurahaupo joined
[06:48] *** kurahaupo left
[06:56] *** kurahaupo joined
[06:56] *** kurahaupo left
[07:10] *** kurahaupo joined
[07:12] *** squashable6 left
[07:14] *** squashable6 joined
[07:56] *** squashable6 left
[07:58] *** squashable6 joined
[07:59] *** sivoais left
[08:00] *** sivoais joined
[08:37] *** kurahaupo left
[08:48] *** kurahaupo joined
[08:49] *** kurahaupo left
[08:59] *** kurahaupo joined
[09:06] *** kurahaupo left
[09:10] *** kurahaupo joined
[09:11] *** kurahaupo left
[09:15] *** kurahaupo joined
[09:16] *** kurahaupo left
[09:21] *** kurahaupo joined
[09:26] *** kurahaupo left
[09:28] *** kurahaupo joined
[09:30] *** kurahaupo left
[09:35] *** kurahaupo joined
[09:37] *** kurahaupo left
[09:41] *** kurahaupo joined
[09:43] *** kurahaupo left
[09:48] *** kurahaupo joined
[09:49] *** kurahaupo left
[10:05] *** kurahaupo joined
[10:08] <lizmat> notable6: weekly

[10:08] <notable6> lizmat, No notes for “weekly”

[10:09] *** kurahaupo left
[10:11] *** kurahaupo joined
[10:12] *** kurahaupo left
[10:13] *** kurahaupo joined
[10:15] *** kurahaupo left
[10:26] *** kurahaupo joined
[10:26] *** kurahaupo left
[10:27] *** kurahaupo joined
[10:28] *** kurahaupo left
[10:30] <lizmat> m: class A { has $.a is rw; submethod TWEAK() { $.a = 42 } }

[10:30] <camelia> rakudo-moar c6ceff3e6: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Virtual method call $.a may not be used on partially constructed object (maybe you mean $!a for direct attribute access here?)␤at <tmp>:1␤------> { has $.a is rw; submethod TWEAK() { $.a⏏ = …»

[10:30] <lizmat> that fails, but this is ok?

[10:30] <lizmat> class A { has $.a is rw; submethod TWEAK() { self.a = 42 } }

[10:30] <lizmat> m: class A { has $.a is rw; submethod TWEAK() { self.a = 42 } }

[10:30] <camelia> rakudo-moar c6ceff3e6: ( no output )

[10:33] *** kurahaupo joined
[10:37] *** kurahaupo left
[10:40] *** kurahaupo joined
[10:42] *** kurahaupo left
[10:53] *** kurahaupo joined
[10:57] *** kurahaupo left
[11:14] *** kurahaupo joined
[11:15] *** kurahaupo left
[11:21] *** kurahaupo joined
[11:24] *** kurahaupo left
[11:29] *** kurahaupo joined
[11:30] <Geth> ¦ rakudo/main: 4 commits pushed by (Nick Logan)++

[11:30] <Geth> ¦ rakudo/main: 0ae022849e | Remove stat existence check

[11:30] <Geth> ¦ rakudo/main: 78d791120f | Filter paths before stating them

[11:30] <Geth> ¦ rakudo/main: 2642bf2ddc | Reduce number of 'try' used

[11:30] <Geth> ¦ rakudo/main: b7626b3ed6 | Merge pull request #5287 from rakudo/ugexe/optimize-dir-recurse

[11:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/c6ceff3e6b56...b7626b3ed6e1

[11:31] *** kurahaupo left
[11:32] *** elcaro left
[11:32] *** elcaro joined
[11:35] *** kurahaupo joined
[11:36] *** kurahaupo left
[11:41] *** kurahaupo joined
[11:43] *** kurahaupo left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:08] <Geth> ¦ rakudo/main: 3fa0fdf74c | (Daniel Green)++ | src/core.c/CompUnit/Repository/FileSystem.pm6

[12:08] <Geth> ¦ rakudo/main: Don't lookup $*(SPEC|CWD) for every file in dir...

[12:08] <Geth> ¦ rakudo/main: 

[12:08] <Geth> ¦ rakudo/main: when recursing through a directory given as a `-I` option. When applied

[12:08] <Geth> ¦ rakudo/main: on top of https://github.com/rakudo/rakudo/pull/5287, `time raku -I . -e 'use Test'`

[12:08] <Geth> ¦ rakudo/main: in a directory with ~113k subdirectories/files dropped from ~3.7s to

[12:08] <Geth> ¦ rakudo/main: ~3.5s.

[12:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3fa0fdf74c

[12:08] <Geth> ¦ rakudo/main: 7a3ab690a4 | MasterDuke17++ (committed using GitHub Web editor) | src/core.c/CompUnit/Repository/FileSystem.pm6

[12:08] <Geth> ¦ rakudo/main: Merge pull request #5288 from MasterDuke17/speedup_internal_dir_recursion_by_reducing_dynamic_lookups

[12:08] <Geth> ¦ rakudo/main: 

[12:08] <Geth> ¦ rakudo/main: Don't lookup $*(SPEC|CWD) for every file in dir...

[12:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7a3ab690a4

[12:34] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/06/19/2023-25-recollections/

[12:50] *** kurahaupo joined
[13:50] *** linkable6 left
[13:50] *** evalable6 left
[13:52] *** linkable6 joined
[13:53] *** evalable6 joined
[14:36] *** kurahaupo left
[14:41] *** kurahaupo joined
[14:42] *** kurahaupo left
[14:43] *** kurahaupo joined
[15:41] <ugexe> Hmm, using the home directory as a repository is a terrible idea for another reason: IDEs will generate temp files and those are probably going to change a lot (and affect potentially unrelated code). I have hundreds of files like `/Users/nlogan/Library/Application Support/Code/User/History/-6f9923b8/W6qz.rakumod`

[15:44] <ugexe> raku -e 'say CompUnit::Repository::FileSystem.new(:prefix($*CWD)).distribution.meta<provides>{"Library::Application Support::Code::User::History::-6f9923b8::W6qz"}'

[15:44] <ugexe> nlogan/Library/Application Support/Code/User/History/-6f9923b8/W6qz.rakumod

[16:45] *** samebchase joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[19:09] *** sena_kun joined
[20:07] *** SmokeMachine left
[20:08] *** SmokeMachine joined
[20:09] *** rypervenche left
[20:10] *** rypervenche joined
[20:12] *** coleman left
[20:12] *** coleman joined
[20:34] *** sena_kun left
[21:48] *** kurahaupo left
[22:09] *** kurahaupo joined
[23:01] *** |Tux| left
[23:02] *** |Tux| joined
[23:22] *** squashable6 left
[23:25] *** squashable6 joined
[23:51] <Geth> ¦ rakudo/ugexe/use-nqp-try: d6c9c075d9 | (Nick Logan)++ | src/core.c/Rakudo/Internals.pm6

[23:51] <Geth> ¦ rakudo/ugexe/use-nqp-try: Use nqp::handle instead of try

[23:51] <Geth> ¦ rakudo/ugexe/use-nqp-try: 

[23:51] <Geth> ¦ rakudo/ugexe/use-nqp-try: Previously we added 'try' to ignore errors from the various nqp

[23:51] <Geth> ¦ rakudo/ugexe/use-nqp-try: stat calls. The rest of the code is written in nqp, so this changes

[23:51] <Geth> ¦ rakudo/ugexe/use-nqp-try: that 'try' to use nqp::handle instead for a slight performance

[23:51] <Geth> ¦ rakudo/ugexe/use-nqp-try: benefit.

[23:51] <Geth> ¦ rakudo/ugexe/use-nqp-try: review: https://github.com/rakudo/rakudo/commit/d6c9c075d9

[23:52] <Geth> ¦ rakudo: ugexe++ created pull request #5290: Use nqp::handle instead of try

[23:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5290

