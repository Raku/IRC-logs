[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:23] *** coverable6 left
[01:23] *** linkable6 left
[01:23] *** evalable6 left
[01:23] *** unicodable6 left
[01:23] *** notable6 left
[01:23] *** benchable6 left
[01:23] *** bloatable6 left
[01:23] *** shareable6 left
[01:23] *** greppable6 left
[01:23] *** nativecallable6 left
[01:23] *** releasable6 left
[01:24] *** bloatable6 joined
[01:24] *** releasable6 joined
[01:25] *** evalable6 joined
[01:25] *** coverable6 joined
[01:25] *** linkable6 joined
[01:25] *** notable6 joined
[01:25] *** greppable6 joined
[01:25] *** shareable6 joined
[01:26] *** nativecallable6 joined
[01:26] *** unicodable6 joined
[01:26] *** benchable6 joined
[01:37] *** sivoais left
[02:08] *** sivoais joined
[02:30] *** nine left
[02:32] *** nine joined
[02:35] *** Guest10 joined
[02:35] *** Guest10 is now known as XliffMac

[02:38] *** jacob_c joined
[02:41] *** jacob_c left
[02:47] *** XliffMac left
[02:49] *** sivoais left
[03:41] *** kjp left
[03:49] *** sivoais joined
[04:16] *** kjp joined
[05:36] *** benchable6 left
[05:36] *** statisfiable6 left
[05:36] *** coverable6 left
[05:36] *** tellable6 left
[05:36] *** quotable6 left
[05:36] *** squashable6 left
[05:36] *** bloatable6 left
[05:36] *** evalable6 left
[05:36] *** committable6 left
[05:36] *** sourceable6 left
[05:36] *** reportable6 left
[05:36] *** bisectable6 left
[05:36] *** unicodable6 left
[05:36] *** notable6 left
[05:36] *** shareable6 left
[05:36] *** linkable6 left
[05:36] *** releasable6 left
[05:36] *** greppable6 left
[05:36] *** nativecallable6 left
[05:37] *** unicodable6 joined
[05:37] *** notable6 joined
[05:37] *** shareable6 joined
[05:37] *** sivoais left
[05:37] *** reportable6 joined
[05:37] *** coverable6 joined
[05:37] *** benchable6 joined
[05:37] *** quotable6 joined
[05:37] *** nativecallable6 joined
[05:37] *** greppable6 joined
[05:37] *** statisfiable6 joined
[05:38] *** tellable6 joined
[05:38] *** linkable6 joined
[05:38] *** releasable6 joined
[05:38] *** sourceable6 joined
[05:38] *** evalable6 joined
[05:38] *** squashable6 joined
[05:39] *** committable6 joined
[05:39] *** bisectable6 joined
[05:39] *** bloatable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:39] *** sivoais joined
[06:44] *** sivoais left
[07:29] *** sivoais joined
[09:52] <Geth> ¦ rakudo/main: c5599481c0 | (Stefan Seifert)++ | 3 files

[09:52] <Geth> ¦ rakudo/main: RakuAST: support .= initializers

[09:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c5599481c0

[10:40] <lizmat> nine: looks like this borked t/12-rakuast/var.rakutest

[10:40] <lizmat> constant foo = "bar"

[10:40] <lizmat> No such method 'IMPL-COMPILE-TIME-VALUE' for invocant of type

[10:40] <lizmat> 'RakuAST::StrLiteral'

[10:40] <lizmat> investigating

[10:43] <lizmat> Ah, it looks like the initializer now *must* be a RakuAST::Initializer

[10:43] <lizmat> and cannot be something as simple as a StrLiteral ?

[10:45] <lizmat> hmmm...  that's odd: StrLiteral -> Literal -> CompileTimeValue

[10:57] <lizmat> m: say Q|constant foo = "bar"|.AST.DEPARSE

[10:57] <camelia> rakudo-moar c5599481c: OUTPUT: «constant foo =  = "bar"␤␤»

[10:57] <lizmat> nine: ^^ I think codegenning constants with Initializer::Assign is wrong ?

[10:59] <lizmat> I mean, shouldn't that be at least Initializer::Bind ?

[11:21] <Geth> ¦ rakudo/main: be633ca0c3 | (Elizabeth Mattijsen)++ | 2 files

[11:21] <Geth> ¦ rakudo/main: RakuAST: add .rake/deparse support for RakuAST::Initializer::CallAssign

[11:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/be633ca0c3

[11:33] <tbrowder__> note i just changed a windows.yml test for one of my many failing windows modules to use rakudo version 2022.07 and it's now passing.

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:22] <Geth> ¦ rakudo/main: c843b6f996 | (Elizabeth Mattijsen)++ | 2 files

[12:22] <Geth> ¦ rakudo/main: RakuAST: adapt tests/deparsing to new reality

[12:22] <Geth> ¦ rakudo/main: 

[12:22] <Geth> ¦ rakudo/main: with regards to constant initializers

[12:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c843b6f996

[12:25] <tbrowder__> i think the TAP problem needs some serious love--it's bad publicity for Raku. i hang out a lot on the debian users list and pitch Raku when i can. i get lots of push back when i say it's ready for production. bad testing for windows on github doesn't help.

[12:50] <lizmat> tbrowder__: I can only agree... but we don't have enough people doing Windows  :-(

[12:59] <Geth> ¦ rakudo/main: e08b201dd3 | (Elizabeth Mattijsen)++ | 3 files

[12:59] <Geth> ¦ rakudo/main: RakuAST: add .raku support for RakuAST::RuleDeclaration

[12:59] <Geth> ¦ rakudo/main: 

[12:59] <Geth> ¦ rakudo/main: This one is a little more troublesome, as it needs to remove the

[12:59] <Geth> ¦ rakudo/main: RakuAST::Regex::WithSigspace entries from the tree before an actual

[12:59] <Geth> ¦ rakudo/main: .raku representation can be made.

[12:59] <Geth> ¦ rakudo/main: 

[12:59] <Geth> ¦ rakudo/main: This also adds a RakuAST::Regex::QuantifiedAtom.replace-atom method

[12:59] <Geth> ¦ rakudo/main: as the atom can also have a RakuAST::Regex::WithSigspace in it.

[12:59] <Geth> ¦ rakudo/main: 

[12:59] <Geth> ¦ rakudo/main: Also make sure RakuAST::Regex::WithSigspace correctly deparses with an

[12:59] <Geth> ¦ rakudo/main: additional space behind it.

[12:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e08b201dd3

[13:00] <lizmat> aka: the subtle difference between "rule foo { \d+ }" and "rule foo { \d + }"

[13:02] <lizmat> nine: this just handles the .raku: still to do is to *add* the RakuAST::Regex::WithSigspace for rules in RakuAST module space, rather than in grammar/action space

[13:02] <lizmat> afk&

[13:06] <tbrowder__> lizmat: is it possible, for windows only as an interim solution, to change TAP to have a mode where it execute tests sequentially or else test in another way?

[13:06] <tbrowder__> just in case parallelism is the problem?

[13:06] <lizmat> TEST_JOBS=1 

[13:08] <tbrowder__> ah, right! i’ll see if i can fudge a yml file. thnx

[13:10] <lizmat> really afk&

[13:50] *** linkable6 left
[13:50] *** evalable6 left
[13:50] *** linkable6 joined
[13:53] *** evalable6 joined
[14:00] <tbrowder__> ok, i have a windows.yml file that uses TEST_JOBS=1 (in yaml / github workflows format) that works.

[14:03] <tbrowder__> next problem is how to get the same job to add system requirements for windows? example: linux prereqs for PDF::Lite requires libfreetype6-dev. how do i put that in a workflow for windows?

[14:13] <tbrowder__> ah, i see docs on github...

[14:16] <tbrowder__> choclatey may be the answer

[15:09] *** nine4 joined
[15:10] <nine4> Apparently PDF::Lite doesn't declare that dependency on libfreetype6 at all

[15:17] *** nine4 left
[15:17] *** nine71 joined
[15:20] *** nine71 left
[15:50] <tbrowder__> yes, that's one problem, issue was filed some days ago.

[15:53] <tbrowder__> i just released a module "Windows::Test" i will use as a test bed for Win64 testing and asking anyone to give me a link to a module that fails using it. i want to see if i can modify the github windows vm to override some testing problems.

[16:18] <Geth> ¦ rakudo/main: 591157170d | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[16:18] <Geth> ¦ rakudo/main: RakuAST: the atoms collector doesn't need to be dynamic

[16:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/591157170d

[16:20] *** linkable6 left
[16:20] *** evalable6 left
[16:22] *** evalable6 joined
[16:23] *** linkable6 joined
[16:37] *** sivoais left
[17:09] *** sivoais joined
[17:14] *** sivoais left
[17:19] *** sivoais joined
[17:47] <Geth> ¦ rakudo/main: 3b0adfa43d | (Elizabeth Mattijsen)++ | 5 files

[17:47] <Geth> ¦ rakudo/main: RakuAST: rework deparsing of regexes

[17:47] <Geth> ¦ rakudo/main: 

[17:47] <Geth> ¦ rakudo/main: Since a trailing space on an atom can have meaning when :sigspace

[17:47] <Geth> ¦ rakudo/main: is active, we cannot deparse regexes always with spaces around them.

[17:47] <Geth> ¦ rakudo/main: This is a conservative approach that may change in the future if

[17:47] <Geth> ¦ rakudo/main: we've found another way to make sure that the semantics of a deparsed

[17:47] <Geth> ¦ rakudo/main: regular expression does not differ from the AST.

[17:47] <Geth> ¦ rakudo/main: 

[17:47] <Geth> ¦ rakudo/main: This required a lot of changes with tests.

[17:47] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3b0adfa43d

[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:20] <Geth> ¦ rakudo/main: 837a2eb87b | (Elizabeth Mattijsen)++ | 3 files

[18:20] <Geth> ¦ rakudo/main: RakuAST: Adhere to the convention that .replace-xxx returns Nil

[18:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/837a2eb87b

[19:03] <ugexe> I won’t make it back home for like 15 more minutes; dunno if I’ll catch the end of the rsc meeting or not 

[19:29] <ugexe> nevermind, its an hour later today so ill be there

[19:57] *** jacob_c joined
[20:49] <Geth> ¦ rakudo/lizmat-do: 3da9a5a728 | (Elizabeth Mattijsen)++ | 2 files

[20:49] <Geth> ¦ rakudo/lizmat-do: Introduce Any.do(&)

[20:49] <Geth> ¦ rakudo/lizmat-do: 

[20:49] <Geth> ¦ rakudo/lizmat-do: Similar to Kotlin's apply, and basically the same as Supply.do already

[20:49] <Geth> ¦ rakudo/lizmat-do: does, but now for any value.  Calls the given Callable with the invocant

[20:49] <Geth> ¦ rakudo/lizmat-do: as the topic.  Usually executed for its side-effects.

[20:49] <Geth> ¦ rakudo/lizmat-do: 

[20:49] <Geth> ¦ rakudo/lizmat-do:     $ raku -e 'my $a = 42; dd a.do: { .say; .Num }'

[20:49] <Geth> ¦ rakudo/lizmat-do:     42

[20:49] <Geth> ¦ rakudo/lizmat-do:     42e0

[20:49] <Geth> ¦ rakudo/lizmat-do: 

[20:49] <Geth> ¦ rakudo/lizmat-do: Inspired by a conversation with jnthn

[20:49] <Geth> ¦ rakudo/lizmat-do: review: https://github.com/rakudo/rakudo/commit/3da9a5a728

[20:49] <Geth> ¦ rakudo: lizmat++ created pull request #5234: Introduce Any.do(&)

[20:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5234

[20:53] <japhb> lizmat: Does that work for undefined and non-concrete values as well?  (I was thinking "How is this different from a usage perspective from 'do with a', but then remembered that the latter construction wouldn't do undefineds.)

[21:05] <gfldex> m: my $a; $a.&{ .say; .Num };

[21:05] <camelia> rakudo-moar 837a2eb87: OUTPUT: «(Any)␤No such method 'Num' for invocant of type 'Any'.  Did you mean 'sum'?␤  in block <unit> at <tmp> line 1␤␤»

[21:05] <gfldex> m: my $a = 42; $a.&{ .say; .Num };

[21:05] <camelia> rakudo-moar 837a2eb87: OUTPUT: «42␤»

[21:05] <gfldex> Do we really need do? :->

[21:06] * gfldex .oO( With this PR, it's do-able in Raku! )

[21:48] <discord-raku-bot> <Nemokosch> yes, it already existed..

[22:07] *** ab5tract left
[22:36] <Geth> ¦ rakudo/lizmat-do: cbd3c8fed5 | (Elizabeth Mattijsen)++ | 3 files

[22:36] <Geth> ¦ rakudo/lizmat-do: Got the semantics wrong: supposed to return the invocant

[22:36] <Geth> ¦ rakudo/lizmat-do: 

[22:36] <Geth> ¦ rakudo/lizmat-do: Also, make this a s.e feature.

[22:36] <Geth> ¦ rakudo/lizmat-do: review: https://github.com/rakudo/rakudo/commit/cbd3c8fed5

[22:36] <lizmat> 5.e  :-(

[22:36] <lizmat> sleep&

