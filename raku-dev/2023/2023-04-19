[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:41] <MasterDuke> what's the best way to pass information from parse time (i.e., Grammar.nqp) to AST time?
[00:56] <vrurg> MasterDuke: Into Actions?
[00:56] <MasterDuke> into src/Raku/ast/*.rakumod
[00:57] <MasterDuke> dynamic variable seems like it might work, testing that now
[00:58] <vrurg> MasterDuke: mostly it's about dynamics, yes.
[01:30] *** nine left
[01:30] *** nine joined
[01:53] *** frost joined
[01:54] *** frost left
[01:57] *** frost joined
[02:17] *** frost left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 1 blocker. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft
[07:00] *** samcv left
[07:35] *** RakuIRCLogger joined
[07:37] <discord-raku-bot> <Nemokosch> perhaps it would be time for a RakuAST label in the Rakudo repo, or even two
[07:37] <discord-raku-bot> <Nemokosch> for things that are meant to be fixed there, and for things that are fixed there
[08:19] <Geth> ¦ rakudo/main: 5d1d02d958 | (Stefan Seifert)++ | 8 files
[08:19] <Geth> ¦ rakudo/main: RakuAST: adapt tests for new VarDeclaration::Simple.new signature
[08:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5d1d02d958
[08:27] <lizmat> nine: why not add a "name" argument to VarDeclaration::Simple of which parts could serve as the defaults for sigil twigil desigilname ?
[08:27] <discord-raku-bot> <Nemokosch> that's the way that has been changed
[08:27] <nine> I thought about that. But we don't do that anywhere else either.
[08:28] <nine> The way it's now, we no longer need to parse something that has already been parsed and then stitched back together
[08:29] <lizmat> true, but it makes it the interface harder for manual building
[08:30] <lizmat> and adding a :$name and checking whether it is defined, and then only do extra stuff, doesn't feel like a lot of extra effort
[08:30] <lizmat> so I feel very much like reverting the test changes, and adding a :$name argument
[08:30] <lizmat> and "name" method
[08:31] <lizmat> unless you are vehemently against it
[08:35] <lizmat> Nemokosch  there are already a RakuAST class development and RAKUDO_RAKUAST=1 label
[08:35] <nine> Not sure about vehemently, but I don't like it. If it had been like it's now from the start we wouldn't have this discussion. It's just that the patch for adjusting the tests shows that there's an alternative that saves some typing. Honestly, I don't think it's worth it.
[08:36] <lizmat> not worth me spending time on it, or not worth it from an API point of view ?
[08:36] <nine> Not worth the complication. Consider the reason for the change in the first place: we need an actual RakuAST::Name for desigilname because it can have multiple parts.
[08:37] <nine> If you do what you suggested and just parse $name into the three parts and do it naively, you'd use RakuAST::Name.from-identifier as we now do in the tests. But that would be wrong!
[08:37] <Geth> ¦ nqp/main: a124861a37 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/QRegex/Cursor.nqp
[08:37] <Geth> ¦ nqp/main: Fix back-references when there are aliases
[08:37] <Geth> ¦ nqp/main: 
[08:37] <Geth> ¦ nqp/main: Aliases are named-mangled on the capture name into a string of the form
[08:37] <Geth> ¦ nqp/main: `foo=bar`. This is handled in the match object construction, but was not
[08:37] <Geth> ¦ nqp/main: handled in the back-reference code.
[08:37] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/a124861a37
[08:37] <lizmat> ah, ok, good point
[08:37] <nine> Someone could call the constructor with :name<$A::B::c> and you'd get the wrong desigilname
[08:37] <discord-raku-bot> <Nemokosch> not sure we mean the same thing. I'm thinking of labeling the issues like "this has been already fixed with the RakuAST frontend" or "this should be addressed with the RakuAST frontend only"
[08:40] <lizmat> nine: understood, I withdraw my objections  :-)
[08:53] <Geth> ¦ nqp/main: 30bb2a1aeb | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION
[08:53] <Geth> ¦ nqp/main: Bump MoarVM
[08:53] <Geth> ¦ nqp/main: 
[08:53] <Geth> ¦ nqp/main: To get better error handling on some Linux distributions
[08:53] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/30bb2a1aeb
[09:07] <Geth> ¦ rakudo/main: 8826b839c3 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION
[09:07] <Geth> ¦ rakudo/main: Bump NQP
[09:07] <Geth> ¦ rakudo/main: 
[09:07] <Geth> ¦ rakudo/main: - get better error reporting on some Linux distributions
[09:07] <Geth> ¦ rakudo/main: - get back-reference check in regexes
[09:07] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8826b839c3
[09:24] <discord-raku-bot> <Nemokosch> oh, one more thing: most ("old") Rakudo PR's point to master. That may cause trouble later on
[09:37] <lizmat> fortunately Github has a way of rebasing them, although I would have to look up again to find out how
[09:46] <Geth> ¦ rakudo/main: 7b4b680e3e | (Elizabeth Mattijsen)++ | 3 files
[09:46] <Geth> ¦ rakudo/main: RakuAST: deparse/.raku/test for RakuAST::Statement::Import
[09:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7b4b680e3e
[09:59] <Geth> ¦ roast: 7fad7bed8f | (Elizabeth Mattijsen)++ | S05-metasyntax/regex.t
[09:59] <Geth> ¦ roast: Add tests for #5248
[09:59] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/7fad7bed8f
[10:01] *** evalable6 left
[10:04] *** evalable6 joined
[10:16] *** frost joined
[10:32] *** frost left
[11:32] *** statisfiable6 left
[11:32] *** sourceable6 left
[11:32] *** greppable6 left
[11:32] *** bisectable6 left
[11:32] *** releasable6 left
[11:32] *** nativecallable6 left
[11:32] *** bloatable6 left
[11:32] *** unicodable6 left
[11:32] *** benchable6 left
[11:32] *** committable6 left
[11:32] *** shareable6 left
[11:32] *** quotable6 left
[11:32] *** coverable6 left
[11:32] *** reportable6 left
[11:32] *** notable6 left
[11:32] *** tellable6 left
[11:32] *** evalable6 left
[11:32] *** squashable6 left
[11:32] *** linkable6 left
[11:33] *** tellable6 joined
[11:33] *** nativecallable6 joined
[11:33] *** nine left
[11:33] *** nine joined
[11:33] *** unicodable6 joined
[11:33] *** greppable6 joined
[11:33] *** committable6 joined
[11:34] *** linkable6 joined
[11:34] *** quotable6 joined
[11:34] *** benchable6 joined
[11:34] *** notable6 joined
[11:34] *** squashable6 joined
[11:34] *** statisfiable6 joined
[11:35] *** sourceable6 joined
[11:35] *** coverable6 joined
[11:35] *** shareable6 joined
[11:35] *** bloatable6 joined
[11:35] *** releasable6 joined
[11:35] *** bisectable6 joined
[11:35] *** reportable6 joined
[11:35] *** evalable6 joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:23] *** nebuchadnezzar joined
[13:01] <[Coke]> (main vs. master) there is an option to do that when you do the cutover, which I did for the docs repos.
[13:02] <[Coke]> I don't see an option in the settings for rakudo/rakudo to do anything with the current PRs.
[13:03] <[Coke]> Nor do I see a button on, e.g. https://github.com/rakudo/rakudo/pull/2680
[13:04] <[Coke]> but worst case, these can be merged via the command line
[13:05] <[Coke]> OH. Click edit, and it's just the title but also the target branch is editable.
[13:06] <[Coke]> so, only 64 PRs to edit, I can do that.
[13:06] <[Coke]> (not right this second)
[13:08] <[Coke]> *not* just the title..
[13:08] <[Coke]> https://github.com/rakudo/rakudo/pulls?q=is%3Apr+is%3Aopen+base%3Amaster
[13:09] <lizmat> I would skip the ones marked "Draft"
[13:10] <lizmat> and the ones that already have conflicts
[13:11] <[Coke]> ok. It's 3easy enough to do, and we'll never want to merge them to master, so I may just do them anyway if there's no harm.
[13:12] <[Coke]> (can't search by conflicted, but can add "draft:false")
[13:14] <[Coke]> (similar setup on raku/nqp)
[13:22] <[Coke]> jdv: when master->main happens on moarvm, do you want that just before or after the release?
[13:42] <[Coke]> nqp PRs all updated.
[13:48] <lizmat> [Coke]++
[14:09] *** japhb left
[14:11] *** japhb joined
[14:13] *** ab5tract joined
[15:06] <Geth> ¦ rakudo/main: 3b838eafb9 | (Elizabeth Mattijsen)++ | 3 files
[15:06] <Geth> ¦ rakudo/main: RakuST: fixup some deparsing / tests for Doc::Formatted
[15:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3b838eafb9
[15:31] * [Coke] is surprised to find an old PR submitted by... himself
[15:39] <[Coke]> lizmat: https://github.com/rakudo/rakudo/pull/1016 - you said you were closing it, but didn't.
[16:05] <jdv> after is probably easier
[16:22] *** japhb left
[16:26] *** japhb joined
[16:28] <[Coke]> let's pick a day now after the release and the weekly, announce it's coming on the weekly, and we can press the button then.
[16:33] <[Coke]> Folks: Going through all the PRs just now to make sure they were pointing at main, I saw a lot of proposals from over a year ago that didn't get any traction: if you have something submitted that you don't want any more, consider withdrawing it or pinging here for next steps.
[16:33] <[Coke]> I have one for a new env var that hides line numbers in test output, and honestly, I don't remember why I thought I needed it, so I'll probably drop that one, for example.
[16:35] <[Coke]> https://github.com/rakudo/rakudo/pull/3989
[16:37] <jdv> what are you changing?
[16:50] <[Coke]> in that PR, or in moarvm's repo?
[16:51] <[Coke]> I updated the PRs in npq & rakudo so that if they're merged, they go to main, not the old master.
[16:51] <[Coke]> in that last PR, it's stale, closing it.
[16:51] <[Coke]> in moarvm, we'll do the cutover from master to main, finally
[16:53] <jdv> in terms of branch changes
[16:55] <[Coke]> just that last one, then
[16:55] <[Coke]> same change already done to nqp & rakudo
[16:56] <jdv> ok
[16:59] <[Coke]> ugexe, masterduke, anything I can do to help test or move https://github.com/MoarVM/MoarVM/pull/1745 forward?
[17:03] <nine> If there is one thing in Raku that I would remove immediately given the chance, it's the global stash hierarchy.
[17:13] *** ab5tract left
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:30] *** sena_kun left
[18:31] *** sena_kun joined
[19:27] *** ab5tract joined
[19:53] <ugexe> [Coke]: i'm not quite sure the best way to move forward there. on one hand Raku needs to properly parse (so it can create proper paths for .relative, .absolute, etc) the UNC and device path types ( like https://gist.github.com/ugexe/cadebd4e3e47180f8f15e54f288c06ac#file-win32spec-raku-L60-L66 ). then raku needs an implementation detail method for turning a path with e.g. path part longer than 255
[19:53] <ugexe> into the device path format (like \\.\C:\my\foo\bar). internally raku should use that routine to convert paths internally (at first anyway, later it could apply to all path operations but would need performance considerations) before passing them to moarvm
[19:53] <ugexe> moarvm would need some minor changes, but I think for most things the rakudo changes should be sufficient
[19:54] *** ab5tract left
[19:57] <[Coke]> Do we want Raku to be aware of the \\path or is that an implementation detail for moarvm?
[20:01] <ugexe> yeah Raku needs to parse it correctly. right now it doesn't
[20:02] <ugexe> if it can't parse it correctly then it can't determine how to put it back together in a different path format
[20:02] <ugexe> or if it needs to be a different format at all
[20:16] <ugexe> for instance: `say q|\\\\.\\C:\\foo\\bar\\baz.txt|.IO.absolute` will output something like C:\C:\foo\bar\baz.txt which is wrong because A) its not using the original device path style \\.\ and B) it adds the volume twice
[20:22] <[Coke]> ... ah, bother. OK
[20:50] *** japhb left
[20:54] *** japhb joined
[21:26] <Geth> ¦ rakudo/main: 62d263fcc2 | (Stefan Seifert)++ | src/Raku/ast/scoping.rakumod
[21:26] <Geth> ¦ rakudo/main: RakuAST: throw an error when trying to redeclare an our scoped package
[21:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/62d263fcc2
[21:28] <vrurg> nine: If I get you right then you have my full support on this.
[21:34] <nine> vrurg: I wonder how realistic that dream actually is :)
[21:35] <nine> I mean, all the setting classes are visible lexically anyway. When you use a module, the symbols are imported lexically as well as far as that global stash hierarchy allows.
[21:36] <vrurg> The first problem I see is run time `require`. Where should it install symbols not known at compile time?
[21:36] <nine> That problem actually exists already. It stores them in a hash in the current scope.
[21:36] <nine> %?REQUIRE-SYMBOLS
[21:37] <vrurg> (facepalm) Of course! 
[21:37] <vrurg> Perhaps we can target this in 6.f.
[21:37] <nine> It would mean that this would break:
[21:37] <nine> m: { my class Int::Special { } }; Int::Special.new
[21:37] <camelia> rakudo-moar 62d263fcc: ( no output )
[21:38] <nine> And rightfully so, I dare say :D
[21:38] <vrurg> In my current project I had to switch to using `role Foo {}; my class Foo::Something does Foo {}` due to this stupidity.
[21:39] <vrurg> So, it has to break.
[21:39] *** sena_kun left
[21:56] <ugexe> [Coke]: i think most of the parsing work can be done by the grammar in my gist. it just needs to be integrated into IO::Spec::Win32 (and ideally changed to not use a grammar, but other parts of IO::Spec use a grammar so maybe not that bad)
