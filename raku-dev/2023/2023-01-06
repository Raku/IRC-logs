[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:33] *** epony left
[01:21] *** epony joined
[05:15] *** squashable6 left
[05:17] *** squashable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[08:37] *** greppable6 left
[08:37] *** unicodable6 left
[08:37] *** notable6 left
[08:37] *** nativecallable6 left
[08:37] *** linkable6 left
[08:37] *** evalable6 left
[08:37] *** coverable6 left
[08:37] *** squashable6 left
[08:37] *** statisfiable6 left
[08:37] *** tellable6 left
[08:37] *** releasable6 left
[08:37] *** bloatable6 left
[08:37] *** quotable6 left
[08:37] *** sourceable6 left
[08:37] *** shareable6 left
[08:37] *** reportable6 left
[08:37] *** committable6 left
[08:37] *** bisectable6 left
[08:37] *** benchable6 left
[08:37] *** coverable6 joined
[08:37] *** notable6 joined
[08:38] *** unicodable6 joined
[08:38] *** evalable6 joined
[08:38] *** sourceable6 joined
[08:39] *** nativecallable6 joined
[08:39] *** committable6 joined
[08:39] *** shareable6 joined
[08:39] *** benchable6 joined
[08:40] *** releasable6 joined
[08:40] *** bisectable6 joined
[08:40] *** quotable6 joined
[08:40] *** linkable6 joined
[08:40] *** bloatable6 joined
[08:40] *** greppable6 joined
[08:40] *** reportable6 joined
[08:40] *** statisfiable6 joined
[08:40] *** tellable6 joined
[08:40] *** squashable6 joined
[08:58] *** sena_kun joined
[10:04] <Geth> ¦ rakudo/main: dc452c57c0 | (Elizabeth Mattijsen)++ | src/Raku/ast/call.rakumod

[10:04] <Geth> ¦ rakudo/main: Remove RakuAST::Call::Method.shortname

[10:04] <Geth> ¦ rakudo/main: 

[10:04] <Geth> ¦ rakudo/main: Replace by .canonicalize, as per nine++ suggestion

[10:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dc452c57c0

[10:16] *** sena_kun left
[10:55] *** sena_kun joined
[11:10] <Geth> ¦ rakudo/main: 0354c47892 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[11:10] <Geth> ¦ rakudo/main: Simplify circumfixing in deparsing

[11:10] <Geth> ¦ rakudo/main: 

[11:10] <Geth> ¦ rakudo/main: Also add a missing () in an error message

[11:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0354c47892

[11:52] *** epony left
[11:58] <lizmat> nine: should semilists be deparsed with ; as delimiter, or as , ?

[11:59] <nine> I'm not sure I understand Raku well enough to answer that :D

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:04] <lizmat> basically the difference between:

[12:04] <lizmat> m: my @a = <a b c d>; say Q/@a[0,1]/.AST.dump

[12:04] <camelia> rakudo-moar 0354c4789: OUTPUT: «CompUnit 𝄞 /home/camelia/EVAL_0:1 ⎡@a[0,1]⎤␤  StatementList 𝄞 /home/camelia/EVAL_0:1 ⎡@a[0,1]⎤␤    Statement::Expression ▪𝄞 /home/camelia/EVAL_0:1 ⎡@a[0,1]⎤␤      ApplyPostfix  ⎡[0,1]⎤␤        Var::Lexical  ⎡@a⎤…»

[12:04] <lizmat> and:

[12:04] <lizmat> my @a = <a b c d>; say Q/@a[0;1]/.AST.dump

[12:04] <lizmat> m: my @a = <a b c d>; say Q/@a[0;1]/.AST.dumpa

[12:04] <camelia> rakudo-moar 0354c4789: OUTPUT: «No such method 'dumpa' for invocant of type 'RakuAST::CompUnit'.  Did␤you mean any of these: 'DUMP', 'dump'?␤  in block <unit> at <tmp> line 1␤␤»

[12:04] <lizmat> m: my @a = <a b c d>; say Q/@a[0;1]/.AST.dump

[12:04] <camelia> rakudo-moar 0354c4789: OUTPUT: «CompUnit 𝄞 /home/camelia/EVAL_0:1 ⎡@a[0;1]⎤␤  StatementList 𝄞 /home/camelia/EVAL_0:1 ⎡@a[0;1]⎤␤    Statement::Expression ▪𝄞 /home/camelia/EVAL_0:1 ⎡@a[0;1]⎤␤      ApplyPostfix  ⎡[0;1]⎤␤        Var::Lexical  ⎡@a⎤…»

[12:06] <lizmat> I think one of the tests is set up incorrectly... 

[12:06] <lizmat> glad I have the .AST method now...  :-)

[12:33] <discord-raku-bot> <Nemokosch> what does it do?

[12:36] <lizmat> it parses the given string using the new Raku grammar, and returns the produced RakuAST nodes

[12:38] <discord-raku-bot> <Nemokosch> oh, and deparse takes this a step further by providing a Raku source code representation?

[12:38] *** Altai-man joined
[12:38] <lizmat> yes

[12:39] <lizmat> m: say Q/my $a    =   42/.AST.deparse

[12:39] <camelia> rakudo-moar 0354c4789: OUTPUT: «No such method 'deparse' for invocant of type 'RakuAST::CompUnit'.  Did␤you mean 'DEPARSE'?␤  in block <unit> at <tmp> line 1␤␤»

[12:39] <lizmat> m: say Q/my $a    =   42/.AST.DEPARSE

[12:39] <camelia> rakudo-moar 0354c4789: OUTPUT: «    my $a = 42␤␤»

[12:39] <lizmat> the leading spaces are a bug

[12:39] <lizmat> in the deparsing

[12:39] <lizmat> m: say Q/my $a    =   42/.AST.dumo

[12:39] <camelia> rakudo-moar 0354c4789: OUTPUT: «No such method 'dumo' for invocant of type 'RakuAST::CompUnit'.  Did␤you mean any of these: 'DUMP', 'dump', 'sum'?␤  in block <unit> at <tmp> line 1␤␤»

[12:39] <lizmat> m: say Q/my $a    =   42/.AST.dump

[12:39] <camelia> rakudo-moar 0354c4789: OUTPUT: «CompUnit 𝄞 /home/camelia/EVAL_0:1 ⎡my $a    =   42⎤␤  StatementList 𝄞 /home/camelia/EVAL_0:1 ⎡my $a    =   42⎤␤    Statement::Expression ▪𝄞 /home/camelia/EVAL_0:1 ⎡my $a    =   42⎤␤      VarDeclaration::Simple  ⎡$a    = …»

[12:42] *** sena_kun left
[13:19] *** Altai-man left
[13:29] <lizmat> nine: something like "(3,4)" codegens into a SemiList(Statement::Expression(ApplyListInfix(...)))

[13:29] <lizmat> however, all seems to work without the Statement::Expression step

[13:29] <lizmat> aka: SemiList(ApplyListInfix(...))

[13:30] <lizmat> is this an optimization not yet performed on the codegen side, or should I adapt deparsing tests accordingly ?

[13:37] <nine> No! That's plain wrong. SemiList is a StatementList and the contained statements are required to be RakuAST::Statement subclasses. I have only just fixed a bug where we didn't stick to this rule in commit 8b9fb402b9cbcfaf9762b49e90a74840c06621ef. Let's not introduce more problems like that.

[13:38] <lizmat> ok, so I guess I'll need to fix a few tests  :-)

[13:45] <lizmat> nine I assume an empty SemiList can live without a Statement::Expression in it

[13:46] <nine> Sure. An empty list is an empty list. It's just that if there is something in it, it must be statements.

[13:49] <lizmat> ack

[14:15] <Geth> ¦ rakudo/main: 9aea72f59c | (Elizabeth Mattijsen)++ | 3 files

[14:15] <Geth> ¦ rakudo/main: Fix deparsing of SemiLists

[14:15] <Geth> ¦ rakudo/main: 

[14:15] <Geth> ¦ rakudo/main: And adapt tests to use AppltListInfix where applicable

[14:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9aea72f59c

[14:27] <Geth> ¦ rakudo/main: 8ee5e99bd5 | (Elizabeth Mattijsen)++ | t/12-rakuast/call.rakutest

[14:27] <Geth> ¦ rakudo/main: Some more explanations in TAP output

[14:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8ee5e99bd5

[14:29] *** Kaipei left
[15:16] <Geth> ¦ rakudo/main: d0916e9a51 | (Stefan Seifert)++ | src/Raku/ast/name.rakumod

[15:16] <Geth> ¦ rakudo/main: Implement canonicalization of expression parts in names

[15:16] <Geth> ¦ rakudo/main: 

[15:16] <Geth> ¦ rakudo/main: The canonical form of arbitrary Raku expressions is obviously the

[15:16] <Geth> ¦ rakudo/main: deparsed string as parsing+deparsing takes all the possible forms one

[15:16] <Geth> ¦ rakudo/main: can spell a Raku expression and turns them into one canonical form.

[15:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d0916e9a51

[15:16] <Geth> ¦ rakudo/main: dcff39f62d | (Stefan Seifert)++ | src/Raku/Actions.nqp

[15:16] <Geth> ¦ rakudo/main: RakuAST: fix failure to resolve &infix:<<whatever>> variables

[15:16] <Geth> ¦ rakudo/main: 

[15:16] <Geth> ¦ rakudo/main: We need to turn such a name into its canonical form before looking it up

[15:16] <Geth> ¦ rakudo/main: in surrounding scopes as it will be registered under the canonical name.

[15:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dcff39f62d

[15:16] <nine> 89 passing test and 605 passing spectest files

[15:42] <discord-raku-bot> <Nemokosch> nine: is all this something that you just know by heart or is any of this written down anywhere?

[15:46] <nine> Nemokosch: it's just good old fashioned debugging and reasoning. What else but the deparse result could be a canonical form of an expression? And with many different ways to spell the same name, we must standardize on one form if we want to find it in a lookup hash (which is what resolving a name really does)

[15:46] <tellable6> nine, I'll pass your message to Nemokosch

[15:52] *** Kaipei joined
[16:04] <discord-raku-bot> <Nemokosch> no, I mean, what a certain source code should correspond to in AST form

[16:05] <discord-raku-bot> <Nemokosch> because that has been the biggest burden for me for one; not knowing what even is the right interpretation

[16:23] *** epony joined
[17:04] *** ab5tract joined
[17:08] <lizmat> nine: wouldn't these references to .DEPARSE fail once we try to build the setting with the Raku grammar ?

[17:59] <ugexe> fyi there appears to have been a regression re: windows and module installation -- https://github.com/ugexe/zef/issues/491

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:03] <ugexe> i dont think this is specific to TAP either. Other people have noted similar issues with their windows github actions that appear to be precomp related

[18:05] <ugexe> timeline wise the only thing that sticks out is https://github.com/rakudo/rakudo/commit/7194b1e6b39ecc2141051bf87094cd0453f618b6 but I'm not sure how that change would fail most of the time but succeed rarely

[18:05] <ugexe> unless its a race condition with CALLERS.EXISTS-KEY

[18:07] <ugexe> it looks like that wasn't in the 2022.12 release though

[18:35] *** sena_kun joined
[19:35] <vrurg> The race condition doesn't look as an unlikely cause. 

[19:36] <Geth> ¦ rakudo/lizmat-unicode-version: 0be7a68d37 | (Elizabeth Mattijsen)++ | 4 files

[19:36] <Geth> ¦ rakudo/lizmat-unicode-version: Introduce $?UNICODE-VERSION in 6.e

[19:36] <Geth> ¦ rakudo/lizmat-unicode-version: 

[19:36] <Geth> ¦ rakudo/lizmat-unicode-version: Instead of doing difficult things in MoarVM or JVM, just set the

[19:36] <Geth> ¦ rakudo/lizmat-unicode-version: constant in the setting code.  Whenever a Unicode update is to be

[19:36] <Geth> ¦ rakudo/lizmat-unicode-version: done, updating this constant should be part of the Pull Request.

[19:36] <Geth> ¦ rakudo/lizmat-unicode-version: review: https://github.com/rakudo/rakudo/commit/0be7a68d37

[19:36] <Geth> ¦ rakudo: lizmat++ created pull request #5153: Introduce `$?UNICODE-VERSION` in 6.e

[19:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5153

[19:52] <ugexe> does the jvm even support unicode 15?

[19:52] <ugexe> 13 rather

[19:53] <ugexe> similarly the other backends

[20:02] <lizmat> well, I don't know... but that could be easily handled by #?if jvm  etc 

[20:04] *** sena_kun left
[20:04] *** sena_kun joined
[20:04] *** sena_kun left
[20:05] *** sena_kun joined
[20:12] <Geth> ¦ rakudo/lizmat-unicode-version: 484eed9544 | (Elizabeth Mattijsen)++ | src/core.e/core_prologue.pm6

[20:12] <Geth> ¦ rakudo/lizmat-unicode-version: Make $?UNICODE-VERSION check the unicode database

[20:12] <Geth> ¦ rakudo/lizmat-unicode-version: 

[20:12] <Geth> ¦ rakudo/lizmat-unicode-version: As suggested by Stephen Schulze

[20:12] <Geth> ¦ rakudo/lizmat-unicode-version: review: https://github.com/rakudo/rakudo/commit/484eed9544

[20:21] <ugexe> sure, but i was questioning what was there

[20:34] *** ab5tract left
[20:34] *** ab5tract joined
[20:39] <ugexe> actually im not sure #?if jvm would help for e.g. jvm since it would need to be more like #?if jvm:ver<...>

[20:40] <ugexe> however, that runtime code looks like it should solve all those problems

[20:59] *** epony left
[21:00] *** epony joined
[22:18] *** sena_kun left
[22:21] *** sena_kun joined
[22:27] <nine> lizmat: could be come a problem. But that's then. We'll deal with it somehow. It may just be that the settings code never reaches this case.

[23:27] <lizmat> one can hope  :-)

