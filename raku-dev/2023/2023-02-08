[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[01:13] *** japhb left
[01:34] *** japhb joined
[01:42] *** melezhik joined
[01:51] *** melezhik left
[02:23] *** melezhik joined
[02:26] *** melezhik left
[04:29] *** linkable6 left
[04:29] *** evalable6 left
[04:30] *** evalable6 joined
[04:31] *** linkable6 joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:03] *** bloatable6 left
[07:03] *** notable6 left
[07:03] *** sourceable6 left
[07:03] *** greppable6 left
[07:03] *** committable6 left
[07:03] *** benchable6 left
[07:03] *** bisectable6 left
[07:03] *** shareable6 left
[07:03] *** unicodable6 left
[07:03] *** squashable6 left
[07:03] *** quotable6 left
[07:03] *** coverable6 left
[07:03] *** reportable6 left
[07:03] *** releasable6 left
[07:03] *** nativecallable6 left
[07:03] *** statisfiable6 left
[07:03] *** evalable6 left
[07:03] *** tellable6 left
[07:03] *** linkable6 left
[07:03] *** coverable6 joined
[07:03] *** evalable6 joined
[07:03] *** sourceable6 joined
[07:04] *** statisfiable6 joined
[07:04] *** releasable6 joined
[07:04] *** reportable6 joined
[07:04] *** tellable6 joined
[07:04] *** notable6 joined
[07:04] *** bisectable6 joined
[07:04] *** nativecallable6 joined
[07:04] *** committable6 joined
[07:04] *** linkable6 joined
[07:04] *** benchable6 joined
[07:05] *** greppable6 joined
[07:05] *** shareable6 joined
[07:05] *** unicodable6 joined
[07:05] *** quotable6 joined
[07:06] *** bloatable6 joined
[07:06] *** squashable6 joined
[07:38] *** sena_kun joined
[08:25] *** djinni` left
[08:40] *** djinni` joined
[08:56] <discord-raku-bot> <Nemokosch> I'm still thinking if I'm making some obvious mistake

[08:57] <discord-raku-bot> <Nemokosch> but it seems that Callable isn't fully available at the time it would be needed for a &var

[08:59] <discord-raku-bot> <Nemokosch> unlike Hash and Array - although part of the story is that those are classes while Callable is a role

[09:05] <discord-raku-bot> <Nemokosch> this happens when I try to parameterize Callable: "Cannot find method 'parameterize' on object of type NQPClassHOW"

[09:06] <discord-raku-bot> <Nemokosch> the old compiler basically performed a core lookup in World.nqp, as much as I understand

[09:06] <discord-raku-bot> <Nemokosch> How to go about it these days?

[09:08] <nine> Look at ImplicitLookups

[09:10] <discord-raku-bot> <Nemokosch> üëç

[09:25] <discord-raku-bot> <Nemokosch> I don't know... it seems that everything tries to look up itself, and then automagically knows what position of the lookup will be sufficient...

[09:27] <discord-raku-bot> <Nemokosch> this seems to be the underlying magic in the Routine node: > RakuAST::Type::Setting.new(RakuAST::Name.from-identifier('Callable'))

[09:27] <discord-raku-bot> <Nemokosch> may I just call this directly to obtain Callable?

[09:29] <discord-raku-bot> <Nemokosch> ooor... should this be added to the get-implicit-lookups of the suitable variable declaration node?

[09:31] <nine> It needs to be added to the list of implicit lookups. IMPL-CHECK will then resolve it.

[09:32] <nine> RakuAST::Type::Setting.new(RakuAST::Name.from-identifier('Callable')) by itself just means "I'm interested in the Callable symbol from the setting", but that alone doesn't give you the actual object.

[09:37] *** ab5tract joined
[10:27] <ab5tract> I know I've been asking a lot of questions but this exercise of adding subsets has struck a cord in my hyperfocus matrix. Thank you all for your patience and your help!

[10:28] <nine> Thanks for taking this on :)

[10:28] <ab5tract> I'd be much obliged if someone could point out any fatal differences between the QAST for base and for my branch: https://gist.github.com/ab5tract/144c33cb39615bf481abed638f66a6a5

[10:28] <ab5tract> nine: For the most part, it has been my pleasure :)

[10:30] *** sena_kun left
[11:00] <ab5tract> or, alternatively, what could be preventing nearly identical QAST from having the same effect between base and rakuast?

[11:02] <lizmat> to my knowledge, nothing ?

[11:02] <lizmat> at QAST level there is no difference between base and RakuAST ?

[11:03] <discord-raku-bot> <Nemokosch> I used to think QAST is more complex than it really is

[11:04] <discord-raku-bot> <Nemokosch> apparently the runtime relies a lot on the metamodel

[11:05] <ab5tract> lizmat: functionally, yes. The only difference is a named lexical binding instead of '$_'

[11:05] <ab5tract> if you have any tuits for it, its all in that gist I linked

[11:09] <nine> lizmat: he's talking about https://gist.github.com/ab5tract/144c33cb39615bf481abed638f66a6a5 specifically

[11:09] <lizmat> yeah, I got that  :-)

[11:14] <nine> ab5tract: could be that your expectations are actually wrong there:

[11:14] <nine> m: my $a = * && "yes"; dd $a

[11:14] <camelia> rakudo-moar 156fc2cfa: OUTPUT: ¬´Str $a = "yes"‚ê§¬ª

[11:15] <nine> So * && ... does not curry, i.e. you don't get a WhateverCode

[11:15] <nine> You also see that in the base qast. It literally translates to nqp::if(Whatever, 5)

[11:17] <discord-raku-bot> <Nemokosch> what does the order of items in PRODUCE-IMPLICIT-LOOKUPS determine?

[11:17] <nine> It's the same order you get these things out of get-implicit-lookups

[11:18] <ab5tract> nine: Oh, strange.. * ~~ 5 does generate a WhateverCode in my branch

[11:19] <nine> ~~ is not &&

[11:19] <ab5tract> And still doesn't work is not a constraint

[11:19] <discord-raku-bot> <Nemokosch> I mean, if I add a new item, I'm probably breaking the "interface" of it, right?

[11:20] <ab5tract> I see the code where '&&' is optimized into a direct nqp op

[11:20] <nine> Maybe you're just picking the hardest examples all the time :D I'd not try ~~ as that's smartmatch and that's a lot of black magic

[11:21] <lizmat> Nemokosch if you add at the end, there shouldn't be any problem

[11:21] <ab5tract> Okay, then I guess subset is "done"

[11:21] <nine> Nemokosch: appending is ok

[11:21] <tellable6> nine, I'll pass your message to Nemokosch

[11:21] <nine> Can someone teach this bot to not pass messages to people who are right here?

[11:22] <lizmat> they're not, as far as the bot is concerned...  and I'm not sure where tellable lives

[11:22] <ab5tract> nine: I was using '&&' specifically because it wasn't a smartmatch, btw :)

[11:23] <ab5tract> lizmat: presumably it could get learn how to connect to discord from 'discord-raku-bot'

[11:23] <ab5tract> That doesn't answer the question of where the thing actually is, of course :)

[11:24] <lizmat> I think it's simpler than that: if the nick is <discord-raku-bot>, then look for the <real-nick> at the start of the line

[11:24] <ab5tract> True, there's no point queueing IRC messages for discord nicks

[11:24] <discord-raku-bot> <Nemokosch> so essentially scan the messages, then?

[11:25] <discord-raku-bot> <Nemokosch> anyway, back to implicit lookups

[11:25] <discord-raku-bot> <Nemokosch> my worry is that what it gives it not fixed-length

[11:25] <discord-raku-bot> <Nemokosch> so if I append, well, counting from backwards can help if that's available?

[11:25] <discord-raku-bot> <Nemokosch> feels awkward

[11:27] <lizmat> implicit lookups just sets up info for the get-implicit-lookups to fetch...  it's all up to you what it means

[11:29] <discord-raku-bot> <Nemokosch> Yeah well, that's exactly my worry. If anything is modified, potentially all occasions of get-implicit-lookups need to be also modified

[11:29] <lizmat> nope, only the one from that class

[11:30] <lizmat> generally the implicit-lookups / get-implicit-lookups only work *within* a certain class, or maybe its subclasses

[11:30] <discord-raku-bot> <Nemokosch> I mean that. It's going to be a third entry within that class.

[11:31] <discord-raku-bot> <Nemokosch> and it's also getting variadic (which seems kinda like premature optimization to me?)

[11:31] <discord-raku-bot> <Nemokosch> variadic my ass, variant, that's the important thing

[11:31] <discord-raku-bot> <Nemokosch> depending on certain conditions, the entries may mean different things

[11:32] <discord-raku-bot> <Nemokosch> AND their overall number can also differ

[11:32] <lizmat> I'm not sure what you're getting at, it feels to me you're overcomplicating things

[11:32] <discord-raku-bot> <Nemokosch> this isn't even what I wrote

[11:32] <lizmat> it's just a tool to work around one of the bootstrapping issues of RakuAST

[11:33] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/blob/156fc2cfa1f68309a4538d9edd7e50959237b9cb/src/Raku/ast/variable-declaration.rakumod#L423

[11:33] <nine> IMHO the concerns are actually well founded. It just may still turn out to be worth the hassle.

[11:34] <discord-raku-bot> <Nemokosch> so as it stands, it can have 1 entry or 2, and the first entry can be the package or the type

[11:34] <lizmat> ah, in *that* particular case

[11:34] <nine> One does have to be careful to get the conditions right.

[11:34] <lizmat> well, I think that can be easily fixed by using fixed indices ?

[11:35] <lizmat> instead of @lookups.push(foo) do @lookups[0] := foo ?

[11:35] <discord-raku-bot> <Nemokosch> yes, the question would be: couldn't the whole thing just be a good-old fixed-sized array basically?

[11:35] <discord-raku-bot> <Nemokosch> rather than something link-y

[11:35] <discord-raku-bot> <Nemokosch> list*

[11:36] <lizmat> well, in nqp there's no notion of lists, only arrays

[11:36] <lizmat> there's also no assigning, only binding

[11:37] <discord-raku-bot> <Nemokosch> yeah no I mean, this shouldn't have list semantics in the first place imo

[11:38] <discord-raku-bot> <Nemokosch> just plain old static array/buffer semantics

[11:38] <discord-raku-bot> <Nemokosch> "first position: either filled with the package or empty"

[11:38] <discord-raku-bot> <Nemokosch> "second position: either filled with the type or empty"

[11:38] <discord-raku-bot> <Nemokosch> etc.

[11:39] <discord-raku-bot> <Nemokosch> which sounds like more or less the same thing you said, for what it's worth

[11:41] <nine> These could as well be just properties on the node object. has RakuAST::Type::Setting $!Callable; The reason we have lists there at all is that the resolver goes through the list and resolves each item. But that list may then just be [$!Callable]

[11:47] <discord-raku-bot> <Nemokosch> I don't know what the takeaway of this is.

[11:48] <discord-raku-bot> <Nemokosch> How do I get Callable resolved, without relying on the positions in this implicit lookups list?

[11:54] <nine> By doing just that: add a has RakuAST::Type::Setting $!Callable; to the node, initialize it in the node's constructor to the RakuAST::Type::Setting object with the proper name, then append $!Callable to the list in PRODUCE-IMPLICIT-LOOKUPS. Then, where you need Callable, access $!Callable.resolved.compile-time-value

[11:58] <ab5tract> nine: If '* && 5'  is not curried in the original, I guess I'm confused as to why ApplyInfix is the way it is

[11:59] <discord-raku-bot> <Nemokosch> oh okay... so the list itself is returned but more importantly cached

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:09] <lizmat> hmmm... looks like "resolve-implicit-lookups-with

[12:10] <lizmat> doesn't like holes in the list

[12:10] <lizmat> which would explain the approach taken

[12:11] <nine> ab5tract: the answer is always: no test has shown the current ApplyInfix wrong. Same as at the time, no test had shown my original implementation (which looked like the current one in ApplyPostfix) wrong.

[12:12] <nine> I actually tried to figure out from reading Perl6/Actions.nqp whether && is supposed to curry and I've failed so far. According to my reading it should, but it clearly doesn't. Which goes to show that the old code is just very complicated and it's easy to miss things.

[12:13] <lizmat> m: dd (* && 1).^name    # doesn't that say it all 

[12:13] <camelia> rakudo-moar 156fc2cfa: OUTPUT: ¬´"Int"‚ê§¬ª

[12:13] <discord-raku-bot> <Nemokosch> the situation is worse than I thought

[12:13] <lizmat> m: dd (* || 1).^name   # that seems to curry

[12:13] <camelia> rakudo-moar 156fc2cfa: OUTPUT: ¬´"Whatever"‚ê§¬ª

[12:14] <nine> Huh....that's unexpected

[12:14] <lizmat> ah, not, that's Whatever, not WhateverCoce

[12:14] <lizmat> so that doesn't curry either

[12:14] <nine> oh, right!

[12:14] <discord-raku-bot> <Nemokosch> the class that needs to know Callable, RakuAST::ContainerCreator, doesn't inherit or mixin anything

[12:15] <discord-raku-bot> <Nemokosch> can I just inherit from RakuAST::ImplicitLookups?

[12:15] <lizmat> yes, just add "is RakuAST::ImplicitLookups"

[12:16] <discord-raku-bot> <Nemokosch> okay, thanks

[12:16] <discord-raku-bot> <Nemokosch> https://www.youtube.com/watch?v=ci1o288RB04 mood

[12:16] <lizmat> note: it only *looks* like Raku code, but it is in fact code that feeds a pre-processor that produces NQP bootstrap code

[12:17] <ab5tract> Even though it's a Whatever instead of a WhateverCode, its confusing why one is an Int and one is a Whatever

[12:17] <nine> Oh...that's...bad. I have actually added array to the bootstrap because I needed it in ContainerCreator and as you've discovered, it's really bothersome to make it available there

[12:18] <lizmat> m: dd *

[12:18] <camelia> rakudo-moar 156fc2cfa: OUTPUT: ¬´*‚ê§¬ª

[12:18] <lizmat> m: dd *.DEFINITE

[12:18] <camelia> rakudo-moar 156fc2cfa: OUTPUT: ¬´Bool::True‚ê§¬ª

[12:19] <nine> ab5tract: no, it's not confusing because Whatever is trueish. So * && 1 is like True & 1 which is 1 while * || 1 is True || 1 which is True

[12:19] <lizmat> indeed

[12:19] <nine> err which is Whatever

[12:19] <ab5tract> ah, got it

[12:19] <discord-raku-bot> <Nemokosch> nine: do you think it can be added with ImplicitLookups or will that create some paradoxical situation?

[12:20] <ab5tract> so IIUC, I should change the behavior of ApplyInfix to *not* curry

[12:20] <nine> ab5tract: not ApplyInfix, but Infix::IMPL-CURRIES needs to give a more accurate answer

[12:21] <nine> Compare with the start of method whatever_curry in Perl6/Actions.nqp. That contains a lot of obscure logic

[12:23] <ab5tract> ok, thanks!

[12:27] <ab5tract> omg...

[12:28] <ab5tract> that seems to have been the fix this whole time :O

[12:29] <discord-raku-bot> <Nemokosch> well done üí™

[12:30] <ab5tract> Thanks

[12:30] <ab5tract> Though it reproduces this bug now, lol

[12:30] <ab5tract> m: subset F where * && 5; my F $f = True

[12:30] <camelia> rakudo-moar 156fc2cfa: OUTPUT: ¬´Type check failed in assignment to $f; expected F but got Bool (Bool::True)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:31] <discord-raku-bot> <Nemokosch> > Could not build C3 linearization: ambiguous hierarchy

[12:31] <discord-raku-bot> <Nemokosch> I guess that answers my question about inheriting from ImplicitLookups...

[12:31] <ab5tract> Nemokosch: There's the answer of whether you can actually descend from it or not

[12:31] <tellable6> ab5tract, I'll pass your message to Nemokosch

[12:31] <ab5tract> m: subset F where * || False; my F $f = True

[12:31] <camelia> rakudo-moar 156fc2cfa: ( no output )

[12:32] <ab5tract> m: subset F where * || False; my F $f = False

[12:32] <camelia> rakudo-moar 156fc2cfa: ( no output )

[12:32] <nine> Nemokosch, you need to remove that inheritance from the classes that inherit from ContainerCreator. But then you're still left with the issue of combining their lists of names to resolve with your list

[12:33] <lizmat> nine: maybe reform this from a list to a hash format ?

[12:33] <lizmat> this probably won't be the last time this will occur...

[12:34] <nine> I would still try to avoid that for performance reasons. In this particular case I'd introduce a callback to ContainerCreator which the inheriting classes can call in their PRODUCE-IMPLICIT-LOOKUPS

[12:34] <lizmat> if we're talking performance, why all the WRAP / UNWRAP stuff then ?

[12:35] <discord-raku-bot> <Nemokosch> so they wouldn't inherit from ImplicitLookups again, just override the method in a way that takes ContainerCreator into account?

[12:35] <nine> I think the hope there is that we can optimize them away

[12:35] <nine> yes

[12:35] <discord-raku-bot> <Nemokosch> okay, that sounds fairly doable

[12:35] <lizmat> nine: I get that, but why are they there in the first place?

[12:35] <lizmat> as they'r only called inside nqp ?

[12:36] <lizmat> or are they not ?

[12:36] <nine> Not if it's Raku code creating the ASTs

[12:36] <nine> and manipulating ASTs

[12:37] <lizmat> ah, and they wouldn't get auto-hllized

[12:37] <lizmat> gotcha

[12:38] <discord-raku-bot> <Nemokosch> so the only thing to watch out for is the offset of the list of implicit lookups; the first position will be occupied by the inherited lookup

[12:39] <ab5tract> damnit, I celebrated too soon :(

[12:48] <discord-raku-bot> <Nemokosch> by the way - is ContainerCreator not a kind of abstract class?

[12:49] <nine> No, it's a role

[12:52] <discord-raku-bot> <Nemokosch> hm, anyway, where I'm getting at is that it might not even need to implement PRODUCE-IMPLICIT-LOOKUPS for anything but documentational purposes

[12:52] <discord-raku-bot> <Nemokosch> or well, providing a default

[12:52] <nine> true

[12:57] <discord-raku-bot> <Nemokosch> first occasion in a long time that the generated bootstrapping code was syntactically correct üòÑ

[12:59] <discord-raku-bot> <Nemokosch> what is the language of these bootstrapped rakumod files? Is this what "desugar'd Raku" looks like?

[13:00] <nine> No, the routine bodies are just plain old NQP

[13:00] <discord-raku-bot> <Nemokosch> or is this a syntactic skeleton over NQP? or are these the same thing? üôÇ

[13:02] <lizmat> I guess you could have a look at gen/moar/ast.nqp and tools/build/raku-ast-compiler.nqp

[13:03] <discord-raku-bot> <Nemokosch> just out of curiousity, where it fits the bigger picture

[13:03] <discord-raku-bot> <Nemokosch> like, is this a language written specifically for this purpose?

[13:04] <discord-raku-bot> <Nemokosch> or is this just NQP with a rakumod extension?

[13:05] <discord-raku-bot> <Nemokosch> I can't believe my eyes ü•π

[13:05] <discord-raku-bot> <Nemokosch> https://cdn.discordapp.com/attachments/633753335119478795/1072865763473506304/image.png

[13:05] <lizmat> it makes it easier to write the Raku bootstrap, which is what we otherwise we would have to do manually to get gen/moar/ast.nqp

[13:09] <discord-raku-bot> <Nemokosch> is the number of passing tests and spectests tracked somewhere?

[13:09] <discord-raku-bot> <el gatito (** advocate)> no one commented on my issue lmao

[13:09] <discord-raku-bot> <el gatito (** advocate)> for 2 hours

[13:10] <discord-raku-bot> <Nemokosch> ü§£ I mean, I get your point...

[13:10] <discord-raku-bot> <Nemokosch> I have issues that have no comments after months

[13:10] <discord-raku-bot> <Nemokosch> again, not saying that it's perfectly okay

[13:11] <discord-raku-bot> <Nemokosch> but for the time being, I can't see the situation change radically

[13:11] <discord-raku-bot> <Nemokosch> what you can do is to adopt the mindset that "this issue might wait for several months until somebody picks it up"

[13:12] <discord-raku-bot> <Nemokosch> so 1. don't put heaps of effort into writing an issue 2. on the other hand, be concise and clear, otherwise the whole issue will go down in the garbage collector of time

[13:15] <discord-raku-bot> <Nemokosch> should have run the test with and without separately

[13:16] <discord-raku-bot> <Nemokosch> anyway, I'm gonna save the output with, and then revert and see without

[13:24] <nine> el gatito (** advocate): see https://rootprompt.at for commercial options. I'm sure we could come up with a contract that guarantees response times.

[13:24] <lizmat> :-)

[14:34] *** ab5tract left
[14:37] <discord-raku-bot> <Nemokosch> um... something seemed off with the tests...

[14:37] *** epony left
[14:37] <discord-raku-bot> <Nemokosch> anyway, now I'm gonna run the same thing without, to see if the testing is off or the results simply got ruined

[14:44] *** epony joined
[14:50] <Geth> ¬¶ rakudo/main: db7ca2dd03 | (Elizabeth Mattijsen)++ | 9 files

[14:50] <Geth> ¬¶ rakudo/main: Add Unicode class to 6.c

[14:50] <Geth> ¬¶ rakudo/main: 

[14:50] <Geth> ¬¶ rakudo/main: Providing:

[14:50] <Geth> ¬¶ rakudo/main: - .version: the Unicode version supported

[14:50] <Geth> ¬¶ rakudo/main: - .NFG: Bool whether NFG supported

[14:50] <Geth> ¬¶ rakudo/main: 

[14:50] <Geth> ¬¶ rakudo/main: Removes the $?UNICODE-VERSION, which is now accessible as Unicode.version

[14:50] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/db7ca2dd03

[15:51] <Geth> ¬¶ rakudo/main: e3b9c66363 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[15:51] <Geth> ¬¶ rakudo/main: Make undefined variables complain properly

[15:51] <Geth> ¬¶ rakudo/main: 

[15:51] <Geth> ¬¶ rakudo/main: Also attempt to auto-declare variables when "no strict" is active.

[15:51] <Geth> ¬¶ rakudo/main: But that sadly still fails.  More research needed.

[15:51] <Geth> ¬¶ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e3b9c66363

[15:53] <lizmat> which brings us to 670 / 1355  :-)

[15:53] <lizmat> nine: could you explain why RakuAST::VarDeclaration::Simple.new(scope => 'our', name => $name).resolve-with($*R)

[15:54] <lizmat> would error out with: Cannot find method 'resolve-with' on object of type NQPMu

[15:54] <lizmat> and not with: Cannot find method 'new' on object of type NQPMu

[15:55] <lizmat> ah. of course, it instantiated NQPMu.new first 

[16:11] <discord-raku-bot> <Nemokosch> I'm jealous of the tests actually working :c

[17:22] *** codesections joined
[17:42] *** melezhik joined
[17:43] *** melezhik left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:32] <discord-raku-bot> <Nemokosch> okay... it doesn't actually compile! that explains a lot

[18:32] <discord-raku-bot> <Nemokosch> worked from the REPL, lol

[18:36] *** sena_kun joined
[18:44] <discord-raku-bot> <Nemokosch> > This element has not been resolved. Type: RakuAST::Type::Setting

[18:48] *** ab5tract joined
[18:48] <discord-raku-bot> <Nemokosch> I'm back to clueless üòû I can't see how it's different from how  RakuAST::TraitTarget::Variable works

[18:52] <lizmat> yeah, bootstrapping is hard  :-(

[18:55] <discord-raku-bot> <Nemokosch> and somehow it did the right thing in the REPL

[18:56] <discord-raku-bot> <Nemokosch> so something must be with the compilation step

[18:57] <lizmat> are you sure the Raku grammar was used in the REPL ?

[18:59] <discord-raku-bot> <Nemokosch> yes - the funny thing is, I wasn't going for the current stable behavior so it gives it away quickly

[18:59] <discord-raku-bot> <Nemokosch> my Int &foo  would be Callable now and I made it become Callable[Int]

[19:00] <discord-raku-bot> <Nemokosch> (the previous RakuAST behavior was simply a $-like Scalar, hence Int)

[19:00] <lizmat> ack

[19:02] <discord-raku-bot> <Nemokosch> say, I implement PRODUCE-IMPLICIT-LOOKUPS for a class that descends from ImplicitLookups. What performs the actual resolution?

[19:15] <lizmat> the resolver

[19:15] <lizmat> dinner&

[20:17] *** bisectable6 left
[20:17] *** bloatable6 left
[20:17] *** notable6 left
[20:17] *** nativecallable6 left
[20:17] *** committable6 left
[20:17] *** statisfiable6 left
[20:17] *** tellable6 left
[20:17] *** sourceable6 left
[20:17] *** shareable6 left
[20:17] *** unicodable6 left
[20:17] *** releasable6 left
[20:17] *** benchable6 left
[20:17] *** greppable6 left
[20:17] *** reportable6 left
[20:17] *** evalable6 left
[20:17] *** squashable6 left
[20:17] *** coverable6 left
[20:17] *** linkable6 left
[20:18] *** squashable6 joined
[20:18] *** sourceable6 joined
[20:18] *** greppable6 joined
[20:18] *** reportable6 joined
[20:18] *** bisectable6 joined
[20:18] *** evalable6 joined
[20:18] *** releasable6 joined
[20:18] *** bloatable6 joined
[20:19] *** benchable6 joined
[20:19] *** unicodable6 joined
[20:19] *** coverable6 joined
[20:19] *** notable6 joined
[20:19] *** shareable6 joined
[20:19] *** linkable6 joined
[20:19] *** tellable6 joined
[20:19] *** committable6 joined
[20:20] *** nativecallable6 joined
[20:20] *** statisfiable6 joined
[20:24] <discord-raku-bot> <Nemokosch> yes, makes sense... however, I haven't seen the involvement of the resolver, like where does it kick in?

[21:15] <nine> Look at src/Raku/ast/base.rakumod

[21:15] <nine> IMPL-CHECK

[22:09] *** sena_kun left
[22:17] <discord-raku-bot> <Nemokosch> is there something that can give a stack trace for compile-time errors?

[22:40] <discord-raku-bot> <Nemokosch> it feels hopeless without that

[23:13] <discord-raku-bot> <Nemokosch> no idea what changed but all of a sudden, tests started passing

[23:13] <discord-raku-bot> <Nemokosch> some tests, at least...

[23:13] <discord-raku-bot> <Nemokosch> but previously it looked like it was all graveyard

[23:46] <discord-raku-bot> <Nemokosch> it would be good to see a list of passing and failing tests

