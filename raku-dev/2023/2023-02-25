[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:01] *** MasterDuke joined
[02:04] *** squashable6 left
[02:06] *** squashable6 joined
[02:11] *** frost joined
[02:13] *** frost left
[02:40] *** frost joined
[02:58] *** frost left
[04:33] *** frost joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[08:26] *** linkable6 left
[08:26] *** statisfiable6 left
[08:26] *** notable6 left
[08:26] *** quotable6 left
[08:26] *** committable6 left
[08:26] *** greppable6 left
[08:26] *** unicodable6 left
[08:26] *** bloatable6 left
[08:26] *** tellable6 left
[08:26] *** evalable6 left
[08:26] *** benchable6 left
[08:26] *** nativecallable6 left
[08:26] *** shareable6 left
[08:26] *** sourceable6 left
[08:26] *** squashable6 left
[08:26] *** releasable6 left
[08:26] *** coverable6 left
[08:27] *** statisfiable6 joined
[08:27] *** shareable6 joined
[08:27] *** unicodable6 joined
[08:27] *** evalable6 joined
[08:27] *** squashable6 joined
[08:27] *** releasable6 joined
[08:28] *** linkable6 joined
[08:28] <[Tux]> Rakudo v2022.12-1-gd52342eb0 (v6.d) on MoarVM 2023.02-1-g9d2a4e609
[08:28] <[Tux]> csv-test-xs-20      0.407 -  0.499
[08:28] <[Tux]> csv-ip5xs           0.770 -  0.827
[08:28] <[Tux]> test-t --race       0.890 -  0.896
[08:28] <[Tux]> test-t              1.398 -  1.465
[08:28] *** committable6 joined
[08:28] <[Tux]> csv-parser          3.632 -  3.668
[08:28] <[Tux]> csv-ip5xs-20        5.190 -  5.670
[08:28] <[Tux]> test                6.181 -  6.212
[08:28] <[Tux]> test-t-20 --race    6.141 -  6.723
[08:28] <[Tux]> test-t-20          20.460 - 20.905
[08:28] *** bloatable6 joined
[08:28] *** sourceable6 joined
[08:28] *** coverable6 joined
[08:28] *** benchable6 joined
[08:28] *** quotable6 joined
[08:29] *** tellable6 joined
[08:29] *** nativecallable6 joined
[08:29] *** greppable6 joined
[08:29] *** notable6 joined
[09:38] *** ab5tract joined
[09:58] *** sena_kun joined
[10:00] *** NemokoschKiwi joined
[10:15] *** NemokoschKiwi left
[10:50] *** frost left
[10:51] *** frost left
[10:52] <ab5tract> nine: AFAICT everything is resolved in my PR
[10:52] <tellable6> 2023-02-21T18:17:04Z #raku-dev <nine> ab5tract: thanks! I hope to find time for a review tomorrow.
[11:18] *** NemokoschKiwi joined
[11:33] *** NemokoschKiwi left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[15:30] <ab5tract> in fact, something strange is going on. consider the question embedded in this code: `my $outer = True; { my $new-lexical-scope = True; my $is-it-a-new-package-though; };`
[15:32] <ab5tract> I ask because I'm actually trying to fix something that the current spectests don't cover, at least the ones that I got working. `module M { enum <A B>; }; dd +M::A` works and `module M { my enum <A B> }; dd + M::A` shouldn't.
[15:33] <ab5tract> I've got that fixed locally by getting the stash from the $!current-package when the enum is anonymous
[15:36] <ab5tract> But that breaks the t/spec/12-enums/anonymous.t because apparently when they re-declare 'foo' inside a new lexical scope, $!current-package is still global
[15:47] <ab5tract> alternatively, I could allow for replacing of declarations in a given package stash, instead of dying as I currently do. This would fit what base does, minus the raising of a 'Potential Difficulties' warning
[16:01] <ab5tract> I've opted for this alternative approach
[16:29] <lizmat> I guess we should make this a compile time error:
[16:29] <lizmat> m: constant a = INIT Date.today; dd a
[16:29] <camelia> rakudo-moar 95e0a1783: OUTPUT: «Mu !INIT_VALUES{'1'} = Mu␤»
[17:25] *** ab5tract left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:17] *** codesections left
[18:32] *** codesections joined
[18:56] *** ab5tract joined
[19:13] *** codesections left
[19:29] *** codesections joined
[21:31] *** guifa_ joined
[21:35] *** guifa left
[22:52] *** sena_kun left
[23:25] *** codesections left
