[02:29] *** nine_ left
[02:30] *** nine joined
[04:01] *** MasterDuke joined
[04:02] <MasterDuke> ab5tract: moarvm does do some optimizations to/for splice, https://github.com/MoarVM/MoarVM/blob/main/src/6model/reprs/VMArray.c#L944
[09:28] *** vrurg left
[11:11] <Geth> ¦ HexDump-Tiny/main: ae2388b304 | (Márton Polgár)++ (committed using GitHub Web editor) | .github/workflows/test.yml
[11:11] <Geth> ¦ HexDump-Tiny/main: Better functioning workflow
[11:11] <Geth> ¦ HexDump-Tiny/main: review: https://github.com/raku-community-modules/HexDump-Tiny/commit/ae2388b304
[13:12] <Geth> ¦ rakudo/main: 7f97bdd48c | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | tools/templates/L10N/README.md
[13:12] <Geth> ¦ rakudo/main: Fix typo
[13:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7f97bdd48c
[14:08] *** vrurg joined
[14:11] <vrurg> Anybody with good understanding of nqp::p6capturelex semantics around?
[14:17] <lizmat> sadly, no docs at https://github.com/Raku/nqp/blob/main/docs/ops.markdown  :-(
[14:19] <vrurg> Nah, I know. And I never really had to deal with closures before. And without it can't finish the last PR. :(
[15:30] <ab5tract> It's not completely undocumented... 
[15:30] <ab5tract> Given the specified code object, sets its outer to the current scope.
[15:30] <ab5tract> Must be called in the immediate outer scope of the block in question.
[15:31] <ab5tract> Looking at the Java implementation, it looks like that's exactly what it does.
[15:32] <ab5tract> vrurg: what issues are you facing?
[15:34] <vrurg> There is a thunk (Attribute $!container_initializer). It used to create a container using a statically resolved type. But in order to work with generics it must use QAST::Var to resolve lexicals. And whatever I do, I can't make it blend into the closure of role body.
[15:38] <vrurg> It starts appearing to me though that the problem is that attribute's container_initializer code object has to be replaced with a closure. And that's going to be some headache...
[16:25] <ab5tract> ouch :/
[16:32] <[Tux]> Rakudo v2023.11-71-g7f97bdd48 (v6.d) on MoarVM 2023.11-1-gbe03e26fc
[16:32] <[Tux]> csv-test-xs-20      0.140 -  0.141
[16:32] <[Tux]> csv-ip5xs           0.272 -  0.282
[16:32] <[Tux]> test-t --race       0.272 -  0.287
[16:32] <[Tux]> test-t              0.420 -  0.425
[16:32] <[Tux]> test-t-20 --race    1.230 -  1.231
[16:32] <[Tux]> csv-ip5xs-20        1.142 -  1.450
[16:32] <[Tux]> csv-parser          1.545 -  1.577
[16:32] <[Tux]> test                1.923 -  1.972
[16:32] <[Tux]> test-t-20           5.059 -  5.328
[16:54] <vrurg> Things are even more weird than I though. When create_BUILDPLAN method checks the container initializer code – it gets correctly instantiated result meaning that it gets a closure. But the BUILDALL ends up calling the original and get uninstatiated result! 
[16:55] <vrurg> I'll be afk for a while, but it's something fishy out there...
[17:05] <lizmat> The whole BUILDPLAN logic needs a makeover for RakuAST
[17:09] <ab5tract> do we already have a list of changes or new requirements?
[17:11] <lizmat> everything that BUILDPLAN currently supports?
[17:15] <ab5tract> those are the old requirements, no? but why is it getting reworked? that's an essential question to answer before any how of a rework can begin
[17:16] <lizmat> because BUILDPLAN is a hack: it should create the instantiation code using RakuAST classes from the attribute information at QAST time
[17:17] <lizmat> actually, set up the rakuAST at class CHECK time, and then have that QASTed
[17:19] <ab5tract> now it makes total sense to me. I can even picture it a little bit
[17:19] <ab5tract> thanks for breaking it down :)
[17:19] <lizmat> basically create the "bless" method on the class
[17:20] <lizmat> I'm not sure BUILDALL is needed anymore... but I may be wielding the chainsaw a bit too much there  :-)
[17:21] <ab5tract> :)
[17:21] <ab5tract> is it maybe worth creating a problem solving ticket for this?
[17:21] <lizmat> feels more like a Rakudo issue to me
[17:22] <ab5tract> ok
[17:22] <lizmat> ah, you mean about BUILDALL ?
[17:22] <ab5tract> yeah
[17:22] <lizmat> that would be more of a problem solving one, indeed
[17:46] <[Coke]> https://gist.github.com/coke/ca581925400ec6618cb3376ea153cbf5 - all failing nqp doc tests at the moment.
[17:47] <[Coke]> note that p6capturelex does not appear in the list (or in the docs)
[17:48] <[Coke]> which means the test isn't being clever enough to find ops in the source.
[17:48] <[Coke]> (I don't see p6capturelex in nqp/src either?)
[17:50] <lizmat> https://github.com/rakudo/rakudo/blob/main/docs/ops.markdown#p6capturelex
[17:50] <[Coke]> ... why did my ack not find that...
[17:51] <lizmat> because you looked in nqp?
[17:52] <lizmat> i just did: rak p6capturelex   in the rakudo dir
[17:53] <[Coke]> I'm on main in [email@hidden.address] git pull --rebase, grep p6capturelex docs/ops.markdown -- no results. wtf.
[17:53] <[Coke]> I'm on main in git@github.com:Raku/nqp.git, git pull --rebase, grep p6capturelex docs/ops.markdown -- no results. wtf.
[17:53] <[Coke]> (also we should rename those to .md for consistency)
[17:55] <[Coke]> this is so weird, wtf.
[17:56] <[Coke]> last commit is ad92dc5a5 ?
[17:56] <linkable6> (2023-11-21) https://github.com/Raku/nqp/commit/ad92dc5a52 [release] Bump VERSION to 2023.11
[18:00] <[Coke]> ... DO
[18:00] <[Coke]> you said rakudo, not nqp
[18:00] <[Coke]> er, D'OH
[18:01] <[Coke]> I forgot we had a separate one for custom ops (that we are not testing)
[18:10] <vrurg> I wish there be an explanation to the magic of p6capturelex. Looking at QAST, there is a block for a code object; then there is p6capturelex over the block with return value never bound; then the method object gets found on a ClassHOW (means – pulled in from the method table of class HOW), invoked – and it's the closure, which is invoked. But how? Something I'm missing here.
[18:41] *** sena_kun joined
[19:14] *** notna joined
[19:23] *** notna left
[19:59] <Geth> ¦ rakudo/main: d62f7780f2 | (Elizabeth Mattijsen)++ | 2 files
[19:59] <Geth> ¦ rakudo/main: RakuAST: move module update logic to RakuAST::L10N
[19:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d62f7780f2
[19:59] <Geth> ¦ rakudo/main: 2d1ce780b8 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.rakumod
[19:59] <Geth> ¦ rakudo/main: RakuAST: allow slangs to have a full name
[19:59] <Geth> ¦ rakudo/main: 
[19:59] <Geth> ¦ rakudo/main: Allowing to say .DEPARSE("TLH:auth<zef:lizmat>") to use the Klingon
[19:59] <Geth> ¦ rakudo/main: localization as made identified by that string
[19:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2d1ce780b8
[20:45] <vrurg> One stupid typo in a test code – and hours of lost time. Oh, my...
[20:46] <vrurg> J.K. Rakuling, "Stupid Typo And The Curse Of Confused Coder"
[20:53] <ab5tract> does that mean that you are unstuck vrurg?
[20:54] <vrurg> Yep. It was, presumably, working yesterday at some point.
[20:54] <ab5tract> well, at least there is a positive outcome :)
[20:56] <vrurg> But the closures implementation details are still confusing. To get a closure of CI it required: a) have 'outer' annotation on CI block QAST; b) install p6capturelex for the block in role's body; c) use p6capturelexwhere in BOOTSTRAP while instatinating an Attribute.
[20:58] <vrurg> I can only guess that p6capturelexwhere causes the block to search in its caller stack the callsite which is specified with 'outer'. But what is the role of p6capturelex in this?
[21:01] <[Coke]> what was CI again ?
[21:23] <ab5tract> isn't p6capturelex responsible fhere or allowing the block to actually share the scope of the role's body?
[21:23] <ab5tract> but yeah, it really doesn't sound like it was a straightforward process to get it working
[21:26] <vrurg> [Coke]: container initializer
[21:27] <vrurg> ab5tract: it is clearly responsible. It just looks like it is quite different outcomes one gets when uses op return value and when just applies it to code object clone.
[21:27] <vrurg> It gets us back to the lack of documentation in this field.
[21:29] <Geth> ¦ roast: vrurg++ created pull request #850: Add test for instantiation of a generic class
[21:29] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/850
[21:29] <ab5tract> yeah, indeed.
[22:31] *** kjp left
[22:34] *** kjp joined
[23:03] *** sena_kun left
