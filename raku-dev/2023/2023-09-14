[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:42] *** leont left
[00:42] *** leont joined
[01:23] *** Geth left
[02:23] *** benchable6 left
[02:23] *** quotable6 left
[02:23] *** squashable6 left
[02:23] *** tellable6 left
[02:23] *** committable6 left
[02:23] *** sourceable6 left
[02:23] *** unicodable6 left
[02:23] *** notable6 left
[02:23] *** nativecallable6 left
[02:23] *** releasable6 left
[02:23] *** greppable6 left
[02:23] *** statisfiable6 left
[02:23] *** bisectable6 left
[02:23] *** linkable6 left
[02:23] *** evalable6 left
[02:23] *** bloatable6 left
[02:23] *** coverable6 left
[02:23] *** shareable6 left
[02:23] *** reportable6 left
[02:23] *** notable6 joined
[02:23] *** nativecallable6 joined
[02:23] *** tellable6 joined
[02:24] *** shareable6 joined
[02:24] *** linkable6 joined
[02:24] *** unicodable6 joined
[02:24] *** sourceable6 joined
[02:24] *** bisectable6 joined
[02:24] *** reportable6 joined
[02:24] *** benchable6 joined
[02:24] *** greppable6 joined
[02:24] *** evalable6 joined
[02:24] *** statisfiable6 joined
[02:25] *** coverable6 joined
[02:25] *** bloatable6 joined
[02:25] *** committable6 joined
[02:25] *** squashable6 joined
[02:26] *** quotable6 joined
[02:26] *** releasable6 joined
[04:36] *** unicodable6 left
[04:36] *** reportable6 left
[04:36] *** nativecallable6 left
[04:36] *** greppable6 left
[04:36] *** sourceable6 left
[04:36] *** statisfiable6 left
[04:36] *** tellable6 left
[04:36] *** committable6 left
[04:36] *** evalable6 left
[04:36] *** quotable6 left
[04:36] *** notable6 left
[04:36] *** coverable6 left
[04:36] *** bloatable6 left
[04:36] *** squashable6 left
[04:36] *** releasable6 left
[04:36] *** bisectable6 left
[04:36] *** linkable6 left
[04:36] *** shareable6 left
[04:36] *** benchable6 left
[04:36] *** bisectable6 joined
[04:37] *** coverable6 joined
[04:37] *** notable6 joined
[04:37] *** statisfiable6 joined
[04:37] *** nativecallable6 joined
[04:37] *** tellable6 joined
[04:37] *** releasable6 joined
[04:37] *** sourceable6 joined
[04:37] *** quotable6 joined
[04:38] *** reportable6 joined
[04:38] *** bloatable6 joined
[04:38] *** benchable6 joined
[04:38] *** unicodable6 joined
[04:39] *** committable6 joined
[04:39] *** squashable6 joined
[04:39] *** evalable6 joined
[04:39] *** linkable6 joined
[04:39] *** shareable6 joined
[04:39] *** greppable6 joined
[05:39] *** nativecallable6 left
[05:39] *** coverable6 left
[05:39] *** evalable6 left
[05:39] *** bloatable6 left
[05:39] *** benchable6 left
[05:39] *** committable6 left
[05:39] *** linkable6 left
[05:39] *** notable6 left
[05:39] *** shareable6 left
[05:39] *** squashable6 left
[05:39] *** sourceable6 left
[05:39] *** reportable6 left
[05:39] *** releasable6 left
[05:39] *** tellable6 left
[05:39] *** unicodable6 left
[05:39] *** greppable6 left
[05:39] *** quotable6 left
[05:39] *** bisectable6 left
[05:39] *** statisfiable6 left
[05:40] *** sourceable6 joined
[05:40] *** benchable6 joined
[05:40] *** squashable6 joined
[05:40] *** bisectable6 joined
[05:40] *** linkable6 joined
[05:40] *** committable6 joined
[05:40] *** unicodable6 joined
[05:41] *** bloatable6 joined
[05:41] *** nativecallable6 joined
[05:41] *** statisfiable6 joined
[05:41] *** evalable6 joined
[05:41] *** greppable6 joined
[05:41] *** releasable6 joined
[05:42] *** coverable6 joined
[05:42] *** quotable6 joined
[05:42] *** tellable6 joined
[05:42] *** shareable6 joined
[05:42] *** notable6 joined
[05:42] *** reportable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:11] *** jgaz left
[06:13] *** jgaz joined
[07:28] *** rba left
[07:28] *** rba_ joined
[07:28] *** rba_ is now known as rba

[07:47] *** Geth joined
[07:56] *** Geth left
[07:56] *** Geth joined
[08:24] *** finanalyst joined
[08:53] *** squashable6 left
[08:54] *** squashable6 joined
[10:29] *** tellable6 left
[10:29] *** notable6 left
[10:29] *** squashable6 left
[10:29] *** quotable6 left
[10:29] *** benchable6 left
[10:29] *** shareable6 left
[10:29] *** evalable6 left
[10:29] *** unicodable6 left
[10:29] *** committable6 left
[10:29] *** statisfiable6 left
[10:29] *** bisectable6 left
[10:29] *** coverable6 left
[10:29] *** linkable6 left
[10:29] *** sourceable6 left
[10:29] *** reportable6 left
[10:29] *** bloatable6 left
[10:29] *** greppable6 left
[10:29] *** nativecallable6 left
[10:29] *** releasable6 left
[10:29] *** quotable6 joined
[10:29] *** coverable6 joined
[10:30] *** bloatable6 joined
[10:30] *** releasable6 joined
[10:30] *** squashable6 joined
[10:31] *** bisectable6 joined
[10:31] *** sourceable6 joined
[10:31] *** evalable6 joined
[10:31] *** committable6 joined
[10:31] *** notable6 joined
[10:31] *** shareable6 joined
[10:31] *** linkable6 joined
[10:32] *** benchable6 joined
[10:32] *** greppable6 joined
[10:32] *** reportable6 joined
[10:32] *** statisfiable6 joined
[10:32] *** tellable6 joined
[10:32] *** nativecallable6 joined
[10:32] *** unicodable6 joined
[10:45] *** guifa left
[11:59] *** finanalyst left
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:01] *** tonyo left
[12:01] *** tonyo joined
[13:00] <gfldex> m: my &foo = BEGIN 'proto sub foo(|) {*}'.EVAL; multi sub foo($i) { }; foo(42);

[13:00] <camelia> rakudo-moar 1504fc2f6: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Redeclaration of routine 'foo'.  Did you mean to declare a multi-sub?␤at <tmp>:1␤------>  foo(|) {*}'.EVAL; multi sub foo($i) { }⏏; foo(42);␤    expecting any of:␤        horizontal whi…»

[13:00] <gfldex> m: constant &foo = BEGIN 'proto sub foo(|) {*}'.EVAL; multi sub foo($i) { }; foo(42);

[13:00] <camelia> rakudo-moar 1504fc2f6: ( no output )

[13:00] <gfldex> m: constant &foo = BEGIN 'proto sub foo(|) { nextwith() }'.EVAL; multi sub foo($i) { }; foo(42);

[13:00] <camelia> rakudo-moar 1504fc2f6: OUTPUT: «nextwith is not in the dynamic scope of a dispatcher␤  in sub foo at EVAL_0 line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:01] <gfldex> Is there any way to make that work?

[13:01] <gfldex> This is an urgent question. A blogpost depends on it! :->

[13:02] <lizmat> what should the nextwith dispatch to?

[13:03] <gfldex> m: constant &foo = BEGIN 'proto sub foo(|) { nextwith(42) }'.EVAL; multi sub foo($i) { }; foo(42);

[13:03] <camelia> rakudo-moar 1504fc2f6: OUTPUT: «nextwith is not in the dynamic scope of a dispatcher␤  in sub foo at EVAL_0 line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:03] <gfldex> Call the next candidate.

[13:04] <gfldex> This is golfed and as such makes little sense.

[13:04] <lizmat> but you're calling it in the proto?   That's generally where the buck ends ?

[13:05] <gfldex> ungolfed: https://gist.github.com/gfldex/10c78c784822bf4e673cb2f15326279d

[13:05] <gfldex> Then I may not understand proto (what is likely).

[13:07] <lizmat> without optimizations, the proto sub foo   is the sub that gets called whenever you do "foo()"

[13:07] <lizmat> that will then look at the given args and decide which of its candidates to actually run

[13:08] <lizmat> (which is basically what {*} does)

[13:08] <lizmat> proto foo(|) {*}

[13:08] <lizmat> is just short for:

[13:08] <gfldex> I want to modify args in the proto before the dispatch continues.

[13:08] <lizmat> proto sub foo(|) { {*} }

[13:09] <lizmat> samewith ?

[13:11] <gfldex> samewith gives at least a different error message.

[13:14] <vrurg> And yet it'd be better to have a special candidate which modifies and re-dispatches to the final one.

[13:18] <vrurg> Or use a `my proto` in the lexical scope of your non-multi quasi-enum.

[13:23] <gfldex> m: constant &foo = BEGIN 'multi sub foo(|) { samewith(42) }'.EVAL; multi sub foo($i) { }; foo(42);

[13:23] <camelia> rakudo-moar 1504fc2f6: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Redeclaration of routine 'foo'.  Did you mean to declare a multi-sub?␤at <tmp>:1␤------> ewith(42) }'.EVAL; multi sub foo($i) { }⏏; foo(42);␤    expecting any of:␤        horizontal whi…»

[13:23] <gfldex> I don't get that problem with a proto.

[13:33] <vrurg> Onlystar is the only way to start looking for candidates.

[13:37] <lizmat> A trick I've used in some of the P5 modules is:

[13:37] <lizmat> BEGIN my &old-foo = &foo;

[13:38] <lizmat> proto sub foo(|c) { if dispatch-new { {*} } else { old-foo(|c) }

[14:09] <Geth> ¦ rakudo/main: 04ec9234cb | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[14:09] <Geth> ¦ rakudo/main: RakuAST: streamline handling of deprecated charnames

[14:09] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/04ec9234cb

[14:11] *** Geth left
[14:12] *** Geth joined
[14:53] <Geth> ¦ rakudo/main: cfcf9fb3e9 | (Elizabeth Mattijsen)++ | 2 files

[14:53] <Geth> ¦ rakudo/main: RakuAST: Streamline slang nibbling

[14:53] <Geth> ¦ rakudo/main: 

[14:53] <Geth> ¦ rakudo/main: - dynvars should be uppercase, so @*NIBBLES instead of @*nibbles

[14:53] <Geth> ¦ rakudo/main: - use native ints where possible

[14:53] <Geth> ¦ rakudo/main: - collect nibbles in lexical array, publish to dynvar at end

[14:53] <Geth> ¦ rakudo/main: - other shortcuts to dynvars added

[14:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/cfcf9fb3e9

[14:56] *** SmokeMachine left
[14:57] *** leont left
[14:57] *** zostay left
[14:57] *** tbrowder__ left
[14:57] *** kawaii left
[14:59] *** zostay joined
[14:59] *** tbrowder__ joined
[14:59] *** SmokeMachine joined
[15:00] *** leont joined
[15:00] *** kawaii joined
[15:11] <[Tux]> Rakudo v2023.08-217-gcfcf9fb3e (v6.d) on MoarVM 2023.08-3-g2f8234c22

[15:11] <[Tux]> csv-test-xs-20      0.344 -  0.398

[15:11] <[Tux]> csv-ip5xs           0.905 -  1.001

[15:11] <[Tux]> test-t --race       0.907 -  1.228

[15:11] <[Tux]> test-t              1.513 -  1.575

[15:11] <[Tux]> csv-parser          3.868 -  4.462

[15:11] <[Tux]> csv-ip5xs-20        5.418 -  5.989

[15:11] <[Tux]> test-t-20 --race    6.787 -  7.587

[15:11] <[Tux]> test                7.435 -  7.459

[15:11] <[Tux]> test-t-20          21.498 - 22.615

[17:01] * [Coke] wonders if any of that csv testing can be done with rakuast. Guessing not yet!

[17:08] <[Coke]> nifty: https://news.perlfoundation.org/post/maintaining_perl_dave_mitchell_june_august_2023

[17:08] <[Coke]> (perl not raku but nice to see some insight into core hacking on something else)

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:40] *** finanalyst joined
[19:51] *** |Tux| left
[19:51] *** |Tux| joined
[21:26] *** linkable6 left
[21:26] *** evalable6 left
[21:27] *** linkable6 joined
[21:28] *** evalable6 joined
[22:28] *** notable6 left
[22:28] *** unicodable6 left
[22:28] *** quotable6 left
[22:28] *** statisfiable6 left
[22:28] *** bloatable6 left
[22:28] *** greppable6 left
[22:28] *** bisectable6 left
[22:28] *** squashable6 left
[22:28] *** shareable6 left
[22:28] *** committable6 left
[22:28] *** evalable6 left
[22:28] *** coverable6 left
[22:28] *** sourceable6 left
[22:28] *** releasable6 left
[22:28] *** nativecallable6 left
[22:28] *** benchable6 left
[22:28] *** reportable6 left
[22:28] *** tellable6 left
[22:28] *** linkable6 left
[22:28] *** shareable6 joined
[22:28] *** reportable6 joined
[22:29] *** releasable6 joined
[22:29] *** greppable6 joined
[22:29] *** quotable6 joined
[22:29] *** statisfiable6 joined
[22:29] *** unicodable6 joined
[22:29] *** tellable6 joined
[22:29] *** bisectable6 joined
[22:30] *** coverable6 joined
[22:30] *** linkable6 joined
[22:30] *** squashable6 joined
[22:30] *** bloatable6 joined
[22:30] *** notable6 joined
[22:30] *** sourceable6 joined
[22:30] *** committable6 joined
[22:31] *** nativecallable6 joined
[22:31] *** benchable6 joined
[22:31] *** evalable6 joined
[23:23] *** ilogger2 left
[23:25] *** ilogger2 joined
