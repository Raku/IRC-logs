[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:09] *** vrurg_ joined
[00:11] *** vrurg left
[01:08] *** MasterDuke left
[02:37] *** epony left
[02:59] *** epony joined
[05:25] *** sourceable6 left
[05:25] *** squashable6 left
[05:25] *** benchable6 left
[05:25] *** unicodable6 left
[05:25] *** tellable6 left
[05:25] *** shareable6 left
[05:25] *** evalable6 left
[05:25] *** linkable6 left
[05:25] *** coverable6 left
[05:25] *** nativecallable6 left
[05:25] *** statisfiable6 left
[05:25] *** bloatable6 left
[05:25] *** reportable6 left
[05:25] *** notable6 left
[05:25] *** quotable6 left
[05:25] *** releasable6 left
[05:25] *** greppable6 left
[05:25] *** bisectable6 left
[05:25] *** committable6 left
[05:25] *** statisfiable6 joined
[05:25] *** reportable6 joined
[05:25] *** linkable6 joined
[05:26] *** quotable6 joined
[05:26] *** nativecallable6 joined
[05:26] *** coverable6 joined
[05:26] *** unicodable6 joined
[05:26] *** tellable6 joined
[05:26] *** bisectable6 joined
[05:26] *** notable6 joined
[05:27] *** releasable6 joined
[05:27] *** committable6 joined
[05:27] *** evalable6 joined
[05:27] *** greppable6 joined
[05:27] *** benchable6 joined
[05:27] *** squashable6 joined
[05:27] *** shareable6 joined
[05:28] *** bloatable6 joined
[05:28] *** sourceable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:58] *** epony left
[07:24] *** epony joined
[07:41] <nine> Nemokosch: no?
[07:42] <tellable6> nine, I'll pass your message to Nemokosch
[07:42] <nine> MasterDuke: no?
[07:42] <tellable6> nine, I'll pass your message to MasterDuke
[07:42] <nine> Nemokosch: disregard, ENOCOFFEE
[07:42] <tellable6> nine, I'll pass your message to Nemokosch
[07:48] <nine> MasterDuke: you are looking for the wrong name. Should be '&one', not 'one'. But you don't have to do that for the called name as it's going to be handled in method resolve-with already. self.resolution gives you the result of that.
[07:48] <tellable6> nine, I'll pass your message to MasterDuke
[08:38] *** sena_kun joined
[08:47] <nine> lizmat: looks like the phaser handling code has a fatal flaw: it doesn't take phasers added via traits (like is-DEPRECATED) into account.
[09:00] *** normietotechie[m left
[09:16] <lizmat> hmmm
[09:17] <lizmat> actually, feels to me we don't actually need a phaser for that in the RakuAST world?
[09:18] <lizmat> the QAST handling of the code could just codegen the call to &DEPRECATED into the QAST directly?
[09:21] <nine> What about other traits that add ENTER phasers?
[09:22] <nine> FWIW I retract the "fatal". I think we just need to extend it to add calls to phasers added this way. Might only be a bit difficult to distinguish them from the ones created via RakuASt.
[09:23] <lizmat> am currently deep into the declarator doc business...  will look into it after that
[09:23] * nine might beat you to it
[09:24] <lizmat> that would be fine  :-)
[09:36] <nine> Oh....a more severe flaw in the ENTER phaser specifically is that it's not thread safe. The Scalar for the result is shared between all callers.
[09:38] <nine> The trick with writing the result into a Scalar works for INIT because that's guaranteed to only run once. ENTER needs to write its result into a local variable.
[09:41] <lizmat> hmmm ... I recall just having copied qast from the legacy grammar...  wouldn't be surprised that would be an issue in the legacy grammar as well ?
[09:45] <nine> No, that creates a local: $enclosing.unique('enter_result_');
[09:48] <nine> nine@sphinx:~/rakudo (main *=)> RAKUDO_RAKUAST=1 ./rakudo-m -e 'my $bag = await((^1000).map({start { ENTER { $_ } }})); say $bag.Bag'
[09:48] <nine> Bag(999(1000))
[09:48] <nine> Bag(0 1 10 100 101 102 103 104 105 106 107 108 109 11 110 111 112 113 114 115 116 117 118 119 12 120 121 122 123 124 125 126 127 128 ...
[09:48] <nine> nine@sphinx:~/rakudo (main *=)> RAKUDO_RAKUAS=1 ./rakudo-m -e 'my $bag = await((^1000).map({start { ENTER { $_ } }})); say $bag.Bag'
[09:49] <nine> But first, groceries and breakfast...
[10:40] <lizmat> hmmm.. I wonder whether the check for existence of private methods shouldn't be a CHECK time thing in RakuAST, rather than an optimizer thing
[10:41] <lizmat> something to run on compose of a class?
[10:55] <nine> definitely CHECK time
[11:28] *** squashable6 left
[11:29] *** squashable6 joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:02] *** reportable6 left
[12:02] *** reportable6 joined
[13:11] *** Xliff joined
[13:11] <Geth> ¦ rakudo/main: 283eb48471 | (Stefan Seifert)++ | 3 files
[13:11] <Geth> ¦ rakudo/main: RakuAST: support need statements
[13:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/283eb48471
[13:11] <Geth> ¦ rakudo/main: 4682d2ed66 | (Stefan Seifert)++ | 2 files
[13:11] <Geth> ¦ rakudo/main: RakuAST: make ENTER phaser results thread safe
[13:11] <Geth> ¦ rakudo/main: 
[13:11] <Geth> ¦ rakudo/main: We must not share the Scalar the result of an ENTER phaser gets stored
[13:11] <Geth> ¦ rakudo/main: in between callers. Creating a Scalar at compile time works for INIT
[13:11] <Geth> ¦ rakudo/main: phasers because they are guaranteed to only run once in the life time of
[13:12] <Geth> ¦ rakudo/main: a program. ENTER can be called multiple times and in parallel, so we
[13:12] <Geth> ¦ rakudo/main: need to store the result in a local variable instead.
[13:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4682d2ed66
[13:12] <Geth> ¦ rakudo/main: 45dd84f664 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod
[13:12] <Geth> ¦ rakudo/main: RakuAST: support ENTER phasers added by traits
[13:12] <Geth> ¦ rakudo/main: 
[13:12] <Geth> ¦ rakudo/main: The DEPRECATED adds an ENTER phaser via meta methods. This phaser is not
[13:12] <Geth> ¦ rakudo/main: part of the source code but purely a runtime object. We need to generate
[13:12] <Geth> ¦ rakudo/main: calling code for these as well.
[13:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/45dd84f664
[13:29] *** Xliff left
[16:07] *** Util joined
[17:32] *** MasterDuke joined
[17:33] <MasterDuke> .
[17:33] <tellable6> 2023-04-08T07:42:10Z #raku-dev <nine> MasterDuke: no?
[17:33] <tellable6> hey MasterDuke, you have a message: https://gist.github.com/0c272ba3924ba46db6d04c49d5d75129
[17:37] <MasterDuke> heh. the error message this work was about even suggests `&one`. i've made that mistake before, and never seem to learn from it...
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:56] *** sena_kun left
[18:56] *** sena_kun joined
[19:24] *** ab5tract joined
[19:30] *** ab5tract left
[21:26] *** squashable6 left
[21:27] *** squashable6 joined
[21:29] *** sena_kun left
[22:19] *** epony left
[23:24] *** shareable6 left
[23:24] *** squashable6 left
[23:24] *** statisfiable6 left
[23:24] *** committable6 left
[23:24] *** quotable6 left
[23:24] *** unicodable6 left
[23:24] *** sourceable6 left
[23:24] *** benchable6 left
[23:24] *** notable6 left
[23:24] *** bisectable6 left
[23:24] *** greppable6 left
[23:24] *** releasable6 left
[23:24] *** reportable6 left
[23:24] *** tellable6 left
[23:24] *** linkable6 left
[23:24] *** coverable6 left
[23:24] *** nativecallable6 left
[23:24] *** evalable6 left
[23:25] *** evalable6 joined
[23:25] *** releasable6 joined
[23:25] *** shareable6 joined
[23:25] *** tellable6 joined
[23:26] *** statisfiable6 joined
[23:26] *** benchable6 joined
[23:26] *** quotable6 joined
[23:26] *** nativecallable6 joined
[23:26] *** notable6 joined
[23:26] *** sourceable6 joined
[23:26] *** coverable6 joined
[23:26] *** linkable6 joined
[23:27] *** greppable6 joined
[23:27] *** committable6 joined
[23:27] *** bisectable6 joined
[23:27] *** unicodable6 joined
[23:27] *** squashable6 joined
[23:27] *** reportable6 joined
