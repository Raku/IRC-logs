[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:13] *** MasterDuke left
[03:34] *** linkable6 left
[03:34] *** evalable6 left
[03:35] *** evalable6 joined
[03:35] *** linkable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:43] *** squashable6 left
[07:43] *** epony left
[07:43] *** bloatable6 left
[07:43] *** coverable6 left
[07:43] *** statisfiable6 left
[07:43] *** tellable6 left
[07:43] *** sourceable6 left
[07:43] *** shareable6 left
[07:43] *** bisectable6 left
[07:43] *** nativecallable6 left
[07:43] *** benchable6 left
[07:43] *** greppable6 left
[07:43] *** codesections left
[07:43] *** kjp left
[07:43] *** jdv left
[07:43] *** samcv left
[07:43] *** bartolin_ left
[07:43] *** jjatria left
[07:43] *** bartolin joined
[07:43] *** jjatria joined
[07:43] *** kjp joined
[07:44] *** jdv joined
[07:44] *** codesections joined
[07:45] *** samcv joined
[07:58] *** kjp left
[08:03] *** sourceable6 joined
[08:03] *** bisectable6 joined
[08:03] *** shareable6 joined
[08:03] *** tellable6 joined
[08:03] *** benchable6 joined
[08:03] *** nativecallable6 joined
[08:03] *** statisfiable6 joined
[08:03] *** squashable6 joined
[08:03] *** coverable6 joined
[08:03] *** bloatable6 joined
[08:03] *** greppable6 joined
[08:12] *** sena_kun joined
[09:02] *** epony joined
[09:19] *** sena_kun left
[09:49] *** kjp joined
[09:50] <lizmat> Is there a reason why we just use strings for declarator docs, instead of StrLiterals ?

[09:51] <lizmat> *couldn't

[09:51] <lizmat> the only reason I could think of is deparsing, but that could be easily fixed

[09:52] <lizmat> it feels a bit weird to translate strings into StrLiterals to put them into RakuAST objects, to only have them converted back to strings at CHECK time

[09:52] <lizmat> to wind up in $=pod

[10:03] *** sena_kun joined
[10:12] *** sena_kun left
[10:12] *** Altai-man joined
[10:31] <Geth> ¦ rakudo/main: 8f5bb47fd7 | (Elizabeth Mattijsen)++ | 3 files

[10:31] <Geth> ¦ rakudo/main: RakuAST: store declarator docs as Str rather than StrLiteral

[10:31] <Geth> ¦ rakudo/main: 

[10:31] <Geth> ¦ rakudo/main: Declarator docs can only be strings really, so it feels like a lot

[10:31] <Geth> ¦ rakudo/main: of work converting them to StrLiterals only to have them be converted

[10:31] <Geth> ¦ rakudo/main: back to Str at CHECK time.  Any post-processing of strings (such as

[10:31] <Geth> ¦ rakudo/main: support for markup) would be done at CHECK time anyway.

[10:31] <Geth> ¦ rakudo/main: 

[10:31] <Geth> ¦ rakudo/main: Did this in a single revertable commit, for possible convenience.

[10:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8f5bb47fd7

[11:15] <Geth> ¦ rakudo/main: f9027be330 | (Elizabeth Mattijsen)++ | 2 files

[11:15] <Geth> ¦ rakudo/main: RakuAST: add a HLL RakuAST::Doc::DeclaratorTarget stub

[11:15] <Geth> ¦ rakudo/main: 

[11:15] <Geth> ¦ rakudo/main: Where we can handle DeclaratorTarget logic in a HLL way

[11:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f9027be330

[11:42] <Geth> ¦ rakudo/main: 56d63c96c1 | (Elizabeth Mattijsen)++ | 6 files

[11:42] <Geth> ¦ rakudo/main: RakuAST: stub in support for RakuAST::Var::Pod::Pod aka $=pod

[11:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/56d63c96c1

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:04] *** ab5tract joined
[12:21] *** ab5tract left
[12:52] <lizmat> nine: it looks like the "attaching" logic for "compunit" is finding the outer CU, instead of the inner CU of an EVAL

[14:01] <Geth> ¦ rakudo/main: 5f66d8534e | (Elizabeth Mattijsen)++ | t/12-rakuast/var.rakutest

[14:01] <Geth> ¦ rakudo/main: RakuAST: make test pass when using the legacy grammar

[14:01] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5f66d8534e

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: 811f42b96e | (Elizabeth Mattijsen)++ | 3 files

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: Add "is-monotonically-increasing" method to Iterators

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: 

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: Returns False by default.  If returning True, then .sort() can pass

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: on the underlying iterator unchanged in a new Seq.

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: 

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: Added many Range iterators to set that, so that now:

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: 

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing:     say (1..*).sort;  # (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14...

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: 

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: will work, rather than throwing because the underlying iterator is lazy.

[14:04] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: review: https://github.com/rakudo/rakudo/commit/811f42b96e

[14:05] <Geth> ¦ rakudo: lizmat++ created pull request #5243: Add "is-monotonically-increasing" method to Iterators

[14:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5243

[14:14] *** Guest10 joined
[14:16] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: 2e3f7020c5 | (Elizabeth Mattijsen)++ | 2 files

[14:16] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: Make is-monotonically-increasing check more general

[14:16] <Geth> ¦ rakudo/lizmat-is-monotonically-increasing: review: https://github.com/rakudo/rakudo/commit/2e3f7020c5

[14:45] <lizmat> nine re "attaching" logic for "compunit" is finding the outer CU

[14:46] <lizmat> it turns out that creating an inner CompUnit object does **not** add it to the attach-target stack

[14:50] <nine> At what point is it missing from that stack?

[14:51] <lizmat> at all points, I'd say

[14:51] <lizmat> I haven't been able to find the place where the outer one gets set either

[14:58] *** Guest10 left
[15:07] <nine> IMPL-CHECK pushes and pops the scope

[15:16] <lizmat> but I don't see CompUnit implementing an IMPL-CHECK ?

[15:19] <lizmat> it feels like LHF, but I can't seem to find where it's hanging  :-)

[15:21] <nine> RakuAST::Node does and RakuAST::CompUnit is a node

[15:24] *** Xliff joined
[15:39] <lizmat> ok, this is getting stranger and stranger: push-scope *is* being called for the EVAL compunit

[15:39] <lizmat> but is never getting called for the mainline CU

[15:47] <lizmat> hmmm... I guess an EVAL would also imply a new Resolver object ?

[15:48] <nine> my $resolver := RakuAST::Resolver::EVAL.new(:context($eval_ctx), :global(GLOBAL));

[15:48] <nine> src/core.c/ForeignCode.pm6:90

[15:48] <lizmat> ok, that explains :-)

[15:52] <lizmat> ok, I think I figured it out: $*CU is not getting updated in the grammar

[15:56] <nine> Are you talking about EVALing an AST or a string?

[15:57] <lizmat> AST

[15:57] <nine> In that case, there is no grammar?

[15:58] <lizmat> the AST is built from a string, sorry

[16:00] <lizmat> ok, I see where you're getting at...

[16:00] <nine> If we do parse, then $*CU gets set by the lang_setup action

[16:00] <nine> Otherwise we don't need $*CU anyway. AST nodes don't use dynamic variables

[16:01] <lizmat> right, and now I understand what my thinko was

[16:01] <lizmat> if we want a =finish to survive while making an AST of source, we need an RakuAST::Node object to store it

[16:56] *** epony left
[17:11] *** Altai-man left
[17:27] *** epony joined
[17:46] *** sena_kun joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:41] <lizmat> in fact, we have such an object already: RakuAST::Doc::Verbatim.new(:type<finish>, :abbreviated, text => "finish test")

[18:51] <Geth> ¦ rakudo/main: b5277b99fc | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[18:51] <Geth> ¦ rakudo/main: RakuAST: no need to intern =finish text when encountered

[18:51] <Geth> ¦ rakudo/main: 

[18:51] <Geth> ¦ rakudo/main: It will only get serialized if there is a reference to $=finish

[18:51] <Geth> ¦ rakudo/main: anyway.

[18:51] <Geth> ¦ rakudo/main: 

[18:51] <Geth> ¦ rakudo/main: Also add the future code for making it a "normal" pod block element

[18:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b5277b99fc

[18:56] <nine> m: class A { }; EVAL q<class A { }>;

[18:56] <camelia> rakudo-moar 5f66d8534: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Redeclaration of symbol 'A'.␤at /home/camelia/EVAL_0:1␤------> class A⏏ { }␤    expecting any of:␤        generic role␤»

[18:56] <nine> but:

[18:56] <nine> use Test; class A { }; eval-lives-ok q<class A { }>;

[18:56] <evalable6> nine, rakudo-moar 5f66d8534: OUTPUT: «ok 1 - ␤»

[18:56] <nine> How does that make sense?

[19:02] <lizmat> eval-lives-ok doesn't inherit the scope ?

[19:03] <nine> It should still find A in GLOBAL's stash.

[19:03] <nine> m: my class A { }; EVAL q<class A { }>;

[19:03] <camelia> rakudo-moar 5f66d8534: ( no output )

[19:03] <nine> This ^^^ clearly shows that we look in the current lexical scope and in the stashes.

[19:04] <nine> m: class A { }; EVAL q<my class A { }>;

[19:04] <camelia> rakudo-moar 5f66d8534: ( no output )

[19:04] <nine> And this ^^^ shows that we only look in stashes for our-scoped packages. Which makes sense.

[19:04] <lizmat> eval-lives-ok does a try { EVAL $code } and returns $!

[19:05] <lizmat> m: class A { }; try EVAL Q|class A{}|; dd $!

[19:05] <camelia> rakudo-moar 5f66d8534: OUTPUT: «Redeclaration $! = X::Redeclaration.new(symbol => "A", postfix => "", what => "symbol", pos => 7, filename => "/home/camelia/EVAL_0", line => 1, directive-filename => Any, column => Any, modules => [], is-compile-time => 1, pre => "class A", post => "…»

[19:05] <lizmat> but yeah, weird

[19:06] <nine> According to my understanding, this eval-lives-ok should actually fail. Looks like a bug that it doesn't. A bug that several tests and spectests depend on unfortunately :/

[19:06] <lizmat> meh... yeah we were bound to find some warts in this project  :-)

[19:07] <lizmat> I know I did  :-)

[19:07] <nine> But why does it have to be packages and stashes of all things!? Any day I don't have to touch that stuff is a good day

[19:11] <lizmat> m: class A { }; try { EVAL Q|class A{}| }; dd $!

[19:11] <camelia> rakudo-moar b5277b99f: OUTPUT: «Redeclaration $! = X::Redeclaration.new(symbol => "A", postfix => "", what => "symbol", pos => 7, filename => "/home/camelia/EVAL_0", line => 1, directive-filename => Any, column => Any, modules => [], is-compile-time => 1, pre => "class A", post => "…»

[19:11] <lizmat> blocky try makes no difference

[19:13] <nine> m: class A { }; package Moo { EVAL q<class A { }> }

[19:13] <camelia> rakudo-moar b5277b99f: ( no output )

[19:13] <nine> If it can't find it in the current lexical scope it's looking in the current package, but not in GLOBAL

[19:13] <lizmat> but that would be a Moo::A

[19:13] <lizmat> not A

[19:14] <lizmat> m: class B::A { }; package Moo { EVAL q<class B::A { }> }

[19:14] <camelia> rakudo-moar b5277b99f: ( no output )

[19:14] <lizmat> hmmm

[19:14] <nine> m: use Test; eval-lives-ok q<class A{}.^name.say>

[19:14] <camelia> rakudo-moar b5277b99f: OUTPUT: «Test::A␤ok 1 - ␤»

[19:14] <lizmat> aha!

[19:14] <nine> Yeah, all these packages are declared in Test

[19:15] <lizmat> so, why does have Test "unit module Test" at the top?

[19:15] <lizmat> I think it can do without ?

[19:15] <nine> So one can opt out of importing everything and call Test::ok instead

[19:16] <lizmat> and the our subs should be renamed to have a Test:: prefix?

[19:17] <nine> Anyway at least this behaviour now makes sense and I know how to adjust my code to match it

[19:17] <lizmat> still, this feels like a bug / shortcoming of Tesrt

[19:17] <lizmat> *Test

[19:56] <Geth> ¦ rakudo/main: a1c73f38bb | (Stefan Seifert)++ | 2 files

[19:56] <Geth> ¦ rakudo/main: RakuAST: re-use a stubbed package's meta-object for the real thing

[19:56] <Geth> ¦ rakudo/main: 

[19:56] <Geth> ¦ rakudo/main: Fixes failures of type checks done before the lexical location of where

[19:56] <Geth> ¦ rakudo/main: the package is defined for real, e.g. class F {}; sub(F $f) {}; class F {};

[19:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a1c73f38bb

[20:27] <vrurg_> BTW, speaking of namespaces, the following looks like a bug to me:

[20:27] <vrurg_> m: class Foo { role Bar { }; class Bar::Baz does Bar { } }; say Bar::.keys

[20:27] <camelia> rakudo-moar a1c73f38b: OUTPUT: «(Baz)␤»

[20:27] *** vrurg_ is now known as vrurg

[20:27] <vrurg> If the role declaration is removed then things go as they must:

[20:28] <vrurg> m: class Foo { class Bar::Baz { } }; say Bar::.keys

[20:28] <camelia> rakudo-moar a1c73f38b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    Bar used at line 1. Did you mean 'Bag'?␤␤»

[20:29] <vrurg> And it actually doesn't matter if it's a role, or any other packagy-entity.

[21:55] *** sena_kun left
[22:23] <discord-raku-bot> <Nemokosch> should Bar even be visible?

[22:23] <discord-raku-bot> <Nemokosch> nevermind

[22:25] <discord-raku-bot> <Nemokosch> m: class Foo { role Bar { } }; say Bar::.keys

[22:25] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Undeclared name:     Bar used at line 1. Did you mean 'Bag'?  

[22:26] <discord-raku-bot> <Nemokosch> m: class Foo { class Bar::Baz { } }; say Foo::Bar::.keys

[22:26] <discord-raku-bot> <Raku eval>  (Baz) 

[22:26] <discord-raku-bot> <Nemokosch> this is very hard to forgive, though

[22:55] *** linkable6 left
[22:55] *** evalable6 left
[22:55] *** linkable6 joined
[22:57] *** evalable6 joined
[23:29] *** Xliff left
