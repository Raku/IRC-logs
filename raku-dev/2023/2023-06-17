[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[03:56] *** linkable6 left
[03:56] *** evalable6 left
[03:58] *** linkable6 joined
[03:58] *** evalable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:12] *** kurahaupo left
[07:09] <nine> Or just have the build system take care of it by adding the appropriate version requirements to the test files. We have been through this before. This is something that's only needed for roast. The solution should be in roast as long as it's somehow possible, which it is.

[07:47] *** kurahaupo joined
[08:27] <lizmat> gfldex: the use of an environment variable was discussed at the RCS, and voted against by jnthn

[08:28] <lizmat> nine: disagree that it's just something for roast: I would like to run my modules tests with the most recent version of Raku as well

[08:28] <lizmat> and not have to do any fudging of the test files

[08:46] <nine> But why?

[08:47] <lizmat> But why what?

[08:52] <lizmat> gfldex: also, I would generally only be interested in a "raku-latest"

[09:04] *** kurahaupo left
[09:11] *** kurahaupo joined
[10:04] <nine> Why would you want to (regularly) test your module with a different compiler version than it was written for? It will not be run with a different version.

[10:06] <nine> m: my constant nope = CORE::<&not>;

[10:06] <camelia> rakudo-moar c452fdbf0: ( no output )

[10:07] <nine> This ^^^ currently doesn't find the &not function with the RakuAST frontend. The reason is that the initializer is run at BEGIN time, so it doesn't actually have the setting as an outer lexical context, so PseudoStash doesn't find it.

[10:08] <nine> The same is true for the old frontend. However, that creates that jumbo frame containing all visible lexical symbols. This includes CORE-SETTING-REV which we mark those setting frames with. Incidentally the same frame contains &not, so it works out in the end. But it's all fake.

[10:10] <nine> m: use v6.e.PREVIEW; dd CORE::OUTER::OUTER::OUTER::OUTER::<&not>

[10:10] <camelia> rakudo-moar c452fdbf0: OUTPUT: «Sub not = proto sub not (Mu $, *%) {*}␤»

[10:10] <nine> m: use v6.e.PREVIEW; dd BEGIN CORE::OUTER::OUTER::OUTER::OUTER::<&not>

[10:10] <camelia> rakudo-moar c452fdbf0: OUTPUT: «Any element{'&not'} = Any␤»

[10:10] <nine> As evidenced by this ^^^ discrepancy

[10:13] <nine> We can't just add forceouterctx the setting as an intermediary (unfinished) scope may shadow setting symbols.

[10:19] <nine> I guess I could change codegen of CORE:: from PsuedoStash.new<CORE>.who to a WVal containing a suitably prepared PseudoStash

[10:35] <lizmat> nine: this would only apply to modules that do *not* have a language version pinned

[10:36] <lizmat> I try not to pin language versions in modules: but I would like to know whether they run in the current dev language version

[10:36] <lizmat> 1. to find out regressions that roast didn't catch

[10:36] <nine> Why would you ever want to not pin the language version in a module?

[10:36] <lizmat> 2. to pin the module to a language version if it *is* new syntax / semantics that are breaking it

[10:37] <lizmat> because of maintenance: a module that will work in all language versions is less maintenance than a module that is pinned to a language version that may not be supported in the future

[10:37] <nine> That is really like russian roulette. I don't know why we would want to support that :)

[10:38] <lizmat> why is that Russian roulette >

[10:38] <lizmat> ?

[10:38] <lizmat> that's why we have tests, no?

[10:38] <nine> Because the module can break any time we do a backwards incompatible change in a new language version. Which is the whole point of versioning the language in the first place

[10:38] <lizmat> also note: I have currently 194 modules in the ecosystem

[10:39] <lizmat> most of them I cannot foresee ever not working in a future language version

[10:39] <lizmat> and that's why I want to know before the dev language version becomes default

[10:40] <lizmat> when a backwards incompatible change affects a module of mine

[10:40] <lizmat> (or any other unpinned module in the ecosystem, for that matter)

[10:41] <nine> Just pin the language version and you don't have to worry about that any more. No need for environment variables or anything.

[10:44] <nine> What you are asking for is adding a new mechanism so you can do tedious work because you just don't use the mechanism that's already there, that's super easy and that's meant precicely so you wouldn't have to worry about that at all.

[10:44] <lizmat> ok, so I pin all of my modules to 6.c

[10:45] <nine> If that's the version they are written for, then yes.

[10:45] <lizmat> then years from now, 6.c will no longer be supported, and all of my modules stop working without reason

[10:45] <nine> Which is precicely why we won't suddenly stop supporting 6.c.

[10:45] <nine> That's the social contract.

[10:45] <lizmat> that's beside the poin

[10:45] <lizmat> t

[10:46] <lizmat> if Raku is to be a 100year language, 6.c *will* become unsupported at some point

[10:48] <nine> No. That is not how it is intended.

[10:48] <lizmat> ah?

[10:52] <nine> Also we simply don't have a reason to stop supporting any older version. That's why we wanted to have everything as lexically as possible, so we can do breaking changes in new versions without touching the old one.

[10:53] <lizmat> I think there's a solid reason for wanting to stop support of 6.c, namely the await behaviour

[10:56] <lizmat> also: we could stop supporting 6.d to be able to drop NQP's broken sprintf support

[10:57] <lizmat> .oO( "who ever needs more than 640K" )

[11:04] <nine> await behaviour?

[11:06] <nine> NQP has never been coverend by any guarantees. We're basically free to remove whatever we want.

[11:07] <lizmat> the fact that a thread relinquishes itself to the pool when it's awaiting something, that's 6.d is it not?

[11:07] <lizmat> this is not about NQP

[11:09] <nine> I remember that 6.d fixed some behaviour related to await. So everything's fine, isn't it? New code can have better behaviour and old code that's presumably written with the old behaviour in mind can continue undisturbed.

[11:10] <lizmat> indeed... but the old behaviour is *bad* in multi-threaded environments

[11:10] <lizmat> and in many cases, modules pinned to 6.c would work better in 6.d

[11:11] <lizmat> maybe all cases

[11:13] <nine> So authors should port them and we should encourage them to do so. Just removing support for 6.c is the most unfriendly way to do that. Especially since it's just about "would be nice because it works better", not something critical that's blocking anything.

[11:37] *** evalable6 left
[11:37] *** linkable6 left
[11:38] *** linkable6 joined
[11:39] *** evalable6 joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:51] <jdv> m: $*RAKU.compiler.version

[12:51] <camelia> rakudo-moar c452fdbf0: ( no output )

[12:51] <jdv> m: $*RAKU.compiler.version.say

[12:51] <camelia> rakudo-moar c452fdbf0: OUTPUT: «v2023.05.130.gc.452.fdbf.0␤»

[12:56] *** kawaii left
[12:57] *** kawaii joined
[13:26] <Geth> ¦ rakudo/main: e10e3aa0ce | (Elizabeth Mattijsen)++ | 5 files

[13:26] <Geth> ¦ rakudo/main: RakuAST: more work on declarator doc

[13:26] <Geth> ¦ rakudo/main: 

[13:26] <Geth> ¦ rakudo/main: - include trailing newline in declarator doc, just as doc block paras

[13:26] <Geth> ¦ rakudo/main: - adjust tests and deparsing accordingly

[13:26] <Geth> ¦ rakudo/main: - allow trailing declarator docs on consecutive lines after declarand

[13:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e10e3aa0ce

[13:26] <lizmat> I guess that brings us on 891 ?

[13:32] <lizmat> meh, 881  ?

[13:53] <Geth> ¦ roast: 60e6fd81de | (Elizabeth Mattijsen)++ | S26-documentation/wacky.t

[13:53] <Geth> ¦ roast: Cleanup wacky trailing declarator doc tests

[13:53] <Geth> ¦ roast: 

[13:53] <Geth> ¦ roast: As discussed at the RSC, the semantics for trailing declarator docs

[13:53] <Geth> ¦ roast: are now:

[13:53] <Geth> ¦ roast: 

[13:53] <Geth> ¦ roast: - if multiple declarators are on the same line, bind to the last one

[13:53] <Geth> ¦ roast: - must start on the same or next line of declarator

[13:53] <Geth> ¦ roast: - can be continued on consecutive lines

[13:53] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/60e6fd81de

[13:53] <lizmat> 882

[13:57] *** linkable6 left
[13:58] *** linkable6 joined
[14:35] *** japhb left
[14:35] *** japhb joined
[16:34] *** linkable6 left
[16:34] *** evalable6 left
[16:36] *** evalable6 joined
[16:37] *** linkable6 joined
[17:04] *** jdv left
[17:04] *** jdv joined
[17:48] <Geth> ¦ rakudo/main: 77aa79cecd | (Nick Logan)++ | src/core.c/CompUnit/Repository/FileSystem.pm6

[17:48] <Geth> ¦ rakudo/main: Avoid using junctions

[17:48] <Geth> ¦ rakudo/main: 

[17:48] <Geth> ¦ rakudo/main: Junctions are slow, so we should avoid using them in code that

[17:48] <Geth> ¦ rakudo/main: may get run on many items.

[17:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/77aa79cecd

[17:48] <Geth> ¦ rakudo/main: d30ac3e48c | (Nick Logan)++ | src/core.c/CompUnit/Repository/FileSystem.pm6

[17:48] <Geth> ¦ rakudo/main: Reduce number of calls to abs2rel

[17:48] <Geth> ¦ rakudo/main: 

[17:48] <Geth> ¦ rakudo/main: Preciously we always called `.IO.relative` (abs2rel) on every path

[17:48] <Geth> ¦ rakudo/main: of the CURFS prefix. This changes that behavior to only do this

[17:48] <Geth> ¦ rakudo/main: conversion after we've filtered down to the paths we are interested

[17:48] <Geth> ¦ rakudo/main: in.

[17:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d30ac3e48c

[17:48] <Geth> ¦ rakudo/main: 9a5fe3d6e8 | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/Repository/FileSystem.pm6

[17:48] <Geth> ¦ rakudo/main: Merge pull request #5284 from rakudo/ugexe/curfs-optimizations

[17:49] <Geth> ¦ rakudo/main: 

[17:49] <Geth> ¦ rakudo/main: Optimize CURFS startup time

[17:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9a5fe3d6e8

[17:54] *** kurahaupo left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:02] <ugexe> I wonder if we could make DIR-RECURSE faster by spawning multiple threads

[18:03] <lizmat> ugexe: I think I tried that, but the overhead of starting threads was not worth it, at least in my tests

[18:04] <lizmat> also: recursive (sym)links make that hard, if doubles are handled in different threads

[18:07] <ugexe> i wonder if its still mostly an i/o bound problem anyway

[18:08] <lizmat> pretty sure it is, although maybe less prominent on SSD drives

[18:08] <MasterDuke> how easy would it be to spawn a small number of threads? i.e., not one for every call, but batched

[18:36] <jdv> isnt that just m:n like hyper and friends?

[18:48] *** squashable6 left
[18:49] *** squashable6 joined
[18:57] <Geth> ¦ roast: d72d32f428 | (Elizabeth Mattijsen)++ | S26-documentation/wacky.t

[18:57] <Geth> ¦ roast: Todo tests that need RakuAST

[18:57] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/d72d32f428

[19:07] *** jgaz left
[20:13] *** squashable6 left
[20:15] *** squashable6 joined
[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: 73888f45ad | (Nick Logan)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: Remove largely unknown flags from installed raku script shims

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: 

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: A mostly unknown feature of the bin script shims CURI installs is

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: that it allows choosing the distribution to load the script from,

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: which allows loading an e.g. older version of some script. However

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: to do so required using the :$name :$auth :$ver :$api arguments

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: which prevents any installed raku bin script from taking any

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: arguments of those names; the shim scripts breaks things such as

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: providing a bin/foo --ver that outputs version information. This

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: change removes those arguments until a better solution can be

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: implemented.

[21:04] <Geth> ¦ rakudo/ugexe/dont-squat-common-arg-names-redux: review: https://github.com/rakudo/rakudo/commit/73888f45ad

[21:04] <Geth> ¦ rakudo: ugexe++ created pull request #5286: Remove largely unknown flags from installed raku script shims

[21:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5286

[21:15] <ugexe> getting a list of all files in my home directory recursively takes about the same time using DIR-RECURSE(...) and File::Find from perl

[21:16] <ugexe> I wonder if cutting the number of stat calls in half would even make a difference

[21:19] <ugexe> One way of cutting down the stat calls might be to skip the existence check in pull-one() (i.e. only check existence on the path the user supplied to DIR-RECURSE) and just CATCH + ignore file doesn't exist

[21:20] <ugexe> since if the paths returned by dir() exist 99% of the time then it might be wasteful to stat everything dir returns

[21:33] <MasterDuke> jdv: yeah, but since it's a recursive function, it would be a little trickier to not spawn a new thread for each call

[21:33] <MasterDuke> ugexe: hm...that could be a good idea

[21:37] <MasterDuke> ugexe: `time find . | wc -l` reports 113028 files and takes 0.13s. `raku -e '.say for Rakudo::Internals.DIR-RECURSE("."); note now - INIT now' | wc -l` reports 93867 files and takes 0.93s

[21:37] <MasterDuke> find is going to be pretty heavily optimized, but maybe we can get some closer

[21:40] <ugexe> DIR-RECURSE will skip things that starts with . i believe

[21:45] <ugexe> "However find has an optimization: it knows how many subdirectories a directory has from its link count, and it stops calling lstat once it knows that it's traversed all the subdirectories."

[22:07] *** linkable6 left
[22:07] *** evalable6 left
[22:10] *** evalable6 joined
[22:10] *** linkable6 joined
[22:16] <Geth> ¦ rakudo/rakuast-phase-cleanup: 12 commits pushed by (Jonathan Worthington)++

[22:16] <Geth> ¦ rakudo/rakuast-phase-cleanup: review: https://github.com/rakudo/rakudo/compare/cc3aa4320b83...f50307f7a002

[23:24] <ugexe> deleting the stat -- https://github.com/rakudo/rakudo/blob/9a5fe3d6e82014d314b48dad0edd854913997f85/src/core.c/Rakudo/Internals.pm6#L1387-L1389 -- and adding a try block around the other two stat calls (that check if its a file or dir) isn't any faster

[23:24] <ugexe> i guess it'd still be nice to do one stat call to contain the information that those two stat calls return

[23:52] *** squashable6 left
[23:54] *** squashable6 joined
