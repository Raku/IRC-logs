[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:02] *** Xliff left
[00:31] *** squashable6 left
[00:31] *** squashable6 joined
[02:13] *** kurahaupo left
[05:05] *** coverable6 left
[05:05] *** unicodable6 left
[05:05] *** squashable6 left
[05:05] *** bisectable6 left
[05:05] *** notable6 left
[05:05] *** committable6 left
[05:05] *** evalable6 left
[05:05] *** reportable6 left
[05:05] *** sourceable6 left
[05:05] *** greppable6 left
[05:05] *** bloatable6 left
[05:05] *** nativecallable6 left
[05:05] *** benchable6 left
[05:05] *** statisfiable6 left
[05:05] *** shareable6 left
[05:05] *** linkable6 left
[05:05] *** tellable6 left
[05:05] *** releasable6 left
[05:05] *** quotable6 left
[05:05] *** coverable6 joined
[05:05] *** bloatable6 joined
[05:06] *** greppable6 joined
[05:06] *** notable6 joined
[05:06] *** quotable6 joined
[05:06] *** benchable6 joined
[05:07] *** shareable6 joined
[05:07] *** unicodable6 joined
[05:07] *** sourceable6 joined
[05:07] *** committable6 joined
[05:07] *** statisfiable6 joined
[05:07] *** nativecallable6 joined
[05:07] *** tellable6 joined
[05:07] *** reportable6 joined
[05:07] *** bisectable6 joined
[05:07] *** evalable6 joined
[05:08] *** squashable6 joined
[05:08] *** linkable6 joined
[05:08] *** releasable6 joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:59] <[Tux]> Rakudo v2023.04-89-g10742c991 (v6.d) on MoarVM 2023.04-1-g965be0af5

[06:59] <[Tux]> csv-test-xs-20      0.381 -  0.396

[06:59] <[Tux]> test-t --race       0.844 -  0.878

[06:59] <[Tux]> csv-ip5xs           0.845 -  0.911

[06:59] <[Tux]> test-t              1.343 -  1.374

[06:59] <[Tux]> csv-parser          3.449 -  3.576

[06:59] <[Tux]> csv-ip5xs-20        5.342 -  5.767

[06:59] <[Tux]> test                6.790 -  7.415

[06:59] <[Tux]> test-t-20 --race    7.047 -  7.501

[06:59] <[Tux]> test-t-20          20.311 - 20.376

[07:55] *** sena_kun joined
[09:22] *** sena_kun left
[09:29] *** squashable6 left
[09:30] *** squashable6 joined
[10:04] *** sena_kun joined
[10:30] *** Voldenet_ joined
[10:30] *** Voldenet left
[10:30] *** Voldenet_ is now known as Voldenet

[10:32] *** sena_kun left
[10:32] *** sena_kun joined
[11:06] * lizmat seems to draw a blank

[11:06] <lizmat> given a native type "num", how do I get the non-native equivalent for that (aka Num) ?

[11:06] <lizmat> no name trickery, please

[11:07] <nine> m: say num.^mro[1]

[11:07] <camelia> rakudo-moar c14084ecd: OUTPUT: «(Num)␤»

[11:08] <lizmat> ah, duh!

[11:08] <lizmat> nine++

[11:11] <nine> m: use nqp; say nqp::hllboxtype_n()

[11:11] <camelia> rakudo-moar c14084ecd: OUTPUT: «(Num)␤»

[11:12] <nine> seems safer

[11:12] <lizmat> yeah, but needed it to be more general

[11:12] <lizmat> not just for num, but also for int / str

[11:12] <lizmat> trying to fix the "my Int $x = NaN" compile time error in RakuAST

[11:13] <nine> Well there are also hllboxtype_i and hllboxtype_s :)

[11:55] <lizmat> m: subset MyInt; dd MyInt.^mro   # this feels LTA

[11:55] <camelia> rakudo-moar c14084ecd: OUTPUT: «No such method 'mro' for invocant of type 'Perl6::Metamodel::SubsetHOW'␤  in block <unit> at <tmp> line 1␤␤»

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:08] <nine> But it makes sense since the subset type itself doesn't have any ancestors.

[12:09] <lizmat> not even Mu ?

[12:10] <nine> Well it delegates type checks and find_method to its refinee

[12:12] <lizmat> so shouldn't a mro method do that ?

[12:12] <lizmat> m: subset A; dd (A,).are'

[12:13] <camelia> rakudo-moar c14084ecd: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> subset A; dd (A,).are⏏'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement m…»

[12:13] <lizmat> m: subset A; dd (A,).are

[12:13] <camelia> rakudo-moar c14084ecd: OUTPUT: «A␤»

[12:13] <lizmat> m: subset A of Int; dd (A,).are

[12:13] <camelia> rakudo-moar c14084ecd: OUTPUT: «A␤»

[12:13] <lizmat> m: subset A; dd (A,A).are

[12:13] <camelia> rakudo-moar c14084ecd: OUTPUT: «A␤»

[12:13] <lizmat> m: subset A; dd (A,int).are

[12:13] <camelia> rakudo-moar c14084ecd: OUTPUT: «No such method 'mro' for invocant of type 'Perl6::Metamodel::SubsetHOW'␤  in block <unit> at <tmp> line 1␤␤»

[12:14] <nine> That depends on whether you want to define ^mro as a required method for all meta types.

[12:15] <lizmat> m: subset A; dd (True,False).are

[12:15] <camelia> rakudo-moar c14084ecd: OUTPUT: «Bool␤»

[12:15] <lizmat> m: subset A; dd (True,Same).are

[12:15] <camelia> rakudo-moar c14084ecd: OUTPUT: «Int␤»

[12:15] <lizmat> seems to work for enums already, what else do we have?

[12:18] <nine> m: dd (module Foo { }, package Bar { }).are

[12:18] <camelia> rakudo-moar c14084ecd: OUTPUT: «No such method 'mro' for invocant of type 'Perl6::Metamodel::ModuleHOW'␤  in block <unit> at <tmp> line 1␤␤»

[12:19] <Geth> ¦ rakudo/main: 01790de4c0 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[12:19] <Geth> ¦ rakudo/main: RakuAST: don't bother with twigils if there are none

[12:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/01790de4c0

[12:19] <Geth> ¦ rakudo/main: bc51ff4643 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[12:19] <Geth> ¦ rakudo/main: Streamline X::Syntax::Number::LiteralType a bit

[12:19] <Geth> ¦ rakudo/main: 

[12:19] <Geth> ¦ rakudo/main: - add some sensible defaults

[12:19] <Geth> ¦ rakudo/main: - format the text at run-time

[12:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bc51ff4643

[12:37] <Geth> ¦ rakudo/main: 7e78588391 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/SubsetHOW.nqp

[12:37] <Geth> ¦ rakudo/main: Give subsets their .^mro method

[12:37] <Geth> ¦ rakudo/main: 

[12:37] <Geth> ¦ rakudo/main: Mostly because we expect the .are method to be able to be run on

[12:37] <Geth> ¦ rakudo/main: any selection of types, including subtypes.

[12:37] <Geth> ¦ rakudo/main: 

[12:37] <Geth> ¦ rakudo/main:     subset A of Int;

[12:37] <Geth> ¦ rakudo/main:     subset B of A;

[12:37] <Geth> ¦ rakudo/main:     dd B.^mro;  # (B, A, Int, Cool, Any, Mu)

[12:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7e78588391

[12:56] <Geth> ¦ roast: e232b04437 | (Elizabeth Mattijsen)++ | S12-subset/type-subset.t

[12:56] <Geth> ¦ roast: Fix test, because in RakuAST this is a compile time error

[12:56] <Geth> ¦ roast: 

[12:56] <Geth> ¦ roast: And in legacy grammar, this is a runtime error when it *could* (and

[12:56] <Geth> ¦ roast: probably *should*) have been a compile time error.  Marked as todo

[12:56] <Geth> ¦ roast: for now.

[12:56] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e232b04437

[12:56] <Geth> ¦ rakudo/main: 4f6da10a6e | (Elizabeth Mattijsen)++ | src/Raku/ast/variable-declaration.rakumod

[12:56] <Geth> ¦ rakudo/main: RakuAST: add type check in simple variable declarations

[12:56] <Geth> ¦ rakudo/main: 

[12:56] <Geth> ¦ rakudo/main: If the initializer is a literal, then check with the variable type

[12:56] <Geth> ¦ rakudo/main: and issue a sorry if they do not match.

[12:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4f6da10a6e

[12:56] <Geth> ¦ rakudo/main: 6e20165a1f | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[12:56] <Geth> ¦ rakudo/main: Don't mangle the type name too much

[12:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6e20165a1f

[12:56] <lizmat> 824/1355

[12:56] <lizmat> afk&

[13:50] <tbrowder__> hi, trying to create a hash of keys whose values are arrays (NOT lists):

[13:52] <tbrowder__> m: my %h = { a = [1,2]}; say %h<a>.WHAT

[13:52] <camelia> rakudo-moar 6e20165a1: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:1␤------> my %h = { a =⏏ [1,2]}; say %h<a>.WHAT␤»

[13:53] <tbrowder__> m: my %h = {a => [1,2]}; say %h<a>.WHAT

[13:53] <camelia> rakudo-moar 6e20165a1: OUTPUT: «Potential difficulties:␤    Useless use of hash composer on right side of hash assignment; did you mean := instead?␤    at <tmp>:1␤    ------> my %h = {a => [1,2]}⏏; say %h<a>.WHAT␤(Array)␤»

[13:55] <tbrowder__> why do i need the ':=' binding operator?

[13:56] <tbrowder__> that may be the root of a lot of problems i've had with hashes lately

[13:56] <nine> You don't:

[13:56] <nine> m: my %h = a => [1, 2]; dd %h

[13:56] <camelia> rakudo-moar 6e20165a1: OUTPUT: «Hash %h = {:a($[1, 2])}␤»

[13:59] <vrurg> tbrowder__: Basically, internally, a hash is created only to be used as a producer of iterator of pairs to initialize the hash on LHS. The compiler just warns you about the very ineffective way of doing something.

[14:00] <tbrowder__> m: my %h = a => [1,2]; say %h<a>.WHAT

[14:00] <camelia> rakudo-moar 6e20165a1: OUTPUT: «(Array)␤»

[14:00] <tbrowder__> ok, got it. the {} confused the issue, THANKS

[14:02] <tbrowder__> m: my %h := { a => [1,2]}; say %h<a>.WHAT

[14:02] <camelia> rakudo-moar 6e20165a1: OUTPUT: «(Array)␤»

[14:03] <tbrowder__> nine, vrurg thanks

[16:54] *** sourceable6 left
[16:54] *** committable6 left
[16:54] *** unicodable6 left
[16:54] *** coverable6 left
[16:54] *** bloatable6 left
[16:54] *** linkable6 left
[16:54] *** greppable6 left
[16:54] *** quotable6 left
[16:54] *** statisfiable6 left
[16:54] *** benchable6 left
[16:54] *** tellable6 left
[16:54] *** squashable6 left
[16:54] *** bisectable6 left
[16:54] *** nativecallable6 left
[16:54] *** evalable6 left
[16:54] *** releasable6 left
[16:54] *** shareable6 left
[16:54] *** reportable6 left
[16:54] *** notable6 left
[16:55] *** greppable6 joined
[16:55] *** evalable6 joined
[16:55] *** nativecallable6 joined
[16:55] *** sourceable6 joined
[16:56] *** benchable6 joined
[16:56] *** notable6 joined
[16:56] *** bisectable6 joined
[16:56] *** shareable6 joined
[16:56] *** committable6 joined
[16:56] *** squashable6 joined
[16:56] *** tellable6 joined
[16:56] *** bloatable6 joined
[16:56] *** unicodable6 joined
[16:57] *** linkable6 joined
[16:57] *** statisfiable6 joined
[16:57] *** quotable6 joined
[16:57] *** releasable6 joined
[16:57] *** coverable6 joined
[16:57] *** reportable6 joined
[17:01] *** sena_kun left
[17:35] *** dogbert17 joined
[17:37] *** sena_kun joined
[17:44] *** kurahaupo joined
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:39] <Geth> ¦ rakudo/main: 6f482ca006 | (Elizabeth Mattijsen)++ | 3 files

[18:39] <Geth> ¦ rakudo/main: Separate =input/=output from =code

[18:39] <Geth> ¦ rakudo/main: 

[18:39] <Geth> ¦ rakudo/main: - introduces the Pod::Block::Input and Pod::Block::Output classes,

[18:39] <Geth> ¦ rakudo/main:   subclasses of Pod::Block::Code (so that current renderers will

[18:40] <Geth> ¦ rakudo/main:   still be able to see them as Pod::Block::Code blocks).

[18:40] <Geth> ¦ rakudo/main: - adapt the legacy grammar to create these new classes for =input

[18:40] <Geth> ¦ rakudo/main:   and =output pod

[18:40] <Geth> ¦ rakudo/main: - adapt RakuAST legacy podification also accordingly

[18:40] <Geth> ¦ rakudo/main: 

[18:40] <Geth> ¦ rakudo/main: This will now allow pod renderers to render =input and =output pod

[18:40] <Geth> ¦ rakudo/main: differently from =code pod.

[18:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6f482ca006

[19:58] <[Coke]> Nice - we had adopted :lang<output> as a way to get some kind of classification in the raku docs, we should consider updating.

[20:05] <vrurg> BTW, speaking of the docs. Our docs say that if there are extra docs they're to be put under doc/. But the directory is not installed with the distribution, thus these are not available for rakudoc. Isn't it something overlooked in distribution design?

[20:07] <vrurg> And either way, what would be the approach of keeping documentation separate from modules? 

[20:36] *** kurahaupo left
[20:37] *** kurahaupo joined
[20:53] *** squashable6 left
[20:53] *** squashable6 joined
[20:58] *** kurahaupo left
[20:59] *** kurahaupo joined
[21:08] *** kurahaupo left
[21:09] *** kurahaupo joined
[21:25] *** kurahaupo left
[21:26] *** kurahaupo joined
[21:28] *** kurahaupo left
[21:51] *** sena_kun left
[22:36] *** kurahaupo joined
