[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[01:00] *** linkable6 left
[01:00] *** evalable6 left
[01:01] *** evalable6 joined
[01:01] *** linkable6 joined
[01:56] <MasterDuke> timo1: i see some extra `p6typecheckrv` in the uint version, but otherwise essentially the same. and same runtime, plus it passes a spectest
[01:56] <MasterDuke> very nice
[02:00] <MasterDuke> but it looks like maybe it's not doing everything, since AlexDaniel's example script with uints is still showing a `p6forstmt` instead of the while
[02:08] <MasterDuke> heh, yep. replacing the literal in just the for loop with a variable slows it back down for uints even with your patch, but not for ints. e.g., `my uint $sum = 0; my uint $max = 100_000_000; for ^$max -> uint $i { $sum += $i }; say now - INIT now; say $sum;`
[02:11] <MasterDuke> fyi, this has all been on moarvm master, not my add_*_u_ops branch
[03:11] *** MasterDuke left
[03:48] *** MasterDuke joined
[04:02] *** MasterDuke left
[04:02] *** djinni` left
[04:02] *** codesections left
[04:02] *** japhb left
[04:02] *** ab5tract left
[04:02] *** sjn left
[04:02] *** quotable6 left
[04:02] *** squashable6 left
[04:02] *** nativecallable6 left
[04:02] *** committable6 left
[04:02] *** unicodable6 left
[04:02] *** discord-raku-bot left
[04:02] *** zostay left
[04:02] *** patrickb left
[04:02] *** summerisle left
[04:02] *** camelia left
[04:02] *** maettu left
[04:02] *** leont left
[04:02] *** SmokeMachine left
[04:03] *** MasterDuke joined
[04:03] *** patrickb joined
[04:03] *** summerisle joined
[04:03] *** djinni` joined
[04:03] *** ab5tract joined
[04:03] *** codesections joined
[04:03] *** quotable6 joined
[04:03] *** squashable6 joined
[04:03] *** nativecallable6 joined
[04:03] *** committable6 joined
[04:03] *** unicodable6 joined
[04:03] *** japhb joined
[04:03] *** sjn joined
[04:03] *** camelia joined
[04:03] *** discord-raku-bot joined
[04:03] *** maettu joined
[04:03] *** leont joined
[04:03] *** SmokeMachine joined
[04:03] *** zostay joined
[04:03] *** nine left
[04:03] *** nebuchadnezzar left
[04:03] *** |Tux| left
[04:03] *** elcaro left
[04:03] *** rba left
[04:04] *** nine joined
[04:04] *** nebuchadnezzar joined
[04:04] *** |Tux| joined
[04:04] *** elcaro joined
[04:04] *** rba joined
[04:09] *** kawaii left
[04:09] *** Voldenet left
[04:09] *** ugexe left
[04:09] *** kawaii joined
[04:09] *** Voldenet joined
[04:09] *** ugexe joined
[04:10] *** tonyo left
[04:10] *** ugexe joined
[04:10] *** ilogger2 left
[04:10] *** normietotechie[m left
[04:10] *** sivoais left
[04:10] *** samebchase left
[04:10] *** JRaspass left
[04:10] *** [Tux] left
[04:10] *** tbrowder left
[04:10] *** heartburn left
[04:10] *** timo1 left
[04:10] *** evalable6 left
[04:10] *** reportable6 left
[04:10] *** jdv left
[04:10] *** sourceable6 left
[04:10] *** bisectable6 left
[04:10] *** releasable6 left
[04:10] *** bloatable6 left
[04:10] *** statisfiable6 left
[04:10] *** shareable6 left
[04:10] *** benchable6 left
[04:10] *** tellable6 left
[04:11] *** gfldex left
[04:11] *** samcv left
[04:11] *** bartolin_ left
[04:11] *** jjatria left
[04:11] *** JRaspass joined
[04:11] *** sivoais joined
[04:11] *** samebchase joined
[04:11] *** tonyo joined
[04:11] *** ilogger2 joined
[04:11] *** samebchase left
[04:11] *** [Tux] joined
[04:11] *** tbrowder joined
[04:11] *** linkable6 left
[04:11] *** notable6 left
[04:11] *** greppable6 left
[04:11] *** coverable6 left
[04:11] *** kjp left
[04:11] *** timo1 joined
[04:11] *** heartburn joined
[04:11] *** samebchase joined
[04:12] *** linkable6 joined
[04:12] *** notable6 joined
[04:12] *** greppable6 joined
[04:12] *** coverable6 joined
[04:12] *** kjp joined
[04:17] *** evalable6 joined
[04:17] *** reportable6 joined
[04:17] *** jdv joined
[04:17] *** sourceable6 joined
[04:17] *** bisectable6 joined
[04:17] *** releasable6 joined
[04:17] *** bloatable6 joined
[04:17] *** statisfiable6 joined
[04:17] *** shareable6 joined
[04:17] *** benchable6 joined
[04:17] *** tellable6 joined
[04:17] *** gfldex joined
[04:17] *** samcv joined
[04:17] *** bartolin_ joined
[04:17] *** jjatria joined
[04:18] *** squashable6 left
[04:20] *** evalable6 left
[04:20] *** reportable6 left
[04:20] *** jdv left
[04:20] *** sourceable6 left
[04:20] *** bisectable6 left
[04:20] *** releasable6 left
[04:20] *** bloatable6 left
[04:20] *** statisfiable6 left
[04:20] *** shareable6 left
[04:20] *** benchable6 left
[04:20] *** tellable6 left
[04:20] *** gfldex left
[04:20] *** samcv left
[04:20] *** bartolin_ left
[04:20] *** jjatria left
[04:20] *** linkable6 left
[04:20] *** notable6 left
[04:20] *** greppable6 left
[04:20] *** coverable6 left
[04:20] *** kjp left
[04:20] *** [Tux] left
[04:20] *** tbrowder left
[04:20] *** heartburn left
[04:20] *** timo1 left
[04:21] *** squashable6 joined
[04:21] *** JRaspass left
[04:21] *** sivoais left
[04:21] *** tonyo left
[04:21] *** ilogger2 left
[04:21] *** kawaii left
[04:21] *** Voldenet left
[04:21] *** ugexe left
[04:21] *** nine left
[04:21] *** nebuchadnezzar left
[04:21] *** |Tux| left
[04:21] *** elcaro left
[04:21] *** rba left
[04:21] *** samebchase left
[04:21] *** MasterDuke left
[04:21] *** djinni` left
[04:21] *** codesections left
[04:21] *** japhb left
[04:21] *** ab5tract left
[04:21] *** sjn left
[04:21] *** quotable6 left
[04:21] *** nativecallable6 left
[04:21] *** committable6 left
[04:21] *** unicodable6 left
[04:21] *** discord-raku-bot left
[04:21] *** zostay left
[04:21] *** patrickb left
[04:21] *** summerisle left
[04:21] *** camelia left
[04:21] *** maettu left
[04:21] *** leont left
[04:21] *** SmokeMachine left
[04:21] *** Geth left
[04:23] *** RakuIRCLogger__ joined
[04:23] *** [Coke] joined
[04:23] *** vrurg joined
[04:23] *** lizmat joined
[04:23] *** lucs joined
[04:23] *** shmup joined
[04:23] *** RakuIRCLogger joined
[04:23] *** RakuIRCLogger left
[04:24] *** [Coke] joined
[04:24] *** vrurg joined
[04:24] *** lizmat joined
[04:24] *** lucs joined
[04:24] *** shmup joined
[04:24] *** RakuIRCLogger joined
[04:24] *** RakuIRCLogger left
[04:34] *** evalable6 left
[04:34] *** reportable6 left
[04:34] *** jdv left
[04:34] *** sourceable6 left
[04:34] *** bisectable6 left
[04:34] *** releasable6 left
[04:34] *** bloatable6 left
[04:34] *** statisfiable6 left
[04:34] *** shareable6 left
[04:34] *** benchable6 left
[04:34] *** tellable6 left
[04:34] *** gfldex left
[04:34] *** samcv left
[04:34] *** bartolin_ left
[04:34] *** jjatria left
[04:36] *** evalable6 joined
[04:36] *** reportable6 joined
[04:36] *** jdv joined
[04:36] *** sourceable6 joined
[04:36] *** bisectable6 joined
[04:36] *** releasable6 joined
[04:36] *** bloatable6 joined
[04:36] *** statisfiable6 joined
[04:36] *** shareable6 joined
[04:36] *** benchable6 joined
[04:36] *** tellable6 joined
[04:36] *** gfldex joined
[04:36] *** samcv joined
[04:36] *** bartolin_ joined
[04:36] *** jjatria joined
[05:05] *** normietotechie[m joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:02] *** codesections left
[07:03] *** codesections joined
[08:32] <nine> lizmat: Int(Str) does not even work on commit 5a869366e
[08:34] *** squashable6 left
[08:38] *** squashable6 joined
[09:11] <nine> Commit f3c050ef0c3e684727a8218cd2552c0bf047a459 fixes the regression in t/02-rakudo/99-misc.t
[09:11] <nine> Apparently geth is down?
[10:22] *** RakuIRCLogger__ left
[10:23] *** Geth joined
[10:23] *** RakuIRCLogger joined
[10:24] <Geth> ¦ rakudo/main: f3c050ef0c | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod
[10:24] <Geth> ¦ rakudo/main: RakuAST: fix missing IMPL-EXPR-QAST method on VarDeclaration::Placeholder::Positional
[10:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f3c050ef0c
[10:24] <nine> m: "yes" andthen "{dd $_}"
[10:24] <camelia> rakudo-moar 0482ee7f7: OUTPUT: «"yes"␤Use of Nil in string context␤  in block  at <tmp> line 1␤»
[10:25] <Geth> ¦ rakudo/main: 0482ee7f79 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod
[10:25] <Geth> ¦ rakudo/main: RakuAST: ensure declarations work in term positions where appropriate
[10:25] <Geth> ¦ rakudo/main: 
[10:25] <Geth> ¦ rakudo/main: E.g. True andthen my $a;
[10:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0482ee7f79
[10:25] <Geth> ¦ rakudo/main: 0482ee7f79 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod
[10:25] <Geth> ¦ rakudo/main: RakuAST: ensure declarations work in term positions where appropriate
[10:25] <Geth> ¦ rakudo/main: 
[10:25] <Geth> ¦ rakudo/main: E.g. True andthen my $a;
[10:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0482ee7f79
[10:26] <lizmat> oops  :-)
[10:56] <lizmat> the webhook re-delivery interface on Github is ...   slow and confusing
[10:59] <lizmat> ah, I see where my confusion comes from: I tested the type.rakutest without RAKUDO_RAKUAST (in which case it passes)
[10:59] <lizmat> m: dd Int(Str)
[10:59] <camelia> rakudo-moar 0482ee7f7: OUTPUT: «Int(Str)␤»
[10:59] <lizmat> because that works
[10:59] <lizmat> in the old grammar
[11:00] <lizmat> and I was only going by the number of passing tests in make test, and that seemed correct
[11:02] *** codesections left
[11:02] *** codesections1 joined
[11:02] <Geth> ¦ rakudo/main: c0c08a7f67 | (Elizabeth Mattijsen)++ | t/12-rakuast/types.rakutest
[11:02] <Geth> ¦ rakudo/main: Disable tests for Int(something) for now
[11:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c0c08a7f67
[11:03] <lizmat> 132/143
[11:04] *** codesections1 is now known as codesections
[11:04] *** Geth left
[11:04] *** Geth joined
[11:19] <lizmat> nine: in token typename, it looks like "accept" is not getting set:
[11:19] <lizmat> '(' ~ ')' [<.ws> [<accept=.typename> || $<accept_any>=<?>] <.ws>]
[11:19] <lizmat> aaah
[11:32] <nine> "yes" andthen "{dd $_}" is a horrible case to support :/ "{dd $_}" gets compiled to a block and a call to that block, as you'd expect. The andthen thunks its RHS. For this to work, the block that's contained in the string must appear inside the thunk's block. And that although an expression is not a scope by itself.
[11:32] <nine> The old Actions uses annotations and statement ids to find such blocks and moves them after the fact
[11:39] <lizmat> yuck
[11:39] <lizmat> nine: any idea about what's wrong in the grammar?   $<accept> just doesn't get set
[11:40] <nine> m: True andthen my $a = 1; say $a
[11:40] <camelia> rakudo-moar c0c08a7f6: OUTPUT: «1␤»
[11:40] <lizmat> which causes the Int(Str) issue, as that expects $<accept> to contain Str
[11:40] <nine> So expression thunks cannot even be real lexical scopes. Otherwise that wouldn't have worked
[11:40] <lizmat> right, but the aren't ? 
[11:41] <lizmat> or they're created as an inner block with $_ passed in automatically ?
[11:43] <nine> That's what we do for thunks: create a QAST::Block with a parameter. And we somehow need to add inner blocks to this, but otherwise ignore it when it comes to lexical scopes.
[11:45] <nine> lizmat: commit b710020b27c5b3251af92e6f2f276e880800038d changes semantics. Are the new semantics actually correct?
[11:46] *** linkable6 left
[11:46] *** linkable6 joined
[11:48] <lizmat> changes semantics in what way?
[11:48] <nine> Before, we removed only the very specific colonpairs :D, :U and :_, now it's all colonpairs.
[11:49] <lizmat> do we have other colonpairs ?
[11:49] <lizmat> anyways, I already tried reverting that commit, and it didn't fix oit
[11:49] <lizmat> *it
[11:50] <lizmat> also: it *does* wind up in Actions.type-for-name
[11:50] <lizmat> but $<accept> is just never set
[11:50] <lizmat> but for Int(), $<accept_any> *is*
[11:50] <lizmat> I guess my grammar fu is insufficient  :-(
[11:51] <nine> That's not correct. $<accept> _is_ set
[11:52] <nine> The <!{ nqp::isconcrete($<accept>.ast) }> check however stumbles over the fact that $<accept>.ast is a RakuAST::Type::Simple object instead of the type object itself.
[11:58] <lizmat> so an nqp::istype($<accept>.ast, $*R.actions.r('Type',"Simple')) would be in order?
[11:59] <lizmat> self.actions
[11:59] <nine> No, definitely not.
[12:00] *** reportable6 left
[12:00] <lizmat> ok, then I don't see the way forward here
[12:00] <nine> For one, there are other types than just ::Simple. And then, can maybe_typename even match anything but a type?
[12:00] <lizmat> I don't know, you tell me  :-)
[12:01] <nine> Before figuring out a solution, you have to find out, what that check is actually trying to prevent.
[12:01] * lizmat eliminates the check and starts testing
[12:02] *** reportable6 joined
[12:03] <lizmat> removing the test makes Int(Str) work
[12:04] <lizmat> now on to testing
[12:04] <lizmat> see what broke (or got fixed)
[12:10] <lizmat> 735/1355
[12:10] <lizmat> so no change...  I'd say I'm going to commit that change
[12:14] <lizmat> or maybe not: c76d9324a9f67e4075683e mentioned something about runtime sigilless vars
[12:14] <lizmat> m: my \a = "42"; dd Int(a)
[12:14] <camelia> rakudo-moar c0c08a7f6: OUTPUT: «42␤»
[12:15] <lizmat> now, with RAKUDO_RAKUAST this gives: Symbol 'a' does not have a compile-time value
[12:16] <lizmat> so maybe we need to check for the ast to have a compile-time value ?
[12:16] <lizmat> nine ^^
[12:16] <nine> What RakuAST node type does a compile to?
[12:17] <lizmat> RakuAST::Term::Name
[12:18] <nine> So a check for RakuAST::Type would eliminate that
[12:18] <lizmat> so <?{ nqp::istype($<accept>.ast,RakuAST::Type) }>
[12:19] <lizmat> with RakuAST::Type being looked up and so
[12:19] <nine> yes, like that
[12:19] <lizmat> ack
[12:27] <lizmat> meh, at that time, it *is* actually a RakuAST::Type::Simple
[12:29] <lizmat> call IMPL-CAN-INTERPRET on it ?
[12:33] <lizmat> or maybe that's the problem?   that the "a" wasn't turned into a RakuAST::Term::Name ?
[12:33] <lizmat> the "a" in (a) in my \a = "42"; dd Int(a)
[12:41] <lizmat> $*R.is-name-type seems to think that "a" is a type
[12:42] <lizmat> looks like "a" is a RakuAST::Declaration::External::Constant
[12:47] <lizmat> which at least seems to have the ::Constant part wrong
[12:50] <lizmat> nine: should a RakuAST::Declaration::External::Constant be considered a type ??
[12:50] <lizmat> I think not?
[12:51] <nine> nope
[12:52] <lizmat> ok, will look further there  :-)
[13:00] <lizmat> nah, false trail  :-(
[13:09] <lizmat> ok, I think I found a solution, spectesting now
[13:28] <Geth> ¦ rakudo/main: 4a1fad5898 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[13:28] <Geth> ¦ rakudo/main: RakuAST: fix handling of constants in coercing situations
[13:28] <Geth> ¦ rakudo/main: 
[13:28] <Geth> ¦ rakudo/main: In the "maybe typename" check, check if the given name is a known
[13:28] <Geth> ¦ rakudo/main: type (by name).  However, some ASTs (specificall RakuAST::Type::Coercion)
[13:28] <Geth> ¦ rakudo/main: do not have a name: take that to mean it is indeed a type.
[13:28] <Geth> ¦ rakudo/main: 
[13:28] <Geth> ¦ rakudo/main: The ::Coercion case happens with embedded coercions, such as Int(Str())
[13:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4a1fad5898
[13:28] <Geth> ¦ rakudo/main: 7fae9a116f | (Elizabeth Mattijsen)++ | t/12-rakuast/types.rakutest
[13:28] <Geth> ¦ rakudo/main: RakuAST: activate Type coercion tests again
[13:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7fae9a116f
[13:29] <lizmat> sadly, no impact on roast tests 
[13:37] <Geth> ¦ rakudo/main: 96c68ec569 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6
[13:37] <Geth> ¦ rakudo/main: RakuAST: change .raku of RakuAST::Term::Name
[13:37] <Geth> ¦ rakudo/main: 
[13:37] <Geth> ¦ rakudo/main: The name part is a RakuAST::Name, which can be quite involved, so
[13:37] <Geth> ¦ rakudo/main: give it its own line
[13:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/96c68ec569
[13:38] <nine> Are all possible node types there that don't have a .name coercion types?
[13:40] <lizmat> Type::Coercion is the only one I've seen there until now
[13:40] <lizmat> do you have suggestions for others to check ?
[13:40] <nine> In that case, why not check for Type::Coercion directly?
[13:41] <lizmat> well, *that* felt fragile  :-)
[13:41] <lizmat> but if you'd rather have that check in there, I'll do that
[13:41] <nine> Which indicates incomplete understanding
[13:43] <lizmat> fair enough
[13:49] <nine> To be fair: it's obviously an improvement over the clearly broken state it was in before. So it's clearly a valuable fix.
[13:50] <Geth> ¦ rakudo/main: d96a1b9554 | (Stefan Seifert)++ | 2 files
[13:50] <Geth> ¦ rakudo/main: RakuAST: make blocks embedded in thunks nest properly
[13:50] <Geth> ¦ rakudo/main: 
[13:50] <Geth> ¦ rakudo/main: In "yes" andthen "{dd $_}" the "{dd $_}" gets compiled to a block and a call
[13:50] <Geth> ¦ rakudo/main: to that block. The andthen thunks its RHS. For this to work, the block that's
[13:50] <Geth> ¦ rakudo/main: contained in the string must appear inside the thunk's block. And that
[13:50] <Geth> ¦ rakudo/main: although an expression is not a scope by itself.
[13:50] <Geth> ¦ rakudo/main: 
[13:50] <Geth> ¦ rakudo/main: Fix by making expressions ImmediateBlockUsers if they are thunked and
[13:50] <Geth> ¦ rakudo/main: then adding block declarations to the thunk block.
[13:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d96a1b9554
[13:50] <nine> I really hope this ^^^ holds. It's so much cleaner than the stunt the old frontend pulls.
[13:59] <lizmat> i hope so too
[14:00] <lizmat> I was thinking, maybe $*$ needs a "is-type"  method that would abstract the istype(Coercion) || name is type logic
[14:00] <lizmat> *$R
[14:00] <lizmat> $*R  *sigh*
[14:03] <Geth> ¦ rakudo/main: bd23fda5e6 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[14:03] <Geth> ¦ rakudo/main: RakuAST: change is type test to something matching experience
[14:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bd23fda5e6
[14:05] *** Geth left
[14:05] *** Geth joined
[15:23] <Geth> ¦ rakudo/main: 073da5cd80 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod
[15:23] <Geth> ¦ rakudo/main: RakuAST: fix compilation order of regex thunks
[15:23] <Geth> ¦ rakudo/main: 
[15:23] <Geth> ¦ rakudo/main: A regex thunk's body must be compiled before itself is compiled as a
[15:23] <Geth> ¦ rakudo/main: declaration as the declaration needs the body's code.
[15:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/073da5cd80
[15:58] <Geth> ¦ rakudo/main: 991ebca960 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod
[15:58] <Geth> ¦ rakudo/main: RakuAST: fix names in shapes in variable declarations not getting resolved
[15:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/991ebca960
[15:58] <Geth> ¦ rakudo/main: a5be6d2a64 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod
[15:58] <Geth> ¦ rakudo/main: RakuAST: fix container type in QAST but not in SC
[15:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a5be6d2a64
[15:58] <nine> And still the one test file I'm working on doesn't pass yet... but others do :)
[16:28] <lizmat> now for something completely different: assume I have an int32 with a value, do we have a (semi-) official way to interpret that as a num32 ?
[16:28] <lizmat> bit for bit
[16:33] <lizmat> 742 / 1355 !
[17:17] <Geth> ¦ tap-harness6: tbrowder++ created pull request #62: Use more App::Mi6 capability to add three test buttons to README
[17:17] <Geth> ¦ tap-harness6: review: https://github.com/Raku/tap-harness6/pull/62
[17:19] *** Geth left
[17:19] *** Geth joined
[17:50] <lizmat> m: say Q|::("Int")|.AST.statements.head.expression.name
[17:50] <camelia> rakudo-moar a5be6d2a6: OUTPUT: «RakuAST::Name.new(␤  RakuAST::Name::Part::Expression.new(RakuAST::QuotedString.new(␤    segments   => (␤      RakuAST::StrLiteral.new("Int"),␤    )␤  ))␤)␤»
[17:50] <lizmat> nine: ^^ it feels to me that this is missing an RakuAST::Name::Part::Empty as the argument to RakuAST::Name.new
[17:50] <lizmat> *first
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:07] <nine> I guess that depends on whether you see that :: as part of the name or as a purely syntactic hint. The AST seems unambiguous even without that Empty part
[18:07] <lizmat> except for the canonicalization
[18:07] <lizmat> then, so I'm fixing that now
[18:08] <lizmat> otherwise ::("Int") would just canonicalize to "Int"
[18:09] <discord-raku-bot> <Nemokosch> what problem could that cause?
[18:09] <lizmat> it would eval to a string rather than the Int type object ?
[18:12] <lizmat> nine:  oooh......  "$_ := 42" bombs with Cannot compile bind to RakuAST::Var::Lexical
[18:13] <lizmat> looks like it would make t/spec/S02-magicals/dollar-underscore.t pass
[18:13] <nine> Interesting. What's the difference to a my $a; $a := 42;? The $a should also be just a RakuAST::Var::Lexical, shouldn't it?
[18:14] <lizmat> the AST is the same, apart from needing to define $a
[18:14] <lizmat> and the name of the Var::Lexical obviously
[18:15] <nine> So there must be more condition than just it being a Var::Lexical
[18:16] <lizmat> I'll check it further
[18:16] <lizmat> I ran into it when not wanting to do another level of indentation with given
[18:17] <discord-raku-bot> <Nemokosch> hm, but when you EVAL a string, does it not become, like, interpreted as code?
[18:17] <nine> difference between '"Int"' and 'Int'
[18:18] <lizmat> what nine said :-)
[18:18] <nine> But even the latter, i.e. Int would still be semantically different from ::("Int")
[18:20] <lizmat> as Int would be compile time, and ::("Int") would be runtime ?
[18:24] <Geth> ¦ rakudo/main: b685e6769e | (Elizabeth Mattijsen)++ | 2 files
[18:24] <Geth> ¦ rakudo/main: RakuAST: fix deparse/raku of RakuAST::Name::Part::Expression
[18:24] <Geth> ¦ rakudo/main: 
[18:24] <Geth> ¦ rakudo/main: Well, actually the canonicalization of RakuAST::Name::Part::Expression
[18:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b685e6769e
[18:24] <Geth> ¦ rakudo/main: 892d76e4a9 | (Elizabeth Mattijsen)++ | 2 files
[18:24] <Geth> ¦ rakudo/main: RakuAST: add tests for RakuAST::Name::Part::Expression
[18:24] <Geth> ¦ rakudo/main: 
[18:24] <Geth> ¦ rakudo/main: And more general RakuAST::Name tests
[18:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/892d76e4a9
[18:25] <nine> Yes, though to be fair, both docs and design claim otherwise.
[18:25] <lizmat>  he...  :-)
[18:26] <discord-raku-bot> <Nemokosch> hmm
[18:28] <lizmat> m: say Q|my $a; $a|.AST.statements.skip.head.expression.can-be-bound-to
[18:28] <camelia> rakudo-moar a5be6d2a6: OUTPUT: «True␤»
[18:28] <lizmat> m: say Q|$_|.AST.statements.head.expression.can-be-bound-to
[18:28] <camelia> rakudo-moar a5be6d2a6: OUTPUT: «False␤»
[18:28] <lizmat> the reason we cannot bind to $_
[18:33] <lizmat> nine: apparently self.resolution.can-be-bound-to is False for $_
[18:38] <nine> That sounds easy to fix?
[18:42] <lizmat> indeed: +    method can-be-bound-to() { True }
[18:43] <lizmat> meh, it also needs a IMPL-BIND-QAST then  :-)
[18:50] *** NemokoschKiwi joined
[18:51] *** NemokoschKiwi left
[18:53] <Geth> ¦ rakudo/main: 40e2e095fe | (Elizabeth Mattijsen)++ | 2 files
[18:53] <Geth> ¦ rakudo/main: RakuAST: make sure $_ $! $/ can be bound to
[18:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/40e2e095fe
[18:53] <lizmat> sadly, no ++ on tests
[18:54] <lizmat> dinner&
[19:25] <Geth> ¦ rakudo/main: 47342e10d5 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod
[19:25] <Geth> ¦ rakudo/main: RakuAST: support specifying key type on hash declarations
[19:25] <Geth> ¦ rakudo/main: 
[19:25] <Geth> ¦ rakudo/main: e.g. my %h{Int}
[19:25] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/47342e10d5
[19:25] <nine> And that's t/spec/MISC/bug-coverage.t finally passing
[19:26] *** [Tux] left
[19:26] *** tbrowder left
[19:27] *** tbrowder__ joined
[19:27] *** [Tux] joined
[19:36] <MasterDuke> nine: i don't really want to distract you too much from rakuast work, but have you looked at https://github.com/MoarVM/MoarVM/pull/1746 at all? it looks like i need to do some minor cleanup and/or add a small companion nqp pr, but iirc it does pass a spectest locally
[19:39] <nine> MasterDuke: how about a trade? You fix something in RakuAST and I'll review that branch of yours?
[19:39] <nine> :D
[19:41] <MasterDuke> ha
[19:41] <MasterDuke> tbh, i have been looking at t/spec/S32-num/rat.t and it's `No such method 'add-colonpair' for invocant of type
[19:41] <MasterDuke> 'RakuAST::ColonPair::Value'` off and on, but haven't had a fix yet
[19:45] <nine> Where exactly does it throw that?
[19:50] <gfldex>  /lastlog RAKUDOAST
[19:50] <gfldex>  /lastlog RAKUDO
[19:54] <MasterDuke>    at SETTING::src/core.c/Exception.pm6:64  (/home/dan/Source/perl6/rakudo/blib/CORE.c.setting.moarvm:throw)
[19:54] <MasterDuke>  from src/Perl6/Metamodel/Configuration.nqp:60  (/home/dan/Source/perl6/rakudo/blib/Perl6/Metamodel.moarvm:throw_or_die)
[19:54] <MasterDuke>  from src/vm/moar/dispatchers.nqp:676  (/home/dan/Source/perl6/rakudo/blib/Perl6/BOOTSTRAP/v6c.moarvm:report-method-not-found)
[19:54] <MasterDuke>  from src/vm/moar/dispatchers.nqp:613  (/home/dan/Source/perl6/rakudo/blib/Perl6/BOOTSTRAP/v6c.moarvm:)
[19:54] <MasterDuke>  from src/Raku/Actions.nqp:782  (/home/dan/Source/perl6/rakudo/blib/Raku/Actions.moarvm:EXPR)
[19:56] <nine> I'm a bit torn on ops like sp_p6oget_u as that will do exactly the same as sp_p6oget_i. That's one argument why we don't need the extra op (and it's JIT code). On the other hand, with the variants like sp_p6oget_u32 there _is_ a difference to the _i versions
[20:02] <gfldex> nine: https://gist.github.com/gfldex/88777693f4828c15f56814267bcf33be
[20:02] <nine> m: Q|StrDistance.new(:before<a> :after('b' x 42))|.AST.EVAL
[20:02] <camelia> rakudo-moar 47342e10d: OUTPUT: «===SORRY!===␤No such method 'add-colonpair' for invocant of type␤'RakuAST::ColonPair::Value'␤»
[20:03] <nine> Oooh! There's no comma
[20:03] <nine> m: Q|StrDistance.new(:before<a>, :after('b' x 42))|.AST.EVAL
[20:04] <camelia> rakudo-moar 47342e10d: OUTPUT: «===SORRY!=== Error while compiling ␤Confused␤------> stance.new(:before<a>, :after('b' x 42))⏏<EOL>␤»
[20:05] <nine> How does that work even on the old frontend?
[20:17] <lizmat> 743!
[20:21] <lizmat> nine: looks like $_ is leaking out of "if" scopes in some situations
[20:22] <lizmat> if 1 { $_ = 666 }; say $_; # 666
[20:22] <evalable6> lizmat, rakudo-moar 47342e10d: OUTPUT: «666␤»
[20:22] <lizmat> m: if 1 { $_ = 666 }; say $_
[20:22] <camelia> rakudo-moar 47342e10d: OUTPUT: «666␤»
[20:22] <lizmat> that is.... surprising?
[20:23] <lizmat> looks like an existing bug ?
[20:24] <lizmat> ah, no, of course, if is not topicalizing
[20:27] <lizmat> m: $_ = 42; if 1 { $_ = 666 }; say $_
[20:27] <camelia> rakudo-moar 47342e10d: OUTPUT: «666␤»
[20:27] <lizmat> m: $_ = 42; if 1 { $_ := 666 }; say $_
[20:27] <camelia> rakudo-moar 47342e10d: OUTPUT: «42␤»
[20:27] <lizmat> ????
[20:28] <lizmat> with RAKUDO_RAKUAST it says 666 in both cases
[20:28] <lizmat> that actually feels more correct to me than with the old grammar
[20:49] <lizmat> nine: is it correct that the body of a role is a RakuAST::Sub ?
[20:49] <lizmat> with the name of the role ?
[20:50] <lizmat> and a multi at that ?
[20:51] <lizmat> with multiness "1"  ??
[21:01] <nine> Yes, all of that is rather important
[21:03] <lizmat> but a bit of a hack ?
[21:05] <nine> The hackiest bit of it is surely the Actions replacing the Block object created by the parser with a Sub
[21:05] <lizmat> why does it need to be a Sub ?
[21:06] <lizmat> wouldn't a subclass of Sub like RakuAST::RoleBody be more appropriate ?
[21:06] <nine> It needs to be a Sub because it needs to be a multi
[21:06] <nine> Would that change anything?
[21:07] <lizmat> well, it would make more sense then when trying to build a role using RakuAST calls ?
[21:08] <nine> Why?
[21:08] <lizmat> needing to teach people to put a Sub in the body of a Role to make it work ?
[21:09] <nine> The alternative seems to be teaching people to put a RoleBody in the body of a Role to make it work.
[21:09] <lizmat> well, at least *that* seems to be more DWIM ?
[21:10] <lizmat> or RoleBlock
[21:10] <nine> Why would it seem that?
[21:11] <lizmat> needing to specify a "multiness" of "1", instead of "proto" or "multi" ?
[21:12] <nine> I have to admit "role" would be a better value there :)
[21:14] <lizmat> nine: could you explain why it would need to be a multi sub?  what evil hackery lives there?
[21:15] <nine> I now wonder if multiness actually needs to be set. I can't find any effect multiness(1) would have
[21:16] <nine> Oh, that's simple: we actually use the multi dispatcher to pick a candidate from a parametric role group.
[21:16] <lizmat> aah... ok, now, that's a bad hack  :-)
[21:17] <nine> m: role A[Int] { say "int" }; role A[Str] { say "str" }; class C does A[1] { }
[21:17] <camelia> rakudo-moar 47342e10d: OUTPUT: «int␤»
[21:17] <lizmat> but... wouldn't it make more sense to put that sub into another (hidden) attribute ?
[21:18] <nine> No, we don't just pick a role via the dispatcher. We run the full role body. This is a very visible thing
[21:19] <MasterDuke> m: class A { has $.a; has $.b; }; say A.new(:a<c> :b<d>).a     # has that (no comma required) always worked?
[21:19] <camelia> rakudo-moar 47342e10d: OUTPUT: «c␤»
[21:19] <MasterDuke> committable6: releases class A { has $.a; has $.b; }; say A.new(:a<c> :b<d>).a
[21:20] <committable6> MasterDuke, ¦releases (67 commits): «c␤»
[21:20] <MasterDuke> guess so
[21:20] <nine> I really wonder if this is a bug or some horrible feature
[21:21] <lizmat> isn't that applies the attributes to A.new, and thus doing the right thing?
[21:21] <lizmat> afk&
[21:29] <discord-raku-bot> <Nemokosch> the interesting thing is that you can just list arguments without the comma
[21:29] <discord-raku-bot> <Nemokosch> pretty sure I've heard this from someone at the beginning of my journey
[21:29] <discord-raku-bot> <Nemokosch> so at least it's probably a known thing
[21:33] <timo1> not having to separate colonpairs with comma has been a feature, but at least at some point didn't work in every context
[21:34] <timo1> i think we had something in actions or so called maybe "hunt loose colonpairs" :D
[21:38] <nine> hunt_loose_adverbs_in_arglist which became migrate_colonpairs
[21:40] <nine> Why, oh why!
[21:51] <nine> MasterDuke: so it seems like to fix that test, you'll hopefully find a more elegant way to support this............thing
[21:56] <timo1> i'm now pulling the trigger on a pc upgrade. getting a ryzen 9 5900X
[22:40] *** kjp left
[22:44] *** kjp joined
[23:38] <tbrowder__> timo1: i just got a similar new one and it makes raku smoke!
[23:38] <timo1> magic smoke?
[23:39] <tbrowder__> smoke as in so fast it burns rubber (you’re too young…)
[23:40] <tbrowder__> gto…
[23:40] <Geth> ¦ rakudo/main: 7ca3189b84 | (Elizabeth Mattijsen)++ | src/Raku/ast/package.rakumod
[23:40] <Geth> ¦ rakudo/main: RakuAST: remove RakuAST::LexPad
[23:40] <Geth> ¦ rakudo/main: 
[23:40] <Geth> ¦ rakudo/main: As the role body logic now uses the RakuAST::Nqp classes, thereby
[23:40] <Geth> ¦ rakudo/main: eliminating the need for RakuAST::LexPad
[23:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7ca3189b84
[23:45] <Geth> ¦ rakudo/main: 166e166832 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6
[23:45] <Geth> ¦ rakudo/main: RakuAST: Tweak RakuAST::Nqp.raku
[23:45] <Geth> ¦ rakudo/main: 
[23:45] <Geth> ¦ rakudo/main: If there are no arguments, keep it on the same line
[23:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/166e166832
[23:48] <timo1> "so fast it burns rubber" is how i feel every time the light turns green when i'm in my EV
[23:53] <tbrowder__> is that a battery burning?
[23:54] <tbrowder__> or an electric bike?
[23:56] <timo1> the power use indicator only jumps into the "power" part of the spectrum for a tiny moment!
