[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:26] *** JRaspass left
[00:26] *** JRaspass joined
[01:31] *** jgaz joined
[03:27] *** nativecallable6 left
[03:27] *** sourceable6 left
[03:27] *** statisfiable6 left
[03:27] *** benchable6 left
[03:27] *** committable6 left
[03:27] *** greppable6 left
[03:27] *** coverable6 left
[03:27] *** quotable6 left
[03:27] *** squashable6 left
[03:27] *** bloatable6 left
[03:27] *** unicodable6 left
[03:27] *** tellable6 left
[03:27] *** linkable6 left
[03:27] *** releasable6 left
[03:27] *** bisectable6 left
[03:27] *** shareable6 left
[03:27] *** evalable6 left
[03:27] *** reportable6 left
[03:27] *** notable6 left
[03:27] *** notable6 joined
[03:27] *** tellable6 joined
[03:27] *** unicodable6 joined
[03:27] *** bloatable6 joined
[03:27] *** greppable6 joined
[03:28] *** evalable6 joined
[03:28] *** reportable6 joined
[03:28] *** quotable6 joined
[03:29] *** squashable6 joined
[03:29] *** committable6 joined
[03:29] *** coverable6 joined
[03:29] *** benchable6 joined
[03:29] *** bisectable6 joined
[03:29] *** statisfiable6 joined
[03:29] *** linkable6 joined
[03:30] *** nativecallable6 joined
[03:30] *** releasable6 joined
[03:30] *** sourceable6 joined
[03:30] *** shareable6 joined
[03:54] *** MasterDuke left
[05:20] *** kjp left
[05:23] *** kjp joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:09] *** zostay left
[07:09] *** zostay joined
[11:03] <Geth> ¦ rakudo/main: 5b456299b6 | (Elizabeth Mattijsen)++ | 6 files

[11:03] <Geth> ¦ rakudo/main: RakuAST: allow constants in rakudoc configs

[11:03] <Geth> ¦ rakudo/main: 

[11:03] <Geth> ¦ rakudo/main: - move the literalization of configs to CHECK time

[11:03] <Geth> ¦ rakudo/main: - adapt deparsing of ::Doc::Block accordingly

[11:03] <Geth> ¦ rakudo/main: - fix .(w|s)orry-ad-hoc methods on ::Doc

[11:03] <Geth> ¦ rakudo/main: - add $!resolved-config attribute to ::Doc::Block

[11:03] <Geth> ¦ rakudo/main: - recursively visit ::Doc::Block.paragraphs for config literalization

[11:03] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[11:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5b456299b6

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:54] <Geth> ¦ rakudo/main: 73888f45ad | (Nick Logan)++ | src/core.c/CompUnit/RepositoryRegistry.pm6

[12:54] <Geth> ¦ rakudo/main: Remove largely unknown flags from installed raku script shims

[12:54] <Geth> ¦ rakudo/main: 

[12:54] <Geth> ¦ rakudo/main: A mostly unknown feature of the bin script shims CURI installs is

[12:54] <Geth> ¦ rakudo/main: that it allows choosing the distribution to load the script from,

[12:54] <Geth> ¦ rakudo/main: which allows loading an e.g. older version of some script. However

[12:54] <Geth> ¦ rakudo/main: to do so required using the :$name :$auth :$ver :$api arguments

[12:54] <Geth> ¦ rakudo/main: which prevents any installed raku bin script from taking any

[12:54] <Geth> ¦ rakudo/main: arguments of those names; the shim scripts breaks things such as

[12:54] <Geth> ¦ rakudo/main: providing a bin/foo --ver that outputs version information. This

[12:54] <Geth> ¦ rakudo/main: change removes those arguments until a better solution can be

[12:54] <Geth> ¦ rakudo/main: implemented.

[12:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/73888f45ad

[12:54] <Geth> ¦ rakudo/main: c14c725ab6 | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/RepositoryRegistry.pm6

[12:54] <Geth> ¦ rakudo/main: Merge pull request #5286 from rakudo/ugexe/dont-squat-common-arg-names-redux

[12:54] <Geth> ¦ rakudo/main: 

[12:54] <Geth> ¦ rakudo/main: Remove largely unknown flags from installed raku script shims

[12:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c14c725ab6

[14:07] <[Tux]> Rakudo v2023.05-137-gc14c725ab (v6.d) on MoarVM 2023.05-7-g3df20182b

[14:07] <[Tux]> csv-test-xs-20      0.404 -  0.523

[14:07] <[Tux]> csv-ip5xs           0.798 -  1.025

[14:07] <[Tux]> test-t --race       0.818 -  0.906

[14:07] <[Tux]> test-t              1.378 -  1.501

[14:07] <[Tux]> csv-parser          4.028 -  4.499

[14:07] <[Tux]> csv-ip5xs-20        5.838 -  6.060

[14:07] <[Tux]> test                6.267 -  6.869

[14:07] <[Tux]> test-t-20 --race    6.172 -  6.974

[14:07] <[Tux]> test-t-20          19.865 - 22.107

[14:31] <ugexe> https://gist.github.com/ugexe/6faa8b2e79e6e527c936ff57cde0b8ec so the javascript library fdir can crawl the home directory pretty fast if it doesn't check for symlinks (it does it in 1 second for me). When I add the option to check symlinks it takes 12s. Rakudos dir-recurse crawls my home dir in 6s, but i think its checking for symlinks.

[14:31] <tellable6> 2023-06-18T00:20:37Z #raku <tbrowder__> ugexe thanks. i'll keep fiddling with it and come for help if need be.

[14:31] <tellable6> 2023-06-18T10:39:36Z #raku <tbrowder__> ugexe if i use module A in module B, does it matter in which depends block it appears in the META6.json file for module B?

[14:34] <ugexe> tbrowder__: sort of. if a module only appears in tests then it goes in test-depends, if it appears in tests and your e.g. provides then it goes in regular depends. if a module only appears in e.g. Build.pm then it goes in builds-depends, and if it appears in a Build.pm and one of your modules in provides then it goes in depends

[14:39] <ugexe> you could also list things in more than one depends section if you really want to as well

[14:46] <ugexe> strangely if i remove the nqp::fileislink check in DIR-RECURSE it takes over twice as long to run

[14:48] <tbrowder__> .tell ugexe thanks, Nick.

[14:48] <tellable6> tbrowder__, I'll pass your message to ugexe

[16:12] *** benchable6 left
[16:12] *** bisectable6 left
[16:12] *** committable6 left
[16:12] *** nativecallable6 left
[16:12] *** linkable6 left
[16:12] *** quotable6 left
[16:12] *** notable6 left
[16:12] *** evalable6 left
[16:12] *** releasable6 left
[16:12] *** shareable6 left
[16:12] *** greppable6 left
[16:12] *** unicodable6 left
[16:12] *** reportable6 left
[16:12] *** squashable6 left
[16:12] *** tellable6 left
[16:13] *** tellable6 joined
[16:13] *** squashable6 joined
[16:13] *** linkable6 joined
[16:13] *** bisectable6 joined
[16:13] *** greppable6 joined
[16:13] *** quotable6 joined
[16:13] *** nativecallable6 joined
[16:13] *** benchable6 joined
[16:13] *** shareable6 joined
[16:14] *** reportable6 joined
[16:14] *** releasable6 joined
[16:14] *** evalable6 joined
[16:14] *** committable6 joined
[16:15] *** notable6 joined
[16:15] *** unicodable6 joined
[16:48] <ugexe> On most systems the call to readdir(3) -- https://github.com/MoarVM/MoarVM/blob/3df20182bbc39d6a8faddab2091b91dafae36577/src/io/dirops.c#LL336C13-L336C20 -- would return if the path is a file or directory. In DIR-RECURSE it does one stat to check if the path is a file, and another if its not a file to see if its a directory because all it has is a string path. So for example if DIR-RECURSE was

[16:48] <ugexe> implemented in moarvm it would be fairly easy to avoid those stat calls

[16:49] <ugexe> although its not entirely annoying because on some filesystems readdir(3) doesn't return d_type

[16:49] <ugexe> not entirely not-annoying^

[16:52] *** SmokeMachine left
[16:52] *** SmokeMachine joined
[17:08] <ugexe> hmm, we are also stating every . and .. entry

[17:19] <ugexe> https://gist.github.com/ugexe/5a3f62d5e66a9844ef5fd9c1ae0575a8

[17:20] <ugexe> that avoids stating some extra . and .. entries by doing the ACCEPTS check before the stat. it also skips the exitence stat check by just using `try` on the other two stats that come after

[17:20] <ugexe> its a tiny bit faster, but not much

[17:23] <ugexe> i had to use `try { nqp::foo(...) }` instead of just `try nqp::foo(...)` though

[17:26] <ugexe> there is another microoptimization in there in that we don't technically need to create $path until after $!file.ACCEPTS or $!dir.ACCEPTS return true (or both return false). that would be an optimization because it avoids doing the concat with abspath and $entry if $entry starts with . (so whatever number of directories * 2 -- for . and .. -- number of concats)

[17:27] <ugexe> well i guess not, the dot check is only on directories not files

[17:32] <ugexe> it looks like maybe we would end up running nqp::fileislink($path) on every . and .. directory since those wouldnt fall through earlier conditionals due to the ACCEPTS

[17:37] <ugexe> i dunno if they can be optimized though, since we don't know if we need to apply the $!file.ACCEPTS or $!dir.ACCEPTS to what fileislink will operate on

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:51] <Geth> ¦ rakudo/main: c884b1668a | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Literalize.pm6

[18:51] <Geth> ¦ rakudo/main: RakuAST: allow constant terms to be used in rakudoc config

[18:51] <Geth> ¦ rakudo/main: 

[18:51] <Geth> ¦ rakudo/main: By attempting to resolve RakuAST::Term::Name when literalizing,

[18:51] <Geth> ¦ rakudo/main: and use that value if successful.

[18:51] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c884b1668a

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: 4e08cb98f0 | (Nick Logan)++ | src/core.c/Rakudo/Internals.pm6

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: Remove stat existence check

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: 

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: Currently we do a stat to check that a path exists before we do

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: a followup stat to check if that path is a file or directory. We

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: have to do the second stat regardless, so if we just 'try' the

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: second stat and remove the existence check then we ultimately

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: do one less stat call. This changes the current behavior to the

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: aforementioned behavior, resulting in a ~10% speed up.

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: review: https://github.com/rakudo/rakudo/commit/4e08cb98f0

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: 8c5e74f7b5 | (Nick Logan)++ | src/core.c/Rakudo/Internals.pm6

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: Filter paths before stating them

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: 

[19:30] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: Currently the default of DIR-RECURSE ignores any directory that

[19:31] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: starts with '.'. However, when reading the contents of a directory

[19:31] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: there is always a '.' and '..', which means we are stat'ing a lot

[19:31] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: of $entry that get filted out in the next conditional i.e.

[19:31] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: $!dir.ACCEPTS. This reorders the file and directory check

[19:31] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: conditionals to filter before doing a stat, resulting in a ~3%

[19:31] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: speed up with the default directory and file filters.

[19:31] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: review: https://github.com/rakudo/rakudo/commit/8c5e74f7b5

[19:34] <Geth> ¦ rakudo: ugexe++ created pull request #5287: Optimize internal directory recursion

[19:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5287

[19:55] <Geth> ¦ rakudo/main: c6ceff3e6b | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Fixups.pm6

[19:55] <Geth> ¦ rakudo/main: RakuAST: allow any uppercase characters as markup code

[19:55] <Geth> ¦ rakudo/main: 

[19:55] <Geth> ¦ rakudo/main: But only if explicitely specified in :allow.  Later, maybe implicit

[19:55] <Geth> ¦ rakudo/main: specifications will also be handled.  If now :allow values are known,

[19:55] <Geth> ¦ rakudo/main: still defaults to A..Z as allowable characters for markup code

[19:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c6ceff3e6b

[19:55] <lizmat> s/now/no   *sigh*

[20:04] *** leont left
[20:05] *** leont joined
[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: 0ae022849e | (Nick Logan)++ | src/core.c/Rakudo/Internals.pm6

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: Remove stat existence check

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: 

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: Currently we do a stat to check that a path exists before we do

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: a followup stat to check if that path is a file or directory. We

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: have to do the second stat regardless, so if we just 'try' the

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: second stat and remove the existence check then we ultimately

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: do one less stat call. This changes the current behavior to the

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: later aforementioned behavior, resulting in a ~10% speed up.

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: review: https://github.com/rakudo/rakudo/commit/0ae022849e

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: 78d791120f | (Nick Logan)++ | src/core.c/Rakudo/Internals.pm6

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: Filter paths before stating them

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: 

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: Currently the default of DIR-RECURSE ignores any directory that

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: starts with '.'. However, when reading the contents of a directory

[20:10] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: there is always a '.' and '..', which means we are stat'ing a lot

[20:11] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: of $entry that get filted out in the next conditional i.e.

[20:11] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: $!dir.ACCEPTS. This reorders the file and directory check

[20:11] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: conditionals to filter before doing a stat, resulting in a ~3%

[20:11] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: speed up with the default directory and file filters.

[20:11] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: review: https://github.com/rakudo/rakudo/commit/78d791120f

[20:12] <ugexe> added a missing `try` on nqp::fileislink and forced push^

[20:12] <lizmat> and still doing good on performance ?

[20:13] <ugexe> yeah, the speed difference was ~1% slower but still an overall win by about 9%

[20:14] <lizmat> cool!

[20:15] <ugexe> i suppose the exceptions from e.g. nqp::stat can't be caught and resumed, or else that might be a way to not have 3 separate try

[20:17] <lizmat> if they can't be resumed, then try wouldn't work either, because that depends on .resume, no?

[20:17] <ugexe> m: use nqp; sub foo { CATCH { default { say $_.raku; $_.resume } }; nqp::fileislink("asdf"); }; foo()

[20:17] <camelia> rakudo-moar c6ceff3e6: OUTPUT: «X::AdHoc.new(payload => "Failed to stat file: no such file or directory")␤This exception is not resumable␤  in block  at <tmp> line 1␤  in any  at <tmp> line 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:17] <lizmat> interesting

[20:18] <ugexe> would be nice if that payload included the path as well

[20:27] <ugexe> ok we can use a single `try`

[20:28] <ugexe> its not ideal for a public facing api but for internal use i think its fine

[20:30] <timo1> i don't think any exception from "inside" moarvm are resumable, but resumable is also different from try

[20:36] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: 2642bf2ddc | (Nick Logan)++ | src/core.c/Rakudo/Internals.pm6

[20:36] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: Reduce number of 'try' used

[20:36] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: 

[20:36] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: Previously we added 'try' to nqp ops that expect their path arg

[20:36] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: to exist on the file system in order to remove a stat call to

[20:37] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: check for existence. This reduces the number of 'try' used from

[20:37] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: one for each of the aforementioned nqp ops to just one total,

[20:37] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: which results in a ~3% speed up.

[20:37] <Geth> ¦ rakudo/ugexe/optimize-dir-recurse: review: https://github.com/rakudo/rakudo/commit/2642bf2ddc

[23:02] *** evalable6 left
[23:02] *** linkable6 left
[23:02] *** evalable6 joined
[23:02] *** linkable6 joined
