[02:11] *** |Tux| left
[02:24] *** |Tux| joined
[05:57] *** [Coke] left
[05:59] *** [Coke] joined
[07:36] *** sena_kun joined
[09:26] *** sena_kun left
[09:28] *** sena_kun joined
[09:29] *** sena_kun left
[10:41] *** samcv left
[10:42] *** samcv joined
[13:02] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/12/11/2023-50-more-magic/

[13:20] *** sjn left
[17:41] *** sjn joined
[18:04] <ab5tract> I don't understand the performance degradation I'm seeing when running this code: https://gist.github.com/ab5tract/ff53731543df4cedd1c5f15fb0599c93

[18:05] <ab5tract> If it were GC issues, I'd expect periodic interruptions. What happens here is that performance is fine for the first 1-2cm of snowfall and then starts sliding off a cliff.

[18:07] <ab5tract> I've done several things to simplify and improve the code, including destructuring the objects into arrays of attributes. These arrays are kept from growing too large by splicing out snow that gets covered by a "fill line" in the snowfall accumulator.

[18:39] *** sena_kun joined
[20:23] <ab5tract> I was wrong about GC. It's definitely the culprit (avg. 71.9 ms), though it's unclear why it starts getting slower over time considering the code is designed to keep the amount of work per frame as clost to constant as possible. Does the GC even need to "collect" values that are thrown to the void in a splice call? 

[21:14] *** samebchase left
[21:14] *** samebchase joined
[21:14] *** RakuIRCLogger left
[22:38] <Geth> ¦ rakudo: vrurg++ created pull request #5493: Complete generic instantiation 4

[22:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5493

[23:09] *** sena_kun left
[23:24] *** sena_kun joined
[23:26] *** sena_kun left
