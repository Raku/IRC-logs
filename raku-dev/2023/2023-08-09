[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:03] *** ab5tract joined
[00:37] *** ab5tract left
[01:55] <MasterDuke> japhb: i think copying native arrays should be using memcpy, if you're going from one to another of the same parameterization
[01:59] <MasterDuke> m: my int @a = ^10_000; my int @b; my $s = now; @b = @a for ^100_000; say now - $s; @b[3_000] = 23; say @b[3_000]; say @a[3_000]
[01:59] <camelia> rakudo-moar 8b4aca57a: OUTPUT: «0.148709466␤23␤3000␤»
[02:00] <MasterDuke> locally, perf shows ^^^ spending most of its time in memcpy
[02:02] <MasterDuke> m: my int32 @a = ^10_000; my int @b; my $s = now; @b = @a for ^100_000; say now - $s; @b[3_000] = 23; say @b[3_000]; say @a[3_000]    # but if they differ...
[02:02] <camelia> rakudo-moar 8b4aca57a: OUTPUT: «6.021918929␤23␤3000␤»
[02:11] *** linkable6 left
[02:11] *** evalable6 left
[02:12] *** linkable6 joined
[02:13] *** evalable6 joined
[02:56] <japhb> MasterDuke: In the case of CBOR-Simple the problem is that a Buf is a VMArray and a CArray is a CArray and a native_array is neither.
[02:57] <MasterDuke> hm. converting between all combinations of the three?
[02:58] <japhb> Not all of them.  Mostly native_arrays or CArrays in and out of buf8's, possibly with byte swapping.  But yeah, pretty much all the native_array types, including unusual stuff like 16-bit floats.
[03:31] <MasterDuke> huh. and how do you currently do something like `my int64 @a = 1,2; my buf8 $b = @a;`?
[03:31] <MasterDuke> or do the sizes always match?
[05:27] *** quotable6 left
[05:27] *** tellable6 left
[05:27] *** sourceable6 left
[05:27] *** benchable6 left
[05:27] *** notable6 left
[05:27] *** coverable6 left
[05:27] *** committable6 left
[05:27] *** nativecallable6 left
[05:27] *** statisfiable6 left
[05:27] *** bisectable6 left
[05:27] *** reportable6 left
[05:27] *** greppable6 left
[05:27] *** evalable6 left
[05:27] *** shareable6 left
[05:27] *** releasable6 left
[05:27] *** unicodable6 left
[05:27] *** linkable6 left
[05:27] *** bloatable6 left
[05:27] *** squashable6 left
[05:28] *** notable6 joined
[05:28] *** bisectable6 joined
[05:28] *** nativecallable6 joined
[05:28] *** committable6 joined
[05:28] *** evalable6 joined
[05:28] *** coverable6 joined
[05:29] *** shareable6 joined
[05:29] *** quotable6 joined
[05:29] *** linkable6 joined
[05:29] *** statisfiable6 joined
[05:29] *** releasable6 joined
[05:29] *** unicodable6 joined
[05:29] *** greppable6 joined
[05:29] *** tellable6 joined
[05:30] *** sourceable6 joined
[05:30] *** bloatable6 joined
[05:30] *** reportable6 joined
[05:30] *** squashable6 joined
[05:30] *** benchable6 joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:05] <japhb> Packing is relatively reasonable: https://github.com/japhb/CBOR-Simple/blob/main/lib/CBOR/Simple.rakumod#L393-L490
[06:06] <japhb> Unpacking is ... less so: https://github.com/japhb/CBOR-Simple/blob/main/lib/CBOR/Simple.rakumod#L778-L1004
[07:03] *** linkable6 left
[07:03] *** evalable6 left
[07:04] *** evalable6 joined
[07:05] *** linkable6 joined
[08:30] <Geth> ¦ rakudo/main: 87585eaac4 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Sorting.pm6
[08:30] <Geth> ¦ rakudo/main: Streamline sorting of degenerate lists
[08:30] <Geth> ¦ rakudo/main: 
[08:30] <Geth> ¦ rakudo/main: Specifically the 0, 1 and 2 element lists.
[08:30] <Geth> ¦ rakudo/main: 
[08:30] <Geth> ¦ rakudo/main: This got rid of a helper sub, and reduced the bytecode size of the
[08:30] <Geth> ¦ rakudo/main: sorting logic.  Still nowhere near inlining, but will allow more
[08:30] <Geth> ¦ rakudo/main: inlining into it.
[08:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/87585eaac4
[09:56] *** linkable6 left
[09:56] *** evalable6 left
[09:58] *** linkable6 joined
[09:59] *** evalable6 joined
[10:00] *** jjatria left
[10:00] *** JRaspass left
[10:06] <Geth> ¦ rakudo/main: 53edf4e425 | (Elizabeth Mattijsen)++ | 2 files
[10:06] <Geth> ¦ rakudo/main: Implement List.sort(&by?, :k) to return result indices
[10:06] <Geth> ¦ rakudo/main: 
[10:06] <Geth> ¦ rakudo/main: rather than the original or mapped values.  There are basically 3
[10:06] <Geth> ¦ rakudo/main: flavours:
[10:06] <Geth> ¦ rakudo/main: 
[10:06] <Geth> ¦ rakudo/main: - .sort(:k)          sort values, return indices
[10:06] <Geth> ¦ rakudo/main: - .sort(*.Str), :k)  sort stringified values, return indices
[10:06] <Geth> ¦ rakudo/main: - .sort(&[==], :k)   sort using given comparator, return indices
[10:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/53edf4e425
[10:08] <lizmat> nemokosch ^^
[10:14] *** jjatria joined
[10:14] *** JRaspass joined
[10:32] *** timo left
[10:37] *** timo joined
[10:41] <discord-raku-bot> <vendethiel> lizmat++ # sub prefix:<⍋> = *.sort(:k); sub prefix:<⍒> = *.sort(:k).reverse;
[10:45] *** Geth left
[10:45] *** Geth joined
[10:45] *** RakuIRCLogger left
[10:45] *** RakuIRCLogger joined
[11:09] *** JRaspass left
[11:09] *** jjatria left
[11:21] *** JRaspass joined
[11:26] <lizmat> aah... APL :-)
[11:27] *** jjatria joined
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:05] *** |Tux| left
[12:05] *** tbrowder__ left
[12:05] *** rba left
[12:05] *** leont left
[12:05] *** |Tux| joined
[12:05] *** tbrowder__ joined
[12:05] *** rba joined
[12:05] *** leont joined
[12:17] *** JRaspass left
[12:17] *** jjatria left
[12:29] *** jjatria joined
[12:34] *** JRaspass joined
[12:56] *** ab5tract joined
[13:22] *** JRaspass left
[13:33] *** JRaspass joined
[13:45] *** rypervenche left
[14:01] *** rypervenche joined
[14:06] <lizmat> ugexe nine looks like a4a2bbd24e9aed012fd175028501effb96ad35da causes a -28 in make test on RakuAST
[14:06] <lizmat> basically all of NativeCall dies
[14:06] <lizmat> INIT my Lock $setup-lock .= new
[14:07] <lizmat> apparently does not precompile correctly yet in RakuAST
[14:07] *** linkable6 left
[14:08] <lizmat> m: say Q|INIT my Lock $setup-lock .= new|.AST.EVAL
[14:08] <camelia> rakudo-moar 53edf4e42: OUTPUT: «Lock.new␤»
[14:08] <lizmat> runs fine otherwise, just when it gets to be precompiled
[14:08] *** linkable6 joined
[14:19] <Geth> ¦ rakudo/main: 20bd4165d1 | (Elizabeth Mattijsen)++ | 3 files
[14:19] <Geth> ¦ rakudo/main: RakuAST: add support for "once" statement prefix
[14:19] <Geth> ¦ rakudo/main: 
[14:19] <Geth> ¦ rakudo/main: - add class RakuAST::StatementPrifix::Once
[14:19] <Geth> ¦ rakudo/main: - add grammar and action hooks
[14:19] <Geth> ¦ rakudo/main: 
[14:19] <Geth> ¦ rakudo/main: Sadly, the "once" block does not get executed, so the value always
[14:19] <Geth> ¦ rakudo/main: remains Mu.  Looking at the generated QAST, it looks ok to me.  But
[14:19] <Geth> ¦ rakudo/main: I'm surely missing some subtlety.  At least it doesn't break any
[14:19] <Geth> ¦ rakudo/main: tests.
[14:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/20bd4165d1
[14:19] <lizmat> nine ^^  if you have any suggestions for me to look at
[14:42] *** lizmat_ joined
[14:43] *** lizmat left
[14:46] *** lizmat_ left
[14:46] *** lizmat joined
[14:47] <ugexe> Unfortunately I don't have anything to add. I'm not quite sure why the INIT was needed for NativeCall to run when disabling precomp, but it felt like some nativecall role that gets mixed in with a trait was trying to access the lock variable in such a way that the Lock.new had not been run yet ($setup-lock would still be Lock:U). It also seems like we would only want to create locks at runtime,
[14:47] <ugexe> and that creating this specific one asap at runtime didn't *not* make sense
[14:50] <lizmat> understood
[15:46] *** linkable6 left
[15:46] *** evalable6 left
[15:48] *** linkable6 joined
[15:49] *** evalable6 joined
[17:31] *** ab5tract left
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[19:02] *** linkable6 left
[19:02] *** evalable6 left
[19:03] *** linkable6 joined
[19:03] *** evalable6 joined
[19:13] *** squashable6 left
[19:13] *** squashable6 joined
[20:15] *** ab5tract joined
[20:27] *** ab5tract left
[20:54] *** finanalyst joined
[21:03] <finanalyst> @coleman I left a couple of messages for you on raku-doc
[21:03] <coleman> Roger
[21:34] *** ab5tract joined
[23:18] *** finanalyst left
[23:59] *** guifa__ joined
