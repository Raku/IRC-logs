[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:03] *** statisfiable6 left
[01:03] *** coverable6 left
[01:03] *** greppable6 left
[01:03] *** bloatable6 left
[01:03] *** releasable6 left
[01:03] *** squashable6 left
[01:03] *** bisectable6 left
[01:03] *** sourceable6 left
[01:03] *** committable6 left
[01:03] *** tellable6 left
[01:03] *** linkable6 left
[01:03] *** benchable6 left
[01:03] *** unicodable6 left
[01:03] *** nativecallable6 left
[01:03] *** quotable6 left
[01:03] *** notable6 left
[01:03] *** shareable6 left
[01:03] *** reportable6 left
[01:03] *** sourceable6 joined
[01:04] *** squashable6 joined
[01:04] *** shareable6 joined
[01:04] *** committable6 joined
[01:04] *** reportable6 joined
[01:05] *** greppable6 joined
[01:05] *** unicodable6 joined
[01:05] *** linkable6 joined
[01:05] *** tellable6 joined
[01:05] *** benchable6 joined
[01:06] *** quotable6 joined
[01:06] *** bloatable6 joined
[01:06] *** coverable6 joined
[01:06] *** statisfiable6 joined
[01:06] *** notable6 joined
[01:06] *** nativecallable6 joined
[01:06] *** bisectable6 joined
[01:06] *** releasable6 joined
[02:38] *** reportable6 left
[02:38] *** unicodable6 left
[02:38] *** coverable6 left
[02:38] *** greppable6 left
[02:38] *** squashable6 left
[02:38] *** releasable6 left
[02:38] *** notable6 left
[02:38] *** nativecallable6 left
[02:38] *** shareable6 left
[02:38] *** linkable6 left
[02:38] *** statisfiable6 left
[02:38] *** committable6 left
[02:38] *** benchable6 left
[02:38] *** quotable6 left
[02:38] *** sourceable6 left
[02:38] *** bisectable6 left
[02:38] *** bloatable6 left
[02:38] *** tellable6 left
[02:38] *** tellable6 joined
[02:38] *** notable6 joined
[02:38] *** coverable6 joined
[02:38] *** shareable6 joined
[02:39] *** sourceable6 joined
[02:39] *** releasable6 joined
[02:39] *** squashable6 joined
[02:39] *** nativecallable6 joined
[02:39] *** benchable6 joined
[02:39] *** committable6 joined
[02:39] *** statisfiable6 joined
[02:39] *** linkable6 joined
[02:40] *** unicodable6 joined
[02:40] *** bisectable6 joined
[02:40] *** greppable6 joined
[02:40] *** reportable6 joined
[02:41] *** quotable6 joined
[02:41] *** bloatable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[07:00] <Geth> ¦ rakudo/main: f151aba3c4 | (Elizabeth Mattijsen)++ | 2 files

[07:00] <Geth> ¦ rakudo/main: RakuAST: make sure Regex.source is populated

[07:00] <Geth> ¦ rakudo/main: 

[07:00] <Geth> ¦ rakudo/main: Although I'm not happy with assigning the .source at CHECK time,

[07:00] <Geth> ¦ rakudo/main: there should be a better way.

[07:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f151aba3c4

[08:36] *** sena_kun joined
[08:38] <Geth> ¦ whateverable: 9eff36756a | (Elizabeth Mattijsen)++ | 2 files

[08:38] <Geth> ¦ whateverable: Fix issue with IRC::Client dependency

[08:38] <Geth> ¦ whateverable: 

[08:38] <Geth> ¦ whateverable: And bump version

[08:38] <Geth> ¦ whateverable: review: https://github.com/Raku/whateverable/commit/9eff36756a

[09:50] *** ab5tract joined
[10:53] *** ab5tract left
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:06] <Geth> ¦ rakudo/main: 7114b4d739 | (Elizabeth Mattijsen)++ | 3 files

[12:06] <Geth> ¦ rakudo/main: RakuAST: add set-from-also/from-also flag to Is/Does trait

[12:06] <Geth> ¦ rakudo/main: 

[12:06] <Geth> ¦ rakudo/main: So that we can mark the origin of the trait, needed for deparsing

[12:06] <Geth> ¦ rakudo/main: and .raku handling

[12:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7114b4d739

[13:05] *** linkable6 left
[13:05] *** evalable6 left
[13:07] *** evalable6 joined
[13:07] *** linkable6 joined
[13:14] <Geth> ¦ rakudo/main: 3072e91ea7 | (Elizabeth Mattijsen)++ | 3 files

[13:14] <Geth> ¦ rakudo/main: Revert "RakuAST: add set-from-also/from-also flag to Is/Does trait"

[13:14] <Geth> ¦ rakudo/main: 

[13:14] <Geth> ¦ rakudo/main: This reverts commit 7114b4d739c1a51b5301859cf77ddc0af8716474.

[13:14] <Geth> ¦ rakudo/main: 

[13:14] <Geth> ¦ rakudo/main: Decided against creating a class for "also", as it opens up all

[13:14] <Geth> ¦ rakudo/main: sorts of issues with timing, deparsing and .raku

[13:14] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3072e91ea7

[13:17] *** ab5tract joined
[13:37] <Geth> ¦ rakudo/main: f325c40437 | (Elizabeth Mattijsen)++ | 2 files

[13:37] <Geth> ¦ rakudo/main: RakuAST: add support for "also is Foo" and "also does Foo"

[13:37] <Geth> ¦ rakudo/main: 

[13:37] <Geth> ¦ rakudo/main: Make this a purely grammar / action event, without any explicit

[13:37] <Geth> ¦ rakudo/main: deparsing or .raku.  While 7114b4d739 introduced a flag for Traits

[13:37] <Geth> ¦ rakudo/main: to indicate they were from an "also", and while that would help in

[13:37] <Geth> ¦ rakudo/main: deparsing, it would not help with .raku.

[13:37] <Geth> ¦ rakudo/main: 

[13:37] <Geth> ¦ rakudo/main: <…commit message has 16 more lines…>

[13:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f325c40437

[13:37] <lizmat> +3 tests!

[13:45] <vrurg_> lizmat++!

[13:47] <lizmat> funny fact: "trusts" is implemented as a trait_mod, yet there is no grammar support for it as a trait

[13:47] <lizmat> m: class B { ... }; class A trusts B { }

[13:47] <camelia> rakudo-moar 3072e91ea: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse class definition␤at <tmp>:1␤------> class B { ... }; class A⏏ trusts B { }␤    expecting any of:␤        generic role␤»

[13:48] <vrurg_> lizmat: technically, Perl6/Actions.nqp:3337

[13:48] <lizmat> yes, but that sub could have been named anything else

[13:50] <vrurg_> I'd say the edges are fuzzy in this area.

[13:50] *** vrurg_ is now known as vrurg

[14:20] *** sena_kun left
[14:23] *** sena_kun joined
[14:27] <Geth> ¦ rakudo/main: e1f801fce7 | (Elizabeth Mattijsen)++ | 2 files

[14:27] <Geth> ¦ rakudo/main: RakuAST: add dummy .new to classes used as markers

[14:27] <Geth> ¦ rakudo/main: 

[14:27] <Geth> ¦ rakudo/main: Specifically ::Regex::Backtrack::xxx and ::Parameter::Slurpy::xxx

[14:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e1f801fce7

[14:33] <Geth> ¦ rakudo/main: 390b8227eb | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[14:33] <Geth> ¦ rakudo/main: RakuAST: don't .rakufy :!excludes-min|max

[14:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/390b8227eb

[15:10] *** ab5tract left
[15:22] <ugexe> why would an installed version of zef have problems deleting the home and site module locations? presumably its because some precomp or source file for zef (which would be located in one of those location) is open. but why would such a handle remain open after its loaded the module?

[15:22] <ugexe> another instance such a problem occurs would be `zef install zef --force` with the same version of zef (which would generate the same sha1 file names and overwrite those source files)

[15:43] <Geth> ¦ rakudo/main: 22e78454e1 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[15:43] <Geth> ¦ rakudo/main: RakuAST: fix deparsing of ::Regex::Quantifier::(|Block)Range

[15:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/22e78454e1

[16:19] *** linkable6 left
[16:19] *** evalable6 left
[16:21] *** linkable6 joined
[16:22] *** evalable6 joined
[16:27] <Geth> ¦ rakudo/main: 20bfeaf22e | (Elizabeth Mattijsen)++ | 2 files

[16:27] <Geth> ¦ rakudo/main: RakuAST: also can also operate on subs/methods

[16:27] <Geth> ¦ rakudo/main: 

[16:27] <Geth> ¦ rakudo/main: So introduce a $*ALSO-TARGET that is set for packages and subs/methods

[16:27] <Geth> ¦ rakudo/main: and use that for handling "also"

[16:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/20bfeaf22e

[17:22] *** linkable6 left
[17:22] *** evalable6 left
[17:24] *** evalable6 joined
[17:24] *** linkable6 joined
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:40] <Geth> ¦ rakudo/main: 09b452bf8d | (Elizabeth Mattijsen)++ | 3 files

[18:40] <Geth> ¦ rakudo/main: RakuAST: Streamline traits just taking a type

[18:40] <Geth> ¦ rakudo/main: 

[18:40] <Geth> ¦ rakudo/main: In all of these cases, the name of the trait was the only thing

[18:40] <Geth> ¦ rakudo/main: different.  So create a RakuAST::Trait::Type class as a base class

[18:40] <Geth> ¦ rakudo/main: for the other RakuAST::Trait::xxx classes that only take a type

[18:40] <Geth> ¦ rakudo/main: as a positional.  Adapt deparsing and rakufication accordingly.

[18:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/09b452bf8d

[20:46] <Geth> ¦ rakudo/main: 1cf0b06d52 | (Elizabeth Mattijsen)++ | 2 files

[20:46] <Geth> ¦ rakudo/main: RakuAST: add support for ::Doc::Markup highlighting

[20:46] <Geth> ¦ rakudo/main: 

[20:46] <Geth> ¦ rakudo/main: And streamline use of it and some other tweaks

[20:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1cf0b06d52

[21:21] *** linkable6 left
[21:21] *** evalable6 left
[21:21] *** linkable6 joined
[21:23] *** evalable6 joined
[22:00] *** ab5tract joined
[22:49] <Geth> ¦ rakudo/main: 4d5f6ff9e4 | (Nick Logan)++ | src/core.c/CompUnit/Repository/FileSystem.pm6

[22:49] <Geth> ¦ rakudo/main: Deprecate including an ambiguous .pm module file

[22:49] <Geth> ¦ rakudo/main: 

[22:49] <Geth> ¦ rakudo/main: We need to know when raku source files have changed for the purposes

[22:49] <Geth> ¦ rakudo/main: of precompilation. However, when a user includes a library path

[22:49] <Geth> ¦ rakudo/main: (i.e. -Ilib, -I/home/foo) that does not contain a META6.json file

[22:49] <Geth> ¦ rakudo/main: we might end up erroneously considering perl module files (which

[22:49] <Geth> ¦ rakudo/main: also use .pm) as raku files. While this is mostly harmless, it

[22:49] <Geth> ¦ rakudo/main: does waste some cpu and io. This adds a deprecation message when

[22:50] <Geth> ¦ rakudo/main: this ambiguous situation occurs so that in the future we might be

[22:50] <Geth> ¦ rakudo/main: able to remove support for the .pm extension altogether.

[22:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4d5f6ff9e4

[22:50] <Geth> ¦ rakudo/main: 657dada537 | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/CompUnit/Repository/FileSystem.pm6

[22:50] <Geth> ¦ rakudo/main: Merge pull request #5278 from rakudo/ugexe/deprecate-ambiguous-pm

[22:50] <Geth> ¦ rakudo/main: 

[22:50] <Geth> ¦ rakudo/main: Deprecate including an ambiguous .pm module file

[22:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/657dada537

[22:52] *** sena_kun left
[23:30] *** ab5tract left
[23:40] * [Coke] opens tickets for all the blin deps that trigger that warning...

[23:55] <ugexe> I'm not sure any will

[23:55] <ugexe> i guess modules included in t/ maybe

[23:55] <[Coke]> hit like 5 or 6

[23:55] <ugexe> but .pm files listed in META6.json are fine

[23:56] <ugexe> i suppose anything that has a test with `use lib "lib"` would also do it

[23:56] <ugexe> (that has .pm files in it)

[23:56] <[Coke]> if, svg:plot, uri, shell::command, http useragent

[23:57] <[Coke]> file::directory:tree

[23:57] <ugexe> http::useragent has .rakumod extension

[23:57] <ugexe> oh yep, a test module

[23:57] <ugexe> https://github.com/sergot/http-useragent/tree/master/t/lib

[23:58] <ugexe> File::Directory::Tree has a `use lib "lib"`

[23:59] <ugexe> in a test

