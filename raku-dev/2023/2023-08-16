[00:00] *** bloatable6 joined
[00:00] *** releasable6 joined
[00:00] *** quotable6 joined
[00:00] *** reportable6 joined
[00:00] *** reportable6 left
[00:00] *** linkable6 joined
[00:00] *** committable6 joined
[00:00] *** notable6 joined
[00:01] *** reportable6 joined
[01:18] *** explorer left
[03:45] *** statisfiable6 left
[03:45] *** reportable6 left
[03:45] *** committable6 left
[03:45] *** releasable6 left
[03:45] *** notable6 left
[03:45] *** quotable6 left
[03:45] *** squashable6 left
[03:45] *** nativecallable6 left
[03:45] *** tellable6 left
[03:45] *** sourceable6 left
[03:45] *** bisectable6 left
[03:45] *** shareable6 left
[03:45] *** coverable6 left
[03:45] *** unicodable6 left
[03:45] *** greppable6 left
[03:45] *** bloatable6 left
[03:45] *** linkable6 left
[03:45] *** benchable6 left
[03:45] *** evalable6 left
[03:45] *** nativecallable6 joined
[03:46] *** statisfiable6 joined
[03:46] *** evalable6 joined
[03:46] *** releasable6 joined
[03:46] *** benchable6 joined
[03:46] *** notable6 joined
[03:46] *** shareable6 joined
[03:46] *** squashable6 joined
[03:46] *** linkable6 joined
[03:46] *** sourceable6 joined
[03:47] *** unicodable6 joined
[03:47] *** bloatable6 joined
[03:47] *** greppable6 joined
[03:47] *** tellable6 joined
[03:47] *** coverable6 joined
[03:47] *** committable6 joined
[03:47] *** bisectable6 joined
[03:48] *** reportable6 joined
[03:48] *** quotable6 joined
[04:11] <Geth> ¦ rakudo: MasterDuke17 assigned to niner Issue Error with signed/unsigned natives when printing a buf64 that contains 2**64-1 https://github.com/rakudo/rakudo/issues/5348

[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:03] *** shareable6 left
[07:03] *** coverable6 left
[07:03] *** tellable6 left
[07:03] *** releasable6 left
[07:03] *** linkable6 left
[07:03] *** quotable6 left
[07:03] *** notable6 left
[07:03] *** unicodable6 left
[07:03] *** benchable6 left
[07:03] *** evalable6 left
[07:03] *** bloatable6 left
[07:03] *** squashable6 left
[07:03] *** reportable6 left
[07:03] *** committable6 left
[07:03] *** statisfiable6 left
[07:03] *** nativecallable6 left
[07:03] *** greppable6 left
[07:03] *** sourceable6 left
[07:03] *** bisectable6 left
[07:03] *** coverable6 joined
[07:03] *** shareable6 joined
[07:03] *** tellable6 joined
[07:03] *** linkable6 joined
[07:03] *** notable6 joined
[07:04] *** nativecallable6 joined
[07:04] *** unicodable6 joined
[07:04] *** evalable6 joined
[07:05] *** reportable6 joined
[07:05] *** squashable6 joined
[07:05] *** quotable6 joined
[07:05] *** committable6 joined
[07:05] *** statisfiable6 joined
[07:05] *** releasable6 joined
[07:06] *** benchable6 joined
[07:06] *** bloatable6 joined
[07:06] *** greppable6 joined
[07:06] *** sourceable6 joined
[07:06] *** bisectable6 joined
[07:42] *** sena_kun joined
[08:01] *** nebuchadnezzar joined
[08:10] <lizmat> m: use nqp; my uint @a = -1; my int $b = nqp::atpos_u(@a,0); say $b   # this is fine

[08:10] <camelia> rakudo-moar 512f5cc46: OUTPUT: «-1␤»

[08:10] <lizmat> m: use nqp; my uint @a = -1; my int $b = nqp::if(1,nqp::atpos_u(@a,0)); say $b   # this is not :-(

[08:10] <camelia> rakudo-moar 512f5cc46: OUTPUT: «Cannot unbox 64 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[08:28] <Geth> ¦ rakudo/main: 4347320283 | (Elizabeth Mattijsen)++ | src/core.c/Buf.pm6

[08:28] <Geth> ¦ rakudo/main: Fix issue with uint64 Bufs and -1

[08:28] <Geth> ¦ rakudo/main: 

[08:28] <Geth> ¦ rakudo/main: Apparently there's some kind of coercion going on when there's not

[08:28] <Geth> ¦ rakudo/main: a direct assignment from a uint to an int.  This coercion is throwing

[08:28] <Geth> ¦ rakudo/main: the error.

[08:28] <Geth> ¦ rakudo/main: 

[08:28] <Geth> ¦ rakudo/main: Fix this by making it direct assignments: for the represention in a

[08:28] <Geth> ¦ rakudo/main: gist, it doesn't matter whether the value was originally signed or

[08:28] <Geth> ¦ rakudo/main: unsigned.

[08:28] <Geth> ¦ rakudo/main: 

[08:28] <Geth> ¦ rakudo/main: Fixes #5348

[08:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4347320283

[08:44] <Geth> ¦ roast: 0529a785e9 | (Elizabeth Mattijsen)++ | S03-operators/buf.t

[08:44] <Geth> ¦ roast: Add test for #5348

[08:44] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/0529a785e9

[10:57] *** SmokeMachine_ joined
[11:05] *** SmokeMachine left
[11:05] *** SmokeMachine_ is now known as SmokeMachine

[11:41] <Geth> ¦ rakudo/main: c4b68d7f10 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6

[11:41] <Geth> ¦ rakudo/main: Allow "sorrows" to be specified as "sorries"

[11:41] <Geth> ¦ rakudo/main: 

[11:41] <Geth> ¦ rakudo/main: Apparently, in RakuAST the term "sorries" is used rather than

[11:41] <Geth> ¦ rakudo/main: "sorrows".  This makes interfacing easier.

[11:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c4b68d7f10

[11:41] <Geth> ¦ rakudo/main: 2caaf9f4d7 | (Elizabeth Mattijsen)++ | src/Raku/ast/resolver.rakumod

[11:41] <Geth> ¦ rakudo/main: RakuAST: some more resolver streamlining

[11:41] <Geth> ¦ rakudo/main: 

[11:41] <Geth> ¦ rakudo/main: - less need to unwrap lists, use HLL methods such as .elems, .AT-POS, .Bool

[11:41] <Geth> ¦ rakudo/main: - don't use return if it isn't needed

[11:41] <Geth> ¦ rakudo/main: - some internal docs additions

[11:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2caaf9f4d7

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:20] *** jgaz left
[12:21] *** jgaz joined
[12:27] <Geth> ¦ rakudo/main: f604c78834 | (Elizabeth Mattijsen)++ | 2 files

[12:27] <Geth> ¦ rakudo/main: RakuAST: some streamlining

[12:27] <Geth> ¦ rakudo/main: 

[12:27] <Geth> ¦ rakudo/main: - kebab-case comp_unit tokens / methods

[12:27] <Geth> ¦ rakudo/main: - reduce number of dynamic var lookups

[12:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f604c78834

[13:40] <MasterDuke> m: my $bufb = buf64.new(3, 1, 18446744073709551615); $bufb[2] = $bufb[2] + 1;

[13:40] <camelia> rakudo-moar f604c7883: OUTPUT: «Cannot unbox 65 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[13:41] <MasterDuke> m: my uint64 $bufb = 18446744073709551615; $bufb++; say $bufb

[13:41] <camelia> rakudo-moar f604c7883: OUTPUT: «0␤»

[13:41] <MasterDuke> m: my uint64 $bufb = 18446744073709551615; $bufb = $bufb + 1; say $bufb

[13:41] <camelia> rakudo-moar f604c7883: OUTPUT: «Cannot unbox 65 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[13:42] <MasterDuke> m: my uint64 $bufb = 18446744073709551615; $bufb += 1; say $bufb

[13:42] <camelia> rakudo-moar f604c7883: OUTPUT: «Cannot unbox 65 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[13:44] <MasterDuke> should ^^^ all fail? all succeed? or is current behavior correct?

[13:48] <lizmat> I think the current behaviour is correct

[13:49] <lizmat> hmmm

[13:50] <lizmat> the problem with $bufb = $bufb + 1

[13:51] <lizmat> is that "$bufb + 1" gets HLLized to an Int\

[13:51] <lizmat> m: my uint $a = 18446744073709551616

[13:51] <camelia> rakudo-moar f604c7883: OUTPUT: «Cannot unbox 65 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[13:52] <lizmat> that's basically the error

[13:52] <lizmat> m: my int $a = 18446744073709551616

[13:52] <camelia> rakudo-moar f604c7883: OUTPUT: «Cannot unbox 65 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[13:53] *** linkable6 left
[13:55] *** linkable6 joined
[14:00] <MasterDuke> m: srand 0; my int64 $bufb = 2**63-1; $bufb += (4..10).pick; say $bufb

[14:00] <camelia> rakudo-moar f604c7883: OUTPUT: «Cannot unbox 64 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[14:01] <MasterDuke> m: srand 0; my int64 $bufb = 2**63-1; $bufb++ for ^(($bufb + (4..10).pick) - $bufb); say $bufb

[14:01] <camelia> rakudo-moar f604c7883: OUTPUT: «-9223372036854775802␤»

[14:01] <MasterDuke> same behavior for uint64s if you use 2**64-1 instead of 2**63-1

[14:02] <MasterDuke> dunno. seems like people might want to wrap without having to do it via incrementing

[14:04] <MasterDuke> m: srand 0; my int64 $bufb = 2**63-1; my int64 $add = (4..10).pick; $bufb += $add; say $bufb

[14:04] <camelia> rakudo-moar f604c7883: OUTPUT: «-9223372036854775802␤»

[14:04] <MasterDuke> you have to know to create the intermediate values explicitly typed as natives

[14:09] <lizmat> it's a waterbed alright :-)

[15:28] *** linkable6 left
[15:28] *** evalable6 left
[15:28] *** linkable6 joined
[15:28] *** evalable6 joined
[15:44] <Geth> ¦ rakudo/main: 703363eb18 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[15:44] <Geth> ¦ rakudo/main: RakuAST: refactor / streamlin Actions prologue

[15:44] <Geth> ¦ rakudo/main: 

[15:44] <Geth> ¦ rakudo/main: - give subs / variables more meaningful names

[15:44] <Geth> ¦ rakudo/main: - add documentation

[15:44] <Geth> ¦ rakudo/main: - move logic of RakuAST class lookup to "Nodify" sub

[15:44] <Geth> ¦ rakudo/main: - change all self.r method lookups to just call Nodify

[15:44] <Geth> ¦ rakudo/main: - make the "r" method a common method, proxy for Nodify

[15:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/703363eb18

[15:45] <lizmat> unexpectedly: 937 (+6)

[16:13] <[Coke]> any pointers on how to get all the pod nodes inside a document? I am trying do $file.IO.slurp.AST.visit-children({$_.^name.say}) and only getting a Doc::Block

[16:14] <lizmat> [Coke]: gist ?

[16:15] <[Coke]> oh, you still need to manually recurse. ah

[16:17] <[Coke]> how to get the children without visit-children? that needs a callable

[16:18] <lizmat> with visit-children you do

[16:18] <lizmat> fwiw, .map and .grep work on RakuAST nodes

[16:18] <lizmat> so you should technically be able to do:

[16:19] <[Coke]> recursively or only current children?

[16:19] <lizmat> for $ast { ... }

[16:19] <lizmat> recursively

[16:20] <[Coke]> is there a way to get the info NOT recursively?

[16:21] <[Coke]> for $ast {} doesn't recurse

[16:21] <lizmat> yeah, I just saw that, I wonder why

[16:22] <lizmat> it should  :-(

[16:22] *** NemokoschKiwi joined
[16:23] <[Coke]> ok. guess I will avoid this project for a bit then

[16:23] <lizmat> ah, I misread your question

[16:24] <[Coke]> :(

[16:24] <lizmat> m: .say for Q|=foo blah|.AST.rakudoc   # [Coke] 

[16:24] <camelia> rakudo-moar 703363eb1: OUTPUT: «RakuAST::Doc::Block.new(␤  type        => "foo",␤  abbreviated => True,␤  paragraphs  => (␤    "blah",␤  )␤)␤»

[16:25] <lizmat> the .rakudoc will give you all of the RakuAST::Doc objects

[16:27] <[Coke]> ah, wish I had that 30m ago, thank you

[16:30] <lizmat> sorry...

[16:30] <lizmat> I think I documented that though?

[16:31] <[Coke]> we have your blog posts and type docs, not a howto.

[16:32] <[Coke]> so, probably you did, yes!

[16:32] <lizmat> there's also lib/Rakudoc/To/Text.rakumod in the distribution

[16:33] <lizmat> if you want to see some actual usage

[16:33] *** ab5tract joined
[16:34] <[Coke]> afk

[16:58] <[Tux]> Rakudo v2023.06-227-gf604c7883 (v6.d) on MoarVM 2023.06-4-g75fe055c2

[16:58] <[Tux]> csv-test-xs-20      0.398 -  0.401

[16:58] <[Tux]> csv-ip5xs           0.785 -  0.892

[16:58] <[Tux]> test-t --race       0.831 -  1.053

[16:58] <[Tux]> test-t              1.405 -  1.828

[16:58] <[Tux]> csv-parser          3.986 -  4.856

[16:58] <[Tux]> csv-ip5xs-20        5.165 -  5.729

[16:58] <[Tux]> test-t-20 --race    6.268 -  6.562

[16:58] <[Tux]> test                6.463 -  7.070

[16:58] <[Tux]> test-t-20          21.110 - 21.451

[17:15] <Geth> ¦ rakudo/main: 86557c946a | (Elizabeth Mattijsen)++ | 2 files

[17:15] <Geth> ¦ rakudo/main: RakuAST: more Actions streamlining

[17:15] <Geth> ¦ rakudo/main: 

[17:15] <Geth> ¦ rakudo/main: - more comments

[17:15] <Geth> ¦ rakudo/main: - extract next-id logic to a sub, rather than a class method

[17:15] <Geth> ¦ rakudo/main: - rename comp-unit-stage0 to more descriptive comp-unit-prologue

[17:15] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/86557c946a

[17:25] *** ab5tract left
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:33] *** ab5tract joined
[19:02] *** finanalyst joined
[19:29] *** ab5tract left
[19:52] *** NemokoschKiwi left
[20:08] *** notna joined
[20:10] *** notna left
[21:07] *** finanalyst left
[22:33] *** linkable6 left
[22:33] *** evalable6 left
[22:33] *** coverable6 left
[22:33] *** committable6 left
[22:33] *** unicodable6 left
[22:33] *** benchable6 left
[22:33] *** greppable6 left
[22:33] *** statisfiable6 left
[22:33] *** quotable6 left
[22:33] *** squashable6 left
[22:33] *** reportable6 left
[22:33] *** releasable6 left
[22:33] *** tellable6 left
[22:33] *** notable6 left
[22:33] *** nativecallable6 left
[22:33] *** greppable6 joined
[22:34] *** notable6 joined
[22:34] *** committable6 joined
[22:34] *** tellable6 joined
[22:34] *** coverable6 joined
[22:34] *** unicodable6 joined
[22:34] *** squashable6 joined
[22:35] *** linkable6 joined
[22:35] *** quotable6 joined
[22:35] *** releasable6 joined
[22:35] *** benchable6 joined
[22:35] *** statisfiable6 joined
[22:35] *** evalable6 joined
[22:36] *** reportable6 joined
[22:36] *** nativecallable6 joined
[22:43] *** nebuchadnezzar left
[22:59] *** sena_kun left
[23:59] *** evalable6 left
[23:59] *** linkable6 left
