[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:37] *** statisfiable6 joined
[01:46] *** benchable6 joined
[01:46] *** releasable6 joined
[01:51] *** sourceable6 joined
[01:53] *** coverable6 joined
[01:53] *** committable6 joined
[03:04] *** linkable6 joined
[04:20] *** statisfiable6 left
[04:20] *** benchable6 left
[04:20] *** bloatable6 left
[04:20] *** squashable6 left
[04:20] *** bisectable6 left
[04:20] *** quotable6 left
[04:20] *** reportable6 left
[04:20] *** evalable6 left
[04:20] *** linkable6 left
[04:20] *** committable6 left
[04:20] *** coverable6 left
[04:20] *** sourceable6 left
[04:20] *** releasable6 left
[04:20] *** tellable6 left
[04:20] *** unicodable6 left
[04:20] *** nativecallable6 left
[04:20] *** greppable6 left
[04:20] *** notable6 left
[04:20] *** shareable6 left
[04:21] *** sourceable6 joined
[04:21] *** notable6 joined
[04:22] *** benchable6 joined
[04:22] *** statisfiable6 joined
[04:22] *** reportable6 joined
[04:22] *** shareable6 joined
[04:23] *** unicodable6 joined
[04:23] *** quotable6 joined
[05:02] *** quotable6 left
[05:02] *** unicodable6 left
[05:02] *** shareable6 left
[05:02] *** reportable6 left
[05:02] *** statisfiable6 left
[05:02] *** benchable6 left
[05:02] *** notable6 left
[05:02] *** sourceable6 left
[05:02] *** nine left
[05:02] *** ab5tract left
[05:02] *** summerisle left
[05:02] *** [Coke] left
[05:02] *** Geth left
[05:02] *** bartolin left
[05:02] *** ugexe left
[05:02] *** vrurg left
[05:02] *** sivoais left
[05:02] *** lizmat left
[05:02] *** dogbert17 left
[05:02] *** samcv left
[05:02] *** rypervenche left
[05:02] *** [Tux] left
[05:03] *** MasterDuke joined
[05:03] *** camelia joined
[05:03] *** sjn joined
[05:03] *** guifa joined
[05:03] *** RakuIRCLogger joined
[05:03] *** gfldex joined
[05:03] *** SmokeMachine joined
[05:03] *** patrickb joined
[05:03] *** jdv joined
[05:03] *** coleman joined
[05:03] *** kawaii joined
[05:03] *** nebuchad` joined
[05:03] *** timo joined
[05:03] *** discord-raku-bot joined
[05:03] *** djinni` joined
[05:03] *** japhb joined
[05:03] *** JRaspass joined
[05:03] *** zostay joined
[05:03] *** leont joined
[05:03] *** rba joined
[05:03] *** tbrowder__ joined
[05:03] *** |Tux| joined
[05:04] *** RakuIRCLogger left
[05:24] *** bloatable6 joined
[05:26] *** squashable6 joined
[05:27] *** bisectable6 joined
[05:27] *** greppable6 joined
[05:28] *** releasable6 joined
[05:28] *** coverable6 joined
[05:28] *** linkable6 joined
[05:29] *** committable6 joined
[06:00] *** reportable6 left
[07:47] *** nativecallable6 joined
[08:07] *** tellable6 joined
[09:08] <Geth> ¦ rakudo/main: f4c228dcf3 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[09:08] <Geth> ¦ rakudo/main: RakuAST: DRY the codegen of simple variables

[09:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f4c228dcf3

[09:11] *** Geth left
[09:11] *** Geth joined
[09:54] *** reportable6 joined
[10:05] <[Tux]> Rakudo v2023.08-200-gf4c228dcf (v6.d) on MoarVM 2023.08-3-g2f8234c22

[10:05] <[Tux]> csv-test-xs-20      0.345 -  0.347

[10:05] <[Tux]> test-t --race       0.899 -  1.087

[10:05] <[Tux]> csv-ip5xs           1.003 -  1.103

[10:05] <[Tux]> test-t              1.506 -  1.645

[10:05] <[Tux]> csv-parser          4.004 -  4.478

[10:05] <[Tux]> csv-ip5xs-20        5.326 -  5.999

[10:05] <[Tux]> test-t-20 --race    6.415 -  7.314

[10:05] <[Tux]> test                6.379 -  7.725

[10:05] <[Tux]> test-t-20          21.044 - 21.547

[10:10] <Geth> ¦ rakudo/main: f67797dbe2 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[10:10] <Geth> ¦ rakudo/main: RakuAST: only join if necessary

[10:10] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f67797dbe2

[10:12] *** finanalyst joined
[10:14] <finanalyst> .tell @coleman the docs-website buildkite agent is delaying a branch build. Not sure why

[10:14] <tellable6> finanalyst, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Tellable

[10:15] <finanalyst> .tell coleman: the docs-website buildkite agent is delaying a branch build. Not sure why

[10:15] <tellable6> finanalyst, I'll pass your message to coleman

[10:24] <Geth> ¦ rakudo/main: eb8fea816f | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[10:24] <Geth> ¦ rakudo/main: RakuAST: streamline special-variable tokens

[10:24] <Geth> ¦ rakudo/main: 

[10:24] <Geth> ¦ rakudo/main: This is mostly about not needing to capture <sym> for the error

[10:24] <Geth> ¦ rakudo/main: message.

[10:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eb8fea816f

[10:32] *** finanalyst left
[10:39] *** evalable6 joined
[10:43] <Geth> ¦ rakudo/main: 9d711ea512 | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[10:43] <Geth> ¦ rakudo/main: RakuAST: remove some more unneeded captures

[10:43] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9d711ea512

[10:59] <Geth> ¦ rakudo/main: 863373a6c1 | (Elizabeth Mattijsen)++ | 2 files

[10:59] <Geth> ¦ rakudo/main: RakuAST: give .intern-int a default radix of 10

[10:59] <Geth> ¦ rakudo/main: 

[10:59] <Geth> ¦ rakudo/main: For better readability, and smaller bytecode at the caller's side

[10:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/863373a6c1

[12:00] *** reportable6 left
[12:02] *** finanalyst joined
[12:16] <Geth> ¦ rakudo/main: 3a91b4956e | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[12:16] <Geth> ¦ rakudo/main: RakuAST: streamline parameter / arglist actions

[12:16] <Geth> ¦ rakudo/main: 

[12:16] <Geth> ¦ rakudo/main: - prevent repeated hash lookups where possible

[12:16] <Geth> ¦ rakudo/main: - prevent duplicate condition evaluation

[12:16] <Geth> ¦ rakudo/main: - class lookup once if needed multiple times

[12:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a91b4956e

[12:31] *** finanalyst_ joined
[12:32] *** finanalyst_ left
[12:59] *** finanalyst left
[13:10] *** lizmat_ joined
[13:13] *** lizmat left
[13:20] *** lizmat_ left
[13:20] *** lizmat joined
[14:44] *** jgaz joined
[14:59] <coleman> Looking into it

[14:59] <tellable6> 2023-09-12T10:15:02Z #raku-dev <finanalyst> coleman: the docs-website buildkite agent is delaying a branch build. Not sure why

[15:44] *** evalable6 left
[15:44] *** linkable6 left
[15:44] <ab5tract> lizmat: WRT the remaining once block issue..

[15:46] *** evalable6 joined
[15:46] <ab5tract> I've determined that the var declaration is getting generated on the wrong scope.. there is a QAST::Block definition in between the declaration and the check on p6stateassign, meaning that this op is never true because there is no statevar in the current block

[15:46] <lizmat> hmmm

[15:47] <ab5tract> or at least, that's my working assumption at the moment

[15:49] <ab5tract> *p6stateinit

[15:49] <ab5tract> the mystery also deepens:

[15:49] <ab5tract> m: 'my int $i; $i += ($ = 21) for 1,2; say $i'

[15:49] <camelia> rakudo-moar 3a91b4956: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "my int $i; $i += ($ = 21) for 1,2; say $i" in sink context (line 1)␤»

[15:50] <ab5tract> m: Q| my int $i; $i += ($ = 21) for 1,2; say $i | .AST.EVAL

[15:50] <camelia> rakudo-moar 3a91b4956: OUTPUT: «42␤»

[15:50] <ab5tract> m: 'my int $i; $i += (state $s = 21) for 1,2; say $i'

[15:50] <camelia> rakudo-moar 3a91b4956: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "my int $i; $i += (state $s = 21) for 1,2; say $i" in sink context (line 1)␤»

[15:51] <ab5tract> doh!

[15:51] <ab5tract> m: my int $i; $i += ($ = 21) for 1,2; say $i

[15:51] <camelia> rakudo-moar 3a91b4956: OUTPUT: «42␤»

[15:51] <ab5tract> m: Q| my int $i; $i += ($ = 21) for 1,2; say $i | .AST.EVAL

[15:51] <camelia> rakudo-moar 3a91b4956: OUTPUT: «42␤»

[15:51] <ab5tract> m: my int $i; $i += (state $s = 21) for 1,2; say $i

[15:51] <camelia> rakudo-moar 3a91b4956: OUTPUT: «Use of uninitialized value of type Any in numeric context␤0␤  in block  at <tmp> line 1␤Use of uninitialized value of type Any in numeric context␤  in block  at <tmp> line 1␤»

[15:52] <ab5tract> m: Q| my int $i; $i += (state $s = 21) for 1,2; say $i | .AST.EVAL

[15:52] <camelia> rakudo-moar 3a91b4956: OUTPUT: «Use of uninitialized value of type Any in numeric context␤0␤  in block <unit> at /home/camelia/EVAL_0 line 1␤Use of uninitialized value of type Any in numeric context␤  in block <unit> at /home/camelia/EVAL_0 line 1␤»

[15:54] <ab5tract> this implies that p6stateassign isn't true when the state variable is defined directly on the Block named 'unit'

[15:54] <ab5tract> gar, *p6stateinit

[15:55] <lizmat> ack

[15:55] <ab5tract> but p6stateinit leads me into moar territory, IIUC

[16:13] <MasterDuke> m: Q| say |.AST.EVAL

[16:13] <camelia> rakudo-moar 3a91b4956: OUTPUT: «===SORRY!=== Error while compiling ␤Unsupported use of bare "say".  In Raku please use: .say if to call it␤as a method on $_, or use an explicit invocant or argument, or use &say␤to refer to the function as a noun.␤------>  say⏏ …»

[17:26] *** linkable6 joined
[17:52] <Geth> ¦ rakudo/main: 636c878946 | (Elizabeth Mattijsen)++ | src/Raku/Actions.nqp

[17:52] <Geth> ¦ rakudo/main: RakuAST: some massive streamlining

[17:52] <Geth> ¦ rakudo/main: 

[17:52] <Geth> ¦ rakudo/main: - more shortcuts

[17:52] <Geth> ¦ rakudo/main: - multiple self.attach: $/, …  combined into a single with conditional

[17:52] <Geth> ¦ rakudo/main:   arguments to reduce bytecode size

[17:52] <Geth> ¦ rakudo/main: - generally combining stuff into ternaries

[17:52] <Geth> ¦ rakudo/main: - using postfix if where it makes sense

[17:52] <Geth> ¦ rakudo/main: 

[17:52] <Geth> ¦ rakudo/main: Takes 1 second off spectest.  Less than I hoped  :-(

[17:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/636c878946

[17:56] *** ab5tract left
[18:00] <lizmat> still, about .5%

[18:01] *** reportable6 joined
[18:09] <MasterDuke> lizmat: any idea why some *Method Nodes take an ast and some just a name? e.g., here https://github.com/rakudo/rakudo/commit/636c878946#diff-e5a1b8635ab56823598e63e6b8b662ee2c8cb05ae2b5052bd3d0be1e15ba2aa0R1158-R1166

[18:10] <lizmat> if the name can only be \w+ basically, it is a string.  Otherwise it's a RakuAST::Name object

[18:12] <MasterDuke> ah

[18:12] <lizmat> must admit this is potentially something that may need to be made consistent

[18:13] <lizmat> or at least rename RakuAST::Name to FQName or something

[18:14] <MasterDuke> yep

[18:15] <MasterDuke> `if $foo -> $bar { ... }` is (still) slower than `if $foo { my $bar = $foo; ... }`, right?

[18:16] <lizmat> well, yeah, but that appears to be because that will prevent the outer scope from being inlined

[18:16] <MasterDuke> and is that what inspired your comment over in #moarvm ?

[18:16] <lizmat> yes

[18:16] <MasterDuke> hm

[18:17] <lizmat> raku -MSIL -e 'sub a($a) { if $a -> $b { $b } }; a(42) for ^3000000'

[18:17] <MasterDuke> are you trying to remove all duplicated uses of `$<foo>`?

[18:18] <lizmat> vs:

[18:18] <lizmat> raku -MSIL -e sub a($a) { if my $b := $a { $b } }; a(42) for ^3000000

[18:18] <lizmat> yeah, as those are hash lookups, and they're relatively expensive, no?

[18:19] <MasterDuke> yeah, i was just looking at that most recent diff

[18:19] <MasterDuke> so https://github.com/rakudo/rakudo/commit/636c878946#diff-e5a1b8635ab56823598e63e6b8b662ee2c8cb05ae2b5052bd3d0be1e15ba2aa0R1903 could make sense to pull out of the `if`, right?

[18:20] <lizmat> right, except that that slows down

[18:20] <lizmat> m: sub a($a) { if $a -> $b { $b } }; a(42) for ^300000; say now - INIT now

[18:20] <camelia> rakudo-moar 636c87894: OUTPUT: «0.060584146␤»

[18:20] <lizmat> m: sub a($a) { if my $b := $a { $b } }; a(42) for ^3000000; say now - INIT now

[18:20] <camelia> rakudo-moar 636c87894: OUTPUT: «0.100177813␤»

[18:20] <lizmat> that's weird

[18:20] <MasterDuke> well, i meant just move the line above the if

[18:21] <lizmat> m: sub a($a) { if $a -> $b { $b } }; a(42) for ^300000; say now - INIT now

[18:21] <camelia> rakudo-moar 636c87894: OUTPUT: «0.061284621␤»

[18:21] <lizmat> m: sub a($a) { if my $b := $a { $b } }; a(42) for ^3000000; say now - INIT now

[18:21] <camelia> rakudo-moar 636c87894: OUTPUT: «0.097742603␤»

[18:21] <MasterDuke> i.e., `my $desigilname := $<desigilname>; if $desigilname {`

[18:21] <MasterDuke> the := version takes slightly under half the time of the -> version locally

[18:22] <lizmat> yeah, for me as well

[18:22] <lizmat> on an M1

[18:23] <MasterDuke> https://github.com/rakudo/rakudo/commit/636c878946#diff-e5a1b8635ab56823598e63e6b8b662ee2c8cb05ae2b5052bd3d0be1e15ba2aa0R1950 and https://github.com/rakudo/rakudo/commit/636c878946#diff-e5a1b8635ab56823598e63e6b8b662ee2c8cb05ae2b5052bd3d0be1e15ba2aa0R1989 are other places with `if $<foo> { my $foo = $<foo>`. but maybe polluting the outer scope

[18:23] <MasterDuke> isn't worth removing only one more $<foo>

[18:24] <MasterDuke> bunch more of those

[18:24] <lizmat> well.. I think the inline stopping is wrong, unless you can tell me otherwise  :-)

[18:25] <lizmat> why would sub a($a) { if $a -> $b { } } stop inlining of sub a ?

[18:26] <lizmat> dinner&

[18:28] <MasterDuke> m: my $a = 42; my $b = +(rand > 0.5); if $b -> $a { say $a }; say $a

[18:28] <camelia> rakudo-moar 636c87894: OUTPUT: «1␤42␤»

[18:29] <MasterDuke> not sure

[18:51] *** notna joined
[19:01] *** notna left
[20:20] <discord-raku-bot> <nemokosch> are declarations meant to work with statement modifiers?

[20:21] <discord-raku-bot> <nemokosch> or maybe the more useful question would be: which declarations are meant to work with statement modifiers?

[20:56] <MasterDuke> lizmat: what do you mean by your commit message for https://github.com/rakudo/rakudo/commit/c1f7e4d4883183bd30ac2de07d390cfa7d794ffb ?

[20:58] <MasterDuke> when you say this stuff shouldn't be copied over to the raku grammar, is that because you think it doesn't belong in the *grammar* (and should be implemented elsewhere)? or should just be removed completely?

[20:59] <vrurg> m: say

[20:59] <camelia> rakudo-moar 636c87894: OUTPUT: «===SORRY!===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> say⏏<EOL>␤Other potential difficulties:␤    Unsupported use of bare "say".  In Raku please use: .say if you meant␤    to call it as a method on $_, or u…»

[20:59] <vrurg> m: put

[20:59] <camelia> rakudo-moar 636c87894: OUTPUT: «===SORRY!===␤Argument to "put" seems to be malformed␤at <tmp>:1␤------> put⏏<EOL>␤Other potential difficulties:␤    Function "put" may not be called without arguments (please use () or whitespace to denote arguments, or &put t…»

[20:59] <vrurg> m: note

[20:59] <camelia> rakudo-moar 636c87894: OUTPUT: «Noted␤»

[21:00] <vrurg> I'd be for removing it altogether. It's like warning about a user/imported routine invoked without arguments. Besides, it's inconsistent.

[21:01] <vrurg> I guess it was introduced back in days when migration from Perl was expected. For now it just makes little to no sense.

[21:02] <MasterDuke> that'll have to be 6.e change

[21:04] <vrurg> Sure.

[21:06] <MasterDuke> but that does mean we have to implement it for rakuast first

[21:09] <discord-raku-bot> <nemokosch> I don't know. It seems kinda weird to consider these obsolete errors a part of the language, rather than just additional courtesy from a parser

[21:09] <vrurg> Waste of resources... :(

[21:10] <discord-raku-bot> <nemokosch> just think about it. Say, the migration from 5 to 6 had happened, in an alternate reality. How long would these notifiers have lasted?

[21:11] <discord-raku-bot> <nemokosch> Arguably, shorter than the code written for the new version

[22:13] *** committable6 left
[22:13] *** bloatable6 left
[22:13] *** greppable6 left
[22:13] *** coverable6 left
[22:13] *** squashable6 left
[22:13] *** bisectable6 left
[22:13] *** releasable6 left
[22:13] *** sourceable6 left
[22:13] *** unicodable6 left
[22:13] *** statisfiable6 left
[22:13] *** shareable6 left
[22:13] *** reportable6 left
[22:13] *** coverable6 joined
[22:13] *** squashable6 joined
[22:13] *** sourceable6 joined
[22:13] *** shareable6 joined
[22:13] <lizmat> MasterDuke: I think you got your answer, right ?

[22:14] *** greppable6 joined
[22:14] *** bloatable6 joined
[22:14] *** unicodable6 joined
[22:14] *** bisectable6 joined
[22:15] *** releasable6 joined
[22:15] *** committable6 joined
[22:16] *** statisfiable6 joined
[22:16] *** reportable6 joined
[22:17] <MasterDuke> can we do language specific stuff in the grammar?

[22:18] <MasterDuke> *language version

[22:41] <lizmat> yes, e.g. to handle prefix //

[22:42] <lizmat> look for  nqp::getcomp('Raku').language_revision

[22:42] <lizmat> sleep&

[22:42] <MasterDuke> thanks

[23:16] *** linkable6 left
[23:16] *** evalable6 left
[23:16] *** linkable6 joined
[23:18] *** evalable6 joined
