[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:02] *** shareable6 left
[01:02] *** statisfiable6 left
[01:02] *** bloatable6 left
[01:02] *** squashable6 left
[01:02] *** greppable6 left
[01:02] *** tellable6 left
[01:02] *** reportable6 left
[01:02] *** linkable6 left
[01:02] *** coverable6 left
[01:02] *** committable6 left
[01:02] *** notable6 left
[01:02] *** nativecallable6 left
[01:02] *** benchable6 left
[01:02] *** releasable6 left
[01:02] *** bisectable6 left
[01:02] *** unicodable6 left
[01:02] *** quotable6 left
[01:02] *** sourceable6 left
[01:02] *** evalable6 left
[01:02] *** quotable6 joined
[01:02] *** greppable6 joined
[01:02] *** reportable6 joined
[01:02] *** statisfiable6 joined
[01:02] *** benchable6 joined
[01:03] *** evalable6 joined
[01:03] *** linkable6 joined
[01:03] *** coverable6 joined
[01:03] *** bisectable6 joined
[01:03] *** squashable6 joined
[01:04] *** notable6 joined
[01:04] *** unicodable6 joined
[01:04] *** committable6 joined
[01:04] *** bloatable6 joined
[01:04] *** sourceable6 joined
[01:04] *** releasable6 joined
[01:05] *** nativecallable6 joined
[01:05] *** tellable6 joined
[01:05] *** shareable6 joined
[02:05] *** linkable6 left
[02:05] *** squashable6 left
[02:05] *** notable6 left
[02:05] *** benchable6 left
[02:05] *** bloatable6 left
[02:05] *** nativecallable6 left
[02:05] *** unicodable6 left
[02:05] *** greppable6 left
[02:05] *** reportable6 left
[02:05] *** evalable6 left
[02:05] *** statisfiable6 left
[02:05] *** tellable6 left
[02:05] *** releasable6 left
[02:05] *** coverable6 left
[02:05] *** committable6 left
[02:05] *** sourceable6 left
[02:05] *** shareable6 left
[02:05] *** quotable6 left
[02:05] *** coverable6 joined
[02:05] *** quotable6 joined
[02:06] *** linkable6 joined
[02:06] *** shareable6 joined
[02:06] *** sourceable6 joined
[02:06] *** committable6 joined
[02:06] *** benchable6 joined
[02:06] *** evalable6 joined
[02:06] *** squashable6 joined
[02:06] *** nativecallable6 joined
[02:06] *** tellable6 joined
[02:06] *** releasable6 joined
[02:07] *** bloatable6 joined
[02:07] *** unicodable6 joined
[02:07] *** reportable6 joined
[02:07] *** greppable6 joined
[02:07] *** notable6 joined
[02:08] *** statisfiable6 joined
[04:03] *** linkable6 left
[04:03] *** evalable6 left
[04:04] *** evalable6 joined
[04:04] *** linkable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[08:58] *** sena_kun joined
[09:51] <[Tux]> Rakudo v2022.12-1-gd52342eb0 (v6.d) on MoarVM 2022.12-29-g256ecc8cd

[09:51] <[Tux]> csv-test-xs-20      0.410 -  0.549

[09:51] <[Tux]> test-t --race       0.810 -  0.835

[09:51] <[Tux]> csv-ip5xs           0.800 -  0.961

[09:51] <[Tux]> test-t              1.402 -  1.403

[09:51] <[Tux]> csv-parser          3.412 -  3.491

[09:51] <[Tux]> csv-ip5xs-20        5.102 -  5.142

[09:51] <[Tux]> test                6.503 -  7.395

[09:51] <[Tux]> test-t-20 --race    7.398 -  7.622

[09:51] <[Tux]> test-t-20          20.262 - 21.586

[10:11] *** ab5tract joined
[10:14] <ab5tract> frustratingly, I can't reproduce it via something like 'my $begin := BEGIN (|<A B>, 'C')'

[10:16] <lizmat> ok, I figured out what creates the BUILDPLAN: it's ClassHOW.compose and EnumHOW.compose that call .create_BUILDPLAN

[10:17] <lizmat> so I guess the question becomes:

[10:18] <lizmat> 1. do we consider the creation of the BUILDALL method as part of the Raku language parsing

[10:18] <lizmat> 2. or do we consider it part of composing a class in the metamodel ?

[10:19] <nine> I'm leaning towards the latter since then we can have it for classes created through the MOP as well

[10:19] <lizmat> in case of 1. we can build the code of the BUILDALL method in RakuAST

[10:19] <lizmat> in case of 2. then it should be done in QAST

[10:19] <nine> Why should it be done in QAST?

[10:19] <lizmat> and we should rip that code from World into some place

[10:20] <lizmat> because the metamodel gets QAST for the BUILD and TWEAK methods

[10:21] <nine> Gets QAST from whom?

[10:21] <ab5tract> nine, lizmat: you are indeed excellent rubber ducks! my issue was that I needed to match against the List from the setting

[10:22] <lizmat> sorry, indeed, not QAST, but a Method object, something you can feed an 'nqp::callmethod" op, but which you cannot deparse

[10:24] <nine> So, perfectly doable

[10:25] <lizmat> perhaps, but I'm not seeing it

[10:29] <nine> Nothing prevents you from creating an AST, compiling it and getting at the meta object of that method. That's apparently exactly what the meta model needs.

[10:31] <nine> The only more interesting thing the CompilerServices have to do is, if this thing happens as part of an ongoing compilation, the resulting QAST needs to be added to that comp unit, so the generated method will be available when the comp unit gets loaded.

[10:32] *** frost joined
[10:40] <lizmat> I still don't see how that could work with the TWEAK and BUILD methods, without changing the semantics of the BUILDPLAN

[10:40] <nine> What's the problem there?

[10:42] <lizmat> the BUILDPLAN contains a Method object, not a RakuAST::Method object

[10:45] <nine> Yes, a Method object. Which is exactly what $your-rakuast-method.meta-object returns

[10:53] <lizmat> indeed, but how do you get back to the RakuAST::Method object from there ?

[10:54] <nine> Why would you have to?

[10:54] <lizmat> because you'd want to be able to deparse ?

[10:55] <nine> Where? What for?

[10:56] <lizmat> $file.IO.slurp.AST.DEPARSE

[10:56] <nine> What does that have to do with BUILDALL?

[10:59] <lizmat> hmmmmm

[11:01] <lizmat> ok, suppose we build the BUILDALL and accessor methods using RakuAST and attach it to tree

[11:01] <lizmat> then a deparse would not know the difference between what is generated and what is actual code

[11:01] <lizmat> that was written by the author

[11:01] <nine> Then add a flag marking it as auto-generated

[11:02] <lizmat> hmmmm

[11:02] <lizmat> lemme mull on that

[11:10] <ab5tract> okay, so I've gotten pretty far rubber ducking but I think I need a pointer on how to convert a settings-level list into something iterable in NQP

[11:11] <nine> .FLATTENABLE_LIST

[11:11] <ab5tract> thanks!

[11:19] <Geth> ¦ rakudo/main: 5 commits pushed by (Stefan Seifert)++

[11:19] <Geth> ¦ rakudo/main: f2b2015a9d | RakuAST: support initializers for attributes

[11:19] <Geth> ¦ rakudo/main: bb75b6286e | RakuAST: fix duplicate lexical $_ on method foo($_)

[11:19] <Geth> ¦ rakudo/main: 1f31a41bda | RakuAST: support nameless lexical declarations (i.e. blocks)

[11:19] <Geth> ¦ rakudo/main: d1ce57add6 | RakuAST: support non-constant initializers for attributes

[11:19] <Geth> ¦ rakudo/main: fd75bb0fe7 | RakuAST: fix BEGIN time evaluation unconditionally calling code objects

[11:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/268da12b3926...fd75bb0fe7ce

[11:19] <nine> 694 spectest files passing!

[11:25] <ab5tract> nice one!

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:04] <ab5tract> another kind of weird corner of enum:

[12:04] <ab5tract> m: class W::Foo {}; enum W<Foo>; dd W::Foo.new; dd +W::Foo

[12:04] <camelia> rakudo-moar fd75bb0fe: OUTPUT: «W::Foo.new␤Use of uninitialized value of type W::Foo in numeric context␤  in block <unit> at <tmp> line 1␤0␤»

[12:05] <ab5tract> so it works but it also kind of doesn't work ("Use of uninitialized value")

[12:05] <ab5tract> In my branch I die with a redeclaration error message

[12:06] <nine> Arguably your's is more correct

[12:06] <ab5tract> I'd argue that, for sure :)

[12:07] <ab5tract> We can address it later if it comes up in the spectests

[12:09] <ab5tract> One thing I'm having trouble with right now is that in base, we look at the lexicals in the current lexpad and then bind a failure when there is a redeclaration by another enum.

[12:10] <ab5tract> m: enum F1<a b c>; enum F2<b c d>; dd b; dd +F2::b 

[12:10] <camelia> rakudo-moar fd75bb0fe: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol 'b and c'.␤    at <tmp>:1␤    ------> enum F1<a b c>; enum F2<b c d>⏏; dd b; dd +F2::b␤Failure.new(exception => X::PoisonedAlias.new(alias => "b", package-type => "enum", package-nam…»

[12:10] <ab5tract> m: enum F1<a b c>; enum F2<b c d>; dd +F2::b; dd b;  

[12:10] <camelia> rakudo-moar fd75bb0fe: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol 'b and c'.␤    at <tmp>:1␤    ------> enum F1<a b c>; enum F2<b c d>⏏; dd +F2::b; dd b;␤0␤Failure.new(exception => X::PoisonedAlias.new(alias => "b", package-type => "enum", packag…»

[12:12] <ab5tract> I'm not really a fan of this, but it is definitely tested in roast. I'm not clear on how to go about actually coding this up.

[12:13] <ab5tract> This is the only deviation from base that I am currently aware of, btw :D

[12:13] <ab5tract> *only other

[12:15] <nine> m: my $a = 1; my $a = 2;

[12:15] <camelia> rakudo-moar fd75bb0fe: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$a'.␤    at <tmp>:1␤    ------> my $a = 1; my $a⏏ = 2;␤»

[12:15] <nine> Seems to be a general mechanism that I will need

[12:15] <ab5tract> Is it good enough to leave this as a documented TODO item?

[12:16] <ab5tract> Or are you going to sink your teeth into it directly? :)

[12:17] <nine> I'm pretty busy right now

[12:18] <ab5tract> no worries, just trying to understand whether this deviation should be a blocker for submitting the PR for review

[12:20] <nine> Definitely not

[12:20] <nine> Everything that advances the state without regressions is eligible for merging

[12:21] <ab5tract> excellent :D

[12:40] * lizmat has 695 / 1356

[12:41] <lizmat> nine: perhaps your roast is outdated ?

[12:46] *** discord-raku-bot left
[12:46] *** discord-raku-bot joined
[12:52] <nine> Indeed, it was missing the new subset tests

[12:53] <lizmat> ok, *phew*  :-)

[12:54] <lizmat> nine: the BUILDPLAN is not the same yet for class A { has $.a = 42 }

[12:54] <lizmat>  1: nqp::getattr(obj,A,'$!a') = 42 if not set    # base

[12:54] <lizmat>  1: nqp::getattr(obj,A,'$!a') = execute-code() if not set   # RakuAST

[12:59] <nine> see commit message

[13:01] <lizmat> gotcha

[13:03] <lizmat> "whether an expression's result is known at compile time"  don't we have that in other situations already ?

[13:05] <nine> I didn't find anything on that

[13:08] <lizmat> hmm  is it intentional that it gets codegenned as a method ?

[13:08] <lizmat> (400, A, "\$!a", method (Mu: $_, *%_) 

[13:08] <nine> That's what the old frontend does

[13:09] <ab5tract> needs to be a method to access $!a, right?

[13:10] <lizmat> heh, indeed it does...  hmmm

[13:12] <nine> ab5tract: right

[13:14] <ab5tract> okay, so for some reason I'm only seeing 694 passing tests on current main, even with the updated roast... weird

[13:14] <ab5tract> but that also implies my branch fixes a whole 4 spectests :D

[13:46] *** evalable6 left
[13:47] *** evalable6 joined
[14:04] <ab5tract> what does the '::' in `enum :: <a b c>` actually indicate?

[14:05] <ab5tract> is that technically a psuedo-stash-y thing?

[14:07] <lizmat> to create an anonymous enum?

[14:07] <lizmat> similar to an anonymous class ?

[14:07] <ab5tract> yeah, just curious about it in terms of what it means as a name

[14:09] <ab5tract> I'm currently having a guard that says "don't install package if $!name is anonymous"

[14:09] <lizmat> m: enum :: <a b c>; say a, b c

[14:09] <camelia> rakudo-moar fd75bb0fe: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> enum :: <a b c>; say a, b⏏ c␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statem…»

[14:09] <lizmat> m: enum :: <a b c>; say a, b, c

[14:09] <camelia> rakudo-moar fd75bb0fe: OUTPUT: «abc␤»

[14:09] <lizmat> m: enum :: <a b c>; dd a, b, c

[14:09] <camelia> rakudo-moar fd75bb0fe: OUTPUT: «::a␤::b␤::c␤»

[14:09] <ab5tract> yup, also works as:

[14:09] <lizmat> m: enum :: <a b c>; say +a, +b, +c

[14:09] <camelia> rakudo-moar fd75bb0fe: OUTPUT: «012␤»

[14:09] <ab5tract> m: enum <a b c>; say +a, +b, +c

[14:09] <camelia> rakudo-moar fd75bb0fe: OUTPUT: «012␤»

[14:10] <ab5tract> I need a guard that catches both those cases

[14:10] <ab5tract> and $!name.canonicalize eq '::' feels icky

[14:11] <ab5tract> so I was wondering if the name class should get an 'is-anonymous' that hides the icky-ness or otherwise does a different check

[14:13] <lizmat> it would be nice if deparsing could know the difference between "enum <a b c>" and "enum :: <a b c>"   but only a little bit nice though

[14:17] <ab5tract> I think it will

[14:17] <ab5tract> Since in one case $!name is '' and the other it is '::"

[14:17] <ab5tract> but I'm nothing near a deparse expert :)

[14:37] <lizmat> heh  :-)

[14:39] <ab5tract> actually, I think not... <longname> already returns a RakuAST::Name.from-identifier('') for '::'

[14:47] *** linkable6 left
[14:47] *** evalable6 left
[14:47] *** linkable6 joined
[14:48] *** evalable6 joined
[14:56] <ab5tract> okay, *phew*, 695 in main for me now

[15:00] <lizmat> good!

[15:00] <lizmat> consistency is good  :-)

[15:00] <ab5tract> nothing worse than a flapping test!

[15:20] <nine> So just 5 more tests to 700...

[15:21] <lizmat> always 'nother milestone  :-)

[15:32] <ab5tract> my branch is at 698 :)

[15:33] <ab5tract> With two more passing as soon as roles and the 'const_iX NYI' at begin time are resolved

[15:35] <nine> That one I dread a bit...

[15:38] <ab5tract> ah, it's on your radar, eh?

[15:42] <nine> I haven't looked at it yet, but that const_iX NYI in general is the result of broken bytecode. The const ops are the ones with the lowest indexes, so when bytecode contains small integers or we wrongly jump into a memory region containing them, you'll see that message.

[15:43] <ab5tract> :(

[15:43] <ab5tract> yeah, that sounds tough

[15:43] <ab5tract> I wonder how many tests it might unlock though.

[15:46] <nine> Oh, it happens in the fallback resolver

[16:01] <ab5tract> nine, lizmat: My PR is ready for review

[16:04] <ab5tract> sorry! spoke to soon!

[16:05] <ab5tract> Let me get rid of the nonsense changes to literals.rakumod

[16:05] <ab5tract> I hate how Comma does that

[16:05] <nine> getlexstatic_o doesn't play well with the fallback resolver

[16:05] <lizmat> ab5tract: in Subset I removed the $!current-package entry in visit-children

[16:05] <ab5tract> Okay, will do that too

[16:05] <ab5tract> wasn't sure if it was something to keep documented or not

[16:05] <lizmat> because there is no need to visit something that is an implementation detail

[16:05] <nine> what?!

[16:06] <lizmat> well, maybe I was wrong, maybe nine should 

[16:06] <lizmat> I guess nine did  :-)

[16:06] <nine> Without visit-children there is no resolution, no BEGIN handling, no nothing

[16:06] <ab5tract> nine: but you can't visit $!current-package when that package is GLOBALish

[16:07] <ab5tract> I could put a check to that effect there

[16:07] <nine> Please, read RakuAST::Node::IMPL-CHECK before making any more assumptions about what it does

[16:08] <lizmat> nine: I did not remove "visit-children"

[16:08] <nine> ab5tract: Wait, is the current-package you talk about a RakuAST::Node or a Package? In the first case it has to be visited, in the latter it must not (and doing it anyway will explode)

[16:08] <lizmat> right, that was my point  :-)

[16:09] <lizmat> afaik it's a Package

[16:10] <ab5tract> nine: I thought GLOBALish was somewhat special here? Doesn't current-package return a RakuAST::Package?

[16:11] <ab5tract> nope, that's a dumbo on my part

[16:11] <ab5tract> its clearly there in the docs

[16:21] <nine> Ok, got a fix for getlexstatic_o. Now need to translate that to assembly

[16:25] <ab5tract> nine: :O

[16:46] <nine> A partly fix got pused to MoarVM

[16:47] <ab5tract> amazing

[16:47] <lizmat> nine: shall I bump MoarVM?

[16:48] <nine> I don't think that's necessary. The fix is only important for RakuAST

[16:48] <lizmat> yeah, and we wants it ?

[16:49] <lizmat> but guess, with an impending release, it's better to wait?

[16:49] <lizmat> hmmm...  but then it would be in the MoarVM release anyways

[16:52] * nine assumes all RakuAST developers are on MoarVM master anyway

[16:53] <lizmat> nine assumes incorrectly

[16:54] <nine> That's a bit of a surprise. If not us who would be?

[16:54] <lizmat> well, I'm always in a --gen-moar environment, on purpose

[16:54] <ab5tract> me too, but not so purposefully :)

[17:05] <ab5tract> okay, so I've triple checked my PR.

[17:07] <ab5tract> it's ready whenever the tuits are there

[17:07] <ab5tract> it was fun to implement this without nearly as many questions needing to be asked :)

[17:16] <lizmat> shouldn't this be a loop? $visitor($!term);

[17:17] <lizmat> OOC: why the:

[17:17] <lizmat> my $iter := nqp::iterator(%values);

[17:17] <lizmat>         while $iter {

[17:17] <lizmat> and not:

[17:18] <lizmat> for %values -> $pair

[17:18] <lizmat> ??

[17:25] <ab5tract> lizmat: There's only ever one term

[17:26] <ab5tract> lizmat: regarding %values -> $pair, I guess I thought I couldn't do that :)

[17:52] <ab5tract> %values -> $pair pushed

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:25] *** Geth left
[18:25] *** Geth joined
[21:58] <shmup> link to PR please

[22:00] *** frost left
[22:05] *** guifa joined
[22:08] *** guifa_ left
[22:32] *** sena_kun left
[23:42] <ab5tract> shmup: https://github.com/rakudo/rakudo/pull/5207

