[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[01:59] *** linkable6 left
[01:59] *** evalable6 left
[02:00] *** linkable6 joined
[02:01] *** evalable6 joined
[04:57] *** squashable6 left
[04:57] *** evalable6 left
[04:57] *** linkable6 left
[04:57] *** coverable6 left
[04:57] *** sourceable6 left
[04:57] *** statisfiable6 left
[04:57] *** bloatable6 left
[04:57] *** bisectable6 left
[04:57] *** committable6 left
[04:57] *** unicodable6 left
[04:57] *** nativecallable6 left
[04:57] *** statisfiable6 joined
[04:58] *** committable6 joined
[04:58] *** squashable6 joined
[04:58] *** linkable6 joined
[04:58] *** unicodable6 joined
[04:59] *** sourceable6 joined
[04:59] *** coverable6 joined
[04:59] *** evalable6 joined
[04:59] *** bisectable6 joined
[04:59] *** nativecallable6 joined
[05:00] *** bloatable6 joined
[05:05] *** rba left
[05:06] *** rba joined
[05:06] *** nine left
[05:06] *** nine joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:12] *** kurahaupo left
[06:17] *** kurahaupo joined
[06:23] *** discord-raku-bot left
[06:23] *** discord-raku-bot joined
[07:24] *** sena_kun joined
[08:02] <lizmat> So: are Captures supposed to be value types or not?

[08:03] <lizmat> m: dd \().WHICH.^name

[08:03] <camelia> rakudo-moar 7a3ab690a: OUTPUT: «"ValueObjAt"␤»

[08:03] <lizmat> currently they are

[08:04] <lizmat> yet there are spectests mutating values in a Capture

[08:04] <lizmat> m: my $c := \(my $); dd $c; $c[0]++; dd $c

[08:04] <camelia> rakudo-moar 7a3ab690a: OUTPUT: «\(Any)␤\(1)␤»

[08:05] <lizmat> so I think we either we must make Capture an object type again, or disallow mutation

[08:16] <discord-raku-bot> <nemokosch> I definitely have written code some time in the early days that does depend on Captures being value types

[08:17] <discord-raku-bot> <nemokosch> what does it imply if somebody mutates a value type? will the new value of it have the same identity or not?

[08:21] <Geth> ¦ rakudo/main: a2f71d800c | (Elizabeth Mattijsen)++ | src/core.c/Capture.pm6

[08:21] <Geth> ¦ rakudo/main: Fix copy-pasto in Capture.Bool

[08:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a2f71d800c

[08:22] <lizmat> the way it's implemented now, the .WHICH will mutate as well

[08:23] <discord-raku-bot> <nemokosch> that sounds like the better scenario

[08:24] <discord-raku-bot> <nemokosch> actually, what's so bad about allowing mutation of value types under these condition? it sounds just like how a record/data class would behave

[08:46] <lizmat> if a class is a value type, it is assumed to be immutable for optimising purposes

[08:47] <lizmat> so it may work now, but there is no guarantee it will work in the future

[08:48] <lizmat> https://github.com/Raku/problem-solving/issues/372

[10:21] *** MasterDuke left
[10:33] <Voldenet> mutating Captures makes no sense logically, but mutating underlying data makes sense

[10:35] <Voldenet> m: my $c := \(my $v); dd $c; $v++; dd $c

[10:35] <camelia> rakudo-moar a2f71d800: OUTPUT: «\(Any)␤\(1)␤»

[10:51] <Voldenet> m: sub inc (|c) { for c { $_++ } }; my $x; inc $x; dd $x # should this be allowed?

[10:51] <camelia> rakudo-moar a2f71d800: OUTPUT: «Int $x = 1␤»

[10:53] <lizmat> m: sub inc (|c) { for c { $_++ } }; my $x; inc :$x; dd $x

[10:53] <camelia> rakudo-moar a2f71d800: OUTPUT: «Any $x = Any␤»

[10:53] <lizmat> hmmm... I'd expect that to work as well, actually

[10:54] <Voldenet> for c doesn't iterate on pairs

[10:54] <Voldenet> m: sub inc (|c) { for c.pairs { $_.value++ } }; my $x; inc $x, :$x; dd $x

[10:54] <camelia> rakudo-moar a2f71d800: OUTPUT: «Int $x = 2␤»

[10:56] <Geth> ¦ roast: c8af04f496 | (Elizabeth Mattijsen)++ | S03-operators/value_equivalence.t

[10:56] <Geth> ¦ roast: Remove bogus tests for "reference types"

[10:56] <Geth> ¦ roast: 

[10:56] <Geth> ¦ roast: The tests in question, from *2008*, assumed that \ was syntax for

[10:56] <Geth> ¦ roast: taking a reference to something (like in Perl).  In Raku, the \

[10:56] <Geth> ¦ roast: syntax is used for creating Captures, which is a different beast

[10:56] <Geth> ¦ roast: altogether.

[10:57] <Geth> ¦ roast: 

[10:57] <Geth> ¦ roast: <…commit message has 10 more lines…>

[10:57] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/c8af04f496

[10:59] <Geth> ¦ rakudo/lizmat-Capture: 170802bfc7 | (Elizabeth Mattijsen)++ | src/core.c/Capture.pm6

[10:59] <Geth> ¦ rakudo/lizmat-Capture: Make Capture an object type

[10:59] <Geth> ¦ rakudo/lizmat-Capture: 

[10:59] <Geth> ¦ rakudo/lizmat-Capture: Rather than a value type, which it is **not** as it can have mutable

[10:59] <Geth> ¦ rakudo/lizmat-Capture: elements.  See https://github.com/Raku/problem-solving/issues/372

[10:59] <Geth> ¦ rakudo/lizmat-Capture: for more information.

[10:59] <Geth> ¦ rakudo/lizmat-Capture: 

[10:59] <Geth> ¦ rakudo/lizmat-Capture: This causes:

[10:59] <Geth> ¦ rakudo/lizmat-Capture: <…commit message has 5 more lines…>

[10:59] <Geth> ¦ rakudo/lizmat-Capture: review: https://github.com/rakudo/rakudo/commit/170802bfc7

[11:00] <Geth> ¦ rakudo: lizmat++ created pull request #5291: Make Capture an object type

[11:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5291

[12:00] *** reportable6 left
[12:00] <discord-raku-bot> <nemokosch> this is quite a considerable breaking change, for what it's worth

[12:01] *** reportable6 joined
[12:26] *** guifa_ left
[12:27] *** guifa joined
[12:41] *** sena_kun left
[12:41] *** sena_kun joined
[13:07] <lizmat> that's why it's in a PR

[13:49] *** jjatria left
[13:50] *** jjatria joined
[14:05] *** kurahaupo left
[14:09] *** kurahaupo joined
[14:41] <Geth> ¦ rakudo/main: ebe0e0b2c7 | (Elizabeth Mattijsen)++ | 4 files

[14:41] <Geth> ¦ rakudo/main: Introduce the Format class in 6.e

[14:41] <Geth> ¦ rakudo/main: 

[14:41] <Geth> ¦ rakudo/main: This subclass of Str embeds a Callable created by the Formatter class

[14:41] <Geth> ¦ rakudo/main: for the given format string.

[14:41] <Geth> ¦ rakudo/main: 

[14:41] <Geth> ¦ rakudo/main:     my $f = Format.new("%10s");

[14:41] <Geth> ¦ rakudo/main:     say "'$f("foo")'";  # '       foo'

[14:41] <Geth> ¦ rakudo/main: 

[14:41] <Geth> ¦ rakudo/main: As discussed with jnthn at the first RCS

[14:41] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ebe0e0b2c7

[14:58] <Geth> ¦ roast: 6ed4f3b331 | (Elizabeth Mattijsen)++ | 2 files

[14:58] <Geth> ¦ roast: Add basic tests for Format / Formatter::Syntax

[14:58] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/6ed4f3b331

[15:29] *** squashable6 left
[15:29] <[Coke]> Is format its own thing, or "exactly sprintf" or "sprintf when convenient" or...

[15:30] *** squashable6 joined
[15:49] <japhb> Oooh, that's an interesting performance feature.

[17:04] <jdv> recent blin is good so we're go for a release monday, so far

[17:04] <[Coke]> +1

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:19] *** samebchase5 joined
[18:21] *** samebchase left
[18:21] *** |Tux| left
[18:21] *** sivoais left
[18:21] *** samebchase5 is now known as samebchase

[18:22] *** sivoais joined
[18:22] *** |Tux| joined
[20:22] <lizmat> [Coke] japhb the intent is to have that serve sprintf in 6.e

[20:22] <lizmat> not sure yet how we're going to make that happen for .fmt yet

[20:23] <lizmat> I assume we could add a .fmt taking a Format object as a format

[20:23] <lizmat> and make it opt-in that way

[20:47] *** sena_kun left
[20:48] <japhb> Seems like a decent way to do that, especially since it can be done right now.

[20:57] <Geth> ¦ roast: bd49da7bc3 | (Elizabeth Mattijsen)++ | S32-str/format.t

[20:57] <Geth> ¦ roast: Add basic test for Format.AST|CODE

[20:57] <Geth> ¦ roast: 

[20:57] <Geth> ¦ roast: To at least check for the existence of these methods

[20:57] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/bd49da7bc3

[20:58] <lizmat> Formatter, duh  :-(

[21:00] <tonyo> is 6.e the release of ast?

[21:01] <lizmat> yes, 6.e would enable the final initial version of RakuAST and have RakuAST be the grammar used for parsing Raku code

[21:47] *** kurahaupo left
[21:49] *** kurahaupo joined
