[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:58] *** MasterDuke joined
[01:35] *** tbrowder__ left
[01:35] *** tbrowder__ joined
[01:38] *** kurahaupo joined
[03:07] <MasterDuke> well. i wonder if this is correct. patching DirRecurse.pull-one to use my new stat syscalls (i.e., only call stat once in the method, and use the saved object for subsequent calls), the time reported by `time raku -I . -e 'use Test'` in a directory with 113k files dropped from ~3.2s to ~0.19s

[03:10] <MasterDuke> i'm not sure i trust that

[03:24] <MasterDuke> huh. `Argument 0 to MoarVM syscall 'file-stat' had kind obj, but should be str` when i pass a `str`-typed variable instead of a literal

[03:31] <MasterDuke> hm. i realized the other syscalls have an expected kind of `0` when the arg is a str, but changing that and i still get the same error

[03:31] <MasterDuke> *expected repr

[03:32] <MasterDuke> oh, i need to call nqp::decont_s on the arg

[03:50] <MasterDuke> hm. so the file-stat sycall is being called for all the first-level entries in this directory, but nothing deeper...

[03:50] <MasterDuke> anyway, time for bed, will pick this up tomorrow

[04:38] *** ugexe left
[04:38] *** ugexe joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:08] *** kurahaupo left
[06:08] *** kurahaupo_ joined
[06:50] <timo> sounds like "is-dir" doesn't give the expected answer perhaps

[07:33] *** kurahaupo_ left
[07:36] *** kurahaupo joined
[07:43] *** sena_kun joined
[08:10] *** kurahaupo left
[08:16] <timo> or perhaps is-reg returns true for dirs

[08:30] *** kurahaupo joined
[08:35] *** kurahaupo left
[08:38] *** kurahaupo joined
[09:17] *** kurahaupo left
[09:21] *** sena_kun left
[09:22] *** kurahaupo joined
[10:18] <Geth> ¦ rakudo/main: 3cf10fdcc7 | (Elizabeth Mattijsen)++ | src/core.e/Format.pm6

[10:18] <Geth> ¦ rakudo/main: Reorganize Format a bit

[10:18] <Geth> ¦ rakudo/main: 

[10:18] <Geth> ¦ rakudo/main: While documenting the Format class, it occurred to me that the "code"

[10:18] <Geth> ¦ rakudo/main: method was pretty ambiguous in its naming.  Replaced that by the

[10:18] <Geth> ¦ rakudo/main: "Callable" method.  Also removed the .signature method, as that now

[10:18] <Geth> ¦ rakudo/main: more logically falls out of Callable.signature.  Kept the "arity"

[10:18] <Geth> ¦ rakudo/main: and "count" methods as these are deemed to be more necessary for

[10:18] <Geth> ¦ rakudo/main: properly feeding the Callable from different sources (e.g. the .fmt

[10:18] <Geth> ¦ rakudo/main: method).

[10:18] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3cf10fdcc7

[10:20] <Geth> ¦ roast: 5241a0188c | (Elizabeth Mattijsen)++ | S32-str/format.t

[10:20] <Geth> ¦ roast: Adapt Format test following changes in Format class

[10:20] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/5241a0188c

[10:32] *** linkable6 left
[10:32] *** evalable6 left
[10:34] *** linkable6 joined
[10:35] *** evalable6 joined
[10:41] *** kurahaupo left
[10:41] *** kurahaupo joined
[10:46] *** ab5tract left
[11:03] <lizmat> m: sprintf(q/% #x/,-42)

[11:03] <camelia> rakudo-moar 3cf10fdcc: ( no output )

[11:03] <lizmat> m: say sprintf(q/% #x/,-42)

[11:03] <camelia> rakudo-moar 3cf10fdcc: OUTPUT: «0x-2a␤»

[11:03] <lizmat> m: say sprintf(q/% #x/,-42).EVAL

[11:03] <camelia> rakudo-moar 3cf10fdcc: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Confused␤at /home/camelia/EVAL_0:1␤------> 30⏏x-2a␤    expecting any of:␤        whitespace␤»

[11:03] <lizmat> I think it's wrong that this doesn't roundtrip

[11:04] <lizmat> sprintf should have rendered it as "-0x2a"

[11:05] <lizmat> m: dd "-0x2a".EVAL   # which *does* roundtrip

[11:05] <camelia> rakudo-moar 3cf10fdcc: OUTPUT: «-42␤»

[11:05] <timo> sounds reasonable

[11:06] <timo> m: say sprintf(q/% #o/, -42)

[11:06] <camelia> rakudo-moar 3cf10fdcc: OUTPUT: «0-52␤»

[11:06] <lizmat> that would EVAL but not roundtrip  :-)_

[11:06] <timo> that looks just totally wrong :D

[11:07] <lizmat> m: dd '052'.EVAL

[11:07] <camelia> rakudo-moar 3cf10fdcc: OUTPUT: «Potential difficulties:␤    Leading 0 has no meaning. If you meant to create an octal number, use '0o' prefix; like, '0o52'. If you meant to create a string, please add quotation marks.␤    at /home/camelia/EVAL_0:1␤    ------> 3052⏏<EOL…»

[11:07] <timo> that as well yeah

[11:08] <timo> i hadn't even seen the # directive before

[11:08] *** kurahaupo left
[11:08] <lizmat> there's probably a lot you don't know about sprintf formats  :-)

[11:08] <timo> i wonder if we want something that's a bit less "magic syntax" for creating formatters

[11:09] <timo> like in C there's a whole bunch of constants you can use to "get the right thing" like PRIi64

[11:11] <timo> Formatter.integer(:base(16), :zero-pad, :min-length(5), :max-length(10)) or whatever

[11:12] <timo> do we want to support ~ with Format so that it can 1) combine multiple formats and 2) not lose too much of its compiled efficiency when we just concat a string to it

[11:13] <timo> i guess concating two format strings that refer to their arguments by index could be weird to define

[11:14] <lizmat> you can already concatenate 2 Format strings, as they act as normal strings in every other way

[11:18] *** kurahaupo joined
[11:20] <timo> of course you can

[11:20] <timo> i just mean if we should handle it in some special way

[11:21] <lizmat> I've thought about it, but format strings allow: * and $

[11:21] <lizmat> * means: fetch the value for width or precision as an argument

[11:21] <lizmat> m: dd sprintf("%*s,-10,"foo")

[11:21] <camelia> rakudo-moar 3cf10fdcc: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> dd sprintf("%*s,-10,"⏏foo")␤    expecting any of:␤        i…»

[11:22] <lizmat> m: dd sprintf("%*s",-10,"foo")

[11:22] <camelia> rakudo-moar 3cf10fdcc: OUTPUT: «"foo       "␤»

[11:26] <lizmat> and then there's $

[11:26] <lizmat> m: dd sprintf(q/%2$s/,"foo","bar")

[11:26] <camelia> rakudo-moar 3cf10fdcc: OUTPUT: «"bar"␤»

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:41] *** kurahaupo left
[12:46] *** kurahaupo joined
[14:21] <lizmat> another sprintf beauty:

[14:21] <lizmat> M: dd sprintf(q/%#05x/,1)

[14:21] <lizmat> m: dd sprintf(q/%#05x/,1)

[14:21] <camelia> rakudo-moar 3cf10fdcc: OUTPUT: «"000x1"␤»

[14:53] *** kurahaupo left
[14:58] *** kurahaupo joined
[15:10] *** kurahaupo left
[15:20] *** kurahaupo joined
[15:28] *** kurahaupo_ joined
[15:29] *** kurahaupo left
[15:29] *** kurahaupo_ left
[15:29] *** kurahaupo joined
[16:01] *** kurahaupo left
[16:05] *** kurahaupo joined
[16:14] *** kurahaupo left
[16:18] *** kurahaupo joined
[16:25] *** kurahaupo left
[16:30] *** kurahaupo joined
[16:31] *** kurahaupo_ joined
[16:31] *** kurahaupo left
[16:32] *** kurahaupo_ left
[16:32] *** kurahaupo joined
[16:32] *** kurahaupo left
[16:37] *** kurahaupo joined
[16:41] *** kurahaupo left
[16:43] *** kurahaupo joined
[16:44] *** squashable6 left
[16:46] *** squashable6 joined
[16:47] *** kurahaupo left
[16:53] *** ab5tract joined
[17:11] *** ab5tract left
[17:25] *** sena_kun joined
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[19:03] *** evalable6 left
[19:03] *** linkable6 left
[19:04] *** linkable6 joined
[19:05] *** evalable6 joined
[19:25] *** ab5tract joined
[19:57] *** guifa left
[20:08] *** sena_kun left
[20:09] *** ab5tract left
[20:39] <MasterDuke> isn't (s)printf turing complete?

[21:08] *** squashable6 left
[21:11] *** squashable6 joined
[22:44] <lizmat> haven't found a way to have a sprintf change something, or be able to call an altered version of itself

[22:44] <lizmat> but maybe I didn't try hard enough?

[22:56] <japhb> lizmat: classic C sprintf has the ability to write data into an arg.

[22:56] <japhb> I doubt we would have replicated that

[22:56] <lizmat> TIL

[22:58] <japhb> I mean, it might as well have a sign on it saying "security hole *here*", so I wouldn't be surprised if its not even supported anymore.

[22:59] <lizmat> pretty sure we don't want that in Raku  :-)

[22:59] <lizmat> sleep&

[23:01] <japhb> Ah yeah, here it is:    n      The number of characters written so far is stored into the integer pointed to by the corresponding argument.

[23:11] *** linkable6 left
[23:11] *** evalable6 left
[23:12] *** linkable6 joined
[23:12] *** evalable6 joined
[23:40] <Geth> ¦ rakudo/main: 64c48f6cf3 | (Nick Logan)++ (committed using GitHub Web editor) | README.md

[23:40] <Geth> ¦ rakudo/main: Update badge url to reference the main branch

[23:40] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/64c48f6cf3

