[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:13] *** sena_kun left
[05:22] *** eponym joined
[05:23] *** epony left
[05:23] *** eponym left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:54] <nine> ab5tract: ok, will review on the plane :) May be until tomorrow that I have Wifi again and can approve though
[06:54] <tellable6> nine, I'll pass your message to ab5tract
[09:40] *** linkable6 left
[09:40] *** coverable6 left
[09:40] *** tellable6 left
[09:40] *** releasable6 left
[09:40] *** committable6 left
[09:40] *** reportable6 left
[09:40] *** notable6 left
[09:40] *** evalable6 left
[09:40] *** nativecallable6 left
[09:40] *** bloatable6 left
[09:40] *** bisectable6 left
[09:40] *** statisfiable6 left
[09:40] *** greppable6 left
[09:40] *** benchable6 left
[09:40] *** unicodable6 left
[09:40] *** quotable6 left
[09:40] *** squashable6 left
[09:40] *** shareable6 left
[09:40] *** sourceable6 left
[09:40] *** committable6 joined
[09:41] *** bisectable6 joined
[09:41] *** benchable6 joined
[09:41] *** bloatable6 joined
[09:41] *** nativecallable6 joined
[09:41] *** greppable6 joined
[09:41] *** unicodable6 joined
[09:41] *** tellable6 joined
[09:41] *** evalable6 joined
[09:41] *** sourceable6 joined
[09:41] *** quotable6 joined
[09:41] *** notable6 joined
[09:42] *** releasable6 joined
[09:42] *** shareable6 joined
[09:42] *** coverable6 joined
[09:42] *** linkable6 joined
[09:42] *** reportable6 joined
[09:43] *** squashable6 joined
[09:43] *** statisfiable6 joined
[10:04] *** ab5tract joined
[10:08] *** sena_kun joined
[11:01] *** sena_kun left
[11:02] *** sena_kun joined
[11:42] <ab5tract> hmmm.. wondering where in roast my subset tests should land..
[11:42] <tellable6> 2023-02-12T06:54:29Z #raku-dev <nine> ab5tract: ok, will review on the plane :) May be until tomorrow that I have Wifi again and can approve though
[11:44] <lizmat> there's a t/spec/S12-subset/ directory
[11:47] <ab5tract> lizmat: bizarre that my branch doesn't budge the total spectest numbers 
[11:47] <ab5tract> we are at 672, right?
[11:47] <lizmat> yes
[11:47] <lizmat> probably something else blocking....  are the ones in t/spec/S12-subset passing ?
[11:49] <ab5tract> yes, for sure
[11:49] <ab5tract> but they shouldn't have been passing before
[11:50] <ab5tract> as subset wasn't even in the grammar yet
[11:50] <lizmat> maybe they're not tested at all?   aka not in t/spec/spectest.data ?
[11:50] <ab5tract> didn't know about this, let me check
[11:52] <ab5tract> hmm, they are there. along with several other tests with subset in the name
[11:52] <ab5tract> let me investigate a bit
[11:52] <ab5tract> one major bummer is that Comma tries to index spec and then barfs to death
[11:53] <ab5tract> and there is no exclusion mechanism that I've been able to find. anyway, thats a tertiary dilemma
[11:55] <ab5tract> okay, nevermind, those tests are not passing with my branch. I'll have to take a look as to why, when my own test cases are all working and seem to do similar stuff
[11:55] <ab5tract> thanks for pointing this out lizmat++
[11:57] <lizmat> ok, so I should hold off still on merging your branch ?
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:02] <ab5tract> I don't know.. it certainly doesn't cause any regressions
[12:02] <ab5tract> but I guess it would be good to get this right
[12:03] <lizmat> ok, I'll hold off for a bit then :-)
[12:05] <ab5tract> sounds like a plan
[12:05] <ab5tract> frustrating... I didn't even consider the case where there is no where clause
[12:06] <lizmat> heh  :-)
[12:06] <ab5tract> of course we support it, even though it doesn't really make any sense at all
[12:06] <ab5tract> because: torture the implementors, right? :)
[12:06] <lizmat> I guess it's basically the same as aliasing, right?
[12:07] <ab5tract> yeah, I guess it is
[12:14] <lizmat> am currently looking at this very helpful message:
[12:14] <lizmat> ===SORRY!===
[12:14] <lizmat> Something went wrong in (NotFound)
[12:16] *** frost61 joined
[12:20] *** frost61 left
[12:32] <lizmat> hhmmm.. looks like the resolver method of my new VarDeclaration::Constant class is being called 7 times with the same resolver
[12:32] <lizmat> wonder what is going on there...
[12:32] <lizmat> for something as simple as: my constant $x = 42
[12:37] <ab5tract> lizmat: I've seen that one before!
[12:37] <ab5tract> how I fixed it escapes me at the moment
[12:37] <ab5tract> (the SORRY)
[12:38] <ab5tract> what does "#OK not used" mean in terms of roast? does it ignore these tests?
[12:39] <lizmat> I have *no* idea
[12:50] <ab5tract> :)
[12:52] *** Geth left
[12:52] *** Geth joined
[12:53] <Geth> ¦ rakudo/main: eff0244080 | (Elizabeth Mattijsen)++ | src/core.c/Exception.pm6
[12:53] <Geth> ¦ rakudo/main: Make X::Method::NotFound more resilient
[12:53] <Geth> ¦ rakudo/main: 
[12:53] <Geth> ¦ rakudo/main: Instead of conking out without any useful information if the
[12:53] <Geth> ¦ rakudo/main: !create-message method dies.
[12:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/eff0244080
[12:53] <lizmat> hmmm.. looks like Geth was on channel, but wasn't accepted any webhook pushes :-(
[12:54] <Geth> ¦ rakudo/main: 9e4fa28635 | (Vadim Belman)++ | src/core.c/Version.pm6
[12:54] <Geth> ¦ rakudo/main: Fix serialization issues with Version
[12:54] <Geth> ¦ rakudo/main: 
[12:54] <Geth> ¦ rakudo/main: Attempt to declare a class starting with `Version::` was causing 'Object
[12:54] <Geth> ¦ rakudo/main: does not exist in serialization context' error. Turning class
[12:54] <Geth> ¦ rakudo/main: declaration into a lexical (`my` was missing) and making pre-declared
[12:54] <Geth> ¦ rakudo/main: constants lexicals fix the problem.
[12:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/9e4fa28635
[12:54] <Geth> ¦ rakudo/main: bc9bd9bf32 | (Vadim Belman)++ (committed using GitHub Web editor) | src/core.c/Version.pm6
[12:54] <Geth> ¦ rakudo/main: Merge pull request #5204 from vrurg/fix-version-class-serialization
[12:54] <Geth> ¦ rakudo/main: 
[12:54] <Geth> ¦ rakudo/main: Fix serialization issues with Version
[12:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bc9bd9bf32
[12:55] <lizmat> re-delivering some events now
[12:56] <Geth> ¦ rakudo/main: e09f20ca27 | (Vadim Belman)++ | src/Perl6/Actions.nqp
[12:56] <Geth> ¦ rakudo/main: Fix error reporting for feeds
[12:56] <Geth> ¦ rakudo/main: 
[12:56] <Geth> ¦ rakudo/main: When LHS is a typeobject it is codegenned into a `QAST::WVal` which
[12:56] <Geth> ¦ rakudo/main: cannot be used as a positional.
[12:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e09f20ca27
[12:56] <Geth> ¦ rakudo/main: dfcd57778f | (Vadim Belman)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp
[12:56] <Geth> ¦ rakudo/main: Merge pull request #5203 from vrurg/fix-feed-error-gen
[12:56] <Geth> ¦ rakudo/main: 
[12:56] <Geth> ¦ rakudo/main: Fix error reporting for feeds
[12:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dfcd57778f
[12:59] <lizmat> ok, it looks like that where all the commits that were missed
[12:59] <lizmat> ab5tract: so no I get a much more informative:
[12:59] <lizmat> ===SORRY!===
[12:59] <lizmat> Method RakuAST::VarDeclaration::Constant.IMPL-TO-QAST not found
[13:01] <ab5tract> that's weird, it should inherit that from elsewhere
[13:01] <lizmat> yeah...  anyways.. :-)
[13:04] <ab5tract> I think that should be the same as IMPL-QAST-DECL in this case, right?
[13:12] <lizmat> at this moment, I'm not sure
[13:14] <lizmat> meh, looks like the declaration is not codegenned in the case of "our"  
[13:33] <Geth> ¦ rakudo/watermarky-supply-zip: fb657a4a17 | (Jonathan Worthington)++ | src/core.c/Supply-coercers.pm6
[13:33] <Geth> ¦ rakudo/watermarky-supply-zip: Correct termination predicate
[13:33] <Geth> ¦ rakudo/watermarky-supply-zip: 
[13:33] <Geth> ¦ rakudo/watermarky-supply-zip: Input supplies may have got many values ahead of the watermark before
[13:33] <Geth> ¦ rakudo/watermarky-supply-zip: it is set.
[13:33] <Geth> ¦ rakudo/watermarky-supply-zip: review: https://github.com/rakudo/rakudo/commit/fb657a4a17
[13:50] <ab5tract> two more spectests now passing with my branch!
[13:50] <lizmat> whee!
[14:04] <Geth> ¦ rakudo/main: 4 commits pushed by (Stefan Seifert)++
[14:04] <Geth> ¦ rakudo/main: 95a5479fa0 | RakuAST: throw correct exception when on missing unit scope
[14:04] <Geth> ¦ rakudo/main: 035544f28d | RakuAST: support indirect method syntax
[14:04] <Geth> ¦ rakudo/main: 88e862a89d | RakuAST: support augmenting packages
[14:04] <Geth> ¦ rakudo/main: e39a546be2 | RakuAST: support calls on multi-part names
[14:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/eff02440809c...e39a546be223
[14:05] <nine> 679 passing, so now we really have more than the first half :
[14:05] <lizmat> nine: any ideas as to why an IMPL-QAST-DECL is not being called for an "our" scoped thing?
[14:05] <ab5tract> nine++
[14:05] <lizmat> nine++ indeed!
[14:06] <nine> What kind of thing?
[14:08] <lizmat>  RakuAST::VarDeclaration::Constant
[14:10] <lizmat> https://gist.github.com/lizmat/ec4dc6ebda05c6f5075508ca2ad2383b # work so far
[14:11] <ab5tract> nine: I'm pretty confident in my branch at this time. needed to add support for subsets without where clauses, but those are working now.
[14:11] <nine> Is that a RakuAST::Declaration?
[14:11] <lizmat> yes
[14:13] *** epony joined
[14:14] <lizmat> hmmm..  I wonder if it is the "is-lexical' check in there that needs an additional "our" ?
[14:15] <nine> lizmat: if it's our scoped than it's not is-simple-lexical-declaration and needs to take care of declaring that lexical explicitly
[14:16] <lizmat> why?  the only thing an "our" variable is different from a my, is that it is bound to a key in the $?PACKAGE.HOW ?
[14:16] <nine> by default that is
[14:17] <lizmat> and that can be taken care of in the declaration ?
[14:17] <nine> Sure, just have is-simple-lexical-declaration return True
[14:24] <nine> ab5tract: looks like that method is still called IMPL-INSTALL-INTO-PACKAGE in the version of the commit on Github
[14:28] <ab5tract> I didn't see a message from you about wanting to change that, sorry.
[14:28] <ab5tract> What would you prefer?
[14:28] <ab5tract> IMPL-INSTALL-PACKAGES?
[14:29] <nine> the old name
[14:29] <nine> https://github.com/rakudo/rakudo/pull/5178/commits/ab7491d1111fb582ca9615039385e2b8ff9493e8
[14:29] <ab5tract> ok
[14:30] <lizmat> m: our constant $x = 42; { our constant $x = 666; say $x }; say $x; say OUR::<$x>    # looks like base installs "our constants" as "my constants" 
[14:30] <camelia> rakudo-moar e39a546be: OUTPUT: «666␤42␤666␤»
[14:30] <ab5tract> ah, I see the issue now, we are using two different feedback channel
[14:30] <lizmat> I wonder whether this should be caught or not, or that installing the constants as a lexical is enough
[14:34] <nine> looks buggy to me
[14:35] <lizmat> yeah, you'd expect the inner "our constant $x" to be a compile time error, right ?
[14:35] <nine> yes
[14:35] <nine> lizmat: you're still working on BUILDPLAN?
[14:36] <lizmat> well, I want to, but last time I checked, the BUILDPLAN wasn't set up correctly
[14:36] <lizmat> so that doesn't give me a steady foundation to work with :-)
[14:37] <lizmat> m: class A { has $.a = 42 }; use BUILDPLAN A
[14:37] <camelia> rakudo-moar e39a546be: OUTPUT: «class A BUILDPLAN:␤ 0: nqp::getattr(obj,A,'$!a') = :$a if possible␤ 1: nqp::getattr(obj,A,'$!a') = 42 if not set␤»
[14:37] <lizmat> in RauAST I get " 1: vivify nqp::getattr(obj,A,'$!a') if part of a mixin" for the 2nd element
[14:38] <lizmat> which is a fallback for "nothing else happened to this attribute, make sure it exists"
[14:38] <lizmat> if I remember correctly
[14:39] <nine> For me the BUILDPLAN module doesn't even compile
[14:41] <lizmat> ?
[14:41] <lizmat> it's installed with the core ?
[14:41] <ab5tract> nine: naming issue is resolved
[14:41] <nine> lizmat: with RAKUAST
[14:42] <lizmat> why would it need RAKUAST ?
[14:42] <lizmat> did we change the buildplan in RakuAST ?
[14:44] <nine> ab5tract: can't merge that PR because it's still marked as a draft
[14:44] <nine> nine@sunshine:~/rakudo (main *=)> RAKUDO_RAKUAST=1 ./rakudo-m -Ilib -e 'class Foo { has $!foo = "foo" }; use BUILDPLAN Foo'
[14:44] <nine> ===SORRY!=== Error while compiling 
[14:44] <nine> Your !! was gobbled by the expression in the middle; please parenthesize
[14:44] <nine> at line 181
[14:45] <nine> ------>     note BUILDPLAN(nqp::isconcrete($_) ⏏?? ::($_) !! $_)
[14:45] <lizmat> you don't need the -Ilib
[14:45] <lizmat> it's installed with the core
[14:45] <nine> nine@sunshine:~/rakudo (main *=)> RAKUDO_RAKUAST=1 ./rakudo-m -e 'class Foo { has $!foo = "foo" }; use BUILDPLAN Foo'
[14:45] <nine> ===SORRY!===
[14:45] <nine> Could not find BUILDPLAN in:
[14:45] <nine> nine@sunshine:~/rakudo (main *=)> RAKUDO_RAKUAST=1 ./rakudo-m -e 'class Foo { has $!foo = "foo" }; use BUILDPLAN Foo'
[14:45] <nine> ===SORRY!===
[14:45] <nine> Could not find BUILDPLAN in:
[14:45] <lizmat> did you run "make install" ?
[14:46] <nine> No, why would I?
[14:46] <lizmat> well, to get things like "use Test" and "use BUILDPLAN" to work ?
[14:46] <nine> Test has worked fine with RAKUAST for half a year
[14:47] <lizmat> ok, I'll look into getting BUILDPLAN to work with RakuAST
[14:47] <nine> Yaks on top of yaks...
[14:47] <ab5tract> nine: I don't think I have control over the draft mark
[14:48] <lizmat> not a draft anymore, shall I merge ?
[14:49] <lizmat> not as a squash, right?
[14:49] <ab5tract> nope, this time the commit history is sensible
[14:49] <Geth> ¦ rakudo/main: 8 commits pushed by ab5tract++, (Elizabeth Mattijsen)++
[14:49] <Geth> ¦ rakudo/main: c17d5b2f2a | Implement RakuAST::Type::Subset
[14:49] <Geth> ¦ rakudo/main: 1be78baada | Use 'my' in variable declaration
[14:49] <Geth> ¦ rakudo/main: 4c325212d4 | Move package installation logic into separate role
[14:49] <Geth> ¦ rakudo/main: 27d1d704cb | &&/|| do not curry
[14:49] <Geth> ¦ rakudo/main: 93caca5147 | Follow generated param name conventions
[14:49] <Geth> ¦ rakudo/main: 7b4e982366 | Avoid unnecessary variable
[14:49] <Geth> ¦ rakudo/main: d3d839cd24 | Support where-free subsets
[14:49] <Geth> ¦ rakudo/main: 0db0ea5128 | Merge pull request #5178 from ab5tract/ab5tract/rakuast-subset
[14:49] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/e39a546be223...0db0ea5128b0
[14:50] <ab5tract> \o/
[14:50] <lizmat> ab5tract++   nine++    will work on tests and deparsing  :-)
[14:50] <ab5tract> lizmat++ thank you so much
[14:51] <ab5tract> TIL that we also support subsets on individual variables, or something. not even sure what to call it
[14:51] <ab5tract> m: my ($ where 2) = 3
[14:51] <camelia> rakudo-moar e39a546be: OUTPUT: «Type check failed in assignment to anon; expected <anon> but got Int (3)␤  in block <unit> at <tmp> line 1␤␤»
[14:51] <nine> ab5tract: congratulations!
[14:53] <ab5tract> sometimes I wonder if YAGNI was a principle that was ignored a bit too much in Raku development ;)
[14:53] <ab5tract> nine: Thanks! and thank you for all the pertinent advice along the way
[14:53] <lizmat> nine: so the BUILDPLAN diff is:
[14:53] <lizmat> -    note BUILDPLAN(nqp::isconcrete($_) ?? ::($_) !! $_)
[14:53] <lizmat> +    note BUILDPLAN(nqp::isconcrete($_) ?? (::($_)) !! $_)
[14:53] <lizmat> are we sure this isn't a RakuAST regression ?
[14:54] <nine> it definitely is
[14:54] <lizmat> so, shouldn't we fix that instead of fixing BUILDPLAN ?
[14:55] <nine> Of course?
[14:55] * lizmat counts 681 / 1355
[14:56] <Geth> ¦ rakudo/main: 28771d746a | (Elizabeth Mattijsen)++ | lib/BUILDPLAN.rakumod
[14:56] <Geth> ¦ rakudo/main: Make sure a RakuAST regression doesn't bother us
[14:56] <Geth> ¦ rakudo/main: 
[14:56] <Geth> ¦ rakudo/main: The code in BUILDPLAN *was* correct, but we need BUILDPLAN to work
[14:56] <Geth> ¦ rakudo/main: in RakuAST before we can look it this again.
[14:56] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/28771d746a
[14:57] <nine> Err...what's the point of this ^^^?
[14:57] <lizmat> it allows us to move on with getting a correct BUILDPLAN for classes ?
[14:58] <lizmat> I assumed that'd be more important atm ?
[14:58] <nine> I don't think there is a "more important" as we'll have to support _everything_. That's why I implemented some of the most obscure issues already while we on't even support enums yet
[14:59] <nine> Adding workarounds hides issues that may not be covered by any spectest. Like in this case it is a bit of an obscure construct
[15:00] <lizmat> well, you seem: 1. not to want to do a "make install", and 2. want progress on BUILDPLAN
[15:01] <nine> I was just asking :) Don't want to duplicate effort
[15:01] <nine> And my next flight gets closer, so I'll be out of comms for a while
[15:01] <ab5tract> safe travels nine
[15:02] <lizmat> last week I left a message here about what I thought was wrong with making the BUILDPLAN
[15:02] <lizmat> lemme see
[15:02] <nine> ab5tract: do you want to tackle enum next? Might be touching similar points as subset did
[15:04] <ab5tract> nine: yeah, sounds interesting. there is still work to be done with getting 't/spec/S12-subset/subtypes.t' to work but a) it's not a subset related compilation error at the moment and b) I'm a bit burnt out on the word subset atm
[15:07] <nine> haha, I know how that is
[15:07] <nine> lizmat: want me to dive into that has $!foo = "foo" thing?
[15:08] <nine> Sounds like that could keep me busy for a few hours :D
[15:08] <lizmat> yes, please
[15:08] <lizmat> I looked into it, and said it on channel I think
[15:08] <ab5tract> enum is anothe RakuAST::Type, correct?
[15:09] <lizmat> basically it was some order thing where code that would add the BUILDPLAN entry was in the wrong branch of an if / else
[15:10] <nine> ack -i buildplan src/Raku/ast doesn't find anything
[15:10] <lizmat> it's not called BUILDPLAN there
[15:11] <lizmat> BUILDPLAN is basically run of the info in the Attribute objects
[15:12] <lizmat> *off
[15:12] <nine> Ah yes, there's your comment on BUILDALL in IMPL-COMPOSE
[15:12] <lizmat> and the Attributes were not set up correctly ?
[15:13] <lizmat> anyways, safe flying!
[15:13] <nine> Ok, so I'll dig into this
[15:14] <lizmat> great!
[15:20] <nine> Oh, I may have implemented indirect lookups in the wrong place. That nqp::isconcrete($_) ?? ::($_) !! $_ shows that ::($_) shouldn't actually parse as a call, but just as a name
[15:21] <lizmat> ab5tract: are there anonymous subsets?  if not, I guess :$name! in .new ?
[15:28] <ab5tract> lizmat: good call. From what I can tell, you cannot not supply a name when using 'subset' 
[15:29] <lizmat> yeah, that's what I figured :-)
[15:29] <ab5tract> but again, I present you with:
[15:29] <ab5tract> m: my ($a where /a/) = b
[15:29] <camelia> rakudo-moar 28771d746: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    b used at line 1␤␤»
[15:29] <ab5tract> m: my ($a where /a/) = <b>
[15:29] <camelia> rakudo-moar 28771d746: OUTPUT: «Type check failed in assignment to $a; expected <anon> but got Str ("b")␤  in block <unit> at <tmp> line 1␤␤»
[15:30] <lizmat> hmmm..  that currently doesn't fail on RakuAST ?
[15:31] <ab5tract> nope
[15:31] <ab5tract> and this dies with a special error of its own
[15:31] <ab5tract> m: my ($ where .so) = False
[15:31] <camelia> rakudo-moar 28771d746: OUTPUT: «Type check failed in assignment to anon; expected <anon> but got Bool (Bool::False)␤  in block <unit> at <tmp> line 1␤␤»
[15:32] <lizmat> m: my ($ where !.so) = False
[15:32] <camelia> rakudo-moar 28771d746: ( no output )
[15:32] <lizmat> feels about right ?
[15:32] <ab5tract> Luckily those aren't RakuAST::Type::Subsets, so I don't need to worry about them
[15:32] <lizmat> No such method 'IMPL-LOOKUP-QAST' for invocant of type
[15:32] <lizmat> 'RakuAST::ParameterTarget'
[15:33] <ab5tract> exactly
[15:33] <lizmat> intriguing  :-)
[15:33] <ab5tract> *don't need to worry about them atm
[15:33] <lizmat> probably should just check whether there is a name, and only run the lookup if there is one ?\
[15:34] <ab5tract> lizmat: ah, but that doesn't interact with my code at all because the grammar isn't parsing 'subset'
[15:34] <lizmat> but it should, is what you're saying
[15:34] <ab5tract> this is about a where clause not getting added as a post constraint somewhere
[15:35] <ab5tract> nope, and sorry if I'm being confusing. 
[15:35] <lizmat> ack  :-)
[15:38] <Geth> ¦ rakudo/main: 30b398b1cb | (Elizabeth Mattijsen)++ | src/Raku/ast/type.rakumod
[15:38] <Geth> ¦ rakudo/main: Tweaks on RakuAST::Type::Subset
[15:38] <Geth> ¦ rakudo/main: 
[15:38] <Geth> ¦ rakudo/main: 1. make :$name parameter mandatory
[15:38] <Geth> ¦ rakudo/main: 2. lose setting the default scope, would interfere with deparsing
[15:38] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/30b398b1cb
[15:41] *** Geth left
[15:41] *** Geth joined
[15:43] <ab5tract> hmmm...
[15:43] <ab5tract> enum does a bunch of documentation-related stuff
[15:45] *** Geth left
[15:45] *** Geth joined
[15:56] <lizmat> hmmm... .of doesn't get set until after begin time  :-(
[16:01] <nine> That's done by a trait, isn't it? And traits are usually applied by PERFORM-BEGIN
[16:02] <lizmat> well, that could well be, but that would imply that an RakuAST object would need to have been parsed already before being able to being deparsed
[16:03] <lizmat> and I don't think we want that to be a requirement
[16:03] <lizmat> I mean, you want to be able to inspect a RakUAST tree *before* you run it through EVAL, no ?
[16:03] <nine> Well it would have to be past it's CHECK time. Otherwise the deparse couldn't rely on the AST to actually make sense, could it?
[16:04] <lizmat> it has been able to do so so far
[16:05] <nine> If we want to keep that, deparse has to cope with traits not being applied yet
[16:05] <lizmat> but then the deparse would be incorrect
[16:07] <nine> Deparse can look at the list of traits in the AST
[16:08] <lizmat> yes, it could
[16:12] <lizmat> m: say Q|my %h is Map = a => 42; dd %h|.AST.DEPARSE   # seems there's more cases of traits being missed atm
[16:12] <camelia> rakudo-moar 30b398b1c: OUTPUT: «my %h = a => 42;␤dd(%h)␤␤»
[16:17] <nine> I've got a fix for the BUILDPLAN mis-parse
[16:18] <lizmat> great!
[16:19] <nine> Don't think the spectest will finish before I have to board though :D Will push on the other side
[16:24] <lizmat> ok, safe travels!
[16:42] <lizmat> ab5tract: I see that $!where in Type::Subset does *not* keep the same value over the lifetime of the object
[16:42] <lizmat> where is the resolved "$!where" used ?
[16:44] <ab5tract> it's used in the PRODUCE-META-OBJECT
[16:44] <ab5tract> I originally had one for expr and one for where but it eventually seemed redundant
[16:45] <ab5tract> What I do is roughly similar to what happens in signature.rakumod
[16:49] <lizmat> but...   a Block object doesn't have any IMPL-CURRIED method ?  only a RakuAST::Block object has ?
[16:49] <lizmat> or RakuAST::Expression ?
[16:50] <lizmat> ah, it *isn't* a Block, it *is* a RakuAST::Block  
[16:50] <lizmat> ok
[16:50] <ab5tract> exactly :)
[16:52] <lizmat> ok, going to introduce a $!block attribute for that  :-)
[16:53] <lizmat> hmmm... wonder if a TopicCall would be moe appropriate
[16:53] <lizmat> for the .ACCEPTS
[16:54] <ab5tract> you mean for the wrapper expression?
[16:54] <lizmat> ah no, it's $!WHERE.ACCEPTS($_) not the other way around  :-)
[16:55] <ab5tract> I think it works cleaner with just the single '$!where
[16:55] <ab5tract> attribute
[16:55] <ab5tract> no abstraction seems to be violated
[16:56] <lizmat> yeah, but then the deparse of a Type::Subset object before and after an EVAL would be different
[16:56] <lizmat> $!where is public
[16:58] <ab5tract> oh, then just make it private!
[16:58] <ab5tract> :D
[16:58] <ab5tract> though I guess from a politeness standpoint, people who make these on their own may want to introspect...
[16:59] <ab5tract> lizmat: How come it works on the type signature deparsing?
[17:00] <lizmat> not sure...  :-)
[17:00] <lizmat> working on Type::Subset now...  trying to not be distracted  :-)
[17:03] <lizmat> I mean, the RakuAST classes *also* need to have an interface with which macro builders will be able to work
[17:03] <lizmat> so ideally, each object should be instantiable with just a .new call and arguments
[17:06] <ab5tract> ok then please proceed
[17:07] <ab5tract> we should probably standardize between named and unnamed argument lists in the classes, though
[17:07] <ab5tract> so far I've seen a mixture of both
[17:11] <lizmat> I think the rule is: if there's only one possible argument, then it doesn't have to be named
[17:12] <lizmat> otherwise: just named
[17:12] <lizmat> so: RakuAST::IntLiteral.new(42)
[17:14] <ab5tract> ah, right
[17:14] <ab5tract> that matches what I've seen
[18:00] *** reportable6 left
[18:02] <ab5tract> hmmm, I don't seem to be able to get past the initial parsing phase. Somehow it's like the regex doesn't even register.
[18:03] *** reportable6 joined
[18:03] <ab5tract> That is to say, I am getting the same answer for any missing keyword:
[18:04] <ab5tract> Unhandled exception: Cannot look up attributes in a Any type object. Did you forget a '.new'?
[18:06] <ab5tract> both 'enum F<B>' and 'dsfadfef F<B>' say that same thing 
[18:09] <ab5tract> The grammar shouldn't need any serious tweaking, but even if the token match fails, it shouldn't barf like this, right?
[18:13] <ab5tract> omg...
[18:13] <ab5tract> spelling errors in NQP land can be fun! ;D
[18:17] <ab5tract> ... but that didn't fix the issue
[18:50] *** epony left
[20:04] *** NemokoschKiwi joined
[20:21] <Geth> ¦ rakudo/main: 1f0fe647cd | (Elizabeth Mattijsen)++ | src/Raku/ast/type.rakumod
[20:21] <Geth> ¦ rakudo/main: Fix typo in type specification in signature
[20:21] <Geth> ¦ rakudo/main: 
[20:21] <Geth> ¦ rakudo/main: Wonder why this didn't blow up
[20:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1f0fe647cd
[20:21] <Geth> ¦ rakudo/main: b915dd3a80 | (Elizabeth Mattijsen)++ | 3 files
[20:21] <Geth> ¦ rakudo/main: RakuAST: add deparsing for Type::Subset and some refactoring
[20:21] <Geth> ¦ rakudo/main: 
[20:21] <Geth> ¦ rakudo/main: - allow an "of" named argument for programmatical uses
[20:21] <Geth> ¦ rakudo/main: - pass on RakuAST:: classes in traits rather than Match objects
[20:21] <Geth> ¦ rakudo/main: - handle traits in .new, checking for any "of" traits
[20:21] <Geth> ¦ rakudo/main: - remove the $!current-package attribute, it is not needed
[20:22] <Geth> ¦ rakudo/main: - remove the $!current-package attribute, it is not needed
[20:22] <Geth> ¦ rakudo/main: - no longer is Attaching, as there is nothing to attach anymore
[20:22] <Geth> ¦ rakudo/main: - create the meta object at BEGIN time
[20:22] <Geth> ¦ rakudo/main: - add Type::Subset candidate in RakuAST/Deparse
[20:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b915dd3a80
[20:22] <lizmat> ab5tract ^^   now on to creating tests :-)
[20:24] *** Geth left
[20:24] *** Geth joined
[21:01] <vrurg> https://youtu.be/sJs6jNroRXU
[21:02] <vrurg> notable6: https://youtu.be/sJs6jNroRXU
[21:02] <notable6> vrurg, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Notable
[21:03] <vrurg> Forgot how to use it...
[21:03] <vrurg> notable6: weekly https://youtu.be/sJs6jNroRXU
[21:03] <notable6> vrurg, Noted! (weekly)
[21:03] <vrurg> Oh, ok. :)
[21:15] <lizmat> nice!
[21:21] <Geth> ¦ rakudo/main: 2b6b4019da | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6
[21:21] <Geth> ¦ rakudo/main: Some deparsing tweaks
[21:21] <Geth> ¦ rakudo/main: 
[21:21] <Geth> ¦ rakudo/main: - don't show "our" (it's the default) (for now)
[21:21] <Geth> ¦ rakudo/main: - reformat Lexical::Var that are WhateverCode arguments to *
[21:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2b6b4019da
[21:21] <lizmat> and that concludes my hacking for today
[21:21] <lizmat> &
[23:11] *** sena_kun left
