[00:08] *** RakuIRCLogger joined
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft
[09:59] *** sena_kun joined
[16:02] <ab5tract> m: role R { method m {…} }; my $r = R.new but role :: { method m { “m!” } }
[16:02] <camelia> rakudo-moar b64e683c0: OUTPUT: «Method 'm' must be implemented by R because it is required by roles: R.␤  in block <unit> at <tmp> line 1␤␤»
[16:03] <ab5tract> It would be kind of nice if the above worked, right?
[16:04] <ab5tract> m: role R { method m {…} }; my $r = (R does role :: { method m { “M!” } }).new; $r.m.say
[16:04] <camelia> rakudo-moar b64e683c0: OUTPUT: «Cannot use 'does' operator on a type object R.␤  in block <unit> at <tmp> line 1␤␤»
[16:06] <ab5tract> Shouldn’t `R.new but role` compose the role before calling `.new`? What if that new role has methods that influence object construction?
[16:08] <ab5tract> I guess the answer would be “create a dedicated class for it, it’s not that hard"
[16:08] <ab5tract> But still, it seems a bit surprising to me
[18:15] <ab5tract> this is also annoying
[18:16] <ab5tract> m: role R { has $.a is required; }; class C does R { submethod TWEAK { $!a = “foo” } }.new
[18:16] <camelia> rakudo-moar b64e683c0: OUTPUT: «The attribute '$!a' is required, but you did not provide a value for it.␤  in block <unit> at <tmp> line 1␤␤»
[18:17] <ab5tract> Feels like we could do the required check after TWEAK, instead of before it?
[18:35] <jdv> vrurg_: https://github.com/rakudo/rakudo/issues/5472
[18:35] <jdv> lizmat: https://github.com/rakudo/rakudo/issues/5472
[22:48] *** sena_kun left
[22:53] *** Nemokosch joined
[23:01] *** Nemokosch left
[23:01] *** Nemokosch joined
