[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:14] *** MasterDuke79 left
[00:43] *** MasterDuke joined
[00:45] <MasterDuke> hm. looks like `$*LANG.pragma('p5isms')` is always false where i am in the code (my new RakuAST::Call::Name.PERFORM-CHECK method), regardless of whether i have `use isms <Perl5>;` or not...

[01:10] <MasterDuke> but huh, it does hit RakuAST::Pragma.PERFORM-BEGIN with $name eq 'isms' before it gets into my RakuAST::Call::Name.PERFORM-CHECK

[01:17] <MasterDuke> wait, there's no `method pragma` anywhere in the rakudo source?! the only one is in nqp's NQPMatchRole?!

[01:24] *** MasterDuke left
[02:15] *** MasterDuke joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:50] *** [TuxCM] left
[07:07] *** [TuxCM] joined
[07:33] *** sena_kun joined
[09:31] *** sena_kun left
[09:55] *** maettu left
[11:34] *** coverable6 left
[11:34] *** nativecallable6 left
[11:34] *** bisectable6 left
[11:34] *** unicodable6 left
[11:34] *** reportable6 left
[11:34] *** sourceable6 left
[11:34] *** shareable6 left
[11:34] *** quotable6 left
[11:34] *** benchable6 left
[11:34] *** linkable6 left
[11:34] *** evalable6 left
[11:34] *** greppable6 left
[11:34] *** notable6 left
[11:34] *** statisfiable6 left
[11:34] *** releasable6 left
[11:34] *** nativecallable6 joined
[11:35] *** evalable6 joined
[11:35] *** sourceable6 joined
[11:35] *** bisectable6 joined
[11:35] *** quotable6 joined
[11:36] *** statisfiable6 joined
[11:36] *** coverable6 joined
[11:36] *** benchable6 joined
[11:36] *** notable6 joined
[11:36] *** linkable6 joined
[11:36] *** shareable6 joined
[11:36] *** unicodable6 joined
[11:36] *** releasable6 joined
[11:37] *** reportable6 joined
[11:37] *** greppable6 joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:44] *** ab5tract joined
[13:00] *** Geth left
[13:00] *** Geth joined
[13:11] <Geth> ¦ rakudo/main: fa2b9e34b4 | (Elizabeth Mattijsen)++ | src/core.c/Str.pm6

[13:11] <Geth> ¦ rakudo/main: Introduce Str.is-whitespace implementation detail method

[13:11] <Geth> ¦ rakudo/main: 

[13:11] <Geth> ¦ rakudo/main: Returns True of the string is empty, or consists of just whitespace

[13:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fa2b9e34b4

[13:11] <Geth> ¦ rakudo/main: a7571cb482 | (Elizabeth Mattijsen)++ | 3 files

[13:11] <Geth> ¦ rakudo/main: RakuAST: step 1 of full RakuDoc intergration into the grammar

[13:11] <Geth> ¦ rakudo/main: 

[13:11] <Geth> ¦ rakudo/main: This commit rips out all of the old grammar / actions support for

[13:11] <Geth> ¦ rakudo/main: pod blocks, and replaces this by a new simplified "slang" that

[13:11] <Geth> ¦ rakudo/main: creates the new RakuAST::Doc::xxx objects.  Sadly, it couldn't

[13:11] <Geth> ¦ rakudo/main: be made into a true slang yet, but that may be possible in the

[13:11] <Geth> ¦ rakudo/main: future.  It's basically a very limited set of tokens and action

[13:11] <Geth> ¦ rakudo/main: <…commit message has 15 more lines…>

[13:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a7571cb482

[13:13] <[TuxCM]> I have what I want now working as intended thanks to the collective ideas I got here. Of course I want more, but that has to be postponed for now

[13:13] <[TuxCM]> Thanks!

[13:13] <lizmat> make test: +1 (139/150)   make spectest: +1 (792/1355)

[13:24] *** jgaz joined
[13:34] <[TuxCM]> Rakudo v2023.04-19-ga7571cb48 (v6.d) on MoarVM 2023.04-1-g965be0af5

[13:34] <[TuxCM]> csv-test-xs-20      0.382 -  0.383

[13:34] <[TuxCM]> csv-ip5xs           0.803 -  0.816

[13:34] <[TuxCM]> test-t --race       0.822 -  0.838

[13:34] <[TuxCM]> test-t              1.335 -  1.449

[13:34] <[TuxCM]> csv-parser          3.819 -  3.975

[13:34] <[TuxCM]> csv-ip5xs-20        5.016 -  5.100

[13:34] <[TuxCM]> test-t-20 --race    6.168 -  6.629

[13:34] <[TuxCM]> test                6.211 -  7.339

[13:34] <[TuxCM]> test-t-20          22.262 - 22.854

[13:34] *** ab5tract left
[15:25] *** ab5tract joined
[15:43] *** ab5tract left
[16:19] <[Coke]> lizmat: Ugh. So even with skipping the comments, I'm finding other issues, like extra trailing commas (some of which are only an issue because they commented out the last X lines of the JSON)

[16:20] <lizmat> meh, but is that valid JSONC ?

[16:20] <[Coke]> skipping the comments with a regex was very easy, however. I may try to extend it to strip out trailing commas as well, or just complain to the devs to clean up the JSON

[16:22] <[Coke]> I can't find a spec, but I do see https://github.com/Microsoft/node-jsonc-parser which specifically has an option for it.

[16:29] <[Coke]> regexes++

[16:35] *** [TuxCM] left
[16:40] <[Coke]> oops, found I wasn't dealing with \\'s in strings, only \"; even with all these allowances, still found one JSON file that doesn't parse due to a *missing* comma instead of an extra one. :)

[16:41] <lizmat> so what generates such dirty JSON files?   some JS ?

[16:53] <[Coke]> People.

[16:53] <[Coke]> ha. Couldn't figure out why this last one was failing... non-breaking spaces separating array elements.

[16:54] <[Coke]> the MS tooling seems to be much more lenient about this kind of thing, which I hate.

[16:55] <[Coke]> Guessing this particular one was cut and paste from a word doc or a web page.

[16:58] <lizmat> meh, the "make test" +1 was a false positive

[17:13] *** jgaz left
[17:22] <Geth> ¦ rakudo/main: c7f4ab142d | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp

[17:22] <Geth> ¦ rakudo/main: RakuAST: doc-content doesn't need to have a proto

[17:22] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c7f4ab142d

[17:35] *** jgaz joined
[17:53] *** sena_kun joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[19:18] <nine> MasterDuke: yes, even Raku::Grammar uses ome NQP infrastructure (though a lot less than Perl6::Grammar)

[20:47] <nine> lizmat: a7571cb482847267c176455e9d1b6680c0511a4c broke t/02-rakudo/16-begin-time-eval.t

[21:05] *** hythm joined
[21:22] <MasterDuke> nine: hm, but `$*LANG.pragma('p5isms')` always being false after `RakuAST::Pragma.PERFORM-BEGIN` is called definitely seems like a bug

[21:24] <nine> lizmat: apparently alsot/spec/APPENDICES/A03-older-specs/01-misc.rakudo.moar "Method 'from-paragraphs' not found for invocant of class 'RakuAST::Doc::Block"

[21:28] <nine> MasterDuke: if you use a dynamic variable in a RakuAST node's code you are holding it wrong (or are doing something very, very special in which case you know that it's correct)

[21:28] <Geth> ¦ rakudo/main: 7b86e38b7e | (Stefan Seifert)++ | 3 files

[21:28] <Geth> ¦ rakudo/main: RakuAST: make variables available to their initializers

[21:28] <Geth> ¦ rakudo/main: 

[21:28] <Geth> ¦ rakudo/main: Fixes my $sub = sub () { $sub() };

[21:28] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7b86e38b7e

[21:31] <lizmat> nine: that one will be fixed when core.c will always get loaded

[21:31] <tellable6> 2023-04-28T19:33:05Z #raku <tbrowder__> lizmat look8ng

[21:31] <tellable6> 2023-04-28T19:35:52Z #raku <tbrowder__> lizmat it may be a role or class, surprising me, but given complexity of pdf it makes sense, we'll see, lots of code to download

[21:32] <nine> MasterDuke: pragmas can only be checked in Grammar and Actions (that one place in Raku/ast/code.rakumod looks wrong)

[21:32] <lizmat> pretty sure t/02-rakudo/16-begin-time-eval.t will be fixed then as well

[21:33] <nine> Ok. Please don't push any commits to main that regress tests. It's a lot of work to find out whether it was one of my changes that's responsible or not.

[21:37] <nine> MasterDuke: so in short, check that pragma in the actions code and pass it as flag to the RakuAST node so you can access it later in the PERFORM-CHECK method.

[21:44] *** [TuxCM] joined
[21:58] *** vrurg left
[21:59] *** vrurg joined
[22:01] *** [TuxCM] left
[22:01] <lizmat> nine: tried to automagically load the core.c setting, but alas, no such luck  :-(

[22:08] *** [TuxCM] joined
[22:22] *** sena_kun left
[22:42] *** hythm left
[23:28] *** japhb left
[23:33] *** japhb joined
