[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:08] <ugexe> it seems like that error means something is calling .indent($some-value-getting-BOOTInt), but I'm not seeing anything that jumps out at me
[01:00] <Geth> ¦ rakudo/main: aca81e9225 | (Nick Logan)++ | 2 files
[01:00] <Geth> ¦ rakudo/main: Remove unused transcode compiler option
[01:00] <Geth> ¦ rakudo/main: 
[01:00] <Geth> ¦ rakudo/main: This appears to have only been used by Parrot. Every other backend
[01:00] <Geth> ¦ rakudo/main: has their apply_transcodings function in nqp return the original
[01:00] <Geth> ¦ rakudo/main: input without any modifications. This change stops passing the
[01:00] <Geth> ¦ rakudo/main: transcoding option.
[01:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/aca81e9225
[01:00] <Geth> ¦ rakudo/main: 7e552d4797 | (Nick Logan)++ (committed using GitHub Web editor) | 2 files
[01:00] <Geth> ¦ rakudo/main: Merge pull request #5308 from rakudo/ugexe/remove-unused-transcode-option
[01:00] <Geth> ¦ rakudo/main: 
[01:00] <Geth> ¦ rakudo/main: Remove unused transcode compiler option
[01:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7e552d4797
[01:01] <Geth> ¦ nqp/main: 379bc81aa9 | (Nick Logan)++ | 4 files
[01:01] <Geth> ¦ nqp/main: Remove unused apply_transcoding compiler function
[01:01] <Geth> ¦ nqp/main: 
[01:01] <Geth> ¦ nqp/main: This appears to have only been used by Parrot. Every other backend
[01:01] <Geth> ¦ nqp/main: has their apply_transcodings function in nqp return the original
[01:01] <Geth> ¦ nqp/main: input without any modifications. This change removes the apply
[01:01] <Geth> ¦ nqp/main: transcodings function, and the code that called it.
[01:01] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/379bc81aa9
[01:01] <Geth> ¦ nqp/main: 1a48ed20b9 | (Nick Logan)++ | 5 files
[01:01] <Geth> ¦ nqp/main: Remove unused transcode compiler option
[01:01] <Geth> ¦ nqp/main: 
[01:01] <Geth> ¦ nqp/main: This appears to have only been used by Parrot. This change stops
[01:02] <Geth> ¦ nqp/main: passing the transcoding option.
[01:02] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/1a48ed20b9
[01:02] <Geth> ¦ nqp/main: 40f9ee383c | (Nick Logan)++ (committed using GitHub Web editor) | 9 files
[01:02] <Geth> ¦ nqp/main: Merge pull request #804 from Raku/ugexe/remove-unused-transcode-option
[01:02] <Geth> ¦ nqp/main: 
[01:02] <Geth> ¦ nqp/main: Remove unused apply_transcoding compiler function
[01:02] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/40f9ee383c
[01:45] *** evalable6 left
[01:45] *** linkable6 left
[01:46] *** linkable6 joined
[01:47] *** evalable6 joined
[01:56] <MasterDuke> hm. should IO::Path (and maybe any other that make sense, like IO::Handle, et al.) get a `has Stat $.stat` attribute that's lazily constructed any time a method is called that currently uses nqp::stat. then any subsequent methods could just use that attribute
[01:58] <MasterDuke> or should everything always make a new nqp::stat call, since the attribute may have gone stale? there are always race conditions, but maybe they'd be worse if we always cached the result of the first stat
[02:01] <MasterDuke> should stat caching default to opt-in or opt-out?
[02:02] <ugexe> i think you'd only want to cache it in the sense of one "action". like if i call .open and it ends up doing 17 stats they should just reuse the one. if i make another request to .open i'd expect it to redo the stat though
[02:08] <MasterDuke> for open i definitely can see the argument to not cache. but for things like .(group|inode|dev|modified|e|<...>) it seems like caching would be fine (or at least, not unexpected)
[02:09] <ugexe> caching e wouldnt work
[02:10] <MasterDuke> you mean because of the way it's currently implemented? or for some other reason?
[02:12] <ugexe> rakudo used to cache .e .f and some others, and it was really broken for doing thing
[02:13] <ugexe> like checking if a file exists before creating it is common, and now .e would be cached as false even though its created
[02:13] <MasterDuke> hm. i don't really remember that. any idea more precisely when?
[02:13] <MasterDuke> well, the creation could re-do the stat and overwrite the cache
[02:14] <ugexe> it could be created by a different call to "whatever/path".IO.open(...) 
[02:15] <ugexe> like you had to be super aware of the difference between different IO::Path objects even if they pointed to the same thing
[02:15] <ugexe> i believe lizmat removed the cache in IO::Path sometime before 6.c
[02:16] <MasterDuke> btw, why isn't IO::Path a value type?
[02:18] <MasterDuke> it sounds like you're suggesting not even adding an attribute to IO:* and just doing any caching "manually" where appropriate (i.e., in individual methods which right now make multiple nqp::stat calls)?
[02:19] <ugexe> https://github.com/rakudo/rakudo/commit/0c53bfea29971c6aa59993e13d0fbd45487a2183 here is the commit where it was added initially i think
[02:20] <MasterDuke> i wonder if i should still make a new Stat (name could be bikeshed) class that users could have access to. i.e., something like `my Stat $s = "foo".IO.stat`, which just has accessors for the different fields
[02:22] <ugexe> https://github.com/rakudo/rakudo/commit/8d35f651e4c41851b411c4a8a68eca018a71fc45 -- a commit i made updating the aforementioned cache
[02:23] <ugexe> having a .IO.stat seems like a decent idea to me
[02:23] <ugexe> or an IO::Path.stat rather
[02:26] <MasterDuke> 76f71878da61731f33b457e84c7b0e801c64af66 is where $!e was removed, by zoffix in 2017
[02:27] <MasterDuke> 76f71878da61731f33b457e84c7b0e801c64af66 is where $!e was removed, by zoffix in 2017
[02:27] *** linkable6 left
[02:28] <ugexe> ah yep
[02:28] <japhb> The "explicit caching" variant we ended up with was methods like .rwx, so people could at least check multiple mode bits at once.  Still not the same as the _ pseudo-file in Perl that literally meant "use the last cached value".
[02:29] <japhb> Not entirely clear on why we can't just say if you want to use a cached stat structure, you have to be explicit.
[02:30] *** linkable6 joined
[02:30] <MasterDuke> except those don't actually check multiple bits "at once", they still perform multiple stat calls
[02:30] <japhb> Lots of stuff with filesystem atomicity tricks will only work if there are no implicit caching.
[02:30] <japhb> I meant the API
[02:31] <japhb> As in, we designed a partial, limited API that *could* do a single stat call, but there are lots of ways you'd want to look at a single stat structure that those don't cover.
[02:31] <japhb> *a single stat call for very particular combinations
[02:31] <MasterDuke> sure, but i'm not entirely happy about offering the api when we don't actually do what we say/imply we're doing
[02:31] <japhb> Oh totally agreed with that.
[02:32] <MasterDuke> huh. i've done a bunch of Perl, but didn't know about _
[02:33] <japhb> Probably not exactly easy to search for ....
[02:34] <MasterDuke> we could say you have to be explicit about caching. but if 99.9% of the users/use-cases would want it...maybe it should be the default? (of course, maybe it's closer to 60%, which isn't so compelling)
[02:42] <japhb> Whatever we do, it should be as easy as we can manage to reason about it, because screwing up handling of file permissions and operations seems to be an evergreen class of security bugs.
[03:03] <MasterDuke> afk, but thanks all for the discussion (and others can feel free to chime in). still haven't really made any changes to rakudo yet, but getting a clearer picture of what i think i want to do
[03:30] *** linkable6 left
[03:30] *** evalable6 left
[03:31] *** linkable6 joined
[03:33] *** evalable6 joined
[04:33] *** bloatable6 left
[04:33] *** statisfiable6 left
[04:33] *** greppable6 left
[04:33] *** evalable6 left
[04:33] *** linkable6 left
[04:33] *** committable6 left
[04:33] *** reportable6 left
[04:33] *** bisectable6 left
[04:33] *** sourceable6 left
[04:33] *** coverable6 left
[04:33] *** quotable6 left
[04:33] *** squashable6 left
[04:33] *** releasable6 left
[04:33] *** tellable6 left
[04:33] *** notable6 left
[04:33] *** nativecallable6 left
[04:33] *** unicodable6 left
[04:33] *** benchable6 left
[04:33] *** shareable6 left
[04:33] *** shareable6 joined
[04:33] *** linkable6 joined
[04:33] *** benchable6 joined
[04:33] *** bloatable6 joined
[04:34] *** sourceable6 joined
[04:34] *** releasable6 joined
[04:34] *** reportable6 joined
[04:34] *** coverable6 joined
[04:34] *** unicodable6 joined
[04:34] *** quotable6 joined
[04:34] *** committable6 joined
[04:34] *** tellable6 joined
[04:34] *** bisectable6 joined
[04:34] *** greppable6 joined
[04:35] *** squashable6 joined
[04:35] *** statisfiable6 joined
[04:35] *** nativecallable6 joined
[04:36] *** evalable6 joined
[04:36] *** notable6 joined
[05:02] *** squashable6 left
[05:04] *** squashable6 joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[08:45] *** sena_kun joined
[10:21] <Geth> ¦ rakudo/main: d520abb7f5 | (Elizabeth Mattijsen)++ | 2 files
[10:21] <Geth> ¦ rakudo/main: RakuAST: handle C<> / V<> / <> better
[10:21] <Geth> ¦ rakudo/main: 
[10:21] <Geth> ¦ rakudo/main: - fix C<> / V<> handling if they were *not* the outer markup code
[10:21] <Geth> ¦ rakudo/main: - flatten letterless markup (aka any balanced  <foo> inside a < >)
[10:21] <Geth> ¦ rakudo/main:   at parse time, making it no longer visible to renderers (as it
[10:21] <Geth> ¦ rakudo/main:   probably should have been from the start).
[10:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d520abb7f5
[10:36] <Geth> ¦ roast: be855d47a6 | (Elizabeth Mattijsen)++ | S26-documentation/08-formattingcodes.t
[10:36] <Geth> ¦ roast: Fix faulty C<> rendering test
[10:36] <Geth> ¦ roast: 
[10:36] <Geth> ¦ roast: C<> means verbatim semantics, so leading spaces *should* be in there.
[10:36] <Geth> ¦ roast: This is fixed with RakuAST
[10:36] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/be855d47a6
[10:49] *** evalable6 left
[10:49] *** linkable6 left
[10:49] *** evalable6 joined
[10:49] *** linkable6 joined
[10:55] <Geth> ¦ rakudo/main: f0be6ea866 | (Elizabeth Mattijsen)++ | src/core.c/Version.pm6
[10:55] <Geth> ¦ rakudo/main: Small shortcut for uninterpretable versions
[10:55] <Geth> ¦ rakudo/main: 
[10:55] <Geth> ¦ rakudo/main: As Version.new is the same as $v
[10:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f0be6ea866
[11:05] <Geth> ¦ rakudo/main: 1b764648e8 | (Elizabeth Mattijsen)++ | src/core.c/Version.pm6
[11:05] <Geth> ¦ rakudo/main: Dehug closing parentheses
[11:05] <Geth> ¦ rakudo/main: 
[11:05] <Geth> ¦ rakudo/main: No changes, but hopefully a better readable diff with future changes
[11:05] <Geth> ¦ rakudo/main: to the Version logic
[11:05] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1b764648e8
[11:31] <Geth> ¦ rakudo/main: 4f07e0e1a9 | (Elizabeth Mattijsen)++ | 2 files
[11:31] <Geth> ¦ rakudo/main: Remove Version $!whatever attribute
[11:31] <Geth> ¦ rakudo/main: 
[11:31] <Geth> ¦ rakudo/main: - not documented
[11:31] <Geth> ¦ rakudo/main: - not tested
[11:31] <Geth> ¦ rakudo/main: - not used
[11:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4f07e0e1a9
[11:39] <ugexe> i think thats breaking the api
[11:40] <lizmat> ah>
[11:40] <lizmat> ?
[11:40] <ugexe> there used to be a Version.new candidate with 4 positional arguments. now there is not
[11:41] <ugexe> i'd be surprised if anyone was using that candidate, but we shouldn't assume it isn't used just because it isn't used in the core
[11:41] <lizmat> oddly, no tests were hurt in that commit
[11:41] <lizmat> but I will add it back as a non-functional
[11:41] <ugexe> did it not function before?
[11:42] <lizmat> it was stored in the object, but the attribute wasn't used anywhere
[11:42] <lizmat> at least not in the core
[11:42] <lizmat> and was not documented
[11:42] <lizmat> neither was the 4 positional .new
[11:44] <ugexe> if it wasn't working then it is a little more reasonable to break the api
[11:45] <lizmat> I'll add it back in just in case
[11:45] <lizmat> ugexe++ for the spot
[11:47] <ugexe> it looks like Version used to have a method whatever() { nqp::hllbool($!whatever) }
[11:48] <ugexe> oh right, that was removed in that commit as well
[11:48] <lizmat> I guess I need to add that back again as well then
[11:48] <ugexe> removing the whatever method is probably more likely to break things 
[11:50] <ugexe> m: say (v1.0).whatever; say (v1.0).plus; say (v1.0.*).whatever; # someone might use something like this to detect if a version if a range or not
[11:50] <camelia> rakudo-moar 1b764648e: OUTPUT: «False␤False␤True␤»
[11:50] <lizmat> yeah... 
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:44] <Geth> ¦ rakudo/main: ea4912ec79 | (Elizabeth Mattijsen)++ | src/core.c/Version.pm6
[12:44] <Geth> ¦ rakudo/main: Restore Version.whatever
[12:44] <Geth> ¦ rakudo/main: 
[12:44] <Geth> ¦ rakudo/main: - add the optional positional arg back in, without any function
[12:44] <Geth> ¦ rakudo/main: - add method whatever back in, but make it lazy by letting it look
[12:44] <Geth> ¦ rakudo/main:   at the parts and return True if any of the parts is Whatever
[12:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ea4912ec79
[12:54] <Geth> ¦ rakudo/main: 1045f1b292 | (Elizabeth Mattijsen)++ | src/core.c/Version.pm6
[12:54] <Geth> ¦ rakudo/main: Don't store a Whatever instance, but a type object
[12:54] <Geth> ¦ rakudo/main: 
[12:54] <Geth> ¦ rakudo/main: * is a Whatever.new.  By storing a Whatever type object, we can
[12:54] <Geth> ¦ rakudo/main: simplify the test in .whatever to a =:= comparison
[12:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1045f1b292
[13:08] <Geth> ¦ rakudo/main: 69bb5ea327 | (Elizabeth Mattijsen)++ | src/core.c/Version.pm6
[13:08] <Geth> ¦ rakudo/main: Make Version.ACCEPTS a bit faster
[13:08] <Geth> ¦ rakudo/main: 
[13:08] <Geth> ¦ rakudo/main: By using =:= comparisons for Whatever
[13:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/69bb5ea327
[13:13] *** jgaz left
[13:20] *** jgaz joined
[14:54] *** squashable6 left
[14:57] *** squashable6 joined
[16:08] *** linkable6 left
[16:08] *** evalable6 left
[16:09] *** evalable6 joined
[16:10] *** linkable6 joined
[17:02] <Geth> ¦ rakudo/main: 6f8bb0a346 | (Elizabeth Mattijsen)++ | src/core.c/Version.pm6
[17:02] <Geth> ¦ rakudo/main: NQPify Version.ACCEPTS
[17:02] <Geth> ¦ rakudo/main: 
[17:02] <Geth> ¦ rakudo/main: For speed because it is used a lot, and will get to do a bit more
[17:02] <Geth> ¦ rakudo/main: soon.
[17:02] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6f8bb0a346
[17:11] <timo> i asked nine recently how there can be a race condition in the exprjit and now i rememeber what he meant, this is about not being able to write access to something in a way that is compatible with some kind of atomic operation we need
[17:11] <timo> so it's not that the exprjit compiler has a race condition in it, it's that it generates code for a specific situation that is racy
[17:32] *** linkable6 left
[17:32] *** evalable6 left
[17:34] *** evalable6 joined
[17:35] *** linkable6 joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:27] <Geth> ¦ rakudo/main: 73d07b4b58 | (Elizabeth Mattijsen)++ | src/core.c/Version.pm6
[18:27] <Geth> ¦ rakudo/main: Add support for Version.new("1,2,3-")
[18:27] <Geth> ¦ rakudo/main: 
[18:27] <Geth> ¦ rakudo/main: This adds support for Version objects that will accept any Version
[18:27] <Geth> ¦ rakudo/main: equal or **before** a given Version object.
[18:27] <Geth> ¦ rakudo/main: 
[18:27] <Geth> ¦ rakudo/main:     say Version.new("1.2.3") ~~ Version.new("1.2.4-");  # True
[18:27] <Geth> ¦ rakudo/main:     say Version.new("1.2.4") ~~ Version.new("1.2.4-");  # True
[18:27] <Geth> ¦ rakudo/main: <…commit message has 19 more lines…>
[18:27] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/73d07b4b58
[18:38] <nine> timo: right
[18:42] <Geth> ¦ rakudo/main: d37e6e8315 | (Elizabeth Mattijsen)++ | src/core.c/Version.pm6
[18:42] <Geth> ¦ rakudo/main: Make v1.2 eqv v1.2.0.0.0  True
[18:42] <Geth> ¦ rakudo/main: 
[18:42] <Geth> ¦ rakudo/main: As originally envisioned and TODO tested for
[18:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d37e6e8315
[18:43] <Geth> ¦ roast: e7385eac9b | (Elizabeth Mattijsen)++ | S02-literals/version.t
[18:43] <Geth> ¦ roast: Untodo v1.2 eqv v.1.2.0.0.0 tests
[18:43] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/e7385eac9b
[18:52] <Geth> ¦ rakudo/main: a04661369b | (Elizabeth Mattijsen)++ | src/Raku/Grammar.nqp
[18:52] <Geth> ¦ rakudo/main: RakuAST: add support for v1.2-
[18:52] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a04661369b
[19:05] <Geth> ¦ roast/master: 5 commits pushed by (Elizabeth Mattijsen)++
[19:05] <Geth> ¦ roast/master: 75042fde10 | * (create 6.d/S02-literals/version.t)
[19:05] <Geth> ¦ roast/master: 53131ba5a3 | * (keep S02-literals/version.t)
[19:05] <Geth> ¦ roast/master: cc0b1dbfa5 | * (merge)
[19:05] <Geth> ¦ roast/master: 303abf8bd5 | Copied (with git history):
[19:05] <Geth> ¦ roast/master: 03306d66ad | Copy literal version tests to 6.d section
[19:05] <Geth> ¦ roast/master: review: https://github.com/Raku/roast/compare/e7385eac9b5b...03306d66ad89
[19:10] <Geth> ¦ roast: 5f971928b5 | (Elizabeth Mattijsen)++ | S02-literals/version.t
[19:10] <Geth> ¦ roast: RakuAST: add tests for v1.2-
[19:10] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/5f971928b5
[20:15] *** Voldenet_ joined
[20:16] *** Voldenet left
[20:16] *** Voldenet_ is now known as Voldenet
[21:17] *** Voldenet_ joined
[21:17] *** Voldenet left
[21:17] *** Voldenet_ is now known as Voldenet
[21:21] *** sena_kun left
[23:35] *** Util joined
