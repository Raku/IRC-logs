[00:12] <MasterDuke> ab5tract: but isn't that what the GC is for? to handle stuff that's thrown away so it doesn't leak?

[07:03] <ab5tract> MasterDuke: yes, but why does it have more work to do on later iterations than early iterations if each iteration has ~X items to collect?

[07:11] <japhb> ab5tract: Haven't looked at your code yet, but one thing that would make later GC iterations take longer is if something was leaking from the nursery to the older GC generation.  GC runs usually go a series of short-ish nursery-only runs, followed by a longer "full" GC, which includes the entire older generation.  If that older generation grows, it will need to do more work every GC cycle.

[07:12] <ab5tract> Also, I would expect splice calls to automatically  reuse the continuous memory segments of an array under the hood by shifting memory contents left and leaving some threshold length of free slots at the end, instead of actually re-shaping each time. apparently this should be cheaper 

[07:17] <ab5tract> *this should be cheaper according to Bjarne Stroustrap

[07:17] <ab5tract> https://www.youtube.com/watch?v=YQs6IC-vgmo

[07:22] <ab5tract> japhb: thanks for the pointers! ;) 

[07:33] <ab5tract> japhb: looks like you were correct. the arrays weren't as bounded as I thought.

[08:20] *** MasterDuke left
[09:06] *** sena_kun joined
[09:38] *** Nemokosch joined
[09:38] *** Nemokosch left
[11:31] *** vrurg_ left
[12:31] <ab5tract> that moment when you realize an unless should have been an if

[14:04] *** Altai-man joined
[14:04] *** sena_kun left
[14:09] *** vrurg joined
[15:47] <japhb> D'oh

[19:40] *** kawaii left
[19:41] *** kawaii joined
[19:49] <ab5tract> conclusion from all that: there is nothing wrong with the approach I was taking, my code had a subtle bug which meant compaction was never actually running, thus the arrays weren't being spliced and objects were leaking into the old generation pool (japhb++)

[19:51] <ab5tract> Raku's GC can handle keeping up with 59fps with the number of objects the code is splicing

[19:52] <discord-raku-bot> <.vushu> A good GC benchmark üòÉ

[20:15] <discord-raku-bot> <.vushu> btw if I want to contribute to rakudo what is the recommended step to take?

[20:20] <[Coke]> https://raku.org/community/ - two flavors of getting involved.

[20:32] <discord-raku-bot> <.vushu> Thanks I will take a look at it.

[21:28] <ab5tract> .vushu: I tried to create a bit of an onramp to contributing to RakuAST, which is the current rewriting of the compiler frontend: https://www.youtube.com/watch?v=pzLOZByxNpc

[21:34] <discord-raku-bot> <.vushu> .ab5tract ah nice thanks I will definitely take a look at this! üòä I began developing interest in compilers and wan't to contribute to Raku, since the language began to grow on me.

[21:37] <ab5tract> awesome! you might find this enlightening: https://github.com/edumentab/rakudo-and-nqp-internals-course

[21:37] <ab5tract> a bit old but still very relevant

[21:39] <discord-raku-bot> <.vushu> Cool I will add it to my learning curriculum üòÄ

[21:39] <ab5tract> enjoy!

[21:40] <discord-raku-bot> <.vushu> Will do! üëç

[23:09] *** Altai-man left
