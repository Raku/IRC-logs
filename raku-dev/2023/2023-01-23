[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:01] *** tellable6 left
[01:01] *** quotable6 left
[01:01] *** nativecallable6 left
[01:01] *** shareable6 left
[01:01] *** statisfiable6 left
[01:01] *** linkable6 left
[01:01] *** committable6 left
[01:01] *** squashable6 left
[01:01] *** sourceable6 left
[01:01] *** coverable6 left
[01:01] *** releasable6 left
[01:01] *** benchable6 left
[01:01] *** evalable6 left
[01:01] *** unicodable6 left
[01:01] *** bisectable6 left
[01:01] *** greppable6 left
[01:01] *** reportable6 left
[01:01] *** notable6 left
[01:01] *** bloatable6 left
[01:02] *** unicodable6 joined
[01:02] *** bloatable6 joined
[01:02] *** squashable6 joined
[01:02] *** quotable6 joined
[01:02] *** coverable6 joined
[01:03] *** releasable6 joined
[01:03] *** shareable6 joined
[01:03] *** committable6 joined
[01:03] *** benchable6 joined
[01:03] *** tellable6 joined
[01:03] *** notable6 joined
[01:03] *** sourceable6 joined
[01:03] *** linkable6 joined
[01:04] *** bisectable6 joined
[01:04] *** greppable6 joined
[01:04] *** nativecallable6 joined
[01:04] *** reportable6 joined
[01:04] *** statisfiable6 joined
[01:04] *** evalable6 joined
[02:09] *** Nemokosch joined
[02:10] <Nemokosch> bisectable6: use Test; throws-like 'Exception.new.throw', 'Exception';
[02:10] <bisectable6> Nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight
[02:10] <tellable6> 2023-01-19T02:52:45Z #raku <PipStuart> Nemokosch: Sorry I missed the "c" in your nick twice. My oversight.
[02:10] <tellable6> 2023-01-19T10:19:37Z #raku <jjatria> Nemokosch: what's up?
[02:10] <tellable6> 2023-01-21T18:37:44Z #raku <coleman> Nemokosch: one small org that has nice docs (in my opinion) is https://voidlinux.org/
[02:10] <tellable6> 2023-01-22T16:04:41Z #raku <Xliff> Nemokosch: Got it working. Had to do .say for $a[] where A does Iterable
[02:10] <tellable6> 2023-01-22T20:28:38Z #raku-dev <Xliff> Nemokosch: OK, so it looks like what I need is here...
[02:11] <bisectable6> Nemokosch, More than 4 changes to bisect, please try a narrower range like old=2022.12 new=HEAD
[02:11] <bisectable6> Nemokosch, Output on all releases: https://gist.github.com/7806ed6252ca5861e6250dc35d720483
[02:15] *** Nemokosch left
[02:15] *** codesections left
[02:15] *** codesections joined
[05:05] *** dogbert11 joined
[05:08] *** dogbert17 left
[05:29] *** squashable6 left
[05:31] *** squashable6 joined
[05:45] *** dogbert11 left
[05:46] *** dogbert11 joined
[05:47] *** dogbert17 joined
[05:51] *** dogbert11 left
[05:54] *** dogbert17 left
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:03] *** dogbert17 joined
[06:25] *** Xliff joined
[06:26] *** Xliff joined
[06:30] *** dogbert11 joined
[06:34] *** dogbert17 left
[06:45] *** dogbert11 left
[06:46] *** dogbert11 joined
[06:59] *** dogbert11 left
[06:59] *** dogbert11 joined
[07:06] *** dogbert11 left
[07:09] *** dogbert11 joined
[07:14] *** epony joined
[07:15] *** dogbert17 joined
[07:19] *** dogbert11 left
[07:21] *** dogbert17 left
[07:22] *** dogbert17 joined
[07:46] *** sena_kun joined
[07:55] *** Xliff left
[08:22] <nine> > rakudo -e 'dd << "" "" a b >>;'
[08:22] <nine> (IntStr.new(0, ""), IntStr.new(0, ""), "a", "b")
[08:22] <nine> > RAKUDO_RAKUAST=1 ./rakudo-m -e 'dd << "" "" a b >>;'
[08:22] <nine> ("a", "b")
[08:22] <nine> ^^^ this is at least one of Telemetry's problems
[09:00] *** MitarashiDango[m left
[09:40] *** sena_kun left
[09:42] *** sena_kun joined
[09:52] *** sena_kun left
[10:04] <lizmat> m: say Q| << "" "" a b >> |.AST.DEPARSE
[10:04] <camelia> rakudo-moar ac282b4fb: OUTPUT: «<< "" "" a b >>␤␤»
[10:05] <lizmat> at least it deparses ok
[10:05] <lizmat> feels like the QASTing of QuoteWordsAtom is wrong then
[10:17] <nine> Yes, I only implemented as much as that failing test required. Now we know a test that requires more
[10:18] <lizmat> indeed...  but first the weekly  :-)
[11:11] *** ab5tract joined
[11:16] <SmokeMachine> m: say "bla".AST
[11:16] <camelia> rakudo-moar ac282b4fb: OUTPUT: «No exception handler located for catch␤   at SETTING::src/core.c/Exception.pm6:570  (/home/camelia/rakudo-m-inst-2/share/perl6/runtime/CORE.c.setting.moarvm:print_exception)␤ from SETTING::src/core.c/Exception.pm6:626  (/home/camelia/rakudo-m-inst…»
[11:16] <SmokeMachine> m: say Q|"bla"|.AST
[11:16] <camelia> rakudo-moar ac282b4fb: OUTPUT: «RakuAST::CompUnit.new␤»
[11:17] <nine> m: say Q|"bla"|.AST.dump
[11:17] <camelia> rakudo-moar ac282b4fb: OUTPUT: «CompUnit 𝄞 /home/camelia/EVAL_0:1 ⎡\"bla\"⎤␤  StatementList 𝄞 /home/camelia/EVAL_0:1 ⎡\"bla\"⎤␤    Statement::Expression ▪𝄞 /home/camelia/EVAL_0:1 ⎡\"bla\"⎤␤      QuotedString  ⎡bla⎤␤        StrLiteral␤␤»
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[13:45] <lizmat> I wonder how bad 10d73ada49 is for performance
[13:58] *** linkable6 left
[13:58] *** evalable6 left
[13:58] *** evalable6 joined
[14:00] *** linkable6 joined
[14:00] *** Xliff joined
[14:06] <nine> My guess: not great, not terrible
[14:13] <Xliff> m: say Q|"sub (99) { }"|.AST.dump
[14:13] <camelia> rakudo-moar ac282b4fb: OUTPUT: «CompUnit 𝄞 /home/camelia/EVAL_0:1 ⎡\"sub (99) { }\"⎤␤  StatementList 𝄞 /home/camelia/EVAL_0:1 ⎡\"sub (99) { }\"⎤␤    Statement::Expression ▪𝄞 /home/camelia/EVAL_0:1 ⎡\"sub (99) { }\"⎤␤      QuotedString  ⎡sub (99) { }⎤…»
[14:13] <Xliff> m: say Q|sub (99) { }|.AST.dump
[14:13] <camelia> rakudo-moar ac282b4fb: OUTPUT: «CompUnit 𝄞 /home/camelia/EVAL_0:1 ⎡sub (99) { }⎤␤  StatementList 𝄞 /home/camelia/EVAL_0:1 ⎡sub (99) { }⎤␤    Statement::Expression ▪𝄞 /home/camelia/EVAL_0:1 ⎡sub (99) { }⎤␤      Sub 𝄞 /home/camelia/EVAL_0:1 ⎡ (99) { }…»
[14:14] <Xliff> Parameter  ⎡99⎤
[14:14] <Xliff>             Type::Simple
[14:15] <Xliff> Do we have that RakuAST node?
[14:25] <lizmat> yes, the Type::Simple is an Int in that case
[14:25] <lizmat> the 99 is encoded in a "where" statement that the deparsing of RakuAST::Parameter doesn't show yet
[14:26] <Xliff> So what would the creation of that parameter look like?
[14:26] <Xliff> RakuAST::Parameter.new( where => RakuAST::IntLiteral.new(99) ) # ??
[14:27] <Xliff> lizmat: Also, if the deparsing doesn't work, does that mean the QAST isn't being emitted as well?
[14:27] <lizmat> nope, deparsing is separate from taht
[14:27] <lizmat> *that
[14:27] <nine> Look at what Raku::Actions does
[14:28] <Xliff> nine: Thanks. Will investigate as $dayJob allows.
[14:28] <Xliff> This is actually FOR $dayJob, but I am juggling multiple tasks ATM
[14:29] <Geth> ¦ nqp/main: 54518e913a | (Vadim Belman)++ | src/HLL/Compiler.nqp
[14:29] <Geth> ¦ nqp/main: Provide current compiler via $*HLL-COMPILER
[14:29] <Geth> ¦ nqp/main: 
[14:29] <Geth> ¦ nqp/main: Beneficial for concurrent compilations.
[14:29] <Geth> ¦ nqp/main: 
[14:29] <Geth> ¦ nqp/main: The symbol is only available at compilation stage.
[14:29] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/54518e913a
[14:29] <Geth> ¦ nqp/main: bbe28e24de | (Vadim Belman)++ (committed using GitHub Web editor) | src/HLL/Compiler.nqp
[14:29] <Geth> ¦ nqp/main: Merge pull request #793 from vrurg/rakuast-lang-version
[14:29] <Geth> ¦ nqp/main: 
[14:29] <Geth> ¦ nqp/main: Provide current compiler via $*HLL-COMPILER
[14:29] <Geth> ¦ nqp/main: review: https://github.com/Raku/nqp/commit/bbe28e24de
[14:29] * lizmat scratches a PR from the weekly  :-)
[14:29] <lizmat> notable6: weekly
[14:29] <notable6> lizmat, No notes for “weekly”
[14:30] <lizmat> Xliff: the where argument needs to be a RakuAST::Block
[14:30] <vrurg> lizmat: I'm considering merging the main PR too. Just wanna it to pass CI again.
[14:31] <lizmat> vrurg: go ahead, that was in last week's weekly
[14:32] <vrurg> lizmat: you broke the plot! :)
[14:33] <lizmat> vrurg: wouldn't you need to bump NQP first ?
[14:33] <vrurg> It's a part of the PR already.
[14:34] <Xliff> lizmat: Did you get my gist for the weekly?
[14:34] <nine> lizmat: the 99 is not actually a where. It's a post constraint like where, but it's just a value on the Parameter. A where doesn't have to be a block. It needs to be an expression and will be thunked (unless it's already a code object)
[14:34] <lizmat> well, it is codegenned currently as a block with 99.ACCEPTS.Bool as the body
[14:35] <lizmat> ACCEPTS($_)
[14:36] <nine>     │     │     - QAST::ParamTypeCheck 
[14:36] <nine>     │     │       - QAST::Op(if) 
[14:36] <nine>     │     │         - QAST::Op(isconcrete) 
[14:36] <nine>     │     │           - QAST::Var(local __lowered_param_1) 
[14:36] <nine>     │     │         - QAST::Op(iseq_I) 
[14:36] <nine>     │     │           - QAST::WVal(Int) 
[14:36] <nine>     │     │           - QAST::Op(decont) 
[14:36] <nine>     │     │             - QAST::Var(local __lowered_param_1)
[14:36] <lizmat> ok, it produces a RakuAST::node with 99.ACCEPTS($_).Bool in it
[14:36] <lizmat> how that gets QASTisized, I don't know  :)
[14:37] <Xliff> lizmat: And that goes as :$where?
[14:37] <nine> lizmat: no, that would be the case for sub foo($i where 99)
[14:38] <lizmat> hmmm... maybe I got it wrong, it was late last night when I looked into it
[14:38] <Xliff> And not to confuse things, but is RakuAST::Parameter.new( value => 99 ) a valid thing, or is that how this is supposed to be done?
[14:38] <Xliff> $!value also goes into @!post_constraints
[14:49] <lizmat> Xliff: re your script, I won't use it in this week's Weekly, but I will use / refer to it in a RakuAST blog post that I'll be writing this week
[15:06] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/01/23/2023-04-thank-you-jj/
[15:07] <nine> lizmat++
[15:12] <Geth> ¦ roast/rakuast-lang-version: 9bb37aa94b | (Vadim Belman)++ | S14-roles/versioning.t
[15:12] <Geth> ¦ roast/rakuast-lang-version: Stringify language revision from the CORE
[15:12] <Geth> ¦ roast/rakuast-lang-version: 
[15:12] <Geth> ¦ roast/rakuast-lang-version: This doesn't affect older compilers but makes the spectesting happy with
[15:12] <Geth> ¦ roast/rakuast-lang-version: rakudo/rakudo#5157
[15:12] <Geth> ¦ roast/rakuast-lang-version: review: https://github.com/Raku/roast/commit/9bb37aa94b
[15:12] *** epony left
[15:12] <Geth> ¦ roast: vrurg++ created pull request #827: Stringify language revision from the CORE
[15:12] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/827
[15:13] *** epony joined
[15:13] *** linkable6 left
[15:13] *** linkable6 joined
[15:15] <Geth> ¦ roast/rakuast-lang-version: af3c8393e1 | (Vadim Belman)++ | S14-roles/versioning.t
[15:15] <Geth> ¦ roast/rakuast-lang-version: Stringify language revision
[15:15] <Geth> ¦ roast/rakuast-lang-version: 
[15:15] <Geth> ¦ roast/rakuast-lang-version: This doesn't affect older compilers but makes the spectesting happy with
[15:15] <Geth> ¦ roast/rakuast-lang-version: rakudo/rakudo#5157
[15:15] <Geth> ¦ roast/rakuast-lang-version: review: https://github.com/Raku/roast/commit/af3c8393e1
[15:16] *** linkable6 left
[15:18] *** Geth left
[15:18] *** Geth joined
[15:18] *** linkable6 joined
[15:22] *** Geth left
[15:22] *** Geth joined
[15:23] <Geth> ¦ roast: af3c8393e1 | (Vadim Belman)++ | S14-roles/versioning.t
[15:23] <Geth> ¦ roast: Stringify language revision
[15:23] <Geth> ¦ roast: 
[15:23] <Geth> ¦ roast: This doesn't affect older compilers but makes the spectesting happy with
[15:23] <Geth> ¦ roast: rakudo/rakudo#5157
[15:23] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/af3c8393e1
[15:23] <Geth> ¦ roast: ae37898d98 | (Vadim Belman)++ (committed using GitHub Web editor) | S14-roles/versioning.t
[15:23] <Geth> ¦ roast: Merge pull request #827 from Raku/rakuast-lang-version
[15:23] <Geth> ¦ roast: 
[15:23] <Geth> ¦ roast: Stringify language revision
[15:23] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/ae37898d98
[15:24] *** linkable6 left
[15:24] *** linkable6 joined
[15:25] <Xliff> lizmat: Fine.
[15:37] <|Tux|> ===SORRY!=== Error while compiling /pro/3gl/CPAN/Text-CSV6/csv-ip5xs.pl
[15:37] <|Tux|> Too many positionals passed; expected 1 argument but got 2
[15:37] <|Tux|> at /pro/3gl/CPAN/Text-CSV6/csv-ip5xs.pl:4
[15:38] <|Tux|> Is use Text::CSV_XS:from<Perl5> broken?
[15:40] <nine> [Tux]: my guess, mismatch between rakudo and Inline::Perl5 version. Too new Inline::Perl5 for that rakudo
[15:41] <nine> There was a backwards incompatible change in rakudo: https://github.com/niner/Inline-Perl5/commit/a164dd11d174817d93c8c266d6b89a7d449bec7a
[15:41] <nine> Oh, it's the other way round: too old Inline::Perl5 for that Rakudo version
[16:19] <|Tux|> Looks like that indeed. I was trying a second box
[16:19] <|Tux|> Here' the usual results
[16:19] <|Tux|> Rakudo v2022.12-1-gd52342eb0 (v6.d) on MoarVM 2022.12-15-g6b456a6c0
[16:19] <|Tux|> csv-test-xs-20      0.402 -  0.409
[16:19] <|Tux|> test-t --race       0.830 -  0.904
[16:19] <|Tux|> csv-ip5xs           0.832 -  0.850
[16:19] <|Tux|> test-t              1.421 -  1.434
[16:19] <|Tux|> csv-parser          3.798 -  4.019
[16:19] <|Tux|> csv-ip5xs-20        5.356 -  5.482
[16:19] <|Tux|> test-t-20 --race    6.485 -  6.718
[16:20] <|Tux|> test                6.442 -  7.128
[16:20] <|Tux|> test-t-20          21.325 - 22.296
[16:20] *** NemokoschKiwi joined
[16:34] *** NemokoschKiwi left
[17:12] <Geth> ¦ rakudo/main: 5234e0bbab | (Elizabeth Mattijsen)++ | src/Raku/ast/signature.rakumod
[17:12] <Geth> ¦ rakudo/main: Normalise RakuAST class specifications (8/N)
[17:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5234e0bbab
[17:15] <nine> It's amazing how far we got when just about nothing about the current quote word implmentation is how it's supposed to be
[17:23] <lizmat> well, if there are insufficient tests  :-)
[17:57] <Geth> ¦ rakudo/main: 1ec15a8dff | (Stefan Seifert)++ | src/Raku/ast/literals.rakumod
[17:57] <Geth> ¦ rakudo/main: RakuAST: fix quotewords postprocessing stumbling over nqp::join
[17:57] <Geth> ¦ rakudo/main: 
[17:57] <Geth> ¦ rakudo/main: The code lifted from the old compiler frontend expected string parts to
[17:57] <Geth> ¦ rakudo/main: always be concatenated via infix:<~> while the code generated by the RakuAST
[17:57] <Geth> ¦ rakudo/main: frontend generates nqp::join('', nqp::list_s(...)). The QAST walker
[17:57] <Geth> ¦ rakudo/main: needed to be taught about this, too.
[17:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1ec15a8dff
[17:57] <Geth> ¦ rakudo/main: 70a50d512a | (Stefan Seifert)++ | src/Raku/ast/literals.rakumod
[17:57] <Geth> ¦ rakudo/main: RakuAST: actually mark quote word atoms as such
[17:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/70a50d512a
[17:57] <Geth> ¦ rakudo/main: 8c64a479bc | (Stefan Seifert)++ | src/Raku/ast/literals.rakumod
[17:57] *** ab5tract left
[17:57] <Geth> ¦ rakudo/main: RakuAST: fix quotewords postprocessing stumbling over nqp::concat
[17:57] <Geth> ¦ rakudo/main: 
[17:57] <Geth> ¦ rakudo/main: The code lifted from the old compiler frontend expected string parts to
[17:57] <Geth> ¦ rakudo/main: always be concatenated via infix:<~> while the code generated by the RakuAST
[17:57] <Geth> ¦ rakudo/main: frontend generates nqp::concat if there's just 2 parts. The QAST walker
[17:57] <Geth> ¦ rakudo/main: needed to be taught about this, too.
[17:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8c64a479bc
[18:00] <nine> Turns out it wasn't that hard after all
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:17] <Geth> ¦ rakudo/main: 49b4566e45 | (Stefan Seifert)++ | 2 files
[18:17] <Geth> ¦ rakudo/main: RakuAST: fix initialization of Mu typed variables failing type checks
[18:17] <Geth> ¦ rakudo/main: 
[18:17] <Geth> ¦ rakudo/main: A Mu typed variable should accept _any_ type at all, including VM types
[18:17] <Geth> ¦ rakudo/main: that are actually outside the Raku type hierarchy, so we must not emit
[18:17] <Geth> ¦ rakudo/main: any type checking code for such variables.
[18:17] <Geth> ¦ rakudo/main: 
[18:17] <Geth> ¦ rakudo/main: Fixes my Mu \foo = nqp::list_i;
[18:17] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/49b4566e45
[18:17] <Xliff> Is there a way to run a string through the Raku parser?
[18:41] *** notna joined
[18:56] <lizmat> that's what the Str.AST method does
[18:56] <lizmat> Xliff ^^
[18:59] <Xliff> OK, so... the parameter object for... "sub a ("me") { };" - Will look something like --> my $p = RakuAST::Parameter.new( :$value ); $p.set-type( RakuAST::Type::Simple.new('Str') );
[18:59] <Xliff> Where $value is "me"
[18:59] <lizmat> I'm not sure, atm...   looking into that as a matter of fact
[19:00] <lizmat> I think we shouldn't have to pass the type if a constant was given: the type should be derived from the given defined value
[19:01] <lizmat> that can only lead to discrepancies
[19:04] <Geth> ¦ rakudo/main: 2cffc13f02 | (Stefan Seifert)++ | src/Raku/ast/name.rakumod
[19:04] <Geth> ¦ rakudo/main: RakuAST: Fix package lookups on multi-part package names
[19:04] <Geth> ¦ rakudo/main: 
[19:04] <Geth> ¦ rakudo/main: When we are already given a lexical, that means that not just the first
[19:04] <Geth> ¦ rakudo/main: part of the name, but the full name has been resolved. So in this case
[19:04] <Geth> ¦ rakudo/main: we only have to slap an nqp::who in front and are done.
[19:04] <Geth> ¦ rakudo/main: 
[19:04] <Geth> ¦ rakudo/main: Fixes A::B::<C>
[19:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2cffc13f02
[19:05] <lizmat> 103 / 630 !
[19:08] <Xliff> lizmat: OK. That is from Raku::Actions, so I put it there.
[19:08] <Xliff> Value is also $!value, and I think it will need to be $.value
[19:09] <Xliff> Otherwise you can't deparse the example I just gave.
[19:09] <lizmat> yeah... working on the deparsing bit atm
[19:13] <nine> lizmat: your numbers are still with a non-RakuAST make test before the actual run, aren't they?
[19:13] <lizmat> yes
[19:20] <Geth> ¦ rakudo/main: 8589e80b18 | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod
[19:20] <Geth> ¦ rakudo/main: RakuAST: support currying of postcircumfixes on whatever
[19:20] <Geth> ¦ rakudo/main: 
[19:20] <Geth> ¦ rakudo/main: Fixes @foo.map: *[1]
[19:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8589e80b18
[19:36] <nine> nine@sphinx:~/rakudo (main =)> RAKUDO_RAKUAST=1 ./rakudo-m -e 'role Foo { method foo() { note $_ for <1 2> } }; class Bar does Foo { }; Bar.foo'
[19:36] <nine> (Any)
[19:36] <nine> Cannot map a List using 'Bool::True'
[19:37] <nine> Somehow applying that role to the class breaks the QAST for the for loop. Instead of the map getting passed a block with the loop body, it gets passed the loop body directly
[19:38] <nine>     │         │   │               - QAST::Op(callmethod map) 
[19:38] <nine>     │         │   │                 - QAST::Op(callmethod serial) 
[19:38] <nine>     │         │   │                   - QAST::Var(local for-list_1) 
[19:38] <nine>     │         │   │                 - QAST::Op(call &note) 
[19:38] <nine>     │         │   │                   - QAST::Var(lexical $_)
[19:48] *** Xliff left
[19:49] <nine> The cause is missing checktime effects on the role body
[19:52] * lizmat stops with looking at Parameter for today
[19:52] <lizmat> needs more grokking while not so tired
[20:19] *** notna left
[20:21] <Geth> ¦ rakudo/main: 0b0bce8962 | (Stefan Seifert)++ | src/Raku/ast/statements.rakumod
[20:21] <Geth> ¦ rakudo/main: RakuAST: fix bizarre miscompilations of role bodies
[20:21] <Geth> ¦ rakudo/main: 
[20:21] <Geth> ¦ rakudo/main: When roles are applied to classes within the same comp unit as they are
[20:21] <Geth> ¦ rakudo/main: declared, they need to be fully compiled as their bodies are run when
[20:21] <Geth> ¦ rakudo/main: the class is composed. However we only ran resolving, but did not apply
[20:21] <Geth> ¦ rakudo/main: check time effects, so we e.g. did not thunk for loop expressions.
[20:21] <Geth> ¦ rakudo/main: 
[20:21] <Geth> ¦ rakudo/main: It looks like check time effects should just not modify the AST, i.e. not
[20:21] <Geth> ¦ rakudo/main: try to thunk anything. That's better done as begin time effects as those
[20:21] <Geth> ¦ rakudo/main: are guaranteed to run only once. Not sure if this will hold, but for now
[20:21] <Geth> ¦ rakudo/main: it gets us further in the tests.
[20:21] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0b0bce8962
[20:21] <nine> 99 make test files!
[20:21] <lizmat> phah!   :-)
[20:22] <nine> Only one of the telemetry tests is still failing now
[20:23] <nine> Some exceptions were thrown in END blocks:\n  X::TypeCheck::Assignment: Type check failed for an element of \@columns; expected Positional but got Seq ((\"blahblah\",).Seq)\n      in block  at /home/nine/rakudo/lib/Telemetry.rakumod (Telemetry) line 833
[20:44] *** codesections left
[20:44] *** discord-raku-bot left
[20:44] *** discord-raku-bot joined
[20:44] *** codesections1 joined
[20:46] *** codesections1 is now known as codesections
[21:13] *** [Coke] left
[21:19] <nine> Ah, is copy is only implemented for scalars
[21:37] <Geth> ¦ rakudo/main: dfcb5f47a7 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod
[21:37] <Geth> ¦ rakudo/main: RakuAST: properly support is copy trait on @ and % parameters
[21:37] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dfcb5f47a7
[21:37] <nine> 100!
[22:02] *** NemokoschKiwi joined
[22:15] *** bisectable6 left
[22:15] *** bisectable6 joined
[22:37] <vrurg> nine: 🎉
[23:05] *** NemokoschKiwi left
