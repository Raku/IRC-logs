[00:19] <Geth> ¦ rakudo/main: 6 commits pushed by (Vadim Belman)++

[00:19] <Geth> ¦ rakudo/main: 8b800e020a | Fix return value of :delete on non-existent keys on a typed hash

[00:19] <Geth> ¦ rakudo/main: c0b19bec55 | Make use of $.what on X::Parameter::Default::TypeCheck

[00:19] <Geth> ¦ rakudo/main: 4b7a9bf653 | Remove redundant attribute

[00:19] <Geth> ¦ rakudo/main: d32b729a2a | More sensible exception on wrong type in attribute's `is default`

[00:19] <Geth> ¦ rakudo/main: c34d60b6a9 | Adjust error message

[00:19] <Geth> ¦ rakudo/main: 5e53e0294e | Merge pull request #5465 from vrurg/some-about-is-default

[00:19] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/compare/50bd91f08c05...5e53e0294ee5

[00:19] <Geth> ¦ roast: 51486a74b8 | (Vadim Belman)++ | S02-names/is_default.t

[00:19] <Geth> ¦ roast: Extend `is default` tests for hashes

[00:19] <Geth> ¦ roast: 

[00:19] <Geth> ¦ roast: Cover all variations of parameterization over key and value.

[00:19] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/51486a74b8

[00:19] <Geth> ¦ roast: 4fe0e7455f | (Vadim Belman)++ | S02-names/is_default.t

[00:19] <Geth> ¦ roast: Expect `X::TypeCheck::Attribute::Default`

[00:19] <Geth> ¦ roast: 

[00:19] <Geth> ¦ roast: It makes more sense with wrong type of value in `is default` for

[00:19] <Geth> ¦ roast: attributes.

[00:19] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/4fe0e7455f

[00:19] <Geth> ¦ roast: f1dd68cf67 | (Vadim Belman)++ (committed using GitHub Web editor) | S02-names/is_default.t

[00:19] <Geth> ¦ roast: Merge pull request #848 from vrurg/some-about-is-default

[00:19] <Geth> ¦ roast: 

[00:19] <Geth> ¦ roast: Improvements to `is default` tests for hashes

[00:19] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/f1dd68cf67

[00:50] <tbrowder__> m: echo $RAKUDO_MAX_THREADS

[00:50] <camelia> rakudo-moar 5e53e0294: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$RAKUDO_MAX_THREADS' is not declared.  Perhaps you forgot a␤'sub' if this was intended to be part of a signature?␤at <tmp>:1␤------> echo ⏏$RAKUDO_MAX_THREADS␤»

[00:50] <tbrowder__> m: ls

[00:50] <camelia> rakudo-moar 5e53e0294: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    ls used at line 1. Did you mean 'lc'?␤␤»

[00:51] <tbrowder__> m: say %*ENV<RAKUDO_MAX_THREADS>

[00:51] <camelia> rakudo-moar 5e53e0294: OUTPUT: «(Any)␤»

[00:52] <tbrowder__> m: say $*CPU

[00:52] <camelia> rakudo-moar 5e53e0294: OUTPUT: «Dynamic variable $*CPU not found␤  in block <unit> at <tmp> line 1␤␤»

[00:55] <tbrowder__> m: say $*KERNEL

[00:55] <camelia> rakudo-moar 5e53e0294: OUTPUT: «linux␤»

[00:56] <tbrowder__> say %*ENV

[00:56] <tbrowder__> m: say %*ENV

[00:56] <camelia> rakudo-moar 5e53e0294: OUTPUT: «{HOME => /home/camelia, INVOCATION_ID => b9079b9b59434c248895ea8fb3ed6faa, JOURNAL_STREAM => 8:9828585, LC_CTYPE => en_US.UTF-8, LOGNAME => camelia, ME => tbrowder__, PATH => /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin, PERL5LIB => /h…»

[01:03] <Geth> ¦ rakudo/main: f29cecfad1 | (Vadim Belman)++ | src/core.c/Exception.rakumod

[01:03] <Geth> ¦ rakudo/main: Fix X::Hash::Store::OddNumber message with undefined last element

[01:03] <Geth> ¦ rakudo/main: 

[01:03] <Geth> ¦ rakudo/main: First of all, the last element can be an undefined value and we better

[01:03] <Geth> ¦ rakudo/main: report it for ease of debugging. The current fix is incomplete with

[01:03] <Geth> ¦ rakudo/main: regard to `Mu` which is no less valid as an element than any other type

[01:03] <Geth> ¦ rakudo/main: object. But for now let's pretend that it's the least probable value to

[01:03] <Geth> ¦ rakudo/main: appear in this role.

[01:03] <Geth> ¦ rakudo/main: <…commit message has 7 more lines…>

[01:04] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f29cecfad1

[01:10] <tbrowder__> i may have found a Raku bug while testing vrurgs Test::Async. when RAKUDO_MAX_THREADS=16, test  150 hangs, regardless of number of cores = 8 or 16. i have not tested greater or lesser real cores yet.

[01:10] <tbrowder__> *test 160

[01:11] <vrurg> tbrowder__: this is not necessarily a Rakudo bug. More likely to be a Test::Async not expecting that few threads being available.

[01:11] <tellable6> 2023-11-16T16:46:54Z #raku-dev <tbrowder__> vrurg ^^^

[01:12] <vrurg> It's even more likely to be Test::Async.

[01:12] <tbrowder__> well having the number < or > 16 did not hang the test

[01:13] <tbrowder__> the RAKUDO_MAX_THREADS

[01:14] <tbrowder__> on both hosts, cores 8 and 16

[01:27] <vrurg> 8 did the trick on my side. It may depend on the number of CPU cores because when there is no TEST_JOBS in the environment Test::Async sets the number of jobs to cpu-cores - 2.

[01:27] <vrurg> And, BTW, using TEST_JOBS is generally a bad idea on my side...

[02:03] <tbrowder__> setting max to 8 hangs on mine too

[02:04] <tbrowder__> but max=24?

[02:06] <tbrowder__> no prob w/ 24

[02:06] <tbrowder__> weird

[02:16] <vrurg> tbrowder__: no, there is nothing weird here. It only means that there are not enough tasks to exhaust the thread pool. 

[02:16] *** sourceable6 left
[02:29] <tbrowder__> well, anyhow, i got yr JSON::Class installed ok.

[02:30] <tbrowder__> so, nothing to bug report about?

[02:30] <vrurg> A new version is to be published today. Finishing some, hopefully, last touches.

[02:31] <tbrowder__> ok, just another fun day in Rakuland!

[02:32] <vrurg> No, there is really no bug. I'm not sure if it worth spending time on a workaround for the problem as it would be another performance penalty applied.

[02:34] <vrurg> But enforcing the minimum pool size for this particular test definitely makes sense.

[03:57] *** tonyo left
[03:58] *** tonyo joined
[04:16] *** codesections left
[04:16] *** codesections joined
[04:28] *** hythm joined
[05:52] *** hythm left
[06:29] *** djinni` left
[06:39] *** djinni` joined
[08:23] *** [Tux] left
[09:12] *** japhb left
[09:12] *** japhb joined
[09:28] *** [Tux] joined
[09:52] *** sena_kun joined
[10:04] * [Tux] waves from new workstation. All upcoming timings should be based on the one I recently posted

[11:02] <[Tux]> Rakudo v2023.10-133-gf29cecfad (v6.d) on MoarVM 2023.10-10-g4aa9e7d35

[11:02] <[Tux]> csv-test-xs-20      0.140 -  0.140

[11:02] <[Tux]> csv-ip5xs           0.272 -  0.273

[11:02] <[Tux]> test-t --race       0.286 -  0.286

[11:02] <[Tux]> test-t              0.423 -  0.430

[11:02] <[Tux]> csv-ip5xs-20        1.114 -  1.150

[11:02] <[Tux]> test-t-20 --race    1.198 -  1.254

[11:02] <[Tux]> csv-parser          1.625 -  1.627

[11:02] <[Tux]> test                1.962 -  2.053

[11:02] <[Tux]> test-t-20           5.198 -  5.335

[12:08] *** sena_kun left
[12:30] <tbrowder__>  ref Test::Async and max threads of 8 and 16

[12:35] <tbrowder__> i tried inst on two other hosts, one with 24 cores and one with 32 cores. both had max threads seg at 16. when "zef install" started, zef fairly quickly reported "Testing [OK]..." for more than one of the 3 mods involved and then hung.

[12:39] <tbrowder__> after i removed the thread limit and retried installing, zef reported, serially, "Testing [OK]..." each dep and the JSON::Class. i'm not smart enough to understand the interplay here (concurrency hurts my brain), but this total behavior doesn't seem rational. why are 8 and 16 thread max magic?

[12:40] <tbrowder__> i took a brief look at raku core.c and saw "maxthreads // RAKUDO,.

[12:41] <tbrowder__> several places. wonder if core count is being interpreted correctly

[12:44] <tbrowder__> does zef react to

[12:45] <tbrowder__> does zef consider max threads?

[13:02] *** lucs left
[13:03] *** lucs joined
[13:08] <tbrowder__> maybe there ought to be some internal raku bounds on value of RAKUDO_MAX_THREADS based on /proc/cpuinfo

[13:13] <lizmat> tbrowder__: I think we consciously decided to not limit the value you specify with RAKUDO_MAX_THREADS: there may be reasons to have the value exceed available cores

[13:14] <lizmat> e.g. when a lot of waiting is done for (external) resources

[13:14] <lizmat> m: sub a(\self) { say self }; a 42

[13:14] <camelia> rakudo-moar f29cecfad: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤'self' used where no object is available␤at <tmp>:1␤------> sub a(\self) { say ⏏self }; a 42␤    expecting any of:␤        argument list␤        term␤»

[13:14] <lizmat> m: say Q|sub a(\self) { say self }; a 42|.AST.EVAL

[13:14] <camelia> rakudo-moar f29cecfad: OUTPUT: «42␤True␤»

[13:15] <lizmat> so, is this a bug we fixed in RakuAST?   Or is it NYI for the compilation error?

[13:21] <ugexe> there might be problems with testing and/or installing in parallel

[13:22] <ugexe> like if your test ends up loading multiple modules in parallel then it can potentially hit the 'module loading is not thread safe' issue

[13:23] <ugexe> when that manifests I usually see it as a segfault though. however sometimes i've seen it freeze

[13:25] <tbrowder__> lizmat: i was thinking more of some lower bound, 8 cores, no lower than, say, 16. but 16 and 8 are bad for some reason

[13:26] <lizmat> forcing a lower bound might cause more resource usage than the runner of the program wants?

[13:26] <tbrowder__> and maybe it should be an odd number.

[13:28] <tbrowder__> i dunno, but something doesn’t smell right.

[13:29] <ugexe> i would doubt a minimum number or even number of threads is the cause of an issue

[13:31] <ugexe> https://github.com/rakudo/rakudo/blob/f29cecfad1f37d87be740eb3f081d99a26e99842/src/core.c/ThreadPoolScheduler.rakumod#L18-L21

[13:31] <ugexe> looks like you can set one of those two ENV variables to get more information about what is happening with threads

[13:31] <tbrowder__> ok, thnx

[13:35] <tbrowder__> did you see my ? on resources?

[13:41] <tbrowder__> using META to get list of resources in a distro?

[13:42] <tbrowder__> otherwise i’m investigating Build to create a data module to provide that list.

[13:43] <tbrowder__> i want easy access to a distro payload

[13:43] <ugexe> getting the list is easy in a Build.pm type file: Distribution::Path.new($dir-passed-to-build).meta<resources>

[13:44] <ugexe> i'm not sure why a check/validation would occur on META6.json at build time though. that should happen whenever any other meta6.json validation happens. i'm not sure when/what mi6 does in regards to that 

[13:45] <ugexe> note though that in theory it seems a bit dirty to use the parent Distribution in its own Build step/module

[13:46] <ugexe> because that Distribution isn't supposed to even be built, yet its trying to be used to build itself!

[14:20] <vrurg> tbrowder__: one thing you get totally wrong from the start. zef has nothing to do with the max threads setting. It's a flaw in Test::Async internal design which makes it vulnerable to the exhausting of thread pool.

[14:44] *** vrurg left
[14:45] *** vrurg joined
[14:59] <tbrowder__> i know but i was wondering if it considered the env var, zef i think uses threads too

[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:02] <tbrowder__> ugexe: didn’t you consider a few days ago adding to zef access to META<resources>?

[15:02] <ugexe> i'm not sure what you're referring to

[15:05] <tbrowder__> talking about an installed DISTRIBUTION where currently one needs to know paths in resources a priori to get access to content

[15:06] <tbrowder__> i thought you said you might do that

[15:06] <ugexe> afaik everything you wanted to do is already possible

[15:08] <tbrowder__> that would be very cool, esp if App::Mi6 would keep META resources in sync with module repo resources

[15:09] <tbrowder__> a feature request has been filed for that

[15:16] *** vrurg_ joined
[15:17] *** vrurg left
[15:18] <tbrowder__> ok, in an installed distro, how do i get a list of the paths in ./resources?

[15:21] <tbrowder__> i’ll try it in my Demo module (after adding it and reinstalling it)?

[15:21] <ugexe> the relative paths you would give to .content?

[15:21] <ugexe> $*DISTRIBUTION.meta<resources>.map({ "resources/$_" }) or some such

[15:23] <ugexe> say $*DISTRIBUTION.content($_) for $*DISTRIBUTION.meta<resources>.map({ "resources/$_" })

[15:24] <tbrowder__> okay, i’ll give that a try, thanks!

[15:41] <Geth> ¦ Digest-PSHA1/main: 4773f4e52b | (Márton Polgár)++ (committed using GitHub Web editor) | META6.json

[15:41] <Geth> ¦ Digest-PSHA1/main: Fix source URL

[15:41] <Geth> ¦ Digest-PSHA1/main: review: https://github.com/raku-community-modules/Digest-PSHA1/commit/4773f4e52b

[16:33] <tbrowder__> ugexe: looking good (with subst of ? for *)

[16:40] <tbrowder__> ++ugexe 👏🏻

[16:40] <tbrowder__> eggcellent!

[17:00] <tbrowder__> i’m gonna pub the module, but i need a better name. my use case is to show authors a tested way to provide their  users with any module payload they want available.

[17:01] <tonyo> i think tbrowder__ is a fine name

[17:01] <tellable6> 2023-11-17T10:09:22Z #raku <melezhik> tonyo: -  build succeeded on the latest fez version taken from git - https://ci.sparrowhub.io/report/3814

[17:01] <tellable6> 2023-11-17T10:09:55Z #raku <melezhik> tonyo: -  I am still not sure what was the cause, cause I have not changed my fez token

[17:02] <tonyo> bless

[17:03] <tbrowder__> current module is at github/tbrowder/Demo

[17:12] <tbrowder__> with the underscore? 😎

[17:12] <tbrowder__> 😁

[17:25] *** timo left
[17:25] *** timo joined
[17:46] <tonyo> it underscores the author

[19:33] <Geth> ¦ rakudo/main: b64e683c04 | (Elizabeth Mattijsen)++ | src/core.c/Match.rakumod

[19:33] <Geth> ¦ rakudo/main: Pretty big refactor of Match class internals

[19:33] <Geth> ¦ rakudo/main: 

[19:33] <Geth> ¦ rakudo/main: - wrap all nqp ops into local subroutines

[19:33] <Geth> ¦ rakudo/main: - de-nqpify where possible, increases readability

[19:33] <Geth> ¦ rakudo/main: - refactor common idioms into a sub

[19:33] <Geth> ¦ rakudo/main: - add more documentation

[19:33] <Geth> ¦ rakudo/main: - made some subs "our" because they need to be accessible outside

[19:33] <Geth> ¦ rakudo/main: <…commit message has 5 more lines…>

[19:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b64e683c04

[19:56] *** MasterDuke joined
[22:09] *** sena_kun joined
[22:35] <tbrowder__> well i picked a new name: HowToUseModuleResources (no underscores)

[22:36] <tbrowder__> already in zef/fez, PRs welcome

[23:50] *** sena_kun left
