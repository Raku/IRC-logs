[01:49] <vrurg> KEEP phaser... Damn it, not again!

[03:06] *** committable6 left
[03:06] *** bisectable6 left
[03:06] *** committable6 joined
[03:06] *** bisectable6 joined
[05:21] *** Util left
[05:34] *** Util joined
[05:46] <bartolin> bisectable6: old=2022.06 new=2023.09 role R { method foo () handles <bar> {} } ## another try, maybe the bot had a temporary problem yesterday

[05:46] <bisectable6> bartolin, Bisecting by exit code (old=2022.06 new=2023.09). Old exit code: 1

[05:46] <bisectable6> bartolin, and I oop! Backtrace: https://gist.github.com/59eeb8c16c3937a1ba2464d38e2b4916

[07:31] <ab5tract_> vrurg: what aboutg the KEEP phaser? I thought that was removedd?

[07:41] *** sena_kun joined
[09:04] <ab5tract_> _finally_ got the FIRST working .. with blocks. now for statements

[09:04] <ab5tract_> afk&

[12:11] <nine> ab5tract_: oh, so what was the problem? Why did the code not get called?

[12:37] <ab5tract_> I needed an ApplyInfix/Call::Term to call the wrapper Block

[12:38] <ab5tract_> plus the setup in ScopePhaser to call `IMPL-CALLISH-QAST` on the nodes in `$!FIRST`

[12:38] <ab5tract_> which I had commented out previously

[13:13] <vrurg> ab5tract_: Removed from where? Anyway, I used it in my code with wrong assumption about its semantics. And it's not the first time. :(

[13:13] <ab5tract_> ah, sorry, there were a few theoretical, unimplemented ones that were removed from the documentation and presumably from consciousness

[13:14] <ab5tract_> now I'm curious what KEEP does 👀

[13:17] <vrurg> Not what one'd expect by reading the documentation. 

[13:19] <[Coke]> This will sound snarky, but doc patches always welcome!

[13:20] <[Coke]> I want a bot that opens a doc ticket whenever someone says something like that and captures the surrounding chat. :)

[13:20] <vrurg> [Coke]: I'd rather consider a patch for KEEP semantics. 

[13:21] <[Coke]> OK

[13:24] <ab5tract_> well, the loops work under normal conditions but don't seem to be too happy to be run under the EVALs that the rakuast tests use

[13:36] <ab5tract_> nine: hmmm, maybe its not a surprise that this approach is not perfect for EVAL

[13:37] <ab5tract_> or at least, there needs to be some considerations taken to this effect

[13:55] *** jgaz joined
[13:55] <ab5tract_> it's barfing on DEPARSE :(

[14:11] <ugexe> i use KEEP

[14:11] <ugexe> and UNDO

[14:13] <ugexe> for 1..10 { KEEP { $logger.log("item processed") }; UNDO { $logger.log("item failed to process") }; process-stuff($_) }

[14:15] <ugexe> https://github.com/ugexe/zef/blob/bf99522872de414a415b4ae578f0767e123e42f2/lib/Zef/Repository/Ecosystems.rakumod#L121-L125

[14:17] <ab5tract_> hmmm... what's the concrete distinction between an expression and a statement? it seems that a blorst is actually sometimes a "blosrstex" -- block or statement or expression

[14:21] <vrurg> ugexe: the problem comes when an undefined is considered a normal return.

[14:41] <ab5tract_> +1 spectests under the new FIRST regime :)

[14:47] <AlexDaniel> bartolin: oops :)

[15:18] <AlexDaniel> bartolin: wow that bisectable bug has been there since 2018

[15:30] <ab5tract_> nine, vrurg, lizmat: #5406 is ready for perusal

[15:35] <Geth> ¦ whateverable/main: 061e633c39 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/Buildable.p6

[15:35] <Geth> ¦ whateverable/main: Tweak the wording in Buildable

[15:35] <Geth> ¦ whateverable/main: 

[15:35] <Geth> ¦ whateverable/main: I think this makes it more understandable that each archive can contain

[15:35] <Geth> ¦ whateverable/main: more than one build.

[15:35] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/061e633c39

[15:35] <Geth> ¦ whateverable/main: 7e51837f99 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 8 files

[15:35] <Geth> ¦ whateverable/main: Update outdated links and references

[15:35] <Geth> ¦ whateverable/main: 

[15:35] <Geth> ¦ whateverable/main: Mostly this commit is just doing `perl6` → `Raku`.

[15:35] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/7e51837f99

[15:35] <Geth> ¦ whateverable/main: 9137dfdf8c | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Bisection.pm6

[15:35] <Geth> ¦ whateverable/main: Fix an old unnoticed bug in Bisectable

[15:35] <Geth> ¦ whateverable/main: 

[15:35] <Geth> ¦ whateverable/main: This code seems to be bitrotted, but the latest changes were in 2018. It

[15:35] <Geth> ¦ whateverable/main: looks like nobody noticed because we simply had no missing builds.

[15:35] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/9137dfdf8c

[15:36] *** committable6 left
[15:36] *** quotable6 left
[15:36] *** sourceable6 left
[15:36] *** bisectable6 left
[15:36] *** bloatable6 left
[15:36] *** linkable6 left
[15:36] *** evalable6 left
[15:36] *** releasable6 left
[15:36] *** coverable6 left
[15:36] *** notable6 left
[15:36] *** tellable6 left
[15:36] *** unicodable6 left
[15:36] *** nativecallable6 left
[15:36] *** shareable6 left
[15:36] *** greppable6 left
[15:36] *** benchable6 left
[15:36] *** buildable6 left
[15:39] *** shareable6 joined
[15:39] *** bisectable6 joined
[15:39] *** benchable6 joined
[15:39] *** unicodable6 joined
[15:39] *** buildable6 joined
[15:40] *** linkable6 joined
[15:40] *** sourceable6 joined
[15:40] *** coverable6 joined
[15:40] *** quotable6 joined
[15:40] *** committable6 joined
[15:41] *** nativecallable6 joined
[15:41] *** notable6 joined
[15:41] *** greppable6 joined
[15:41] <AlexDaniel> bisect: old=2022.06 new=2023.09 role R { method foo () handles <bar> {} }

[15:41] *** releasable6 joined
[15:41] <bisectable6> AlexDaniel, Bisecting by exit code (old=2022.06 new=2023.09). Old exit code: 1

[15:41] *** evalable6 joined
[15:41] *** tellable6 joined
[15:41] *** bloatable6 joined
[15:43] <AlexDaniel> aaaaand?

[15:43] *** benchable6 left
[15:43] *** benchable6 joined
[15:43] *** bisectable6 left
[15:43] <AlexDaniel> o_o

[15:44] *** linkable6 left
[15:44] *** linkable6 joined
[15:44] *** quotable6 left
[15:44] *** quotable6 joined
[15:48] <ab5tract_> wait, what does bloatable do?

[15:49] *** jgaz left
[15:49] <AlexDaniel> bloatable6: wiki

[15:49] <bloatable6> AlexDaniel, https://github.com/Raku/whateverable/wiki/Bloatable

[15:50] <ab5tract_> nice :)

[15:50] <AlexDaniel> currently the moarvm builds are missing but they'll be back soon

[15:51] *** jgaz joined
[15:52] <discord-raku-bot> <nemokosch> the only question is, are these bots still mentioned anywhere on the site?

[15:52] <discord-raku-bot> <nemokosch> because I think there was some sort of cleanup to the bots

[15:54] <AlexDaniel> is there a need to mention them on the site though? hmm

[15:54] <AlexDaniel> maybe we should expose them on the web or something

[15:54] <[Coke]> https://raku.org/community/irc

[15:55] <AlexDaniel> now that they run in containers I feel a lot more permissive :)

[15:55] <AlexDaniel> so maybe they should answer private messages and also have a public url or something, instead of being IRC-only

[15:55] <[Coke]> +1

[15:56] <ab5tract_> that would be cool!

[15:57] <AlexDaniel> anyone can contribute it, btw. Even the domain management is now part of the repo

[15:58] <AlexDaniel> example: https://github.com/Raku/whateverable/blob/9137dfdf8ca78fe02530d4b9804094c6446b3bde/compose.yaml#L292-L295

[15:59] <AlexDaniel> these 4 lines are enough to get a certificate and forward the port from the container

[16:01] *** quotable6 left
[16:01] *** quotable6 joined
[16:08] <ab5tract_> nine: btw, I didn't need the `Call::Term` after I gave up on declaring the state var in the AST and just registered them with the attaching block.

[16:08] <ab5tract_> as implicit lexical declarations, which seems to me to be exactly what these are

[16:11] <ab5tract_> s/I gave up/it didn't work by/

[16:12] <Geth> ¦ whateverable/main: 606b064126 | (Aleks-Daniel Jakimenko-Aleksejev)++ | compose.yaml

[16:12] <Geth> ¦ whateverable/main: Fix Quotable volume issue

[16:12] <Geth> ¦ whateverable/main: 

[16:12] <Geth> ¦ whateverable/main: Otherwise you get this error:

[16:12] <Geth> ¦ whateverable/main: ```

[16:12] <Geth> ¦ whateverable/main: Failed to get the directory contents of '/srv/data/irc': Failed to open dir: No such file or directory

[16:12] <Geth> ¦ whateverable/main: ```

[16:12] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/606b064126

[16:12] <Geth> ¦ whateverable/main: 5cce2a97ec | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Bisection.pm6

[16:12] <Geth> ¦ whateverable/main: Fix Bisectable bug for good (oops)

[16:12] <Geth> ¦ whateverable/main: 

[16:12] <Geth> ¦ whateverable/main: I tried to do it in 9137dfdf8ca7 but I did not think it through enough.

[16:12] <Geth> ¦ whateverable/main: This time I tested it. 😇

[16:12] <Geth> ¦ whateverable/main: review: https://github.com/Raku/whateverable/commit/5cce2a97ec

[16:13] *** unicodable6 left
[16:13] *** bloatable6 left
[16:13] *** tellable6 left
[16:13] *** quotable6 left
[16:13] *** coverable6 left
[16:13] *** linkable6 left
[16:13] *** benchable6 left
[16:13] *** sourceable6 left
[16:13] *** buildable6 left
[16:13] *** releasable6 left
[16:13] *** nativecallable6 left
[16:13] *** shareable6 left
[16:13] *** evalable6 left
[16:13] *** notable6 left
[16:13] *** committable6 left
[16:13] *** greppable6 left
[16:13] <ab5tract_> it was registering the vars on the attaching block that worked. when registering them as lexical states directly on the `$wrapper-block`, they didn't work either

[16:13] <ab5tract_> I was a bit surprised by that

[16:15] *** greppable6 joined
[16:15] *** linkable6 joined
[16:15] *** evalable6 joined
[16:15] *** sourceable6 joined
[16:15] *** shareable6 joined
[16:16] *** unicodable6 joined
[16:16] *** nativecallable6 joined
[16:16] *** bisectable6 joined
[16:16] *** releasable6 joined
[16:17] *** committable6 joined
[16:17] *** bloatable6 joined
[16:17] *** coverable6 joined
[16:17] *** tellable6 joined
[16:18] *** notable6 joined
[16:18] *** quotable6 joined
[16:18] *** buildable6 joined
[16:18] *** benchable6 joined
[16:20] *** bisectable6 left
[16:20] *** bisectable6 joined
[16:22] *** evalable6 left
[16:22] *** evalable6 joined
[16:24] *** linkable6__ joined
[16:24] *** linkable6 left
[16:41] <AlexDaniel> third time's a charm…

[16:41] <AlexDaniel> bisect: old=2022.06 new=2023.09 role R { method foo () handles <bar> {} }

[16:41] <bisectable6> AlexDaniel, Bisecting by exit code (old=2022.06 new=2023.09). Old exit code: 1

[16:43] <AlexDaniel> it worked locally, so that has to work…

[16:43] *** bisectable6 left
[16:44] *** bisectable6 joined
[16:55] <AlexDaniel> bisect: old=2022.06 new=2023.09 role R { method foo () handles <bar> {} }

[16:55] <bisectable6> AlexDaniel, Bisecting by exit code (old=2022.06 new=2023.09). Old exit code: 1

[16:59] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/9a8fbb658cac146271d925428b64e7d3

[16:59] <bisectable6> AlexDaniel, There are 42 candidates for the first “new” revision. See the log for more details

[17:00] <AlexDaniel> bartolin: this should return something more specific in the next few days. For now it is what it is :)

[17:42] <bartolin> Thanks a lot!

[18:08] *** dogbert11 joined
[18:12] *** dogbert17 left
[18:39] <Geth> ¦ Net-LibIDN2: e057037160 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | META6.json

[18:39] <Geth> ¦ Net-LibIDN2: Update META6.json

[18:39] <Geth> ¦ Net-LibIDN2: 

[18:39] <Geth> ¦ Net-LibIDN2: Fix source-url

[18:39] <Geth> ¦ Net-LibIDN2: review: https://github.com/raku-community-modules/Net-LibIDN2/commit/e057037160

[18:55] <ab5tract_> nine: additional note about doing `FIRST` this way is that it automatically works on non-loop blocks.  

[18:55] <ab5tract_> base behavior is to silently ignore this

[19:04] <ab5tract_> we could probably patch the grammar to not allow this to compile, if we wanted to be strict about where people put the loopy phasers

[19:07] <bartolin> bisectable6: old=2022.06 new=2022.07 role R { method foo () handles <bar> {} }

[19:07] <bisectable6> bartolin, Bisecting by exit code (old=2022.06 new=2022.07). Old exit code: 1

[19:07] <bisectable6> bartolin, bisect log: https://gist.github.com/1fc90fa521aa48857a03485f0d9227f1

[19:07] <bisectable6> bartolin, There are 42 candidates for the first “new” revision. See the log for more details

[19:14] <bartolin> c: 2015.12 my $m = (1,2 X~ (" X~ ")).first: *.IO.f  ## https://github.com/Raku/old-issue-tracker/issues/4605

[19:14] <committable6> bartolin, ¦2015.12: «»

[19:16] <bartolin> c: 058e713dc9 my $m = (1,2 X~ (" X~ ")).first: *.IO.f

[19:16] <committable6> bartolin, ¦058e713: «»

[19:17] <bartolin> c: a15b0ef88c my $m = (1,2 X~ (" X~ ")).first: *.IO.f

[19:17] <committable6> bartolin, ¦a15b0ef: «»

[19:17] <ab5tract_> another route altogether: deprecating `once` and recommending `FIRST` in its place

[19:17] <ab5tract_> very straightforward to do

[19:19] <ab5tract_> or, just do what we traditionally do, and embrace TMTOWTDI. though I have to be honest the spoiling of choice for this functionality would be a bit excessive imo

[19:21] <bartolin> c: 2015.02 my $m = (1,2 X~ (" X~ ")).first: *.IO.f

[19:21] <committable6> bartolin, ¦2015.02: «»

[19:23] *** committable6 left
[19:24] *** committable6 joined
[19:36] <bartolin> bisectable6: old=2014.01 new=2015.12 my $m = (1,2 X~ (" X~ ")).first: *.IO.f  ## last try

[19:36] <bisectable6> bartolin, On both starting points (old=2014.01 new=2015.12) the exit code is 0 and the output is identical as well

[19:36] <bisectable6> bartolin, Output on both points: «»

[19:37] <bartolin> meh, I'll give up on that one. Will close the issue as "can't reproduce".

[19:38] <discord-raku-bot> <nemokosch> bartolin++ the OG

[19:44] <lizmat> notable6: weekly

[19:44] <notable6> lizmat, No notes for “weekly”

[19:53] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/10/09/2023-41-free-in-three/

[20:02] *** committable6 left
[20:02] *** committable6 joined
[20:05] *** evalable6 left
[20:05] *** evalable6 joined
[20:07] *** committable6 left
[20:07] *** committable6 joined
[20:31] <[Coke]> I don't think once and LAST are technically the same

[20:31] <[Coke]> er, FIRST

[20:52] <ab5tract_> [Coke] the only difference in RakuAST (per my PR, at least) is that one runs at state init time and one runs at FIRST phase time

[20:53] <ab5tract_> so I was saying FIRST works now in non-loop blocks 

[20:56] <ab5tract_> choices to deal with it: FIRST shouldn't be allowed in non-loop blocks, deprecate `once` as redundant, or leave it as is 

[21:06] <ab5tract_> ah, nope, you are right [Coke]++

[21:06] <[Coke]> I would like to think that more than one way doesn't mean just an alias, I'd be ok with a deprecation cycle.

[21:06] <[Coke]> OH

[21:06] <[Coke]> well in that case... :)

[21:09] <ab5tract_> at least as currently implemented, `my $foo = once bar()` works as expected but `my $foo = FIRST bar()` just stores an `Any` in `$foo`

[21:10] <ab5tract_> so, technically different indeed

[22:02] *** sena_kun left
[22:09] *** sena_kun joined
[22:13] *** sena_kun left
