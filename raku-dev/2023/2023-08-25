[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:03] *** japhb left
[00:35] *** japhb joined
[00:43] <ugexe> I think we need a better way of versioning core modules

[00:44] <ugexe> they used to be versioned as 6.c etc, but now the version is based on rakudo verion i.e. 2023.XX.XXXX

[00:44] <MasterDuke> huh. how/when did that happen?

[00:44] <ugexe> the first thing wrong there is anyone that was doing `use Test:ver<6.*>` (for example I used `Test:ver<6.c+>` a lot) would have be had their code broken

[00:45] <ugexe> but the important thing is some version scheme is followed from here out. other compilers that would also have to provide NativeCall, Test, etc should version theirs similarly

[00:45] <ugexe> so that one can depend on a specific version of Test that isn't compiler specific but also has whatever features they need of that version

[00:46] <ugexe> m: say CompUnit::RepositoryRegistry.repository-for-name("core").installed[0].meta<ver>'

[00:46] <camelia> rakudo-moar 16595e843: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> -for-name("core").installed[0].meta<ver>⏏'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»

[00:46] <ugexe> m: say CompUnit::RepositoryRegistry.repository-for-name("core").installed[0].meta<ver>

[00:46] <camelia> rakudo-moar 16595e843: OUTPUT: «v2023.08.45.g.16595.e.843␤»

[00:49] <ugexe> v2022.04 is the last rakudo release where the version shows 6.d. v2022.06 shows v2022.06

[00:49] <discord-raku-bot> <nemokosch> so this may be related to zef emitting dummy warnings at installation

[00:51] <[Coke]> "dummy"

[00:51] <[Coke]> I think you mean deprecation.

[00:51] <discord-raku-bot> <nemokosch> not deprecation, literal "implicit coercion of type object to string" warnings

[00:53] <discord-raku-bot> <nemokosch> > Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.  in method try-load at (Zef) line 155

[00:55] <discord-raku-bot> <nemokosch> line 155 coincides with > my $plugin-is-core  = so $?DISTRIBUTION.meta<provides>{$short-name}.?chars;

[01:35] *** evalable6 left
[01:35] *** linkable6 left
[01:37] *** evalable6 joined
[01:37] *** linkable6 joined
[03:00] *** tellable6 left
[03:00] *** evalable6 left
[03:00] *** shareable6 left
[03:00] *** reportable6 left
[03:00] *** bloatable6 left
[03:00] *** bisectable6 left
[03:00] *** sourceable6 left
[03:00] *** quotable6 left
[03:00] *** committable6 left
[03:00] *** nativecallable6 left
[03:00] *** statisfiable6 left
[03:00] *** benchable6 left
[03:00] *** squashable6 left
[03:00] *** releasable6 left
[03:00] *** notable6 left
[03:00] *** unicodable6 left
[03:00] *** linkable6 left
[03:00] *** coverable6 left
[03:00] *** greppable6 left
[03:00] *** bloatable6 joined
[03:00] *** notable6 joined
[03:01] *** evalable6 joined
[03:01] *** tellable6 joined
[03:01] *** benchable6 joined
[03:01] *** committable6 joined
[03:01] *** quotable6 joined
[03:01] *** linkable6 joined
[03:01] *** coverable6 joined
[03:02] *** shareable6 joined
[03:02] *** squashable6 joined
[03:02] *** sourceable6 joined
[03:02] *** bisectable6 joined
[03:02] *** reportable6 joined
[03:02] *** statisfiable6 joined
[03:02] *** nativecallable6 joined
[03:02] *** unicodable6 joined
[03:02] *** greppable6 joined
[03:03] *** releasable6 joined
[03:12] *** squashable6 left
[03:14] *** squashable6 joined
[03:40] <MasterDuke> .tell codesections btw, i saw this a little while ago and thought it would be up your alley if you haven't already seen it https://news.ycombinator.com/item?id=36672957

[03:40] <tellable6> MasterDuke, I'll pass your message to codesections

[04:36] *** melezhik joined
[04:42] *** melezhik left
[05:04] *** melezhik joined
[05:06] *** melezhik left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[07:31] <Geth> ¦ rakudo/main: f09fa022f2 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[07:31] <Geth> ¦ rakudo/main: Make .combinations about 25% faster

[07:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f09fa022f2

[07:59] <Geth> ¦ rakudo/main: 695b9dc468 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Iterator.pm6

[07:59] <Geth> ¦ rakudo/main: Make .combinations another 7% faster

[07:59] <Geth> ¦ rakudo/main: 

[07:59] <Geth> ¦ rakudo/main: By using lexicals in hot loops instead of attributes

[07:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/695b9dc468

[08:29] *** sena_kun joined
[09:15] *** ab5tract joined
[10:17] <discord-raku-bot> <nemokosch> lizmat: this is just a guess but have you thought if push and pop are wasty?

[10:18] <discord-raku-bot> <nemokosch> The other suspicious thing for me is the amount of nqp::clone calls, even on something that is guaranteed to be a C native int

[11:09] *** NemokoschKiwi joined
[11:13] *** ab5tract left
[11:14] *** ab5tract joined
[11:20] *** NemokoschKiwi left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:17] *** jgaz left
[13:59] *** ab5tract left
[14:01] *** ab5tract joined
[14:16] <ab5tract> nine: any idea on where one might start looking to resolve the lack of role inheritence in RakuAST?

[14:21] <vrurg> ab5tract: src/Perl6/Metamodel, *Role*HOW*

[14:30] <ab5tract> vrurg: thanks! I already started poking around in there

[14:30] <vrurg> ab5tract: good luck on this! I'm keeping my eye on the issue, but can't start with it yet.

[16:20] *** jgaz joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:29] *** sena_kun left
[18:30] *** sena_kun joined
[20:35] <MasterDuke> https://blog.carlmjohnson.net/post/2020/python-square-of-opposition/ relevant to several discussion that have been had here

[20:36] <MasterDuke> m: say so all([])

[20:36] <camelia> rakudo-moar 695b9dc46: OUTPUT: «True␤»

[20:47] <MasterDuke> huh. changing the `nqp::clone` to `nqp::decont` here https://github.com/rakudo/rakudo/blob/main/src/core.c/Rakudo/Iterator.pm6#L843 causes `say (1..100).combinations(4).Array.elems` to slow down from ~5.7s to ~8.2s

[20:48] <MasterDuke> m: use nqp; my int $a; for ^1_000_000 -> int $i { $a = nqp::clone($i) }; say now - INIT now; say $a

[20:48] <camelia> rakudo-moar 695b9dc46: OUTPUT: «0.047119263␤999999␤»

[20:48] <MasterDuke> m: use nqp; my int $a; for ^1_000_000 -> int $i { $a = nqp::decont($i) }; say now - INIT now; say $a

[20:48] <camelia> rakudo-moar 695b9dc46: OUTPUT: «0.011423033␤999999␤»

[20:49] <MasterDuke> but as ^^^ shows, nqp::decont should be faster...

[20:50] <discord-raku-bot> <nemokosch> yep

[20:51] <discord-raku-bot> <nemokosch> and by the way, are all the clone calls necessary

[20:51] <discord-raku-bot> <nemokosch> for example, cloning the value that is a native int?

[20:51] <MasterDuke> yeah. at least that one is. but i'm not sure why

[20:53] <MasterDuke> m: say (1..100).combinations(4).tail;

[20:53] <camelia> rakudo-moar 695b9dc46: OUTPUT: «(97 98 99 100)␤»

[20:54] <MasterDuke> if you just remove the nqp::clone completely, you instead get `((Mu) (Mu) (Mu) (Mu))`

[20:58] <discord-raku-bot> <nemokosch> pfff

[20:58] <MasterDuke> and removing the ones around $combination cause `Cannot unbox a type object (VMNull) to int.`

[22:56] *** sena_kun left
[23:28] <MasterDuke> the ones around $combination make sense. each time $combination (i.e., $!combination) gets *set* to a new combination, so it needs to be cloned when it gets pulled out as an individual element of the overall result list

[23:29] <MasterDuke> what i don't understand is when i remove $!combination and create $combination as a new IterationBuffer each time, why i can't then remove the nqp::clone's around it

[23:30] <MasterDuke> `Cannot unbox a type object (VMNull) to int. at SETTING::src/core.c/Rakudo/Iterator.pm6:2462`

[23:44] *** squashable6 left
[23:46] *** squashable6 joined
[23:49] <MasterDuke> huh. wouldn't have expected that https://gist.github.com/MasterDuke17/bb2dcbd10d0d4d9af1efbacc4762990a would slow down `say (1..100).combinations(4).tail; say now - INIT now` by ~1s

