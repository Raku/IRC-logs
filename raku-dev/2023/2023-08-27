[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:02] *** greppable6 left
[01:02] *** linkable6 left
[01:02] *** committable6 left
[01:02] *** nativecallable6 left
[01:02] *** evalable6 left
[01:02] *** bloatable6 left
[01:02] *** reportable6 left
[01:02] *** statisfiable6 left
[01:02] *** sourceable6 left
[01:02] *** squashable6 left
[01:02] *** benchable6 left
[01:02] *** quotable6 left
[01:02] *** coverable6 left
[01:02] *** notable6 left
[01:02] *** tellable6 left
[01:02] *** bisectable6 left
[01:02] *** releasable6 left
[01:02] *** unicodable6 left
[01:02] *** shareable6 left
[01:02] *** unicodable6 joined
[01:02] *** reportable6 joined
[01:02] *** notable6 joined
[01:02] *** sourceable6 joined
[01:02] <ugexe> Anyone have any suggestions to speed up this pure raku sha1 implementation? its pretty slow - https://gist.github.com/ugexe/06469f5d3e06c6a6499ed9ceed814883
[01:03] *** tellable6 joined
[01:03] *** nativecallable6 joined
[01:03] *** releasable6 joined
[01:03] *** linkable6 joined
[01:03] *** quotable6 joined
[01:03] *** coverable6 joined
[01:04] *** benchable6 joined
[01:04] *** greppable6 joined
[01:04] *** statisfiable6 joined
[01:04] *** shareable6 joined
[01:04] *** bloatable6 joined
[01:04] *** squashable6 joined
[01:04] *** bisectable6 joined
[01:04] *** committable6 joined
[01:05] *** evalable6 joined
[02:26] <ugexe> infix:<+&>
[02:26] <ugexe> SETTING::src/core.c/Int.pm6:465
[02:26] <ugexe> there is a bunch of allocations like that, but why does it appear to be using the Int multi and not the int multi?
[02:38] *** MasterDuke joined
[02:41] <MasterDuke> you have to type pretty much every operand. i.e., `my int $a = 3; $a + 5` will use the Int multi. `my int $a = 3; $a + (my int $ = 5)` should use the int multi
[02:42] <MasterDuke> i'm not sure if we convert multiply/divide/mod by powers of 2 to shifts. might try doing that manually to see if there's a difference
[03:00] <ugexe> m: BEGIN my int $ff = 0xFF;
[03:00] <camelia> rakudo-moar ec2076759: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤An exception X::Comp::AdHoc occurred while evaluating a BEGIN: Lexical with name '$ff' has wrong type. real type 8 wanted type -1␤at <tmp>:1␤Exception details:␤  ===SORRY!=== Error while com…»
[03:00] <ugexe> m: my int $ff = 0xFF;
[03:00] <camelia> rakudo-moar ec2076759: ( no output )
[03:18] <ugexe> replacing the various constant literal ints like 64 with $i64 where `my int $i64 = 64;` doesn't seem to have helped
[03:19] <ugexe> https://gist.github.com/ugexe/dcd034259f1c7b5bedaff73525164bd7
[03:19] <MasterDuke> well, a profile shows a decent amount of time spent in line 53
[03:19] <ugexe> infix:<+&>
[03:19] <ugexe> SETTING::src/core.c/Int.pm6:459 	
[03:19] <ugexe> 1164435 
[03:19] <ugexe> like where are all those coming from
[03:20] <MasterDuke> maybe `@words[$t] = (@words[$t - 3] +^ @words[$t - 8] +^ @words[$t - 14] +^ @words[$t - 16]);` would by faster if all those array accesses were pulled out into explicit natives
[03:21] <ugexe> in the second gist i have `@words[$t] = ((@words[$t] +< $i1) +& $ffffffff) +| (@words[$t] +> $i31);`, and since @words is `int @words` shouldn't that all be native accesses?
[03:22] <ugexe> oh, re: "where are all those coming from" i was assuming because it was Int.pm6 that it was using the Int candidates, but the int candidates are in there too
[03:25] <ugexe> if i write that same algorithm in perl it does the 500000 character string in less than a second, but it takes the raku code 3.6 seconds
[03:35] <MasterDuke> but the literals might be be native
[03:35] <MasterDuke> might *not*
[03:38] <ugexe> i replaced all the literals like 32 with $i32 (which was `my int $i32 = 32`). are you suggesting that $i32 might not be a native?
[03:38] *** evalable6 left
[03:38] *** linkable6 left
[03:39] <MasterDuke> oh, i kind of missed that `$ffffffff` was already a native
[03:40] <MasterDuke> for example
[03:40] *** linkable6 joined
[03:40] <ugexe> yeah forcing all those literals to be native didn't seem to improve the runtime (it was actually slightly worse)
[03:41] *** evalable6 joined
[03:41] <MasterDuke> idle curiosity, but why do you have some `BEGIN my int @a = <...>` and some `my int @b = BEGIN <...>`
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:59] <Geth> ¦ rakudo/main: 4b2c40728c | ab5tract++ | src/Raku/ast/package.rakumod
[06:59] <Geth> ¦ rakudo/main: RakuAST: Fix role inheritence not working
[06:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4b2c40728c
[06:59] <Geth> ¦ rakudo/main: 0572d44140 | niner++ (committed using GitHub Web editor) | src/Raku/ast/package.rakumod
[06:59] <Geth> ¦ rakudo/main: Merge pull request #5363 from ab5tract/add-role-inheritence
[06:59] <Geth> ¦ rakudo/main: 
[06:59] <Geth> ¦ rakudo/main: RakuAST: Fix role inheritence not working
[06:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0572d44140
[07:02] *** codesections left
[07:40] *** sena_kun joined
[09:24] *** squashable6 left
[09:24] *** squashable6 joined
[09:35] *** Xliff joined
[09:35] <Xliff> Raku-GLib suite timing statistics for Raku 2023.08.51.gec.2076759.b
[09:35] <Xliff> Using the following processor: AMD Ryzen 9 5950X 16-Core Processor
[09:35] <Xliff> Total number of projects: 34 (506509 loc)
[09:35] <Xliff> Total non-parallel compile times: 10790.200 (317.359 avg)
[09:35] <tellable6> 2023-08-27T08:30:44Z #raku <lizmat> Xliff: please provide sample and --ll-exception trace  :-)
[09:35] <Xliff> Total parallel compile times: 1948.092 (57.297 avg) 5.539x speedup
[10:26] <Xliff> .tell lizmat https://gist.github.com/Xliff/f9658ed834dc597e9e41f3c36f869ac3 # As requested.
[10:26] <tellable6> Xliff, I'll pass your message to lizmat
[10:28] <discord-raku-bot> <nemokosch> this "no space on the device" came up a couple of days ago
[10:29] <lizmat> it doesn't ring a bell with me...
[10:29] <discord-raku-bot> <nemokosch> you said it then as well, Xliff
[10:29] <discord-raku-bot> <nemokosch> "Turns out the problem was NOT drive space, but open apps."
[10:32] <Xliff> Yeah. In this case, pulsar (spiritual successor to the Atom Editor)
[10:32] <Xliff> But why is pulsar creating a false "no space left on device" error in Raku?
[10:33] <discord-raku-bot> <nemokosch> I don't know if Atom was also this huge but the size of Pulsaar is just beyond ridiculous
[10:33] <Xliff> Yes. Atom was that huge.
[10:33] <Xliff> The previous machine had something similar, except it was "too many open files"
[10:33] <discord-raku-bot> <nemokosch> What makes you use it? It's pretty basic as well
[10:34] <Xliff> It's not if you have the right plugins (and I've written a few for my own personal use!)
[10:34] <discord-raku-bot> <nemokosch> I remember I thought "VSC started off from this, it can't be that bad", and yes, it was that bad, ugly and stupid and all
[10:34] <discord-raku-bot> <nemokosch> got rid of it very soon
[10:34] <Xliff> What? VSC?
[10:34] <discord-raku-bot> <nemokosch> Atom
[10:34] <discord-raku-bot> <nemokosch> VSC is absolutely rocket science compared to it
[10:34] <Xliff> Yes, welll.... color me spoiled. It's treated me well over the last decade.
[10:35] <Xliff> I'm not sold on VSC (color me crazy).
[10:35] <Xliff> Pulsar works, but has teething issues.
[10:35] <Xliff> I would switch if I had a decent alternative that I haven't used (and abandoned) before. And that's a LOT.
[10:35] <discord-raku-bot> <nemokosch> I took part in migrating the code of the package manager back to JS
[10:35] <Xliff> Syntax highlighting is decent.
[10:36] <Xliff> nemokosch: Ah! Nice!
[10:36] <discord-raku-bot> <nemokosch> it wasn't a huge work but it took a couple of months to be integrated
[10:36] <discord-raku-bot> <nemokosch> but it happened at least
[10:37] <discord-raku-bot> <nemokosch> it really makes a difference how your work is received, especially when it was at least agreed on
[10:39] <Xliff> True enough. Now if only I can get my own work out there.
[10:39] <Xliff> Only time will tell.
[10:39] <Xliff> Stuff keeps getting in the way. Now it's medical (both mine and mom's)
[10:40] <discord-raku-bot> <nemokosch> take care...
[10:40] <Xliff> Insurance dropped me after only 41 days. I was ready to pay 2 weeks late.
[10:40] <Xliff> Now I have no insurance and can't get any until Open Enrollment. This whole thing strikes me as a big con. Why does medical insurance need an Open Enrollment period?
[10:40] <Xliff> Especially when they are ready to kick people off of their roles, early!
[10:41] <Xliff> It's not like there's a waiting list!
[10:41] <lizmat> profit ?
[10:41] <Xliff> I guess.
[10:41] <Xliff> But I doubt it. Big Pharma is going to make its money whether I'm on its roles or not!
[11:04] *** NemokoschKiwi joined
[11:22] <lizmat> Xliff: looking at your gist, not getting much further as a .DEPARSE fails as well in a weird way
[11:23] <lizmat> and *that* appears to be related to the ColonPair::Value
[11:30] <ugexe> MasterDuke: the ones with BEGIN before ‘my’ are basically constant, while the other BEGIN goes to an array that is modified (but the initial default values are always the same)
[11:30] <lizmat> m: BEGIN my @a = 1,2,3; @a.push(42); dd @a
[11:30] <camelia> rakudo-moar 0572d4414: OUTPUT: «Array @a = [1, 2, 3, 42]␤»
[11:31] <lizmat> m: my constant @a = 1,2,3; @a.push(42); dd @a
[11:31] <camelia> rakudo-moar 0572d4414: OUTPUT: «Cannot call 'push' on an immutable 'List'␤  in block <unit> at <tmp> line 1␤␤»
[11:31] <lizmat> MasterDuke ^^ the difference
[11:31] <ugexe> In my code the difference wouldn’t be that error though. The values of the array would just be wrong 
[11:33] <ugexe> It’s more like using BEGIN to initial the array but then doing @a[1] = 42
[11:34] <ugexe> the second time the function is called @a won’t have the expected values 
[11:44] <lizmat> Xliff: the RakuAST::ColonPair::Value.new(key => "\$upc")     is missing a value
[11:45] <lizmat> Xliff: did you mean RakuAST::ColonPair::True.new(key => '$upc') ??
[11:50] <ab5tract> m: my $content = 'role A { method m() { self.x} }; class B does A { has $.x = 42; method m() { self.A::m() } }; dd B.new.m';  shell Q:scalar<RAKUDO_RAKUAST=1 $*EXECUTABLE -e '$content'>
[11:50] <camelia> rakudo-moar 0572d4414: OUTPUT: «No such method 'A::m' for invocant of type 'B'␤  in method m at -e line 1␤  in block <unit> at -e line 1␤␤The spawned command 'RAKUDO_RAKUAST=1 /home/camelia/rakudo-m-inst-1/bin/perl6-m -e 'role A { method m() { self.x} }; class B does A { has…»
[11:50] <ab5tract> nine: any thoughts on how one might go about fixing this? ^^
[11:51] <ab5tract> there's so many little corners just to getting 't/spec/S14-roles/basic.t' to compile and run suncessfully, this is one of them
[11:52] <lizmat> Xliff: if you fix the ColonPair::Value issue, the code EVALs ok
[11:53] <Geth> ¦ rakudo/main: 48838af431 | (Elizabeth Mattijsen)++ | src/Raku/ast/pair.rakumod
[11:53] <Geth> ¦ rakudo/main: RakuAST: ::ColonPair::Value *must* have a value specified
[11:53] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/48838af431
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[13:09] *** NemokoschKiwi left
[13:27] <ab5tract> any idea how I can convert a RakuAST::Call::Method object ot a RakuAST::Method object?
[13:35] <ab5tract> I can't seem to figure out how to create an expression out of a RakuAST::Postfixish, despite it living in expressions.rakumod
[13:49] *** jgaz joined
[14:33] <ab5tract> got it :D
[14:41] <ab5tract> m: role A { method m() { self.x} }; class B does A { has $.x = 42; method m() { self.A::m() } }; dd B.new.m
[14:41] <camelia> rakudo-moar 48838af43: OUTPUT: «42␤»
[14:42] <ab5tract> I've never seen this `self.A::m()` syntax before.
[14:45] <ab5tract> unfortunately the exception is thrown late enough that I don't see any RakuAST module references in the stacktrace, so I'm really not sure where to begin.
[14:47] <ab5tract> but... if we fix that, then I get a single (failing) test file to run without a bad exit code. I'm aiming high!
[14:58] <ugexe> m: my @HEXBYTES[16] = flat 0..9, "A".."F"; say @HEXBYTES
[14:58] <camelia> rakudo-moar 48838af43: OUTPUT: «[0 1 2 3 4 5 6 7 8 9 ...]␤»
[14:58] <ugexe> m: BEGIN my @HEXBYTES[16] = flat 0..9, "A".."F"; say @HEXBYTES
[14:58] <camelia> rakudo-moar 48838af43: OUTPUT: «(Array)␤»
[14:58] <ugexe> m: BEGIN my @HEXBYTES = flat 0..9, "A".."F"; say @HEXBYTES
[14:58] <camelia> rakudo-moar 48838af43: OUTPUT: «[0 1 2 3 4 5 6 7 8 9 A B C D E F]␤»
[14:59] <camelia> rakudo-moar 48838af43: OUTPUT: «[0 1 2 3 4 5 6 7 8 9 A B C D E F]␤»
[14:59] <ugexe> BEGIN + shaped array seems to not work right
[15:32] <ab5tract> m: my $content = 'my @HEXBYTES[16] = flat 0..9, "A".."F"; say @HEXBYTES';  shell Q:scalar<RAKUDO_RAKUAST=1 $*EXECUTABLE -e '$content'>
[15:32] <camelia> rakudo-moar 48838af43: OUTPUT: «[0 1 2 3 4 5 6 7 8 9 ...]␤»
[15:32] <ab5tract> ugexe: fixed in RakuAST?? :O :D
[15:38] <ugexe> heh
[15:38] <ugexe> m: sub foo(str $a) {}; my $arg = "xxx"; say $arg; foo($arg)
[15:38] <camelia> rakudo-moar 48838af43: OUTPUT: «xxx␤»
[15:38] <ugexe> m: proto sub foo(|) {*}; multi sub foo(str $a) {}; my $arg = "xxx"; say $arg; foo($arg)
[15:38] <camelia> rakudo-moar 48838af43: OUTPUT: «xxx␤Cannot resolve caller foo(Str:D); none of these signatures matches:␤    (str $a)␤  in block <unit> at <tmp> line 1␤␤»
[15:39] <ugexe> why does it being changed to a multi have that effect?
[15:48] <ab5tract> m:my $content = 'proto sub foo(|) {*}; multi sub foo(str $a) {}; my $arg = "xxx"; say $arg; foo($arg)';  shell Q:scalar<RAKUDO_RAKUAST=1 $*EXECUTABLE -e '$content'>
[15:49] <evalable6> ab5tract, rakudo-moar 4b69dd51e: OUTPUT: «(exit code 1) xxx␤Cannot resolve caller foo(Str…»
[15:49] <evalable6> ab5tract, Full output: https://gist.github.com/c2fb62050ddc8033d8069c59c9110feb
[15:49] <ab5tract> twice in one day would be too much ;)
[16:11] *** linkable6 left
[16:11] *** evalable6 left
[16:11] *** evalable6 joined
[16:12] *** linkable6 joined
[17:02] <Xliff> lizmat: Ah! Thanks so much!
[17:03] <ab5tract> m: my $content ='class A:auth<Foo> {}; dd A.^auth';  shell Q:scalar<RAKUDO_RAKUAST=1 $*EXECUTABLE -e '$content'>
[17:03] <camelia> rakudo-moar 48838af43: OUTPUT: «===SORRY!=== Error while compiling ␤Undeclared routine:␤    A used at line -1. Did you mean ''?␤␤The spawned command 'RAKUDO_RAKUAST=1 /home/camelia/rakudo-m-inst-1/bin/perl6-m -e 'class A:auth<Foo> {}; dd A.^auth'' exited unsuccessfully…»
[17:03] <ab5tract> m: class A:auth<Foo> {}; dd A.^auth
[17:03] <camelia> rakudo-moar 48838af43: OUTPUT: «"Foo"␤»
[17:04] <ab5tract> I guess Foo:auth<Bar> is NYI in RakuAST... getting so closed to getting this test file to pass
[17:16] <Xliff> m: RakuAST::ColonPair::True.new("upc").gist.sau
[17:16] <camelia> rakudo-moar 48838af43: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Use of RakuAST is experimental; please 'use experimental :rakuast'␤at <tmp>:1␤------> RakuAST::ColonPair::⏏True.new("upc").gist.sau␤    expecting any of:␤        statement list␤      …»
[17:17] <Xliff> m: use experimental :rakuast; RakuAST::ColonPair::True.new("upc").gist.sau
[17:17] <camelia> rakudo-moar 48838af43: OUTPUT: «No such method 'sau' for string 'RakuAST::ColonPair::True.new("upc")'. ␤Did you mean 'say'?␤  in block <unit> at <tmp> line 1␤␤»
[17:17] <Xliff> m: use experimental :rakuast; RakuAST::ColonPair::True.new("upc").gist.say
[17:17] <camelia> rakudo-moar 48838af43: OUTPUT: «RakuAST::ColonPair::True.new("upc")␤»
[17:17] <Xliff> m: use experimental :rakuast; RakuAST::ColonPair::True.new("upc").DEPARSE.say
[17:17] <camelia> rakudo-moar 48838af43: OUTPUT: «:upc␤»
[17:38] <lizmat> Xliff: use v6.* is shorter :-)
[17:58] <Geth> ¦ rakudo/main: ea40e4c626 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/LegacyPodify.pm6
[17:58] <Geth> ¦ rakudo/main: RakuAST: introduce =numitem/=numhead
[17:58] <Geth> ¦ rakudo/main: 
[17:58] <Geth> ¦ rakudo/main: As alternatives to =item # / =head # , aka an alternative to
[17:58] <Geth> ¦ rakudo/main: specifying # as an alternative to :numbered.
[17:58] <Geth> ¦ rakudo/main: 
[17:58] <Geth> ¦ rakudo/main: As per discussion in https://github.com/finanalyst/Rakudoc-BETA/issues/47
[17:58] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ea40e4c626
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:59] *** Xliff left
[20:32] *** NemokoschKiwi joined
[20:53] *** samcv_ joined
[21:01] *** djinni`_ joined
[21:02] *** discord-raku-bot left
[21:02] *** djinni` left
[21:02] *** samcv left
[21:02] *** JRaspass left
[21:07] *** JRaspass joined
[21:41] *** sena_kun left
[22:53] *** NemokoschKiwi left
[23:53] *** quotable6 left
[23:53] *** statisfiable6 left
[23:53] *** coverable6 left
[23:53] *** sourceable6 left
[23:53] *** linkable6 left
[23:53] *** greppable6 left
[23:53] *** committable6 left
[23:53] *** tellable6 left
[23:53] *** releasable6 left
[23:53] *** reportable6 left
[23:53] *** nativecallable6 left
[23:53] *** benchable6 left
[23:53] *** bisectable6 left
[23:53] *** unicodable6 left
[23:53] *** notable6 left
[23:53] *** squashable6 left
[23:53] *** bloatable6 left
[23:53] *** evalable6 left
[23:53] *** shareable6 left
[23:54] *** coverable6 joined
[23:54] *** sourceable6 joined
[23:54] *** quotable6 joined
[23:54] *** statisfiable6 joined
[23:55] *** releasable6 joined
[23:55] *** unicodable6 joined
[23:55] *** shareable6 joined
[23:55] *** squashable6 joined
[23:55] *** evalable6 joined
[23:55] *** benchable6 joined
[23:55] *** bisectable6 joined
[23:55] *** notable6 joined
[23:56] *** linkable6 joined
[23:56] *** committable6 joined
[23:56] *** reportable6 joined
[23:56] *** bloatable6 joined
[23:56] *** greppable6 joined
[23:56] *** nativecallable6 joined
[23:56] *** tellable6 joined
