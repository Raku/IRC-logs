[00:01] *** reportable6 left
[00:03] *** reportable6 joined
[03:08] *** evalable6 left
[03:08] *** linkable6 left
[03:08] *** tellable6 left
[03:09] *** evalable6 joined
[03:10] *** tellable6 joined
[03:10] *** linkable6 joined
[04:47] *** Xliff left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[08:42] <Geth> ¦ rakudo/main: 55bf595d72 | ab5tract++ (committed by Stefan Seifert) | 3 files

[08:42] <Geth> ¦ rakudo/main: RakuAST: Add support for 'enum'

[08:42] <Geth> ¦ rakudo/main: 

[08:42] <Geth> ¦ rakudo/main: This adds RakuAST::Type::Enum. Currently there are a few deviations from

[08:42] <Geth> ¦ rakudo/main: base:

[08:42] <Geth> ¦ rakudo/main: 

[08:42] <Geth> ¦ rakudo/main:   - Base (sort of) allows re-declaration of an installed symbol:

[08:42] <Geth> ¦ rakudo/main:         `class E::C {}; enum E<C>`

[08:42] <Geth> ¦ rakudo/main: <…commit message has 11 more lines…>

[08:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/55bf595d72

[08:58] *** frost joined
[08:59] <Geth> ¦ rakudo/main: f4335a8491 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[08:59] <Geth> ¦ rakudo/main: RakuAST: remove broken interpretation of code objects

[08:59] <Geth> ¦ rakudo/main: 

[08:59] <Geth> ¦ rakudo/main: We didn't handle arguments at all and there's no easy way to do the

[08:59] <Geth> ¦ rakudo/main: argument binding, so for now, always compile code objects when called at

[08:59] <Geth> ¦ rakudo/main: BEGIN time.

[08:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f4335a8491

[08:59] <Geth> ¦ rakudo/main: 463e7ed4ff | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[08:59] <Geth> ¦ rakudo/main: RakuAST: support interpretation of term calls

[08:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/463e7ed4ff

[08:59] <Geth> ¦ rakudo/main: d769af80e5 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[08:59] <Geth> ¦ rakudo/main: RakuAST: support interpretation of Block objects

[08:59] <Geth> ¦ rakudo/main: 

[08:59] <Geth> ¦ rakudo/main: Result in their meta-object, just like routines

[08:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/d769af80e5

[09:03] *** frost left
[09:54] *** Xliff joined
[09:56] <Xliff> cRaku-GLib suite timing statistics for Raku 2023.02.35.gec.8.cdd.540

[09:56] <Xliff> Total number of projects: 33 (503134 loc)

[09:56] <Xliff> Total non-parallel compile times: 8880.060 (269.093 avg)

[09:56] <Xliff> Total parallel compile times: 1742.104 (52.791 avg) 5.097x speedup

[09:57] <Xliff> 125% speedup over parallel compile times. I'm beginning to think this is due to the chaotic nature of file locking.

[09:57] <Xliff> 125% over last week's time, that is.

[10:05] <nine> lizmat: https://github.com/rakudo/rakudo/blob/d769af80e532bb6c5b43a643202b56229c6790d0/src/Raku/ast/variable-declaration.rakumod#L250 is wrong. $resolver.current-package only gives you the package that your declaration is in during the attach call. BEGIN processing may be triggered at a completely different point.

[10:10] <nine> lizmat: I'll fix it as part of my current work on a different constant issue

[10:18] *** Xliff left
[10:31] <nine> Also, shouldn't it be $package.WHO.EXISTS-KEY instead of $package.HOW.EXISTS-KEY?

[10:42] <nine> Oh oh....fixing those issues reveals a bug in the old frontend and a spectest:

[10:42] <nine> m: module Foo::Bar {}; BEGIN say Foo::.values; module Foo { constant Bar = 1; }; BEGIN say Foo::.values;

[10:42] <camelia> rakudo-moar d769af80e: OUTPUT: «((Bar))␤(1)␤»

[10:45] <discord-raku-bot> <Nemokosch> hm, is the former the bug?

[10:47] <nine> the former?

[10:47] <Geth> ¦ roast: 9264554973 | (Stefan Seifert)++ | S02-lexical-conventions/unspace.t

[10:47] <Geth> ¦ roast: Fix accidental re-declaration of our-scoped constant in same package

[10:47] <Geth> ¦ roast: 

[10:47] <Geth> ¦ roast: Constants are our-scoped by default. While an EVAL is a different

[10:47] <Geth> ¦ roast: lexical scope, it doesn't change the current package. So running two

[10:47] <Geth> ¦ roast: EVALs, each declaring the same our-scoped constant should yield a

[10:47] <Geth> ¦ roast: redeclaration error. However, rakudo did not check for this condition

[10:47] <Geth> ¦ roast: and silently replaced the old stash entry with the new one.

[10:48] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9264554973

[10:48] <Geth> ¦ rakudo/main: 84d1ec71e7 | (Stefan Seifert)++ | 3 files

[10:48] <Geth> ¦ rakudo/main: RakuAST: fix blocks that are part of constant initializers missing

[10:48] <Geth> ¦ rakudo/main: 

[10:48] <Geth> ¦ rakudo/main: With constant foo = { $_ }(1); we didn't add that block from the

[10:48] <Geth> ¦ rakudo/main: initializer to the QAST, so the QAST compiler would then complain about

[10:48] <Geth> ¦ rakudo/main: this.

[10:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/84d1ec71e7

[10:48] <Geth> ¦ rakudo/main: 1bfe7a0bef | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[10:48] <Geth> ¦ rakudo/main: RakuAST: fix subtle error in our-scoped constant exists check

[10:48] <Geth> ¦ rakudo/main: 

[10:48] <Geth> ¦ rakudo/main: Only at the time of the attach call is the resolver guaranteed to be at

[10:48] <Geth> ¦ rakudo/main: the package the declaration was made in. PERFORM-BEGIN may be triggered

[10:48] <Geth> ¦ rakudo/main: in a completely different place.

[10:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1bfe7a0bef

[10:48] <Geth> ¦ rakudo/main: e3e250c2fe | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[10:48] <Geth> ¦ rakudo/main: RakuAST: fix error in our-scoped constant exists check

[10:48] <Geth> ¦ rakudo/main: 

[10:48] <Geth> ¦ rakudo/main: Need to ask the stash, not the meta class

[10:48] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e3e250c2fe

[11:30] <Geth> ¦ rakudo/main: a620d0fb76 | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[11:30] <Geth> ¦ rakudo/main: RakuAST: workaround for substr error when reporting parse error

[11:30] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a620d0fb76

[11:35] <lizmat> nine: glad to see you're back

[11:36] <nine> Yeah, seems like today I've finally cought up on my sleep, too

[11:36] <lizmat> hehe

[11:36] <Geth> ¦ rakudo/main: ae4ce14a77 | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[11:36] <Geth> ¦ rakudo/main: RakuAST: throw correct exception on missing digit after decimal

[11:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ae4ce14a77

[11:36] <lizmat> meanwhile, it appears to me that VarDeclaration::Constant is borked ?

[11:36] <lizmat> https://gist.github.com/lizmat/0dfb6aca8962742ea6b975193c652d0f

[11:37] <nine> Oh darn... I forgot to make test. Seems I got a little rusty

[11:38] <lizmat> yeah, there are tests in t/../var.rakutest

[11:38] <lizmat> and they fail

[11:39] <Geth> ¦ rakudo/main: 6489eb8248 | (Elizabeth Mattijsen)++ | 3 files

[11:39] <Geth> ¦ rakudo/main: Fix deparsing/.raku on VarDeclaration::Constant

[11:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6489eb8248

[11:41] <nine> Ah, yes, fails with "Required named parameter 'initializer' not passed"

[11:41] <lizmat> not after ^^ fix

[11:41] <lizmat> then we haz another error

[11:44] <nine> No, still getting the same. And it makes sense, since the test really does not pass this parameter.

[11:45] <Geth> ¦ rakudo/main: 6c3468c8f0 | (Elizabeth Mattijsen)++ | 2 files

[11:45] <Geth> ¦ rakudo/main: Add deparsing/.raku for Type::Enum

[11:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6c3468c8f0

[11:45] <lizmat> argh... forgot to push changes to tests   :-(

[11:46] <Geth> ¦ rakudo/main: b3d704fe24 | (Elizabeth Mattijsen)++ | t/12-rakuast/var.rakutest

[11:46] <Geth> ¦ rakudo/main: Attempt to unbork VarDeclaration::Constant tests

[11:46] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/b3d704fe24

[11:46] <lizmat> nine ^^

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:08] <nine> Ah, even RAKUDO_RAKUAST=1 ./rakudo-m --target=qast -e 'dd constant foo = "bar"' shows what's going on

[12:16] <lizmat> I guess my QAST reading capability is below par

[12:19] <lizmat> ah, dd gets a Block instead of a QAST::Var ?

[12:31] <Geth> ¦ rakudo/main: c74e1608e3 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[12:31] <Geth> ¦ rakudo/main: RakuAST: fix constant declarations yielding code instead of value

[12:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c74e1608e3

[12:31] <Geth> ¦ rakudo/main: 3bc6e5254e | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[12:31] <Geth> ¦ rakudo/main: Fix infinite loop on declaring constants containing infinite lists.

[12:31] <Geth> ¦ rakudo/main: 

[12:31] <Geth> ¦ rakudo/main: my constant $l  = (−∞…∞); must not be sunk

[12:31] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3bc6e5254e

[12:33] * lizmat checks

[12:33] <nine> t/spec/S02-lexical-conventions/minimal-whitespace.t would pass if this:

[12:33] <nine> m: 42.:all

[12:33] <camelia> rakudo-moar b3d704fe2: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Decimal point must be followed by digit␤at <tmp>:1␤------> 342.⏏:all␤»

[12:34] <nine> wouldn't also report "Malformed postfix call" in addition to the expected sorry

[12:47] <lizmat> m: say Q|my constant foo = now|.AST

[12:47] <camelia> rakudo-moar b3d704fe2: OUTPUT: «===SORRY!===␤Unknown compilation input 'qast'␤»

[12:47] <lizmat> m: say Q|my constant foo = 42|.AST

[12:47] <camelia> rakudo-moar b3d704fe2: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::VarDeclaration::Constant.new(␤      scope       => "my",␤      name        => "foo",␤      initializer => RakuAST::IntLiteral.new(42)␤    )␤  )…»

[12:48] <nine> Required effort to implement RakuAST: |=============BEGIN TIME STUFF============--------PACKAGES-------.rest.|

[12:48] <lizmat> hehe

[12:51] <lizmat> ok, this gets weird: say Q|BEGIN now|.AST  works with RAKUDO_RAKUAST=1

[12:51] <lizmat> but not without it

[12:51] <lizmat> nine: so should I worry about that or not?

[12:52] <lizmat> it seems to go awry in self.IMPL-BEGIN-TIME-EVALUATE

[12:54] <nine> Honestly, I'd just ignore that for now. All of this is complicated enough, without trying to support every corner case on the old frontend as well.

[12:55] <lizmat> the meh thing is that "make test" on the old frontend will then fail, as I have a test for it

[12:56] <lizmat> I guess that test will go then for now  :-(

[12:56] <nine> Just todo it?

[12:57] <lizmat> todo won't cut it, as it dies

[13:03] <Geth> ¦ rakudo/main: e32bcd1f41 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[13:03] <Geth> ¦ rakudo/main: Tweak some .raku presentations

[13:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/e32bcd1f41

[13:03] <Geth> ¦ rakudo/main: 7f6cfaa82e | (Elizabeth Mattijsen)++ | t/12-rakuast/var.rakutest

[13:03] <Geth> ¦ rakudo/main: Add some more VarDeclaration::Constant tests

[13:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7f6cfaa82e

[13:07] <lizmat> 704 / 1354!

[13:15] <nine> indeed :)

[13:16] <lizmat> ok, on to writing some RakuAST::Type::Enum tests

[13:26] <Geth> ¦ rakudo/main: 003c775380 | (Stefan Seifert)++ | src/Raku/ast/call.rakumod

[13:26] <Geth> ¦ rakudo/main: RakuAST: Fix fully qualified calls to named routines

[13:26] <Geth> ¦ rakudo/main: 

[13:26] <Geth> ¦ rakudo/main: Fixes Foo::Bar::do-something() trying to call Foo::Bar::do.WHO

[13:26] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/003c775380

[13:26] <nine> 706

[13:28] <lizmat> whee!

[13:28] <lizmat> meanwhile, I see a test fail in operators  :-(

[13:31] <lizmat> aaahh.. it fails in v6.e.PREVIEW

[13:31] <lizmat> m: use v6.*; my %h = x => { :1a, :2b }, y => { :3a, :4b }; dd %h{"y";"a"}

[13:31] <camelia> rakudo-moar 003c77538: OUTPUT: «3␤»

[13:32] <lizmat> m: my %h = x => { :1a, :2b }, y => { :3a, :4b }; dd %h{"y";"a"}

[13:32] <camelia> rakudo-moar 003c77538: OUTPUT: «(3,)␤»

[13:32] <lizmat> is that an intentional change with v6.e 

[13:32] <lizmat> ?

[13:39] *** squashable6 left
[13:42] *** squashable6 joined
[13:46] <lizmat> looks like it is a correction of behaviour, as single literal arg always returns a single value, not a list

[13:50] <Geth> ¦ rakudo/main: 6c035ff246 | (Elizabeth Mattijsen)++ | 30 files

[13:50] <Geth> ¦ rakudo/main: Simplify boilerplate for RakUAST tests

[13:50] <Geth> ¦ rakudo/main: 

[13:50] <Geth> ¦ rakudo/main: Since "use v6.e.PREVIEW" now implies availability of RakuAST classes

[13:50] <Geth> ¦ rakudo/main: and we will get to that language version eventually, we might as well

[13:50] <Geth> ¦ rakudo/main: set it to that language version now.

[13:50] <Geth> ¦ rakudo/main: 

[13:50] <Geth> ¦ rakudo/main: Also, "use Test" implies "use MONKEY", so we don't need that either.

[13:50] <Geth> ¦ rakudo/main: 

[13:50] <Geth> ¦ rakudo/main: Also fix Multi-dimensional hash indexing test to 6.e semantics.

[13:50] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6c035ff246

[13:59] <lizmat> m: enum foo (a => 42, b => "bar")   # wow, that's an LTA message

[13:59] <camelia> rakudo-moar 003c77538: OUTPUT: «===SORRY!===␤Incompatible MROs in P6opaque rebless for types Str and foo␤»

[14:01] <lizmat> slightly closer to home:

[14:01] <lizmat> m: enum foo (:a<42>, :b<bar>)

[14:01] <camelia> rakudo-moar 003c77538: OUTPUT: «===SORRY!===␤Incompatible MROs in P6opaque rebless for types Str and foo␤»

[14:02] <lizmat> I wonder whether that shouldn't automatically downgrade the IntStr to Str

[14:02] <lizmat> m: enum foo of Str <a b c>

[14:02] <camelia> rakudo-moar 003c77538: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No such method 'set_of' for invocant of type␤'Perl6::Metamodel::EnumHOW'␤at <tmp>:1␤»

[14:03] <lizmat> seems I found a nest of LTAs  :-)

[14:28] <lizmat> m: say Q|<a b c>|.AST.statements[0].expression

[14:28] <camelia> rakudo-moar 6c035ff24: OUTPUT: «RakuAST::QuotedString.new(␤  segments   => (␤    RakuAST::StrLiteral.new("a b c"),␤  ),␤  processors => (␤    "words",␤    "val",␤  )␤)␤»

[14:30] <lizmat> ah, but the QAST returns a List as a WVal  *phew*

[14:56] <guifa> lizmat: the AST.raku returns a small error (I think) on RakuAST::Initializer::Assign.  It generates `RakuAST::Initializer::Assign.new(expression => foo)`, but it should be just `RakuAST::Initializer::Assign.new(foo)` 

[14:56] * lizmat checks

[14:57] <Geth> ¦ rakudo/main: 2b0d1019f7 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[14:57] <Geth> ¦ rakudo/main: RakuAST: make QuotedString.raku more in line with common usage

[14:57] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2b0d1019f7

[14:59] <lizmat> guifa: you're right  :-)    also with ::Bind

[15:00] * guifa maybe just got done writing about a thousand lines of RakuAST by hand last night so… his eye is a bit attuned to those little things haha

[15:00] <Geth> ¦ rakudo/main: a220d715a6 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[15:00] <Geth> ¦ rakudo/main: RakuAST: fix Initializer::Assign|Bind.raku

[15:00] <Geth> ¦ rakudo/main: 

[15:00] <Geth> ¦ rakudo/main: guifa++ for the spot

[15:00] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a220d715a6

[15:00] <guifa> (Also Comma is complaining about StatementList only accepting a single positional argument.  Not sure if that's a comma thing or Rakudo.  I'd imagine the signature should be a plus slurpy

[15:01] <lizmat> method new(*@statements, Bool :$trace)

[15:01] <lizmat> looks ok to me?

[15:06] <guifa> hmm, must be a comma issue then

[15:07] <lizmat> when does it complain exactly?  if there is only one argument?

[15:08] <lizmat> m:  dd RakuAST::StatementList.^find_method("new").signature

[15:08] <camelia> rakudo-moar 6c035ff24: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Use of RakuAST is experimental; please 'use experimental :rakuast'␤at <tmp>:1␤------> dd RakuAST::⏏StatementList.^find_method("new").signat␤    expecting any of:␤        argument list…»

[15:08] <lizmat> m:  use v6.*; dd RakuAST::StatementList.^find_method("new").signature

[15:08] <camelia> rakudo-moar 6c035ff24: OUTPUT: «:(RakuAST::StatementList: Any @statements, Bool :$trace)␤»

[15:09] <lizmat> so yeah, looks like the introspection on the class is off

[15:09] <lizmat> which is no surprise, considering how that class is put together  :-)

[15:10] <lizmat> does nqp have slurpies?

[15:10] <lizmat> yeah, looks like it does

[15:12] <lizmat> guifa please let me know if you spot more .raku issues

[15:12] <lizmat> there are no tests for it yet

[15:12] <guifa> lizmat: the opposite, it (Comma) complains if there's more than one argument.  It seems to run just fine

[15:13] <guifa> When the syntax highlighting bothers me too much, I just wrap it in an extra set of parentheses and profit

[15:13] <lizmat> I guess we either need to improve RakuAST's signatur introspection, or teach Comma to work a bit differently on RakuAST classes

[15:13] <lizmat> I guess the former would be best

[15:17] <lizmat> m: dd enum foo <a b c>   # TIL

[15:17] <camelia> rakudo-moar a220d715a: OUTPUT: «Map.new((:a(0),:b(1),:c(2)))␤»

[15:33] <ugexe> [Coke]: have you built windows jvm rakudo by chance? i'm wondering how it would act with those path length examples

[15:38] <[Coke]> i have not

[15:39] <[Coke]> my need for jvm stopped about 4.5 years ago when I changed $dayjobs, so I haven't been keeping up

[15:51] <guifa> lizmat: on a similar issue, RakuAST::Signature.new( parameters => ( … ) ), is a stickler for receiving a list.  Just spent a few minutes banging my head trying to fix my RAST::PrettyPrint only to realize I needed to add a comma lol

[15:51] <guifa> (so it maybe needs to be a slurpy, I think)

[15:52] <lizmat> sadly, RakuAST cannot take slurpies for named arguments

[15:52] <guifa> aaah

[15:53] <lizmat> and at that time, there are no multies

[16:12] <Geth> ¦ rakudo/main: 543ecd9d13 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[16:12] <Geth> ¦ rakudo/main: RakuAST: fixes for problems found with initial .raku tests

[16:12] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/543ecd9d13

[16:13] <Geth> ¦ rakudo/main: f2fff6eae6 | (Elizabeth Mattijsen)++ | 27 files

[16:13] <Geth> ¦ rakudo/main: RakuAST: add initial .raku tests

[16:13] <Geth> ¦ rakudo/main: 

[16:13] <Geth> ¦ rakudo/main: Basically only making sure that they don't die for now

[16:13] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/f2fff6eae6

[16:18] <lizmat> m: "use v6.e.PREVIEW; RakuAST::Node".EVAL

[16:18] <camelia> rakudo-moar a220d715a: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Use of RakuAST is experimental; please 'use experimental :rakuast'␤at /home/camelia/EVAL_0:1␤------> use v6.e.PREVIEW; RakuAST::⏏Node␤    expecting any of:␤        term␤»

[16:18] <lizmat> vrurg: opinions ^^

[16:19] <nine> What a perfect waste of time.....at least our washing machine seems to still be water tight. Lesson of the day: maybe just hire a professional and do what you're really good at.

[16:25] <lizmat> well, at least you learned to call a professional  ?   :-)

[16:25] <lizmat> vrurg: I guess your remark: "that location is ok, but I would make it in the Grammar, right after <lang-version> at line 839"

[16:25] <lizmat> applies, but I don't see *what* exactly I should be adding there

[16:26] <lizmat> I mean: how do I get the language revision there ?

[16:39] <Geth> ¦ rakudo/main: a003c3c80e | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[16:39] <Geth> ¦ rakudo/main: RakuAST: fix QuotedString.raku if there are no processors

[16:39] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a003c3c80e

[16:58] <lizmat> afk&

[17:45] <Geth> ¦ rakudo/main: 7e334408fd | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[17:45] <Geth> ¦ rakudo/main: RakuAST: fix misc heredoc parsing errors due to missing cheat_heredoc

[17:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7e334408fd

[17:45] <Geth> ¦ rakudo/main: 6669c0f2f4 | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[17:45] <Geth> ¦ rakudo/main: RakuAST: properly unindent heredocs when tabs are involved

[17:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/6669c0f2f4

[17:45] <Geth> ¦ rakudo/main: 377f6015b0 | (Stefan Seifert)++ | src/Raku/Grammar.nqp

[17:45] <Geth> ¦ rakudo/main: RakuAST: fix heredocs accidentally getting treated as inside scope

[17:45] <Geth> ¦ rakudo/main: 

[17:45] <Geth> ¦ rakudo/main: In cases such as the following, the heredoc must be treated as outside

[17:45] <Geth> ¦ rakudo/main: the scope from which it was referenced (as it's body is actually

[17:45] <Geth> ¦ rakudo/main: outside):

[17:45] <Geth> ¦ rakudo/main: sub f() { my $a = 1; q:to/END/ }

[17:45] <Geth> ¦ rakudo/main: $a

[17:45] <Geth> ¦ rakudo/main: END

[17:45] <Geth> ¦ rakudo/main: 

[17:45] <Geth> ¦ rakudo/main: To accomplish this, cheat_heredoc temporarily leaves the current scope

[17:45] <Geth> ¦ rakudo/main: and then re-enters it. This is ugly, but then, it's already a cheat...

[17:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/377f6015b0

[17:46] <nine> 707 :)

[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:42] <Geth> ¦ rakudo/main: dadeb74e3d | (Elizabeth Mattijsen)++ | 2 files

[18:42] <Geth> ¦ rakudo/main: RakuAST: add .raku roundtripping tests for calls

[18:42] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/dadeb74e3d

[18:51] <Geth> ¦ rakudo/win-rel2abs-longpath: ad8065d9e0 | (Nick Logan)++ (committed using GitHub Web editor) | src/core.c/IO/Spec/Win32.pm6

[18:51] <Geth> ¦ rakudo/win-rel2abs-longpath: [win]: Fix rel2abs handling of long path prefixes

[18:51] <Geth> ¦ rakudo/win-rel2abs-longpath: 

[18:51] <Geth> ¦ rakudo/win-rel2abs-longpath: The previous behavior did not generate correct absolute paths for UNC paths (like `\\\\UNC\\share\\C:\\foo\\bar.txt`) or long/raw paths (like `\\\\?\\C:\\foo\\bar.txt`) due to the way the `rel2abs` method decides when a path is relative and thus needs to be transformed. This updates the windows version of `rel2abs` to check for absoluteness using `.is-absolute`, which allows one to get the expected

[18:51] <Geth> ¦ rakudo/win-rel2abs-longpath: review: https://github.com/rakudo/rakudo/commit/ad8065d9e0

[18:51] <Geth> ¦ rakudo: ugexe++ created pull request #5226: [win]: Fix rel2abs handling of long path prefixes

[18:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/5226

[19:24] <Geth> ¦ rakudo/main: 7f3802c49a | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[19:24] <Geth> ¦ rakudo/main: RakuAST: some .raku fixes, found while writing tests

[19:24] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/7f3802c49a

[19:57] <lizmat> meh, getting an error at src/Raku/ast/call.rakumod line 714   and it only has 709 lines  :-(

[20:07] <nine> off by....a few?

[20:10] *** tellable6 left
[20:10] *** evalable6 left
[20:10] *** gfldex left
[20:10] *** djinni` left
[20:10] *** samcv left
[20:10] *** nativecallable6 left
[20:10] *** benchable6 left
[20:10] *** sourceable6 left
[20:10] *** bloatable6 left
[20:10] *** unicodable6 left
[20:10] *** statisfiable6 left
[20:10] *** bartolin_ left
[20:10] *** japhb left
[20:10] *** jjatria left
[20:10] *** sivoais left
[20:11] *** tellable6 joined
[20:11] *** evalable6 joined
[20:11] *** gfldex joined
[20:11] *** djinni` joined
[20:11] *** samcv joined
[20:11] *** nativecallable6 joined
[20:11] *** benchable6 joined
[20:11] *** sourceable6 joined
[20:11] *** bloatable6 joined
[20:11] *** unicodable6 joined
[20:11] *** statisfiable6 joined
[20:11] *** bartolin_ joined
[20:11] *** japhb joined
[20:11] *** jjatria joined
[20:11] *** sivoais joined
[20:12] *** djinni` left
[20:14] *** djinni` joined
[20:17] *** sivoais left
[20:18] *** sivoais joined
[20:29] <vrurg> lizmat: I was away, sorry. nqp::getcomp().language_revision. With the current implementations it return an integer where 1 stands for c, and so on.

[20:29] <vrurg> *returns

[20:29] <lizmat> ok i'll try that

[20:33] <vrurg> Just in case, I'll be away for a while again.

[20:33] <lizmat> ack

[20:39] *** Xliff joined
[20:39] <Xliff> .

[20:40] <Xliff> lizmat: Did you get my message?

[20:40] <lizmat> About the RakuAST article ?

[20:41] <Xliff> Yep!

[20:41] <lizmat> did you read my response ?

[20:42] <Xliff> No. For some reason I don't think it got sent.

[20:42] <lizmat> I'm working on it

[20:42] <Xliff> OK

[20:55] <Geth> ¦ rakudo/main: c32836f271 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Raku.pm6

[20:55] <Geth> ¦ rakudo/main: RakuAST: more .raku fixes / tweaks

[20:55] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c32836f271

[20:55] <lizmat> blog post driven development  :)

[20:59] <Geth> ¦ rakudo/main: 93609de3c7 | (Elizabeth Mattijsen)++ | 8 files

[20:59] <Geth> ¦ rakudo/main: RakuAST: add more .raku roundtrip tests

[20:59] <Geth> ¦ rakudo/main: 

[20:59] <Geth> ¦ rakudo/main: And handle more tests in loops

[20:59] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/93609de3c7

[21:00] <lizmat> and that concludes my hacking for today&

[21:16] <Xliff> lizmat: So you are writing your blog post as you are working on RAST?

[23:40] <lizmat> yeah, because I found a number of issues :-(

[23:41] <gfldex> lizmat: I know that feeling. :)

