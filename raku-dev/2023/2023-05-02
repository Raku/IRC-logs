[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:04] *** squashable6 left
[01:06] *** squashable6 joined
[01:47] *** MasterDuke joined
[01:47] <MasterDuke> nine: pushed what i have so far to https://github.com/rakudo/rakudo/pull/5242

[02:33] *** MasterDuke left
[02:34] *** elcaro_ joined
[02:38] <elcaro_> bisectable6: old=2023.02 https://gist.githubusercontent.com/0racle/84b07e193a4e7efd08d92b7d691855ed/raw/84b41daa7848dea755524a22e27b2e6c4f21a7ce/eval-test.raku

[02:38] <bisectable6> elcaro_, Successfully fetched the code from the provided URL

[02:38] <bisectable6> elcaro_, On both starting points (old=2023.02 new=80c35e4) the exit code is 0 and the output is identical as well

[02:38] <bisectable6> elcaro_, Output on both points: «26␤»

[02:44] <elcaro_> bisectable6: old=2022.07 https://gist.githubusercontent.com/0racle/84b07e193a4e7efd08d92b7d691855ed/raw/c6aa34d2536fd8b3d0a4b2f363ccbec6eca41b1a/eval-test.raku

[02:44] <bisectable6> elcaro_, Successfully fetched the code from the provided URL

[02:44] <bisectable6> elcaro_, Bisecting by output (old=2022.07 new=80c35e4) because on both starting points the exit code is 1

[02:48] <elcaro_> oops, I messed up that gist.

[02:48] <elcaro_> One more time

[02:48] <elcaro_> bisectable6: old=2022.07 https://gist.githubusercontent.com/0racle/84b07e193a4e7efd08d92b7d691855ed/raw/957ed6cc2c8007b776a2f1d814830bc084b53f7a/eval-test.raku

[02:49] *** bisectable6 left
[02:49] <elcaro_> I think I killed bisectable :(

[02:49] <elcaro_> In any case... That last gist I posted breaks between 2022.07 and 2023.02

[02:51] *** bisectable6 joined
[02:53] <elcaro_> bisectable6: old=2022.07 new=2023.02 https://gist.githubusercontent.com/0racle/84b07e193a4e7efd08d92b7d691855ed/raw/957ed6cc2c8007b776a2f1d814830bc084b53f7a/eval-test.raku

[02:53] <bisectable6> elcaro_, Successfully fetched the code from the provided URL

[02:53] <bisectable6> elcaro_, Bisecting by exit code (old=2022.07 new=2023.02). Old exit code: 0

[02:57] *** bisectable6 left
[03:00] *** bisectable6 joined
[03:02] <elcaro_> Alright, bisectable can't find it... a whole bunch of commits couldn't be tested, but somewhere since 2022.07 it broke

[03:09] <elcaro_> Oh, it's also fine in 2022.12. One last try...

[03:10] <elcaro_> bisectable6: old=2022.12 new=2023.02 https://gist.githubusercontent.com/0racle/84b07e193a4e7efd08d92b7d691855ed/raw/957ed6cc2c8007b776a2f1d814830bc084b53f7a/eval-test.raku

[03:10] <bisectable6> elcaro_, Successfully fetched the code from the provided URL

[03:10] <bisectable6> elcaro_, Bisecting by exit code (old=2022.12 new=2023.02). Old exit code: 0

[03:14] *** bisectable6 left
[03:16] *** bisectable6 joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:51] *** sena_kun joined
[08:51] *** reportable6 left
[08:51] *** squashable6 left
[08:51] *** evalable6 left
[08:51] *** benchable6 left
[08:51] *** tellable6 left
[08:51] *** benchable6 joined
[08:51] *** squashable6 joined
[08:52] *** evalable6 joined
[08:52] *** reportable6 joined
[08:54] *** tellable6 joined
[08:59] <elcaro_> FWIW, I manually built commit 9b8a160e42e7ecf0120eb21ae45cc92bf02d110b (RakuAST: implement support for LEAVE phase) which is the first commit after the 2022.12 release, and it's broken there

[08:59] *** linkable6 left
[08:59] <elcaro_> So... unless I'm mistaken, I think that's where the code in the above gist started failing.

[09:00] *** linkable6 joined
[09:00] <elcaro_> It's been a while since I was building Raku from scratch, but I built a few commits to  track it down, between each build I blew away the `install` folder just to be sure.

[09:01] <discord-raku-bot> <Nemokosch> that commit doesn't say a lot... it's probably the RakuAST branch merge overall that broke something

[09:02] <elcaro_> yeah... I know there was a lot going on in RakuAST branch that got merged... which it's why I said FWIW. I'm not sure how to track it down any further.

[09:07] <discord-raku-bot> <Nemokosch> by the way, the pod stuff is not needed

[09:08] <discord-raku-bot> <Nemokosch> given '2 * 3 + (4 * 5)' -> $line is enough

[09:10] <discord-raku-bot> <Nemokosch> hell, even  my $line = '2 * 3 + (4 * 5)'; {         say $line.trans('+*' => 'pt').EVAL; }  is enough

[09:11] <discord-raku-bot> <Nemokosch> BUT that block is needed so you might call this a golf

[09:12] <discord-raku-bot> <Nemokosch> okay... even  {         say '2 * 3 + (4 * 5)'.trans('+*' => 'pt').EVAL; }  is enough

[09:12] <discord-raku-bot> <Nemokosch> seems like the EVAL inside the block doesn't see the operators defined outside

[09:12] <lizmat> you don't need the .trans

[09:14] <discord-raku-bot> <Nemokosch> and one operator is enough

[09:16] <lizmat> yeah, the only thing you need to make it fail, is to have the EVAL be inside a block

[09:19] <lizmat> m: sub infix:<t>($a, $b) { $a * $b }; say '6 t 7'.EVAL; say '6 t 7'.EVAL if 42; if 42 { say '6 t 7'.EVAL }

[09:19] <camelia> rakudo-moar 80c35e427: OUTPUT: «42␤===SORRY!=== Error while compiling /home/camelia/EVAL_2␤Two terms in a row␤at /home/camelia/EVAL_2:1␤------> 36⏏ t 7␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement …»

[09:21] <lizmat> I'll make an issue for it

[09:22] <discord-raku-bot> <Nemokosch> elcaro: the thing is, 2022.12 was created from a different branch, or better said, anything ever since has been created from a different branch

[09:23] <lizmat> bisectable6: old=2022.07  sub infix:<t>($a, $b) { $a * $b }; if 42 { say '6 t 7'.EVAL }

[09:23] <bisectable6> lizmat, On both starting points (old=2022.07 new=80c35e4) the exit code is 1 and the output is identical as well

[09:23] <bisectable6> lizmat, https://gist.github.com/0fbcc6a6d93b92562c188ddf0d95c297

[09:23] <discord-raku-bot> <Nemokosch> so it's probably not like "it broke inbetween" but one would need to track the current main branch backwards to times when it hasn't been used for releases

[09:23] <lizmat> bisectable6: old=2022.02  sub infix:<t>($a, $b) { $a * $b }; if 42 { say '6 t 7'.EVAL }

[09:23] <bisectable6> lizmat, On both starting points (old=2022.02 new=80c35e4) the exit code is 1 and the output is identical as well

[09:23] <bisectable6> lizmat, https://gist.github.com/32dbbb0d9a79f25ead215abc6de6f060

[09:23] <discord-raku-bot> <Nemokosch> the bisecting should be done on that branch

[09:23] <lizmat> bisectable6: sub infix:<t>($a, $b) { $a * $b }; if 42 { say '6 t 7'.EVAL }

[09:23] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[09:25] <bisectable6> lizmat, Output on all releases: https://gist.github.com/ed1c98b2dea0126ebd9f5b5132b6c8d1

[09:25] <bisectable6> lizmat, Bisecting by exit code (old=2017.02 new=2017.03). Old exit code: 0

[09:25] <discord-raku-bot> <Nemokosch> or was the rakuast branch rebased at least before turning it into the main branch?

[09:25] <discord-raku-bot> <Nemokosch> rebased to the tip of master

[09:25] <lizmat> pretty sure it was rebased

[09:25] <bisectable6> lizmat, bisect log: https://gist.github.com/a9454f1a64c3693708cd5bce8eacae7a

[09:25] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/3da94d0c769abfc3604dd298b832cf2f

[09:32] <lizmat> bisectable6: old=2017.02 new=2017.03  sub infix:<t>($a, $b) { $a * $b }; if 42 { say '6 t 7'.EVAL }

[09:32] <bisectable6> lizmat, Bisecting by exit code (old=2017.02 new=2017.03). Old exit code: 0

[09:32] <bisectable6> lizmat, bisect log: https://gist.github.com/a70ff120388c5e00dc9a0bc9e0c806b9

[09:32] <bisectable6> lizmat, There are 25 candidates for the first “new” revision. See the log for more details

[09:42] <lizmat> https://github.com/rakudo/rakudo/issues/5257

[09:54] <Geth> ¦ rakudo/main: ae7a219c94 | (Elizabeth Mattijsen)++ | src/Raku/ast/compunit.rakumod

[09:54] <Geth> ¦ rakudo/main: RakuAST: make sure you can call HLL methods on $=finish

[09:54] <Geth> ¦ rakudo/main: 

[09:54] <Geth> ¦ rakudo/main: Instead of getting an error such as:

[09:54] <Geth> ¦ rakudo/main:   No such method 'lines' for invocant of type 'BOOTStr'.

[09:54] <Geth> ¦ rakudo/main:   Found 'lines' on type 'Cool'

[09:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ae7a219c94

[09:54] <lizmat> sadly no additional test files passing

[11:36] <Geth> ¦ rakudo/main: c55455d73d | (Elizabeth Mattijsen)++ | 2 files

[11:36] <Geth> ¦ rakudo/main: RakuAST: fix rules for determing implied code blocks

[11:36] <Geth> ¦ rakudo/main: 

[11:36] <Geth> ¦ rakudo/main: Previously, it was assumed that the indentation level of the

[11:36] <Geth> ¦ rakudo/main: =begin pod would be taken as a base to determine an implied code

[11:36] <Geth> ¦ rakudo/main: block.  But it turns out it is indentation level of the last seen

[11:36] <Geth> ¦ rakudo/main: doc block.

[11:36] <Geth> ¦ rakudo/main: 

[11:36] <Geth> ¦ rakudo/main: <…commit message has 19 more lines…>

[11:36] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c55455d73d

[11:36] <lizmat> 801!

[11:46] <lizmat> m: =begin pod␤E<alpha;beta;gamma>␤=end pod␤say $=pod.head.contents.head.contents.head.contents

[11:46] <camelia> rakudo-moar ae7a219c9: OUTPUT: «[α β γ]␤»

[11:47] <lizmat> TIL you can have multiple ; separated entries in E<>

[11:47] <lizmat> https://docs.raku.org/language/pod#Unicode doesn't document this

[11:51] <lizmat> m: =begin pod␤E<171;space;raquo>␤=end pod␤say $=pod.head.contents.head.contents.head.contents

[11:51] <camelia> rakudo-moar ae7a219c9: OUTPUT: «===SORRY!===␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:4␤------> ead.contents.head.contents.head.contents⏏<EOL>␤Other potential difficulties:␤    "space" is n…»

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:35] <Geth> ¦ rakudo/main: 5965d7fb00 | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[12:35] <Geth> ¦ rakudo/main: RakuAST: fix deparsing of E<> markup

[12:35] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/5965d7fb00

[13:33] *** lizmat left
[14:04] *** lizmat joined
[15:42] <[Coke]> malformed utf throws an adhoc exception - we should probably have a specific exception here. (this is probably true for almost all adhoc exceptions in core)

[15:43] <[Coke]> I find myself using the pattern of CATCHING everything and basically ignoring it, and then checking to see if my object is in a reasonable state ("did .decode result in a non-empty string?") rather than using real exception handling because peeking in the message is gross.

[15:44] <[Coke]> Would love to see that also be part of 6.e (exceptions everywhere)

[16:00] <lizmat> m: =begin pod␤E<LATIN CAPITAL LETTER A>␤=end pod␤say $=pod.head.contents.head.contents.head.contents

[16:00] <camelia> rakudo-moar 5965d7fb0: OUTPUT: «[A]␤»

[16:00] <lizmat> TIL you can also specify Unicode codepoint names in E<>

[16:00] <lizmat> which is also not documented

[16:23] <Geth> ¦ rakudo/main: 8e51307821 | (Elizabeth Mattijsen)++ | t/12-rakuast/doc-markup.rakutest

[16:23] <Geth> ¦ rakudo/main: RakuAST: fixup tests, we use Str, not RakuAST::StrLiteral

[16:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8e51307821

[16:23] <Geth> ¦ rakudo/main: 2e3690bdaf | (Elizabeth Mattijsen)++ | 6 files

[16:23] <Geth> ¦ rakudo/main: RakuAST: various pod rendering fixes

[16:23] <Geth> ¦ rakudo/main: 

[16:23] <Geth> ¦ rakudo/main: - don't create empty paragraphs from the actions

[16:23] <Geth> ¦ rakudo/main: - allow for empty =for doc blocks

[16:23] <Geth> ¦ rakudo/main: - make argument to RakuAST::Doc::Block.set-(atoms|meta) optional to

[16:23] <Geth> ¦ rakudo/main:   allow for resetting

[16:23] <Geth> ¦ rakudo/main: - added stringification for RakuAST::Doc::Markup, use also in deparse

[16:23] <Geth> ¦ rakudo/main: - allow for unicode code point names in E<> sequences

[16:23] <Geth> ¦ rakudo/main: - allow for multiple values in a E<> sequence, separated by ;

[16:23] <Geth> ¦ rakudo/main: - fix podification of RakuAST::Doc::Markup

[16:23] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/2e3690bdaf

[16:23] <lizmat> 802

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:15] <vrurg> [Coke]: that was something I started but never completed. See throw_or_die calls scattered here and there.

[18:38] <[Coke]> Do core devs agree that most user-facing exceptions should be typed? Seems like something that could be implemented by non-core devs.

[18:38] <[Coke]> (except for where stuck in NQP or some parsing situations)

[18:40] <lizmat> I agree

[18:40] <lizmat> OTOH, I'm not sure whether they should be considered part of the language

[18:40] <lizmat> but rather an implementation-detail

[18:41] <lizmat> but that's longer term  :-)

[18:45] <[Coke]> I think having them be spec is required.

[18:45] <[Coke]> or else you're stuck with whatever implementation you wrote your code for.

[18:46] <[Coke]> and I think it's ok to turn an adhoc into an typed in the existing compiler version onward, but testing that it's that type should only be in the next (yet unreleased) language version

[18:46] <japhb> Having spec'ed superclasses is a requirement.  Subclasses maybe not.  (E.g. there could be an OS error on one platform that cannot happen on another, which can fail in a different way -- but they might both be considered process control exceptions or so.)

[18:46] <[Coke]> so we could make malformed UTF8 a typed exception now in v6.c and nothing should care, but we can't enforce it until 6.e

[18:47] <[Coke]> japhb: fair.

[18:47] <japhb> For general non-platform specific stuff like malformed UTF-8, I agree with you.

[19:25] *** evalable6 left
[19:25] *** linkable6 left
[19:27] *** evalable6 joined
[19:28] *** linkable6 joined
[20:41] *** linkable6 left
[20:41] *** benchable6 left
[20:41] *** notable6 left
[20:41] *** statisfiable6 left
[20:41] *** releasable6 left
[20:41] *** greppable6 left
[20:41] *** committable6 left
[20:41] *** shareable6 left
[20:41] *** evalable6 left
[20:41] *** nativecallable6 left
[20:41] *** unicodable6 left
[20:41] *** quotable6 left
[20:41] *** tellable6 left
[20:41] *** squashable6 left
[20:41] *** coverable6 left
[20:41] *** sourceable6 left
[20:41] *** reportable6 left
[20:41] *** bloatable6 left
[20:41] *** bisectable6 left
[20:41] *** coverable6 joined
[20:41] *** sourceable6 joined
[20:42] *** benchable6 joined
[20:42] *** bisectable6 joined
[20:42] *** unicodable6 joined
[20:42] *** releasable6 joined
[20:42] *** linkable6 joined
[20:42] *** evalable6 joined
[20:43] *** squashable6 joined
[20:43] *** bloatable6 joined
[20:43] *** nativecallable6 joined
[20:43] *** statisfiable6 joined
[20:43] *** notable6 joined
[20:43] *** tellable6 joined
[20:43] *** greppable6 joined
[20:43] *** shareable6 joined
[20:43] *** quotable6 joined
[20:43] *** reportable6 joined
[20:43] *** committable6 joined
[21:45] *** sena_kun left
[23:06] *** linkable6 left
[23:06] *** evalable6 left
[23:08] *** evalable6 joined
[23:08] *** linkable6 joined
