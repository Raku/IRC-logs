[02:50] *** discord-raku-bot left
[02:50] *** discord-raku-bot joined
[02:58] *** AlexDaniel left
[04:17] *** lucs left
[04:17] *** lucs joined
[08:27] *** samcv left
[08:27] *** samcv joined
[08:47] <nine> I would not give module authors a means to detect running with RakuAST grammar. They should not have to care.

[09:39] *** sena_kun joined
[10:59] *** sena_kun left
[11:16] *** zostay left
[11:16] *** zostay joined
[11:23] <discord-raku-bot> <librasteve> https://rakudo.org/ is not reachable anymore -  Origin is unreachable Error code 523  <== raku.org is down (just copying over from the Discord raku channel is case there are more folk over the bridge

[11:23] <discord-raku-bot> <librasteve> )

[11:25] <lizmat> yes, I also just noticed, infra team is on it

[11:34] <nine> Unfortunately I don't have any direct access anymore, since I don't work at Atikon anymore

[11:58] <discord-raku-bot> <librasteve> ++

[12:22] <discord-raku-bot> <nemokosch> raku.org is also pretty much dead, for what it's worth

[12:38] <lizmat> yeah, the problems are known :-(

[13:04] *** Util left
[13:04] *** Util joined
[14:45] *** sena_kun joined
[15:00] <Geth> ¬¶ roast: 31115d7f21 | (Daniel Sockwell)++ | S05-grammar/example.t

[15:00] <Geth> ¬¶ roast: Re-add test for grammar {token <return> {}}

[15:00] <Geth> ¬¶ roast: 

[15:00] <Geth> ¬¶ roast: This test was previously todo'ed and then removed.  The bug preventing

[15:00] <Geth> ¬¶ roast: it from passing has now been fixed rakudo/rakudo commit

[15:00] <Geth> ¬¶ roast: bd2c719ed4126a5738cda52e114906accf6d9b3c.

[15:00] <Geth> ¬¶ roast: review: https://github.com/Raku/roast/commit/31115d7f21

[15:04] <codesections> Ha, I'd kind of meant ^^^ to be a PR rather than a commit (I pushed to `upstream` instead of `main`)

[15:04] <codesections> But I don't think it's controversial/worth reverting and doing the PR 

[15:04] <codesections> (please feel free to revert if you disagree)

[15:05] <codesections> S/`main`/`origin`/

[15:05] <codesections> *shakes head at self*

[15:50] <ab5tract_> nine: any remaining concerns on https://github.com/rakudo/rakudo/pull/5453 or https://github.com/rakudo/rakudo/pull/5462?

[15:56] <tbrowder__> ab5tract_: are you the one who gave ‚ÄúMind-bending* talk last week?

[15:56] <codesections> ab5tract_: I haven't followed those PRs super closely; where do the land on rakudo/rakudo#5455

[15:56] <linkable6> RAKUDO#5455 [open]: https://github.com/rakudo/rakudo/issues/5455 [Addressed in RakuAST] Rakudo should detect multi sub duplicates at compile time

[15:56] <ab5tract_> That‚Äôs me

[15:57] <codesections> Will multi-sub dups now be a worry?  Or sorry? Or panic?

[15:58] <tbrowder__> i‚Äôm watching it again as i am washing dishes üòé what is a ‚Äúblorst?‚Äù sounds like a sausage? or a chunk of RakuAST?

[15:59] <discord-raku-bot> <nemokosch> block or statement

[15:59] <ab5tract_> codesections: the consensus was to make it a worry, with perhaps an eye towards eventually making it a sorry or otherwise resolve dispatch such that `my Int $f = 5; .*&foo` would call all `&foo(Int $)` candidates in succession

[15:59] <discord-raku-bot> <nemokosch> BL OR ST

[16:00] <ab5tract_> tbrowder__: it‚Äôs once it starts sounding natural that you know you‚Äôre really stewing in the Rakudo internals :)

[16:01] <codesections> tbh, I'd eat a ‚Äúblorst‚Äù ‚ò∫

[16:01] <codesections> > .*&foo` would call all `&foo(Int $)` candidates in succession

[16:01] <codesections> in order of declaration?

[16:03] <ab5tract_> codesections: that part wasn‚Äôt specified, but that would make sense. I guess another option would be lexical locality.

[16:03] <ab5tract_> That‚Äôs for a whole new ticket and discussion though :)

[16:05] <tbrowder__> ah i‚Äôm waking up now, vague memory of you saying that in talk‚Ä¶

[16:12] <tbrowder__> makes me wanna dive in the ‚Äúsoup‚Äù

[16:13] <ab5tract_> Codesections: good! Hop in!

[16:14] <codesections> S/codesections/tbrowder__/ ?

[16:15] <ab5tract_> yes, sorry

[16:15] <tbrowder__> so is the drill something like: take a basic or roast test that fails and tackle it?

[16:15] <ab5tract_> Yeah, that‚Äôs one approach.

[16:16] <ab5tract_> Another is to pick up a ticket marked with `RAKUDO_RAKUAST=1`

[16:17] <tbrowder__> i‚Äôll take a peek‚Ä¶bye for now

[16:17] <ab5tract_> rakudo/rakudo#5446 is probably a good one

[16:17] <linkable6> RAKUDO#5446 [open]: https://github.com/rakudo/rakudo/issues/5446 [RAKUDO_RAKUAST=1] Token proto definitions do not work

[16:18] <ab5tract_> It can be a bit hard to gauge just how difficult something is to fix at the outset

[16:19] <ab5tract_> If you find yourself in the weeds or you have any questions at all really, don‚Äôt hesitate to ping me

[16:21] <ab5tract_> Not because I‚Äôll necessarily know what‚Äôs going on but because I‚Äôm willing to dig in with you and figure it out.

[16:27] *** elcaro left
[16:27] *** elcaro joined
[16:46] *** ab5tract_ is now known as ab5tract

[17:30] <tbrowder__> thnx so much. prob won‚Äôt get there soon. advent post‚Ä¶etc

[17:35] <ab5tract> gotcha

[20:56] <nine> Seems like tests are failing for me on current main:

[20:57] <nine> nine@sunshine:~/rakudo (main =)> make && RAKUDO_RAKUAST=1 ./rakudo-m --ll-exception -Ilib t/04-nativecall/01-argless.t

[20:57] <nine> make: Nothing to be done for 'all'.

[20:57] <nine> No such method 'new' for invocant of type 'VMNull'.  Found 'new' on

[20:57] <nine> type 'Mu'

[20:57] <nine>    at SETTING::src/core.c/Exception.rakumod:65  (/home/nine/rakudo/blib/CORE.c.setting.moarvm:throw)

[20:57] <nine>  from src/Perl6/Metamodel/Configuration.nqp:60  (/home/nine/rakudo/blib/Perl6/Metamodel.moarvm:throw_or_die)

[20:57] <nine>  from src/Perl6/bootstrap.c/BOOTSTRAP.nqp:4227  (/home/nine/rakudo/blib/Perl6/BOOTSTRAP/v6c.moarvm:)

[20:57] <nine>  from /home/nine/rakudo/lib/NativeCall.rakumod (NativeCall):1  (/home/nine/rakudo/t/04-nativecall/.precomp/0ACB0BE507596498D0A5B81A8BB94F2BEE3B3E25/F1/F15ABDADCE43D098A24E37FC2D59D2FCF6B8194B:<unit>)

[21:04] <ugexe> i think that test has been broke since https://github.com/rakudo/rakudo/pull/5334/files

[21:06] <ugexe> we can revert that commit, i just don't think anyone knows if that commit is doing anything wrong and raku ast is just missing a piece for it to work

[21:13] <nine> I wonder why there is a global setup-lock in the first place. Can we not run multiple native routine setups in parallel?

[21:14] <nine> Unfortunately that commit's message does not say in what situation exactly we failed or why the previous implementation was wrong.

[21:22] <ugexe> I didn't know if it was wrong. But I also couldn't think of why the change I applied would be wrong

[21:24] <nine> In a reduced example that line actually does fine on RakuAST

[21:30] <ugexe> I think the issue is also tied to roles and/or traits in some way

[21:31] <ugexe> at least i think i remember that being the case when i was trying to solve the issue my change was trying to work around

[23:20] <coleman> rakudo.org hosted binaries that many packagers depend on. It will be broken until those binaries are re-hosted somehow. https://github.com/rakudo/rakudo.org/issues/94

[23:21] <coleman> I am signing off tonight I will work on this tomorrow by building this site from scratch. If anyone knows about backups, please comment on the issue

[23:29] <ugexe> i wonder if we could host binaries on github

[23:32] *** sena_kun left
