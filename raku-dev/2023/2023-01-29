[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[01:01] *** Nemokosch left
[02:22] *** epony left
[02:23] *** epony joined
[03:01] *** codesections left
[05:02] *** MasterDuke left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[08:06] <nine> lizmat: sounds more like a DEPARSE issue, since we do create a Type::Definedness at it generates correct, working code from that.

[08:07] <nine> I'm pretty sure we'll have to re-do the Definedness, Concrete and Parameterized types at some point, but for another reason: they currently don't stack. Instead of a name of a base type, they should be built onto a RakuAST::Type

[09:08] <Geth> ¦ rakudo/main: 1072872e17 | (Stefan Seifert)++ | src/Raku/Actions.nqp

[09:08] <Geth> ¦ rakudo/main: RakuAST: un-break the REPL

[09:08] <Geth> ¦ rakudo/main: 

[09:08] <Geth> ¦ rakudo/main: The current REPL implementation loads the REPL class by running a comp

[09:08] <Geth> ¦ rakudo/main: unit that's just "REPL", i.e. evaluates the class name. It does so by

[09:08] <Geth> ¦ rakudo/main: stariting the compiler with :outer_ctx(nqp::null()). The old frontend

[09:08] <Geth> ¦ rakudo/main: took this as a signal, that the comp unit's result is wanted. The

[09:08] <Geth> ¦ rakudo/main: RakuAST frontend expected a concrete outer_ctx instead.

[09:08] <Geth> ¦ rakudo/main: 

[09:08] <Geth> ¦ rakudo/main: Fix by adopting the same criteria as the old frontend.

[09:08] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/1072872e17

[09:09] *** Xliff joined
[09:10] <Xliff> P6-GLib suite timing statistics for Raku 2022.12.1092.g.85240.f.0.c.2

[09:10] <Xliff> Total number of projects: 33 (502775 loc)

[09:10] <Xliff> Total non-parallel compile times: 8774.120 (265.882 avg)

[09:10] <Xliff> Total parallel compile times: 2122.001 (64.303 avg) 4.135x speedup

[09:10] <Xliff> Noting over 600s increase in parallel compile times since the run from 1/15/2023 for the second week in a row.

[09:11] <Xliff> Has anything changed in the file locking during parallel comp?

[09:54] <discord-raku-bot> <Nemokosch> lizmat: do you by any chance remember what this commit https://github.com/rakudo/rakudo/commit/6cded78e9a1fc8adc678eea52a69dafb63e27174 broke?

[10:06] <Geth> ¦ rakudo/main: bab7f837b6 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[10:06] <Geth> ¦ rakudo/main: RakuAST: give slurpy placeholder params a fixed order in the signature

[10:06] <Geth> ¦ rakudo/main: 

[10:06] <Geth> ¦ rakudo/main: The old frontend added slurpy placeholder parameters to the signature in

[10:06] <Geth> ¦ rakudo/main: the order of appearance in the block. At least one spectest relied on

[10:06] <Geth> ¦ rakudo/main: this. In general we need compilation results to be reproducible.

[10:06] <Geth> ¦ rakudo/main: However, we go through placeholders in hash order. That's not a problem

[10:06] <Geth> ¦ rakudo/main: because positionals will be sorted lexicographically anyway. It was

[10:06] <Geth> ¦ rakudo/main: a problem for slurpies, so just always add @_ before %_.

[10:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/bab7f837b6

[10:06] <Geth> ¦ rakudo/main: 445a224110 | (Stefan Seifert)++ | src/Raku/ast/code.rakumod

[10:06] <Geth> ¦ rakudo/main: RakuAST: give named placeholder params a fixed order in the signature

[10:06] <Geth> ¦ rakudo/main: 

[10:06] <Geth> ¦ rakudo/main: The old frontend added named placeholder parameters to the signature in

[10:06] <Geth> ¦ rakudo/main: the order of appearance in the block. In general we need compilation

[10:06] <Geth> ¦ rakudo/main: results to be reproducible. However, we go through placeholders in hash

[10:06] <Geth> ¦ rakudo/main: order. That's not a problem because positionals will be sorted

[10:06] <Geth> ¦ rakudo/main: lexicographically anyway. It was a problem for nameds, so just give them

[10:06] <Geth> ¦ rakudo/main: the same treatment as positionals.

[10:06] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/445a224110

[10:06] <nine> lizmat: these ^^^ take care of t/spec/S06-signature/unspecified.t flapping

[10:10] *** sena_kun joined
[10:15] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/issues/5119 do you agree with the expected behavior here?

[10:16] <discord-raku-bot> <Nemokosch> if so, it could get a test - a test that would already pass with the new frontend

[11:24] *** ab5tract joined
[11:33] <Geth> ¦ rakudo/main: 4a53b6b950 | (Stefan Seifert)++ | 2 files

[11:33] <Geth> ¦ rakudo/main: RakuAST: implement simple trimming of heredocs

[11:33] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/4a53b6b950

[11:33] <nine> Now at 111 test and 649 spectest files :)

[11:34] * lizmat throws away some stashed code  :-)

[11:35] <nine> Well I'm not sure if this is the whole thing (hence the "simple trimming")

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:20] <Geth> ¦ rakudo/main: 3a73a67efe | (Elizabeth Mattijsen)++ | src/core.c/RakuAST/Deparse.pm6

[12:20] <Geth> ¦ rakudo/main: Prevent double deparsing of :D and :U for now

[12:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/3a73a67efe

[12:20] <Geth> ¦ rakudo/main: 775bdb2832 | (Elizabeth Mattijsen)++ | src/Raku/ast/pair.rakumod

[12:20] <Geth> ¦ rakudo/main: Fix canonicalize of RakuAST::ColonPair::True/False

[12:20] <Geth> ¦ rakudo/main: 

[12:20] <Geth> ¦ rakudo/main: :D<True> and :U<True> don't really make sense in signatures

[12:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/775bdb2832

[12:32] <lizmat> m: my $A:D = 42; say $A:D    # I wonder whether colonpairs :D :U :_ should be reserved

[12:32] <camelia> rakudo-moar 775bdb283: OUTPUT: «42␤»

[12:32] <lizmat> m: my $A:U = 42; say $A:U

[12:32] <camelia> rakudo-moar 775bdb283: OUTPUT: «42␤»

[12:32] <lizmat> m: my $A:_ = 42; say $A:_

[12:32] <camelia> rakudo-moar 775bdb283: OUTPUT: «42␤»

[12:33] <lizmat> and thus become part of RakuAST::Name

[12:33] <lizmat> with :D / :U / :_ as an additional flag on RakuAST::Name

[12:34] <nine> why?

[12:34] <lizmat> and disallow multiple occurences:

[12:34] <lizmat> m: my $A:D:U:_ = 42; say $A:D:U:_

[12:34] <camelia> rakudo-moar 775bdb283: OUTPUT: «42␤»

[12:35] <lizmat> because it is confusing 

[12:36] <lizmat> m: my \A:D:U:_ = 42; say A:D:U:_

[12:36] <camelia> rakudo-moar 775bdb283: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '&A:D:U:_' is not declared.  Perhaps you forgot a 'sub' if␤this was intended to be part of a signature?␤at <tmp>:1␤------> my \A:D:U:_ = 42; say ⏏A:D:U:_␤»

[12:36] <lizmat> you *can* define it sigilless, but not use it

[12:40] <lizmat> anyways, 111 / 649 confirmed here  :-)

[12:41] <nine> I'm looking into the failing heredoc tests and it's....odd. They fail because we lose the postprocessors, e.g. q:w:to becomes q:to. This apparently happens because RakuAST::Actions::nibbler first creates a RakuAST::Heredoc with heredoc postprocessor and then a RakuAST::QuotedString with the words postprocessor, but this QuotedString doesn't appear in the final AST.

[12:42] <lizmat> yeah, I lost track of that somewhere as well...

[12:44] <lizmat> nine: re BUILDPLAN, I think the BUILDPLAN is currently not set up correctly

[12:44] <lizmat> compare:

[12:45] <lizmat> m: class A { has $.a = 42 }; dd A.new; use BUILDPLAN A

[12:45] <camelia> rakudo-moar 775bdb283: OUTPUT: «class A BUILDPLAN:␤ 0: nqp::getattr(obj,A,'$!a') = :$a if possible␤ 1: nqp::getattr(obj,A,'$!a') = 42 if not set␤A.new(a => 42)␤»

[12:45] <lizmat> with:

[12:45] <lizmat> m: use MONKEY; EVAL Q| class A { has $.a = 42 }; dd A.new; use BUILDPLAN A |.AST

[12:45] <camelia> rakudo-moar 775bdb283: OUTPUT: «class A BUILDPLAN:␤ 0: nqp::getattr(obj,A,'$!a') = :$a if possible␤ 1: vivify nqp::getattr(obj,A,'$!a') if part of a mixin␤A.new(a => Any)␤»

[12:52] <discord-raku-bot> <Nemokosch> Hm, could you please take a look at the issue I sent? Probably a simple "the expectation is right/wrong" would do

[12:56] <discord-raku-bot> <:(**@rest, *%rest)> there is postfix | in that?

[12:57] <discord-raku-bot> <:(**@rest, *%rest)> oh wait its a quote

[12:57] <discord-raku-bot> <:(**@rest, *%rest)> Q|hello|

[13:17] *** ab5tract left
[13:45] <Geth> ¦ rakudo/main: fc9cbd3eb1 | (Stefan Seifert)++ | 2 files

[13:45] <Geth> ¦ rakudo/main: RakuAST: fix missing post processors on heredocs

[13:45] <Geth> ¦ rakudo/main: 

[13:45] <Geth> ¦ rakudo/main: We silently dropped the post processor from eg. q:w:to and treated it

[13:45] <Geth> ¦ rakudo/main: like q:to. Fix by stealing not only the segments, but also the

[13:45] <Geth> ¦ rakudo/main: processors from the temporary QuotedString object that gets generated.

[13:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/fc9cbd3eb1

[13:45] <Geth> ¦ rakudo/main: 0ccec24cd6 | (Stefan Seifert)++ | src/Raku/ast/literals.rakumod

[13:45] <Geth> ¦ rakudo/main: RakuAST: dump post processors on quoted strings as extras

[13:45] <Geth> ¦ rakudo/main: 

[13:45] <Geth> ¦ rakudo/main: Post processors have significant impact on the generated code and this

[13:45] <Geth> ¦ rakudo/main: code's result, so include information about them in the AST dump output.

[13:45] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/0ccec24cd6

[13:46] <nine> t/12-rakuast/heredocs.rakutest is also passing now :)

[13:51] <lizmat> cool!   

[13:54] *** raschip joined
[13:55] <nine> The regex related failures are weird. They are not because the regex wouldn't match. They are because we get True instead of a Match object. But that seems to only happen in those tests. An `is "foo" ~~ /./, "f"` in RakuAST succeeds

[13:57] <nine> I seem to remember that smart match usually returns Bools, except for that regex case. Right? How does it even decide that?

[14:00] <lizmat> the associated .ACCEPTS decides

[14:09] <nine> WTF

[14:09] <nine> is $target ~~ $_, $target, "@type[$++]: pass case" for EVAL($ast), EVAL($deparsed); fails because we get True instead of Match object

[14:10] <nine> for EVAL($ast), EVAL($deparsed) { is $target ~~ $_, $target, "@type[$++]: pass case" } fails for the same reason

[14:10] <nine> for EVAL($ast), EVAL($deparsed) -> $m { is $target ~~ $m, $target, "@type[$++]: pass case" } passes!

[14:11] <lizmat> hmmm   difference in containerization ?

[14:11] <lizmat> or difference between PointyBlock and Block with implicit topic ?

[14:13] <nine> No, I think it's smartmatch itself

[14:16] <nine> > RAKUDO_RAKUAST=1 ./rakudo-m -e 'dd "f" ~~ $_ with /./'

[14:16] <nine> Bool::True

[14:18] <lizmat> afk&

[14:44] <Geth> ¦ rakudo/main: 8f9a54e92f | (Stefan Seifert)++ | src/Raku/ast/expressions.rakumod

[14:44] <Geth> ¦ rakudo/main: RakuAST: fix smartmatch on $_ containing a regex boolifying result

[14:44] <Geth> ¦ rakudo/main: 

[14:44] <Geth> ¦ rakudo/main: Looking at the old compiler frontend, it seems like we don't need the

[14:44] <Geth> ¦ rakudo/main: special smartmatch handling if the right hand side is a plain variable.

[14:44] <Geth> ¦ rakudo/main: While it worked in most cases anyway, things got confusing when that

[14:44] <Geth> ¦ rakudo/main: variable was $_. Then temporarization of that variable disturbed the

[14:44] <Geth> ¦ rakudo/main: check whether the right hand side was a Regex (which doesn't want its

[14:44] <Geth> ¦ rakudo/main: result to be boolified). Avoid the whole thing by just compiling to

[14:44] <Geth> ¦ rakudo/main: a call to infix:sym<~~> for variables. Just like the old frontend.

[14:44] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/8f9a54e92f

[14:44] <nine> And this takes care of t/12-rakuast/regex-charclass.rakutest

[15:16] <Geth> ¦ rakudo/main: ea60d168b9 | (Stefan Seifert)++ | src/Raku/ast/signature.rakumod

[15:16] <Geth> ¦ rakudo/main: RakuAST: fix multi-dispatch on natively typed parameters

[15:16] <Geth> ¦ rakudo/main: 

[15:16] <Geth> ¦ rakudo/main: Need to set the appropriate flags when a parameter is natively typed.

[15:16] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ea60d168b9

[15:16] <nine> Aaaand 650 spectests!

[15:17] <nine> Also fixes most of the failures in t/12-rakuast/var.rakutest

[15:18] *** linkable6 left
[15:18] *** evalable6 left
[15:19] *** linkable6 joined
[15:20] *** evalable6 joined
[15:24] <nine> Oh wait....var.rakutest actually passes!

[15:24] <nine> Ah, because that one failing test is TODOed

[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[19:00] <releasable6> Next release in ≈4 days and ≈23 hours. There are no known blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:31] *** epony left
[19:54] <Geth> ¦ rakudo/main: ade6861e2c | (Stefan Seifert)++ | 2 files

[19:54] <Geth> ¦ rakudo/main: RakuAST: make custom operators available to EVALed code

[19:54] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/ade6861e2c

[20:11] <Geth> ¦ rakudo/main: a49f5a9777 | (Stefan Seifert)++ | src/Raku/ast/variable-declaration.rakumod

[20:11] <Geth> ¦ rakudo/main: RakuAST: fix initialization of shaped variables

[20:11] <Geth> ¦ rakudo/main: 

[20:11] <Geth> ¦ rakudo/main: We need to create an object of the container type, i.e. Array, instead

[20:11] <Geth> ¦ rakudo/main: of the default base type, i.e. Mu.

[20:11] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/a49f5a9777

[20:11] <nine> With this t/12-rakuast/operators.rakutest passes, too :)

[20:11] <nine> Now at 115 / 650

[20:13] <nine> Both remaining failing rakuast test files seem to stumble over some $/ issue

[20:13] <nine> Apart from that the major areas are language version support, producing the right error type/messages and POD

[20:58] *** epony joined
[21:09] <lizmat> 115 / 650 confirmed!

[21:09] <lizmat> afk again&

[21:20] <Geth> ¦ rakudo/main: 52b9092167 | (Stefan Seifert)++ | 2 files

[21:20] <Geth> ¦ rakudo/main: RakuAST: fix $/ not containing a List after s:g///

[21:20] <Geth> ¦ rakudo/main: 

[21:20] <Geth> ¦ rakudo/main: Apparently $/ can get overwritten by the APPLY-MATCHES call of a

[21:20] <Geth> ¦ rakudo/main: successful s:g///, so we need to set it twice.

[21:20] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/52b9092167

[21:20] <nine> Correction: 116 test files ;)

[22:03] <Geth> ¦ rakudo/main: c3c1f9c5e6 | (Stefan Seifert)++ | 2 files

[22:03] <Geth> ¦ rakudo/main: RakuAST: give start blocks/statements fresh $/ and $! variables

[22:03] <Geth> ¦ rakudo/main: 

[22:03] <Geth> ¦ rakudo/main: Code run in start blocks or with start prefix will run on a different

[22:03] <Geth> ¦ rakudo/main: thread. Sharing $/ and $! variables with the originator thread is a

[22:03] <Geth> ¦ rakudo/main: recipe for desaster, so don't do it.

[22:03] <Geth> ¦ rakudo/main: review: https://github.com/rakudo/rakudo/commit/c3c1f9c5e6

[22:03] <nine> And this fixes the last of the rakuast test failures. Now up to 117 test files. And this concludes my hacking for this weekend :)

[22:36] *** sena_kun left
